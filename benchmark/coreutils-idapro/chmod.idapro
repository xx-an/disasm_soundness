LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 25006C53E846E4D23D058F43D906839629327F7C3C3FEFBEDF032B7D4CDEB211
LOAD:0000000000000000 ; Input MD5    : EC4A75DC95E28686AA18F7832730C7FD
LOAD:0000000000000000 ; Input CRC32  : B8CF00B5
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/chmod
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'chmod.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'filemode.c'
LOAD:0000000000000000 ; Source File : 'modechange.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'root-dev-ino.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xfts.c'
LOAD:0000000000000000 ; Source File : 'fts.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'cycle-check.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'i-ring.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 437C0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0CBD0h               ; Size in file image
LOAD:00000000000000D8                 dq 0CBD0h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0DA30h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20DA30h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 670h                 ; Size in file image
LOAD:0000000000000110                 dq 850h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0DBF8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20DBF8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0B068h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0B068h               ; Physical address
LOAD:00000000000001B0                 dq 484h                 ; Size in file image
LOAD:00000000000001B8                 dq 484h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0DA30h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20DA30h              ; Physical address
LOAD:0000000000000220                 dq 5D0h                 ; Size in file image
LOAD:0000000000000228                 dq 5D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0DDh, 26h, 0FBh, 23h, 0A7h, 0C9h, 99h, 2Bh, 0FBh, 0C3h ; Desc
LOAD:0000000000000284                 db 87h, 71h, 0CBh, 93h, 4Ah, 6Ah, 3Fh, 0A1h, 0AEh, 0C5h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 41h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 41h, 42h, 47h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_9B8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_9B8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_9B8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_9B8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aQsort - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFcntl - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9B8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_9B8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_9B8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_9B8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9B8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_9B8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aLxstat - offset byte_9B8, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aOpenat - offset byte_9B8, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStackChkFail - offset byte_9B8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aGetoptLong - offset byte_9B8, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMbrtowc - offset byte_9B8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aFxstatat - offset byte_9B8, 12h, 0, 0, \ ; "__fxstatat"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_9B8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aAssertFail - offset byte_9B8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemset - offset byte_9B8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFclose+1 - offset byte_9B8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aClosedir - offset byte_9B8, 12h, 0, 0, \ ; "closedir"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aLibcStartMain - offset byte_9B8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMemcmp - offset byte_9B8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFputsUnlocked - offset byte_9B8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aCalloc - offset byte_9B8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aStrcmp - offset byte_9B8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aDirfd - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:00000000000005F8                            0>
LOAD:0000000000000610                 Elf64_Sym <offset aGmonStart - offset byte_9B8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aUmask - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "umask"
LOAD:0000000000000628                            0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemcpy - offset byte_9B8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFileno - offset byte_9B8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aXstat - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000670                            0>
LOAD:0000000000000688                 Elf64_Sym <offset aReaddir - offset byte_9B8, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aMalloc - offset byte_9B8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFflush - offset byte_9B8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFchmodat - offset byte_9B8, 12h, 0, 0, \ ; "fchmodat"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aNlLanginfo - offset byte_9B8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFxstat - offset byte_9B8, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFreading - offset byte_9B8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFchdir - offset byte_9B8, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aRealloc - offset byte_9B8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aSetlocale - offset byte_9B8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aPrintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMemmove - offset byte_9B8, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aError - offset byte_9B8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000007A8                            0>
LOAD:00000000000007C0                 Elf64_Sym <offset aOpen - offset byte_9B8, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000007C0                            0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFseeko - offset byte_9B8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFdopendir - offset byte_9B8, 12h, 0, 0, \ ; "fdopendir"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFstatfs - offset byte_9B8, 12h, 0, 0, \ ; "fstatfs"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aCxaAtexit - offset byte_9B8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aExit+1 - offset byte_9B8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFwrite - offset byte_9B8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFprintfChk - offset byte_9B8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aItmRegistertmc - offset byte_9B8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aMbsinit - offset byte_9B8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aIswprint - offset byte_9B8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCxaFinalize - offset byte_9B8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCtypeBLoc - offset byte_9B8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aStdout - offset byte_9B8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000008F8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aProgname - offset byte_9B8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000910                            offset __bss_start, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aProgramInvocat - offset byte_9B8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000928                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aPrognameFull - offset byte_9B8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000940                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9B8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000958                            offset __bss_start, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aStderr - offset byte_9B8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000970                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aOptind - offset byte_9B8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000988                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009A0                 Elf64_Sym <offset aOptarg - offset byte_9B8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009A0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000009B8 ; ELF String Table
LOAD:00000000000009B8 byte_9B8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009B8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000009B9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000D68↓o
LOAD:00000000000009C3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000009CA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009D7 aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000009DF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009E9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000009F1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009F9 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000A00 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A08 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000A12 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000A1B aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000A22 aError          db 'error',0            ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000A28 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A39 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A42 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A4B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A53 aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A5B aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000A61 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A61                                         ; LOAD:0000000000000838↑o
LOAD:0000000000000A67 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A67                                         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000A7F aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A8D aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A8D                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000AA4 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000AAB aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000AB2 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000AB9 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000ACA aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000AD1 aFchmodat       db 'fchmodat',0         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000ADA aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000AE8 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000AEF aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AF5 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000AFC aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AFC                                         ; LOAD:0000000000000550↑o
LOAD:0000000000000B03 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000B0A aUmask          db 'umask',0            ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000B10 aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B1A aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000B22 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B2E aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B3C aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000B43 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B4E aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000B55 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B61 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000B6A aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000B71 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B78 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B83 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B88 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B88                                         ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000BA6 aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000BAC aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000BBB aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000BC1 aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000BC8 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000BD0 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BD8 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000BD8                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000BE7 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BF2 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000BF9 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000BF9                                         ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000C0B aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000C11 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000C18 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C27 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000C2C aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C37 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C47 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C54 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D78↓o
LOAD:0000000000000C5E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000D88↓o
LOAD:0000000000000C6A aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000D98↓o
LOAD:0000000000000C75 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DA8↓o
LOAD:0000000000000C7F aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000DB8↓o
LOAD:0000000000000C8B aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000C8B                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000CA7 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000CB6 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CB6                                         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000CD0 ; ELF GNU Symbol Version Table
LOAD:0000000000000CD0                 dw 0
LOAD:0000000000000CD2                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000CD4                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000CD6                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000CD8                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000CDA                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000CDC                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000CDE                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000CE0                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000CE2                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000CE4                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000CE6                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000CE8                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000CEA                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000CEC                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000CEE                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000CF0                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000CF2                 dw 3                    ; openat@@GLIBC_2.4
LOAD:0000000000000CF4                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000CF6                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000CF8                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000CFA                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000000CFC                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000CFE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D00                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D02                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D04                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000D06                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000000D08                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D0A                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D0C                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D0E                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D10                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000D12                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:0000000000000D14                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D16                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D1A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000000D20                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 3                    ; fchmodat@@GLIBC_2.4
LOAD:0000000000000D26                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D34                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D38                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000D3A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 3                    ; fdopendir@@GLIBC_2.4
LOAD:0000000000000D3E                 dw 2                    ; fstatfs@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D48                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D4A                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D52                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000D5C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000D60                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000D62                 dw 0
LOAD:0000000000000D64                 dw 0
LOAD:0000000000000D66                 dw 0
LOAD:0000000000000D68 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000D68                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9B8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D78                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_9B8, \ ; "GLIBC_2.3"
LOAD:0000000000000D78                                10h>
LOAD:0000000000000D88                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_9B8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000D88                                10h>
LOAD:0000000000000D98                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_9B8, \ ; "GLIBC_2.14"
LOAD:0000000000000D98                                10h>
LOAD:0000000000000DA8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_9B8, \ ; "GLIBC_2.4"
LOAD:0000000000000DA8                                10h>
LOAD:0000000000000DB8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9B8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000DC8 ; ELF RELA Relocation Table
LOAD:0000000000000DC8                 Elf64_Rela <20DA30h, 8, 28E0h> ; R_X86_64_RELATIVE +28E0h
LOAD:0000000000000DE0                 Elf64_Rela <20DA38h, 8, 28A0h> ; R_X86_64_RELATIVE +28A0h
LOAD:0000000000000DF8                 Elf64_Rela <20DA40h, 8, 9D9Fh> ; R_X86_64_RELATIVE +9D9Fh
LOAD:0000000000000E10                 Elf64_Rela <20DA60h, 8, 9DA7h> ; R_X86_64_RELATIVE +9DA7h
LOAD:0000000000000E28                 Elf64_Rela <20DA80h, 8, 9DB1h> ; R_X86_64_RELATIVE +9DB1h
LOAD:0000000000000E40                 Elf64_Rela <20DAA0h, 8, 9DB4h> ; R_X86_64_RELATIVE +9DB4h
LOAD:0000000000000E58                 Elf64_Rela <20DAC0h, 8, 9DC2h> ; R_X86_64_RELATIVE +9DC2h
LOAD:0000000000000E70                 Elf64_Rela <20DAE0h, 8, 9DC8h> ; R_X86_64_RELATIVE +9DC8h
LOAD:0000000000000E88                 Elf64_Rela <20DB00h, 8, 9DD2h> ; R_X86_64_RELATIVE +9DD2h
LOAD:0000000000000EA0                 Elf64_Rela <20DB20h, 8, 9DD9h> ; R_X86_64_RELATIVE +9DD9h
LOAD:0000000000000EB8                 Elf64_Rela <20DB40h, 8, 9DE1h> ; R_X86_64_RELATIVE +9DE1h
LOAD:0000000000000ED0                 Elf64_Rela <20DB60h, 8, 9DE6h> ; R_X86_64_RELATIVE +9DE6h
LOAD:0000000000000EE8                 Elf64_Rela <20DBA0h, 8, 0A6A1h> ; R_X86_64_RELATIVE +0A6A1h
LOAD:0000000000000F00                 Elf64_Rela <20DBA8h, 8, 0A6A9h> ; R_X86_64_RELATIVE +0A6A9h
LOAD:0000000000000F18                 Elf64_Rela <20DBB0h, 8, 0A6AFh> ; R_X86_64_RELATIVE +0A6AFh
LOAD:0000000000000F30                 Elf64_Rela <20DBB8h, 8, 0A6BCh> ; R_X86_64_RELATIVE +0A6BCh
LOAD:0000000000000F48                 Elf64_Rela <20DBC0h, 8, 0A6C9h> ; R_X86_64_RELATIVE +0A6C9h
LOAD:0000000000000F60                 Elf64_Rela <20DBC8h, 8, 0AEFBh> ; R_X86_64_RELATIVE +0AEFBh
LOAD:0000000000000F78                 Elf64_Rela <20DBD0h, 8, 0A6DDh> ; R_X86_64_RELATIVE +0A6DDh
LOAD:0000000000000F90                 Elf64_Rela <20DBD8h, 8, 0A6C2h> ; R_X86_64_RELATIVE +0A6C2h
LOAD:0000000000000FA8                 Elf64_Rela <20DBE0h, 8, 9CBEh> ; R_X86_64_RELATIVE +9CBEh
LOAD:0000000000000FC0                 Elf64_Rela <20DBE8h, 8, 0A6E5h> ; R_X86_64_RELATIVE +0A6E5h
LOAD:0000000000000FD8                 Elf64_Rela <20E008h, 8, 20E008h> ; R_X86_64_RELATIVE +20E008h
LOAD:0000000000000FF0                 Elf64_Rela <20E018h, 8, 0A5ACh> ; R_X86_64_RELATIVE +0A5ACh
LOAD:0000000000001008                 Elf64_Rela <20E080h, 8, 20E090h> ; R_X86_64_RELATIVE +20E090h
LOAD:0000000000001020                 Elf64_Rela <20E098h, 8, 20E140h> ; R_X86_64_RELATIVE +20E140h
LOAD:0000000000001038                 Elf64_Rela <20DFD0h, 100000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001050                 Elf64_Rela <20DFD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001068                 Elf64_Rela <20DFE0h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001080                 Elf64_Rela <20DFE8h, 2200000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001098                 Elf64_Rela <20DFF0h, 3C00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000010B0                 Elf64_Rela <20DFF8h, 3F00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000010C8                 Elf64_Rela <20E0A0h, 4200000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000010E0                 Elf64_Rela <20E0A8h, 4100000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000010F8                 Elf64_Rela <20E0B0h, 4700000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001110                 Elf64_Rela <20E0B8h, 4800000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001128                 Elf64_Rela <20E0C0h, 4400000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001140                 Elf64_Rela <20E0E0h, 4600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001158 ; ELF JMPREL Relocation Table
LOAD:0000000000001158                 Elf64_Rela <20DE00h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001170                 Elf64_Rela <20DE08h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001188                 Elf64_Rela <20DE10h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000011A0                 Elf64_Rela <20DE18h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000011B8                 Elf64_Rela <20DE20h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000011D0                 Elf64_Rela <20DE28h, 800000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:00000000000011E8                 Elf64_Rela <20DE30h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001200                 Elf64_Rela <20DE38h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001218                 Elf64_Rela <20DE40h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001230                 Elf64_Rela <20DE48h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001248                 Elf64_Rela <20DE50h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001260                 Elf64_Rela <20DE58h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001278                 Elf64_Rela <20DE60h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001290                 Elf64_Rela <20DE68h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:00000000000012A8                 Elf64_Rela <20DE70h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:00000000000012C0                 Elf64_Rela <20DE78h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000012D8                 Elf64_Rela <20DE80h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000012F0                 Elf64_Rela <20DE88h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001308                 Elf64_Rela <20DE90h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001320                 Elf64_Rela <20DE98h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001338                 Elf64_Rela <20DEA0h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001350                 Elf64_Rela <20DEA8h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001368                 Elf64_Rela <20DEB0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001380                 Elf64_Rela <20DEB8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001398                 Elf64_Rela <20DEC0h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:00000000000013B0                 Elf64_Rela <20DEC8h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000013C8                 Elf64_Rela <20DED0h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000013E0                 Elf64_Rela <20DED8h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000013F8                 Elf64_Rela <20DEE0h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001410                 Elf64_Rela <20DEE8h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000001428                 Elf64_Rela <20DEF0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:0000000000001440                 Elf64_Rela <20DEF8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001458                 Elf64_Rela <20DF00h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001470                 Elf64_Rela <20DF08h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001488                 Elf64_Rela <20DF10h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:00000000000014A0                 Elf64_Rela <20DF18h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000014B8                 Elf64_Rela <20DF20h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000014D0                 Elf64_Rela <20DF28h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fchmodat
LOAD:00000000000014E8                 Elf64_Rela <20DF30h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001500                 Elf64_Rela <20DF38h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001518                 Elf64_Rela <20DF40h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001530                 Elf64_Rela <20DF48h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000001548                 Elf64_Rela <20DF50h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001560                 Elf64_Rela <20DF58h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001578                 Elf64_Rela <20DF60h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001590                 Elf64_Rela <20DF68h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:00000000000015A8                 Elf64_Rela <20DF70h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000015C0                 Elf64_Rela <20DF78h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000015D8                 Elf64_Rela <20DF80h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000015F0                 Elf64_Rela <20DF88h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:0000000000001608                 Elf64_Rela <20DF90h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:0000000000001620                 Elf64_Rela <20DF98h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001638                 Elf64_Rela <20DFA0h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001650                 Elf64_Rela <20DFA8h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001668                 Elf64_Rela <20DFB0h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001680                 Elf64_Rela <20DFB8h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001698                 Elf64_Rela <20DFC0h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000016B0                 Elf64_Rela <20DFC8h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000016B0 LOAD            ends
LOAD:00000000000016B0
.init:00000000000016C8 ; ===========================================================================
.init:00000000000016C8
.init:00000000000016C8 ; Segment type: Pure code
.init:00000000000016C8 ; Segment permissions: Read/Execute
.init:00000000000016C8 _init           segment dword public 'CODE' use64
.init:00000000000016C8                 assume cs:_init
.init:00000000000016C8                 ;org 16C8h
.init:00000000000016C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000016C8
.init:00000000000016C8 ; =============== S U B R O U T I N E =======================================
.init:00000000000016C8
.init:00000000000016C8
.init:00000000000016C8                 public _init_proc
.init:00000000000016C8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000016C8                 sub     rsp, 8          ; _init
.init:00000000000016CC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000016D3                 test    rax, rax
.init:00000000000016D6                 jz      short loc_16DA
.init:00000000000016D8                 call    rax ; __gmon_start__
.init:00000000000016DA
.init:00000000000016DA loc_16DA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000016DA                 add     rsp, 8
.init:00000000000016DE                 retn
.init:00000000000016DE _init_proc      endp
.init:00000000000016DE
.init:00000000000016DE _init           ends
.init:00000000000016DE
LOAD:00000000000016DF ; ===========================================================================
LOAD:00000000000016DF
LOAD:00000000000016DF ; Segment type: Pure code
LOAD:00000000000016DF ; Segment permissions: Read/Execute
LOAD:00000000000016DF LOAD            segment byte public 'CODE' use64
LOAD:00000000000016DF                 assume cs:LOAD
LOAD:00000000000016DF                 ;org 16DFh
LOAD:00000000000016DF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016DF                 align 20h
LOAD:00000000000016DF LOAD            ends
LOAD:00000000000016DF
.plt:00000000000016E0 ; ===========================================================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Segment type: Pure code
.plt:00000000000016E0 ; Segment permissions: Read/Execute
.plt:00000000000016E0 _plt            segment para public 'CODE' use64
.plt:00000000000016E0                 assume cs:_plt
.plt:00000000000016E0                 ;org 16E0h
.plt:00000000000016E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0
.plt:00000000000016E0 sub_16E0        proc near               ; CODE XREF: .plt:00000000000016FB↓j
.plt:00000000000016E0                                         ; .plt:000000000000170B↓j ...
.plt:00000000000016E0 ; __unwind {
.plt:00000000000016E0                 push    cs:qword_20DDF0
.plt:00000000000016E6                 jmp     cs:qword_20DDF8
.plt:00000000000016E6 sub_16E0        endp
.plt:00000000000016E6
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016EC                 align 10h
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: noreturn thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; void __noreturn abort(void)
.plt:00000000000016F0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000016F0                                         ; quotearg_buffer_restyled:def_3741↓p ...
.plt:00000000000016F0                 jmp     cs:abort_ptr
.plt:00000000000016F0 _abort          endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    0
.plt:00000000000016FB                 jmp     sub_16E0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; int *__errno_location(void)
.plt:0000000000001700 ___errno_location proc near             ; CODE XREF: main+2E4↓p
.plt:0000000000001700                                         ; main+2FC↓p ...
.plt:0000000000001700                 jmp     cs:__errno_location_ptr
.plt:0000000000001700 ___errno_location endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    1
.plt:000000000000170B                 jmp     sub_16E0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001710 _strncmp        proc near               ; CODE XREF: usage+2C4↓p
.plt:0000000000001710                                         ; usage+385↓p
.plt:0000000000001710                 jmp     cs:strncmp_ptr
.plt:0000000000001710 _strncmp        endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    2
.plt:000000000000171B                 jmp     sub_16E0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: noreturn thunk
.plt:0000000000001720
.plt:0000000000001720 ; void __noreturn _exit(int status)
.plt:0000000000001720 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001720                 jmp     cs:_exit_ptr
.plt:0000000000001720 __exit          endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    3
.plt:000000000000172B                 jmp     sub_16E0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; size_t __fpending(FILE *fp)
.plt:0000000000001730 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001730                 jmp     cs:__fpending_ptr
.plt:0000000000001730 ___fpending     endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    4
.plt:000000000000173B                 jmp     sub_16E0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000001740 _qsort          proc near               ; CODE XREF: fts_sort+7C↓p
.plt:0000000000001740                 jmp     cs:qsort_ptr
.plt:0000000000001740 _qsort          endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    5
.plt:000000000000174B                 jmp     sub_16E0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001750 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001750                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001750                 jmp     cs:fcntl_ptr
.plt:0000000000001750 _fcntl          endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    6
.plt:000000000000175B                 jmp     sub_16E0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; char *textdomain(const char *domainname)
.plt:0000000000001760 _textdomain     proc near               ; CODE XREF: main+72↓p
.plt:0000000000001760                 jmp     cs:textdomain_ptr
.plt:0000000000001760 _textdomain     endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    7
.plt:000000000000176B                 jmp     sub_16E0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; int fclose(FILE *stream)
.plt:0000000000001770 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001770                                         ; rpl_fclose+6B↓j
.plt:0000000000001770                 jmp     cs:fclose_ptr
.plt:0000000000001770 _fclose         endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    8
.plt:000000000000177B                 jmp     sub_16E0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001780 _bindtextdomain proc near               ; CODE XREF: main+66↓p
.plt:0000000000001780                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001780 _bindtextdomain endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    9
.plt:000000000000178B                 jmp     sub_16E0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001790 _dcgettext      proc near               ; CODE XREF: main+3F2↓p
.plt:0000000000001790                                         ; main+4B2↓p ...
.plt:0000000000001790                 jmp     cs:dcgettext_ptr
.plt:0000000000001790 _dcgettext      endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    0Ah
.plt:000000000000179B                 jmp     sub_16E0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000017A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000017A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000017A0 ___ctype_get_mb_cur_max endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    0Bh
.plt:00000000000017AB                 jmp     sub_16E0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; size_t strlen(const char *s)
.plt:00000000000017B0 _strlen         proc near               ; CODE XREF: main+1EC↓p
.plt:00000000000017B0                                         ; quotearg_buffer_restyled+157↓p ...
.plt:00000000000017B0                 jmp     cs:strlen_ptr
.plt:00000000000017B0 _strlen         endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    0Ch
.plt:00000000000017BB                 jmp     sub_16E0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000017C0 ___lxstat       proc near               ; CODE XREF: get_root_dev_ino+2D↓p
.plt:00000000000017C0                                         ; fts_stat+15C↓p
.plt:00000000000017C0                 jmp     cs:__lxstat_ptr
.plt:00000000000017C0 ___lxstat       endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    0Dh
.plt:00000000000017CB                 jmp     sub_16E0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; int openat(int fd, const char *file, int oflag, ...)
.plt:00000000000017D0 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:00000000000017D0                 jmp     cs:openat_ptr
.plt:00000000000017D0 _openat         endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    0Eh
.plt:00000000000017DB                 jmp     sub_16E0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: noreturn thunk
.plt:00000000000017E0
.plt:00000000000017E0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2711↓p
.plt:00000000000017E0                                         ; mode_create_from_ref:loc_33A4↓p ...
.plt:00000000000017E0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000017E0 ___stack_chk_fail endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    0Fh
.plt:00000000000017EB                 jmp     sub_16E0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000017F0 _getopt_long    proc near               ; CODE XREF: main+BE↓p
.plt:00000000000017F0                 jmp     cs:getopt_long_ptr
.plt:00000000000017F0 _getopt_long    endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    10h
.plt:00000000000017FB                 jmp     sub_16E0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001800 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001800                 jmp     cs:mbrtowc_ptr
.plt:0000000000001800 _mbrtowc        endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    11h
.plt:000000000000180B                 jmp     sub_16E0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000001810 ___fxstatat     proc near               ; CODE XREF: main+906↓p
.plt:0000000000001810                                         ; fts_stat+9E↓p
.plt:0000000000001810                 jmp     cs:__fxstatat_ptr
.plt:0000000000001810 ___fxstatat     endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    12h
.plt:000000000000181B                 jmp     sub_16E0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; char *strrchr(const char *s, int c)
.plt:0000000000001820 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001820                                         ; rpl_fts_read+2F6↓p
.plt:0000000000001820                 jmp     cs:strrchr_ptr
.plt:0000000000001820 _strrchr        endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    13h
.plt:000000000000182B                 jmp     sub_16E0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001830 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001830                                         ; rpl_fseeko+3B↓p
.plt:0000000000001830                 jmp     cs:lseek_ptr
.plt:0000000000001830 _lseek          endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    14h
.plt:000000000000183B                 jmp     sub_16E0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: noreturn thunk
.plt:0000000000001840
.plt:0000000000001840 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001840 ___assert_fail  proc near               ; CODE XREF: xfts_open+4A↓p
.plt:0000000000001840                                         ; cycle_check+85↓p
.plt:0000000000001840                 jmp     cs:__assert_fail_ptr
.plt:0000000000001840 ___assert_fail  endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    15h
.plt:000000000000184B                 jmp     sub_16E0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001850 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001850                                         ; xzalloc+12↓j
.plt:0000000000001850                 jmp     cs:memset_ptr
.plt:0000000000001850 _memset         endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    16h
.plt:000000000000185B                 jmp     sub_16E0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; int close(int fd)
.plt:0000000000001860 _close          proc near               ; CODE XREF: fd_ring_clear+32↓p
.plt:0000000000001860                                         ; cwd_advance_fd+3F↓p ...
.plt:0000000000001860                 jmp     cs:close_ptr
.plt:0000000000001860 _close          endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    17h
.plt:000000000000186B                 jmp     sub_16E0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; int closedir(DIR *dirp)
.plt:0000000000001870 _closedir       proc near               ; CODE XREF: fts_lfree+1D↓p
.plt:0000000000001870                                         ; fts_build+544↓p ...
.plt:0000000000001870                 jmp     cs:closedir_ptr
.plt:0000000000001870 _closedir       endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    18h
.plt:000000000000187B                 jmp     sub_16E0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001880 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001880                 jmp     cs:memcmp_ptr
.plt:0000000000001880 _memcmp         endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    19h
.plt:000000000000188B                 jmp     sub_16E0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001890 _fputs_unlocked proc near               ; CODE XREF: usage+A3↓p
.plt:0000000000001890                                         ; usage+C8↓p ...
.plt:0000000000001890                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001890 _fputs_unlocked endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    1Ah
.plt:000000000000189B                 jmp     sub_16E0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000018A0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000018A0                                         ; rpl_fts_open+48↓p ...
.plt:00000000000018A0                 jmp     cs:calloc_ptr
.plt:00000000000018A0 _calloc         endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    1Bh
.plt:00000000000018AB                 jmp     sub_16E0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000018B0 _strcmp         proc near               ; CODE XREF: main+A02↓p
.plt:00000000000018B0                 jmp     cs:strcmp_ptr
.plt:00000000000018B0 _strcmp         endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    1Ch
.plt:00000000000018BB                 jmp     sub_16E0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; int dirfd(DIR *dirp)
.plt:00000000000018C0 _dirfd          proc near               ; CODE XREF: fts_build+3D↓p
.plt:00000000000018C0                 jmp     cs:dirfd_ptr
.plt:00000000000018C0 _dirfd          endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    1Dh
.plt:00000000000018CB                 jmp     sub_16E0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; __mode_t umask(__mode_t mask)
.plt:00000000000018D0 _umask          proc near               ; CODE XREF: main+67F↓p
.plt:00000000000018D0                 jmp     cs:umask_ptr
.plt:00000000000018D0 _umask          endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    1Eh
.plt:00000000000018DB                 jmp     sub_16E0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000018E0 _memcpy         proc near               ; CODE XREF: main+223↓p
.plt:00000000000018E0                                         ; xmemdup+23↓j ...
.plt:00000000000018E0                 jmp     cs:memcpy_ptr
.plt:00000000000018E0 _memcpy         endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    1Fh
.plt:00000000000018EB                 jmp     sub_16E0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int fileno(FILE *stream)
.plt:00000000000018F0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000018F0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000018F0                 jmp     cs:fileno_ptr
.plt:00000000000018F0 _fileno         endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    20h ; ' '
.plt:00000000000018FB                 jmp     sub_16E0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001900 ___xstat        proc near               ; CODE XREF: mode_create_from_ref+26↓p
.plt:0000000000001900                                         ; fts_stat+28↓p
.plt:0000000000001900                 jmp     cs:__xstat_ptr
.plt:0000000000001900 ___xstat        endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    21h ; '!'
.plt:000000000000190B                 jmp     sub_16E0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000001910 _readdir        proc near               ; CODE XREF: fts_build+1F2↓p
.plt:0000000000001910                 jmp     cs:readdir_ptr
.plt:0000000000001910 _readdir        endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    22h ; '"'
.plt:000000000000191B                 jmp     sub_16E0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; void *malloc(size_t size)
.plt:0000000000001920 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001920                                         ; fts_alloc+1E↓p ...
.plt:0000000000001920                 jmp     cs:malloc_ptr
.plt:0000000000001920 _malloc         endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    23h ; '#'
.plt:000000000000192B                 jmp     sub_16E0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; int fflush(FILE *stream)
.plt:0000000000001930 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001930                                         ; rpl_fflush+3B↓j
.plt:0000000000001930                 jmp     cs:fflush_ptr
.plt:0000000000001930 _fflush         endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    24h ; '$'
.plt:000000000000193B                 jmp     sub_16E0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; int fchmodat(int fd, const char *file, __mode_t mode, int flag)
.plt:0000000000001940 _fchmodat       proc near               ; CODE XREF: main+5E7↓p
.plt:0000000000001940                 jmp     cs:fchmodat_ptr
.plt:0000000000001940 _fchmodat       endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    25h ; '%'
.plt:000000000000194B                 jmp     sub_16E0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; char *nl_langinfo(nl_item item)
.plt:0000000000001950 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001950                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001950 _nl_langinfo    endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    26h ; '&'
.plt:000000000000195B                 jmp     sub_16E0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001960 ___fxstat       proc near               ; CODE XREF: fts_safe_changedir+BD↓p
.plt:0000000000001960                 jmp     cs:__fxstat_ptr
.plt:0000000000001960 ___fxstat       endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    27h ; '''
.plt:000000000000196B                 jmp     sub_16E0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; int __freading(FILE *fp)
.plt:0000000000001970 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001970                                         ; rpl_fflush+9↓p
.plt:0000000000001970                 jmp     cs:__freading_ptr
.plt:0000000000001970 ___freading     endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    28h ; '('
.plt:000000000000197B                 jmp     sub_16E0
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int fchdir(int fd)
.plt:0000000000001980 _fchdir         proc near               ; CODE XREF: restore_initial_cwd+1D↓p
.plt:0000000000001980                                         ; fts_safe_changedir+17C↓p ...
.plt:0000000000001980                 jmp     cs:fchdir_ptr
.plt:0000000000001980 _fchdir         endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    29h ; ')'
.plt:000000000000198B                 jmp     sub_16E0
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001990 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001990                                         ; fts_sort+40↓p ...
.plt:0000000000001990                 jmp     cs:realloc_ptr
.plt:0000000000001990 _realloc        endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    2Ah ; '*'
.plt:000000000000199B                 jmp     sub_16E0
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; char *setlocale(int category, const char *locale)
.plt:00000000000019A0 _setlocale      proc near               ; CODE XREF: main+53↓p
.plt:00000000000019A0                                         ; usage+2AB↓p ...
.plt:00000000000019A0                 jmp     cs:setlocale_ptr
.plt:00000000000019A0 _setlocale      endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    2Bh ; '+'
.plt:00000000000019AB                 jmp     sub_16E0
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ___printf_chk   proc near               ; CODE XREF: main+716↓p
.plt:00000000000019B0                                         ; main+767↓p ...
.plt:00000000000019B0                 jmp     cs:__printf_chk_ptr
.plt:00000000000019B0 ___printf_chk   endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    2Ch ; ','
.plt:00000000000019BB                 jmp     sub_16E0
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:00000000000019C0 _memmove        proc near               ; CODE XREF: fts_build+3B5↓p
.plt:00000000000019C0                                         ; rpl_fts_read+2E9↓p ...
.plt:00000000000019C0                 jmp     cs:memmove_ptr
.plt:00000000000019C0 _memmove        endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    2Dh ; '-'
.plt:00000000000019CB                 jmp     sub_16E0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000019D0 _error          proc near               ; CODE XREF: main+405↓p
.plt:00000000000019D0                                         ; main+4C3↓p ...
.plt:00000000000019D0                 jmp     cs:error_ptr
.plt:00000000000019D0 _error          endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    2Eh ; '.'
.plt:00000000000019DB                 jmp     sub_16E0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; int open(const char *file, int oflag, ...)
.plt:00000000000019E0 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:00000000000019E0                 jmp     cs:open_ptr
.plt:00000000000019E0 _open           endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    2Fh ; '/'
.plt:00000000000019EB                 jmp     sub_16E0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000019F0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_9AEA↓j
.plt:00000000000019F0                 jmp     cs:fseeko_ptr
.plt:00000000000019F0 _fseeko         endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    30h ; '0'
.plt:00000000000019FB                 jmp     sub_16E0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; DIR *fdopendir(int fd)
.plt:0000000000001A00 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:0000000000001A00                 jmp     cs:fdopendir_ptr
.plt:0000000000001A00 _fdopendir      endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    31h ; '1'
.plt:0000000000001A0B                 jmp     sub_16E0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000001A10 _fstatfs        proc near               ; CODE XREF: filesystem_type+C8↓p
.plt:0000000000001A10                 jmp     cs:fstatfs_ptr
.plt:0000000000001A10 _fstatfs        endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    32h ; '2'
.plt:0000000000001A1B                 jmp     sub_16E0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001A20 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001A20                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001A20 ___cxa_atexit   endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    33h ; '3'
.plt:0000000000001A2B                 jmp     sub_16E0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: noreturn thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; void __noreturn exit(int status)
.plt:0000000000001A30 _exit           proc near               ; CODE XREF: main+187↓p
.plt:0000000000001A30                                         ; usage+58↓p
.plt:0000000000001A30                 jmp     cs:exit_ptr
.plt:0000000000001A30 _exit           endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    34h ; '4'
.plt:0000000000001A3B                 jmp     sub_16E0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001A40 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001A40                 jmp     cs:fwrite_ptr
.plt:0000000000001A40 _fwrite         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    35h ; '5'
.plt:0000000000001A4B                 jmp     sub_16E0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001A50                                         ; version_etc_arn+37↓p ...
.plt:0000000000001A50                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001A50 ___fprintf_chk  endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    36h ; '6'
.plt:0000000000001A5B                 jmp     sub_16E0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001A60 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001A60                 jmp     cs:mbsinit_ptr
.plt:0000000000001A60 _mbsinit        endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    37h ; '7'
.plt:0000000000001A6B                 jmp     sub_16E0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int iswprint(wint_t wc)
.plt:0000000000001A70 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001A70                 jmp     cs:iswprint_ptr
.plt:0000000000001A70 _iswprint       endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    38h ; '8'
.plt:0000000000001A7B                 jmp     sub_16E0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001A80 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001A80                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001A80 ___ctype_b_loc  endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    39h ; '9'
.plt:0000000000001A8B                 jmp     sub_16E0
.plt:0000000000001A8B ; } // starts at 16E0
.plt:0000000000001A8B _plt            ends
.plt:0000000000001A8B
.plt.got:0000000000001A90 ; ===========================================================================
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; Segment type: Pure code
.plt.got:0000000000001A90 ; Segment permissions: Read/Execute
.plt.got:0000000000001A90 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001A90                 assume cs:_plt_got
.plt.got:0000000000001A90                 ;org 1A90h
.plt.got:0000000000001A90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; Attributes: thunk
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; void free(void *ptr)
.plt.got:0000000000001A90 free            proc near               ; CODE XREF: mode_compile+B6↓p
.plt.got:0000000000001A90                                         ; quotearg_n_options+115↓p ...
.plt.got:0000000000001A90 ; __unwind {
.plt.got:0000000000001A90                 jmp     cs:free_ptr
.plt.got:0000000000001A90 free            endp
.plt.got:0000000000001A90
.plt.got:0000000000001A90 ; ---------------------------------------------------------------------------
.plt.got:0000000000001A96                 align 8
.plt.got:0000000000001A98
.plt.got:0000000000001A98 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001A98
.plt.got:0000000000001A98 ; Attributes: thunk
.plt.got:0000000000001A98
.plt.got:0000000000001A98 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001A98 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001A98                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001A98 __cxa_finalize  endp
.plt.got:0000000000001A98
.plt.got:0000000000001A98 ; ---------------------------------------------------------------------------
.plt.got:0000000000001A9E                 align 20h
.plt.got:0000000000001A9E ; } // starts at 1A90
.plt.got:0000000000001A9E _plt_got        ends
.plt.got:0000000000001A9E
.text:0000000000001AA0 ; ===========================================================================
.text:0000000000001AA0
.text:0000000000001AA0 ; Segment type: Pure code
.text:0000000000001AA0 ; Segment permissions: Read/Execute
.text:0000000000001AA0 _text           segment para public 'CODE' use64
.text:0000000000001AA0                 assume cs:_text
.text:0000000000001AA0                 ;org 1AA0h
.text:0000000000001AA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001AA0
.text:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AA0
.text:0000000000001AA0
.text:0000000000001AA0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001AA0                 public main
.text:0000000000001AA0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001AA0
.text:0000000000001AA0 var_128         = dword ptr -128h
.text:0000000000001AA0 var_124         = dword ptr -124h
.text:0000000000001AA0 src             = qword ptr -120h
.text:0000000000001AA0 var_118         = qword ptr -118h
.text:0000000000001AA0 var_110         = qword ptr -110h
.text:0000000000001AA0 var_108         = qword ptr -108h
.text:0000000000001AA0 file            = qword ptr -100h
.text:0000000000001AA0 var_F0          = qword ptr -0F0h
.text:0000000000001AA0 stat_buf        = stat ptr -0E8h
.text:0000000000001AA0 var_58          = byte ptr -58h
.text:0000000000001AA0 var_4E          = byte ptr -4Eh
.text:0000000000001AA0 var_4C          = byte ptr -4Ch
.text:0000000000001AA0 var_4B          = byte ptr -4Bh
.text:0000000000001AA0 var_42          = byte ptr -42h
.text:0000000000001AA0 var_40          = qword ptr -40h
.text:0000000000001AA0
.text:0000000000001AA0 ; __unwind {
.text:0000000000001AA0                 push    r15
.text:0000000000001AA2                 push    r14
.text:0000000000001AA4                 xor     r15d, r15d
.text:0000000000001AA7                 push    r13
.text:0000000000001AA9                 push    r12
.text:0000000000001AAB                 xor     r14d, r14d
.text:0000000000001AAE                 push    rbp
.text:0000000000001AAF                 push    rbx
.text:0000000000001AB0                 movsxd  rbp, edi
.text:0000000000001AB3                 mov     rbx, rsi
.text:0000000000001AB6                 xor     r12d, r12d
.text:0000000000001AB9                 xor     r13d, r13d
.text:0000000000001ABC                 sub     rsp, 0F8h
.text:0000000000001AC3                 mov     rdi, [rsi]
.text:0000000000001AC6                 mov     rax, fs:28h
.text:0000000000001ACF                 mov     [rsp+128h+var_40], rax
.text:0000000000001AD7                 xor     eax, eax
.text:0000000000001AD9                 mov     [rsp+128h+var_F0], 0
.text:0000000000001AE2                 call    set_program_name
.text:0000000000001AE7                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001AEE                 mov     edi, 6          ; category
.text:0000000000001AF3                 call    _setlocale
.text:0000000000001AF8                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001AFF                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B06                 call    _bindtextdomain
.text:0000000000001B0B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001B12                 call    _textdomain
.text:0000000000001B17                 lea     rdi, close_stdout
.text:0000000000001B1E                 call    atexit
.text:0000000000001B23                 lea     rax, [rsp+128h+var_F0]
.text:0000000000001B28                 mov     cs:diagnose_surprises, 0
.text:0000000000001B2F                 mov     cs:force_silent, 0
.text:0000000000001B36                 mov     cs:recurse, 0
.text:0000000000001B3D                 mov     [rsp+128h+var_110], rax
.text:0000000000001B42                 nop     word ptr [rax+rax+00h]
.text:0000000000001B48
.text:0000000000001B48 loc_1B48:                               ; CODE XREF: main+114↓j
.text:0000000000001B48                                         ; main+1AB↓j ...
.text:0000000000001B48                 lea     rcx, long_options ; longopts
.text:0000000000001B4F                 lea     rdx, shortopts  ; "Rcfvr::w::x::X::s::t::u::g::o::a::,::+:"...
.text:0000000000001B56                 xor     r8d, r8d        ; longind
.text:0000000000001B59                 mov     rsi, rbx        ; argv
.text:0000000000001B5C                 mov     edi, ebp        ; argc
.text:0000000000001B5E                 call    _getopt_long
.text:0000000000001B63                 cmp     eax, 0FFFFFFFFh
.text:0000000000001B66                 jz      loc_1D54
.text:0000000000001B6C                 cmp     eax, 63h ; 'c'
.text:0000000000001B6F                 jz      loc_1CE0
.text:0000000000001B75                 jle     short loc_1BC0
.text:0000000000001B77                 cmp     eax, 76h ; 'v'
.text:0000000000001B7A                 jz      loc_1CF0
.text:0000000000001B80                 jle     loc_1C30
.text:0000000000001B86                 cmp     eax, 80h
.text:0000000000001B8B                 jz      loc_1D10
.text:0000000000001B91                 jle     loc_2532
.text:0000000000001B97                 cmp     eax, 81h
.text:0000000000001B9C                 jz      loc_1D00
.text:0000000000001BA2                 cmp     eax, 82h
.text:0000000000001BA7                 jnz     loc_26A9
.text:0000000000001BAD                 mov     r15, cs:optarg@@GLIBC_2_2_5
.text:0000000000001BB4                 jmp     short loc_1B48
.text:0000000000001BB4 ; ---------------------------------------------------------------------------
.text:0000000000001BB6                 align 20h
.text:0000000000001BC0
.text:0000000000001BC0 loc_1BC0:                               ; CODE XREF: main+D5↑j
.text:0000000000001BC0                 cmp     eax, 37h ; '7'
.text:0000000000001BC3                 jg      loc_1C50
.text:0000000000001BC9                 cmp     eax, 30h ; '0'
.text:0000000000001BCC                 jge     loc_1C78
.text:0000000000001BD2                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001BD7                 jz      loc_270A
.text:0000000000001BDD                 jg      loc_2479
.text:0000000000001BE3                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001BE8                 jnz     loc_26A9
.text:0000000000001BEE                 sub     rsp, 8
.text:0000000000001BF2                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BF9                 mov     rcx, cs:Version
.text:0000000000001C00                 push    0
.text:0000000000001C02                 lea     r9, aJimMeyering ; "Jim Meyering"
.text:0000000000001C09                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001C10                 lea     rdx, unk_9C80
.text:0000000000001C17                 lea     rsi, aChmod     ; "chmod"
.text:0000000000001C1E                 xor     eax, eax
.text:0000000000001C20                 call    version_etc
.text:0000000000001C25                 xor     edi, edi        ; status
.text:0000000000001C27                 call    _exit
.text:0000000000001C27 ; ---------------------------------------------------------------------------
.text:0000000000001C2C                 align 10h
.text:0000000000001C30
.text:0000000000001C30 loc_1C30:                               ; CODE XREF: main+E0↑j
.text:0000000000001C30                 cmp     eax, 6Fh ; 'o'
.text:0000000000001C33                 jz      short loc_1C78
.text:0000000000001C35                 jg      loc_2540
.text:0000000000001C3B                 cmp     eax, 66h ; 'f'
.text:0000000000001C3E                 jnz     loc_2524
.text:0000000000001C44                 mov     cs:force_silent, 1
.text:0000000000001C4B                 jmp     loc_1B48
.text:0000000000001C50 ; ---------------------------------------------------------------------------
.text:0000000000001C50
.text:0000000000001C50 loc_1C50:                               ; CODE XREF: main+123↑j
.text:0000000000001C50                 cmp     eax, 52h ; 'R'
.text:0000000000001C53                 jnz     short loc_1C61
.text:0000000000001C55                 mov     cs:recurse, 1
.text:0000000000001C5C                 jmp     loc_1B48
.text:0000000000001C61 ; ---------------------------------------------------------------------------
.text:0000000000001C61
.text:0000000000001C61 loc_1C61:                               ; CODE XREF: main+1B3↑j
.text:0000000000001C61                 jle     loc_20DF
.text:0000000000001C67                 cmp     eax, 58h ; 'X'
.text:0000000000001C6A                 jz      short loc_1C78
.text:0000000000001C6C                 cmp     eax, 61h ; 'a'
.text:0000000000001C6F                 jnz     loc_26A9
.text:0000000000001C75                 nop     dword ptr [rax]
.text:0000000000001C78
.text:0000000000001C78 loc_1C78:                               ; CODE XREF: main+12C↑j
.text:0000000000001C78                                         ; main+193↑j ...
.text:0000000000001C78                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001C7F                 mov     rax, [rbx+rax*8-8]
.text:0000000000001C84                 mov     rdi, rax        ; s
.text:0000000000001C87                 mov     [rsp+128h+src], rax
.text:0000000000001C8C                 call    _strlen
.text:0000000000001C91                 xor     ecx, ecx
.text:0000000000001C93                 test    r12, r12
.text:0000000000001C96                 mov     rdx, rax
.text:0000000000001C99                 setnz   cl
.text:0000000000001C9C                 add     rcx, r12
.text:0000000000001C9F                 lea     r8, [rax+rcx]
.text:0000000000001CA3                 cmp     [rsp+128h+var_F0], r8
.text:0000000000001CA8                 jbe     short loc_1D18
.text:0000000000001CAA
.text:0000000000001CAA loc_1CAA:                               ; CODE XREF: main+2AF↓j
.text:0000000000001CAA                 mov     rsi, [rsp+128h+src] ; src
.text:0000000000001CAF                 lea     rdi, [r13+rcx+0] ; dest
.text:0000000000001CB4                 mov     byte ptr [r13+r12+0], 2Ch ; ','
.text:0000000000001CBA                 add     rdx, 1          ; n
.text:0000000000001CBE                 mov     [rsp+128h+var_118], r8
.text:0000000000001CC3                 call    _memcpy
.text:0000000000001CC8                 mov     r8, [rsp+128h+var_118]
.text:0000000000001CCD                 mov     cs:diagnose_surprises, 1
.text:0000000000001CD4                 mov     r12, r8
.text:0000000000001CD7                 jmp     loc_1B48
.text:0000000000001CD7 ; ---------------------------------------------------------------------------
.text:0000000000001CDC                 align 20h
.text:0000000000001CE0
.text:0000000000001CE0 loc_1CE0:                               ; CODE XREF: main+CF↑j
.text:0000000000001CE0                 mov     cs:verbosity, 1
.text:0000000000001CEA                 jmp     loc_1B48
.text:0000000000001CEA ; ---------------------------------------------------------------------------
.text:0000000000001CEF                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: main+DA↑j
.text:0000000000001CF0                 mov     cs:verbosity, 0
.text:0000000000001CFA                 jmp     loc_1B48
.text:0000000000001CFA ; ---------------------------------------------------------------------------
.text:0000000000001CFF                 align 20h
.text:0000000000001D00
.text:0000000000001D00 loc_1D00:                               ; CODE XREF: main+FC↑j
.text:0000000000001D00                 mov     r14d, 1
.text:0000000000001D06                 jmp     loc_1B48
.text:0000000000001D06 ; ---------------------------------------------------------------------------
.text:0000000000001D0B                 align 10h
.text:0000000000001D10
.text:0000000000001D10 loc_1D10:                               ; CODE XREF: main+EB↑j
.text:0000000000001D10                 xor     r14d, r14d
.text:0000000000001D13                 jmp     loc_1B48
.text:0000000000001D18 ; ---------------------------------------------------------------------------
.text:0000000000001D18
.text:0000000000001D18 loc_1D18:                               ; CODE XREF: main+208↑j
.text:0000000000001D18                 mov     rsi, [rsp+128h+var_110]
.text:0000000000001D1D                 mov     [rsp+128h+file], rax
.text:0000000000001D22                 lea     rax, [r8+1]
.text:0000000000001D26                 mov     rdi, r13
.text:0000000000001D29                 mov     [rsp+128h+var_108], rcx
.text:0000000000001D2E                 mov     [rsp+128h+var_118], r8
.text:0000000000001D33                 mov     [rsp+128h+var_F0], rax
.text:0000000000001D38                 call    x2realloc
.text:0000000000001D3D                 mov     rdx, [rsp+128h+file]
.text:0000000000001D42                 mov     r13, rax
.text:0000000000001D45                 mov     rcx, [rsp+128h+var_108]
.text:0000000000001D4A                 mov     r8, [rsp+128h+var_118]
.text:0000000000001D4F                 jmp     loc_1CAA
.text:0000000000001D54 ; ---------------------------------------------------------------------------
.text:0000000000001D54
.text:0000000000001D54 loc_1D54:                               ; CODE XREF: main+C6↑j
.text:0000000000001D54                 test    r15, r15
.text:0000000000001D57                 jz      loc_20ED
.text:0000000000001D5D                 test    r13, r13
.text:0000000000001D60                 jnz     loc_27C5
.text:0000000000001D66                 cmp     ebp, cs:optind@@GLIBC_2_2_5
.text:0000000000001D6C                 jle     loc_2688
.text:0000000000001D72                 mov     rdi, r15        ; filename
.text:0000000000001D75                 call    mode_create_from_ref
.text:0000000000001D7A                 mov     rbp, rax
.text:0000000000001D7D                 mov     cs:change, rax
.text:0000000000001D84                 call    ___errno_location
.text:0000000000001D89                 test    rbp, rbp
.text:0000000000001D8C                 mov     r12, rax
.text:0000000000001D8F                 jz      loc_2716
.text:0000000000001D95
.text:0000000000001D95 loc_1D95:                               ; CODE XREF: main+68A↓j
.text:0000000000001D95                 and     r14b, cs:recurse
.text:0000000000001D9C                 call    ___errno_location
.text:0000000000001DA1                 mov     [rsp+128h+var_108], rax
.text:0000000000001DA6                 test    r14b, r14b
.text:0000000000001DA9                 jnz     loc_25E1
.text:0000000000001DAF                 mov     cs:root_dev_ino, 0
.text:0000000000001DBA
.text:0000000000001DBA loc_1DBA:                               ; CODE XREF: main+B57↓j
.text:0000000000001DBA                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001DC1                 xor     edx, edx
.text:0000000000001DC3                 mov     esi, 411h
.text:0000000000001DC8                 lea     r12, jpt_1E3A
.text:0000000000001DCF                 lea     rdi, [rbx+rax*8]
.text:0000000000001DD3                 mov     ebx, 1
.text:0000000000001DD8                 call    xfts_open
.text:0000000000001DDD                 mov     rbp, rax
.text:0000000000001DE0                 lea     rax, [rsp+128h+var_58]
.text:0000000000001DE8                 mov     rdi, rbp
.text:0000000000001DEB                 mov     [rsp+128h+src], rax
.text:0000000000001DF0                 lea     rax, [rsp+128h+var_4C]
.text:0000000000001DF8                 mov     [rsp+128h+var_118], rax
.text:0000000000001DFD                 lea     rax, [rsp+128h+var_4B]
.text:0000000000001E05                 mov     [rsp+128h+var_110], rax
.text:0000000000001E0A                 call    rpl_fts_read
.text:0000000000001E0F                 test    rax, rax
.text:0000000000001E12                 mov     r14, rax
.text:0000000000001E15                 jz      short loc_1E5B
.text:0000000000001E17                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001E20
.text:0000000000001E20 loc_1E20:                               ; CODE XREF: main+3B9↓j
.text:0000000000001E20                 cmp     word ptr [rax+70h], 0Dh ; switch 14 cases
.text:0000000000001E25                 mov     r13, [rax+38h]
.text:0000000000001E29                 ja      def_1E3A        ; jumptable 0000000000001E3A default case, cases 0,1,3,5,8,9,11,12
.text:0000000000001E2F                 movzx   eax, word ptr [rax+70h]
.text:0000000000001E33                 movsxd  rax, ds:(jpt_1E3A - 0A574h)[r12+rax*4]
.text:0000000000001E37                 add     rax, r12
.text:0000000000001E3A                 jmp     rax             ; switch jump
.text:0000000000001E3C ; ---------------------------------------------------------------------------
.text:0000000000001E3C
.text:0000000000001E3C loc_1E3C:                               ; CODE XREF: main+39A↑j
.text:0000000000001E3C                                         ; DATA XREF: .rodata:jpt_1E3A↓o
.text:0000000000001E3C                 mov     r15d, 1         ; jumptable 0000000000001E3A case 6
.text:0000000000001E42                 nop     word ptr [rax+rax+00h]
.text:0000000000001E48
.text:0000000000001E48 loc_1E48:                               ; CODE XREF: main+470↓j
.text:0000000000001E48                                         ; main+486↓j ...
.text:0000000000001E48                 mov     rdi, rbp
.text:0000000000001E4B                 and     ebx, r15d
.text:0000000000001E4E                 call    rpl_fts_read
.text:0000000000001E53                 test    rax, rax
.text:0000000000001E56                 mov     r14, rax
.text:0000000000001E59                 jnz     short loc_1E20
.text:0000000000001E5B
.text:0000000000001E5B loc_1E5B:                               ; CODE XREF: main+375↑j
.text:0000000000001E5B                 mov     rax, [rsp+128h+var_108]
.text:0000000000001E60                 cmp     dword ptr [rax], 0
.text:0000000000001E63                 jz      short loc_1E76
.text:0000000000001E65                 movzx   ebx, cs:force_silent
.text:0000000000001E6C                 test    bl, bl
.text:0000000000001E6E                 jz      loc_25B6
.text:0000000000001E74                 xor     ebx, ebx
.text:0000000000001E76
.text:0000000000001E76 loc_1E76:                               ; CODE XREF: main+3C3↑j
.text:0000000000001E76                                         ; main+B3C↓j
.text:0000000000001E76                 mov     rdi, rbp        ; ptr
.text:0000000000001E79                 call    rpl_fts_close
.text:0000000000001E7E                 test    eax, eax
.text:0000000000001E80                 jz      short loc_1EAA
.text:0000000000001E82                 lea     rsi, msgid      ; "fts_close failed"
.text:0000000000001E89                 mov     edx, 5          ; category
.text:0000000000001E8E                 xor     edi, edi        ; domainname
.text:0000000000001E90                 xor     ebx, ebx
.text:0000000000001E92                 call    _dcgettext
.text:0000000000001E97                 mov     rdx, rax        ; format
.text:0000000000001E9A                 mov     rax, [rsp+128h+var_108]
.text:0000000000001E9F                 xor     edi, edi        ; status
.text:0000000000001EA1                 mov     esi, [rax]      ; errnum
.text:0000000000001EA3                 xor     eax, eax
.text:0000000000001EA5                 call    _error
.text:0000000000001EAA
.text:0000000000001EAA loc_1EAA:                               ; CODE XREF: main+3E0↑j
.text:0000000000001EAA                 xor     ebx, 1
.text:0000000000001EAD                 movzx   eax, bl
.text:0000000000001EB0                 mov     rbx, [rsp+128h+var_40]
.text:0000000000001EB8                 xor     rbx, fs:28h
.text:0000000000001EC1                 jnz     loc_2711
.text:0000000000001EC7                 add     rsp, 0F8h
.text:0000000000001ECE                 pop     rbx
.text:0000000000001ECF                 pop     rbp
.text:0000000000001ED0                 pop     r12
.text:0000000000001ED2                 pop     r13
.text:0000000000001ED4                 pop     r14
.text:0000000000001ED6                 pop     r15
.text:0000000000001ED8                 retn
.text:0000000000001ED9 ; ---------------------------------------------------------------------------
.text:0000000000001ED9
.text:0000000000001ED9 loc_1ED9:                               ; CODE XREF: main+39A↑j
.text:0000000000001ED9                                         ; DATA XREF: .rodata:jpt_1E3A↓o
.text:0000000000001ED9                 cmp     cs:force_silent, 0 ; jumptable 0000000000001E3A case 4
.text:0000000000001EE0                 jz      loc_254E
.text:0000000000001EE6                 db      2Eh
.text:0000000000001EE6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: main+492↓j
.text:0000000000001EF0                                         ; main+4C8↓j ...
.text:0000000000001EF0                 cmp     cs:verbosity, 2
.text:0000000000001EF7                 jz      short loc_1F06
.text:0000000000001EF9                 cmp     cs:verbosity, 0
.text:0000000000001F00                 jz      loc_212F
.text:0000000000001F06
.text:0000000000001F06 loc_1F06:                               ; CODE XREF: main+457↑j
.text:0000000000001F06                 xor     r15d, r15d
.text:0000000000001F09
.text:0000000000001F09 loc_1F09:                               ; CODE XREF: main+71D↓j
.text:0000000000001F09                                         ; main+76C↓j ...
.text:0000000000001F09                 cmp     cs:recurse, 0
.text:0000000000001F10                 jnz     loc_1E48
.text:0000000000001F16                 mov     edx, 4
.text:0000000000001F1B                 mov     rsi, r14
.text:0000000000001F1E                 mov     rdi, rbp
.text:0000000000001F21                 call    rpl_fts_set
.text:0000000000001F26                 jmp     loc_1E48
.text:0000000000001F2B ; ---------------------------------------------------------------------------
.text:0000000000001F2B
.text:0000000000001F2B loc_1F2B:                               ; CODE XREF: main+39A↑j
.text:0000000000001F2B                                         ; DATA XREF: .rodata:jpt_1E3A↓o
.text:0000000000001F2B                 cmp     cs:force_silent, 0 ; jumptable 0000000000001E3A case 13
.text:0000000000001F32                 jnz     short loc_1EF0
.text:0000000000001F34                 mov     rsi, r13
.text:0000000000001F37                 mov     edi, 4
.text:0000000000001F3C                 call    quotearg_style
.text:0000000000001F41                 lea     rsi, aCannotOperateO ; "cannot operate on dangling symlink %s"
.text:0000000000001F48                 mov     r15, rax
.text:0000000000001F4B                 xor     edi, edi        ; domainname
.text:0000000000001F4D                 mov     edx, 5          ; category
.text:0000000000001F52                 call    _dcgettext
.text:0000000000001F57                 mov     rcx, r15
.text:0000000000001F5A                 mov     rdx, rax        ; format
.text:0000000000001F5D                 xor     esi, esi        ; errnum
.text:0000000000001F5F                 xor     edi, edi        ; status
.text:0000000000001F61                 xor     eax, eax
.text:0000000000001F63                 call    _error
.text:0000000000001F68                 jmp     short loc_1EF0
.text:0000000000001F6A ; ---------------------------------------------------------------------------
.text:0000000000001F6A
.text:0000000000001F6A loc_1F6A:                               ; CODE XREF: main+39A↑j
.text:0000000000001F6A                                         ; DATA XREF: .rodata:jpt_1E3A↓o
.text:0000000000001F6A                 cmp     qword ptr [r14+58h], 0 ; jumptable 0000000000001E3A case 10
.text:0000000000001F6F                 jnz     short loc_1F7C
.text:0000000000001F71                 cmp     qword ptr [r14+20h], 0
.text:0000000000001F76                 jz      loc_263D
.text:0000000000001F7C
.text:0000000000001F7C loc_1F7C:                               ; CODE XREF: main+4CF↑j
.text:0000000000001F7C                 cmp     cs:force_silent, 0
.text:0000000000001F83                 jnz     loc_1EF0
.text:0000000000001F89                 mov     rsi, r13
.text:0000000000001F8C                 mov     edi, 4
.text:0000000000001F91                 call    quotearg_style
.text:0000000000001F96                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:0000000000001F9D                 mov     r15, rax
.text:0000000000001FA0                 mov     edx, 5          ; category
.text:0000000000001FA5
.text:0000000000001FA5 loc_1FA5:                               ; CODE XREF: main+ACA↓j
.text:0000000000001FA5                 xor     edi, edi        ; domainname
.text:0000000000001FA7                 call    _dcgettext
.text:0000000000001FAC                 mov     esi, [r14+40h]  ; errnum
.text:0000000000001FB0                 mov     rdx, rax        ; format
.text:0000000000001FB3                 mov     rcx, r15
.text:0000000000001FB6                 xor     edi, edi        ; status
.text:0000000000001FB8                 xor     eax, eax
.text:0000000000001FBA                 call    _error
.text:0000000000001FBF                 jmp     loc_1EF0
.text:0000000000001FC4 ; ---------------------------------------------------------------------------
.text:0000000000001FC4
.text:0000000000001FC4 loc_1FC4:                               ; CODE XREF: main+39A↑j
.text:0000000000001FC4                                         ; DATA XREF: .rodata:jpt_1E3A↓o
.text:0000000000001FC4                 cmp     cs:force_silent, 0 ; jumptable 0000000000001E3A case 7
.text:0000000000001FCB                 jnz     loc_1EF0
.text:0000000000001FD1                 mov     rdx, r13
.text:0000000000001FD4                 xor     edi, edi
.text:0000000000001FD6                 mov     esi, 3
.text:0000000000001FDB                 call    quotearg_n_style_colon
.text:0000000000001FE0                 mov     esi, [r14+40h]  ; errnum
.text:0000000000001FE4                 lea     rdx, aInvalidModeS+0Eh ; format
.text:0000000000001FEB                 mov     rcx, rax
.text:0000000000001FEE                 xor     edi, edi        ; status
.text:0000000000001FF0                 xor     eax, eax
.text:0000000000001FF2                 call    _error
.text:0000000000001FF7                 jmp     loc_1EF0
.text:0000000000001FFC ; ---------------------------------------------------------------------------
.text:0000000000001FFC
.text:0000000000001FFC loc_1FFC:                               ; CODE XREF: main+39A↑j
.text:0000000000001FFC                                         ; DATA XREF: .rodata:jpt_1E3A↓o
.text:0000000000001FFC                 mov     rsi, r14        ; jumptable 0000000000001E3A case 2
.text:0000000000001FFF                 mov     rdi, rbp
.text:0000000000002002                 call    cycle_warning_required
.text:0000000000002007                 test    al, al
.text:0000000000002009                 jnz     loc_256F
.text:000000000000200F
.text:000000000000200F def_1E3A:                               ; CODE XREF: main+389↑j
.text:000000000000200F                                         ; main+39A↑j
.text:000000000000200F                                         ; DATA XREF: ...
.text:000000000000200F                 mov     rax, cs:root_dev_ino ; jumptable 0000000000001E3A default case, cases 0,1,3,5,8,9,11,12
.text:0000000000002016                 test    rax, rax
.text:0000000000002019                 jz      short loc_202B
.text:000000000000201B                 mov     rcx, [rax]
.text:000000000000201E                 cmp     [r14+80h], rcx
.text:0000000000002025                 jz      loc_248A
.text:000000000000202B
.text:000000000000202B loc_202B:                               ; CODE XREF: main+579↑j
.text:000000000000202B                                         ; main+9F2↓j
.text:000000000000202B                 mov     edi, [r14+90h]
.text:0000000000002032                 mov     rax, [r14+30h]
.text:0000000000002036                 xor     esi, esi
.text:0000000000002038                 mov     edx, cs:umask_value
.text:000000000000203E                 mov     rcx, cs:change
.text:0000000000002045                 mov     r15d, edi
.text:0000000000002048                 mov     [rsp+128h+file], rax
.text:000000000000204D                 mov     [rsp+128h+var_124], edi
.text:0000000000002051                 and     r15d, 0F000h
.text:0000000000002058                 cmp     r15d, 4000h
.text:000000000000205F                 setz    sil
.text:0000000000002063                 xor     r8d, r8d
.text:0000000000002066                 call    mode_adjust
.text:000000000000206B                 cmp     r15d, 0A000h
.text:0000000000002072                 mov     edx, eax        ; mode
.text:0000000000002074                 mov     [rsp+128h+var_128], eax
.text:0000000000002077                 jz      loc_21C2
.text:000000000000207D                 mov     edi, [rbp+2Ch]  ; fd
.text:0000000000002080                 mov     rsi, [rsp+128h+file] ; file
.text:0000000000002085                 xor     ecx, ecx        ; flag
.text:0000000000002087                 call    _fchmodat
.text:000000000000208C                 test    eax, eax
.text:000000000000208E                 jz      loc_221C
.text:0000000000002094                 cmp     cs:force_silent, 0
.text:000000000000209B                 jnz     loc_1EF0
.text:00000000000020A1                 mov     rsi, r13
.text:00000000000020A4                 mov     edi, 4
.text:00000000000020A9                 call    quotearg_style
.text:00000000000020AE                 lea     rsi, aChangingPermis ; "changing permissions of %s"
.text:00000000000020B5                 xor     edi, edi        ; domainname
.text:00000000000020B7                 mov     edx, 5          ; category
.text:00000000000020BC                 mov     r15, rax
.text:00000000000020BF                 call    _dcgettext
.text:00000000000020C4                 mov     rdx, rax        ; format
.text:00000000000020C7                 mov     rax, [rsp+128h+var_108]
.text:00000000000020CC                 mov     rcx, r15
.text:00000000000020CF                 xor     edi, edi        ; status
.text:00000000000020D1                 mov     esi, [rax]      ; errnum
.text:00000000000020D3                 xor     eax, eax
.text:00000000000020D5                 call    _error
.text:00000000000020DA                 jmp     loc_1EF0
.text:00000000000020DF ; ---------------------------------------------------------------------------
.text:00000000000020DF
.text:00000000000020DF loc_20DF:                               ; CODE XREF: main:loc_1C61↑j
.text:00000000000020DF                 cmp     eax, 3Dh ; '='
.text:00000000000020E2                 jz      loc_1C78
.text:00000000000020E8                 jmp     loc_26A9
.text:00000000000020ED ; ---------------------------------------------------------------------------
.text:00000000000020ED
.text:00000000000020ED loc_20ED:                               ; CODE XREF: main+2B7↑j
.text:00000000000020ED                 test    r13, r13
.text:00000000000020F0                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000020F7                 jz      loc_2660
.text:00000000000020FD                 cmp     ebp, eax
.text:00000000000020FF                 jle     loc_27BE
.text:0000000000002105
.text:0000000000002105 loc_2105:                               ; CODE XREF: main+BCF↓j
.text:0000000000002105                 mov     rdi, r13
.text:0000000000002108                 call    mode_compile
.text:000000000000210D                 test    rax, rax
.text:0000000000002110                 mov     cs:change, rax
.text:0000000000002117                 jz      loc_274F
.text:000000000000211D                 xor     edi, edi        ; mask
.text:000000000000211F                 call    _umask
.text:0000000000002124                 mov     cs:umask_value, eax
.text:000000000000212A                 jmp     loc_1D95
.text:000000000000212F ; ---------------------------------------------------------------------------
.text:000000000000212F
.text:000000000000212F loc_212F:                               ; CODE XREF: main+460↑j
.text:000000000000212F                 mov     rsi, [rsp+128h+src]
.text:0000000000002134                 mov     edi, [rsp+128h+var_128]
.text:0000000000002137                 call    strmode
.text:000000000000213C                 mov     rsi, [rsp+128h+var_118]
.text:0000000000002141                 mov     edi, [rsp+128h+var_124]
.text:0000000000002145                 mov     [rsp+128h+var_4E], 0
.text:000000000000214D                 call    strmode
.text:0000000000002152                 lea     rsi, aFailedToChange ; "failed to change mode of %s from %04lo "...
.text:0000000000002159                 mov     edx, 5          ; category
.text:000000000000215E                 xor     edi, edi        ; domainname
.text:0000000000002160                 mov     [rsp+128h+var_42], 0
.text:0000000000002168                 call    _dcgettext
.text:000000000000216D                 mov     rsi, r13
.text:0000000000002170                 mov     edi, 4
.text:0000000000002175                 mov     r15, rax
.text:0000000000002178                 call    quotearg_style
.text:000000000000217D                 mov     ecx, [rsp+128h+var_124]
.text:0000000000002181                 sub     rsp, 8
.text:0000000000002185                 mov     rsi, r15
.text:0000000000002188                 mov     rdx, [rsp+130h+src]
.text:000000000000218D                 mov     edi, 1
.text:0000000000002192                 xor     r15d, r15d
.text:0000000000002195                 and     ecx, 0FFFh
.text:000000000000219B                 add     rdx, 1
.text:000000000000219F                 push    rdx
.text:00000000000021A0                 mov     r9d, [rsp+138h+var_128]
.text:00000000000021A5                 mov     rdx, rax
.text:00000000000021A8                 mov     r8, [rsp+138h+var_110]
.text:00000000000021AD                 xor     eax, eax
.text:00000000000021AF                 and     r9d, 0FFFh
.text:00000000000021B6                 call    ___printf_chk
.text:00000000000021BB                 pop     rax
.text:00000000000021BC                 pop     rdx
.text:00000000000021BD                 jmp     loc_1F09
.text:00000000000021C2 ; ---------------------------------------------------------------------------
.text:00000000000021C2
.text:00000000000021C2 loc_21C2:                               ; CODE XREF: main+5D7↑j
.text:00000000000021C2                 mov     eax, cs:verbosity
.text:00000000000021C8                 cmp     eax, 2
.text:00000000000021CB                 jz      short loc_2211
.text:00000000000021CD                 test    eax, eax
.text:00000000000021CF                 jnz     short loc_2211
.text:00000000000021D1                 mov     rsi, r13
.text:00000000000021D4                 mov     edi, 4
.text:00000000000021D9                 mov     r15d, 1
.text:00000000000021DF                 call    quotearg_style
.text:00000000000021E4                 lea     rsi, aNeitherSymboli ; "neither symbolic link %s nor referent h"...
.text:00000000000021EB                 mov     r13, rax
.text:00000000000021EE                 mov     edx, 5          ; category
.text:00000000000021F3                 xor     edi, edi        ; domainname
.text:00000000000021F5                 call    _dcgettext
.text:00000000000021FA                 mov     rdx, r13
.text:00000000000021FD                 mov     rsi, rax
.text:0000000000002200                 mov     edi, 1
.text:0000000000002205                 xor     eax, eax
.text:0000000000002207                 call    ___printf_chk
.text:000000000000220C                 jmp     loc_1F09
.text:0000000000002211 ; ---------------------------------------------------------------------------
.text:0000000000002211
.text:0000000000002211 loc_2211:                               ; CODE XREF: main+72B↑j
.text:0000000000002211                                         ; main+72F↑j ...
.text:0000000000002211                 mov     r15d, 1
.text:0000000000002217                 jmp     loc_1F09
.text:000000000000221C ; ---------------------------------------------------------------------------
.text:000000000000221C
.text:000000000000221C loc_221C:                               ; CODE XREF: main+5EE↑j
.text:000000000000221C                 cmp     cs:verbosity, 2
.text:0000000000002223                 jz      loc_22D1
.text:0000000000002229                 mov     ecx, [rsp+128h+var_128]
.text:000000000000222C                 mov     eax, ecx
.text:000000000000222E                 and     ch, 0Eh
.text:0000000000002231                 jnz     loc_2391
.text:0000000000002237
.text:0000000000002237 loc_2237:                               ; CODE XREF: main+B11↓j
.text:0000000000002237                 xor     eax, [rsp+128h+var_124]
.text:000000000000223B                 test    eax, 0FFFh
.text:0000000000002240                 jz      loc_23F5
.text:0000000000002246                 mov     rsi, [rsp+128h+src]
.text:000000000000224B                 mov     edi, [rsp+128h+var_128]
.text:000000000000224E                 call    strmode
.text:0000000000002253                 mov     rsi, [rsp+128h+var_118]
.text:0000000000002258                 mov     edi, [rsp+128h+var_124]
.text:000000000000225C                 mov     [rsp+128h+var_4E], 0
.text:0000000000002264                 call    strmode
.text:0000000000002269                 lea     rsi, aModeOfSChanged ; "mode of %s changed from %04lo (%s) to %"...
.text:0000000000002270                 mov     edx, 5          ; category
.text:0000000000002275                 xor     edi, edi        ; domainname
.text:0000000000002277                 mov     [rsp+128h+var_42], 0
.text:000000000000227F                 call    _dcgettext
.text:0000000000002284                 mov     rsi, r13
.text:0000000000002287                 mov     edi, 4
.text:000000000000228C                 mov     r15, rax
.text:000000000000228F                 call    quotearg_style
.text:0000000000002294                 mov     ecx, [rsp+128h+var_124]
.text:0000000000002298                 sub     rsp, 8
.text:000000000000229C                 mov     edi, 1
.text:00000000000022A1                 mov     rsi, [rsp+130h+src]
.text:00000000000022A6                 and     ecx, 0FFFh
.text:00000000000022AC                 lea     rdx, [rsi+1]
.text:00000000000022B0                 mov     rsi, r15
.text:00000000000022B3                 push    rdx
.text:00000000000022B4                 mov     r9d, [rsp+138h+var_128]
.text:00000000000022B9                 mov     rdx, rax
.text:00000000000022BC                 mov     r8, [rsp+138h+var_110]
.text:00000000000022C1                 xor     eax, eax
.text:00000000000022C3                 and     r9d, 0FFFh
.text:00000000000022CA                 call    ___printf_chk
.text:00000000000022CF                 pop     rcx
.text:00000000000022D0                 pop     rsi
.text:00000000000022D1
.text:00000000000022D1 loc_22D1:                               ; CODE XREF: main+783↑j
.text:00000000000022D1                                         ; main+95C↓j ...
.text:00000000000022D1                 movzx   r15d, cs:diagnose_surprises
.text:00000000000022D9                 test    r15b, r15b
.text:00000000000022DC                 jz      loc_2211
.text:00000000000022E2                 mov     edi, [rsp+128h+var_124]
.text:00000000000022E6                 mov     rcx, cs:change
.text:00000000000022ED                 xor     esi, esi
.text:00000000000022EF                 mov     eax, edi
.text:00000000000022F1                 and     eax, 0F000h
.text:00000000000022F6                 cmp     eax, 4000h
.text:00000000000022FB                 setz    sil
.text:00000000000022FF                 xor     edx, edx
.text:0000000000002301                 xor     r8d, r8d
.text:0000000000002304                 call    mode_adjust
.text:0000000000002309                 mov     edx, eax
.text:000000000000230B                 not     edx
.text:000000000000230D                 test    [rsp+128h+var_128], edx
.text:0000000000002310                 jz      loc_1F09
.text:0000000000002316                 mov     r15, [rsp+128h+src]
.text:000000000000231B                 mov     edi, [rsp+128h+var_128]
.text:000000000000231E                 mov     dword ptr [rsp+128h+file], eax
.text:0000000000002322                 mov     rsi, r15
.text:0000000000002325                 call    strmode
.text:000000000000232A                 mov     eax, dword ptr [rsp+128h+file]
.text:000000000000232E                 mov     rsi, [rsp+128h+var_118]
.text:0000000000002333                 mov     edi, eax
.text:0000000000002335                 call    strmode
.text:000000000000233A                 mov     rdx, r13
.text:000000000000233D                 mov     esi, 3
.text:0000000000002342                 xor     edi, edi
.text:0000000000002344                 mov     [rsp+128h+var_42], 0
.text:000000000000234C                 mov     [rsp+128h+var_4E], 0
.text:0000000000002354                 call    quotearg_n_style_colon
.text:0000000000002359                 lea     rsi, aSNewPermission ; "%s: new permissions are %s, not %s"
.text:0000000000002360                 mov     edx, 5          ; category
.text:0000000000002365                 xor     edi, edi        ; domainname
.text:0000000000002367                 mov     r13, rax
.text:000000000000236A                 call    _dcgettext
.text:000000000000236F                 mov     r9, [rsp+128h+var_110]
.text:0000000000002374                 lea     r8, [r15+1]
.text:0000000000002378                 mov     rdx, rax        ; format
.text:000000000000237B                 mov     rcx, r13
.text:000000000000237E                 xor     esi, esi        ; errnum
.text:0000000000002380                 xor     edi, edi        ; status
.text:0000000000002382                 xor     eax, eax
.text:0000000000002384                 xor     r15d, r15d
.text:0000000000002387                 call    _error
.text:000000000000238C                 jmp     loc_1F09
.text:0000000000002391 ; ---------------------------------------------------------------------------
.text:0000000000002391
.text:0000000000002391 loc_2391:                               ; CODE XREF: main+791↑j
.text:0000000000002391                 mov     esi, [rbp+2Ch]  ; fildes
.text:0000000000002394                 mov     rdx, [rsp+128h+file] ; filename
.text:0000000000002399                 lea     rcx, [rsp+128h+stat_buf] ; stat_buf
.text:000000000000239E                 xor     r8d, r8d        ; flag
.text:00000000000023A1                 mov     edi, 1          ; ver
.text:00000000000023A6                 call    ___fxstatat
.text:00000000000023AB                 test    eax, eax
.text:00000000000023AD                 jz      loc_25AD
.text:00000000000023B3                 cmp     cs:force_silent, 0
.text:00000000000023BA                 jnz     short loc_23F5
.text:00000000000023BC                 mov     rsi, r13
.text:00000000000023BF                 mov     edi, 4
.text:00000000000023C4                 call    quotearg_style
.text:00000000000023C9                 lea     rsi, aGettingNewAttr ; "getting new attributes of %s"
.text:00000000000023D0                 mov     edx, 5          ; category
.text:00000000000023D5                 xor     edi, edi        ; domainname
.text:00000000000023D7                 mov     r15, rax
.text:00000000000023DA                 call    _dcgettext
.text:00000000000023DF                 mov     rdx, rax        ; format
.text:00000000000023E2                 mov     rax, [rsp+128h+var_108]
.text:00000000000023E7                 mov     rcx, r15
.text:00000000000023EA                 xor     edi, edi        ; status
.text:00000000000023EC                 mov     esi, [rax]      ; errnum
.text:00000000000023EE                 xor     eax, eax
.text:00000000000023F0                 call    _error
.text:00000000000023F5
.text:00000000000023F5 loc_23F5:                               ; CODE XREF: main+7A0↑j
.text:00000000000023F5                                         ; main+91A↑j
.text:00000000000023F5                 cmp     cs:verbosity, 0
.text:00000000000023FC                 jnz     loc_22D1
.text:0000000000002402                 mov     rsi, [rsp+128h+src]
.text:0000000000002407                 mov     edi, [rsp+128h+var_128]
.text:000000000000240A                 call    strmode
.text:000000000000240F                 mov     rsi, [rsp+128h+var_118]
.text:0000000000002414                 mov     edi, [rsp+128h+var_124]
.text:0000000000002418                 mov     [rsp+128h+var_4E], 0
.text:0000000000002420                 call    strmode
.text:0000000000002425                 lea     rsi, aModeOfSRetaine ; "mode of %s retained as %04lo (%s)\n"
.text:000000000000242C                 mov     edx, 5          ; category
.text:0000000000002431                 xor     edi, edi        ; domainname
.text:0000000000002433                 mov     [rsp+128h+var_42], 0
.text:000000000000243B                 call    _dcgettext
.text:0000000000002440                 mov     rsi, r13
.text:0000000000002443                 mov     edi, 4
.text:0000000000002448                 mov     r15, rax
.text:000000000000244B                 call    quotearg_style
.text:0000000000002450                 mov     rdx, [rsp+128h+src]
.text:0000000000002455                 mov     ecx, [rsp+128h+var_128]
.text:0000000000002458                 mov     rsi, r15
.text:000000000000245B                 mov     edi, 1
.text:0000000000002460                 lea     r8, [rdx+1]
.text:0000000000002464                 and     ecx, 0FFFh
.text:000000000000246A                 mov     rdx, rax
.text:000000000000246D                 xor     eax, eax
.text:000000000000246F                 call    ___printf_chk
.text:0000000000002474                 jmp     loc_22D1
.text:0000000000002479 ; ---------------------------------------------------------------------------
.text:0000000000002479
.text:0000000000002479 loc_2479:                               ; CODE XREF: main+13D↑j
.text:0000000000002479                 sub     eax, 2Bh ; '+'
.text:000000000000247C                 cmp     eax, 1
.text:000000000000247F                 jbe     loc_1C78
.text:0000000000002485                 jmp     loc_26A9
.text:000000000000248A ; ---------------------------------------------------------------------------
.text:000000000000248A
.text:000000000000248A loc_248A:                               ; CODE XREF: main+585↑j
.text:000000000000248A                 mov     rax, [rax+8]
.text:000000000000248E                 cmp     [r14+78h], rax
.text:0000000000002492                 jnz     loc_202B
.text:0000000000002498                 lea     rsi, aLibs+6    ; s2
.text:000000000000249F                 mov     rdi, r13        ; s1
.text:00000000000024A2                 call    _strcmp
.text:00000000000024A7                 test    eax, eax
.text:00000000000024A9                 jnz     loc_26B3
.text:00000000000024AF                 mov     rsi, r13
.text:00000000000024B2                 mov     edi, 4
.text:00000000000024B7                 call    quotearg_style
.text:00000000000024BC                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:00000000000024C3                 mov     r13, rax
.text:00000000000024C6                 mov     edx, 5          ; category
.text:00000000000024CB                 xor     edi, edi        ; domainname
.text:00000000000024CD                 call    _dcgettext
.text:00000000000024D2                 mov     rcx, r13
.text:00000000000024D5                 mov     rdx, rax        ; format
.text:00000000000024D8                 xor     esi, esi        ; errnum
.text:00000000000024DA                 xor     edi, edi        ; status
.text:00000000000024DC                 xor     eax, eax
.text:00000000000024DE                 call    _error
.text:00000000000024E3
.text:00000000000024E3 loc_24E3:                               ; CODE XREF: main+C65↓j
.text:00000000000024E3                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:00000000000024EA                 mov     edx, 5          ; category
.text:00000000000024EF                 xor     edi, edi        ; domainname
.text:00000000000024F1                 xor     r15d, r15d
.text:00000000000024F4                 call    _dcgettext
.text:00000000000024F9                 xor     esi, esi        ; errnum
.text:00000000000024FB                 mov     rdx, rax        ; format
.text:00000000000024FE                 xor     edi, edi        ; status
.text:0000000000002500                 xor     eax, eax
.text:0000000000002502                 call    _error
.text:0000000000002507                 mov     edx, 4
.text:000000000000250C                 mov     rsi, r14
.text:000000000000250F                 mov     rdi, rbp
.text:0000000000002512                 call    rpl_fts_set
.text:0000000000002517                 mov     rdi, rbp
.text:000000000000251A                 call    rpl_fts_read
.text:000000000000251F                 jmp     loc_1E48
.text:0000000000002524 ; ---------------------------------------------------------------------------
.text:0000000000002524
.text:0000000000002524 loc_2524:                               ; CODE XREF: main+19E↑j
.text:0000000000002524                 cmp     eax, 67h ; 'g'
.text:0000000000002527                 jz      loc_1C78
.text:000000000000252D                 jmp     loc_26A9
.text:0000000000002532 ; ---------------------------------------------------------------------------
.text:0000000000002532
.text:0000000000002532 loc_2532:                               ; CODE XREF: main+F1↑j
.text:0000000000002532                 cmp     eax, 78h ; 'x'
.text:0000000000002535                 jle     loc_1C78
.text:000000000000253B                 jmp     loc_26A9
.text:0000000000002540 ; ---------------------------------------------------------------------------
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: main+195↑j
.text:0000000000002540                 cmp     eax, 72h ; 'r'
.text:0000000000002543                 jge     loc_1C78
.text:0000000000002549                 jmp     loc_26A9
.text:000000000000254E ; ---------------------------------------------------------------------------
.text:000000000000254E
.text:000000000000254E loc_254E:                               ; CODE XREF: main+440↑j
.text:000000000000254E                 mov     rsi, r13
.text:0000000000002551                 mov     edi, 4
.text:0000000000002556                 call    quotearg_style
.text:000000000000255B                 mov     edx, 5
.text:0000000000002560                 mov     r15, rax
.text:0000000000002563                 lea     rsi, aCannotReadDire ; "cannot read directory %s"
.text:000000000000256A                 jmp     loc_1FA5
.text:000000000000256F ; ---------------------------------------------------------------------------
.text:000000000000256F
.text:000000000000256F loc_256F:                               ; CODE XREF: main+569↑j
.text:000000000000256F                 mov     rdx, r13
.text:0000000000002572                 mov     esi, 3
.text:0000000000002577                 xor     edi, edi
.text:0000000000002579                 call    quotearg_n_style_colon
.text:000000000000257E                 lea     rsi, aWarningCircula ; "WARNING: Circular directory structure."...
.text:0000000000002585                 mov     r13, rax
.text:0000000000002588                 mov     edx, 5          ; category
.text:000000000000258D                 xor     edi, edi        ; domainname
.text:000000000000258F                 xor     r15d, r15d
.text:0000000000002592                 call    _dcgettext
.text:0000000000002597                 mov     rcx, r13
.text:000000000000259A                 mov     rdx, rax        ; format
.text:000000000000259D                 xor     esi, esi        ; errnum
.text:000000000000259F                 xor     edi, edi        ; status
.text:00000000000025A1                 xor     eax, eax
.text:00000000000025A3                 call    _error
.text:00000000000025A8                 jmp     loc_1E48
.text:00000000000025AD ; ---------------------------------------------------------------------------
.text:00000000000025AD
.text:00000000000025AD loc_25AD:                               ; CODE XREF: main+90D↑j
.text:00000000000025AD                 mov     eax, [rsp+128h+stat_buf.st_mode]
.text:00000000000025B1                 jmp     loc_2237
.text:00000000000025B6 ; ---------------------------------------------------------------------------
.text:00000000000025B6
.text:00000000000025B6 loc_25B6:                               ; CODE XREF: main+3CE↑j
.text:00000000000025B6                 lea     rsi, aFtsReadFailed ; "fts_read failed"
.text:00000000000025BD                 xor     edi, edi        ; domainname
.text:00000000000025BF                 mov     edx, 5          ; category
.text:00000000000025C4                 call    _dcgettext
.text:00000000000025C9                 mov     rdx, rax        ; format
.text:00000000000025CC                 mov     rax, [rsp+128h+var_108]
.text:00000000000025D1                 xor     edi, edi        ; status
.text:00000000000025D3                 mov     esi, [rax]      ; errnum
.text:00000000000025D5                 xor     eax, eax
.text:00000000000025D7                 call    _error
.text:00000000000025DC                 jmp     loc_1E76
.text:00000000000025E1 ; ---------------------------------------------------------------------------
.text:00000000000025E1
.text:00000000000025E1 loc_25E1:                               ; CODE XREF: main+309↑j
.text:00000000000025E1                 lea     rdi, dev_ino_buf_7087
.text:00000000000025E8                 call    get_root_dev_ino
.text:00000000000025ED                 test    rax, rax
.text:00000000000025F0                 mov     cs:root_dev_ino, rax
.text:00000000000025F7                 jnz     loc_1DBA
.text:00000000000025FD                 lea     rsi, aLibs+6    ; "/"
.text:0000000000002604                 mov     edi, 4
.text:0000000000002609                 call    quotearg_style
.text:000000000000260E                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:0000000000002615                 mov     edx, 5          ; category
.text:000000000000261A                 xor     edi, edi        ; domainname
.text:000000000000261C                 mov     rbx, rax
.text:000000000000261F                 call    _dcgettext
.text:0000000000002624                 mov     rdx, rax        ; format
.text:0000000000002627                 mov     rax, [rsp+128h+var_108]
.text:000000000000262C                 mov     rcx, rbx
.text:000000000000262F                 mov     edi, 1          ; status
.text:0000000000002634                 mov     esi, [rax]      ; errnum
.text:0000000000002636                 xor     eax, eax
.text:0000000000002638                 call    _error
.text:000000000000263D
.text:000000000000263D loc_263D:                               ; CODE XREF: main+4D6↑j
.text:000000000000263D                 mov     qword ptr [r14+20h], 1
.text:0000000000002645                 mov     edx, 1
.text:000000000000264A                 mov     rsi, r14
.text:000000000000264D                 mov     rdi, rbp
.text:0000000000002650                 mov     r15d, 1
.text:0000000000002656                 call    rpl_fts_set
.text:000000000000265B                 jmp     loc_1E48
.text:0000000000002660 ; ---------------------------------------------------------------------------
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: main+657↑j
.text:0000000000002660                 lea     edx, [rax+1]
.text:0000000000002663                 mov     r13, [rbx+rax*8]
.text:0000000000002667                 cmp     edx, ebp
.text:0000000000002669                 mov     cs:optind@@GLIBC_2_2_5, edx
.text:000000000000266F                 jl      loc_2105
.text:0000000000002675                 test    r13, r13
.text:0000000000002678                 jz      short loc_2688
.text:000000000000267A
.text:000000000000267A loc_267A:                               ; CODE XREF: main+D20↓j
.text:000000000000267A                 movsxd  rdx, edx
.text:000000000000267D                 cmp     [rbx+rdx*8-8], r13
.text:0000000000002682                 jz      loc_2788
.text:0000000000002688
.text:0000000000002688 loc_2688:                               ; CODE XREF: main+2CC↑j
.text:0000000000002688                                         ; main+BD8↑j
.text:0000000000002688                 lea     rsi, aMissingOperand ; "missing operand"
.text:000000000000268F                 mov     edx, 5          ; category
.text:0000000000002694
.text:0000000000002694 loc_2694:                               ; CODE XREF: main+D31↓j
.text:0000000000002694                 xor     edi, edi        ; domainname
.text:0000000000002696                 call    _dcgettext
.text:000000000000269B                 xor     esi, esi        ; errnum
.text:000000000000269D                 mov     rdx, rax        ; format
.text:00000000000026A0                 xor     edi, edi        ; status
.text:00000000000026A2                 xor     eax, eax
.text:00000000000026A4                 call    _error
.text:00000000000026A9
.text:00000000000026A9 loc_26A9:                               ; CODE XREF: main+107↑j
.text:00000000000026A9                                         ; main+148↑j ...
.text:00000000000026A9                 mov     edi, 1          ; status
.text:00000000000026AE                 call    usage
.text:00000000000026B3 ; ---------------------------------------------------------------------------
.text:00000000000026B3
.text:00000000000026B3 loc_26B3:                               ; CODE XREF: main+A09↑j
.text:00000000000026B3                 lea     rdx, aLibs+6    ; "/"
.text:00000000000026BA                 mov     esi, 4
.text:00000000000026BF                 mov     edi, 1
.text:00000000000026C4                 call    quotearg_n_style
.text:00000000000026C9                 mov     rdx, r13
.text:00000000000026CC                 xor     edi, edi
.text:00000000000026CE                 mov     esi, 4
.text:00000000000026D3                 mov     r15, rax
.text:00000000000026D6                 call    quotearg_n_style
.text:00000000000026DB                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:00000000000026E2                 mov     r13, rax
.text:00000000000026E5                 xor     edi, edi        ; domainname
.text:00000000000026E7                 mov     edx, 5          ; category
.text:00000000000026EC                 call    _dcgettext
.text:00000000000026F1                 mov     r8, r15
.text:00000000000026F4                 mov     rdx, rax        ; format
.text:00000000000026F7                 mov     rcx, r13
.text:00000000000026FA                 xor     esi, esi        ; errnum
.text:00000000000026FC                 xor     edi, edi        ; status
.text:00000000000026FE                 xor     eax, eax
.text:0000000000002700                 call    _error
.text:0000000000002705                 jmp     loc_24E3
.text:000000000000270A ; ---------------------------------------------------------------------------
.text:000000000000270A
.text:000000000000270A loc_270A:                               ; CODE XREF: main+137↑j
.text:000000000000270A                 xor     edi, edi        ; status
.text:000000000000270C                 call    usage
.text:0000000000002711 ; ---------------------------------------------------------------------------
.text:0000000000002711
.text:0000000000002711 loc_2711:                               ; CODE XREF: main+421↑j
.text:0000000000002711                 call    ___stack_chk_fail
.text:0000000000002716 ; ---------------------------------------------------------------------------
.text:0000000000002716
.text:0000000000002716 loc_2716:                               ; CODE XREF: main+2EF↑j
.text:0000000000002716                 mov     rsi, r15
.text:0000000000002719                 mov     edi, 4
.text:000000000000271E                 call    quotearg_style
.text:0000000000002723                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:000000000000272A                 mov     edx, 5          ; category
.text:000000000000272F                 xor     edi, edi        ; domainname
.text:0000000000002731                 mov     rbx, rax
.text:0000000000002734                 call    _dcgettext
.text:0000000000002739                 mov     esi, [r12]      ; errnum
.text:000000000000273D                 mov     rdx, rax        ; format
.text:0000000000002740                 mov     rcx, rbx
.text:0000000000002743                 mov     edi, 1          ; status
.text:0000000000002748                 xor     eax, eax
.text:000000000000274A                 call    _error
.text:000000000000274F
.text:000000000000274F loc_274F:                               ; CODE XREF: main+677↑j
.text:000000000000274F                 mov     rdi, r13
.text:0000000000002752                 call    quote
.text:0000000000002757                 lea     rsi, aInvalidModeS ; "invalid mode: %s"
.text:000000000000275E                 mov     rbx, rax
.text:0000000000002761                 mov     edx, 5          ; category
.text:0000000000002766                 xor     edi, edi        ; domainname
.text:0000000000002768                 call    _dcgettext
.text:000000000000276D                 xor     edi, edi        ; status
.text:000000000000276F                 mov     rdx, rax        ; format
.text:0000000000002772                 mov     rcx, rbx
.text:0000000000002775                 xor     esi, esi        ; errnum
.text:0000000000002777                 xor     eax, eax
.text:0000000000002779                 call    _error
.text:000000000000277E                 mov     edi, 1          ; status
.text:0000000000002783                 call    usage
.text:0000000000002788 ; ---------------------------------------------------------------------------
.text:0000000000002788
.text:0000000000002788 loc_2788:                               ; CODE XREF: main+BE2↑j
.text:0000000000002788                 mov     rdi, [rbx+rbp*8-8]
.text:000000000000278D                 call    quote
.text:0000000000002792                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:0000000000002799                 mov     rbx, rax
.text:000000000000279C                 xor     edi, edi        ; domainname
.text:000000000000279E                 mov     edx, 5          ; category
.text:00000000000027A3                 call    _dcgettext
.text:00000000000027A8                 mov     rcx, rbx
.text:00000000000027AB                 mov     rdx, rax        ; format
.text:00000000000027AE                 xor     esi, esi        ; errnum
.text:00000000000027B0                 xor     edi, edi        ; status
.text:00000000000027B2                 xor     eax, eax
.text:00000000000027B4                 call    _error
.text:00000000000027B9                 jmp     loc_26A9
.text:00000000000027BE ; ---------------------------------------------------------------------------
.text:00000000000027BE
.text:00000000000027BE loc_27BE:                               ; CODE XREF: main+65F↑j
.text:00000000000027BE                 mov     edx, eax
.text:00000000000027C0                 jmp     loc_267A
.text:00000000000027C5 ; ---------------------------------------------------------------------------
.text:00000000000027C5
.text:00000000000027C5 loc_27C5:                               ; CODE XREF: main+2C0↑j
.text:00000000000027C5                 mov     edx, 5
.text:00000000000027CA                 lea     rsi, aCannotCombineM ; "cannot combine mode and --reference opt"...
.text:00000000000027D1                 jmp     loc_2694
.text:00000000000027D1 ; } // starts at 1AA0
.text:00000000000027D1 main            endp
.text:00000000000027D1
.text:00000000000027D1 ; ---------------------------------------------------------------------------
.text:00000000000027D6                 align 20h
.text:00000000000027E0
.text:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027E0
.text:00000000000027E0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000027E0
.text:00000000000027E0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000027E0                 public start
.text:00000000000027E0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000027E0 ; __unwind {
.text:00000000000027E0                 xor     ebp, ebp
.text:00000000000027E2                 mov     r9, rdx         ; rtld_fini
.text:00000000000027E5                 pop     rsi             ; argc
.text:00000000000027E6                 mov     rdx, rsp        ; ubp_av
.text:00000000000027E9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000027ED                 push    rax
.text:00000000000027EE                 push    rsp             ; stack_end
.text:00000000000027EF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000027F6                 lea     rcx, __libc_csu_init ; init
.text:00000000000027FD                 lea     rdi, main       ; main
.text:0000000000002804                 call    cs:__libc_start_main_ptr
.text:000000000000280A                 hlt
.text:000000000000280A ; } // starts at 27E0
.text:000000000000280A start           endp
.text:000000000000280A
.text:000000000000280A ; ---------------------------------------------------------------------------
.text:000000000000280B                 align 10h
.text:0000000000002810
.text:0000000000002810 ; =============== S U B R O U T I N E =======================================
.text:0000000000002810
.text:0000000000002810 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002810
.text:0000000000002810 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_28C3↓p
.text:0000000000002810                 lea     rdi, __bss_start
.text:0000000000002817                 push    rbp
.text:0000000000002818                 lea     rax, __bss_start
.text:000000000000281F                 cmp     rax, rdi
.text:0000000000002822                 mov     rbp, rsp
.text:0000000000002825                 jz      short loc_2840
.text:0000000000002827                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000282E                 test    rax, rax
.text:0000000000002831                 jz      short loc_2840
.text:0000000000002833                 pop     rbp
.text:0000000000002834                 jmp     rax
.text:0000000000002834 ; ---------------------------------------------------------------------------
.text:0000000000002836                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002840                                         ; deregister_tm_clones+21↑j
.text:0000000000002840                 pop     rbp
.text:0000000000002841                 retn
.text:0000000000002841 deregister_tm_clones endp
.text:0000000000002841
.text:0000000000002841 ; ---------------------------------------------------------------------------
.text:0000000000002842                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002850
.text:0000000000002850 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002850                 lea     rdi, __bss_start
.text:0000000000002857                 lea     rsi, __bss_start
.text:000000000000285E                 push    rbp
.text:000000000000285F                 sub     rsi, rdi
.text:0000000000002862                 mov     rbp, rsp
.text:0000000000002865                 sar     rsi, 3
.text:0000000000002869                 mov     rax, rsi
.text:000000000000286C                 shr     rax, 3Fh
.text:0000000000002870                 add     rsi, rax
.text:0000000000002873                 sar     rsi, 1
.text:0000000000002876                 jz      short loc_2890
.text:0000000000002878                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000287F                 test    rax, rax
.text:0000000000002882                 jz      short loc_2890
.text:0000000000002884                 pop     rbp
.text:0000000000002885                 jmp     rax
.text:0000000000002885 ; ---------------------------------------------------------------------------
.text:0000000000002887                 align 10h
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002890                                         ; register_tm_clones+32↑j
.text:0000000000002890                 pop     rbp
.text:0000000000002891                 retn
.text:0000000000002891 register_tm_clones endp
.text:0000000000002891
.text:0000000000002891 ; ---------------------------------------------------------------------------
.text:0000000000002892                 align 20h
.text:00000000000028A0
.text:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028A0
.text:00000000000028A0 ; Attributes: info_from_lumina
.text:00000000000028A0
.text:00000000000028A0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000028A0                 cmp     cs:completed_7697, 0
.text:00000000000028A7                 jnz     short locret_28D8
.text:00000000000028A9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000028B1                 push    rbp
.text:00000000000028B2                 mov     rbp, rsp
.text:00000000000028B5                 jz      short loc_28C3
.text:00000000000028B7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000028BE                 call    __cxa_finalize
.text:00000000000028C3
.text:00000000000028C3 loc_28C3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000028C3                 call    deregister_tm_clones
.text:00000000000028C8                 mov     cs:completed_7697, 1
.text:00000000000028CF                 pop     rbp
.text:00000000000028D0                 retn
.text:00000000000028D0 ; ---------------------------------------------------------------------------
.text:00000000000028D1                 align 8
.text:00000000000028D8
.text:00000000000028D8 locret_28D8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000028D8                 rep retn
.text:00000000000028D8 __do_global_dtors_aux endp
.text:00000000000028D8
.text:00000000000028D8 ; ---------------------------------------------------------------------------
.text:00000000000028DA                 align 20h
.text:00000000000028E0
.text:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028E0
.text:00000000000028E0 ; Attributes: bp-based frame
.text:00000000000028E0
.text:00000000000028E0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000028E0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000028E0                 push    rbp
.text:00000000000028E1                 mov     rbp, rsp
.text:00000000000028E4                 pop     rbp
.text:00000000000028E5                 jmp     register_tm_clones
.text:00000000000028E5 frame_dummy     endp
.text:00000000000028E5
.text:00000000000028E5 ; ---------------------------------------------------------------------------
.text:00000000000028EA                 align 10h
.text:00000000000028F0
.text:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028F0
.text:00000000000028F0 ; Attributes: noreturn
.text:00000000000028F0
.text:00000000000028F0 ; void __fastcall __noreturn usage(int status)
.text:00000000000028F0                 public usage
.text:00000000000028F0 usage           proc near               ; CODE XREF: main+C0E↑p
.text:00000000000028F0                                         ; main+C6C↑p ...
.text:00000000000028F0
.text:00000000000028F0 var_A8          = qword ptr -0A8h
.text:00000000000028F0 var_A0          = qword ptr -0A0h
.text:00000000000028F0 var_98          = qword ptr -98h
.text:00000000000028F0 var_90          = qword ptr -90h
.text:00000000000028F0 var_88          = qword ptr -88h
.text:00000000000028F0 var_80          = qword ptr -80h
.text:00000000000028F0 var_78          = qword ptr -78h
.text:00000000000028F0 var_70          = qword ptr -70h
.text:00000000000028F0 var_68          = qword ptr -68h
.text:00000000000028F0 var_60          = qword ptr -60h
.text:00000000000028F0 var_58          = qword ptr -58h
.text:00000000000028F0 var_50          = qword ptr -50h
.text:00000000000028F0 var_48          = qword ptr -48h
.text:00000000000028F0 var_40          = qword ptr -40h
.text:00000000000028F0 var_30          = qword ptr -30h
.text:00000000000028F0
.text:00000000000028F0 ; __unwind {
.text:00000000000028F0                 push    r13
.text:00000000000028F2                 push    r12
.text:00000000000028F4                 mov     edx, 5          ; category
.text:00000000000028F9                 push    rbp
.text:00000000000028FA                 push    rbx
.text:00000000000028FB                 mov     ebp, edi
.text:00000000000028FD                 sub     rsp, 88h
.text:0000000000002904                 mov     rbx, cs:program_name
.text:000000000000290B                 mov     rax, fs:28h
.text:0000000000002914                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002919                 xor     eax, eax
.text:000000000000291B                 test    edi, edi
.text:000000000000291D                 jz      short loc_294D
.text:000000000000291F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002926                 xor     edi, edi        ; domainname
.text:0000000000002928                 call    _dcgettext
.text:000000000000292D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002934                 mov     rdx, rax
.text:0000000000002937                 mov     rcx, rbx
.text:000000000000293A                 mov     esi, 1
.text:000000000000293F                 xor     eax, eax
.text:0000000000002941                 call    ___fprintf_chk
.text:0000000000002946
.text:0000000000002946 loc_2946:                               ; CODE XREF: usage+33E↓j
.text:0000000000002946                 mov     edi, ebp        ; status
.text:0000000000002948                 call    _exit
.text:000000000000294D ; ---------------------------------------------------------------------------
.text:000000000000294D
.text:000000000000294D loc_294D:                               ; CODE XREF: usage+2D↑j
.text:000000000000294D                 lea     rsi, aUsageSOptionMo ; "Usage: %s [OPTION]... MODE[,MODE]... FI"...
.text:0000000000002954                 xor     edi, edi        ; domainname
.text:0000000000002956                 call    _dcgettext
.text:000000000000295B                 mov     rcx, rbx
.text:000000000000295E                 mov     r8, rbx
.text:0000000000002961                 mov     rdx, rbx
.text:0000000000002964                 mov     rsi, rax
.text:0000000000002967                 mov     edi, 1
.text:000000000000296C                 xor     eax, eax
.text:000000000000296E                 call    ___printf_chk
.text:0000000000002973                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000297A                 lea     rsi, aChangeTheModeO ; "Change the mode of each FILE to MODE.\n"...
.text:0000000000002981                 mov     edx, 5          ; category
.text:0000000000002986                 xor     edi, edi        ; domainname
.text:0000000000002988                 call    _dcgettext
.text:000000000000298D                 mov     rsi, rbx        ; stream
.text:0000000000002990                 mov     rdi, rax        ; s
.text:0000000000002993                 call    _fputs_unlocked
.text:0000000000002998                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000299F                 lea     rsi, aCChangesLikeVe ; "  -c, --changes          like verbose b"...
.text:00000000000029A6                 mov     edx, 5          ; category
.text:00000000000029AB                 xor     edi, edi        ; domainname
.text:00000000000029AD                 call    _dcgettext
.text:00000000000029B2                 mov     rsi, rbx        ; stream
.text:00000000000029B5                 mov     rdi, rax        ; s
.text:00000000000029B8                 call    _fputs_unlocked
.text:00000000000029BD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029C4                 lea     rsi, aNoPreserveRoot ; "      --no-preserve-root  do not treat "...
.text:00000000000029CB                 mov     edx, 5          ; category
.text:00000000000029D0                 xor     edi, edi        ; domainname
.text:00000000000029D2                 call    _dcgettext
.text:00000000000029D7                 mov     rsi, rbx        ; stream
.text:00000000000029DA                 mov     rdi, rax        ; s
.text:00000000000029DD                 call    _fputs_unlocked
.text:00000000000029E2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029E9                 lea     rsi, aReferenceRfile ; "      --reference=RFILE  use RFILE's mo"...
.text:00000000000029F0                 mov     edx, 5          ; category
.text:00000000000029F5                 xor     edi, edi        ; domainname
.text:00000000000029F7                 call    _dcgettext
.text:00000000000029FC                 mov     rsi, rbx        ; stream
.text:00000000000029FF                 mov     rdi, rax        ; s
.text:0000000000002A02                 call    _fputs_unlocked
.text:0000000000002A07                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A0E                 lea     rsi, aRRecursiveChan ; "  -R, --recursive        change files a"...
.text:0000000000002A15                 mov     edx, 5          ; category
.text:0000000000002A1A                 xor     edi, edi        ; domainname
.text:0000000000002A1C                 call    _dcgettext
.text:0000000000002A21                 mov     rsi, rbx        ; stream
.text:0000000000002A24                 mov     rdi, rax        ; s
.text:0000000000002A27                 call    _fputs_unlocked
.text:0000000000002A2C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A33                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002A3A                 mov     edx, 5          ; category
.text:0000000000002A3F                 xor     edi, edi        ; domainname
.text:0000000000002A41                 call    _dcgettext
.text:0000000000002A46                 mov     rsi, rbx        ; stream
.text:0000000000002A49                 mov     rdi, rax        ; s
.text:0000000000002A4C                 call    _fputs_unlocked
.text:0000000000002A51                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A58                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002A5F                 mov     edx, 5          ; category
.text:0000000000002A64                 xor     edi, edi        ; domainname
.text:0000000000002A66                 call    _dcgettext
.text:0000000000002A6B                 mov     rsi, rbx        ; stream
.text:0000000000002A6E                 mov     rdi, rax        ; s
.text:0000000000002A71                 call    _fputs_unlocked
.text:0000000000002A76                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A7D                 lea     rsi, aEachModeIsOfTh ; "\nEach MODE is of the form '[ugoa]*([-+"...
.text:0000000000002A84                 mov     edx, 5          ; category
.text:0000000000002A89                 xor     edi, edi        ; domainname
.text:0000000000002A8B                 call    _dcgettext
.text:0000000000002A90                 mov     rsi, rbx        ; stream
.text:0000000000002A93                 mov     rdi, rax        ; s
.text:0000000000002A96                 lea     rbx, aChmod     ; "chmod"
.text:0000000000002A9D                 call    _fputs_unlocked
.text:0000000000002AA2                 lea     rax, asc_9C0A   ; "["
.text:0000000000002AA9                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002AB0                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002AB9                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002AC2                 mov     rdx, rsp
.text:0000000000002AC5                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002AC9                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002AD0                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002AD5                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002ADC                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002AE1                 lea     rax, domainname ; "coreutils"
.text:0000000000002AE8                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002AED                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002AF4                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002AF9                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002B00                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002B05                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002B0A                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002B11                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002B16                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002B1D                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002B22                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002B27                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002B2C                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002B31                 nop     dword ptr [rax+00000000h]
.text:0000000000002B38
.text:0000000000002B38 loc_2B38:                               ; CODE XREF: usage+265↓j
.text:0000000000002B38                 add     rdx, 10h
.text:0000000000002B3C                 mov     rdi, [rdx]
.text:0000000000002B3F                 test    rdi, rdi
.text:0000000000002B42                 jz      short loc_2B57
.text:0000000000002B44                 mov     ecx, 6
.text:0000000000002B49                 mov     rsi, rbx
.text:0000000000002B4C                 repe cmpsb
.text:0000000000002B4E                 setnbe  al
.text:0000000000002B51                 sbb     al, 0
.text:0000000000002B53                 test    al, al
.text:0000000000002B55                 jnz     short loc_2B38
.text:0000000000002B57
.text:0000000000002B57 loc_2B57:                               ; CODE XREF: usage+252↑j
.text:0000000000002B57                 mov     r12, [rdx+8]
.text:0000000000002B5B                 xor     edi, edi        ; domainname
.text:0000000000002B5D                 mov     edx, 5          ; category
.text:0000000000002B62                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002B69                 test    r12, r12
.text:0000000000002B6C                 jz      loc_2C33
.text:0000000000002B72                 call    _dcgettext
.text:0000000000002B77                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002B7E                 lea     rdx, unk_9C80
.text:0000000000002B85                 mov     rsi, rax
.text:0000000000002B88                 mov     edi, 1
.text:0000000000002B8D                 xor     eax, eax
.text:0000000000002B8F                 call    ___printf_chk
.text:0000000000002B94                 xor     esi, esi        ; locale
.text:0000000000002B96                 mov     edi, 5          ; category
.text:0000000000002B9B                 call    _setlocale
.text:0000000000002BA0                 test    rax, rax
.text:0000000000002BA3                 jz      short loc_2BC1
.text:0000000000002BA5                 lea     rsi, s2         ; "en_"
.text:0000000000002BAC                 mov     edx, 3          ; n
.text:0000000000002BB1                 mov     rdi, rax        ; s1
.text:0000000000002BB4                 call    _strncmp
.text:0000000000002BB9                 test    eax, eax
.text:0000000000002BBB                 jnz     loc_2CC8
.text:0000000000002BC1
.text:0000000000002BC1 loc_2BC1:                               ; CODE XREF: usage+2B3↑j
.text:0000000000002BC1                                         ; usage+3FD↓j
.text:0000000000002BC1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002BC8                 xor     edi, edi        ; domainname
.text:0000000000002BCA                 mov     edx, 5          ; category
.text:0000000000002BCF                 call    _dcgettext
.text:0000000000002BD4                 lea     rcx, aChmod     ; "chmod"
.text:0000000000002BDB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002BE2                 mov     rsi, rax
.text:0000000000002BE5                 mov     edi, 1
.text:0000000000002BEA                 xor     eax, eax
.text:0000000000002BEC                 call    ___printf_chk
.text:0000000000002BF1                 cmp     r12, rbx
.text:0000000000002BF4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002BFB                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002C02                 cmovz   rbx, rcx
.text:0000000000002C06
.text:0000000000002C06 loc_2C06:                               ; CODE XREF: usage+3CC↓j
.text:0000000000002C06                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002C0D                 xor     edi, edi        ; domainname
.text:0000000000002C0F                 mov     edx, 5          ; category
.text:0000000000002C14                 call    _dcgettext
.text:0000000000002C19                 mov     rcx, rbx
.text:0000000000002C1C                 mov     rsi, rax
.text:0000000000002C1F                 mov     rdx, r12
.text:0000000000002C22                 mov     edi, 1
.text:0000000000002C27                 xor     eax, eax
.text:0000000000002C29                 call    ___printf_chk
.text:0000000000002C2E                 jmp     loc_2946
.text:0000000000002C33 ; ---------------------------------------------------------------------------
.text:0000000000002C33
.text:0000000000002C33 loc_2C33:                               ; CODE XREF: usage+27C↑j
.text:0000000000002C33                 call    _dcgettext
.text:0000000000002C38                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002C3F                 lea     rdx, unk_9C80
.text:0000000000002C46                 mov     rsi, rax
.text:0000000000002C49                 mov     edi, 1
.text:0000000000002C4E                 xor     eax, eax
.text:0000000000002C50                 call    ___printf_chk
.text:0000000000002C55                 xor     esi, esi        ; locale
.text:0000000000002C57                 mov     edi, 5          ; category
.text:0000000000002C5C                 call    _setlocale
.text:0000000000002C61                 test    rax, rax
.text:0000000000002C64                 jz      short loc_2C7E
.text:0000000000002C66                 lea     rsi, s2         ; "en_"
.text:0000000000002C6D                 mov     edx, 3          ; n
.text:0000000000002C72                 mov     rdi, rax        ; s1
.text:0000000000002C75                 call    _strncmp
.text:0000000000002C7A                 test    eax, eax
.text:0000000000002C7C                 jnz     short loc_2CC1
.text:0000000000002C7E
.text:0000000000002C7E loc_2C7E:                               ; CODE XREF: usage+374↑j
.text:0000000000002C7E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002C85                 mov     edx, 5          ; category
.text:0000000000002C8A                 xor     edi, edi        ; domainname
.text:0000000000002C8C                 lea     r12, aChmod     ; "chmod"
.text:0000000000002C93                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002C9A                 call    _dcgettext
.text:0000000000002C9F                 lea     rcx, aChmod     ; "chmod"
.text:0000000000002CA6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002CAD                 mov     rsi, rax
.text:0000000000002CB0                 mov     edi, 1
.text:0000000000002CB5                 xor     eax, eax
.text:0000000000002CB7                 call    ___printf_chk
.text:0000000000002CBC                 jmp     loc_2C06
.text:0000000000002CC1 ; ---------------------------------------------------------------------------
.text:0000000000002CC1
.text:0000000000002CC1 loc_2CC1:                               ; CODE XREF: usage+38C↑j
.text:0000000000002CC1                 lea     r12, aChmod     ; "chmod"
.text:0000000000002CC8
.text:0000000000002CC8 loc_2CC8:                               ; CODE XREF: usage+2CB↑j
.text:0000000000002CC8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002CCF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002CD6                 xor     edi, edi        ; domainname
.text:0000000000002CD8                 mov     edx, 5          ; category
.text:0000000000002CDD                 call    _dcgettext
.text:0000000000002CE2                 mov     rsi, r13        ; stream
.text:0000000000002CE5                 mov     rdi, rax        ; s
.text:0000000000002CE8                 call    _fputs_unlocked
.text:0000000000002CED                 jmp     loc_2BC1
.text:0000000000002CED ; } // starts at 28F0
.text:0000000000002CED usage           endp
.text:0000000000002CED
.text:0000000000002CED ; ---------------------------------------------------------------------------
.text:0000000000002CF2                 align 20h
.text:0000000000002D00
.text:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D00
.text:0000000000002D00
.text:0000000000002D00                 public close_stdout_set_file_name
.text:0000000000002D00 close_stdout_set_file_name proc near
.text:0000000000002D00 ; __unwind {
.text:0000000000002D00                 mov     cs:file_name, rdi
.text:0000000000002D07                 retn
.text:0000000000002D07 ; } // starts at 2D00
.text:0000000000002D07 close_stdout_set_file_name endp
.text:0000000000002D07
.text:0000000000002D07 ; ---------------------------------------------------------------------------
.text:0000000000002D08                 align 10h
.text:0000000000002D10
.text:0000000000002D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D10
.text:0000000000002D10
.text:0000000000002D10                 public close_stdout_set_ignore_EPIPE
.text:0000000000002D10 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002D10 ; __unwind {
.text:0000000000002D10                 mov     cs:ignore_EPIPE, dil
.text:0000000000002D17                 retn
.text:0000000000002D17 ; } // starts at 2D10
.text:0000000000002D17 close_stdout_set_ignore_EPIPE endp
.text:0000000000002D17
.text:0000000000002D17 ; ---------------------------------------------------------------------------
.text:0000000000002D18                 align 20h
.text:0000000000002D20
.text:0000000000002D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D20
.text:0000000000002D20 ; Attributes: info_from_lumina
.text:0000000000002D20
.text:0000000000002D20 ; void __cdecl close_stdout()
.text:0000000000002D20                 public close_stdout
.text:0000000000002D20 close_stdout    proc near               ; DATA XREF: main+77↑o
.text:0000000000002D20 ; __unwind {
.text:0000000000002D20                 push    rbp
.text:0000000000002D21                 push    rbx
.text:0000000000002D22                 sub     rsp, 8
.text:0000000000002D26                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002D2D                 call    close_stream
.text:0000000000002D32                 test    eax, eax
.text:0000000000002D34                 jz      short loc_2D4C
.text:0000000000002D36                 call    ___errno_location
.text:0000000000002D3B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002D42                 mov     rbx, rax
.text:0000000000002D45                 jz      short loc_2D63
.text:0000000000002D47                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002D4A                 jnz     short loc_2D63
.text:0000000000002D4C
.text:0000000000002D4C loc_2D4C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002D4C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002D53                 call    close_stream
.text:0000000000002D58                 test    eax, eax
.text:0000000000002D5A                 jnz     short loc_2DA2
.text:0000000000002D5C                 add     rsp, 8
.text:0000000000002D60                 pop     rbx
.text:0000000000002D61                 pop     rbp
.text:0000000000002D62                 retn
.text:0000000000002D63 ; ---------------------------------------------------------------------------
.text:0000000000002D63
.text:0000000000002D63 loc_2D63:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002D63                                         ; close_stdout+2A↑j
.text:0000000000002D63                 lea     rsi, aWriteError ; "write error"
.text:0000000000002D6A                 xor     edi, edi        ; domainname
.text:0000000000002D6C                 mov     edx, 5          ; category
.text:0000000000002D71                 call    _dcgettext
.text:0000000000002D76                 mov     rdi, cs:file_name
.text:0000000000002D7D                 mov     rbp, rax
.text:0000000000002D80                 test    rdi, rdi
.text:0000000000002D83                 jz      short loc_2DAD
.text:0000000000002D85                 call    quotearg_colon
.text:0000000000002D8A                 mov     esi, [rbx]      ; errnum
.text:0000000000002D8C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002D93                 mov     rcx, rax
.text:0000000000002D96                 mov     r8, rbp
.text:0000000000002D99                 xor     edi, edi        ; status
.text:0000000000002D9B                 xor     eax, eax
.text:0000000000002D9D                 call    _error
.text:0000000000002DA2
.text:0000000000002DA2 loc_2DA2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002DA2                                         ; close_stdout+A2↓j
.text:0000000000002DA2                 mov     edi, cs:exit_failure ; status
.text:0000000000002DA8                 call    __exit
.text:0000000000002DAD ; ---------------------------------------------------------------------------
.text:0000000000002DAD
.text:0000000000002DAD loc_2DAD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002DAD                 mov     esi, [rbx]      ; errnum
.text:0000000000002DAF                 lea     rdx, aInvalidModeS+0Eh ; format
.text:0000000000002DB6                 mov     rcx, rax
.text:0000000000002DB9                 xor     edi, edi        ; status
.text:0000000000002DBB                 xor     eax, eax
.text:0000000000002DBD                 call    _error
.text:0000000000002DC2                 jmp     short loc_2DA2
.text:0000000000002DC2 ; } // starts at 2D20
.text:0000000000002DC2 close_stdout    endp
.text:0000000000002DC2
.text:0000000000002DC2 ; ---------------------------------------------------------------------------
.text:0000000000002DC4                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DD0
.text:0000000000002DD0 ; Attributes: info_from_lumina
.text:0000000000002DD0
.text:0000000000002DD0 ; void __fastcall strmode(mode_t mode, char *str)
.text:0000000000002DD0                 public strmode
.text:0000000000002DD0 strmode         proc near               ; CODE XREF: main+697↑p
.text:0000000000002DD0                                         ; main+6AD↑p ...
.text:0000000000002DD0 ; __unwind {
.text:0000000000002DD0                 mov     edx, edi
.text:0000000000002DD2                 mov     eax, 2Dh ; '-'
.text:0000000000002DD7                 and     edx, 0F000h
.text:0000000000002DDD                 cmp     edx, 8000h
.text:0000000000002DE3                 jz      short loc_2E40
.text:0000000000002DE5                 cmp     edx, 4000h
.text:0000000000002DEB                 mov     eax, 64h ; 'd'
.text:0000000000002DF0                 jz      short loc_2E40
.text:0000000000002DF2                 cmp     edx, 6000h
.text:0000000000002DF8                 mov     eax, 62h ; 'b'
.text:0000000000002DFD                 jz      short loc_2E40
.text:0000000000002DFF                 cmp     edx, 2000h
.text:0000000000002E05                 mov     eax, 63h ; 'c'
.text:0000000000002E0A                 jz      short loc_2E40
.text:0000000000002E0C                 cmp     edx, 0A000h
.text:0000000000002E12                 mov     eax, 6Ch ; 'l'
.text:0000000000002E17                 jz      short loc_2E40
.text:0000000000002E19                 cmp     edx, 1000h
.text:0000000000002E1F                 mov     eax, 70h ; 'p'
.text:0000000000002E24                 jz      short loc_2E40
.text:0000000000002E26                 cmp     edx, 0C000h
.text:0000000000002E2C                 mov     eax, 73h ; 's'
.text:0000000000002E31                 mov     edx, 3Fh ; '?'
.text:0000000000002E36                 cmovnz  eax, edx
.text:0000000000002E39                 nop     dword ptr [rax+00000000h]
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: strmode+13↑j
.text:0000000000002E40                                         ; strmode+20↑j ...
.text:0000000000002E40                 mov     [rsi], al
.text:0000000000002E42                 mov     eax, edi
.text:0000000000002E44                 and     eax, 100h
.text:0000000000002E49                 cmp     eax, 1
.text:0000000000002E4C                 sbb     eax, eax
.text:0000000000002E4E                 and     eax, 0FFFFFFBBh
.text:0000000000002E51                 add     eax, 72h ; 'r'
.text:0000000000002E54                 mov     [rsi+1], al
.text:0000000000002E57                 mov     eax, edi
.text:0000000000002E59                 and     eax, 80h
.text:0000000000002E5E                 cmp     eax, 1
.text:0000000000002E61                 sbb     eax, eax
.text:0000000000002E63                 and     eax, 0FFFFFFB6h
.text:0000000000002E66                 add     eax, 77h ; 'w'
.text:0000000000002E69                 mov     [rsi+2], al
.text:0000000000002E6C                 mov     eax, edi
.text:0000000000002E6E                 and     eax, 40h
.text:0000000000002E71                 cmp     eax, 1
.text:0000000000002E74                 sbb     eax, eax
.text:0000000000002E76                 test    edi, 800h
.text:0000000000002E7C                 jz      loc_2F20
.text:0000000000002E82                 and     eax, 0FFFFFFE0h
.text:0000000000002E85                 add     eax, 73h ; 's'
.text:0000000000002E88
.text:0000000000002E88 loc_2E88:                               ; CODE XREF: strmode+156↓j
.text:0000000000002E88                 mov     [rsi+3], al
.text:0000000000002E8B                 mov     eax, edi
.text:0000000000002E8D                 and     eax, 20h
.text:0000000000002E90                 cmp     eax, 1
.text:0000000000002E93                 sbb     eax, eax
.text:0000000000002E95                 and     eax, 0FFFFFFBBh
.text:0000000000002E98                 add     eax, 72h ; 'r'
.text:0000000000002E9B                 mov     [rsi+4], al
.text:0000000000002E9E                 mov     eax, edi
.text:0000000000002EA0                 and     eax, 10h
.text:0000000000002EA3                 cmp     eax, 1
.text:0000000000002EA6                 sbb     eax, eax
.text:0000000000002EA8                 and     eax, 0FFFFFFB6h
.text:0000000000002EAB                 add     eax, 77h ; 'w'
.text:0000000000002EAE                 mov     [rsi+5], al
.text:0000000000002EB1                 mov     eax, edi
.text:0000000000002EB3                 and     eax, 8
.text:0000000000002EB6                 cmp     eax, 1
.text:0000000000002EB9                 sbb     eax, eax
.text:0000000000002EBB                 test    edi, 400h
.text:0000000000002EC1                 jz      loc_2F48
.text:0000000000002EC7                 and     eax, 0FFFFFFE0h
.text:0000000000002ECA                 add     eax, 73h ; 's'
.text:0000000000002ECD
.text:0000000000002ECD loc_2ECD:                               ; CODE XREF: strmode+17E↓j
.text:0000000000002ECD                 mov     [rsi+6], al
.text:0000000000002ED0                 mov     eax, edi
.text:0000000000002ED2                 and     eax, 4
.text:0000000000002ED5                 cmp     eax, 1
.text:0000000000002ED8                 sbb     eax, eax
.text:0000000000002EDA                 and     eax, 0FFFFFFBBh
.text:0000000000002EDD                 add     eax, 72h ; 'r'
.text:0000000000002EE0                 mov     [rsi+7], al
.text:0000000000002EE3                 mov     eax, edi
.text:0000000000002EE5                 and     eax, 2
.text:0000000000002EE8                 cmp     eax, 1
.text:0000000000002EEB                 sbb     eax, eax
.text:0000000000002EED                 and     eax, 0FFFFFFB6h
.text:0000000000002EF0                 add     eax, 77h ; 'w'
.text:0000000000002EF3                 mov     [rsi+8], al
.text:0000000000002EF6                 mov     eax, edi
.text:0000000000002EF8                 and     eax, 1
.text:0000000000002EFB                 cmp     eax, 1
.text:0000000000002EFE                 sbb     eax, eax
.text:0000000000002F00                 and     edi, 200h
.text:0000000000002F06                 jz      short loc_2F30
.text:0000000000002F08                 and     eax, 0FFFFFFE0h
.text:0000000000002F0B                 add     eax, 74h ; 't'
.text:0000000000002F0E                 mov     [rsi+9], al
.text:0000000000002F11                 mov     eax, 20h ; ' '
.text:0000000000002F16                 mov     [rsi+0Ah], ax
.text:0000000000002F1A                 retn
.text:0000000000002F1A ; ---------------------------------------------------------------------------
.text:0000000000002F1B                 align 20h
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: strmode+AC↑j
.text:0000000000002F20                 and     eax, 0FFFFFFB5h
.text:0000000000002F23                 add     eax, 78h ; 'x'
.text:0000000000002F26                 jmp     loc_2E88
.text:0000000000002F26 ; ---------------------------------------------------------------------------
.text:0000000000002F2B                 align 10h
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: strmode+136↑j
.text:0000000000002F30                 and     eax, 0FFFFFFB5h
.text:0000000000002F33                 add     eax, 78h ; 'x'
.text:0000000000002F36                 mov     [rsi+9], al
.text:0000000000002F39                 mov     eax, 20h ; ' '
.text:0000000000002F3E                 mov     [rsi+0Ah], ax
.text:0000000000002F42                 retn
.text:0000000000002F42 ; ---------------------------------------------------------------------------
.text:0000000000002F43                 align 8
.text:0000000000002F48
.text:0000000000002F48 loc_2F48:                               ; CODE XREF: strmode+F1↑j
.text:0000000000002F48                 and     eax, 0FFFFFFB5h
.text:0000000000002F4B                 add     eax, 78h ; 'x'
.text:0000000000002F4E                 jmp     loc_2ECD
.text:0000000000002F4E ; } // starts at 2DD0
.text:0000000000002F4E strmode         endp
.text:0000000000002F4E
.text:0000000000002F4E ; ---------------------------------------------------------------------------
.text:0000000000002F53                 align 20h
.text:0000000000002F60
.text:0000000000002F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F60
.text:0000000000002F60
.text:0000000000002F60                 public filemodestring
.text:0000000000002F60 filemodestring  proc near
.text:0000000000002F60 ; __unwind {
.text:0000000000002F60                 mov     edi, [rdi+18h]
.text:0000000000002F63                 jmp     strmode
.text:0000000000002F63 ; } // starts at 2F60
.text:0000000000002F63 filemodestring  endp
.text:0000000000002F63
.text:0000000000002F63 ; ---------------------------------------------------------------------------
.text:0000000000002F68                 align 10h
.text:0000000000002F70
.text:0000000000002F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F70
.text:0000000000002F70 ; Attributes: info_from_lumina
.text:0000000000002F70
.text:0000000000002F70                 public mode_compile
.text:0000000000002F70 mode_compile    proc near               ; CODE XREF: main+668↑p
.text:0000000000002F70 ; __unwind {
.text:0000000000002F70                 push    rbp
.text:0000000000002F71                 push    rbx
.text:0000000000002F72                 mov     rbx, rdi
.text:0000000000002F75                 sub     rsp, 8
.text:0000000000002F79                 movsx   eax, byte ptr [rdi]
.text:0000000000002F7C                 lea     edx, [rax-30h]
.text:0000000000002F7F                 cmp     dl, 7
.text:0000000000002F82                 jbe     loc_3038
.text:0000000000002F88                 test    al, al
.text:0000000000002F8A                 mov     rcx, rdi
.text:0000000000002F8D                 mov     edi, 1
.text:0000000000002F92                 jz      short loc_2FBB
.text:0000000000002F94                 nop     dword ptr [rax+00h]
.text:0000000000002F98
.text:0000000000002F98 loc_2F98:                               ; CODE XREF: mode_compile+49↓j
.text:0000000000002F98                 mov     edx, eax
.text:0000000000002F9A                 and     edx, 0FFFFFFEFh
.text:0000000000002F9D                 cmp     dl, 2Dh ; '-'
.text:0000000000002FA0                 setz    dl
.text:0000000000002FA3                 cmp     al, 2Bh ; '+'
.text:0000000000002FA5                 setz    al
.text:0000000000002FA8                 add     rcx, 1
.text:0000000000002FAC                 or      eax, edx
.text:0000000000002FAE                 movzx   eax, al
.text:0000000000002FB1                 add     rdi, rax
.text:0000000000002FB4                 movzx   eax, byte ptr [rcx]
.text:0000000000002FB7                 test    al, al
.text:0000000000002FB9                 jnz     short loc_2F98
.text:0000000000002FBB
.text:0000000000002FBB loc_2FBB:                               ; CODE XREF: mode_compile+22↑j
.text:0000000000002FBB                 mov     edx, 10h
.text:0000000000002FC0                 xor     ecx, ecx
.text:0000000000002FC2                 mov     rax, rdx
.text:0000000000002FC5                 mul     rdi
.text:0000000000002FC8                 jo      loc_32DF
.text:0000000000002FCE
.text:0000000000002FCE loc_2FCE:                               ; CODE XREF: mode_compile+374↓j
.text:0000000000002FCE                 test    rax, rax
.text:0000000000002FD1                 js      loc_32E9
.text:0000000000002FD7                 test    rcx, rcx
.text:0000000000002FDA                 jnz     loc_32E9
.text:0000000000002FE0                 shl     rdi, 4
.text:0000000000002FE4                 lea     rbp, jpt_31A4
.text:0000000000002FEB                 call    xmalloc
.text:0000000000002FF0                 xor     esi, esi
.text:0000000000002FF2
.text:0000000000002FF2 loc_2FF2:                               ; CODE XREF: mode_compile+38D↓j
.text:0000000000002FF2                 xor     r11d, r11d
.text:0000000000002FF5
.text:0000000000002FF5 loc_2FF5:                               ; CODE XREF: mode_compile+2EA↓j
.text:0000000000002FF5                 movzx   r9d, byte ptr [rbx]
.text:0000000000002FF9                 cmp     r9b, 61h ; 'a'
.text:0000000000002FFD                 jz      loc_3250
.text:0000000000003003                 jle     short loc_3070
.text:0000000000003005                 cmp     r9b, 6Fh ; 'o'
.text:0000000000003009                 jz      loc_3280
.text:000000000000300F                 cmp     r9b, 75h ; 'u'
.text:0000000000003013                 jz      loc_3270
.text:0000000000003019                 cmp     r9b, 67h ; 'g'
.text:000000000000301D                 jz      loc_3260
.text:0000000000003023
.text:0000000000003023 loc_3023:                               ; CODE XREF: mode_compile+110↓j
.text:0000000000003023                                         ; mode_compile+1B8↓j ...
.text:0000000000003023                 mov     rdi, rax        ; ptr
.text:0000000000003026                 call    free
.text:000000000000302B                 xor     eax, eax
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: mode_compile+3A4↓j
.text:000000000000302D                 add     rsp, 8
.text:0000000000003031                 pop     rbx
.text:0000000000003032                 pop     rbp
.text:0000000000003033                 retn
.text:0000000000003033 ; ---------------------------------------------------------------------------
.text:0000000000003034                 align 8
.text:0000000000003038
.text:0000000000003038 loc_3038:                               ; CODE XREF: mode_compile+12↑j
.text:0000000000003038                 mov     rdx, rdi
.text:000000000000303B                 xor     ebp, ebp
.text:000000000000303D                 jmp     short loc_304F
.text:000000000000303D ; ---------------------------------------------------------------------------
.text:000000000000303F                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: mode_compile+ED↓j
.text:0000000000003040                 movsx   eax, byte ptr [rdx]
.text:0000000000003043                 lea     ecx, [rax-30h]
.text:0000000000003046                 cmp     cl, 7
.text:0000000000003049                 ja      loc_3290
.text:000000000000304F
.text:000000000000304F loc_304F:                               ; CODE XREF: mode_compile+CD↑j
.text:000000000000304F                 lea     ebp, [rax+rbp*8-30h]
.text:0000000000003053                 add     rdx, 1
.text:0000000000003057                 cmp     ebp, 0FFFh
.text:000000000000305D                 jbe     short loc_3040
.text:000000000000305F
.text:000000000000305F loc_305F:                               ; CODE XREF: mode_compile+322↓j
.text:000000000000305F                 add     rsp, 8
.text:0000000000003063                 xor     eax, eax
.text:0000000000003065                 pop     rbx
.text:0000000000003066                 pop     rbp
.text:0000000000003067                 retn
.text:0000000000003067 ; ---------------------------------------------------------------------------
.text:0000000000003068                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: mode_compile+93↑j
.text:0000000000003070                 cmp     r9b, 2Dh ; '-'
.text:0000000000003074                 jz      short loc_3082
.text:0000000000003076                 cmp     r9b, 3Dh ; '='
.text:000000000000307A                 jz      short loc_3082
.text:000000000000307C                 cmp     r9b, 2Bh ; '+'
.text:0000000000003080                 jnz     short loc_3023
.text:0000000000003082
.text:0000000000003082 loc_3082:                               ; CODE XREF: mode_compile+104↑j
.text:0000000000003082                                         ; mode_compile+10A↑j
.text:0000000000003082                 lea     rdi, [rsi+1]
.text:0000000000003086                 shl     rsi, 4
.text:000000000000308A                 add     rsi, rax
.text:000000000000308D                 jmp     short loc_30F4
.text:000000000000308D ; ---------------------------------------------------------------------------
.text:000000000000308F                 align 10h
.text:0000000000003090
.text:0000000000003090 loc_3090:                               ; CODE XREF: mode_compile+195↓j
.text:0000000000003090                 cmp     dl, 6Fh ; 'o'
.text:0000000000003093                 lea     r8, [rbx+2]
.text:0000000000003097                 jz      loc_3230
.text:000000000000309D                 cmp     dl, 75h ; 'u'
.text:00000000000030A0                 mov     r10d, 1C0h
.text:00000000000030A6                 jnz     loc_3180
.text:00000000000030AC
.text:00000000000030AC loc_30AC:                               ; CODE XREF: mode_compile+2C6↓j
.text:00000000000030AC                                         ; mode_compile+2DA↓j
.text:00000000000030AC                 mov     [rsi], r9b
.text:00000000000030AF                 mov     byte ptr [rsi+1], 3
.text:00000000000030B3                 movzx   r9d, byte ptr [rbx+2]
.text:00000000000030B8                 mov     [rsi+4], r11d
.text:00000000000030BC                 mov     rbx, r8
.text:00000000000030BF                 mov     [rsi+8], r10d
.text:00000000000030C3
.text:00000000000030C3 loc_30C3:                               ; CODE XREF: mode_compile+26D↓j
.text:00000000000030C3                 mov     edx, r10d
.text:00000000000030C6                 and     edx, r11d
.text:00000000000030C9                 test    r11d, r11d
.text:00000000000030CC                 cmovnz  r10d, edx
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: mode_compile+205↓j
.text:00000000000030D0                 mov     edx, r9d
.text:00000000000030D3                 mov     [rsi+0Ch], r10d
.text:00000000000030D7                 add     rsi, 10h
.text:00000000000030DB                 and     edx, 0FFFFFFEFh
.text:00000000000030DE                 lea     rcx, [rdi+1]
.text:00000000000030E2                 cmp     dl, 2Dh ; '-'
.text:00000000000030E5                 jz      short loc_30F1
.text:00000000000030E7                 cmp     r9b, 2Bh ; '+'
.text:00000000000030EB                 jnz     loc_32F0
.text:00000000000030F1
.text:00000000000030F1 loc_30F1:                               ; CODE XREF: mode_compile+175↑j
.text:00000000000030F1                 mov     rdi, rcx
.text:00000000000030F4
.text:00000000000030F4 loc_30F4:                               ; CODE XREF: mode_compile+11D↑j
.text:00000000000030F4                 movsx   edx, byte ptr [rbx+1]
.text:00000000000030F8                 lea     rcx, [rbx+1]
.text:00000000000030FC                 cmp     dl, 67h ; 'g'
.text:00000000000030FF                 jz      loc_3240
.text:0000000000003105                 jg      short loc_3090
.text:0000000000003107                 lea     r8d, [rdx-30h]
.text:000000000000310B                 cmp     r8b, 7
.text:000000000000310F                 ja      short loc_3180
.text:0000000000003111                 xor     r8d, r8d
.text:0000000000003114                 nop     dword ptr [rax+00h]
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: mode_compile+1C9↓j
.text:0000000000003118                 lea     r8d, [rdx+r8*8-30h]
.text:000000000000311D                 add     rcx, 1
.text:0000000000003121                 cmp     r8d, 0FFFh
.text:0000000000003128                 ja      loc_3023
.text:000000000000312E                 movsx   edx, byte ptr [rcx]
.text:0000000000003131                 lea     r10d, [rdx-30h]
.text:0000000000003135                 cmp     r10b, 7
.text:0000000000003139                 jbe     short loc_3118
.text:000000000000313B                 test    r11d, r11d
.text:000000000000313E                 jnz     loc_3023
.text:0000000000003144                 test    dl, dl
.text:0000000000003146                 jz      short loc_3151
.text:0000000000003148                 cmp     dl, 2Ch ; ','
.text:000000000000314B                 jnz     loc_3023
.text:0000000000003151
.text:0000000000003151 loc_3151:                               ; CODE XREF: mode_compile+1D6↑j
.text:0000000000003151                 mov     [rsi], r9b
.text:0000000000003154                 mov     byte ptr [rsi+1], 1
.text:0000000000003158                 mov     r9d, edx
.text:000000000000315B                 mov     dword ptr [rsi+4], 0FFFh
.text:0000000000003162                 mov     [rsi+8], r8d
.text:0000000000003166                 mov     rbx, rcx
.text:0000000000003169                 mov     r11d, 0FFFh
.text:000000000000316F                 mov     r10d, 0FFFh
.text:0000000000003175                 jmp     loc_30D0
.text:0000000000003175 ; ---------------------------------------------------------------------------
.text:000000000000317A                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: mode_compile+136↑j
.text:0000000000003180                                         ; mode_compile+19F↑j
.text:0000000000003180                 lea     r8d, [rdx-58h]  ; switch 33 cases
.text:0000000000003184                 xor     r10d, r10d
.text:0000000000003187                 mov     ebx, 1
.text:000000000000318C                 cmp     r8b, 20h
.text:0000000000003190                 ja      short def_31A4  ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:0000000000003192                 nop     word ptr [rax+rax+00h]
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: mode_compile+257↓j
.text:0000000000003198                 movzx   r8d, r8b
.text:000000000000319C                 movsxd  r8, ss:(jpt_31A4 - 0A5C4h)[rbp+r8*4]
.text:00000000000031A1                 add     r8, rbp
.text:00000000000031A4                 jmp     r8              ; switch jump
.text:00000000000031A4 ; ---------------------------------------------------------------------------
.text:00000000000031A7                 align 10h
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000031B0                                         ; DATA XREF: .rodata:jpt_31A4↓o
.text:00000000000031B0                 mov     ebx, 2          ; jumptable 00000000000CDF74 case 88
.text:00000000000031B5                 nop     dword ptr [rax]
.text:00000000000031B8
.text:00000000000031B8 loc_31B8:                               ; CODE XREF: mode_compile+27C↓j
.text:00000000000031B8                                         ; mode_compile+284↓j ...
.text:00000000000031B8                 add     rcx, 1
.text:00000000000031BC                 movzx   edx, byte ptr [rcx]
.text:00000000000031BF                 lea     r8d, [rdx-58h]
.text:00000000000031C3                 cmp     r8b, 20h ; ' '
.text:00000000000031C7                 jbe     short loc_3198
.text:00000000000031C9
.text:00000000000031C9 def_31A4:                               ; CODE XREF: mode_compile+220↑j
.text:00000000000031C9                                         ; mode_compile+234↑j
.text:00000000000031C9                                         ; DATA XREF: ...
.text:00000000000031C9                 mov     [rsi], r9b      ; jumptable 00000000000CDF74 default case, cases 89-113,117,118
.text:00000000000031CC                 mov     [rsi+1], bl
.text:00000000000031CF                 mov     r9d, edx
.text:00000000000031D2                 mov     [rsi+4], r11d
.text:00000000000031D6                 mov     [rsi+8], r10d
.text:00000000000031DA                 mov     rbx, rcx
.text:00000000000031DD                 jmp     loc_30C3
.text:00000000000031DD ; ---------------------------------------------------------------------------
.text:00000000000031E2                 align 8
.text:00000000000031E8
.text:00000000000031E8 loc_31E8:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000031E8                                         ; DATA XREF: .rodata:jpt_31A4↓o
.text:00000000000031E8                 or      r10d, 49h       ; jumptable 00000000000CDF74 case 120
.text:00000000000031EC                 jmp     short loc_31B8
.text:00000000000031EC ; ---------------------------------------------------------------------------
.text:00000000000031EE                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: mode_compile+234↑j
.text:00000000000031F0                                         ; DATA XREF: .rodata:jpt_31A4↓o
.text:00000000000031F0                 or      r10b, 92h       ; jumptable 00000000000CDF74 case 119
.text:00000000000031F4                 jmp     short loc_31B8
.text:00000000000031F4 ; ---------------------------------------------------------------------------
.text:00000000000031F6                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000003200                                         ; DATA XREF: .rodata:jpt_31A4↓o
.text:0000000000003200                 or      r10d, 200h      ; jumptable 00000000000CDF74 case 116
.text:0000000000003207                 jmp     short loc_31B8
.text:0000000000003207 ; ---------------------------------------------------------------------------
.text:0000000000003209                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000003210                                         ; DATA XREF: .rodata:jpt_31A4↓o
.text:0000000000003210                 or      r10d, 0C00h     ; jumptable 00000000000CDF74 case 115
.text:0000000000003217                 jmp     short loc_31B8
.text:0000000000003217 ; ---------------------------------------------------------------------------
.text:0000000000003219                 align 20h
.text:0000000000003220
.text:0000000000003220 loc_3220:                               ; CODE XREF: mode_compile+234↑j
.text:0000000000003220                                         ; DATA XREF: .rodata:jpt_31A4↓o
.text:0000000000003220                 or      r10d, 124h      ; jumptable 00000000000CDF74 case 114
.text:0000000000003227                 jmp     short loc_31B8
.text:0000000000003227 ; ---------------------------------------------------------------------------
.text:0000000000003229                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: mode_compile+127↑j
.text:0000000000003230                 mov     r10d, 7
.text:0000000000003236                 jmp     loc_30AC
.text:0000000000003236 ; ---------------------------------------------------------------------------
.text:000000000000323B                 align 20h
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: mode_compile+18F↑j
.text:0000000000003240                 lea     r8, [rbx+2]
.text:0000000000003244                 mov     r10d, 38h ; '8'
.text:000000000000324A                 jmp     loc_30AC
.text:000000000000324A ; ---------------------------------------------------------------------------
.text:000000000000324F                 align 10h
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: mode_compile+8D↑j
.text:0000000000003250                 mov     r11d, 0FFFh
.text:0000000000003256
.text:0000000000003256 loc_3256:                               ; CODE XREF: mode_compile+2F7↓j
.text:0000000000003256                                         ; mode_compile+307↓j ...
.text:0000000000003256                 add     rbx, 1
.text:000000000000325A                 jmp     loc_2FF5
.text:000000000000325A ; ---------------------------------------------------------------------------
.text:000000000000325F                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: mode_compile+AD↑j
.text:0000000000003260                 or      r11d, 438h
.text:0000000000003267                 jmp     short loc_3256
.text:0000000000003267 ; ---------------------------------------------------------------------------
.text:0000000000003269                 align 10h
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: mode_compile+A3↑j
.text:0000000000003270                 or      r11d, 9C0h
.text:0000000000003277                 jmp     short loc_3256
.text:0000000000003277 ; ---------------------------------------------------------------------------
.text:0000000000003279                 align 20h
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: mode_compile+99↑j
.text:0000000000003280                 or      r11d, 207h
.text:0000000000003287                 jmp     short loc_3256
.text:0000000000003287 ; ---------------------------------------------------------------------------
.text:0000000000003289                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: mode_compile+D9↑j
.text:0000000000003290                 test    al, al
.text:0000000000003292                 jnz     loc_305F
.text:0000000000003298                 sub     rdx, rbx
.text:000000000000329B                 mov     ebx, ebp
.text:000000000000329D                 mov     eax, 0FFFh
.text:00000000000032A2                 and     ebx, 0C00h
.text:00000000000032A8                 mov     edi, 20h ; ' '
.text:00000000000032AD                 or      ebx, 3FFh
.text:00000000000032B3                 cmp     rdx, 5
.text:00000000000032B7                 cmovge  ebx, eax
.text:00000000000032BA                 call    xmalloc
.text:00000000000032BF                 mov     edx, 13Dh
.text:00000000000032C4                 mov     dword ptr [rax+4], 0FFFh
.text:00000000000032CB                 mov     [rax+8], ebp
.text:00000000000032CE                 mov     [rax], dx
.text:00000000000032D1                 mov     [rax+0Ch], ebx
.text:00000000000032D4                 mov     byte ptr [rax+11h], 0
.text:00000000000032D8                 add     rsp, 8
.text:00000000000032DC                 pop     rbx
.text:00000000000032DD                 pop     rbp
.text:00000000000032DE                 retn
.text:00000000000032DF ; ---------------------------------------------------------------------------
.text:00000000000032DF
.text:00000000000032DF loc_32DF:                               ; CODE XREF: mode_compile+58↑j
.text:00000000000032DF                 mov     ecx, 1
.text:00000000000032E4                 jmp     loc_2FCE
.text:00000000000032E9 ; ---------------------------------------------------------------------------
.text:00000000000032E9
.text:00000000000032E9 loc_32E9:                               ; CODE XREF: mode_compile+61↑j
.text:00000000000032E9                                         ; mode_compile+6A↑j
.text:00000000000032E9                 call    xalloc_die
.text:00000000000032E9 ; ---------------------------------------------------------------------------
.text:00000000000032EE                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: mode_compile+17B↑j
.text:00000000000032F0                 cmp     r9b, 2Ch ; ','
.text:00000000000032F4                 jnz     short loc_3302
.text:00000000000032F6                 add     rbx, 1
.text:00000000000032FA                 mov     rsi, rdi
.text:00000000000032FD                 jmp     loc_2FF2
.text:0000000000003302 ; ---------------------------------------------------------------------------
.text:0000000000003302
.text:0000000000003302 loc_3302:                               ; CODE XREF: mode_compile+384↑j
.text:0000000000003302                 test    r9b, r9b
.text:0000000000003305                 jnz     loc_3023
.text:000000000000330B                 shl     rdi, 4
.text:000000000000330F                 mov     byte ptr [rax+rdi+1], 0
.text:0000000000003314                 jmp     loc_302D
.text:0000000000003314 ; } // starts at 2F70
.text:0000000000003314 mode_compile    endp
.text:0000000000003314
.text:0000000000003314 ; ---------------------------------------------------------------------------
.text:0000000000003319                 align 20h
.text:0000000000003320
.text:0000000000003320 ; =============== S U B R O U T I N E =======================================
.text:0000000000003320
.text:0000000000003320
.text:0000000000003320 ; __int64 __fastcall mode_create_from_ref(char *filename)
.text:0000000000003320                 public mode_create_from_ref
.text:0000000000003320 mode_create_from_ref proc near          ; CODE XREF: main+2D5↑p
.text:0000000000003320
.text:0000000000003320 var_90          = dword ptr -90h
.text:0000000000003320 var_10          = qword ptr -10h
.text:0000000000003320
.text:0000000000003320 ; __unwind {
.text:0000000000003320                 push    rbx
.text:0000000000003321                 mov     rsi, rdi        ; filename
.text:0000000000003324                 mov     edi, 1          ; ver
.text:0000000000003329                 sub     rsp, 0A0h
.text:0000000000003330                 mov     rdx, rsp        ; stat_buf
.text:0000000000003333                 mov     rax, fs:28h
.text:000000000000333C                 mov     [rsp+0A8h+var_10], rax
.text:0000000000003344                 xor     eax, eax
.text:0000000000003346                 call    ___xstat
.text:000000000000334B                 test    eax, eax
.text:000000000000334D                 jnz     short loc_33A0
.text:000000000000334F                 mov     ebx, [rsp+0A8h+var_90]
.text:0000000000003353                 mov     edi, 20h ; ' '
.text:0000000000003358                 call    xmalloc
.text:000000000000335D                 mov     edx, 13Dh
.text:0000000000003362                 mov     dword ptr [rax+4], 0FFFh
.text:0000000000003369                 mov     dword ptr [rax+0Ch], 0FFFh
.text:0000000000003370                 mov     [rax], dx
.text:0000000000003373                 mov     [rax+8], ebx
.text:0000000000003376                 mov     byte ptr [rax+11h], 0
.text:000000000000337A
.text:000000000000337A loc_337A:                               ; CODE XREF: mode_create_from_ref+82↓j
.text:000000000000337A                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000003382                 xor     rcx, fs:28h
.text:000000000000338B                 jnz     short loc_33A4
.text:000000000000338D                 add     rsp, 0A0h
.text:0000000000003394                 pop     rbx
.text:0000000000003395                 retn
.text:0000000000003395 ; ---------------------------------------------------------------------------
.text:0000000000003396                 align 20h
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: mode_create_from_ref+2D↑j
.text:00000000000033A0                 xor     eax, eax
.text:00000000000033A2                 jmp     short loc_337A
.text:00000000000033A4 ; ---------------------------------------------------------------------------
.text:00000000000033A4
.text:00000000000033A4 loc_33A4:                               ; CODE XREF: mode_create_from_ref+6B↑j
.text:00000000000033A4                 call    ___stack_chk_fail
.text:00000000000033A4 ; } // starts at 3320
.text:00000000000033A4 mode_create_from_ref endp
.text:00000000000033A4
.text:00000000000033A4 ; ---------------------------------------------------------------------------
.text:00000000000033A9                 align 10h
.text:00000000000033B0
.text:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033B0
.text:00000000000033B0
.text:00000000000033B0                 public mode_adjust
.text:00000000000033B0 mode_adjust     proc near               ; CODE XREF: main+5C6↑p
.text:00000000000033B0                                         ; main+864↑p
.text:00000000000033B0 ; __unwind {
.text:00000000000033B0                 movzx   r10d, byte ptr [rcx+1]
.text:00000000000033B5                 mov     eax, edi
.text:00000000000033B7                 and     eax, 0FFFh
.text:00000000000033BC                 test    r10b, r10b
.text:00000000000033BF                 jz      loc_3510
.text:00000000000033C5                 cmp     sil, 1
.text:00000000000033C9                 push    r12
.text:00000000000033CB                 push    rbp
.text:00000000000033CC                 push    rbx
.text:00000000000033CD                 sbb     ebx, ebx
.text:00000000000033CF                 movzx   ebp, sil
.text:00000000000033D3                 not     ebx
.text:00000000000033D5                 xor     r11d, r11d
.text:00000000000033D8                 and     ebx, 0C00h
.text:00000000000033DE                 jmp     short loc_341A
.text:00000000000033E0 ; ---------------------------------------------------------------------------
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: mode_adjust+D4↓j
.text:00000000000033E0                 mov     edi, r9d
.text:00000000000033E3                 or      edi, edx
.text:00000000000033E5                 not     edi
.text:00000000000033E7                 and     esi, edi
.text:00000000000033E9                 cmp     r12b, 2Dh ; '-'
.text:00000000000033ED                 jz      loc_3500
.text:00000000000033F3                 cmp     r12b, 3Dh ; '='
.text:00000000000033F7                 jz      loc_34AB
.text:00000000000033FD
.text:00000000000033FD loc_33FD:                               ; CODE XREF: mode_adjust+EA↓j
.text:00000000000033FD                 cmp     r12b, 2Bh ; '+'
.text:0000000000003401                 jnz     short loc_3408
.text:0000000000003403                 or      r11d, esi
.text:0000000000003406                 or      eax, esi
.text:0000000000003408
.text:0000000000003408 loc_3408:                               ; CODE XREF: mode_adjust+51↑j
.text:0000000000003408                                         ; mode_adjust+157↓j
.text:0000000000003408                 add     rcx, 10h
.text:000000000000340C                 movzx   r10d, byte ptr [rcx+1]
.text:0000000000003411                 test    r10b, r10b
.text:0000000000003414                 jz      loc_34CC
.text:000000000000341A
.text:000000000000341A loc_341A:                               ; CODE XREF: mode_adjust+2E↑j
.text:000000000000341A                                         ; mode_adjust+116↓j
.text:000000000000341A                 mov     r9d, [rcx+0Ch]
.text:000000000000341E                 mov     edi, [rcx+4]
.text:0000000000003421                 mov     esi, [rcx+8]
.text:0000000000003424                 not     r9d
.text:0000000000003427                 and     r9d, ebx
.text:000000000000342A                 cmp     r10b, 2
.text:000000000000342E                 jz      loc_34E0
.text:0000000000003434                 cmp     r10b, 3
.text:0000000000003438                 jnz     short loc_3478
.text:000000000000343A                 and     esi, eax
.text:000000000000343C                 mov     r10d, esi
.text:000000000000343F                 and     r10d, 124h
.text:0000000000003446                 cmp     r10d, 1
.text:000000000000344A                 sbb     r10d, r10d
.text:000000000000344D                 not     r10d
.text:0000000000003450                 and     r10d, 124h
.text:0000000000003457                 mov     r12d, r10d
.text:000000000000345A                 or      r12b, 92h
.text:000000000000345E                 test    sil, 92h
.text:0000000000003462                 cmovnz  r10d, r12d
.text:0000000000003466                 mov     r12d, r10d
.text:0000000000003469                 or      r12d, 49h
.text:000000000000346D                 test    sil, 49h
.text:0000000000003471                 cmovnz  r10d, r12d
.text:0000000000003475                 or      esi, r10d
.text:0000000000003478
.text:0000000000003478 loc_3478:                               ; CODE XREF: mode_adjust+88↑j
.text:0000000000003478                                         ; mode_adjust+145↓j
.text:0000000000003478                 mov     r10d, r9d
.text:000000000000347B                 test    edi, edi
.text:000000000000347D                 movzx   r12d, byte ptr [rcx]
.text:0000000000003481                 not     r10d
.text:0000000000003484                 jz      loc_33E0
.text:000000000000348A                 and     r10d, edi
.text:000000000000348D                 and     esi, r10d
.text:0000000000003490                 cmp     r12b, 2Dh ; '-'
.text:0000000000003494                 jz      short loc_3500
.text:0000000000003496                 cmp     r12b, 3Dh ; '='
.text:000000000000349A                 jnz     loc_33FD
.text:00000000000034A0                 not     edi
.text:00000000000034A2                 or      r9d, edi
.text:00000000000034A5                 mov     r10d, r9d
.text:00000000000034A8                 not     r10d
.text:00000000000034AB
.text:00000000000034AB loc_34AB:                               ; CODE XREF: mode_adjust+47↑j
.text:00000000000034AB                 and     r10d, 0FFFh
.text:00000000000034B2                 add     rcx, 10h
.text:00000000000034B6                 and     eax, r9d
.text:00000000000034B9                 or      r11d, r10d
.text:00000000000034BC                 movzx   r10d, byte ptr [rcx+1]
.text:00000000000034C1                 or      eax, esi
.text:00000000000034C3                 test    r10b, r10b
.text:00000000000034C6                 jnz     loc_341A
.text:00000000000034CC
.text:00000000000034CC loc_34CC:                               ; CODE XREF: mode_adjust+64↑j
.text:00000000000034CC                 test    r8, r8
.text:00000000000034CF                 jz      short loc_34D4
.text:00000000000034D1                 mov     [r8], r11d
.text:00000000000034D4
.text:00000000000034D4 loc_34D4:                               ; CODE XREF: mode_adjust+11F↑j
.text:00000000000034D4                 pop     rbx
.text:00000000000034D5                 pop     rbp
.text:00000000000034D6                 pop     r12
.text:00000000000034D8                 retn
.text:00000000000034D8 ; ---------------------------------------------------------------------------
.text:00000000000034D9                 align 20h
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: mode_adjust+7E↑j
.text:00000000000034E0                 mov     r12d, eax
.text:00000000000034E3                 mov     r10d, esi
.text:00000000000034E6                 and     r12d, 49h
.text:00000000000034EA                 or      r10d, 49h
.text:00000000000034EE                 or      r12d, ebp
.text:00000000000034F1                 cmovnz  esi, r10d
.text:00000000000034F5                 jmp     short loc_3478
.text:00000000000034F5 ; ---------------------------------------------------------------------------
.text:00000000000034F7                 align 20h
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: mode_adjust+3D↑j
.text:0000000000003500                                         ; mode_adjust+E4↑j
.text:0000000000003500                 or      r11d, esi
.text:0000000000003503                 not     esi
.text:0000000000003505                 and     eax, esi
.text:0000000000003507                 jmp     loc_3408
.text:0000000000003507 ; ---------------------------------------------------------------------------
.text:000000000000350C                 align 10h
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: mode_adjust+F↑j
.text:0000000000003510                 xor     r11d, r11d
.text:0000000000003513                 test    r8, r8
.text:0000000000003516                 jz      short locret_351B
.text:0000000000003518                 mov     [r8], r11d
.text:000000000000351B
.text:000000000000351B locret_351B:                            ; CODE XREF: mode_adjust+166↑j
.text:000000000000351B                 rep retn
.text:000000000000351B ; } // starts at 33B0
.text:000000000000351B mode_adjust     endp
.text:000000000000351B
.text:000000000000351B ; ---------------------------------------------------------------------------
.text:000000000000351D                 align 20h
.text:0000000000003520
.text:0000000000003520 ; =============== S U B R O U T I N E =======================================
.text:0000000000003520
.text:0000000000003520
.text:0000000000003520                 public set_program_name
.text:0000000000003520 set_program_name proc near              ; CODE XREF: main+42↑p
.text:0000000000003520 ; __unwind {
.text:0000000000003520                 test    rdi, rdi
.text:0000000000003523                 push    rbx
.text:0000000000003524                 jz      short loc_359D
.text:0000000000003526                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000352B                 mov     rbx, rdi
.text:000000000000352E                 call    _strrchr
.text:0000000000003533                 test    rax, rax
.text:0000000000003536                 jz      short loc_358D
.text:0000000000003538                 lea     r8, [rax+1]
.text:000000000000353C                 mov     rdx, r8
.text:000000000000353F                 sub     rdx, rbx
.text:0000000000003542                 cmp     rdx, 6
.text:0000000000003546                 jle     short loc_358D
.text:0000000000003548                 lea     rsi, [rax-6]
.text:000000000000354C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003553                 mov     ecx, 7
.text:0000000000003558                 repe cmpsb
.text:000000000000355A                 setnbe  dl
.text:000000000000355D                 sbb     dl, 0
.text:0000000000003560                 test    dl, dl
.text:0000000000003562                 jnz     short loc_358D
.text:0000000000003564                 lea     rdi, aLt        ; "lt-"
.text:000000000000356B                 mov     ecx, 3
.text:0000000000003570                 mov     rsi, r8
.text:0000000000003573                 mov     rbx, r8
.text:0000000000003576                 repe cmpsb
.text:0000000000003578                 setnbe  dl
.text:000000000000357B                 sbb     dl, 0
.text:000000000000357E                 test    dl, dl
.text:0000000000003580                 jnz     short loc_358D
.text:0000000000003582                 lea     rbx, [rax+4]
.text:0000000000003586                 mov     cs:__bss_start, rbx
.text:000000000000358D
.text:000000000000358D loc_358D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000358D                                         ; set_program_name+26↑j ...
.text:000000000000358D                 mov     cs:program_name, rbx
.text:0000000000003594                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000359B                 pop     rbx
.text:000000000000359C                 retn
.text:000000000000359D ; ---------------------------------------------------------------------------
.text:000000000000359D
.text:000000000000359D loc_359D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000359D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000035A4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000035AB                 mov     edx, 37h ; '7'  ; n
.text:00000000000035B0                 mov     esi, 1          ; size
.text:00000000000035B5                 call    _fwrite
.text:00000000000035BA                 call    _abort
.text:00000000000035BA ; } // starts at 3520
.text:00000000000035BA set_program_name endp
.text:00000000000035BA
.text:00000000000035BA ; ---------------------------------------------------------------------------
.text:00000000000035BF                 align 20h
.text:00000000000035C0
.text:00000000000035C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035C0
.text:00000000000035C0 ; Attributes: info_from_lumina
.text:00000000000035C0
.text:00000000000035C0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000035C0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000035C0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000035C0 ; __unwind {
.text:00000000000035C0                 push    rbp
.text:00000000000035C1                 push    rbx
.text:00000000000035C2                 mov     rbp, rdi
.text:00000000000035C5                 mov     ebx, esi
.text:00000000000035C7                 sub     rsp, 8
.text:00000000000035CB                 call    locale_charset
.text:00000000000035D0                 movzx   edx, byte ptr [rax]
.text:00000000000035D3                 and     edx, 0FFFFFFDFh
.text:00000000000035D6                 cmp     dl, 55h ; 'U'
.text:00000000000035D9                 jz      short loc_3650
.text:00000000000035DB                 cmp     dl, 47h ; 'G'
.text:00000000000035DE                 jz      short loc_3600
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000035E0                                         ; gettext_quote+50↓j ...
.text:00000000000035E0                 lea     rax, unk_A69B
.text:00000000000035E7                 lea     rdx, asc_A69D   ; "'"
.text:00000000000035EE                 cmp     ebx, 9
.text:00000000000035F1                 cmovnz  rax, rdx
.text:00000000000035F5                 add     rsp, 8
.text:00000000000035F9                 pop     rbx
.text:00000000000035FA                 pop     rbp
.text:00000000000035FB                 retn
.text:00000000000035FB ; ---------------------------------------------------------------------------
.text:00000000000035FC                 align 20h
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003600                 movzx   edx, byte ptr [rax+1]
.text:0000000000003604                 and     edx, 0FFFFFFDFh
.text:0000000000003607                 cmp     dl, 42h ; 'B'
.text:000000000000360A                 jnz     short loc_35E0
.text:000000000000360C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003610                 jnz     short loc_35E0
.text:0000000000003612                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003616                 jnz     short loc_35E0
.text:0000000000003618                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000361C                 jnz     short loc_35E0
.text:000000000000361E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003622                 jnz     short loc_35E0
.text:0000000000003624                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003628                 jnz     short loc_35E0
.text:000000000000362A                 cmp     byte ptr [rax+7], 0
.text:000000000000362E                 jnz     short loc_35E0
.text:0000000000003630                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003634                 lea     rax, unk_A694
.text:000000000000363B                 lea     rdx, unk_A698
.text:0000000000003642                 cmovnz  rax, rdx
.text:0000000000003646                 add     rsp, 8
.text:000000000000364A                 pop     rbx
.text:000000000000364B                 pop     rbp
.text:000000000000364C                 retn
.text:000000000000364C ; ---------------------------------------------------------------------------
.text:000000000000364D                 align 10h
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003650                 movzx   edx, byte ptr [rax+1]
.text:0000000000003654                 and     edx, 0FFFFFFDFh
.text:0000000000003657                 cmp     dl, 54h ; 'T'
.text:000000000000365A                 jnz     short loc_35E0
.text:000000000000365C                 movzx   edx, byte ptr [rax+2]
.text:0000000000003660                 and     edx, 0FFFFFFDFh
.text:0000000000003663                 cmp     dl, 46h ; 'F'
.text:0000000000003666                 jnz     loc_35E0
.text:000000000000366C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000003670                 jnz     loc_35E0
.text:0000000000003676                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000367A                 jnz     loc_35E0
.text:0000000000003680                 cmp     byte ptr [rax+5], 0
.text:0000000000003684                 jnz     loc_35E0
.text:000000000000368A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000368E                 lea     rax, unk_A68C
.text:0000000000003695                 lea     rdx, unk_A690
.text:000000000000369C                 cmovnz  rax, rdx
.text:00000000000036A0                 add     rsp, 8
.text:00000000000036A4                 pop     rbx
.text:00000000000036A5                 pop     rbp
.text:00000000000036A6                 retn
.text:00000000000036A6 ; } // starts at 35C0
.text:00000000000036A6 gettext_quote   endp
.text:00000000000036A6
.text:00000000000036A6 ; ---------------------------------------------------------------------------
.text:00000000000036A7                 align 10h
.text:00000000000036B0
.text:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036B0
.text:00000000000036B0 ; Attributes: info_from_lumina
.text:00000000000036B0
.text:00000000000036B0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000036B0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000036B0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000036B0
.text:00000000000036B0 var_E0          = dword ptr -0E0h
.text:00000000000036B0 var_DB          = byte ptr -0DBh
.text:00000000000036B0 var_DA          = byte ptr -0DAh
.text:00000000000036B0 var_D9          = byte ptr -0D9h
.text:00000000000036B0 s               = qword ptr -0D8h
.text:00000000000036B0 n               = qword ptr -0D0h
.text:00000000000036B0 var_C8          = qword ptr -0C8h
.text:00000000000036B0 ps              = qword ptr -0C0h
.text:00000000000036B0 var_B8          = qword ptr -0B8h
.text:00000000000036B0 var_B0          = qword ptr -0B0h
.text:00000000000036B0 var_A8          = qword ptr -0A8h
.text:00000000000036B0 s2              = qword ptr -0A0h
.text:00000000000036B0 var_98          = qword ptr -98h
.text:00000000000036B0 var_90          = qword ptr -90h
.text:00000000000036B0 var_88          = qword ptr -88h
.text:00000000000036B0 var_80          = qword ptr -80h
.text:00000000000036B0 var_78          = qword ptr -78h
.text:00000000000036B0 var_70          = dword ptr -70h
.text:00000000000036B0 var_6C          = byte ptr -6Ch
.text:00000000000036B0 var_6B          = byte ptr -6Bh
.text:00000000000036B0 var_6A          = byte ptr -6Ah
.text:00000000000036B0 var_69          = byte ptr -69h
.text:00000000000036B0 var_68          = qword ptr -68h
.text:00000000000036B0 var_60          = qword ptr -60h
.text:00000000000036B0 wc              = dword ptr -4Ch
.text:00000000000036B0 var_48          = qword ptr -48h
.text:00000000000036B0 var_40          = qword ptr -40h
.text:00000000000036B0 arg_0           = qword ptr  8
.text:00000000000036B0 arg_8           = qword ptr  10h
.text:00000000000036B0 arg_10          = qword ptr  18h
.text:00000000000036B0
.text:00000000000036B0 ; __unwind {
.text:00000000000036B0                 push    r15
.text:00000000000036B2                 push    r14
.text:00000000000036B4                 mov     r15d, r8d
.text:00000000000036B7                 push    r13
.text:00000000000036B9                 push    r12
.text:00000000000036BB                 mov     r14, rdi
.text:00000000000036BE                 push    rbp
.text:00000000000036BF                 push    rbx
.text:00000000000036C0                 mov     ebx, r9d
.text:00000000000036C3                 mov     r13, rsi
.text:00000000000036C6                 mov     rbp, rcx
.text:00000000000036C9                 and     ebx, 2
.text:00000000000036CC                 sub     rsp, 0B8h
.text:00000000000036D3                 mov     rax, [rsp+0E8h+arg_0]
.text:00000000000036DB                 mov     [rsp+0E8h+s], rdx
.text:00000000000036E0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000036E5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000036EA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000036EF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000036F7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000036FC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003704                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003709                 mov     rax, fs:28h
.text:0000000000003712                 mov     [rsp+0E8h+var_40], rax
.text:000000000000371A                 xor     eax, eax
.text:000000000000371C                 call    ___ctype_get_mb_cur_max
.text:0000000000003721                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003725                 mov     [rsp+0E8h+var_90], rax
.text:000000000000372A                 ja      def_3741        ; jumptable 00000000000121F1 default case
.text:0000000000003730                 lea     rcx, jpt_3741
.text:0000000000003737                 mov     edx, r15d
.text:000000000000373A                 movsxd  rax, ds:(jpt_3741 - 0A700h)[rcx+rdx*4]
.text:000000000000373E                 add     rax, rcx
.text:0000000000003741                 jmp     rax             ; switch jump
.text:0000000000003743 ; ---------------------------------------------------------------------------
.text:0000000000003743
.text:0000000000003743 loc_3743:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003743                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003743                                         ; DATA XREF: ...
.text:0000000000003743                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003748                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000374D                 xor     r12d, r12d
.text:0000000000003750                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003759                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000375E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003763
.text:0000000000003763 loc_3763:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000003763                 lea     rax, asc_A69D   ; "'"
.text:000000000000376A                 mov     [rsp+0E8h+n], 1
.text:0000000000003773                 xor     r15d, r15d
.text:0000000000003776                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000377E                 mov     [rsp+0E8h+s2], rax
.text:0000000000003783
.text:0000000000003783 loc_3783:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000003783                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000003783                 xor     r11d, r11d
.text:0000000000003786                 mov     rax, rbp
.text:0000000000003789                 mov     r8d, r12d
.text:000000000000378C                 mov     rbp, r11
.text:000000000000378F                 mov     r11, rax
.text:0000000000003792                 nop     word ptr [rax+rax+00h]
.text:0000000000003798
.text:0000000000003798 loc_3798:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000003798                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000003798                 cmp     r11, rbp
.text:000000000000379B                 setnz   r12b
.text:000000000000379F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000037A3                 jnz     short loc_37B2
.text:00000000000037A5                 mov     rax, [rsp+0E8h+s]
.text:00000000000037AA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000037AE                 setnz   r12b
.text:00000000000037B2
.text:00000000000037B2 loc_37B2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000037B2                 test    r12b, r12b
.text:00000000000037B5                 jz      loc_3E10
.text:00000000000037BB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000037C0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000037C5                 lea     r9, [rdi+rbp]
.text:00000000000037C9                 setnz   al
.text:00000000000037CC                 and     al, [rsp+0E8h+var_DB]
.text:00000000000037D0                 mov     r10d, eax
.text:00000000000037D3                 jz      loc_3880
.text:00000000000037D9                 mov     rax, [rsp+0E8h+n]
.text:00000000000037DE                 test    rax, rax
.text:00000000000037E1                 jz      loc_3C10
.text:00000000000037E7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000037EB                 lea     rbx, [rbp+rax+0]
.text:00000000000037F0                 jnz     short loc_3820
.text:00000000000037F2                 cmp     rax, 1
.text:00000000000037F6                 jbe     short loc_3820
.text:00000000000037F8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000037FD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003802                 mov     [rsp+0E8h+ps], r9
.text:0000000000003807                 call    _strlen
.text:000000000000380C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003812                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003818                 mov     r11, rax
.text:000000000000381B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003820                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003820                 cmp     rbx, r11
.text:0000000000003823                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003828                 ja      loc_3DE0
.text:000000000000382E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003833                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003838                 mov     rdi, r9         ; s1
.text:000000000000383B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003840                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003845                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000384A                 call    _memcmp
.text:000000000000384F                 test    eax, eax
.text:0000000000003851                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003856                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000385C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003861                 jnz     loc_3DE0
.text:0000000000003867                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000386C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003872                 jnz     loc_47F5
.text:0000000000003878                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000003880                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000003880                 movzx   ebx, byte ptr [r9]
.text:0000000000003884                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003887                 ja      def_389E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000388D                 lea     rcx, jpt_389E
.text:0000000000003894                 movzx   edx, bl
.text:0000000000003897                 movsxd  rax, ds:(jpt_389E - 0A72Ch)[rcx+rdx*4]
.text:000000000000389B                 add     rax, rcx
.text:000000000000389E                 jmp     rax             ; switch jump
.text:00000000000038A0 ; ---------------------------------------------------------------------------
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000038A0                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:00000000000038A0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000038A3
.text:00000000000038A3 loc_38A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000038A3                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:00000000000038A3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000038A7                 setnz   al
.text:00000000000038AA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000038AE                 jnz     short loc_38BC
.text:00000000000038B0                 mov     rax, [rsp+0E8h+s]
.text:00000000000038B5                 cmp     byte ptr [rax+1], 0
.text:00000000000038B9                 setnz   al
.text:00000000000038BC
.text:00000000000038BC loc_38BC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000038BC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038C1                 setz    dl
.text:00000000000038C4                 test    al, al
.text:00000000000038C6                 jz      loc_3B18
.text:00000000000038CC
.text:00000000000038CC loc_38CC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000038CC                 xor     r12d, r12d
.text:00000000000038CF                 xor     eax, eax
.text:00000000000038D1                 nop     dword ptr [rax+00000000h]
.text:00000000000038D8
.text:00000000000038D8 loc_38D8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000038D8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000038D8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000038DD                 jnz     loc_39F2
.text:00000000000038E3                 test    dl, dl
.text:00000000000038E5                 jnz     loc_39F2
.text:00000000000038EB
.text:00000000000038EB loc_38EB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000038EB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000038F0                 test    rsi, rsi
.text:00000000000038F3                 jz      short loc_3909
.text:00000000000038F5                 mov     edx, ebx
.text:00000000000038F7                 shr     dl, 5
.text:00000000000038FA                 movzx   edx, dl
.text:00000000000038FD                 mov     edx, [rsi+rdx*4]
.text:0000000000003900                 bt      edx, ebx
.text:0000000000003903                 jb      loc_3A53
.text:0000000000003909
.text:0000000000003909 loc_3909:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003909                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003909                 test    r10b, r10b
.text:000000000000390C                 jnz     loc_3A53
.text:0000000000003912                 xor     eax, 1
.text:0000000000003915                 add     rbp, 1
.text:0000000000003919                 and     eax, r8d
.text:000000000000391C
.text:000000000000391C loc_391C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000391C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000391C                 test    al, al
.text:000000000000391E                 jz      short loc_3940
.text:0000000000003920                 cmp     r13, r15
.text:0000000000003923                 jbe     short loc_392A
.text:0000000000003925                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000392A
.text:000000000000392A loc_392A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000392A                 lea     rax, [r15+1]
.text:000000000000392E                 cmp     r13, rax
.text:0000000000003931                 jbe     short loc_3939
.text:0000000000003933                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003939
.text:0000000000003939 loc_3939:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003939                 add     r15, 2
.text:000000000000393D                 xor     r8d, r8d
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003940                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003940                 cmp     r15, r13
.text:0000000000003943                 jnb     short loc_3949
.text:0000000000003945                 mov     [r14+r15], bl
.text:0000000000003949
.text:0000000000003949 loc_3949:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003949                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000394E                 add     r15, 1
.text:0000000000003952                 mov     eax, 0
.text:0000000000003957                 test    r12b, r12b
.text:000000000000395A                 cmovz   edi, eax
.text:000000000000395D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003962                 jmp     loc_3798
.text:0000000000003962 ; ---------------------------------------------------------------------------
.text:0000000000003967                 align 10h
.text:0000000000003970
.text:0000000000003970 loc_3970:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003970                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003970                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000003973
.text:0000000000003973 loc_3973:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003973                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003973                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000003977                 cmp     eax, 2
.text:000000000000397A                 jz      loc_3F38
.text:0000000000003980                 cmp     eax, 5
.text:0000000000003983                 jz      loc_3EF8
.text:0000000000003989                 cmp     eax, 2
.text:000000000000398C                 mov     ebx, 3Fh ; '?'
.text:0000000000003991                 setz    dl
.text:0000000000003994                 xor     r12d, r12d
.text:0000000000003997                 xor     eax, eax
.text:0000000000003999                 jmp     loc_38D8
.text:0000000000003999 ; ---------------------------------------------------------------------------
.text:000000000000399E                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000039A0                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:00000000000039A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000039A3
.text:00000000000039A3 loc_39A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039A3                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:00000000000039A3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000039A8                 jz      loc_3EB0
.text:00000000000039AE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000039B3                 xor     edx, edx
.text:00000000000039B5                 xor     eax, eax
.text:00000000000039B7                 mov     ebx, 27h ; '''
.text:00000000000039BC                 jmp     loc_38D8
.text:00000000000039BC ; ---------------------------------------------------------------------------
.text:00000000000039C1                 align 8
.text:00000000000039C8
.text:00000000000039C8 loc_39C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039C8                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:00000000000039C8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000039CD                 mov     ebx, 74h ; 't'
.text:00000000000039D2
.text:00000000000039D2 loc_39D2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000039D2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000039D2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000039D7                 setz    al
.text:00000000000039DA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000039DE                 jnz     loc_3B2E
.text:00000000000039E4
.text:00000000000039E4 loc_39E4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000039E4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000039E4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000039E9                 jnz     short loc_3A50
.text:00000000000039EB
.text:00000000000039EB loc_39EB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000039EB                 mov     ebx, edx
.text:00000000000039ED                 xor     r12d, r12d
.text:00000000000039F0                 xor     eax, eax
.text:00000000000039F2
.text:00000000000039F2 loc_39F2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000039F2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000039F2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000039F7                 jnz     loc_38EB
.text:00000000000039FD                 jmp     loc_3909
.text:00000000000039FD ; ---------------------------------------------------------------------------
.text:0000000000003A02                 align 8
.text:0000000000003A08
.text:0000000000003A08 loc_3A08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A08                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003A08                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000003A0D                 mov     ebx, 62h ; 'b'
.text:0000000000003A12                 jmp     short loc_39E4
.text:0000000000003A12 ; ---------------------------------------------------------------------------
.text:0000000000003A14                 align 8
.text:0000000000003A18
.text:0000000000003A18 loc_3A18:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003A18                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003A18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000003A1D                 jz      loc_3DF0
.text:0000000000003A23                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003A28                 jz      loc_3C40
.text:0000000000003A2E
.text:0000000000003A2E loc_3A2E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000003A2E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A33                 jz      loc_3C40
.text:0000000000003A39                 cmp     [rsp+0E8h+n], 0
.text:0000000000003A3F                 jnz     loc_3DFB
.text:0000000000003A45                 mov     ebx, 5Ch ; '\'
.text:0000000000003A4A                 nop     word ptr [rax+rax+00h]
.text:0000000000003A50
.text:0000000000003A50 loc_3A50:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003A50                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003A50                 xor     r12d, r12d
.text:0000000000003A53
.text:0000000000003A53 loc_3A53:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003A53                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003A53                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A58                 setz    dl
.text:0000000000003A5B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A60                 mov     eax, edx
.text:0000000000003A62                 jnz     loc_42B8
.text:0000000000003A68                 mov     eax, r8d
.text:0000000000003A6B                 xor     eax, 1
.text:0000000000003A6E                 and     al, dl
.text:0000000000003A70                 jz      short loc_3AA1
.text:0000000000003A72                 cmp     r13, r15
.text:0000000000003A75                 jbe     short loc_3A7C
.text:0000000000003A77                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003A7C
.text:0000000000003A7C loc_3A7C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000003A7C                 lea     rdx, [r15+1]
.text:0000000000003A80                 cmp     r13, rdx
.text:0000000000003A83                 jbe     short loc_3A8B
.text:0000000000003A85                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003A8B
.text:0000000000003A8B loc_3A8B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000003A8B                 lea     rdx, [r15+2]
.text:0000000000003A8F                 cmp     r13, rdx
.text:0000000000003A92                 jbe     short loc_3A9A
.text:0000000000003A94                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003A9A
.text:0000000000003A9A loc_3A9A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000003A9A                 add     r15, 3
.text:0000000000003A9E                 mov     r8d, eax
.text:0000000000003AA1
.text:0000000000003AA1 loc_3AA1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003AA1                 cmp     r13, r15
.text:0000000000003AA4                 jbe     short loc_3AAB
.text:0000000000003AA6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003AAB
.text:0000000000003AAB loc_3AAB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000003AAB                 add     r15, 1
.text:0000000000003AAF                 add     rbp, 1
.text:0000000000003AB3                 jmp     loc_3940
.text:0000000000003AB3 ; ---------------------------------------------------------------------------
.text:0000000000003AB8                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 loc_3AC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003AC0                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003AC0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003AC5                 jnz     loc_3C93
.text:0000000000003ACB                 xor     edx, edx
.text:0000000000003ACD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003AD2                 jz      loc_39EB
.text:0000000000003AD8                 add     rbp, 1
.text:0000000000003ADC                 jmp     loc_3798
.text:0000000000003ADC ; ---------------------------------------------------------------------------
.text:0000000000003AE1                 align 8
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003AE8                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003AE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000003AED                 setz    dl
.text:0000000000003AF0                 xor     eax, eax
.text:0000000000003AF2                 jmp     loc_38D8
.text:0000000000003AF2 ; ---------------------------------------------------------------------------
.text:0000000000003AF7                 align 20h
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B00                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B00                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003B05                 mov     ebx, 61h ; 'a'
.text:0000000000003B0A                 jmp     loc_39E4
.text:0000000000003B0A ; ---------------------------------------------------------------------------
.text:0000000000003B0F                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B10                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B10                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003B15                 setz    dl
.text:0000000000003B18
.text:0000000000003B18 loc_3B18:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003B18                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003B18                 test    rbp, rbp
.text:0000000000003B1B                 jnz     loc_38CC
.text:0000000000003B21
.text:0000000000003B21 loc_3B21:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003B21                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003B21                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003B26                 and     al, dl
.text:0000000000003B28                 jz      loc_38D8
.text:0000000000003B2E
.text:0000000000003B2E loc_3B2E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000003B2E                 mov     rbp, r11
.text:0000000000003B31                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B39                 jmp     loc_4239
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B3E                 align 20h
.text:0000000000003B40
.text:0000000000003B40 loc_3B40:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B40                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B40                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003B45                 setz    dl
.text:0000000000003B48                 xor     r12d, r12d
.text:0000000000003B4B                 jmp     short loc_3B21
.text:0000000000003B4B ; ---------------------------------------------------------------------------
.text:0000000000003B4D                 align 10h
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B50                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B50                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003B55                 mov     ebx, 20h ; ' '
.text:0000000000003B5A                 setz    dl
.text:0000000000003B5D                 jmp     short loc_3B21
.text:0000000000003B5D ; ---------------------------------------------------------------------------
.text:0000000000003B5F                 align 20h
.text:0000000000003B60
.text:0000000000003B60 loc_3B60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B60                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B60                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003B65                 mov     ebx, 72h ; 'r'
.text:0000000000003B6A                 jmp     loc_39D2
.text:0000000000003B6A ; ---------------------------------------------------------------------------
.text:0000000000003B6F                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B70                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B70                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003B75                 mov     ebx, 66h ; 'f'
.text:0000000000003B7A                 jmp     loc_39E4
.text:0000000000003B7A ; ---------------------------------------------------------------------------
.text:0000000000003B7F                 align 20h
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B80                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B80                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003B85                 mov     ebx, 76h ; 'v'
.text:0000000000003B8A                 jmp     loc_39E4
.text:0000000000003B8A ; ---------------------------------------------------------------------------
.text:0000000000003B8F                 align 10h
.text:0000000000003B90
.text:0000000000003B90 loc_3B90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003B90                                         ; DATA XREF: .rodata:jpt_389E↓o
.text:0000000000003B90                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003B95                 mov     ebx, 6Eh ; 'n'
.text:0000000000003B9A                 jmp     loc_39D2
.text:0000000000003B9A ; ---------------------------------------------------------------------------
.text:0000000000003B9F                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 def_3C2A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003BA0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003BA0                                         ; DATA XREF: ...
.text:0000000000003BA0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003BA3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003BA8
.text:0000000000003BA8 def_389E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003BA8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003BA8                                         ; DATA XREF: ...
.text:0000000000003BA8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000003BAE                 jnz     loc_3F58
.text:0000000000003BB4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003BB9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000003BBE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003BC3                 call    ___ctype_b_loc
.text:0000000000003BC8                 mov     rcx, [rax]
.text:0000000000003BCB                 movzx   edx, bl
.text:0000000000003BCE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003BD4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003BDA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003BDF                 mov     edi, 1
.text:0000000000003BE4                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003BE8                 and     ax, 4000h
.text:0000000000003BEC                 setnz   r12b
.text:0000000000003BF0                 setz    al
.text:0000000000003BF3                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003BF7
.text:0000000000003BF7 loc_3BF7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003BF7                 test    al, al
.text:0000000000003BF9                 jnz     loc_4591
.text:0000000000003BFF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C04                 setz    dl
.text:0000000000003C07                 jmp     loc_38D8
.text:0000000000003C07 ; ---------------------------------------------------------------------------
.text:0000000000003C0C                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003C10                 movzx   ebx, byte ptr [r9]
.text:0000000000003C14                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003C17                 ja      short def_3C2A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003C19                 lea     rcx, jpt_3C2A
.text:0000000000003C20                 movzx   edx, bl
.text:0000000000003C23                 movsxd  rax, ds:(jpt_3C2A - 0A928h)[rcx+rdx*4]
.text:0000000000003C27                 add     rax, rcx
.text:0000000000003C2A                 jmp     rax             ; switch jump
.text:0000000000003C2A ; ---------------------------------------------------------------------------
.text:0000000000003C2C                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C30                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003C30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003C33                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003C38                 jnz     loc_3A2E
.text:0000000000003C3E                 xchg    ax, ax
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003C40                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003C40                 mov     edx, 5Ch ; '\'
.text:0000000000003C45                 mov     ebx, 5Ch ; '\'
.text:0000000000003C4A                 jmp     loc_39E4
.text:0000000000003C4A ; ---------------------------------------------------------------------------
.text:0000000000003C4F                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C50                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003C50                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003C55                 xor     r10d, r10d
.text:0000000000003C58                 mov     ebx, 66h ; 'f'
.text:0000000000003C5D                 jmp     loc_39E4
.text:0000000000003C5D ; ---------------------------------------------------------------------------
.text:0000000000003C62                 align 8
.text:0000000000003C68
.text:0000000000003C68 loc_3C68:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C68                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003C68                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003C6D                 xor     r10d, r10d
.text:0000000000003C70                 mov     ebx, 6Eh ; 'n'
.text:0000000000003C75                 jmp     loc_39D2
.text:0000000000003C75 ; ---------------------------------------------------------------------------
.text:0000000000003C7A                 align 20h
.text:0000000000003C80
.text:0000000000003C80 loc_3C80:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C80                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003C80                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003C85                 jmp     loc_3A50
.text:0000000000003C85 ; ---------------------------------------------------------------------------
.text:0000000000003C8A                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C90                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003C90                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003C93
.text:0000000000003C93 loc_3C93:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003C93                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C98                 setz    dl
.text:0000000000003C9B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003CA0                 jnz     loc_483A
.text:0000000000003CA6                 mov     eax, r8d
.text:0000000000003CA9                 mov     rcx, r15
.text:0000000000003CAC                 xor     eax, 1
.text:0000000000003CAF                 and     al, dl
.text:0000000000003CB1                 jz      short loc_3CE0
.text:0000000000003CB3                 cmp     r13, r15
.text:0000000000003CB6                 jbe     short loc_3CBD
.text:0000000000003CB8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003CBD
.text:0000000000003CBD loc_3CBD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003CBD                 lea     rcx, [r15+1]
.text:0000000000003CC1                 cmp     r13, rcx
.text:0000000000003CC4                 jbe     short loc_3CCC
.text:0000000000003CC6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003CCC
.text:0000000000003CCC loc_3CCC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003CCC                 lea     rcx, [r15+2]
.text:0000000000003CD0                 cmp     r13, rcx
.text:0000000000003CD3                 ja      loc_4309
.text:0000000000003CD9
.text:0000000000003CD9 loc_3CD9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003CD9                 lea     rcx, [r15+3]
.text:0000000000003CDD                 mov     r8d, eax
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003CE0                 cmp     r13, rcx
.text:0000000000003CE3                 jbe     short loc_3CEA
.text:0000000000003CE5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003CEA
.text:0000000000003CEA loc_3CEA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003CEA                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003CEF                 lea     r15, [rcx+1]
.text:0000000000003CF3                 jz      loc_42F9
.text:0000000000003CF9                 lea     rax, [rbp+1]
.text:0000000000003CFD                 cmp     rax, r11
.text:0000000000003D00                 jnb     short loc_3D1B
.text:0000000000003D02                 mov     rax, [rsp+0E8h+s]
.text:0000000000003D07                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003D0C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003D10                 sub     eax, 30h ; '0'
.text:0000000000003D13                 cmp     al, 9
.text:0000000000003D15                 jbe     loc_4549
.text:0000000000003D1B
.text:0000000000003D1B loc_3D1B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003D1B                 mov     eax, r12d
.text:0000000000003D1E                 mov     ebx, 30h ; '0'
.text:0000000000003D23                 xor     r12d, r12d
.text:0000000000003D26                 jmp     loc_38D8
.text:0000000000003D26 ; ---------------------------------------------------------------------------
.text:0000000000003D2B                 align 10h
.text:0000000000003D30
.text:0000000000003D30 loc_3D30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D30                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003D30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003D35                 mov     r12d, r10d
.text:0000000000003D38                 setz    dl
.text:0000000000003D3B                 xor     r10d, r10d
.text:0000000000003D3E                 xor     eax, eax
.text:0000000000003D40                 jmp     loc_38D8
.text:0000000000003D40 ; ---------------------------------------------------------------------------
.text:0000000000003D45                 align 8
.text:0000000000003D48
.text:0000000000003D48 loc_3D48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D48                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003D48                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003D4D                 setz    dl
.text:0000000000003D50                 xor     r10d, r10d
.text:0000000000003D53                 jmp     loc_3B18
.text:0000000000003D53 ; ---------------------------------------------------------------------------
.text:0000000000003D58                 align 20h
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D60                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003D60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003D65                 setz    dl
.text:0000000000003D68                 xor     r10d, r10d
.text:0000000000003D6B                 xor     r12d, r12d
.text:0000000000003D6E                 jmp     loc_3B21
.text:0000000000003D6E ; ---------------------------------------------------------------------------
.text:0000000000003D73                 align 8
.text:0000000000003D78
.text:0000000000003D78 loc_3D78:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D78                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003D78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003D7D                 mov     r12d, r10d
.text:0000000000003D80                 mov     ebx, 20h ; ' '
.text:0000000000003D85                 setz    dl
.text:0000000000003D88                 xor     r10d, r10d
.text:0000000000003D8B                 jmp     loc_3B21
.text:0000000000003D90 ; ---------------------------------------------------------------------------
.text:0000000000003D90
.text:0000000000003D90 loc_3D90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003D90                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003D90                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003D95                 xor     r10d, r10d
.text:0000000000003D98                 mov     ebx, 72h ; 'r'
.text:0000000000003D9D                 jmp     loc_39D2
.text:0000000000003D9D ; ---------------------------------------------------------------------------
.text:0000000000003DA2                 align 8
.text:0000000000003DA8
.text:0000000000003DA8 loc_3DA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DA8                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003DA8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003DAD                 jmp     loc_3A50
.text:0000000000003DAD ; ---------------------------------------------------------------------------
.text:0000000000003DB2                 align 8
.text:0000000000003DB8
.text:0000000000003DB8 loc_3DB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DB8                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003DB8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003DBD                 xor     r10d, r10d
.text:0000000000003DC0                 mov     ebx, 74h ; 't'
.text:0000000000003DC5                 jmp     loc_39D2
.text:0000000000003DC5 ; ---------------------------------------------------------------------------
.text:0000000000003DCA                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003DD0                                         ; DATA XREF: .rodata:jpt_3C2A↓o
.text:0000000000003DD0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003DD5                 jmp     loc_3A50
.text:0000000000003DD5 ; ---------------------------------------------------------------------------
.text:0000000000003DDA                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 loc_3DE0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003DE0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003DE0                 xor     r10d, r10d
.text:0000000000003DE3                 jmp     loc_3880
.text:0000000000003DE3 ; ---------------------------------------------------------------------------
.text:0000000000003DE8                 align 10h
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003DF0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003DF5                 jnz     loc_4760
.text:0000000000003DFB
.text:0000000000003DFB loc_3DFB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003DFB                 add     rbp, 1
.text:0000000000003DFF                 mov     eax, r8d
.text:0000000000003E02                 xor     r12d, r12d
.text:0000000000003E05                 mov     ebx, 5Ch ; '\'
.text:0000000000003E0A                 jmp     loc_391C
.text:0000000000003E0A ; ---------------------------------------------------------------------------
.text:0000000000003E0F                 align 10h
.text:0000000000003E10
.text:0000000000003E10 loc_3E10:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003E10                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E15                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003E1A                 mov     r12d, r8d
.text:0000000000003E1D                 mov     rbp, r11
.text:0000000000003E20                 setz    dl
.text:0000000000003E23                 mov     eax, ebx
.text:0000000000003E25                 test    r15, r15
.text:0000000000003E28                 setz    cl
.text:0000000000003E2B                 and     eax, edx
.text:0000000000003E2D                 and     al, cl
.text:0000000000003E2F                 jnz     loc_4896
.text:0000000000003E35                 mov     eax, ebx
.text:0000000000003E37                 xor     eax, 1
.text:0000000000003E3A                 and     dl, al
.text:0000000000003E3C                 jz      loc_47AC
.text:0000000000003E42                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003E47                 jz      loc_47AA
.text:0000000000003E4D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003E52                 jnz     loc_484D
.text:0000000000003E58                 test    r13, r13
.text:0000000000003E5B                 setz    al
.text:0000000000003E5E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003E64                 setnz   dl
.text:0000000000003E67                 and     al, dl
.text:0000000000003E69                 jz      loc_488C
.text:0000000000003E6F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E74
.text:0000000000003E74 loc_3E74:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003E74                 lea     rbx, asc_A69D   ; "'"
.text:0000000000003E7B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003E7F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E87                 mov     r15d, 1
.text:0000000000003E8D                 mov     [rsp+0E8h+n], 1
.text:0000000000003E96                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003E9B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003EA0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003EA4                 jmp     loc_3783
.text:0000000000003EA4 ; ---------------------------------------------------------------------------
.text:0000000000003EA9                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003EB0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003EB5                 jnz     loc_4760
.text:0000000000003EBB                 test    r13, r13
.text:0000000000003EBE                 jz      loc_42C0
.text:0000000000003EC4                 xor     edx, edx
.text:0000000000003EC6                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003ECC                 jnz     loc_42C0
.text:0000000000003ED2
.text:0000000000003ED2 loc_3ED2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003ED2                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003ED2                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003ED7                 add     r15, 3
.text:0000000000003EDB                 xor     eax, eax
.text:0000000000003EDD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003EE2                 xor     r8d, r8d
.text:0000000000003EE5                 mov     r13, rdx
.text:0000000000003EE8                 mov     ebx, 27h ; '''
.text:0000000000003EED                 jmp     loc_3909
.text:0000000000003EED ; ---------------------------------------------------------------------------
.text:0000000000003EF2                 align 8
.text:0000000000003EF8
.text:0000000000003EF8 loc_3EF8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003EF8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003EFD                 jz      short loc_3F20
.text:0000000000003EFF                 lea     rcx, [rbp+2]
.text:0000000000003F03                 cmp     rcx, r11
.text:0000000000003F06                 jnb     short loc_3F20
.text:0000000000003F08                 mov     rax, [rsp+0E8h+s]
.text:0000000000003F0D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003F12                 jz      loc_46A2
.text:0000000000003F18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003F20                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003F20                 xor     edx, edx
.text:0000000000003F22                 xor     r12d, r12d
.text:0000000000003F25                 xor     eax, eax
.text:0000000000003F27                 mov     ebx, 3Fh ; '?'
.text:0000000000003F2C                 jmp     loc_38D8
.text:0000000000003F2C ; ---------------------------------------------------------------------------
.text:0000000000003F31                 align 8
.text:0000000000003F38
.text:0000000000003F38 loc_3F38:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003F38                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003F3D                 jnz     loc_4760
.text:0000000000003F43                 xor     r12d, r12d
.text:0000000000003F46                 xor     eax, eax
.text:0000000000003F48                 mov     ebx, 3Fh ; '?'
.text:0000000000003F4D                 jmp     loc_3909
.text:0000000000003F4D ; ---------------------------------------------------------------------------
.text:0000000000003F52                 align 8
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003F58                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003F60                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F64                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003F70                 mov     [rsp+0E8h+ps], rax
.text:0000000000003F75                 jnz     short loc_3FA4
.text:0000000000003F77                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003F7C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003F81                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003F86                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003F8B                 call    _strlen
.text:0000000000003F90                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003F96                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003F9C                 mov     r11, rax
.text:0000000000003F9F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003FA4
.text:0000000000003FA4 loc_3FA4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003FA4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003FAC                 xor     ecx, ecx
.text:0000000000003FAE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003FB2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003FB7                 mov     rbx, rcx
.text:0000000000003FBA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003FC2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003FC7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003FCC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003FD4                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003FD9                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003FDE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003FE3
.text:0000000000003FE3 loc_3FE3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003FE3                 mov     rax, [rsp+0E8h+s]
.text:0000000000003FE8                 lea     r14, [rbp+rbx+0]
.text:0000000000003FED                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003FF2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003FF7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003FFC                 lea     r13, [rax+r14]
.text:0000000000004000                 sub     rdx, r14
.text:0000000000004003                 mov     rsi, r13
.text:0000000000004006                 call    rpl_mbrtowc
.text:000000000000400B                 test    rax, rax
.text:000000000000400E                 mov     r15, rax
.text:0000000000004011                 jz      short loc_4061
.text:0000000000004013                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004017                 jz      loc_4635
.text:000000000000401D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004021                 jz      loc_45C1
.text:0000000000004027                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000402C                 setz    al
.text:000000000000402F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004033                 jnz     loc_41D0
.text:0000000000004039
.text:0000000000004039 loc_4039:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004039                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004039                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004040                 call    _iswprint
.text:0000000000004045                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000404A                 test    eax, eax
.text:000000000000404C                 mov     eax, 0
.text:0000000000004051                 cmovz   r12d, eax
.text:0000000000004055                 add     rbx, r15
.text:0000000000004058                 call    _mbsinit
.text:000000000000405D                 test    eax, eax
.text:000000000000405F                 jz      short loc_3FE3
.text:0000000000004061
.text:0000000000004061 loc_4061:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004061                 mov     edx, r12d
.text:0000000000004064                 mov     rdi, rbx
.text:0000000000004067                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000406D                 xor     edx, 1
.text:0000000000004070                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004075                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000407B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000407F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004087                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000408C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004091                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004096
.text:0000000000004096 loc_4096:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004096                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004096                 cmp     rdi, 1
.text:000000000000409A                 jbe     loc_469B
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000040A0                 mov     rcx, rdi
.text:00000000000040A3                 xor     esi, esi
.text:00000000000040A5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000040AB                 add     rcx, rbp
.text:00000000000040AE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000040B3                 jmp     loc_416E
.text:00000000000040B3 ; ---------------------------------------------------------------------------
.text:00000000000040B8                 align 20h
.text:00000000000040C0
.text:00000000000040C0 loc_40C0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000040C0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000040C5                 setz    al
.text:00000000000040C8                 test    r9b, r9b
.text:00000000000040CB                 jnz     loc_4580
.text:00000000000040D1                 mov     esi, r8d
.text:00000000000040D4                 xor     esi, 1
.text:00000000000040D7                 and     al, sil
.text:00000000000040DA                 jz      short loc_410B
.text:00000000000040DC                 cmp     r13, r15
.text:00000000000040DF                 jbe     short loc_40E6
.text:00000000000040E1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000040E6
.text:00000000000040E6 loc_40E6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000040E6                 lea     rsi, [r15+1]
.text:00000000000040EA                 cmp     r13, rsi
.text:00000000000040ED                 jbe     short loc_40F5
.text:00000000000040EF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000040F5
.text:00000000000040F5 loc_40F5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000040F5                 lea     rsi, [r15+2]
.text:00000000000040F9                 cmp     r13, rsi
.text:00000000000040FC                 jbe     short loc_4104
.text:00000000000040FE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004104
.text:0000000000004104 loc_4104:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004104                 add     r15, 3
.text:0000000000004108                 mov     r8d, eax
.text:000000000000410B
.text:000000000000410B loc_410B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000410B                 cmp     r13, r15
.text:000000000000410E                 jbe     short loc_4115
.text:0000000000004110                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004115
.text:0000000000004115 loc_4115:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004115                 lea     rax, [r15+1]
.text:0000000000004119                 cmp     r13, rax
.text:000000000000411C                 jbe     short loc_412B
.text:000000000000411E                 mov     eax, ebx
.text:0000000000004120                 shr     al, 6
.text:0000000000004123                 add     eax, 30h ; '0'
.text:0000000000004126                 mov     [r14+r15+1], al
.text:000000000000412B
.text:000000000000412B loc_412B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000412B                 lea     rax, [r15+2]
.text:000000000000412F                 cmp     r13, rax
.text:0000000000004132                 jbe     short loc_4144
.text:0000000000004134                 mov     eax, ebx
.text:0000000000004136                 shr     al, 3
.text:0000000000004139                 and     eax, 7
.text:000000000000413C                 add     eax, 30h ; '0'
.text:000000000000413F                 mov     [r14+r15+2], al
.text:0000000000004144
.text:0000000000004144 loc_4144:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004144                 and     ebx, 7
.text:0000000000004147                 add     rbp, 1
.text:000000000000414B                 add     r15, 3
.text:000000000000414F                 add     ebx, 30h ; '0'
.text:0000000000004152                 cmp     rbp, rcx
.text:0000000000004155                 jnb     loc_3940
.text:000000000000415B                 mov     esi, edx
.text:000000000000415D
.text:000000000000415D loc_415D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000415D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000415D                 cmp     r13, r15
.text:0000000000004160                 jbe     short loc_4166
.text:0000000000004162                 mov     [r14+r15], bl
.text:0000000000004166
.text:0000000000004166 loc_4166:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004166                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000416A                 add     r15, 1
.text:000000000000416E
.text:000000000000416E loc_416E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000416E                 test    dl, dl
.text:0000000000004170                 jnz     loc_40C0
.text:0000000000004176                 mov     eax, esi
.text:0000000000004178                 xor     eax, 1
.text:000000000000417B                 and     eax, r8d
.text:000000000000417E                 test    r10b, r10b
.text:0000000000004181                 jz      short loc_4191
.text:0000000000004183                 cmp     r13, r15
.text:0000000000004186                 jbe     short loc_418D
.text:0000000000004188                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000418D
.text:000000000000418D loc_418D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000418D                 add     r15, 1
.text:0000000000004191
.text:0000000000004191 loc_4191:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004191                 add     rbp, 1
.text:0000000000004195                 cmp     rbp, rcx
.text:0000000000004198                 jnb     loc_391C
.text:000000000000419E                 test    al, al
.text:00000000000041A0                 jz      loc_459E
.text:00000000000041A6                 cmp     r13, r15
.text:00000000000041A9                 jbe     short loc_41B0
.text:00000000000041AB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000041B0                 lea     rax, [r15+1]
.text:00000000000041B4                 cmp     r13, rax
.text:00000000000041B7                 jbe     short loc_41BF
.text:00000000000041B9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000041BF
.text:00000000000041BF loc_41BF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000041BF                 add     r15, 2
.text:00000000000041C3                 xor     r10d, r10d
.text:00000000000041C6                 xor     r8d, r8d
.text:00000000000041C9                 jmp     short loc_415D
.text:00000000000041C9 ; ---------------------------------------------------------------------------
.text:00000000000041CB                 align 10h
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000041D0                 cmp     r15, 1
.text:00000000000041D4                 jz      loc_4039
.text:00000000000041DA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000041DF                 lea     rcx, [rdi+r15]
.text:00000000000041E3                 lea     rdx, [rdi+r14+1]
.text:00000000000041E8                 lea     r8, [rcx+r14]
.text:00000000000041EC                 jmp     short loc_41FD
.text:00000000000041EC ; ---------------------------------------------------------------------------
.text:00000000000041EE                 align 10h
.text:00000000000041F0
.text:00000000000041F0 loc_41F0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000041F0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000041F0                 add     rdx, 1
.text:00000000000041F4                 cmp     r8, rdx
.text:00000000000041F7                 jz      loc_4039
.text:00000000000041FD
.text:00000000000041FD loc_41FD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000041FD                 movzx   ecx, byte ptr [rdx]
.text:0000000000004200                 sub     ecx, 5Bh ; '['
.text:0000000000004203                 cmp     cl, 21h ; '!'
.text:0000000000004206                 ja      short loc_41F0
.text:0000000000004208                 mov     esi, 1
.text:000000000000420D                 shl     rsi, cl
.text:0000000000004210                 mov     rcx, rsi
.text:0000000000004213                 mov     rsi, 20000002Bh
.text:000000000000421D                 test    rcx, rsi
.text:0000000000004220                 jz      short loc_41F0
.text:0000000000004222                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004227                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000422C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004231                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004239
.text:0000000000004239 loc_4239:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004239                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004239                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000423E                 jz      short loc_4250
.text:0000000000004240                 test    al, al
.text:0000000000004242                 mov     eax, 4
.text:0000000000004247                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000424C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004250                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004250                 sub     rsp, 8
.text:0000000000004254                 mov     rcx, rbp
.text:0000000000004257                 mov     rsi, r13
.text:000000000000425A                 push    [rsp+0F0h+var_88]
.text:000000000000425E                 push    [rsp+0F8h+var_80]
.text:0000000000004262                 mov     rdi, r14
.text:0000000000004265                 push    0
.text:0000000000004267                 mov     r9d, [rsp+108h+var_70]
.text:000000000000426F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004274                 mov     rdx, [rsp+108h+s]
.text:0000000000004279                 and     r9d, 0FFFFFFFDh
.text:000000000000427D                 call    quotearg_buffer_restyled
.text:0000000000004282                 add     rsp, 20h
.text:0000000000004286                 mov     r15, rax
.text:0000000000004289
.text:0000000000004289 loc_4289:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004289                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004289                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004291                 xor     rbx, fs:28h
.text:000000000000429A                 mov     rax, r15
.text:000000000000429D                 jnz     loc_48A3
.text:00000000000042A3                 add     rsp, 0B8h
.text:00000000000042AA                 pop     rbx
.text:00000000000042AB                 pop     rbp
.text:00000000000042AC                 pop     r12
.text:00000000000042AE                 pop     r13
.text:00000000000042B0                 pop     r14
.text:00000000000042B2                 pop     r15
.text:00000000000042B4                 retn
.text:00000000000042B4 ; ---------------------------------------------------------------------------
.text:00000000000042B5                 align 8
.text:00000000000042B8
.text:00000000000042B8 loc_42B8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000042B8                 mov     rbp, r11
.text:00000000000042BB                 jmp     loc_4239
.text:00000000000042C0 ; ---------------------------------------------------------------------------
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000042C0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000042C0                 cmp     r13, r15
.text:00000000000042C3                 jbe     short loc_42CA
.text:00000000000042C5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000042CA
.text:00000000000042CA loc_42CA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000042CA                 lea     rax, [r15+1]
.text:00000000000042CE                 cmp     r13, rax
.text:00000000000042D1                 jbe     short loc_42D9
.text:00000000000042D3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000042D9
.text:00000000000042D9 loc_42D9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000042D9                 lea     rax, [r15+2]
.text:00000000000042DD                 cmp     r13, rax
.text:00000000000042E0                 jbe     loc_48D2
.text:00000000000042E6                 mov     rdx, r13
.text:00000000000042E9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000042EF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000042F4                 jmp     loc_3ED2
.text:00000000000042F9 ; ---------------------------------------------------------------------------
.text:00000000000042F9
.text:00000000000042F9 loc_42F9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000042F9                 mov     eax, r12d
.text:00000000000042FC                 mov     ebx, 30h ; '0'
.text:0000000000004301                 xor     r12d, r12d
.text:0000000000004304                 jmp     loc_3909
.text:0000000000004309 ; ---------------------------------------------------------------------------
.text:0000000000004309
.text:0000000000004309 loc_4309:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004309                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000430F                 jmp     loc_3CD9
.text:0000000000004314 ; ---------------------------------------------------------------------------
.text:0000000000004314
.text:0000000000004314 loc_4314:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004314                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:0000000000004314                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004316                 jnz     loc_3743        ; jumptable 00000000000121F1 case 1
.text:000000000000431C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004321
.text:0000000000004321 loc_4321:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004321                 test    r13, r13
.text:0000000000004324                 jnz     loc_48BA
.text:000000000000432A                 lea     rax, asc_A69D   ; "'"
.text:0000000000004331                 mov     [rsp+0E8h+var_98], 0
.text:000000000000433A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000433F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004344                 xor     r12d, r12d
.text:0000000000004347                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000434C                 mov     [rsp+0E8h+n], 1
.text:0000000000004355                 mov     [rsp+0E8h+s2], rax
.text:000000000000435A                 mov     r15d, 1
.text:0000000000004360                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004368                 jmp     loc_3783
.text:0000000000004368 ; ---------------------------------------------------------------------------
.text:000000000000436D                 align 10h
.text:0000000000004370
.text:0000000000004370 loc_4370:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004370                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:0000000000004370                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004372                 jnz     loc_476D
.text:0000000000004378                 test    r13, r13
.text:000000000000437B                 jz      loc_45A6
.text:0000000000004381                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004385                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000438A                 xor     r12d, r12d
.text:000000000000438D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004392                 mov     [rsp+0E8h+var_98], 0
.text:000000000000439B
.text:000000000000439B loc_439B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000439B                 lea     rax, unk_A69B
.text:00000000000043A2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000043A7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043AC                 mov     [rsp+0E8h+n], 1
.text:00000000000043B5                 mov     r15d, 1
.text:00000000000043BB                 mov     [rsp+0E8h+s2], rax
.text:00000000000043C0                 jmp     loc_3783
.text:00000000000043C5 ; ---------------------------------------------------------------------------
.text:00000000000043C5
.text:00000000000043C5 loc_43C5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000043C5                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:00000000000043C5                 lea     rax, unk_A69B   ; jumptable 00000000000121F1 case 6
.text:00000000000043CC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043D1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043D6                 xor     r12d, r12d
.text:00000000000043D9                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043E2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000043E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043EC                 mov     [rsp+0E8h+n], 1
.text:00000000000043F5                 xor     r15d, r15d
.text:00000000000043F8                 mov     [rsp+0E8h+s2], rax
.text:00000000000043FD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004405                 jmp     loc_3783
.text:000000000000440A ; ---------------------------------------------------------------------------
.text:000000000000440A
.text:000000000000440A loc_440A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000440A                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:000000000000440A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000440F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004414                 xor     r12d, r12d
.text:0000000000004417                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004420                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004425                 xor     r15d, r15d
.text:0000000000004428                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000442D                 mov     [rsp+0E8h+n], 0
.text:0000000000004436                 mov     [rsp+0E8h+s2], 0
.text:000000000000443F                 jmp     loc_3783
.text:0000000000004444 ; ---------------------------------------------------------------------------
.text:0000000000004444
.text:0000000000004444 loc_4444:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004444                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:0000000000004444                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004449                 jz      short loc_44A1
.text:000000000000444B                 lea     rsi, asc_A69F   ; "`"
.text:0000000000004452                 xor     edi, edi        ; domainname
.text:0000000000004454                 mov     edx, 5          ; category
.text:0000000000004459                 call    _dcgettext
.text:000000000000445E                 mov     rcx, rax
.text:0000000000004461                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004466                 lea     rax, asc_A69F   ; "`"
.text:000000000000446D                 cmp     rcx, rax
.text:0000000000004470                 jz      loc_480E
.text:0000000000004476
.text:0000000000004476 loc_4476:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004476                 lea     rsi, asc_A69D   ; "'"
.text:000000000000447D                 xor     edi, edi        ; domainname
.text:000000000000447F                 mov     edx, 5          ; category
.text:0000000000004484                 call    _dcgettext
.text:0000000000004489                 mov     rcx, rax
.text:000000000000448C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004491                 lea     rax, asc_A69D   ; "'"
.text:0000000000004498                 cmp     rcx, rax
.text:000000000000449B                 jz      loc_4824
.text:00000000000044A1
.text:00000000000044A1 loc_44A1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000044A1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000044A1                 xor     r15d, r15d
.text:00000000000044A4                 test    ebx, ebx
.text:00000000000044A6                 jz      loc_466D
.text:00000000000044AC
.text:00000000000044AC loc_44AC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000044AC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000044AC                 test    ebx, ebx
.text:00000000000044AE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000044B3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000044B8                 xor     r12d, r12d
.text:00000000000044BB                 mov     rdi, rbx        ; s
.text:00000000000044BE                 call    _strlen
.text:00000000000044C3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000044C8                 mov     [rsp+0E8h+n], rax
.text:00000000000044CD                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000044D2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000044D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000044E0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000044E5                 jmp     loc_3783
.text:00000000000044EA ; ---------------------------------------------------------------------------
.text:00000000000044EA
.text:00000000000044EA loc_44EA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000044EA                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:00000000000044EA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000044EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000044F4                 xor     r12d, r12d
.text:00000000000044F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004500                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004505                 xor     r15d, r15d
.text:0000000000004508                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000450D                 mov     [rsp+0E8h+n], 0
.text:0000000000004516                 mov     [rsp+0E8h+s2], 0
.text:000000000000451F                 jmp     loc_3783
.text:0000000000004524 ; ---------------------------------------------------------------------------
.text:0000000000004524
.text:0000000000004524 loc_4524:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004524                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:0000000000004524                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004529                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000452E                 xor     r12d, r12d
.text:0000000000004531                 mov     [rsp+0E8h+var_98], 0
.text:000000000000453A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000453F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004544                 jmp     loc_3763
.text:0000000000004549 ; ---------------------------------------------------------------------------
.text:0000000000004549
.text:0000000000004549 loc_4549:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004549                 cmp     r13, r15
.text:000000000000454C                 jbe     short loc_4553
.text:000000000000454E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004553
.text:0000000000004553 loc_4553:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004553                 lea     rax, [rcx+2]
.text:0000000000004557                 cmp     r13, rax
.text:000000000000455A                 jbe     short loc_4562
.text:000000000000455C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004562
.text:0000000000004562 loc_4562:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004562                 mov     eax, r12d
.text:0000000000004565                 lea     r15, [rcx+3]
.text:0000000000004569                 xor     r12d, r12d
.text:000000000000456C                 mov     ebx, 30h ; '0'
.text:0000000000004571                 jmp     loc_38D8
.text:0000000000004571 ; ---------------------------------------------------------------------------
.text:0000000000004576                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004580                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004585                 mov     rbp, r11
.text:0000000000004588                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000458C                 jmp     loc_4239
.text:0000000000004591 ; ---------------------------------------------------------------------------
.text:0000000000004591
.text:0000000000004591 loc_4591:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004591                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004596                 xor     r12d, r12d
.text:0000000000004599                 jmp     loc_40A0
.text:000000000000459E ; ---------------------------------------------------------------------------
.text:000000000000459E
.text:000000000000459E loc_459E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000459E                 xor     r10d, r10d
.text:00000000000045A1                 jmp     loc_415D
.text:00000000000045A6 ; ---------------------------------------------------------------------------
.text:00000000000045A6
.text:00000000000045A6 loc_45A6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000045A6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000045AF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045B4                 xor     r12d, r12d
.text:00000000000045B7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000045BC                 jmp     loc_439B
.text:00000000000045C1 ; ---------------------------------------------------------------------------
.text:00000000000045C1
.text:00000000000045C1 loc_45C1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000045C1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000045C6                 mov     rsi, r14
.text:00000000000045C9                 mov     rcx, r13
.text:00000000000045CC                 mov     rax, rbx
.text:00000000000045CF                 mov     rdi, rbx
.text:00000000000045D2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000045D8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000045DD                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000045E5                 cmp     rsi, r11
.text:00000000000045E8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000045EE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000045F6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000045FB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004600                 jnb     short loc_4628
.text:0000000000004602                 cmp     byte ptr [rcx], 0
.text:0000000000004605                 jnz     short loc_4617
.text:0000000000004607                 jmp     short loc_4628
.text:0000000000004607 ; ---------------------------------------------------------------------------
.text:0000000000004609                 align 10h
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004610                 cmp     byte ptr [r9+rax], 0
.text:0000000000004615                 jz      short loc_4625
.text:0000000000004617
.text:0000000000004617 loc_4617:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004617                 add     rax, 1
.text:000000000000461B                 lea     rdx, [rbp+rax+0]
.text:0000000000004620                 cmp     r11, rdx
.text:0000000000004623                 ja      short loc_4610
.text:0000000000004625
.text:0000000000004625 loc_4625:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004625                 mov     rdi, rax
.text:0000000000004628
.text:0000000000004628 loc_4628:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004628                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004628                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000462D                 xor     r12d, r12d
.text:0000000000004630                 jmp     loc_4096
.text:0000000000004635 ; ---------------------------------------------------------------------------
.text:0000000000004635
.text:0000000000004635 loc_4635:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004635                 mov     rdi, rbx
.text:0000000000004638                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000463E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004643                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004649                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004651                 xor     r12d, r12d
.text:0000000000004654                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004659                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000465E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004663                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004668                 jmp     loc_4096
.text:000000000000466D ; ---------------------------------------------------------------------------
.text:000000000000466D
.text:000000000000466D loc_466D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000466D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000004672                 movzx   eax, byte ptr [rdx]
.text:0000000000004675                 test    al, al
.text:0000000000004677                 jz      loc_44AC
.text:000000000000467D                 nop     dword ptr [rax]
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000004680                 cmp     r13, r15
.text:0000000000004683                 jbe     short loc_4689
.text:0000000000004685                 mov     [r14+r15], al
.text:0000000000004689
.text:0000000000004689 loc_4689:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000004689                 add     r15, 1
.text:000000000000468D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000004692                 test    al, al
.text:0000000000004694                 jnz     short loc_4680
.text:0000000000004696                 jmp     loc_44AC
.text:000000000000469B ; ---------------------------------------------------------------------------
.text:000000000000469B
.text:000000000000469B loc_469B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000469B                 mov     eax, edx
.text:000000000000469D                 jmp     loc_3BF7
.text:00000000000046A2 ; ---------------------------------------------------------------------------
.text:00000000000046A2
.text:00000000000046A2 loc_46A2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000046A2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000046A6                 cmp     bl, 3Eh ; '>'
.text:00000000000046A9                 ja      loc_3F20
.text:00000000000046AF                 mov     rax, 7000A38200000000h
.text:00000000000046B9                 bt      rax, rbx
.text:00000000000046BD                 jnb     loc_3F20
.text:00000000000046C3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000046C8                 jnz     loc_48B2
.text:00000000000046CE                 cmp     r13, r15
.text:00000000000046D1                 jbe     short loc_46D8
.text:00000000000046D3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:00000000000046D8
.text:00000000000046D8 loc_46D8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:00000000000046D8                 lea     rax, [r15+1]
.text:00000000000046DC                 cmp     r13, rax
.text:00000000000046DF                 jbe     short loc_46E7
.text:00000000000046E1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000046E7
.text:00000000000046E7 loc_46E7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000046E7                 lea     rax, [r15+2]
.text:00000000000046EB                 cmp     r13, rax
.text:00000000000046EE                 jbe     short loc_46F6
.text:00000000000046F0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000046F6
.text:00000000000046F6 loc_46F6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000046F6                 lea     rax, [r15+3]
.text:00000000000046FA                 cmp     r13, rax
.text:00000000000046FD                 jbe     short loc_4705
.text:00000000000046FF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004705
.text:0000000000004705 loc_4705:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004705                 add     r15, 4
.text:0000000000004709                 xor     edx, edx
.text:000000000000470B                 xor     r12d, r12d
.text:000000000000470E                 xor     eax, eax
.text:0000000000004710                 mov     rbp, rcx
.text:0000000000004713                 jmp     loc_38D8
.text:0000000000004718 ; ---------------------------------------------------------------------------
.text:0000000000004718
.text:0000000000004718 loc_4718:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004718                                         ; DATA XREF: .rodata:jpt_3741↓o
.text:0000000000004718                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000471A                 jz      loc_48A8
.text:0000000000004720                 lea     rax, asc_A69D   ; "'"
.text:0000000000004727                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000472C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004731                 xor     r12d, r12d
.text:0000000000004734                 mov     [rsp+0E8h+var_98], 0
.text:000000000000473D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004742                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004747                 mov     [rsp+0E8h+n], 1
.text:0000000000004750                 xor     r15d, r15d
.text:0000000000004753                 mov     [rsp+0E8h+s2], rax
.text:0000000000004758                 jmp     loc_3783
.text:0000000000004758 ; ---------------------------------------------------------------------------
.text:000000000000475D                 align 20h
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000004760                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000004760                 mov     rbp, r11
.text:0000000000004763                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004768                 jmp     loc_4239
.text:000000000000476D ; ---------------------------------------------------------------------------
.text:000000000000476D
.text:000000000000476D loc_476D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000476D                 lea     rax, unk_A69B
.text:0000000000004774                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004779                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000477E                 xor     r12d, r12d
.text:0000000000004781                 mov     [rsp+0E8h+var_98], 0
.text:000000000000478A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000478F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004794                 mov     [rsp+0E8h+n], 1
.text:000000000000479D                 xor     r15d, r15d
.text:00000000000047A0                 mov     [rsp+0E8h+s2], rax
.text:00000000000047A5                 jmp     loc_3783
.text:00000000000047AA ; ---------------------------------------------------------------------------
.text:00000000000047AA
.text:00000000000047AA loc_47AA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000047AA                 mov     eax, edx
.text:00000000000047AC
.text:00000000000047AC loc_47AC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000047AC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000047AC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000047B1                 test    rbx, rbx
.text:00000000000047B4                 jz      short loc_47E2
.text:00000000000047B6                 test    al, al
.text:00000000000047B8                 jz      short loc_47E2
.text:00000000000047BA                 movzx   ecx, byte ptr [rbx]
.text:00000000000047BD                 mov     rax, rbx
.text:00000000000047C0                 test    cl, cl
.text:00000000000047C2                 jz      short loc_47E2
.text:00000000000047C4                 mov     rdx, r15
.text:00000000000047C7                 sub     rax, r15
.text:00000000000047CA
.text:00000000000047CA loc_47CA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000047CA                 cmp     r13, rdx
.text:00000000000047CD                 jbe     short loc_47D3
.text:00000000000047CF                 mov     [r14+rdx], cl
.text:00000000000047D3
.text:00000000000047D3 loc_47D3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:00000000000047D3                 add     rdx, 1
.text:00000000000047D7                 movzx   ecx, byte ptr [rax+rdx]
.text:00000000000047DB                 test    cl, cl
.text:00000000000047DD                 jnz     short loc_47CA
.text:00000000000047DF                 mov     r15, rdx
.text:00000000000047E2
.text:00000000000047E2 loc_47E2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000047E2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000047E2                 cmp     r13, r15
.text:00000000000047E5                 jbe     loc_4289
.text:00000000000047EB                 mov     byte ptr [r14+r15], 0
.text:00000000000047F0                 jmp     loc_4289
.text:00000000000047F5 ; ---------------------------------------------------------------------------
.text:00000000000047F5
.text:00000000000047F5 loc_47F5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000047F5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000047FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000047FF                 mov     rbp, r11
.text:0000000000004802                 setz    al
.text:0000000000004805                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004809                 jmp     loc_4239
.text:000000000000480E ; ---------------------------------------------------------------------------
.text:000000000000480E
.text:000000000000480E loc_480E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000480E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004812                 mov     rdi, rcx
.text:0000000000004815                 call    gettext_quote
.text:000000000000481A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000481F                 jmp     loc_4476
.text:0000000000004824 ; ---------------------------------------------------------------------------
.text:0000000000004824
.text:0000000000004824 loc_4824:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004824                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004828                 mov     rdi, rcx
.text:000000000000482B                 call    gettext_quote
.text:0000000000004830                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004835                 jmp     loc_44A1
.text:000000000000483A ; ---------------------------------------------------------------------------
.text:000000000000483A
.text:000000000000483A loc_483A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000483A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000483F                 mov     rbp, r11
.text:0000000000004842                 mov     eax, edx
.text:0000000000004844                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004848                 jmp     loc_4239
.text:000000000000484D ; ---------------------------------------------------------------------------
.text:000000000000484D
.text:000000000000484D loc_484D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000484D                 sub     rsp, 8
.text:0000000000004851                 mov     r8d, 5
.text:0000000000004857                 mov     rcx, r11
.text:000000000000485A                 push    [rsp+0F0h+var_88]
.text:000000000000485E                 push    [rsp+0F8h+var_80]
.text:0000000000004862                 mov     rdi, r14
.text:0000000000004865                 push    [rsp+100h+var_C8]
.text:0000000000004869                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004871                 mov     rdx, [rsp+108h+s]
.text:0000000000004876                 mov     rsi, [rsp+108h+var_98]
.text:000000000000487B                 call    quotearg_buffer_restyled
.text:0000000000004880                 add     rsp, 20h
.text:0000000000004884                 mov     r15, rax
.text:0000000000004887                 jmp     loc_4289
.text:000000000000488C ; ---------------------------------------------------------------------------
.text:000000000000488C
.text:000000000000488C loc_488C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000488C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000004891                 jmp     loc_47AC
.text:0000000000004896 ; ---------------------------------------------------------------------------
.text:0000000000004896
.text:0000000000004896 loc_4896:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000004896                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000489E                 jmp     loc_4239
.text:00000000000048A3 ; ---------------------------------------------------------------------------
.text:00000000000048A3
.text:00000000000048A3 loc_48A3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000048A3                 call    ___stack_chk_fail
.text:00000000000048A8 ; ---------------------------------------------------------------------------
.text:00000000000048A8
.text:00000000000048A8 loc_48A8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000048A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000048AD                 jmp     loc_4321
.text:00000000000048B2 ; ---------------------------------------------------------------------------
.text:00000000000048B2
.text:00000000000048B2 loc_48B2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000048B2                 mov     rbp, r11
.text:00000000000048B5                 jmp     loc_4250
.text:00000000000048BA ; ---------------------------------------------------------------------------
.text:00000000000048BA
.text:00000000000048BA loc_48BA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000048BA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000048BF                 xor     eax, eax
.text:00000000000048C1                 xor     r12d, r12d
.text:00000000000048C4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000048CD                 jmp     loc_3E74
.text:00000000000048D2 ; ---------------------------------------------------------------------------
.text:00000000000048D2
.text:00000000000048D2 loc_48D2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000048D2                 mov     rdx, r13
.text:00000000000048D5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000048DA                 jmp     loc_3ED2
.text:00000000000048DF ; ---------------------------------------------------------------------------
.text:00000000000048DF
.text:00000000000048DF def_3741:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000048DF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000048DF ; } // starts at 36B0
.text:00000000000048DF quotearg_buffer_restyled endp
.text:00000000000048DF
.text:00000000000048DF ; ---------------------------------------------------------------------------
.text:00000000000048E4                 align 10h
.text:00000000000048F0
.text:00000000000048F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048F0
.text:00000000000048F0
.text:00000000000048F0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000048F0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000048F0
.text:00000000000048F0 var_50          = qword ptr -50h
.text:00000000000048F0 var_48          = qword ptr -48h
.text:00000000000048F0 var_40          = dword ptr -40h
.text:00000000000048F0 var_3C          = dword ptr -3Ch
.text:00000000000048F0
.text:00000000000048F0 ; __unwind {
.text:00000000000048F0                 push    r15
.text:00000000000048F2                 push    r14
.text:00000000000048F4                 movsxd  r15, edi
.text:00000000000048F7                 push    r13
.text:00000000000048F9                 push    r12
.text:00000000000048FB                 mov     r14, rdx
.text:00000000000048FE                 push    rbp
.text:00000000000048FF                 push    rbx
.text:0000000000004900                 mov     rbp, rcx
.text:0000000000004903                 sub     rsp, 28h
.text:0000000000004907                 mov     [rsp+58h+var_50], rsi
.text:000000000000490C                 call    ___errno_location
.text:0000000000004911                 mov     r13, rax
.text:0000000000004914                 mov     eax, [rax]
.text:0000000000004916                 test    r15d, r15d
.text:0000000000004919                 mov     rbx, cs:slotvec
.text:0000000000004920                 mov     [rsp+58h+var_40], eax
.text:0000000000004924                 js      loc_4A91
.text:000000000000492A                 cmp     cs:nslots, r15d
.text:0000000000004931                 jg      short loc_4995
.text:0000000000004933                 cmp     r15d, 7FFFFFFFh
.text:000000000000493A                 jz      loc_4A96
.text:0000000000004940                 lea     r12d, [r15+1]
.text:0000000000004944                 lea     rax, slotvec0
.text:000000000000494B                 movsxd  rsi, r12d
.text:000000000000494E                 shl     rsi, 4
.text:0000000000004952                 cmp     rbx, rax
.text:0000000000004955                 jz      loc_4A70
.text:000000000000495B                 mov     rdi, rbx
.text:000000000000495E                 call    xrealloc
.text:0000000000004963                 mov     rbx, rax
.text:0000000000004966                 mov     cs:slotvec, rax
.text:000000000000496D
.text:000000000000496D loc_496D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000496D                 movsxd  rdi, cs:nslots
.text:0000000000004974                 mov     edx, r12d
.text:0000000000004977                 xor     esi, esi        ; c
.text:0000000000004979                 sub     edx, edi
.text:000000000000497B                 shl     rdi, 4
.text:000000000000497F                 movsxd  rdx, edx
.text:0000000000004982                 add     rdi, rbx        ; s
.text:0000000000004985                 shl     rdx, 4          ; n
.text:0000000000004989                 call    _memset
.text:000000000000498E                 mov     cs:nslots, r12d
.text:0000000000004995
.text:0000000000004995 loc_4995:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000004995                 mov     eax, [rbp+4]
.text:0000000000004998                 shl     r15, 4
.text:000000000000499C                 sub     rsp, 8
.text:00000000000049A0                 add     rbx, r15
.text:00000000000049A3                 lea     r15, [rbp+8]
.text:00000000000049A7                 mov     r8d, [rbp+0]
.text:00000000000049AB                 mov     r11, [rbx]
.text:00000000000049AE                 mov     r12, [rbx+8]
.text:00000000000049B2                 mov     rcx, r14
.text:00000000000049B5                 or      eax, 1
.text:00000000000049B8                 mov     [rsp+60h+var_3C], eax
.text:00000000000049BC                 push    qword ptr [rbp+30h]
.text:00000000000049BF                 mov     r9d, eax
.text:00000000000049C2                 push    qword ptr [rbp+28h]
.text:00000000000049C5                 push    r15
.text:00000000000049C7                 mov     rsi, r11
.text:00000000000049CA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000049CF                 mov     rdi, r12
.text:00000000000049D2                 mov     [rsp+78h+var_48], r11
.text:00000000000049D7                 call    quotearg_buffer_restyled
.text:00000000000049DC                 add     rsp, 20h
.text:00000000000049E0                 mov     r11, [rsp+58h+var_48]
.text:00000000000049E5                 cmp     r11, rax
.text:00000000000049E8                 ja      short loc_4A51
.text:00000000000049EA                 lea     rsi, [rax+1]
.text:00000000000049EE                 lea     rax, slot0
.text:00000000000049F5                 cmp     r12, rax
.text:00000000000049F8                 mov     [rbx], rsi
.text:00000000000049FB                 jz      short loc_4A0F
.text:00000000000049FD                 mov     rdi, r12        ; ptr
.text:0000000000004A00                 mov     [rsp+58h+var_48], rsi
.text:0000000000004A05                 call    free
.text:0000000000004A0A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000004A0F
.text:0000000000004A0F loc_4A0F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000004A0F                 mov     rdi, rsi
.text:0000000000004A12                 mov     [rsp+58h+var_48], rsi
.text:0000000000004A17                 call    xmalloc
.text:0000000000004A1C                 sub     rsp, 8
.text:0000000000004A20                 mov     [rbx+8], rax
.text:0000000000004A24                 mov     r8d, [rbp+0]
.text:0000000000004A28                 push    qword ptr [rbp+30h]
.text:0000000000004A2B                 push    qword ptr [rbp+28h]
.text:0000000000004A2E                 mov     rcx, r14
.text:0000000000004A31                 push    r15
.text:0000000000004A33                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004A38                 mov     rdi, rax
.text:0000000000004A3B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004A40                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004A45                 mov     r12, rax
.text:0000000000004A48                 call    quotearg_buffer_restyled
.text:0000000000004A4D                 add     rsp, 20h
.text:0000000000004A51
.text:0000000000004A51 loc_4A51:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004A51                 mov     eax, [rsp+58h+var_40]
.text:0000000000004A55                 mov     [r13+0], eax
.text:0000000000004A59                 add     rsp, 28h
.text:0000000000004A5D                 mov     rax, r12
.text:0000000000004A60                 pop     rbx
.text:0000000000004A61                 pop     rbp
.text:0000000000004A62                 pop     r12
.text:0000000000004A64                 pop     r13
.text:0000000000004A66                 pop     r14
.text:0000000000004A68                 pop     r15
.text:0000000000004A6A                 retn
.text:0000000000004A6A ; ---------------------------------------------------------------------------
.text:0000000000004A6B                 align 10h
.text:0000000000004A70
.text:0000000000004A70 loc_4A70:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004A70                 xor     edi, edi
.text:0000000000004A72                 call    xrealloc
.text:0000000000004A77                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000004A7F                 mov     rbx, rax
.text:0000000000004A82                 mov     cs:slotvec, rax
.text:0000000000004A89                 movups  xmmword ptr [rax], xmm0
.text:0000000000004A8C                 jmp     loc_496D
.text:0000000000004A91 ; ---------------------------------------------------------------------------
.text:0000000000004A91
.text:0000000000004A91 loc_4A91:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004A91                 call    _abort
.text:0000000000004A96 ; ---------------------------------------------------------------------------
.text:0000000000004A96
.text:0000000000004A96 loc_4A96:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004A96                 call    xalloc_die
.text:0000000000004A96 ; } // starts at 48F0
.text:0000000000004A96 quotearg_n_options endp
.text:0000000000004A96
.text:0000000000004A96 ; ---------------------------------------------------------------------------
.text:0000000000004A9B                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0 ; Attributes: info_from_lumina
.text:0000000000004AA0
.text:0000000000004AA0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004AA0                 public clone_quoting_options
.text:0000000000004AA0 clone_quoting_options proc near
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 push    r12
.text:0000000000004AA2                 push    rbp
.text:0000000000004AA3                 push    rbx
.text:0000000000004AA4                 mov     rbx, rdi
.text:0000000000004AA7                 call    ___errno_location
.text:0000000000004AAC                 mov     r12d, [rax]
.text:0000000000004AAF                 mov     rbp, rax
.text:0000000000004AB2                 lea     rax, default_quoting_options
.text:0000000000004AB9                 test    rbx, rbx
.text:0000000000004ABC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004AC1                 cmovz   rbx, rax
.text:0000000000004AC5                 mov     rdi, rbx        ; src
.text:0000000000004AC8                 call    xmemdup
.text:0000000000004ACD                 mov     [rbp+0], r12d
.text:0000000000004AD1                 pop     rbx
.text:0000000000004AD2                 pop     rbp
.text:0000000000004AD3                 pop     r12
.text:0000000000004AD5                 retn
.text:0000000000004AD5 ; } // starts at 4AA0
.text:0000000000004AD5 clone_quoting_options endp
.text:0000000000004AD5
.text:0000000000004AD5 ; ---------------------------------------------------------------------------
.text:0000000000004AD6                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AE0
.text:0000000000004AE0
.text:0000000000004AE0                 public get_quoting_style
.text:0000000000004AE0 get_quoting_style proc near
.text:0000000000004AE0 ; __unwind {
.text:0000000000004AE0                 lea     rax, default_quoting_options
.text:0000000000004AE7                 test    rdi, rdi
.text:0000000000004AEA                 cmovz   rdi, rax
.text:0000000000004AEE                 mov     eax, [rdi]
.text:0000000000004AF0                 retn
.text:0000000000004AF0 ; } // starts at 4AE0
.text:0000000000004AF0 get_quoting_style endp
.text:0000000000004AF0
.text:0000000000004AF0 ; ---------------------------------------------------------------------------
.text:0000000000004AF1                 align 20h
.text:0000000000004B00
.text:0000000000004B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B00
.text:0000000000004B00
.text:0000000000004B00                 public set_quoting_style
.text:0000000000004B00 set_quoting_style proc near
.text:0000000000004B00 ; __unwind {
.text:0000000000004B00                 lea     rax, default_quoting_options
.text:0000000000004B07                 test    rdi, rdi
.text:0000000000004B0A                 cmovz   rdi, rax
.text:0000000000004B0E                 mov     [rdi], esi
.text:0000000000004B10                 retn
.text:0000000000004B10 ; } // starts at 4B00
.text:0000000000004B10 set_quoting_style endp
.text:0000000000004B10
.text:0000000000004B10 ; ---------------------------------------------------------------------------
.text:0000000000004B11                 align 20h
.text:0000000000004B20
.text:0000000000004B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B20
.text:0000000000004B20 ; Attributes: info_from_lumina
.text:0000000000004B20
.text:0000000000004B20 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004B20                 public set_char_quoting
.text:0000000000004B20 set_char_quoting proc near
.text:0000000000004B20 ; __unwind {
.text:0000000000004B20                 lea     rax, default_quoting_options
.text:0000000000004B27                 test    rdi, rdi
.text:0000000000004B2A                 mov     ecx, esi
.text:0000000000004B2C                 cmovz   rdi, rax
.text:0000000000004B30                 mov     eax, esi
.text:0000000000004B32                 and     ecx, 1Fh
.text:0000000000004B35                 shr     al, 5
.text:0000000000004B38                 movzx   eax, al
.text:0000000000004B3B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004B40                 mov     esi, [rdi]
.text:0000000000004B42                 mov     eax, esi
.text:0000000000004B44                 shr     eax, cl
.text:0000000000004B46                 xor     edx, eax
.text:0000000000004B48                 and     eax, 1
.text:0000000000004B4B                 and     edx, 1
.text:0000000000004B4E                 shl     edx, cl
.text:0000000000004B50                 xor     edx, esi
.text:0000000000004B52                 mov     [rdi], edx
.text:0000000000004B54                 retn
.text:0000000000004B54 ; } // starts at 4B20
.text:0000000000004B54 set_char_quoting endp
.text:0000000000004B54
.text:0000000000004B54 ; ---------------------------------------------------------------------------
.text:0000000000004B55                 align 20h
.text:0000000000004B60
.text:0000000000004B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B60
.text:0000000000004B60
.text:0000000000004B60                 public set_quoting_flags
.text:0000000000004B60 set_quoting_flags proc near
.text:0000000000004B60 ; __unwind {
.text:0000000000004B60                 lea     rax, default_quoting_options
.text:0000000000004B67                 test    rdi, rdi
.text:0000000000004B6A                 cmovz   rdi, rax
.text:0000000000004B6E                 mov     eax, [rdi+4]
.text:0000000000004B71                 mov     [rdi+4], esi
.text:0000000000004B74                 retn
.text:0000000000004B74 ; } // starts at 4B60
.text:0000000000004B74 set_quoting_flags endp
.text:0000000000004B74
.text:0000000000004B74 ; ---------------------------------------------------------------------------
.text:0000000000004B75                 align 20h
.text:0000000000004B80
.text:0000000000004B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B80
.text:0000000000004B80 ; Attributes: info_from_lumina
.text:0000000000004B80
.text:0000000000004B80 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004B80                 public set_custom_quoting
.text:0000000000004B80 set_custom_quoting proc near
.text:0000000000004B80 ; __unwind {
.text:0000000000004B80                 lea     rax, default_quoting_options
.text:0000000000004B87                 test    rdi, rdi
.text:0000000000004B8A                 cmovz   rdi, rax
.text:0000000000004B8E                 test    rsi, rsi
.text:0000000000004B91                 mov     dword ptr [rdi], 0Ah
.text:0000000000004B97                 jz      short loc_4BA7
.text:0000000000004B99                 test    rdx, rdx
.text:0000000000004B9C                 jz      short loc_4BA7
.text:0000000000004B9E                 mov     [rdi+28h], rsi
.text:0000000000004BA2                 mov     [rdi+30h], rdx
.text:0000000000004BA6                 retn
.text:0000000000004BA7 ; ---------------------------------------------------------------------------
.text:0000000000004BA7
.text:0000000000004BA7 loc_4BA7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004BA7                                         ; set_custom_quoting+1C↑j
.text:0000000000004BA7                 sub     rsp, 8
.text:0000000000004BAB                 call    _abort
.text:0000000000004BAB ; } // starts at 4B80
.text:0000000000004BAB set_custom_quoting endp
.text:0000000000004BAB
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0 ; Attributes: info_from_lumina
.text:0000000000004BB0
.text:0000000000004BB0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004BB0                 public quotearg_buffer
.text:0000000000004BB0 quotearg_buffer proc near
.text:0000000000004BB0
.text:0000000000004BB0 var_40          = qword ptr -40h
.text:0000000000004BB0
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 push    r15
.text:0000000000004BB2                 push    r14
.text:0000000000004BB4                 lea     rax, default_quoting_options
.text:0000000000004BBB                 push    r13
.text:0000000000004BBD                 push    r12
.text:0000000000004BBF                 mov     r13, rdi
.text:0000000000004BC2                 push    rbp
.text:0000000000004BC3                 push    rbx
.text:0000000000004BC4                 mov     rbx, r8
.text:0000000000004BC7                 mov     r14, rsi
.text:0000000000004BCA                 mov     r15, rdx
.text:0000000000004BCD                 sub     rsp, 18h
.text:0000000000004BD1                 test    r8, r8
.text:0000000000004BD4                 cmovz   rbx, rax
.text:0000000000004BD8                 mov     [rsp+48h+var_40], rcx
.text:0000000000004BDD                 call    ___errno_location
.text:0000000000004BE2                 mov     r12d, [rax]
.text:0000000000004BE5                 mov     rbp, rax
.text:0000000000004BE8                 lea     rax, [rbx+8]
.text:0000000000004BEC                 sub     rsp, 8
.text:0000000000004BF0                 mov     r9d, [rbx+4]
.text:0000000000004BF4                 push    qword ptr [rbx+30h]
.text:0000000000004BF7                 mov     r8d, [rbx]
.text:0000000000004BFA                 push    qword ptr [rbx+28h]
.text:0000000000004BFD                 mov     rdx, r15
.text:0000000000004C00                 push    rax
.text:0000000000004C01                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004C06                 mov     rsi, r14
.text:0000000000004C09                 mov     rdi, r13
.text:0000000000004C0C                 call    quotearg_buffer_restyled
.text:0000000000004C11                 mov     [rbp+0], r12d
.text:0000000000004C15                 add     rsp, 38h
.text:0000000000004C19                 pop     rbx
.text:0000000000004C1A                 pop     rbp
.text:0000000000004C1B                 pop     r12
.text:0000000000004C1D                 pop     r13
.text:0000000000004C1F                 pop     r14
.text:0000000000004C21                 pop     r15
.text:0000000000004C23                 retn
.text:0000000000004C23 ; } // starts at 4BB0
.text:0000000000004C23 quotearg_buffer endp
.text:0000000000004C23
.text:0000000000004C23 ; ---------------------------------------------------------------------------
.text:0000000000004C24                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30 ; Attributes: info_from_lumina
.text:0000000000004C30
.text:0000000000004C30 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004C30                 public quotearg_alloc_mem
.text:0000000000004C30 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004C30
.text:0000000000004C30 var_5C          = dword ptr -5Ch
.text:0000000000004C30 var_58          = qword ptr -58h
.text:0000000000004C30 var_50          = qword ptr -50h
.text:0000000000004C30 var_48          = qword ptr -48h
.text:0000000000004C30 var_40          = qword ptr -40h
.text:0000000000004C30
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 push    r15
.text:0000000000004C32                 push    r14
.text:0000000000004C34                 lea     rax, default_quoting_options
.text:0000000000004C3B                 push    r13
.text:0000000000004C3D                 push    r12
.text:0000000000004C3F                 mov     r12, rdx
.text:0000000000004C42                 push    rbp
.text:0000000000004C43                 push    rbx
.text:0000000000004C44                 mov     rbx, rcx
.text:0000000000004C47                 mov     r14, rdi
.text:0000000000004C4A                 mov     r15, rsi
.text:0000000000004C4D                 sub     rsp, 38h
.text:0000000000004C51                 test    rcx, rcx
.text:0000000000004C54                 cmovz   rbx, rax
.text:0000000000004C58                 xor     ebp, ebp
.text:0000000000004C5A                 call    ___errno_location
.text:0000000000004C5F                 test    r12, r12
.text:0000000000004C62                 mov     r13, rax
.text:0000000000004C65                 mov     eax, [rax]
.text:0000000000004C67                 setz    bpl
.text:0000000000004C6B                 or      ebp, [rbx+4]
.text:0000000000004C6E                 lea     r10, [rbx+8]
.text:0000000000004C72                 sub     rsp, 8
.text:0000000000004C76                 mov     r8d, [rbx]
.text:0000000000004C79                 mov     rcx, r15
.text:0000000000004C7C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004C80                 push    qword ptr [rbx+30h]
.text:0000000000004C83                 mov     rdx, r14
.text:0000000000004C86                 push    qword ptr [rbx+28h]
.text:0000000000004C89                 push    r10
.text:0000000000004C8B                 xor     esi, esi
.text:0000000000004C8D                 mov     r9d, ebp
.text:0000000000004C90                 xor     edi, edi
.text:0000000000004C92                 mov     [rsp+88h+var_48], r10
.text:0000000000004C97                 call    quotearg_buffer_restyled
.text:0000000000004C9C                 lea     rsi, [rax+1]
.text:0000000000004CA0                 mov     [rsp+88h+var_40], rax
.text:0000000000004CA5                 add     rsp, 20h
.text:0000000000004CA9                 mov     rdi, rsi
.text:0000000000004CAC                 mov     [rsp+68h+var_50], rsi
.text:0000000000004CB1                 call    xmalloc
.text:0000000000004CB6                 mov     [rsp+68h+var_58], rax
.text:0000000000004CBB                 sub     rsp, 8
.text:0000000000004CBF                 push    qword ptr [rbx+30h]
.text:0000000000004CC2                 push    qword ptr [rbx+28h]
.text:0000000000004CC5                 mov     r10, [rsp+80h+var_48]
.text:0000000000004CCA                 mov     r9d, ebp
.text:0000000000004CCD                 mov     r8d, [rbx]
.text:0000000000004CD0                 mov     rcx, r15
.text:0000000000004CD3                 mov     rdx, r14
.text:0000000000004CD6                 mov     rdi, rax
.text:0000000000004CD9                 push    r10
.text:0000000000004CDB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004CE0                 call    quotearg_buffer_restyled
.text:0000000000004CE5                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004CE9                 add     rsp, 20h
.text:0000000000004CED                 test    r12, r12
.text:0000000000004CF0                 mov     [r13+0], eax
.text:0000000000004CF4                 jz      short loc_4CFF
.text:0000000000004CF6                 mov     r11, [rsp+68h+var_40]
.text:0000000000004CFB                 mov     [r12], r11
.text:0000000000004CFF
.text:0000000000004CFF loc_4CFF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004CFF                 mov     rax, [rsp+68h+var_58]
.text:0000000000004D04                 add     rsp, 38h
.text:0000000000004D08                 pop     rbx
.text:0000000000004D09                 pop     rbp
.text:0000000000004D0A                 pop     r12
.text:0000000000004D0C                 pop     r13
.text:0000000000004D0E                 pop     r14
.text:0000000000004D10                 pop     r15
.text:0000000000004D12                 retn
.text:0000000000004D12 ; } // starts at 4C30
.text:0000000000004D12 quotearg_alloc_mem endp
.text:0000000000004D12
.text:0000000000004D12 ; ---------------------------------------------------------------------------
.text:0000000000004D13                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20
.text:0000000000004D20                 public quotearg_alloc
.text:0000000000004D20 quotearg_alloc  proc near
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 mov     rcx, rdx
.text:0000000000004D23                 xor     edx, edx
.text:0000000000004D25                 jmp     quotearg_alloc_mem
.text:0000000000004D25 ; } // starts at 4D20
.text:0000000000004D25 quotearg_alloc  endp
.text:0000000000004D25
.text:0000000000004D25 ; ---------------------------------------------------------------------------
.text:0000000000004D2A                 align 10h
.text:0000000000004D30
.text:0000000000004D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D30
.text:0000000000004D30 ; Attributes: info_from_lumina
.text:0000000000004D30
.text:0000000000004D30 ; void __cdecl quotearg_free()
.text:0000000000004D30                 public quotearg_free
.text:0000000000004D30 quotearg_free   proc near
.text:0000000000004D30 ; __unwind {
.text:0000000000004D30                 mov     eax, cs:nslots
.text:0000000000004D36                 push    r12
.text:0000000000004D38                 mov     r12, cs:slotvec
.text:0000000000004D3F                 push    rbp
.text:0000000000004D40                 push    rbx
.text:0000000000004D41                 cmp     eax, 1
.text:0000000000004D44                 jle     short loc_4D71
.text:0000000000004D46                 sub     eax, 2
.text:0000000000004D49                 lea     rbx, [r12+18h]
.text:0000000000004D4E                 shl     rax, 4
.text:0000000000004D52                 lea     rbp, [r12+rax+28h]
.text:0000000000004D57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004D60                 mov     rdi, [rbx]      ; ptr
.text:0000000000004D63                 add     rbx, 10h
.text:0000000000004D67                 call    free
.text:0000000000004D6C                 cmp     rbx, rbp
.text:0000000000004D6F                 jnz     short loc_4D60
.text:0000000000004D71
.text:0000000000004D71 loc_4D71:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004D71                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004D76                 lea     rbx, slot0
.text:0000000000004D7D                 cmp     rdi, rbx
.text:0000000000004D80                 jz      short loc_4D99
.text:0000000000004D82                 call    free
.text:0000000000004D87                 mov     cs:slotvec0, 100h
.text:0000000000004D92                 mov     cs:off_20E098, rbx
.text:0000000000004D99
.text:0000000000004D99 loc_4D99:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004D99                 lea     rbx, slotvec0
.text:0000000000004DA0                 cmp     r12, rbx
.text:0000000000004DA3                 jz      short loc_4DB4
.text:0000000000004DA5                 mov     rdi, r12        ; ptr
.text:0000000000004DA8                 call    free
.text:0000000000004DAD                 mov     cs:slotvec, rbx
.text:0000000000004DB4
.text:0000000000004DB4 loc_4DB4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004DB4                 pop     rbx
.text:0000000000004DB5                 mov     cs:nslots, 1
.text:0000000000004DBF                 pop     rbp
.text:0000000000004DC0                 pop     r12
.text:0000000000004DC2                 retn
.text:0000000000004DC2 ; } // starts at 4D30
.text:0000000000004DC2 quotearg_free   endp
.text:0000000000004DC2
.text:0000000000004DC2 ; ---------------------------------------------------------------------------
.text:0000000000004DC3                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DD0
.text:0000000000004DD0
.text:0000000000004DD0                 public quotearg_n
.text:0000000000004DD0 quotearg_n      proc near
.text:0000000000004DD0 ; __unwind {
.text:0000000000004DD0                 lea     rcx, default_quoting_options
.text:0000000000004DD7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DDE                 jmp     quotearg_n_options
.text:0000000000004DDE ; } // starts at 4DD0
.text:0000000000004DDE quotearg_n      endp
.text:0000000000004DDE
.text:0000000000004DDE ; ---------------------------------------------------------------------------
.text:0000000000004DE3                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0                 public quotearg_n_mem
.text:0000000000004DF0 quotearg_n_mem  proc near
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 lea     rcx, default_quoting_options
.text:0000000000004DF7                 jmp     quotearg_n_options
.text:0000000000004DF7 ; } // starts at 4DF0
.text:0000000000004DF7 quotearg_n_mem  endp
.text:0000000000004DF7
.text:0000000000004DF7 ; ---------------------------------------------------------------------------
.text:0000000000004DFC                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00
.text:0000000000004E00                 public quotearg
.text:0000000000004E00 quotearg        proc near
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 lea     rcx, default_quoting_options
.text:0000000000004E07                 mov     rsi, rdi
.text:0000000000004E0A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E11                 xor     edi, edi
.text:0000000000004E13                 jmp     quotearg_n_options
.text:0000000000004E13 ; } // starts at 4E00
.text:0000000000004E13 quotearg        endp
.text:0000000000004E13
.text:0000000000004E13 ; ---------------------------------------------------------------------------
.text:0000000000004E18                 align 20h
.text:0000000000004E20
.text:0000000000004E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E20
.text:0000000000004E20
.text:0000000000004E20                 public quotearg_mem
.text:0000000000004E20 quotearg_mem    proc near
.text:0000000000004E20 ; __unwind {
.text:0000000000004E20                 lea     rcx, default_quoting_options
.text:0000000000004E27                 mov     rdx, rsi
.text:0000000000004E2A                 mov     rsi, rdi
.text:0000000000004E2D                 xor     edi, edi
.text:0000000000004E2F                 jmp     quotearg_n_options
.text:0000000000004E2F ; } // starts at 4E20
.text:0000000000004E2F quotearg_mem    endp
.text:0000000000004E2F
.text:0000000000004E2F ; ---------------------------------------------------------------------------
.text:0000000000004E34                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40 ; Attributes: info_from_lumina
.text:0000000000004E40
.text:0000000000004E40 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004E40                 public quotearg_n_style
.text:0000000000004E40 quotearg_n_style proc near              ; CODE XREF: main+C24↑p
.text:0000000000004E40                                         ; main+C36↑p ...
.text:0000000000004E40
.text:0000000000004E40 var_48          = dword ptr -48h
.text:0000000000004E40 var_44          = qword ptr -44h
.text:0000000000004E40 var_3C          = qword ptr -3Ch
.text:0000000000004E40 var_34          = qword ptr -34h
.text:0000000000004E40 var_2C          = qword ptr -2Ch
.text:0000000000004E40 var_24          = qword ptr -24h
.text:0000000000004E40 var_1C          = qword ptr -1Ch
.text:0000000000004E40 var_14          = dword ptr -14h
.text:0000000000004E40 var_10          = qword ptr -10h
.text:0000000000004E40
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 sub     rsp, 48h
.text:0000000000004E44                 mov     rax, rdx
.text:0000000000004E47                 mov     rdx, fs:28h
.text:0000000000004E50                 mov     [rsp+48h+var_10], rdx
.text:0000000000004E55                 xor     edx, edx
.text:0000000000004E57                 cmp     esi, 0Ah
.text:0000000000004E5A                 jz      short loc_4EC4
.text:0000000000004E5C                 mov     [rsp+48h+var_48], esi
.text:0000000000004E5F                 mov     rcx, rsp
.text:0000000000004E62                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E69                 mov     rsi, rax
.text:0000000000004E6C                 mov     [rsp+48h+var_44], 0
.text:0000000000004E75                 mov     [rsp+48h+var_3C], 0
.text:0000000000004E7E                 mov     [rsp+48h+var_34], 0
.text:0000000000004E87                 mov     [rsp+48h+var_2C], 0
.text:0000000000004E90                 mov     [rsp+48h+var_24], 0
.text:0000000000004E99                 mov     [rsp+48h+var_1C], 0
.text:0000000000004EA2                 mov     [rsp+48h+var_14], 0
.text:0000000000004EAA                 call    quotearg_n_options
.text:0000000000004EAF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004EB4                 xor     rcx, fs:28h
.text:0000000000004EBD                 jnz     short loc_4EC9
.text:0000000000004EBF                 add     rsp, 48h
.text:0000000000004EC3                 retn
.text:0000000000004EC4 ; ---------------------------------------------------------------------------
.text:0000000000004EC4
.text:0000000000004EC4 loc_4EC4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004EC4                 call    _abort
.text:0000000000004EC9 ; ---------------------------------------------------------------------------
.text:0000000000004EC9
.text:0000000000004EC9 loc_4EC9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004EC9                 call    ___stack_chk_fail
.text:0000000000004EC9 ; } // starts at 4E40
.text:0000000000004EC9 quotearg_n_style endp
.text:0000000000004EC9
.text:0000000000004EC9 ; ---------------------------------------------------------------------------
.text:0000000000004ECE                 align 10h
.text:0000000000004ED0
.text:0000000000004ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004ED0
.text:0000000000004ED0 ; Attributes: info_from_lumina
.text:0000000000004ED0
.text:0000000000004ED0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004ED0                 public quotearg_n_style_mem
.text:0000000000004ED0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004ED0
.text:0000000000004ED0 var_48          = dword ptr -48h
.text:0000000000004ED0 var_44          = qword ptr -44h
.text:0000000000004ED0 var_3C          = qword ptr -3Ch
.text:0000000000004ED0 var_34          = qword ptr -34h
.text:0000000000004ED0 var_2C          = qword ptr -2Ch
.text:0000000000004ED0 var_24          = qword ptr -24h
.text:0000000000004ED0 var_1C          = qword ptr -1Ch
.text:0000000000004ED0 var_14          = dword ptr -14h
.text:0000000000004ED0 var_10          = qword ptr -10h
.text:0000000000004ED0
.text:0000000000004ED0 ; __unwind {
.text:0000000000004ED0                 sub     rsp, 48h
.text:0000000000004ED4                 mov     rax, rdx
.text:0000000000004ED7                 mov     rdx, rcx
.text:0000000000004EDA                 mov     rcx, fs:28h
.text:0000000000004EE3                 mov     [rsp+48h+var_10], rcx
.text:0000000000004EE8                 xor     ecx, ecx
.text:0000000000004EEA                 cmp     esi, 0Ah
.text:0000000000004EED                 jz      short loc_4F50
.text:0000000000004EEF                 mov     [rsp+48h+var_48], esi
.text:0000000000004EF2                 mov     rcx, rsp
.text:0000000000004EF5                 mov     rsi, rax
.text:0000000000004EF8                 mov     [rsp+48h+var_44], 0
.text:0000000000004F01                 mov     [rsp+48h+var_3C], 0
.text:0000000000004F0A                 mov     [rsp+48h+var_34], 0
.text:0000000000004F13                 mov     [rsp+48h+var_2C], 0
.text:0000000000004F1C                 mov     [rsp+48h+var_24], 0
.text:0000000000004F25                 mov     [rsp+48h+var_1C], 0
.text:0000000000004F2E                 mov     [rsp+48h+var_14], 0
.text:0000000000004F36                 call    quotearg_n_options
.text:0000000000004F3B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004F40                 xor     rdx, fs:28h
.text:0000000000004F49                 jnz     short loc_4F55
.text:0000000000004F4B                 add     rsp, 48h
.text:0000000000004F4F                 retn
.text:0000000000004F50 ; ---------------------------------------------------------------------------
.text:0000000000004F50
.text:0000000000004F50 loc_4F50:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004F50                 call    _abort
.text:0000000000004F55 ; ---------------------------------------------------------------------------
.text:0000000000004F55
.text:0000000000004F55 loc_4F55:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004F55                 call    ___stack_chk_fail
.text:0000000000004F55 ; } // starts at 4ED0
.text:0000000000004F55 quotearg_n_style_mem endp
.text:0000000000004F55
.text:0000000000004F55 ; ---------------------------------------------------------------------------
.text:0000000000004F5A                 align 20h
.text:0000000000004F60
.text:0000000000004F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F60
.text:0000000000004F60
.text:0000000000004F60                 public quotearg_style
.text:0000000000004F60 quotearg_style  proc near               ; CODE XREF: main+49C↑p
.text:0000000000004F60                                         ; main+4F1↑p ...
.text:0000000000004F60 ; __unwind {
.text:0000000000004F60                 mov     rdx, rsi
.text:0000000000004F63                 mov     esi, edi
.text:0000000000004F65                 xor     edi, edi
.text:0000000000004F67                 jmp     quotearg_n_style
.text:0000000000004F67 ; } // starts at 4F60
.text:0000000000004F67 quotearg_style  endp
.text:0000000000004F67
.text:0000000000004F67 ; ---------------------------------------------------------------------------
.text:0000000000004F6C                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70
.text:0000000000004F70                 public quotearg_style_mem
.text:0000000000004F70 quotearg_style_mem proc near
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 mov     rcx, rdx
.text:0000000000004F73                 mov     rdx, rsi
.text:0000000000004F76                 mov     esi, edi
.text:0000000000004F78                 xor     edi, edi
.text:0000000000004F7A                 jmp     quotearg_n_style_mem
.text:0000000000004F7A ; } // starts at 4F70
.text:0000000000004F7A quotearg_style_mem endp
.text:0000000000004F7A
.text:0000000000004F7A ; ---------------------------------------------------------------------------
.text:0000000000004F7F                 align 20h
.text:0000000000004F80
.text:0000000000004F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F80
.text:0000000000004F80 ; Attributes: info_from_lumina
.text:0000000000004F80
.text:0000000000004F80 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004F80                 public quotearg_char_mem
.text:0000000000004F80 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004F80                                         ; quotearg_colon+C↓j ...
.text:0000000000004F80
.text:0000000000004F80 var_48          = xmmword ptr -48h
.text:0000000000004F80 var_38          = xmmword ptr -38h
.text:0000000000004F80 var_28          = xmmword ptr -28h
.text:0000000000004F80 var_18          = qword ptr -18h
.text:0000000000004F80 var_10          = qword ptr -10h
.text:0000000000004F80
.text:0000000000004F80 ; __unwind {
.text:0000000000004F80                 sub     rsp, 48h
.text:0000000000004F84                 mov     ecx, edx
.text:0000000000004F86                 mov     rax, fs:28h
.text:0000000000004F8F                 mov     [rsp+48h+var_10], rax
.text:0000000000004F94                 xor     eax, eax
.text:0000000000004F96                 mov     rax, cs:qword_20E270
.text:0000000000004F9D                 mov     r8, rsp
.text:0000000000004FA0                 and     ecx, 1Fh
.text:0000000000004FA3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004FAB                 mov     [rsp+48h+var_18], rax
.text:0000000000004FB0                 mov     eax, edx
.text:0000000000004FB2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004FB6                 shr     al, 5
.text:0000000000004FB9                 movzx   eax, al
.text:0000000000004FBC                 lea     r9, [r8+rax*4+8]
.text:0000000000004FC1                 movdqa  xmm0, cs:xmmword_20E250
.text:0000000000004FC9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004FCE                 movdqa  xmm0, cs:xmmword_20E260
.text:0000000000004FD6                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004FDB                 mov     edx, [r9]
.text:0000000000004FDE                 mov     eax, edx
.text:0000000000004FE0                 shr     eax, cl
.text:0000000000004FE2                 not     eax
.text:0000000000004FE4                 and     eax, 1
.text:0000000000004FE7                 shl     eax, cl
.text:0000000000004FE9                 mov     rcx, r8
.text:0000000000004FEC                 xor     eax, edx
.text:0000000000004FEE                 mov     rdx, rsi
.text:0000000000004FF1                 mov     rsi, rdi
.text:0000000000004FF4                 mov     [r9], eax
.text:0000000000004FF7                 xor     edi, edi
.text:0000000000004FF9                 call    quotearg_n_options
.text:0000000000004FFE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005003                 xor     rsi, fs:28h
.text:000000000000500C                 jnz     short loc_5013
.text:000000000000500E                 add     rsp, 48h
.text:0000000000005012                 retn
.text:0000000000005013 ; ---------------------------------------------------------------------------
.text:0000000000005013
.text:0000000000005013 loc_5013:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005013                 call    ___stack_chk_fail
.text:0000000000005013 ; } // starts at 4F80
.text:0000000000005013 quotearg_char_mem endp
.text:0000000000005013
.text:0000000000005013 ; ---------------------------------------------------------------------------
.text:0000000000005018                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020
.text:0000000000005020                 public quotearg_char
.text:0000000000005020 quotearg_char   proc near
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 movsx   edx, sil
.text:0000000000005024                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000502B                 jmp     quotearg_char_mem
.text:000000000000502B ; } // starts at 5020
.text:000000000000502B quotearg_char   endp
.text:000000000000502B
.text:0000000000005030
.text:0000000000005030 ; =============== S U B R O U T I N E =======================================
.text:0000000000005030
.text:0000000000005030
.text:0000000000005030                 public quotearg_colon
.text:0000000000005030 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005030 ; __unwind {
.text:0000000000005030                 mov     edx, 3Ah ; ':'
.text:0000000000005035                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000503C                 jmp     quotearg_char_mem
.text:000000000000503C ; } // starts at 5030
.text:000000000000503C quotearg_colon  endp
.text:000000000000503C
.text:000000000000503C ; ---------------------------------------------------------------------------
.text:0000000000005041                 align 10h
.text:0000000000005050
.text:0000000000005050 ; =============== S U B R O U T I N E =======================================
.text:0000000000005050
.text:0000000000005050
.text:0000000000005050                 public quotearg_colon_mem
.text:0000000000005050 quotearg_colon_mem proc near
.text:0000000000005050 ; __unwind {
.text:0000000000005050                 mov     edx, 3Ah ; ':'
.text:0000000000005055                 jmp     quotearg_char_mem
.text:0000000000005055 ; } // starts at 5050
.text:0000000000005055 quotearg_colon_mem endp
.text:0000000000005055
.text:0000000000005055 ; ---------------------------------------------------------------------------
.text:000000000000505A                 align 20h
.text:0000000000005060
.text:0000000000005060 ; =============== S U B R O U T I N E =======================================
.text:0000000000005060
.text:0000000000005060 ; Attributes: info_from_lumina
.text:0000000000005060
.text:0000000000005060 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005060                 public quotearg_n_style_colon
.text:0000000000005060 quotearg_n_style_colon proc near        ; CODE XREF: main+53B↑p
.text:0000000000005060                                         ; main+8B4↑p ...
.text:0000000000005060
.text:0000000000005060 var_48          = dword ptr -48h
.text:0000000000005060 var_44          = qword ptr -44h
.text:0000000000005060 var_3C          = qword ptr -3Ch
.text:0000000000005060 var_34          = qword ptr -34h
.text:0000000000005060 var_2C          = qword ptr -2Ch
.text:0000000000005060 var_24          = qword ptr -24h
.text:0000000000005060 var_1C          = qword ptr -1Ch
.text:0000000000005060 var_14          = dword ptr -14h
.text:0000000000005060 var_10          = qword ptr -10h
.text:0000000000005060
.text:0000000000005060 ; __unwind {
.text:0000000000005060                 sub     rsp, 48h
.text:0000000000005064                 mov     rax, rdx
.text:0000000000005067                 mov     rdx, fs:28h
.text:0000000000005070                 mov     [rsp+48h+var_10], rdx
.text:0000000000005075                 xor     edx, edx
.text:0000000000005077                 cmp     esi, 0Ah
.text:000000000000507A                 jz      short loc_50E4
.text:000000000000507C                 mov     [rsp+48h+var_48], esi
.text:000000000000507F                 mov     rcx, rsp
.text:0000000000005082                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005089                 mov     rsi, rax
.text:000000000000508C                 mov     [rsp+48h+var_44], 0
.text:0000000000005095                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000509E                 mov     [rsp+48h+var_34], 0
.text:00000000000050A7                 mov     [rsp+48h+var_2C], 0
.text:00000000000050B0                 mov     [rsp+48h+var_24], 0
.text:00000000000050B9                 mov     [rsp+48h+var_1C], 0
.text:00000000000050C2                 mov     [rsp+48h+var_14], 0
.text:00000000000050CA                 call    quotearg_n_options
.text:00000000000050CF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000050D4                 xor     rcx, fs:28h
.text:00000000000050DD                 jnz     short loc_50E9
.text:00000000000050DF                 add     rsp, 48h
.text:00000000000050E3                 retn
.text:00000000000050E4 ; ---------------------------------------------------------------------------
.text:00000000000050E4
.text:00000000000050E4 loc_50E4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000050E4                 call    _abort
.text:00000000000050E9 ; ---------------------------------------------------------------------------
.text:00000000000050E9
.text:00000000000050E9 loc_50E9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000050E9                 call    ___stack_chk_fail
.text:00000000000050E9 ; } // starts at 5060
.text:00000000000050E9 quotearg_n_style_colon endp
.text:00000000000050E9
.text:00000000000050E9 ; ---------------------------------------------------------------------------
.text:00000000000050EE                 align 10h
.text:00000000000050F0
.text:00000000000050F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050F0
.text:00000000000050F0 ; Attributes: info_from_lumina
.text:00000000000050F0
.text:00000000000050F0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000050F0                 public quotearg_n_custom_mem
.text:00000000000050F0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000050F0                                         ; quotearg_custom+12↓j ...
.text:00000000000050F0
.text:00000000000050F0 var_48          = xmmword ptr -48h
.text:00000000000050F0 var_38          = xmmword ptr -38h
.text:00000000000050F0 var_28          = xmmword ptr -28h
.text:00000000000050F0 var_18          = qword ptr -18h
.text:00000000000050F0 var_10          = qword ptr -10h
.text:00000000000050F0
.text:00000000000050F0 ; __unwind {
.text:00000000000050F0                 sub     rsp, 48h
.text:00000000000050F4                 mov     r9, rcx
.text:00000000000050F7                 mov     rcx, cs:qword_20E270
.text:00000000000050FE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005106                 mov     rax, fs:28h
.text:000000000000510F                 mov     [rsp+48h+var_10], rax
.text:0000000000005114                 xor     eax, eax
.text:0000000000005116                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000511A                 test    rsi, rsi
.text:000000000000511D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005122                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005129                 movdqa  xmm0, cs:xmmword_20E250
.text:0000000000005131                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005136                 movdqa  xmm0, cs:xmmword_20E260
.text:000000000000513E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005143                 jz      short loc_5177
.text:0000000000005145                 test    rdx, rdx
.text:0000000000005148                 jz      short loc_5177
.text:000000000000514A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000514F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005154                 mov     rcx, rsp
.text:0000000000005157                 mov     rdx, r8
.text:000000000000515A                 mov     rsi, r9
.text:000000000000515D                 call    quotearg_n_options
.text:0000000000005162                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005167                 xor     rdi, fs:28h
.text:0000000000005170                 jnz     short loc_517C
.text:0000000000005172                 add     rsp, 48h
.text:0000000000005176                 retn
.text:0000000000005177 ; ---------------------------------------------------------------------------
.text:0000000000005177
.text:0000000000005177 loc_5177:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005177                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005177                 call    _abort
.text:000000000000517C ; ---------------------------------------------------------------------------
.text:000000000000517C
.text:000000000000517C loc_517C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000517C                 call    ___stack_chk_fail
.text:000000000000517C ; } // starts at 50F0
.text:000000000000517C quotearg_n_custom_mem endp
.text:000000000000517C
.text:000000000000517C ; ---------------------------------------------------------------------------
.text:0000000000005181                 align 10h
.text:0000000000005190
.text:0000000000005190 ; =============== S U B R O U T I N E =======================================
.text:0000000000005190
.text:0000000000005190
.text:0000000000005190                 public quotearg_n_custom
.text:0000000000005190 quotearg_n_custom proc near
.text:0000000000005190 ; __unwind {
.text:0000000000005190                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005197                 jmp     quotearg_n_custom_mem
.text:0000000000005197 ; } // starts at 5190
.text:0000000000005197 quotearg_n_custom endp
.text:0000000000005197
.text:0000000000005197 ; ---------------------------------------------------------------------------
.text:000000000000519C                 align 20h
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0
.text:00000000000051A0                 public quotearg_custom
.text:00000000000051A0 quotearg_custom proc near
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 mov     rcx, rdx
.text:00000000000051A3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000051AA                 mov     rdx, rsi
.text:00000000000051AD                 mov     rsi, rdi
.text:00000000000051B0                 xor     edi, edi
.text:00000000000051B2                 jmp     quotearg_n_custom_mem
.text:00000000000051B2 ; } // starts at 51A0
.text:00000000000051B2 quotearg_custom endp
.text:00000000000051B2
.text:00000000000051B2 ; ---------------------------------------------------------------------------
.text:00000000000051B7                 align 20h
.text:00000000000051C0
.text:00000000000051C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051C0
.text:00000000000051C0
.text:00000000000051C0                 public quotearg_custom_mem
.text:00000000000051C0 quotearg_custom_mem proc near
.text:00000000000051C0 ; __unwind {
.text:00000000000051C0                 mov     r8, rcx
.text:00000000000051C3                 mov     rcx, rdx
.text:00000000000051C6                 mov     rdx, rsi
.text:00000000000051C9                 mov     rsi, rdi
.text:00000000000051CC                 xor     edi, edi
.text:00000000000051CE                 jmp     quotearg_n_custom_mem
.text:00000000000051CE ; } // starts at 51C0
.text:00000000000051CE quotearg_custom_mem endp
.text:00000000000051CE
.text:00000000000051CE ; ---------------------------------------------------------------------------
.text:00000000000051D3                 align 20h
.text:00000000000051E0
.text:00000000000051E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051E0
.text:00000000000051E0
.text:00000000000051E0                 public quote_n_mem
.text:00000000000051E0 quote_n_mem     proc near
.text:00000000000051E0 ; __unwind {
.text:00000000000051E0                 lea     rcx, quote_quoting_options
.text:00000000000051E7                 jmp     quotearg_n_options
.text:00000000000051E7 ; } // starts at 51E0
.text:00000000000051E7 quote_n_mem     endp
.text:00000000000051E7
.text:00000000000051E7 ; ---------------------------------------------------------------------------
.text:00000000000051EC                 align 10h
.text:00000000000051F0
.text:00000000000051F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051F0
.text:00000000000051F0
.text:00000000000051F0                 public quote_mem
.text:00000000000051F0 quote_mem       proc near
.text:00000000000051F0 ; __unwind {
.text:00000000000051F0                 lea     rcx, quote_quoting_options
.text:00000000000051F7                 mov     rdx, rsi
.text:00000000000051FA                 mov     rsi, rdi
.text:00000000000051FD                 xor     edi, edi
.text:00000000000051FF                 jmp     quotearg_n_options
.text:00000000000051FF ; } // starts at 51F0
.text:00000000000051FF quote_mem       endp
.text:00000000000051FF
.text:00000000000051FF ; ---------------------------------------------------------------------------
.text:0000000000005204                 align 10h
.text:0000000000005210
.text:0000000000005210 ; =============== S U B R O U T I N E =======================================
.text:0000000000005210
.text:0000000000005210
.text:0000000000005210                 public quote_n
.text:0000000000005210 quote_n         proc near
.text:0000000000005210 ; __unwind {
.text:0000000000005210                 lea     rcx, quote_quoting_options
.text:0000000000005217                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000521E                 jmp     quotearg_n_options
.text:000000000000521E ; } // starts at 5210
.text:000000000000521E quote_n         endp
.text:000000000000521E
.text:000000000000521E ; ---------------------------------------------------------------------------
.text:0000000000005223                 align 10h
.text:0000000000005230
.text:0000000000005230 ; =============== S U B R O U T I N E =======================================
.text:0000000000005230
.text:0000000000005230
.text:0000000000005230                 public quote
.text:0000000000005230 quote           proc near               ; CODE XREF: main+CB2↑p
.text:0000000000005230                                         ; main+CED↑p
.text:0000000000005230 ; __unwind {
.text:0000000000005230                 lea     rcx, quote_quoting_options
.text:0000000000005237                 mov     rsi, rdi
.text:000000000000523A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005241                 xor     edi, edi
.text:0000000000005243                 jmp     quotearg_n_options
.text:0000000000005243 ; } // starts at 5230
.text:0000000000005243 quote           endp
.text:0000000000005243
.text:0000000000005243 ; ---------------------------------------------------------------------------
.text:0000000000005248                 align 10h
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250
.text:0000000000005250                 public get_root_dev_ino
.text:0000000000005250 get_root_dev_ino proc near              ; CODE XREF: main+B48↑p
.text:0000000000005250
.text:0000000000005250 var_A8          = qword ptr -0A8h
.text:0000000000005250 var_A0          = qword ptr -0A0h
.text:0000000000005250 var_10          = qword ptr -10h
.text:0000000000005250
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 push    rbx
.text:0000000000005251                 lea     rsi, aLibs+6    ; filename
.text:0000000000005258                 mov     rbx, rdi
.text:000000000000525B                 mov     edi, 1          ; ver
.text:0000000000005260                 sub     rsp, 0A0h
.text:0000000000005267                 mov     rdx, rsp        ; stat_buf
.text:000000000000526A                 mov     rax, fs:28h
.text:0000000000005273                 mov     [rsp+0A8h+var_10], rax
.text:000000000000527B                 xor     eax, eax
.text:000000000000527D                 call    ___lxstat
.text:0000000000005282                 test    eax, eax
.text:0000000000005284                 jnz     short loc_52B8
.text:0000000000005286                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000528B                 mov     [rbx], rax
.text:000000000000528E                 mov     rax, [rsp+0A8h+var_A8]
.text:0000000000005292                 mov     [rbx+8], rax
.text:0000000000005296                 mov     rax, rbx
.text:0000000000005299
.text:0000000000005299 loc_5299:                               ; CODE XREF: get_root_dev_ino+6A↓j
.text:0000000000005299                 mov     rcx, [rsp+0A8h+var_10]
.text:00000000000052A1                 xor     rcx, fs:28h
.text:00000000000052AA                 jnz     short loc_52BC
.text:00000000000052AC                 add     rsp, 0A0h
.text:00000000000052B3                 pop     rbx
.text:00000000000052B4                 retn
.text:00000000000052B4 ; ---------------------------------------------------------------------------
.text:00000000000052B5                 align 8
.text:00000000000052B8
.text:00000000000052B8 loc_52B8:                               ; CODE XREF: get_root_dev_ino+34↑j
.text:00000000000052B8                 xor     eax, eax
.text:00000000000052BA                 jmp     short loc_5299
.text:00000000000052BC ; ---------------------------------------------------------------------------
.text:00000000000052BC
.text:00000000000052BC loc_52BC:                               ; CODE XREF: get_root_dev_ino+5A↑j
.text:00000000000052BC                 call    ___stack_chk_fail
.text:00000000000052BC ; } // starts at 5250
.text:00000000000052BC get_root_dev_ino endp
.text:00000000000052BC
.text:00000000000052BC ; ---------------------------------------------------------------------------
.text:00000000000052C1                 align 10h
.text:00000000000052D0
.text:00000000000052D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052D0
.text:00000000000052D0
.text:00000000000052D0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000052D0                 public version_etc_arn
.text:00000000000052D0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_570B↓j
.text:00000000000052D0                                         ; version_etc_va:loc_575B↓p ...
.text:00000000000052D0
.text:00000000000052D0 var_58          = qword ptr -58h
.text:00000000000052D0 var_50          = qword ptr -50h
.text:00000000000052D0 var_48          = qword ptr -48h
.text:00000000000052D0 var_40          = qword ptr -40h
.text:00000000000052D0
.text:00000000000052D0 ; __unwind {
.text:00000000000052D0                 push    r15
.text:00000000000052D2                 push    r14
.text:00000000000052D4                 push    r13
.text:00000000000052D6                 push    r12
.text:00000000000052D8                 mov     r12, r9
.text:00000000000052DB                 push    rbp
.text:00000000000052DC                 push    rbx
.text:00000000000052DD                 mov     rbp, rdi
.text:00000000000052E0                 mov     rbx, r8
.text:00000000000052E3                 sub     rsp, 28h
.text:00000000000052E7                 test    rsi, rsi
.text:00000000000052EA                 jz      loc_5408
.text:00000000000052F0                 mov     r8, rdx
.text:00000000000052F3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000052FA                 mov     r9, rcx
.text:00000000000052FD                 xor     eax, eax
.text:00000000000052FF                 mov     rcx, rsi
.text:0000000000005302                 mov     esi, 1
.text:0000000000005307                 call    ___fprintf_chk
.text:000000000000530C
.text:000000000000530C loc_530C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000530C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000005313                 xor     edi, edi        ; domainname
.text:0000000000005315                 mov     edx, 5          ; category
.text:000000000000531A                 call    _dcgettext
.text:000000000000531F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000005326                 mov     rcx, rax
.text:0000000000005329                 mov     r8d, 7E3h
.text:000000000000532F                 mov     esi, 1
.text:0000000000005334                 mov     rdi, rbp
.text:0000000000005337                 xor     eax, eax
.text:0000000000005339                 call    ___fprintf_chk
.text:000000000000533E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005345                 xor     edi, edi        ; domainname
.text:0000000000005347                 mov     edx, 5          ; category
.text:000000000000534C                 call    _dcgettext
.text:0000000000005351                 mov     rsi, rbp        ; stream
.text:0000000000005354                 mov     rdi, rax        ; s
.text:0000000000005357                 call    _fputs_unlocked
.text:000000000000535C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005360                 ja      def_5374        ; jumptable 0000000000005374 default case
.text:0000000000005366                 lea     rdx, jpt_5374
.text:000000000000536D                 movsxd  rax, ds:(jpt_5374 - 0AE64h)[rdx+r12*4]
.text:0000000000005371                 add     rax, rdx
.text:0000000000005374                 jmp     rax             ; switch jump
.text:0000000000005374 ; ---------------------------------------------------------------------------
.text:0000000000005376                 align 20h
.text:0000000000005380
.text:0000000000005380 loc_5380:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005380                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:0000000000005380                 mov     r9, [rbx+38h]   ; jumptable 0000000000005374 case 8
.text:0000000000005384                 mov     rax, [rbx+10h]
.text:0000000000005388                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000538F                 mov     r8, [rbx+8]
.text:0000000000005393                 mov     edx, 5          ; category
.text:0000000000005398                 xor     edi, edi        ; domainname
.text:000000000000539A                 mov     r13, [rbx+30h]
.text:000000000000539E                 mov     r12, [rbx+28h]
.text:00000000000053A2                 mov     [rsp+58h+var_48], r9
.text:00000000000053A7                 mov     r15, [rbx+20h]
.text:00000000000053AB                 mov     r14, [rbx+18h]
.text:00000000000053AF                 mov     [rsp+58h+var_58], rax
.text:00000000000053B3                 mov     [rsp+58h+var_50], r8
.text:00000000000053B8                 mov     rbx, [rbx]
.text:00000000000053BB                 call    _dcgettext
.text:00000000000053C0                 sub     rsp, 8
.text:00000000000053C4
.text:00000000000053C4 loc_53C4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000053C4                 mov     r9, [rsp+60h+var_48]
.text:00000000000053C9                 mov     rdx, rax
.text:00000000000053CC                 mov     rcx, rbx
.text:00000000000053CF                 mov     esi, 1
.text:00000000000053D4                 mov     rdi, rbp
.text:00000000000053D7                 xor     eax, eax
.text:00000000000053D9                 push    r9
.text:00000000000053DB                 push    r13
.text:00000000000053DD                 push    r12
.text:00000000000053DF                 push    r15
.text:00000000000053E1                 push    r14
.text:00000000000053E3                 mov     r9, [rsp+88h+var_58]
.text:00000000000053E8                 mov     r8, [rsp+88h+var_50]
.text:00000000000053ED                 call    ___fprintf_chk
.text:00000000000053F2                 add     rsp, 30h
.text:00000000000053F6
.text:00000000000053F6 loc_53F6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000053F6                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:00000000000053F6                 add     rsp, 28h        ; jumptable 0000000000005374 case 0
.text:00000000000053FA                 pop     rbx
.text:00000000000053FB                 pop     rbp
.text:00000000000053FC                 pop     r12
.text:00000000000053FE                 pop     r13
.text:0000000000005400                 pop     r14
.text:0000000000005402                 pop     r15
.text:0000000000005404                 retn
.text:0000000000005404 ; ---------------------------------------------------------------------------
.text:0000000000005405                 align 8
.text:0000000000005408
.text:0000000000005408 loc_5408:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005408                 mov     r8, rcx
.text:000000000000540B                 mov     rcx, rdx
.text:000000000000540E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005415                 mov     esi, 1
.text:000000000000541A                 xor     eax, eax
.text:000000000000541C                 call    ___fprintf_chk
.text:0000000000005421                 jmp     loc_530C
.text:0000000000005421 ; ---------------------------------------------------------------------------
.text:0000000000005426                 align 10h
.text:0000000000005430
.text:0000000000005430 loc_5430:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005430                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:0000000000005430                 mov     r10, [rbx+40h]  ; jumptable 0000000000005374 case 9
.text:0000000000005434                 mov     r9, [rbx+38h]
.text:0000000000005438                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000543F                 mov     rax, [rbx+10h]
.text:0000000000005443                 mov     r8, [rbx+8]
.text:0000000000005447                 mov     edx, 5          ; category
.text:000000000000544C                 mov     r13, [rbx+30h]
.text:0000000000005450                 mov     r12, [rbx+28h]
.text:0000000000005454                 mov     r15, [rbx+20h]
.text:0000000000005458                 mov     r14, [rbx+18h]
.text:000000000000545C                 mov     rbx, [rbx]
.text:000000000000545F                 mov     [rsp+58h+var_40], r10
.text:0000000000005464                 mov     [rsp+58h+var_48], r9
.text:0000000000005469                 mov     [rsp+58h+var_58], rax
.text:000000000000546D                 mov     [rsp+58h+var_50], r8
.text:0000000000005472
.text:0000000000005472 loc_5472:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005472                 xor     edi, edi        ; domainname
.text:0000000000005474                 call    _dcgettext
.text:0000000000005479                 mov     r10, [rsp+58h+var_40]
.text:000000000000547E                 push    r10
.text:0000000000005480                 jmp     loc_53C4
.text:0000000000005480 ; ---------------------------------------------------------------------------
.text:0000000000005485                 align 8
.text:0000000000005488
.text:0000000000005488 loc_5488:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005488                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:0000000000005488                 mov     rbx, [rbx]      ; jumptable 0000000000005374 case 1
.text:000000000000548B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005492                 mov     edx, 5          ; category
.text:0000000000005497                 xor     edi, edi        ; domainname
.text:0000000000005499                 call    _dcgettext
.text:000000000000549E                 add     rsp, 28h
.text:00000000000054A2                 mov     rcx, rbx
.text:00000000000054A5                 mov     rdi, rbp
.text:00000000000054A8                 pop     rbx
.text:00000000000054A9                 pop     rbp
.text:00000000000054AA                 pop     r12
.text:00000000000054AC                 pop     r13
.text:00000000000054AE                 pop     r14
.text:00000000000054B0                 pop     r15
.text:00000000000054B2                 mov     rdx, rax
.text:00000000000054B5                 mov     esi, 1
.text:00000000000054BA                 xor     eax, eax
.text:00000000000054BC                 jmp     ___fprintf_chk
.text:00000000000054BC ; ---------------------------------------------------------------------------
.text:00000000000054C1                 align 8
.text:00000000000054C8
.text:00000000000054C8 loc_54C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000054C8                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:00000000000054C8                 mov     r12, [rbx+8]    ; jumptable 0000000000005374 case 2
.text:00000000000054CC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000054D3                 mov     rbx, [rbx]
.text:00000000000054D6                 mov     edx, 5          ; category
.text:00000000000054DB                 xor     edi, edi        ; domainname
.text:00000000000054DD                 call    _dcgettext
.text:00000000000054E2                 add     rsp, 28h
.text:00000000000054E6                 mov     r8, r12
.text:00000000000054E9                 mov     rcx, rbx
.text:00000000000054EC                 mov     rdi, rbp
.text:00000000000054EF                 mov     rdx, rax
.text:00000000000054F2                 mov     esi, 1
.text:00000000000054F7                 pop     rbx
.text:00000000000054F8                 pop     rbp
.text:00000000000054F9                 pop     r12
.text:00000000000054FB                 pop     r13
.text:00000000000054FD                 pop     r14
.text:00000000000054FF                 pop     r15
.text:0000000000005501                 xor     eax, eax
.text:0000000000005503                 jmp     ___fprintf_chk
.text:0000000000005503 ; ---------------------------------------------------------------------------
.text:0000000000005508                 align 10h
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005510                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:0000000000005510                 mov     r13, [rbx+10h]  ; jumptable 0000000000005374 case 3
.text:0000000000005514                 mov     r12, [rbx+8]
.text:0000000000005518                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000551F                 mov     rbx, [rbx]
.text:0000000000005522                 mov     edx, 5          ; category
.text:0000000000005527                 xor     edi, edi        ; domainname
.text:0000000000005529                 call    _dcgettext
.text:000000000000552E                 add     rsp, 28h
.text:0000000000005532                 mov     r9, r13
.text:0000000000005535                 mov     r8, r12
.text:0000000000005538                 mov     rcx, rbx
.text:000000000000553B                 mov     rdi, rbp
.text:000000000000553E                 mov     rdx, rax
.text:0000000000005541                 pop     rbx
.text:0000000000005542                 pop     rbp
.text:0000000000005543                 pop     r12
.text:0000000000005545                 pop     r13
.text:0000000000005547                 pop     r14
.text:0000000000005549                 pop     r15
.text:000000000000554B                 mov     esi, 1
.text:0000000000005550                 xor     eax, eax
.text:0000000000005552                 jmp     ___fprintf_chk
.text:0000000000005552 ; ---------------------------------------------------------------------------
.text:0000000000005557                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005560                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:0000000000005560                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005374 case 4
.text:0000000000005567                 mov     edx, 5          ; category
.text:000000000000556C                 xor     edi, edi        ; domainname
.text:000000000000556E                 mov     r14, [rbx+18h]
.text:0000000000005572                 mov     r13, [rbx+10h]
.text:0000000000005576                 mov     r12, [rbx+8]
.text:000000000000557A                 mov     rbx, [rbx]
.text:000000000000557D                 call    _dcgettext
.text:0000000000005582                 sub     rsp, 8
.text:0000000000005586
.text:0000000000005586 loc_5586:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005586                 push    r14
.text:0000000000005588                 mov     rdx, rax
.text:000000000000558B                 mov     r9, r13
.text:000000000000558E                 mov     r8, r12
.text:0000000000005591                 mov     rcx, rbx
.text:0000000000005594                 mov     rdi, rbp
.text:0000000000005597                 mov     esi, 1
.text:000000000000559C                 xor     eax, eax
.text:000000000000559E                 call    ___fprintf_chk
.text:00000000000055A3                 pop     rax
.text:00000000000055A4                 pop     rdx
.text:00000000000055A5                 add     rsp, 28h
.text:00000000000055A9                 pop     rbx
.text:00000000000055AA                 pop     rbp
.text:00000000000055AB                 pop     r12
.text:00000000000055AD                 pop     r13
.text:00000000000055AF                 pop     r14
.text:00000000000055B1                 pop     r15
.text:00000000000055B3                 retn
.text:00000000000055B3 ; ---------------------------------------------------------------------------
.text:00000000000055B4                 align 8
.text:00000000000055B8
.text:00000000000055B8 loc_55B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000055B8                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:00000000000055B8                 mov     r15, [rbx+20h]  ; jumptable 0000000000005374 case 5
.text:00000000000055BC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000055C3                 mov     edx, 5          ; category
.text:00000000000055C8                 xor     edi, edi        ; domainname
.text:00000000000055CA                 mov     r14, [rbx+18h]
.text:00000000000055CE                 mov     r13, [rbx+10h]
.text:00000000000055D2                 mov     r12, [rbx+8]
.text:00000000000055D6                 mov     rbx, [rbx]
.text:00000000000055D9                 call    _dcgettext
.text:00000000000055DE                 push    r15
.text:00000000000055E0                 jmp     short loc_5586
.text:00000000000055E0 ; ---------------------------------------------------------------------------
.text:00000000000055E2                 align 8
.text:00000000000055E8
.text:00000000000055E8 loc_55E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000055E8                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:00000000000055E8                 mov     r8, [rbx+8]     ; jumptable 0000000000005374 case 6
.text:00000000000055EC                 mov     r12, [rbx+28h]
.text:00000000000055F0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000055F7                 mov     r15, [rbx+20h]
.text:00000000000055FB                 mov     r14, [rbx+18h]
.text:00000000000055FF                 mov     edx, 5          ; category
.text:0000000000005604                 mov     r13, [rbx+10h]
.text:0000000000005608                 xor     edi, edi        ; domainname
.text:000000000000560A                 mov     rbx, [rbx]
.text:000000000000560D                 mov     [rsp+58h+var_58], r8
.text:0000000000005611                 call    _dcgettext
.text:0000000000005616                 sub     rsp, 8
.text:000000000000561A                 mov     r9, r13
.text:000000000000561D                 push    r12
.text:000000000000561F                 push    r15
.text:0000000000005621                 push    r14
.text:0000000000005623
.text:0000000000005623 loc_5623:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005623                 mov     r8, [rsp+78h+var_58]
.text:0000000000005628                 mov     rcx, rbx
.text:000000000000562B                 mov     rdx, rax
.text:000000000000562E                 mov     rdi, rbp
.text:0000000000005631                 mov     esi, 1
.text:0000000000005636                 xor     eax, eax
.text:0000000000005638                 call    ___fprintf_chk
.text:000000000000563D                 add     rsp, 20h
.text:0000000000005641                 add     rsp, 28h
.text:0000000000005645                 pop     rbx
.text:0000000000005646                 pop     rbp
.text:0000000000005647                 pop     r12
.text:0000000000005649                 pop     r13
.text:000000000000564B                 pop     r14
.text:000000000000564D                 pop     r15
.text:000000000000564F                 retn
.text:0000000000005650 ; ---------------------------------------------------------------------------
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005650                                         ; DATA XREF: .rodata:jpt_5374↓o
.text:0000000000005650                 mov     r9, [rbx+10h]   ; jumptable 0000000000005374 case 7
.text:0000000000005654                 mov     r13, [rbx+30h]
.text:0000000000005658                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000565F                 mov     r12, [rbx+28h]
.text:0000000000005663                 mov     r15, [rbx+20h]
.text:0000000000005667                 mov     edx, 5          ; category
.text:000000000000566C                 mov     r14, [rbx+18h]
.text:0000000000005670                 mov     r8, [rbx+8]
.text:0000000000005674                 xor     edi, edi        ; domainname
.text:0000000000005676                 mov     [rsp+58h+var_50], r9
.text:000000000000567B                 mov     rbx, [rbx]
.text:000000000000567E                 mov     [rsp+58h+var_58], r8
.text:0000000000005682                 call    _dcgettext
.text:0000000000005687                 push    r13
.text:0000000000005689                 push    r12
.text:000000000000568B                 push    r15
.text:000000000000568D                 push    r14
.text:000000000000568F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005694                 jmp     short loc_5623
.text:0000000000005694 ; ---------------------------------------------------------------------------
.text:0000000000005696                 align 20h
.text:00000000000056A0
.text:00000000000056A0 def_5374:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000056A0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005374 default case
.text:00000000000056A4                 mov     r9, [rbx+38h]
.text:00000000000056A8                 mov     edx, 5
.text:00000000000056AD                 mov     rax, [rbx+10h]
.text:00000000000056B1                 mov     r8, [rbx+8]
.text:00000000000056B5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000056BC                 mov     r13, [rbx+30h]
.text:00000000000056C0                 mov     r12, [rbx+28h]
.text:00000000000056C4                 mov     r15, [rbx+20h]
.text:00000000000056C8                 mov     r14, [rbx+18h]
.text:00000000000056CC                 mov     [rsp+58h+var_40], r10
.text:00000000000056D1                 mov     [rsp+58h+var_48], r9
.text:00000000000056D6                 mov     [rsp+58h+var_58], rax
.text:00000000000056DA                 mov     [rsp+58h+var_50], r8
.text:00000000000056DF                 mov     rbx, [rbx]
.text:00000000000056E2                 jmp     loc_5472
.text:00000000000056E2 ; } // starts at 52D0
.text:00000000000056E2 version_etc_arn endp
.text:00000000000056E2
.text:00000000000056E2 ; ---------------------------------------------------------------------------
.text:00000000000056E7                 align 10h
.text:00000000000056F0
.text:00000000000056F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056F0
.text:00000000000056F0 ; Attributes: info_from_lumina
.text:00000000000056F0
.text:00000000000056F0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000056F0                 public version_etc_ar
.text:00000000000056F0 version_etc_ar  proc near
.text:00000000000056F0 ; __unwind {
.text:00000000000056F0                 xor     r9d, r9d
.text:00000000000056F3                 cmp     qword ptr [r8], 0
.text:00000000000056F7                 jz      short loc_570B
.text:00000000000056F9                 nop     dword ptr [rax+00000000h]
.text:0000000000005700
.text:0000000000005700 loc_5700:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005700                 add     r9, 1
.text:0000000000005704                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005709                 jnz     short loc_5700
.text:000000000000570B
.text:000000000000570B loc_570B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000570B                 jmp     version_etc_arn
.text:000000000000570B ; } // starts at 56F0
.text:000000000000570B version_etc_ar  endp
.text:000000000000570B
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710 ; Attributes: info_from_lumina
.text:0000000000005710
.text:0000000000005710 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005710                 public version_etc_va
.text:0000000000005710 version_etc_va  proc near
.text:0000000000005710
.text:0000000000005710 authtab         = qword ptr -68h
.text:0000000000005710 var_10          = qword ptr -10h
.text:0000000000005710
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 sub     rsp, 68h
.text:0000000000005714                 mov     r10, r8
.text:0000000000005717                 xor     r9d, r9d
.text:000000000000571A                 mov     rax, fs:28h
.text:0000000000005723                 mov     [rsp+68h+var_10], rax
.text:0000000000005728                 xor     eax, eax
.text:000000000000572A                 mov     r8, rsp
.text:000000000000572D                 nop     dword ptr [rax]
.text:0000000000005730
.text:0000000000005730 loc_5730:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005730                 mov     eax, [r10]
.text:0000000000005733                 cmp     eax, 2Fh ; '/'
.text:0000000000005736                 ja      short loc_577A
.text:0000000000005738                 mov     r11d, eax
.text:000000000000573B                 add     r11, [r10+10h]
.text:000000000000573F                 add     eax, 8
.text:0000000000005742                 mov     [r10], eax
.text:0000000000005745
.text:0000000000005745 loc_5745:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005745                 mov     rax, [r11]
.text:0000000000005748                 test    rax, rax
.text:000000000000574B                 mov     [r8+r9*8], rax
.text:000000000000574F                 jz      short loc_575B
.text:0000000000005751                 add     r9, 1
.text:0000000000005755                 cmp     r9, 0Ah
.text:0000000000005759                 jnz     short loc_5730
.text:000000000000575B
.text:000000000000575B loc_575B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000575B                 call    version_etc_arn
.text:0000000000005760                 mov     rax, [rsp+68h+var_10]
.text:0000000000005765                 xor     rax, fs:28h
.text:000000000000576E                 jnz     short loc_5775
.text:0000000000005770                 add     rsp, 68h
.text:0000000000005774                 retn
.text:0000000000005775 ; ---------------------------------------------------------------------------
.text:0000000000005775
.text:0000000000005775 loc_5775:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005775                 call    ___stack_chk_fail
.text:000000000000577A ; ---------------------------------------------------------------------------
.text:000000000000577A
.text:000000000000577A loc_577A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000577A                 mov     r11, [r10+8]
.text:000000000000577E                 lea     rax, [r11+8]
.text:0000000000005782                 mov     [r10+8], rax
.text:0000000000005786                 jmp     short loc_5745
.text:0000000000005786 ; } // starts at 5710
.text:0000000000005786 version_etc_va  endp
.text:0000000000005786
.text:0000000000005786 ; ---------------------------------------------------------------------------
.text:0000000000005788                 align 10h
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790 ; Attributes: info_from_lumina
.text:0000000000005790
.text:0000000000005790 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005790                 public version_etc
.text:0000000000005790 version_etc     proc near               ; CODE XREF: main+180↑p
.text:0000000000005790
.text:0000000000005790 var_C0          = dword ptr -0C0h
.text:0000000000005790 var_B8          = qword ptr -0B8h
.text:0000000000005790 var_B0          = qword ptr -0B0h
.text:0000000000005790 var_A8          = byte ptr -0A8h
.text:0000000000005790 var_50          = qword ptr -50h
.text:0000000000005790 var_48          = byte ptr -48h
.text:0000000000005790 var_28          = qword ptr -28h
.text:0000000000005790 var_20          = qword ptr -20h
.text:0000000000005790 arg_0           = byte ptr  8
.text:0000000000005790
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 push    rbp
.text:0000000000005791                 push    rbx
.text:0000000000005792                 mov     r10d, 20h ; ' '
.text:0000000000005798                 xor     r11d, r11d
.text:000000000000579B                 sub     rsp, 0B8h
.text:00000000000057A2                 mov     rax, fs:28h
.text:00000000000057AB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000057B0                 xor     eax, eax
.text:00000000000057B2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000057BA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000057C2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000057CA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000057CF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000057D7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000057DF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000057E4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000057EC                 xor     r9d, r9d
.text:00000000000057EF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000057F4                 mov     rbp, rax
.text:00000000000057F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005800
.text:0000000000005800 loc_5800:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005800                 cmp     r10d, 2Fh ; '/'
.text:0000000000005804                 ja      short loc_585C
.text:0000000000005806                 mov     eax, r10d
.text:0000000000005809                 mov     r11d, 1
.text:000000000000580F                 add     r10d, 8
.text:0000000000005813                 add     rax, rbp
.text:0000000000005816
.text:0000000000005816 loc_5816:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005816                 mov     rax, [rax]
.text:0000000000005819                 test    rax, rax
.text:000000000000581C                 mov     [r8+r9*8], rax
.text:0000000000005820                 jz      short loc_582C
.text:0000000000005822                 add     r9, 1
.text:0000000000005826                 cmp     r9, 0Ah
.text:000000000000582A                 jnz     short loc_5800
.text:000000000000582C
.text:000000000000582C loc_582C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000582C                 test    r11b, r11b
.text:000000000000582F                 jnz     short loc_5855
.text:0000000000005831
.text:0000000000005831 loc_5831:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005831                 call    version_etc_arn
.text:0000000000005836                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000583B                 xor     rax, fs:28h
.text:0000000000005844                 jnz     short loc_5850
.text:0000000000005846                 add     rsp, 0B8h
.text:000000000000584D                 pop     rbx
.text:000000000000584E                 pop     rbp
.text:000000000000584F                 retn
.text:0000000000005850 ; ---------------------------------------------------------------------------
.text:0000000000005850
.text:0000000000005850 loc_5850:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005850                 call    ___stack_chk_fail
.text:0000000000005855 ; ---------------------------------------------------------------------------
.text:0000000000005855
.text:0000000000005855 loc_5855:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005855                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000585A                 jmp     short loc_5831
.text:000000000000585C ; ---------------------------------------------------------------------------
.text:000000000000585C
.text:000000000000585C loc_585C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000585C                 mov     rax, rbx
.text:000000000000585F                 add     rbx, 8
.text:0000000000005863                 jmp     short loc_5816
.text:0000000000005863 ; } // starts at 5790
.text:0000000000005863 version_etc     endp
.text:0000000000005863
.text:0000000000005863 ; ---------------------------------------------------------------------------
.text:0000000000005865                 align 10h
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870 ; Attributes: info_from_lumina
.text:0000000000005870
.text:0000000000005870 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005870                 public emit_bug_reporting_address
.text:0000000000005870 emit_bug_reporting_address proc near
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 push    rbx
.text:0000000000005871                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005878                 mov     edx, 5          ; category
.text:000000000000587D                 xor     edi, edi        ; domainname
.text:000000000000587F                 call    _dcgettext
.text:0000000000005884                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000588B                 mov     rsi, rax
.text:000000000000588E                 mov     edi, 1
.text:0000000000005893                 xor     eax, eax
.text:0000000000005895                 call    ___printf_chk
.text:000000000000589A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000058A1                 mov     edx, 5          ; category
.text:00000000000058A6                 xor     edi, edi        ; domainname
.text:00000000000058A8                 call    _dcgettext
.text:00000000000058AD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000058B4                 lea     rdx, unk_9C80
.text:00000000000058BB                 mov     rsi, rax
.text:00000000000058BE                 mov     edi, 1
.text:00000000000058C3                 xor     eax, eax
.text:00000000000058C5                 call    ___printf_chk
.text:00000000000058CA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000058D1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000058D8                 xor     edi, edi        ; domainname
.text:00000000000058DA                 mov     edx, 5          ; category
.text:00000000000058DF                 call    _dcgettext
.text:00000000000058E4                 mov     rsi, rbx        ; stream
.text:00000000000058E7                 mov     rdi, rax        ; s
.text:00000000000058EA                 pop     rbx
.text:00000000000058EB                 jmp     _fputs_unlocked
.text:00000000000058EB ; } // starts at 5870
.text:00000000000058EB emit_bug_reporting_address endp
.text:00000000000058EB
.text:00000000000058F0
.text:00000000000058F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058F0
.text:00000000000058F0
.text:00000000000058F0                 public xmalloc
.text:00000000000058F0 xmalloc         proc near               ; CODE XREF: mode_compile+7B↑p
.text:00000000000058F0                                         ; mode_compile+34A↑p ...
.text:00000000000058F0 ; __unwind {
.text:00000000000058F0                 push    rbx
.text:00000000000058F1                 mov     rbx, rdi
.text:00000000000058F4                 call    _malloc
.text:00000000000058F9                 test    rax, rax
.text:00000000000058FC                 jnz     short loc_5903
.text:00000000000058FE                 test    rbx, rbx
.text:0000000000005901                 jnz     short loc_5905
.text:0000000000005903
.text:0000000000005903 loc_5903:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005903                 pop     rbx
.text:0000000000005904                 retn
.text:0000000000005905 ; ---------------------------------------------------------------------------
.text:0000000000005905
.text:0000000000005905 loc_5905:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005905                 call    xalloc_die
.text:0000000000005905 ; } // starts at 58F0
.text:0000000000005905 xmalloc         endp
.text:0000000000005905
.text:0000000000005905 ; ---------------------------------------------------------------------------
.text:000000000000590A                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910 ; Attributes: info_from_lumina
.text:0000000000005910
.text:0000000000005910 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005910                 public xnmalloc
.text:0000000000005910 xnmalloc        proc near
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 mov     rax, rdi
.text:0000000000005913                 mul     rsi
.text:0000000000005916                 mov     rdi, rax
.text:0000000000005919                 seto    al
.text:000000000000591C                 test    rdi, rdi
.text:000000000000591F                 js      short loc_592B
.text:0000000000005921                 movzx   eax, al
.text:0000000000005924                 test    rax, rax
.text:0000000000005927                 jnz     short loc_592B
.text:0000000000005929                 jmp     short xmalloc
.text:000000000000592B ; ---------------------------------------------------------------------------
.text:000000000000592B
.text:000000000000592B loc_592B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000592B                                         ; xnmalloc+17↑j
.text:000000000000592B                 sub     rsp, 8
.text:000000000000592F                 call    xalloc_die
.text:000000000000592F ; } // starts at 5910
.text:000000000000592F xnmalloc        endp
.text:000000000000592F
.text:000000000000592F ; ---------------------------------------------------------------------------
.text:0000000000005934                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940
.text:0000000000005940                 public xcharalloc
.text:0000000000005940 xcharalloc      proc near
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 jmp     short xmalloc
.text:0000000000005940 ; } // starts at 5940
.text:0000000000005940 xcharalloc      endp
.text:0000000000005940
.text:0000000000005940 ; ---------------------------------------------------------------------------
.text:0000000000005942                 align 10h
.text:0000000000005950
.text:0000000000005950 ; =============== S U B R O U T I N E =======================================
.text:0000000000005950
.text:0000000000005950 ; Attributes: info_from_lumina
.text:0000000000005950
.text:0000000000005950 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005950                 public xrealloc
.text:0000000000005950 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005950                                         ; quotearg_n_options+182↑p ...
.text:0000000000005950 ; __unwind {
.text:0000000000005950                 test    rsi, rsi
.text:0000000000005953                 push    rbx
.text:0000000000005954                 mov     rbx, rsi
.text:0000000000005957                 jnz     short loc_595E
.text:0000000000005959                 test    rdi, rdi
.text:000000000000595C                 jnz     short loc_5978
.text:000000000000595E
.text:000000000000595E loc_595E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000595E                 mov     rsi, rbx        ; size
.text:0000000000005961                 call    _realloc
.text:0000000000005966                 test    rax, rax
.text:0000000000005969                 jnz     short loc_5970
.text:000000000000596B                 test    rbx, rbx
.text:000000000000596E                 jnz     short loc_5981
.text:0000000000005970
.text:0000000000005970 loc_5970:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005970                 pop     rbx
.text:0000000000005971                 retn
.text:0000000000005971 ; ---------------------------------------------------------------------------
.text:0000000000005972                 align 8
.text:0000000000005978
.text:0000000000005978 loc_5978:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005978                 call    free
.text:000000000000597D                 xor     eax, eax
.text:000000000000597F                 pop     rbx
.text:0000000000005980                 retn
.text:0000000000005981 ; ---------------------------------------------------------------------------
.text:0000000000005981
.text:0000000000005981 loc_5981:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005981                 call    xalloc_die
.text:0000000000005981 ; } // starts at 5950
.text:0000000000005981 xrealloc        endp
.text:0000000000005981
.text:0000000000005981 ; ---------------------------------------------------------------------------
.text:0000000000005986                 align 10h
.text:0000000000005990
.text:0000000000005990 ; =============== S U B R O U T I N E =======================================
.text:0000000000005990
.text:0000000000005990 ; Attributes: info_from_lumina
.text:0000000000005990
.text:0000000000005990 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005990                 public xnrealloc
.text:0000000000005990 xnrealloc       proc near
.text:0000000000005990 ; __unwind {
.text:0000000000005990                 mov     rax, rsi
.text:0000000000005993                 mul     rdx
.text:0000000000005996                 mov     rsi, rax
.text:0000000000005999                 seto    al
.text:000000000000599C                 test    rsi, rsi
.text:000000000000599F                 js      short loc_59AB
.text:00000000000059A1                 movzx   eax, al
.text:00000000000059A4                 test    rax, rax
.text:00000000000059A7                 jnz     short loc_59AB
.text:00000000000059A9                 jmp     short xrealloc
.text:00000000000059AB ; ---------------------------------------------------------------------------
.text:00000000000059AB
.text:00000000000059AB loc_59AB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000059AB                                         ; xnrealloc+17↑j
.text:00000000000059AB                 sub     rsp, 8
.text:00000000000059AF                 call    xalloc_die
.text:00000000000059AF ; } // starts at 5990
.text:00000000000059AF xnrealloc       endp
.text:00000000000059AF
.text:00000000000059AF ; ---------------------------------------------------------------------------
.text:00000000000059B4                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0 ; Attributes: info_from_lumina
.text:00000000000059C0
.text:00000000000059C0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000059C0                 public x2nrealloc
.text:00000000000059C0 x2nrealloc      proc near
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 test    rdi, rdi
.text:00000000000059C3                 mov     r9, rdx
.text:00000000000059C6                 mov     rcx, [rsi]
.text:00000000000059C9                 jz      short loc_5A00
.text:00000000000059CB                 xor     edx, edx
.text:00000000000059CD                 mov     rax, 5555555555555554h
.text:00000000000059D7                 div     r9
.text:00000000000059DA                 cmp     rax, rcx
.text:00000000000059DD                 jbe     short loc_5A1B
.text:00000000000059DF                 mov     rax, rcx
.text:00000000000059E2                 shr     rax, 1
.text:00000000000059E5                 lea     rcx, [rax+rcx+1]
.text:00000000000059EA
.text:00000000000059EA loc_59EA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000059EA                 mov     [rsi], rcx
.text:00000000000059ED                 imul    rcx, r9
.text:00000000000059F1                 mov     rsi, rcx
.text:00000000000059F4                 jmp     xrealloc
.text:00000000000059F4 ; ---------------------------------------------------------------------------
.text:00000000000059F9                 align 20h
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005A00                 test    rcx, rcx
.text:0000000000005A03                 jz      short loc_5A28
.text:0000000000005A05
.text:0000000000005A05 loc_5A05:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005A05                 mov     rax, rcx
.text:0000000000005A08                 mul     r9
.text:0000000000005A0B                 seto    dl
.text:0000000000005A0E                 test    rax, rax
.text:0000000000005A11                 movzx   edx, dl
.text:0000000000005A14                 js      short loc_5A1B
.text:0000000000005A16                 test    rdx, rdx
.text:0000000000005A19                 jz      short loc_59EA
.text:0000000000005A1B
.text:0000000000005A1B loc_5A1B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000005A1B                                         ; x2nrealloc+54↑j
.text:0000000000005A1B                 sub     rsp, 8
.text:0000000000005A1F                 call    xalloc_die
.text:0000000000005A1F ; ---------------------------------------------------------------------------
.text:0000000000005A24                 align 8
.text:0000000000005A28
.text:0000000000005A28 loc_5A28:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005A28                 xor     edx, edx
.text:0000000000005A2A                 mov     eax, 80h
.text:0000000000005A2F                 xor     r8d, r8d
.text:0000000000005A32                 div     r9
.text:0000000000005A35                 test    rax, rax
.text:0000000000005A38                 setz    r8b
.text:0000000000005A3C                 lea     rcx, [r8+rax]
.text:0000000000005A40                 jmp     short loc_5A05
.text:0000000000005A40 ; } // starts at 59C0
.text:0000000000005A40 x2nrealloc      endp
.text:0000000000005A40
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A42                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50 ; Attributes: info_from_lumina
.text:0000000000005A50
.text:0000000000005A50 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005A50                 public x2realloc
.text:0000000000005A50 x2realloc       proc near               ; CODE XREF: main+298↑p
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 test    rdi, rdi
.text:0000000000005A53                 mov     rax, [rsi]
.text:0000000000005A56                 jz      short loc_5A80
.text:0000000000005A58                 mov     rdx, 5555555555555553h
.text:0000000000005A62                 cmp     rax, rdx
.text:0000000000005A65                 ja      short loc_5A91
.text:0000000000005A67                 mov     rdx, rax
.text:0000000000005A6A                 shr     rdx, 1
.text:0000000000005A6D                 lea     rax, [rdx+rax+1]
.text:0000000000005A72
.text:0000000000005A72 loc_5A72:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005A72                 mov     [rsi], rax
.text:0000000000005A75                 mov     rsi, rax
.text:0000000000005A78                 jmp     xrealloc
.text:0000000000005A78 ; ---------------------------------------------------------------------------
.text:0000000000005A7D                 align 20h
.text:0000000000005A80
.text:0000000000005A80 loc_5A80:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005A80                 test    rax, rax
.text:0000000000005A83                 mov     edx, 80h
.text:0000000000005A88                 cmovz   rax, rdx
.text:0000000000005A8C                 test    rax, rax
.text:0000000000005A8F                 jns     short loc_5A72
.text:0000000000005A91
.text:0000000000005A91 loc_5A91:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005A91                 sub     rsp, 8
.text:0000000000005A95                 call    xalloc_die
.text:0000000000005A95 ; } // starts at 5A50
.text:0000000000005A95 x2realloc       endp
.text:0000000000005A95
.text:0000000000005A95 ; ---------------------------------------------------------------------------
.text:0000000000005A9A                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0
.text:0000000000005AA0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005AA0                 public xzalloc
.text:0000000000005AA0 xzalloc         proc near
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 push    rbx
.text:0000000000005AA1                 mov     rbx, rdi
.text:0000000000005AA4                 call    xmalloc
.text:0000000000005AA9                 mov     rdx, rbx        ; n
.text:0000000000005AAC                 xor     esi, esi        ; c
.text:0000000000005AAE                 mov     rdi, rax        ; s
.text:0000000000005AB1                 pop     rbx
.text:0000000000005AB2                 jmp     _memset
.text:0000000000005AB2 ; } // starts at 5AA0
.text:0000000000005AB2 xzalloc         endp
.text:0000000000005AB2
.text:0000000000005AB2 ; ---------------------------------------------------------------------------
.text:0000000000005AB7                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0 ; Attributes: info_from_lumina
.text:0000000000005AC0
.text:0000000000005AC0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005AC0                 public xcalloc
.text:0000000000005AC0 xcalloc         proc near
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 mov     rax, rdi
.text:0000000000005AC3                 sub     rsp, 8
.text:0000000000005AC7                 mul     rsi
.text:0000000000005ACA                 seto    dl
.text:0000000000005ACD                 test    rax, rax
.text:0000000000005AD0                 js      short loc_5AE9
.text:0000000000005AD2                 movzx   edx, dl
.text:0000000000005AD5                 test    rdx, rdx
.text:0000000000005AD8                 jnz     short loc_5AE9
.text:0000000000005ADA                 call    _calloc
.text:0000000000005ADF                 test    rax, rax
.text:0000000000005AE2                 jz      short loc_5AE9
.text:0000000000005AE4                 add     rsp, 8
.text:0000000000005AE8                 retn
.text:0000000000005AE9 ; ---------------------------------------------------------------------------
.text:0000000000005AE9
.text:0000000000005AE9 loc_5AE9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005AE9                                         ; xcalloc+18↑j ...
.text:0000000000005AE9                 call    xalloc_die
.text:0000000000005AE9 ; } // starts at 5AC0
.text:0000000000005AE9 xcalloc         endp
.text:0000000000005AE9
.text:0000000000005AE9 ; ---------------------------------------------------------------------------
.text:0000000000005AEE                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0 ; Attributes: info_from_lumina
.text:0000000000005AF0
.text:0000000000005AF0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005AF0                 public xmemdup
.text:0000000000005AF0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005AF0                                         ; xstrdup+11↓j
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 push    rbp
.text:0000000000005AF1                 push    rbx
.text:0000000000005AF2                 mov     rbp, rdi
.text:0000000000005AF5                 mov     rdi, rsi
.text:0000000000005AF8                 mov     rbx, rsi
.text:0000000000005AFB                 sub     rsp, 8
.text:0000000000005AFF                 call    xmalloc
.text:0000000000005B04                 add     rsp, 8
.text:0000000000005B08                 mov     rdx, rbx        ; n
.text:0000000000005B0B                 mov     rsi, rbp        ; src
.text:0000000000005B0E                 pop     rbx
.text:0000000000005B0F                 pop     rbp
.text:0000000000005B10                 mov     rdi, rax        ; dest
.text:0000000000005B13                 jmp     _memcpy
.text:0000000000005B13 ; } // starts at 5AF0
.text:0000000000005B13 xmemdup         endp
.text:0000000000005B13
.text:0000000000005B13 ; ---------------------------------------------------------------------------
.text:0000000000005B18                 align 20h
.text:0000000000005B20
.text:0000000000005B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B20
.text:0000000000005B20
.text:0000000000005B20 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005B20                 public xstrdup
.text:0000000000005B20 xstrdup         proc near
.text:0000000000005B20 ; __unwind {
.text:0000000000005B20                 push    rbx
.text:0000000000005B21                 mov     rbx, rdi
.text:0000000000005B24                 call    _strlen
.text:0000000000005B29                 mov     rdi, rbx        ; src
.text:0000000000005B2C                 lea     rsi, [rax+1]    ; n
.text:0000000000005B30                 pop     rbx
.text:0000000000005B31                 jmp     short xmemdup
.text:0000000000005B31 ; } // starts at 5B20
.text:0000000000005B31 xstrdup         endp
.text:0000000000005B31
.text:0000000000005B31 ; ---------------------------------------------------------------------------
.text:0000000000005B33                 align 20h
.text:0000000000005B40
.text:0000000000005B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B40
.text:0000000000005B40 ; Attributes: noreturn info_from_lumina
.text:0000000000005B40
.text:0000000000005B40 ; void __cdecl xalloc_die()
.text:0000000000005B40                 public xalloc_die
.text:0000000000005B40 xalloc_die      proc near               ; CODE XREF: mode_compile:loc_32E9↑p
.text:0000000000005B40                                         ; quotearg_n_options:loc_4A96↑p ...
.text:0000000000005B40 ; __unwind {
.text:0000000000005B40                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005B47                 sub     rsp, 8
.text:0000000000005B4B                 mov     edx, 5          ; category
.text:0000000000005B50                 xor     edi, edi        ; domainname
.text:0000000000005B52                 call    _dcgettext
.text:0000000000005B57                 mov     edi, cs:exit_failure ; status
.text:0000000000005B5D                 lea     rdx, aInvalidModeS+0Eh ; format
.text:0000000000005B64                 mov     rcx, rax
.text:0000000000005B67                 xor     esi, esi        ; errnum
.text:0000000000005B69                 xor     eax, eax
.text:0000000000005B6B                 call    _error
.text:0000000000005B70                 call    _abort
.text:0000000000005B70 ; } // starts at 5B40
.text:0000000000005B70 xalloc_die      endp
.text:0000000000005B70
.text:0000000000005B70 ; ---------------------------------------------------------------------------
.text:0000000000005B75                 align 20h
.text:0000000000005B80
.text:0000000000005B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B80
.text:0000000000005B80
.text:0000000000005B80                 public xfts_open
.text:0000000000005B80 xfts_open       proc near               ; CODE XREF: main+338↑p
.text:0000000000005B80 ; __unwind {
.text:0000000000005B80                 sub     rsp, 8
.text:0000000000005B84                 or      esi, 200h
.text:0000000000005B8A                 call    rpl_fts_open
.text:0000000000005B8F                 test    rax, rax
.text:0000000000005B92                 jz      short loc_5BA0
.text:0000000000005B94                 add     rsp, 8
.text:0000000000005B98                 retn
.text:0000000000005B98 ; ---------------------------------------------------------------------------
.text:0000000000005B99                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: xfts_open+12↑j
.text:0000000000005BA0                 call    ___errno_location
.text:0000000000005BA5                 cmp     dword ptr [rax], 16h
.text:0000000000005BA8                 jz      short loc_5BB0
.text:0000000000005BAA                 call    xalloc_die
.text:0000000000005BAA ; ---------------------------------------------------------------------------
.text:0000000000005BAF                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 loc_5BB0:                               ; CODE XREF: xfts_open+28↑j
.text:0000000000005BB0                 lea     rcx, __PRETTY_FUNCTION___3434 ; "xfts_open"
.text:0000000000005BB7                 lea     rsi, file       ; "../coreutils-8.31/lib/xfts.c"
.text:0000000000005BBE                 lea     rdi, assertion  ; "errno != EINVAL"
.text:0000000000005BC5                 mov     edx, 29h ; ')'  ; line
.text:0000000000005BCA                 call    ___assert_fail
.text:0000000000005BCA ; } // starts at 5B80
.text:0000000000005BCA xfts_open       endp
.text:0000000000005BCA
.text:0000000000005BCA ; ---------------------------------------------------------------------------
.text:0000000000005BCF                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0
.text:0000000000005BD0                 public cycle_warning_required
.text:0000000000005BD0 cycle_warning_required proc near        ; CODE XREF: main+562↑p
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 mov     edx, [rdi+48h]
.text:0000000000005BD3                 mov     eax, 1
.text:0000000000005BD8                 and     edx, 11h
.text:0000000000005BDB                 cmp     edx, 10h
.text:0000000000005BDE                 jz      short locret_5BE7
.text:0000000000005BE0                 xor     eax, eax
.text:0000000000005BE2                 cmp     edx, 11h
.text:0000000000005BE5                 jz      short loc_5BF0
.text:0000000000005BE7
.text:0000000000005BE7 locret_5BE7:                            ; CODE XREF: cycle_warning_required+E↑j
.text:0000000000005BE7                 rep retn
.text:0000000000005BE7 ; ---------------------------------------------------------------------------
.text:0000000000005BE9                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: cycle_warning_required+15↑j
.text:0000000000005BF0                 cmp     qword ptr [rsi+58h], 0
.text:0000000000005BF5                 setnz   al
.text:0000000000005BF8                 retn
.text:0000000000005BF8 ; } // starts at 5BD0
.text:0000000000005BF8 cycle_warning_required endp
.text:0000000000005BF8
.text:0000000000005BF8 ; ---------------------------------------------------------------------------
.text:0000000000005BF9                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00
.text:0000000000005C00 AD_compare      proc near               ; DATA XREF: setup_dir_isra_4+13↓o
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 xor     eax, eax
.text:0000000000005C02                 mov     rdx, [rsi+8]
.text:0000000000005C06                 cmp     [rdi+8], rdx
.text:0000000000005C0A                 jz      short loc_5C10
.text:0000000000005C0C                 rep retn
.text:0000000000005C0C ; ---------------------------------------------------------------------------
.text:0000000000005C0E                 align 10h
.text:0000000000005C10
.text:0000000000005C10 loc_5C10:                               ; CODE XREF: AD_compare+A↑j
.text:0000000000005C10                 mov     rax, [rsi]
.text:0000000000005C13                 cmp     [rdi], rax
.text:0000000000005C16                 setz    al
.text:0000000000005C19                 retn
.text:0000000000005C19 ; } // starts at 5C00
.text:0000000000005C19 AD_compare      endp
.text:0000000000005C19
.text:0000000000005C19 ; ---------------------------------------------------------------------------
.text:0000000000005C1A                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20 AD_hash         proc near               ; DATA XREF: setup_dir_isra_4+1A↓o
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 mov     rax, [rdi+8]
.text:0000000000005C24                 xor     edx, edx
.text:0000000000005C26                 div     rsi
.text:0000000000005C29                 mov     rax, rdx
.text:0000000000005C2C                 retn
.text:0000000000005C2C ; } // starts at 5C20
.text:0000000000005C2C AD_hash         endp
.text:0000000000005C2C
.text:0000000000005C2C ; ---------------------------------------------------------------------------
.text:0000000000005C2D                 align 10h
.text:0000000000005C30
.text:0000000000005C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C30
.text:0000000000005C30
.text:0000000000005C30 dev_type_hash   proc near               ; DATA XREF: filesystem_type+6E↓o
.text:0000000000005C30 ; __unwind {
.text:0000000000005C30                 mov     rax, [rdi]
.text:0000000000005C33                 xor     edx, edx
.text:0000000000005C35                 div     rsi
.text:0000000000005C38                 mov     rax, rdx
.text:0000000000005C3B                 retn
.text:0000000000005C3B ; } // starts at 5C30
.text:0000000000005C3B dev_type_hash   endp
.text:0000000000005C3B
.text:0000000000005C3B ; ---------------------------------------------------------------------------
.text:0000000000005C3C                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40
.text:0000000000005C40 dev_type_compare proc near              ; DATA XREF: filesystem_type+67↓o
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 mov     rax, [rsi]
.text:0000000000005C43                 cmp     [rdi], rax
.text:0000000000005C46                 setz    al
.text:0000000000005C49                 retn
.text:0000000000005C49 ; } // starts at 5C40
.text:0000000000005C49 dev_type_compare endp
.text:0000000000005C49
.text:0000000000005C49 ; ---------------------------------------------------------------------------
.text:0000000000005C4A                 align 10h
.text:0000000000005C50
.text:0000000000005C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C50
.text:0000000000005C50
.text:0000000000005C50 fts_compare_ino proc near               ; DATA XREF: fts_build:loc_6FF8↓o
.text:0000000000005C50 ; __unwind {
.text:0000000000005C50                 mov     rdx, [rdi]
.text:0000000000005C53                 mov     rax, [rsi]
.text:0000000000005C56                 mov     rax, [rax+80h]
.text:0000000000005C5D                 cmp     [rdx+80h], rax
.text:0000000000005C64                 jb      short loc_5C70
.text:0000000000005C66                 setnbe  al
.text:0000000000005C69                 movzx   eax, al
.text:0000000000005C6C                 retn
.text:0000000000005C6C ; ---------------------------------------------------------------------------
.text:0000000000005C6D                 align 10h
.text:0000000000005C70
.text:0000000000005C70 loc_5C70:                               ; CODE XREF: fts_compare_ino+14↑j
.text:0000000000005C70                 mov     eax, 0FFFFFFFFh
.text:0000000000005C75                 retn
.text:0000000000005C75 ; } // starts at 5C50
.text:0000000000005C75 fts_compare_ino endp
.text:0000000000005C75
.text:0000000000005C75 ; ---------------------------------------------------------------------------
.text:0000000000005C76                 align 20h
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80
.text:0000000000005C80 fts_stat        proc near               ; CODE XREF: fts_build+450↓p
.text:0000000000005C80                                         ; fts_build+607↓p ...
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 push    r12
.text:0000000000005C82                 push    rbp
.text:0000000000005C83                 mov     rbp, rsi
.text:0000000000005C86                 push    rbx
.text:0000000000005C87                 cmp     qword ptr [rbp+58h], 0
.text:0000000000005C8C                 lea     rbx, [rsi+78h]
.text:0000000000005C90                 mov     r12, rdi
.text:0000000000005C93                 mov     eax, [rdi+48h]
.text:0000000000005C96                 mov     rsi, [rsi+30h]  ; filename
.text:0000000000005C9A                 jnz     short loc_5D00
.text:0000000000005C9C                 test    al, 1
.text:0000000000005C9E                 jz      short loc_5D00
.text:0000000000005CA0
.text:0000000000005CA0 loc_5CA0:                               ; CODE XREF: fts_stat+82↓j
.text:0000000000005CA0                                         ; fts_stat+86↓j
.text:0000000000005CA0                 mov     rdx, rbx        ; stat_buf
.text:0000000000005CA3                 mov     edi, 1          ; ver
.text:0000000000005CA8                 call    ___xstat
.text:0000000000005CAD                 test    eax, eax
.text:0000000000005CAF                 jz      short loc_5D2B
.text:0000000000005CB1                 call    ___errno_location
.text:0000000000005CB6                 mov     r12, rax
.text:0000000000005CB9                 mov     eax, [rax]
.text:0000000000005CBB                 cmp     eax, 2
.text:0000000000005CBE                 jz      loc_5DD0
.text:0000000000005CC4
.text:0000000000005CC4 loc_5CC4:                               ; CODE XREF: fts_stat+147↓j
.text:0000000000005CC4                                         ; fts_stat+169↓j
.text:0000000000005CC4                 lea     rdi, [rbx+8]
.text:0000000000005CC8                 mov     [rbp+40h], eax
.text:0000000000005CCB                 mov     qword ptr [rbp+78h], 0
.text:0000000000005CD3                 mov     qword ptr [rbx+88h], 0
.text:0000000000005CDE                 xor     eax, eax
.text:0000000000005CE0                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000005CE4                 sub     rbx, rdi
.text:0000000000005CE7                 lea     ecx, [rbx+90h]
.text:0000000000005CED                 shr     ecx, 3
.text:0000000000005CF0                 rep stosq
.text:0000000000005CF3                 mov     eax, 0Ah
.text:0000000000005CF8
.text:0000000000005CF8 loc_5CF8:                               ; CODE XREF: fts_stat+116↓j
.text:0000000000005CF8                                         ; fts_stat+136↓j ...
.text:0000000000005CF8                 pop     rbx
.text:0000000000005CF9                 pop     rbp
.text:0000000000005CFA                 pop     r12
.text:0000000000005CFC                 retn
.text:0000000000005CFC ; ---------------------------------------------------------------------------
.text:0000000000005CFD                 align 20h
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: fts_stat+1A↑j
.text:0000000000005D00                                         ; fts_stat+1E↑j
.text:0000000000005D00                 test    al, 2
.text:0000000000005D02                 jnz     short loc_5CA0
.text:0000000000005D04                 test    dl, dl
.text:0000000000005D06                 jnz     short loc_5CA0
.text:0000000000005D08                 mov     rdx, rsi        ; filename
.text:0000000000005D0B                 mov     esi, [r12+2Ch]  ; fildes
.text:0000000000005D10                 mov     r8d, 100h       ; flag
.text:0000000000005D16                 mov     rcx, rbx        ; stat_buf
.text:0000000000005D19                 mov     edi, 1          ; ver
.text:0000000000005D1E                 call    ___fxstatat
.text:0000000000005D23                 test    eax, eax
.text:0000000000005D25                 jnz     loc_5DC0
.text:0000000000005D2B
.text:0000000000005D2B loc_5D2B:                               ; CODE XREF: fts_stat+2F↑j
.text:0000000000005D2B                 mov     eax, [rbp+90h]
.text:0000000000005D31                 and     eax, 0F000h
.text:0000000000005D36                 cmp     eax, 4000h
.text:0000000000005D3B                 jz      short loc_5D60
.text:0000000000005D3D                 cmp     eax, 0A000h
.text:0000000000005D42                 jz      loc_5E18
.text:0000000000005D48                 cmp     eax, 8000h
.text:0000000000005D4D                 setz    al
.text:0000000000005D50                 movzx   eax, al
.text:0000000000005D53                 pop     rbx
.text:0000000000005D54                 lea     eax, [rax+rax*4+3]
.text:0000000000005D58                 pop     rbp
.text:0000000000005D59                 pop     r12
.text:0000000000005D5B                 retn
.text:0000000000005D5B ; ---------------------------------------------------------------------------
.text:0000000000005D5C                 align 20h
.text:0000000000005D60
.text:0000000000005D60 loc_5D60:                               ; CODE XREF: fts_stat+BB↑j
.text:0000000000005D60                 mov     rax, [rbp+88h]
.text:0000000000005D67                 cmp     rax, 1
.text:0000000000005D6B                 jbe     loc_5DF0
.text:0000000000005D71                 cmp     qword ptr [rbp+58h], 0
.text:0000000000005D76                 jle     short loc_5DF0
.text:0000000000005D78                 test    byte ptr [r12+48h], 20h
.text:0000000000005D7E                 lea     rdx, [rax-2]
.text:0000000000005D82                 cmovz   rax, rdx
.text:0000000000005D86
.text:0000000000005D86 loc_5D86:                               ; CODE XREF: fts_stat+177↓j
.text:0000000000005D86                 cmp     byte ptr [rbp+108h], 2Eh ; '.'
.text:0000000000005D8D                 mov     [rbp+68h], rax
.text:0000000000005D91                 mov     eax, 1
.text:0000000000005D96                 jnz     loc_5CF8
.text:0000000000005D9C                 cmp     byte ptr [rbp+109h], 0
.text:0000000000005DA3                 jnz     loc_5E28
.text:0000000000005DA9
.text:0000000000005DA9 loc_5DA9:                               ; CODE XREF: fts_stat+1C0↓j
.text:0000000000005DA9                 cmp     qword ptr [rbp+58h], 1
.text:0000000000005DAE                 sbb     eax, eax
.text:0000000000005DB0                 and     eax, 0FFFFFFFCh
.text:0000000000005DB3                 add     eax, 5
.text:0000000000005DB6                 jmp     loc_5CF8
.text:0000000000005DB6 ; ---------------------------------------------------------------------------
.text:0000000000005DBB                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: fts_stat+A5↑j
.text:0000000000005DC0                 call    ___errno_location
.text:0000000000005DC5                 mov     eax, [rax]
.text:0000000000005DC7                 jmp     loc_5CC4
.text:0000000000005DC7 ; ---------------------------------------------------------------------------
.text:0000000000005DCC                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 loc_5DD0:                               ; CODE XREF: fts_stat+3E↑j
.text:0000000000005DD0                 mov     rsi, [rbp+30h]  ; filename
.text:0000000000005DD4                 mov     rdx, rbx        ; stat_buf
.text:0000000000005DD7                 mov     edi, 1          ; ver
.text:0000000000005DDC                 call    ___lxstat
.text:0000000000005DE1                 test    eax, eax
.text:0000000000005DE3                 jz      short loc_5E00
.text:0000000000005DE5                 mov     eax, [r12]
.text:0000000000005DE9                 jmp     loc_5CC4
.text:0000000000005DE9 ; ---------------------------------------------------------------------------
.text:0000000000005DEE                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: fts_stat+EB↑j
.text:0000000000005DF0                                         ; fts_stat+F6↑j
.text:0000000000005DF0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DF7                 jmp     short loc_5D86
.text:0000000000005DF7 ; ---------------------------------------------------------------------------
.text:0000000000005DF9                 align 20h
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: fts_stat+163↑j
.text:0000000000005E00                 mov     dword ptr [r12], 0
.text:0000000000005E08                 mov     eax, 0Dh
.text:0000000000005E0D                 jmp     loc_5CF8
.text:0000000000005E0D ; ---------------------------------------------------------------------------
.text:0000000000005E12                 align 8
.text:0000000000005E18
.text:0000000000005E18 loc_5E18:                               ; CODE XREF: fts_stat+C2↑j
.text:0000000000005E18                 mov     eax, 0Ch
.text:0000000000005E1D                 jmp     loc_5CF8
.text:0000000000005E1D ; ---------------------------------------------------------------------------
.text:0000000000005E22                 align 8
.text:0000000000005E28
.text:0000000000005E28 loc_5E28:                               ; CODE XREF: fts_stat+123↑j
.text:0000000000005E28                 mov     edx, [rbp+108h]
.text:0000000000005E2E                 and     edx, 0FFFF00h
.text:0000000000005E34                 cmp     edx, 2E00h
.text:0000000000005E3A                 jnz     loc_5CF8
.text:0000000000005E40                 jmp     loc_5DA9
.text:0000000000005E40 ; } // starts at 5C80
.text:0000000000005E40 fts_stat        endp
.text:0000000000005E40
.text:0000000000005E40 ; ---------------------------------------------------------------------------
.text:0000000000005E45                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50
.text:0000000000005E50 fts_sort        proc near               ; CODE XREF: fts_build+721↓p
.text:0000000000005E50                                         ; fts_build+80E↓p ...
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 push    r13
.text:0000000000005E52                 push    r12
.text:0000000000005E54                 mov     r12, rdx
.text:0000000000005E57                 push    rbp
.text:0000000000005E58                 push    rbx
.text:0000000000005E59                 mov     rbp, rdi
.text:0000000000005E5C                 mov     rbx, rsi
.text:0000000000005E5F                 sub     rsp, 8
.text:0000000000005E63                 cmp     [rbp+38h], rdx
.text:0000000000005E67                 mov     r13, [rdi+40h]
.text:0000000000005E6B                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000005E6F                 jnb     short loc_5EA5
.text:0000000000005E71                 lea     rsi, [rdx+28h]
.text:0000000000005E75                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:0000000000005E7F                 cmp     rsi, rax
.text:0000000000005E82                 mov     [rbp+38h], rsi
.text:0000000000005E86                 ja      loc_5F24
.text:0000000000005E8C                 shl     rsi, 3          ; size
.text:0000000000005E90                 call    _realloc
.text:0000000000005E95                 test    rax, rax
.text:0000000000005E98                 mov     rdi, rax        ; base
.text:0000000000005E9B                 jz      loc_5F20
.text:0000000000005EA1                 mov     [rbp+10h], rax
.text:0000000000005EA5
.text:0000000000005EA5 loc_5EA5:                               ; CODE XREF: fts_sort+1F↑j
.text:0000000000005EA5                 test    rbx, rbx
.text:0000000000005EA8                 jz      short loc_5EC1
.text:0000000000005EAA                 mov     rdx, rdi
.text:0000000000005EAD                 nop     dword ptr [rax]
.text:0000000000005EB0
.text:0000000000005EB0 loc_5EB0:                               ; CODE XREF: fts_sort+6F↓j
.text:0000000000005EB0                 add     rdx, 8
.text:0000000000005EB4                 mov     [rdx-8], rbx
.text:0000000000005EB8                 mov     rbx, [rbx+10h]
.text:0000000000005EBC                 test    rbx, rbx
.text:0000000000005EBF                 jnz     short loc_5EB0
.text:0000000000005EC1
.text:0000000000005EC1 loc_5EC1:                               ; CODE XREF: fts_sort+58↑j
.text:0000000000005EC1                 mov     rcx, r13        ; compar
.text:0000000000005EC4                 mov     edx, 8          ; size
.text:0000000000005EC9                 mov     rsi, r12        ; nmemb
.text:0000000000005ECC                 call    _qsort
.text:0000000000005ED1                 mov     r8, [rbp+10h]
.text:0000000000005ED5                 mov     rcx, r12
.text:0000000000005ED8                 sub     rcx, 1
.text:0000000000005EDC                 mov     rax, [r8]
.text:0000000000005EDF                 jz      short loc_5F50
.text:0000000000005EE1                 mov     rdi, rax
.text:0000000000005EE4                 mov     rdx, r8
.text:0000000000005EE7                 jmp     short loc_5EF3
.text:0000000000005EE7 ; ---------------------------------------------------------------------------
.text:0000000000005EE9                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: fts_sort+B3↓j
.text:0000000000005EF0                 mov     rdi, [rdx]
.text:0000000000005EF3
.text:0000000000005EF3 loc_5EF3:                               ; CODE XREF: fts_sort+97↑j
.text:0000000000005EF3                 mov     rsi, [rdx+8]
.text:0000000000005EF7                 add     rdx, 8
.text:0000000000005EFB                 sub     rcx, 1
.text:0000000000005EFF                 mov     [rdi+10h], rsi
.text:0000000000005F03                 jnz     short loc_5EF0
.text:0000000000005F05                 mov     rdx, [r8+r12*8-8]
.text:0000000000005F0A
.text:0000000000005F0A loc_5F0A:                               ; CODE XREF: fts_sort+103↓j
.text:0000000000005F0A                 mov     qword ptr [rdx+10h], 0
.text:0000000000005F12                 add     rsp, 8
.text:0000000000005F16                 pop     rbx
.text:0000000000005F17                 pop     rbp
.text:0000000000005F18                 pop     r12
.text:0000000000005F1A                 pop     r13
.text:0000000000005F1C                 retn
.text:0000000000005F1C ; ---------------------------------------------------------------------------
.text:0000000000005F1D                 align 20h
.text:0000000000005F20
.text:0000000000005F20 loc_5F20:                               ; CODE XREF: fts_sort+4B↑j
.text:0000000000005F20                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000005F24
.text:0000000000005F24 loc_5F24:                               ; CODE XREF: fts_sort+36↑j
.text:0000000000005F24                 call    free
.text:0000000000005F29                 mov     qword ptr [rbp+10h], 0
.text:0000000000005F31                 mov     qword ptr [rbp+38h], 0
.text:0000000000005F39                 add     rsp, 8
.text:0000000000005F3D                 mov     rax, rbx
.text:0000000000005F40                 pop     rbx
.text:0000000000005F41                 pop     rbp
.text:0000000000005F42                 pop     r12
.text:0000000000005F44                 pop     r13
.text:0000000000005F46                 retn
.text:0000000000005F46 ; ---------------------------------------------------------------------------
.text:0000000000005F47                 align 10h
.text:0000000000005F50
.text:0000000000005F50 loc_5F50:                               ; CODE XREF: fts_sort+8F↑j
.text:0000000000005F50                 mov     rdx, rax
.text:0000000000005F53                 jmp     short loc_5F0A
.text:0000000000005F53 ; } // starts at 5E50
.text:0000000000005F53 fts_sort        endp
.text:0000000000005F53
.text:0000000000005F53 ; ---------------------------------------------------------------------------
.text:0000000000005F55                 align 20h
.text:0000000000005F60
.text:0000000000005F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F60
.text:0000000000005F60
.text:0000000000005F60 fts_alloc       proc near               ; CODE XREF: fts_build+22C↓p
.text:0000000000005F60                                         ; rpl_fts_open+E7↓p ...
.text:0000000000005F60 ; __unwind {
.text:0000000000005F60                 push    r13
.text:0000000000005F62                 push    r12
.text:0000000000005F64                 mov     r12, rdi
.text:0000000000005F67                 push    rbp
.text:0000000000005F68                 lea     rdi, [rdx+110h]
.text:0000000000005F6F                 push    rbx
.text:0000000000005F70                 mov     r13, rsi
.text:0000000000005F73                 mov     rbp, rdx
.text:0000000000005F76                 sub     rsp, 8
.text:0000000000005F7A                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:0000000000005F7E                 call    _malloc
.text:0000000000005F83                 test    rax, rax
.text:0000000000005F86                 mov     rbx, rax
.text:0000000000005F89                 jz      short loc_5FDC
.text:0000000000005F8B                 lea     rdi, [rax+108h] ; dest
.text:0000000000005F92                 mov     rdx, rbp        ; n
.text:0000000000005F95                 mov     rsi, r13        ; src
.text:0000000000005F98                 call    _memcpy
.text:0000000000005F9D                 mov     rax, [r12+20h]
.text:0000000000005FA2                 mov     byte ptr [rbx+rbp+108h], 0
.text:0000000000005FAA                 mov     [rbx+60h], rbp
.text:0000000000005FAE                 mov     [rbx+50h], r12
.text:0000000000005FB2                 mov     dword ptr [rbx+40h], 0
.text:0000000000005FB9                 mov     qword ptr [rbx+18h], 0
.text:0000000000005FC1                 mov     [rbx+38h], rax
.text:0000000000005FC5                 mov     dword ptr [rbx+72h], 30000h
.text:0000000000005FCC                 mov     qword ptr [rbx+20h], 0
.text:0000000000005FD4                 mov     qword ptr [rbx+28h], 0
.text:0000000000005FDC
.text:0000000000005FDC loc_5FDC:                               ; CODE XREF: fts_alloc+29↑j
.text:0000000000005FDC                 add     rsp, 8
.text:0000000000005FE0                 mov     rax, rbx
.text:0000000000005FE3                 pop     rbx
.text:0000000000005FE4                 pop     rbp
.text:0000000000005FE5                 pop     r12
.text:0000000000005FE7                 pop     r13
.text:0000000000005FE9                 retn
.text:0000000000005FE9 ; } // starts at 5F60
.text:0000000000005FE9 fts_alloc       endp
.text:0000000000005FE9
.text:0000000000005FE9 ; ---------------------------------------------------------------------------
.text:0000000000005FEA                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005FF0
.text:0000000000005FF0
.text:0000000000005FF0 ; __int64 __fastcall fts_lfree(void *ptr)
.text:0000000000005FF0 fts_lfree       proc near               ; CODE XREF: fts_build+666↓p
.text:0000000000005FF0                                         ; fts_build+765↓p ...
.text:0000000000005FF0 ; __unwind {
.text:0000000000005FF0                 test    rdi, rdi
.text:0000000000005FF3                 jz      short locret_6030
.text:0000000000005FF5                 push    rbp
.text:0000000000005FF6                 push    rbx
.text:0000000000005FF7                 mov     rbx, rdi
.text:0000000000005FFA                 sub     rsp, 8
.text:0000000000005FFE                 xchg    ax, ax
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: fts_lfree+30↓j
.text:0000000000006000                 mov     rdi, [rbx+18h]  ; dirp
.text:0000000000006004                 mov     rbp, [rbx+10h]
.text:0000000000006008                 test    rdi, rdi
.text:000000000000600B                 jz      short loc_6012
.text:000000000000600D                 call    _closedir
.text:0000000000006012
.text:0000000000006012 loc_6012:                               ; CODE XREF: fts_lfree+1B↑j
.text:0000000000006012                 mov     rdi, rbx        ; ptr
.text:0000000000006015                 mov     rbx, rbp
.text:0000000000006018                 call    free
.text:000000000000601D                 test    rbp, rbp
.text:0000000000006020                 jnz     short loc_6000
.text:0000000000006022                 add     rsp, 8
.text:0000000000006026                 pop     rbx
.text:0000000000006027                 pop     rbp
.text:0000000000006028                 retn
.text:0000000000006028 ; ---------------------------------------------------------------------------
.text:0000000000006029                 align 10h
.text:0000000000006030
.text:0000000000006030 locret_6030:                            ; CODE XREF: fts_lfree+3↑j
.text:0000000000006030                 rep retn
.text:0000000000006030 ; } // starts at 5FF0
.text:0000000000006030 fts_lfree       endp
.text:0000000000006030
.text:0000000000006030 ; ---------------------------------------------------------------------------
.text:0000000000006032                 align 20h
.text:0000000000006040
.text:0000000000006040 ; =============== S U B R O U T I N E =======================================
.text:0000000000006040
.text:0000000000006040
.text:0000000000006040 fd_ring_clear   proc near               ; CODE XREF: restore_initial_cwd+2C↓p
.text:0000000000006040                                         ; rpl_fts_close+8C↓p
.text:0000000000006040 ; __unwind {
.text:0000000000006040                 push    rbx
.text:0000000000006041                 mov     rbx, rdi
.text:0000000000006044                 jmp     short loc_605C
.text:0000000000006044 ; ---------------------------------------------------------------------------
.text:0000000000006046                 align 10h
.text:0000000000006050
.text:0000000000006050 loc_6050:                               ; CODE XREF: fd_ring_clear+26↓j
.text:0000000000006050                 mov     rdi, rbx
.text:0000000000006053                 call    i_ring_pop
.text:0000000000006058                 test    eax, eax
.text:000000000000605A                 jns     short loc_6070
.text:000000000000605C
.text:000000000000605C loc_605C:                               ; CODE XREF: fd_ring_clear+4↑j
.text:000000000000605C                                         ; fd_ring_clear+37↓j
.text:000000000000605C                 mov     rdi, rbx
.text:000000000000605F                 call    i_ring_empty
.text:0000000000006064                 test    al, al
.text:0000000000006066                 jz      short loc_6050
.text:0000000000006068                 pop     rbx
.text:0000000000006069                 retn
.text:0000000000006069 ; ---------------------------------------------------------------------------
.text:000000000000606A                 align 10h
.text:0000000000006070
.text:0000000000006070 loc_6070:                               ; CODE XREF: fd_ring_clear+1A↑j
.text:0000000000006070                 mov     edi, eax        ; fd
.text:0000000000006072                 call    _close
.text:0000000000006077                 jmp     short loc_605C
.text:0000000000006077 ; } // starts at 6040
.text:0000000000006077 fd_ring_clear   endp
.text:0000000000006077
.text:0000000000006077 ; ---------------------------------------------------------------------------
.text:0000000000006079                 align 20h
.text:0000000000006080
.text:0000000000006080 ; =============== S U B R O U T I N E =======================================
.text:0000000000006080
.text:0000000000006080
.text:0000000000006080 filesystem_type proc near               ; CODE XREF: leaf_optimization+4↓p
.text:0000000000006080                                         ; fts_build+2C4↓p
.text:0000000000006080
.text:0000000000006080 var_B8          = qword ptr -0B8h
.text:0000000000006080 buf             = statfs ptr -0A8h
.text:0000000000006080 var_30          = qword ptr -30h
.text:0000000000006080
.text:0000000000006080 ; __unwind {
.text:0000000000006080                 push    r13
.text:0000000000006082                 push    r12
.text:0000000000006084                 push    rbp
.text:0000000000006085                 push    rbx
.text:0000000000006086                 sub     rsp, 98h
.text:000000000000608D                 mov     rbx, [rdi+50h]
.text:0000000000006091                 mov     rax, fs:28h
.text:000000000000609A                 mov     [rsp+0B8h+var_30], rax
.text:00000000000060A2                 xor     eax, eax
.text:00000000000060A4                 test    byte ptr [rbx+49h], 2
.text:00000000000060A8                 jz      short loc_6112
.text:00000000000060AA                 mov     r12, [rbx+50h]
.text:00000000000060AE                 mov     rbp, rdi
.text:00000000000060B1                 mov     r13d, esi
.text:00000000000060B4                 test    r12, r12
.text:00000000000060B7                 jz      short loc_60E0
.text:00000000000060B9
.text:00000000000060B9 loc_60B9:                               ; CODE XREF: filesystem_type+8B↓j
.text:00000000000060B9                 mov     rax, [rbp+78h]
.text:00000000000060BD                 mov     rsi, rsp
.text:00000000000060C0                 mov     rdi, r12
.text:00000000000060C3                 mov     [rsp+0B8h+var_B8], rax
.text:00000000000060C7                 call    hash_lookup
.text:00000000000060CC                 test    rax, rax
.text:00000000000060CF                 jz      short loc_610D
.text:00000000000060D1                 mov     rbx, [rax+8]
.text:00000000000060D5                 jmp     short loc_6114
.text:00000000000060D5 ; ---------------------------------------------------------------------------
.text:00000000000060D7                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: filesystem_type+37↑j
.text:00000000000060E0                 mov     r8, cs:free_ptr
.text:00000000000060E7                 lea     rcx, dev_type_compare
.text:00000000000060EE                 lea     rdx, dev_type_hash
.text:00000000000060F5                 xor     esi, esi
.text:00000000000060F7                 mov     edi, 0Dh
.text:00000000000060FC                 call    hash_initialize
.text:0000000000006101                 test    rax, rax
.text:0000000000006104                 mov     r12, rax
.text:0000000000006107                 mov     [rbx+50h], rax
.text:000000000000610B                 jnz     short loc_60B9
.text:000000000000610D
.text:000000000000610D loc_610D:                               ; CODE XREF: filesystem_type+4F↑j
.text:000000000000610D                 test    r13d, r13d
.text:0000000000006110                 jns     short loc_6140
.text:0000000000006112
.text:0000000000006112 loc_6112:                               ; CODE XREF: filesystem_type+28↑j
.text:0000000000006112                                         ; filesystem_type+CF↓j
.text:0000000000006112                 xor     ebx, ebx
.text:0000000000006114
.text:0000000000006114 loc_6114:                               ; CODE XREF: filesystem_type+55↑j
.text:0000000000006114                                         ; filesystem_type+D9↓j ...
.text:0000000000006114                 mov     rdx, [rsp+0B8h+var_30]
.text:000000000000611C                 xor     rdx, fs:28h
.text:0000000000006125                 mov     rax, rbx
.text:0000000000006128                 jnz     short loc_61A2
.text:000000000000612A                 add     rsp, 98h
.text:0000000000006131                 pop     rbx
.text:0000000000006132                 pop     rbp
.text:0000000000006133                 pop     r12
.text:0000000000006135                 pop     r13
.text:0000000000006137                 retn
.text:0000000000006137 ; ---------------------------------------------------------------------------
.text:0000000000006138                 align 20h
.text:0000000000006140
.text:0000000000006140 loc_6140:                               ; CODE XREF: filesystem_type+90↑j
.text:0000000000006140                 lea     rsi, [rsp+0B8h+buf] ; buf
.text:0000000000006145                 mov     edi, r13d       ; fildes
.text:0000000000006148                 call    _fstatfs
.text:000000000000614D                 test    eax, eax
.text:000000000000614F                 jnz     short loc_6112
.text:0000000000006151                 test    r12, r12
.text:0000000000006154                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000006159                 jz      short loc_6114
.text:000000000000615B                 mov     edi, 10h        ; size
.text:0000000000006160                 call    _malloc
.text:0000000000006165                 test    rax, rax
.text:0000000000006168                 mov     r13, rax
.text:000000000000616B                 jz      short loc_6114
.text:000000000000616D                 mov     rax, [rbp+78h]
.text:0000000000006171                 mov     [r13+8], rbx
.text:0000000000006175                 mov     rsi, r13
.text:0000000000006178                 mov     rdi, r12
.text:000000000000617B                 mov     [r13+0], rax
.text:000000000000617F                 call    hash_insert
.text:0000000000006184                 test    rax, rax
.text:0000000000006187                 jz      short loc_6198
.text:0000000000006189                 cmp     r13, rax
.text:000000000000618C                 jnz     short loc_61A7
.text:000000000000618E
.text:000000000000618E loc_618E:                               ; CODE XREF: filesystem_type+120↓j
.text:000000000000618E                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000006193                 jmp     loc_6114
.text:0000000000006198 ; ---------------------------------------------------------------------------
.text:0000000000006198
.text:0000000000006198 loc_6198:                               ; CODE XREF: filesystem_type+107↑j
.text:0000000000006198                 mov     rdi, r13        ; ptr
.text:000000000000619B                 call    free
.text:00000000000061A0                 jmp     short loc_618E
.text:00000000000061A2 ; ---------------------------------------------------------------------------
.text:00000000000061A2
.text:00000000000061A2 loc_61A2:                               ; CODE XREF: filesystem_type+A8↑j
.text:00000000000061A2                 call    ___stack_chk_fail
.text:00000000000061A7 ; ---------------------------------------------------------------------------
.text:00000000000061A7
.text:00000000000061A7 loc_61A7:                               ; CODE XREF: filesystem_type+10C↑j
.text:00000000000061A7                 call    _abort
.text:00000000000061A7 ; } // starts at 6080
.text:00000000000061A7 filesystem_type endp
.text:00000000000061A7
.text:00000000000061A7 ; ---------------------------------------------------------------------------
.text:00000000000061AC                 align 10h
.text:00000000000061B0
.text:00000000000061B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061B0
.text:00000000000061B0
.text:00000000000061B0 leaf_optimization proc near             ; CODE XREF: fts_build+8B7↓p
.text:00000000000061B0                                         ; rpl_fts_read+705↓p
.text:00000000000061B0 ; __unwind {
.text:00000000000061B0                 sub     rsp, 8
.text:00000000000061B4                 call    filesystem_type
.text:00000000000061B9                 cmp     rax, 52654973h
.text:00000000000061BF                 jz      short loc_6210
.text:00000000000061C1                 jle     short loc_61F0
.text:00000000000061C3                 cmp     rax, 58465342h
.text:00000000000061C9                 jz      short loc_6210
.text:00000000000061CB                 mov     edx, 0FF534D42h
.text:00000000000061D0                 cmp     rax, rdx
.text:00000000000061D3                 jz      short loc_6205
.text:00000000000061D5                 cmp     rax, 5346414Fh
.text:00000000000061DB                 jz      short loc_6205
.text:00000000000061DD
.text:00000000000061DD loc_61DD:                               ; CODE XREF: leaf_optimization+53↓j
.text:00000000000061DD                 mov     eax, 1
.text:00000000000061E2                 add     rsp, 8
.text:00000000000061E6                 retn
.text:00000000000061E6 ; ---------------------------------------------------------------------------
.text:00000000000061E7                 align 10h
.text:00000000000061F0
.text:00000000000061F0 loc_61F0:                               ; CODE XREF: leaf_optimization+11↑j
.text:00000000000061F0                 cmp     rax, 6969h
.text:00000000000061F6                 jz      short loc_6205
.text:00000000000061F8                 cmp     rax, 9FA0h
.text:00000000000061FE                 jz      short loc_6205
.text:0000000000006200                 test    rax, rax
.text:0000000000006203                 jnz     short loc_61DD
.text:0000000000006205
.text:0000000000006205 loc_6205:                               ; CODE XREF: leaf_optimization+23↑j
.text:0000000000006205                                         ; leaf_optimization+2B↑j ...
.text:0000000000006205                 xor     eax, eax
.text:0000000000006207                 add     rsp, 8
.text:000000000000620B                 retn
.text:000000000000620B ; ---------------------------------------------------------------------------
.text:000000000000620C                 align 10h
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: leaf_optimization+F↑j
.text:0000000000006210                                         ; leaf_optimization+19↑j
.text:0000000000006210                 mov     eax, 2
.text:0000000000006215                 add     rsp, 8
.text:0000000000006219                 retn
.text:0000000000006219 ; } // starts at 61B0
.text:0000000000006219 leaf_optimization endp
.text:0000000000006219
.text:0000000000006219 ; ---------------------------------------------------------------------------
.text:000000000000621A                 align 20h
.text:0000000000006220
.text:0000000000006220 ; =============== S U B R O U T I N E =======================================
.text:0000000000006220
.text:0000000000006220
.text:0000000000006220 cwd_advance_fd  proc near               ; CODE XREF: restore_initial_cwd+4A↓p
.text:0000000000006220                                         ; fts_safe_changedir+21E↓p ...
.text:0000000000006220 ; __unwind {
.text:0000000000006220                 push    rbp
.text:0000000000006221                 push    rbx
.text:0000000000006222                 mov     ebp, esi
.text:0000000000006224                 mov     rbx, rdi
.text:0000000000006227                 sub     rsp, 8
.text:000000000000622B                 mov     esi, [rdi+2Ch]
.text:000000000000622E                 cmp     esi, ebp
.text:0000000000006230                 jnz     short loc_6237
.text:0000000000006232                 cmp     esi, 0FFFFFF9Ch
.text:0000000000006235                 jnz     short loc_6281
.text:0000000000006237
.text:0000000000006237 loc_6237:                               ; CODE XREF: cwd_advance_fd+10↑j
.text:0000000000006237                 test    dl, dl
.text:0000000000006239                 jnz     short loc_6250
.text:000000000000623B                 test    byte ptr [rbx+48h], 4
.text:000000000000623F                 jnz     short loc_6245
.text:0000000000006241                 test    esi, esi
.text:0000000000006243                 jns     short loc_6270
.text:0000000000006245
.text:0000000000006245 loc_6245:                               ; CODE XREF: cwd_advance_fd+1F↑j
.text:0000000000006245                                         ; cwd_advance_fd+3B↓j
.text:0000000000006245                 mov     [rbx+2Ch], ebp
.text:0000000000006248                 add     rsp, 8
.text:000000000000624C                 pop     rbx
.text:000000000000624D                 pop     rbp
.text:000000000000624E                 retn
.text:000000000000624E ; ---------------------------------------------------------------------------
.text:000000000000624F                 align 10h
.text:0000000000006250
.text:0000000000006250 loc_6250:                               ; CODE XREF: cwd_advance_fd+19↑j
.text:0000000000006250                 lea     rdi, [rbx+60h]
.text:0000000000006254                 call    i_ring_push
.text:0000000000006259                 test    eax, eax
.text:000000000000625B                 js      short loc_6245
.text:000000000000625D                 mov     edi, eax        ; fd
.text:000000000000625F                 call    _close
.text:0000000000006264                 mov     [rbx+2Ch], ebp
.text:0000000000006267                 add     rsp, 8
.text:000000000000626B                 pop     rbx
.text:000000000000626C                 pop     rbp
.text:000000000000626D                 retn
.text:000000000000626D ; ---------------------------------------------------------------------------
.text:000000000000626E                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: cwd_advance_fd+23↑j
.text:0000000000006270                 mov     edi, esi        ; fd
.text:0000000000006272                 call    _close
.text:0000000000006277                 mov     [rbx+2Ch], ebp
.text:000000000000627A                 add     rsp, 8
.text:000000000000627E                 pop     rbx
.text:000000000000627F                 pop     rbp
.text:0000000000006280                 retn
.text:0000000000006281 ; ---------------------------------------------------------------------------
.text:0000000000006281
.text:0000000000006281 loc_6281:                               ; CODE XREF: cwd_advance_fd+15↑j
.text:0000000000006281                 call    _abort
.text:0000000000006281 ; } // starts at 6220
.text:0000000000006281 cwd_advance_fd  endp
.text:0000000000006281
.text:0000000000006281 ; ---------------------------------------------------------------------------
.text:0000000000006286                 align 10h
.text:0000000000006290
.text:0000000000006290 ; =============== S U B R O U T I N E =======================================
.text:0000000000006290
.text:0000000000006290
.text:0000000000006290 restore_initial_cwd proc near           ; CODE XREF: fts_build+73E↓p
.text:0000000000006290                                         ; rpl_fts_read+2A3↓p ...
.text:0000000000006290 ; __unwind {
.text:0000000000006290                 push    rbp
.text:0000000000006291                 push    rbx
.text:0000000000006292                 mov     rbx, rdi
.text:0000000000006295                 sub     rsp, 8
.text:0000000000006299                 mov     edx, [rdi+48h]
.text:000000000000629C                 mov     ebp, edx
.text:000000000000629E                 and     ebp, 4
.text:00000000000062A1                 jnz     short loc_62E8
.text:00000000000062A3                 and     dh, 2
.text:00000000000062A6                 jnz     short loc_62D0
.text:00000000000062A8                 mov     edi, [rdi+28h]  ; fd
.text:00000000000062AB                 xor     ebp, ebp
.text:00000000000062AD                 call    _fchdir
.text:00000000000062B2                 test    eax, eax
.text:00000000000062B4                 setnz   bpl
.text:00000000000062B8
.text:00000000000062B8 loc_62B8:                               ; CODE XREF: restore_initial_cwd+4F↓j
.text:00000000000062B8                                         ; restore_initial_cwd+5A↓j
.text:00000000000062B8                 lea     rdi, [rbx+60h]
.text:00000000000062BC                 call    fd_ring_clear
.text:00000000000062C1                 add     rsp, 8
.text:00000000000062C5                 mov     eax, ebp
.text:00000000000062C7                 pop     rbx
.text:00000000000062C8                 pop     rbp
.text:00000000000062C9                 retn
.text:00000000000062C9 ; ---------------------------------------------------------------------------
.text:00000000000062CA                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: restore_initial_cwd+16↑j
.text:00000000000062D0                 mov     edx, 1
.text:00000000000062D5                 mov     esi, 0FFFFFF9Ch
.text:00000000000062DA                 call    cwd_advance_fd
.text:00000000000062DF                 jmp     short loc_62B8
.text:00000000000062DF ; ---------------------------------------------------------------------------
.text:00000000000062E1                 align 8
.text:00000000000062E8
.text:00000000000062E8 loc_62E8:                               ; CODE XREF: restore_initial_cwd+11↑j
.text:00000000000062E8                 xor     ebp, ebp
.text:00000000000062EA                 jmp     short loc_62B8
.text:00000000000062EA ; } // starts at 6290
.text:00000000000062EA restore_initial_cwd endp
.text:00000000000062EA
.text:00000000000062EA ; ---------------------------------------------------------------------------
.text:00000000000062EC                 align 10h
.text:00000000000062F0
.text:00000000000062F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062F0
.text:00000000000062F0
.text:00000000000062F0 fts_palloc_isra_2 proc near             ; CODE XREF: fts_build+263↓p
.text:00000000000062F0                                         ; rpl_fts_open+BD↓p
.text:00000000000062F0 ; __unwind {
.text:00000000000062F0                 push    rbx
.text:00000000000062F1                 mov     rcx, [rsi]
.text:00000000000062F4                 mov     rbx, rdi
.text:00000000000062F7                 mov     rdi, [rdi]      ; ptr
.text:00000000000062FA                 lea     rax, [rcx+rdx+100h]
.text:0000000000006302                 cmp     rcx, rax
.text:0000000000006305                 ja      short loc_6328
.text:0000000000006307                 mov     [rsi], rax
.text:000000000000630A                 mov     rsi, rax        ; size
.text:000000000000630D                 call    _realloc
.text:0000000000006312                 test    rax, rax
.text:0000000000006315                 jz      short loc_6348
.text:0000000000006317                 mov     [rbx], rax
.text:000000000000631A                 mov     eax, 1
.text:000000000000631F                 pop     rbx
.text:0000000000006320                 retn
.text:0000000000006320 ; ---------------------------------------------------------------------------
.text:0000000000006321                 align 8
.text:0000000000006328
.text:0000000000006328 loc_6328:                               ; CODE XREF: fts_palloc_isra_2+15↑j
.text:0000000000006328                 call    free
.text:000000000000632D                 mov     qword ptr [rbx], 0
.text:0000000000006334                 call    ___errno_location
.text:0000000000006339                 mov     dword ptr [rax], 24h ; '$'
.text:000000000000633F                 xor     eax, eax
.text:0000000000006341                 pop     rbx
.text:0000000000006342                 retn
.text:0000000000006342 ; ---------------------------------------------------------------------------
.text:0000000000006343                 align 8
.text:0000000000006348
.text:0000000000006348 loc_6348:                               ; CODE XREF: fts_palloc_isra_2+25↑j
.text:0000000000006348                 mov     rdi, [rbx]      ; ptr
.text:000000000000634B                 call    free
.text:0000000000006350                 mov     qword ptr [rbx], 0
.text:0000000000006357                 xor     eax, eax
.text:0000000000006359                 pop     rbx
.text:000000000000635A                 retn
.text:000000000000635A ; } // starts at 62F0
.text:000000000000635A fts_palloc_isra_2 endp
.text:000000000000635A
.text:000000000000635A ; ---------------------------------------------------------------------------
.text:000000000000635B                 align 20h
.text:0000000000006360
.text:0000000000006360 ; =============== S U B R O U T I N E =======================================
.text:0000000000006360
.text:0000000000006360
.text:0000000000006360 setup_dir_isra_4 proc near              ; CODE XREF: rpl_fts_open+265↓p
.text:0000000000006360                                         ; rpl_fts_read+345↓p
.text:0000000000006360 ; __unwind {
.text:0000000000006360                 and     edi, 102h
.text:0000000000006366                 push    rbx
.text:0000000000006367                 mov     rbx, rsi
.text:000000000000636A                 jz      short loc_63A0
.text:000000000000636C                 mov     r8, cs:free_ptr
.text:0000000000006373                 lea     rcx, AD_compare
.text:000000000000637A                 lea     rdx, AD_hash
.text:0000000000006381                 xor     esi, esi
.text:0000000000006383                 mov     edi, 1Fh
.text:0000000000006388                 call    hash_initialize
.text:000000000000638D                 test    rax, rax
.text:0000000000006390                 mov     [rbx], rax
.text:0000000000006393                 setnz   al
.text:0000000000006396
.text:0000000000006396 loc_6396:                               ; CODE XREF: setup_dir_isra_4+55↓j
.text:0000000000006396                 pop     rbx
.text:0000000000006397                 retn
.text:0000000000006397 ; ---------------------------------------------------------------------------
.text:0000000000006398                 align 20h
.text:00000000000063A0
.text:00000000000063A0 loc_63A0:                               ; CODE XREF: setup_dir_isra_4+A↑j
.text:00000000000063A0                 mov     edi, 20h ; ' '  ; size
.text:00000000000063A5                 call    _malloc
.text:00000000000063AA                 mov     rdi, rax
.text:00000000000063AD                 mov     [rbx], rax
.text:00000000000063B0                 xor     eax, eax
.text:00000000000063B2                 test    rdi, rdi
.text:00000000000063B5                 jz      short loc_6396
.text:00000000000063B7                 call    cycle_check_init
.text:00000000000063BC                 mov     eax, 1
.text:00000000000063C1                 pop     rbx
.text:00000000000063C2                 retn
.text:00000000000063C2 ; } // starts at 6360
.text:00000000000063C2 setup_dir_isra_4 endp
.text:00000000000063C2
.text:00000000000063C2 ; ---------------------------------------------------------------------------
.text:00000000000063C3                 align 10h
.text:00000000000063D0
.text:00000000000063D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063D0
.text:00000000000063D0
.text:00000000000063D0 diropen_isra_6  proc near               ; CODE XREF: fts_safe_changedir+8D↓p
.text:00000000000063D0                                         ; rpl_fts_open+287↓p ...
.text:00000000000063D0 ; __unwind {
.text:00000000000063D0                 mov     rax, rdx
.text:00000000000063D3                 mov     edx, esi
.text:00000000000063D5                 shl     edx, 0Dh
.text:00000000000063D8                 and     edx, 20000h
.text:00000000000063DE                 or      edx, 90900h
.text:00000000000063E4                 and     esi, 200h
.text:00000000000063EA                 jnz     short loc_6400
.text:00000000000063EC                 mov     rdi, rax
.text:00000000000063EF                 mov     esi, edx
.text:00000000000063F1                 xor     eax, eax
.text:00000000000063F3                 jmp     open_safer
.text:00000000000063F3 ; ---------------------------------------------------------------------------
.text:00000000000063F8                 align 20h
.text:0000000000006400
.text:0000000000006400 loc_6400:                               ; CODE XREF: diropen_isra_6+1A↑j
.text:0000000000006400                 mov     rsi, rax
.text:0000000000006403                 xor     eax, eax
.text:0000000000006405                 jmp     openat_safer
.text:0000000000006405 ; } // starts at 63D0
.text:0000000000006405 diropen_isra_6  endp
.text:0000000000006405
.text:0000000000006405 ; ---------------------------------------------------------------------------
.text:000000000000640A                 align 10h
.text:0000000000006410
.text:0000000000006410 ; =============== S U B R O U T I N E =======================================
.text:0000000000006410
.text:0000000000006410 ; Attributes: info_from_lumina
.text:0000000000006410
.text:0000000000006410 fts_safe_changedir proc near            ; CODE XREF: fts_build+879↓p
.text:0000000000006410                                         ; fts_build+892↓p ...
.text:0000000000006410
.text:0000000000006410 var_D9          = byte ptr -0D9h
.text:0000000000006410 stat_buf        = stat ptr -0D8h
.text:0000000000006410 var_40          = qword ptr -40h
.text:0000000000006410
.text:0000000000006410 ; __unwind {
.text:0000000000006410                 push    r15
.text:0000000000006412                 push    r14
.text:0000000000006414                 mov     r14, rsi
.text:0000000000006417                 push    r13
.text:0000000000006419                 push    r12
.text:000000000000641B                 mov     r13, rdi
.text:000000000000641E                 push    rbp
.text:000000000000641F                 push    rbx
.text:0000000000006420                 mov     r12d, edx
.text:0000000000006423                 mov     rbp, rcx
.text:0000000000006426                 sub     rsp, 0B8h
.text:000000000000642D                 mov     ebx, [rdi+48h]
.text:0000000000006430                 mov     rax, fs:28h
.text:0000000000006439                 mov     [rsp+0E8h+var_40], rax
.text:0000000000006441                 xor     eax, eax
.text:0000000000006443                 mov     r9d, ebx
.text:0000000000006446                 and     r9d, 4
.text:000000000000644A                 test    rcx, rcx
.text:000000000000644D                 jz      loc_6500
.text:0000000000006453                 lea     rdx, asc_AF1A   ; ".."
.text:000000000000645A                 mov     ecx, 3
.text:000000000000645F                 mov     rsi, rbp
.text:0000000000006462                 mov     rdi, rdx
.text:0000000000006465                 repe cmpsb
.text:0000000000006467                 setnbe  al
.text:000000000000646A                 sbb     al, 0
.text:000000000000646C                 test    al, al
.text:000000000000646E                 jnz     loc_6500
.text:0000000000006474                 test    r9d, r9d
.text:0000000000006477                 jnz     loc_6505
.text:000000000000647D                 test    r12d, r12d
.text:0000000000006480                 jns     loc_666A
.text:0000000000006486                 test    bh, 2
.text:0000000000006489                 jnz     loc_65D0
.text:000000000000648F
.text:000000000000648F loc_648F:                               ; CODE XREF: fts_safe_changedir+1E9↓j
.text:000000000000648F                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006494
.text:0000000000006494 loc_6494:                               ; CODE XREF: fts_safe_changedir+1D2↓j
.text:0000000000006494                                         ; fts_safe_changedir+275↓j
.text:0000000000006494                 mov     edi, [r13+2Ch]
.text:0000000000006498                 mov     rdx, rbp
.text:000000000000649B                 mov     esi, ebx
.text:000000000000649D                 call    diropen_isra_6
.text:00000000000064A2                 test    eax, eax
.text:00000000000064A4                 mov     r15d, eax
.text:00000000000064A7                 js      loc_665B
.text:00000000000064AD                 mov     ebx, [r13+48h]
.text:00000000000064B1                 test    bl, 2
.text:00000000000064B4                 jz      loc_655A
.text:00000000000064BA                 nop     word ptr [rax+rax+00h]
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: fts_safe_changedir+144↓j
.text:00000000000064C0                                         ; fts_safe_changedir+16A↓j ...
.text:00000000000064C0                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:00000000000064C5                 mov     esi, r15d       ; fildes
.text:00000000000064C8                 mov     edi, 1          ; ver
.text:00000000000064CD                 call    ___fxstat       ; PIC mode
.text:00000000000064D2                 test    eax, eax
.text:00000000000064D4                 jz      loc_65A0
.text:00000000000064DA
.text:00000000000064DA loc_64DA:                               ; CODE XREF: fts_safe_changedir+1AA↓j
.text:00000000000064DA                 mov     ebx, 0FFFFFFFFh
.text:00000000000064DF
.text:00000000000064DF loc_64DF:                               ; CODE XREF: fts_safe_changedir+183↓j
.text:00000000000064DF                 test    r12d, r12d
.text:00000000000064E2                 jns     short loc_6515
.text:00000000000064E4                 call    ___errno_location ; PIC mode
.text:00000000000064E9                 mov     r12d, [rax]
.text:00000000000064EC                 mov     rbp, rax
.text:00000000000064EF                 mov     edi, r15d       ; fd
.text:00000000000064F2                 call    _close          ; PIC mode
.text:00000000000064F7                 mov     [rbp+0], r12d
.text:00000000000064FB                 jmp     short loc_6515
.text:00000000000064FB ; ---------------------------------------------------------------------------
.text:00000000000064FD                 align 20h
.text:0000000000006500
.text:0000000000006500 loc_6500:                               ; CODE XREF: fts_safe_changedir+3D↑j
.text:0000000000006500                                         ; fts_safe_changedir+5E↑j
.text:0000000000006500                 test    r9d, r9d
.text:0000000000006503                 jz      short loc_6540
.text:0000000000006505
.text:0000000000006505 loc_6505:                               ; CODE XREF: fts_safe_changedir+67↑j
.text:0000000000006505                 and     bh, 2
.text:0000000000006508                 jz      short loc_6513
.text:000000000000650A                 test    r12d, r12d
.text:000000000000650D                 jns     loc_65C0
.text:0000000000006513
.text:0000000000006513 loc_6513:                               ; CODE XREF: fts_safe_changedir+F8↑j
.text:0000000000006513                 xor     ebx, ebx
.text:0000000000006515
.text:0000000000006515 loc_6515:                               ; CODE XREF: fts_safe_changedir+D2↑j
.text:0000000000006515                                         ; fts_safe_changedir+EB↑j ...
.text:0000000000006515                 mov     rcx, [rsp+0E8h+var_40]
.text:000000000000651D                 xor     rcx, fs:28h
.text:0000000000006526                 mov     eax, ebx
.text:0000000000006528                 jnz     loc_6665
.text:000000000000652E                 add     rsp, 0B8h
.text:0000000000006535                 pop     rbx
.text:0000000000006536                 pop     rbp
.text:0000000000006537                 pop     r12
.text:0000000000006539                 pop     r13
.text:000000000000653B                 pop     r14
.text:000000000000653D                 pop     r15
.text:000000000000653F                 retn
.text:0000000000006540 ; ---------------------------------------------------------------------------
.text:0000000000006540
.text:0000000000006540 loc_6540:                               ; CODE XREF: fts_safe_changedir+F3↑j
.text:0000000000006540                 test    r12d, r12d
.text:0000000000006543                 js      loc_6680
.text:0000000000006549                 test    bl, 2
.text:000000000000654C                 mov     r15d, r12d
.text:000000000000654F                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006554                 jnz     loc_64C0
.text:000000000000655A
.text:000000000000655A loc_655A:                               ; CODE XREF: fts_safe_changedir+A4↑j
.text:000000000000655A                 test    rbp, rbp
.text:000000000000655D                 jz      short loc_6580
.text:000000000000655F                 lea     rdx, asc_AF1A   ; ".."
.text:0000000000006566
.text:0000000000006566 loc_6566:                               ; CODE XREF: fts_safe_changedir+265↓j
.text:0000000000006566                 mov     ecx, 3
.text:000000000000656B                 mov     rsi, rbp
.text:000000000000656E                 mov     rdi, rdx
.text:0000000000006571                 repe cmpsb
.text:0000000000006573                 setnbe  al
.text:0000000000006576                 sbb     al, 0
.text:0000000000006578                 test    al, al
.text:000000000000657A                 jz      loc_64C0
.text:0000000000006580
.text:0000000000006580 loc_6580:                               ; CODE XREF: fts_safe_changedir+14D↑j
.text:0000000000006580                                         ; fts_safe_changedir+1FA↓j ...
.text:0000000000006580                 and     bh, 2
.text:0000000000006583                 jnz     loc_6618
.text:0000000000006589                 mov     edi, r15d       ; fd
.text:000000000000658C                 call    _fchdir         ; PIC mode
.text:0000000000006591                 mov     ebx, eax
.text:0000000000006593                 jmp     loc_64DF
.text:0000000000006593 ; ---------------------------------------------------------------------------
.text:0000000000006598                 align 20h
.text:00000000000065A0
.text:00000000000065A0 loc_65A0:                               ; CODE XREF: fts_safe_changedir+C4↑j
.text:00000000000065A0                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:00000000000065A5                 cmp     [r14+78h], rax
.text:00000000000065A9                 jz      loc_6640
.text:00000000000065AF
.text:00000000000065AF loc_65AF:                               ; CODE XREF: fts_safe_changedir+23C↓j
.text:00000000000065AF                 call    ___errno_location ; PIC mode
.text:00000000000065B4                 mov     dword ptr [rax], 2
.text:00000000000065BA                 jmp     loc_64DA
.text:00000000000065BA ; ---------------------------------------------------------------------------
.text:00000000000065BF                 align 20h
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: fts_safe_changedir+FD↑j
.text:00000000000065C0                 mov     edi, r12d       ; fd
.text:00000000000065C3                 xor     ebx, ebx
.text:00000000000065C5                 call    _close          ; PIC mode
.text:00000000000065CA                 jmp     loc_6515
.text:00000000000065CA ; ---------------------------------------------------------------------------
.text:00000000000065CF                 align 10h
.text:00000000000065D0
.text:00000000000065D0 loc_65D0:                               ; CODE XREF: fts_safe_changedir+79↑j
.text:00000000000065D0                 lea     r15, [r13+60h]
.text:00000000000065D4                 mov     rdi, r15
.text:00000000000065D7                 call    i_ring_empty    ; PIC mode
.text:00000000000065DC                 test    al, al
.text:00000000000065DE                 mov     [rsp+0E8h+var_D9], al
.text:00000000000065E2                 jnz     loc_6494
.text:00000000000065E8                 mov     rdi, r15
.text:00000000000065EB                 call    i_ring_pop      ; PIC mode
.text:00000000000065F0                 test    eax, eax
.text:00000000000065F2                 mov     r15d, eax
.text:00000000000065F5                 mov     ebx, [r13+48h]
.text:00000000000065F9                 js      loc_648F
.text:00000000000065FF                 test    bl, 2
.text:0000000000006602                 mov     r12d, eax
.text:0000000000006605                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000660A                 jz      loc_6580
.text:0000000000006610                 jmp     loc_64C0
.text:0000000000006610 ; ---------------------------------------------------------------------------
.text:0000000000006615                 align 8
.text:0000000000006618
.text:0000000000006618 loc_6618:                               ; CODE XREF: fts_safe_changedir+173↑j
.text:0000000000006618                 movzx   r14d, [rsp+0E8h+var_D9]
.text:000000000000661E                 mov     esi, r15d
.text:0000000000006621                 mov     rdi, r13
.text:0000000000006624                 xor     ebx, ebx
.text:0000000000006626                 xor     r14d, 1
.text:000000000000662A                 movzx   edx, r14b
.text:000000000000662E                 call    cwd_advance_fd
.text:0000000000006633                 jmp     loc_6515
.text:0000000000006633 ; ---------------------------------------------------------------------------
.text:0000000000006638                 align 20h
.text:0000000000006640
.text:0000000000006640 loc_6640:                               ; CODE XREF: fts_safe_changedir+199↑j
.text:0000000000006640                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:0000000000006645                 cmp     [r14+80h], rax
.text:000000000000664C                 jnz     loc_65AF
.text:0000000000006652                 mov     ebx, [r13+48h]
.text:0000000000006656                 jmp     loc_6580
.text:000000000000665B ; ---------------------------------------------------------------------------
.text:000000000000665B
.text:000000000000665B loc_665B:                               ; CODE XREF: fts_safe_changedir+97↑j
.text:000000000000665B                 mov     ebx, 0FFFFFFFFh
.text:0000000000006660                 jmp     loc_6515
.text:0000000000006665 ; ---------------------------------------------------------------------------
.text:0000000000006665
.text:0000000000006665 loc_6665:                               ; CODE XREF: fts_safe_changedir+118↑j
.text:0000000000006665                 call    ___stack_chk_fail ; PIC mode
.text:000000000000666A ; ---------------------------------------------------------------------------
.text:000000000000666A
.text:000000000000666A loc_666A:                               ; CODE XREF: fts_safe_changedir+70↑j
.text:000000000000666A                 test    bl, 2
.text:000000000000666D                 mov     r15d, r12d
.text:0000000000006670                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006675                 jz      loc_6566
.text:000000000000667B                 jmp     loc_64C0
.text:0000000000006680 ; ---------------------------------------------------------------------------
.text:0000000000006680
.text:0000000000006680 loc_6680:                               ; CODE XREF: fts_safe_changedir+133↑j
.text:0000000000006680                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006685                 jmp     loc_6494
.text:0000000000006685 ; } // starts at 6410
.text:0000000000006685 fts_safe_changedir endp
.text:0000000000006685
.text:0000000000006685 ; ---------------------------------------------------------------------------
.text:000000000000668A                 align 10h
.text:0000000000006690
.text:0000000000006690 ; =============== S U B R O U T I N E =======================================
.text:0000000000006690
.text:0000000000006690
.text:0000000000006690 enter_dir_isra_10 proc near             ; CODE XREF: fts_build+616↓p
.text:0000000000006690                                         ; rpl_fts_read+383↓p
.text:0000000000006690 ; __unwind {
.text:0000000000006690                 and     edi, 102h
.text:0000000000006696                 push    r12
.text:0000000000006698                 mov     r12, rsi
.text:000000000000669B                 push    rbp
.text:000000000000669C                 push    rbx
.text:000000000000669D                 mov     rbx, rdx
.text:00000000000066A0                 jz      short loc_6710
.text:00000000000066A2                 mov     edi, 18h        ; size
.text:00000000000066A7                 call    _malloc
.text:00000000000066AC                 test    rax, rax
.text:00000000000066AF                 mov     rbp, rax
.text:00000000000066B2                 jz      loc_6738
.text:00000000000066B8                 mov     rax, [rbx+78h]
.text:00000000000066BC                 mov     rdi, [r12]
.text:00000000000066C0                 mov     rsi, rbp
.text:00000000000066C3                 mov     [rbp+10h], rbx
.text:00000000000066C7                 mov     [rbp+0], rax
.text:00000000000066CB                 mov     rax, [rbx+80h]
.text:00000000000066D2                 mov     [rbp+8], rax
.text:00000000000066D6                 call    hash_insert
.text:00000000000066DB                 cmp     rbp, rax
.text:00000000000066DE                 mov     r12, rax
.text:00000000000066E1                 jz      short loc_6701
.text:00000000000066E3                 mov     rdi, rbp        ; ptr
.text:00000000000066E6                 call    free
.text:00000000000066EB                 test    r12, r12
.text:00000000000066EE                 jz      short loc_6738
.text:00000000000066F0                 mov     rax, [r12+10h]
.text:00000000000066F5                 mov     ecx, 2
.text:00000000000066FA                 mov     [rbx+70h], cx
.text:00000000000066FE                 mov     [rbx], rax
.text:0000000000006701
.text:0000000000006701 loc_6701:                               ; CODE XREF: enter_dir_isra_10+51↑j
.text:0000000000006701                                         ; enter_dir_isra_10+8F↓j
.text:0000000000006701                 pop     rbx
.text:0000000000006702                 mov     eax, 1
.text:0000000000006707                 pop     rbp
.text:0000000000006708                 pop     r12
.text:000000000000670A                 retn
.text:000000000000670A ; ---------------------------------------------------------------------------
.text:000000000000670B                 align 10h
.text:0000000000006710
.text:0000000000006710 loc_6710:                               ; CODE XREF: enter_dir_isra_10+10↑j
.text:0000000000006710                 mov     rdi, [r12]
.text:0000000000006714                 lea     rsi, [rdx+78h]
.text:0000000000006718                 call    cycle_check
.text:000000000000671D                 test    al, al
.text:000000000000671F                 jz      short loc_6701
.text:0000000000006721                 mov     edx, 2
.text:0000000000006726                 mov     [rbx], rbx
.text:0000000000006729                 mov     [rbx+70h], dx
.text:000000000000672D                 pop     rbx
.text:000000000000672E                 pop     rbp
.text:000000000000672F                 pop     r12
.text:0000000000006731                 retn
.text:0000000000006731 ; ---------------------------------------------------------------------------
.text:0000000000006732                 align 8
.text:0000000000006738
.text:0000000000006738 loc_6738:                               ; CODE XREF: enter_dir_isra_10+22↑j
.text:0000000000006738                                         ; enter_dir_isra_10+5E↑j
.text:0000000000006738                 pop     rbx
.text:0000000000006739                 xor     eax, eax
.text:000000000000673B                 pop     rbp
.text:000000000000673C                 pop     r12
.text:000000000000673E                 retn
.text:000000000000673E ; } // starts at 6690
.text:000000000000673E enter_dir_isra_10 endp
.text:000000000000673E
.text:000000000000673E ; ---------------------------------------------------------------------------
.text:000000000000673F                 align 20h
.text:0000000000006740
.text:0000000000006740 ; =============== S U B R O U T I N E =======================================
.text:0000000000006740
.text:0000000000006740
.text:0000000000006740 leave_dir_isra_12 proc near             ; CODE XREF: fts_build+5FA↓p
.text:0000000000006740                                         ; rpl_fts_read+195↓p ...
.text:0000000000006740
.text:0000000000006740 var_28          = qword ptr -28h
.text:0000000000006740 var_20          = qword ptr -20h
.text:0000000000006740 var_10          = qword ptr -10h
.text:0000000000006740
.text:0000000000006740 ; __unwind {
.text:0000000000006740                 sub     rsp, 28h
.text:0000000000006744                 mov     rcx, rsi
.text:0000000000006747                 mov     rax, fs:28h
.text:0000000000006750                 mov     [rsp+28h+var_10], rax
.text:0000000000006755                 xor     eax, eax
.text:0000000000006757                 and     edi, 102h
.text:000000000000675D                 jnz     short loc_67A0
.text:000000000000675F                 mov     rax, [rdx+8]
.text:0000000000006763                 test    rax, rax
.text:0000000000006766                 jz      short loc_6785
.text:0000000000006768                 cmp     qword ptr [rax+58h], 0
.text:000000000000676D                 js      short loc_6785
.text:000000000000676F                 mov     rcx, [rsi]
.text:0000000000006772                 cmp     qword ptr [rcx+10h], 0
.text:0000000000006777                 jz      short loc_67F3
.text:0000000000006779                 mov     rsi, [rdx+80h]
.text:0000000000006780                 cmp     [rcx], rsi
.text:0000000000006783                 jz      short loc_67D0
.text:0000000000006785
.text:0000000000006785 loc_6785:                               ; CODE XREF: leave_dir_isra_12+26↑j
.text:0000000000006785                                         ; leave_dir_isra_12+2D↑j ...
.text:0000000000006785                 mov     rax, [rsp+28h+var_10]
.text:000000000000678A                 xor     rax, fs:28h
.text:0000000000006793                 jnz     short loc_67EE
.text:0000000000006795                 add     rsp, 28h
.text:0000000000006799                 retn
.text:0000000000006799 ; ---------------------------------------------------------------------------
.text:000000000000679A                 align 20h
.text:00000000000067A0
.text:00000000000067A0 loc_67A0:                               ; CODE XREF: leave_dir_isra_12+1D↑j
.text:00000000000067A0                 mov     rax, [rdx+78h]
.text:00000000000067A4                 mov     rdi, [rcx]
.text:00000000000067A7                 mov     rsi, rsp
.text:00000000000067AA                 mov     [rsp+28h+var_28], rax
.text:00000000000067AE                 mov     rax, [rdx+80h]
.text:00000000000067B5                 mov     [rsp+28h+var_20], rax
.text:00000000000067BA                 call    hash_delete
.text:00000000000067BF                 test    rax, rax
.text:00000000000067C2                 jz      short loc_67F3
.text:00000000000067C4                 mov     rdi, rax        ; ptr
.text:00000000000067C7                 call    free
.text:00000000000067CC                 jmp     short loc_6785
.text:00000000000067CC ; ---------------------------------------------------------------------------
.text:00000000000067CE                 align 10h
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: leave_dir_isra_12+43↑j
.text:00000000000067D0                 mov     rsi, [rdx+78h]
.text:00000000000067D4                 cmp     [rcx+8], rsi
.text:00000000000067D8                 jnz     short loc_6785
.text:00000000000067DA                 mov     rdx, [rax+78h]
.text:00000000000067DE                 mov     rax, [rax+80h]
.text:00000000000067E5                 mov     [rcx+8], rdx
.text:00000000000067E9                 mov     [rcx], rax
.text:00000000000067EC                 jmp     short loc_6785
.text:00000000000067EE ; ---------------------------------------------------------------------------
.text:00000000000067EE
.text:00000000000067EE loc_67EE:                               ; CODE XREF: leave_dir_isra_12+53↑j
.text:00000000000067EE                 call    ___stack_chk_fail
.text:00000000000067F3 ; ---------------------------------------------------------------------------
.text:00000000000067F3
.text:00000000000067F3 loc_67F3:                               ; CODE XREF: leave_dir_isra_12+37↑j
.text:00000000000067F3                                         ; leave_dir_isra_12+82↑j
.text:00000000000067F3                 call    _abort
.text:00000000000067F3 ; } // starts at 6740
.text:00000000000067F3 leave_dir_isra_12 endp
.text:00000000000067F3
.text:00000000000067F3 ; ---------------------------------------------------------------------------
.text:00000000000067F8                 align 20h
.text:0000000000006800
.text:0000000000006800 ; =============== S U B R O U T I N E =======================================
.text:0000000000006800
.text:0000000000006800
.text:0000000000006800 fts_build       proc near               ; CODE XREF: rpl_fts_read+420↓p
.text:0000000000006800                                         ; rpl_fts_read+619↓p ...
.text:0000000000006800
.text:0000000000006800 var_A0          = qword ptr -0A0h
.text:0000000000006800 ptr             = qword ptr -98h
.text:0000000000006800 var_90          = qword ptr -90h
.text:0000000000006800 var_88          = qword ptr -88h
.text:0000000000006800 var_80          = qword ptr -80h
.text:0000000000006800 var_78          = qword ptr -78h
.text:0000000000006800 var_70          = qword ptr -70h
.text:0000000000006800 dest            = qword ptr -68h
.text:0000000000006800 var_60          = qword ptr -60h
.text:0000000000006800 var_58          = qword ptr -58h
.text:0000000000006800 var_50          = dword ptr -50h
.text:0000000000006800 var_4B          = byte ptr -4Bh
.text:0000000000006800 var_4A          = byte ptr -4Ah
.text:0000000000006800 var_49          = byte ptr -49h
.text:0000000000006800 fd              = dword ptr -44h
.text:0000000000006800 var_40          = qword ptr -40h
.text:0000000000006800
.text:0000000000006800 ; __unwind {
.text:0000000000006800                 push    r15
.text:0000000000006802                 push    r14
.text:0000000000006804                 mov     r15, rdi
.text:0000000000006807                 push    r13
.text:0000000000006809                 push    r12
.text:000000000000680B                 push    rbp
.text:000000000000680C                 push    rbx
.text:000000000000680D                 sub     rsp, 78h
.text:0000000000006811                 mov     rbp, [rdi]
.text:0000000000006814                 mov     rax, fs:28h
.text:000000000000681D                 mov     [rsp+0A8h+var_40], rax
.text:0000000000006822                 xor     eax, eax
.text:0000000000006824                 mov     [rsp+0A8h+var_50], esi
.text:0000000000006828                 mov     rax, [rbp+18h]
.text:000000000000682C                 test    rax, rax
.text:000000000000682F                 mov     [rsp+0A8h+var_58], rax
.text:0000000000006834                 jz      loc_6C70
.text:000000000000683A                 mov     rdi, rax        ; dirp
.text:000000000000683D                 call    _dirfd
.text:0000000000006842                 test    eax, eax
.text:0000000000006844                 mov     [rsp+0A8h+fd], eax
.text:0000000000006848                 js      loc_6DA0
.text:000000000000684E                 cmp     qword ptr [r15+40h], 0
.text:0000000000006853                 jz      loc_7028
.text:0000000000006859                 mov     [rsp+0A8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:0000000000006862
.text:0000000000006862 loc_6862:                               ; CODE XREF: fts_build+89F↓j
.text:0000000000006862                 mov     edi, [r15+48h]
.text:0000000000006866                 mov     [rsp+0A8h+var_49], 1
.text:000000000000686B
.text:000000000000686B loc_686B:                               ; CODE XREF: fts_build+57D↓j
.text:000000000000686B                                         ; fts_build+83A↓j ...
.text:000000000000686B                 mov     rcx, [rbp+48h]
.text:000000000000686F                 mov     rdx, [rbp+38h]
.text:0000000000006873                 mov     [rsp+0A8h+dest], 0
.text:000000000000687C                 cmp     byte ptr [rdx+rcx-1], 2Fh ; '/'
.text:0000000000006881                 lea     rax, [rcx-1]
.text:0000000000006885                 cmovnz  rax, rcx
.text:0000000000006889                 and     edi, 4
.text:000000000000688C                 mov     [rsp+0A8h+var_60], rax
.text:0000000000006891                 jz      short loc_68A3
.text:0000000000006893                 add     rax, [r15+20h]
.text:0000000000006897                 lea     rbx, [rax+1]
.text:000000000000689B                 mov     byte ptr [rax], 2Fh ; '/'
.text:000000000000689E                 mov     [rsp+0A8h+dest], rbx
.text:00000000000068A3
.text:00000000000068A3 loc_68A3:                               ; CODE XREF: fts_build+91↑j
.text:00000000000068A3                 mov     rax, [rsp+0A8h+var_60]
.text:00000000000068A8                 mov     rbx, [r15+30h]
.text:00000000000068AC                 mov     [rsp+0A8h+var_4A], 0
.text:00000000000068B1                 mov     [rsp+0A8h+var_4B], 0
.text:00000000000068B6                 mov     [rsp+0A8h+var_A0], 0
.text:00000000000068BF                 mov     [rsp+0A8h+ptr], 0
.text:00000000000068C8                 add     rax, 1
.text:00000000000068CC                 mov     [rsp+0A8h+var_88], rbp
.text:00000000000068D1                 sub     rbx, rax
.text:00000000000068D4                 mov     [rsp+0A8h+var_90], rax
.text:00000000000068D9                 mov     rax, [rbp+58h]
.text:00000000000068DD                 mov     [rsp+0A8h+var_80], rbx
.text:00000000000068E2                 xor     ebx, ebx
.text:00000000000068E4                 add     rax, 1
.text:00000000000068E8                 mov     [rsp+0A8h+var_78], rax
.text:00000000000068ED                 jmp     loc_69CF
.text:00000000000068ED ; ---------------------------------------------------------------------------
.text:00000000000068F2                 align 8
.text:00000000000068F8
.text:00000000000068F8 loc_68F8:                               ; CODE XREF: fts_build+242↓j
.text:00000000000068F8                                         ; fts_build+2A6↓j
.text:00000000000068F8                 mov     r9, r14
.text:00000000000068FB                 add     r9, [rsp+0A8h+var_90]
.text:0000000000006900                 jb      loc_7160
.text:0000000000006906                 mov     rax, [rsp+0A8h+var_78]
.text:000000000000690B                 lea     rsi, [r13+108h] ; src
.text:0000000000006912                 mov     [r13+58h], rax
.text:0000000000006916                 mov     rax, [r15]
.text:0000000000006919                 mov     [r13+48h], r9
.text:000000000000691D                 mov     [r13+8], rax
.text:0000000000006921                 mov     rax, [rbp+0]
.text:0000000000006925                 mov     [r13+80h], rax
.text:000000000000692C                 mov     eax, [r15+48h]
.text:0000000000006930                 test    al, 4
.text:0000000000006932                 jnz     loc_6BA0
.text:0000000000006938                 mov     [r13+30h], rsi
.text:000000000000693C
.text:000000000000693C loc_693C:                               ; CODE XREF: fts_build+3BE↓j
.text:000000000000693C                 cmp     qword ptr [r15+40h], 0
.text:0000000000006941                 jz      short loc_694C
.text:0000000000006943                 test    ah, 4
.text:0000000000006946                 jz      loc_6C48
.text:000000000000694C
.text:000000000000694C loc_694C:                               ; CODE XREF: fts_build+141↑j
.text:000000000000694C                 movzx   edx, byte ptr [rbp+12h]
.text:0000000000006950                 and     eax, 18h
.text:0000000000006953                 mov     esi, edx
.text:0000000000006955                 sub     edx, 1
.text:0000000000006958                 cmp     eax, 18h
.text:000000000000695B                 jz      loc_6C10
.text:0000000000006961
.text:0000000000006961 loc_6961:                               ; CODE XREF: fts_build+416↓j
.text:0000000000006961                 mov     ecx, 0Bh
.text:0000000000006966                 cmp     edx, 0Bh
.text:0000000000006969                 mov     [r13+70h], cx
.text:000000000000696E                 ja      loc_6BD8
.text:0000000000006974                 lea     rax, CSWTCH_53
.text:000000000000697B                 mov     eax, [rax+rdx*4]
.text:000000000000697E                 mov     [r13+90h], eax
.text:0000000000006985                 mov     eax, 2
.text:000000000000698A
.text:000000000000698A loc_698A:                               ; CODE XREF: fts_build+3E8↓j
.text:000000000000698A                                         ; fts_build+43F↓j ...
.text:000000000000698A                 mov     [r13+0A8h], rax
.text:0000000000006991
.text:0000000000006991 loc_6991:                               ; CODE XREF: fts_build+45A↓j
.text:0000000000006991                 cmp     [rsp+0A8h+ptr], 0
.text:0000000000006997                 mov     qword ptr [r13+10h], 0
.text:000000000000699F                 jz      loc_6BC8
.text:00000000000069A5                 mov     rax, [rsp+0A8h+var_A0]
.text:00000000000069AA                 mov     [rax+10h], r13
.text:00000000000069AE
.text:00000000000069AE loc_69AE:                               ; CODE XREF: fts_build+3CD↓j
.text:00000000000069AE                 cmp     rbx, 2710h
.text:00000000000069B5                 jz      loc_6AB0
.text:00000000000069BB
.text:00000000000069BB loc_69BB:                               ; CODE XREF: fts_build+2B5↓j
.text:00000000000069BB                                         ; fts_build+645↓j
.text:00000000000069BB                 add     rbx, 1
.text:00000000000069BF                 cmp     rbx, [rsp+0A8h+var_70]
.text:00000000000069C4                 jnb     loc_6B08
.text:00000000000069CA
.text:00000000000069CA loc_69CA:                               ; CODE XREF: fts_build+2FD↓j
.text:00000000000069CA                                         ; fts_build+406↓j
.text:00000000000069CA                 mov     [rsp+0A8h+var_A0], r13
.text:00000000000069CF
.text:00000000000069CF loc_69CF:                               ; CODE XREF: fts_build+ED↑j
.text:00000000000069CF                 mov     rax, [rsp+0A8h+var_88]
.text:00000000000069D4                 mov     r13, [rax+18h]
.text:00000000000069D8                 test    r13, r13
.text:00000000000069DB                 jz      loc_6EA8
.text:00000000000069E1                 call    ___errno_location
.text:00000000000069E6                 mov     rdi, r13        ; dirp
.text:00000000000069E9                 mov     dword ptr [rax], 0
.text:00000000000069EF                 mov     r12, rax
.text:00000000000069F2                 call    _readdir
.text:00000000000069F7                 test    rax, rax
.text:00000000000069FA                 mov     rbp, rax
.text:00000000000069FD                 jz      loc_6F80
.text:0000000000006A03                 test    byte ptr [r15+48h], 20h
.text:0000000000006A08                 jnz     short loc_6A14
.text:0000000000006A0A                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:0000000000006A0E                 jz      loc_6BF0
.text:0000000000006A14
.text:0000000000006A14 loc_6A14:                               ; CODE XREF: fts_build+208↑j
.text:0000000000006A14                                         ; fts_build+3FB↓j
.text:0000000000006A14                 lea     r13, [rbp+13h]
.text:0000000000006A18                 mov     rdi, r13        ; s
.text:0000000000006A1B                 call    _strlen
.text:0000000000006A20                 mov     rsi, r13
.text:0000000000006A23                 mov     rdx, rax
.text:0000000000006A26                 mov     rdi, r15
.text:0000000000006A29                 mov     r14, rax
.text:0000000000006A2C                 call    fts_alloc
.text:0000000000006A31                 test    rax, rax
.text:0000000000006A34                 mov     r13, rax
.text:0000000000006A37                 jz      loc_6E50
.text:0000000000006A3D                 cmp     [rsp+0A8h+var_80], r14
.text:0000000000006A42                 ja      loc_68F8
.text:0000000000006A48                 mov     rax, [r15+20h]
.text:0000000000006A4C                 lea     rsi, [r15+30h]
.text:0000000000006A50                 lea     rdi, [r15+20h]
.text:0000000000006A54                 mov     [rsp+0A8h+var_80], rax
.text:0000000000006A59                 mov     rax, [rsp+0A8h+var_60]
.text:0000000000006A5E                 lea     rdx, [rax+r14+2]
.text:0000000000006A63                 call    fts_palloc_isra_2
.text:0000000000006A68                 test    al, al
.text:0000000000006A6A                 jz      loc_6E50
.text:0000000000006A70                 mov     rdx, [r15+20h]
.text:0000000000006A74                 cmp     rdx, [rsp+0A8h+var_80]
.text:0000000000006A79                 jz      loc_6C60
.text:0000000000006A7F                 add     rdx, [rsp+0A8h+var_90]
.text:0000000000006A84                 test    byte ptr [r15+48h], 4
.text:0000000000006A89                 cmovz   rdx, [rsp+0A8h+dest]
.text:0000000000006A8F                 mov     [rsp+0A8h+dest], rdx
.text:0000000000006A94
.text:0000000000006A94 loc_6A94:                               ; CODE XREF: fts_build+465↓j
.text:0000000000006A94                 mov     rcx, [r15+30h]
.text:0000000000006A98                 sub     rcx, [rsp+0A8h+var_90]
.text:0000000000006A9D                 mov     [rsp+0A8h+var_4B], al
.text:0000000000006AA1                 mov     [rsp+0A8h+var_80], rcx
.text:0000000000006AA6                 jmp     loc_68F8
.text:0000000000006AA6 ; ---------------------------------------------------------------------------
.text:0000000000006AAB                 align 10h
.text:0000000000006AB0
.text:0000000000006AB0 loc_6AB0:                               ; CODE XREF: fts_build+1B5↑j
.text:0000000000006AB0                 cmp     qword ptr [r15+40h], 0
.text:0000000000006AB5                 jnz     loc_69BB
.text:0000000000006ABB                 mov     esi, [rsp+0A8h+fd]
.text:0000000000006ABF                 mov     rdi, [rsp+0A8h+var_88]
.text:0000000000006AC4                 call    filesystem_type
.text:0000000000006AC9                 cmp     rax, 1021994h
.text:0000000000006ACF                 jz      loc_6E40
.text:0000000000006AD5                 mov     ecx, 0FF534D42h
.text:0000000000006ADA                 cmp     rax, rcx
.text:0000000000006ADD                 jz      loc_6E40
.text:0000000000006AE3                 cmp     rax, 6969h
.text:0000000000006AE9                 jz      loc_6E40
.text:0000000000006AEF                 add     rbx, 1
.text:0000000000006AF3                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000006AF8                 mov     [rsp+0A8h+var_4A], 1
.text:0000000000006AFD                 jb      loc_69CA
.text:0000000000006B03                 nop     dword ptr [rax+rax+00h]
.text:0000000000006B08
.text:0000000000006B08 loc_6B08:                               ; CODE XREF: fts_build+1C4↑j
.text:0000000000006B08                 cmp     [rsp+0A8h+var_4B], 0
.text:0000000000006B0D                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000006B12                 jz      loc_6EB6
.text:0000000000006B18
.text:0000000000006B18 loc_6B18:                               ; CODE XREF: fts_build+6B0↓j
.text:0000000000006B18                 mov     rax, [r15+8]
.text:0000000000006B1C                 mov     rcx, [r15+20h]
.text:0000000000006B20                 test    rax, rax
.text:0000000000006B23                 jz      short loc_6B50
.text:0000000000006B25                 nop     dword ptr [rax]
.text:0000000000006B28
.text:0000000000006B28 loc_6B28:                               ; CODE XREF: fts_build+34E↓j
.text:0000000000006B28                 mov     rdx, [rax+30h]
.text:0000000000006B2C                 lea     rsi, [rax+108h]
.text:0000000000006B33                 cmp     rdx, rsi
.text:0000000000006B36                 jz      short loc_6B43
.text:0000000000006B38                 sub     rdx, [rax+38h]
.text:0000000000006B3C                 add     rdx, rcx
.text:0000000000006B3F                 mov     [rax+30h], rdx
.text:0000000000006B43
.text:0000000000006B43 loc_6B43:                               ; CODE XREF: fts_build+336↑j
.text:0000000000006B43                 mov     [rax+38h], rcx
.text:0000000000006B47                 mov     rax, [rax+10h]
.text:0000000000006B4B                 test    rax, rax
.text:0000000000006B4E                 jnz     short loc_6B28
.text:0000000000006B50
.text:0000000000006B50 loc_6B50:                               ; CODE XREF: fts_build+323↑j
.text:0000000000006B50                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000006B55                 jmp     short loc_6B63
.text:0000000000006B55 ; ---------------------------------------------------------------------------
.text:0000000000006B57                 align 20h
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: fts_build+394↓j
.text:0000000000006B60                                         ; fts_build+39A↓j
.text:0000000000006B60                 mov     rax, rdx
.text:0000000000006B63
.text:0000000000006B63 loc_6B63:                               ; CODE XREF: fts_build+355↑j
.text:0000000000006B63                 cmp     qword ptr [rax+58h], 0
.text:0000000000006B68                 js      loc_6EB6
.text:0000000000006B6E                 mov     rdx, [rax+30h]
.text:0000000000006B72                 lea     rsi, [rax+108h]
.text:0000000000006B79                 cmp     rdx, rsi
.text:0000000000006B7C                 jz      short loc_6B89
.text:0000000000006B7E                 sub     rdx, [rax+38h]
.text:0000000000006B82                 add     rdx, rcx
.text:0000000000006B85                 mov     [rax+30h], rdx
.text:0000000000006B89
.text:0000000000006B89 loc_6B89:                               ; CODE XREF: fts_build+37C↑j
.text:0000000000006B89                 mov     rdx, [rax+10h]
.text:0000000000006B8D                 mov     [rax+38h], rcx
.text:0000000000006B91                 test    rdx, rdx
.text:0000000000006B94                 jnz     short loc_6B60
.text:0000000000006B96                 mov     rdx, [rax+8]
.text:0000000000006B9A                 jmp     short loc_6B60
.text:0000000000006B9A ; ---------------------------------------------------------------------------
.text:0000000000006B9C                 align 20h
.text:0000000000006BA0
.text:0000000000006BA0 loc_6BA0:                               ; CODE XREF: fts_build+132↑j
.text:0000000000006BA0                 mov     rax, [r13+38h]
.text:0000000000006BA4                 mov     rdi, [rsp+0A8h+dest] ; dest
.text:0000000000006BA9                 mov     [r13+30h], rax
.text:0000000000006BAD                 mov     rax, [r13+60h]
.text:0000000000006BB1                 lea     rdx, [rax+1]    ; n
.text:0000000000006BB5                 call    _memmove
.text:0000000000006BBA                 mov     eax, [r15+48h]
.text:0000000000006BBE                 jmp     loc_693C
.text:0000000000006BBE ; ---------------------------------------------------------------------------
.text:0000000000006BC3                 align 8
.text:0000000000006BC8
.text:0000000000006BC8 loc_6BC8:                               ; CODE XREF: fts_build+19F↑j
.text:0000000000006BC8                 mov     [rsp+0A8h+ptr], r13
.text:0000000000006BCD                 jmp     loc_69AE
.text:0000000000006BCD ; ---------------------------------------------------------------------------
.text:0000000000006BD2                 align 8
.text:0000000000006BD8
.text:0000000000006BD8 loc_6BD8:                               ; CODE XREF: fts_build+16E↑j
.text:0000000000006BD8                 mov     dword ptr [r13+90h], 0
.text:0000000000006BE3                 mov     eax, 2
.text:0000000000006BE8                 jmp     loc_698A
.text:0000000000006BE8 ; ---------------------------------------------------------------------------
.text:0000000000006BED                 align 10h
.text:0000000000006BF0
.text:0000000000006BF0 loc_6BF0:                               ; CODE XREF: fts_build+20E↑j
.text:0000000000006BF0                 cmp     byte ptr [rax+14h], 0
.text:0000000000006BF4                 jz      short loc_6C01
.text:0000000000006BF6                 cmp     word ptr [rax+14h], 2Eh ; '.'
.text:0000000000006BFB                 jnz     loc_6A14
.text:0000000000006C01
.text:0000000000006C01 loc_6C01:                               ; CODE XREF: fts_build+3F4↑j
.text:0000000000006C01                 mov     r13, [rsp+0A8h+var_A0]
.text:0000000000006C06                 jmp     loc_69CA
.text:0000000000006C06 ; ---------------------------------------------------------------------------
.text:0000000000006C0B                 align 10h
.text:0000000000006C10
.text:0000000000006C10 loc_6C10:                               ; CODE XREF: fts_build+15B↑j
.text:0000000000006C10                 and     esi, 0FBh
.text:0000000000006C16                 jz      loc_6961
.text:0000000000006C1C                 mov     eax, 0Bh
.text:0000000000006C21                 cmp     edx, 0Bh
.text:0000000000006C24                 mov     [r13+70h], ax
.text:0000000000006C29                 jbe     loc_71B6
.text:0000000000006C2F                 mov     dword ptr [r13+90h], 0
.text:0000000000006C3A                 mov     eax, 1
.text:0000000000006C3F                 jmp     loc_698A
.text:0000000000006C3F ; ---------------------------------------------------------------------------
.text:0000000000006C44                 align 8
.text:0000000000006C48
.text:0000000000006C48 loc_6C48:                               ; CODE XREF: fts_build+146↑j
.text:0000000000006C48                 xor     edx, edx
.text:0000000000006C4A                 mov     rsi, r13
.text:0000000000006C4D                 mov     rdi, r15
.text:0000000000006C50                 call    fts_stat
.text:0000000000006C55                 mov     [r13+70h], ax
.text:0000000000006C5A                 jmp     loc_6991
.text:0000000000006C5A ; ---------------------------------------------------------------------------
.text:0000000000006C5F                 align 20h
.text:0000000000006C60
.text:0000000000006C60 loc_6C60:                               ; CODE XREF: fts_build+279↑j
.text:0000000000006C60                 movzx   eax, [rsp+0A8h+var_4B]
.text:0000000000006C65                 jmp     loc_6A94
.text:0000000000006C65 ; ---------------------------------------------------------------------------
.text:0000000000006C6A                 align 10h
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: fts_build+34↑j
.text:0000000000006C70                 mov     eax, [rdi+48h]
.text:0000000000006C73                 mov     edx, eax
.text:0000000000006C75                 and     edx, 10h
.text:0000000000006C78                 jz      short loc_6C87
.text:0000000000006C7A                 test    al, 1
.text:0000000000006C7C                 mov     edx, 20000h
.text:0000000000006C81                 jnz     loc_6D88
.text:0000000000006C87
.text:0000000000006C87 loc_6C87:                               ; CODE XREF: fts_build+478↑j
.text:0000000000006C87                                         ; fts_build+595↓j
.text:0000000000006C87                 and     eax, 204h
.text:0000000000006C8C                 mov     rsi, [rbp+30h]
.text:0000000000006C90                 mov     edi, 0FFFFFF9Ch
.text:0000000000006C95                 cmp     eax, 200h
.text:0000000000006C9A                 jnz     short loc_6CA0
.text:0000000000006C9C                 mov     edi, [r15+2Ch]
.text:0000000000006CA0
.text:0000000000006CA0 loc_6CA0:                               ; CODE XREF: fts_build+49A↑j
.text:0000000000006CA0                 lea     rcx, [rsp+0A8h+fd]
.text:0000000000006CA5                 call    opendirat
.text:0000000000006CAA                 test    rax, rax
.text:0000000000006CAD                 mov     [rbp+18h], rax
.text:0000000000006CB1                 jz      loc_6FD0
.text:0000000000006CB7                 cmp     word ptr [rbp+70h], 0Bh
.text:0000000000006CBC                 jz      loc_7050
.text:0000000000006CC2                 mov     edi, [r15+48h]
.text:0000000000006CC6                 test    edi, 100h
.text:0000000000006CCC                 jnz     loc_6DF0
.text:0000000000006CD2
.text:0000000000006CD2 loc_6CD2:                               ; CODE XREF: fts_build+61D↓j
.text:0000000000006CD2                                         ; fts_build+861↓j
.text:0000000000006CD2                 cmp     qword ptr [r15+40h], 1
.text:0000000000006CD7                 sbb     rax, rax
.text:0000000000006CDA                 and     eax, 186A1h
.text:0000000000006CDF                 sub     rax, 1
.text:0000000000006CE3                 cmp     [rsp+0A8h+var_50], 2
.text:0000000000006CE8                 mov     [rsp+0A8h+var_70], rax
.text:0000000000006CED                 jz      loc_7040
.text:0000000000006CF3                 mov     edx, [r15+48h]
.text:0000000000006CF7                 mov     eax, [rsp+0A8h+fd]
.text:0000000000006CFB                 and     edx, 38h
.text:0000000000006CFE                 cmp     edx, 18h
.text:0000000000006D01                 jz      loc_70A4
.text:0000000000006D07
.text:0000000000006D07 loc_6D07:                               ; CODE XREF: fts_build+8AC↓j
.text:0000000000006D07                                         ; fts_build+8C4↓j
.text:0000000000006D07                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000006D0C                 mov     r12d, 1
.text:0000000000006D12                 setz    bl
.text:0000000000006D15
.text:0000000000006D15 loc_6D15:                               ; CODE XREF: fts_build+955↓j
.text:0000000000006D15                 test    byte ptr [r15+49h], 2
.text:0000000000006D1A                 jnz     loc_70FC
.text:0000000000006D20
.text:0000000000006D20 loc_6D20:                               ; CODE XREF: fts_build+913↓j
.text:0000000000006D20                 test    eax, eax
.text:0000000000006D22                 jns     loc_7088
.text:0000000000006D28
.text:0000000000006D28 loc_6D28:                               ; CODE XREF: fts_build+899↓j
.text:0000000000006D28                 test    bl, bl
.text:0000000000006D2A                 jz      short loc_6D3B
.text:0000000000006D2C                 test    r12b, r12b
.text:0000000000006D2F                 jz      short loc_6D3B
.text:0000000000006D31                 call    ___errno_location
.text:0000000000006D36                 mov     eax, [rax]
.text:0000000000006D38                 mov     [rbp+40h], eax
.text:0000000000006D3B
.text:0000000000006D3B loc_6D3B:                               ; CODE XREF: fts_build+52A↑j
.text:0000000000006D3B                                         ; fts_build+52F↑j
.text:0000000000006D3B                 or      word ptr [rbp+72h], 1
.text:0000000000006D40                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006D44                 call    _closedir
.text:0000000000006D49                 mov     edi, [r15+48h]
.text:0000000000006D4D                 mov     qword ptr [rbp+18h], 0
.text:0000000000006D55                 test    edi, 200h
.text:0000000000006D5B                 jz      short loc_6D70
.text:0000000000006D5D                 mov     eax, [rsp+0A8h+fd]
.text:0000000000006D61                 test    eax, eax
.text:0000000000006D63                 js      short loc_6D70
.text:0000000000006D65                 mov     edi, eax        ; fd
.text:0000000000006D67                 call    _close
.text:0000000000006D6C                 mov     edi, [r15+48h]
.text:0000000000006D70
.text:0000000000006D70 loc_6D70:                               ; CODE XREF: fts_build+55B↑j
.text:0000000000006D70                                         ; fts_build+563↑j
.text:0000000000006D70                 mov     qword ptr [rbp+18h], 0
.text:0000000000006D78                 mov     [rsp+0A8h+var_49], 0
.text:0000000000006D7D                 jmp     loc_686B
.text:0000000000006D7D ; ---------------------------------------------------------------------------
.text:0000000000006D82                 align 8
.text:0000000000006D88
.text:0000000000006D88 loc_6D88:                               ; CODE XREF: fts_build+481↑j
.text:0000000000006D88                 xor     edx, edx
.text:0000000000006D8A                 cmp     qword ptr [rbp+58h], 0
.text:0000000000006D8F                 setnz   dl
.text:0000000000006D92                 shl     edx, 11h
.text:0000000000006D95                 jmp     loc_6C87
.text:0000000000006D95 ; ---------------------------------------------------------------------------
.text:0000000000006D9A                 align 20h
.text:0000000000006DA0
.text:0000000000006DA0 loc_6DA0:                               ; CODE XREF: fts_build+48↑j
.text:0000000000006DA0                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006DA4                 call    _closedir
.text:0000000000006DA9                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000006DAE                 mov     qword ptr [rbp+18h], 0
.text:0000000000006DB6                 jz      loc_6FDB
.text:0000000000006DBC
.text:0000000000006DBC loc_6DBC:                               ; CODE XREF: fts_build+7D5↓j
.text:0000000000006DBC                                         ; fts_build+7F0↓j
.text:0000000000006DBC                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006DC5
.text:0000000000006DC5 loc_6DC5:                               ; CODE XREF: fts_build+637↓j
.text:0000000000006DC5                                         ; fts_build+69C↓j ...
.text:0000000000006DC5                 mov     rbx, [rsp+0A8h+var_40]
.text:0000000000006DCA                 xor     rbx, fs:28h
.text:0000000000006DD3                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000006DD8                 jnz     loc_71B1
.text:0000000000006DDE                 add     rsp, 78h
.text:0000000000006DE2                 pop     rbx
.text:0000000000006DE3                 pop     rbp
.text:0000000000006DE4                 pop     r12
.text:0000000000006DE6                 pop     r13
.text:0000000000006DE8                 pop     r14
.text:0000000000006DEA                 pop     r15
.text:0000000000006DEC                 retn
.text:0000000000006DEC ; ---------------------------------------------------------------------------
.text:0000000000006DED                 align 10h
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: fts_build+4CC↑j
.text:0000000000006DF0                 lea     rbx, [r15+58h]
.text:0000000000006DF4                 mov     rdx, rbp
.text:0000000000006DF7                 mov     rsi, rbx
.text:0000000000006DFA                 call    leave_dir_isra_12
.text:0000000000006DFF                 xor     edx, edx
.text:0000000000006E01                 mov     rsi, rbp
.text:0000000000006E04                 mov     rdi, r15
.text:0000000000006E07                 call    fts_stat
.text:0000000000006E0C                 mov     edi, [r15+48h]
.text:0000000000006E10                 mov     rdx, rbp
.text:0000000000006E13                 mov     rsi, rbx
.text:0000000000006E16                 call    enter_dir_isra_10
.text:0000000000006E1B                 test    al, al
.text:0000000000006E1D                 jnz     loc_6CD2
.text:0000000000006E23                 call    ___errno_location
.text:0000000000006E28                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006E31                 mov     dword ptr [rax], 0Ch
.text:0000000000006E37                 jmp     short loc_6DC5
.text:0000000000006E37 ; ---------------------------------------------------------------------------
.text:0000000000006E39                 align 20h
.text:0000000000006E40
.text:0000000000006E40 loc_6E40:                               ; CODE XREF: fts_build+2CF↑j
.text:0000000000006E40                                         ; fts_build+2DD↑j ...
.text:0000000000006E40                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000006E45                 jmp     loc_69BB
.text:0000000000006E45 ; ---------------------------------------------------------------------------
.text:0000000000006E4A                 align 10h
.text:0000000000006E50
.text:0000000000006E50 loc_6E50:                               ; CODE XREF: fts_build+237↑j
.text:0000000000006E50                                         ; fts_build+26A↑j
.text:0000000000006E50                 mov     rdi, r13        ; ptr
.text:0000000000006E53                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000006E58                 mov     ebx, [r12]
.text:0000000000006E5C                 call    free
.text:0000000000006E61                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000006E66                 call    fts_lfree
.text:0000000000006E6B                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006E6F                 call    _closedir
.text:0000000000006E74                 mov     r9d, 7
.text:0000000000006E7A                 mov     qword ptr [rbp+18h], 0
.text:0000000000006E82                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006E8B                 mov     [rbp+70h], r9w
.text:0000000000006E90                 or      dword ptr [r15+48h], 2000h
.text:0000000000006E98                 mov     [r12], ebx
.text:0000000000006E9C                 jmp     loc_6DC5
.text:0000000000006E9C ; ---------------------------------------------------------------------------
.text:0000000000006EA1                 align 8
.text:0000000000006EA8
.text:0000000000006EA8 loc_6EA8:                               ; CODE XREF: fts_build+1DB↑j
.text:0000000000006EA8                 mov     rbp, rax
.text:0000000000006EAB
.text:0000000000006EAB loc_6EAB:                               ; CODE XREF: fts_build+7B5↓j
.text:0000000000006EAB                                         ; fts_build+7C8↓j
.text:0000000000006EAB                 cmp     [rsp+0A8h+var_4B], 0
.text:0000000000006EB0                 jnz     loc_6B18
.text:0000000000006EB6
.text:0000000000006EB6 loc_6EB6:                               ; CODE XREF: fts_build+312↑j
.text:0000000000006EB6                                         ; fts_build+368↑j
.text:0000000000006EB6                 test    byte ptr [r15+48h], 4
.text:0000000000006EBB                 jz      short loc_6EDB
.text:0000000000006EBD                 mov     rax, [rsp+0A8h+var_90]
.text:0000000000006EC2                 cmp     [r15+30h], rax
.text:0000000000006EC6                 jz      short loc_6ECD
.text:0000000000006EC8                 test    rbx, rbx
.text:0000000000006ECB                 jnz     short loc_6ED3
.text:0000000000006ECD
.text:0000000000006ECD loc_6ECD:                               ; CODE XREF: fts_build+6C6↑j
.text:0000000000006ECD                 sub     [rsp+0A8h+dest], 1
.text:0000000000006ED3
.text:0000000000006ED3 loc_6ED3:                               ; CODE XREF: fts_build+6CB↑j
.text:0000000000006ED3                 mov     rax, [rsp+0A8h+dest]
.text:0000000000006ED8                 mov     byte ptr [rax], 0
.text:0000000000006EDB
.text:0000000000006EDB loc_6EDB:                               ; CODE XREF: fts_build+6BB↑j
.text:0000000000006EDB                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000006EE1                 jnz     short loc_6F50
.text:0000000000006EE3                 cmp     [rsp+0A8h+var_49], 0
.text:0000000000006EE8                 jz      short loc_6F50
.text:0000000000006EEA                 cmp     [rsp+0A8h+var_50], 1
.text:0000000000006EEF                 jz      short loc_6F30
.text:0000000000006EF1                 test    rbx, rbx
.text:0000000000006EF4                 jz      short loc_6F30
.text:0000000000006EF6
.text:0000000000006EF6 loc_6EF6:                               ; CODE XREF: fts_build+753↓j
.text:0000000000006EF6                 cmp     [rsp+0A8h+var_4A], 0
.text:0000000000006EFB                 jnz     loc_6FF8
.text:0000000000006F01                 cmp     qword ptr [r15+40h], 0
.text:0000000000006F06                 jz      loc_6DC5
.text:0000000000006F0C                 cmp     rbx, 1
.text:0000000000006F10                 jz      loc_6DC5
.text:0000000000006F16                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000006F1B                 mov     rdx, rbx
.text:0000000000006F1E                 mov     rdi, r15
.text:0000000000006F21                 call    fts_sort
.text:0000000000006F26                 mov     [rsp+0A8h+ptr], rax
.text:0000000000006F2B                 jmp     loc_6DC5
.text:0000000000006F30 ; ---------------------------------------------------------------------------
.text:0000000000006F30
.text:0000000000006F30 loc_6F30:                               ; CODE XREF: fts_build+6EF↑j
.text:0000000000006F30                                         ; fts_build+6F4↑j
.text:0000000000006F30                 cmp     qword ptr [rbp+58h], 0
.text:0000000000006F35                 jnz     loc_7066
.text:0000000000006F3B                 mov     rdi, r15
.text:0000000000006F3E                 call    restore_initial_cwd
.text:0000000000006F43                 test    eax, eax
.text:0000000000006F45                 setnz   al
.text:0000000000006F48
.text:0000000000006F48 loc_6F48:                               ; CODE XREF: fts_build+883↓j
.text:0000000000006F48                 test    al, al
.text:0000000000006F4A                 jnz     loc_70D3
.text:0000000000006F50
.text:0000000000006F50 loc_6F50:                               ; CODE XREF: fts_build+6E1↑j
.text:0000000000006F50                                         ; fts_build+6E8↑j
.text:0000000000006F50                 test    rbx, rbx
.text:0000000000006F53                 jnz     short loc_6EF6
.text:0000000000006F55                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000006F5A                 jz      loc_7118
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: fts_build+920↓j
.text:0000000000006F60                                         ; fts_build+92A↓j ...
.text:0000000000006F60                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000006F65                 call    fts_lfree
.text:0000000000006F6A                 mov     [rsp+0A8h+ptr], 0
.text:0000000000006F73                 jmp     loc_6DC5
.text:0000000000006F73 ; ---------------------------------------------------------------------------
.text:0000000000006F78                 align 20h
.text:0000000000006F80
.text:0000000000006F80 loc_6F80:                               ; CODE XREF: fts_build+1FD↑j
.text:0000000000006F80                 mov     eax, [r12]
.text:0000000000006F84                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000006F89                 test    eax, eax
.text:0000000000006F8B                 jz      short loc_6FAE
.text:0000000000006F8D                 test    rbx, rbx
.text:0000000000006F90                 mov     [rbp+40h], eax
.text:0000000000006F93                 jnz     loc_70C9
.text:0000000000006F99                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000006F9F                 mov     eax, 4
.text:0000000000006FA4                 jnz     loc_70C9
.text:0000000000006FAA
.text:0000000000006FAA loc_6FAA:                               ; CODE XREF: fts_build+8CE↓j
.text:0000000000006FAA                 mov     [rbp+70h], ax
.text:0000000000006FAE
.text:0000000000006FAE loc_6FAE:                               ; CODE XREF: fts_build+78B↑j
.text:0000000000006FAE                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000006FB2                 test    rdi, rdi
.text:0000000000006FB5                 jz      loc_6EAB
.text:0000000000006FBB                 call    _closedir
.text:0000000000006FC0                 mov     qword ptr [rbp+18h], 0
.text:0000000000006FC8                 jmp     loc_6EAB
.text:0000000000006FC8 ; ---------------------------------------------------------------------------
.text:0000000000006FCD                 align 10h
.text:0000000000006FD0
.text:0000000000006FD0 loc_6FD0:                               ; CODE XREF: fts_build+4B1↑j
.text:0000000000006FD0                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000006FD5                 jnz     loc_6DBC
.text:0000000000006FDB
.text:0000000000006FDB loc_6FDB:                               ; CODE XREF: fts_build+5B6↑j
.text:0000000000006FDB                 mov     r10d, 4
.text:0000000000006FE1                 mov     [rbp+70h], r10w
.text:0000000000006FE6                 call    ___errno_location
.text:0000000000006FEB                 mov     eax, [rax]
.text:0000000000006FED                 mov     [rbp+40h], eax
.text:0000000000006FF0                 jmp     loc_6DBC
.text:0000000000006FF0 ; ---------------------------------------------------------------------------
.text:0000000000006FF5                 align 8
.text:0000000000006FF8
.text:0000000000006FF8 loc_6FF8:                               ; CODE XREF: fts_build+6FB↑j
.text:0000000000006FF8                 lea     rax, fts_compare_ino
.text:0000000000006FFF                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000007004                 mov     rdx, rbx
.text:0000000000007007                 mov     rdi, r15
.text:000000000000700A                 mov     [r15+40h], rax
.text:000000000000700E                 call    fts_sort
.text:0000000000007013                 mov     qword ptr [r15+40h], 0
.text:000000000000701B                 mov     [rsp+0A8h+ptr], rax
.text:0000000000007020                 jmp     loc_6DC5
.text:0000000000007020 ; ---------------------------------------------------------------------------
.text:0000000000007025                 align 8
.text:0000000000007028
.text:0000000000007028 loc_7028:                               ; CODE XREF: fts_build+53↑j
.text:0000000000007028                 mov     [rsp+0A8h+var_70], 186A0h
.text:0000000000007031                 mov     [rsp+0A8h+var_49], 1
.text:0000000000007036                 mov     edi, [r15+48h]
.text:000000000000703A                 jmp     loc_686B
.text:000000000000703A ; ---------------------------------------------------------------------------
.text:000000000000703F                 align 20h
.text:0000000000007040
.text:0000000000007040 loc_7040:                               ; CODE XREF: fts_build+4ED↑j
.text:0000000000007040                                         ; fts_build+943↓j
.text:0000000000007040                 mov     [rsp+0A8h+var_49], 0
.text:0000000000007045                 mov     edi, [r15+48h]
.text:0000000000007049                 jmp     loc_686B
.text:0000000000007049 ; ---------------------------------------------------------------------------
.text:000000000000704E                 align 10h
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: fts_build+4BC↑j
.text:0000000000007050                 xor     edx, edx
.text:0000000000007052                 mov     rsi, rbp
.text:0000000000007055                 mov     rdi, r15
.text:0000000000007058                 call    fts_stat
.text:000000000000705D                 mov     [rbp+70h], ax
.text:0000000000007061                 jmp     loc_6CD2
.text:0000000000007066 ; ---------------------------------------------------------------------------
.text:0000000000007066
.text:0000000000007066 loc_7066:                               ; CODE XREF: fts_build+735↑j
.text:0000000000007066                 mov     rsi, [rbp+8]
.text:000000000000706A                 lea     rcx, asc_AF1A   ; ".."
.text:0000000000007071                 mov     edx, 0FFFFFFFFh
.text:0000000000007076                 mov     rdi, r15
.text:0000000000007079                 call    fts_safe_changedir
.text:000000000000707E                 test    eax, eax
.text:0000000000007080                 setnz   al
.text:0000000000007083                 jmp     loc_6F48
.text:0000000000007088 ; ---------------------------------------------------------------------------
.text:0000000000007088
.text:0000000000007088 loc_7088:                               ; CODE XREF: fts_build+522↑j
.text:0000000000007088                 xor     ecx, ecx
.text:000000000000708A                 mov     edx, eax
.text:000000000000708C                 mov     rsi, rbp
.text:000000000000708F                 mov     rdi, r15
.text:0000000000007092                 call    fts_safe_changedir
.text:0000000000007097                 test    eax, eax
.text:0000000000007099                 jnz     loc_6D28
.text:000000000000709F                 jmp     loc_6862
.text:00000000000070A4 ; ---------------------------------------------------------------------------
.text:00000000000070A4
.text:00000000000070A4 loc_70A4:                               ; CODE XREF: fts_build+501↑j
.text:00000000000070A4                 cmp     qword ptr [rbp+88h], 2
.text:00000000000070AC                 jnz     loc_6D07
.text:00000000000070B2                 mov     esi, eax
.text:00000000000070B4                 mov     rdi, rbp
.text:00000000000070B7                 call    leaf_optimization
.text:00000000000070BC                 test    eax, eax
.text:00000000000070BE                 jnz     short loc_713E
.text:00000000000070C0                 mov     eax, [rsp+0A8h+fd]
.text:00000000000070C4                 jmp     loc_6D07
.text:00000000000070C9 ; ---------------------------------------------------------------------------
.text:00000000000070C9
.text:00000000000070C9 loc_70C9:                               ; CODE XREF: fts_build+793↑j
.text:00000000000070C9                                         ; fts_build+7A4↑j
.text:00000000000070C9                 mov     eax, 7
.text:00000000000070CE                 jmp     loc_6FAA
.text:00000000000070D3 ; ---------------------------------------------------------------------------
.text:00000000000070D3
.text:00000000000070D3 loc_70D3:                               ; CODE XREF: fts_build+74A↑j
.text:00000000000070D3                 mov     edi, 7
.text:00000000000070D8                 mov     [rbp+70h], di
.text:00000000000070DC                 or      dword ptr [r15+48h], 2000h
.text:00000000000070E4                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000070E9                 call    fts_lfree
.text:00000000000070EE                 mov     [rsp+0A8h+ptr], 0
.text:00000000000070F7                 jmp     loc_6DC5
.text:00000000000070FC ; ---------------------------------------------------------------------------
.text:00000000000070FC
.text:00000000000070FC loc_70FC:                               ; CODE XREF: fts_build+51A↑j
.text:00000000000070FC                 mov     edi, eax        ; fd
.text:00000000000070FE                 mov     edx, 3
.text:0000000000007103                 mov     esi, 406h
.text:0000000000007108                 xor     eax, eax
.text:000000000000710A                 call    rpl_fcntl
.text:000000000000710F                 mov     [rsp+0A8h+fd], eax
.text:0000000000007113                 jmp     loc_6D20
.text:0000000000007118 ; ---------------------------------------------------------------------------
.text:0000000000007118
.text:0000000000007118 loc_7118:                               ; CODE XREF: fts_build+75A↑j
.text:0000000000007118                 movzx   eax, word ptr [rbp+70h]
.text:000000000000711C                 cmp     ax, 7
.text:0000000000007120                 jz      loc_6F60
.text:0000000000007126                 cmp     ax, 4
.text:000000000000712A                 jz      loc_6F60
.text:0000000000007130                 mov     esi, 6
.text:0000000000007135                 mov     [rbp+70h], si
.text:0000000000007139                 jmp     loc_6F60
.text:000000000000713E ; ---------------------------------------------------------------------------
.text:000000000000713E
.text:000000000000713E loc_713E:                               ; CODE XREF: fts_build+8BE↑j
.text:000000000000713E                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000007143                 jnz     loc_7040
.text:0000000000007149                 mov     eax, [rsp+0A8h+fd]
.text:000000000000714D                 xor     r12d, r12d
.text:0000000000007150                 mov     ebx, 1
.text:0000000000007155                 jmp     loc_6D15
.text:0000000000007155 ; ---------------------------------------------------------------------------
.text:000000000000715A                 align 20h
.text:0000000000007160
.text:0000000000007160 loc_7160:                               ; CODE XREF: fts_build+100↑j
.text:0000000000007160                 mov     rdi, r13        ; ptr
.text:0000000000007163                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000007168                 call    free
.text:000000000000716D                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000007172                 call    fts_lfree
.text:0000000000007177                 mov     rdi, [rbp+18h]  ; dirp
.text:000000000000717B                 call    _closedir
.text:0000000000007180                 mov     r8d, 7
.text:0000000000007186                 mov     qword ptr [rbp+18h], 0
.text:000000000000718E                 mov     [rsp+0A8h+ptr], 0
.text:0000000000007197                 mov     [rbp+70h], r8w
.text:000000000000719C                 or      dword ptr [r15+48h], 2000h
.text:00000000000071A4                 mov     dword ptr [r12], 24h ; '$'
.text:00000000000071AC                 jmp     loc_6DC5
.text:00000000000071B1 ; ---------------------------------------------------------------------------
.text:00000000000071B1
.text:00000000000071B1 loc_71B1:                               ; CODE XREF: fts_build+5D8↑j
.text:00000000000071B1                 call    ___stack_chk_fail
.text:00000000000071B6 ; ---------------------------------------------------------------------------
.text:00000000000071B6
.text:00000000000071B6 loc_71B6:                               ; CODE XREF: fts_build+429↑j
.text:00000000000071B6                 lea     rax, CSWTCH_53
.text:00000000000071BD                 mov     eax, [rax+rdx*4]
.text:00000000000071C0                 mov     [r13+90h], eax
.text:00000000000071C7                 mov     eax, 1
.text:00000000000071CC                 jmp     loc_698A
.text:00000000000071CC ; } // starts at 6800
.text:00000000000071CC fts_build       endp
.text:00000000000071CC
.text:00000000000071CC ; ---------------------------------------------------------------------------
.text:00000000000071D1                 align 20h
.text:00000000000071E0
.text:00000000000071E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071E0
.text:00000000000071E0
.text:00000000000071E0                 public rpl_fts_open
.text:00000000000071E0 rpl_fts_open    proc near               ; CODE XREF: xfts_open+A↑p
.text:00000000000071E0
.text:00000000000071E0 var_50          = qword ptr -50h
.text:00000000000071E0 var_42          = byte ptr -42h
.text:00000000000071E0 var_41          = byte ptr -41h
.text:00000000000071E0 var_40          = qword ptr -40h
.text:00000000000071E0
.text:00000000000071E0 ; __unwind {
.text:00000000000071E0                 push    r15
.text:00000000000071E2                 push    r14
.text:00000000000071E4                 push    r13
.text:00000000000071E6                 push    r12
.text:00000000000071E8                 push    rbp
.text:00000000000071E9                 push    rbx
.text:00000000000071EA                 sub     rsp, 28h
.text:00000000000071EE                 test    esi, 0FFFFF000h
.text:00000000000071F4                 jnz     loc_7578
.text:00000000000071FA                 mov     eax, esi
.text:00000000000071FC                 mov     ebp, esi
.text:00000000000071FE                 and     eax, 204h
.text:0000000000007203                 cmp     eax, 204h
.text:0000000000007208                 jz      loc_7578
.text:000000000000720E                 test    sil, 12h
.text:0000000000007212                 jz      loc_7578
.text:0000000000007218                 mov     r13, rdi
.text:000000000000721B                 mov     esi, 1          ; size
.text:0000000000007220                 mov     edi, 80h        ; nmemb
.text:0000000000007225                 mov     r14, rdx
.text:0000000000007228                 call    _calloc
.text:000000000000722D                 test    rax, rax
.text:0000000000007230                 mov     rbx, rax
.text:0000000000007233                 jz      loc_748E
.text:0000000000007239                 test    bpl, 2
.text:000000000000723D                 mov     [rax+40h], r14
.text:0000000000007241                 jnz     loc_74A0
.text:0000000000007247                 mov     rdi, [r13+0]    ; s
.text:000000000000724B                 mov     [rax+48h], ebp
.text:000000000000724E                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:0000000000007255                 test    rdi, rdi
.text:0000000000007258                 jz      loc_74BF
.text:000000000000725E
.text:000000000000725E loc_725E:                               ; CODE XREF: rpl_fts_open+2D9↓j
.text:000000000000725E                 mov     r15, r13
.text:0000000000007261                 xor     r12d, r12d
.text:0000000000007264                 nop     dword ptr [rax+00h]
.text:0000000000007268
.text:0000000000007268 loc_7268:                               ; CODE XREF: rpl_fts_open+9E↓j
.text:0000000000007268                 call    _strlen
.text:000000000000726D                 cmp     r12, rax
.text:0000000000007270                 cmovb   r12, rax
.text:0000000000007274                 add     r15, 8
.text:0000000000007278                 mov     rdi, [r15]
.text:000000000000727B                 test    rdi, rdi
.text:000000000000727E                 jnz     short loc_7268
.text:0000000000007280                 lea     rdx, [r12+1]
.text:0000000000007285                 mov     eax, 1000h
.text:000000000000728A                 cmp     rdx, 1000h
.text:0000000000007291                 cmovb   rdx, rax
.text:0000000000007295
.text:0000000000007295 loc_7295:                               ; CODE XREF: rpl_fts_open+2E4↓j
.text:0000000000007295                 lea     rsi, [rbx+30h]
.text:0000000000007299                 lea     rdi, [rbx+20h]
.text:000000000000729D                 call    fts_palloc_isra_2
.text:00000000000072A2                 test    al, al
.text:00000000000072A4                 mov     [rsp+58h+var_42], al
.text:00000000000072A8                 jz      loc_7549
.text:00000000000072AE                 mov     rsi, [r13+0]
.text:00000000000072B2                 test    rsi, rsi
.text:00000000000072B5                 jz      loc_7560
.text:00000000000072BB                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:00000000000072C2                 xor     edx, edx
.text:00000000000072C4                 mov     rdi, rbx
.text:00000000000072C7                 call    fts_alloc
.text:00000000000072CC                 test    rax, rax
.text:00000000000072CF                 mov     r15, rax
.text:00000000000072D2                 jz      loc_7540
.text:00000000000072D8                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000072DF                 test    r14, r14
.text:00000000000072E2                 mov     rsi, [r13+0]
.text:00000000000072E6                 mov     [r15+58h], rax
.text:00000000000072EA                 mov     [r15+68h], rax
.text:00000000000072EE                 jz      short loc_72FD
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: rpl_fts_open+386↓j
.text:00000000000072F0                 mov     eax, [rbx+48h]
.text:00000000000072F3                 shr     eax, 0Ah
.text:00000000000072F6                 and     eax, 1
.text:00000000000072F9                 mov     [rsp+58h+var_42], al
.text:00000000000072FD
.text:00000000000072FD loc_72FD:                               ; CODE XREF: rpl_fts_open+10E↑j
.text:00000000000072FD                 test    rsi, rsi
.text:0000000000007300                 jz      loc_756C
.text:0000000000007306                 shr     ebp, 0Bh
.text:0000000000007309                 mov     [rsp+58h+var_40], 0
.text:0000000000007312                 xor     r12d, r12d
.text:0000000000007315                 xor     ebp, 1
.text:0000000000007318                 mov     eax, ebp
.text:000000000000731A                 xor     ebp, ebp
.text:000000000000731C                 and     eax, 1
.text:000000000000731F                 mov     [rsp+58h+var_41], al
.text:0000000000007323                 jmp     short loc_739C
.text:0000000000007323 ; ---------------------------------------------------------------------------
.text:0000000000007325                 align 8
.text:0000000000007328
.text:0000000000007328 loc_7328:                               ; CODE XREF: rpl_fts_open+1D2↓j
.text:0000000000007328                                         ; rpl_fts_open+1DD↓j ...
.text:0000000000007328                 mov     rdx, rax
.text:000000000000732B                 mov     rdi, rbx
.text:000000000000732E                 call    fts_alloc
.text:0000000000007333                 test    rax, rax
.text:0000000000007336                 mov     rcx, rax
.text:0000000000007339                 jz      loc_7530
.text:000000000000733F                 mov     qword ptr [rax+58h], 0
.text:0000000000007347                 mov     [rax+8], r15
.text:000000000000734B                 lea     rax, [rax+108h]
.text:0000000000007352                 test    r12, r12
.text:0000000000007355                 mov     [rcx+30h], rax
.text:0000000000007359                 jz      loc_74D0
.text:000000000000735F                 cmp     [rsp+58h+var_42], 0
.text:0000000000007364                 jz      loc_74D0
.text:000000000000736A                 mov     esi, 0Bh
.text:000000000000736F                 test    r14, r14
.text:0000000000007372                 mov     qword ptr [rcx+0A8h], 2
.text:000000000000737D                 mov     [rcx+70h], si
.text:0000000000007381                 jz      loc_7510
.text:0000000000007387
.text:0000000000007387 loc_7387:                               ; CODE XREF: rpl_fts_open+30E↓j
.text:0000000000007387                 mov     [rcx+10h], r12
.text:000000000000738B                 mov     r12, rcx
.text:000000000000738E
.text:000000000000738E loc_738E:                               ; CODE XREF: rpl_fts_open+329↓j
.text:000000000000738E                                         ; rpl_fts_open+346↓j
.text:000000000000738E                 add     rbp, 1
.text:0000000000007392                 mov     rsi, [r13+rbp*8+0]
.text:0000000000007397                 test    rsi, rsi
.text:000000000000739A                 jz      short loc_73F0
.text:000000000000739C
.text:000000000000739C loc_739C:                               ; CODE XREF: rpl_fts_open+143↑j
.text:000000000000739C                 mov     rdi, rsi        ; s
.text:000000000000739F                 mov     [rsp+58h+var_50], rsi
.text:00000000000073A4                 call    _strlen
.text:00000000000073A9                 cmp     rax, 2
.text:00000000000073AD                 mov     rsi, [rsp+58h+var_50]
.text:00000000000073B2                 jbe     loc_7328
.text:00000000000073B8                 cmp     [rsp+58h+var_41], 0
.text:00000000000073BD                 jz      loc_7328
.text:00000000000073C3                 cmp     byte ptr [rsi+rax-1], 2Fh ; '/'
.text:00000000000073C8                 jnz     loc_7328
.text:00000000000073CE                 xchg    ax, ax
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: rpl_fts_open+203↓j
.text:00000000000073D0                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:00000000000073D5                 jnz     loc_7328
.text:00000000000073DB                 sub     rax, 1
.text:00000000000073DF                 cmp     rax, 1
.text:00000000000073E3                 jnz     short loc_73D0
.text:00000000000073E5                 jmp     loc_7328
.text:00000000000073E5 ; ---------------------------------------------------------------------------
.text:00000000000073EA                 align 10h
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: rpl_fts_open+1BA↑j
.text:00000000000073F0                 test    r14, r14
.text:00000000000073F3                 jz      short loc_740C
.text:00000000000073F5                 cmp     rbp, 1
.text:00000000000073F9                 jbe     short loc_740C
.text:00000000000073FB                 mov     rsi, r12
.text:00000000000073FE                 mov     rdx, rbp
.text:0000000000007401                 mov     rdi, rbx
.text:0000000000007404                 call    fts_sort
.text:0000000000007409                 mov     r12, rax
.text:000000000000740C
.text:000000000000740C loc_740C:                               ; CODE XREF: rpl_fts_open+213↑j
.text:000000000000740C                                         ; rpl_fts_open+219↑j ...
.text:000000000000740C                 lea     rsi, aWrittenBySSAnd+1Bh ; ""
.text:0000000000007413                 xor     edx, edx
.text:0000000000007415                 mov     rdi, rbx
.text:0000000000007418                 call    fts_alloc
.text:000000000000741D                 test    rax, rax
.text:0000000000007420                 mov     [rbx], rax
.text:0000000000007423                 jz      loc_7530
.text:0000000000007429                 mov     edi, [rbx+48h]
.text:000000000000742C                 mov     edx, 9
.text:0000000000007431                 lea     rsi, [rbx+58h]
.text:0000000000007435                 mov     [rax+10h], r12
.text:0000000000007439                 mov     [rax+70h], dx
.text:000000000000743D                 mov     qword ptr [rax+58h], 1
.text:0000000000007445                 call    setup_dir_isra_4
.text:000000000000744A                 test    al, al
.text:000000000000744C                 jz      loc_7530
.text:0000000000007452                 mov     esi, [rbx+48h]
.text:0000000000007455                 test    esi, 204h
.text:000000000000745B                 jnz     short loc_7480
.text:000000000000745D                 mov     edi, [rbx+2Ch]
.text:0000000000007460                 lea     rdx, asc_AF1A+1 ; "."
.text:0000000000007467                 call    diropen_isra_6
.text:000000000000746C                 test    eax, eax
.text:000000000000746E                 mov     [rbx+28h], eax
.text:0000000000007471                 jns     short loc_7480
.text:0000000000007473                 or      dword ptr [rbx+48h], 4
.text:0000000000007477                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: rpl_fts_open+27B↑j
.text:0000000000007480                                         ; rpl_fts_open+291↑j
.text:0000000000007480                 lea     rdi, [rbx+60h]
.text:0000000000007484                 mov     esi, 0FFFFFFFFh
.text:0000000000007489                 call    i_ring_init
.text:000000000000748E
.text:000000000000748E loc_748E:                               ; CODE XREF: rpl_fts_open+53↑j
.text:000000000000748E                                         ; rpl_fts_open+373↓j ...
.text:000000000000748E                 add     rsp, 28h
.text:0000000000007492                 mov     rax, rbx
.text:0000000000007495                 pop     rbx
.text:0000000000007496                 pop     rbp
.text:0000000000007497                 pop     r12
.text:0000000000007499                 pop     r13
.text:000000000000749B                 pop     r14
.text:000000000000749D                 pop     r15
.text:000000000000749F                 retn
.text:00000000000074A0 ; ---------------------------------------------------------------------------
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: rpl_fts_open+61↑j
.text:00000000000074A0                 mov     rdi, [r13+0]
.text:00000000000074A4                 mov     eax, ebp
.text:00000000000074A6                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:00000000000074AD                 and     ah, 0FDh
.text:00000000000074B0                 or      eax, 4
.text:00000000000074B3                 test    rdi, rdi
.text:00000000000074B6                 mov     [rbx+48h], eax
.text:00000000000074B9                 jnz     loc_725E
.text:00000000000074BF
.text:00000000000074BF loc_74BF:                               ; CODE XREF: rpl_fts_open+78↑j
.text:00000000000074BF                 mov     edx, 1000h
.text:00000000000074C4                 jmp     loc_7295
.text:00000000000074C4 ; ---------------------------------------------------------------------------
.text:00000000000074C9                 align 10h
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: rpl_fts_open+179↑j
.text:00000000000074D0                                         ; rpl_fts_open+184↑j
.text:00000000000074D0                 xor     edx, edx
.text:00000000000074D2                 mov     rsi, rcx
.text:00000000000074D5                 mov     rdi, rbx
.text:00000000000074D8                 mov     [rsp+58h+var_50], rcx
.text:00000000000074DD                 call    fts_stat
.text:00000000000074E2                 mov     rcx, [rsp+58h+var_50]
.text:00000000000074E7                 test    r14, r14
.text:00000000000074EA                 mov     [rcx+70h], ax
.text:00000000000074EE                 jnz     loc_7387
.text:00000000000074F4                 test    r12, r12
.text:00000000000074F7                 mov     qword ptr [rcx+10h], 0
.text:00000000000074FF                 jnz     short loc_7518
.text:0000000000007501                 mov     [rsp+58h+var_40], rcx
.text:0000000000007506                 mov     r12, rcx
.text:0000000000007509                 jmp     loc_738E
.text:0000000000007509 ; ---------------------------------------------------------------------------
.text:000000000000750E                 align 10h
.text:0000000000007510
.text:0000000000007510 loc_7510:                               ; CODE XREF: rpl_fts_open+1A1↑j
.text:0000000000007510                 mov     qword ptr [rcx+10h], 0
.text:0000000000007518
.text:0000000000007518 loc_7518:                               ; CODE XREF: rpl_fts_open+31F↑j
.text:0000000000007518                 mov     rax, [rsp+58h+var_40]
.text:000000000000751D                 mov     [rsp+58h+var_40], rcx
.text:0000000000007522                 mov     [rax+10h], rcx
.text:0000000000007526                 jmp     loc_738E
.text:0000000000007526 ; ---------------------------------------------------------------------------
.text:000000000000752B                 align 10h
.text:0000000000007530
.text:0000000000007530 loc_7530:                               ; CODE XREF: rpl_fts_open+159↑j
.text:0000000000007530                                         ; rpl_fts_open+243↑j ...
.text:0000000000007530                 mov     rdi, r12        ; ptr
.text:0000000000007533                 call    fts_lfree
.text:0000000000007538                 mov     rdi, r15        ; ptr
.text:000000000000753B                 call    free
.text:0000000000007540
.text:0000000000007540 loc_7540:                               ; CODE XREF: rpl_fts_open+F2↑j
.text:0000000000007540                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000007544                 call    free
.text:0000000000007549
.text:0000000000007549 loc_7549:                               ; CODE XREF: rpl_fts_open+C8↑j
.text:0000000000007549                 mov     rdi, rbx        ; ptr
.text:000000000000754C                 xor     ebx, ebx
.text:000000000000754E                 call    free
.text:0000000000007553                 jmp     loc_748E
.text:0000000000007553 ; ---------------------------------------------------------------------------
.text:0000000000007558                 align 20h
.text:0000000000007560
.text:0000000000007560 loc_7560:                               ; CODE XREF: rpl_fts_open+D5↑j
.text:0000000000007560                 xor     r15d, r15d
.text:0000000000007563                 test    r14, r14
.text:0000000000007566                 jnz     loc_72F0
.text:000000000000756C
.text:000000000000756C loc_756C:                               ; CODE XREF: rpl_fts_open+120↑j
.text:000000000000756C                 xor     r12d, r12d
.text:000000000000756F                 jmp     loc_740C
.text:000000000000756F ; ---------------------------------------------------------------------------
.text:0000000000007574                 align 8
.text:0000000000007578
.text:0000000000007578 loc_7578:                               ; CODE XREF: rpl_fts_open+14↑j
.text:0000000000007578                                         ; rpl_fts_open+28↑j ...
.text:0000000000007578                 call    ___errno_location
.text:000000000000757D                 xor     ebx, ebx
.text:000000000000757F                 mov     dword ptr [rax], 16h
.text:0000000000007585                 jmp     loc_748E
.text:0000000000007585 ; } // starts at 71E0
.text:0000000000007585 rpl_fts_open    endp
.text:0000000000007585
.text:0000000000007585 ; ---------------------------------------------------------------------------
.text:000000000000758A                 align 10h
.text:0000000000007590
.text:0000000000007590 ; =============== S U B R O U T I N E =======================================
.text:0000000000007590
.text:0000000000007590
.text:0000000000007590 ; __int64 __fastcall rpl_fts_close(void *ptr)
.text:0000000000007590                 public rpl_fts_close
.text:0000000000007590 rpl_fts_close   proc near               ; CODE XREF: main+3D9↑p
.text:0000000000007590 ; __unwind {
.text:0000000000007590                 push    r12
.text:0000000000007592                 push    rbp
.text:0000000000007593                 mov     rbp, rdi
.text:0000000000007596                 push    rbx
.text:0000000000007597                 mov     rdi, [rdi]
.text:000000000000759A                 test    rdi, rdi
.text:000000000000759D                 jz      short loc_75E3
.text:000000000000759F                 cmp     qword ptr [rdi+58h], 0
.text:00000000000075A4                 jns     short loc_75BF
.text:00000000000075A6                 jmp     loc_76C0
.text:00000000000075A6 ; ---------------------------------------------------------------------------
.text:00000000000075AB                 align 10h
.text:00000000000075B0
.text:00000000000075B0 loc_75B0:                               ; CODE XREF: rpl_fts_close+36↓j
.text:00000000000075B0                 call    free
.text:00000000000075B5                 cmp     qword ptr [rbx+58h], 0
.text:00000000000075BA                 mov     rdi, rbx        ; ptr
.text:00000000000075BD                 js      short loc_75DB
.text:00000000000075BF
.text:00000000000075BF loc_75BF:                               ; CODE XREF: rpl_fts_close+14↑j
.text:00000000000075BF                                         ; rpl_fts_close+49↓j
.text:00000000000075BF                 mov     rbx, [rdi+10h]
.text:00000000000075C3                 test    rbx, rbx
.text:00000000000075C6                 jnz     short loc_75B0
.text:00000000000075C8                 mov     rbx, [rdi+8]
.text:00000000000075CC                 call    free
.text:00000000000075D1                 cmp     qword ptr [rbx+58h], 0
.text:00000000000075D6                 mov     rdi, rbx
.text:00000000000075D9                 jns     short loc_75BF
.text:00000000000075DB
.text:00000000000075DB loc_75DB:                               ; CODE XREF: rpl_fts_close+2D↑j
.text:00000000000075DB                 mov     rdi, rbx        ; ptr
.text:00000000000075DE                 call    free
.text:00000000000075E3
.text:00000000000075E3 loc_75E3:                               ; CODE XREF: rpl_fts_close+D↑j
.text:00000000000075E3                                         ; rpl_fts_close+13B↓j
.text:00000000000075E3                 mov     rdi, [rbp+8]    ; ptr
.text:00000000000075E7                 test    rdi, rdi
.text:00000000000075EA                 jz      short loc_75F1
.text:00000000000075EC                 call    fts_lfree
.text:00000000000075F1
.text:00000000000075F1 loc_75F1:                               ; CODE XREF: rpl_fts_close+5A↑j
.text:00000000000075F1                 mov     rdi, [rbp+10h]  ; ptr
.text:00000000000075F5                 call    free
.text:00000000000075FA                 mov     rdi, [rbp+20h]  ; ptr
.text:00000000000075FE                 call    free
.text:0000000000007603                 mov     eax, [rbp+48h]
.text:0000000000007606                 test    ah, 2
.text:0000000000007609                 jz      short loc_7670
.text:000000000000760B                 mov     edi, [rbp+2Ch]  ; fd
.text:000000000000760E                 test    edi, edi
.text:0000000000007610                 jns     loc_76A0
.text:0000000000007616
.text:0000000000007616 loc_7616:                               ; CODE XREF: rpl_fts_close+E2↓j
.text:0000000000007616                                         ; rpl_fts_close+FA↓j ...
.text:0000000000007616                 xor     ebx, ebx
.text:0000000000007618
.text:0000000000007618 loc_7618:                               ; CODE XREF: rpl_fts_close+124↓j
.text:0000000000007618                                         ; rpl_fts_close+154↓j ...
.text:0000000000007618                 lea     rdi, [rbp+60h]
.text:000000000000761C                 call    fd_ring_clear
.text:0000000000007621                 mov     rdi, [rbp+50h]  ; ptr
.text:0000000000007625                 test    rdi, rdi
.text:0000000000007628                 jz      short loc_762F
.text:000000000000762A                 call    hash_free
.text:000000000000762F
.text:000000000000762F loc_762F:                               ; CODE XREF: rpl_fts_close+98↑j
.text:000000000000762F                 test    dword ptr [rbp+48h], 102h
.text:0000000000007636                 mov     rdi, [rbp+58h]  ; ptr
.text:000000000000763A                 jz      short loc_7660
.text:000000000000763C                 test    rdi, rdi
.text:000000000000763F                 jz      short loc_7646
.text:0000000000007641                 call    hash_free
.text:0000000000007646
.text:0000000000007646 loc_7646:                               ; CODE XREF: rpl_fts_close+AF↑j
.text:0000000000007646                                         ; rpl_fts_close+D5↓j
.text:0000000000007646                 mov     rdi, rbp        ; ptr
.text:0000000000007649                 call    free
.text:000000000000764E                 test    ebx, ebx
.text:0000000000007650                 jnz     loc_7701
.text:0000000000007656
.text:0000000000007656 loc_7656:                               ; CODE XREF: rpl_fts_close+17D↓j
.text:0000000000007656                 mov     eax, ebx
.text:0000000000007658                 pop     rbx
.text:0000000000007659                 pop     rbp
.text:000000000000765A                 pop     r12
.text:000000000000765C                 retn
.text:000000000000765C ; ---------------------------------------------------------------------------
.text:000000000000765D                 align 20h
.text:0000000000007660
.text:0000000000007660 loc_7660:                               ; CODE XREF: rpl_fts_close+AA↑j
.text:0000000000007660                 call    free
.text:0000000000007665                 jmp     short loc_7646
.text:0000000000007665 ; ---------------------------------------------------------------------------
.text:0000000000007667                 align 10h
.text:0000000000007670
.text:0000000000007670 loc_7670:                               ; CODE XREF: rpl_fts_close+79↑j
.text:0000000000007670                 test    al, 4
.text:0000000000007672                 jnz     short loc_7616
.text:0000000000007674                 mov     edi, [rbp+28h]  ; fd
.text:0000000000007677                 call    _fchdir
.text:000000000000767C                 test    eax, eax
.text:000000000000767E                 jnz     short loc_76D0
.text:0000000000007680                 mov     edi, [rbp+28h]  ; fd
.text:0000000000007683                 call    _close
.text:0000000000007688                 test    eax, eax
.text:000000000000768A                 jz      short loc_7616
.text:000000000000768C                 call    ___errno_location
.text:0000000000007691                 mov     r12, rax
.text:0000000000007694                 jmp     short loc_76F8
.text:0000000000007694 ; ---------------------------------------------------------------------------
.text:0000000000007696                 align 20h
.text:00000000000076A0
.text:00000000000076A0 loc_76A0:                               ; CODE XREF: rpl_fts_close+80↑j
.text:00000000000076A0                 call    _close
.text:00000000000076A5                 test    eax, eax
.text:00000000000076A7                 jz      loc_7616
.text:00000000000076AD                 call    ___errno_location
.text:00000000000076B2                 mov     ebx, [rax]
.text:00000000000076B4                 jmp     loc_7618
.text:00000000000076B4 ; ---------------------------------------------------------------------------
.text:00000000000076B9                 align 20h
.text:00000000000076C0
.text:00000000000076C0 loc_76C0:                               ; CODE XREF: rpl_fts_close+16↑j
.text:00000000000076C0                 mov     rbx, rdi
.text:00000000000076C3                 mov     rdi, rbx        ; ptr
.text:00000000000076C6                 call    free
.text:00000000000076CB                 jmp     loc_75E3
.text:00000000000076D0 ; ---------------------------------------------------------------------------
.text:00000000000076D0
.text:00000000000076D0 loc_76D0:                               ; CODE XREF: rpl_fts_close+EE↑j
.text:00000000000076D0                 call    ___errno_location
.text:00000000000076D5                 mov     edi, [rbp+28h]  ; fd
.text:00000000000076D8                 mov     r12, rax
.text:00000000000076DB                 mov     ebx, [rax]
.text:00000000000076DD                 call    _close
.text:00000000000076E2                 test    eax, eax
.text:00000000000076E4                 jz      loc_7618
.text:00000000000076EA                 test    ebx, ebx
.text:00000000000076EC                 jnz     loc_7618
.text:00000000000076F2                 nop     word ptr [rax+rax+00h]
.text:00000000000076F8
.text:00000000000076F8 loc_76F8:                               ; CODE XREF: rpl_fts_close+104↑j
.text:00000000000076F8                 mov     ebx, [r12]
.text:00000000000076FC                 jmp     loc_7618
.text:0000000000007701 ; ---------------------------------------------------------------------------
.text:0000000000007701
.text:0000000000007701 loc_7701:                               ; CODE XREF: rpl_fts_close+C0↑j
.text:0000000000007701                 call    ___errno_location
.text:0000000000007706                 mov     [rax], ebx
.text:0000000000007708                 mov     ebx, 0FFFFFFFFh
.text:000000000000770D                 jmp     loc_7656
.text:000000000000770D ; } // starts at 7590
.text:000000000000770D rpl_fts_close   endp
.text:000000000000770D
.text:000000000000770D ; ---------------------------------------------------------------------------
.text:0000000000007712                 align 20h
.text:0000000000007720
.text:0000000000007720 ; =============== S U B R O U T I N E =======================================
.text:0000000000007720
.text:0000000000007720
.text:0000000000007720                 public rpl_fts_read
.text:0000000000007720 rpl_fts_read    proc near               ; CODE XREF: main+36A↑p
.text:0000000000007720                                         ; main+3AE↑p ...
.text:0000000000007720 ; __unwind {
.text:0000000000007720                 push    r14
.text:0000000000007722                 push    r13
.text:0000000000007724                 push    r12
.text:0000000000007726                 push    rbp
.text:0000000000007727                 push    rbx
.text:0000000000007728                 mov     rbp, [rdi]
.text:000000000000772B                 test    rbp, rbp
.text:000000000000772E                 jz      loc_783E
.text:0000000000007734                 mov     edx, [rdi+48h]
.text:0000000000007737                 test    dh, 20h
.text:000000000000773A                 jnz     loc_783E
.text:0000000000007740                 movzx   eax, word ptr [rbp+74h]
.text:0000000000007744                 mov     ebx, 3
.text:0000000000007749                 mov     r12, rdi
.text:000000000000774C                 mov     [rbp+74h], bx
.text:0000000000007750                 cmp     ax, 1
.text:0000000000007754                 jz      loc_79A0
.text:000000000000775A                 cmp     ax, 2
.text:000000000000775E                 movzx   ecx, word ptr [rbp+70h]
.text:0000000000007762                 jz      loc_7850
.text:0000000000007768                 cmp     cx, 1
.text:000000000000776C                 jnz     short loc_77A0
.text:000000000000776E                 jmp     loc_7990
.text:000000000000776E ; ---------------------------------------------------------------------------
.text:0000000000007773                 align 8
.text:0000000000007778
.text:0000000000007778 loc_7778:                               ; CODE XREF: rpl_fts_read+87↓j
.text:0000000000007778                 mov     [r12], rbx
.text:000000000000777C                 mov     rdi, rbp        ; ptr
.text:000000000000777F                 call    free
.text:0000000000007784                 cmp     qword ptr [rbx+58h], 0
.text:0000000000007789                 jz      loc_79C0
.text:000000000000778F                 movzx   eax, word ptr [rbx+74h]
.text:0000000000007793                 mov     rbp, rbx
.text:0000000000007796                 cmp     ax, 4
.text:000000000000779A                 jnz     loc_7AC8
.text:00000000000077A0
.text:00000000000077A0 loc_77A0:                               ; CODE XREF: rpl_fts_read+4C↑j
.text:00000000000077A0                                         ; rpl_fts_read+13D↓j
.text:00000000000077A0                 mov     rbx, [rbp+10h]
.text:00000000000077A4                 test    rbx, rbx
.text:00000000000077A7                 jnz     short loc_7778
.text:00000000000077A9                 mov     rbx, [rbp+8]
.text:00000000000077AD                 cmp     qword ptr [rbx+18h], 0
.text:00000000000077B2                 jnz     loc_7D20
.text:00000000000077B8
.text:00000000000077B8 loc_77B8:                               ; CODE XREF: rpl_fts_read+688↓j
.text:00000000000077B8                 mov     [r12], rbx
.text:00000000000077BC                 mov     rdi, rbp        ; ptr
.text:00000000000077BF                 call    free
.text:00000000000077C4                 cmp     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:00000000000077C9                 jz      loc_7C82
.text:00000000000077CF                 cmp     word ptr [rbx+70h], 0Bh
.text:00000000000077D4                 jz      loc_790F
.text:00000000000077DA                 mov     rdx, [r12+20h]
.text:00000000000077DF                 mov     rax, [rbx+48h]
.text:00000000000077E3                 mov     byte ptr [rdx+rax], 0
.text:00000000000077E7                 cmp     qword ptr [rbx+58h], 0
.text:00000000000077EC                 jz      loc_7BB0
.text:00000000000077F2                 movzx   eax, word ptr [rbx+72h]
.text:00000000000077F6                 test    al, 2
.text:00000000000077F8                 jz      loc_7B68
.text:00000000000077FE                 mov     eax, [r12+48h]
.text:0000000000007803                 mov     edi, [rbx+44h]  ; fd
.text:0000000000007806                 test    al, 4
.text:0000000000007808                 jz      loc_7C0C
.text:000000000000780E
.text:000000000000780E loc_780E:                               ; CODE XREF: rpl_fts_read+507↓j
.text:000000000000780E                                         ; rpl_fts_read+6AC↓j
.text:000000000000780E                 call    _close
.text:0000000000007813
.text:0000000000007813 loc_7813:                               ; CODE XREF: rpl_fts_read+44A↓j
.text:0000000000007813                                         ; rpl_fts_read+46A↓j ...
.text:0000000000007813                 mov     edi, [r12+48h]
.text:0000000000007818
.text:0000000000007818 loc_7818:                               ; CODE XREF: rpl_fts_read+48A↓j
.text:0000000000007818                 cmp     word ptr [rbx+70h], 2
.text:000000000000781D                 jz      short loc_7833
.text:000000000000781F                 mov     ecx, [rbx+40h]
.text:0000000000007822                 test    ecx, ecx
.text:0000000000007824                 jz      loc_7BC8
.text:000000000000782A                 mov     edx, 7
.text:000000000000782F                 mov     [rbx+70h], dx
.text:0000000000007833
.text:0000000000007833 loc_7833:                               ; CODE XREF: rpl_fts_read+FD↑j
.text:0000000000007833                                         ; rpl_fts_read+4C3↓j
.text:0000000000007833                 and     edi, 2000h
.text:0000000000007839                 mov     rbp, rbx
.text:000000000000783C                 jz      short loc_78BA
.text:000000000000783E
.text:000000000000783E loc_783E:                               ; CODE XREF: rpl_fts_read+E↑j
.text:000000000000783E                                         ; rpl_fts_read+1A↑j ...
.text:000000000000783E                 xor     ebp, ebp
.text:0000000000007840                 pop     rbx
.text:0000000000007841                 mov     rax, rbp
.text:0000000000007844                 pop     rbp
.text:0000000000007845                 pop     r12
.text:0000000000007847                 pop     r13
.text:0000000000007849                 pop     r14
.text:000000000000784B                 retn
.text:000000000000784B ; ---------------------------------------------------------------------------
.text:000000000000784C                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: rpl_fts_read+42↑j
.text:0000000000007850                 lea     eax, [rcx-0Ch]
.text:0000000000007853                 cmp     ax, 1
.text:0000000000007857                 jbe     short loc_78D0
.text:0000000000007859                 cmp     cx, 1
.text:000000000000785D                 jnz     loc_77A0
.text:0000000000007863
.text:0000000000007863 loc_7863:                               ; CODE XREF: rpl_fts_read+274↓j
.text:0000000000007863                 test    dl, 40h
.text:0000000000007866                 jz      loc_7918
.text:000000000000786C                 mov     rax, [r12+18h]
.text:0000000000007871                 cmp     [rbp+78h], rax
.text:0000000000007875                 jz      loc_7918
.text:000000000000787B
.text:000000000000787B loc_787B:                               ; CODE XREF: rpl_fts_read+27A↓j
.text:000000000000787B                 test    byte ptr [rbp+72h], 2
.text:000000000000787F                 jnz     loc_7D60
.text:0000000000007885
.text:0000000000007885 loc_7885:                               ; CODE XREF: rpl_fts_read+648↓j
.text:0000000000007885                 mov     rdi, [r12+8]    ; ptr
.text:000000000000788A                 test    rdi, rdi
.text:000000000000788D                 jz      short loc_789D
.text:000000000000788F                 call    fts_lfree
.text:0000000000007894                 mov     qword ptr [r12+8], 0
.text:000000000000789D
.text:000000000000789D loc_789D:                               ; CODE XREF: rpl_fts_read+16D↑j
.text:000000000000789D                 mov     edi, [r12+48h]
.text:00000000000078A2                 mov     r10d, 6
.text:00000000000078A8                 lea     rsi, [r12+58h]
.text:00000000000078AD                 mov     [rbp+70h], r10w
.text:00000000000078B2                 mov     rdx, rbp
.text:00000000000078B5                 call    leave_dir_isra_12
.text:00000000000078BA
.text:00000000000078BA loc_78BA:                               ; CODE XREF: rpl_fts_read+11C↑j
.text:00000000000078BA                                         ; rpl_fts_read+1D3↓j ...
.text:00000000000078BA                 pop     rbx
.text:00000000000078BB                 mov     rax, rbp
.text:00000000000078BE                 pop     rbp
.text:00000000000078BF                 pop     r12
.text:00000000000078C1                 pop     r13
.text:00000000000078C3                 pop     r14
.text:00000000000078C5                 retn
.text:00000000000078C5 ; ---------------------------------------------------------------------------
.text:00000000000078C6                 align 10h
.text:00000000000078D0
.text:00000000000078D0 loc_78D0:                               ; CODE XREF: rpl_fts_read+137↑j
.text:00000000000078D0                 mov     edx, 1
.text:00000000000078D5                 mov     rsi, rbp
.text:00000000000078D8                 call    fts_stat
.text:00000000000078DD                 cmp     ax, 1
.text:00000000000078E1                 mov     [rbp+70h], ax
.text:00000000000078E5                 jz      loc_7C2C
.text:00000000000078EB                 cmp     ax, 0Bh
.text:00000000000078EF                 mov     [r12], rbp
.text:00000000000078F3                 jnz     short loc_78BA
.text:00000000000078F5                 nop     dword ptr [rax]
.text:00000000000078F8
.text:00000000000078F8 loc_78F8:                               ; CODE XREF: rpl_fts_read+356↓j
.text:00000000000078F8                 mov     rax, [rbp+0A8h]
.text:00000000000078FF                 cmp     rax, 2
.text:0000000000007903                 jz      loc_7CA8
.text:0000000000007909                 cmp     rax, 1
.text:000000000000790D                 jz      short loc_78BA
.text:000000000000790F
.text:000000000000790F loc_790F:                               ; CODE XREF: rpl_fts_read+B4↑j
.text:000000000000790F                 call    _abort
.text:000000000000790F ; ---------------------------------------------------------------------------
.text:0000000000007914                 align 8
.text:0000000000007918
.text:0000000000007918 loc_7918:                               ; CODE XREF: rpl_fts_read+146↑j
.text:0000000000007918                                         ; rpl_fts_read+155↑j
.text:0000000000007918                 mov     rdi, [r12+8]    ; ptr
.text:000000000000791D                 test    rdi, rdi
.text:0000000000007920                 jz      loc_7B38
.text:0000000000007926                 test    dh, 10h
.text:0000000000007929                 jnz     loc_7B22
.text:000000000000792F                 mov     rcx, [rbp+30h]
.text:0000000000007933                 mov     edx, 0FFFFFFFFh
.text:0000000000007938                 mov     rsi, rbp
.text:000000000000793B                 mov     rdi, r12
.text:000000000000793E                 call    fts_safe_changedir
.text:0000000000007943                 test    eax, eax
.text:0000000000007945                 jz      loc_7C02
.text:000000000000794B                 call    ___errno_location
.text:0000000000007950                 mov     eax, [rax]
.text:0000000000007952                 or      word ptr [rbp+72h], 1
.text:0000000000007957                 mov     [rbp+40h], eax
.text:000000000000795A                 mov     rbp, [r12+8]
.text:000000000000795F                 test    rbp, rbp
.text:0000000000007962                 jz      loc_7B56
.text:0000000000007968                 mov     rax, rbp
.text:000000000000796B                 nop     dword ptr [rax+rax+00h]
.text:0000000000007970
.text:0000000000007970 loc_7970:                               ; CODE XREF: rpl_fts_read+263↓j
.text:0000000000007970                 mov     rdx, [rax+8]
.text:0000000000007974                 mov     rdx, [rdx+30h]
.text:0000000000007978                 mov     [rax+30h], rdx
.text:000000000000797C                 mov     rax, [rax+10h]
.text:0000000000007980                 test    rax, rax
.text:0000000000007983                 jnz     short loc_7970
.text:0000000000007985                 jmp     loc_7B56
.text:0000000000007985 ; ---------------------------------------------------------------------------
.text:000000000000798A                 align 10h
.text:0000000000007990
.text:0000000000007990 loc_7990:                               ; CODE XREF: rpl_fts_read+4E↑j
.text:0000000000007990                 cmp     ax, 4
.text:0000000000007994                 jnz     loc_7863
.text:000000000000799A                 jmp     loc_787B
.text:000000000000799A ; ---------------------------------------------------------------------------
.text:000000000000799F                 align 20h
.text:00000000000079A0
.text:00000000000079A0 loc_79A0:                               ; CODE XREF: rpl_fts_read+34↑j
.text:00000000000079A0                 mov     rsi, rbp
.text:00000000000079A3                 xor     edx, edx
.text:00000000000079A5                 call    fts_stat
.text:00000000000079AA                 mov     [rbp+70h], ax
.text:00000000000079AE                 mov     rax, rbp
.text:00000000000079B1                 pop     rbx
.text:00000000000079B2                 pop     rbp
.text:00000000000079B3                 pop     r12
.text:00000000000079B5                 pop     r13
.text:00000000000079B7                 pop     r14
.text:00000000000079B9                 retn
.text:00000000000079B9 ; ---------------------------------------------------------------------------
.text:00000000000079BA                 align 20h
.text:00000000000079C0
.text:00000000000079C0 loc_79C0:                               ; CODE XREF: rpl_fts_read+69↑j
.text:00000000000079C0                 mov     rdi, r12
.text:00000000000079C3                 call    restore_initial_cwd
.text:00000000000079C8                 test    eax, eax
.text:00000000000079CA                 jnz     loc_7DD1
.text:00000000000079D0                 test    dword ptr [r12+48h], 102h
.text:00000000000079D9                 mov     rdi, [r12+58h]  ; ptr
.text:00000000000079DE                 jz      loc_7B18
.text:00000000000079E4                 test    rdi, rdi
.text:00000000000079E7                 jz      short loc_79EE
.text:00000000000079E9                 call    hash_free
.text:00000000000079EE
.text:00000000000079EE loc_79EE:                               ; CODE XREF: rpl_fts_read+2C7↑j
.text:00000000000079EE                                         ; rpl_fts_read+3FD↓j
.text:00000000000079EE                 mov     rdx, [rbx+60h]
.text:00000000000079F2                 lea     rbp, [rbx+108h]
.text:00000000000079F9                 mov     rdi, [r12+20h]  ; dest
.text:00000000000079FE                 mov     rsi, rbp        ; src
.text:0000000000007A01                 mov     [rbx+48h], rdx
.text:0000000000007A05                 add     rdx, 1          ; n
.text:0000000000007A09                 call    _memmove
.text:0000000000007A0E                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000007A13                 mov     rdi, rbp        ; s
.text:0000000000007A16                 call    _strrchr
.text:0000000000007A1B                 test    rax, rax
.text:0000000000007A1E                 jz      short loc_7A4B
.text:0000000000007A20                 cmp     rbp, rax
.text:0000000000007A23                 jz      loc_7BF0
.text:0000000000007A29
.text:0000000000007A29 loc_7A29:                               ; CODE XREF: rpl_fts_read+4D7↓j
.text:0000000000007A29                 lea     r13, [rax+1]
.text:0000000000007A2D                 mov     rdi, r13        ; s
.text:0000000000007A30                 call    _strlen
.text:0000000000007A35                 lea     rdx, [rax+1]    ; n
.text:0000000000007A39                 mov     r14, rax
.text:0000000000007A3C                 mov     rsi, r13        ; src
.text:0000000000007A3F                 mov     rdi, rbp        ; dest
.text:0000000000007A42                 call    _memmove
.text:0000000000007A47                 mov     [rbx+60h], r14
.text:0000000000007A4B
.text:0000000000007A4B loc_7A4B:                               ; CODE XREF: rpl_fts_read+2FE↑j
.text:0000000000007A4B                                         ; rpl_fts_read+4DD↓j
.text:0000000000007A4B                 mov     rax, [r12+20h]
.text:0000000000007A50                 mov     edi, [r12+48h]
.text:0000000000007A55                 lea     rsi, [r12+58h]
.text:0000000000007A5A                 mov     rbp, rbx
.text:0000000000007A5D                 mov     [rbx+38h], rax
.text:0000000000007A61                 mov     [rbx+30h], rax
.text:0000000000007A65                 call    setup_dir_isra_4
.text:0000000000007A6A                 movzx   eax, word ptr [rbx+70h]
.text:0000000000007A6E
.text:0000000000007A6E loc_7A6E:                               ; CODE XREF: rpl_fts_read+3EF↓j
.text:0000000000007A6E                                         ; rpl_fts_read+73D↓j
.text:0000000000007A6E                 cmp     ax, 0Bh
.text:0000000000007A72                 mov     [r12], rbp
.text:0000000000007A76                 jz      loc_78F8
.text:0000000000007A7C
.text:0000000000007A7C loc_7A7C:                               ; CODE XREF: rpl_fts_read+5C7↓j
.text:0000000000007A7C                                         ; rpl_fts_read+717↓j
.text:0000000000007A7C                 cmp     ax, 1
.text:0000000000007A80                 jnz     loc_78BA
.text:0000000000007A86
.text:0000000000007A86 loc_7A86:                               ; CODE XREF: rpl_fts_read+51F↓j
.text:0000000000007A86                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007A8B                 jnz     short loc_7A96
.text:0000000000007A8D
.text:0000000000007A8D loc_7A8D:                               ; CODE XREF: rpl_fts_read+6F8↓j
.text:0000000000007A8D                 mov     rax, [rbp+78h]
.text:0000000000007A91                 mov     [r12+18h], rax
.text:0000000000007A96
.text:0000000000007A96 loc_7A96:                               ; CODE XREF: rpl_fts_read+36B↑j
.text:0000000000007A96                                         ; rpl_fts_read+5F4↓j
.text:0000000000007A96                 mov     edi, [r12+48h]
.text:0000000000007A9B                 lea     rsi, [r12+58h]
.text:0000000000007AA0                 mov     rdx, rbp
.text:0000000000007AA3                 call    enter_dir_isra_10
.text:0000000000007AA8                 test    al, al
.text:0000000000007AAA                 jnz     loc_78BA
.text:0000000000007AB0                 call    ___errno_location
.text:0000000000007AB5                 xor     ebp, ebp
.text:0000000000007AB7                 mov     dword ptr [rax], 0Ch
.text:0000000000007ABD                 jmp     loc_78BA
.text:0000000000007ABD ; ---------------------------------------------------------------------------
.text:0000000000007AC2                 align 8
.text:0000000000007AC8
.text:0000000000007AC8 loc_7AC8:                               ; CODE XREF: rpl_fts_read+7A↑j
.text:0000000000007AC8                 cmp     ax, 2
.text:0000000000007ACC                 jz      loc_7D6D
.text:0000000000007AD2
.text:0000000000007AD2 loc_7AD2:                               ; CODE XREF: rpl_fts_read+43F↓j
.text:0000000000007AD2                                         ; rpl_fts_read+631↓j ...
.text:0000000000007AD2                 mov     rax, [rbp+8]
.text:0000000000007AD6                 lea     rsi, [rbp+108h] ; src
.text:0000000000007ADD                 mov     rdi, [rax+48h]
.text:0000000000007AE1                 mov     rax, [rax+38h]
.text:0000000000007AE5                 cmp     byte ptr [rax+rdi-1], 2Fh ; '/'
.text:0000000000007AEA                 lea     rdx, [rdi-1]
.text:0000000000007AEE                 cmovz   rdi, rdx
.text:0000000000007AF2                 add     rdi, [r12+20h]
.text:0000000000007AF7                 mov     byte ptr [rdi], 2Fh ; '/'
.text:0000000000007AFA                 mov     rax, [rbp+60h]
.text:0000000000007AFE                 add     rdi, 1          ; dest
.text:0000000000007B02                 lea     rdx, [rax+1]    ; n
.text:0000000000007B06                 call    _memmove
.text:0000000000007B0B                 movzx   eax, word ptr [rbp+70h]
.text:0000000000007B0F                 jmp     loc_7A6E
.text:0000000000007B0F ; ---------------------------------------------------------------------------
.text:0000000000007B14                 align 8
.text:0000000000007B18
.text:0000000000007B18 loc_7B18:                               ; CODE XREF: rpl_fts_read+2BE↑j
.text:0000000000007B18                 call    free
.text:0000000000007B1D                 jmp     loc_79EE
.text:0000000000007B22 ; ---------------------------------------------------------------------------
.text:0000000000007B22
.text:0000000000007B22 loc_7B22:                               ; CODE XREF: rpl_fts_read+209↑j
.text:0000000000007B22                 and     dh, 0EFh
.text:0000000000007B25                 mov     [r12+48h], edx
.text:0000000000007B2A                 call    fts_lfree
.text:0000000000007B2F                 mov     qword ptr [r12+8], 0
.text:0000000000007B38
.text:0000000000007B38 loc_7B38:                               ; CODE XREF: rpl_fts_read+200↑j
.text:0000000000007B38                 mov     esi, 3
.text:0000000000007B3D                 mov     rdi, r12
.text:0000000000007B40                 call    fts_build
.text:0000000000007B45                 test    rax, rax
.text:0000000000007B48                 mov     [r12+8], rax
.text:0000000000007B4D                 jz      loc_7C44
.text:0000000000007B53                 mov     rbp, rax
.text:0000000000007B56
.text:0000000000007B56 loc_7B56:                               ; CODE XREF: rpl_fts_read+242↑j
.text:0000000000007B56                                         ; rpl_fts_read+265↑j ...
.text:0000000000007B56                 mov     qword ptr [r12+8], 0
.text:0000000000007B5F                 jmp     loc_7AD2
.text:0000000000007B5F ; ---------------------------------------------------------------------------
.text:0000000000007B64                 align 8
.text:0000000000007B68
.text:0000000000007B68 loc_7B68:                               ; CODE XREF: rpl_fts_read+D8↑j
.text:0000000000007B68                 test    al, 1
.text:0000000000007B6A                 jnz     loc_7813
.text:0000000000007B70                 mov     rsi, [rbx+8]
.text:0000000000007B74                 lea     rcx, asc_AF1A   ; ".."
.text:0000000000007B7B                 mov     edx, 0FFFFFFFFh
.text:0000000000007B80                 mov     rdi, r12
.text:0000000000007B83                 call    fts_safe_changedir
.text:0000000000007B88                 test    eax, eax
.text:0000000000007B8A                 jz      loc_7813
.text:0000000000007B90
.text:0000000000007B90 loc_7B90:                               ; CODE XREF: rpl_fts_read+49A↓j
.text:0000000000007B90                 call    ___errno_location
.text:0000000000007B95                 mov     edi, [r12+48h]
.text:0000000000007B9A                 mov     eax, [rax]
.text:0000000000007B9C                 or      edi, 2000h
.text:0000000000007BA2                 mov     [rbx+40h], eax
.text:0000000000007BA5                 mov     [r12+48h], edi
.text:0000000000007BAA                 jmp     loc_7818
.text:0000000000007BAA ; ---------------------------------------------------------------------------
.text:0000000000007BAF                 align 10h
.text:0000000000007BB0
.text:0000000000007BB0 loc_7BB0:                               ; CODE XREF: rpl_fts_read+CC↑j
.text:0000000000007BB0                 mov     rdi, r12
.text:0000000000007BB3                 call    restore_initial_cwd
.text:0000000000007BB8                 test    eax, eax
.text:0000000000007BBA                 jnz     short loc_7B90
.text:0000000000007BBC                 jmp     loc_7813
.text:0000000000007BBC ; ---------------------------------------------------------------------------
.text:0000000000007BC1                 align 8
.text:0000000000007BC8
.text:0000000000007BC8 loc_7BC8:                               ; CODE XREF: rpl_fts_read+104↑j
.text:0000000000007BC8                 mov     eax, 6
.text:0000000000007BCD                 lea     rsi, [r12+58h]
.text:0000000000007BD2                 mov     rdx, rbx
.text:0000000000007BD5                 mov     [rbx+70h], ax
.text:0000000000007BD9                 call    leave_dir_isra_12
.text:0000000000007BDE                 mov     edi, [r12+48h]
.text:0000000000007BE3                 jmp     loc_7833
.text:0000000000007BE3 ; ---------------------------------------------------------------------------
.text:0000000000007BE8                 align 10h
.text:0000000000007BF0
.text:0000000000007BF0 loc_7BF0:                               ; CODE XREF: rpl_fts_read+303↑j
.text:0000000000007BF0                 cmp     byte ptr [rbx+109h], 0
.text:0000000000007BF7                 jnz     loc_7A29
.text:0000000000007BFD                 jmp     loc_7A4B
.text:0000000000007C02 ; ---------------------------------------------------------------------------
.text:0000000000007C02
.text:0000000000007C02 loc_7C02:                               ; CODE XREF: rpl_fts_read+225↑j
.text:0000000000007C02                 mov     rbp, [r12+8]
.text:0000000000007C07                 jmp     loc_7B56
.text:0000000000007C0C ; ---------------------------------------------------------------------------
.text:0000000000007C0C
.text:0000000000007C0C loc_7C0C:                               ; CODE XREF: rpl_fts_read+E8↑j
.text:0000000000007C0C                 test    ah, 2
.text:0000000000007C0F                 jz      loc_7DAD
.text:0000000000007C15                 mov     esi, edi
.text:0000000000007C17                 mov     edx, 1
.text:0000000000007C1C                 mov     rdi, r12
.text:0000000000007C1F                 call    cwd_advance_fd
.text:0000000000007C24                 mov     edi, [rbx+44h]
.text:0000000000007C27                 jmp     loc_780E
.text:0000000000007C2C ; ---------------------------------------------------------------------------
.text:0000000000007C2C
.text:0000000000007C2C loc_7C2C:                               ; CODE XREF: rpl_fts_read+1C5↑j
.text:0000000000007C2C                 mov     esi, [r12+48h]
.text:0000000000007C31                 test    sil, 4
.text:0000000000007C35                 jz      loc_7E3C
.text:0000000000007C3B                 mov     [r12], rbp
.text:0000000000007C3F                 jmp     loc_7A86
.text:0000000000007C44 ; ---------------------------------------------------------------------------
.text:0000000000007C44
.text:0000000000007C44 loc_7C44:                               ; CODE XREF: rpl_fts_read+42D↑j
.text:0000000000007C44                 mov     edi, [r12+48h]
.text:0000000000007C49                 test    edi, 2000h
.text:0000000000007C4F                 jnz     loc_783E
.text:0000000000007C55                 mov     r9d, [rbp+40h]
.text:0000000000007C59                 test    r9d, r9d
.text:0000000000007C5C                 jz      short loc_7C70
.text:0000000000007C5E                 cmp     word ptr [rbp+70h], 4
.text:0000000000007C63                 jz      short loc_7C70
.text:0000000000007C65                 mov     r8d, 7
.text:0000000000007C6B                 mov     [rbp+70h], r8w
.text:0000000000007C70
.text:0000000000007C70 loc_7C70:                               ; CODE XREF: rpl_fts_read+53C↑j
.text:0000000000007C70                                         ; rpl_fts_read+543↑j
.text:0000000000007C70                 lea     rsi, [r12+58h]
.text:0000000000007C75                 mov     rdx, rbp
.text:0000000000007C78                 call    leave_dir_isra_12
.text:0000000000007C7D                 jmp     loc_78BA
.text:0000000000007C82 ; ---------------------------------------------------------------------------
.text:0000000000007C82
.text:0000000000007C82 loc_7C82:                               ; CODE XREF: rpl_fts_read+A9↑j
.text:0000000000007C82                 mov     rdi, rbx        ; ptr
.text:0000000000007C85                 xor     ebp, ebp
.text:0000000000007C87                 call    free
.text:0000000000007C8C                 call    ___errno_location
.text:0000000000007C91                 mov     dword ptr [rax], 0
.text:0000000000007C97                 mov     qword ptr [r12], 0
.text:0000000000007C9F                 jmp     loc_78BA
.text:0000000000007C9F ; ---------------------------------------------------------------------------
.text:0000000000007CA4                 align 8
.text:0000000000007CA8
.text:0000000000007CA8 loc_7CA8:                               ; CODE XREF: rpl_fts_read+1E3↑j
.text:0000000000007CA8                 mov     rbx, [rbp+8]
.text:0000000000007CAC                 cmp     qword ptr [rbx+68h], 0
.text:0000000000007CB1                 jnz     short loc_7CC4
.text:0000000000007CB3                 mov     eax, [r12+48h]
.text:0000000000007CB8                 and     eax, 18h
.text:0000000000007CBB                 cmp     eax, 18h
.text:0000000000007CBE                 jz      loc_7E1D
.text:0000000000007CC4
.text:0000000000007CC4 loc_7CC4:                               ; CODE XREF: rpl_fts_read+591↑j
.text:0000000000007CC4                                         ; rpl_fts_read+70D↓j
.text:0000000000007CC4                 xor     edx, edx
.text:0000000000007CC6                 mov     rsi, rbp
.text:0000000000007CC9                 mov     rdi, r12
.text:0000000000007CCC                 call    fts_stat
.text:0000000000007CD1                 mov     edx, [rbp+90h]
.text:0000000000007CD7                 mov     [rbp+70h], ax
.text:0000000000007CDB                 and     edx, 0F000h
.text:0000000000007CE1                 cmp     edx, 4000h
.text:0000000000007CE7                 jnz     loc_7A7C
.text:0000000000007CED                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007CF2                 jz      loc_7E0E
.text:0000000000007CF8                 mov     rcx, [rbx+68h]
.text:0000000000007CFC                 lea     rdx, [rcx-1]
.text:0000000000007D00                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:0000000000007D04                 ja      short loc_7D0A
.text:0000000000007D06                 mov     [rbx+68h], rdx
.text:0000000000007D0A
.text:0000000000007D0A loc_7D0A:                               ; CODE XREF: rpl_fts_read+5E4↑j
.text:0000000000007D0A                 cmp     ax, 1
.text:0000000000007D0E                 jnz     loc_78BA
.text:0000000000007D14                 jmp     loc_7A96
.text:0000000000007D14 ; ---------------------------------------------------------------------------
.text:0000000000007D19                 align 20h
.text:0000000000007D20
.text:0000000000007D20 loc_7D20:                               ; CODE XREF: rpl_fts_read+92↑j
.text:0000000000007D20                 mov     rax, [rbx+48h]
.text:0000000000007D24                 mov     rdx, [r12+20h]
.text:0000000000007D29                 mov     esi, 3
.text:0000000000007D2E                 mov     [r12], rbx
.text:0000000000007D32                 mov     rdi, r12
.text:0000000000007D35                 mov     byte ptr [rdx+rax], 0
.text:0000000000007D39                 call    fts_build
.text:0000000000007D3E                 test    rax, rax
.text:0000000000007D41                 mov     rbx, rax
.text:0000000000007D44                 jz      short loc_7D98
.text:0000000000007D46                 mov     rdi, rbp        ; ptr
.text:0000000000007D49                 mov     rbp, rbx
.text:0000000000007D4C                 call    free
.text:0000000000007D51                 jmp     loc_7AD2
.text:0000000000007D51 ; ---------------------------------------------------------------------------
.text:0000000000007D56                 align 20h
.text:0000000000007D60
.text:0000000000007D60 loc_7D60:                               ; CODE XREF: rpl_fts_read+15F↑j
.text:0000000000007D60                 mov     edi, [rbp+44h]  ; fd
.text:0000000000007D63                 call    _close
.text:0000000000007D68                 jmp     loc_7885
.text:0000000000007D6D ; ---------------------------------------------------------------------------
.text:0000000000007D6D
.text:0000000000007D6D loc_7D6D:                               ; CODE XREF: rpl_fts_read+3AC↑j
.text:0000000000007D6D                 mov     edx, 1
.text:0000000000007D72                 mov     rsi, rbx
.text:0000000000007D75                 mov     rdi, r12
.text:0000000000007D78                 call    fts_stat
.text:0000000000007D7D                 cmp     ax, 1
.text:0000000000007D81                 mov     [rbx+70h], ax
.text:0000000000007D85                 jz      short loc_7DE1
.text:0000000000007D87
.text:0000000000007D87 loc_7D87:                               ; CODE XREF: rpl_fts_read+6CA↓j
.text:0000000000007D87                                         ; rpl_fts_read+6E9↓j ...
.text:0000000000007D87                 mov     esi, 3
.text:0000000000007D8C                 mov     rbp, rbx
.text:0000000000007D8F                 mov     [rbx+74h], si
.text:0000000000007D93                 jmp     loc_7AD2
.text:0000000000007D98 ; ---------------------------------------------------------------------------
.text:0000000000007D98
.text:0000000000007D98 loc_7D98:                               ; CODE XREF: rpl_fts_read+624↑j
.text:0000000000007D98                 test    byte ptr [r12+49h], 20h
.text:0000000000007D9E                 jnz     loc_783E
.text:0000000000007DA4                 mov     rbx, [rbp+8]
.text:0000000000007DA8                 jmp     loc_77B8
.text:0000000000007DAD ; ---------------------------------------------------------------------------
.text:0000000000007DAD
.text:0000000000007DAD loc_7DAD:                               ; CODE XREF: rpl_fts_read+4EF↑j
.text:0000000000007DAD                 call    _fchdir
.text:0000000000007DB2                 test    eax, eax
.text:0000000000007DB4                 jz      short loc_7DC9
.text:0000000000007DB6                 call    ___errno_location
.text:0000000000007DBB                 mov     eax, [rax]
.text:0000000000007DBD                 mov     [rbx+40h], eax
.text:0000000000007DC0                 or      dword ptr [r12+48h], 2000h
.text:0000000000007DC9
.text:0000000000007DC9 loc_7DC9:                               ; CODE XREF: rpl_fts_read+694↑j
.text:0000000000007DC9                 mov     edi, [rbx+44h]
.text:0000000000007DCC                 jmp     loc_780E
.text:0000000000007DD1 ; ---------------------------------------------------------------------------
.text:0000000000007DD1
.text:0000000000007DD1 loc_7DD1:                               ; CODE XREF: rpl_fts_read+2AA↑j
.text:0000000000007DD1                 or      dword ptr [r12+48h], 2000h
.text:0000000000007DDA                 xor     ebp, ebp
.text:0000000000007DDC                 jmp     loc_78BA
.text:0000000000007DE1 ; ---------------------------------------------------------------------------
.text:0000000000007DE1
.text:0000000000007DE1 loc_7DE1:                               ; CODE XREF: rpl_fts_read+665↑j
.text:0000000000007DE1                 mov     esi, [r12+48h]
.text:0000000000007DE6                 test    sil, 4
.text:0000000000007DEA                 jnz     short loc_7D87
.text:0000000000007DEC                 mov     edi, [r12+2Ch]
.text:0000000000007DF1                 lea     rdx, asc_AF1A+1 ; "."
.text:0000000000007DF8                 call    diropen_isra_6
.text:0000000000007DFD                 test    eax, eax
.text:0000000000007DFF                 mov     [rbx+44h], eax
.text:0000000000007E02                 js      short loc_7E80
.text:0000000000007E04                 or      word ptr [rbx+72h], 2
.text:0000000000007E09                 jmp     loc_7D87
.text:0000000000007E0E ; ---------------------------------------------------------------------------
.text:0000000000007E0E
.text:0000000000007E0E loc_7E0E:                               ; CODE XREF: rpl_fts_read+5D2↑j
.text:0000000000007E0E                 cmp     ax, 1
.text:0000000000007E12                 jnz     loc_78BA
.text:0000000000007E18                 jmp     loc_7A8D
.text:0000000000007E1D ; ---------------------------------------------------------------------------
.text:0000000000007E1D
.text:0000000000007E1D loc_7E1D:                               ; CODE XREF: rpl_fts_read+59E↑j
.text:0000000000007E1D                 mov     esi, [r12+2Ch]
.text:0000000000007E22                 mov     rdi, rbx
.text:0000000000007E25                 call    leaf_optimization
.text:0000000000007E2A                 cmp     eax, 2
.text:0000000000007E2D                 jnz     loc_7CC4
.text:0000000000007E33                 movzx   eax, word ptr [rbp+70h]
.text:0000000000007E37                 jmp     loc_7A7C
.text:0000000000007E3C ; ---------------------------------------------------------------------------
.text:0000000000007E3C
.text:0000000000007E3C loc_7E3C:                               ; CODE XREF: rpl_fts_read+515↑j
.text:0000000000007E3C                 mov     edi, [r12+2Ch]
.text:0000000000007E41                 lea     rdx, asc_AF1A+1 ; "."
.text:0000000000007E48                 call    diropen_isra_6
.text:0000000000007E4D                 test    eax, eax
.text:0000000000007E4F                 mov     [rbp+44h], eax
.text:0000000000007E52                 js      short loc_7E62
.text:0000000000007E54                 or      word ptr [rbp+72h], 2
.text:0000000000007E59                 movzx   eax, word ptr [rbp+70h]
.text:0000000000007E5D                 jmp     loc_7A6E
.text:0000000000007E62 ; ---------------------------------------------------------------------------
.text:0000000000007E62
.text:0000000000007E62 loc_7E62:                               ; CODE XREF: rpl_fts_read+732↑j
.text:0000000000007E62                 call    ___errno_location
.text:0000000000007E67                 mov     eax, [rax]
.text:0000000000007E69                 mov     r11d, 7
.text:0000000000007E6F                 mov     [rbp+70h], r11w
.text:0000000000007E74                 mov     [rbp+40h], eax
.text:0000000000007E77                 mov     [r12], rbp
.text:0000000000007E7B                 jmp     loc_78BA
.text:0000000000007E80 ; ---------------------------------------------------------------------------
.text:0000000000007E80
.text:0000000000007E80 loc_7E80:                               ; CODE XREF: rpl_fts_read+6E2↑j
.text:0000000000007E80                 call    ___errno_location
.text:0000000000007E85                 mov     eax, [rax]
.text:0000000000007E87                 mov     edi, 7
.text:0000000000007E8C                 mov     [rbx+70h], di
.text:0000000000007E90                 mov     [rbx+40h], eax
.text:0000000000007E93                 jmp     loc_7D87
.text:0000000000007E93 ; } // starts at 7720
.text:0000000000007E93 rpl_fts_read    endp
.text:0000000000007E93
.text:0000000000007E93 ; ---------------------------------------------------------------------------
.text:0000000000007E98                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EA0
.text:0000000000007EA0
.text:0000000000007EA0                 public rpl_fts_set
.text:0000000000007EA0 rpl_fts_set     proc near               ; CODE XREF: main+481↑p
.text:0000000000007EA0                                         ; main+A72↑p ...
.text:0000000000007EA0 ; __unwind {
.text:0000000000007EA0                 cmp     edx, 4
.text:0000000000007EA3                 ja      short loc_7EB0
.text:0000000000007EA5                 mov     [rsi+74h], dx
.text:0000000000007EA9                 xor     eax, eax
.text:0000000000007EAB                 retn
.text:0000000000007EAB ; ---------------------------------------------------------------------------
.text:0000000000007EAC                 align 10h
.text:0000000000007EB0
.text:0000000000007EB0 loc_7EB0:                               ; CODE XREF: rpl_fts_set+3↑j
.text:0000000000007EB0                 sub     rsp, 8
.text:0000000000007EB4                 call    ___errno_location
.text:0000000000007EB9                 mov     dword ptr [rax], 16h
.text:0000000000007EBF                 mov     eax, 1
.text:0000000000007EC4                 add     rsp, 8
.text:0000000000007EC8                 retn
.text:0000000000007EC8 ; } // starts at 7EA0
.text:0000000000007EC8 rpl_fts_set     endp
.text:0000000000007EC8
.text:0000000000007EC8 ; ---------------------------------------------------------------------------
.text:0000000000007EC9                 align 10h
.text:0000000000007ED0
.text:0000000000007ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007ED0
.text:0000000000007ED0
.text:0000000000007ED0                 public rpl_fts_children
.text:0000000000007ED0 rpl_fts_children proc near
.text:0000000000007ED0 ; __unwind {
.text:0000000000007ED0                 push    r14
.text:0000000000007ED2                 push    r13
.text:0000000000007ED4                 push    r12
.text:0000000000007ED6                 push    rbp
.text:0000000000007ED7                 mov     r12d, esi
.text:0000000000007EDA                 push    rbx
.text:0000000000007EDB                 mov     rbx, rdi
.text:0000000000007EDE                 call    ___errno_location
.text:0000000000007EE3                 test    r12d, 0FFFFEFFFh
.text:0000000000007EEA                 mov     r13, rax
.text:0000000000007EED                 jnz     loc_7FD8
.text:0000000000007EF3                 mov     rbp, [rbx]
.text:0000000000007EF6                 mov     dword ptr [rax], 0
.text:0000000000007EFC                 test    byte ptr [rbx+49h], 20h
.text:0000000000007F00                 jnz     short loc_7F80
.text:0000000000007F02                 movzx   eax, word ptr [rbp+70h]
.text:0000000000007F06                 cmp     ax, 9
.text:0000000000007F0A                 jz      short loc_7F70
.text:0000000000007F0C                 cmp     ax, 1
.text:0000000000007F10                 jnz     short loc_7F80
.text:0000000000007F12                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000007F16                 test    rdi, rdi
.text:0000000000007F19                 jz      short loc_7F20
.text:0000000000007F1B                 call    fts_lfree
.text:0000000000007F20
.text:0000000000007F20 loc_7F20:                               ; CODE XREF: rpl_fts_children+49↑j
.text:0000000000007F20                 cmp     r12d, 1000h
.text:0000000000007F27                 mov     r14d, 1
.text:0000000000007F2D                 jnz     short loc_7F3C
.text:0000000000007F2F                 or      dword ptr [rbx+48h], 1000h
.text:0000000000007F36                 mov     r14d, 2
.text:0000000000007F3C
.text:0000000000007F3C loc_7F3C:                               ; CODE XREF: rpl_fts_children+5D↑j
.text:0000000000007F3C                 cmp     qword ptr [rbp+58h], 0
.text:0000000000007F41                 jnz     short loc_7F55
.text:0000000000007F43                 mov     rax, [rbp+30h]
.text:0000000000007F47                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000007F4A                 jz      short loc_7F55
.text:0000000000007F4C                 mov     esi, [rbx+48h]
.text:0000000000007F4F                 test    sil, 4
.text:0000000000007F53                 jz      short loc_7F90
.text:0000000000007F55
.text:0000000000007F55 loc_7F55:                               ; CODE XREF: rpl_fts_children+71↑j
.text:0000000000007F55                                         ; rpl_fts_children+7A↑j
.text:0000000000007F55                 mov     esi, r14d
.text:0000000000007F58                 mov     rdi, rbx
.text:0000000000007F5B                 call    fts_build
.text:0000000000007F60                 mov     [rbx+8], rax
.text:0000000000007F64
.text:0000000000007F64 loc_7F64:                               ; CODE XREF: rpl_fts_children+100↓j
.text:0000000000007F64                                         ; rpl_fts_children+110↓j ...
.text:0000000000007F64                 pop     rbx
.text:0000000000007F65                 pop     rbp
.text:0000000000007F66                 pop     r12
.text:0000000000007F68                 pop     r13
.text:0000000000007F6A                 pop     r14
.text:0000000000007F6C                 retn
.text:0000000000007F6C ; ---------------------------------------------------------------------------
.text:0000000000007F6D                 align 10h
.text:0000000000007F70
.text:0000000000007F70 loc_7F70:                               ; CODE XREF: rpl_fts_children+3A↑j
.text:0000000000007F70                 pop     rbx
.text:0000000000007F71                 mov     rax, [rbp+10h]
.text:0000000000007F75                 pop     rbp
.text:0000000000007F76                 pop     r12
.text:0000000000007F78                 pop     r13
.text:0000000000007F7A                 pop     r14
.text:0000000000007F7C                 retn
.text:0000000000007F7C ; ---------------------------------------------------------------------------
.text:0000000000007F7D                 align 20h
.text:0000000000007F80
.text:0000000000007F80 loc_7F80:                               ; CODE XREF: rpl_fts_children+30↑j
.text:0000000000007F80                                         ; rpl_fts_children+40↑j
.text:0000000000007F80                 pop     rbx
.text:0000000000007F81                 xor     eax, eax
.text:0000000000007F83                 pop     rbp
.text:0000000000007F84                 pop     r12
.text:0000000000007F86                 pop     r13
.text:0000000000007F88                 pop     r14
.text:0000000000007F8A                 retn
.text:0000000000007F8A ; ---------------------------------------------------------------------------
.text:0000000000007F8B                 align 10h
.text:0000000000007F90
.text:0000000000007F90 loc_7F90:                               ; CODE XREF: rpl_fts_children+83↑j
.text:0000000000007F90                 mov     edi, [rbx+2Ch]
.text:0000000000007F93                 lea     rdx, asc_AF1A+1 ; "."
.text:0000000000007F9A                 call    diropen_isra_6
.text:0000000000007F9F                 test    eax, eax
.text:0000000000007FA1                 mov     ebp, eax
.text:0000000000007FA3                 js      short loc_7FF9
.text:0000000000007FA5                 mov     esi, r14d
.text:0000000000007FA8                 mov     rdi, rbx
.text:0000000000007FAB                 call    fts_build
.text:0000000000007FB0                 test    byte ptr [rbx+49h], 2
.text:0000000000007FB4                 mov     [rbx+8], rax
.text:0000000000007FB8                 jnz     short loc_7FE8
.text:0000000000007FBA                 mov     edi, ebp        ; fd
.text:0000000000007FBC                 call    _fchdir
.text:0000000000007FC1                 test    eax, eax
.text:0000000000007FC3                 jnz     short loc_8008
.text:0000000000007FC5                 mov     edi, ebp        ; fd
.text:0000000000007FC7                 call    _close
.text:0000000000007FCC
.text:0000000000007FCC loc_7FCC:                               ; CODE XREF: rpl_fts_children+127↓j
.text:0000000000007FCC                 mov     rax, [rbx+8]
.text:0000000000007FD0                 jmp     short loc_7F64
.text:0000000000007FD0 ; ---------------------------------------------------------------------------
.text:0000000000007FD2                 align 8
.text:0000000000007FD8
.text:0000000000007FD8 loc_7FD8:                               ; CODE XREF: rpl_fts_children+1D↑j
.text:0000000000007FD8                 mov     dword ptr [rax], 16h
.text:0000000000007FDE                 xor     eax, eax
.text:0000000000007FE0                 jmp     loc_7F64
.text:0000000000007FE0 ; ---------------------------------------------------------------------------
.text:0000000000007FE5                 align 8
.text:0000000000007FE8
.text:0000000000007FE8 loc_7FE8:                               ; CODE XREF: rpl_fts_children+E8↑j
.text:0000000000007FE8                 mov     edx, 1
.text:0000000000007FED                 mov     esi, ebp
.text:0000000000007FEF                 mov     rdi, rbx
.text:0000000000007FF2                 call    cwd_advance_fd
.text:0000000000007FF7                 jmp     short loc_7FCC
.text:0000000000007FF9 ; ---------------------------------------------------------------------------
.text:0000000000007FF9
.text:0000000000007FF9 loc_7FF9:                               ; CODE XREF: rpl_fts_children+D3↑j
.text:0000000000007FF9                 mov     qword ptr [rbx+8], 0
.text:0000000000008001                 xor     eax, eax
.text:0000000000008003                 jmp     loc_7F64
.text:0000000000008008 ; ---------------------------------------------------------------------------
.text:0000000000008008
.text:0000000000008008 loc_8008:                               ; CODE XREF: rpl_fts_children+F3↑j
.text:0000000000008008                 mov     ebx, [r13+0]
.text:000000000000800C                 mov     edi, ebp        ; fd
.text:000000000000800E                 call    _close
.text:0000000000008013                 xor     eax, eax
.text:0000000000008015                 mov     [r13+0], ebx
.text:0000000000008019                 jmp     loc_7F64
.text:0000000000008019 ; } // starts at 7ED0
.text:0000000000008019 rpl_fts_children endp
.text:0000000000008019
.text:0000000000008019 ; ---------------------------------------------------------------------------
.text:000000000000801E                 align 20h
.text:0000000000008020
.text:0000000000008020 ; =============== S U B R O U T I N E =======================================
.text:0000000000008020
.text:0000000000008020 ; Attributes: info_from_lumina
.text:0000000000008020
.text:0000000000008020 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008020                 public rpl_mbrtowc
.text:0000000000008020 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008020
.text:0000000000008020 pwc             = dword ptr -34h
.text:0000000000008020 var_30          = qword ptr -30h
.text:0000000000008020
.text:0000000000008020 ; __unwind {
.text:0000000000008020                 push    r13
.text:0000000000008022                 push    r12
.text:0000000000008024                 mov     r13, rsi
.text:0000000000008027                 push    rbp
.text:0000000000008028                 push    rbx
.text:0000000000008029                 mov     rbx, rdi
.text:000000000000802C                 mov     r12, rdx
.text:000000000000802F                 sub     rsp, 18h
.text:0000000000008033                 mov     rax, fs:28h
.text:000000000000803C                 mov     [rsp+38h+var_30], rax
.text:0000000000008041                 xor     eax, eax
.text:0000000000008043                 lea     rax, [rsp+38h+pwc]
.text:0000000000008048                 test    rdi, rdi
.text:000000000000804B                 cmovz   rbx, rax
.text:000000000000804F                 mov     rdi, rbx        ; pwc
.text:0000000000008052                 call    _mbrtowc
.text:0000000000008057                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000805B                 mov     rbp, rax
.text:000000000000805E                 jbe     short loc_8080
.text:0000000000008060                 test    r12, r12
.text:0000000000008063                 jz      short loc_8080
.text:0000000000008065                 xor     edi, edi
.text:0000000000008067                 call    hard_locale
.text:000000000000806C                 test    al, al
.text:000000000000806E                 jnz     short loc_8080
.text:0000000000008070                 movzx   eax, byte ptr [r13+0]
.text:0000000000008075                 mov     ebp, 1
.text:000000000000807A                 mov     [rbx], eax
.text:000000000000807C                 nop     dword ptr [rax+00h]
.text:0000000000008080
.text:0000000000008080 loc_8080:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000008080                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000008080                 mov     rdx, [rsp+38h+var_30]
.text:0000000000008085                 xor     rdx, fs:28h
.text:000000000000808E                 mov     rax, rbp
.text:0000000000008091                 jnz     short loc_809E
.text:0000000000008093                 add     rsp, 18h
.text:0000000000008097                 pop     rbx
.text:0000000000008098                 pop     rbp
.text:0000000000008099                 pop     r12
.text:000000000000809B                 pop     r13
.text:000000000000809D                 retn
.text:000000000000809E ; ---------------------------------------------------------------------------
.text:000000000000809E
.text:000000000000809E loc_809E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000809E                 call    ___stack_chk_fail
.text:000000000000809E ; } // starts at 8020
.text:000000000000809E rpl_mbrtowc     endp
.text:000000000000809E
.text:000000000000809E ; ---------------------------------------------------------------------------
.text:00000000000080A3                 align 10h
.text:00000000000080B0
.text:00000000000080B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080B0
.text:00000000000080B0 ; Attributes: info_from_lumina
.text:00000000000080B0
.text:00000000000080B0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000080B0                 public close_stream
.text:00000000000080B0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000080B0                                         ; close_stdout+33↑p
.text:00000000000080B0 ; __unwind {
.text:00000000000080B0                 push    r12
.text:00000000000080B2                 push    rbp
.text:00000000000080B3                 mov     rbp, rdi
.text:00000000000080B6                 push    rbx
.text:00000000000080B7                 call    ___fpending
.text:00000000000080BC                 mov     ebx, [rbp+0]
.text:00000000000080BF                 mov     rdi, rbp        ; stream
.text:00000000000080C2                 mov     r12, rax
.text:00000000000080C5                 call    rpl_fclose
.text:00000000000080CA                 and     ebx, 20h
.text:00000000000080CD                 test    ebx, ebx
.text:00000000000080CF                 jnz     short loc_80E8
.text:00000000000080D1                 test    eax, eax
.text:00000000000080D3                 jz      short loc_80DF
.text:00000000000080D5                 test    r12, r12
.text:00000000000080D8                 mov     eax, 0FFFFFFFFh
.text:00000000000080DD                 jz      short loc_8118
.text:00000000000080DF
.text:00000000000080DF loc_80DF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000080DF                 pop     rbx
.text:00000000000080E0                 pop     rbp
.text:00000000000080E1                 pop     r12
.text:00000000000080E3                 retn
.text:00000000000080E3 ; ---------------------------------------------------------------------------
.text:00000000000080E4                 align 8
.text:00000000000080E8
.text:00000000000080E8 loc_80E8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000080E8                 test    eax, eax
.text:00000000000080EA                 jnz     short loc_8108
.text:00000000000080EC                 call    ___errno_location
.text:00000000000080F1                 mov     dword ptr [rax], 0
.text:00000000000080F7                 mov     eax, 0FFFFFFFFh
.text:00000000000080FC                 pop     rbx
.text:00000000000080FD                 pop     rbp
.text:00000000000080FE                 pop     r12
.text:0000000000008100                 retn
.text:0000000000008100 ; ---------------------------------------------------------------------------
.text:0000000000008101                 align 8
.text:0000000000008108
.text:0000000000008108 loc_8108:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000008108                 pop     rbx
.text:0000000000008109                 mov     eax, 0FFFFFFFFh
.text:000000000000810E                 pop     rbp
.text:000000000000810F                 pop     r12
.text:0000000000008111                 retn
.text:0000000000008111 ; ---------------------------------------------------------------------------
.text:0000000000008112                 align 8
.text:0000000000008118
.text:0000000000008118 loc_8118:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000008118                 call    ___errno_location
.text:000000000000811D                 cmp     dword ptr [rax], 9
.text:0000000000008120                 pop     rbx
.text:0000000000008121                 pop     rbp
.text:0000000000008122                 pop     r12
.text:0000000000008124                 setnz   al
.text:0000000000008127                 movzx   eax, al
.text:000000000000812A                 neg     eax
.text:000000000000812C                 retn
.text:000000000000812C ; } // starts at 80B0
.text:000000000000812C close_stream    endp
.text:000000000000812C
.text:000000000000812C ; ---------------------------------------------------------------------------
.text:000000000000812D                 align 10h
.text:0000000000008130
.text:0000000000008130 ; =============== S U B R O U T I N E =======================================
.text:0000000000008130
.text:0000000000008130
.text:0000000000008130                 public cycle_check_init
.text:0000000000008130 cycle_check_init proc near              ; CODE XREF: setup_dir_isra_4+57↑p
.text:0000000000008130 ; __unwind {
.text:0000000000008130                 mov     qword ptr [rdi+10h], 0
.text:0000000000008138                 mov     dword ptr [rdi+18h], 95F616h
.text:000000000000813F                 retn
.text:000000000000813F ; } // starts at 8130
.text:000000000000813F cycle_check_init endp
.text:000000000000813F
.text:0000000000008140
.text:0000000000008140 ; =============== S U B R O U T I N E =======================================
.text:0000000000008140
.text:0000000000008140
.text:0000000000008140                 public cycle_check
.text:0000000000008140 cycle_check     proc near               ; CODE XREF: enter_dir_isra_10+88↑p
.text:0000000000008140 ; __unwind {
.text:0000000000008140                 cmp     dword ptr [rdi+18h], 95F616h
.text:0000000000008147                 jnz     short loc_81A7
.text:0000000000008149                 mov     rdx, [rdi+10h]
.text:000000000000814D                 mov     rcx, [rsi+8]
.text:0000000000008151                 test    rdx, rdx
.text:0000000000008154                 jz      short loc_8170
.text:0000000000008156                 cmp     [rdi], rcx
.text:0000000000008159                 jz      short loc_8188
.text:000000000000815B
.text:000000000000815B loc_815B:                               ; CODE XREF: cycle_check+4F↓j
.text:000000000000815B                 lea     r8, [rdx+1]
.text:000000000000815F                 xor     eax, eax
.text:0000000000008161                 test    rdx, r8
.text:0000000000008164                 mov     [rdi+10h], r8
.text:0000000000008168                 jz      short loc_81A0
.text:000000000000816A                 rep retn
.text:000000000000816A ; ---------------------------------------------------------------------------
.text:000000000000816C                 align 10h
.text:0000000000008170
.text:0000000000008170 loc_8170:                               ; CODE XREF: cycle_check+14↑j
.text:0000000000008170                 mov     qword ptr [rdi+10h], 1
.text:0000000000008178
.text:0000000000008178 loc_8178:                               ; CODE XREF: cycle_check+65↓j
.text:0000000000008178                 mov     rax, [rsi]
.text:000000000000817B                 mov     [rdi], rcx
.text:000000000000817E                 mov     [rdi+8], rax
.text:0000000000008182                 xor     eax, eax
.text:0000000000008184                 retn
.text:0000000000008184 ; ---------------------------------------------------------------------------
.text:0000000000008185                 align 8
.text:0000000000008188
.text:0000000000008188 loc_8188:                               ; CODE XREF: cycle_check+19↑j
.text:0000000000008188                 mov     rax, [rdi+8]
.text:000000000000818C                 cmp     [rsi], rax
.text:000000000000818F                 jnz     short loc_815B
.text:0000000000008191
.text:0000000000008191 loc_8191:                               ; CODE XREF: cycle_check+63↓j
.text:0000000000008191                 mov     eax, 1
.text:0000000000008196                 retn
.text:0000000000008196 ; ---------------------------------------------------------------------------
.text:0000000000008197                 align 20h
.text:00000000000081A0
.text:00000000000081A0 loc_81A0:                               ; CODE XREF: cycle_check+28↑j
.text:00000000000081A0                 test    r8, r8
.text:00000000000081A3                 jz      short loc_8191
.text:00000000000081A5                 jmp     short loc_8178
.text:00000000000081A7 ; ---------------------------------------------------------------------------
.text:00000000000081A7
.text:00000000000081A7 loc_81A7:                               ; CODE XREF: cycle_check+7↑j
.text:00000000000081A7                 lea     rcx, __PRETTY_FUNCTION___3994 ; "cycle_check"
.text:00000000000081AE                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/cycle-check.c"
.text:00000000000081B5                 lea     rdi, aStateMagic9827 ; "state->magic == 9827862"
.text:00000000000081BC                 sub     rsp, 8
.text:00000000000081C0                 mov     edx, 3Ch ; '<'  ; line
.text:00000000000081C5                 call    ___assert_fail
.text:00000000000081C5 ; } // starts at 8140
.text:00000000000081C5 cycle_check     endp
.text:00000000000081C5
.text:00000000000081C5 ; ---------------------------------------------------------------------------
.text:00000000000081CA                 align 10h
.text:00000000000081D0
.text:00000000000081D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081D0
.text:00000000000081D0
.text:00000000000081D0                 public open_safer
.text:00000000000081D0 open_safer      proc near               ; CODE XREF: diropen_isra_6+23↑j
.text:00000000000081D0
.text:00000000000081D0 var_58          = dword ptr -58h
.text:00000000000081D0 var_50          = qword ptr -50h
.text:00000000000081D0 var_48          = qword ptr -48h
.text:00000000000081D0 var_40          = qword ptr -40h
.text:00000000000081D0 var_38          = byte ptr -38h
.text:00000000000081D0 var_28          = qword ptr -28h
.text:00000000000081D0 arg_0           = byte ptr  8
.text:00000000000081D0
.text:00000000000081D0 ; __unwind {
.text:00000000000081D0                 sub     rsp, 58h
.text:00000000000081D4                 mov     [rsp+58h+var_28], rdx
.text:00000000000081D9                 xor     edx, edx
.text:00000000000081DB                 mov     rax, fs:28h
.text:00000000000081E4                 mov     [rsp+58h+var_40], rax
.text:00000000000081E9                 xor     eax, eax
.text:00000000000081EB                 test    sil, 40h
.text:00000000000081EF                 jnz     short loc_8218
.text:00000000000081F1
.text:00000000000081F1 loc_81F1:                               ; CODE XREF: open_safer+67↓j
.text:00000000000081F1                 xor     eax, eax
.text:00000000000081F3                 call    _open
.text:00000000000081F8                 mov     edi, eax        ; fd
.text:00000000000081FA                 call    fd_safer_flag
.text:00000000000081FF                 mov     rcx, [rsp+58h+var_40]
.text:0000000000008204                 xor     rcx, fs:28h
.text:000000000000820D                 jnz     short loc_8239
.text:000000000000820F                 add     rsp, 58h
.text:0000000000008213                 retn
.text:0000000000008213 ; ---------------------------------------------------------------------------
.text:0000000000008214                 align 8
.text:0000000000008218
.text:0000000000008218 loc_8218:                               ; CODE XREF: open_safer+1F↑j
.text:0000000000008218                 lea     rax, [rsp+58h+arg_0]
.text:000000000000821D                 mov     [rsp+58h+var_58], 10h
.text:0000000000008224                 mov     edx, dword ptr [rsp+58h+var_28]
.text:0000000000008228                 mov     [rsp+58h+var_50], rax
.text:000000000000822D                 lea     rax, [rsp+58h+var_38]
.text:0000000000008232                 mov     [rsp+58h+var_48], rax
.text:0000000000008237                 jmp     short loc_81F1
.text:0000000000008239 ; ---------------------------------------------------------------------------
.text:0000000000008239
.text:0000000000008239 loc_8239:                               ; CODE XREF: open_safer+3D↑j
.text:0000000000008239                 call    ___stack_chk_fail
.text:0000000000008239 ; } // starts at 81D0
.text:0000000000008239 open_safer      endp
.text:0000000000008239
.text:0000000000008239 ; ---------------------------------------------------------------------------
.text:000000000000823E                 align 20h
.text:0000000000008240
.text:0000000000008240 ; =============== S U B R O U T I N E =======================================
.text:0000000000008240
.text:0000000000008240
.text:0000000000008240                 public hard_locale
.text:0000000000008240 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000008240 ; __unwind {
.text:0000000000008240                 sub     rsp, 8
.text:0000000000008244                 xor     esi, esi        ; locale
.text:0000000000008246                 call    _setlocale
.text:000000000000824B                 mov     rdx, rax
.text:000000000000824E                 mov     eax, 1
.text:0000000000008253                 test    rdx, rdx
.text:0000000000008256                 jz      short loc_8275
.text:0000000000008258                 lea     rdi, aC         ; "C"
.text:000000000000825F                 mov     ecx, 2
.text:0000000000008264                 mov     rsi, rdx
.text:0000000000008267                 repe cmpsb
.text:0000000000008269                 setnbe  cl
.text:000000000000826C                 sbb     cl, 0
.text:000000000000826F                 xor     eax, eax
.text:0000000000008271                 test    cl, cl
.text:0000000000008273                 jnz     short loc_8280
.text:0000000000008275
.text:0000000000008275 loc_8275:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000008275                 add     rsp, 8
.text:0000000000008279                 retn
.text:0000000000008279 ; ---------------------------------------------------------------------------
.text:000000000000827A                 align 20h
.text:0000000000008280
.text:0000000000008280 loc_8280:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000008280                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000008287                 mov     ecx, 6
.text:000000000000828C                 mov     rsi, rdx
.text:000000000000828F                 repe cmpsb
.text:0000000000008291                 setnbe  al
.text:0000000000008294                 sbb     al, 0
.text:0000000000008296                 test    al, al
.text:0000000000008298                 setnz   al
.text:000000000000829B                 add     rsp, 8
.text:000000000000829F                 retn
.text:000000000000829F ; } // starts at 8240
.text:000000000000829F hard_locale     endp
.text:000000000000829F
.text:00000000000082A0
.text:00000000000082A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082A0
.text:00000000000082A0 ; Attributes: info_from_lumina
.text:00000000000082A0
.text:00000000000082A0 ; size_t __fastcall next_prime(size_t candidate)
.text:00000000000082A0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:00000000000082A0                                         ; hash_rehash+7B↓p
.text:00000000000082A0 ; __unwind {
.text:00000000000082A0                 cmp     rdi, 0Ah
.text:00000000000082A4                 mov     eax, 0Ah
.text:00000000000082A9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:00000000000082B3                 cmovb   rdi, rax
.text:00000000000082B7                 or      rdi, 1
.text:00000000000082BB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000082BF                 jz      short loc_832F
.text:00000000000082C1                 nop     dword ptr [rax+00000000h]
.text:00000000000082C8
.text:00000000000082C8 loc_82C8:                               ; CODE XREF: next_prime+8D↓j
.text:00000000000082C8                 mov     rax, rdi
.text:00000000000082CB                 mov     rcx, rdi
.text:00000000000082CE                 mul     r9
.text:00000000000082D1                 mov     rax, rdx
.text:00000000000082D4                 shr     rax, 1
.text:00000000000082D7                 lea     rax, [rax+rax*2]
.text:00000000000082DB                 sub     rcx, rax
.text:00000000000082DE                 cmp     rdi, 9
.text:00000000000082E2                 mov     rax, rcx
.text:00000000000082E5                 jbe     short loc_8320
.text:00000000000082E7                 test    rcx, rcx
.text:00000000000082EA                 jz      short loc_8325
.text:00000000000082EC                 mov     r8d, 10h
.text:00000000000082F2                 mov     esi, 9
.text:00000000000082F7                 mov     ecx, 3
.text:00000000000082FC                 jmp     short loc_8309
.text:00000000000082FC ; ---------------------------------------------------------------------------
.text:00000000000082FE                 align 20h
.text:0000000000008300
.text:0000000000008300 loc_8300:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000008300                 add     r8, 8
.text:0000000000008304                 test    rdx, rdx
.text:0000000000008307                 jz      short loc_8325
.text:0000000000008309
.text:0000000000008309 loc_8309:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000008309                 add     rcx, 2
.text:000000000000830D                 xor     edx, edx
.text:000000000000830F                 mov     rax, rdi
.text:0000000000008312                 div     rcx
.text:0000000000008315                 add     rsi, r8
.text:0000000000008318                 cmp     rsi, rdi
.text:000000000000831B                 mov     rax, rdx
.text:000000000000831E                 jb      short loc_8300
.text:0000000000008320
.text:0000000000008320 loc_8320:                               ; CODE XREF: next_prime+45↑j
.text:0000000000008320                 test    rax, rax
.text:0000000000008323                 jnz     short loc_832F
.text:0000000000008325
.text:0000000000008325 loc_8325:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000008325                                         ; next_prime+67↑j
.text:0000000000008325                 add     rdi, 2
.text:0000000000008329                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000832D                 jnz     short loc_82C8
.text:000000000000832F
.text:000000000000832F loc_832F:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000832F                                         ; next_prime+83↑j
.text:000000000000832F                 mov     rax, rdi
.text:0000000000008332                 retn
.text:0000000000008332 ; } // starts at 82A0
.text:0000000000008332 next_prime      endp
.text:0000000000008332
.text:0000000000008332 ; ---------------------------------------------------------------------------
.text:0000000000008333                 align 20h
.text:0000000000008340
.text:0000000000008340 ; =============== S U B R O U T I N E =======================================
.text:0000000000008340
.text:0000000000008340
.text:0000000000008340 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000008340 ; __unwind {
.text:0000000000008340                 mov     rax, rdi
.text:0000000000008343                 xor     edx, edx
.text:0000000000008345                 ror     rax, 3
.text:0000000000008349                 div     rsi
.text:000000000000834C                 mov     rax, rdx
.text:000000000000834F                 retn
.text:000000000000834F ; } // starts at 8340
.text:000000000000834F raw_hasher      endp
.text:000000000000834F
.text:0000000000008350
.text:0000000000008350 ; =============== S U B R O U T I N E =======================================
.text:0000000000008350
.text:0000000000008350
.text:0000000000008350 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000008350 ; __unwind {
.text:0000000000008350                 cmp     rdi, rsi
.text:0000000000008353                 setz    al
.text:0000000000008356                 retn
.text:0000000000008356 ; } // starts at 8350
.text:0000000000008356 raw_comparator  endp
.text:0000000000008356
.text:0000000000008356 ; ---------------------------------------------------------------------------
.text:0000000000008357                 align 20h
.text:0000000000008360
.text:0000000000008360 ; =============== S U B R O U T I N E =======================================
.text:0000000000008360
.text:0000000000008360 ; Attributes: info_from_lumina
.text:0000000000008360
.text:0000000000008360 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000008360 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000008360                                         ; transfer_entries+65↓p ...
.text:0000000000008360 ; __unwind {
.text:0000000000008360                 push    rbx
.text:0000000000008361                 mov     rbx, rdi
.text:0000000000008364                 mov     rdi, rsi
.text:0000000000008367                 mov     rsi, [rbx+10h]
.text:000000000000836B                 call    qword ptr [rbx+30h]
.text:000000000000836E                 cmp     [rbx+10h], rax
.text:0000000000008372                 jbe     short loc_837D
.text:0000000000008374                 shl     rax, 4
.text:0000000000008378                 add     rax, [rbx]
.text:000000000000837B                 pop     rbx
.text:000000000000837C                 retn
.text:000000000000837D ; ---------------------------------------------------------------------------
.text:000000000000837D
.text:000000000000837D loc_837D:                               ; CODE XREF: safe_hasher+12↑j
.text:000000000000837D                 call    _abort
.text:000000000000837D ; } // starts at 8360
.text:000000000000837D safe_hasher     endp
.text:000000000000837D
.text:000000000000837D ; ---------------------------------------------------------------------------
.text:0000000000008382                 align 10h
.text:0000000000008390
.text:0000000000008390 ; =============== S U B R O U T I N E =======================================
.text:0000000000008390
.text:0000000000008390 ; Attributes: info_from_lumina
.text:0000000000008390
.text:0000000000008390 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000008390 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000008390                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000008390 ; __unwind {
.text:0000000000008390                 push    r14
.text:0000000000008392                 push    r13
.text:0000000000008394                 mov     r14, rdx
.text:0000000000008397                 push    r12
.text:0000000000008399                 push    rbp
.text:000000000000839A                 mov     r12, rdi
.text:000000000000839D                 push    rbx
.text:000000000000839E                 mov     rbp, rsi
.text:00000000000083A1                 mov     r13d, ecx
.text:00000000000083A4                 call    safe_hasher
.text:00000000000083A9                 mov     [r14], rax
.text:00000000000083AC                 mov     rsi, [rax]
.text:00000000000083AF                 test    rsi, rsi
.text:00000000000083B2                 jz      loc_84A0
.text:00000000000083B8                 cmp     rsi, rbp
.text:00000000000083BB                 mov     rbx, rax
.text:00000000000083BE                 jz      loc_8453
.text:00000000000083C4                 mov     rdi, rbp
.text:00000000000083C7                 call    qword ptr [r12+38h]
.text:00000000000083CC                 test    al, al
.text:00000000000083CE                 jnz     loc_8450
.text:00000000000083D4                 mov     rax, [rbx+8]
.text:00000000000083D8                 test    rax, rax
.text:00000000000083DB                 jz      loc_84A0
.text:00000000000083E1                 mov     rsi, [rax]
.text:00000000000083E4                 cmp     rbp, rsi
.text:00000000000083E7                 jnz     short loc_8409
.text:00000000000083E9                 jmp     short loc_841C
.text:00000000000083E9 ; ---------------------------------------------------------------------------
.text:00000000000083EB                 align 10h
.text:00000000000083F0
.text:00000000000083F0 loc_83F0:                               ; CODE XREF: hash_find_entry+83↓j
.text:00000000000083F0                 mov     rbx, [rbx+8]
.text:00000000000083F4                 mov     rax, [rbx+8]
.text:00000000000083F8                 test    rax, rax
.text:00000000000083FB                 jz      loc_84A0
.text:0000000000008401                 mov     rsi, [rax]
.text:0000000000008404                 cmp     rsi, rbp
.text:0000000000008407                 jz      short loc_841C
.text:0000000000008409
.text:0000000000008409 loc_8409:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000008409                 mov     rdi, rbp
.text:000000000000840C                 call    qword ptr [r12+38h]
.text:0000000000008411                 test    al, al
.text:0000000000008413                 jz      short loc_83F0
.text:0000000000008415                 mov     rax, [rbx+8]
.text:0000000000008419                 mov     rsi, [rax]
.text:000000000000841C
.text:000000000000841C loc_841C:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000841C                                         ; hash_find_entry+77↑j
.text:000000000000841C                 test    r13b, r13b
.text:000000000000841F                 jz      short loc_843E
.text:0000000000008421                 mov     rdx, [rax+8]
.text:0000000000008425                 mov     [rbx+8], rdx
.text:0000000000008429                 mov     qword ptr [rax], 0
.text:0000000000008430                 mov     rdx, [r12+48h]
.text:0000000000008435                 mov     [rax+8], rdx
.text:0000000000008439                 mov     [r12+48h], rax
.text:000000000000843E
.text:000000000000843E loc_843E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000843E                                         ; hash_find_entry+C6↓j ...
.text:000000000000843E                 pop     rbx
.text:000000000000843F                 mov     rax, rsi
.text:0000000000008442                 pop     rbp
.text:0000000000008443                 pop     r12
.text:0000000000008445                 pop     r13
.text:0000000000008447                 pop     r14
.text:0000000000008449                 retn
.text:0000000000008449 ; ---------------------------------------------------------------------------
.text:000000000000844A                 align 10h
.text:0000000000008450
.text:0000000000008450 loc_8450:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000008450                 mov     rsi, [rbx]
.text:0000000000008453
.text:0000000000008453 loc_8453:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000008453                 test    r13b, r13b
.text:0000000000008456                 jz      short loc_843E
.text:0000000000008458                 mov     rax, [rbx+8]
.text:000000000000845C                 test    rax, rax
.text:000000000000845F                 jz      short loc_8490
.text:0000000000008461                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000008465                 movups  xmmword ptr [rbx], xmm0
.text:0000000000008468                 mov     qword ptr [rax], 0
.text:000000000000846F                 mov     rdx, [r12+48h]
.text:0000000000008474                 mov     [rax+8], rdx
.text:0000000000008478                 mov     [r12+48h], rax
.text:000000000000847D                 mov     rax, rsi
.text:0000000000008480                 pop     rbx
.text:0000000000008481                 pop     rbp
.text:0000000000008482                 pop     r12
.text:0000000000008484                 pop     r13
.text:0000000000008486                 pop     r14
.text:0000000000008488                 retn
.text:0000000000008488 ; ---------------------------------------------------------------------------
.text:0000000000008489                 align 10h
.text:0000000000008490
.text:0000000000008490 loc_8490:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000008490                 mov     qword ptr [rbx], 0
.text:0000000000008497                 jmp     short loc_843E
.text:0000000000008497 ; ---------------------------------------------------------------------------
.text:0000000000008499                 align 20h
.text:00000000000084A0
.text:00000000000084A0 loc_84A0:                               ; CODE XREF: hash_find_entry+22↑j
.text:00000000000084A0                                         ; hash_find_entry+4B↑j ...
.text:00000000000084A0                 xor     esi, esi
.text:00000000000084A2                 pop     rbx
.text:00000000000084A3                 mov     rax, rsi
.text:00000000000084A6                 pop     rbp
.text:00000000000084A7                 pop     r12
.text:00000000000084A9                 pop     r13
.text:00000000000084AB                 pop     r14
.text:00000000000084AD                 retn
.text:00000000000084AD ; } // starts at 8390
.text:00000000000084AD hash_find_entry endp
.text:00000000000084AD
.text:00000000000084AD ; ---------------------------------------------------------------------------
.text:00000000000084AE                 align 10h
.text:00000000000084B0
.text:00000000000084B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000084B0
.text:00000000000084B0 ; Attributes: info_from_lumina
.text:00000000000084B0
.text:00000000000084B0 ; _Bool check_tuning(Hash_table *table)
.text:00000000000084B0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:00000000000084B0                                         ; hash_initialize+11B↓p ...
.text:00000000000084B0 ; __unwind {
.text:00000000000084B0                 mov     rdx, [rdi]
.text:00000000000084B3                 lea     rcx, default_tuning
.text:00000000000084BA                 mov     eax, 1
.text:00000000000084BF                 cmp     rdx, rcx
.text:00000000000084C2                 jz      short locret_8525
.text:00000000000084C4                 movss   xmm0, dword ptr [rdx+8]
.text:00000000000084C9                 ucomiss xmm0, cs:dword_B034
.text:00000000000084D0                 jbe     short loc_8520
.text:00000000000084D2                 movss   xmm1, cs:dword_B038
.text:00000000000084DA                 ucomiss xmm1, xmm0
.text:00000000000084DD                 jbe     short loc_8520
.text:00000000000084DF                 movss   xmm1, dword ptr [rdx+0Ch]
.text:00000000000084E4                 ucomiss xmm1, cs:dword_B03C
.text:00000000000084EB                 jbe     short loc_8520
.text:00000000000084ED                 movss   xmm1, dword ptr [rdx]
.text:00000000000084F1                 ucomiss xmm1, cs:dword_B040
.text:00000000000084F8                 jb      short loc_8520
.text:00000000000084FA                 addss   xmm1, cs:dword_B034
.text:0000000000008502                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000008507                 ucomiss xmm2, xmm1
.text:000000000000850A                 jbe     short loc_8520
.text:000000000000850C                 movss   xmm3, cs:dword_B044
.text:0000000000008514                 ucomiss xmm3, xmm2
.text:0000000000008517                 jb      short loc_8520
.text:0000000000008519                 ucomiss xmm0, xmm1
.text:000000000000851C                 ja      short locret_8525
.text:000000000000851E                 xchg    ax, ax
.text:0000000000008520
.text:0000000000008520 loc_8520:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000008520                                         ; check_tuning+2D↑j ...
.text:0000000000008520                 mov     [rdi], rcx
.text:0000000000008523                 xor     eax, eax
.text:0000000000008525
.text:0000000000008525 locret_8525:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000008525                                         ; check_tuning+6C↑j
.text:0000000000008525                 rep retn
.text:0000000000008525 ; } // starts at 84B0
.text:0000000000008525 check_tuning    endp
.text:0000000000008525
.text:0000000000008525 ; ---------------------------------------------------------------------------
.text:0000000000008527                 align 10h
.text:0000000000008530
.text:0000000000008530 ; =============== S U B R O U T I N E =======================================
.text:0000000000008530
.text:0000000000008530 ; Attributes: info_from_lumina
.text:0000000000008530
.text:0000000000008530 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000008530 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000008530                                         ; hash_rehash+152↓p ...
.text:0000000000008530 ; __unwind {
.text:0000000000008530                 push    r15
.text:0000000000008532                 push    r14
.text:0000000000008534                 push    r13
.text:0000000000008536                 push    r12
.text:0000000000008538                 push    rbp
.text:0000000000008539                 push    rbx
.text:000000000000853A                 sub     rsp, 8
.text:000000000000853E                 mov     r12, [rsi]
.text:0000000000008541                 cmp     r12, [rsi+8]
.text:0000000000008545                 jnb     loc_8628
.text:000000000000854B                 mov     rbp, rdi
.text:000000000000854E                 mov     r13, rsi
.text:0000000000008551                 mov     r14d, edx
.text:0000000000008554                 nop     dword ptr [rax+00h]
.text:0000000000008558
.text:0000000000008558 loc_8558:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000008558                 mov     r15, [r12]
.text:000000000000855C                 test    r15, r15
.text:000000000000855F                 jz      loc_861A
.text:0000000000008565                 mov     rbx, [r12+8]
.text:000000000000856A                 test    rbx, rbx
.text:000000000000856D                 jnz     short loc_858C
.text:000000000000856F                 jmp     short loc_85CB
.text:000000000000856F ; ---------------------------------------------------------------------------
.text:0000000000008571                 align 8
.text:0000000000008578
.text:0000000000008578 loc_8578:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000008578                 mov     rcx, [rax+8]
.text:000000000000857C                 test    rdx, rdx
.text:000000000000857F                 mov     [rbx+8], rcx
.text:0000000000008583                 mov     [rax+8], rbx
.text:0000000000008587                 mov     rbx, rdx
.text:000000000000858A                 jz      short loc_85C7
.text:000000000000858C
.text:000000000000858C loc_858C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000858C                                         ; transfer_entries+95↓j
.text:000000000000858C                 mov     r15, [rbx]
.text:000000000000858F                 mov     rdi, rbp
.text:0000000000008592                 mov     rsi, r15
.text:0000000000008595                 call    safe_hasher
.text:000000000000859A                 cmp     qword ptr [rax], 0
.text:000000000000859E                 mov     rdx, [rbx+8]
.text:00000000000085A2                 jnz     short loc_8578
.text:00000000000085A4                 mov     [rax], r15
.text:00000000000085A7                 add     qword ptr [rbp+18h], 1
.text:00000000000085AC                 test    rdx, rdx
.text:00000000000085AF                 mov     qword ptr [rbx], 0
.text:00000000000085B6                 mov     rax, [rbp+48h]
.text:00000000000085BA                 mov     [rbx+8], rax
.text:00000000000085BE                 mov     [rbp+48h], rbx
.text:00000000000085C2                 mov     rbx, rdx
.text:00000000000085C5                 jnz     short loc_858C
.text:00000000000085C7
.text:00000000000085C7 loc_85C7:                               ; CODE XREF: transfer_entries+5A↑j
.text:00000000000085C7                 mov     r15, [r12]
.text:00000000000085CB
.text:00000000000085CB loc_85CB:                               ; CODE XREF: transfer_entries+3F↑j
.text:00000000000085CB                 test    r14b, r14b
.text:00000000000085CE                 mov     qword ptr [r12+8], 0
.text:00000000000085D7                 jnz     short loc_861A
.text:00000000000085D9                 mov     rsi, r15
.text:00000000000085DC                 mov     rdi, rbp
.text:00000000000085DF                 call    safe_hasher
.text:00000000000085E4                 cmp     qword ptr [rax], 0
.text:00000000000085E8                 mov     rbx, rax
.text:00000000000085EB                 jz      short loc_8640
.text:00000000000085ED                 mov     rax, [rbp+48h]
.text:00000000000085F1                 test    rax, rax
.text:00000000000085F4                 jz      short loc_8650
.text:00000000000085F6                 mov     rdx, [rax+8]
.text:00000000000085FA                 mov     [rbp+48h], rdx
.text:00000000000085FE
.text:00000000000085FE loc_85FE:                               ; CODE XREF: transfer_entries+12D↓j
.text:00000000000085FE                 mov     rdx, [rbx+8]
.text:0000000000008602                 mov     [rax], r15
.text:0000000000008605                 mov     [rax+8], rdx
.text:0000000000008609                 mov     [rbx+8], rax
.text:000000000000860D
.text:000000000000860D loc_860D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000860D                 mov     qword ptr [r12], 0
.text:0000000000008615                 sub     qword ptr [r13+18h], 1
.text:000000000000861A
.text:000000000000861A loc_861A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000861A                                         ; transfer_entries+A7↑j
.text:000000000000861A                 add     r12, 10h
.text:000000000000861E                 cmp     [r13+8], r12
.text:0000000000008622                 ja      loc_8558
.text:0000000000008628
.text:0000000000008628 loc_8628:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000008628                 add     rsp, 8
.text:000000000000862C                 mov     eax, 1
.text:0000000000008631                 pop     rbx
.text:0000000000008632                 pop     rbp
.text:0000000000008633                 pop     r12
.text:0000000000008635                 pop     r13
.text:0000000000008637                 pop     r14
.text:0000000000008639                 pop     r15
.text:000000000000863B                 retn
.text:000000000000863B ; ---------------------------------------------------------------------------
.text:000000000000863C                 align 20h
.text:0000000000008640
.text:0000000000008640 loc_8640:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000008640                 mov     [rax], r15
.text:0000000000008643                 add     qword ptr [rbp+18h], 1
.text:0000000000008648                 jmp     short loc_860D
.text:0000000000008648 ; ---------------------------------------------------------------------------
.text:000000000000864A                 align 10h
.text:0000000000008650
.text:0000000000008650 loc_8650:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000008650                 mov     edi, 10h        ; size
.text:0000000000008655                 call    _malloc
.text:000000000000865A                 test    rax, rax
.text:000000000000865D                 jnz     short loc_85FE
.text:000000000000865F                 add     rsp, 8
.text:0000000000008663                 xor     eax, eax
.text:0000000000008665                 pop     rbx
.text:0000000000008666                 pop     rbp
.text:0000000000008667                 pop     r12
.text:0000000000008669                 pop     r13
.text:000000000000866B                 pop     r14
.text:000000000000866D                 pop     r15
.text:000000000000866F                 retn
.text:000000000000866F ; } // starts at 8530
.text:000000000000866F transfer_entries endp
.text:000000000000866F
.text:0000000000008670
.text:0000000000008670 ; =============== S U B R O U T I N E =======================================
.text:0000000000008670
.text:0000000000008670
.text:0000000000008670                 public hash_get_n_buckets
.text:0000000000008670 hash_get_n_buckets proc near
.text:0000000000008670 ; __unwind {
.text:0000000000008670                 mov     rax, [rdi+10h]
.text:0000000000008674                 retn
.text:0000000000008674 ; } // starts at 8670
.text:0000000000008674 hash_get_n_buckets endp
.text:0000000000008674
.text:0000000000008674 ; ---------------------------------------------------------------------------
.text:0000000000008675                 align 20h
.text:0000000000008680
.text:0000000000008680 ; =============== S U B R O U T I N E =======================================
.text:0000000000008680
.text:0000000000008680
.text:0000000000008680                 public hash_get_n_buckets_used
.text:0000000000008680 hash_get_n_buckets_used proc near
.text:0000000000008680 ; __unwind {
.text:0000000000008680                 mov     rax, [rdi+18h]
.text:0000000000008684                 retn
.text:0000000000008684 ; } // starts at 8680
.text:0000000000008684 hash_get_n_buckets_used endp
.text:0000000000008684
.text:0000000000008684 ; ---------------------------------------------------------------------------
.text:0000000000008685                 align 10h
.text:0000000000008690
.text:0000000000008690 ; =============== S U B R O U T I N E =======================================
.text:0000000000008690
.text:0000000000008690
.text:0000000000008690                 public hash_get_n_entries
.text:0000000000008690 hash_get_n_entries proc near
.text:0000000000008690 ; __unwind {
.text:0000000000008690                 mov     rax, [rdi+20h]
.text:0000000000008694                 retn
.text:0000000000008694 ; } // starts at 8690
.text:0000000000008694 hash_get_n_entries endp
.text:0000000000008694
.text:0000000000008694 ; ---------------------------------------------------------------------------
.text:0000000000008695                 align 20h
.text:00000000000086A0
.text:00000000000086A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086A0
.text:00000000000086A0 ; Attributes: info_from_lumina
.text:00000000000086A0
.text:00000000000086A0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:00000000000086A0                 public hash_get_max_bucket_length
.text:00000000000086A0 hash_get_max_bucket_length proc near
.text:00000000000086A0 ; __unwind {
.text:00000000000086A0                 mov     rsi, [rdi]
.text:00000000000086A3                 mov     rdi, [rdi+8]
.text:00000000000086A7                 xor     eax, eax
.text:00000000000086A9                 cmp     rsi, rdi
.text:00000000000086AC                 jnb     short locret_86E7
.text:00000000000086AE                 xchg    ax, ax
.text:00000000000086B0
.text:00000000000086B0 loc_86B0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:00000000000086B0                 cmp     qword ptr [rsi], 0
.text:00000000000086B4                 jz      short loc_86DC
.text:00000000000086B6                 mov     rdx, [rsi+8]
.text:00000000000086BA                 mov     ecx, 1
.text:00000000000086BF                 test    rdx, rdx
.text:00000000000086C2                 jz      short loc_86D5
.text:00000000000086C4                 nop     dword ptr [rax+00h]
.text:00000000000086C8
.text:00000000000086C8 loc_86C8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:00000000000086C8                 mov     rdx, [rdx+8]
.text:00000000000086CC                 add     rcx, 1
.text:00000000000086D0                 test    rdx, rdx
.text:00000000000086D3                 jnz     short loc_86C8
.text:00000000000086D5
.text:00000000000086D5 loc_86D5:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:00000000000086D5                 cmp     rax, rcx
.text:00000000000086D8                 cmovb   rax, rcx
.text:00000000000086DC
.text:00000000000086DC loc_86DC:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:00000000000086DC                 add     rsi, 10h
.text:00000000000086E0                 cmp     rsi, rdi
.text:00000000000086E3                 jb      short loc_86B0
.text:00000000000086E5                 rep retn
.text:00000000000086E7 ; ---------------------------------------------------------------------------
.text:00000000000086E7
.text:00000000000086E7 locret_86E7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:00000000000086E7                 rep retn
.text:00000000000086E7 ; } // starts at 86A0
.text:00000000000086E7 hash_get_max_bucket_length endp
.text:00000000000086E7
.text:00000000000086E7 ; ---------------------------------------------------------------------------
.text:00000000000086E9                 align 10h
.text:00000000000086F0
.text:00000000000086F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086F0
.text:00000000000086F0 ; Attributes: info_from_lumina
.text:00000000000086F0
.text:00000000000086F0 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:00000000000086F0                 public hash_table_ok
.text:00000000000086F0 hash_table_ok   proc near
.text:00000000000086F0 ; __unwind {
.text:00000000000086F0                 mov     rcx, [rdi]
.text:00000000000086F3                 mov     r8, [rdi+8]
.text:00000000000086F7                 xor     edx, edx
.text:00000000000086F9                 xor     esi, esi
.text:00000000000086FB                 cmp     rcx, r8
.text:00000000000086FE                 jnb     short loc_8736
.text:0000000000008700
.text:0000000000008700 loc_8700:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000008700                 cmp     qword ptr [rcx], 0
.text:0000000000008704                 jz      short loc_872D
.text:0000000000008706                 mov     rax, [rcx+8]
.text:000000000000870A                 add     rsi, 1
.text:000000000000870E                 add     rdx, 1
.text:0000000000008712                 test    rax, rax
.text:0000000000008715                 jz      short loc_872D
.text:0000000000008717                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008720
.text:0000000000008720 loc_8720:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000008720                 mov     rax, [rax+8]
.text:0000000000008724                 add     rdx, 1
.text:0000000000008728                 test    rax, rax
.text:000000000000872B                 jnz     short loc_8720
.text:000000000000872D
.text:000000000000872D loc_872D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000872D                                         ; hash_table_ok+25↑j
.text:000000000000872D                 add     rcx, 10h
.text:0000000000008731                 cmp     rcx, r8
.text:0000000000008734                 jb      short loc_8700
.text:0000000000008736
.text:0000000000008736 loc_8736:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000008736                 xor     eax, eax
.text:0000000000008738                 cmp     [rdi+18h], rsi
.text:000000000000873C                 jz      short loc_8740
.text:000000000000873E                 rep retn
.text:0000000000008740 ; ---------------------------------------------------------------------------
.text:0000000000008740
.text:0000000000008740 loc_8740:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000008740                 cmp     [rdi+20h], rdx
.text:0000000000008744                 setz    al
.text:0000000000008747                 retn
.text:0000000000008747 ; } // starts at 86F0
.text:0000000000008747 hash_table_ok   endp
.text:0000000000008747
.text:0000000000008747 ; ---------------------------------------------------------------------------
.text:0000000000008748                 align 10h
.text:0000000000008750
.text:0000000000008750 ; =============== S U B R O U T I N E =======================================
.text:0000000000008750
.text:0000000000008750 ; Attributes: info_from_lumina
.text:0000000000008750
.text:0000000000008750 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000008750                 public hash_print_statistics
.text:0000000000008750 hash_print_statistics proc near
.text:0000000000008750 ; __unwind {
.text:0000000000008750                 push    r13
.text:0000000000008752                 push    r12
.text:0000000000008754                 mov     r12, rsi
.text:0000000000008757                 push    rbp
.text:0000000000008758                 push    rbx
.text:0000000000008759                 xor     ebx, ebx
.text:000000000000875B                 sub     rsp, 8
.text:000000000000875F                 mov     rsi, [rdi]
.text:0000000000008762                 mov     rcx, [rdi+20h]
.text:0000000000008766                 mov     rbp, [rdi+10h]
.text:000000000000876A                 mov     r13, [rdi+18h]
.text:000000000000876E                 mov     rdi, [rdi+8]
.text:0000000000008772                 cmp     rsi, rdi
.text:0000000000008775                 jnb     short loc_87B5
.text:0000000000008777                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008780
.text:0000000000008780 loc_8780:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000008780                 cmp     qword ptr [rsi], 0
.text:0000000000008784                 jz      short loc_87AC
.text:0000000000008786                 mov     rax, [rsi+8]
.text:000000000000878A                 mov     edx, 1
.text:000000000000878F                 test    rax, rax
.text:0000000000008792                 jz      short loc_87A5
.text:0000000000008794                 nop     dword ptr [rax+00h]
.text:0000000000008798
.text:0000000000008798 loc_8798:                               ; CODE XREF: hash_print_statistics+53↓j
.text:0000000000008798                 mov     rax, [rax+8]
.text:000000000000879C                 add     rdx, 1
.text:00000000000087A0                 test    rax, rax
.text:00000000000087A3                 jnz     short loc_8798
.text:00000000000087A5
.text:00000000000087A5 loc_87A5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:00000000000087A5                 cmp     rbx, rdx
.text:00000000000087A8                 cmovb   rbx, rdx
.text:00000000000087AC
.text:00000000000087AC loc_87AC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:00000000000087AC                 add     rsi, 10h
.text:00000000000087B0                 cmp     rsi, rdi
.text:00000000000087B3                 jb      short loc_8780
.text:00000000000087B5
.text:00000000000087B5 loc_87B5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:00000000000087B5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:00000000000087BC                 mov     esi, 1
.text:00000000000087C1                 mov     rdi, r12
.text:00000000000087C4                 xor     eax, eax
.text:00000000000087C6                 call    ___fprintf_chk
.text:00000000000087CB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:00000000000087D2                 xor     eax, eax
.text:00000000000087D4                 mov     rcx, rbp
.text:00000000000087D7                 mov     esi, 1
.text:00000000000087DC                 mov     rdi, r12
.text:00000000000087DF                 call    ___fprintf_chk
.text:00000000000087E4                 test    r13, r13
.text:00000000000087E7                 js      short loc_8850
.text:00000000000087E9                 pxor    xmm0, xmm0
.text:00000000000087ED                 test    rbp, rbp
.text:00000000000087F0                 cvtsi2sd xmm0, r13
.text:00000000000087F5                 mulsd   xmm0, cs:qword_B058
.text:00000000000087FD                 js      short loc_8879
.text:00000000000087FF
.text:00000000000087FF loc_87FF:                               ; CODE XREF: hash_print_statistics+127↓j
.text:00000000000087FF                 pxor    xmm1, xmm1
.text:0000000000008803                 cvtsi2sd xmm1, rbp
.text:0000000000008808
.text:0000000000008808 loc_8808:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000008808                 divsd   xmm0, xmm1
.text:000000000000880C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000008813                 mov     rcx, r13
.text:0000000000008816                 mov     rdi, r12
.text:0000000000008819                 mov     esi, 1
.text:000000000000881E                 mov     eax, 1
.text:0000000000008823                 call    ___fprintf_chk
.text:0000000000008828                 add     rsp, 8
.text:000000000000882C                 mov     rcx, rbx
.text:000000000000882F                 mov     rdi, r12
.text:0000000000008832                 pop     rbx
.text:0000000000008833                 pop     rbp
.text:0000000000008834                 pop     r12
.text:0000000000008836                 pop     r13
.text:0000000000008838                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000883F                 mov     esi, 1
.text:0000000000008844                 xor     eax, eax
.text:0000000000008846                 jmp     ___fprintf_chk
.text:0000000000008846 ; ---------------------------------------------------------------------------
.text:000000000000884B                 align 10h
.text:0000000000008850
.text:0000000000008850 loc_8850:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000008850                 mov     rax, r13
.text:0000000000008853                 mov     rdx, r13
.text:0000000000008856                 pxor    xmm0, xmm0
.text:000000000000885A                 shr     rax, 1
.text:000000000000885D                 and     edx, 1
.text:0000000000008860                 or      rax, rdx
.text:0000000000008863                 test    rbp, rbp
.text:0000000000008866                 cvtsi2sd xmm0, rax
.text:000000000000886B                 addsd   xmm0, xmm0
.text:000000000000886F                 mulsd   xmm0, cs:qword_B058
.text:0000000000008877                 jns     short loc_87FF
.text:0000000000008879
.text:0000000000008879 loc_8879:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:0000000000008879                 mov     rax, rbp
.text:000000000000887C                 pxor    xmm1, xmm1
.text:0000000000008880                 shr     rax, 1
.text:0000000000008883                 and     ebp, 1
.text:0000000000008886                 or      rax, rbp
.text:0000000000008889                 cvtsi2sd xmm1, rax
.text:000000000000888E                 addsd   xmm1, xmm1
.text:0000000000008892                 jmp     loc_8808
.text:0000000000008892 ; } // starts at 8750
.text:0000000000008892 hash_print_statistics endp
.text:0000000000008892
.text:0000000000008892 ; ---------------------------------------------------------------------------
.text:0000000000008897                 align 20h
.text:00000000000088A0
.text:00000000000088A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088A0
.text:00000000000088A0 ; Attributes: info_from_lumina
.text:00000000000088A0
.text:00000000000088A0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:00000000000088A0                 public hash_lookup
.text:00000000000088A0 hash_lookup     proc near               ; CODE XREF: filesystem_type+47↑p
.text:00000000000088A0 ; __unwind {
.text:00000000000088A0                 push    r12
.text:00000000000088A2                 push    rbp
.text:00000000000088A3                 mov     r12, rdi
.text:00000000000088A6                 push    rbx
.text:00000000000088A7                 mov     rbp, rsi
.text:00000000000088AA                 call    safe_hasher
.text:00000000000088AF                 mov     rsi, [rax]
.text:00000000000088B2                 test    rsi, rsi
.text:00000000000088B5                 jz      short loc_88DD
.text:00000000000088B7                 mov     rbx, rax
.text:00000000000088BA                 jmp     short loc_88C3
.text:00000000000088BA ; ---------------------------------------------------------------------------
.text:00000000000088BC                 align 20h
.text:00000000000088C0
.text:00000000000088C0 loc_88C0:                               ; CODE XREF: hash_lookup+3B↓j
.text:00000000000088C0                 mov     rsi, [rbx]
.text:00000000000088C3
.text:00000000000088C3 loc_88C3:                               ; CODE XREF: hash_lookup+1A↑j
.text:00000000000088C3                 cmp     rsi, rbp
.text:00000000000088C6                 jz      short loc_88DF
.text:00000000000088C8                 mov     rdi, rbp
.text:00000000000088CB                 call    qword ptr [r12+38h]
.text:00000000000088D0                 test    al, al
.text:00000000000088D2                 jnz     short loc_88F0
.text:00000000000088D4                 mov     rbx, [rbx+8]
.text:00000000000088D8                 test    rbx, rbx
.text:00000000000088DB                 jnz     short loc_88C0
.text:00000000000088DD
.text:00000000000088DD loc_88DD:                               ; CODE XREF: hash_lookup+15↑j
.text:00000000000088DD                 xor     esi, esi
.text:00000000000088DF
.text:00000000000088DF loc_88DF:                               ; CODE XREF: hash_lookup+26↑j
.text:00000000000088DF                 pop     rbx
.text:00000000000088E0                 mov     rax, rsi
.text:00000000000088E3                 pop     rbp
.text:00000000000088E4                 pop     r12
.text:00000000000088E6                 retn
.text:00000000000088E6 ; ---------------------------------------------------------------------------
.text:00000000000088E7                 align 10h
.text:00000000000088F0
.text:00000000000088F0 loc_88F0:                               ; CODE XREF: hash_lookup+32↑j
.text:00000000000088F0                 mov     rsi, [rbx]
.text:00000000000088F3                 pop     rbx
.text:00000000000088F4                 pop     rbp
.text:00000000000088F5                 mov     rax, rsi
.text:00000000000088F8                 pop     r12
.text:00000000000088FA                 retn
.text:00000000000088FA ; } // starts at 88A0
.text:00000000000088FA hash_lookup     endp
.text:00000000000088FA
.text:00000000000088FA ; ---------------------------------------------------------------------------
.text:00000000000088FB                 align 20h
.text:0000000000008900
.text:0000000000008900 ; =============== S U B R O U T I N E =======================================
.text:0000000000008900
.text:0000000000008900 ; Attributes: info_from_lumina
.text:0000000000008900
.text:0000000000008900 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000008900                 public hash_get_first
.text:0000000000008900 hash_get_first  proc near
.text:0000000000008900 ; __unwind {
.text:0000000000008900                 cmp     qword ptr [rdi+20h], 0
.text:0000000000008905                 jz      short loc_8933
.text:0000000000008907                 mov     rdx, [rdi]
.text:000000000000890A                 mov     rcx, [rdi+8]
.text:000000000000890E                 cmp     rdx, rcx
.text:0000000000008911                 jnb     short loc_8938
.text:0000000000008913                 mov     rax, [rdx]
.text:0000000000008916                 test    rax, rax
.text:0000000000008919                 jnz     short locret_8936
.text:000000000000891B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008920
.text:0000000000008920 loc_8920:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000008920                 add     rdx, 10h
.text:0000000000008924                 cmp     rdx, rcx
.text:0000000000008927                 jnb     short loc_8938
.text:0000000000008929                 mov     rax, [rdx]
.text:000000000000892C                 test    rax, rax
.text:000000000000892F                 jz      short loc_8920
.text:0000000000008931                 rep retn
.text:0000000000008933 ; ---------------------------------------------------------------------------
.text:0000000000008933
.text:0000000000008933 loc_8933:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000008933                 xor     eax, eax
.text:0000000000008935                 retn
.text:0000000000008936 ; ---------------------------------------------------------------------------
.text:0000000000008936
.text:0000000000008936 locret_8936:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000008936                 rep retn
.text:0000000000008938 ; ---------------------------------------------------------------------------
.text:0000000000008938
.text:0000000000008938 loc_8938:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000008938                                         ; hash_get_first+27↑j
.text:0000000000008938                 sub     rsp, 8
.text:000000000000893C                 call    _abort
.text:000000000000893C ; } // starts at 8900
.text:000000000000893C hash_get_first  endp
.text:000000000000893C
.text:000000000000893C ; ---------------------------------------------------------------------------
.text:0000000000008941                 align 10h
.text:0000000000008950
.text:0000000000008950 ; =============== S U B R O U T I N E =======================================
.text:0000000000008950
.text:0000000000008950 ; Attributes: info_from_lumina
.text:0000000000008950
.text:0000000000008950 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000008950                 public hash_get_next
.text:0000000000008950 hash_get_next   proc near
.text:0000000000008950 ; __unwind {
.text:0000000000008950                 push    rbp
.text:0000000000008951                 push    rbx
.text:0000000000008952                 mov     rbp, rdi
.text:0000000000008955                 mov     rbx, rsi
.text:0000000000008958                 sub     rsp, 8
.text:000000000000895C                 call    safe_hasher
.text:0000000000008961                 mov     rdx, rax
.text:0000000000008964                 mov     rcx, rax
.text:0000000000008967                 mov     rax, [rdx]
.text:000000000000896A                 mov     rdx, [rdx+8]
.text:000000000000896E                 cmp     rax, rbx
.text:0000000000008971                 jz      short loc_8989
.text:0000000000008973                 nop     dword ptr [rax+rax+00h]
.text:0000000000008978
.text:0000000000008978 loc_8978:                               ; CODE XREF: hash_get_next+37↓j
.text:0000000000008978                 test    rdx, rdx
.text:000000000000897B                 jz      short loc_898E
.text:000000000000897D                 mov     rax, [rdx]
.text:0000000000008980                 mov     rdx, [rdx+8]
.text:0000000000008984                 cmp     rax, rbx
.text:0000000000008987                 jnz     short loc_8978
.text:0000000000008989
.text:0000000000008989 loc_8989:                               ; CODE XREF: hash_get_next+21↑j
.text:0000000000008989                 test    rdx, rdx
.text:000000000000898C                 jnz     short loc_89B8
.text:000000000000898E
.text:000000000000898E loc_898E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000898E                 mov     rdx, [rbp+8]
.text:0000000000008992                 jmp     short loc_89A0
.text:0000000000008992 ; ---------------------------------------------------------------------------
.text:0000000000008994                 align 8
.text:0000000000008998
.text:0000000000008998 loc_8998:                               ; CODE XREF: hash_get_next+57↓j
.text:0000000000008998                 mov     rax, [rcx]
.text:000000000000899B                 test    rax, rax
.text:000000000000899E                 jnz     short loc_89AB
.text:00000000000089A0
.text:00000000000089A0 loc_89A0:                               ; CODE XREF: hash_get_next+42↑j
.text:00000000000089A0                 add     rcx, 10h
.text:00000000000089A4                 cmp     rdx, rcx
.text:00000000000089A7                 ja      short loc_8998
.text:00000000000089A9                 xor     eax, eax
.text:00000000000089AB
.text:00000000000089AB loc_89AB:                               ; CODE XREF: hash_get_next+4E↑j
.text:00000000000089AB                 add     rsp, 8
.text:00000000000089AF                 pop     rbx
.text:00000000000089B0                 pop     rbp
.text:00000000000089B1                 retn
.text:00000000000089B1 ; ---------------------------------------------------------------------------
.text:00000000000089B2                 align 8
.text:00000000000089B8
.text:00000000000089B8 loc_89B8:                               ; CODE XREF: hash_get_next+3C↑j
.text:00000000000089B8                 mov     rax, [rdx]
.text:00000000000089BB                 add     rsp, 8
.text:00000000000089BF                 pop     rbx
.text:00000000000089C0                 pop     rbp
.text:00000000000089C1                 retn
.text:00000000000089C1 ; } // starts at 8950
.text:00000000000089C1 hash_get_next   endp
.text:00000000000089C1
.text:00000000000089C1 ; ---------------------------------------------------------------------------
.text:00000000000089C2                 align 10h
.text:00000000000089D0
.text:00000000000089D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000089D0
.text:00000000000089D0 ; Attributes: info_from_lumina
.text:00000000000089D0
.text:00000000000089D0 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:00000000000089D0                 public hash_get_entries
.text:00000000000089D0 hash_get_entries proc near
.text:00000000000089D0 ; __unwind {
.text:00000000000089D0                 mov     r9, [rdi]
.text:00000000000089D3                 cmp     [rdi+8], r9
.text:00000000000089D7                 jbe     short loc_8A32
.text:00000000000089D9                 xor     r8d, r8d
.text:00000000000089DC
.text:00000000000089DC loc_89DC:                               ; CODE XREF: hash_get_entries+55↓j
.text:00000000000089DC                 mov     rcx, [r9]
.text:00000000000089DF                 test    rcx, rcx
.text:00000000000089E2                 jz      short loc_8A1D
.text:00000000000089E4                 cmp     rdx, r8
.text:00000000000089E7                 jbe     short loc_8A27
.text:00000000000089E9                 mov     [rsi+r8*8], rcx
.text:00000000000089ED                 mov     rcx, [r9+8]
.text:00000000000089F1                 lea     rax, [r8+1]
.text:00000000000089F5                 test    rcx, rcx
.text:00000000000089F8                 jz      short loc_8A1A
.text:00000000000089FA                 nop     word ptr [rax+rax+00h]
.text:0000000000008A00
.text:0000000000008A00 loc_8A00:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000008A00                 cmp     rdx, rax
.text:0000000000008A03                 jz      short locret_8A30
.text:0000000000008A05                 mov     r8, [rcx]
.text:0000000000008A08                 add     rax, 1
.text:0000000000008A0C                 mov     [rsi+rax*8-8], r8
.text:0000000000008A11                 mov     rcx, [rcx+8]
.text:0000000000008A15                 test    rcx, rcx
.text:0000000000008A18                 jnz     short loc_8A00
.text:0000000000008A1A
.text:0000000000008A1A loc_8A1A:                               ; CODE XREF: hash_get_entries+28↑j
.text:0000000000008A1A                 mov     r8, rax
.text:0000000000008A1D
.text:0000000000008A1D loc_8A1D:                               ; CODE XREF: hash_get_entries+12↑j
.text:0000000000008A1D                 add     r9, 10h
.text:0000000000008A21                 cmp     [rdi+8], r9
.text:0000000000008A25                 ja      short loc_89DC
.text:0000000000008A27
.text:0000000000008A27 loc_8A27:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000008A27                 mov     rax, r8
.text:0000000000008A2A                 retn
.text:0000000000008A2A ; ---------------------------------------------------------------------------
.text:0000000000008A2B                 align 10h
.text:0000000000008A30
.text:0000000000008A30 locret_8A30:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000008A30                 rep retn
.text:0000000000008A32 ; ---------------------------------------------------------------------------
.text:0000000000008A32
.text:0000000000008A32 loc_8A32:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000008A32                 xor     eax, eax
.text:0000000000008A34                 retn
.text:0000000000008A34 ; } // starts at 89D0
.text:0000000000008A34 hash_get_entries endp
.text:0000000000008A34
.text:0000000000008A34 ; ---------------------------------------------------------------------------
.text:0000000000008A35                 align 20h
.text:0000000000008A40
.text:0000000000008A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A40
.text:0000000000008A40 ; Attributes: info_from_lumina
.text:0000000000008A40
.text:0000000000008A40 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000008A40                 public hash_do_for_each
.text:0000000000008A40 hash_do_for_each proc near
.text:0000000000008A40 ; __unwind {
.text:0000000000008A40                 push    r15
.text:0000000000008A42                 push    r14
.text:0000000000008A44                 push    r13
.text:0000000000008A46                 push    r12
.text:0000000000008A48                 push    rbp
.text:0000000000008A49                 push    rbx
.text:0000000000008A4A                 sub     rsp, 8
.text:0000000000008A4E                 mov     r14, [rdi]
.text:0000000000008A51                 cmp     [rdi+8], r14
.text:0000000000008A55                 jbe     short loc_8AA6
.text:0000000000008A57                 mov     r13, rdx
.text:0000000000008A5A                 mov     r12, rsi
.text:0000000000008A5D                 mov     r15, rdi
.text:0000000000008A60                 xor     ebp, ebp
.text:0000000000008A62
.text:0000000000008A62 loc_8A62:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000008A62                 mov     rdi, [r14]
.text:0000000000008A65                 test    rdi, rdi
.text:0000000000008A68                 jz      short loc_8A8A
.text:0000000000008A6A                 mov     rbx, r14
.text:0000000000008A6D                 jmp     short loc_8A73
.text:0000000000008A6D ; ---------------------------------------------------------------------------
.text:0000000000008A6F                 align 10h
.text:0000000000008A70
.text:0000000000008A70 loc_8A70:                               ; CODE XREF: hash_do_for_each+48↓j
.text:0000000000008A70                 mov     rdi, [rbx]
.text:0000000000008A73
.text:0000000000008A73 loc_8A73:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:0000000000008A73                 mov     rsi, r13
.text:0000000000008A76                 call    r12
.text:0000000000008A79                 test    al, al
.text:0000000000008A7B                 jz      short loc_8A94
.text:0000000000008A7D                 mov     rbx, [rbx+8]
.text:0000000000008A81                 add     rbp, 1
.text:0000000000008A85                 test    rbx, rbx
.text:0000000000008A88                 jnz     short loc_8A70
.text:0000000000008A8A
.text:0000000000008A8A loc_8A8A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:0000000000008A8A                 add     r14, 10h
.text:0000000000008A8E                 cmp     [r15+8], r14
.text:0000000000008A92                 ja      short loc_8A62
.text:0000000000008A94
.text:0000000000008A94 loc_8A94:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:0000000000008A94                                         ; hash_do_for_each+68↓j
.text:0000000000008A94                 add     rsp, 8
.text:0000000000008A98                 mov     rax, rbp
.text:0000000000008A9B                 pop     rbx
.text:0000000000008A9C                 pop     rbp
.text:0000000000008A9D                 pop     r12
.text:0000000000008A9F                 pop     r13
.text:0000000000008AA1                 pop     r14
.text:0000000000008AA3                 pop     r15
.text:0000000000008AA5                 retn
.text:0000000000008AA6 ; ---------------------------------------------------------------------------
.text:0000000000008AA6
.text:0000000000008AA6 loc_8AA6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:0000000000008AA6                 xor     ebp, ebp
.text:0000000000008AA8                 jmp     short loc_8A94
.text:0000000000008AA8 ; } // starts at 8A40
.text:0000000000008AA8 hash_do_for_each endp
.text:0000000000008AA8
.text:0000000000008AA8 ; ---------------------------------------------------------------------------
.text:0000000000008AAA                 align 10h
.text:0000000000008AB0
.text:0000000000008AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AB0
.text:0000000000008AB0 ; Attributes: info_from_lumina
.text:0000000000008AB0
.text:0000000000008AB0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:0000000000008AB0                 public hash_string
.text:0000000000008AB0 hash_string     proc near
.text:0000000000008AB0 ; __unwind {
.text:0000000000008AB0                 movzx   ecx, byte ptr [rdi]
.text:0000000000008AB3                 xor     edx, edx
.text:0000000000008AB5                 test    cl, cl
.text:0000000000008AB7                 jz      short loc_8ADD
.text:0000000000008AB9                 nop     dword ptr [rax+00000000h]
.text:0000000000008AC0
.text:0000000000008AC0 loc_8AC0:                               ; CODE XREF: hash_string+2B↓j
.text:0000000000008AC0                 mov     rax, rdx
.text:0000000000008AC3                 add     rdi, 1
.text:0000000000008AC7                 shl     rax, 5
.text:0000000000008ACB                 sub     rax, rdx
.text:0000000000008ACE                 xor     edx, edx
.text:0000000000008AD0                 add     rax, rcx
.text:0000000000008AD3                 movzx   ecx, byte ptr [rdi]
.text:0000000000008AD6                 div     rsi
.text:0000000000008AD9                 test    cl, cl
.text:0000000000008ADB                 jnz     short loc_8AC0
.text:0000000000008ADD
.text:0000000000008ADD loc_8ADD:                               ; CODE XREF: hash_string+7↑j
.text:0000000000008ADD                 mov     rax, rdx
.text:0000000000008AE0                 retn
.text:0000000000008AE0 ; } // starts at 8AB0
.text:0000000000008AE0 hash_string     endp
.text:0000000000008AE0
.text:0000000000008AE0 ; ---------------------------------------------------------------------------
.text:0000000000008AE1                 align 10h
.text:0000000000008AF0
.text:0000000000008AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AF0
.text:0000000000008AF0 ; Attributes: info_from_lumina
.text:0000000000008AF0
.text:0000000000008AF0 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000008AF0                 public hash_reset_tuning
.text:0000000000008AF0 hash_reset_tuning proc near
.text:0000000000008AF0 ; __unwind {
.text:0000000000008AF0                 mov     rax, 3F80000000000000h
.text:0000000000008AFA                 mov     byte ptr [rdi+10h], 0
.text:0000000000008AFE                 mov     [rdi], rax
.text:0000000000008B01                 mov     rax, 3FB4FDF43F4CCCCDh
.text:0000000000008B0B                 mov     [rdi+8], rax
.text:0000000000008B0F                 retn
.text:0000000000008B0F ; } // starts at 8AF0
.text:0000000000008B0F hash_reset_tuning endp
.text:0000000000008B0F
.text:0000000000008B10
.text:0000000000008B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B10
.text:0000000000008B10 ; Attributes: info_from_lumina
.text:0000000000008B10
.text:0000000000008B10 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000008B10                 public hash_initialize
.text:0000000000008B10 hash_initialize proc near               ; CODE XREF: filesystem_type+7C↑p
.text:0000000000008B10                                         ; setup_dir_isra_4+28↑p
.text:0000000000008B10 ; __unwind {
.text:0000000000008B10                 push    r15
.text:0000000000008B12                 push    r14
.text:0000000000008B14                 lea     rax, raw_hasher
.text:0000000000008B1B                 push    r13
.text:0000000000008B1D                 push    r12
.text:0000000000008B1F                 mov     r12, rdx
.text:0000000000008B22                 push    rbp
.text:0000000000008B23                 push    rbx
.text:0000000000008B24                 mov     r13, rcx
.text:0000000000008B27                 mov     rbp, rdi
.text:0000000000008B2A                 mov     edi, 50h ; 'P'  ; size
.text:0000000000008B2F                 mov     r15, rsi
.text:0000000000008B32                 sub     rsp, 8
.text:0000000000008B36                 test    rdx, rdx
.text:0000000000008B39                 mov     r14, r8
.text:0000000000008B3C                 cmovz   r12, rax
.text:0000000000008B40                 lea     rax, raw_comparator
.text:0000000000008B47                 test    rcx, rcx
.text:0000000000008B4A                 cmovz   r13, rax
.text:0000000000008B4E                 call    _malloc
.text:0000000000008B53                 test    rax, rax
.text:0000000000008B56                 mov     rbx, rax
.text:0000000000008B59                 jz      loc_8C0A
.text:0000000000008B5F                 test    r15, r15
.text:0000000000008B62                 lea     rdi, [rax+28h]
.text:0000000000008B66                 jz      loc_8C20
.text:0000000000008B6C                 mov     [rax+28h], r15
.text:0000000000008B70                 call    check_tuning
.text:0000000000008B75                 test    al, al
.text:0000000000008B77                 jz      loc_8C00
.text:0000000000008B7D                 cmp     byte ptr [r15+10h], 0
.text:0000000000008B82                 jz      loc_8C80
.text:0000000000008B88
.text:0000000000008B88 loc_8B88:                               ; CODE XREF: hash_initialize+16A↓j
.text:0000000000008B88                                         ; hash_initialize+1A5↓j
.text:0000000000008B88                 mov     rdi, rbp
.text:0000000000008B8B                 call    next_prime
.text:0000000000008B90                 mov     edx, 8
.text:0000000000008B95                 mov     rbp, rax
.text:0000000000008B98                 xor     ecx, ecx
.text:0000000000008B9A                 mov     rax, rdx
.text:0000000000008B9D                 mul     rbp
.text:0000000000008BA0                 jo      loc_8CBA
.text:0000000000008BA6
.text:0000000000008BA6 loc_8BA6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:0000000000008BA6                 test    rax, rax
.text:0000000000008BA9                 js      short loc_8C00
.text:0000000000008BAB                 test    rcx, rcx
.text:0000000000008BAE                 jnz     short loc_8C00
.text:0000000000008BB0                 test    rbp, rbp
.text:0000000000008BB3                 mov     [rbx+10h], rbp
.text:0000000000008BB7                 jz      short loc_8C00
.text:0000000000008BB9                 mov     esi, 10h        ; size
.text:0000000000008BBE                 mov     rdi, rbp        ; nmemb
.text:0000000000008BC1                 call    _calloc
.text:0000000000008BC6                 test    rax, rax
.text:0000000000008BC9                 mov     [rbx], rax
.text:0000000000008BCC                 jz      short loc_8C00
.text:0000000000008BCE                 shl     rbp, 4
.text:0000000000008BD2                 mov     qword ptr [rbx+18h], 0
.text:0000000000008BDA                 mov     qword ptr [rbx+20h], 0
.text:0000000000008BE2                 add     rbp, rax
.text:0000000000008BE5                 mov     [rbx+30h], r12
.text:0000000000008BE9                 mov     [rbx+38h], r13
.text:0000000000008BED                 mov     [rbx+8], rbp
.text:0000000000008BF1                 mov     [rbx+40h], r14
.text:0000000000008BF5                 mov     qword ptr [rbx+48h], 0
.text:0000000000008BFD                 jmp     short loc_8C0A
.text:0000000000008BFD ; ---------------------------------------------------------------------------
.text:0000000000008BFF                 align 20h
.text:0000000000008C00
.text:0000000000008C00 loc_8C00:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000008C00                                         ; hash_initialize+99↑j ...
.text:0000000000008C00                 mov     rdi, rbx        ; ptr
.text:0000000000008C03                 xor     ebx, ebx
.text:0000000000008C05                 call    free
.text:0000000000008C0A
.text:0000000000008C0A loc_8C0A:                               ; CODE XREF: hash_initialize+49↑j
.text:0000000000008C0A                                         ; hash_initialize+ED↑j
.text:0000000000008C0A                 add     rsp, 8
.text:0000000000008C0E                 mov     rax, rbx
.text:0000000000008C11                 pop     rbx
.text:0000000000008C12                 pop     rbp
.text:0000000000008C13                 pop     r12
.text:0000000000008C15                 pop     r13
.text:0000000000008C17                 pop     r14
.text:0000000000008C19                 pop     r15
.text:0000000000008C1B                 retn
.text:0000000000008C1B ; ---------------------------------------------------------------------------
.text:0000000000008C1C                 align 20h
.text:0000000000008C20
.text:0000000000008C20 loc_8C20:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000008C20                 lea     rax, default_tuning
.text:0000000000008C27                 mov     [rbx+28h], rax
.text:0000000000008C2B                 call    check_tuning
.text:0000000000008C30                 test    al, al
.text:0000000000008C32                 movss   xmm1, cs:dword_B048
.text:0000000000008C3A                 jz      short loc_8C00
.text:0000000000008C3C                 test    rbp, rbp
.text:0000000000008C3F                 js      short loc_8C8B
.text:0000000000008C41
.text:0000000000008C41 loc_8C41:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000008C41                 pxor    xmm0, xmm0
.text:0000000000008C45                 cvtsi2ss xmm0, rbp
.text:0000000000008C4A
.text:0000000000008C4A loc_8C4A:                               ; CODE XREF: hash_initialize+194↓j
.text:0000000000008C4A                 divss   xmm0, xmm1
.text:0000000000008C4E                 ucomiss xmm0, cs:dword_B04C
.text:0000000000008C55                 jnb     short loc_8C00
.text:0000000000008C57                 ucomiss xmm0, cs:dword_B050
.text:0000000000008C5E                 jb      short loc_8CB0
.text:0000000000008C60                 subss   xmm0, cs:dword_B050
.text:0000000000008C68                 mov     rax, 8000000000000000h
.text:0000000000008C72                 cvttss2si rbp, xmm0
.text:0000000000008C77                 xor     rbp, rax
.text:0000000000008C7A                 jmp     loc_8B88
.text:0000000000008C7A ; ---------------------------------------------------------------------------
.text:0000000000008C7F                 align 20h
.text:0000000000008C80
.text:0000000000008C80 loc_8C80:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000008C80                 test    rbp, rbp
.text:0000000000008C83                 movss   xmm1, dword ptr [r15+8]
.text:0000000000008C89                 jns     short loc_8C41
.text:0000000000008C8B
.text:0000000000008C8B loc_8C8B:                               ; CODE XREF: hash_initialize+12F↑j
.text:0000000000008C8B                 mov     rax, rbp
.text:0000000000008C8E                 pxor    xmm0, xmm0
.text:0000000000008C92                 shr     rax, 1
.text:0000000000008C95                 and     ebp, 1
.text:0000000000008C98                 or      rax, rbp
.text:0000000000008C9B                 cvtsi2ss xmm0, rax
.text:0000000000008CA0                 addss   xmm0, xmm0
.text:0000000000008CA4                 jmp     short loc_8C4A
.text:0000000000008CA4 ; ---------------------------------------------------------------------------
.text:0000000000008CA6                 align 10h
.text:0000000000008CB0
.text:0000000000008CB0 loc_8CB0:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000008CB0                 cvttss2si rbp, xmm0
.text:0000000000008CB5                 jmp     loc_8B88
.text:0000000000008CBA ; ---------------------------------------------------------------------------
.text:0000000000008CBA
.text:0000000000008CBA loc_8CBA:                               ; CODE XREF: hash_initialize+90↑j
.text:0000000000008CBA                 mov     ecx, 1
.text:0000000000008CBF                 jmp     loc_8BA6
.text:0000000000008CBF ; } // starts at 8B10
.text:0000000000008CBF hash_initialize endp
.text:0000000000008CBF
.text:0000000000008CBF ; ---------------------------------------------------------------------------
.text:0000000000008CC4                 align 10h
.text:0000000000008CD0
.text:0000000000008CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008CD0
.text:0000000000008CD0 ; Attributes: info_from_lumina
.text:0000000000008CD0
.text:0000000000008CD0 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000008CD0                 public hash_clear
.text:0000000000008CD0 hash_clear      proc near
.text:0000000000008CD0 ; __unwind {
.text:0000000000008CD0                 push    r12
.text:0000000000008CD2                 push    rbp
.text:0000000000008CD3                 mov     rbp, rdi
.text:0000000000008CD6                 push    rbx
.text:0000000000008CD7                 mov     r12, [rdi]
.text:0000000000008CDA                 cmp     r12, [rdi+8]
.text:0000000000008CDE                 jnb     short loc_8D4B
.text:0000000000008CE0
.text:0000000000008CE0 loc_8CE0:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000008CE0                 cmp     qword ptr [r12], 0
.text:0000000000008CE5                 jz      short loc_8D41
.text:0000000000008CE7                 mov     rbx, [r12+8]
.text:0000000000008CEC                 mov     rax, [rbp+40h]
.text:0000000000008CF0                 test    rbx, rbx
.text:0000000000008CF3                 jz      short loc_8D25
.text:0000000000008CF5                 nop     dword ptr [rax]
.text:0000000000008CF8
.text:0000000000008CF8 loc_8CF8:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000008CF8                 test    rax, rax
.text:0000000000008CFB                 jz      short loc_8D06
.text:0000000000008CFD                 mov     rdi, [rbx]
.text:0000000000008D00                 call    rax
.text:0000000000008D02                 mov     rax, [rbp+40h]
.text:0000000000008D06
.text:0000000000008D06 loc_8D06:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000008D06                 mov     rdx, [rbx+8]
.text:0000000000008D0A                 mov     rcx, [rbp+48h]
.text:0000000000008D0E                 mov     qword ptr [rbx], 0
.text:0000000000008D15                 test    rdx, rdx
.text:0000000000008D18                 mov     [rbx+8], rcx
.text:0000000000008D1C                 mov     [rbp+48h], rbx
.text:0000000000008D20                 mov     rbx, rdx
.text:0000000000008D23                 jnz     short loc_8CF8
.text:0000000000008D25
.text:0000000000008D25 loc_8D25:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000008D25                 test    rax, rax
.text:0000000000008D28                 jz      short loc_8D30
.text:0000000000008D2A                 mov     rdi, [r12]
.text:0000000000008D2E                 call    rax
.text:0000000000008D30
.text:0000000000008D30 loc_8D30:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000008D30                 mov     qword ptr [r12], 0
.text:0000000000008D38                 mov     qword ptr [r12+8], 0
.text:0000000000008D41
.text:0000000000008D41 loc_8D41:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000008D41                 add     r12, 10h
.text:0000000000008D45                 cmp     [rbp+8], r12
.text:0000000000008D49                 ja      short loc_8CE0
.text:0000000000008D4B
.text:0000000000008D4B loc_8D4B:                               ; CODE XREF: hash_clear+E↑j
.text:0000000000008D4B                 mov     qword ptr [rbp+18h], 0
.text:0000000000008D53                 mov     qword ptr [rbp+20h], 0
.text:0000000000008D5B                 pop     rbx
.text:0000000000008D5C                 pop     rbp
.text:0000000000008D5D                 pop     r12
.text:0000000000008D5F                 retn
.text:0000000000008D5F ; } // starts at 8CD0
.text:0000000000008D5F hash_clear      endp
.text:0000000000008D5F
.text:0000000000008D60
.text:0000000000008D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D60
.text:0000000000008D60 ; Attributes: info_from_lumina
.text:0000000000008D60
.text:0000000000008D60 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000008D60                 public hash_free
.text:0000000000008D60 hash_free       proc near               ; CODE XREF: rpl_fts_close+9A↑p
.text:0000000000008D60                                         ; rpl_fts_close+B1↑p ...
.text:0000000000008D60 ; __unwind {
.text:0000000000008D60                 push    r12
.text:0000000000008D62                 push    rbp
.text:0000000000008D63                 mov     r12, rdi
.text:0000000000008D66                 push    rbx
.text:0000000000008D67                 cmp     qword ptr [rdi+40h], 0
.text:0000000000008D6C                 mov     rbp, [rdi]
.text:0000000000008D6F                 mov     rax, [rdi+8]
.text:0000000000008D73                 jz      short loc_8DC3
.text:0000000000008D75                 cmp     qword ptr [rdi+20h], 0
.text:0000000000008D7A                 jz      short loc_8DC3
.text:0000000000008D7C                 cmp     rbp, rax
.text:0000000000008D7F                 jnb     short loc_8DFC
.text:0000000000008D81                 nop     dword ptr [rax+00000000h]
.text:0000000000008D88
.text:0000000000008D88 loc_8D88:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000008D88                 mov     rdi, [rbp+0]
.text:0000000000008D8C                 test    rdi, rdi
.text:0000000000008D8F                 jz      short loc_8DB6
.text:0000000000008D91                 mov     rbx, rbp
.text:0000000000008D94                 jmp     short loc_8DA3
.text:0000000000008D94 ; ---------------------------------------------------------------------------
.text:0000000000008D96                 align 20h
.text:0000000000008DA0
.text:0000000000008DA0 loc_8DA0:                               ; CODE XREF: hash_free+4F↓j
.text:0000000000008DA0                 mov     rdi, [rbx]
.text:0000000000008DA3
.text:0000000000008DA3 loc_8DA3:                               ; CODE XREF: hash_free+34↑j
.text:0000000000008DA3                 call    qword ptr [r12+40h]
.text:0000000000008DA8                 mov     rbx, [rbx+8]
.text:0000000000008DAC                 test    rbx, rbx
.text:0000000000008DAF                 jnz     short loc_8DA0
.text:0000000000008DB1                 mov     rax, [r12+8]
.text:0000000000008DB6
.text:0000000000008DB6 loc_8DB6:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000008DB6                 add     rbp, 10h
.text:0000000000008DBA                 cmp     rax, rbp
.text:0000000000008DBD                 ja      short loc_8D88
.text:0000000000008DBF                 mov     rbp, [r12]
.text:0000000000008DC3
.text:0000000000008DC3 loc_8DC3:                               ; CODE XREF: hash_free+13↑j
.text:0000000000008DC3                                         ; hash_free+1A↑j
.text:0000000000008DC3                 cmp     rbp, rax
.text:0000000000008DC6                 jnb     short loc_8DFC
.text:0000000000008DC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008DD0
.text:0000000000008DD0 loc_8DD0:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000008DD0                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000008DD4                 test    rdi, rdi
.text:0000000000008DD7                 jz      short loc_8DF1
.text:0000000000008DD9                 nop     dword ptr [rax+00000000h]
.text:0000000000008DE0
.text:0000000000008DE0 loc_8DE0:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000008DE0                 mov     rbx, [rdi+8]
.text:0000000000008DE4                 call    free
.text:0000000000008DE9                 test    rbx, rbx
.text:0000000000008DEC                 mov     rdi, rbx
.text:0000000000008DEF                 jnz     short loc_8DE0
.text:0000000000008DF1
.text:0000000000008DF1 loc_8DF1:                               ; CODE XREF: hash_free+77↑j
.text:0000000000008DF1                 add     rbp, 10h
.text:0000000000008DF5                 cmp     [r12+8], rbp
.text:0000000000008DFA                 ja      short loc_8DD0
.text:0000000000008DFC
.text:0000000000008DFC loc_8DFC:                               ; CODE XREF: hash_free+1F↑j
.text:0000000000008DFC                                         ; hash_free+66↑j
.text:0000000000008DFC                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000008E01                 test    rdi, rdi
.text:0000000000008E04                 jz      short loc_8E21
.text:0000000000008E06                 db      2Eh
.text:0000000000008E06                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008E10
.text:0000000000008E10 loc_8E10:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000008E10                 mov     rbx, [rdi+8]
.text:0000000000008E14                 call    free
.text:0000000000008E19                 test    rbx, rbx
.text:0000000000008E1C                 mov     rdi, rbx
.text:0000000000008E1F                 jnz     short loc_8E10
.text:0000000000008E21
.text:0000000000008E21 loc_8E21:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000008E21                 mov     rdi, [r12]      ; ptr
.text:0000000000008E25                 call    free
.text:0000000000008E2A                 pop     rbx
.text:0000000000008E2B                 mov     rdi, r12        ; ptr
.text:0000000000008E2E                 pop     rbp
.text:0000000000008E2F                 pop     r12
.text:0000000000008E31                 jmp     free
.text:0000000000008E31 ; } // starts at 8D60
.text:0000000000008E31 hash_free       endp
.text:0000000000008E31
.text:0000000000008E31 ; ---------------------------------------------------------------------------
.text:0000000000008E36                 align 20h
.text:0000000000008E40
.text:0000000000008E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E40
.text:0000000000008E40 ; Attributes: info_from_lumina
.text:0000000000008E40
.text:0000000000008E40 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000008E40                 public hash_rehash
.text:0000000000008E40 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000008E40                                         ; hash_delete+10F↓p
.text:0000000000008E40
.text:0000000000008E40 ptr             = qword ptr -78h
.text:0000000000008E40 var_70          = qword ptr -70h
.text:0000000000008E40 var_68          = qword ptr -68h
.text:0000000000008E40 var_60          = qword ptr -60h
.text:0000000000008E40 var_58          = qword ptr -58h
.text:0000000000008E40 var_50          = qword ptr -50h
.text:0000000000008E40 var_48          = qword ptr -48h
.text:0000000000008E40 var_40          = qword ptr -40h
.text:0000000000008E40 var_38          = qword ptr -38h
.text:0000000000008E40 var_30          = qword ptr -30h
.text:0000000000008E40 var_20          = qword ptr -20h
.text:0000000000008E40
.text:0000000000008E40 ; __unwind {
.text:0000000000008E40                 push    r12
.text:0000000000008E42                 push    rbp
.text:0000000000008E43                 mov     rbp, rdi
.text:0000000000008E46                 push    rbx
.text:0000000000008E47                 sub     rsp, 60h
.text:0000000000008E4B                 mov     r12, [rdi+28h]
.text:0000000000008E4F                 mov     rax, fs:28h
.text:0000000000008E58                 mov     [rsp+78h+var_20], rax
.text:0000000000008E5D                 xor     eax, eax
.text:0000000000008E5F                 cmp     byte ptr [r12+10h], 0
.text:0000000000008E65                 jnz     short loc_8EB8
.text:0000000000008E67                 test    rsi, rsi
.text:0000000000008E6A                 js      loc_8FE8
.text:0000000000008E70                 pxor    xmm0, xmm0
.text:0000000000008E74                 cvtsi2ss xmm0, rsi
.text:0000000000008E79
.text:0000000000008E79 loc_8E79:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000008E79                 divss   xmm0, dword ptr [r12+8]
.text:0000000000008E80                 ucomiss xmm0, cs:dword_B04C
.text:0000000000008E87                 jnb     loc_8FC0
.text:0000000000008E8D                 ucomiss xmm0, cs:dword_B050
.text:0000000000008E94                 jb      loc_9010
.text:0000000000008E9A                 subss   xmm0, cs:dword_B050
.text:0000000000008EA2                 mov     rax, 8000000000000000h
.text:0000000000008EAC                 cvttss2si rsi, xmm0
.text:0000000000008EB1                 xor     rsi, rax
.text:0000000000008EB4                 nop     dword ptr [rax+00h]
.text:0000000000008EB8
.text:0000000000008EB8 loc_8EB8:                               ; CODE XREF: hash_rehash+25↑j
.text:0000000000008EB8                                         ; hash_rehash+1D5↓j
.text:0000000000008EB8                 mov     rdi, rsi
.text:0000000000008EBB                 call    next_prime
.text:0000000000008EC0                 mov     edx, 8
.text:0000000000008EC5                 mov     rbx, rax
.text:0000000000008EC8                 xor     ecx, ecx
.text:0000000000008ECA                 mov     rax, rdx
.text:0000000000008ECD                 mul     rbx
.text:0000000000008ED0                 jo      loc_906F
.text:0000000000008ED6
.text:0000000000008ED6 loc_8ED6:                               ; CODE XREF: hash_rehash+234↓j
.text:0000000000008ED6                 test    rax, rax
.text:0000000000008ED9                 mov     eax, 1
.text:0000000000008EDE                 cmovs   rcx, rax
.text:0000000000008EE2                 test    rbx, rbx
.text:0000000000008EE5                 jz      loc_8FC0
.text:0000000000008EEB                 and     ecx, 1
.text:0000000000008EEE                 jnz     loc_8FC0
.text:0000000000008EF4                 cmp     [rbp+10h], rbx
.text:0000000000008EF8                 jz      loc_9020
.text:0000000000008EFE                 mov     esi, 10h        ; size
.text:0000000000008F03                 mov     rdi, rbx        ; nmemb
.text:0000000000008F06                 call    _calloc
.text:0000000000008F0B                 test    rax, rax
.text:0000000000008F0E                 mov     [rsp+78h+ptr], rax
.text:0000000000008F12                 jz      loc_8FC0
.text:0000000000008F18                 mov     [rsp+78h+var_68], rbx
.text:0000000000008F1D                 shl     rbx, 4
.text:0000000000008F21                 mov     [rsp+78h+var_50], r12
.text:0000000000008F26                 add     rbx, rax
.text:0000000000008F29                 mov     rax, [rbp+30h]
.text:0000000000008F2D                 mov     r12, rsp
.text:0000000000008F30                 xor     edx, edx
.text:0000000000008F32                 mov     rsi, rbp
.text:0000000000008F35                 mov     rdi, r12
.text:0000000000008F38                 mov     [rsp+78h+var_70], rbx
.text:0000000000008F3D                 mov     [rsp+78h+var_60], 0
.text:0000000000008F46                 mov     [rsp+78h+var_48], rax
.text:0000000000008F4B                 mov     rax, [rbp+38h]
.text:0000000000008F4F                 mov     [rsp+78h+var_58], 0
.text:0000000000008F58                 mov     [rsp+78h+var_40], rax
.text:0000000000008F5D                 mov     rax, [rbp+40h]
.text:0000000000008F61                 mov     [rsp+78h+var_38], rax
.text:0000000000008F66                 mov     rax, [rbp+48h]
.text:0000000000008F6A                 mov     [rsp+78h+var_30], rax
.text:0000000000008F6F                 call    transfer_entries
.text:0000000000008F74                 test    al, al
.text:0000000000008F76                 mov     ebx, eax
.text:0000000000008F78                 jnz     loc_9030
.text:0000000000008F7E                 mov     rax, [rsp+78h+var_30]
.text:0000000000008F83                 mov     edx, 1
.text:0000000000008F88                 mov     rsi, r12
.text:0000000000008F8B                 mov     rdi, rbp
.text:0000000000008F8E                 mov     [rbp+48h], rax
.text:0000000000008F92                 call    transfer_entries
.text:0000000000008F97                 test    al, al
.text:0000000000008F99                 jz      loc_9079
.text:0000000000008F9F                 xor     edx, edx
.text:0000000000008FA1                 mov     rsi, r12
.text:0000000000008FA4                 mov     rdi, rbp
.text:0000000000008FA7                 call    transfer_entries
.text:0000000000008FAC                 test    al, al
.text:0000000000008FAE                 jz      loc_9079
.text:0000000000008FB4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000008FB8                 call    free
.text:0000000000008FBD                 jmp     short loc_8FC2
.text:0000000000008FBD ; ---------------------------------------------------------------------------
.text:0000000000008FBF                 align 20h
.text:0000000000008FC0
.text:0000000000008FC0 loc_8FC0:                               ; CODE XREF: hash_rehash+47↑j
.text:0000000000008FC0                                         ; hash_rehash+A5↑j ...
.text:0000000000008FC0                 xor     ebx, ebx
.text:0000000000008FC2
.text:0000000000008FC2 loc_8FC2:                               ; CODE XREF: hash_rehash+17D↑j
.text:0000000000008FC2                                         ; hash_rehash+1E5↓j ...
.text:0000000000008FC2                 mov     rcx, [rsp+78h+var_20]
.text:0000000000008FC7                 xor     rcx, fs:28h
.text:0000000000008FD0                 mov     eax, ebx
.text:0000000000008FD2                 jnz     loc_906A
.text:0000000000008FD8                 add     rsp, 60h
.text:0000000000008FDC                 pop     rbx
.text:0000000000008FDD                 pop     rbp
.text:0000000000008FDE                 pop     r12
.text:0000000000008FE0                 retn
.text:0000000000008FE0 ; ---------------------------------------------------------------------------
.text:0000000000008FE1                 align 8
.text:0000000000008FE8
.text:0000000000008FE8 loc_8FE8:                               ; CODE XREF: hash_rehash+2A↑j
.text:0000000000008FE8                 mov     rax, rsi
.text:0000000000008FEB                 pxor    xmm0, xmm0
.text:0000000000008FEF                 shr     rax, 1
.text:0000000000008FF2                 and     esi, 1
.text:0000000000008FF5                 or      rax, rsi
.text:0000000000008FF8                 cvtsi2ss xmm0, rax
.text:0000000000008FFD                 addss   xmm0, xmm0
.text:0000000000009001                 jmp     loc_8E79
.text:0000000000009001 ; ---------------------------------------------------------------------------
.text:0000000000009006                 align 10h
.text:0000000000009010
.text:0000000000009010 loc_9010:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000009010                 cvttss2si rsi, xmm0
.text:0000000000009015                 jmp     loc_8EB8
.text:0000000000009015 ; ---------------------------------------------------------------------------
.text:000000000000901A                 align 20h
.text:0000000000009020
.text:0000000000009020 loc_9020:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000009020                 mov     ebx, 1
.text:0000000000009025                 jmp     short loc_8FC2
.text:0000000000009025 ; ---------------------------------------------------------------------------
.text:0000000000009027                 align 10h
.text:0000000000009030
.text:0000000000009030 loc_9030:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000009030                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000009034                 call    free
.text:0000000000009039                 mov     rax, [rsp+78h+ptr]
.text:000000000000903D                 mov     [rbp+0], rax
.text:0000000000009041                 mov     rax, [rsp+78h+var_70]
.text:0000000000009046                 mov     [rbp+8], rax
.text:000000000000904A                 mov     rax, [rsp+78h+var_68]
.text:000000000000904F                 mov     [rbp+10h], rax
.text:0000000000009053                 mov     rax, [rsp+78h+var_60]
.text:0000000000009058                 mov     [rbp+18h], rax
.text:000000000000905C                 mov     rax, [rsp+78h+var_30]
.text:0000000000009061                 mov     [rbp+48h], rax
.text:0000000000009065                 jmp     loc_8FC2
.text:000000000000906A ; ---------------------------------------------------------------------------
.text:000000000000906A
.text:000000000000906A loc_906A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000906A                 call    ___stack_chk_fail
.text:000000000000906F ; ---------------------------------------------------------------------------
.text:000000000000906F
.text:000000000000906F loc_906F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000906F                 mov     ecx, 1
.text:0000000000009074                 jmp     loc_8ED6
.text:0000000000009079 ; ---------------------------------------------------------------------------
.text:0000000000009079
.text:0000000000009079 loc_9079:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000009079                                         ; hash_rehash+16E↑j
.text:0000000000009079                 call    _abort
.text:0000000000009079 ; } // starts at 8E40
.text:0000000000009079 hash_rehash     endp
.text:0000000000009079
.text:0000000000009079 ; ---------------------------------------------------------------------------
.text:000000000000907E                 align 20h
.text:0000000000009080
.text:0000000000009080 ; =============== S U B R O U T I N E =======================================
.text:0000000000009080
.text:0000000000009080 ; Attributes: info_from_lumina
.text:0000000000009080
.text:0000000000009080 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000009080                 public hash_insert_if_absent
.text:0000000000009080 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000009080
.text:0000000000009080 var_38          = qword ptr -38h
.text:0000000000009080 var_30          = qword ptr -30h
.text:0000000000009080
.text:0000000000009080 ; __unwind {
.text:0000000000009080                 push    r13
.text:0000000000009082                 push    r12
.text:0000000000009084                 push    rbp
.text:0000000000009085                 push    rbx
.text:0000000000009086                 sub     rsp, 18h
.text:000000000000908A                 mov     rax, fs:28h
.text:0000000000009093                 mov     [rsp+38h+var_30], rax
.text:0000000000009098                 xor     eax, eax
.text:000000000000909A                 test    rsi, rsi
.text:000000000000909D                 jz      loc_925D
.text:00000000000090A3                 mov     r12, rsp
.text:00000000000090A6                 xor     ecx, ecx
.text:00000000000090A8                 mov     r13, rdx
.text:00000000000090AB                 mov     rdx, r12
.text:00000000000090AE                 mov     rbx, rdi
.text:00000000000090B1                 mov     rbp, rsi
.text:00000000000090B4                 call    hash_find_entry
.text:00000000000090B9                 test    rax, rax
.text:00000000000090BC                 mov     rdx, rax
.text:00000000000090BF                 jz      short loc_90F0
.text:00000000000090C1                 xor     eax, eax
.text:00000000000090C3                 test    r13, r13
.text:00000000000090C6                 jz      short loc_90CC
.text:00000000000090C8                 mov     [r13+0], rdx
.text:00000000000090CC
.text:00000000000090CC loc_90CC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:00000000000090CC                                         ; hash_insert_if_absent+E9↓j ...
.text:00000000000090CC                 mov     rcx, [rsp+38h+var_30]
.text:00000000000090D1                 xor     rcx, fs:28h
.text:00000000000090DA                 jnz     loc_92FF
.text:00000000000090E0                 add     rsp, 18h
.text:00000000000090E4                 pop     rbx
.text:00000000000090E5                 pop     rbp
.text:00000000000090E6                 pop     r12
.text:00000000000090E8                 pop     r13
.text:00000000000090EA                 retn
.text:00000000000090EA ; ---------------------------------------------------------------------------
.text:00000000000090EB                 align 10h
.text:00000000000090F0
.text:00000000000090F0 loc_90F0:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:00000000000090F0                 mov     rax, [rbx+18h]
.text:00000000000090F4                 test    rax, rax
.text:00000000000090F7                 js      short loc_9170
.text:00000000000090F9                 pxor    xmm1, xmm1
.text:00000000000090FD                 mov     rdx, [rbx+28h]
.text:0000000000009101                 cvtsi2ss xmm1, rax
.text:0000000000009106                 mov     rax, [rbx+10h]
.text:000000000000910A                 test    rax, rax
.text:000000000000910D                 js      loc_919A
.text:0000000000009113
.text:0000000000009113 loc_9113:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000009113                 pxor    xmm0, xmm0
.text:0000000000009117                 cvtsi2ss xmm0, rax
.text:000000000000911C
.text:000000000000911C loc_911C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000911C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000009121                 ucomiss xmm1, xmm0
.text:0000000000009124                 ja      loc_91C0
.text:000000000000912A
.text:000000000000912A loc_912A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000912A                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000912A                 mov     r12, [rsp+38h+var_38]
.text:000000000000912E                 cmp     qword ptr [r12], 0
.text:0000000000009133                 jz      loc_9268
.text:0000000000009139                 mov     rax, [rbx+48h]
.text:000000000000913D                 test    rax, rax
.text:0000000000009140                 jz      loc_9280
.text:0000000000009146                 mov     rdx, [rax+8]
.text:000000000000914A                 mov     [rbx+48h], rdx
.text:000000000000914E
.text:000000000000914E loc_914E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000914E                 mov     rdx, [r12+8]
.text:0000000000009153                 mov     [rax], rbp
.text:0000000000009156                 mov     [rax+8], rdx
.text:000000000000915A                 mov     [r12+8], rax
.text:000000000000915F                 mov     eax, 1
.text:0000000000009164                 add     qword ptr [rbx+20h], 1
.text:0000000000009169                 jmp     loc_90CC
.text:0000000000009169 ; ---------------------------------------------------------------------------
.text:000000000000916E                 align 10h
.text:0000000000009170
.text:0000000000009170 loc_9170:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000009170                 mov     rdx, rax
.text:0000000000009173                 pxor    xmm1, xmm1
.text:0000000000009177                 and     eax, 1
.text:000000000000917A                 shr     rdx, 1
.text:000000000000917D                 or      rdx, rax
.text:0000000000009180                 mov     rax, [rbx+10h]
.text:0000000000009184                 cvtsi2ss xmm1, rdx
.text:0000000000009189                 mov     rdx, [rbx+28h]
.text:000000000000918D                 test    rax, rax
.text:0000000000009190                 addss   xmm1, xmm1
.text:0000000000009194                 jns     loc_9113
.text:000000000000919A
.text:000000000000919A loc_919A:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:000000000000919A                 mov     rcx, rax
.text:000000000000919D                 pxor    xmm0, xmm0
.text:00000000000091A1                 shr     rcx, 1
.text:00000000000091A4                 and     eax, 1
.text:00000000000091A7                 or      rcx, rax
.text:00000000000091AA                 cvtsi2ss xmm0, rcx
.text:00000000000091AF                 addss   xmm0, xmm0
.text:00000000000091B3                 jmp     loc_911C
.text:00000000000091B3 ; ---------------------------------------------------------------------------
.text:00000000000091B8                 align 20h
.text:00000000000091C0
.text:00000000000091C0 loc_91C0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:00000000000091C0                 lea     rdi, [rbx+28h]
.text:00000000000091C4                 call    check_tuning
.text:00000000000091C9                 mov     rax, [rbx+10h]
.text:00000000000091CD                 mov     rdx, [rbx+28h]
.text:00000000000091D1                 test    rax, rax
.text:00000000000091D4                 movss   xmm2, dword ptr [rdx+8]
.text:00000000000091D9                 js      loc_92A0
.text:00000000000091DF                 pxor    xmm0, xmm0
.text:00000000000091E3                 cvtsi2ss xmm0, rax
.text:00000000000091E8
.text:00000000000091E8 loc_91E8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:00000000000091E8                 mov     rax, [rbx+18h]
.text:00000000000091EC                 test    rax, rax
.text:00000000000091EF                 js      loc_92C0
.text:00000000000091F5                 pxor    xmm1, xmm1
.text:00000000000091F9                 cvtsi2ss xmm1, rax
.text:00000000000091FE
.text:00000000000091FE loc_91FE:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:00000000000091FE                 movaps  xmm3, xmm2
.text:0000000000009201                 mulss   xmm3, xmm0
.text:0000000000009205                 ucomiss xmm1, xmm3
.text:0000000000009208                 jbe     loc_912A
.text:000000000000920E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000009212                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000009217                 jnz     short loc_921D
.text:0000000000009219                 mulss   xmm0, xmm2
.text:000000000000921D
.text:000000000000921D loc_921D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000921D                 ucomiss xmm0, cs:dword_B04C
.text:0000000000009224                 jnb     short loc_9293
.text:0000000000009226                 ucomiss xmm0, cs:dword_B050
.text:000000000000922D                 jnb     loc_92E0
.text:0000000000009233                 cvttss2si rsi, xmm0
.text:0000000000009238
.text:0000000000009238 loc_9238:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000009238                 mov     rdi, rbx
.text:000000000000923B                 call    hash_rehash
.text:0000000000009240                 test    al, al
.text:0000000000009242                 jz      short loc_9293
.text:0000000000009244                 xor     ecx, ecx
.text:0000000000009246                 mov     rdx, r12
.text:0000000000009249                 mov     rsi, rbp
.text:000000000000924C                 mov     rdi, rbx
.text:000000000000924F                 call    hash_find_entry
.text:0000000000009254                 test    rax, rax
.text:0000000000009257                 jz      loc_912A
.text:000000000000925D
.text:000000000000925D loc_925D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000925D                 call    _abort
.text:000000000000925D ; ---------------------------------------------------------------------------
.text:0000000000009262                 align 8
.text:0000000000009268
.text:0000000000009268 loc_9268:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000009268                 mov     [r12], rbp
.text:000000000000926C                 mov     eax, 1
.text:0000000000009271                 add     qword ptr [rbx+20h], 1
.text:0000000000009276                 add     qword ptr [rbx+18h], 1
.text:000000000000927B                 jmp     loc_90CC
.text:0000000000009280 ; ---------------------------------------------------------------------------
.text:0000000000009280
.text:0000000000009280 loc_9280:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000009280                 mov     edi, 10h        ; size
.text:0000000000009285                 call    _malloc
.text:000000000000928A                 test    rax, rax
.text:000000000000928D                 jnz     loc_914E
.text:0000000000009293
.text:0000000000009293 loc_9293:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000009293                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000009293                 mov     eax, 0FFFFFFFFh
.text:0000000000009298                 jmp     loc_90CC
.text:0000000000009298 ; ---------------------------------------------------------------------------
.text:000000000000929D                 align 20h
.text:00000000000092A0
.text:00000000000092A0 loc_92A0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:00000000000092A0                 mov     rcx, rax
.text:00000000000092A3                 pxor    xmm0, xmm0
.text:00000000000092A7                 shr     rcx, 1
.text:00000000000092AA                 and     eax, 1
.text:00000000000092AD                 or      rcx, rax
.text:00000000000092B0                 cvtsi2ss xmm0, rcx
.text:00000000000092B5                 addss   xmm0, xmm0
.text:00000000000092B9                 jmp     loc_91E8
.text:00000000000092B9 ; ---------------------------------------------------------------------------
.text:00000000000092BE                 align 20h
.text:00000000000092C0
.text:00000000000092C0 loc_92C0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:00000000000092C0                 mov     rcx, rax
.text:00000000000092C3                 pxor    xmm1, xmm1
.text:00000000000092C7                 shr     rcx, 1
.text:00000000000092CA                 and     eax, 1
.text:00000000000092CD                 or      rcx, rax
.text:00000000000092D0                 cvtsi2ss xmm1, rcx
.text:00000000000092D5                 addss   xmm1, xmm1
.text:00000000000092D9                 jmp     loc_91FE
.text:00000000000092D9 ; ---------------------------------------------------------------------------
.text:00000000000092DE                 align 20h
.text:00000000000092E0
.text:00000000000092E0 loc_92E0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:00000000000092E0                 subss   xmm0, cs:dword_B050
.text:00000000000092E8                 mov     rax, 8000000000000000h
.text:00000000000092F2                 cvttss2si rsi, xmm0
.text:00000000000092F7                 xor     rsi, rax
.text:00000000000092FA                 jmp     loc_9238
.text:00000000000092FF ; ---------------------------------------------------------------------------
.text:00000000000092FF
.text:00000000000092FF loc_92FF:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:00000000000092FF                 call    ___stack_chk_fail
.text:00000000000092FF ; } // starts at 9080
.text:00000000000092FF hash_insert_if_absent endp
.text:00000000000092FF
.text:00000000000092FF ; ---------------------------------------------------------------------------
.text:0000000000009304                 align 10h
.text:0000000000009310
.text:0000000000009310 ; =============== S U B R O U T I N E =======================================
.text:0000000000009310
.text:0000000000009310 ; Attributes: info_from_lumina
.text:0000000000009310
.text:0000000000009310 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000009310                 public hash_insert
.text:0000000000009310 hash_insert     proc near               ; CODE XREF: filesystem_type+FF↑p
.text:0000000000009310                                         ; enter_dir_isra_10+46↑p
.text:0000000000009310
.text:0000000000009310 var_18          = qword ptr -18h
.text:0000000000009310 var_10          = qword ptr -10h
.text:0000000000009310
.text:0000000000009310 ; __unwind {
.text:0000000000009310                 push    rbx
.text:0000000000009311                 mov     rbx, rsi
.text:0000000000009314                 sub     rsp, 10h
.text:0000000000009318                 mov     rdx, rsp
.text:000000000000931B                 mov     rax, fs:28h
.text:0000000000009324                 mov     [rsp+18h+var_10], rax
.text:0000000000009329                 xor     eax, eax
.text:000000000000932B                 call    hash_insert_if_absent
.text:0000000000009330                 cmp     eax, 0FFFFFFFFh
.text:0000000000009333                 jz      short loc_9360
.text:0000000000009335                 test    eax, eax
.text:0000000000009337                 jnz     short loc_933D
.text:0000000000009339                 mov     rbx, [rsp+18h+var_18]
.text:000000000000933D
.text:000000000000933D loc_933D:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000933D                                         ; hash_insert+52↓j
.text:000000000000933D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000009342                 xor     rcx, fs:28h
.text:000000000000934B                 mov     rax, rbx
.text:000000000000934E                 jnz     short loc_9364
.text:0000000000009350                 add     rsp, 10h
.text:0000000000009354                 pop     rbx
.text:0000000000009355                 retn
.text:0000000000009355 ; ---------------------------------------------------------------------------
.text:0000000000009356                 align 20h
.text:0000000000009360
.text:0000000000009360 loc_9360:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000009360                 xor     ebx, ebx
.text:0000000000009362                 jmp     short loc_933D
.text:0000000000009364 ; ---------------------------------------------------------------------------
.text:0000000000009364
.text:0000000000009364 loc_9364:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000009364                 call    ___stack_chk_fail
.text:0000000000009364 ; } // starts at 9310
.text:0000000000009364 hash_insert     endp
.text:0000000000009364
.text:0000000000009364 ; ---------------------------------------------------------------------------
.text:0000000000009369                 align 10h
.text:0000000000009370
.text:0000000000009370 ; =============== S U B R O U T I N E =======================================
.text:0000000000009370
.text:0000000000009370 ; Attributes: info_from_lumina
.text:0000000000009370
.text:0000000000009370 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000009370                 public hash_delete
.text:0000000000009370 hash_delete     proc near               ; CODE XREF: leave_dir_isra_12+7A↑p
.text:0000000000009370
.text:0000000000009370 var_28          = qword ptr -28h
.text:0000000000009370 var_20          = qword ptr -20h
.text:0000000000009370
.text:0000000000009370 ; __unwind {
.text:0000000000009370                 push    r12
.text:0000000000009372                 push    rbp
.text:0000000000009373                 mov     ecx, 1
.text:0000000000009378                 push    rbx
.text:0000000000009379                 mov     rbx, rdi
.text:000000000000937C                 sub     rsp, 10h
.text:0000000000009380                 mov     rdx, rsp
.text:0000000000009383                 mov     rax, fs:28h
.text:000000000000938C                 mov     [rsp+28h+var_20], rax
.text:0000000000009391                 xor     eax, eax
.text:0000000000009393                 call    hash_find_entry
.text:0000000000009398                 test    rax, rax
.text:000000000000939B                 mov     rbp, rax
.text:000000000000939E                 jz      short loc_93AF
.text:00000000000093A0                 mov     rax, [rsp+28h+var_28]
.text:00000000000093A4                 sub     qword ptr [rbx+20h], 1
.text:00000000000093A9                 cmp     qword ptr [rax], 0
.text:00000000000093AD                 jz      short loc_93D0
.text:00000000000093AF
.text:00000000000093AF loc_93AF:                               ; CODE XREF: hash_delete+2E↑j
.text:00000000000093AF                                         ; hash_delete+9F↓j ...
.text:00000000000093AF                 mov     rcx, [rsp+28h+var_20]
.text:00000000000093B4                 xor     rcx, fs:28h
.text:00000000000093BD                 mov     rax, rbp
.text:00000000000093C0                 jnz     loc_956E
.text:00000000000093C6                 add     rsp, 10h
.text:00000000000093CA                 pop     rbx
.text:00000000000093CB                 pop     rbp
.text:00000000000093CC                 pop     r12
.text:00000000000093CE                 retn
.text:00000000000093CE ; ---------------------------------------------------------------------------
.text:00000000000093CF                 align 10h
.text:00000000000093D0
.text:00000000000093D0 loc_93D0:                               ; CODE XREF: hash_delete+3D↑j
.text:00000000000093D0                 mov     rax, [rbx+18h]
.text:00000000000093D4                 sub     rax, 1
.text:00000000000093D8                 test    rax, rax
.text:00000000000093DB                 mov     [rbx+18h], rax
.text:00000000000093DF                 js      loc_94E0
.text:00000000000093E5                 pxor    xmm0, xmm0
.text:00000000000093E9                 cvtsi2ss xmm0, rax
.text:00000000000093EE
.text:00000000000093EE loc_93EE:                               ; CODE XREF: hash_delete+189↓j
.text:00000000000093EE                 mov     rax, [rbx+10h]
.text:00000000000093F2                 mov     rdx, [rbx+28h]
.text:00000000000093F6                 test    rax, rax
.text:00000000000093F9                 js      loc_94C0
.text:00000000000093FF                 pxor    xmm1, xmm1
.text:0000000000009403                 cvtsi2ss xmm1, rax
.text:0000000000009408
.text:0000000000009408 loc_9408:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000009408                 mulss   xmm1, dword ptr [rdx]
.text:000000000000940C                 ucomiss xmm1, xmm0
.text:000000000000940F                 jbe     short loc_93AF
.text:0000000000009411                 lea     rdi, [rbx+28h]
.text:0000000000009415                 call    check_tuning
.text:000000000000941A                 mov     rax, [rbx+10h]
.text:000000000000941E                 mov     rdx, [rbx+28h]
.text:0000000000009422                 test    rax, rax
.text:0000000000009425                 js      loc_9550
.text:000000000000942B                 pxor    xmm0, xmm0
.text:000000000000942F                 cvtsi2ss xmm0, rax
.text:0000000000009434
.text:0000000000009434 loc_9434:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000009434                 mov     rax, [rbx+18h]
.text:0000000000009438                 test    rax, rax
.text:000000000000943B                 js      loc_9530
.text:0000000000009441                 pxor    xmm1, xmm1
.text:0000000000009445                 cvtsi2ss xmm1, rax
.text:000000000000944A
.text:000000000000944A loc_944A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000944A                 movss   xmm2, dword ptr [rdx]
.text:000000000000944E                 mulss   xmm2, xmm0
.text:0000000000009452                 ucomiss xmm2, xmm1
.text:0000000000009455                 jbe     loc_93AF
.text:000000000000945B                 cmp     byte ptr [rdx+10h], 0
.text:000000000000945F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000009464                 jz      loc_9520
.text:000000000000946A
.text:000000000000946A loc_946A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000946A                 ucomiss xmm0, cs:dword_B050
.text:0000000000009471                 jnb     loc_9500
.text:0000000000009477                 cvttss2si rsi, xmm0
.text:000000000000947C
.text:000000000000947C loc_947C:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000947C                 mov     rdi, rbx
.text:000000000000947F                 call    hash_rehash
.text:0000000000009484                 test    al, al
.text:0000000000009486                 jnz     loc_93AF
.text:000000000000948C                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000009490                 test    rdi, rdi
.text:0000000000009493                 jz      short loc_94A9
.text:0000000000009495                 nop     dword ptr [rax]
.text:0000000000009498
.text:0000000000009498 loc_9498:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000009498                 mov     r12, [rdi+8]
.text:000000000000949C                 call    free
.text:00000000000094A1                 test    r12, r12
.text:00000000000094A4                 mov     rdi, r12
.text:00000000000094A7                 jnz     short loc_9498
.text:00000000000094A9
.text:00000000000094A9 loc_94A9:                               ; CODE XREF: hash_delete+123↑j
.text:00000000000094A9                 mov     qword ptr [rbx+48h], 0
.text:00000000000094B1                 jmp     loc_93AF
.text:00000000000094B1 ; ---------------------------------------------------------------------------
.text:00000000000094B6                 align 20h
.text:00000000000094C0
.text:00000000000094C0 loc_94C0:                               ; CODE XREF: hash_delete+89↑j
.text:00000000000094C0                 mov     rcx, rax
.text:00000000000094C3                 pxor    xmm1, xmm1
.text:00000000000094C7                 shr     rcx, 1
.text:00000000000094CA                 and     eax, 1
.text:00000000000094CD                 or      rcx, rax
.text:00000000000094D0                 cvtsi2ss xmm1, rcx
.text:00000000000094D5                 addss   xmm1, xmm1
.text:00000000000094D9                 jmp     loc_9408
.text:00000000000094D9 ; ---------------------------------------------------------------------------
.text:00000000000094DE                 align 20h
.text:00000000000094E0
.text:00000000000094E0 loc_94E0:                               ; CODE XREF: hash_delete+6F↑j
.text:00000000000094E0                 mov     rdx, rax
.text:00000000000094E3                 pxor    xmm0, xmm0
.text:00000000000094E7                 shr     rdx, 1
.text:00000000000094EA                 and     eax, 1
.text:00000000000094ED                 or      rdx, rax
.text:00000000000094F0                 cvtsi2ss xmm0, rdx
.text:00000000000094F5                 addss   xmm0, xmm0
.text:00000000000094F9                 jmp     loc_93EE
.text:00000000000094F9 ; ---------------------------------------------------------------------------
.text:00000000000094FE                 align 20h
.text:0000000000009500
.text:0000000000009500 loc_9500:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000009500                 subss   xmm0, cs:dword_B050
.text:0000000000009508                 mov     rax, 8000000000000000h
.text:0000000000009512                 cvttss2si rsi, xmm0
.text:0000000000009517                 xor     rsi, rax
.text:000000000000951A                 jmp     loc_947C
.text:000000000000951A ; ---------------------------------------------------------------------------
.text:000000000000951F                 align 20h
.text:0000000000009520
.text:0000000000009520 loc_9520:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000009520                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000009525                 jmp     loc_946A
.text:0000000000009525 ; ---------------------------------------------------------------------------
.text:000000000000952A                 align 10h
.text:0000000000009530
.text:0000000000009530 loc_9530:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000009530                 mov     rcx, rax
.text:0000000000009533                 pxor    xmm1, xmm1
.text:0000000000009537                 shr     rcx, 1
.text:000000000000953A                 and     eax, 1
.text:000000000000953D                 or      rcx, rax
.text:0000000000009540                 cvtsi2ss xmm1, rcx
.text:0000000000009545                 addss   xmm1, xmm1
.text:0000000000009549                 jmp     loc_944A
.text:0000000000009549 ; ---------------------------------------------------------------------------
.text:000000000000954E                 align 10h
.text:0000000000009550
.text:0000000000009550 loc_9550:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000009550                 mov     rcx, rax
.text:0000000000009553                 pxor    xmm0, xmm0
.text:0000000000009557                 shr     rcx, 1
.text:000000000000955A                 and     eax, 1
.text:000000000000955D                 or      rcx, rax
.text:0000000000009560                 cvtsi2ss xmm0, rcx
.text:0000000000009565                 addss   xmm0, xmm0
.text:0000000000009569                 jmp     loc_9434
.text:000000000000956E ; ---------------------------------------------------------------------------
.text:000000000000956E
.text:000000000000956E loc_956E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000956E                 call    ___stack_chk_fail
.text:000000000000956E ; } // starts at 9370
.text:000000000000956E hash_delete     endp
.text:000000000000956E
.text:000000000000956E ; ---------------------------------------------------------------------------
.text:0000000000009573                 align 20h
.text:0000000000009580
.text:0000000000009580 ; =============== S U B R O U T I N E =======================================
.text:0000000000009580
.text:0000000000009580
.text:0000000000009580                 public i_ring_init
.text:0000000000009580 i_ring_init     proc near               ; CODE XREF: rpl_fts_open+2A9↑p
.text:0000000000009580 ; __unwind {
.text:0000000000009580                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000009584                 mov     qword ptr [rdi+14h], 0
.text:000000000000958C                 mov     [rdi], esi
.text:000000000000958E                 mov     [rdi+4], esi
.text:0000000000009591                 mov     [rdi+8], esi
.text:0000000000009594                 mov     [rdi+0Ch], esi
.text:0000000000009597                 mov     [rdi+10h], esi
.text:000000000000959A                 retn
.text:000000000000959A ; } // starts at 9580
.text:000000000000959A i_ring_init     endp
.text:000000000000959A
.text:000000000000959A ; ---------------------------------------------------------------------------
.text:000000000000959B                 align 20h
.text:00000000000095A0
.text:00000000000095A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095A0
.text:00000000000095A0
.text:00000000000095A0                 public i_ring_empty
.text:00000000000095A0 i_ring_empty    proc near               ; CODE XREF: fd_ring_clear+1F↑p
.text:00000000000095A0                                         ; fts_safe_changedir+1C7↑p
.text:00000000000095A0 ; __unwind {
.text:00000000000095A0                 movzx   eax, byte ptr [rdi+1Ch]
.text:00000000000095A4                 retn
.text:00000000000095A4 ; } // starts at 95A0
.text:00000000000095A4 i_ring_empty    endp
.text:00000000000095A4
.text:00000000000095A4 ; ---------------------------------------------------------------------------
.text:00000000000095A5                 align 10h
.text:00000000000095B0
.text:00000000000095B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095B0
.text:00000000000095B0
.text:00000000000095B0                 public i_ring_push
.text:00000000000095B0 i_ring_push     proc near               ; CODE XREF: cwd_advance_fd+34↑p
.text:00000000000095B0 ; __unwind {
.text:00000000000095B0                 movzx   edx, byte ptr [rdi+1Ch]
.text:00000000000095B4                 mov     ecx, [rdi+14h]
.text:00000000000095B7                 xor     edx, 1
.text:00000000000095BA                 movzx   edx, dl
.text:00000000000095BD                 add     ecx, edx
.text:00000000000095BF                 and     ecx, 3
.text:00000000000095C2                 mov     eax, ecx
.text:00000000000095C4                 lea     r8, [rdi+rax*4]
.text:00000000000095C8                 mov     eax, [r8]
.text:00000000000095CB                 mov     [r8], esi
.text:00000000000095CE                 mov     esi, [rdi+18h]
.text:00000000000095D1                 mov     [rdi+14h], ecx
.text:00000000000095D4                 cmp     esi, ecx
.text:00000000000095D6                 jnz     short loc_95E0
.text:00000000000095D8                 add     edx, esi
.text:00000000000095DA                 and     edx, 3
.text:00000000000095DD                 mov     [rdi+18h], edx
.text:00000000000095E0
.text:00000000000095E0 loc_95E0:                               ; CODE XREF: i_ring_push+26↑j
.text:00000000000095E0                 mov     byte ptr [rdi+1Ch], 0
.text:00000000000095E4                 retn
.text:00000000000095E4 ; } // starts at 95B0
.text:00000000000095E4 i_ring_push     endp
.text:00000000000095E4
.text:00000000000095E4 ; ---------------------------------------------------------------------------
.text:00000000000095E5                 align 10h
.text:00000000000095F0
.text:00000000000095F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095F0
.text:00000000000095F0
.text:00000000000095F0                 public i_ring_pop
.text:00000000000095F0 i_ring_pop      proc near               ; CODE XREF: fd_ring_clear+13↑p
.text:00000000000095F0                                         ; fts_safe_changedir+1DB↑p
.text:00000000000095F0 ; __unwind {
.text:00000000000095F0                 cmp     byte ptr [rdi+1Ch], 0
.text:00000000000095F4                 jnz     short loc_9625
.text:00000000000095F6                 mov     eax, [rdi+14h]
.text:00000000000095F9                 mov     esi, [rdi+10h]
.text:00000000000095FC                 lea     rcx, [rdi+rax*4]
.text:0000000000009600                 mov     rdx, rax
.text:0000000000009603                 mov     eax, [rcx]
.text:0000000000009605                 mov     [rcx], esi
.text:0000000000009607                 cmp     edx, [rdi+18h]
.text:000000000000960A                 jz      short loc_9620
.text:000000000000960C                 add     edx, 3
.text:000000000000960F                 and     edx, 3
.text:0000000000009612                 mov     [rdi+14h], edx
.text:0000000000009615                 retn
.text:0000000000009615 ; ---------------------------------------------------------------------------
.text:0000000000009616                 align 20h
.text:0000000000009620
.text:0000000000009620 loc_9620:                               ; CODE XREF: i_ring_pop+1A↑j
.text:0000000000009620                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000009624                 retn
.text:0000000000009625 ; ---------------------------------------------------------------------------
.text:0000000000009625
.text:0000000000009625 loc_9625:                               ; CODE XREF: i_ring_pop+4↑j
.text:0000000000009625                 sub     rsp, 8
.text:0000000000009629                 call    _abort
.text:0000000000009629 ; } // starts at 95F0
.text:0000000000009629 i_ring_pop      endp
.text:0000000000009629
.text:0000000000009629 ; ---------------------------------------------------------------------------
.text:000000000000962E                 align 10h
.text:0000000000009630
.text:0000000000009630 ; =============== S U B R O U T I N E =======================================
.text:0000000000009630
.text:0000000000009630
.text:0000000000009630                 public locale_charset
.text:0000000000009630 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000009630 ; __unwind {
.text:0000000000009630                 sub     rsp, 8
.text:0000000000009634                 mov     edi, 0Eh        ; item
.text:0000000000009639                 call    _nl_langinfo
.text:000000000000963E                 test    rax, rax
.text:0000000000009641                 jz      short loc_9660
.text:0000000000009643                 cmp     byte ptr [rax], 0
.text:0000000000009646                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000964D                 cmovz   rax, rdx
.text:0000000000009651                 add     rsp, 8
.text:0000000000009655                 retn
.text:0000000000009655 ; ---------------------------------------------------------------------------
.text:0000000000009656                 align 20h
.text:0000000000009660
.text:0000000000009660 loc_9660:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000009660                 lea     rax, aAscii     ; "ASCII"
.text:0000000000009667                 add     rsp, 8
.text:000000000000966B                 retn
.text:000000000000966B ; } // starts at 9630
.text:000000000000966B locale_charset  endp
.text:000000000000966B
.text:000000000000966B ; ---------------------------------------------------------------------------
.text:000000000000966C                 align 10h
.text:0000000000009670
.text:0000000000009670 ; =============== S U B R O U T I N E =======================================
.text:0000000000009670
.text:0000000000009670
.text:0000000000009670                 public openat_safer
.text:0000000000009670 openat_safer    proc near               ; CODE XREF: diropen_isra_6+35↑j
.text:0000000000009670                                         ; opendirat+15↓p
.text:0000000000009670
.text:0000000000009670 var_58          = dword ptr -58h
.text:0000000000009670 var_50          = qword ptr -50h
.text:0000000000009670 var_48          = qword ptr -48h
.text:0000000000009670 var_40          = qword ptr -40h
.text:0000000000009670 var_38          = byte ptr -38h
.text:0000000000009670 var_20          = qword ptr -20h
.text:0000000000009670 arg_0           = byte ptr  8
.text:0000000000009670
.text:0000000000009670 ; __unwind {
.text:0000000000009670                 sub     rsp, 58h
.text:0000000000009674                 mov     [rsp+58h+var_20], rcx
.text:0000000000009679                 xor     ecx, ecx
.text:000000000000967B                 mov     rax, fs:28h
.text:0000000000009684                 mov     [rsp+58h+var_40], rax
.text:0000000000009689                 xor     eax, eax
.text:000000000000968B                 test    dl, 40h
.text:000000000000968E                 jnz     short loc_96B8
.text:0000000000009690
.text:0000000000009690 loc_9690:                               ; CODE XREF: openat_safer+67↓j
.text:0000000000009690                 xor     eax, eax
.text:0000000000009692                 call    _openat
.text:0000000000009697                 mov     edi, eax        ; fd
.text:0000000000009699                 call    fd_safer_flag
.text:000000000000969E                 mov     rsi, [rsp+58h+var_40]
.text:00000000000096A3                 xor     rsi, fs:28h
.text:00000000000096AC                 jnz     short loc_96D9
.text:00000000000096AE                 add     rsp, 58h
.text:00000000000096B2                 retn
.text:00000000000096B2 ; ---------------------------------------------------------------------------
.text:00000000000096B3                 align 8
.text:00000000000096B8
.text:00000000000096B8 loc_96B8:                               ; CODE XREF: openat_safer+1E↑j
.text:00000000000096B8                 lea     rax, [rsp+58h+arg_0]
.text:00000000000096BD                 mov     [rsp+58h+var_58], 18h
.text:00000000000096C4                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:00000000000096C8                 mov     [rsp+58h+var_50], rax
.text:00000000000096CD                 lea     rax, [rsp+58h+var_38]
.text:00000000000096D2                 mov     [rsp+58h+var_48], rax
.text:00000000000096D7                 jmp     short loc_9690
.text:00000000000096D9 ; ---------------------------------------------------------------------------
.text:00000000000096D9
.text:00000000000096D9 loc_96D9:                               ; CODE XREF: openat_safer+3C↑j
.text:00000000000096D9                 call    ___stack_chk_fail
.text:00000000000096D9 ; } // starts at 9670
.text:00000000000096D9 openat_safer    endp
.text:00000000000096D9
.text:00000000000096D9 ; ---------------------------------------------------------------------------
.text:00000000000096DE                 align 20h
.text:00000000000096E0
.text:00000000000096E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096E0
.text:00000000000096E0
.text:00000000000096E0                 public opendirat
.text:00000000000096E0 opendirat       proc near               ; CODE XREF: fts_build+4A5↑p
.text:00000000000096E0 ; __unwind {
.text:00000000000096E0                 push    r13
.text:00000000000096E2                 push    r12
.text:00000000000096E4                 or      edx, 90900h
.text:00000000000096EA                 push    rbp
.text:00000000000096EB                 push    rbx
.text:00000000000096EC                 xor     eax, eax
.text:00000000000096EE                 mov     r12, rcx
.text:00000000000096F1                 sub     rsp, 8
.text:00000000000096F5                 call    openat_safer
.text:00000000000096FA                 test    eax, eax
.text:00000000000096FC                 js      short loc_9750
.text:00000000000096FE                 mov     edi, eax        ; fd
.text:0000000000009700                 mov     ebx, eax
.text:0000000000009702                 call    _fdopendir
.text:0000000000009707                 test    rax, rax
.text:000000000000970A                 mov     rbp, rax
.text:000000000000970D                 jz      short loc_9728
.text:000000000000970F                 mov     [r12], ebx
.text:0000000000009713                 add     rsp, 8
.text:0000000000009717                 mov     rax, rbp
.text:000000000000971A                 pop     rbx
.text:000000000000971B                 pop     rbp
.text:000000000000971C                 pop     r12
.text:000000000000971E                 pop     r13
.text:0000000000009720                 retn
.text:0000000000009720 ; ---------------------------------------------------------------------------
.text:0000000000009721                 align 8
.text:0000000000009728
.text:0000000000009728 loc_9728:                               ; CODE XREF: opendirat+2D↑j
.text:0000000000009728                 call    ___errno_location
.text:000000000000972D                 mov     r13d, [rax]
.text:0000000000009730                 mov     r12, rax
.text:0000000000009733                 mov     edi, ebx        ; fd
.text:0000000000009735                 call    _close
.text:000000000000973A                 mov     rax, rbp
.text:000000000000973D                 mov     [r12], r13d
.text:0000000000009741                 add     rsp, 8
.text:0000000000009745                 pop     rbx
.text:0000000000009746                 pop     rbp
.text:0000000000009747                 pop     r12
.text:0000000000009749                 pop     r13
.text:000000000000974B                 retn
.text:000000000000974B ; ---------------------------------------------------------------------------
.text:000000000000974C                 align 10h
.text:0000000000009750
.text:0000000000009750 loc_9750:                               ; CODE XREF: opendirat+1C↑j
.text:0000000000009750                 add     rsp, 8
.text:0000000000009754                 xor     ebp, ebp
.text:0000000000009756                 pop     rbx
.text:0000000000009757                 mov     rax, rbp
.text:000000000000975A                 pop     rbp
.text:000000000000975B                 pop     r12
.text:000000000000975D                 pop     r13
.text:000000000000975F                 retn
.text:000000000000975F ; } // starts at 96E0
.text:000000000000975F opendirat       endp
.text:000000000000975F
.text:0000000000009760
.text:0000000000009760 ; =============== S U B R O U T I N E =======================================
.text:0000000000009760
.text:0000000000009760 ; Attributes: info_from_lumina
.text:0000000000009760
.text:0000000000009760 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000009760                 public fd_safer_flag
.text:0000000000009760 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:0000000000009760                                         ; openat_safer+29↑p
.text:0000000000009760 ; __unwind {
.text:0000000000009760                 push    r13
.text:0000000000009762                 push    r12
.text:0000000000009764                 push    rbp
.text:0000000000009765                 push    rbx
.text:0000000000009766                 mov     ebx, edi
.text:0000000000009768                 sub     rsp, 8
.text:000000000000976C                 cmp     edi, 2
.text:000000000000976F                 ja      short loc_9792
.text:0000000000009771                 call    dup_safer
.text:0000000000009776                 mov     r12d, eax
.text:0000000000009779                 call    ___errno_location
.text:000000000000977E                 mov     r13d, [rax]
.text:0000000000009781                 mov     rbp, rax
.text:0000000000009784                 mov     edi, ebx        ; fd
.text:0000000000009786                 call    _close
.text:000000000000978B                 mov     ebx, r12d
.text:000000000000978E                 mov     [rbp+0], r13d
.text:0000000000009792
.text:0000000000009792 loc_9792:                               ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000009792                 add     rsp, 8
.text:0000000000009796                 mov     eax, ebx
.text:0000000000009798                 pop     rbx
.text:0000000000009799                 pop     rbp
.text:000000000000979A                 pop     r12
.text:000000000000979C                 pop     r13
.text:000000000000979E                 retn
.text:000000000000979E ; } // starts at 9760
.text:000000000000979E fd_safer_flag   endp
.text:000000000000979E
.text:000000000000979E ; ---------------------------------------------------------------------------
.text:000000000000979F                 align 20h
.text:00000000000097A0
.text:00000000000097A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000097A0
.text:00000000000097A0 ; Attributes: info_from_lumina
.text:00000000000097A0
.text:00000000000097A0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000097A0                 public rpl_fclose
.text:00000000000097A0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000097A0 ; __unwind {
.text:00000000000097A0                 push    r12
.text:00000000000097A2                 push    rbp
.text:00000000000097A3                 push    rbx
.text:00000000000097A4                 mov     rbx, rdi
.text:00000000000097A7                 call    _fileno
.text:00000000000097AC                 test    eax, eax
.text:00000000000097AE                 mov     rdi, rbx        ; fp
.text:00000000000097B1                 js      short loc_9807
.text:00000000000097B3                 call    ___freading
.text:00000000000097B8                 test    eax, eax
.text:00000000000097BA                 jnz     short loc_97E8
.text:00000000000097BC
.text:00000000000097BC loc_97BC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000097BC                 mov     rdi, rbx        ; stream
.text:00000000000097BF                 call    rpl_fflush
.text:00000000000097C4                 test    eax, eax
.text:00000000000097C6                 jz      short loc_9804
.text:00000000000097C8                 call    ___errno_location
.text:00000000000097CD                 mov     r12d, [rax]
.text:00000000000097D0                 mov     rdi, rbx        ; stream
.text:00000000000097D3                 mov     rbp, rax
.text:00000000000097D6                 call    _fclose
.text:00000000000097DB                 test    r12d, r12d
.text:00000000000097DE                 jnz     short loc_9810
.text:00000000000097E0
.text:00000000000097E0 loc_97E0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000097E0                 pop     rbx
.text:00000000000097E1                 pop     rbp
.text:00000000000097E2                 pop     r12
.text:00000000000097E4                 retn
.text:00000000000097E4 ; ---------------------------------------------------------------------------
.text:00000000000097E5                 align 8
.text:00000000000097E8
.text:00000000000097E8 loc_97E8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000097E8                 mov     rdi, rbx        ; stream
.text:00000000000097EB                 call    _fileno
.text:00000000000097F0                 xor     esi, esi        ; offset
.text:00000000000097F2                 mov     edx, 1          ; whence
.text:00000000000097F7                 mov     edi, eax        ; fd
.text:00000000000097F9                 call    _lseek
.text:00000000000097FE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009802                 jnz     short loc_97BC
.text:0000000000009804
.text:0000000000009804 loc_9804:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000009804                 mov     rdi, rbx        ; stream
.text:0000000000009807
.text:0000000000009807 loc_9807:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000009807                 pop     rbx
.text:0000000000009808                 pop     rbp
.text:0000000000009809                 pop     r12
.text:000000000000980B                 jmp     _fclose
.text:0000000000009810 ; ---------------------------------------------------------------------------
.text:0000000000009810
.text:0000000000009810 loc_9810:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000009810                 mov     [rbp+0], r12d
.text:0000000000009814                 mov     eax, 0FFFFFFFFh
.text:0000000000009819                 jmp     short loc_97E0
.text:0000000000009819 ; } // starts at 97A0
.text:0000000000009819 rpl_fclose      endp
.text:0000000000009819
.text:0000000000009819 ; ---------------------------------------------------------------------------
.text:000000000000981B                 align 20h
.text:0000000000009820
.text:0000000000009820 ; =============== S U B R O U T I N E =======================================
.text:0000000000009820
.text:0000000000009820
.text:0000000000009820 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000009820                 public rpl_fcntl
.text:0000000000009820 rpl_fcntl       proc near               ; CODE XREF: fts_build+90A↑p
.text:0000000000009820                                         ; dup_safer+9↓j
.text:0000000000009820
.text:0000000000009820 var_68          = dword ptr -68h
.text:0000000000009820 var_60          = qword ptr -60h
.text:0000000000009820 var_58          = qword ptr -58h
.text:0000000000009820 var_50          = qword ptr -50h
.text:0000000000009820 var_48          = byte ptr -48h
.text:0000000000009820 var_38          = qword ptr -38h
.text:0000000000009820 var_30          = qword ptr -30h
.text:0000000000009820 var_28          = qword ptr -28h
.text:0000000000009820 var_20          = qword ptr -20h
.text:0000000000009820 arg_0           = byte ptr  8
.text:0000000000009820
.text:0000000000009820 ; __unwind {
.text:0000000000009820                 push    r12
.text:0000000000009822                 push    rbp
.text:0000000000009823                 mov     ebp, edi
.text:0000000000009825                 push    rbx
.text:0000000000009826                 sub     rsp, 50h
.text:000000000000982A                 mov     rax, fs:28h
.text:0000000000009833                 mov     [rsp+68h+var_50], rax
.text:0000000000009838                 xor     eax, eax
.text:000000000000983A                 lea     rax, [rsp+68h+arg_0]
.text:000000000000983F                 test    esi, esi
.text:0000000000009841                 mov     [rsp+68h+var_38], rdx
.text:0000000000009846                 mov     [rsp+68h+var_30], rcx
.text:000000000000984B                 mov     [rsp+68h+var_28], r8
.text:0000000000009850                 mov     [rsp+68h+var_60], rax
.text:0000000000009855                 lea     rax, [rsp+68h+var_48]
.text:000000000000985A                 mov     [rsp+68h+var_20], r9
.text:000000000000985F                 mov     [rsp+68h+var_68], 10h
.text:0000000000009866                 mov     [rsp+68h+var_58], rax
.text:000000000000986B                 jz      loc_9A72
.text:0000000000009871                 cmp     esi, 406h
.text:0000000000009877                 jnz     short loc_98C0
.text:0000000000009879                 mov     rax, [rsp+68h+var_58]
.text:000000000000987E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000009885                 mov     [rsp+68h+var_68], 18h
.text:000000000000988C                 mov     r12d, [rax+10h]
.text:0000000000009890                 mov     edx, r12d
.text:0000000000009893                 js      loc_99C3
.text:0000000000009899                 xor     eax, eax
.text:000000000000989B                 mov     esi, 406h       ; cmd
.text:00000000000098A0                 call    _fcntl
.text:00000000000098A5                 test    eax, eax
.text:00000000000098A7                 mov     ebx, eax
.text:00000000000098A9                 js      loc_9A38
.text:00000000000098AF
.text:00000000000098AF loc_98AF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:00000000000098AF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:00000000000098B9                 jmp     short loc_9900
.text:00000000000098B9 ; ---------------------------------------------------------------------------
.text:00000000000098BB                 align 20h
.text:00000000000098C0
.text:00000000000098C0 loc_98C0:                               ; CODE XREF: rpl_fcntl+57↑j
.text:00000000000098C0                 cmp     esi, 0Bh
.text:00000000000098C3                 jz      short loc_98F0
.text:00000000000098C5                 jg      short loc_9920
.text:00000000000098C7                 cmp     esi, 4
.text:00000000000098CA                 jz      loc_99A0
.text:00000000000098D0                 jg      loc_9990
.text:00000000000098D6                 cmp     esi, 2
.text:00000000000098D9                 jz      loc_99A0
.text:00000000000098DF                 jg      short loc_98F0
.text:00000000000098E1                 cmp     esi, 1
.text:00000000000098E4                 jnz     short loc_9948
.text:00000000000098E6                 db      2Eh
.text:00000000000098E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000098F0
.text:00000000000098F0 loc_98F0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:00000000000098F0                                         ; rpl_fcntl+BF↑j ...
.text:00000000000098F0                 mov     edi, ebp        ; fd
.text:00000000000098F2                 xor     eax, eax
.text:00000000000098F4                 call    _fcntl
.text:00000000000098F9                 mov     ebx, eax
.text:00000000000098FB                 nop     dword ptr [rax+rax+00h]
.text:0000000000009900
.text:0000000000009900 loc_9900:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000009900                                         ; rpl_fcntl+147↓j ...
.text:0000000000009900                 mov     rcx, [rsp+68h+var_50]
.text:0000000000009905                 xor     rcx, fs:28h
.text:000000000000990E                 mov     eax, ebx
.text:0000000000009910                 jnz     loc_9A6D
.text:0000000000009916                 add     rsp, 50h
.text:000000000000991A                 pop     rbx
.text:000000000000991B                 pop     rbp
.text:000000000000991C                 pop     r12
.text:000000000000991E                 retn
.text:000000000000991E ; ---------------------------------------------------------------------------
.text:000000000000991F                 align 20h
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000009920                 cmp     esi, 407h
.text:0000000000009926                 jg      short loc_9970
.text:0000000000009928                 cmp     esi, 406h
.text:000000000000992E                 jge     short loc_99A0
.text:0000000000009930                 cmp     esi, 401h
.text:0000000000009936                 jz      short loc_98F0
.text:0000000000009938                 cmp     esi, 402h
.text:000000000000993E                 jz      short loc_99A0
.text:0000000000009940                 cmp     esi, 400h
.text:0000000000009946                 jz      short loc_99A0
.text:0000000000009948
.text:0000000000009948 loc_9948:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000009948                                         ; rpl_fcntl+164↓j ...
.text:0000000000009948                 mov     eax, [rsp+68h+var_68]
.text:000000000000994B                 cmp     eax, 2Fh ; '/'
.text:000000000000994E                 ja      loc_9A8A
.text:0000000000009954                 add     rax, [rsp+68h+var_58]
.text:0000000000009959
.text:0000000000009959 loc_9959:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000009959                 mov     rdx, [rax]
.text:000000000000995C                 mov     edi, ebp        ; fd
.text:000000000000995E                 xor     eax, eax
.text:0000000000009960                 call    _fcntl
.text:0000000000009965                 mov     ebx, eax
.text:0000000000009967                 jmp     short loc_9900
.text:0000000000009967 ; ---------------------------------------------------------------------------
.text:0000000000009969                 align 10h
.text:0000000000009970
.text:0000000000009970 loc_9970:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000009970                 cmp     esi, 409h
.text:0000000000009976                 jz      short loc_99A0
.text:0000000000009978                 jl      loc_98F0
.text:000000000000997E                 cmp     esi, 40Ah
.text:0000000000009984                 jnz     short loc_9948
.text:0000000000009986                 jmp     loc_98F0
.text:0000000000009986 ; ---------------------------------------------------------------------------
.text:000000000000998B                 align 10h
.text:0000000000009990
.text:0000000000009990 loc_9990:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000009990                 cmp     esi, 9
.text:0000000000009993                 jz      loc_98F0
.text:0000000000009999                 jg      short loc_99A0
.text:000000000000999B                 cmp     esi, 8
.text:000000000000999E                 jnz     short loc_9948
.text:00000000000099A0
.text:00000000000099A0 loc_99A0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:00000000000099A0                                         ; rpl_fcntl+B9↑j ...
.text:00000000000099A0                 mov     eax, [rsp+68h+var_68]
.text:00000000000099A3                 cmp     eax, 2Fh ; '/'
.text:00000000000099A6                 ja      loc_9A94
.text:00000000000099AC                 add     rax, [rsp+68h+var_58]
.text:00000000000099B1
.text:00000000000099B1 loc_99B1:                               ; CODE XREF: rpl_fcntl+279↓j
.text:00000000000099B1                 mov     edx, [rax]
.text:00000000000099B3                 mov     edi, ebp        ; fd
.text:00000000000099B5                 xor     eax, eax
.text:00000000000099B7                 call    _fcntl
.text:00000000000099BC                 mov     ebx, eax
.text:00000000000099BE                 jmp     loc_9900
.text:00000000000099C3 ; ---------------------------------------------------------------------------
.text:00000000000099C3
.text:00000000000099C3 loc_99C3:                               ; CODE XREF: rpl_fcntl+73↑j
.text:00000000000099C3                 xor     esi, esi        ; cmd
.text:00000000000099C5                 xor     eax, eax
.text:00000000000099C7                 call    _fcntl
.text:00000000000099CC                 test    eax, eax
.text:00000000000099CE                 mov     ebx, eax
.text:00000000000099D0                 js      loc_9900
.text:00000000000099D6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:00000000000099DD                 jnz     loc_9900
.text:00000000000099E3
.text:00000000000099E3 loc_99E3:                               ; CODE XREF: rpl_fcntl+248↓j
.text:00000000000099E3                 xor     eax, eax
.text:00000000000099E5                 mov     esi, 1          ; cmd
.text:00000000000099EA                 mov     edi, ebx        ; fd
.text:00000000000099EC                 call    _fcntl
.text:00000000000099F1                 test    eax, eax
.text:00000000000099F3                 js      short loc_9A11
.text:00000000000099F5                 or      eax, 1
.text:00000000000099F8                 mov     esi, 2          ; cmd
.text:00000000000099FD                 mov     edi, ebx        ; fd
.text:00000000000099FF                 mov     edx, eax
.text:0000000000009A01                 xor     eax, eax
.text:0000000000009A03                 call    _fcntl
.text:0000000000009A08                 cmp     eax, 0FFFFFFFFh
.text:0000000000009A0B                 jnz     loc_9900
.text:0000000000009A11
.text:0000000000009A11 loc_9A11:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000009A11                 call    ___errno_location
.text:0000000000009A16                 mov     r12d, [rax]
.text:0000000000009A19                 mov     rbp, rax
.text:0000000000009A1C                 mov     edi, ebx        ; fd
.text:0000000000009A1E                 call    _close
.text:0000000000009A23                 mov     ebx, 0FFFFFFFFh
.text:0000000000009A28                 mov     [rbp+0], r12d
.text:0000000000009A2C                 jmp     loc_9900
.text:0000000000009A2C ; ---------------------------------------------------------------------------
.text:0000000000009A31                 align 8
.text:0000000000009A38
.text:0000000000009A38 loc_9A38:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000009A38                 call    ___errno_location
.text:0000000000009A3D                 cmp     dword ptr [rax], 16h
.text:0000000000009A40                 jnz     loc_98AF
.text:0000000000009A46                 xor     esi, esi        ; cmd
.text:0000000000009A48                 xor     eax, eax
.text:0000000000009A4A                 mov     edx, r12d
.text:0000000000009A4D                 mov     edi, ebp        ; fd
.text:0000000000009A4F                 call    _fcntl
.text:0000000000009A54                 test    eax, eax
.text:0000000000009A56                 mov     ebx, eax
.text:0000000000009A58                 js      loc_9900
.text:0000000000009A5E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000009A68                 jmp     loc_99E3
.text:0000000000009A6D ; ---------------------------------------------------------------------------
.text:0000000000009A6D
.text:0000000000009A6D loc_9A6D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000009A6D                 call    ___stack_chk_fail
.text:0000000000009A72 ; ---------------------------------------------------------------------------
.text:0000000000009A72
.text:0000000000009A72 loc_9A72:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000009A72                 mov     rax, [rsp+68h+var_58]
.text:0000000000009A77                 xor     esi, esi        ; cmd
.text:0000000000009A79                 mov     edx, [rax+10h]
.text:0000000000009A7C                 xor     eax, eax
.text:0000000000009A7E                 call    _fcntl
.text:0000000000009A83                 mov     ebx, eax
.text:0000000000009A85                 jmp     loc_9900
.text:0000000000009A8A ; ---------------------------------------------------------------------------
.text:0000000000009A8A
.text:0000000000009A8A loc_9A8A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000009A8A                 mov     rax, [rsp+68h+var_60]
.text:0000000000009A8F                 jmp     loc_9959
.text:0000000000009A94 ; ---------------------------------------------------------------------------
.text:0000000000009A94
.text:0000000000009A94 loc_9A94:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000009A94                 mov     rax, [rsp+68h+var_60]
.text:0000000000009A99                 jmp     loc_99B1
.text:0000000000009A99 ; } // starts at 9820
.text:0000000000009A99 rpl_fcntl       endp
.text:0000000000009A99
.text:0000000000009A99 ; ---------------------------------------------------------------------------
.text:0000000000009A9E                 align 20h
.text:0000000000009AA0
.text:0000000000009AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009AA0
.text:0000000000009AA0 ; Attributes: info_from_lumina
.text:0000000000009AA0
.text:0000000000009AA0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000009AA0                 public rpl_fflush
.text:0000000000009AA0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000009AA0 ; __unwind {
.text:0000000000009AA0                 test    rdi, rdi
.text:0000000000009AA3                 push    rbx
.text:0000000000009AA4                 mov     rbx, rdi
.text:0000000000009AA7                 jz      short loc_9ABA
.text:0000000000009AA9                 call    ___freading
.text:0000000000009AAE                 test    eax, eax
.text:0000000000009AB0                 jz      short loc_9ABA
.text:0000000000009AB2                 test    dword ptr [rbx], 100h
.text:0000000000009AB8                 jnz     short loc_9AC8
.text:0000000000009ABA
.text:0000000000009ABA loc_9ABA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000009ABA                                         ; rpl_fflush+10↑j
.text:0000000000009ABA                 mov     rdi, rbx        ; stream
.text:0000000000009ABD                 pop     rbx
.text:0000000000009ABE                 jmp     _fflush
.text:0000000000009ABE ; ---------------------------------------------------------------------------
.text:0000000000009AC3                 align 8
.text:0000000000009AC8
.text:0000000000009AC8 loc_9AC8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000009AC8                 mov     rdi, rbx
.text:0000000000009ACB                 mov     edx, 1
.text:0000000000009AD0                 xor     esi, esi
.text:0000000000009AD2                 call    rpl_fseeko
.text:0000000000009AD7                 mov     rdi, rbx        ; stream
.text:0000000000009ADA                 pop     rbx
.text:0000000000009ADB                 jmp     _fflush
.text:0000000000009ADB ; } // starts at 9AA0
.text:0000000000009ADB rpl_fflush      endp
.text:0000000000009ADB
.text:0000000000009AE0
.text:0000000000009AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009AE0
.text:0000000000009AE0 ; Attributes: info_from_lumina
.text:0000000000009AE0
.text:0000000000009AE0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000009AE0                 public rpl_fseeko
.text:0000000000009AE0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000009AE0 ; __unwind {
.text:0000000000009AE0                 mov     rax, [rdi+8]
.text:0000000000009AE4                 cmp     [rdi+10h], rax
.text:0000000000009AE8                 jz      short loc_9AF0
.text:0000000000009AEA
.text:0000000000009AEA loc_9AEA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000009AEA                                         ; rpl_fseeko+1F↓j
.text:0000000000009AEA                 jmp     _fseeko
.text:0000000000009AEA ; ---------------------------------------------------------------------------
.text:0000000000009AEF                 align 10h
.text:0000000000009AF0
.text:0000000000009AF0 loc_9AF0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000009AF0                 mov     rax, [rdi+20h]
.text:0000000000009AF4                 cmp     [rdi+28h], rax
.text:0000000000009AF8                 jnz     short loc_9AEA
.text:0000000000009AFA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000009AFF                 jnz     short loc_9AEA
.text:0000000000009B01                 push    r12
.text:0000000000009B03                 push    rbp
.text:0000000000009B04                 mov     r12d, edx
.text:0000000000009B07                 push    rbx
.text:0000000000009B08                 mov     rbp, rsi
.text:0000000000009B0B                 mov     rbx, rdi
.text:0000000000009B0E                 call    _fileno
.text:0000000000009B13                 mov     edx, r12d       ; whence
.text:0000000000009B16                 mov     rsi, rbp        ; offset
.text:0000000000009B19                 mov     edi, eax        ; fd
.text:0000000000009B1B                 call    _lseek
.text:0000000000009B20                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009B24                 jz      short loc_9B32
.text:0000000000009B26                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000009B29                 mov     [rbx+90h], rax
.text:0000000000009B30                 xor     eax, eax
.text:0000000000009B32
.text:0000000000009B32 loc_9B32:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000009B32                 pop     rbx
.text:0000000000009B33                 pop     rbp
.text:0000000000009B34                 pop     r12
.text:0000000000009B36                 retn
.text:0000000000009B36 ; } // starts at 9AE0
.text:0000000000009B36 rpl_fseeko      endp
.text:0000000000009B36
.text:0000000000009B36 ; ---------------------------------------------------------------------------
.text:0000000000009B37                 align 20h
.text:0000000000009B40
.text:0000000000009B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B40
.text:0000000000009B40
.text:0000000000009B40                 public dup_safer
.text:0000000000009B40 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000009B40 ; __unwind {
.text:0000000000009B40                 mov     edx, 3
.text:0000000000009B45                 xor     esi, esi
.text:0000000000009B47                 xor     eax, eax
.text:0000000000009B49                 jmp     rpl_fcntl
.text:0000000000009B49 ; } // starts at 9B40
.text:0000000000009B49 dup_safer       endp
.text:0000000000009B49
.text:0000000000009B49 ; ---------------------------------------------------------------------------
.text:0000000000009B4E                 align 10h
.text:0000000000009B50
.text:0000000000009B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B50
.text:0000000000009B50 ; Attributes: info_from_lumina
.text:0000000000009B50
.text:0000000000009B50 ; void _libc_csu_init(void)
.text:0000000000009B50                 public __libc_csu_init
.text:0000000000009B50 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000009B50 ; __unwind {
.text:0000000000009B50                 push    r15
.text:0000000000009B52                 push    r14
.text:0000000000009B54                 mov     r15, rdx
.text:0000000000009B57                 push    r13
.text:0000000000009B59                 push    r12
.text:0000000000009B5B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000009B62                 push    rbp
.text:0000000000009B63                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000009B6A                 push    rbx
.text:0000000000009B6B                 mov     r13d, edi
.text:0000000000009B6E                 mov     r14, rsi
.text:0000000000009B71                 sub     rbp, r12
.text:0000000000009B74                 sub     rsp, 8
.text:0000000000009B78                 sar     rbp, 3
.text:0000000000009B7C                 call    _init_proc
.text:0000000000009B81                 test    rbp, rbp
.text:0000000000009B84                 jz      short loc_9BA6
.text:0000000000009B86                 xor     ebx, ebx
.text:0000000000009B88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009B90
.text:0000000000009B90 loc_9B90:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000009B90                 mov     rdx, r15
.text:0000000000009B93                 mov     rsi, r14
.text:0000000000009B96                 mov     edi, r13d
.text:0000000000009B99                 call    ds:(__frame_dummy_init_array_entry - 20DA30h)[r12+rbx*8]
.text:0000000000009B9D                 add     rbx, 1
.text:0000000000009BA1                 cmp     rbp, rbx
.text:0000000000009BA4                 jnz     short loc_9B90
.text:0000000000009BA6
.text:0000000000009BA6 loc_9BA6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000009BA6                 add     rsp, 8
.text:0000000000009BAA                 pop     rbx
.text:0000000000009BAB                 pop     rbp
.text:0000000000009BAC                 pop     r12
.text:0000000000009BAE                 pop     r13
.text:0000000000009BB0                 pop     r14
.text:0000000000009BB2                 pop     r15
.text:0000000000009BB4                 retn
.text:0000000000009BB4 ; } // starts at 9B50
.text:0000000000009BB4 __libc_csu_init endp
.text:0000000000009BB4
.text:0000000000009BB4 ; ---------------------------------------------------------------------------
.text:0000000000009BB5                 align 20h
.text:0000000000009BC0
.text:0000000000009BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BC0
.text:0000000000009BC0
.text:0000000000009BC0 ; void _libc_csu_fini(void)
.text:0000000000009BC0                 public __libc_csu_fini
.text:0000000000009BC0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000009BC0 ; __unwind {
.text:0000000000009BC0                 rep retn
.text:0000000000009BC0 ; } // starts at 9BC0
.text:0000000000009BC0 __libc_csu_fini endp
.text:0000000000009BC0
.text:0000000000009BC0 ; ---------------------------------------------------------------------------
.text:0000000000009BC2                 align 10h
.text:0000000000009BD0
.text:0000000000009BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BD0
.text:0000000000009BD0
.text:0000000000009BD0 atexit          proc near               ; CODE XREF: main+7E↑p
.text:0000000000009BD0 ; __unwind {
.text:0000000000009BD0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000009BD7                 xor     esi, esi        ; obj
.text:0000000000009BD9                 jmp     ___cxa_atexit
.text:0000000000009BD9 ; } // starts at 9BD0
.text:0000000000009BD9 atexit          endp
.text:0000000000009BD9
.text:0000000000009BD9 _text           ends
.text:0000000000009BD9
LOAD:0000000000009BDE ; ===========================================================================
LOAD:0000000000009BDE
LOAD:0000000000009BDE ; Segment type: Pure code
LOAD:0000000000009BDE ; Segment permissions: Read/Execute
LOAD:0000000000009BDE LOAD            segment byte public 'CODE' use64
LOAD:0000000000009BDE                 assume cs:LOAD
LOAD:0000000000009BDE                 ;org 9BDEh
LOAD:0000000000009BDE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000009BDE                 align 20h
LOAD:0000000000009BDE LOAD            ends
LOAD:0000000000009BDE
.fini:0000000000009BE0 ; ===========================================================================
.fini:0000000000009BE0
.fini:0000000000009BE0 ; Segment type: Pure code
.fini:0000000000009BE0 ; Segment permissions: Read/Execute
.fini:0000000000009BE0 _fini           segment dword public 'CODE' use64
.fini:0000000000009BE0                 assume cs:_fini
.fini:0000000000009BE0                 ;org 9BE0h
.fini:0000000000009BE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000009BE0
.fini:0000000000009BE0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000009BE0
.fini:0000000000009BE0
.fini:0000000000009BE0                 public _term_proc
.fini:0000000000009BE0 _term_proc      proc near
.fini:0000000000009BE0                 sub     rsp, 8          ; _fini
.fini:0000000000009BE4                 add     rsp, 8
.fini:0000000000009BE8                 retn
.fini:0000000000009BE8 _term_proc      endp
.fini:0000000000009BE8
.fini:0000000000009BE8 _fini           ends
.fini:0000000000009BE8
LOAD:0000000000009BE9 ; ===========================================================================
LOAD:0000000000009BE9
LOAD:0000000000009BE9 ; Segment type: Pure code
LOAD:0000000000009BE9 ; Segment permissions: Read/Execute
LOAD:0000000000009BE9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000009BE9                 assume cs:LOAD
LOAD:0000000000009BE9                 ;org 9BE9h
LOAD:0000000000009BE9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000009BE9                 align 20h
LOAD:0000000000009BE9 LOAD            ends
LOAD:0000000000009BE9
.rodata:0000000000009C00 ; ===========================================================================
.rodata:0000000000009C00
.rodata:0000000000009C00 ; Segment type: Pure data
.rodata:0000000000009C00 ; Segment permissions: Read
.rodata:0000000000009C00 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000009C00                 assume cs:_rodata
.rodata:0000000000009C00                 ;org 9C00h
.rodata:0000000000009C00                 public _IO_stdin_used
.rodata:0000000000009C00 _IO_stdin_used  db    1
.rodata:0000000000009C01                 db    0
.rodata:0000000000009C02                 db    2
.rodata:0000000000009C03                 db    0
.rodata:0000000000009C04 aChmod          db 'chmod',0            ; DATA XREF: main+177↑o
.rodata:0000000000009C04                                         ; usage+1A6↑o ...
.rodata:0000000000009C0A asc_9C0A        db '[',0                ; DATA XREF: usage+1B2↑o
.rodata:0000000000009C0C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1D9↑o
.rodata:0000000000009C1C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000009C1C                                         ; DATA XREF: usage+209↑o
.rodata:0000000000009C1C                                         ; usage+304↑o ...
.rodata:0000000000009C32 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+21A↑o
.rodata:0000000000009C3C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+226↑o
.rodata:0000000000009C4B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1B9↑o
.rodata:0000000000009C55 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1E5↑o
.rodata:0000000000009C5F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1FD↑o
.rodata:0000000000009C69 ; const char aSOnlineHelpS[]
.rodata:0000000000009C69 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+272↑o
.rodata:0000000000009C69                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000009C80 unk_9C80        db  47h ; G             ; DATA XREF: main+170↑o
.rodata:0000000000009C80                                         ; usage+28E↑o ...
.rodata:0000000000009C81                 db  4Eh ; N
.rodata:0000000000009C82                 db  55h ; U
.rodata:0000000000009C83                 db  20h
.rodata:0000000000009C84 ; const char domainname[]
.rodata:0000000000009C84 domainname      db 'coreutils',0        ; DATA XREF: main+5F↑o
.rodata:0000000000009C84                                         ; main+6B↑o ...
.rodata:0000000000009C8E ; const char s2[]
.rodata:0000000000009C8E s2              db 'en_',0              ; DATA XREF: usage+2B5↑o
.rodata:0000000000009C8E                                         ; usage+376↑o
.rodata:0000000000009C92 ; const char aFullDocumentat[]
.rodata:0000000000009C92 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000009C92                                         ; DATA XREF: usage:loc_2BC1↑o
.rodata:0000000000009C92                                         ; usage:loc_2C7E↑o
.rodata:0000000000009CAD ; const char dirname[]
.rodata:0000000000009CAD dirname         db '/usr/local/share/locale',0
.rodata:0000000000009CAD                                         ; DATA XREF: main+58↑o
.rodata:0000000000009CC5 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+162↑o
.rodata:0000000000009CD2 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+169↑o
.rodata:0000000000009CE2 ; const char aMissingOperand[]
.rodata:0000000000009CE2 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_2688↑o
.rodata:0000000000009CF2 ; const char aMissingOperand_0[]
.rodata:0000000000009CF2 aMissingOperand_0 db 'missing operand after %s',0
.rodata:0000000000009CF2                                         ; DATA XREF: main+CF2↑o
.rodata:0000000000009D0B ; const char aInvalidModeS[]
.rodata:0000000000009D0B aInvalidModeS   db 'invalid mode: %s',0 ; DATA XREF: main+CB7↑o
.rodata:0000000000009D0B                                         ; main+544↑o ...
.rodata:0000000000009D1C ; const char aFtsReadFailed[]
.rodata:0000000000009D1C aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: main:loc_25B6↑o
.rodata:0000000000009D2C ; const char aCannotAccessS[]
.rodata:0000000000009D2C aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: main+4F6↑o
.rodata:0000000000009D3D aCannotReadDire db 'cannot read directory %s',0
.rodata:0000000000009D3D                                         ; DATA XREF: main+AC3↑o
.rodata:0000000000009D56 ; const char aChangingPermis[]
.rodata:0000000000009D56 aChangingPermis db 'changing permissions of %s',0
.rodata:0000000000009D56                                         ; DATA XREF: main+60E↑o
.rodata:0000000000009D71 ; const char aGettingNewAttr[]
.rodata:0000000000009D71 aGettingNewAttr db 'getting new attributes of %s',0
.rodata:0000000000009D71                                         ; DATA XREF: main+929↑o
.rodata:0000000000009D8E ; const char msgid[]
.rodata:0000000000009D8E msgid           db 'fts_close failed',0 ; DATA XREF: main+3E2↑o
.rodata:0000000000009D9F aChanges        db 'changes',0          ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000009DA7 aRecursive      db 'recursive',0        ; DATA XREF: .data.rel.ro:000000000020DA60↓o
.rodata:0000000000009DB1 aNoPreserveRoot_0 db 'no-preserve-root',0
.rodata:0000000000009DB1                                         ; DATA XREF: .data.rel.ro:000000000020DA80↓o
.rodata:0000000000009DB1                                         ; .data.rel.ro:000000000020DAA0↓o
.rodata:0000000000009DC2 aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:000000000020DAC0↓o
.rodata:0000000000009DC8 aReference      db 'reference',0        ; DATA XREF: .data.rel.ro:000000000020DAE0↓o
.rodata:0000000000009DD2 aSilent         db 'silent',0           ; DATA XREF: .data.rel.ro:000000000020DB00↓o
.rodata:0000000000009DD9 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020DB20↓o
.rodata:0000000000009DE1 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020DB40↓o
.rodata:0000000000009DE6 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020DB60↓o
.rodata:0000000000009DEE                 align 10h
.rodata:0000000000009DF0 ; const char aTrySHelpForMor[]
.rodata:0000000000009DF0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000009DF0                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000009E17                 align 8
.rodata:0000000000009E18 ; const char aUsageSOptionMo[]
.rodata:0000000000009E18 aUsageSOptionMo db 'Usage: %s [OPTION]... MODE[,MODE]... FILE...',0Ah
.rodata:0000000000009E18                                         ; DATA XREF: usage:loc_294D↑o
.rodata:0000000000009E18                 db '  or:  %s [OPTION]... OCTAL-MODE FILE...',0Ah
.rodata:0000000000009E18                 db '  or:  %s [OPTION]... --reference=RFILE FILE...',0Ah,0
.rodata:0000000000009E9F                 align 20h
.rodata:0000000000009EA0 ; const char aChangeTheModeO[]
.rodata:0000000000009EA0 aChangeTheModeO db 'Change the mode of each FILE to MODE.',0Ah
.rodata:0000000000009EA0                                         ; DATA XREF: usage+8A↑o
.rodata:0000000000009EA0                 db 'With --reference, change the mode of each FILE to that of RFILE.',0Ah
.rodata:0000000000009EA0                 db 0Ah,0
.rodata:0000000000009F09                 align 10h
.rodata:0000000000009F10 ; const char aCChangesLikeVe[]
.rodata:0000000000009F10 aCChangesLikeVe db '  -c, --changes          like verbose but report only when a chan'
.rodata:0000000000009F10                                         ; DATA XREF: usage+AF↑o
.rodata:0000000000009F10                 db 'ge is made',0Ah
.rodata:0000000000009F10                 db '  -f, --silent, --quiet  suppress most error messages',0Ah
.rodata:0000000000009F10                 db '  -v, --verbose          output a diagnostic for every file proce'
.rodata:0000000000009F10                 db 'ssed',0Ah,0
.rodata:0000000000009FD9                 align 20h
.rodata:0000000000009FE0 ; const char aNoPreserveRoot[]
.rodata:0000000000009FE0 aNoPreserveRoot db '      --no-preserve-root  do not treat ',27h,'/',27h,' specially '
.rodata:0000000000009FE0                                         ; DATA XREF: usage+D4↑o
.rodata:0000000000009FE0                 db '(the default)',0Ah
.rodata:0000000000009FE0                 db '      --preserve-root    fail to operate recursively on ',27h,'/',27h
.rodata:0000000000009FE0                 db 0Ah,0
.rodata:000000000000A060 ; const char aReferenceRfile[]
.rodata:000000000000A060 aReferenceRfile db '      --reference=RFILE  use RFILE',27h,'s mode instead of MODE v'
.rodata:000000000000A060                                         ; DATA XREF: usage+F9↑o
.rodata:000000000000A060                 db 'alues',0Ah,0
.rodata:000000000000A0A2                 align 8
.rodata:000000000000A0A8 ; const char aRRecursiveChan[]
.rodata:000000000000A0A8 aRRecursiveChan db '  -R, --recursive        change files and directories recursively'
.rodata:000000000000A0A8                                         ; DATA XREF: usage+11E↑o
.rodata:000000000000A0A8                 db 0Ah,0
.rodata:000000000000A0EB                 align 10h
.rodata:000000000000A0F0 ; const char aHelpDisplayThi[]
.rodata:000000000000A0F0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000A0F0                                         ; DATA XREF: usage+143↑o
.rodata:000000000000A11D                 align 20h
.rodata:000000000000A120 ; const char aVersionOutputV[]
.rodata:000000000000A120 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000A120                                         ; DATA XREF: usage+168↑o
.rodata:000000000000A156                 align 8
.rodata:000000000000A158 ; const char aEachModeIsOfTh[]
.rodata:000000000000A158 aEachModeIsOfTh db 0Ah                  ; DATA XREF: usage+18D↑o
.rodata:000000000000A158                 db 'Each MODE is of the form ',27h,'[ugoa]*([-+=]([rwxXst]*|[ugo]))+|'
.rodata:000000000000A158                 db '[-+=][0-7]+',27h,'.',0Ah,0
.rodata:000000000000A1A3                 align 8
.rodata:000000000000A1A8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000A1A8                                         ; DATA XREF: usage+287↑o
.rodata:000000000000A1A8                                         ; usage+2EB↑o ...
.rodata:000000000000A1D0 ; const char aReportAnyTrans[]
.rodata:000000000000A1D0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000A1D0                                         ; DATA XREF: usage+3DF↑o
.rodata:000000000000A1D0                 db 'am/>',0Ah,0
.rodata:000000000000A217                 align 8
.rodata:000000000000A218 ; const char aOrAvailableLoc[]
.rodata:000000000000A218 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000A218                                         ; DATA XREF: usage:loc_2C06↑o
.rodata:000000000000A24B                 align 10h
.rodata:000000000000A250 ; const char shortopts[]
.rodata:000000000000A250 shortopts       db 'Rcfvr::w::x::X::s::t::u::g::o::a::,::+::=::0::1::2::3::4::5::6::7'
.rodata:000000000000A250                                         ; DATA XREF: main+AF↑o
.rodata:000000000000A250                 db '::',0
.rodata:000000000000A294                 align 8
.rodata:000000000000A298 aCannotCombineM db 'cannot combine mode and --reference options',0
.rodata:000000000000A298                                         ; DATA XREF: main+D2A↑o
.rodata:000000000000A2C4                 align 8
.rodata:000000000000A2C8 ; const char aFailedToGetAtt[]
.rodata:000000000000A2C8 aFailedToGetAtt db 'failed to get attributes of %s',0
.rodata:000000000000A2C8                                         ; DATA XREF: main+B6E↑o
.rodata:000000000000A2C8                                         ; main+C83↑o
.rodata:000000000000A2E7                 align 8
.rodata:000000000000A2E8 ; const char aCannotOperateO[]
.rodata:000000000000A2E8 aCannotOperateO db 'cannot operate on dangling symlink %s',0
.rodata:000000000000A2E8                                         ; DATA XREF: main+4A1↑o
.rodata:000000000000A30E                 align 10h
.rodata:000000000000A310 ; const char aWarningCircula[]
.rodata:000000000000A310 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.rodata:000000000000A310                                         ; DATA XREF: main+ADE↑o
.rodata:000000000000A310                 db 'This almost certainly means that you have a corrupted file system'
.rodata:000000000000A310                 db '.',0Ah
.rodata:000000000000A310                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.rodata:000000000000A310                 db 'The following directory is part of the cycle:',0Ah
.rodata:000000000000A310                 db '  %s',0Ah,0
.rodata:000000000000A3CA                 align 10h
.rodata:000000000000A3D0 ; const char aItIsDangerousT[]
.rodata:000000000000A3D0 aItIsDangerousT db 'it is dangerous to operate recursively on %s',0
.rodata:000000000000A3D0                                         ; DATA XREF: main+A1C↑o
.rodata:000000000000A3FD                 align 20h
.rodata:000000000000A400 ; const char aItIsDangerousT_0[]
.rodata:000000000000A400 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s (same as %s)',0
.rodata:000000000000A400                                         ; DATA XREF: main+C3B↑o
.rodata:000000000000A43A                 align 20h
.rodata:000000000000A440 ; const char aUseNoPreserveR[]
.rodata:000000000000A440 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.rodata:000000000000A440                                         ; DATA XREF: main:loc_24E3↑o
.rodata:000000000000A471                 align 8
.rodata:000000000000A478 ; const char aSNewPermission[]
.rodata:000000000000A478 aSNewPermission db '%s: new permissions are %s, not %s',0
.rodata:000000000000A478                                         ; DATA XREF: main+8B9↑o
.rodata:000000000000A49B                 align 20h
.rodata:000000000000A4A0 ; const char aModeOfSChanged[]
.rodata:000000000000A4A0 aModeOfSChanged db 'mode of %s changed from %04lo (%s) to %04lo (%s)',0Ah,0
.rodata:000000000000A4A0                                         ; DATA XREF: main+7C9↑o
.rodata:000000000000A4D2                 align 8
.rodata:000000000000A4D8 ; const char aNeitherSymboli[]
.rodata:000000000000A4D8 aNeitherSymboli db 'neither symbolic link %s nor referent has been changed',0Ah,0
.rodata:000000000000A4D8                                         ; DATA XREF: main+744↑o
.rodata:000000000000A510 ; const char aFailedToChange[]
.rodata:000000000000A510 aFailedToChange db 'failed to change mode of %s from %04lo (%s) to %04lo (%s)',0Ah,0
.rodata:000000000000A510                                         ; DATA XREF: main+6B2↑o
.rodata:000000000000A54B                 align 10h
.rodata:000000000000A550 ; const char aModeOfSRetaine[]
.rodata:000000000000A550 aModeOfSRetaine db 'mode of %s retained as %04lo (%s)',0Ah,0
.rodata:000000000000A550                                         ; DATA XREF: main+985↑o
.rodata:000000000000A573                 align 4
.rodata:000000000000A574 jpt_1E3A        dd offset def_1E3A - 0A574h
.rodata:000000000000A574                                         ; DATA XREF: main+328↑o
.rodata:000000000000A574                                         ; main+393↑r
.rodata:000000000000A574                 dd offset def_1E3A - 0A574h ; jump table for switch statement
.rodata:000000000000A574                 dd offset loc_1FFC - 0A574h
.rodata:000000000000A574                 dd offset def_1E3A - 0A574h
.rodata:000000000000A574                 dd offset loc_1ED9 - 0A574h
.rodata:000000000000A574                 dd offset def_1E3A - 0A574h
.rodata:000000000000A574                 dd offset loc_1E3C - 0A574h
.rodata:000000000000A574                 dd offset loc_1FC4 - 0A574h
.rodata:000000000000A574                 dd offset def_1E3A - 0A574h
.rodata:000000000000A574                 dd offset def_1E3A - 0A574h
.rodata:000000000000A574                 dd offset loc_1F6A - 0A574h
.rodata:000000000000A574                 dd offset def_1E3A - 0A574h
.rodata:000000000000A574                 dd offset def_1E3A - 0A574h
.rodata:000000000000A574                 dd offset loc_1F2B - 0A574h
.rodata:000000000000A5AC a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000A5B1 ; const char aWriteError[]
.rodata:000000000000A5B1 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2D63↑o
.rodata:000000000000A5BD ; const char format[]
.rodata:000000000000A5BD format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000A5C4 jpt_31A4        dd offset loc_31B0 - 0A5C4h
.rodata:000000000000A5C4                                         ; DATA XREF: mode_compile+74↑o
.rodata:000000000000A5C4                                         ; mode_compile+22C↑r
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h ; jump table for switch statement
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset loc_3220 - 0A5C4h
.rodata:000000000000A5C4                 dd offset loc_3210 - 0A5C4h
.rodata:000000000000A5C4                 dd offset loc_3200 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset def_31A4 - 0A5C4h
.rodata:000000000000A5C4                 dd offset loc_31F0 - 0A5C4h
.rodata:000000000000A5C4                 dd offset loc_31E8 - 0A5C4h
.rodata:000000000000A648 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000A648                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000A680 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000A680                                         ; main+9F8↑o ...
.rodata:000000000000A688 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000A68C unk_A68C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000A68D                 db  80h
.rodata:000000000000A68E                 db  98h
.rodata:000000000000A68F                 db    0
.rodata:000000000000A690 unk_A690        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000A691                 db  80h
.rodata:000000000000A692                 db  99h
.rodata:000000000000A693                 db    0
.rodata:000000000000A694 unk_A694        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000A695                 db    7
.rodata:000000000000A696                 db  65h ; e
.rodata:000000000000A697                 db    0
.rodata:000000000000A698 unk_A698        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000A699                 db 0AFh
.rodata:000000000000A69A                 db    0
.rodata:000000000000A69B unk_A69B        db  22h ; "             ; DATA XREF: gettext_quote:loc_35E0↑o
.rodata:000000000000A69B                                         ; quotearg_buffer_restyled:loc_439B↑o ...
.rodata:000000000000A69C                 db    0
.rodata:000000000000A69D ; const char asc_A69D[2]
.rodata:000000000000A69D asc_A69D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000A69D                                         ; quotearg_buffer_restyled:loc_3763↑o ...
.rodata:000000000000A69F ; const char asc_A69F[2]
.rodata:000000000000A69F asc_A69F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000A69F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000A6A1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000A6A9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020DBA8↓o
.rodata:000000000000A6AF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020DBB0↓o
.rodata:000000000000A6BC aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020DBB8↓o
.rodata:000000000000A6BC                                         ; .data.rel.ro:000000000020DBD8↓o
.rodata:000000000000A6C9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000A6C9                                         ; DATA XREF: .data.rel.ro:000000000020DBC0↓o
.rodata:000000000000A6DD aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020DBD0↓o
.rodata:000000000000A6E5 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020DBE8↓o
.rodata:000000000000A6ED                 align 20h
.rodata:000000000000A700 jpt_3741        dd offset loc_44EA - 0A700h
.rodata:000000000000A700                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000A700                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000A700                 dd offset loc_3743 - 0A700h ; jump table for switch statement
.rodata:000000000000A700                 dd offset loc_4718 - 0A700h
.rodata:000000000000A700                 dd offset loc_4524 - 0A700h
.rodata:000000000000A700                 dd offset loc_4314 - 0A700h
.rodata:000000000000A700                 dd offset loc_4370 - 0A700h
.rodata:000000000000A700                 dd offset loc_43C5 - 0A700h
.rodata:000000000000A700                 dd offset loc_440A - 0A700h
.rodata:000000000000A700                 dd offset loc_4444 - 0A700h
.rodata:000000000000A700                 dd offset loc_4444 - 0A700h
.rodata:000000000000A700                 dd offset loc_4444 - 0A700h
.rodata:000000000000A72C jpt_389E        dd offset loc_3AC0 - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000A72C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch ; jump table for switch statement
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset loc_3B00 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3A08 - 0A72Ch, offset loc_39C8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B90 - 0A72Ch, offset loc_3B80 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B70 - 0A72Ch, offset loc_3B60 - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset def_389E - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B50 - 0A72Ch, offset loc_3B40 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3B10 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_39A3 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3B40 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3B40 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3B40 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3973 - 0A72Ch
.rodata:000000000000A72C                 dd offset def_389E - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3B40 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3A18 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_3AE8 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3AE8 - 0A72Ch, offset loc_38A3 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B40 - 0A72Ch, offset loc_38A3 - 0A72Ch
.rodata:000000000000A72C                 dd offset loc_3B10 - 0A72Ch
.rodata:000000000000A928 jpt_3C2A        dd offset loc_3C90 - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000A928                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h ; jump table for switch statement
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset loc_3C80 - 0A928h
.rodata:000000000000A928                 dd offset loc_3DD0 - 0A928h, offset loc_3DB8 - 0A928h
.rodata:000000000000A928                 dd offset loc_3C68 - 0A928h, offset loc_3DA8 - 0A928h
.rodata:000000000000A928                 dd offset loc_3C50 - 0A928h, offset loc_3D90 - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset def_3C2A - 0A928h
.rodata:000000000000A928                 dd offset loc_3D78 - 0A928h, offset loc_3D60 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3D48 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_39A0 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3D60 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D60 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3D60 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3970 - 0A928h
.rodata:000000000000A928                 dd offset def_3C2A - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D60 - 0A928h
.rodata:000000000000A928                 dd offset loc_3C30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_3D30 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D30 - 0A928h, offset loc_38A0 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D60 - 0A928h, offset loc_38A0 - 0A928h
.rodata:000000000000A928                 dd offset loc_3D48 - 0A928h
.rodata:000000000000AB24                 align 20h
.rodata:000000000000AB40                 public quoting_style_vals
.rodata:000000000000AB40 quoting_style_vals db    0
.rodata:000000000000AB41                 db    0
.rodata:000000000000AB42                 db    0
.rodata:000000000000AB43                 db    0
.rodata:000000000000AB44                 db    1
.rodata:000000000000AB45                 db    0
.rodata:000000000000AB46                 db    0
.rodata:000000000000AB47                 db    0
.rodata:000000000000AB48                 db    2
.rodata:000000000000AB49                 db    0
.rodata:000000000000AB4A                 db    0
.rodata:000000000000AB4B                 db    0
.rodata:000000000000AB4C                 db    3
.rodata:000000000000AB4D                 db    0
.rodata:000000000000AB4E                 db    0
.rodata:000000000000AB4F                 db    0
.rodata:000000000000AB50                 db    4
.rodata:000000000000AB51                 db    0
.rodata:000000000000AB52                 db    0
.rodata:000000000000AB53                 db    0
.rodata:000000000000AB54                 db    5
.rodata:000000000000AB55                 db    0
.rodata:000000000000AB56                 db    0
.rodata:000000000000AB57                 db    0
.rodata:000000000000AB58                 db    6
.rodata:000000000000AB59                 db    0
.rodata:000000000000AB5A                 db    0
.rodata:000000000000AB5B                 db    0
.rodata:000000000000AB5C                 db    7
.rodata:000000000000AB5D                 db    0
.rodata:000000000000AB5E                 db    0
.rodata:000000000000AB5F                 db    0
.rodata:000000000000AB60                 db    8
.rodata:000000000000AB61                 db    0
.rodata:000000000000AB62                 db    0
.rodata:000000000000AB63                 db    0
.rodata:000000000000AB64                 db    9
.rodata:000000000000AB65                 db    0
.rodata:000000000000AB66                 db    0
.rodata:000000000000AB67                 db    0
.rodata:000000000000AB68 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000AB74 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000AB7B ; const char aC_0[]
.rodata:000000000000AB7B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_530C↑o
.rodata:000000000000AB7F ; const char aWrittenByS[]
.rodata:000000000000AB7F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000AB7F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000AB8F ; const char aWrittenBySAndS[]
.rodata:000000000000AB8F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000AB8F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000ABA6 ; const char aWrittenBySSAnd[]
.rodata:000000000000ABA6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000ABA6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000ABC2 ; const char aReportBugsToS[]
.rodata:000000000000ABC2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000ABC2                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000ABD7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000ABD7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000ABED ; const char aSHomePageS[]
.rodata:000000000000ABED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000ABED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000AC01                 align 8
.rodata:000000000000AC08 ; const char aLicenseGplv3Gn[]
.rodata:000000000000AC08 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000AC08                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000AC08                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000AC08                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000AC08                 db '.',0Ah
.rodata:000000000000AC08                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000AC08                 db 0Ah,0
.rodata:000000000000ACD4                 align 8
.rodata:000000000000ACD8 ; const char aWrittenBySSSAn[]
.rodata:000000000000ACD8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000ACD8                                         ; DATA XREF: version_etc_arn:loc_5560↑o
.rodata:000000000000ACD8                 db 'and %s.',0Ah,0
.rodata:000000000000ACF8 ; const char aWrittenBySSSSA[]
.rodata:000000000000ACF8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000ACF8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000ACF8                 db '%s, and %s.',0Ah,0
.rodata:000000000000AD1C                 align 20h
.rodata:000000000000AD20 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000AD20 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AD20                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000AD20                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000AD48 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000AD48 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AD48                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000AD48                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000AD74                 align 8
.rodata:000000000000AD78 ; const char aWrittenBySSSSS[]
.rodata:000000000000AD78 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000AD78                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000AD78                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000AD78                 db 'and %s.',0Ah,0
.rodata:000000000000ADA8 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000ADA8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000ADA8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000ADA8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000ADA8                 db '%s, and %s.',0Ah,0
.rodata:000000000000ADDC                 align 20h
.rodata:000000000000ADE0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000ADE0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000ADE0                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000ADE0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000AE1C                 align 20h
.rodata:000000000000AE20 ; const char aGeneralHelpUsi[]
.rodata:000000000000AE20 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000AE20                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000AE20                 db 0
.rodata:000000000000AE61                 align 4
.rodata:000000000000AE64 jpt_5374        dd offset loc_53F6 - 0AE64h
.rodata:000000000000AE64                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000AE64                                         ; version_etc_arn+9D↑r
.rodata:000000000000AE64                 dd offset loc_5488 - 0AE64h ; jump table for switch statement
.rodata:000000000000AE64                 dd offset loc_54C8 - 0AE64h
.rodata:000000000000AE64                 dd offset loc_5510 - 0AE64h
.rodata:000000000000AE64                 dd offset loc_5560 - 0AE64h
.rodata:000000000000AE64                 dd offset loc_55B8 - 0AE64h
.rodata:000000000000AE64                 dd offset loc_55E8 - 0AE64h
.rodata:000000000000AE64                 dd offset loc_5650 - 0AE64h
.rodata:000000000000AE64                 dd offset loc_5380 - 0AE64h
.rodata:000000000000AE64                 dd offset loc_5430 - 0AE64h
.rodata:000000000000AE8C                 align 20h
.rodata:000000000000AEA0                 public version_etc_copyright
.rodata:000000000000AEA0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000AEA0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000AECF ; const char aMemoryExhauste[]
.rodata:000000000000AECF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000AEE0 ; const char file[]
.rodata:000000000000AEE0 file            db '../coreutils-8.31/lib/xfts.c',0
.rodata:000000000000AEE0                                         ; DATA XREF: xfts_open+37↑o
.rodata:000000000000AEFD ; const char assertion[]
.rodata:000000000000AEFD assertion       db 'errno != EINVAL',0  ; DATA XREF: xfts_open+3E↑o
.rodata:000000000000AF0D                 align 10h
.rodata:000000000000AF10 ; const char _PRETTY_FUNCTION___3434[]
.rodata:000000000000AF10 __PRETTY_FUNCTION___3434 db 'xfts_open',0
.rodata:000000000000AF10                                         ; DATA XREF: xfts_open:loc_5BB0↑o
.rodata:000000000000AF1A asc_AF1A        db '..',0               ; DATA XREF: fts_safe_changedir+43↑o
.rodata:000000000000AF1A                                         ; fts_safe_changedir+14F↑o ...
.rodata:000000000000AF1D                 align 20h
.rodata:000000000000AF20 CSWTCH_53       db    0                 ; DATA XREF: fts_build+174↑o
.rodata:000000000000AF20                                         ; fts_build:loc_71B6↑o
.rodata:000000000000AF21                 db  10h
.rodata:000000000000AF22                 db    0
.rodata:000000000000AF23                 db    0
.rodata:000000000000AF24                 db    0
.rodata:000000000000AF25                 db  20h
.rodata:000000000000AF26                 db    0
.rodata:000000000000AF27                 db    0
.rodata:000000000000AF28                 db    0
.rodata:000000000000AF29                 db    0
.rodata:000000000000AF2A                 db    0
.rodata:000000000000AF2B                 db    0
.rodata:000000000000AF2C                 db    0
.rodata:000000000000AF2D                 db  40h ; @
.rodata:000000000000AF2E                 db    0
.rodata:000000000000AF2F                 db    0
.rodata:000000000000AF30                 db    0
.rodata:000000000000AF31                 db    0
.rodata:000000000000AF32                 db    0
.rodata:000000000000AF33                 db    0
.rodata:000000000000AF34                 db    0
.rodata:000000000000AF35                 db  60h ; `
.rodata:000000000000AF36                 db    0
.rodata:000000000000AF37                 db    0
.rodata:000000000000AF38                 db    0
.rodata:000000000000AF39                 db    0
.rodata:000000000000AF3A                 db    0
.rodata:000000000000AF3B                 db    0
.rodata:000000000000AF3C                 db    0
.rodata:000000000000AF3D                 db  80h
.rodata:000000000000AF3E                 db    0
.rodata:000000000000AF3F                 db    0
.rodata:000000000000AF40                 db    0
.rodata:000000000000AF41                 db    0
.rodata:000000000000AF42                 db    0
.rodata:000000000000AF43                 db    0
.rodata:000000000000AF44                 db    0
.rodata:000000000000AF45                 db 0A0h
.rodata:000000000000AF46                 db    0
.rodata:000000000000AF47                 db    0
.rodata:000000000000AF48                 db    0
.rodata:000000000000AF49                 db    0
.rodata:000000000000AF4A                 db    0
.rodata:000000000000AF4B                 db    0
.rodata:000000000000AF4C                 db    0
.rodata:000000000000AF4D                 db 0C0h
.rodata:000000000000AF4E                 db    0
.rodata:000000000000AF4F                 db    0
.rodata:000000000000AF50 ; const char aCoreutils831Li_0[]
.rodata:000000000000AF50 aCoreutils831Li_0 db '../coreutils-8.31/lib/cycle-check.c',0
.rodata:000000000000AF50                                         ; DATA XREF: cycle_check+6E↑o
.rodata:000000000000AF74 ; const char aStateMagic9827[]
.rodata:000000000000AF74 aStateMagic9827 db 'state->magic == 9827862',0
.rodata:000000000000AF74                                         ; DATA XREF: cycle_check+75↑o
.rodata:000000000000AF8C                 align 10h
.rodata:000000000000AF90 ; const char _PRETTY_FUNCTION___3994[]
.rodata:000000000000AF90 __PRETTY_FUNCTION___3994 db 'cycle_check',0
.rodata:000000000000AF90                                         ; DATA XREF: cycle_check:loc_81A7↑o
.rodata:000000000000AF9C aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000AF9E aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_8280↑o
.rodata:000000000000AFA4 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000AFA4                                         ; DATA XREF: hash_print_statistics:loc_87B5↑o
.rodata:000000000000AFBC aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000AFBC                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000AFD4 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000AFD4                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000AFEC                 align 10h
.rodata:000000000000AFF0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000AFF0                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000B011                 align 20h
.rodata:000000000000B020 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000B020                                         ; hash_initialize:loc_8C20↑o
.rodata:000000000000B021                 db    0
.rodata:000000000000B022                 db    0
.rodata:000000000000B023                 db    0
.rodata:000000000000B024                 db    0
.rodata:000000000000B025                 db    0
.rodata:000000000000B026                 db  80h
.rodata:000000000000B027                 db  3Fh ; ?
.rodata:000000000000B028                 db 0CDh
.rodata:000000000000B029                 db 0CCh
.rodata:000000000000B02A                 db  4Ch ; L
.rodata:000000000000B02B                 db  3Fh ; ?
.rodata:000000000000B02C                 db 0F4h
.rodata:000000000000B02D                 db 0FDh
.rodata:000000000000B02E                 db 0B4h
.rodata:000000000000B02F                 db  3Fh ; ?
.rodata:000000000000B030                 db    0
.rodata:000000000000B031                 db    0
.rodata:000000000000B032                 db    0
.rodata:000000000000B033                 db    0
.rodata:000000000000B034 dword_B034      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000B034                                         ; check_tuning+4A↑r
.rodata:000000000000B038 dword_B038      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000B03C dword_B03C      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000B040 dword_B040      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000B044 dword_B044      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000B048 dword_B048      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000B04C dword_B04C      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000B04C                                         ; hash_rehash+40↑r ...
.rodata:000000000000B050 dword_B050      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000B050                                         ; hash_initialize+150↑r ...
.rodata:000000000000B054                 align 8
.rodata:000000000000B058 qword_B058      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000B058                                         ; hash_print_statistics+11F↑r
.rodata:000000000000B060 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000B060                                         ; locale_charset:loc_9660↑o
.rodata:000000000000B060 _rodata         ends
.rodata:000000000000B060
LOAD:000000000000B066 ; ===========================================================================
LOAD:000000000000B066
LOAD:000000000000B066 ; Segment type: Pure code
LOAD:000000000000B066 ; Segment permissions: Read/Execute
LOAD:000000000000B066 LOAD            segment byte public 'CODE' use64
LOAD:000000000000B066                 assume cs:LOAD
LOAD:000000000000B066                 ;org 0B066h
LOAD:000000000000B066                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B066                 align 8
LOAD:000000000000B066 LOAD            ends
LOAD:000000000000B066
.eh_frame_hdr:000000000000B068 ; ===========================================================================
.eh_frame_hdr:000000000000B068
.eh_frame_hdr:000000000000B068 ; Segment type: Pure data
.eh_frame_hdr:000000000000B068 ; Segment permissions: Read
.eh_frame_hdr:000000000000B068 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000B068                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000B068                 ;org 0B068h
.eh_frame_hdr:000000000000B068 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000B069                 db  1Bh
.eh_frame_hdr:000000000000B06A                 db    3
.eh_frame_hdr:000000000000B06B                 db  3Bh ; ;
.eh_frame_hdr:000000000000B06C                 db  84h
.eh_frame_hdr:000000000000B06D                 db    4
.eh_frame_hdr:000000000000B06E                 db    0
.eh_frame_hdr:000000000000B06F                 db    0
.eh_frame_hdr:000000000000B070                 db  8Fh
.eh_frame_hdr:000000000000B071                 db    0
.eh_frame_hdr:000000000000B072                 db    0
.eh_frame_hdr:000000000000B073                 db    0
.eh_frame_hdr:000000000000B074                 db  78h ; x
.eh_frame_hdr:000000000000B075                 db  66h ; f
.eh_frame_hdr:000000000000B076                 db 0FFh
.eh_frame_hdr:000000000000B077                 db 0FFh
.eh_frame_hdr:000000000000B078                 db 0D0h
.eh_frame_hdr:000000000000B079                 db    4
.eh_frame_hdr:000000000000B07A                 db    0
.eh_frame_hdr:000000000000B07B                 db    0
.eh_frame_hdr:000000000000B07C                 db  28h ; (
.eh_frame_hdr:000000000000B07D                 db  6Ah ; j
.eh_frame_hdr:000000000000B07E                 db 0FFh
.eh_frame_hdr:000000000000B07F                 db 0FFh
.eh_frame_hdr:000000000000B080                 db 0F8h
.eh_frame_hdr:000000000000B081                 db    4
.eh_frame_hdr:000000000000B082                 db    0
.eh_frame_hdr:000000000000B083                 db    0
.eh_frame_hdr:000000000000B084                 db  38h ; 8
.eh_frame_hdr:000000000000B085                 db  6Ah ; j
.eh_frame_hdr:000000000000B086                 db 0FFh
.eh_frame_hdr:000000000000B087                 db 0FFh
.eh_frame_hdr:000000000000B088                 db  3Ch ; <
.eh_frame_hdr:000000000000B089                 db    5
.eh_frame_hdr:000000000000B08A                 db    0
.eh_frame_hdr:000000000000B08B                 db    0
.eh_frame_hdr:000000000000B08C                 db  78h ; x
.eh_frame_hdr:000000000000B08D                 db  77h ; w
.eh_frame_hdr:000000000000B08E                 db 0FFh
.eh_frame_hdr:000000000000B08F                 db 0FFh
.eh_frame_hdr:000000000000B090                 db 0A0h
.eh_frame_hdr:000000000000B091                 db    4
.eh_frame_hdr:000000000000B092                 db    0
.eh_frame_hdr:000000000000B093                 db    0
.eh_frame_hdr:000000000000B094                 db  88h
.eh_frame_hdr:000000000000B095                 db  78h ; x
.eh_frame_hdr:000000000000B096                 db 0FFh
.eh_frame_hdr:000000000000B097                 db 0FFh
.eh_frame_hdr:000000000000B098                 db  10h
.eh_frame_hdr:000000000000B099                 db    5
.eh_frame_hdr:000000000000B09A                 db    0
.eh_frame_hdr:000000000000B09B                 db    0
.eh_frame_hdr:000000000000B09C                 db  98h
.eh_frame_hdr:000000000000B09D                 db  7Ch ; |
.eh_frame_hdr:000000000000B09E                 db 0FFh
.eh_frame_hdr:000000000000B09F                 db 0FFh
.eh_frame_hdr:000000000000B0A0                 db 0C0h
.eh_frame_hdr:000000000000B0A1                 db    5
.eh_frame_hdr:000000000000B0A2                 db    0
.eh_frame_hdr:000000000000B0A3                 db    0
.eh_frame_hdr:000000000000B0A4                 db 0A8h
.eh_frame_hdr:000000000000B0A5                 db  7Ch ; |
.eh_frame_hdr:000000000000B0A6                 db 0FFh
.eh_frame_hdr:000000000000B0A7                 db 0FFh
.eh_frame_hdr:000000000000B0A8                 db 0D4h
.eh_frame_hdr:000000000000B0A9                 db    5
.eh_frame_hdr:000000000000B0AA                 db    0
.eh_frame_hdr:000000000000B0AB                 db    0
.eh_frame_hdr:000000000000B0AC                 db 0B8h
.eh_frame_hdr:000000000000B0AD                 db  7Ch ; |
.eh_frame_hdr:000000000000B0AE                 db 0FFh
.eh_frame_hdr:000000000000B0AF                 db 0FFh
.eh_frame_hdr:000000000000B0B0                 db 0E8h
.eh_frame_hdr:000000000000B0B1                 db    5
.eh_frame_hdr:000000000000B0B2                 db    0
.eh_frame_hdr:000000000000B0B3                 db    0
.eh_frame_hdr:000000000000B0B4                 db  68h ; h
.eh_frame_hdr:000000000000B0B5                 db  7Dh ; }
.eh_frame_hdr:000000000000B0B6                 db 0FFh
.eh_frame_hdr:000000000000B0B7                 db 0FFh
.eh_frame_hdr:000000000000B0B8                 db  18h
.eh_frame_hdr:000000000000B0B9                 db    6
.eh_frame_hdr:000000000000B0BA                 db    0
.eh_frame_hdr:000000000000B0BB                 db    0
.eh_frame_hdr:000000000000B0BC                 db 0F8h
.eh_frame_hdr:000000000000B0BD                 db  7Eh ; ~
.eh_frame_hdr:000000000000B0BE                 db 0FFh
.eh_frame_hdr:000000000000B0BF                 db 0FFh
.eh_frame_hdr:000000000000B0C0                 db  2Ch ; ,
.eh_frame_hdr:000000000000B0C1                 db    6
.eh_frame_hdr:000000000000B0C2                 db    0
.eh_frame_hdr:000000000000B0C3                 db    0
.eh_frame_hdr:000000000000B0C4                 db    8
.eh_frame_hdr:000000000000B0C5                 db  7Fh ; 
.eh_frame_hdr:000000000000B0C6                 db 0FFh
.eh_frame_hdr:000000000000B0C7                 db 0FFh
.eh_frame_hdr:000000000000B0C8                 db  40h ; @
.eh_frame_hdr:000000000000B0C9                 db    6
.eh_frame_hdr:000000000000B0CA                 db    0
.eh_frame_hdr:000000000000B0CB                 db    0
.eh_frame_hdr:000000000000B0CC                 db 0B8h
.eh_frame_hdr:000000000000B0CD                 db  82h
.eh_frame_hdr:000000000000B0CE                 db 0FFh
.eh_frame_hdr:000000000000B0CF                 db 0FFh
.eh_frame_hdr:000000000000B0D0                 db  88h
.eh_frame_hdr:000000000000B0D1                 db    6
.eh_frame_hdr:000000000000B0D2                 db    0
.eh_frame_hdr:000000000000B0D3                 db    0
.eh_frame_hdr:000000000000B0D4                 db  48h ; H
.eh_frame_hdr:000000000000B0D5                 db  83h
.eh_frame_hdr:000000000000B0D6                 db 0FFh
.eh_frame_hdr:000000000000B0D7                 db 0FFh
.eh_frame_hdr:000000000000B0D8                 db 0ACh
.eh_frame_hdr:000000000000B0D9                 db    6
.eh_frame_hdr:000000000000B0DA                 db    0
.eh_frame_hdr:000000000000B0DB                 db    0
.eh_frame_hdr:000000000000B0DC                 db 0B8h
.eh_frame_hdr:000000000000B0DD                 db  84h
.eh_frame_hdr:000000000000B0DE                 db 0FFh
.eh_frame_hdr:000000000000B0DF                 db 0FFh
.eh_frame_hdr:000000000000B0E0                 db 0E0h
.eh_frame_hdr:000000000000B0E1                 db    6
.eh_frame_hdr:000000000000B0E2                 db    0
.eh_frame_hdr:000000000000B0E3                 db    0
.eh_frame_hdr:000000000000B0E4                 db  58h ; X
.eh_frame_hdr:000000000000B0E5                 db  85h
.eh_frame_hdr:000000000000B0E6                 db 0FFh
.eh_frame_hdr:000000000000B0E7                 db 0FFh
.eh_frame_hdr:000000000000B0E8                 db    0
.eh_frame_hdr:000000000000B0E9                 db    7
.eh_frame_hdr:000000000000B0EA                 db    0
.eh_frame_hdr:000000000000B0EB                 db    0
.eh_frame_hdr:000000000000B0EC                 db  48h ; H
.eh_frame_hdr:000000000000B0ED                 db  86h
.eh_frame_hdr:000000000000B0EE                 db 0FFh
.eh_frame_hdr:000000000000B0EF                 db 0FFh
.eh_frame_hdr:000000000000B0F0                 db  44h ; D
.eh_frame_hdr:000000000000B0F1                 db    7
.eh_frame_hdr:000000000000B0F2                 db    0
.eh_frame_hdr:000000000000B0F3                 db    0
.eh_frame_hdr:000000000000B0F4                 db  88h
.eh_frame_hdr:000000000000B0F5                 db  98h
.eh_frame_hdr:000000000000B0F6                 db 0FFh
.eh_frame_hdr:000000000000B0F7                 db 0FFh
.eh_frame_hdr:000000000000B0F8                 db 0BCh
.eh_frame_hdr:000000000000B0F9                 db    7
.eh_frame_hdr:000000000000B0FA                 db    0
.eh_frame_hdr:000000000000B0FB                 db    0
.eh_frame_hdr:000000000000B0FC                 db  38h ; 8
.eh_frame_hdr:000000000000B0FD                 db  9Ah
.eh_frame_hdr:000000000000B0FE                 db 0FFh
.eh_frame_hdr:000000000000B0FF                 db 0FFh
.eh_frame_hdr:000000000000B100                 db  28h ; (
.eh_frame_hdr:000000000000B101                 db    8
.eh_frame_hdr:000000000000B102                 db    0
.eh_frame_hdr:000000000000B103                 db    0
.eh_frame_hdr:000000000000B104                 db  78h ; x
.eh_frame_hdr:000000000000B105                 db  9Ah
.eh_frame_hdr:000000000000B106                 db 0FFh
.eh_frame_hdr:000000000000B107                 db 0FFh
.eh_frame_hdr:000000000000B108                 db  54h ; T
.eh_frame_hdr:000000000000B109                 db    8
.eh_frame_hdr:000000000000B10A                 db    0
.eh_frame_hdr:000000000000B10B                 db    0
.eh_frame_hdr:000000000000B10C                 db  98h
.eh_frame_hdr:000000000000B10D                 db  9Ah
.eh_frame_hdr:000000000000B10E                 db 0FFh
.eh_frame_hdr:000000000000B10F                 db 0FFh
.eh_frame_hdr:000000000000B110                 db  68h ; h
.eh_frame_hdr:000000000000B111                 db    8
.eh_frame_hdr:000000000000B112                 db    0
.eh_frame_hdr:000000000000B113                 db    0
.eh_frame_hdr:000000000000B114                 db 0B8h
.eh_frame_hdr:000000000000B115                 db  9Ah
.eh_frame_hdr:000000000000B116                 db 0FFh
.eh_frame_hdr:000000000000B117                 db 0FFh
.eh_frame_hdr:000000000000B118                 db  7Ch ; |
.eh_frame_hdr:000000000000B119                 db    8
.eh_frame_hdr:000000000000B11A                 db    0
.eh_frame_hdr:000000000000B11B                 db    0
.eh_frame_hdr:000000000000B11C                 db 0F8h
.eh_frame_hdr:000000000000B11D                 db  9Ah
.eh_frame_hdr:000000000000B11E                 db 0FFh
.eh_frame_hdr:000000000000B11F                 db 0FFh
.eh_frame_hdr:000000000000B120                 db  90h
.eh_frame_hdr:000000000000B121                 db    8
.eh_frame_hdr:000000000000B122                 db    0
.eh_frame_hdr:000000000000B123                 db    0
.eh_frame_hdr:000000000000B124                 db  18h
.eh_frame_hdr:000000000000B125                 db  9Bh
.eh_frame_hdr:000000000000B126                 db 0FFh
.eh_frame_hdr:000000000000B127                 db 0FFh
.eh_frame_hdr:000000000000B128                 db 0A4h
.eh_frame_hdr:000000000000B129                 db    8
.eh_frame_hdr:000000000000B12A                 db    0
.eh_frame_hdr:000000000000B12B                 db    0
.eh_frame_hdr:000000000000B12C                 db  48h ; H
.eh_frame_hdr:000000000000B12D                 db  9Bh
.eh_frame_hdr:000000000000B12E                 db 0FFh
.eh_frame_hdr:000000000000B12F                 db 0FFh
.eh_frame_hdr:000000000000B130                 db 0B8h
.eh_frame_hdr:000000000000B131                 db    8
.eh_frame_hdr:000000000000B132                 db    0
.eh_frame_hdr:000000000000B133                 db    0
.eh_frame_hdr:000000000000B134                 db 0C8h
.eh_frame_hdr:000000000000B135                 db  9Bh
.eh_frame_hdr:000000000000B136                 db 0FFh
.eh_frame_hdr:000000000000B137                 db 0FFh
.eh_frame_hdr:000000000000B138                 db  0Ch
.eh_frame_hdr:000000000000B139                 db    9
.eh_frame_hdr:000000000000B13A                 db    0
.eh_frame_hdr:000000000000B13B                 db    0
.eh_frame_hdr:000000000000B13C                 db 0B8h
.eh_frame_hdr:000000000000B13D                 db  9Ch
.eh_frame_hdr:000000000000B13E                 db 0FFh
.eh_frame_hdr:000000000000B13F                 db 0FFh
.eh_frame_hdr:000000000000B140                 db  78h ; x
.eh_frame_hdr:000000000000B141                 db    9
.eh_frame_hdr:000000000000B142                 db    0
.eh_frame_hdr:000000000000B143                 db    0
.eh_frame_hdr:000000000000B144                 db 0C8h
.eh_frame_hdr:000000000000B145                 db  9Ch
.eh_frame_hdr:000000000000B146                 db 0FFh
.eh_frame_hdr:000000000000B147                 db 0FFh
.eh_frame_hdr:000000000000B148                 db  8Ch
.eh_frame_hdr:000000000000B149                 db    9
.eh_frame_hdr:000000000000B14A                 db    0
.eh_frame_hdr:000000000000B14B                 db    0
.eh_frame_hdr:000000000000B14C                 db  68h ; h
.eh_frame_hdr:000000000000B14D                 db  9Dh
.eh_frame_hdr:000000000000B14E                 db 0FFh
.eh_frame_hdr:000000000000B14F                 db 0FFh
.eh_frame_hdr:000000000000B150                 db 0B8h
.eh_frame_hdr:000000000000B151                 db    9
.eh_frame_hdr:000000000000B152                 db    0
.eh_frame_hdr:000000000000B153                 db    0
.eh_frame_hdr:000000000000B154                 db  88h
.eh_frame_hdr:000000000000B155                 db  9Dh
.eh_frame_hdr:000000000000B156                 db 0FFh
.eh_frame_hdr:000000000000B157                 db 0FFh
.eh_frame_hdr:000000000000B158                 db 0CCh
.eh_frame_hdr:000000000000B159                 db    9
.eh_frame_hdr:000000000000B15A                 db    0
.eh_frame_hdr:000000000000B15B                 db    0
.eh_frame_hdr:000000000000B15C                 db  98h
.eh_frame_hdr:000000000000B15D                 db  9Dh
.eh_frame_hdr:000000000000B15E                 db 0FFh
.eh_frame_hdr:000000000000B15F                 db 0FFh
.eh_frame_hdr:000000000000B160                 db 0E0h
.eh_frame_hdr:000000000000B161                 db    9
.eh_frame_hdr:000000000000B162                 db    0
.eh_frame_hdr:000000000000B163                 db    0
.eh_frame_hdr:000000000000B164                 db 0B8h
.eh_frame_hdr:000000000000B165                 db  9Dh
.eh_frame_hdr:000000000000B166                 db 0FFh
.eh_frame_hdr:000000000000B167                 db 0FFh
.eh_frame_hdr:000000000000B168                 db 0F4h
.eh_frame_hdr:000000000000B169                 db    9
.eh_frame_hdr:000000000000B16A                 db    0
.eh_frame_hdr:000000000000B16B                 db    0
.eh_frame_hdr:000000000000B16C                 db 0D8h
.eh_frame_hdr:000000000000B16D                 db  9Dh
.eh_frame_hdr:000000000000B16E                 db 0FFh
.eh_frame_hdr:000000000000B16F                 db 0FFh
.eh_frame_hdr:000000000000B170                 db    8
.eh_frame_hdr:000000000000B171                 db  0Ah
.eh_frame_hdr:000000000000B172                 db    0
.eh_frame_hdr:000000000000B173                 db    0
.eh_frame_hdr:000000000000B174                 db  68h ; h
.eh_frame_hdr:000000000000B175                 db  9Eh
.eh_frame_hdr:000000000000B176                 db 0FFh
.eh_frame_hdr:000000000000B177                 db 0FFh
.eh_frame_hdr:000000000000B178                 db  24h ; $
.eh_frame_hdr:000000000000B179                 db  0Ah
.eh_frame_hdr:000000000000B17A                 db    0
.eh_frame_hdr:000000000000B17B                 db    0
.eh_frame_hdr:000000000000B17C                 db 0F8h
.eh_frame_hdr:000000000000B17D                 db  9Eh
.eh_frame_hdr:000000000000B17E                 db 0FFh
.eh_frame_hdr:000000000000B17F                 db 0FFh
.eh_frame_hdr:000000000000B180                 db  40h ; @
.eh_frame_hdr:000000000000B181                 db  0Ah
.eh_frame_hdr:000000000000B182                 db    0
.eh_frame_hdr:000000000000B183                 db    0
.eh_frame_hdr:000000000000B184                 db    8
.eh_frame_hdr:000000000000B185                 db  9Fh
.eh_frame_hdr:000000000000B186                 db 0FFh
.eh_frame_hdr:000000000000B187                 db 0FFh
.eh_frame_hdr:000000000000B188                 db  54h ; T
.eh_frame_hdr:000000000000B189                 db  0Ah
.eh_frame_hdr:000000000000B18A                 db    0
.eh_frame_hdr:000000000000B18B                 db    0
.eh_frame_hdr:000000000000B18C                 db  18h
.eh_frame_hdr:000000000000B18D                 db  9Fh
.eh_frame_hdr:000000000000B18E                 db 0FFh
.eh_frame_hdr:000000000000B18F                 db 0FFh
.eh_frame_hdr:000000000000B190                 db  68h ; h
.eh_frame_hdr:000000000000B191                 db  0Ah
.eh_frame_hdr:000000000000B192                 db    0
.eh_frame_hdr:000000000000B193                 db    0
.eh_frame_hdr:000000000000B194                 db 0B8h
.eh_frame_hdr:000000000000B195                 db  9Fh
.eh_frame_hdr:000000000000B196                 db 0FFh
.eh_frame_hdr:000000000000B197                 db 0FFh
.eh_frame_hdr:000000000000B198                 db  84h
.eh_frame_hdr:000000000000B199                 db  0Ah
.eh_frame_hdr:000000000000B19A                 db    0
.eh_frame_hdr:000000000000B19B                 db    0
.eh_frame_hdr:000000000000B19C                 db 0C8h
.eh_frame_hdr:000000000000B19D                 db  9Fh
.eh_frame_hdr:000000000000B19E                 db 0FFh
.eh_frame_hdr:000000000000B19F                 db 0FFh
.eh_frame_hdr:000000000000B1A0                 db  98h
.eh_frame_hdr:000000000000B1A1                 db  0Ah
.eh_frame_hdr:000000000000B1A2                 db    0
.eh_frame_hdr:000000000000B1A3                 db    0
.eh_frame_hdr:000000000000B1A4                 db 0E8h
.eh_frame_hdr:000000000000B1A5                 db  9Fh
.eh_frame_hdr:000000000000B1A6                 db 0FFh
.eh_frame_hdr:000000000000B1A7                 db 0FFh
.eh_frame_hdr:000000000000B1A8                 db 0ACh
.eh_frame_hdr:000000000000B1A9                 db  0Ah
.eh_frame_hdr:000000000000B1AA                 db    0
.eh_frame_hdr:000000000000B1AB                 db    0
.eh_frame_hdr:000000000000B1AC                 db 0F8h
.eh_frame_hdr:000000000000B1AD                 db  9Fh
.eh_frame_hdr:000000000000B1AE                 db 0FFh
.eh_frame_hdr:000000000000B1AF                 db 0FFh
.eh_frame_hdr:000000000000B1B0                 db 0C0h
.eh_frame_hdr:000000000000B1B1                 db  0Ah
.eh_frame_hdr:000000000000B1B2                 db    0
.eh_frame_hdr:000000000000B1B3                 db    0
.eh_frame_hdr:000000000000B1B4                 db  88h
.eh_frame_hdr:000000000000B1B5                 db 0A0h
.eh_frame_hdr:000000000000B1B6                 db 0FFh
.eh_frame_hdr:000000000000B1B7                 db 0FFh
.eh_frame_hdr:000000000000B1B8                 db 0DCh
.eh_frame_hdr:000000000000B1B9                 db  0Ah
.eh_frame_hdr:000000000000B1BA                 db    0
.eh_frame_hdr:000000000000B1BB                 db    0
.eh_frame_hdr:000000000000B1BC                 db  28h ; (
.eh_frame_hdr:000000000000B1BD                 db 0A1h
.eh_frame_hdr:000000000000B1BE                 db 0FFh
.eh_frame_hdr:000000000000B1BF                 db 0FFh
.eh_frame_hdr:000000000000B1C0                 db 0F8h
.eh_frame_hdr:000000000000B1C1                 db  0Ah
.eh_frame_hdr:000000000000B1C2                 db    0
.eh_frame_hdr:000000000000B1C3                 db    0
.eh_frame_hdr:000000000000B1C4                 db  38h ; 8
.eh_frame_hdr:000000000000B1C5                 db 0A1h
.eh_frame_hdr:000000000000B1C6                 db 0FFh
.eh_frame_hdr:000000000000B1C7                 db 0FFh
.eh_frame_hdr:000000000000B1C8                 db  0Ch
.eh_frame_hdr:000000000000B1C9                 db  0Bh
.eh_frame_hdr:000000000000B1CA                 db    0
.eh_frame_hdr:000000000000B1CB                 db    0
.eh_frame_hdr:000000000000B1CC                 db  58h ; X
.eh_frame_hdr:000000000000B1CD                 db 0A1h
.eh_frame_hdr:000000000000B1CE                 db 0FFh
.eh_frame_hdr:000000000000B1CF                 db 0FFh
.eh_frame_hdr:000000000000B1D0                 db  20h
.eh_frame_hdr:000000000000B1D1                 db  0Bh
.eh_frame_hdr:000000000000B1D2                 db    0
.eh_frame_hdr:000000000000B1D3                 db    0
.eh_frame_hdr:000000000000B1D4                 db  78h ; x
.eh_frame_hdr:000000000000B1D5                 db 0A1h
.eh_frame_hdr:000000000000B1D6                 db 0FFh
.eh_frame_hdr:000000000000B1D7                 db 0FFh
.eh_frame_hdr:000000000000B1D8                 db  34h ; 4
.eh_frame_hdr:000000000000B1D9                 db  0Bh
.eh_frame_hdr:000000000000B1DA                 db    0
.eh_frame_hdr:000000000000B1DB                 db    0
.eh_frame_hdr:000000000000B1DC                 db  88h
.eh_frame_hdr:000000000000B1DD                 db 0A1h
.eh_frame_hdr:000000000000B1DE                 db 0FFh
.eh_frame_hdr:000000000000B1DF                 db 0FFh
.eh_frame_hdr:000000000000B1E0                 db  48h ; H
.eh_frame_hdr:000000000000B1E1                 db  0Bh
.eh_frame_hdr:000000000000B1E2                 db    0
.eh_frame_hdr:000000000000B1E3                 db    0
.eh_frame_hdr:000000000000B1E4                 db 0A8h
.eh_frame_hdr:000000000000B1E5                 db 0A1h
.eh_frame_hdr:000000000000B1E6                 db 0FFh
.eh_frame_hdr:000000000000B1E7                 db 0FFh
.eh_frame_hdr:000000000000B1E8                 db  5Ch ; \
.eh_frame_hdr:000000000000B1E9                 db  0Bh
.eh_frame_hdr:000000000000B1EA                 db    0
.eh_frame_hdr:000000000000B1EB                 db    0
.eh_frame_hdr:000000000000B1EC                 db 0C8h
.eh_frame_hdr:000000000000B1ED                 db 0A1h
.eh_frame_hdr:000000000000B1EE                 db 0FFh
.eh_frame_hdr:000000000000B1EF                 db 0FFh
.eh_frame_hdr:000000000000B1F0                 db  70h ; p
.eh_frame_hdr:000000000000B1F1                 db  0Bh
.eh_frame_hdr:000000000000B1F2                 db    0
.eh_frame_hdr:000000000000B1F3                 db    0
.eh_frame_hdr:000000000000B1F4                 db 0E8h
.eh_frame_hdr:000000000000B1F5                 db 0A1h
.eh_frame_hdr:000000000000B1F6                 db 0FFh
.eh_frame_hdr:000000000000B1F7                 db 0FFh
.eh_frame_hdr:000000000000B1F8                 db  88h
.eh_frame_hdr:000000000000B1F9                 db  0Bh
.eh_frame_hdr:000000000000B1FA                 db    0
.eh_frame_hdr:000000000000B1FB                 db    0
.eh_frame_hdr:000000000000B1FC                 db  68h ; h
.eh_frame_hdr:000000000000B1FD                 db 0A2h
.eh_frame_hdr:000000000000B1FE                 db 0FFh
.eh_frame_hdr:000000000000B1FF                 db 0FFh
.eh_frame_hdr:000000000000B200                 db 0B0h
.eh_frame_hdr:000000000000B201                 db  0Bh
.eh_frame_hdr:000000000000B202                 db    0
.eh_frame_hdr:000000000000B203                 db    0
.eh_frame_hdr:000000000000B204                 db  88h
.eh_frame_hdr:000000000000B205                 db 0A6h
.eh_frame_hdr:000000000000B206                 db 0FFh
.eh_frame_hdr:000000000000B207                 db 0FFh
.eh_frame_hdr:000000000000B208                 db 0C4h
.eh_frame_hdr:000000000000B209                 db  0Ch
.eh_frame_hdr:000000000000B20A                 db    0
.eh_frame_hdr:000000000000B20B                 db    0
.eh_frame_hdr:000000000000B20C                 db 0A8h
.eh_frame_hdr:000000000000B20D                 db 0A6h
.eh_frame_hdr:000000000000B20E                 db 0FFh
.eh_frame_hdr:000000000000B20F                 db 0FFh
.eh_frame_hdr:000000000000B210                 db 0D8h
.eh_frame_hdr:000000000000B211                 db  0Ch
.eh_frame_hdr:000000000000B212                 db    0
.eh_frame_hdr:000000000000B213                 db    0
.eh_frame_hdr:000000000000B214                 db  28h ; (
.eh_frame_hdr:000000000000B215                 db 0A7h
.eh_frame_hdr:000000000000B216                 db 0FFh
.eh_frame_hdr:000000000000B217                 db 0FFh
.eh_frame_hdr:000000000000B218                 db 0F4h
.eh_frame_hdr:000000000000B219                 db  0Ch
.eh_frame_hdr:000000000000B21A                 db    0
.eh_frame_hdr:000000000000B21B                 db    0
.eh_frame_hdr:000000000000B21C                 db    8
.eh_frame_hdr:000000000000B21D                 db 0A8h
.eh_frame_hdr:000000000000B21E                 db 0FFh
.eh_frame_hdr:000000000000B21F                 db 0FFh
.eh_frame_hdr:000000000000B220                 db  20h
.eh_frame_hdr:000000000000B221                 db  0Dh
.eh_frame_hdr:000000000000B222                 db    0
.eh_frame_hdr:000000000000B223                 db    0
.eh_frame_hdr:000000000000B224                 db  88h
.eh_frame_hdr:000000000000B225                 db 0A8h
.eh_frame_hdr:000000000000B226                 db 0FFh
.eh_frame_hdr:000000000000B227                 db 0FFh
.eh_frame_hdr:000000000000B228                 db  40h ; @
.eh_frame_hdr:000000000000B229                 db  0Dh
.eh_frame_hdr:000000000000B22A                 db    0
.eh_frame_hdr:000000000000B22B                 db    0
.eh_frame_hdr:000000000000B22C                 db 0A8h
.eh_frame_hdr:000000000000B22D                 db 0A8h
.eh_frame_hdr:000000000000B22E                 db 0FFh
.eh_frame_hdr:000000000000B22F                 db 0FFh
.eh_frame_hdr:000000000000B230                 db  5Ch ; \
.eh_frame_hdr:000000000000B231                 db  0Dh
.eh_frame_hdr:000000000000B232                 db    0
.eh_frame_hdr:000000000000B233                 db    0
.eh_frame_hdr:000000000000B234                 db 0D8h
.eh_frame_hdr:000000000000B235                 db 0A8h
.eh_frame_hdr:000000000000B236                 db 0FFh
.eh_frame_hdr:000000000000B237                 db 0FFh
.eh_frame_hdr:000000000000B238                 db  70h ; p
.eh_frame_hdr:000000000000B239                 db  0Dh
.eh_frame_hdr:000000000000B23A                 db    0
.eh_frame_hdr:000000000000B23B                 db    0
.eh_frame_hdr:000000000000B23C                 db 0E8h
.eh_frame_hdr:000000000000B23D                 db 0A8h
.eh_frame_hdr:000000000000B23E                 db 0FFh
.eh_frame_hdr:000000000000B23F                 db 0FFh
.eh_frame_hdr:000000000000B240                 db  84h
.eh_frame_hdr:000000000000B241                 db  0Dh
.eh_frame_hdr:000000000000B242                 db    0
.eh_frame_hdr:000000000000B243                 db    0
.eh_frame_hdr:000000000000B244                 db  28h ; (
.eh_frame_hdr:000000000000B245                 db 0A9h
.eh_frame_hdr:000000000000B246                 db 0FFh
.eh_frame_hdr:000000000000B247                 db 0FFh
.eh_frame_hdr:000000000000B248                 db 0A8h
.eh_frame_hdr:000000000000B249                 db  0Dh
.eh_frame_hdr:000000000000B24A                 db    0
.eh_frame_hdr:000000000000B24B                 db    0
.eh_frame_hdr:000000000000B24C                 db  58h ; X
.eh_frame_hdr:000000000000B24D                 db 0A9h
.eh_frame_hdr:000000000000B24E                 db 0FFh
.eh_frame_hdr:000000000000B24F                 db 0FFh
.eh_frame_hdr:000000000000B250                 db 0BCh
.eh_frame_hdr:000000000000B251                 db  0Dh
.eh_frame_hdr:000000000000B252                 db    0
.eh_frame_hdr:000000000000B253                 db    0
.eh_frame_hdr:000000000000B254                 db 0E8h
.eh_frame_hdr:000000000000B255                 db 0A9h
.eh_frame_hdr:000000000000B256                 db 0FFh
.eh_frame_hdr:000000000000B257                 db 0FFh
.eh_frame_hdr:000000000000B258                 db 0D4h
.eh_frame_hdr:000000000000B259                 db  0Dh
.eh_frame_hdr:000000000000B25A                 db    0
.eh_frame_hdr:000000000000B25B                 db    0
.eh_frame_hdr:000000000000B25C                 db  38h ; 8
.eh_frame_hdr:000000000000B25D                 db 0AAh
.eh_frame_hdr:000000000000B25E                 db 0FFh
.eh_frame_hdr:000000000000B25F                 db 0FFh
.eh_frame_hdr:000000000000B260                 db 0ECh
.eh_frame_hdr:000000000000B261                 db  0Dh
.eh_frame_hdr:000000000000B262                 db    0
.eh_frame_hdr:000000000000B263                 db    0
.eh_frame_hdr:000000000000B264                 db  58h ; X
.eh_frame_hdr:000000000000B265                 db 0AAh
.eh_frame_hdr:000000000000B266                 db 0FFh
.eh_frame_hdr:000000000000B267                 db 0FFh
.eh_frame_hdr:000000000000B268                 db    8
.eh_frame_hdr:000000000000B269                 db  0Eh
.eh_frame_hdr:000000000000B26A                 db    0
.eh_frame_hdr:000000000000B26B                 db    0
.eh_frame_hdr:000000000000B26C                 db  88h
.eh_frame_hdr:000000000000B26D                 db 0AAh
.eh_frame_hdr:000000000000B26E                 db 0FFh
.eh_frame_hdr:000000000000B26F                 db 0FFh
.eh_frame_hdr:000000000000B270                 db  24h ; $
.eh_frame_hdr:000000000000B271                 db  0Eh
.eh_frame_hdr:000000000000B272                 db    0
.eh_frame_hdr:000000000000B273                 db    0
.eh_frame_hdr:000000000000B274                 db 0B8h
.eh_frame_hdr:000000000000B275                 db 0AAh
.eh_frame_hdr:000000000000B276                 db 0FFh
.eh_frame_hdr:000000000000B277                 db 0FFh
.eh_frame_hdr:000000000000B278                 db  4Ch ; L
.eh_frame_hdr:000000000000B279                 db  0Eh
.eh_frame_hdr:000000000000B27A                 db    0
.eh_frame_hdr:000000000000B27B                 db    0
.eh_frame_hdr:000000000000B27C                 db 0D8h
.eh_frame_hdr:000000000000B27D                 db 0AAh
.eh_frame_hdr:000000000000B27E                 db 0FFh
.eh_frame_hdr:000000000000B27F                 db 0FFh
.eh_frame_hdr:000000000000B280                 db  68h ; h
.eh_frame_hdr:000000000000B281                 db  0Eh
.eh_frame_hdr:000000000000B282                 db    0
.eh_frame_hdr:000000000000B283                 db    0
.eh_frame_hdr:000000000000B284                 db  18h
.eh_frame_hdr:000000000000B285                 db 0ABh
.eh_frame_hdr:000000000000B286                 db 0FFh
.eh_frame_hdr:000000000000B287                 db 0FFh
.eh_frame_hdr:000000000000B288                 db  80h
.eh_frame_hdr:000000000000B289                 db  0Eh
.eh_frame_hdr:000000000000B28A                 db    0
.eh_frame_hdr:000000000000B28B                 db    0
.eh_frame_hdr:000000000000B28C                 db  68h ; h
.eh_frame_hdr:000000000000B28D                 db 0ABh
.eh_frame_hdr:000000000000B28E                 db 0FFh
.eh_frame_hdr:000000000000B28F                 db 0FFh
.eh_frame_hdr:000000000000B290                 db  9Ch
.eh_frame_hdr:000000000000B291                 db  0Eh
.eh_frame_hdr:000000000000B292                 db    0
.eh_frame_hdr:000000000000B293                 db    0
.eh_frame_hdr:000000000000B294                 db  98h
.eh_frame_hdr:000000000000B295                 db 0ABh
.eh_frame_hdr:000000000000B296                 db 0FFh
.eh_frame_hdr:000000000000B297                 db 0FFh
.eh_frame_hdr:000000000000B298                 db 0B0h
.eh_frame_hdr:000000000000B299                 db  0Eh
.eh_frame_hdr:000000000000B29A                 db    0
.eh_frame_hdr:000000000000B29B                 db    0
.eh_frame_hdr:000000000000B29C                 db 0B8h
.eh_frame_hdr:000000000000B29D                 db 0ABh
.eh_frame_hdr:000000000000B29E                 db 0FFh
.eh_frame_hdr:000000000000B29F                 db 0FFh
.eh_frame_hdr:000000000000B2A0                 db 0C4h
.eh_frame_hdr:000000000000B2A1                 db  0Eh
.eh_frame_hdr:000000000000B2A2                 db    0
.eh_frame_hdr:000000000000B2A3                 db    0
.eh_frame_hdr:000000000000B2A4                 db 0C8h
.eh_frame_hdr:000000000000B2A5                 db 0ABh
.eh_frame_hdr:000000000000B2A6                 db 0FFh
.eh_frame_hdr:000000000000B2A7                 db 0FFh
.eh_frame_hdr:000000000000B2A8                 db 0D8h
.eh_frame_hdr:000000000000B2A9                 db  0Eh
.eh_frame_hdr:000000000000B2AA                 db    0
.eh_frame_hdr:000000000000B2AB                 db    0
.eh_frame_hdr:000000000000B2AC                 db 0D8h
.eh_frame_hdr:000000000000B2AD                 db 0ABh
.eh_frame_hdr:000000000000B2AE                 db 0FFh
.eh_frame_hdr:000000000000B2AF                 db 0FFh
.eh_frame_hdr:000000000000B2B0                 db 0ECh
.eh_frame_hdr:000000000000B2B1                 db  0Eh
.eh_frame_hdr:000000000000B2B2                 db    0
.eh_frame_hdr:000000000000B2B3                 db    0
.eh_frame_hdr:000000000000B2B4                 db 0E8h
.eh_frame_hdr:000000000000B2B5                 db 0ABh
.eh_frame_hdr:000000000000B2B6                 db 0FFh
.eh_frame_hdr:000000000000B2B7                 db 0FFh
.eh_frame_hdr:000000000000B2B8                 db    0
.eh_frame_hdr:000000000000B2B9                 db  0Fh
.eh_frame_hdr:000000000000B2BA                 db    0
.eh_frame_hdr:000000000000B2BB                 db    0
.eh_frame_hdr:000000000000B2BC                 db  18h
.eh_frame_hdr:000000000000B2BD                 db 0ACh
.eh_frame_hdr:000000000000B2BE                 db 0FFh
.eh_frame_hdr:000000000000B2BF                 db 0FFh
.eh_frame_hdr:000000000000B2C0                 db  14h
.eh_frame_hdr:000000000000B2C1                 db  0Fh
.eh_frame_hdr:000000000000B2C2                 db    0
.eh_frame_hdr:000000000000B2C3                 db    0
.eh_frame_hdr:000000000000B2C4                 db 0E8h
.eh_frame_hdr:000000000000B2C5                 db 0ADh
.eh_frame_hdr:000000000000B2C6                 db 0FFh
.eh_frame_hdr:000000000000B2C7                 db 0FFh
.eh_frame_hdr:000000000000B2C8                 db  50h ; P
.eh_frame_hdr:000000000000B2C9                 db  0Fh
.eh_frame_hdr:000000000000B2CA                 db    0
.eh_frame_hdr:000000000000B2CB                 db    0
.eh_frame_hdr:000000000000B2CC                 db 0F8h
.eh_frame_hdr:000000000000B2CD                 db 0AEh
.eh_frame_hdr:000000000000B2CE                 db 0FFh
.eh_frame_hdr:000000000000B2CF                 db 0FFh
.eh_frame_hdr:000000000000B2D0                 db 0A0h
.eh_frame_hdr:000000000000B2D1                 db  0Fh
.eh_frame_hdr:000000000000B2D2                 db    0
.eh_frame_hdr:000000000000B2D3                 db    0
.eh_frame_hdr:000000000000B2D4                 db  88h
.eh_frame_hdr:000000000000B2D5                 db 0AFh
.eh_frame_hdr:000000000000B2D6                 db 0FFh
.eh_frame_hdr:000000000000B2D7                 db 0FFh
.eh_frame_hdr:000000000000B2D8                 db 0D8h
.eh_frame_hdr:000000000000B2D9                 db  0Fh
.eh_frame_hdr:000000000000B2DA                 db    0
.eh_frame_hdr:000000000000B2DB                 db    0
.eh_frame_hdr:000000000000B2DC                 db 0D8h
.eh_frame_hdr:000000000000B2DD                 db 0AFh
.eh_frame_hdr:000000000000B2DE                 db 0FFh
.eh_frame_hdr:000000000000B2DF                 db 0FFh
.eh_frame_hdr:000000000000B2E0                 db    4
.eh_frame_hdr:000000000000B2E1                 db  10h
.eh_frame_hdr:000000000000B2E2                 db    0
.eh_frame_hdr:000000000000B2E3                 db    0
.eh_frame_hdr:000000000000B2E4                 db  18h
.eh_frame_hdr:000000000000B2E5                 db 0B0h
.eh_frame_hdr:000000000000B2E6                 db 0FFh
.eh_frame_hdr:000000000000B2E7                 db 0FFh
.eh_frame_hdr:000000000000B2E8                 db  20h
.eh_frame_hdr:000000000000B2E9                 db  10h
.eh_frame_hdr:000000000000B2EA                 db    0
.eh_frame_hdr:000000000000B2EB                 db    0
.eh_frame_hdr:000000000000B2EC                 db  48h ; H
.eh_frame_hdr:000000000000B2ED                 db 0B1h
.eh_frame_hdr:000000000000B2EE                 db 0FFh
.eh_frame_hdr:000000000000B2EF                 db 0FFh
.eh_frame_hdr:000000000000B2F0                 db  5Ch ; \
.eh_frame_hdr:000000000000B2F1                 db  10h
.eh_frame_hdr:000000000000B2F2                 db    0
.eh_frame_hdr:000000000000B2F3                 db    0
.eh_frame_hdr:000000000000B2F4                 db 0B8h
.eh_frame_hdr:000000000000B2F5                 db 0B1h
.eh_frame_hdr:000000000000B2F6                 db 0FFh
.eh_frame_hdr:000000000000B2F7                 db 0FFh
.eh_frame_hdr:000000000000B2F8                 db  80h
.eh_frame_hdr:000000000000B2F9                 db  10h
.eh_frame_hdr:000000000000B2FA                 db    0
.eh_frame_hdr:000000000000B2FB                 db    0
.eh_frame_hdr:000000000000B2FC                 db  28h ; (
.eh_frame_hdr:000000000000B2FD                 db 0B2h
.eh_frame_hdr:000000000000B2FE                 db 0FFh
.eh_frame_hdr:000000000000B2FF                 db 0FFh
.eh_frame_hdr:000000000000B300                 db 0C4h
.eh_frame_hdr:000000000000B301                 db  10h
.eh_frame_hdr:000000000000B302                 db    0
.eh_frame_hdr:000000000000B303                 db    0
.eh_frame_hdr:000000000000B304                 db  88h
.eh_frame_hdr:000000000000B305                 db 0B2h
.eh_frame_hdr:000000000000B306                 db 0FFh
.eh_frame_hdr:000000000000B307                 db 0FFh
.eh_frame_hdr:000000000000B308                 db 0F0h
.eh_frame_hdr:000000000000B309                 db  10h
.eh_frame_hdr:000000000000B30A                 db    0
.eh_frame_hdr:000000000000B30B                 db    0
.eh_frame_hdr:000000000000B30C                 db 0F8h
.eh_frame_hdr:000000000000B30D                 db 0B2h
.eh_frame_hdr:000000000000B30E                 db 0FFh
.eh_frame_hdr:000000000000B30F                 db 0FFh
.eh_frame_hdr:000000000000B310                 db  18h
.eh_frame_hdr:000000000000B311                 db  11h
.eh_frame_hdr:000000000000B312                 db    0
.eh_frame_hdr:000000000000B313                 db    0
.eh_frame_hdr:000000000000B314                 db  68h ; h
.eh_frame_hdr:000000000000B315                 db 0B3h
.eh_frame_hdr:000000000000B316                 db 0FFh
.eh_frame_hdr:000000000000B317                 db 0FFh
.eh_frame_hdr:000000000000B318                 db  38h ; 8
.eh_frame_hdr:000000000000B319                 db  11h
.eh_frame_hdr:000000000000B31A                 db    0
.eh_frame_hdr:000000000000B31B                 db    0
.eh_frame_hdr:000000000000B31C                 db 0A8h
.eh_frame_hdr:000000000000B31D                 db 0B3h
.eh_frame_hdr:000000000000B31E                 db 0FFh
.eh_frame_hdr:000000000000B31F                 db 0FFh
.eh_frame_hdr:000000000000B320                 db  4Ch ; L
.eh_frame_hdr:000000000000B321                 db  11h
.eh_frame_hdr:000000000000B322                 db    0
.eh_frame_hdr:000000000000B323                 db    0
.eh_frame_hdr:000000000000B324                 db  28h ; (
.eh_frame_hdr:000000000000B325                 db 0B6h
.eh_frame_hdr:000000000000B326                 db 0FFh
.eh_frame_hdr:000000000000B327                 db 0FFh
.eh_frame_hdr:000000000000B328                 db  9Ch
.eh_frame_hdr:000000000000B329                 db  11h
.eh_frame_hdr:000000000000B32A                 db    0
.eh_frame_hdr:000000000000B32B                 db    0
.eh_frame_hdr:000000000000B32C                 db 0D8h
.eh_frame_hdr:000000000000B32D                 db 0B6h
.eh_frame_hdr:000000000000B32E                 db 0FFh
.eh_frame_hdr:000000000000B32F                 db 0FFh
.eh_frame_hdr:000000000000B330                 db 0E0h
.eh_frame_hdr:000000000000B331                 db  11h
.eh_frame_hdr:000000000000B332                 db    0
.eh_frame_hdr:000000000000B333                 db    0
.eh_frame_hdr:000000000000B334                 db  98h
.eh_frame_hdr:000000000000B335                 db 0B7h
.eh_frame_hdr:000000000000B336                 db 0FFh
.eh_frame_hdr:000000000000B337                 db 0FFh
.eh_frame_hdr:000000000000B338                 db 0FCh
.eh_frame_hdr:000000000000B339                 db  11h
.eh_frame_hdr:000000000000B33A                 db    0
.eh_frame_hdr:000000000000B33B                 db    0
.eh_frame_hdr:000000000000B33C                 db  78h ; x
.eh_frame_hdr:000000000000B33D                 db 0C1h
.eh_frame_hdr:000000000000B33E                 db 0FFh
.eh_frame_hdr:000000000000B33F                 db 0FFh
.eh_frame_hdr:000000000000B340                 db  4Ch ; L
.eh_frame_hdr:000000000000B341                 db  12h
.eh_frame_hdr:000000000000B342                 db    0
.eh_frame_hdr:000000000000B343                 db    0
.eh_frame_hdr:000000000000B344                 db  28h ; (
.eh_frame_hdr:000000000000B345                 db 0C5h
.eh_frame_hdr:000000000000B346                 db 0FFh
.eh_frame_hdr:000000000000B347                 db 0FFh
.eh_frame_hdr:000000000000B348                 db  98h
.eh_frame_hdr:000000000000B349                 db  12h
.eh_frame_hdr:000000000000B34A                 db    0
.eh_frame_hdr:000000000000B34B                 db    0
.eh_frame_hdr:000000000000B34C                 db 0B8h
.eh_frame_hdr:000000000000B34D                 db 0C6h
.eh_frame_hdr:000000000000B34E                 db 0FFh
.eh_frame_hdr:000000000000B34F                 db 0FFh
.eh_frame_hdr:000000000000B350                 db 0C8h
.eh_frame_hdr:000000000000B351                 db  12h
.eh_frame_hdr:000000000000B352                 db    0
.eh_frame_hdr:000000000000B353                 db    0
.eh_frame_hdr:000000000000B354                 db  38h ; 8
.eh_frame_hdr:000000000000B355                 db 0CEh
.eh_frame_hdr:000000000000B356                 db 0FFh
.eh_frame_hdr:000000000000B357                 db 0FFh
.eh_frame_hdr:000000000000B358                 db  2Ch ; ,
.eh_frame_hdr:000000000000B359                 db  13h
.eh_frame_hdr:000000000000B35A                 db    0
.eh_frame_hdr:000000000000B35B                 db    0
.eh_frame_hdr:000000000000B35C                 db  68h ; h
.eh_frame_hdr:000000000000B35D                 db 0CEh
.eh_frame_hdr:000000000000B35E                 db 0FFh
.eh_frame_hdr:000000000000B35F                 db 0FFh
.eh_frame_hdr:000000000000B360                 db  44h ; D
.eh_frame_hdr:000000000000B361                 db  13h
.eh_frame_hdr:000000000000B362                 db    0
.eh_frame_hdr:000000000000B363                 db    0
.eh_frame_hdr:000000000000B364                 db 0B8h
.eh_frame_hdr:000000000000B365                 db 0CFh
.eh_frame_hdr:000000000000B366                 db 0FFh
.eh_frame_hdr:000000000000B367                 db 0FFh
.eh_frame_hdr:000000000000B368                 db 0A8h
.eh_frame_hdr:000000000000B369                 db  13h
.eh_frame_hdr:000000000000B36A                 db    0
.eh_frame_hdr:000000000000B36B                 db    0
.eh_frame_hdr:000000000000B36C                 db  48h ; H
.eh_frame_hdr:000000000000B36D                 db 0D0h
.eh_frame_hdr:000000000000B36E                 db 0FFh
.eh_frame_hdr:000000000000B36F                 db 0FFh
.eh_frame_hdr:000000000000B370                 db 0E8h
.eh_frame_hdr:000000000000B371                 db  13h
.eh_frame_hdr:000000000000B372                 db    0
.eh_frame_hdr:000000000000B373                 db    0
.eh_frame_hdr:000000000000B374                 db 0C8h
.eh_frame_hdr:000000000000B375                 db 0D0h
.eh_frame_hdr:000000000000B376                 db 0FFh
.eh_frame_hdr:000000000000B377                 db 0FFh
.eh_frame_hdr:000000000000B378                 db  38h ; 8
.eh_frame_hdr:000000000000B379                 db  14h
.eh_frame_hdr:000000000000B37A                 db    0
.eh_frame_hdr:000000000000B37B                 db    0
.eh_frame_hdr:000000000000B37C                 db 0D8h
.eh_frame_hdr:000000000000B37D                 db 0D0h
.eh_frame_hdr:000000000000B37E                 db 0FFh
.eh_frame_hdr:000000000000B37F                 db 0FFh
.eh_frame_hdr:000000000000B380                 db  4Ch ; L
.eh_frame_hdr:000000000000B381                 db  14h
.eh_frame_hdr:000000000000B382                 db    0
.eh_frame_hdr:000000000000B383                 db    0
.eh_frame_hdr:000000000000B384                 db  68h ; h
.eh_frame_hdr:000000000000B385                 db 0D1h
.eh_frame_hdr:000000000000B386                 db 0FFh
.eh_frame_hdr:000000000000B387                 db 0FFh
.eh_frame_hdr:000000000000B388                 db  68h ; h
.eh_frame_hdr:000000000000B389                 db  14h
.eh_frame_hdr:000000000000B38A                 db    0
.eh_frame_hdr:000000000000B38B                 db    0
.eh_frame_hdr:000000000000B38C                 db 0D8h
.eh_frame_hdr:000000000000B38D                 db 0D1h
.eh_frame_hdr:000000000000B38E                 db 0FFh
.eh_frame_hdr:000000000000B38F                 db 0FFh
.eh_frame_hdr:000000000000B390                 db  88h
.eh_frame_hdr:000000000000B391                 db  14h
.eh_frame_hdr:000000000000B392                 db    0
.eh_frame_hdr:000000000000B393                 db    0
.eh_frame_hdr:000000000000B394                 db  38h ; 8
.eh_frame_hdr:000000000000B395                 db 0D2h
.eh_frame_hdr:000000000000B396                 db 0FFh
.eh_frame_hdr:000000000000B397                 db 0FFh
.eh_frame_hdr:000000000000B398                 db 0A8h
.eh_frame_hdr:000000000000B399                 db  14h
.eh_frame_hdr:000000000000B39A                 db    0
.eh_frame_hdr:000000000000B39B                 db    0
.eh_frame_hdr:000000000000B39C                 db 0D8h
.eh_frame_hdr:000000000000B39D                 db 0D2h
.eh_frame_hdr:000000000000B39E                 db 0FFh
.eh_frame_hdr:000000000000B39F                 db 0FFh
.eh_frame_hdr:000000000000B3A0                 db 0BCh
.eh_frame_hdr:000000000000B3A1                 db  14h
.eh_frame_hdr:000000000000B3A2                 db    0
.eh_frame_hdr:000000000000B3A3                 db    0
.eh_frame_hdr:000000000000B3A4                 db 0E8h
.eh_frame_hdr:000000000000B3A5                 db 0D2h
.eh_frame_hdr:000000000000B3A6                 db 0FFh
.eh_frame_hdr:000000000000B3A7                 db 0FFh
.eh_frame_hdr:000000000000B3A8                 db 0D0h
.eh_frame_hdr:000000000000B3A9                 db  14h
.eh_frame_hdr:000000000000B3AA                 db    0
.eh_frame_hdr:000000000000B3AB                 db    0
.eh_frame_hdr:000000000000B3AC                 db 0F8h
.eh_frame_hdr:000000000000B3AD                 db 0D2h
.eh_frame_hdr:000000000000B3AE                 db 0FFh
.eh_frame_hdr:000000000000B3AF                 db 0FFh
.eh_frame_hdr:000000000000B3B0                 db 0E4h
.eh_frame_hdr:000000000000B3B1                 db  14h
.eh_frame_hdr:000000000000B3B2                 db    0
.eh_frame_hdr:000000000000B3B3                 db    0
.eh_frame_hdr:000000000000B3B4                 db  28h ; (
.eh_frame_hdr:000000000000B3B5                 db 0D3h
.eh_frame_hdr:000000000000B3B6                 db 0FFh
.eh_frame_hdr:000000000000B3B7                 db 0FFh
.eh_frame_hdr:000000000000B3B8                 db    0
.eh_frame_hdr:000000000000B3B9                 db  15h
.eh_frame_hdr:000000000000B3BA                 db    0
.eh_frame_hdr:000000000000B3BB                 db    0
.eh_frame_hdr:000000000000B3BC                 db  48h ; H
.eh_frame_hdr:000000000000B3BD                 db 0D4h
.eh_frame_hdr:000000000000B3BE                 db 0FFh
.eh_frame_hdr:000000000000B3BF                 db 0FFh
.eh_frame_hdr:000000000000B3C0                 db  60h ; `
.eh_frame_hdr:000000000000B3C1                 db  15h
.eh_frame_hdr:000000000000B3C2                 db    0
.eh_frame_hdr:000000000000B3C3                 db    0
.eh_frame_hdr:000000000000B3C4                 db 0C8h
.eh_frame_hdr:000000000000B3C5                 db 0D4h
.eh_frame_hdr:000000000000B3C6                 db 0FFh
.eh_frame_hdr:000000000000B3C7                 db 0FFh
.eh_frame_hdr:000000000000B3C8                 db  74h ; t
.eh_frame_hdr:000000000000B3C9                 db  15h
.eh_frame_hdr:000000000000B3CA                 db    0
.eh_frame_hdr:000000000000B3CB                 db    0
.eh_frame_hdr:000000000000B3CC                 db    8
.eh_frame_hdr:000000000000B3CD                 db 0D6h
.eh_frame_hdr:000000000000B3CE                 db 0FFh
.eh_frame_hdr:000000000000B3CF                 db 0FFh
.eh_frame_hdr:000000000000B3D0                 db 0D4h
.eh_frame_hdr:000000000000B3D1                 db  15h
.eh_frame_hdr:000000000000B3D2                 db    0
.eh_frame_hdr:000000000000B3D3                 db    0
.eh_frame_hdr:000000000000B3D4                 db  18h
.eh_frame_hdr:000000000000B3D5                 db 0D6h
.eh_frame_hdr:000000000000B3D6                 db 0FFh
.eh_frame_hdr:000000000000B3D7                 db 0FFh
.eh_frame_hdr:000000000000B3D8                 db 0E8h
.eh_frame_hdr:000000000000B3D9                 db  15h
.eh_frame_hdr:000000000000B3DA                 db    0
.eh_frame_hdr:000000000000B3DB                 db    0
.eh_frame_hdr:000000000000B3DC                 db  28h ; (
.eh_frame_hdr:000000000000B3DD                 db 0D6h
.eh_frame_hdr:000000000000B3DE                 db 0FFh
.eh_frame_hdr:000000000000B3DF                 db 0FFh
.eh_frame_hdr:000000000000B3E0                 db 0FCh
.eh_frame_hdr:000000000000B3E1                 db  15h
.eh_frame_hdr:000000000000B3E2                 db    0
.eh_frame_hdr:000000000000B3E3                 db    0
.eh_frame_hdr:000000000000B3E4                 db  38h ; 8
.eh_frame_hdr:000000000000B3E5                 db 0D6h
.eh_frame_hdr:000000000000B3E6                 db 0FFh
.eh_frame_hdr:000000000000B3E7                 db 0FFh
.eh_frame_hdr:000000000000B3E8                 db  10h
.eh_frame_hdr:000000000000B3E9                 db  16h
.eh_frame_hdr:000000000000B3EA                 db    0
.eh_frame_hdr:000000000000B3EB                 db    0
.eh_frame_hdr:000000000000B3EC                 db  88h
.eh_frame_hdr:000000000000B3ED                 db 0D6h
.eh_frame_hdr:000000000000B3EE                 db 0FFh
.eh_frame_hdr:000000000000B3EF                 db 0FFh
.eh_frame_hdr:000000000000B3F0                 db  24h ; $
.eh_frame_hdr:000000000000B3F1                 db  16h
.eh_frame_hdr:000000000000B3F2                 db    0
.eh_frame_hdr:000000000000B3F3                 db    0
.eh_frame_hdr:000000000000B3F4                 db 0E8h
.eh_frame_hdr:000000000000B3F5                 db 0D6h
.eh_frame_hdr:000000000000B3F6                 db 0FFh
.eh_frame_hdr:000000000000B3F7                 db 0FFh
.eh_frame_hdr:000000000000B3F8                 db  38h ; 8
.eh_frame_hdr:000000000000B3F9                 db  16h
.eh_frame_hdr:000000000000B3FA                 db    0
.eh_frame_hdr:000000000000B3FB                 db    0
.eh_frame_hdr:000000000000B3FC                 db  38h ; 8
.eh_frame_hdr:000000000000B3FD                 db 0D8h
.eh_frame_hdr:000000000000B3FE                 db 0FFh
.eh_frame_hdr:000000000000B3FF                 db 0FFh
.eh_frame_hdr:000000000000B400                 db  74h ; t
.eh_frame_hdr:000000000000B401                 db  16h
.eh_frame_hdr:000000000000B402                 db    0
.eh_frame_hdr:000000000000B403                 db    0
.eh_frame_hdr:000000000000B404                 db  98h
.eh_frame_hdr:000000000000B405                 db 0D8h
.eh_frame_hdr:000000000000B406                 db 0FFh
.eh_frame_hdr:000000000000B407                 db 0FFh
.eh_frame_hdr:000000000000B408                 db 0ACh
.eh_frame_hdr:000000000000B409                 db  16h
.eh_frame_hdr:000000000000B40A                 db    0
.eh_frame_hdr:000000000000B40B                 db    0
.eh_frame_hdr:000000000000B40C                 db 0E8h
.eh_frame_hdr:000000000000B40D                 db 0D8h
.eh_frame_hdr:000000000000B40E                 db 0FFh
.eh_frame_hdr:000000000000B40F                 db 0FFh
.eh_frame_hdr:000000000000B410                 db 0C0h
.eh_frame_hdr:000000000000B411                 db  16h
.eh_frame_hdr:000000000000B412                 db    0
.eh_frame_hdr:000000000000B413                 db    0
.eh_frame_hdr:000000000000B414                 db  68h ; h
.eh_frame_hdr:000000000000B415                 db 0D9h
.eh_frame_hdr:000000000000B416                 db 0FFh
.eh_frame_hdr:000000000000B417                 db 0FFh
.eh_frame_hdr:000000000000B418                 db 0F4h
.eh_frame_hdr:000000000000B419                 db  16h
.eh_frame_hdr:000000000000B41A                 db    0
.eh_frame_hdr:000000000000B41B                 db    0
.eh_frame_hdr:000000000000B41C                 db 0D8h
.eh_frame_hdr:000000000000B41D                 db 0D9h
.eh_frame_hdr:000000000000B41E                 db 0FFh
.eh_frame_hdr:000000000000B41F                 db 0FFh
.eh_frame_hdr:000000000000B420                 db    8
.eh_frame_hdr:000000000000B421                 db  17h
.eh_frame_hdr:000000000000B422                 db    0
.eh_frame_hdr:000000000000B423                 db    0
.eh_frame_hdr:000000000000B424                 db  48h ; H
.eh_frame_hdr:000000000000B425                 db 0DAh
.eh_frame_hdr:000000000000B426                 db 0FFh
.eh_frame_hdr:000000000000B427                 db 0FFh
.eh_frame_hdr:000000000000B428                 db  54h ; T
.eh_frame_hdr:000000000000B429                 db  17h
.eh_frame_hdr:000000000000B42A                 db    0
.eh_frame_hdr:000000000000B42B                 db    0
.eh_frame_hdr:000000000000B42C                 db  88h
.eh_frame_hdr:000000000000B42D                 db 0DAh
.eh_frame_hdr:000000000000B42E                 db 0FFh
.eh_frame_hdr:000000000000B42F                 db 0FFh
.eh_frame_hdr:000000000000B430                 db  68h ; h
.eh_frame_hdr:000000000000B431                 db  17h
.eh_frame_hdr:000000000000B432                 db    0
.eh_frame_hdr:000000000000B433                 db    0
.eh_frame_hdr:000000000000B434                 db 0A8h
.eh_frame_hdr:000000000000B435                 db 0DAh
.eh_frame_hdr:000000000000B436                 db 0FFh
.eh_frame_hdr:000000000000B437                 db 0FFh
.eh_frame_hdr:000000000000B438                 db  7Ch ; |
.eh_frame_hdr:000000000000B439                 db  17h
.eh_frame_hdr:000000000000B43A                 db    0
.eh_frame_hdr:000000000000B43B                 db    0
.eh_frame_hdr:000000000000B43C                 db  68h ; h
.eh_frame_hdr:000000000000B43D                 db 0DCh
.eh_frame_hdr:000000000000B43E                 db 0FFh
.eh_frame_hdr:000000000000B43F                 db 0FFh
.eh_frame_hdr:000000000000B440                 db 0C8h
.eh_frame_hdr:000000000000B441                 db  17h
.eh_frame_hdr:000000000000B442                 db    0
.eh_frame_hdr:000000000000B443                 db    0
.eh_frame_hdr:000000000000B444                 db 0F8h
.eh_frame_hdr:000000000000B445                 db 0DCh
.eh_frame_hdr:000000000000B446                 db 0FFh
.eh_frame_hdr:000000000000B447                 db 0FFh
.eh_frame_hdr:000000000000B448                 db 0F4h
.eh_frame_hdr:000000000000B449                 db  17h
.eh_frame_hdr:000000000000B44A                 db    0
.eh_frame_hdr:000000000000B44B                 db    0
.eh_frame_hdr:000000000000B44C                 db 0D8h
.eh_frame_hdr:000000000000B44D                 db 0DDh
.eh_frame_hdr:000000000000B44E                 db 0FFh
.eh_frame_hdr:000000000000B44F                 db 0FFh
.eh_frame_hdr:000000000000B450                 db  20h
.eh_frame_hdr:000000000000B451                 db  18h
.eh_frame_hdr:000000000000B452                 db    0
.eh_frame_hdr:000000000000B453                 db    0
.eh_frame_hdr:000000000000B454                 db  18h
.eh_frame_hdr:000000000000B455                 db 0E0h
.eh_frame_hdr:000000000000B456                 db 0FFh
.eh_frame_hdr:000000000000B457                 db 0FFh
.eh_frame_hdr:000000000000B458                 db  58h ; X
.eh_frame_hdr:000000000000B459                 db  18h
.eh_frame_hdr:000000000000B45A                 db    0
.eh_frame_hdr:000000000000B45B                 db    0
.eh_frame_hdr:000000000000B45C                 db 0A8h
.eh_frame_hdr:000000000000B45D                 db 0E2h
.eh_frame_hdr:000000000000B45E                 db 0FFh
.eh_frame_hdr:000000000000B45F                 db 0FFh
.eh_frame_hdr:000000000000B460                 db  94h
.eh_frame_hdr:000000000000B461                 db  18h
.eh_frame_hdr:000000000000B462                 db    0
.eh_frame_hdr:000000000000B463                 db    0
.eh_frame_hdr:000000000000B464                 db    8
.eh_frame_hdr:000000000000B465                 db 0E3h
.eh_frame_hdr:000000000000B466                 db 0FFh
.eh_frame_hdr:000000000000B467                 db 0FFh
.eh_frame_hdr:000000000000B468                 db 0B8h
.eh_frame_hdr:000000000000B469                 db  18h
.eh_frame_hdr:000000000000B46A                 db    0
.eh_frame_hdr:000000000000B46B                 db    0
.eh_frame_hdr:000000000000B46C                 db  18h
.eh_frame_hdr:000000000000B46D                 db 0E5h
.eh_frame_hdr:000000000000B46E                 db 0FFh
.eh_frame_hdr:000000000000B46F                 db 0FFh
.eh_frame_hdr:000000000000B470                 db 0F0h
.eh_frame_hdr:000000000000B471                 db  18h
.eh_frame_hdr:000000000000B472                 db    0
.eh_frame_hdr:000000000000B473                 db    0
.eh_frame_hdr:000000000000B474                 db  38h ; 8
.eh_frame_hdr:000000000000B475                 db 0E5h
.eh_frame_hdr:000000000000B476                 db 0FFh
.eh_frame_hdr:000000000000B477                 db 0FFh
.eh_frame_hdr:000000000000B478                 db    4
.eh_frame_hdr:000000000000B479                 db  19h
.eh_frame_hdr:000000000000B47A                 db    0
.eh_frame_hdr:000000000000B47B                 db    0
.eh_frame_hdr:000000000000B47C                 db  48h ; H
.eh_frame_hdr:000000000000B47D                 db 0E5h
.eh_frame_hdr:000000000000B47E                 db 0FFh
.eh_frame_hdr:000000000000B47F                 db 0FFh
.eh_frame_hdr:000000000000B480                 db  18h
.eh_frame_hdr:000000000000B481                 db  19h
.eh_frame_hdr:000000000000B482                 db    0
.eh_frame_hdr:000000000000B483                 db    0
.eh_frame_hdr:000000000000B484                 db  88h
.eh_frame_hdr:000000000000B485                 db 0E5h
.eh_frame_hdr:000000000000B486                 db 0FFh
.eh_frame_hdr:000000000000B487                 db 0FFh
.eh_frame_hdr:000000000000B488                 db  2Ch ; ,
.eh_frame_hdr:000000000000B489                 db  19h
.eh_frame_hdr:000000000000B48A                 db    0
.eh_frame_hdr:000000000000B48B                 db    0
.eh_frame_hdr:000000000000B48C                 db 0C8h
.eh_frame_hdr:000000000000B48D                 db 0E5h
.eh_frame_hdr:000000000000B48E                 db 0FFh
.eh_frame_hdr:000000000000B48F                 db 0FFh
.eh_frame_hdr:000000000000B490                 db  40h ; @
.eh_frame_hdr:000000000000B491                 db  19h
.eh_frame_hdr:000000000000B492                 db    0
.eh_frame_hdr:000000000000B493                 db    0
.eh_frame_hdr:000000000000B494                 db    8
.eh_frame_hdr:000000000000B495                 db 0E6h
.eh_frame_hdr:000000000000B496                 db 0FFh
.eh_frame_hdr:000000000000B497                 db 0FFh
.eh_frame_hdr:000000000000B498                 db  60h ; `
.eh_frame_hdr:000000000000B499                 db  19h
.eh_frame_hdr:000000000000B49A                 db    0
.eh_frame_hdr:000000000000B49B                 db    0
.eh_frame_hdr:000000000000B49C                 db  78h ; x
.eh_frame_hdr:000000000000B49D                 db 0E6h
.eh_frame_hdr:000000000000B49E                 db 0FFh
.eh_frame_hdr:000000000000B49F                 db 0FFh
.eh_frame_hdr:000000000000B4A0                 db  80h
.eh_frame_hdr:000000000000B4A1                 db  19h
.eh_frame_hdr:000000000000B4A2                 db    0
.eh_frame_hdr:000000000000B4A3                 db    0
.eh_frame_hdr:000000000000B4A4                 db 0F8h
.eh_frame_hdr:000000000000B4A5                 db 0E6h
.eh_frame_hdr:000000000000B4A6                 db 0FFh
.eh_frame_hdr:000000000000B4A7                 db 0FFh
.eh_frame_hdr:000000000000B4A8                 db 0E0h
.eh_frame_hdr:000000000000B4A9                 db  19h
.eh_frame_hdr:000000000000B4AA                 db    0
.eh_frame_hdr:000000000000B4AB                 db    0
.eh_frame_hdr:000000000000B4AC                 db  38h ; 8
.eh_frame_hdr:000000000000B4AD                 db 0E7h
.eh_frame_hdr:000000000000B4AE                 db 0FFh
.eh_frame_hdr:000000000000B4AF                 db 0FFh
.eh_frame_hdr:000000000000B4B0                 db  18h
.eh_frame_hdr:000000000000B4B1                 db  1Ah
.eh_frame_hdr:000000000000B4B2                 db    0
.eh_frame_hdr:000000000000B4B3                 db    0
.eh_frame_hdr:000000000000B4B4                 db 0B8h
.eh_frame_hdr:000000000000B4B5                 db 0E7h
.eh_frame_hdr:000000000000B4B6                 db 0FFh
.eh_frame_hdr:000000000000B4B7                 db 0FFh
.eh_frame_hdr:000000000000B4B8                 db  50h ; P
.eh_frame_hdr:000000000000B4B9                 db  1Ah
.eh_frame_hdr:000000000000B4BA                 db    0
.eh_frame_hdr:000000000000B4BB                 db    0
.eh_frame_hdr:000000000000B4BC                 db  38h ; 8
.eh_frame_hdr:000000000000B4BD                 db 0EAh
.eh_frame_hdr:000000000000B4BE                 db 0FFh
.eh_frame_hdr:000000000000B4BF                 db 0FFh
.eh_frame_hdr:000000000000B4C0                 db  88h
.eh_frame_hdr:000000000000B4C1                 db  1Ah
.eh_frame_hdr:000000000000B4C2                 db    0
.eh_frame_hdr:000000000000B4C3                 db    0
.eh_frame_hdr:000000000000B4C4                 db  78h ; x
.eh_frame_hdr:000000000000B4C5                 db 0EAh
.eh_frame_hdr:000000000000B4C6                 db 0FFh
.eh_frame_hdr:000000000000B4C7                 db 0FFh
.eh_frame_hdr:000000000000B4C8                 db 0A8h
.eh_frame_hdr:000000000000B4C9                 db  1Ah
.eh_frame_hdr:000000000000B4CA                 db    0
.eh_frame_hdr:000000000000B4CB                 db    0
.eh_frame_hdr:000000000000B4CC                 db 0D8h
.eh_frame_hdr:000000000000B4CD                 db 0EAh
.eh_frame_hdr:000000000000B4CE                 db 0FFh
.eh_frame_hdr:000000000000B4CF                 db 0FFh
.eh_frame_hdr:000000000000B4D0                 db 0D8h
.eh_frame_hdr:000000000000B4D1                 db  1Ah
.eh_frame_hdr:000000000000B4D2                 db    0
.eh_frame_hdr:000000000000B4D3                 db    0
.eh_frame_hdr:000000000000B4D4                 db 0E8h
.eh_frame_hdr:000000000000B4D5                 db 0EAh
.eh_frame_hdr:000000000000B4D6                 db 0FFh
.eh_frame_hdr:000000000000B4D7                 db 0FFh
.eh_frame_hdr:000000000000B4D8                 db 0F0h
.eh_frame_hdr:000000000000B4D9                 db  1Ah
.eh_frame_hdr:000000000000B4DA                 db    0
.eh_frame_hdr:000000000000B4DB                 db    0
.eh_frame_hdr:000000000000B4DC                 db  58h ; X
.eh_frame_hdr:000000000000B4DD                 db 0EBh
.eh_frame_hdr:000000000000B4DE                 db 0FFh
.eh_frame_hdr:000000000000B4DF                 db 0FFh
.eh_frame_hdr:000000000000B4E0                 db  38h ; 8
.eh_frame_hdr:000000000000B4E1                 db  1Bh
.eh_frame_hdr:000000000000B4E2                 db    0
.eh_frame_hdr:000000000000B4E3                 db    0
.eh_frame_hdr:000000000000B4E4                 db  68h ; h
.eh_frame_hdr:000000000000B4E5                 db 0EBh
.eh_frame_hdr:000000000000B4E6                 db 0FFh
.eh_frame_hdr:000000000000B4E7                 db 0FFh
.eh_frame_hdr:000000000000B4E8                 db  50h ; P
.eh_frame_hdr:000000000000B4E9                 db  1Bh
.eh_frame_hdr:000000000000B4EA                 db    0
.eh_frame_hdr:000000000000B4EB                 db    0
.eh_frame_hdr:000000000000B4EB _eh_frame_hdr   ends
.eh_frame_hdr:000000000000B4EB
LOAD:000000000000B4EC ; ===========================================================================
LOAD:000000000000B4EC
LOAD:000000000000B4EC ; Segment type: Pure code
LOAD:000000000000B4EC ; Segment permissions: Read/Execute
LOAD:000000000000B4EC LOAD            segment byte public 'CODE' use64
LOAD:000000000000B4EC                 assume cs:LOAD
LOAD:000000000000B4EC                 ;org 0B4ECh
LOAD:000000000000B4EC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000B4EC                 align 10h
LOAD:000000000000B4EC LOAD            ends
LOAD:000000000000B4EC
.eh_frame:000000000000B4F0 ; ===========================================================================
.eh_frame:000000000000B4F0
.eh_frame:000000000000B4F0 ; Segment type: Pure data
.eh_frame:000000000000B4F0 ; Segment permissions: Read
.eh_frame:000000000000B4F0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000B4F0                 assume cs:_eh_frame
.eh_frame:000000000000B4F0                 ;org 0B4F0h
.eh_frame:000000000000B4F0                 db  14h
.eh_frame:000000000000B4F1                 db    0
.eh_frame:000000000000B4F2                 db    0
.eh_frame:000000000000B4F3                 db    0
.eh_frame:000000000000B4F4                 db    0
.eh_frame:000000000000B4F5                 db    0
.eh_frame:000000000000B4F6                 db    0
.eh_frame:000000000000B4F7                 db    0
.eh_frame:000000000000B4F8                 db    1
.eh_frame:000000000000B4F9                 db  7Ah ; z
.eh_frame:000000000000B4FA                 db  52h ; R
.eh_frame:000000000000B4FB                 db    0
.eh_frame:000000000000B4FC                 db    1
.eh_frame:000000000000B4FD                 db  78h ; x
.eh_frame:000000000000B4FE                 db  10h
.eh_frame:000000000000B4FF                 db    1
.eh_frame:000000000000B500                 db  1Bh
.eh_frame:000000000000B501                 db  0Ch
.eh_frame:000000000000B502                 db    7
.eh_frame:000000000000B503                 db    8
.eh_frame:000000000000B504                 db  90h
.eh_frame:000000000000B505                 db    1
.eh_frame:000000000000B506                 db    7
.eh_frame:000000000000B507                 db  10h
.eh_frame:000000000000B508                 db  14h
.eh_frame:000000000000B509                 db    0
.eh_frame:000000000000B50A                 db    0
.eh_frame:000000000000B50B                 db    0
.eh_frame:000000000000B50C                 db  1Ch
.eh_frame:000000000000B50D                 db    0
.eh_frame:000000000000B50E                 db    0
.eh_frame:000000000000B50F                 db    0
.eh_frame:000000000000B510                 db 0D0h
.eh_frame:000000000000B511                 db  72h ; r
.eh_frame:000000000000B512                 db 0FFh
.eh_frame:000000000000B513                 db 0FFh
.eh_frame:000000000000B514                 db  2Bh ; +
.eh_frame:000000000000B515                 db    0
.eh_frame:000000000000B516                 db    0
.eh_frame:000000000000B517                 db    0
.eh_frame:000000000000B518                 db    0
.eh_frame:000000000000B519                 db    0
.eh_frame:000000000000B51A                 db    0
.eh_frame:000000000000B51B                 db    0
.eh_frame:000000000000B51C                 db    0
.eh_frame:000000000000B51D                 db    0
.eh_frame:000000000000B51E                 db    0
.eh_frame:000000000000B51F                 db    0
.eh_frame:000000000000B520                 db  14h
.eh_frame:000000000000B521                 db    0
.eh_frame:000000000000B522                 db    0
.eh_frame:000000000000B523                 db    0
.eh_frame:000000000000B524                 db    0
.eh_frame:000000000000B525                 db    0
.eh_frame:000000000000B526                 db    0
.eh_frame:000000000000B527                 db    0
.eh_frame:000000000000B528                 db    1
.eh_frame:000000000000B529                 db  7Ah ; z
.eh_frame:000000000000B52A                 db  52h ; R
.eh_frame:000000000000B52B                 db    0
.eh_frame:000000000000B52C                 db    1
.eh_frame:000000000000B52D                 db  78h ; x
.eh_frame:000000000000B52E                 db  10h
.eh_frame:000000000000B52F                 db    1
.eh_frame:000000000000B530                 db  1Bh
.eh_frame:000000000000B531                 db  0Ch
.eh_frame:000000000000B532                 db    7
.eh_frame:000000000000B533                 db    8
.eh_frame:000000000000B534                 db  90h
.eh_frame:000000000000B535                 db    1
.eh_frame:000000000000B536                 db    0
.eh_frame:000000000000B537                 db    0
.eh_frame:000000000000B538                 db  24h ; $
.eh_frame:000000000000B539                 db    0
.eh_frame:000000000000B53A                 db    0
.eh_frame:000000000000B53B                 db    0
.eh_frame:000000000000B53C                 db  1Ch
.eh_frame:000000000000B53D                 db    0
.eh_frame:000000000000B53E                 db    0
.eh_frame:000000000000B53F                 db    0
.eh_frame:000000000000B540                 db 0A0h
.eh_frame:000000000000B541                 db  61h ; a
.eh_frame:000000000000B542                 db 0FFh
.eh_frame:000000000000B543                 db 0FFh
.eh_frame:000000000000B544                 db 0B0h
.eh_frame:000000000000B545                 db    3
.eh_frame:000000000000B546                 db    0
.eh_frame:000000000000B547                 db    0
.eh_frame:000000000000B548                 db    0
.eh_frame:000000000000B549                 db  0Eh
.eh_frame:000000000000B54A                 db  10h
.eh_frame:000000000000B54B                 db  46h ; F
.eh_frame:000000000000B54C                 db  0Eh
.eh_frame:000000000000B54D                 db  18h
.eh_frame:000000000000B54E                 db  4Ah ; J
.eh_frame:000000000000B54F                 db  0Fh
.eh_frame:000000000000B550                 db  0Bh
.eh_frame:000000000000B551                 db  77h ; w
.eh_frame:000000000000B552                 db    8
.eh_frame:000000000000B553                 db  80h
.eh_frame:000000000000B554                 db    0
.eh_frame:000000000000B555                 db  3Fh ; ?
.eh_frame:000000000000B556                 db  1Ah
.eh_frame:000000000000B557                 db  3Bh ; ;
.eh_frame:000000000000B558                 db  2Ah ; *
.eh_frame:000000000000B559                 db  33h ; 3
.eh_frame:000000000000B55A                 db  24h ; $
.eh_frame:000000000000B55B                 db  22h ; "
.eh_frame:000000000000B55C                 db    0
.eh_frame:000000000000B55D                 db    0
.eh_frame:000000000000B55E                 db    0
.eh_frame:000000000000B55F                 db    0
.eh_frame:000000000000B560                 db  14h
.eh_frame:000000000000B561                 db    0
.eh_frame:000000000000B562                 db    0
.eh_frame:000000000000B563                 db    0
.eh_frame:000000000000B564                 db  44h ; D
.eh_frame:000000000000B565                 db    0
.eh_frame:000000000000B566                 db    0
.eh_frame:000000000000B567                 db    0
.eh_frame:000000000000B568                 db  28h ; (
.eh_frame:000000000000B569                 db  65h ; e
.eh_frame:000000000000B56A                 db 0FFh
.eh_frame:000000000000B56B                 db 0FFh
.eh_frame:000000000000B56C                 db  10h
.eh_frame:000000000000B56D                 db    0
.eh_frame:000000000000B56E                 db    0
.eh_frame:000000000000B56F                 db    0
.eh_frame:000000000000B570                 db    0
.eh_frame:000000000000B571                 db    0
.eh_frame:000000000000B572                 db    0
.eh_frame:000000000000B573                 db    0
.eh_frame:000000000000B574                 db    0
.eh_frame:000000000000B575                 db    0
.eh_frame:000000000000B576                 db    0
.eh_frame:000000000000B577                 db    0
.eh_frame:000000000000B578                 db  28h ; (
.eh_frame:000000000000B579                 db    0
.eh_frame:000000000000B57A                 db    0
.eh_frame:000000000000B57B                 db    0
.eh_frame:000000000000B57C                 db  5Ch ; \
.eh_frame:000000000000B57D                 db    0
.eh_frame:000000000000B57E                 db    0
.eh_frame:000000000000B57F                 db    0
.eh_frame:000000000000B580                 db  70h ; p
.eh_frame:000000000000B581                 db  73h ; s
.eh_frame:000000000000B582                 db 0FFh
.eh_frame:000000000000B583                 db 0FFh
.eh_frame:000000000000B584                 db    2
.eh_frame:000000000000B585                 db    4
.eh_frame:000000000000B586                 db    0
.eh_frame:000000000000B587                 db    0
.eh_frame:000000000000B588                 db    0
.eh_frame:000000000000B589                 db  42h ; B
.eh_frame:000000000000B58A                 db  0Eh
.eh_frame:000000000000B58B                 db  10h
.eh_frame:000000000000B58C                 db  8Dh
.eh_frame:000000000000B58D                 db    2
.eh_frame:000000000000B58E                 db  42h ; B
.eh_frame:000000000000B58F                 db  0Eh
.eh_frame:000000000000B590                 db  18h
.eh_frame:000000000000B591                 db  8Ch
.eh_frame:000000000000B592                 db    3
.eh_frame:000000000000B593                 db  46h ; F
.eh_frame:000000000000B594                 db  0Eh
.eh_frame:000000000000B595                 db  20h
.eh_frame:000000000000B596                 db  86h
.eh_frame:000000000000B597                 db    4
.eh_frame:000000000000B598                 db  41h ; A
.eh_frame:000000000000B599                 db  0Eh
.eh_frame:000000000000B59A                 db  28h ; (
.eh_frame:000000000000B59B                 db  83h
.eh_frame:000000000000B59C                 db    5
.eh_frame:000000000000B59D                 db  49h ; I
.eh_frame:000000000000B59E                 db  0Eh
.eh_frame:000000000000B59F                 db 0B0h
.eh_frame:000000000000B5A0                 db    1
.eh_frame:000000000000B5A1                 db    0
.eh_frame:000000000000B5A2                 db    0
.eh_frame:000000000000B5A3                 db    0
.eh_frame:000000000000B5A4                 db  80h
.eh_frame:000000000000B5A5                 db    0
.eh_frame:000000000000B5A6                 db    0
.eh_frame:000000000000B5A7                 db    0
.eh_frame:000000000000B5A8                 db  88h
.eh_frame:000000000000B5A9                 db    0
.eh_frame:000000000000B5AA                 db    0
.eh_frame:000000000000B5AB                 db    0
.eh_frame:000000000000B5AC                 db 0F4h
.eh_frame:000000000000B5AD                 db  64h ; d
.eh_frame:000000000000B5AE                 db 0FFh
.eh_frame:000000000000B5AF                 db 0FFh
.eh_frame:000000000000B5B0                 db  36h ; 6
.eh_frame:000000000000B5B1                 db  0Dh
.eh_frame:000000000000B5B2                 db    0
.eh_frame:000000000000B5B3                 db    0
.eh_frame:000000000000B5B4                 db    0
.eh_frame:000000000000B5B5                 db  42h ; B
.eh_frame:000000000000B5B6                 db  0Eh
.eh_frame:000000000000B5B7                 db  10h
.eh_frame:000000000000B5B8                 db  8Fh
.eh_frame:000000000000B5B9                 db    2
.eh_frame:000000000000B5BA                 db  42h ; B
.eh_frame:000000000000B5BB                 db  0Eh
.eh_frame:000000000000B5BC                 db  18h
.eh_frame:000000000000B5BD                 db  8Eh
.eh_frame:000000000000B5BE                 db    3
.eh_frame:000000000000B5BF                 db  45h ; E
.eh_frame:000000000000B5C0                 db  0Eh
.eh_frame:000000000000B5C1                 db  20h
.eh_frame:000000000000B5C2                 db  8Dh
.eh_frame:000000000000B5C3                 db    4
.eh_frame:000000000000B5C4                 db  42h ; B
.eh_frame:000000000000B5C5                 db  0Eh
.eh_frame:000000000000B5C6                 db  28h ; (
.eh_frame:000000000000B5C7                 db  8Ch
.eh_frame:000000000000B5C8                 db    5
.eh_frame:000000000000B5C9                 db  44h ; D
.eh_frame:000000000000B5CA                 db  0Eh
.eh_frame:000000000000B5CB                 db  30h ; 0
.eh_frame:000000000000B5CC                 db  86h
.eh_frame:000000000000B5CD                 db    6
.eh_frame:000000000000B5CE                 db  41h ; A
.eh_frame:000000000000B5CF                 db  0Eh
.eh_frame:000000000000B5D0                 db  38h ; 8
.eh_frame:000000000000B5D1                 db  83h
.eh_frame:000000000000B5D2                 db    7
.eh_frame:000000000000B5D3                 db  53h ; S
.eh_frame:000000000000B5D4                 db  0Eh
.eh_frame:000000000000B5D5                 db 0B0h
.eh_frame:000000000000B5D6                 db    2
.eh_frame:000000000000B5D7                 db    3
.eh_frame:000000000000B5D8                 db  2Fh ; /
.eh_frame:000000000000B5D9                 db    1
.eh_frame:000000000000B5DA                 db  0Ah
.eh_frame:000000000000B5DB                 db  0Eh
.eh_frame:000000000000B5DC                 db 0B8h
.eh_frame:000000000000B5DD                 db    2
.eh_frame:000000000000B5DE                 db  50h ; P
.eh_frame:000000000000B5DF                 db  0Eh
.eh_frame:000000000000B5E0                 db 0C0h
.eh_frame:000000000000B5E1                 db    2
.eh_frame:000000000000B5E2                 db  6Eh ; n
.eh_frame:000000000000B5E3                 db  0Bh
.eh_frame:000000000000B5E4                 db    3
.eh_frame:000000000000B5E5                 db  9Eh
.eh_frame:000000000000B5E6                 db    2
.eh_frame:000000000000B5E7                 db  0Ah
.eh_frame:000000000000B5E8                 db  0Eh
.eh_frame:000000000000B5E9                 db  38h ; 8
.eh_frame:000000000000B5EA                 db  41h ; A
.eh_frame:000000000000B5EB                 db  0Eh
.eh_frame:000000000000B5EC                 db  30h ; 0
.eh_frame:000000000000B5ED                 db  41h ; A
.eh_frame:000000000000B5EE                 db  0Eh
.eh_frame:000000000000B5EF                 db  28h ; (
.eh_frame:000000000000B5F0                 db  42h ; B
.eh_frame:000000000000B5F1                 db  0Eh
.eh_frame:000000000000B5F2                 db  20h
.eh_frame:000000000000B5F3                 db  42h ; B
.eh_frame:000000000000B5F4                 db  0Eh
.eh_frame:000000000000B5F5                 db  18h
.eh_frame:000000000000B5F6                 db  42h ; B
.eh_frame:000000000000B5F7                 db  0Eh
.eh_frame:000000000000B5F8                 db  10h
.eh_frame:000000000000B5F9                 db  42h ; B
.eh_frame:000000000000B5FA                 db  0Eh
.eh_frame:000000000000B5FB                 db    8
.eh_frame:000000000000B5FC                 db  41h ; A
.eh_frame:000000000000B5FD                 db  0Bh
.eh_frame:000000000000B5FE                 db    3
.eh_frame:000000000000B5FF                 db 0ACh
.eh_frame:000000000000B600                 db    2
.eh_frame:000000000000B601                 db  0Eh
.eh_frame:000000000000B602                 db 0B8h
.eh_frame:000000000000B603                 db    2
.eh_frame:000000000000B604                 db  5Bh ; [
.eh_frame:000000000000B605                 db  0Eh
.eh_frame:000000000000B606                 db 0C0h
.eh_frame:000000000000B607                 db    2
.eh_frame:000000000000B608                 db  5Ch ; \
.eh_frame:000000000000B609                 db  0Eh
.eh_frame:000000000000B60A                 db 0B8h
.eh_frame:000000000000B60B                 db    2
.eh_frame:000000000000B60C                 db  41h ; A
.eh_frame:000000000000B60D                 db  0Eh
.eh_frame:000000000000B60E                 db 0B0h
.eh_frame:000000000000B60F                 db    2
.eh_frame:000000000000B610                 db    2
.eh_frame:000000000000B611                 db 0DFh
.eh_frame:000000000000B612                 db  0Eh
.eh_frame:000000000000B613                 db 0B8h
.eh_frame:000000000000B614                 db    2
.eh_frame:000000000000B615                 db  58h ; X
.eh_frame:000000000000B616                 db  0Eh
.eh_frame:000000000000B617                 db 0C0h
.eh_frame:000000000000B618                 db    2
.eh_frame:000000000000B619                 db  5Ch ; \
.eh_frame:000000000000B61A                 db  0Eh
.eh_frame:000000000000B61B                 db 0B8h
.eh_frame:000000000000B61C                 db    2
.eh_frame:000000000000B61D                 db  41h ; A
.eh_frame:000000000000B61E                 db  0Eh
.eh_frame:000000000000B61F                 db 0B0h
.eh_frame:000000000000B620                 db    2
.eh_frame:000000000000B621                 db    0
.eh_frame:000000000000B622                 db    0
.eh_frame:000000000000B623                 db    0
.eh_frame:000000000000B624                 db    0
.eh_frame:000000000000B625                 db    0
.eh_frame:000000000000B626                 db    0
.eh_frame:000000000000B627                 db    0
.eh_frame:000000000000B628                 db  10h
.eh_frame:000000000000B629                 db    0
.eh_frame:000000000000B62A                 db    0
.eh_frame:000000000000B62B                 db    0
.eh_frame:000000000000B62C                 db  0Ch
.eh_frame:000000000000B62D                 db    1
.eh_frame:000000000000B62E                 db    0
.eh_frame:000000000000B62F                 db    0
.eh_frame:000000000000B630                 db 0D0h
.eh_frame:000000000000B631                 db  76h ; v
.eh_frame:000000000000B632                 db 0FFh
.eh_frame:000000000000B633                 db 0FFh
.eh_frame:000000000000B634                 db    8
.eh_frame:000000000000B635                 db    0
.eh_frame:000000000000B636                 db    0
.eh_frame:000000000000B637                 db    0
.eh_frame:000000000000B638                 db    0
.eh_frame:000000000000B639                 db    0
.eh_frame:000000000000B63A                 db    0
.eh_frame:000000000000B63B                 db    0
.eh_frame:000000000000B63C                 db  10h
.eh_frame:000000000000B63D                 db    0
.eh_frame:000000000000B63E                 db    0
.eh_frame:000000000000B63F                 db    0
.eh_frame:000000000000B640                 db  20h
.eh_frame:000000000000B641                 db    1
.eh_frame:000000000000B642                 db    0
.eh_frame:000000000000B643                 db    0
.eh_frame:000000000000B644                 db 0CCh
.eh_frame:000000000000B645                 db  76h ; v
.eh_frame:000000000000B646                 db 0FFh
.eh_frame:000000000000B647                 db 0FFh
.eh_frame:000000000000B648                 db    8
.eh_frame:000000000000B649                 db    0
.eh_frame:000000000000B64A                 db    0
.eh_frame:000000000000B64B                 db    0
.eh_frame:000000000000B64C                 db    0
.eh_frame:000000000000B64D                 db    0
.eh_frame:000000000000B64E                 db    0
.eh_frame:000000000000B64F                 db    0
.eh_frame:000000000000B650                 db  2Ch ; ,
.eh_frame:000000000000B651                 db    0
.eh_frame:000000000000B652                 db    0
.eh_frame:000000000000B653                 db    0
.eh_frame:000000000000B654                 db  34h ; 4
.eh_frame:000000000000B655                 db    1
.eh_frame:000000000000B656                 db    0
.eh_frame:000000000000B657                 db    0
.eh_frame:000000000000B658                 db 0C8h
.eh_frame:000000000000B659                 db  76h ; v
.eh_frame:000000000000B65A                 db 0FFh
.eh_frame:000000000000B65B                 db 0FFh
.eh_frame:000000000000B65C                 db 0A4h
.eh_frame:000000000000B65D                 db    0
.eh_frame:000000000000B65E                 db    0
.eh_frame:000000000000B65F                 db    0
.eh_frame:000000000000B660                 db    0
.eh_frame:000000000000B661                 db  41h ; A
.eh_frame:000000000000B662                 db  0Eh
.eh_frame:000000000000B663                 db  10h
.eh_frame:000000000000B664                 db  86h
.eh_frame:000000000000B665                 db    2
.eh_frame:000000000000B666                 db  41h ; A
.eh_frame:000000000000B667                 db  0Eh
.eh_frame:000000000000B668                 db  18h
.eh_frame:000000000000B669                 db  83h
.eh_frame:000000000000B66A                 db    3
.eh_frame:000000000000B66B                 db  44h ; D
.eh_frame:000000000000B66C                 db  0Eh
.eh_frame:000000000000B66D                 db  20h
.eh_frame:000000000000B66E                 db  7Ah ; z
.eh_frame:000000000000B66F                 db  0Ah
.eh_frame:000000000000B670                 db  0Eh
.eh_frame:000000000000B671                 db  18h
.eh_frame:000000000000B672                 db  41h ; A
.eh_frame:000000000000B673                 db  0Eh
.eh_frame:000000000000B674                 db  10h
.eh_frame:000000000000B675                 db  41h ; A
.eh_frame:000000000000B676                 db  0Eh
.eh_frame:000000000000B677                 db    8
.eh_frame:000000000000B678                 db  41h ; A
.eh_frame:000000000000B679                 db  0Bh
.eh_frame:000000000000B67A                 db    0
.eh_frame:000000000000B67B                 db    0
.eh_frame:000000000000B67C                 db    0
.eh_frame:000000000000B67D                 db    0
.eh_frame:000000000000B67E                 db    0
.eh_frame:000000000000B67F                 db    0
.eh_frame:000000000000B680                 db  10h
.eh_frame:000000000000B681                 db    0
.eh_frame:000000000000B682                 db    0
.eh_frame:000000000000B683                 db    0
.eh_frame:000000000000B684                 db  64h ; d
.eh_frame:000000000000B685                 db    1
.eh_frame:000000000000B686                 db    0
.eh_frame:000000000000B687                 db    0
.eh_frame:000000000000B688                 db  48h ; H
.eh_frame:000000000000B689                 db  77h ; w
.eh_frame:000000000000B68A                 db 0FFh
.eh_frame:000000000000B68B                 db 0FFh
.eh_frame:000000000000B68C                 db  83h
.eh_frame:000000000000B68D                 db    1
.eh_frame:000000000000B68E                 db    0
.eh_frame:000000000000B68F                 db    0
.eh_frame:000000000000B690                 db    0
.eh_frame:000000000000B691                 db    0
.eh_frame:000000000000B692                 db    0
.eh_frame:000000000000B693                 db    0
.eh_frame:000000000000B694                 db  10h
.eh_frame:000000000000B695                 db    0
.eh_frame:000000000000B696                 db    0
.eh_frame:000000000000B697                 db    0
.eh_frame:000000000000B698                 db  78h ; x
.eh_frame:000000000000B699                 db    1
.eh_frame:000000000000B69A                 db    0
.eh_frame:000000000000B69B                 db    0
.eh_frame:000000000000B69C                 db 0C4h
.eh_frame:000000000000B69D                 db  78h ; x
.eh_frame:000000000000B69E                 db 0FFh
.eh_frame:000000000000B69F                 db 0FFh
.eh_frame:000000000000B6A0                 db    8
.eh_frame:000000000000B6A1                 db    0
.eh_frame:000000000000B6A2                 db    0
.eh_frame:000000000000B6A3                 db    0
.eh_frame:000000000000B6A4                 db    0
.eh_frame:000000000000B6A5                 db    0
.eh_frame:000000000000B6A6                 db    0
.eh_frame:000000000000B6A7                 db    0
.eh_frame:000000000000B6A8                 db  44h ; D
.eh_frame:000000000000B6A9                 db    0
.eh_frame:000000000000B6AA                 db    0
.eh_frame:000000000000B6AB                 db    0
.eh_frame:000000000000B6AC                 db  8Ch
.eh_frame:000000000000B6AD                 db    1
.eh_frame:000000000000B6AE                 db    0
.eh_frame:000000000000B6AF                 db    0
.eh_frame:000000000000B6B0                 db 0C0h
.eh_frame:000000000000B6B1                 db  78h ; x
.eh_frame:000000000000B6B2                 db 0FFh
.eh_frame:000000000000B6B3                 db 0FFh
.eh_frame:000000000000B6B4                 db 0A9h
.eh_frame:000000000000B6B5                 db    3
.eh_frame:000000000000B6B6                 db    0
.eh_frame:000000000000B6B7                 db    0
.eh_frame:000000000000B6B8                 db    0
.eh_frame:000000000000B6B9                 db  41h ; A
.eh_frame:000000000000B6BA                 db  0Eh
.eh_frame:000000000000B6BB                 db  10h
.eh_frame:000000000000B6BC                 db  86h
.eh_frame:000000000000B6BD                 db    2
.eh_frame:000000000000B6BE                 db  41h ; A
.eh_frame:000000000000B6BF                 db  0Eh
.eh_frame:000000000000B6C0                 db  18h
.eh_frame:000000000000B6C1                 db  83h
.eh_frame:000000000000B6C2                 db    3
.eh_frame:000000000000B6C3                 db  47h ; G
.eh_frame:000000000000B6C4                 db  0Eh
.eh_frame:000000000000B6C5                 db  20h
.eh_frame:000000000000B6C6                 db    2
.eh_frame:000000000000B6C7                 db 0B8h
.eh_frame:000000000000B6C8                 db  0Ah
.eh_frame:000000000000B6C9                 db  0Eh
.eh_frame:000000000000B6CA                 db  18h
.eh_frame:000000000000B6CB                 db  41h ; A
.eh_frame:000000000000B6CC                 db  0Eh
.eh_frame:000000000000B6CD                 db  10h
.eh_frame:000000000000B6CE                 db  41h ; A
.eh_frame:000000000000B6CF                 db  0Eh
.eh_frame:000000000000B6D0                 db    8
.eh_frame:000000000000B6D1                 db  45h ; E
.eh_frame:000000000000B6D2                 db  0Bh
.eh_frame:000000000000B6D3                 db  6Bh ; k
.eh_frame:000000000000B6D4                 db  0Ah
.eh_frame:000000000000B6D5                 db  0Eh
.eh_frame:000000000000B6D6                 db  18h
.eh_frame:000000000000B6D7                 db  43h ; C
.eh_frame:000000000000B6D8                 db  0Eh
.eh_frame:000000000000B6D9                 db  10h
.eh_frame:000000000000B6DA                 db  41h ; A
.eh_frame:000000000000B6DB                 db  0Eh
.eh_frame:000000000000B6DC                 db    8
.eh_frame:000000000000B6DD                 db  49h ; I
.eh_frame:000000000000B6DE                 db  0Bh
.eh_frame:000000000000B6DF                 db    3
.eh_frame:000000000000B6E0                 db  6Ch ; l
.eh_frame:000000000000B6E1                 db    2
.eh_frame:000000000000B6E2                 db  0Ah
.eh_frame:000000000000B6E3                 db  0Eh
.eh_frame:000000000000B6E4                 db  18h
.eh_frame:000000000000B6E5                 db  41h ; A
.eh_frame:000000000000B6E6                 db  0Eh
.eh_frame:000000000000B6E7                 db  10h
.eh_frame:000000000000B6E8                 db  41h ; A
.eh_frame:000000000000B6E9                 db  0Eh
.eh_frame:000000000000B6EA                 db    8
.eh_frame:000000000000B6EB                 db  41h ; A
.eh_frame:000000000000B6EC                 db  0Bh
.eh_frame:000000000000B6ED                 db    0
.eh_frame:000000000000B6EE                 db    0
.eh_frame:000000000000B6EF                 db    0
.eh_frame:000000000000B6F0                 db  20h
.eh_frame:000000000000B6F1                 db    0
.eh_frame:000000000000B6F2                 db    0
.eh_frame:000000000000B6F3                 db    0
.eh_frame:000000000000B6F4                 db 0D4h
.eh_frame:000000000000B6F5                 db    1
.eh_frame:000000000000B6F6                 db    0
.eh_frame:000000000000B6F7                 db    0
.eh_frame:000000000000B6F8                 db  28h ; (
.eh_frame:000000000000B6F9                 db  7Ch ; |
.eh_frame:000000000000B6FA                 db 0FFh
.eh_frame:000000000000B6FB                 db 0FFh
.eh_frame:000000000000B6FC                 db  89h
.eh_frame:000000000000B6FD                 db    0
.eh_frame:000000000000B6FE                 db    0
.eh_frame:000000000000B6FF                 db    0
.eh_frame:000000000000B700                 db    0
.eh_frame:000000000000B701                 db  41h ; A
.eh_frame:000000000000B702                 db  0Eh
.eh_frame:000000000000B703                 db  10h
.eh_frame:000000000000B704                 db  83h
.eh_frame:000000000000B705                 db    2
.eh_frame:000000000000B706                 db  4Fh ; O
.eh_frame:000000000000B707                 db  0Eh
.eh_frame:000000000000B708                 db 0B0h
.eh_frame:000000000000B709                 db    1
.eh_frame:000000000000B70A                 db    2
.eh_frame:000000000000B70B                 db  64h ; d
.eh_frame:000000000000B70C                 db  0Ah
.eh_frame:000000000000B70D                 db  0Eh
.eh_frame:000000000000B70E                 db  10h
.eh_frame:000000000000B70F                 db  41h ; A
.eh_frame:000000000000B710                 db  0Eh
.eh_frame:000000000000B711                 db    8
.eh_frame:000000000000B712                 db  4Bh ; K
.eh_frame:000000000000B713                 db  0Bh
.eh_frame:000000000000B714                 db  30h ; 0
.eh_frame:000000000000B715                 db    0
.eh_frame:000000000000B716                 db    0
.eh_frame:000000000000B717                 db    0
.eh_frame:000000000000B718                 db 0F8h
.eh_frame:000000000000B719                 db    1
.eh_frame:000000000000B71A                 db    0
.eh_frame:000000000000B71B                 db    0
.eh_frame:000000000000B71C                 db  94h
.eh_frame:000000000000B71D                 db  7Ch ; |
.eh_frame:000000000000B71E                 db 0FFh
.eh_frame:000000000000B71F                 db 0FFh
.eh_frame:000000000000B720                 db  6Dh ; m
.eh_frame:000000000000B721                 db    1
.eh_frame:000000000000B722                 db    0
.eh_frame:000000000000B723                 db    0
.eh_frame:000000000000B724                 db    0
.eh_frame:000000000000B725                 db  5Bh ; [
.eh_frame:000000000000B726                 db  0Eh
.eh_frame:000000000000B727                 db  10h
.eh_frame:000000000000B728                 db  8Ch
.eh_frame:000000000000B729                 db    2
.eh_frame:000000000000B72A                 db  41h ; A
.eh_frame:000000000000B72B                 db  0Eh
.eh_frame:000000000000B72C                 db  18h
.eh_frame:000000000000B72D                 db  86h
.eh_frame:000000000000B72E                 db    3
.eh_frame:000000000000B72F                 db  41h ; A
.eh_frame:000000000000B730                 db  0Eh
.eh_frame:000000000000B731                 db  20h
.eh_frame:000000000000B732                 db  83h
.eh_frame:000000000000B733                 db    4
.eh_frame:000000000000B734                 db    3
.eh_frame:000000000000B735                 db    8
.eh_frame:000000000000B736                 db    1
.eh_frame:000000000000B737                 db  0Ah
.eh_frame:000000000000B738                 db  0Eh
.eh_frame:000000000000B739                 db  18h
.eh_frame:000000000000B73A                 db  41h ; A
.eh_frame:000000000000B73B                 db  0Eh
.eh_frame:000000000000B73C                 db  10h
.eh_frame:000000000000B73D                 db  42h ; B
.eh_frame:000000000000B73E                 db  0Eh
.eh_frame:000000000000B73F                 db    8
.eh_frame:000000000000B740                 db  48h ; H
.eh_frame:000000000000B741                 db  0Bh
.eh_frame:000000000000B742                 db  70h ; p
.eh_frame:000000000000B743                 db  0Eh
.eh_frame:000000000000B744                 db    8
.eh_frame:000000000000B745                 db 0C3h
.eh_frame:000000000000B746                 db 0C6h
.eh_frame:000000000000B747                 db 0CCh
.eh_frame:000000000000B748                 db  1Ch
.eh_frame:000000000000B749                 db    0
.eh_frame:000000000000B74A                 db    0
.eh_frame:000000000000B74B                 db    0
.eh_frame:000000000000B74C                 db  2Ch ; ,
.eh_frame:000000000000B74D                 db    2
.eh_frame:000000000000B74E                 db    0
.eh_frame:000000000000B74F                 db    0
.eh_frame:000000000000B750                 db 0D0h
.eh_frame:000000000000B751                 db  7Dh ; }
.eh_frame:000000000000B752                 db 0FFh
.eh_frame:000000000000B753                 db 0FFh
.eh_frame:000000000000B754                 db  9Fh
.eh_frame:000000000000B755                 db    0
.eh_frame:000000000000B756                 db    0
.eh_frame:000000000000B757                 db    0
.eh_frame:000000000000B758                 db    0
.eh_frame:000000000000B759                 db  44h ; D
.eh_frame:000000000000B75A                 db  0Eh
.eh_frame:000000000000B75B                 db  10h
.eh_frame:000000000000B75C                 db  83h
.eh_frame:000000000000B75D                 db    2
.eh_frame:000000000000B75E                 db    2
.eh_frame:000000000000B75F                 db  78h ; x
.eh_frame:000000000000B760                 db  0Ah
.eh_frame:000000000000B761                 db  0Eh
.eh_frame:000000000000B762                 db    8
.eh_frame:000000000000B763                 db  41h ; A
.eh_frame:000000000000B764                 db  0Bh
.eh_frame:000000000000B765                 db    0
.eh_frame:000000000000B766                 db    0
.eh_frame:000000000000B767                 db    0
.eh_frame:000000000000B768                 db  40h ; @
.eh_frame:000000000000B769                 db    0
.eh_frame:000000000000B76A                 db    0
.eh_frame:000000000000B76B                 db    0
.eh_frame:000000000000B76C                 db  4Ch ; L
.eh_frame:000000000000B76D                 db    2
.eh_frame:000000000000B76E                 db    0
.eh_frame:000000000000B76F                 db    0
.eh_frame:000000000000B770                 db  50h ; P
.eh_frame:000000000000B771                 db  7Eh ; ~
.eh_frame:000000000000B772                 db 0FFh
.eh_frame:000000000000B773                 db 0FFh
.eh_frame:000000000000B774                 db 0E7h
.eh_frame:000000000000B775                 db    0
.eh_frame:000000000000B776                 db    0
.eh_frame:000000000000B777                 db    0
.eh_frame:000000000000B778                 db    0
.eh_frame:000000000000B779                 db  41h ; A
.eh_frame:000000000000B77A                 db  0Eh
.eh_frame:000000000000B77B                 db  10h
.eh_frame:000000000000B77C                 db  86h
.eh_frame:000000000000B77D                 db    2
.eh_frame:000000000000B77E                 db  41h ; A
.eh_frame:000000000000B77F                 db  0Eh
.eh_frame:000000000000B780                 db  18h
.eh_frame:000000000000B781                 db  83h
.eh_frame:000000000000B782                 db    3
.eh_frame:000000000000B783                 db  49h ; I
.eh_frame:000000000000B784                 db  0Eh
.eh_frame:000000000000B785                 db  20h
.eh_frame:000000000000B786                 db  6Eh ; n
.eh_frame:000000000000B787                 db  0Ah
.eh_frame:000000000000B788                 db  0Eh
.eh_frame:000000000000B789                 db  18h
.eh_frame:000000000000B78A                 db  41h ; A
.eh_frame:000000000000B78B                 db  0Eh
.eh_frame:000000000000B78C                 db  10h
.eh_frame:000000000000B78D                 db  41h ; A
.eh_frame:000000000000B78E                 db  0Eh
.eh_frame:000000000000B78F                 db    8
.eh_frame:000000000000B790                 db  45h ; E
.eh_frame:000000000000B791                 db  0Bh
.eh_frame:000000000000B792                 db    2
.eh_frame:000000000000B793                 db  4Ah ; J
.eh_frame:000000000000B794                 db  0Ah
.eh_frame:000000000000B795                 db  0Eh
.eh_frame:000000000000B796                 db  18h
.eh_frame:000000000000B797                 db  41h ; A
.eh_frame:000000000000B798                 db  0Eh
.eh_frame:000000000000B799                 db  10h
.eh_frame:000000000000B79A                 db  41h ; A
.eh_frame:000000000000B79B                 db  0Eh
.eh_frame:000000000000B79C                 db    8
.eh_frame:000000000000B79D                 db  44h ; D
.eh_frame:000000000000B79E                 db  0Bh
.eh_frame:000000000000B79F                 db    2
.eh_frame:000000000000B7A0                 db  54h ; T
.eh_frame:000000000000B7A1                 db  0Eh
.eh_frame:000000000000B7A2                 db  18h
.eh_frame:000000000000B7A3                 db  41h ; A
.eh_frame:000000000000B7A4                 db  0Eh
.eh_frame:000000000000B7A5                 db  10h
.eh_frame:000000000000B7A6                 db  41h ; A
.eh_frame:000000000000B7A7                 db  0Eh
.eh_frame:000000000000B7A8                 db    8
.eh_frame:000000000000B7A9                 db    0
.eh_frame:000000000000B7AA                 db    0
.eh_frame:000000000000B7AB                 db    0
.eh_frame:000000000000B7AC                 db  74h ; t
.eh_frame:000000000000B7AD                 db    0
.eh_frame:000000000000B7AE                 db    0
.eh_frame:000000000000B7AF                 db    0
.eh_frame:000000000000B7B0                 db  90h
.eh_frame:000000000000B7B1                 db    2
.eh_frame:000000000000B7B2                 db    0
.eh_frame:000000000000B7B3                 db    0
.eh_frame:000000000000B7B4                 db 0FCh
.eh_frame:000000000000B7B5                 db  7Eh ; ~
.eh_frame:000000000000B7B6                 db 0FFh
.eh_frame:000000000000B7B7                 db 0FFh
.eh_frame:000000000000B7B8                 db  34h ; 4
.eh_frame:000000000000B7B9                 db  12h
.eh_frame:000000000000B7BA                 db    0
.eh_frame:000000000000B7BB                 db    0
.eh_frame:000000000000B7BC                 db    0
.eh_frame:000000000000B7BD                 db  42h ; B
.eh_frame:000000000000B7BE                 db  0Eh
.eh_frame:000000000000B7BF                 db  10h
.eh_frame:000000000000B7C0                 db  8Fh
.eh_frame:000000000000B7C1                 db    2
.eh_frame:000000000000B7C2                 db  42h ; B
.eh_frame:000000000000B7C3                 db  0Eh
.eh_frame:000000000000B7C4                 db  18h
.eh_frame:000000000000B7C5                 db  8Eh
.eh_frame:000000000000B7C6                 db    3
.eh_frame:000000000000B7C7                 db  45h ; E
.eh_frame:000000000000B7C8                 db  0Eh
.eh_frame:000000000000B7C9                 db  20h
.eh_frame:000000000000B7CA                 db  8Dh
.eh_frame:000000000000B7CB                 db    4
.eh_frame:000000000000B7CC                 db  42h ; B
.eh_frame:000000000000B7CD                 db  0Eh
.eh_frame:000000000000B7CE                 db  28h ; (
.eh_frame:000000000000B7CF                 db  8Ch
.eh_frame:000000000000B7D0                 db    5
.eh_frame:000000000000B7D1                 db  44h ; D
.eh_frame:000000000000B7D2                 db  0Eh
.eh_frame:000000000000B7D3                 db  30h ; 0
.eh_frame:000000000000B7D4                 db  86h
.eh_frame:000000000000B7D5                 db    6
.eh_frame:000000000000B7D6                 db  41h ; A
.eh_frame:000000000000B7D7                 db  0Eh
.eh_frame:000000000000B7D8                 db  38h ; 8
.eh_frame:000000000000B7D9                 db  83h
.eh_frame:000000000000B7DA                 db    7
.eh_frame:000000000000B7DB                 db  53h ; S
.eh_frame:000000000000B7DC                 db  0Eh
.eh_frame:000000000000B7DD                 db 0F0h
.eh_frame:000000000000B7DE                 db    1
.eh_frame:000000000000B7DF                 db    3
.eh_frame:000000000000B7E0                 db  81h
.eh_frame:000000000000B7E1                 db  0Bh
.eh_frame:000000000000B7E2                 db  0Eh
.eh_frame:000000000000B7E3                 db 0F8h
.eh_frame:000000000000B7E4                 db    1
.eh_frame:000000000000B7E5                 db  4Ah ; J
.eh_frame:000000000000B7E6                 db  0Eh
.eh_frame:000000000000B7E7                 db  80h
.eh_frame:000000000000B7E8                 db    2
.eh_frame:000000000000B7E9                 db  44h ; D
.eh_frame:000000000000B7EA                 db  0Eh
.eh_frame:000000000000B7EB                 db  88h
.eh_frame:000000000000B7EC                 db    2
.eh_frame:000000000000B7ED                 db  45h ; E
.eh_frame:000000000000B7EE                 db  0Eh
.eh_frame:000000000000B7EF                 db  90h
.eh_frame:000000000000B7F0                 db    2
.eh_frame:000000000000B7F1                 db  5Fh ; _
.eh_frame:000000000000B7F2                 db  0Eh
.eh_frame:000000000000B7F3                 db 0F0h
.eh_frame:000000000000B7F4                 db    1
.eh_frame:000000000000B7F5                 db  64h ; d
.eh_frame:000000000000B7F6                 db  0Ah
.eh_frame:000000000000B7F7                 db  0Eh
.eh_frame:000000000000B7F8                 db  38h ; 8
.eh_frame:000000000000B7F9                 db  41h ; A
.eh_frame:000000000000B7FA                 db  0Eh
.eh_frame:000000000000B7FB                 db  30h ; 0
.eh_frame:000000000000B7FC                 db  41h ; A
.eh_frame:000000000000B7FD                 db  0Eh
.eh_frame:000000000000B7FE                 db  28h ; (
.eh_frame:000000000000B7FF                 db  42h ; B
.eh_frame:000000000000B800                 db  0Eh
.eh_frame:000000000000B801                 db  20h
.eh_frame:000000000000B802                 db  42h ; B
.eh_frame:000000000000B803                 db  0Eh
.eh_frame:000000000000B804                 db  18h
.eh_frame:000000000000B805                 db  42h ; B
.eh_frame:000000000000B806                 db  0Eh
.eh_frame:000000000000B807                 db  10h
.eh_frame:000000000000B808                 db  42h ; B
.eh_frame:000000000000B809                 db  0Eh
.eh_frame:000000000000B80A                 db    8
.eh_frame:000000000000B80B                 db  44h ; D
.eh_frame:000000000000B80C                 db  0Bh
.eh_frame:000000000000B80D                 db    3
.eh_frame:000000000000B80E                 db  99h
.eh_frame:000000000000B80F                 db    5
.eh_frame:000000000000B810                 db  0Eh
.eh_frame:000000000000B811                 db 0F8h
.eh_frame:000000000000B812                 db    1
.eh_frame:000000000000B813                 db  4Dh ; M
.eh_frame:000000000000B814                 db  0Eh
.eh_frame:000000000000B815                 db  80h
.eh_frame:000000000000B816                 db    2
.eh_frame:000000000000B817                 db  44h ; D
.eh_frame:000000000000B818                 db  0Eh
.eh_frame:000000000000B819                 db  88h
.eh_frame:000000000000B81A                 db    2
.eh_frame:000000000000B81B                 db  47h ; G
.eh_frame:000000000000B81C                 db  0Eh
.eh_frame:000000000000B81D                 db  90h
.eh_frame:000000000000B81E                 db    2
.eh_frame:000000000000B81F                 db  5Bh ; [
.eh_frame:000000000000B820                 db  0Eh
.eh_frame:000000000000B821                 db 0F0h
.eh_frame:000000000000B822                 db    1
.eh_frame:000000000000B823                 db    0
.eh_frame:000000000000B824                 db  68h ; h
.eh_frame:000000000000B825                 db    0
.eh_frame:000000000000B826                 db    0
.eh_frame:000000000000B827                 db    0
.eh_frame:000000000000B828                 db    8
.eh_frame:000000000000B829                 db    3
.eh_frame:000000000000B82A                 db    0
.eh_frame:000000000000B82B                 db    0
.eh_frame:000000000000B82C                 db 0C4h
.eh_frame:000000000000B82D                 db  90h
.eh_frame:000000000000B82E                 db 0FFh
.eh_frame:000000000000B82F                 db 0FFh
.eh_frame:000000000000B830                 db 0ABh
.eh_frame:000000000000B831                 db    1
.eh_frame:000000000000B832                 db    0
.eh_frame:000000000000B833                 db    0
.eh_frame:000000000000B834                 db    0
.eh_frame:000000000000B835                 db  42h ; B
.eh_frame:000000000000B836                 db  0Eh
.eh_frame:000000000000B837                 db  10h
.eh_frame:000000000000B838                 db  8Fh
.eh_frame:000000000000B839                 db    2
.eh_frame:000000000000B83A                 db  42h ; B
.eh_frame:000000000000B83B                 db  0Eh
.eh_frame:000000000000B83C                 db  18h
.eh_frame:000000000000B83D                 db  8Eh
.eh_frame:000000000000B83E                 db    3
.eh_frame:000000000000B83F                 db  45h ; E
.eh_frame:000000000000B840                 db  0Eh
.eh_frame:000000000000B841                 db  20h
.eh_frame:000000000000B842                 db  8Dh
.eh_frame:000000000000B843                 db    4
.eh_frame:000000000000B844                 db  42h ; B
.eh_frame:000000000000B845                 db  0Eh
.eh_frame:000000000000B846                 db  28h ; (
.eh_frame:000000000000B847                 db  8Ch
.eh_frame:000000000000B848                 db    5
.eh_frame:000000000000B849                 db  44h ; D
.eh_frame:000000000000B84A                 db  0Eh
.eh_frame:000000000000B84B                 db  30h ; 0
.eh_frame:000000000000B84C                 db  86h
.eh_frame:000000000000B84D                 db    6
.eh_frame:000000000000B84E                 db  41h ; A
.eh_frame:000000000000B84F                 db  0Eh
.eh_frame:000000000000B850                 db  38h ; 8
.eh_frame:000000000000B851                 db  83h
.eh_frame:000000000000B852                 db    7
.eh_frame:000000000000B853                 db  47h ; G
.eh_frame:000000000000B854                 db  0Eh
.eh_frame:000000000000B855                 db  60h ; `
.eh_frame:000000000000B856                 db    2
.eh_frame:000000000000B857                 db  99h
.eh_frame:000000000000B858                 db  0Eh
.eh_frame:000000000000B859                 db  68h ; h
.eh_frame:000000000000B85A                 db  5Fh ; _
.eh_frame:000000000000B85B                 db  0Eh
.eh_frame:000000000000B85C                 db  70h ; p
.eh_frame:000000000000B85D                 db  46h ; F
.eh_frame:000000000000B85E                 db  0Eh
.eh_frame:000000000000B85F                 db  78h ; x
.eh_frame:000000000000B860                 db  42h ; B
.eh_frame:000000000000B861                 db  0Eh
.eh_frame:000000000000B862                 db  80h
.eh_frame:000000000000B863                 db    1
.eh_frame:000000000000B864                 db  59h ; Y
.eh_frame:000000000000B865                 db  0Eh
.eh_frame:000000000000B866                 db  60h ; `
.eh_frame:000000000000B867                 db    2
.eh_frame:000000000000B868                 db  40h ; @
.eh_frame:000000000000B869                 db  0Eh
.eh_frame:000000000000B86A                 db  68h ; h
.eh_frame:000000000000B86B                 db  4Bh ; K
.eh_frame:000000000000B86C                 db  0Eh
.eh_frame:000000000000B86D                 db  70h ; p
.eh_frame:000000000000B86E                 db  43h ; C
.eh_frame:000000000000B86F                 db  0Eh
.eh_frame:000000000000B870                 db  78h ; x
.eh_frame:000000000000B871                 db  45h ; E
.eh_frame:000000000000B872                 db  0Eh
.eh_frame:000000000000B873                 db  80h
.eh_frame:000000000000B874                 db    1
.eh_frame:000000000000B875                 db  5Eh ; ^
.eh_frame:000000000000B876                 db  0Eh
.eh_frame:000000000000B877                 db  60h ; `
.eh_frame:000000000000B878                 db  4Ch ; L
.eh_frame:000000000000B879                 db  0Ah
.eh_frame:000000000000B87A                 db  0Eh
.eh_frame:000000000000B87B                 db  38h ; 8
.eh_frame:000000000000B87C                 db  44h ; D
.eh_frame:000000000000B87D                 db  0Eh
.eh_frame:000000000000B87E                 db  30h ; 0
.eh_frame:000000000000B87F                 db  41h ; A
.eh_frame:000000000000B880                 db  0Eh
.eh_frame:000000000000B881                 db  28h ; (
.eh_frame:000000000000B882                 db  42h ; B
.eh_frame:000000000000B883                 db  0Eh
.eh_frame:000000000000B884                 db  20h
.eh_frame:000000000000B885                 db  42h ; B
.eh_frame:000000000000B886                 db  0Eh
.eh_frame:000000000000B887                 db  18h
.eh_frame:000000000000B888                 db  42h ; B
.eh_frame:000000000000B889                 db  0Eh
.eh_frame:000000000000B88A                 db  10h
.eh_frame:000000000000B88B                 db  42h ; B
.eh_frame:000000000000B88C                 db  0Eh
.eh_frame:000000000000B88D                 db    8
.eh_frame:000000000000B88E                 db  46h ; F
.eh_frame:000000000000B88F                 db  0Bh
.eh_frame:000000000000B890                 db  28h ; (
.eh_frame:000000000000B891                 db    0
.eh_frame:000000000000B892                 db    0
.eh_frame:000000000000B893                 db    0
.eh_frame:000000000000B894                 db  74h ; t
.eh_frame:000000000000B895                 db    3
.eh_frame:000000000000B896                 db    0
.eh_frame:000000000000B897                 db    0
.eh_frame:000000000000B898                 db    8
.eh_frame:000000000000B899                 db  92h
.eh_frame:000000000000B89A                 db 0FFh
.eh_frame:000000000000B89B                 db 0FFh
.eh_frame:000000000000B89C                 db  36h ; 6
.eh_frame:000000000000B89D                 db    0
.eh_frame:000000000000B89E                 db    0
.eh_frame:000000000000B89F                 db    0
.eh_frame:000000000000B8A0                 db    0
.eh_frame:000000000000B8A1                 db  42h ; B
.eh_frame:000000000000B8A2                 db  0Eh
.eh_frame:000000000000B8A3                 db  10h
.eh_frame:000000000000B8A4                 db  8Ch
.eh_frame:000000000000B8A5                 db    2
.eh_frame:000000000000B8A6                 db  41h ; A
.eh_frame:000000000000B8A7                 db  0Eh
.eh_frame:000000000000B8A8                 db  18h
.eh_frame:000000000000B8A9                 db  86h
.eh_frame:000000000000B8AA                 db    3
.eh_frame:000000000000B8AB                 db  41h ; A
.eh_frame:000000000000B8AC                 db  0Eh
.eh_frame:000000000000B8AD                 db  20h
.eh_frame:000000000000B8AE                 db  83h
.eh_frame:000000000000B8AF                 db    4
.eh_frame:000000000000B8B0                 db  6Eh ; n
.eh_frame:000000000000B8B1                 db  0Eh
.eh_frame:000000000000B8B2                 db  18h
.eh_frame:000000000000B8B3                 db  41h ; A
.eh_frame:000000000000B8B4                 db  0Eh
.eh_frame:000000000000B8B5                 db  10h
.eh_frame:000000000000B8B6                 db  42h ; B
.eh_frame:000000000000B8B7                 db  0Eh
.eh_frame:000000000000B8B8                 db    8
.eh_frame:000000000000B8B9                 db    0
.eh_frame:000000000000B8BA                 db    0
.eh_frame:000000000000B8BB                 db    0
.eh_frame:000000000000B8BC                 db  10h
.eh_frame:000000000000B8BD                 db    0
.eh_frame:000000000000B8BE                 db    0
.eh_frame:000000000000B8BF                 db    0
.eh_frame:000000000000B8C0                 db 0A0h
.eh_frame:000000000000B8C1                 db    3
.eh_frame:000000000000B8C2                 db    0
.eh_frame:000000000000B8C3                 db    0
.eh_frame:000000000000B8C4                 db  1Ch
.eh_frame:000000000000B8C5                 db  92h
.eh_frame:000000000000B8C6                 db 0FFh
.eh_frame:000000000000B8C7                 db 0FFh
.eh_frame:000000000000B8C8                 db  11h
.eh_frame:000000000000B8C9                 db    0
.eh_frame:000000000000B8CA                 db    0
.eh_frame:000000000000B8CB                 db    0
.eh_frame:000000000000B8CC                 db    0
.eh_frame:000000000000B8CD                 db    0
.eh_frame:000000000000B8CE                 db    0
.eh_frame:000000000000B8CF                 db    0
.eh_frame:000000000000B8D0                 db  10h
.eh_frame:000000000000B8D1                 db    0
.eh_frame:000000000000B8D2                 db    0
.eh_frame:000000000000B8D3                 db    0
.eh_frame:000000000000B8D4                 db 0B4h
.eh_frame:000000000000B8D5                 db    3
.eh_frame:000000000000B8D6                 db    0
.eh_frame:000000000000B8D7                 db    0
.eh_frame:000000000000B8D8                 db  28h ; (
.eh_frame:000000000000B8D9                 db  92h
.eh_frame:000000000000B8DA                 db 0FFh
.eh_frame:000000000000B8DB                 db 0FFh
.eh_frame:000000000000B8DC                 db  11h
.eh_frame:000000000000B8DD                 db    0
.eh_frame:000000000000B8DE                 db    0
.eh_frame:000000000000B8DF                 db    0
.eh_frame:000000000000B8E0                 db    0
.eh_frame:000000000000B8E1                 db    0
.eh_frame:000000000000B8E2                 db    0
.eh_frame:000000000000B8E3                 db    0
.eh_frame:000000000000B8E4                 db  10h
.eh_frame:000000000000B8E5                 db    0
.eh_frame:000000000000B8E6                 db    0
.eh_frame:000000000000B8E7                 db    0
.eh_frame:000000000000B8E8                 db 0C8h
.eh_frame:000000000000B8E9                 db    3
.eh_frame:000000000000B8EA                 db    0
.eh_frame:000000000000B8EB                 db    0
.eh_frame:000000000000B8EC                 db  34h ; 4
.eh_frame:000000000000B8ED                 db  92h
.eh_frame:000000000000B8EE                 db 0FFh
.eh_frame:000000000000B8EF                 db 0FFh
.eh_frame:000000000000B8F0                 db  35h ; 5
.eh_frame:000000000000B8F1                 db    0
.eh_frame:000000000000B8F2                 db    0
.eh_frame:000000000000B8F3                 db    0
.eh_frame:000000000000B8F4                 db    0
.eh_frame:000000000000B8F5                 db    0
.eh_frame:000000000000B8F6                 db    0
.eh_frame:000000000000B8F7                 db    0
.eh_frame:000000000000B8F8                 db  10h
.eh_frame:000000000000B8F9                 db    0
.eh_frame:000000000000B8FA                 db    0
.eh_frame:000000000000B8FB                 db    0
.eh_frame:000000000000B8FC                 db 0DCh
.eh_frame:000000000000B8FD                 db    3
.eh_frame:000000000000B8FE                 db    0
.eh_frame:000000000000B8FF                 db    0
.eh_frame:000000000000B900                 db  60h ; `
.eh_frame:000000000000B901                 db  92h
.eh_frame:000000000000B902                 db 0FFh
.eh_frame:000000000000B903                 db 0FFh
.eh_frame:000000000000B904                 db  15h
.eh_frame:000000000000B905                 db    0
.eh_frame:000000000000B906                 db    0
.eh_frame:000000000000B907                 db    0
.eh_frame:000000000000B908                 db    0
.eh_frame:000000000000B909                 db    0
.eh_frame:000000000000B90A                 db    0
.eh_frame:000000000000B90B                 db    0
.eh_frame:000000000000B90C                 db  10h
.eh_frame:000000000000B90D                 db    0
.eh_frame:000000000000B90E                 db    0
.eh_frame:000000000000B90F                 db    0
.eh_frame:000000000000B910                 db 0F0h
.eh_frame:000000000000B911                 db    3
.eh_frame:000000000000B912                 db    0
.eh_frame:000000000000B913                 db    0
.eh_frame:000000000000B914                 db  6Ch ; l
.eh_frame:000000000000B915                 db  92h
.eh_frame:000000000000B916                 db 0FFh
.eh_frame:000000000000B917                 db 0FFh
.eh_frame:000000000000B918                 db  30h ; 0
.eh_frame:000000000000B919                 db    0
.eh_frame:000000000000B91A                 db    0
.eh_frame:000000000000B91B                 db    0
.eh_frame:000000000000B91C                 db    0
.eh_frame:000000000000B91D                 db  6Bh ; k
.eh_frame:000000000000B91E                 db  0Eh
.eh_frame:000000000000B91F                 db  10h
.eh_frame:000000000000B920                 db  50h ; P
.eh_frame:000000000000B921                 db    0
.eh_frame:000000000000B922                 db    0
.eh_frame:000000000000B923                 db    0
.eh_frame:000000000000B924                 db    4
.eh_frame:000000000000B925                 db    4
.eh_frame:000000000000B926                 db    0
.eh_frame:000000000000B927                 db    0
.eh_frame:000000000000B928                 db  88h
.eh_frame:000000000000B929                 db  92h
.eh_frame:000000000000B92A                 db 0FFh
.eh_frame:000000000000B92B                 db 0FFh
.eh_frame:000000000000B92C                 db  74h ; t
.eh_frame:000000000000B92D                 db    0
.eh_frame:000000000000B92E                 db    0
.eh_frame:000000000000B92F                 db    0
.eh_frame:000000000000B930                 db    0
.eh_frame:000000000000B931                 db  42h ; B
.eh_frame:000000000000B932                 db  0Eh
.eh_frame:000000000000B933                 db  10h
.eh_frame:000000000000B934                 db  8Fh
.eh_frame:000000000000B935                 db    2
.eh_frame:000000000000B936                 db  42h ; B
.eh_frame:000000000000B937                 db  0Eh
.eh_frame:000000000000B938                 db  18h
.eh_frame:000000000000B939                 db  8Eh
.eh_frame:000000000000B93A                 db    3
.eh_frame:000000000000B93B                 db  49h ; I
.eh_frame:000000000000B93C                 db  0Eh
.eh_frame:000000000000B93D                 db  20h
.eh_frame:000000000000B93E                 db  8Dh
.eh_frame:000000000000B93F                 db    4
.eh_frame:000000000000B940                 db  42h ; B
.eh_frame:000000000000B941                 db  0Eh
.eh_frame:000000000000B942                 db  28h ; (
.eh_frame:000000000000B943                 db  8Ch
.eh_frame:000000000000B944                 db    5
.eh_frame:000000000000B945                 db  44h ; D
.eh_frame:000000000000B946                 db  0Eh
.eh_frame:000000000000B947                 db  30h ; 0
.eh_frame:000000000000B948                 db  86h
.eh_frame:000000000000B949                 db    6
.eh_frame:000000000000B94A                 db  41h ; A
.eh_frame:000000000000B94B                 db  0Eh
.eh_frame:000000000000B94C                 db  38h ; 8
.eh_frame:000000000000B94D                 db  83h
.eh_frame:000000000000B94E                 db    7
.eh_frame:000000000000B94F                 db  4Dh ; M
.eh_frame:000000000000B950                 db  0Eh
.eh_frame:000000000000B951                 db  50h ; P
.eh_frame:000000000000B952                 db  5Fh ; _
.eh_frame:000000000000B953                 db  0Eh
.eh_frame:000000000000B954                 db  58h ; X
.eh_frame:000000000000B955                 db  47h ; G
.eh_frame:000000000000B956                 db  0Eh
.eh_frame:000000000000B957                 db  60h ; `
.eh_frame:000000000000B958                 db  46h ; F
.eh_frame:000000000000B959                 db  0Eh
.eh_frame:000000000000B95A                 db  68h ; h
.eh_frame:000000000000B95B                 db  44h ; D
.eh_frame:000000000000B95C                 db  0Eh
.eh_frame:000000000000B95D                 db  70h ; p
.eh_frame:000000000000B95E                 db  58h ; X
.eh_frame:000000000000B95F                 db  0Eh
.eh_frame:000000000000B960                 db  38h ; 8
.eh_frame:000000000000B961                 db  41h ; A
.eh_frame:000000000000B962                 db  0Eh
.eh_frame:000000000000B963                 db  30h ; 0
.eh_frame:000000000000B964                 db  41h ; A
.eh_frame:000000000000B965                 db  0Eh
.eh_frame:000000000000B966                 db  28h ; (
.eh_frame:000000000000B967                 db  42h ; B
.eh_frame:000000000000B968                 db  0Eh
.eh_frame:000000000000B969                 db  20h
.eh_frame:000000000000B96A                 db  42h ; B
.eh_frame:000000000000B96B                 db  0Eh
.eh_frame:000000000000B96C                 db  18h
.eh_frame:000000000000B96D                 db  42h ; B
.eh_frame:000000000000B96E                 db  0Eh
.eh_frame:000000000000B96F                 db  10h
.eh_frame:000000000000B970                 db  42h ; B
.eh_frame:000000000000B971                 db  0Eh
.eh_frame:000000000000B972                 db    8
.eh_frame:000000000000B973                 db    0
.eh_frame:000000000000B974                 db  68h ; h
.eh_frame:000000000000B975                 db    0
.eh_frame:000000000000B976                 db    0
.eh_frame:000000000000B977                 db    0
.eh_frame:000000000000B978                 db  58h ; X
.eh_frame:000000000000B979                 db    4
.eh_frame:000000000000B97A                 db    0
.eh_frame:000000000000B97B                 db    0
.eh_frame:000000000000B97C                 db 0B4h
.eh_frame:000000000000B97D                 db  92h
.eh_frame:000000000000B97E                 db 0FFh
.eh_frame:000000000000B97F                 db 0FFh
.eh_frame:000000000000B980                 db 0E3h
.eh_frame:000000000000B981                 db    0
.eh_frame:000000000000B982                 db    0
.eh_frame:000000000000B983                 db    0
.eh_frame:000000000000B984                 db    0
.eh_frame:000000000000B985                 db  42h ; B
.eh_frame:000000000000B986                 db  0Eh
.eh_frame:000000000000B987                 db  10h
.eh_frame:000000000000B988                 db  8Fh
.eh_frame:000000000000B989                 db    2
.eh_frame:000000000000B98A                 db  42h ; B
.eh_frame:000000000000B98B                 db  0Eh
.eh_frame:000000000000B98C                 db  18h
.eh_frame:000000000000B98D                 db  8Eh
.eh_frame:000000000000B98E                 db    3
.eh_frame:000000000000B98F                 db  49h ; I
.eh_frame:000000000000B990                 db  0Eh
.eh_frame:000000000000B991                 db  20h
.eh_frame:000000000000B992                 db  8Dh
.eh_frame:000000000000B993                 db    4
.eh_frame:000000000000B994                 db  42h ; B
.eh_frame:000000000000B995                 db  0Eh
.eh_frame:000000000000B996                 db  28h ; (
.eh_frame:000000000000B997                 db  8Ch
.eh_frame:000000000000B998                 db    5
.eh_frame:000000000000B999                 db  44h ; D
.eh_frame:000000000000B99A                 db  0Eh
.eh_frame:000000000000B99B                 db  30h ; 0
.eh_frame:000000000000B99C                 db  86h
.eh_frame:000000000000B99D                 db    6
.eh_frame:000000000000B99E                 db  41h ; A
.eh_frame:000000000000B99F                 db  0Eh
.eh_frame:000000000000B9A0                 db  38h ; 8
.eh_frame:000000000000B9A1                 db  83h
.eh_frame:000000000000B9A2                 db    7
.eh_frame:000000000000B9A3                 db  4Dh ; M
.eh_frame:000000000000B9A4                 db  0Eh
.eh_frame:000000000000B9A5                 db  70h ; p
.eh_frame:000000000000B9A6                 db  65h ; e
.eh_frame:000000000000B9A7                 db  0Eh
.eh_frame:000000000000B9A8                 db  78h ; x
.eh_frame:000000000000B9A9                 db  4Dh ; M
.eh_frame:000000000000B9AA                 db  0Eh
.eh_frame:000000000000B9AB                 db  80h
.eh_frame:000000000000B9AC                 db    1
.eh_frame:000000000000B9AD                 db  46h ; F
.eh_frame:000000000000B9AE                 db  0Eh
.eh_frame:000000000000B9AF                 db  88h
.eh_frame:000000000000B9B0                 db    1
.eh_frame:000000000000B9B1                 db  42h ; B
.eh_frame:000000000000B9B2                 db  0Eh
.eh_frame:000000000000B9B3                 db  90h
.eh_frame:000000000000B9B4                 db    1
.eh_frame:000000000000B9B5                 db  5Eh ; ^
.eh_frame:000000000000B9B6                 db  0Eh
.eh_frame:000000000000B9B7                 db  70h ; p
.eh_frame:000000000000B9B8                 db  56h ; V
.eh_frame:000000000000B9B9                 db  0Eh
.eh_frame:000000000000B9BA                 db  78h ; x
.eh_frame:000000000000B9BB                 db  43h ; C
.eh_frame:000000000000B9BC                 db  0Eh
.eh_frame:000000000000B9BD                 db  80h
.eh_frame:000000000000B9BE                 db    1
.eh_frame:000000000000B9BF                 db  43h ; C
.eh_frame:000000000000B9C0                 db  0Eh
.eh_frame:000000000000B9C1                 db  88h
.eh_frame:000000000000B9C2                 db    1
.eh_frame:000000000000B9C3                 db  56h ; V
.eh_frame:000000000000B9C4                 db  0Eh
.eh_frame:000000000000B9C5                 db  90h
.eh_frame:000000000000B9C6                 db    1
.eh_frame:000000000000B9C7                 db  52h ; R
.eh_frame:000000000000B9C8                 db  0Eh
.eh_frame:000000000000B9C9                 db  70h ; p
.eh_frame:000000000000B9CA                 db  5Bh ; [
.eh_frame:000000000000B9CB                 db  0Eh
.eh_frame:000000000000B9CC                 db  38h ; 8
.eh_frame:000000000000B9CD                 db  41h ; A
.eh_frame:000000000000B9CE                 db  0Eh
.eh_frame:000000000000B9CF                 db  30h ; 0
.eh_frame:000000000000B9D0                 db  41h ; A
.eh_frame:000000000000B9D1                 db  0Eh
.eh_frame:000000000000B9D2                 db  28h ; (
.eh_frame:000000000000B9D3                 db  42h ; B
.eh_frame:000000000000B9D4                 db  0Eh
.eh_frame:000000000000B9D5                 db  20h
.eh_frame:000000000000B9D6                 db  42h ; B
.eh_frame:000000000000B9D7                 db  0Eh
.eh_frame:000000000000B9D8                 db  18h
.eh_frame:000000000000B9D9                 db  42h ; B
.eh_frame:000000000000B9DA                 db  0Eh
.eh_frame:000000000000B9DB                 db  10h
.eh_frame:000000000000B9DC                 db  42h ; B
.eh_frame:000000000000B9DD                 db  0Eh
.eh_frame:000000000000B9DE                 db    8
.eh_frame:000000000000B9DF                 db    0
.eh_frame:000000000000B9E0                 db  10h
.eh_frame:000000000000B9E1                 db    0
.eh_frame:000000000000B9E2                 db    0
.eh_frame:000000000000B9E3                 db    0
.eh_frame:000000000000B9E4                 db 0C4h
.eh_frame:000000000000B9E5                 db    4
.eh_frame:000000000000B9E6                 db    0
.eh_frame:000000000000B9E7                 db    0
.eh_frame:000000000000B9E8                 db  38h ; 8
.eh_frame:000000000000B9E9                 db  93h
.eh_frame:000000000000B9EA                 db 0FFh
.eh_frame:000000000000B9EB                 db 0FFh
.eh_frame:000000000000B9EC                 db  0Ah
.eh_frame:000000000000B9ED                 db    0
.eh_frame:000000000000B9EE                 db    0
.eh_frame:000000000000B9EF                 db    0
.eh_frame:000000000000B9F0                 db    0
.eh_frame:000000000000B9F1                 db    0
.eh_frame:000000000000B9F2                 db    0
.eh_frame:000000000000B9F3                 db    0
.eh_frame:000000000000B9F4                 db  28h ; (
.eh_frame:000000000000B9F5                 db    0
.eh_frame:000000000000B9F6                 db    0
.eh_frame:000000000000B9F7                 db    0
.eh_frame:000000000000B9F8                 db 0D8h
.eh_frame:000000000000B9F9                 db    4
.eh_frame:000000000000B9FA                 db    0
.eh_frame:000000000000B9FB                 db    0
.eh_frame:000000000000B9FC                 db  34h ; 4
.eh_frame:000000000000B9FD                 db  93h
.eh_frame:000000000000B9FE                 db 0FFh
.eh_frame:000000000000B9FF                 db 0FFh
.eh_frame:000000000000BA00                 db  93h
.eh_frame:000000000000BA01                 db    0
.eh_frame:000000000000BA02                 db    0
.eh_frame:000000000000BA03                 db    0
.eh_frame:000000000000BA04                 db    0
.eh_frame:000000000000BA05                 db  48h ; H
.eh_frame:000000000000BA06                 db  0Eh
.eh_frame:000000000000BA07                 db  10h
.eh_frame:000000000000BA08                 db  8Ch
.eh_frame:000000000000BA09                 db    2
.eh_frame:000000000000BA0A                 db  48h ; H
.eh_frame:000000000000BA0B                 db  0Eh
.eh_frame:000000000000BA0C                 db  18h
.eh_frame:000000000000BA0D                 db  86h
.eh_frame:000000000000BA0E                 db    3
.eh_frame:000000000000BA0F                 db  41h ; A
.eh_frame:000000000000BA10                 db  0Eh
.eh_frame:000000000000BA11                 db  20h
.eh_frame:000000000000BA12                 db  83h
.eh_frame:000000000000BA13                 db    4
.eh_frame:000000000000BA14                 db    2
.eh_frame:000000000000BA15                 db  74h ; t
.eh_frame:000000000000BA16                 db  0Eh
.eh_frame:000000000000BA17                 db  18h
.eh_frame:000000000000BA18                 db  4Bh ; K
.eh_frame:000000000000BA19                 db  0Eh
.eh_frame:000000000000BA1A                 db  10h
.eh_frame:000000000000BA1B                 db  42h ; B
.eh_frame:000000000000BA1C                 db  0Eh
.eh_frame:000000000000BA1D                 db    8
.eh_frame:000000000000BA1E                 db    0
.eh_frame:000000000000BA1F                 db    0
.eh_frame:000000000000BA20                 db  10h
.eh_frame:000000000000BA21                 db    0
.eh_frame:000000000000BA22                 db    0
.eh_frame:000000000000BA23                 db    0
.eh_frame:000000000000BA24                 db    4
.eh_frame:000000000000BA25                 db    5
.eh_frame:000000000000BA26                 db    0
.eh_frame:000000000000BA27                 db    0
.eh_frame:000000000000BA28                 db 0A8h
.eh_frame:000000000000BA29                 db  93h
.eh_frame:000000000000BA2A                 db 0FFh
.eh_frame:000000000000BA2B                 db 0FFh
.eh_frame:000000000000BA2C                 db  13h
.eh_frame:000000000000BA2D                 db    0
.eh_frame:000000000000BA2E                 db    0
.eh_frame:000000000000BA2F                 db    0
.eh_frame:000000000000BA30                 db    0
.eh_frame:000000000000BA31                 db    0
.eh_frame:000000000000BA32                 db    0
.eh_frame:000000000000BA33                 db    0
.eh_frame:000000000000BA34                 db  10h
.eh_frame:000000000000BA35                 db    0
.eh_frame:000000000000BA36                 db    0
.eh_frame:000000000000BA37                 db    0
.eh_frame:000000000000BA38                 db  18h
.eh_frame:000000000000BA39                 db    5
.eh_frame:000000000000BA3A                 db    0
.eh_frame:000000000000BA3B                 db    0
.eh_frame:000000000000BA3C                 db 0B4h
.eh_frame:000000000000BA3D                 db  93h
.eh_frame:000000000000BA3E                 db 0FFh
.eh_frame:000000000000BA3F                 db 0FFh
.eh_frame:000000000000BA40                 db  0Ch
.eh_frame:000000000000BA41                 db    0
.eh_frame:000000000000BA42                 db    0
.eh_frame:000000000000BA43                 db    0
.eh_frame:000000000000BA44                 db    0
.eh_frame:000000000000BA45                 db    0
.eh_frame:000000000000BA46                 db    0
.eh_frame:000000000000BA47                 db    0
.eh_frame:000000000000BA48                 db  10h
.eh_frame:000000000000BA49                 db    0
.eh_frame:000000000000BA4A                 db    0
.eh_frame:000000000000BA4B                 db    0
.eh_frame:000000000000BA4C                 db  2Ch ; ,
.eh_frame:000000000000BA4D                 db    5
.eh_frame:000000000000BA4E                 db    0
.eh_frame:000000000000BA4F                 db    0
.eh_frame:000000000000BA50                 db 0B0h
.eh_frame:000000000000BA51                 db  93h
.eh_frame:000000000000BA52                 db 0FFh
.eh_frame:000000000000BA53                 db 0FFh
.eh_frame:000000000000BA54                 db  18h
.eh_frame:000000000000BA55                 db    0
.eh_frame:000000000000BA56                 db    0
.eh_frame:000000000000BA57                 db    0
.eh_frame:000000000000BA58                 db    0
.eh_frame:000000000000BA59                 db    0
.eh_frame:000000000000BA5A                 db    0
.eh_frame:000000000000BA5B                 db    0
.eh_frame:000000000000BA5C                 db  10h
.eh_frame:000000000000BA5D                 db    0
.eh_frame:000000000000BA5E                 db    0
.eh_frame:000000000000BA5F                 db    0
.eh_frame:000000000000BA60                 db  40h ; @
.eh_frame:000000000000BA61                 db    5
.eh_frame:000000000000BA62                 db    0
.eh_frame:000000000000BA63                 db    0
.eh_frame:000000000000BA64                 db 0BCh
.eh_frame:000000000000BA65                 db  93h
.eh_frame:000000000000BA66                 db 0FFh
.eh_frame:000000000000BA67                 db 0FFh
.eh_frame:000000000000BA68                 db  14h
.eh_frame:000000000000BA69                 db    0
.eh_frame:000000000000BA6A                 db    0
.eh_frame:000000000000BA6B                 db    0
.eh_frame:000000000000BA6C                 db    0
.eh_frame:000000000000BA6D                 db    0
.eh_frame:000000000000BA6E                 db    0
.eh_frame:000000000000BA6F                 db    0
.eh_frame:000000000000BA70                 db  18h
.eh_frame:000000000000BA71                 db    0
.eh_frame:000000000000BA72                 db    0
.eh_frame:000000000000BA73                 db    0
.eh_frame:000000000000BA74                 db  54h ; T
.eh_frame:000000000000BA75                 db    5
.eh_frame:000000000000BA76                 db    0
.eh_frame:000000000000BA77                 db    0
.eh_frame:000000000000BA78                 db 0C8h
.eh_frame:000000000000BA79                 db  93h
.eh_frame:000000000000BA7A                 db 0FFh
.eh_frame:000000000000BA7B                 db 0FFh
.eh_frame:000000000000BA7C                 db  8Eh
.eh_frame:000000000000BA7D                 db    0
.eh_frame:000000000000BA7E                 db    0
.eh_frame:000000000000BA7F                 db    0
.eh_frame:000000000000BA80                 db    0
.eh_frame:000000000000BA81                 db  44h ; D
.eh_frame:000000000000BA82                 db  0Eh
.eh_frame:000000000000BA83                 db  50h ; P
.eh_frame:000000000000BA84                 db    2
.eh_frame:000000000000BA85                 db  7Fh ; 
.eh_frame:000000000000BA86                 db  0Ah
.eh_frame:000000000000BA87                 db  0Eh
.eh_frame:000000000000BA88                 db    8
.eh_frame:000000000000BA89                 db  41h ; A
.eh_frame:000000000000BA8A                 db  0Bh
.eh_frame:000000000000BA8B                 db    0
.eh_frame:000000000000BA8C                 db  18h
.eh_frame:000000000000BA8D                 db    0
.eh_frame:000000000000BA8E                 db    0
.eh_frame:000000000000BA8F                 db    0
.eh_frame:000000000000BA90                 db  70h ; p
.eh_frame:000000000000BA91                 db    5
.eh_frame:000000000000BA92                 db    0
.eh_frame:000000000000BA93                 db    0
.eh_frame:000000000000BA94                 db  3Ch ; <
.eh_frame:000000000000BA95                 db  94h
.eh_frame:000000000000BA96                 db 0FFh
.eh_frame:000000000000BA97                 db 0FFh
.eh_frame:000000000000BA98                 db  8Ah
.eh_frame:000000000000BA99                 db    0
.eh_frame:000000000000BA9A                 db    0
.eh_frame:000000000000BA9B                 db    0
.eh_frame:000000000000BA9C                 db    0
.eh_frame:000000000000BA9D                 db  44h ; D
.eh_frame:000000000000BA9E                 db  0Eh
.eh_frame:000000000000BA9F                 db  50h ; P
.eh_frame:000000000000BAA0                 db    2
.eh_frame:000000000000BAA1                 db  7Bh ; {
.eh_frame:000000000000BAA2                 db  0Ah
.eh_frame:000000000000BAA3                 db  0Eh
.eh_frame:000000000000BAA4                 db    8
.eh_frame:000000000000BAA5                 db  41h ; A
.eh_frame:000000000000BAA6                 db  0Bh
.eh_frame:000000000000BAA7                 db    0
.eh_frame:000000000000BAA8                 db  10h
.eh_frame:000000000000BAA9                 db    0
.eh_frame:000000000000BAAA                 db    0
.eh_frame:000000000000BAAB                 db    0
.eh_frame:000000000000BAAC                 db  8Ch
.eh_frame:000000000000BAAD                 db    5
.eh_frame:000000000000BAAE                 db    0
.eh_frame:000000000000BAAF                 db    0
.eh_frame:000000000000BAB0                 db 0B0h
.eh_frame:000000000000BAB1                 db  94h
.eh_frame:000000000000BAB2                 db 0FFh
.eh_frame:000000000000BAB3                 db 0FFh
.eh_frame:000000000000BAB4                 db  0Ch
.eh_frame:000000000000BAB5                 db    0
.eh_frame:000000000000BAB6                 db    0
.eh_frame:000000000000BAB7                 db    0
.eh_frame:000000000000BAB8                 db    0
.eh_frame:000000000000BAB9                 db    0
.eh_frame:000000000000BABA                 db    0
.eh_frame:000000000000BABB                 db    0
.eh_frame:000000000000BABC                 db  10h
.eh_frame:000000000000BABD                 db    0
.eh_frame:000000000000BABE                 db    0
.eh_frame:000000000000BABF                 db    0
.eh_frame:000000000000BAC0                 db 0A0h
.eh_frame:000000000000BAC1                 db    5
.eh_frame:000000000000BAC2                 db    0
.eh_frame:000000000000BAC3                 db    0
.eh_frame:000000000000BAC4                 db 0ACh
.eh_frame:000000000000BAC5                 db  94h
.eh_frame:000000000000BAC6                 db 0FFh
.eh_frame:000000000000BAC7                 db 0FFh
.eh_frame:000000000000BAC8                 db  0Fh
.eh_frame:000000000000BAC9                 db    0
.eh_frame:000000000000BACA                 db    0
.eh_frame:000000000000BACB                 db    0
.eh_frame:000000000000BACC                 db    0
.eh_frame:000000000000BACD                 db    0
.eh_frame:000000000000BACE                 db    0
.eh_frame:000000000000BACF                 db    0
.eh_frame:000000000000BAD0                 db  18h
.eh_frame:000000000000BAD1                 db    0
.eh_frame:000000000000BAD2                 db    0
.eh_frame:000000000000BAD3                 db    0
.eh_frame:000000000000BAD4                 db 0B4h
.eh_frame:000000000000BAD5                 db    5
.eh_frame:000000000000BAD6                 db    0
.eh_frame:000000000000BAD7                 db    0
.eh_frame:000000000000BAD8                 db 0A8h
.eh_frame:000000000000BAD9                 db  94h
.eh_frame:000000000000BADA                 db 0FFh
.eh_frame:000000000000BADB                 db 0FFh
.eh_frame:000000000000BADC                 db  98h
.eh_frame:000000000000BADD                 db    0
.eh_frame:000000000000BADE                 db    0
.eh_frame:000000000000BADF                 db    0
.eh_frame:000000000000BAE0                 db    0
.eh_frame:000000000000BAE1                 db  44h ; D
.eh_frame:000000000000BAE2                 db  0Eh
.eh_frame:000000000000BAE3                 db  50h ; P
.eh_frame:000000000000BAE4                 db    2
.eh_frame:000000000000BAE5                 db  8Eh
.eh_frame:000000000000BAE6                 db  0Ah
.eh_frame:000000000000BAE7                 db  0Eh
.eh_frame:000000000000BAE8                 db    8
.eh_frame:000000000000BAE9                 db  41h ; A
.eh_frame:000000000000BAEA                 db  0Bh
.eh_frame:000000000000BAEB                 db    0
.eh_frame:000000000000BAEC                 db  10h
.eh_frame:000000000000BAED                 db    0
.eh_frame:000000000000BAEE                 db    0
.eh_frame:000000000000BAEF                 db    0
.eh_frame:000000000000BAF0                 db 0D0h
.eh_frame:000000000000BAF1                 db    5
.eh_frame:000000000000BAF2                 db    0
.eh_frame:000000000000BAF3                 db    0
.eh_frame:000000000000BAF4                 db  2Ch ; ,
.eh_frame:000000000000BAF5                 db  95h
.eh_frame:000000000000BAF6                 db 0FFh
.eh_frame:000000000000BAF7                 db 0FFh
.eh_frame:000000000000BAF8                 db  10h
.eh_frame:000000000000BAF9                 db    0
.eh_frame:000000000000BAFA                 db    0
.eh_frame:000000000000BAFB                 db    0
.eh_frame:000000000000BAFC                 db    0
.eh_frame:000000000000BAFD                 db    0
.eh_frame:000000000000BAFE                 db    0
.eh_frame:000000000000BAFF                 db    0
.eh_frame:000000000000BB00                 db  10h
.eh_frame:000000000000BB01                 db    0
.eh_frame:000000000000BB02                 db    0
.eh_frame:000000000000BB03                 db    0
.eh_frame:000000000000BB04                 db 0E4h
.eh_frame:000000000000BB05                 db    5
.eh_frame:000000000000BB06                 db    0
.eh_frame:000000000000BB07                 db    0
.eh_frame:000000000000BB08                 db  28h ; (
.eh_frame:000000000000BB09                 db  95h
.eh_frame:000000000000BB0A                 db 0FFh
.eh_frame:000000000000BB0B                 db 0FFh
.eh_frame:000000000000BB0C                 db  11h
.eh_frame:000000000000BB0D                 db    0
.eh_frame:000000000000BB0E                 db    0
.eh_frame:000000000000BB0F                 db    0
.eh_frame:000000000000BB10                 db    0
.eh_frame:000000000000BB11                 db    0
.eh_frame:000000000000BB12                 db    0
.eh_frame:000000000000BB13                 db    0
.eh_frame:000000000000BB14                 db  10h
.eh_frame:000000000000BB15                 db    0
.eh_frame:000000000000BB16                 db    0
.eh_frame:000000000000BB17                 db    0
.eh_frame:000000000000BB18                 db 0F8h
.eh_frame:000000000000BB19                 db    5
.eh_frame:000000000000BB1A                 db    0
.eh_frame:000000000000BB1B                 db    0
.eh_frame:000000000000BB1C                 db  34h ; 4
.eh_frame:000000000000BB1D                 db  95h
.eh_frame:000000000000BB1E                 db 0FFh
.eh_frame:000000000000BB1F                 db 0FFh
.eh_frame:000000000000BB20                 db  0Ah
.eh_frame:000000000000BB21                 db    0
.eh_frame:000000000000BB22                 db    0
.eh_frame:000000000000BB23                 db    0
.eh_frame:000000000000BB24                 db    0
.eh_frame:000000000000BB25                 db    0
.eh_frame:000000000000BB26                 db    0
.eh_frame:000000000000BB27                 db    0
.eh_frame:000000000000BB28                 db  18h
.eh_frame:000000000000BB29                 db    0
.eh_frame:000000000000BB2A                 db    0
.eh_frame:000000000000BB2B                 db    0
.eh_frame:000000000000BB2C                 db  0Ch
.eh_frame:000000000000BB2D                 db    6
.eh_frame:000000000000BB2E                 db    0
.eh_frame:000000000000BB2F                 db    0
.eh_frame:000000000000BB30                 db  30h ; 0
.eh_frame:000000000000BB31                 db  95h
.eh_frame:000000000000BB32                 db 0FFh
.eh_frame:000000000000BB33                 db 0FFh
.eh_frame:000000000000BB34                 db  8Eh
.eh_frame:000000000000BB35                 db    0
.eh_frame:000000000000BB36                 db    0
.eh_frame:000000000000BB37                 db    0
.eh_frame:000000000000BB38                 db    0
.eh_frame:000000000000BB39                 db  44h ; D
.eh_frame:000000000000BB3A                 db  0Eh
.eh_frame:000000000000BB3B                 db  50h ; P
.eh_frame:000000000000BB3C                 db    2
.eh_frame:000000000000BB3D                 db  7Fh ; 
.eh_frame:000000000000BB3E                 db  0Ah
.eh_frame:000000000000BB3F                 db  0Eh
.eh_frame:000000000000BB40                 db    8
.eh_frame:000000000000BB41                 db  41h ; A
.eh_frame:000000000000BB42                 db  0Bh
.eh_frame:000000000000BB43                 db    0
.eh_frame:000000000000BB44                 db  18h
.eh_frame:000000000000BB45                 db    0
.eh_frame:000000000000BB46                 db    0
.eh_frame:000000000000BB47                 db    0
.eh_frame:000000000000BB48                 db  28h ; (
.eh_frame:000000000000BB49                 db    6
.eh_frame:000000000000BB4A                 db    0
.eh_frame:000000000000BB4B                 db    0
.eh_frame:000000000000BB4C                 db 0A4h
.eh_frame:000000000000BB4D                 db  95h
.eh_frame:000000000000BB4E                 db 0FFh
.eh_frame:000000000000BB4F                 db 0FFh
.eh_frame:000000000000BB50                 db  91h
.eh_frame:000000000000BB51                 db    0
.eh_frame:000000000000BB52                 db    0
.eh_frame:000000000000BB53                 db    0
.eh_frame:000000000000BB54                 db    0
.eh_frame:000000000000BB55                 db  44h ; D
.eh_frame:000000000000BB56                 db  0Eh
.eh_frame:000000000000BB57                 db  50h ; P
.eh_frame:000000000000BB58                 db    2
.eh_frame:000000000000BB59                 db  82h
.eh_frame:000000000000BB5A                 db  0Ah
.eh_frame:000000000000BB5B                 db  0Eh
.eh_frame:000000000000BB5C                 db    8
.eh_frame:000000000000BB5D                 db  41h ; A
.eh_frame:000000000000BB5E                 db  0Bh
.eh_frame:000000000000BB5F                 db    0
.eh_frame:000000000000BB60                 db  10h
.eh_frame:000000000000BB61                 db    0
.eh_frame:000000000000BB62                 db    0
.eh_frame:000000000000BB63                 db    0
.eh_frame:000000000000BB64                 db  44h ; D
.eh_frame:000000000000BB65                 db    6
.eh_frame:000000000000BB66                 db    0
.eh_frame:000000000000BB67                 db    0
.eh_frame:000000000000BB68                 db  28h ; (
.eh_frame:000000000000BB69                 db  96h
.eh_frame:000000000000BB6A                 db 0FFh
.eh_frame:000000000000BB6B                 db 0FFh
.eh_frame:000000000000BB6C                 db  0Ch
.eh_frame:000000000000BB6D                 db    0
.eh_frame:000000000000BB6E                 db    0
.eh_frame:000000000000BB6F                 db    0
.eh_frame:000000000000BB70                 db    0
.eh_frame:000000000000BB71                 db    0
.eh_frame:000000000000BB72                 db    0
.eh_frame:000000000000BB73                 db    0
.eh_frame:000000000000BB74                 db  10h
.eh_frame:000000000000BB75                 db    0
.eh_frame:000000000000BB76                 db    0
.eh_frame:000000000000BB77                 db    0
.eh_frame:000000000000BB78                 db  58h ; X
.eh_frame:000000000000BB79                 db    6
.eh_frame:000000000000BB7A                 db    0
.eh_frame:000000000000BB7B                 db    0
.eh_frame:000000000000BB7C                 db  24h ; $
.eh_frame:000000000000BB7D                 db  96h
.eh_frame:000000000000BB7E                 db 0FFh
.eh_frame:000000000000BB7F                 db 0FFh
.eh_frame:000000000000BB80                 db  17h
.eh_frame:000000000000BB81                 db    0
.eh_frame:000000000000BB82                 db    0
.eh_frame:000000000000BB83                 db    0
.eh_frame:000000000000BB84                 db    0
.eh_frame:000000000000BB85                 db    0
.eh_frame:000000000000BB86                 db    0
.eh_frame:000000000000BB87                 db    0
.eh_frame:000000000000BB88                 db  10h
.eh_frame:000000000000BB89                 db    0
.eh_frame:000000000000BB8A                 db    0
.eh_frame:000000000000BB8B                 db    0
.eh_frame:000000000000BB8C                 db  6Ch ; l
.eh_frame:000000000000BB8D                 db    6
.eh_frame:000000000000BB8E                 db    0
.eh_frame:000000000000BB8F                 db    0
.eh_frame:000000000000BB90                 db  30h ; 0
.eh_frame:000000000000BB91                 db  96h
.eh_frame:000000000000BB92                 db 0FFh
.eh_frame:000000000000BB93                 db 0FFh
.eh_frame:000000000000BB94                 db  13h
.eh_frame:000000000000BB95                 db    0
.eh_frame:000000000000BB96                 db    0
.eh_frame:000000000000BB97                 db    0
.eh_frame:000000000000BB98                 db    0
.eh_frame:000000000000BB99                 db    0
.eh_frame:000000000000BB9A                 db    0
.eh_frame:000000000000BB9B                 db    0
.eh_frame:000000000000BB9C                 db  10h
.eh_frame:000000000000BB9D                 db    0
.eh_frame:000000000000BB9E                 db    0
.eh_frame:000000000000BB9F                 db    0
.eh_frame:000000000000BBA0                 db  80h
.eh_frame:000000000000BBA1                 db    6
.eh_frame:000000000000BBA2                 db    0
.eh_frame:000000000000BBA3                 db    0
.eh_frame:000000000000BBA4                 db  3Ch ; <
.eh_frame:000000000000BBA5                 db  96h
.eh_frame:000000000000BBA6                 db 0FFh
.eh_frame:000000000000BBA7                 db 0FFh
.eh_frame:000000000000BBA8                 db  0Ch
.eh_frame:000000000000BBA9                 db    0
.eh_frame:000000000000BBAA                 db    0
.eh_frame:000000000000BBAB                 db    0
.eh_frame:000000000000BBAC                 db    0
.eh_frame:000000000000BBAD                 db    0
.eh_frame:000000000000BBAE                 db    0
.eh_frame:000000000000BBAF                 db    0
.eh_frame:000000000000BBB0                 db  10h
.eh_frame:000000000000BBB1                 db    0
.eh_frame:000000000000BBB2                 db    0
.eh_frame:000000000000BBB3                 db    0
.eh_frame:000000000000BBB4                 db  94h
.eh_frame:000000000000BBB5                 db    6
.eh_frame:000000000000BBB6                 db    0
.eh_frame:000000000000BBB7                 db    0
.eh_frame:000000000000BBB8                 db  38h ; 8
.eh_frame:000000000000BBB9                 db  96h
.eh_frame:000000000000BBBA                 db 0FFh
.eh_frame:000000000000BBBB                 db 0FFh
.eh_frame:000000000000BBBC                 db  14h
.eh_frame:000000000000BBBD                 db    0
.eh_frame:000000000000BBBE                 db    0
.eh_frame:000000000000BBBF                 db    0
.eh_frame:000000000000BBC0                 db    0
.eh_frame:000000000000BBC1                 db    0
.eh_frame:000000000000BBC2                 db    0
.eh_frame:000000000000BBC3                 db    0
.eh_frame:000000000000BBC4                 db  10h
.eh_frame:000000000000BBC5                 db    0
.eh_frame:000000000000BBC6                 db    0
.eh_frame:000000000000BBC7                 db    0
.eh_frame:000000000000BBC8                 db 0A8h
.eh_frame:000000000000BBC9                 db    6
.eh_frame:000000000000BBCA                 db    0
.eh_frame:000000000000BBCB                 db    0
.eh_frame:000000000000BBCC                 db  44h ; D
.eh_frame:000000000000BBCD                 db  96h
.eh_frame:000000000000BBCE                 db 0FFh
.eh_frame:000000000000BBCF                 db 0FFh
.eh_frame:000000000000BBD0                 db  13h
.eh_frame:000000000000BBD1                 db    0
.eh_frame:000000000000BBD2                 db    0
.eh_frame:000000000000BBD3                 db    0
.eh_frame:000000000000BBD4                 db    0
.eh_frame:000000000000BBD5                 db    0
.eh_frame:000000000000BBD6                 db    0
.eh_frame:000000000000BBD7                 db    0
.eh_frame:000000000000BBD8                 db  14h
.eh_frame:000000000000BBD9                 db    0
.eh_frame:000000000000BBDA                 db    0
.eh_frame:000000000000BBDB                 db    0
.eh_frame:000000000000BBDC                 db 0BCh
.eh_frame:000000000000BBDD                 db    6
.eh_frame:000000000000BBDE                 db    0
.eh_frame:000000000000BBDF                 db    0
.eh_frame:000000000000BBE0                 db  50h ; P
.eh_frame:000000000000BBE1                 db  96h
.eh_frame:000000000000BBE2                 db 0FFh
.eh_frame:000000000000BBE3                 db 0FFh
.eh_frame:000000000000BBE4                 db  18h
.eh_frame:000000000000BBE5                 db    0
.eh_frame:000000000000BBE6                 db    0
.eh_frame:000000000000BBE7                 db    0
.eh_frame:000000000000BBE8                 db    0
.eh_frame:000000000000BBE9                 db    0
.eh_frame:000000000000BBEA                 db    0
.eh_frame:000000000000BBEB                 db    0
.eh_frame:000000000000BBEC                 db    0
.eh_frame:000000000000BBED                 db    0
.eh_frame:000000000000BBEE                 db    0
.eh_frame:000000000000BBEF                 db    0
.eh_frame:000000000000BBF0                 db  24h ; $
.eh_frame:000000000000BBF1                 db    0
.eh_frame:000000000000BBF2                 db    0
.eh_frame:000000000000BBF3                 db    0
.eh_frame:000000000000BBF4                 db 0D4h
.eh_frame:000000000000BBF5                 db    6
.eh_frame:000000000000BBF6                 db    0
.eh_frame:000000000000BBF7                 db    0
.eh_frame:000000000000BBF8                 db  58h ; X
.eh_frame:000000000000BBF9                 db  96h
.eh_frame:000000000000BBFA                 db 0FFh
.eh_frame:000000000000BBFB                 db 0FFh
.eh_frame:000000000000BBFC                 db  71h ; q
.eh_frame:000000000000BBFD                 db    0
.eh_frame:000000000000BBFE                 db    0
.eh_frame:000000000000BBFF                 db    0
.eh_frame:000000000000BC00                 db    0
.eh_frame:000000000000BC01                 db  41h ; A
.eh_frame:000000000000BC02                 db  0Eh
.eh_frame:000000000000BC03                 db  10h
.eh_frame:000000000000BC04                 db  83h
.eh_frame:000000000000BC05                 db    2
.eh_frame:000000000000BC06                 db  56h ; V
.eh_frame:000000000000BC07                 db  0Eh
.eh_frame:000000000000BC08                 db 0B0h
.eh_frame:000000000000BC09                 db    1
.eh_frame:000000000000BC0A                 db    2
.eh_frame:000000000000BC0B                 db  4Ch ; L
.eh_frame:000000000000BC0C                 db  0Ah
.eh_frame:000000000000BC0D                 db  0Eh
.eh_frame:000000000000BC0E                 db  10h
.eh_frame:000000000000BC0F                 db  41h ; A
.eh_frame:000000000000BC10                 db  0Eh
.eh_frame:000000000000BC11                 db    8
.eh_frame:000000000000BC12                 db  44h ; D
.eh_frame:000000000000BC13                 db  0Bh
.eh_frame:000000000000BC14                 db    0
.eh_frame:000000000000BC15                 db    0
.eh_frame:000000000000BC16                 db    0
.eh_frame:000000000000BC17                 db    0
.eh_frame:000000000000BC18                 db  10h
.eh_frame:000000000000BC19                 db    1
.eh_frame:000000000000BC1A                 db    0
.eh_frame:000000000000BC1B                 db    0
.eh_frame:000000000000BC1C                 db 0FCh
.eh_frame:000000000000BC1D                 db    6
.eh_frame:000000000000BC1E                 db    0
.eh_frame:000000000000BC1F                 db    0
.eh_frame:000000000000BC20                 db 0B0h
.eh_frame:000000000000BC21                 db  96h
.eh_frame:000000000000BC22                 db 0FFh
.eh_frame:000000000000BC23                 db 0FFh
.eh_frame:000000000000BC24                 db  17h
.eh_frame:000000000000BC25                 db    4
.eh_frame:000000000000BC26                 db    0
.eh_frame:000000000000BC27                 db    0
.eh_frame:000000000000BC28                 db    0
.eh_frame:000000000000BC29                 db  42h ; B
.eh_frame:000000000000BC2A                 db  0Eh
.eh_frame:000000000000BC2B                 db  10h
.eh_frame:000000000000BC2C                 db  8Fh
.eh_frame:000000000000BC2D                 db    2
.eh_frame:000000000000BC2E                 db  42h ; B
.eh_frame:000000000000BC2F                 db  0Eh
.eh_frame:000000000000BC30                 db  18h
.eh_frame:000000000000BC31                 db  8Eh
.eh_frame:000000000000BC32                 db    3
.eh_frame:000000000000BC33                 db  42h ; B
.eh_frame:000000000000BC34                 db  0Eh
.eh_frame:000000000000BC35                 db  20h
.eh_frame:000000000000BC36                 db  8Dh
.eh_frame:000000000000BC37                 db    4
.eh_frame:000000000000BC38                 db  42h ; B
.eh_frame:000000000000BC39                 db  0Eh
.eh_frame:000000000000BC3A                 db  28h ; (
.eh_frame:000000000000BC3B                 db  8Ch
.eh_frame:000000000000BC3C                 db    5
.eh_frame:000000000000BC3D                 db  44h ; D
.eh_frame:000000000000BC3E                 db  0Eh
.eh_frame:000000000000BC3F                 db  30h ; 0
.eh_frame:000000000000BC40                 db  86h
.eh_frame:000000000000BC41                 db    6
.eh_frame:000000000000BC42                 db  41h ; A
.eh_frame:000000000000BC43                 db  0Eh
.eh_frame:000000000000BC44                 db  38h ; 8
.eh_frame:000000000000BC45                 db  83h
.eh_frame:000000000000BC46                 db    7
.eh_frame:000000000000BC47                 db  4Ah ; J
.eh_frame:000000000000BC48                 db  0Eh
.eh_frame:000000000000BC49                 db  60h ; `
.eh_frame:000000000000BC4A                 db    2
.eh_frame:000000000000BC4B                 db 0DDh
.eh_frame:000000000000BC4C                 db  0Eh
.eh_frame:000000000000BC4D                 db  68h ; h
.eh_frame:000000000000BC4E                 db  57h ; W
.eh_frame:000000000000BC4F                 db  0Eh
.eh_frame:000000000000BC50                 db  70h ; p
.eh_frame:000000000000BC51                 db  42h ; B
.eh_frame:000000000000BC52                 db  0Eh
.eh_frame:000000000000BC53                 db  78h ; x
.eh_frame:000000000000BC54                 db  42h ; B
.eh_frame:000000000000BC55                 db  0Eh
.eh_frame:000000000000BC56                 db  80h
.eh_frame:000000000000BC57                 db    1
.eh_frame:000000000000BC58                 db  42h ; B
.eh_frame:000000000000BC59                 db  0Eh
.eh_frame:000000000000BC5A                 db  88h
.eh_frame:000000000000BC5B                 db    1
.eh_frame:000000000000BC5C                 db  42h ; B
.eh_frame:000000000000BC5D                 db  0Eh
.eh_frame:000000000000BC5E                 db  90h
.eh_frame:000000000000BC5F                 db    1
.eh_frame:000000000000BC60                 db  53h ; S
.eh_frame:000000000000BC61                 db  0Eh
.eh_frame:000000000000BC62                 db  60h ; `
.eh_frame:000000000000BC63                 db  44h ; D
.eh_frame:000000000000BC64                 db  0Ah
.eh_frame:000000000000BC65                 db  0Eh
.eh_frame:000000000000BC66                 db  38h ; 8
.eh_frame:000000000000BC67                 db  41h ; A
.eh_frame:000000000000BC68                 db  0Eh
.eh_frame:000000000000BC69                 db  30h ; 0
.eh_frame:000000000000BC6A                 db  41h ; A
.eh_frame:000000000000BC6B                 db  0Eh
.eh_frame:000000000000BC6C                 db  28h ; (
.eh_frame:000000000000BC6D                 db  42h ; B
.eh_frame:000000000000BC6E                 db  0Eh
.eh_frame:000000000000BC6F                 db  20h
.eh_frame:000000000000BC70                 db  42h ; B
.eh_frame:000000000000BC71                 db  0Eh
.eh_frame:000000000000BC72                 db  18h
.eh_frame:000000000000BC73                 db  42h ; B
.eh_frame:000000000000BC74                 db  0Eh
.eh_frame:000000000000BC75                 db  10h
.eh_frame:000000000000BC76                 db  42h ; B
.eh_frame:000000000000BC77                 db  0Eh
.eh_frame:000000000000BC78                 db    8
.eh_frame:000000000000BC79                 db  44h ; D
.eh_frame:000000000000BC7A                 db  0Bh
.eh_frame:000000000000BC7B                 db    2
.eh_frame:000000000000BC7C                 db  78h ; x
.eh_frame:000000000000BC7D                 db  0Ah
.eh_frame:000000000000BC7E                 db  0Eh
.eh_frame:000000000000BC7F                 db  68h ; h
.eh_frame:000000000000BC80                 db  48h ; H
.eh_frame:000000000000BC81                 db  0Bh
.eh_frame:000000000000BC82                 db  5Ah ; Z
.eh_frame:000000000000BC83                 db  0Ah
.eh_frame:000000000000BC84                 db  0Eh
.eh_frame:000000000000BC85                 db  38h ; 8
.eh_frame:000000000000BC86                 db  47h ; G
.eh_frame:000000000000BC87                 db  0Eh
.eh_frame:000000000000BC88                 db  30h ; 0
.eh_frame:000000000000BC89                 db  41h ; A
.eh_frame:000000000000BC8A                 db  0Eh
.eh_frame:000000000000BC8B                 db  28h ; (
.eh_frame:000000000000BC8C                 db  42h ; B
.eh_frame:000000000000BC8D                 db  0Eh
.eh_frame:000000000000BC8E                 db  20h
.eh_frame:000000000000BC8F                 db  42h ; B
.eh_frame:000000000000BC90                 db  0Eh
.eh_frame:000000000000BC91                 db  18h
.eh_frame:000000000000BC92                 db  42h ; B
.eh_frame:000000000000BC93                 db  0Eh
.eh_frame:000000000000BC94                 db  10h
.eh_frame:000000000000BC95                 db  42h ; B
.eh_frame:000000000000BC96                 db  0Eh
.eh_frame:000000000000BC97                 db    8
.eh_frame:000000000000BC98                 db  56h ; V
.eh_frame:000000000000BC99                 db  0Bh
.eh_frame:000000000000BC9A                 db  5Eh ; ^
.eh_frame:000000000000BC9B                 db  0Ah
.eh_frame:000000000000BC9C                 db  0Eh
.eh_frame:000000000000BC9D                 db  38h ; 8
.eh_frame:000000000000BC9E                 db  52h ; R
.eh_frame:000000000000BC9F                 db  0Eh
.eh_frame:000000000000BCA0                 db  30h ; 0
.eh_frame:000000000000BCA1                 db  41h ; A
.eh_frame:000000000000BCA2                 db  0Eh
.eh_frame:000000000000BCA3                 db  28h ; (
.eh_frame:000000000000BCA4                 db  42h ; B
.eh_frame:000000000000BCA5                 db  0Eh
.eh_frame:000000000000BCA6                 db  20h
.eh_frame:000000000000BCA7                 db  42h ; B
.eh_frame:000000000000BCA8                 db  0Eh
.eh_frame:000000000000BCA9                 db  18h
.eh_frame:000000000000BCAA                 db  42h ; B
.eh_frame:000000000000BCAB                 db  0Eh
.eh_frame:000000000000BCAC                 db  10h
.eh_frame:000000000000BCAD                 db  42h ; B
.eh_frame:000000000000BCAE                 db  0Eh
.eh_frame:000000000000BCAF                 db    8
.eh_frame:000000000000BCB0                 db  4Fh ; O
.eh_frame:000000000000BCB1                 db  0Bh
.eh_frame:000000000000BCB2                 db  62h ; b
.eh_frame:000000000000BCB3                 db  0Ah
.eh_frame:000000000000BCB4                 db  0Eh
.eh_frame:000000000000BCB5                 db  38h ; 8
.eh_frame:000000000000BCB6                 db  50h ; P
.eh_frame:000000000000BCB7                 db  0Eh
.eh_frame:000000000000BCB8                 db  30h ; 0
.eh_frame:000000000000BCB9                 db  41h ; A
.eh_frame:000000000000BCBA                 db  0Eh
.eh_frame:000000000000BCBB                 db  28h ; (
.eh_frame:000000000000BCBC                 db  42h ; B
.eh_frame:000000000000BCBD                 db  0Eh
.eh_frame:000000000000BCBE                 db  20h
.eh_frame:000000000000BCBF                 db  42h ; B
.eh_frame:000000000000BCC0                 db  0Eh
.eh_frame:000000000000BCC1                 db  18h
.eh_frame:000000000000BCC2                 db  42h ; B
.eh_frame:000000000000BCC3                 db  0Eh
.eh_frame:000000000000BCC4                 db  10h
.eh_frame:000000000000BCC5                 db  42h ; B
.eh_frame:000000000000BCC6                 db  0Eh
.eh_frame:000000000000BCC7                 db    8
.eh_frame:000000000000BCC8                 db  55h ; U
.eh_frame:000000000000BCC9                 db  0Bh
.eh_frame:000000000000BCCA                 db  66h ; f
.eh_frame:000000000000BCCB                 db  0Eh
.eh_frame:000000000000BCCC                 db  68h ; h
.eh_frame:000000000000BCCD                 db  42h ; B
.eh_frame:000000000000BCCE                 db  0Eh
.eh_frame:000000000000BCCF                 db  70h ; p
.eh_frame:000000000000BCD0                 db  5Ch ; \
.eh_frame:000000000000BCD1                 db  0Eh
.eh_frame:000000000000BCD2                 db  68h ; h
.eh_frame:000000000000BCD3                 db  41h ; A
.eh_frame:000000000000BCD4                 db  0Eh
.eh_frame:000000000000BCD5                 db  60h ; `
.eh_frame:000000000000BCD6                 db  44h ; D
.eh_frame:000000000000BCD7                 db  0Ah
.eh_frame:000000000000BCD8                 db  0Eh
.eh_frame:000000000000BCD9                 db  38h ; 8
.eh_frame:000000000000BCDA                 db  41h ; A
.eh_frame:000000000000BCDB                 db  0Eh
.eh_frame:000000000000BCDC                 db  30h ; 0
.eh_frame:000000000000BCDD                 db  41h ; A
.eh_frame:000000000000BCDE                 db  0Eh
.eh_frame:000000000000BCDF                 db  28h ; (
.eh_frame:000000000000BCE0                 db  42h ; B
.eh_frame:000000000000BCE1                 db  0Eh
.eh_frame:000000000000BCE2                 db  20h
.eh_frame:000000000000BCE3                 db  42h ; B
.eh_frame:000000000000BCE4                 db  0Eh
.eh_frame:000000000000BCE5                 db  18h
.eh_frame:000000000000BCE6                 db  42h ; B
.eh_frame:000000000000BCE7                 db  0Eh
.eh_frame:000000000000BCE8                 db  10h
.eh_frame:000000000000BCE9                 db  42h ; B
.eh_frame:000000000000BCEA                 db  0Eh
.eh_frame:000000000000BCEB                 db    8
.eh_frame:000000000000BCEC                 db  45h ; E
.eh_frame:000000000000BCED                 db  0Bh
.eh_frame:000000000000BCEE                 db  68h ; h
.eh_frame:000000000000BCEF                 db  0Ah
.eh_frame:000000000000BCF0                 db  0Eh
.eh_frame:000000000000BCF1                 db  68h ; h
.eh_frame:000000000000BCF2                 db  48h ; H
.eh_frame:000000000000BCF3                 db  0Bh
.eh_frame:000000000000BCF4                 db  72h ; r
.eh_frame:000000000000BCF5                 db  0Eh
.eh_frame:000000000000BCF6                 db  68h ; h
.eh_frame:000000000000BCF7                 db  45h ; E
.eh_frame:000000000000BCF8                 db  0Eh
.eh_frame:000000000000BCF9                 db  70h ; p
.eh_frame:000000000000BCFA                 db  42h ; B
.eh_frame:000000000000BCFB                 db  0Eh
.eh_frame:000000000000BCFC                 db  78h ; x
.eh_frame:000000000000BCFD                 db  42h ; B
.eh_frame:000000000000BCFE                 db  0Eh
.eh_frame:000000000000BCFF                 db  80h
.eh_frame:000000000000BD00                 db    1
.eh_frame:000000000000BD01                 db  5Eh ; ^
.eh_frame:000000000000BD02                 db  0Eh
.eh_frame:000000000000BD03                 db  60h ; `
.eh_frame:000000000000BD04                 db  44h ; D
.eh_frame:000000000000BD05                 db  0Ah
.eh_frame:000000000000BD06                 db  0Eh
.eh_frame:000000000000BD07                 db  38h ; 8
.eh_frame:000000000000BD08                 db  41h ; A
.eh_frame:000000000000BD09                 db  0Eh
.eh_frame:000000000000BD0A                 db  30h ; 0
.eh_frame:000000000000BD0B                 db  41h ; A
.eh_frame:000000000000BD0C                 db  0Eh
.eh_frame:000000000000BD0D                 db  28h ; (
.eh_frame:000000000000BD0E                 db  42h ; B
.eh_frame:000000000000BD0F                 db  0Eh
.eh_frame:000000000000BD10                 db  20h
.eh_frame:000000000000BD11                 db  42h ; B
.eh_frame:000000000000BD12                 db  0Eh
.eh_frame:000000000000BD13                 db  18h
.eh_frame:000000000000BD14                 db  42h ; B
.eh_frame:000000000000BD15                 db  0Eh
.eh_frame:000000000000BD16                 db  10h
.eh_frame:000000000000BD17                 db  42h ; B
.eh_frame:000000000000BD18                 db  0Eh
.eh_frame:000000000000BD19                 db    8
.eh_frame:000000000000BD1A                 db  41h ; A
.eh_frame:000000000000BD1B                 db  0Bh
.eh_frame:000000000000BD1C                 db  79h ; y
.eh_frame:000000000000BD1D                 db  0Ah
.eh_frame:000000000000BD1E                 db  0Eh
.eh_frame:000000000000BD1F                 db  68h ; h
.eh_frame:000000000000BD20                 db  42h ; B
.eh_frame:000000000000BD21                 db  0Eh
.eh_frame:000000000000BD22                 db  70h ; p
.eh_frame:000000000000BD23                 db  42h ; B
.eh_frame:000000000000BD24                 db  0Eh
.eh_frame:000000000000BD25                 db  78h ; x
.eh_frame:000000000000BD26                 db  42h ; B
.eh_frame:000000000000BD27                 db  0Eh
.eh_frame:000000000000BD28                 db  80h
.eh_frame:000000000000BD29                 db    1
.eh_frame:000000000000BD2A                 db  51h ; Q
.eh_frame:000000000000BD2B                 db  0Bh
.eh_frame:000000000000BD2C                 db  10h
.eh_frame:000000000000BD2D                 db    0
.eh_frame:000000000000BD2E                 db    0
.eh_frame:000000000000BD2F                 db    0
.eh_frame:000000000000BD30                 db  10h
.eh_frame:000000000000BD31                 db    8
.eh_frame:000000000000BD32                 db    0
.eh_frame:000000000000BD33                 db    0
.eh_frame:000000000000BD34                 db 0BCh
.eh_frame:000000000000BD35                 db  99h
.eh_frame:000000000000BD36                 db 0FFh
.eh_frame:000000000000BD37                 db 0FFh
.eh_frame:000000000000BD38                 db  20h
.eh_frame:000000000000BD39                 db    0
.eh_frame:000000000000BD3A                 db    0
.eh_frame:000000000000BD3B                 db    0
.eh_frame:000000000000BD3C                 db    0
.eh_frame:000000000000BD3D                 db    0
.eh_frame:000000000000BD3E                 db    0
.eh_frame:000000000000BD3F                 db    0
.eh_frame:000000000000BD40                 db  18h
.eh_frame:000000000000BD41                 db    0
.eh_frame:000000000000BD42                 db    0
.eh_frame:000000000000BD43                 db    0
.eh_frame:000000000000BD44                 db  24h ; $
.eh_frame:000000000000BD45                 db    8
.eh_frame:000000000000BD46                 db    0
.eh_frame:000000000000BD47                 db    0
.eh_frame:000000000000BD48                 db 0C8h
.eh_frame:000000000000BD49                 db  99h
.eh_frame:000000000000BD4A                 db 0FFh
.eh_frame:000000000000BD4B                 db 0FFh
.eh_frame:000000000000BD4C                 db  78h ; x
.eh_frame:000000000000BD4D                 db    0
.eh_frame:000000000000BD4E                 db    0
.eh_frame:000000000000BD4F                 db    0
.eh_frame:000000000000BD50                 db    0
.eh_frame:000000000000BD51                 db  44h ; D
.eh_frame:000000000000BD52                 db  0Eh
.eh_frame:000000000000BD53                 db  70h ; p
.eh_frame:000000000000BD54                 db    2
.eh_frame:000000000000BD55                 db  60h ; `
.eh_frame:000000000000BD56                 db  0Ah
.eh_frame:000000000000BD57                 db  0Eh
.eh_frame:000000000000BD58                 db    8
.eh_frame:000000000000BD59                 db  41h ; A
.eh_frame:000000000000BD5A                 db  0Bh
.eh_frame:000000000000BD5B                 db    0
.eh_frame:000000000000BD5C                 db  28h ; (
.eh_frame:000000000000BD5D                 db    0
.eh_frame:000000000000BD5E                 db    0
.eh_frame:000000000000BD5F                 db    0
.eh_frame:000000000000BD60                 db  40h ; @
.eh_frame:000000000000BD61                 db    8
.eh_frame:000000000000BD62                 db    0
.eh_frame:000000000000BD63                 db    0
.eh_frame:000000000000BD64                 db  2Ch ; ,
.eh_frame:000000000000BD65                 db  9Ah
.eh_frame:000000000000BD66                 db 0FFh
.eh_frame:000000000000BD67                 db 0FFh
.eh_frame:000000000000BD68                 db 0D5h
.eh_frame:000000000000BD69                 db    0
.eh_frame:000000000000BD6A                 db    0
.eh_frame:000000000000BD6B                 db    0
.eh_frame:000000000000BD6C                 db    0
.eh_frame:000000000000BD6D                 db  41h ; A
.eh_frame:000000000000BD6E                 db  0Eh
.eh_frame:000000000000BD6F                 db  10h
.eh_frame:000000000000BD70                 db  86h
.eh_frame:000000000000BD71                 db    2
.eh_frame:000000000000BD72                 db  41h ; A
.eh_frame:000000000000BD73                 db  0Eh
.eh_frame:000000000000BD74                 db  18h
.eh_frame:000000000000BD75                 db  83h
.eh_frame:000000000000BD76                 db    3
.eh_frame:000000000000BD77                 db  50h ; P
.eh_frame:000000000000BD78                 db  0Eh
.eh_frame:000000000000BD79                 db 0D0h
.eh_frame:000000000000BD7A                 db    1
.eh_frame:000000000000BD7B                 db    2
.eh_frame:000000000000BD7C                 db 0ABh
.eh_frame:000000000000BD7D                 db  0Ah
.eh_frame:000000000000BD7E                 db  0Eh
.eh_frame:000000000000BD7F                 db  18h
.eh_frame:000000000000BD80                 db  41h ; A
.eh_frame:000000000000BD81                 db  0Eh
.eh_frame:000000000000BD82                 db  10h
.eh_frame:000000000000BD83                 db  41h ; A
.eh_frame:000000000000BD84                 db  0Eh
.eh_frame:000000000000BD85                 db    8
.eh_frame:000000000000BD86                 db  41h ; A
.eh_frame:000000000000BD87                 db  0Bh
.eh_frame:000000000000BD88                 db  1Ch
.eh_frame:000000000000BD89                 db    0
.eh_frame:000000000000BD8A                 db    0
.eh_frame:000000000000BD8B                 db    0
.eh_frame:000000000000BD8C                 db  6Ch ; l
.eh_frame:000000000000BD8D                 db    8
.eh_frame:000000000000BD8E                 db    0
.eh_frame:000000000000BD8F                 db    0
.eh_frame:000000000000BD90                 db 0E0h
.eh_frame:000000000000BD91                 db  9Ah
.eh_frame:000000000000BD92                 db 0FFh
.eh_frame:000000000000BD93                 db 0FFh
.eh_frame:000000000000BD94                 db  80h
.eh_frame:000000000000BD95                 db    0
.eh_frame:000000000000BD96                 db    0
.eh_frame:000000000000BD97                 db    0
.eh_frame:000000000000BD98                 db    0
.eh_frame:000000000000BD99                 db  41h ; A
.eh_frame:000000000000BD9A                 db  0Eh
.eh_frame:000000000000BD9B                 db  10h
.eh_frame:000000000000BD9C                 db  83h
.eh_frame:000000000000BD9D                 db    2
.eh_frame:000000000000BD9E                 db    2
.eh_frame:000000000000BD9F                 db  7Ah ; z
.eh_frame:000000000000BDA0                 db  0Eh
.eh_frame:000000000000BDA1                 db    8
.eh_frame:000000000000BDA2                 db    0
.eh_frame:000000000000BDA3                 db    0
.eh_frame:000000000000BDA4                 db    0
.eh_frame:000000000000BDA5                 db    0
.eh_frame:000000000000BDA6                 db    0
.eh_frame:000000000000BDA7                 db    0
.eh_frame:000000000000BDA8                 db  18h
.eh_frame:000000000000BDA9                 db    0
.eh_frame:000000000000BDAA                 db    0
.eh_frame:000000000000BDAB                 db    0
.eh_frame:000000000000BDAC                 db  8Ch
.eh_frame:000000000000BDAD                 db    8
.eh_frame:000000000000BDAE                 db    0
.eh_frame:000000000000BDAF                 db    0
.eh_frame:000000000000BDB0                 db  40h ; @
.eh_frame:000000000000BDB1                 db  9Bh
.eh_frame:000000000000BDB2                 db 0FFh
.eh_frame:000000000000BDB3                 db 0FFh
.eh_frame:000000000000BDB4                 db  1Ah
.eh_frame:000000000000BDB5                 db    0
.eh_frame:000000000000BDB6                 db    0
.eh_frame:000000000000BDB7                 db    0
.eh_frame:000000000000BDB8                 db    0
.eh_frame:000000000000BDB9                 db  41h ; A
.eh_frame:000000000000BDBA                 db  0Eh
.eh_frame:000000000000BDBB                 db  10h
.eh_frame:000000000000BDBC                 db  83h
.eh_frame:000000000000BDBD                 db    2
.eh_frame:000000000000BDBE                 db  53h ; S
.eh_frame:000000000000BDBF                 db  0Ah
.eh_frame:000000000000BDC0                 db  0Eh
.eh_frame:000000000000BDC1                 db    8
.eh_frame:000000000000BDC2                 db  41h ; A
.eh_frame:000000000000BDC3                 db  0Bh
.eh_frame:000000000000BDC4                 db  10h
.eh_frame:000000000000BDC5                 db    0
.eh_frame:000000000000BDC6                 db    0
.eh_frame:000000000000BDC7                 db    0
.eh_frame:000000000000BDC8                 db 0A8h
.eh_frame:000000000000BDC9                 db    8
.eh_frame:000000000000BDCA                 db    0
.eh_frame:000000000000BDCB                 db    0
.eh_frame:000000000000BDCC                 db  44h ; D
.eh_frame:000000000000BDCD                 db  9Bh
.eh_frame:000000000000BDCE                 db 0FFh
.eh_frame:000000000000BDCF                 db 0FFh
.eh_frame:000000000000BDD0                 db  24h ; $
.eh_frame:000000000000BDD1                 db    0
.eh_frame:000000000000BDD2                 db    0
.eh_frame:000000000000BDD3                 db    0
.eh_frame:000000000000BDD4                 db    0
.eh_frame:000000000000BDD5                 db  5Fh ; _
.eh_frame:000000000000BDD6                 db  0Eh
.eh_frame:000000000000BDD7                 db  10h
.eh_frame:000000000000BDD8                 db  10h
.eh_frame:000000000000BDD9                 db    0
.eh_frame:000000000000BDDA                 db    0
.eh_frame:000000000000BDDB                 db    0
.eh_frame:000000000000BDDC                 db 0BCh
.eh_frame:000000000000BDDD                 db    8
.eh_frame:000000000000BDDE                 db    0
.eh_frame:000000000000BDDF                 db    0
.eh_frame:000000000000BDE0                 db  60h ; `
.eh_frame:000000000000BDE1                 db  9Bh
.eh_frame:000000000000BDE2                 db 0FFh
.eh_frame:000000000000BDE3                 db 0FFh
.eh_frame:000000000000BDE4                 db    2
.eh_frame:000000000000BDE5                 db    0
.eh_frame:000000000000BDE6                 db    0
.eh_frame:000000000000BDE7                 db    0
.eh_frame:000000000000BDE8                 db    0
.eh_frame:000000000000BDE9                 db    0
.eh_frame:000000000000BDEA                 db    0
.eh_frame:000000000000BDEB                 db    0
.eh_frame:000000000000BDEC                 db  20h
.eh_frame:000000000000BDED                 db    0
.eh_frame:000000000000BDEE                 db    0
.eh_frame:000000000000BDEF                 db    0
.eh_frame:000000000000BDF0                 db 0D0h
.eh_frame:000000000000BDF1                 db    8
.eh_frame:000000000000BDF2                 db    0
.eh_frame:000000000000BDF3                 db    0
.eh_frame:000000000000BDF4                 db  5Ch ; \
.eh_frame:000000000000BDF5                 db  9Bh
.eh_frame:000000000000BDF6                 db 0FFh
.eh_frame:000000000000BDF7                 db 0FFh
.eh_frame:000000000000BDF8                 db  36h ; 6
.eh_frame:000000000000BDF9                 db    0
.eh_frame:000000000000BDFA                 db    0
.eh_frame:000000000000BDFB                 db    0
.eh_frame:000000000000BDFC                 db    0
.eh_frame:000000000000BDFD                 db  44h ; D
.eh_frame:000000000000BDFE                 db  0Eh
.eh_frame:000000000000BDFF                 db  10h
.eh_frame:000000000000BE00                 db  83h
.eh_frame:000000000000BE01                 db    2
.eh_frame:000000000000BE02                 db  5Dh ; ]
.eh_frame:000000000000BE03                 db  0Ah
.eh_frame:000000000000BE04                 db  0Eh
.eh_frame:000000000000BE05                 db    8
.eh_frame:000000000000BE06                 db  47h ; G
.eh_frame:000000000000BE07                 db  0Bh
.eh_frame:000000000000BE08                 db  48h ; H
.eh_frame:000000000000BE09                 db  0Ah
.eh_frame:000000000000BE0A                 db  0Eh
.eh_frame:000000000000BE0B                 db    8
.eh_frame:000000000000BE0C                 db  41h ; A
.eh_frame:000000000000BE0D                 db  0Bh
.eh_frame:000000000000BE0E                 db    0
.eh_frame:000000000000BE0F                 db    0
.eh_frame:000000000000BE10                 db  10h
.eh_frame:000000000000BE11                 db    0
.eh_frame:000000000000BE12                 db    0
.eh_frame:000000000000BE13                 db    0
.eh_frame:000000000000BE14                 db 0F4h
.eh_frame:000000000000BE15                 db    8
.eh_frame:000000000000BE16                 db    0
.eh_frame:000000000000BE17                 db    0
.eh_frame:000000000000BE18                 db  78h ; x
.eh_frame:000000000000BE19                 db  9Bh
.eh_frame:000000000000BE1A                 db 0FFh
.eh_frame:000000000000BE1B                 db 0FFh
.eh_frame:000000000000BE1C                 db  24h ; $
.eh_frame:000000000000BE1D                 db    0
.eh_frame:000000000000BE1E                 db    0
.eh_frame:000000000000BE1F                 db    0
.eh_frame:000000000000BE20                 db    0
.eh_frame:000000000000BE21                 db  5Fh ; _
.eh_frame:000000000000BE22                 db  0Eh
.eh_frame:000000000000BE23                 db  10h
.eh_frame:000000000000BE24                 db  14h
.eh_frame:000000000000BE25                 db    0
.eh_frame:000000000000BE26                 db    0
.eh_frame:000000000000BE27                 db    0
.eh_frame:000000000000BE28                 db    8
.eh_frame:000000000000BE29                 db    9
.eh_frame:000000000000BE2A                 db    0
.eh_frame:000000000000BE2B                 db    0
.eh_frame:000000000000BE2C                 db  94h
.eh_frame:000000000000BE2D                 db  9Bh
.eh_frame:000000000000BE2E                 db 0FFh
.eh_frame:000000000000BE2F                 db 0FFh
.eh_frame:000000000000BE30                 db  82h
.eh_frame:000000000000BE31                 db    0
.eh_frame:000000000000BE32                 db    0
.eh_frame:000000000000BE33                 db    0
.eh_frame:000000000000BE34                 db    0
.eh_frame:000000000000BE35                 db    2
.eh_frame:000000000000BE36                 db  5Fh ; _
.eh_frame:000000000000BE37                 db  0Eh
.eh_frame:000000000000BE38                 db  10h
.eh_frame:000000000000BE39                 db  49h ; I
.eh_frame:000000000000BE3A                 db  0Eh
.eh_frame:000000000000BE3B                 db    8
.eh_frame:000000000000BE3C                 db  14h
.eh_frame:000000000000BE3D                 db    0
.eh_frame:000000000000BE3E                 db    0
.eh_frame:000000000000BE3F                 db    0
.eh_frame:000000000000BE40                 db  20h
.eh_frame:000000000000BE41                 db    9
.eh_frame:000000000000BE42                 db    0
.eh_frame:000000000000BE43                 db    0
.eh_frame:000000000000BE44                 db  0Ch
.eh_frame:000000000000BE45                 db  9Ch
.eh_frame:000000000000BE46                 db 0FFh
.eh_frame:000000000000BE47                 db 0FFh
.eh_frame:000000000000BE48                 db  4Ah ; J
.eh_frame:000000000000BE49                 db    0
.eh_frame:000000000000BE4A                 db    0
.eh_frame:000000000000BE4B                 db    0
.eh_frame:000000000000BE4C                 db    0
.eh_frame:000000000000BE4D                 db    2
.eh_frame:000000000000BE4E                 db  45h ; E
.eh_frame:000000000000BE4F                 db  0Eh
.eh_frame:000000000000BE50                 db  10h
.eh_frame:000000000000BE51                 db    0
.eh_frame:000000000000BE52                 db    0
.eh_frame:000000000000BE53                 db    0
.eh_frame:000000000000BE54                 db  18h
.eh_frame:000000000000BE55                 db    0
.eh_frame:000000000000BE56                 db    0
.eh_frame:000000000000BE57                 db    0
.eh_frame:000000000000BE58                 db  38h ; 8
.eh_frame:000000000000BE59                 db    9
.eh_frame:000000000000BE5A                 db    0
.eh_frame:000000000000BE5B                 db    0
.eh_frame:000000000000BE5C                 db  44h ; D
.eh_frame:000000000000BE5D                 db  9Ch
.eh_frame:000000000000BE5E                 db 0FFh
.eh_frame:000000000000BE5F                 db 0FFh
.eh_frame:000000000000BE60                 db  17h
.eh_frame:000000000000BE61                 db    0
.eh_frame:000000000000BE62                 db    0
.eh_frame:000000000000BE63                 db    0
.eh_frame:000000000000BE64                 db    0
.eh_frame:000000000000BE65                 db  41h ; A
.eh_frame:000000000000BE66                 db  0Eh
.eh_frame:000000000000BE67                 db  10h
.eh_frame:000000000000BE68                 db  83h
.eh_frame:000000000000BE69                 db    2
.eh_frame:000000000000BE6A                 db  51h ; Q
.eh_frame:000000000000BE6B                 db  0Eh
.eh_frame:000000000000BE6C                 db    8
.eh_frame:000000000000BE6D                 db    0
.eh_frame:000000000000BE6E                 db    0
.eh_frame:000000000000BE6F                 db    0
.eh_frame:000000000000BE70                 db  18h
.eh_frame:000000000000BE71                 db    0
.eh_frame:000000000000BE72                 db    0
.eh_frame:000000000000BE73                 db    0
.eh_frame:000000000000BE74                 db  54h ; T
.eh_frame:000000000000BE75                 db    9
.eh_frame:000000000000BE76                 db    0
.eh_frame:000000000000BE77                 db    0
.eh_frame:000000000000BE78                 db  48h ; H
.eh_frame:000000000000BE79                 db  9Ch
.eh_frame:000000000000BE7A                 db 0FFh
.eh_frame:000000000000BE7B                 db 0FFh
.eh_frame:000000000000BE7C                 db  2Eh ; .
.eh_frame:000000000000BE7D                 db    0
.eh_frame:000000000000BE7E                 db    0
.eh_frame:000000000000BE7F                 db    0
.eh_frame:000000000000BE80                 db    0
.eh_frame:000000000000BE81                 db  47h ; G
.eh_frame:000000000000BE82                 db  0Eh
.eh_frame:000000000000BE83                 db  10h
.eh_frame:000000000000BE84                 db  61h ; a
.eh_frame:000000000000BE85                 db  0Ah
.eh_frame:000000000000BE86                 db  0Eh
.eh_frame:000000000000BE87                 db    8
.eh_frame:000000000000BE88                 db  41h ; A
.eh_frame:000000000000BE89                 db  0Bh
.eh_frame:000000000000BE8A                 db    0
.eh_frame:000000000000BE8B                 db    0
.eh_frame:000000000000BE8C                 db  24h ; $
.eh_frame:000000000000BE8D                 db    0
.eh_frame:000000000000BE8E                 db    0
.eh_frame:000000000000BE8F                 db    0
.eh_frame:000000000000BE90                 db  70h ; p
.eh_frame:000000000000BE91                 db    9
.eh_frame:000000000000BE92                 db    0
.eh_frame:000000000000BE93                 db    0
.eh_frame:000000000000BE94                 db  5Ch ; \
.eh_frame:000000000000BE95                 db  9Ch
.eh_frame:000000000000BE96                 db 0FFh
.eh_frame:000000000000BE97                 db 0FFh
.eh_frame:000000000000BE98                 db  28h ; (
.eh_frame:000000000000BE99                 db    0
.eh_frame:000000000000BE9A                 db    0
.eh_frame:000000000000BE9B                 db    0
.eh_frame:000000000000BE9C                 db    0
.eh_frame:000000000000BE9D                 db  41h ; A
.eh_frame:000000000000BE9E                 db  0Eh
.eh_frame:000000000000BE9F                 db  10h
.eh_frame:000000000000BEA0                 db  86h
.eh_frame:000000000000BEA1                 db    2
.eh_frame:000000000000BEA2                 db  41h ; A
.eh_frame:000000000000BEA3                 db  0Eh
.eh_frame:000000000000BEA4                 db  18h
.eh_frame:000000000000BEA5                 db  83h
.eh_frame:000000000000BEA6                 db    3
.eh_frame:000000000000BEA7                 db  4Dh ; M
.eh_frame:000000000000BEA8                 db  0Eh
.eh_frame:000000000000BEA9                 db  20h
.eh_frame:000000000000BEAA                 db  49h ; I
.eh_frame:000000000000BEAB                 db  0Eh
.eh_frame:000000000000BEAC                 db  18h
.eh_frame:000000000000BEAD                 db  47h ; G
.eh_frame:000000000000BEAE                 db  0Eh
.eh_frame:000000000000BEAF                 db  10h
.eh_frame:000000000000BEB0                 db  41h ; A
.eh_frame:000000000000BEB1                 db  0Eh
.eh_frame:000000000000BEB2                 db    8
.eh_frame:000000000000BEB3                 db    0
.eh_frame:000000000000BEB4                 db  18h
.eh_frame:000000000000BEB5                 db    0
.eh_frame:000000000000BEB6                 db    0
.eh_frame:000000000000BEB7                 db    0
.eh_frame:000000000000BEB8                 db  98h
.eh_frame:000000000000BEB9                 db    9
.eh_frame:000000000000BEBA                 db    0
.eh_frame:000000000000BEBB                 db    0
.eh_frame:000000000000BEBC                 db  64h ; d
.eh_frame:000000000000BEBD                 db  9Ch
.eh_frame:000000000000BEBE                 db 0FFh
.eh_frame:000000000000BEBF                 db 0FFh
.eh_frame:000000000000BEC0                 db  13h
.eh_frame:000000000000BEC1                 db    0
.eh_frame:000000000000BEC2                 db    0
.eh_frame:000000000000BEC3                 db    0
.eh_frame:000000000000BEC4                 db    0
.eh_frame:000000000000BEC5                 db  41h ; A
.eh_frame:000000000000BEC6                 db  0Eh
.eh_frame:000000000000BEC7                 db  10h
.eh_frame:000000000000BEC8                 db  83h
.eh_frame:000000000000BEC9                 db    2
.eh_frame:000000000000BECA                 db  50h ; P
.eh_frame:000000000000BECB                 db  0Eh
.eh_frame:000000000000BECC                 db    8
.eh_frame:000000000000BECD                 db    0
.eh_frame:000000000000BECE                 db    0
.eh_frame:000000000000BECF                 db    0
.eh_frame:000000000000BED0                 db  14h
.eh_frame:000000000000BED1                 db    0
.eh_frame:000000000000BED2                 db    0
.eh_frame:000000000000BED3                 db    0
.eh_frame:000000000000BED4                 db 0B4h
.eh_frame:000000000000BED5                 db    9
.eh_frame:000000000000BED6                 db    0
.eh_frame:000000000000BED7                 db    0
.eh_frame:000000000000BED8                 db  68h ; h
.eh_frame:000000000000BED9                 db  9Ch
.eh_frame:000000000000BEDA                 db 0FFh
.eh_frame:000000000000BEDB                 db 0FFh
.eh_frame:000000000000BEDC                 db  35h ; 5
.eh_frame:000000000000BEDD                 db    0
.eh_frame:000000000000BEDE                 db    0
.eh_frame:000000000000BEDF                 db    0
.eh_frame:000000000000BEE0                 db    0
.eh_frame:000000000000BEE1                 db  4Bh ; K
.eh_frame:000000000000BEE2                 db  0Eh
.eh_frame:000000000000BEE3                 db  10h
.eh_frame:000000000000BEE4                 db    0
.eh_frame:000000000000BEE5                 db    0
.eh_frame:000000000000BEE6                 db    0
.eh_frame:000000000000BEE7                 db    0
.eh_frame:000000000000BEE8                 db  18h
.eh_frame:000000000000BEE9                 db    0
.eh_frame:000000000000BEEA                 db    0
.eh_frame:000000000000BEEB                 db    0
.eh_frame:000000000000BEEC                 db 0CCh
.eh_frame:000000000000BEED                 db    9
.eh_frame:000000000000BEEE                 db    0
.eh_frame:000000000000BEEF                 db    0
.eh_frame:000000000000BEF0                 db  90h
.eh_frame:000000000000BEF1                 db  9Ch
.eh_frame:000000000000BEF2                 db 0FFh
.eh_frame:000000000000BEF3                 db 0FFh
.eh_frame:000000000000BEF4                 db  4Fh ; O
.eh_frame:000000000000BEF5                 db    0
.eh_frame:000000000000BEF6                 db    0
.eh_frame:000000000000BEF7                 db    0
.eh_frame:000000000000BEF8                 db    0
.eh_frame:000000000000BEF9                 db  44h ; D
.eh_frame:000000000000BEFA                 db  0Eh
.eh_frame:000000000000BEFB                 db  10h
.eh_frame:000000000000BEFC                 db  54h ; T
.eh_frame:000000000000BEFD                 db  0Ah
.eh_frame:000000000000BEFE                 db  0Eh
.eh_frame:000000000000BEFF                 db    8
.eh_frame:000000000000BF00                 db  48h ; H
.eh_frame:000000000000BF01                 db  0Bh
.eh_frame:000000000000BF02                 db    0
.eh_frame:000000000000BF03                 db    0
.eh_frame:000000000000BF04                 db  10h
.eh_frame:000000000000BF05                 db    0
.eh_frame:000000000000BF06                 db    0
.eh_frame:000000000000BF07                 db    0
.eh_frame:000000000000BF08                 db 0E8h
.eh_frame:000000000000BF09                 db    9
.eh_frame:000000000000BF0A                 db    0
.eh_frame:000000000000BF0B                 db    0
.eh_frame:000000000000BF0C                 db 0C4h
.eh_frame:000000000000BF0D                 db  9Ch
.eh_frame:000000000000BF0E                 db 0FFh
.eh_frame:000000000000BF0F                 db 0FFh
.eh_frame:000000000000BF10                 db  29h ; )
.eh_frame:000000000000BF11                 db    0
.eh_frame:000000000000BF12                 db    0
.eh_frame:000000000000BF13                 db    0
.eh_frame:000000000000BF14                 db    0
.eh_frame:000000000000BF15                 db    0
.eh_frame:000000000000BF16                 db    0
.eh_frame:000000000000BF17                 db    0
.eh_frame:000000000000BF18                 db  10h
.eh_frame:000000000000BF19                 db    0
.eh_frame:000000000000BF1A                 db    0
.eh_frame:000000000000BF1B                 db    0
.eh_frame:000000000000BF1C                 db 0FCh
.eh_frame:000000000000BF1D                 db    9
.eh_frame:000000000000BF1E                 db    0
.eh_frame:000000000000BF1F                 db    0
.eh_frame:000000000000BF20                 db 0E0h
.eh_frame:000000000000BF21                 db  9Ch
.eh_frame:000000000000BF22                 db 0FFh
.eh_frame:000000000000BF23                 db 0FFh
.eh_frame:000000000000BF24                 db  1Ah
.eh_frame:000000000000BF25                 db    0
.eh_frame:000000000000BF26                 db    0
.eh_frame:000000000000BF27                 db    0
.eh_frame:000000000000BF28                 db    0
.eh_frame:000000000000BF29                 db    0
.eh_frame:000000000000BF2A                 db    0
.eh_frame:000000000000BF2B                 db    0
.eh_frame:000000000000BF2C                 db  10h
.eh_frame:000000000000BF2D                 db    0
.eh_frame:000000000000BF2E                 db    0
.eh_frame:000000000000BF2F                 db    0
.eh_frame:000000000000BF30                 db  10h
.eh_frame:000000000000BF31                 db  0Ah
.eh_frame:000000000000BF32                 db    0
.eh_frame:000000000000BF33                 db    0
.eh_frame:000000000000BF34                 db 0ECh
.eh_frame:000000000000BF35                 db  9Ch
.eh_frame:000000000000BF36                 db 0FFh
.eh_frame:000000000000BF37                 db 0FFh
.eh_frame:000000000000BF38                 db  0Dh
.eh_frame:000000000000BF39                 db    0
.eh_frame:000000000000BF3A                 db    0
.eh_frame:000000000000BF3B                 db    0
.eh_frame:000000000000BF3C                 db    0
.eh_frame:000000000000BF3D                 db    0
.eh_frame:000000000000BF3E                 db    0
.eh_frame:000000000000BF3F                 db    0
.eh_frame:000000000000BF40                 db  10h
.eh_frame:000000000000BF41                 db    0
.eh_frame:000000000000BF42                 db    0
.eh_frame:000000000000BF43                 db    0
.eh_frame:000000000000BF44                 db  24h ; $
.eh_frame:000000000000BF45                 db  0Ah
.eh_frame:000000000000BF46                 db    0
.eh_frame:000000000000BF47                 db    0
.eh_frame:000000000000BF48                 db 0E8h
.eh_frame:000000000000BF49                 db  9Ch
.eh_frame:000000000000BF4A                 db 0FFh
.eh_frame:000000000000BF4B                 db 0FFh
.eh_frame:000000000000BF4C                 db  0Ch
.eh_frame:000000000000BF4D                 db    0
.eh_frame:000000000000BF4E                 db    0
.eh_frame:000000000000BF4F                 db    0
.eh_frame:000000000000BF50                 db    0
.eh_frame:000000000000BF51                 db    0
.eh_frame:000000000000BF52                 db    0
.eh_frame:000000000000BF53                 db    0
.eh_frame:000000000000BF54                 db  10h
.eh_frame:000000000000BF55                 db    0
.eh_frame:000000000000BF56                 db    0
.eh_frame:000000000000BF57                 db    0
.eh_frame:000000000000BF58                 db  38h ; 8
.eh_frame:000000000000BF59                 db  0Ah
.eh_frame:000000000000BF5A                 db    0
.eh_frame:000000000000BF5B                 db    0
.eh_frame:000000000000BF5C                 db 0E4h
.eh_frame:000000000000BF5D                 db  9Ch
.eh_frame:000000000000BF5E                 db 0FFh
.eh_frame:000000000000BF5F                 db 0FFh
.eh_frame:000000000000BF60                 db  0Ah
.eh_frame:000000000000BF61                 db    0
.eh_frame:000000000000BF62                 db    0
.eh_frame:000000000000BF63                 db    0
.eh_frame:000000000000BF64                 db    0
.eh_frame:000000000000BF65                 db    0
.eh_frame:000000000000BF66                 db    0
.eh_frame:000000000000BF67                 db    0
.eh_frame:000000000000BF68                 db  10h
.eh_frame:000000000000BF69                 db    0
.eh_frame:000000000000BF6A                 db    0
.eh_frame:000000000000BF6B                 db    0
.eh_frame:000000000000BF6C                 db  4Ch ; L
.eh_frame:000000000000BF6D                 db  0Ah
.eh_frame:000000000000BF6E                 db    0
.eh_frame:000000000000BF6F                 db    0
.eh_frame:000000000000BF70                 db 0E0h
.eh_frame:000000000000BF71                 db  9Ch
.eh_frame:000000000000BF72                 db 0FFh
.eh_frame:000000000000BF73                 db 0FFh
.eh_frame:000000000000BF74                 db  26h ; &
.eh_frame:000000000000BF75                 db    0
.eh_frame:000000000000BF76                 db    0
.eh_frame:000000000000BF77                 db    0
.eh_frame:000000000000BF78                 db    0
.eh_frame:000000000000BF79                 db    0
.eh_frame:000000000000BF7A                 db    0
.eh_frame:000000000000BF7B                 db    0
.eh_frame:000000000000BF7C                 db  38h ; 8
.eh_frame:000000000000BF7D                 db    0
.eh_frame:000000000000BF7E                 db    0
.eh_frame:000000000000BF7F                 db    0
.eh_frame:000000000000BF80                 db  60h ; `
.eh_frame:000000000000BF81                 db  0Ah
.eh_frame:000000000000BF82                 db    0
.eh_frame:000000000000BF83                 db    0
.eh_frame:000000000000BF84                 db 0FCh
.eh_frame:000000000000BF85                 db  9Ch
.eh_frame:000000000000BF86                 db 0FFh
.eh_frame:000000000000BF87                 db 0FFh
.eh_frame:000000000000BF88                 db 0C5h
.eh_frame:000000000000BF89                 db    1
.eh_frame:000000000000BF8A                 db    0
.eh_frame:000000000000BF8B                 db    0
.eh_frame:000000000000BF8C                 db    0
.eh_frame:000000000000BF8D                 db  42h ; B
.eh_frame:000000000000BF8E                 db  0Eh
.eh_frame:000000000000BF8F                 db  10h
.eh_frame:000000000000BF90                 db  8Ch
.eh_frame:000000000000BF91                 db    2
.eh_frame:000000000000BF92                 db  41h ; A
.eh_frame:000000000000BF93                 db  0Eh
.eh_frame:000000000000BF94                 db  18h
.eh_frame:000000000000BF95                 db  86h
.eh_frame:000000000000BF96                 db    3
.eh_frame:000000000000BF97                 db  44h ; D
.eh_frame:000000000000BF98                 db  0Eh
.eh_frame:000000000000BF99                 db  20h
.eh_frame:000000000000BF9A                 db  83h
.eh_frame:000000000000BF9B                 db    4
.eh_frame:000000000000BF9C                 db    2
.eh_frame:000000000000BF9D                 db  72h ; r
.eh_frame:000000000000BF9E                 db  0Ah
.eh_frame:000000000000BF9F                 db  0Eh
.eh_frame:000000000000BFA0                 db  18h
.eh_frame:000000000000BFA1                 db  41h ; A
.eh_frame:000000000000BFA2                 db  0Eh
.eh_frame:000000000000BFA3                 db  10h
.eh_frame:000000000000BFA4                 db  42h ; B
.eh_frame:000000000000BFA5                 db  0Eh
.eh_frame:000000000000BFA6                 db    8
.eh_frame:000000000000BFA7                 db  44h ; D
.eh_frame:000000000000BFA8                 db  0Bh
.eh_frame:000000000000BFA9                 db    2
.eh_frame:000000000000BFAA                 db  54h ; T
.eh_frame:000000000000BFAB                 db  0Ah
.eh_frame:000000000000BFAC                 db  0Eh
.eh_frame:000000000000BFAD                 db  18h
.eh_frame:000000000000BFAE                 db  45h ; E
.eh_frame:000000000000BFAF                 db  0Eh
.eh_frame:000000000000BFB0                 db  10h
.eh_frame:000000000000BFB1                 db  42h ; B
.eh_frame:000000000000BFB2                 db  0Eh
.eh_frame:000000000000BFB3                 db    8
.eh_frame:000000000000BFB4                 db  45h ; E
.eh_frame:000000000000BFB5                 db  0Bh
.eh_frame:000000000000BFB6                 db    0
.eh_frame:000000000000BFB7                 db    0
.eh_frame:000000000000BFB8                 db  4Ch ; L
.eh_frame:000000000000BFB9                 db    0
.eh_frame:000000000000BFBA                 db    0
.eh_frame:000000000000BFBB                 db    0
.eh_frame:000000000000BFBC                 db  9Ch
.eh_frame:000000000000BFBD                 db  0Ah
.eh_frame:000000000000BFBE                 db    0
.eh_frame:000000000000BFBF                 db    0
.eh_frame:000000000000BFC0                 db  90h
.eh_frame:000000000000BFC1                 db  9Eh
.eh_frame:000000000000BFC2                 db 0FFh
.eh_frame:000000000000BFC3                 db 0FFh
.eh_frame:000000000000BFC4                 db    5
.eh_frame:000000000000BFC5                 db    1
.eh_frame:000000000000BFC6                 db    0
.eh_frame:000000000000BFC7                 db    0
.eh_frame:000000000000BFC8                 db    0
.eh_frame:000000000000BFC9                 db  42h ; B
.eh_frame:000000000000BFCA                 db  0Eh
.eh_frame:000000000000BFCB                 db  10h
.eh_frame:000000000000BFCC                 db  8Dh
.eh_frame:000000000000BFCD                 db    2
.eh_frame:000000000000BFCE                 db  42h ; B
.eh_frame:000000000000BFCF                 db  0Eh
.eh_frame:000000000000BFD0                 db  18h
.eh_frame:000000000000BFD1                 db  8Ch
.eh_frame:000000000000BFD2                 db    3
.eh_frame:000000000000BFD3                 db  44h ; D
.eh_frame:000000000000BFD4                 db  0Eh
.eh_frame:000000000000BFD5                 db  20h
.eh_frame:000000000000BFD6                 db  86h
.eh_frame:000000000000BFD7                 db    4
.eh_frame:000000000000BFD8                 db  41h ; A
.eh_frame:000000000000BFD9                 db  0Eh
.eh_frame:000000000000BFDA                 db  28h ; (
.eh_frame:000000000000BFDB                 db  83h
.eh_frame:000000000000BFDC                 db    5
.eh_frame:000000000000BFDD                 db  4Ah ; J
.eh_frame:000000000000BFDE                 db  0Eh
.eh_frame:000000000000BFDF                 db  30h ; 0
.eh_frame:000000000000BFE0                 db    2
.eh_frame:000000000000BFE1                 db 0B3h
.eh_frame:000000000000BFE2                 db  0Ah
.eh_frame:000000000000BFE3                 db  0Eh
.eh_frame:000000000000BFE4                 db  28h ; (
.eh_frame:000000000000BFE5                 db  41h ; A
.eh_frame:000000000000BFE6                 db  0Eh
.eh_frame:000000000000BFE7                 db  20h
.eh_frame:000000000000BFE8                 db  41h ; A
.eh_frame:000000000000BFE9                 db  0Eh
.eh_frame:000000000000BFEA                 db  18h
.eh_frame:000000000000BFEB                 db  42h ; B
.eh_frame:000000000000BFEC                 db  0Eh
.eh_frame:000000000000BFED                 db  10h
.eh_frame:000000000000BFEE                 db  42h ; B
.eh_frame:000000000000BFEF                 db  0Eh
.eh_frame:000000000000BFF0                 db    8
.eh_frame:000000000000BFF1                 db  44h ; D
.eh_frame:000000000000BFF2                 db  0Bh
.eh_frame:000000000000BFF3                 db  5Dh ; ]
.eh_frame:000000000000BFF4                 db  0Ah
.eh_frame:000000000000BFF5                 db  0Eh
.eh_frame:000000000000BFF6                 db  28h ; (
.eh_frame:000000000000BFF7                 db  44h ; D
.eh_frame:000000000000BFF8                 db  0Eh
.eh_frame:000000000000BFF9                 db  20h
.eh_frame:000000000000BFFA                 db  41h ; A
.eh_frame:000000000000BFFB                 db  0Eh
.eh_frame:000000000000BFFC                 db  18h
.eh_frame:000000000000BFFD                 db  42h ; B
.eh_frame:000000000000BFFE                 db  0Eh
.eh_frame:000000000000BFFF                 db  10h
.eh_frame:000000000000C000                 db  42h ; B
.eh_frame:000000000000C001                 db  0Eh
.eh_frame:000000000000C002                 db    8
.eh_frame:000000000000C003                 db  4Ah ; J
.eh_frame:000000000000C004                 db  0Bh
.eh_frame:000000000000C005                 db    0
.eh_frame:000000000000C006                 db    0
.eh_frame:000000000000C007                 db    0
.eh_frame:000000000000C008                 db  34h ; 4
.eh_frame:000000000000C009                 db    0
.eh_frame:000000000000C00A                 db    0
.eh_frame:000000000000C00B                 db    0
.eh_frame:000000000000C00C                 db 0ECh
.eh_frame:000000000000C00D                 db  0Ah
.eh_frame:000000000000C00E                 db    0
.eh_frame:000000000000C00F                 db    0
.eh_frame:000000000000C010                 db  50h ; P
.eh_frame:000000000000C011                 db  9Fh
.eh_frame:000000000000C012                 db 0FFh
.eh_frame:000000000000C013                 db 0FFh
.eh_frame:000000000000C014                 db  8Ah
.eh_frame:000000000000C015                 db    0
.eh_frame:000000000000C016                 db    0
.eh_frame:000000000000C017                 db    0
.eh_frame:000000000000C018                 db    0
.eh_frame:000000000000C019                 db  42h ; B
.eh_frame:000000000000C01A                 db  0Eh
.eh_frame:000000000000C01B                 db  10h
.eh_frame:000000000000C01C                 db  8Dh
.eh_frame:000000000000C01D                 db    2
.eh_frame:000000000000C01E                 db  42h ; B
.eh_frame:000000000000C01F                 db  0Eh
.eh_frame:000000000000C020                 db  18h
.eh_frame:000000000000C021                 db  8Ch
.eh_frame:000000000000C022                 db    3
.eh_frame:000000000000C023                 db  44h ; D
.eh_frame:000000000000C024                 db  0Eh
.eh_frame:000000000000C025                 db  20h
.eh_frame:000000000000C026                 db  86h
.eh_frame:000000000000C027                 db    4
.eh_frame:000000000000C028                 db  48h ; H
.eh_frame:000000000000C029                 db  0Eh
.eh_frame:000000000000C02A                 db  28h ; (
.eh_frame:000000000000C02B                 db  83h
.eh_frame:000000000000C02C                 db    5
.eh_frame:000000000000C02D                 db  4Ah ; J
.eh_frame:000000000000C02E                 db  0Eh
.eh_frame:000000000000C02F                 db  30h ; 0
.eh_frame:000000000000C030                 db    2
.eh_frame:000000000000C031                 db  66h ; f
.eh_frame:000000000000C032                 db  0Eh
.eh_frame:000000000000C033                 db  28h ; (
.eh_frame:000000000000C034                 db  44h ; D
.eh_frame:000000000000C035                 db  0Eh
.eh_frame:000000000000C036                 db  20h
.eh_frame:000000000000C037                 db  41h ; A
.eh_frame:000000000000C038                 db  0Eh
.eh_frame:000000000000C039                 db  18h
.eh_frame:000000000000C03A                 db  42h ; B
.eh_frame:000000000000C03B                 db  0Eh
.eh_frame:000000000000C03C                 db  10h
.eh_frame:000000000000C03D                 db  42h ; B
.eh_frame:000000000000C03E                 db  0Eh
.eh_frame:000000000000C03F                 db    8
.eh_frame:000000000000C040                 db  28h ; (
.eh_frame:000000000000C041                 db    0
.eh_frame:000000000000C042                 db    0
.eh_frame:000000000000C043                 db    0
.eh_frame:000000000000C044                 db  24h ; $
.eh_frame:000000000000C045                 db  0Bh
.eh_frame:000000000000C046                 db    0
.eh_frame:000000000000C047                 db    0
.eh_frame:000000000000C048                 db 0A8h
.eh_frame:000000000000C049                 db  9Fh
.eh_frame:000000000000C04A                 db 0FFh
.eh_frame:000000000000C04B                 db 0FFh
.eh_frame:000000000000C04C                 db  42h ; B
.eh_frame:000000000000C04D                 db    0
.eh_frame:000000000000C04E                 db    0
.eh_frame:000000000000C04F                 db    0
.eh_frame:000000000000C050                 db    0
.eh_frame:000000000000C051                 db  46h ; F
.eh_frame:000000000000C052                 db  0Eh
.eh_frame:000000000000C053                 db  10h
.eh_frame:000000000000C054                 db  86h
.eh_frame:000000000000C055                 db    2
.eh_frame:000000000000C056                 db  41h ; A
.eh_frame:000000000000C057                 db  0Eh
.eh_frame:000000000000C058                 db  18h
.eh_frame:000000000000C059                 db  83h
.eh_frame:000000000000C05A                 db    3
.eh_frame:000000000000C05B                 db  47h ; G
.eh_frame:000000000000C05C                 db  0Eh
.eh_frame:000000000000C05D                 db  20h
.eh_frame:000000000000C05E                 db  68h ; h
.eh_frame:000000000000C05F                 db  0Eh
.eh_frame:000000000000C060                 db  18h
.eh_frame:000000000000C061                 db  41h ; A
.eh_frame:000000000000C062                 db  0Eh
.eh_frame:000000000000C063                 db  10h
.eh_frame:000000000000C064                 db  41h ; A
.eh_frame:000000000000C065                 db  0Eh
.eh_frame:000000000000C066                 db    8
.eh_frame:000000000000C067                 db  48h ; H
.eh_frame:000000000000C068                 db 0C3h
.eh_frame:000000000000C069                 db 0C6h
.eh_frame:000000000000C06A                 db    0
.eh_frame:000000000000C06B                 db    0
.eh_frame:000000000000C06C                 db  18h
.eh_frame:000000000000C06D                 db    0
.eh_frame:000000000000C06E                 db    0
.eh_frame:000000000000C06F                 db    0
.eh_frame:000000000000C070                 db  50h ; P
.eh_frame:000000000000C071                 db  0Bh
.eh_frame:000000000000C072                 db    0
.eh_frame:000000000000C073                 db    0
.eh_frame:000000000000C074                 db 0CCh
.eh_frame:000000000000C075                 db  9Fh
.eh_frame:000000000000C076                 db 0FFh
.eh_frame:000000000000C077                 db 0FFh
.eh_frame:000000000000C078                 db  39h ; 9
.eh_frame:000000000000C079                 db    0
.eh_frame:000000000000C07A                 db    0
.eh_frame:000000000000C07B                 db    0
.eh_frame:000000000000C07C                 db    0
.eh_frame:000000000000C07D                 db  41h ; A
.eh_frame:000000000000C07E                 db  0Eh
.eh_frame:000000000000C07F                 db  10h
.eh_frame:000000000000C080                 db  83h
.eh_frame:000000000000C081                 db    2
.eh_frame:000000000000C082                 db  68h ; h
.eh_frame:000000000000C083                 db  0Ah
.eh_frame:000000000000C084                 db  0Eh
.eh_frame:000000000000C085                 db    8
.eh_frame:000000000000C086                 db  47h ; G
.eh_frame:000000000000C087                 db  0Bh
.eh_frame:000000000000C088                 db  38h ; 8
.eh_frame:000000000000C089                 db    0
.eh_frame:000000000000C08A                 db    0
.eh_frame:000000000000C08B                 db    0
.eh_frame:000000000000C08C                 db  6Ch ; l
.eh_frame:000000000000C08D                 db  0Bh
.eh_frame:000000000000C08E                 db    0
.eh_frame:000000000000C08F                 db    0
.eh_frame:000000000000C090                 db 0F0h
.eh_frame:000000000000C091                 db  9Fh
.eh_frame:000000000000C092                 db 0FFh
.eh_frame:000000000000C093                 db 0FFh
.eh_frame:000000000000C094                 db  2Ch ; ,
.eh_frame:000000000000C095                 db    1
.eh_frame:000000000000C096                 db    0
.eh_frame:000000000000C097                 db    0
.eh_frame:000000000000C098                 db    0
.eh_frame:000000000000C099                 db  42h ; B
.eh_frame:000000000000C09A                 db  0Eh
.eh_frame:000000000000C09B                 db  10h
.eh_frame:000000000000C09C                 db  8Dh
.eh_frame:000000000000C09D                 db    2
.eh_frame:000000000000C09E                 db  42h ; B
.eh_frame:000000000000C09F                 db  0Eh
.eh_frame:000000000000C0A0                 db  18h
.eh_frame:000000000000C0A1                 db  8Ch
.eh_frame:000000000000C0A2                 db    3
.eh_frame:000000000000C0A3                 db  41h ; A
.eh_frame:000000000000C0A4                 db  0Eh
.eh_frame:000000000000C0A5                 db  20h
.eh_frame:000000000000C0A6                 db  86h
.eh_frame:000000000000C0A7                 db    4
.eh_frame:000000000000C0A8                 db  41h ; A
.eh_frame:000000000000C0A9                 db  0Eh
.eh_frame:000000000000C0AA                 db  28h ; (
.eh_frame:000000000000C0AB                 db  83h
.eh_frame:000000000000C0AC                 db    5
.eh_frame:000000000000C0AD                 db  47h ; G
.eh_frame:000000000000C0AE                 db  0Eh
.eh_frame:000000000000C0AF                 db 0C0h
.eh_frame:000000000000C0B0                 db    1
.eh_frame:000000000000C0B1                 db    2
.eh_frame:000000000000C0B2                 db 0A4h
.eh_frame:000000000000C0B3                 db  0Ah
.eh_frame:000000000000C0B4                 db  0Eh
.eh_frame:000000000000C0B5                 db  28h ; (
.eh_frame:000000000000C0B6                 db  41h ; A
.eh_frame:000000000000C0B7                 db  0Eh
.eh_frame:000000000000C0B8                 db  20h
.eh_frame:000000000000C0B9                 db  41h ; A
.eh_frame:000000000000C0BA                 db  0Eh
.eh_frame:000000000000C0BB                 db  18h
.eh_frame:000000000000C0BC                 db  42h ; B
.eh_frame:000000000000C0BD                 db  0Eh
.eh_frame:000000000000C0BE                 db  10h
.eh_frame:000000000000C0BF                 db  42h ; B
.eh_frame:000000000000C0C0                 db  0Eh
.eh_frame:000000000000C0C1                 db    8
.eh_frame:000000000000C0C2                 db  49h ; I
.eh_frame:000000000000C0C3                 db  0Bh
.eh_frame:000000000000C0C4                 db  20h
.eh_frame:000000000000C0C5                 db    0
.eh_frame:000000000000C0C6                 db    0
.eh_frame:000000000000C0C7                 db    0
.eh_frame:000000000000C0C8                 db 0A8h
.eh_frame:000000000000C0C9                 db  0Bh
.eh_frame:000000000000C0CA                 db    0
.eh_frame:000000000000C0CB                 db    0
.eh_frame:000000000000C0CC                 db 0E4h
.eh_frame:000000000000C0CD                 db 0A0h
.eh_frame:000000000000C0CE                 db 0FFh
.eh_frame:000000000000C0CF                 db 0FFh
.eh_frame:000000000000C0D0                 db  6Ah ; j
.eh_frame:000000000000C0D1                 db    0
.eh_frame:000000000000C0D2                 db    0
.eh_frame:000000000000C0D3                 db    0
.eh_frame:000000000000C0D4                 db    0
.eh_frame:000000000000C0D5                 db  44h ; D
.eh_frame:000000000000C0D6                 db  0Eh
.eh_frame:000000000000C0D7                 db  10h
.eh_frame:000000000000C0D8                 db  72h ; r
.eh_frame:000000000000C0D9                 db  0Ah
.eh_frame:000000000000C0DA                 db  0Eh
.eh_frame:000000000000C0DB                 db    8
.eh_frame:000000000000C0DC                 db  4Ah ; J
.eh_frame:000000000000C0DD                 db  0Bh
.eh_frame:000000000000C0DE                 db  5Bh ; [
.eh_frame:000000000000C0DF                 db  0Ah
.eh_frame:000000000000C0E0                 db  0Eh
.eh_frame:000000000000C0E1                 db    8
.eh_frame:000000000000C0E2                 db  45h ; E
.eh_frame:000000000000C0E3                 db  0Bh
.eh_frame:000000000000C0E4                 db  49h ; I
.eh_frame:000000000000C0E5                 db  0Eh
.eh_frame:000000000000C0E6                 db    8
.eh_frame:000000000000C0E7                 db    0
.eh_frame:000000000000C0E8                 db  40h ; @
.eh_frame:000000000000C0E9                 db    0
.eh_frame:000000000000C0EA                 db    0
.eh_frame:000000000000C0EB                 db    0
.eh_frame:000000000000C0EC                 db 0CCh
.eh_frame:000000000000C0ED                 db  0Bh
.eh_frame:000000000000C0EE                 db    0
.eh_frame:000000000000C0EF                 db    0
.eh_frame:000000000000C0F0                 db  30h ; 0
.eh_frame:000000000000C0F1                 db 0A1h
.eh_frame:000000000000C0F2                 db 0FFh
.eh_frame:000000000000C0F3                 db 0FFh
.eh_frame:000000000000C0F4                 db  66h ; f
.eh_frame:000000000000C0F5                 db    0
.eh_frame:000000000000C0F6                 db    0
.eh_frame:000000000000C0F7                 db    0
.eh_frame:000000000000C0F8                 db    0
.eh_frame:000000000000C0F9                 db  41h ; A
.eh_frame:000000000000C0FA                 db  0Eh
.eh_frame:000000000000C0FB                 db  10h
.eh_frame:000000000000C0FC                 db  86h
.eh_frame:000000000000C0FD                 db    2
.eh_frame:000000000000C0FE                 db  41h ; A
.eh_frame:000000000000C0FF                 db  0Eh
.eh_frame:000000000000C100                 db  18h
.eh_frame:000000000000C101                 db  83h
.eh_frame:000000000000C102                 db    3
.eh_frame:000000000000C103                 db  49h ; I
.eh_frame:000000000000C104                 db  0Eh
.eh_frame:000000000000C105                 db  20h
.eh_frame:000000000000C106                 db  61h ; a
.eh_frame:000000000000C107                 db  0Ah
.eh_frame:000000000000C108                 db  0Eh
.eh_frame:000000000000C109                 db  18h
.eh_frame:000000000000C10A                 db  41h ; A
.eh_frame:000000000000C10B                 db  0Eh
.eh_frame:000000000000C10C                 db  10h
.eh_frame:000000000000C10D                 db  41h ; A
.eh_frame:000000000000C10E                 db  0Eh
.eh_frame:000000000000C10F                 db    8
.eh_frame:000000000000C110                 db  42h ; B
.eh_frame:000000000000C111                 db  0Bh
.eh_frame:000000000000C112                 db  5Bh ; [
.eh_frame:000000000000C113                 db  0Ah
.eh_frame:000000000000C114                 db  0Eh
.eh_frame:000000000000C115                 db  18h
.eh_frame:000000000000C116                 db  41h ; A
.eh_frame:000000000000C117                 db  0Eh
.eh_frame:000000000000C118                 db  10h
.eh_frame:000000000000C119                 db  41h ; A
.eh_frame:000000000000C11A                 db  0Eh
.eh_frame:000000000000C11B                 db    8
.eh_frame:000000000000C11C                 db  43h ; C
.eh_frame:000000000000C11D                 db  0Bh
.eh_frame:000000000000C11E                 db  4Eh ; N
.eh_frame:000000000000C11F                 db  0Ah
.eh_frame:000000000000C120                 db  0Eh
.eh_frame:000000000000C121                 db  18h
.eh_frame:000000000000C122                 db  41h ; A
.eh_frame:000000000000C123                 db  0Eh
.eh_frame:000000000000C124                 db  10h
.eh_frame:000000000000C125                 db  41h ; A
.eh_frame:000000000000C126                 db  0Eh
.eh_frame:000000000000C127                 db    8
.eh_frame:000000000000C128                 db  41h ; A
.eh_frame:000000000000C129                 db  0Bh
.eh_frame:000000000000C12A                 db    0
.eh_frame:000000000000C12B                 db    0
.eh_frame:000000000000C12C                 db  28h ; (
.eh_frame:000000000000C12D                 db    0
.eh_frame:000000000000C12E                 db    0
.eh_frame:000000000000C12F                 db    0
.eh_frame:000000000000C130                 db  10h
.eh_frame:000000000000C131                 db  0Ch
.eh_frame:000000000000C132                 db    0
.eh_frame:000000000000C133                 db    0
.eh_frame:000000000000C134                 db  5Ch ; \
.eh_frame:000000000000C135                 db 0A1h
.eh_frame:000000000000C136                 db 0FFh
.eh_frame:000000000000C137                 db 0FFh
.eh_frame:000000000000C138                 db  5Ch ; \
.eh_frame:000000000000C139                 db    0
.eh_frame:000000000000C13A                 db    0
.eh_frame:000000000000C13B                 db    0
.eh_frame:000000000000C13C                 db    0
.eh_frame:000000000000C13D                 db  41h ; A
.eh_frame:000000000000C13E                 db  0Eh
.eh_frame:000000000000C13F                 db  10h
.eh_frame:000000000000C140                 db  86h
.eh_frame:000000000000C141                 db    2
.eh_frame:000000000000C142                 db  41h ; A
.eh_frame:000000000000C143                 db  0Eh
.eh_frame:000000000000C144                 db  18h
.eh_frame:000000000000C145                 db  83h
.eh_frame:000000000000C146                 db    3
.eh_frame:000000000000C147                 db  47h ; G
.eh_frame:000000000000C148                 db  0Eh
.eh_frame:000000000000C149                 db  20h
.eh_frame:000000000000C14A                 db  6Ch ; l
.eh_frame:000000000000C14B                 db  0Ah
.eh_frame:000000000000C14C                 db  0Eh
.eh_frame:000000000000C14D                 db  18h
.eh_frame:000000000000C14E                 db  43h ; C
.eh_frame:000000000000C14F                 db  0Eh
.eh_frame:000000000000C150                 db  10h
.eh_frame:000000000000C151                 db  41h ; A
.eh_frame:000000000000C152                 db  0Eh
.eh_frame:000000000000C153                 db    8
.eh_frame:000000000000C154                 db  47h ; G
.eh_frame:000000000000C155                 db  0Bh
.eh_frame:000000000000C156                 db    0
.eh_frame:000000000000C157                 db    0
.eh_frame:000000000000C158                 db  24h ; $
.eh_frame:000000000000C159                 db    0
.eh_frame:000000000000C15A                 db    0
.eh_frame:000000000000C15B                 db    0
.eh_frame:000000000000C15C                 db  3Ch ; <
.eh_frame:000000000000C15D                 db  0Ch
.eh_frame:000000000000C15E                 db    0
.eh_frame:000000000000C15F                 db    0
.eh_frame:000000000000C160                 db  90h
.eh_frame:000000000000C161                 db 0A1h
.eh_frame:000000000000C162                 db 0FFh
.eh_frame:000000000000C163                 db 0FFh
.eh_frame:000000000000C164                 db  6Bh ; k
.eh_frame:000000000000C165                 db    0
.eh_frame:000000000000C166                 db    0
.eh_frame:000000000000C167                 db    0
.eh_frame:000000000000C168                 db    0
.eh_frame:000000000000C169                 db  41h ; A
.eh_frame:000000000000C16A                 db  0Eh
.eh_frame:000000000000C16B                 db  10h
.eh_frame:000000000000C16C                 db  83h
.eh_frame:000000000000C16D                 db    2
.eh_frame:000000000000C16E                 db  6Fh ; o
.eh_frame:000000000000C16F                 db  0Ah
.eh_frame:000000000000C170                 db  0Eh
.eh_frame:000000000000C171                 db    8
.eh_frame:000000000000C172                 db  48h ; H
.eh_frame:000000000000C173                 db  0Bh
.eh_frame:000000000000C174                 db  5Ah ; Z
.eh_frame:000000000000C175                 db  0Ah
.eh_frame:000000000000C176                 db  0Eh
.eh_frame:000000000000C177                 db    8
.eh_frame:000000000000C178                 db  46h ; F
.eh_frame:000000000000C179                 db  0Bh
.eh_frame:000000000000C17A                 db  52h ; R
.eh_frame:000000000000C17B                 db  0Eh
.eh_frame:000000000000C17C                 db    8
.eh_frame:000000000000C17D                 db    0
.eh_frame:000000000000C17E                 db    0
.eh_frame:000000000000C17F                 db    0
.eh_frame:000000000000C180                 db  1Ch
.eh_frame:000000000000C181                 db    0
.eh_frame:000000000000C182                 db    0
.eh_frame:000000000000C183                 db    0
.eh_frame:000000000000C184                 db  64h ; d
.eh_frame:000000000000C185                 db  0Ch
.eh_frame:000000000000C186                 db    0
.eh_frame:000000000000C187                 db    0
.eh_frame:000000000000C188                 db 0D8h
.eh_frame:000000000000C189                 db 0A1h
.eh_frame:000000000000C18A                 db 0FFh
.eh_frame:000000000000C18B                 db 0FFh
.eh_frame:000000000000C18C                 db  63h ; c
.eh_frame:000000000000C18D                 db    0
.eh_frame:000000000000C18E                 db    0
.eh_frame:000000000000C18F                 db    0
.eh_frame:000000000000C190                 db    0
.eh_frame:000000000000C191                 db  47h ; G
.eh_frame:000000000000C192                 db  0Eh
.eh_frame:000000000000C193                 db  10h
.eh_frame:000000000000C194                 db  83h
.eh_frame:000000000000C195                 db    2
.eh_frame:000000000000C196                 db  70h ; p
.eh_frame:000000000000C197                 db  0Ah
.eh_frame:000000000000C198                 db  0Eh
.eh_frame:000000000000C199                 db    8
.eh_frame:000000000000C19A                 db  49h ; I
.eh_frame:000000000000C19B                 db  0Bh
.eh_frame:000000000000C19C                 db  62h ; b
.eh_frame:000000000000C19D                 db  0Eh
.eh_frame:000000000000C19E                 db    8
.eh_frame:000000000000C19F                 db    0
.eh_frame:000000000000C1A0                 db  10h
.eh_frame:000000000000C1A1                 db    0
.eh_frame:000000000000C1A2                 db    0
.eh_frame:000000000000C1A3                 db    0
.eh_frame:000000000000C1A4                 db  84h
.eh_frame:000000000000C1A5                 db  0Ch
.eh_frame:000000000000C1A6                 db    0
.eh_frame:000000000000C1A7                 db    0
.eh_frame:000000000000C1A8                 db  28h ; (
.eh_frame:000000000000C1A9                 db 0A2h
.eh_frame:000000000000C1AA                 db 0FFh
.eh_frame:000000000000C1AB                 db 0FFh
.eh_frame:000000000000C1AC                 db  3Ah ; :
.eh_frame:000000000000C1AD                 db    0
.eh_frame:000000000000C1AE                 db    0
.eh_frame:000000000000C1AF                 db    0
.eh_frame:000000000000C1B0                 db    0
.eh_frame:000000000000C1B1                 db    0
.eh_frame:000000000000C1B2                 db    0
.eh_frame:000000000000C1B3                 db    0
.eh_frame:000000000000C1B4                 db  4Ch ; L
.eh_frame:000000000000C1B5                 db    0
.eh_frame:000000000000C1B6                 db    0
.eh_frame:000000000000C1B7                 db    0
.eh_frame:000000000000C1B8                 db  98h
.eh_frame:000000000000C1B9                 db  0Ch
.eh_frame:000000000000C1BA                 db    0
.eh_frame:000000000000C1BB                 db    0
.eh_frame:000000000000C1BC                 db  54h ; T
.eh_frame:000000000000C1BD                 db 0A2h
.eh_frame:000000000000C1BE                 db 0FFh
.eh_frame:000000000000C1BF                 db 0FFh
.eh_frame:000000000000C1C0                 db  7Ah ; z
.eh_frame:000000000000C1C1                 db    2
.eh_frame:000000000000C1C2                 db    0
.eh_frame:000000000000C1C3                 db    0
.eh_frame:000000000000C1C4                 db    0
.eh_frame:000000000000C1C5                 db  42h ; B
.eh_frame:000000000000C1C6                 db  0Eh
.eh_frame:000000000000C1C7                 db  10h
.eh_frame:000000000000C1C8                 db  8Fh
.eh_frame:000000000000C1C9                 db    2
.eh_frame:000000000000C1CA                 db  42h ; B
.eh_frame:000000000000C1CB                 db  0Eh
.eh_frame:000000000000C1CC                 db  18h
.eh_frame:000000000000C1CD                 db  8Eh
.eh_frame:000000000000C1CE                 db    3
.eh_frame:000000000000C1CF                 db  45h ; E
.eh_frame:000000000000C1D0                 db  0Eh
.eh_frame:000000000000C1D1                 db  20h
.eh_frame:000000000000C1D2                 db  8Dh
.eh_frame:000000000000C1D3                 db    4
.eh_frame:000000000000C1D4                 db  42h ; B
.eh_frame:000000000000C1D5                 db  0Eh
.eh_frame:000000000000C1D6                 db  28h ; (
.eh_frame:000000000000C1D7                 db  8Ch
.eh_frame:000000000000C1D8                 db    5
.eh_frame:000000000000C1D9                 db  44h ; D
.eh_frame:000000000000C1DA                 db  0Eh
.eh_frame:000000000000C1DB                 db  30h ; 0
.eh_frame:000000000000C1DC                 db  86h
.eh_frame:000000000000C1DD                 db    6
.eh_frame:000000000000C1DE                 db  41h ; A
.eh_frame:000000000000C1DF                 db  0Eh
.eh_frame:000000000000C1E0                 db  38h ; 8
.eh_frame:000000000000C1E1                 db  83h
.eh_frame:000000000000C1E2                 db    7
.eh_frame:000000000000C1E3                 db  4Dh ; M
.eh_frame:000000000000C1E4                 db  0Eh
.eh_frame:000000000000C1E5                 db 0F0h
.eh_frame:000000000000C1E6                 db    1
.eh_frame:000000000000C1E7                 db    3
.eh_frame:000000000000C1E8                 db    8
.eh_frame:000000000000C1E9                 db    1
.eh_frame:000000000000C1EA                 db  0Ah
.eh_frame:000000000000C1EB                 db  0Eh
.eh_frame:000000000000C1EC                 db  38h ; 8
.eh_frame:000000000000C1ED                 db  41h ; A
.eh_frame:000000000000C1EE                 db  0Eh
.eh_frame:000000000000C1EF                 db  30h ; 0
.eh_frame:000000000000C1F0                 db  41h ; A
.eh_frame:000000000000C1F1                 db  0Eh
.eh_frame:000000000000C1F2                 db  28h ; (
.eh_frame:000000000000C1F3                 db  42h ; B
.eh_frame:000000000000C1F4                 db  0Eh
.eh_frame:000000000000C1F5                 db  20h
.eh_frame:000000000000C1F6                 db  42h ; B
.eh_frame:000000000000C1F7                 db  0Eh
.eh_frame:000000000000C1F8                 db  18h
.eh_frame:000000000000C1F9                 db  42h ; B
.eh_frame:000000000000C1FA                 db  0Eh
.eh_frame:000000000000C1FB                 db  10h
.eh_frame:000000000000C1FC                 db  42h ; B
.eh_frame:000000000000C1FD                 db  0Eh
.eh_frame:000000000000C1FE                 db    8
.eh_frame:000000000000C1FF                 db  41h ; A
.eh_frame:000000000000C200                 db  0Bh
.eh_frame:000000000000C201                 db    0
.eh_frame:000000000000C202                 db    0
.eh_frame:000000000000C203                 db    0
.eh_frame:000000000000C204                 db  40h ; @
.eh_frame:000000000000C205                 db    0
.eh_frame:000000000000C206                 db    0
.eh_frame:000000000000C207                 db    0
.eh_frame:000000000000C208                 db 0E8h
.eh_frame:000000000000C209                 db  0Ch
.eh_frame:000000000000C20A                 db    0
.eh_frame:000000000000C20B                 db    0
.eh_frame:000000000000C20C                 db  84h
.eh_frame:000000000000C20D                 db 0A4h
.eh_frame:000000000000C20E                 db 0FFh
.eh_frame:000000000000C20F                 db 0FFh
.eh_frame:000000000000C210                 db 0AFh
.eh_frame:000000000000C211                 db    0
.eh_frame:000000000000C212                 db    0
.eh_frame:000000000000C213                 db    0
.eh_frame:000000000000C214                 db    0
.eh_frame:000000000000C215                 db  48h ; H
.eh_frame:000000000000C216                 db  0Eh
.eh_frame:000000000000C217                 db  10h
.eh_frame:000000000000C218                 db  8Ch
.eh_frame:000000000000C219                 db    2
.eh_frame:000000000000C21A                 db  44h ; D
.eh_frame:000000000000C21B                 db  0Eh
.eh_frame:000000000000C21C                 db  18h
.eh_frame:000000000000C21D                 db  86h
.eh_frame:000000000000C21E                 db    3
.eh_frame:000000000000C21F                 db  41h ; A
.eh_frame:000000000000C220                 db  0Eh
.eh_frame:000000000000C221                 db  20h
.eh_frame:000000000000C222                 db  83h
.eh_frame:000000000000C223                 db    4
.eh_frame:000000000000C224                 db    2
.eh_frame:000000000000C225                 db  65h ; e
.eh_frame:000000000000C226                 db  0Ah
.eh_frame:000000000000C227                 db  0Eh
.eh_frame:000000000000C228                 db  18h
.eh_frame:000000000000C229                 db  46h ; F
.eh_frame:000000000000C22A                 db  0Eh
.eh_frame:000000000000C22B                 db  10h
.eh_frame:000000000000C22C                 db  42h ; B
.eh_frame:000000000000C22D                 db  0Eh
.eh_frame:000000000000C22E                 db    8
.eh_frame:000000000000C22F                 db  46h ; F
.eh_frame:000000000000C230                 db  0Bh
.eh_frame:000000000000C231                 db  5Eh ; ^
.eh_frame:000000000000C232                 db  0Ah
.eh_frame:000000000000C233                 db  0Eh
.eh_frame:000000000000C234                 db  18h
.eh_frame:000000000000C235                 db  41h ; A
.eh_frame:000000000000C236                 db  0Eh
.eh_frame:000000000000C237                 db  10h
.eh_frame:000000000000C238                 db  42h ; B
.eh_frame:000000000000C239                 db  0Eh
.eh_frame:000000000000C23A                 db    8
.eh_frame:000000000000C23B                 db  47h ; G
.eh_frame:000000000000C23C                 db  0Bh
.eh_frame:000000000000C23D                 db  41h ; A
.eh_frame:000000000000C23E                 db  0Eh
.eh_frame:000000000000C23F                 db  18h
.eh_frame:000000000000C240                 db  43h ; C
.eh_frame:000000000000C241                 db  0Eh
.eh_frame:000000000000C242                 db  10h
.eh_frame:000000000000C243                 db  42h ; B
.eh_frame:000000000000C244                 db  0Eh
.eh_frame:000000000000C245                 db    8
.eh_frame:000000000000C246                 db    0
.eh_frame:000000000000C247                 db    0
.eh_frame:000000000000C248                 db  18h
.eh_frame:000000000000C249                 db    0
.eh_frame:000000000000C24A                 db    0
.eh_frame:000000000000C24B                 db    0
.eh_frame:000000000000C24C                 db  2Ch ; ,
.eh_frame:000000000000C24D                 db  0Dh
.eh_frame:000000000000C24E                 db    0
.eh_frame:000000000000C24F                 db    0
.eh_frame:000000000000C250                 db 0F0h
.eh_frame:000000000000C251                 db 0A4h
.eh_frame:000000000000C252                 db 0FFh
.eh_frame:000000000000C253                 db 0FFh
.eh_frame:000000000000C254                 db 0B8h
.eh_frame:000000000000C255                 db    0
.eh_frame:000000000000C256                 db    0
.eh_frame:000000000000C257                 db    0
.eh_frame:000000000000C258                 db    0
.eh_frame:000000000000C259                 db  44h ; D
.eh_frame:000000000000C25A                 db  0Eh
.eh_frame:000000000000C25B                 db  30h ; 0
.eh_frame:000000000000C25C                 db    2
.eh_frame:000000000000C25D                 db  55h ; U
.eh_frame:000000000000C25E                 db  0Ah
.eh_frame:000000000000C25F                 db  0Eh
.eh_frame:000000000000C260                 db    8
.eh_frame:000000000000C261                 db  47h ; G
.eh_frame:000000000000C262                 db  0Bh
.eh_frame:000000000000C263                 db    0
.eh_frame:000000000000C264                 db  4Ch ; L
.eh_frame:000000000000C265                 db    0
.eh_frame:000000000000C266                 db    0
.eh_frame:000000000000C267                 db    0
.eh_frame:000000000000C268                 db  48h ; H
.eh_frame:000000000000C269                 db  0Dh
.eh_frame:000000000000C26A                 db    0
.eh_frame:000000000000C26B                 db    0
.eh_frame:000000000000C26C                 db  94h
.eh_frame:000000000000C26D                 db 0A5h
.eh_frame:000000000000C26E                 db 0FFh
.eh_frame:000000000000C26F                 db 0FFh
.eh_frame:000000000000C270                 db 0D1h
.eh_frame:000000000000C271                 db    9
.eh_frame:000000000000C272                 db    0
.eh_frame:000000000000C273                 db    0
.eh_frame:000000000000C274                 db    0
.eh_frame:000000000000C275                 db  42h ; B
.eh_frame:000000000000C276                 db  0Eh
.eh_frame:000000000000C277                 db  10h
.eh_frame:000000000000C278                 db  8Fh
.eh_frame:000000000000C279                 db    2
.eh_frame:000000000000C27A                 db  42h ; B
.eh_frame:000000000000C27B                 db  0Eh
.eh_frame:000000000000C27C                 db  18h
.eh_frame:000000000000C27D                 db  8Eh
.eh_frame:000000000000C27E                 db    3
.eh_frame:000000000000C27F                 db  45h ; E
.eh_frame:000000000000C280                 db  0Eh
.eh_frame:000000000000C281                 db  20h
.eh_frame:000000000000C282                 db  8Dh
.eh_frame:000000000000C283                 db    4
.eh_frame:000000000000C284                 db  42h ; B
.eh_frame:000000000000C285                 db  0Eh
.eh_frame:000000000000C286                 db  28h ; (
.eh_frame:000000000000C287                 db  8Ch
.eh_frame:000000000000C288                 db    5
.eh_frame:000000000000C289                 db  41h ; A
.eh_frame:000000000000C28A                 db  0Eh
.eh_frame:000000000000C28B                 db  30h ; 0
.eh_frame:000000000000C28C                 db  86h
.eh_frame:000000000000C28D                 db    6
.eh_frame:000000000000C28E                 db  41h ; A
.eh_frame:000000000000C28F                 db  0Eh
.eh_frame:000000000000C290                 db  38h ; 8
.eh_frame:000000000000C291                 db  83h
.eh_frame:000000000000C292                 db    7
.eh_frame:000000000000C293                 db  44h ; D
.eh_frame:000000000000C294                 db  0Eh
.eh_frame:000000000000C295                 db 0B0h
.eh_frame:000000000000C296                 db    1
.eh_frame:000000000000C297                 db    3
.eh_frame:000000000000C298                 db 0D1h
.eh_frame:000000000000C299                 db    5
.eh_frame:000000000000C29A                 db  0Ah
.eh_frame:000000000000C29B                 db  0Eh
.eh_frame:000000000000C29C                 db  38h ; 8
.eh_frame:000000000000C29D                 db  41h ; A
.eh_frame:000000000000C29E                 db  0Eh
.eh_frame:000000000000C29F                 db  30h ; 0
.eh_frame:000000000000C2A0                 db  41h ; A
.eh_frame:000000000000C2A1                 db  0Eh
.eh_frame:000000000000C2A2                 db  28h ; (
.eh_frame:000000000000C2A3                 db  42h ; B
.eh_frame:000000000000C2A4                 db  0Eh
.eh_frame:000000000000C2A5                 db  20h
.eh_frame:000000000000C2A6                 db  42h ; B
.eh_frame:000000000000C2A7                 db  0Eh
.eh_frame:000000000000C2A8                 db  18h
.eh_frame:000000000000C2A9                 db  42h ; B
.eh_frame:000000000000C2AA                 db  0Eh
.eh_frame:000000000000C2AB                 db  10h
.eh_frame:000000000000C2AC                 db  42h ; B
.eh_frame:000000000000C2AD                 db  0Eh
.eh_frame:000000000000C2AE                 db    8
.eh_frame:000000000000C2AF                 db  44h ; D
.eh_frame:000000000000C2B0                 db  0Bh
.eh_frame:000000000000C2B1                 db    0
.eh_frame:000000000000C2B2                 db    0
.eh_frame:000000000000C2B3                 db    0
.eh_frame:000000000000C2B4                 db  48h ; H
.eh_frame:000000000000C2B5                 db    0
.eh_frame:000000000000C2B6                 db    0
.eh_frame:000000000000C2B7                 db    0
.eh_frame:000000000000C2B8                 db  98h
.eh_frame:000000000000C2B9                 db  0Dh
.eh_frame:000000000000C2BA                 db    0
.eh_frame:000000000000C2BB                 db    0
.eh_frame:000000000000C2BC                 db  24h ; $
.eh_frame:000000000000C2BD                 db 0AFh
.eh_frame:000000000000C2BE                 db 0FFh
.eh_frame:000000000000C2BF                 db 0FFh
.eh_frame:000000000000C2C0                 db 0AAh
.eh_frame:000000000000C2C1                 db    3
.eh_frame:000000000000C2C2                 db    0
.eh_frame:000000000000C2C3                 db    0
.eh_frame:000000000000C2C4                 db    0
.eh_frame:000000000000C2C5                 db  42h ; B
.eh_frame:000000000000C2C6                 db  0Eh
.eh_frame:000000000000C2C7                 db  10h
.eh_frame:000000000000C2C8                 db  8Fh
.eh_frame:000000000000C2C9                 db    2
.eh_frame:000000000000C2CA                 db  42h ; B
.eh_frame:000000000000C2CB                 db  0Eh
.eh_frame:000000000000C2CC                 db  18h
.eh_frame:000000000000C2CD                 db  8Eh
.eh_frame:000000000000C2CE                 db    3
.eh_frame:000000000000C2CF                 db  42h ; B
.eh_frame:000000000000C2D0                 db  0Eh
.eh_frame:000000000000C2D1                 db  20h
.eh_frame:000000000000C2D2                 db  8Dh
.eh_frame:000000000000C2D3                 db    4
.eh_frame:000000000000C2D4                 db  42h ; B
.eh_frame:000000000000C2D5                 db  0Eh
.eh_frame:000000000000C2D6                 db  28h ; (
.eh_frame:000000000000C2D7                 db  8Ch
.eh_frame:000000000000C2D8                 db    5
.eh_frame:000000000000C2D9                 db  41h ; A
.eh_frame:000000000000C2DA                 db  0Eh
.eh_frame:000000000000C2DB                 db  30h ; 0
.eh_frame:000000000000C2DC                 db  86h
.eh_frame:000000000000C2DD                 db    6
.eh_frame:000000000000C2DE                 db  41h ; A
.eh_frame:000000000000C2DF                 db  0Eh
.eh_frame:000000000000C2E0                 db  38h ; 8
.eh_frame:000000000000C2E1                 db  83h
.eh_frame:000000000000C2E2                 db    7
.eh_frame:000000000000C2E3                 db  44h ; D
.eh_frame:000000000000C2E4                 db  0Eh
.eh_frame:000000000000C2E5                 db  60h ; `
.eh_frame:000000000000C2E6                 db    3
.eh_frame:000000000000C2E7                 db 0A4h
.eh_frame:000000000000C2E8                 db    2
.eh_frame:000000000000C2E9                 db  0Ah
.eh_frame:000000000000C2EA                 db  0Eh
.eh_frame:000000000000C2EB                 db  38h ; 8
.eh_frame:000000000000C2EC                 db  44h ; D
.eh_frame:000000000000C2ED                 db  0Eh
.eh_frame:000000000000C2EE                 db  30h ; 0
.eh_frame:000000000000C2EF                 db  41h ; A
.eh_frame:000000000000C2F0                 db  0Eh
.eh_frame:000000000000C2F1                 db  28h ; (
.eh_frame:000000000000C2F2                 db  42h ; B
.eh_frame:000000000000C2F3                 db  0Eh
.eh_frame:000000000000C2F4                 db  20h
.eh_frame:000000000000C2F5                 db  42h ; B
.eh_frame:000000000000C2F6                 db  0Eh
.eh_frame:000000000000C2F7                 db  18h
.eh_frame:000000000000C2F8                 db  42h ; B
.eh_frame:000000000000C2F9                 db  0Eh
.eh_frame:000000000000C2FA                 db  10h
.eh_frame:000000000000C2FB                 db  42h ; B
.eh_frame:000000000000C2FC                 db  0Eh
.eh_frame:000000000000C2FD                 db    8
.eh_frame:000000000000C2FE                 db  41h ; A
.eh_frame:000000000000C2FF                 db  0Bh
.eh_frame:000000000000C300                 db  2Ch ; ,
.eh_frame:000000000000C301                 db    0
.eh_frame:000000000000C302                 db    0
.eh_frame:000000000000C303                 db    0
.eh_frame:000000000000C304                 db 0E4h
.eh_frame:000000000000C305                 db  0Dh
.eh_frame:000000000000C306                 db    0
.eh_frame:000000000000C307                 db    0
.eh_frame:000000000000C308                 db  88h
.eh_frame:000000000000C309                 db 0B2h
.eh_frame:000000000000C30A                 db 0FFh
.eh_frame:000000000000C30B                 db 0FFh
.eh_frame:000000000000C30C                 db  82h
.eh_frame:000000000000C30D                 db    1
.eh_frame:000000000000C30E                 db    0
.eh_frame:000000000000C30F                 db    0
.eh_frame:000000000000C310                 db    0
.eh_frame:000000000000C311                 db  42h ; B
.eh_frame:000000000000C312                 db  0Eh
.eh_frame:000000000000C313                 db  10h
.eh_frame:000000000000C314                 db  8Ch
.eh_frame:000000000000C315                 db    2
.eh_frame:000000000000C316                 db  41h ; A
.eh_frame:000000000000C317                 db  0Eh
.eh_frame:000000000000C318                 db  18h
.eh_frame:000000000000C319                 db  86h
.eh_frame:000000000000C31A                 db    3
.eh_frame:000000000000C31B                 db  44h ; D
.eh_frame:000000000000C31C                 db  0Eh
.eh_frame:000000000000C31D                 db  20h
.eh_frame:000000000000C31E                 db  83h
.eh_frame:000000000000C31F                 db    4
.eh_frame:000000000000C320                 db    2
.eh_frame:000000000000C321                 db 0C2h
.eh_frame:000000000000C322                 db  0Ah
.eh_frame:000000000000C323                 db  0Eh
.eh_frame:000000000000C324                 db  18h
.eh_frame:000000000000C325                 db  41h ; A
.eh_frame:000000000000C326                 db  0Eh
.eh_frame:000000000000C327                 db  10h
.eh_frame:000000000000C328                 db  42h ; B
.eh_frame:000000000000C329                 db  0Eh
.eh_frame:000000000000C32A                 db    8
.eh_frame:000000000000C32B                 db  44h ; D
.eh_frame:000000000000C32C                 db  0Bh
.eh_frame:000000000000C32D                 db    0
.eh_frame:000000000000C32E                 db    0
.eh_frame:000000000000C32F                 db    0
.eh_frame:000000000000C330                 db  60h ; `
.eh_frame:000000000000C331                 db    0
.eh_frame:000000000000C332                 db    0
.eh_frame:000000000000C333                 db    0
.eh_frame:000000000000C334                 db  14h
.eh_frame:000000000000C335                 db  0Eh
.eh_frame:000000000000C336                 db    0
.eh_frame:000000000000C337                 db    0
.eh_frame:000000000000C338                 db 0E8h
.eh_frame:000000000000C339                 db 0B3h
.eh_frame:000000000000C33A                 db 0FFh
.eh_frame:000000000000C33B                 db 0FFh
.eh_frame:000000000000C33C                 db  78h ; x
.eh_frame:000000000000C33D                 db    7
.eh_frame:000000000000C33E                 db    0
.eh_frame:000000000000C33F                 db    0
.eh_frame:000000000000C340                 db    0
.eh_frame:000000000000C341                 db  42h ; B
.eh_frame:000000000000C342                 db  0Eh
.eh_frame:000000000000C343                 db  10h
.eh_frame:000000000000C344                 db  8Eh
.eh_frame:000000000000C345                 db    2
.eh_frame:000000000000C346                 db  42h ; B
.eh_frame:000000000000C347                 db  0Eh
.eh_frame:000000000000C348                 db  18h
.eh_frame:000000000000C349                 db  8Dh
.eh_frame:000000000000C34A                 db    3
.eh_frame:000000000000C34B                 db  42h ; B
.eh_frame:000000000000C34C                 db  0Eh
.eh_frame:000000000000C34D                 db  20h
.eh_frame:000000000000C34E                 db  8Ch
.eh_frame:000000000000C34F                 db    4
.eh_frame:000000000000C350                 db  41h ; A
.eh_frame:000000000000C351                 db  0Eh
.eh_frame:000000000000C352                 db  28h ; (
.eh_frame:000000000000C353                 db  86h
.eh_frame:000000000000C354                 db    5
.eh_frame:000000000000C355                 db  41h ; A
.eh_frame:000000000000C356                 db  0Eh
.eh_frame:000000000000C357                 db  30h ; 0
.eh_frame:000000000000C358                 db  83h
.eh_frame:000000000000C359                 db    6
.eh_frame:000000000000C35A                 db    3
.eh_frame:000000000000C35B                 db  19h
.eh_frame:000000000000C35C                 db    1
.eh_frame:000000000000C35D                 db  0Ah
.eh_frame:000000000000C35E                 db  0Eh
.eh_frame:000000000000C35F                 db  28h ; (
.eh_frame:000000000000C360                 db  44h ; D
.eh_frame:000000000000C361                 db  0Eh
.eh_frame:000000000000C362                 db  20h
.eh_frame:000000000000C363                 db  42h ; B
.eh_frame:000000000000C364                 db  0Eh
.eh_frame:000000000000C365                 db  18h
.eh_frame:000000000000C366                 db  42h ; B
.eh_frame:000000000000C367                 db  0Eh
.eh_frame:000000000000C368                 db  10h
.eh_frame:000000000000C369                 db  42h ; B
.eh_frame:000000000000C36A                 db  0Eh
.eh_frame:000000000000C36B                 db    8
.eh_frame:000000000000C36C                 db  45h ; E
.eh_frame:000000000000C36D                 db  0Bh
.eh_frame:000000000000C36E                 db    2
.eh_frame:000000000000C36F                 db  6Bh ; k
.eh_frame:000000000000C370                 db  0Ah
.eh_frame:000000000000C371                 db  0Eh
.eh_frame:000000000000C372                 db  28h ; (
.eh_frame:000000000000C373                 db  44h ; D
.eh_frame:000000000000C374                 db  0Eh
.eh_frame:000000000000C375                 db  20h
.eh_frame:000000000000C376                 db  42h ; B
.eh_frame:000000000000C377                 db  0Eh
.eh_frame:000000000000C378                 db  18h
.eh_frame:000000000000C379                 db  42h ; B
.eh_frame:000000000000C37A                 db  0Eh
.eh_frame:000000000000C37B                 db  10h
.eh_frame:000000000000C37C                 db  42h ; B
.eh_frame:000000000000C37D                 db  0Eh
.eh_frame:000000000000C37E                 db    8
.eh_frame:000000000000C37F                 db  4Bh ; K
.eh_frame:000000000000C380                 db  0Bh
.eh_frame:000000000000C381                 db    2
.eh_frame:000000000000C382                 db 0E2h
.eh_frame:000000000000C383                 db  0Ah
.eh_frame:000000000000C384                 db  0Eh
.eh_frame:000000000000C385                 db  28h ; (
.eh_frame:000000000000C386                 db  41h ; A
.eh_frame:000000000000C387                 db  0Eh
.eh_frame:000000000000C388                 db  20h
.eh_frame:000000000000C389                 db  42h ; B
.eh_frame:000000000000C38A                 db  0Eh
.eh_frame:000000000000C38B                 db  18h
.eh_frame:000000000000C38C                 db  42h ; B
.eh_frame:000000000000C38D                 db  0Eh
.eh_frame:000000000000C38E                 db  10h
.eh_frame:000000000000C38F                 db  42h ; B
.eh_frame:000000000000C390                 db  0Eh
.eh_frame:000000000000C391                 db    8
.eh_frame:000000000000C392                 db  47h ; G
.eh_frame:000000000000C393                 db  0Bh
.eh_frame:000000000000C394                 db  14h
.eh_frame:000000000000C395                 db    0
.eh_frame:000000000000C396                 db    0
.eh_frame:000000000000C397                 db    0
.eh_frame:000000000000C398                 db  78h ; x
.eh_frame:000000000000C399                 db  0Eh
.eh_frame:000000000000C39A                 db    0
.eh_frame:000000000000C39B                 db    0
.eh_frame:000000000000C39C                 db    4
.eh_frame:000000000000C39D                 db 0BBh
.eh_frame:000000000000C39E                 db 0FFh
.eh_frame:000000000000C39F                 db 0FFh
.eh_frame:000000000000C3A0                 db  29h ; )
.eh_frame:000000000000C3A1                 db    0
.eh_frame:000000000000C3A2                 db    0
.eh_frame:000000000000C3A3                 db    0
.eh_frame:000000000000C3A4                 db    0
.eh_frame:000000000000C3A5                 db  54h ; T
.eh_frame:000000000000C3A6                 db  0Eh
.eh_frame:000000000000C3A7                 db  10h
.eh_frame:000000000000C3A8                 db  54h ; T
.eh_frame:000000000000C3A9                 db  0Eh
.eh_frame:000000000000C3AA                 db    8
.eh_frame:000000000000C3AB                 db    0
.eh_frame:000000000000C3AC                 db  60h ; `
.eh_frame:000000000000C3AD                 db    0
.eh_frame:000000000000C3AE                 db    0
.eh_frame:000000000000C3AF                 db    0
.eh_frame:000000000000C3B0                 db  90h
.eh_frame:000000000000C3B1                 db  0Eh
.eh_frame:000000000000C3B2                 db    0
.eh_frame:000000000000C3B3                 db    0
.eh_frame:000000000000C3B4                 db  1Ch
.eh_frame:000000000000C3B5                 db 0BBh
.eh_frame:000000000000C3B6                 db 0FFh
.eh_frame:000000000000C3B7                 db 0FFh
.eh_frame:000000000000C3B8                 db  4Eh ; N
.eh_frame:000000000000C3B9                 db    1
.eh_frame:000000000000C3BA                 db    0
.eh_frame:000000000000C3BB                 db    0
.eh_frame:000000000000C3BC                 db    0
.eh_frame:000000000000C3BD                 db  42h ; B
.eh_frame:000000000000C3BE                 db  0Eh
.eh_frame:000000000000C3BF                 db  10h
.eh_frame:000000000000C3C0                 db  8Eh
.eh_frame:000000000000C3C1                 db    2
.eh_frame:000000000000C3C2                 db  42h ; B
.eh_frame:000000000000C3C3                 db  0Eh
.eh_frame:000000000000C3C4                 db  18h
.eh_frame:000000000000C3C5                 db  8Dh
.eh_frame:000000000000C3C6                 db    3
.eh_frame:000000000000C3C7                 db  42h ; B
.eh_frame:000000000000C3C8                 db  0Eh
.eh_frame:000000000000C3C9                 db  20h
.eh_frame:000000000000C3CA                 db  8Ch
.eh_frame:000000000000C3CB                 db    4
.eh_frame:000000000000C3CC                 db  41h ; A
.eh_frame:000000000000C3CD                 db  0Eh
.eh_frame:000000000000C3CE                 db  28h ; (
.eh_frame:000000000000C3CF                 db  86h
.eh_frame:000000000000C3D0                 db    5
.eh_frame:000000000000C3D1                 db  44h ; D
.eh_frame:000000000000C3D2                 db  0Eh
.eh_frame:000000000000C3D3                 db  30h ; 0
.eh_frame:000000000000C3D4                 db  83h
.eh_frame:000000000000C3D5                 db    6
.eh_frame:000000000000C3D6                 db    2
.eh_frame:000000000000C3D7                 db  8Ah
.eh_frame:000000000000C3D8                 db  0Ah
.eh_frame:000000000000C3D9                 db  0Eh
.eh_frame:000000000000C3DA                 db  28h ; (
.eh_frame:000000000000C3DB                 db  41h ; A
.eh_frame:000000000000C3DC                 db  0Eh
.eh_frame:000000000000C3DD                 db  20h
.eh_frame:000000000000C3DE                 db  42h ; B
.eh_frame:000000000000C3DF                 db  0Eh
.eh_frame:000000000000C3E0                 db  18h
.eh_frame:000000000000C3E1                 db  42h ; B
.eh_frame:000000000000C3E2                 db  0Eh
.eh_frame:000000000000C3E3                 db  10h
.eh_frame:000000000000C3E4                 db  42h ; B
.eh_frame:000000000000C3E5                 db  0Eh
.eh_frame:000000000000C3E6                 db    8
.eh_frame:000000000000C3E7                 db  44h ; D
.eh_frame:000000000000C3E8                 db  0Bh
.eh_frame:000000000000C3E9                 db  41h ; A
.eh_frame:000000000000C3EA                 db  0Ah
.eh_frame:000000000000C3EB                 db  0Eh
.eh_frame:000000000000C3EC                 db  28h ; (
.eh_frame:000000000000C3ED                 db  45h ; E
.eh_frame:000000000000C3EE                 db  0Eh
.eh_frame:000000000000C3EF                 db  20h
.eh_frame:000000000000C3F0                 db  42h ; B
.eh_frame:000000000000C3F1                 db  0Eh
.eh_frame:000000000000C3F2                 db  18h
.eh_frame:000000000000C3F3                 db  42h ; B
.eh_frame:000000000000C3F4                 db  0Eh
.eh_frame:000000000000C3F5                 db  10h
.eh_frame:000000000000C3F6                 db  42h ; B
.eh_frame:000000000000C3F7                 db  0Eh
.eh_frame:000000000000C3F8                 db    8
.eh_frame:000000000000C3F9                 db  44h ; D
.eh_frame:000000000000C3FA                 db  0Bh
.eh_frame:000000000000C3FB                 db  41h ; A
.eh_frame:000000000000C3FC                 db  0Ah
.eh_frame:000000000000C3FD                 db  0Eh
.eh_frame:000000000000C3FE                 db  28h ; (
.eh_frame:000000000000C3FF                 db  43h ; C
.eh_frame:000000000000C400                 db  0Eh
.eh_frame:000000000000C401                 db  20h
.eh_frame:000000000000C402                 db  42h ; B
.eh_frame:000000000000C403                 db  0Eh
.eh_frame:000000000000C404                 db  18h
.eh_frame:000000000000C405                 db  42h ; B
.eh_frame:000000000000C406                 db  0Eh
.eh_frame:000000000000C407                 db  10h
.eh_frame:000000000000C408                 db  42h ; B
.eh_frame:000000000000C409                 db  0Eh
.eh_frame:000000000000C40A                 db    8
.eh_frame:000000000000C40B                 db  46h ; F
.eh_frame:000000000000C40C                 db  0Bh
.eh_frame:000000000000C40D                 db    0
.eh_frame:000000000000C40E                 db    0
.eh_frame:000000000000C40F                 db    0
.eh_frame:000000000000C410                 db  3Ch ; <
.eh_frame:000000000000C411                 db    0
.eh_frame:000000000000C412                 db    0
.eh_frame:000000000000C413                 db    0
.eh_frame:000000000000C414                 db 0F4h
.eh_frame:000000000000C415                 db  0Eh
.eh_frame:000000000000C416                 db    0
.eh_frame:000000000000C417                 db    0
.eh_frame:000000000000C418                 db    8
.eh_frame:000000000000C419                 db 0BCh
.eh_frame:000000000000C41A                 db 0FFh
.eh_frame:000000000000C41B                 db 0FFh
.eh_frame:000000000000C41C                 db  83h
.eh_frame:000000000000C41D                 db    0
.eh_frame:000000000000C41E                 db    0
.eh_frame:000000000000C41F                 db    0
.eh_frame:000000000000C420                 db    0
.eh_frame:000000000000C421                 db  42h ; B
.eh_frame:000000000000C422                 db  0Eh
.eh_frame:000000000000C423                 db  10h
.eh_frame:000000000000C424                 db  8Dh
.eh_frame:000000000000C425                 db    2
.eh_frame:000000000000C426                 db  42h ; B
.eh_frame:000000000000C427                 db  0Eh
.eh_frame:000000000000C428                 db  18h
.eh_frame:000000000000C429                 db  8Ch
.eh_frame:000000000000C42A                 db    3
.eh_frame:000000000000C42B                 db  44h ; D
.eh_frame:000000000000C42C                 db  0Eh
.eh_frame:000000000000C42D                 db  20h
.eh_frame:000000000000C42E                 db  86h
.eh_frame:000000000000C42F                 db    4
.eh_frame:000000000000C430                 db  41h ; A
.eh_frame:000000000000C431                 db  0Eh
.eh_frame:000000000000C432                 db  28h ; (
.eh_frame:000000000000C433                 db  83h
.eh_frame:000000000000C434                 db    5
.eh_frame:000000000000C435                 db  4Ah ; J
.eh_frame:000000000000C436                 db  0Eh
.eh_frame:000000000000C437                 db  40h ; @
.eh_frame:000000000000C438                 db    2
.eh_frame:000000000000C439                 db  64h ; d
.eh_frame:000000000000C43A                 db  0Ah
.eh_frame:000000000000C43B                 db  0Eh
.eh_frame:000000000000C43C                 db  28h ; (
.eh_frame:000000000000C43D                 db  41h ; A
.eh_frame:000000000000C43E                 db  0Eh
.eh_frame:000000000000C43F                 db  20h
.eh_frame:000000000000C440                 db  41h ; A
.eh_frame:000000000000C441                 db  0Eh
.eh_frame:000000000000C442                 db  18h
.eh_frame:000000000000C443                 db  42h ; B
.eh_frame:000000000000C444                 db  0Eh
.eh_frame:000000000000C445                 db  10h
.eh_frame:000000000000C446                 db  42h ; B
.eh_frame:000000000000C447                 db  0Eh
.eh_frame:000000000000C448                 db    8
.eh_frame:000000000000C449                 db  41h ; A
.eh_frame:000000000000C44A                 db  0Bh
.eh_frame:000000000000C44B                 db    0
.eh_frame:000000000000C44C                 db    0
.eh_frame:000000000000C44D                 db    0
.eh_frame:000000000000C44E                 db    0
.eh_frame:000000000000C44F                 db    0
.eh_frame:000000000000C450                 db  4Ch ; L
.eh_frame:000000000000C451                 db    0
.eh_frame:000000000000C452                 db    0
.eh_frame:000000000000C453                 db    0
.eh_frame:000000000000C454                 db  34h ; 4
.eh_frame:000000000000C455                 db  0Fh
.eh_frame:000000000000C456                 db    0
.eh_frame:000000000000C457                 db    0
.eh_frame:000000000000C458                 db  58h ; X
.eh_frame:000000000000C459                 db 0BCh
.eh_frame:000000000000C45A                 db 0FFh
.eh_frame:000000000000C45B                 db 0FFh
.eh_frame:000000000000C45C                 db  7Dh ; }
.eh_frame:000000000000C45D                 db    0
.eh_frame:000000000000C45E                 db    0
.eh_frame:000000000000C45F                 db    0
.eh_frame:000000000000C460                 db    0
.eh_frame:000000000000C461                 db  42h ; B
.eh_frame:000000000000C462                 db  0Eh
.eh_frame:000000000000C463                 db  10h
.eh_frame:000000000000C464                 db  8Ch
.eh_frame:000000000000C465                 db    2
.eh_frame:000000000000C466                 db  41h ; A
.eh_frame:000000000000C467                 db  0Eh
.eh_frame:000000000000C468                 db  18h
.eh_frame:000000000000C469                 db  86h
.eh_frame:000000000000C46A                 db    3
.eh_frame:000000000000C46B                 db  44h ; D
.eh_frame:000000000000C46C                 db  0Eh
.eh_frame:000000000000C46D                 db  20h
.eh_frame:000000000000C46E                 db  83h
.eh_frame:000000000000C46F                 db    4
.eh_frame:000000000000C470                 db  69h ; i
.eh_frame:000000000000C471                 db  0Ah
.eh_frame:000000000000C472                 db  0Eh
.eh_frame:000000000000C473                 db  18h
.eh_frame:000000000000C474                 db  41h ; A
.eh_frame:000000000000C475                 db  0Eh
.eh_frame:000000000000C476                 db  10h
.eh_frame:000000000000C477                 db  42h ; B
.eh_frame:000000000000C478                 db  0Eh
.eh_frame:000000000000C479                 db    8
.eh_frame:000000000000C47A                 db  45h ; E
.eh_frame:000000000000C47B                 db  0Bh
.eh_frame:000000000000C47C                 db  55h ; U
.eh_frame:000000000000C47D                 db  0Ah
.eh_frame:000000000000C47E                 db  0Eh
.eh_frame:000000000000C47F                 db  18h
.eh_frame:000000000000C480                 db  41h ; A
.eh_frame:000000000000C481                 db  0Eh
.eh_frame:000000000000C482                 db  10h
.eh_frame:000000000000C483                 db  42h ; B
.eh_frame:000000000000C484                 db  0Eh
.eh_frame:000000000000C485                 db    8
.eh_frame:000000000000C486                 db  48h ; H
.eh_frame:000000000000C487                 db  0Bh
.eh_frame:000000000000C488                 db  41h ; A
.eh_frame:000000000000C489                 db  0Ah
.eh_frame:000000000000C48A                 db  0Eh
.eh_frame:000000000000C48B                 db  18h
.eh_frame:000000000000C48C                 db  46h ; F
.eh_frame:000000000000C48D                 db  0Eh
.eh_frame:000000000000C48E                 db  10h
.eh_frame:000000000000C48F                 db  42h ; B
.eh_frame:000000000000C490                 db  0Eh
.eh_frame:000000000000C491                 db    8
.eh_frame:000000000000C492                 db  47h ; G
.eh_frame:000000000000C493                 db  0Bh
.eh_frame:000000000000C494                 db  49h ; I
.eh_frame:000000000000C495                 db  0Eh
.eh_frame:000000000000C496                 db  18h
.eh_frame:000000000000C497                 db  41h ; A
.eh_frame:000000000000C498                 db  0Eh
.eh_frame:000000000000C499                 db  10h
.eh_frame:000000000000C49A                 db  42h ; B
.eh_frame:000000000000C49B                 db  0Eh
.eh_frame:000000000000C49C                 db    8
.eh_frame:000000000000C49D                 db    0
.eh_frame:000000000000C49E                 db    0
.eh_frame:000000000000C49F                 db    0
.eh_frame:000000000000C4A0                 db  10h
.eh_frame:000000000000C4A1                 db    0
.eh_frame:000000000000C4A2                 db    0
.eh_frame:000000000000C4A3                 db    0
.eh_frame:000000000000C4A4                 db  84h
.eh_frame:000000000000C4A5                 db  0Fh
.eh_frame:000000000000C4A6                 db    0
.eh_frame:000000000000C4A7                 db    0
.eh_frame:000000000000C4A8                 db  88h
.eh_frame:000000000000C4A9                 db 0BCh
.eh_frame:000000000000C4AA                 db 0FFh
.eh_frame:000000000000C4AB                 db 0FFh
.eh_frame:000000000000C4AC                 db  10h
.eh_frame:000000000000C4AD                 db    0
.eh_frame:000000000000C4AE                 db    0
.eh_frame:000000000000C4AF                 db    0
.eh_frame:000000000000C4B0                 db    0
.eh_frame:000000000000C4B1                 db    0
.eh_frame:000000000000C4B2                 db    0
.eh_frame:000000000000C4B3                 db    0
.eh_frame:000000000000C4B4                 db  18h
.eh_frame:000000000000C4B5                 db    0
.eh_frame:000000000000C4B6                 db    0
.eh_frame:000000000000C4B7                 db    0
.eh_frame:000000000000C4B8                 db  98h
.eh_frame:000000000000C4B9                 db  0Fh
.eh_frame:000000000000C4BA                 db    0
.eh_frame:000000000000C4BB                 db    0
.eh_frame:000000000000C4BC                 db  84h
.eh_frame:000000000000C4BD                 db 0BCh
.eh_frame:000000000000C4BE                 db 0FFh
.eh_frame:000000000000C4BF                 db 0FFh
.eh_frame:000000000000C4C0                 db  8Ah
.eh_frame:000000000000C4C1                 db    0
.eh_frame:000000000000C4C2                 db    0
.eh_frame:000000000000C4C3                 db    0
.eh_frame:000000000000C4C4                 db    0
.eh_frame:000000000000C4C5                 db    2
.eh_frame:000000000000C4C6                 db  80h
.eh_frame:000000000000C4C7                 db  0Eh
.eh_frame:000000000000C4C8                 db  10h
.eh_frame:000000000000C4C9                 db    0
.eh_frame:000000000000C4CA                 db    0
.eh_frame:000000000000C4CB                 db    0
.eh_frame:000000000000C4CC                 db    0
.eh_frame:000000000000C4CD                 db    0
.eh_frame:000000000000C4CE                 db    0
.eh_frame:000000000000C4CF                 db    0
.eh_frame:000000000000C4D0                 db  1Ch
.eh_frame:000000000000C4D1                 db    0
.eh_frame:000000000000C4D2                 db    0
.eh_frame:000000000000C4D3                 db    0
.eh_frame:000000000000C4D4                 db 0B4h
.eh_frame:000000000000C4D5                 db  0Fh
.eh_frame:000000000000C4D6                 db    0
.eh_frame:000000000000C4D7                 db    0
.eh_frame:000000000000C4D8                 db 0F8h
.eh_frame:000000000000C4D9                 db 0BCh
.eh_frame:000000000000C4DA                 db 0FFh
.eh_frame:000000000000C4DB                 db 0FFh
.eh_frame:000000000000C4DC                 db  6Eh ; n
.eh_frame:000000000000C4DD                 db    0
.eh_frame:000000000000C4DE                 db    0
.eh_frame:000000000000C4DF                 db    0
.eh_frame:000000000000C4E0                 db    0
.eh_frame:000000000000C4E1                 db  44h ; D
.eh_frame:000000000000C4E2                 db  0Eh
.eh_frame:000000000000C4E3                 db  60h ; `
.eh_frame:000000000000C4E4                 db  7Fh ; 
.eh_frame:000000000000C4E5                 db  0Ah
.eh_frame:000000000000C4E6                 db  0Eh
.eh_frame:000000000000C4E7                 db    8
.eh_frame:000000000000C4E8                 db  45h ; E
.eh_frame:000000000000C4E9                 db  0Bh
.eh_frame:000000000000C4EA                 db    0
.eh_frame:000000000000C4EB                 db    0
.eh_frame:000000000000C4EC                 db    0
.eh_frame:000000000000C4ED                 db    0
.eh_frame:000000000000C4EE                 db    0
.eh_frame:000000000000C4EF                 db    0
.eh_frame:000000000000C4F0                 db  1Ch
.eh_frame:000000000000C4F1                 db    0
.eh_frame:000000000000C4F2                 db    0
.eh_frame:000000000000C4F3                 db    0
.eh_frame:000000000000C4F4                 db 0D4h
.eh_frame:000000000000C4F5                 db  0Fh
.eh_frame:000000000000C4F6                 db    0
.eh_frame:000000000000C4F7                 db    0
.eh_frame:000000000000C4F8                 db  48h ; H
.eh_frame:000000000000C4F9                 db 0BDh
.eh_frame:000000000000C4FA                 db 0FFh
.eh_frame:000000000000C4FB                 db 0FFh
.eh_frame:000000000000C4FC                 db  60h ; `
.eh_frame:000000000000C4FD                 db    0
.eh_frame:000000000000C4FE                 db    0
.eh_frame:000000000000C4FF                 db    0
.eh_frame:000000000000C500                 db    0
.eh_frame:000000000000C501                 db  44h ; D
.eh_frame:000000000000C502                 db  0Eh
.eh_frame:000000000000C503                 db  10h
.eh_frame:000000000000C504                 db  75h ; u
.eh_frame:000000000000C505                 db  0Ah
.eh_frame:000000000000C506                 db  0Eh
.eh_frame:000000000000C507                 db    8
.eh_frame:000000000000C508                 db  47h ; G
.eh_frame:000000000000C509                 db  0Bh
.eh_frame:000000000000C50A                 db  5Fh ; _
.eh_frame:000000000000C50B                 db  0Eh
.eh_frame:000000000000C50C                 db    8
.eh_frame:000000000000C50D                 db    0
.eh_frame:000000000000C50E                 db    0
.eh_frame:000000000000C50F                 db    0
.eh_frame:000000000000C510                 db  10h
.eh_frame:000000000000C511                 db    0
.eh_frame:000000000000C512                 db    0
.eh_frame:000000000000C513                 db    0
.eh_frame:000000000000C514                 db 0F4h
.eh_frame:000000000000C515                 db  0Fh
.eh_frame:000000000000C516                 db    0
.eh_frame:000000000000C517                 db    0
.eh_frame:000000000000C518                 db  88h
.eh_frame:000000000000C519                 db 0BDh
.eh_frame:000000000000C51A                 db 0FFh
.eh_frame:000000000000C51B                 db 0FFh
.eh_frame:000000000000C51C                 db  93h
.eh_frame:000000000000C51D                 db    0
.eh_frame:000000000000C51E                 db    0
.eh_frame:000000000000C51F                 db    0
.eh_frame:000000000000C520                 db    0
.eh_frame:000000000000C521                 db    0
.eh_frame:000000000000C522                 db    0
.eh_frame:000000000000C523                 db    0
.eh_frame:000000000000C524                 db  10h
.eh_frame:000000000000C525                 db    0
.eh_frame:000000000000C526                 db    0
.eh_frame:000000000000C527                 db    0
.eh_frame:000000000000C528                 db    8
.eh_frame:000000000000C529                 db  10h
.eh_frame:000000000000C52A                 db    0
.eh_frame:000000000000C52B                 db    0
.eh_frame:000000000000C52C                 db  14h
.eh_frame:000000000000C52D                 db 0BEh
.eh_frame:000000000000C52E                 db 0FFh
.eh_frame:000000000000C52F                 db 0FFh
.eh_frame:000000000000C530                 db  10h
.eh_frame:000000000000C531                 db    0
.eh_frame:000000000000C532                 db    0
.eh_frame:000000000000C533                 db    0
.eh_frame:000000000000C534                 db    0
.eh_frame:000000000000C535                 db    0
.eh_frame:000000000000C536                 db    0
.eh_frame:000000000000C537                 db    0
.eh_frame:000000000000C538                 db  10h
.eh_frame:000000000000C539                 db    0
.eh_frame:000000000000C53A                 db    0
.eh_frame:000000000000C53B                 db    0
.eh_frame:000000000000C53C                 db  1Ch
.eh_frame:000000000000C53D                 db  10h
.eh_frame:000000000000C53E                 db    0
.eh_frame:000000000000C53F                 db    0
.eh_frame:000000000000C540                 db  10h
.eh_frame:000000000000C541                 db 0BEh
.eh_frame:000000000000C542                 db 0FFh
.eh_frame:000000000000C543                 db 0FFh
.eh_frame:000000000000C544                 db    7
.eh_frame:000000000000C545                 db    0
.eh_frame:000000000000C546                 db    0
.eh_frame:000000000000C547                 db    0
.eh_frame:000000000000C548                 db    0
.eh_frame:000000000000C549                 db    0
.eh_frame:000000000000C54A                 db    0
.eh_frame:000000000000C54B                 db    0
.eh_frame:000000000000C54C                 db  18h
.eh_frame:000000000000C54D                 db    0
.eh_frame:000000000000C54E                 db    0
.eh_frame:000000000000C54F                 db    0
.eh_frame:000000000000C550                 db  30h ; 0
.eh_frame:000000000000C551                 db  10h
.eh_frame:000000000000C552                 db    0
.eh_frame:000000000000C553                 db    0
.eh_frame:000000000000C554                 db  0Ch
.eh_frame:000000000000C555                 db 0BEh
.eh_frame:000000000000C556                 db 0FFh
.eh_frame:000000000000C557                 db 0FFh
.eh_frame:000000000000C558                 db  22h ; "
.eh_frame:000000000000C559                 db    0
.eh_frame:000000000000C55A                 db    0
.eh_frame:000000000000C55B                 db    0
.eh_frame:000000000000C55C                 db    0
.eh_frame:000000000000C55D                 db  41h ; A
.eh_frame:000000000000C55E                 db  0Eh
.eh_frame:000000000000C55F                 db  10h
.eh_frame:000000000000C560                 db  83h
.eh_frame:000000000000C561                 db    2
.eh_frame:000000000000C562                 db  5Bh ; [
.eh_frame:000000000000C563                 db  0Ah
.eh_frame:000000000000C564                 db  0Eh
.eh_frame:000000000000C565                 db    8
.eh_frame:000000000000C566                 db  41h ; A
.eh_frame:000000000000C567                 db  0Bh
.eh_frame:000000000000C568                 db  5Ch ; \
.eh_frame:000000000000C569                 db    0
.eh_frame:000000000000C56A                 db    0
.eh_frame:000000000000C56B                 db    0
.eh_frame:000000000000C56C                 db  4Ch ; L
.eh_frame:000000000000C56D                 db  10h
.eh_frame:000000000000C56E                 db    0
.eh_frame:000000000000C56F                 db    0
.eh_frame:000000000000C570                 db  20h
.eh_frame:000000000000C571                 db 0BEh
.eh_frame:000000000000C572                 db 0FFh
.eh_frame:000000000000C573                 db 0FFh
.eh_frame:000000000000C574                 db  1Eh
.eh_frame:000000000000C575                 db    1
.eh_frame:000000000000C576                 db    0
.eh_frame:000000000000C577                 db    0
.eh_frame:000000000000C578                 db    0
.eh_frame:000000000000C579                 db  42h ; B
.eh_frame:000000000000C57A                 db  0Eh
.eh_frame:000000000000C57B                 db  10h
.eh_frame:000000000000C57C                 db  8Eh
.eh_frame:000000000000C57D                 db    2
.eh_frame:000000000000C57E                 db  42h ; B
.eh_frame:000000000000C57F                 db  0Eh
.eh_frame:000000000000C580                 db  18h
.eh_frame:000000000000C581                 db  8Dh
.eh_frame:000000000000C582                 db    3
.eh_frame:000000000000C583                 db  45h ; E
.eh_frame:000000000000C584                 db  0Eh
.eh_frame:000000000000C585                 db  20h
.eh_frame:000000000000C586                 db  8Ch
.eh_frame:000000000000C587                 db    4
.eh_frame:000000000000C588                 db  41h ; A
.eh_frame:000000000000C589                 db  0Eh
.eh_frame:000000000000C58A                 db  28h ; (
.eh_frame:000000000000C58B                 db  86h
.eh_frame:000000000000C58C                 db    5
.eh_frame:000000000000C58D                 db  44h ; D
.eh_frame:000000000000C58E                 db  0Eh
.eh_frame:000000000000C58F                 db  30h ; 0
.eh_frame:000000000000C590                 db  83h
.eh_frame:000000000000C591                 db    6
.eh_frame:000000000000C592                 db    2
.eh_frame:000000000000C593                 db 0A1h
.eh_frame:000000000000C594                 db  0Ah
.eh_frame:000000000000C595                 db  0Eh
.eh_frame:000000000000C596                 db  28h ; (
.eh_frame:000000000000C597                 db  44h ; D
.eh_frame:000000000000C598                 db  0Eh
.eh_frame:000000000000C599                 db  20h
.eh_frame:000000000000C59A                 db  42h ; B
.eh_frame:000000000000C59B                 db  0Eh
.eh_frame:000000000000C59C                 db  18h
.eh_frame:000000000000C59D                 db  42h ; B
.eh_frame:000000000000C59E                 db  0Eh
.eh_frame:000000000000C59F                 db  10h
.eh_frame:000000000000C5A0                 db  42h ; B
.eh_frame:000000000000C5A1                 db  0Eh
.eh_frame:000000000000C5A2                 db    8
.eh_frame:000000000000C5A3                 db  47h ; G
.eh_frame:000000000000C5A4                 db  0Bh
.eh_frame:000000000000C5A5                 db  71h ; q
.eh_frame:000000000000C5A6                 db  0Ah
.eh_frame:000000000000C5A7                 db  0Eh
.eh_frame:000000000000C5A8                 db  28h ; (
.eh_frame:000000000000C5A9                 db  41h ; A
.eh_frame:000000000000C5AA                 db  0Eh
.eh_frame:000000000000C5AB                 db  20h
.eh_frame:000000000000C5AC                 db  42h ; B
.eh_frame:000000000000C5AD                 db  0Eh
.eh_frame:000000000000C5AE                 db  18h
.eh_frame:000000000000C5AF                 db  42h ; B
.eh_frame:000000000000C5B0                 db  0Eh
.eh_frame:000000000000C5B1                 db  10h
.eh_frame:000000000000C5B2                 db  42h ; B
.eh_frame:000000000000C5B3                 db  0Eh
.eh_frame:000000000000C5B4                 db    8
.eh_frame:000000000000C5B5                 db  48h ; H
.eh_frame:000000000000C5B6                 db  0Bh
.eh_frame:000000000000C5B7                 db  53h ; S
.eh_frame:000000000000C5B8                 db  0Eh
.eh_frame:000000000000C5B9                 db  28h ; (
.eh_frame:000000000000C5BA                 db  44h ; D
.eh_frame:000000000000C5BB                 db  0Eh
.eh_frame:000000000000C5BC                 db  20h
.eh_frame:000000000000C5BD                 db  42h ; B
.eh_frame:000000000000C5BE                 db  0Eh
.eh_frame:000000000000C5BF                 db  18h
.eh_frame:000000000000C5C0                 db  42h ; B
.eh_frame:000000000000C5C1                 db  0Eh
.eh_frame:000000000000C5C2                 db  10h
.eh_frame:000000000000C5C3                 db  42h ; B
.eh_frame:000000000000C5C4                 db  0Eh
.eh_frame:000000000000C5C5                 db    8
.eh_frame:000000000000C5C6                 db    0
.eh_frame:000000000000C5C7                 db    0
.eh_frame:000000000000C5C8                 db  10h
.eh_frame:000000000000C5C9                 db    0
.eh_frame:000000000000C5CA                 db    0
.eh_frame:000000000000C5CB                 db    0
.eh_frame:000000000000C5CC                 db 0ACh
.eh_frame:000000000000C5CD                 db  10h
.eh_frame:000000000000C5CE                 db    0
.eh_frame:000000000000C5CF                 db    0
.eh_frame:000000000000C5D0                 db 0E0h
.eh_frame:000000000000C5D1                 db 0BEh
.eh_frame:000000000000C5D2                 db 0FFh
.eh_frame:000000000000C5D3                 db 0FFh
.eh_frame:000000000000C5D4                 db  77h ; w
.eh_frame:000000000000C5D5                 db    0
.eh_frame:000000000000C5D6                 db    0
.eh_frame:000000000000C5D7                 db    0
.eh_frame:000000000000C5D8                 db    0
.eh_frame:000000000000C5D9                 db    0
.eh_frame:000000000000C5DA                 db    0
.eh_frame:000000000000C5DB                 db    0
.eh_frame:000000000000C5DC                 db  5Ch ; \
.eh_frame:000000000000C5DD                 db    0
.eh_frame:000000000000C5DE                 db    0
.eh_frame:000000000000C5DF                 db    0
.eh_frame:000000000000C5E0                 db 0C0h
.eh_frame:000000000000C5E1                 db  10h
.eh_frame:000000000000C5E2                 db    0
.eh_frame:000000000000C5E3                 db    0
.eh_frame:000000000000C5E4                 db  4Ch ; L
.eh_frame:000000000000C5E5                 db 0BFh
.eh_frame:000000000000C5E6                 db 0FFh
.eh_frame:000000000000C5E7                 db 0FFh
.eh_frame:000000000000C5E8                 db  40h ; @
.eh_frame:000000000000C5E9                 db    1
.eh_frame:000000000000C5EA                 db    0
.eh_frame:000000000000C5EB                 db    0
.eh_frame:000000000000C5EC                 db    0
.eh_frame:000000000000C5ED                 db  42h ; B
.eh_frame:000000000000C5EE                 db  0Eh
.eh_frame:000000000000C5EF                 db  10h
.eh_frame:000000000000C5F0                 db  8Fh
.eh_frame:000000000000C5F1                 db    2
.eh_frame:000000000000C5F2                 db  42h ; B
.eh_frame:000000000000C5F3                 db  0Eh
.eh_frame:000000000000C5F4                 db  18h
.eh_frame:000000000000C5F5                 db  8Eh
.eh_frame:000000000000C5F6                 db    3
.eh_frame:000000000000C5F7                 db  42h ; B
.eh_frame:000000000000C5F8                 db  0Eh
.eh_frame:000000000000C5F9                 db  20h
.eh_frame:000000000000C5FA                 db  8Dh
.eh_frame:000000000000C5FB                 db    4
.eh_frame:000000000000C5FC                 db  42h ; B
.eh_frame:000000000000C5FD                 db  0Eh
.eh_frame:000000000000C5FE                 db  28h ; (
.eh_frame:000000000000C5FF                 db  8Ch
.eh_frame:000000000000C600                 db    5
.eh_frame:000000000000C601                 db  41h ; A
.eh_frame:000000000000C602                 db  0Eh
.eh_frame:000000000000C603                 db  30h ; 0
.eh_frame:000000000000C604                 db  86h
.eh_frame:000000000000C605                 db    6
.eh_frame:000000000000C606                 db  41h ; A
.eh_frame:000000000000C607                 db  0Eh
.eh_frame:000000000000C608                 db  38h ; 8
.eh_frame:000000000000C609                 db  83h
.eh_frame:000000000000C60A                 db    7
.eh_frame:000000000000C60B                 db  44h ; D
.eh_frame:000000000000C60C                 db  0Eh
.eh_frame:000000000000C60D                 db  40h ; @
.eh_frame:000000000000C60E                 db    2
.eh_frame:000000000000C60F                 db 0EEh
.eh_frame:000000000000C610                 db  0Ah
.eh_frame:000000000000C611                 db  0Eh
.eh_frame:000000000000C612                 db  38h ; 8
.eh_frame:000000000000C613                 db  46h ; F
.eh_frame:000000000000C614                 db  0Eh
.eh_frame:000000000000C615                 db  30h ; 0
.eh_frame:000000000000C616                 db  41h ; A
.eh_frame:000000000000C617                 db  0Eh
.eh_frame:000000000000C618                 db  28h ; (
.eh_frame:000000000000C619                 db  42h ; B
.eh_frame:000000000000C61A                 db  0Eh
.eh_frame:000000000000C61B                 db  20h
.eh_frame:000000000000C61C                 db  42h ; B
.eh_frame:000000000000C61D                 db  0Eh
.eh_frame:000000000000C61E                 db  18h
.eh_frame:000000000000C61F                 db  42h ; B
.eh_frame:000000000000C620                 db  0Eh
.eh_frame:000000000000C621                 db  10h
.eh_frame:000000000000C622                 db  42h ; B
.eh_frame:000000000000C623                 db  0Eh
.eh_frame:000000000000C624                 db    8
.eh_frame:000000000000C625                 db  45h ; E
.eh_frame:000000000000C626                 db  0Bh
.eh_frame:000000000000C627                 db  63h ; c
.eh_frame:000000000000C628                 db  0Eh
.eh_frame:000000000000C629                 db  38h ; 8
.eh_frame:000000000000C62A                 db  43h ; C
.eh_frame:000000000000C62B                 db  0Eh
.eh_frame:000000000000C62C                 db  30h ; 0
.eh_frame:000000000000C62D                 db  41h ; A
.eh_frame:000000000000C62E                 db  0Eh
.eh_frame:000000000000C62F                 db  28h ; (
.eh_frame:000000000000C630                 db  42h ; B
.eh_frame:000000000000C631                 db  0Eh
.eh_frame:000000000000C632                 db  20h
.eh_frame:000000000000C633                 db  42h ; B
.eh_frame:000000000000C634                 db  0Eh
.eh_frame:000000000000C635                 db  18h
.eh_frame:000000000000C636                 db  42h ; B
.eh_frame:000000000000C637                 db  0Eh
.eh_frame:000000000000C638                 db  10h
.eh_frame:000000000000C639                 db  42h ; B
.eh_frame:000000000000C63A                 db  0Eh
.eh_frame:000000000000C63B                 db    8
.eh_frame:000000000000C63C                 db  10h
.eh_frame:000000000000C63D                 db    0
.eh_frame:000000000000C63E                 db    0
.eh_frame:000000000000C63F                 db    0
.eh_frame:000000000000C640                 db  20h
.eh_frame:000000000000C641                 db  11h
.eh_frame:000000000000C642                 db    0
.eh_frame:000000000000C643                 db    0
.eh_frame:000000000000C644                 db  2Ch ; ,
.eh_frame:000000000000C645                 db 0C0h
.eh_frame:000000000000C646                 db 0FFh
.eh_frame:000000000000C647                 db 0FFh
.eh_frame:000000000000C648                 db    5
.eh_frame:000000000000C649                 db    0
.eh_frame:000000000000C64A                 db    0
.eh_frame:000000000000C64B                 db    0
.eh_frame:000000000000C64C                 db    0
.eh_frame:000000000000C64D                 db    0
.eh_frame:000000000000C64E                 db    0
.eh_frame:000000000000C64F                 db    0
.eh_frame:000000000000C650                 db  10h
.eh_frame:000000000000C651                 db    0
.eh_frame:000000000000C652                 db    0
.eh_frame:000000000000C653                 db    0
.eh_frame:000000000000C654                 db  34h ; 4
.eh_frame:000000000000C655                 db  11h
.eh_frame:000000000000C656                 db    0
.eh_frame:000000000000C657                 db    0
.eh_frame:000000000000C658                 db  28h ; (
.eh_frame:000000000000C659                 db 0C0h
.eh_frame:000000000000C65A                 db 0FFh
.eh_frame:000000000000C65B                 db 0FFh
.eh_frame:000000000000C65C                 db    5
.eh_frame:000000000000C65D                 db    0
.eh_frame:000000000000C65E                 db    0
.eh_frame:000000000000C65F                 db    0
.eh_frame:000000000000C660                 db    0
.eh_frame:000000000000C661                 db    0
.eh_frame:000000000000C662                 db    0
.eh_frame:000000000000C663                 db    0
.eh_frame:000000000000C664                 db  10h
.eh_frame:000000000000C665                 db    0
.eh_frame:000000000000C666                 db    0
.eh_frame:000000000000C667                 db    0
.eh_frame:000000000000C668                 db  48h ; H
.eh_frame:000000000000C669                 db  11h
.eh_frame:000000000000C66A                 db    0
.eh_frame:000000000000C66B                 db    0
.eh_frame:000000000000C66C                 db  24h ; $
.eh_frame:000000000000C66D                 db 0C0h
.eh_frame:000000000000C66E                 db 0FFh
.eh_frame:000000000000C66F                 db 0FFh
.eh_frame:000000000000C670                 db    5
.eh_frame:000000000000C671                 db    0
.eh_frame:000000000000C672                 db    0
.eh_frame:000000000000C673                 db    0
.eh_frame:000000000000C674                 db    0
.eh_frame:000000000000C675                 db    0
.eh_frame:000000000000C676                 db    0
.eh_frame:000000000000C677                 db    0
.eh_frame:000000000000C678                 db  10h
.eh_frame:000000000000C679                 db    0
.eh_frame:000000000000C67A                 db    0
.eh_frame:000000000000C67B                 db    0
.eh_frame:000000000000C67C                 db  5Ch ; \
.eh_frame:000000000000C67D                 db  11h
.eh_frame:000000000000C67E                 db    0
.eh_frame:000000000000C67F                 db    0
.eh_frame:000000000000C680                 db  20h
.eh_frame:000000000000C681                 db 0C0h
.eh_frame:000000000000C682                 db 0FFh
.eh_frame:000000000000C683                 db 0FFh
.eh_frame:000000000000C684                 db  49h ; I
.eh_frame:000000000000C685                 db    0
.eh_frame:000000000000C686                 db    0
.eh_frame:000000000000C687                 db    0
.eh_frame:000000000000C688                 db    0
.eh_frame:000000000000C689                 db    0
.eh_frame:000000000000C68A                 db    0
.eh_frame:000000000000C68B                 db    0
.eh_frame:000000000000C68C                 db  10h
.eh_frame:000000000000C68D                 db    0
.eh_frame:000000000000C68E                 db    0
.eh_frame:000000000000C68F                 db    0
.eh_frame:000000000000C690                 db  70h ; p
.eh_frame:000000000000C691                 db  11h
.eh_frame:000000000000C692                 db    0
.eh_frame:000000000000C693                 db    0
.eh_frame:000000000000C694                 db  5Ch ; \
.eh_frame:000000000000C695                 db 0C0h
.eh_frame:000000000000C696                 db 0FFh
.eh_frame:000000000000C697                 db 0FFh
.eh_frame:000000000000C698                 db  58h ; X
.eh_frame:000000000000C699                 db    0
.eh_frame:000000000000C69A                 db    0
.eh_frame:000000000000C69B                 db    0
.eh_frame:000000000000C69C                 db    0
.eh_frame:000000000000C69D                 db    0
.eh_frame:000000000000C69E                 db    0
.eh_frame:000000000000C69F                 db    0
.eh_frame:000000000000C6A0                 db  38h ; 8
.eh_frame:000000000000C6A1                 db    0
.eh_frame:000000000000C6A2                 db    0
.eh_frame:000000000000C6A3                 db    0
.eh_frame:000000000000C6A4                 db  84h
.eh_frame:000000000000C6A5                 db  11h
.eh_frame:000000000000C6A6                 db    0
.eh_frame:000000000000C6A7                 db    0
.eh_frame:000000000000C6A8                 db 0A8h
.eh_frame:000000000000C6A9                 db 0C0h
.eh_frame:000000000000C6AA                 db 0FFh
.eh_frame:000000000000C6AB                 db 0FFh
.eh_frame:000000000000C6AC                 db  47h ; G
.eh_frame:000000000000C6AD                 db    1
.eh_frame:000000000000C6AE                 db    0
.eh_frame:000000000000C6AF                 db    0
.eh_frame:000000000000C6B0                 db    0
.eh_frame:000000000000C6B1                 db  42h ; B
.eh_frame:000000000000C6B2                 db  0Eh
.eh_frame:000000000000C6B3                 db  10h
.eh_frame:000000000000C6B4                 db  8Dh
.eh_frame:000000000000C6B5                 db    2
.eh_frame:000000000000C6B6                 db  42h ; B
.eh_frame:000000000000C6B7                 db  0Eh
.eh_frame:000000000000C6B8                 db  18h
.eh_frame:000000000000C6B9                 db  8Ch
.eh_frame:000000000000C6BA                 db    3
.eh_frame:000000000000C6BB                 db  44h ; D
.eh_frame:000000000000C6BC                 db  0Eh
.eh_frame:000000000000C6BD                 db  20h
.eh_frame:000000000000C6BE                 db  86h
.eh_frame:000000000000C6BF                 db    4
.eh_frame:000000000000C6C0                 db  41h ; A
.eh_frame:000000000000C6C1                 db  0Eh
.eh_frame:000000000000C6C2                 db  28h ; (
.eh_frame:000000000000C6C3                 db  83h
.eh_frame:000000000000C6C4                 db    5
.eh_frame:000000000000C6C5                 db  46h ; F
.eh_frame:000000000000C6C6                 db  0Eh
.eh_frame:000000000000C6C7                 db  30h ; 0
.eh_frame:000000000000C6C8                 db    2
.eh_frame:000000000000C6C9                 db 0CDh
.eh_frame:000000000000C6CA                 db  0Ah
.eh_frame:000000000000C6CB                 db  0Eh
.eh_frame:000000000000C6CC                 db  28h ; (
.eh_frame:000000000000C6CD                 db  47h ; G
.eh_frame:000000000000C6CE                 db  0Eh
.eh_frame:000000000000C6CF                 db  20h
.eh_frame:000000000000C6D0                 db  41h ; A
.eh_frame:000000000000C6D1                 db  0Eh
.eh_frame:000000000000C6D2                 db  18h
.eh_frame:000000000000C6D3                 db  42h ; B
.eh_frame:000000000000C6D4                 db  0Eh
.eh_frame:000000000000C6D5                 db  10h
.eh_frame:000000000000C6D6                 db  42h ; B
.eh_frame:000000000000C6D7                 db  0Eh
.eh_frame:000000000000C6D8                 db    8
.eh_frame:000000000000C6D9                 db  58h ; X
.eh_frame:000000000000C6DA                 db  0Bh
.eh_frame:000000000000C6DB                 db    0
.eh_frame:000000000000C6DC                 db  34h ; 4
.eh_frame:000000000000C6DD                 db    0
.eh_frame:000000000000C6DE                 db    0
.eh_frame:000000000000C6DF                 db    0
.eh_frame:000000000000C6E0                 db 0C0h
.eh_frame:000000000000C6E1                 db  11h
.eh_frame:000000000000C6E2                 db    0
.eh_frame:000000000000C6E3                 db    0
.eh_frame:000000000000C6E4                 db 0BCh
.eh_frame:000000000000C6E5                 db 0C1h
.eh_frame:000000000000C6E6                 db 0FFh
.eh_frame:000000000000C6E7                 db 0FFh
.eh_frame:000000000000C6E8                 db  5Bh ; [
.eh_frame:000000000000C6E9                 db    0
.eh_frame:000000000000C6EA                 db    0
.eh_frame:000000000000C6EB                 db    0
.eh_frame:000000000000C6EC                 db    0
.eh_frame:000000000000C6ED                 db  42h ; B
.eh_frame:000000000000C6EE                 db  0Eh
.eh_frame:000000000000C6EF                 db  10h
.eh_frame:000000000000C6F0                 db  8Ch
.eh_frame:000000000000C6F1                 db    2
.eh_frame:000000000000C6F2                 db  41h ; A
.eh_frame:000000000000C6F3                 db  0Eh
.eh_frame:000000000000C6F4                 db  18h
.eh_frame:000000000000C6F5                 db  86h
.eh_frame:000000000000C6F6                 db    3
.eh_frame:000000000000C6F7                 db  44h ; D
.eh_frame:000000000000C6F8                 db  0Eh
.eh_frame:000000000000C6F9                 db  20h
.eh_frame:000000000000C6FA                 db  83h
.eh_frame:000000000000C6FB                 db    4
.eh_frame:000000000000C6FC                 db  79h ; y
.eh_frame:000000000000C6FD                 db  0Ah
.eh_frame:000000000000C6FE                 db  0Eh
.eh_frame:000000000000C6FF                 db  18h
.eh_frame:000000000000C700                 db  44h ; D
.eh_frame:000000000000C701                 db  0Eh
.eh_frame:000000000000C702                 db  10h
.eh_frame:000000000000C703                 db  42h ; B
.eh_frame:000000000000C704                 db  0Eh
.eh_frame:000000000000C705                 db    8
.eh_frame:000000000000C706                 db  4Ah ; J
.eh_frame:000000000000C707                 db  0Bh
.eh_frame:000000000000C708                 db  44h ; D
.eh_frame:000000000000C709                 db  0Eh
.eh_frame:000000000000C70A                 db  18h
.eh_frame:000000000000C70B                 db  41h ; A
.eh_frame:000000000000C70C                 db  0Eh
.eh_frame:000000000000C70D                 db  10h
.eh_frame:000000000000C70E                 db  45h ; E
.eh_frame:000000000000C70F                 db  0Eh
.eh_frame:000000000000C710                 db    8
.eh_frame:000000000000C711                 db    0
.eh_frame:000000000000C712                 db    0
.eh_frame:000000000000C713                 db    0
.eh_frame:000000000000C714                 db  10h
.eh_frame:000000000000C715                 db    0
.eh_frame:000000000000C716                 db    0
.eh_frame:000000000000C717                 db    0
.eh_frame:000000000000C718                 db 0F8h
.eh_frame:000000000000C719                 db  11h
.eh_frame:000000000000C71A                 db    0
.eh_frame:000000000000C71B                 db    0
.eh_frame:000000000000C71C                 db 0E4h
.eh_frame:000000000000C71D                 db 0C1h
.eh_frame:000000000000C71E                 db 0FFh
.eh_frame:000000000000C71F                 db 0FFh
.eh_frame:000000000000C720                 db  41h ; A
.eh_frame:000000000000C721                 db    0
.eh_frame:000000000000C722                 db    0
.eh_frame:000000000000C723                 db    0
.eh_frame:000000000000C724                 db    0
.eh_frame:000000000000C725                 db  7Ch ; |
.eh_frame:000000000000C726                 db  0Eh
.eh_frame:000000000000C727                 db  10h
.eh_frame:000000000000C728                 db  30h ; 0
.eh_frame:000000000000C729                 db    0
.eh_frame:000000000000C72A                 db    0
.eh_frame:000000000000C72B                 db    0
.eh_frame:000000000000C72C                 db  0Ch
.eh_frame:000000000000C72D                 db  12h
.eh_frame:000000000000C72E                 db    0
.eh_frame:000000000000C72F                 db    0
.eh_frame:000000000000C730                 db  20h
.eh_frame:000000000000C731                 db 0C2h
.eh_frame:000000000000C732                 db 0FFh
.eh_frame:000000000000C733                 db 0FFh
.eh_frame:000000000000C734                 db  72h ; r
.eh_frame:000000000000C735                 db    0
.eh_frame:000000000000C736                 db    0
.eh_frame:000000000000C737                 db    0
.eh_frame:000000000000C738                 db    0
.eh_frame:000000000000C739                 db  41h ; A
.eh_frame:000000000000C73A                 db  0Eh
.eh_frame:000000000000C73B                 db  10h
.eh_frame:000000000000C73C                 db  86h
.eh_frame:000000000000C73D                 db    2
.eh_frame:000000000000C73E                 db  41h ; A
.eh_frame:000000000000C73F                 db  0Eh
.eh_frame:000000000000C740                 db  18h
.eh_frame:000000000000C741                 db  83h
.eh_frame:000000000000C742                 db    3
.eh_frame:000000000000C743                 db  4Ah ; J
.eh_frame:000000000000C744                 db  0Eh
.eh_frame:000000000000C745                 db  20h
.eh_frame:000000000000C746                 db    2
.eh_frame:000000000000C747                 db  53h ; S
.eh_frame:000000000000C748                 db  0Ah
.eh_frame:000000000000C749                 db  0Eh
.eh_frame:000000000000C74A                 db  18h
.eh_frame:000000000000C74B                 db  41h ; A
.eh_frame:000000000000C74C                 db  0Eh
.eh_frame:000000000000C74D                 db  10h
.eh_frame:000000000000C74E                 db  41h ; A
.eh_frame:000000000000C74F                 db  0Eh
.eh_frame:000000000000C750                 db    8
.eh_frame:000000000000C751                 db  47h ; G
.eh_frame:000000000000C752                 db  0Bh
.eh_frame:000000000000C753                 db  47h ; G
.eh_frame:000000000000C754                 db  0Eh
.eh_frame:000000000000C755                 db  18h
.eh_frame:000000000000C756                 db  41h ; A
.eh_frame:000000000000C757                 db  0Eh
.eh_frame:000000000000C758                 db  10h
.eh_frame:000000000000C759                 db  41h ; A
.eh_frame:000000000000C75A                 db  0Eh
.eh_frame:000000000000C75B                 db    8
.eh_frame:000000000000C75C                 db  10h
.eh_frame:000000000000C75D                 db    0
.eh_frame:000000000000C75E                 db    0
.eh_frame:000000000000C75F                 db    0
.eh_frame:000000000000C760                 db  40h ; @
.eh_frame:000000000000C761                 db  12h
.eh_frame:000000000000C762                 db    0
.eh_frame:000000000000C763                 db    0
.eh_frame:000000000000C764                 db  6Ch ; l
.eh_frame:000000000000C765                 db 0C2h
.eh_frame:000000000000C766                 db 0FFh
.eh_frame:000000000000C767                 db 0FFh
.eh_frame:000000000000C768                 db  65h ; e
.eh_frame:000000000000C769                 db    0
.eh_frame:000000000000C76A                 db    0
.eh_frame:000000000000C76B                 db    0
.eh_frame:000000000000C76C                 db    0
.eh_frame:000000000000C76D                 db    0
.eh_frame:000000000000C76E                 db    0
.eh_frame:000000000000C76F                 db    0
.eh_frame:000000000000C770                 db  48h ; H
.eh_frame:000000000000C771                 db    0
.eh_frame:000000000000C772                 db    0
.eh_frame:000000000000C773                 db    0
.eh_frame:000000000000C774                 db  54h ; T
.eh_frame:000000000000C775                 db  12h
.eh_frame:000000000000C776                 db    0
.eh_frame:000000000000C777                 db    0
.eh_frame:000000000000C778                 db 0C8h
.eh_frame:000000000000C779                 db 0C2h
.eh_frame:000000000000C77A                 db 0FFh
.eh_frame:000000000000C77B                 db 0FFh
.eh_frame:000000000000C77C                 db  6Ah ; j
.eh_frame:000000000000C77D                 db    0
.eh_frame:000000000000C77E                 db    0
.eh_frame:000000000000C77F                 db    0
.eh_frame:000000000000C780                 db    0
.eh_frame:000000000000C781                 db  42h ; B
.eh_frame:000000000000C782                 db  0Eh
.eh_frame:000000000000C783                 db  10h
.eh_frame:000000000000C784                 db  8Fh
.eh_frame:000000000000C785                 db    2
.eh_frame:000000000000C786                 db  42h ; B
.eh_frame:000000000000C787                 db  0Eh
.eh_frame:000000000000C788                 db  18h
.eh_frame:000000000000C789                 db  8Eh
.eh_frame:000000000000C78A                 db    3
.eh_frame:000000000000C78B                 db  42h ; B
.eh_frame:000000000000C78C                 db  0Eh
.eh_frame:000000000000C78D                 db  20h
.eh_frame:000000000000C78E                 db  8Dh
.eh_frame:000000000000C78F                 db    4
.eh_frame:000000000000C790                 db  42h ; B
.eh_frame:000000000000C791                 db  0Eh
.eh_frame:000000000000C792                 db  28h ; (
.eh_frame:000000000000C793                 db  8Ch
.eh_frame:000000000000C794                 db    5
.eh_frame:000000000000C795                 db  41h ; A
.eh_frame:000000000000C796                 db  0Eh
.eh_frame:000000000000C797                 db  30h ; 0
.eh_frame:000000000000C798                 db  86h
.eh_frame:000000000000C799                 db    6
.eh_frame:000000000000C79A                 db  41h ; A
.eh_frame:000000000000C79B                 db  0Eh
.eh_frame:000000000000C79C                 db  38h ; 8
.eh_frame:000000000000C79D                 db  83h
.eh_frame:000000000000C79E                 db    7
.eh_frame:000000000000C79F                 db  44h ; D
.eh_frame:000000000000C7A0                 db  0Eh
.eh_frame:000000000000C7A1                 db  40h ; @
.eh_frame:000000000000C7A2                 db    2
.eh_frame:000000000000C7A3                 db  4Ah ; J
.eh_frame:000000000000C7A4                 db  0Ah
.eh_frame:000000000000C7A5                 db  0Eh
.eh_frame:000000000000C7A6                 db  38h ; 8
.eh_frame:000000000000C7A7                 db  44h ; D
.eh_frame:000000000000C7A8                 db  0Eh
.eh_frame:000000000000C7A9                 db  30h ; 0
.eh_frame:000000000000C7AA                 db  41h ; A
.eh_frame:000000000000C7AB                 db  0Eh
.eh_frame:000000000000C7AC                 db  28h ; (
.eh_frame:000000000000C7AD                 db  42h ; B
.eh_frame:000000000000C7AE                 db  0Eh
.eh_frame:000000000000C7AF                 db  20h
.eh_frame:000000000000C7B0                 db  42h ; B
.eh_frame:000000000000C7B1                 db  0Eh
.eh_frame:000000000000C7B2                 db  18h
.eh_frame:000000000000C7B3                 db  42h ; B
.eh_frame:000000000000C7B4                 db  0Eh
.eh_frame:000000000000C7B5                 db  10h
.eh_frame:000000000000C7B6                 db  42h ; B
.eh_frame:000000000000C7B7                 db  0Eh
.eh_frame:000000000000C7B8                 db    8
.eh_frame:000000000000C7B9                 db  41h ; A
.eh_frame:000000000000C7BA                 db  0Bh
.eh_frame:000000000000C7BB                 db    0
.eh_frame:000000000000C7BC                 db  10h
.eh_frame:000000000000C7BD                 db    0
.eh_frame:000000000000C7BE                 db    0
.eh_frame:000000000000C7BF                 db    0
.eh_frame:000000000000C7C0                 db 0A0h
.eh_frame:000000000000C7C1                 db  12h
.eh_frame:000000000000C7C2                 db    0
.eh_frame:000000000000C7C3                 db    0
.eh_frame:000000000000C7C4                 db 0ECh
.eh_frame:000000000000C7C5                 db 0C2h
.eh_frame:000000000000C7C6                 db 0FFh
.eh_frame:000000000000C7C7                 db 0FFh
.eh_frame:000000000000C7C8                 db  31h ; 1
.eh_frame:000000000000C7C9                 db    0
.eh_frame:000000000000C7CA                 db    0
.eh_frame:000000000000C7CB                 db    0
.eh_frame:000000000000C7CC                 db    0
.eh_frame:000000000000C7CD                 db    0
.eh_frame:000000000000C7CE                 db    0
.eh_frame:000000000000C7CF                 db    0
.eh_frame:000000000000C7D0                 db  10h
.eh_frame:000000000000C7D1                 db    0
.eh_frame:000000000000C7D2                 db    0
.eh_frame:000000000000C7D3                 db    0
.eh_frame:000000000000C7D4                 db 0B4h
.eh_frame:000000000000C7D5                 db  12h
.eh_frame:000000000000C7D6                 db    0
.eh_frame:000000000000C7D7                 db    0
.eh_frame:000000000000C7D8                 db  18h
.eh_frame:000000000000C7D9                 db 0C3h
.eh_frame:000000000000C7DA                 db 0FFh
.eh_frame:000000000000C7DB                 db 0FFh
.eh_frame:000000000000C7DC                 db  20h
.eh_frame:000000000000C7DD                 db    0
.eh_frame:000000000000C7DE                 db    0
.eh_frame:000000000000C7DF                 db    0
.eh_frame:000000000000C7E0                 db    0
.eh_frame:000000000000C7E1                 db    0
.eh_frame:000000000000C7E2                 db    0
.eh_frame:000000000000C7E3                 db    0
.eh_frame:000000000000C7E4                 db  48h ; H
.eh_frame:000000000000C7E5                 db    0
.eh_frame:000000000000C7E6                 db    0
.eh_frame:000000000000C7E7                 db    0
.eh_frame:000000000000C7E8                 db 0C8h
.eh_frame:000000000000C7E9                 db  12h
.eh_frame:000000000000C7EA                 db    0
.eh_frame:000000000000C7EB                 db    0
.eh_frame:000000000000C7EC                 db  24h ; $
.eh_frame:000000000000C7ED                 db 0C3h
.eh_frame:000000000000C7EE                 db 0FFh
.eh_frame:000000000000C7EF                 db 0FFh
.eh_frame:000000000000C7F0                 db 0B4h
.eh_frame:000000000000C7F1                 db    1
.eh_frame:000000000000C7F2                 db    0
.eh_frame:000000000000C7F3                 db    0
.eh_frame:000000000000C7F4                 db    0
.eh_frame:000000000000C7F5                 db  42h ; B
.eh_frame:000000000000C7F6                 db  0Eh
.eh_frame:000000000000C7F7                 db  10h
.eh_frame:000000000000C7F8                 db  8Fh
.eh_frame:000000000000C7F9                 db    2
.eh_frame:000000000000C7FA                 db  42h ; B
.eh_frame:000000000000C7FB                 db  0Eh
.eh_frame:000000000000C7FC                 db  18h
.eh_frame:000000000000C7FD                 db  8Eh
.eh_frame:000000000000C7FE                 db    3
.eh_frame:000000000000C7FF                 db  49h ; I
.eh_frame:000000000000C800                 db  0Eh
.eh_frame:000000000000C801                 db  20h
.eh_frame:000000000000C802                 db  8Dh
.eh_frame:000000000000C803                 db    4
.eh_frame:000000000000C804                 db  42h ; B
.eh_frame:000000000000C805                 db  0Eh
.eh_frame:000000000000C806                 db  28h ; (
.eh_frame:000000000000C807                 db  8Ch
.eh_frame:000000000000C808                 db    5
.eh_frame:000000000000C809                 db  44h ; D
.eh_frame:000000000000C80A                 db  0Eh
.eh_frame:000000000000C80B                 db  30h ; 0
.eh_frame:000000000000C80C                 db  86h
.eh_frame:000000000000C80D                 db    6
.eh_frame:000000000000C80E                 db  41h ; A
.eh_frame:000000000000C80F                 db  0Eh
.eh_frame:000000000000C810                 db  38h ; 8
.eh_frame:000000000000C811                 db  83h
.eh_frame:000000000000C812                 db    7
.eh_frame:000000000000C813                 db  52h ; R
.eh_frame:000000000000C814                 db  0Eh
.eh_frame:000000000000C815                 db  40h ; @
.eh_frame:000000000000C816                 db    2
.eh_frame:000000000000C817                 db 0D8h
.eh_frame:000000000000C818                 db  0Ah
.eh_frame:000000000000C819                 db  0Eh
.eh_frame:000000000000C81A                 db  38h ; 8
.eh_frame:000000000000C81B                 db  44h ; D
.eh_frame:000000000000C81C                 db  0Eh
.eh_frame:000000000000C81D                 db  30h ; 0
.eh_frame:000000000000C81E                 db  41h ; A
.eh_frame:000000000000C81F                 db  0Eh
.eh_frame:000000000000C820                 db  28h ; (
.eh_frame:000000000000C821                 db  42h ; B
.eh_frame:000000000000C822                 db  0Eh
.eh_frame:000000000000C823                 db  20h
.eh_frame:000000000000C824                 db  42h ; B
.eh_frame:000000000000C825                 db  0Eh
.eh_frame:000000000000C826                 db  18h
.eh_frame:000000000000C827                 db  42h ; B
.eh_frame:000000000000C828                 db  0Eh
.eh_frame:000000000000C829                 db  10h
.eh_frame:000000000000C82A                 db  42h ; B
.eh_frame:000000000000C82B                 db  0Eh
.eh_frame:000000000000C82C                 db    8
.eh_frame:000000000000C82D                 db  45h ; E
.eh_frame:000000000000C82E                 db  0Bh
.eh_frame:000000000000C82F                 db    0
.eh_frame:000000000000C830                 db  28h ; (
.eh_frame:000000000000C831                 db    0
.eh_frame:000000000000C832                 db    0
.eh_frame:000000000000C833                 db    0
.eh_frame:000000000000C834                 db  14h
.eh_frame:000000000000C835                 db  13h
.eh_frame:000000000000C836                 db    0
.eh_frame:000000000000C837                 db    0
.eh_frame:000000000000C838                 db  98h
.eh_frame:000000000000C839                 db 0C4h
.eh_frame:000000000000C83A                 db 0FFh
.eh_frame:000000000000C83B                 db 0FFh
.eh_frame:000000000000C83C                 db  90h
.eh_frame:000000000000C83D                 db    0
.eh_frame:000000000000C83E                 db    0
.eh_frame:000000000000C83F                 db    0
.eh_frame:000000000000C840                 db    0
.eh_frame:000000000000C841                 db  42h ; B
.eh_frame:000000000000C842                 db  0Eh
.eh_frame:000000000000C843                 db  10h
.eh_frame:000000000000C844                 db  8Ch
.eh_frame:000000000000C845                 db    2
.eh_frame:000000000000C846                 db  41h ; A
.eh_frame:000000000000C847                 db  0Eh
.eh_frame:000000000000C848                 db  18h
.eh_frame:000000000000C849                 db  86h
.eh_frame:000000000000C84A                 db    3
.eh_frame:000000000000C84B                 db  44h ; D
.eh_frame:000000000000C84C                 db  0Eh
.eh_frame:000000000000C84D                 db  20h
.eh_frame:000000000000C84E                 db  83h
.eh_frame:000000000000C84F                 db    4
.eh_frame:000000000000C850                 db    2
.eh_frame:000000000000C851                 db  85h
.eh_frame:000000000000C852                 db  0Eh
.eh_frame:000000000000C853                 db  18h
.eh_frame:000000000000C854                 db  41h ; A
.eh_frame:000000000000C855                 db  0Eh
.eh_frame:000000000000C856                 db  10h
.eh_frame:000000000000C857                 db  42h ; B
.eh_frame:000000000000C858                 db  0Eh
.eh_frame:000000000000C859                 db    8
.eh_frame:000000000000C85A                 db    0
.eh_frame:000000000000C85B                 db    0
.eh_frame:000000000000C85C                 db  28h ; (
.eh_frame:000000000000C85D                 db    0
.eh_frame:000000000000C85E                 db    0
.eh_frame:000000000000C85F                 db    0
.eh_frame:000000000000C860                 db  40h ; @
.eh_frame:000000000000C861                 db  13h
.eh_frame:000000000000C862                 db    0
.eh_frame:000000000000C863                 db    0
.eh_frame:000000000000C864                 db 0FCh
.eh_frame:000000000000C865                 db 0C4h
.eh_frame:000000000000C866                 db 0FFh
.eh_frame:000000000000C867                 db 0FFh
.eh_frame:000000000000C868                 db 0D6h
.eh_frame:000000000000C869                 db    0
.eh_frame:000000000000C86A                 db    0
.eh_frame:000000000000C86B                 db    0
.eh_frame:000000000000C86C                 db    0
.eh_frame:000000000000C86D                 db  42h ; B
.eh_frame:000000000000C86E                 db  0Eh
.eh_frame:000000000000C86F                 db  10h
.eh_frame:000000000000C870                 db  8Ch
.eh_frame:000000000000C871                 db    2
.eh_frame:000000000000C872                 db  41h ; A
.eh_frame:000000000000C873                 db  0Eh
.eh_frame:000000000000C874                 db  18h
.eh_frame:000000000000C875                 db  86h
.eh_frame:000000000000C876                 db    3
.eh_frame:000000000000C877                 db  44h ; D
.eh_frame:000000000000C878                 db  0Eh
.eh_frame:000000000000C879                 db  20h
.eh_frame:000000000000C87A                 db  83h
.eh_frame:000000000000C87B                 db    4
.eh_frame:000000000000C87C                 db    2
.eh_frame:000000000000C87D                 db 0C4h
.eh_frame:000000000000C87E                 db  0Eh
.eh_frame:000000000000C87F                 db  18h
.eh_frame:000000000000C880                 db  44h ; D
.eh_frame:000000000000C881                 db  0Eh
.eh_frame:000000000000C882                 db  10h
.eh_frame:000000000000C883                 db  42h ; B
.eh_frame:000000000000C884                 db  0Eh
.eh_frame:000000000000C885                 db    8
.eh_frame:000000000000C886                 db    0
.eh_frame:000000000000C887                 db    0
.eh_frame:000000000000C888                 db  34h ; 4
.eh_frame:000000000000C889                 db    0
.eh_frame:000000000000C88A                 db    0
.eh_frame:000000000000C88B                 db    0
.eh_frame:000000000000C88C                 db  6Ch ; l
.eh_frame:000000000000C88D                 db  13h
.eh_frame:000000000000C88E                 db    0
.eh_frame:000000000000C88F                 db    0
.eh_frame:000000000000C890                 db 0B0h
.eh_frame:000000000000C891                 db 0C5h
.eh_frame:000000000000C892                 db 0FFh
.eh_frame:000000000000C893                 db 0FFh
.eh_frame:000000000000C894                 db  3Eh ; >
.eh_frame:000000000000C895                 db    2
.eh_frame:000000000000C896                 db    0
.eh_frame:000000000000C897                 db    0
.eh_frame:000000000000C898                 db    0
.eh_frame:000000000000C899                 db  42h ; B
.eh_frame:000000000000C89A                 db  0Eh
.eh_frame:000000000000C89B                 db  10h
.eh_frame:000000000000C89C                 db  8Ch
.eh_frame:000000000000C89D                 db    2
.eh_frame:000000000000C89E                 db  41h ; A
.eh_frame:000000000000C89F                 db  0Eh
.eh_frame:000000000000C8A0                 db  18h
.eh_frame:000000000000C8A1                 db  86h
.eh_frame:000000000000C8A2                 db    3
.eh_frame:000000000000C8A3                 db  44h ; D
.eh_frame:000000000000C8A4                 db  0Eh
.eh_frame:000000000000C8A5                 db  20h
.eh_frame:000000000000C8A6                 db  83h
.eh_frame:000000000000C8A7                 db    4
.eh_frame:000000000000C8A8                 db  44h ; D
.eh_frame:000000000000C8A9                 db  0Eh
.eh_frame:000000000000C8AA                 db  80h
.eh_frame:000000000000C8AB                 db    1
.eh_frame:000000000000C8AC                 db    3
.eh_frame:000000000000C8AD                 db  91h
.eh_frame:000000000000C8AE                 db    1
.eh_frame:000000000000C8AF                 db  0Ah
.eh_frame:000000000000C8B0                 db  0Eh
.eh_frame:000000000000C8B1                 db  20h
.eh_frame:000000000000C8B2                 db  41h ; A
.eh_frame:000000000000C8B3                 db  0Eh
.eh_frame:000000000000C8B4                 db  18h
.eh_frame:000000000000C8B5                 db  41h ; A
.eh_frame:000000000000C8B6                 db  0Eh
.eh_frame:000000000000C8B7                 db  10h
.eh_frame:000000000000C8B8                 db  42h ; B
.eh_frame:000000000000C8B9                 db  0Eh
.eh_frame:000000000000C8BA                 db    8
.eh_frame:000000000000C8BB                 db  48h ; H
.eh_frame:000000000000C8BC                 db  0Bh
.eh_frame:000000000000C8BD                 db    0
.eh_frame:000000000000C8BE                 db    0
.eh_frame:000000000000C8BF                 db    0
.eh_frame:000000000000C8C0                 db  38h ; 8
.eh_frame:000000000000C8C1                 db    0
.eh_frame:000000000000C8C2                 db    0
.eh_frame:000000000000C8C3                 db    0
.eh_frame:000000000000C8C4                 db 0A4h
.eh_frame:000000000000C8C5                 db  13h
.eh_frame:000000000000C8C6                 db    0
.eh_frame:000000000000C8C7                 db    0
.eh_frame:000000000000C8C8                 db 0B8h
.eh_frame:000000000000C8C9                 db 0C7h
.eh_frame:000000000000C8CA                 db 0FFh
.eh_frame:000000000000C8CB                 db 0FFh
.eh_frame:000000000000C8CC                 db  84h
.eh_frame:000000000000C8CD                 db    2
.eh_frame:000000000000C8CE                 db    0
.eh_frame:000000000000C8CF                 db    0
.eh_frame:000000000000C8D0                 db    0
.eh_frame:000000000000C8D1                 db  42h ; B
.eh_frame:000000000000C8D2                 db  0Eh
.eh_frame:000000000000C8D3                 db  10h
.eh_frame:000000000000C8D4                 db  8Dh
.eh_frame:000000000000C8D5                 db    2
.eh_frame:000000000000C8D6                 db  42h ; B
.eh_frame:000000000000C8D7                 db  0Eh
.eh_frame:000000000000C8D8                 db  18h
.eh_frame:000000000000C8D9                 db  8Ch
.eh_frame:000000000000C8DA                 db    3
.eh_frame:000000000000C8DB                 db  41h ; A
.eh_frame:000000000000C8DC                 db  0Eh
.eh_frame:000000000000C8DD                 db  20h
.eh_frame:000000000000C8DE                 db  86h
.eh_frame:000000000000C8DF                 db    4
.eh_frame:000000000000C8E0                 db  41h ; A
.eh_frame:000000000000C8E1                 db  0Eh
.eh_frame:000000000000C8E2                 db  28h ; (
.eh_frame:000000000000C8E3                 db  83h
.eh_frame:000000000000C8E4                 db    5
.eh_frame:000000000000C8E5                 db  44h ; D
.eh_frame:000000000000C8E6                 db  0Eh
.eh_frame:000000000000C8E7                 db  40h ; @
.eh_frame:000000000000C8E8                 db    2
.eh_frame:000000000000C8E9                 db  5Ah ; Z
.eh_frame:000000000000C8EA                 db  0Ah
.eh_frame:000000000000C8EB                 db  0Eh
.eh_frame:000000000000C8EC                 db  28h ; (
.eh_frame:000000000000C8ED                 db  41h ; A
.eh_frame:000000000000C8EE                 db  0Eh
.eh_frame:000000000000C8EF                 db  20h
.eh_frame:000000000000C8F0                 db  41h ; A
.eh_frame:000000000000C8F1                 db  0Eh
.eh_frame:000000000000C8F2                 db  18h
.eh_frame:000000000000C8F3                 db  42h ; B
.eh_frame:000000000000C8F4                 db  0Eh
.eh_frame:000000000000C8F5                 db  10h
.eh_frame:000000000000C8F6                 db  42h ; B
.eh_frame:000000000000C8F7                 db  0Eh
.eh_frame:000000000000C8F8                 db    8
.eh_frame:000000000000C8F9                 db  46h ; F
.eh_frame:000000000000C8FA                 db  0Bh
.eh_frame:000000000000C8FB                 db    0
.eh_frame:000000000000C8FC                 db  20h
.eh_frame:000000000000C8FD                 db    0
.eh_frame:000000000000C8FE                 db    0
.eh_frame:000000000000C8FF                 db    0
.eh_frame:000000000000C900                 db 0E0h
.eh_frame:000000000000C901                 db  13h
.eh_frame:000000000000C902                 db    0
.eh_frame:000000000000C903                 db    0
.eh_frame:000000000000C904                 db  0Ch
.eh_frame:000000000000C905                 db 0CAh
.eh_frame:000000000000C906                 db 0FFh
.eh_frame:000000000000C907                 db 0FFh
.eh_frame:000000000000C908                 db  59h ; Y
.eh_frame:000000000000C909                 db    0
.eh_frame:000000000000C90A                 db    0
.eh_frame:000000000000C90B                 db    0
.eh_frame:000000000000C90C                 db    0
.eh_frame:000000000000C90D                 db  41h ; A
.eh_frame:000000000000C90E                 db  0Eh
.eh_frame:000000000000C90F                 db  10h
.eh_frame:000000000000C910                 db  83h
.eh_frame:000000000000C911                 db    2
.eh_frame:000000000000C912                 db  47h ; G
.eh_frame:000000000000C913                 db  0Eh
.eh_frame:000000000000C914                 db  20h
.eh_frame:000000000000C915                 db  7Ch ; |
.eh_frame:000000000000C916                 db  0Ah
.eh_frame:000000000000C917                 db  0Eh
.eh_frame:000000000000C918                 db  10h
.eh_frame:000000000000C919                 db  41h ; A
.eh_frame:000000000000C91A                 db  0Eh
.eh_frame:000000000000C91B                 db    8
.eh_frame:000000000000C91C                 db  4Bh ; K
.eh_frame:000000000000C91D                 db  0Bh
.eh_frame:000000000000C91E                 db    0
.eh_frame:000000000000C91F                 db    0
.eh_frame:000000000000C920                 db  34h ; 4
.eh_frame:000000000000C921                 db    0
.eh_frame:000000000000C922                 db    0
.eh_frame:000000000000C923                 db    0
.eh_frame:000000000000C924                 db    4
.eh_frame:000000000000C925                 db  14h
.eh_frame:000000000000C926                 db    0
.eh_frame:000000000000C927                 db    0
.eh_frame:000000000000C928                 db  48h ; H
.eh_frame:000000000000C929                 db 0CAh
.eh_frame:000000000000C92A                 db 0FFh
.eh_frame:000000000000C92B                 db 0FFh
.eh_frame:000000000000C92C                 db    3
.eh_frame:000000000000C92D                 db    2
.eh_frame:000000000000C92E                 db    0
.eh_frame:000000000000C92F                 db    0
.eh_frame:000000000000C930                 db    0
.eh_frame:000000000000C931                 db  42h ; B
.eh_frame:000000000000C932                 db  0Eh
.eh_frame:000000000000C933                 db  10h
.eh_frame:000000000000C934                 db  8Ch
.eh_frame:000000000000C935                 db    2
.eh_frame:000000000000C936                 db  41h ; A
.eh_frame:000000000000C937                 db  0Eh
.eh_frame:000000000000C938                 db  18h
.eh_frame:000000000000C939                 db  86h
.eh_frame:000000000000C93A                 db    3
.eh_frame:000000000000C93B                 db  46h ; F
.eh_frame:000000000000C93C                 db  0Eh
.eh_frame:000000000000C93D                 db  20h
.eh_frame:000000000000C93E                 db  83h
.eh_frame:000000000000C93F                 db    4
.eh_frame:000000000000C940                 db  47h ; G
.eh_frame:000000000000C941                 db  0Eh
.eh_frame:000000000000C942                 db  30h ; 0
.eh_frame:000000000000C943                 db    2
.eh_frame:000000000000C944                 db  4Ah ; J
.eh_frame:000000000000C945                 db  0Ah
.eh_frame:000000000000C946                 db  0Eh
.eh_frame:000000000000C947                 db  20h
.eh_frame:000000000000C948                 db  41h ; A
.eh_frame:000000000000C949                 db  0Eh
.eh_frame:000000000000C94A                 db  18h
.eh_frame:000000000000C94B                 db  41h ; A
.eh_frame:000000000000C94C                 db  0Eh
.eh_frame:000000000000C94D                 db  10h
.eh_frame:000000000000C94E                 db  42h ; B
.eh_frame:000000000000C94F                 db  0Eh
.eh_frame:000000000000C950                 db    8
.eh_frame:000000000000C951                 db  42h ; B
.eh_frame:000000000000C952                 db  0Bh
.eh_frame:000000000000C953                 db    0
.eh_frame:000000000000C954                 db    0
.eh_frame:000000000000C955                 db    0
.eh_frame:000000000000C956                 db    0
.eh_frame:000000000000C957                 db    0
.eh_frame:000000000000C958                 db  10h
.eh_frame:000000000000C959                 db    0
.eh_frame:000000000000C95A                 db    0
.eh_frame:000000000000C95B                 db    0
.eh_frame:000000000000C95C                 db  3Ch ; <
.eh_frame:000000000000C95D                 db  14h
.eh_frame:000000000000C95E                 db    0
.eh_frame:000000000000C95F                 db    0
.eh_frame:000000000000C960                 db  20h
.eh_frame:000000000000C961                 db 0CCh
.eh_frame:000000000000C962                 db 0FFh
.eh_frame:000000000000C963                 db 0FFh
.eh_frame:000000000000C964                 db  1Bh
.eh_frame:000000000000C965                 db    0
.eh_frame:000000000000C966                 db    0
.eh_frame:000000000000C967                 db    0
.eh_frame:000000000000C968                 db    0
.eh_frame:000000000000C969                 db    0
.eh_frame:000000000000C96A                 db    0
.eh_frame:000000000000C96B                 db    0
.eh_frame:000000000000C96C                 db  10h
.eh_frame:000000000000C96D                 db    0
.eh_frame:000000000000C96E                 db    0
.eh_frame:000000000000C96F                 db    0
.eh_frame:000000000000C970                 db  50h ; P
.eh_frame:000000000000C971                 db  14h
.eh_frame:000000000000C972                 db    0
.eh_frame:000000000000C973                 db    0
.eh_frame:000000000000C974                 db  2Ch ; ,
.eh_frame:000000000000C975                 db 0CCh
.eh_frame:000000000000C976                 db 0FFh
.eh_frame:000000000000C977                 db 0FFh
.eh_frame:000000000000C978                 db    5
.eh_frame:000000000000C979                 db    0
.eh_frame:000000000000C97A                 db    0
.eh_frame:000000000000C97B                 db    0
.eh_frame:000000000000C97C                 db    0
.eh_frame:000000000000C97D                 db    0
.eh_frame:000000000000C97E                 db    0
.eh_frame:000000000000C97F                 db    0
.eh_frame:000000000000C980                 db  10h
.eh_frame:000000000000C981                 db    0
.eh_frame:000000000000C982                 db    0
.eh_frame:000000000000C983                 db    0
.eh_frame:000000000000C984                 db  64h ; d
.eh_frame:000000000000C985                 db  14h
.eh_frame:000000000000C986                 db    0
.eh_frame:000000000000C987                 db    0
.eh_frame:000000000000C988                 db  28h ; (
.eh_frame:000000000000C989                 db 0CCh
.eh_frame:000000000000C98A                 db 0FFh
.eh_frame:000000000000C98B                 db 0FFh
.eh_frame:000000000000C98C                 db  35h ; 5
.eh_frame:000000000000C98D                 db    0
.eh_frame:000000000000C98E                 db    0
.eh_frame:000000000000C98F                 db    0
.eh_frame:000000000000C990                 db    0
.eh_frame:000000000000C991                 db    0
.eh_frame:000000000000C992                 db    0
.eh_frame:000000000000C993                 db    0
.eh_frame:000000000000C994                 db  10h
.eh_frame:000000000000C995                 db    0
.eh_frame:000000000000C996                 db    0
.eh_frame:000000000000C997                 db    0
.eh_frame:000000000000C998                 db  78h ; x
.eh_frame:000000000000C999                 db  14h
.eh_frame:000000000000C99A                 db    0
.eh_frame:000000000000C99B                 db    0
.eh_frame:000000000000C99C                 db  54h ; T
.eh_frame:000000000000C99D                 db 0CCh
.eh_frame:000000000000C99E                 db 0FFh
.eh_frame:000000000000C99F                 db 0FFh
.eh_frame:000000000000C9A0                 db  3Eh ; >
.eh_frame:000000000000C9A1                 db    0
.eh_frame:000000000000C9A2                 db    0
.eh_frame:000000000000C9A3                 db    0
.eh_frame:000000000000C9A4                 db    0
.eh_frame:000000000000C9A5                 db  79h ; y
.eh_frame:000000000000C9A6                 db  0Eh
.eh_frame:000000000000C9A7                 db  10h
.eh_frame:000000000000C9A8                 db  1Ch
.eh_frame:000000000000C9A9                 db    0
.eh_frame:000000000000C9AA                 db    0
.eh_frame:000000000000C9AB                 db    0
.eh_frame:000000000000C9AC                 db  8Ch
.eh_frame:000000000000C9AD                 db  14h
.eh_frame:000000000000C9AE                 db    0
.eh_frame:000000000000C9AF                 db    0
.eh_frame:000000000000C9B0                 db  80h
.eh_frame:000000000000C9B1                 db 0CCh
.eh_frame:000000000000C9B2                 db 0FFh
.eh_frame:000000000000C9B3                 db 0FFh
.eh_frame:000000000000C9B4                 db  3Ch ; <
.eh_frame:000000000000C9B5                 db    0
.eh_frame:000000000000C9B6                 db    0
.eh_frame:000000000000C9B7                 db    0
.eh_frame:000000000000C9B8                 db    0
.eh_frame:000000000000C9B9                 db  44h ; D
.eh_frame:000000000000C9BA                 db  0Eh
.eh_frame:000000000000C9BB                 db  10h
.eh_frame:000000000000C9BC                 db  61h ; a
.eh_frame:000000000000C9BD                 db  0Ah
.eh_frame:000000000000C9BE                 db  0Eh
.eh_frame:000000000000C9BF                 db    8
.eh_frame:000000000000C9C0                 db  4Bh ; K
.eh_frame:000000000000C9C1                 db  0Bh
.eh_frame:000000000000C9C2                 db  4Bh ; K
.eh_frame:000000000000C9C3                 db  0Eh
.eh_frame:000000000000C9C4                 db    8
.eh_frame:000000000000C9C5                 db    0
.eh_frame:000000000000C9C6                 db    0
.eh_frame:000000000000C9C7                 db    0
.eh_frame:000000000000C9C8                 db  1Ch
.eh_frame:000000000000C9C9                 db    0
.eh_frame:000000000000C9CA                 db    0
.eh_frame:000000000000C9CB                 db    0
.eh_frame:000000000000C9CC                 db 0ACh
.eh_frame:000000000000C9CD                 db  14h
.eh_frame:000000000000C9CE                 db    0
.eh_frame:000000000000C9CF                 db    0
.eh_frame:000000000000C9D0                 db 0A0h
.eh_frame:000000000000C9D1                 db 0CCh
.eh_frame:000000000000C9D2                 db 0FFh
.eh_frame:000000000000C9D3                 db 0FFh
.eh_frame:000000000000C9D4                 db  6Eh ; n
.eh_frame:000000000000C9D5                 db    0
.eh_frame:000000000000C9D6                 db    0
.eh_frame:000000000000C9D7                 db    0
.eh_frame:000000000000C9D8                 db    0
.eh_frame:000000000000C9D9                 db  44h ; D
.eh_frame:000000000000C9DA                 db  0Eh
.eh_frame:000000000000C9DB                 db  60h ; `
.eh_frame:000000000000C9DC                 db  7Eh ; ~
.eh_frame:000000000000C9DD                 db  0Ah
.eh_frame:000000000000C9DE                 db  0Eh
.eh_frame:000000000000C9DF                 db    8
.eh_frame:000000000000C9E0                 db  46h ; F
.eh_frame:000000000000C9E1                 db  0Bh
.eh_frame:000000000000C9E2                 db    0
.eh_frame:000000000000C9E3                 db    0
.eh_frame:000000000000C9E4                 db    0
.eh_frame:000000000000C9E5                 db    0
.eh_frame:000000000000C9E6                 db    0
.eh_frame:000000000000C9E7                 db    0
.eh_frame:000000000000C9E8                 db  5Ch ; \
.eh_frame:000000000000C9E9                 db    0
.eh_frame:000000000000C9EA                 db    0
.eh_frame:000000000000C9EB                 db    0
.eh_frame:000000000000C9EC                 db 0CCh
.eh_frame:000000000000C9ED                 db  14h
.eh_frame:000000000000C9EE                 db    0
.eh_frame:000000000000C9EF                 db    0
.eh_frame:000000000000C9F0                 db 0F0h
.eh_frame:000000000000C9F1                 db 0CCh
.eh_frame:000000000000C9F2                 db 0FFh
.eh_frame:000000000000C9F3                 db 0FFh
.eh_frame:000000000000C9F4                 db  80h
.eh_frame:000000000000C9F5                 db    0
.eh_frame:000000000000C9F6                 db    0
.eh_frame:000000000000C9F7                 db    0
.eh_frame:000000000000C9F8                 db    0
.eh_frame:000000000000C9F9                 db  42h ; B
.eh_frame:000000000000C9FA                 db  0Eh
.eh_frame:000000000000C9FB                 db  10h
.eh_frame:000000000000C9FC                 db  8Dh
.eh_frame:000000000000C9FD                 db    2
.eh_frame:000000000000C9FE                 db  42h ; B
.eh_frame:000000000000C9FF                 db  0Eh
.eh_frame:000000000000CA00                 db  18h
.eh_frame:000000000000CA01                 db  8Ch
.eh_frame:000000000000CA02                 db    3
.eh_frame:000000000000CA03                 db  47h ; G
.eh_frame:000000000000CA04                 db  0Eh
.eh_frame:000000000000CA05                 db  20h
.eh_frame:000000000000CA06                 db  86h
.eh_frame:000000000000CA07                 db    4
.eh_frame:000000000000CA08                 db  41h ; A
.eh_frame:000000000000CA09                 db  0Eh
.eh_frame:000000000000CA0A                 db  28h ; (
.eh_frame:000000000000CA0B                 db  83h
.eh_frame:000000000000CA0C                 db    5
.eh_frame:000000000000CA0D                 db  49h ; I
.eh_frame:000000000000CA0E                 db  0Eh
.eh_frame:000000000000CA0F                 db  30h ; 0
.eh_frame:000000000000CA10                 db  62h ; b
.eh_frame:000000000000CA11                 db  0Ah
.eh_frame:000000000000CA12                 db  0Eh
.eh_frame:000000000000CA13                 db  28h ; (
.eh_frame:000000000000CA14                 db  44h ; D
.eh_frame:000000000000CA15                 db  0Eh
.eh_frame:000000000000CA16                 db  20h
.eh_frame:000000000000CA17                 db  41h ; A
.eh_frame:000000000000CA18                 db  0Eh
.eh_frame:000000000000CA19                 db  18h
.eh_frame:000000000000CA1A                 db  42h ; B
.eh_frame:000000000000CA1B                 db  0Eh
.eh_frame:000000000000CA1C                 db  10h
.eh_frame:000000000000CA1D                 db  42h ; B
.eh_frame:000000000000CA1E                 db  0Eh
.eh_frame:000000000000CA1F                 db    8
.eh_frame:000000000000CA20                 db  48h ; H
.eh_frame:000000000000CA21                 db  0Bh
.eh_frame:000000000000CA22                 db  5Dh ; ]
.eh_frame:000000000000CA23                 db  0Ah
.eh_frame:000000000000CA24                 db  0Eh
.eh_frame:000000000000CA25                 db  28h ; (
.eh_frame:000000000000CA26                 db  41h ; A
.eh_frame:000000000000CA27                 db  0Eh
.eh_frame:000000000000CA28                 db  20h
.eh_frame:000000000000CA29                 db  41h ; A
.eh_frame:000000000000CA2A                 db  0Eh
.eh_frame:000000000000CA2B                 db  18h
.eh_frame:000000000000CA2C                 db  42h ; B
.eh_frame:000000000000CA2D                 db  0Eh
.eh_frame:000000000000CA2E                 db  10h
.eh_frame:000000000000CA2F                 db  42h ; B
.eh_frame:000000000000CA30                 db  0Eh
.eh_frame:000000000000CA31                 db    8
.eh_frame:000000000000CA32                 db  45h ; E
.eh_frame:000000000000CA33                 db  0Bh
.eh_frame:000000000000CA34                 db  44h ; D
.eh_frame:000000000000CA35                 db  0Eh
.eh_frame:000000000000CA36                 db  28h ; (
.eh_frame:000000000000CA37                 db  43h ; C
.eh_frame:000000000000CA38                 db  0Eh
.eh_frame:000000000000CA39                 db  20h
.eh_frame:000000000000CA3A                 db  44h ; D
.eh_frame:000000000000CA3B                 db  0Eh
.eh_frame:000000000000CA3C                 db  18h
.eh_frame:000000000000CA3D                 db  42h ; B
.eh_frame:000000000000CA3E                 db  0Eh
.eh_frame:000000000000CA3F                 db  10h
.eh_frame:000000000000CA40                 db  42h ; B
.eh_frame:000000000000CA41                 db  0Eh
.eh_frame:000000000000CA42                 db    8
.eh_frame:000000000000CA43                 db    0
.eh_frame:000000000000CA44                 db    0
.eh_frame:000000000000CA45                 db    0
.eh_frame:000000000000CA46                 db    0
.eh_frame:000000000000CA47                 db    0
.eh_frame:000000000000CA48                 db  34h ; 4
.eh_frame:000000000000CA49                 db    0
.eh_frame:000000000000CA4A                 db    0
.eh_frame:000000000000CA4B                 db    0
.eh_frame:000000000000CA4C                 db  2Ch ; ,
.eh_frame:000000000000CA4D                 db  15h
.eh_frame:000000000000CA4E                 db    0
.eh_frame:000000000000CA4F                 db    0
.eh_frame:000000000000CA50                 db  10h
.eh_frame:000000000000CA51                 db 0CDh
.eh_frame:000000000000CA52                 db 0FFh
.eh_frame:000000000000CA53                 db 0FFh
.eh_frame:000000000000CA54                 db  3Fh ; ?
.eh_frame:000000000000CA55                 db    0
.eh_frame:000000000000CA56                 db    0
.eh_frame:000000000000CA57                 db    0
.eh_frame:000000000000CA58                 db    0
.eh_frame:000000000000CA59                 db  42h ; B
.eh_frame:000000000000CA5A                 db  0Eh
.eh_frame:000000000000CA5B                 db  10h
.eh_frame:000000000000CA5C                 db  8Dh
.eh_frame:000000000000CA5D                 db    2
.eh_frame:000000000000CA5E                 db  42h ; B
.eh_frame:000000000000CA5F                 db  0Eh
.eh_frame:000000000000CA60                 db  18h
.eh_frame:000000000000CA61                 db  8Ch
.eh_frame:000000000000CA62                 db    3
.eh_frame:000000000000CA63                 db  41h ; A
.eh_frame:000000000000CA64                 db  0Eh
.eh_frame:000000000000CA65                 db  20h
.eh_frame:000000000000CA66                 db  86h
.eh_frame:000000000000CA67                 db    4
.eh_frame:000000000000CA68                 db  41h ; A
.eh_frame:000000000000CA69                 db  0Eh
.eh_frame:000000000000CA6A                 db  28h ; (
.eh_frame:000000000000CA6B                 db  83h
.eh_frame:000000000000CA6C                 db    5
.eh_frame:000000000000CA6D                 db  46h ; F
.eh_frame:000000000000CA6E                 db  0Eh
.eh_frame:000000000000CA6F                 db  30h ; 0
.eh_frame:000000000000CA70                 db  6Ah ; j
.eh_frame:000000000000CA71                 db  0Eh
.eh_frame:000000000000CA72                 db  28h ; (
.eh_frame:000000000000CA73                 db  43h ; C
.eh_frame:000000000000CA74                 db  0Eh
.eh_frame:000000000000CA75                 db  20h
.eh_frame:000000000000CA76                 db  41h ; A
.eh_frame:000000000000CA77                 db  0Eh
.eh_frame:000000000000CA78                 db  18h
.eh_frame:000000000000CA79                 db  42h ; B
.eh_frame:000000000000CA7A                 db  0Eh
.eh_frame:000000000000CA7B                 db  10h
.eh_frame:000000000000CA7C                 db  42h ; B
.eh_frame:000000000000CA7D                 db  0Eh
.eh_frame:000000000000CA7E                 db    8
.eh_frame:000000000000CA7F                 db    0
.eh_frame:000000000000CA80                 db  34h ; 4
.eh_frame:000000000000CA81                 db    0
.eh_frame:000000000000CA82                 db    0
.eh_frame:000000000000CA83                 db    0
.eh_frame:000000000000CA84                 db  64h ; d
.eh_frame:000000000000CA85                 db  15h
.eh_frame:000000000000CA86                 db    0
.eh_frame:000000000000CA87                 db    0
.eh_frame:000000000000CA88                 db  18h
.eh_frame:000000000000CA89                 db 0CDh
.eh_frame:000000000000CA8A                 db 0FFh
.eh_frame:000000000000CA8B                 db 0FFh
.eh_frame:000000000000CA8C                 db  7Bh ; {
.eh_frame:000000000000CA8D                 db    0
.eh_frame:000000000000CA8E                 db    0
.eh_frame:000000000000CA8F                 db    0
.eh_frame:000000000000CA90                 db    0
.eh_frame:000000000000CA91                 db  42h ; B
.eh_frame:000000000000CA92                 db  0Eh
.eh_frame:000000000000CA93                 db  10h
.eh_frame:000000000000CA94                 db  8Ch
.eh_frame:000000000000CA95                 db    2
.eh_frame:000000000000CA96                 db  41h ; A
.eh_frame:000000000000CA97                 db  0Eh
.eh_frame:000000000000CA98                 db  18h
.eh_frame:000000000000CA99                 db  86h
.eh_frame:000000000000CA9A                 db    3
.eh_frame:000000000000CA9B                 db  41h ; A
.eh_frame:000000000000CA9C                 db  0Eh
.eh_frame:000000000000CA9D                 db  20h
.eh_frame:000000000000CA9E                 db  83h
.eh_frame:000000000000CA9F                 db    4
.eh_frame:000000000000CAA0                 db  7Dh ; }
.eh_frame:000000000000CAA1                 db  0Ah
.eh_frame:000000000000CAA2                 db  0Eh
.eh_frame:000000000000CAA3                 db  18h
.eh_frame:000000000000CAA4                 db  41h ; A
.eh_frame:000000000000CAA5                 db  0Eh
.eh_frame:000000000000CAA6                 db  10h
.eh_frame:000000000000CAA7                 db  42h ; B
.eh_frame:000000000000CAA8                 db  0Eh
.eh_frame:000000000000CAA9                 db    8
.eh_frame:000000000000CAAA                 db  44h ; D
.eh_frame:000000000000CAAB                 db  0Bh
.eh_frame:000000000000CAAC                 db  60h ; `
.eh_frame:000000000000CAAD                 db  0Ah
.eh_frame:000000000000CAAE                 db  0Eh
.eh_frame:000000000000CAAF                 db  18h
.eh_frame:000000000000CAB0                 db  41h ; A
.eh_frame:000000000000CAB1                 db  0Eh
.eh_frame:000000000000CAB2                 db  10h
.eh_frame:000000000000CAB3                 db  42h ; B
.eh_frame:000000000000CAB4                 db  0Eh
.eh_frame:000000000000CAB5                 db    8
.eh_frame:000000000000CAB6                 db  45h ; E
.eh_frame:000000000000CAB7                 db  0Bh
.eh_frame:000000000000CAB8                 db  34h ; 4
.eh_frame:000000000000CAB9                 db    0
.eh_frame:000000000000CABA                 db    0
.eh_frame:000000000000CABB                 db    0
.eh_frame:000000000000CABC                 db  9Ch
.eh_frame:000000000000CABD                 db  15h
.eh_frame:000000000000CABE                 db    0
.eh_frame:000000000000CABF                 db    0
.eh_frame:000000000000CAC0                 db  60h ; `
.eh_frame:000000000000CAC1                 db 0CDh
.eh_frame:000000000000CAC2                 db 0FFh
.eh_frame:000000000000CAC3                 db 0FFh
.eh_frame:000000000000CAC4                 db  7Eh ; ~
.eh_frame:000000000000CAC5                 db    2
.eh_frame:000000000000CAC6                 db    0
.eh_frame:000000000000CAC7                 db    0
.eh_frame:000000000000CAC8                 db    0
.eh_frame:000000000000CAC9                 db  42h ; B
.eh_frame:000000000000CACA                 db  0Eh
.eh_frame:000000000000CACB                 db  10h
.eh_frame:000000000000CACC                 db  8Ch
.eh_frame:000000000000CACD                 db    2
.eh_frame:000000000000CACE                 db  41h ; A
.eh_frame:000000000000CACF                 db  0Eh
.eh_frame:000000000000CAD0                 db  18h
.eh_frame:000000000000CAD1                 db  86h
.eh_frame:000000000000CAD2                 db    3
.eh_frame:000000000000CAD3                 db  43h ; C
.eh_frame:000000000000CAD4                 db  0Eh
.eh_frame:000000000000CAD5                 db  20h
.eh_frame:000000000000CAD6                 db  83h
.eh_frame:000000000000CAD7                 db    4
.eh_frame:000000000000CAD8                 db  44h ; D
.eh_frame:000000000000CAD9                 db  0Eh
.eh_frame:000000000000CADA                 db  70h ; p
.eh_frame:000000000000CADB                 db    2
.eh_frame:000000000000CADC                 db 0F0h
.eh_frame:000000000000CADD                 db  0Ah
.eh_frame:000000000000CADE                 db  0Eh
.eh_frame:000000000000CADF                 db  20h
.eh_frame:000000000000CAE0                 db  41h ; A
.eh_frame:000000000000CAE1                 db  0Eh
.eh_frame:000000000000CAE2                 db  18h
.eh_frame:000000000000CAE3                 db  41h ; A
.eh_frame:000000000000CAE4                 db  0Eh
.eh_frame:000000000000CAE5                 db  10h
.eh_frame:000000000000CAE6                 db  42h ; B
.eh_frame:000000000000CAE7                 db  0Eh
.eh_frame:000000000000CAE8                 db    8
.eh_frame:000000000000CAE9                 db  42h ; B
.eh_frame:000000000000CAEA                 db  0Bh
.eh_frame:000000000000CAEB                 db    0
.eh_frame:000000000000CAEC                 db    0
.eh_frame:000000000000CAED                 db    0
.eh_frame:000000000000CAEE                 db    0
.eh_frame:000000000000CAEF                 db    0
.eh_frame:000000000000CAF0                 db  1Ch
.eh_frame:000000000000CAF1                 db    0
.eh_frame:000000000000CAF2                 db    0
.eh_frame:000000000000CAF3                 db    0
.eh_frame:000000000000CAF4                 db 0D4h
.eh_frame:000000000000CAF5                 db  15h
.eh_frame:000000000000CAF6                 db    0
.eh_frame:000000000000CAF7                 db    0
.eh_frame:000000000000CAF8                 db 0A8h
.eh_frame:000000000000CAF9                 db 0CFh
.eh_frame:000000000000CAFA                 db 0FFh
.eh_frame:000000000000CAFB                 db 0FFh
.eh_frame:000000000000CAFC                 db  40h ; @
.eh_frame:000000000000CAFD                 db    0
.eh_frame:000000000000CAFE                 db    0
.eh_frame:000000000000CAFF                 db    0
.eh_frame:000000000000CB00                 db    0
.eh_frame:000000000000CB01                 db  44h ; D
.eh_frame:000000000000CB02                 db  0Eh
.eh_frame:000000000000CB03                 db  10h
.eh_frame:000000000000CB04                 db  83h
.eh_frame:000000000000CB05                 db    2
.eh_frame:000000000000CB06                 db  5Ah ; Z
.eh_frame:000000000000CB07                 db  0Ah
.eh_frame:000000000000CB08                 db  0Eh
.eh_frame:000000000000CB09                 db    8
.eh_frame:000000000000CB0A                 db  4Ah ; J
.eh_frame:000000000000CB0B                 db  0Bh
.eh_frame:000000000000CB0C                 db  53h ; S
.eh_frame:000000000000CB0D                 db  0Eh
.eh_frame:000000000000CB0E                 db    8
.eh_frame:000000000000CB0F                 db    0
.eh_frame:000000000000CB10                 db  2Ch ; ,
.eh_frame:000000000000CB11                 db    0
.eh_frame:000000000000CB12                 db    0
.eh_frame:000000000000CB13                 db    0
.eh_frame:000000000000CB14                 db 0F4h
.eh_frame:000000000000CB15                 db  15h
.eh_frame:000000000000CB16                 db    0
.eh_frame:000000000000CB17                 db    0
.eh_frame:000000000000CB18                 db 0C8h
.eh_frame:000000000000CB19                 db 0CFh
.eh_frame:000000000000CB1A                 db 0FFh
.eh_frame:000000000000CB1B                 db 0FFh
.eh_frame:000000000000CB1C                 db  57h ; W
.eh_frame:000000000000CB1D                 db    0
.eh_frame:000000000000CB1E                 db    0
.eh_frame:000000000000CB1F                 db    0
.eh_frame:000000000000CB20                 db    0
.eh_frame:000000000000CB21                 db  63h ; c
.eh_frame:000000000000CB22                 db  0Eh
.eh_frame:000000000000CB23                 db  10h
.eh_frame:000000000000CB24                 db  8Ch
.eh_frame:000000000000CB25                 db    2
.eh_frame:000000000000CB26                 db  41h ; A
.eh_frame:000000000000CB27                 db  0Eh
.eh_frame:000000000000CB28                 db  18h
.eh_frame:000000000000CB29                 db  86h
.eh_frame:000000000000CB2A                 db    3
.eh_frame:000000000000CB2B                 db  44h ; D
.eh_frame:000000000000CB2C                 db  0Eh
.eh_frame:000000000000CB2D                 db  20h
.eh_frame:000000000000CB2E                 db  83h
.eh_frame:000000000000CB2F                 db    4
.eh_frame:000000000000CB30                 db  6Bh ; k
.eh_frame:000000000000CB31                 db  0Eh
.eh_frame:000000000000CB32                 db  18h
.eh_frame:000000000000CB33                 db  41h ; A
.eh_frame:000000000000CB34                 db  0Eh
.eh_frame:000000000000CB35                 db  10h
.eh_frame:000000000000CB36                 db  42h ; B
.eh_frame:000000000000CB37                 db  0Eh
.eh_frame:000000000000CB38                 db    8
.eh_frame:000000000000CB39                 db    0
.eh_frame:000000000000CB3A                 db    0
.eh_frame:000000000000CB3B                 db    0
.eh_frame:000000000000CB3C                 db    0
.eh_frame:000000000000CB3D                 db    0
.eh_frame:000000000000CB3E                 db    0
.eh_frame:000000000000CB3F                 db    0
.eh_frame:000000000000CB40                 db  14h
.eh_frame:000000000000CB41                 db    0
.eh_frame:000000000000CB42                 db    0
.eh_frame:000000000000CB43                 db    0
.eh_frame:000000000000CB44                 db  24h ; $
.eh_frame:000000000000CB45                 db  16h
.eh_frame:000000000000CB46                 db    0
.eh_frame:000000000000CB47                 db    0
.eh_frame:000000000000CB48                 db 0F8h
.eh_frame:000000000000CB49                 db 0CFh
.eh_frame:000000000000CB4A                 db 0FFh
.eh_frame:000000000000CB4B                 db 0FFh
.eh_frame:000000000000CB4C                 db  0Eh
.eh_frame:000000000000CB4D                 db    0
.eh_frame:000000000000CB4E                 db    0
.eh_frame:000000000000CB4F                 db    0
.eh_frame:000000000000CB50                 db    0
.eh_frame:000000000000CB51                 db    0
.eh_frame:000000000000CB52                 db    0
.eh_frame:000000000000CB53                 db    0
.eh_frame:000000000000CB54                 db    0
.eh_frame:000000000000CB55                 db    0
.eh_frame:000000000000CB56                 db    0
.eh_frame:000000000000CB57                 db    0
.eh_frame:000000000000CB58                 db  44h ; D
.eh_frame:000000000000CB59                 db    0
.eh_frame:000000000000CB5A                 db    0
.eh_frame:000000000000CB5B                 db    0
.eh_frame:000000000000CB5C                 db  3Ch ; <
.eh_frame:000000000000CB5D                 db  16h
.eh_frame:000000000000CB5E                 db    0
.eh_frame:000000000000CB5F                 db    0
.eh_frame:000000000000CB60                 db 0F0h
.eh_frame:000000000000CB61                 db 0CFh
.eh_frame:000000000000CB62                 db 0FFh
.eh_frame:000000000000CB63                 db 0FFh
.eh_frame:000000000000CB64                 db  65h ; e
.eh_frame:000000000000CB65                 db    0
.eh_frame:000000000000CB66                 db    0
.eh_frame:000000000000CB67                 db    0
.eh_frame:000000000000CB68                 db    0
.eh_frame:000000000000CB69                 db  42h ; B
.eh_frame:000000000000CB6A                 db  0Eh
.eh_frame:000000000000CB6B                 db  10h
.eh_frame:000000000000CB6C                 db  8Fh
.eh_frame:000000000000CB6D                 db    2
.eh_frame:000000000000CB6E                 db  42h ; B
.eh_frame:000000000000CB6F                 db  0Eh
.eh_frame:000000000000CB70                 db  18h
.eh_frame:000000000000CB71                 db  8Eh
.eh_frame:000000000000CB72                 db    3
.eh_frame:000000000000CB73                 db  45h ; E
.eh_frame:000000000000CB74                 db  0Eh
.eh_frame:000000000000CB75                 db  20h
.eh_frame:000000000000CB76                 db  8Dh
.eh_frame:000000000000CB77                 db    4
.eh_frame:000000000000CB78                 db  42h ; B
.eh_frame:000000000000CB79                 db  0Eh
.eh_frame:000000000000CB7A                 db  28h ; (
.eh_frame:000000000000CB7B                 db  8Ch
.eh_frame:000000000000CB7C                 db    5
.eh_frame:000000000000CB7D                 db  48h ; H
.eh_frame:000000000000CB7E                 db  0Eh
.eh_frame:000000000000CB7F                 db  30h ; 0
.eh_frame:000000000000CB80                 db  86h
.eh_frame:000000000000CB81                 db    6
.eh_frame:000000000000CB82                 db  48h ; H
.eh_frame:000000000000CB83                 db  0Eh
.eh_frame:000000000000CB84                 db  38h ; 8
.eh_frame:000000000000CB85                 db  83h
.eh_frame:000000000000CB86                 db    7
.eh_frame:000000000000CB87                 db  4Dh ; M
.eh_frame:000000000000CB88                 db  0Eh
.eh_frame:000000000000CB89                 db  40h ; @
.eh_frame:000000000000CB8A                 db  72h ; r
.eh_frame:000000000000CB8B                 db  0Eh
.eh_frame:000000000000CB8C                 db  38h ; 8
.eh_frame:000000000000CB8D                 db  41h ; A
.eh_frame:000000000000CB8E                 db  0Eh
.eh_frame:000000000000CB8F                 db  30h ; 0
.eh_frame:000000000000CB90                 db  41h ; A
.eh_frame:000000000000CB91                 db  0Eh
.eh_frame:000000000000CB92                 db  28h ; (
.eh_frame:000000000000CB93                 db  42h ; B
.eh_frame:000000000000CB94                 db  0Eh
.eh_frame:000000000000CB95                 db  20h
.eh_frame:000000000000CB96                 db  42h ; B
.eh_frame:000000000000CB97                 db  0Eh
.eh_frame:000000000000CB98                 db  18h
.eh_frame:000000000000CB99                 db  42h ; B
.eh_frame:000000000000CB9A                 db  0Eh
.eh_frame:000000000000CB9B                 db  10h
.eh_frame:000000000000CB9C                 db  42h ; B
.eh_frame:000000000000CB9D                 db  0Eh
.eh_frame:000000000000CB9E                 db    8
.eh_frame:000000000000CB9F                 db    0
.eh_frame:000000000000CBA0                 db  14h
.eh_frame:000000000000CBA1                 db    0
.eh_frame:000000000000CBA2                 db    0
.eh_frame:000000000000CBA3                 db    0
.eh_frame:000000000000CBA4                 db  84h
.eh_frame:000000000000CBA5                 db  16h
.eh_frame:000000000000CBA6                 db    0
.eh_frame:000000000000CBA7                 db    0
.eh_frame:000000000000CBA8                 db  18h
.eh_frame:000000000000CBA9                 db 0D0h
.eh_frame:000000000000CBAA                 db 0FFh
.eh_frame:000000000000CBAB                 db 0FFh
.eh_frame:000000000000CBAC                 db    2
.eh_frame:000000000000CBAD                 db    0
.eh_frame:000000000000CBAE                 db    0
.eh_frame:000000000000CBAF                 db    0
.eh_frame:000000000000CBB0                 db    0
.eh_frame:000000000000CBB1                 db    0
.eh_frame:000000000000CBB2                 db    0
.eh_frame:000000000000CBB3                 db    0
.eh_frame:000000000000CBB4                 db    0
.eh_frame:000000000000CBB5                 db    0
.eh_frame:000000000000CBB6                 db    0
.eh_frame:000000000000CBB7                 db    0
.eh_frame:000000000000CBB8                 db  10h
.eh_frame:000000000000CBB9                 db    0
.eh_frame:000000000000CBBA                 db    0
.eh_frame:000000000000CBBB                 db    0
.eh_frame:000000000000CBBC                 db  9Ch
.eh_frame:000000000000CBBD                 db  16h
.eh_frame:000000000000CBBE                 db    0
.eh_frame:000000000000CBBF                 db    0
.eh_frame:000000000000CBC0                 db  10h
.eh_frame:000000000000CBC1                 db 0D0h
.eh_frame:000000000000CBC2                 db 0FFh
.eh_frame:000000000000CBC3                 db 0FFh
.eh_frame:000000000000CBC4                 db  0Eh
.eh_frame:000000000000CBC5                 db    0
.eh_frame:000000000000CBC6                 db    0
.eh_frame:000000000000CBC7                 db    0
.eh_frame:000000000000CBC8                 db    0
.eh_frame:000000000000CBC9                 db    0
.eh_frame:000000000000CBCA                 db    0
.eh_frame:000000000000CBCB                 db    0
.eh_frame:000000000000CBCC __FRAME_END__   db    0
.eh_frame:000000000000CBCD                 db    0
.eh_frame:000000000000CBCE                 db    0
.eh_frame:000000000000CBCF                 db    0
.eh_frame:000000000000CBCF _eh_frame       ends
.eh_frame:000000000000CBCF
.init_array:000000000020DA30 ; ELF Initialization Function Table
.init_array:000000000020DA30 ; ===========================================================================
.init_array:000000000020DA30
.init_array:000000000020DA30 ; Segment type: Pure data
.init_array:000000000020DA30 ; Segment permissions: Read/Write
.init_array:000000000020DA30 _init_array     segment qword public 'DATA' use64
.init_array:000000000020DA30                 assume cs:_init_array
.init_array:000000000020DA30                 ;org 20DA30h
.init_array:000000000020DA30 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020DA30                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020DA30                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020DA30 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020DA30
.fini_array:000000000020DA38 ; ELF Termination Function Table
.fini_array:000000000020DA38 ; ===========================================================================
.fini_array:000000000020DA38
.fini_array:000000000020DA38 ; Segment type: Pure data
.fini_array:000000000020DA38 ; Segment permissions: Read/Write
.fini_array:000000000020DA38 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020DA38                 assume cs:_fini_array
.fini_array:000000000020DA38                 ;org 20DA38h
.fini_array:000000000020DA38 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020DA38                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020DA38 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020DA38
.data.rel.ro:000000000020DA40 ; ===========================================================================
.data.rel.ro:000000000020DA40
.data.rel.ro:000000000020DA40 ; Segment type: Pure data
.data.rel.ro:000000000020DA40 ; Segment permissions: Read/Write
.data.rel.ro:000000000020DA40 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020DA40                 assume cs:_data_rel_ro
.data.rel.ro:000000000020DA40                 ;org 20DA40h
.data.rel.ro:000000000020DA40 ; struct option long_options
.data.rel.ro:000000000020DA40 long_options    dq offset aChanges      ; name
.data.rel.ro:000000000020DA40                                         ; DATA XREF: main:loc_1B48↑o
.data.rel.ro:000000000020DA40                 dd 0                    ; has_arg ; "changes"
.data.rel.ro:000000000020DA40                 db 4 dup(0)
.data.rel.ro:000000000020DA40                 dq 0                    ; flag
.data.rel.ro:000000000020DA40                 dd 63h                  ; val
.data.rel.ro:000000000020DA40                 db 4 dup(0)
.data.rel.ro:000000000020DA60                 dq offset aRecursive    ; "recursive"
.data.rel.ro:000000000020DA68                 db    0
.data.rel.ro:000000000020DA69                 db    0
.data.rel.ro:000000000020DA6A                 db    0
.data.rel.ro:000000000020DA6B                 db    0
.data.rel.ro:000000000020DA6C                 db    0
.data.rel.ro:000000000020DA6D                 db    0
.data.rel.ro:000000000020DA6E                 db    0
.data.rel.ro:000000000020DA6F                 db    0
.data.rel.ro:000000000020DA70                 db    0
.data.rel.ro:000000000020DA71                 db    0
.data.rel.ro:000000000020DA72                 db    0
.data.rel.ro:000000000020DA73                 db    0
.data.rel.ro:000000000020DA74                 db    0
.data.rel.ro:000000000020DA75                 db    0
.data.rel.ro:000000000020DA76                 db    0
.data.rel.ro:000000000020DA77                 db    0
.data.rel.ro:000000000020DA78                 db  52h ; R
.data.rel.ro:000000000020DA79                 db    0
.data.rel.ro:000000000020DA7A                 db    0
.data.rel.ro:000000000020DA7B                 db    0
.data.rel.ro:000000000020DA7C                 db    0
.data.rel.ro:000000000020DA7D                 db    0
.data.rel.ro:000000000020DA7E                 db    0
.data.rel.ro:000000000020DA7F                 db    0
.data.rel.ro:000000000020DA80                 dq offset aNoPreserveRoot_0 ; "no-preserve-root"
.data.rel.ro:000000000020DA88                 db    0
.data.rel.ro:000000000020DA89                 db    0
.data.rel.ro:000000000020DA8A                 db    0
.data.rel.ro:000000000020DA8B                 db    0
.data.rel.ro:000000000020DA8C                 db    0
.data.rel.ro:000000000020DA8D                 db    0
.data.rel.ro:000000000020DA8E                 db    0
.data.rel.ro:000000000020DA8F                 db    0
.data.rel.ro:000000000020DA90                 db    0
.data.rel.ro:000000000020DA91                 db    0
.data.rel.ro:000000000020DA92                 db    0
.data.rel.ro:000000000020DA93                 db    0
.data.rel.ro:000000000020DA94                 db    0
.data.rel.ro:000000000020DA95                 db    0
.data.rel.ro:000000000020DA96                 db    0
.data.rel.ro:000000000020DA97                 db    0
.data.rel.ro:000000000020DA98                 db  80h
.data.rel.ro:000000000020DA99                 db    0
.data.rel.ro:000000000020DA9A                 db    0
.data.rel.ro:000000000020DA9B                 db    0
.data.rel.ro:000000000020DA9C                 db    0
.data.rel.ro:000000000020DA9D                 db    0
.data.rel.ro:000000000020DA9E                 db    0
.data.rel.ro:000000000020DA9F                 db    0
.data.rel.ro:000000000020DAA0                 dq offset aNoPreserveRoot_0+3 ; "preserve-root"
.data.rel.ro:000000000020DAA8                 db    0
.data.rel.ro:000000000020DAA9                 db    0
.data.rel.ro:000000000020DAAA                 db    0
.data.rel.ro:000000000020DAAB                 db    0
.data.rel.ro:000000000020DAAC                 db    0
.data.rel.ro:000000000020DAAD                 db    0
.data.rel.ro:000000000020DAAE                 db    0
.data.rel.ro:000000000020DAAF                 db    0
.data.rel.ro:000000000020DAB0                 db    0
.data.rel.ro:000000000020DAB1                 db    0
.data.rel.ro:000000000020DAB2                 db    0
.data.rel.ro:000000000020DAB3                 db    0
.data.rel.ro:000000000020DAB4                 db    0
.data.rel.ro:000000000020DAB5                 db    0
.data.rel.ro:000000000020DAB6                 db    0
.data.rel.ro:000000000020DAB7                 db    0
.data.rel.ro:000000000020DAB8                 db  81h
.data.rel.ro:000000000020DAB9                 db    0
.data.rel.ro:000000000020DABA                 db    0
.data.rel.ro:000000000020DABB                 db    0
.data.rel.ro:000000000020DABC                 db    0
.data.rel.ro:000000000020DABD                 db    0
.data.rel.ro:000000000020DABE                 db    0
.data.rel.ro:000000000020DABF                 db    0
.data.rel.ro:000000000020DAC0                 dq offset aQuiet        ; "quiet"
.data.rel.ro:000000000020DAC8                 db    0
.data.rel.ro:000000000020DAC9                 db    0
.data.rel.ro:000000000020DACA                 db    0
.data.rel.ro:000000000020DACB                 db    0
.data.rel.ro:000000000020DACC                 db    0
.data.rel.ro:000000000020DACD                 db    0
.data.rel.ro:000000000020DACE                 db    0
.data.rel.ro:000000000020DACF                 db    0
.data.rel.ro:000000000020DAD0                 db    0
.data.rel.ro:000000000020DAD1                 db    0
.data.rel.ro:000000000020DAD2                 db    0
.data.rel.ro:000000000020DAD3                 db    0
.data.rel.ro:000000000020DAD4                 db    0
.data.rel.ro:000000000020DAD5                 db    0
.data.rel.ro:000000000020DAD6                 db    0
.data.rel.ro:000000000020DAD7                 db    0
.data.rel.ro:000000000020DAD8                 db  66h ; f
.data.rel.ro:000000000020DAD9                 db    0
.data.rel.ro:000000000020DADA                 db    0
.data.rel.ro:000000000020DADB                 db    0
.data.rel.ro:000000000020DADC                 db    0
.data.rel.ro:000000000020DADD                 db    0
.data.rel.ro:000000000020DADE                 db    0
.data.rel.ro:000000000020DADF                 db    0
.data.rel.ro:000000000020DAE0                 dq offset aReference    ; "reference"
.data.rel.ro:000000000020DAE8                 db    1
.data.rel.ro:000000000020DAE9                 db    0
.data.rel.ro:000000000020DAEA                 db    0
.data.rel.ro:000000000020DAEB                 db    0
.data.rel.ro:000000000020DAEC                 db    0
.data.rel.ro:000000000020DAED                 db    0
.data.rel.ro:000000000020DAEE                 db    0
.data.rel.ro:000000000020DAEF                 db    0
.data.rel.ro:000000000020DAF0                 db    0
.data.rel.ro:000000000020DAF1                 db    0
.data.rel.ro:000000000020DAF2                 db    0
.data.rel.ro:000000000020DAF3                 db    0
.data.rel.ro:000000000020DAF4                 db    0
.data.rel.ro:000000000020DAF5                 db    0
.data.rel.ro:000000000020DAF6                 db    0
.data.rel.ro:000000000020DAF7                 db    0
.data.rel.ro:000000000020DAF8                 db  82h
.data.rel.ro:000000000020DAF9                 db    0
.data.rel.ro:000000000020DAFA                 db    0
.data.rel.ro:000000000020DAFB                 db    0
.data.rel.ro:000000000020DAFC                 db    0
.data.rel.ro:000000000020DAFD                 db    0
.data.rel.ro:000000000020DAFE                 db    0
.data.rel.ro:000000000020DAFF                 db    0
.data.rel.ro:000000000020DB00                 dq offset aSilent       ; "silent"
.data.rel.ro:000000000020DB08                 db    0
.data.rel.ro:000000000020DB09                 db    0
.data.rel.ro:000000000020DB0A                 db    0
.data.rel.ro:000000000020DB0B                 db    0
.data.rel.ro:000000000020DB0C                 db    0
.data.rel.ro:000000000020DB0D                 db    0
.data.rel.ro:000000000020DB0E                 db    0
.data.rel.ro:000000000020DB0F                 db    0
.data.rel.ro:000000000020DB10                 db    0
.data.rel.ro:000000000020DB11                 db    0
.data.rel.ro:000000000020DB12                 db    0
.data.rel.ro:000000000020DB13                 db    0
.data.rel.ro:000000000020DB14                 db    0
.data.rel.ro:000000000020DB15                 db    0
.data.rel.ro:000000000020DB16                 db    0
.data.rel.ro:000000000020DB17                 db    0
.data.rel.ro:000000000020DB18                 db  66h ; f
.data.rel.ro:000000000020DB19                 db    0
.data.rel.ro:000000000020DB1A                 db    0
.data.rel.ro:000000000020DB1B                 db    0
.data.rel.ro:000000000020DB1C                 db    0
.data.rel.ro:000000000020DB1D                 db    0
.data.rel.ro:000000000020DB1E                 db    0
.data.rel.ro:000000000020DB1F                 db    0
.data.rel.ro:000000000020DB20                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020DB28                 db    0
.data.rel.ro:000000000020DB29                 db    0
.data.rel.ro:000000000020DB2A                 db    0
.data.rel.ro:000000000020DB2B                 db    0
.data.rel.ro:000000000020DB2C                 db    0
.data.rel.ro:000000000020DB2D                 db    0
.data.rel.ro:000000000020DB2E                 db    0
.data.rel.ro:000000000020DB2F                 db    0
.data.rel.ro:000000000020DB30                 db    0
.data.rel.ro:000000000020DB31                 db    0
.data.rel.ro:000000000020DB32                 db    0
.data.rel.ro:000000000020DB33                 db    0
.data.rel.ro:000000000020DB34                 db    0
.data.rel.ro:000000000020DB35                 db    0
.data.rel.ro:000000000020DB36                 db    0
.data.rel.ro:000000000020DB37                 db    0
.data.rel.ro:000000000020DB38                 db  76h ; v
.data.rel.ro:000000000020DB39                 db    0
.data.rel.ro:000000000020DB3A                 db    0
.data.rel.ro:000000000020DB3B                 db    0
.data.rel.ro:000000000020DB3C                 db    0
.data.rel.ro:000000000020DB3D                 db    0
.data.rel.ro:000000000020DB3E                 db    0
.data.rel.ro:000000000020DB3F                 db    0
.data.rel.ro:000000000020DB40                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020DB48                 db    0
.data.rel.ro:000000000020DB49                 db    0
.data.rel.ro:000000000020DB4A                 db    0
.data.rel.ro:000000000020DB4B                 db    0
.data.rel.ro:000000000020DB4C                 db    0
.data.rel.ro:000000000020DB4D                 db    0
.data.rel.ro:000000000020DB4E                 db    0
.data.rel.ro:000000000020DB4F                 db    0
.data.rel.ro:000000000020DB50                 db    0
.data.rel.ro:000000000020DB51                 db    0
.data.rel.ro:000000000020DB52                 db    0
.data.rel.ro:000000000020DB53                 db    0
.data.rel.ro:000000000020DB54                 db    0
.data.rel.ro:000000000020DB55                 db    0
.data.rel.ro:000000000020DB56                 db    0
.data.rel.ro:000000000020DB57                 db    0
.data.rel.ro:000000000020DB58                 db  7Eh ; ~
.data.rel.ro:000000000020DB59                 db 0FFh
.data.rel.ro:000000000020DB5A                 db 0FFh
.data.rel.ro:000000000020DB5B                 db 0FFh
.data.rel.ro:000000000020DB5C                 db    0
.data.rel.ro:000000000020DB5D                 db    0
.data.rel.ro:000000000020DB5E                 db    0
.data.rel.ro:000000000020DB5F                 db    0
.data.rel.ro:000000000020DB60                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020DB68                 db    0
.data.rel.ro:000000000020DB69                 db    0
.data.rel.ro:000000000020DB6A                 db    0
.data.rel.ro:000000000020DB6B                 db    0
.data.rel.ro:000000000020DB6C                 db    0
.data.rel.ro:000000000020DB6D                 db    0
.data.rel.ro:000000000020DB6E                 db    0
.data.rel.ro:000000000020DB6F                 db    0
.data.rel.ro:000000000020DB70                 db    0
.data.rel.ro:000000000020DB71                 db    0
.data.rel.ro:000000000020DB72                 db    0
.data.rel.ro:000000000020DB73                 db    0
.data.rel.ro:000000000020DB74                 db    0
.data.rel.ro:000000000020DB75                 db    0
.data.rel.ro:000000000020DB76                 db    0
.data.rel.ro:000000000020DB77                 db    0
.data.rel.ro:000000000020DB78                 db  7Dh ; }
.data.rel.ro:000000000020DB79                 db 0FFh
.data.rel.ro:000000000020DB7A                 db 0FFh
.data.rel.ro:000000000020DB7B                 db 0FFh
.data.rel.ro:000000000020DB7C                 db    0
.data.rel.ro:000000000020DB7D                 db    0
.data.rel.ro:000000000020DB7E                 db    0
.data.rel.ro:000000000020DB7F                 db    0
.data.rel.ro:000000000020DB80                 db    0
.data.rel.ro:000000000020DB81                 db    0
.data.rel.ro:000000000020DB82                 db    0
.data.rel.ro:000000000020DB83                 db    0
.data.rel.ro:000000000020DB84                 db    0
.data.rel.ro:000000000020DB85                 db    0
.data.rel.ro:000000000020DB86                 db    0
.data.rel.ro:000000000020DB87                 db    0
.data.rel.ro:000000000020DB88                 db    0
.data.rel.ro:000000000020DB89                 db    0
.data.rel.ro:000000000020DB8A                 db    0
.data.rel.ro:000000000020DB8B                 db    0
.data.rel.ro:000000000020DB8C                 db    0
.data.rel.ro:000000000020DB8D                 db    0
.data.rel.ro:000000000020DB8E                 db    0
.data.rel.ro:000000000020DB8F                 db    0
.data.rel.ro:000000000020DB90                 db    0
.data.rel.ro:000000000020DB91                 db    0
.data.rel.ro:000000000020DB92                 db    0
.data.rel.ro:000000000020DB93                 db    0
.data.rel.ro:000000000020DB94                 db    0
.data.rel.ro:000000000020DB95                 db    0
.data.rel.ro:000000000020DB96                 db    0
.data.rel.ro:000000000020DB97                 db    0
.data.rel.ro:000000000020DB98                 db    0
.data.rel.ro:000000000020DB99                 db    0
.data.rel.ro:000000000020DB9A                 db    0
.data.rel.ro:000000000020DB9B                 db    0
.data.rel.ro:000000000020DB9C                 db    0
.data.rel.ro:000000000020DB9D                 db    0
.data.rel.ro:000000000020DB9E                 db    0
.data.rel.ro:000000000020DB9F                 db    0
.data.rel.ro:000000000020DBA0                 public quoting_style_args
.data.rel.ro:000000000020DBA0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020DBA8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020DBB0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020DBB8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020DBC0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020DBC8                 dq offset file+1Bh      ; "c"
.data.rel.ro:000000000020DBD0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020DBD8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020DBE0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020DBE8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020DBF0                 db    0
.data.rel.ro:000000000020DBF1                 db    0
.data.rel.ro:000000000020DBF2                 db    0
.data.rel.ro:000000000020DBF3                 db    0
.data.rel.ro:000000000020DBF4                 db    0
.data.rel.ro:000000000020DBF5                 db    0
.data.rel.ro:000000000020DBF6                 db    0
.data.rel.ro:000000000020DBF7                 db    0
.data.rel.ro:000000000020DBF7 _data_rel_ro    ends
.data.rel.ro:000000000020DBF7
LOAD:000000000020DBF8 ; ELF Dynamic Information
LOAD:000000000020DBF8 ; ===========================================================================
LOAD:000000000020DBF8
LOAD:000000000020DBF8 ; Segment type: Pure data
LOAD:000000000020DBF8 ; Segment permissions: Read/Write
LOAD:000000000020DBF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020DBF8                 assume cs:LOAD
LOAD:000000000020DBF8                 ;org 20DBF8h
LOAD:000000000020DBF8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020DBF8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020DBF8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020DC08                 Elf64_Dyn <0Ch, 16C8h>  ; DT_INIT
LOAD:000000000020DC18                 Elf64_Dyn <0Dh, 9BE0h>  ; DT_FINI
LOAD:000000000020DC28                 Elf64_Dyn <19h, 20DA30h> ; DT_INIT_ARRAY
LOAD:000000000020DC38                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020DC48                 Elf64_Dyn <1Ah, 20DA38h> ; DT_FINI_ARRAY
LOAD:000000000020DC58                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020DC68                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020DC78                 Elf64_Dyn <5, 9B8h>     ; DT_STRTAB
LOAD:000000000020DC88                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020DC98                 Elf64_Dyn <0Ah, 318h>   ; DT_STRSZ
LOAD:000000000020DCA8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020DCB8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020DCC8                 Elf64_Dyn <3, 20DDE8h>  ; DT_PLTGOT
LOAD:000000000020DCD8                 Elf64_Dyn <2, 570h>     ; DT_PLTRELSZ
LOAD:000000000020DCE8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020DCF8                 Elf64_Dyn <17h, 1158h>  ; DT_JMPREL
LOAD:000000000020DD08                 Elf64_Dyn <7, 0DC8h>    ; DT_RELA
LOAD:000000000020DD18                 Elf64_Dyn <8, 390h>     ; DT_RELASZ
LOAD:000000000020DD28                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020DD38                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020DD48                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020DD58                 Elf64_Dyn <6FFFFFFEh, 0D68h> ; DT_VERNEED
LOAD:000000000020DD68                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020DD78                 Elf64_Dyn <6FFFFFF0h, 0CD0h> ; DT_VERSYM
LOAD:000000000020DD88                 Elf64_Dyn <6FFFFFF9h, 1Ah> ; DT_RELACOUNT
LOAD:000000000020DD98                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020DDA8                 db    0
LOAD:000000000020DDA9                 db    0
LOAD:000000000020DDAA                 db    0
LOAD:000000000020DDAB                 db    0
LOAD:000000000020DDAC                 db    0
LOAD:000000000020DDAD                 db    0
LOAD:000000000020DDAE                 db    0
LOAD:000000000020DDAF                 db    0
LOAD:000000000020DDB0                 db    0
LOAD:000000000020DDB1                 db    0
LOAD:000000000020DDB2                 db    0
LOAD:000000000020DDB3                 db    0
LOAD:000000000020DDB4                 db    0
LOAD:000000000020DDB5                 db    0
LOAD:000000000020DDB6                 db    0
LOAD:000000000020DDB7                 db    0
LOAD:000000000020DDB8                 db    0
LOAD:000000000020DDB9                 db    0
LOAD:000000000020DDBA                 db    0
LOAD:000000000020DDBB                 db    0
LOAD:000000000020DDBC                 db    0
LOAD:000000000020DDBD                 db    0
LOAD:000000000020DDBE                 db    0
LOAD:000000000020DDBF                 db    0
LOAD:000000000020DDC0                 db    0
LOAD:000000000020DDC1                 db    0
LOAD:000000000020DDC2                 db    0
LOAD:000000000020DDC3                 db    0
LOAD:000000000020DDC4                 db    0
LOAD:000000000020DDC5                 db    0
LOAD:000000000020DDC6                 db    0
LOAD:000000000020DDC7                 db    0
LOAD:000000000020DDC8                 db    0
LOAD:000000000020DDC9                 db    0
LOAD:000000000020DDCA                 db    0
LOAD:000000000020DDCB                 db    0
LOAD:000000000020DDCC                 db    0
LOAD:000000000020DDCD                 db    0
LOAD:000000000020DDCE                 db    0
LOAD:000000000020DDCF                 db    0
LOAD:000000000020DDD0                 db    0
LOAD:000000000020DDD1                 db    0
LOAD:000000000020DDD2                 db    0
LOAD:000000000020DDD3                 db    0
LOAD:000000000020DDD4                 db    0
LOAD:000000000020DDD5                 db    0
LOAD:000000000020DDD6                 db    0
LOAD:000000000020DDD7                 db    0
LOAD:000000000020DDD8                 db    0
LOAD:000000000020DDD9                 db    0
LOAD:000000000020DDDA                 db    0
LOAD:000000000020DDDB                 db    0
LOAD:000000000020DDDC                 db    0
LOAD:000000000020DDDD                 db    0
LOAD:000000000020DDDE                 db    0
LOAD:000000000020DDDF                 db    0
LOAD:000000000020DDE0                 db    0
LOAD:000000000020DDE1                 db    0
LOAD:000000000020DDE2                 db    0
LOAD:000000000020DDE3                 db    0
LOAD:000000000020DDE4                 db    0
LOAD:000000000020DDE5                 db    0
LOAD:000000000020DDE6                 db    0
LOAD:000000000020DDE7                 db    0
LOAD:000000000020DDE7 LOAD            ends
LOAD:000000000020DDE7
.got:000000000020DDE8 ; ===========================================================================
.got:000000000020DDE8
.got:000000000020DDE8 ; Segment type: Pure data
.got:000000000020DDE8 ; Segment permissions: Read/Write
.got:000000000020DDE8 _got            segment qword public 'DATA' use64
.got:000000000020DDE8                 assume cs:_got
.got:000000000020DDE8                 ;org 20DDE8h
.got:000000000020DDE8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020DDF0 qword_20DDF0    dq 0                    ; DATA XREF: sub_16E0↑r
.got:000000000020DDF8 qword_20DDF8    dq 0                    ; DATA XREF: sub_16E0+6↑r
.got:000000000020DE00 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020DE08 __errno_location_ptr dq offset __errno_location
.got:000000000020DE08                                         ; DATA XREF: ___errno_location↑r
.got:000000000020DE10 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020DE18 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020DE20 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020DE28 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000020DE30 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020DE38 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020DE40 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020DE48 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020DE48                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020DE50 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020DE58 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020DE58                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020DE60 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020DE68 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020DE70 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000020DE78 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020DE78                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020DE80 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020DE88 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020DE90 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000020DE98 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020DEA0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020DEA8 __assert_fail_ptr dq offset __assert_fail
.got:000000000020DEA8                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020DEB0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020DEB8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020DEC0 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000020DEC8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020DED0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020DED0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020DED8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020DEE0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020DEE8 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000020DEF0 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:000000000020DEF8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020DF00 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020DF08 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020DF10 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000020DF18 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020DF20 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020DF28 fchmodat_ptr    dq offset fchmodat      ; DATA XREF: _fchmodat↑r
.got:000000000020DF30 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020DF38 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000020DF40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020DF48 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000020DF50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020DF58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020DF60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020DF68 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020DF70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020DF78 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020DF80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020DF88 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000020DF90 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:000000000020DF98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020DFA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020DFA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020DFB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020DFB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020DFB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020DFC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020DFC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020DFC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020DFD0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000020DFD0                                         ; filesystem_type:loc_60E0↑r ...
.got:000000000020DFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020DFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020DFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020DFE0                                         ; DATA XREF: start+24↑r
.got:000000000020DFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020DFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020DFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020DFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020DFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020DFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020DFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020DFF8 _got            ends
.got:000000000020DFF8
.data:000000000020E000 ; ===========================================================================
.data:000000000020E000
.data:000000000020E000 ; Segment type: Pure data
.data:000000000020E000 ; Segment permissions: Read/Write
.data:000000000020E000 _data           segment align_32 public 'DATA' use64
.data:000000000020E000                 assume cs:_data
.data:000000000020E000                 ;org 20E000h
.data:000000000020E000                 public __data_start ; weak
.data:000000000020E000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020E000                                         ; data_start
.data:000000000020E001                 db    0
.data:000000000020E002                 db    0
.data:000000000020E003                 db    0
.data:000000000020E004                 db    0
.data:000000000020E005                 db    0
.data:000000000020E006                 db    0
.data:000000000020E007                 db    0
.data:000000000020E008                 public __dso_handle
.data:000000000020E008 ; void *_dso_handle
.data:000000000020E008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020E008                                         ; atexit↑r ...
.data:000000000020E010 verbosity       dd 2                    ; DATA XREF: main:loc_1CE0↑w
.data:000000000020E010                                         ; main:loc_1CF0↑w ...
.data:000000000020E014                 align 8
.data:000000000020E018                 public Version
.data:000000000020E018 Version         dq offset a831          ; DATA XREF: main+159↑r
.data:000000000020E018                                         ; "8.31"
.data:000000000020E020                 public exit_failure
.data:000000000020E020 ; int exit_failure
.data:000000000020E020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2DA2↑r
.data:000000000020E020                                         ; xalloc_die+17↑r
.data:000000000020E024                 align 20h
.data:000000000020E040                 public quote_quoting_options
.data:000000000020E040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020E040                                         ; quote_mem↑o ...
.data:000000000020E041                 db    0
.data:000000000020E042                 db    0
.data:000000000020E043                 db    0
.data:000000000020E044                 db    0
.data:000000000020E045                 db    0
.data:000000000020E046                 db    0
.data:000000000020E047                 db    0
.data:000000000020E048                 db    0
.data:000000000020E049                 db    0
.data:000000000020E04A                 db    0
.data:000000000020E04B                 db    0
.data:000000000020E04C                 db    0
.data:000000000020E04D                 db    0
.data:000000000020E04E                 db    0
.data:000000000020E04F                 db    0
.data:000000000020E050                 db    0
.data:000000000020E051                 db    0
.data:000000000020E052                 db    0
.data:000000000020E053                 db    0
.data:000000000020E054                 db    0
.data:000000000020E055                 db    0
.data:000000000020E056                 db    0
.data:000000000020E057                 db    0
.data:000000000020E058                 db    0
.data:000000000020E059                 db    0
.data:000000000020E05A                 db    0
.data:000000000020E05B                 db    0
.data:000000000020E05C                 db    0
.data:000000000020E05D                 db    0
.data:000000000020E05E                 db    0
.data:000000000020E05F                 db    0
.data:000000000020E060                 db    0
.data:000000000020E061                 db    0
.data:000000000020E062                 db    0
.data:000000000020E063                 db    0
.data:000000000020E064                 db    0
.data:000000000020E065                 db    0
.data:000000000020E066                 db    0
.data:000000000020E067                 db    0
.data:000000000020E068                 db    0
.data:000000000020E069                 db    0
.data:000000000020E06A                 db    0
.data:000000000020E06B                 db    0
.data:000000000020E06C                 db    0
.data:000000000020E06D                 db    0
.data:000000000020E06E                 db    0
.data:000000000020E06F                 db    0
.data:000000000020E070                 db    0
.data:000000000020E071                 db    0
.data:000000000020E072                 db    0
.data:000000000020E073                 db    0
.data:000000000020E074                 db    0
.data:000000000020E075                 db    0
.data:000000000020E076                 db    0
.data:000000000020E077                 db    0
.data:000000000020E078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020E078                                         ; quotearg_n_options:loc_496D↑r ...
.data:000000000020E07C                 align 20h
.data:000000000020E080 ; void *slotvec
.data:000000000020E080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020E080                                         ; quotearg_n_options+76↑w ...
.data:000000000020E088                 align 10h
.data:000000000020E090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020E090                                         ; quotearg_n_options+187↑r ...
.data:000000000020E098 off_20E098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020E098 _data           ends
.data:000000000020E098
.bss:000000000020E0A0 ; ===========================================================================
.bss:000000000020E0A0
.bss:000000000020E0A0 ; Segment type: Uninitialized
.bss:000000000020E0A0 ; Segment permissions: Read/Write
.bss:000000000020E0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020E0A0                 assume cs:_bss
.bss:000000000020E0A0                 ;org 20E0A0h
.bss:000000000020E0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020E0A0                 public __bss_start ; weak
.bss:000000000020E0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000910↑o
.bss:000000000020E0A0                                         ; LOAD:0000000000000958↑o ...
.bss:000000000020E0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020E0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020E0A0                                         ; _edata
.bss:000000000020E0A0                                         ; Copy of shared data
.bss:000000000020E0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020E0A8 ; FILE *stdout
.bss:000000000020E0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008F8↑o
.bss:000000000020E0A8                                         ; main+152↑r ...
.bss:000000000020E0A8                                         ; Alternative name is 'stdout'
.bss:000000000020E0A8                                         ; Copy of shared data
.bss:000000000020E0B0                 public optind@@GLIBC_2_2_5
.bss:000000000020E0B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000988↑o
.bss:000000000020E0B0                                         ; main:loc_1C78↑r ...
.bss:000000000020E0B0                                         ; Alternative name is 'optind'
.bss:000000000020E0B0                                         ; Copy of shared data
.bss:000000000020E0B4                 align 8
.bss:000000000020E0B8                 public optarg@@GLIBC_2_2_5
.bss:000000000020E0B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:000000000020E0B8                                         ; main+10D↑r
.bss:000000000020E0B8                                         ; Alternative name is 'optarg'
.bss:000000000020E0B8                                         ; Copy of shared data
.bss:000000000020E0C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020E0C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020E0C0                                         ; DATA XREF: LOAD:0000000000000928↑o
.bss:000000000020E0C0                                         ; LOAD:0000000000000940↑o ...
.bss:000000000020E0C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020E0C0                                         ; Copy of shared data
.bss:000000000020E0C8                 align 20h
.bss:000000000020E0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020E0E0 ; FILE *stderr
.bss:000000000020E0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000970↑o
.bss:000000000020E0E0                                         ; usage+3D↑r ...
.bss:000000000020E0E0                                         ; Alternative name is 'stderr'
.bss:000000000020E0E0                                         ; Copy of shared data
.bss:000000000020E0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020E0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020E0E9                 align 10h
.bss:000000000020E0F0 dev_ino_buf_7087 db    ? ;              ; DATA XREF: main:loc_25E1↑o
.bss:000000000020E0F1                 db    ? ;
.bss:000000000020E0F2                 db    ? ;
.bss:000000000020E0F3                 db    ? ;
.bss:000000000020E0F4                 db    ? ;
.bss:000000000020E0F5                 db    ? ;
.bss:000000000020E0F6                 db    ? ;
.bss:000000000020E0F7                 db    ? ;
.bss:000000000020E0F8                 db    ? ;
.bss:000000000020E0F9                 db    ? ;
.bss:000000000020E0FA                 db    ? ;
.bss:000000000020E0FB                 db    ? ;
.bss:000000000020E0FC                 db    ? ;
.bss:000000000020E0FD                 db    ? ;
.bss:000000000020E0FE                 db    ? ;
.bss:000000000020E0FF                 db    ? ;
.bss:000000000020E100 root_dev_ino    dq ?                    ; DATA XREF: main+30F↑w
.bss:000000000020E100                                         ; main:def_1E3A↑r ...
.bss:000000000020E108 diagnose_surprises db ?                 ; DATA XREF: main+88↑w
.bss:000000000020E108                                         ; main+22D↑w ...
.bss:000000000020E109 force_silent    db ?                    ; DATA XREF: main+8F↑w
.bss:000000000020E109                                         ; main+1A4↑w ...
.bss:000000000020E10A recurse         db ?                    ; DATA XREF: main+96↑w
.bss:000000000020E10A                                         ; main+1B5↑w ...
.bss:000000000020E10B                 align 4
.bss:000000000020E10C umask_value     dd ?                    ; DATA XREF: main+598↑r
.bss:000000000020E10C                                         ; main+684↑w
.bss:000000000020E110 change          dq ?                    ; DATA XREF: main+2DD↑w
.bss:000000000020E110                                         ; main+59E↑r ...
.bss:000000000020E118 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020E118                                         ; close_stdout+1B↑r
.bss:000000000020E119                 align 20h
.bss:000000000020E120 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020E120                                         ; close_stdout+56↑r
.bss:000000000020E128                 public program_name
.bss:000000000020E128 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020E128                                         ; set_program_name:loc_358D↑w
.bss:000000000020E130                 align 20h
.bss:000000000020E140 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020E140                                         ; quotearg_free+46↑o ...
.bss:000000000020E141                 db    ? ;
.bss:000000000020E142                 db    ? ;
.bss:000000000020E143                 db    ? ;
.bss:000000000020E144                 db    ? ;
.bss:000000000020E145                 db    ? ;
.bss:000000000020E146                 db    ? ;
.bss:000000000020E147                 db    ? ;
.bss:000000000020E148                 db    ? ;
.bss:000000000020E149                 db    ? ;
.bss:000000000020E14A                 db    ? ;
.bss:000000000020E14B                 db    ? ;
.bss:000000000020E14C                 db    ? ;
.bss:000000000020E14D                 db    ? ;
.bss:000000000020E14E                 db    ? ;
.bss:000000000020E14F                 db    ? ;
.bss:000000000020E150                 db    ? ;
.bss:000000000020E151                 db    ? ;
.bss:000000000020E152                 db    ? ;
.bss:000000000020E153                 db    ? ;
.bss:000000000020E154                 db    ? ;
.bss:000000000020E155                 db    ? ;
.bss:000000000020E156                 db    ? ;
.bss:000000000020E157                 db    ? ;
.bss:000000000020E158                 db    ? ;
.bss:000000000020E159                 db    ? ;
.bss:000000000020E15A                 db    ? ;
.bss:000000000020E15B                 db    ? ;
.bss:000000000020E15C                 db    ? ;
.bss:000000000020E15D                 db    ? ;
.bss:000000000020E15E                 db    ? ;
.bss:000000000020E15F                 db    ? ;
.bss:000000000020E160                 db    ? ;
.bss:000000000020E161                 db    ? ;
.bss:000000000020E162                 db    ? ;
.bss:000000000020E163                 db    ? ;
.bss:000000000020E164                 db    ? ;
.bss:000000000020E165                 db    ? ;
.bss:000000000020E166                 db    ? ;
.bss:000000000020E167                 db    ? ;
.bss:000000000020E168                 db    ? ;
.bss:000000000020E169                 db    ? ;
.bss:000000000020E16A                 db    ? ;
.bss:000000000020E16B                 db    ? ;
.bss:000000000020E16C                 db    ? ;
.bss:000000000020E16D                 db    ? ;
.bss:000000000020E16E                 db    ? ;
.bss:000000000020E16F                 db    ? ;
.bss:000000000020E170                 db    ? ;
.bss:000000000020E171                 db    ? ;
.bss:000000000020E172                 db    ? ;
.bss:000000000020E173                 db    ? ;
.bss:000000000020E174                 db    ? ;
.bss:000000000020E175                 db    ? ;
.bss:000000000020E176                 db    ? ;
.bss:000000000020E177                 db    ? ;
.bss:000000000020E178                 db    ? ;
.bss:000000000020E179                 db    ? ;
.bss:000000000020E17A                 db    ? ;
.bss:000000000020E17B                 db    ? ;
.bss:000000000020E17C                 db    ? ;
.bss:000000000020E17D                 db    ? ;
.bss:000000000020E17E                 db    ? ;
.bss:000000000020E17F                 db    ? ;
.bss:000000000020E180                 db    ? ;
.bss:000000000020E181                 db    ? ;
.bss:000000000020E182                 db    ? ;
.bss:000000000020E183                 db    ? ;
.bss:000000000020E184                 db    ? ;
.bss:000000000020E185                 db    ? ;
.bss:000000000020E186                 db    ? ;
.bss:000000000020E187                 db    ? ;
.bss:000000000020E188                 db    ? ;
.bss:000000000020E189                 db    ? ;
.bss:000000000020E18A                 db    ? ;
.bss:000000000020E18B                 db    ? ;
.bss:000000000020E18C                 db    ? ;
.bss:000000000020E18D                 db    ? ;
.bss:000000000020E18E                 db    ? ;
.bss:000000000020E18F                 db    ? ;
.bss:000000000020E190                 db    ? ;
.bss:000000000020E191                 db    ? ;
.bss:000000000020E192                 db    ? ;
.bss:000000000020E193                 db    ? ;
.bss:000000000020E194                 db    ? ;
.bss:000000000020E195                 db    ? ;
.bss:000000000020E196                 db    ? ;
.bss:000000000020E197                 db    ? ;
.bss:000000000020E198                 db    ? ;
.bss:000000000020E199                 db    ? ;
.bss:000000000020E19A                 db    ? ;
.bss:000000000020E19B                 db    ? ;
.bss:000000000020E19C                 db    ? ;
.bss:000000000020E19D                 db    ? ;
.bss:000000000020E19E                 db    ? ;
.bss:000000000020E19F                 db    ? ;
.bss:000000000020E1A0                 db    ? ;
.bss:000000000020E1A1                 db    ? ;
.bss:000000000020E1A2                 db    ? ;
.bss:000000000020E1A3                 db    ? ;
.bss:000000000020E1A4                 db    ? ;
.bss:000000000020E1A5                 db    ? ;
.bss:000000000020E1A6                 db    ? ;
.bss:000000000020E1A7                 db    ? ;
.bss:000000000020E1A8                 db    ? ;
.bss:000000000020E1A9                 db    ? ;
.bss:000000000020E1AA                 db    ? ;
.bss:000000000020E1AB                 db    ? ;
.bss:000000000020E1AC                 db    ? ;
.bss:000000000020E1AD                 db    ? ;
.bss:000000000020E1AE                 db    ? ;
.bss:000000000020E1AF                 db    ? ;
.bss:000000000020E1B0                 db    ? ;
.bss:000000000020E1B1                 db    ? ;
.bss:000000000020E1B2                 db    ? ;
.bss:000000000020E1B3                 db    ? ;
.bss:000000000020E1B4                 db    ? ;
.bss:000000000020E1B5                 db    ? ;
.bss:000000000020E1B6                 db    ? ;
.bss:000000000020E1B7                 db    ? ;
.bss:000000000020E1B8                 db    ? ;
.bss:000000000020E1B9                 db    ? ;
.bss:000000000020E1BA                 db    ? ;
.bss:000000000020E1BB                 db    ? ;
.bss:000000000020E1BC                 db    ? ;
.bss:000000000020E1BD                 db    ? ;
.bss:000000000020E1BE                 db    ? ;
.bss:000000000020E1BF                 db    ? ;
.bss:000000000020E1C0                 db    ? ;
.bss:000000000020E1C1                 db    ? ;
.bss:000000000020E1C2                 db    ? ;
.bss:000000000020E1C3                 db    ? ;
.bss:000000000020E1C4                 db    ? ;
.bss:000000000020E1C5                 db    ? ;
.bss:000000000020E1C6                 db    ? ;
.bss:000000000020E1C7                 db    ? ;
.bss:000000000020E1C8                 db    ? ;
.bss:000000000020E1C9                 db    ? ;
.bss:000000000020E1CA                 db    ? ;
.bss:000000000020E1CB                 db    ? ;
.bss:000000000020E1CC                 db    ? ;
.bss:000000000020E1CD                 db    ? ;
.bss:000000000020E1CE                 db    ? ;
.bss:000000000020E1CF                 db    ? ;
.bss:000000000020E1D0                 db    ? ;
.bss:000000000020E1D1                 db    ? ;
.bss:000000000020E1D2                 db    ? ;
.bss:000000000020E1D3                 db    ? ;
.bss:000000000020E1D4                 db    ? ;
.bss:000000000020E1D5                 db    ? ;
.bss:000000000020E1D6                 db    ? ;
.bss:000000000020E1D7                 db    ? ;
.bss:000000000020E1D8                 db    ? ;
.bss:000000000020E1D9                 db    ? ;
.bss:000000000020E1DA                 db    ? ;
.bss:000000000020E1DB                 db    ? ;
.bss:000000000020E1DC                 db    ? ;
.bss:000000000020E1DD                 db    ? ;
.bss:000000000020E1DE                 db    ? ;
.bss:000000000020E1DF                 db    ? ;
.bss:000000000020E1E0                 db    ? ;
.bss:000000000020E1E1                 db    ? ;
.bss:000000000020E1E2                 db    ? ;
.bss:000000000020E1E3                 db    ? ;
.bss:000000000020E1E4                 db    ? ;
.bss:000000000020E1E5                 db    ? ;
.bss:000000000020E1E6                 db    ? ;
.bss:000000000020E1E7                 db    ? ;
.bss:000000000020E1E8                 db    ? ;
.bss:000000000020E1E9                 db    ? ;
.bss:000000000020E1EA                 db    ? ;
.bss:000000000020E1EB                 db    ? ;
.bss:000000000020E1EC                 db    ? ;
.bss:000000000020E1ED                 db    ? ;
.bss:000000000020E1EE                 db    ? ;
.bss:000000000020E1EF                 db    ? ;
.bss:000000000020E1F0                 db    ? ;
.bss:000000000020E1F1                 db    ? ;
.bss:000000000020E1F2                 db    ? ;
.bss:000000000020E1F3                 db    ? ;
.bss:000000000020E1F4                 db    ? ;
.bss:000000000020E1F5                 db    ? ;
.bss:000000000020E1F6                 db    ? ;
.bss:000000000020E1F7                 db    ? ;
.bss:000000000020E1F8                 db    ? ;
.bss:000000000020E1F9                 db    ? ;
.bss:000000000020E1FA                 db    ? ;
.bss:000000000020E1FB                 db    ? ;
.bss:000000000020E1FC                 db    ? ;
.bss:000000000020E1FD                 db    ? ;
.bss:000000000020E1FE                 db    ? ;
.bss:000000000020E1FF                 db    ? ;
.bss:000000000020E200                 db    ? ;
.bss:000000000020E201                 db    ? ;
.bss:000000000020E202                 db    ? ;
.bss:000000000020E203                 db    ? ;
.bss:000000000020E204                 db    ? ;
.bss:000000000020E205                 db    ? ;
.bss:000000000020E206                 db    ? ;
.bss:000000000020E207                 db    ? ;
.bss:000000000020E208                 db    ? ;
.bss:000000000020E209                 db    ? ;
.bss:000000000020E20A                 db    ? ;
.bss:000000000020E20B                 db    ? ;
.bss:000000000020E20C                 db    ? ;
.bss:000000000020E20D                 db    ? ;
.bss:000000000020E20E                 db    ? ;
.bss:000000000020E20F                 db    ? ;
.bss:000000000020E210                 db    ? ;
.bss:000000000020E211                 db    ? ;
.bss:000000000020E212                 db    ? ;
.bss:000000000020E213                 db    ? ;
.bss:000000000020E214                 db    ? ;
.bss:000000000020E215                 db    ? ;
.bss:000000000020E216                 db    ? ;
.bss:000000000020E217                 db    ? ;
.bss:000000000020E218                 db    ? ;
.bss:000000000020E219                 db    ? ;
.bss:000000000020E21A                 db    ? ;
.bss:000000000020E21B                 db    ? ;
.bss:000000000020E21C                 db    ? ;
.bss:000000000020E21D                 db    ? ;
.bss:000000000020E21E                 db    ? ;
.bss:000000000020E21F                 db    ? ;
.bss:000000000020E220                 db    ? ;
.bss:000000000020E221                 db    ? ;
.bss:000000000020E222                 db    ? ;
.bss:000000000020E223                 db    ? ;
.bss:000000000020E224                 db    ? ;
.bss:000000000020E225                 db    ? ;
.bss:000000000020E226                 db    ? ;
.bss:000000000020E227                 db    ? ;
.bss:000000000020E228                 db    ? ;
.bss:000000000020E229                 db    ? ;
.bss:000000000020E22A                 db    ? ;
.bss:000000000020E22B                 db    ? ;
.bss:000000000020E22C                 db    ? ;
.bss:000000000020E22D                 db    ? ;
.bss:000000000020E22E                 db    ? ;
.bss:000000000020E22F                 db    ? ;
.bss:000000000020E230                 db    ? ;
.bss:000000000020E231                 db    ? ;
.bss:000000000020E232                 db    ? ;
.bss:000000000020E233                 db    ? ;
.bss:000000000020E234                 db    ? ;
.bss:000000000020E235                 db    ? ;
.bss:000000000020E236                 db    ? ;
.bss:000000000020E237                 db    ? ;
.bss:000000000020E238                 db    ? ;
.bss:000000000020E239                 db    ? ;
.bss:000000000020E23A                 db    ? ;
.bss:000000000020E23B                 db    ? ;
.bss:000000000020E23C                 db    ? ;
.bss:000000000020E23D                 db    ? ;
.bss:000000000020E23E                 db    ? ;
.bss:000000000020E23F                 db    ? ;
.bss:000000000020E240 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020E240                                         ; get_quoting_style↑o ...
.bss:000000000020E250 xmmword_20E250  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020E250                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020E260 xmmword_20E260  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020E260                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020E270 qword_20E270    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020E270                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020E278 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020E278                                         ; rpl_fcntl:loc_98AF↑w ...
.bss:000000000020E27C                 align 20h
.bss:000000000020E27C _bss            ends
.bss:000000000020E27C
.prgend:000000000020E280 ; ===========================================================================
.prgend:000000000020E280
.prgend:000000000020E280 ; Segment type: Zero-length
.prgend:000000000020E280 _prgend         segment byte public '' use64
.prgend:000000000020E280 _end            label byte
.prgend:000000000020E280 _prgend         ends
.prgend:000000000020E280
extern:000000000020E288 ; ===========================================================================
extern:000000000020E288
extern:000000000020E288 ; Segment type: Externs
extern:000000000020E288 ; extern
extern:000000000020E288 ; void free(void *ptr)
extern:000000000020E288                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020E288                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020E290 ; void __noreturn abort(void)
extern:000000000020E290                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020E290                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020E298 ; int *_errno_location(void)
extern:000000000020E298                 extrn __errno_location:near
extern:000000000020E298                                         ; CODE XREF: ___errno_location↑j
extern:000000000020E298                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020E2A0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020E2A0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020E2A0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020E2A8 ; void __noreturn exit(int status)
extern:000000000020E2A8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020E2A8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020E2B0 ; size_t _fpending(FILE *fp)
extern:000000000020E2B0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020E2B0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020E2B8 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000020E2B8                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000020E2B8                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000020E2C0 ; int fcntl(int fd, int cmd, ...)
extern:000000000020E2C0                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020E2C0                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020E2C8 ; char *textdomain(const char *domainname)
extern:000000000020E2C8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020E2C8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020E2D0 ; int fclose(FILE *stream)
extern:000000000020E2D0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020E2D0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020E2D8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020E2D8                 extrn bindtextdomain:near
extern:000000000020E2D8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020E2D8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020E2E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020E2E0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020E2E0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020E2E8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020E2E8                 extrn __ctype_get_mb_cur_max:near
extern:000000000020E2E8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020E2E8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020E2F0 ; size_t strlen(const char *s)
extern:000000000020E2F0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020E2F0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020E2F8 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020E2F8                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000020E2F8                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000020E300 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000020E300                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000020E300                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000020E308                 extrn __stack_chk_fail:near
extern:000000000020E308                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020E308                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020E310 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020E310                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020E310                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020E318 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020E318                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020E318                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020E320 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000020E320                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000020E320                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000020E328 ; char *strrchr(const char *s, int c)
extern:000000000020E328                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020E328                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020E330 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020E330                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020E330                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020E338 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020E338                 extrn __assert_fail:near
extern:000000000020E338                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020E338                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020E340 ; void *memset(void *s, int c, size_t n)
extern:000000000020E340                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020E340                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020E348 ; int close(int fd)
extern:000000000020E348                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020E348                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020E350 ; int closedir(DIR *dirp)
extern:000000000020E350                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000020E350                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000020E358 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020E358                 extrn __libc_start_main:near
extern:000000000020E358                                         ; CODE XREF: start+24↑p
extern:000000000020E358                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020E360 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020E360                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020E360                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020E368 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020E368                 extrn fputs_unlocked:near
extern:000000000020E368                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020E368                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020E370 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020E370                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020E370                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020E378 ; int strcmp(const char *s1, const char *s2)
extern:000000000020E378                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020E378                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020E380 ; int dirfd(DIR *dirp)
extern:000000000020E380                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000020E380                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000020E388 ; __mode_t umask(__mode_t mask)
extern:000000000020E388                 extrn umask:near        ; CODE XREF: _umask↑j
extern:000000000020E388                                         ; DATA XREF: .got:umask_ptr↑o
extern:000000000020E390 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020E390                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020E390                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020E398 ; int fileno(FILE *stream)
extern:000000000020E398                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020E398                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020E3A0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020E3A0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020E3A0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020E3A8 ; struct dirent *readdir(DIR *dirp)
extern:000000000020E3A8                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000020E3A8                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000020E3B0 ; void *malloc(size_t size)
extern:000000000020E3B0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020E3B0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020E3B8 ; int fflush(FILE *stream)
extern:000000000020E3B8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020E3B8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020E3C0 ; int fchmodat(int fd, const char *file, __mode_t mode, int flag)
extern:000000000020E3C0                 extrn fchmodat:near     ; CODE XREF: _fchmodat↑j
extern:000000000020E3C0                                         ; DATA XREF: .got:fchmodat_ptr↑o
extern:000000000020E3C8 ; char *nl_langinfo(nl_item item)
extern:000000000020E3C8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020E3C8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020E3D0 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020E3D0                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020E3D0                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020E3D8 ; int _freading(FILE *fp)
extern:000000000020E3D8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020E3D8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020E3E0 ; int fchdir(int fd)
extern:000000000020E3E0                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000020E3E0                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000020E3E8 ; void *realloc(void *ptr, size_t size)
extern:000000000020E3E8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020E3E8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020E3F0 ; char *setlocale(int category, const char *locale)
extern:000000000020E3F0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020E3F0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020E3F8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020E3F8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020E400 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020E400                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020E400                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020E408 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020E408                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020E408                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020E410 ; int open(const char *file, int oflag, ...)
extern:000000000020E410                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020E410                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020E418 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020E418                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020E418                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020E420 ; DIR *fdopendir(int fd)
extern:000000000020E420                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000020E420                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000020E428 ; int fstatfs(int fildes, struct statfs *buf)
extern:000000000020E428                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:000000000020E428                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:000000000020E430 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020E430                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020E430                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020E438 ; void __noreturn exit(int status)
extern:000000000020E438                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020E438                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020E440 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020E440                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020E440                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020E448                 extrn __fprintf_chk:near
extern:000000000020E448                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020E448                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020E450 ; int mbsinit(const mbstate_t *ps)
extern:000000000020E450                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020E450                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020E458 ; int iswprint(wint_t wc)
extern:000000000020E458                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020E458                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020E460 ; int __fastcall __cxa_finalize(void *)
extern:000000000020E460                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020E460                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020E460                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020E468 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020E468                 extrn __ctype_b_loc:near
extern:000000000020E468                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020E468                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020E470                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020E470                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020E478                 extrn __gmon_start__:near ; weak
extern:000000000020E478                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020E478                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020E480                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020E480                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020E480
extern:000000000020E480
extern:000000000020E480                 end start
