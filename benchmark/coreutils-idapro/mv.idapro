LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 97CEC12EC7616A380ED4EB13EC980CE8E04008DB9BE4E701D0FBC2A51328E622
LOAD:0000000000000000 ; Input MD5    : 666E07A2D42D09238C635920290891C7
LOAD:0000000000000000 ; Input CRC32  : 75251ACE
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/mv
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'copy.c'
LOAD:0000000000000000 ; Source File : 'mv.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'remove.c'
LOAD:0000000000000000 ; Source File : 'cp-hash.c'
LOAD:0000000000000000 ; Source File : 'extent-scan.c'
LOAD:0000000000000000 ; Source File : 'force-link.c'
LOAD:0000000000000000 ; Source File : 'selinux.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'copy-acl.c'
LOAD:0000000000000000 ; Source File : 'set-acl.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'backupfile.c'
LOAD:0000000000000000 ; Source File : 'backup-rename.c'
LOAD:0000000000000000 ; Source File : 'backup-find.c'
LOAD:0000000000000000 ; Source File : 'buffer-lcm.c'
LOAD:0000000000000000 ; Source File : 'closein.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'stripslash.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'open-safer.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'file-type.c'
LOAD:0000000000000000 ; Source File : 'filemode.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'full-write.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'qcopy-acl.c'
LOAD:0000000000000000 ; Source File : 'qset-acl.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'renameatu.c'
LOAD:0000000000000000 ; Source File : 'root-dev-ino.c'
LOAD:0000000000000000 ; Source File : 'safe-write.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'savedir.c'
LOAD:0000000000000000 ; Source File : 'tempname.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'utimecmp.c'
LOAD:0000000000000000 ; Source File : 'utimens.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'write-any-file.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xfts.c'
LOAD:0000000000000000 ; Source File : 'yesno.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'freadahead.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'fts.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'acl-internal.c'
LOAD:0000000000000000 ; Source File : 'get-permissions.c'
LOAD:0000000000000000 ; Source File : 'set-permissions.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'cycle-check.c'
LOAD:0000000000000000 ; Source File : 'opendir-safer.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'i-ring.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'randint.c'
LOAD:0000000000000000 ; Source File : 'randread.c'
LOAD:0000000000000000 ; Source File : 'rand-isaac.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 96AC8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 1AAC0h               ; Size in file image
LOAD:00000000000000D8                 dq 1AAC0h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 1B790h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 21B790h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 918h                 ; Size in file image
LOAD:0000000000000110                 dq 0F68h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 1BA38h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 21BA38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 174DCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 174DCh               ; Physical address
LOAD:00000000000001B0                 dq 894h                 ; Size in file image
LOAD:00000000000001B8                 dq 894h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 1B790h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 21B790h              ; Physical address
LOAD:0000000000000220                 dq 870h                 ; Size in file image
LOAD:0000000000000228                 dq 870h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0, 4Fh, 0F7h, 0F2h, 46h, 0D2h, 0D6h, 9Ch, 9Dh, 83h ; Desc
LOAD:0000000000000284                 db 9, 0E4h, 0E2h, 97h, 8Dh, 84h, 6Bh, 0CFh, 0B9h, 0D2h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 78h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 78h, 79h, 7Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_EF8, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_EF8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aUtimensat - offset byte_EF8, 12h, 0, 0, \ ; "utimensat"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_EF8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aUnlink - offset byte_EF8, 12h, 0, 0, \ ; "unlink"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_EF8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_EF8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_EF8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aStrcpy - offset byte_EF8, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFpending - offset byte_EF8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aReadChk - offset byte_EF8, 12h, 0, 0, \ ; "__read_chk"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aMkdir - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "mkdir"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aUnlinkat - offset byte_EF8, 12h, 0, 0, \ ; "unlinkat"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aQsort - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:0000000000000448                            0>
LOAD:0000000000000460                 Elf64_Sym <offset aIsatty - offset byte_EF8, 12h, 0, 0, \ ; "isatty"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFaccessat - offset byte_EF8, 12h, 0, 0, \ ; "faccessat"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aReadlink - offset byte_EF8, 12h, 0, 0, \ ; "readlink"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFcntl - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000004A8                            0>
LOAD:00000000000004C0                 Elf64_Sym <offset aClockGettime - offset byte_EF8, 12h, 0, 0, \ ; "clock_gettime"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aFwrite+1 - offset byte_EF8, 12h, 0, 0, \ ; "write"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aGetpid - offset byte_EF8, 12h, 0, 0, \ ; "getpid"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aFreadUnlocked - offset byte_EF8, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_EF8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aFpathconf+1 - offset byte_EF8, 12h, 0, 0, \ ; "pathconf"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFclose - offset byte_EF8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFdopendir+2 - offset byte_EF8, 12h, 0, 0, \ ; "opendir"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aBindtextdomain - offset byte_EF8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStpcpy - offset byte_EF8, 12h, 0, 0, \ ; "stpcpy"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aRmdir - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "rmdir"
LOAD:00000000000005B0                            0>
LOAD:00000000000005C8                 Elf64_Sym <offset aDcgettext - offset byte_EF8, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_EF8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrlen - offset byte_EF8, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aLxstat - offset byte_EF8, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aOpenat - offset byte_EF8, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aStackChkFail - offset byte_EF8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aGetuid - offset byte_EF8, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aGetoptLong - offset byte_EF8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMbrtowc - offset byte_EF8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFxstatat - offset byte_EF8, 12h, 0, 0, \ ; "__fxstatat"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aOverflow - offset byte_EF8, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrrchr - offset byte_EF8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFtruncate - offset byte_EF8, 12h, 0, 0, \ ; "ftruncate"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aLseek - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aGettimeofday - offset byte_EF8, 12h, 0, 0, \ ; "gettimeofday"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aAssertFail - offset byte_EF8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMemset - offset byte_EF8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aGeteuid - offset byte_EF8, 12h, 0, 0, \ ; "geteuid"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aIoctl - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "ioctl"
LOAD:0000000000000778                            0>
LOAD:0000000000000790                 Elf64_Sym <offset aCanonicalizeFi - offset byte_EF8, 12h, 0, 0, \ ; "canonicalize_file_name"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFclose+1 - offset byte_EF8, 12h, 0, 0, \ ; "close"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aRewinddir - offset byte_EF8, 12h, 0, 0, \ ; "rewinddir"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aStrspn - offset byte_EF8, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aClosedir - offset byte_EF8, 12h, 0, 0, \ ; "closedir"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aPosixFadvise - offset byte_EF8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aRead - offset byte_EF8, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:0000000000000820                            0>
LOAD:0000000000000838                 Elf64_Sym <offset aLibcStartMain - offset byte_EF8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aMemcmp - offset byte_EF8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aFallocate - offset byte_EF8, 12h, 0, 0, \ ; "fallocate"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFputsUnlocked - offset byte_EF8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aUtimes - offset byte_EF8, 12h, 0, 0, \ ; "utimes"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aCalloc - offset byte_EF8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aGetdelim - offset byte_EF8, 12h, 0, 0, \ ; "__getdelim"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aStrcmp - offset byte_EF8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aDirfd - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:00000000000008F8                            0>
LOAD:0000000000000910                 Elf64_Sym <offset aFpathconf - offset byte_EF8, 12h, 0, 0, \ ; "fpathconf"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aRpmatch - offset byte_EF8, 12h, 0, 0, \ ; "rpmatch"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aSyscall - offset byte_EF8, 12h, 0, 0, \ ; "syscall"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aMkfifo - offset byte_EF8, 12h, 0, 0, \ ; "mkfifo"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aGmonStart - offset byte_EF8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aUmask - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "umask"
LOAD:0000000000000988                            0>
LOAD:00000000000009A0                 Elf64_Sym <offset aMemcpy - offset byte_EF8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aXmknod - offset byte_EF8, 12h, 0, 0, \ ; "__xmknod"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aFileno - offset byte_EF8, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aGetgid - offset byte_EF8, 12h, 0, 0, \ ; "getgid"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aXstat - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000A00                            0>
LOAD:0000000000000A18                 Elf64_Sym <offset aReaddir - offset byte_EF8, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aMalloc - offset byte_EF8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aFflush - offset byte_EF8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aNlLanginfo - offset byte_EF8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aFxstat - offset byte_EF8, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aLchown - offset byte_EF8, 12h, 0, 0, \ ; "lchown"
LOAD:0000000000000A90                            offset dword_0, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aFreading - offset byte_EF8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aFchdir - offset byte_EF8, 12h, 0, 0, \ ; "fchdir"
LOAD:0000000000000AC0                            offset dword_0, 0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aRealloc - offset byte_EF8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000AD8                            offset dword_0, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aFdopen - offset byte_EF8, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000AF0                            offset dword_0, 0>
LOAD:0000000000000B08                 Elf64_Sym <offset aSymlinkat+3 - offset byte_EF8, 12h, 0, 0, \ ; "linkat"
LOAD:0000000000000B08                            offset dword_0, 0>
LOAD:0000000000000B20                 Elf64_Sym <offset aSetlocale - offset byte_EF8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000B20                            offset dword_0, 0>
LOAD:0000000000000B38                 Elf64_Sym <offset aPrintfChk - offset byte_EF8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000B38                            offset dword_0, 0>
LOAD:0000000000000B50                 Elf64_Sym <offset aFchmod - offset byte_EF8, 12h, 0, 0, \ ; "fchmod"
LOAD:0000000000000B50                            offset dword_0, 0>
LOAD:0000000000000B68                 Elf64_Sym <offset aSetvbuf - offset byte_EF8, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000B68                            offset dword_0, 0>
LOAD:0000000000000B80                 Elf64_Sym <offset aFchmod+1 - offset byte_EF8, 12h, 0, 0, \ ; "chmod"
LOAD:0000000000000B80                            offset dword_0, 0>
LOAD:0000000000000B98                 Elf64_Sym <offset aMempcpy - offset byte_EF8, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000B98                            offset dword_0, 0>
LOAD:0000000000000BB0                 Elf64_Sym <offset aMemmove - offset byte_EF8, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000BB0                            offset dword_0, 0>
LOAD:0000000000000BC8                 Elf64_Sym <offset aError - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000BC8                            0>
LOAD:0000000000000BE0                 Elf64_Sym <offset aExplicitBzeroC - offset byte_EF8, 12h, 0, 0, \ ; "__explicit_bzero_chk"
LOAD:0000000000000BE0                            offset dword_0, 0>
LOAD:0000000000000BF8                 Elf64_Sym <offset aFdopen+2 - offset byte_EF8, 12h, 0, 0, \ ; "open"
LOAD:0000000000000BF8                            offset dword_0, 0>
LOAD:0000000000000C10                 Elf64_Sym <offset aFseeko - offset byte_EF8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000C10                            offset dword_0, 0>
LOAD:0000000000000C28                 Elf64_Sym <offset aFchown - offset byte_EF8, 12h, 0, 0, \ ; "fchown"
LOAD:0000000000000C28                            offset dword_0, 0>
LOAD:0000000000000C40                 Elf64_Sym <offset aFopen - offset byte_EF8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000C40                            0>
LOAD:0000000000000C58                 Elf64_Sym <offset aRename - offset byte_EF8, 12h, 0, 0, \ ; "rename"
LOAD:0000000000000C58                            offset dword_0, 0>
LOAD:0000000000000C70                 Elf64_Sym <offset aFdopendir - offset byte_EF8, 12h, 0, 0, \ ; "fdopendir"
LOAD:0000000000000C70                            offset dword_0, 0>
LOAD:0000000000000C88                 Elf64_Sym <offset aFutimens - offset byte_EF8, 12h, 0, 0, \ ; "futimens"
LOAD:0000000000000C88                            offset dword_0, 0>
LOAD:0000000000000CA0                 Elf64_Sym <offset aEuidaccess - offset byte_EF8, 12h, 0, 0, \ ; "euidaccess"
LOAD:0000000000000CA0                            offset dword_0, 0>
LOAD:0000000000000CB8                 Elf64_Sym <offset aFstatfs - offset byte_EF8, 12h, 0, 0, \ ; "fstatfs"
LOAD:0000000000000CB8                            offset dword_0, 0>
LOAD:0000000000000CD0                 Elf64_Sym <offset aCxaAtexit - offset byte_EF8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000CD0                            offset dword_0, 0>
LOAD:0000000000000CE8                 Elf64_Sym <offset aRenameat - offset byte_EF8, 12h, 0, 0, \ ; "renameat"
LOAD:0000000000000CE8                            offset dword_0, 0>
LOAD:0000000000000D00                 Elf64_Sym <offset aGetpagesize - offset byte_EF8, 12h, 0, 0, \ ; "getpagesize"
LOAD:0000000000000D00                            offset dword_0, 0>
LOAD:0000000000000D18                 Elf64_Sym <offset aGetppid - offset byte_EF8, 12h, 0, 0, \ ; "getppid"
LOAD:0000000000000D18                            offset dword_0, 0>
LOAD:0000000000000D30                 Elf64_Sym <offset aExit+1 - offset byte_EF8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000D30                            offset dword_0, 0>
LOAD:0000000000000D48                 Elf64_Sym <offset aFwrite - offset byte_EF8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000D48                            offset dword_0, 0>
LOAD:0000000000000D60                 Elf64_Sym <offset aFprintfChk - offset byte_EF8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000D60                            offset dword_0, 0>
LOAD:0000000000000D78                 Elf64_Sym <offset aItmRegistertmc - offset byte_EF8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000D78                            offset dword_0, 0>
LOAD:0000000000000D90                 Elf64_Sym <offset aMbsinit - offset byte_EF8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000D90                            offset dword_0, 0>
LOAD:0000000000000DA8                 Elf64_Sym <offset aSymlinkat - offset byte_EF8, 12h, 0, 0, \ ; "symlinkat"
LOAD:0000000000000DA8                            offset dword_0, 0>
LOAD:0000000000000DC0                 Elf64_Sym <offset aIswprint - offset byte_EF8, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000DC0                            offset dword_0, 0>
LOAD:0000000000000DD8                 Elf64_Sym <offset aCxaFinalize - offset byte_EF8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000DD8                            offset dword_0, 0>
LOAD:0000000000000DF0                 Elf64_Sym <offset aFutimesat - offset byte_EF8, 12h, 0, 0, \ ; "futimesat"
LOAD:0000000000000DF0                            offset dword_0, 0>
LOAD:0000000000000E08                 Elf64_Sym <offset aCtypeBLoc - offset byte_EF8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000E08                            offset dword_0, 0>
LOAD:0000000000000E20                 Elf64_Sym <offset aStdout - offset byte_EF8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000E20                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000E38                 Elf64_Sym <offset aProgname - offset byte_EF8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000E38                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000E50                 Elf64_Sym <offset aStdin - offset byte_EF8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000E50                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000E68                 Elf64_Sym <offset aProgramInvocat - offset byte_EF8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000E68                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000E80                 Elf64_Sym <offset aPrognameFull - offset byte_EF8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000E80                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000E98                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_EF8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000E98                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000EB0                 Elf64_Sym <offset aStderr - offset byte_EF8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000EB0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000EC8                 Elf64_Sym <offset aOptind - offset byte_EF8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000EC8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000EE0                 Elf64_Sym <offset aOptarg - offset byte_EF8, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000EE0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000EF8 ; ELF String Table
LOAD:0000000000000EF8 byte_EF8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000EF8                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000EF9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001510↓o
LOAD:0000000000000F03 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000F0A aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000F11 aFchmod         db 'fchmod',0           ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:0000000000000F11                                         ; LOAD:0000000000000B80↑o
LOAD:0000000000000F18 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:0000000000000F25 aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000F2D aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000F37 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000F3F aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000C40↑o
LOAD:0000000000000F45 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000F4D aFtruncate      db 'ftruncate',0        ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000F57 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000EC8↑o
LOAD:0000000000000F5E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000F66 aRpmatch        db 'rpmatch',0          ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000F6E aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000F78 aUnlinkat       db 'unlinkat',0         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000F81 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000F8A aFchdir         db 'fchdir',0           ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000F91 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000BC8↑o
LOAD:0000000000000F97 aReadChk        db '__read_chk',0       ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000FA2 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000FB3 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000FBC aUnlink         db 'unlink',0           ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000FC3 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000DC0↑o
LOAD:0000000000000FCC aMkdir          db 'mkdir',0            ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000FD2 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000FDA aFstatfs        db 'fstatfs',0          ; DATA XREF: LOAD:0000000000000CB8↑o
LOAD:0000000000000FE2 aRewinddir      db 'rewinddir',0        ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000FEC aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000FF2 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000E50↑o
LOAD:0000000000000FF8 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000FF8                                         ; LOAD:0000000000000D30↑o
LOAD:0000000000000FFE aGetpid         db 'getpid',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000001005 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:000000000000100C aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000100C                                         ; DATA XREF: LOAD:0000000000000E68↑o
LOAD:0000000000001024 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000001032 aFallocate      db 'fallocate',0        ; DATA XREF: LOAD:0000000000000868↑o
LOAD:000000000000103C aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000103C                                         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000001053 aIsatty         db 'isatty',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:000000000000105A aLchown         db 'lchown',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000001061 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000808↑o
LOAD:000000000000106F aGetppid        db 'getppid',0          ; DATA XREF: LOAD:0000000000000D18↑o
LOAD:0000000000001077 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:000000000000107E aRenameat       db 'renameat',0         ; DATA XREF: LOAD:0000000000000CE8↑o
LOAD:0000000000001087 aFutimens       db 'futimens',0         ; DATA XREF: LOAD:0000000000000C88↑o
LOAD:0000000000001090 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000001097 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000010A6 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000010AD aUtimensat      db 'utimensat',0        ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000010B7 aRmdir          db 'rmdir',0            ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000010BD aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000010CE aRead           db 'read',0             ; DATA XREF: LOAD:0000000000000820↑o
LOAD:00000000000010D3 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000010DA aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:0000000000000D00↑o
LOAD:00000000000010E6 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000B98↑o
LOAD:00000000000010EE aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000D60↑o
LOAD:00000000000010FC aFchown         db 'fchown',0           ; DATA XREF: LOAD:0000000000000C28↑o
LOAD:0000000000001103 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000E20↑o
LOAD:000000000000110A aFpathconf      db 'fpathconf',0        ; DATA XREF: LOAD:0000000000000910↑o
LOAD:000000000000110A                                         ; LOAD:0000000000000538↑o
LOAD:0000000000001114 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:000000000000111A aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000001121 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000001121                                         ; LOAD:00000000000007A8↑o
LOAD:0000000000001128 aEuidaccess     db 'euidaccess',0       ; DATA XREF: LOAD:0000000000000CA0↑o
LOAD:0000000000001133 aSymlinkat      db 'symlinkat',0        ; DATA XREF: LOAD:0000000000000DA8↑o
LOAD:0000000000001133                                         ; LOAD:0000000000000B08↑o
LOAD:000000000000113D aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000001144 aUmask          db 'umask',0            ; DATA XREF: LOAD:0000000000000988↑o
LOAD:000000000000114A aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:0000000000000C70↑o
LOAD:000000000000114A                                         ; LOAD:0000000000000568↑o
LOAD:0000000000001154 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000D90↑o
LOAD:000000000000115C aGetgid         db 'getgid',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000001163 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:000000000000116F aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000E08↑o
LOAD:000000000000117D aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000001184 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000EE0↑o
LOAD:000000000000118B aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000001196 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000EB0↑o
LOAD:000000000000119D aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000011A3 aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000011AA aReadlink       db 'readlink',0         ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000011B3 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000670↑o
LOAD:00000000000011BF aXmknod         db '__xmknod',0         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:00000000000011C8 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:00000000000011D1 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:00000000000011D8 aUtimes         db 'utimes',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:00000000000011DF aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:00000000000011EA aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000D48↑o
LOAD:00000000000011EA                                         ; LOAD:00000000000004D8↑o
LOAD:00000000000011F1 aGettimeofday   db 'gettimeofday',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000011FE aRename         db 'rename',0           ; DATA XREF: LOAD:0000000000000C58↑o
LOAD:0000000000001205 aExplicitBzeroC db '__explicit_bzero_chk',0
LOAD:0000000000001205                                         ; DATA XREF: LOAD:0000000000000BE0↑o
LOAD:000000000000121A aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000001222 aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000001230 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:000000000000123B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:000000000000123B                                         ; DATA XREF: LOAD:0000000000000E98↑o
LOAD:0000000000001259 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000001259                                         ; LOAD:0000000000000BF8↑o
LOAD:0000000000001260 aQsort          db 'qsort',0            ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000001266 aCanonicalizeFi db 'canonicalize_file_name',0
LOAD:0000000000001266                                         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:000000000000127D aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000DD8↑o
LOAD:000000000000128C aSyscall        db 'syscall',0          ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000001294 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:000000000000129C aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000012A2 aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000012A9 aFutimesat      db 'futimesat',0        ; DATA XREF: LOAD:0000000000000DF0↑o
LOAD:00000000000012B3 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:00000000000012BB aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000BB0↑o
LOAD:00000000000012C3 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:00000000000012C3                                         ; LOAD:0000000000000520↑o
LOAD:00000000000012D2 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000012DD aMkfifo         db 'mkfifo',0           ; DATA XREF: LOAD:0000000000000958↑o
LOAD:00000000000012E4 aFaccessat      db 'faccessat',0        ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000012EE aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:00000000000012F5 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000012F5                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000001307 aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:000000000000130D aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000001314 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000C10↑o
LOAD:000000000000131B aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000001326 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000001335 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:000000000000133A aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000E38↑o
LOAD:0000000000001345 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000E80↑o
LOAD:0000000000001355 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000CD0↑o
LOAD:0000000000001362 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001520↓o
LOAD:000000000000136C aGlibc225       db 'GLIBC_2.25',0       ; DATA XREF: LOAD:0000000000001530↓o
LOAD:0000000000001377 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000001540↓o
LOAD:0000000000001383 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001550↓o
LOAD:000000000000138E aGlibc210       db 'GLIBC_2.10',0       ; DATA XREF: LOAD:0000000000001560↓o
LOAD:0000000000001399 aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:0000000000001570↓o
LOAD:00000000000013A4 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001580↓o
LOAD:00000000000013AE aGlibc26        db 'GLIBC_2.6',0        ; DATA XREF: LOAD:0000000000001590↓o
LOAD:00000000000013B8 aGlibc225_0     db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000015A0↓o
LOAD:00000000000013C4 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000000000013C4                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:00000000000013E0 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000970↑o
LOAD:00000000000013EF aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000000000013EF                                         ; DATA XREF: LOAD:0000000000000D78↑o
LOAD:0000000000001409                 align 2
LOAD:000000000000140A ; ELF GNU Symbol Version Table
LOAD:000000000000140A                 dw 0
LOAD:000000000000140C                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:000000000000140E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000001410                 dw 3                    ; utimensat@@GLIBC_2.6
LOAD:0000000000001412                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000001414                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000001416                 dw 2                    ; unlink@@GLIBC_2.2.5
LOAD:0000000000001418                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:000000000000141A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:000000000000141C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:000000000000141E                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000001420                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000001422                 dw 4                    ; __read_chk@@GLIBC_2.4
LOAD:0000000000001424                 dw 2                    ; mkdir@@GLIBC_2.2.5
LOAD:0000000000001426                 dw 4                    ; unlinkat@@GLIBC_2.4
LOAD:0000000000001428                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:000000000000142A                 dw 2                    ; isatty@@GLIBC_2.2.5
LOAD:000000000000142C                 dw 4                    ; faccessat@@GLIBC_2.4
LOAD:000000000000142E                 dw 2                    ; readlink@@GLIBC_2.2.5
LOAD:0000000000001430                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000001432                 dw 5                    ; clock_gettime@@GLIBC_2.17
LOAD:0000000000001434                 dw 2                    ; write@@GLIBC_2.2.5
LOAD:0000000000001436                 dw 2                    ; getpid@@GLIBC_2.2.5
LOAD:0000000000001438                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:000000000000143A                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:000000000000143C                 dw 2                    ; pathconf@@GLIBC_2.2.5
LOAD:000000000000143E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000001440                 dw 2                    ; opendir@@GLIBC_2.2.5
LOAD:0000000000001442                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000001444                 dw 2                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000001446                 dw 2                    ; rmdir@@GLIBC_2.2.5
LOAD:0000000000001448                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:000000000000144A                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:000000000000144C                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:000000000000144E                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000001450                 dw 4                    ; openat@@GLIBC_2.4
LOAD:0000000000001452                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000001454                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000001456                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000001458                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:000000000000145A                 dw 4                    ; __fxstatat@@GLIBC_2.4
LOAD:000000000000145C                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:000000000000145E                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000001460                 dw 2                    ; ftruncate@@GLIBC_2.2.5
LOAD:0000000000001462                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000001464                 dw 2                    ; gettimeofday@@GLIBC_2.2.5
LOAD:0000000000001466                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000001468                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:000000000000146A                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:000000000000146C                 dw 2                    ; ioctl@@GLIBC_2.2.5
LOAD:000000000000146E                 dw 2                    ; canonicalize_file_name@@GLIBC_2.2.5
LOAD:0000000000001470                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000001472                 dw 2                    ; rewinddir@@GLIBC_2.2.5
LOAD:0000000000001474                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000001476                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:0000000000001478                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:000000000000147A                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:000000000000147C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:000000000000147E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000001480                 dw 6                    ; fallocate@@GLIBC_2.10
LOAD:0000000000001482                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000001484                 dw 2                    ; utimes@@GLIBC_2.2.5
LOAD:0000000000001486                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000001488                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:000000000000148A                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:000000000000148C                 dw 2                    ; dirfd@@GLIBC_2.2.5
LOAD:000000000000148E                 dw 2                    ; fpathconf@@GLIBC_2.2.5
LOAD:0000000000001490                 dw 2                    ; rpmatch@@GLIBC_2.2.5
LOAD:0000000000001492                 dw 2                    ; syscall@@GLIBC_2.2.5
LOAD:0000000000001494                 dw 2                    ; mkfifo@@GLIBC_2.2.5
LOAD:0000000000001496                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000001498                 dw 2                    ; umask@@GLIBC_2.2.5
LOAD:000000000000149A                 dw 7                    ; memcpy@@GLIBC_2.14
LOAD:000000000000149C                 dw 2                    ; __xmknod@@GLIBC_2.2.5
LOAD:000000000000149E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:00000000000014A0                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:00000000000014A2                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:00000000000014A4                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:00000000000014A6                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:00000000000014A8                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:00000000000014AA                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:00000000000014AC                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:00000000000014AE                 dw 2                    ; lchown@@GLIBC_2.2.5
LOAD:00000000000014B0                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:00000000000014B2                 dw 2                    ; fchdir@@GLIBC_2.2.5
LOAD:00000000000014B4                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:00000000000014B6                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:00000000000014B8                 dw 4                    ; linkat@@GLIBC_2.4
LOAD:00000000000014BA                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:00000000000014BC                 dw 8                    ; __printf_chk@@GLIBC_2.3.4
LOAD:00000000000014BE                 dw 2                    ; fchmod@@GLIBC_2.2.5
LOAD:00000000000014C0                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:00000000000014C2                 dw 2                    ; chmod@@GLIBC_2.2.5
LOAD:00000000000014C4                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:00000000000014C6                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:00000000000014C8                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:00000000000014CA                 dw 9                    ; __explicit_bzero_chk@@GLIBC_2.25
LOAD:00000000000014CC                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:00000000000014CE                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:00000000000014D0                 dw 2                    ; fchown@@GLIBC_2.2.5
LOAD:00000000000014D2                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:00000000000014D4                 dw 2                    ; rename@@GLIBC_2.2.5
LOAD:00000000000014D6                 dw 4                    ; fdopendir@@GLIBC_2.4
LOAD:00000000000014D8                 dw 3                    ; futimens@@GLIBC_2.6
LOAD:00000000000014DA                 dw 2                    ; euidaccess@@GLIBC_2.2.5
LOAD:00000000000014DC                 dw 2                    ; fstatfs@@GLIBC_2.2.5
LOAD:00000000000014DE                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:00000000000014E0                 dw 4                    ; renameat@@GLIBC_2.4
LOAD:00000000000014E2                 dw 2                    ; getpagesize@@GLIBC_2.2.5
LOAD:00000000000014E4                 dw 2                    ; getppid@@GLIBC_2.2.5
LOAD:00000000000014E6                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:00000000000014E8                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:00000000000014EA                 dw 8                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:00000000000014EC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:00000000000014EE                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:00000000000014F0                 dw 4                    ; symlinkat@@GLIBC_2.4
LOAD:00000000000014F2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:00000000000014F4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000014F6                 dw 4                    ; futimesat@@GLIBC_2.4
LOAD:00000000000014F8                 dw 0Ah                  ; __ctype_b_loc@@GLIBC_2.3
LOAD:00000000000014FA                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:00000000000014FC                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:00000000000014FE                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000001500                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000001502                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000001504                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000001506                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000001508                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:000000000000150A                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:000000000000150C                 dw 0
LOAD:000000000000150E                 dw 0
LOAD:0000000000001510 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001510                 Elf64_Verneed <1, 9, offset aLibcSo6 - offset byte_EF8, 10h, 0> ; "libc.so.6"
LOAD:0000000000001520                 Elf64_Vernaux <0D696913h, 0, 0Ah, offset aGlibc23 - offset byte_EF8, \ ; "GLIBC_2.3"
LOAD:0000000000001520                                10h>
LOAD:0000000000001530                 Elf64_Vernaux <6969185h, 0, 9, offset aGlibc225 - offset byte_EF8, \ ; "GLIBC_2.25"
LOAD:0000000000001530                                10h>
LOAD:0000000000001540                 Elf64_Vernaux <9691974h, 0, 8, offset aGlibc234 - offset byte_EF8, \ ; "GLIBC_2.3.4"
LOAD:0000000000001540                                10h>
LOAD:0000000000001550                 Elf64_Vernaux <6969194h, 0, 7, offset aGlibc214 - offset byte_EF8, \ ; "GLIBC_2.14"
LOAD:0000000000001550                                10h>
LOAD:0000000000001560                 Elf64_Vernaux <6969190h, 0, 6, offset aGlibc210 - offset byte_EF8, \ ; "GLIBC_2.10"
LOAD:0000000000001560                                10h>
LOAD:0000000000001570                 Elf64_Vernaux <6969197h, 0, 5, offset aGlibc217 - offset byte_EF8, \ ; "GLIBC_2.17"
LOAD:0000000000001570                                10h>
LOAD:0000000000001580                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_EF8, \ ; "GLIBC_2.4"
LOAD:0000000000001580                                10h>
LOAD:0000000000001590                 Elf64_Vernaux <0D696916h, 0, 3, offset aGlibc26 - offset byte_EF8, \ ; "GLIBC_2.6"
LOAD:0000000000001590                                10h>
LOAD:00000000000015A0                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225_0 - offset byte_EF8, \ ; "GLIBC_2.2.5"
LOAD:00000000000015A0                                0>
LOAD:00000000000015B0 ; ELF RELA Relocation Table
LOAD:00000000000015B0                 Elf64_Rela <21B790h, 8, 3580h> ; R_X86_64_RELATIVE +3580h
LOAD:00000000000015C8                 Elf64_Rela <21B798h, 8, 3540h> ; R_X86_64_RELATIVE +3540h
LOAD:00000000000015E0                 Elf64_Rela <21B7A0h, 8, 15099h> ; R_X86_64_RELATIVE +15099h
LOAD:00000000000015F8                 Elf64_Rela <21B7C0h, 8, 150A0h> ; R_X86_64_RELATIVE +150A0h
LOAD:0000000000001610                 Elf64_Rela <21B7E0h, 8, 150A8h> ; R_X86_64_RELATIVE +150A8h
LOAD:0000000000001628                 Elf64_Rela <21B800h, 8, 150AEh> ; R_X86_64_RELATIVE +150AEh
LOAD:0000000000001640                 Elf64_Rela <21B820h, 8, 150BAh> ; R_X86_64_RELATIVE +150BAh
LOAD:0000000000001658                 Elf64_Rela <21B840h, 8, 150C5h> ; R_X86_64_RELATIVE +150C5h
LOAD:0000000000001670                 Elf64_Rela <21B860h, 8, 150D9h> ; R_X86_64_RELATIVE +150D9h
LOAD:0000000000001688                 Elf64_Rela <21B880h, 8, 150F0h> ; R_X86_64_RELATIVE +150F0h
LOAD:00000000000016A0                 Elf64_Rela <21B8A0h, 8, 150C8h> ; R_X86_64_RELATIVE +150C8h
LOAD:00000000000016B8                 Elf64_Rela <21B8C0h, 8, 150F7h> ; R_X86_64_RELATIVE +150F7h
LOAD:00000000000016D0                 Elf64_Rela <21B8E0h, 8, 150FEh> ; R_X86_64_RELATIVE +150FEh
LOAD:00000000000016E8                 Elf64_Rela <21B900h, 8, 15106h> ; R_X86_64_RELATIVE +15106h
LOAD:0000000000001700                 Elf64_Rela <21B920h, 8, 1510Bh> ; R_X86_64_RELATIVE +1510Bh
LOAD:0000000000001718                 Elf64_Rela <21B960h, 8, 168AEh> ; R_X86_64_RELATIVE +168AEh
LOAD:0000000000001730                 Elf64_Rela <21B968h, 8, 168B3h> ; R_X86_64_RELATIVE +168B3h
LOAD:0000000000001748                 Elf64_Rela <21B970h, 8, 168B7h> ; R_X86_64_RELATIVE +168B7h
LOAD:0000000000001760                 Elf64_Rela <21B978h, 8, 168BEh> ; R_X86_64_RELATIVE +168BEh
LOAD:0000000000001778                 Elf64_Rela <21B980h, 8, 168C4h> ; R_X86_64_RELATIVE +168C4h
LOAD:0000000000001790                 Elf64_Rela <21B988h, 8, 168CDh> ; R_X86_64_RELATIVE +168CDh
LOAD:00000000000017A8                 Elf64_Rela <21B990h, 8, 168D1h> ; R_X86_64_RELATIVE +168D1h
LOAD:00000000000017C0                 Elf64_Rela <21B998h, 8, 16988h> ; R_X86_64_RELATIVE +16988h
LOAD:00000000000017D8                 Elf64_Rela <21B9C0h, 8, 16AA9h> ; R_X86_64_RELATIVE +16AA9h
LOAD:00000000000017F0                 Elf64_Rela <21B9C8h, 8, 16AB1h> ; R_X86_64_RELATIVE +16AB1h
LOAD:0000000000001808                 Elf64_Rela <21B9D0h, 8, 16AB7h> ; R_X86_64_RELATIVE +16AB7h
LOAD:0000000000001820                 Elf64_Rela <21B9D8h, 8, 16AC4h> ; R_X86_64_RELATIVE +16AC4h
LOAD:0000000000001838                 Elf64_Rela <21B9E0h, 8, 16AD1h> ; R_X86_64_RELATIVE +16AD1h
LOAD:0000000000001850                 Elf64_Rela <21B9E8h, 8, 1739Bh> ; R_X86_64_RELATIVE +1739Bh
LOAD:0000000000001868                 Elf64_Rela <21B9F0h, 8, 16AE5h> ; R_X86_64_RELATIVE +16AE5h
LOAD:0000000000001880                 Elf64_Rela <21B9F8h, 8, 16ACAh> ; R_X86_64_RELATIVE +16ACAh
LOAD:0000000000001898                 Elf64_Rela <21BA00h, 8, 14FECh> ; R_X86_64_RELATIVE +14FECh
LOAD:00000000000018B0                 Elf64_Rela <21BA08h, 8, 16AEDh> ; R_X86_64_RELATIVE +16AEDh
LOAD:00000000000018C8                 Elf64_Rela <21BA28h, 8, 0EF20h> ; R_X86_64_RELATIVE +0EF20h
LOAD:00000000000018E0                 Elf64_Rela <21BA30h, 8, 0EF00h> ; R_X86_64_RELATIVE +0EF00h
LOAD:00000000000018F8                 Elf64_Rela <21C008h, 8, 21C008h> ; R_X86_64_RELATIVE +21C008h
LOAD:0000000000001910                 Elf64_Rela <21C020h, 8, 16881h> ; R_X86_64_RELATIVE +16881h
LOAD:0000000000001928                 Elf64_Rela <21C080h, 8, 21C090h> ; R_X86_64_RELATIVE +21C090h
LOAD:0000000000001940                 Elf64_Rela <21C098h, 8, 21C5A0h> ; R_X86_64_RELATIVE +21C5A0h
LOAD:0000000000001958                 Elf64_Rela <21C0A0h, 8, 13660h> ; R_X86_64_RELATIVE +13660h
LOAD:0000000000001970                 Elf64_Rela <21BFC8h, 200000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001988                 Elf64_Rela <21BFD0h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000019A0                 Elf64_Rela <21BFD8h, 3900000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000019B8                 Elf64_Rela <21BFE0h, 4600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000019D0                 Elf64_Rela <21BFE8h, 7100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000019E8                 Elf64_Rela <21BFF0h, 7500000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001A00                 Elf64_Rela <21C0C0h, 7900000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001A18                 Elf64_Rela <21C0C8h, 7800000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001A30                 Elf64_Rela <21C0D0h, 7A00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001A48                 Elf64_Rela <21C0D8h, 7F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001A60                 Elf64_Rela <21C0E0h, 8000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001A78                 Elf64_Rela <21C0E8h, 7C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001A90                 Elf64_Rela <21C100h, 7E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001AA8 ; ELF JMPREL Relocation Table
LOAD:0000000000001AA8                 Elf64_Rela <21BC40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001AC0                 Elf64_Rela <21BC48h, 300000007h, 0> ; R_X86_64_JUMP_SLOT utimensat
LOAD:0000000000001AD8                 Elf64_Rela <21BC50h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001AF0                 Elf64_Rela <21BC58h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001B08                 Elf64_Rela <21BC60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT unlink
LOAD:0000000000001B20                 Elf64_Rela <21BC68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001B38                 Elf64_Rela <21BC70h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001B50                 Elf64_Rela <21BC78h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001B68                 Elf64_Rela <21BC80h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001B80                 Elf64_Rela <21BC88h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __read_chk
LOAD:0000000000001B98                 Elf64_Rela <21BC90h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT mkdir
LOAD:0000000000001BB0                 Elf64_Rela <21BC98h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT unlinkat
LOAD:0000000000001BC8                 Elf64_Rela <21BCA0h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000001BE0                 Elf64_Rela <21BCA8h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:0000000000001BF8                 Elf64_Rela <21BCB0h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT faccessat
LOAD:0000000000001C10                 Elf64_Rela <21BCB8h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000001C28                 Elf64_Rela <21BCC0h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001C40                 Elf64_Rela <21BCC8h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:0000000000001C58                 Elf64_Rela <21BCD0h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT write
LOAD:0000000000001C70                 Elf64_Rela <21BCD8h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getpid
LOAD:0000000000001C88                 Elf64_Rela <21BCE0h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001CA0                 Elf64_Rela <21BCE8h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001CB8                 Elf64_Rela <21BCF0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT pathconf
LOAD:0000000000001CD0                 Elf64_Rela <21BCF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001CE8                 Elf64_Rela <21BD00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT opendir
LOAD:0000000000001D00                 Elf64_Rela <21BD08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001D18                 Elf64_Rela <21BD10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:0000000000001D30                 Elf64_Rela <21BD18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT rmdir
LOAD:0000000000001D48                 Elf64_Rela <21BD20h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001D60                 Elf64_Rela <21BD28h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001D78                 Elf64_Rela <21BD30h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001D90                 Elf64_Rela <21BD38h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001DA8                 Elf64_Rela <21BD40h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000001DC0                 Elf64_Rela <21BD48h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001DD8                 Elf64_Rela <21BD50h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:0000000000001DF0                 Elf64_Rela <21BD58h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001E08                 Elf64_Rela <21BD60h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001E20                 Elf64_Rela <21BD68h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001E38                 Elf64_Rela <21BD70h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001E50                 Elf64_Rela <21BD78h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001E68                 Elf64_Rela <21BD80h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT ftruncate
LOAD:0000000000001E80                 Elf64_Rela <21BD88h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001E98                 Elf64_Rela <21BD90h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT gettimeofday
LOAD:0000000000001EB0                 Elf64_Rela <21BD98h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001EC8                 Elf64_Rela <21BDA0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001EE0                 Elf64_Rela <21BDA8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:0000000000001EF8                 Elf64_Rela <21BDB0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:0000000000001F10                 Elf64_Rela <21BDB8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT canonicalize_file_name
LOAD:0000000000001F28                 Elf64_Rela <21BDC0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001F40                 Elf64_Rela <21BDC8h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT rewinddir
LOAD:0000000000001F58                 Elf64_Rela <21BDD0h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001F70                 Elf64_Rela <21BDD8h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000001F88                 Elf64_Rela <21BDE0h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001FA0                 Elf64_Rela <21BDE8h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000001FB8                 Elf64_Rela <21BDF0h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001FD0                 Elf64_Rela <21BDF8h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT fallocate
LOAD:0000000000001FE8                 Elf64_Rela <21BE00h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000002000                 Elf64_Rela <21BE08h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT utimes
LOAD:0000000000002018                 Elf64_Rela <21BE10h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000002030                 Elf64_Rela <21BE18h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000002048                 Elf64_Rela <21BE20h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000002060                 Elf64_Rela <21BE28h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000002078                 Elf64_Rela <21BE30h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT fpathconf
LOAD:0000000000002090                 Elf64_Rela <21BE38h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT rpmatch
LOAD:00000000000020A8                 Elf64_Rela <21BE40h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT syscall
LOAD:00000000000020C0                 Elf64_Rela <21BE48h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT mkfifo
LOAD:00000000000020D8                 Elf64_Rela <21BE50h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT umask
LOAD:00000000000020F0                 Elf64_Rela <21BE58h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000002108                 Elf64_Rela <21BE60h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT __xmknod
LOAD:0000000000002120                 Elf64_Rela <21BE68h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000002138                 Elf64_Rela <21BE70h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000002150                 Elf64_Rela <21BE78h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000002168                 Elf64_Rela <21BE80h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000002180                 Elf64_Rela <21BE88h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000002198                 Elf64_Rela <21BE90h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000021B0                 Elf64_Rela <21BE98h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000021C8                 Elf64_Rela <21BEA0h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000021E0                 Elf64_Rela <21BEA8h, 5200000007h, 0> ; R_X86_64_JUMP_SLOT lchown
LOAD:00000000000021F8                 Elf64_Rela <21BEB0h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000002210                 Elf64_Rela <21BEB8h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT fchdir
LOAD:0000000000002228                 Elf64_Rela <21BEC0h, 5500000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000002240                 Elf64_Rela <21BEC8h, 5600000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000002258                 Elf64_Rela <21BED0h, 5700000007h, 0> ; R_X86_64_JUMP_SLOT linkat
LOAD:0000000000002270                 Elf64_Rela <21BED8h, 5800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000002288                 Elf64_Rela <21BEE0h, 5900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000022A0                 Elf64_Rela <21BEE8h, 5A00000007h, 0> ; R_X86_64_JUMP_SLOT fchmod
LOAD:00000000000022B8                 Elf64_Rela <21BEF0h, 5B00000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:00000000000022D0                 Elf64_Rela <21BEF8h, 5C00000007h, 0> ; R_X86_64_JUMP_SLOT chmod
LOAD:00000000000022E8                 Elf64_Rela <21BF00h, 5D00000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000002300                 Elf64_Rela <21BF08h, 5E00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000002318                 Elf64_Rela <21BF10h, 5F00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000002330                 Elf64_Rela <21BF18h, 6000000007h, 0> ; R_X86_64_JUMP_SLOT __explicit_bzero_chk
LOAD:0000000000002348                 Elf64_Rela <21BF20h, 6100000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000002360                 Elf64_Rela <21BF28h, 6200000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000002378                 Elf64_Rela <21BF30h, 6300000007h, 0> ; R_X86_64_JUMP_SLOT fchown
LOAD:0000000000002390                 Elf64_Rela <21BF38h, 6400000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000023A8                 Elf64_Rela <21BF40h, 6500000007h, 0> ; R_X86_64_JUMP_SLOT rename
LOAD:00000000000023C0                 Elf64_Rela <21BF48h, 6600000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:00000000000023D8                 Elf64_Rela <21BF50h, 6700000007h, 0> ; R_X86_64_JUMP_SLOT futimens
LOAD:00000000000023F0                 Elf64_Rela <21BF58h, 6800000007h, 0> ; R_X86_64_JUMP_SLOT euidaccess
LOAD:0000000000002408                 Elf64_Rela <21BF60h, 6900000007h, 0> ; R_X86_64_JUMP_SLOT fstatfs
LOAD:0000000000002420                 Elf64_Rela <21BF68h, 6A00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000002438                 Elf64_Rela <21BF70h, 6B00000007h, 0> ; R_X86_64_JUMP_SLOT renameat
LOAD:0000000000002450                 Elf64_Rela <21BF78h, 6C00000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:0000000000002468                 Elf64_Rela <21BF80h, 6D00000007h, 0> ; R_X86_64_JUMP_SLOT getppid
LOAD:0000000000002480                 Elf64_Rela <21BF88h, 6E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000002498                 Elf64_Rela <21BF90h, 6F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000024B0                 Elf64_Rela <21BF98h, 7000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000024C8                 Elf64_Rela <21BFA0h, 7200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000024E0                 Elf64_Rela <21BFA8h, 7300000007h, 0> ; R_X86_64_JUMP_SLOT symlinkat
LOAD:00000000000024F8                 Elf64_Rela <21BFB0h, 7400000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000002510                 Elf64_Rela <21BFB8h, 7600000007h, 0> ; R_X86_64_JUMP_SLOT futimesat
LOAD:0000000000002528                 Elf64_Rela <21BFC0h, 7700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000002528 LOAD            ends
LOAD:0000000000002528
.init:0000000000002540 ; ===========================================================================
.init:0000000000002540
.init:0000000000002540 ; Segment type: Pure code
.init:0000000000002540 ; Segment permissions: Read/Execute
.init:0000000000002540 _init           segment dword public 'CODE' use64
.init:0000000000002540                 assume cs:_init
.init:0000000000002540                 ;org 2540h
.init:0000000000002540                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000002540
.init:0000000000002540 ; =============== S U B R O U T I N E =======================================
.init:0000000000002540
.init:0000000000002540
.init:0000000000002540                 public _init_proc
.init:0000000000002540 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000002540                 sub     rsp, 8          ; _init
.init:0000000000002544                 mov     rax, cs:__gmon_start___ptr
.init:000000000000254B                 test    rax, rax
.init:000000000000254E                 jz      short loc_2552
.init:0000000000002550                 call    rax ; __gmon_start__
.init:0000000000002552
.init:0000000000002552 loc_2552:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000002552                 add     rsp, 8
.init:0000000000002556                 retn
.init:0000000000002556 _init_proc      endp
.init:0000000000002556
.init:0000000000002556 _init           ends
.init:0000000000002556
LOAD:0000000000002557 ; ===========================================================================
LOAD:0000000000002557
LOAD:0000000000002557 ; Segment type: Pure code
LOAD:0000000000002557 ; Segment permissions: Read/Execute
LOAD:0000000000002557 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002557                 assume cs:LOAD
LOAD:0000000000002557                 ;org 2557h
LOAD:0000000000002557                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002557                 align 20h
LOAD:0000000000002557 LOAD            ends
LOAD:0000000000002557
.plt:0000000000002560 ; ===========================================================================
.plt:0000000000002560
.plt:0000000000002560 ; Segment type: Pure code
.plt:0000000000002560 ; Segment permissions: Read/Execute
.plt:0000000000002560 _plt            segment para public 'CODE' use64
.plt:0000000000002560                 assume cs:_plt
.plt:0000000000002560                 ;org 2560h
.plt:0000000000002560                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000002560
.plt:0000000000002560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002560
.plt:0000000000002560
.plt:0000000000002560 sub_2560        proc near               ; CODE XREF: .plt:000000000000257B↓j
.plt:0000000000002560                                         ; .plt:000000000000258B↓j ...
.plt:0000000000002560 ; __unwind {
.plt:0000000000002560                 push    cs:qword_21BC30
.plt:0000000000002566                 jmp     cs:qword_21BC38
.plt:0000000000002566 sub_2560        endp
.plt:0000000000002566
.plt:0000000000002566 ; ---------------------------------------------------------------------------
.plt:000000000000256C                 align 10h
.plt:0000000000002570
.plt:0000000000002570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002570
.plt:0000000000002570 ; Attributes: thunk
.plt:0000000000002570
.plt:0000000000002570 ; char *getenv(const char *name)
.plt:0000000000002570 _getenv         proc near               ; CODE XREF: set_simple_backup_suffix+37↓p
.plt:0000000000002570                                         ; xget_version+15↓p
.plt:0000000000002570                 jmp     cs:getenv_ptr
.plt:0000000000002570 _getenv         endp
.plt:0000000000002570
.plt:0000000000002576 ; ---------------------------------------------------------------------------
.plt:0000000000002576                 push    0
.plt:000000000000257B                 jmp     sub_2560
.plt:0000000000002580
.plt:0000000000002580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002580
.plt:0000000000002580 ; Attributes: thunk
.plt:0000000000002580
.plt:0000000000002580 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
.plt:0000000000002580 _utimensat      proc near               ; CODE XREF: utimecmpat+4F9↓p
.plt:0000000000002580                                         ; utimecmpat+74F↓p ...
.plt:0000000000002580                 jmp     cs:utimensat_ptr
.plt:0000000000002580 _utimensat      endp
.plt:0000000000002580
.plt:0000000000002586 ; ---------------------------------------------------------------------------
.plt:0000000000002586                 push    1
.plt:000000000000258B                 jmp     sub_2560
.plt:0000000000002590
.plt:0000000000002590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002590
.plt:0000000000002590 ; Attributes: noreturn thunk
.plt:0000000000002590
.plt:0000000000002590 ; void __noreturn abort(void)
.plt:0000000000002590 _abort          proc near               ; CODE XREF: rm+82C↓p
.plt:0000000000002590                                         ; safe_hasher:loc_B85D↓p ...
.plt:0000000000002590                 jmp     cs:abort_ptr
.plt:0000000000002590 _abort          endp
.plt:0000000000002590
.plt:0000000000002596 ; ---------------------------------------------------------------------------
.plt:0000000000002596                 push    2
.plt:000000000000259B                 jmp     sub_2560
.plt:00000000000025A0
.plt:00000000000025A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025A0
.plt:00000000000025A0 ; Attributes: thunk
.plt:00000000000025A0
.plt:00000000000025A0 ; int *__errno_location(void)
.plt:00000000000025A0 ___errno_location proc near             ; CODE XREF: restore_default_fscreatecon_or_die+1↓p
.plt:00000000000025A0                                         ; main+54B↓p ...
.plt:00000000000025A0                 jmp     cs:__errno_location_ptr
.plt:00000000000025A0 ___errno_location endp
.plt:00000000000025A0
.plt:00000000000025A6 ; ---------------------------------------------------------------------------
.plt:00000000000025A6                 push    3
.plt:00000000000025AB                 jmp     sub_2560
.plt:00000000000025B0
.plt:00000000000025B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025B0
.plt:00000000000025B0 ; Attributes: thunk
.plt:00000000000025B0
.plt:00000000000025B0 ; int unlink(const char *name)
.plt:00000000000025B0 _unlink         proc near               ; CODE XREF: copy_internal+9C1↓p
.plt:00000000000025B0                                         ; copy_internal+23EA↓p ...
.plt:00000000000025B0                 jmp     cs:unlink_ptr
.plt:00000000000025B0 _unlink         endp
.plt:00000000000025B0
.plt:00000000000025B6 ; ---------------------------------------------------------------------------
.plt:00000000000025B6                 push    4
.plt:00000000000025BB                 jmp     sub_2560
.plt:00000000000025C0
.plt:00000000000025C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025C0
.plt:00000000000025C0 ; Attributes: thunk
.plt:00000000000025C0
.plt:00000000000025C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000025C0 _strncmp        proc near               ; CODE XREF: usage+2EC↓p
.plt:00000000000025C0                                         ; usage+3AD↓p ...
.plt:00000000000025C0                 jmp     cs:strncmp_ptr
.plt:00000000000025C0 _strncmp        endp
.plt:00000000000025C0
.plt:00000000000025C6 ; ---------------------------------------------------------------------------
.plt:00000000000025C6                 push    5
.plt:00000000000025CB                 jmp     sub_2560
.plt:00000000000025D0
.plt:00000000000025D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025D0
.plt:00000000000025D0 ; Attributes: noreturn thunk
.plt:00000000000025D0
.plt:00000000000025D0 ; void __noreturn _exit(int status)
.plt:00000000000025D0 __exit          proc near               ; CODE XREF: close_stdin+AE↓p
.plt:00000000000025D0                                         ; close_stdout+88↓p
.plt:00000000000025D0                 jmp     cs:_exit_ptr
.plt:00000000000025D0 __exit          endp
.plt:00000000000025D0
.plt:00000000000025D6 ; ---------------------------------------------------------------------------
.plt:00000000000025D6                 push    6
.plt:00000000000025DB                 jmp     sub_2560
.plt:00000000000025E0
.plt:00000000000025E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025E0
.plt:00000000000025E0 ; Attributes: thunk
.plt:00000000000025E0
.plt:00000000000025E0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000025E0 _strcpy         proc near               ; CODE XREF: copy_internal+28AD↓p
.plt:00000000000025E0                 jmp     cs:strcpy_ptr
.plt:00000000000025E0 _strcpy         endp
.plt:00000000000025E0
.plt:00000000000025E6 ; ---------------------------------------------------------------------------
.plt:00000000000025E6                 push    7
.plt:00000000000025EB                 jmp     sub_2560
.plt:00000000000025F0
.plt:00000000000025F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000025F0
.plt:00000000000025F0 ; Attributes: thunk
.plt:00000000000025F0
.plt:00000000000025F0 ; size_t __fpending(FILE *fp)
.plt:00000000000025F0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000025F0                 jmp     cs:__fpending_ptr
.plt:00000000000025F0 ___fpending     endp
.plt:00000000000025F0
.plt:00000000000025F6 ; ---------------------------------------------------------------------------
.plt:00000000000025F6                 push    8
.plt:00000000000025FB                 jmp     sub_2560
.plt:0000000000002600
.plt:0000000000002600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002600
.plt:0000000000002600 ; Attributes: thunk
.plt:0000000000002600
.plt:0000000000002600 ___read_chk     proc near               ; CODE XREF: randread_new+118↓p
.plt:0000000000002600                 jmp     cs:__read_chk_ptr
.plt:0000000000002600 ___read_chk     endp
.plt:0000000000002600
.plt:0000000000002606 ; ---------------------------------------------------------------------------
.plt:0000000000002606                 push    9
.plt:000000000000260B                 jmp     sub_2560
.plt:0000000000002610
.plt:0000000000002610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002610
.plt:0000000000002610 ; Attributes: thunk
.plt:0000000000002610
.plt:0000000000002610 ; int mkdir(const char *path, __mode_t mode)
.plt:0000000000002610 _mkdir          proc near               ; CODE XREF: copy_internal+14B6↓p
.plt:0000000000002610                                         ; try_dir+5↓j
.plt:0000000000002610                 jmp     cs:mkdir_ptr
.plt:0000000000002610 _mkdir          endp
.plt:0000000000002610
.plt:0000000000002616 ; ---------------------------------------------------------------------------
.plt:0000000000002616                 push    0Ah
.plt:000000000000261B                 jmp     sub_2560
.plt:0000000000002620
.plt:0000000000002620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002620
.plt:0000000000002620 ; Attributes: thunk
.plt:0000000000002620
.plt:0000000000002620 ; int unlinkat(int fd, const char *name, int flag)
.plt:0000000000002620 _unlinkat       proc near               ; CODE XREF: excise+3C↓p
.plt:0000000000002620                                         ; force_linkat+142↓p ...
.plt:0000000000002620                 jmp     cs:unlinkat_ptr
.plt:0000000000002620 _unlinkat       endp
.plt:0000000000002620
.plt:0000000000002626 ; ---------------------------------------------------------------------------
.plt:0000000000002626                 push    0Bh
.plt:000000000000262B                 jmp     sub_2560
.plt:0000000000002630
.plt:0000000000002630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002630
.plt:0000000000002630 ; Attributes: thunk
.plt:0000000000002630
.plt:0000000000002630 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000002630 _qsort          proc near               ; CODE XREF: streamsavedir+18F↓p
.plt:0000000000002630                                         ; fts_sort+7C↓p
.plt:0000000000002630                 jmp     cs:qsort_ptr
.plt:0000000000002630 _qsort          endp
.plt:0000000000002630
.plt:0000000000002636 ; ---------------------------------------------------------------------------
.plt:0000000000002636                 push    0Ch
.plt:000000000000263B                 jmp     sub_2560
.plt:0000000000002640
.plt:0000000000002640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002640
.plt:0000000000002640 ; Attributes: thunk
.plt:0000000000002640
.plt:0000000000002640 ; int isatty(int fd)
.plt:0000000000002640 _isatty         proc near               ; CODE XREF: main+117↓p
.plt:0000000000002640                 jmp     cs:isatty_ptr
.plt:0000000000002640 _isatty         endp
.plt:0000000000002640
.plt:0000000000002646 ; ---------------------------------------------------------------------------
.plt:0000000000002646                 push    0Dh
.plt:000000000000264B                 jmp     sub_2560
.plt:0000000000002650
.plt:0000000000002650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002650
.plt:0000000000002650 ; Attributes: thunk
.plt:0000000000002650
.plt:0000000000002650 ; int faccessat(int fd, const char *file, int type, int flag)
.plt:0000000000002650 _faccessat      proc near               ; CODE XREF: prompt+429↓p
.plt:0000000000002650                 jmp     cs:faccessat_ptr
.plt:0000000000002650 _faccessat      endp
.plt:0000000000002650
.plt:0000000000002656 ; ---------------------------------------------------------------------------
.plt:0000000000002656                 push    0Eh
.plt:000000000000265B                 jmp     sub_2560
.plt:0000000000002660
.plt:0000000000002660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002660
.plt:0000000000002660 ; Attributes: thunk
.plt:0000000000002660
.plt:0000000000002660 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:0000000000002660 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:0000000000002660                 jmp     cs:readlink_ptr
.plt:0000000000002660 _readlink       endp
.plt:0000000000002660
.plt:0000000000002666 ; ---------------------------------------------------------------------------
.plt:0000000000002666                 push    0Fh
.plt:000000000000266B                 jmp     sub_2560
.plt:0000000000002670
.plt:0000000000002670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002670
.plt:0000000000002670 ; Attributes: thunk
.plt:0000000000002670
.plt:0000000000002670 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000002670 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000002670                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000002670                 jmp     cs:fcntl_ptr
.plt:0000000000002670 _fcntl          endp
.plt:0000000000002670
.plt:0000000000002676 ; ---------------------------------------------------------------------------
.plt:0000000000002676                 push    10h
.plt:000000000000267B                 jmp     sub_2560
.plt:0000000000002680
.plt:0000000000002680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002680
.plt:0000000000002680 ; Attributes: thunk
.plt:0000000000002680
.plt:0000000000002680 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:0000000000002680 _clock_gettime  proc near               ; CODE XREF: gettime+5↓j
.plt:0000000000002680                                         ; current_timespec+19↓p
.plt:0000000000002680                 jmp     cs:clock_gettime_ptr
.plt:0000000000002680 _clock_gettime  endp
.plt:0000000000002680
.plt:0000000000002686 ; ---------------------------------------------------------------------------
.plt:0000000000002686                 push    11h
.plt:000000000000268B                 jmp     sub_2560
.plt:0000000000002690
.plt:0000000000002690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002690
.plt:0000000000002690 ; Attributes: thunk
.plt:0000000000002690
.plt:0000000000002690 ; ssize_t write(int fd, const void *buf, size_t n)
.plt:0000000000002690 _write          proc near               ; CODE XREF: safe_write+21↓p
.plt:0000000000002690                 jmp     cs:write_ptr
.plt:0000000000002690 _write          endp
.plt:0000000000002690
.plt:0000000000002696 ; ---------------------------------------------------------------------------
.plt:0000000000002696                 push    12h
.plt:000000000000269B                 jmp     sub_2560
.plt:00000000000026A0
.plt:00000000000026A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026A0
.plt:00000000000026A0 ; Attributes: thunk
.plt:00000000000026A0
.plt:00000000000026A0 ; __pid_t getpid(void)
.plt:00000000000026A0 _getpid         proc near               ; CODE XREF: randread_new+197↓p
.plt:00000000000026A0                                         ; randread_new+2C2↓p
.plt:00000000000026A0                 jmp     cs:getpid_ptr
.plt:00000000000026A0 _getpid         endp
.plt:00000000000026A0
.plt:00000000000026A6 ; ---------------------------------------------------------------------------
.plt:00000000000026A6                 push    13h
.plt:00000000000026AB                 jmp     sub_2560
.plt:00000000000026B0
.plt:00000000000026B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026B0
.plt:00000000000026B0 ; Attributes: thunk
.plt:00000000000026B0
.plt:00000000000026B0 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000026B0 _fread_unlocked proc near               ; CODE XREF: randread+61↓p
.plt:00000000000026B0                 jmp     cs:fread_unlocked_ptr
.plt:00000000000026B0 _fread_unlocked endp
.plt:00000000000026B0
.plt:00000000000026B6 ; ---------------------------------------------------------------------------
.plt:00000000000026B6                 push    14h
.plt:00000000000026BB                 jmp     sub_2560
.plt:00000000000026C0
.plt:00000000000026C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026C0
.plt:00000000000026C0 ; Attributes: thunk
.plt:00000000000026C0
.plt:00000000000026C0 ; char *textdomain(const char *domainname)
.plt:00000000000026C0 _textdomain     proc near               ; CODE XREF: main+61↓p
.plt:00000000000026C0                 jmp     cs:textdomain_ptr
.plt:00000000000026C0 _textdomain     endp
.plt:00000000000026C0
.plt:00000000000026C6 ; ---------------------------------------------------------------------------
.plt:00000000000026C6                 push    15h
.plt:00000000000026CB                 jmp     sub_2560
.plt:00000000000026D0
.plt:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026D0
.plt:00000000000026D0 ; Attributes: thunk
.plt:00000000000026D0
.plt:00000000000026D0 ; __int64 pathconf(const char *path, int name)
.plt:00000000000026D0 _pathconf       proc near               ; CODE XREF: backupfile_internal+5AF↓p
.plt:00000000000026D0                 jmp     cs:pathconf_ptr
.plt:00000000000026D0 _pathconf       endp
.plt:00000000000026D0
.plt:00000000000026D6 ; ---------------------------------------------------------------------------
.plt:00000000000026D6                 push    16h
.plt:00000000000026DB                 jmp     sub_2560
.plt:00000000000026E0
.plt:00000000000026E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026E0
.plt:00000000000026E0 ; Attributes: thunk
.plt:00000000000026E0
.plt:00000000000026E0 ; int fclose(FILE *stream)
.plt:00000000000026E0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000026E0                                         ; rpl_fclose+6B↓j
.plt:00000000000026E0                 jmp     cs:fclose_ptr
.plt:00000000000026E0 _fclose         endp
.plt:00000000000026E0
.plt:00000000000026E6 ; ---------------------------------------------------------------------------
.plt:00000000000026E6                 push    17h
.plt:00000000000026EB                 jmp     sub_2560
.plt:00000000000026F0
.plt:00000000000026F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026F0
.plt:00000000000026F0 ; Attributes: thunk
.plt:00000000000026F0
.plt:00000000000026F0 ; DIR *opendir(const char *name)
.plt:00000000000026F0 _opendir        proc near               ; CODE XREF: opendir_safer+8↓p
.plt:00000000000026F0                 jmp     cs:opendir_ptr
.plt:00000000000026F0 _opendir        endp
.plt:00000000000026F0
.plt:00000000000026F6 ; ---------------------------------------------------------------------------
.plt:00000000000026F6                 push    18h
.plt:00000000000026FB                 jmp     sub_2560
.plt:0000000000002700
.plt:0000000000002700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002700
.plt:0000000000002700 ; Attributes: thunk
.plt:0000000000002700
.plt:0000000000002700 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000002700 _bindtextdomain proc near               ; CODE XREF: main+55↓p
.plt:0000000000002700                 jmp     cs:bindtextdomain_ptr
.plt:0000000000002700 _bindtextdomain endp
.plt:0000000000002700
.plt:0000000000002706 ; ---------------------------------------------------------------------------
.plt:0000000000002706                 push    19h
.plt:000000000000270B                 jmp     sub_2560
.plt:0000000000002710
.plt:0000000000002710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002710
.plt:0000000000002710 ; Attributes: thunk
.plt:0000000000002710
.plt:0000000000002710 ; char *stpcpy(char *dest, const char *src)
.plt:0000000000002710 _stpcpy         proc near               ; CODE XREF: streamsavedir+1B8↓p
.plt:0000000000002710                 jmp     cs:stpcpy_ptr
.plt:0000000000002710 _stpcpy         endp
.plt:0000000000002710
.plt:0000000000002716 ; ---------------------------------------------------------------------------
.plt:0000000000002716                 push    1Ah
.plt:000000000000271B                 jmp     sub_2560
.plt:0000000000002720
.plt:0000000000002720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002720
.plt:0000000000002720 ; Attributes: thunk
.plt:0000000000002720
.plt:0000000000002720 ; int rmdir(const char *path)
.plt:0000000000002720 _rmdir          proc near               ; CODE XREF: copy_internal:loc_7360↓p
.plt:0000000000002720                 jmp     cs:rmdir_ptr
.plt:0000000000002720 _rmdir          endp
.plt:0000000000002720
.plt:0000000000002726 ; ---------------------------------------------------------------------------
.plt:0000000000002726                 push    1Bh
.plt:000000000000272B                 jmp     sub_2560
.plt:0000000000002730
.plt:0000000000002730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002730
.plt:0000000000002730 ; Attributes: thunk
.plt:0000000000002730
.plt:0000000000002730 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000002730 _dcgettext      proc near               ; CODE XREF: restore_default_fscreatecon_or_die+1D↓p
.plt:0000000000002730                                         ; main+2D3↓p ...
.plt:0000000000002730                 jmp     cs:dcgettext_ptr
.plt:0000000000002730 _dcgettext      endp
.plt:0000000000002730
.plt:0000000000002736 ; ---------------------------------------------------------------------------
.plt:0000000000002736                 push    1Ch
.plt:000000000000273B                 jmp     sub_2560
.plt:0000000000002740
.plt:0000000000002740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002740
.plt:0000000000002740 ; Attributes: thunk
.plt:0000000000002740
.plt:0000000000002740 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000002740 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000002740                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000002740 ___ctype_get_mb_cur_max endp
.plt:0000000000002740
.plt:0000000000002746 ; ---------------------------------------------------------------------------
.plt:0000000000002746                 push    1Dh
.plt:000000000000274B                 jmp     sub_2560
.plt:0000000000002750
.plt:0000000000002750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002750
.plt:0000000000002750 ; Attributes: thunk
.plt:0000000000002750
.plt:0000000000002750 ; size_t strlen(const char *s)
.plt:0000000000002750 _strlen         proc near               ; CODE XREF: copy_internal+D6D↓p
.plt:0000000000002750                                         ; copy_internal+D8F↓p ...
.plt:0000000000002750                 jmp     cs:strlen_ptr
.plt:0000000000002750 _strlen         endp
.plt:0000000000002750
.plt:0000000000002756 ; ---------------------------------------------------------------------------
.plt:0000000000002756                 push    1Eh
.plt:000000000000275B                 jmp     sub_2560
.plt:0000000000002760
.plt:0000000000002760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002760
.plt:0000000000002760 ; Attributes: thunk
.plt:0000000000002760
.plt:0000000000002760 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002760 ___lxstat       proc near               ; CODE XREF: rm+53E↓p
.plt:0000000000002760                                         ; copy_internal+5D8↓p ...
.plt:0000000000002760                 jmp     cs:__lxstat_ptr
.plt:0000000000002760 ___lxstat       endp
.plt:0000000000002760
.plt:0000000000002766 ; ---------------------------------------------------------------------------
.plt:0000000000002766                 push    1Fh
.plt:000000000000276B                 jmp     sub_2560
.plt:0000000000002770
.plt:0000000000002770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002770
.plt:0000000000002770 ; Attributes: thunk
.plt:0000000000002770
.plt:0000000000002770 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000002770 _openat         proc near               ; CODE XREF: prompt+74↓p
.plt:0000000000002770                                         ; rm+24C↓p ...
.plt:0000000000002770                 jmp     cs:openat_ptr
.plt:0000000000002770 _openat         endp
.plt:0000000000002770
.plt:0000000000002776 ; ---------------------------------------------------------------------------
.plt:0000000000002776                 push    20h ; ' '
.plt:000000000000277B                 jmp     sub_2560
.plt:0000000000002780
.plt:0000000000002780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002780
.plt:0000000000002780 ; Attributes: noreturn thunk
.plt:0000000000002780
.plt:0000000000002780 ___stack_chk_fail proc near             ; CODE XREF: main:loc_346E↓p
.plt:0000000000002780                                         ; do_move:loc_3684↓p ...
.plt:0000000000002780                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000002780 ___stack_chk_fail endp
.plt:0000000000002780
.plt:0000000000002786 ; ---------------------------------------------------------------------------
.plt:0000000000002786                 push    21h ; '!'
.plt:000000000000278B                 jmp     sub_2560
.plt:0000000000002790
.plt:0000000000002790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002790
.plt:0000000000002790 ; Attributes: thunk
.plt:0000000000002790
.plt:0000000000002790 ; __uid_t getuid(void)
.plt:0000000000002790 _getuid         proc near               ; CODE XREF: randread_new+1C4↓p
.plt:0000000000002790                 jmp     cs:getuid_ptr
.plt:0000000000002790 _getuid         endp
.plt:0000000000002790
.plt:0000000000002796 ; ---------------------------------------------------------------------------
.plt:0000000000002796                 push    22h ; '"'
.plt:000000000000279B                 jmp     sub_2560
.plt:00000000000027A0
.plt:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027A0
.plt:00000000000027A0 ; Attributes: thunk
.plt:00000000000027A0
.plt:00000000000027A0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000027A0 _getopt_long    proc near               ; CODE XREF: main+17E↓p
.plt:00000000000027A0                 jmp     cs:getopt_long_ptr
.plt:00000000000027A0 _getopt_long    endp
.plt:00000000000027A0
.plt:00000000000027A6 ; ---------------------------------------------------------------------------
.plt:00000000000027A6                 push    23h ; '#'
.plt:00000000000027AB                 jmp     sub_2560
.plt:00000000000027B0
.plt:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027B0
.plt:00000000000027B0 ; Attributes: thunk
.plt:00000000000027B0
.plt:00000000000027B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000027B0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000027B0                 jmp     cs:mbrtowc_ptr
.plt:00000000000027B0 _mbrtowc        endp
.plt:00000000000027B0
.plt:00000000000027B6 ; ---------------------------------------------------------------------------
.plt:00000000000027B6                 push    24h ; '$'
.plt:00000000000027BB                 jmp     sub_2560
.plt:00000000000027C0
.plt:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027C0
.plt:00000000000027C0 ; Attributes: thunk
.plt:00000000000027C0
.plt:00000000000027C0 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:00000000000027C0 ___fxstatat     proc near               ; CODE XREF: excise+19F↓p
.plt:00000000000027C0                                         ; cache_fstatat_constprop_3+33↓p ...
.plt:00000000000027C0                 jmp     cs:__fxstatat_ptr
.plt:00000000000027C0 ___fxstatat     endp
.plt:00000000000027C0
.plt:00000000000027C6 ; ---------------------------------------------------------------------------
.plt:00000000000027C6                 push    25h ; '%'
.plt:00000000000027CB                 jmp     sub_2560
.plt:00000000000027D0
.plt:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027D0
.plt:00000000000027D0 ; Attributes: thunk
.plt:00000000000027D0
.plt:00000000000027D0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000027D0 ___overflow     proc near               ; CODE XREF: emit_verbose+B1↓j
.plt:00000000000027D0                                         ; argmatch_valid+11B↓j
.plt:00000000000027D0                 jmp     cs:__overflow_ptr
.plt:00000000000027D0 ___overflow     endp
.plt:00000000000027D0
.plt:00000000000027D6 ; ---------------------------------------------------------------------------
.plt:00000000000027D6                 push    26h ; '&'
.plt:00000000000027DB                 jmp     sub_2560
.plt:00000000000027E0
.plt:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027E0
.plt:00000000000027E0 ; Attributes: thunk
.plt:00000000000027E0
.plt:00000000000027E0 ; char *strrchr(const char *s, int c)
.plt:00000000000027E0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000027E0                                         ; rpl_fts_read+2F6↓p
.plt:00000000000027E0                 jmp     cs:strrchr_ptr
.plt:00000000000027E0 _strrchr        endp
.plt:00000000000027E0
.plt:00000000000027E6 ; ---------------------------------------------------------------------------
.plt:00000000000027E6                 push    27h ; '''
.plt:00000000000027EB                 jmp     sub_2560
.plt:00000000000027F0
.plt:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027F0
.plt:00000000000027F0 ; Attributes: thunk
.plt:00000000000027F0
.plt:00000000000027F0 ; int ftruncate(int fd, __off_t length)
.plt:00000000000027F0 _ftruncate      proc near               ; CODE XREF: copy_internal+3B6D↓p
.plt:00000000000027F0                                         ; copy_internal+3C42↓p
.plt:00000000000027F0                 jmp     cs:ftruncate_ptr
.plt:00000000000027F0 _ftruncate      endp
.plt:00000000000027F0
.plt:00000000000027F6 ; ---------------------------------------------------------------------------
.plt:00000000000027F6                 push    28h ; '('
.plt:00000000000027FB                 jmp     sub_2560
.plt:0000000000002800
.plt:0000000000002800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002800
.plt:0000000000002800 ; Attributes: thunk
.plt:0000000000002800
.plt:0000000000002800 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000002800 _lseek          proc near               ; CODE XREF: create_hole+1D↓p
.plt:0000000000002800                                         ; copy_internal+322B↓p ...
.plt:0000000000002800                 jmp     cs:lseek_ptr
.plt:0000000000002800 _lseek          endp
.plt:0000000000002800
.plt:0000000000002806 ; ---------------------------------------------------------------------------
.plt:0000000000002806                 push    29h ; ')'
.plt:000000000000280B                 jmp     sub_2560
.plt:0000000000002810
.plt:0000000000002810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002810
.plt:0000000000002810 ; Attributes: thunk
.plt:0000000000002810
.plt:0000000000002810 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
.plt:0000000000002810 _gettimeofday   proc near               ; CODE XREF: randread_new+188↓p
.plt:0000000000002810                                         ; randread_new+278↓p
.plt:0000000000002810                 jmp     cs:gettimeofday_ptr
.plt:0000000000002810 _gettimeofday   endp
.plt:0000000000002810
.plt:0000000000002816 ; ---------------------------------------------------------------------------
.plt:0000000000002816                 push    2Ah ; '*'
.plt:000000000000281B                 jmp     sub_2560
.plt:0000000000002820
.plt:0000000000002820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002820
.plt:0000000000002820 ; Attributes: noreturn thunk
.plt:0000000000002820
.plt:0000000000002820 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000002820 ___assert_fail  proc near               ; CODE XREF: main+6BA↓p
.plt:0000000000002820                                         ; do_move+113↓p ...
.plt:0000000000002820                 jmp     cs:__assert_fail_ptr
.plt:0000000000002820 ___assert_fail  endp
.plt:0000000000002820
.plt:0000000000002826 ; ---------------------------------------------------------------------------
.plt:0000000000002826                 push    2Bh ; '+'
.plt:000000000000282B                 jmp     sub_2560
.plt:0000000000002830
.plt:0000000000002830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002830
.plt:0000000000002830 ; Attributes: thunk
.plt:0000000000002830
.plt:0000000000002830 ; void *memset(void *s, int c, size_t n)
.plt:0000000000002830 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000002830                                         ; xzalloc+12↓j
.plt:0000000000002830                 jmp     cs:memset_ptr
.plt:0000000000002830 _memset         endp
.plt:0000000000002830
.plt:0000000000002836 ; ---------------------------------------------------------------------------
.plt:0000000000002836                 push    2Ch ; ','
.plt:000000000000283B                 jmp     sub_2560
.plt:0000000000002840
.plt:0000000000002840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002840
.plt:0000000000002840 ; Attributes: thunk
.plt:0000000000002840
.plt:0000000000002840 ; __uid_t geteuid(void)
.plt:0000000000002840 _geteuid        proc near               ; CODE XREF: cp_options_default+1B↓p
.plt:0000000000002840                                         ; copy_internal:loc_999E↓p ...
.plt:0000000000002840                 jmp     cs:geteuid_ptr
.plt:0000000000002840 _geteuid        endp
.plt:0000000000002840
.plt:0000000000002846 ; ---------------------------------------------------------------------------
.plt:0000000000002846                 push    2Dh ; '-'
.plt:000000000000284B                 jmp     sub_2560
.plt:0000000000002850
.plt:0000000000002850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002850
.plt:0000000000002850 ; Attributes: thunk
.plt:0000000000002850
.plt:0000000000002850 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:0000000000002850 _ioctl          proc near               ; CODE XREF: copy_internal+3D57↓p
.plt:0000000000002850                                         ; extent_scan_read+79↓p
.plt:0000000000002850                 jmp     cs:ioctl_ptr
.plt:0000000000002850 _ioctl          endp
.plt:0000000000002850
.plt:0000000000002856 ; ---------------------------------------------------------------------------
.plt:0000000000002856                 push    2Eh ; '.'
.plt:000000000000285B                 jmp     sub_2560
.plt:0000000000002860
.plt:0000000000002860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002860
.plt:0000000000002860 ; Attributes: thunk
.plt:0000000000002860
.plt:0000000000002860 ; char *canonicalize_file_name(const char *name)
.plt:0000000000002860 _canonicalize_file_name proc near       ; CODE XREF: copy_internal+1717↓p
.plt:0000000000002860                 jmp     cs:canonicalize_file_name_ptr
.plt:0000000000002860 _canonicalize_file_name endp
.plt:0000000000002860
.plt:0000000000002866 ; ---------------------------------------------------------------------------
.plt:0000000000002866                 push    2Fh ; '/'
.plt:000000000000286B                 jmp     sub_2560
.plt:0000000000002870
.plt:0000000000002870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002870
.plt:0000000000002870 ; Attributes: thunk
.plt:0000000000002870
.plt:0000000000002870 ; int close(int fd)
.plt:0000000000002870 _close          proc near               ; CODE XREF: prompt+2F2↓p
.plt:0000000000002870                                         ; rm+7A4↓p ...
.plt:0000000000002870                 jmp     cs:close_ptr
.plt:0000000000002870 _close          endp
.plt:0000000000002870
.plt:0000000000002876 ; ---------------------------------------------------------------------------
.plt:0000000000002876                 push    30h ; '0'
.plt:000000000000287B                 jmp     sub_2560
.plt:0000000000002880
.plt:0000000000002880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002880
.plt:0000000000002880 ; Attributes: thunk
.plt:0000000000002880
.plt:0000000000002880 ; void rewinddir(DIR *dirp)
.plt:0000000000002880 _rewinddir      proc near               ; CODE XREF: backupfile_internal+101↓p
.plt:0000000000002880                 jmp     cs:rewinddir_ptr
.plt:0000000000002880 _rewinddir      endp
.plt:0000000000002880
.plt:0000000000002886 ; ---------------------------------------------------------------------------
.plt:0000000000002886                 push    31h ; '1'
.plt:000000000000288B                 jmp     sub_2560
.plt:0000000000002890
.plt:0000000000002890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002890
.plt:0000000000002890 ; Attributes: thunk
.plt:0000000000002890
.plt:0000000000002890 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000002890 _strspn         proc near               ; CODE XREF: try_tempname_len+68↓p
.plt:0000000000002890                 jmp     cs:strspn_ptr
.plt:0000000000002890 _strspn         endp
.plt:0000000000002890
.plt:0000000000002896 ; ---------------------------------------------------------------------------
.plt:0000000000002896                 push    32h ; '2'
.plt:000000000000289B                 jmp     sub_2560
.plt:00000000000028A0
.plt:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028A0
.plt:00000000000028A0 ; Attributes: thunk
.plt:00000000000028A0
.plt:00000000000028A0 ; int closedir(DIR *dirp)
.plt:00000000000028A0 _closedir       proc near               ; CODE XREF: prompt+E0↓p
.plt:00000000000028A0                                         ; prompt+316↓p ...
.plt:00000000000028A0                 jmp     cs:closedir_ptr
.plt:00000000000028A0 _closedir       endp
.plt:00000000000028A0
.plt:00000000000028A6 ; ---------------------------------------------------------------------------
.plt:00000000000028A6                 push    33h ; '3'
.plt:00000000000028AB                 jmp     sub_2560
.plt:00000000000028B0
.plt:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028B0
.plt:00000000000028B0 ; Attributes: thunk
.plt:00000000000028B0
.plt:00000000000028B0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000028B0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000028B0                                         ; fadvise+16↓j
.plt:00000000000028B0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000028B0 _posix_fadvise  endp
.plt:00000000000028B0
.plt:00000000000028B6 ; ---------------------------------------------------------------------------
.plt:00000000000028B6                 push    34h ; '4'
.plt:00000000000028BB                 jmp     sub_2560
.plt:00000000000028C0
.plt:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028C0
.plt:00000000000028C0 ; Attributes: thunk
.plt:00000000000028C0
.plt:00000000000028C0 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:00000000000028C0 _read           proc near               ; CODE XREF: sparse_copy+B0↓p
.plt:00000000000028C0                 jmp     cs:read_ptr
.plt:00000000000028C0 _read           endp
.plt:00000000000028C0
.plt:00000000000028C6 ; ---------------------------------------------------------------------------
.plt:00000000000028C6                 push    35h ; '5'
.plt:00000000000028CB                 jmp     sub_2560
.plt:00000000000028D0
.plt:00000000000028D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028D0
.plt:00000000000028D0 ; Attributes: thunk
.plt:00000000000028D0
.plt:00000000000028D0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000028D0 _memcmp         proc near               ; CODE XREF: sparse_copy+1A2↓p
.plt:00000000000028D0                                         ; copy_internal+2832↓p ...
.plt:00000000000028D0                 jmp     cs:memcmp_ptr
.plt:00000000000028D0 _memcmp         endp
.plt:00000000000028D0
.plt:00000000000028D6 ; ---------------------------------------------------------------------------
.plt:00000000000028D6                 push    36h ; '6'
.plt:00000000000028DB                 jmp     sub_2560
.plt:00000000000028E0
.plt:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028E0
.plt:00000000000028E0 ; Attributes: thunk
.plt:00000000000028E0
.plt:00000000000028E0 ; int fallocate(int fd, int mode, __off_t offset, __off_t len)
.plt:00000000000028E0 _fallocate      proc near               ; CODE XREF: punch_hole+C↓p
.plt:00000000000028E0                 jmp     cs:fallocate_ptr
.plt:00000000000028E0 _fallocate      endp
.plt:00000000000028E0
.plt:00000000000028E6 ; ---------------------------------------------------------------------------
.plt:00000000000028E6                 push    37h ; '7'
.plt:00000000000028EB                 jmp     sub_2560
.plt:00000000000028F0
.plt:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028F0
.plt:00000000000028F0 ; Attributes: thunk
.plt:00000000000028F0
.plt:00000000000028F0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000028F0 _fputs_unlocked proc near               ; CODE XREF: usage+A3↓p
.plt:00000000000028F0                                         ; usage+C8↓p ...
.plt:00000000000028F0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000028F0 _fputs_unlocked endp
.plt:00000000000028F0
.plt:00000000000028F6 ; ---------------------------------------------------------------------------
.plt:00000000000028F6                 push    38h ; '8'
.plt:00000000000028FB                 jmp     sub_2560
.plt:0000000000002900
.plt:0000000000002900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002900
.plt:0000000000002900 ; Attributes: thunk
.plt:0000000000002900
.plt:0000000000002900 ; int utimes(const char *file, const struct timeval tvp[2])
.plt:0000000000002900 _utimes         proc near               ; CODE XREF: fdutimens+350↓p
.plt:0000000000002900                 jmp     cs:utimes_ptr
.plt:0000000000002900 _utimes         endp
.plt:0000000000002900
.plt:0000000000002906 ; ---------------------------------------------------------------------------
.plt:0000000000002906                 push    39h ; '9'
.plt:000000000000290B                 jmp     sub_2560
.plt:0000000000002910
.plt:0000000000002910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002910
.plt:0000000000002910 ; Attributes: thunk
.plt:0000000000002910
.plt:0000000000002910 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002910 _calloc         proc near               ; CODE XREF: write_zeros+74↓p
.plt:0000000000002910                                         ; hash_initialize+B1↓p ...
.plt:0000000000002910                 jmp     cs:calloc_ptr
.plt:0000000000002910 _calloc         endp
.plt:0000000000002910
.plt:0000000000002916 ; ---------------------------------------------------------------------------
.plt:0000000000002916                 push    3Ah ; ':'
.plt:000000000000291B                 jmp     sub_2560
.plt:0000000000002920
.plt:0000000000002920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002920
.plt:0000000000002920 ; Attributes: thunk
.plt:0000000000002920
.plt:0000000000002920 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000002920 ___getdelim     proc near               ; CODE XREF: yesno+3F↓p
.plt:0000000000002920                 jmp     cs:__getdelim_ptr
.plt:0000000000002920 ___getdelim     endp
.plt:0000000000002920
.plt:0000000000002926 ; ---------------------------------------------------------------------------
.plt:0000000000002926                 push    3Bh ; ';'
.plt:000000000000292B                 jmp     sub_2560
.plt:0000000000002930
.plt:0000000000002930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002930
.plt:0000000000002930 ; Attributes: thunk
.plt:0000000000002930
.plt:0000000000002930 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002930 _strcmp         proc near               ; CODE XREF: copy_internal+284E↓p
.plt:0000000000002930                                         ; copy_internal+38F4↓p ...
.plt:0000000000002930                 jmp     cs:strcmp_ptr
.plt:0000000000002930 _strcmp         endp
.plt:0000000000002930
.plt:0000000000002936 ; ---------------------------------------------------------------------------
.plt:0000000000002936                 push    3Ch ; '<'
.plt:000000000000293B                 jmp     sub_2560
.plt:0000000000002940
.plt:0000000000002940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002940
.plt:0000000000002940 ; Attributes: thunk
.plt:0000000000002940
.plt:0000000000002940 ; int dirfd(DIR *dirp)
.plt:0000000000002940 _dirfd          proc near               ; CODE XREF: fts_build+3D↓p
.plt:0000000000002940                                         ; opendir_safer+18↓p
.plt:0000000000002940                 jmp     cs:dirfd_ptr
.plt:0000000000002940 _dirfd          endp
.plt:0000000000002940
.plt:0000000000002946 ; ---------------------------------------------------------------------------
.plt:0000000000002946                 push    3Dh ; '='
.plt:000000000000294B                 jmp     sub_2560
.plt:0000000000002950
.plt:0000000000002950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002950
.plt:0000000000002950 ; Attributes: thunk
.plt:0000000000002950
.plt:0000000000002950 ; __int64 fpathconf(int fd, int name)
.plt:0000000000002950 _fpathconf      proc near               ; CODE XREF: backupfile_internal+463↓p
.plt:0000000000002950                 jmp     cs:fpathconf_ptr
.plt:0000000000002950 _fpathconf      endp
.plt:0000000000002950
.plt:0000000000002956 ; ---------------------------------------------------------------------------
.plt:0000000000002956                 push    3Eh ; '>'
.plt:000000000000295B                 jmp     sub_2560
.plt:0000000000002960
.plt:0000000000002960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002960
.plt:0000000000002960 ; Attributes: thunk
.plt:0000000000002960
.plt:0000000000002960 ; int rpmatch(const char *response)
.plt:0000000000002960 _rpmatch        proc near               ; CODE XREF: yesno:loc_11028↓p
.plt:0000000000002960                 jmp     cs:rpmatch_ptr
.plt:0000000000002960 _rpmatch        endp
.plt:0000000000002960
.plt:0000000000002966 ; ---------------------------------------------------------------------------
.plt:0000000000002966                 push    3Fh ; '?'
.plt:000000000000296B                 jmp     sub_2560
.plt:0000000000002970
.plt:0000000000002970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002970
.plt:0000000000002970 ; Attributes: thunk
.plt:0000000000002970
.plt:0000000000002970 ; __int64 syscall(__int64 sysno, ...)
.plt:0000000000002970 _syscall        proc near               ; CODE XREF: renameat2+46↓p
.plt:0000000000002970                 jmp     cs:syscall_ptr
.plt:0000000000002970 _syscall        endp
.plt:0000000000002970
.plt:0000000000002976 ; ---------------------------------------------------------------------------
.plt:0000000000002976                 push    40h ; '@'
.plt:000000000000297B                 jmp     sub_2560
.plt:0000000000002980
.plt:0000000000002980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002980
.plt:0000000000002980 ; Attributes: thunk
.plt:0000000000002980
.plt:0000000000002980 ; int mkfifo(const char *path, __mode_t mode)
.plt:0000000000002980 _mkfifo         proc near               ; CODE XREF: copy_internal+29CD↓p
.plt:0000000000002980                 jmp     cs:mkfifo_ptr
.plt:0000000000002980 _mkfifo         endp
.plt:0000000000002980
.plt:0000000000002986 ; ---------------------------------------------------------------------------
.plt:0000000000002986                 push    41h ; 'A'
.plt:000000000000298B                 jmp     sub_2560
.plt:0000000000002990
.plt:0000000000002990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002990
.plt:0000000000002990 ; Attributes: thunk
.plt:0000000000002990
.plt:0000000000002990 ; __mode_t umask(__mode_t mask)
.plt:0000000000002990 _umask          proc near               ; CODE XREF: cached_umask+12↓p
.plt:0000000000002990                                         ; cached_umask+21↓p
.plt:0000000000002990                 jmp     cs:umask_ptr
.plt:0000000000002990 _umask          endp
.plt:0000000000002990
.plt:0000000000002996 ; ---------------------------------------------------------------------------
.plt:0000000000002996                 push    42h ; 'B'
.plt:000000000000299B                 jmp     sub_2560
.plt:00000000000029A0
.plt:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029A0
.plt:00000000000029A0 ; Attributes: thunk
.plt:00000000000029A0
.plt:00000000000029A0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000029A0 _memcpy         proc near               ; CODE XREF: copy_internal+E2D↓p
.plt:00000000000029A0                                         ; backupfile_internal+D6↓p ...
.plt:00000000000029A0                 jmp     cs:memcpy_ptr
.plt:00000000000029A0 _memcpy         endp
.plt:00000000000029A0
.plt:00000000000029A6 ; ---------------------------------------------------------------------------
.plt:00000000000029A6                 push    43h ; 'C'
.plt:00000000000029AB                 jmp     sub_2560
.plt:00000000000029B0
.plt:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029B0
.plt:00000000000029B0 ; Attributes: thunk
.plt:00000000000029B0
.plt:00000000000029B0 ; int __xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
.plt:00000000000029B0 ___xmknod       proc near               ; CODE XREF: copy_internal+25DF↓p
.plt:00000000000029B0                                         ; copy_internal+29A8↓p
.plt:00000000000029B0                 jmp     cs:__xmknod_ptr
.plt:00000000000029B0 ___xmknod       endp
.plt:00000000000029B0
.plt:00000000000029B6 ; ---------------------------------------------------------------------------
.plt:00000000000029B6                 push    44h ; 'D'
.plt:00000000000029BB                 jmp     sub_2560
.plt:00000000000029C0
.plt:00000000000029C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029C0
.plt:00000000000029C0 ; Attributes: thunk
.plt:00000000000029C0
.plt:00000000000029C0 ; int fileno(FILE *stream)
.plt:00000000000029C0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:00000000000029C0                                         ; rpl_fseeko+2E↓p ...
.plt:00000000000029C0                 jmp     cs:fileno_ptr
.plt:00000000000029C0 _fileno         endp
.plt:00000000000029C0
.plt:00000000000029C6 ; ---------------------------------------------------------------------------
.plt:00000000000029C6                 push    45h ; 'E'
.plt:00000000000029CB                 jmp     sub_2560
.plt:00000000000029D0
.plt:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029D0
.plt:00000000000029D0 ; Attributes: thunk
.plt:00000000000029D0
.plt:00000000000029D0 ; __gid_t getgid(void)
.plt:00000000000029D0 _getgid         proc near               ; CODE XREF: randread_new+1FC↓p
.plt:00000000000029D0                 jmp     cs:getgid_ptr
.plt:00000000000029D0 _getgid         endp
.plt:00000000000029D0
.plt:00000000000029D6 ; ---------------------------------------------------------------------------
.plt:00000000000029D6                 push    46h ; 'F'
.plt:00000000000029DB                 jmp     sub_2560
.plt:00000000000029E0
.plt:00000000000029E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029E0
.plt:00000000000029E0 ; Attributes: thunk
.plt:00000000000029E0
.plt:00000000000029E0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000029E0 ___xstat        proc near               ; CODE XREF: main+28A↓p
.plt:00000000000029E0                                         ; main+53D↓p ...
.plt:00000000000029E0                 jmp     cs:__xstat_ptr
.plt:00000000000029E0 ___xstat        endp
.plt:00000000000029E0
.plt:00000000000029E6 ; ---------------------------------------------------------------------------
.plt:00000000000029E6                 push    47h ; 'G'
.plt:00000000000029EB                 jmp     sub_2560
.plt:00000000000029F0
.plt:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029F0
.plt:00000000000029F0 ; Attributes: thunk
.plt:00000000000029F0
.plt:00000000000029F0 ; struct dirent *readdir(DIR *dirp)
.plt:00000000000029F0 _readdir        proc near               ; CODE XREF: prompt+B3↓p
.plt:00000000000029F0                                         ; rm+283↓p ...
.plt:00000000000029F0                 jmp     cs:readdir_ptr
.plt:00000000000029F0 _readdir        endp
.plt:00000000000029F0
.plt:00000000000029F6 ; ---------------------------------------------------------------------------
.plt:00000000000029F6                 push    48h ; 'H'
.plt:00000000000029FB                 jmp     sub_2560
.plt:0000000000002A00
.plt:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A00
.plt:0000000000002A00 ; Attributes: thunk
.plt:0000000000002A00
.plt:0000000000002A00 ; void *malloc(size_t size)
.plt:0000000000002A00 _malloc         proc near               ; CODE XREF: samedir_template+22↓p
.plt:0000000000002A00                                         ; areadlink_with_size+43↓p ...
.plt:0000000000002A00                 jmp     cs:malloc_ptr
.plt:0000000000002A00 _malloc         endp
.plt:0000000000002A00
.plt:0000000000002A06 ; ---------------------------------------------------------------------------
.plt:0000000000002A06                 push    49h ; 'I'
.plt:0000000000002A0B                 jmp     sub_2560
.plt:0000000000002A10
.plt:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A10
.plt:0000000000002A10 ; Attributes: thunk
.plt:0000000000002A10
.plt:0000000000002A10 ; int fflush(FILE *stream)
.plt:0000000000002A10 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000002A10                                         ; rpl_fflush+3B↓j
.plt:0000000000002A10                 jmp     cs:fflush_ptr
.plt:0000000000002A10 _fflush         endp
.plt:0000000000002A10
.plt:0000000000002A16 ; ---------------------------------------------------------------------------
.plt:0000000000002A16                 push    4Ah ; 'J'
.plt:0000000000002A1B                 jmp     sub_2560
.plt:0000000000002A20
.plt:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A20
.plt:0000000000002A20 ; Attributes: thunk
.plt:0000000000002A20
.plt:0000000000002A20 ; char *nl_langinfo(nl_item item)
.plt:0000000000002A20 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000002A20                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002A20 _nl_langinfo    endp
.plt:0000000000002A20
.plt:0000000000002A26 ; ---------------------------------------------------------------------------
.plt:0000000000002A26                 push    4Bh ; 'K'
.plt:0000000000002A2B                 jmp     sub_2560
.plt:0000000000002A30
.plt:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A30
.plt:0000000000002A30 ; Attributes: thunk
.plt:0000000000002A30
.plt:0000000000002A30 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000002A30 ___fxstat       proc near               ; CODE XREF: copy_internal+20E1↓p
.plt:0000000000002A30                                         ; copy_internal+2EC2↓p ...
.plt:0000000000002A30                 jmp     cs:__fxstat_ptr
.plt:0000000000002A30 ___fxstat       endp
.plt:0000000000002A30
.plt:0000000000002A36 ; ---------------------------------------------------------------------------
.plt:0000000000002A36                 push    4Ch ; 'L'
.plt:0000000000002A3B                 jmp     sub_2560
.plt:0000000000002A40
.plt:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A40
.plt:0000000000002A40 ; Attributes: thunk
.plt:0000000000002A40
.plt:0000000000002A40 ; int lchown(const char *file, __uid_t owner, __gid_t group)
.plt:0000000000002A40 _lchown         proc near               ; CODE XREF: set_owner+B3↓p
.plt:0000000000002A40                                         ; set_owner+113↓p ...
.plt:0000000000002A40                 jmp     cs:lchown_ptr
.plt:0000000000002A40 _lchown         endp
.plt:0000000000002A40
.plt:0000000000002A46 ; ---------------------------------------------------------------------------
.plt:0000000000002A46                 push    4Dh ; 'M'
.plt:0000000000002A4B                 jmp     sub_2560
.plt:0000000000002A50
.plt:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A50
.plt:0000000000002A50 ; Attributes: thunk
.plt:0000000000002A50
.plt:0000000000002A50 ; int __freading(FILE *fp)
.plt:0000000000002A50 ___freading     proc near               ; CODE XREF: rpl_fflush+9↓p
.plt:0000000000002A50                                         ; rpl_fclose+13↓p
.plt:0000000000002A50                 jmp     cs:__freading_ptr
.plt:0000000000002A50 ___freading     endp
.plt:0000000000002A50
.plt:0000000000002A56 ; ---------------------------------------------------------------------------
.plt:0000000000002A56                 push    4Eh ; 'N'
.plt:0000000000002A5B                 jmp     sub_2560
.plt:0000000000002A60
.plt:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A60
.plt:0000000000002A60 ; Attributes: thunk
.plt:0000000000002A60
.plt:0000000000002A60 ; int fchdir(int fd)
.plt:0000000000002A60 _fchdir         proc near               ; CODE XREF: restore_initial_cwd+1D↓p
.plt:0000000000002A60                                         ; fts_safe_changedir+17C↓p ...
.plt:0000000000002A60                 jmp     cs:fchdir_ptr
.plt:0000000000002A60 _fchdir         endp
.plt:0000000000002A60
.plt:0000000000002A66 ; ---------------------------------------------------------------------------
.plt:0000000000002A66                 push    4Fh ; 'O'
.plt:0000000000002A6B                 jmp     sub_2560
.plt:0000000000002A70
.plt:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A70
.plt:0000000000002A70 ; Attributes: thunk
.plt:0000000000002A70
.plt:0000000000002A70 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002A70 _realloc        proc near               ; CODE XREF: backupfile_internal+261↓p
.plt:0000000000002A70                                         ; xrealloc+11↓p ...
.plt:0000000000002A70                 jmp     cs:realloc_ptr
.plt:0000000000002A70 _realloc        endp
.plt:0000000000002A70
.plt:0000000000002A76 ; ---------------------------------------------------------------------------
.plt:0000000000002A76                 push    50h ; 'P'
.plt:0000000000002A7B                 jmp     sub_2560
.plt:0000000000002A80
.plt:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A80
.plt:0000000000002A80 ; Attributes: thunk
.plt:0000000000002A80
.plt:0000000000002A80 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000002A80 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000002A80                 jmp     cs:fdopen_ptr
.plt:0000000000002A80 _fdopen         endp
.plt:0000000000002A80
.plt:0000000000002A86 ; ---------------------------------------------------------------------------
.plt:0000000000002A86                 push    51h ; 'Q'
.plt:0000000000002A8B                 jmp     sub_2560
.plt:0000000000002A90
.plt:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A90
.plt:0000000000002A90 ; Attributes: thunk
.plt:0000000000002A90
.plt:0000000000002A90 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
.plt:0000000000002A90 _linkat         proc near               ; CODE XREF: try_link+13↓j
.plt:0000000000002A90                                         ; force_linkat+F7↓p
.plt:0000000000002A90                 jmp     cs:linkat_ptr
.plt:0000000000002A90 _linkat         endp
.plt:0000000000002A90
.plt:0000000000002A96 ; ---------------------------------------------------------------------------
.plt:0000000000002A96                 push    52h ; 'R'
.plt:0000000000002A9B                 jmp     sub_2560
.plt:0000000000002AA0
.plt:0000000000002AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AA0
.plt:0000000000002AA0 ; Attributes: thunk
.plt:0000000000002AA0
.plt:0000000000002AA0 ; char *setlocale(int category, const char *locale)
.plt:0000000000002AA0 _setlocale      proc near               ; CODE XREF: main+42↓p
.plt:0000000000002AA0                                         ; usage+2D3↓p ...
.plt:0000000000002AA0                 jmp     cs:setlocale_ptr
.plt:0000000000002AA0 _setlocale      endp
.plt:0000000000002AA0
.plt:0000000000002AA6 ; ---------------------------------------------------------------------------
.plt:0000000000002AA6                 push    53h ; 'S'
.plt:0000000000002AAB                 jmp     sub_2560
.plt:0000000000002AB0
.plt:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AB0
.plt:0000000000002AB0 ; Attributes: thunk
.plt:0000000000002AB0
.plt:0000000000002AB0 ___printf_chk   proc near               ; CODE XREF: usage+7E↓p
.plt:0000000000002AB0                                         ; usage+2C7↓p ...
.plt:0000000000002AB0                 jmp     cs:__printf_chk_ptr
.plt:0000000000002AB0 ___printf_chk   endp
.plt:0000000000002AB0
.plt:0000000000002AB6 ; ---------------------------------------------------------------------------
.plt:0000000000002AB6                 push    54h ; 'T'
.plt:0000000000002ABB                 jmp     sub_2560
.plt:0000000000002AC0
.plt:0000000000002AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AC0
.plt:0000000000002AC0 ; Attributes: thunk
.plt:0000000000002AC0
.plt:0000000000002AC0 ; int fchmod(int fd, __mode_t mode)
.plt:0000000000002AC0 _fchmod         proc near               ; CODE XREF: fchmod_or_lchmod+9↓j
.plt:0000000000002AC0                                         ; chmod_or_fchmod+B↓j
.plt:0000000000002AC0                 jmp     cs:fchmod_ptr
.plt:0000000000002AC0 _fchmod         endp
.plt:0000000000002AC0
.plt:0000000000002AC6 ; ---------------------------------------------------------------------------
.plt:0000000000002AC6                 push    55h ; 'U'
.plt:0000000000002ACB                 jmp     sub_2560
.plt:0000000000002AD0
.plt:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AD0
.plt:0000000000002AD0 ; Attributes: thunk
.plt:0000000000002AD0
.plt:0000000000002AD0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000002AD0 _setvbuf        proc near               ; CODE XREF: randread_new+82↓p
.plt:0000000000002AD0                 jmp     cs:setvbuf_ptr
.plt:0000000000002AD0 _setvbuf        endp
.plt:0000000000002AD0
.plt:0000000000002AD6 ; ---------------------------------------------------------------------------
.plt:0000000000002AD6                 push    56h ; 'V'
.plt:0000000000002ADB                 jmp     sub_2560
.plt:0000000000002AE0
.plt:0000000000002AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AE0
.plt:0000000000002AE0 ; Attributes: thunk
.plt:0000000000002AE0
.plt:0000000000002AE0 ; int chmod(const char *file, __mode_t mode)
.plt:0000000000002AE0 _chmod          proc near               ; CODE XREF: fchmod_or_lchmod+11↓j
.plt:0000000000002AE0                                         ; copy_internal+79D↓p ...
.plt:0000000000002AE0                 jmp     cs:chmod_ptr
.plt:0000000000002AE0 _chmod          endp
.plt:0000000000002AE0
.plt:0000000000002AE6 ; ---------------------------------------------------------------------------
.plt:0000000000002AE6                 push    57h ; 'W'
.plt:0000000000002AEB                 jmp     sub_2560
.plt:0000000000002AF0
.plt:0000000000002AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AF0
.plt:0000000000002AF0 ; Attributes: thunk
.plt:0000000000002AF0
.plt:0000000000002AF0 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000002AF0 _mempcpy        proc near               ; CODE XREF: copy_internal+28A2↓p
.plt:0000000000002AF0                                         ; samedir_template+3A↓p ...
.plt:0000000000002AF0                 jmp     cs:mempcpy_ptr
.plt:0000000000002AF0 _mempcpy        endp
.plt:0000000000002AF0
.plt:0000000000002AF6 ; ---------------------------------------------------------------------------
.plt:0000000000002AF6                 push    58h ; 'X'
.plt:0000000000002AFB                 jmp     sub_2560
.plt:0000000000002B00
.plt:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B00
.plt:0000000000002B00 ; Attributes: thunk
.plt:0000000000002B00
.plt:0000000000002B00 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000002B00 _memmove        proc near               ; CODE XREF: fts_build+3B5↓p
.plt:0000000000002B00                                         ; rpl_fts_read+2E9↓p ...
.plt:0000000000002B00                 jmp     cs:memmove_ptr
.plt:0000000000002B00 _memmove        endp
.plt:0000000000002B00
.plt:0000000000002B06 ; ---------------------------------------------------------------------------
.plt:0000000000002B06                 push    59h ; 'Y'
.plt:0000000000002B0B                 jmp     sub_2560
.plt:0000000000002B10
.plt:0000000000002B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B10
.plt:0000000000002B10 ; Attributes: thunk
.plt:0000000000002B10
.plt:0000000000002B10 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002B10 _error          proc near               ; CODE XREF: restore_default_fscreatecon_or_die+2E↓p
.plt:0000000000002B10                                         ; main+2E7↓p ...
.plt:0000000000002B10                 jmp     cs:error_ptr
.plt:0000000000002B10 _error          endp
.plt:0000000000002B10
.plt:0000000000002B16 ; ---------------------------------------------------------------------------
.plt:0000000000002B16                 push    5Ah ; 'Z'
.plt:0000000000002B1B                 jmp     sub_2560
.plt:0000000000002B20
.plt:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B20
.plt:0000000000002B20 ; Attributes: thunk
.plt:0000000000002B20
.plt:0000000000002B20 ___explicit_bzero_chk proc near         ; CODE XREF: randint_free+10↓p
.plt:0000000000002B20                                         ; randint_all_free+32↓p ...
.plt:0000000000002B20                 jmp     cs:__explicit_bzero_chk_ptr
.plt:0000000000002B20 ___explicit_bzero_chk endp
.plt:0000000000002B20
.plt:0000000000002B26 ; ---------------------------------------------------------------------------
.plt:0000000000002B26                 push    5Bh ; '['
.plt:0000000000002B2B                 jmp     sub_2560
.plt:0000000000002B30
.plt:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B30
.plt:0000000000002B30 ; Attributes: thunk
.plt:0000000000002B30
.plt:0000000000002B30 ; int open(const char *file, int oflag, ...)
.plt:0000000000002B30 _open           proc near               ; CODE XREF: open_safer+23↓p
.plt:0000000000002B30                                         ; try_file+11↓j ...
.plt:0000000000002B30                 jmp     cs:open_ptr
.plt:0000000000002B30 _open           endp
.plt:0000000000002B30
.plt:0000000000002B36 ; ---------------------------------------------------------------------------
.plt:0000000000002B36                 push    5Ch ; '\'
.plt:0000000000002B3B                 jmp     sub_2560
.plt:0000000000002B40
.plt:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B40
.plt:0000000000002B40 ; Attributes: thunk
.plt:0000000000002B40
.plt:0000000000002B40 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002B40 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_110EA↓j
.plt:0000000000002B40                 jmp     cs:fseeko_ptr
.plt:0000000000002B40 _fseeko         endp
.plt:0000000000002B40
.plt:0000000000002B46 ; ---------------------------------------------------------------------------
.plt:0000000000002B46                 push    5Dh ; ']'
.plt:0000000000002B4B                 jmp     sub_2560
.plt:0000000000002B50
.plt:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B50
.plt:0000000000002B50 ; Attributes: thunk
.plt:0000000000002B50
.plt:0000000000002B50 ; int fchown(int fd, __uid_t owner, __gid_t group)
.plt:0000000000002B50 _fchown         proc near               ; CODE XREF: set_owner+62↓p
.plt:0000000000002B50                                         ; set_owner+1F2↓p
.plt:0000000000002B50                 jmp     cs:fchown_ptr
.plt:0000000000002B50 _fchown         endp
.plt:0000000000002B50
.plt:0000000000002B56 ; ---------------------------------------------------------------------------
.plt:0000000000002B56                 push    5Eh ; '^'
.plt:0000000000002B5B                 jmp     sub_2560
.plt:0000000000002B60
.plt:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B60
.plt:0000000000002B60 ; Attributes: thunk
.plt:0000000000002B60
.plt:0000000000002B60 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000002B60 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000002B60                 jmp     cs:fopen_ptr
.plt:0000000000002B60 _fopen          endp
.plt:0000000000002B60
.plt:0000000000002B66 ; ---------------------------------------------------------------------------
.plt:0000000000002B66                 push    5Fh ; '_'
.plt:0000000000002B6B                 jmp     sub_2560
.plt:0000000000002B70
.plt:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B70
.plt:0000000000002B70 ; Attributes: thunk
.plt:0000000000002B70
.plt:0000000000002B70 ; int rename(const char *old, const char *new)
.plt:0000000000002B70 _rename         proc near               ; CODE XREF: copy_internal+96D↓p
.plt:0000000000002B70                                         ; copy_internal+FC2↓p
.plt:0000000000002B70                 jmp     cs:rename_ptr
.plt:0000000000002B70 _rename         endp
.plt:0000000000002B70
.plt:0000000000002B76 ; ---------------------------------------------------------------------------
.plt:0000000000002B76                 push    60h ; '`'
.plt:0000000000002B7B                 jmp     sub_2560
.plt:0000000000002B80
.plt:0000000000002B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B80
.plt:0000000000002B80 ; Attributes: thunk
.plt:0000000000002B80
.plt:0000000000002B80 ; DIR *fdopendir(int fd)
.plt:0000000000002B80 _fdopendir      proc near               ; CODE XREF: prompt+83↓p
.plt:0000000000002B80                                         ; rm+25B↓p ...
.plt:0000000000002B80                 jmp     cs:fdopendir_ptr
.plt:0000000000002B80 _fdopendir      endp
.plt:0000000000002B80
.plt:0000000000002B86 ; ---------------------------------------------------------------------------
.plt:0000000000002B86                 push    61h ; 'a'
.plt:0000000000002B8B                 jmp     sub_2560
.plt:0000000000002B90
.plt:0000000000002B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B90
.plt:0000000000002B90 ; Attributes: thunk
.plt:0000000000002B90
.plt:0000000000002B90 ; int futimens(int fd, const struct timespec times[2])
.plt:0000000000002B90 _futimens       proc near               ; CODE XREF: fdutimens+8D↓p
.plt:0000000000002B90                 jmp     cs:futimens_ptr
.plt:0000000000002B90 _futimens       endp
.plt:0000000000002B90
.plt:0000000000002B96 ; ---------------------------------------------------------------------------
.plt:0000000000002B96                 push    62h ; 'b'
.plt:0000000000002B9B                 jmp     sub_2560
.plt:0000000000002BA0
.plt:0000000000002BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BA0
.plt:0000000000002BA0 ; Attributes: thunk
.plt:0000000000002BA0
.plt:0000000000002BA0 ; int euidaccess(const char *name, int type)
.plt:0000000000002BA0 _euidaccess     proc near               ; CODE XREF: writable_destination+38↓p
.plt:0000000000002BA0                 jmp     cs:euidaccess_ptr
.plt:0000000000002BA0 _euidaccess     endp
.plt:0000000000002BA0
.plt:0000000000002BA6 ; ---------------------------------------------------------------------------
.plt:0000000000002BA6                 push    63h ; 'c'
.plt:0000000000002BAB                 jmp     sub_2560
.plt:0000000000002BB0
.plt:0000000000002BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BB0
.plt:0000000000002BB0 ; Attributes: thunk
.plt:0000000000002BB0
.plt:0000000000002BB0 ; int fstatfs(int fildes, struct statfs *buf)
.plt:0000000000002BB0 _fstatfs        proc near               ; CODE XREF: filesystem_type+C8↓p
.plt:0000000000002BB0                 jmp     cs:fstatfs_ptr
.plt:0000000000002BB0 _fstatfs        endp
.plt:0000000000002BB0
.plt:0000000000002BB6 ; ---------------------------------------------------------------------------
.plt:0000000000002BB6                 push    64h ; 'd'
.plt:0000000000002BBB                 jmp     sub_2560
.plt:0000000000002BC0
.plt:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BC0
.plt:0000000000002BC0 ; Attributes: thunk
.plt:0000000000002BC0
.plt:0000000000002BC0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002BC0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002BC0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002BC0 ___cxa_atexit   endp
.plt:0000000000002BC0
.plt:0000000000002BC6 ; ---------------------------------------------------------------------------
.plt:0000000000002BC6                 push    65h ; 'e'
.plt:0000000000002BCB                 jmp     sub_2560
.plt:0000000000002BD0
.plt:0000000000002BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BD0
.plt:0000000000002BD0 ; Attributes: thunk
.plt:0000000000002BD0
.plt:0000000000002BD0 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
.plt:0000000000002BD0 _renameat       proc near               ; CODE XREF: force_linkat+122↓p
.plt:0000000000002BD0                                         ; force_symlinkat+10A↓p ...
.plt:0000000000002BD0                 jmp     cs:renameat_ptr
.plt:0000000000002BD0 _renameat       endp
.plt:0000000000002BD0
.plt:0000000000002BD6 ; ---------------------------------------------------------------------------
.plt:0000000000002BD6                 push    66h ; 'f'
.plt:0000000000002BDB                 jmp     sub_2560
.plt:0000000000002BE0
.plt:0000000000002BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BE0
.plt:0000000000002BE0 ; Attributes: thunk
.plt:0000000000002BE0
.plt:0000000000002BE0 ; int getpagesize(void)
.plt:0000000000002BE0 _getpagesize    proc near               ; CODE XREF: copy_internal:loc_882C↓p
.plt:0000000000002BE0                 jmp     cs:getpagesize_ptr
.plt:0000000000002BE0 _getpagesize    endp
.plt:0000000000002BE0
.plt:0000000000002BE6 ; ---------------------------------------------------------------------------
.plt:0000000000002BE6                 push    67h ; 'g'
.plt:0000000000002BEB                 jmp     sub_2560
.plt:0000000000002BF0
.plt:0000000000002BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002BF0
.plt:0000000000002BF0 ; Attributes: thunk
.plt:0000000000002BF0
.plt:0000000000002BF0 ; __pid_t getppid(void)
.plt:0000000000002BF0 _getppid        proc near               ; CODE XREF: randread_new+1A3↓p
.plt:0000000000002BF0                                         ; randread_new+2F7↓p
.plt:0000000000002BF0                 jmp     cs:getppid_ptr
.plt:0000000000002BF0 _getppid        endp
.plt:0000000000002BF0
.plt:0000000000002BF6 ; ---------------------------------------------------------------------------
.plt:0000000000002BF6                 push    68h ; 'h'
.plt:0000000000002BFB                 jmp     sub_2560
.plt:0000000000002C00
.plt:0000000000002C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C00
.plt:0000000000002C00 ; Attributes: noreturn thunk
.plt:0000000000002C00
.plt:0000000000002C00 ; void __noreturn exit(int status)
.plt:0000000000002C00 _exit           proc near               ; CODE XREF: main+268↓p
.plt:0000000000002C00                                         ; usage+58↓p
.plt:0000000000002C00                 jmp     cs:exit_ptr
.plt:0000000000002C00 _exit           endp
.plt:0000000000002C00
.plt:0000000000002C06 ; ---------------------------------------------------------------------------
.plt:0000000000002C06                 push    69h ; 'i'
.plt:0000000000002C0B                 jmp     sub_2560
.plt:0000000000002C10
.plt:0000000000002C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C10
.plt:0000000000002C10 ; Attributes: thunk
.plt:0000000000002C10
.plt:0000000000002C10 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002C10 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000002C10                 jmp     cs:fwrite_ptr
.plt:0000000000002C10 _fwrite         endp
.plt:0000000000002C10
.plt:0000000000002C16 ; ---------------------------------------------------------------------------
.plt:0000000000002C16                 push    6Ah ; 'j'
.plt:0000000000002C1B                 jmp     sub_2560
.plt:0000000000002C20
.plt:0000000000002C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C20
.plt:0000000000002C20 ; Attributes: thunk
.plt:0000000000002C20
.plt:0000000000002C20 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000002C20                                         ; prompt+20C↓p ...
.plt:0000000000002C20                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002C20 ___fprintf_chk  endp
.plt:0000000000002C20
.plt:0000000000002C26 ; ---------------------------------------------------------------------------
.plt:0000000000002C26                 push    6Bh ; 'k'
.plt:0000000000002C2B                 jmp     sub_2560
.plt:0000000000002C30
.plt:0000000000002C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C30
.plt:0000000000002C30 ; Attributes: thunk
.plt:0000000000002C30
.plt:0000000000002C30 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002C30 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000002C30                 jmp     cs:mbsinit_ptr
.plt:0000000000002C30 _mbsinit        endp
.plt:0000000000002C30
.plt:0000000000002C36 ; ---------------------------------------------------------------------------
.plt:0000000000002C36                 push    6Ch ; 'l'
.plt:0000000000002C3B                 jmp     sub_2560
.plt:0000000000002C40
.plt:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C40
.plt:0000000000002C40 ; Attributes: thunk
.plt:0000000000002C40
.plt:0000000000002C40 ; int symlinkat(const char *from, int tofd, const char *to)
.plt:0000000000002C40 _symlinkat      proc near               ; CODE XREF: try_symlink+C↓j
.plt:0000000000002C40                                         ; force_symlinkat+DC↓p
.plt:0000000000002C40                 jmp     cs:symlinkat_ptr
.plt:0000000000002C40 _symlinkat      endp
.plt:0000000000002C40
.plt:0000000000002C46 ; ---------------------------------------------------------------------------
.plt:0000000000002C46                 push    6Dh ; 'm'
.plt:0000000000002C4B                 jmp     sub_2560
.plt:0000000000002C50
.plt:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C50
.plt:0000000000002C50 ; Attributes: thunk
.plt:0000000000002C50
.plt:0000000000002C50 ; int iswprint(wint_t wc)
.plt:0000000000002C50 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000002C50                 jmp     cs:iswprint_ptr
.plt:0000000000002C50 _iswprint       endp
.plt:0000000000002C50
.plt:0000000000002C56 ; ---------------------------------------------------------------------------
.plt:0000000000002C56                 push    6Eh ; 'n'
.plt:0000000000002C5B                 jmp     sub_2560
.plt:0000000000002C60
.plt:0000000000002C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C60
.plt:0000000000002C60 ; Attributes: thunk
.plt:0000000000002C60
.plt:0000000000002C60 ; int futimesat(int fd, const char *file, const struct timeval tvp[2])
.plt:0000000000002C60 _futimesat      proc near               ; CODE XREF: fdutimens+139↓p
.plt:0000000000002C60                                         ; fdutimens+210↓p ...
.plt:0000000000002C60                 jmp     cs:futimesat_ptr
.plt:0000000000002C60 _futimesat      endp
.plt:0000000000002C60
.plt:0000000000002C66 ; ---------------------------------------------------------------------------
.plt:0000000000002C66                 push    6Fh ; 'o'
.plt:0000000000002C6B                 jmp     sub_2560
.plt:0000000000002C70
.plt:0000000000002C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002C70
.plt:0000000000002C70 ; Attributes: thunk
.plt:0000000000002C70
.plt:0000000000002C70 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000002C70 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000002C70                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000002C70 ___ctype_b_loc  endp
.plt:0000000000002C70
.plt:0000000000002C76 ; ---------------------------------------------------------------------------
.plt:0000000000002C76                 push    70h ; 'p'
.plt:0000000000002C7B                 jmp     sub_2560
.plt:0000000000002C7B ; } // starts at 2560
.plt:0000000000002C7B _plt            ends
.plt:0000000000002C7B
.plt.got:0000000000002C80 ; ===========================================================================
.plt.got:0000000000002C80
.plt.got:0000000000002C80 ; Segment type: Pure code
.plt.got:0000000000002C80 ; Segment permissions: Read/Execute
.plt.got:0000000000002C80 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002C80                 assume cs:_plt_got
.plt.got:0000000000002C80                 ;org 2C80h
.plt.got:0000000000002C80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002C80
.plt.got:0000000000002C80 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002C80
.plt.got:0000000000002C80 ; Attributes: thunk
.plt.got:0000000000002C80
.plt.got:0000000000002C80 ; void free(void *ptr)
.plt.got:0000000000002C80 free            proc near               ; CODE XREF: movefile+6B↓p
.plt.got:0000000000002C80                                         ; rm+59D↓p ...
.plt.got:0000000000002C80 ; __unwind {
.plt.got:0000000000002C80                 jmp     cs:free_ptr
.plt.got:0000000000002C80 free            endp
.plt.got:0000000000002C80
.plt.got:0000000000002C80 ; ---------------------------------------------------------------------------
.plt.got:0000000000002C86                 align 8
.plt.got:0000000000002C88
.plt.got:0000000000002C88 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002C88
.plt.got:0000000000002C88 ; Attributes: thunk
.plt.got:0000000000002C88
.plt.got:0000000000002C88 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002C88 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002C88                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002C88 __cxa_finalize  endp
.plt.got:0000000000002C88
.plt.got:0000000000002C88 ; ---------------------------------------------------------------------------
.plt.got:0000000000002C8E                 align 10h
.plt.got:0000000000002C8E ; } // starts at 2C80
.plt.got:0000000000002C8E _plt_got        ends
.plt.got:0000000000002C8E
.text:0000000000002C90 ; ===========================================================================
.text:0000000000002C90
.text:0000000000002C90 ; Segment type: Pure code
.text:0000000000002C90 ; Segment permissions: Read/Execute
.text:0000000000002C90 _text           segment para public 'CODE' use64
.text:0000000000002C90                 assume cs:_text
.text:0000000000002C90                 ;org 2C90h
.text:0000000000002C90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002C90
.text:0000000000002C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C90
.text:0000000000002C90
.text:0000000000002C90 fchmod_or_lchmod proc near              ; CODE XREF: copy_internal+36AA↓p
.text:0000000000002C90                                         ; copy_internal+407D↓p ...
.text:0000000000002C90 ; __unwind {
.text:0000000000002C90                 test    edi, edi
.text:0000000000002C92                 mov     rax, rsi
.text:0000000000002C95                 mov     esi, edx        ; mode
.text:0000000000002C97                 js      short loc_2C9E
.text:0000000000002C99                 jmp     _fchmod
.text:0000000000002C9E ; ---------------------------------------------------------------------------
.text:0000000000002C9E
.text:0000000000002C9E loc_2C9E:                               ; CODE XREF: fchmod_or_lchmod+7↑j
.text:0000000000002C9E                 mov     rdi, rax        ; file
.text:0000000000002CA1                 jmp     _chmod
.text:0000000000002CA1 ; } // starts at 2C90
.text:0000000000002CA1 fchmod_or_lchmod endp
.text:0000000000002CA1
.text:0000000000002CA6
.text:0000000000002CA6 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CA6
.text:0000000000002CA6
.text:0000000000002CA6 restore_default_fscreatecon_or_die proc near
.text:0000000000002CA6                                         ; CODE XREF: copy_internal:loc_6A50↓p
.text:0000000000002CA6 ; __unwind {
.text:0000000000002CA6                 push    rbx
.text:0000000000002CA7                 call    ___errno_location
.text:0000000000002CAC                 lea     rsi, msgid      ; "failed to restore the default file crea"...
.text:0000000000002CB3                 mov     rbx, rax
.text:0000000000002CB6                 mov     edx, 5          ; category
.text:0000000000002CBB                 xor     edi, edi        ; domainname
.text:0000000000002CBD                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000002CC3                 call    _dcgettext
.text:0000000000002CC8                 mov     esi, [rbx]      ; errnum
.text:0000000000002CCA                 mov     rdx, rax        ; format
.text:0000000000002CCD                 mov     edi, 1          ; status
.text:0000000000002CD2                 xor     eax, eax
.text:0000000000002CD4                 call    _error
.text:0000000000002CD4 ; } // starts at 2CA6
.text:0000000000002CD9                 nop     dword ptr [rax+00000000h]
.text:0000000000002CD9 restore_default_fscreatecon_or_die endp ; sp-analysis failed
.text:0000000000002CD9
.text:0000000000002CE0
.text:0000000000002CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CE0
.text:0000000000002CE0
.text:0000000000002CE0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002CE0                 public main
.text:0000000000002CE0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002CE0
.text:0000000000002CE0 errnum          = dword ptr -140h
.text:0000000000002CE0 var_138         = qword ptr -138h
.text:0000000000002CE0 stat_buf        = qword ptr -130h
.text:0000000000002CE0 var_128         = dword ptr -128h
.text:0000000000002CE0 var_124         = dword ptr -124h
.text:0000000000002CE0 var_120         = dword ptr -120h
.text:0000000000002CE0 var_11C         = dword ptr -11Ch
.text:0000000000002CE0 var_118         = dword ptr -118h
.text:0000000000002CE0 var_114         = byte ptr -114h
.text:0000000000002CE0 var_113         = byte ptr -113h
.text:0000000000002CE0 var_112         = byte ptr -112h
.text:0000000000002CE0 var_111         = byte ptr -111h
.text:0000000000002CE0 var_110         = byte ptr -110h
.text:0000000000002CE0 var_10F         = byte ptr -10Fh
.text:0000000000002CE0 var_10C         = byte ptr -10Ch
.text:0000000000002CE0 var_10B         = byte ptr -10Bh
.text:0000000000002CE0 var_10A         = byte ptr -10Ah
.text:0000000000002CE0 var_109         = byte ptr -109h
.text:0000000000002CE0 var_108         = byte ptr -108h
.text:0000000000002CE0 var_107         = byte ptr -107h
.text:0000000000002CE0 var_106         = byte ptr -106h
.text:0000000000002CE0 var_105         = byte ptr -105h
.text:0000000000002CE0 var_104         = byte ptr -104h
.text:0000000000002CE0 var_103         = byte ptr -103h
.text:0000000000002CE0 var_102         = byte ptr -102h
.text:0000000000002CE0 var_101         = byte ptr -101h
.text:0000000000002CE0 var_100         = byte ptr -100h
.text:0000000000002CE0 var_FF          = byte ptr -0FFh
.text:0000000000002CE0 var_FE          = byte ptr -0FEh
.text:0000000000002CE0 var_FD          = byte ptr -0FDh
.text:0000000000002CE0 var_FC          = byte ptr -0FCh
.text:0000000000002CE0 var_FB          = byte ptr -0FBh
.text:0000000000002CE0 var_FA          = byte ptr -0FAh
.text:0000000000002CE0 var_F9          = byte ptr -0F9h
.text:0000000000002CE0 var_F8          = byte ptr -0F8h
.text:0000000000002CE0 var_F7          = byte ptr -0F7h
.text:0000000000002CE0 var_F4          = dword ptr -0F4h
.text:0000000000002CE0 var_F0          = dword ptr -0F0h
.text:0000000000002CE0 var_E8          = qword ptr -0E8h
.text:0000000000002CE0 var_E0          = qword ptr -0E0h
.text:0000000000002CE0 var_D8          = stat ptr -0D8h
.text:0000000000002CE0 var_40          = qword ptr -40h
.text:0000000000002CE0
.text:0000000000002CE0 ; __unwind {
.text:0000000000002CE0                 push    r15
.text:0000000000002CE2                 push    r14
.text:0000000000002CE4                 push    r13
.text:0000000000002CE6                 push    r12
.text:0000000000002CE8                 push    rbp
.text:0000000000002CE9                 push    rbx
.text:0000000000002CEA                 mov     ebp, edi
.text:0000000000002CEC                 mov     rbx, rsi
.text:0000000000002CEF                 sub     rsp, 118h
.text:0000000000002CF6                 mov     rdi, [rsi]
.text:0000000000002CF9                 mov     rax, fs:28h
.text:0000000000002D02                 mov     [rsp+148h+var_40], rax
.text:0000000000002D0A                 xor     eax, eax
.text:0000000000002D0C                 lea     r13, [rsp+148h+var_128]
.text:0000000000002D11                 call    set_program_name
.text:0000000000002D16                 lea     rsi, aSSUnbackup+14h ; locale
.text:0000000000002D1D                 mov     edi, 6          ; category
.text:0000000000002D22                 call    _setlocale
.text:0000000000002D27                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002D2E                 lea     rdi, domainname ; "coreutils"
.text:0000000000002D35                 call    _bindtextdomain
.text:0000000000002D3A                 lea     rdi, domainname ; "coreutils"
.text:0000000000002D41                 call    _textdomain
.text:0000000000002D46                 lea     rdi, close_stdin
.text:0000000000002D4D                 call    atexit
.text:0000000000002D52                 mov     rdi, r13
.text:0000000000002D55                 call    cp_options_default
.text:0000000000002D5A                 xor     edi, edi        ; fd
.text:0000000000002D5C                 mov     [rsp+148h+var_114], 0
.text:0000000000002D61                 mov     [rsp+148h+var_F0], 1
.text:0000000000002D69                 mov     [rsp+148h+var_124], 2
.text:0000000000002D71                 mov     [rsp+148h+var_113], 0
.text:0000000000002D76                 mov     [rsp+148h+var_112], 0
.text:0000000000002D7B                 mov     [rsp+148h+var_111], 0
.text:0000000000002D80                 mov     [rsp+148h+var_120], 4
.text:0000000000002D88                 mov     [rsp+148h+var_110], 1
.text:0000000000002D8D                 mov     [rsp+148h+var_10F], 0
.text:0000000000002D92                 mov     [rsp+148h+var_10C], 0
.text:0000000000002D97                 mov     [rsp+148h+var_10B], 1
.text:0000000000002D9C                 mov     [rsp+148h+var_106], 1
.text:0000000000002DA1                 mov     [rsp+148h+var_10A], 1
.text:0000000000002DA6                 mov     [rsp+148h+var_109], 1
.text:0000000000002DAB                 mov     [rsp+148h+var_108], 0
.text:0000000000002DB0                 mov     [rsp+148h+var_103], 0
.text:0000000000002DB5                 mov     [rsp+148h+var_107], 0
.text:0000000000002DBA                 mov     [rsp+148h+var_FF], 0
.text:0000000000002DBF                 mov     [rsp+148h+var_105], 1
.text:0000000000002DC4                 mov     [rsp+148h+var_104], 0
.text:0000000000002DC9                 mov     [rsp+148h+var_102], 0
.text:0000000000002DCE                 mov     [rsp+148h+var_101], 1
.text:0000000000002DD3                 mov     [rsp+148h+var_100], 0
.text:0000000000002DD8                 mov     [rsp+148h+var_FE], 1
.text:0000000000002DDD                 mov     [rsp+148h+var_11C], 2
.text:0000000000002DE5                 mov     [rsp+148h+var_FC], 0
.text:0000000000002DEA                 mov     [rsp+148h+var_FD], 0
.text:0000000000002DEF                 mov     [rsp+148h+var_118], 0
.text:0000000000002DF7                 call    _isatty
.text:0000000000002DFC                 test    eax, eax
.text:0000000000002DFE                 lea     rax, [rsp+148h+var_D8]
.text:0000000000002E03                 mov     [rsp+148h+var_F8], 0
.text:0000000000002E08                 setnz   [rsp+148h+var_F9]
.text:0000000000002E0D                 mov     [rsp+148h+var_FB], 0
.text:0000000000002E12                 xor     r12d, r12d
.text:0000000000002E15                 mov     [rsp+148h+var_FA], 0
.text:0000000000002E1A                 mov     [rsp+148h+var_E8], 0
.text:0000000000002E23                 xor     r15d, r15d
.text:0000000000002E26                 mov     [rsp+148h+var_E0], 0
.text:0000000000002E2F                 mov     byte ptr [rsp+148h+var_138], 0
.text:0000000000002E34                 xor     r14d, r14d
.text:0000000000002E37                 mov     qword ptr [rsp+148h+errnum], 0
.text:0000000000002E40                 mov     [rsp+148h+stat_buf], rax
.text:0000000000002E45                 nop     dword ptr [rax]
.text:0000000000002E48
.text:0000000000002E48 loc_2E48:                               ; CODE XREF: main+1BD↓j
.text:0000000000002E48                                         ; main+1CE↓j ...
.text:0000000000002E48                 lea     rcx, long_options ; longopts
.text:0000000000002E4F                 lea     rdx, shortopts  ; "bfint:uvS:TZ"
.text:0000000000002E56                 xor     r8d, r8d        ; longind
.text:0000000000002E59                 mov     rsi, rbx        ; argv
.text:0000000000002E5C                 mov     edi, ebp        ; argc
.text:0000000000002E5E                 call    _getopt_long
.text:0000000000002E63                 cmp     eax, 0FFFFFFFFh
.text:0000000000002E66                 jz      loc_304D
.text:0000000000002E6C                 cmp     eax, 66h ; 'f'
.text:0000000000002E6F                 jz      loc_3010
.text:0000000000002E75                 jle     short loc_2EA0
.text:0000000000002E77                 cmp     eax, 74h ; 't'
.text:0000000000002E7A                 jz      loc_2F50
.text:0000000000002E80                 jle     short loc_2EE0
.text:0000000000002E82                 cmp     eax, 76h ; 'v'
.text:0000000000002E85                 jz      loc_2FE0
.text:0000000000002E8B                 jl      loc_2FD0
.text:0000000000002E91                 add     eax, 0FFFFFF80h
.text:0000000000002E94                 jnz     short loc_2EBE
.text:0000000000002E96                 mov     cs:remove_trailing_slashes, 1
.text:0000000000002E9D                 jmp     short loc_2E48
.text:0000000000002E9D ; ---------------------------------------------------------------------------
.text:0000000000002E9F                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: main+195↑j
.text:0000000000002EA0                 cmp     eax, 53h ; 'S'
.text:0000000000002EA3                 jz      loc_2FF0
.text:0000000000002EA9                 jle     short loc_2F00
.text:0000000000002EAB                 cmp     eax, 5Ah ; 'Z'
.text:0000000000002EAE                 jz      short loc_2E48
.text:0000000000002EB0                 cmp     eax, 62h ; 'b'
.text:0000000000002EB3                 jz      loc_3020
.text:0000000000002EB9                 cmp     eax, 54h ; 'T'
.text:0000000000002EBC                 jz      short loc_2ED0
.text:0000000000002EBE
.text:0000000000002EBE loc_2EBE:                               ; CODE XREF: main+1B4↑j
.text:0000000000002EBE                                         ; main+20C↓j ...
.text:0000000000002EBE                 mov     edi, 1          ; status
.text:0000000000002EC3                 call    usage
.text:0000000000002EC3 ; ---------------------------------------------------------------------------
.text:0000000000002EC8                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: main+1DC↑j
.text:0000000000002ED0                 mov     byte ptr [rsp+148h+var_138], 1
.text:0000000000002ED5                 jmp     loc_2E48
.text:0000000000002ED5 ; ---------------------------------------------------------------------------
.text:0000000000002EDA                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: main+1A0↑j
.text:0000000000002EE0                 cmp     eax, 69h ; 'i'
.text:0000000000002EE3                 jz      loc_3040
.text:0000000000002EE9                 cmp     eax, 6Eh ; 'n'
.text:0000000000002EEC                 jnz     short loc_2EBE
.text:0000000000002EEE                 mov     [rsp+148h+var_120], 2
.text:0000000000002EF6                 jmp     loc_2E48
.text:0000000000002EF6 ; ---------------------------------------------------------------------------
.text:0000000000002EFB                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: main+1C9↑j
.text:0000000000002F00                 cmp     eax, 0FFFFFF7Dh
.text:0000000000002F05                 jnz     loc_32AB
.text:0000000000002F0B                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:0000000000002F12                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002F19                 mov     rcx, cs:Version
.text:0000000000002F20                 push    0
.text:0000000000002F22                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000002F29                 lea     r8, aMikeParker ; "Mike Parker"
.text:0000000000002F30                 push    rax
.text:0000000000002F31                 lea     rdx, unk_14FAE
.text:0000000000002F38                 lea     rsi, aMv        ; "mv"
.text:0000000000002F3F                 xor     eax, eax
.text:0000000000002F41                 call    version_etc
.text:0000000000002F46                 xor     edi, edi        ; status
.text:0000000000002F48                 call    _exit
.text:0000000000002F48 ; ---------------------------------------------------------------------------
.text:0000000000002F4D                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: main+19A↑j
.text:0000000000002F50                 test    r12, r12
.text:0000000000002F53                 jnz     loc_339F
.text:0000000000002F59                 mov     rdx, [rsp+148h+stat_buf] ; stat_buf
.text:0000000000002F5E                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; filename
.text:0000000000002F65                 mov     edi, 1          ; ver
.text:0000000000002F6A                 call    ___xstat
.text:0000000000002F6F                 test    eax, eax
.text:0000000000002F71                 jnz     loc_3407
.text:0000000000002F77                 mov     eax, [rsp+148h+var_D8.st_mode]
.text:0000000000002F7E                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000002F85                 and     eax, 0F000h
.text:0000000000002F8A                 cmp     eax, 4000h
.text:0000000000002F8F                 jz      loc_2E48
.text:0000000000002F95                 mov     rsi, r12
.text:0000000000002F98                 mov     edi, 4
.text:0000000000002F9D                 call    quotearg_style
.text:0000000000002FA2                 lea     rsi, aTargetSIsNotAD ; "target %s is not a directory"
.text:0000000000002FA9                 mov     rbx, rax
.text:0000000000002FAC                 mov     edx, 5          ; category
.text:0000000000002FB1                 xor     edi, edi        ; domainname
.text:0000000000002FB3                 call    _dcgettext
.text:0000000000002FB8                 mov     rcx, rbx
.text:0000000000002FBB                 mov     rdx, rax        ; format
.text:0000000000002FBE                 xor     esi, esi        ; errnum
.text:0000000000002FC0                 mov     edi, 1          ; status
.text:0000000000002FC5                 xor     eax, eax
.text:0000000000002FC7                 call    _error
.text:0000000000002FCC                 nop     dword ptr [rax+00h]
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: main+1AB↑j
.text:0000000000002FD0                 mov     [rsp+148h+var_FB], 1
.text:0000000000002FD5                 jmp     loc_2E48
.text:0000000000002FD5 ; ---------------------------------------------------------------------------
.text:0000000000002FDA                 align 20h
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: main+1A5↑j
.text:0000000000002FE0                 mov     [rsp+148h+var_FA], 1
.text:0000000000002FE5                 jmp     loc_2E48
.text:0000000000002FE5 ; ---------------------------------------------------------------------------
.text:0000000000002FEA                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 loc_2FF0:                               ; CODE XREF: main+1C3↑j
.text:0000000000002FF0                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002FF7                 mov     r14d, 1
.text:0000000000002FFD                 mov     qword ptr [rsp+148h+errnum], rax
.text:0000000000003002                 jmp     loc_2E48
.text:0000000000003002 ; ---------------------------------------------------------------------------
.text:0000000000003007                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: main+18F↑j
.text:0000000000003010                 mov     [rsp+148h+var_120], 1
.text:0000000000003018                 jmp     loc_2E48
.text:0000000000003018 ; ---------------------------------------------------------------------------
.text:000000000000301D                 align 20h
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: main+1D3↑j
.text:0000000000003020                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000003027                 mov     r14d, 1
.text:000000000000302D                 test    rax, rax
.text:0000000000003030                 cmovnz  r15, rax
.text:0000000000003034                 jmp     loc_2E48
.text:0000000000003034 ; ---------------------------------------------------------------------------
.text:0000000000003039                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: main+203↑j
.text:0000000000003040                 mov     [rsp+148h+var_120], 3
.text:0000000000003048                 jmp     loc_2E48
.text:000000000000304D ; ---------------------------------------------------------------------------
.text:000000000000304D
.text:000000000000304D loc_304D:                               ; CODE XREF: main+186↑j
.text:000000000000304D                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000003054                 sub     ebp, eax
.text:0000000000003056                 lea     rbx, [rbx+rax*8]
.text:000000000000305A                 xor     eax, eax
.text:000000000000305C                 test    r12, r12
.text:000000000000305F                 setz    al
.text:0000000000003062                 cmp     eax, ebp
.text:0000000000003064                 jge     loc_32D5
.text:000000000000306A                 cmp     byte ptr [rsp+148h+var_138], 0
.text:000000000000306F                 jnz     loc_3121
.text:0000000000003075                 test    r12, r12
.text:0000000000003078                 jz      loc_31DE
.text:000000000000307E
.text:000000000000307E loc_307E:                               ; CODE XREF: main+44D↓j
.text:000000000000307E                                         ; main+575↓j ...
.text:000000000000307E                 cmp     [rsp+148h+var_120], 2
.text:0000000000003083                 jz      loc_3155
.text:0000000000003089                 test    r14b, r14b
.text:000000000000308C                 jz      loc_3163
.text:0000000000003092                 lea     rsi, aBackupType ; "backup type"
.text:0000000000003099                 xor     edi, edi        ; domainname
.text:000000000000309B                 mov     edx, 5          ; category
.text:00000000000030A0                 call    _dcgettext
.text:00000000000030A5                 mov     rsi, r15
.text:00000000000030A8                 mov     rdi, rax
.text:00000000000030AB                 call    xget_version
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: main+485↓j
.text:00000000000030B0                 mov     rdi, qword ptr [rsp+148h+errnum]
.text:00000000000030B5                 mov     [rsp+148h+var_128], eax
.text:00000000000030B9                 call    set_simple_backup_suffix
.text:00000000000030BE                 call    hash_init
.text:00000000000030C3                 test    r12, r12
.text:00000000000030C6                 jz      loc_31C0
.text:00000000000030CC                 cmp     ebp, 1
.text:00000000000030CF                 jnz     loc_316A
.text:00000000000030D5                 mov     rdi, [rbx]
.text:00000000000030D8                 mov     rcx, r13
.text:00000000000030DB                 mov     edx, 1
.text:00000000000030E0                 mov     rsi, r12
.text:00000000000030E3                 mov     [rsp+148h+var_F7], 1
.text:00000000000030E8                 call    movefile
.text:00000000000030ED                 mov     r14d, eax
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: main+4DB↓j
.text:00000000000030F0                                         ; main+4F9↓j
.text:00000000000030F0                 xor     r14d, 1
.text:00000000000030F4                 mov     rcx, [rsp+148h+var_40]
.text:00000000000030FC                 xor     rcx, fs:28h
.text:0000000000003105                 movzx   eax, r14b
.text:0000000000003109                 jnz     loc_346E
.text:000000000000310F                 add     rsp, 118h
.text:0000000000003116                 pop     rbx
.text:0000000000003117                 pop     rbp
.text:0000000000003118                 pop     r12
.text:000000000000311A                 pop     r13
.text:000000000000311C                 pop     r14
.text:000000000000311E                 pop     r15
.text:0000000000003120                 retn
.text:0000000000003121 ; ---------------------------------------------------------------------------
.text:0000000000003121
.text:0000000000003121 loc_3121:                               ; CODE XREF: main+38F↑j
.text:0000000000003121                 test    r12, r12
.text:0000000000003124                 jnz     loc_344A
.text:000000000000312A                 cmp     ebp, 2
.text:000000000000312D                 jle     loc_307E
.text:0000000000003133                 mov     rsi, [rbx+10h]
.text:0000000000003137                 mov     edi, 4
.text:000000000000313C                 call    quotearg_style
.text:0000000000003141                 mov     edx, 5
.text:0000000000003146                 mov     rbx, rax
.text:0000000000003149                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000003150                 jmp     loc_32F6
.text:0000000000003155 ; ---------------------------------------------------------------------------
.text:0000000000003155
.text:0000000000003155 loc_3155:                               ; CODE XREF: main+3A3↑j
.text:0000000000003155                 test    r14b, r14b
.text:0000000000003158                 mov     [rsp+148h+var_FB], 0
.text:000000000000315D                 jnz     loc_3313
.text:0000000000003163
.text:0000000000003163 loc_3163:                               ; CODE XREF: main+3AC↑j
.text:0000000000003163                 xor     eax, eax
.text:0000000000003165                 jmp     loc_30B0
.text:000000000000316A ; ---------------------------------------------------------------------------
.text:000000000000316A
.text:000000000000316A loc_316A:                               ; CODE XREF: main+3EF↑j
.text:000000000000316A                 lea     r15d, [rbp-1]
.text:000000000000316E                 mov     rdi, r13
.text:0000000000003171                 mov     r14d, 1
.text:0000000000003177                 call    dest_info_init
.text:000000000000317C                 lea     rax, [r15+2]
.text:0000000000003180                 mov     r15d, 1
.text:0000000000003186                 mov     qword ptr [rsp+148h+errnum], rax
.text:000000000000318B                 nop     dword ptr [rax+rax+00h]
.text:0000000000003190
.text:0000000000003190 loc_3190:                               ; CODE XREF: main+4D9↓j
.text:0000000000003190                 mov     rdi, [rbx+r15*8-8]
.text:0000000000003195                 cmp     ebp, r15d
.text:0000000000003198                 mov     rcx, r13
.text:000000000000319B                 mov     edx, 1
.text:00000000000031A0                 mov     rsi, r12
.text:00000000000031A3                 setz    [rsp+148h+var_F7]
.text:00000000000031A8                 add     r15, 1
.text:00000000000031AC                 call    movefile
.text:00000000000031B1                 and     r14d, eax
.text:00000000000031B4                 cmp     r15, qword ptr [rsp+148h+errnum]
.text:00000000000031B9                 jnz     short loc_3190
.text:00000000000031BB                 jmp     loc_30F0
.text:00000000000031C0 ; ---------------------------------------------------------------------------
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: main+3E6↑j
.text:00000000000031C0                 mov     rsi, [rbx+8]
.text:00000000000031C4                 mov     rdi, [rbx]
.text:00000000000031C7                 mov     rcx, r13
.text:00000000000031CA                 xor     edx, edx
.text:00000000000031CC                 mov     [rsp+148h+var_F7], 1
.text:00000000000031D1                 call    movefile
.text:00000000000031D6                 mov     r14d, eax
.text:00000000000031D9                 jmp     loc_30F0
.text:00000000000031DE ; ---------------------------------------------------------------------------
.text:00000000000031DE
.text:00000000000031DE loc_31DE:                               ; CODE XREF: main+398↑j
.text:00000000000031DE                 cmp     ebp, 1
.text:00000000000031E1                 jz      loc_3380
.text:00000000000031E7                 cmp     ebp, 2
.text:00000000000031EA                 jz      loc_3284
.text:00000000000031F0                 cmp     [rsp+148h+var_F4], 0
.text:00000000000031F5                 movsxd  rcx, ebp
.text:00000000000031F8                 jz      loc_3347
.text:00000000000031FE
.text:00000000000031FE loc_31FE:                               ; CODE XREF: main+5EA↓j
.text:00000000000031FE                 movsxd  rcx, ebp
.text:0000000000003201                 lea     rdx, [rsp+148h+var_D8] ; stat_buf
.text:0000000000003206                 mov     edi, 1          ; ver
.text:000000000000320B                 mov     rax, [rbx+rcx*8-8]
.text:0000000000003210                 mov     [rsp+148h+var_138], rcx
.text:0000000000003215                 mov     rsi, rax        ; filename
.text:0000000000003218                 mov     [rsp+148h+stat_buf], rax
.text:000000000000321D                 call    ___xstat
.text:0000000000003222                 test    eax, eax
.text:0000000000003224                 mov     rcx, [rsp+148h+var_138]
.text:0000000000003229                 jz      short loc_325A
.text:000000000000322B                 call    ___errno_location
.text:0000000000003230                 mov     r8d, [rax]
.text:0000000000003233                 mov     rcx, [rsp+148h+var_138]
.text:0000000000003238                 test    r8d, r8d
.text:000000000000323B                 jz      short loc_325A
.text:000000000000323D                 cmp     r8d, 2
.text:0000000000003241                 jnz     loc_33C3
.text:0000000000003247
.text:0000000000003247 loc_3247:                               ; CODE XREF: main+58B↓j
.text:0000000000003247                 cmp     ebp, 2
.text:000000000000324A                 jnz     loc_3347
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: main+5C9↓j
.text:0000000000003250                                         ; main+5F0↓j
.text:0000000000003250                 mov     ebp, 2
.text:0000000000003255                 jmp     loc_307E
.text:000000000000325A ; ---------------------------------------------------------------------------
.text:000000000000325A
.text:000000000000325A loc_325A:                               ; CODE XREF: main+549↑j
.text:000000000000325A                                         ; main+55B↑j
.text:000000000000325A                 mov     eax, [rsp+148h+var_D8.st_mode]
.text:0000000000003261                 and     eax, 0F000h
.text:0000000000003266                 cmp     eax, 4000h
.text:000000000000326B                 jnz     short loc_3247
.text:000000000000326D                 sub     ebp, 1
.text:0000000000003270                 mov     [rsp+148h+var_F4], 0FFFFFFFFh
.text:0000000000003278                 movsxd  rax, ebp
.text:000000000000327B                 mov     r12, [rbx+rax*8]
.text:000000000000327F                 jmp     loc_307E
.text:0000000000003284 ; ---------------------------------------------------------------------------
.text:0000000000003284
.text:0000000000003284 loc_3284:                               ; CODE XREF: main+50A↑j
.text:0000000000003284                 mov     rcx, [rbx+8]
.text:0000000000003288                 mov     rsi, [rbx]
.text:000000000000328B                 mov     edx, 0FFFFFF9Ch
.text:0000000000003290                 mov     r8d, 1
.text:0000000000003296                 mov     edi, edx
.text:0000000000003298                 call    renameat2
.text:000000000000329D                 test    eax, eax
.text:000000000000329F                 jnz     short loc_32BD
.text:00000000000032A1                 mov     [rsp+148h+var_F4], 0
.text:00000000000032A9                 jmp     short loc_3250
.text:00000000000032AB ; ---------------------------------------------------------------------------
.text:00000000000032AB
.text:00000000000032AB loc_32AB:                               ; CODE XREF: main+225↑j
.text:00000000000032AB                 cmp     eax, 0FFFFFF7Eh
.text:00000000000032B0                 jnz     loc_2EBE
.text:00000000000032B6                 xor     edi, edi        ; status
.text:00000000000032B8                 call    usage
.text:00000000000032BD ; ---------------------------------------------------------------------------
.text:00000000000032BD
.text:00000000000032BD loc_32BD:                               ; CODE XREF: main+5BF↑j
.text:00000000000032BD                 call    ___errno_location
.text:00000000000032C2                 mov     eax, [rax]
.text:00000000000032C4                 test    eax, eax
.text:00000000000032C6                 mov     [rsp+148h+var_F4], eax
.text:00000000000032CA                 jnz     loc_31FE
.text:00000000000032D0                 jmp     loc_3250
.text:00000000000032D5 ; ---------------------------------------------------------------------------
.text:00000000000032D5
.text:00000000000032D5 loc_32D5:                               ; CODE XREF: main+384↑j
.text:00000000000032D5                 sub     ebp, 1
.text:00000000000032D8                 jnz     short loc_3339
.text:00000000000032DA                 mov     rsi, [rbx]
.text:00000000000032DD                 mov     edi, 4
.text:00000000000032E2                 call    quotearg_style
.text:00000000000032E7                 lea     rsi, aMissingDestina ; "missing destination file operand after "...
.text:00000000000032EE                 mov     rbx, rax
.text:00000000000032F1                 mov     edx, 5          ; category
.text:00000000000032F6
.text:00000000000032F6 loc_32F6:                               ; CODE XREF: main+470↑j
.text:00000000000032F6                 xor     edi, edi        ; domainname
.text:00000000000032F8                 call    _dcgettext
.text:00000000000032FD                 mov     rcx, rbx
.text:0000000000003300                 mov     rdx, rax        ; format
.text:0000000000003303                 xor     esi, esi        ; errnum
.text:0000000000003305                 xor     edi, edi        ; status
.text:0000000000003307                 xor     eax, eax
.text:0000000000003309                 call    _error
.text:000000000000330E                 jmp     loc_2EBE
.text:0000000000003313 ; ---------------------------------------------------------------------------
.text:0000000000003313
.text:0000000000003313 loc_3313:                               ; CODE XREF: main+47D↑j
.text:0000000000003313                 lea     rsi, aOptionsBackupA ; "options --backup and --no-clobber are m"...
.text:000000000000331A                 mov     edx, 5          ; category
.text:000000000000331F
.text:000000000000331F loc_331F:                               ; CODE XREF: main+665↓j
.text:000000000000331F                 xor     edi, edi        ; domainname
.text:0000000000003321                 call    _dcgettext
.text:0000000000003326                 xor     esi, esi        ; errnum
.text:0000000000003328                 mov     rdx, rax        ; format
.text:000000000000332B                 xor     edi, edi        ; status
.text:000000000000332D                 xor     eax, eax
.text:000000000000332F                 call    _error
.text:0000000000003334                 jmp     loc_2EBE
.text:0000000000003339 ; ---------------------------------------------------------------------------
.text:0000000000003339
.text:0000000000003339 loc_3339:                               ; CODE XREF: main+5F8↑j
.text:0000000000003339                 mov     edx, 5
.text:000000000000333E                 lea     rsi, aMissingFileOpe ; "missing file operand"
.text:0000000000003345                 jmp     short loc_331F
.text:0000000000003347 ; ---------------------------------------------------------------------------
.text:0000000000003347
.text:0000000000003347 loc_3347:                               ; CODE XREF: main+518↑j
.text:0000000000003347                                         ; main+56A↑j
.text:0000000000003347                 mov     rsi, [rbx+rcx*8-8]
.text:000000000000334C                 mov     edi, 4
.text:0000000000003351                 call    quotearg_style
.text:0000000000003356                 lea     rsi, aTargetSIsNotAD ; "target %s is not a directory"
.text:000000000000335D                 mov     rbx, rax
.text:0000000000003360                 mov     edx, 5          ; category
.text:0000000000003365                 xor     edi, edi        ; domainname
.text:0000000000003367                 call    _dcgettext
.text:000000000000336C                 mov     rcx, rbx
.text:000000000000336F                 mov     rdx, rax        ; format
.text:0000000000003372                 xor     esi, esi        ; errnum
.text:0000000000003374                 mov     edi, 1          ; status
.text:0000000000003379                 xor     eax, eax
.text:000000000000337B                 call    _error
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: main+501↑j
.text:0000000000003380                 lea     rcx, __PRETTY_FUNCTION___7244 ; "main"
.text:0000000000003387                 lea     rsi, file       ; "../coreutils-8.31/src/mv.c"
.text:000000000000338E                 lea     rdi, assertion  ; "2 <= n_files"
.text:0000000000003395                 mov     edx, 1C9h       ; line
.text:000000000000339A                 call    ___assert_fail
.text:000000000000339F ; ---------------------------------------------------------------------------
.text:000000000000339F
.text:000000000000339F loc_339F:                               ; CODE XREF: main+273↑j
.text:000000000000339F                 lea     rsi, aMultipleTarget ; "multiple target directories specified"
.text:00000000000033A6                 mov     edx, 5          ; category
.text:00000000000033AB                 xor     edi, edi        ; domainname
.text:00000000000033AD                 call    _dcgettext
.text:00000000000033B2                 xor     esi, esi        ; errnum
.text:00000000000033B4                 mov     rdx, rax        ; format
.text:00000000000033B7                 mov     edi, 1          ; status
.text:00000000000033BC                 xor     eax, eax
.text:00000000000033BE                 call    _error
.text:00000000000033C3
.text:00000000000033C3 loc_33C3:                               ; CODE XREF: main+561↑j
.text:00000000000033C3                 mov     rsi, [rsp+148h+stat_buf]
.text:00000000000033C8                 mov     edi, 4
.text:00000000000033CD                 mov     [rsp+148h+errnum], r8d
.text:00000000000033D2                 call    quotearg_style
.text:00000000000033D7                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:00000000000033DE                 mov     edx, 5          ; category
.text:00000000000033E3                 xor     edi, edi        ; domainname
.text:00000000000033E5                 mov     rbx, rax
.text:00000000000033E8                 call    _dcgettext
.text:00000000000033ED                 mov     r8d, [rsp+148h+errnum]
.text:00000000000033F2                 mov     rdx, rax        ; format
.text:00000000000033F5                 mov     rcx, rbx
.text:00000000000033F8                 mov     edi, 1          ; status
.text:00000000000033FD                 xor     eax, eax
.text:00000000000033FF                 mov     esi, r8d        ; errnum
.text:0000000000003402                 call    _error
.text:0000000000003407
.text:0000000000003407 loc_3407:                               ; CODE XREF: main+291↑j
.text:0000000000003407                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:000000000000340E                 mov     edi, 4
.text:0000000000003413                 call    quotearg_style
.text:0000000000003418                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:000000000000341F                 mov     edx, 5          ; category
.text:0000000000003424                 xor     edi, edi        ; domainname
.text:0000000000003426                 mov     rbp, rax
.text:0000000000003429                 call    _dcgettext
.text:000000000000342E                 mov     rbx, rax
.text:0000000000003431                 call    ___errno_location
.text:0000000000003436                 mov     esi, [rax]      ; errnum
.text:0000000000003438                 mov     rcx, rbp
.text:000000000000343B                 mov     rdx, rbx        ; format
.text:000000000000343E                 mov     edi, 1          ; status
.text:0000000000003443                 xor     eax, eax
.text:0000000000003445                 call    _error
.text:000000000000344A
.text:000000000000344A loc_344A:                               ; CODE XREF: main+444↑j
.text:000000000000344A                 lea     rsi, aCannotCombineT ; "cannot combine --target-directory (-t) "...
.text:0000000000003451                 mov     edx, 5          ; category
.text:0000000000003456                 xor     edi, edi        ; domainname
.text:0000000000003458                 call    _dcgettext
.text:000000000000345D                 xor     esi, esi        ; errnum
.text:000000000000345F                 mov     rdx, rax        ; format
.text:0000000000003462                 mov     edi, 1          ; status
.text:0000000000003467                 xor     eax, eax
.text:0000000000003469                 call    _error
.text:000000000000346E
.text:000000000000346E loc_346E:                               ; CODE XREF: main+429↑j
.text:000000000000346E                 call    ___stack_chk_fail
.text:000000000000346E ; } // starts at 2CE0
.text:000000000000346E main            endp
.text:000000000000346E
.text:000000000000346E ; ---------------------------------------------------------------------------
.text:0000000000003473                 align 20h
.text:0000000000003480
.text:0000000000003480 ; =============== S U B R O U T I N E =======================================
.text:0000000000003480
.text:0000000000003480 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003480
.text:0000000000003480 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003480                 public start
.text:0000000000003480 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003480 ; __unwind {
.text:0000000000003480                 xor     ebp, ebp
.text:0000000000003482                 mov     r9, rdx         ; rtld_fini
.text:0000000000003485                 pop     rsi             ; argc
.text:0000000000003486                 mov     rdx, rsp        ; ubp_av
.text:0000000000003489                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000348D                 push    rax
.text:000000000000348E                 push    rsp             ; stack_end
.text:000000000000348F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003496                 lea     rcx, __libc_csu_init ; init
.text:000000000000349D                 lea     rdi, main       ; main
.text:00000000000034A4                 call    cs:__libc_start_main_ptr
.text:00000000000034AA                 hlt
.text:00000000000034AA ; } // starts at 3480
.text:00000000000034AA start           endp
.text:00000000000034AA
.text:00000000000034AA ; ---------------------------------------------------------------------------
.text:00000000000034AB                 align 10h
.text:00000000000034B0
.text:00000000000034B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034B0
.text:00000000000034B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000034B0
.text:00000000000034B0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3563↓p
.text:00000000000034B0                 lea     rdi, __bss_start
.text:00000000000034B7                 push    rbp
.text:00000000000034B8                 lea     rax, __bss_start
.text:00000000000034BF                 cmp     rax, rdi
.text:00000000000034C2                 mov     rbp, rsp
.text:00000000000034C5                 jz      short loc_34E0
.text:00000000000034C7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000034CE                 test    rax, rax
.text:00000000000034D1                 jz      short loc_34E0
.text:00000000000034D3                 pop     rbp
.text:00000000000034D4                 jmp     rax
.text:00000000000034D4 ; ---------------------------------------------------------------------------
.text:00000000000034D6                 align 20h
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000034E0                                         ; deregister_tm_clones+21↑j
.text:00000000000034E0                 pop     rbp
.text:00000000000034E1                 retn
.text:00000000000034E1 deregister_tm_clones endp
.text:00000000000034E1
.text:00000000000034E1 ; ---------------------------------------------------------------------------
.text:00000000000034E2                 align 10h
.text:00000000000034F0
.text:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034F0
.text:00000000000034F0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000034F0
.text:00000000000034F0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000034F0                 lea     rdi, __bss_start
.text:00000000000034F7                 lea     rsi, __bss_start
.text:00000000000034FE                 push    rbp
.text:00000000000034FF                 sub     rsi, rdi
.text:0000000000003502                 mov     rbp, rsp
.text:0000000000003505                 sar     rsi, 3
.text:0000000000003509                 mov     rax, rsi
.text:000000000000350C                 shr     rax, 3Fh
.text:0000000000003510                 add     rsi, rax
.text:0000000000003513                 sar     rsi, 1
.text:0000000000003516                 jz      short loc_3530
.text:0000000000003518                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000351F                 test    rax, rax
.text:0000000000003522                 jz      short loc_3530
.text:0000000000003524                 pop     rbp
.text:0000000000003525                 jmp     rax
.text:0000000000003525 ; ---------------------------------------------------------------------------
.text:0000000000003527                 align 10h
.text:0000000000003530
.text:0000000000003530 loc_3530:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000003530                                         ; register_tm_clones+32↑j
.text:0000000000003530                 pop     rbp
.text:0000000000003531                 retn
.text:0000000000003531 register_tm_clones endp
.text:0000000000003531
.text:0000000000003531 ; ---------------------------------------------------------------------------
.text:0000000000003532                 align 20h
.text:0000000000003540
.text:0000000000003540 ; =============== S U B R O U T I N E =======================================
.text:0000000000003540
.text:0000000000003540 ; Attributes: info_from_lumina
.text:0000000000003540
.text:0000000000003540 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000003540                 cmp     cs:completed_7697, 0
.text:0000000000003547                 jnz     short locret_3578
.text:0000000000003549                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003551                 push    rbp
.text:0000000000003552                 mov     rbp, rsp
.text:0000000000003555                 jz      short loc_3563
.text:0000000000003557                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000355E                 call    __cxa_finalize
.text:0000000000003563
.text:0000000000003563 loc_3563:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003563                 call    deregister_tm_clones
.text:0000000000003568                 mov     cs:completed_7697, 1
.text:000000000000356F                 pop     rbp
.text:0000000000003570                 retn
.text:0000000000003570 ; ---------------------------------------------------------------------------
.text:0000000000003571                 align 8
.text:0000000000003578
.text:0000000000003578 locret_3578:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003578                 rep retn
.text:0000000000003578 __do_global_dtors_aux endp
.text:0000000000003578
.text:0000000000003578 ; ---------------------------------------------------------------------------
.text:000000000000357A                 align 20h
.text:0000000000003580
.text:0000000000003580 ; =============== S U B R O U T I N E =======================================
.text:0000000000003580
.text:0000000000003580 ; Attributes: bp-based frame
.text:0000000000003580
.text:0000000000003580 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003580                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003580                 push    rbp
.text:0000000000003581                 mov     rbp, rsp
.text:0000000000003584                 pop     rbp
.text:0000000000003585                 jmp     register_tm_clones
.text:0000000000003585 frame_dummy     endp
.text:0000000000003585
.text:0000000000003585 ; ---------------------------------------------------------------------------
.text:000000000000358A                 align 10h
.text:0000000000003590
.text:0000000000003590 ; =============== S U B R O U T I N E =======================================
.text:0000000000003590
.text:0000000000003590
.text:0000000000003590 do_move         proc near               ; CODE XREF: movefile+2F↓j
.text:0000000000003590                                         ; movefile+61↓p
.text:0000000000003590
.text:0000000000003590 var_5A          = byte ptr -5Ah
.text:0000000000003590 var_59          = byte ptr -59h
.text:0000000000003590 var_58          = byte ptr -58h
.text:0000000000003590 var_54          = dword ptr -54h
.text:0000000000003590 var_50          = byte ptr -50h
.text:0000000000003590 var_4F          = byte ptr -4Fh
.text:0000000000003590 var_4E          = byte ptr -4Eh
.text:0000000000003590 var_48          = qword ptr -48h
.text:0000000000003590 var_40          = byte ptr -40h
.text:0000000000003590 var_3F          = byte ptr -3Fh
.text:0000000000003590 var_3E          = byte ptr -3Eh
.text:0000000000003590 var_3D          = byte ptr -3Dh
.text:0000000000003590 var_38          = qword ptr -38h
.text:0000000000003590 var_30          = qword ptr -30h
.text:0000000000003590 var_20          = qword ptr -20h
.text:0000000000003590
.text:0000000000003590 ; __unwind {
.text:0000000000003590                 push    rbp
.text:0000000000003591                 push    rbx
.text:0000000000003592                 mov     rcx, rdx
.text:0000000000003595                 mov     rbp, rdx
.text:0000000000003598                 xor     edx, edx
.text:000000000000359A                 mov     rbx, rdi
.text:000000000000359D                 sub     rsp, 58h
.text:00000000000035A1                 lea     r9, [rsp+68h+var_59]
.text:00000000000035A6                 lea     r8, [rsp+68h+var_5A]
.text:00000000000035AB                 mov     rax, fs:28h
.text:00000000000035B4                 mov     [rsp+68h+var_20], rax
.text:00000000000035B9                 xor     eax, eax
.text:00000000000035BB                 call    copy
.text:00000000000035C0                 test    al, al
.text:00000000000035C2                 jz      loc_3660
.text:00000000000035C8                 cmp     [rsp+68h+var_5A], 0
.text:00000000000035CD                 jnz     loc_3680
.text:00000000000035D3                 cmp     [rsp+68h+var_59], 1
.text:00000000000035D8                 jz      loc_3660
.text:00000000000035DE                 test    rbx, rbx
.text:00000000000035E1                 jz      short loc_3660
.text:00000000000035E3                 lea     rdi, dev_ino_buf_7162
.text:00000000000035EA                 mov     [rsp+68h+var_58], 0
.text:00000000000035EF                 mov     [rsp+68h+var_4E], 1
.text:00000000000035F4                 mov     [rsp+68h+var_4F], 1
.text:00000000000035F9                 mov     [rsp+68h+var_50], 0
.text:00000000000035FE                 mov     [rsp+68h+var_54], 5
.text:0000000000003606                 mov     [rsp+68h+var_3F], 0
.text:000000000000360B                 mov     [rsp+68h+var_3E], 0
.text:0000000000003610                 mov     [rsp+68h+var_3D], 1
.text:0000000000003615                 call    get_root_dev_ino
.text:000000000000361A                 test    rax, rax
.text:000000000000361D                 mov     [rsp+68h+var_48], rax
.text:0000000000003622                 jz      loc_36A8
.text:0000000000003628                 movzx   eax, byte ptr [rbp+2Eh]
.text:000000000000362C                 lea     rsi, [rsp+68h+var_58]
.text:0000000000003631                 lea     rdi, [rsp+68h+var_38]
.text:0000000000003636                 mov     [rsp+68h+var_40], 0
.text:000000000000363B                 mov     [rsp+68h+var_38], rbx
.text:0000000000003640                 mov     [rsp+68h+var_30], 0
.text:0000000000003649                 mov     [rsp+68h+var_3E], al
.text:000000000000364D                 call    rm
.text:0000000000003652                 lea     edx, [rax-2]
.text:0000000000003655                 cmp     edx, 2
.text:0000000000003658                 ja      short loc_3689
.text:000000000000365A                 cmp     eax, 4
.text:000000000000365D                 setnz   al
.text:0000000000003660
.text:0000000000003660 loc_3660:                               ; CODE XREF: do_move+32↑j
.text:0000000000003660                                         ; do_move+48↑j ...
.text:0000000000003660                 mov     rcx, [rsp+68h+var_20]
.text:0000000000003665                 xor     rcx, fs:28h
.text:000000000000366E                 jnz     short loc_3684
.text:0000000000003670                 add     rsp, 58h
.text:0000000000003674                 pop     rbx
.text:0000000000003675                 pop     rbp
.text:0000000000003676                 retn
.text:0000000000003676 ; ---------------------------------------------------------------------------
.text:0000000000003677                 align 20h
.text:0000000000003680
.text:0000000000003680 loc_3680:                               ; CODE XREF: do_move+3D↑j
.text:0000000000003680                 xor     eax, eax
.text:0000000000003682                 jmp     short loc_3660
.text:0000000000003684 ; ---------------------------------------------------------------------------
.text:0000000000003684
.text:0000000000003684 loc_3684:                               ; CODE XREF: do_move+DE↑j
.text:0000000000003684                 call    ___stack_chk_fail
.text:0000000000003689 ; ---------------------------------------------------------------------------
.text:0000000000003689
.text:0000000000003689 loc_3689:                               ; CODE XREF: do_move+C8↑j
.text:0000000000003689                 lea     rcx, __PRETTY_FUNCTION___7189 ; "do_move"
.text:0000000000003690                 lea     rsi, file       ; "../coreutils-8.31/src/mv.c"
.text:0000000000003697                 lea     rdi, aValidStatusSta ; "VALID_STATUS (status)"
.text:000000000000369E                 mov     edx, 0EFh       ; line
.text:00000000000036A3                 call    ___assert_fail
.text:00000000000036A8 ; ---------------------------------------------------------------------------
.text:00000000000036A8
.text:00000000000036A8 loc_36A8:                               ; CODE XREF: do_move+92↑j
.text:00000000000036A8                 lea     rsi, aLibs+6    ; "/"
.text:00000000000036AF                 mov     edi, 4
.text:00000000000036B4                 call    quotearg_style
.text:00000000000036B9                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:00000000000036C0                 mov     edx, 5          ; category
.text:00000000000036C5                 xor     edi, edi        ; domainname
.text:00000000000036C7                 mov     rbp, rax
.text:00000000000036CA                 call    _dcgettext
.text:00000000000036CF                 mov     rbx, rax
.text:00000000000036D2                 call    ___errno_location
.text:00000000000036D7                 mov     esi, [rax]      ; errnum
.text:00000000000036D9                 mov     rcx, rbp
.text:00000000000036DC                 mov     rdx, rbx        ; format
.text:00000000000036DF                 mov     edi, 1          ; status
.text:00000000000036E4                 xor     eax, eax
.text:00000000000036E6                 call    _error
.text:00000000000036E6 ; } // starts at 3590
.text:00000000000036EB                 nop     dword ptr [rax+rax+00h]
.text:00000000000036EB do_move         endp ; sp-analysis failed
.text:00000000000036EB
.text:00000000000036F0
.text:00000000000036F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036F0
.text:00000000000036F0
.text:00000000000036F0 movefile        proc near               ; CODE XREF: main+408↑p
.text:00000000000036F0                                         ; main+4CC↑p ...
.text:00000000000036F0
.text:00000000000036F0 var_1C          = dword ptr -1Ch
.text:00000000000036F0
.text:00000000000036F0 ; __unwind {
.text:00000000000036F0                 push    r12
.text:00000000000036F2                 push    rbp
.text:00000000000036F3                 mov     r12, rcx
.text:00000000000036F6                 push    rbx
.text:00000000000036F7                 mov     rbp, rsi
.text:00000000000036FA                 mov     rbx, rdi
.text:00000000000036FD                 sub     rsp, 10h
.text:0000000000003701                 cmp     cs:remove_trailing_slashes, 0
.text:0000000000003708                 jnz     short loc_3770
.text:000000000000370A
.text:000000000000370A loc_370A:                               ; CODE XREF: movefile+8D↓j
.text:000000000000370A                 test    dl, dl
.text:000000000000370C                 jnz     short loc_3728
.text:000000000000370E                 add     rsp, 10h
.text:0000000000003712                 mov     rdx, r12
.text:0000000000003715                 mov     rsi, rbp
.text:0000000000003718                 mov     rdi, rbx
.text:000000000000371B                 pop     rbx
.text:000000000000371C                 pop     rbp
.text:000000000000371D                 pop     r12
.text:000000000000371F                 jmp     do_move
.text:000000000000371F ; ---------------------------------------------------------------------------
.text:0000000000003724                 align 8
.text:0000000000003728
.text:0000000000003728 loc_3728:                               ; CODE XREF: movefile+1C↑j
.text:0000000000003728                 mov     rdi, rbx
.text:000000000000372B                 call    last_component
.text:0000000000003730                 xor     edx, edx
.text:0000000000003732                 mov     rsi, rax
.text:0000000000003735                 mov     rdi, rbp
.text:0000000000003738                 call    file_name_concat
.text:000000000000373D                 mov     rbp, rax
.text:0000000000003740                 mov     rdi, rax
.text:0000000000003743                 call    strip_trailing_slashes
.text:0000000000003748                 mov     rdx, r12
.text:000000000000374B                 mov     rsi, rbp
.text:000000000000374E                 mov     rdi, rbx
.text:0000000000003751                 call    do_move
.text:0000000000003756                 mov     rdi, rbp        ; ptr
.text:0000000000003759                 mov     ebx, eax
.text:000000000000375B                 call    free
.text:0000000000003760                 add     rsp, 10h
.text:0000000000003764                 mov     eax, ebx
.text:0000000000003766                 pop     rbx
.text:0000000000003767                 pop     rbp
.text:0000000000003768                 pop     r12
.text:000000000000376A                 retn
.text:000000000000376A ; ---------------------------------------------------------------------------
.text:000000000000376B                 align 10h
.text:0000000000003770
.text:0000000000003770 loc_3770:                               ; CODE XREF: movefile+18↑j
.text:0000000000003770                 mov     [rsp+28h+var_1C], edx
.text:0000000000003774                 call    strip_trailing_slashes
.text:0000000000003779                 mov     edx, [rsp+28h+var_1C]
.text:000000000000377D                 jmp     short loc_370A
.text:000000000000377D ; } // starts at 36F0
.text:000000000000377D movefile        endp
.text:000000000000377D
.text:000000000000377D ; ---------------------------------------------------------------------------
.text:000000000000377F                 align 20h
.text:0000000000003780
.text:0000000000003780 ; =============== S U B R O U T I N E =======================================
.text:0000000000003780
.text:0000000000003780 ; Attributes: noreturn
.text:0000000000003780
.text:0000000000003780 ; void __fastcall __noreturn usage(int status)
.text:0000000000003780                 public usage
.text:0000000000003780 usage           proc near               ; CODE XREF: main+1E3↑p
.text:0000000000003780                                         ; main+5D8↑p ...
.text:0000000000003780
.text:0000000000003780 var_A8          = qword ptr -0A8h
.text:0000000000003780 var_A0          = qword ptr -0A0h
.text:0000000000003780 var_98          = qword ptr -98h
.text:0000000000003780 var_90          = qword ptr -90h
.text:0000000000003780 var_88          = qword ptr -88h
.text:0000000000003780 var_80          = qword ptr -80h
.text:0000000000003780 var_78          = qword ptr -78h
.text:0000000000003780 var_70          = qword ptr -70h
.text:0000000000003780 var_68          = qword ptr -68h
.text:0000000000003780 var_60          = qword ptr -60h
.text:0000000000003780 var_58          = qword ptr -58h
.text:0000000000003780 var_50          = qword ptr -50h
.text:0000000000003780 var_48          = qword ptr -48h
.text:0000000000003780 var_40          = qword ptr -40h
.text:0000000000003780 var_30          = qword ptr -30h
.text:0000000000003780
.text:0000000000003780 ; __unwind {
.text:0000000000003780                 push    r13
.text:0000000000003782                 push    r12
.text:0000000000003784                 mov     edx, 5          ; category
.text:0000000000003789                 push    rbp
.text:000000000000378A                 push    rbx
.text:000000000000378B                 mov     ebp, edi
.text:000000000000378D                 sub     rsp, 88h
.text:0000000000003794                 mov     rbx, cs:program_name
.text:000000000000379B                 mov     rax, fs:28h
.text:00000000000037A4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000037A9                 xor     eax, eax
.text:00000000000037AB                 test    edi, edi
.text:00000000000037AD                 jz      short loc_37DD
.text:00000000000037AF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000037B6                 xor     edi, edi        ; domainname
.text:00000000000037B8                 call    _dcgettext
.text:00000000000037BD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000037C4                 mov     rdx, rax
.text:00000000000037C7                 mov     rcx, rbx
.text:00000000000037CA                 mov     esi, 1
.text:00000000000037CF                 xor     eax, eax
.text:00000000000037D1                 call    ___fprintf_chk
.text:00000000000037D6
.text:00000000000037D6 loc_37D6:                               ; CODE XREF: usage+366↓j
.text:00000000000037D6                 mov     edi, ebp        ; status
.text:00000000000037D8                 call    _exit
.text:00000000000037DD ; ---------------------------------------------------------------------------
.text:00000000000037DD
.text:00000000000037DD loc_37DD:                               ; CODE XREF: usage+2D↑j
.text:00000000000037DD                 lea     rsi, aUsageSOptionTS ; "Usage: %s [OPTION]... [-T] SOURCE DEST"...
.text:00000000000037E4                 xor     edi, edi        ; domainname
.text:00000000000037E6                 call    _dcgettext
.text:00000000000037EB                 mov     rcx, rbx
.text:00000000000037EE                 mov     r8, rbx
.text:00000000000037F1                 mov     rdx, rbx
.text:00000000000037F4                 mov     rsi, rax
.text:00000000000037F7                 mov     edi, 1
.text:00000000000037FC                 xor     eax, eax
.text:00000000000037FE                 call    ___printf_chk
.text:0000000000003803                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000380A                 lea     rsi, aRenameSourceTo ; "Rename SOURCE to DEST, or move SOURCE(s"...
.text:0000000000003811                 mov     edx, 5          ; category
.text:0000000000003816                 xor     edi, edi        ; domainname
.text:0000000000003818                 call    _dcgettext
.text:000000000000381D                 mov     rsi, rbx        ; stream
.text:0000000000003820                 mov     rdi, rax        ; s
.text:0000000000003823                 call    _fputs_unlocked
.text:0000000000003828                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000382F                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003836                 mov     edx, 5          ; category
.text:000000000000383B                 xor     edi, edi        ; domainname
.text:000000000000383D                 call    _dcgettext
.text:0000000000003842                 mov     rsi, rbx        ; stream
.text:0000000000003845                 mov     rdi, rax        ; s
.text:0000000000003848                 call    _fputs_unlocked
.text:000000000000384D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003854                 lea     rsi, aBackupControlM ; "      --backup[=CONTROL]       make a b"...
.text:000000000000385B                 mov     edx, 5          ; category
.text:0000000000003860                 xor     edi, edi        ; domainname
.text:0000000000003862                 call    _dcgettext
.text:0000000000003867                 mov     rsi, rbx        ; stream
.text:000000000000386A                 mov     rdi, rax        ; s
.text:000000000000386D                 call    _fputs_unlocked
.text:0000000000003872                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003879                 lea     rsi, aStripTrailingS ; "      --strip-trailing-slashes  remove "...
.text:0000000000003880                 mov     edx, 5          ; category
.text:0000000000003885                 xor     edi, edi        ; domainname
.text:0000000000003887                 call    _dcgettext
.text:000000000000388C                 mov     rsi, rbx        ; stream
.text:000000000000388F                 mov     rdi, rax        ; s
.text:0000000000003892                 call    _fputs_unlocked
.text:0000000000003897                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000389E                 lea     rsi, aTTargetDirecto ; "  -t, --target-directory=DIRECTORY  mov"...
.text:00000000000038A5                 mov     edx, 5          ; category
.text:00000000000038AA                 xor     edi, edi        ; domainname
.text:00000000000038AC                 call    _dcgettext
.text:00000000000038B1                 mov     rsi, rbx        ; stream
.text:00000000000038B4                 mov     rdi, rax        ; s
.text:00000000000038B7                 call    _fputs_unlocked
.text:00000000000038BC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000038C3                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000038CA                 mov     edx, 5          ; category
.text:00000000000038CF                 xor     edi, edi        ; domainname
.text:00000000000038D1                 call    _dcgettext
.text:00000000000038D6                 mov     rsi, rbx        ; stream
.text:00000000000038D9                 mov     rdi, rax        ; s
.text:00000000000038DC                 call    _fputs_unlocked
.text:00000000000038E1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000038E8                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000038EF                 mov     edx, 5          ; category
.text:00000000000038F4                 xor     edi, edi        ; domainname
.text:00000000000038F6                 call    _dcgettext
.text:00000000000038FB                 mov     rsi, rbx        ; stream
.text:00000000000038FE                 mov     rdi, rax        ; s
.text:0000000000003901                 call    _fputs_unlocked
.text:0000000000003906                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000390D                 lea     rsi, aTheBackupSuffi ; "\nThe backup suffix is '~', unless set "...
.text:0000000000003914                 mov     edx, 5          ; category
.text:0000000000003919                 xor     edi, edi        ; domainname
.text:000000000000391B                 call    _dcgettext
.text:0000000000003920                 mov     rsi, rbx        ; stream
.text:0000000000003923                 mov     rdi, rax        ; s
.text:0000000000003926                 call    _fputs_unlocked
.text:000000000000392B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003932                 lea     rsi, aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:0000000000003939                 mov     edx, 5          ; category
.text:000000000000393E                 xor     edi, edi        ; domainname
.text:0000000000003940                 call    _dcgettext
.text:0000000000003945                 mov     rsi, rbx        ; stream
.text:0000000000003948                 mov     rdi, rax        ; s
.text:000000000000394B                 lea     rbx, aMv        ; "mv"
.text:0000000000003952                 call    _fputs_unlocked
.text:0000000000003957                 lea     rax, asc_14F38  ; "["
.text:000000000000395E                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000003965                 mov     [rsp+0A8h+var_48], 0
.text:000000000000396E                 mov     [rsp+0A8h+var_40], 0
.text:0000000000003977                 mov     rdx, rsp
.text:000000000000397A                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000397E                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000003985                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000398A                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000003991                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000003996                 lea     rax, domainname ; "coreutils"
.text:000000000000399D                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000039A2                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000039A9                 mov     [rsp+0A8h+var_98], rax
.text:00000000000039AE                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000039B5                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000039BA                 mov     [rsp+0A8h+var_90], rax
.text:00000000000039BF                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000039C6                 mov     [rsp+0A8h+var_88], rax
.text:00000000000039CB                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000039D2                 mov     [rsp+0A8h+var_80], rax
.text:00000000000039D7                 mov     [rsp+0A8h+var_70], rax
.text:00000000000039DC                 mov     [rsp+0A8h+var_60], rax
.text:00000000000039E1                 mov     [rsp+0A8h+var_50], rax
.text:00000000000039E6                 db      2Eh
.text:00000000000039E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: usage+28D↓j
.text:00000000000039F0                 add     rdx, 10h
.text:00000000000039F4                 mov     rdi, [rdx]
.text:00000000000039F7                 test    rdi, rdi
.text:00000000000039FA                 jz      short loc_3A0F
.text:00000000000039FC                 mov     ecx, 3
.text:0000000000003A01                 mov     rsi, rbx
.text:0000000000003A04                 repe cmpsb
.text:0000000000003A06                 setnbe  al
.text:0000000000003A09                 sbb     al, 0
.text:0000000000003A0B                 test    al, al
.text:0000000000003A0D                 jnz     short loc_39F0
.text:0000000000003A0F
.text:0000000000003A0F loc_3A0F:                               ; CODE XREF: usage+27A↑j
.text:0000000000003A0F                 mov     r12, [rdx+8]
.text:0000000000003A13                 xor     edi, edi        ; domainname
.text:0000000000003A15                 mov     edx, 5          ; category
.text:0000000000003A1A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003A21                 test    r12, r12
.text:0000000000003A24                 jz      loc_3AEB
.text:0000000000003A2A                 call    _dcgettext
.text:0000000000003A2F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003A36                 lea     rdx, unk_14FAE
.text:0000000000003A3D                 mov     rsi, rax
.text:0000000000003A40                 mov     edi, 1
.text:0000000000003A45                 xor     eax, eax
.text:0000000000003A47                 call    ___printf_chk
.text:0000000000003A4C                 xor     esi, esi        ; locale
.text:0000000000003A4E                 mov     edi, 5          ; category
.text:0000000000003A53                 call    _setlocale
.text:0000000000003A58                 test    rax, rax
.text:0000000000003A5B                 jz      short loc_3A79
.text:0000000000003A5D                 lea     rsi, s2         ; "en_"
.text:0000000000003A64                 mov     edx, 3          ; n
.text:0000000000003A69                 mov     rdi, rax        ; s1
.text:0000000000003A6C                 call    _strncmp
.text:0000000000003A71                 test    eax, eax
.text:0000000000003A73                 jnz     loc_3B80
.text:0000000000003A79
.text:0000000000003A79 loc_3A79:                               ; CODE XREF: usage+2DB↑j
.text:0000000000003A79                                         ; usage+425↓j
.text:0000000000003A79                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003A80                 xor     edi, edi        ; domainname
.text:0000000000003A82                 mov     edx, 5          ; category
.text:0000000000003A87                 call    _dcgettext
.text:0000000000003A8C                 lea     rcx, aMv        ; "mv"
.text:0000000000003A93                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003A9A                 mov     rsi, rax
.text:0000000000003A9D                 mov     edi, 1
.text:0000000000003AA2                 xor     eax, eax
.text:0000000000003AA4                 call    ___printf_chk
.text:0000000000003AA9                 cmp     r12, rbx
.text:0000000000003AAC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003AB3                 lea     rbx, aSSUnbackup+14h ; ""
.text:0000000000003ABA                 cmovz   rbx, rcx
.text:0000000000003ABE
.text:0000000000003ABE loc_3ABE:                               ; CODE XREF: usage+3F4↓j
.text:0000000000003ABE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003AC5                 xor     edi, edi        ; domainname
.text:0000000000003AC7                 mov     edx, 5          ; category
.text:0000000000003ACC                 call    _dcgettext
.text:0000000000003AD1                 mov     rcx, rbx
.text:0000000000003AD4                 mov     rsi, rax
.text:0000000000003AD7                 mov     rdx, r12
.text:0000000000003ADA                 mov     edi, 1
.text:0000000000003ADF                 xor     eax, eax
.text:0000000000003AE1                 call    ___printf_chk
.text:0000000000003AE6                 jmp     loc_37D6
.text:0000000000003AEB ; ---------------------------------------------------------------------------
.text:0000000000003AEB
.text:0000000000003AEB loc_3AEB:                               ; CODE XREF: usage+2A4↑j
.text:0000000000003AEB                 call    _dcgettext
.text:0000000000003AF0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003AF7                 lea     rdx, unk_14FAE
.text:0000000000003AFE                 mov     rsi, rax
.text:0000000000003B01                 mov     edi, 1
.text:0000000000003B06                 xor     eax, eax
.text:0000000000003B08                 call    ___printf_chk
.text:0000000000003B0D                 xor     esi, esi        ; locale
.text:0000000000003B0F                 mov     edi, 5          ; category
.text:0000000000003B14                 call    _setlocale
.text:0000000000003B19                 test    rax, rax
.text:0000000000003B1C                 jz      short loc_3B36
.text:0000000000003B1E                 lea     rsi, s2         ; "en_"
.text:0000000000003B25                 mov     edx, 3          ; n
.text:0000000000003B2A                 mov     rdi, rax        ; s1
.text:0000000000003B2D                 call    _strncmp
.text:0000000000003B32                 test    eax, eax
.text:0000000000003B34                 jnz     short loc_3B79
.text:0000000000003B36
.text:0000000000003B36 loc_3B36:                               ; CODE XREF: usage+39C↑j
.text:0000000000003B36                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003B3D                 mov     edx, 5          ; category
.text:0000000000003B42                 xor     edi, edi        ; domainname
.text:0000000000003B44                 lea     r12, aMv        ; "mv"
.text:0000000000003B4B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003B52                 call    _dcgettext
.text:0000000000003B57                 lea     rcx, aMv        ; "mv"
.text:0000000000003B5E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003B65                 mov     rsi, rax
.text:0000000000003B68                 mov     edi, 1
.text:0000000000003B6D                 xor     eax, eax
.text:0000000000003B6F                 call    ___printf_chk
.text:0000000000003B74                 jmp     loc_3ABE
.text:0000000000003B79 ; ---------------------------------------------------------------------------
.text:0000000000003B79
.text:0000000000003B79 loc_3B79:                               ; CODE XREF: usage+3B4↑j
.text:0000000000003B79                 lea     r12, aMv        ; "mv"
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: usage+2F3↑j
.text:0000000000003B80                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003B87                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000003B8E                 xor     edi, edi        ; domainname
.text:0000000000003B90                 mov     edx, 5          ; category
.text:0000000000003B95                 call    _dcgettext
.text:0000000000003B9A                 mov     rsi, r13        ; stream
.text:0000000000003B9D                 mov     rdi, rax        ; s
.text:0000000000003BA0                 call    _fputs_unlocked
.text:0000000000003BA5                 jmp     loc_3A79
.text:0000000000003BA5 ; } // starts at 3780
.text:0000000000003BA5 usage           endp
.text:0000000000003BA5
.text:0000000000003BA5 ; ---------------------------------------------------------------------------
.text:0000000000003BAA                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BB0
.text:0000000000003BB0
.text:0000000000003BB0 excise          proc near               ; CODE XREF: rm+424↓p
.text:0000000000003BB0                                         ; rm+449↓p
.text:0000000000003BB0
.text:0000000000003BB0 var_30          = qword ptr -30h
.text:0000000000003BB0
.text:0000000000003BB0 ; __unwind {
.text:0000000000003BB0                 push    r13
.text:0000000000003BB2                 push    r12
.text:0000000000003BB4                 mov     r13, rdx
.text:0000000000003BB7                 push    rbp
.text:0000000000003BB8                 push    rbx
.text:0000000000003BB9                 xor     edx, edx
.text:0000000000003BBB                 mov     r12, rdi
.text:0000000000003BBE                 mov     rbx, rsi
.text:0000000000003BC1                 mov     ebp, ecx
.text:0000000000003BC3                 sub     rsp, 0A8h
.text:0000000000003BCA                 mov     rsi, [rsi+30h]  ; name
.text:0000000000003BCE                 mov     edi, [rdi+2Ch]  ; fd
.text:0000000000003BD1                 mov     rax, fs:28h
.text:0000000000003BDA                 mov     [rsp+0C8h+var_30], rax
.text:0000000000003BE2                 xor     eax, eax
.text:0000000000003BE4                 test    cl, cl
.text:0000000000003BE6                 setnz   dl
.text:0000000000003BE9                 shl     edx, 9          ; flag
.text:0000000000003BEC                 call    _unlinkat
.text:0000000000003BF1                 test    eax, eax
.text:0000000000003BF3                 jnz     short loc_3C30
.text:0000000000003BF5                 cmp     byte ptr [r13+1Ah], 0
.text:0000000000003BFA                 mov     eax, 2
.text:0000000000003BFF                 jnz     loc_3CE8
.text:0000000000003C05
.text:0000000000003C05 loc_3C05:                               ; CODE XREF: excise+12F↓j
.text:0000000000003C05                                         ; excise+17C↓j ...
.text:0000000000003C05                 mov     rcx, [rsp+0C8h+var_30]
.text:0000000000003C0D                 xor     rcx, fs:28h
.text:0000000000003C16                 jnz     loc_3DF8
.text:0000000000003C1C                 add     rsp, 0A8h
.text:0000000000003C23                 pop     rbx
.text:0000000000003C24                 pop     rbp
.text:0000000000003C25                 pop     r12
.text:0000000000003C27                 pop     r13
.text:0000000000003C29                 retn
.text:0000000000003C29 ; ---------------------------------------------------------------------------
.text:0000000000003C2A                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: excise+43↑j
.text:0000000000003C30                 call    ___errno_location
.text:0000000000003C35                 mov     edx, [rax]
.text:0000000000003C37                 mov     rbp, rax
.text:0000000000003C3A                 cmp     edx, 1Eh
.text:0000000000003C3D                 jz      loc_3D38
.text:0000000000003C43                 cmp     byte ptr [r13+0], 0
.text:0000000000003C48                 jz      short loc_3C70
.text:0000000000003C4A                 cmp     edx, 14h
.text:0000000000003C4D                 jz      loc_3DB9
.text:0000000000003C53                 jle     loc_3DB0
.text:0000000000003C59                 cmp     edx, 16h
.text:0000000000003C5C                 jz      loc_3DB9
.text:0000000000003C62                 cmp     edx, 54h ; 'T'
.text:0000000000003C65                 jz      loc_3DB9
.text:0000000000003C6B                 nop     dword ptr [rax+rax+00h]
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: excise+98↑j
.text:0000000000003C70                                         ; excise+203↓j
.text:0000000000003C70                 cmp     word ptr [rbx+70h], 4
.text:0000000000003C75                 jz      loc_3D70
.text:0000000000003C7B
.text:0000000000003C7B loc_3C7B:                               ; CODE XREF: excise+1B7↓j
.text:0000000000003C7B                                         ; excise+1C3↓j ...
.text:0000000000003C7B                 mov     rsi, [rbx+38h]
.text:0000000000003C7F                 mov     edi, 4
.text:0000000000003C84                 call    quotearg_style
.text:0000000000003C89                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:0000000000003C90                 xor     edi, edi        ; domainname
.text:0000000000003C92                 mov     edx, 5          ; category
.text:0000000000003C97                 mov     r12, rax
.text:0000000000003C9A                 call    _dcgettext
.text:0000000000003C9F                 mov     esi, [rbp+0]    ; errnum
.text:0000000000003CA2                 mov     rdx, rax        ; format
.text:0000000000003CA5                 xor     edi, edi        ; status
.text:0000000000003CA7                 xor     eax, eax
.text:0000000000003CA9                 mov     rcx, r12
.text:0000000000003CAC                 call    _error
.text:0000000000003CB1                 mov     rax, [rbx+8]
.text:0000000000003CB5                 cmp     qword ptr [rax+58h], 0
.text:0000000000003CBA                 jns     short loc_3CD3
.text:0000000000003CBC                 jmp     short loc_3CDA
.text:0000000000003CBC ; ---------------------------------------------------------------------------
.text:0000000000003CBE                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 loc_3CC0:                               ; CODE XREF: excise+128↓j
.text:0000000000003CC0                 mov     qword ptr [rax+20h], 1
.text:0000000000003CC8                 mov     rax, [rax+8]
.text:0000000000003CCC                 cmp     qword ptr [rax+58h], 0
.text:0000000000003CD1                 js      short loc_3CDA
.text:0000000000003CD3
.text:0000000000003CD3 loc_3CD3:                               ; CODE XREF: excise+10A↑j
.text:0000000000003CD3                 cmp     qword ptr [rax+20h], 0
.text:0000000000003CD8                 jz      short loc_3CC0
.text:0000000000003CDA
.text:0000000000003CDA loc_3CDA:                               ; CODE XREF: excise+10C↑j
.text:0000000000003CDA                                         ; excise+121↑j
.text:0000000000003CDA                 mov     eax, 4
.text:0000000000003CDF                 jmp     loc_3C05
.text:0000000000003CDF ; ---------------------------------------------------------------------------
.text:0000000000003CE4                 align 8
.text:0000000000003CE8
.text:0000000000003CE8 loc_3CE8:                               ; CODE XREF: excise+4F↑j
.text:0000000000003CE8                 mov     rsi, [rbx+38h]
.text:0000000000003CEC                 mov     edi, 4
.text:0000000000003CF1                 call    quotearg_style
.text:0000000000003CF6                 test    bpl, bpl
.text:0000000000003CF9                 mov     rbx, rax
.text:0000000000003CFC                 mov     edx, 5          ; category
.text:0000000000003D01                 jz      loc_3DC8
.text:0000000000003D07                 lea     rsi, aRemovedDirecto ; "removed directory %s\n"
.text:0000000000003D0E                 xor     edi, edi        ; domainname
.text:0000000000003D10                 call    _dcgettext
.text:0000000000003D15
.text:0000000000003D15 loc_3D15:                               ; CODE XREF: excise+226↓j
.text:0000000000003D15                 mov     rsi, rax
.text:0000000000003D18                 mov     rdx, rbx
.text:0000000000003D1B                 mov     edi, 1
.text:0000000000003D20                 xor     eax, eax
.text:0000000000003D22                 call    ___printf_chk
.text:0000000000003D27                 mov     eax, 2
.text:0000000000003D2C                 jmp     loc_3C05
.text:0000000000003D2C ; ---------------------------------------------------------------------------
.text:0000000000003D31                 align 8
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: excise+8D↑j
.text:0000000000003D38                 mov     rdx, [rbx+30h]  ; filename
.text:0000000000003D3C                 mov     esi, [r12+2Ch]  ; fildes
.text:0000000000003D41                 mov     rcx, rsp        ; stat_buf
.text:0000000000003D44                 mov     r8d, 100h       ; flag
.text:0000000000003D4A                 mov     edi, 1          ; ver
.text:0000000000003D4F                 call    ___fxstatat
.text:0000000000003D54                 test    eax, eax
.text:0000000000003D56                 jz      short loc_3D60
.text:0000000000003D58                 mov     edx, [rbp+0]
.text:0000000000003D5B                 cmp     edx, 2
.text:0000000000003D5E                 jz      short loc_3DDB
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: excise+1A6↑j
.text:0000000000003D60                 mov     dword ptr [rbp+0], 1Eh
.text:0000000000003D67                 jmp     loc_3C7B
.text:0000000000003D67 ; ---------------------------------------------------------------------------
.text:0000000000003D6C                 align 10h
.text:0000000000003D70
.text:0000000000003D70 loc_3D70:                               ; CODE XREF: excise+C5↑j
.text:0000000000003D70                 cmp     edx, 27h ; '''
.text:0000000000003D73                 ja      loc_3C7B
.text:0000000000003D79
.text:0000000000003D79 loc_3D79:                               ; CODE XREF: excise+246↓j
.text:0000000000003D79                 mov     rax, 8000320000h
.text:0000000000003D83                 bt      rax, rdx
.text:0000000000003D87                 jnb     loc_3C7B
.text:0000000000003D8D                 mov     eax, [rbx+40h]
.text:0000000000003D90                 cmp     eax, 1
.text:0000000000003D93                 jz      short loc_3D9E
.text:0000000000003D95                 cmp     eax, 0Dh
.text:0000000000003D98                 jnz     loc_3C7B
.text:0000000000003D9E
.text:0000000000003D9E loc_3D9E:                               ; CODE XREF: excise+1E3↑j
.text:0000000000003D9E                 mov     [rbp+0], eax
.text:0000000000003DA1                 jmp     loc_3C7B
.text:0000000000003DA1 ; ---------------------------------------------------------------------------
.text:0000000000003DA6                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: excise+A3↑j
.text:0000000000003DB0                 cmp     edx, 2
.text:0000000000003DB3                 jnz     loc_3C70
.text:0000000000003DB9
.text:0000000000003DB9 loc_3DB9:                               ; CODE XREF: excise+9D↑j
.text:0000000000003DB9                                         ; excise+AC↑j ...
.text:0000000000003DB9                 mov     eax, 2
.text:0000000000003DBE                 jmp     loc_3C05
.text:0000000000003DBE ; ---------------------------------------------------------------------------
.text:0000000000003DC3                 align 8
.text:0000000000003DC8
.text:0000000000003DC8 loc_3DC8:                               ; CODE XREF: excise+151↑j
.text:0000000000003DC8                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000003DCF                 xor     edi, edi        ; domainname
.text:0000000000003DD1                 call    _dcgettext
.text:0000000000003DD6                 jmp     loc_3D15
.text:0000000000003DDB ; ---------------------------------------------------------------------------
.text:0000000000003DDB
.text:0000000000003DDB loc_3DDB:                               ; CODE XREF: excise+1AE↑j
.text:0000000000003DDB                 cmp     byte ptr [r13+0], 0
.text:0000000000003DE0                 mov     eax, 2
.text:0000000000003DE5                 jnz     loc_3C05
.text:0000000000003DEB                 cmp     word ptr [rbx+70h], 4
.text:0000000000003DF0                 jnz     loc_3C7B
.text:0000000000003DF6                 jmp     short loc_3D79
.text:0000000000003DF8 ; ---------------------------------------------------------------------------
.text:0000000000003DF8
.text:0000000000003DF8 loc_3DF8:                               ; CODE XREF: excise+66↑j
.text:0000000000003DF8                 call    ___stack_chk_fail
.text:0000000000003DF8 ; } // starts at 3BB0
.text:0000000000003DF8 excise          endp
.text:0000000000003DF8
.text:0000000000003DF8 ; ---------------------------------------------------------------------------
.text:0000000000003DFD                 align 20h
.text:0000000000003E00
.text:0000000000003E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E00
.text:0000000000003E00
.text:0000000000003E00 ; __int64 __fastcall cache_fstatat_constprop_3(int fildes, char *filename, struct stat *stat_buf)
.text:0000000000003E00 cache_fstatat_constprop_3 proc near     ; CODE XREF: prompt+16F↓p
.text:0000000000003E00                                         ; prompt+1B7↓p ...
.text:0000000000003E00 ; __unwind {
.text:0000000000003E00                 push    rbx
.text:0000000000003E01                 mov     rax, [rdx+30h]
.text:0000000000003E05                 mov     rbx, rdx
.text:0000000000003E08                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E0C                 jz      short loc_3E20
.text:0000000000003E0E
.text:0000000000003E0E loc_3E0E:                               ; CODE XREF: cache_fstatat_constprop_3+64↓j
.text:0000000000003E0E                 test    rax, rax
.text:0000000000003E11                 js      short loc_3E66
.text:0000000000003E13                 xor     eax, eax
.text:0000000000003E15                 pop     rbx
.text:0000000000003E16                 retn
.text:0000000000003E16 ; ---------------------------------------------------------------------------
.text:0000000000003E17                 align 20h
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: cache_fstatat_constprop_3+C↑j
.text:0000000000003E20                 mov     rcx, rdx        ; stat_buf
.text:0000000000003E23                 mov     r8d, 100h       ; flag
.text:0000000000003E29                 mov     rdx, rsi        ; filename
.text:0000000000003E2C                 mov     esi, edi        ; fildes
.text:0000000000003E2E                 mov     edi, 1          ; ver
.text:0000000000003E33                 call    ___fxstatat
.text:0000000000003E38                 test    eax, eax
.text:0000000000003E3A                 jz      short loc_3E60
.text:0000000000003E3C                 mov     qword ptr [rbx+30h], 0FFFFFFFFFFFFFFFEh
.text:0000000000003E44                 call    ___errno_location
.text:0000000000003E49                 movsxd  rdx, dword ptr [rax]
.text:0000000000003E4C                 mov     [rbx+8], rdx
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: cache_fstatat_constprop_3+6F↓j
.text:0000000000003E50                 mov     [rax], edx
.text:0000000000003E52                 mov     eax, 0FFFFFFFFh
.text:0000000000003E57                 pop     rbx
.text:0000000000003E58                 retn
.text:0000000000003E58 ; ---------------------------------------------------------------------------
.text:0000000000003E59                 align 20h
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: cache_fstatat_constprop_3+3A↑j
.text:0000000000003E60                 mov     rax, [rbx+30h]
.text:0000000000003E64                 jmp     short loc_3E0E
.text:0000000000003E66 ; ---------------------------------------------------------------------------
.text:0000000000003E66
.text:0000000000003E66 loc_3E66:                               ; CODE XREF: cache_fstatat_constprop_3+11↑j
.text:0000000000003E66                 call    ___errno_location
.text:0000000000003E6B                 mov     rdx, [rbx+8]
.text:0000000000003E6F                 jmp     short loc_3E50
.text:0000000000003E6F ; } // starts at 3E00
.text:0000000000003E6F cache_fstatat_constprop_3 endp
.text:0000000000003E6F
.text:0000000000003E6F ; ---------------------------------------------------------------------------
.text:0000000000003E71                 align 20h
.text:0000000000003E80
.text:0000000000003E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E80
.text:0000000000003E80
.text:0000000000003E80 prompt          proc near               ; CODE XREF: rm+1AB↓p
.text:0000000000003E80                                         ; rm+341↓p
.text:0000000000003E80
.text:0000000000003E80 var_F0          = qword ptr -0F0h
.text:0000000000003E80 fildes          = dword ptr -0E8h
.text:0000000000003E80 var_E4          = dword ptr -0E4h
.text:0000000000003E80 fd              = dword ptr -0E0h
.text:0000000000003E80 stat_buf        = stat ptr -0D8h
.text:0000000000003E80 var_40          = qword ptr -40h
.text:0000000000003E80
.text:0000000000003E80 ; __unwind {
.text:0000000000003E80                 push    r15
.text:0000000000003E82                 push    r14
.text:0000000000003E84                 push    r13
.text:0000000000003E86                 push    r12
.text:0000000000003E88                 mov     r13, rcx
.text:0000000000003E8B                 push    rbp
.text:0000000000003E8C                 push    rbx
.text:0000000000003E8D                 mov     rbx, rsi
.text:0000000000003E90                 sub     rsp, 0C8h
.text:0000000000003E97                 mov     edi, [rdi+2Ch]  ; fd
.text:0000000000003E9A                 mov     r15, [rsi+30h]
.text:0000000000003E9E                 mov     rax, fs:28h
.text:0000000000003EA7                 mov     [rsp+0F8h+var_40], rax
.text:0000000000003EAF                 xor     eax, eax
.text:0000000000003EB1                 mov     rax, [rsi+38h]
.text:0000000000003EB5                 test    r9, r9
.text:0000000000003EB8                 mov     [rsp+0F8h+var_E4], r8d
.text:0000000000003EBD                 mov     [rsp+0F8h+fildes], edi
.text:0000000000003EC1                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000003EC6                 jz      loc_40B0
.text:0000000000003ECC                 xor     ebp, ebp
.text:0000000000003ECE                 test    dl, dl
.text:0000000000003ED0                 mov     dword ptr [r9], 2
.text:0000000000003ED7                 setnz   bpl
.text:0000000000003EDB                 mov     edx, 30900h     ; oflag
.text:0000000000003EE0                 xor     eax, eax
.text:0000000000003EE2                 mov     rsi, r15        ; file
.text:0000000000003EE5                 mov     r12, r9
.text:0000000000003EE8                 mov     [rsp+0F8h+stat_buf.st_size], 0FFFFFFFFFFFFFFFFh
.text:0000000000003EF1                 shl     ebp, 2
.text:0000000000003EF4                 call    _openat
.text:0000000000003EF9                 test    eax, eax
.text:0000000000003EFB                 js      short loc_3F65
.text:0000000000003EFD                 mov     edi, eax        ; fd
.text:0000000000003EFF                 mov     [rsp+0F8h+fd], eax
.text:0000000000003F03                 call    _fdopendir
.text:0000000000003F08                 test    rax, rax
.text:0000000000003F0B                 mov     r14, rax
.text:0000000000003F0E                 mov     edx, [rsp+0F8h+fd]
.text:0000000000003F12                 jz      loc_4170
.text:0000000000003F18                 call    ___errno_location
.text:0000000000003F1D                 mov     qword ptr [rsp+0F8h+fd], rax
.text:0000000000003F22                 mov     dword ptr [rax], 0
.text:0000000000003F28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003F30
.text:0000000000003F30 loc_3F30:                               ; CODE XREF: prompt+D7↓j
.text:0000000000003F30                                         ; prompt+DB↓j
.text:0000000000003F30                 mov     rdi, r14        ; dirp
.text:0000000000003F33                 call    _readdir
.text:0000000000003F38                 test    rax, rax
.text:0000000000003F3B                 jz      loc_4188
.text:0000000000003F41                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:0000000000003F45                 jnz     short loc_3F5D
.text:0000000000003F47                 xor     edx, edx
.text:0000000000003F49                 cmp     byte ptr [rax+14h], 2Eh ; '.'
.text:0000000000003F4D                 setz    dl
.text:0000000000003F50                 movzx   eax, byte ptr [rax+rdx+14h]
.text:0000000000003F55                 test    al, al
.text:0000000000003F57                 jz      short loc_3F30
.text:0000000000003F59                 cmp     al, 2Fh ; '/'
.text:0000000000003F5B                 jz      short loc_3F30
.text:0000000000003F5D
.text:0000000000003F5D loc_3F5D:                               ; CODE XREF: prompt+C5↑j
.text:0000000000003F5D                 mov     rdi, r14        ; dirp
.text:0000000000003F60                 call    _closedir
.text:0000000000003F65
.text:0000000000003F65 loc_3F65:                               ; CODE XREF: prompt+7B↑j
.text:0000000000003F65                                         ; prompt+321↓j
.text:0000000000003F65                 xor     r14d, r14d
.text:0000000000003F68                 mov     eax, 3
.text:0000000000003F6D
.text:0000000000003F6D loc_3F6D:                               ; CODE XREF: prompt+2FC↓j
.text:0000000000003F6D                                         ; prompt+332↓j
.text:0000000000003F6D                 mov     [r12], eax
.text:0000000000003F71
.text:0000000000003F71 loc_3F71:                               ; CODE XREF: prompt+251↓j
.text:0000000000003F71                 cmp     qword ptr [rbx+20h], 0
.text:0000000000003F76                 jnz     loc_40A0
.text:0000000000003F7C                 mov     eax, [r13+4]
.text:0000000000003F80                 cmp     eax, 5
.text:0000000000003F83                 jz      short loc_3FB2
.text:0000000000003F85                 cmp     byte ptr [r13+0], 0
.text:0000000000003F8A                 jnz     short loc_3FA9
.text:0000000000003F8C                 cmp     eax, 3
.text:0000000000003F8F                 jz      short loc_3F98
.text:0000000000003F91                 cmp     byte ptr [r13+19h], 0
.text:0000000000003F96                 jz      short loc_3FB2
.text:0000000000003F98
.text:0000000000003F98 loc_3F98:                               ; CODE XREF: prompt+10F↑j
.text:0000000000003F98                 call    can_write_any_file
.text:0000000000003F9D                 test    al, al
.text:0000000000003F9F                 jz      loc_4268
.text:0000000000003FA5
.text:0000000000003FA5 loc_3FA5:                               ; CODE XREF: prompt+412↓j
.text:0000000000003FA5                                         ; prompt+430↓j
.text:0000000000003FA5                 mov     eax, [r13+4]
.text:0000000000003FA9
.text:0000000000003FA9 loc_3FA9:                               ; CODE XREF: prompt+10A↑j
.text:0000000000003FA9                 cmp     eax, 3
.text:0000000000003FAC                 jz      loc_40E0
.text:0000000000003FB2
.text:0000000000003FB2 loc_3FB2:                               ; CODE XREF: prompt+103↑j
.text:0000000000003FB2                                         ; prompt+116↑j ...
.text:0000000000003FB2                 mov     eax, 2
.text:0000000000003FB7
.text:0000000000003FB7 loc_3FB7:                               ; CODE XREF: prompt+225↓j
.text:0000000000003FB7                                         ; prompt+382↓j ...
.text:0000000000003FB7                 mov     rcx, [rsp+0F8h+var_40]
.text:0000000000003FBF                 xor     rcx, fs:28h
.text:0000000000003FC8                 jnz     loc_4343
.text:0000000000003FCE                 add     rsp, 0C8h
.text:0000000000003FD5                 pop     rbx
.text:0000000000003FD6                 pop     rbp
.text:0000000000003FD7                 pop     r12
.text:0000000000003FD9                 pop     r13
.text:0000000000003FDB                 pop     r14
.text:0000000000003FDD                 pop     r15
.text:0000000000003FDF                 retn
.text:0000000000003FE0 ; ---------------------------------------------------------------------------
.text:0000000000003FE0
.text:0000000000003FE0 loc_3FE0:                               ; CODE XREF: prompt+265↓j
.text:0000000000003FE0                 lea     rbx, [rsp+0F8h+stat_buf]
.text:0000000000003FE5                 mov     edi, [rsp+0F8h+fildes] ; fildes
.text:0000000000003FE9                 mov     rsi, r15        ; filename
.text:0000000000003FEC                 mov     rdx, rbx        ; stat_buf
.text:0000000000003FEF                 call    cache_fstatat_constprop_3
.text:0000000000003FF4                 test    eax, eax
.text:0000000000003FF6                 jnz     loc_41C0
.text:0000000000003FFC                 mov     eax, [rsp+0F8h+stat_buf.st_mode]
.text:0000000000004000                 and     eax, 0F000h
.text:0000000000004005                 cmp     eax, 0A000h
.text:000000000000400A                 jz      loc_4254
.text:0000000000004010                 cmp     eax, 4000h
.text:0000000000004015                 jz      loc_40F4
.text:000000000000401B
.text:000000000000401B loc_401B:                               ; CODE XREF: prompt+3DF↓j
.text:000000000000401B                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000004020                 mov     edi, 4
.text:0000000000004025                 call    quotearg_style
.text:000000000000402A                 mov     rbp, rax
.text:000000000000402D
.text:000000000000402D loc_402D:                               ; CODE XREF: prompt+3CF↓j
.text:000000000000402D                 mov     edi, [rsp+0F8h+fildes] ; fildes
.text:0000000000004031                 mov     rdx, rbx        ; stat_buf
.text:0000000000004034                 mov     rsi, r15        ; filename
.text:0000000000004037                 call    cache_fstatat_constprop_3
.text:000000000000403C                 test    eax, eax
.text:000000000000403E                 jnz     loc_42F0
.text:0000000000004044                 mov     rdi, rbx
.text:0000000000004047                 call    file_type
.text:000000000000404C                 test    r12d, r12d
.text:000000000000404F                 mov     r13, rax
.text:0000000000004052                 mov     rbx, cs:program_name
.text:0000000000004059                 mov     edx, 5          ; category
.text:000000000000405E                 jz      loc_42D8
.text:0000000000004064                 lea     rsi, aSRemoveWritePr ; "%s: remove write-protected %s %s? "
.text:000000000000406B                 xor     edi, edi        ; domainname
.text:000000000000406D                 call    _dcgettext
.text:0000000000004072
.text:0000000000004072 loc_4072:                               ; CODE XREF: prompt+466↓j
.text:0000000000004072                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004079                 mov     rdx, rax
.text:000000000000407C                 mov     r9, rbp
.text:000000000000407F                 mov     r8, r13
.text:0000000000004082                 mov     rcx, rbx
.text:0000000000004085                 mov     esi, 1
.text:000000000000408A                 xor     eax, eax
.text:000000000000408C                 call    ___fprintf_chk
.text:0000000000004091
.text:0000000000004091 loc_4091:                               ; CODE XREF: prompt+2E4↓j
.text:0000000000004091                 call    yesno
.text:0000000000004096                 test    al, al
.text:0000000000004098                 jnz     loc_3FB2
.text:000000000000409E                 xchg    ax, ax
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: prompt+F6↑j
.text:00000000000040A0                 mov     eax, 3
.text:00000000000040A5                 jmp     loc_3FB7
.text:00000000000040A5 ; ---------------------------------------------------------------------------
.text:00000000000040AA                 align 10h
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: prompt+46↑j
.text:00000000000040B0                 cmp     dl, 1
.text:00000000000040B3                 mov     r14d, edx
.text:00000000000040B6                 mov     eax, 0
.text:00000000000040BB                 sbb     ebp, ebp
.text:00000000000040BD                 mov     [rsp+0F8h+stat_buf.st_size], 0FFFFFFFFFFFFFFFFh
.text:00000000000040C6                 not     ebp
.text:00000000000040C8                 and     ebp, 4
.text:00000000000040CB                 test    dl, dl
.text:00000000000040CD                 cmovnz  r14d, eax
.text:00000000000040D1                 jmp     loc_3F71
.text:00000000000040D1 ; ---------------------------------------------------------------------------
.text:00000000000040D6                 align 20h
.text:00000000000040E0
.text:00000000000040E0 loc_40E0:                               ; CODE XREF: prompt+12C↑j
.text:00000000000040E0                 xor     r12d, r12d
.text:00000000000040E3
.text:00000000000040E3 loc_40E3:                               ; CODE XREF: prompt+446↓j
.text:00000000000040E3                 test    ebp, ebp
.text:00000000000040E5                 jz      loc_3FE0
.text:00000000000040EB                 cmp     ebp, 4
.text:00000000000040EE                 jnz     loc_4238
.text:00000000000040F4
.text:00000000000040F4 loc_40F4:                               ; CODE XREF: prompt+195↑j
.text:00000000000040F4                 cmp     byte ptr [r13+9], 0
.text:00000000000040F9                 jz      loc_4210
.text:00000000000040FF                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000004104                 mov     edi, 4
.text:0000000000004109                 call    quotearg_style
.text:000000000000410E                 cmp     [rsp+0F8h+var_E4], 2
.text:0000000000004113                 mov     rbp, rax
.text:0000000000004116                 jnz     loc_424A
.text:000000000000411C                 test    r14b, r14b
.text:000000000000411F                 jnz     loc_424A
.text:0000000000004125                 test    r12d, r12d
.text:0000000000004128                 mov     rbx, cs:program_name
.text:000000000000412F                 mov     edx, 5          ; category
.text:0000000000004134                 jz      loc_4330
.text:000000000000413A                 lea     rsi, aSDescendIntoWr ; "%s: descend into write-protected direct"...
.text:0000000000004141                 xor     edi, edi        ; domainname
.text:0000000000004143                 call    _dcgettext
.text:0000000000004148
.text:0000000000004148 loc_4148:                               ; CODE XREF: prompt+4BE↓j
.text:0000000000004148                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000414F                 mov     rdx, rax
.text:0000000000004152                 mov     r8, rbp
.text:0000000000004155                 mov     rcx, rbx
.text:0000000000004158                 mov     esi, 1
.text:000000000000415D                 xor     eax, eax
.text:000000000000415F                 call    ___fprintf_chk
.text:0000000000004164                 jmp     loc_4091
.text:0000000000004164 ; ---------------------------------------------------------------------------
.text:0000000000004169                 align 10h
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: prompt+92↑j
.text:0000000000004170                 mov     edi, edx        ; fd
.text:0000000000004172                 call    _close
.text:0000000000004177                 mov     eax, 3
.text:000000000000417C                 jmp     loc_3F6D
.text:000000000000417C ; ---------------------------------------------------------------------------
.text:0000000000004181                 align 8
.text:0000000000004188
.text:0000000000004188 loc_4188:                               ; CODE XREF: prompt+BB↑j
.text:0000000000004188                 mov     rax, qword ptr [rsp+0F8h+fd]
.text:000000000000418D                 mov     rdi, r14        ; dirp
.text:0000000000004190                 mov     edx, [rax]
.text:0000000000004192                 mov     [rsp+0F8h+fd], edx
.text:0000000000004196                 call    _closedir
.text:000000000000419B                 mov     edx, [rsp+0F8h+fd]
.text:000000000000419F                 test    edx, edx
.text:00000000000041A1                 jnz     loc_3F65
.text:00000000000041A7                 mov     r14d, 1
.text:00000000000041AD                 mov     eax, 4
.text:00000000000041B2                 jmp     loc_3F6D
.text:00000000000041B2 ; ---------------------------------------------------------------------------
.text:00000000000041B7                 align 20h
.text:00000000000041C0
.text:00000000000041C0 loc_41C0:                               ; CODE XREF: prompt+176↑j
.text:00000000000041C0                                         ; prompt+3FE↓j
.text:00000000000041C0                 call    ___errno_location
.text:00000000000041C5                 mov     ebx, [rax]
.text:00000000000041C7
.text:00000000000041C7 loc_41C7:                               ; CODE XREF: prompt+44C↓j
.text:00000000000041C7                 mov     rsi, [rsp+0F8h+var_F0]
.text:00000000000041CC                 mov     edi, 4
.text:00000000000041D1                 call    quotearg_style
.text:00000000000041D6                 mov     rbp, rax
.text:00000000000041D9
.text:00000000000041D9 loc_41D9:                               ; CODE XREF: prompt+3B3↓j
.text:00000000000041D9                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:00000000000041E0                 mov     edx, 5          ; category
.text:00000000000041E5                 xor     edi, edi        ; domainname
.text:00000000000041E7                 call    _dcgettext
.text:00000000000041EC                 mov     rcx, rbp
.text:00000000000041EF                 mov     rdx, rax        ; format
.text:00000000000041F2                 mov     esi, ebx        ; errnum
.text:00000000000041F4                 xor     eax, eax
.text:00000000000041F6                 xor     edi, edi        ; status
.text:00000000000041F8                 call    _error
.text:00000000000041FD                 mov     eax, 4
.text:0000000000004202                 jmp     loc_3FB7
.text:0000000000004202 ; ---------------------------------------------------------------------------
.text:0000000000004207                 align 10h
.text:0000000000004210
.text:0000000000004210 loc_4210:                               ; CODE XREF: prompt+279↑j
.text:0000000000004210                 cmp     byte ptr [r13+0Ah], 0
.text:0000000000004215                 jz      short loc_421C
.text:0000000000004217                 test    r14b, r14b
.text:000000000000421A                 jnz     short loc_4238
.text:000000000000421C
.text:000000000000421C loc_421C:                               ; CODE XREF: prompt+395↑j
.text:000000000000421C                 mov     rsi, [rsp+0F8h+var_F0]
.text:0000000000004221                 mov     edi, 4
.text:0000000000004226                 mov     ebx, 15h
.text:000000000000422B                 call    quotearg_style
.text:0000000000004230                 mov     rbp, rax
.text:0000000000004233                 jmp     short loc_41D9
.text:0000000000004233 ; ---------------------------------------------------------------------------
.text:0000000000004235                 align 8
.text:0000000000004238
.text:0000000000004238 loc_4238:                               ; CODE XREF: prompt+26E↑j
.text:0000000000004238                                         ; prompt+39A↑j
.text:0000000000004238                 mov     rsi, [rsp+0F8h+var_F0]
.text:000000000000423D                 mov     edi, 4
.text:0000000000004242                 call    quotearg_style
.text:0000000000004247                 mov     rbp, rax
.text:000000000000424A
.text:000000000000424A loc_424A:                               ; CODE XREF: prompt+296↑j
.text:000000000000424A                                         ; prompt+29F↑j
.text:000000000000424A                 lea     rbx, [rsp+0F8h+stat_buf]
.text:000000000000424F                 jmp     loc_402D
.text:0000000000004254 ; ---------------------------------------------------------------------------
.text:0000000000004254
.text:0000000000004254 loc_4254:                               ; CODE XREF: prompt+18A↑j
.text:0000000000004254                 cmp     dword ptr [r13+4], 3
.text:0000000000004259                 jnz     loc_3FB2
.text:000000000000425F                 jmp     loc_401B
.text:000000000000425F ; ---------------------------------------------------------------------------
.text:0000000000004264                 align 8
.text:0000000000004268
.text:0000000000004268 loc_4268:                               ; CODE XREF: prompt+11F↑j
.text:0000000000004268                 lea     rbx, [rsp+0F8h+stat_buf]
.text:000000000000426D                 mov     edi, [rsp+0F8h+fildes] ; fildes
.text:0000000000004271                 mov     rsi, r15        ; filename
.text:0000000000004274                 mov     rdx, rbx        ; stat_buf
.text:0000000000004277                 call    cache_fstatat_constprop_3
.text:000000000000427C                 test    eax, eax
.text:000000000000427E                 jnz     loc_41C0
.text:0000000000004284                 mov     eax, [rsp+0F8h+stat_buf.st_mode]
.text:0000000000004288                 and     eax, 0F000h
.text:000000000000428D                 cmp     eax, 0A000h
.text:0000000000004292                 jz      loc_3FA5
.text:0000000000004298                 mov     edi, [rsp+0F8h+fildes] ; fd
.text:000000000000429C                 mov     ecx, 200h       ; flag
.text:00000000000042A1                 mov     edx, 2          ; type
.text:00000000000042A6                 mov     rsi, r15        ; file
.text:00000000000042A9                 call    _faccessat
.text:00000000000042AE                 test    eax, eax
.text:00000000000042B0                 jz      loc_3FA5
.text:00000000000042B6                 call    ___errno_location
.text:00000000000042BB                 mov     ebx, [rax]
.text:00000000000042BD                 mov     r12d, 1
.text:00000000000042C3                 cmp     ebx, 0Dh
.text:00000000000042C6                 jz      loc_40E3
.text:00000000000042CC                 jmp     loc_41C7
.text:00000000000042CC ; ---------------------------------------------------------------------------
.text:00000000000042D1                 align 8
.text:00000000000042D8
.text:00000000000042D8 loc_42D8:                               ; CODE XREF: prompt+1DE↑j
.text:00000000000042D8                 lea     rsi, aSRemoveSS ; "%s: remove %s %s? "
.text:00000000000042DF                 xor     edi, edi        ; domainname
.text:00000000000042E1                 call    _dcgettext
.text:00000000000042E6                 jmp     loc_4072
.text:00000000000042E6 ; ---------------------------------------------------------------------------
.text:00000000000042EB                 align 10h
.text:00000000000042F0
.text:00000000000042F0 loc_42F0:                               ; CODE XREF: prompt+1BE↑j
.text:00000000000042F0                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:00000000000042F7                 mov     edx, 5          ; category
.text:00000000000042FC                 xor     edi, edi        ; domainname
.text:00000000000042FE                 call    _dcgettext
.text:0000000000004303                 mov     rbx, rax
.text:0000000000004306                 call    ___errno_location
.text:000000000000430B                 mov     esi, [rax]      ; errnum
.text:000000000000430D                 mov     rcx, rbp
.text:0000000000004310                 xor     eax, eax
.text:0000000000004312                 mov     rdx, rbx        ; format
.text:0000000000004315                 xor     edi, edi        ; status
.text:0000000000004317                 call    _error
.text:000000000000431C                 mov     eax, 4
.text:0000000000004321                 jmp     loc_3FB7
.text:0000000000004321 ; ---------------------------------------------------------------------------
.text:0000000000004326                 align 10h
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: prompt+2B4↑j
.text:0000000000004330                 lea     rsi, aSDescendIntoDi ; "%s: descend into directory %s? "
.text:0000000000004337                 xor     edi, edi        ; domainname
.text:0000000000004339                 call    _dcgettext
.text:000000000000433E                 jmp     loc_4148
.text:0000000000004343 ; ---------------------------------------------------------------------------
.text:0000000000004343
.text:0000000000004343 loc_4343:                               ; CODE XREF: prompt+148↑j
.text:0000000000004343                 call    ___stack_chk_fail
.text:0000000000004343 ; } // starts at 3E80
.text:0000000000004343 prompt          endp
.text:0000000000004343
.text:0000000000004343 ; ---------------------------------------------------------------------------
.text:0000000000004348                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350
.text:0000000000004350                 public rm
.text:0000000000004350 rm              proc near               ; CODE XREF: do_move+BD↑p
.text:0000000000004350
.text:0000000000004350 fd              = dword ptr -100h
.text:0000000000004350 var_F8          = qword ptr -0F8h
.text:0000000000004350 stat_buf        = qword ptr -0F0h
.text:0000000000004350 var_DC          = dword ptr -0DCh
.text:0000000000004350 var_D8          = qword ptr -0D8h
.text:0000000000004350 var_40          = qword ptr -40h
.text:0000000000004350
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 push    r15
.text:0000000000004352                 push    r14
.text:0000000000004354                 push    r13
.text:0000000000004356                 push    r12
.text:0000000000004358                 push    rbp
.text:0000000000004359                 push    rbx
.text:000000000000435A                 sub     rsp, 0D8h
.text:0000000000004361                 mov     rax, fs:28h
.text:000000000000436A                 mov     [rsp+108h+var_40], rax
.text:0000000000004372                 xor     eax, eax
.text:0000000000004374                 cmp     qword ptr [rdi], 0
.text:0000000000004378                 jz      loc_4AE8
.text:000000000000437E                 cmp     byte ptr [rsi+8], 1
.text:0000000000004382                 mov     r13, rsi
.text:0000000000004385                 lea     r12, jpt_43EC
.text:000000000000438C                 mov     ebp, 2
.text:0000000000004391                 sbb     esi, esi
.text:0000000000004393                 xor     edx, edx
.text:0000000000004395                 and     esi, 0FFFFFFC0h
.text:0000000000004398                 add     esi, 258h
.text:000000000000439E                 call    xfts_open
.text:00000000000043A3                 mov     rbx, rax
.text:00000000000043A6                 lea     rax, [rsp+108h+var_DC]
.text:00000000000043AB                 mov     [rsp+108h+var_F8], rax
.text:00000000000043B0                 lea     rax, [rsp+108h+var_D8]
.text:00000000000043B5                 mov     [rsp+108h+stat_buf], rax
.text:00000000000043BA                 nop     word ptr [rax+rax+00h]
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: rm+1D3↓j
.text:00000000000043C0                                         ; rm+1E4↓j ...
.text:00000000000043C0                 mov     rdi, rbx
.text:00000000000043C3                 call    rpl_fts_read
.text:00000000000043C8                 test    rax, rax
.text:00000000000043CB                 mov     r15, rax
.text:00000000000043CE                 jz      loc_445A
.text:00000000000043D4
.text:00000000000043D4 loc_43D4:                               ; CODE XREF: rm+104↓j
.text:00000000000043D4                 movzx   edx, word ptr [rax+70h]
.text:00000000000043D8                 cmp     dx, 0Dh         ; switch 14 cases
.text:00000000000043DC                 ja      def_43EC        ; jumptable 00000000000043EC default case, cases 0,5,9
.text:00000000000043E2                 movzx   eax, dx
.text:00000000000043E5                 movsxd  rax, ds:(jpt_43EC - 15E28h)[r12+rax*4]
.text:00000000000043E9                 add     rax, r12
.text:00000000000043EC                 jmp     rax             ; switch jump
.text:00000000000043EC ; ---------------------------------------------------------------------------
.text:00000000000043EE                 align 10h
.text:00000000000043F0
.text:00000000000043F0 loc_43F0:                               ; CODE XREF: rm+9C↑j
.text:00000000000043F0                                         ; DATA XREF: .rodata:jpt_43EC↓o
.text:00000000000043F0                 mov     rdx, [r15+38h]  ; jumptable 00000000000043EC case 7
.text:00000000000043F4                 mov     esi, 3
.text:00000000000043F9                 xor     edi, edi
.text:00000000000043FB                 call    quotearg_n_style_colon
.text:0000000000004400                 lea     rsi, aTraversalFaile ; "traversal failed: %s"
.text:0000000000004407                 mov     edx, 5          ; category
.text:000000000000440C                 xor     edi, edi        ; domainname
.text:000000000000440E                 mov     rbp, rax
.text:0000000000004411                 call    _dcgettext
.text:0000000000004416                 mov     esi, [r15+40h]  ; errnum
.text:000000000000441A                 mov     rcx, rbp
.text:000000000000441D                 mov     rdx, rax        ; format
.text:0000000000004420
.text:0000000000004420 loc_4420:                               ; CODE XREF: rm+21E↓j
.text:0000000000004420                 xor     edi, edi        ; status
.text:0000000000004422                 xor     eax, eax
.text:0000000000004424                 call    _error
.text:0000000000004429
.text:0000000000004429 loc_4429:                               ; CODE XREF: rm+3E5↓j
.text:0000000000004429                                         ; rm+401↓j ...
.text:0000000000004429                 mov     rsi, r15
.text:000000000000442C                 mov     edx, 4
.text:0000000000004431                 mov     rdi, rbx
.text:0000000000004434                 call    rpl_fts_set
.text:0000000000004439                 mov     rdi, rbx
.text:000000000000443C                 mov     ebp, 4
.text:0000000000004441                 call    rpl_fts_read
.text:0000000000004446                 mov     rdi, rbx
.text:0000000000004449                 call    rpl_fts_read
.text:000000000000444E                 test    rax, rax
.text:0000000000004451                 mov     r15, rax
.text:0000000000004454                 jnz     loc_43D4
.text:000000000000445A
.text:000000000000445A loc_445A:                               ; CODE XREF: rm+7E↑j
.text:000000000000445A                 call    ___errno_location
.text:000000000000445F                 mov     r12, rax
.text:0000000000004462                 mov     eax, [rax]
.text:0000000000004464                 test    eax, eax
.text:0000000000004466                 jnz     loc_4978
.text:000000000000446C                 mov     rdi, rbx        ; ptr
.text:000000000000446F                 call    rpl_fts_close
.text:0000000000004474                 test    eax, eax
.text:0000000000004476                 jnz     loc_49B0
.text:000000000000447C
.text:000000000000447C loc_447C:                               ; CODE XREF: rm+65A↓j
.text:000000000000447C                                         ; rm+688↓j ...
.text:000000000000447C                 mov     rbx, [rsp+108h+var_40]
.text:0000000000004484                 xor     rbx, fs:28h
.text:000000000000448D                 mov     eax, ebp
.text:000000000000448F                 jnz     loc_4BA0
.text:0000000000004495                 add     rsp, 0D8h
.text:000000000000449C                 pop     rbx
.text:000000000000449D                 pop     rbp
.text:000000000000449E                 pop     r12
.text:00000000000044A0                 pop     r13
.text:00000000000044A2                 pop     r14
.text:00000000000044A4                 pop     r15
.text:00000000000044A6                 retn
.text:00000000000044A6 ; ---------------------------------------------------------------------------
.text:00000000000044A7                 align 10h
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: rm+9C↑j
.text:00000000000044B0                                         ; DATA XREF: .rodata:jpt_43EC↓o
.text:00000000000044B0                 cmp     dx, 6           ; jumptable 00000000000043EC cases 3,4,6,8,10-13
.text:00000000000044B4                 jnz     short loc_44D8
.text:00000000000044B6                 cmp     byte ptr [r13+8], 0
.text:00000000000044BB                 jz      short loc_44D8
.text:00000000000044BD                 cmp     qword ptr [r15+58h], 0
.text:00000000000044C2                 jle     short loc_44D8
.text:00000000000044C4                 mov     rax, [rbx+18h]
.text:00000000000044C8                 cmp     [r15+78h], rax
.text:00000000000044CC                 jnz     loc_4A78
.text:00000000000044D2                 nop     word ptr [rax+rax+00h]
.text:00000000000044D8
.text:00000000000044D8 loc_44D8:                               ; CODE XREF: rm+164↑j
.text:00000000000044D8                                         ; rm+16B↑j ...
.text:00000000000044D8                 and     edx, 0FFFFFFFDh
.text:00000000000044DB                 xor     r14d, r14d
.text:00000000000044DE                 mov     rcx, r13
.text:00000000000044E1                 cmp     dx, 4
.text:00000000000044E5                 mov     r8d, 3
.text:00000000000044EB                 mov     rsi, r15
.text:00000000000044EE                 setz    r14b
.text:00000000000044F2                 mov     rdi, rbx
.text:00000000000044F5                 xor     r9d, r9d
.text:00000000000044F8                 mov     edx, r14d
.text:00000000000044FB                 call    prompt
.text:0000000000004500                 cmp     eax, 2
.text:0000000000004503                 mov     ecx, eax
.text:0000000000004505                 jz      loc_4768
.text:000000000000450B
.text:000000000000450B loc_450B:                               ; CODE XREF: rm+39A↓j
.text:000000000000450B                                         ; rm+42B↓j
.text:000000000000450B                 lea     eax, [rcx-2]
.text:000000000000450E                 cmp     eax, 2
.text:0000000000004511                 ja      loc_4B81
.text:0000000000004517                 cmp     ecx, 4
.text:000000000000451A                 jz      loc_4BA5
.text:0000000000004520                 cmp     ecx, 3
.text:0000000000004523                 jnz     loc_43C0
.text:0000000000004529                 cmp     ebp, 2
.text:000000000000452C                 mov     eax, 3
.text:0000000000004531                 cmovz   ebp, eax
.text:0000000000004534                 jmp     loc_43C0
.text:0000000000004534 ; ---------------------------------------------------------------------------
.text:0000000000004539                 align 20h
.text:0000000000004540
.text:0000000000004540 loc_4540:                               ; CODE XREF: rm+9C↑j
.text:0000000000004540                                         ; DATA XREF: .rodata:jpt_43EC↓o
.text:0000000000004540                 mov     rdx, [r15+38h]  ; jumptable 00000000000043EC case 2
.text:0000000000004544                 mov     esi, 3
.text:0000000000004549                 xor     edi, edi
.text:000000000000454B                 call    quotearg_n_style_colon
.text:0000000000004550                 lea     rsi, aWarningCircula ; "WARNING: Circular directory structure."...
.text:0000000000004557                 mov     rbp, rax
.text:000000000000455A                 mov     edx, 5          ; category
.text:000000000000455F                 xor     edi, edi        ; domainname
.text:0000000000004561                 call    _dcgettext
.text:0000000000004566                 mov     rcx, rbp
.text:0000000000004569                 mov     rdx, rax
.text:000000000000456C                 xor     esi, esi
.text:000000000000456E                 jmp     loc_4420
.text:000000000000456E ; ---------------------------------------------------------------------------
.text:0000000000004573                 align 8
.text:0000000000004578
.text:0000000000004578 loc_4578:                               ; CODE XREF: rm+9C↑j
.text:0000000000004578                                         ; DATA XREF: .rodata:jpt_43EC↓o
.text:0000000000004578                 cmp     byte ptr [r13+9], 0 ; jumptable 00000000000043EC case 1
.text:000000000000457D                 jnz     loc_4638
.text:0000000000004583                 cmp     byte ptr [r13+0Ah], 0
.text:0000000000004588                 jz      loc_46F0
.text:000000000000458E                 mov     rsi, [r15+30h]  ; file
.text:0000000000004592                 mov     edi, [rbx+2Ch]  ; fd
.text:0000000000004595                 xor     eax, eax
.text:0000000000004597                 mov     edx, 30900h     ; oflag
.text:000000000000459C                 call    _openat
.text:00000000000045A1                 test    eax, eax
.text:00000000000045A3                 js      short loc_4601
.text:00000000000045A5                 mov     edi, eax        ; fd
.text:00000000000045A7                 mov     [rsp+108h+fd], eax
.text:00000000000045AB                 call    _fdopendir
.text:00000000000045B0                 test    rax, rax
.text:00000000000045B3                 mov     r14, rax
.text:00000000000045B6                 mov     edx, [rsp+108h+fd]
.text:00000000000045BA                 jz      loc_4AF2
.text:00000000000045C0                 call    ___errno_location
.text:00000000000045C5                 mov     qword ptr [rsp+108h+fd], rax
.text:00000000000045CA                 mov     dword ptr [rax], 0
.text:00000000000045D0
.text:00000000000045D0 loc_45D0:                               ; CODE XREF: rm+2A3↓j
.text:00000000000045D0                                         ; rm+2A7↓j
.text:00000000000045D0                 mov     rdi, r14        ; dirp
.text:00000000000045D3                 call    _readdir
.text:00000000000045D8                 test    rax, rax
.text:00000000000045DB                 jz      short loc_4616
.text:00000000000045DD                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:00000000000045E1                 jnz     short loc_45F9
.text:00000000000045E3                 xor     edx, edx
.text:00000000000045E5                 cmp     byte ptr [rax+14h], 2Eh ; '.'
.text:00000000000045E9                 setz    dl
.text:00000000000045EC                 movzx   eax, byte ptr [rax+rdx+14h]
.text:00000000000045F1                 test    al, al
.text:00000000000045F3                 jz      short loc_45D0
.text:00000000000045F5                 cmp     al, 2Fh ; '/'
.text:00000000000045F7                 jz      short loc_45D0
.text:00000000000045F9
.text:00000000000045F9 loc_45F9:                               ; CODE XREF: rm+291↑j
.text:00000000000045F9                 mov     rdi, r14        ; dirp
.text:00000000000045FC                 call    _closedir
.text:0000000000004601
.text:0000000000004601 loc_4601:                               ; CODE XREF: rm+253↑j
.text:0000000000004601                                         ; rm+2DF↓j ...
.text:0000000000004601                 cmp     byte ptr [r13+0Ah], 0
.text:0000000000004606                 jz      loc_46F0
.text:000000000000460C                 mov     ebp, 27h ; '''
.text:0000000000004611                 jmp     loc_46F5
.text:0000000000004616 ; ---------------------------------------------------------------------------
.text:0000000000004616
.text:0000000000004616 loc_4616:                               ; CODE XREF: rm+28B↑j
.text:0000000000004616                 mov     rax, qword ptr [rsp+108h+fd]
.text:000000000000461B                 mov     rdi, r14        ; dirp
.text:000000000000461E                 mov     edx, [rax]
.text:0000000000004620                 mov     [rsp+108h+fd], edx
.text:0000000000004624                 call    _closedir
.text:0000000000004629                 mov     edx, [rsp+108h+fd]
.text:000000000000462D                 test    edx, edx
.text:000000000000462F                 jnz     short loc_4601
.text:0000000000004631                 nop     dword ptr [rax+00000000h]
.text:0000000000004638
.text:0000000000004638 loc_4638:                               ; CODE XREF: rm+22D↑j
.text:0000000000004638                 cmp     qword ptr [r15+58h], 0
.text:000000000000463D                 jnz     short loc_4678
.text:000000000000463F                 mov     r14, [r15+30h]
.text:0000000000004643                 mov     rdi, r14
.text:0000000000004646                 call    last_component
.text:000000000000464B                 cmp     byte ptr [rax], 2Eh ; '.'
.text:000000000000464E                 jz      loc_47D0
.text:0000000000004654
.text:0000000000004654 loc_4654:                               ; CODE XREF: rm+494↓j
.text:0000000000004654                 mov     rax, [r13+10h]
.text:0000000000004658                 test    rax, rax
.text:000000000000465B                 jz      short loc_466D
.text:000000000000465D                 mov     rcx, [rax]
.text:0000000000004660                 cmp     [r15+80h], rcx
.text:0000000000004667                 jz      loc_49E0
.text:000000000000466D
.text:000000000000466D loc_466D:                               ; CODE XREF: rm+30B↑j
.text:000000000000466D                                         ; rm+698↓j
.text:000000000000466D                 cmp     byte ptr [r13+18h], 0
.text:0000000000004672                 jnz     loc_4868
.text:0000000000004678
.text:0000000000004678 loc_4678:                               ; CODE XREF: rm+2ED↑j
.text:0000000000004678                                         ; rm+5C1↓j
.text:0000000000004678                 mov     r9, [rsp+108h+var_F8]
.text:000000000000467D                 mov     rcx, r13
.text:0000000000004680                 mov     r8d, 2
.text:0000000000004686                 mov     edx, 1
.text:000000000000468B                 mov     rsi, r15
.text:000000000000468E                 mov     rdi, rbx
.text:0000000000004691                 call    prompt
.text:0000000000004696                 cmp     eax, 2
.text:0000000000004699                 mov     ecx, eax
.text:000000000000469B                 jz      loc_4780
.text:00000000000046A1
.text:00000000000046A1 loc_46A1:                               ; CODE XREF: rm+477↓j
.text:00000000000046A1                 mov     rax, [r15+8]
.text:00000000000046A5                 cmp     qword ptr [rax+58h], 0
.text:00000000000046AA                 jns     short loc_46C3
.text:00000000000046AC                 jmp     short loc_46CA
.text:00000000000046AC ; ---------------------------------------------------------------------------
.text:00000000000046AE                 align 10h
.text:00000000000046B0
.text:00000000000046B0 loc_46B0:                               ; CODE XREF: rm+378↓j
.text:00000000000046B0                 mov     qword ptr [rax+20h], 1
.text:00000000000046B8                 mov     rax, [rax+8]
.text:00000000000046BC                 cmp     qword ptr [rax+58h], 0
.text:00000000000046C1                 js      short loc_46CA
.text:00000000000046C3
.text:00000000000046C3 loc_46C3:                               ; CODE XREF: rm+35A↑j
.text:00000000000046C3                 cmp     qword ptr [rax+20h], 0
.text:00000000000046C8                 jz      short loc_46B0
.text:00000000000046CA
.text:00000000000046CA loc_46CA:                               ; CODE XREF: rm+35C↑j
.text:00000000000046CA                                         ; rm+371↑j
.text:00000000000046CA                 mov     edx, 4
.text:00000000000046CF                 mov     rsi, r15
.text:00000000000046D2                 mov     rdi, rbx
.text:00000000000046D5                 mov     [rsp+108h+fd], ecx
.text:00000000000046D9                 call    rpl_fts_set
.text:00000000000046DE                 mov     rdi, rbx
.text:00000000000046E1                 call    rpl_fts_read
.text:00000000000046E6                 mov     ecx, [rsp+108h+fd]
.text:00000000000046EA                 jmp     loc_450B
.text:00000000000046EA ; ---------------------------------------------------------------------------
.text:00000000000046EF                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: rm+238↑j
.text:00000000000046F0                                         ; rm+2B6↑j
.text:00000000000046F0                 mov     ebp, 15h
.text:00000000000046F5
.text:00000000000046F5 loc_46F5:                               ; CODE XREF: rm+2C1↑j
.text:00000000000046F5                 mov     rsi, [r15+38h]
.text:00000000000046F9                 mov     edi, 4
.text:00000000000046FE                 call    quotearg_style
.text:0000000000004703                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:000000000000470A                 xor     edi, edi        ; domainname
.text:000000000000470C                 mov     r14, rax
.text:000000000000470F                 mov     edx, 5          ; category
.text:0000000000004714                 call    _dcgettext
.text:0000000000004719                 xor     edi, edi        ; status
.text:000000000000471B                 mov     rdx, rax        ; format
.text:000000000000471E                 mov     rcx, r14
.text:0000000000004721                 xor     eax, eax
.text:0000000000004723                 mov     esi, ebp        ; errnum
.text:0000000000004725                 call    _error
.text:000000000000472A                 mov     rax, [r15+8]
.text:000000000000472E                 cmp     qword ptr [rax+58h], 0
.text:0000000000004733                 jns     short loc_4757
.text:0000000000004735                 jmp     loc_4429
.text:0000000000004735 ; ---------------------------------------------------------------------------
.text:000000000000473A                 align 20h
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: rm+40C↓j
.text:0000000000004740                 mov     qword ptr [rax+20h], 1
.text:0000000000004748                 mov     rax, [rax+8]
.text:000000000000474C                 cmp     qword ptr [rax+58h], 0
.text:0000000000004751                 js      loc_4429
.text:0000000000004757
.text:0000000000004757 loc_4757:                               ; CODE XREF: rm+3E3↑j
.text:0000000000004757                 cmp     qword ptr [rax+20h], 0
.text:000000000000475C                 jz      short loc_4740
.text:000000000000475E                 jmp     loc_4429
.text:000000000000475E ; ---------------------------------------------------------------------------
.text:0000000000004763                 align 8
.text:0000000000004768
.text:0000000000004768 loc_4768:                               ; CODE XREF: rm+1B5↑j
.text:0000000000004768                 mov     ecx, r14d
.text:000000000000476B                 mov     rdx, r13
.text:000000000000476E                 mov     rsi, r15
.text:0000000000004771                 mov     rdi, rbx
.text:0000000000004774                 call    excise
.text:0000000000004779                 mov     ecx, eax
.text:000000000000477B                 jmp     loc_450B
.text:0000000000004780 ; ---------------------------------------------------------------------------
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: rm+34B↑j
.text:0000000000004780                 cmp     [rsp+108h+var_DC], 4
.text:0000000000004785                 jnz     loc_43C0
.text:000000000000478B                 mov     ecx, 1
.text:0000000000004790                 mov     rdx, r13
.text:0000000000004793                 mov     rsi, r15
.text:0000000000004796                 mov     rdi, rbx
.text:0000000000004799                 call    excise
.text:000000000000479E                 mov     edx, 4
.text:00000000000047A3                 mov     rsi, r15
.text:00000000000047A6                 mov     rdi, rbx
.text:00000000000047A9                 mov     [rsp+108h+fd], eax
.text:00000000000047AD                 call    rpl_fts_set
.text:00000000000047B2                 mov     rdi, rbx
.text:00000000000047B5                 call    rpl_fts_read
.text:00000000000047BA                 mov     ecx, [rsp+108h+fd]
.text:00000000000047BE                 cmp     ecx, 2
.text:00000000000047C1                 jz      loc_43C0
.text:00000000000047C7                 jmp     loc_46A1
.text:00000000000047C7 ; ---------------------------------------------------------------------------
.text:00000000000047CC                 align 10h
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: rm+2FE↑j
.text:00000000000047D0                 xor     edx, edx
.text:00000000000047D2                 cmp     byte ptr [rax+1], 2Eh ; '.'
.text:00000000000047D6                 setz    dl
.text:00000000000047D9                 movzx   eax, byte ptr [rax+rdx+1]
.text:00000000000047DE                 test    al, al
.text:00000000000047E0                 jz      short loc_47EA
.text:00000000000047E2                 cmp     al, 2Fh ; '/'
.text:00000000000047E4                 jnz     loc_4654
.text:00000000000047EA
.text:00000000000047EA loc_47EA:                               ; CODE XREF: rm+490↑j
.text:00000000000047EA                 mov     rdx, [r15+38h]
.text:00000000000047EE                 mov     esi, 4
.text:00000000000047F3                 mov     edi, 2
.text:00000000000047F8                 call    quotearg_n_style
.text:00000000000047FD                 lea     rdx, asc_15AEB  ; ".."
.text:0000000000004804                 mov     esi, 4
.text:0000000000004809                 mov     edi, 1
.text:000000000000480E                 mov     rbp, rax
.text:0000000000004811                 call    quotearg_n_style
.text:0000000000004816                 lea     rdx, asc_15AEB+1 ; "."
.text:000000000000481D                 xor     edi, edi
.text:000000000000481F                 mov     esi, 4
.text:0000000000004824                 mov     r14, rax
.text:0000000000004827                 call    quotearg_n_style
.text:000000000000482C                 lea     rsi, aRefusingToRemo ; "refusing to remove %s or %s directory: "...
.text:0000000000004833                 xor     edi, edi        ; domainname
.text:0000000000004835                 mov     edx, 5          ; category
.text:000000000000483A                 mov     qword ptr [rsp+108h+fd], rax
.text:000000000000483F                 call    _dcgettext
.text:0000000000004844                 mov     rcx, qword ptr [rsp+108h+fd]
.text:0000000000004849                 mov     rdx, rax        ; format
.text:000000000000484C                 mov     r9, rbp
.text:000000000000484F                 mov     r8, r14
.text:0000000000004852                 xor     esi, esi        ; errnum
.text:0000000000004854                 xor     edi, edi        ; status
.text:0000000000004856                 xor     eax, eax
.text:0000000000004858                 call    _error
.text:000000000000485D                 jmp     loc_4429
.text:000000000000485D ; ---------------------------------------------------------------------------
.text:0000000000004862                 align 8
.text:0000000000004868
.text:0000000000004868 loc_4868:                               ; CODE XREF: rm+322↑j
.text:0000000000004868                 lea     rsi, asc_15AEB  ; ".."
.text:000000000000486F                 xor     edx, edx
.text:0000000000004871                 mov     rdi, r14
.text:0000000000004874                 call    file_name_concat
.text:0000000000004879                 test    rax, rax
.text:000000000000487C                 mov     r14, rax
.text:000000000000487F                 jz      short loc_4897
.text:0000000000004881                 mov     rdx, [rsp+108h+stat_buf] ; stat_buf
.text:0000000000004886                 mov     rsi, rax        ; filename
.text:0000000000004889                 mov     edi, 1          ; ver
.text:000000000000488E                 call    ___lxstat
.text:0000000000004893                 test    eax, eax
.text:0000000000004895                 jz      short loc_4900
.text:0000000000004897
.text:0000000000004897 loc_4897:                               ; CODE XREF: rm+52F↑j
.text:0000000000004897                 mov     rdx, [r15+30h]
.text:000000000000489B                 mov     esi, 4
.text:00000000000048A0                 mov     edi, 1
.text:00000000000048A5                 call    quotearg_n_style
.text:00000000000048AA                 mov     rdx, r14
.text:00000000000048AD                 xor     edi, edi
.text:00000000000048AF                 mov     esi, 4
.text:00000000000048B4                 mov     rbp, rax
.text:00000000000048B7                 call    quotearg_n_style
.text:00000000000048BC                 lea     rsi, aFailedToStatSS ; "failed to stat %s: skipping %s"
.text:00000000000048C3                 xor     edi, edi        ; domainname
.text:00000000000048C5                 mov     edx, 5          ; category
.text:00000000000048CA                 mov     qword ptr [rsp+108h+fd], rax
.text:00000000000048CF                 call    _dcgettext
.text:00000000000048D4                 mov     rcx, qword ptr [rsp+108h+fd]
.text:00000000000048D9                 mov     rdx, rax        ; format
.text:00000000000048DC                 xor     edi, edi        ; status
.text:00000000000048DE                 mov     r8, rbp
.text:00000000000048E1                 xor     esi, esi        ; errnum
.text:00000000000048E3                 xor     eax, eax
.text:00000000000048E5                 call    _error
.text:00000000000048EA                 mov     rdi, r14        ; ptr
.text:00000000000048ED                 call    free
.text:00000000000048F2                 jmp     loc_4429
.text:00000000000048F2 ; ---------------------------------------------------------------------------
.text:00000000000048F7                 align 20h
.text:0000000000004900
.text:0000000000004900 loc_4900:                               ; CODE XREF: rm+545↑j
.text:0000000000004900                 mov     rdi, r14        ; ptr
.text:0000000000004903                 call    free
.text:0000000000004908                 mov     rax, [rsp+108h+var_D8]
.text:000000000000490D                 cmp     [rbx+18h], rax
.text:0000000000004911                 jz      loc_4678
.text:0000000000004917                 mov     rsi, [r15+38h]
.text:000000000000491B                 mov     edi, 4
.text:0000000000004920                 call    quotearg_style
.text:0000000000004925                 lea     rsi, aSkippingSSince ; "skipping %s, since it's on a different "...
.text:000000000000492C                 mov     rbp, rax
.text:000000000000492F                 mov     edx, 5          ; category
.text:0000000000004934                 xor     edi, edi        ; domainname
.text:0000000000004936                 call    _dcgettext
.text:000000000000493B                 xor     esi, esi        ; errnum
.text:000000000000493D                 mov     rdx, rax        ; format
.text:0000000000004940                 mov     rcx, rbp
.text:0000000000004943                 xor     edi, edi        ; status
.text:0000000000004945                 xor     eax, eax
.text:0000000000004947                 call    _error
.text:000000000000494C                 lea     rsi, aAndPreserveRoo ; "and --preserve-root=all is in effect"
.text:0000000000004953                 mov     edx, 5          ; category
.text:0000000000004958
.text:0000000000004958 loc_4958:                               ; CODE XREF: rm+71F↓j
.text:0000000000004958                 xor     edi, edi        ; domainname
.text:000000000000495A                 call    _dcgettext
.text:000000000000495F                 xor     esi, esi        ; errnum
.text:0000000000004961                 mov     rdx, rax        ; format
.text:0000000000004964                 xor     edi, edi        ; status
.text:0000000000004966                 xor     eax, eax
.text:0000000000004968                 call    _error
.text:000000000000496D                 jmp     loc_4429
.text:000000000000496D ; ---------------------------------------------------------------------------
.text:0000000000004972                 align 8
.text:0000000000004978
.text:0000000000004978 loc_4978:                               ; CODE XREF: rm+116↑j
.text:0000000000004978                 lea     rsi, aFtsReadFailed ; "fts_read failed"
.text:000000000000497F                 xor     edi, edi        ; domainname
.text:0000000000004981                 mov     edx, 5          ; category
.text:0000000000004986                 mov     ebp, 4
.text:000000000000498B                 call    _dcgettext
.text:0000000000004990                 mov     esi, [r12]      ; errnum
.text:0000000000004994                 mov     rdx, rax        ; format
.text:0000000000004997                 xor     edi, edi        ; status
.text:0000000000004999                 xor     eax, eax
.text:000000000000499B                 call    _error
.text:00000000000049A0                 mov     rdi, rbx        ; ptr
.text:00000000000049A3                 call    rpl_fts_close
.text:00000000000049A8                 test    eax, eax
.text:00000000000049AA                 jz      loc_447C
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: rm+126↑j
.text:00000000000049B0                 lea     rsi, aFtsCloseFailed ; "fts_close failed"
.text:00000000000049B7                 mov     edx, 5          ; category
.text:00000000000049BC                 xor     edi, edi        ; domainname
.text:00000000000049BE                 mov     ebp, 4
.text:00000000000049C3                 call    _dcgettext
.text:00000000000049C8                 mov     esi, [r12]      ; errnum
.text:00000000000049CC                 mov     rdx, rax        ; format
.text:00000000000049CF                 xor     edi, edi        ; status
.text:00000000000049D1                 xor     eax, eax
.text:00000000000049D3                 call    _error
.text:00000000000049D8                 jmp     loc_447C
.text:00000000000049D8 ; ---------------------------------------------------------------------------
.text:00000000000049DD                 align 20h
.text:00000000000049E0
.text:00000000000049E0 loc_49E0:                               ; CODE XREF: rm+317↑j
.text:00000000000049E0                 mov     rax, [rax+8]
.text:00000000000049E4                 cmp     [r15+78h], rax
.text:00000000000049E8                 jnz     loc_466D
.text:00000000000049EE                 mov     rdx, [r15+38h]
.text:00000000000049F2                 lea     rdi, aLibs+6    ; "/"
.text:00000000000049F9                 mov     ecx, 2
.text:00000000000049FE                 mov     rsi, rdx
.text:0000000000004A01                 repe cmpsb
.text:0000000000004A03                 setnbe  al
.text:0000000000004A06                 sbb     al, 0
.text:0000000000004A08                 test    al, al
.text:0000000000004A0A                 jz      loc_4AFE
.text:0000000000004A10                 lea     rdx, aLibs+6    ; "/"
.text:0000000000004A17                 mov     esi, 4
.text:0000000000004A1C                 mov     edi, 1
.text:0000000000004A21                 call    quotearg_n_style
.text:0000000000004A26                 mov     rdx, [r15+38h]
.text:0000000000004A2A                 mov     esi, 4
.text:0000000000004A2F                 xor     edi, edi
.text:0000000000004A31                 mov     rbp, rax
.text:0000000000004A34                 call    quotearg_n_style
.text:0000000000004A39                 lea     rsi, aItIsDangerousT ; "it is dangerous to operate recursively "...
.text:0000000000004A40                 mov     r14, rax
.text:0000000000004A43                 mov     edx, 5          ; category
.text:0000000000004A48                 xor     edi, edi        ; domainname
.text:0000000000004A4A                 call    _dcgettext
.text:0000000000004A4F                 mov     r8, rbp
.text:0000000000004A52                 mov     rdx, rax        ; format
.text:0000000000004A55                 mov     rcx, r14
.text:0000000000004A58                 xor     esi, esi        ; errnum
.text:0000000000004A5A                 xor     edi, edi        ; status
.text:0000000000004A5C                 xor     eax, eax
.text:0000000000004A5E                 call    _error
.text:0000000000004A63
.text:0000000000004A63 loc_4A63:                               ; CODE XREF: rm+7E2↓j
.text:0000000000004A63                 mov     edx, 5
.text:0000000000004A68                 lea     rsi, aUseNoPreserveR ; "use --no-preserve-root to override this"...
.text:0000000000004A6F                 jmp     loc_4958
.text:0000000000004A6F ; ---------------------------------------------------------------------------
.text:0000000000004A74                 align 8
.text:0000000000004A78
.text:0000000000004A78 loc_4A78:                               ; CODE XREF: rm+17C↑j
.text:0000000000004A78                 mov     rax, [r15+8]
.text:0000000000004A7C                 cmp     qword ptr [rax+58h], 0
.text:0000000000004A81                 jns     short loc_4A9B
.text:0000000000004A83                 jmp     short loc_4AA2
.text:0000000000004A83 ; ---------------------------------------------------------------------------
.text:0000000000004A85                 align 8
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: rm+750↓j
.text:0000000000004A88                 mov     qword ptr [rax+20h], 1
.text:0000000000004A90                 mov     rax, [rax+8]
.text:0000000000004A94                 cmp     qword ptr [rax+58h], 0
.text:0000000000004A99                 js      short loc_4AA2
.text:0000000000004A9B
.text:0000000000004A9B loc_4A9B:                               ; CODE XREF: rm+731↑j
.text:0000000000004A9B                 cmp     qword ptr [rax+20h], 0
.text:0000000000004AA0                 jz      short loc_4A88
.text:0000000000004AA2
.text:0000000000004AA2 loc_4AA2:                               ; CODE XREF: rm+733↑j
.text:0000000000004AA2                                         ; rm+749↑j
.text:0000000000004AA2                 mov     rsi, [r15+38h]
.text:0000000000004AA6                 mov     edi, 4
.text:0000000000004AAB                 call    quotearg_style
.text:0000000000004AB0                 lea     rsi, aSkippingSSince ; "skipping %s, since it's on a different "...
.text:0000000000004AB7                 mov     rbp, rax
.text:0000000000004ABA                 mov     edx, 5          ; category
.text:0000000000004ABF                 xor     edi, edi        ; domainname
.text:0000000000004AC1                 call    _dcgettext
.text:0000000000004AC6                 mov     rcx, rbp
.text:0000000000004AC9                 mov     rdx, rax        ; format
.text:0000000000004ACC                 xor     esi, esi        ; errnum
.text:0000000000004ACE                 xor     edi, edi        ; status
.text:0000000000004AD0                 xor     eax, eax
.text:0000000000004AD2                 mov     ebp, 4
.text:0000000000004AD7                 call    _error
.text:0000000000004ADC                 jmp     loc_43C0
.text:0000000000004ADC ; ---------------------------------------------------------------------------
.text:0000000000004AE1                 align 8
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: rm+28↑j
.text:0000000000004AE8                 mov     ebp, 2
.text:0000000000004AED                 jmp     loc_447C
.text:0000000000004AF2 ; ---------------------------------------------------------------------------
.text:0000000000004AF2
.text:0000000000004AF2 loc_4AF2:                               ; CODE XREF: rm+26A↑j
.text:0000000000004AF2                 mov     edi, edx        ; fd
.text:0000000000004AF4                 call    _close
.text:0000000000004AF9                 jmp     loc_4601
.text:0000000000004AFE ; ---------------------------------------------------------------------------
.text:0000000000004AFE
.text:0000000000004AFE loc_4AFE:                               ; CODE XREF: rm+6BA↑j
.text:0000000000004AFE                 mov     rsi, rdx
.text:0000000000004B01                 mov     edi, 4
.text:0000000000004B06                 call    quotearg_style
.text:0000000000004B0B                 lea     rsi, aItIsDangerousT_0 ; "it is dangerous to operate recursively "...
.text:0000000000004B12                 mov     rbp, rax
.text:0000000000004B15                 xor     edi, edi        ; domainname
.text:0000000000004B17                 mov     edx, 5          ; category
.text:0000000000004B1C                 call    _dcgettext
.text:0000000000004B21                 mov     rcx, rbp
.text:0000000000004B24                 mov     rdx, rax        ; format
.text:0000000000004B27                 xor     esi, esi        ; errnum
.text:0000000000004B29                 xor     edi, edi        ; status
.text:0000000000004B2B                 xor     eax, eax
.text:0000000000004B2D                 call    _error
.text:0000000000004B32                 jmp     loc_4A63
.text:0000000000004B37 ; ---------------------------------------------------------------------------
.text:0000000000004B37
.text:0000000000004B37 def_43EC:                               ; CODE XREF: rm+8C↑j
.text:0000000000004B37                                         ; rm+9C↑j
.text:0000000000004B37                                         ; DATA XREF: ...
.text:0000000000004B37                 mov     rdx, [r15+38h]  ; jumptable 00000000000043EC default case, cases 0,5,9
.text:0000000000004B3B                 mov     esi, 3
.text:0000000000004B40                 xor     edi, edi
.text:0000000000004B42                 call    quotearg_n_style_colon
.text:0000000000004B47                 movzx   ebx, word ptr [r15+70h]
.text:0000000000004B4C                 lea     rsi, aUnexpectedFail ; "unexpected failure: fts_info=%d: %s\npl"...
.text:0000000000004B53                 mov     edx, 5          ; category
.text:0000000000004B58                 xor     edi, edi        ; domainname
.text:0000000000004B5A                 mov     rbp, rax
.text:0000000000004B5D                 call    _dcgettext
.text:0000000000004B62                 lea     r9, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000004B69                 mov     rdx, rax        ; format
.text:0000000000004B6C                 mov     r8, rbp
.text:0000000000004B6F                 mov     ecx, ebx
.text:0000000000004B71                 xor     esi, esi        ; errnum
.text:0000000000004B73                 xor     edi, edi        ; status
.text:0000000000004B75                 xor     eax, eax
.text:0000000000004B77                 call    _error
.text:0000000000004B7C                 call    _abort
.text:0000000000004B81 ; ---------------------------------------------------------------------------
.text:0000000000004B81
.text:0000000000004B81 loc_4B81:                               ; CODE XREF: rm+1C1↑j
.text:0000000000004B81                 lea     rcx, __PRETTY_FUNCTION___7067 ; function
.text:0000000000004B88                 lea     rsi, aCoreutils831Sr_0 ; "../coreutils-8.31/src/remove.c"
.text:0000000000004B8F                 lea     rdi, aValidStatusS ; "VALID_STATUS (s)"
.text:0000000000004B96                 mov     edx, 261h       ; line
.text:0000000000004B9B                 call    ___assert_fail
.text:0000000000004BA0 ; ---------------------------------------------------------------------------
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: rm+13F↑j
.text:0000000000004BA0                 call    ___stack_chk_fail
.text:0000000000004BA5 ; ---------------------------------------------------------------------------
.text:0000000000004BA5
.text:0000000000004BA5 loc_4BA5:                               ; CODE XREF: rm+1CA↑j
.text:0000000000004BA5                 mov     ebp, 4
.text:0000000000004BAA                 jmp     loc_43C0
.text:0000000000004BAA ; } // starts at 4350
.text:0000000000004BAA rm              endp
.text:0000000000004BAA
.text:0000000000004BAA ; ---------------------------------------------------------------------------
.text:0000000000004BAF                 align 10h
.text:0000000000004BB0
.text:0000000000004BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BB0
.text:0000000000004BB0
.text:0000000000004BB0 ; __int64 __fastcall writable_destination(char *name)
.text:0000000000004BB0 writable_destination proc near          ; CODE XREF: overwrite_ok_isra_12+2A↓p
.text:0000000000004BB0                                         ; copy_internal+123B↓p
.text:0000000000004BB0 ; __unwind {
.text:0000000000004BB0                 and     esi, 0F000h
.text:0000000000004BB6                 cmp     esi, 0A000h
.text:0000000000004BBC                 jz      short loc_4BD8
.text:0000000000004BBE                 push    rbx
.text:0000000000004BBF                 mov     rbx, rdi
.text:0000000000004BC2                 call    can_write_any_file
.text:0000000000004BC7                 test    al, al
.text:0000000000004BC9                 jz      short loc_4BE0
.text:0000000000004BCB                 mov     eax, 1
.text:0000000000004BD0                 pop     rbx
.text:0000000000004BD1                 retn
.text:0000000000004BD1 ; ---------------------------------------------------------------------------
.text:0000000000004BD2                 align 8
.text:0000000000004BD8
.text:0000000000004BD8 loc_4BD8:                               ; CODE XREF: writable_destination+C↑j
.text:0000000000004BD8                 mov     eax, 1
.text:0000000000004BDD                 retn
.text:0000000000004BDD ; ---------------------------------------------------------------------------
.text:0000000000004BDE                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: writable_destination+19↑j
.text:0000000000004BE0                 mov     rdi, rbx        ; name
.text:0000000000004BE3                 mov     esi, 2          ; type
.text:0000000000004BE8                 call    _euidaccess
.text:0000000000004BED                 test    eax, eax
.text:0000000000004BEF                 setz    al
.text:0000000000004BF2                 pop     rbx
.text:0000000000004BF3                 retn
.text:0000000000004BF3 ; } // starts at 4BB0
.text:0000000000004BF3 writable_destination endp
.text:0000000000004BF3
.text:0000000000004BF3 ; ---------------------------------------------------------------------------
.text:0000000000004BF4                 align 20h
.text:0000000000004C00
.text:0000000000004C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C00
.text:0000000000004C00
.text:0000000000004C00 ; __int64 __fastcall write_zeros(int fd)
.text:0000000000004C00 write_zeros     proc near               ; CODE XREF: copy_internal+39B1↓p
.text:0000000000004C00                                         ; copy_internal+3CBB↓p
.text:0000000000004C00 ; __unwind {
.text:0000000000004C00                 cmp     cs:zeros_7570, 0
.text:0000000000004C08                 push    r12
.text:0000000000004C0A                 mov     r12d, edi
.text:0000000000004C0D                 push    rbp
.text:0000000000004C0E                 push    rbx
.text:0000000000004C0F                 mov     rbx, rsi
.text:0000000000004C12                 jz      short loc_4C68
.text:0000000000004C14
.text:0000000000004C14 loc_4C14:                               ; CODE XREF: write_zeros+85↓j
.text:0000000000004C14                                         ; write_zeros+A0↓j
.text:0000000000004C14                 test    rbx, rbx
.text:0000000000004C17                 jnz     short loc_4C25
.text:0000000000004C19                 jmp     short loc_4C58
.text:0000000000004C19 ; ---------------------------------------------------------------------------
.text:0000000000004C1B                 align 20h
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: write_zeros+4C↓j
.text:0000000000004C20                 sub     rbx, rax
.text:0000000000004C23                 jz      short loc_4C58
.text:0000000000004C25
.text:0000000000004C25 loc_4C25:                               ; CODE XREF: write_zeros+17↑j
.text:0000000000004C25                 cmp     cs:nz_7571, rbx
.text:0000000000004C2C                 mov     rbp, rbx
.text:0000000000004C2F                 mov     rsi, cs:zeros_7570 ; buf
.text:0000000000004C36                 cmovbe  rbp, cs:nz_7571
.text:0000000000004C3E                 mov     edi, r12d       ; fd
.text:0000000000004C41                 mov     rdx, rbp        ; n
.text:0000000000004C44                 call    full_write
.text:0000000000004C49                 cmp     rax, rbp
.text:0000000000004C4C                 jz      short loc_4C20
.text:0000000000004C4E                 pop     rbx
.text:0000000000004C4F                 xor     eax, eax
.text:0000000000004C51                 pop     rbp
.text:0000000000004C52                 pop     r12
.text:0000000000004C54                 retn
.text:0000000000004C54 ; ---------------------------------------------------------------------------
.text:0000000000004C55                 align 8
.text:0000000000004C58
.text:0000000000004C58 loc_4C58:                               ; CODE XREF: write_zeros+19↑j
.text:0000000000004C58                                         ; write_zeros+23↑j
.text:0000000000004C58                 pop     rbx
.text:0000000000004C59                 mov     eax, 1
.text:0000000000004C5E                 pop     rbp
.text:0000000000004C5F                 pop     r12
.text:0000000000004C61                 retn
.text:0000000000004C61 ; ---------------------------------------------------------------------------
.text:0000000000004C62                 align 8
.text:0000000000004C68
.text:0000000000004C68 loc_4C68:                               ; CODE XREF: write_zeros+12↑j
.text:0000000000004C68                 mov     rdi, cs:nz_7571 ; nmemb
.text:0000000000004C6F                 mov     esi, 1          ; size
.text:0000000000004C74                 call    _calloc
.text:0000000000004C79                 test    rax, rax
.text:0000000000004C7C                 jz      short loc_4C87
.text:0000000000004C7E                 mov     cs:zeros_7570, rax
.text:0000000000004C85                 jmp     short loc_4C14
.text:0000000000004C87 ; ---------------------------------------------------------------------------
.text:0000000000004C87
.text:0000000000004C87 loc_4C87:                               ; CODE XREF: write_zeros+7C↑j
.text:0000000000004C87                 lea     rax, fallback_7572
.text:0000000000004C8E                 mov     cs:nz_7571, 400h
.text:0000000000004C99                 mov     cs:zeros_7570, rax
.text:0000000000004CA0                 jmp     loc_4C14
.text:0000000000004CA0 ; } // starts at 4C00
.text:0000000000004CA0 write_zeros     endp
.text:0000000000004CA0
.text:0000000000004CA0 ; ---------------------------------------------------------------------------
.text:0000000000004CA5                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0 punch_hole      proc near               ; CODE XREF: create_hole+4B↓p
.text:0000000000004CB0                                         ; copy_internal+3C7C↓p
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 push    rbx
.text:0000000000004CB1                 mov     rcx, rdx        ; len
.text:0000000000004CB4                 mov     rdx, rsi        ; offset
.text:0000000000004CB7                 mov     esi, 3          ; mode
.text:0000000000004CBC                 call    _fallocate
.text:0000000000004CC1                 test    eax, eax
.text:0000000000004CC3                 mov     ebx, eax
.text:0000000000004CC5                 js      short loc_4CD0
.text:0000000000004CC7
.text:0000000000004CC7 loc_4CC7:                               ; CODE XREF: punch_hole+2F↓j
.text:0000000000004CC7                 mov     eax, ebx
.text:0000000000004CC9                 pop     rbx
.text:0000000000004CCA                 retn
.text:0000000000004CCA ; ---------------------------------------------------------------------------
.text:0000000000004CCB                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 loc_4CD0:                               ; CODE XREF: punch_hole+15↑j
.text:0000000000004CD0                 call    ___errno_location
.text:0000000000004CD5                 mov     eax, [rax]
.text:0000000000004CD7                 cmp     eax, 26h ; '&'
.text:0000000000004CDA                 jz      short loc_4CE1
.text:0000000000004CDC                 cmp     eax, 5Fh ; '_'
.text:0000000000004CDF                 jnz     short loc_4CC7
.text:0000000000004CE1
.text:0000000000004CE1 loc_4CE1:                               ; CODE XREF: punch_hole+2A↑j
.text:0000000000004CE1                 xor     ebx, ebx
.text:0000000000004CE3                 mov     eax, ebx
.text:0000000000004CE5                 pop     rbx
.text:0000000000004CE6                 retn
.text:0000000000004CE6 ; } // starts at 4CB0
.text:0000000000004CE6 punch_hole      endp
.text:0000000000004CE6
.text:0000000000004CE6 ; ---------------------------------------------------------------------------
.text:0000000000004CE7                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0
.text:0000000000004CF0 emit_verbose    proc near               ; CODE XREF: copy_internal+A3B↓p
.text:0000000000004CF0                                         ; copy_internal+13C7↓p ...
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 push    r12
.text:0000000000004CF2                 push    rbp
.text:0000000000004CF3                 mov     r12, rdi
.text:0000000000004CF6                 push    rbx
.text:0000000000004CF7                 mov     edi, 1
.text:0000000000004CFC                 mov     rbx, rdx
.text:0000000000004CFF                 mov     rdx, rsi
.text:0000000000004D02                 mov     esi, 4
.text:0000000000004D07                 call    quotearg_n_style
.text:0000000000004D0C                 xor     edi, edi
.text:0000000000004D0E                 mov     rdx, r12
.text:0000000000004D11                 mov     esi, 4
.text:0000000000004D16                 mov     rbp, rax
.text:0000000000004D19                 call    quotearg_n_style
.text:0000000000004D1E                 lea     rsi, aSS        ; "%s -> %s"
.text:0000000000004D25                 mov     rdx, rax
.text:0000000000004D28                 mov     rcx, rbp
.text:0000000000004D2B                 xor     eax, eax
.text:0000000000004D2D                 mov     edi, 1
.text:0000000000004D32                 call    ___printf_chk
.text:0000000000004D37                 test    rbx, rbx
.text:0000000000004D3A                 jz      short loc_4D71
.text:0000000000004D3C                 mov     rsi, rbx
.text:0000000000004D3F                 mov     edi, 4
.text:0000000000004D44                 call    quotearg_style
.text:0000000000004D49                 lea     rsi, aBackupS   ; " (backup: %s)"
.text:0000000000004D50                 mov     rbx, rax
.text:0000000000004D53                 mov     edx, 5          ; category
.text:0000000000004D58                 xor     edi, edi        ; domainname
.text:0000000000004D5A                 call    _dcgettext
.text:0000000000004D5F                 mov     rdx, rbx
.text:0000000000004D62                 mov     rsi, rax
.text:0000000000004D65                 mov     edi, 1
.text:0000000000004D6A                 xor     eax, eax
.text:0000000000004D6C                 call    ___printf_chk
.text:0000000000004D71
.text:0000000000004D71 loc_4D71:                               ; CODE XREF: emit_verbose+4A↑j
.text:0000000000004D71                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004D78                 mov     rax, [rdi+28h]
.text:0000000000004D7C                 cmp     rax, [rdi+30h]
.text:0000000000004D80                 jnb     short loc_4D98
.text:0000000000004D82                 lea     rdx, [rax+1]
.text:0000000000004D86                 mov     [rdi+28h], rdx
.text:0000000000004D8A                 mov     byte ptr [rax], 0Ah
.text:0000000000004D8D                 pop     rbx
.text:0000000000004D8E                 pop     rbp
.text:0000000000004D8F                 pop     r12
.text:0000000000004D91                 retn
.text:0000000000004D91 ; ---------------------------------------------------------------------------
.text:0000000000004D92                 align 8
.text:0000000000004D98
.text:0000000000004D98 loc_4D98:                               ; CODE XREF: emit_verbose+90↑j
.text:0000000000004D98                 pop     rbx
.text:0000000000004D99                 pop     rbp
.text:0000000000004D9A                 pop     r12
.text:0000000000004D9C                 mov     esi, 0Ah        ; int
.text:0000000000004DA1                 jmp     ___overflow
.text:0000000000004DA1 ; } // starts at 4CF0
.text:0000000000004DA1 emit_verbose    endp
.text:0000000000004DA1
.text:0000000000004DA1 ; ---------------------------------------------------------------------------
.text:0000000000004DA6                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0
.text:0000000000004DB0 create_hard_link proc near              ; CODE XREF: copy_internal+2F4↓p
.text:0000000000004DB0                                         ; copy_internal+56F↓p ...
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 push    r13
.text:0000000000004DB2                 push    r12
.text:0000000000004DB4                 movzx   r9d, dl
.text:0000000000004DB8                 push    rbp
.text:0000000000004DB9                 push    rbx
.text:0000000000004DBA                 mov     edx, 0FFFFFF9Ch
.text:0000000000004DBF                 mov     r13, rdi
.text:0000000000004DC2                 mov     r12, rsi
.text:0000000000004DC5                 mov     ebp, ecx
.text:0000000000004DC7                 sub     rsp, 10h
.text:0000000000004DCB                 test    r8b, r8b
.text:0000000000004DCE                 mov     rcx, rsi
.text:0000000000004DD1                 setnz   r8b
.text:0000000000004DD5                 push    0FFFFFFFFFFFFFFFFh
.text:0000000000004DD7                 mov     rsi, rdi
.text:0000000000004DDA                 movzx   r8d, r8b
.text:0000000000004DDE                 mov     edi, edx
.text:0000000000004DE0                 shl     r8d, 0Ah
.text:0000000000004DE4                 call    force_linkat
.text:0000000000004DE9                 test    eax, eax
.text:0000000000004DEB                 mov     ebx, eax
.text:0000000000004DED                 pop     rdx
.text:0000000000004DEE                 pop     rcx
.text:0000000000004DEF                 jg      short loc_4E58
.text:0000000000004DF1                 shr     ebx, 1Fh
.text:0000000000004DF4                 and     bl, bpl
.text:0000000000004DF7                 jnz     short loc_4E10
.text:0000000000004DF9                 add     rsp, 8
.text:0000000000004DFD                 mov     ebx, 1
.text:0000000000004E02                 mov     eax, ebx
.text:0000000000004E04                 pop     rbx
.text:0000000000004E05                 pop     rbp
.text:0000000000004E06                 pop     r12
.text:0000000000004E08                 pop     r13
.text:0000000000004E0A                 retn
.text:0000000000004E0A ; ---------------------------------------------------------------------------
.text:0000000000004E0B                 align 10h
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: create_hard_link+47↑j
.text:0000000000004E10                 mov     rsi, r12
.text:0000000000004E13                 mov     edi, 4
.text:0000000000004E18                 call    quotearg_style
.text:0000000000004E1D                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000004E24                 mov     rbp, rax
.text:0000000000004E27                 mov     edx, 5          ; category
.text:0000000000004E2C                 xor     edi, edi        ; domainname
.text:0000000000004E2E                 call    _dcgettext
.text:0000000000004E33                 mov     rdx, rbp
.text:0000000000004E36                 mov     rsi, rax
.text:0000000000004E39                 mov     edi, 1
.text:0000000000004E3E                 xor     eax, eax
.text:0000000000004E40                 call    ___printf_chk
.text:0000000000004E45                 add     rsp, 8
.text:0000000000004E49                 mov     eax, ebx
.text:0000000000004E4B                 pop     rbx
.text:0000000000004E4C                 pop     rbp
.text:0000000000004E4D                 pop     r12
.text:0000000000004E4F                 pop     r13
.text:0000000000004E51                 retn
.text:0000000000004E51 ; ---------------------------------------------------------------------------
.text:0000000000004E52                 align 8
.text:0000000000004E58
.text:0000000000004E58 loc_4E58:                               ; CODE XREF: create_hard_link+3F↑j
.text:0000000000004E58                 mov     rdx, r13
.text:0000000000004E5B                 mov     esi, 4
.text:0000000000004E60                 mov     edi, 1
.text:0000000000004E65                 call    quotearg_n_style
.text:0000000000004E6A                 mov     rdx, r12
.text:0000000000004E6D                 mov     esi, 4
.text:0000000000004E72                 xor     edi, edi
.text:0000000000004E74                 mov     r13, rax
.text:0000000000004E77                 call    quotearg_n_style
.text:0000000000004E7C                 lea     rsi, aCannotCreateHa ; "cannot create hard link %s to %s"
.text:0000000000004E83                 mov     rbp, rax
.text:0000000000004E86                 mov     edx, 5          ; category
.text:0000000000004E8B                 xor     edi, edi        ; domainname
.text:0000000000004E8D                 call    _dcgettext
.text:0000000000004E92                 mov     r8, r13
.text:0000000000004E95                 mov     rcx, rbp
.text:0000000000004E98                 mov     rdx, rax        ; format
.text:0000000000004E9B                 mov     esi, ebx        ; errnum
.text:0000000000004E9D                 xor     eax, eax
.text:0000000000004E9F                 xor     edi, edi        ; status
.text:0000000000004EA1                 call    _error
.text:0000000000004EA6                 xor     ebx, ebx
.text:0000000000004EA8                 add     rsp, 8
.text:0000000000004EAC                 mov     eax, ebx
.text:0000000000004EAE                 pop     rbx
.text:0000000000004EAF                 pop     rbp
.text:0000000000004EB0                 pop     r12
.text:0000000000004EB2                 pop     r13
.text:0000000000004EB4                 retn
.text:0000000000004EB4 ; } // starts at 4DB0
.text:0000000000004EB4 create_hard_link endp
.text:0000000000004EB4
.text:0000000000004EB4 ; ---------------------------------------------------------------------------
.text:0000000000004EB5                 align 20h
.text:0000000000004EC0
.text:0000000000004EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EC0
.text:0000000000004EC0
.text:0000000000004EC0 overwrite_ok_isra_12 proc near          ; CODE XREF: copy_internal+C6C↓p
.text:0000000000004EC0                                         ; copy_internal+1277↓p
.text:0000000000004EC0
.text:0000000000004EC0 var_3C          = byte ptr -3Ch
.text:0000000000004EC0 var_32          = byte ptr -32h
.text:0000000000004EC0 var_30          = qword ptr -30h
.text:0000000000004EC0
.text:0000000000004EC0 ; __unwind {
.text:0000000000004EC0                 push    r14
.text:0000000000004EC2                 push    r13
.text:0000000000004EC4                 mov     r13, rdi
.text:0000000000004EC7                 push    r12
.text:0000000000004EC9                 push    rbp
.text:0000000000004ECA                 mov     rbp, rdx
.text:0000000000004ECD                 push    rbx
.text:0000000000004ECE                 mov     rbx, rsi
.text:0000000000004ED1                 mov     rdi, rbx        ; name
.text:0000000000004ED4                 sub     rsp, 20h
.text:0000000000004ED8                 mov     esi, [rdx]
.text:0000000000004EDA                 mov     rax, fs:28h
.text:0000000000004EE3                 mov     [rsp+48h+var_30], rax
.text:0000000000004EE8                 xor     eax, eax
.text:0000000000004EEA                 call    writable_destination
.text:0000000000004EEF                 test    al, al
.text:0000000000004EF1                 jnz     loc_4F88
.text:0000000000004EF7                 mov     edi, [rbp+0]
.text:0000000000004EFA                 lea     r12, [rsp+48h+var_3C]
.text:0000000000004EFF                 mov     rsi, r12
.text:0000000000004F02                 call    strmode
.text:0000000000004F07                 mov     ebp, [rbp+0]
.text:0000000000004F0A                 mov     rsi, rbx
.text:0000000000004F0D                 mov     edi, 4
.text:0000000000004F12                 mov     [rsp+48h+var_32], 0
.text:0000000000004F17                 call    quotearg_style
.text:0000000000004F1C                 and     ebp, 0FFFh
.text:0000000000004F22                 cmp     byte ptr [r13+18h], 0
.text:0000000000004F27                 mov     r14, rax
.text:0000000000004F2A                 mov     rbx, cs:program_name
.text:0000000000004F31                 mov     edx, 5          ; category
.text:0000000000004F36                 jnz     short loc_4F46
.text:0000000000004F38                 test    dword ptr [r13+14h], 0FFFF00h
.text:0000000000004F40                 jz      loc_4FF0
.text:0000000000004F46
.text:0000000000004F46 loc_4F46:                               ; CODE XREF: overwrite_ok_isra_12+76↑j
.text:0000000000004F46                 lea     rsi, aSReplaceSOverr ; "%s: replace %s, overriding mode %04lo ("...
.text:0000000000004F4D                 xor     edi, edi        ; domainname
.text:0000000000004F4F                 call    _dcgettext
.text:0000000000004F54                 mov     rdx, rax
.text:0000000000004F57
.text:0000000000004F57 loc_4F57:                               ; CODE XREF: overwrite_ok_isra_12+141↓j
.text:0000000000004F57                 sub     rsp, 8
.text:0000000000004F5B                 add     r12, 1
.text:0000000000004F5F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004F66                 push    r12
.text:0000000000004F68                 mov     r9, rbp
.text:0000000000004F6B                 mov     r8, r14
.text:0000000000004F6E                 mov     rcx, rbx
.text:0000000000004F71                 mov     esi, 1
.text:0000000000004F76                 xor     eax, eax
.text:0000000000004F78                 call    ___fprintf_chk
.text:0000000000004F7D                 pop     rax
.text:0000000000004F7E                 pop     rdx
.text:0000000000004F7F                 jmp     short loc_4FCE
.text:0000000000004F7F ; ---------------------------------------------------------------------------
.text:0000000000004F81                 align 8
.text:0000000000004F88
.text:0000000000004F88 loc_4F88:                               ; CODE XREF: overwrite_ok_isra_12+31↑j
.text:0000000000004F88                 mov     rsi, rbx
.text:0000000000004F8B                 mov     edi, 4
.text:0000000000004F90                 call    quotearg_style
.text:0000000000004F95                 lea     rsi, aSOverwriteS ; "%s: overwrite %s? "
.text:0000000000004F9C                 mov     rbx, cs:program_name
.text:0000000000004FA3                 mov     edx, 5          ; category
.text:0000000000004FA8                 xor     edi, edi        ; domainname
.text:0000000000004FAA                 mov     rbp, rax
.text:0000000000004FAD                 call    _dcgettext
.text:0000000000004FB2                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004FB9                 mov     rdx, rax
.text:0000000000004FBC                 mov     r8, rbp
.text:0000000000004FBF                 mov     rcx, rbx
.text:0000000000004FC2                 mov     esi, 1
.text:0000000000004FC7                 xor     eax, eax
.text:0000000000004FC9                 call    ___fprintf_chk
.text:0000000000004FCE
.text:0000000000004FCE loc_4FCE:                               ; CODE XREF: overwrite_ok_isra_12+BF↑j
.text:0000000000004FCE                 call    yesno
.text:0000000000004FD3                 mov     rcx, [rsp+48h+var_30]
.text:0000000000004FD8                 xor     rcx, fs:28h
.text:0000000000004FE1                 jnz     short loc_5006
.text:0000000000004FE3                 add     rsp, 20h
.text:0000000000004FE7                 pop     rbx
.text:0000000000004FE8                 pop     rbp
.text:0000000000004FE9                 pop     r12
.text:0000000000004FEB                 pop     r13
.text:0000000000004FED                 pop     r14
.text:0000000000004FEF                 retn
.text:0000000000004FF0 ; ---------------------------------------------------------------------------
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: overwrite_ok_isra_12+80↑j
.text:0000000000004FF0                 lea     rsi, aSUnwritableSMo ; "%s: unwritable %s (mode %04lo, %s); try"...
.text:0000000000004FF7                 xor     edi, edi        ; domainname
.text:0000000000004FF9                 call    _dcgettext
.text:0000000000004FFE                 mov     rdx, rax
.text:0000000000005001                 jmp     loc_4F57
.text:0000000000005006 ; ---------------------------------------------------------------------------
.text:0000000000005006
.text:0000000000005006 loc_5006:                               ; CODE XREF: overwrite_ok_isra_12+121↑j
.text:0000000000005006                 call    ___stack_chk_fail
.text:0000000000005006 ; } // starts at 4EC0
.text:0000000000005006 overwrite_ok_isra_12 endp
.text:0000000000005006
.text:0000000000005006 ; ---------------------------------------------------------------------------
.text:000000000000500B                 align 10h
.text:0000000000005010
.text:0000000000005010 ; =============== S U B R O U T I N E =======================================
.text:0000000000005010
.text:0000000000005010
.text:0000000000005010 create_hole     proc near               ; CODE XREF: sparse_copy+277↓j
.text:0000000000005010                                         ; sparse_copy+2B8↓p ...
.text:0000000000005010 ; __unwind {
.text:0000000000005010                 push    r13
.text:0000000000005012                 push    r12
.text:0000000000005014                 mov     r13, rsi
.text:0000000000005017                 push    rbp
.text:0000000000005018                 push    rbx
.text:0000000000005019                 mov     r12d, edx
.text:000000000000501C                 mov     rsi, rcx        ; offset
.text:000000000000501F                 mov     edx, 1          ; whence
.text:0000000000005024                 mov     ebp, edi
.text:0000000000005026                 sub     rsp, 8
.text:000000000000502A                 mov     rbx, rcx
.text:000000000000502D                 call    _lseek
.text:0000000000005032                 test    rax, rax
.text:0000000000005035                 js      short loc_50B0
.text:0000000000005037                 test    r12b, r12b
.text:000000000000503A                 jnz     short loc_5050
.text:000000000000503C
.text:000000000000503C loc_503C:                               ; CODE XREF: create_hole+52↓j
.text:000000000000503C                 add     rsp, 8
.text:0000000000005040                 mov     eax, 1
.text:0000000000005045                 pop     rbx
.text:0000000000005046                 pop     rbp
.text:0000000000005047                 pop     r12
.text:0000000000005049                 pop     r13
.text:000000000000504B                 retn
.text:000000000000504B ; ---------------------------------------------------------------------------
.text:000000000000504C                 align 10h
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: create_hole+2A↑j
.text:0000000000005050                 sub     rax, rbx
.text:0000000000005053                 mov     rdx, rbx
.text:0000000000005056                 mov     edi, ebp
.text:0000000000005058                 mov     rsi, rax
.text:000000000000505B                 call    punch_hole
.text:0000000000005060                 test    eax, eax
.text:0000000000005062                 jns     short loc_503C
.text:0000000000005064                 mov     rsi, r13
.text:0000000000005067                 mov     edi, 4
.text:000000000000506C                 call    quotearg_style
.text:0000000000005071                 lea     rsi, aErrorDeallocat ; "error deallocating %s"
.text:0000000000005078                 mov     rbp, rax
.text:000000000000507B                 mov     edx, 5          ; category
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: create_hole+BC↓j
.text:0000000000005080                 xor     edi, edi        ; domainname
.text:0000000000005082                 call    _dcgettext
.text:0000000000005087                 mov     rbx, rax
.text:000000000000508A                 call    ___errno_location
.text:000000000000508F                 mov     esi, [rax]      ; errnum
.text:0000000000005091                 mov     rcx, rbp
.text:0000000000005094                 mov     rdx, rbx        ; format
.text:0000000000005097                 xor     eax, eax
.text:0000000000005099                 xor     edi, edi        ; status
.text:000000000000509B                 call    _error
.text:00000000000050A0                 add     rsp, 8
.text:00000000000050A4                 xor     eax, eax
.text:00000000000050A6                 pop     rbx
.text:00000000000050A7                 pop     rbp
.text:00000000000050A8                 pop     r12
.text:00000000000050AA                 pop     r13
.text:00000000000050AC                 retn
.text:00000000000050AC ; ---------------------------------------------------------------------------
.text:00000000000050AD                 align 10h
.text:00000000000050B0
.text:00000000000050B0 loc_50B0:                               ; CODE XREF: create_hole+25↑j
.text:00000000000050B0                 mov     rsi, r13
.text:00000000000050B3                 mov     edi, 4
.text:00000000000050B8                 call    quotearg_style
.text:00000000000050BD                 mov     edx, 5
.text:00000000000050C2                 mov     rbp, rax
.text:00000000000050C5                 lea     rsi, aCannotLseekS ; "cannot lseek %s"
.text:00000000000050CC                 jmp     short loc_5080
.text:00000000000050CC ; } // starts at 5010
.text:00000000000050CC create_hole     endp
.text:00000000000050CC
.text:00000000000050CC ; ---------------------------------------------------------------------------
.text:00000000000050CE                 align 10h
.text:00000000000050D0
.text:00000000000050D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050D0
.text:00000000000050D0
.text:00000000000050D0 sparse_copy     proc near               ; CODE XREF: copy_internal+316A↓p
.text:00000000000050D0                                         ; copy_internal+3B42↓p
.text:00000000000050D0
.text:00000000000050D0 var_A0          = qword ptr -0A0h
.text:00000000000050D0 var_98          = qword ptr -98h
.text:00000000000050D0 var_90          = dword ptr -90h
.text:00000000000050D0 var_8B          = byte ptr -8Bh
.text:00000000000050D0 var_8A          = byte ptr -8Ah
.text:00000000000050D0 var_89          = byte ptr -89h
.text:00000000000050D0 buf             = qword ptr -88h
.text:00000000000050D0 var_80          = qword ptr -80h
.text:00000000000050D0 var_78          = qword ptr -78h
.text:00000000000050D0 nbytes          = qword ptr -70h
.text:00000000000050D0 var_68          = qword ptr -68h
.text:00000000000050D0 var_60          = qword ptr -60h
.text:00000000000050D0 var_58          = qword ptr -58h
.text:00000000000050D0 var_50          = qword ptr -50h
.text:00000000000050D0 var_48          = qword ptr -48h
.text:00000000000050D0 fd              = dword ptr -40h
.text:00000000000050D0 var_3C          = dword ptr -3Ch
.text:00000000000050D0 arg_0           = qword ptr  8
.text:00000000000050D0 arg_8           = qword ptr  10h
.text:00000000000050D0 arg_10          = qword ptr  18h
.text:00000000000050D0 arg_18          = qword ptr  20h
.text:00000000000050D0 arg_20          = qword ptr  28h
.text:00000000000050D0
.text:00000000000050D0 ; __unwind {
.text:00000000000050D0                 push    r15
.text:00000000000050D2                 push    r14
.text:00000000000050D4                 push    r13
.text:00000000000050D6                 push    r12
.text:00000000000050D8                 push    rbp
.text:00000000000050D9                 push    rbx
.text:00000000000050DA                 sub     rsp, 78h
.text:00000000000050DE                 mov     rax, [rsp+0A8h+arg_0]
.text:00000000000050E6                 mov     rbx, [rsp+0A8h+arg_18]
.text:00000000000050EE                 mov     r10, [rsp+0A8h+arg_20]
.text:00000000000050F6                 mov     [rsp+0A8h+var_89], r9b
.text:00000000000050FB                 mov     [rsp+0A8h+var_50], rax
.text:0000000000005100                 mov     rax, [rsp+0A8h+arg_8]
.text:0000000000005108                 mov     byte ptr [r10], 0
.text:000000000000510C                 mov     [rsp+0A8h+var_68], rbx
.text:0000000000005111                 mov     [rsp+0A8h+var_48], r10
.text:0000000000005116                 mov     qword ptr [rbx], 0
.text:000000000000511D                 mov     [rsp+0A8h+var_98], rax
.text:0000000000005122                 mov     rax, [rsp+0A8h+arg_10]
.text:000000000000512A                 test    rax, rax
.text:000000000000512D                 mov     [rsp+0A8h+var_80], rax
.text:0000000000005132                 jz      loc_54D3
.text:0000000000005138                 test    r8, r8
.text:000000000000513B                 mov     [rsp+0A8h+var_58], r8
.text:0000000000005140                 mov     [rsp+0A8h+var_3C], r9d
.text:0000000000005145                 cmovz   r8, rcx
.text:0000000000005149                 mov     [rsp+0A8h+nbytes], rcx
.text:000000000000514E                 mov     [rsp+0A8h+buf], rdx
.text:0000000000005153                 mov     [rsp+0A8h+var_90], esi
.text:0000000000005157                 mov     [rsp+0A8h+fd], edi
.text:000000000000515B                 xor     r13d, r13d
.text:000000000000515E                 mov     [rsp+0A8h+var_60], r8
.text:0000000000005163                 xor     r15d, r15d
.text:0000000000005166
.text:0000000000005166 loc_5166:                               ; CODE XREF: sparse_copy+C7↓j
.text:0000000000005166                                         ; sparse_copy+249↓j
.text:0000000000005166                 mov     rax, [rsp+0A8h+nbytes]
.text:000000000000516B                 mov     rdx, [rsp+0A8h+var_80]
.text:0000000000005170                 mov     rsi, [rsp+0A8h+buf] ; buf
.text:0000000000005175                 mov     edi, [rsp+0A8h+fd] ; fd
.text:0000000000005179                 cmp     rax, rdx
.text:000000000000517C                 cmovbe  rdx, rax        ; nbytes
.text:0000000000005180                 call    _read
.text:0000000000005185                 test    rax, rax
.text:0000000000005188                 mov     [rsp+0A8h+var_78], rax
.text:000000000000518D                 jns     short loc_51F0
.text:000000000000518F                 call    ___errno_location
.text:0000000000005194                 cmp     dword ptr [rax], 4
.text:0000000000005197                 jz      short loc_5166
.text:0000000000005199                 mov     rsi, [rsp+0A8h+var_50]
.text:000000000000519E                 mov     edi, 4
.text:00000000000051A3                 mov     rbx, rax
.text:00000000000051A6                 xor     r15d, r15d
.text:00000000000051A9                 call    quotearg_style
.text:00000000000051AE                 lea     rsi, aErrorReadingS ; "error reading %s"
.text:00000000000051B5                 mov     edx, 5          ; category
.text:00000000000051BA                 xor     edi, edi        ; domainname
.text:00000000000051BC                 mov     rbp, rax
.text:00000000000051BF                 call    _dcgettext
.text:00000000000051C4                 mov     esi, [rbx]      ; errnum
.text:00000000000051C6                 mov     rdx, rax        ; format
.text:00000000000051C9                 mov     rcx, rbp
.text:00000000000051CC                 xor     edi, edi        ; status
.text:00000000000051CE                 xor     eax, eax
.text:00000000000051D0                 call    _error
.text:00000000000051D5
.text:00000000000051D5 loc_51D5:                               ; CODE XREF: sparse_copy+2CE↓j
.text:00000000000051D5                                         ; sparse_copy+3A9↓j ...
.text:00000000000051D5                 add     rsp, 78h
.text:00000000000051D9                 mov     eax, r15d
.text:00000000000051DC                 pop     rbx
.text:00000000000051DD                 pop     rbp
.text:00000000000051DE                 pop     r12
.text:00000000000051E0                 pop     r13
.text:00000000000051E2                 pop     r14
.text:00000000000051E4                 pop     r15
.text:00000000000051E6                 retn
.text:00000000000051E6 ; ---------------------------------------------------------------------------
.text:00000000000051E7                 align 10h
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: sparse_copy+BD↑j
.text:00000000000051F0                 jz      loc_531F
.text:00000000000051F6                 mov     rax, [rsp+0A8h+var_68]
.text:00000000000051FB                 mov     rbp, [rsp+0A8h+var_78]
.text:0000000000005200                 mov     ecx, r15d
.text:0000000000005203                 mov     r14, [rsp+0A8h+buf]
.text:0000000000005208                 mov     r10, [rsp+0A8h+var_60]
.text:000000000000520D                 add     [rax], rbp
.text:0000000000005210                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000005216                 mov     r11, r14
.text:0000000000005219                 mov     r15, r10
.text:000000000000521C                 setnz   [rsp+0A8h+var_8B]
.text:0000000000005221                 nop     dword ptr [rax+00000000h]
.text:0000000000005228
.text:0000000000005228 loc_5228:                               ; CODE XREF: sparse_copy+306↓j
.text:0000000000005228                 cmp     rbp, r15
.text:000000000000522B                 mov     rbx, r15
.text:000000000000522E                 cmovbe  rbx, rbp
.text:0000000000005232                 test    rbx, rbx
.text:0000000000005235                 setnz   r12b
.text:0000000000005239                 and     r12b, [rsp+0A8h+var_8B]
.text:000000000000523E                 jz      loc_5350
.text:0000000000005244                 mov     rsi, r14
.text:0000000000005247                 mov     rdx, rbx
.text:000000000000524A
.text:000000000000524A loc_524A:                               ; CODE XREF: sparse_copy+194↓j
.text:000000000000524A                 cmp     byte ptr [rsi], 0
.text:000000000000524D                 jnz     loc_5480
.text:0000000000005253                 add     rsi, 1          ; s2
.text:0000000000005257                 sub     rdx, 1          ; n
.text:000000000000525B                 jz      loc_53E8
.text:0000000000005261                 test    dl, 0Fh
.text:0000000000005264                 jnz     short loc_524A
.text:0000000000005266                 mov     rdi, r14        ; s1
.text:0000000000005269                 mov     [rsp+0A8h+var_A0], r11
.text:000000000000526E                 mov     [rsp+0A8h+var_8A], cl
.text:0000000000005272                 call    _memcmp
.text:0000000000005277                 movzx   ecx, [rsp+0A8h+var_8A]
.text:000000000000527C                 test    eax, eax
.text:000000000000527E                 mov     r11, [rsp+0A8h+var_A0]
.text:0000000000005283                 setz    r12b
.text:0000000000005287                 mov     edx, r12d
.text:000000000000528A                 xor     edx, ecx
.text:000000000000528C                 test    eax, eax
.text:000000000000528E                 setnz   al
.text:0000000000005291
.text:0000000000005291 loc_5291:                               ; CODE XREF: sparse_copy+3B8↓j
.text:0000000000005291                 test    r13, r13
.text:0000000000005294                 setnz   r9b
.text:0000000000005298                 and     r9d, edx
.text:000000000000529B                 cmp     rbp, r15
.text:000000000000529E                 ja      loc_53F8
.text:00000000000052A4                 test    al, al
.text:00000000000052A6                 jz      loc_53F8
.text:00000000000052AC                 test    r9b, r9b
.text:00000000000052AF                 jz      loc_535A
.text:00000000000052B5                 mov     r15d, 1
.text:00000000000052BB
.text:00000000000052BB loc_52BB:                               ; CODE XREF: sparse_copy+330↓j
.text:00000000000052BB                 test    cl, cl
.text:00000000000052BD                 mov     [rsp+0A8h+var_8A], cl
.text:00000000000052C1                 jnz     loc_5372
.text:00000000000052C7
.text:00000000000052C7 loc_52C7:                               ; CODE XREF: sparse_copy+29C↓j
.text:00000000000052C7                 mov     edi, [rsp+0A8h+var_90] ; fd
.text:00000000000052CB                 mov     rdx, r13        ; n
.text:00000000000052CE                 mov     rsi, r11        ; buf
.text:00000000000052D1                 mov     byte ptr [rsp+0A8h+var_A0], r9b
.text:00000000000052D6                 call    full_write
.text:00000000000052DB                 cmp     r13, rax
.text:00000000000052DE                 movzx   r9d, byte ptr [rsp+0A8h+var_A0]
.text:00000000000052E4                 movzx   ecx, [rsp+0A8h+var_8A]
.text:00000000000052E9                 jnz     loc_548D
.text:00000000000052EF
.text:00000000000052EF loc_52EF:                               ; CODE XREF: sparse_copy+2C5↓j
.text:00000000000052EF                 test    r15d, r15d
.text:00000000000052F2                 mov     r13, rbx
.text:00000000000052F5                 jz      loc_5408
.text:00000000000052FB                 test    rbx, rbx
.text:00000000000052FE                 jnz     loc_5420
.text:0000000000005304
.text:0000000000005304 loc_5304:                               ; CODE XREF: sparse_copy+30F↓j
.text:0000000000005304                 mov     rdi, [rsp+0A8h+var_78]
.text:0000000000005309                 sub     [rsp+0A8h+var_80], rdi
.text:000000000000530E                 mov     r15d, r12d
.text:0000000000005311                 mov     rax, [rsp+0A8h+var_48]
.text:0000000000005316                 mov     [rax], r12b
.text:0000000000005319                 jnz     loc_5166
.text:000000000000531F
.text:000000000000531F loc_531F:                               ; CODE XREF: sparse_copy:loc_51F0↑j
.text:000000000000531F                 test    r15b, r15b
.text:0000000000005322                 jz      loc_54D3
.text:0000000000005328                 movzx   edx, byte ptr [rsp+0A8h+var_3C]
.text:000000000000532D                 mov     rsi, [rsp+0A8h+var_98]
.text:0000000000005332                 mov     rcx, r13
.text:0000000000005335                 mov     edi, [rsp+0A8h+var_90]
.text:0000000000005339                 add     rsp, 78h
.text:000000000000533D                 pop     rbx
.text:000000000000533E                 pop     rbp
.text:000000000000533F                 pop     r12
.text:0000000000005341                 pop     r13
.text:0000000000005343                 pop     r14
.text:0000000000005345                 pop     r15
.text:0000000000005347                 jmp     create_hole
.text:0000000000005347 ; ---------------------------------------------------------------------------
.text:000000000000534C                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: sparse_copy+16E↑j
.text:0000000000005350                 cmp     cl, 1
.text:0000000000005353                 jz      short loc_53A8
.text:0000000000005355                 cmp     rbp, r15
.text:0000000000005358                 ja      short loc_53A8
.text:000000000000535A
.text:000000000000535A loc_535A:                               ; CODE XREF: sparse_copy+1DF↑j
.text:000000000000535A                                         ; sparse_copy+2E0↓j
.text:000000000000535A                 add     r13, rbx
.text:000000000000535D                 xor     r9d, r9d
.text:0000000000005360                 test    cl, cl
.text:0000000000005362                 mov     r15d, 1
.text:0000000000005368                 mov     [rsp+0A8h+var_8A], cl
.text:000000000000536C                 jz      loc_52C7
.text:0000000000005372
.text:0000000000005372 loc_5372:                               ; CODE XREF: sparse_copy+1F1↑j
.text:0000000000005372                 movzx   edx, [rsp+0A8h+var_89]
.text:0000000000005377                 mov     rsi, [rsp+0A8h+var_98]
.text:000000000000537C                 mov     rcx, r13
.text:000000000000537F                 mov     edi, [rsp+0A8h+var_90]
.text:0000000000005383                 mov     [rsp+0A8h+var_8A], r9b
.text:0000000000005388                 call    create_hole
.text:000000000000538D                 test    al, al
.text:000000000000538F                 movzx   r9d, [rsp+0A8h+var_8A]
.text:0000000000005395                 jnz     loc_52EF
.text:000000000000539B                 mov     r15d, eax
.text:000000000000539E                 jmp     loc_51D5
.text:000000000000539E ; ---------------------------------------------------------------------------
.text:00000000000053A3                 align 8
.text:00000000000053A8
.text:00000000000053A8 loc_53A8:                               ; CODE XREF: sparse_copy+283↑j
.text:00000000000053A8                                         ; sparse_copy+288↑j
.text:00000000000053A8                 test    rbx, rbx
.text:00000000000053AB                 jnz     short loc_53B8
.text:00000000000053AD                 mov     r12d, ecx
.text:00000000000053B0                 jmp     short loc_535A
.text:00000000000053B2 ; ---------------------------------------------------------------------------
.text:00000000000053B2
.text:00000000000053B2 loc_53B2:                               ; CODE XREF: sparse_copy+32B↓j
.text:00000000000053B2                 mov     ecx, r12d
.text:00000000000053B5                 nop     dword ptr [rax]
.text:00000000000053B8
.text:00000000000053B8 loc_53B8:                               ; CODE XREF: sparse_copy+2DB↑j
.text:00000000000053B8                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:00000000000053C2                 sub     rax, rbx
.text:00000000000053C5                 cmp     rax, r13
.text:00000000000053C8                 jb      short loc_5440
.text:00000000000053CA                 add     r13, rbx
.text:00000000000053CD                 add     r14, rbx
.text:00000000000053D0                 mov     r15, rbx
.text:00000000000053D3
.text:00000000000053D3 loc_53D3:                               ; CODE XREF: sparse_copy+344↓j
.text:00000000000053D3                                         ; sparse_copy+35C↓j ...
.text:00000000000053D3                 sub     rbp, r15
.text:00000000000053D6                 jnz     loc_5228
.text:00000000000053DC                 mov     r12d, ecx
.text:00000000000053DF                 jmp     loc_5304
.text:00000000000053DF ; ---------------------------------------------------------------------------
.text:00000000000053E4                 align 8
.text:00000000000053E8
.text:00000000000053E8 loc_53E8:                               ; CODE XREF: sparse_copy+18B↑j
.text:00000000000053E8                 mov     r9d, ecx
.text:00000000000053EB                 xor     r9d, 1
.text:00000000000053EF                 test    r13, r13
.text:00000000000053F2                 setnz   al
.text:00000000000053F5                 and     r9d, eax
.text:00000000000053F8
.text:00000000000053F8 loc_53F8:                               ; CODE XREF: sparse_copy+1CE↑j
.text:00000000000053F8                                         ; sparse_copy+1D6↑j
.text:00000000000053F8                 test    r9b, r9b
.text:00000000000053FB                 jz      short loc_53B2
.text:00000000000053FD                 xor     r15d, r15d
.text:0000000000005400                 jmp     loc_52BB
.text:0000000000005400 ; ---------------------------------------------------------------------------
.text:0000000000005405                 align 8
.text:0000000000005408
.text:0000000000005408 loc_5408:                               ; CODE XREF: sparse_copy+225↑j
.text:0000000000005408                 mov     r11, r14
.text:000000000000540B                 mov     ecx, r12d
.text:000000000000540E                 add     r14, rbx
.text:0000000000005411                 mov     r15, rbx
.text:0000000000005414                 jmp     short loc_53D3
.text:0000000000005414 ; ---------------------------------------------------------------------------
.text:0000000000005416                 align 20h
.text:0000000000005420
.text:0000000000005420 loc_5420:                               ; CODE XREF: sparse_copy+22E↑j
.text:0000000000005420                 xor     r15d, r15d
.text:0000000000005423                 test    r9b, r9b
.text:0000000000005426                 mov     ecx, r12d
.text:0000000000005429                 mov     r11, r14
.text:000000000000542C                 jnz     short loc_53D3
.text:000000000000542E                 add     r14, rbx
.text:0000000000005431                 mov     r15, rbx
.text:0000000000005434                 xor     r13d, r13d
.text:0000000000005437                 jmp     short loc_53D3
.text:0000000000005437 ; ---------------------------------------------------------------------------
.text:0000000000005439                 align 20h
.text:0000000000005440
.text:0000000000005440 loc_5440:                               ; CODE XREF: sparse_copy+2F8↑j
.text:0000000000005440                 mov     rsi, [rsp+0A8h+var_50]
.text:0000000000005445                 mov     edi, 4
.text:000000000000544A                 xor     r15d, r15d
.text:000000000000544D                 call    quotearg_style
.text:0000000000005452                 lea     rsi, aOverflowReadin ; "overflow reading %s"
.text:0000000000005459                 mov     rbx, rax
.text:000000000000545C                 mov     edx, 5          ; category
.text:0000000000005461                 xor     edi, edi        ; domainname
.text:0000000000005463                 call    _dcgettext
.text:0000000000005468                 mov     rcx, rbx
.text:000000000000546B                 mov     rdx, rax        ; format
.text:000000000000546E                 xor     esi, esi        ; errnum
.text:0000000000005470                 xor     edi, edi        ; status
.text:0000000000005472                 xor     eax, eax
.text:0000000000005474                 call    _error
.text:0000000000005479                 jmp     loc_51D5
.text:0000000000005479 ; ---------------------------------------------------------------------------
.text:000000000000547E                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: sparse_copy+17D↑j
.text:0000000000005480                 mov     eax, r12d
.text:0000000000005483                 mov     edx, ecx
.text:0000000000005485                 xor     r12d, r12d
.text:0000000000005488                 jmp     loc_5291
.text:000000000000548D ; ---------------------------------------------------------------------------
.text:000000000000548D
.text:000000000000548D loc_548D:                               ; CODE XREF: sparse_copy+219↑j
.text:000000000000548D                 mov     rsi, [rsp+0A8h+var_98]
.text:0000000000005492                 mov     edi, 4
.text:0000000000005497                 mov     r15d, ecx
.text:000000000000549A                 call    quotearg_style
.text:000000000000549F                 lea     rsi, aErrorWritingS ; "error writing %s"
.text:00000000000054A6                 xor     edi, edi        ; domainname
.text:00000000000054A8                 mov     edx, 5          ; category
.text:00000000000054AD                 mov     rbp, rax
.text:00000000000054B0                 call    _dcgettext
.text:00000000000054B5                 mov     rbx, rax
.text:00000000000054B8                 call    ___errno_location
.text:00000000000054BD                 mov     esi, [rax]      ; errnum
.text:00000000000054BF                 mov     rcx, rbp
.text:00000000000054C2                 mov     rdx, rbx        ; format
.text:00000000000054C5                 xor     edi, edi        ; status
.text:00000000000054C7                 xor     eax, eax
.text:00000000000054C9                 call    _error
.text:00000000000054CE                 jmp     loc_51D5
.text:00000000000054D3 ; ---------------------------------------------------------------------------
.text:00000000000054D3
.text:00000000000054D3 loc_54D3:                               ; CODE XREF: sparse_copy+62↑j
.text:00000000000054D3                                         ; sparse_copy+252↑j
.text:00000000000054D3                 mov     r15d, 1
.text:00000000000054D9                 jmp     loc_51D5
.text:00000000000054D9 ; } // starts at 50D0
.text:00000000000054D9 sparse_copy     endp
.text:00000000000054D9
.text:00000000000054D9 ; ---------------------------------------------------------------------------
.text:00000000000054DE                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0
.text:00000000000054E0                 public set_process_security_ctx
.text:00000000000054E0 set_process_security_ctx proc near      ; CODE XREF: copy_internal+511↓p
.text:00000000000054E0                                         ; copy_internal+B15↓p ...
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 push    r13
.text:00000000000054E2                 push    r12
.text:00000000000054E4                 push    rbp
.text:00000000000054E5                 push    rbx
.text:00000000000054E6                 mov     rbp, r8
.text:00000000000054E9                 sub     rsp, 8
.text:00000000000054ED                 cmp     byte ptr [r8+25h], 0
.text:00000000000054F2                 jz      short loc_5560
.text:00000000000054F4                 mov     r13, rdi
.text:00000000000054F7                 call    ___errno_location
.text:00000000000054FC                 cmp     byte ptr [rbp+23h], 0
.text:0000000000005500                 mov     r12, rax
.text:0000000000005503                 jnz     short loc_5580
.text:0000000000005505
.text:0000000000005505 loc_5505:                               ; CODE XREF: set_process_security_ctx+A6↓j
.text:0000000000005505                 mov     rsi, r13
.text:0000000000005508                 mov     edi, 4
.text:000000000000550D                 mov     dword ptr [r12], 5Fh ; '_'
.text:0000000000005515                 call    quotearg_style
.text:000000000000551A                 lea     rsi, aFailedToGetSec ; "failed to get security context of %s"
.text:0000000000005521                 mov     edx, 5          ; category
.text:0000000000005526                 xor     edi, edi        ; domainname
.text:0000000000005528                 mov     rbx, rax
.text:000000000000552B                 call    _dcgettext
.text:0000000000005530                 mov     esi, [r12]      ; errnum
.text:0000000000005534                 mov     rcx, rbx
.text:0000000000005537                 mov     rdx, rax        ; format
.text:000000000000553A                 xor     edi, edi        ; status
.text:000000000000553C                 xor     eax, eax
.text:000000000000553E                 call    _error
.text:0000000000005543                 movzx   ebx, byte ptr [rbp+26h]
.text:0000000000005547
.text:0000000000005547 loc_5547:                               ; CODE XREF: set_process_security_ctx+B2↓j
.text:0000000000005547                 add     rsp, 8
.text:000000000000554B                 xor     ebx, 1
.text:000000000000554E                 mov     eax, ebx
.text:0000000000005550                 pop     rbx
.text:0000000000005551                 pop     rbp
.text:0000000000005552                 pop     r12
.text:0000000000005554                 pop     r13
.text:0000000000005556                 retn
.text:0000000000005556 ; ---------------------------------------------------------------------------
.text:0000000000005557                 align 20h
.text:0000000000005560
.text:0000000000005560 loc_5560:                               ; CODE XREF: set_process_security_ctx+12↑j
.text:0000000000005560                 mov     ebx, ecx
.text:0000000000005562                 and     bl, [r8+21h]
.text:0000000000005566                 jnz     short loc_5598
.text:0000000000005568                 add     rsp, 8
.text:000000000000556C                 mov     ebx, 1
.text:0000000000005571                 mov     eax, ebx
.text:0000000000005573                 pop     rbx
.text:0000000000005574                 pop     rbp
.text:0000000000005575                 pop     r12
.text:0000000000005577                 pop     r13
.text:0000000000005579                 retn
.text:0000000000005579 ; ---------------------------------------------------------------------------
.text:000000000000557A                 align 20h
.text:0000000000005580
.text:0000000000005580 loc_5580:                               ; CODE XREF: set_process_security_ctx+23↑j
.text:0000000000005580                 movzx   ebx, byte ptr [rbp+26h]
.text:0000000000005584                 test    bl, bl
.text:0000000000005586                 jnz     loc_5505
.text:000000000000558C                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000005592                 jmp     short loc_5547
.text:0000000000005592 ; ---------------------------------------------------------------------------
.text:0000000000005594                 align 8
.text:0000000000005598
.text:0000000000005598 loc_5598:                               ; CODE XREF: set_process_security_ctx+86↑j
.text:0000000000005598                 call    ___errno_location
.text:000000000000559D                 mov     dword ptr [rax], 5Fh ; '_'
.text:00000000000055A3                 add     rsp, 8
.text:00000000000055A7                 mov     eax, ebx
.text:00000000000055A9                 pop     rbx
.text:00000000000055AA                 pop     rbp
.text:00000000000055AB                 pop     r12
.text:00000000000055AD                 pop     r13
.text:00000000000055AF                 retn
.text:00000000000055AF ; } // starts at 54E0
.text:00000000000055AF set_process_security_ctx endp
.text:00000000000055AF
.text:00000000000055B0
.text:00000000000055B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055B0
.text:00000000000055B0
.text:00000000000055B0                 public set_file_security_ctx
.text:00000000000055B0 set_file_security_ctx proc near         ; CODE XREF: copy_internal+1381↓p
.text:00000000000055B0                                         ; copy_internal+22FE↓p ...
.text:00000000000055B0 ; __unwind {
.text:00000000000055B0                 push    r12
.text:00000000000055B2                 push    rbp
.text:00000000000055B3                 mov     rbp, rcx
.text:00000000000055B6                 push    rbx
.text:00000000000055B7                 mov     r12, rdi
.text:00000000000055BA                 call    ___errno_location
.text:00000000000055BF                 cmp     byte ptr [rbp+23h], 0
.text:00000000000055C3                 mov     rbx, rax
.text:00000000000055C6                 jz      short loc_55CE
.text:00000000000055C8                 cmp     byte ptr [rbp+26h], 0
.text:00000000000055CC                 jz      short loc_5618
.text:00000000000055CE
.text:00000000000055CE loc_55CE:                               ; CODE XREF: set_file_security_ctx+16↑j
.text:00000000000055CE                 mov     rdx, r12
.text:00000000000055D1                 mov     dword ptr [rbx], 5Fh ; '_'
.text:00000000000055D7                 mov     esi, 4
.text:00000000000055DC                 xor     edi, edi
.text:00000000000055DE                 call    quotearg_n_style
.text:00000000000055E3                 lea     rsi, aFailedToSetThe ; "failed to set the security context of %"...
.text:00000000000055EA                 mov     edx, 5          ; category
.text:00000000000055EF                 xor     edi, edi        ; domainname
.text:00000000000055F1                 mov     rbp, rax
.text:00000000000055F4                 call    _dcgettext
.text:00000000000055F9                 mov     esi, [rbx]      ; errnum
.text:00000000000055FB                 mov     rcx, rbp
.text:00000000000055FE                 mov     rdx, rax        ; format
.text:0000000000005601                 xor     edi, edi        ; status
.text:0000000000005603                 xor     eax, eax
.text:0000000000005605                 call    _error
.text:000000000000560A                 pop     rbx
.text:000000000000560B                 xor     eax, eax
.text:000000000000560D                 pop     rbp
.text:000000000000560E                 pop     r12
.text:0000000000005610                 retn
.text:0000000000005610 ; ---------------------------------------------------------------------------
.text:0000000000005611                 align 8
.text:0000000000005618
.text:0000000000005618 loc_5618:                               ; CODE XREF: set_file_security_ctx+1C↑j
.text:0000000000005618                 mov     dword ptr [rax], 5Fh ; '_'
.text:000000000000561E                 xor     eax, eax
.text:0000000000005620                 pop     rbx
.text:0000000000005621                 pop     rbp
.text:0000000000005622                 pop     r12
.text:0000000000005624                 retn
.text:0000000000005624 ; } // starts at 55B0
.text:0000000000005624 set_file_security_ctx endp
.text:0000000000005624
.text:0000000000005624 ; ---------------------------------------------------------------------------
.text:0000000000005625                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630
.text:0000000000005630                 public dest_info_init
.text:0000000000005630 dest_info_init  proc near               ; CODE XREF: main+497↑p
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 lea     r8, triple_free
.text:0000000000005637                 lea     rcx, triple_compare
.text:000000000000563E                 xor     esi, esi
.text:0000000000005640                 lea     rdx, triple_hash
.text:0000000000005647                 push    rbx
.text:0000000000005648                 mov     rbx, rdi
.text:000000000000564B                 mov     edi, 3Dh ; '='
.text:0000000000005650                 call    hash_initialize
.text:0000000000005655                 mov     [rbx+40h], rax
.text:0000000000005659                 pop     rbx
.text:000000000000565A                 retn
.text:000000000000565A ; } // starts at 5630
.text:000000000000565A dest_info_init  endp
.text:000000000000565A
.text:000000000000565A ; ---------------------------------------------------------------------------
.text:000000000000565B                 align 20h
.text:0000000000005660
.text:0000000000005660 ; =============== S U B R O U T I N E =======================================
.text:0000000000005660
.text:0000000000005660
.text:0000000000005660                 public src_info_init
.text:0000000000005660 src_info_init   proc near
.text:0000000000005660 ; __unwind {
.text:0000000000005660                 lea     r8, triple_free
.text:0000000000005667                 lea     rcx, triple_compare
.text:000000000000566E                 xor     esi, esi
.text:0000000000005670                 lea     rdx, triple_hash_no_name
.text:0000000000005677                 push    rbx
.text:0000000000005678                 mov     rbx, rdi
.text:000000000000567B                 mov     edi, 3Dh ; '='
.text:0000000000005680                 call    hash_initialize
.text:0000000000005685                 mov     [rbx+48h], rax
.text:0000000000005689                 pop     rbx
.text:000000000000568A                 retn
.text:000000000000568A ; } // starts at 5660
.text:000000000000568A src_info_init   endp
.text:000000000000568A
.text:000000000000568A ; ---------------------------------------------------------------------------
.text:000000000000568B                 align 10h
.text:0000000000005690
.text:0000000000005690 ; =============== S U B R O U T I N E =======================================
.text:0000000000005690
.text:0000000000005690
.text:0000000000005690                 public cp_options_default
.text:0000000000005690 cp_options_default proc near            ; CODE XREF: main+75↑p
.text:0000000000005690 ; __unwind {
.text:0000000000005690                 pxor    xmm0, xmm0
.text:0000000000005694                 push    rbx
.text:0000000000005695                 mov     rbx, rdi
.text:0000000000005698                 movups  xmmword ptr [rdi], xmm0
.text:000000000000569B                 movups  xmmword ptr [rdi+10h], xmm0
.text:000000000000569F                 movups  xmmword ptr [rdi+20h], xmm0
.text:00000000000056A3                 movups  xmmword ptr [rdi+30h], xmm0
.text:00000000000056A7                 movups  xmmword ptr [rdi+40h], xmm0
.text:00000000000056AB                 call    _geteuid
.text:00000000000056B0                 test    eax, eax
.text:00000000000056B2                 mov     dword ptr [rbx+34h], 0FFFFFFFFh
.text:00000000000056B9                 setz    al
.text:00000000000056BC                 mov     [rbx+1Bh], al
.text:00000000000056BF                 mov     [rbx+1Ah], al
.text:00000000000056C2                 pop     rbx
.text:00000000000056C3                 retn
.text:00000000000056C3 ; } // starts at 5690
.text:00000000000056C3 cp_options_default endp
.text:00000000000056C3
.text:00000000000056C3 ; ---------------------------------------------------------------------------
.text:00000000000056C4                 align 10h
.text:00000000000056D0
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0
.text:00000000000056D0
.text:00000000000056D0                 public chown_failure_ok
.text:00000000000056D0 chown_failure_ok proc near              ; CODE XREF: set_owner+8D↓p
.text:00000000000056D0                                         ; copy_internal+37B5↓p
.text:00000000000056D0 ; __unwind {
.text:00000000000056D0                 push    rbx
.text:00000000000056D1                 mov     rbx, rdi
.text:00000000000056D4                 call    ___errno_location
.text:00000000000056D9                 mov     edx, [rax]
.text:00000000000056DB                 cmp     edx, 1
.text:00000000000056DE                 setz    al
.text:00000000000056E1                 cmp     edx, 16h
.text:00000000000056E4                 setz    dl
.text:00000000000056E7                 or      al, dl
.text:00000000000056E9                 jz      short loc_56F2
.text:00000000000056EB                 movzx   eax, byte ptr [rbx+1Ah]
.text:00000000000056EF                 xor     eax, 1
.text:00000000000056F2
.text:00000000000056F2 loc_56F2:                               ; CODE XREF: chown_failure_ok+19↑j
.text:00000000000056F2                 pop     rbx
.text:00000000000056F3                 retn
.text:00000000000056F3 ; } // starts at 56D0
.text:00000000000056F3 chown_failure_ok endp
.text:00000000000056F3
.text:00000000000056F3 ; ---------------------------------------------------------------------------
.text:00000000000056F4                 align 20h
.text:0000000000005700
.text:0000000000005700 ; =============== S U B R O U T I N E =======================================
.text:0000000000005700
.text:0000000000005700
.text:0000000000005700 set_owner       proc near               ; CODE XREF: copy_internal+723↓p
.text:0000000000005700                                         ; copy_internal+3608↓p
.text:0000000000005700 ; __unwind {
.text:0000000000005700                 push    r15
.text:0000000000005702                 push    r14
.text:0000000000005704                 push    r13
.text:0000000000005706                 push    r12
.text:0000000000005708                 mov     r13, rsi
.text:000000000000570B                 push    rbp
.text:000000000000570C                 push    rbx
.text:000000000000570D                 mov     rbp, rdi
.text:0000000000005710                 mov     ebx, edx
.text:0000000000005712                 sub     rsp, 8
.text:0000000000005716                 test    r8b, r8b
.text:0000000000005719                 mov     r14d, [rcx+1Ch]
.text:000000000000571D                 mov     r12d, [rcx+20h]
.text:0000000000005721                 jnz     short loc_5755
.text:0000000000005723                 mov     rax, 0FF0000000000FFh
.text:000000000000572D                 test    [rdi+18h], rax
.text:0000000000005731                 jz      loc_57D0
.text:0000000000005737                 mov     esi, [r9+18h]
.text:000000000000573B                 mov     edx, [rcx+18h]
.text:000000000000573E
.text:000000000000573E loc_573E:                               ; CODE XREF: set_owner+E1↓j
.text:000000000000573E                 mov     eax, edx
.text:0000000000005740                 mov     ecx, esi
.text:0000000000005742                 not     eax
.text:0000000000005744                 and     ecx, 0FFFh
.text:000000000000574A                 or      ah, 0Eh
.text:000000000000574D                 test    eax, ecx
.text:000000000000574F                 jnz     loc_5820
.text:0000000000005755
.text:0000000000005755 loc_5755:                               ; CODE XREF: set_owner+21↑j
.text:0000000000005755                                         ; set_owner+D4↓j ...
.text:0000000000005755                 cmp     ebx, 0FFFFFFFFh
.text:0000000000005758                 mov     edx, r12d       ; group
.text:000000000000575B                 mov     esi, r14d       ; owner
.text:000000000000575E                 jz      short loc_57B0
.text:0000000000005760                 mov     edi, ebx        ; fd
.text:0000000000005762                 call    _fchown
.text:0000000000005767                 test    eax, eax
.text:0000000000005769                 jz      short loc_57BC
.text:000000000000576B                 call    ___errno_location
.text:0000000000005770                 mov     r14d, [rax]
.text:0000000000005773                 mov     r15, rax
.text:0000000000005776                 cmp     r14d, 1
.text:000000000000577A                 jz      loc_58E8
.text:0000000000005780                 cmp     r14d, 16h
.text:0000000000005784                 jz      loc_58E8
.text:000000000000578A
.text:000000000000578A loc_578A:                               ; CODE XREF: set_owner+102↓j
.text:000000000000578A                                         ; set_owner+11B↓j ...
.text:000000000000578A                 mov     rdi, rbp
.text:000000000000578D                 call    chown_failure_ok
.text:0000000000005792                 mov     edx, eax
.text:0000000000005794                 xor     eax, eax
.text:0000000000005796                 test    dl, dl
.text:0000000000005798                 jz      loc_5890
.text:000000000000579E                 add     rsp, 8
.text:00000000000057A2                 pop     rbx
.text:00000000000057A3                 pop     rbp
.text:00000000000057A4                 pop     r12
.text:00000000000057A6                 pop     r13
.text:00000000000057A8                 pop     r14
.text:00000000000057AA                 pop     r15
.text:00000000000057AC                 retn
.text:00000000000057AC ; ---------------------------------------------------------------------------
.text:00000000000057AD                 align 10h
.text:00000000000057B0
.text:00000000000057B0 loc_57B0:                               ; CODE XREF: set_owner+5E↑j
.text:00000000000057B0                 mov     rdi, r13        ; file
.text:00000000000057B3                 call    _lchown
.text:00000000000057B8                 test    eax, eax
.text:00000000000057BA                 jnz     short loc_57F0
.text:00000000000057BC
.text:00000000000057BC loc_57BC:                               ; CODE XREF: set_owner+69↑j
.text:00000000000057BC                 add     rsp, 8
.text:00000000000057C0                 mov     eax, 1
.text:00000000000057C5                 pop     rbx
.text:00000000000057C6                 pop     rbp
.text:00000000000057C7                 pop     r12
.text:00000000000057C9                 pop     r13
.text:00000000000057CB                 pop     r14
.text:00000000000057CD                 pop     r15
.text:00000000000057CF                 retn
.text:00000000000057D0 ; ---------------------------------------------------------------------------
.text:00000000000057D0
.text:00000000000057D0 loc_57D0:                               ; CODE XREF: set_owner+31↑j
.text:00000000000057D0                 cmp     byte ptr [rdi+2Bh], 0
.text:00000000000057D4                 jz      loc_5755
.text:00000000000057DA                 mov     esi, [r9+18h]
.text:00000000000057DE                 mov     edx, [rdi+10h]
.text:00000000000057E1                 jmp     loc_573E
.text:00000000000057E1 ; ---------------------------------------------------------------------------
.text:00000000000057E6                 align 10h
.text:00000000000057F0
.text:00000000000057F0 loc_57F0:                               ; CODE XREF: set_owner+BA↑j
.text:00000000000057F0                 call    ___errno_location
.text:00000000000057F5                 mov     ebx, [rax]
.text:00000000000057F7                 mov     r14, rax
.text:00000000000057FA                 cmp     ebx, 1
.text:00000000000057FD                 jz      short loc_5808
.text:00000000000057FF                 cmp     ebx, 16h
.text:0000000000005802                 jnz     loc_578A
.text:0000000000005808
.text:0000000000005808 loc_5808:                               ; CODE XREF: set_owner+FD↑j
.text:0000000000005808                 mov     edx, r12d       ; group
.text:000000000000580B                 mov     esi, 0FFFFFFFFh ; owner
.text:0000000000005810                 mov     rdi, r13        ; file
.text:0000000000005813                 call    _lchown
.text:0000000000005818                 mov     [r14], ebx
.text:000000000000581B                 jmp     loc_578A
.text:0000000000005820 ; ---------------------------------------------------------------------------
.text:0000000000005820
.text:0000000000005820 loc_5820:                               ; CODE XREF: set_owner+4F↑j
.text:0000000000005820                 and     edx, esi
.text:0000000000005822                 mov     rdi, r13
.text:0000000000005825                 mov     esi, ebx
.text:0000000000005827                 and     edx, 1C0h
.text:000000000000582D                 call    qset_acl
.text:0000000000005832                 test    eax, eax
.text:0000000000005834                 jz      loc_5755
.text:000000000000583A                 call    ___errno_location
.text:000000000000583F                 mov     rbx, rax
.text:0000000000005842                 mov     eax, [rax]
.text:0000000000005844                 cmp     eax, 1
.text:0000000000005847                 jz      loc_5900
.text:000000000000584D                 cmp     eax, 16h
.text:0000000000005850                 jz      loc_5900
.text:0000000000005856
.text:0000000000005856 loc_5856:                               ; CODE XREF: set_owner+204↓j
.text:0000000000005856                 mov     rsi, r13
.text:0000000000005859                 mov     edi, 4
.text:000000000000585E                 call    quotearg_style
.text:0000000000005863                 lea     rsi, aClearingPermis ; "clearing permissions for %s"
.text:000000000000586A                 xor     edi, edi        ; domainname
.text:000000000000586C                 mov     edx, 5          ; category
.text:0000000000005871                 mov     r12, rax
.text:0000000000005874                 call    _dcgettext
.text:0000000000005879                 mov     esi, [rbx]      ; errnum
.text:000000000000587B                 mov     rdx, rax        ; format
.text:000000000000587E                 mov     rcx, r12
.text:0000000000005881                 xor     edi, edi        ; status
.text:0000000000005883                 xor     eax, eax
.text:0000000000005885                 call    _error
.text:000000000000588A                 jmp     short loc_58CC
.text:000000000000588A ; ---------------------------------------------------------------------------
.text:000000000000588C                 align 10h
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: set_owner+98↑j
.text:0000000000005890                 mov     rsi, r13
.text:0000000000005893                 mov     edi, 4
.text:0000000000005898                 call    quotearg_style
.text:000000000000589D                 lea     rsi, aFailedToPreser ; "failed to preserve ownership for %s"
.text:00000000000058A4                 mov     edx, 5          ; category
.text:00000000000058A9                 xor     edi, edi        ; domainname
.text:00000000000058AB                 mov     r12, rax
.text:00000000000058AE                 call    _dcgettext
.text:00000000000058B3                 mov     rbx, rax
.text:00000000000058B6                 call    ___errno_location
.text:00000000000058BB                 mov     esi, [rax]      ; errnum
.text:00000000000058BD                 mov     rcx, r12
.text:00000000000058C0                 mov     rdx, rbx        ; format
.text:00000000000058C3                 xor     edi, edi        ; status
.text:00000000000058C5                 xor     eax, eax
.text:00000000000058C7                 call    _error
.text:00000000000058CC
.text:00000000000058CC loc_58CC:                               ; CODE XREF: set_owner+18A↑j
.text:00000000000058CC                                         ; set_owner+20A↓j
.text:00000000000058CC                 movzx   eax, byte ptr [rbp+24h]
.text:00000000000058D0                 add     rsp, 8
.text:00000000000058D4                 pop     rbx
.text:00000000000058D5                 pop     rbp
.text:00000000000058D6                 pop     r12
.text:00000000000058D8                 neg     eax
.text:00000000000058DA                 pop     r13
.text:00000000000058DC                 pop     r14
.text:00000000000058DE                 pop     r15
.text:00000000000058E0                 retn
.text:00000000000058E0 ; ---------------------------------------------------------------------------
.text:00000000000058E1                 align 8
.text:00000000000058E8
.text:00000000000058E8 loc_58E8:                               ; CODE XREF: set_owner+7A↑j
.text:00000000000058E8                                         ; set_owner+84↑j
.text:00000000000058E8                 mov     edx, r12d       ; group
.text:00000000000058EB                 mov     esi, 0FFFFFFFFh ; owner
.text:00000000000058F0                 mov     edi, ebx        ; fd
.text:00000000000058F2                 call    _fchown
.text:00000000000058F7                 mov     [r15], r14d
.text:00000000000058FA                 jmp     loc_578A
.text:00000000000058FA ; ---------------------------------------------------------------------------
.text:00000000000058FF                 align 20h
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: set_owner+147↑j
.text:0000000000005900                                         ; set_owner+150↑j
.text:0000000000005900                 cmp     byte ptr [rbp+1Bh], 0
.text:0000000000005904                 jnz     loc_5856
.text:000000000000590A                 jmp     short loc_58CC
.text:000000000000590A ; } // starts at 5700
.text:000000000000590A set_owner       endp
.text:000000000000590A
.text:000000000000590A ; ---------------------------------------------------------------------------
.text:000000000000590C                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910
.text:0000000000005910                 public cached_umask
.text:0000000000005910 cached_umask    proc near               ; CODE XREF: copy_internal:loc_8701↓p
.text:0000000000005910                                         ; copy_internal+2E26↓p ...
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 push    rbx
.text:0000000000005911                 mov     ebx, cs:mask_7898
.text:0000000000005917                 cmp     ebx, 0FFFFFFFFh
.text:000000000000591A                 jz      short loc_5920
.text:000000000000591C                 mov     eax, ebx
.text:000000000000591E                 pop     rbx
.text:000000000000591F                 retn
.text:0000000000005920 ; ---------------------------------------------------------------------------
.text:0000000000005920
.text:0000000000005920 loc_5920:                               ; CODE XREF: cached_umask+A↑j
.text:0000000000005920                 xor     edi, edi        ; mask
.text:0000000000005922                 call    _umask
.text:0000000000005927                 mov     ebx, eax
.text:0000000000005929                 mov     edi, eax        ; mask
.text:000000000000592B                 mov     cs:mask_7898, eax
.text:0000000000005931                 call    _umask
.text:0000000000005936                 mov     eax, ebx
.text:0000000000005938                 pop     rbx
.text:0000000000005939                 retn
.text:0000000000005939 ; } // starts at 5910
.text:0000000000005939 cached_umask    endp
.text:0000000000005939
.text:0000000000005939 ; ---------------------------------------------------------------------------
.text:000000000000593A                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940 ; Attributes: bp-based frame
.text:0000000000005940
.text:0000000000005940 copy_internal   proc near               ; CODE XREF: copy_internal+1EDD↓p
.text:0000000000005940                                         ; copy+80↓p
.text:0000000000005940
.text:0000000000005940 var_3E1         = byte ptr -3E1h
.text:0000000000005940 var_3C0         = qword ptr -3C0h
.text:0000000000005940 var_3B1         = byte ptr -3B1h
.text:0000000000005940 var_3B0         = qword ptr -3B0h
.text:0000000000005940 var_3A5         = byte ptr -3A5h
.text:0000000000005940 var_3A4         = dword ptr -3A4h
.text:0000000000005940 var_3A0         = qword ptr -3A0h
.text:0000000000005940 var_398         = qword ptr -398h
.text:0000000000005940 var_390         = dword ptr -390h
.text:0000000000005940 var_38C         = dword ptr -38Ch
.text:0000000000005940 var_388         = qword ptr -388h
.text:0000000000005940 length          = qword ptr -380h
.text:0000000000005940 var_378         = qword ptr -378h
.text:0000000000005940 var_370         = qword ptr -370h
.text:0000000000005940 s               = qword ptr -368h
.text:0000000000005940 var_360         = dword ptr -360h
.text:0000000000005940 var_35C         = dword ptr -35Ch
.text:0000000000005940 s2              = qword ptr -358h
.text:0000000000005940 old             = qword ptr -350h
.text:0000000000005940 var_348         = qword ptr -348h
.text:0000000000005940 var_340         = qword ptr -340h
.text:0000000000005940 format          = qword ptr -338h
.text:0000000000005940 ptr             = qword ptr -330h
.text:0000000000005940 fd              = dword ptr -328h
.text:0000000000005940 fildes          = dword ptr -320h
.text:0000000000005940 var_315         = byte ptr -315h
.text:0000000000005940 var_314         = dword ptr -314h
.text:0000000000005940 filename        = qword ptr -310h
.text:0000000000005940 file            = qword ptr -308h
.text:0000000000005940 var_2F9         = byte ptr -2F9h
.text:0000000000005940 var_2F8         = qword ptr -2F8h
.text:0000000000005940 dev             = qword ptr -2F0h
.text:0000000000005940 var_2E0         = xmmword ptr -2E0h
.text:0000000000005940 var_2D0         = qword ptr -2D0h
.text:0000000000005940 var_2C0         = xmmword ptr -2C0h
.text:0000000000005940 var_2B0         = xmmword ptr -2B0h
.text:0000000000005940 var_2A0         = qword ptr -2A0h
.text:0000000000005940 var_298         = qword ptr -298h
.text:0000000000005940 var_290         = qword ptr -290h
.text:0000000000005940 var_288         = qword ptr -288h
.text:0000000000005940 stat_buf        = stat ptr -280h
.text:0000000000005940 var_1F0         = stat ptr -1F0h
.text:0000000000005940 var_160         = stat ptr -160h
.text:0000000000005940 var_D0          = stat ptr -0D0h
.text:0000000000005940 var_38          = qword ptr -38h
.text:0000000000005940 arg_0           = dword ptr  10h
.text:0000000000005940 arg_8           = qword ptr  18h
.text:0000000000005940 arg_10          = qword ptr  20h
.text:0000000000005940 arg_18          = qword ptr  28h
.text:0000000000005940
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 push    rbp
.text:0000000000005941                 mov     rbp, rsp
.text:0000000000005944                 push    r15
.text:0000000000005946                 push    r14
.text:0000000000005948                 push    r13
.text:000000000000594A                 push    r12
.text:000000000000594C                 mov     r14d, edx
.text:000000000000594F                 push    rbx
.text:0000000000005950                 mov     rbx, r9
.text:0000000000005953                 sub     rsp, 398h
.text:000000000000595A                 mov     rax, [rbp+arg_8]
.text:000000000000595E                 mov     r13d, [rbp+arg_0]
.text:0000000000005962                 mov     [rbp+var_348], rcx
.text:0000000000005969                 mov     rcx, [rbp+arg_18]
.text:000000000000596D                 mov     [rbp+filename], rdi
.text:0000000000005974                 mov     [rbp+file], rsi
.text:000000000000597B                 mov     [rbp+format], rax
.text:0000000000005982                 mov     rax, [rbp+arg_10]
.text:0000000000005986                 mov     qword ptr [rbp+fildes], rcx
.text:000000000000598D                 mov     [rbp+ptr], r8
.text:0000000000005994                 mov     rcx, fs:28h
.text:000000000000599D                 mov     [rbp+var_38], rcx
.text:00000000000059A1                 xor     ecx, ecx
.text:00000000000059A3                 mov     byte ptr [rax], 0
.text:00000000000059A6                 movzx   r12d, byte ptr [r9+18h]
.text:00000000000059AB                 mov     [rbp+var_340], rax
.text:00000000000059B2                 mov     [rbp+var_315], r13b
.text:00000000000059B9                 mov     r15d, [r9+34h]
.text:00000000000059BD                 test    r12b, r12b
.text:00000000000059C0                 jz      short loc_59E1
.text:00000000000059C2                 test    r15d, r15d
.text:00000000000059C5                 js      loc_5C60
.text:00000000000059CB
.text:00000000000059CB loc_59CB:                               ; CODE XREF: copy_internal+EB8↓j
.text:00000000000059CB                 mov     rax, qword ptr [rbp+fildes]
.text:00000000000059D2                 test    r15d, r15d
.text:00000000000059D5                 setz    r14b
.text:00000000000059D9                 test    rax, rax
.text:00000000000059DC                 jz      short loc_59E1
.text:00000000000059DE                 mov     [rax], r14b
.text:00000000000059E1
.text:00000000000059E1 loc_59E1:                               ; CODE XREF: copy_internal+80↑j
.text:00000000000059E1                                         ; copy_internal+9C↑j
.text:00000000000059E1                 test    r15d, r15d
.text:00000000000059E4                 jz      loc_5C98
.text:00000000000059EA                 cmp     r15d, 11h
.text:00000000000059EE                 mov     r12, [rbp+filename]
.text:00000000000059F5                 jz      loc_61F8
.text:00000000000059FB
.text:00000000000059FB loc_59FB:                               ; CODE XREF: copy_internal+368↓j
.text:00000000000059FB                                         ; copy_internal+8C2↓j
.text:00000000000059FB                 cmp     dword ptr [rbx+4], 2
.text:00000000000059FF                 lea     r10, [rbp+stat_buf]
.text:0000000000005A06                 mov     rsi, r12        ; filename
.text:0000000000005A09                 mov     edi, 1          ; ver
.text:0000000000005A0E                 mov     rdx, r10        ; stat_buf
.text:0000000000005A11                 jz      loc_6210
.text:0000000000005A17                 call    ___xstat
.text:0000000000005A1C                 test    eax, eax
.text:0000000000005A1E                 mov     rsi, r12
.text:0000000000005A21                 setnz   al
.text:0000000000005A24                 test    al, al
.text:0000000000005A26                 jnz     loc_6225
.text:0000000000005A2C
.text:0000000000005A2C loc_5A2C:                               ; CODE XREF: copy_internal+8DF↓j
.text:0000000000005A2C                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000005A32                 mov     [rbp+var_314], eax
.text:0000000000005A38                 and     eax, 0F000h
.text:0000000000005A3D                 cmp     eax, 4000h
.text:0000000000005A42                 jz      loc_6508
.text:0000000000005A48
.text:0000000000005A48 loc_5A48:                               ; CODE XREF: copy_internal+373↓j
.text:0000000000005A48                                         ; copy_internal+8BC↓j ...
.text:0000000000005A48                 test    r13b, r13b
.text:0000000000005A4B                 jz      short loc_5A8A
.text:0000000000005A4D                 mov     rdi, [rbx+48h]
.text:0000000000005A51                 test    rdi, rdi
.text:0000000000005A54                 jz      short loc_5A8A
.text:0000000000005A56                 mov     eax, [rbp+var_314]
.text:0000000000005A5C                 lea     r10, [rbp+stat_buf]
.text:0000000000005A63                 and     eax, 0F000h
.text:0000000000005A68                 cmp     eax, 4000h
.text:0000000000005A6D                 jz      short loc_5A7B
.text:0000000000005A6F                 mov     r11d, [rbx]
.text:0000000000005A72                 test    r11d, r11d
.text:0000000000005A75                 jz      loc_6388
.text:0000000000005A7B
.text:0000000000005A7B loc_5A7B:                               ; CODE XREF: copy_internal+12D↑j
.text:0000000000005A7B                                         ; copy_internal+A74↓j
.text:0000000000005A7B                 mov     rsi, [rbp+filename]
.text:0000000000005A82                 mov     rdx, r10
.text:0000000000005A85                 call    record_file
.text:0000000000005A8A
.text:0000000000005A8A loc_5A8A:                               ; CODE XREF: copy_internal+10B↑j
.text:0000000000005A8A                                         ; copy_internal+114↑j
.text:0000000000005A8A                 mov     eax, [rbx+4]
.text:0000000000005A8D                 mov     [rbp+fd], 1
.text:0000000000005A97                 cmp     eax, 4
.text:0000000000005A9A                 jz      short loc_5AAE
.text:0000000000005A9C                 cmp     eax, 3
.text:0000000000005A9F                 setz    al
.text:0000000000005AA2                 movzx   eax, al
.text:0000000000005AA5                 and     eax, r13d
.text:0000000000005AA8                 mov     [rbp+fd], eax
.text:0000000000005AAE
.text:0000000000005AAE loc_5AAE:                               ; CODE XREF: copy_internal+15A↑j
.text:0000000000005AAE                 test    r14b, r14b
.text:0000000000005AB1                 jnz     loc_5CC0
.text:0000000000005AB7                 cmp     r15d, 11h
.text:0000000000005ABB                 jz      loc_6420
.text:0000000000005AC1
.text:0000000000005AC1 loc_5AC1:                               ; CODE XREF: copy_internal+AE4↓j
.text:0000000000005AC1                 mov     eax, [rbp+var_314]
.text:0000000000005AC7                 and     eax, 0F000h
.text:0000000000005ACC                 cmp     eax, 8000h
.text:0000000000005AD1                 jz      loc_63C0
.text:0000000000005AD7                 cmp     eax, 0A000h
.text:0000000000005ADC                 mov     r8d, 100h       ; flag
.text:0000000000005AE2                 setz    r9b
.text:0000000000005AE6                 cmp     eax, 4000h
.text:0000000000005AEB                 setz    al
.text:0000000000005AEE                 or      r9d, eax
.text:0000000000005AF1                 movzx   eax, byte ptr [rbx+14h]
.text:0000000000005AF5                 xor     eax, 1
.text:0000000000005AF8                 or      r9b, al
.text:0000000000005AFB                 jz      loc_63C0
.text:0000000000005B01
.text:0000000000005B01 loc_5B01:                               ; CODE XREF: copy_internal+A8E↓j
.text:0000000000005B01                                         ; copy_internal+A9C↓j ...
.text:0000000000005B01                 lea     r12, [rbp+var_1F0]
.text:0000000000005B08                 mov     rdx, [rbp+file] ; filename
.text:0000000000005B0F                 mov     esi, 0FFFFFF9Ch ; fildes
.text:0000000000005B14                 mov     edi, 1          ; ver
.text:0000000000005B19                 mov     byte ptr [rbp+old], r9b
.text:0000000000005B20                 mov     rcx, r12        ; stat_buf
.text:0000000000005B23                 call    ___fxstatat
.text:0000000000005B28                 test    eax, eax
.text:0000000000005B2A                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000005B32                 jnz     loc_61B0
.text:0000000000005B38                 xor     r8d, r8d
.text:0000000000005B3B
.text:0000000000005B3B loc_5B3B:                               ; CODE XREF: copy_internal+899↓j
.text:0000000000005B3B                 cmp     dword ptr [rbx+8], 2
.text:0000000000005B3F                 jz      short loc_5B5F
.text:0000000000005B41                 mov     rax, [rbp+var_1F0.st_ino]
.text:0000000000005B48                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000005B4F                 jz      loc_6D18
.text:0000000000005B55
.text:0000000000005B55 loc_5B55:                               ; CODE XREF: copy_internal+13E6↓j
.text:0000000000005B55                 cmp     dword ptr [rbx+4], 2
.text:0000000000005B59                 jz      loc_6ED0
.text:0000000000005B5F
.text:0000000000005B5F loc_5B5F:                               ; CODE XREF: copy_internal+1FF↑j
.text:0000000000005B5F                                         ; copy_internal+AF0↓j ...
.text:0000000000005B5F                 cmp     byte ptr [rbx+2Dh], 0
.text:0000000000005B63                 jz      loc_6560
.text:0000000000005B69                 mov     eax, [rbp+var_314]
.text:0000000000005B6F                 and     eax, 0F000h
.text:0000000000005B74                 cmp     eax, 4000h
.text:0000000000005B79                 jz      loc_6FA0
.text:0000000000005B7F                 xor     ecx, ecx
.text:0000000000005B81                 cmp     byte ptr [rbx+1Fh], 0
.text:0000000000005B85                 jz      short loc_5BA5
.text:0000000000005B87                 cmp     byte ptr [rbx+18h], 0
.text:0000000000005B8B                 mov     ecx, 1
.text:0000000000005B90                 jz      short loc_5BA5
.text:0000000000005B92                 xor     ecx, ecx
.text:0000000000005B94                 mov     rax, [rbp+stat_buf.st_dev]
.text:0000000000005B9B                 cmp     [rbp+var_1F0.st_dev], rax
.text:0000000000005BA2                 setnz   cl
.text:0000000000005BA5
.text:0000000000005BA5 loc_5BA5:                               ; CODE XREF: copy_internal+245↑j
.text:0000000000005BA5                                         ; copy_internal+250↑j
.text:0000000000005BA5                 lea     r10, [rbp+stat_buf]
.text:0000000000005BAC                 mov     rdi, [rbp+file]
.text:0000000000005BB3                 lea     rsi, [rbp+var_1F0]
.text:0000000000005BBA                 mov     byte ptr [rbp+s2], r9b
.text:0000000000005BC1                 mov     byte ptr [rbp+old], r8b
.text:0000000000005BC8                 mov     rdx, r10
.text:0000000000005BCB                 call    utimecmp
.text:0000000000005BD0                 test    eax, eax
.text:0000000000005BD2                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000005BDA                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000005BE2                 js      loc_6B30
.text:0000000000005BE8                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005BEF                 test    rax, rax
.text:0000000000005BF2                 jz      short loc_5BF7
.text:0000000000005BF4                 mov     byte ptr [rax], 1
.text:0000000000005BF7
.text:0000000000005BF7 loc_5BF7:                               ; CODE XREF: copy_internal+2B2↑j
.text:0000000000005BF7                 mov     rdx, [rbp+stat_buf.st_dev]
.text:0000000000005BFE                 mov     rsi, [rbp+stat_buf.st_ino]
.text:0000000000005C05                 mov     rdi, [rbp+file] ; src
.text:0000000000005C0C                 call    remember_copied
.text:0000000000005C11                 test    rax, rax
.text:0000000000005C14                 jz      loc_6180
.text:0000000000005C1A                 movzx   ecx, byte ptr [rbx+2Eh]
.text:0000000000005C1E                 mov     r8d, [rbp+fd]
.text:0000000000005C25                 mov     edx, 1
.text:0000000000005C2A                 mov     rsi, [rbp+file]
.text:0000000000005C31                 mov     rdi, rax
.text:0000000000005C34                 call    create_hard_link
.text:0000000000005C39                 test    al, al
.text:0000000000005C3B                 jnz     loc_6180
.text:0000000000005C41                 cmp     byte ptr [rbx+25h], 0
.text:0000000000005C45                 jnz     loc_6A50
.text:0000000000005C4B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005C50
.text:0000000000005C50 loc_5C50:                               ; CODE XREF: copy_internal+522↓j
.text:0000000000005C50                                         ; copy_internal+6CE↓j ...
.text:0000000000005C50                 xor     r12d, r12d
.text:0000000000005C53                 jmp     loc_6186
.text:0000000000005C53 ; ---------------------------------------------------------------------------
.text:0000000000005C58                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: copy_internal+85↑j
.text:0000000000005C60                 mov     edx, 0FFFFFF9Ch
.text:0000000000005C65                 mov     rcx, rsi
.text:0000000000005C68                 mov     r8d, 1
.text:0000000000005C6E                 mov     rsi, rdi
.text:0000000000005C71                 mov     edi, edx
.text:0000000000005C73                 call    renameat2
.text:0000000000005C78                 test    eax, eax
.text:0000000000005C7A                 jnz     loc_67F0
.text:0000000000005C80                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000005C87                 mov     r14d, r12d
.text:0000000000005C8A                 test    rax, rax
.text:0000000000005C8D                 jz      short loc_5C98
.text:0000000000005C8F                 mov     byte ptr [rax], 1
.text:0000000000005C92                 nop     word ptr [rax+rax+00h]
.text:0000000000005C98
.text:0000000000005C98 loc_5C98:                               ; CODE XREF: copy_internal+A4↑j
.text:0000000000005C98                                         ; copy_internal+34D↑j
.text:0000000000005C98                 cmp     byte ptr [rbx+31h], 0
.text:0000000000005C9C                 jnz     short loc_5CB0
.text:0000000000005C9E                 mov     r12, [rbp+file]
.text:0000000000005CA5                 xor     r15d, r15d
.text:0000000000005CA8                 jmp     loc_59FB
.text:0000000000005CA8 ; ---------------------------------------------------------------------------
.text:0000000000005CAD                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 loc_5CB0:                               ; CODE XREF: copy_internal+35C↑j
.text:0000000000005CB0                 xor     r15d, r15d
.text:0000000000005CB3                 jmp     loc_5A48
.text:0000000000005CB3 ; ---------------------------------------------------------------------------
.text:0000000000005CB8                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: copy_internal+171↑j
.text:0000000000005CC0                 xor     r9d, r9d
.text:0000000000005CC3                 mov     [rbp+old], 0
.text:0000000000005CCE
.text:0000000000005CCE loc_5CCE:                               ; CODE XREF: copy_internal+8AD↓j
.text:0000000000005CCE                                         ; copy_internal+E49↓j ...
.text:0000000000005CCE                 test    r13b, r13b
.text:0000000000005CD1                 jz      loc_5D90
.text:0000000000005CD7                 cmp     qword ptr [rbx+40h], 0
.text:0000000000005CDC                 jz      loc_5D90
.text:0000000000005CE2
.text:0000000000005CE2 loc_5CE2:                               ; CODE XREF: copy_internal+2D41↓j
.text:0000000000005CE2                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000005CE7                 test    r12b, r12b
.text:0000000000005CEA                 jnz     loc_5D90
.text:0000000000005CF0                 mov     edx, [rbx]
.text:0000000000005CF2                 test    edx, edx
.text:0000000000005CF4                 jnz     loc_6978
.text:0000000000005CFA                 test    r9b, r9b
.text:0000000000005CFD                 lea     rdx, [rbp+var_1F0]
.text:0000000000005D04                 jz      loc_7580
.text:0000000000005D0A
.text:0000000000005D0A loc_5D0A:                               ; CODE XREF: copy_internal+1C74↓j
.text:0000000000005D0A                 mov     eax, [rdx+18h]
.text:0000000000005D0D                 and     eax, 0F000h
.text:0000000000005D12                 cmp     eax, 0A000h
.text:0000000000005D17                 jnz     short loc_5D90
.text:0000000000005D19                 mov     rdi, [rbx+40h]
.text:0000000000005D1D                 mov     rsi, [rbp+file]
.text:0000000000005D24                 call    seen_file
.text:0000000000005D29                 test    al, al
.text:0000000000005D2B                 jz      short loc_5D90
.text:0000000000005D2D                 mov     rdx, [rbp+file]
.text:0000000000005D34                 mov     esi, 4
.text:0000000000005D39                 mov     edi, 1
.text:0000000000005D3E                 call    quotearg_n_style
.text:0000000000005D43                 mov     rdx, [rbp+filename]
.text:0000000000005D4A                 xor     edi, edi
.text:0000000000005D4C                 mov     esi, 4
.text:0000000000005D51                 mov     r13, rax
.text:0000000000005D54                 call    quotearg_n_style
.text:0000000000005D59                 lea     rsi, aWillNotCopySTh ; "will not copy %s through just-created s"...
.text:0000000000005D60                 mov     rbx, rax
.text:0000000000005D63                 xor     edi, edi        ; domainname
.text:0000000000005D65                 mov     edx, 5          ; category
.text:0000000000005D6A                 call    _dcgettext
.text:0000000000005D6F                 mov     r8, r13
.text:0000000000005D72                 mov     rdx, rax        ; format
.text:0000000000005D75                 mov     rcx, rbx
.text:0000000000005D78                 xor     esi, esi        ; errnum
.text:0000000000005D7A                 xor     edi, edi        ; status
.text:0000000000005D7C                 xor     eax, eax
.text:0000000000005D7E                 call    _error
.text:0000000000005D83                 jmp     loc_6186
.text:0000000000005D83 ; ---------------------------------------------------------------------------
.text:0000000000005D88                 align 10h
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: copy_internal+391↑j
.text:0000000000005D90                                         ; copy_internal+39C↑j ...
.text:0000000000005D90                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000005D94                 jz      short loc_5DA0
.text:0000000000005D96                 cmp     byte ptr [rbx+18h], 0
.text:0000000000005D9A                 jz      loc_6350
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: copy_internal+454↑j
.text:0000000000005DA0                                         ; copy_internal+A20↓j ...
.text:0000000000005DA0                 test    r15d, r15d
.text:0000000000005DA3                 jz      loc_6140
.text:0000000000005DA9
.text:0000000000005DA9 loc_5DA9:                               ; CODE XREF: copy_internal+104B↓j
.text:0000000000005DA9                                         ; copy_internal+27A1↓j ...
.text:0000000000005DA9                 cmp     byte ptr [rbx+2Ah], 0
.text:0000000000005DAD                 jz      short loc_5DC5
.text:0000000000005DAF                 mov     eax, [rbp+var_314]
.text:0000000000005DB5                 and     eax, 0F000h
.text:0000000000005DBA                 cmp     eax, 4000h
.text:0000000000005DBF                 jz      loc_6990
.text:0000000000005DC5
.text:0000000000005DC5 loc_5DC5:                               ; CODE XREF: copy_internal+46D↑j
.text:0000000000005DC5                 movzx   eax, byte ptr [rbx+18h]
.text:0000000000005DC9                 test    al, al
.text:0000000000005DCB                 jnz     loc_6270
.text:0000000000005DD1                 cmp     byte ptr [rbx+22h], 0
.text:0000000000005DD5                 jnz     loc_79B0
.text:0000000000005DDB
.text:0000000000005DDB loc_5DDB:                               ; CODE XREF: copy_internal+804↓j
.text:0000000000005DDB                                         ; copy_internal+1045↓j
.text:0000000000005DDB                 movzx   eax, r14b
.text:0000000000005DDF                 mov     [rbp+s2], 0
.text:0000000000005DEA                 mov     [rbp+fildes], eax
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: copy_internal+A01↓j
.text:0000000000005DF0                                         ; copy_internal+115D↓j ...
.text:0000000000005DF0                 mov     r12d, [rbp+var_314]
.text:0000000000005DF7                 and     r12d, 0FFFh
.text:0000000000005DFE                 cmp     byte ptr [rbx+2Bh], 0
.text:0000000000005E02                 jz      short loc_5E0F
.text:0000000000005E04                 mov     r12d, [rbx+10h]
.text:0000000000005E08                 and     r12d, 0FFFh
.text:0000000000005E0F
.text:0000000000005E0F loc_5E0F:                               ; CODE XREF: copy_internal+4C2↑j
.text:0000000000005E0F                 cmp     byte ptr [rbx+1Dh], 0
.text:0000000000005E13                 jnz     loc_6438
.text:0000000000005E19                 mov     r15d, [rbp+var_314]
.text:0000000000005E20                 and     r15d, 0F000h
.text:0000000000005E27                 cmp     r15d, 4000h
.text:0000000000005E2E                 jz      loc_6C70
.text:0000000000005E34                 mov     ecx, [rbp+fildes]
.text:0000000000005E3A                 mov     edx, [rbp+var_314]
.text:0000000000005E40                 mov     r8, rbx
.text:0000000000005E43                 mov     rsi, [rbp+file]
.text:0000000000005E4A                 mov     rdi, [rbp+filename]
.text:0000000000005E51                 call    set_process_security_ctx
.text:0000000000005E56                 test    al, al
.text:0000000000005E58                 mov     [rbp+var_35C], 0
.text:0000000000005E62                 jz      loc_5C50
.text:0000000000005E68
.text:0000000000005E68 loc_5E68:                               ; CODE XREF: copy_internal+B43↓j
.text:0000000000005E68                 movzx   eax, byte ptr [rbx+2Ch]
.text:0000000000005E6C                 test    al, al
.text:0000000000005E6E                 mov     byte ptr [rbp+fildes], al
.text:0000000000005E74                 jnz     loc_6800
.text:0000000000005E7A                 cmp     byte ptr [rbx+17h], 0
.text:0000000000005E7E                 jz      loc_71C8
.text:0000000000005E84                 cmp     byte ptr [rbx+16h], 0
.text:0000000000005E88                 mov     edx, 1
.text:0000000000005E8D                 jnz     short loc_5E98
.text:0000000000005E8F                 xor     edx, edx
.text:0000000000005E91                 cmp     dword ptr [rbx+8], 3
.text:0000000000005E95                 setz    dl
.text:0000000000005E98
.text:0000000000005E98 loc_5E98:                               ; CODE XREF: copy_internal+54D↑j
.text:0000000000005E98                 mov     r8d, [rbp+fd]
.text:0000000000005E9F                 mov     rsi, [rbp+file]
.text:0000000000005EA6                 xor     ecx, ecx
.text:0000000000005EA8                 mov     rdi, [rbp+filename]
.text:0000000000005EAF                 call    create_hard_link
.text:0000000000005EB4                 test    al, al
.text:0000000000005EB6                 jz      loc_68D0
.text:0000000000005EBC                 xor     r8d, r8d
.text:0000000000005EBF
.text:0000000000005EBF loc_5EBF:                               ; CODE XREF: copy_internal+F2E↓j
.text:0000000000005EBF                                         ; copy_internal+219F↓j ...
.text:0000000000005EBF                 cmp     r15d, 4000h
.text:0000000000005EC6                 setnz   r15b
.text:0000000000005ECA                 test    r14b, r14b
.text:0000000000005ECD                 jnz     short loc_5EE2
.text:0000000000005ECF                 movzx   eax, byte ptr [rbx+14h]
.text:0000000000005ED3                 xor     eax, 1
.text:0000000000005ED6                 and     al, r15b
.text:0000000000005ED9                 mov     r12d, eax
.text:0000000000005EDC                 jnz     loc_7C10
.text:0000000000005EE2
.text:0000000000005EE2 loc_5EE2:                               ; CODE XREF: copy_internal+58D↑j
.text:0000000000005EE2                                         ; copy_internal+22E1↓j ...
.text:0000000000005EE2                 test    r13b, r13b
.text:0000000000005EE5                 mov     r12d, 1
.text:0000000000005EEB                 jz      short loc_5F42
.text:0000000000005EED                 mov     byte ptr [rbp+ptr], 0
.text:0000000000005EF4
.text:0000000000005EF4 loc_5EF4:                               ; CODE XREF: copy_internal+2536↓j
.text:0000000000005EF4                 cmp     qword ptr [rbx+40h], 0
.text:0000000000005EF9                 jz      short loc_5F2D
.text:0000000000005EFB                 lea     r12, [rbp+var_D0]
.text:0000000000005F02                 mov     rsi, [rbp+file] ; filename
.text:0000000000005F09                 mov     edi, 1          ; ver
.text:0000000000005F0E                 mov     byte ptr [rbp+fd], r8b
.text:0000000000005F15                 mov     rdx, r12        ; stat_buf
.text:0000000000005F18                 call    ___lxstat
.text:0000000000005F1D                 test    eax, eax
.text:0000000000005F1F                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000005F27                 jz      loc_7F72
.text:0000000000005F2D
.text:0000000000005F2D loc_5F2D:                               ; CODE XREF: copy_internal+5B9↑j
.text:0000000000005F2D                                         ; copy_internal+264D↓j
.text:0000000000005F2D                 movzx   eax, byte ptr [rbp+ptr]
.text:0000000000005F34                 movzx   r12d, [rbp+var_315]
.text:0000000000005F3C                 mov     [rbp+var_315], al
.text:0000000000005F42
.text:0000000000005F42 loc_5F42:                               ; CODE XREF: copy_internal+5AB↑j
.text:0000000000005F42                 cmp     byte ptr [rbx+17h], 0
.text:0000000000005F46                 jz      short loc_5F51
.text:0000000000005F48                 test    r15b, r15b
.text:0000000000005F4B                 jnz     loc_6186
.text:0000000000005F51
.text:0000000000005F51 loc_5F51:                               ; CODE XREF: copy_internal+606↑j
.text:0000000000005F51                 test    r8b, r8b
.text:0000000000005F54                 jnz     loc_6186
.text:0000000000005F5A
.text:0000000000005F5A loc_5F5A:                               ; CODE XREF: copy_internal+1F60↓j
.text:0000000000005F5A                 cmp     byte ptr [rbx+1Fh], 0
.text:0000000000005F5E                 jz      loc_6018
.text:0000000000005F64                 mov     rax, [rbp+stat_buf.st_atim.tv_sec]
.text:0000000000005F6B                 cmp     byte ptr [rbp+fildes], 0
.text:0000000000005F72                 lea     rsi, [rbp+var_D0]
.text:0000000000005F79                 mov     rdi, [rbp+file] ; path
.text:0000000000005F80                 mov     [rbp+var_D0.st_dev], rax
.text:0000000000005F87                 mov     rax, [rbp+stat_buf.st_atim.tv_nsec]
.text:0000000000005F8E                 mov     [rbp+var_D0.st_ino], rax
.text:0000000000005F95                 mov     rax, [rbp+stat_buf.st_mtim.tv_sec]
.text:0000000000005F9C                 mov     [rbp+var_D0.st_nlink], rax
.text:0000000000005FA3                 mov     rax, [rbp+stat_buf.st_mtim.tv_nsec]
.text:0000000000005FAA                 mov     qword ptr [rbp+var_D0.st_mode], rax
.text:0000000000005FB1                 jz      loc_7F60
.text:0000000000005FB7                 call    lutimens
.text:0000000000005FBC                 test    eax, eax
.text:0000000000005FBE                 jz      short loc_6018
.text:0000000000005FC0                 call    ___errno_location
.text:0000000000005FC5                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000005FC8                 jz      short loc_6018
.text:0000000000005FCA
.text:0000000000005FCA loc_5FCA:                               ; CODE XREF: copy_internal+262D↓j
.text:0000000000005FCA                 mov     rsi, [rbp+file]
.text:0000000000005FD1                 mov     edi, 4
.text:0000000000005FD6                 call    quotearg_style
.text:0000000000005FDB                 lea     rsi, aPreservingTime ; "preserving times for %s"
.text:0000000000005FE2                 xor     edi, edi        ; domainname
.text:0000000000005FE4                 mov     edx, 5          ; category
.text:0000000000005FE9                 mov     r13, rax
.text:0000000000005FEC                 call    _dcgettext
.text:0000000000005FF1                 mov     r15, rax
.text:0000000000005FF4                 call    ___errno_location
.text:0000000000005FF9                 mov     esi, [rax]      ; errnum
.text:0000000000005FFB                 xor     edi, edi        ; status
.text:0000000000005FFD                 xor     eax, eax
.text:0000000000005FFF                 mov     rcx, r13
.text:0000000000006002                 mov     rdx, r15        ; format
.text:0000000000006005                 call    _error
.text:000000000000600A                 cmp     byte ptr [rbx+24h], 0
.text:000000000000600E                 jnz     loc_5C50
.text:0000000000006014                 nop     dword ptr [rax+00h]
.text:0000000000006018
.text:0000000000006018 loc_6018:                               ; CODE XREF: copy_internal+61E↑j
.text:0000000000006018                                         ; copy_internal+67E↑j ...
.text:0000000000006018                 cmp     byte ptr [rbp+fildes], 0
.text:000000000000601F                 jnz     loc_6186
.text:0000000000006025
.text:0000000000006025 loc_6025:                               ; CODE XREF: copy_internal+2627↓j
.text:0000000000006025                 cmp     byte ptr [rbx+1Dh], 0
.text:0000000000006029                 jz      short loc_6087
.text:000000000000602B                 test    r14b, r14b
.text:000000000000602E                 jnz     short loc_6042
.text:0000000000006030                 mov     eax, [rbp+var_1F0.st_uid]
.text:0000000000006036                 cmp     [rbp+stat_buf.st_uid], eax
.text:000000000000603C                 jz      loc_86EA
.text:0000000000006042
.text:0000000000006042 loc_6042:                               ; CODE XREF: copy_internal+6EE↑j
.text:0000000000006042                                         ; copy_internal+2DB6↓j
.text:0000000000006042                 mov     rsi, [rbp+file]
.text:0000000000006049                 lea     rcx, [rbp+stat_buf]
.text:0000000000006050                 lea     r9, [rbp+var_1F0]
.text:0000000000006057                 movzx   r8d, r14b
.text:000000000000605B                 mov     edx, 0FFFFFFFFh
.text:0000000000006060                 mov     rdi, rbx
.text:0000000000006063                 call    set_owner
.text:0000000000006068                 cmp     eax, 0FFFFFFFFh
.text:000000000000606B                 jz      loc_5C50
.text:0000000000006071                 mov     ecx, [rbp+var_314]
.text:0000000000006077                 mov     edx, ecx
.text:0000000000006079                 and     dh, 0F1h
.text:000000000000607C                 test    eax, eax
.text:000000000000607E                 cmovnz  edx, ecx
.text:0000000000006081                 mov     [rbp+var_314], edx
.text:0000000000006087
.text:0000000000006087 loc_6087:                               ; CODE XREF: copy_internal+6E9↑j
.text:0000000000006087                                         ; copy_internal+2DBC↓j
.text:0000000000006087                 mov     rax, 0FF0000000000FFh
.text:0000000000006091                 test    [rbx+18h], rax
.text:0000000000006095                 jnz     loc_8130
.text:000000000000609B                 cmp     byte ptr [rbx+2Bh], 0
.text:000000000000609F                 jnz     loc_8495
.text:00000000000060A5                 test    [rbx+20h], r14b
.text:00000000000060A9                 jnz     loc_8749
.text:00000000000060AF                 mov     eax, [rbp+var_35C]
.text:00000000000060B5                 test    eax, eax
.text:00000000000060B7                 jnz     loc_8701
.text:00000000000060BD
.text:00000000000060BD loc_60BD:                               ; CODE XREF: copy_internal+2DCE↓j
.text:00000000000060BD                 cmp     [rbp+var_315], 0
.text:00000000000060C4                 jz      loc_6186
.text:00000000000060CA
.text:00000000000060CA loc_60CA:                               ; CODE XREF: copy_internal+2DDB↓j
.text:00000000000060CA                                         ; copy_internal+2DFE↓j
.text:00000000000060CA                 mov     esi, [rbp+var_38C]
.text:00000000000060D0                 or      esi, [rbp+var_35C] ; mode
.text:00000000000060D6                 mov     rdi, [rbp+file] ; file
.text:00000000000060DD                 call    _chmod
.text:00000000000060E2                 test    eax, eax
.text:00000000000060E4                 jz      loc_6186
.text:00000000000060EA                 mov     rsi, [rbp+file]
.text:00000000000060F1                 mov     edi, 4
.text:00000000000060F6                 call    quotearg_style
.text:00000000000060FB                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:0000000000006102                 mov     edx, 5          ; category
.text:0000000000006107                 xor     edi, edi        ; domainname
.text:0000000000006109                 mov     r14, rax
.text:000000000000610C                 call    _dcgettext
.text:0000000000006111                 mov     r13, rax
.text:0000000000006114                 call    ___errno_location
.text:0000000000006119                 mov     esi, [rax]      ; errnum
.text:000000000000611B                 mov     rcx, r14
.text:000000000000611E                 mov     rdx, r13        ; format
.text:0000000000006121                 xor     edi, edi        ; status
.text:0000000000006123                 xor     eax, eax
.text:0000000000006125                 call    _error
.text:000000000000612A
.text:000000000000612A loc_612A:                               ; CODE XREF: copy_internal+2813↓j
.text:000000000000612A                 cmp     byte ptr [rbx+24h], 0
.text:000000000000612E                 jnz     loc_5C50
.text:0000000000006134                 jmp     short loc_6186
.text:0000000000006134 ; ---------------------------------------------------------------------------
.text:0000000000006136                 align 20h
.text:0000000000006140
.text:0000000000006140 loc_6140:                               ; CODE XREF: copy_internal+463↑j
.text:0000000000006140                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006144                 jz      loc_5DDB
.text:000000000000614A
.text:000000000000614A loc_614A:                               ; CODE XREF: copy_internal+974↓j
.text:000000000000614A                                         ; copy_internal+985↓j
.text:000000000000614A                 cmp     byte ptr [rbx+2Eh], 0
.text:000000000000614E                 jnz     loc_6CD0
.text:0000000000006154
.text:0000000000006154 loc_6154:                               ; CODE XREF: copy_internal+13CC↓j
.text:0000000000006154                 cmp     byte ptr [rbx+21h], 0
.text:0000000000006158                 jnz     loc_6CB0
.text:000000000000615E
.text:000000000000615E loc_615E:                               ; CODE XREF: copy_internal+1386↓j
.text:000000000000615E                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000006165                 test    rax, rax
.text:0000000000006168                 jz      short loc_616D
.text:000000000000616A                 mov     byte ptr [rax], 1
.text:000000000000616D
.text:000000000000616D loc_616D:                               ; CODE XREF: copy_internal+828↑j
.text:000000000000616D                 test    r13b, r13b
.text:0000000000006170                 jz      short loc_6180
.text:0000000000006172                 cmp     byte ptr [rbx+31h], 0
.text:0000000000006176                 jz      loc_6BE8
.text:000000000000617C                 nop     dword ptr [rax+00h]
.text:0000000000006180
.text:0000000000006180 loc_6180:                               ; CODE XREF: copy_internal+2D4↑j
.text:0000000000006180                                         ; copy_internal+2FB↑j ...
.text:0000000000006180                 mov     r12d, 1
.text:0000000000006186
.text:0000000000006186 loc_6186:                               ; CODE XREF: copy_internal+313↑j
.text:0000000000006186                                         ; copy_internal+443↑j ...
.text:0000000000006186                 mov     rsi, [rbp+var_38]
.text:000000000000618A                 xor     rsi, fs:28h
.text:0000000000006193                 mov     eax, r12d
.text:0000000000006196                 jnz     loc_8E64
.text:000000000000619C                 lea     rsp, [rbp-28h]
.text:00000000000061A0                 pop     rbx
.text:00000000000061A1                 pop     r12
.text:00000000000061A3                 pop     r13
.text:00000000000061A5                 pop     r14
.text:00000000000061A7                 pop     r15
.text:00000000000061A9                 pop     rbp
.text:00000000000061AA                 retn
.text:00000000000061AA ; ---------------------------------------------------------------------------
.text:00000000000061AB                 align 10h
.text:00000000000061B0
.text:00000000000061B0 loc_61B0:                               ; CODE XREF: copy_internal+1F2↑j
.text:00000000000061B0                 call    ___errno_location
.text:00000000000061B5                 mov     r9, rax
.text:00000000000061B8                 mov     eax, [rax]
.text:00000000000061BA                 cmp     eax, 28h ; '('
.text:00000000000061BD                 jz      loc_6790
.text:00000000000061C3                 cmp     eax, 2
.text:00000000000061C6                 mov     r8d, 1
.text:00000000000061CC                 jnz     loc_679A
.text:00000000000061D2
.text:00000000000061D2 loc_61D2:                               ; CODE XREF: copy_internal+11E3↓j
.text:00000000000061D2                 xor     r9d, r9d
.text:00000000000061D5                 cmp     r15d, 11h
.text:00000000000061D9                 jz      loc_5B3B
.text:00000000000061DF                 mov     r14d, r8d
.text:00000000000061E2                 mov     [rbp+old], 0
.text:00000000000061ED                 jmp     loc_5CCE
.text:00000000000061ED ; ---------------------------------------------------------------------------
.text:00000000000061F2                 align 8
.text:00000000000061F8
.text:00000000000061F8 loc_61F8:                               ; CODE XREF: copy_internal+B5↑j
.text:00000000000061F8                 cmp     dword ptr [rbx+8], 2
.text:00000000000061FC                 jz      loc_5A48
.text:0000000000006202                 jmp     loc_59FB
.text:0000000000006202 ; ---------------------------------------------------------------------------
.text:0000000000006207                 align 10h
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: copy_internal+D1↑j
.text:0000000000006210                 call    ___lxstat
.text:0000000000006215                 test    eax, eax
.text:0000000000006217                 mov     rsi, r12
.text:000000000000621A                 setnz   al
.text:000000000000621D                 test    al, al
.text:000000000000621F                 jz      loc_5A2C
.text:0000000000006225
.text:0000000000006225 loc_6225:                               ; CODE XREF: copy_internal+E6↑j
.text:0000000000006225                                         ; copy_internal+377E↓j
.text:0000000000006225                 mov     edi, 4
.text:000000000000622A                 call    quotearg_style
.text:000000000000622F                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000006236                 mov     r12, rax
.text:0000000000006239                 mov     edx, 5          ; category
.text:000000000000623E
.text:000000000000623E loc_623E:                               ; CODE XREF: copy_internal+1880↓j
.text:000000000000623E                 xor     edi, edi        ; domainname
.text:0000000000006240                 call    _dcgettext
.text:0000000000006245                 mov     rbx, rax
.text:0000000000006248                 call    ___errno_location
.text:000000000000624D                 mov     esi, [rax]      ; errnum
.text:000000000000624F                 mov     rcx, r12
.text:0000000000006252                 mov     rdx, rbx        ; format
.text:0000000000006255                 xor     edi, edi        ; status
.text:0000000000006257                 xor     eax, eax
.text:0000000000006259                 xor     r12d, r12d
.text:000000000000625C                 call    _error
.text:0000000000006261                 jmp     loc_6186
.text:0000000000006261 ; ---------------------------------------------------------------------------
.text:0000000000006266                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: copy_internal+48B↑j
.text:0000000000006270                 cmp     [rbp+stat_buf.st_nlink], 1
.text:0000000000006278                 jz      loc_72A8
.text:000000000000627E                 cmp     byte ptr [rbx+22h], 0
.text:0000000000006282                 mov     [rbp+s2], 0
.text:000000000000628D                 jz      short loc_6299
.text:000000000000628F                 cmp     byte ptr [rbx+17h], 0
.text:0000000000006293                 jz      loc_6A58
.text:0000000000006299
.text:0000000000006299 loc_6299:                               ; CODE XREF: copy_internal+94D↑j
.text:0000000000006299                                         ; copy_internal+114D↓j
.text:0000000000006299                 cmp     r15d, 11h
.text:000000000000629D                 jnz     short loc_62CB
.text:000000000000629F                 mov     rsi, [rbp+file] ; new
.text:00000000000062A6                 mov     rdi, [rbp+filename] ; old
.text:00000000000062AD                 call    _rename
.text:00000000000062B2                 test    eax, eax
.text:00000000000062B4                 jz      loc_614A
.text:00000000000062BA                 call    ___errno_location
.text:00000000000062BF                 mov     r15d, [rax]
.text:00000000000062C2                 test    r15d, r15d
.text:00000000000062C5                 jz      loc_614A
.text:00000000000062CB
.text:00000000000062CB loc_62CB:                               ; CODE XREF: copy_internal+95D↑j
.text:00000000000062CB                 cmp     r15d, 16h
.text:00000000000062CF                 jz      loc_72F0
.text:00000000000062D5                 cmp     r15d, 12h
.text:00000000000062D9                 jnz     loc_6AA8
.text:00000000000062DF                 mov     r12d, [rbp+var_314]
.text:00000000000062E6                 mov     rdi, [rbp+file] ; path
.text:00000000000062ED                 and     r12d, 0F000h
.text:00000000000062F4                 cmp     r12d, 4000h
.text:00000000000062FB                 jz      loc_7360
.text:0000000000006301                 call    _unlink
.text:0000000000006306                 test    eax, eax
.text:0000000000006308                 jz      short loc_631B
.text:000000000000630A                 call    ___errno_location
.text:000000000000630F                 cmp     dword ptr [rax], 2
.text:0000000000006312                 mov     r14, rax
.text:0000000000006315                 jnz     loc_737E
.text:000000000000631B
.text:000000000000631B loc_631B:                               ; CODE XREF: copy_internal+9C8↑j
.text:000000000000631B                 cmp     r12d, 4000h
.text:0000000000006322                 setnz   dl
.text:0000000000006325                 and     dl, [rbx+2Eh]
.text:0000000000006328                 mov     r14d, edx
.text:000000000000632B                 jnz     loc_7C70
.text:0000000000006331
.text:0000000000006331 loc_6331:                               ; CODE XREF: copy_internal+1A27↓j
.text:0000000000006331                                         ; copy_internal+1A38↓j
.text:0000000000006331                 mov     [rbp+fildes], 1
.text:000000000000633B                 mov     r14d, 1
.text:0000000000006341                 jmp     loc_5DF0
.text:0000000000006341 ; ---------------------------------------------------------------------------
.text:0000000000006346                 align 10h
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: copy_internal+45A↑j
.text:0000000000006350                                         ; copy_internal+103C↓j
.text:0000000000006350                 mov     eax, [rbp+var_314]
.text:0000000000006356                 and     eax, 0F000h
.text:000000000000635B                 cmp     eax, 4000h
.text:0000000000006360                 jz      loc_5DA0
.text:0000000000006366                 mov     rdx, [rbp+old]
.text:000000000000636D                 mov     rsi, [rbp+file]
.text:0000000000006374                 mov     rdi, [rbp+filename]
.text:000000000000637B                 call    emit_verbose
.text:0000000000006380                 jmp     loc_5DA0
.text:0000000000006380 ; ---------------------------------------------------------------------------
.text:0000000000006385                 align 8
.text:0000000000006388
.text:0000000000006388 loc_6388:                               ; CODE XREF: copy_internal+135↑j
.text:0000000000006388                 mov     rsi, [rbp+filename]
.text:000000000000638F                 mov     rdx, r10
.text:0000000000006392                 mov     qword ptr [rbp+fd], r10
.text:0000000000006399                 call    seen_file
.text:000000000000639E                 test    al, al
.text:00000000000063A0                 mov     r12d, eax
.text:00000000000063A3                 jnz     loc_7268
.text:00000000000063A9                 mov     rdi, [rbx+48h]
.text:00000000000063AD                 mov     r10, qword ptr [rbp+fd]
.text:00000000000063B4                 jmp     loc_5A7B
.text:00000000000063B4 ; ---------------------------------------------------------------------------
.text:00000000000063B9                 align 20h
.text:00000000000063C0
.text:00000000000063C0 loc_63C0:                               ; CODE XREF: copy_internal+191↑j
.text:00000000000063C0                                         ; copy_internal+1BB↑j
.text:00000000000063C0                 movzx   r9d, byte ptr [rbx+18h]
.text:00000000000063C5                 mov     r8d, 100h
.text:00000000000063CB                 test    r9b, r9b
.text:00000000000063CE                 jnz     loc_5B01
.text:00000000000063D4                 movzx   r9d, byte ptr [rbx+2Ch]
.text:00000000000063D9                 test    r9b, r9b
.text:00000000000063DC                 jnz     loc_5B01
.text:00000000000063E2                 movzx   r9d, byte ptr [rbx+17h]
.text:00000000000063E7                 test    r9b, r9b
.text:00000000000063EA                 jnz     loc_5B01
.text:00000000000063F0                 mov     r10d, [rbx]
.text:00000000000063F3                 mov     r9d, 1
.text:00000000000063F9                 test    r10d, r10d
.text:00000000000063FC                 jnz     loc_5B01
.text:0000000000006402                 movzx   r9d, byte ptr [rbx+15h]
.text:0000000000006407                 xor     r8d, r8d
.text:000000000000640A                 test    r9b, r9b
.text:000000000000640D                 setnz   r8b
.text:0000000000006411                 shl     r8d, 8
.text:0000000000006415                 jmp     loc_5B01
.text:0000000000006415 ; ---------------------------------------------------------------------------
.text:000000000000641A                 align 20h
.text:0000000000006420
.text:0000000000006420 loc_6420:                               ; CODE XREF: copy_internal+17B↑j
.text:0000000000006420                 cmp     dword ptr [rbx+8], 2
.text:0000000000006424                 jnz     loc_5AC1
.text:000000000000642A                 xor     r8d, r8d
.text:000000000000642D                 xor     r9d, r9d
.text:0000000000006430                 jmp     loc_5B5F
.text:0000000000006430 ; ---------------------------------------------------------------------------
.text:0000000000006435                 align 8
.text:0000000000006438
.text:0000000000006438 loc_6438:                               ; CODE XREF: copy_internal+4D3↑j
.text:0000000000006438                 mov     ecx, [rbp+fildes]
.text:000000000000643E                 mov     edx, [rbp+var_314]
.text:0000000000006444                 mov     r8, rbx
.text:0000000000006447                 mov     rsi, [rbp+file]
.text:000000000000644E                 mov     rdi, [rbp+filename]
.text:0000000000006455                 call    set_process_security_ctx
.text:000000000000645A                 test    al, al
.text:000000000000645C                 jz      loc_5C50
.text:0000000000006462                 mov     r15d, [rbp+var_314]
.text:0000000000006469                 mov     eax, r12d
.text:000000000000646C                 and     eax, 3Fh
.text:000000000000646F                 mov     [rbp+var_35C], eax
.text:0000000000006475                 and     r15d, 0F000h
.text:000000000000647C                 cmp     r15d, 4000h
.text:0000000000006483                 jnz     loc_5E68
.text:0000000000006489
.text:0000000000006489 loc_6489:                               ; CODE XREF: copy_internal+1366↓j
.text:0000000000006489                 mov     rax, [rbp+ptr]
.text:0000000000006490                 mov     rdx, [rbp+stat_buf.st_ino]
.text:0000000000006497                 mov     rcx, [rbp+stat_buf.st_dev]
.text:000000000000649E                 test    rax, rax
.text:00000000000064A1                 jnz     short loc_64BC
.text:00000000000064A3                 jmp     loc_6DA0
.text:00000000000064A3 ; ---------------------------------------------------------------------------
.text:00000000000064A8                 align 10h
.text:00000000000064B0
.text:00000000000064B0 loc_64B0:                               ; CODE XREF: copy_internal+B80↓j
.text:00000000000064B0                                         ; copy_internal+B86↓j
.text:00000000000064B0                 mov     rax, [rax]
.text:00000000000064B3                 test    rax, rax
.text:00000000000064B6                 jz      loc_6DA0
.text:00000000000064BC
.text:00000000000064BC loc_64BC:                               ; CODE XREF: copy_internal+B61↑j
.text:00000000000064BC                 cmp     [rax+8], rdx
.text:00000000000064C0                 jnz     short loc_64B0
.text:00000000000064C2                 cmp     [rax+10h], rcx
.text:00000000000064C6                 jnz     short loc_64B0
.text:00000000000064C8                 mov     rsi, [rbp+filename]
.text:00000000000064CF                 mov     edi, 4
.text:00000000000064D4                 call    quotearg_style
.text:00000000000064D9                 lea     rsi, aCannotCopyCycl ; "cannot copy cyclic symbolic link %s"
.text:00000000000064E0                 mov     r12, rax
.text:00000000000064E3                 mov     edx, 5          ; category
.text:00000000000064E8
.text:00000000000064E8 loc_64E8:                               ; CODE XREF: copy_internal+1902↓j
.text:00000000000064E8                                         ; copy_internal+224E↓j
.text:00000000000064E8                 xor     edi, edi        ; domainname
.text:00000000000064EA                 call    _dcgettext
.text:00000000000064EF                 mov     rcx, r12
.text:00000000000064F2                 mov     rdx, rax        ; format
.text:00000000000064F5                 xor     esi, esi        ; errnum
.text:00000000000064F7                 xor     edi, edi        ; status
.text:00000000000064F9                 xor     eax, eax
.text:00000000000064FB                 call    _error
.text:0000000000006500                 jmp     loc_68D0
.text:0000000000006500 ; ---------------------------------------------------------------------------
.text:0000000000006505                 align 8
.text:0000000000006508
.text:0000000000006508 loc_6508:                               ; CODE XREF: copy_internal+102↑j
.text:0000000000006508                 movzx   r12d, byte ptr [rbx+2Ah]
.text:000000000000650D                 test    r12b, r12b
.text:0000000000006510                 jnz     loc_5A48
.text:0000000000006516                 mov     rsi, [rbp+filename]
.text:000000000000651D                 mov     edi, 4
.text:0000000000006522                 call    quotearg_style
.text:0000000000006527                 cmp     byte ptr [rbx+19h], 0
.text:000000000000652B                 mov     r13, rax
.text:000000000000652E                 mov     edx, 5          ; category
.text:0000000000006533                 jnz     loc_72D0
.text:0000000000006539                 lea     rsi, aRNotSpecifiedO ; "-r not specified; omitting directory %s"
.text:0000000000006540                 xor     edi, edi        ; domainname
.text:0000000000006542                 call    _dcgettext
.text:0000000000006547                 mov     rdx, rax        ; format
.text:000000000000654A
.text:000000000000654A loc_654A:                               ; CODE XREF: copy_internal+19A1↓j
.text:000000000000654A                 mov     rcx, r13
.text:000000000000654D                 xor     esi, esi        ; errnum
.text:000000000000654F                 xor     edi, edi        ; status
.text:0000000000006551                 xor     eax, eax
.text:0000000000006553                 call    _error
.text:0000000000006558                 jmp     loc_6186
.text:0000000000006558 ; ---------------------------------------------------------------------------
.text:000000000000655D                 align 20h
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: copy_internal+223↑j
.text:0000000000006560                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006564                 jnz     loc_6B40
.text:000000000000656A                 mov     eax, [rbp+var_314]
.text:0000000000006570                 and     eax, 0F000h
.text:0000000000006575                 cmp     eax, 4000h
.text:000000000000657A                 jz      short loc_65D0
.text:000000000000657C
.text:000000000000657C loc_657C:                               ; CODE XREF: copy_internal+11F4↓j
.text:000000000000657C                 mov     eax, [rbx+8]
.text:000000000000657F                 cmp     eax, 2
.text:0000000000006582                 jz      loc_6180
.text:0000000000006588                 cmp     eax, 3
.text:000000000000658B                 jnz     short loc_65D0
.text:000000000000658D                 mov     rsi, [rbp+file]
.text:0000000000006594                 lea     rdx, [rbp+var_1F0.st_mode]
.text:000000000000659B                 mov     rdi, rbx
.text:000000000000659E                 mov     byte ptr [rbp+s2], r9b
.text:00000000000065A5                 mov     byte ptr [rbp+old], r8b
.text:00000000000065AC                 call    overwrite_ok_isra_12
.text:00000000000065B1                 test    al, al
.text:00000000000065B3                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000065BB                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000065C3                 jz      loc_6180
.text:00000000000065C9                 nop     dword ptr [rax+00000000h]
.text:00000000000065D0
.text:00000000000065D0 loc_65D0:                               ; CODE XREF: copy_internal+C3A↑j
.text:00000000000065D0                                         ; copy_internal+C4B↑j ...
.text:00000000000065D0                 test    r14b, r14b
.text:00000000000065D3                 jnz     loc_6180
.text:00000000000065D9                 mov     eax, [rbp+var_1F0.st_mode]
.text:00000000000065DF                 mov     r12d, [rbp+var_314]
.text:00000000000065E6                 mov     edx, eax
.text:00000000000065E8                 and     r12d, 0F000h
.text:00000000000065EF                 and     edx, 0F000h
.text:00000000000065F5                 cmp     edx, 4000h
.text:00000000000065FB                 jz      loc_6C10
.text:0000000000006601                 cmp     r12d, 4000h
.text:0000000000006608                 jz      loc_78A8
.text:000000000000660E                 test    r13b, r13b
.text:0000000000006611                 mov     r15d, [rbx]
.text:0000000000006614                 jz      loc_7133
.text:000000000000661A
.text:000000000000661A loc_661A:                               ; CODE XREF: copy_internal+1F81↓j
.text:000000000000661A                 cmp     r15d, 3
.text:000000000000661E                 jnz     loc_70D0
.text:0000000000006624                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006628                 jnz     loc_78C7
.text:000000000000662E
.text:000000000000662E loc_662E:                               ; CODE XREF: copy_internal+1802↓j
.text:000000000000662E                 mov     rdi, [rbp+filename]
.text:0000000000006635                 mov     byte ptr [rbp+s2], r9b
.text:000000000000663C                 mov     byte ptr [rbp+old], r8b
.text:0000000000006643                 call    last_component
.text:0000000000006648                 cmp     byte ptr [rax], 2Eh ; '.'
.text:000000000000664B                 mov     r14, rax
.text:000000000000664E                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006656                 movzx   r9d, byte ptr [rbp+s2]
.text:000000000000665E                 jnz     short loc_6687
.text:0000000000006660                 xor     eax, eax
.text:0000000000006662
.text:0000000000006662 loc_6662:                               ; CODE XREF: copy_internal+1FDA↓j
.text:0000000000006662                 xor     edx, edx
.text:0000000000006664                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:0000000000006669                 setz    dl
.text:000000000000666C                 movzx   edx, byte ptr [r14+rdx+1]
.text:0000000000006672                 test    dl, dl
.text:0000000000006674                 jz      loc_7148
.text:000000000000667A                 cmp     dl, 2Fh ; '/'
.text:000000000000667D                 jz      loc_7148
.text:0000000000006683                 test    al, al
.text:0000000000006685                 jnz     short loc_669D
.text:0000000000006687
.text:0000000000006687 loc_6687:                               ; CODE XREF: copy_internal+D1E↑j
.text:0000000000006687                 mov     eax, [rbp+var_1F0.st_mode]
.text:000000000000668D                 and     eax, 0F000h
.text:0000000000006692                 cmp     eax, 4000h
.text:0000000000006697                 jz      loc_7167
.text:000000000000669D
.text:000000000000669D loc_669D:                               ; CODE XREF: copy_internal+D45↑j
.text:000000000000669D                                         ; copy_internal+1FCF↓j
.text:000000000000669D                 cmp     r15d, 3
.text:00000000000066A1                 jz      short loc_6709
.text:00000000000066A3                 mov     rdi, r14        ; s
.text:00000000000066A6                 mov     byte ptr [rbp+var_35C], r9b
.text:00000000000066AD                 call    _strlen
.text:00000000000066B2                 mov     rdi, [rbp+file]
.text:00000000000066B9                 mov     [rbp+old], rax
.text:00000000000066C0                 call    last_component
.text:00000000000066C5                 mov     rdi, rax        ; s
.text:00000000000066C8                 mov     [rbp+s2], rax
.text:00000000000066CF                 call    _strlen
.text:00000000000066D4                 mov     r15, cs:simple_backup_suffix
.text:00000000000066DB                 mov     r12, rax
.text:00000000000066DE                 mov     rdi, r15        ; s
.text:00000000000066E1                 call    _strlen
.text:00000000000066E6                 mov     r8, rax
.text:00000000000066E9                 lea     rax, [r12+rax]
.text:00000000000066ED                 cmp     [rbp+old], rax
.text:00000000000066F4                 mov     rsi, [rbp+s2]   ; s2
.text:00000000000066FB                 movzx   r9d, byte ptr [rbp+var_35C]
.text:0000000000006703                 jz      loc_815E
.text:0000000000006709
.text:0000000000006709 loc_6709:                               ; CODE XREF: copy_internal+D61↑j
.text:0000000000006709                                         ; copy_internal+2841↓j ...
.text:0000000000006709                 mov     edx, [rbx]
.text:000000000000670B                 mov     rsi, [rbp+file]
.text:0000000000006712                 mov     edi, 0FFFFFF9Ch
.text:0000000000006717                 mov     byte ptr [rbp+old], r9b
.text:000000000000671E                 call    backup_file_rename
.text:0000000000006723                 test    rax, rax
.text:0000000000006726                 mov     r12, rax
.text:0000000000006729                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000006731                 jz      loc_8051
.text:0000000000006737                 mov     rdi, rax        ; s
.text:000000000000673A                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006741                 mov     r14d, 1
.text:0000000000006747                 call    _strlen
.text:000000000000674C                 lea     rdx, [rax+1]    ; n
.text:0000000000006750                 add     rax, 1Fh
.text:0000000000006754                 mov     rsi, r12        ; src
.text:0000000000006757                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000675B                 mov     r15d, 11h
.text:0000000000006761                 sub     rsp, rax
.text:0000000000006764                 lea     rdi, [rsp+3C0h+var_3B1]
.text:0000000000006769                 and     rdi, 0FFFFFFFFFFFFFFF0h ; dest
.text:000000000000676D                 call    _memcpy
.text:0000000000006772                 mov     rdi, r12        ; ptr
.text:0000000000006775                 mov     [rbp+old], rax
.text:000000000000677C                 call    free
.text:0000000000006781                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006789                 jmp     loc_5CCE
.text:0000000000006789 ; ---------------------------------------------------------------------------
.text:000000000000678E                 align 10h
.text:0000000000006790
.text:0000000000006790 loc_6790:                               ; CODE XREF: copy_internal+87D↑j
.text:0000000000006790                 cmp     byte ptr [rbx+16h], 0
.text:0000000000006794                 jnz     loc_6B20
.text:000000000000679A
.text:000000000000679A loc_679A:                               ; CODE XREF: copy_internal+88C↑j
.text:000000000000679A                 mov     rsi, [rbp+file]
.text:00000000000067A1                 mov     edi, 4
.text:00000000000067A6                 mov     [rbp+filename], r9
.text:00000000000067AD                 xor     r12d, r12d
.text:00000000000067B0                 call    quotearg_style
.text:00000000000067B5                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:00000000000067BC                 mov     edx, 5          ; category
.text:00000000000067C1                 xor     edi, edi        ; domainname
.text:00000000000067C3                 mov     rbx, rax
.text:00000000000067C6                 call    _dcgettext
.text:00000000000067CB                 mov     r9, [rbp+filename]
.text:00000000000067D2                 mov     rdx, rax        ; format
.text:00000000000067D5                 mov     rcx, rbx
.text:00000000000067D8                 xor     edi, edi        ; status
.text:00000000000067DA                 xor     eax, eax
.text:00000000000067DC                 mov     esi, [r9]       ; errnum
.text:00000000000067DF                 call    _error
.text:00000000000067E4                 jmp     loc_6186
.text:00000000000067E4 ; ---------------------------------------------------------------------------
.text:00000000000067E9                 align 10h
.text:00000000000067F0
.text:00000000000067F0 loc_67F0:                               ; CODE XREF: copy_internal+33A↑j
.text:00000000000067F0                 call    ___errno_location
.text:00000000000067F5                 mov     r15d, [rax]
.text:00000000000067F8                 jmp     loc_59CB
.text:00000000000067F8 ; ---------------------------------------------------------------------------
.text:00000000000067FD                 align 20h
.text:0000000000006800
.text:0000000000006800 loc_6800:                               ; CODE XREF: copy_internal+534↑j
.text:0000000000006800                 mov     rax, [rbp+filename]
.text:0000000000006807                 cmp     byte ptr [rax], 2Fh ; '/'
.text:000000000000680A                 jz      short loc_6844
.text:000000000000680C                 mov     rdi, [rbp+file]
.text:0000000000006813                 call    dir_name
.text:0000000000006818                 lea     r8, asc_15AEB+1 ; "."
.text:000000000000681F                 mov     rdi, rax
.text:0000000000006822                 mov     ecx, 2
.text:0000000000006827                 mov     r12, rax
.text:000000000000682A                 mov     rsi, r8
.text:000000000000682D                 repe cmpsb
.text:000000000000682F                 setnbe  al
.text:0000000000006832                 sbb     al, 0
.text:0000000000006834                 test    al, al
.text:0000000000006836                 jnz     loc_7B18
.text:000000000000683C
.text:000000000000683C loc_683C:                               ; CODE XREF: copy_internal+21EE↓j
.text:000000000000683C                                         ; copy_internal+220A↓j ...
.text:000000000000683C                 mov     rdi, r12        ; ptr
.text:000000000000683F                 call    free
.text:0000000000006844
.text:0000000000006844 loc_6844:                               ; CODE XREF: copy_internal+ECA↑j
.text:0000000000006844                 movzx   ecx, byte ptr [rbx+16h]
.text:0000000000006848                 mov     rdx, [rbp+file]
.text:000000000000684F                 mov     r8d, 0FFFFFFFFh
.text:0000000000006855                 mov     rdi, [rbp+filename]
.text:000000000000685C                 mov     esi, 0FFFFFF9Ch
.text:0000000000006861                 call    force_symlinkat
.text:0000000000006866                 xor     r8d, r8d
.text:0000000000006869                 test    eax, eax
.text:000000000000686B                 mov     r12d, eax
.text:000000000000686E                 jle     loc_5EBF
.text:0000000000006874                 mov     rdx, [rbp+filename]
.text:000000000000687B                 mov     esi, 4
.text:0000000000006880                 mov     edi, 1
.text:0000000000006885                 call    quotearg_n_style
.text:000000000000688A                 mov     rdx, [rbp+file]
.text:0000000000006891                 mov     esi, 4
.text:0000000000006896                 xor     edi, edi
.text:0000000000006898                 mov     r13, rax
.text:000000000000689B                 call    quotearg_n_style
.text:00000000000068A0                 lea     rsi, aCannotCreateSy ; "cannot create symbolic link %s to %s"
.text:00000000000068A7                 mov     r14, rax
.text:00000000000068AA                 mov     edx, 5          ; category
.text:00000000000068AF                 xor     edi, edi        ; domainname
.text:00000000000068B1                 call    _dcgettext
.text:00000000000068B6                 mov     r8, r13
.text:00000000000068B9                 mov     rdx, rax        ; format
.text:00000000000068BC                 mov     rcx, r14
.text:00000000000068BF                 mov     esi, r12d       ; errnum
.text:00000000000068C2                 xor     edi, edi        ; status
.text:00000000000068C4                 xor     eax, eax
.text:00000000000068C6                 call    _error
.text:00000000000068CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000068D0
.text:00000000000068D0 loc_68D0:                               ; CODE XREF: copy_internal+576↑j
.text:00000000000068D0                                         ; copy_internal+BC0↑j ...
.text:00000000000068D0                 cmp     byte ptr [rbx+25h], 0
.text:00000000000068D4                 jnz     loc_6A50
.text:00000000000068DA                 cmp     [rbp+s2], 0
.text:00000000000068E2                 jz      loc_7180
.text:00000000000068E8
.text:00000000000068E8 loc_68E8:                               ; CODE XREF: copy_internal+110A↓j
.text:00000000000068E8                                         ; copy_internal+1853↓j
.text:00000000000068E8                 mov     rax, [rbp+old]
.text:00000000000068EF                 test    rax, rax
.text:00000000000068F2                 jz      loc_5C50
.text:00000000000068F8                 mov     rsi, [rbp+file] ; new
.text:00000000000068FF                 mov     rdi, rax        ; old
.text:0000000000006902                 call    _rename
.text:0000000000006907                 test    eax, eax
.text:0000000000006909                 jnz     loc_71A0
.text:000000000000690F                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000006913                 jz      loc_5C50
.text:0000000000006919                 mov     rdx, [rbp+file]
.text:0000000000006920                 mov     esi, 4
.text:0000000000006925                 mov     edi, 1
.text:000000000000692A                 call    quotearg_n_style
.text:000000000000692F                 mov     rdx, [rbp+old]
.text:0000000000006936                 xor     edi, edi
.text:0000000000006938                 mov     esi, 4
.text:000000000000693D                 mov     r12, rax
.text:0000000000006940                 call    quotearg_n_style
.text:0000000000006945                 lea     rsi, aSSUnbackup ; "%s -> %s (unbackup)\n"
.text:000000000000694C                 mov     rbx, rax
.text:000000000000694F                 xor     edi, edi        ; domainname
.text:0000000000006951                 mov     edx, 5          ; category
.text:0000000000006956                 call    _dcgettext
.text:000000000000695B                 mov     rcx, r12
.text:000000000000695E                 mov     rsi, rax
.text:0000000000006961                 mov     rdx, rbx
.text:0000000000006964                 mov     edi, 1
.text:0000000000006969                 xor     eax, eax
.text:000000000000696B                 call    ___printf_chk
.text:0000000000006970                 jmp     loc_5C50
.text:0000000000006970 ; ---------------------------------------------------------------------------
.text:0000000000006975                 align 8
.text:0000000000006978
.text:0000000000006978 loc_6978:                               ; CODE XREF: copy_internal+3B4↑j
.text:0000000000006978                 cmp     byte ptr [rbx+2Eh], 0
.text:000000000000697C                 jnz     loc_6350
.text:0000000000006982                 test    r15d, r15d
.text:0000000000006985                 jz      loc_5DDB
.text:000000000000698B                 jmp     loc_5DA9
.text:0000000000006990 ; ---------------------------------------------------------------------------
.text:0000000000006990
.text:0000000000006990 loc_6990:                               ; CODE XREF: copy_internal+47F↑j
.text:0000000000006990                 test    r13b, r13b
.text:0000000000006993                 mov     rdx, [rbp+stat_buf.st_dev]
.text:000000000000699A                 mov     rdi, [rbp+stat_buf.st_ino]
.text:00000000000069A1                 jz      loc_7250
.text:00000000000069A7                 mov     rsi, rdi
.text:00000000000069AA                 mov     rdi, [rbp+file] ; src
.text:00000000000069B1                 call    remember_copied
.text:00000000000069B6                 mov     [rbp+s2], rax
.text:00000000000069BD
.text:00000000000069BD loc_69BD:                               ; CODE XREF: copy_internal+191F↓j
.text:00000000000069BD                 cmp     [rbp+s2], 0
.text:00000000000069C5                 jz      loc_6EC0
.text:00000000000069CB
.text:00000000000069CB loc_69CB:                               ; CODE XREF: copy_internal+1543↓j
.text:00000000000069CB                 mov     rsi, [rbp+s2]
.text:00000000000069D2                 mov     rdi, [rbp+filename]
.text:00000000000069D9                 call    same_name
.text:00000000000069DE                 test    al, al
.text:00000000000069E0                 jz      loc_7920
.text:00000000000069E6                 mov     rdx, cs:top_level_dst_name
.text:00000000000069ED                 mov     esi, 4
.text:00000000000069F2                 mov     edi, 1
.text:00000000000069F7                 call    quotearg_n_style
.text:00000000000069FC                 mov     rdx, cs:top_level_src_name
.text:0000000000006A03                 mov     esi, 4
.text:0000000000006A08                 xor     edi, edi
.text:0000000000006A0A                 mov     r13, rax
.text:0000000000006A0D                 call    quotearg_n_style
.text:0000000000006A12                 lea     rsi, aCannotCopyADir ; "cannot copy a directory, %s, into itsel"...
.text:0000000000006A19                 mov     r12, rax
.text:0000000000006A1C                 mov     edx, 5          ; category
.text:0000000000006A21                 xor     edi, edi        ; domainname
.text:0000000000006A23                 call    _dcgettext
.text:0000000000006A28                 mov     r8, r13
.text:0000000000006A2B                 mov     rdx, rax        ; format
.text:0000000000006A2E                 mov     rcx, r12
.text:0000000000006A31                 xor     eax, eax
.text:0000000000006A33                 xor     esi, esi        ; errnum
.text:0000000000006A35                 xor     edi, edi        ; status
.text:0000000000006A37                 call    _error
.text:0000000000006A3C                 mov     rax, [rbp+var_340]
.text:0000000000006A43                 mov     byte ptr [rax], 1
.text:0000000000006A46
.text:0000000000006A46 loc_6A46:                               ; CODE XREF: copy_internal+156E↓j
.text:0000000000006A46                                         ; copy_internal+206B↓j
.text:0000000000006A46                 cmp     byte ptr [rbx+25h], 0
.text:0000000000006A4A                 jz      loc_68E8
.text:0000000000006A50
.text:0000000000006A50 loc_6A50:                               ; CODE XREF: copy_internal+305↑j
.text:0000000000006A50                                         ; copy_internal+F94↑j ...
.text:0000000000006A50                 call    restore_default_fscreatecon_or_die
.text:0000000000006A55                 nop     dword ptr [rax]
.text:0000000000006A58
.text:0000000000006A58 loc_6A58:                               ; CODE XREF: copy_internal+953↑j
.text:0000000000006A58                                         ; copy_internal+2074↓j
.text:0000000000006A58                 cmp     [rbp+stat_buf.st_nlink], 1
.text:0000000000006A60                 ja      loc_6E48
.text:0000000000006A66                 test    r13b, r13b
.text:0000000000006A69                 mov     edx, [rbx+4]
.text:0000000000006A6C                 jz      short loc_6A77
.text:0000000000006A6E                 cmp     edx, 3
.text:0000000000006A71                 jz      loc_6E48
.text:0000000000006A77
.text:0000000000006A77 loc_6A77:                               ; CODE XREF: copy_internal+112C↑j
.text:0000000000006A77                 cmp     edx, 4
.text:0000000000006A7A                 mov     [rbp+s2], 0
.text:0000000000006A85                 jz      loc_6E48
.text:0000000000006A8B
.text:0000000000006A8B loc_6A8B:                               ; CODE XREF: copy_internal+1584↓j
.text:0000000000006A8B                 test    al, al
.text:0000000000006A8D                 jnz     loc_6299
.text:0000000000006A93
.text:0000000000006A93 loc_6A93:                               ; CODE XREF: copy_internal+2085↓j
.text:0000000000006A93                 movzx   eax, r14b
.text:0000000000006A97                 mov     [rbp+fildes], eax
.text:0000000000006A9D                 jmp     loc_5DF0
.text:0000000000006A9D ; ---------------------------------------------------------------------------
.text:0000000000006AA2                 align 8
.text:0000000000006AA8
.text:0000000000006AA8 loc_6AA8:                               ; CODE XREF: copy_internal+999↑j
.text:0000000000006AA8                 mov     rdx, [rbp+file]
.text:0000000000006AAF                 mov     esi, 4
.text:0000000000006AB4                 mov     edi, 1
.text:0000000000006AB9                 call    quotearg_n_style
.text:0000000000006ABE                 mov     rdx, [rbp+filename]
.text:0000000000006AC5                 mov     esi, 4
.text:0000000000006ACA                 xor     edi, edi
.text:0000000000006ACC                 mov     r12, rax
.text:0000000000006ACF                 call    quotearg_n_style
.text:0000000000006AD4                 lea     rsi, aCannotMoveSToS ; "cannot move %s to %s"
.text:0000000000006ADB                 mov     rbx, rax
.text:0000000000006ADE                 mov     edx, 5          ; category
.text:0000000000006AE3                 xor     edi, edi        ; domainname
.text:0000000000006AE5                 call    _dcgettext
.text:0000000000006AEA                 mov     r8, r12
.text:0000000000006AED                 mov     rcx, rbx
.text:0000000000006AF0                 mov     rdx, rax        ; format
.text:0000000000006AF3                 mov     esi, r15d       ; errnum
.text:0000000000006AF6
.text:0000000000006AF6 loc_6AF6:                               ; CODE XREF: copy_internal+1A8C↓j
.text:0000000000006AF6                 xor     edi, edi        ; status
.text:0000000000006AF8                 xor     eax, eax
.text:0000000000006AFA                 call    _error
.text:0000000000006AFF                 mov     rsi, [rbp+stat_buf.st_dev]
.text:0000000000006B06                 mov     rdi, [rbp+stat_buf.st_ino]
.text:0000000000006B0D                 call    forget_created
.text:0000000000006B12                 jmp     loc_5C50
.text:0000000000006B12 ; ---------------------------------------------------------------------------
.text:0000000000006B17                 align 20h
.text:0000000000006B20
.text:0000000000006B20 loc_6B20:                               ; CODE XREF: copy_internal+E54↑j
.text:0000000000006B20                 xor     r8d, r8d
.text:0000000000006B23                 jmp     loc_61D2
.text:0000000000006B23 ; ---------------------------------------------------------------------------
.text:0000000000006B28                 align 10h
.text:0000000000006B30
.text:0000000000006B30 loc_6B30:                               ; CODE XREF: copy_internal+2A2↑j
.text:0000000000006B30                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006B34                 jz      loc_657C
.text:0000000000006B3A                 nop     word ptr [rax+rax+00h]
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: copy_internal+C24↑j
.text:0000000000006B40                                         ; copy_internal+166A↓j
.text:0000000000006B40                 mov     eax, [rbx+8]
.text:0000000000006B43                 cmp     eax, 2
.text:0000000000006B46                 jz      short loc_6BC4
.text:0000000000006B48                 cmp     eax, 3
.text:0000000000006B4B                 jz      short loc_6B98
.text:0000000000006B4D                 cmp     eax, 4
.text:0000000000006B50                 jnz     loc_65D0
.text:0000000000006B56                 cmp     byte ptr [rbx+2Fh], 0
.text:0000000000006B5A                 jz      loc_65D0
.text:0000000000006B60                 mov     esi, [rbp+var_1F0.st_mode]
.text:0000000000006B66                 mov     rdi, [rbp+file] ; name
.text:0000000000006B6D                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006B74                 mov     byte ptr [rbp+old], r8b
.text:0000000000006B7B                 call    writable_destination
.text:0000000000006B80                 test    al, al
.text:0000000000006B82                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006B8A                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006B92                 jnz     loc_65D0
.text:0000000000006B98
.text:0000000000006B98 loc_6B98:                               ; CODE XREF: copy_internal+120B↑j
.text:0000000000006B98                 mov     rsi, [rbp+file]
.text:0000000000006B9F                 lea     rdx, [rbp+var_1F0.st_mode]
.text:0000000000006BA6                 mov     rdi, rbx
.text:0000000000006BA9                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006BB0                 mov     byte ptr [rbp+old], r8b
.text:0000000000006BB7                 call    overwrite_ok_isra_12
.text:0000000000006BBC                 test    al, al
.text:0000000000006BBE                 jnz     loc_7FD0
.text:0000000000006BC4
.text:0000000000006BC4 loc_6BC4:                               ; CODE XREF: copy_internal+1206↑j
.text:0000000000006BC4                                         ; copy_internal+2706↓j
.text:0000000000006BC4                 cmp     qword ptr [rbp+fildes], 0
.text:0000000000006BCC                 jz      loc_6180
.text:0000000000006BD2                 mov     rax, qword ptr [rbp+fildes]
.text:0000000000006BD9                 mov     byte ptr [rax], 1
.text:0000000000006BDC                 jmp     loc_6180
.text:0000000000006BDC ; ---------------------------------------------------------------------------
.text:0000000000006BE1                 align 8
.text:0000000000006BE8
.text:0000000000006BE8 loc_6BE8:                               ; CODE XREF: copy_internal+836↑j
.text:0000000000006BE8                 mov     rdi, [rbx+40h]
.text:0000000000006BEC                 mov     rsi, [rbp+file]
.text:0000000000006BF3                 lea     rdx, [rbp+stat_buf]
.text:0000000000006BFA                 mov     r12d, r13d
.text:0000000000006BFD                 call    record_file
.text:0000000000006C02                 jmp     loc_6186
.text:0000000000006C02 ; ---------------------------------------------------------------------------
.text:0000000000006C07                 align 10h
.text:0000000000006C10
.text:0000000000006C10 loc_6C10:                               ; CODE XREF: copy_internal+CBB↑j
.text:0000000000006C10                 cmp     r12d, 4000h
.text:0000000000006C17                 jz      loc_7130
.text:0000000000006C1D
.text:0000000000006C1D loc_6C1D:                               ; CODE XREF: copy_internal+17EA↓j
.text:0000000000006C1D                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006C21                 jz      short loc_6C2F
.text:0000000000006C23                 mov     r15d, [rbx]
.text:0000000000006C26                 test    r15d, r15d
.text:0000000000006C29                 jnz     loc_78C7
.text:0000000000006C2F
.text:0000000000006C2F loc_6C2F:                               ; CODE XREF: copy_internal+12E1↑j
.text:0000000000006C2F                 mov     rsi, [rbp+file]
.text:0000000000006C36                 mov     edi, 4
.text:0000000000006C3B                 xor     r12d, r12d
.text:0000000000006C3E                 call    quotearg_style
.text:0000000000006C43                 lea     rsi, aCannotOverwrit ; "cannot overwrite directory %s with non-"...
.text:0000000000006C4A                 mov     rbx, rax
.text:0000000000006C4D                 mov     edx, 5          ; category
.text:0000000000006C52                 xor     edi, edi        ; domainname
.text:0000000000006C54                 call    _dcgettext
.text:0000000000006C59                 mov     rcx, rbx
.text:0000000000006C5C                 mov     rdx, rax        ; format
.text:0000000000006C5F                 xor     esi, esi        ; errnum
.text:0000000000006C61                 xor     edi, edi        ; status
.text:0000000000006C63                 xor     eax, eax
.text:0000000000006C65                 call    _error
.text:0000000000006C6A                 jmp     loc_6186
.text:0000000000006C6A ; ---------------------------------------------------------------------------
.text:0000000000006C6F                 align 10h
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: copy_internal+4EE↑j
.text:0000000000006C70                 mov     ecx, [rbp+fildes]
.text:0000000000006C76                 mov     edx, [rbp+var_314]
.text:0000000000006C7C                 mov     r8, rbx
.text:0000000000006C7F                 mov     rsi, [rbp+file]
.text:0000000000006C86                 mov     rdi, [rbp+filename]
.text:0000000000006C8D                 call    set_process_security_ctx
.text:0000000000006C92                 test    al, al
.text:0000000000006C94                 jz      loc_5C50
.text:0000000000006C9A                 mov     eax, r12d
.text:0000000000006C9D                 and     eax, 12h
.text:0000000000006CA0                 mov     [rbp+var_35C], eax
.text:0000000000006CA6                 jmp     loc_6489
.text:0000000000006CA6 ; ---------------------------------------------------------------------------
.text:0000000000006CAB                 align 10h
.text:0000000000006CB0
.text:0000000000006CB0 loc_6CB0:                               ; CODE XREF: copy_internal+818↑j
.text:0000000000006CB0                 mov     rdi, [rbp+file]
.text:0000000000006CB7                 mov     rcx, rbx
.text:0000000000006CBA                 mov     edx, 1
.text:0000000000006CBF                 xor     esi, esi
.text:0000000000006CC1                 call    set_file_security_ctx
.text:0000000000006CC6                 jmp     loc_615E
.text:0000000000006CC6 ; ---------------------------------------------------------------------------
.text:0000000000006CCB                 align 10h
.text:0000000000006CD0
.text:0000000000006CD0 loc_6CD0:                               ; CODE XREF: copy_internal+80E↑j
.text:0000000000006CD0                 lea     rsi, aRenamed   ; "renamed "
.text:0000000000006CD7                 mov     edx, 5          ; category
.text:0000000000006CDC                 xor     edi, edi        ; domainname
.text:0000000000006CDE                 call    _dcgettext
.text:0000000000006CE3                 mov     edi, 1
.text:0000000000006CE8                 mov     rsi, rax
.text:0000000000006CEB                 xor     eax, eax
.text:0000000000006CED                 call    ___printf_chk
.text:0000000000006CF2                 mov     rdx, [rbp+old]
.text:0000000000006CF9                 mov     rsi, [rbp+file]
.text:0000000000006D00                 mov     rdi, [rbp+filename]
.text:0000000000006D07                 call    emit_verbose
.text:0000000000006D0C                 jmp     loc_6154
.text:0000000000006D0C ; ---------------------------------------------------------------------------
.text:0000000000006D11                 align 8
.text:0000000000006D18
.text:0000000000006D18 loc_6D18:                               ; CODE XREF: copy_internal+20F↑j
.text:0000000000006D18                 mov     rax, [rbp+var_1F0.st_dev]
.text:0000000000006D1F                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000006D26                 jnz     loc_5B55
.text:0000000000006D2C                 movzx   eax, byte ptr [rbx+17h]
.text:0000000000006D30                 test    al, al
.text:0000000000006D32                 jnz     loc_70C8
.text:0000000000006D38                 cmp     dword ptr [rbx+4], 2
.text:0000000000006D3C                 mov     ecx, 1
.text:0000000000006D41                 mov     r15d, 1
.text:0000000000006D47                 jz      loc_6ED5
.text:0000000000006D4D                 lea     r12, [rbp+var_160]
.text:0000000000006D54                 mov     rsi, [rbp+file] ; filename
.text:0000000000006D5B                 mov     edi, 1          ; ver
.text:0000000000006D60                 mov     byte ptr [rbp+s2], r9b
.text:0000000000006D67                 mov     byte ptr [rbp+old], r8b
.text:0000000000006D6E                 mov     rdx, r12        ; stat_buf
.text:0000000000006D71
.text:0000000000006D71 loc_6D71:                               ; DATA XREF: .rodata:__PRETTY_FUNCTION___7067↓o
.text:0000000000006D71                 call    ___lxstat
.text:0000000000006D76                 test    eax, eax
.text:0000000000006D78                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000006D80                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000006D88                 jz      loc_7D92
.text:0000000000006D8E
.text:0000000000006D8E loc_6D8E:                               ; CODE XREF: copy_internal+15C8↓j
.text:0000000000006D8E                                         ; copy_internal+15D2↓j ...
.text:0000000000006D8E                 xor     r14d, r14d
.text:0000000000006D91                 jmp     loc_5B5F
.text:0000000000006D91 ; ---------------------------------------------------------------------------
.text:0000000000006D96                 align 20h
.text:0000000000006DA0
.text:0000000000006DA0 loc_6DA0:                               ; CODE XREF: copy_internal+B63↑j
.text:0000000000006DA0                                         ; copy_internal+B76↑j
.text:0000000000006DA0                 sub     rsp, 30h
.text:0000000000006DA4                 mov     rsi, [rbp+ptr]
.text:0000000000006DAB                 lea     rax, [rsp+3F0h+var_3E1]
.text:0000000000006DB0                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000006DB4                 test    r14b, r14b
.text:0000000000006DB7                 mov     qword ptr [rbp+fd], rax
.text:0000000000006DBE                 mov     [rax], rsi
.text:0000000000006DC1                 mov     [rax+8], rdx
.text:0000000000006DC5                 mov     [rax+10h], rcx
.text:0000000000006DC9                 jnz     short loc_6DE1
.text:0000000000006DCB                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000006DD1                 and     eax, 0F000h
.text:0000000000006DD6                 cmp     eax, 4000h
.text:0000000000006DDB                 jz      loc_7E38
.text:0000000000006DE1
.text:0000000000006DE1 loc_6DE1:                               ; CODE XREF: copy_internal+1489↑j
.text:0000000000006DE1                 mov     esi, [rbp+var_35C]
.text:0000000000006DE7                 mov     r15, [rbp+file]
.text:0000000000006DEE                 not     esi
.text:0000000000006DF0                 mov     rdi, r15        ; path
.text:0000000000006DF3                 and     esi, r12d       ; mode
.text:0000000000006DF6                 call    _mkdir
.text:0000000000006DFB                 test    eax, eax
.text:0000000000006DFD                 jz      loc_75C0
.text:0000000000006E03                 mov     rsi, r15
.text:0000000000006E06                 mov     edi, 4
.text:0000000000006E0B                 call    quotearg_style
.text:0000000000006E10                 lea     rsi, aCannotCreateDi ; "cannot create directory %s"
.text:0000000000006E17                 mov     r13, rax
.text:0000000000006E1A                 mov     edx, 5          ; category
.text:0000000000006E1F
.text:0000000000006E1F loc_6E1F:                               ; CODE XREF: copy_internal+261B↓j
.text:0000000000006E1F                                         ; copy_internal+26C5↓j ...
.text:0000000000006E1F                 xor     edi, edi        ; domainname
.text:0000000000006E21                 call    _dcgettext
.text:0000000000006E26                 mov     r12, rax
.text:0000000000006E29                 call    ___errno_location
.text:0000000000006E2E                 mov     esi, [rax]      ; errnum
.text:0000000000006E30                 mov     rcx, r13
.text:0000000000006E33                 mov     rdx, r12        ; format
.text:0000000000006E36                 xor     edi, edi        ; status
.text:0000000000006E38                 xor     eax, eax
.text:0000000000006E3A                 call    _error
.text:0000000000006E3F                 jmp     loc_68D0
.text:0000000000006E3F ; ---------------------------------------------------------------------------
.text:0000000000006E44                 align 8
.text:0000000000006E48
.text:0000000000006E48 loc_6E48:                               ; CODE XREF: copy_internal+1120↑j
.text:0000000000006E48                                         ; copy_internal+1131↑j ...
.text:0000000000006E48                 mov     rdx, [rbp+stat_buf.st_dev]
.text:0000000000006E4F                 mov     rsi, [rbp+stat_buf.st_ino]
.text:0000000000006E56                 mov     rdi, [rbp+file] ; src
.text:0000000000006E5D                 call    remember_copied
.text:0000000000006E62                 mov     [rbp+s2], rax
.text:0000000000006E69
.text:0000000000006E69 loc_6E69:                               ; CODE XREF: copy_internal+1982↓j
.text:0000000000006E69                 cmp     [rbp+s2], 0
.text:0000000000006E71                 jz      short loc_6EC0
.text:0000000000006E73                 mov     eax, [rbp+var_314]
.text:0000000000006E79                 and     eax, 0F000h
.text:0000000000006E7E                 cmp     eax, 4000h
.text:0000000000006E83                 jz      loc_69CB
.text:0000000000006E89                 movzx   ecx, byte ptr [rbx+2Eh]
.text:0000000000006E8D                 mov     r8d, [rbp+fd]
.text:0000000000006E94                 mov     edx, 1
.text:0000000000006E99                 mov     rsi, [rbp+file]
.text:0000000000006EA0                 mov     rdi, [rbp+s2]
.text:0000000000006EA7                 call    create_hard_link
.text:0000000000006EAC                 test    al, al
.text:0000000000006EAE                 jz      loc_6A46
.text:0000000000006EB4                 jmp     loc_6180
.text:0000000000006EB4 ; ---------------------------------------------------------------------------
.text:0000000000006EB9                 align 20h
.text:0000000000006EC0
.text:0000000000006EC0 loc_6EC0:                               ; CODE XREF: copy_internal+1085↑j
.text:0000000000006EC0                                         ; copy_internal+1531↑j ...
.text:0000000000006EC0                 movzx   eax, byte ptr [rbx+18h]
.text:0000000000006EC4                 jmp     loc_6A8B
.text:0000000000006EC4 ; ---------------------------------------------------------------------------
.text:0000000000006EC9                 align 10h
.text:0000000000006ED0
.text:0000000000006ED0 loc_6ED0:                               ; CODE XREF: copy_internal+219↑j
.text:0000000000006ED0                 xor     ecx, ecx
.text:0000000000006ED2                 xor     r15d, r15d
.text:0000000000006ED5
.text:0000000000006ED5 loc_6ED5:                               ; CODE XREF: copy_internal+1407↑j
.text:0000000000006ED5                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000006EDB                 lea     rdx, [rbp+stat_buf]
.text:0000000000006EE2                 and     eax, 0F000h
.text:0000000000006EE7                 cmp     eax, 0A000h
.text:0000000000006EEC                 jz      loc_7B93
.text:0000000000006EF2
.text:0000000000006EF2 loc_6EF2:                               ; CODE XREF: copy_internal+226A↓j
.text:0000000000006EF2                                         ; copy_internal+24C6↓j ...
.text:0000000000006EF2                 mov     esi, [rbx]
.text:0000000000006EF4                 test    esi, esi
.text:0000000000006EF6                 jz      loc_73D8
.text:0000000000006EFC                 test    cl, cl
.text:0000000000006EFE                 jnz     loc_7F92
.text:0000000000006F04                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006F08                 jnz     loc_6D8E
.text:0000000000006F0E                 cmp     dword ptr [rbx+4], 2
.text:0000000000006F12                 jz      loc_6D8E
.text:0000000000006F18                 mov     eax, [rdx+18h]
.text:0000000000006F1B                 and     eax, 0F000h
.text:0000000000006F20                 cmp     eax, 0A000h
.text:0000000000006F25                 jnz     loc_6D8E
.text:0000000000006F2B                 mov     eax, [r12+18h]
.text:0000000000006F30                 and     eax, 0F000h
.text:0000000000006F35                 cmp     eax, 0A000h
.text:0000000000006F3A                 jz      loc_6D8E
.text:0000000000006F40
.text:0000000000006F40 loc_6F40:                               ; CODE XREF: copy_internal+177F↓j
.text:0000000000006F40                                         ; copy_internal+1AE1↓j ...
.text:0000000000006F40                 mov     rdx, [rbp+file]
.text:0000000000006F47                 mov     esi, 4
.text:0000000000006F4C                 mov     edi, 1
.text:0000000000006F51                 call    quotearg_n_style
.text:0000000000006F56                 mov     rdx, [rbp+filename]
.text:0000000000006F5D                 mov     esi, 4
.text:0000000000006F62                 xor     edi, edi
.text:0000000000006F64                 mov     r12, rax
.text:0000000000006F67                 call    quotearg_n_style
.text:0000000000006F6C                 lea     rsi, aSAndSAreTheSam ; "%s and %s are the same file"
.text:0000000000006F73                 mov     rbx, rax
.text:0000000000006F76                 mov     edx, 5          ; category
.text:0000000000006F7B
.text:0000000000006F7B loc_6F7B:                               ; CODE XREF: copy_internal+23B6↓j
.text:0000000000006F7B                                         ; copy_internal+25A7↓j ...
.text:0000000000006F7B                 xor     edi, edi        ; domainname
.text:0000000000006F7D                 call    _dcgettext
.text:0000000000006F82                 mov     r8, r12
.text:0000000000006F85                 mov     rdx, rax        ; format
.text:0000000000006F88                 mov     rcx, rbx
.text:0000000000006F8B                 xor     esi, esi        ; errnum
.text:0000000000006F8D                 xor     edi, edi        ; status
.text:0000000000006F8F                 xor     eax, eax
.text:0000000000006F91                 call    _error
.text:0000000000006F96                 jmp     loc_5C50
.text:0000000000006F96 ; ---------------------------------------------------------------------------
.text:0000000000006F9B                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 loc_6FA0:                               ; CODE XREF: copy_internal+239↑j
.text:0000000000006FA0                 cmp     byte ptr [rbx+18h], 0
.text:0000000000006FA4                 jz      loc_65D0
.text:0000000000006FAA                 jmp     loc_6B40
.text:0000000000006FAA ; ---------------------------------------------------------------------------
.text:0000000000006FAF                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: copy_internal+1A9F↓j
.text:0000000000006FB0                                         ; copy_internal+1AA9↓j
.text:0000000000006FB0                 mov     eax, [r12+18h]
.text:0000000000006FB5                 and     eax, 0F000h
.text:0000000000006FBA                 cmp     eax, 0A000h
.text:0000000000006FBF                 jz      loc_5B5F
.text:0000000000006FC5                 test    cl, cl
.text:0000000000006FC7                 jz      short loc_6FD5
.text:0000000000006FC9                 cmp     qword ptr [r12+10h], 1
.text:0000000000006FCF                 ja      loc_838B
.text:0000000000006FD5
.text:0000000000006FD5 loc_6FD5:                               ; CODE XREF: copy_internal+1687↑j
.text:0000000000006FD5                 mov     eax, [rdx+18h]
.text:0000000000006FD8                 and     eax, 0F000h
.text:0000000000006FDD                 cmp     eax, 0A000h
.text:0000000000006FE2                 jz      short loc_7010
.text:0000000000006FE4
.text:0000000000006FE4 loc_6FE4:                               ; CODE XREF: copy_internal+2ABA↓j
.text:0000000000006FE4                 mov     rax, [r12+8]
.text:0000000000006FE9                 cmp     [rdx+8], rax
.text:0000000000006FED                 jnz     loc_5B5F
.text:0000000000006FF3                 mov     rax, [r12]
.text:0000000000006FF7                 cmp     [rdx], rax
.text:0000000000006FFA                 jnz     loc_5B5F
.text:0000000000007000                 movzx   eax, byte ptr [rbx+17h]
.text:0000000000007004                 test    al, al
.text:0000000000007006                 jnz     loc_70C8
.text:000000000000700C
.text:000000000000700C loc_700C:                               ; CODE XREF: copy_internal+2A9F↓j
.text:000000000000700C                                         ; copy_internal+2AB4↓j
.text:000000000000700C                 movzx   esi, byte ptr [rbx+18h]
.text:0000000000007010
.text:0000000000007010 loc_7010:                               ; CODE XREF: copy_internal+16A2↑j
.text:0000000000007010                 test    sil, sil
.text:0000000000007013                 jz      loc_7402
.text:0000000000007019                 mov     eax, [rbp+stat_buf.st_mode]
.text:000000000000701F                 and     eax, 0F000h
.text:0000000000007024                 cmp     eax, 0A000h
.text:0000000000007029                 jnz     loc_7402
.text:000000000000702F                 cmp     qword ptr [r12+10h], 1
.text:0000000000007035                 jbe     loc_7402
.text:000000000000703B                 mov     rdi, [rbp+filename] ; name
.text:0000000000007042                 mov     byte ptr [rbp+var_35C], r9b
.text:0000000000007049                 mov     byte ptr [rbp+s2], r8b
.text:0000000000007050                 mov     [rbp+old], rdx
.text:0000000000007057                 call    _canonicalize_file_name
.text:000000000000705C                 test    rax, rax
.text:000000000000705F                 mov     r15, rax
.text:0000000000007062                 mov     rdx, [rbp+old]
.text:0000000000007069                 movzx   r8d, byte ptr [rbp+s2]
.text:0000000000007071                 movzx   r9d, byte ptr [rbp+var_35C]
.text:0000000000007079                 jz      loc_7402
.text:000000000000707F                 mov     rsi, [rbp+file]
.text:0000000000007086                 mov     rdi, rax
.text:0000000000007089                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007090                 mov     byte ptr [rbp+old], r8b
.text:0000000000007097                 call    same_name
.text:000000000000709C                 mov     rdi, r15        ; ptr
.text:000000000000709F                 xor     eax, 1
.text:00000000000070A2                 mov     r12d, eax
.text:00000000000070A5                 call    free
.text:00000000000070AA                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000070B2                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000070BA                 xor     eax, eax
.text:00000000000070BC
.text:00000000000070BC loc_70BC:                               ; CODE XREF: copy_internal+22CA↓j
.text:00000000000070BC                                         ; copy_internal+268B↓j ...
.text:00000000000070BC                 test    r12b, r12b
.text:00000000000070BF                 jz      loc_6F40
.text:00000000000070C5                 nop     dword ptr [rax]
.text:00000000000070C8
.text:00000000000070C8 loc_70C8:                               ; CODE XREF: copy_internal+13F2↑j
.text:00000000000070C8                                         ; copy_internal+16C6↑j
.text:00000000000070C8                 mov     r14d, eax
.text:00000000000070CB                 jmp     loc_5B5F
.text:00000000000070D0 ; ---------------------------------------------------------------------------
.text:00000000000070D0
.text:00000000000070D0 loc_70D0:                               ; CODE XREF: copy_internal+CDE↑j
.text:00000000000070D0                 mov     rdi, [rbx+40h]
.text:00000000000070D4                 mov     rsi, [rbp+file]
.text:00000000000070DB                 lea     rdx, [rbp+var_1F0]
.text:00000000000070E2                 mov     byte ptr [rbp+s2], r9b
.text:00000000000070E9                 mov     byte ptr [rbp+old], r8b
.text:00000000000070F0                 call    seen_file
.text:00000000000070F5                 test    al, al
.text:00000000000070F7                 movzx   r8d, byte ptr [rbp+old]
.text:00000000000070FF                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007107                 jnz     loc_8455
.text:000000000000710D                 cmp     r12d, 4000h
.text:0000000000007114                 jz      short loc_7130
.text:0000000000007116                 mov     eax, [rbp+var_1F0.st_mode]
.text:000000000000711C                 mov     edx, eax
.text:000000000000711E                 and     edx, 0F000h
.text:0000000000007124                 cmp     edx, 4000h
.text:000000000000712A                 jz      loc_6C1D
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: copy_internal+12D7↑j
.text:0000000000007130                                         ; copy_internal+17D4↑j
.text:0000000000007130                 mov     r15d, [rbx]
.text:0000000000007133
.text:0000000000007133 loc_7133:                               ; CODE XREF: copy_internal+CD4↑j
.text:0000000000007133                 movzx   eax, byte ptr [rbx+18h]
.text:0000000000007137                 test    al, al
.text:0000000000007139                 jnz     loc_7AF0
.text:000000000000713F                 test    r15d, r15d
.text:0000000000007142                 jnz     loc_662E
.text:0000000000007148
.text:0000000000007148 loc_7148:                               ; CODE XREF: copy_internal+D34↑j
.text:0000000000007148                                         ; copy_internal+D3D↑j
.text:0000000000007148                 mov     edx, [rbp+var_1F0.st_mode]
.text:000000000000714E                 and     edx, 0F000h
.text:0000000000007154                 cmp     edx, 4000h
.text:000000000000715A                 setz    r12b
.text:000000000000715E                 or      r12b, al
.text:0000000000007161                 jz      loc_7CFB
.text:0000000000007167
.text:0000000000007167 loc_7167:                               ; CODE XREF: copy_internal+D57↑j
.text:0000000000007167                                         ; copy_internal+21C9↓j ...
.text:0000000000007167                 mov     r14d, r8d
.text:000000000000716A                 mov     r15d, 11h
.text:0000000000007170                 mov     [rbp+old], 0
.text:000000000000717B                 jmp     loc_5CCE
.text:0000000000007180 ; ---------------------------------------------------------------------------
.text:0000000000007180
.text:0000000000007180 loc_7180:                               ; CODE XREF: copy_internal+FA2↑j
.text:0000000000007180                 mov     rsi, [rbp+stat_buf.st_dev]
.text:0000000000007187                 mov     rdi, [rbp+stat_buf.st_ino]
.text:000000000000718E                 call    forget_created
.text:0000000000007193                 jmp     loc_68E8
.text:0000000000007193 ; ---------------------------------------------------------------------------
.text:0000000000007198                 align 20h
.text:00000000000071A0
.text:00000000000071A0 loc_71A0:                               ; CODE XREF: copy_internal+FC9↑j
.text:00000000000071A0                 mov     rsi, [rbp+file]
.text:00000000000071A7                 mov     edi, 4
.text:00000000000071AC                 call    quotearg_style
.text:00000000000071B1                 mov     edx, 5
.text:00000000000071B6                 mov     r12, rax
.text:00000000000071B9                 lea     rsi, aCannotUnBackup ; "cannot un-backup %s"
.text:00000000000071C0                 jmp     loc_623E
.text:00000000000071C0 ; ---------------------------------------------------------------------------
.text:00000000000071C5                 align 8
.text:00000000000071C8
.text:00000000000071C8 loc_71C8:                               ; CODE XREF: copy_internal+53E↑j
.text:00000000000071C8                 cmp     r15d, 8000h
.text:00000000000071CF                 jz      loc_79D0
.text:00000000000071D5                 cmp     r15d, 0A000h
.text:00000000000071DC                 setnz   r8b
.text:00000000000071E0                 and     r8b, [rbx+14h]
.text:00000000000071E4                 jnz     loc_79D0
.text:00000000000071EA                 cmp     r15d, 1000h
.text:00000000000071F1                 jz      loc_82B2
.text:00000000000071F7                 mov     eax, r15d
.text:00000000000071FA                 and     ah, 0BFh
.text:00000000000071FD                 cmp     eax, 2000h
.text:0000000000007202                 jz      loc_7EEC
.text:0000000000007208                 cmp     r15d, 0C000h
.text:000000000000720F                 jz      loc_7EEC
.text:0000000000007215                 cmp     r15d, 0A000h
.text:000000000000721C                 jz      loc_85A0
.text:0000000000007222                 mov     rsi, [rbp+filename]
.text:0000000000007229                 mov     edi, 4
.text:000000000000722E                 call    quotearg_style
.text:0000000000007233                 mov     edx, 5
.text:0000000000007238                 mov     r12, rax
.text:000000000000723B                 lea     rsi, aSHasUnknownFil ; "%s has unknown file type"
.text:0000000000007242                 jmp     loc_64E8
.text:0000000000007242 ; ---------------------------------------------------------------------------
.text:0000000000007247                 align 10h
.text:0000000000007250
.text:0000000000007250 loc_7250:                               ; CODE XREF: copy_internal+1061↑j
.text:0000000000007250                 mov     rsi, rdx
.text:0000000000007253                 call    src_to_dest_lookup
.text:0000000000007258                 mov     [rbp+s2], rax
.text:000000000000725F                 jmp     loc_69BD
.text:000000000000725F ; ---------------------------------------------------------------------------
.text:0000000000007264                 align 8
.text:0000000000007268
.text:0000000000007268 loc_7268:                               ; CODE XREF: copy_internal+A63↑j
.text:0000000000007268                 mov     rsi, [rbp+filename]
.text:000000000000726F                 mov     edi, 4
.text:0000000000007274                 call    quotearg_style
.text:0000000000007279                 lea     rsi, aWarningSourceF ; "warning: source file %s specified more "...
.text:0000000000007280                 mov     rbx, rax
.text:0000000000007283                 xor     edi, edi        ; domainname
.text:0000000000007285                 mov     edx, 5          ; category
.text:000000000000728A                 call    _dcgettext
.text:000000000000728F                 mov     rcx, rbx
.text:0000000000007292                 mov     rdx, rax        ; format
.text:0000000000007295                 xor     esi, esi        ; errnum
.text:0000000000007297                 xor     edi, edi        ; status
.text:0000000000007299                 xor     eax, eax
.text:000000000000729B                 call    _error
.text:00000000000072A0                 jmp     loc_6186
.text:00000000000072A0 ; ---------------------------------------------------------------------------
.text:00000000000072A5                 align 8
.text:00000000000072A8
.text:00000000000072A8 loc_72A8:                               ; CODE XREF: copy_internal+938↑j
.text:00000000000072A8                 mov     rsi, [rbp+stat_buf.st_dev]
.text:00000000000072AF                 mov     rdi, [rbp+stat_buf.st_ino]
.text:00000000000072B6                 call    src_to_dest_lookup
.text:00000000000072BB                 mov     [rbp+s2], rax
.text:00000000000072C2                 jmp     loc_6E69
.text:00000000000072C2 ; ---------------------------------------------------------------------------
.text:00000000000072C7                 align 10h
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: copy_internal+BF3↑j
.text:00000000000072D0                 lea     rsi, aOmittingDirect ; "omitting directory %s"
.text:00000000000072D7                 xor     edi, edi        ; domainname
.text:00000000000072D9                 call    _dcgettext
.text:00000000000072DE                 mov     rdx, rax
.text:00000000000072E1                 jmp     loc_654A
.text:00000000000072E1 ; ---------------------------------------------------------------------------
.text:00000000000072E6                 align 10h
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: copy_internal+98F↑j
.text:00000000000072F0                 mov     rdx, cs:top_level_dst_name
.text:00000000000072F7                 mov     esi, 4
.text:00000000000072FC                 mov     edi, 1
.text:0000000000007301                 call    quotearg_n_style
.text:0000000000007306                 mov     rdx, cs:top_level_src_name
.text:000000000000730D                 mov     esi, 4
.text:0000000000007312                 xor     edi, edi
.text:0000000000007314                 mov     r12, rax
.text:0000000000007317                 call    quotearg_n_style
.text:000000000000731C                 lea     rsi, aCannotMoveSToA ; "cannot move %s to a subdirectory of its"...
.text:0000000000007323                 mov     rbx, rax
.text:0000000000007326                 mov     edx, 5          ; category
.text:000000000000732B                 xor     edi, edi        ; domainname
.text:000000000000732D                 call    _dcgettext
.text:0000000000007332                 mov     r8, r12
.text:0000000000007335                 mov     rdx, rax        ; format
.text:0000000000007338                 mov     rcx, rbx
.text:000000000000733B                 xor     eax, eax
.text:000000000000733D                 xor     esi, esi        ; errnum
.text:000000000000733F                 xor     edi, edi        ; status
.text:0000000000007341                 call    _error
.text:0000000000007346                 mov     rax, [rbp+var_340]
.text:000000000000734D                 mov     r12d, 1
.text:0000000000007353                 mov     byte ptr [rax], 1
.text:0000000000007356                 jmp     loc_6186
.text:0000000000007356 ; ---------------------------------------------------------------------------
.text:000000000000735B                 align 20h
.text:0000000000007360
.text:0000000000007360 loc_7360:                               ; CODE XREF: copy_internal+9BB↑j
.text:0000000000007360                 call    _rmdir
.text:0000000000007365                 test    eax, eax
.text:0000000000007367                 jz      loc_6331
.text:000000000000736D                 call    ___errno_location
.text:0000000000007372                 cmp     dword ptr [rax], 2
.text:0000000000007375                 mov     r14, rax
.text:0000000000007378                 jz      loc_6331
.text:000000000000737E
.text:000000000000737E loc_737E:                               ; CODE XREF: copy_internal+9D5↑j
.text:000000000000737E                 mov     rdx, [rbp+file]
.text:0000000000007385                 mov     esi, 4
.text:000000000000738A                 mov     edi, 1
.text:000000000000738F                 call    quotearg_n_style
.text:0000000000007394                 mov     rdx, [rbp+filename]
.text:000000000000739B                 mov     esi, 4
.text:00000000000073A0                 xor     edi, edi
.text:00000000000073A2                 mov     r12, rax
.text:00000000000073A5                 call    quotearg_n_style
.text:00000000000073AA                 lea     rsi, aInterDeviceMov ; "inter-device move failed: %s to %s; una"...
.text:00000000000073B1                 mov     rbx, rax
.text:00000000000073B4                 mov     edx, 5          ; category
.text:00000000000073B9                 xor     edi, edi        ; domainname
.text:00000000000073BB                 call    _dcgettext
.text:00000000000073C0                 mov     r8, r12
.text:00000000000073C3                 mov     rcx, rbx
.text:00000000000073C6                 mov     rdx, rax
.text:00000000000073C9                 mov     esi, [r14]
.text:00000000000073CC                 jmp     loc_6AF6
.text:00000000000073CC ; ---------------------------------------------------------------------------
.text:00000000000073D1                 align 8
.text:00000000000073D8
.text:00000000000073D8 loc_73D8:                               ; CODE XREF: copy_internal+15B6↑j
.text:00000000000073D8                 movzx   esi, byte ptr [rbx+18h]
.text:00000000000073DC                 test    sil, sil
.text:00000000000073DF                 jnz     loc_6FB0
.text:00000000000073E5                 cmp     byte ptr [rbx+15h], 0
.text:00000000000073E9                 jnz     loc_6FB0
.text:00000000000073EF                 mov     eax, [rdx+18h]
.text:00000000000073F2                 and     eax, 0F000h
.text:00000000000073F7                 cmp     eax, 0A000h
.text:00000000000073FC                 jnz     loc_83E5
.text:0000000000007402
.text:0000000000007402 loc_7402:                               ; CODE XREF: copy_internal+16D3↑j
.text:0000000000007402                                         ; copy_internal+16E9↑j ...
.text:0000000000007402                 cmp     byte ptr [rbx+2Ch], 0
.text:0000000000007406                 jz      short loc_741D
.text:0000000000007408                 mov     eax, [r12+18h]
.text:000000000000740D                 and     eax, 0F000h
.text:0000000000007412                 cmp     eax, 0A000h
.text:0000000000007417                 jz      loc_5B5F
.text:000000000000741D
.text:000000000000741D loc_741D:                               ; CODE XREF: copy_internal+1AC6↑j
.text:000000000000741D                 cmp     dword ptr [rbx+4], 2
.text:0000000000007421                 jnz     loc_6F40
.text:0000000000007427                 mov     eax, [rdx+18h]
.text:000000000000742A                 and     eax, 0F000h
.text:000000000000742F                 cmp     eax, 0A000h
.text:0000000000007434                 jz      loc_8EAC
.text:000000000000743A                 movdqa  xmm0, xmmword ptr [rdx]
.text:000000000000743E                 movaps  xmmword ptr [rbp+var_D0.st_dev], xmm0
.text:0000000000007445                 movdqa  xmm0, xmmword ptr [rdx+10h]
.text:000000000000744A                 movaps  xmmword ptr [rbp+var_D0.st_nlink], xmm0
.text:0000000000007451                 movdqa  xmm0, xmmword ptr [rdx+20h]
.text:0000000000007456                 movaps  xmmword ptr [rbp+var_D0.st_gid], xmm0
.text:000000000000745D                 movdqa  xmm0, xmmword ptr [rdx+30h]
.text:0000000000007462                 movaps  xmmword ptr [rbp+var_D0.st_size], xmm0
.text:0000000000007469                 movdqa  xmm0, xmmword ptr [rdx+40h]
.text:000000000000746E                 movaps  xmmword ptr [rbp+var_D0.st_blocks], xmm0
.text:0000000000007475                 movdqa  xmm0, xmmword ptr [rdx+50h]
.text:000000000000747A                 movaps  xmmword ptr [rbp+var_D0.st_atim.tv_nsec], xmm0
.text:000000000000747E                 movdqa  xmm0, xmmword ptr [rdx+60h]
.text:0000000000007483                 movaps  xmmword ptr [rbp+var_D0.st_mtim.tv_nsec], xmm0
.text:0000000000007487                 movdqa  xmm0, xmmword ptr [rdx+70h]
.text:000000000000748C                 movaps  xmmword ptr [rbp+var_D0.st_ctim.tv_nsec], xmm0
.text:0000000000007490                 movdqa  xmm0, xmmword ptr [rdx+80h]
.text:0000000000007498                 movaps  xmmword ptr [rbp+var_D0.__unused+8], xmm0
.text:000000000000749C
.text:000000000000749C loc_749C:                               ; CODE XREF: copy_internal+35A4↓j
.text:000000000000749C                 mov     eax, [r12+18h]
.text:00000000000074A1                 and     eax, 0F000h
.text:00000000000074A6                 cmp     eax, 0A000h
.text:00000000000074AB                 jz      loc_8E69
.text:00000000000074B1                 movdqa  xmm0, xmmword ptr [r12]
.text:00000000000074B7                 movaps  xmmword ptr [rbp+var_160.st_dev], xmm0
.text:00000000000074BE                 movdqa  xmm0, xmmword ptr [r12+10h]
.text:00000000000074C5                 movaps  xmmword ptr [rbp+var_160.st_nlink], xmm0
.text:00000000000074CC                 movdqa  xmm0, xmmword ptr [r12+20h]
.text:00000000000074D3                 movaps  xmmword ptr [rbp+var_160.st_gid], xmm0
.text:00000000000074DA                 movdqa  xmm0, xmmword ptr [r12+30h]
.text:00000000000074E1                 movaps  xmmword ptr [rbp+var_160.st_size], xmm0
.text:00000000000074E8                 movdqa  xmm0, xmmword ptr [r12+40h]
.text:00000000000074EF                 movaps  xmmword ptr [rbp+var_160.st_blocks], xmm0
.text:00000000000074F6                 movdqa  xmm0, xmmword ptr [r12+50h]
.text:00000000000074FD                 movaps  xmmword ptr [rbp+var_160.st_atim.tv_nsec], xmm0
.text:0000000000007504                 movdqa  xmm0, xmmword ptr [r12+60h]
.text:000000000000750B                 movaps  xmmword ptr [rbp+var_160.st_mtim.tv_nsec], xmm0
.text:0000000000007512                 movdqa  xmm0, xmmword ptr [r12+70h]
.text:0000000000007519                 movaps  xmmword ptr [rbp+var_160.st_ctim.tv_nsec], xmm0
.text:0000000000007520                 movdqa  xmm0, xmmword ptr [r12+80h]
.text:000000000000752A                 movaps  xmmword ptr [rbp+var_160.__unused+8], xmm0
.text:0000000000007531
.text:0000000000007531 loc_7531:                               ; CODE XREF: copy_internal+3561↓j
.text:0000000000007531                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007538                 cmp     [rbp+var_D0.st_ino], rax
.text:000000000000753F                 jnz     loc_5B5F
.text:0000000000007545                 mov     rax, [rbp+var_160.st_dev]
.text:000000000000754C                 cmp     [rbp+var_D0.st_dev], rax
.text:0000000000007553                 jnz     loc_5B5F
.text:0000000000007559                 cmp     byte ptr [rbx+17h], 0
.text:000000000000755D                 jz      loc_6F40
.text:0000000000007563                 mov     eax, [r12+18h]
.text:0000000000007568                 and     eax, 0F000h
.text:000000000000756D                 cmp     eax, 0A000h
.text:0000000000007572                 setnz   r14b
.text:0000000000007576                 jmp     loc_5B5F
.text:0000000000007576 ; ---------------------------------------------------------------------------
.text:000000000000757B                 align 20h
.text:0000000000007580
.text:0000000000007580 loc_7580:                               ; CODE XREF: copy_internal+3C4↑j
.text:0000000000007580                 lea     rcx, [rbp+var_D0]
.text:0000000000007587                 mov     rsi, [rbp+file] ; filename
.text:000000000000758E                 mov     edi, 1          ; ver
.text:0000000000007593                 mov     rdx, rcx        ; stat_buf
.text:0000000000007596                 mov     [rbp+s2], rcx
.text:000000000000759D                 call    ___lxstat
.text:00000000000075A2                 test    eax, eax
.text:00000000000075A4                 jnz     loc_5D90
.text:00000000000075AA                 mov     rcx, [rbp+s2]
.text:00000000000075B1                 mov     rdx, rcx
.text:00000000000075B4                 jmp     loc_5D0A
.text:00000000000075B4 ; ---------------------------------------------------------------------------
.text:00000000000075B9                 align 20h
.text:00000000000075C0
.text:00000000000075C0 loc_75C0:                               ; CODE XREF: copy_internal+14BD↑j
.text:00000000000075C0                 mov     rsi, [rbp+file] ; filename
.text:00000000000075C7                 lea     rdx, [rbp+var_1F0] ; stat_buf
.text:00000000000075CE                 mov     edi, 1          ; ver
.text:00000000000075D3                 call    ___lxstat
.text:00000000000075D8                 test    eax, eax
.text:00000000000075DA                 jnz     loc_7FE5
.text:00000000000075E0                 mov     r12d, [rbp+var_1F0.st_mode]
.text:00000000000075E7                 mov     byte ptr [rbp+ptr], 0
.text:00000000000075EE                 mov     eax, r12d
.text:00000000000075F1                 and     eax, 1C0h
.text:00000000000075F6                 cmp     eax, 1C0h
.text:00000000000075FB                 jz      short loc_7628
.text:00000000000075FD                 mov     rdi, [rbp+file] ; file
.text:0000000000007604                 mov     esi, r12d
.text:0000000000007607                 or      esi, 1C0h       ; mode
.text:000000000000760D                 call    _chmod
.text:0000000000007612                 test    eax, eax
.text:0000000000007614                 mov     [rbp+var_38C], r12d
.text:000000000000761B                 mov     byte ptr [rbp+ptr], 1
.text:0000000000007622                 jnz     loc_8643
.text:0000000000007628
.text:0000000000007628 loc_7628:                               ; CODE XREF: copy_internal+1CBB↑j
.text:0000000000007628                 mov     rax, [rbp+format]
.text:000000000000762F                 cmp     byte ptr [rax], 0
.text:0000000000007632                 jz      loc_842C
.text:0000000000007638
.text:0000000000007638 loc_7638:                               ; CODE XREF: copy_internal+2B10↓j
.text:0000000000007638                 cmp     byte ptr [rbx+2Eh], 0
.text:000000000000763C                 jz      short loc_7688
.text:000000000000763E                 cmp     byte ptr [rbx+18h], 0
.text:0000000000007642                 jz      loc_84ED
.text:0000000000007648                 mov     rsi, [rbp+file]
.text:000000000000764F                 mov     edi, 4
.text:0000000000007654                 call    quotearg_style
.text:0000000000007659                 lea     rsi, aCreatedDirecto ; "created directory %s\n"
.text:0000000000007660                 mov     r12, rax
.text:0000000000007663                 mov     edx, 5          ; category
.text:0000000000007668                 xor     edi, edi        ; domainname
.text:000000000000766A                 call    _dcgettext
.text:000000000000766F                 mov     rdx, r12
.text:0000000000007672                 mov     rsi, rax
.text:0000000000007675                 mov     edi, 1
.text:000000000000767A                 xor     eax, eax
.text:000000000000767C                 call    ___printf_chk
.text:0000000000007681                 nop     dword ptr [rax+00000000h]
.text:0000000000007688
.text:0000000000007688 loc_7688:                               ; CODE XREF: copy_internal+1CFC↑j
.text:0000000000007688                                         ; copy_internal+251D↓j ...
.text:0000000000007688                 mov     rax, [rbp+var_348]
.text:000000000000768F                 test    rax, rax
.text:0000000000007692                 setnz   r12b
.text:0000000000007696                 and     r12b, [rbx+1Ch]
.text:000000000000769A                 jnz     loc_7E7B
.text:00000000000076A0
.text:00000000000076A0 loc_76A0:                               ; CODE XREF: copy_internal+254B↓j
.text:00000000000076A0                 movdqu  xmm0, xmmword ptr [rbx]
.text:00000000000076A4                 mov     esi, 2
.text:00000000000076A9                 mov     rdi, [rbp+filename]
.text:00000000000076B0                 movaps  xmmword ptr [rbp+dev], xmm0
.text:00000000000076B7                 movdqu  xmm0, xmmword ptr [rbx+10h]
.text:00000000000076BC                 movaps  [rbp+var_2E0], xmm0
.text:00000000000076C3                 movdqu  xmm0, xmmword ptr [rbx+20h]
.text:00000000000076C8                 movaps  xmmword ptr [rbp+var_2D0], xmm0
.text:00000000000076CF                 movdqu  xmm0, xmmword ptr [rbx+30h]
.text:00000000000076D4                 movaps  [rbp+var_2C0], xmm0
.text:00000000000076DB                 movdqu  xmm0, xmmword ptr [rbx+40h]
.text:00000000000076E0                 movaps  [rbp+var_2B0], xmm0
.text:00000000000076E7                 call    savedir
.text:00000000000076EC                 test    rax, rax
.text:00000000000076EF                 mov     [rbp+s], rax
.text:00000000000076F6                 jz      loc_8558
.text:00000000000076FC                 cmp     dword ptr [rbx+4], 3
.text:0000000000007700                 jnz     short loc_770C
.text:0000000000007702                 mov     dword ptr [rbp+dev+4], 2
.text:000000000000770C
.text:000000000000770C loc_770C:                               ; CODE XREF: copy_internal+1DC0↑j
.text:000000000000770C                 mov     rax, [rbp+s]
.text:0000000000007713                 cmp     byte ptr [rax], 0
.text:0000000000007716                 jz      loc_8C55
.text:000000000000771C                 lea     rax, [rbp+dev]
.text:0000000000007723                 lea     r10, [rbp+stat_buf]
.text:000000000000772A                 mov     dword ptr [rbp+length], r13d
.text:0000000000007731                 mov     r15, [rbp+s]
.text:0000000000007738                 mov     r13, [rbp+var_340]
.text:000000000000773F                 mov     r12d, 1
.text:0000000000007745                 mov     [rbp+var_348], rax
.text:000000000000774C                 lea     rax, [rbp+var_2F9]
.text:0000000000007753                 mov     [rbp+var_315], 0
.text:000000000000775A                 mov     byte ptr [rbp+var_370], r14b
.text:0000000000007761                 mov     [rbp+var_378], rbx
.text:0000000000007768                 mov     [rbp+old], rax
.text:000000000000776F                 lea     rax, [rbp+var_2F8]
.text:0000000000007776                 mov     [rbp+var_340], r10
.text:000000000000777D                 mov     [rbp+s2], rax
.text:0000000000007784                 jmp     short loc_77B4
.text:0000000000007784 ; ---------------------------------------------------------------------------
.text:0000000000007786                 align 10h
.text:0000000000007790
.text:0000000000007790 loc_7790:                               ; CODE XREF: copy_internal+1F0B↓j
.text:0000000000007790                 movzx   eax, byte ptr [rbp+var_2F8]
.text:0000000000007797                 mov     rdi, r15        ; s
.text:000000000000779A                 or      [rbp+var_315], al
.text:00000000000077A0                 call    _strlen
.text:00000000000077A5                 lea     r15, [r15+rax+1]
.text:00000000000077AA                 cmp     byte ptr [r15], 0
.text:00000000000077AE                 jz      loc_7851
.text:00000000000077B4
.text:00000000000077B4 loc_77B4:                               ; CODE XREF: copy_internal+1E44↑j
.text:00000000000077B4                 mov     rdi, [rbp+filename]
.text:00000000000077BB                 xor     edx, edx
.text:00000000000077BD                 mov     rsi, r15
.text:00000000000077C0                 call    file_name_concat
.text:00000000000077C5                 mov     rdi, [rbp+file]
.text:00000000000077CC                 xor     edx, edx
.text:00000000000077CE                 mov     rsi, r15
.text:00000000000077D1                 mov     rbx, rax
.text:00000000000077D4                 call    file_name_concat
.text:00000000000077D9                 mov     r14, rax
.text:00000000000077DC                 mov     rax, [rbp+format]
.text:00000000000077E3                 mov     r9, [rbp+var_348]
.text:00000000000077EA                 mov     r8, qword ptr [rbp+fd]
.text:00000000000077F1                 mov     rcx, [rbp+var_340]
.text:00000000000077F8                 mov     rsi, r14
.text:00000000000077FB                 mov     edx, [rbp+fildes]
.text:0000000000007801                 mov     rdi, rbx
.text:0000000000007804                 movzx   eax, byte ptr [rax]
.text:0000000000007807                 push    0
.text:0000000000007809                 push    [rbp+old]
.text:000000000000780F                 push    [rbp+s2]
.text:0000000000007815                 push    0
.text:0000000000007817                 mov     byte ptr [rbp+var_2F8], al
.text:000000000000781D                 call    copy_internal
.text:0000000000007822                 and     r12d, eax
.text:0000000000007825                 movzx   eax, [rbp+var_2F9]
.text:000000000000782C                 add     rsp, 20h
.text:0000000000007830                 or      [r13+0], al
.text:0000000000007834                 mov     rdi, r14        ; ptr
.text:0000000000007837                 call    free
.text:000000000000783C                 mov     rdi, rbx        ; ptr
.text:000000000000783F                 call    free
.text:0000000000007844                 cmp     [rbp+var_2F9], 0
.text:000000000000784B                 jz      loc_7790
.text:0000000000007851
.text:0000000000007851 loc_7851:                               ; CODE XREF: copy_internal+1E6E↑j
.text:0000000000007851                 movzx   r14d, byte ptr [rbp+var_370]
.text:0000000000007859                 mov     rbx, [rbp+var_378]
.text:0000000000007860                 mov     r13d, dword ptr [rbp+length]
.text:0000000000007867
.text:0000000000007867 loc_7867:                               ; CODE XREF: copy_internal+3322↓j
.text:0000000000007867                 mov     rdi, [rbp+s]    ; ptr
.text:000000000000786E                 call    free
.text:0000000000007873                 movzx   ecx, [rbp+var_315]
.text:000000000000787A                 mov     rax, [rbp+format]
.text:0000000000007881                 mov     [rax], cl
.text:0000000000007883
.text:0000000000007883 loc_7883:                               ; CODE XREF: copy_internal+2545↓j
.text:0000000000007883                                         ; copy_internal+2C5B↓j
.text:0000000000007883                 test    r13b, r13b
.text:0000000000007886                 jnz     loc_7E62
.text:000000000000788C                 movzx   eax, byte ptr [rbp+ptr]
.text:0000000000007893                 mov     byte ptr [rbp+fildes], 0
.text:000000000000789A                 mov     [rbp+var_315], al
.text:00000000000078A0                 jmp     loc_5F5A
.text:00000000000078A0 ; ---------------------------------------------------------------------------
.text:00000000000078A5                 align 8
.text:00000000000078A8
.text:00000000000078A8 loc_78A8:                               ; CODE XREF: copy_internal+CC8↑j
.text:00000000000078A8                 cmp     byte ptr [rbx+18h], 0
.text:00000000000078AC                 jz      loc_7CBB
.text:00000000000078B2                 mov     r15d, [rbx]
.text:00000000000078B5                 test    r15d, r15d
.text:00000000000078B8                 jz      loc_7CBB
.text:00000000000078BE                 test    r13b, r13b
.text:00000000000078C1                 jnz     loc_661A
.text:00000000000078C7
.text:00000000000078C7 loc_78C7:                               ; CODE XREF: copy_internal+CE8↑j
.text:00000000000078C7                                         ; copy_internal+12E9↑j
.text:00000000000078C7                 mov     edx, [rbp+stat_buf.st_mode]
.text:00000000000078CD                 and     edx, 0F000h
.text:00000000000078D3                 cmp     edx, 4000h
.text:00000000000078D9                 jz      loc_7E96
.text:00000000000078DF
.text:00000000000078DF loc_78DF:                               ; CODE XREF: copy_internal+21CF↓j
.text:00000000000078DF                                         ; copy_internal+2569↓j
.text:00000000000078DF                 mov     rdi, [rbp+filename]
.text:00000000000078E6                 mov     byte ptr [rbp+s2], r9b
.text:00000000000078ED                 mov     byte ptr [rbp+old], r8b
.text:00000000000078F4                 call    last_component
.text:00000000000078F9                 cmp     byte ptr [rax], 2Eh ; '.'
.text:00000000000078FC                 mov     r14, rax
.text:00000000000078FF                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007907                 movzx   r9d, byte ptr [rbp+s2]
.text:000000000000790F                 jnz     loc_669D
.text:0000000000007915                 mov     eax, 1
.text:000000000000791A                 jmp     loc_6662
.text:000000000000791A ; ---------------------------------------------------------------------------
.text:000000000000791F                 align 20h
.text:0000000000007920
.text:0000000000007920 loc_7920:                               ; CODE XREF: copy_internal+10A0↑j
.text:0000000000007920                 mov     rsi, [rbp+s2]
.text:0000000000007927                 mov     rdi, [rbp+file]
.text:000000000000792E                 call    same_name
.text:0000000000007933                 test    al, al
.text:0000000000007935                 jnz     loc_800A
.text:000000000000793B                 mov     eax, [rbx+4]
.text:000000000000793E                 cmp     eax, 4
.text:0000000000007941                 jz      loc_6EC0
.text:0000000000007947                 cmp     eax, 3
.text:000000000000794A                 jnz     short loc_7955
.text:000000000000794C                 test    r13b, r13b
.text:000000000000794F                 jnz     loc_6EC0
.text:0000000000007955
.text:0000000000007955 loc_7955:                               ; CODE XREF: copy_internal+200A↑j
.text:0000000000007955                 mov     rdx, [rbp+s2]
.text:000000000000795C                 mov     esi, 4
.text:0000000000007961                 mov     edi, 1
.text:0000000000007966                 call    quotearg_n_style
.text:000000000000796B                 mov     rdx, [rbp+file]
.text:0000000000007972                 xor     edi, edi
.text:0000000000007974                 mov     esi, 4
.text:0000000000007979                 mov     r13, rax
.text:000000000000797C                 call    quotearg_n_style
.text:0000000000007981                 lea     rsi, aWillNotCreateH ; "will not create hard link %s to directo"...
.text:0000000000007988                 mov     r12, rax
.text:000000000000798B                 xor     edi, edi        ; domainname
.text:000000000000798D                 mov     edx, 5          ; category
.text:0000000000007992                 call    _dcgettext
.text:0000000000007997                 mov     r8, r13
.text:000000000000799A                 mov     rdx, rax        ; format
.text:000000000000799D                 mov     rcx, r12
.text:00000000000079A0                 xor     esi, esi        ; errnum
.text:00000000000079A2                 xor     edi, edi        ; status
.text:00000000000079A4                 xor     eax, eax
.text:00000000000079A6                 call    _error
.text:00000000000079AB                 jmp     loc_6A46
.text:00000000000079B0 ; ---------------------------------------------------------------------------
.text:00000000000079B0
.text:00000000000079B0 loc_79B0:                               ; CODE XREF: copy_internal+495↑j
.text:00000000000079B0                 cmp     byte ptr [rbx+17h], 0
.text:00000000000079B4                 jz      loc_6A58
.text:00000000000079BA                 mov     [rbp+s2], 0
.text:00000000000079C5                 jmp     loc_6A93
.text:00000000000079C5 ; ---------------------------------------------------------------------------
.text:00000000000079CA                 align 10h
.text:00000000000079D0
.text:00000000000079D0 loc_79D0:                               ; CODE XREF: copy_internal+188F↑j
.text:00000000000079D0                                         ; copy_internal+18A4↑j
.text:00000000000079D0                 mov     eax, [rbp+stat_buf.st_mode]
.text:00000000000079D6                 xor     esi, esi
.text:00000000000079D8                 cmp     dword ptr [rbx+4], 2
.text:00000000000079DC                 mov     rdi, [rbp+filename]
.text:00000000000079E3                 mov     dword ptr [rbp+var_340], eax
.text:00000000000079E9                 movzx   eax, byte ptr [rbx+23h]
.text:00000000000079ED                 setz    sil
.text:00000000000079F1                 shl     esi, 11h
.text:00000000000079F4                 mov     byte ptr [rbp+format], al
.text:00000000000079FA                 xor     eax, eax
.text:00000000000079FC                 call    open_safer
.text:0000000000007A01                 test    eax, eax
.text:0000000000007A03                 mov     [rbp+fildes], eax
.text:0000000000007A09                 js      loc_810B
.text:0000000000007A0F                 mov     esi, [rbp+fildes] ; fildes
.text:0000000000007A15                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000007A1C                 mov     edi, 1          ; ver
.text:0000000000007A21                 call    ___fxstat
.text:0000000000007A26                 test    eax, eax
.text:0000000000007A28                 jnz     loc_8347
.text:0000000000007A2E                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007A35                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000007A3C                 jnz     short loc_7A52
.text:0000000000007A3E                 mov     rax, [rbp+var_160.st_dev]
.text:0000000000007A45                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000007A4C                 jz      loc_8776
.text:0000000000007A52
.text:0000000000007A52 loc_7A52:                               ; CODE XREF: copy_internal+20FC↑j
.text:0000000000007A52                 mov     rsi, [rbp+filename]
.text:0000000000007A59                 mov     edi, 4
.text:0000000000007A5E                 call    quotearg_style
.text:0000000000007A63                 lea     rsi, aSkippingFileSA ; "skipping file %s, as it was replaced wh"...
.text:0000000000007A6A                 mov     r12, rax
.text:0000000000007A6D                 mov     edx, 5          ; category
.text:0000000000007A72                 xor     edi, edi        ; domainname
.text:0000000000007A74                 call    _dcgettext
.text:0000000000007A79                 mov     rcx, r12
.text:0000000000007A7C                 mov     rdx, rax        ; format
.text:0000000000007A7F                 xor     esi, esi        ; errnum
.text:0000000000007A81
.text:0000000000007A81 loc_7A81:                               ; CODE XREF: copy_internal+2A46↓j
.text:0000000000007A81                                         ; copy_internal+3FBF↓j
.text:0000000000007A81                 xor     edi, edi        ; status
.text:0000000000007A83                 xor     eax, eax
.text:0000000000007A85                 call    _error
.text:0000000000007A8A                 xor     r8d, r8d
.text:0000000000007A8D                 mov     [rbp+ptr], 0
.text:0000000000007A98
.text:0000000000007A98 loc_7A98:                               ; CODE XREF: copy_internal+32B1↓j
.text:0000000000007A98                                         ; copy_internal+3302↓j ...
.text:0000000000007A98                 mov     edi, [rbp+fildes] ; fd
.text:0000000000007A9E                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007AA5                 call    _close
.text:0000000000007AAA                 test    eax, eax
.text:0000000000007AAC                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007AB4                 js      loc_8507
.text:0000000000007ABA                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000007AC1                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007AC8                 call    free
.text:0000000000007ACD                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007AD5                 mov     byte ptr [rbp+fildes], 0
.text:0000000000007ADC                 test    r8b, r8b
.text:0000000000007ADF                 jnz     loc_5EBF
.text:0000000000007AE5                 jmp     loc_68D0
.text:0000000000007AE5 ; ---------------------------------------------------------------------------
.text:0000000000007AEA                 align 10h
.text:0000000000007AF0
.text:0000000000007AF0 loc_7AF0:                               ; CODE XREF: copy_internal+17F9↑j
.text:0000000000007AF0                 mov     eax, [rbp+stat_buf.st_mode]
.text:0000000000007AF6                 and     eax, 0F000h
.text:0000000000007AFB                 cmp     eax, 4000h
.text:0000000000007B00                 jz      loc_7E90
.text:0000000000007B06
.text:0000000000007B06 loc_7B06:                               ; CODE XREF: copy_internal+2560↓j
.text:0000000000007B06                 test    r15d, r15d
.text:0000000000007B09                 jz      loc_7167
.text:0000000000007B0F                 jmp     loc_78DF
.text:0000000000007B0F ; ---------------------------------------------------------------------------
.text:0000000000007B14                 align 8
.text:0000000000007B18
.text:0000000000007B18 loc_7B18:                               ; CODE XREF: copy_internal+EF6↑j
.text:0000000000007B18                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000007B1F                 mov     rsi, r8         ; filename
.text:0000000000007B22                 mov     edi, 1          ; ver
.text:0000000000007B27                 call    ___xstat
.text:0000000000007B2C                 test    eax, eax
.text:0000000000007B2E                 jnz     loc_683C
.text:0000000000007B34                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000007B3B                 mov     rsi, r12        ; filename
.text:0000000000007B3E                 mov     edi, 1          ; ver
.text:0000000000007B43                 call    ___xstat
.text:0000000000007B48                 test    eax, eax
.text:0000000000007B4A                 jnz     loc_683C
.text:0000000000007B50                 mov     rax, [rbp+var_D0.st_ino]
.text:0000000000007B57                 cmp     [rbp+var_160.st_ino], rax
.text:0000000000007B5E                 jz      loc_8C67
.text:0000000000007B64
.text:0000000000007B64 loc_7B64:                               ; CODE XREF: copy_internal+3335↓j
.text:0000000000007B64                 mov     rdi, r12        ; ptr
.text:0000000000007B67                 call    free
.text:0000000000007B6C                 mov     rdx, [rbp+file]
.text:0000000000007B73                 mov     esi, 3
.text:0000000000007B78                 xor     edi, edi
.text:0000000000007B7A                 call    quotearg_n_style_colon
.text:0000000000007B7F                 mov     edx, 5
.text:0000000000007B84                 mov     r12, rax
.text:0000000000007B87                 lea     rsi, aSCanMakeRelati ; "%s: can make relative symbolic links on"...
.text:0000000000007B8E                 jmp     loc_64E8
.text:0000000000007B93 ; ---------------------------------------------------------------------------
.text:0000000000007B93
.text:0000000000007B93 loc_7B93:                               ; CODE XREF: copy_internal+15AC↑j
.text:0000000000007B93                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000007B99                 lea     rdx, [rbp+stat_buf]
.text:0000000000007BA0                 and     eax, 0F000h
.text:0000000000007BA5                 cmp     eax, 0A000h
.text:0000000000007BAA                 jnz     loc_6EF2
.text:0000000000007BB0                 mov     rsi, [rbp+file]
.text:0000000000007BB7                 mov     rdi, [rbp+filename]
.text:0000000000007BBE                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007BC5                 mov     byte ptr [rbp+old], r8b
.text:0000000000007BCC                 call    same_name
.text:0000000000007BD1                 test    al, al
.text:0000000000007BD3                 jnz     loc_6F40
.text:0000000000007BD9                 mov     edi, [rbx]
.text:0000000000007BDB                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007BE3                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007BEB                 test    edi, edi
.text:0000000000007BED                 jnz     loc_6D8E
.text:0000000000007BF3                 test    r15d, r15d
.text:0000000000007BF6                 jz      loc_6D8E
.text:0000000000007BFC                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000007C01                 mov     eax, 1
.text:0000000000007C06                 xor     r12d, 1
.text:0000000000007C0A                 jmp     loc_70BC
.text:0000000000007C0A ; ---------------------------------------------------------------------------
.text:0000000000007C0F                 align 10h
.text:0000000000007C10
.text:0000000000007C10 loc_7C10:                               ; CODE XREF: copy_internal+59C↑j
.text:0000000000007C10                 mov     r15d, eax
.text:0000000000007C13                 mov     rax, 0FF000000FF00h
.text:0000000000007C1D                 test    [rbx+20h], rax
.text:0000000000007C21                 jz      loc_5EE2
.text:0000000000007C27                 movzx   esi, byte ptr [rbx+25h]
.text:0000000000007C2B                 mov     rdi, [rbp+file]
.text:0000000000007C32                 xor     edx, edx
.text:0000000000007C34                 mov     rcx, rbx
.text:0000000000007C37                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007C3E                 call    set_file_security_ctx
.text:0000000000007C43                 test    al, al
.text:0000000000007C45                 mov     r15d, eax
.text:0000000000007C48                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007C50                 jnz     loc_5EE2
.text:0000000000007C56                 movzx   r14d, byte ptr [rbx+26h]
.text:0000000000007C5B                 test    r14b, r14b
.text:0000000000007C5E                 jnz     loc_68D0
.text:0000000000007C64                 mov     r15d, r12d
.text:0000000000007C67                 jmp     loc_5EE2
.text:0000000000007C67 ; ---------------------------------------------------------------------------
.text:0000000000007C6C                 align 10h
.text:0000000000007C70
.text:0000000000007C70 loc_7C70:                               ; CODE XREF: copy_internal+9EB↑j
.text:0000000000007C70                 lea     rsi, aCopied    ; "copied "
.text:0000000000007C77                 mov     edx, 5          ; category
.text:0000000000007C7C                 xor     edi, edi        ; domainname
.text:0000000000007C7E                 call    _dcgettext
.text:0000000000007C83                 mov     edi, 1
.text:0000000000007C88                 mov     rsi, rax
.text:0000000000007C8B                 xor     eax, eax
.text:0000000000007C8D                 call    ___printf_chk
.text:0000000000007C92                 mov     rdx, [rbp+old]
.text:0000000000007C99                 mov     rsi, [rbp+file]
.text:0000000000007CA0                 mov     rdi, [rbp+filename]
.text:0000000000007CA7                 call    emit_verbose
.text:0000000000007CAC                 mov     [rbp+fildes], 1
.text:0000000000007CB6                 jmp     loc_5DF0
.text:0000000000007CBB ; ---------------------------------------------------------------------------
.text:0000000000007CBB
.text:0000000000007CBB loc_7CBB:                               ; CODE XREF: copy_internal+1F6C↑j
.text:0000000000007CBB                                         ; copy_internal+1F78↑j
.text:0000000000007CBB                 mov     rdx, [rbp+filename]
.text:0000000000007CC2                 mov     esi, 4
.text:0000000000007CC7                 mov     edi, 1
.text:0000000000007CCC                 call    quotearg_n_style
.text:0000000000007CD1                 mov     rdx, [rbp+file]
.text:0000000000007CD8                 mov     esi, 4
.text:0000000000007CDD                 xor     edi, edi
.text:0000000000007CDF                 mov     r12, rax
.text:0000000000007CE2                 call    quotearg_n_style
.text:0000000000007CE7                 mov     edx, 5
.text:0000000000007CEC                 mov     rbx, rax
.text:0000000000007CEF                 lea     rsi, aCannotOverwrit_0 ; "cannot overwrite non-directory %s with "...
.text:0000000000007CF6                 jmp     loc_6F7B
.text:0000000000007CFB ; ---------------------------------------------------------------------------
.text:0000000000007CFB
.text:0000000000007CFB loc_7CFB:                               ; CODE XREF: copy_internal+1821↑j
.text:0000000000007CFB                 cmp     byte ptr [rbx+15h], 0
.text:0000000000007CFF                 jnz     short loc_7D19
.text:0000000000007D01                 cmp     byte ptr [rbx+22h], 0
.text:0000000000007D05                 jz      loc_80E6
.text:0000000000007D0B                 cmp     [rbp+var_1F0.st_nlink], 1
.text:0000000000007D13                 jbe     loc_80E6
.text:0000000000007D19
.text:0000000000007D19 loc_7D19:                               ; CODE XREF: copy_internal+23BF↑j
.text:0000000000007D19                                         ; copy_internal+27C0↓j
.text:0000000000007D19                 mov     r14, [rbp+file]
.text:0000000000007D20                 mov     byte ptr [rbp+old], r9b
.text:0000000000007D27                 mov     rdi, r14        ; name
.text:0000000000007D2A                 call    _unlink
.text:0000000000007D2F                 test    eax, eax
.text:0000000000007D31                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000007D39                 jz      loc_80B3
.text:0000000000007D3F                 call    ___errno_location
.text:0000000000007D44                 cmp     dword ptr [rax], 2
.text:0000000000007D47                 mov     r15, rax
.text:0000000000007D4A                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000007D52                 jz      loc_80B3
.text:0000000000007D58                 mov     rsi, r14
.text:0000000000007D5B                 mov     edi, 4
.text:0000000000007D60                 call    quotearg_style
.text:0000000000007D65                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:0000000000007D6C                 xor     edi, edi        ; domainname
.text:0000000000007D6E                 mov     edx, 5          ; category
.text:0000000000007D73                 mov     rbx, rax
.text:0000000000007D76                 call    _dcgettext
.text:0000000000007D7B                 mov     esi, [r15]      ; errnum
.text:0000000000007D7E                 mov     rdx, rax        ; format
.text:0000000000007D81                 mov     rcx, rbx
.text:0000000000007D84                 xor     edi, edi        ; status
.text:0000000000007D86                 xor     eax, eax
.text:0000000000007D88                 call    _error
.text:0000000000007D8D                 jmp     loc_6186
.text:0000000000007D92 ; ---------------------------------------------------------------------------
.text:0000000000007D92
.text:0000000000007D92 loc_7D92:                               ; CODE XREF: copy_internal+1448↑j
.text:0000000000007D92                 lea     rax, [rbp+var_D0]
.text:0000000000007D99                 mov     rsi, [rbp+filename] ; filename
.text:0000000000007DA0                 mov     edi, 1          ; ver
.text:0000000000007DA5                 mov     rdx, rax        ; stat_buf
.text:0000000000007DA8                 mov     [rbp+s], rax
.text:0000000000007DAF                 call    ___lxstat
.text:0000000000007DB4                 test    eax, eax
.text:0000000000007DB6                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007DBE                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007DC6                 jnz     loc_6D8E
.text:0000000000007DCC                 xor     ecx, ecx
.text:0000000000007DCE                 mov     rax, [rbp+var_160.st_ino]
.text:0000000000007DD5                 cmp     [rbp+var_D0.st_ino], rax
.text:0000000000007DDC                 jnz     short loc_7DEF
.text:0000000000007DDE                 mov     rax, [rbp+var_160.st_dev]
.text:0000000000007DE5                 cmp     [rbp+var_D0.st_dev], rax
.text:0000000000007DEC                 setz    cl
.text:0000000000007DEF
.text:0000000000007DEF loc_7DEF:                               ; CODE XREF: copy_internal+249C↑j
.text:0000000000007DEF                 mov     eax, [rbp+var_D0.st_mode]
.text:0000000000007DF5                 mov     rdx, [rbp+s]
.text:0000000000007DFC                 and     eax, 0F000h
.text:0000000000007E01                 cmp     eax, 0A000h
.text:0000000000007E06                 jnz     loc_6EF2
.text:0000000000007E0C                 mov     eax, [rbp+var_160.st_mode]
.text:0000000000007E12                 and     eax, 0F000h
.text:0000000000007E17                 cmp     eax, 0A000h
.text:0000000000007E1C                 jnz     loc_6EF2
.text:0000000000007E22                 cmp     byte ptr [rbx+15h], 0
.text:0000000000007E26                 jz      loc_6EF2
.text:0000000000007E2C                 jmp     loc_6D8E
.text:0000000000007E2C ; ---------------------------------------------------------------------------
.text:0000000000007E31                 align 8
.text:0000000000007E38
.text:0000000000007E38 loc_7E38:                               ; CODE XREF: copy_internal+149B↑j
.text:0000000000007E38                 mov     rax, 0FF000000FF00h
.text:0000000000007E42                 test    [rbx+20h], rax
.text:0000000000007E46                 jnz     loc_8400
.text:0000000000007E4C
.text:0000000000007E4C loc_7E4C:                               ; CODE XREF: copy_internal+2AD7↓j
.text:0000000000007E4C                                         ; copy_internal+2AE7↓j
.text:0000000000007E4C                 mov     byte ptr [rbp+ptr], 0
.text:0000000000007E53                 mov     [rbp+var_35C], 0
.text:0000000000007E5D                 jmp     loc_7688
.text:0000000000007E62 ; ---------------------------------------------------------------------------
.text:0000000000007E62
.text:0000000000007E62 loc_7E62:                               ; CODE XREF: copy_internal+1F46↑j
.text:0000000000007E62                 mov     [rbp+var_315], r12b
.text:0000000000007E69                 xor     r15d, r15d
.text:0000000000007E6C                 xor     r8d, r8d
.text:0000000000007E6F                 mov     byte ptr [rbp+fildes], 0
.text:0000000000007E76                 jmp     loc_5EF4
.text:0000000000007E7B ; ---------------------------------------------------------------------------
.text:0000000000007E7B
.text:0000000000007E7B loc_7E7B:                               ; CODE XREF: copy_internal+1D5A↑j
.text:0000000000007E7B                 mov     rcx, [rbp+stat_buf.st_dev]
.text:0000000000007E82                 cmp     [rax], rcx
.text:0000000000007E85                 jnz     loc_7883
.text:0000000000007E8B                 jmp     loc_76A0
.text:0000000000007E90 ; ---------------------------------------------------------------------------
.text:0000000000007E90
.text:0000000000007E90 loc_7E90:                               ; CODE XREF: copy_internal+21C0↑j
.text:0000000000007E90                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000007E96
.text:0000000000007E96 loc_7E96:                               ; CODE XREF: copy_internal+1F99↑j
.text:0000000000007E96                 and     eax, 0F000h
.text:0000000000007E9B                 cmp     eax, 4000h
.text:0000000000007EA0                 jz      loc_7B06
.text:0000000000007EA6                 test    r15d, r15d
.text:0000000000007EA9                 jnz     loc_78DF
.text:0000000000007EAF                 mov     rdx, [rbp+file]
.text:0000000000007EB6                 mov     esi, 3
.text:0000000000007EBB                 xor     edi, edi
.text:0000000000007EBD                 call    quotearg_n_style_colon
.text:0000000000007EC2                 mov     rdx, [rbp+filename]
.text:0000000000007EC9                 mov     esi, 3
.text:0000000000007ECE                 xor     edi, edi
.text:0000000000007ED0                 mov     r12, rax
.text:0000000000007ED3                 call    quotearg_n_style_colon
.text:0000000000007ED8                 mov     edx, 5
.text:0000000000007EDD                 mov     rbx, rax
.text:0000000000007EE0                 lea     rsi, aCannotMoveDire ; "cannot move directory onto non-director"...
.text:0000000000007EE7                 jmp     loc_6F7B
.text:0000000000007EEC ; ---------------------------------------------------------------------------
.text:0000000000007EEC
.text:0000000000007EEC loc_7EEC:                               ; CODE XREF: copy_internal+18C2↑j
.text:0000000000007EEC                                         ; copy_internal+18CF↑j
.text:0000000000007EEC                 mov     edx, [rbp+var_35C]
.text:0000000000007EF2                 mov     rax, [rbp+stat_buf.st_rdev]
.text:0000000000007EF9                 lea     rcx, [rbp+dev]  ; dev
.text:0000000000007F00                 mov     rsi, [rbp+file] ; path
.text:0000000000007F07                 xor     edi, edi        ; ver
.text:0000000000007F09                 mov     byte ptr [rbp+fd], r8b
.text:0000000000007F10                 not     edx
.text:0000000000007F12                 and     edx, [rbp+var_314] ; mode
.text:0000000000007F18                 mov     [rbp+dev], rax
.text:0000000000007F1F                 call    ___xmknod
.text:0000000000007F24                 test    eax, eax
.text:0000000000007F26                 mov     byte ptr [rbp+fildes], 0
.text:0000000000007F2D                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007F35                 jz      loc_5EBF
.text:0000000000007F3B                 mov     rsi, [rbp+file]
.text:0000000000007F42                 mov     edi, 4
.text:0000000000007F47                 call    quotearg_style
.text:0000000000007F4C                 mov     edx, 5
.text:0000000000007F51                 mov     r13, rax
.text:0000000000007F54                 lea     rsi, aCannotCreateSp ; "cannot create special file %s"
.text:0000000000007F5B                 jmp     loc_6E1F
.text:0000000000007F60 ; ---------------------------------------------------------------------------
.text:0000000000007F60
.text:0000000000007F60 loc_7F60:                               ; CODE XREF: copy_internal+671↑j
.text:0000000000007F60                 call    utimens
.text:0000000000007F65                 test    eax, eax
.text:0000000000007F67                 jz      loc_6025
.text:0000000000007F6D                 jmp     loc_5FCA
.text:0000000000007F72 ; ---------------------------------------------------------------------------
.text:0000000000007F72
.text:0000000000007F72 loc_7F72:                               ; CODE XREF: copy_internal+5E7↑j
.text:0000000000007F72                 mov     rdi, [rbx+40h]
.text:0000000000007F76                 mov     rsi, [rbp+file]
.text:0000000000007F7D                 mov     rdx, r12
.text:0000000000007F80                 call    record_file
.text:0000000000007F85                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000007F8D                 jmp     loc_5F2D
.text:0000000000007F92 ; ---------------------------------------------------------------------------
.text:0000000000007F92
.text:0000000000007F92 loc_7F92:                               ; CODE XREF: copy_internal+15BE↑j
.text:0000000000007F92                 mov     rsi, [rbp+file]
.text:0000000000007F99                 mov     rdi, [rbp+filename]
.text:0000000000007FA0                 mov     byte ptr [rbp+s2], r9b
.text:0000000000007FA7                 mov     byte ptr [rbp+old], r8b
.text:0000000000007FAE                 call    same_name
.text:0000000000007FB3                 xor     eax, 1
.text:0000000000007FB6                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007FBE                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007FC6                 mov     r12d, eax
.text:0000000000007FC9                 xor     eax, eax
.text:0000000000007FCB                 jmp     loc_70BC
.text:0000000000007FD0 ; ---------------------------------------------------------------------------
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: copy_internal+127E↑j
.text:0000000000007FD0                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000007FD8                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000007FE0                 jmp     loc_65D0
.text:0000000000007FE5 ; ---------------------------------------------------------------------------
.text:0000000000007FE5
.text:0000000000007FE5 loc_7FE5:                               ; CODE XREF: copy_internal+1C9A↑j
.text:0000000000007FE5                 mov     rsi, [rbp+file]
.text:0000000000007FEC                 mov     edi, 4
.text:0000000000007FF1                 call    quotearg_style
.text:0000000000007FF6                 mov     edx, 5
.text:0000000000007FFB                 mov     r13, rax
.text:0000000000007FFE                 lea     rsi, aCannotStatS ; "cannot stat %s"
.text:0000000000008005                 jmp     loc_6E1F
.text:000000000000800A ; ---------------------------------------------------------------------------
.text:000000000000800A
.text:000000000000800A loc_800A:                               ; CODE XREF: copy_internal+1FF5↑j
.text:000000000000800A                 mov     rsi, cs:top_level_src_name
.text:0000000000008011                 mov     edi, 4
.text:0000000000008016                 call    quotearg_style
.text:000000000000801B                 lea     rsi, aWarningSourceD ; "warning: source directory %s specified "...
.text:0000000000008022                 xor     edi, edi        ; domainname
.text:0000000000008024                 mov     r12, rax
.text:0000000000008027                 mov     edx, 5          ; category
.text:000000000000802C                 call    _dcgettext
.text:0000000000008031                 xor     esi, esi        ; errnum
.text:0000000000008033                 mov     rdx, rax        ; format
.text:0000000000008036                 xor     edi, edi        ; status
.text:0000000000008038                 xor     eax, eax
.text:000000000000803A                 mov     rcx, r12
.text:000000000000803D                 call    _error
.text:0000000000008042                 cmp     byte ptr [rbx+18h], 0
.text:0000000000008046                 jnz     loc_6BC4
.text:000000000000804C                 jmp     loc_6180
.text:0000000000008051 ; ---------------------------------------------------------------------------
.text:0000000000008051
.text:0000000000008051 loc_8051:                               ; CODE XREF: copy_internal+DF1↑j
.text:0000000000008051                 mov     byte ptr [rbp+old], r9b
.text:0000000000008058                 call    ___errno_location
.text:000000000000805D                 cmp     dword ptr [rax], 2
.text:0000000000008060                 mov     r12, rax
.text:0000000000008063                 movzx   r9d, byte ptr [rbp+old]
.text:000000000000806B                 jz      loc_84D1
.text:0000000000008071                 mov     rsi, [rbp+file]
.text:0000000000008078                 mov     edi, 4
.text:000000000000807D                 call    quotearg_style
.text:0000000000008082                 lea     rsi, aCannotBackupS ; "cannot backup %s"
.text:0000000000008089                 mov     edx, 5          ; category
.text:000000000000808E                 xor     edi, edi        ; domainname
.text:0000000000008090                 mov     rbx, rax
.text:0000000000008093                 call    _dcgettext
.text:0000000000008098                 mov     esi, [r12]      ; errnum
.text:000000000000809C                 mov     rdx, rax        ; format
.text:000000000000809F                 mov     rcx, rbx
.text:00000000000080A2                 xor     edi, edi        ; status
.text:00000000000080A4                 xor     eax, eax
.text:00000000000080A6                 xor     r12d, r12d
.text:00000000000080A9                 call    _error
.text:00000000000080AE                 jmp     loc_6186
.text:00000000000080B3 ; ---------------------------------------------------------------------------
.text:00000000000080B3
.text:00000000000080B3 loc_80B3:                               ; CODE XREF: copy_internal+23F9↑j
.text:00000000000080B3                                         ; copy_internal+2412↑j
.text:00000000000080B3                 movzx   r14d, byte ptr [rbx+2Eh]
.text:00000000000080B8                 test    r14b, r14b
.text:00000000000080BB                 jnz     loc_868C
.text:00000000000080C1                 test    r13b, r13b
.text:00000000000080C4                 jnz     loc_8668
.text:00000000000080CA                 mov     [rbp+old], 0
.text:00000000000080D5                 mov     r14d, 1
.text:00000000000080DB                 mov     r15d, 11h
.text:00000000000080E1                 jmp     loc_5DA9
.text:00000000000080E6 ; ---------------------------------------------------------------------------
.text:00000000000080E6
.text:00000000000080E6 loc_80E6:                               ; CODE XREF: copy_internal+23C5↑j
.text:00000000000080E6                                         ; copy_internal+23D3↑j
.text:00000000000080E6                 cmp     dword ptr [rbx+4], 2
.text:00000000000080EA                 jnz     loc_7167
.text:00000000000080F0                 mov     eax, [rbp+stat_buf.st_mode]
.text:00000000000080F6                 and     eax, 0F000h
.text:00000000000080FB                 cmp     eax, 8000h
.text:0000000000008100                 jnz     loc_7D19
.text:0000000000008106                 jmp     loc_7167
.text:000000000000810B ; ---------------------------------------------------------------------------
.text:000000000000810B
.text:000000000000810B loc_810B:                               ; CODE XREF: copy_internal+20C9↑j
.text:000000000000810B                 mov     rsi, [rbp+filename]
.text:0000000000008112                 mov     edi, 4
.text:0000000000008117                 call    quotearg_style
.text:000000000000811C                 mov     edx, 5
.text:0000000000008121                 mov     r13, rax
.text:0000000000008124                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:000000000000812B                 jmp     loc_6E1F
.text:0000000000008130 ; ---------------------------------------------------------------------------
.text:0000000000008130
.text:0000000000008130 loc_8130:                               ; CODE XREF: copy_internal+755↑j
.text:0000000000008130                 mov     r8d, [rbp+var_314]
.text:0000000000008137                 mov     rdx, [rbp+file]
.text:000000000000813E                 mov     ecx, 0FFFFFFFFh
.text:0000000000008143                 mov     rdi, [rbp+filename]
.text:000000000000814A                 mov     esi, ecx
.text:000000000000814C                 call    copy_acl
.text:0000000000008151                 test    eax, eax
.text:0000000000008153                 jnz     loc_612A
.text:0000000000008159                 jmp     loc_6186
.text:000000000000815E ; ---------------------------------------------------------------------------
.text:000000000000815E
.text:000000000000815E loc_815E:                               ; CODE XREF: copy_internal+DC3↑j
.text:000000000000815E                 mov     rdx, r12        ; n
.text:0000000000008161                 mov     rdi, r14        ; s1
.text:0000000000008164                 mov     byte ptr [rbp+old], r9b
.text:000000000000816B                 mov     [rbp+s2], r8
.text:0000000000008172                 call    _memcmp
.text:0000000000008177                 test    eax, eax
.text:0000000000008179                 movzx   r9d, byte ptr [rbp+old]
.text:0000000000008181                 jnz     loc_6709
.text:0000000000008187                 lea     rdi, [r14+r12]  ; s1
.text:000000000000818B                 mov     rsi, r15        ; s2
.text:000000000000818E                 call    _strcmp
.text:0000000000008193                 test    eax, eax
.text:0000000000008195                 movzx   r9d, byte ptr [rbp+old]
.text:000000000000819D                 mov     r8, [rbp+s2]
.text:00000000000081A4                 jnz     loc_6709
.text:00000000000081AA                 mov     rdi, [rbp+file]
.text:00000000000081B1                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000081B5                 repne scasb
.text:00000000000081B7                 mov     rax, rcx
.text:00000000000081BA                 not     rax
.text:00000000000081BD                 lea     r14, [rax-1]
.text:00000000000081C1                 lea     rdi, [r14+r8+1]
.text:00000000000081C6                 call    xmalloc
.text:00000000000081CB                 mov     r15, cs:simple_backup_suffix
.text:00000000000081D2                 mov     rsi, [rbp+file] ; src
.text:00000000000081D9                 mov     rdx, r14        ; n
.text:00000000000081DC                 mov     rdi, rax        ; dest
.text:00000000000081DF                 mov     r12, rax
.text:00000000000081E2                 call    _mempcpy
.text:00000000000081E7                 mov     rsi, r15        ; src
.text:00000000000081EA                 mov     rdi, rax        ; dest
.text:00000000000081ED                 call    _strcpy
.text:00000000000081F2                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:00000000000081F9                 mov     rsi, r12        ; filename
.text:00000000000081FC                 mov     edi, 1          ; ver
.text:0000000000008201                 call    ___xstat
.text:0000000000008206                 mov     rdi, r12        ; ptr
.text:0000000000008209                 mov     r15d, eax
.text:000000000000820C                 call    free
.text:0000000000008211                 test    r15d, r15d
.text:0000000000008214                 movzx   r9d, byte ptr [rbp+old]
.text:000000000000821C                 jnz     loc_6709
.text:0000000000008222                 mov     rax, [rbp+var_D0.st_ino]
.text:0000000000008229                 cmp     [rbp+stat_buf.st_ino], rax
.text:0000000000008230                 jnz     loc_6709
.text:0000000000008236                 mov     rax, [rbp+var_D0.st_dev]
.text:000000000000823D                 cmp     [rbp+stat_buf.st_dev], rax
.text:0000000000008244                 jnz     loc_6709
.text:000000000000824A                 cmp     byte ptr [rbx+18h], 0
.text:000000000000824E                 jz      loc_84B6
.text:0000000000008254                 lea     rsi, aBackingUpSMigh ; "backing up %s might destroy source;  %s"...
.text:000000000000825B                 mov     edx, 5          ; category
.text:0000000000008260                 xor     edi, edi        ; domainname
.text:0000000000008262                 call    _dcgettext
.text:0000000000008267                 mov     rbx, rax
.text:000000000000826A
.text:000000000000826A loc_826A:                               ; CODE XREF: copy_internal+2B8C↓j
.text:000000000000826A                 mov     rdx, [rbp+filename]
.text:0000000000008271                 mov     esi, 4
.text:0000000000008276                 mov     edi, 1
.text:000000000000827B                 call    quotearg_n_style
.text:0000000000008280                 mov     rdx, [rbp+file]
.text:0000000000008287                 mov     r12, rax
.text:000000000000828A                 mov     esi, 4
.text:000000000000828F                 xor     edi, edi
.text:0000000000008291                 call    quotearg_n_style
.text:0000000000008296                 mov     r8, r12
.text:0000000000008299                 mov     rcx, rax
.text:000000000000829C                 mov     rdx, rbx        ; format
.text:000000000000829F                 xor     esi, esi        ; errnum
.text:00000000000082A1                 xor     edi, edi        ; status
.text:00000000000082A3                 xor     eax, eax
.text:00000000000082A5                 call    _error
.text:00000000000082AA                 xor     r12d, r12d
.text:00000000000082AD                 jmp     loc_6186
.text:00000000000082B2 ; ---------------------------------------------------------------------------
.text:00000000000082B2
.text:00000000000082B2 loc_82B2:                               ; CODE XREF: copy_internal+18B1↑j
.text:00000000000082B2                 mov     r12d, [rbp+var_35C]
.text:00000000000082B9                 mov     rsi, [rbp+file] ; path
.text:00000000000082C0                 lea     rcx, [rbp+var_2F8] ; dev
.text:00000000000082C7                 xor     edi, edi        ; ver
.text:00000000000082C9                 mov     byte ptr [rbp+fildes], r8b
.text:00000000000082D0                 mov     [rbp+var_2F8], 0
.text:00000000000082DB                 not     r12d
.text:00000000000082DE                 and     r12d, [rbp+var_314]
.text:00000000000082E5                 mov     edx, r12d       ; mode
.text:00000000000082E8                 call    ___xmknod
.text:00000000000082ED                 test    eax, eax
.text:00000000000082EF                 movzx   r8d, byte ptr [rbp+fildes]
.text:00000000000082F7                 jz      loc_5EBF
.text:00000000000082FD                 mov     rdi, [rbp+file] ; path
.text:0000000000008304                 mov     esi, r12d
.text:0000000000008307                 and     esi, 0FFFFEFFFh ; mode
.text:000000000000830D                 call    _mkfifo
.text:0000000000008312                 test    eax, eax
.text:0000000000008314                 movzx   r8d, byte ptr [rbp+fildes]
.text:000000000000831C                 jz      loc_5EBF
.text:0000000000008322                 mov     rsi, [rbp+file]
.text:0000000000008329                 mov     edi, 4
.text:000000000000832E                 call    quotearg_style
.text:0000000000008333                 mov     edx, 5
.text:0000000000008338                 mov     r13, rax
.text:000000000000833B                 lea     rsi, aCannotCreateFi ; "cannot create fifo %s"
.text:0000000000008342                 jmp     loc_6E1F
.text:0000000000008347 ; ---------------------------------------------------------------------------
.text:0000000000008347
.text:0000000000008347 loc_8347:                               ; CODE XREF: copy_internal+20E8↑j
.text:0000000000008347                 mov     rsi, [rbp+filename]
.text:000000000000834E                 mov     edi, 4
.text:0000000000008353                 call    quotearg_style
.text:0000000000008358                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:000000000000835F                 mov     edx, 5          ; category
.text:0000000000008364                 mov     r12, rax
.text:0000000000008367                 xor     edi, edi        ; domainname
.text:0000000000008369                 call    _dcgettext
.text:000000000000836E                 mov     qword ptr [rbp+fd], rax
.text:0000000000008375                 call    ___errno_location
.text:000000000000837A                 mov     rcx, r12
.text:000000000000837D                 mov     rdx, qword ptr [rbp+fd]
.text:0000000000008384                 mov     esi, [rax]
.text:0000000000008386                 jmp     loc_7A81
.text:000000000000838B ; ---------------------------------------------------------------------------
.text:000000000000838B
.text:000000000000838B loc_838B:                               ; CODE XREF: copy_internal+168F↑j
.text:000000000000838B                 mov     rsi, [rbp+file]
.text:0000000000008392                 mov     rdi, [rbp+filename]
.text:0000000000008399                 mov     byte ptr [rbp+var_35C], r9b
.text:00000000000083A0                 mov     byte ptr [rbp+s2], r8b
.text:00000000000083A7                 mov     [rbp+old], rdx
.text:00000000000083AE                 call    same_name
.text:00000000000083B3                 test    al, al
.text:00000000000083B5                 mov     rdx, [rbp+old]
.text:00000000000083BC                 movzx   r8d, byte ptr [rbp+s2]
.text:00000000000083C4                 movzx   r9d, byte ptr [rbp+var_35C]
.text:00000000000083CC                 jz      loc_8C47
.text:00000000000083D2                 mov     eax, [rdx+18h]
.text:00000000000083D5                 and     eax, 0F000h
.text:00000000000083DA                 cmp     eax, 0A000h
.text:00000000000083DF                 jz      loc_700C
.text:00000000000083E5
.text:00000000000083E5 loc_83E5:                               ; CODE XREF: copy_internal+1ABC↑j
.text:00000000000083E5                 mov     eax, [r12+18h]
.text:00000000000083EA                 and     eax, 0F000h
.text:00000000000083EF                 cmp     eax, 0A000h
.text:00000000000083F4                 jz      loc_700C
.text:00000000000083FA                 jmp     loc_6FE4
.text:00000000000083FA ; ---------------------------------------------------------------------------
.text:00000000000083FF                 align 20h
.text:0000000000008400
.text:0000000000008400 loc_8400:                               ; CODE XREF: copy_internal+2506↑j
.text:0000000000008400                 movzx   esi, byte ptr [rbx+25h]
.text:0000000000008404                 mov     rdi, [rbp+file]
.text:000000000000840B                 xor     edx, edx
.text:000000000000840D                 mov     rcx, rbx
.text:0000000000008410                 call    set_file_security_ctx
.text:0000000000008415                 test    al, al
.text:0000000000008417                 jnz     loc_7E4C
.text:000000000000841D                 cmp     byte ptr [rbx+26h], 0
.text:0000000000008421                 jnz     loc_68D0
.text:0000000000008427                 jmp     loc_7E4C
.text:000000000000842C ; ---------------------------------------------------------------------------
.text:000000000000842C
.text:000000000000842C loc_842C:                               ; CODE XREF: copy_internal+1CF2↑j
.text:000000000000842C                 mov     rdx, [rbp+var_1F0.st_dev]
.text:0000000000008433                 mov     rsi, [rbp+var_1F0.st_ino]
.text:000000000000843A                 mov     rdi, [rbp+file] ; src
.text:0000000000008441                 call    remember_copied
.text:0000000000008446                 mov     rax, [rbp+format]
.text:000000000000844D                 mov     byte ptr [rax], 1
.text:0000000000008450                 jmp     loc_7638
.text:0000000000008455 ; ---------------------------------------------------------------------------
.text:0000000000008455
.text:0000000000008455 loc_8455:                               ; CODE XREF: copy_internal+17C7↑j
.text:0000000000008455                 mov     rdx, [rbp+filename]
.text:000000000000845C                 mov     esi, 4
.text:0000000000008461                 mov     edi, 1
.text:0000000000008466                 call    quotearg_n_style
.text:000000000000846B                 mov     rdx, [rbp+file]
.text:0000000000008472                 mov     esi, 4
.text:0000000000008477                 xor     edi, edi
.text:0000000000008479                 mov     r12, rax
.text:000000000000847C                 call    quotearg_n_style
.text:0000000000008481                 mov     edx, 5
.text:0000000000008486                 mov     rbx, rax
.text:0000000000008489                 lea     rsi, aWillNotOverwri ; "will not overwrite just-created %s with"...
.text:0000000000008490                 jmp     loc_6F7B
.text:0000000000008495 ; ---------------------------------------------------------------------------
.text:0000000000008495
.text:0000000000008495 loc_8495:                               ; CODE XREF: copy_internal+75F↑j
.text:0000000000008495                 mov     edx, [rbx+10h]
.text:0000000000008498
.text:0000000000008498 loc_8498:                               ; CODE XREF: copy_internal+2E31↓j
.text:0000000000008498                 mov     rdi, [rbp+file]
.text:000000000000849F                 mov     esi, 0FFFFFFFFh
.text:00000000000084A4                 call    set_acl
.text:00000000000084A9                 test    eax, eax
.text:00000000000084AB                 jnz     loc_5C50
.text:00000000000084B1                 jmp     loc_6186
.text:00000000000084B6 ; ---------------------------------------------------------------------------
.text:00000000000084B6
.text:00000000000084B6 loc_84B6:                               ; CODE XREF: copy_internal+290E↑j
.text:00000000000084B6                 lea     rsi, aBackingUpSMigh_0 ; "backing up %s might destroy source;  %s"...
.text:00000000000084BD                 mov     edx, 5          ; category
.text:00000000000084C2                 xor     edi, edi        ; domainname
.text:00000000000084C4                 call    _dcgettext
.text:00000000000084C9                 mov     rbx, rax
.text:00000000000084CC                 jmp     loc_826A
.text:00000000000084D1 ; ---------------------------------------------------------------------------
.text:00000000000084D1
.text:00000000000084D1 loc_84D1:                               ; CODE XREF: copy_internal+272B↑j
.text:00000000000084D1                 mov     [rbp+old], 0
.text:00000000000084DC                 mov     r14d, 1
.text:00000000000084E2                 mov     r15d, 11h
.text:00000000000084E8                 jmp     loc_5CCE
.text:00000000000084ED ; ---------------------------------------------------------------------------
.text:00000000000084ED
.text:00000000000084ED loc_84ED:                               ; CODE XREF: copy_internal+1D02↑j
.text:00000000000084ED                 mov     rsi, [rbp+file]
.text:00000000000084F4                 mov     rdi, [rbp+filename]
.text:00000000000084FB                 xor     edx, edx
.text:00000000000084FD                 call    emit_verbose
.text:0000000000008502                 jmp     loc_7688
.text:0000000000008507 ; ---------------------------------------------------------------------------
.text:0000000000008507
.text:0000000000008507 loc_8507:                               ; CODE XREF: copy_internal+2174↑j
.text:0000000000008507                 mov     rsi, [rbp+filename]
.text:000000000000850E                 mov     edi, 4
.text:0000000000008513                 call    quotearg_style
.text:0000000000008518                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:000000000000851F                 xor     edi, edi        ; domainname
.text:0000000000008521                 mov     edx, 5          ; category
.text:0000000000008526                 mov     r12, rax
.text:0000000000008529                 call    _dcgettext
.text:000000000000852E                 mov     r13, rax
.text:0000000000008531                 call    ___errno_location
.text:0000000000008536                 mov     esi, [rax]      ; errnum
.text:0000000000008538                 xor     edi, edi        ; status
.text:000000000000853A                 mov     rcx, r12
.text:000000000000853D                 mov     rdx, r13        ; format
.text:0000000000008540                 xor     eax, eax
.text:0000000000008542                 call    _error
.text:0000000000008547                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000854E                 call    free
.text:0000000000008553                 jmp     loc_68D0
.text:0000000000008558 ; ---------------------------------------------------------------------------
.text:0000000000008558
.text:0000000000008558 loc_8558:                               ; CODE XREF: copy_internal+1DB6↑j
.text:0000000000008558                 mov     rsi, [rbp+filename]
.text:000000000000855F                 mov     edi, 4
.text:0000000000008564                 call    quotearg_style
.text:0000000000008569                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:0000000000008570                 mov     edx, 5          ; category
.text:0000000000008575                 xor     edi, edi        ; domainname
.text:0000000000008577                 mov     r12, rax
.text:000000000000857A                 call    _dcgettext
.text:000000000000857F                 mov     r15, rax
.text:0000000000008582                 call    ___errno_location
.text:0000000000008587                 mov     esi, [rax]      ; errnum
.text:0000000000008589                 mov     rcx, r12
.text:000000000000858C                 mov     rdx, r15        ; format
.text:000000000000858F                 xor     edi, edi        ; status
.text:0000000000008591                 xor     eax, eax
.text:0000000000008593                 xor     r12d, r12d
.text:0000000000008596                 call    _error
.text:000000000000859B                 jmp     loc_7883
.text:00000000000085A0 ; ---------------------------------------------------------------------------
.text:00000000000085A0
.text:00000000000085A0 loc_85A0:                               ; CODE XREF: copy_internal+18DC↑j
.text:00000000000085A0                 mov     rsi, [rbp+stat_buf.st_size]
.text:00000000000085A7                 mov     rdi, [rbp+filename] ; path
.text:00000000000085AE                 call    areadlink_with_size
.text:00000000000085B3                 test    rax, rax
.text:00000000000085B6                 mov     r12, rax
.text:00000000000085B9                 jz      loc_8E03
.text:00000000000085BF                 movzx   ecx, byte ptr [rbx+16h]
.text:00000000000085C3                 mov     rdx, [rbp+file]
.text:00000000000085CA                 mov     r8d, 0FFFFFFFFh
.text:00000000000085D0                 mov     esi, 0FFFFFF9Ch
.text:00000000000085D5                 mov     rdi, rax
.text:00000000000085D8                 call    force_symlinkat
.text:00000000000085DD                 test    eax, eax
.text:00000000000085DF                 mov     [rbp+fildes], eax
.text:00000000000085E5                 jle     loc_8E28
.text:00000000000085EB                 cmp     byte ptr [rbx+2Dh], 1
.text:00000000000085EF                 jnz     short loc_85FA
.text:00000000000085F1                 test    r14b, r14b
.text:00000000000085F4                 jz      loc_91D9
.text:00000000000085FA
.text:00000000000085FA loc_85FA:                               ; CODE XREF: copy_internal+2CAF↑j
.text:00000000000085FA                                         ; copy_internal+38A9↓j ...
.text:00000000000085FA                 mov     rdi, r12        ; ptr
.text:00000000000085FD                 call    free
.text:0000000000008602                 mov     rsi, [rbp+file]
.text:0000000000008609                 mov     edi, 4
.text:000000000000860E                 call    quotearg_style
.text:0000000000008613                 lea     rsi, aCannotCreateSy_0 ; "cannot create symbolic link %s"
.text:000000000000861A                 xor     edi, edi        ; domainname
.text:000000000000861C                 mov     edx, 5          ; category
.text:0000000000008621                 mov     r12, rax
.text:0000000000008624                 call    _dcgettext
.text:0000000000008629                 mov     esi, [rbp+fildes] ; errnum
.text:000000000000862F                 mov     rdx, rax        ; format
.text:0000000000008632                 mov     rcx, r12
.text:0000000000008635                 xor     edi, edi        ; status
.text:0000000000008637                 xor     eax, eax
.text:0000000000008639                 call    _error
.text:000000000000863E                 jmp     loc_68D0
.text:0000000000008643 ; ---------------------------------------------------------------------------
.text:0000000000008643
.text:0000000000008643 loc_8643:                               ; CODE XREF: copy_internal+1CE2↑j
.text:0000000000008643                 mov     rsi, [rbp+file]
.text:000000000000864A                 mov     edi, 4
.text:000000000000864F                 call    quotearg_style
.text:0000000000008654                 mov     edx, 5
.text:0000000000008659                 mov     r13, rax
.text:000000000000865C                 lea     rsi, aSettingPermiss ; "setting permissions for %s"
.text:0000000000008663                 jmp     loc_6E1F
.text:0000000000008668 ; ---------------------------------------------------------------------------
.text:0000000000008668
.text:0000000000008668 loc_8668:                               ; CODE XREF: copy_internal+2784↑j
.text:0000000000008668                 cmp     qword ptr [rbx+40h], 0
.text:000000000000866D                 mov     r14d, r13d
.text:0000000000008670                 mov     [rbp+old], 0
.text:000000000000867B                 mov     r15d, 11h
.text:0000000000008681                 jnz     loc_5CE2
.text:0000000000008687                 jmp     loc_5DA9
.text:000000000000868C ; ---------------------------------------------------------------------------
.text:000000000000868C
.text:000000000000868C loc_868C:                               ; CODE XREF: copy_internal+277B↑j
.text:000000000000868C                 mov     rsi, [rbp+file]
.text:0000000000008693                 mov     edi, 4
.text:0000000000008698                 mov     byte ptr [rbp+s2], r9b
.text:000000000000869F                 mov     r15d, 11h
.text:00000000000086A5                 call    quotearg_style
.text:00000000000086AA                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:00000000000086B1                 mov     r12, rax
.text:00000000000086B4                 mov     edx, 5          ; category
.text:00000000000086B9                 xor     edi, edi        ; domainname
.text:00000000000086BB                 call    _dcgettext
.text:00000000000086C0                 mov     rdx, r12
.text:00000000000086C3                 mov     rsi, rax
.text:00000000000086C6                 mov     edi, 1
.text:00000000000086CB                 xor     eax, eax
.text:00000000000086CD                 call    ___printf_chk
.text:00000000000086D2                 mov     [rbp+old], 0
.text:00000000000086DD                 movzx   r9d, byte ptr [rbp+s2]
.text:00000000000086E5                 jmp     loc_5CCE
.text:00000000000086EA ; ---------------------------------------------------------------------------
.text:00000000000086EA
.text:00000000000086EA loc_86EA:                               ; CODE XREF: copy_internal+6FC↑j
.text:00000000000086EA                 mov     eax, [rbp+var_1F0.st_gid]
.text:00000000000086F0                 cmp     [rbp+stat_buf.st_gid], eax
.text:00000000000086F6                 jnz     loc_6042
.text:00000000000086FC                 jmp     loc_6087
.text:0000000000008701 ; ---------------------------------------------------------------------------
.text:0000000000008701
.text:0000000000008701 loc_8701:                               ; CODE XREF: copy_internal+777↑j
.text:0000000000008701                 call    cached_umask
.text:0000000000008706                 not     eax
.text:0000000000008708                 and     [rbp+var_35C], eax
.text:000000000000870E                 jz      loc_60BD
.text:0000000000008714                 cmp     [rbp+var_315], 1
.text:000000000000871B                 jz      loc_60CA
.text:0000000000008721                 test    r14b, r14b
.text:0000000000008724                 jnz     loc_9097
.text:000000000000872A
.text:000000000000872A loc_872A:                               ; CODE XREF: copy_internal+3771↓j
.text:000000000000872A                 mov     eax, [rbp+var_1F0.st_mode]
.text:0000000000008730                 mov     [rbp+var_38C], eax
.text:0000000000008736                 not     eax
.text:0000000000008738                 test    [rbp+var_35C], eax
.text:000000000000873E                 jnz     loc_60CA
.text:0000000000008744                 jmp     loc_6186
.text:0000000000008749 ; ---------------------------------------------------------------------------
.text:0000000000008749
.text:0000000000008749 loc_8749:                               ; CODE XREF: copy_internal+769↑j
.text:0000000000008749                 mov     eax, [rbp+var_314]
.text:000000000000874F                 mov     edx, 1B6h
.text:0000000000008754                 mov     ebx, 1FFh
.text:0000000000008759                 and     eax, 7000h
.text:000000000000875E                 cmp     eax, 4000h
.text:0000000000008763                 cmovnz  ebx, edx
.text:0000000000008766                 call    cached_umask
.text:000000000000876B                 not     eax
.text:000000000000876D                 mov     edx, eax
.text:000000000000876F                 and     edx, ebx
.text:0000000000008771                 jmp     loc_8498
.text:0000000000008776 ; ---------------------------------------------------------------------------
.text:0000000000008776
.text:0000000000008776 loc_8776:                               ; CODE XREF: copy_internal+210C↑j
.text:0000000000008776                 and     r12d, 1FFh
.text:000000000000877D                 test    r14b, r14b
.text:0000000000008780                 mov     [rbp+var_3A4], r12d
.text:0000000000008787                 jnz     loc_8D20
.text:000000000000878D                 cmp     byte ptr [rbx+23h], 1
.text:0000000000008791                 mov     rdi, [rbp+file]
.text:0000000000008798                 sbb     esi, esi
.text:000000000000879A                 xor     eax, eax
.text:000000000000879C                 and     esi, 0FFFFFE00h
.text:00000000000087A2                 add     esi, 201h
.text:00000000000087A8                 call    open_safer
.text:00000000000087AD                 mov     [rbp+fd], eax
.text:00000000000087B3                 call    ___errno_location
.text:00000000000087B8                 mov     r12, rax
.text:00000000000087BB                 mov     rax, 0FF000000FF00h
.text:00000000000087C5                 test    [rbx+20h], rax
.text:00000000000087C9                 jnz     loc_9055
.text:00000000000087CF                 cmp     [rbp+fd], 0
.text:00000000000087D6                 js      loc_9062
.text:00000000000087DC
.text:00000000000087DC loc_87DC:                               ; CODE XREF: copy_internal+3988↓j
.text:00000000000087DC                                         ; copy_internal+39A3↓j
.text:00000000000087DC                 mov     dword ptr [rbp+var_378], 0
.text:00000000000087E6
.text:00000000000087E6 loc_87E6:                               ; CODE XREF: copy_internal+3963↓j
.text:00000000000087E6                 lea     rax, [rbp+var_D0]
.text:00000000000087ED                 mov     esi, [rbp+fd]   ; fildes
.text:00000000000087F3                 mov     edi, 1          ; ver
.text:00000000000087F8                 mov     rdx, rax        ; stat_buf
.text:00000000000087FB                 mov     [rbp+s], rax
.text:0000000000008802                 call    ___fxstat
.text:0000000000008807                 test    eax, eax
.text:0000000000008809                 mov     dword ptr [rbp+var_348], eax
.text:000000000000880F                 jnz     loc_93B6
.text:0000000000008815                 cmp     byte ptr [rbp+format], 0
.text:000000000000881C                 jz      loc_8EEF
.text:0000000000008822                 cmp     dword ptr [rbx+38h], 0
.text:0000000000008826                 jnz     loc_9684
.text:000000000000882C
.text:000000000000882C loc_882C:                               ; CODE XREF: copy_internal+3D68↓j
.text:000000000000882C                 call    _getpagesize
.text:0000000000008831                 mov     rcx, [rbp+var_D0.st_blksize]
.text:0000000000008838                 movsxd  r12, eax
.text:000000000000883B                 mov     rax, 1FFFFFFFFFFE0000h
.text:0000000000008845                 mov     r8d, 200h
.text:000000000000884B                 mov     edi, [rbp+fildes] ; fd
.text:0000000000008851                 mov     [rbp+ptr], r8
.text:0000000000008858                 lea     rdx, [rcx-20000h]
.text:000000000000885F                 cmp     rdx, rax
.text:0000000000008862                 mov     eax, 20000h
.text:0000000000008867                 lea     rdx, [rcx-1]
.text:000000000000886B                 cmovbe  rax, rcx
.text:000000000000886F                 mov     [rbp+var_370], rax
.text:0000000000008876                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:0000000000008880                 cmp     rdx, rax
.text:0000000000008883                 cmova   rcx, r8
.text:0000000000008887                 xor     edx, edx        ; len
.text:0000000000008889                 xor     esi, esi        ; offset
.text:000000000000888B                 mov     [rbp+var_398], rcx
.text:0000000000008892                 mov     ecx, 2          ; advise
.text:0000000000008897                 call    fdadvise
.text:000000000000889C                 mov     r9d, [rbp+var_160.st_mode]
.text:00000000000088A3                 mov     r8, [rbp+ptr]
.text:00000000000088AA                 and     r9d, 0F000h
.text:00000000000088B1                 cmp     r9d, 8000h
.text:00000000000088B8                 jz      loc_979A
.text:00000000000088BE
.text:00000000000088BE loc_88BE:                               ; CODE XREF: copy_internal+3E79↓j
.text:00000000000088BE                 mov     eax, [rbp+var_D0.st_mode]
.text:00000000000088C4                 and     eax, 0F000h
.text:00000000000088C9                 cmp     eax, 8000h
.text:00000000000088CE                 jz      loc_972F
.text:00000000000088D4
.text:00000000000088D4 loc_88D4:                               ; CODE XREF: copy_internal+3DFE↓j
.text:00000000000088D4                                         ; copy_internal+3E0B↓j
.text:00000000000088D4                 mov     rdi, [rbp+var_160.st_blksize]
.text:00000000000088DB                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:00000000000088E5                 mov     rsi, [rbp+var_370]
.text:00000000000088EC                 sub     rax, r12
.text:00000000000088EF                 mov     dword ptr [rbp+length], r9d
.text:00000000000088F6                 mov     r8, rax
.text:00000000000088F9                 mov     rax, 1FFFFFFFFFFE0000h
.text:0000000000008903                 lea     rdx, [rdi-20000h]
.text:000000000000890A                 mov     [rbp+ptr], r8
.text:0000000000008911                 cmp     rdx, rax
.text:0000000000008914                 mov     eax, 20000h
.text:0000000000008919                 mov     rdx, r8
.text:000000000000891C                 cmova   rdi, rax
.text:0000000000008920                 call    buffer_lcm
.text:0000000000008925                 mov     r9d, dword ptr [rbp+length]
.text:000000000000892C                 mov     rcx, rax
.text:000000000000892F                 mov     r8, [rbp+ptr]
.text:0000000000008936                 cmp     r9d, 8000h
.text:000000000000893D                 jz      loc_960D
.text:0000000000008943
.text:0000000000008943 loc_8943:                               ; CODE XREF: copy_internal+3CDB↓j
.text:0000000000008943                                         ; copy_internal+3CEC↓j
.text:0000000000008943                 mov     rax, [rbp+var_370]
.text:000000000000894A                 xor     edx, edx
.text:000000000000894C                 lea     rsi, [rcx+rax-1]
.text:0000000000008951                 mov     rax, rsi
.text:0000000000008954                 div     rcx
.text:0000000000008957                 sub     rsi, rdx
.text:000000000000895A                 mov     [rbp+var_370], rsi
.text:0000000000008961                 jz      loc_9411
.text:0000000000008967                 cmp     rsi, r8
.text:000000000000896A                 ja      loc_9411
.text:0000000000008970
.text:0000000000008970 loc_8970:                               ; CODE XREF: copy_internal+3AD8↓j
.text:0000000000008970                 mov     rax, [rbp+var_370]
.text:0000000000008977                 lea     rdi, [r12+rax]
.text:000000000000897B                 call    xmalloc
.text:0000000000008980                 lea     rcx, [rax+r12-1]
.text:0000000000008985                 xor     edx, edx
.text:0000000000008987                 mov     [rbp+ptr], rax
.text:000000000000898E                 mov     rax, rcx
.text:0000000000008991                 div     r12
.text:0000000000008994                 sub     rcx, rdx
.text:0000000000008997                 cmp     dword ptr [rbp+var_348], 0
.text:000000000000899E                 mov     [rbp+var_3B0], rcx
.text:00000000000089A5                 jz      loc_941D
.text:00000000000089AB                 mov     [rbp+var_3A5], 0
.text:00000000000089B2                 mov     [rbp+var_390], 1
.text:00000000000089BC
.text:00000000000089BC loc_89BC:                               ; CODE XREF: copy_internal+3E55↓j
.text:00000000000089BC                 mov     rax, [rbp+var_160.st_size]
.text:00000000000089C3                 mov     edi, [rbp+fildes]
.text:00000000000089C9                 xor     r12d, r12d
.text:00000000000089CC                 mov     [rbp+length], rax
.text:00000000000089D3                 lea     rax, [rbp+dev]
.text:00000000000089DA                 mov     rsi, rax
.text:00000000000089DD                 mov     [rbp+var_348], rax
.text:00000000000089E4                 call    extent_scan_init
.text:00000000000089E9                 lea     rax, [rbp+var_2F9]
.text:00000000000089F0                 xor     ecx, ecx
.text:00000000000089F2                 mov     [rbp+var_388], rbx
.text:00000000000089F9                 mov     [rbp+var_3A0], 0
.text:0000000000008A04                 mov     rbx, rcx
.text:0000000000008A07                 mov     [rbp+var_360], r13d
.text:0000000000008A0E                 mov     [rbp-3B8h], rax
.text:0000000000008A15                 lea     rax, [rbp+var_2F8]
.text:0000000000008A1C                 mov     [rbp+var_3C0], rax
.text:0000000000008A23
.text:0000000000008A23 loc_8A23:                               ; CODE XREF: copy_internal+3BF7↓j
.text:0000000000008A23                 mov     rdi, [rbp+var_348]
.text:0000000000008A2A                 call    extent_scan_read
.text:0000000000008A2F                 test    al, al
.text:0000000000008A31                 jz      loc_9631
.text:0000000000008A37                 cmp     qword ptr [rbp+var_2E0+8], 0
.text:0000000000008A3F                 jz      loc_950E
.text:0000000000008A45                 mov     rdx, rbx
.text:0000000000008A48                 mov     rcx, r12
.text:0000000000008A4B                 xor     r13d, r13d
.text:0000000000008A4E                 xor     eax, eax
.text:0000000000008A50                 jmp     loc_8B0D
.text:0000000000008A50 ; ---------------------------------------------------------------------------
.text:0000000000008A55                 align 8
.text:0000000000008A58
.text:0000000000008A58 loc_8A58:                               ; CODE XREF: copy_internal+3213↓j
.text:0000000000008A58                                         ; copy_internal+3272↓j
.text:0000000000008A58                 cmp     [rbp+var_390], 3
.text:0000000000008A5F                 mov     r8d, 0
.text:0000000000008A65                 cmovz   r8, [rbp+var_398]
.text:0000000000008A6D
.text:0000000000008A6D loc_8A6D:                               ; CODE XREF: copy_internal+39C1↓j
.text:0000000000008A6D                 sub     rsp, 8
.text:0000000000008A71                 mov     rcx, [rbp+var_370]
.text:0000000000008A78                 mov     rdx, [rbp+var_3B0]
.text:0000000000008A7F                 mov     esi, [rbp+fd]
.text:0000000000008A85                 mov     edi, [rbp+fildes]
.text:0000000000008A8B                 mov     r9d, 1
.text:0000000000008A91                 push    qword ptr [rbp-3B8h]
.text:0000000000008A97                 push    [rbp+var_3C0]
.text:0000000000008A9D                 push    rbx
.text:0000000000008A9E                 push    [rbp+file]
.text:0000000000008AA4                 push    [rbp+filename]
.text:0000000000008AAA                 call    sparse_copy
.text:0000000000008AAF                 add     rsp, 30h
.text:0000000000008AB3                 test    al, al
.text:0000000000008AB5                 jz      loc_8BB8
.text:0000000000008ABB                 mov     rax, [rbp+var_2F8]
.text:0000000000008AC2                 lea     rcx, [r12+rax]
.text:0000000000008AC6                 test    rax, rax
.text:0000000000008AC9                 mov     [rbp+var_3A0], rcx
.text:0000000000008AD0                 jz      short loc_8ADF
.text:0000000000008AD2                 movzx   eax, [rbp+var_2F9]
.text:0000000000008AD9                 mov     byte ptr [rbp+format], al
.text:0000000000008ADF
.text:0000000000008ADF loc_8ADF:                               ; CODE XREF: copy_internal+3190↑j
.text:0000000000008ADF                 mov     rcx, [rbp+var_3A0]
.text:0000000000008AE6                 cmp     [rbp+length], rcx
.text:0000000000008AED                 jz      loc_9507
.text:0000000000008AF3                 lea     eax, [r13+1]
.text:0000000000008AF7                 cmp     rax, qword ptr [rbp+var_2E0+8]
.text:0000000000008AFE                 mov     rcx, r12
.text:0000000000008B01                 mov     rdx, rbx
.text:0000000000008B04                 mov     r13, rax
.text:0000000000008B07                 jnb     loc_950E
.text:0000000000008B0D
.text:0000000000008B0D loc_8B0D:                               ; CODE XREF: copy_internal+3110↑j
.text:0000000000008B0D                 lea     rsi, [rax+rax*2]
.text:0000000000008B11                 mov     rax, [rbp+var_2D0+8]
.text:0000000000008B18                 lea     rax, [rax+rsi*8]
.text:0000000000008B1C                 mov     rsi, [rbp+length]
.text:0000000000008B23                 mov     r12, [rax]
.text:0000000000008B26                 mov     rbx, [rax+8]
.text:0000000000008B2A                 lea     rax, [r12+rbx]
.text:0000000000008B2E                 cmp     rsi, rax
.text:0000000000008B31                 jge     short loc_8B40
.text:0000000000008B33                 cmp     r12, rsi
.text:0000000000008B36                 cmovg   r12, rsi
.text:0000000000008B3A                 sub     rsi, r12
.text:0000000000008B3D                 mov     rbx, rsi
.text:0000000000008B40
.text:0000000000008B40 loc_8B40:                               ; CODE XREF: copy_internal+31F1↑j
.text:0000000000008B40                 mov     rax, r12
.text:0000000000008B43                 mov     byte ptr [rbp+format], 0
.text:0000000000008B4A                 sub     rax, rcx
.text:0000000000008B4D                 mov     rcx, rax
.text:0000000000008B50                 sub     rcx, rdx
.text:0000000000008B53                 jz      loc_8A58
.text:0000000000008B59                 mov     edi, [rbp+fildes] ; fd
.text:0000000000008B5F                 xor     edx, edx        ; whence
.text:0000000000008B61                 mov     rsi, r12        ; offset
.text:0000000000008B64                 mov     [rbp+var_3A0], rcx
.text:0000000000008B6B                 call    _lseek
.text:0000000000008B70                 test    rax, rax
.text:0000000000008B73                 mov     rcx, [rbp+var_3A0]
.text:0000000000008B7A                 js      loc_99EF
.text:0000000000008B80                 mov     eax, [rbp+var_390]
.text:0000000000008B86                 cmp     eax, 3
.text:0000000000008B89                 setz    dl
.text:0000000000008B8C                 sub     eax, 1
.text:0000000000008B8F                 jz      loc_92E8
.text:0000000000008B95                 mov     rsi, [rbp+file]
.text:0000000000008B9C                 mov     edi, [rbp+fd]
.text:0000000000008BA2                 movzx   edx, dl
.text:0000000000008BA5                 call    create_hole
.text:0000000000008BAA                 test    al, al
.text:0000000000008BAC                 mov     byte ptr [rbp+format], al
.text:0000000000008BB2                 jnz     loc_8A58
.text:0000000000008BB8
.text:0000000000008BB8 loc_8BB8:                               ; CODE XREF: copy_internal+3175↑j
.text:0000000000008BB8                 mov     rbx, [rbp+var_388]
.text:0000000000008BBF                 mov     r13d, [rbp+var_360]
.text:0000000000008BC6
.text:0000000000008BC6 loc_8BC6:                               ; CODE XREF: copy_internal+3F2B↓j
.text:0000000000008BC6                 mov     rdi, [rbp+var_2D0+8] ; ptr
.text:0000000000008BCD                 call    free
.text:0000000000008BD2
.text:0000000000008BD2 loc_8BD2:                               ; CODE XREF: copy_internal+3610↓j
.text:0000000000008BD2                                         ; copy_internal+3A71↓j ...
.text:0000000000008BD2                 xor     r8d, r8d
.text:0000000000008BD5
.text:0000000000008BD5 loc_8BD5:                               ; CODE XREF: copy_internal+366F↓j
.text:0000000000008BD5                                         ; copy_internal+3691↓j ...
.text:0000000000008BD5                 mov     edi, [rbp+fd]   ; fd
.text:0000000000008BDB                 mov     byte ptr [rbp+format], r8b
.text:0000000000008BE2                 call    _close
.text:0000000000008BE7                 test    eax, eax
.text:0000000000008BE9                 movzx   r8d, byte ptr [rbp+format]
.text:0000000000008BF1                 jns     loc_7A98
.text:0000000000008BF7                 mov     rsi, [rbp+file]
.text:0000000000008BFE                 mov     edi, 4
.text:0000000000008C03                 call    quotearg_style
.text:0000000000008C08                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:0000000000008C0F                 mov     edx, 5          ; category
.text:0000000000008C14                 xor     edi, edi        ; domainname
.text:0000000000008C16                 mov     r12, rax
.text:0000000000008C19                 call    _dcgettext
.text:0000000000008C1E                 mov     qword ptr [rbp+fd], rax
.text:0000000000008C25                 call    ___errno_location
.text:0000000000008C2A                 mov     rdx, qword ptr [rbp+fd] ; format
.text:0000000000008C31                 mov     esi, [rax]      ; errnum
.text:0000000000008C33                 mov     rcx, r12
.text:0000000000008C36                 xor     edi, edi        ; status
.text:0000000000008C38                 xor     eax, eax
.text:0000000000008C3A                 call    _error
.text:0000000000008C3F                 xor     r8d, r8d
.text:0000000000008C42                 jmp     loc_7A98
.text:0000000000008C47 ; ---------------------------------------------------------------------------
.text:0000000000008C47
.text:0000000000008C47 loc_8C47:                               ; CODE XREF: copy_internal+2A8C↑j
.text:0000000000008C47                 movzx   r12d, byte ptr [rbx+18h]
.text:0000000000008C4C                 xor     r12d, 1
.text:0000000000008C50                 jmp     loc_70BC
.text:0000000000008C55 ; ---------------------------------------------------------------------------
.text:0000000000008C55
.text:0000000000008C55 loc_8C55:                               ; CODE XREF: copy_internal+1DD6↑j
.text:0000000000008C55                 mov     [rbp+var_315], 0
.text:0000000000008C5C                 mov     r12d, 1
.text:0000000000008C62                 jmp     loc_7867
.text:0000000000008C67 ; ---------------------------------------------------------------------------
.text:0000000000008C67
.text:0000000000008C67 loc_8C67:                               ; CODE XREF: copy_internal+221E↑j
.text:0000000000008C67                 mov     rax, [rbp+var_D0.st_dev]
.text:0000000000008C6E                 cmp     [rbp+var_160.st_dev], rax
.text:0000000000008C75                 jnz     loc_7B64
.text:0000000000008C7B                 jmp     loc_683C
.text:0000000000008C80 ; ---------------------------------------------------------------------------
.text:0000000000008C80
.text:0000000000008C80 loc_8C80:                               ; CODE XREF: copy_internal+372A↓j
.text:0000000000008C80                 mov     rdi, [rbp+file] ; name
.text:0000000000008C87                 call    _unlink
.text:0000000000008C8C                 test    eax, eax
.text:0000000000008C8E                 jnz     loc_98C6
.text:0000000000008C94                 cmp     byte ptr [rbx+2Eh], 0
.text:0000000000008C98                 jz      short loc_8CD3
.text:0000000000008C9A                 mov     rsi, [rbp+file]
.text:0000000000008CA1                 mov     edi, 4
.text:0000000000008CA6                 call    quotearg_style
.text:0000000000008CAB                 lea     rsi, aRemovedS  ; "removed %s\n"
.text:0000000000008CB2                 mov     r12, rax
.text:0000000000008CB5                 mov     edx, 5          ; category
.text:0000000000008CBA                 xor     edi, edi        ; domainname
.text:0000000000008CBC                 call    _dcgettext
.text:0000000000008CC1                 mov     rdx, r12
.text:0000000000008CC4                 mov     rsi, rax
.text:0000000000008CC7                 mov     edi, 1
.text:0000000000008CCC                 xor     eax, eax
.text:0000000000008CCE                 call    ___printf_chk
.text:0000000000008CD3
.text:0000000000008CD3 loc_8CD3:                               ; CODE XREF: copy_internal+3358↑j
.text:0000000000008CD3                 movzx   r14d, byte ptr [rbx+21h]
.text:0000000000008CD8                 mov     eax, [rbp+var_35C]
.text:0000000000008CDE                 mov     dword ptr [rbp+var_378], eax
.text:0000000000008CE4                 test    r14b, r14b
.text:0000000000008CE7                 jz      short loc_8D2C
.text:0000000000008CE9                 mov     edx, [rbp+var_3A4]
.text:0000000000008CEF                 mov     rsi, [rbp+file]
.text:0000000000008CF6                 mov     r8, rbx
.text:0000000000008CF9                 mov     rdi, [rbp+filename]
.text:0000000000008D00                 mov     ecx, 1
.text:0000000000008D05                 call    set_process_security_ctx
.text:0000000000008D0A                 test    al, al
.text:0000000000008D0C                 mov     r8d, eax
.text:0000000000008D0F                 mov     [rbp+ptr], 0
.text:0000000000008D1A                 jz      loc_7A98
.text:0000000000008D20
.text:0000000000008D20 loc_8D20:                               ; CODE XREF: copy_internal+2E47↑j
.text:0000000000008D20                 mov     eax, [rbp+var_35C]
.text:0000000000008D26                 mov     dword ptr [rbp+var_378], eax
.text:0000000000008D2C
.text:0000000000008D2C loc_8D2C:                               ; CODE XREF: copy_internal+33A7↑j
.text:0000000000008D2C                                         ; copy_internal+3752↓j
.text:0000000000008D2C                 mov     eax, dword ptr [rbp+var_378]
.text:0000000000008D32                 mov     rdi, [rbp+file]
.text:0000000000008D39                 mov     esi, 0C1h
.text:0000000000008D3E                 not     eax
.text:0000000000008D40                 and     eax, [rbp+var_3A4]
.text:0000000000008D46                 mov     edx, eax
.text:0000000000008D48                 mov     dword ptr [rbp+ptr], eax
.text:0000000000008D4E                 xor     eax, eax
.text:0000000000008D50                 call    open_safer
.text:0000000000008D55                 mov     r14d, eax
.text:0000000000008D58                 mov     [rbp+fd], eax
.text:0000000000008D5E                 call    ___errno_location
.text:0000000000008D63                 mov     r8d, [rax]
.text:0000000000008D66                 mov     r12, rax
.text:0000000000008D69                 mov     eax, r14d
.text:0000000000008D6C                 shr     eax, 1Fh
.text:0000000000008D6F                 cmp     r8d, 11h
.text:0000000000008D73                 setz    dl
.text:0000000000008D76                 and     dl, al
.text:0000000000008D78                 mov     r14d, edx
.text:0000000000008D7B                 jz      loc_9182
.text:0000000000008D81                 cmp     byte ptr [rbx+18h], 0
.text:0000000000008D85                 mov     r8d, 11h
.text:0000000000008D8B                 jz      loc_9115
.text:0000000000008D91
.text:0000000000008D91 loc_8D91:                               ; CODE XREF: copy_internal+3969↓j
.text:0000000000008D91                 mov     r9d, 1
.text:0000000000008D97
.text:0000000000008D97 loc_8D97:                               ; CODE XREF: copy_internal+3738↓j
.text:0000000000008D97                                         ; copy_internal+3742↓j ...
.text:0000000000008D97                 mov     rsi, [rbp+file]
.text:0000000000008D9E                 mov     edi, 4
.text:0000000000008DA3                 mov     byte ptr [rbp+ptr], r9b
.text:0000000000008DAA                 mov     [rbp+fd], r8d
.text:0000000000008DB1                 call    quotearg_style
.text:0000000000008DB6                 lea     rsi, aCannotCreateRe ; "cannot create regular file %s"
.text:0000000000008DBD                 mov     edx, 5          ; category
.text:0000000000008DC2                 xor     edi, edi        ; domainname
.text:0000000000008DC4                 mov     r12, rax
.text:0000000000008DC7                 call    _dcgettext
.text:0000000000008DCC                 mov     r8d, [rbp+fd]
.text:0000000000008DD3                 mov     rdx, rax        ; format
.text:0000000000008DD6                 mov     rcx, r12
.text:0000000000008DD9                 xor     edi, edi        ; status
.text:0000000000008DDB                 xor     eax, eax
.text:0000000000008DDD                 mov     esi, r8d        ; errnum
.text:0000000000008DE0                 call    _error
.text:0000000000008DE5                 movzx   r9d, byte ptr [rbp+ptr]
.text:0000000000008DED                 xor     r8d, r8d
.text:0000000000008DF0                 mov     [rbp+ptr], 0
.text:0000000000008DFB                 mov     r14d, r9d
.text:0000000000008DFE                 jmp     loc_7A98
.text:0000000000008E03 ; ---------------------------------------------------------------------------
.text:0000000000008E03
.text:0000000000008E03 loc_8E03:                               ; CODE XREF: copy_internal+2C79↑j
.text:0000000000008E03                 mov     rsi, [rbp+filename]
.text:0000000000008E0A                 mov     edi, 4
.text:0000000000008E0F                 call    quotearg_style
.text:0000000000008E14                 mov     edx, 5
.text:0000000000008E19                 mov     r13, rax
.text:0000000000008E1C                 lea     rsi, aCannotReadSymb ; "cannot read symbolic link %s"
.text:0000000000008E23                 jmp     loc_6E1F
.text:0000000000008E28 ; ---------------------------------------------------------------------------
.text:0000000000008E28
.text:0000000000008E28 loc_8E28:                               ; CODE XREF: copy_internal+2CA5↑j
.text:0000000000008E28                 mov     rdi, r12        ; ptr
.text:0000000000008E2B                 call    free
.text:0000000000008E30
.text:0000000000008E30 loc_8E30:                               ; CODE XREF: copy_internal+3918↓j
.text:0000000000008E30                 movzx   r8d, byte ptr [rbx+25h]
.text:0000000000008E35                 test    r8b, r8b
.text:0000000000008E38                 jnz     loc_6A50
.text:0000000000008E3E                 movzx   eax, byte ptr [rbx+1Dh]
.text:0000000000008E42                 test    al, al
.text:0000000000008E44                 mov     byte ptr [rbp+fildes], al
.text:0000000000008E4A                 jnz     loc_90C3
.text:0000000000008E50                 movzx   r8d, byte ptr [rbp+fildes]
.text:0000000000008E58                 mov     byte ptr [rbp+fildes], 1
.text:0000000000008E5F                 jmp     loc_5EBF
.text:0000000000008E64 ; ---------------------------------------------------------------------------
.text:0000000000008E64
.text:0000000000008E64 loc_8E64:                               ; CODE XREF: copy_internal+856↑j
.text:0000000000008E64                 call    ___stack_chk_fail
.text:0000000000008E69 ; ---------------------------------------------------------------------------
.text:0000000000008E69
.text:0000000000008E69 loc_8E69:                               ; CODE XREF: copy_internal+1B6B↑j
.text:0000000000008E69                 mov     rsi, [rbp+file] ; filename
.text:0000000000008E70                 lea     rdx, [rbp+var_160] ; stat_buf
.text:0000000000008E77                 mov     edi, 1          ; ver
.text:0000000000008E7C                 mov     byte ptr [rbp+s2], r9b
.text:0000000000008E83                 mov     byte ptr [rbp+old], r8b
.text:0000000000008E8A                 call    ___xstat
.text:0000000000008E8F                 test    eax, eax
.text:0000000000008E91                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000008E99                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000008EA1                 jz      loc_7531
.text:0000000000008EA7                 jmp     loc_5B5F
.text:0000000000008EAC ; ---------------------------------------------------------------------------
.text:0000000000008EAC
.text:0000000000008EAC loc_8EAC:                               ; CODE XREF: copy_internal+1AF4↑j
.text:0000000000008EAC                 mov     rsi, [rbp+filename] ; filename
.text:0000000000008EB3                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000008EBA                 mov     edi, 1          ; ver
.text:0000000000008EBF                 mov     byte ptr [rbp+s2], r9b
.text:0000000000008EC6                 mov     byte ptr [rbp+old], r8b
.text:0000000000008ECD                 call    ___xstat
.text:0000000000008ED2                 test    eax, eax
.text:0000000000008ED4                 movzx   r8d, byte ptr [rbp+old]
.text:0000000000008EDC                 movzx   r9d, byte ptr [rbp+s2]
.text:0000000000008EE4                 jz      loc_749C
.text:0000000000008EEA                 jmp     loc_5B5F
.text:0000000000008EEF ; ---------------------------------------------------------------------------
.text:0000000000008EEF
.text:0000000000008EEF loc_8EEF:                               ; CODE XREF: copy_internal+2EDC↑j
.text:0000000000008EEF                                         ; copy_internal+3D5E↓j
.text:0000000000008EEF                 mov     [rbp+ptr], 0
.text:0000000000008EFA
.text:0000000000008EFA loc_8EFA:                               ; CODE XREF: copy_internal+3B5A↓j
.text:0000000000008EFA                                         ; copy_internal+3B74↓j ...
.text:0000000000008EFA                 cmp     byte ptr [rbx+1Fh], 0
.text:0000000000008EFE                 jnz     loc_9306
.text:0000000000008F04
.text:0000000000008F04 loc_8F04:                               ; CODE XREF: copy_internal+3A19↓j
.text:0000000000008F04                                         ; copy_internal+3A6B↓j
.text:0000000000008F04                 cmp     byte ptr [rbx+1Dh], 0
.text:0000000000008F08                 jz      short loc_8F64
.text:0000000000008F0A                 mov     eax, [rbp+var_D0.st_uid]
.text:0000000000008F10                 cmp     [rbp+stat_buf.st_uid], eax
.text:0000000000008F16                 jnz     short loc_8F26
.text:0000000000008F18                 mov     eax, [rbp+var_D0.st_gid]
.text:0000000000008F1E                 cmp     [rbp+stat_buf.st_gid], eax
.text:0000000000008F24                 jz      short loc_8F64
.text:0000000000008F26
.text:0000000000008F26 loc_8F26:                               ; CODE XREF: copy_internal+35D6↑j
.text:0000000000008F26                 mov     r9, [rbp+s]
.text:0000000000008F2D                 mov     edx, [rbp+fd]
.text:0000000000008F33                 lea     rcx, [rbp+stat_buf]
.text:0000000000008F3A                 mov     rsi, [rbp+file]
.text:0000000000008F41                 movzx   r8d, r14b
.text:0000000000008F45                 mov     rdi, rbx
.text:0000000000008F48                 call    set_owner
.text:0000000000008F4D                 cmp     eax, 0FFFFFFFFh
.text:0000000000008F50                 jz      loc_8BD2
.text:0000000000008F56                 test    eax, eax
.text:0000000000008F58                 jnz     short loc_8F64
.text:0000000000008F5A                 and     dword ptr [rbp+var_340], 0FFFFF1FFh
.text:0000000000008F64
.text:0000000000008F64 loc_8F64:                               ; CODE XREF: copy_internal+35C8↑j
.text:0000000000008F64                                         ; copy_internal+35E4↑j ...
.text:0000000000008F64                 cmp     byte ptr [rbx+27h], 0
.text:0000000000008F68                 jz      short loc_8F77
.text:0000000000008F6A                 test    byte ptr [rbp+var_D0.st_mode], 80h
.text:0000000000008F71                 jz      loc_999E
.text:0000000000008F77
.text:0000000000008F77 loc_8F77:                               ; CODE XREF: copy_internal+3628↑j
.text:0000000000008F77                                         ; copy_internal+4065↓j ...
.text:0000000000008F77                 mov     rax, 0FF0000000000FFh
.text:0000000000008F81                 test    [rbx+18h], rax
.text:0000000000008F85                 jnz     loc_925D
.text:0000000000008F8B                 cmp     byte ptr [rbx+2Bh], 0
.text:0000000000008F8F                 jnz     loc_9A22
.text:0000000000008F95                 mov     r12d, r14d
.text:0000000000008F98                 and     r12b, [rbx+20h]
.text:0000000000008F9C                 jnz     loc_9897
.text:0000000000008FA2                 cmp     dword ptr [rbp+var_378], 0
.text:0000000000008FA9                 mov     r8d, 1
.text:0000000000008FAF                 jz      loc_8BD5
.text:0000000000008FB5                 mov     byte ptr [rbp+format], r8b
.text:0000000000008FBC                 call    cached_umask
.text:0000000000008FC1                 not     eax
.text:0000000000008FC3                 test    dword ptr [rbp+var_378], eax
.text:0000000000008FC9                 movzx   r8d, byte ptr [rbp+format]
.text:0000000000008FD1                 jz      loc_8BD5
.text:0000000000008FD7                 mov     edx, [rbp+var_3A4]
.text:0000000000008FDD                 mov     rsi, [rbp+file]
.text:0000000000008FE4                 mov     edi, [rbp+fd]
.text:0000000000008FEA                 call    fchmod_or_lchmod
.text:0000000000008FEF                 test    eax, eax
.text:0000000000008FF1                 movzx   r8d, byte ptr [rbp+format]
.text:0000000000008FF9                 jz      loc_8BD5
.text:0000000000008FFF                 mov     rsi, [rbp+file]
.text:0000000000009006                 mov     edi, 4
.text:000000000000900B                 call    quotearg_style
.text:0000000000009010                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:0000000000009017                 mov     edx, 5          ; category
.text:000000000000901C                 xor     edi, edi        ; domainname
.text:000000000000901E                 mov     r12, rax
.text:0000000000009021                 call    _dcgettext
.text:0000000000009026                 mov     [rbp+format], rax
.text:000000000000902D                 call    ___errno_location
.text:0000000000009032                 mov     rdx, [rbp+format] ; format
.text:0000000000009039                 mov     esi, [rax]      ; errnum
.text:000000000000903B                 mov     rcx, r12
.text:000000000000903E                 xor     edi, edi        ; status
.text:0000000000009040                 xor     eax, eax
.text:0000000000009042                 call    _error
.text:0000000000009047
.text:0000000000009047 loc_9047:                               ; CODE XREF: copy_internal+3951↓j
.text:0000000000009047                 movzx   r8d, byte ptr [rbx+24h]
.text:000000000000904C                 xor     r8d, 1
.text:0000000000009050                 jmp     loc_8BD5
.text:0000000000009055 ; ---------------------------------------------------------------------------
.text:0000000000009055
.text:0000000000009055 loc_9055:                               ; CODE XREF: copy_internal+2E89↑j
.text:0000000000009055                 cmp     [rbp+fd], 0
.text:000000000000905C                 jns     loc_92AE
.text:0000000000009062
.text:0000000000009062 loc_9062:                               ; CODE XREF: copy_internal+2E96↑j
.text:0000000000009062                 movzx   r9d, byte ptr [rbx+16h]
.text:0000000000009067                 test    r9b, r9b
.text:000000000000906A                 jnz     loc_8C80
.text:0000000000009070                 mov     r8d, [r12]
.text:0000000000009074                 cmp     r8d, 2
.text:0000000000009078                 jnz     loc_8D97
.text:000000000000907E                 cmp     byte ptr [rbx+18h], 0
.text:0000000000009082                 jnz     loc_8D97
.text:0000000000009088                 mov     dword ptr [rbp+var_378], 0
.text:0000000000009092                 jmp     loc_8D2C
.text:0000000000009097 ; ---------------------------------------------------------------------------
.text:0000000000009097
.text:0000000000009097 loc_9097:                               ; CODE XREF: copy_internal+2DE4↑j
.text:0000000000009097                 mov     rsi, [rbp+file] ; filename
.text:000000000000909E                 lea     rdx, [rbp+var_1F0] ; stat_buf
.text:00000000000090A5                 mov     edi, 1          ; ver
.text:00000000000090AA                 call    ___lxstat
.text:00000000000090AF                 test    eax, eax
.text:00000000000090B1                 jz      loc_872A
.text:00000000000090B7                 mov     rsi, [rbp+file]
.text:00000000000090BE                 jmp     loc_6225
.text:00000000000090C3 ; ---------------------------------------------------------------------------
.text:00000000000090C3
.text:00000000000090C3 loc_90C3:                               ; CODE XREF: copy_internal+350A↑j
.text:00000000000090C3                 mov     edx, [rbp+stat_buf.st_gid] ; group
.text:00000000000090C9                 mov     esi, [rbp+stat_buf.st_uid] ; owner
.text:00000000000090CF                 mov     rdi, [rbp+file] ; file
.text:00000000000090D6                 mov     byte ptr [rbp+fd], r8b
.text:00000000000090DD                 call    _lchown
.text:00000000000090E2                 test    eax, eax
.text:00000000000090E4                 movzx   r8d, byte ptr [rbp+fd]
.text:00000000000090EC                 jz      loc_5EBF
.text:00000000000090F2                 mov     rdi, rbx
.text:00000000000090F5                 call    chown_failure_ok
.text:00000000000090FA                 test    al, al
.text:00000000000090FC                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000009104                 jz      loc_9904
.text:000000000000910A                 mov     byte ptr [rbp+fildes], al
.text:0000000000009110                 jmp     loc_5EBF
.text:0000000000009115 ; ---------------------------------------------------------------------------
.text:0000000000009115
.text:0000000000009115 loc_9115:                               ; CODE XREF: copy_internal+344B↑j
.text:0000000000009115                 mov     rsi, [rbp+file] ; filename
.text:000000000000911C                 lea     rdx, [rbp+var_D0] ; stat_buf
.text:0000000000009123                 mov     edi, 1          ; ver
.text:0000000000009128                 mov     dword ptr [rbp+var_348], r8d
.text:000000000000912F                 call    ___lxstat
.text:0000000000009134                 test    eax, eax
.text:0000000000009136                 mov     r8d, dword ptr [rbp+var_348]
.text:000000000000913D                 jnz     short loc_9182
.text:000000000000913F                 mov     eax, [rbp+var_D0.st_mode]
.text:0000000000009145                 and     eax, 0F000h
.text:000000000000914A                 cmp     eax, 0A000h
.text:000000000000914F                 jnz     short loc_9182
.text:0000000000009151                 movzx   r8d, byte ptr [rbx+30h]
.text:0000000000009156                 test    r8b, r8b
.text:0000000000009159                 jz      loc_9947
.text:000000000000915F                 mov     edx, dword ptr [rbp+ptr]
.text:0000000000009165                 mov     rdi, [rbp+file]
.text:000000000000916C                 mov     esi, 41h ; 'A'
.text:0000000000009171                 xor     eax, eax
.text:0000000000009173                 call    open_safer
.text:0000000000009178                 mov     r8d, [r12]
.text:000000000000917C                 mov     [rbp+fd], eax
.text:0000000000009182
.text:0000000000009182 loc_9182:                               ; CODE XREF: copy_internal+343B↑j
.text:0000000000009182                                         ; copy_internal+37FD↑j ...
.text:0000000000009182                 mov     eax, [rbp+fd]
.text:0000000000009188                 shr     eax, 1Fh
.text:000000000000918B                 cmp     r8d, 15h
.text:000000000000918F                 setz    dl
.text:0000000000009192                 and     dl, al
.text:0000000000009194                 mov     r9d, edx
.text:0000000000009197                 jz      loc_9296
.text:000000000000919D                 mov     rsi, [rbp+file]
.text:00000000000091A4                 mov     r8d, 15h
.text:00000000000091AA                 cmp     byte ptr [rsi], 0
.text:00000000000091AD                 mov     rdi, rsi
.text:00000000000091B0                 jz      loc_8D97
.text:00000000000091B6                 xor     eax, eax
.text:00000000000091B8                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000091BC                 xor     r8d, r8d
.text:00000000000091BF                 repne scasb
.text:00000000000091C1                 mov     rax, rcx
.text:00000000000091C4                 not     rax
.text:00000000000091C7                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:00000000000091CC                 setnz   r8b
.text:00000000000091D0                 add     r8d, 14h
.text:00000000000091D4                 jmp     loc_8D97
.text:00000000000091D9 ; ---------------------------------------------------------------------------
.text:00000000000091D9
.text:00000000000091D9 loc_91D9:                               ; CODE XREF: copy_internal+2CB4↑j
.text:00000000000091D9                 mov     eax, [rbp+var_1F0.st_mode]
.text:00000000000091DF                 and     eax, 0F000h
.text:00000000000091E4                 cmp     eax, 0A000h
.text:00000000000091E9                 jnz     loc_85FA
.text:00000000000091EF                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000091F3                 mov     eax, r14d
.text:00000000000091F6                 mov     rdi, r12
.text:00000000000091F9                 repne scasb
.text:00000000000091FB                 mov     rsi, [rbp+var_1F0.st_size]
.text:0000000000009202                 not     rcx
.text:0000000000009205                 lea     rax, [rcx-1]
.text:0000000000009209                 cmp     rsi, rax
.text:000000000000920C                 jnz     loc_85FA
.text:0000000000009212                 mov     rdi, [rbp+file] ; path
.text:0000000000009219                 call    areadlink_with_size
.text:000000000000921E                 test    rax, rax
.text:0000000000009221                 jz      loc_85FA
.text:0000000000009227                 mov     rdi, rax        ; s1
.text:000000000000922A                 mov     rsi, r12        ; s2
.text:000000000000922D                 mov     qword ptr [rbp+fd], rax
.text:0000000000009234                 call    _strcmp
.text:0000000000009239                 mov     rdx, qword ptr [rbp+fd]
.text:0000000000009240                 test    eax, eax
.text:0000000000009242                 mov     rdi, rdx        ; ptr
.text:0000000000009245                 jnz     loc_9A42
.text:000000000000924B                 call    free
.text:0000000000009250                 mov     rdi, r12        ; ptr
.text:0000000000009253                 call    free
.text:0000000000009258                 jmp     loc_8E30
.text:000000000000925D ; ---------------------------------------------------------------------------
.text:000000000000925D
.text:000000000000925D loc_925D:                               ; CODE XREF: copy_internal+3645↑j
.text:000000000000925D                 mov     r8d, dword ptr [rbp+var_340]
.text:0000000000009264                 mov     ecx, [rbp+fd]
.text:000000000000926A                 mov     rdx, [rbp+file]
.text:0000000000009271                 mov     esi, [rbp+fildes]
.text:0000000000009277                 mov     rdi, [rbp+filename]
.text:000000000000927E                 call    copy_acl
.text:0000000000009283                 test    eax, eax
.text:0000000000009285                 mov     r8d, 1
.text:000000000000928B                 jz      loc_8BD5
.text:0000000000009291                 jmp     loc_9047
.text:0000000000009296 ; ---------------------------------------------------------------------------
.text:0000000000009296
.text:0000000000009296 loc_9296:                               ; CODE XREF: copy_internal+3857↑j
.text:0000000000009296                 cmp     [rbp+fd], 0
.text:000000000000929D                 mov     r14d, 1
.text:00000000000092A3                 jns     loc_87E6
.text:00000000000092A9                 jmp     loc_8D91
.text:00000000000092AE ; ---------------------------------------------------------------------------
.text:00000000000092AE
.text:00000000000092AE loc_92AE:                               ; CODE XREF: copy_internal+371C↑j
.text:00000000000092AE                 movzx   esi, byte ptr [rbx+25h]
.text:00000000000092B2                 mov     rdi, [rbp+file]
.text:00000000000092B9                 xor     edx, edx
.text:00000000000092BB                 mov     rcx, rbx
.text:00000000000092BE                 call    set_file_security_ctx
.text:00000000000092C3                 test    al, al
.text:00000000000092C5                 mov     r8d, eax
.text:00000000000092C8                 jnz     loc_87DC
.text:00000000000092CE                 cmp     byte ptr [rbx+26h], 0
.text:00000000000092D2                 mov     [rbp+ptr], 0
.text:00000000000092DD                 jnz     loc_8BD5
.text:00000000000092E3                 jmp     loc_87DC
.text:00000000000092E8 ; ---------------------------------------------------------------------------
.text:00000000000092E8
.text:00000000000092E8 loc_92E8:                               ; CODE XREF: copy_internal+324F↑j
.text:00000000000092E8                 mov     edi, [rbp+fd]   ; fd
.text:00000000000092EE                 mov     rsi, rcx
.text:00000000000092F1                 call    write_zeros
.text:00000000000092F6                 test    al, al
.text:00000000000092F8                 jz      loc_9813
.text:00000000000092FE                 xor     r8d, r8d
.text:0000000000009301                 jmp     loc_8A6D
.text:0000000000009306 ; ---------------------------------------------------------------------------
.text:0000000000009306
.text:0000000000009306 loc_9306:                               ; CODE XREF: copy_internal+35BE↑j
.text:0000000000009306                 mov     rax, [rbp+stat_buf.st_atim.tv_sec]
.text:000000000000930D                 mov     rsi, [rbp+file] ; path
.text:0000000000009314                 lea     rdx, [rbp+var_2A0]
.text:000000000000931B                 mov     edi, [rbp+fd]   ; fildes
.text:0000000000009321                 mov     [rbp+var_2A0], rax
.text:0000000000009328                 mov     rax, [rbp+stat_buf.st_atim.tv_nsec]
.text:000000000000932F                 mov     [rbp+var_298], rax
.text:0000000000009336                 mov     rax, [rbp+stat_buf.st_mtim.tv_sec]
.text:000000000000933D                 mov     [rbp+var_290], rax
.text:0000000000009344                 mov     rax, [rbp+stat_buf.st_mtim.tv_nsec]
.text:000000000000934B                 mov     [rbp+var_288], rax
.text:0000000000009352                 call    fdutimens
.text:0000000000009357                 test    eax, eax
.text:0000000000009359                 jz      loc_8F04
.text:000000000000935F                 mov     rsi, [rbp+file]
.text:0000000000009366                 mov     edi, 4
.text:000000000000936B                 call    quotearg_style
.text:0000000000009370                 lea     rsi, aPreservingTime ; "preserving times for %s"
.text:0000000000009377                 xor     edi, edi        ; domainname
.text:0000000000009379                 mov     edx, 5          ; category
.text:000000000000937E                 mov     r12, rax
.text:0000000000009381                 call    _dcgettext
.text:0000000000009386                 mov     [rbp+format], rax
.text:000000000000938D                 call    ___errno_location
.text:0000000000009392                 mov     rdx, [rbp+format] ; format
.text:0000000000009399                 mov     esi, [rax]      ; errnum
.text:000000000000939B                 xor     edi, edi        ; status
.text:000000000000939D                 xor     eax, eax
.text:000000000000939F                 mov     rcx, r12
.text:00000000000093A2                 call    _error
.text:00000000000093A7                 cmp     byte ptr [rbx+24h], 0
.text:00000000000093AB                 jz      loc_8F04
.text:00000000000093B1                 jmp     loc_8BD2
.text:00000000000093B6 ; ---------------------------------------------------------------------------
.text:00000000000093B6
.text:00000000000093B6 loc_93B6:                               ; CODE XREF: copy_internal+2ECF↑j
.text:00000000000093B6                 mov     rsi, [rbp+file]
.text:00000000000093BD                 mov     edi, 4
.text:00000000000093C2                 call    quotearg_style
.text:00000000000093C7                 lea     rsi, aCannotFstatS ; "cannot fstat %s"
.text:00000000000093CE                 mov     edx, 5          ; category
.text:00000000000093D3                 xor     edi, edi        ; domainname
.text:00000000000093D5                 mov     r12, rax
.text:00000000000093D8                 call    _dcgettext
.text:00000000000093DD                 mov     [rbp+ptr], rax
.text:00000000000093E4                 call    ___errno_location
.text:00000000000093E9                 mov     rdx, [rbp+ptr]  ; format
.text:00000000000093F0                 mov     esi, [rax]      ; errnum
.text:00000000000093F2                 mov     rcx, r12
.text:00000000000093F5                 xor     edi, edi        ; status
.text:00000000000093F7                 xor     eax, eax
.text:00000000000093F9                 call    _error
.text:00000000000093FE                 xor     r8d, r8d
.text:0000000000009401                 mov     [rbp+ptr], 0
.text:000000000000940C                 jmp     loc_8BD5
.text:0000000000009411 ; ---------------------------------------------------------------------------
.text:0000000000009411
.text:0000000000009411 loc_9411:                               ; CODE XREF: copy_internal+3021↑j
.text:0000000000009411                                         ; copy_internal+302A↑j
.text:0000000000009411                 mov     [rbp+var_370], rcx
.text:0000000000009418                 jmp     loc_8970
.text:000000000000941D ; ---------------------------------------------------------------------------
.text:000000000000941D
.text:000000000000941D loc_941D:                               ; CODE XREF: copy_internal+3065↑j
.text:000000000000941D                 xor     r9d, r9d
.text:0000000000009420                 cmp     dword ptr [rbx+0Ch], 3
.text:0000000000009424                 lea     rax, [rbp+dev]
.text:000000000000942B                 mov     [rbp+var_398], 0
.text:0000000000009436                 mov     [rbp+var_348], rax
.text:000000000000943D                 setz    r9b
.text:0000000000009441
.text:0000000000009441 loc_9441:                               ; CODE XREF: copy_internal+3D3F↓j
.text:0000000000009441                                         ; copy_internal+3ECE↓j
.text:0000000000009441                 lea     rax, [rbp+var_2F8]
.text:0000000000009448                 sub     rsp, 8
.text:000000000000944C                 mov     r8, [rbp+var_398]
.text:0000000000009453                 mov     rcx, [rbp+var_370]
.text:000000000000945A                 mov     rdx, [rbp+var_3B0]
.text:0000000000009461                 mov     esi, [rbp+fd]
.text:0000000000009467                 mov     edi, [rbp+fildes]
.text:000000000000946D                 push    rax
.text:000000000000946E                 push    [rbp+var_348]
.text:0000000000009474                 push    0FFFFFFFFFFFFFFFFh
.text:0000000000009476                 push    [rbp+file]
.text:000000000000947C                 push    [rbp+filename]
.text:0000000000009482                 call    sparse_copy
.text:0000000000009487                 add     rsp, 30h
.text:000000000000948B                 test    al, al
.text:000000000000948D                 jz      loc_8BD2
.text:0000000000009493                 cmp     byte ptr [rbp+var_2F8], 0
.text:000000000000949A                 jz      loc_8EFA
.text:00000000000094A0                 mov     rsi, [rbp+dev]  ; length
.text:00000000000094A7                 mov     edi, [rbp+fd]   ; fd
.text:00000000000094AD                 call    _ftruncate
.text:00000000000094B2                 test    eax, eax
.text:00000000000094B4                 jns     loc_8EFA
.text:00000000000094BA
.text:00000000000094BA loc_94BA:                               ; CODE XREF: copy_internal+3C49↓j
.text:00000000000094BA                                         ; copy_internal+3CC8↓j
.text:00000000000094BA                 mov     rsi, [rbp+file]
.text:00000000000094C1                 mov     edi, 4
.text:00000000000094C6                 call    quotearg_style
.text:00000000000094CB                 lea     rsi, aFailedToExtend ; "failed to extend %s"
.text:00000000000094D2                 mov     r12, rax
.text:00000000000094D5                 mov     edx, 5          ; category
.text:00000000000094DA
.text:00000000000094DA loc_94DA:                               ; CODE XREF: copy_internal+3CA9↓j
.text:00000000000094DA                                         ; copy_internal+3F52↓j
.text:00000000000094DA                 xor     edi, edi        ; domainname
.text:00000000000094DC                 call    _dcgettext
.text:00000000000094E1                 mov     [rbp+format], rax
.text:00000000000094E8                 call    ___errno_location
.text:00000000000094ED                 mov     rdx, [rbp+format] ; format
.text:00000000000094F4                 mov     esi, [rax]      ; errnum
.text:00000000000094F6                 mov     rcx, r12
.text:00000000000094F9                 xor     edi, edi        ; status
.text:00000000000094FB                 xor     eax, eax
.text:00000000000094FD                 call    _error
.text:0000000000009502                 jmp     loc_8BD2
.text:0000000000009507 ; ---------------------------------------------------------------------------
.text:0000000000009507
.text:0000000000009507 loc_9507:                               ; CODE XREF: copy_internal+31AD↑j
.text:0000000000009507                 mov     byte ptr [rbp+var_2D0+1], 1
.text:000000000000950E
.text:000000000000950E loc_950E:                               ; CODE XREF: copy_internal+30FF↑j
.text:000000000000950E                                         ; copy_internal+31C7↑j
.text:000000000000950E                 mov     rdi, [rbp+var_2D0+8] ; ptr
.text:0000000000009515                 call    free
.text:000000000000951A                 cmp     byte ptr [rbp+var_2D0+1], 0
.text:0000000000009521                 mov     [rbp+var_2D0+8], 0
.text:000000000000952C                 mov     qword ptr [rbp+var_2E0+8], 0
.text:0000000000009537                 jz      loc_8A23
.text:000000000000953D                 mov     rbx, [rbp+var_388]
.text:0000000000009544                 mov     r13d, [rbp+var_360]
.text:000000000000954B
.text:000000000000954B loc_954B:                               ; CODE XREF: copy_internal+3D06↓j
.text:000000000000954B                 mov     rcx, [rbp+var_3A0]
.text:0000000000009552                 cmp     [rbp+length], rcx
.text:0000000000009559                 setnle  r12b
.text:000000000000955D                 jg      short loc_956C
.text:000000000000955F                 cmp     byte ptr [rbp+format], 0
.text:0000000000009566                 jz      loc_8EFA
.text:000000000000956C
.text:000000000000956C loc_956C:                               ; CODE XREF: copy_internal+3C1D↑j
.text:000000000000956C                 cmp     [rbp+var_390], 1
.text:0000000000009573                 mov     rsi, [rbp+length] ; length
.text:000000000000957A                 jz      short loc_95EE
.text:000000000000957C                 mov     edi, [rbp+fd]   ; fd
.text:0000000000009582                 call    _ftruncate
.text:0000000000009587                 test    eax, eax
.text:0000000000009589                 jnz     loc_94BA
.text:000000000000958F                 cmp     [rbp+var_390], 3
.text:0000000000009596                 jnz     loc_8EFA
.text:000000000000959C                 test    r12b, r12b
.text:000000000000959F                 jz      loc_8EFA
.text:00000000000095A5                 mov     rdx, [rbp+length]
.text:00000000000095AC                 mov     rsi, [rbp+var_3A0]
.text:00000000000095B3                 mov     edi, [rbp+fd]
.text:00000000000095B9                 sub     rdx, rsi
.text:00000000000095BC                 call    punch_hole
.text:00000000000095C1                 test    eax, eax
.text:00000000000095C3                 jns     loc_8EFA
.text:00000000000095C9                 mov     rsi, [rbp+file]
.text:00000000000095D0                 mov     edi, 4
.text:00000000000095D5                 call    quotearg_style
.text:00000000000095DA                 mov     edx, 5
.text:00000000000095DF                 mov     r12, rax
.text:00000000000095E2                 lea     rsi, aErrorDeallocat ; "error deallocating %s"
.text:00000000000095E9                 jmp     loc_94DA
.text:00000000000095EE ; ---------------------------------------------------------------------------
.text:00000000000095EE
.text:00000000000095EE loc_95EE:                               ; CODE XREF: copy_internal+3C3A↑j
.text:00000000000095EE                 sub     rsi, [rbp+var_3A0]
.text:00000000000095F5                 mov     edi, [rbp+fd]   ; fd
.text:00000000000095FB                 call    write_zeros
.text:0000000000009600                 test    al, al
.text:0000000000009602                 jnz     loc_8EFA
.text:0000000000009608                 jmp     loc_94BA
.text:000000000000960D ; ---------------------------------------------------------------------------
.text:000000000000960D
.text:000000000000960D loc_960D:                               ; CODE XREF: copy_internal+2FFD↑j
.text:000000000000960D                 mov     rax, [rbp+var_160.st_size]
.text:0000000000009614                 cmp     [rbp+var_370], rax
.text:000000000000961B                 jbe     loc_8943
.text:0000000000009621                 add     rax, 1
.text:0000000000009625                 mov     [rbp+var_370], rax
.text:000000000000962C                 jmp     loc_8943
.text:0000000000009631 ; ---------------------------------------------------------------------------
.text:0000000000009631
.text:0000000000009631 loc_9631:                               ; CODE XREF: copy_internal+30F1↑j
.text:0000000000009631                 cmp     byte ptr [rbp+var_2D0+1], 0
.text:0000000000009638                 mov     rbx, [rbp+var_388]
.text:000000000000963F                 mov     r13d, [rbp+var_360]
.text:0000000000009646                 jnz     loc_954B
.text:000000000000964C                 cmp     byte ptr [rbp+var_2D0], 0
.text:0000000000009653                 jz      loc_9870
.text:0000000000009659                 xor     r9d, r9d
.text:000000000000965C                 cmp     dword ptr [rbx+0Ch], 3
.text:0000000000009660                 mov     eax, 0
.text:0000000000009665                 setz    r9b
.text:0000000000009669                 cmp     [rbp+var_3A5], 0
.text:0000000000009670                 cmovnz  rax, [rbp+var_398]
.text:0000000000009678                 mov     [rbp+var_398], rax
.text:000000000000967F                 jmp     loc_9441
.text:0000000000009684 ; ---------------------------------------------------------------------------
.text:0000000000009684
.text:0000000000009684 loc_9684:                               ; CODE XREF: copy_internal+2EE6↑j
.text:0000000000009684                 mov     edx, [rbp+fildes]
.text:000000000000968A                 mov     edi, [rbp+fd]   ; fd
.text:0000000000009690                 xor     eax, eax
.text:0000000000009692                 mov     esi, 40049409h  ; request
.text:0000000000009697                 call    _ioctl
.text:000000000000969C                 test    eax, eax
.text:000000000000969E                 jz      loc_8EEF
.text:00000000000096A4                 cmp     dword ptr [rbx+38h], 2
.text:00000000000096A8                 jnz     loc_882C
.text:00000000000096AE                 mov     rdx, [rbp+filename]
.text:00000000000096B5                 mov     esi, 4
.text:00000000000096BA                 mov     edi, 1
.text:00000000000096BF                 call    quotearg_n_style
.text:00000000000096C4                 mov     rdx, [rbp+file]
.text:00000000000096CB                 mov     esi, 4
.text:00000000000096D0                 xor     edi, edi
.text:00000000000096D2                 mov     r12, rax
.text:00000000000096D5                 call    quotearg_n_style
.text:00000000000096DA                 lea     rsi, aFailedToCloneS ; "failed to clone %s from %s"
.text:00000000000096E1                 mov     edx, 5          ; category
.text:00000000000096E6                 xor     edi, edi        ; domainname
.text:00000000000096E8                 mov     [rbp+format], rax
.text:00000000000096EF                 call    _dcgettext
.text:00000000000096F4                 mov     [rbp+ptr], rax
.text:00000000000096FB                 call    ___errno_location
.text:0000000000009700                 mov     rcx, [rbp+format]
.text:0000000000009707                 mov     esi, [rax]      ; errnum
.text:0000000000009709                 mov     r8, r12
.text:000000000000970C                 mov     rdx, [rbp+ptr]  ; format
.text:0000000000009713                 xor     edi, edi        ; status
.text:0000000000009715                 xor     eax, eax
.text:0000000000009717                 call    _error
.text:000000000000971C                 xor     r8d, r8d
.text:000000000000971F                 mov     [rbp+ptr], 0
.text:000000000000972A                 jmp     loc_8BD5
.text:000000000000972F ; ---------------------------------------------------------------------------
.text:000000000000972F
.text:000000000000972F loc_972F:                               ; CODE XREF: copy_internal+2F8E↑j
.text:000000000000972F                 mov     eax, [rbx+0Ch]
.text:0000000000009732                 cmp     eax, 3
.text:0000000000009735                 jz      loc_97BE
.text:000000000000973B                 cmp     eax, 2
.text:000000000000973E                 jnz     loc_88D4
.text:0000000000009744                 test    byte ptr [rbp+var_348], 1
.text:000000000000974B                 jz      loc_88D4
.text:0000000000009751                 mov     rax, [rbp+var_370]
.text:0000000000009758                 lea     rdi, [r12+rax]
.text:000000000000975C                 call    xmalloc
.text:0000000000009761                 lea     rcx, [rax+r12-1]
.text:0000000000009766                 mov     [rbp+ptr], rax
.text:000000000000976D                 xor     edx, edx
.text:000000000000976F                 mov     rax, rcx
.text:0000000000009772                 div     r12
.text:0000000000009775                 sub     rcx, rdx
.text:0000000000009778                 mov     [rbp+var_3B0], rcx
.text:000000000000977F
.text:000000000000977F loc_977F:                               ; CODE XREF: copy_internal+3EB3↓j
.text:000000000000977F                 mov     eax, [rbx+0Ch]
.text:0000000000009782                 mov     [rbp+var_390], eax
.text:0000000000009788                 movzx   eax, byte ptr [rbp+format]
.text:000000000000978F                 mov     [rbp+var_3A5], al
.text:0000000000009795                 jmp     loc_89BC
.text:000000000000979A ; ---------------------------------------------------------------------------
.text:000000000000979A
.text:000000000000979A loc_979A:                               ; CODE XREF: copy_internal+2F78↑j
.text:000000000000979A                 mov     rax, [rbp+var_160.st_size]
.text:00000000000097A1                 cqo
.text:00000000000097A3                 idiv    r8
.text:00000000000097A6                 cmp     [rbp+var_160.st_blocks], rax
.text:00000000000097AD                 setl    al
.text:00000000000097B0                 movzx   eax, al
.text:00000000000097B3                 mov     dword ptr [rbp+var_348], eax
.text:00000000000097B9                 jmp     loc_88BE
.text:00000000000097BE ; ---------------------------------------------------------------------------
.text:00000000000097BE
.text:00000000000097BE loc_97BE:                               ; CODE XREF: copy_internal+3DF5↑j
.text:00000000000097BE                 mov     rax, [rbp+var_370]
.text:00000000000097C5                 lea     rdi, [r12+rax]
.text:00000000000097C9                 call    xmalloc
.text:00000000000097CE                 lea     rcx, [rax+r12-1]
.text:00000000000097D3                 xor     edx, edx
.text:00000000000097D5                 mov     [rbp+ptr], rax
.text:00000000000097DC                 mov     rax, rcx
.text:00000000000097DF                 div     r12
.text:00000000000097E2                 sub     rcx, rdx
.text:00000000000097E5                 cmp     dword ptr [rbp+var_348], 0
.text:00000000000097EC                 mov     [rbp+var_3B0], rcx
.text:00000000000097F3                 jnz     short loc_977F
.text:00000000000097F5                 xor     r9d, r9d
.text:00000000000097F8                 cmp     dword ptr [rbx+0Ch], 3
.text:00000000000097FC                 lea     rax, [rbp+dev]
.text:0000000000009803                 mov     [rbp+var_348], rax
.text:000000000000980A                 setz    r9b
.text:000000000000980E                 jmp     loc_9441
.text:0000000000009813 ; ---------------------------------------------------------------------------
.text:0000000000009813
.text:0000000000009813 loc_9813:                               ; CODE XREF: copy_internal+39B8↑j
.text:0000000000009813                 mov     rdx, [rbp+file]
.text:000000000000981A                 mov     esi, 3
.text:000000000000981F                 xor     edi, edi
.text:0000000000009821                 mov     rbx, [rbp+var_388]
.text:0000000000009828                 mov     r13d, [rbp+var_360]
.text:000000000000982F                 call    quotearg_n_style_colon
.text:0000000000009834                 lea     rsi, aSWriteFailed ; "%s: write failed"
.text:000000000000983B                 mov     r12, rax
.text:000000000000983E                 mov     edx, 5          ; category
.text:0000000000009843
.text:0000000000009843 loc_9843:                               ; CODE XREF: copy_internal+40DD↓j
.text:0000000000009843                 xor     edi, edi        ; domainname
.text:0000000000009845                 call    _dcgettext
.text:000000000000984A                 mov     [rbp+format], rax
.text:0000000000009851                 call    ___errno_location
.text:0000000000009856                 mov     rdx, [rbp+format] ; format
.text:000000000000985D                 mov     esi, [rax]      ; errnum
.text:000000000000985F                 mov     rcx, r12
.text:0000000000009862                 xor     edi, edi        ; status
.text:0000000000009864                 xor     eax, eax
.text:0000000000009866                 call    _error
.text:000000000000986B                 jmp     loc_8BC6
.text:0000000000009870 ; ---------------------------------------------------------------------------
.text:0000000000009870
.text:0000000000009870 loc_9870:                               ; CODE XREF: copy_internal+3D13↑j
.text:0000000000009870                 mov     rdx, [rbp+filename]
.text:0000000000009877                 mov     esi, 3
.text:000000000000987C                 xor     edi, edi
.text:000000000000987E                 call    quotearg_n_style_colon
.text:0000000000009883                 mov     edx, 5
.text:0000000000009888                 mov     r12, rax
.text:000000000000988B                 lea     rsi, aSFailedToGetEx ; "%s: failed to get extents info"
.text:0000000000009892                 jmp     loc_94DA
.text:0000000000009897 ; ---------------------------------------------------------------------------
.text:0000000000009897
.text:0000000000009897 loc_9897:                               ; CODE XREF: copy_internal+365C↑j
.text:0000000000009897                 call    cached_umask
.text:000000000000989C                 mov     esi, [rbp+fd]
.text:00000000000098A2                 not     eax
.text:00000000000098A4                 mov     rdi, [rbp+file]
.text:00000000000098AB                 mov     edx, eax
.text:00000000000098AD                 mov     r14d, r12d
.text:00000000000098B0                 and     edx, 1B6h
.text:00000000000098B6                 call    set_acl
.text:00000000000098BB                 test    eax, eax
.text:00000000000098BD                 setz    r8b
.text:00000000000098C1                 jmp     loc_8BD5
.text:00000000000098C6 ; ---------------------------------------------------------------------------
.text:00000000000098C6
.text:00000000000098C6 loc_98C6:                               ; CODE XREF: copy_internal+334E↑j
.text:00000000000098C6                 mov     rsi, [rbp+file]
.text:00000000000098CD                 mov     edi, 4
.text:00000000000098D2                 call    quotearg_style
.text:00000000000098D7                 lea     rsi, aCannotRemoveS ; "cannot remove %s"
.text:00000000000098DE                 mov     edx, 5          ; category
.text:00000000000098E3                 xor     edi, edi        ; domainname
.text:00000000000098E5                 mov     qword ptr [rbp+fd], rax
.text:00000000000098EC                 call    _dcgettext
.text:00000000000098F1                 mov     rcx, qword ptr [rbp+fd]
.text:00000000000098F8                 mov     rdx, rax
.text:00000000000098FB                 mov     esi, [r12]
.text:00000000000098FF                 jmp     loc_7A81
.text:0000000000009904 ; ---------------------------------------------------------------------------
.text:0000000000009904
.text:0000000000009904 loc_9904:                               ; CODE XREF: copy_internal+37C4↑j
.text:0000000000009904                 lea     rsi, aFailedToPreser ; "failed to preserve ownership for %s"
.text:000000000000990B                 xor     edi, edi        ; domainname
.text:000000000000990D                 mov     edx, 5          ; category
.text:0000000000009912                 call    _dcgettext
.text:0000000000009917                 mov     r12, rax
.text:000000000000991A                 call    ___errno_location
.text:000000000000991F                 mov     rcx, [rbp+file]
.text:0000000000009926                 mov     esi, [rax]      ; errnum
.text:0000000000009928                 xor     edi, edi        ; status
.text:000000000000992A                 xor     eax, eax
.text:000000000000992C                 mov     rdx, r12        ; format
.text:000000000000992F                 call    _error
.text:0000000000009934                 movzx   r8d, byte ptr [rbx+24h]
.text:0000000000009939                 test    r8b, r8b
.text:000000000000993C                 jnz     loc_68D0
.text:0000000000009942                 jmp     loc_5EBF
.text:0000000000009947 ; ---------------------------------------------------------------------------
.text:0000000000009947
.text:0000000000009947 loc_9947:                               ; CODE XREF: copy_internal+3819↑j
.text:0000000000009947                 mov     rsi, [rbp+file]
.text:000000000000994E                 mov     edi, 4
.text:0000000000009953                 mov     byte ptr [rbp+fd], r8b
.text:000000000000995A                 call    quotearg_style
.text:000000000000995F                 lea     rsi, aNotWritingThro ; "not writing through dangling symlink %s"
.text:0000000000009966                 mov     r12, rax
.text:0000000000009969                 mov     edx, 5          ; category
.text:000000000000996E                 xor     edi, edi        ; domainname
.text:0000000000009970                 call    _dcgettext
.text:0000000000009975                 mov     rcx, r12
.text:0000000000009978                 mov     rdx, rax        ; format
.text:000000000000997B                 xor     esi, esi        ; errnum
.text:000000000000997D                 xor     edi, edi        ; status
.text:000000000000997F                 xor     eax, eax
.text:0000000000009981                 call    _error
.text:0000000000009986                 mov     [rbp+ptr], 0
.text:0000000000009991                 movzx   r8d, byte ptr [rbp+fd]
.text:0000000000009999                 jmp     loc_7A98
.text:000000000000999E ; ---------------------------------------------------------------------------
.text:000000000000999E
.text:000000000000999E loc_999E:                               ; CODE XREF: copy_internal+3631↑j
.text:000000000000999E                 call    _geteuid
.text:00000000000099A3                 test    eax, eax
.text:00000000000099A5                 jz      loc_8F77
.text:00000000000099AB                 mov     rsi, [rbp+file]
.text:00000000000099B2                 mov     edi, [rbp+fd]
.text:00000000000099B8                 mov     edx, 180h
.text:00000000000099BD                 call    fchmod_or_lchmod
.text:00000000000099C2                 test    eax, eax
.text:00000000000099C4                 jnz     loc_8F77
.text:00000000000099CA                 mov     edx, dword ptr [rbp+var_378]
.text:00000000000099D0                 mov     rsi, [rbp+file]
.text:00000000000099D7                 mov     edi, [rbp+fd]
.text:00000000000099DD                 not     edx
.text:00000000000099DF                 and     edx, [rbp+var_3A4]
.text:00000000000099E5                 call    fchmod_or_lchmod
.text:00000000000099EA                 jmp     loc_8F77
.text:00000000000099EF ; ---------------------------------------------------------------------------
.text:00000000000099EF
.text:00000000000099EF loc_99EF:                               ; CODE XREF: copy_internal+323A↑j
.text:00000000000099EF                 mov     rsi, [rbp+filename]
.text:00000000000099F6                 mov     edi, 4
.text:00000000000099FB                 mov     rbx, [rbp+var_388]
.text:0000000000009A02                 mov     r13d, [rbp+var_360]
.text:0000000000009A09                 call    quotearg_style
.text:0000000000009A0E                 mov     edx, 5
.text:0000000000009A13                 mov     r12, rax
.text:0000000000009A16                 lea     rsi, aCannotLseekS ; "cannot lseek %s"
.text:0000000000009A1D                 jmp     loc_9843
.text:0000000000009A22 ; ---------------------------------------------------------------------------
.text:0000000000009A22
.text:0000000000009A22 loc_9A22:                               ; CODE XREF: copy_internal+364F↑j
.text:0000000000009A22                 mov     edx, [rbx+10h]
.text:0000000000009A25                 mov     esi, [rbp+fd]
.text:0000000000009A2B                 mov     rdi, [rbp+file]
.text:0000000000009A32                 call    set_acl
.text:0000000000009A37                 test    eax, eax
.text:0000000000009A39                 setz    r8b
.text:0000000000009A3D                 jmp     loc_8BD5
.text:0000000000009A42 ; ---------------------------------------------------------------------------
.text:0000000000009A42
.text:0000000000009A42 loc_9A42:                               ; CODE XREF: copy_internal+3905↑j
.text:0000000000009A42                 call    free
.text:0000000000009A47                 jmp     loc_85FA
.text:0000000000009A47 ; } // starts at 5940
.text:0000000000009A47 copy_internal   endp ; sp-analysis failed
.text:0000000000009A47
.text:0000000000009A47 ; ---------------------------------------------------------------------------
.text:0000000000009A4C                 align 10h
.text:0000000000009A50
.text:0000000000009A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A50
.text:0000000000009A50
.text:0000000000009A50                 public copy
.text:0000000000009A50 copy            proc near               ; CODE XREF: do_move+2B↑p
.text:0000000000009A50
.text:0000000000009A50 var_11          = byte ptr -11h
.text:0000000000009A50 var_10          = qword ptr -10h
.text:0000000000009A50
.text:0000000000009A50 ; __unwind {
.text:0000000000009A50                 sub     rsp, 18h
.text:0000000000009A54                 mov     rax, fs:28h
.text:0000000000009A5D                 mov     [rsp+18h+var_10], rax
.text:0000000000009A62                 xor     eax, eax
.text:0000000000009A64                 test    rcx, rcx
.text:0000000000009A67                 jz      loc_9B96
.text:0000000000009A6D                 cmp     dword ptr [rcx], 3
.text:0000000000009A70                 ja      loc_9B77
.text:0000000000009A76                 mov     eax, [rcx+0Ch]
.text:0000000000009A79                 lea     r10d, [rax-1]
.text:0000000000009A7D                 cmp     r10d, 2
.text:0000000000009A81                 ja      loc_9B58
.text:0000000000009A87                 mov     r10d, [rcx+38h]
.text:0000000000009A8B                 cmp     r10d, 2
.text:0000000000009A8F                 ja      loc_9B39
.text:0000000000009A95                 cmp     byte ptr [rcx+17h], 0
.text:0000000000009A99                 jnz     short loc_9AF0
.text:0000000000009A9B
.text:0000000000009A9B loc_9A9B:                               ; CODE XREF: copy+A4↓j
.text:0000000000009A9B                 cmp     eax, 2
.text:0000000000009A9E                 jz      short loc_9AA6
.text:0000000000009AA0                 cmp     r10d, 2
.text:0000000000009AA4                 jz      short loc_9B15
.text:0000000000009AA6
.text:0000000000009AA6 loc_9AA6:                               ; CODE XREF: copy+4E↑j
.text:0000000000009AA6                 mov     [rsp+18h+var_11], 0
.text:0000000000009AAB                 push    r9
.text:0000000000009AAD                 movzx   edx, dl
.text:0000000000009AB0                 push    r8
.text:0000000000009AB2                 mov     r9, rcx
.text:0000000000009AB5                 xor     r8d, r8d
.text:0000000000009AB8                 xor     ecx, ecx
.text:0000000000009ABA                 mov     cs:top_level_dst_name, rsi
.text:0000000000009AC1                 mov     cs:top_level_src_name, rdi
.text:0000000000009AC8                 lea     rax, [rsp+28h+var_11]
.text:0000000000009ACD                 push    rax
.text:0000000000009ACE                 push    1
.text:0000000000009AD0                 call    copy_internal
.text:0000000000009AD5                 add     rsp, 20h
.text:0000000000009AD9                 mov     rsi, [rsp+18h+var_10]
.text:0000000000009ADE                 xor     rsi, fs:28h
.text:0000000000009AE7                 jnz     short loc_9B34
.text:0000000000009AE9                 add     rsp, 18h
.text:0000000000009AED                 retn
.text:0000000000009AED ; ---------------------------------------------------------------------------
.text:0000000000009AEE                 align 10h
.text:0000000000009AF0
.text:0000000000009AF0 loc_9AF0:                               ; CODE XREF: copy+49↑j
.text:0000000000009AF0                 cmp     byte ptr [rcx+2Ch], 0
.text:0000000000009AF4                 jz      short loc_9A9B
.text:0000000000009AF6                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009AFD                 lea     rsi, aCoreutils831Sr_1 ; "../coreutils-8.31/src/copy.c"
.text:0000000000009B04                 lea     rdi, aCoHardLinkCoSy ; "!(co->hard_link && co->symbolic_link)"
.text:0000000000009B0B                 mov     edx, 0B8Ah      ; line
.text:0000000000009B10                 call    ___assert_fail
.text:0000000000009B15 ; ---------------------------------------------------------------------------
.text:0000000000009B15
.text:0000000000009B15 loc_9B15:                               ; CODE XREF: copy+54↑j
.text:0000000000009B15                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009B1C                 lea     rsi, aCoreutils831Sr_1 ; "../coreutils-8.31/src/copy.c"
.text:0000000000009B23                 lea     rdi, aCoReflinkModeR ; "! (co->reflink_mode == REFLINK_ALWAYS &"...
.text:0000000000009B2A                 mov     edx, 0B8Dh      ; line
.text:0000000000009B2F                 call    ___assert_fail
.text:0000000000009B34 ; ---------------------------------------------------------------------------
.text:0000000000009B34
.text:0000000000009B34 loc_9B34:                               ; CODE XREF: copy+97↑j
.text:0000000000009B34                 call    ___stack_chk_fail
.text:0000000000009B39 ; ---------------------------------------------------------------------------
.text:0000000000009B39
.text:0000000000009B39 loc_9B39:                               ; CODE XREF: copy+3F↑j
.text:0000000000009B39                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009B40                 lea     rsi, aCoreutils831Sr_1 ; "../coreutils-8.31/src/copy.c"
.text:0000000000009B47                 lea     rdi, aValidReflinkMo ; "VALID_REFLINK_MODE (co->reflink_mode)"
.text:0000000000009B4E                 mov     edx, 0B89h      ; line
.text:0000000000009B53                 call    ___assert_fail
.text:0000000000009B58 ; ---------------------------------------------------------------------------
.text:0000000000009B58
.text:0000000000009B58 loc_9B58:                               ; CODE XREF: copy+31↑j
.text:0000000000009B58                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009B5F                 lea     rsi, aCoreutils831Sr_1 ; "../coreutils-8.31/src/copy.c"
.text:0000000000009B66                 lea     rdi, aValidSparseMod ; "VALID_SPARSE_MODE (co->sparse_mode)"
.text:0000000000009B6D                 mov     edx, 0B88h      ; line
.text:0000000000009B72                 call    ___assert_fail
.text:0000000000009B77 ; ---------------------------------------------------------------------------
.text:0000000000009B77
.text:0000000000009B77 loc_9B77:                               ; CODE XREF: copy+20↑j
.text:0000000000009B77                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009B7E                 lea     rsi, aCoreutils831Sr_1 ; "../coreutils-8.31/src/copy.c"
.text:0000000000009B85                 lea     rdi, aValidBackupTyp ; "VALID_BACKUP_TYPE (co->backup_type)"
.text:0000000000009B8C                 mov     edx, 0B87h      ; line
.text:0000000000009B91                 call    ___assert_fail
.text:0000000000009B96 ; ---------------------------------------------------------------------------
.text:0000000000009B96
.text:0000000000009B96 loc_9B96:                               ; CODE XREF: copy+17↑j
.text:0000000000009B96                 lea     rcx, __PRETTY_FUNCTION___7875 ; "valid_options"
.text:0000000000009B9D                 lea     rsi, aCoreutils831Sr_1 ; "../coreutils-8.31/src/copy.c"
.text:0000000000009BA4                 lea     rdi, aCoNull    ; "co != NULL"
.text:0000000000009BAB                 mov     edx, 0B86h      ; line
.text:0000000000009BB0                 call    ___assert_fail
.text:0000000000009BB0 ; } // starts at 9A50
.text:0000000000009BB0 copy            endp
.text:0000000000009BB0
.text:0000000000009BB0 ; ---------------------------------------------------------------------------
.text:0000000000009BB5                 align 20h
.text:0000000000009BC0
.text:0000000000009BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BC0
.text:0000000000009BC0
.text:0000000000009BC0 src_to_dest_hash proc near              ; DATA XREF: hash_init+E↓o
.text:0000000000009BC0 ; __unwind {
.text:0000000000009BC0                 mov     rax, [rdi]
.text:0000000000009BC3                 xor     edx, edx
.text:0000000000009BC5                 div     rsi
.text:0000000000009BC8                 mov     rax, rdx
.text:0000000000009BCB                 retn
.text:0000000000009BCB ; } // starts at 9BC0
.text:0000000000009BCB src_to_dest_hash endp
.text:0000000000009BCB
.text:0000000000009BCB ; ---------------------------------------------------------------------------
.text:0000000000009BCC                 align 10h
.text:0000000000009BD0
.text:0000000000009BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BD0
.text:0000000000009BD0
.text:0000000000009BD0 src_to_dest_compare proc near           ; DATA XREF: hash_init+7↓o
.text:0000000000009BD0 ; __unwind {
.text:0000000000009BD0                 xor     eax, eax
.text:0000000000009BD2                 mov     rdx, [rsi]
.text:0000000000009BD5                 cmp     [rdi], rdx
.text:0000000000009BD8                 jz      short loc_9BE0
.text:0000000000009BDA                 rep retn
.text:0000000000009BDA ; ---------------------------------------------------------------------------
.text:0000000000009BDC                 align 20h
.text:0000000000009BE0
.text:0000000000009BE0 loc_9BE0:                               ; CODE XREF: src_to_dest_compare+8↑j
.text:0000000000009BE0                 mov     rax, [rsi+8]
.text:0000000000009BE4                 cmp     [rdi+8], rax
.text:0000000000009BE8                 setz    al
.text:0000000000009BEB                 retn
.text:0000000000009BEB ; } // starts at 9BD0
.text:0000000000009BEB src_to_dest_compare endp
.text:0000000000009BEB
.text:0000000000009BEB ; ---------------------------------------------------------------------------
.text:0000000000009BEC                 align 10h
.text:0000000000009BF0
.text:0000000000009BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BF0
.text:0000000000009BF0
.text:0000000000009BF0 ; __int64 __fastcall src_to_dest_free(void *ptr)
.text:0000000000009BF0 src_to_dest_free proc near              ; DATA XREF: hash_init↓o
.text:0000000000009BF0 ; __unwind {
.text:0000000000009BF0                 push    rbx
.text:0000000000009BF1                 mov     rbx, rdi
.text:0000000000009BF4                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000009BF8                 call    free
.text:0000000000009BFD                 mov     rdi, rbx        ; ptr
.text:0000000000009C00                 pop     rbx
.text:0000000000009C01                 jmp     free
.text:0000000000009C01 ; } // starts at 9BF0
.text:0000000000009C01 src_to_dest_free endp
.text:0000000000009C01
.text:0000000000009C01 ; ---------------------------------------------------------------------------
.text:0000000000009C06                 align 10h
.text:0000000000009C10
.text:0000000000009C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C10
.text:0000000000009C10
.text:0000000000009C10                 public forget_created
.text:0000000000009C10 forget_created  proc near               ; CODE XREF: copy_internal+11CD↑p
.text:0000000000009C10                                         ; copy_internal+184E↑p
.text:0000000000009C10
.text:0000000000009C10 var_28          = qword ptr -28h
.text:0000000000009C10 var_20          = qword ptr -20h
.text:0000000000009C10 var_18          = qword ptr -18h
.text:0000000000009C10 var_10          = qword ptr -10h
.text:0000000000009C10
.text:0000000000009C10 ; __unwind {
.text:0000000000009C10                 push    rbx
.text:0000000000009C11                 sub     rsp, 20h
.text:0000000000009C15                 mov     [rsp+28h+var_28], rdi
.text:0000000000009C19                 mov     rdi, cs:src_to_dest
.text:0000000000009C20                 mov     [rsp+28h+var_20], rsi
.text:0000000000009C25                 mov     rsi, rsp
.text:0000000000009C28                 mov     [rsp+28h+var_18], 0
.text:0000000000009C31                 mov     rax, fs:28h
.text:0000000000009C3A                 mov     [rsp+28h+var_10], rax
.text:0000000000009C3F                 xor     eax, eax
.text:0000000000009C41                 call    hash_delete
.text:0000000000009C46                 test    rax, rax
.text:0000000000009C49                 jz      short loc_9C5F
.text:0000000000009C4B                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000009C4F                 mov     rbx, rax
.text:0000000000009C52                 call    free
.text:0000000000009C57                 mov     rdi, rbx        ; ptr
.text:0000000000009C5A                 call    free
.text:0000000000009C5F
.text:0000000000009C5F loc_9C5F:                               ; CODE XREF: forget_created+39↑j
.text:0000000000009C5F                 mov     rax, [rsp+28h+var_10]
.text:0000000000009C64                 xor     rax, fs:28h
.text:0000000000009C6D                 jnz     short loc_9C75
.text:0000000000009C6F                 add     rsp, 20h
.text:0000000000009C73                 pop     rbx
.text:0000000000009C74                 retn
.text:0000000000009C75 ; ---------------------------------------------------------------------------
.text:0000000000009C75
.text:0000000000009C75 loc_9C75:                               ; CODE XREF: forget_created+5D↑j
.text:0000000000009C75                 call    ___stack_chk_fail
.text:0000000000009C75 ; } // starts at 9C10
.text:0000000000009C75 forget_created  endp
.text:0000000000009C75
.text:0000000000009C75 ; ---------------------------------------------------------------------------
.text:0000000000009C7A                 align 20h
.text:0000000000009C80
.text:0000000000009C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C80
.text:0000000000009C80
.text:0000000000009C80                 public src_to_dest_lookup
.text:0000000000009C80 src_to_dest_lookup proc near            ; CODE XREF: copy_internal+1913↑p
.text:0000000000009C80                                         ; copy_internal+1976↑p
.text:0000000000009C80
.text:0000000000009C80 var_28          = qword ptr -28h
.text:0000000000009C80 var_20          = qword ptr -20h
.text:0000000000009C80 var_10          = qword ptr -10h
.text:0000000000009C80
.text:0000000000009C80 ; __unwind {
.text:0000000000009C80                 sub     rsp, 28h
.text:0000000000009C84                 mov     [rsp+28h+var_28], rdi
.text:0000000000009C88                 mov     rdi, cs:src_to_dest
.text:0000000000009C8F                 mov     [rsp+28h+var_20], rsi
.text:0000000000009C94                 mov     rsi, rsp
.text:0000000000009C97                 mov     rax, fs:28h
.text:0000000000009CA0                 mov     [rsp+28h+var_10], rax
.text:0000000000009CA5                 xor     eax, eax
.text:0000000000009CA7                 call    hash_lookup
.text:0000000000009CAC                 test    rax, rax
.text:0000000000009CAF                 jz      short loc_9CD0
.text:0000000000009CB1                 mov     rax, [rax+10h]
.text:0000000000009CB5
.text:0000000000009CB5 loc_9CB5:                               ; CODE XREF: src_to_dest_lookup+52↓j
.text:0000000000009CB5                 mov     rdx, [rsp+28h+var_10]
.text:0000000000009CBA                 xor     rdx, fs:28h
.text:0000000000009CC3                 jnz     short loc_9CD4
.text:0000000000009CC5                 add     rsp, 28h
.text:0000000000009CC9                 retn
.text:0000000000009CC9 ; ---------------------------------------------------------------------------
.text:0000000000009CCA                 align 10h
.text:0000000000009CD0
.text:0000000000009CD0 loc_9CD0:                               ; CODE XREF: src_to_dest_lookup+2F↑j
.text:0000000000009CD0                 xor     eax, eax
.text:0000000000009CD2                 jmp     short loc_9CB5
.text:0000000000009CD4 ; ---------------------------------------------------------------------------
.text:0000000000009CD4
.text:0000000000009CD4 loc_9CD4:                               ; CODE XREF: src_to_dest_lookup+43↑j
.text:0000000000009CD4                 call    ___stack_chk_fail
.text:0000000000009CD4 ; } // starts at 9C80
.text:0000000000009CD4 src_to_dest_lookup endp
.text:0000000000009CD4
.text:0000000000009CD4 ; ---------------------------------------------------------------------------
.text:0000000000009CD9                 align 20h
.text:0000000000009CE0
.text:0000000000009CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CE0
.text:0000000000009CE0
.text:0000000000009CE0 ; __int64 __fastcall remember_copied(void *src)
.text:0000000000009CE0                 public remember_copied
.text:0000000000009CE0 remember_copied proc near               ; CODE XREF: copy_internal+2CC↑p
.text:0000000000009CE0                                         ; copy_internal+1071↑p ...
.text:0000000000009CE0 ; __unwind {
.text:0000000000009CE0                 push    r13
.text:0000000000009CE2                 push    r12
.text:0000000000009CE4                 mov     r13, rdi
.text:0000000000009CE7                 push    rbp
.text:0000000000009CE8                 push    rbx
.text:0000000000009CE9                 mov     edi, 18h
.text:0000000000009CEE                 mov     r12, rsi
.text:0000000000009CF1                 mov     rbp, rdx
.text:0000000000009CF4                 sub     rsp, 8
.text:0000000000009CF8                 call    xmalloc
.text:0000000000009CFD                 mov     rdi, r13        ; src
.text:0000000000009D00                 mov     rbx, rax
.text:0000000000009D03                 call    xstrdup
.text:0000000000009D08                 mov     rdi, cs:src_to_dest
.text:0000000000009D0F                 mov     rsi, rbx
.text:0000000000009D12                 mov     [rbx+10h], rax
.text:0000000000009D16                 mov     [rbx], r12
.text:0000000000009D19                 mov     [rbx+8], rbp
.text:0000000000009D1D                 call    hash_insert
.text:0000000000009D22                 test    rax, rax
.text:0000000000009D25                 jz      short loc_9D54
.text:0000000000009D27                 cmp     rbx, rax
.text:0000000000009D2A                 mov     rbp, rax
.text:0000000000009D2D                 jz      short loc_9D50
.text:0000000000009D2F                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000009D33                 call    free
.text:0000000000009D38                 mov     rdi, rbx        ; ptr
.text:0000000000009D3B                 call    free
.text:0000000000009D40                 mov     rax, [rbp+10h]
.text:0000000000009D44
.text:0000000000009D44 loc_9D44:                               ; CODE XREF: remember_copied+72↓j
.text:0000000000009D44                 add     rsp, 8
.text:0000000000009D48                 pop     rbx
.text:0000000000009D49                 pop     rbp
.text:0000000000009D4A                 pop     r12
.text:0000000000009D4C                 pop     r13
.text:0000000000009D4E                 retn
.text:0000000000009D4E ; ---------------------------------------------------------------------------
.text:0000000000009D4F                 align 10h
.text:0000000000009D50
.text:0000000000009D50 loc_9D50:                               ; CODE XREF: remember_copied+4D↑j
.text:0000000000009D50                 xor     eax, eax
.text:0000000000009D52                 jmp     short loc_9D44
.text:0000000000009D54 ; ---------------------------------------------------------------------------
.text:0000000000009D54
.text:0000000000009D54 loc_9D54:                               ; CODE XREF: remember_copied+45↑j
.text:0000000000009D54                 call    xalloc_die
.text:0000000000009D54 ; } // starts at 9CE0
.text:0000000000009D54 remember_copied endp
.text:0000000000009D54
.text:0000000000009D54 ; ---------------------------------------------------------------------------
.text:0000000000009D59                 align 20h
.text:0000000000009D60
.text:0000000000009D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D60
.text:0000000000009D60
.text:0000000000009D60                 public hash_init
.text:0000000000009D60 hash_init       proc near               ; CODE XREF: main+3DE↑p
.text:0000000000009D60 ; __unwind {
.text:0000000000009D60                 lea     r8, src_to_dest_free
.text:0000000000009D67                 lea     rcx, src_to_dest_compare
.text:0000000000009D6E                 lea     rdx, src_to_dest_hash
.text:0000000000009D75                 sub     rsp, 8
.text:0000000000009D79                 xor     esi, esi
.text:0000000000009D7B                 mov     edi, 67h ; 'g'
.text:0000000000009D80                 call    hash_initialize
.text:0000000000009D85                 test    rax, rax
.text:0000000000009D88                 mov     cs:src_to_dest, rax
.text:0000000000009D8F                 jz      short loc_9D96
.text:0000000000009D91                 add     rsp, 8
.text:0000000000009D95                 retn
.text:0000000000009D96 ; ---------------------------------------------------------------------------
.text:0000000000009D96
.text:0000000000009D96 loc_9D96:                               ; CODE XREF: hash_init+2F↑j
.text:0000000000009D96                 call    xalloc_die
.text:0000000000009D96 ; } // starts at 9D60
.text:0000000000009D96 hash_init       endp
.text:0000000000009D96
.text:0000000000009D96 ; ---------------------------------------------------------------------------
.text:0000000000009D9B                 align 20h
.text:0000000000009DA0
.text:0000000000009DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DA0
.text:0000000000009DA0
.text:0000000000009DA0                 public forget_all
.text:0000000000009DA0 forget_all      proc near
.text:0000000000009DA0 ; __unwind {
.text:0000000000009DA0                 mov     rdi, cs:src_to_dest ; ptr
.text:0000000000009DA7                 jmp     hash_free
.text:0000000000009DA7 ; } // starts at 9DA0
.text:0000000000009DA7 forget_all      endp
.text:0000000000009DA7
.text:0000000000009DA7 ; ---------------------------------------------------------------------------
.text:0000000000009DAC                 align 10h
.text:0000000000009DB0
.text:0000000000009DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DB0
.text:0000000000009DB0
.text:0000000000009DB0                 public extent_scan_init
.text:0000000000009DB0 extent_scan_init proc near              ; CODE XREF: copy_internal+30A4↑p
.text:0000000000009DB0 ; __unwind {
.text:0000000000009DB0                 mov     [rsi], edi
.text:0000000000009DB2                 mov     qword ptr [rsi+18h], 0
.text:0000000000009DBA                 mov     qword ptr [rsi+28h], 0
.text:0000000000009DC2                 mov     qword ptr [rsi+8], 0
.text:0000000000009DCA                 mov     byte ptr [rsi+20h], 0
.text:0000000000009DCE                 mov     byte ptr [rsi+21h], 0
.text:0000000000009DD2                 mov     dword ptr [rsi+10h], 1
.text:0000000000009DD9                 retn
.text:0000000000009DD9 ; } // starts at 9DB0
.text:0000000000009DD9 extent_scan_init endp
.text:0000000000009DD9
.text:0000000000009DD9 ; ---------------------------------------------------------------------------
.text:0000000000009DDA                 align 20h
.text:0000000000009DE0
.text:0000000000009DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DE0
.text:0000000000009DE0 ; Attributes: bp-based frame
.text:0000000000009DE0
.text:0000000000009DE0                 public extent_scan_read
.text:0000000000009DE0 extent_scan_read proc near              ; CODE XREF: copy_internal+30EA↑p
.text:0000000000009DE0
.text:0000000000009DE0 var_s0          = qword ptr  0
.text:0000000000009DE0 var_s8          = qword ptr  8
.text:0000000000009DE0 var_s10         = dword ptr  10h
.text:0000000000009DE0 var_s14         = dword ptr  14h
.text:0000000000009DE0 var_s18         = dword ptr  18h
.text:0000000000009DE0 var_s20         = qword ptr  20h
.text:0000000000009DE0 var_s30         = qword ptr  30h
.text:0000000000009DE0 var_s1008       = qword ptr  1008h
.text:0000000000009DE0
.text:0000000000009DE0 ; __unwind {
.text:0000000000009DE0                 push    r15
.text:0000000000009DE2                 push    r14
.text:0000000000009DE4                 xor     r15d, r15d
.text:0000000000009DE7                 push    r13
.text:0000000000009DE9                 push    r12
.text:0000000000009DEB                 mov     r14, rdi
.text:0000000000009DEE                 push    rbp
.text:0000000000009DEF                 push    rbx
.text:0000000000009DF0                 mov     r13, 7FFFFFFFFFFFFFFFh
.text:0000000000009DFA                 sub     rsp, 1018h
.text:0000000000009E01                 mov     rbx, [rdi+28h]
.text:0000000000009E05                 mov     rdx, [rdi+8]
.text:0000000000009E09                 mov     rbp, rsp
.text:0000000000009E0C                 mov     rax, fs:28h
.text:0000000000009E15                 mov     [rsp+var_s1008], rax
.text:0000000000009E1D                 xor     eax, eax
.text:0000000000009E1F                 lea     r12, [rbp+var_s20]
.text:0000000000009E23
.text:0000000000009E23 loc_9E23:                               ; CODE XREF: extent_scan_read+2BA↓j
.text:0000000000009E23                 xor     eax, eax
.text:0000000000009E25                 mov     ecx, 200h
.text:0000000000009E2A                 mov     rdi, rbp
.text:0000000000009E2D                 rep stosq
.text:0000000000009E30                 mov     eax, [r14+10h]
.text:0000000000009E34                 mov     edi, [r14]      ; fd
.text:0000000000009E37                 mov     esi, 0C020660Bh ; request
.text:0000000000009E3C                 mov     [rsp+var_s0], rdx
.text:0000000000009E40                 not     rdx
.text:0000000000009E43                 mov     [rsp+var_s18], 48h ; 'H'
.text:0000000000009E4B                 mov     [rsp+var_s8], rdx
.text:0000000000009E50                 mov     rdx, rbp
.text:0000000000009E53                 mov     [rsp+var_s10], eax
.text:0000000000009E57                 xor     eax, eax
.text:0000000000009E59                 call    _ioctl
.text:0000000000009E5E                 test    eax, eax
.text:0000000000009E60                 js      loc_9F30
.text:0000000000009E66                 mov     eax, [rsp+var_s14]
.text:0000000000009E6A                 test    eax, eax
.text:0000000000009E6C                 jz      loc_A0A8
.text:0000000000009E72                 mov     rcx, [r14+18h]
.text:0000000000009E76                 mov     rdx, rax
.text:0000000000009E79                 not     rdx
.text:0000000000009E7C                 cmp     rcx, rdx
.text:0000000000009E7F                 ja      loc_A0BA
.text:0000000000009E85                 mov     rdi, [r14+28h]
.text:0000000000009E89                 mov     edx, 18h
.text:0000000000009E8E                 add     rcx, rax
.text:0000000000009E91                 mov     rax, rdx
.text:0000000000009E94                 xor     esi, esi
.text:0000000000009E96                 mov     [r14+18h], rcx
.text:0000000000009E9A                 sub     rbx, rdi
.text:0000000000009E9D                 mul     rcx
.text:0000000000009EA0                 jo      loc_A0D9
.text:0000000000009EA6
.text:0000000000009EA6 loc_9EA6:                               ; CODE XREF: extent_scan_read+2FE↓j
.text:0000000000009EA6                 test    rax, rax
.text:0000000000009EA9                 js      loc_A0E3
.text:0000000000009EAF                 test    rsi, rsi
.text:0000000000009EB2                 jnz     loc_A0E3
.text:0000000000009EB8                 lea     rsi, [rcx+rcx*2]
.text:0000000000009EBC                 shl     rsi, 3
.text:0000000000009EC0                 call    xrealloc
.text:0000000000009EC5                 mov     r8d, [rsp+var_s14]
.text:0000000000009ECA                 add     rbx, rax
.text:0000000000009ECD                 mov     [r14+28h], rax
.text:0000000000009ED1                 test    r8d, r8d
.text:0000000000009ED4                 jz      loc_A010
.text:0000000000009EDA                 mov     rax, [rsp+var_s30]
.text:0000000000009EDF                 mov     rdx, [rsp+var_s20]
.text:0000000000009EE4                 mov     rcx, r13
.text:0000000000009EE7                 sub     rcx, rax
.text:0000000000009EEA                 cmp     rdx, rcx
.text:0000000000009EED                 ja      loc_9FCA
.text:0000000000009EF3                 xor     ecx, ecx
.text:0000000000009EF5                 mov     rsi, r12
.text:0000000000009EF8
.text:0000000000009EF8 loc_9EF8:                               ; CODE XREF: extent_scan_read+1E4↓j
.text:0000000000009EF8                 test    r15d, r15d
.text:0000000000009EFB                 jz      short loc_9F70
.text:0000000000009EFD                 mov     r9d, [rsi+28h]
.text:0000000000009F01                 mov     r10, [rbx+8]
.text:0000000000009F05                 mov     rdi, [rbx]
.text:0000000000009F08                 mov     r11d, r9d
.text:0000000000009F0B                 add     rdi, r10
.text:0000000000009F0E                 and     r11d, 0FFFFFFFEh
.text:0000000000009F12                 cmp     [rbx+10h], r11d
.text:0000000000009F16                 jz      loc_9FF0
.text:0000000000009F1C
.text:0000000000009F1C loc_9F1C:                               ; CODE XREF: extent_scan_read+213↓j
.text:0000000000009F1C                 cmp     rdi, rdx
.text:0000000000009F1F                 jbe     short loc_9F7D
.text:0000000000009F21
.text:0000000000009F21 loc_9F21:                               ; CODE XREF: extent_scan_read+197↓j
.text:0000000000009F21                 mov     r10, rdi
.text:0000000000009F24                 sub     r10, rdx
.text:0000000000009F27                 cmp     r10, rax
.text:0000000000009F2A                 jnb     loc_A048
.text:0000000000009F30
.text:0000000000009F30 loc_9F30:                               ; CODE XREF: extent_scan_read+80↑j
.text:0000000000009F30                 xor     eax, eax
.text:0000000000009F32                 cmp     qword ptr [r14+8], 0
.text:0000000000009F37                 jnz     short loc_9F40
.text:0000000000009F39                 mov     byte ptr [r14+20h], 1
.text:0000000000009F3E                 xor     eax, eax
.text:0000000000009F40
.text:0000000000009F40 loc_9F40:                               ; CODE XREF: extent_scan_read+157↑j
.text:0000000000009F40                                         ; extent_scan_read+291↓j ...
.text:0000000000009F40                 mov     rbx, [rsp+var_s1008]
.text:0000000000009F48                 xor     rbx, fs:28h
.text:0000000000009F51                 jnz     loc_A0E8
.text:0000000000009F57                 add     rsp, 1018h
.text:0000000000009F5E                 pop     rbx
.text:0000000000009F5F                 pop     rbp
.text:0000000000009F60                 pop     r12
.text:0000000000009F62                 pop     r13
.text:0000000000009F64                 pop     r14
.text:0000000000009F66                 pop     r15
.text:0000000000009F68                 retn
.text:0000000000009F68 ; ---------------------------------------------------------------------------
.text:0000000000009F69                 align 10h
.text:0000000000009F70
.text:0000000000009F70 loc_9F70:                               ; CODE XREF: extent_scan_read+11B↑j
.text:0000000000009F70                 mov     rdi, [r14+8]
.text:0000000000009F74                 cmp     rdi, rdx
.text:0000000000009F77                 ja      short loc_9F21
.text:0000000000009F79                 mov     r9d, [rsi+28h]
.text:0000000000009F7D
.text:0000000000009F7D loc_9F7D:                               ; CODE XREF: extent_scan_read+13F↑j
.text:0000000000009F7D                 mov     esi, r15d
.text:0000000000009F80                 add     r15d, 1
.text:0000000000009F84                 lea     rdi, [rsi+rsi*2]
.text:0000000000009F88                 mov     rsi, [r14+28h]
.text:0000000000009F8C                 lea     rbx, [rsi+rdi*8]
.text:0000000000009F90                 mov     [rbx], rdx
.text:0000000000009F93                 mov     [rbx+8], rax
.text:0000000000009F97                 mov     [rbx+10h], r9d
.text:0000000000009F9B
.text:0000000000009F9B loc_9F9B:                               ; CODE XREF: extent_scan_read+275↓j
.text:0000000000009F9B                 add     ecx, 1
.text:0000000000009F9E                 cmp     ecx, r8d
.text:0000000000009FA1                 jnb     short loc_A010
.text:0000000000009FA3
.text:0000000000009FA3 loc_9FA3:                               ; CODE XREF: extent_scan_read+22A↓j
.text:0000000000009FA3                 mov     edx, ecx
.text:0000000000009FA5                 mov     rdi, r13
.text:0000000000009FA8                 lea     rax, ds:0[rdx*8]
.text:0000000000009FB0                 sub     rax, rdx
.text:0000000000009FB3                 lea     rsi, [r12+rax*8]
.text:0000000000009FB7                 mov     rax, [rsi+10h]
.text:0000000000009FBB                 mov     rdx, [rsi]
.text:0000000000009FBE                 sub     rdi, rax
.text:0000000000009FC1                 cmp     rdx, rdi
.text:0000000000009FC4                 jbe     loc_9EF8
.text:0000000000009FCA
.text:0000000000009FCA loc_9FCA:                               ; CODE XREF: extent_scan_read+10D↑j
.text:0000000000009FCA                 lea     rcx, __PRETTY_FUNCTION___6956 ; "extent_scan_read"
.text:0000000000009FD1                 lea     rsi, aCoreutils831Sr_2 ; "../coreutils-8.31/src/extent-scan.c"
.text:0000000000009FD8                 lea     rdi, aFmExtentsIFeLo ; "fm_extents[i].fe_logical <= OFF_T_MAX -"...
.text:0000000000009FDF                 mov     edx, 8Dh        ; line
.text:0000000000009FE4                 call    ___assert_fail
.text:0000000000009FE4 ; ---------------------------------------------------------------------------
.text:0000000000009FE9                 align 10h
.text:0000000000009FF0
.text:0000000000009FF0 loc_9FF0:                               ; CODE XREF: extent_scan_read+136↑j
.text:0000000000009FF0                 cmp     rdi, rdx
.text:0000000000009FF3                 jnz     loc_9F1C
.text:0000000000009FF9                 add     ecx, 1
.text:0000000000009FFC                 add     rax, r10
.text:0000000000009FFF                 mov     [rbx+10h], r9d
.text:000000000000A003                 cmp     ecx, r8d
.text:000000000000A006                 mov     [rbx+8], rax
.text:000000000000A00A                 jb      short loc_9FA3
.text:000000000000A00C                 nop     dword ptr [rax+00h]
.text:000000000000A010
.text:000000000000A010 loc_A010:                               ; CODE XREF: extent_scan_read+F4↑j
.text:000000000000A010                                         ; extent_scan_read+1C1↑j
.text:000000000000A010                 test    byte ptr [rbx+10h], 1
.text:000000000000A014                 jnz     short loc_A060
.text:000000000000A016                 cmp     r15d, 48h ; 'H'
.text:000000000000A01A                 movzx   eax, byte ptr [r14+21h]
.text:000000000000A01F                 jbe     short loc_A080
.text:000000000000A021                 test    al, al
.text:000000000000A023                 jnz     short loc_A065
.text:000000000000A025                 lea     eax, [r15-1]
.text:000000000000A029                 mov     rdx, [r14+28h]
.text:000000000000A02D                 lea     rcx, [rax+rax*2]
.text:000000000000A031                 mov     [r14+18h], rax
.text:000000000000A035                 mov     rax, [rdx+rcx*8-18h]
.text:000000000000A03A                 add     rax, [rdx+rcx*8-10h]
.text:000000000000A03F                 mov     [r14+8], rax
.text:000000000000A043                 jmp     short loc_A06C
.text:000000000000A043 ; ---------------------------------------------------------------------------
.text:000000000000A045                 align 8
.text:000000000000A048
.text:000000000000A048 loc_A048:                               ; CODE XREF: extent_scan_read+14A↑j
.text:000000000000A048                 sub     rax, r10
.text:000000000000A04B                 mov     [rsi], rdi
.text:000000000000A04E                 sub     ecx, 1
.text:000000000000A051                 mov     [rsi+10h], rax
.text:000000000000A055                 jmp     loc_9F9B
.text:000000000000A055 ; ---------------------------------------------------------------------------
.text:000000000000A05A                 align 20h
.text:000000000000A060
.text:000000000000A060 loc_A060:                               ; CODE XREF: extent_scan_read+234↑j
.text:000000000000A060                 mov     byte ptr [r14+21h], 1
.text:000000000000A065
.text:000000000000A065 loc_A065:                               ; CODE XREF: extent_scan_read+243↑j
.text:000000000000A065                 mov     eax, r15d
.text:000000000000A068                 mov     [r14+18h], rax
.text:000000000000A06C
.text:000000000000A06C loc_A06C:                               ; CODE XREF: extent_scan_read+263↑j
.text:000000000000A06C                                         ; extent_scan_read+2A9↓j ...
.text:000000000000A06C                 mov     eax, 1
.text:000000000000A071                 jmp     loc_9F40
.text:000000000000A071 ; ---------------------------------------------------------------------------
.text:000000000000A076                 align 20h
.text:000000000000A080
.text:000000000000A080 loc_A080:                               ; CODE XREF: extent_scan_read+23F↑j
.text:000000000000A080                 mov     ecx, r15d
.text:000000000000A083                 test    al, al
.text:000000000000A085                 mov     [r14+18h], rcx
.text:000000000000A089                 jnz     short loc_A06C
.text:000000000000A08B                 mov     rdx, [rbx+8]
.text:000000000000A08F                 add     rdx, [rbx]
.text:000000000000A092                 cmp     r15d, 47h ; 'G'
.text:000000000000A096                 mov     [r14+8], rdx
.text:000000000000A09A                 jbe     loc_9E23
.text:000000000000A0A0                 jmp     short loc_A06C
.text:000000000000A0A0 ; ---------------------------------------------------------------------------
.text:000000000000A0A2                 align 8
.text:000000000000A0A8
.text:000000000000A0A8 loc_A0A8:                               ; CODE XREF: extent_scan_read+8C↑j
.text:000000000000A0A8                 cmp     qword ptr [r14+8], 0
.text:000000000000A0AD                 mov     byte ptr [r14+21h], 1
.text:000000000000A0B2                 setnz   al
.text:000000000000A0B5                 jmp     loc_9F40
.text:000000000000A0BA ; ---------------------------------------------------------------------------
.text:000000000000A0BA
.text:000000000000A0BA loc_A0BA:                               ; CODE XREF: extent_scan_read+9F↑j
.text:000000000000A0BA                 lea     rcx, __PRETTY_FUNCTION___6956 ; "extent_scan_read"
.text:000000000000A0C1                 lea     rsi, aCoreutils831Sr_2 ; "../coreutils-8.31/src/extent-scan.c"
.text:000000000000A0C8                 lea     rdi, aScanEiCountSiz ; "scan->ei_count <= SIZE_MAX - fiemap->fm"...
.text:000000000000A0CF                 mov     edx, 7Eh ; '~'  ; line
.text:000000000000A0D4                 call    ___assert_fail
.text:000000000000A0D9 ; ---------------------------------------------------------------------------
.text:000000000000A0D9
.text:000000000000A0D9 loc_A0D9:                               ; CODE XREF: extent_scan_read+C0↑j
.text:000000000000A0D9                 mov     esi, 1
.text:000000000000A0DE                 jmp     loc_9EA6
.text:000000000000A0E3 ; ---------------------------------------------------------------------------
.text:000000000000A0E3
.text:000000000000A0E3 loc_A0E3:                               ; CODE XREF: extent_scan_read+C9↑j
.text:000000000000A0E3                                         ; extent_scan_read+D2↑j
.text:000000000000A0E3                 call    xalloc_die
.text:000000000000A0E8 ; ---------------------------------------------------------------------------
.text:000000000000A0E8
.text:000000000000A0E8 loc_A0E8:                               ; CODE XREF: extent_scan_read+171↑j
.text:000000000000A0E8                 call    ___stack_chk_fail
.text:000000000000A0E8 ; } // starts at 9DE0
.text:000000000000A0E8 extent_scan_read endp
.text:000000000000A0E8
.text:000000000000A0E8 ; ---------------------------------------------------------------------------
.text:000000000000A0ED                 align 10h
.text:000000000000A0F0
.text:000000000000A0F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0F0
.text:000000000000A0F0
.text:000000000000A0F0 ; __int64 __fastcall try_link(char *to)
.text:000000000000A0F0 try_link        proc near               ; DATA XREF: force_linkat+71↓o
.text:000000000000A0F0 ; __unwind {
.text:000000000000A0F0                 mov     rax, rsi
.text:000000000000A0F3                 mov     rcx, rdi        ; to
.text:000000000000A0F6                 mov     edx, [rsi+10h]  ; tofd
.text:000000000000A0F9                 mov     r8d, [rax+14h]  ; flags
.text:000000000000A0FD                 mov     rsi, [rsi+8]    ; from
.text:000000000000A101                 mov     edi, [rax]      ; fromfd
.text:000000000000A103                 jmp     _linkat
.text:000000000000A103 ; } // starts at A0F0
.text:000000000000A103 try_link        endp
.text:000000000000A103
.text:000000000000A103 ; ---------------------------------------------------------------------------
.text:000000000000A108                 align 10h
.text:000000000000A110
.text:000000000000A110 ; =============== S U B R O U T I N E =======================================
.text:000000000000A110
.text:000000000000A110
.text:000000000000A110 ; __int64 __fastcall samedir_template(void *src, void *dest)
.text:000000000000A110 samedir_template proc near              ; CODE XREF: force_linkat+5B↓p
.text:000000000000A110                                         ; force_symlinkat+49↓p
.text:000000000000A110 ; __unwind {
.text:000000000000A110                 push    r12
.text:000000000000A112                 push    rbp
.text:000000000000A113                 mov     rbp, rdi
.text:000000000000A116                 push    rbx
.text:000000000000A117                 mov     r12, rsi
.text:000000000000A11A                 call    last_component
.text:000000000000A11F                 sub     rax, rbp
.text:000000000000A122                 lea     rdi, [rax+9]    ; size
.text:000000000000A126                 mov     rbx, rax
.text:000000000000A129                 cmp     rdi, 100h
.text:000000000000A130                 jbe     short loc_A141
.text:000000000000A132                 call    _malloc
.text:000000000000A137                 mov     r12, rax
.text:000000000000A13A                 xor     eax, eax
.text:000000000000A13C                 test    r12, r12
.text:000000000000A13F                 jz      short loc_A163
.text:000000000000A141
.text:000000000000A141 loc_A141:                               ; CODE XREF: samedir_template+20↑j
.text:000000000000A141                 mov     rdx, rbx        ; n
.text:000000000000A144                 mov     rsi, rbp        ; src
.text:000000000000A147                 mov     rdi, r12        ; dest
.text:000000000000A14A                 call    _mempcpy
.text:000000000000A14F                 mov     rcx, 5858585858587543h
.text:000000000000A159                 mov     byte ptr [rax+8], 0
.text:000000000000A15D                 mov     [rax], rcx
.text:000000000000A160                 mov     rax, r12
.text:000000000000A163
.text:000000000000A163 loc_A163:                               ; CODE XREF: samedir_template+2F↑j
.text:000000000000A163                 pop     rbx
.text:000000000000A164                 pop     rbp
.text:000000000000A165                 pop     r12
.text:000000000000A167                 retn
.text:000000000000A167 ; } // starts at A110
.text:000000000000A167 samedir_template endp
.text:000000000000A167
.text:000000000000A167 ; ---------------------------------------------------------------------------
.text:000000000000A168                 align 10h
.text:000000000000A170
.text:000000000000A170 ; =============== S U B R O U T I N E =======================================
.text:000000000000A170
.text:000000000000A170
.text:000000000000A170 ; __int64 __fastcall try_symlink(char *to)
.text:000000000000A170 try_symlink     proc near               ; DATA XREF: force_symlinkat+5F↓o
.text:000000000000A170 ; __unwind {
.text:000000000000A170                 mov     rax, rsi
.text:000000000000A173                 mov     rdx, rdi        ; to
.text:000000000000A176                 mov     esi, [rsi+8]    ; tofd
.text:000000000000A179                 mov     rdi, [rax]      ; from
.text:000000000000A17C                 jmp     _symlinkat
.text:000000000000A17C ; } // starts at A170
.text:000000000000A17C try_symlink     endp
.text:000000000000A17C
.text:000000000000A17C ; ---------------------------------------------------------------------------
.text:000000000000A181                 align 10h
.text:000000000000A190
.text:000000000000A190 ; =============== S U B R O U T I N E =======================================
.text:000000000000A190
.text:000000000000A190
.text:000000000000A190                 public force_linkat
.text:000000000000A190 force_linkat    proc near               ; CODE XREF: create_hard_link+34↑p
.text:000000000000A190
.text:000000000000A190 var_178         = qword ptr -178h
.text:000000000000A190 var_16C         = dword ptr -16Ch
.text:000000000000A190 var_168         = dword ptr -168h
.text:000000000000A190 var_160         = qword ptr -160h
.text:000000000000A190 var_158         = dword ptr -158h
.text:000000000000A190 var_154         = dword ptr -154h
.text:000000000000A190 dest            = byte ptr -148h
.text:000000000000A190 var_40          = qword ptr -40h
.text:000000000000A190 arg_0           = dword ptr  8
.text:000000000000A190
.text:000000000000A190 ; __unwind {
.text:000000000000A190                 push    r15
.text:000000000000A192                 push    r14
.text:000000000000A194                 mov     r14d, edi
.text:000000000000A197                 push    r13
.text:000000000000A199                 push    r12
.text:000000000000A19B                 mov     r13, rsi
.text:000000000000A19E                 push    rbp
.text:000000000000A19F                 push    rbx
.text:000000000000A1A0                 mov     rbx, rcx
.text:000000000000A1A3                 mov     ebp, edx
.text:000000000000A1A5                 mov     r12d, r8d
.text:000000000000A1A8                 sub     rsp, 148h
.text:000000000000A1AF                 mov     ecx, [rsp+178h+arg_0]
.text:000000000000A1B6                 mov     rax, fs:28h
.text:000000000000A1BF                 mov     [rsp+178h+var_40], rax
.text:000000000000A1C7                 xor     eax, eax
.text:000000000000A1C9                 test    ecx, ecx
.text:000000000000A1CB                 js      loc_A280
.text:000000000000A1D1
.text:000000000000A1D1 loc_A1D1:                               ; CODE XREF: force_linkat+10D↓j
.text:000000000000A1D1                 cmp     r9b, 1
.text:000000000000A1D5                 jnz     short loc_A250
.text:000000000000A1D7                 cmp     ecx, 11h
.text:000000000000A1DA                 jnz     short loc_A250
.text:000000000000A1DC                 lea     rax, [rsp+178h+dest]
.text:000000000000A1E1                 mov     rdi, rbx        ; src
.text:000000000000A1E4                 mov     rsi, rax        ; dest
.text:000000000000A1E7                 mov     [rsp+178h+var_178], rax
.text:000000000000A1EB                 call    samedir_template
.text:000000000000A1F0                 test    rax, rax
.text:000000000000A1F3                 mov     r15, rax
.text:000000000000A1F6                 jz      loc_A2E0
.text:000000000000A1FC                 lea     rdx, [rsp+178h+var_168]
.text:000000000000A201                 lea     rcx, try_link
.text:000000000000A208                 xor     esi, esi
.text:000000000000A20A                 mov     r8d, 6
.text:000000000000A210                 mov     rdi, rax        ; s
.text:000000000000A213                 mov     [rsp+178h+var_168], r14d
.text:000000000000A218                 mov     [rsp+178h+var_160], r13
.text:000000000000A21D                 mov     [rsp+178h+var_158], ebp
.text:000000000000A221                 mov     [rsp+178h+var_154], r12d
.text:000000000000A226                 call    try_tempname_len
.text:000000000000A22B                 test    eax, eax
.text:000000000000A22D                 jz      short loc_A2A8
.text:000000000000A22F                 call    ___errno_location
.text:000000000000A234                 mov     ecx, [rax]
.text:000000000000A236
.text:000000000000A236 loc_A236:                               ; CODE XREF: force_linkat+14B↓j
.text:000000000000A236                 cmp     r15, [rsp+178h+var_178]
.text:000000000000A23A                 jz      short loc_A250
.text:000000000000A23C                 mov     rdi, r15        ; ptr
.text:000000000000A23F                 mov     dword ptr [rsp+178h+var_178], ecx
.text:000000000000A242                 call    free
.text:000000000000A247                 mov     ecx, dword ptr [rsp+178h+var_178]
.text:000000000000A24A                 nop     word ptr [rax+rax+00h]
.text:000000000000A250
.text:000000000000A250 loc_A250:                               ; CODE XREF: force_linkat+45↑j
.text:000000000000A250                                         ; force_linkat+4A↑j ...
.text:000000000000A250                 mov     rbx, [rsp+178h+var_40]
.text:000000000000A258                 xor     rbx, fs:28h
.text:000000000000A261                 mov     eax, ecx
.text:000000000000A263                 jnz     loc_A2EC
.text:000000000000A269                 add     rsp, 148h
.text:000000000000A270                 pop     rbx
.text:000000000000A271                 pop     rbp
.text:000000000000A272                 pop     r12
.text:000000000000A274                 pop     r13
.text:000000000000A276                 pop     r14
.text:000000000000A278                 pop     r15
.text:000000000000A27A                 retn
.text:000000000000A27A ; ---------------------------------------------------------------------------
.text:000000000000A27B                 align 20h
.text:000000000000A280
.text:000000000000A280 loc_A280:                               ; CODE XREF: force_linkat+3B↑j
.text:000000000000A280                 mov     rcx, rbx        ; to
.text:000000000000A283                 mov     dword ptr [rsp+178h+var_178], r9d
.text:000000000000A287                 call    _linkat
.text:000000000000A28C                 test    eax, eax
.text:000000000000A28E                 mov     ecx, eax
.text:000000000000A290                 jz      short loc_A250
.text:000000000000A292                 call    ___errno_location
.text:000000000000A297                 mov     r9d, dword ptr [rsp+178h+var_178]
.text:000000000000A29B                 mov     ecx, [rax]
.text:000000000000A29D                 jmp     loc_A1D1
.text:000000000000A29D ; ---------------------------------------------------------------------------
.text:000000000000A2A2                 align 8
.text:000000000000A2A8
.text:000000000000A2A8 loc_A2A8:                               ; CODE XREF: force_linkat+9D↑j
.text:000000000000A2A8                 mov     rcx, rbx        ; new
.text:000000000000A2AB                 mov     edx, ebp        ; newfd
.text:000000000000A2AD                 mov     rsi, r15        ; old
.text:000000000000A2B0                 mov     edi, ebp        ; oldfd
.text:000000000000A2B2                 call    _renameat
.text:000000000000A2B7                 test    eax, eax
.text:000000000000A2B9                 mov     ecx, 0FFFFFFFFh
.text:000000000000A2BE                 jz      short loc_A2C7
.text:000000000000A2C0                 call    ___errno_location
.text:000000000000A2C5                 mov     ecx, [rax]
.text:000000000000A2C7
.text:000000000000A2C7 loc_A2C7:                               ; CODE XREF: force_linkat+12E↑j
.text:000000000000A2C7                 xor     edx, edx        ; flag
.text:000000000000A2C9                 mov     rsi, r15        ; name
.text:000000000000A2CC                 mov     edi, ebp        ; fd
.text:000000000000A2CE                 mov     [rsp+178h+var_16C], ecx
.text:000000000000A2D2                 call    _unlinkat
.text:000000000000A2D7                 mov     ecx, [rsp+178h+var_16C]
.text:000000000000A2DB                 jmp     loc_A236
.text:000000000000A2E0 ; ---------------------------------------------------------------------------
.text:000000000000A2E0
.text:000000000000A2E0 loc_A2E0:                               ; CODE XREF: force_linkat+66↑j
.text:000000000000A2E0                 call    ___errno_location
.text:000000000000A2E5                 mov     ecx, [rax]
.text:000000000000A2E7                 jmp     loc_A250
.text:000000000000A2EC ; ---------------------------------------------------------------------------
.text:000000000000A2EC
.text:000000000000A2EC loc_A2EC:                               ; CODE XREF: force_linkat+D3↑j
.text:000000000000A2EC                 call    ___stack_chk_fail
.text:000000000000A2EC ; } // starts at A190
.text:000000000000A2EC force_linkat    endp
.text:000000000000A2EC
.text:000000000000A2EC ; ---------------------------------------------------------------------------
.text:000000000000A2F1                 align 20h
.text:000000000000A300
.text:000000000000A300 ; =============== S U B R O U T I N E =======================================
.text:000000000000A300
.text:000000000000A300
.text:000000000000A300                 public force_symlinkat
.text:000000000000A300 force_symlinkat proc near               ; CODE XREF: copy_internal+F21↑p
.text:000000000000A300                                         ; copy_internal+2C98↑p
.text:000000000000A300
.text:000000000000A300 var_14C         = dword ptr -14Ch
.text:000000000000A300 var_148         = qword ptr -148h
.text:000000000000A300 var_140         = dword ptr -140h
.text:000000000000A300 dest            = byte ptr -138h
.text:000000000000A300 var_30          = qword ptr -30h
.text:000000000000A300
.text:000000000000A300 ; __unwind {
.text:000000000000A300                 push    r14
.text:000000000000A302                 push    r13
.text:000000000000A304                 push    r12
.text:000000000000A306                 push    rbp
.text:000000000000A307                 mov     r12, rdi
.text:000000000000A30A                 push    rbx
.text:000000000000A30B                 mov     ebp, esi
.text:000000000000A30D                 mov     rbx, rdx
.text:000000000000A310                 sub     rsp, 130h
.text:000000000000A317                 mov     rax, fs:28h
.text:000000000000A320                 mov     [rsp+158h+var_30], rax
.text:000000000000A328                 xor     eax, eax
.text:000000000000A32A                 test    r8d, r8d
.text:000000000000A32D                 js      loc_A3D8
.text:000000000000A333
.text:000000000000A333 loc_A333:                               ; CODE XREF: force_symlinkat+F4↓j
.text:000000000000A333                 cmp     cl, 1
.text:000000000000A336                 jnz     short loc_A3A8
.text:000000000000A338                 cmp     r8d, 11h
.text:000000000000A33C                 jnz     short loc_A3A8
.text:000000000000A33E                 lea     r14, [rsp+158h+dest]
.text:000000000000A343                 mov     rdi, rbx        ; src
.text:000000000000A346                 mov     rsi, r14        ; dest
.text:000000000000A349                 call    samedir_template
.text:000000000000A34E                 test    rax, rax
.text:000000000000A351                 mov     r13, rax
.text:000000000000A354                 jz      loc_A440
.text:000000000000A35A                 lea     rdx, [rsp+158h+var_148]
.text:000000000000A35F                 lea     rcx, try_symlink
.text:000000000000A366                 xor     esi, esi
.text:000000000000A368                 mov     r8d, 6
.text:000000000000A36E                 mov     rdi, rax        ; s
.text:000000000000A371                 mov     [rsp+158h+var_148], r12
.text:000000000000A376                 mov     [rsp+158h+var_140], ebp
.text:000000000000A37A                 call    try_tempname_len
.text:000000000000A37F                 test    eax, eax
.text:000000000000A381                 jz      short loc_A400
.text:000000000000A383                 call    ___errno_location
.text:000000000000A388                 mov     r8d, [rax]
.text:000000000000A38B
.text:000000000000A38B loc_A38B:                               ; CODE XREF: force_symlinkat+117↓j
.text:000000000000A38B                                         ; force_symlinkat+13B↓j
.text:000000000000A38B                 cmp     r13, r14
.text:000000000000A38E                 jz      short loc_A3A8
.text:000000000000A390                 mov     rdi, r13        ; ptr
.text:000000000000A393                 mov     [rsp+158h+var_14C], r8d
.text:000000000000A398                 call    free
.text:000000000000A39D                 mov     r8d, [rsp+158h+var_14C]
.text:000000000000A3A2                 nop     word ptr [rax+rax+00h]
.text:000000000000A3A8
.text:000000000000A3A8 loc_A3A8:                               ; CODE XREF: force_symlinkat+36↑j
.text:000000000000A3A8                                         ; force_symlinkat+3C↑j ...
.text:000000000000A3A8                 mov     rbx, [rsp+158h+var_30]
.text:000000000000A3B0                 xor     rbx, fs:28h
.text:000000000000A3B9                 mov     eax, r8d
.text:000000000000A3BC                 jnz     loc_A44D
.text:000000000000A3C2                 add     rsp, 130h
.text:000000000000A3C9                 pop     rbx
.text:000000000000A3CA                 pop     rbp
.text:000000000000A3CB                 pop     r12
.text:000000000000A3CD                 pop     r13
.text:000000000000A3CF                 pop     r14
.text:000000000000A3D1                 retn
.text:000000000000A3D1 ; ---------------------------------------------------------------------------
.text:000000000000A3D2                 align 8
.text:000000000000A3D8
.text:000000000000A3D8 loc_A3D8:                               ; CODE XREF: force_symlinkat+2D↑j
.text:000000000000A3D8                 mov     [rsp+158h+var_14C], ecx
.text:000000000000A3DC                 call    _symlinkat
.text:000000000000A3E1                 test    eax, eax
.text:000000000000A3E3                 mov     r8d, eax
.text:000000000000A3E6                 jz      short loc_A3A8
.text:000000000000A3E8                 call    ___errno_location
.text:000000000000A3ED                 mov     ecx, [rsp+158h+var_14C]
.text:000000000000A3F1                 mov     r8d, [rax]
.text:000000000000A3F4                 jmp     loc_A333
.text:000000000000A3F4 ; ---------------------------------------------------------------------------
.text:000000000000A3F9                 align 20h
.text:000000000000A400
.text:000000000000A400 loc_A400:                               ; CODE XREF: force_symlinkat+81↑j
.text:000000000000A400                 mov     rcx, rbx        ; new
.text:000000000000A403                 mov     edx, ebp        ; newfd
.text:000000000000A405                 mov     rsi, r13        ; old
.text:000000000000A408                 mov     edi, ebp        ; oldfd
.text:000000000000A40A                 call    _renameat
.text:000000000000A40F                 test    eax, eax
.text:000000000000A411                 mov     r8d, 0FFFFFFFFh
.text:000000000000A417                 jz      loc_A38B
.text:000000000000A41D                 call    ___errno_location
.text:000000000000A422                 mov     r8d, [rax]
.text:000000000000A425                 xor     edx, edx        ; flag
.text:000000000000A427                 mov     rsi, r13        ; name
.text:000000000000A42A                 mov     edi, ebp        ; fd
.text:000000000000A42C                 mov     [rsp+158h+var_14C], r8d
.text:000000000000A431                 call    _unlinkat
.text:000000000000A436                 mov     r8d, [rsp+158h+var_14C]
.text:000000000000A43B                 jmp     loc_A38B
.text:000000000000A440 ; ---------------------------------------------------------------------------
.text:000000000000A440
.text:000000000000A440 loc_A440:                               ; CODE XREF: force_symlinkat+54↑j
.text:000000000000A440                 call    ___errno_location
.text:000000000000A445                 mov     r8d, [rax]
.text:000000000000A448                 jmp     loc_A3A8
.text:000000000000A44D ; ---------------------------------------------------------------------------
.text:000000000000A44D
.text:000000000000A44D loc_A44D:                               ; CODE XREF: force_symlinkat+BC↑j
.text:000000000000A44D                 call    ___stack_chk_fail
.text:000000000000A44D ; } // starts at A300
.text:000000000000A44D force_symlinkat endp
.text:000000000000A44D
.text:000000000000A44D ; ---------------------------------------------------------------------------
.text:000000000000A452                 align 20h
.text:000000000000A460
.text:000000000000A460 ; =============== S U B R O U T I N E =======================================
.text:000000000000A460
.text:000000000000A460
.text:000000000000A460                 public copy_acl
.text:000000000000A460 copy_acl        proc near               ; CODE XREF: copy_internal+280C↑p
.text:000000000000A460                                         ; copy_internal+393E↑p
.text:000000000000A460 ; __unwind {
.text:000000000000A460                 push    r12
.text:000000000000A462                 push    rbp
.text:000000000000A463                 mov     r12, rdi
.text:000000000000A466                 push    rbx
.text:000000000000A467                 mov     rbp, rdx
.text:000000000000A46A                 call    qcopy_acl
.text:000000000000A46F                 cmp     eax, 0FFFFFFFEh
.text:000000000000A472                 mov     ebx, eax
.text:000000000000A474                 jz      short loc_A4C0
.text:000000000000A476                 cmp     eax, 0FFFFFFFFh
.text:000000000000A479                 jnz     short loc_A4B2
.text:000000000000A47B                 mov     rdi, rbp
.text:000000000000A47E                 call    quote
.text:000000000000A483                 lea     rsi, aPreservingPerm ; "preserving permissions for %s"
.text:000000000000A48A                 mov     edx, 5          ; category
.text:000000000000A48F                 xor     edi, edi        ; domainname
.text:000000000000A491                 mov     r12, rax
.text:000000000000A494                 call    _dcgettext
.text:000000000000A499                 mov     rbp, rax
.text:000000000000A49C                 call    ___errno_location
.text:000000000000A4A1                 mov     esi, [rax]      ; errnum
.text:000000000000A4A3                 mov     rcx, r12
.text:000000000000A4A6                 mov     rdx, rbp        ; format
.text:000000000000A4A9                 xor     edi, edi        ; status
.text:000000000000A4AB                 xor     eax, eax
.text:000000000000A4AD                 call    _error
.text:000000000000A4B2
.text:000000000000A4B2 loc_A4B2:                               ; CODE XREF: copy_acl+19↑j
.text:000000000000A4B2                 mov     eax, ebx
.text:000000000000A4B4                 pop     rbx
.text:000000000000A4B5                 pop     rbp
.text:000000000000A4B6                 pop     r12
.text:000000000000A4B8                 retn
.text:000000000000A4B8 ; ---------------------------------------------------------------------------
.text:000000000000A4B9                 align 20h
.text:000000000000A4C0
.text:000000000000A4C0 loc_A4C0:                               ; CODE XREF: copy_acl+14↑j
.text:000000000000A4C0                 mov     rdi, r12
.text:000000000000A4C3                 call    quote
.text:000000000000A4C8                 mov     rbp, rax
.text:000000000000A4CB                 call    ___errno_location
.text:000000000000A4D0                 mov     esi, [rax]      ; errnum
.text:000000000000A4D2                 lea     rdx, aS_0+2     ; format
.text:000000000000A4D9                 mov     rcx, rbp
.text:000000000000A4DC                 xor     eax, eax
.text:000000000000A4DE                 xor     edi, edi        ; status
.text:000000000000A4E0                 call    _error
.text:000000000000A4E5                 mov     eax, ebx
.text:000000000000A4E7                 pop     rbx
.text:000000000000A4E8                 pop     rbp
.text:000000000000A4E9                 pop     r12
.text:000000000000A4EB                 retn
.text:000000000000A4EB ; } // starts at A460
.text:000000000000A4EB copy_acl        endp
.text:000000000000A4EB
.text:000000000000A4EB ; ---------------------------------------------------------------------------
.text:000000000000A4EC                 align 10h
.text:000000000000A4F0
.text:000000000000A4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4F0
.text:000000000000A4F0 ; Attributes: info_from_lumina
.text:000000000000A4F0
.text:000000000000A4F0                 public set_acl
.text:000000000000A4F0 set_acl         proc near               ; CODE XREF: copy_internal+2B64↑p
.text:000000000000A4F0                                         ; copy_internal+3F76↑p ...
.text:000000000000A4F0 ; __unwind {
.text:000000000000A4F0                 push    r12
.text:000000000000A4F2                 push    rbp
.text:000000000000A4F3                 mov     rbp, rdi
.text:000000000000A4F6                 push    rbx
.text:000000000000A4F7                 call    qset_acl
.text:000000000000A4FC                 test    eax, eax
.text:000000000000A4FE                 mov     ebx, eax
.text:000000000000A500                 jz      short loc_A539
.text:000000000000A502                 mov     rdi, rbp
.text:000000000000A505                 call    quote
.text:000000000000A50A                 lea     rsi, aSettingPermiss ; "setting permissions for %s"
.text:000000000000A511                 mov     edx, 5          ; category
.text:000000000000A516                 xor     edi, edi        ; domainname
.text:000000000000A518                 mov     r12, rax
.text:000000000000A51B                 call    _dcgettext
.text:000000000000A520                 mov     rbp, rax
.text:000000000000A523                 call    ___errno_location
.text:000000000000A528                 mov     esi, [rax]      ; errnum
.text:000000000000A52A                 mov     rcx, r12
.text:000000000000A52D                 mov     rdx, rbp        ; format
.text:000000000000A530                 xor     edi, edi        ; status
.text:000000000000A532                 xor     eax, eax
.text:000000000000A534                 call    _error
.text:000000000000A539
.text:000000000000A539 loc_A539:                               ; CODE XREF: set_acl+10↑j
.text:000000000000A539                 mov     eax, ebx
.text:000000000000A53B                 pop     rbx
.text:000000000000A53C                 pop     rbp
.text:000000000000A53D                 pop     r12
.text:000000000000A53F                 retn
.text:000000000000A53F ; } // starts at A4F0
.text:000000000000A53F set_acl         endp
.text:000000000000A53F
.text:000000000000A540
.text:000000000000A540 ; =============== S U B R O U T I N E =======================================
.text:000000000000A540
.text:000000000000A540 ; Attributes: info_from_lumina
.text:000000000000A540
.text:000000000000A540 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:000000000000A540                 public areadlink_with_size
.text:000000000000A540 areadlink_with_size proc near           ; CODE XREF: copy_internal+2C6E↑p
.text:000000000000A540                                         ; copy_internal+38D9↑p
.text:000000000000A540 ; __unwind {
.text:000000000000A540                 push    r15
.text:000000000000A542                 push    r14
.text:000000000000A544                 mov     eax, 401h
.text:000000000000A549                 push    r13
.text:000000000000A54B                 push    r12
.text:000000000000A54D                 mov     r13, rdi
.text:000000000000A550                 push    rbp
.text:000000000000A551                 push    rbx
.text:000000000000A552                 lea     rbx, [rsi+1]
.text:000000000000A556                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:000000000000A560                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:000000000000A56A                 sub     rsp, 8
.text:000000000000A56E                 cmp     rsi, 401h
.text:000000000000A575                 cmovnb  rbx, rax
.text:000000000000A579                 nop     dword ptr [rax+00000000h]
.text:000000000000A580
.text:000000000000A580 loc_A580:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:000000000000A580                 mov     rdi, rbx        ; size
.text:000000000000A583                 call    _malloc
.text:000000000000A588                 test    rax, rax
.text:000000000000A58B                 mov     rbp, rax
.text:000000000000A58E                 jz      short loc_A5CB
.text:000000000000A590
.text:000000000000A590 loc_A590:                               ; CODE XREF: areadlink_with_size+89↓j
.text:000000000000A590                 mov     rdx, rbx        ; len
.text:000000000000A593                 mov     rsi, rax        ; buf
.text:000000000000A596                 mov     rdi, r13        ; path
.text:000000000000A599                 call    _readlink
.text:000000000000A59E                 test    rax, rax
.text:000000000000A5A1                 mov     r12, rax
.text:000000000000A5A4                 js      short loc_A5F8
.text:000000000000A5A6
.text:000000000000A5A6 loc_A5A6:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:000000000000A5A6                 cmp     rbx, r12
.text:000000000000A5A9                 ja      short loc_A610
.text:000000000000A5AB                 mov     rdi, rbp        ; ptr
.text:000000000000A5AE                 call    free
.text:000000000000A5B3                 cmp     rbx, r14
.text:000000000000A5B6                 ja      short loc_A5E0
.text:000000000000A5B8                 add     rbx, rbx
.text:000000000000A5BB                 mov     rdi, rbx        ; size
.text:000000000000A5BE                 call    _malloc
.text:000000000000A5C3                 test    rax, rax
.text:000000000000A5C6                 mov     rbp, rax
.text:000000000000A5C9                 jnz     short loc_A590
.text:000000000000A5CB
.text:000000000000A5CB loc_A5CB:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:000000000000A5CB                                         ; areadlink_with_size+CC↓j ...
.text:000000000000A5CB                 add     rsp, 8
.text:000000000000A5CF                 mov     rax, rbp
.text:000000000000A5D2                 pop     rbx
.text:000000000000A5D3                 pop     rbp
.text:000000000000A5D4                 pop     r12
.text:000000000000A5D6                 pop     r13
.text:000000000000A5D8                 pop     r14
.text:000000000000A5DA                 pop     r15
.text:000000000000A5DC                 retn
.text:000000000000A5DC ; ---------------------------------------------------------------------------
.text:000000000000A5DD                 align 20h
.text:000000000000A5E0
.text:000000000000A5E0 loc_A5E0:                               ; CODE XREF: areadlink_with_size+76↑j
.text:000000000000A5E0                 cmp     rbx, r15
.text:000000000000A5E3                 ja      short loc_A620
.text:000000000000A5E5                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:000000000000A5EF                 jmp     short loc_A580
.text:000000000000A5EF ; ---------------------------------------------------------------------------
.text:000000000000A5F1                 align 8
.text:000000000000A5F8
.text:000000000000A5F8 loc_A5F8:                               ; CODE XREF: areadlink_with_size+64↑j
.text:000000000000A5F8                 call    ___errno_location
.text:000000000000A5FD                 cmp     dword ptr [rax], 22h ; '"'
.text:000000000000A600                 jz      short loc_A5A6
.text:000000000000A602                 mov     rdi, rbp        ; ptr
.text:000000000000A605                 xor     ebp, ebp
.text:000000000000A607                 call    free
.text:000000000000A60C                 jmp     short loc_A5CB
.text:000000000000A60C ; ---------------------------------------------------------------------------
.text:000000000000A60E                 align 10h
.text:000000000000A610
.text:000000000000A610 loc_A610:                               ; CODE XREF: areadlink_with_size+69↑j
.text:000000000000A610                 mov     byte ptr [rbp+r12+0], 0
.text:000000000000A616                 jmp     short loc_A5CB
.text:000000000000A616 ; ---------------------------------------------------------------------------
.text:000000000000A618                 align 20h
.text:000000000000A620
.text:000000000000A620 loc_A620:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:000000000000A620                 call    ___errno_location
.text:000000000000A625                 xor     ebp, ebp
.text:000000000000A627                 mov     dword ptr [rax], 0Ch
.text:000000000000A62D                 jmp     short loc_A5CB
.text:000000000000A62D ; } // starts at A540
.text:000000000000A62D areadlink_with_size endp
.text:000000000000A62D
.text:000000000000A62D ; ---------------------------------------------------------------------------
.text:000000000000A62F                 align 10h
.text:000000000000A630
.text:000000000000A630 ; =============== S U B R O U T I N E =======================================
.text:000000000000A630
.text:000000000000A630
.text:000000000000A630                 public set_simple_backup_suffix
.text:000000000000A630 set_simple_backup_suffix proc near      ; CODE XREF: main+3D9↑p
.text:000000000000A630                                         ; backupfile_internal:loc_AC64↓p
.text:000000000000A630 ; __unwind {
.text:000000000000A630                 test    rdi, rdi
.text:000000000000A633                 push    rbx
.text:000000000000A634                 mov     rbx, rdi
.text:000000000000A637                 jz      short loc_A660
.text:000000000000A639
.text:000000000000A639 loc_A639:                               ; CODE XREF: set_simple_backup_suffix+44↓j
.text:000000000000A639                 cmp     byte ptr [rbx], 0
.text:000000000000A63C                 jnz     short loc_A650
.text:000000000000A63E
.text:000000000000A63E loc_A63E:                               ; CODE XREF: set_simple_backup_suffix+2B↓j
.text:000000000000A63E                                         ; set_simple_backup_suffix+42↓j
.text:000000000000A63E                 lea     rbx, asc_16886  ; "~"
.text:000000000000A645
.text:000000000000A645 loc_A645:                               ; CODE XREF: set_simple_backup_suffix+2D↓j
.text:000000000000A645                 mov     cs:simple_backup_suffix, rbx
.text:000000000000A64C                 pop     rbx
.text:000000000000A64D                 retn
.text:000000000000A64D ; ---------------------------------------------------------------------------
.text:000000000000A64E                 align 10h
.text:000000000000A650
.text:000000000000A650 loc_A650:                               ; CODE XREF: set_simple_backup_suffix+C↑j
.text:000000000000A650                 mov     rdi, rbx
.text:000000000000A653                 call    last_component
.text:000000000000A658                 cmp     rax, rbx
.text:000000000000A65B                 jnz     short loc_A63E
.text:000000000000A65D                 jmp     short loc_A645
.text:000000000000A65D ; ---------------------------------------------------------------------------
.text:000000000000A65F                 align 20h
.text:000000000000A660
.text:000000000000A660 loc_A660:                               ; CODE XREF: set_simple_backup_suffix+7↑j
.text:000000000000A660                 lea     rdi, name       ; "SIMPLE_BACKUP_SUFFIX"
.text:000000000000A667                 call    _getenv
.text:000000000000A66C                 test    rax, rax
.text:000000000000A66F                 mov     rbx, rax
.text:000000000000A672                 jz      short loc_A63E
.text:000000000000A674                 jmp     short loc_A639
.text:000000000000A674 ; } // starts at A630
.text:000000000000A674 set_simple_backup_suffix endp
.text:000000000000A674
.text:000000000000A674 ; ---------------------------------------------------------------------------
.text:000000000000A676                 align 20h
.text:000000000000A680
.text:000000000000A680 ; =============== S U B R O U T I N E =======================================
.text:000000000000A680
.text:000000000000A680
.text:000000000000A680                 public backupfile_internal
.text:000000000000A680 backupfile_internal proc near           ; CODE XREF: backup_file_rename+5↓j
.text:000000000000A680                                         ; find_backup_file_name+6↓p
.text:000000000000A680
.text:000000000000A680 fd              = dword ptr -0B0h
.text:000000000000A680 src             = qword ptr -0A8h
.text:000000000000A680 var_A0          = qword ptr -0A0h
.text:000000000000A680 var_98          = dword ptr -98h
.text:000000000000A680 var_94          = dword ptr -94h
.text:000000000000A680 var_90          = qword ptr -90h
.text:000000000000A680 size            = qword ptr -88h
.text:000000000000A680 n               = qword ptr -80h
.text:000000000000A680 var_78          = qword ptr -78h
.text:000000000000A680 var_70          = qword ptr -70h
.text:000000000000A680 var_68          = qword ptr -68h
.text:000000000000A680 var_60          = qword ptr -60h
.text:000000000000A680 var_55          = byte ptr -55h
.text:000000000000A680 var_54          = dword ptr -54h
.text:000000000000A680 var_50          = qword ptr -50h
.text:000000000000A680 var_44          = dword ptr -44h
.text:000000000000A680 var_40          = qword ptr -40h
.text:000000000000A680
.text:000000000000A680 ; __unwind {
.text:000000000000A680                 push    r15
.text:000000000000A682                 push    r14
.text:000000000000A684                 push    r13
.text:000000000000A686                 push    r12
.text:000000000000A688                 push    rbp
.text:000000000000A689                 push    rbx
.text:000000000000A68A                 mov     rbx, rsi
.text:000000000000A68D                 sub     rsp, 88h
.text:000000000000A694                 mov     [rsp+0B8h+var_54], edi
.text:000000000000A698                 mov     rdi, rsi
.text:000000000000A69B                 mov     [rsp+0B8h+src], rsi
.text:000000000000A6A0                 mov     [rsp+0B8h+var_98], edx
.text:000000000000A6A4                 mov     [rsp+0B8h+var_55], cl
.text:000000000000A6A8                 mov     rax, fs:28h
.text:000000000000A6B1                 mov     [rsp+0B8h+var_40], rax
.text:000000000000A6B6                 xor     eax, eax
.text:000000000000A6B8                 call    last_component
.text:000000000000A6BD                 mov     rdi, rax        ; s
.text:000000000000A6C0                 mov     r14, rax
.text:000000000000A6C3                 call    _strlen
.text:000000000000A6C8                 mov     rdi, cs:simple_backup_suffix ; s
.text:000000000000A6CF                 sub     r14, rbx
.text:000000000000A6D2                 add     rax, r14
.text:000000000000A6D5                 mov     [rsp+0B8h+var_A0], rax
.text:000000000000A6DA                 test    rdi, rdi
.text:000000000000A6DD                 jz      loc_AC64
.text:000000000000A6E3
.text:000000000000A6E3 loc_A6E3:                               ; CODE XREF: backupfile_internal+5F0↓j
.text:000000000000A6E3                 call    _strlen
.text:000000000000A6E8                 mov     rsi, [rsp+0B8h+var_A0]
.text:000000000000A6ED                 add     rax, 1
.text:000000000000A6F1                 cmp     rax, 9
.text:000000000000A6F5                 mov     [rsp+0B8h+var_68], rax
.text:000000000000A6FA                 lea     rdx, [rsi+1]
.text:000000000000A6FE                 mov     rsi, rax
.text:000000000000A701                 mov     eax, 9
.text:000000000000A706                 cmovnb  rax, rsi
.text:000000000000A70A                 add     rax, rdx
.text:000000000000A70D                 mov     [rsp+0B8h+n], rdx
.text:000000000000A712                 mov     rdi, rax        ; size
.text:000000000000A715                 mov     [rsp+0B8h+var_78], rax
.text:000000000000A71A                 call    _malloc
.text:000000000000A71F                 test    rax, rax
.text:000000000000A722                 mov     r15, rax
.text:000000000000A725                 jz      loc_AA10
.text:000000000000A72B                 lea     rax, [rsp+0B8h+var_44]
.text:000000000000A730                 mov     [rsp+0B8h+var_44], 0FFFFFFFFh
.text:000000000000A738                 mov     [rsp+0B8h+var_70], 0
.text:000000000000A741                 xor     r13d, r13d
.text:000000000000A744                 mov     [rsp+0B8h+var_50], rax
.text:000000000000A749
.text:000000000000A749 loc_A749:                               ; CODE XREF: backupfile_internal+366↓j
.text:000000000000A749                 mov     rdx, [rsp+0B8h+n] ; n
.text:000000000000A74E                 mov     rsi, [rsp+0B8h+src] ; src
.text:000000000000A753                 mov     rdi, r15        ; dest
.text:000000000000A756                 call    _memcpy
.text:000000000000A75B                 cmp     [rsp+0B8h+var_98], 1
.text:000000000000A760                 jz      loc_AA40
.text:000000000000A766                 lea     rbp, [r15+r14]
.text:000000000000A76A                 mov     rdi, rbp
.text:000000000000A76D                 call    base_len
.text:000000000000A772                 test    r13, r13
.text:000000000000A775                 mov     r12, rax
.text:000000000000A778                 jz      loc_AB20
.text:000000000000A77E                 mov     rdi, r13        ; dirp
.text:000000000000A781                 call    _rewinddir
.text:000000000000A786
.text:000000000000A786 loc_A786:                               ; CODE XREF: backupfile_internal+4E1↓j
.text:000000000000A786                 mov     rax, [rsp+0B8h+var_78]
.text:000000000000A78B                 mov     [rsp+0B8h+var_90], 1
.text:000000000000A794                 mov     [rsp+0B8h+var_94], 2
.text:000000000000A79C                 mov     [rsp+0B8h+size], rax
.text:000000000000A7A1                 lea     rax, [r12+4]
.text:000000000000A7A6                 mov     qword ptr [rsp+0B8h+fd], rax
.text:000000000000A7AB                 nop     dword ptr [rax+rax+00h]
.text:000000000000A7B0
.text:000000000000A7B0 loc_A7B0:                               ; CODE XREF: backupfile_internal+152↓j
.text:000000000000A7B0                                         ; backupfile_internal+16A↓j ...
.text:000000000000A7B0                 mov     rdi, r13        ; dirp
.text:000000000000A7B3                 call    _readdir
.text:000000000000A7B8                 test    rax, rax
.text:000000000000A7BB                 jz      loc_A970
.text:000000000000A7C1
.text:000000000000A7C1 loc_A7C1:                               ; CODE XREF: backupfile_internal+2E2↓j
.text:000000000000A7C1                 lea     rbx, [rax+13h]
.text:000000000000A7C5                 mov     rdi, rbx        ; s
.text:000000000000A7C8                 call    _strlen
.text:000000000000A7CD                 cmp     rax, qword ptr [rsp+0B8h+fd]
.text:000000000000A7D2                 jb      short loc_A7B0
.text:000000000000A7D4                 lea     rbp, [r12+2]
.text:000000000000A7D9                 lea     rdi, [r15+r14]  ; s1
.text:000000000000A7DD                 mov     rsi, rbx        ; s2
.text:000000000000A7E0                 mov     rdx, rbp        ; n
.text:000000000000A7E3                 call    _memcmp
.text:000000000000A7E8                 test    eax, eax
.text:000000000000A7EA                 jnz     short loc_A7B0
.text:000000000000A7EC                 add     rbx, rbp
.text:000000000000A7EF                 movzx   eax, byte ptr [rbx]
.text:000000000000A7F2                 lea     edx, [rax-31h]
.text:000000000000A7F5                 cmp     dl, 8
.text:000000000000A7F8                 ja      short loc_A7B0
.text:000000000000A7FA                 cmp     al, 39h ; '9'
.text:000000000000A7FC                 movsx   eax, byte ptr [rbx+1]
.text:000000000000A800                 mov     ebp, 1
.text:000000000000A805                 setz    r8b
.text:000000000000A809                 mov     ecx, eax
.text:000000000000A80B                 sub     eax, 30h ; '0'
.text:000000000000A80E                 cmp     eax, 9
.text:000000000000A811                 ja      short loc_A833
.text:000000000000A813                 nop     dword ptr [rax+rax+00h]
.text:000000000000A818
.text:000000000000A818 loc_A818:                               ; CODE XREF: backupfile_internal+1B1↓j
.text:000000000000A818                 cmp     cl, 39h ; '9'
.text:000000000000A81B                 setz    al
.text:000000000000A81E                 add     rbp, 1
.text:000000000000A822                 and     r8d, eax
.text:000000000000A825                 movsx   eax, byte ptr [rbx+rbp]
.text:000000000000A829                 mov     ecx, eax
.text:000000000000A82B                 sub     eax, 30h ; '0'
.text:000000000000A82E                 cmp     eax, 9
.text:000000000000A831                 jbe     short loc_A818
.text:000000000000A833
.text:000000000000A833 loc_A833:                               ; CODE XREF: backupfile_internal+191↑j
.text:000000000000A833                 cmp     cl, 7Eh ; '~'
.text:000000000000A836                 jnz     loc_A7B0
.text:000000000000A83C                 cmp     byte ptr [rbx+rbp+1], 0
.text:000000000000A841                 jnz     loc_A7B0
.text:000000000000A847                 mov     rdx, [rsp+0B8h+var_90] ; n
.text:000000000000A84C                 cmp     rdx, rbp
.text:000000000000A84F                 jb      short loc_A87C
.text:000000000000A851                 mov     byte ptr [rsp+0B8h+var_60], r8b
.text:000000000000A856                 jnz     loc_A7B0
.text:000000000000A85C                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000A861                 mov     rsi, rbx        ; s2
.text:000000000000A864                 lea     rdi, [r15+rax+2] ; s1
.text:000000000000A869                 call    _memcmp
.text:000000000000A86E                 test    eax, eax
.text:000000000000A870                 movzx   r8d, byte ptr [rsp+0B8h+var_60]
.text:000000000000A876                 jg      loc_A7B0
.text:000000000000A87C
.text:000000000000A87C loc_A87C:                               ; CODE XREF: backupfile_internal+1CF↑j
.text:000000000000A87C                 movzx   esi, r8b
.text:000000000000A880                 movzx   r9d, r8b
.text:000000000000A884                 mov     [rsp+0B8h+var_94], esi
.text:000000000000A888                 mov     rsi, [rsp+0B8h+var_A0]
.text:000000000000A88D                 lea     rax, [r9+rbp]
.text:000000000000A891                 mov     [rsp+0B8h+var_90], rax
.text:000000000000A896                 lea     rcx, [rsi+rax+4]
.text:000000000000A89B                 cmp     rcx, [rsp+0B8h+size]
.text:000000000000A8A0                 jbe     loc_ABD8
.text:000000000000A8A6                 mov     edx, 2
.text:000000000000A8AB                 xor     esi, esi
.text:000000000000A8AD                 mov     rax, rdx
.text:000000000000A8B0                 mul     rcx
.text:000000000000A8B3                 jo      loc_AC83
.text:000000000000A8B9
.text:000000000000A8B9 loc_A8B9:                               ; CODE XREF: backupfile_internal+608↓j
.text:000000000000A8B9                 test    rax, rax
.text:000000000000A8BC                 js      loc_AB70
.text:000000000000A8C2                 test    rsi, rsi
.text:000000000000A8C5                 jnz     loc_AB70
.text:000000000000A8CB                 lea     rax, [rcx+rcx]
.text:000000000000A8CF                 mov     [rsp+0B8h+size], rax
.text:000000000000A8D4
.text:000000000000A8D4 loc_A8D4:                               ; CODE XREF: backupfile_internal+4F5↓j
.text:000000000000A8D4                 mov     rsi, [rsp+0B8h+size] ; size
.text:000000000000A8D9                 mov     rdi, r15        ; ptr
.text:000000000000A8DC                 mov     [rsp+0B8h+var_60], r9
.text:000000000000A8E1                 call    _realloc
.text:000000000000A8E6                 test    rax, rax
.text:000000000000A8E9                 mov     r8, rax
.text:000000000000A8EC                 mov     r9, [rsp+0B8h+var_60]
.text:000000000000A8F1                 jz      loc_AB80
.text:000000000000A8F7
.text:000000000000A8F7 loc_A8F7:                               ; CODE XREF: backupfile_internal+55B↓j
.text:000000000000A8F7                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000A8FC                 lea     rdx, [rbp+2]    ; n
.text:000000000000A900                 mov     [rsp+0B8h+var_60], r8
.text:000000000000A905                 mov     rsi, rbx        ; src
.text:000000000000A908                 add     rax, r8
.text:000000000000A90B                 mov     r8d, 7E2Eh
.text:000000000000A911                 lea     rcx, [rax+r9+2]
.text:000000000000A916                 mov     [rax], r8w
.text:000000000000A91A                 mov     byte ptr [rax+2], 30h ; '0'
.text:000000000000A91E                 mov     rdi, rcx        ; dest
.text:000000000000A921                 call    _memcpy
.text:000000000000A926                 add     rbp, rax
.text:000000000000A929                 mov     r8, [rsp+0B8h+var_60]
.text:000000000000A92E                 movzx   edx, byte ptr [rbp-1]
.text:000000000000A932                 lea     rax, [rbp-1]
.text:000000000000A936                 cmp     dl, 39h ; '9'
.text:000000000000A939                 jnz     short loc_A94F
.text:000000000000A93B                 nop     dword ptr [rax+rax+00h]
.text:000000000000A940
.text:000000000000A940 loc_A940:                               ; CODE XREF: backupfile_internal+2CD↓j
.text:000000000000A940                 mov     byte ptr [rax], 30h ; '0'
.text:000000000000A943                 sub     rax, 1
.text:000000000000A947                 movzx   edx, byte ptr [rax]
.text:000000000000A94A                 cmp     dl, 39h ; '9'
.text:000000000000A94D                 jz      short loc_A940
.text:000000000000A94F
.text:000000000000A94F loc_A94F:                               ; CODE XREF: backupfile_internal+2B9↑j
.text:000000000000A94F                 add     edx, 1
.text:000000000000A952                 mov     rdi, r13        ; dirp
.text:000000000000A955                 mov     r15, r8
.text:000000000000A958                 mov     [rax], dl
.text:000000000000A95A                 call    _readdir
.text:000000000000A95F                 test    rax, rax
.text:000000000000A962                 jnz     loc_A7C1
.text:000000000000A968                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000A970
.text:000000000000A970 loc_A970:                               ; CODE XREF: backupfile_internal+13B↑j
.text:000000000000A970                                         ; backupfile_internal+58D↓j
.text:000000000000A970                 mov     eax, [rsp+0B8h+var_94]
.text:000000000000A974                 cmp     eax, 2
.text:000000000000A977                 jz      loc_AA60
.text:000000000000A97D                 cmp     eax, 3
.text:000000000000A980                 jz      loc_AB80
.text:000000000000A986                 cmp     eax, 1
.text:000000000000A989                 jz      loc_AA90
.text:000000000000A98F
.text:000000000000A98F loc_A98F:                               ; CODE XREF: backupfile_internal+3DA↓j
.text:000000000000A98F                                         ; backupfile_internal+42A↓j ...
.text:000000000000A98F                 cmp     [rsp+0B8h+var_55], 0
.text:000000000000A994                 jz      loc_AC4E
.text:000000000000A99A                 mov     edx, [rsp+0B8h+var_44]
.text:000000000000A99E                 lea     rcx, [r15+r14]
.text:000000000000A9A2                 test    edx, edx
.text:000000000000A9A4                 jns     short loc_A9B9
.text:000000000000A9A6                 mov     [rsp+0B8h+var_44], 0FFFFFF9Ch
.text:000000000000A9AE                 mov     rcx, r15
.text:000000000000A9B1                 mov     edx, 0FFFFFF9Ch
.text:000000000000A9B6                 xor     r14d, r14d
.text:000000000000A9B9
.text:000000000000A9B9 loc_A9B9:                               ; CODE XREF: backupfile_internal+324↑j
.text:000000000000A9B9                 xor     r8d, r8d
.text:000000000000A9BC                 cmp     [rsp+0B8h+var_98], 1
.text:000000000000A9C1                 mov     rsi, [rsp+0B8h+src]
.text:000000000000A9C6                 mov     edi, 0FFFFFF9Ch
.text:000000000000A9CB                 setnz   r8b
.text:000000000000A9CF                 call    renameat2
.text:000000000000A9D4                 test    eax, eax
.text:000000000000A9D6                 jz      loc_AC4E
.text:000000000000A9DC                 call    ___errno_location
.text:000000000000A9E1                 mov     ebp, [rax]
.text:000000000000A9E3                 cmp     ebp, 11h
.text:000000000000A9E6                 jz      loc_A749
.text:000000000000A9EC                 test    r13, r13
.text:000000000000A9EF                 mov     rbx, rax
.text:000000000000A9F2                 jz      short loc_A9FC
.text:000000000000A9F4                 mov     rdi, r13        ; dirp
.text:000000000000A9F7                 call    _closedir
.text:000000000000A9FC
.text:000000000000A9FC loc_A9FC:                               ; CODE XREF: backupfile_internal+372↑j
.text:000000000000A9FC                 mov     rdi, r15        ; ptr
.text:000000000000A9FF                 xor     r15d, r15d
.text:000000000000AA02                 call    free
.text:000000000000AA07                 mov     [rbx], ebp
.text:000000000000AA09                 nop     dword ptr [rax+00000000h]
.text:000000000000AA10
.text:000000000000AA10 loc_AA10:                               ; CODE XREF: backupfile_internal+A5↑j
.text:000000000000AA10                                         ; backupfile_internal+516↓j ...
.text:000000000000AA10                 mov     rsi, [rsp+0B8h+var_40]
.text:000000000000AA15                 xor     rsi, fs:28h
.text:000000000000AA1E                 mov     rax, r15
.text:000000000000AA21                 jnz     loc_AC8D
.text:000000000000AA27                 add     rsp, 88h
.text:000000000000AA2E                 pop     rbx
.text:000000000000AA2F                 pop     rbp
.text:000000000000AA30                 pop     r12
.text:000000000000AA32                 pop     r13
.text:000000000000AA34                 pop     r14
.text:000000000000AA36                 pop     r15
.text:000000000000AA38                 retn
.text:000000000000AA38 ; ---------------------------------------------------------------------------
.text:000000000000AA39                 align 20h
.text:000000000000AA40
.text:000000000000AA40 loc_AA40:                               ; CODE XREF: backupfile_internal+E0↑j
.text:000000000000AA40                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AA45                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:000000000000AA4A                 mov     rsi, cs:simple_backup_suffix ; src
.text:000000000000AA51                 lea     rdi, [r15+rax]  ; dest
.text:000000000000AA55                 call    _memcpy
.text:000000000000AA5A                 jmp     loc_A98F
.text:000000000000AA5A ; ---------------------------------------------------------------------------
.text:000000000000AA5F                 align 20h
.text:000000000000AA60
.text:000000000000AA60 loc_AA60:                               ; CODE XREF: backupfile_internal+2F7↑j
.text:000000000000AA60                 cmp     [rsp+0B8h+var_98], 2
.text:000000000000AA65                 jnz     short loc_AA90
.text:000000000000AA67                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000AA6C                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:000000000000AA71                 mov     rsi, cs:simple_backup_suffix ; src
.text:000000000000AA78                 lea     rdi, [r15+rax]  ; dest
.text:000000000000AA7C                 call    _memcpy
.text:000000000000AA81                 mov     [rsp+0B8h+var_98], 1
.text:000000000000AA89                 nop     dword ptr [rax+00000000h]
.text:000000000000AA90
.text:000000000000AA90 loc_AA90:                               ; CODE XREF: backupfile_internal+309↑j
.text:000000000000AA90                                         ; backupfile_internal+3E5↑j
.text:000000000000AA90                 mov     rdi, r15
.text:000000000000AA93                 call    last_component
.text:000000000000AA98                 mov     rdi, rax
.text:000000000000AA9B                 mov     rbx, rax
.text:000000000000AA9E                 call    base_len
.text:000000000000AAA3                 cmp     rax, 0Eh
.text:000000000000AAA7                 mov     rbp, rax
.text:000000000000AAAA                 jbe     loc_A98F
.text:000000000000AAB0                 cmp     [rsp+0B8h+var_70], 0
.text:000000000000AAB6                 jnz     loc_ABA0
.text:000000000000AABC                 mov     edi, [rsp+0B8h+var_44]
.text:000000000000AAC0                 mov     [rsp+0B8h+fd], edi
.text:000000000000AAC4                 call    ___errno_location
.text:000000000000AAC9                 mov     edi, [rsp+0B8h+fd] ; fd
.text:000000000000AACD                 mov     r12, rax
.text:000000000000AAD0                 test    edi, edi
.text:000000000000AAD2                 js      loc_AC12
.text:000000000000AAD8                 mov     dword ptr [rax], 0
.text:000000000000AADE                 mov     esi, 3          ; name
.text:000000000000AAE3                 call    _fpathconf
.text:000000000000AAE8                 mov     ecx, [r12]
.text:000000000000AAEC                 xor     edx, edx
.text:000000000000AAEE                 test    ecx, ecx
.text:000000000000AAF0                 setz    dl
.text:000000000000AAF3                 sub     rax, rdx
.text:000000000000AAF6
.text:000000000000AAF6 loc_AAF6:                               ; CODE XREF: backupfile_internal+5C9↓j
.text:000000000000AAF6                 test    rax, rax
.text:000000000000AAF9                 mov     [rsp+0B8h+var_70], rax
.text:000000000000AAFE                 jns     loc_ABA0
.text:000000000000AB04                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000AB08                 jnz     loc_AC75
.text:000000000000AB0E                 mov     [rsp+0B8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:000000000000AB17                 jmp     loc_A98F
.text:000000000000AB17 ; ---------------------------------------------------------------------------
.text:000000000000AB1C                 align 20h
.text:000000000000AB20
.text:000000000000AB20 loc_AB20:                               ; CODE XREF: backupfile_internal+F8↑j
.text:000000000000AB20                 mov     rcx, [rsp+0B8h+var_50]
.text:000000000000AB25                 mov     edi, [rsp+0B8h+var_54]
.text:000000000000AB29                 mov     r9d, 2Eh ; '.'
.text:000000000000AB2F                 xor     edx, edx
.text:000000000000AB31                 movzx   ebx, word ptr [rbp+0]
.text:000000000000AB35                 mov     rsi, r15
.text:000000000000AB38                 mov     [rbp+0], r9w
.text:000000000000AB3D                 call    opendirat
.text:000000000000AB42                 test    rax, rax
.text:000000000000AB45                 mov     r13, rax
.text:000000000000AB48                 lea     rdx, [rbp+r12+0]
.text:000000000000AB4D                 jz      loc_ABE0
.text:000000000000AB53                 mov     [rbp+0], bx
.text:000000000000AB57                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000AB5D                 mov     byte ptr [rdx+4], 0
.text:000000000000AB61                 jmp     loc_A786
.text:000000000000AB61 ; ---------------------------------------------------------------------------
.text:000000000000AB66                 align 10h
.text:000000000000AB70
.text:000000000000AB70 loc_AB70:                               ; CODE XREF: backupfile_internal+23C↑j
.text:000000000000AB70                                         ; backupfile_internal+245↑j
.text:000000000000AB70                 mov     [rsp+0B8h+size], rcx
.text:000000000000AB75                 jmp     loc_A8D4
.text:000000000000AB75 ; ---------------------------------------------------------------------------
.text:000000000000AB7A                 align 20h
.text:000000000000AB80
.text:000000000000AB80 loc_AB80:                               ; CODE XREF: backupfile_internal+271↑j
.text:000000000000AB80                                         ; backupfile_internal+300↑j
.text:000000000000AB80                 mov     rdi, r15        ; ptr
.text:000000000000AB83                 xor     r15d, r15d
.text:000000000000AB86                 call    free
.text:000000000000AB8B                 call    ___errno_location
.text:000000000000AB90                 mov     dword ptr [rax], 0Ch
.text:000000000000AB96                 jmp     loc_AA10
.text:000000000000AB96 ; ---------------------------------------------------------------------------
.text:000000000000AB9B                 align 20h
.text:000000000000ABA0
.text:000000000000ABA0 loc_ABA0:                               ; CODE XREF: backupfile_internal+436↑j
.text:000000000000ABA0                                         ; backupfile_internal+47E↑j
.text:000000000000ABA0                 cmp     rbp, [rsp+0B8h+var_70]
.text:000000000000ABA5                 jbe     loc_A98F
.text:000000000000ABAB
.text:000000000000ABAB loc_ABAB:                               ; CODE XREF: backupfile_internal+5FE↓j
.text:000000000000ABAB                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000ABB0                 mov     rsi, [rsp+0B8h+var_70]
.text:000000000000ABB5                 add     rax, r15
.text:000000000000ABB8                 lea     rdx, [rsi-1]
.text:000000000000ABBC                 sub     rax, rbx
.text:000000000000ABBF                 cmp     rax, rsi
.text:000000000000ABC2                 cmovnb  rax, rdx
.text:000000000000ABC6                 mov     byte ptr [rbx+rax], 7Eh ; '~'
.text:000000000000ABCA                 mov     byte ptr [rbx+rax+1], 0
.text:000000000000ABCF                 jmp     loc_A98F
.text:000000000000ABCF ; ---------------------------------------------------------------------------
.text:000000000000ABD4                 align 8
.text:000000000000ABD8
.text:000000000000ABD8 loc_ABD8:                               ; CODE XREF: backupfile_internal+220↑j
.text:000000000000ABD8                 mov     r8, r15
.text:000000000000ABDB                 jmp     loc_A8F7
.text:000000000000ABE0 ; ---------------------------------------------------------------------------
.text:000000000000ABE0
.text:000000000000ABE0 loc_ABE0:                               ; CODE XREF: backupfile_internal+4CD↑j
.text:000000000000ABE0                 mov     qword ptr [rsp+0B8h+fd], rdx
.text:000000000000ABE5                 call    ___errno_location
.text:000000000000ABEA                 cmp     dword ptr [rax], 0Ch
.text:000000000000ABED                 mov     rdx, qword ptr [rsp+0B8h+fd]
.text:000000000000ABF2                 mov     [rbp+0], bx
.text:000000000000ABF6                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000ABFC                 mov     byte ptr [rdx+4], 0
.text:000000000000AC00                 setz    al
.text:000000000000AC03                 movzx   eax, al
.text:000000000000AC06                 add     eax, 2
.text:000000000000AC09                 mov     [rsp+0B8h+var_94], eax
.text:000000000000AC0D                 jmp     loc_A970
.text:000000000000AC12 ; ---------------------------------------------------------------------------
.text:000000000000AC12
.text:000000000000AC12 loc_AC12:                               ; CODE XREF: backupfile_internal+452↑j
.text:000000000000AC12                 movzx   edx, word ptr [rbx]
.text:000000000000AC15                 mov     esi, 2Eh ; '.'
.text:000000000000AC1A                 mov     rdi, r15        ; path
.text:000000000000AC1D                 mov     [rbx], si
.text:000000000000AC20                 mov     dword ptr [rax], 0
.text:000000000000AC26                 mov     esi, 3          ; name
.text:000000000000AC2B                 mov     [rsp+0B8h+fd], edx
.text:000000000000AC2F                 call    _pathconf
.text:000000000000AC34                 mov     edi, [r12]
.text:000000000000AC38                 mov     edx, [rsp+0B8h+fd]
.text:000000000000AC3C                 xor     ecx, ecx
.text:000000000000AC3E                 test    edi, edi
.text:000000000000AC40                 mov     [rbx], dx
.text:000000000000AC43                 setz    cl
.text:000000000000AC46                 sub     rax, rcx
.text:000000000000AC49                 jmp     loc_AAF6
.text:000000000000AC4E ; ---------------------------------------------------------------------------
.text:000000000000AC4E
.text:000000000000AC4E loc_AC4E:                               ; CODE XREF: backupfile_internal+314↑j
.text:000000000000AC4E                                         ; backupfile_internal+356↑j
.text:000000000000AC4E                 test    r13, r13
.text:000000000000AC51                 jz      loc_AA10
.text:000000000000AC57                 mov     rdi, r13        ; dirp
.text:000000000000AC5A                 call    _closedir
.text:000000000000AC5F                 jmp     loc_AA10
.text:000000000000AC64 ; ---------------------------------------------------------------------------
.text:000000000000AC64
.text:000000000000AC64 loc_AC64:                               ; CODE XREF: backupfile_internal+5D↑j
.text:000000000000AC64                 call    set_simple_backup_suffix
.text:000000000000AC69                 mov     rdi, cs:simple_backup_suffix
.text:000000000000AC70                 jmp     loc_A6E3
.text:000000000000AC75 ; ---------------------------------------------------------------------------
.text:000000000000AC75
.text:000000000000AC75 loc_AC75:                               ; CODE XREF: backupfile_internal+488↑j
.text:000000000000AC75                 mov     [rsp+0B8h+var_70], 0Eh
.text:000000000000AC7E                 jmp     loc_ABAB
.text:000000000000AC83 ; ---------------------------------------------------------------------------
.text:000000000000AC83
.text:000000000000AC83 loc_AC83:                               ; CODE XREF: backupfile_internal+233↑j
.text:000000000000AC83                 mov     esi, 1
.text:000000000000AC88                 jmp     loc_A8B9
.text:000000000000AC8D ; ---------------------------------------------------------------------------
.text:000000000000AC8D
.text:000000000000AC8D loc_AC8D:                               ; CODE XREF: backupfile_internal+3A1↑j
.text:000000000000AC8D                 call    ___stack_chk_fail
.text:000000000000AC8D ; } // starts at A680
.text:000000000000AC8D backupfile_internal endp
.text:000000000000AC8D
.text:000000000000AC8D ; ---------------------------------------------------------------------------
.text:000000000000AC92                 align 20h
.text:000000000000ACA0
.text:000000000000ACA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACA0
.text:000000000000ACA0
.text:000000000000ACA0                 public backup_file_rename
.text:000000000000ACA0 backup_file_rename proc near            ; CODE XREF: copy_internal+DDE↑p
.text:000000000000ACA0 ; __unwind {
.text:000000000000ACA0                 mov     ecx, 1
.text:000000000000ACA5                 jmp     backupfile_internal
.text:000000000000ACA5 ; } // starts at ACA0
.text:000000000000ACA5 backup_file_rename endp
.text:000000000000ACA5
.text:000000000000ACA5 ; ---------------------------------------------------------------------------
.text:000000000000ACAA                 align 10h
.text:000000000000ACB0
.text:000000000000ACB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACB0
.text:000000000000ACB0
.text:000000000000ACB0 get_version_part_0 proc near            ; CODE XREF: get_version+A↓j
.text:000000000000ACB0                                         ; xget_version:loc_AD62↓j
.text:000000000000ACB0 ; __unwind {
.text:000000000000ACB0                 sub     rsp, 8
.text:000000000000ACB4                 mov     r9, cs:argmatch_die
.text:000000000000ACBB                 lea     rdx, backup_args
.text:000000000000ACC2                 lea     rcx, backup_types
.text:000000000000ACC9                 mov     r8d, 4
.text:000000000000ACCF                 call    __xargmatch_internal
.text:000000000000ACD4                 lea     rdx, backup_types
.text:000000000000ACDB                 mov     eax, [rdx+rax*4]
.text:000000000000ACDE                 add     rsp, 8
.text:000000000000ACE2                 retn
.text:000000000000ACE2 ; } // starts at ACB0
.text:000000000000ACE2 get_version_part_0 endp
.text:000000000000ACE2
.text:000000000000ACE2 ; ---------------------------------------------------------------------------
.text:000000000000ACE3                 align 10h
.text:000000000000ACF0
.text:000000000000ACF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACF0
.text:000000000000ACF0
.text:000000000000ACF0                 public find_backup_file_name
.text:000000000000ACF0 find_backup_file_name proc near
.text:000000000000ACF0 ; __unwind {
.text:000000000000ACF0                 sub     rsp, 8
.text:000000000000ACF4                 xor     ecx, ecx
.text:000000000000ACF6                 call    backupfile_internal
.text:000000000000ACFB                 test    rax, rax
.text:000000000000ACFE                 jz      short loc_AD05
.text:000000000000AD00                 add     rsp, 8
.text:000000000000AD04                 retn
.text:000000000000AD05 ; ---------------------------------------------------------------------------
.text:000000000000AD05
.text:000000000000AD05 loc_AD05:                               ; CODE XREF: find_backup_file_name+E↑j
.text:000000000000AD05                 call    xalloc_die
.text:000000000000AD05 ; } // starts at ACF0
.text:000000000000AD05 find_backup_file_name endp
.text:000000000000AD05
.text:000000000000AD05 ; ---------------------------------------------------------------------------
.text:000000000000AD0A                 align 10h
.text:000000000000AD10
.text:000000000000AD10 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD10
.text:000000000000AD10
.text:000000000000AD10                 public get_version
.text:000000000000AD10 get_version     proc near
.text:000000000000AD10 ; __unwind {
.text:000000000000AD10                 test    rsi, rsi
.text:000000000000AD13                 jz      short loc_AD20
.text:000000000000AD15                 cmp     byte ptr [rsi], 0
.text:000000000000AD18                 jz      short loc_AD20
.text:000000000000AD1A                 jmp     short get_version_part_0
.text:000000000000AD1A ; ---------------------------------------------------------------------------
.text:000000000000AD1C                 align 20h
.text:000000000000AD20
.text:000000000000AD20 loc_AD20:                               ; CODE XREF: get_version+3↑j
.text:000000000000AD20                                         ; get_version+8↑j
.text:000000000000AD20                 mov     eax, 2
.text:000000000000AD25                 retn
.text:000000000000AD25 ; } // starts at AD10
.text:000000000000AD25 get_version     endp
.text:000000000000AD25
.text:000000000000AD25 ; ---------------------------------------------------------------------------
.text:000000000000AD26                 align 10h
.text:000000000000AD30
.text:000000000000AD30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD30
.text:000000000000AD30
.text:000000000000AD30                 public xget_version
.text:000000000000AD30 xget_version    proc near               ; CODE XREF: main+3CB↑p
.text:000000000000AD30 ; __unwind {
.text:000000000000AD30                 test    rsi, rsi
.text:000000000000AD33                 jz      short loc_AD3A
.text:000000000000AD35                 cmp     byte ptr [rsi], 0
.text:000000000000AD38                 jnz     short loc_AD62
.text:000000000000AD3A
.text:000000000000AD3A loc_AD3A:                               ; CODE XREF: xget_version+3↑j
.text:000000000000AD3A                 lea     rdi, aVersionControl ; "VERSION_CONTROL"
.text:000000000000AD41                 sub     rsp, 8
.text:000000000000AD45                 call    _getenv
.text:000000000000AD4A                 test    rax, rax
.text:000000000000AD4D                 jz      short loc_AD70
.text:000000000000AD4F                 cmp     byte ptr [rax], 0
.text:000000000000AD52                 jz      short loc_AD70
.text:000000000000AD54                 lea     rdi, unk_1689D
.text:000000000000AD5B                 mov     rsi, rax
.text:000000000000AD5E                 add     rsp, 8
.text:000000000000AD62
.text:000000000000AD62 loc_AD62:                               ; CODE XREF: xget_version+8↑j
.text:000000000000AD62                 jmp     get_version_part_0
.text:000000000000AD62 ; ---------------------------------------------------------------------------
.text:000000000000AD67                 align 10h
.text:000000000000AD70
.text:000000000000AD70 loc_AD70:                               ; CODE XREF: xget_version+1D↑j
.text:000000000000AD70                                         ; xget_version+22↑j
.text:000000000000AD70                 mov     eax, 2
.text:000000000000AD75                 add     rsp, 8
.text:000000000000AD79                 retn
.text:000000000000AD79 ; } // starts at AD30
.text:000000000000AD79 xget_version    endp
.text:000000000000AD79
.text:000000000000AD79 ; ---------------------------------------------------------------------------
.text:000000000000AD7A                 align 20h
.text:000000000000AD80
.text:000000000000AD80 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD80
.text:000000000000AD80
.text:000000000000AD80                 public buffer_lcm
.text:000000000000AD80 buffer_lcm      proc near               ; CODE XREF: copy_internal+2FE0↑p
.text:000000000000AD80 ; __unwind {
.text:000000000000AD80                 test    rdi, rdi
.text:000000000000AD83                 mov     rcx, rdx
.text:000000000000AD86                 jnz     short loc_ADA8
.text:000000000000AD88                 test    rsi, rsi
.text:000000000000AD8B                 mov     edi, 2000h
.text:000000000000AD90                 cmovnz  rdi, rsi
.text:000000000000AD94
.text:000000000000AD94 loc_AD94:                               ; CODE XREF: buffer_lcm+2B↓j
.text:000000000000AD94                                         ; buffer_lcm+52↓j ...
.text:000000000000AD94                 cmp     rdi, rcx
.text:000000000000AD97                 cmovbe  rcx, rdi
.text:000000000000AD9B                 mov     r8, rcx
.text:000000000000AD9E
.text:000000000000AD9E loc_AD9E:                               ; CODE XREF: buffer_lcm+61↓j
.text:000000000000AD9E                 mov     rax, r8
.text:000000000000ADA1                 retn
.text:000000000000ADA1 ; ---------------------------------------------------------------------------
.text:000000000000ADA2                 align 8
.text:000000000000ADA8
.text:000000000000ADA8 loc_ADA8:                               ; CODE XREF: buffer_lcm+6↑j
.text:000000000000ADA8                 test    rsi, rsi
.text:000000000000ADAB                 jz      short loc_AD94
.text:000000000000ADAD                 mov     r8, rsi
.text:000000000000ADB0                 mov     rax, rdi
.text:000000000000ADB3
.text:000000000000ADB3 loc_ADB3:                               ; CODE XREF: buffer_lcm+6E↓j
.text:000000000000ADB3                 xor     edx, edx
.text:000000000000ADB5                 div     r8
.text:000000000000ADB8                 test    rdx, rdx
.text:000000000000ADBB                 jnz     short loc_ADE8
.text:000000000000ADBD                 xor     edx, edx
.text:000000000000ADBF                 mov     rax, rdi
.text:000000000000ADC2                 div     r8
.text:000000000000ADC5                 mov     r8, rsi
.text:000000000000ADC8                 imul    r8, rax
.text:000000000000ADCC                 mov     r9, rax
.text:000000000000ADCF                 cmp     r8, rcx
.text:000000000000ADD2                 ja      short loc_AD94
.text:000000000000ADD4                 xor     edx, edx
.text:000000000000ADD6                 mov     rax, r8
.text:000000000000ADD9                 div     rsi
.text:000000000000ADDC                 cmp     rax, r9
.text:000000000000ADDF                 jnz     short loc_AD94
.text:000000000000ADE1                 jmp     short loc_AD9E
.text:000000000000ADE1 ; ---------------------------------------------------------------------------
.text:000000000000ADE3                 align 8
.text:000000000000ADE8
.text:000000000000ADE8 loc_ADE8:                               ; CODE XREF: buffer_lcm+3B↑j
.text:000000000000ADE8                 mov     rax, r8
.text:000000000000ADEB                 mov     r8, rdx
.text:000000000000ADEE                 jmp     short loc_ADB3
.text:000000000000ADEE ; } // starts at AD80
.text:000000000000ADEE buffer_lcm      endp
.text:000000000000ADEE
.text:000000000000ADF0
.text:000000000000ADF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ADF0
.text:000000000000ADF0
.text:000000000000ADF0                 public close_stdin_set_file_name
.text:000000000000ADF0 close_stdin_set_file_name proc near
.text:000000000000ADF0 ; __unwind {
.text:000000000000ADF0                 mov     cs:file_name, rdi
.text:000000000000ADF7                 retn
.text:000000000000ADF7 ; } // starts at ADF0
.text:000000000000ADF7 close_stdin_set_file_name endp
.text:000000000000ADF7
.text:000000000000ADF7 ; ---------------------------------------------------------------------------
.text:000000000000ADF8                 align 20h
.text:000000000000AE00
.text:000000000000AE00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE00
.text:000000000000AE00
.text:000000000000AE00                 public close_stdin
.text:000000000000AE00 close_stdin     proc near               ; DATA XREF: main+66↑o
.text:000000000000AE00 ; __unwind {
.text:000000000000AE00                 push    r12
.text:000000000000AE02                 push    rbp
.text:000000000000AE03                 push    rbx
.text:000000000000AE04                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:000000000000AE0B                 mov     rdi, rbx
.text:000000000000AE0E                 call    freadahead
.text:000000000000AE13                 test    rax, rax
.text:000000000000AE16                 jnz     loc_AEB8
.text:000000000000AE1C                 mov     rdi, rbx        ; stream
.text:000000000000AE1F                 call    close_stream
.text:000000000000AE24                 test    eax, eax
.text:000000000000AE26                 jnz     short loc_AE58
.text:000000000000AE28                 pop     rbx
.text:000000000000AE29                 pop     rbp
.text:000000000000AE2A                 pop     r12
.text:000000000000AE2C                 jmp     close_stdout
.text:000000000000AE2C ; ---------------------------------------------------------------------------
.text:000000000000AE31                 align 8
.text:000000000000AE38
.text:000000000000AE38 loc_AE38:                               ; CODE XREF: close_stdin+D0↓j
.text:000000000000AE38                 call    rpl_fflush
.text:000000000000AE3D                 test    eax, eax
.text:000000000000AE3F                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000AE46                 jz      loc_AED6
.text:000000000000AE4C                 call    close_stream
.text:000000000000AE51                 nop     dword ptr [rax+00000000h]
.text:000000000000AE58
.text:000000000000AE58 loc_AE58:                               ; CODE XREF: close_stdin+26↑j
.text:000000000000AE58                                         ; close_stdin+DD↓j
.text:000000000000AE58                 lea     rsi, aErrorClosingFi ; "error closing file"
.text:000000000000AE5F                 xor     edi, edi        ; domainname
.text:000000000000AE61                 mov     edx, 5          ; category
.text:000000000000AE66                 call    _dcgettext
.text:000000000000AE6B                 mov     rbx, cs:file_name
.text:000000000000AE72                 mov     r12, rax
.text:000000000000AE75                 call    ___errno_location
.text:000000000000AE7A                 mov     rbp, rax
.text:000000000000AE7D                 test    rbx, rbx
.text:000000000000AE80                 jz      short loc_AEF0
.text:000000000000AE82                 mov     rdi, rbx
.text:000000000000AE85                 call    quotearg_colon
.text:000000000000AE8A                 mov     esi, [rbp+0]    ; errnum
.text:000000000000AE8D                 lea     rdx, format     ; "%s: %s"
.text:000000000000AE94                 mov     rcx, rax
.text:000000000000AE97                 mov     r8, r12
.text:000000000000AE9A                 xor     edi, edi        ; status
.text:000000000000AE9C                 xor     eax, eax
.text:000000000000AE9E                 call    _error
.text:000000000000AEA3
.text:000000000000AEA3 loc_AEA3:                               ; CODE XREF: close_stdin+105↓j
.text:000000000000AEA3                 call    close_stdout
.text:000000000000AEA8                 mov     edi, cs:exit_failure ; status
.text:000000000000AEAE                 call    __exit
.text:000000000000AEAE ; ---------------------------------------------------------------------------
.text:000000000000AEB3                 align 8
.text:000000000000AEB8
.text:000000000000AEB8 loc_AEB8:                               ; CODE XREF: close_stdin+16↑j
.text:000000000000AEB8                 xor     esi, esi
.text:000000000000AEBA                 mov     rdi, rbx
.text:000000000000AEBD                 mov     edx, 1
.text:000000000000AEC2                 call    rpl_fseeko
.text:000000000000AEC7                 test    eax, eax
.text:000000000000AEC9                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:000000000000AED0                 jz      loc_AE38
.text:000000000000AED6
.text:000000000000AED6 loc_AED6:                               ; CODE XREF: close_stdin+46↑j
.text:000000000000AED6                 call    close_stream
.text:000000000000AEDB                 test    eax, eax
.text:000000000000AEDD                 jnz     loc_AE58
.text:000000000000AEE3                 pop     rbx
.text:000000000000AEE4                 pop     rbp
.text:000000000000AEE5                 pop     r12
.text:000000000000AEE7                 jmp     close_stdout
.text:000000000000AEE7 ; ---------------------------------------------------------------------------
.text:000000000000AEEC                 align 10h
.text:000000000000AEF0
.text:000000000000AEF0 loc_AEF0:                               ; CODE XREF: close_stdin+80↑j
.text:000000000000AEF0                 mov     esi, [rax]      ; errnum
.text:000000000000AEF2                 lea     rdx, aS_0+2     ; format
.text:000000000000AEF9                 mov     rcx, r12
.text:000000000000AEFC                 xor     edi, edi        ; status
.text:000000000000AEFE                 xor     eax, eax
.text:000000000000AF00                 call    _error
.text:000000000000AF05                 jmp     short loc_AEA3
.text:000000000000AF05 ; } // starts at AE00
.text:000000000000AF05 close_stdin     endp
.text:000000000000AF05
.text:000000000000AF05 ; ---------------------------------------------------------------------------
.text:000000000000AF07                 align 10h
.text:000000000000AF10
.text:000000000000AF10 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF10
.text:000000000000AF10
.text:000000000000AF10                 public close_stdout_set_file_name
.text:000000000000AF10 close_stdout_set_file_name proc near
.text:000000000000AF10 ; __unwind {
.text:000000000000AF10                 mov     cs:file_name_0, rdi
.text:000000000000AF17                 retn
.text:000000000000AF17 ; } // starts at AF10
.text:000000000000AF17 close_stdout_set_file_name endp
.text:000000000000AF17
.text:000000000000AF17 ; ---------------------------------------------------------------------------
.text:000000000000AF18                 align 20h
.text:000000000000AF20
.text:000000000000AF20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF20
.text:000000000000AF20
.text:000000000000AF20                 public close_stdout_set_ignore_EPIPE
.text:000000000000AF20 close_stdout_set_ignore_EPIPE proc near
.text:000000000000AF20 ; __unwind {
.text:000000000000AF20                 mov     cs:ignore_EPIPE, dil
.text:000000000000AF27                 retn
.text:000000000000AF27 ; } // starts at AF20
.text:000000000000AF27 close_stdout_set_ignore_EPIPE endp
.text:000000000000AF27
.text:000000000000AF27 ; ---------------------------------------------------------------------------
.text:000000000000AF28                 align 10h
.text:000000000000AF30
.text:000000000000AF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF30
.text:000000000000AF30 ; Attributes: info_from_lumina
.text:000000000000AF30
.text:000000000000AF30 ; void __cdecl close_stdout()
.text:000000000000AF30                 public close_stdout
.text:000000000000AF30 close_stdout    proc near               ; CODE XREF: close_stdin+2C↑j
.text:000000000000AF30                                         ; close_stdin:loc_AEA3↑p ...
.text:000000000000AF30 ; __unwind {
.text:000000000000AF30                 push    rbp
.text:000000000000AF31                 push    rbx
.text:000000000000AF32                 sub     rsp, 8
.text:000000000000AF36                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000AF3D                 call    close_stream
.text:000000000000AF42                 test    eax, eax
.text:000000000000AF44                 jz      short loc_AF5C
.text:000000000000AF46                 call    ___errno_location
.text:000000000000AF4B                 cmp     cs:ignore_EPIPE, 0
.text:000000000000AF52                 mov     rbx, rax
.text:000000000000AF55                 jz      short loc_AF73
.text:000000000000AF57                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000AF5A                 jnz     short loc_AF73
.text:000000000000AF5C
.text:000000000000AF5C loc_AF5C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000AF5C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:000000000000AF63                 call    close_stream
.text:000000000000AF68                 test    eax, eax
.text:000000000000AF6A                 jnz     short loc_AFB2
.text:000000000000AF6C                 add     rsp, 8
.text:000000000000AF70                 pop     rbx
.text:000000000000AF71                 pop     rbp
.text:000000000000AF72                 retn
.text:000000000000AF73 ; ---------------------------------------------------------------------------
.text:000000000000AF73
.text:000000000000AF73 loc_AF73:                               ; CODE XREF: close_stdout+25↑j
.text:000000000000AF73                                         ; close_stdout+2A↑j
.text:000000000000AF73                 lea     rsi, aWriteError ; "write error"
.text:000000000000AF7A                 xor     edi, edi        ; domainname
.text:000000000000AF7C                 mov     edx, 5          ; category
.text:000000000000AF81                 call    _dcgettext
.text:000000000000AF86                 mov     rdi, cs:file_name_0
.text:000000000000AF8D                 mov     rbp, rax
.text:000000000000AF90                 test    rdi, rdi
.text:000000000000AF93                 jz      short loc_AFBD
.text:000000000000AF95                 call    quotearg_colon
.text:000000000000AF9A                 mov     esi, [rbx]      ; errnum
.text:000000000000AF9C                 lea     rdx, format     ; "%s: %s"
.text:000000000000AFA3                 mov     rcx, rax
.text:000000000000AFA6                 mov     r8, rbp
.text:000000000000AFA9                 xor     edi, edi        ; status
.text:000000000000AFAB                 xor     eax, eax
.text:000000000000AFAD                 call    _error
.text:000000000000AFB2
.text:000000000000AFB2 loc_AFB2:                               ; CODE XREF: close_stdout+3A↑j
.text:000000000000AFB2                                         ; close_stdout+A2↓j
.text:000000000000AFB2                 mov     edi, cs:exit_failure ; status
.text:000000000000AFB8                 call    __exit
.text:000000000000AFBD ; ---------------------------------------------------------------------------
.text:000000000000AFBD
.text:000000000000AFBD loc_AFBD:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000AFBD                 mov     esi, [rbx]      ; errnum
.text:000000000000AFBF                 lea     rdx, aS_0+2     ; format
.text:000000000000AFC6                 mov     rcx, rax
.text:000000000000AFC9                 xor     edi, edi        ; status
.text:000000000000AFCB                 xor     eax, eax
.text:000000000000AFCD                 call    _error
.text:000000000000AFD2                 jmp     short loc_AFB2
.text:000000000000AFD2 ; } // starts at AF30
.text:000000000000AFD2 close_stdout    endp
.text:000000000000AFD2
.text:000000000000AFD2 ; ---------------------------------------------------------------------------
.text:000000000000AFD4                 align 20h
.text:000000000000AFE0
.text:000000000000AFE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFE0
.text:000000000000AFE0
.text:000000000000AFE0                 public dir_name
.text:000000000000AFE0 dir_name        proc near               ; CODE XREF: copy_internal+ED3↑p
.text:000000000000AFE0                                         ; same_nameat_part_0+2B↓p ...
.text:000000000000AFE0 ; __unwind {
.text:000000000000AFE0                 sub     rsp, 8
.text:000000000000AFE4                 call    mdir_name
.text:000000000000AFE9                 test    rax, rax
.text:000000000000AFEC                 jz      short loc_AFF3
.text:000000000000AFEE                 add     rsp, 8
.text:000000000000AFF2                 retn
.text:000000000000AFF3 ; ---------------------------------------------------------------------------
.text:000000000000AFF3
.text:000000000000AFF3 loc_AFF3:                               ; CODE XREF: dir_name+C↑j
.text:000000000000AFF3                 call    xalloc_die
.text:000000000000AFF3 ; } // starts at AFE0
.text:000000000000AFF3 dir_name        endp
.text:000000000000AFF3
.text:000000000000AFF3 ; ---------------------------------------------------------------------------
.text:000000000000AFF8                 align 20h
.text:000000000000B000
.text:000000000000B000 ; =============== S U B R O U T I N E =======================================
.text:000000000000B000
.text:000000000000B000 ; Attributes: info_from_lumina
.text:000000000000B000
.text:000000000000B000 ; size_t __fastcall dir_len(const char *file)
.text:000000000000B000                 public dir_len
.text:000000000000B000 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:000000000000B000 ; __unwind {
.text:000000000000B000                 push    rbp
.text:000000000000B001                 push    rbx
.text:000000000000B002                 xor     ebp, ebp
.text:000000000000B004                 mov     rbx, rdi
.text:000000000000B007                 sub     rsp, 8
.text:000000000000B00B                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:000000000000B00E                 setz    bpl
.text:000000000000B012                 call    last_component
.text:000000000000B017                 mov     rcx, rax
.text:000000000000B01A                 sub     rcx, rbx
.text:000000000000B01D                 cmp     rcx, rbp
.text:000000000000B020                 jbe     short loc_B050
.text:000000000000B022                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:000000000000B026                 lea     rdx, [rcx-1]
.text:000000000000B02A                 jz      short loc_B03E
.text:000000000000B02C                 jmp     short loc_B050
.text:000000000000B02C ; ---------------------------------------------------------------------------
.text:000000000000B02E                 align 10h
.text:000000000000B030
.text:000000000000B030 loc_B030:                               ; CODE XREF: dir_len+41↓j
.text:000000000000B030                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000B035                 lea     rax, [rdx-1]
.text:000000000000B039                 jnz     short loc_B043
.text:000000000000B03B                 mov     rdx, rax
.text:000000000000B03E
.text:000000000000B03E loc_B03E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000B03E                 cmp     rbp, rdx
.text:000000000000B041                 jnz     short loc_B030
.text:000000000000B043
.text:000000000000B043 loc_B043:                               ; CODE XREF: dir_len+39↑j
.text:000000000000B043                 add     rsp, 8
.text:000000000000B047                 mov     rax, rdx
.text:000000000000B04A                 pop     rbx
.text:000000000000B04B                 pop     rbp
.text:000000000000B04C                 retn
.text:000000000000B04C ; ---------------------------------------------------------------------------
.text:000000000000B04D                 align 10h
.text:000000000000B050
.text:000000000000B050 loc_B050:                               ; CODE XREF: dir_len+20↑j
.text:000000000000B050                                         ; dir_len+2C↑j
.text:000000000000B050                 add     rsp, 8
.text:000000000000B054                 mov     rdx, rcx
.text:000000000000B057                 mov     rax, rdx
.text:000000000000B05A                 pop     rbx
.text:000000000000B05B                 pop     rbp
.text:000000000000B05C                 retn
.text:000000000000B05C ; } // starts at B000
.text:000000000000B05C dir_len         endp
.text:000000000000B05C
.text:000000000000B05C ; ---------------------------------------------------------------------------
.text:000000000000B05D                 align 20h
.text:000000000000B060
.text:000000000000B060 ; =============== S U B R O U T I N E =======================================
.text:000000000000B060
.text:000000000000B060 ; Attributes: info_from_lumina
.text:000000000000B060
.text:000000000000B060 ; char *__fastcall mdir_name(const char *file)
.text:000000000000B060                 public mdir_name
.text:000000000000B060 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:000000000000B060 ; __unwind {
.text:000000000000B060                 push    rbp
.text:000000000000B061                 push    rbx
.text:000000000000B062                 mov     rbp, rdi
.text:000000000000B065                 sub     rsp, 8
.text:000000000000B069                 call    dir_len
.text:000000000000B06E                 test    rax, rax
.text:000000000000B071                 mov     rbx, rax
.text:000000000000B074                 setz    al
.text:000000000000B077                 movzx   eax, al
.text:000000000000B07A                 lea     rdi, [rbx+rax+1] ; size
.text:000000000000B07F                 call    _malloc
.text:000000000000B084                 test    rax, rax
.text:000000000000B087                 mov     rcx, rax
.text:000000000000B08A                 jz      short loc_B0A6
.text:000000000000B08C                 mov     rdx, rbx        ; n
.text:000000000000B08F                 mov     rsi, rbp        ; src
.text:000000000000B092                 mov     rdi, rax        ; dest
.text:000000000000B095                 call    _memcpy
.text:000000000000B09A                 test    rbx, rbx
.text:000000000000B09D                 mov     rcx, rax
.text:000000000000B0A0                 jz      short loc_B0B0
.text:000000000000B0A2
.text:000000000000B0A2 loc_B0A2:                               ; CODE XREF: mdir_name+58↓j
.text:000000000000B0A2                 mov     byte ptr [rcx+rbx], 0
.text:000000000000B0A6
.text:000000000000B0A6 loc_B0A6:                               ; CODE XREF: mdir_name+2A↑j
.text:000000000000B0A6                 add     rsp, 8
.text:000000000000B0AA                 mov     rax, rcx
.text:000000000000B0AD                 pop     rbx
.text:000000000000B0AE                 pop     rbp
.text:000000000000B0AF                 retn
.text:000000000000B0B0 ; ---------------------------------------------------------------------------
.text:000000000000B0B0
.text:000000000000B0B0 loc_B0B0:                               ; CODE XREF: mdir_name+40↑j
.text:000000000000B0B0                 mov     byte ptr [rax], 2Eh ; '.'
.text:000000000000B0B3                 mov     ebx, 1
.text:000000000000B0B8                 jmp     short loc_B0A2
.text:000000000000B0B8 ; } // starts at B060
.text:000000000000B0B8 mdir_name       endp
.text:000000000000B0B8
.text:000000000000B0B8 ; ---------------------------------------------------------------------------
.text:000000000000B0BA                 align 20h
.text:000000000000B0C0
.text:000000000000B0C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B0C0
.text:000000000000B0C0 ; Attributes: info_from_lumina
.text:000000000000B0C0
.text:000000000000B0C0 ; char *__fastcall last_component(const char *name)
.text:000000000000B0C0                 public last_component
.text:000000000000B0C0 last_component  proc near               ; CODE XREF: movefile+3B↑p
.text:000000000000B0C0                                         ; rm+2F6↑p ...
.text:000000000000B0C0 ; __unwind {
.text:000000000000B0C0                 movzx   edx, byte ptr [rdi]
.text:000000000000B0C3                 mov     rax, rdi
.text:000000000000B0C6                 cmp     dl, 2Fh ; '/'
.text:000000000000B0C9                 jnz     short loc_B0DC
.text:000000000000B0CB                 nop     dword ptr [rax+rax+00h]
.text:000000000000B0D0
.text:000000000000B0D0 loc_B0D0:                               ; CODE XREF: last_component+1A↓j
.text:000000000000B0D0                 add     rax, 1
.text:000000000000B0D4                 movzx   edx, byte ptr [rax]
.text:000000000000B0D7                 cmp     dl, 2Fh ; '/'
.text:000000000000B0DA                 jz      short loc_B0D0
.text:000000000000B0DC
.text:000000000000B0DC loc_B0DC:                               ; CODE XREF: last_component+9↑j
.text:000000000000B0DC                 test    dl, dl
.text:000000000000B0DE                 jz      short locret_B11A
.text:000000000000B0E0                 mov     rcx, rax
.text:000000000000B0E3                 xor     esi, esi
.text:000000000000B0E5                 jmp     short loc_B105
.text:000000000000B0E5 ; ---------------------------------------------------------------------------
.text:000000000000B0E7                 align 10h
.text:000000000000B0F0
.text:000000000000B0F0 loc_B0F0:                               ; CODE XREF: last_component+48↓j
.text:000000000000B0F0                 test    sil, sil
.text:000000000000B0F3                 jz      short loc_B0FA
.text:000000000000B0F5                 mov     rax, rcx
.text:000000000000B0F8                 xor     esi, esi
.text:000000000000B0FA
.text:000000000000B0FA loc_B0FA:                               ; CODE XREF: last_component+33↑j
.text:000000000000B0FA                 add     rcx, 1
.text:000000000000B0FE                 movzx   edx, byte ptr [rcx]
.text:000000000000B101                 test    dl, dl
.text:000000000000B103                 jz      short locret_B11A
.text:000000000000B105
.text:000000000000B105 loc_B105:                               ; CODE XREF: last_component+25↑j
.text:000000000000B105                                         ; last_component+58↓j
.text:000000000000B105                 cmp     dl, 2Fh ; '/'
.text:000000000000B108                 jnz     short loc_B0F0
.text:000000000000B10A                 add     rcx, 1
.text:000000000000B10E                 movzx   edx, byte ptr [rcx]
.text:000000000000B111                 mov     esi, 1
.text:000000000000B116                 test    dl, dl
.text:000000000000B118                 jnz     short loc_B105
.text:000000000000B11A
.text:000000000000B11A locret_B11A:                            ; CODE XREF: last_component+1E↑j
.text:000000000000B11A                                         ; last_component+43↑j
.text:000000000000B11A                 rep retn
.text:000000000000B11A ; } // starts at B0C0
.text:000000000000B11A last_component  endp
.text:000000000000B11A
.text:000000000000B11A ; ---------------------------------------------------------------------------
.text:000000000000B11C                 align 20h
.text:000000000000B120
.text:000000000000B120 ; =============== S U B R O U T I N E =======================================
.text:000000000000B120
.text:000000000000B120 ; Attributes: info_from_lumina
.text:000000000000B120
.text:000000000000B120 ; size_t __fastcall base_len(const char *name)
.text:000000000000B120                 public base_len
.text:000000000000B120 base_len        proc near               ; CODE XREF: backupfile_internal+ED↑p
.text:000000000000B120                                         ; backupfile_internal+41E↑p ...
.text:000000000000B120 ; __unwind {
.text:000000000000B120                 push    rbx
.text:000000000000B121                 mov     rbx, rdi
.text:000000000000B124                 call    _strlen
.text:000000000000B129                 cmp     rax, 1
.text:000000000000B12D                 jbe     short loc_B13A
.text:000000000000B12F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:000000000000B134                 lea     rdx, [rax-1]
.text:000000000000B138                 jz      short loc_B148
.text:000000000000B13A
.text:000000000000B13A loc_B13A:                               ; CODE XREF: base_len+D↑j
.text:000000000000B13A                 pop     rbx
.text:000000000000B13B                 retn
.text:000000000000B13B ; ---------------------------------------------------------------------------
.text:000000000000B13C                 align 20h
.text:000000000000B140
.text:000000000000B140 loc_B140:                               ; CODE XREF: base_len+37↓j
.text:000000000000B140                 mov     rdx, rax
.text:000000000000B143                 nop     dword ptr [rax+rax+00h]
.text:000000000000B148
.text:000000000000B148 loc_B148:                               ; CODE XREF: base_len+18↑j
.text:000000000000B148                 cmp     rdx, 1
.text:000000000000B14C                 jz      short loc_B160
.text:000000000000B14E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000B153                 lea     rax, [rdx-1]
.text:000000000000B157                 jz      short loc_B140
.text:000000000000B159                 mov     rax, rdx
.text:000000000000B15C                 pop     rbx
.text:000000000000B15D                 retn
.text:000000000000B15D ; ---------------------------------------------------------------------------
.text:000000000000B15E                 align 20h
.text:000000000000B160
.text:000000000000B160 loc_B160:                               ; CODE XREF: base_len+2C↑j
.text:000000000000B160                 mov     eax, 1
.text:000000000000B165                 pop     rbx
.text:000000000000B166                 retn
.text:000000000000B166 ; } // starts at B120
.text:000000000000B166 base_len        endp
.text:000000000000B166
.text:000000000000B166 ; ---------------------------------------------------------------------------
.text:000000000000B167                 align 10h
.text:000000000000B170
.text:000000000000B170 ; =============== S U B R O U T I N E =======================================
.text:000000000000B170
.text:000000000000B170
.text:000000000000B170                 public strip_trailing_slashes
.text:000000000000B170 strip_trailing_slashes proc near        ; CODE XREF: movefile+53↑p
.text:000000000000B170                                         ; movefile+84↑p
.text:000000000000B170 ; __unwind {
.text:000000000000B170                 push    rbp
.text:000000000000B171                 push    rbx
.text:000000000000B172                 mov     rbp, rdi
.text:000000000000B175                 sub     rsp, 8
.text:000000000000B179                 call    last_component
.text:000000000000B17E                 cmp     byte ptr [rax], 0
.text:000000000000B181                 mov     rbx, rax
.text:000000000000B184                 cmovz   rbx, rbp
.text:000000000000B188                 mov     rdi, rbx
.text:000000000000B18B                 call    base_len
.text:000000000000B190                 add     rbx, rax
.text:000000000000B193                 cmp     byte ptr [rbx], 0
.text:000000000000B196                 mov     byte ptr [rbx], 0
.text:000000000000B199                 setnz   al
.text:000000000000B19C                 add     rsp, 8
.text:000000000000B1A0                 pop     rbx
.text:000000000000B1A1                 pop     rbp
.text:000000000000B1A2                 retn
.text:000000000000B1A2 ; } // starts at B170
.text:000000000000B1A2 strip_trailing_slashes endp
.text:000000000000B1A2
.text:000000000000B1A2 ; ---------------------------------------------------------------------------
.text:000000000000B1A3                 align 10h
.text:000000000000B1B0
.text:000000000000B1B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1B0
.text:000000000000B1B0
.text:000000000000B1B0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:000000000000B1B0                 public fdadvise
.text:000000000000B1B0 fdadvise        proc near               ; CODE XREF: copy_internal+2F57↑p
.text:000000000000B1B0 ; __unwind {
.text:000000000000B1B0                 jmp     _posix_fadvise
.text:000000000000B1B0 ; } // starts at B1B0
.text:000000000000B1B0 fdadvise        endp
.text:000000000000B1B0
.text:000000000000B1B0 ; ---------------------------------------------------------------------------
.text:000000000000B1B5                 align 20h
.text:000000000000B1C0
.text:000000000000B1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1C0
.text:000000000000B1C0
.text:000000000000B1C0                 public fadvise
.text:000000000000B1C0 fadvise         proc near
.text:000000000000B1C0 ; __unwind {
.text:000000000000B1C0                 test    rdi, rdi
.text:000000000000B1C3                 jz      short locret_B1E0
.text:000000000000B1C5                 push    rbx
.text:000000000000B1C6                 mov     ebx, esi
.text:000000000000B1C8                 call    _fileno
.text:000000000000B1CD                 mov     ecx, ebx        ; advise
.text:000000000000B1CF                 xor     edx, edx        ; len
.text:000000000000B1D1                 xor     esi, esi        ; offset
.text:000000000000B1D3                 pop     rbx
.text:000000000000B1D4                 mov     edi, eax        ; fd
.text:000000000000B1D6                 jmp     _posix_fadvise
.text:000000000000B1D6 ; ---------------------------------------------------------------------------
.text:000000000000B1DB                 align 20h
.text:000000000000B1E0
.text:000000000000B1E0 locret_B1E0:                            ; CODE XREF: fadvise+3↑j
.text:000000000000B1E0                 rep retn
.text:000000000000B1E0 ; } // starts at B1C0
.text:000000000000B1E0 fadvise         endp
.text:000000000000B1E0
.text:000000000000B1E0 ; ---------------------------------------------------------------------------
.text:000000000000B1E2                 align 10h
.text:000000000000B1F0
.text:000000000000B1F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1F0
.text:000000000000B1F0
.text:000000000000B1F0                 public open_safer
.text:000000000000B1F0 open_safer      proc near               ; CODE XREF: copy_internal+20BC↑p
.text:000000000000B1F0                                         ; copy_internal+2E68↑p ...
.text:000000000000B1F0
.text:000000000000B1F0 var_58          = dword ptr -58h
.text:000000000000B1F0 var_50          = qword ptr -50h
.text:000000000000B1F0 var_48          = qword ptr -48h
.text:000000000000B1F0 var_40          = qword ptr -40h
.text:000000000000B1F0 var_38          = byte ptr -38h
.text:000000000000B1F0 var_28          = qword ptr -28h
.text:000000000000B1F0 arg_0           = byte ptr  8
.text:000000000000B1F0
.text:000000000000B1F0 ; __unwind {
.text:000000000000B1F0                 sub     rsp, 58h
.text:000000000000B1F4                 mov     [rsp+58h+var_28], rdx
.text:000000000000B1F9                 xor     edx, edx
.text:000000000000B1FB                 mov     rax, fs:28h
.text:000000000000B204                 mov     [rsp+58h+var_40], rax
.text:000000000000B209                 xor     eax, eax
.text:000000000000B20B                 test    sil, 40h
.text:000000000000B20F                 jnz     short loc_B238
.text:000000000000B211
.text:000000000000B211 loc_B211:                               ; CODE XREF: open_safer+67↓j
.text:000000000000B211                 xor     eax, eax
.text:000000000000B213                 call    _open
.text:000000000000B218                 mov     edi, eax        ; fd
.text:000000000000B21A                 call    fd_safer_flag
.text:000000000000B21F                 mov     rcx, [rsp+58h+var_40]
.text:000000000000B224                 xor     rcx, fs:28h
.text:000000000000B22D                 jnz     short loc_B259
.text:000000000000B22F                 add     rsp, 58h
.text:000000000000B233                 retn
.text:000000000000B233 ; ---------------------------------------------------------------------------
.text:000000000000B234                 align 8
.text:000000000000B238
.text:000000000000B238 loc_B238:                               ; CODE XREF: open_safer+1F↑j
.text:000000000000B238                 lea     rax, [rsp+58h+arg_0]
.text:000000000000B23D                 mov     [rsp+58h+var_58], 10h
.text:000000000000B244                 mov     edx, dword ptr [rsp+58h+var_28]
.text:000000000000B248                 mov     [rsp+58h+var_50], rax
.text:000000000000B24D                 lea     rax, [rsp+58h+var_38]
.text:000000000000B252                 mov     [rsp+58h+var_48], rax
.text:000000000000B257                 jmp     short loc_B211
.text:000000000000B259 ; ---------------------------------------------------------------------------
.text:000000000000B259
.text:000000000000B259 loc_B259:                               ; CODE XREF: open_safer+3D↑j
.text:000000000000B259                 call    ___stack_chk_fail
.text:000000000000B259 ; } // starts at B1F0
.text:000000000000B259 open_safer      endp
.text:000000000000B259
.text:000000000000B259 ; ---------------------------------------------------------------------------
.text:000000000000B25E                 align 20h
.text:000000000000B260
.text:000000000000B260 ; =============== S U B R O U T I N E =======================================
.text:000000000000B260
.text:000000000000B260 ; Attributes: info_from_lumina
.text:000000000000B260
.text:000000000000B260 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:000000000000B260                 public record_file
.text:000000000000B260 record_file     proc near               ; CODE XREF: copy_internal+145↑p
.text:000000000000B260                                         ; copy_internal+12BD↑p ...
.text:000000000000B260 ; __unwind {
.text:000000000000B260                 test    rdi, rdi
.text:000000000000B263                 jz      short locret_B2E0
.text:000000000000B265                 push    r13
.text:000000000000B267                 push    r12
.text:000000000000B269                 mov     r13, rdi
.text:000000000000B26C                 push    rbp
.text:000000000000B26D                 push    rbx
.text:000000000000B26E                 mov     r12, rsi
.text:000000000000B271                 mov     edi, 18h
.text:000000000000B276                 mov     rbp, rdx
.text:000000000000B279                 sub     rsp, 8
.text:000000000000B27D                 call    xmalloc
.text:000000000000B282                 mov     rdi, r12        ; src
.text:000000000000B285                 mov     rbx, rax
.text:000000000000B288                 call    xstrdup
.text:000000000000B28D                 mov     [rbx], rax
.text:000000000000B290                 mov     rax, [rbp+8]
.text:000000000000B294                 mov     rsi, rbx
.text:000000000000B297                 mov     rdi, r13
.text:000000000000B29A                 mov     [rbx+8], rax
.text:000000000000B29E                 mov     rax, [rbp+0]
.text:000000000000B2A2                 mov     [rbx+10h], rax
.text:000000000000B2A6                 call    hash_insert
.text:000000000000B2AB                 test    rax, rax
.text:000000000000B2AE                 jz      short loc_B2E2
.text:000000000000B2B0                 cmp     rbx, rax
.text:000000000000B2B3                 jz      short loc_B2D0
.text:000000000000B2B5                 add     rsp, 8
.text:000000000000B2B9                 mov     rdi, rbx        ; ptr
.text:000000000000B2BC                 pop     rbx
.text:000000000000B2BD                 pop     rbp
.text:000000000000B2BE                 pop     r12
.text:000000000000B2C0                 pop     r13
.text:000000000000B2C2                 jmp     triple_free
.text:000000000000B2C2 ; ---------------------------------------------------------------------------
.text:000000000000B2C7                 align 10h
.text:000000000000B2D0
.text:000000000000B2D0 loc_B2D0:                               ; CODE XREF: record_file+53↑j
.text:000000000000B2D0                 add     rsp, 8
.text:000000000000B2D4                 pop     rbx
.text:000000000000B2D5                 pop     rbp
.text:000000000000B2D6                 pop     r12
.text:000000000000B2D8                 pop     r13
.text:000000000000B2DA                 retn
.text:000000000000B2DA ; ---------------------------------------------------------------------------
.text:000000000000B2DB                 align 20h
.text:000000000000B2E0
.text:000000000000B2E0 locret_B2E0:                            ; CODE XREF: record_file+3↑j
.text:000000000000B2E0                 rep retn
.text:000000000000B2E2 ; ---------------------------------------------------------------------------
.text:000000000000B2E2
.text:000000000000B2E2 loc_B2E2:                               ; CODE XREF: record_file+4E↑j
.text:000000000000B2E2                 call    xalloc_die
.text:000000000000B2E2 ; } // starts at B260
.text:000000000000B2E2 record_file     endp
.text:000000000000B2E2
.text:000000000000B2E2 ; ---------------------------------------------------------------------------
.text:000000000000B2E7                 align 10h
.text:000000000000B2F0
.text:000000000000B2F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2F0
.text:000000000000B2F0 ; Attributes: info_from_lumina
.text:000000000000B2F0
.text:000000000000B2F0 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:000000000000B2F0                 public seen_file
.text:000000000000B2F0 seen_file       proc near               ; CODE XREF: copy_internal+3E4↑p
.text:000000000000B2F0                                         ; copy_internal+A59↑p ...
.text:000000000000B2F0
.text:000000000000B2F0 var_28          = qword ptr -28h
.text:000000000000B2F0 var_20          = qword ptr -20h
.text:000000000000B2F0 var_18          = qword ptr -18h
.text:000000000000B2F0 var_10          = qword ptr -10h
.text:000000000000B2F0
.text:000000000000B2F0 ; __unwind {
.text:000000000000B2F0                 sub     rsp, 28h
.text:000000000000B2F4                 mov     rax, fs:28h
.text:000000000000B2FD                 mov     [rsp+28h+var_10], rax
.text:000000000000B302                 xor     eax, eax
.text:000000000000B304                 test    rdi, rdi
.text:000000000000B307                 jz      short loc_B32C
.text:000000000000B309                 mov     rax, [rdx+8]
.text:000000000000B30D                 mov     [rsp+28h+var_28], rsi
.text:000000000000B311                 mov     rsi, rsp
.text:000000000000B314                 mov     [rsp+28h+var_20], rax
.text:000000000000B319                 mov     rax, [rdx]
.text:000000000000B31C                 mov     [rsp+28h+var_18], rax
.text:000000000000B321                 call    hash_lookup
.text:000000000000B326                 test    rax, rax
.text:000000000000B329                 setnz   al
.text:000000000000B32C
.text:000000000000B32C loc_B32C:                               ; CODE XREF: seen_file+17↑j
.text:000000000000B32C                 mov     rcx, [rsp+28h+var_10]
.text:000000000000B331                 xor     rcx, fs:28h
.text:000000000000B33A                 jnz     short loc_B341
.text:000000000000B33C                 add     rsp, 28h
.text:000000000000B340                 retn
.text:000000000000B341 ; ---------------------------------------------------------------------------
.text:000000000000B341
.text:000000000000B341 loc_B341:                               ; CODE XREF: seen_file+4A↑j
.text:000000000000B341                 call    ___stack_chk_fail
.text:000000000000B341 ; } // starts at B2F0
.text:000000000000B341 seen_file       endp
.text:000000000000B341
.text:000000000000B341 ; ---------------------------------------------------------------------------
.text:000000000000B346                 align 10h
.text:000000000000B350
.text:000000000000B350 ; =============== S U B R O U T I N E =======================================
.text:000000000000B350
.text:000000000000B350
.text:000000000000B350                 public file_type
.text:000000000000B350 file_type       proc near               ; CODE XREF: prompt+1C7↑p
.text:000000000000B350 ; __unwind {
.text:000000000000B350                 mov     eax, [rdi+18h]
.text:000000000000B353                 mov     edx, 5          ; category
.text:000000000000B358                 and     eax, 0F000h
.text:000000000000B35D                 cmp     eax, 8000h
.text:000000000000B362                 jz      short loc_B3B0
.text:000000000000B364                 cmp     eax, 4000h
.text:000000000000B369                 jz      loc_B400
.text:000000000000B36F                 cmp     eax, 0A000h
.text:000000000000B374                 jz      short loc_B3E0
.text:000000000000B376                 cmp     eax, 6000h
.text:000000000000B37B                 jz      loc_B410
.text:000000000000B381                 cmp     eax, 2000h
.text:000000000000B386                 jz      loc_B420
.text:000000000000B38C                 cmp     eax, 1000h
.text:000000000000B391                 jz      loc_B430
.text:000000000000B397                 cmp     eax, 0C000h
.text:000000000000B39C                 jz      short loc_B3F0
.text:000000000000B39E                 lea     rsi, aWeirdFile ; "weird file"
.text:000000000000B3A5                 xor     edi, edi        ; domainname
.text:000000000000B3A7                 jmp     _dcgettext
.text:000000000000B3A7 ; ---------------------------------------------------------------------------
.text:000000000000B3AC                 align 10h
.text:000000000000B3B0
.text:000000000000B3B0 loc_B3B0:                               ; CODE XREF: file_type+12↑j
.text:000000000000B3B0                 cmp     qword ptr [rdi+30h], 0
.text:000000000000B3B5                 jnz     short loc_B3C8
.text:000000000000B3B7                 lea     rsi, aRegularEmptyFi ; "regular empty file"
.text:000000000000B3BE                 xor     edi, edi        ; domainname
.text:000000000000B3C0                 jmp     _dcgettext
.text:000000000000B3C0 ; ---------------------------------------------------------------------------
.text:000000000000B3C5                 align 8
.text:000000000000B3C8
.text:000000000000B3C8 loc_B3C8:                               ; CODE XREF: file_type+65↑j
.text:000000000000B3C8                 lea     rsi, aRegularFile ; "regular file"
.text:000000000000B3CF                 xor     edi, edi        ; domainname
.text:000000000000B3D1                 jmp     _dcgettext
.text:000000000000B3D1 ; ---------------------------------------------------------------------------
.text:000000000000B3D6                 align 20h
.text:000000000000B3E0
.text:000000000000B3E0 loc_B3E0:                               ; CODE XREF: file_type+24↑j
.text:000000000000B3E0                 lea     rsi, aSymbolicLink ; "symbolic link"
.text:000000000000B3E7                 xor     edi, edi        ; domainname
.text:000000000000B3E9                 jmp     _dcgettext
.text:000000000000B3E9 ; ---------------------------------------------------------------------------
.text:000000000000B3EE                 align 10h
.text:000000000000B3F0
.text:000000000000B3F0 loc_B3F0:                               ; CODE XREF: file_type+4C↑j
.text:000000000000B3F0                 lea     rsi, aSocket    ; "socket"
.text:000000000000B3F7                 xor     edi, edi        ; domainname
.text:000000000000B3F9                 jmp     _dcgettext
.text:000000000000B3F9 ; ---------------------------------------------------------------------------
.text:000000000000B3FE                 align 20h
.text:000000000000B400
.text:000000000000B400 loc_B400:                               ; CODE XREF: file_type+19↑j
.text:000000000000B400                 lea     rsi, aTargetSIsNotAD+13h ; msgid
.text:000000000000B407                 xor     edi, edi        ; domainname
.text:000000000000B409                 jmp     _dcgettext
.text:000000000000B409 ; ---------------------------------------------------------------------------
.text:000000000000B40E                 align 10h
.text:000000000000B410
.text:000000000000B410 loc_B410:                               ; CODE XREF: file_type+2B↑j
.text:000000000000B410                 lea     rsi, aBlockSpecialFi ; "block special file"
.text:000000000000B417                 xor     edi, edi        ; domainname
.text:000000000000B419                 jmp     _dcgettext
.text:000000000000B419 ; ---------------------------------------------------------------------------
.text:000000000000B41E                 align 20h
.text:000000000000B420
.text:000000000000B420 loc_B420:                               ; CODE XREF: file_type+36↑j
.text:000000000000B420                 lea     rsi, aCharacterSpeci ; "character special file"
.text:000000000000B427                 xor     edi, edi        ; domainname
.text:000000000000B429                 jmp     _dcgettext
.text:000000000000B429 ; ---------------------------------------------------------------------------
.text:000000000000B42E                 align 10h
.text:000000000000B430
.text:000000000000B430 loc_B430:                               ; CODE XREF: file_type+41↑j
.text:000000000000B430                 lea     rsi, aFifo      ; "fifo"
.text:000000000000B437                 xor     edi, edi        ; domainname
.text:000000000000B439                 jmp     _dcgettext
.text:000000000000B439 ; } // starts at B350
.text:000000000000B439 file_type       endp
.text:000000000000B439
.text:000000000000B439 ; ---------------------------------------------------------------------------
.text:000000000000B43E                 align 20h
.text:000000000000B440
.text:000000000000B440 ; =============== S U B R O U T I N E =======================================
.text:000000000000B440
.text:000000000000B440 ; Attributes: info_from_lumina
.text:000000000000B440
.text:000000000000B440 ; void __fastcall strmode(mode_t mode, char *str)
.text:000000000000B440                 public strmode
.text:000000000000B440 strmode         proc near               ; CODE XREF: overwrite_ok_isra_12+42↑p
.text:000000000000B440                                         ; filemodestring+3↓j
.text:000000000000B440 ; __unwind {
.text:000000000000B440                 mov     edx, edi
.text:000000000000B442                 mov     eax, 2Dh ; '-'
.text:000000000000B447                 and     edx, 0F000h
.text:000000000000B44D                 cmp     edx, 8000h
.text:000000000000B453                 jz      short loc_B4B0
.text:000000000000B455                 cmp     edx, 4000h
.text:000000000000B45B                 mov     eax, 64h ; 'd'
.text:000000000000B460                 jz      short loc_B4B0
.text:000000000000B462                 cmp     edx, 6000h
.text:000000000000B468                 mov     eax, 62h ; 'b'
.text:000000000000B46D                 jz      short loc_B4B0
.text:000000000000B46F                 cmp     edx, 2000h
.text:000000000000B475                 mov     eax, 63h ; 'c'
.text:000000000000B47A                 jz      short loc_B4B0
.text:000000000000B47C                 cmp     edx, 0A000h
.text:000000000000B482                 mov     eax, 6Ch ; 'l'
.text:000000000000B487                 jz      short loc_B4B0
.text:000000000000B489                 cmp     edx, 1000h
.text:000000000000B48F                 mov     eax, 70h ; 'p'
.text:000000000000B494                 jz      short loc_B4B0
.text:000000000000B496                 cmp     edx, 0C000h
.text:000000000000B49C                 mov     eax, 73h ; 's'
.text:000000000000B4A1                 mov     edx, 3Fh ; '?'
.text:000000000000B4A6                 cmovnz  eax, edx
.text:000000000000B4A9                 nop     dword ptr [rax+00000000h]
.text:000000000000B4B0
.text:000000000000B4B0 loc_B4B0:                               ; CODE XREF: strmode+13↑j
.text:000000000000B4B0                                         ; strmode+20↑j ...
.text:000000000000B4B0                 mov     [rsi], al
.text:000000000000B4B2                 mov     eax, edi
.text:000000000000B4B4                 and     eax, 100h
.text:000000000000B4B9                 cmp     eax, 1
.text:000000000000B4BC                 sbb     eax, eax
.text:000000000000B4BE                 and     eax, 0FFFFFFBBh
.text:000000000000B4C1                 add     eax, 72h ; 'r'
.text:000000000000B4C4                 mov     [rsi+1], al
.text:000000000000B4C7                 mov     eax, edi
.text:000000000000B4C9                 and     eax, 80h
.text:000000000000B4CE                 cmp     eax, 1
.text:000000000000B4D1                 sbb     eax, eax
.text:000000000000B4D3                 and     eax, 0FFFFFFB6h
.text:000000000000B4D6                 add     eax, 77h ; 'w'
.text:000000000000B4D9                 mov     [rsi+2], al
.text:000000000000B4DC                 mov     eax, edi
.text:000000000000B4DE                 and     eax, 40h
.text:000000000000B4E1                 cmp     eax, 1
.text:000000000000B4E4                 sbb     eax, eax
.text:000000000000B4E6                 test    edi, 800h
.text:000000000000B4EC                 jz      loc_B590
.text:000000000000B4F2                 and     eax, 0FFFFFFE0h
.text:000000000000B4F5                 add     eax, 73h ; 's'
.text:000000000000B4F8
.text:000000000000B4F8 loc_B4F8:                               ; CODE XREF: strmode+156↓j
.text:000000000000B4F8                 mov     [rsi+3], al
.text:000000000000B4FB                 mov     eax, edi
.text:000000000000B4FD                 and     eax, 20h
.text:000000000000B500                 cmp     eax, 1
.text:000000000000B503                 sbb     eax, eax
.text:000000000000B505                 and     eax, 0FFFFFFBBh
.text:000000000000B508                 add     eax, 72h ; 'r'
.text:000000000000B50B                 mov     [rsi+4], al
.text:000000000000B50E                 mov     eax, edi
.text:000000000000B510                 and     eax, 10h
.text:000000000000B513                 cmp     eax, 1
.text:000000000000B516                 sbb     eax, eax
.text:000000000000B518                 and     eax, 0FFFFFFB6h
.text:000000000000B51B                 add     eax, 77h ; 'w'
.text:000000000000B51E                 mov     [rsi+5], al
.text:000000000000B521                 mov     eax, edi
.text:000000000000B523                 and     eax, 8
.text:000000000000B526                 cmp     eax, 1
.text:000000000000B529                 sbb     eax, eax
.text:000000000000B52B                 test    edi, 400h
.text:000000000000B531                 jz      loc_B5B8
.text:000000000000B537                 and     eax, 0FFFFFFE0h
.text:000000000000B53A                 add     eax, 73h ; 's'
.text:000000000000B53D
.text:000000000000B53D loc_B53D:                               ; CODE XREF: strmode+17E↓j
.text:000000000000B53D                 mov     [rsi+6], al
.text:000000000000B540                 mov     eax, edi
.text:000000000000B542                 and     eax, 4
.text:000000000000B545                 cmp     eax, 1
.text:000000000000B548                 sbb     eax, eax
.text:000000000000B54A                 and     eax, 0FFFFFFBBh
.text:000000000000B54D                 add     eax, 72h ; 'r'
.text:000000000000B550                 mov     [rsi+7], al
.text:000000000000B553                 mov     eax, edi
.text:000000000000B555                 and     eax, 2
.text:000000000000B558                 cmp     eax, 1
.text:000000000000B55B                 sbb     eax, eax
.text:000000000000B55D                 and     eax, 0FFFFFFB6h
.text:000000000000B560                 add     eax, 77h ; 'w'
.text:000000000000B563                 mov     [rsi+8], al
.text:000000000000B566                 mov     eax, edi
.text:000000000000B568                 and     eax, 1
.text:000000000000B56B                 cmp     eax, 1
.text:000000000000B56E                 sbb     eax, eax
.text:000000000000B570                 and     edi, 200h
.text:000000000000B576                 jz      short loc_B5A0
.text:000000000000B578                 and     eax, 0FFFFFFE0h
.text:000000000000B57B                 add     eax, 74h ; 't'
.text:000000000000B57E                 mov     [rsi+9], al
.text:000000000000B581                 mov     eax, 20h ; ' '
.text:000000000000B586                 mov     [rsi+0Ah], ax
.text:000000000000B58A                 retn
.text:000000000000B58A ; ---------------------------------------------------------------------------
.text:000000000000B58B                 align 10h
.text:000000000000B590
.text:000000000000B590 loc_B590:                               ; CODE XREF: strmode+AC↑j
.text:000000000000B590                 and     eax, 0FFFFFFB5h
.text:000000000000B593                 add     eax, 78h ; 'x'
.text:000000000000B596                 jmp     loc_B4F8
.text:000000000000B596 ; ---------------------------------------------------------------------------
.text:000000000000B59B                 align 20h
.text:000000000000B5A0
.text:000000000000B5A0 loc_B5A0:                               ; CODE XREF: strmode+136↑j
.text:000000000000B5A0                 and     eax, 0FFFFFFB5h
.text:000000000000B5A3                 add     eax, 78h ; 'x'
.text:000000000000B5A6                 mov     [rsi+9], al
.text:000000000000B5A9                 mov     eax, 20h ; ' '
.text:000000000000B5AE                 mov     [rsi+0Ah], ax
.text:000000000000B5B2                 retn
.text:000000000000B5B2 ; ---------------------------------------------------------------------------
.text:000000000000B5B3                 align 8
.text:000000000000B5B8
.text:000000000000B5B8 loc_B5B8:                               ; CODE XREF: strmode+F1↑j
.text:000000000000B5B8                 and     eax, 0FFFFFFB5h
.text:000000000000B5BB                 add     eax, 78h ; 'x'
.text:000000000000B5BE                 jmp     loc_B53D
.text:000000000000B5BE ; } // starts at B440
.text:000000000000B5BE strmode         endp
.text:000000000000B5BE
.text:000000000000B5BE ; ---------------------------------------------------------------------------
.text:000000000000B5C3                 align 10h
.text:000000000000B5D0
.text:000000000000B5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5D0
.text:000000000000B5D0
.text:000000000000B5D0                 public filemodestring
.text:000000000000B5D0 filemodestring  proc near
.text:000000000000B5D0 ; __unwind {
.text:000000000000B5D0                 mov     edi, [rdi+18h]
.text:000000000000B5D3                 jmp     strmode
.text:000000000000B5D3 ; } // starts at B5D0
.text:000000000000B5D3 filemodestring  endp
.text:000000000000B5D3
.text:000000000000B5D3 ; ---------------------------------------------------------------------------
.text:000000000000B5D8                 align 20h
.text:000000000000B5E0
.text:000000000000B5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5E0
.text:000000000000B5E0
.text:000000000000B5E0                 public file_name_concat
.text:000000000000B5E0 file_name_concat proc near              ; CODE XREF: movefile+48↑p
.text:000000000000B5E0                                         ; rm+524↑p ...
.text:000000000000B5E0 ; __unwind {
.text:000000000000B5E0                 sub     rsp, 8
.text:000000000000B5E4                 call    mfile_name_concat
.text:000000000000B5E9                 test    rax, rax
.text:000000000000B5EC                 jz      short loc_B5F3
.text:000000000000B5EE                 add     rsp, 8
.text:000000000000B5F2                 retn
.text:000000000000B5F3 ; ---------------------------------------------------------------------------
.text:000000000000B5F3
.text:000000000000B5F3 loc_B5F3:                               ; CODE XREF: file_name_concat+C↑j
.text:000000000000B5F3                 call    xalloc_die
.text:000000000000B5F3 ; } // starts at B5E0
.text:000000000000B5F3 file_name_concat endp
.text:000000000000B5F3
.text:000000000000B5F3 ; ---------------------------------------------------------------------------
.text:000000000000B5F8                 align 20h
.text:000000000000B600
.text:000000000000B600 ; =============== S U B R O U T I N E =======================================
.text:000000000000B600
.text:000000000000B600
.text:000000000000B600 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:000000000000B600                 public mfile_name_concat
.text:000000000000B600 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:000000000000B600
.text:000000000000B600 var_48          = qword ptr -48h
.text:000000000000B600 var_39          = byte ptr -39h
.text:000000000000B600
.text:000000000000B600 ; __unwind {
.text:000000000000B600                 push    r15
.text:000000000000B602                 push    r14
.text:000000000000B604                 mov     r15, rdx
.text:000000000000B607                 push    r13
.text:000000000000B609                 push    r12
.text:000000000000B60B                 mov     r12, rdi
.text:000000000000B60E                 push    rbp
.text:000000000000B60F                 push    rbx
.text:000000000000B610                 mov     rbp, rsi
.text:000000000000B613                 sub     rsp, 18h
.text:000000000000B617                 call    last_component
.text:000000000000B61C                 mov     rbx, rax
.text:000000000000B61F                 mov     rdi, rax
.text:000000000000B622                 call    base_len
.text:000000000000B627                 sub     rbx, r12
.text:000000000000B62A                 mov     r13, rax
.text:000000000000B62D                 mov     rdi, rbp        ; s
.text:000000000000B630                 add     rbx, rax
.text:000000000000B633                 call    _strlen
.text:000000000000B638                 test    r13, r13
.text:000000000000B63B                 mov     r14, rax
.text:000000000000B63E                 jz      short loc_B670
.text:000000000000B640                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:000000000000B646                 jz      loc_B6F0
.text:000000000000B64C                 xor     eax, eax
.text:000000000000B64E                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000B652                 mov     edx, 0
.text:000000000000B657                 setnz   al
.text:000000000000B65A                 mov     [rsp+48h+var_48], rax
.text:000000000000B65E                 mov     eax, 2Fh ; '/'
.text:000000000000B663                 cmovz   eax, edx
.text:000000000000B666                 mov     [rsp+48h+var_39], al
.text:000000000000B66A                 jmp     short loc_B68E
.text:000000000000B66A ; ---------------------------------------------------------------------------
.text:000000000000B66C                 align 10h
.text:000000000000B670
.text:000000000000B670 loc_B670:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:000000000000B670                 xor     eax, eax
.text:000000000000B672                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000B676                 mov     edx, 0
.text:000000000000B67B                 setz    al
.text:000000000000B67E                 mov     [rsp+48h+var_48], rax
.text:000000000000B682                 mov     eax, 2Eh ; '.'
.text:000000000000B687                 cmovnz  eax, edx
.text:000000000000B68A                 mov     [rsp+48h+var_39], al
.text:000000000000B68E
.text:000000000000B68E loc_B68E:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:000000000000B68E                                         ; mfile_name_concat+FD↓j
.text:000000000000B68E                 lea     rdi, [rbx+r14+1]
.text:000000000000B693                 add     rdi, [rsp+48h+var_48] ; size
.text:000000000000B697                 call    _malloc
.text:000000000000B69C                 test    rax, rax
.text:000000000000B69F                 mov     r13, rax
.text:000000000000B6A2                 jz      short loc_B6D6
.text:000000000000B6A4                 mov     rdi, rax        ; dest
.text:000000000000B6A7                 mov     rdx, rbx        ; n
.text:000000000000B6AA                 mov     rsi, r12        ; src
.text:000000000000B6AD                 call    _mempcpy
.text:000000000000B6B2                 movzx   ecx, [rsp+48h+var_39]
.text:000000000000B6B7                 mov     rdi, [rsp+48h+var_48]
.text:000000000000B6BB                 add     rdi, rax        ; dest
.text:000000000000B6BE                 test    r15, r15
.text:000000000000B6C1                 mov     [rax], cl
.text:000000000000B6C3                 jz      short loc_B6C8
.text:000000000000B6C5                 mov     [r15], rdi
.text:000000000000B6C8
.text:000000000000B6C8 loc_B6C8:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:000000000000B6C8                 mov     rdx, r14        ; n
.text:000000000000B6CB                 mov     rsi, rbp        ; src
.text:000000000000B6CE                 call    _mempcpy
.text:000000000000B6D3                 mov     byte ptr [rax], 0
.text:000000000000B6D6
.text:000000000000B6D6 loc_B6D6:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:000000000000B6D6                 add     rsp, 18h
.text:000000000000B6DA                 mov     rax, r13
.text:000000000000B6DD                 pop     rbx
.text:000000000000B6DE                 pop     rbp
.text:000000000000B6DF                 pop     r12
.text:000000000000B6E1                 pop     r13
.text:000000000000B6E3                 pop     r14
.text:000000000000B6E5                 pop     r15
.text:000000000000B6E7                 retn
.text:000000000000B6E7 ; ---------------------------------------------------------------------------
.text:000000000000B6E8                 align 10h
.text:000000000000B6F0
.text:000000000000B6F0 loc_B6F0:                               ; CODE XREF: mfile_name_concat+46↑j
.text:000000000000B6F0                 mov     [rsp+48h+var_48], 0
.text:000000000000B6F8                 mov     [rsp+48h+var_39], 0
.text:000000000000B6FD                 jmp     short loc_B68E
.text:000000000000B6FD ; } // starts at B600
.text:000000000000B6FD mfile_name_concat endp
.text:000000000000B6FD
.text:000000000000B6FD ; ---------------------------------------------------------------------------
.text:000000000000B6FF                 align 20h
.text:000000000000B700
.text:000000000000B700 ; =============== S U B R O U T I N E =======================================
.text:000000000000B700
.text:000000000000B700
.text:000000000000B700 ; __int64 __fastcall full_write(int fd, void *buf, size_t n)
.text:000000000000B700                 public full_write
.text:000000000000B700 full_write      proc near               ; CODE XREF: write_zeros+44↑p
.text:000000000000B700                                         ; sparse_copy+206↑p
.text:000000000000B700 ; __unwind {
.text:000000000000B700                 push    r13
.text:000000000000B702                 push    r12
.text:000000000000B704                 push    rbp
.text:000000000000B705                 push    rbx
.text:000000000000B706                 sub     rsp, 8
.text:000000000000B70A                 test    rdx, rdx
.text:000000000000B70D                 jz      short loc_B771
.text:000000000000B70F                 mov     r13d, edi
.text:000000000000B712                 mov     rbp, rsi
.text:000000000000B715                 mov     rbx, rdx
.text:000000000000B718                 xor     r12d, r12d
.text:000000000000B71B                 jmp     short loc_B730
.text:000000000000B71B ; ---------------------------------------------------------------------------
.text:000000000000B71D                 align 20h
.text:000000000000B720
.text:000000000000B720 loc_B720:                               ; CODE XREF: full_write+42↓j
.text:000000000000B720                 test    rax, rax
.text:000000000000B723                 jz      short loc_B758
.text:000000000000B725                 add     r12, rax
.text:000000000000B728                 add     rbp, rax
.text:000000000000B72B                 sub     rbx, rax
.text:000000000000B72E                 jz      short loc_B744
.text:000000000000B730
.text:000000000000B730 loc_B730:                               ; CODE XREF: full_write+1B↑j
.text:000000000000B730                 mov     rdx, rbx        ; n
.text:000000000000B733                 mov     rsi, rbp        ; buf
.text:000000000000B736                 mov     edi, r13d       ; fd
.text:000000000000B739                 call    safe_write
.text:000000000000B73E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B742                 jnz     short loc_B720
.text:000000000000B744
.text:000000000000B744 loc_B744:                               ; CODE XREF: full_write+2E↑j
.text:000000000000B744                                         ; full_write+74↓j
.text:000000000000B744                 add     rsp, 8
.text:000000000000B748                 mov     rax, r12
.text:000000000000B74B                 pop     rbx
.text:000000000000B74C                 pop     rbp
.text:000000000000B74D                 pop     r12
.text:000000000000B74F                 pop     r13
.text:000000000000B751                 retn
.text:000000000000B751 ; ---------------------------------------------------------------------------
.text:000000000000B752                 align 8
.text:000000000000B758
.text:000000000000B758 loc_B758:                               ; CODE XREF: full_write+23↑j
.text:000000000000B758                 call    ___errno_location
.text:000000000000B75D                 mov     dword ptr [rax], 1Ch
.text:000000000000B763                 add     rsp, 8
.text:000000000000B767                 mov     rax, r12
.text:000000000000B76A                 pop     rbx
.text:000000000000B76B                 pop     rbp
.text:000000000000B76C                 pop     r12
.text:000000000000B76E                 pop     r13
.text:000000000000B770                 retn
.text:000000000000B771 ; ---------------------------------------------------------------------------
.text:000000000000B771
.text:000000000000B771 loc_B771:                               ; CODE XREF: full_write+D↑j
.text:000000000000B771                 xor     r12d, r12d
.text:000000000000B774                 jmp     short loc_B744
.text:000000000000B774 ; } // starts at B700
.text:000000000000B774 full_write      endp
.text:000000000000B774
.text:000000000000B774 ; ---------------------------------------------------------------------------
.text:000000000000B776                 align 20h
.text:000000000000B780
.text:000000000000B780 ; =============== S U B R O U T I N E =======================================
.text:000000000000B780
.text:000000000000B780 ; Attributes: info_from_lumina
.text:000000000000B780
.text:000000000000B780 ; size_t __fastcall next_prime(size_t candidate)
.text:000000000000B780 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:000000000000B780                                         ; hash_rehash+7B↓p
.text:000000000000B780 ; __unwind {
.text:000000000000B780                 cmp     rdi, 0Ah
.text:000000000000B784                 mov     eax, 0Ah
.text:000000000000B789                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:000000000000B793                 cmovb   rdi, rax
.text:000000000000B797                 or      rdi, 1
.text:000000000000B79B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000B79F                 jz      short loc_B80F
.text:000000000000B7A1                 nop     dword ptr [rax+00000000h]
.text:000000000000B7A8
.text:000000000000B7A8 loc_B7A8:                               ; CODE XREF: next_prime+8D↓j
.text:000000000000B7A8                 mov     rax, rdi
.text:000000000000B7AB                 mov     rcx, rdi
.text:000000000000B7AE                 mul     r9
.text:000000000000B7B1                 mov     rax, rdx
.text:000000000000B7B4                 shr     rax, 1
.text:000000000000B7B7                 lea     rax, [rax+rax*2]
.text:000000000000B7BB                 sub     rcx, rax
.text:000000000000B7BE                 cmp     rdi, 9
.text:000000000000B7C2                 mov     rax, rcx
.text:000000000000B7C5                 jbe     short loc_B800
.text:000000000000B7C7                 test    rcx, rcx
.text:000000000000B7CA                 jz      short loc_B805
.text:000000000000B7CC                 mov     r8d, 10h
.text:000000000000B7D2                 mov     esi, 9
.text:000000000000B7D7                 mov     ecx, 3
.text:000000000000B7DC                 jmp     short loc_B7E9
.text:000000000000B7DC ; ---------------------------------------------------------------------------
.text:000000000000B7DE                 align 20h
.text:000000000000B7E0
.text:000000000000B7E0 loc_B7E0:                               ; CODE XREF: next_prime+7E↓j
.text:000000000000B7E0                 add     r8, 8
.text:000000000000B7E4                 test    rdx, rdx
.text:000000000000B7E7                 jz      short loc_B805
.text:000000000000B7E9
.text:000000000000B7E9 loc_B7E9:                               ; CODE XREF: next_prime+5C↑j
.text:000000000000B7E9                 add     rcx, 2
.text:000000000000B7ED                 xor     edx, edx
.text:000000000000B7EF                 mov     rax, rdi
.text:000000000000B7F2                 div     rcx
.text:000000000000B7F5                 add     rsi, r8
.text:000000000000B7F8                 cmp     rsi, rdi
.text:000000000000B7FB                 mov     rax, rdx
.text:000000000000B7FE                 jb      short loc_B7E0
.text:000000000000B800
.text:000000000000B800 loc_B800:                               ; CODE XREF: next_prime+45↑j
.text:000000000000B800                 test    rax, rax
.text:000000000000B803                 jnz     short loc_B80F
.text:000000000000B805
.text:000000000000B805 loc_B805:                               ; CODE XREF: next_prime+4A↑j
.text:000000000000B805                                         ; next_prime+67↑j
.text:000000000000B805                 add     rdi, 2
.text:000000000000B809                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000B80D                 jnz     short loc_B7A8
.text:000000000000B80F
.text:000000000000B80F loc_B80F:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000B80F                                         ; next_prime+83↑j
.text:000000000000B80F                 mov     rax, rdi
.text:000000000000B812                 retn
.text:000000000000B812 ; } // starts at B780
.text:000000000000B812 next_prime      endp
.text:000000000000B812
.text:000000000000B812 ; ---------------------------------------------------------------------------
.text:000000000000B813                 align 20h
.text:000000000000B820
.text:000000000000B820 ; =============== S U B R O U T I N E =======================================
.text:000000000000B820
.text:000000000000B820
.text:000000000000B820 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:000000000000B820 ; __unwind {
.text:000000000000B820                 mov     rax, rdi
.text:000000000000B823                 xor     edx, edx
.text:000000000000B825                 ror     rax, 3
.text:000000000000B829                 div     rsi
.text:000000000000B82C                 mov     rax, rdx
.text:000000000000B82F                 retn
.text:000000000000B82F ; } // starts at B820
.text:000000000000B82F raw_hasher      endp
.text:000000000000B82F
.text:000000000000B830
.text:000000000000B830 ; =============== S U B R O U T I N E =======================================
.text:000000000000B830
.text:000000000000B830
.text:000000000000B830 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:000000000000B830 ; __unwind {
.text:000000000000B830                 cmp     rdi, rsi
.text:000000000000B833                 setz    al
.text:000000000000B836                 retn
.text:000000000000B836 ; } // starts at B830
.text:000000000000B836 raw_comparator  endp
.text:000000000000B836
.text:000000000000B836 ; ---------------------------------------------------------------------------
.text:000000000000B837                 align 20h
.text:000000000000B840
.text:000000000000B840 ; =============== S U B R O U T I N E =======================================
.text:000000000000B840
.text:000000000000B840 ; Attributes: info_from_lumina
.text:000000000000B840
.text:000000000000B840 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:000000000000B840 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:000000000000B840                                         ; transfer_entries+65↓p ...
.text:000000000000B840 ; __unwind {
.text:000000000000B840                 push    rbx
.text:000000000000B841                 mov     rbx, rdi
.text:000000000000B844                 mov     rdi, rsi
.text:000000000000B847                 mov     rsi, [rbx+10h]
.text:000000000000B84B                 call    qword ptr [rbx+30h]
.text:000000000000B84E                 cmp     [rbx+10h], rax
.text:000000000000B852                 jbe     short loc_B85D
.text:000000000000B854                 shl     rax, 4
.text:000000000000B858                 add     rax, [rbx]
.text:000000000000B85B                 pop     rbx
.text:000000000000B85C                 retn
.text:000000000000B85D ; ---------------------------------------------------------------------------
.text:000000000000B85D
.text:000000000000B85D loc_B85D:                               ; CODE XREF: safe_hasher+12↑j
.text:000000000000B85D                 call    _abort
.text:000000000000B85D ; } // starts at B840
.text:000000000000B85D safe_hasher     endp
.text:000000000000B85D
.text:000000000000B85D ; ---------------------------------------------------------------------------
.text:000000000000B862                 align 10h
.text:000000000000B870
.text:000000000000B870 ; =============== S U B R O U T I N E =======================================
.text:000000000000B870
.text:000000000000B870 ; Attributes: info_from_lumina
.text:000000000000B870
.text:000000000000B870 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:000000000000B870 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:000000000000B870                                         ; hash_insert_if_absent+1CF↓p ...
.text:000000000000B870 ; __unwind {
.text:000000000000B870                 push    r14
.text:000000000000B872                 push    r13
.text:000000000000B874                 mov     r14, rdx
.text:000000000000B877                 push    r12
.text:000000000000B879                 push    rbp
.text:000000000000B87A                 mov     r12, rdi
.text:000000000000B87D                 push    rbx
.text:000000000000B87E                 mov     rbp, rsi
.text:000000000000B881                 mov     r13d, ecx
.text:000000000000B884                 call    safe_hasher
.text:000000000000B889                 mov     [r14], rax
.text:000000000000B88C                 mov     rsi, [rax]
.text:000000000000B88F                 test    rsi, rsi
.text:000000000000B892                 jz      loc_B980
.text:000000000000B898                 cmp     rsi, rbp
.text:000000000000B89B                 mov     rbx, rax
.text:000000000000B89E                 jz      loc_B933
.text:000000000000B8A4                 mov     rdi, rbp
.text:000000000000B8A7                 call    qword ptr [r12+38h]
.text:000000000000B8AC                 test    al, al
.text:000000000000B8AE                 jnz     loc_B930
.text:000000000000B8B4                 mov     rax, [rbx+8]
.text:000000000000B8B8                 test    rax, rax
.text:000000000000B8BB                 jz      loc_B980
.text:000000000000B8C1                 mov     rsi, [rax]
.text:000000000000B8C4                 cmp     rbp, rsi
.text:000000000000B8C7                 jnz     short loc_B8E9
.text:000000000000B8C9                 jmp     short loc_B8FC
.text:000000000000B8C9 ; ---------------------------------------------------------------------------
.text:000000000000B8CB                 align 10h
.text:000000000000B8D0
.text:000000000000B8D0 loc_B8D0:                               ; CODE XREF: hash_find_entry+83↓j
.text:000000000000B8D0                 mov     rbx, [rbx+8]
.text:000000000000B8D4                 mov     rax, [rbx+8]
.text:000000000000B8D8                 test    rax, rax
.text:000000000000B8DB                 jz      loc_B980
.text:000000000000B8E1                 mov     rsi, [rax]
.text:000000000000B8E4                 cmp     rsi, rbp
.text:000000000000B8E7                 jz      short loc_B8FC
.text:000000000000B8E9
.text:000000000000B8E9 loc_B8E9:                               ; CODE XREF: hash_find_entry+57↑j
.text:000000000000B8E9                 mov     rdi, rbp
.text:000000000000B8EC                 call    qword ptr [r12+38h]
.text:000000000000B8F1                 test    al, al
.text:000000000000B8F3                 jz      short loc_B8D0
.text:000000000000B8F5                 mov     rax, [rbx+8]
.text:000000000000B8F9                 mov     rsi, [rax]
.text:000000000000B8FC
.text:000000000000B8FC loc_B8FC:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000B8FC                                         ; hash_find_entry+77↑j
.text:000000000000B8FC                 test    r13b, r13b
.text:000000000000B8FF                 jz      short loc_B91E
.text:000000000000B901                 mov     rdx, [rax+8]
.text:000000000000B905                 mov     [rbx+8], rdx
.text:000000000000B909                 mov     qword ptr [rax], 0
.text:000000000000B910                 mov     rdx, [r12+48h]
.text:000000000000B915                 mov     [rax+8], rdx
.text:000000000000B919                 mov     [r12+48h], rax
.text:000000000000B91E
.text:000000000000B91E loc_B91E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000B91E                                         ; hash_find_entry+C6↓j ...
.text:000000000000B91E                 pop     rbx
.text:000000000000B91F                 mov     rax, rsi
.text:000000000000B922                 pop     rbp
.text:000000000000B923                 pop     r12
.text:000000000000B925                 pop     r13
.text:000000000000B927                 pop     r14
.text:000000000000B929                 retn
.text:000000000000B929 ; ---------------------------------------------------------------------------
.text:000000000000B92A                 align 10h
.text:000000000000B930
.text:000000000000B930 loc_B930:                               ; CODE XREF: hash_find_entry+3E↑j
.text:000000000000B930                 mov     rsi, [rbx]
.text:000000000000B933
.text:000000000000B933 loc_B933:                               ; CODE XREF: hash_find_entry+2E↑j
.text:000000000000B933                 test    r13b, r13b
.text:000000000000B936                 jz      short loc_B91E
.text:000000000000B938                 mov     rax, [rbx+8]
.text:000000000000B93C                 test    rax, rax
.text:000000000000B93F                 jz      short loc_B970
.text:000000000000B941                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000B945                 movups  xmmword ptr [rbx], xmm0
.text:000000000000B948                 mov     qword ptr [rax], 0
.text:000000000000B94F                 mov     rdx, [r12+48h]
.text:000000000000B954                 mov     [rax+8], rdx
.text:000000000000B958                 mov     [r12+48h], rax
.text:000000000000B95D                 mov     rax, rsi
.text:000000000000B960                 pop     rbx
.text:000000000000B961                 pop     rbp
.text:000000000000B962                 pop     r12
.text:000000000000B964                 pop     r13
.text:000000000000B966                 pop     r14
.text:000000000000B968                 retn
.text:000000000000B968 ; ---------------------------------------------------------------------------
.text:000000000000B969                 align 10h
.text:000000000000B970
.text:000000000000B970 loc_B970:                               ; CODE XREF: hash_find_entry+CF↑j
.text:000000000000B970                 mov     qword ptr [rbx], 0
.text:000000000000B977                 jmp     short loc_B91E
.text:000000000000B977 ; ---------------------------------------------------------------------------
.text:000000000000B979                 align 20h
.text:000000000000B980
.text:000000000000B980 loc_B980:                               ; CODE XREF: hash_find_entry+22↑j
.text:000000000000B980                                         ; hash_find_entry+4B↑j ...
.text:000000000000B980                 xor     esi, esi
.text:000000000000B982                 pop     rbx
.text:000000000000B983                 mov     rax, rsi
.text:000000000000B986                 pop     rbp
.text:000000000000B987                 pop     r12
.text:000000000000B989                 pop     r13
.text:000000000000B98B                 pop     r14
.text:000000000000B98D                 retn
.text:000000000000B98D ; } // starts at B870
.text:000000000000B98D hash_find_entry endp
.text:000000000000B98D
.text:000000000000B98D ; ---------------------------------------------------------------------------
.text:000000000000B98E                 align 10h
.text:000000000000B990
.text:000000000000B990 ; =============== S U B R O U T I N E =======================================
.text:000000000000B990
.text:000000000000B990 ; Attributes: info_from_lumina
.text:000000000000B990
.text:000000000000B990 ; _Bool check_tuning(Hash_table *table)
.text:000000000000B990 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:000000000000B990                                         ; hash_initialize+11B↓p ...
.text:000000000000B990 ; __unwind {
.text:000000000000B990                 mov     rdx, [rdi]
.text:000000000000B993                 lea     rcx, default_tuning
.text:000000000000B99A                 mov     eax, 1
.text:000000000000B99F                 cmp     rdx, rcx
.text:000000000000B9A2                 jz      short locret_BA05
.text:000000000000B9A4                 movss   xmm0, dword ptr [rdx+8]
.text:000000000000B9A9                 ucomiss xmm0, cs:dword_16A24
.text:000000000000B9B0                 jbe     short loc_BA00
.text:000000000000B9B2                 movss   xmm1, cs:dword_16A28
.text:000000000000B9BA                 ucomiss xmm1, xmm0
.text:000000000000B9BD                 jbe     short loc_BA00
.text:000000000000B9BF                 movss   xmm1, dword ptr [rdx+0Ch]
.text:000000000000B9C4                 ucomiss xmm1, cs:dword_16A2C
.text:000000000000B9CB                 jbe     short loc_BA00
.text:000000000000B9CD                 movss   xmm1, dword ptr [rdx]
.text:000000000000B9D1                 ucomiss xmm1, cs:dword_16A30
.text:000000000000B9D8                 jb      short loc_BA00
.text:000000000000B9DA                 addss   xmm1, cs:dword_16A24
.text:000000000000B9E2                 movss   xmm2, dword ptr [rdx+4]
.text:000000000000B9E7                 ucomiss xmm2, xmm1
.text:000000000000B9EA                 jbe     short loc_BA00
.text:000000000000B9EC                 movss   xmm3, cs:dword_16A34
.text:000000000000B9F4                 ucomiss xmm3, xmm2
.text:000000000000B9F7                 jb      short loc_BA00
.text:000000000000B9F9                 ucomiss xmm0, xmm1
.text:000000000000B9FC                 ja      short locret_BA05
.text:000000000000B9FE                 xchg    ax, ax
.text:000000000000BA00
.text:000000000000BA00 loc_BA00:                               ; CODE XREF: check_tuning+20↑j
.text:000000000000BA00                                         ; check_tuning+2D↑j ...
.text:000000000000BA00                 mov     [rdi], rcx
.text:000000000000BA03                 xor     eax, eax
.text:000000000000BA05
.text:000000000000BA05 locret_BA05:                            ; CODE XREF: check_tuning+12↑j
.text:000000000000BA05                                         ; check_tuning+6C↑j
.text:000000000000BA05                 rep retn
.text:000000000000BA05 ; } // starts at B990
.text:000000000000BA05 check_tuning    endp
.text:000000000000BA05
.text:000000000000BA05 ; ---------------------------------------------------------------------------
.text:000000000000BA07                 align 10h
.text:000000000000BA10
.text:000000000000BA10 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA10
.text:000000000000BA10 ; Attributes: info_from_lumina
.text:000000000000BA10
.text:000000000000BA10 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:000000000000BA10 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:000000000000BA10                                         ; hash_rehash+152↓p ...
.text:000000000000BA10 ; __unwind {
.text:000000000000BA10                 push    r15
.text:000000000000BA12                 push    r14
.text:000000000000BA14                 push    r13
.text:000000000000BA16                 push    r12
.text:000000000000BA18                 push    rbp
.text:000000000000BA19                 push    rbx
.text:000000000000BA1A                 sub     rsp, 8
.text:000000000000BA1E                 mov     r12, [rsi]
.text:000000000000BA21                 cmp     r12, [rsi+8]
.text:000000000000BA25                 jnb     loc_BB08
.text:000000000000BA2B                 mov     rbp, rdi
.text:000000000000BA2E                 mov     r13, rsi
.text:000000000000BA31                 mov     r14d, edx
.text:000000000000BA34                 nop     dword ptr [rax+00h]
.text:000000000000BA38
.text:000000000000BA38 loc_BA38:                               ; CODE XREF: transfer_entries+F2↓j
.text:000000000000BA38                 mov     r15, [r12]
.text:000000000000BA3C                 test    r15, r15
.text:000000000000BA3F                 jz      loc_BAFA
.text:000000000000BA45                 mov     rbx, [r12+8]
.text:000000000000BA4A                 test    rbx, rbx
.text:000000000000BA4D                 jnz     short loc_BA6C
.text:000000000000BA4F                 jmp     short loc_BAAB
.text:000000000000BA4F ; ---------------------------------------------------------------------------
.text:000000000000BA51                 align 8
.text:000000000000BA58
.text:000000000000BA58 loc_BA58:                               ; CODE XREF: transfer_entries+72↓j
.text:000000000000BA58                 mov     rcx, [rax+8]
.text:000000000000BA5C                 test    rdx, rdx
.text:000000000000BA5F                 mov     [rbx+8], rcx
.text:000000000000BA63                 mov     [rax+8], rbx
.text:000000000000BA67                 mov     rbx, rdx
.text:000000000000BA6A                 jz      short loc_BAA7
.text:000000000000BA6C
.text:000000000000BA6C loc_BA6C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000BA6C                                         ; transfer_entries+95↓j
.text:000000000000BA6C                 mov     r15, [rbx]
.text:000000000000BA6F                 mov     rdi, rbp
.text:000000000000BA72                 mov     rsi, r15
.text:000000000000BA75                 call    safe_hasher
.text:000000000000BA7A                 cmp     qword ptr [rax], 0
.text:000000000000BA7E                 mov     rdx, [rbx+8]
.text:000000000000BA82                 jnz     short loc_BA58
.text:000000000000BA84                 mov     [rax], r15
.text:000000000000BA87                 add     qword ptr [rbp+18h], 1
.text:000000000000BA8C                 test    rdx, rdx
.text:000000000000BA8F                 mov     qword ptr [rbx], 0
.text:000000000000BA96                 mov     rax, [rbp+48h]
.text:000000000000BA9A                 mov     [rbx+8], rax
.text:000000000000BA9E                 mov     [rbp+48h], rbx
.text:000000000000BAA2                 mov     rbx, rdx
.text:000000000000BAA5                 jnz     short loc_BA6C
.text:000000000000BAA7
.text:000000000000BAA7 loc_BAA7:                               ; CODE XREF: transfer_entries+5A↑j
.text:000000000000BAA7                 mov     r15, [r12]
.text:000000000000BAAB
.text:000000000000BAAB loc_BAAB:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000BAAB                 test    r14b, r14b
.text:000000000000BAAE                 mov     qword ptr [r12+8], 0
.text:000000000000BAB7                 jnz     short loc_BAFA
.text:000000000000BAB9                 mov     rsi, r15
.text:000000000000BABC                 mov     rdi, rbp
.text:000000000000BABF                 call    safe_hasher
.text:000000000000BAC4                 cmp     qword ptr [rax], 0
.text:000000000000BAC8                 mov     rbx, rax
.text:000000000000BACB                 jz      short loc_BB20
.text:000000000000BACD                 mov     rax, [rbp+48h]
.text:000000000000BAD1                 test    rax, rax
.text:000000000000BAD4                 jz      short loc_BB30
.text:000000000000BAD6                 mov     rdx, [rax+8]
.text:000000000000BADA                 mov     [rbp+48h], rdx
.text:000000000000BADE
.text:000000000000BADE loc_BADE:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000BADE                 mov     rdx, [rbx+8]
.text:000000000000BAE2                 mov     [rax], r15
.text:000000000000BAE5                 mov     [rax+8], rdx
.text:000000000000BAE9                 mov     [rbx+8], rax
.text:000000000000BAED
.text:000000000000BAED loc_BAED:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000BAED                 mov     qword ptr [r12], 0
.text:000000000000BAF5                 sub     qword ptr [r13+18h], 1
.text:000000000000BAFA
.text:000000000000BAFA loc_BAFA:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000BAFA                                         ; transfer_entries+A7↑j
.text:000000000000BAFA                 add     r12, 10h
.text:000000000000BAFE                 cmp     [r13+8], r12
.text:000000000000BB02                 ja      loc_BA38
.text:000000000000BB08
.text:000000000000BB08 loc_BB08:                               ; CODE XREF: transfer_entries+15↑j
.text:000000000000BB08                 add     rsp, 8
.text:000000000000BB0C                 mov     eax, 1
.text:000000000000BB11                 pop     rbx
.text:000000000000BB12                 pop     rbp
.text:000000000000BB13                 pop     r12
.text:000000000000BB15                 pop     r13
.text:000000000000BB17                 pop     r14
.text:000000000000BB19                 pop     r15
.text:000000000000BB1B                 retn
.text:000000000000BB1B ; ---------------------------------------------------------------------------
.text:000000000000BB1C                 align 20h
.text:000000000000BB20
.text:000000000000BB20 loc_BB20:                               ; CODE XREF: transfer_entries+BB↑j
.text:000000000000BB20                 mov     [rax], r15
.text:000000000000BB23                 add     qword ptr [rbp+18h], 1
.text:000000000000BB28                 jmp     short loc_BAED
.text:000000000000BB28 ; ---------------------------------------------------------------------------
.text:000000000000BB2A                 align 10h
.text:000000000000BB30
.text:000000000000BB30 loc_BB30:                               ; CODE XREF: transfer_entries+C4↑j
.text:000000000000BB30                 mov     edi, 10h        ; size
.text:000000000000BB35                 call    _malloc
.text:000000000000BB3A                 test    rax, rax
.text:000000000000BB3D                 jnz     short loc_BADE
.text:000000000000BB3F                 add     rsp, 8
.text:000000000000BB43                 xor     eax, eax
.text:000000000000BB45                 pop     rbx
.text:000000000000BB46                 pop     rbp
.text:000000000000BB47                 pop     r12
.text:000000000000BB49                 pop     r13
.text:000000000000BB4B                 pop     r14
.text:000000000000BB4D                 pop     r15
.text:000000000000BB4F                 retn
.text:000000000000BB4F ; } // starts at BA10
.text:000000000000BB4F transfer_entries endp
.text:000000000000BB4F
.text:000000000000BB50
.text:000000000000BB50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BB50
.text:000000000000BB50
.text:000000000000BB50                 public hash_get_n_buckets
.text:000000000000BB50 hash_get_n_buckets proc near
.text:000000000000BB50 ; __unwind {
.text:000000000000BB50                 mov     rax, [rdi+10h]
.text:000000000000BB54                 retn
.text:000000000000BB54 ; } // starts at BB50
.text:000000000000BB54 hash_get_n_buckets endp
.text:000000000000BB54
.text:000000000000BB54 ; ---------------------------------------------------------------------------
.text:000000000000BB55                 align 20h
.text:000000000000BB60
.text:000000000000BB60 ; =============== S U B R O U T I N E =======================================
.text:000000000000BB60
.text:000000000000BB60
.text:000000000000BB60                 public hash_get_n_buckets_used
.text:000000000000BB60 hash_get_n_buckets_used proc near
.text:000000000000BB60 ; __unwind {
.text:000000000000BB60                 mov     rax, [rdi+18h]
.text:000000000000BB64                 retn
.text:000000000000BB64 ; } // starts at BB60
.text:000000000000BB64 hash_get_n_buckets_used endp
.text:000000000000BB64
.text:000000000000BB64 ; ---------------------------------------------------------------------------
.text:000000000000BB65                 align 10h
.text:000000000000BB70
.text:000000000000BB70 ; =============== S U B R O U T I N E =======================================
.text:000000000000BB70
.text:000000000000BB70
.text:000000000000BB70                 public hash_get_n_entries
.text:000000000000BB70 hash_get_n_entries proc near
.text:000000000000BB70 ; __unwind {
.text:000000000000BB70                 mov     rax, [rdi+20h]
.text:000000000000BB74                 retn
.text:000000000000BB74 ; } // starts at BB70
.text:000000000000BB74 hash_get_n_entries endp
.text:000000000000BB74
.text:000000000000BB74 ; ---------------------------------------------------------------------------
.text:000000000000BB75                 align 20h
.text:000000000000BB80
.text:000000000000BB80 ; =============== S U B R O U T I N E =======================================
.text:000000000000BB80
.text:000000000000BB80 ; Attributes: info_from_lumina
.text:000000000000BB80
.text:000000000000BB80 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:000000000000BB80                 public hash_get_max_bucket_length
.text:000000000000BB80 hash_get_max_bucket_length proc near
.text:000000000000BB80 ; __unwind {
.text:000000000000BB80                 mov     rsi, [rdi]
.text:000000000000BB83                 mov     rdi, [rdi+8]
.text:000000000000BB87                 xor     eax, eax
.text:000000000000BB89                 cmp     rsi, rdi
.text:000000000000BB8C                 jnb     short locret_BBC7
.text:000000000000BB8E                 xchg    ax, ax
.text:000000000000BB90
.text:000000000000BB90 loc_BB90:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:000000000000BB90                 cmp     qword ptr [rsi], 0
.text:000000000000BB94                 jz      short loc_BBBC
.text:000000000000BB96                 mov     rdx, [rsi+8]
.text:000000000000BB9A                 mov     ecx, 1
.text:000000000000BB9F                 test    rdx, rdx
.text:000000000000BBA2                 jz      short loc_BBB5
.text:000000000000BBA4                 nop     dword ptr [rax+00h]
.text:000000000000BBA8
.text:000000000000BBA8 loc_BBA8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:000000000000BBA8                 mov     rdx, [rdx+8]
.text:000000000000BBAC                 add     rcx, 1
.text:000000000000BBB0                 test    rdx, rdx
.text:000000000000BBB3                 jnz     short loc_BBA8
.text:000000000000BBB5
.text:000000000000BBB5 loc_BBB5:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:000000000000BBB5                 cmp     rax, rcx
.text:000000000000BBB8                 cmovb   rax, rcx
.text:000000000000BBBC
.text:000000000000BBBC loc_BBBC:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000BBBC                 add     rsi, 10h
.text:000000000000BBC0                 cmp     rsi, rdi
.text:000000000000BBC3                 jb      short loc_BB90
.text:000000000000BBC5                 rep retn
.text:000000000000BBC7 ; ---------------------------------------------------------------------------
.text:000000000000BBC7
.text:000000000000BBC7 locret_BBC7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:000000000000BBC7                 rep retn
.text:000000000000BBC7 ; } // starts at BB80
.text:000000000000BBC7 hash_get_max_bucket_length endp
.text:000000000000BBC7
.text:000000000000BBC7 ; ---------------------------------------------------------------------------
.text:000000000000BBC9                 align 10h
.text:000000000000BBD0
.text:000000000000BBD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BBD0
.text:000000000000BBD0 ; Attributes: info_from_lumina
.text:000000000000BBD0
.text:000000000000BBD0 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:000000000000BBD0                 public hash_table_ok
.text:000000000000BBD0 hash_table_ok   proc near
.text:000000000000BBD0 ; __unwind {
.text:000000000000BBD0                 mov     rcx, [rdi]
.text:000000000000BBD3                 mov     r8, [rdi+8]
.text:000000000000BBD7                 xor     edx, edx
.text:000000000000BBD9                 xor     esi, esi
.text:000000000000BBDB                 cmp     rcx, r8
.text:000000000000BBDE                 jnb     short loc_BC16
.text:000000000000BBE0
.text:000000000000BBE0 loc_BBE0:                               ; CODE XREF: hash_table_ok+44↓j
.text:000000000000BBE0                 cmp     qword ptr [rcx], 0
.text:000000000000BBE4                 jz      short loc_BC0D
.text:000000000000BBE6                 mov     rax, [rcx+8]
.text:000000000000BBEA                 add     rsi, 1
.text:000000000000BBEE                 add     rdx, 1
.text:000000000000BBF2                 test    rax, rax
.text:000000000000BBF5                 jz      short loc_BC0D
.text:000000000000BBF7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BC00
.text:000000000000BC00 loc_BC00:                               ; CODE XREF: hash_table_ok+3B↓j
.text:000000000000BC00                 mov     rax, [rax+8]
.text:000000000000BC04                 add     rdx, 1
.text:000000000000BC08                 test    rax, rax
.text:000000000000BC0B                 jnz     short loc_BC00
.text:000000000000BC0D
.text:000000000000BC0D loc_BC0D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000BC0D                                         ; hash_table_ok+25↑j
.text:000000000000BC0D                 add     rcx, 10h
.text:000000000000BC11                 cmp     rcx, r8
.text:000000000000BC14                 jb      short loc_BBE0
.text:000000000000BC16
.text:000000000000BC16 loc_BC16:                               ; CODE XREF: hash_table_ok+E↑j
.text:000000000000BC16                 xor     eax, eax
.text:000000000000BC18                 cmp     [rdi+18h], rsi
.text:000000000000BC1C                 jz      short loc_BC20
.text:000000000000BC1E                 rep retn
.text:000000000000BC20 ; ---------------------------------------------------------------------------
.text:000000000000BC20
.text:000000000000BC20 loc_BC20:                               ; CODE XREF: hash_table_ok+4C↑j
.text:000000000000BC20                 cmp     [rdi+20h], rdx
.text:000000000000BC24                 setz    al
.text:000000000000BC27                 retn
.text:000000000000BC27 ; } // starts at BBD0
.text:000000000000BC27 hash_table_ok   endp
.text:000000000000BC27
.text:000000000000BC27 ; ---------------------------------------------------------------------------
.text:000000000000BC28                 align 10h
.text:000000000000BC30
.text:000000000000BC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC30
.text:000000000000BC30 ; Attributes: info_from_lumina
.text:000000000000BC30
.text:000000000000BC30 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:000000000000BC30                 public hash_print_statistics
.text:000000000000BC30 hash_print_statistics proc near
.text:000000000000BC30 ; __unwind {
.text:000000000000BC30                 push    r13
.text:000000000000BC32                 push    r12
.text:000000000000BC34                 mov     r12, rsi
.text:000000000000BC37                 push    rbp
.text:000000000000BC38                 push    rbx
.text:000000000000BC39                 xor     ebx, ebx
.text:000000000000BC3B                 sub     rsp, 8
.text:000000000000BC3F                 mov     rsi, [rdi]
.text:000000000000BC42                 mov     rcx, [rdi+20h]
.text:000000000000BC46                 mov     rbp, [rdi+10h]
.text:000000000000BC4A                 mov     r13, [rdi+18h]
.text:000000000000BC4E                 mov     rdi, [rdi+8]
.text:000000000000BC52                 cmp     rsi, rdi
.text:000000000000BC55                 jnb     short loc_BC95
.text:000000000000BC57                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BC60
.text:000000000000BC60 loc_BC60:                               ; CODE XREF: hash_print_statistics+63↓j
.text:000000000000BC60                 cmp     qword ptr [rsi], 0
.text:000000000000BC64                 jz      short loc_BC8C
.text:000000000000BC66                 mov     rax, [rsi+8]
.text:000000000000BC6A                 mov     edx, 1
.text:000000000000BC6F                 test    rax, rax
.text:000000000000BC72                 jz      short loc_BC85
.text:000000000000BC74                 nop     dword ptr [rax+00h]
.text:000000000000BC78
.text:000000000000BC78 loc_BC78:                               ; CODE XREF: hash_print_statistics+53↓j
.text:000000000000BC78                 mov     rax, [rax+8]
.text:000000000000BC7C                 add     rdx, 1
.text:000000000000BC80                 test    rax, rax
.text:000000000000BC83                 jnz     short loc_BC78
.text:000000000000BC85
.text:000000000000BC85 loc_BC85:                               ; CODE XREF: hash_print_statistics+42↑j
.text:000000000000BC85                 cmp     rbx, rdx
.text:000000000000BC88                 cmovb   rbx, rdx
.text:000000000000BC8C
.text:000000000000BC8C loc_BC8C:                               ; CODE XREF: hash_print_statistics+34↑j
.text:000000000000BC8C                 add     rsi, 10h
.text:000000000000BC90                 cmp     rsi, rdi
.text:000000000000BC93                 jb      short loc_BC60
.text:000000000000BC95
.text:000000000000BC95 loc_BC95:                               ; CODE XREF: hash_print_statistics+25↑j
.text:000000000000BC95                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000BC9C                 mov     esi, 1
.text:000000000000BCA1                 mov     rdi, r12
.text:000000000000BCA4                 xor     eax, eax
.text:000000000000BCA6                 call    ___fprintf_chk
.text:000000000000BCAB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:000000000000BCB2                 xor     eax, eax
.text:000000000000BCB4                 mov     rcx, rbp
.text:000000000000BCB7                 mov     esi, 1
.text:000000000000BCBC                 mov     rdi, r12
.text:000000000000BCBF                 call    ___fprintf_chk
.text:000000000000BCC4                 test    r13, r13
.text:000000000000BCC7                 js      short loc_BD30
.text:000000000000BCC9                 pxor    xmm0, xmm0
.text:000000000000BCCD                 test    rbp, rbp
.text:000000000000BCD0                 cvtsi2sd xmm0, r13
.text:000000000000BCD5                 mulsd   xmm0, cs:qword_16A48
.text:000000000000BCDD                 js      short loc_BD59
.text:000000000000BCDF
.text:000000000000BCDF loc_BCDF:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000BCDF                 pxor    xmm1, xmm1
.text:000000000000BCE3                 cvtsi2sd xmm1, rbp
.text:000000000000BCE8
.text:000000000000BCE8 loc_BCE8:                               ; CODE XREF: hash_print_statistics+142↓j
.text:000000000000BCE8                 divsd   xmm0, xmm1
.text:000000000000BCEC                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:000000000000BCF3                 mov     rcx, r13
.text:000000000000BCF6                 mov     rdi, r12
.text:000000000000BCF9                 mov     esi, 1
.text:000000000000BCFE                 mov     eax, 1
.text:000000000000BD03                 call    ___fprintf_chk
.text:000000000000BD08                 add     rsp, 8
.text:000000000000BD0C                 mov     rcx, rbx
.text:000000000000BD0F                 mov     rdi, r12
.text:000000000000BD12                 pop     rbx
.text:000000000000BD13                 pop     rbp
.text:000000000000BD14                 pop     r12
.text:000000000000BD16                 pop     r13
.text:000000000000BD18                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000BD1F                 mov     esi, 1
.text:000000000000BD24                 xor     eax, eax
.text:000000000000BD26                 jmp     ___fprintf_chk
.text:000000000000BD26 ; ---------------------------------------------------------------------------
.text:000000000000BD2B                 align 10h
.text:000000000000BD30
.text:000000000000BD30 loc_BD30:                               ; CODE XREF: hash_print_statistics+97↑j
.text:000000000000BD30                 mov     rax, r13
.text:000000000000BD33                 mov     rdx, r13
.text:000000000000BD36                 pxor    xmm0, xmm0
.text:000000000000BD3A                 shr     rax, 1
.text:000000000000BD3D                 and     edx, 1
.text:000000000000BD40                 or      rax, rdx
.text:000000000000BD43                 test    rbp, rbp
.text:000000000000BD46                 cvtsi2sd xmm0, rax
.text:000000000000BD4B                 addsd   xmm0, xmm0
.text:000000000000BD4F                 mulsd   xmm0, cs:qword_16A48
.text:000000000000BD57                 jns     short loc_BCDF
.text:000000000000BD59
.text:000000000000BD59 loc_BD59:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:000000000000BD59                 mov     rax, rbp
.text:000000000000BD5C                 pxor    xmm1, xmm1
.text:000000000000BD60                 shr     rax, 1
.text:000000000000BD63                 and     ebp, 1
.text:000000000000BD66                 or      rax, rbp
.text:000000000000BD69                 cvtsi2sd xmm1, rax
.text:000000000000BD6E                 addsd   xmm1, xmm1
.text:000000000000BD72                 jmp     loc_BCE8
.text:000000000000BD72 ; } // starts at BC30
.text:000000000000BD72 hash_print_statistics endp
.text:000000000000BD72
.text:000000000000BD72 ; ---------------------------------------------------------------------------
.text:000000000000BD77                 align 20h
.text:000000000000BD80
.text:000000000000BD80 ; =============== S U B R O U T I N E =======================================
.text:000000000000BD80
.text:000000000000BD80 ; Attributes: info_from_lumina
.text:000000000000BD80
.text:000000000000BD80 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:000000000000BD80                 public hash_lookup
.text:000000000000BD80 hash_lookup     proc near               ; CODE XREF: src_to_dest_lookup+27↑p
.text:000000000000BD80                                         ; seen_file+31↑p ...
.text:000000000000BD80 ; __unwind {
.text:000000000000BD80                 push    r12
.text:000000000000BD82                 push    rbp
.text:000000000000BD83                 mov     r12, rdi
.text:000000000000BD86                 push    rbx
.text:000000000000BD87                 mov     rbp, rsi
.text:000000000000BD8A                 call    safe_hasher
.text:000000000000BD8F                 mov     rsi, [rax]
.text:000000000000BD92                 test    rsi, rsi
.text:000000000000BD95                 jz      short loc_BDBD
.text:000000000000BD97                 mov     rbx, rax
.text:000000000000BD9A                 jmp     short loc_BDA3
.text:000000000000BD9A ; ---------------------------------------------------------------------------
.text:000000000000BD9C                 align 20h
.text:000000000000BDA0
.text:000000000000BDA0 loc_BDA0:                               ; CODE XREF: hash_lookup+3B↓j
.text:000000000000BDA0                 mov     rsi, [rbx]
.text:000000000000BDA3
.text:000000000000BDA3 loc_BDA3:                               ; CODE XREF: hash_lookup+1A↑j
.text:000000000000BDA3                 cmp     rsi, rbp
.text:000000000000BDA6                 jz      short loc_BDBF
.text:000000000000BDA8                 mov     rdi, rbp
.text:000000000000BDAB                 call    qword ptr [r12+38h]
.text:000000000000BDB0                 test    al, al
.text:000000000000BDB2                 jnz     short loc_BDD0
.text:000000000000BDB4                 mov     rbx, [rbx+8]
.text:000000000000BDB8                 test    rbx, rbx
.text:000000000000BDBB                 jnz     short loc_BDA0
.text:000000000000BDBD
.text:000000000000BDBD loc_BDBD:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000BDBD                 xor     esi, esi
.text:000000000000BDBF
.text:000000000000BDBF loc_BDBF:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000BDBF                 pop     rbx
.text:000000000000BDC0                 mov     rax, rsi
.text:000000000000BDC3                 pop     rbp
.text:000000000000BDC4                 pop     r12
.text:000000000000BDC6                 retn
.text:000000000000BDC6 ; ---------------------------------------------------------------------------
.text:000000000000BDC7                 align 10h
.text:000000000000BDD0
.text:000000000000BDD0 loc_BDD0:                               ; CODE XREF: hash_lookup+32↑j
.text:000000000000BDD0                 mov     rsi, [rbx]
.text:000000000000BDD3                 pop     rbx
.text:000000000000BDD4                 pop     rbp
.text:000000000000BDD5                 mov     rax, rsi
.text:000000000000BDD8                 pop     r12
.text:000000000000BDDA                 retn
.text:000000000000BDDA ; } // starts at BD80
.text:000000000000BDDA hash_lookup     endp
.text:000000000000BDDA
.text:000000000000BDDA ; ---------------------------------------------------------------------------
.text:000000000000BDDB                 align 20h
.text:000000000000BDE0
.text:000000000000BDE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDE0
.text:000000000000BDE0 ; Attributes: info_from_lumina
.text:000000000000BDE0
.text:000000000000BDE0 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:000000000000BDE0                 public hash_get_first
.text:000000000000BDE0 hash_get_first  proc near
.text:000000000000BDE0 ; __unwind {
.text:000000000000BDE0                 cmp     qword ptr [rdi+20h], 0
.text:000000000000BDE5                 jz      short loc_BE13
.text:000000000000BDE7                 mov     rdx, [rdi]
.text:000000000000BDEA                 mov     rcx, [rdi+8]
.text:000000000000BDEE                 cmp     rdx, rcx
.text:000000000000BDF1                 jnb     short loc_BE18
.text:000000000000BDF3                 mov     rax, [rdx]
.text:000000000000BDF6                 test    rax, rax
.text:000000000000BDF9                 jnz     short locret_BE16
.text:000000000000BDFB                 nop     dword ptr [rax+rax+00h]
.text:000000000000BE00
.text:000000000000BE00 loc_BE00:                               ; CODE XREF: hash_get_first+2F↓j
.text:000000000000BE00                 add     rdx, 10h
.text:000000000000BE04                 cmp     rdx, rcx
.text:000000000000BE07                 jnb     short loc_BE18
.text:000000000000BE09                 mov     rax, [rdx]
.text:000000000000BE0C                 test    rax, rax
.text:000000000000BE0F                 jz      short loc_BE00
.text:000000000000BE11                 rep retn
.text:000000000000BE13 ; ---------------------------------------------------------------------------
.text:000000000000BE13
.text:000000000000BE13 loc_BE13:                               ; CODE XREF: hash_get_first+5↑j
.text:000000000000BE13                 xor     eax, eax
.text:000000000000BE15                 retn
.text:000000000000BE16 ; ---------------------------------------------------------------------------
.text:000000000000BE16
.text:000000000000BE16 locret_BE16:                            ; CODE XREF: hash_get_first+19↑j
.text:000000000000BE16                 rep retn
.text:000000000000BE18 ; ---------------------------------------------------------------------------
.text:000000000000BE18
.text:000000000000BE18 loc_BE18:                               ; CODE XREF: hash_get_first+11↑j
.text:000000000000BE18                                         ; hash_get_first+27↑j
.text:000000000000BE18                 sub     rsp, 8
.text:000000000000BE1C                 call    _abort
.text:000000000000BE1C ; } // starts at BDE0
.text:000000000000BE1C hash_get_first  endp
.text:000000000000BE1C
.text:000000000000BE1C ; ---------------------------------------------------------------------------
.text:000000000000BE21                 align 10h
.text:000000000000BE30
.text:000000000000BE30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE30
.text:000000000000BE30 ; Attributes: info_from_lumina
.text:000000000000BE30
.text:000000000000BE30 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:000000000000BE30                 public hash_get_next
.text:000000000000BE30 hash_get_next   proc near
.text:000000000000BE30 ; __unwind {
.text:000000000000BE30                 push    rbp
.text:000000000000BE31                 push    rbx
.text:000000000000BE32                 mov     rbp, rdi
.text:000000000000BE35                 mov     rbx, rsi
.text:000000000000BE38                 sub     rsp, 8
.text:000000000000BE3C                 call    safe_hasher
.text:000000000000BE41                 mov     rdx, rax
.text:000000000000BE44                 mov     rcx, rax
.text:000000000000BE47                 mov     rax, [rdx]
.text:000000000000BE4A                 mov     rdx, [rdx+8]
.text:000000000000BE4E                 cmp     rax, rbx
.text:000000000000BE51                 jz      short loc_BE69
.text:000000000000BE53                 nop     dword ptr [rax+rax+00h]
.text:000000000000BE58
.text:000000000000BE58 loc_BE58:                               ; CODE XREF: hash_get_next+37↓j
.text:000000000000BE58                 test    rdx, rdx
.text:000000000000BE5B                 jz      short loc_BE6E
.text:000000000000BE5D                 mov     rax, [rdx]
.text:000000000000BE60                 mov     rdx, [rdx+8]
.text:000000000000BE64                 cmp     rax, rbx
.text:000000000000BE67                 jnz     short loc_BE58
.text:000000000000BE69
.text:000000000000BE69 loc_BE69:                               ; CODE XREF: hash_get_next+21↑j
.text:000000000000BE69                 test    rdx, rdx
.text:000000000000BE6C                 jnz     short loc_BE98
.text:000000000000BE6E
.text:000000000000BE6E loc_BE6E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000BE6E                 mov     rdx, [rbp+8]
.text:000000000000BE72                 jmp     short loc_BE80
.text:000000000000BE72 ; ---------------------------------------------------------------------------
.text:000000000000BE74                 align 8
.text:000000000000BE78
.text:000000000000BE78 loc_BE78:                               ; CODE XREF: hash_get_next+57↓j
.text:000000000000BE78                 mov     rax, [rcx]
.text:000000000000BE7B                 test    rax, rax
.text:000000000000BE7E                 jnz     short loc_BE8B
.text:000000000000BE80
.text:000000000000BE80 loc_BE80:                               ; CODE XREF: hash_get_next+42↑j
.text:000000000000BE80                 add     rcx, 10h
.text:000000000000BE84                 cmp     rdx, rcx
.text:000000000000BE87                 ja      short loc_BE78
.text:000000000000BE89                 xor     eax, eax
.text:000000000000BE8B
.text:000000000000BE8B loc_BE8B:                               ; CODE XREF: hash_get_next+4E↑j
.text:000000000000BE8B                 add     rsp, 8
.text:000000000000BE8F                 pop     rbx
.text:000000000000BE90                 pop     rbp
.text:000000000000BE91                 retn
.text:000000000000BE91 ; ---------------------------------------------------------------------------
.text:000000000000BE92                 align 8
.text:000000000000BE98
.text:000000000000BE98 loc_BE98:                               ; CODE XREF: hash_get_next+3C↑j
.text:000000000000BE98                 mov     rax, [rdx]
.text:000000000000BE9B                 add     rsp, 8
.text:000000000000BE9F                 pop     rbx
.text:000000000000BEA0                 pop     rbp
.text:000000000000BEA1                 retn
.text:000000000000BEA1 ; } // starts at BE30
.text:000000000000BEA1 hash_get_next   endp
.text:000000000000BEA1
.text:000000000000BEA1 ; ---------------------------------------------------------------------------
.text:000000000000BEA2                 align 10h
.text:000000000000BEB0
.text:000000000000BEB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BEB0
.text:000000000000BEB0 ; Attributes: info_from_lumina
.text:000000000000BEB0
.text:000000000000BEB0 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:000000000000BEB0                 public hash_get_entries
.text:000000000000BEB0 hash_get_entries proc near
.text:000000000000BEB0 ; __unwind {
.text:000000000000BEB0                 mov     r9, [rdi]
.text:000000000000BEB3                 cmp     [rdi+8], r9
.text:000000000000BEB7                 jbe     short loc_BF12
.text:000000000000BEB9                 xor     r8d, r8d
.text:000000000000BEBC
.text:000000000000BEBC loc_BEBC:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000BEBC                 mov     rcx, [r9]
.text:000000000000BEBF                 test    rcx, rcx
.text:000000000000BEC2                 jz      short loc_BEFD
.text:000000000000BEC4                 cmp     rdx, r8
.text:000000000000BEC7                 jbe     short loc_BF07
.text:000000000000BEC9                 mov     [rsi+r8*8], rcx
.text:000000000000BECD                 mov     rcx, [r9+8]
.text:000000000000BED1                 lea     rax, [r8+1]
.text:000000000000BED5                 test    rcx, rcx
.text:000000000000BED8                 jz      short loc_BEFA
.text:000000000000BEDA                 nop     word ptr [rax+rax+00h]
.text:000000000000BEE0
.text:000000000000BEE0 loc_BEE0:                               ; CODE XREF: hash_get_entries+48↓j
.text:000000000000BEE0                 cmp     rdx, rax
.text:000000000000BEE3                 jz      short locret_BF10
.text:000000000000BEE5                 mov     r8, [rcx]
.text:000000000000BEE8                 add     rax, 1
.text:000000000000BEEC                 mov     [rsi+rax*8-8], r8
.text:000000000000BEF1                 mov     rcx, [rcx+8]
.text:000000000000BEF5                 test    rcx, rcx
.text:000000000000BEF8                 jnz     short loc_BEE0
.text:000000000000BEFA
.text:000000000000BEFA loc_BEFA:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000BEFA                 mov     r8, rax
.text:000000000000BEFD
.text:000000000000BEFD loc_BEFD:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000BEFD                 add     r9, 10h
.text:000000000000BF01                 cmp     [rdi+8], r9
.text:000000000000BF05                 ja      short loc_BEBC
.text:000000000000BF07
.text:000000000000BF07 loc_BF07:                               ; CODE XREF: hash_get_entries+17↑j
.text:000000000000BF07                 mov     rax, r8
.text:000000000000BF0A                 retn
.text:000000000000BF0A ; ---------------------------------------------------------------------------
.text:000000000000BF0B                 align 10h
.text:000000000000BF10
.text:000000000000BF10 locret_BF10:                            ; CODE XREF: hash_get_entries+33↑j
.text:000000000000BF10                 rep retn
.text:000000000000BF12 ; ---------------------------------------------------------------------------
.text:000000000000BF12
.text:000000000000BF12 loc_BF12:                               ; CODE XREF: hash_get_entries+7↑j
.text:000000000000BF12                 xor     eax, eax
.text:000000000000BF14                 retn
.text:000000000000BF14 ; } // starts at BEB0
.text:000000000000BF14 hash_get_entries endp
.text:000000000000BF14
.text:000000000000BF14 ; ---------------------------------------------------------------------------
.text:000000000000BF15                 align 20h
.text:000000000000BF20
.text:000000000000BF20 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF20
.text:000000000000BF20 ; Attributes: info_from_lumina
.text:000000000000BF20
.text:000000000000BF20 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:000000000000BF20                 public hash_do_for_each
.text:000000000000BF20 hash_do_for_each proc near
.text:000000000000BF20 ; __unwind {
.text:000000000000BF20                 push    r15
.text:000000000000BF22                 push    r14
.text:000000000000BF24                 push    r13
.text:000000000000BF26                 push    r12
.text:000000000000BF28                 push    rbp
.text:000000000000BF29                 push    rbx
.text:000000000000BF2A                 sub     rsp, 8
.text:000000000000BF2E                 mov     r14, [rdi]
.text:000000000000BF31                 cmp     [rdi+8], r14
.text:000000000000BF35                 jbe     short loc_BF86
.text:000000000000BF37                 mov     r13, rdx
.text:000000000000BF3A                 mov     r12, rsi
.text:000000000000BF3D                 mov     r15, rdi
.text:000000000000BF40                 xor     ebp, ebp
.text:000000000000BF42
.text:000000000000BF42 loc_BF42:                               ; CODE XREF: hash_do_for_each+52↓j
.text:000000000000BF42                 mov     rdi, [r14]
.text:000000000000BF45                 test    rdi, rdi
.text:000000000000BF48                 jz      short loc_BF6A
.text:000000000000BF4A                 mov     rbx, r14
.text:000000000000BF4D                 jmp     short loc_BF53
.text:000000000000BF4D ; ---------------------------------------------------------------------------
.text:000000000000BF4F                 align 10h
.text:000000000000BF50
.text:000000000000BF50 loc_BF50:                               ; CODE XREF: hash_do_for_each+48↓j
.text:000000000000BF50                 mov     rdi, [rbx]
.text:000000000000BF53
.text:000000000000BF53 loc_BF53:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:000000000000BF53                 mov     rsi, r13
.text:000000000000BF56                 call    r12
.text:000000000000BF59                 test    al, al
.text:000000000000BF5B                 jz      short loc_BF74
.text:000000000000BF5D                 mov     rbx, [rbx+8]
.text:000000000000BF61                 add     rbp, 1
.text:000000000000BF65                 test    rbx, rbx
.text:000000000000BF68                 jnz     short loc_BF50
.text:000000000000BF6A
.text:000000000000BF6A loc_BF6A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000BF6A                 add     r14, 10h
.text:000000000000BF6E                 cmp     [r15+8], r14
.text:000000000000BF72                 ja      short loc_BF42
.text:000000000000BF74
.text:000000000000BF74 loc_BF74:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:000000000000BF74                                         ; hash_do_for_each+68↓j
.text:000000000000BF74                 add     rsp, 8
.text:000000000000BF78                 mov     rax, rbp
.text:000000000000BF7B                 pop     rbx
.text:000000000000BF7C                 pop     rbp
.text:000000000000BF7D                 pop     r12
.text:000000000000BF7F                 pop     r13
.text:000000000000BF81                 pop     r14
.text:000000000000BF83                 pop     r15
.text:000000000000BF85                 retn
.text:000000000000BF86 ; ---------------------------------------------------------------------------
.text:000000000000BF86
.text:000000000000BF86 loc_BF86:                               ; CODE XREF: hash_do_for_each+15↑j
.text:000000000000BF86                 xor     ebp, ebp
.text:000000000000BF88                 jmp     short loc_BF74
.text:000000000000BF88 ; } // starts at BF20
.text:000000000000BF88 hash_do_for_each endp
.text:000000000000BF88
.text:000000000000BF88 ; ---------------------------------------------------------------------------
.text:000000000000BF8A                 align 10h
.text:000000000000BF90
.text:000000000000BF90 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF90
.text:000000000000BF90 ; Attributes: info_from_lumina
.text:000000000000BF90
.text:000000000000BF90 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:000000000000BF90                 public hash_string
.text:000000000000BF90 hash_string     proc near
.text:000000000000BF90 ; __unwind {
.text:000000000000BF90                 movzx   ecx, byte ptr [rdi]
.text:000000000000BF93                 xor     edx, edx
.text:000000000000BF95                 test    cl, cl
.text:000000000000BF97                 jz      short loc_BFBD
.text:000000000000BF99                 nop     dword ptr [rax+00000000h]
.text:000000000000BFA0
.text:000000000000BFA0 loc_BFA0:                               ; CODE XREF: hash_string+2B↓j
.text:000000000000BFA0                 mov     rax, rdx
.text:000000000000BFA3                 add     rdi, 1
.text:000000000000BFA7                 shl     rax, 5
.text:000000000000BFAB                 sub     rax, rdx
.text:000000000000BFAE                 xor     edx, edx
.text:000000000000BFB0                 add     rax, rcx
.text:000000000000BFB3                 movzx   ecx, byte ptr [rdi]
.text:000000000000BFB6                 div     rsi
.text:000000000000BFB9                 test    cl, cl
.text:000000000000BFBB                 jnz     short loc_BFA0
.text:000000000000BFBD
.text:000000000000BFBD loc_BFBD:                               ; CODE XREF: hash_string+7↑j
.text:000000000000BFBD                 mov     rax, rdx
.text:000000000000BFC0                 retn
.text:000000000000BFC0 ; } // starts at BF90
.text:000000000000BFC0 hash_string     endp
.text:000000000000BFC0
.text:000000000000BFC0 ; ---------------------------------------------------------------------------
.text:000000000000BFC1                 align 10h
.text:000000000000BFD0
.text:000000000000BFD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFD0
.text:000000000000BFD0 ; Attributes: info_from_lumina
.text:000000000000BFD0
.text:000000000000BFD0 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:000000000000BFD0                 public hash_reset_tuning
.text:000000000000BFD0 hash_reset_tuning proc near
.text:000000000000BFD0 ; __unwind {
.text:000000000000BFD0                 mov     rax, 3F80000000000000h
.text:000000000000BFDA                 mov     byte ptr [rdi+10h], 0
.text:000000000000BFDE                 mov     [rdi], rax
.text:000000000000BFE1                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000BFEB                 mov     [rdi+8], rax
.text:000000000000BFEF                 retn
.text:000000000000BFEF ; } // starts at BFD0
.text:000000000000BFEF hash_reset_tuning endp
.text:000000000000BFEF
.text:000000000000BFF0
.text:000000000000BFF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFF0
.text:000000000000BFF0 ; Attributes: info_from_lumina
.text:000000000000BFF0
.text:000000000000BFF0 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:000000000000BFF0                 public hash_initialize
.text:000000000000BFF0 hash_initialize proc near               ; CODE XREF: dest_info_init+20↑p
.text:000000000000BFF0                                         ; src_info_init+20↑p ...
.text:000000000000BFF0 ; __unwind {
.text:000000000000BFF0                 push    r15
.text:000000000000BFF2                 push    r14
.text:000000000000BFF4                 lea     rax, raw_hasher
.text:000000000000BFFB                 push    r13
.text:000000000000BFFD                 push    r12
.text:000000000000BFFF                 mov     r12, rdx
.text:000000000000C002                 push    rbp
.text:000000000000C003                 push    rbx
.text:000000000000C004                 mov     r13, rcx
.text:000000000000C007                 mov     rbp, rdi
.text:000000000000C00A                 mov     edi, 50h ; 'P'  ; size
.text:000000000000C00F                 mov     r15, rsi
.text:000000000000C012                 sub     rsp, 8
.text:000000000000C016                 test    rdx, rdx
.text:000000000000C019                 mov     r14, r8
.text:000000000000C01C                 cmovz   r12, rax
.text:000000000000C020                 lea     rax, raw_comparator
.text:000000000000C027                 test    rcx, rcx
.text:000000000000C02A                 cmovz   r13, rax
.text:000000000000C02E                 call    _malloc
.text:000000000000C033                 test    rax, rax
.text:000000000000C036                 mov     rbx, rax
.text:000000000000C039                 jz      loc_C0EA
.text:000000000000C03F                 test    r15, r15
.text:000000000000C042                 lea     rdi, [rax+28h]
.text:000000000000C046                 jz      loc_C100
.text:000000000000C04C                 mov     [rax+28h], r15
.text:000000000000C050                 call    check_tuning
.text:000000000000C055                 test    al, al
.text:000000000000C057                 jz      loc_C0E0
.text:000000000000C05D                 cmp     byte ptr [r15+10h], 0
.text:000000000000C062                 jz      loc_C160
.text:000000000000C068
.text:000000000000C068 loc_C068:                               ; CODE XREF: hash_initialize+16A↓j
.text:000000000000C068                                         ; hash_initialize+1A5↓j
.text:000000000000C068                 mov     rdi, rbp
.text:000000000000C06B                 call    next_prime
.text:000000000000C070                 mov     edx, 8
.text:000000000000C075                 mov     rbp, rax
.text:000000000000C078                 xor     ecx, ecx
.text:000000000000C07A                 mov     rax, rdx
.text:000000000000C07D                 mul     rbp
.text:000000000000C080                 jo      loc_C19A
.text:000000000000C086
.text:000000000000C086 loc_C086:                               ; CODE XREF: hash_initialize+1AF↓j
.text:000000000000C086                 test    rax, rax
.text:000000000000C089                 js      short loc_C0E0
.text:000000000000C08B                 test    rcx, rcx
.text:000000000000C08E                 jnz     short loc_C0E0
.text:000000000000C090                 test    rbp, rbp
.text:000000000000C093                 mov     [rbx+10h], rbp
.text:000000000000C097                 jz      short loc_C0E0
.text:000000000000C099                 mov     esi, 10h        ; size
.text:000000000000C09E                 mov     rdi, rbp        ; nmemb
.text:000000000000C0A1                 call    _calloc
.text:000000000000C0A6                 test    rax, rax
.text:000000000000C0A9                 mov     [rbx], rax
.text:000000000000C0AC                 jz      short loc_C0E0
.text:000000000000C0AE                 shl     rbp, 4
.text:000000000000C0B2                 mov     qword ptr [rbx+18h], 0
.text:000000000000C0BA                 mov     qword ptr [rbx+20h], 0
.text:000000000000C0C2                 add     rbp, rax
.text:000000000000C0C5                 mov     [rbx+30h], r12
.text:000000000000C0C9                 mov     [rbx+38h], r13
.text:000000000000C0CD                 mov     [rbx+8], rbp
.text:000000000000C0D1                 mov     [rbx+40h], r14
.text:000000000000C0D5                 mov     qword ptr [rbx+48h], 0
.text:000000000000C0DD                 jmp     short loc_C0EA
.text:000000000000C0DD ; ---------------------------------------------------------------------------
.text:000000000000C0DF                 align 20h
.text:000000000000C0E0
.text:000000000000C0E0 loc_C0E0:                               ; CODE XREF: hash_initialize+67↑j
.text:000000000000C0E0                                         ; hash_initialize+99↑j ...
.text:000000000000C0E0                 mov     rdi, rbx        ; ptr
.text:000000000000C0E3                 xor     ebx, ebx
.text:000000000000C0E5                 call    free
.text:000000000000C0EA
.text:000000000000C0EA loc_C0EA:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000C0EA                                         ; hash_initialize+ED↑j
.text:000000000000C0EA                 add     rsp, 8
.text:000000000000C0EE                 mov     rax, rbx
.text:000000000000C0F1                 pop     rbx
.text:000000000000C0F2                 pop     rbp
.text:000000000000C0F3                 pop     r12
.text:000000000000C0F5                 pop     r13
.text:000000000000C0F7                 pop     r14
.text:000000000000C0F9                 pop     r15
.text:000000000000C0FB                 retn
.text:000000000000C0FB ; ---------------------------------------------------------------------------
.text:000000000000C0FC                 align 20h
.text:000000000000C100
.text:000000000000C100 loc_C100:                               ; CODE XREF: hash_initialize+56↑j
.text:000000000000C100                 lea     rax, default_tuning
.text:000000000000C107                 mov     [rbx+28h], rax
.text:000000000000C10B                 call    check_tuning
.text:000000000000C110                 test    al, al
.text:000000000000C112                 movss   xmm1, cs:dword_16A38
.text:000000000000C11A                 jz      short loc_C0E0
.text:000000000000C11C                 test    rbp, rbp
.text:000000000000C11F                 js      short loc_C16B
.text:000000000000C121
.text:000000000000C121 loc_C121:                               ; CODE XREF: hash_initialize+179↓j
.text:000000000000C121                 pxor    xmm0, xmm0
.text:000000000000C125                 cvtsi2ss xmm0, rbp
.text:000000000000C12A
.text:000000000000C12A loc_C12A:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000C12A                 divss   xmm0, xmm1
.text:000000000000C12E                 ucomiss xmm0, cs:dword_16A3C
.text:000000000000C135                 jnb     short loc_C0E0
.text:000000000000C137                 ucomiss xmm0, cs:dword_16A40
.text:000000000000C13E                 jb      short loc_C190
.text:000000000000C140                 subss   xmm0, cs:dword_16A40
.text:000000000000C148                 mov     rax, 8000000000000000h
.text:000000000000C152                 cvttss2si rbp, xmm0
.text:000000000000C157                 xor     rbp, rax
.text:000000000000C15A                 jmp     loc_C068
.text:000000000000C15A ; ---------------------------------------------------------------------------
.text:000000000000C15F                 align 20h
.text:000000000000C160
.text:000000000000C160 loc_C160:                               ; CODE XREF: hash_initialize+72↑j
.text:000000000000C160                 test    rbp, rbp
.text:000000000000C163                 movss   xmm1, dword ptr [r15+8]
.text:000000000000C169                 jns     short loc_C121
.text:000000000000C16B
.text:000000000000C16B loc_C16B:                               ; CODE XREF: hash_initialize+12F↑j
.text:000000000000C16B                 mov     rax, rbp
.text:000000000000C16E                 pxor    xmm0, xmm0
.text:000000000000C172                 shr     rax, 1
.text:000000000000C175                 and     ebp, 1
.text:000000000000C178                 or      rax, rbp
.text:000000000000C17B                 cvtsi2ss xmm0, rax
.text:000000000000C180                 addss   xmm0, xmm0
.text:000000000000C184                 jmp     short loc_C12A
.text:000000000000C184 ; ---------------------------------------------------------------------------
.text:000000000000C186                 align 10h
.text:000000000000C190
.text:000000000000C190 loc_C190:                               ; CODE XREF: hash_initialize+14E↑j
.text:000000000000C190                 cvttss2si rbp, xmm0
.text:000000000000C195                 jmp     loc_C068
.text:000000000000C19A ; ---------------------------------------------------------------------------
.text:000000000000C19A
.text:000000000000C19A loc_C19A:                               ; CODE XREF: hash_initialize+90↑j
.text:000000000000C19A                 mov     ecx, 1
.text:000000000000C19F                 jmp     loc_C086
.text:000000000000C19F ; } // starts at BFF0
.text:000000000000C19F hash_initialize endp
.text:000000000000C19F
.text:000000000000C19F ; ---------------------------------------------------------------------------
.text:000000000000C1A4                 align 10h
.text:000000000000C1B0
.text:000000000000C1B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C1B0
.text:000000000000C1B0 ; Attributes: info_from_lumina
.text:000000000000C1B0
.text:000000000000C1B0 ; void __fastcall hash_clear(Hash_table *table)
.text:000000000000C1B0                 public hash_clear
.text:000000000000C1B0 hash_clear      proc near
.text:000000000000C1B0 ; __unwind {
.text:000000000000C1B0                 push    r12
.text:000000000000C1B2                 push    rbp
.text:000000000000C1B3                 mov     rbp, rdi
.text:000000000000C1B6                 push    rbx
.text:000000000000C1B7                 mov     r12, [rdi]
.text:000000000000C1BA                 cmp     r12, [rdi+8]
.text:000000000000C1BE                 jnb     short loc_C22B
.text:000000000000C1C0
.text:000000000000C1C0 loc_C1C0:                               ; CODE XREF: hash_clear+79↓j
.text:000000000000C1C0                 cmp     qword ptr [r12], 0
.text:000000000000C1C5                 jz      short loc_C221
.text:000000000000C1C7                 mov     rbx, [r12+8]
.text:000000000000C1CC                 mov     rax, [rbp+40h]
.text:000000000000C1D0                 test    rbx, rbx
.text:000000000000C1D3                 jz      short loc_C205
.text:000000000000C1D5                 nop     dword ptr [rax]
.text:000000000000C1D8
.text:000000000000C1D8 loc_C1D8:                               ; CODE XREF: hash_clear+53↓j
.text:000000000000C1D8                 test    rax, rax
.text:000000000000C1DB                 jz      short loc_C1E6
.text:000000000000C1DD                 mov     rdi, [rbx]
.text:000000000000C1E0                 call    rax
.text:000000000000C1E2                 mov     rax, [rbp+40h]
.text:000000000000C1E6
.text:000000000000C1E6 loc_C1E6:                               ; CODE XREF: hash_clear+2B↑j
.text:000000000000C1E6                 mov     rdx, [rbx+8]
.text:000000000000C1EA                 mov     rcx, [rbp+48h]
.text:000000000000C1EE                 mov     qword ptr [rbx], 0
.text:000000000000C1F5                 test    rdx, rdx
.text:000000000000C1F8                 mov     [rbx+8], rcx
.text:000000000000C1FC                 mov     [rbp+48h], rbx
.text:000000000000C200                 mov     rbx, rdx
.text:000000000000C203                 jnz     short loc_C1D8
.text:000000000000C205
.text:000000000000C205 loc_C205:                               ; CODE XREF: hash_clear+23↑j
.text:000000000000C205                 test    rax, rax
.text:000000000000C208                 jz      short loc_C210
.text:000000000000C20A                 mov     rdi, [r12]
.text:000000000000C20E                 call    rax
.text:000000000000C210
.text:000000000000C210 loc_C210:                               ; CODE XREF: hash_clear+58↑j
.text:000000000000C210                 mov     qword ptr [r12], 0
.text:000000000000C218                 mov     qword ptr [r12+8], 0
.text:000000000000C221
.text:000000000000C221 loc_C221:                               ; CODE XREF: hash_clear+15↑j
.text:000000000000C221                 add     r12, 10h
.text:000000000000C225                 cmp     [rbp+8], r12
.text:000000000000C229                 ja      short loc_C1C0
.text:000000000000C22B
.text:000000000000C22B loc_C22B:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000C22B                 mov     qword ptr [rbp+18h], 0
.text:000000000000C233                 mov     qword ptr [rbp+20h], 0
.text:000000000000C23B                 pop     rbx
.text:000000000000C23C                 pop     rbp
.text:000000000000C23D                 pop     r12
.text:000000000000C23F                 retn
.text:000000000000C23F ; } // starts at C1B0
.text:000000000000C23F hash_clear      endp
.text:000000000000C23F
.text:000000000000C240
.text:000000000000C240 ; =============== S U B R O U T I N E =======================================
.text:000000000000C240
.text:000000000000C240 ; Attributes: info_from_lumina
.text:000000000000C240
.text:000000000000C240 ; void __fastcall hash_free(Hash_table *table)
.text:000000000000C240                 public hash_free
.text:000000000000C240 hash_free       proc near               ; CODE XREF: forget_all+7↑j
.text:000000000000C240                                         ; rpl_fts_close+9A↓p ...
.text:000000000000C240 ; __unwind {
.text:000000000000C240                 push    r12
.text:000000000000C242                 push    rbp
.text:000000000000C243                 mov     r12, rdi
.text:000000000000C246                 push    rbx
.text:000000000000C247                 cmp     qword ptr [rdi+40h], 0
.text:000000000000C24C                 mov     rbp, [rdi]
.text:000000000000C24F                 mov     rax, [rdi+8]
.text:000000000000C253                 jz      short loc_C2A3
.text:000000000000C255                 cmp     qword ptr [rdi+20h], 0
.text:000000000000C25A                 jz      short loc_C2A3
.text:000000000000C25C                 cmp     rbp, rax
.text:000000000000C25F                 jnb     short loc_C2DC
.text:000000000000C261                 nop     dword ptr [rax+00000000h]
.text:000000000000C268
.text:000000000000C268 loc_C268:                               ; CODE XREF: hash_free+5D↓j
.text:000000000000C268                 mov     rdi, [rbp+0]
.text:000000000000C26C                 test    rdi, rdi
.text:000000000000C26F                 jz      short loc_C296
.text:000000000000C271                 mov     rbx, rbp
.text:000000000000C274                 jmp     short loc_C283
.text:000000000000C274 ; ---------------------------------------------------------------------------
.text:000000000000C276                 align 20h
.text:000000000000C280
.text:000000000000C280 loc_C280:                               ; CODE XREF: hash_free+4F↓j
.text:000000000000C280                 mov     rdi, [rbx]
.text:000000000000C283
.text:000000000000C283 loc_C283:                               ; CODE XREF: hash_free+34↑j
.text:000000000000C283                 call    qword ptr [r12+40h]
.text:000000000000C288                 mov     rbx, [rbx+8]
.text:000000000000C28C                 test    rbx, rbx
.text:000000000000C28F                 jnz     short loc_C280
.text:000000000000C291                 mov     rax, [r12+8]
.text:000000000000C296
.text:000000000000C296 loc_C296:                               ; CODE XREF: hash_free+2F↑j
.text:000000000000C296                 add     rbp, 10h
.text:000000000000C29A                 cmp     rax, rbp
.text:000000000000C29D                 ja      short loc_C268
.text:000000000000C29F                 mov     rbp, [r12]
.text:000000000000C2A3
.text:000000000000C2A3 loc_C2A3:                               ; CODE XREF: hash_free+13↑j
.text:000000000000C2A3                                         ; hash_free+1A↑j
.text:000000000000C2A3                 cmp     rbp, rax
.text:000000000000C2A6                 jnb     short loc_C2DC
.text:000000000000C2A8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000C2B0
.text:000000000000C2B0 loc_C2B0:                               ; CODE XREF: hash_free+9A↓j
.text:000000000000C2B0                 mov     rdi, [rbp+8]    ; ptr
.text:000000000000C2B4                 test    rdi, rdi
.text:000000000000C2B7                 jz      short loc_C2D1
.text:000000000000C2B9                 nop     dword ptr [rax+00000000h]
.text:000000000000C2C0
.text:000000000000C2C0 loc_C2C0:                               ; CODE XREF: hash_free+8F↓j
.text:000000000000C2C0                 mov     rbx, [rdi+8]
.text:000000000000C2C4                 call    free
.text:000000000000C2C9                 test    rbx, rbx
.text:000000000000C2CC                 mov     rdi, rbx
.text:000000000000C2CF                 jnz     short loc_C2C0
.text:000000000000C2D1
.text:000000000000C2D1 loc_C2D1:                               ; CODE XREF: hash_free+77↑j
.text:000000000000C2D1                 add     rbp, 10h
.text:000000000000C2D5                 cmp     [r12+8], rbp
.text:000000000000C2DA                 ja      short loc_C2B0
.text:000000000000C2DC
.text:000000000000C2DC loc_C2DC:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000C2DC                                         ; hash_free+66↑j
.text:000000000000C2DC                 mov     rdi, [r12+48h]  ; ptr
.text:000000000000C2E1                 test    rdi, rdi
.text:000000000000C2E4                 jz      short loc_C301
.text:000000000000C2E6                 db      2Eh
.text:000000000000C2E6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C2F0
.text:000000000000C2F0 loc_C2F0:                               ; CODE XREF: hash_free+BF↓j
.text:000000000000C2F0                 mov     rbx, [rdi+8]
.text:000000000000C2F4                 call    free
.text:000000000000C2F9                 test    rbx, rbx
.text:000000000000C2FC                 mov     rdi, rbx
.text:000000000000C2FF                 jnz     short loc_C2F0
.text:000000000000C301
.text:000000000000C301 loc_C301:                               ; CODE XREF: hash_free+A4↑j
.text:000000000000C301                 mov     rdi, [r12]      ; ptr
.text:000000000000C305                 call    free
.text:000000000000C30A                 pop     rbx
.text:000000000000C30B                 mov     rdi, r12        ; ptr
.text:000000000000C30E                 pop     rbp
.text:000000000000C30F                 pop     r12
.text:000000000000C311                 jmp     free
.text:000000000000C311 ; } // starts at C240
.text:000000000000C311 hash_free       endp
.text:000000000000C311
.text:000000000000C311 ; ---------------------------------------------------------------------------
.text:000000000000C316                 align 20h
.text:000000000000C320
.text:000000000000C320 ; =============== S U B R O U T I N E =======================================
.text:000000000000C320
.text:000000000000C320 ; Attributes: info_from_lumina
.text:000000000000C320
.text:000000000000C320 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:000000000000C320                 public hash_rehash
.text:000000000000C320 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:000000000000C320                                         ; hash_delete+10F↓p
.text:000000000000C320
.text:000000000000C320 ptr             = qword ptr -78h
.text:000000000000C320 var_70          = qword ptr -70h
.text:000000000000C320 var_68          = qword ptr -68h
.text:000000000000C320 var_60          = qword ptr -60h
.text:000000000000C320 var_58          = qword ptr -58h
.text:000000000000C320 var_50          = qword ptr -50h
.text:000000000000C320 var_48          = qword ptr -48h
.text:000000000000C320 var_40          = qword ptr -40h
.text:000000000000C320 var_38          = qword ptr -38h
.text:000000000000C320 var_30          = qword ptr -30h
.text:000000000000C320 var_20          = qword ptr -20h
.text:000000000000C320
.text:000000000000C320 ; __unwind {
.text:000000000000C320                 push    r12
.text:000000000000C322                 push    rbp
.text:000000000000C323                 mov     rbp, rdi
.text:000000000000C326                 push    rbx
.text:000000000000C327                 sub     rsp, 60h
.text:000000000000C32B                 mov     r12, [rdi+28h]
.text:000000000000C32F                 mov     rax, fs:28h
.text:000000000000C338                 mov     [rsp+78h+var_20], rax
.text:000000000000C33D                 xor     eax, eax
.text:000000000000C33F                 cmp     byte ptr [r12+10h], 0
.text:000000000000C345                 jnz     short loc_C398
.text:000000000000C347                 test    rsi, rsi
.text:000000000000C34A                 js      loc_C4C8
.text:000000000000C350                 pxor    xmm0, xmm0
.text:000000000000C354                 cvtsi2ss xmm0, rsi
.text:000000000000C359
.text:000000000000C359 loc_C359:                               ; CODE XREF: hash_rehash+1C1↓j
.text:000000000000C359                 divss   xmm0, dword ptr [r12+8]
.text:000000000000C360                 ucomiss xmm0, cs:dword_16A3C
.text:000000000000C367                 jnb     loc_C4A0
.text:000000000000C36D                 ucomiss xmm0, cs:dword_16A40
.text:000000000000C374                 jb      loc_C4F0
.text:000000000000C37A                 subss   xmm0, cs:dword_16A40
.text:000000000000C382                 mov     rax, 8000000000000000h
.text:000000000000C38C                 cvttss2si rsi, xmm0
.text:000000000000C391                 xor     rsi, rax
.text:000000000000C394                 nop     dword ptr [rax+00h]
.text:000000000000C398
.text:000000000000C398 loc_C398:                               ; CODE XREF: hash_rehash+25↑j
.text:000000000000C398                                         ; hash_rehash+1D5↓j
.text:000000000000C398                 mov     rdi, rsi
.text:000000000000C39B                 call    next_prime
.text:000000000000C3A0                 mov     edx, 8
.text:000000000000C3A5                 mov     rbx, rax
.text:000000000000C3A8                 xor     ecx, ecx
.text:000000000000C3AA                 mov     rax, rdx
.text:000000000000C3AD                 mul     rbx
.text:000000000000C3B0                 jo      loc_C54F
.text:000000000000C3B6
.text:000000000000C3B6 loc_C3B6:                               ; CODE XREF: hash_rehash+234↓j
.text:000000000000C3B6                 test    rax, rax
.text:000000000000C3B9                 mov     eax, 1
.text:000000000000C3BE                 cmovs   rcx, rax
.text:000000000000C3C2                 test    rbx, rbx
.text:000000000000C3C5                 jz      loc_C4A0
.text:000000000000C3CB                 and     ecx, 1
.text:000000000000C3CE                 jnz     loc_C4A0
.text:000000000000C3D4                 cmp     [rbp+10h], rbx
.text:000000000000C3D8                 jz      loc_C500
.text:000000000000C3DE                 mov     esi, 10h        ; size
.text:000000000000C3E3                 mov     rdi, rbx        ; nmemb
.text:000000000000C3E6                 call    _calloc
.text:000000000000C3EB                 test    rax, rax
.text:000000000000C3EE                 mov     [rsp+78h+ptr], rax
.text:000000000000C3F2                 jz      loc_C4A0
.text:000000000000C3F8                 mov     [rsp+78h+var_68], rbx
.text:000000000000C3FD                 shl     rbx, 4
.text:000000000000C401                 mov     [rsp+78h+var_50], r12
.text:000000000000C406                 add     rbx, rax
.text:000000000000C409                 mov     rax, [rbp+30h]
.text:000000000000C40D                 mov     r12, rsp
.text:000000000000C410                 xor     edx, edx
.text:000000000000C412                 mov     rsi, rbp
.text:000000000000C415                 mov     rdi, r12
.text:000000000000C418                 mov     [rsp+78h+var_70], rbx
.text:000000000000C41D                 mov     [rsp+78h+var_60], 0
.text:000000000000C426                 mov     [rsp+78h+var_48], rax
.text:000000000000C42B                 mov     rax, [rbp+38h]
.text:000000000000C42F                 mov     [rsp+78h+var_58], 0
.text:000000000000C438                 mov     [rsp+78h+var_40], rax
.text:000000000000C43D                 mov     rax, [rbp+40h]
.text:000000000000C441                 mov     [rsp+78h+var_38], rax
.text:000000000000C446                 mov     rax, [rbp+48h]
.text:000000000000C44A                 mov     [rsp+78h+var_30], rax
.text:000000000000C44F                 call    transfer_entries
.text:000000000000C454                 test    al, al
.text:000000000000C456                 mov     ebx, eax
.text:000000000000C458                 jnz     loc_C510
.text:000000000000C45E                 mov     rax, [rsp+78h+var_30]
.text:000000000000C463                 mov     edx, 1
.text:000000000000C468                 mov     rsi, r12
.text:000000000000C46B                 mov     rdi, rbp
.text:000000000000C46E                 mov     [rbp+48h], rax
.text:000000000000C472                 call    transfer_entries
.text:000000000000C477                 test    al, al
.text:000000000000C479                 jz      loc_C559
.text:000000000000C47F                 xor     edx, edx
.text:000000000000C481                 mov     rsi, r12
.text:000000000000C484                 mov     rdi, rbp
.text:000000000000C487                 call    transfer_entries
.text:000000000000C48C                 test    al, al
.text:000000000000C48E                 jz      loc_C559
.text:000000000000C494                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000C498                 call    free
.text:000000000000C49D                 jmp     short loc_C4A2
.text:000000000000C49D ; ---------------------------------------------------------------------------
.text:000000000000C49F                 align 20h
.text:000000000000C4A0
.text:000000000000C4A0 loc_C4A0:                               ; CODE XREF: hash_rehash+47↑j
.text:000000000000C4A0                                         ; hash_rehash+A5↑j ...
.text:000000000000C4A0                 xor     ebx, ebx
.text:000000000000C4A2
.text:000000000000C4A2 loc_C4A2:                               ; CODE XREF: hash_rehash+17D↑j
.text:000000000000C4A2                                         ; hash_rehash+1E5↓j ...
.text:000000000000C4A2                 mov     rcx, [rsp+78h+var_20]
.text:000000000000C4A7                 xor     rcx, fs:28h
.text:000000000000C4B0                 mov     eax, ebx
.text:000000000000C4B2                 jnz     loc_C54A
.text:000000000000C4B8                 add     rsp, 60h
.text:000000000000C4BC                 pop     rbx
.text:000000000000C4BD                 pop     rbp
.text:000000000000C4BE                 pop     r12
.text:000000000000C4C0                 retn
.text:000000000000C4C0 ; ---------------------------------------------------------------------------
.text:000000000000C4C1                 align 8
.text:000000000000C4C8
.text:000000000000C4C8 loc_C4C8:                               ; CODE XREF: hash_rehash+2A↑j
.text:000000000000C4C8                 mov     rax, rsi
.text:000000000000C4CB                 pxor    xmm0, xmm0
.text:000000000000C4CF                 shr     rax, 1
.text:000000000000C4D2                 and     esi, 1
.text:000000000000C4D5                 or      rax, rsi
.text:000000000000C4D8                 cvtsi2ss xmm0, rax
.text:000000000000C4DD                 addss   xmm0, xmm0
.text:000000000000C4E1                 jmp     loc_C359
.text:000000000000C4E1 ; ---------------------------------------------------------------------------
.text:000000000000C4E6                 align 10h
.text:000000000000C4F0
.text:000000000000C4F0 loc_C4F0:                               ; CODE XREF: hash_rehash+54↑j
.text:000000000000C4F0                 cvttss2si rsi, xmm0
.text:000000000000C4F5                 jmp     loc_C398
.text:000000000000C4F5 ; ---------------------------------------------------------------------------
.text:000000000000C4FA                 align 20h
.text:000000000000C500
.text:000000000000C500 loc_C500:                               ; CODE XREF: hash_rehash+B8↑j
.text:000000000000C500                 mov     ebx, 1
.text:000000000000C505                 jmp     short loc_C4A2
.text:000000000000C505 ; ---------------------------------------------------------------------------
.text:000000000000C507                 align 10h
.text:000000000000C510
.text:000000000000C510 loc_C510:                               ; CODE XREF: hash_rehash+138↑j
.text:000000000000C510                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000C514                 call    free
.text:000000000000C519                 mov     rax, [rsp+78h+ptr]
.text:000000000000C51D                 mov     [rbp+0], rax
.text:000000000000C521                 mov     rax, [rsp+78h+var_70]
.text:000000000000C526                 mov     [rbp+8], rax
.text:000000000000C52A                 mov     rax, [rsp+78h+var_68]
.text:000000000000C52F                 mov     [rbp+10h], rax
.text:000000000000C533                 mov     rax, [rsp+78h+var_60]
.text:000000000000C538                 mov     [rbp+18h], rax
.text:000000000000C53C                 mov     rax, [rsp+78h+var_30]
.text:000000000000C541                 mov     [rbp+48h], rax
.text:000000000000C545                 jmp     loc_C4A2
.text:000000000000C54A ; ---------------------------------------------------------------------------
.text:000000000000C54A
.text:000000000000C54A loc_C54A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000C54A                 call    ___stack_chk_fail
.text:000000000000C54F ; ---------------------------------------------------------------------------
.text:000000000000C54F
.text:000000000000C54F loc_C54F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000C54F                 mov     ecx, 1
.text:000000000000C554                 jmp     loc_C3B6
.text:000000000000C559 ; ---------------------------------------------------------------------------
.text:000000000000C559
.text:000000000000C559 loc_C559:                               ; CODE XREF: hash_rehash+159↑j
.text:000000000000C559                                         ; hash_rehash+16E↑j
.text:000000000000C559                 call    _abort
.text:000000000000C559 ; } // starts at C320
.text:000000000000C559 hash_rehash     endp
.text:000000000000C559
.text:000000000000C559 ; ---------------------------------------------------------------------------
.text:000000000000C55E                 align 20h
.text:000000000000C560
.text:000000000000C560 ; =============== S U B R O U T I N E =======================================
.text:000000000000C560
.text:000000000000C560 ; Attributes: info_from_lumina
.text:000000000000C560
.text:000000000000C560 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:000000000000C560                 public hash_insert_if_absent
.text:000000000000C560 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:000000000000C560
.text:000000000000C560 var_38          = qword ptr -38h
.text:000000000000C560 var_30          = qword ptr -30h
.text:000000000000C560
.text:000000000000C560 ; __unwind {
.text:000000000000C560                 push    r13
.text:000000000000C562                 push    r12
.text:000000000000C564                 push    rbp
.text:000000000000C565                 push    rbx
.text:000000000000C566                 sub     rsp, 18h
.text:000000000000C56A                 mov     rax, fs:28h
.text:000000000000C573                 mov     [rsp+38h+var_30], rax
.text:000000000000C578                 xor     eax, eax
.text:000000000000C57A                 test    rsi, rsi
.text:000000000000C57D                 jz      loc_C73D
.text:000000000000C583                 mov     r12, rsp
.text:000000000000C586                 xor     ecx, ecx
.text:000000000000C588                 mov     r13, rdx
.text:000000000000C58B                 mov     rdx, r12
.text:000000000000C58E                 mov     rbx, rdi
.text:000000000000C591                 mov     rbp, rsi
.text:000000000000C594                 call    hash_find_entry
.text:000000000000C599                 test    rax, rax
.text:000000000000C59C                 mov     rdx, rax
.text:000000000000C59F                 jz      short loc_C5D0
.text:000000000000C5A1                 xor     eax, eax
.text:000000000000C5A3                 test    r13, r13
.text:000000000000C5A6                 jz      short loc_C5AC
.text:000000000000C5A8                 mov     [r13+0], rdx
.text:000000000000C5AC
.text:000000000000C5AC loc_C5AC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:000000000000C5AC                                         ; hash_insert_if_absent+E9↓j ...
.text:000000000000C5AC                 mov     rcx, [rsp+38h+var_30]
.text:000000000000C5B1                 xor     rcx, fs:28h
.text:000000000000C5BA                 jnz     loc_C7DF
.text:000000000000C5C0                 add     rsp, 18h
.text:000000000000C5C4                 pop     rbx
.text:000000000000C5C5                 pop     rbp
.text:000000000000C5C6                 pop     r12
.text:000000000000C5C8                 pop     r13
.text:000000000000C5CA                 retn
.text:000000000000C5CA ; ---------------------------------------------------------------------------
.text:000000000000C5CB                 align 10h
.text:000000000000C5D0
.text:000000000000C5D0 loc_C5D0:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:000000000000C5D0                 mov     rax, [rbx+18h]
.text:000000000000C5D4                 test    rax, rax
.text:000000000000C5D7                 js      short loc_C650
.text:000000000000C5D9                 pxor    xmm1, xmm1
.text:000000000000C5DD                 mov     rdx, [rbx+28h]
.text:000000000000C5E1                 cvtsi2ss xmm1, rax
.text:000000000000C5E6                 mov     rax, [rbx+10h]
.text:000000000000C5EA                 test    rax, rax
.text:000000000000C5ED                 js      loc_C67A
.text:000000000000C5F3
.text:000000000000C5F3 loc_C5F3:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:000000000000C5F3                 pxor    xmm0, xmm0
.text:000000000000C5F7                 cvtsi2ss xmm0, rax
.text:000000000000C5FC
.text:000000000000C5FC loc_C5FC:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000C5FC                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000C601                 ucomiss xmm1, xmm0
.text:000000000000C604                 ja      loc_C6A0
.text:000000000000C60A
.text:000000000000C60A loc_C60A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000C60A                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000C60A                 mov     r12, [rsp+38h+var_38]
.text:000000000000C60E                 cmp     qword ptr [r12], 0
.text:000000000000C613                 jz      loc_C748
.text:000000000000C619                 mov     rax, [rbx+48h]
.text:000000000000C61D                 test    rax, rax
.text:000000000000C620                 jz      loc_C760
.text:000000000000C626                 mov     rdx, [rax+8]
.text:000000000000C62A                 mov     [rbx+48h], rdx
.text:000000000000C62E
.text:000000000000C62E loc_C62E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000C62E                 mov     rdx, [r12+8]
.text:000000000000C633                 mov     [rax], rbp
.text:000000000000C636                 mov     [rax+8], rdx
.text:000000000000C63A                 mov     [r12+8], rax
.text:000000000000C63F                 mov     eax, 1
.text:000000000000C644                 add     qword ptr [rbx+20h], 1
.text:000000000000C649                 jmp     loc_C5AC
.text:000000000000C649 ; ---------------------------------------------------------------------------
.text:000000000000C64E                 align 10h
.text:000000000000C650
.text:000000000000C650 loc_C650:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:000000000000C650                 mov     rdx, rax
.text:000000000000C653                 pxor    xmm1, xmm1
.text:000000000000C657                 and     eax, 1
.text:000000000000C65A                 shr     rdx, 1
.text:000000000000C65D                 or      rdx, rax
.text:000000000000C660                 mov     rax, [rbx+10h]
.text:000000000000C664                 cvtsi2ss xmm1, rdx
.text:000000000000C669                 mov     rdx, [rbx+28h]
.text:000000000000C66D                 test    rax, rax
.text:000000000000C670                 addss   xmm1, xmm1
.text:000000000000C674                 jns     loc_C5F3
.text:000000000000C67A
.text:000000000000C67A loc_C67A:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:000000000000C67A                 mov     rcx, rax
.text:000000000000C67D                 pxor    xmm0, xmm0
.text:000000000000C681                 shr     rcx, 1
.text:000000000000C684                 and     eax, 1
.text:000000000000C687                 or      rcx, rax
.text:000000000000C68A                 cvtsi2ss xmm0, rcx
.text:000000000000C68F                 addss   xmm0, xmm0
.text:000000000000C693                 jmp     loc_C5FC
.text:000000000000C693 ; ---------------------------------------------------------------------------
.text:000000000000C698                 align 20h
.text:000000000000C6A0
.text:000000000000C6A0 loc_C6A0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:000000000000C6A0                 lea     rdi, [rbx+28h]
.text:000000000000C6A4                 call    check_tuning
.text:000000000000C6A9                 mov     rax, [rbx+10h]
.text:000000000000C6AD                 mov     rdx, [rbx+28h]
.text:000000000000C6B1                 test    rax, rax
.text:000000000000C6B4                 movss   xmm2, dword ptr [rdx+8]
.text:000000000000C6B9                 js      loc_C780
.text:000000000000C6BF                 pxor    xmm0, xmm0
.text:000000000000C6C3                 cvtsi2ss xmm0, rax
.text:000000000000C6C8
.text:000000000000C6C8 loc_C6C8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:000000000000C6C8                 mov     rax, [rbx+18h]
.text:000000000000C6CC                 test    rax, rax
.text:000000000000C6CF                 js      loc_C7A0
.text:000000000000C6D5                 pxor    xmm1, xmm1
.text:000000000000C6D9                 cvtsi2ss xmm1, rax
.text:000000000000C6DE
.text:000000000000C6DE loc_C6DE:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:000000000000C6DE                 movaps  xmm3, xmm2
.text:000000000000C6E1                 mulss   xmm3, xmm0
.text:000000000000C6E5                 ucomiss xmm1, xmm3
.text:000000000000C6E8                 jbe     loc_C60A
.text:000000000000C6EE                 cmp     byte ptr [rdx+10h], 0
.text:000000000000C6F2                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:000000000000C6F7                 jnz     short loc_C6FD
.text:000000000000C6F9                 mulss   xmm0, xmm2
.text:000000000000C6FD
.text:000000000000C6FD loc_C6FD:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000C6FD                 ucomiss xmm0, cs:dword_16A3C
.text:000000000000C704                 jnb     short loc_C773
.text:000000000000C706                 ucomiss xmm0, cs:dword_16A40
.text:000000000000C70D                 jnb     loc_C7C0
.text:000000000000C713                 cvttss2si rsi, xmm0
.text:000000000000C718
.text:000000000000C718 loc_C718:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:000000000000C718                 mov     rdi, rbx
.text:000000000000C71B                 call    hash_rehash
.text:000000000000C720                 test    al, al
.text:000000000000C722                 jz      short loc_C773
.text:000000000000C724                 xor     ecx, ecx
.text:000000000000C726                 mov     rdx, r12
.text:000000000000C729                 mov     rsi, rbp
.text:000000000000C72C                 mov     rdi, rbx
.text:000000000000C72F                 call    hash_find_entry
.text:000000000000C734                 test    rax, rax
.text:000000000000C737                 jz      loc_C60A
.text:000000000000C73D
.text:000000000000C73D loc_C73D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000C73D                 call    _abort
.text:000000000000C73D ; ---------------------------------------------------------------------------
.text:000000000000C742                 align 8
.text:000000000000C748
.text:000000000000C748 loc_C748:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:000000000000C748                 mov     [r12], rbp
.text:000000000000C74C                 mov     eax, 1
.text:000000000000C751                 add     qword ptr [rbx+20h], 1
.text:000000000000C756                 add     qword ptr [rbx+18h], 1
.text:000000000000C75B                 jmp     loc_C5AC
.text:000000000000C760 ; ---------------------------------------------------------------------------
.text:000000000000C760
.text:000000000000C760 loc_C760:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:000000000000C760                 mov     edi, 10h        ; size
.text:000000000000C765                 call    _malloc
.text:000000000000C76A                 test    rax, rax
.text:000000000000C76D                 jnz     loc_C62E
.text:000000000000C773
.text:000000000000C773 loc_C773:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:000000000000C773                                         ; hash_insert_if_absent+1C2↑j
.text:000000000000C773                 mov     eax, 0FFFFFFFFh
.text:000000000000C778                 jmp     loc_C5AC
.text:000000000000C778 ; ---------------------------------------------------------------------------
.text:000000000000C77D                 align 20h
.text:000000000000C780
.text:000000000000C780 loc_C780:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:000000000000C780                 mov     rcx, rax
.text:000000000000C783                 pxor    xmm0, xmm0
.text:000000000000C787                 shr     rcx, 1
.text:000000000000C78A                 and     eax, 1
.text:000000000000C78D                 or      rcx, rax
.text:000000000000C790                 cvtsi2ss xmm0, rcx
.text:000000000000C795                 addss   xmm0, xmm0
.text:000000000000C799                 jmp     loc_C6C8
.text:000000000000C799 ; ---------------------------------------------------------------------------
.text:000000000000C79E                 align 20h
.text:000000000000C7A0
.text:000000000000C7A0 loc_C7A0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:000000000000C7A0                 mov     rcx, rax
.text:000000000000C7A3                 pxor    xmm1, xmm1
.text:000000000000C7A7                 shr     rcx, 1
.text:000000000000C7AA                 and     eax, 1
.text:000000000000C7AD                 or      rcx, rax
.text:000000000000C7B0                 cvtsi2ss xmm1, rcx
.text:000000000000C7B5                 addss   xmm1, xmm1
.text:000000000000C7B9                 jmp     loc_C6DE
.text:000000000000C7B9 ; ---------------------------------------------------------------------------
.text:000000000000C7BE                 align 20h
.text:000000000000C7C0
.text:000000000000C7C0 loc_C7C0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:000000000000C7C0                 subss   xmm0, cs:dword_16A40
.text:000000000000C7C8                 mov     rax, 8000000000000000h
.text:000000000000C7D2                 cvttss2si rsi, xmm0
.text:000000000000C7D7                 xor     rsi, rax
.text:000000000000C7DA                 jmp     loc_C718
.text:000000000000C7DF ; ---------------------------------------------------------------------------
.text:000000000000C7DF
.text:000000000000C7DF loc_C7DF:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000C7DF                 call    ___stack_chk_fail
.text:000000000000C7DF ; } // starts at C560
.text:000000000000C7DF hash_insert_if_absent endp
.text:000000000000C7DF
.text:000000000000C7DF ; ---------------------------------------------------------------------------
.text:000000000000C7E4                 align 10h
.text:000000000000C7F0
.text:000000000000C7F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C7F0
.text:000000000000C7F0 ; Attributes: info_from_lumina
.text:000000000000C7F0
.text:000000000000C7F0 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:000000000000C7F0                 public hash_insert
.text:000000000000C7F0 hash_insert     proc near               ; CODE XREF: remember_copied+3D↑p
.text:000000000000C7F0                                         ; record_file+46↑p ...
.text:000000000000C7F0
.text:000000000000C7F0 var_18          = qword ptr -18h
.text:000000000000C7F0 var_10          = qword ptr -10h
.text:000000000000C7F0
.text:000000000000C7F0 ; __unwind {
.text:000000000000C7F0                 push    rbx
.text:000000000000C7F1                 mov     rbx, rsi
.text:000000000000C7F4                 sub     rsp, 10h
.text:000000000000C7F8                 mov     rdx, rsp
.text:000000000000C7FB                 mov     rax, fs:28h
.text:000000000000C804                 mov     [rsp+18h+var_10], rax
.text:000000000000C809                 xor     eax, eax
.text:000000000000C80B                 call    hash_insert_if_absent
.text:000000000000C810                 cmp     eax, 0FFFFFFFFh
.text:000000000000C813                 jz      short loc_C840
.text:000000000000C815                 test    eax, eax
.text:000000000000C817                 jnz     short loc_C81D
.text:000000000000C819                 mov     rbx, [rsp+18h+var_18]
.text:000000000000C81D
.text:000000000000C81D loc_C81D:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000C81D                                         ; hash_insert+52↓j
.text:000000000000C81D                 mov     rcx, [rsp+18h+var_10]
.text:000000000000C822                 xor     rcx, fs:28h
.text:000000000000C82B                 mov     rax, rbx
.text:000000000000C82E                 jnz     short loc_C844
.text:000000000000C830                 add     rsp, 10h
.text:000000000000C834                 pop     rbx
.text:000000000000C835                 retn
.text:000000000000C835 ; ---------------------------------------------------------------------------
.text:000000000000C836                 align 20h
.text:000000000000C840
.text:000000000000C840 loc_C840:                               ; CODE XREF: hash_insert+23↑j
.text:000000000000C840                 xor     ebx, ebx
.text:000000000000C842                 jmp     short loc_C81D
.text:000000000000C844 ; ---------------------------------------------------------------------------
.text:000000000000C844
.text:000000000000C844 loc_C844:                               ; CODE XREF: hash_insert+3E↑j
.text:000000000000C844                 call    ___stack_chk_fail
.text:000000000000C844 ; } // starts at C7F0
.text:000000000000C844 hash_insert     endp
.text:000000000000C844
.text:000000000000C844 ; ---------------------------------------------------------------------------
.text:000000000000C849                 align 10h
.text:000000000000C850
.text:000000000000C850 ; =============== S U B R O U T I N E =======================================
.text:000000000000C850
.text:000000000000C850 ; Attributes: info_from_lumina
.text:000000000000C850
.text:000000000000C850 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:000000000000C850                 public hash_delete
.text:000000000000C850 hash_delete     proc near               ; CODE XREF: forget_created+31↑p
.text:000000000000C850                                         ; leave_dir_isra_12+7A↓p
.text:000000000000C850
.text:000000000000C850 var_28          = qword ptr -28h
.text:000000000000C850 var_20          = qword ptr -20h
.text:000000000000C850
.text:000000000000C850 ; __unwind {
.text:000000000000C850                 push    r12
.text:000000000000C852                 push    rbp
.text:000000000000C853                 mov     ecx, 1
.text:000000000000C858                 push    rbx
.text:000000000000C859                 mov     rbx, rdi
.text:000000000000C85C                 sub     rsp, 10h
.text:000000000000C860                 mov     rdx, rsp
.text:000000000000C863                 mov     rax, fs:28h
.text:000000000000C86C                 mov     [rsp+28h+var_20], rax
.text:000000000000C871                 xor     eax, eax
.text:000000000000C873                 call    hash_find_entry
.text:000000000000C878                 test    rax, rax
.text:000000000000C87B                 mov     rbp, rax
.text:000000000000C87E                 jz      short loc_C88F
.text:000000000000C880                 mov     rax, [rsp+28h+var_28]
.text:000000000000C884                 sub     qword ptr [rbx+20h], 1
.text:000000000000C889                 cmp     qword ptr [rax], 0
.text:000000000000C88D                 jz      short loc_C8B0
.text:000000000000C88F
.text:000000000000C88F loc_C88F:                               ; CODE XREF: hash_delete+2E↑j
.text:000000000000C88F                                         ; hash_delete+9F↓j ...
.text:000000000000C88F                 mov     rcx, [rsp+28h+var_20]
.text:000000000000C894                 xor     rcx, fs:28h
.text:000000000000C89D                 mov     rax, rbp
.text:000000000000C8A0                 jnz     loc_CA4E
.text:000000000000C8A6                 add     rsp, 10h
.text:000000000000C8AA                 pop     rbx
.text:000000000000C8AB                 pop     rbp
.text:000000000000C8AC                 pop     r12
.text:000000000000C8AE                 retn
.text:000000000000C8AE ; ---------------------------------------------------------------------------
.text:000000000000C8AF                 align 10h
.text:000000000000C8B0
.text:000000000000C8B0 loc_C8B0:                               ; CODE XREF: hash_delete+3D↑j
.text:000000000000C8B0                 mov     rax, [rbx+18h]
.text:000000000000C8B4                 sub     rax, 1
.text:000000000000C8B8                 test    rax, rax
.text:000000000000C8BB                 mov     [rbx+18h], rax
.text:000000000000C8BF                 js      loc_C9C0
.text:000000000000C8C5                 pxor    xmm0, xmm0
.text:000000000000C8C9                 cvtsi2ss xmm0, rax
.text:000000000000C8CE
.text:000000000000C8CE loc_C8CE:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000C8CE                 mov     rax, [rbx+10h]
.text:000000000000C8D2                 mov     rdx, [rbx+28h]
.text:000000000000C8D6                 test    rax, rax
.text:000000000000C8D9                 js      loc_C9A0
.text:000000000000C8DF                 pxor    xmm1, xmm1
.text:000000000000C8E3                 cvtsi2ss xmm1, rax
.text:000000000000C8E8
.text:000000000000C8E8 loc_C8E8:                               ; CODE XREF: hash_delete+169↓j
.text:000000000000C8E8                 mulss   xmm1, dword ptr [rdx]
.text:000000000000C8EC                 ucomiss xmm1, xmm0
.text:000000000000C8EF                 jbe     short loc_C88F
.text:000000000000C8F1                 lea     rdi, [rbx+28h]
.text:000000000000C8F5                 call    check_tuning
.text:000000000000C8FA                 mov     rax, [rbx+10h]
.text:000000000000C8FE                 mov     rdx, [rbx+28h]
.text:000000000000C902                 test    rax, rax
.text:000000000000C905                 js      loc_CA30
.text:000000000000C90B                 pxor    xmm0, xmm0
.text:000000000000C90F                 cvtsi2ss xmm0, rax
.text:000000000000C914
.text:000000000000C914 loc_C914:                               ; CODE XREF: hash_delete+1F9↓j
.text:000000000000C914                 mov     rax, [rbx+18h]
.text:000000000000C918                 test    rax, rax
.text:000000000000C91B                 js      loc_CA10
.text:000000000000C921                 pxor    xmm1, xmm1
.text:000000000000C925                 cvtsi2ss xmm1, rax
.text:000000000000C92A
.text:000000000000C92A loc_C92A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000C92A                 movss   xmm2, dword ptr [rdx]
.text:000000000000C92E                 mulss   xmm2, xmm0
.text:000000000000C932                 ucomiss xmm2, xmm1
.text:000000000000C935                 jbe     loc_C88F
.text:000000000000C93B                 cmp     byte ptr [rdx+10h], 0
.text:000000000000C93F                 mulss   xmm0, dword ptr [rdx+4]
.text:000000000000C944                 jz      loc_CA00
.text:000000000000C94A
.text:000000000000C94A loc_C94A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000C94A                 ucomiss xmm0, cs:dword_16A40
.text:000000000000C951                 jnb     loc_C9E0
.text:000000000000C957                 cvttss2si rsi, xmm0
.text:000000000000C95C
.text:000000000000C95C loc_C95C:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000C95C                 mov     rdi, rbx
.text:000000000000C95F                 call    hash_rehash
.text:000000000000C964                 test    al, al
.text:000000000000C966                 jnz     loc_C88F
.text:000000000000C96C                 mov     rdi, [rbx+48h]  ; ptr
.text:000000000000C970                 test    rdi, rdi
.text:000000000000C973                 jz      short loc_C989
.text:000000000000C975                 nop     dword ptr [rax]
.text:000000000000C978
.text:000000000000C978 loc_C978:                               ; CODE XREF: hash_delete+137↓j
.text:000000000000C978                 mov     r12, [rdi+8]
.text:000000000000C97C                 call    free
.text:000000000000C981                 test    r12, r12
.text:000000000000C984                 mov     rdi, r12
.text:000000000000C987                 jnz     short loc_C978
.text:000000000000C989
.text:000000000000C989 loc_C989:                               ; CODE XREF: hash_delete+123↑j
.text:000000000000C989                 mov     qword ptr [rbx+48h], 0
.text:000000000000C991                 jmp     loc_C88F
.text:000000000000C991 ; ---------------------------------------------------------------------------
.text:000000000000C996                 align 20h
.text:000000000000C9A0
.text:000000000000C9A0 loc_C9A0:                               ; CODE XREF: hash_delete+89↑j
.text:000000000000C9A0                 mov     rcx, rax
.text:000000000000C9A3                 pxor    xmm1, xmm1
.text:000000000000C9A7                 shr     rcx, 1
.text:000000000000C9AA                 and     eax, 1
.text:000000000000C9AD                 or      rcx, rax
.text:000000000000C9B0                 cvtsi2ss xmm1, rcx
.text:000000000000C9B5                 addss   xmm1, xmm1
.text:000000000000C9B9                 jmp     loc_C8E8
.text:000000000000C9B9 ; ---------------------------------------------------------------------------
.text:000000000000C9BE                 align 20h
.text:000000000000C9C0
.text:000000000000C9C0 loc_C9C0:                               ; CODE XREF: hash_delete+6F↑j
.text:000000000000C9C0                 mov     rdx, rax
.text:000000000000C9C3                 pxor    xmm0, xmm0
.text:000000000000C9C7                 shr     rdx, 1
.text:000000000000C9CA                 and     eax, 1
.text:000000000000C9CD                 or      rdx, rax
.text:000000000000C9D0                 cvtsi2ss xmm0, rdx
.text:000000000000C9D5                 addss   xmm0, xmm0
.text:000000000000C9D9                 jmp     loc_C8CE
.text:000000000000C9D9 ; ---------------------------------------------------------------------------
.text:000000000000C9DE                 align 20h
.text:000000000000C9E0
.text:000000000000C9E0 loc_C9E0:                               ; CODE XREF: hash_delete+101↑j
.text:000000000000C9E0                 subss   xmm0, cs:dword_16A40
.text:000000000000C9E8                 mov     rax, 8000000000000000h
.text:000000000000C9F2                 cvttss2si rsi, xmm0
.text:000000000000C9F7                 xor     rsi, rax
.text:000000000000C9FA                 jmp     loc_C95C
.text:000000000000C9FA ; ---------------------------------------------------------------------------
.text:000000000000C9FF                 align 20h
.text:000000000000CA00
.text:000000000000CA00 loc_CA00:                               ; CODE XREF: hash_delete+F4↑j
.text:000000000000CA00                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000CA05                 jmp     loc_C94A
.text:000000000000CA05 ; ---------------------------------------------------------------------------
.text:000000000000CA0A                 align 10h
.text:000000000000CA10
.text:000000000000CA10 loc_CA10:                               ; CODE XREF: hash_delete+CB↑j
.text:000000000000CA10                 mov     rcx, rax
.text:000000000000CA13                 pxor    xmm1, xmm1
.text:000000000000CA17                 shr     rcx, 1
.text:000000000000CA1A                 and     eax, 1
.text:000000000000CA1D                 or      rcx, rax
.text:000000000000CA20                 cvtsi2ss xmm1, rcx
.text:000000000000CA25                 addss   xmm1, xmm1
.text:000000000000CA29                 jmp     loc_C92A
.text:000000000000CA29 ; ---------------------------------------------------------------------------
.text:000000000000CA2E                 align 10h
.text:000000000000CA30
.text:000000000000CA30 loc_CA30:                               ; CODE XREF: hash_delete+B5↑j
.text:000000000000CA30                 mov     rcx, rax
.text:000000000000CA33                 pxor    xmm0, xmm0
.text:000000000000CA37                 shr     rcx, 1
.text:000000000000CA3A                 and     eax, 1
.text:000000000000CA3D                 or      rcx, rax
.text:000000000000CA40                 cvtsi2ss xmm0, rcx
.text:000000000000CA45                 addss   xmm0, xmm0
.text:000000000000CA49                 jmp     loc_C914
.text:000000000000CA4E ; ---------------------------------------------------------------------------
.text:000000000000CA4E
.text:000000000000CA4E loc_CA4E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000CA4E                 call    ___stack_chk_fail
.text:000000000000CA4E ; } // starts at C850
.text:000000000000CA4E hash_delete     endp
.text:000000000000CA4E
.text:000000000000CA4E ; ---------------------------------------------------------------------------
.text:000000000000CA53                 align 20h
.text:000000000000CA60
.text:000000000000CA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA60
.text:000000000000CA60 ; Attributes: info_from_lumina
.text:000000000000CA60
.text:000000000000CA60 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:000000000000CA60                 public triple_hash
.text:000000000000CA60 triple_hash     proc near               ; DATA XREF: dest_info_init+10↑o
.text:000000000000CA60 ; __unwind {
.text:000000000000CA60                 push    rbp
.text:000000000000CA61                 push    rbx
.text:000000000000CA62                 mov     rbp, rdi
.text:000000000000CA65                 mov     rbx, rsi
.text:000000000000CA68                 sub     rsp, 8
.text:000000000000CA6C                 mov     rdi, [rdi]
.text:000000000000CA6F                 call    hash_pjw
.text:000000000000CA74                 xor     rax, [rbp+8]
.text:000000000000CA78                 xor     edx, edx
.text:000000000000CA7A                 add     rsp, 8
.text:000000000000CA7E                 div     rbx
.text:000000000000CA81                 pop     rbx
.text:000000000000CA82                 pop     rbp
.text:000000000000CA83                 mov     rax, rdx
.text:000000000000CA86                 retn
.text:000000000000CA86 ; } // starts at CA60
.text:000000000000CA86 triple_hash     endp
.text:000000000000CA86
.text:000000000000CA86 ; ---------------------------------------------------------------------------
.text:000000000000CA87                 align 10h
.text:000000000000CA90
.text:000000000000CA90 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA90
.text:000000000000CA90
.text:000000000000CA90                 public triple_hash_no_name
.text:000000000000CA90 triple_hash_no_name proc near           ; DATA XREF: src_info_init+10↑o
.text:000000000000CA90 ; __unwind {
.text:000000000000CA90                 mov     rax, [rdi+8]
.text:000000000000CA94                 xor     edx, edx
.text:000000000000CA96                 div     rsi
.text:000000000000CA99                 mov     rax, rdx
.text:000000000000CA9C                 retn
.text:000000000000CA9C ; } // starts at CA90
.text:000000000000CA9C triple_hash_no_name endp
.text:000000000000CA9C
.text:000000000000CA9C ; ---------------------------------------------------------------------------
.text:000000000000CA9D                 align 20h
.text:000000000000CAA0
.text:000000000000CAA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CAA0
.text:000000000000CAA0 ; Attributes: info_from_lumina
.text:000000000000CAA0
.text:000000000000CAA0 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:000000000000CAA0                 public triple_compare
.text:000000000000CAA0 triple_compare  proc near               ; DATA XREF: dest_info_init+7↑o
.text:000000000000CAA0                                         ; src_info_init+7↑o
.text:000000000000CAA0 ; __unwind {
.text:000000000000CAA0                 xor     eax, eax
.text:000000000000CAA2                 mov     rdx, [rsi+8]
.text:000000000000CAA6                 cmp     [rdi+8], rdx
.text:000000000000CAAA                 jz      short loc_CAB0
.text:000000000000CAAC
.text:000000000000CAAC locret_CAAC:                            ; CODE XREF: triple_compare+18↓j
.text:000000000000CAAC                 rep retn
.text:000000000000CAAC ; ---------------------------------------------------------------------------
.text:000000000000CAAE                 align 10h
.text:000000000000CAB0
.text:000000000000CAB0 loc_CAB0:                               ; CODE XREF: triple_compare+A↑j
.text:000000000000CAB0                 mov     rcx, [rsi+10h]
.text:000000000000CAB4                 cmp     [rdi+10h], rcx
.text:000000000000CAB8                 jnz     short locret_CAAC
.text:000000000000CABA                 sub     rsp, 8
.text:000000000000CABE                 mov     rsi, [rsi]
.text:000000000000CAC1                 mov     rdi, [rdi]
.text:000000000000CAC4                 call    same_name
.text:000000000000CAC9                 add     rsp, 8
.text:000000000000CACD                 retn
.text:000000000000CACD ; } // starts at CAA0
.text:000000000000CACD triple_compare  endp
.text:000000000000CACD
.text:000000000000CACD ; ---------------------------------------------------------------------------
.text:000000000000CACE                 align 10h
.text:000000000000CAD0
.text:000000000000CAD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CAD0
.text:000000000000CAD0 ; Attributes: info_from_lumina
.text:000000000000CAD0
.text:000000000000CAD0 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:000000000000CAD0                 public triple_compare_ino_str
.text:000000000000CAD0 triple_compare_ino_str proc near
.text:000000000000CAD0 ; __unwind {
.text:000000000000CAD0                 xor     eax, eax
.text:000000000000CAD2                 mov     rdx, [rsi+8]
.text:000000000000CAD6                 cmp     [rdi+8], rdx
.text:000000000000CADA                 jz      short loc_CAE0
.text:000000000000CADC
.text:000000000000CADC locret_CADC:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:000000000000CADC                 rep retn
.text:000000000000CADC ; ---------------------------------------------------------------------------
.text:000000000000CADE                 align 20h
.text:000000000000CAE0
.text:000000000000CAE0 loc_CAE0:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:000000000000CAE0                 mov     rcx, [rsi+10h]
.text:000000000000CAE4                 cmp     [rdi+10h], rcx
.text:000000000000CAE8                 jnz     short locret_CADC
.text:000000000000CAEA                 sub     rsp, 8
.text:000000000000CAEE                 mov     rsi, [rsi]      ; s2
.text:000000000000CAF1                 mov     rdi, [rdi]      ; s1
.text:000000000000CAF4                 call    _strcmp
.text:000000000000CAF9                 test    eax, eax
.text:000000000000CAFB                 setz    al
.text:000000000000CAFE                 add     rsp, 8
.text:000000000000CB02                 retn
.text:000000000000CB02 ; } // starts at CAD0
.text:000000000000CB02 triple_compare_ino_str endp
.text:000000000000CB02
.text:000000000000CB02 ; ---------------------------------------------------------------------------
.text:000000000000CB03                 align 10h
.text:000000000000CB10
.text:000000000000CB10 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB10
.text:000000000000CB10
.text:000000000000CB10 ; __int64 __fastcall triple_free(void *ptr)
.text:000000000000CB10                 public triple_free
.text:000000000000CB10 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:000000000000CB10                                         ; DATA XREF: dest_info_init↑o ...
.text:000000000000CB10 ; __unwind {
.text:000000000000CB10                 push    rbx
.text:000000000000CB11                 mov     rbx, rdi
.text:000000000000CB14                 mov     rdi, [rdi]      ; ptr
.text:000000000000CB17                 call    free
.text:000000000000CB1C                 mov     rdi, rbx        ; ptr
.text:000000000000CB1F                 pop     rbx
.text:000000000000CB20                 jmp     free
.text:000000000000CB20 ; } // starts at CB10
.text:000000000000CB20 triple_free     endp
.text:000000000000CB20
.text:000000000000CB20 ; ---------------------------------------------------------------------------
.text:000000000000CB25                 align 10h
.text:000000000000CB30
.text:000000000000CB30 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB30
.text:000000000000CB30
.text:000000000000CB30                 public opendirat
.text:000000000000CB30 opendirat       proc near               ; CODE XREF: backupfile_internal+4BD↑p
.text:000000000000CB30                                         ; fts_build+4A5↓p
.text:000000000000CB30 ; __unwind {
.text:000000000000CB30                 push    r13
.text:000000000000CB32                 push    r12
.text:000000000000CB34                 or      edx, 90900h
.text:000000000000CB3A                 push    rbp
.text:000000000000CB3B                 push    rbx
.text:000000000000CB3C                 xor     eax, eax
.text:000000000000CB3E                 mov     r12, rcx
.text:000000000000CB41                 sub     rsp, 8
.text:000000000000CB45                 call    openat_safer
.text:000000000000CB4A                 test    eax, eax
.text:000000000000CB4C                 js      short loc_CBA0
.text:000000000000CB4E                 mov     edi, eax        ; fd
.text:000000000000CB50                 mov     ebx, eax
.text:000000000000CB52                 call    _fdopendir
.text:000000000000CB57                 test    rax, rax
.text:000000000000CB5A                 mov     rbp, rax
.text:000000000000CB5D                 jz      short loc_CB78
.text:000000000000CB5F                 mov     [r12], ebx
.text:000000000000CB63                 add     rsp, 8
.text:000000000000CB67                 mov     rax, rbp
.text:000000000000CB6A                 pop     rbx
.text:000000000000CB6B                 pop     rbp
.text:000000000000CB6C                 pop     r12
.text:000000000000CB6E                 pop     r13
.text:000000000000CB70                 retn
.text:000000000000CB70 ; ---------------------------------------------------------------------------
.text:000000000000CB71                 align 8
.text:000000000000CB78
.text:000000000000CB78 loc_CB78:                               ; CODE XREF: opendirat+2D↑j
.text:000000000000CB78                 call    ___errno_location
.text:000000000000CB7D                 mov     r13d, [rax]
.text:000000000000CB80                 mov     r12, rax
.text:000000000000CB83                 mov     edi, ebx        ; fd
.text:000000000000CB85                 call    _close
.text:000000000000CB8A                 mov     rax, rbp
.text:000000000000CB8D                 mov     [r12], r13d
.text:000000000000CB91                 add     rsp, 8
.text:000000000000CB95                 pop     rbx
.text:000000000000CB96                 pop     rbp
.text:000000000000CB97                 pop     r12
.text:000000000000CB99                 pop     r13
.text:000000000000CB9B                 retn
.text:000000000000CB9B ; ---------------------------------------------------------------------------
.text:000000000000CB9C                 align 20h
.text:000000000000CBA0
.text:000000000000CBA0 loc_CBA0:                               ; CODE XREF: opendirat+1C↑j
.text:000000000000CBA0                 add     rsp, 8
.text:000000000000CBA4                 xor     ebp, ebp
.text:000000000000CBA6                 pop     rbx
.text:000000000000CBA7                 mov     rax, rbp
.text:000000000000CBAA                 pop     rbp
.text:000000000000CBAB                 pop     r12
.text:000000000000CBAD                 pop     r13
.text:000000000000CBAF                 retn
.text:000000000000CBAF ; } // starts at CB30
.text:000000000000CBAF opendirat       endp
.text:000000000000CBAF
.text:000000000000CBB0
.text:000000000000CBB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CBB0
.text:000000000000CBB0
.text:000000000000CBB0                 public set_program_name
.text:000000000000CBB0 set_program_name proc near              ; CODE XREF: main+31↑p
.text:000000000000CBB0 ; __unwind {
.text:000000000000CBB0                 test    rdi, rdi
.text:000000000000CBB3                 push    rbx
.text:000000000000CBB4                 jz      short loc_CC2D
.text:000000000000CBB6                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000CBBB                 mov     rbx, rdi
.text:000000000000CBBE                 call    _strrchr
.text:000000000000CBC3                 test    rax, rax
.text:000000000000CBC6                 jz      short loc_CC1D
.text:000000000000CBC8                 lea     r8, [rax+1]
.text:000000000000CBCC                 mov     rdx, r8
.text:000000000000CBCF                 sub     rdx, rbx
.text:000000000000CBD2                 cmp     rdx, 6
.text:000000000000CBD6                 jle     short loc_CC1D
.text:000000000000CBD8                 lea     rsi, [rax-6]
.text:000000000000CBDC                 lea     rdi, aLibs      ; "/.libs/"
.text:000000000000CBE3                 mov     ecx, 7
.text:000000000000CBE8                 repe cmpsb
.text:000000000000CBEA                 setnbe  dl
.text:000000000000CBED                 sbb     dl, 0
.text:000000000000CBF0                 test    dl, dl
.text:000000000000CBF2                 jnz     short loc_CC1D
.text:000000000000CBF4                 lea     rdi, aLt        ; "lt-"
.text:000000000000CBFB                 mov     ecx, 3
.text:000000000000CC00                 mov     rsi, r8
.text:000000000000CC03                 mov     rbx, r8
.text:000000000000CC06                 repe cmpsb
.text:000000000000CC08                 setnbe  dl
.text:000000000000CC0B                 sbb     dl, 0
.text:000000000000CC0E                 test    dl, dl
.text:000000000000CC10                 jnz     short loc_CC1D
.text:000000000000CC12                 lea     rbx, [rax+4]
.text:000000000000CC16                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:000000000000CC1D
.text:000000000000CC1D loc_CC1D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000CC1D                                         ; set_program_name+26↑j ...
.text:000000000000CC1D                 mov     cs:program_name, rbx
.text:000000000000CC24                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000CC2B                 pop     rbx
.text:000000000000CC2C                 retn
.text:000000000000CC2D ; ---------------------------------------------------------------------------
.text:000000000000CC2D
.text:000000000000CC2D loc_CC2D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000CC2D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000CC34                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000CC3B                 mov     edx, 37h ; '7'  ; n
.text:000000000000CC40                 mov     esi, 1          ; size
.text:000000000000CC45                 call    _fwrite
.text:000000000000CC4A                 call    _abort
.text:000000000000CC4A ; } // starts at CBB0
.text:000000000000CC4A set_program_name endp
.text:000000000000CC4A
.text:000000000000CC4A ; ---------------------------------------------------------------------------
.text:000000000000CC4F                 align 10h
.text:000000000000CC50
.text:000000000000CC50 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC50
.text:000000000000CC50
.text:000000000000CC50                 public qcopy_acl
.text:000000000000CC50 qcopy_acl       proc near               ; CODE XREF: copy_acl+A↑p
.text:000000000000CC50
.text:000000000000CC50 var_24          = byte ptr -24h
.text:000000000000CC50 var_20          = qword ptr -20h
.text:000000000000CC50
.text:000000000000CC50 ; __unwind {
.text:000000000000CC50                 push    r12
.text:000000000000CC52                 push    rbp
.text:000000000000CC53                 mov     r12d, ecx
.text:000000000000CC56                 push    rbx
.text:000000000000CC57                 mov     rbp, rdx
.text:000000000000CC5A                 mov     edx, r8d
.text:000000000000CC5D                 sub     rsp, 10h
.text:000000000000CC61                 lea     rbx, [rsp+28h+var_24]
.text:000000000000CC66                 mov     rax, fs:28h
.text:000000000000CC6F                 mov     [rsp+28h+var_20], rax
.text:000000000000CC74                 xor     eax, eax
.text:000000000000CC76                 mov     rcx, rbx
.text:000000000000CC79                 call    get_permissions
.text:000000000000CC7E                 test    eax, eax
.text:000000000000CC80                 jnz     short loc_CCB8
.text:000000000000CC82                 mov     rsi, rbp
.text:000000000000CC85                 mov     rdi, rbx
.text:000000000000CC88                 mov     edx, r12d
.text:000000000000CC8B                 call    set_permissions
.text:000000000000CC90                 mov     rdi, rbx
.text:000000000000CC93                 mov     ebp, eax
.text:000000000000CC95                 call    free_permission_context
.text:000000000000CC9A
.text:000000000000CC9A loc_CC9A:                               ; CODE XREF: qcopy_acl+6D↓j
.text:000000000000CC9A                 mov     rcx, [rsp+28h+var_20]
.text:000000000000CC9F                 xor     rcx, fs:28h
.text:000000000000CCA8                 mov     eax, ebp
.text:000000000000CCAA                 jnz     short loc_CCBF
.text:000000000000CCAC                 add     rsp, 10h
.text:000000000000CCB0                 pop     rbx
.text:000000000000CCB1                 pop     rbp
.text:000000000000CCB2                 pop     r12
.text:000000000000CCB4                 retn
.text:000000000000CCB4 ; ---------------------------------------------------------------------------
.text:000000000000CCB5                 align 8
.text:000000000000CCB8
.text:000000000000CCB8 loc_CCB8:                               ; CODE XREF: qcopy_acl+30↑j
.text:000000000000CCB8                 mov     ebp, 0FFFFFFFEh
.text:000000000000CCBD                 jmp     short loc_CC9A
.text:000000000000CCBF ; ---------------------------------------------------------------------------
.text:000000000000CCBF
.text:000000000000CCBF loc_CCBF:                               ; CODE XREF: qcopy_acl+5A↑j
.text:000000000000CCBF                 call    ___stack_chk_fail
.text:000000000000CCBF ; } // starts at CC50
.text:000000000000CCBF qcopy_acl       endp
.text:000000000000CCBF
.text:000000000000CCBF ; ---------------------------------------------------------------------------
.text:000000000000CCC4                 align 10h
.text:000000000000CCD0
.text:000000000000CCD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCD0
.text:000000000000CCD0
.text:000000000000CCD0                 public qset_acl
.text:000000000000CCD0 qset_acl        proc near               ; CODE XREF: set_owner+12D↑p
.text:000000000000CCD0                                         ; set_acl+7↑p
.text:000000000000CCD0
.text:000000000000CCD0 var_24          = dword ptr -24h
.text:000000000000CCD0 var_20          = qword ptr -20h
.text:000000000000CCD0
.text:000000000000CCD0 ; __unwind {
.text:000000000000CCD0                 push    rbp
.text:000000000000CCD1                 push    rbx
.text:000000000000CCD2                 sub     rsp, 18h
.text:000000000000CCD6                 lea     rbx, [rsp+28h+var_24]
.text:000000000000CCDB                 mov     [rsp+28h+var_24], edx
.text:000000000000CCDF                 mov     edx, esi
.text:000000000000CCE1                 mov     rsi, rdi
.text:000000000000CCE4                 mov     rdi, rbx
.text:000000000000CCE7                 mov     rax, fs:28h
.text:000000000000CCF0                 mov     [rsp+28h+var_20], rax
.text:000000000000CCF5                 xor     eax, eax
.text:000000000000CCF7                 call    set_permissions
.text:000000000000CCFC                 mov     rdi, rbx
.text:000000000000CCFF                 mov     ebp, eax
.text:000000000000CD01                 call    free_permission_context
.text:000000000000CD06                 mov     rcx, [rsp+28h+var_20]
.text:000000000000CD0B                 xor     rcx, fs:28h
.text:000000000000CD14                 jnz     short loc_CD1F
.text:000000000000CD16                 add     rsp, 18h
.text:000000000000CD1A                 mov     eax, ebp
.text:000000000000CD1C                 pop     rbx
.text:000000000000CD1D                 pop     rbp
.text:000000000000CD1E                 retn
.text:000000000000CD1F ; ---------------------------------------------------------------------------
.text:000000000000CD1F
.text:000000000000CD1F loc_CD1F:                               ; CODE XREF: qset_acl+44↑j
.text:000000000000CD1F                 call    ___stack_chk_fail
.text:000000000000CD1F ; } // starts at CCD0
.text:000000000000CD1F qset_acl        endp
.text:000000000000CD1F
.text:000000000000CD1F ; ---------------------------------------------------------------------------
.text:000000000000CD24                 align 10h
.text:000000000000CD30
.text:000000000000CD30 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD30
.text:000000000000CD30 ; Attributes: info_from_lumina
.text:000000000000CD30
.text:000000000000CD30 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:000000000000CD30 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:000000000000CD30                                         ; quotearg_buffer_restyled+117B↓p
.text:000000000000CD30 ; __unwind {
.text:000000000000CD30                 push    rbp
.text:000000000000CD31                 push    rbx
.text:000000000000CD32                 mov     rbp, rdi
.text:000000000000CD35                 mov     ebx, esi
.text:000000000000CD37                 sub     rsp, 8
.text:000000000000CD3B                 call    locale_charset
.text:000000000000CD40                 movzx   edx, byte ptr [rax]
.text:000000000000CD43                 and     edx, 0FFFFFFDFh
.text:000000000000CD46                 cmp     dl, 55h ; 'U'
.text:000000000000CD49                 jz      short loc_CDC0
.text:000000000000CD4B                 cmp     dl, 47h ; 'G'
.text:000000000000CD4E                 jz      short loc_CD70
.text:000000000000CD50
.text:000000000000CD50 loc_CD50:                               ; CODE XREF: gettext_quote+4A↓j
.text:000000000000CD50                                         ; gettext_quote+50↓j ...
.text:000000000000CD50                 lea     rax, unk_16AA3
.text:000000000000CD57                 lea     rdx, asc_16AA5  ; "'"
.text:000000000000CD5E                 cmp     ebx, 9
.text:000000000000CD61                 cmovnz  rax, rdx
.text:000000000000CD65                 add     rsp, 8
.text:000000000000CD69                 pop     rbx
.text:000000000000CD6A                 pop     rbp
.text:000000000000CD6B                 retn
.text:000000000000CD6B ; ---------------------------------------------------------------------------
.text:000000000000CD6C                 align 10h
.text:000000000000CD70
.text:000000000000CD70 loc_CD70:                               ; CODE XREF: gettext_quote+1E↑j
.text:000000000000CD70                 movzx   edx, byte ptr [rax+1]
.text:000000000000CD74                 and     edx, 0FFFFFFDFh
.text:000000000000CD77                 cmp     dl, 42h ; 'B'
.text:000000000000CD7A                 jnz     short loc_CD50
.text:000000000000CD7C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:000000000000CD80                 jnz     short loc_CD50
.text:000000000000CD82                 cmp     byte ptr [rax+3], 38h ; '8'
.text:000000000000CD86                 jnz     short loc_CD50
.text:000000000000CD88                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000CD8C                 jnz     short loc_CD50
.text:000000000000CD8E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:000000000000CD92                 jnz     short loc_CD50
.text:000000000000CD94                 cmp     byte ptr [rax+6], 30h ; '0'
.text:000000000000CD98                 jnz     short loc_CD50
.text:000000000000CD9A                 cmp     byte ptr [rax+7], 0
.text:000000000000CD9E                 jnz     short loc_CD50
.text:000000000000CDA0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000CDA4                 lea     rax, unk_16A9C
.text:000000000000CDAB                 lea     rdx, unk_16AA0
.text:000000000000CDB2                 cmovnz  rax, rdx
.text:000000000000CDB6                 add     rsp, 8
.text:000000000000CDBA                 pop     rbx
.text:000000000000CDBB                 pop     rbp
.text:000000000000CDBC                 retn
.text:000000000000CDBC ; ---------------------------------------------------------------------------
.text:000000000000CDBD                 align 20h
.text:000000000000CDC0
.text:000000000000CDC0 loc_CDC0:                               ; CODE XREF: gettext_quote+19↑j
.text:000000000000CDC0                 movzx   edx, byte ptr [rax+1]
.text:000000000000CDC4                 and     edx, 0FFFFFFDFh
.text:000000000000CDC7                 cmp     dl, 54h ; 'T'
.text:000000000000CDCA                 jnz     short loc_CD50
.text:000000000000CDCC                 movzx   edx, byte ptr [rax+2]
.text:000000000000CDD0                 and     edx, 0FFFFFFDFh
.text:000000000000CDD3                 cmp     dl, 46h ; 'F'
.text:000000000000CDD6                 jnz     loc_CD50
.text:000000000000CDDC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:000000000000CDE0                 jnz     loc_CD50
.text:000000000000CDE6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000CDEA                 jnz     loc_CD50
.text:000000000000CDF0                 cmp     byte ptr [rax+5], 0
.text:000000000000CDF4                 jnz     loc_CD50
.text:000000000000CDFA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000CDFE                 lea     rax, unk_16A94
.text:000000000000CE05                 lea     rdx, unk_16A98
.text:000000000000CE0C                 cmovnz  rax, rdx
.text:000000000000CE10                 add     rsp, 8
.text:000000000000CE14                 pop     rbx
.text:000000000000CE15                 pop     rbp
.text:000000000000CE16                 retn
.text:000000000000CE16 ; } // starts at CD30
.text:000000000000CE16 gettext_quote   endp
.text:000000000000CE16
.text:000000000000CE16 ; ---------------------------------------------------------------------------
.text:000000000000CE17                 align 20h
.text:000000000000CE20
.text:000000000000CE20 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE20
.text:000000000000CE20 ; Attributes: info_from_lumina
.text:000000000000CE20
.text:000000000000CE20 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:000000000000CE20 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:000000000000CE20                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:000000000000CE20
.text:000000000000CE20 var_E0          = dword ptr -0E0h
.text:000000000000CE20 var_DB          = byte ptr -0DBh
.text:000000000000CE20 var_DA          = byte ptr -0DAh
.text:000000000000CE20 var_D9          = byte ptr -0D9h
.text:000000000000CE20 s               = qword ptr -0D8h
.text:000000000000CE20 n               = qword ptr -0D0h
.text:000000000000CE20 var_C8          = qword ptr -0C8h
.text:000000000000CE20 ps              = qword ptr -0C0h
.text:000000000000CE20 var_B8          = qword ptr -0B8h
.text:000000000000CE20 var_B0          = qword ptr -0B0h
.text:000000000000CE20 var_A8          = qword ptr -0A8h
.text:000000000000CE20 s2              = qword ptr -0A0h
.text:000000000000CE20 var_98          = qword ptr -98h
.text:000000000000CE20 var_90          = qword ptr -90h
.text:000000000000CE20 var_88          = qword ptr -88h
.text:000000000000CE20 var_80          = qword ptr -80h
.text:000000000000CE20 var_78          = qword ptr -78h
.text:000000000000CE20 var_70          = dword ptr -70h
.text:000000000000CE20 var_6C          = byte ptr -6Ch
.text:000000000000CE20 var_6B          = byte ptr -6Bh
.text:000000000000CE20 var_6A          = byte ptr -6Ah
.text:000000000000CE20 var_69          = byte ptr -69h
.text:000000000000CE20 var_68          = qword ptr -68h
.text:000000000000CE20 var_60          = qword ptr -60h
.text:000000000000CE20 wc              = dword ptr -4Ch
.text:000000000000CE20 var_48          = qword ptr -48h
.text:000000000000CE20 var_40          = qword ptr -40h
.text:000000000000CE20 arg_0           = qword ptr  8
.text:000000000000CE20 arg_8           = qword ptr  10h
.text:000000000000CE20 arg_10          = qword ptr  18h
.text:000000000000CE20
.text:000000000000CE20 ; __unwind {
.text:000000000000CE20                 push    r15
.text:000000000000CE22                 push    r14
.text:000000000000CE24                 mov     r15d, r8d
.text:000000000000CE27                 push    r13
.text:000000000000CE29                 push    r12
.text:000000000000CE2B                 mov     r14, rdi
.text:000000000000CE2E                 push    rbp
.text:000000000000CE2F                 push    rbx
.text:000000000000CE30                 mov     ebx, r9d
.text:000000000000CE33                 mov     r13, rsi
.text:000000000000CE36                 mov     rbp, rcx
.text:000000000000CE39                 and     ebx, 2
.text:000000000000CE3C                 sub     rsp, 0B8h
.text:000000000000CE43                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000CE4B                 mov     [rsp+0E8h+s], rdx
.text:000000000000CE50                 mov     [rsp+0E8h+var_E0], r8d
.text:000000000000CE55                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000CE5A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000CE5F                 mov     rax, [rsp+0E8h+arg_8]
.text:000000000000CE67                 mov     [rsp+0E8h+var_80], rax
.text:000000000000CE6C                 mov     rax, [rsp+0E8h+arg_10]
.text:000000000000CE74                 mov     [rsp+0E8h+var_88], rax
.text:000000000000CE79                 mov     rax, fs:28h
.text:000000000000CE82                 mov     [rsp+0E8h+var_40], rax
.text:000000000000CE8A                 xor     eax, eax
.text:000000000000CE8C                 call    ___ctype_get_mb_cur_max
.text:000000000000CE91                 cmp     r15d, 0Ah       ; switch 11 cases
.text:000000000000CE95                 mov     [rsp+0E8h+var_90], rax
.text:000000000000CE9A                 ja      def_CEB1        ; jumptable 00000000000121F1 default case
.text:000000000000CEA0                 lea     rcx, jpt_CEB1
.text:000000000000CEA7                 mov     edx, r15d
.text:000000000000CEAA                 movsxd  rax, ds:(jpt_CEB1 - 16B00h)[rcx+rdx*4]
.text:000000000000CEAE                 add     rax, rcx
.text:000000000000CEB1                 jmp     rax             ; switch jump
.text:000000000000CEB3 ; ---------------------------------------------------------------------------
.text:000000000000CEB3
.text:000000000000CEB3 loc_CEB3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000CEB3                                         ; quotearg_buffer_restyled+C66↓j
.text:000000000000CEB3                                         ; DATA XREF: ...
.text:000000000000CEB3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:000000000000CEB8                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000CEBD                 xor     r12d, r12d
.text:000000000000CEC0                 mov     [rsp+0E8h+var_98], 0
.text:000000000000CEC9                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000CECE                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000CED3
.text:000000000000CED3 loc_CED3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:000000000000CED3                 lea     rax, asc_16AA5  ; "'"
.text:000000000000CEDA                 mov     [rsp+0E8h+n], 1
.text:000000000000CEE3                 xor     r15d, r15d
.text:000000000000CEE6                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000CEEE                 mov     [rsp+0E8h+s2], rax
.text:000000000000CEF3
.text:000000000000CEF3 loc_CEF3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:000000000000CEF3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:000000000000CEF3                 xor     r11d, r11d
.text:000000000000CEF6                 mov     rax, rbp
.text:000000000000CEF9                 mov     r8d, r12d
.text:000000000000CEFC                 mov     rbp, r11
.text:000000000000CEFF                 mov     r11, rax
.text:000000000000CF02                 nop     word ptr [rax+rax+00h]
.text:000000000000CF08
.text:000000000000CF08 loc_CF08:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:000000000000CF08                                         ; quotearg_buffer_restyled+42C↓j
.text:000000000000CF08                 cmp     r11, rbp
.text:000000000000CF0B                 setnz   r12b
.text:000000000000CF0F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000CF13                 jnz     short loc_CF22
.text:000000000000CF15                 mov     rax, [rsp+0E8h+s]
.text:000000000000CF1A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000CF1E                 setnz   r12b
.text:000000000000CF22
.text:000000000000CF22 loc_CF22:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:000000000000CF22                 test    r12b, r12b
.text:000000000000CF25                 jz      loc_D580
.text:000000000000CF2B                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000CF30                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000CF35                 lea     r9, [rdi+rbp]
.text:000000000000CF39                 setnz   al
.text:000000000000CF3C                 and     al, [rsp+0E8h+var_DB]
.text:000000000000CF40                 mov     r10d, eax
.text:000000000000CF43                 jz      loc_CFF0
.text:000000000000CF49                 mov     rax, [rsp+0E8h+n]
.text:000000000000CF4E                 test    rax, rax
.text:000000000000CF51                 jz      loc_D380
.text:000000000000CF57                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000CF5B                 lea     rbx, [rbp+rax+0]
.text:000000000000CF60                 jnz     short loc_CF90
.text:000000000000CF62                 cmp     rax, 1
.text:000000000000CF66                 jbe     short loc_CF90
.text:000000000000CF68                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000CF6D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:000000000000CF72                 mov     [rsp+0E8h+ps], r9
.text:000000000000CF77                 call    _strlen
.text:000000000000CF7C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000CF82                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000CF88                 mov     r11, rax
.text:000000000000CF8B                 mov     r9, [rsp+0E8h+ps]
.text:000000000000CF90
.text:000000000000CF90 loc_CF90:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:000000000000CF90                                         ; quotearg_buffer_restyled+146↑j
.text:000000000000CF90                 cmp     rbx, r11
.text:000000000000CF93                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000CF98                 ja      loc_D550
.text:000000000000CF9E                 mov     rdx, [rsp+0E8h+n] ; n
.text:000000000000CFA3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:000000000000CFA8                 mov     rdi, r9         ; s1
.text:000000000000CFAB                 mov     [rsp+0E8h+var_A8], r11
.text:000000000000CFB0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000CFB5                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000CFBA                 call    _memcmp
.text:000000000000CFBF                 test    eax, eax
.text:000000000000CFC1                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000CFC6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000CFCC                 mov     r11, [rsp+0E8h+var_A8]
.text:000000000000CFD1                 jnz     loc_D550
.text:000000000000CFD7                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000CFDC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000CFE2                 jnz     loc_DF65
.text:000000000000CFE8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000CFF0
.text:000000000000CFF0 loc_CFF0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:000000000000CFF0                                         ; quotearg_buffer_restyled+733↓j
.text:000000000000CFF0                 movzx   ebx, byte ptr [r9]
.text:000000000000CFF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000CFF7                 ja      def_D00E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000CFFD                 lea     rcx, jpt_D00E
.text:000000000000D004                 movzx   edx, bl
.text:000000000000D007                 movsxd  rax, ds:(jpt_D00E - 16B2Ch)[rcx+rdx*4]
.text:000000000000D00B                 add     rax, rcx
.text:000000000000D00E                 jmp     rax             ; switch jump
.text:000000000000D010 ; ---------------------------------------------------------------------------
.text:000000000000D010
.text:000000000000D010 loc_D010:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000D010                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D010                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:000000000000D013
.text:000000000000D013 loc_D013:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D013                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D013                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:000000000000D017                 setnz   al
.text:000000000000D01A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000D01E                 jnz     short loc_D02C
.text:000000000000D020                 mov     rax, [rsp+0E8h+s]
.text:000000000000D025                 cmp     byte ptr [rax+1], 0
.text:000000000000D029                 setnz   al
.text:000000000000D02C
.text:000000000000D02C loc_D02C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000D02C                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D031                 setz    dl
.text:000000000000D034                 test    al, al
.text:000000000000D036                 jz      loc_D288
.text:000000000000D03C
.text:000000000000D03C loc_D03C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000D03C                 xor     r12d, r12d
.text:000000000000D03F                 xor     eax, eax
.text:000000000000D041                 nop     dword ptr [rax+00000000h]
.text:000000000000D048
.text:000000000000D048 loc_D048:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:000000000000D048                                         ; quotearg_buffer_restyled+30C↓j ...
.text:000000000000D048                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000D04D                 jnz     loc_D162
.text:000000000000D053                 test    dl, dl
.text:000000000000D055                 jnz     loc_D162
.text:000000000000D05B
.text:000000000000D05B loc_D05B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000D05B                 mov     rsi, [rsp+0E8h+var_C8]
.text:000000000000D060                 test    rsi, rsi
.text:000000000000D063                 jz      short loc_D079
.text:000000000000D065                 mov     edx, ebx
.text:000000000000D067                 shr     dl, 5
.text:000000000000D06A                 movzx   edx, dl
.text:000000000000D06D                 mov     edx, [rsi+rdx*4]
.text:000000000000D070                 bt      edx, ebx
.text:000000000000D073                 jb      loc_D1C3
.text:000000000000D079
.text:000000000000D079 loc_D079:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:000000000000D079                                         ; quotearg_buffer_restyled+34D↓j ...
.text:000000000000D079                 test    r10b, r10b
.text:000000000000D07C                 jnz     loc_D1C3
.text:000000000000D082                 xor     eax, 1
.text:000000000000D085                 add     rbp, 1
.text:000000000000D089                 and     eax, r8d
.text:000000000000D08C
.text:000000000000D08C loc_D08C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000D08C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000D08C                 test    al, al
.text:000000000000D08E                 jz      short loc_D0B0
.text:000000000000D090                 cmp     r13, r15
.text:000000000000D093                 jbe     short loc_D09A
.text:000000000000D095                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D09A
.text:000000000000D09A loc_D09A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000D09A                 lea     rax, [r15+1]
.text:000000000000D09E                 cmp     r13, rax
.text:000000000000D0A1                 jbe     short loc_D0A9
.text:000000000000D0A3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000D0A9
.text:000000000000D0A9 loc_D0A9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:000000000000D0A9                 add     r15, 2
.text:000000000000D0AD                 xor     r8d, r8d
.text:000000000000D0B0
.text:000000000000D0B0 loc_D0B0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:000000000000D0B0                                         ; quotearg_buffer_restyled+403↓j ...
.text:000000000000D0B0                 cmp     r15, r13
.text:000000000000D0B3                 jnb     short loc_D0B9
.text:000000000000D0B5                 mov     [r14+r15], bl
.text:000000000000D0B9
.text:000000000000D0B9 loc_D0B9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:000000000000D0B9                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000D0BE                 add     r15, 1
.text:000000000000D0C2                 mov     eax, 0
.text:000000000000D0C7                 test    r12b, r12b
.text:000000000000D0CA                 cmovz   edi, eax
.text:000000000000D0CD                 mov     [rsp+0E8h+var_DA], dil
.text:000000000000D0D2                 jmp     loc_CF08
.text:000000000000D0D2 ; ---------------------------------------------------------------------------
.text:000000000000D0D7                 align 20h
.text:000000000000D0E0
.text:000000000000D0E0 loc_D0E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000D0E0                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D0E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:000000000000D0E3
.text:000000000000D0E3 loc_D0E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D0E3                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D0E3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:000000000000D0E7                 cmp     eax, 2
.text:000000000000D0EA                 jz      loc_D6A8
.text:000000000000D0F0                 cmp     eax, 5
.text:000000000000D0F3                 jz      loc_D668
.text:000000000000D0F9                 cmp     eax, 2
.text:000000000000D0FC                 mov     ebx, 3Fh ; '?'
.text:000000000000D101                 setz    dl
.text:000000000000D104                 xor     r12d, r12d
.text:000000000000D107                 xor     eax, eax
.text:000000000000D109                 jmp     loc_D048
.text:000000000000D109 ; ---------------------------------------------------------------------------
.text:000000000000D10E                 align 10h
.text:000000000000D110
.text:000000000000D110 loc_D110:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:000000000000D110                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D110                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:000000000000D113
.text:000000000000D113 loc_D113:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D113                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D113                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:000000000000D118                 jz      loc_D620
.text:000000000000D11E                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000D123                 xor     edx, edx
.text:000000000000D125                 xor     eax, eax
.text:000000000000D127                 mov     ebx, 27h ; '''
.text:000000000000D12C                 jmp     loc_D048
.text:000000000000D12C ; ---------------------------------------------------------------------------
.text:000000000000D131                 align 8
.text:000000000000D138
.text:000000000000D138 loc_D138:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D138                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D138                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000D13D                 mov     ebx, 74h ; 't'
.text:000000000000D142
.text:000000000000D142 loc_D142:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:000000000000D142                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:000000000000D142                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D147                 setz    al
.text:000000000000D14A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000D14E                 jnz     loc_D29E
.text:000000000000D154
.text:000000000000D154 loc_D154:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:000000000000D154                                         ; quotearg_buffer_restyled+45A↓j ...
.text:000000000000D154                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000D159                 jnz     short loc_D1C0
.text:000000000000D15B
.text:000000000000D15B loc_D15B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000D15B                 mov     ebx, edx
.text:000000000000D15D                 xor     r12d, r12d
.text:000000000000D160                 xor     eax, eax
.text:000000000000D162
.text:000000000000D162 loc_D162:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:000000000000D162                                         ; quotearg_buffer_restyled+235↑j
.text:000000000000D162                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D167                 jnz     loc_D05B
.text:000000000000D16D                 jmp     loc_D079
.text:000000000000D16D ; ---------------------------------------------------------------------------
.text:000000000000D172                 align 8
.text:000000000000D178
.text:000000000000D178 loc_D178:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D178                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D178                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000D17D                 mov     ebx, 62h ; 'b'
.text:000000000000D182                 jmp     short loc_D154
.text:000000000000D182 ; ---------------------------------------------------------------------------
.text:000000000000D184                 align 8
.text:000000000000D188
.text:000000000000D188 loc_D188:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D188                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D188                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000D18D                 jz      loc_D560
.text:000000000000D193                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000D198                 jz      loc_D3B0
.text:000000000000D19E
.text:000000000000D19E loc_D19E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000D19E                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D1A3                 jz      loc_D3B0
.text:000000000000D1A9                 cmp     [rsp+0E8h+n], 0
.text:000000000000D1AF                 jnz     loc_D56B
.text:000000000000D1B5                 mov     ebx, 5Ch ; '\'
.text:000000000000D1BA                 nop     word ptr [rax+rax+00h]
.text:000000000000D1C0
.text:000000000000D1C0 loc_D1C0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:000000000000D1C0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:000000000000D1C0                 xor     r12d, r12d
.text:000000000000D1C3
.text:000000000000D1C3 loc_D1C3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:000000000000D1C3                                         ; quotearg_buffer_restyled+25C↑j
.text:000000000000D1C3                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D1C8                 setz    dl
.text:000000000000D1CB                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D1D0                 mov     eax, edx
.text:000000000000D1D2                 jnz     loc_DA28
.text:000000000000D1D8                 mov     eax, r8d
.text:000000000000D1DB                 xor     eax, 1
.text:000000000000D1DE                 and     al, dl
.text:000000000000D1E0                 jz      short loc_D211
.text:000000000000D1E2                 cmp     r13, r15
.text:000000000000D1E5                 jbe     short loc_D1EC
.text:000000000000D1E7                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D1EC
.text:000000000000D1EC loc_D1EC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000D1EC                 lea     rdx, [r15+1]
.text:000000000000D1F0                 cmp     r13, rdx
.text:000000000000D1F3                 jbe     short loc_D1FB
.text:000000000000D1F5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000D1FB
.text:000000000000D1FB loc_D1FB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000D1FB                 lea     rdx, [r15+2]
.text:000000000000D1FF                 cmp     r13, rdx
.text:000000000000D202                 jbe     short loc_D20A
.text:000000000000D204                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000D20A
.text:000000000000D20A loc_D20A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000D20A                 add     r15, 3
.text:000000000000D20E                 mov     r8d, eax
.text:000000000000D211
.text:000000000000D211 loc_D211:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:000000000000D211                 cmp     r13, r15
.text:000000000000D214                 jbe     short loc_D21B
.text:000000000000D216                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000D21B
.text:000000000000D21B loc_D21B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000D21B                 add     r15, 1
.text:000000000000D21F                 add     rbp, 1
.text:000000000000D223                 jmp     loc_D0B0
.text:000000000000D223 ; ---------------------------------------------------------------------------
.text:000000000000D228                 align 10h
.text:000000000000D230
.text:000000000000D230 loc_D230:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D230                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D230                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:000000000000D235                 jnz     loc_D403
.text:000000000000D23B                 xor     edx, edx
.text:000000000000D23D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:000000000000D242                 jz      loc_D15B
.text:000000000000D248                 add     rbp, 1
.text:000000000000D24C                 jmp     loc_CF08
.text:000000000000D24C ; ---------------------------------------------------------------------------
.text:000000000000D251                 align 8
.text:000000000000D258
.text:000000000000D258 loc_D258:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D258                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D258                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000D25D                 setz    dl
.text:000000000000D260                 xor     eax, eax
.text:000000000000D262                 jmp     loc_D048
.text:000000000000D262 ; ---------------------------------------------------------------------------
.text:000000000000D267                 align 10h
.text:000000000000D270
.text:000000000000D270 loc_D270:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D270                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D270                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:000000000000D275                 mov     ebx, 61h ; 'a'
.text:000000000000D27A                 jmp     loc_D154
.text:000000000000D27A ; ---------------------------------------------------------------------------
.text:000000000000D27F                 align 20h
.text:000000000000D280
.text:000000000000D280 loc_D280:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D280                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D280                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:000000000000D285                 setz    dl
.text:000000000000D288
.text:000000000000D288 loc_D288:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:000000000000D288                                         ; quotearg_buffer_restyled+6A3↓j
.text:000000000000D288                 test    rbp, rbp
.text:000000000000D28B                 jnz     loc_D03C
.text:000000000000D291
.text:000000000000D291 loc_D291:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:000000000000D291                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:000000000000D291                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000D296                 and     al, dl
.text:000000000000D298                 jz      loc_D048
.text:000000000000D29E
.text:000000000000D29E loc_D29E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000D29E                 mov     rbp, r11
.text:000000000000D2A1                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000D2A9                 jmp     loc_D9A9
.text:000000000000D2A9 ; ---------------------------------------------------------------------------
.text:000000000000D2AE                 align 10h
.text:000000000000D2B0
.text:000000000000D2B0 loc_D2B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D2B0                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D2B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000D2B5                 setz    dl
.text:000000000000D2B8                 xor     r12d, r12d
.text:000000000000D2BB                 jmp     short loc_D291
.text:000000000000D2BB ; ---------------------------------------------------------------------------
.text:000000000000D2BD                 align 20h
.text:000000000000D2C0
.text:000000000000D2C0 loc_D2C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D2C0                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D2C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:000000000000D2C5                 mov     ebx, 20h ; ' '
.text:000000000000D2CA                 setz    dl
.text:000000000000D2CD                 jmp     short loc_D291
.text:000000000000D2CD ; ---------------------------------------------------------------------------
.text:000000000000D2CF                 align 10h
.text:000000000000D2D0
.text:000000000000D2D0 loc_D2D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D2D0                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D2D0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:000000000000D2D5                 mov     ebx, 72h ; 'r'
.text:000000000000D2DA                 jmp     loc_D142
.text:000000000000D2DA ; ---------------------------------------------------------------------------
.text:000000000000D2DF                 align 20h
.text:000000000000D2E0
.text:000000000000D2E0 loc_D2E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D2E0                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D2E0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:000000000000D2E5                 mov     ebx, 66h ; 'f'
.text:000000000000D2EA                 jmp     loc_D154
.text:000000000000D2EA ; ---------------------------------------------------------------------------
.text:000000000000D2EF                 align 10h
.text:000000000000D2F0
.text:000000000000D2F0 loc_D2F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D2F0                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D2F0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:000000000000D2F5                 mov     ebx, 76h ; 'v'
.text:000000000000D2FA                 jmp     loc_D154
.text:000000000000D2FA ; ---------------------------------------------------------------------------
.text:000000000000D2FF                 align 20h
.text:000000000000D300
.text:000000000000D300 loc_D300:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:000000000000D300                                         ; DATA XREF: .rodata:jpt_D00E↓o
.text:000000000000D300                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:000000000000D305                 mov     ebx, 6Eh ; 'n'
.text:000000000000D30A                 jmp     loc_D142
.text:000000000000D30A ; ---------------------------------------------------------------------------
.text:000000000000D30F                 align 10h
.text:000000000000D310
.text:000000000000D310 def_D39A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:000000000000D310                                         ; quotearg_buffer_restyled+57A↓j
.text:000000000000D310                                         ; DATA XREF: ...
.text:000000000000D310                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000D313                 nop     dword ptr [rax+rax+00h]
.text:000000000000D318
.text:000000000000D318 def_D00E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:000000000000D318                                         ; quotearg_buffer_restyled+1EE↑j
.text:000000000000D318                                         ; DATA XREF: ...
.text:000000000000D318                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000D31E                 jnz     loc_D6C8
.text:000000000000D324                 mov     [rsp+0E8h+var_B0], r11
.text:000000000000D329                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000D32E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:000000000000D333                 call    ___ctype_b_loc
.text:000000000000D338                 mov     rcx, [rax]
.text:000000000000D33B                 movzx   edx, bl
.text:000000000000D33E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:000000000000D344                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000D34A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000D34F                 mov     edi, 1
.text:000000000000D354                 movzx   eax, word ptr [rcx+rdx*2]
.text:000000000000D358                 and     ax, 4000h
.text:000000000000D35C                 setnz   r12b
.text:000000000000D360                 setz    al
.text:000000000000D363                 and     al, [rsp+0E8h+var_DB]
.text:000000000000D367
.text:000000000000D367 loc_D367:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:000000000000D367                 test    al, al
.text:000000000000D369                 jnz     loc_DD01
.text:000000000000D36F                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D374                 setz    dl
.text:000000000000D377                 jmp     loc_D048
.text:000000000000D377 ; ---------------------------------------------------------------------------
.text:000000000000D37C                 align 20h
.text:000000000000D380
.text:000000000000D380 loc_D380:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:000000000000D380                 movzx   ebx, byte ptr [r9]
.text:000000000000D384                 cmp     bl, 7Eh         ; switch 127 cases
.text:000000000000D387                 ja      short def_D39A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:000000000000D389                 lea     rcx, jpt_D39A
.text:000000000000D390                 movzx   edx, bl
.text:000000000000D393                 movsxd  rax, ds:(jpt_D39A - 16D28h)[rcx+rdx*4]
.text:000000000000D397                 add     rax, rcx
.text:000000000000D39A                 jmp     rax             ; switch jump
.text:000000000000D39A ; ---------------------------------------------------------------------------
.text:000000000000D39C                 align 20h
.text:000000000000D3A0
.text:000000000000D3A0 loc_D3A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D3A0                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D3A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:000000000000D3A3                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000D3A8                 jnz     loc_D19E
.text:000000000000D3AE                 xchg    ax, ax
.text:000000000000D3B0
.text:000000000000D3B0 loc_D3B0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:000000000000D3B0                                         ; quotearg_buffer_restyled+383↑j
.text:000000000000D3B0                 mov     edx, 5Ch ; '\'
.text:000000000000D3B5                 mov     ebx, 5Ch ; '\'
.text:000000000000D3BA                 jmp     loc_D154
.text:000000000000D3BA ; ---------------------------------------------------------------------------
.text:000000000000D3BF                 align 20h
.text:000000000000D3C0
.text:000000000000D3C0 loc_D3C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D3C0                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D3C0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:000000000000D3C5                 xor     r10d, r10d
.text:000000000000D3C8                 mov     ebx, 66h ; 'f'
.text:000000000000D3CD                 jmp     loc_D154
.text:000000000000D3CD ; ---------------------------------------------------------------------------
.text:000000000000D3D2                 align 8
.text:000000000000D3D8
.text:000000000000D3D8 loc_D3D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D3D8                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D3D8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000D3DD                 xor     r10d, r10d
.text:000000000000D3E0                 mov     ebx, 6Eh ; 'n'
.text:000000000000D3E5                 jmp     loc_D142
.text:000000000000D3E5 ; ---------------------------------------------------------------------------
.text:000000000000D3EA                 align 10h
.text:000000000000D3F0
.text:000000000000D3F0 loc_D3F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D3F0                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D3F0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:000000000000D3F5                 jmp     loc_D1C0
.text:000000000000D3F5 ; ---------------------------------------------------------------------------
.text:000000000000D3FA                 align 20h
.text:000000000000D400
.text:000000000000D400 loc_D400:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D400                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D400                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:000000000000D403
.text:000000000000D403 loc_D403:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:000000000000D403                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D408                 setz    dl
.text:000000000000D40B                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D410                 jnz     loc_DFAA
.text:000000000000D416                 mov     eax, r8d
.text:000000000000D419                 mov     rcx, r15
.text:000000000000D41C                 xor     eax, 1
.text:000000000000D41F                 and     al, dl
.text:000000000000D421                 jz      short loc_D450
.text:000000000000D423                 cmp     r13, r15
.text:000000000000D426                 jbe     short loc_D42D
.text:000000000000D428                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D42D
.text:000000000000D42D loc_D42D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000D42D                 lea     rcx, [r15+1]
.text:000000000000D431                 cmp     r13, rcx
.text:000000000000D434                 jbe     short loc_D43C
.text:000000000000D436                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000D43C
.text:000000000000D43C loc_D43C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000D43C                 lea     rcx, [r15+2]
.text:000000000000D440                 cmp     r13, rcx
.text:000000000000D443                 ja      loc_DA79
.text:000000000000D449
.text:000000000000D449 loc_D449:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:000000000000D449                 lea     rcx, [r15+3]
.text:000000000000D44D                 mov     r8d, eax
.text:000000000000D450
.text:000000000000D450 loc_D450:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:000000000000D450                 cmp     r13, rcx
.text:000000000000D453                 jbe     short loc_D45A
.text:000000000000D455                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000D45A
.text:000000000000D45A loc_D45A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000D45A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D45F                 lea     r15, [rcx+1]
.text:000000000000D463                 jz      loc_DA69
.text:000000000000D469                 lea     rax, [rbp+1]
.text:000000000000D46D                 cmp     rax, r11
.text:000000000000D470                 jnb     short loc_D48B
.text:000000000000D472                 mov     rax, [rsp+0E8h+s]
.text:000000000000D477                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000D47C                 mov     byte ptr [rsp+0E8h+ps], al
.text:000000000000D480                 sub     eax, 30h ; '0'
.text:000000000000D483                 cmp     al, 9
.text:000000000000D485                 jbe     loc_DCB9
.text:000000000000D48B
.text:000000000000D48B loc_D48B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000D48B                 mov     eax, r12d
.text:000000000000D48E                 mov     ebx, 30h ; '0'
.text:000000000000D493                 xor     r12d, r12d
.text:000000000000D496                 jmp     loc_D048
.text:000000000000D496 ; ---------------------------------------------------------------------------
.text:000000000000D49B                 align 20h
.text:000000000000D4A0
.text:000000000000D4A0 loc_D4A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D4A0                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D4A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:000000000000D4A5                 mov     r12d, r10d
.text:000000000000D4A8                 setz    dl
.text:000000000000D4AB                 xor     r10d, r10d
.text:000000000000D4AE                 xor     eax, eax
.text:000000000000D4B0                 jmp     loc_D048
.text:000000000000D4B0 ; ---------------------------------------------------------------------------
.text:000000000000D4B5                 align 8
.text:000000000000D4B8
.text:000000000000D4B8 loc_D4B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D4B8                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D4B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000D4BD                 setz    dl
.text:000000000000D4C0                 xor     r10d, r10d
.text:000000000000D4C3                 jmp     loc_D288
.text:000000000000D4C3 ; ---------------------------------------------------------------------------
.text:000000000000D4C8                 align 10h
.text:000000000000D4D0
.text:000000000000D4D0 loc_D4D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D4D0                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D4D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:000000000000D4D5                 setz    dl
.text:000000000000D4D8                 xor     r10d, r10d
.text:000000000000D4DB                 xor     r12d, r12d
.text:000000000000D4DE                 jmp     loc_D291
.text:000000000000D4DE ; ---------------------------------------------------------------------------
.text:000000000000D4E3                 align 8
.text:000000000000D4E8
.text:000000000000D4E8 loc_D4E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D4E8                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D4E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000D4ED                 mov     r12d, r10d
.text:000000000000D4F0                 mov     ebx, 20h ; ' '
.text:000000000000D4F5                 setz    dl
.text:000000000000D4F8                 xor     r10d, r10d
.text:000000000000D4FB                 jmp     loc_D291
.text:000000000000D500 ; ---------------------------------------------------------------------------
.text:000000000000D500
.text:000000000000D500 loc_D500:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D500                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D500                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:000000000000D505                 xor     r10d, r10d
.text:000000000000D508                 mov     ebx, 72h ; 'r'
.text:000000000000D50D                 jmp     loc_D142
.text:000000000000D50D ; ---------------------------------------------------------------------------
.text:000000000000D512                 align 8
.text:000000000000D518
.text:000000000000D518 loc_D518:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D518                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D518                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000D51D                 jmp     loc_D1C0
.text:000000000000D51D ; ---------------------------------------------------------------------------
.text:000000000000D522                 align 8
.text:000000000000D528
.text:000000000000D528 loc_D528:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D528                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D528                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000D52D                 xor     r10d, r10d
.text:000000000000D530                 mov     ebx, 74h ; 't'
.text:000000000000D535                 jmp     loc_D142
.text:000000000000D535 ; ---------------------------------------------------------------------------
.text:000000000000D53A                 align 20h
.text:000000000000D540
.text:000000000000D540 loc_D540:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:000000000000D540                                         ; DATA XREF: .rodata:jpt_D39A↓o
.text:000000000000D540                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:000000000000D545                 jmp     loc_D1C0
.text:000000000000D545 ; ---------------------------------------------------------------------------
.text:000000000000D54A                 align 10h
.text:000000000000D550
.text:000000000000D550 loc_D550:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:000000000000D550                                         ; quotearg_buffer_restyled+1B1↑j
.text:000000000000D550                 xor     r10d, r10d
.text:000000000000D553                 jmp     loc_CFF0
.text:000000000000D553 ; ---------------------------------------------------------------------------
.text:000000000000D558                 align 20h
.text:000000000000D560
.text:000000000000D560 loc_D560:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:000000000000D560                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D565                 jnz     loc_DED0
.text:000000000000D56B
.text:000000000000D56B loc_D56B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000D56B                 add     rbp, 1
.text:000000000000D56F                 mov     eax, r8d
.text:000000000000D572                 xor     r12d, r12d
.text:000000000000D575                 mov     ebx, 5Ch ; '\'
.text:000000000000D57A                 jmp     loc_D08C
.text:000000000000D57A ; ---------------------------------------------------------------------------
.text:000000000000D57F                 align 20h
.text:000000000000D580
.text:000000000000D580 loc_D580:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:000000000000D580                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D585                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000D58A                 mov     r12d, r8d
.text:000000000000D58D                 mov     rbp, r11
.text:000000000000D590                 setz    dl
.text:000000000000D593                 mov     eax, ebx
.text:000000000000D595                 test    r15, r15
.text:000000000000D598                 setz    cl
.text:000000000000D59B                 and     eax, edx
.text:000000000000D59D                 and     al, cl
.text:000000000000D59F                 jnz     loc_E006
.text:000000000000D5A5                 mov     eax, ebx
.text:000000000000D5A7                 xor     eax, 1
.text:000000000000D5AA                 and     dl, al
.text:000000000000D5AC                 jz      loc_DF1C
.text:000000000000D5B2                 cmp     [rsp+0E8h+var_6C], 0
.text:000000000000D5B7                 jz      loc_DF1A
.text:000000000000D5BD                 cmp     [rsp+0E8h+var_DA], 0
.text:000000000000D5C2                 jnz     loc_DFBD
.text:000000000000D5C8                 test    r13, r13
.text:000000000000D5CB                 setz    al
.text:000000000000D5CE                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000D5D4                 setnz   dl
.text:000000000000D5D7                 and     al, dl
.text:000000000000D5D9                 jz      loc_DFFC
.text:000000000000D5DF                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000D5E4
.text:000000000000D5E4 loc_D5E4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:000000000000D5E4                 lea     rbx, asc_16AA5  ; "'"
.text:000000000000D5EB                 mov     byte ptr [r14], 27h ; '''
.text:000000000000D5EF                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000D5F7                 mov     r15d, 1
.text:000000000000D5FD                 mov     [rsp+0E8h+n], 1
.text:000000000000D606                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000D60B                 mov     [rsp+0E8h+s2], rbx
.text:000000000000D610                 mov     [rsp+0E8h+var_6C], al
.text:000000000000D614                 jmp     loc_CEF3
.text:000000000000D614 ; ---------------------------------------------------------------------------
.text:000000000000D619                 align 20h
.text:000000000000D620
.text:000000000000D620 loc_D620:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:000000000000D620                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D625                 jnz     loc_DED0
.text:000000000000D62B                 test    r13, r13
.text:000000000000D62E                 jz      loc_DA30
.text:000000000000D634                 xor     edx, edx
.text:000000000000D636                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000D63C                 jnz     loc_DA30
.text:000000000000D642
.text:000000000000D642 loc_D642:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:000000000000D642                                         ; quotearg_buffer_restyled+122A↓j
.text:000000000000D642                 mov     [rsp+0E8h+var_98], r13
.text:000000000000D647                 add     r15, 3
.text:000000000000D64B                 xor     eax, eax
.text:000000000000D64D                 mov     [rsp+0E8h+var_6C], r12b
.text:000000000000D652                 xor     r8d, r8d
.text:000000000000D655                 mov     r13, rdx
.text:000000000000D658                 mov     ebx, 27h ; '''
.text:000000000000D65D                 jmp     loc_D079
.text:000000000000D65D ; ---------------------------------------------------------------------------
.text:000000000000D662                 align 8
.text:000000000000D668
.text:000000000000D668 loc_D668:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:000000000000D668                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000D66D                 jz      short loc_D690
.text:000000000000D66F                 lea     rcx, [rbp+2]
.text:000000000000D673                 cmp     rcx, r11
.text:000000000000D676                 jnb     short loc_D690
.text:000000000000D678                 mov     rax, [rsp+0E8h+s]
.text:000000000000D67D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:000000000000D682                 jz      loc_DE12
.text:000000000000D688                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000D690
.text:000000000000D690 loc_D690:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:000000000000D690                                         ; quotearg_buffer_restyled+856↑j ...
.text:000000000000D690                 xor     edx, edx
.text:000000000000D692                 xor     r12d, r12d
.text:000000000000D695                 xor     eax, eax
.text:000000000000D697                 mov     ebx, 3Fh ; '?'
.text:000000000000D69C                 jmp     loc_D048
.text:000000000000D69C ; ---------------------------------------------------------------------------
.text:000000000000D6A1                 align 8
.text:000000000000D6A8
.text:000000000000D6A8 loc_D6A8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:000000000000D6A8                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000D6AD                 jnz     loc_DED0
.text:000000000000D6B3                 xor     r12d, r12d
.text:000000000000D6B6                 xor     eax, eax
.text:000000000000D6B8                 mov     ebx, 3Fh ; '?'
.text:000000000000D6BD                 jmp     loc_D079
.text:000000000000D6BD ; ---------------------------------------------------------------------------
.text:000000000000D6C2                 align 8
.text:000000000000D6C8
.text:000000000000D6C8 loc_D6C8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:000000000000D6C8                 lea     rax, [rsp+0E8h+var_48]
.text:000000000000D6D0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000D6D4                 mov     [rsp+0E8h+var_48], 0
.text:000000000000D6E0                 mov     [rsp+0E8h+ps], rax
.text:000000000000D6E5                 jnz     short loc_D714
.text:000000000000D6E7                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000D6EC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:000000000000D6F1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:000000000000D6F6                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000D6FB                 call    _strlen
.text:000000000000D700                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:000000000000D706                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000D70C                 mov     r11, rax
.text:000000000000D70F                 mov     r9, [rsp+0E8h+var_B8]
.text:000000000000D714
.text:000000000000D714 loc_D714:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:000000000000D714                 lea     rax, [rsp+0E8h+wc]
.text:000000000000D71C                 xor     ecx, ecx
.text:000000000000D71E                 mov     [rsp+0E8h+var_6A], bl
.text:000000000000D722                 mov     [rsp+0E8h+var_6B], r8b
.text:000000000000D727                 mov     rbx, rcx
.text:000000000000D72A                 mov     [rsp+0E8h+var_60], r9
.text:000000000000D732                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000D737                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000D73C                 mov     [rsp+0E8h+var_68], r15
.text:000000000000D744                 mov     [rsp+0E8h+var_A8], r14
.text:000000000000D749                 mov     [rsp+0E8h+var_78], r13
.text:000000000000D74E                 mov     [rsp+0E8h+var_B8], r11
.text:000000000000D753
.text:000000000000D753 loc_D753:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:000000000000D753                 mov     rax, [rsp+0E8h+s]
.text:000000000000D758                 lea     r14, [rbp+rbx+0]
.text:000000000000D75D                 mov     rdx, [rsp+0E8h+var_B8]
.text:000000000000D762                 mov     rcx, [rsp+0E8h+ps]
.text:000000000000D767                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000D76C                 lea     r13, [rax+r14]
.text:000000000000D770                 sub     rdx, r14
.text:000000000000D773                 mov     rsi, r13
.text:000000000000D776                 call    rpl_mbrtowc
.text:000000000000D77B                 test    rax, rax
.text:000000000000D77E                 mov     r15, rax
.text:000000000000D781                 jz      short loc_D7D1
.text:000000000000D783                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D787                 jz      loc_DDA5
.text:000000000000D78D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000D791                 jz      loc_DD31
.text:000000000000D797                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D79C                 setz    al
.text:000000000000D79F                 and     al, [rsp+0E8h+var_D9]
.text:000000000000D7A3                 jnz     loc_D940
.text:000000000000D7A9
.text:000000000000D7A9 loc_D7A9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:000000000000D7A9                                         ; quotearg_buffer_restyled+B47↓j
.text:000000000000D7A9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:000000000000D7B0                 call    _iswprint
.text:000000000000D7B5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000D7BA                 test    eax, eax
.text:000000000000D7BC                 mov     eax, 0
.text:000000000000D7C1                 cmovz   r12d, eax
.text:000000000000D7C5                 add     rbx, r15
.text:000000000000D7C8                 call    _mbsinit
.text:000000000000D7CD                 test    eax, eax
.text:000000000000D7CF                 jz      short loc_D753
.text:000000000000D7D1
.text:000000000000D7D1 loc_D7D1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:000000000000D7D1                 mov     edx, r12d
.text:000000000000D7D4                 mov     rdi, rbx
.text:000000000000D7D7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000D7DD                 xor     edx, 1
.text:000000000000D7E0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000D7E5                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000D7EB                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000D7EF                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000D7F7                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000D7FC                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000D801                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000D806
.text:000000000000D806 loc_D806:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:000000000000D806                                         ; quotearg_buffer_restyled+FB8↓j
.text:000000000000D806                 cmp     rdi, 1
.text:000000000000D80A                 jbe     loc_DE0B
.text:000000000000D810
.text:000000000000D810 loc_D810:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:000000000000D810                 mov     rcx, rdi
.text:000000000000D813                 xor     esi, esi
.text:000000000000D815                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000D81B                 add     rcx, rbp
.text:000000000000D81E                 mov     rdi, [rsp+0E8h+s]
.text:000000000000D823                 jmp     loc_D8DE
.text:000000000000D823 ; ---------------------------------------------------------------------------
.text:000000000000D828                 align 10h
.text:000000000000D830
.text:000000000000D830 loc_D830:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:000000000000D830                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000D835                 setz    al
.text:000000000000D838                 test    r9b, r9b
.text:000000000000D83B                 jnz     loc_DCF0
.text:000000000000D841                 mov     esi, r8d
.text:000000000000D844                 xor     esi, 1
.text:000000000000D847                 and     al, sil
.text:000000000000D84A                 jz      short loc_D87B
.text:000000000000D84C                 cmp     r13, r15
.text:000000000000D84F                 jbe     short loc_D856
.text:000000000000D851                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D856
.text:000000000000D856 loc_D856:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:000000000000D856                 lea     rsi, [r15+1]
.text:000000000000D85A                 cmp     r13, rsi
.text:000000000000D85D                 jbe     short loc_D865
.text:000000000000D85F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000D865
.text:000000000000D865 loc_D865:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:000000000000D865                 lea     rsi, [r15+2]
.text:000000000000D869                 cmp     r13, rsi
.text:000000000000D86C                 jbe     short loc_D874
.text:000000000000D86E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000D874
.text:000000000000D874 loc_D874:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:000000000000D874                 add     r15, 3
.text:000000000000D878                 mov     r8d, eax
.text:000000000000D87B
.text:000000000000D87B loc_D87B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000D87B                 cmp     r13, r15
.text:000000000000D87E                 jbe     short loc_D885
.text:000000000000D880                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000D885
.text:000000000000D885 loc_D885:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:000000000000D885                 lea     rax, [r15+1]
.text:000000000000D889                 cmp     r13, rax
.text:000000000000D88C                 jbe     short loc_D89B
.text:000000000000D88E                 mov     eax, ebx
.text:000000000000D890                 shr     al, 6
.text:000000000000D893                 add     eax, 30h ; '0'
.text:000000000000D896                 mov     [r14+r15+1], al
.text:000000000000D89B
.text:000000000000D89B loc_D89B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000D89B                 lea     rax, [r15+2]
.text:000000000000D89F                 cmp     r13, rax
.text:000000000000D8A2                 jbe     short loc_D8B4
.text:000000000000D8A4                 mov     eax, ebx
.text:000000000000D8A6                 shr     al, 3
.text:000000000000D8A9                 and     eax, 7
.text:000000000000D8AC                 add     eax, 30h ; '0'
.text:000000000000D8AF                 mov     [r14+r15+2], al
.text:000000000000D8B4
.text:000000000000D8B4 loc_D8B4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:000000000000D8B4                 and     ebx, 7
.text:000000000000D8B7                 add     rbp, 1
.text:000000000000D8BB                 add     r15, 3
.text:000000000000D8BF                 add     ebx, 30h ; '0'
.text:000000000000D8C2                 cmp     rbp, rcx
.text:000000000000D8C5                 jnb     loc_D0B0
.text:000000000000D8CB                 mov     esi, edx
.text:000000000000D8CD
.text:000000000000D8CD loc_D8CD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000D8CD                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000D8CD                 cmp     r13, r15
.text:000000000000D8D0                 jbe     short loc_D8D6
.text:000000000000D8D2                 mov     [r14+r15], bl
.text:000000000000D8D6
.text:000000000000D8D6 loc_D8D6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:000000000000D8D6                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000D8DA                 add     r15, 1
.text:000000000000D8DE
.text:000000000000D8DE loc_D8DE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000D8DE                 test    dl, dl
.text:000000000000D8E0                 jnz     loc_D830
.text:000000000000D8E6                 mov     eax, esi
.text:000000000000D8E8                 xor     eax, 1
.text:000000000000D8EB                 and     eax, r8d
.text:000000000000D8EE                 test    r10b, r10b
.text:000000000000D8F1                 jz      short loc_D901
.text:000000000000D8F3                 cmp     r13, r15
.text:000000000000D8F6                 jbe     short loc_D8FD
.text:000000000000D8F8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000D8FD
.text:000000000000D8FD loc_D8FD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000D8FD                 add     r15, 1
.text:000000000000D901
.text:000000000000D901 loc_D901:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:000000000000D901                 add     rbp, 1
.text:000000000000D905                 cmp     rbp, rcx
.text:000000000000D908                 jnb     loc_D08C
.text:000000000000D90E                 test    al, al
.text:000000000000D910                 jz      loc_DD0E
.text:000000000000D916                 cmp     r13, r15
.text:000000000000D919                 jbe     short loc_D920
.text:000000000000D91B                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000D920
.text:000000000000D920 loc_D920:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:000000000000D920                 lea     rax, [r15+1]
.text:000000000000D924                 cmp     r13, rax
.text:000000000000D927                 jbe     short loc_D92F
.text:000000000000D929                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000D92F
.text:000000000000D92F loc_D92F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000D92F                 add     r15, 2
.text:000000000000D933                 xor     r10d, r10d
.text:000000000000D936                 xor     r8d, r8d
.text:000000000000D939                 jmp     short loc_D8CD
.text:000000000000D939 ; ---------------------------------------------------------------------------
.text:000000000000D93B                 align 20h
.text:000000000000D940
.text:000000000000D940 loc_D940:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:000000000000D940                 cmp     r15, 1
.text:000000000000D944                 jz      loc_D7A9
.text:000000000000D94A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000D94F                 lea     rcx, [rdi+r15]
.text:000000000000D953                 lea     rdx, [rdi+r14+1]
.text:000000000000D958                 lea     r8, [rcx+r14]
.text:000000000000D95C                 jmp     short loc_D96D
.text:000000000000D95C ; ---------------------------------------------------------------------------
.text:000000000000D95E                 align 20h
.text:000000000000D960
.text:000000000000D960 loc_D960:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:000000000000D960                                         ; quotearg_buffer_restyled+B70↓j
.text:000000000000D960                 add     rdx, 1
.text:000000000000D964                 cmp     r8, rdx
.text:000000000000D967                 jz      loc_D7A9
.text:000000000000D96D
.text:000000000000D96D loc_D96D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000D96D                 movzx   ecx, byte ptr [rdx]
.text:000000000000D970                 sub     ecx, 5Bh ; '['
.text:000000000000D973                 cmp     cl, 21h ; '!'
.text:000000000000D976                 ja      short loc_D960
.text:000000000000D978                 mov     esi, 1
.text:000000000000D97D                 shl     rsi, cl
.text:000000000000D980                 mov     rcx, rsi
.text:000000000000D983                 mov     rsi, 20000002Bh
.text:000000000000D98D                 test    rcx, rsi
.text:000000000000D990                 jz      short loc_D960
.text:000000000000D992                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000D997                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000D99C                 mov     rbp, [rsp+0E8h+var_B8]
.text:000000000000D9A1                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000D9A9
.text:000000000000D9A9 loc_D9A9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:000000000000D9A9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:000000000000D9A9                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000D9AE                 jz      short loc_D9C0
.text:000000000000D9B0                 test    al, al
.text:000000000000D9B2                 mov     eax, 4
.text:000000000000D9B7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000D9BC                 mov     [rsp+0E8h+var_E0], eax
.text:000000000000D9C0
.text:000000000000D9C0 loc_D9C0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:000000000000D9C0                                         ; quotearg_buffer_restyled+1205↓j
.text:000000000000D9C0                 sub     rsp, 8
.text:000000000000D9C4                 mov     rcx, rbp
.text:000000000000D9C7                 mov     rsi, r13
.text:000000000000D9CA                 push    [rsp+0F0h+var_88]
.text:000000000000D9CE                 push    [rsp+0F8h+var_80]
.text:000000000000D9D2                 mov     rdi, r14
.text:000000000000D9D5                 push    0
.text:000000000000D9D7                 mov     r9d, [rsp+108h+var_70]
.text:000000000000D9DF                 mov     r8d, [rsp+108h+var_E0]
.text:000000000000D9E4                 mov     rdx, [rsp+108h+s]
.text:000000000000D9E9                 and     r9d, 0FFFFFFFDh
.text:000000000000D9ED                 call    quotearg_buffer_restyled
.text:000000000000D9F2                 add     rsp, 20h
.text:000000000000D9F6                 mov     r15, rax
.text:000000000000D9F9
.text:000000000000D9F9 loc_D9F9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:000000000000D9F9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:000000000000D9F9                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000DA01                 xor     rbx, fs:28h
.text:000000000000DA0A                 mov     rax, r15
.text:000000000000DA0D                 jnz     loc_E013
.text:000000000000DA13                 add     rsp, 0B8h
.text:000000000000DA1A                 pop     rbx
.text:000000000000DA1B                 pop     rbp
.text:000000000000DA1C                 pop     r12
.text:000000000000DA1E                 pop     r13
.text:000000000000DA20                 pop     r14
.text:000000000000DA22                 pop     r15
.text:000000000000DA24                 retn
.text:000000000000DA24 ; ---------------------------------------------------------------------------
.text:000000000000DA25                 align 8
.text:000000000000DA28
.text:000000000000DA28 loc_DA28:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:000000000000DA28                 mov     rbp, r11
.text:000000000000DA2B                 jmp     loc_D9A9
.text:000000000000DA30 ; ---------------------------------------------------------------------------
.text:000000000000DA30
.text:000000000000DA30 loc_DA30:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:000000000000DA30                                         ; quotearg_buffer_restyled+81C↑j
.text:000000000000DA30                 cmp     r13, r15
.text:000000000000DA33                 jbe     short loc_DA3A
.text:000000000000DA35                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000DA3A
.text:000000000000DA3A loc_DA3A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000DA3A                 lea     rax, [r15+1]
.text:000000000000DA3E                 cmp     r13, rax
.text:000000000000DA41                 jbe     short loc_DA49
.text:000000000000DA43                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:000000000000DA49
.text:000000000000DA49 loc_DA49:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:000000000000DA49                 lea     rax, [r15+2]
.text:000000000000DA4D                 cmp     r13, rax
.text:000000000000DA50                 jbe     loc_E042
.text:000000000000DA56                 mov     rdx, r13
.text:000000000000DA59                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000DA5F                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000DA64                 jmp     loc_D642
.text:000000000000DA69 ; ---------------------------------------------------------------------------
.text:000000000000DA69
.text:000000000000DA69 loc_DA69:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:000000000000DA69                 mov     eax, r12d
.text:000000000000DA6C                 mov     ebx, 30h ; '0'
.text:000000000000DA71                 xor     r12d, r12d
.text:000000000000DA74                 jmp     loc_D079
.text:000000000000DA79 ; ---------------------------------------------------------------------------
.text:000000000000DA79
.text:000000000000DA79 loc_DA79:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:000000000000DA79                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000DA7F                 jmp     loc_D449
.text:000000000000DA84 ; ---------------------------------------------------------------------------
.text:000000000000DA84
.text:000000000000DA84 loc_DA84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DA84                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DA84                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:000000000000DA86                 jnz     loc_CEB3        ; jumptable 00000000000121F1 case 1
.text:000000000000DA8C                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DA91
.text:000000000000DA91 loc_DA91:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:000000000000DA91                 test    r13, r13
.text:000000000000DA94                 jnz     loc_E02A
.text:000000000000DA9A                 lea     rax, asc_16AA5  ; "'"
.text:000000000000DAA1                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DAAA                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DAAF                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DAB4                 xor     r12d, r12d
.text:000000000000DAB7                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000DABC                 mov     [rsp+0E8h+n], 1
.text:000000000000DAC5                 mov     [rsp+0E8h+s2], rax
.text:000000000000DACA                 mov     r15d, 1
.text:000000000000DAD0                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000DAD8                 jmp     loc_CEF3
.text:000000000000DAD8 ; ---------------------------------------------------------------------------
.text:000000000000DADD                 align 20h
.text:000000000000DAE0
.text:000000000000DAE0 loc_DAE0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DAE0                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DAE0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:000000000000DAE2                 jnz     loc_DEDD
.text:000000000000DAE8                 test    r13, r13
.text:000000000000DAEB                 jz      loc_DD16
.text:000000000000DAF1                 mov     byte ptr [r14], 22h ; '"'
.text:000000000000DAF5                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DAFA                 xor     r12d, r12d
.text:000000000000DAFD                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DB02                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DB0B
.text:000000000000DB0B loc_DB0B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000DB0B                 lea     rax, unk_16AA3
.text:000000000000DB12                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000DB17                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DB1C                 mov     [rsp+0E8h+n], 1
.text:000000000000DB25                 mov     r15d, 1
.text:000000000000DB2B                 mov     [rsp+0E8h+s2], rax
.text:000000000000DB30                 jmp     loc_CEF3
.text:000000000000DB35 ; ---------------------------------------------------------------------------
.text:000000000000DB35
.text:000000000000DB35 loc_DB35:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DB35                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DB35                 lea     rax, unk_16AA3  ; jumptable 00000000000121F1 case 6
.text:000000000000DB3C                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DB41                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DB46                 xor     r12d, r12d
.text:000000000000DB49                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DB52                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000DB57                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DB5C                 mov     [rsp+0E8h+n], 1
.text:000000000000DB65                 xor     r15d, r15d
.text:000000000000DB68                 mov     [rsp+0E8h+s2], rax
.text:000000000000DB6D                 mov     [rsp+0E8h+var_E0], 5
.text:000000000000DB75                 jmp     loc_CEF3
.text:000000000000DB7A ; ---------------------------------------------------------------------------
.text:000000000000DB7A
.text:000000000000DB7A loc_DB7A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DB7A                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DB7A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000DB7F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DB84                 xor     r12d, r12d
.text:000000000000DB87                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DB90                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000DB95                 xor     r15d, r15d
.text:000000000000DB98                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DB9D                 mov     [rsp+0E8h+n], 0
.text:000000000000DBA6                 mov     [rsp+0E8h+s2], 0
.text:000000000000DBAF                 jmp     loc_CEF3
.text:000000000000DBB4 ; ---------------------------------------------------------------------------
.text:000000000000DBB4
.text:000000000000DBB4 loc_DBB4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DBB4                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DBB4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:000000000000DBB9                 jz      short loc_DC11
.text:000000000000DBBB                 lea     rsi, asc_16AA7  ; "`"
.text:000000000000DBC2                 xor     edi, edi        ; domainname
.text:000000000000DBC4                 mov     edx, 5          ; category
.text:000000000000DBC9                 call    _dcgettext
.text:000000000000DBCE                 mov     rcx, rax
.text:000000000000DBD1                 mov     [rsp+0E8h+var_80], rax
.text:000000000000DBD6                 lea     rax, asc_16AA7  ; "`"
.text:000000000000DBDD                 cmp     rcx, rax
.text:000000000000DBE0                 jz      loc_DF7E
.text:000000000000DBE6
.text:000000000000DBE6 loc_DBE6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:000000000000DBE6                 lea     rsi, asc_16AA5  ; "'"
.text:000000000000DBED                 xor     edi, edi        ; domainname
.text:000000000000DBEF                 mov     edx, 5          ; category
.text:000000000000DBF4                 call    _dcgettext
.text:000000000000DBF9                 mov     rcx, rax
.text:000000000000DBFC                 mov     [rsp+0E8h+var_88], rax
.text:000000000000DC01                 lea     rax, asc_16AA5  ; "'"
.text:000000000000DC08                 cmp     rcx, rax
.text:000000000000DC0B                 jz      loc_DF94
.text:000000000000DC11
.text:000000000000DC11 loc_DC11:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:000000000000DC11                                         ; quotearg_buffer_restyled+1185↓j
.text:000000000000DC11                 xor     r15d, r15d
.text:000000000000DC14                 test    ebx, ebx
.text:000000000000DC16                 jz      loc_DDDD
.text:000000000000DC1C
.text:000000000000DC1C loc_DC1C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000DC1C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000DC1C                 test    ebx, ebx
.text:000000000000DC1E                 mov     rbx, [rsp+0E8h+var_88]
.text:000000000000DC23                 setnz   [rsp+0E8h+var_D9]
.text:000000000000DC28                 xor     r12d, r12d
.text:000000000000DC2B                 mov     rdi, rbx        ; s
.text:000000000000DC2E                 call    _strlen
.text:000000000000DC33                 mov     [rsp+0E8h+s2], rbx
.text:000000000000DC38                 mov     [rsp+0E8h+n], rax
.text:000000000000DC3D                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DC42                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DC47                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DC50                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DC55                 jmp     loc_CEF3
.text:000000000000DC5A ; ---------------------------------------------------------------------------
.text:000000000000DC5A
.text:000000000000DC5A loc_DC5A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DC5A                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DC5A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000DC5F                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DC64                 xor     r12d, r12d
.text:000000000000DC67                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DC70                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000DC75                 xor     r15d, r15d
.text:000000000000DC78                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000DC7D                 mov     [rsp+0E8h+n], 0
.text:000000000000DC86                 mov     [rsp+0E8h+s2], 0
.text:000000000000DC8F                 jmp     loc_CEF3
.text:000000000000DC94 ; ---------------------------------------------------------------------------
.text:000000000000DC94
.text:000000000000DC94 loc_DC94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DC94                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DC94                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:000000000000DC99                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DC9E                 xor     r12d, r12d
.text:000000000000DCA1                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DCAA                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000DCAF                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DCB4                 jmp     loc_CED3
.text:000000000000DCB9 ; ---------------------------------------------------------------------------
.text:000000000000DCB9
.text:000000000000DCB9 loc_DCB9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:000000000000DCB9                 cmp     r13, r15
.text:000000000000DCBC                 jbe     short loc_DCC3
.text:000000000000DCBE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:000000000000DCC3
.text:000000000000DCC3 loc_DCC3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:000000000000DCC3                 lea     rax, [rcx+2]
.text:000000000000DCC7                 cmp     r13, rax
.text:000000000000DCCA                 jbe     short loc_DCD2
.text:000000000000DCCC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:000000000000DCD2
.text:000000000000DCD2 loc_DCD2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:000000000000DCD2                 mov     eax, r12d
.text:000000000000DCD5                 lea     r15, [rcx+3]
.text:000000000000DCD9                 xor     r12d, r12d
.text:000000000000DCDC                 mov     ebx, 30h ; '0'
.text:000000000000DCE1                 jmp     loc_D048
.text:000000000000DCE1 ; ---------------------------------------------------------------------------
.text:000000000000DCE6                 align 10h
.text:000000000000DCF0
.text:000000000000DCF0 loc_DCF0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:000000000000DCF0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000DCF5                 mov     rbp, r11
.text:000000000000DCF8                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000DCFC                 jmp     loc_D9A9
.text:000000000000DD01 ; ---------------------------------------------------------------------------
.text:000000000000DD01
.text:000000000000DD01 loc_DD01:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:000000000000DD01                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000DD06                 xor     r12d, r12d
.text:000000000000DD09                 jmp     loc_D810
.text:000000000000DD0E ; ---------------------------------------------------------------------------
.text:000000000000DD0E
.text:000000000000DD0E loc_DD0E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000DD0E                 xor     r10d, r10d
.text:000000000000DD11                 jmp     loc_D8CD
.text:000000000000DD16 ; ---------------------------------------------------------------------------
.text:000000000000DD16
.text:000000000000DD16 loc_DD16:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:000000000000DD16                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DD1F                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DD24                 xor     r12d, r12d
.text:000000000000DD27                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DD2C                 jmp     loc_DB0B
.text:000000000000DD31 ; ---------------------------------------------------------------------------
.text:000000000000DD31
.text:000000000000DD31 loc_DD31:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:000000000000DD31                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000DD36                 mov     rsi, r14
.text:000000000000DD39                 mov     rcx, r13
.text:000000000000DD3C                 mov     rax, rbx
.text:000000000000DD3F                 mov     rdi, rbx
.text:000000000000DD42                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000DD48                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000DD4D                 mov     r9, [rsp+0E8h+var_60]
.text:000000000000DD55                 cmp     rsi, r11
.text:000000000000DD58                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000DD5E                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000DD66                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000DD6B                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000DD70                 jnb     short loc_DD98
.text:000000000000DD72                 cmp     byte ptr [rcx], 0
.text:000000000000DD75                 jnz     short loc_DD87
.text:000000000000DD77                 jmp     short loc_DD98
.text:000000000000DD77 ; ---------------------------------------------------------------------------
.text:000000000000DD79                 align 20h
.text:000000000000DD80
.text:000000000000DD80 loc_DD80:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:000000000000DD80                 cmp     byte ptr [r9+rax], 0
.text:000000000000DD85                 jz      short loc_DD95
.text:000000000000DD87
.text:000000000000DD87 loc_DD87:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:000000000000DD87                 add     rax, 1
.text:000000000000DD8B                 lea     rdx, [rbp+rax+0]
.text:000000000000DD90                 cmp     r11, rdx
.text:000000000000DD93                 ja      short loc_DD80
.text:000000000000DD95
.text:000000000000DD95 loc_DD95:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:000000000000DD95                 mov     rdi, rax
.text:000000000000DD98
.text:000000000000DD98 loc_DD98:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:000000000000DD98                                         ; quotearg_buffer_restyled+F57↑j
.text:000000000000DD98                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000DD9D                 xor     r12d, r12d
.text:000000000000DDA0                 jmp     loc_D806
.text:000000000000DDA5 ; ---------------------------------------------------------------------------
.text:000000000000DDA5
.text:000000000000DDA5 loc_DDA5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:000000000000DDA5                 mov     rdi, rbx
.text:000000000000DDA8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000DDAE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000DDB3                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000DDB9                 mov     r15, [rsp+0E8h+var_68]
.text:000000000000DDC1                 xor     r12d, r12d
.text:000000000000DDC4                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000DDC9                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000DDCE                 mov     r11, [rsp+0E8h+var_B8]
.text:000000000000DDD3                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000DDD8                 jmp     loc_D806
.text:000000000000DDDD ; ---------------------------------------------------------------------------
.text:000000000000DDDD
.text:000000000000DDDD loc_DDDD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000DDDD                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000DDE2                 movzx   eax, byte ptr [rdx]
.text:000000000000DDE5                 test    al, al
.text:000000000000DDE7                 jz      loc_DC1C
.text:000000000000DDED                 nop     dword ptr [rax]
.text:000000000000DDF0
.text:000000000000DDF0 loc_DDF0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:000000000000DDF0                 cmp     r13, r15
.text:000000000000DDF3                 jbe     short loc_DDF9
.text:000000000000DDF5                 mov     [r14+r15], al
.text:000000000000DDF9
.text:000000000000DDF9 loc_DDF9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:000000000000DDF9                 add     r15, 1
.text:000000000000DDFD                 movzx   eax, byte ptr [rdx+r15]
.text:000000000000DE02                 test    al, al
.text:000000000000DE04                 jnz     short loc_DDF0
.text:000000000000DE06                 jmp     loc_DC1C
.text:000000000000DE0B ; ---------------------------------------------------------------------------
.text:000000000000DE0B
.text:000000000000DE0B loc_DE0B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000DE0B                 mov     eax, edx
.text:000000000000DE0D                 jmp     loc_D367
.text:000000000000DE12 ; ---------------------------------------------------------------------------
.text:000000000000DE12
.text:000000000000DE12 loc_DE12:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:000000000000DE12                 movzx   ebx, byte ptr [rax+rcx]
.text:000000000000DE16                 cmp     bl, 3Eh ; '>'
.text:000000000000DE19                 ja      loc_D690
.text:000000000000DE1F                 mov     rax, 7000A38200000000h
.text:000000000000DE29                 bt      rax, rbx
.text:000000000000DE2D                 jnb     loc_D690
.text:000000000000DE33                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000DE38                 jnz     loc_E022
.text:000000000000DE3E                 cmp     r13, r15
.text:000000000000DE41                 jbe     short loc_DE48
.text:000000000000DE43                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:000000000000DE48
.text:000000000000DE48 loc_DE48:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:000000000000DE48                 lea     rax, [r15+1]
.text:000000000000DE4C                 cmp     r13, rax
.text:000000000000DE4F                 jbe     short loc_DE57
.text:000000000000DE51                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:000000000000DE57
.text:000000000000DE57 loc_DE57:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:000000000000DE57                 lea     rax, [r15+2]
.text:000000000000DE5B                 cmp     r13, rax
.text:000000000000DE5E                 jbe     short loc_DE66
.text:000000000000DE60                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:000000000000DE66
.text:000000000000DE66 loc_DE66:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:000000000000DE66                 lea     rax, [r15+3]
.text:000000000000DE6A                 cmp     r13, rax
.text:000000000000DE6D                 jbe     short loc_DE75
.text:000000000000DE6F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:000000000000DE75
.text:000000000000DE75 loc_DE75:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:000000000000DE75                 add     r15, 4
.text:000000000000DE79                 xor     edx, edx
.text:000000000000DE7B                 xor     r12d, r12d
.text:000000000000DE7E                 xor     eax, eax
.text:000000000000DE80                 mov     rbp, rcx
.text:000000000000DE83                 jmp     loc_D048
.text:000000000000DE88 ; ---------------------------------------------------------------------------
.text:000000000000DE88
.text:000000000000DE88 loc_DE88:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000DE88                                         ; DATA XREF: .rodata:jpt_CEB1↓o
.text:000000000000DE88                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000DE8A                 jz      loc_E018
.text:000000000000DE90                 lea     rax, asc_16AA5  ; "'"
.text:000000000000DE97                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DE9C                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DEA1                 xor     r12d, r12d
.text:000000000000DEA4                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DEAD                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000DEB2                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000DEB7                 mov     [rsp+0E8h+n], 1
.text:000000000000DEC0                 xor     r15d, r15d
.text:000000000000DEC3                 mov     [rsp+0E8h+s2], rax
.text:000000000000DEC8                 jmp     loc_CEF3
.text:000000000000DEC8 ; ---------------------------------------------------------------------------
.text:000000000000DECD                 align 10h
.text:000000000000DED0
.text:000000000000DED0 loc_DED0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:000000000000DED0                                         ; quotearg_buffer_restyled+805↑j ...
.text:000000000000DED0                 mov     rbp, r11
.text:000000000000DED3                 movzx   eax, [rsp+0E8h+var_D9]
.text:000000000000DED8                 jmp     loc_D9A9
.text:000000000000DEDD ; ---------------------------------------------------------------------------
.text:000000000000DEDD
.text:000000000000DEDD loc_DEDD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000DEDD                 lea     rax, unk_16AA3
.text:000000000000DEE4                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000DEE9                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000DEEE                 xor     r12d, r12d
.text:000000000000DEF1                 mov     [rsp+0E8h+var_98], 0
.text:000000000000DEFA                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000DEFF                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000DF04                 mov     [rsp+0E8h+n], 1
.text:000000000000DF0D                 xor     r15d, r15d
.text:000000000000DF10                 mov     [rsp+0E8h+s2], rax
.text:000000000000DF15                 jmp     loc_CEF3
.text:000000000000DF1A ; ---------------------------------------------------------------------------
.text:000000000000DF1A
.text:000000000000DF1A loc_DF1A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000DF1A                 mov     eax, edx
.text:000000000000DF1C
.text:000000000000DF1C loc_DF1C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000DF1C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000DF1C                 mov     rbx, [rsp+0E8h+s2]
.text:000000000000DF21                 test    rbx, rbx
.text:000000000000DF24                 jz      short loc_DF52
.text:000000000000DF26                 test    al, al
.text:000000000000DF28                 jz      short loc_DF52
.text:000000000000DF2A                 movzx   ecx, byte ptr [rbx]
.text:000000000000DF2D                 mov     rax, rbx
.text:000000000000DF30                 test    cl, cl
.text:000000000000DF32                 jz      short loc_DF52
.text:000000000000DF34                 mov     rdx, r15
.text:000000000000DF37                 sub     rax, r15
.text:000000000000DF3A
.text:000000000000DF3A loc_DF3A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000DF3A                 cmp     r13, rdx
.text:000000000000DF3D                 jbe     short loc_DF43
.text:000000000000DF3F                 mov     [r14+rdx], cl
.text:000000000000DF43
.text:000000000000DF43 loc_DF43:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:000000000000DF43                 add     rdx, 1
.text:000000000000DF47                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000DF4B                 test    cl, cl
.text:000000000000DF4D                 jnz     short loc_DF3A
.text:000000000000DF4F                 mov     r15, rdx
.text:000000000000DF52
.text:000000000000DF52 loc_DF52:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:000000000000DF52                                         ; quotearg_buffer_restyled+1108↑j ...
.text:000000000000DF52                 cmp     r13, r15
.text:000000000000DF55                 jbe     loc_D9F9
.text:000000000000DF5B                 mov     byte ptr [r14+r15], 0
.text:000000000000DF60                 jmp     loc_D9F9
.text:000000000000DF65 ; ---------------------------------------------------------------------------
.text:000000000000DF65
.text:000000000000DF65 loc_DF65:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:000000000000DF65                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000DF6A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000DF6F                 mov     rbp, r11
.text:000000000000DF72                 setz    al
.text:000000000000DF75                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000DF79                 jmp     loc_D9A9
.text:000000000000DF7E ; ---------------------------------------------------------------------------
.text:000000000000DF7E
.text:000000000000DF7E loc_DF7E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000DF7E                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000DF82                 mov     rdi, rcx
.text:000000000000DF85                 call    gettext_quote
.text:000000000000DF8A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000DF8F                 jmp     loc_DBE6
.text:000000000000DF94 ; ---------------------------------------------------------------------------
.text:000000000000DF94
.text:000000000000DF94 loc_DF94:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:000000000000DF94                 mov     esi, [rsp+0E8h+var_E0]
.text:000000000000DF98                 mov     rdi, rcx
.text:000000000000DF9B                 call    gettext_quote
.text:000000000000DFA0                 mov     [rsp+0E8h+var_88], rax
.text:000000000000DFA5                 jmp     loc_DC11
.text:000000000000DFAA ; ---------------------------------------------------------------------------
.text:000000000000DFAA
.text:000000000000DFAA loc_DFAA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000DFAA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000DFAF                 mov     rbp, r11
.text:000000000000DFB2                 mov     eax, edx
.text:000000000000DFB4                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000DFB8                 jmp     loc_D9A9
.text:000000000000DFBD ; ---------------------------------------------------------------------------
.text:000000000000DFBD
.text:000000000000DFBD loc_DFBD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000DFBD                 sub     rsp, 8
.text:000000000000DFC1                 mov     r8d, 5
.text:000000000000DFC7                 mov     rcx, r11
.text:000000000000DFCA                 push    [rsp+0F0h+var_88]
.text:000000000000DFCE                 push    [rsp+0F8h+var_80]
.text:000000000000DFD2                 mov     rdi, r14
.text:000000000000DFD5                 push    [rsp+100h+var_C8]
.text:000000000000DFD9                 mov     r9d, [rsp+108h+var_70]
.text:000000000000DFE1                 mov     rdx, [rsp+108h+s]
.text:000000000000DFE6                 mov     rsi, [rsp+108h+var_98]
.text:000000000000DFEB                 call    quotearg_buffer_restyled
.text:000000000000DFF0                 add     rsp, 20h
.text:000000000000DFF4                 mov     r15, rax
.text:000000000000DFF7                 jmp     loc_D9F9
.text:000000000000DFFC ; ---------------------------------------------------------------------------
.text:000000000000DFFC
.text:000000000000DFFC loc_DFFC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000DFFC                 movzx   eax, [rsp+0E8h+var_6C]
.text:000000000000E001                 jmp     loc_DF1C
.text:000000000000E006 ; ---------------------------------------------------------------------------
.text:000000000000E006
.text:000000000000E006 loc_E006:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:000000000000E006                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000E00E                 jmp     loc_D9A9
.text:000000000000E013 ; ---------------------------------------------------------------------------
.text:000000000000E013
.text:000000000000E013 loc_E013:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:000000000000E013                 call    ___stack_chk_fail
.text:000000000000E018 ; ---------------------------------------------------------------------------
.text:000000000000E018
.text:000000000000E018 loc_E018:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:000000000000E018                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000E01D                 jmp     loc_DA91
.text:000000000000E022 ; ---------------------------------------------------------------------------
.text:000000000000E022
.text:000000000000E022 loc_E022:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:000000000000E022                 mov     rbp, r11
.text:000000000000E025                 jmp     loc_D9C0
.text:000000000000E02A ; ---------------------------------------------------------------------------
.text:000000000000E02A
.text:000000000000E02A loc_E02A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000E02A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000E02F                 xor     eax, eax
.text:000000000000E031                 xor     r12d, r12d
.text:000000000000E034                 mov     [rsp+0E8h+var_98], 0
.text:000000000000E03D                 jmp     loc_D5E4
.text:000000000000E042 ; ---------------------------------------------------------------------------
.text:000000000000E042
.text:000000000000E042 loc_E042:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:000000000000E042                 mov     rdx, r13
.text:000000000000E045                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000E04A                 jmp     loc_D642
.text:000000000000E04F ; ---------------------------------------------------------------------------
.text:000000000000E04F
.text:000000000000E04F def_CEB1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000E04F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000E04F ; } // starts at CE20
.text:000000000000E04F quotearg_buffer_restyled endp
.text:000000000000E04F
.text:000000000000E04F ; ---------------------------------------------------------------------------
.text:000000000000E054                 align 20h
.text:000000000000E060
.text:000000000000E060 ; =============== S U B R O U T I N E =======================================
.text:000000000000E060
.text:000000000000E060
.text:000000000000E060 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:000000000000E060                                         ; quotearg_n_mem+7↓j ...
.text:000000000000E060
.text:000000000000E060 var_50          = qword ptr -50h
.text:000000000000E060 var_48          = qword ptr -48h
.text:000000000000E060 var_40          = dword ptr -40h
.text:000000000000E060 var_3C          = dword ptr -3Ch
.text:000000000000E060
.text:000000000000E060 ; __unwind {
.text:000000000000E060                 push    r15
.text:000000000000E062                 push    r14
.text:000000000000E064                 movsxd  r15, edi
.text:000000000000E067                 push    r13
.text:000000000000E069                 push    r12
.text:000000000000E06B                 mov     r14, rdx
.text:000000000000E06E                 push    rbp
.text:000000000000E06F                 push    rbx
.text:000000000000E070                 mov     rbp, rcx
.text:000000000000E073                 sub     rsp, 28h
.text:000000000000E077                 mov     [rsp+58h+var_50], rsi
.text:000000000000E07C                 call    ___errno_location
.text:000000000000E081                 mov     r13, rax
.text:000000000000E084                 mov     eax, [rax]
.text:000000000000E086                 test    r15d, r15d
.text:000000000000E089                 mov     rbx, cs:slotvec
.text:000000000000E090                 mov     [rsp+58h+var_40], eax
.text:000000000000E094                 js      loc_E201
.text:000000000000E09A                 cmp     cs:nslots, r15d
.text:000000000000E0A1                 jg      short loc_E105
.text:000000000000E0A3                 cmp     r15d, 7FFFFFFFh
.text:000000000000E0AA                 jz      loc_E206
.text:000000000000E0B0                 lea     r12d, [r15+1]
.text:000000000000E0B4                 lea     rax, slotvec0
.text:000000000000E0BB                 movsxd  rsi, r12d
.text:000000000000E0BE                 shl     rsi, 4
.text:000000000000E0C2                 cmp     rbx, rax
.text:000000000000E0C5                 jz      loc_E1E0
.text:000000000000E0CB                 mov     rdi, rbx
.text:000000000000E0CE                 call    xrealloc
.text:000000000000E0D3                 mov     rbx, rax
.text:000000000000E0D6                 mov     cs:slotvec, rax
.text:000000000000E0DD
.text:000000000000E0DD loc_E0DD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000E0DD                 movsxd  rdi, cs:nslots
.text:000000000000E0E4                 mov     edx, r12d
.text:000000000000E0E7                 xor     esi, esi        ; c
.text:000000000000E0E9                 sub     edx, edi
.text:000000000000E0EB                 shl     rdi, 4
.text:000000000000E0EF                 movsxd  rdx, edx
.text:000000000000E0F2                 add     rdi, rbx        ; s
.text:000000000000E0F5                 shl     rdx, 4          ; n
.text:000000000000E0F9                 call    _memset
.text:000000000000E0FE                 mov     cs:nslots, r12d
.text:000000000000E105
.text:000000000000E105 loc_E105:                               ; CODE XREF: quotearg_n_options+41↑j
.text:000000000000E105                 mov     eax, [rbp+4]
.text:000000000000E108                 shl     r15, 4
.text:000000000000E10C                 sub     rsp, 8
.text:000000000000E110                 add     rbx, r15
.text:000000000000E113                 lea     r15, [rbp+8]
.text:000000000000E117                 mov     r8d, [rbp+0]
.text:000000000000E11B                 mov     r11, [rbx]
.text:000000000000E11E                 mov     r12, [rbx+8]
.text:000000000000E122                 mov     rcx, r14
.text:000000000000E125                 or      eax, 1
.text:000000000000E128                 mov     [rsp+60h+var_3C], eax
.text:000000000000E12C                 push    qword ptr [rbp+30h]
.text:000000000000E12F                 mov     r9d, eax
.text:000000000000E132                 push    qword ptr [rbp+28h]
.text:000000000000E135                 push    r15
.text:000000000000E137                 mov     rsi, r11
.text:000000000000E13A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000E13F                 mov     rdi, r12
.text:000000000000E142                 mov     [rsp+78h+var_48], r11
.text:000000000000E147                 call    quotearg_buffer_restyled
.text:000000000000E14C                 add     rsp, 20h
.text:000000000000E150                 mov     r11, [rsp+58h+var_48]
.text:000000000000E155                 cmp     r11, rax
.text:000000000000E158                 ja      short loc_E1C1
.text:000000000000E15A                 lea     rsi, [rax+1]
.text:000000000000E15E                 lea     rax, slot0
.text:000000000000E165                 cmp     r12, rax
.text:000000000000E168                 mov     [rbx], rsi
.text:000000000000E16B                 jz      short loc_E17F
.text:000000000000E16D                 mov     rdi, r12        ; ptr
.text:000000000000E170                 mov     [rsp+58h+var_48], rsi
.text:000000000000E175                 call    free
.text:000000000000E17A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000E17F
.text:000000000000E17F loc_E17F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000E17F                 mov     rdi, rsi
.text:000000000000E182                 mov     [rsp+58h+var_48], rsi
.text:000000000000E187                 call    xmalloc
.text:000000000000E18C                 sub     rsp, 8
.text:000000000000E190                 mov     [rbx+8], rax
.text:000000000000E194                 mov     r8d, [rbp+0]
.text:000000000000E198                 push    qword ptr [rbp+30h]
.text:000000000000E19B                 push    qword ptr [rbp+28h]
.text:000000000000E19E                 mov     rcx, r14
.text:000000000000E1A1                 push    r15
.text:000000000000E1A3                 mov     r9d, [rsp+78h+var_3C]
.text:000000000000E1A8                 mov     rdi, rax
.text:000000000000E1AB                 mov     rdx, [rsp+78h+var_50]
.text:000000000000E1B0                 mov     rsi, [rsp+78h+var_48]
.text:000000000000E1B5                 mov     r12, rax
.text:000000000000E1B8                 call    quotearg_buffer_restyled
.text:000000000000E1BD                 add     rsp, 20h
.text:000000000000E1C1
.text:000000000000E1C1 loc_E1C1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:000000000000E1C1                 mov     eax, [rsp+58h+var_40]
.text:000000000000E1C5                 mov     [r13+0], eax
.text:000000000000E1C9                 add     rsp, 28h
.text:000000000000E1CD                 mov     rax, r12
.text:000000000000E1D0                 pop     rbx
.text:000000000000E1D1                 pop     rbp
.text:000000000000E1D2                 pop     r12
.text:000000000000E1D4                 pop     r13
.text:000000000000E1D6                 pop     r14
.text:000000000000E1D8                 pop     r15
.text:000000000000E1DA                 retn
.text:000000000000E1DA ; ---------------------------------------------------------------------------
.text:000000000000E1DB                 align 20h
.text:000000000000E1E0
.text:000000000000E1E0 loc_E1E0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:000000000000E1E0                 xor     edi, edi
.text:000000000000E1E2                 call    xrealloc
.text:000000000000E1E7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000E1EF                 mov     rbx, rax
.text:000000000000E1F2                 mov     cs:slotvec, rax
.text:000000000000E1F9                 movups  xmmword ptr [rax], xmm0
.text:000000000000E1FC                 jmp     loc_E0DD
.text:000000000000E201 ; ---------------------------------------------------------------------------
.text:000000000000E201
.text:000000000000E201 loc_E201:                               ; CODE XREF: quotearg_n_options+34↑j
.text:000000000000E201                 call    _abort
.text:000000000000E206 ; ---------------------------------------------------------------------------
.text:000000000000E206
.text:000000000000E206 loc_E206:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:000000000000E206                 call    xalloc_die
.text:000000000000E206 ; } // starts at E060
.text:000000000000E206 quotearg_n_options endp
.text:000000000000E206
.text:000000000000E206 ; ---------------------------------------------------------------------------
.text:000000000000E20B                 align 10h
.text:000000000000E210
.text:000000000000E210 ; =============== S U B R O U T I N E =======================================
.text:000000000000E210
.text:000000000000E210 ; Attributes: info_from_lumina
.text:000000000000E210
.text:000000000000E210 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:000000000000E210                 public clone_quoting_options
.text:000000000000E210 clone_quoting_options proc near
.text:000000000000E210 ; __unwind {
.text:000000000000E210                 push    r12
.text:000000000000E212                 push    rbp
.text:000000000000E213                 push    rbx
.text:000000000000E214                 mov     rbx, rdi
.text:000000000000E217                 call    ___errno_location
.text:000000000000E21C                 mov     r12d, [rax]
.text:000000000000E21F                 mov     rbp, rax
.text:000000000000E222                 lea     rax, default_quoting_options
.text:000000000000E229                 test    rbx, rbx
.text:000000000000E22C                 mov     esi, 38h ; '8'  ; n
.text:000000000000E231                 cmovz   rbx, rax
.text:000000000000E235                 mov     rdi, rbx        ; src
.text:000000000000E238                 call    xmemdup
.text:000000000000E23D                 mov     [rbp+0], r12d
.text:000000000000E241                 pop     rbx
.text:000000000000E242                 pop     rbp
.text:000000000000E243                 pop     r12
.text:000000000000E245                 retn
.text:000000000000E245 ; } // starts at E210
.text:000000000000E245 clone_quoting_options endp
.text:000000000000E245
.text:000000000000E245 ; ---------------------------------------------------------------------------
.text:000000000000E246                 align 10h
.text:000000000000E250
.text:000000000000E250 ; =============== S U B R O U T I N E =======================================
.text:000000000000E250
.text:000000000000E250
.text:000000000000E250                 public get_quoting_style
.text:000000000000E250 get_quoting_style proc near
.text:000000000000E250 ; __unwind {
.text:000000000000E250                 lea     rax, default_quoting_options
.text:000000000000E257                 test    rdi, rdi
.text:000000000000E25A                 cmovz   rdi, rax
.text:000000000000E25E                 mov     eax, [rdi]
.text:000000000000E260                 retn
.text:000000000000E260 ; } // starts at E250
.text:000000000000E260 get_quoting_style endp
.text:000000000000E260
.text:000000000000E260 ; ---------------------------------------------------------------------------
.text:000000000000E261                 align 10h
.text:000000000000E270
.text:000000000000E270 ; =============== S U B R O U T I N E =======================================
.text:000000000000E270
.text:000000000000E270
.text:000000000000E270                 public set_quoting_style
.text:000000000000E270 set_quoting_style proc near
.text:000000000000E270 ; __unwind {
.text:000000000000E270                 lea     rax, default_quoting_options
.text:000000000000E277                 test    rdi, rdi
.text:000000000000E27A                 cmovz   rdi, rax
.text:000000000000E27E                 mov     [rdi], esi
.text:000000000000E280                 retn
.text:000000000000E280 ; } // starts at E270
.text:000000000000E280 set_quoting_style endp
.text:000000000000E280
.text:000000000000E280 ; ---------------------------------------------------------------------------
.text:000000000000E281                 align 10h
.text:000000000000E290
.text:000000000000E290 ; =============== S U B R O U T I N E =======================================
.text:000000000000E290
.text:000000000000E290 ; Attributes: info_from_lumina
.text:000000000000E290
.text:000000000000E290 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:000000000000E290                 public set_char_quoting
.text:000000000000E290 set_char_quoting proc near
.text:000000000000E290 ; __unwind {
.text:000000000000E290                 lea     rax, default_quoting_options
.text:000000000000E297                 test    rdi, rdi
.text:000000000000E29A                 mov     ecx, esi
.text:000000000000E29C                 cmovz   rdi, rax
.text:000000000000E2A0                 mov     eax, esi
.text:000000000000E2A2                 and     ecx, 1Fh
.text:000000000000E2A5                 shr     al, 5
.text:000000000000E2A8                 movzx   eax, al
.text:000000000000E2AB                 lea     rdi, [rdi+rax*4+8]
.text:000000000000E2B0                 mov     esi, [rdi]
.text:000000000000E2B2                 mov     eax, esi
.text:000000000000E2B4                 shr     eax, cl
.text:000000000000E2B6                 xor     edx, eax
.text:000000000000E2B8                 and     eax, 1
.text:000000000000E2BB                 and     edx, 1
.text:000000000000E2BE                 shl     edx, cl
.text:000000000000E2C0                 xor     edx, esi
.text:000000000000E2C2                 mov     [rdi], edx
.text:000000000000E2C4                 retn
.text:000000000000E2C4 ; } // starts at E290
.text:000000000000E2C4 set_char_quoting endp
.text:000000000000E2C4
.text:000000000000E2C4 ; ---------------------------------------------------------------------------
.text:000000000000E2C5                 align 10h
.text:000000000000E2D0
.text:000000000000E2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E2D0
.text:000000000000E2D0
.text:000000000000E2D0                 public set_quoting_flags
.text:000000000000E2D0 set_quoting_flags proc near
.text:000000000000E2D0 ; __unwind {
.text:000000000000E2D0                 lea     rax, default_quoting_options
.text:000000000000E2D7                 test    rdi, rdi
.text:000000000000E2DA                 cmovz   rdi, rax
.text:000000000000E2DE                 mov     eax, [rdi+4]
.text:000000000000E2E1                 mov     [rdi+4], esi
.text:000000000000E2E4                 retn
.text:000000000000E2E4 ; } // starts at E2D0
.text:000000000000E2E4 set_quoting_flags endp
.text:000000000000E2E4
.text:000000000000E2E4 ; ---------------------------------------------------------------------------
.text:000000000000E2E5                 align 10h
.text:000000000000E2F0
.text:000000000000E2F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E2F0
.text:000000000000E2F0 ; Attributes: info_from_lumina
.text:000000000000E2F0
.text:000000000000E2F0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:000000000000E2F0                 public set_custom_quoting
.text:000000000000E2F0 set_custom_quoting proc near
.text:000000000000E2F0 ; __unwind {
.text:000000000000E2F0                 lea     rax, default_quoting_options
.text:000000000000E2F7                 test    rdi, rdi
.text:000000000000E2FA                 cmovz   rdi, rax
.text:000000000000E2FE                 test    rsi, rsi
.text:000000000000E301                 mov     dword ptr [rdi], 0Ah
.text:000000000000E307                 jz      short loc_E317
.text:000000000000E309                 test    rdx, rdx
.text:000000000000E30C                 jz      short loc_E317
.text:000000000000E30E                 mov     [rdi+28h], rsi
.text:000000000000E312                 mov     [rdi+30h], rdx
.text:000000000000E316                 retn
.text:000000000000E317 ; ---------------------------------------------------------------------------
.text:000000000000E317
.text:000000000000E317 loc_E317:                               ; CODE XREF: set_custom_quoting+17↑j
.text:000000000000E317                                         ; set_custom_quoting+1C↑j
.text:000000000000E317                 sub     rsp, 8
.text:000000000000E31B                 call    _abort
.text:000000000000E31B ; } // starts at E2F0
.text:000000000000E31B set_custom_quoting endp
.text:000000000000E31B
.text:000000000000E320
.text:000000000000E320 ; =============== S U B R O U T I N E =======================================
.text:000000000000E320
.text:000000000000E320 ; Attributes: info_from_lumina
.text:000000000000E320
.text:000000000000E320 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:000000000000E320                 public quotearg_buffer
.text:000000000000E320 quotearg_buffer proc near
.text:000000000000E320
.text:000000000000E320 var_40          = qword ptr -40h
.text:000000000000E320
.text:000000000000E320 ; __unwind {
.text:000000000000E320                 push    r15
.text:000000000000E322                 push    r14
.text:000000000000E324                 lea     rax, default_quoting_options
.text:000000000000E32B                 push    r13
.text:000000000000E32D                 push    r12
.text:000000000000E32F                 mov     r13, rdi
.text:000000000000E332                 push    rbp
.text:000000000000E333                 push    rbx
.text:000000000000E334                 mov     rbx, r8
.text:000000000000E337                 mov     r14, rsi
.text:000000000000E33A                 mov     r15, rdx
.text:000000000000E33D                 sub     rsp, 18h
.text:000000000000E341                 test    r8, r8
.text:000000000000E344                 cmovz   rbx, rax
.text:000000000000E348                 mov     [rsp+48h+var_40], rcx
.text:000000000000E34D                 call    ___errno_location
.text:000000000000E352                 mov     r12d, [rax]
.text:000000000000E355                 mov     rbp, rax
.text:000000000000E358                 lea     rax, [rbx+8]
.text:000000000000E35C                 sub     rsp, 8
.text:000000000000E360                 mov     r9d, [rbx+4]
.text:000000000000E364                 push    qword ptr [rbx+30h]
.text:000000000000E367                 mov     r8d, [rbx]
.text:000000000000E36A                 push    qword ptr [rbx+28h]
.text:000000000000E36D                 mov     rdx, r15
.text:000000000000E370                 push    rax
.text:000000000000E371                 mov     rcx, [rsp+68h+var_40]
.text:000000000000E376                 mov     rsi, r14
.text:000000000000E379                 mov     rdi, r13
.text:000000000000E37C                 call    quotearg_buffer_restyled
.text:000000000000E381                 mov     [rbp+0], r12d
.text:000000000000E385                 add     rsp, 38h
.text:000000000000E389                 pop     rbx
.text:000000000000E38A                 pop     rbp
.text:000000000000E38B                 pop     r12
.text:000000000000E38D                 pop     r13
.text:000000000000E38F                 pop     r14
.text:000000000000E391                 pop     r15
.text:000000000000E393                 retn
.text:000000000000E393 ; } // starts at E320
.text:000000000000E393 quotearg_buffer endp
.text:000000000000E393
.text:000000000000E393 ; ---------------------------------------------------------------------------
.text:000000000000E394                 align 20h
.text:000000000000E3A0
.text:000000000000E3A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E3A0
.text:000000000000E3A0 ; Attributes: info_from_lumina
.text:000000000000E3A0
.text:000000000000E3A0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:000000000000E3A0                 public quotearg_alloc_mem
.text:000000000000E3A0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:000000000000E3A0
.text:000000000000E3A0 var_5C          = dword ptr -5Ch
.text:000000000000E3A0 var_58          = qword ptr -58h
.text:000000000000E3A0 var_50          = qword ptr -50h
.text:000000000000E3A0 var_48          = qword ptr -48h
.text:000000000000E3A0 var_40          = qword ptr -40h
.text:000000000000E3A0
.text:000000000000E3A0 ; __unwind {
.text:000000000000E3A0                 push    r15
.text:000000000000E3A2                 push    r14
.text:000000000000E3A4                 lea     rax, default_quoting_options
.text:000000000000E3AB                 push    r13
.text:000000000000E3AD                 push    r12
.text:000000000000E3AF                 mov     r12, rdx
.text:000000000000E3B2                 push    rbp
.text:000000000000E3B3                 push    rbx
.text:000000000000E3B4                 mov     rbx, rcx
.text:000000000000E3B7                 mov     r14, rdi
.text:000000000000E3BA                 mov     r15, rsi
.text:000000000000E3BD                 sub     rsp, 38h
.text:000000000000E3C1                 test    rcx, rcx
.text:000000000000E3C4                 cmovz   rbx, rax
.text:000000000000E3C8                 xor     ebp, ebp
.text:000000000000E3CA                 call    ___errno_location
.text:000000000000E3CF                 test    r12, r12
.text:000000000000E3D2                 mov     r13, rax
.text:000000000000E3D5                 mov     eax, [rax]
.text:000000000000E3D7                 setz    bpl
.text:000000000000E3DB                 or      ebp, [rbx+4]
.text:000000000000E3DE                 lea     r10, [rbx+8]
.text:000000000000E3E2                 sub     rsp, 8
.text:000000000000E3E6                 mov     r8d, [rbx]
.text:000000000000E3E9                 mov     rcx, r15
.text:000000000000E3EC                 mov     [rsp+70h+var_5C], eax
.text:000000000000E3F0                 push    qword ptr [rbx+30h]
.text:000000000000E3F3                 mov     rdx, r14
.text:000000000000E3F6                 push    qword ptr [rbx+28h]
.text:000000000000E3F9                 push    r10
.text:000000000000E3FB                 xor     esi, esi
.text:000000000000E3FD                 mov     r9d, ebp
.text:000000000000E400                 xor     edi, edi
.text:000000000000E402                 mov     [rsp+88h+var_48], r10
.text:000000000000E407                 call    quotearg_buffer_restyled
.text:000000000000E40C                 lea     rsi, [rax+1]
.text:000000000000E410                 mov     [rsp+88h+var_40], rax
.text:000000000000E415                 add     rsp, 20h
.text:000000000000E419                 mov     rdi, rsi
.text:000000000000E41C                 mov     [rsp+68h+var_50], rsi
.text:000000000000E421                 call    xmalloc
.text:000000000000E426                 mov     [rsp+68h+var_58], rax
.text:000000000000E42B                 sub     rsp, 8
.text:000000000000E42F                 push    qword ptr [rbx+30h]
.text:000000000000E432                 push    qword ptr [rbx+28h]
.text:000000000000E435                 mov     r10, [rsp+80h+var_48]
.text:000000000000E43A                 mov     r9d, ebp
.text:000000000000E43D                 mov     r8d, [rbx]
.text:000000000000E440                 mov     rcx, r15
.text:000000000000E443                 mov     rdx, r14
.text:000000000000E446                 mov     rdi, rax
.text:000000000000E449                 push    r10
.text:000000000000E44B                 mov     rsi, [rsp+88h+var_50]
.text:000000000000E450                 call    quotearg_buffer_restyled
.text:000000000000E455                 mov     eax, [rsp+88h+var_5C]
.text:000000000000E459                 add     rsp, 20h
.text:000000000000E45D                 test    r12, r12
.text:000000000000E460                 mov     [r13+0], eax
.text:000000000000E464                 jz      short loc_E46F
.text:000000000000E466                 mov     r11, [rsp+68h+var_40]
.text:000000000000E46B                 mov     [r12], r11
.text:000000000000E46F
.text:000000000000E46F loc_E46F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000E46F                 mov     rax, [rsp+68h+var_58]
.text:000000000000E474                 add     rsp, 38h
.text:000000000000E478                 pop     rbx
.text:000000000000E479                 pop     rbp
.text:000000000000E47A                 pop     r12
.text:000000000000E47C                 pop     r13
.text:000000000000E47E                 pop     r14
.text:000000000000E480                 pop     r15
.text:000000000000E482                 retn
.text:000000000000E482 ; } // starts at E3A0
.text:000000000000E482 quotearg_alloc_mem endp
.text:000000000000E482
.text:000000000000E482 ; ---------------------------------------------------------------------------
.text:000000000000E483                 align 10h
.text:000000000000E490
.text:000000000000E490 ; =============== S U B R O U T I N E =======================================
.text:000000000000E490
.text:000000000000E490
.text:000000000000E490                 public quotearg_alloc
.text:000000000000E490 quotearg_alloc  proc near
.text:000000000000E490 ; __unwind {
.text:000000000000E490                 mov     rcx, rdx
.text:000000000000E493                 xor     edx, edx
.text:000000000000E495                 jmp     quotearg_alloc_mem
.text:000000000000E495 ; } // starts at E490
.text:000000000000E495 quotearg_alloc  endp
.text:000000000000E495
.text:000000000000E495 ; ---------------------------------------------------------------------------
.text:000000000000E49A                 align 20h
.text:000000000000E4A0
.text:000000000000E4A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E4A0
.text:000000000000E4A0 ; Attributes: info_from_lumina
.text:000000000000E4A0
.text:000000000000E4A0 ; void __cdecl quotearg_free()
.text:000000000000E4A0                 public quotearg_free
.text:000000000000E4A0 quotearg_free   proc near
.text:000000000000E4A0 ; __unwind {
.text:000000000000E4A0                 mov     eax, cs:nslots
.text:000000000000E4A6                 push    r12
.text:000000000000E4A8                 mov     r12, cs:slotvec
.text:000000000000E4AF                 push    rbp
.text:000000000000E4B0                 push    rbx
.text:000000000000E4B1                 cmp     eax, 1
.text:000000000000E4B4                 jle     short loc_E4E1
.text:000000000000E4B6                 sub     eax, 2
.text:000000000000E4B9                 lea     rbx, [r12+18h]
.text:000000000000E4BE                 shl     rax, 4
.text:000000000000E4C2                 lea     rbp, [r12+rax+28h]
.text:000000000000E4C7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000E4D0
.text:000000000000E4D0 loc_E4D0:                               ; CODE XREF: quotearg_free+3F↓j
.text:000000000000E4D0                 mov     rdi, [rbx]      ; ptr
.text:000000000000E4D3                 add     rbx, 10h
.text:000000000000E4D7                 call    free
.text:000000000000E4DC                 cmp     rbx, rbp
.text:000000000000E4DF                 jnz     short loc_E4D0
.text:000000000000E4E1
.text:000000000000E4E1 loc_E4E1:                               ; CODE XREF: quotearg_free+14↑j
.text:000000000000E4E1                 mov     rdi, [r12+8]    ; ptr
.text:000000000000E4E6                 lea     rbx, slot0
.text:000000000000E4ED                 cmp     rdi, rbx
.text:000000000000E4F0                 jz      short loc_E509
.text:000000000000E4F2                 call    free
.text:000000000000E4F7                 mov     cs:slotvec0, 100h
.text:000000000000E502                 mov     cs:off_21C098, rbx
.text:000000000000E509
.text:000000000000E509 loc_E509:                               ; CODE XREF: quotearg_free+50↑j
.text:000000000000E509                 lea     rbx, slotvec0
.text:000000000000E510                 cmp     r12, rbx
.text:000000000000E513                 jz      short loc_E524
.text:000000000000E515                 mov     rdi, r12        ; ptr
.text:000000000000E518                 call    free
.text:000000000000E51D                 mov     cs:slotvec, rbx
.text:000000000000E524
.text:000000000000E524 loc_E524:                               ; CODE XREF: quotearg_free+73↑j
.text:000000000000E524                 pop     rbx
.text:000000000000E525                 mov     cs:nslots, 1
.text:000000000000E52F                 pop     rbp
.text:000000000000E530                 pop     r12
.text:000000000000E532                 retn
.text:000000000000E532 ; } // starts at E4A0
.text:000000000000E532 quotearg_free   endp
.text:000000000000E532
.text:000000000000E532 ; ---------------------------------------------------------------------------
.text:000000000000E533                 align 20h
.text:000000000000E540
.text:000000000000E540 ; =============== S U B R O U T I N E =======================================
.text:000000000000E540
.text:000000000000E540
.text:000000000000E540                 public quotearg_n
.text:000000000000E540 quotearg_n      proc near
.text:000000000000E540 ; __unwind {
.text:000000000000E540                 lea     rcx, default_quoting_options
.text:000000000000E547                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E54E                 jmp     quotearg_n_options
.text:000000000000E54E ; } // starts at E540
.text:000000000000E54E quotearg_n      endp
.text:000000000000E54E
.text:000000000000E54E ; ---------------------------------------------------------------------------
.text:000000000000E553                 align 20h
.text:000000000000E560
.text:000000000000E560 ; =============== S U B R O U T I N E =======================================
.text:000000000000E560
.text:000000000000E560
.text:000000000000E560                 public quotearg_n_mem
.text:000000000000E560 quotearg_n_mem  proc near
.text:000000000000E560 ; __unwind {
.text:000000000000E560                 lea     rcx, default_quoting_options
.text:000000000000E567                 jmp     quotearg_n_options
.text:000000000000E567 ; } // starts at E560
.text:000000000000E567 quotearg_n_mem  endp
.text:000000000000E567
.text:000000000000E567 ; ---------------------------------------------------------------------------
.text:000000000000E56C                 align 10h
.text:000000000000E570
.text:000000000000E570 ; =============== S U B R O U T I N E =======================================
.text:000000000000E570
.text:000000000000E570
.text:000000000000E570                 public quotearg
.text:000000000000E570 quotearg        proc near
.text:000000000000E570 ; __unwind {
.text:000000000000E570                 lea     rcx, default_quoting_options
.text:000000000000E577                 mov     rsi, rdi
.text:000000000000E57A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E581                 xor     edi, edi
.text:000000000000E583                 jmp     quotearg_n_options
.text:000000000000E583 ; } // starts at E570
.text:000000000000E583 quotearg        endp
.text:000000000000E583
.text:000000000000E583 ; ---------------------------------------------------------------------------
.text:000000000000E588                 align 10h
.text:000000000000E590
.text:000000000000E590 ; =============== S U B R O U T I N E =======================================
.text:000000000000E590
.text:000000000000E590
.text:000000000000E590                 public quotearg_mem
.text:000000000000E590 quotearg_mem    proc near
.text:000000000000E590 ; __unwind {
.text:000000000000E590                 lea     rcx, default_quoting_options
.text:000000000000E597                 mov     rdx, rsi
.text:000000000000E59A                 mov     rsi, rdi
.text:000000000000E59D                 xor     edi, edi
.text:000000000000E59F                 jmp     quotearg_n_options
.text:000000000000E59F ; } // starts at E590
.text:000000000000E59F quotearg_mem    endp
.text:000000000000E59F
.text:000000000000E59F ; ---------------------------------------------------------------------------
.text:000000000000E5A4                 align 10h
.text:000000000000E5B0
.text:000000000000E5B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E5B0
.text:000000000000E5B0 ; Attributes: info_from_lumina
.text:000000000000E5B0
.text:000000000000E5B0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:000000000000E5B0                 public quotearg_n_style
.text:000000000000E5B0 quotearg_n_style proc near              ; CODE XREF: rm+4A8↑p
.text:000000000000E5B0                                         ; rm+4C1↑p ...
.text:000000000000E5B0
.text:000000000000E5B0 var_48          = dword ptr -48h
.text:000000000000E5B0 var_44          = qword ptr -44h
.text:000000000000E5B0 var_3C          = qword ptr -3Ch
.text:000000000000E5B0 var_34          = qword ptr -34h
.text:000000000000E5B0 var_2C          = qword ptr -2Ch
.text:000000000000E5B0 var_24          = qword ptr -24h
.text:000000000000E5B0 var_1C          = qword ptr -1Ch
.text:000000000000E5B0 var_14          = dword ptr -14h
.text:000000000000E5B0 var_10          = qword ptr -10h
.text:000000000000E5B0
.text:000000000000E5B0 ; __unwind {
.text:000000000000E5B0                 sub     rsp, 48h
.text:000000000000E5B4                 mov     rax, rdx
.text:000000000000E5B7                 mov     rdx, fs:28h
.text:000000000000E5C0                 mov     [rsp+48h+var_10], rdx
.text:000000000000E5C5                 xor     edx, edx
.text:000000000000E5C7                 cmp     esi, 0Ah
.text:000000000000E5CA                 jz      short loc_E634
.text:000000000000E5CC                 mov     [rsp+48h+var_48], esi
.text:000000000000E5CF                 mov     rcx, rsp
.text:000000000000E5D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E5D9                 mov     rsi, rax
.text:000000000000E5DC                 mov     [rsp+48h+var_44], 0
.text:000000000000E5E5                 mov     [rsp+48h+var_3C], 0
.text:000000000000E5EE                 mov     [rsp+48h+var_34], 0
.text:000000000000E5F7                 mov     [rsp+48h+var_2C], 0
.text:000000000000E600                 mov     [rsp+48h+var_24], 0
.text:000000000000E609                 mov     [rsp+48h+var_1C], 0
.text:000000000000E612                 mov     [rsp+48h+var_14], 0
.text:000000000000E61A                 call    quotearg_n_options
.text:000000000000E61F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000E624                 xor     rcx, fs:28h
.text:000000000000E62D                 jnz     short loc_E639
.text:000000000000E62F                 add     rsp, 48h
.text:000000000000E633                 retn
.text:000000000000E634 ; ---------------------------------------------------------------------------
.text:000000000000E634
.text:000000000000E634 loc_E634:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:000000000000E634                 call    _abort
.text:000000000000E639 ; ---------------------------------------------------------------------------
.text:000000000000E639
.text:000000000000E639 loc_E639:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:000000000000E639                 call    ___stack_chk_fail
.text:000000000000E639 ; } // starts at E5B0
.text:000000000000E639 quotearg_n_style endp
.text:000000000000E639
.text:000000000000E639 ; ---------------------------------------------------------------------------
.text:000000000000E63E                 align 20h
.text:000000000000E640
.text:000000000000E640 ; =============== S U B R O U T I N E =======================================
.text:000000000000E640
.text:000000000000E640 ; Attributes: info_from_lumina
.text:000000000000E640
.text:000000000000E640 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:000000000000E640                 public quotearg_n_style_mem
.text:000000000000E640 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:000000000000E640
.text:000000000000E640 var_48          = dword ptr -48h
.text:000000000000E640 var_44          = qword ptr -44h
.text:000000000000E640 var_3C          = qword ptr -3Ch
.text:000000000000E640 var_34          = qword ptr -34h
.text:000000000000E640 var_2C          = qword ptr -2Ch
.text:000000000000E640 var_24          = qword ptr -24h
.text:000000000000E640 var_1C          = qword ptr -1Ch
.text:000000000000E640 var_14          = dword ptr -14h
.text:000000000000E640 var_10          = qword ptr -10h
.text:000000000000E640
.text:000000000000E640 ; __unwind {
.text:000000000000E640                 sub     rsp, 48h
.text:000000000000E644                 mov     rax, rdx
.text:000000000000E647                 mov     rdx, rcx
.text:000000000000E64A                 mov     rcx, fs:28h
.text:000000000000E653                 mov     [rsp+48h+var_10], rcx
.text:000000000000E658                 xor     ecx, ecx
.text:000000000000E65A                 cmp     esi, 0Ah
.text:000000000000E65D                 jz      short loc_E6C0
.text:000000000000E65F                 mov     [rsp+48h+var_48], esi
.text:000000000000E662                 mov     rcx, rsp
.text:000000000000E665                 mov     rsi, rax
.text:000000000000E668                 mov     [rsp+48h+var_44], 0
.text:000000000000E671                 mov     [rsp+48h+var_3C], 0
.text:000000000000E67A                 mov     [rsp+48h+var_34], 0
.text:000000000000E683                 mov     [rsp+48h+var_2C], 0
.text:000000000000E68C                 mov     [rsp+48h+var_24], 0
.text:000000000000E695                 mov     [rsp+48h+var_1C], 0
.text:000000000000E69E                 mov     [rsp+48h+var_14], 0
.text:000000000000E6A6                 call    quotearg_n_options
.text:000000000000E6AB                 mov     rdx, [rsp+48h+var_10]
.text:000000000000E6B0                 xor     rdx, fs:28h
.text:000000000000E6B9                 jnz     short loc_E6C5
.text:000000000000E6BB                 add     rsp, 48h
.text:000000000000E6BF                 retn
.text:000000000000E6C0 ; ---------------------------------------------------------------------------
.text:000000000000E6C0
.text:000000000000E6C0 loc_E6C0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:000000000000E6C0                 call    _abort
.text:000000000000E6C5 ; ---------------------------------------------------------------------------
.text:000000000000E6C5
.text:000000000000E6C5 loc_E6C5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:000000000000E6C5                 call    ___stack_chk_fail
.text:000000000000E6C5 ; } // starts at E640
.text:000000000000E6C5 quotearg_n_style_mem endp
.text:000000000000E6C5
.text:000000000000E6C5 ; ---------------------------------------------------------------------------
.text:000000000000E6CA                 align 10h
.text:000000000000E6D0
.text:000000000000E6D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6D0
.text:000000000000E6D0
.text:000000000000E6D0                 public quotearg_style
.text:000000000000E6D0 quotearg_style  proc near               ; CODE XREF: main+2BD↑p
.text:000000000000E6D0                                         ; main+45C↑p ...
.text:000000000000E6D0 ; __unwind {
.text:000000000000E6D0                 mov     rdx, rsi
.text:000000000000E6D3                 mov     esi, edi
.text:000000000000E6D5                 xor     edi, edi
.text:000000000000E6D7                 jmp     quotearg_n_style
.text:000000000000E6D7 ; } // starts at E6D0
.text:000000000000E6D7 quotearg_style  endp
.text:000000000000E6D7
.text:000000000000E6D7 ; ---------------------------------------------------------------------------
.text:000000000000E6DC                 align 20h
.text:000000000000E6E0
.text:000000000000E6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6E0
.text:000000000000E6E0
.text:000000000000E6E0                 public quotearg_style_mem
.text:000000000000E6E0 quotearg_style_mem proc near
.text:000000000000E6E0 ; __unwind {
.text:000000000000E6E0                 mov     rcx, rdx
.text:000000000000E6E3                 mov     rdx, rsi
.text:000000000000E6E6                 mov     esi, edi
.text:000000000000E6E8                 xor     edi, edi
.text:000000000000E6EA                 jmp     quotearg_n_style_mem
.text:000000000000E6EA ; } // starts at E6E0
.text:000000000000E6EA quotearg_style_mem endp
.text:000000000000E6EA
.text:000000000000E6EA ; ---------------------------------------------------------------------------
.text:000000000000E6EF                 align 10h
.text:000000000000E6F0
.text:000000000000E6F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E6F0
.text:000000000000E6F0 ; Attributes: info_from_lumina
.text:000000000000E6F0
.text:000000000000E6F0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:000000000000E6F0                 public quotearg_char_mem
.text:000000000000E6F0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:000000000000E6F0                                         ; quotearg_colon+C↓j ...
.text:000000000000E6F0
.text:000000000000E6F0 var_48          = xmmword ptr -48h
.text:000000000000E6F0 var_38          = xmmword ptr -38h
.text:000000000000E6F0 var_28          = xmmword ptr -28h
.text:000000000000E6F0 var_18          = qword ptr -18h
.text:000000000000E6F0 var_10          = qword ptr -10h
.text:000000000000E6F0
.text:000000000000E6F0 ; __unwind {
.text:000000000000E6F0                 sub     rsp, 48h
.text:000000000000E6F4                 mov     ecx, edx
.text:000000000000E6F6                 mov     rax, fs:28h
.text:000000000000E6FF                 mov     [rsp+48h+var_10], rax
.text:000000000000E704                 xor     eax, eax
.text:000000000000E706                 mov     rax, cs:qword_21C6D0
.text:000000000000E70D                 mov     r8, rsp
.text:000000000000E710                 and     ecx, 1Fh
.text:000000000000E713                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000E71B                 mov     [rsp+48h+var_18], rax
.text:000000000000E720                 mov     eax, edx
.text:000000000000E722                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000E726                 shr     al, 5
.text:000000000000E729                 movzx   eax, al
.text:000000000000E72C                 lea     r9, [r8+rax*4+8]
.text:000000000000E731                 movdqa  xmm0, cs:xmmword_21C6B0
.text:000000000000E739                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000E73E                 movdqa  xmm0, cs:xmmword_21C6C0
.text:000000000000E746                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000E74B                 mov     edx, [r9]
.text:000000000000E74E                 mov     eax, edx
.text:000000000000E750                 shr     eax, cl
.text:000000000000E752                 not     eax
.text:000000000000E754                 and     eax, 1
.text:000000000000E757                 shl     eax, cl
.text:000000000000E759                 mov     rcx, r8
.text:000000000000E75C                 xor     eax, edx
.text:000000000000E75E                 mov     rdx, rsi
.text:000000000000E761                 mov     rsi, rdi
.text:000000000000E764                 mov     [r9], eax
.text:000000000000E767                 xor     edi, edi
.text:000000000000E769                 call    quotearg_n_options
.text:000000000000E76E                 mov     rsi, [rsp+48h+var_10]
.text:000000000000E773                 xor     rsi, fs:28h
.text:000000000000E77C                 jnz     short loc_E783
.text:000000000000E77E                 add     rsp, 48h
.text:000000000000E782                 retn
.text:000000000000E783 ; ---------------------------------------------------------------------------
.text:000000000000E783
.text:000000000000E783 loc_E783:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:000000000000E783                 call    ___stack_chk_fail
.text:000000000000E783 ; } // starts at E6F0
.text:000000000000E783 quotearg_char_mem endp
.text:000000000000E783
.text:000000000000E783 ; ---------------------------------------------------------------------------
.text:000000000000E788                 align 10h
.text:000000000000E790
.text:000000000000E790 ; =============== S U B R O U T I N E =======================================
.text:000000000000E790
.text:000000000000E790
.text:000000000000E790                 public quotearg_char
.text:000000000000E790 quotearg_char   proc near
.text:000000000000E790 ; __unwind {
.text:000000000000E790                 movsx   edx, sil
.text:000000000000E794                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000E79B                 jmp     quotearg_char_mem
.text:000000000000E79B ; } // starts at E790
.text:000000000000E79B quotearg_char   endp
.text:000000000000E79B
.text:000000000000E7A0
.text:000000000000E7A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E7A0
.text:000000000000E7A0
.text:000000000000E7A0                 public quotearg_colon
.text:000000000000E7A0 quotearg_colon  proc near               ; CODE XREF: close_stdin+85↑p
.text:000000000000E7A0                                         ; close_stdout+65↑p
.text:000000000000E7A0 ; __unwind {
.text:000000000000E7A0                 mov     edx, 3Ah ; ':'
.text:000000000000E7A5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000E7AC                 jmp     quotearg_char_mem
.text:000000000000E7AC ; } // starts at E7A0
.text:000000000000E7AC quotearg_colon  endp
.text:000000000000E7AC
.text:000000000000E7AC ; ---------------------------------------------------------------------------
.text:000000000000E7B1                 align 20h
.text:000000000000E7C0
.text:000000000000E7C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E7C0
.text:000000000000E7C0
.text:000000000000E7C0                 public quotearg_colon_mem
.text:000000000000E7C0 quotearg_colon_mem proc near
.text:000000000000E7C0 ; __unwind {
.text:000000000000E7C0                 mov     edx, 3Ah ; ':'
.text:000000000000E7C5                 jmp     quotearg_char_mem
.text:000000000000E7C5 ; } // starts at E7C0
.text:000000000000E7C5 quotearg_colon_mem endp
.text:000000000000E7C5
.text:000000000000E7C5 ; ---------------------------------------------------------------------------
.text:000000000000E7CA                 align 10h
.text:000000000000E7D0
.text:000000000000E7D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E7D0
.text:000000000000E7D0 ; Attributes: info_from_lumina
.text:000000000000E7D0
.text:000000000000E7D0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:000000000000E7D0                 public quotearg_n_style_colon
.text:000000000000E7D0 quotearg_n_style_colon proc near        ; CODE XREF: rm+AB↑p
.text:000000000000E7D0                                         ; rm+1FB↑p ...
.text:000000000000E7D0
.text:000000000000E7D0 var_48          = dword ptr -48h
.text:000000000000E7D0 var_44          = qword ptr -44h
.text:000000000000E7D0 var_3C          = qword ptr -3Ch
.text:000000000000E7D0 var_34          = qword ptr -34h
.text:000000000000E7D0 var_2C          = qword ptr -2Ch
.text:000000000000E7D0 var_24          = qword ptr -24h
.text:000000000000E7D0 var_1C          = qword ptr -1Ch
.text:000000000000E7D0 var_14          = dword ptr -14h
.text:000000000000E7D0 var_10          = qword ptr -10h
.text:000000000000E7D0
.text:000000000000E7D0 ; __unwind {
.text:000000000000E7D0                 sub     rsp, 48h
.text:000000000000E7D4                 mov     rax, rdx
.text:000000000000E7D7                 mov     rdx, fs:28h
.text:000000000000E7E0                 mov     [rsp+48h+var_10], rdx
.text:000000000000E7E5                 xor     edx, edx
.text:000000000000E7E7                 cmp     esi, 0Ah
.text:000000000000E7EA                 jz      short loc_E854
.text:000000000000E7EC                 mov     [rsp+48h+var_48], esi
.text:000000000000E7EF                 mov     rcx, rsp
.text:000000000000E7F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E7F9                 mov     rsi, rax
.text:000000000000E7FC                 mov     [rsp+48h+var_44], 0
.text:000000000000E805                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000E80E                 mov     [rsp+48h+var_34], 0
.text:000000000000E817                 mov     [rsp+48h+var_2C], 0
.text:000000000000E820                 mov     [rsp+48h+var_24], 0
.text:000000000000E829                 mov     [rsp+48h+var_1C], 0
.text:000000000000E832                 mov     [rsp+48h+var_14], 0
.text:000000000000E83A                 call    quotearg_n_options
.text:000000000000E83F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000E844                 xor     rcx, fs:28h
.text:000000000000E84D                 jnz     short loc_E859
.text:000000000000E84F                 add     rsp, 48h
.text:000000000000E853                 retn
.text:000000000000E854 ; ---------------------------------------------------------------------------
.text:000000000000E854
.text:000000000000E854 loc_E854:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:000000000000E854                 call    _abort
.text:000000000000E859 ; ---------------------------------------------------------------------------
.text:000000000000E859
.text:000000000000E859 loc_E859:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:000000000000E859                 call    ___stack_chk_fail
.text:000000000000E859 ; } // starts at E7D0
.text:000000000000E859 quotearg_n_style_colon endp
.text:000000000000E859
.text:000000000000E859 ; ---------------------------------------------------------------------------
.text:000000000000E85E                 align 20h
.text:000000000000E860
.text:000000000000E860 ; =============== S U B R O U T I N E =======================================
.text:000000000000E860
.text:000000000000E860 ; Attributes: info_from_lumina
.text:000000000000E860
.text:000000000000E860 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:000000000000E860                 public quotearg_n_custom_mem
.text:000000000000E860 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:000000000000E860                                         ; quotearg_custom+12↓j ...
.text:000000000000E860
.text:000000000000E860 var_48          = xmmword ptr -48h
.text:000000000000E860 var_38          = xmmword ptr -38h
.text:000000000000E860 var_28          = xmmword ptr -28h
.text:000000000000E860 var_18          = qword ptr -18h
.text:000000000000E860 var_10          = qword ptr -10h
.text:000000000000E860
.text:000000000000E860 ; __unwind {
.text:000000000000E860                 sub     rsp, 48h
.text:000000000000E864                 mov     r9, rcx
.text:000000000000E867                 mov     rcx, cs:qword_21C6D0
.text:000000000000E86E                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000E876                 mov     rax, fs:28h
.text:000000000000E87F                 mov     [rsp+48h+var_10], rax
.text:000000000000E884                 xor     eax, eax
.text:000000000000E886                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000E88A                 test    rsi, rsi
.text:000000000000E88D                 mov     [rsp+48h+var_18], rcx
.text:000000000000E892                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:000000000000E899                 movdqa  xmm0, cs:xmmword_21C6B0
.text:000000000000E8A1                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000E8A6                 movdqa  xmm0, cs:xmmword_21C6C0
.text:000000000000E8AE                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000E8B3                 jz      short loc_E8E7
.text:000000000000E8B5                 test    rdx, rdx
.text:000000000000E8B8                 jz      short loc_E8E7
.text:000000000000E8BA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000E8BF                 mov     [rsp+48h+var_18], rdx
.text:000000000000E8C4                 mov     rcx, rsp
.text:000000000000E8C7                 mov     rdx, r8
.text:000000000000E8CA                 mov     rsi, r9
.text:000000000000E8CD                 call    quotearg_n_options
.text:000000000000E8D2                 mov     rdi, [rsp+48h+var_10]
.text:000000000000E8D7                 xor     rdi, fs:28h
.text:000000000000E8E0                 jnz     short loc_E8EC
.text:000000000000E8E2                 add     rsp, 48h
.text:000000000000E8E6                 retn
.text:000000000000E8E7 ; ---------------------------------------------------------------------------
.text:000000000000E8E7
.text:000000000000E8E7 loc_E8E7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:000000000000E8E7                                         ; quotearg_n_custom_mem+58↑j
.text:000000000000E8E7                 call    _abort
.text:000000000000E8EC ; ---------------------------------------------------------------------------
.text:000000000000E8EC
.text:000000000000E8EC loc_E8EC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000E8EC                 call    ___stack_chk_fail
.text:000000000000E8EC ; } // starts at E860
.text:000000000000E8EC quotearg_n_custom_mem endp
.text:000000000000E8EC
.text:000000000000E8EC ; ---------------------------------------------------------------------------
.text:000000000000E8F1                 align 20h
.text:000000000000E900
.text:000000000000E900 ; =============== S U B R O U T I N E =======================================
.text:000000000000E900
.text:000000000000E900
.text:000000000000E900                 public quotearg_n_custom
.text:000000000000E900 quotearg_n_custom proc near
.text:000000000000E900 ; __unwind {
.text:000000000000E900                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000E907                 jmp     quotearg_n_custom_mem
.text:000000000000E907 ; } // starts at E900
.text:000000000000E907 quotearg_n_custom endp
.text:000000000000E907
.text:000000000000E907 ; ---------------------------------------------------------------------------
.text:000000000000E90C                 align 10h
.text:000000000000E910
.text:000000000000E910 ; =============== S U B R O U T I N E =======================================
.text:000000000000E910
.text:000000000000E910
.text:000000000000E910                 public quotearg_custom
.text:000000000000E910 quotearg_custom proc near
.text:000000000000E910 ; __unwind {
.text:000000000000E910                 mov     rcx, rdx
.text:000000000000E913                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000E91A                 mov     rdx, rsi
.text:000000000000E91D                 mov     rsi, rdi
.text:000000000000E920                 xor     edi, edi
.text:000000000000E922                 jmp     quotearg_n_custom_mem
.text:000000000000E922 ; } // starts at E910
.text:000000000000E922 quotearg_custom endp
.text:000000000000E922
.text:000000000000E922 ; ---------------------------------------------------------------------------
.text:000000000000E927                 align 10h
.text:000000000000E930
.text:000000000000E930 ; =============== S U B R O U T I N E =======================================
.text:000000000000E930
.text:000000000000E930
.text:000000000000E930                 public quotearg_custom_mem
.text:000000000000E930 quotearg_custom_mem proc near
.text:000000000000E930 ; __unwind {
.text:000000000000E930                 mov     r8, rcx
.text:000000000000E933                 mov     rcx, rdx
.text:000000000000E936                 mov     rdx, rsi
.text:000000000000E939                 mov     rsi, rdi
.text:000000000000E93C                 xor     edi, edi
.text:000000000000E93E                 jmp     quotearg_n_custom_mem
.text:000000000000E93E ; } // starts at E930
.text:000000000000E93E quotearg_custom_mem endp
.text:000000000000E93E
.text:000000000000E93E ; ---------------------------------------------------------------------------
.text:000000000000E943                 align 10h
.text:000000000000E950
.text:000000000000E950 ; =============== S U B R O U T I N E =======================================
.text:000000000000E950
.text:000000000000E950
.text:000000000000E950                 public quote_n_mem
.text:000000000000E950 quote_n_mem     proc near
.text:000000000000E950 ; __unwind {
.text:000000000000E950                 lea     rcx, quote_quoting_options
.text:000000000000E957                 jmp     quotearg_n_options
.text:000000000000E957 ; } // starts at E950
.text:000000000000E957 quote_n_mem     endp
.text:000000000000E957
.text:000000000000E957 ; ---------------------------------------------------------------------------
.text:000000000000E95C                 align 20h
.text:000000000000E960
.text:000000000000E960 ; =============== S U B R O U T I N E =======================================
.text:000000000000E960
.text:000000000000E960
.text:000000000000E960                 public quote_mem
.text:000000000000E960 quote_mem       proc near
.text:000000000000E960 ; __unwind {
.text:000000000000E960                 lea     rcx, quote_quoting_options
.text:000000000000E967                 mov     rdx, rsi
.text:000000000000E96A                 mov     rsi, rdi
.text:000000000000E96D                 xor     edi, edi
.text:000000000000E96F                 jmp     quotearg_n_options
.text:000000000000E96F ; } // starts at E960
.text:000000000000E96F quote_mem       endp
.text:000000000000E96F
.text:000000000000E96F ; ---------------------------------------------------------------------------
.text:000000000000E974                 align 20h
.text:000000000000E980
.text:000000000000E980 ; =============== S U B R O U T I N E =======================================
.text:000000000000E980
.text:000000000000E980
.text:000000000000E980                 public quote_n
.text:000000000000E980 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↓p
.text:000000000000E980 ; __unwind {
.text:000000000000E980                 lea     rcx, quote_quoting_options
.text:000000000000E987                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E98E                 jmp     quotearg_n_options
.text:000000000000E98E ; } // starts at E980
.text:000000000000E98E quote_n         endp
.text:000000000000E98E
.text:000000000000E98E ; ---------------------------------------------------------------------------
.text:000000000000E993                 align 20h
.text:000000000000E9A0
.text:000000000000E9A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E9A0
.text:000000000000E9A0
.text:000000000000E9A0                 public quote
.text:000000000000E9A0 quote           proc near               ; CODE XREF: copy_acl+1E↑p
.text:000000000000E9A0                                         ; copy_acl+63↑p ...
.text:000000000000E9A0 ; __unwind {
.text:000000000000E9A0                 lea     rcx, quote_quoting_options
.text:000000000000E9A7                 mov     rsi, rdi
.text:000000000000E9AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E9B1                 xor     edi, edi
.text:000000000000E9B3                 jmp     quotearg_n_options
.text:000000000000E9B3 ; } // starts at E9A0
.text:000000000000E9B3 quote           endp
.text:000000000000E9B3
.text:000000000000E9B3 ; ---------------------------------------------------------------------------
.text:000000000000E9B8                 align 20h
.text:000000000000E9C0
.text:000000000000E9C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E9C0
.text:000000000000E9C0 ; Attributes: info_from_lumina
.text:000000000000E9C0
.text:000000000000E9C0                 public renameat2
.text:000000000000E9C0 renameat2       proc near               ; CODE XREF: main+5B8↑p
.text:000000000000E9C0                                         ; copy_internal+333↑p ...
.text:000000000000E9C0
.text:000000000000E9C0 oldfd           = dword ptr -174h
.text:000000000000E9C0 var_170         = qword ptr -170h
.text:000000000000E9C0 stat_buf        = stat ptr -168h
.text:000000000000E9C0 var_D8          = stat ptr -0D8h
.text:000000000000E9C0 var_40          = qword ptr -40h
.text:000000000000E9C0
.text:000000000000E9C0 ; __unwind {
.text:000000000000E9C0                 push    r15
.text:000000000000E9C2                 push    r14
.text:000000000000E9C4                 mov     r9d, r8d
.text:000000000000E9C7                 push    r13
.text:000000000000E9C9                 push    r12
.text:000000000000E9CB                 mov     r14d, edx
.text:000000000000E9CE                 push    rbp
.text:000000000000E9CF                 push    rbx
.text:000000000000E9D0                 mov     r12, rsi
.text:000000000000E9D3                 mov     r13, rcx
.text:000000000000E9D6                 mov     ebp, r8d
.text:000000000000E9D9                 mov     r8, rcx
.text:000000000000E9DC                 sub     rsp, 148h
.text:000000000000E9E3                 mov     ecx, edx
.text:000000000000E9E5                 mov     rdx, rsi
.text:000000000000E9E8                 mov     rax, fs:28h
.text:000000000000E9F1                 mov     [rsp+178h+var_40], rax
.text:000000000000E9F9                 xor     eax, eax
.text:000000000000E9FB                 mov     esi, edi
.text:000000000000E9FD                 mov     [rsp+178h+oldfd], edi
.text:000000000000EA01                 mov     edi, 13Ch       ; sysno
.text:000000000000EA06                 call    _syscall
.text:000000000000EA0B                 mov     rbx, rax
.text:000000000000EA0E                 mov     r15d, eax
.text:000000000000EA11                 call    ___errno_location
.text:000000000000EA16                 test    ebx, ebx
.text:000000000000EA18                 js      short loc_EA50
.text:000000000000EA1A
.text:000000000000EA1A loc_EA1A:                               ; CODE XREF: renameat2+A6↓j
.text:000000000000EA1A                                         ; renameat2+F8↓j ...
.text:000000000000EA1A                 mov     rdx, [rsp+178h+var_40]
.text:000000000000EA22                 xor     rdx, fs:28h
.text:000000000000EA2B                 mov     eax, r15d
.text:000000000000EA2E                 jnz     loc_EC25
.text:000000000000EA34                 add     rsp, 148h
.text:000000000000EA3B                 pop     rbx
.text:000000000000EA3C                 pop     rbp
.text:000000000000EA3D                 pop     r12
.text:000000000000EA3F                 pop     r13
.text:000000000000EA41                 pop     r14
.text:000000000000EA43                 pop     r15
.text:000000000000EA45                 retn
.text:000000000000EA45 ; ---------------------------------------------------------------------------
.text:000000000000EA46                 align 10h
.text:000000000000EA50
.text:000000000000EA50 loc_EA50:                               ; CODE XREF: renameat2+58↑j
.text:000000000000EA50                 mov     r9, rax
.text:000000000000EA53                 mov     eax, [rax]
.text:000000000000EA55                 lea     ecx, [rax-16h]
.text:000000000000EA58                 and     ecx, 0FFFFFFEFh
.text:000000000000EA5B                 setnz   bl
.text:000000000000EA5E                 cmp     eax, 5Fh ; '_'
.text:000000000000EA61                 setnz   al
.text:000000000000EA64                 and     bl, al
.text:000000000000EA66                 jnz     short loc_EA1A
.text:000000000000EA68                 test    ebp, ebp
.text:000000000000EA6A                 jnz     short loc_EAC0
.text:000000000000EA6C
.text:000000000000EA6C loc_EA6C:                               ; CODE XREF: renameat2+21D↓j
.text:000000000000EA6C                 mov     rdi, r12        ; s
.text:000000000000EA6F                 mov     [rsp+178h+var_170], r9
.text:000000000000EA74                 call    _strlen
.text:000000000000EA79                 mov     rdi, r13        ; s
.text:000000000000EA7C                 mov     rbp, rax
.text:000000000000EA7F                 call    _strlen
.text:000000000000EA84                 test    rbp, rbp
.text:000000000000EA87                 jz      short loc_EAA3
.text:000000000000EA89                 test    rax, rax
.text:000000000000EA8C                 mov     r9, [rsp+178h+var_170]
.text:000000000000EA91                 jz      short loc_EAA3
.text:000000000000EA93                 cmp     byte ptr [r12+rbp-1], 2Fh ; '/'
.text:000000000000EA99                 jz      short loc_EAE0
.text:000000000000EA9B                 cmp     byte ptr [r13+rax-1], 2Fh ; '/'
.text:000000000000EAA1                 jz      short loc_EAE0
.text:000000000000EAA3
.text:000000000000EAA3 loc_EAA3:                               ; CODE XREF: renameat2+C7↑j
.text:000000000000EAA3                                         ; renameat2+D1↑j ...
.text:000000000000EAA3                 mov     edi, [rsp+178h+oldfd] ; oldfd
.text:000000000000EAA7                 mov     rcx, r13        ; new
.text:000000000000EAAA                 mov     edx, r14d       ; newfd
.text:000000000000EAAD                 mov     rsi, r12        ; old
.text:000000000000EAB0                 call    _renameat
.text:000000000000EAB5                 mov     r15d, eax
.text:000000000000EAB8                 jmp     loc_EA1A
.text:000000000000EAB8 ; ---------------------------------------------------------------------------
.text:000000000000EABD                 align 20h
.text:000000000000EAC0
.text:000000000000EAC0 loc_EAC0:                               ; CODE XREF: renameat2+AA↑j
.text:000000000000EAC0                 and     ebp, 0FFFFFFFEh
.text:000000000000EAC3                 jz      short loc_EB30
.text:000000000000EAC5                 mov     dword ptr [r9], 5Fh ; '_'
.text:000000000000EACC                 mov     r15d, 0FFFFFFFFh
.text:000000000000EAD2                 jmp     loc_EA1A
.text:000000000000EAD2 ; ---------------------------------------------------------------------------
.text:000000000000EAD7                 align 20h
.text:000000000000EAE0
.text:000000000000EAE0 loc_EAE0:                               ; CODE XREF: renameat2+D9↑j
.text:000000000000EAE0                                         ; renameat2+E1↑j
.text:000000000000EAE0                 mov     esi, [rsp+178h+oldfd] ; fildes
.text:000000000000EAE4                 lea     rcx, [rsp+178h+stat_buf] ; stat_buf
.text:000000000000EAE9                 mov     r8d, 100h       ; flag
.text:000000000000EAEF                 mov     rdx, r12        ; filename
.text:000000000000EAF2                 mov     edi, 1          ; ver
.text:000000000000EAF7                 mov     [rsp+178h+var_170], r9
.text:000000000000EAFC                 call    ___fxstatat
.text:000000000000EB01                 test    eax, eax
.text:000000000000EB03                 jnz     short loc_EB69
.text:000000000000EB05                 test    bl, bl
.text:000000000000EB07                 mov     r9, [rsp+178h+var_170]
.text:000000000000EB0C                 jz      short loc_EB8A
.text:000000000000EB0E                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000EB12                 and     eax, 0F000h
.text:000000000000EB17                 cmp     eax, 4000h
.text:000000000000EB1C                 jz      short loc_EAA3
.text:000000000000EB1E                 mov     dword ptr [r9], 2
.text:000000000000EB25                 mov     r15d, 0FFFFFFFFh
.text:000000000000EB2B                 jmp     loc_EA1A
.text:000000000000EB30 ; ---------------------------------------------------------------------------
.text:000000000000EB30
.text:000000000000EB30 loc_EB30:                               ; CODE XREF: renameat2+103↑j
.text:000000000000EB30                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:000000000000EB38                 mov     r8d, 100h       ; flag
.text:000000000000EB3E                 mov     rdx, r13        ; filename
.text:000000000000EB41                 mov     esi, r14d       ; fildes
.text:000000000000EB44                 mov     edi, 1          ; ver
.text:000000000000EB49                 mov     [rsp+178h+var_170], r9
.text:000000000000EB4E                 call    ___fxstatat
.text:000000000000EB53                 test    eax, eax
.text:000000000000EB55                 mov     r9, [rsp+178h+var_170]
.text:000000000000EB5A                 jz      short loc_EB78
.text:000000000000EB5C                 mov     eax, [r9]
.text:000000000000EB5F                 cmp     eax, 4Bh ; 'K'
.text:000000000000EB62                 jz      short loc_EB78
.text:000000000000EB64                 cmp     eax, 2
.text:000000000000EB67                 jz      short loc_EBD8
.text:000000000000EB69
.text:000000000000EB69 loc_EB69:                               ; CODE XREF: renameat2+143↑j
.text:000000000000EB69                                         ; renameat2+1FA↓j ...
.text:000000000000EB69                 mov     r15d, 0FFFFFFFFh
.text:000000000000EB6F                 jmp     loc_EA1A
.text:000000000000EB6F ; ---------------------------------------------------------------------------
.text:000000000000EB74                 align 8
.text:000000000000EB78
.text:000000000000EB78 loc_EB78:                               ; CODE XREF: renameat2+19A↑j
.text:000000000000EB78                                         ; renameat2+1A2↑j
.text:000000000000EB78                 mov     dword ptr [r9], 11h
.text:000000000000EB7F                 mov     r15d, 0FFFFFFFFh
.text:000000000000EB85                 jmp     loc_EA1A
.text:000000000000EB8A ; ---------------------------------------------------------------------------
.text:000000000000EB8A
.text:000000000000EB8A loc_EB8A:                               ; CODE XREF: renameat2+14C↑j
.text:000000000000EB8A                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:000000000000EB92                 mov     r8d, 100h       ; flag
.text:000000000000EB98                 mov     rdx, r13        ; filename
.text:000000000000EB9B                 mov     esi, r14d       ; fildes
.text:000000000000EB9E                 mov     edi, 1          ; ver
.text:000000000000EBA3                 mov     [rsp+178h+var_170], r9
.text:000000000000EBA8                 call    ___fxstatat
.text:000000000000EBAD                 test    eax, eax
.text:000000000000EBAF                 mov     r9, [rsp+178h+var_170]
.text:000000000000EBB4                 jz      short loc_EBE2
.text:000000000000EBB6                 cmp     dword ptr [r9], 2
.text:000000000000EBBA                 jnz     short loc_EB69
.text:000000000000EBBC                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000EBC0                 and     eax, 0F000h
.text:000000000000EBC5                 cmp     eax, 4000h
.text:000000000000EBCA                 jnz     short loc_EB69
.text:000000000000EBCC                 jmp     loc_EAA3
.text:000000000000EBCC ; ---------------------------------------------------------------------------
.text:000000000000EBD1                 align 8
.text:000000000000EBD8
.text:000000000000EBD8 loc_EBD8:                               ; CODE XREF: renameat2+1A7↑j
.text:000000000000EBD8                 mov     ebx, 1
.text:000000000000EBDD                 jmp     loc_EA6C
.text:000000000000EBE2 ; ---------------------------------------------------------------------------
.text:000000000000EBE2
.text:000000000000EBE2 loc_EBE2:                               ; CODE XREF: renameat2+1F4↑j
.text:000000000000EBE2                 mov     eax, [rsp+178h+var_D8.st_mode]
.text:000000000000EBE9                 and     eax, 0F000h
.text:000000000000EBEE                 cmp     eax, 4000h
.text:000000000000EBF3                 jz      short loc_EC01
.text:000000000000EBF5                 mov     dword ptr [r9], 14h
.text:000000000000EBFC                 jmp     loc_EB69
.text:000000000000EC01 ; ---------------------------------------------------------------------------
.text:000000000000EC01
.text:000000000000EC01 loc_EC01:                               ; CODE XREF: renameat2+233↑j
.text:000000000000EC01                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:000000000000EC05                 and     eax, 0F000h
.text:000000000000EC0A                 cmp     eax, 4000h
.text:000000000000EC0F                 jz      loc_EAA3
.text:000000000000EC15                 mov     dword ptr [r9], 15h
.text:000000000000EC1C                 or      r15d, 0FFFFFFFFh
.text:000000000000EC20                 jmp     loc_EA1A
.text:000000000000EC25 ; ---------------------------------------------------------------------------
.text:000000000000EC25
.text:000000000000EC25 loc_EC25:                               ; CODE XREF: renameat2+6E↑j
.text:000000000000EC25                 call    ___stack_chk_fail
.text:000000000000EC25 ; } // starts at E9C0
.text:000000000000EC25 renameat2       endp
.text:000000000000EC25
.text:000000000000EC25 ; ---------------------------------------------------------------------------
.text:000000000000EC2A                 align 10h
.text:000000000000EC30
.text:000000000000EC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000EC30
.text:000000000000EC30
.text:000000000000EC30                 public get_root_dev_ino
.text:000000000000EC30 get_root_dev_ino proc near              ; CODE XREF: do_move+85↑p
.text:000000000000EC30
.text:000000000000EC30 var_A8          = qword ptr -0A8h
.text:000000000000EC30 var_A0          = qword ptr -0A0h
.text:000000000000EC30 var_10          = qword ptr -10h
.text:000000000000EC30
.text:000000000000EC30 ; __unwind {
.text:000000000000EC30                 push    rbx
.text:000000000000EC31                 lea     rsi, aLibs+6    ; filename
.text:000000000000EC38                 mov     rbx, rdi
.text:000000000000EC3B                 mov     edi, 1          ; ver
.text:000000000000EC40                 sub     rsp, 0A0h
.text:000000000000EC47                 mov     rdx, rsp        ; stat_buf
.text:000000000000EC4A                 mov     rax, fs:28h
.text:000000000000EC53                 mov     [rsp+0A8h+var_10], rax
.text:000000000000EC5B                 xor     eax, eax
.text:000000000000EC5D                 call    ___lxstat
.text:000000000000EC62                 test    eax, eax
.text:000000000000EC64                 jnz     short loc_EC98
.text:000000000000EC66                 mov     rax, [rsp+0A8h+var_A0]
.text:000000000000EC6B                 mov     [rbx], rax
.text:000000000000EC6E                 mov     rax, [rsp+0A8h+var_A8]
.text:000000000000EC72                 mov     [rbx+8], rax
.text:000000000000EC76                 mov     rax, rbx
.text:000000000000EC79
.text:000000000000EC79 loc_EC79:                               ; CODE XREF: get_root_dev_ino+6A↓j
.text:000000000000EC79                 mov     rcx, [rsp+0A8h+var_10]
.text:000000000000EC81                 xor     rcx, fs:28h
.text:000000000000EC8A                 jnz     short loc_EC9C
.text:000000000000EC8C                 add     rsp, 0A0h
.text:000000000000EC93                 pop     rbx
.text:000000000000EC94                 retn
.text:000000000000EC94 ; ---------------------------------------------------------------------------
.text:000000000000EC95                 align 8
.text:000000000000EC98
.text:000000000000EC98 loc_EC98:                               ; CODE XREF: get_root_dev_ino+34↑j
.text:000000000000EC98                 xor     eax, eax
.text:000000000000EC9A                 jmp     short loc_EC79
.text:000000000000EC9C ; ---------------------------------------------------------------------------
.text:000000000000EC9C
.text:000000000000EC9C loc_EC9C:                               ; CODE XREF: get_root_dev_ino+5A↑j
.text:000000000000EC9C                 call    ___stack_chk_fail
.text:000000000000EC9C ; } // starts at EC30
.text:000000000000EC9C get_root_dev_ino endp
.text:000000000000EC9C
.text:000000000000EC9C ; ---------------------------------------------------------------------------
.text:000000000000ECA1                 align 10h
.text:000000000000ECB0
.text:000000000000ECB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ECB0
.text:000000000000ECB0
.text:000000000000ECB0 ; __int64 __fastcall safe_write(int fd, void *buf, size_t n)
.text:000000000000ECB0                 public safe_write
.text:000000000000ECB0 safe_write      proc near               ; CODE XREF: full_write+39↑p
.text:000000000000ECB0 ; __unwind {
.text:000000000000ECB0                 push    r13
.text:000000000000ECB2                 push    r12
.text:000000000000ECB4                 mov     r13d, edi
.text:000000000000ECB7                 push    rbp
.text:000000000000ECB8                 push    rbx
.text:000000000000ECB9                 mov     r12, rsi
.text:000000000000ECBC                 mov     rbx, rdx
.text:000000000000ECBF                 sub     rsp, 8
.text:000000000000ECC3                 nop     dword ptr [rax+rax+00h]
.text:000000000000ECC8
.text:000000000000ECC8 loc_ECC8:                               ; CODE XREF: safe_write+38↓j
.text:000000000000ECC8                                         ; safe_write+4D↓j
.text:000000000000ECC8                 mov     rdx, rbx        ; n
.text:000000000000ECCB                 mov     rsi, r12        ; buf
.text:000000000000ECCE                 mov     edi, r13d       ; fd
.text:000000000000ECD1                 call    _write
.text:000000000000ECD6                 test    rax, rax
.text:000000000000ECD9                 mov     rbp, rax
.text:000000000000ECDC                 jns     short loc_ED00
.text:000000000000ECDE                 call    ___errno_location
.text:000000000000ECE3                 mov     eax, [rax]
.text:000000000000ECE5                 cmp     eax, 4
.text:000000000000ECE8                 jz      short loc_ECC8
.text:000000000000ECEA                 cmp     eax, 16h
.text:000000000000ECED                 jnz     short loc_ED00
.text:000000000000ECEF                 cmp     rbx, 7FF00000h
.text:000000000000ECF6                 jbe     short loc_ED00
.text:000000000000ECF8                 mov     ebx, 7FF00000h
.text:000000000000ECFD                 jmp     short loc_ECC8
.text:000000000000ECFD ; ---------------------------------------------------------------------------
.text:000000000000ECFF                 align 20h
.text:000000000000ED00
.text:000000000000ED00 loc_ED00:                               ; CODE XREF: safe_write+2C↑j
.text:000000000000ED00                                         ; safe_write+3D↑j ...
.text:000000000000ED00                 add     rsp, 8
.text:000000000000ED04                 mov     rax, rbp
.text:000000000000ED07                 pop     rbx
.text:000000000000ED08                 pop     rbp
.text:000000000000ED09                 pop     r12
.text:000000000000ED0B                 pop     r13
.text:000000000000ED0D                 retn
.text:000000000000ED0D ; } // starts at ECB0
.text:000000000000ED0D safe_write      endp
.text:000000000000ED0D
.text:000000000000ED0D ; ---------------------------------------------------------------------------
.text:000000000000ED0E                 align 10h
.text:000000000000ED10
.text:000000000000ED10 ; =============== S U B R O U T I N E =======================================
.text:000000000000ED10
.text:000000000000ED10
.text:000000000000ED10 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:000000000000ED10 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:000000000000ED10
.text:000000000000ED10 var_158         = qword ptr -158h
.text:000000000000ED10 var_150         = qword ptr -150h
.text:000000000000ED10 stat_buf        = stat ptr -0C8h
.text:000000000000ED10 var_30          = qword ptr -30h
.text:000000000000ED10
.text:000000000000ED10 ; __unwind {
.text:000000000000ED10                 push    r13
.text:000000000000ED12                 push    r12
.text:000000000000ED14                 mov     r13d, edi
.text:000000000000ED17                 push    rbp
.text:000000000000ED18                 push    rbx
.text:000000000000ED19                 mov     rdi, rsi
.text:000000000000ED1C                 mov     ebp, edx
.text:000000000000ED1E                 mov     r12, rcx
.text:000000000000ED21                 sub     rsp, 138h
.text:000000000000ED28                 mov     rax, fs:28h
.text:000000000000ED31                 mov     [rsp+158h+var_30], rax
.text:000000000000ED39                 xor     eax, eax
.text:000000000000ED3B                 call    dir_name
.text:000000000000ED40                 mov     rcx, rsp        ; stat_buf
.text:000000000000ED43                 mov     r8d, 100h       ; flag
.text:000000000000ED49                 mov     rdx, rax        ; filename
.text:000000000000ED4C                 mov     esi, r13d       ; fildes
.text:000000000000ED4F                 mov     edi, 1          ; ver
.text:000000000000ED54                 mov     rbx, rax
.text:000000000000ED57                 call    ___fxstatat
.text:000000000000ED5C                 test    eax, eax
.text:000000000000ED5E                 jnz     loc_EE10
.text:000000000000ED64
.text:000000000000ED64 loc_ED64:                               ; CODE XREF: same_nameat_part_0+11D↓j
.text:000000000000ED64                 mov     rdi, rbx        ; ptr
.text:000000000000ED67                 call    free
.text:000000000000ED6C                 mov     rdi, r12
.text:000000000000ED6F                 call    dir_name
.text:000000000000ED74                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000ED7C                 mov     r8d, 100h       ; flag
.text:000000000000ED82                 mov     rdx, rax        ; filename
.text:000000000000ED85                 mov     esi, ebp        ; fildes
.text:000000000000ED87                 mov     edi, 1          ; ver
.text:000000000000ED8C                 mov     rbx, rax
.text:000000000000ED8F                 call    ___fxstatat
.text:000000000000ED94                 test    eax, eax
.text:000000000000ED96                 jnz     short loc_EDE8
.text:000000000000ED98
.text:000000000000ED98 loc_ED98:                               ; CODE XREF: same_nameat_part_0+F5↓j
.text:000000000000ED98                 xor     ebp, ebp
.text:000000000000ED9A                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:000000000000EDA2                 cmp     [rsp+158h+var_150], rax
.text:000000000000EDA7                 jnz     short loc_EDB9
.text:000000000000EDA9                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:000000000000EDB1                 cmp     [rsp+158h+var_158], rax
.text:000000000000EDB5                 setz    bpl
.text:000000000000EDB9
.text:000000000000EDB9 loc_EDB9:                               ; CODE XREF: same_nameat_part_0+97↑j
.text:000000000000EDB9                 mov     rdi, rbx        ; ptr
.text:000000000000EDBC                 call    free
.text:000000000000EDC1                 mov     rdx, [rsp+158h+var_30]
.text:000000000000EDC9                 xor     rdx, fs:28h
.text:000000000000EDD2                 mov     eax, ebp
.text:000000000000EDD4                 jnz     short loc_EE32
.text:000000000000EDD6                 add     rsp, 138h
.text:000000000000EDDD                 pop     rbx
.text:000000000000EDDE                 pop     rbp
.text:000000000000EDDF                 pop     r12
.text:000000000000EDE1                 pop     r13
.text:000000000000EDE3                 retn
.text:000000000000EDE3 ; ---------------------------------------------------------------------------
.text:000000000000EDE4                 align 8
.text:000000000000EDE8
.text:000000000000EDE8 loc_EDE8:                               ; CODE XREF: same_nameat_part_0+86↑j
.text:000000000000EDE8                 call    ___errno_location
.text:000000000000EDED                 mov     esi, [rax]      ; errnum
.text:000000000000EDEF                 lea     rdx, aS_0+2     ; format
.text:000000000000EDF6                 mov     rcx, rbx
.text:000000000000EDF9                 mov     edi, 1          ; status
.text:000000000000EDFE                 xor     eax, eax
.text:000000000000EE00                 call    _error
.text:000000000000EE05                 jmp     short loc_ED98
.text:000000000000EE05 ; ---------------------------------------------------------------------------
.text:000000000000EE07                 align 10h
.text:000000000000EE10
.text:000000000000EE10 loc_EE10:                               ; CODE XREF: same_nameat_part_0+4E↑j
.text:000000000000EE10                 call    ___errno_location
.text:000000000000EE15                 mov     esi, [rax]      ; errnum
.text:000000000000EE17                 lea     rdx, aS_0+2     ; format
.text:000000000000EE1E                 mov     rcx, rbx
.text:000000000000EE21                 mov     edi, 1          ; status
.text:000000000000EE26                 xor     eax, eax
.text:000000000000EE28                 call    _error
.text:000000000000EE2D                 jmp     loc_ED64
.text:000000000000EE32 ; ---------------------------------------------------------------------------
.text:000000000000EE32
.text:000000000000EE32 loc_EE32:                               ; CODE XREF: same_nameat_part_0+C4↑j
.text:000000000000EE32                 call    ___stack_chk_fail
.text:000000000000EE32 ; } // starts at ED10
.text:000000000000EE32 same_nameat_part_0 endp
.text:000000000000EE32
.text:000000000000EE32 ; ---------------------------------------------------------------------------
.text:000000000000EE37                 align 20h
.text:000000000000EE40
.text:000000000000EE40 ; =============== S U B R O U T I N E =======================================
.text:000000000000EE40
.text:000000000000EE40
.text:000000000000EE40                 public same_nameat
.text:000000000000EE40 same_nameat     proc near               ; CODE XREF: same_name+D↓j
.text:000000000000EE40
.text:000000000000EE40 fildes          = dword ptr -3Ch
.text:000000000000EE40
.text:000000000000EE40 ; __unwind {
.text:000000000000EE40                 push    r15
.text:000000000000EE42                 push    r14
.text:000000000000EE44                 mov     r15d, edx
.text:000000000000EE47                 push    r13
.text:000000000000EE49                 push    r12
.text:000000000000EE4B                 push    rbp
.text:000000000000EE4C                 push    rbx
.text:000000000000EE4D                 mov     rbp, rcx
.text:000000000000EE50                 mov     rbx, rsi
.text:000000000000EE53                 sub     rsp, 18h
.text:000000000000EE57                 mov     [rsp+48h+fildes], edi
.text:000000000000EE5B                 mov     rdi, rsi
.text:000000000000EE5E                 call    last_component
.text:000000000000EE63                 mov     rdi, rbp
.text:000000000000EE66                 mov     r12, rax
.text:000000000000EE69                 call    last_component
.text:000000000000EE6E                 mov     rdi, r12
.text:000000000000EE71                 mov     r13, rax
.text:000000000000EE74                 call    base_len
.text:000000000000EE79                 mov     rdi, r13
.text:000000000000EE7C                 mov     r14, rax
.text:000000000000EE7F                 call    base_len
.text:000000000000EE84                 cmp     r14, rax
.text:000000000000EE87                 jz      short loc_EEA0
.text:000000000000EE89
.text:000000000000EE89 loc_EE89:                               ; CODE XREF: same_nameat+70↓j
.text:000000000000EE89                 add     rsp, 18h
.text:000000000000EE8D                 xor     eax, eax
.text:000000000000EE8F                 pop     rbx
.text:000000000000EE90                 pop     rbp
.text:000000000000EE91                 pop     r12
.text:000000000000EE93                 pop     r13
.text:000000000000EE95                 pop     r14
.text:000000000000EE97                 pop     r15
.text:000000000000EE99                 retn
.text:000000000000EE99 ; ---------------------------------------------------------------------------
.text:000000000000EE9A                 align 20h
.text:000000000000EEA0
.text:000000000000EEA0 loc_EEA0:                               ; CODE XREF: same_nameat+47↑j
.text:000000000000EEA0                 mov     rdx, r14        ; n
.text:000000000000EEA3                 mov     rsi, r13        ; s2
.text:000000000000EEA6                 mov     rdi, r12        ; s1
.text:000000000000EEA9                 call    _memcmp
.text:000000000000EEAE                 test    eax, eax
.text:000000000000EEB0                 jnz     short loc_EE89
.text:000000000000EEB2                 mov     edi, [rsp+48h+fildes] ; fildes
.text:000000000000EEB6                 add     rsp, 18h
.text:000000000000EEBA                 mov     rcx, rbp
.text:000000000000EEBD                 mov     edx, r15d
.text:000000000000EEC0                 mov     rsi, rbx
.text:000000000000EEC3                 pop     rbx
.text:000000000000EEC4                 pop     rbp
.text:000000000000EEC5                 pop     r12
.text:000000000000EEC7                 pop     r13
.text:000000000000EEC9                 pop     r14
.text:000000000000EECB                 pop     r15
.text:000000000000EECD                 jmp     same_nameat_part_0
.text:000000000000EECD ; } // starts at EE40
.text:000000000000EECD same_nameat     endp
.text:000000000000EECD
.text:000000000000EECD ; ---------------------------------------------------------------------------
.text:000000000000EED2                 align 20h
.text:000000000000EEE0
.text:000000000000EEE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EEE0
.text:000000000000EEE0
.text:000000000000EEE0                 public same_name
.text:000000000000EEE0 same_name       proc near               ; CODE XREF: copy_internal+1099↑p
.text:000000000000EEE0                                         ; copy_internal+1757↑p ...
.text:000000000000EEE0 ; __unwind {
.text:000000000000EEE0                 mov     edx, 0FFFFFF9Ch
.text:000000000000EEE5                 mov     rcx, rsi
.text:000000000000EEE8                 mov     rsi, rdi
.text:000000000000EEEB                 mov     edi, edx
.text:000000000000EEED                 jmp     same_nameat
.text:000000000000EEED ; } // starts at EEE0
.text:000000000000EEED same_name       endp
.text:000000000000EEED
.text:000000000000EEED ; ---------------------------------------------------------------------------
.text:000000000000EEF2                 align 20h
.text:000000000000EF00
.text:000000000000EF00 ; =============== S U B R O U T I N E =======================================
.text:000000000000EF00
.text:000000000000EF00
.text:000000000000EF00 direntry_cmp_inode proc near            ; DATA XREF: .data.rel.ro:000000000021BA30↓o
.text:000000000000EF00 ; __unwind {
.text:000000000000EF00                 mov     rax, [rsi+8]
.text:000000000000EF04                 cmp     [rdi+8], rax
.text:000000000000EF08                 jb      short loc_EF18
.text:000000000000EF0A                 setnbe  al
.text:000000000000EF0D                 movzx   eax, al
.text:000000000000EF10                 retn
.text:000000000000EF10 ; ---------------------------------------------------------------------------
.text:000000000000EF11                 align 8
.text:000000000000EF18
.text:000000000000EF18 loc_EF18:                               ; CODE XREF: direntry_cmp_inode+8↑j
.text:000000000000EF18                 mov     eax, 0FFFFFFFFh
.text:000000000000EF1D                 retn
.text:000000000000EF1D ; } // starts at EF00
.text:000000000000EF1D direntry_cmp_inode endp
.text:000000000000EF1D
.text:000000000000EF1D ; ---------------------------------------------------------------------------
.text:000000000000EF1E                 align 20h
.text:000000000000EF20
.text:000000000000EF20 ; =============== S U B R O U T I N E =======================================
.text:000000000000EF20
.text:000000000000EF20
.text:000000000000EF20 direntry_cmp_name proc near             ; DATA XREF: .data.rel.ro:000000000021BA28↓o
.text:000000000000EF20 ; __unwind {
.text:000000000000EF20                 mov     rsi, [rsi]      ; s2
.text:000000000000EF23                 mov     rdi, [rdi]      ; s1
.text:000000000000EF26                 jmp     _strcmp
.text:000000000000EF26 ; } // starts at EF20
.text:000000000000EF26 direntry_cmp_name endp
.text:000000000000EF26
.text:000000000000EF26 ; ---------------------------------------------------------------------------
.text:000000000000EF2B                 align 10h
.text:000000000000EF30
.text:000000000000EF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000EF30
.text:000000000000EF30 ; Attributes: info_from_lumina
.text:000000000000EF30
.text:000000000000EF30 ; __int64 __fastcall streamsavedir(DIR *dirp)
.text:000000000000EF30                 public streamsavedir
.text:000000000000EF30 streamsavedir   proc near               ; CODE XREF: savedir+18↓p
.text:000000000000EF30
.text:000000000000EF30 compar          = qword ptr -70h
.text:000000000000EF30 ptr             = qword ptr -68h
.text:000000000000EF30 n               = qword ptr -60h
.text:000000000000EF30 var_58          = qword ptr -58h
.text:000000000000EF30 var_50          = qword ptr -50h
.text:000000000000EF30 var_48          = qword ptr -48h
.text:000000000000EF30 var_40          = qword ptr -40h
.text:000000000000EF30
.text:000000000000EF30 ; __unwind {
.text:000000000000EF30                 push    r15
.text:000000000000EF32                 lea     rax, comparison_function_table
.text:000000000000EF39                 push    r14
.text:000000000000EF3B                 push    r13
.text:000000000000EF3D                 push    r12
.text:000000000000EF3F                 mov     esi, esi
.text:000000000000EF41                 push    rbp
.text:000000000000EF42                 push    rbx
.text:000000000000EF43                 sub     rsp, 48h
.text:000000000000EF47                 mov     rax, [rax+rsi*8]
.text:000000000000EF4B                 test    rdi, rdi
.text:000000000000EF4E                 mov     [rsp+78h+compar], rax
.text:000000000000EF53                 jz      loc_F25D
.text:000000000000EF59                 mov     rbx, rdi
.text:000000000000EF5C                 xor     r14d, r14d
.text:000000000000EF5F                 xor     r12d, r12d
.text:000000000000EF62                 call    ___errno_location
.text:000000000000EF67                 xor     r13d, r13d
.text:000000000000EF6A                 mov     rbp, rax
.text:000000000000EF6D                 mov     [rsp+78h+var_50], 0
.text:000000000000EF76                 mov     [rsp+78h+ptr], 0
.text:000000000000EF7F                 mov     [rsp+78h+var_58], 0
.text:000000000000EF88                 jmp     short loc_EF94
.text:000000000000EF88 ; ---------------------------------------------------------------------------
.text:000000000000EF8A                 align 10h
.text:000000000000EF90
.text:000000000000EF90 loc_EF90:                               ; CODE XREF: streamsavedir+89↓j
.text:000000000000EF90                                         ; streamsavedir+114↓j
.text:000000000000EF90                 test    al, al
.text:000000000000EF92                 jnz     short loc_EFC9
.text:000000000000EF94
.text:000000000000EF94 loc_EF94:                               ; CODE XREF: streamsavedir+58↑j
.text:000000000000EF94                                         ; streamsavedir+97↓j ...
.text:000000000000EF94                 mov     dword ptr [rbp+0], 0
.text:000000000000EF9B                 mov     rdi, rbx        ; dirp
.text:000000000000EF9E                 call    _readdir
.text:000000000000EFA3                 test    rax, rax
.text:000000000000EFA6                 mov     rcx, rax
.text:000000000000EFA9                 jz      loc_F050
.text:000000000000EFAF                 lea     r15, [rax+13h]
.text:000000000000EFB3                 movzx   eax, byte ptr [rax+13h]
.text:000000000000EFB7                 cmp     al, 2Eh ; '.'
.text:000000000000EFB9                 jnz     short loc_EF90
.text:000000000000EFBB                 cmp     byte ptr [rcx+14h], 2Eh ; '.'
.text:000000000000EFBF                 jz      short loc_F040
.text:000000000000EFC1                 movzx   eax, byte ptr [rcx+14h]
.text:000000000000EFC5                 test    al, al
.text:000000000000EFC7                 jz      short loc_EF94
.text:000000000000EFC9
.text:000000000000EFC9 loc_EFC9:                               ; CODE XREF: streamsavedir+62↑j
.text:000000000000EFC9                 mov     rdi, r15        ; s
.text:000000000000EFCC                 mov     [rsp+78h+var_48], rcx
.text:000000000000EFD1                 call    _strlen
.text:000000000000EFD6                 add     rax, 1
.text:000000000000EFDA                 cmp     [rsp+78h+compar], 0
.text:000000000000EFE0                 mov     [rsp+78h+n], rax
.text:000000000000EFE5                 jz      loc_F128
.text:000000000000EFEB                 cmp     r12, [rsp+78h+var_50]
.text:000000000000EFF0                 lea     rax, [r12+1]
.text:000000000000EFF5                 mov     rcx, [rsp+78h+var_48]
.text:000000000000EFFA                 mov     [rsp+78h+var_40], rax
.text:000000000000EFFF                 jz      loc_F1B1
.text:000000000000F005
.text:000000000000F005 loc_F005:                               ; CODE XREF: streamsavedir+2CE↓j
.text:000000000000F005                 shl     r12, 4
.text:000000000000F009                 mov     rdi, r15        ; src
.text:000000000000F00C                 add     r12, [rsp+78h+ptr]
.text:000000000000F011                 mov     [rsp+78h+var_48], rcx
.text:000000000000F016                 call    xstrdup
.text:000000000000F01B                 mov     rcx, [rsp+78h+var_48]
.text:000000000000F020                 add     r14, [rsp+78h+n]
.text:000000000000F025                 mov     [r12], rax
.text:000000000000F029                 mov     rax, [rcx]
.text:000000000000F02C                 mov     [r12+8], rax
.text:000000000000F031                 mov     r12, [rsp+78h+var_40]
.text:000000000000F036                 jmp     loc_EF94
.text:000000000000F036 ; ---------------------------------------------------------------------------
.text:000000000000F03B                 align 20h
.text:000000000000F040
.text:000000000000F040 loc_F040:                               ; CODE XREF: streamsavedir+8F↑j
.text:000000000000F040                 movzx   eax, byte ptr [rcx+15h]
.text:000000000000F044                 jmp     loc_EF90
.text:000000000000F044 ; ---------------------------------------------------------------------------
.text:000000000000F049                 align 10h
.text:000000000000F050
.text:000000000000F050 loc_F050:                               ; CODE XREF: streamsavedir+79↑j
.text:000000000000F050                 mov     ebx, [rbp+0]
.text:000000000000F053                 test    ebx, ebx
.text:000000000000F055                 jnz     loc_F240
.text:000000000000F05B                 cmp     [rsp+78h+compar], 0
.text:000000000000F061                 jz      loc_F110
.text:000000000000F067                 test    r12, r12
.text:000000000000F06A                 lea     rbx, [r14+1]
.text:000000000000F06E                 jnz     short loc_F0A0
.text:000000000000F070                 mov     rdi, rbx
.text:000000000000F073                 call    xmalloc
.text:000000000000F078                 mov     r13, rax
.text:000000000000F07B                 mov     rbx, rax
.text:000000000000F07E
.text:000000000000F07E loc_F07E:                               ; CODE XREF: streamsavedir+1D6↓j
.text:000000000000F07E                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000F083                 call    free
.text:000000000000F088
.text:000000000000F088 loc_F088:                               ; CODE XREF: streamsavedir+1F0↓j
.text:000000000000F088                                         ; streamsavedir+2EA↓j
.text:000000000000F088                 mov     byte ptr [rbx], 0
.text:000000000000F08B
.text:000000000000F08B loc_F08B:                               ; CODE XREF: streamsavedir+328↓j
.text:000000000000F08B                                         ; streamsavedir+330↓j
.text:000000000000F08B                 add     rsp, 48h
.text:000000000000F08F                 mov     rax, r13
.text:000000000000F092                 pop     rbx
.text:000000000000F093                 pop     rbp
.text:000000000000F094                 pop     r12
.text:000000000000F096                 pop     r13
.text:000000000000F098                 pop     r14
.text:000000000000F09A                 pop     r15
.text:000000000000F09C                 retn
.text:000000000000F09C ; ---------------------------------------------------------------------------
.text:000000000000F09D                 align 20h
.text:000000000000F0A0
.text:000000000000F0A0 loc_F0A0:                               ; CODE XREF: streamsavedir+13E↑j
.text:000000000000F0A0                 mov     r15, [rsp+78h+ptr]
.text:000000000000F0A5                 mov     rcx, [rsp+78h+compar] ; compar
.text:000000000000F0AA                 mov     rsi, r12        ; nmemb
.text:000000000000F0AD                 mov     edx, 10h        ; size
.text:000000000000F0B2                 shl     r12, 4
.text:000000000000F0B6                 mov     rdi, r15        ; base
.text:000000000000F0B9                 mov     rbp, r15
.text:000000000000F0BC                 add     r12, r15
.text:000000000000F0BF                 call    _qsort
.text:000000000000F0C4                 mov     rdi, rbx
.text:000000000000F0C7                 xor     ebx, ebx
.text:000000000000F0C9                 call    xmalloc
.text:000000000000F0CE                 mov     r13, rax
.text:000000000000F0D1                 nop     dword ptr [rax+00000000h]
.text:000000000000F0D8
.text:000000000000F0D8 loc_F0D8:                               ; CODE XREF: streamsavedir+1D1↓j
.text:000000000000F0D8                 mov     rsi, [rbp+0]    ; src
.text:000000000000F0DC                 lea     r14, [r13+rbx+0]
.text:000000000000F0E1                 add     rbp, 10h
.text:000000000000F0E5                 mov     rdi, r14        ; dest
.text:000000000000F0E8                 call    _stpcpy
.text:000000000000F0ED                 mov     rdi, [rbp-10h]  ; ptr
.text:000000000000F0F1                 sub     rax, r14
.text:000000000000F0F4                 lea     rbx, [rbx+rax+1]
.text:000000000000F0F9                 call    free
.text:000000000000F0FE                 cmp     r12, rbp
.text:000000000000F101                 jnz     short loc_F0D8
.text:000000000000F103                 add     rbx, r13
.text:000000000000F106                 jmp     loc_F07E
.text:000000000000F106 ; ---------------------------------------------------------------------------
.text:000000000000F10B                 align 10h
.text:000000000000F110
.text:000000000000F110 loc_F110:                               ; CODE XREF: streamsavedir+131↑j
.text:000000000000F110                 cmp     [rsp+78h+var_58], r14
.text:000000000000F115                 jz      loc_F203
.text:000000000000F11B                 lea     rbx, [r13+r14+0]
.text:000000000000F120                 jmp     loc_F088
.text:000000000000F120 ; ---------------------------------------------------------------------------
.text:000000000000F125                 align 8
.text:000000000000F128
.text:000000000000F128 loc_F128:                               ; CODE XREF: streamsavedir+B5↑j
.text:000000000000F128                 mov     rsi, [rsp+78h+n]
.text:000000000000F12D                 mov     rax, [rsp+78h+var_58]
.text:000000000000F132                 mov     rdx, rsi
.text:000000000000F135                 sub     rax, r14
.text:000000000000F138                 add     rdx, r14
.text:000000000000F13B                 mov     [rsp+78h+var_48], rdx
.text:000000000000F140                 setb    dl
.text:000000000000F143                 cmp     rax, rsi
.text:000000000000F146                 movzx   edx, dl
.text:000000000000F149                 ja      short loc_F195
.text:000000000000F14B                 test    rdx, rdx
.text:000000000000F14E                 jnz     loc_F239
.text:000000000000F154                 test    r13, r13
.text:000000000000F157                 mov     rdx, [rsp+78h+var_48]
.text:000000000000F15C                 jz      loc_F21F
.text:000000000000F162                 mov     rax, 5555555555555553h
.text:000000000000F16C                 cmp     rdx, rax
.text:000000000000F16F                 ja      loc_F239
.text:000000000000F175                 mov     rax, rdx
.text:000000000000F178                 shr     rax, 1
.text:000000000000F17B                 lea     rax, [rdx+rax+1]
.text:000000000000F180                 mov     [rsp+78h+var_58], rax
.text:000000000000F185
.text:000000000000F185 loc_F185:                               ; CODE XREF: streamsavedir+303↓j
.text:000000000000F185                 mov     rsi, [rsp+78h+var_58]
.text:000000000000F18A                 mov     rdi, r13
.text:000000000000F18D                 call    xrealloc
.text:000000000000F192                 mov     r13, rax
.text:000000000000F195
.text:000000000000F195 loc_F195:                               ; CODE XREF: streamsavedir+219↑j
.text:000000000000F195                 mov     rdx, [rsp+78h+n] ; n
.text:000000000000F19A                 lea     rdi, [r13+r14+0] ; dest
.text:000000000000F19F                 mov     rsi, r15        ; src
.text:000000000000F1A2                 call    _memcpy
.text:000000000000F1A7                 mov     r14, [rsp+78h+var_48]
.text:000000000000F1AC                 jmp     loc_EF94
.text:000000000000F1B1 ; ---------------------------------------------------------------------------
.text:000000000000F1B1
.text:000000000000F1B1 loc_F1B1:                               ; CODE XREF: streamsavedir+CF↑j
.text:000000000000F1B1                 cmp     [rsp+78h+ptr], 0
.text:000000000000F1B7                 jz      loc_F265
.text:000000000000F1BD                 mov     rax, 555555555555554h
.text:000000000000F1C7                 cmp     r12, rax
.text:000000000000F1CA                 ja      short loc_F239
.text:000000000000F1CC                 mov     rax, r12
.text:000000000000F1CF                 shr     rax, 1
.text:000000000000F1D2                 add     rax, [rsp+78h+var_40]
.text:000000000000F1D7                 mov     [rsp+78h+var_50], rax
.text:000000000000F1DC
.text:000000000000F1DC loc_F1DC:                               ; CODE XREF: streamsavedir+36C↓j
.text:000000000000F1DC                 mov     rsi, [rsp+78h+var_50]
.text:000000000000F1E1                 mov     rdi, [rsp+78h+ptr]
.text:000000000000F1E6                 mov     [rsp+78h+var_48], rcx
.text:000000000000F1EB                 shl     rsi, 4
.text:000000000000F1EF                 call    xrealloc
.text:000000000000F1F4                 mov     rcx, [rsp+78h+var_48]
.text:000000000000F1F9                 mov     [rsp+78h+ptr], rax
.text:000000000000F1FE                 jmp     loc_F005
.text:000000000000F203 ; ---------------------------------------------------------------------------
.text:000000000000F203
.text:000000000000F203 loc_F203:                               ; CODE XREF: streamsavedir+1E5↑j
.text:000000000000F203                 mov     rbx, [rsp+78h+var_58]
.text:000000000000F208                 mov     rdi, r13
.text:000000000000F20B                 lea     rsi, [rbx+1]
.text:000000000000F20F                 call    xrealloc
.text:000000000000F214                 mov     r13, rax
.text:000000000000F217                 add     rbx, rax
.text:000000000000F21A                 jmp     loc_F088
.text:000000000000F21F ; ---------------------------------------------------------------------------
.text:000000000000F21F
.text:000000000000F21F loc_F21F:                               ; CODE XREF: streamsavedir+22C↑j
.text:000000000000F21F                 test    rdx, rdx
.text:000000000000F222                 mov     eax, 80h
.text:000000000000F227                 cmovnz  rax, rdx
.text:000000000000F22B                 test    rax, rax
.text:000000000000F22E                 mov     [rsp+78h+var_58], rax
.text:000000000000F233                 jns     loc_F185
.text:000000000000F239
.text:000000000000F239 loc_F239:                               ; CODE XREF: streamsavedir+21E↑j
.text:000000000000F239                                         ; streamsavedir+23F↑j ...
.text:000000000000F239                 call    xalloc_die
.text:000000000000F239 ; ---------------------------------------------------------------------------
.text:000000000000F23E                 align 20h
.text:000000000000F240
.text:000000000000F240 loc_F240:                               ; CODE XREF: streamsavedir+125↑j
.text:000000000000F240                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000F245                 call    free
.text:000000000000F24A                 mov     rdi, r13        ; ptr
.text:000000000000F24D                 xor     r13d, r13d
.text:000000000000F250                 call    free
.text:000000000000F255                 mov     [rbp+0], ebx
.text:000000000000F258                 jmp     loc_F08B
.text:000000000000F25D ; ---------------------------------------------------------------------------
.text:000000000000F25D
.text:000000000000F25D loc_F25D:                               ; CODE XREF: streamsavedir+23↑j
.text:000000000000F25D                 xor     r13d, r13d
.text:000000000000F260                 jmp     loc_F08B
.text:000000000000F265 ; ---------------------------------------------------------------------------
.text:000000000000F265
.text:000000000000F265 loc_F265:                               ; CODE XREF: streamsavedir+287↑j
.text:000000000000F265                 test    r12, r12
.text:000000000000F268                 mov     eax, 8
.text:000000000000F26D                 mov     edx, 10h
.text:000000000000F272                 cmovnz  rax, r12
.text:000000000000F276                 xor     esi, esi
.text:000000000000F278                 mov     rdi, rax
.text:000000000000F27B                 mov     [rsp+78h+var_50], rax
.text:000000000000F280                 mov     rax, rdx
.text:000000000000F283                 mul     rdi
.text:000000000000F286                 jo      short loc_F2A1
.text:000000000000F288
.text:000000000000F288 loc_F288:                               ; CODE XREF: streamsavedir+376↓j
.text:000000000000F288                 test    rax, rax
.text:000000000000F28B                 js      short loc_F239
.text:000000000000F28D                 test    rsi, rsi
.text:000000000000F290                 jnz     short loc_F239
.text:000000000000F292                 lea     rax, [r12+1]
.text:000000000000F297                 mov     [rsp+78h+var_40], rax
.text:000000000000F29C                 jmp     loc_F1DC
.text:000000000000F2A1 ; ---------------------------------------------------------------------------
.text:000000000000F2A1
.text:000000000000F2A1 loc_F2A1:                               ; CODE XREF: streamsavedir+356↑j
.text:000000000000F2A1                 mov     esi, 1
.text:000000000000F2A6                 jmp     short loc_F288
.text:000000000000F2A6 ; } // starts at EF30
.text:000000000000F2A6 streamsavedir   endp
.text:000000000000F2A6
.text:000000000000F2A6 ; ---------------------------------------------------------------------------
.text:000000000000F2A8                 align 10h
.text:000000000000F2B0
.text:000000000000F2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F2B0
.text:000000000000F2B0
.text:000000000000F2B0                 public savedir
.text:000000000000F2B0 savedir         proc near               ; CODE XREF: copy_internal+1DA7↑p
.text:000000000000F2B0 ; __unwind {
.text:000000000000F2B0                 push    r12
.text:000000000000F2B2                 push    rbp
.text:000000000000F2B3                 mov     ebp, esi
.text:000000000000F2B5                 push    rbx
.text:000000000000F2B6                 call    opendir_safer
.text:000000000000F2BB                 test    rax, rax
.text:000000000000F2BE                 jz      short loc_F2E8
.text:000000000000F2C0                 mov     esi, ebp
.text:000000000000F2C2                 mov     rbx, rax
.text:000000000000F2C5                 mov     rdi, rax        ; dirp
.text:000000000000F2C8                 call    streamsavedir
.text:000000000000F2CD                 mov     rdi, rbx        ; dirp
.text:000000000000F2D0                 mov     rbp, rax
.text:000000000000F2D3                 call    _closedir
.text:000000000000F2D8                 test    eax, eax
.text:000000000000F2DA                 jnz     short loc_F2F0
.text:000000000000F2DC
.text:000000000000F2DC loc_F2DC:                               ; CODE XREF: savedir+3A↓j
.text:000000000000F2DC                                         ; savedir+58↓j
.text:000000000000F2DC                 mov     rax, rbp
.text:000000000000F2DF                 pop     rbx
.text:000000000000F2E0                 pop     rbp
.text:000000000000F2E1                 pop     r12
.text:000000000000F2E3                 retn
.text:000000000000F2E3 ; ---------------------------------------------------------------------------
.text:000000000000F2E4                 align 8
.text:000000000000F2E8
.text:000000000000F2E8 loc_F2E8:                               ; CODE XREF: savedir+E↑j
.text:000000000000F2E8                 xor     ebp, ebp
.text:000000000000F2EA                 jmp     short loc_F2DC
.text:000000000000F2EA ; ---------------------------------------------------------------------------
.text:000000000000F2EC                 align 10h
.text:000000000000F2F0
.text:000000000000F2F0 loc_F2F0:                               ; CODE XREF: savedir+2A↑j
.text:000000000000F2F0                 call    ___errno_location
.text:000000000000F2F5                 mov     r12d, [rax]
.text:000000000000F2F8                 mov     rbx, rax
.text:000000000000F2FB                 mov     rdi, rbp        ; ptr
.text:000000000000F2FE                 call    free
.text:000000000000F303                 xor     ebp, ebp
.text:000000000000F305                 mov     [rbx], r12d
.text:000000000000F308                 jmp     short loc_F2DC
.text:000000000000F308 ; } // starts at F2B0
.text:000000000000F308 savedir         endp
.text:000000000000F308
.text:000000000000F308 ; ---------------------------------------------------------------------------
.text:000000000000F30A                 align 10h
.text:000000000000F310
.text:000000000000F310 ; =============== S U B R O U T I N E =======================================
.text:000000000000F310
.text:000000000000F310
.text:000000000000F310 ; __int64 __fastcall try_nocreate(char *filename)
.text:000000000000F310 try_nocreate    proc near               ; DATA XREF: gen_tempname_len+3D↓o
.text:000000000000F310
.text:000000000000F310 var_10          = qword ptr -10h
.text:000000000000F310
.text:000000000000F310 ; __unwind {
.text:000000000000F310                 push    rbx
.text:000000000000F311                 mov     rsi, rdi        ; filename
.text:000000000000F314                 mov     edi, 1          ; ver
.text:000000000000F319                 sub     rsp, 0A0h
.text:000000000000F320                 mov     rdx, rsp        ; stat_buf
.text:000000000000F323                 mov     rax, fs:28h
.text:000000000000F32C                 mov     [rsp+0A8h+var_10], rax
.text:000000000000F334                 xor     eax, eax
.text:000000000000F336                 call    ___lxstat
.text:000000000000F33B                 mov     ebx, eax
.text:000000000000F33D                 call    ___errno_location
.text:000000000000F342                 test    ebx, ebx
.text:000000000000F344                 jz      short loc_F360
.text:000000000000F346                 mov     edx, [rax]
.text:000000000000F348                 cmp     edx, 4Bh ; 'K'
.text:000000000000F34B                 jz      short loc_F360
.text:000000000000F34D                 xor     eax, eax
.text:000000000000F34F                 cmp     edx, 2
.text:000000000000F352                 setnz   al
.text:000000000000F355                 neg     eax
.text:000000000000F357                 jmp     short loc_F36B
.text:000000000000F357 ; ---------------------------------------------------------------------------
.text:000000000000F359                 align 20h
.text:000000000000F360
.text:000000000000F360 loc_F360:                               ; CODE XREF: try_nocreate+34↑j
.text:000000000000F360                                         ; try_nocreate+3B↑j
.text:000000000000F360                 mov     dword ptr [rax], 11h
.text:000000000000F366                 mov     eax, 0FFFFFFFFh
.text:000000000000F36B
.text:000000000000F36B loc_F36B:                               ; CODE XREF: try_nocreate+47↑j
.text:000000000000F36B                 mov     rcx, [rsp+0A8h+var_10]
.text:000000000000F373                 xor     rcx, fs:28h
.text:000000000000F37C                 jnz     short loc_F387
.text:000000000000F37E                 add     rsp, 0A0h
.text:000000000000F385                 pop     rbx
.text:000000000000F386                 retn
.text:000000000000F387 ; ---------------------------------------------------------------------------
.text:000000000000F387
.text:000000000000F387 loc_F387:                               ; CODE XREF: try_nocreate+6C↑j
.text:000000000000F387                 call    ___stack_chk_fail
.text:000000000000F387 ; } // starts at F310
.text:000000000000F387 try_nocreate    endp
.text:000000000000F387
.text:000000000000F387 ; ---------------------------------------------------------------------------
.text:000000000000F38C                 align 10h
.text:000000000000F390
.text:000000000000F390 ; =============== S U B R O U T I N E =======================================
.text:000000000000F390
.text:000000000000F390
.text:000000000000F390 try_dir         proc near               ; DATA XREF: gen_tempname_len+75↓o
.text:000000000000F390 ; __unwind {
.text:000000000000F390                 mov     esi, 1C0h       ; mode
.text:000000000000F395                 jmp     _mkdir
.text:000000000000F395 ; } // starts at F390
.text:000000000000F395 try_dir         endp
.text:000000000000F395
.text:000000000000F395 ; ---------------------------------------------------------------------------
.text:000000000000F39A                 align 20h
.text:000000000000F3A0
.text:000000000000F3A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F3A0
.text:000000000000F3A0
.text:000000000000F3A0 try_file        proc near               ; DATA XREF: gen_tempname_len+55↓o
.text:000000000000F3A0 ; __unwind {
.text:000000000000F3A0                 mov     esi, [rsi]
.text:000000000000F3A2                 mov     edx, 180h
.text:000000000000F3A7                 xor     eax, eax
.text:000000000000F3A9                 and     sil, 3Ch
.text:000000000000F3AD                 or      sil, 0C2h       ; oflag
.text:000000000000F3B1                 jmp     _open
.text:000000000000F3B1 ; } // starts at F3A0
.text:000000000000F3B1 try_file        endp
.text:000000000000F3B1
.text:000000000000F3B1 ; ---------------------------------------------------------------------------
.text:000000000000F3B6                 align 20h
.text:000000000000F3C0
.text:000000000000F3C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F3C0
.text:000000000000F3C0
.text:000000000000F3C0 ; __int64 __fastcall try_tempname_len(char *s)
.text:000000000000F3C0                 public try_tempname_len
.text:000000000000F3C0 try_tempname_len proc near              ; CODE XREF: force_linkat+96↑p
.text:000000000000F3C0                                         ; force_symlinkat+7A↑p ...
.text:000000000000F3C0
.text:000000000000F3C0 var_68          = qword ptr -68h
.text:000000000000F3C0 var_60          = qword ptr -60h
.text:000000000000F3C0 var_58          = qword ptr -58h
.text:000000000000F3C0 var_50          = qword ptr -50h
.text:000000000000F3C0 var_48          = qword ptr -48h
.text:000000000000F3C0 var_3C          = dword ptr -3Ch
.text:000000000000F3C0
.text:000000000000F3C0 ; __unwind {
.text:000000000000F3C0                 push    r15
.text:000000000000F3C2                 push    r14
.text:000000000000F3C4                 mov     r15, rdi
.text:000000000000F3C7                 push    r13
.text:000000000000F3C9                 push    r12
.text:000000000000F3CB                 mov     r14, r8
.text:000000000000F3CE                 push    rbp
.text:000000000000F3CF                 push    rbx
.text:000000000000F3D0                 mov     ebp, esi
.text:000000000000F3D2                 sub     rsp, 38h
.text:000000000000F3D6                 mov     [rsp+68h+var_50], rdx
.text:000000000000F3DB                 mov     [rsp+68h+var_68], rdi
.text:000000000000F3DF                 mov     [rsp+68h+var_48], rcx
.text:000000000000F3E4                 call    ___errno_location
.text:000000000000F3E9                 mov     [rsp+68h+var_60], rax
.text:000000000000F3EE                 mov     eax, [rax]
.text:000000000000F3F0                 mov     rdi, r15        ; s
.text:000000000000F3F3                 mov     [rsp+68h+var_3C], eax
.text:000000000000F3F7                 call    _strlen
.text:000000000000F3FC                 movsxd  rsi, ebp
.text:000000000000F3FF                 lea     rdx, [rsi+r14]
.text:000000000000F403                 cmp     rdx, rax
.text:000000000000F406                 ja      loc_F51B
.text:000000000000F40C                 sub     rax, r14
.text:000000000000F40F                 mov     rbx, rax
.text:000000000000F412                 sub     rbx, rsi
.text:000000000000F415                 lea     rsi, name+13h   ; accept
.text:000000000000F41C                 lea     rax, [r15+rbx]
.text:000000000000F420                 mov     rdi, rax        ; s
.text:000000000000F423                 mov     [rsp+68h+var_58], rax
.text:000000000000F428                 call    _strspn
.text:000000000000F42D                 cmp     r14, rax
.text:000000000000F430                 ja      loc_F51B
.text:000000000000F436                 xor     edi, edi
.text:000000000000F438                 mov     rsi, r14
.text:000000000000F43B                 call    randint_all_new
.text:000000000000F440                 test    rax, rax
.text:000000000000F443                 mov     rbp, rax
.text:000000000000F446                 jz      loc_F52D
.text:000000000000F44C                 mov     rax, [rsp+68h+var_68]
.text:000000000000F450                 lea     r12, letters    ; "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM"...
.text:000000000000F457                 mov     r13d, 3A2F8h
.text:000000000000F45D                 add     rax, r14
.text:000000000000F460                 add     rbx, rax
.text:000000000000F463                 nop     dword ptr [rax+rax+00h]
.text:000000000000F468
.text:000000000000F468 loc_F468:                               ; CODE XREF: try_tempname_len+FD↓j
.text:000000000000F468                 test    r14, r14
.text:000000000000F46B                 mov     r15, [rsp+68h+var_58]
.text:000000000000F470                 jz      short loc_F497
.text:000000000000F472                 nop     word ptr [rax+rax+00h]
.text:000000000000F478
.text:000000000000F478 loc_F478:                               ; CODE XREF: try_tempname_len+D5↓j
.text:000000000000F478                 mov     esi, 3Dh ; '='
.text:000000000000F47D                 mov     rdi, rbp
.text:000000000000F480                 add     r15, 1
.text:000000000000F484                 call    randint_genmax
.text:000000000000F489                 movzx   eax, byte ptr [r12+rax]
.text:000000000000F48E                 mov     [r15-1], al
.text:000000000000F492                 cmp     r15, rbx
.text:000000000000F495                 jnz     short loc_F478
.text:000000000000F497
.text:000000000000F497 loc_F497:                               ; CODE XREF: try_tempname_len+B0↑j
.text:000000000000F497                 mov     rsi, [rsp+68h+var_50]
.text:000000000000F49C                 mov     rdi, [rsp+68h+var_68]
.text:000000000000F4A0                 mov     rax, [rsp+68h+var_48]
.text:000000000000F4A5                 call    rax
.text:000000000000F4A7                 test    eax, eax
.text:000000000000F4A9                 mov     edx, eax
.text:000000000000F4AB                 jns     short loc_F4D9
.text:000000000000F4AD                 mov     rax, [rsp+68h+var_60]
.text:000000000000F4B2                 mov     ecx, [rax]
.text:000000000000F4B4                 cmp     ecx, 11h
.text:000000000000F4B7                 jnz     short loc_F514
.text:000000000000F4B9                 sub     r13d, 1
.text:000000000000F4BD                 jnz     short loc_F468
.text:000000000000F4BF                 mov     rdi, rbp        ; ptr
.text:000000000000F4C2                 call    randint_all_free
.text:000000000000F4C7                 mov     rax, [rsp+68h+var_60]
.text:000000000000F4CC                 mov     edx, 0FFFFFFFFh
.text:000000000000F4D1                 mov     dword ptr [rax], 11h
.text:000000000000F4D7                 jmp     short loc_F503
.text:000000000000F4D9 ; ---------------------------------------------------------------------------
.text:000000000000F4D9
.text:000000000000F4D9 loc_F4D9:                               ; CODE XREF: try_tempname_len+EB↑j
.text:000000000000F4D9                 mov     rcx, [rsp+68h+var_60]
.text:000000000000F4DE                 mov     eax, [rsp+68h+var_3C]
.text:000000000000F4E2                 mov     [rcx], eax
.text:000000000000F4E4                 mov     ecx, eax
.text:000000000000F4E6
.text:000000000000F4E6 loc_F4E6:                               ; CODE XREF: try_tempname_len+159↓j
.text:000000000000F4E6                 mov     rdi, rbp        ; ptr
.text:000000000000F4E9                 mov     dword ptr [rsp+68h+var_58], edx
.text:000000000000F4ED                 mov     dword ptr [rsp+68h+var_68], ecx
.text:000000000000F4F0                 call    randint_all_free
.text:000000000000F4F5                 mov     rax, [rsp+68h+var_60]
.text:000000000000F4FA                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:000000000000F4FD                 mov     edx, dword ptr [rsp+68h+var_58]
.text:000000000000F501                 mov     [rax], ecx
.text:000000000000F503
.text:000000000000F503 loc_F503:                               ; CODE XREF: try_tempname_len+117↑j
.text:000000000000F503                                         ; try_tempname_len+16B↓j ...
.text:000000000000F503                 add     rsp, 38h
.text:000000000000F507                 mov     eax, edx
.text:000000000000F509                 pop     rbx
.text:000000000000F50A                 pop     rbp
.text:000000000000F50B                 pop     r12
.text:000000000000F50D                 pop     r13
.text:000000000000F50F                 pop     r14
.text:000000000000F511                 pop     r15
.text:000000000000F513                 retn
.text:000000000000F514 ; ---------------------------------------------------------------------------
.text:000000000000F514
.text:000000000000F514 loc_F514:                               ; CODE XREF: try_tempname_len+F7↑j
.text:000000000000F514                 mov     edx, 0FFFFFFFFh
.text:000000000000F519                 jmp     short loc_F4E6
.text:000000000000F51B ; ---------------------------------------------------------------------------
.text:000000000000F51B
.text:000000000000F51B loc_F51B:                               ; CODE XREF: try_tempname_len+46↑j
.text:000000000000F51B                                         ; try_tempname_len+70↑j
.text:000000000000F51B                 mov     rax, [rsp+68h+var_60]
.text:000000000000F520                 mov     edx, 0FFFFFFFFh
.text:000000000000F525                 mov     dword ptr [rax], 16h
.text:000000000000F52B                 jmp     short loc_F503
.text:000000000000F52D ; ---------------------------------------------------------------------------
.text:000000000000F52D
.text:000000000000F52D loc_F52D:                               ; CODE XREF: try_tempname_len+86↑j
.text:000000000000F52D                 mov     edx, 0FFFFFFFFh
.text:000000000000F532                 jmp     short loc_F503
.text:000000000000F532 ; } // starts at F3C0
.text:000000000000F532 try_tempname_len endp
.text:000000000000F532
.text:000000000000F532 ; ---------------------------------------------------------------------------
.text:000000000000F534                 align 20h
.text:000000000000F540
.text:000000000000F540 ; =============== S U B R O U T I N E =======================================
.text:000000000000F540
.text:000000000000F540
.text:000000000000F540                 public gen_tempname_len
.text:000000000000F540 gen_tempname_len proc near              ; CODE XREF: gen_tempname+6↓j
.text:000000000000F540
.text:000000000000F540 var_C           = dword ptr -0Ch
.text:000000000000F540
.text:000000000000F540 ; __unwind {
.text:000000000000F540                 sub     rsp, 18h
.text:000000000000F544                 cmp     ecx, 1
.text:000000000000F547                 mov     [rsp+18h+var_C], edx
.text:000000000000F54B                 jz      short loc_F5B0
.text:000000000000F54D                 cmp     ecx, 2
.text:000000000000F550                 jz      short loc_F578
.text:000000000000F552                 test    ecx, ecx
.text:000000000000F554                 jz      short loc_F590
.text:000000000000F556                 lea     rcx, __PRETTY_FUNCTION___5642 ; "gen_tempname_len"
.text:000000000000F55D                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/tempname.c"
.text:000000000000F564                 lea     rdi, s          ; "! \"invalid KIND in __gen_tempname\""
.text:000000000000F56B                 mov     edx, 147h       ; line
.text:000000000000F570                 call    ___assert_fail
.text:000000000000F570 ; ---------------------------------------------------------------------------
.text:000000000000F575                 align 8
.text:000000000000F578
.text:000000000000F578 loc_F578:                               ; CODE XREF: gen_tempname_len+10↑j
.text:000000000000F578                 lea     rdx, [rsp+18h+var_C]
.text:000000000000F57D                 lea     rcx, try_nocreate
.text:000000000000F584                 call    try_tempname_len
.text:000000000000F589                 add     rsp, 18h
.text:000000000000F58D                 retn
.text:000000000000F58D ; ---------------------------------------------------------------------------
.text:000000000000F58E                 align 10h
.text:000000000000F590
.text:000000000000F590 loc_F590:                               ; CODE XREF: gen_tempname_len+14↑j
.text:000000000000F590                 lea     rdx, [rsp+18h+var_C]
.text:000000000000F595                 lea     rcx, try_file
.text:000000000000F59C                 call    try_tempname_len
.text:000000000000F5A1                 add     rsp, 18h
.text:000000000000F5A5                 retn
.text:000000000000F5A5 ; ---------------------------------------------------------------------------
.text:000000000000F5A6                 align 10h
.text:000000000000F5B0
.text:000000000000F5B0 loc_F5B0:                               ; CODE XREF: gen_tempname_len+B↑j
.text:000000000000F5B0                 lea     rdx, [rsp+18h+var_C]
.text:000000000000F5B5                 lea     rcx, try_dir
.text:000000000000F5BC                 call    try_tempname_len
.text:000000000000F5C1                 add     rsp, 18h
.text:000000000000F5C5                 retn
.text:000000000000F5C5 ; } // starts at F540
.text:000000000000F5C5 gen_tempname_len endp
.text:000000000000F5C5
.text:000000000000F5C5 ; ---------------------------------------------------------------------------
.text:000000000000F5C6                 align 10h
.text:000000000000F5D0
.text:000000000000F5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F5D0
.text:000000000000F5D0
.text:000000000000F5D0                 public gen_tempname
.text:000000000000F5D0 gen_tempname    proc near
.text:000000000000F5D0 ; __unwind {
.text:000000000000F5D0                 mov     r8d, 6
.text:000000000000F5D6                 jmp     gen_tempname_len
.text:000000000000F5D6 ; } // starts at F5D0
.text:000000000000F5D6 gen_tempname    endp
.text:000000000000F5D6
.text:000000000000F5D6 ; ---------------------------------------------------------------------------
.text:000000000000F5DB                 align 20h
.text:000000000000F5E0
.text:000000000000F5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F5E0
.text:000000000000F5E0
.text:000000000000F5E0                 public try_tempname
.text:000000000000F5E0 try_tempname    proc near
.text:000000000000F5E0 ; __unwind {
.text:000000000000F5E0                 mov     r8d, 6
.text:000000000000F5E6                 jmp     try_tempname_len
.text:000000000000F5E6 ; } // starts at F5E0
.text:000000000000F5E6 try_tempname    endp
.text:000000000000F5E6
.text:000000000000F5E6 ; ---------------------------------------------------------------------------
.text:000000000000F5EB                 align 10h
.text:000000000000F5F0
.text:000000000000F5F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F5F0
.text:000000000000F5F0 ; Attributes: info_from_lumina
.text:000000000000F5F0
.text:000000000000F5F0 ; __int64 __fastcall fd_safer_flag(int fd)
.text:000000000000F5F0                 public fd_safer_flag
.text:000000000000F5F0 fd_safer_flag   proc near               ; CODE XREF: open_safer+2A↑p
.text:000000000000F5F0                                         ; openat_safer+29↓p
.text:000000000000F5F0 ; __unwind {
.text:000000000000F5F0                 push    r13
.text:000000000000F5F2                 push    r12
.text:000000000000F5F4                 push    rbp
.text:000000000000F5F5                 push    rbx
.text:000000000000F5F6                 mov     ebx, edi
.text:000000000000F5F8                 sub     rsp, 8
.text:000000000000F5FC                 cmp     edi, 2
.text:000000000000F5FF                 ja      short loc_F622
.text:000000000000F601                 call    dup_safer
.text:000000000000F606                 mov     r12d, eax
.text:000000000000F609                 call    ___errno_location
.text:000000000000F60E                 mov     r13d, [rax]
.text:000000000000F611                 mov     rbp, rax
.text:000000000000F614                 mov     edi, ebx        ; fd
.text:000000000000F616                 call    _close
.text:000000000000F61B                 mov     ebx, r12d
.text:000000000000F61E                 mov     [rbp+0], r13d
.text:000000000000F622
.text:000000000000F622 loc_F622:                               ; CODE XREF: fd_safer_flag+F↑j
.text:000000000000F622                 add     rsp, 8
.text:000000000000F626                 mov     eax, ebx
.text:000000000000F628                 pop     rbx
.text:000000000000F629                 pop     rbp
.text:000000000000F62A                 pop     r12
.text:000000000000F62C                 pop     r13
.text:000000000000F62E                 retn
.text:000000000000F62E ; } // starts at F5F0
.text:000000000000F62E fd_safer_flag   endp
.text:000000000000F62E
.text:000000000000F62E ; ---------------------------------------------------------------------------
.text:000000000000F62F                 align 10h
.text:000000000000F630
.text:000000000000F630 ; =============== S U B R O U T I N E =======================================
.text:000000000000F630
.text:000000000000F630
.text:000000000000F630 dev_info_hash   proc near               ; DATA XREF: utimecmpat+637↓o
.text:000000000000F630 ; __unwind {
.text:000000000000F630                 mov     rax, [rdi]
.text:000000000000F633                 xor     edx, edx
.text:000000000000F635                 div     rsi
.text:000000000000F638                 mov     rax, rdx
.text:000000000000F63B                 retn
.text:000000000000F63B ; } // starts at F630
.text:000000000000F63B dev_info_hash   endp
.text:000000000000F63B
.text:000000000000F63B ; ---------------------------------------------------------------------------
.text:000000000000F63C                 align 20h
.text:000000000000F640
.text:000000000000F640 ; =============== S U B R O U T I N E =======================================
.text:000000000000F640
.text:000000000000F640
.text:000000000000F640 dev_info_compare proc near              ; DATA XREF: utimecmpat+63E↓o
.text:000000000000F640 ; __unwind {
.text:000000000000F640                 mov     rax, [rsi]
.text:000000000000F643                 cmp     [rdi], rax
.text:000000000000F646                 setz    al
.text:000000000000F649                 retn
.text:000000000000F649 ; } // starts at F640
.text:000000000000F649 dev_info_compare endp
.text:000000000000F649
.text:000000000000F649 ; ---------------------------------------------------------------------------
.text:000000000000F64A                 align 10h
.text:000000000000F650
.text:000000000000F650 ; =============== S U B R O U T I N E =======================================
.text:000000000000F650
.text:000000000000F650
.text:000000000000F650                 public utimecmpat
.text:000000000000F650 utimecmpat      proc near               ; CODE XREF: utimecmp+11↓j
.text:000000000000F650
.text:000000000000F650 filename        = qword ptr -150h
.text:000000000000F650 var_148         = qword ptr -148h
.text:000000000000F650 var_140         = qword ptr -140h
.text:000000000000F650 fd              = dword ptr -138h
.text:000000000000F650 path            = qword ptr -130h
.text:000000000000F650 var_128         = qword ptr -128h
.text:000000000000F650 fildes          = dword ptr -120h
.text:000000000000F650 var_11C         = dword ptr -11Ch
.text:000000000000F650 var_118         = qword ptr -118h
.text:000000000000F650 var_110         = qword ptr -110h
.text:000000000000F650 var_108         = qword ptr -108h
.text:000000000000F650 var_100         = dword ptr -100h
.text:000000000000F650 var_FC          = byte ptr -0FCh
.text:000000000000F650 times           = timespec ptr -0F8h
.text:000000000000F650 var_E8          = qword ptr -0E8h
.text:000000000000F650 var_E0          = qword ptr -0E0h
.text:000000000000F650 stat_buf        = stat ptr -0D8h
.text:000000000000F650 var_40          = qword ptr -40h
.text:000000000000F650
.text:000000000000F650 ; __unwind {
.text:000000000000F650                 push    r15
.text:000000000000F652                 push    r14
.text:000000000000F654                 push    r13
.text:000000000000F656                 push    r12
.text:000000000000F658                 push    rbp
.text:000000000000F659                 push    rbx
.text:000000000000F65A                 mov     ebx, r8d
.text:000000000000F65D                 and     ebx, 1
.text:000000000000F660                 sub     rsp, 128h
.text:000000000000F667                 mov     r13, [rcx+60h]
.text:000000000000F66B                 mov     r14, [rdx+58h]
.text:000000000000F66F                 mov     rax, fs:28h
.text:000000000000F678                 mov     [rsp+158h+var_40], rax
.text:000000000000F680                 xor     eax, eax
.text:000000000000F682                 test    ebx, ebx
.text:000000000000F684                 mov     r12, [rcx+58h]
.text:000000000000F688                 mov     r15, [rdx+60h]
.text:000000000000F68C                 mov     r9d, r13d
.text:000000000000F68F                 jz      loc_F778
.text:000000000000F695                 cmp     r14, r12
.text:000000000000F698                 mov     r10d, edi
.text:000000000000F69B                 setz    byte ptr [rsp+158h+fildes]
.text:000000000000F6A0                 movzx   edi, byte ptr [rsp+158h+fildes]
.text:000000000000F6A5                 cmp     r15d, r13d
.text:000000000000F6A8                 setz    al
.text:000000000000F6AB                 and     al, dil
.text:000000000000F6AE                 mov     byte ptr [rsp+158h+filename], al
.text:000000000000F6B2                 jnz     loc_F7C0
.text:000000000000F6B8                 lea     rax, [r12-1]
.text:000000000000F6BD                 cmp     rax, r14
.text:000000000000F6C0                 jg      loc_F7C8
.text:000000000000F6C6                 lea     rax, [r14-1]
.text:000000000000F6CA                 cmp     rax, r12
.text:000000000000F6CD                 jg      loc_F78F
.text:000000000000F6D3                 mov     rbp, rdx
.text:000000000000F6D6                 mov     rdx, cs:ht_5307
.text:000000000000F6DD                 mov     r11, rsi
.text:000000000000F6E0                 test    rdx, rdx
.text:000000000000F6E3                 jz      loc_FC80
.text:000000000000F6E9
.text:000000000000F6E9 loc_F6E9:                               ; CODE XREF: utimecmpat+67C↓j
.text:000000000000F6E9                 mov     rsi, cs:new_dst_res_5308
.text:000000000000F6F0                 test    rsi, rsi
.text:000000000000F6F3                 jz      loc_F7D0
.text:000000000000F6F9
.text:000000000000F6F9 loc_F6F9:                               ; CODE XREF: utimecmpat+1CC↓j
.text:000000000000F6F9                 mov     rax, [rbp+0]
.text:000000000000F6FD                 mov     rdi, rdx
.text:000000000000F700                 mov     [rsp+158h+path], r11
.text:000000000000F705                 mov     [rsp+158h+fd], r10d
.text:000000000000F70A                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000F70F                 mov     [rsi], rax
.text:000000000000F712                 call    hash_insert
.text:000000000000F717                 test    rax, rax
.text:000000000000F71A                 mov     [rsp+158h+var_148], rax
.text:000000000000F71F                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000F724                 mov     r10d, [rsp+158h+fd]
.text:000000000000F729                 mov     r11, [rsp+158h+path]
.text:000000000000F72E                 jz      loc_F828
.text:000000000000F734                 cmp     cs:new_dst_res_5308, rax
.text:000000000000F73B                 jz      loc_FCE0
.text:000000000000F741
.text:000000000000F741 loc_F741:                               ; CODE XREF: utimecmpat+231↓j
.text:000000000000F741                                         ; utimecmpat+69B↓j
.text:000000000000F741                 mov     rax, [rsp+158h+var_148]
.text:000000000000F746                 cmp     byte ptr [rax+0Ch], 0
.text:000000000000F74A                 mov     esi, [rax+8]
.text:000000000000F74D                 mov     dword ptr [rsp+158h+var_140], esi
.text:000000000000F751                 jz      loc_F8AA
.text:000000000000F757                 xor     eax, eax
.text:000000000000F759                 cmp     esi, 77359400h
.text:000000000000F75F                 setz    al
.text:000000000000F762                 not     eax
.text:000000000000F764                 cdqe
.text:000000000000F766                 and     r12, rax
.text:000000000000F769                 mov     eax, r9d
.text:000000000000F76C                 mov     r9d, r13d
.text:000000000000F76F                 cdq
.text:000000000000F770                 idiv    esi
.text:000000000000F772                 sub     r9d, edx
.text:000000000000F775                 nop     dword ptr [rax]
.text:000000000000F778
.text:000000000000F778 loc_F778:                               ; CODE XREF: utimecmpat+3F↑j
.text:000000000000F778                                         ; utimecmpat+624↓j
.text:000000000000F778                 cmp     r12, r14
.text:000000000000F77B                 jg      short loc_F7C8
.text:000000000000F77D                 mov     ebx, 1
.text:000000000000F782                 jl      short loc_F78F
.text:000000000000F784                 cmp     r9d, r15d
.text:000000000000F787                 jg      short loc_F7C8
.text:000000000000F789                 setl    bl
.text:000000000000F78C                 movzx   ebx, bl
.text:000000000000F78F
.text:000000000000F78F loc_F78F:                               ; CODE XREF: utimecmpat+7D↑j
.text:000000000000F78F                                         ; utimecmpat+132↑j ...
.text:000000000000F78F                 mov     rsi, [rsp+158h+var_40]
.text:000000000000F797                 xor     rsi, fs:28h
.text:000000000000F7A0                 mov     eax, ebx
.text:000000000000F7A2                 jnz     loc_FD78
.text:000000000000F7A8                 add     rsp, 128h
.text:000000000000F7AF                 pop     rbx
.text:000000000000F7B0                 pop     rbp
.text:000000000000F7B1                 pop     r12
.text:000000000000F7B3                 pop     r13
.text:000000000000F7B5                 pop     r14
.text:000000000000F7B7                 pop     r15
.text:000000000000F7B9                 retn
.text:000000000000F7B9 ; ---------------------------------------------------------------------------
.text:000000000000F7BA                 align 20h
.text:000000000000F7C0
.text:000000000000F7C0 loc_F7C0:                               ; CODE XREF: utimecmpat+62↑j
.text:000000000000F7C0                 xor     ebx, ebx
.text:000000000000F7C2                 jmp     short loc_F78F
.text:000000000000F7C2 ; ---------------------------------------------------------------------------
.text:000000000000F7C4                 align 8
.text:000000000000F7C8
.text:000000000000F7C8 loc_F7C8:                               ; CODE XREF: utimecmpat+70↑j
.text:000000000000F7C8                                         ; utimecmpat+12B↑j ...
.text:000000000000F7C8                 mov     ebx, 0FFFFFFFFh
.text:000000000000F7CD                 jmp     short loc_F78F
.text:000000000000F7CD ; ---------------------------------------------------------------------------
.text:000000000000F7CF                 align 10h
.text:000000000000F7D0
.text:000000000000F7D0 loc_F7D0:                               ; CODE XREF: utimecmpat+A3↑j
.text:000000000000F7D0                 mov     edi, 10h        ; size
.text:000000000000F7D5                 mov     [rsp+158h+path], r11
.text:000000000000F7DA                 mov     [rsp+158h+fd], r10d
.text:000000000000F7DF                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000F7E4                 mov     [rsp+158h+var_148], rdx
.text:000000000000F7E9                 call    _malloc
.text:000000000000F7EE                 test    rax, rax
.text:000000000000F7F1                 mov     rsi, rax
.text:000000000000F7F4                 mov     cs:new_dst_res_5308, rax
.text:000000000000F7FB                 mov     rdx, [rsp+158h+var_148]
.text:000000000000F800                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000F805                 mov     r10d, [rsp+158h+fd]
.text:000000000000F80A                 mov     r11, [rsp+158h+path]
.text:000000000000F80F                 jz      short loc_F838
.text:000000000000F811                 mov     dword ptr [rax+8], 77359400h
.text:000000000000F818                 mov     byte ptr [rax+0Ch], 0
.text:000000000000F81C                 jmp     loc_F6F9
.text:000000000000F81C ; ---------------------------------------------------------------------------
.text:000000000000F821                 align 8
.text:000000000000F828
.text:000000000000F828 loc_F828:                               ; CODE XREF: utimecmpat+DE↑j
.text:000000000000F828                 mov     rdx, cs:ht_5307
.text:000000000000F82F                 test    rdx, rdx
.text:000000000000F832                 jz      loc_FCD2
.text:000000000000F838
.text:000000000000F838 loc_F838:                               ; CODE XREF: utimecmpat+1BF↑j
.text:000000000000F838                 lea     rcx, [rsp+158h+var_108]
.text:000000000000F83D                 mov     rax, [rbp+0]
.text:000000000000F841                 mov     rdi, rdx
.text:000000000000F844                 mov     [rsp+158h+var_128], r11
.text:000000000000F849                 mov     dword ptr [rsp+158h+path], r10d
.text:000000000000F84E                 mov     rsi, rcx
.text:000000000000F851                 mov     [rsp+158h+fd], r9d
.text:000000000000F856                 mov     [rsp+158h+var_140], rcx
.text:000000000000F85B                 mov     [rsp+158h+var_108], rax
.text:000000000000F860                 call    hash_lookup
.text:000000000000F865                 test    rax, rax
.text:000000000000F868                 mov     [rsp+158h+var_148], rax
.text:000000000000F86D                 mov     rcx, [rsp+158h+var_140]
.text:000000000000F872                 mov     r9d, [rsp+158h+fd]
.text:000000000000F877                 mov     r10d, dword ptr [rsp+158h+path]
.text:000000000000F87C                 mov     r11, [rsp+158h+var_128]
.text:000000000000F881                 jnz     loc_F741
.text:000000000000F887                 nop     word ptr [rax+rax+00000000h]
.text:000000000000F890
.text:000000000000F890 loc_F890:                               ; CODE XREF: utimecmpat+687↓j
.text:000000000000F890                 mov     [rsp+158h+var_100], 77359400h
.text:000000000000F898                 mov     [rsp+158h+var_FC], 0
.text:000000000000F89D                 mov     dword ptr [rsp+158h+var_140], 77359400h
.text:000000000000F8A5                 mov     [rsp+158h+var_148], rcx
.text:000000000000F8AA
.text:000000000000F8AA loc_F8AA:                               ; CODE XREF: utimecmpat+101↑j
.text:000000000000F8AA                 mov     rcx, [rbp+50h]
.text:000000000000F8AE                 mov     eax, 66666667h
.text:000000000000F8B3                 mov     rsi, [rbp+70h]
.text:000000000000F8B7                 imul    ecx
.text:000000000000F8B9                 mov     eax, ecx
.text:000000000000F8BB                 mov     [rsp+158h+path], rcx
.text:000000000000F8C0                 sar     eax, 1Fh
.text:000000000000F8C3                 sar     edx, 2
.text:000000000000F8C6                 sub     edx, eax
.text:000000000000F8C8                 lea     eax, [rdx+rdx*4]
.text:000000000000F8CB                 mov     [rsp+158h+fd], edx
.text:000000000000F8CF                 add     eax, eax
.text:000000000000F8D1                 sub     ecx, eax
.text:000000000000F8D3                 mov     eax, 66666667h
.text:000000000000F8D8                 imul    esi
.text:000000000000F8DA                 mov     eax, esi
.text:000000000000F8DC                 sar     eax, 1Fh
.text:000000000000F8DF                 sar     edx, 2
.text:000000000000F8E2                 mov     edi, edx
.text:000000000000F8E4                 sub     edi, eax
.text:000000000000F8E6                 lea     eax, [rdi+rdi*4]
.text:000000000000F8E9                 add     eax, eax
.text:000000000000F8EB                 sub     esi, eax
.text:000000000000F8ED                 mov     eax, 66666667h
.text:000000000000F8F2                 imul    r15d
.text:000000000000F8F5                 mov     eax, r15d
.text:000000000000F8F8                 or      ecx, esi
.text:000000000000F8FA                 sar     eax, 1Fh
.text:000000000000F8FD                 mov     esi, r15d
.text:000000000000F900                 sar     edx, 2
.text:000000000000F903                 mov     r8d, edx
.text:000000000000F906                 sub     r8d, eax
.text:000000000000F909                 lea     eax, [r8+r8*4]
.text:000000000000F90D                 add     eax, eax
.text:000000000000F90F                 sub     esi, eax
.text:000000000000F911                 or      ecx, esi
.text:000000000000F913                 jnz     loc_FC68
.text:000000000000F919                 cmp     dword ptr [rsp+158h+var_140], 0Ah
.text:000000000000F91E                 mov     rax, [rbp+48h]
.text:000000000000F922                 mov     ecx, edi
.text:000000000000F924                 mov     edx, [rsp+158h+fd]
.text:000000000000F928                 mov     esi, r8d
.text:000000000000F92B                 mov     [rsp+158h+var_110], rax
.text:000000000000F930                 mov     dword ptr [rsp+158h+var_128], edx
.text:000000000000F934                 jle     loc_FD48
.text:000000000000F93A                 mov     eax, 66666667h
.text:000000000000F93F                 imul    edi
.text:000000000000F941                 mov     eax, edi
.text:000000000000F943                 sar     eax, 1Fh
.text:000000000000F946                 sar     edx, 2
.text:000000000000F949                 sub     edx, eax
.text:000000000000F94B                 lea     eax, [rdx+rdx*4]
.text:000000000000F94E                 add     eax, eax
.text:000000000000F950                 sub     edi, eax
.text:000000000000F952                 mov     eax, 66666667h
.text:000000000000F957                 imul    [rsp+158h+fd]
.text:000000000000F95B                 mov     eax, [rsp+158h+fd]
.text:000000000000F95F                 sar     eax, 1Fh
.text:000000000000F962                 sar     edx, 2
.text:000000000000F965                 sub     edx, eax
.text:000000000000F967                 lea     eax, [rdx+rdx*4]
.text:000000000000F96A                 mov     edx, [rsp+158h+fd]
.text:000000000000F96E                 mov     [rsp+158h+fd], 0Ah
.text:000000000000F976                 add     eax, eax
.text:000000000000F978                 sub     edx, eax
.text:000000000000F97A                 mov     eax, 66666667h
.text:000000000000F97F                 or      edi, edx
.text:000000000000F981                 imul    r8d
.text:000000000000F984                 mov     eax, r8d
.text:000000000000F987                 mov     [rsp+158h+var_11C], edi
.text:000000000000F98B                 sar     eax, 1Fh
.text:000000000000F98E                 mov     edi, 66666667h
.text:000000000000F993                 sar     edx, 2
.text:000000000000F996                 sub     edx, eax
.text:000000000000F998                 lea     eax, [rdx+rdx*4]
.text:000000000000F99B                 mov     edx, 8
.text:000000000000F9A0                 add     eax, eax
.text:000000000000F9A2                 sub     r8d, eax
.text:000000000000F9A5                 mov     eax, [rsp+158h+var_11C]
.text:000000000000F9A9                 or      eax, r8d
.text:000000000000F9AC                 jnz     loc_FD64
.text:000000000000F9B2                 mov     [rsp+158h+var_11C], r9d
.text:000000000000F9B7                 mov     [rsp+158h+var_118], r14
.text:000000000000F9BC                 mov     r9d, 0Ah
.text:000000000000F9C2                 mov     r8d, dword ptr [rsp+158h+var_128]
.text:000000000000F9C7                 mov     qword ptr [rsp+158h+fd], r12
.text:000000000000F9CC                 mov     r14d, edx
.text:000000000000F9CF                 mov     [rsp+158h+var_128], rbp
.text:000000000000F9D4
.text:000000000000F9D4 loc_F9D4:                               ; CODE XREF: utimecmpat+41E↓j
.text:000000000000F9D4                 mov     eax, r8d
.text:000000000000F9D7                 sar     r8d, 1Fh
.text:000000000000F9DB                 lea     ebp, [r9+r9*4]
.text:000000000000F9DF                 imul    edi
.text:000000000000F9E1                 mov     eax, ecx
.text:000000000000F9E3                 sar     ecx, 1Fh
.text:000000000000F9E6                 add     ebp, ebp
.text:000000000000F9E8                 mov     r9d, ebp
.text:000000000000F9EB                 sar     edx, 2
.text:000000000000F9EE                 sub     edx, r8d
.text:000000000000F9F1                 mov     r8d, edx
.text:000000000000F9F4                 imul    edi
.text:000000000000F9F6                 mov     eax, esi
.text:000000000000F9F8                 sar     esi, 1Fh
.text:000000000000F9FB                 sar     edx, 2
.text:000000000000F9FE                 sub     edx, ecx
.text:000000000000FA00                 mov     ecx, edx
.text:000000000000FA02                 imul    edi
.text:000000000000FA04                 sar     edx, 2
.text:000000000000FA07                 sub     edx, esi
.text:000000000000FA09                 cmp     ebp, dword ptr [rsp+158h+var_140]
.text:000000000000FA0D                 mov     esi, edx
.text:000000000000FA0F                 jge     loc_FCF0
.text:000000000000FA15                 mov     eax, r8d
.text:000000000000FA18                 mov     r12d, r8d
.text:000000000000FA1B                 imul    edi
.text:000000000000FA1D                 mov     eax, r8d
.text:000000000000FA20                 sar     eax, 1Fh
.text:000000000000FA23                 sar     edx, 2
.text:000000000000FA26                 sub     edx, eax
.text:000000000000FA28                 lea     eax, [rdx+rdx*4]
.text:000000000000FA2B                 add     eax, eax
.text:000000000000FA2D                 sub     r12d, eax
.text:000000000000FA30                 mov     eax, ecx
.text:000000000000FA32                 imul    edi
.text:000000000000FA34                 mov     eax, ecx
.text:000000000000FA36                 sar     eax, 1Fh
.text:000000000000FA39                 sar     edx, 2
.text:000000000000FA3C                 sub     edx, eax
.text:000000000000FA3E                 lea     eax, [rdx+rdx*4]
.text:000000000000FA41                 mov     edx, ecx
.text:000000000000FA43                 add     eax, eax
.text:000000000000FA45                 sub     edx, eax
.text:000000000000FA47                 mov     eax, esi
.text:000000000000FA49                 or      r12d, edx
.text:000000000000FA4C                 imul    edi
.text:000000000000FA4E                 mov     eax, esi
.text:000000000000FA50                 sar     eax, 1Fh
.text:000000000000FA53                 sar     edx, 2
.text:000000000000FA56                 sub     edx, eax
.text:000000000000FA58                 lea     eax, [rdx+rdx*4]
.text:000000000000FA5B                 mov     edx, esi
.text:000000000000FA5D                 add     eax, eax
.text:000000000000FA5F                 sub     edx, eax
.text:000000000000FA61                 or      r12d, edx
.text:000000000000FA64                 jnz     loc_FCF0
.text:000000000000FA6A                 sub     r14d, 1
.text:000000000000FA6E                 jnz     loc_F9D4
.text:000000000000FA74                 mov     r14, [rsp+158h+var_118]
.text:000000000000FA79                 mov     rbp, [rsp+158h+var_128]
.text:000000000000FA7E                 mov     rax, [rsp+158h+var_110]
.text:000000000000FA83                 mov     r12, qword ptr [rsp+158h+fd]
.text:000000000000FA88                 mov     r9d, [rsp+158h+var_11C]
.text:000000000000FA8D                 or      rax, r14
.text:000000000000FA90                 or      rax, [rbp+68h]
.text:000000000000FA94                 test    al, 1
.text:000000000000FA96                 mov     rax, [rsp+158h+var_148]
.text:000000000000FA9B                 jz      loc_FD28
.text:000000000000FAA1                 mov     dword ptr [rax+8], 3B9ACA00h
.text:000000000000FAA8                 mov     [rsp+158h+fd], 3B9ACA00h
.text:000000000000FAB0                 mov     rax, r12
.text:000000000000FAB3
.text:000000000000FAB3 loc_FAB3:                               ; CODE XREF: utimecmpat+6D3↓j
.text:000000000000FAB3                                         ; utimecmpat+6F3↓j ...
.text:000000000000FAB3                 cmp     r14, r12
.text:000000000000FAB6                 jg      loc_F78F
.text:000000000000FABC                 cmp     r15d, r13d
.text:000000000000FABF                 jl      short loc_FACC
.text:000000000000FAC1                 cmp     byte ptr [rsp+158h+fildes], 0
.text:000000000000FAC6                 jnz     loc_F78F
.text:000000000000FACC
.text:000000000000FACC loc_FACC:                               ; CODE XREF: utimecmpat+46F↑j
.text:000000000000FACC                 cmp     r14, rax
.text:000000000000FACF                 jl      loc_F7C8
.text:000000000000FAD5                 jnz     short loc_FAED
.text:000000000000FAD7                 mov     eax, r9d
.text:000000000000FADA                 cdq
.text:000000000000FADB                 idiv    [rsp+158h+fd]
.text:000000000000FADF                 mov     eax, r13d
.text:000000000000FAE2                 sub     eax, edx
.text:000000000000FAE4                 cmp     eax, r15d
.text:000000000000FAE7                 jg      loc_F7C8
.text:000000000000FAED
.text:000000000000FAED loc_FAED:                               ; CODE XREF: utimecmpat+485↑j
.text:000000000000FAED                 mov     rax, [rsp+158h+var_110]
.text:000000000000FAF2                 mov     edx, 38E38E39h
.text:000000000000FAF7                 lea     rbp, [rsp+158h+times]
.text:000000000000FAFC                 mov     rsi, r11        ; path
.text:000000000000FAFF                 mov     edi, r10d       ; fd
.text:000000000000FB02                 mov     ecx, 100h       ; flags
.text:000000000000FB07                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000FB0C                 mov     [rsp+158h+fildes], r10d
.text:000000000000FB11                 mov     [rsp+158h+times.tv_sec], rax
.text:000000000000FB16                 movsxd  rax, dword ptr [rsp+158h+path]
.text:000000000000FB1B                 mov     [rsp+158h+times.tv_nsec], rax
.text:000000000000FB20                 movzx   eax, byte ptr [rsp+158h+filename]
.text:000000000000FB25                 mov     [rsp+158h+filename], r11
.text:000000000000FB2A                 or      rax, r14
.text:000000000000FB2D                 mov     [rsp+158h+var_E8], rax
.text:000000000000FB32                 mov     eax, [rsp+158h+fd]
.text:000000000000FB36                 mul     edx
.text:000000000000FB38                 mov     eax, edx
.text:000000000000FB3A                 mov     rdx, rbp        ; times
.text:000000000000FB3D                 shr     eax, 1
.text:000000000000FB3F                 add     eax, r15d
.text:000000000000FB42                 cdqe
.text:000000000000FB44                 mov     [rsp+158h+var_E0], rax
.text:000000000000FB49                 call    _utimensat
.text:000000000000FB4E                 test    eax, eax
.text:000000000000FB50                 mov     r10d, [rsp+158h+fildes]
.text:000000000000FB55                 mov     r11, [rsp+158h+filename]
.text:000000000000FB5A                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000FB5F                 jz      short loc_FB6B
.text:000000000000FB61
.text:000000000000FB61 loc_FB61:                               ; CODE XREF: utimecmpat+761↓j
.text:000000000000FB61                 mov     ebx, 0FFFFFFFEh
.text:000000000000FB66                 jmp     loc_F78F
.text:000000000000FB6B ; ---------------------------------------------------------------------------
.text:000000000000FB6B
.text:000000000000FB6B loc_FB6B:                               ; CODE XREF: utimecmpat+50F↑j
.text:000000000000FB6B                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000FB73                 mov     rdx, r11        ; filename
.text:000000000000FB76                 mov     r8d, 100h       ; flag
.text:000000000000FB7C                 mov     esi, r10d       ; fildes
.text:000000000000FB7F                 mov     edi, 1          ; ver
.text:000000000000FB84                 mov     dword ptr [rsp+158h+var_140], r9d
.text:000000000000FB89                 mov     [rsp+158h+filename], r11
.text:000000000000FB8E                 mov     [rsp+158h+fildes], r10d
.text:000000000000FB93                 call    ___fxstatat
.text:000000000000FB98                 mov     rcx, [rsp+158h+stat_buf.st_mtim.tv_nsec]
.text:000000000000FBA0                 mov     r8d, eax
.text:000000000000FBA3                 mov     rax, [rsp+158h+stat_buf.st_mtim.tv_sec]
.text:000000000000FBAB                 movsxd  rdx, r15d
.text:000000000000FBAE                 mov     r10d, [rsp+158h+fildes]
.text:000000000000FBB3                 mov     r11, [rsp+158h+filename]
.text:000000000000FBB8                 mov     r9d, dword ptr [rsp+158h+var_140]
.text:000000000000FBBD                 xor     rcx, rdx
.text:000000000000FBC0                 xor     rax, r14
.text:000000000000FBC3                 or      rax, rcx
.text:000000000000FBC6                 movsxd  rcx, r8d
.text:000000000000FBC9                 or      rax, rcx
.text:000000000000FBCC                 jnz     loc_FD7D
.text:000000000000FBD2
.text:000000000000FBD2 loc_FBD2:                               ; CODE XREF: utimecmpat+767↓j
.text:000000000000FBD2                 mov     ecx, dword ptr [rsp+158h+stat_buf.st_mtim.tv_sec]
.text:000000000000FBD9                 mov     esi, 0Ah
.text:000000000000FBDE                 and     ecx, 1
.text:000000000000FBE1                 imul    ecx, 3B9ACA00h
.text:000000000000FBE7                 add     ecx, dword ptr [rsp+158h+stat_buf.st_mtim.tv_nsec]
.text:000000000000FBEE                 mov     eax, ecx
.text:000000000000FBF0                 cdq
.text:000000000000FBF1                 idiv    esi
.text:000000000000FBF3                 test    edx, edx
.text:000000000000FBF5                 jnz     loc_FDC5
.text:000000000000FBFB                 cmp     [rsp+158h+fd], 0Ah
.text:000000000000FC00                 jz      short loc_FC3D
.text:000000000000FC02                 mov     r8d, 9
.text:000000000000FC08                 mov     esi, 0Ah
.text:000000000000FC0D                 mov     edi, 0Ah
.text:000000000000FC12                 jmp     short loc_FC1D
.text:000000000000FC14 ; ---------------------------------------------------------------------------
.text:000000000000FC14
.text:000000000000FC14 loc_FC14:                               ; CODE XREF: utimecmpat+5E3↓j
.text:000000000000FC14                 imul    esi, 0Ah
.text:000000000000FC17                 cmp     esi, [rsp+158h+fd]
.text:000000000000FC1B                 jz      short loc_FC3D
.text:000000000000FC1D
.text:000000000000FC1D loc_FC1D:                               ; CODE XREF: utimecmpat+5C2↑j
.text:000000000000FC1D                 mov     eax, ecx
.text:000000000000FC1F                 cdq
.text:000000000000FC20                 idiv    edi
.text:000000000000FC22                 cdq
.text:000000000000FC23                 mov     ecx, eax
.text:000000000000FC25                 idiv    edi
.text:000000000000FC27                 test    edx, edx
.text:000000000000FC29                 jnz     loc_FDBC
.text:000000000000FC2F                 sub     r8d, 1
.text:000000000000FC33                 jnz     short loc_FC14
.text:000000000000FC35                 mov     [rsp+158h+fd], 77359400h
.text:000000000000FC3D
.text:000000000000FC3D loc_FC3D:                               ; CODE XREF: utimecmpat+5B0↑j
.text:000000000000FC3D                                         ; utimecmpat+5CB↑j ...
.text:000000000000FC3D                 mov     esi, [rsp+158h+fd]
.text:000000000000FC41                 xor     eax, eax
.text:000000000000FC43                 cmp     esi, 77359400h
.text:000000000000FC49                 mov     ebx, esi
.text:000000000000FC4B                 setz    al
.text:000000000000FC4E                 not     eax
.text:000000000000FC50                 cdqe
.text:000000000000FC52                 and     r12, rax
.text:000000000000FC55                 mov     eax, r9d
.text:000000000000FC58                 mov     r9d, r13d
.text:000000000000FC5B                 cdq
.text:000000000000FC5C                 idiv    esi
.text:000000000000FC5E                 sub     r9d, edx
.text:000000000000FC61                 nop     dword ptr [rax+00000000h]
.text:000000000000FC68
.text:000000000000FC68 loc_FC68:                               ; CODE XREF: utimecmpat+2C3↑j
.text:000000000000FC68                 mov     rax, [rsp+158h+var_148]
.text:000000000000FC6D                 mov     [rax+8], ebx
.text:000000000000FC70                 mov     byte ptr [rax+0Ch], 1
.text:000000000000FC74                 jmp     loc_F778
.text:000000000000FC74 ; ---------------------------------------------------------------------------
.text:000000000000FC79                 align 20h
.text:000000000000FC80
.text:000000000000FC80 loc_FC80:                               ; CODE XREF: utimecmpat+93↑j
.text:000000000000FC80                 mov     r8, cs:free_ptr
.text:000000000000FC87                 lea     rdx, dev_info_hash
.text:000000000000FC8E                 lea     rcx, dev_info_compare
.text:000000000000FC95                 mov     qword ptr [rsp+158h+fd], rsi
.text:000000000000FC9A                 mov     edi, 10h
.text:000000000000FC9F                 xor     esi, esi
.text:000000000000FCA1                 mov     dword ptr [rsp+158h+var_140], r10d
.text:000000000000FCA6                 mov     dword ptr [rsp+158h+var_148], r13d
.text:000000000000FCAB                 call    hash_initialize
.text:000000000000FCB0                 test    rax, rax
.text:000000000000FCB3                 mov     rdx, rax
.text:000000000000FCB6                 mov     cs:ht_5307, rax
.text:000000000000FCBD                 mov     r9d, dword ptr [rsp+158h+var_148]
.text:000000000000FCC2                 mov     r10d, dword ptr [rsp+158h+var_140]
.text:000000000000FCC7                 mov     r11, qword ptr [rsp+158h+fd]
.text:000000000000FCCC                 jnz     loc_F6E9
.text:000000000000FCD2
.text:000000000000FCD2 loc_FCD2:                               ; CODE XREF: utimecmpat+1E2↑j
.text:000000000000FCD2                 lea     rcx, [rsp+158h+var_108]
.text:000000000000FCD7                 jmp     loc_F890
.text:000000000000FCD7 ; ---------------------------------------------------------------------------
.text:000000000000FCDC                 align 20h
.text:000000000000FCE0
.text:000000000000FCE0 loc_FCE0:                               ; CODE XREF: utimecmpat+EB↑j
.text:000000000000FCE0                 mov     cs:new_dst_res_5308, 0
.text:000000000000FCEB                 jmp     loc_F741
.text:000000000000FCF0 ; ---------------------------------------------------------------------------
.text:000000000000FCF0
.text:000000000000FCF0 loc_FCF0:                               ; CODE XREF: utimecmpat+3BF↑j
.text:000000000000FCF0                                         ; utimecmpat+414↑j
.text:000000000000FCF0                 cmp     ebp, 77359400h
.text:000000000000FCF6                 mov     r12, qword ptr [rsp+158h+fd]
.text:000000000000FCFB                 mov     rsi, [rsp+158h+var_148]
.text:000000000000FD00                 setz    byte ptr [rsp+158h+filename]
.text:000000000000FD05                 movzx   eax, byte ptr [rsp+158h+filename]
.text:000000000000FD0A                 mov     [rsp+158h+fd], r9d
.text:000000000000FD0F                 mov     r14, [rsp+158h+var_118]
.text:000000000000FD14                 mov     r9d, [rsp+158h+var_11C]
.text:000000000000FD19                 mov     [rsi+8], ebp
.text:000000000000FD1C                 not     eax
.text:000000000000FD1E                 cdqe
.text:000000000000FD20                 and     rax, r12
.text:000000000000FD23                 jmp     loc_FAB3
.text:000000000000FD28 ; ---------------------------------------------------------------------------
.text:000000000000FD28
.text:000000000000FD28 loc_FD28:                               ; CODE XREF: utimecmpat+44B↑j
.text:000000000000FD28                 mov     dword ptr [rax+8], 77359400h
.text:000000000000FD2F                 mov     rax, r12
.text:000000000000FD32                 mov     byte ptr [rsp+158h+filename], 1
.text:000000000000FD37                 and     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000FD3B                 mov     [rsp+158h+fd], 77359400h
.text:000000000000FD43                 jmp     loc_FAB3
.text:000000000000FD48 ; ---------------------------------------------------------------------------
.text:000000000000FD48
.text:000000000000FD48 loc_FD48:                               ; CODE XREF: utimecmpat+2E4↑j
.text:000000000000FD48                 mov     rax, [rsp+158h+var_148]
.text:000000000000FD4D                 mov     [rsp+158h+fd], 0Ah
.text:000000000000FD55                 mov     dword ptr [rax+8], 0Ah
.text:000000000000FD5C                 mov     rax, r12
.text:000000000000FD5F                 jmp     loc_FAB3
.text:000000000000FD64 ; ---------------------------------------------------------------------------
.text:000000000000FD64
.text:000000000000FD64 loc_FD64:                               ; CODE XREF: utimecmpat+35C↑j
.text:000000000000FD64                 mov     rax, [rsp+158h+var_148]
.text:000000000000FD69                 mov     dword ptr [rax+8], 0Ah
.text:000000000000FD70                 mov     rax, r12
.text:000000000000FD73                 jmp     loc_FAB3
.text:000000000000FD78 ; ---------------------------------------------------------------------------
.text:000000000000FD78
.text:000000000000FD78 loc_FD78:                               ; CODE XREF: utimecmpat+152↑j
.text:000000000000FD78                 call    ___stack_chk_fail
.text:000000000000FD7D ; ---------------------------------------------------------------------------
.text:000000000000FD7D
.text:000000000000FD7D loc_FD7D:                               ; CODE XREF: utimecmpat+57C↑j
.text:000000000000FD7D                 mov     [rsp+158h+var_E0], rdx
.text:000000000000FD82                 mov     ecx, 100h       ; flags
.text:000000000000FD87                 mov     rdx, rbp        ; times
.text:000000000000FD8A                 mov     rsi, r11        ; path
.text:000000000000FD8D                 mov     edi, r10d       ; fd
.text:000000000000FD90                 mov     dword ptr [rsp+158h+filename], r8d
.text:000000000000FD95                 mov     [rsp+158h+fildes], r9d
.text:000000000000FD9A                 mov     [rsp+158h+var_E8], r14
.text:000000000000FD9F                 call    _utimensat
.text:000000000000FDA4                 mov     r8d, dword ptr [rsp+158h+filename]
.text:000000000000FDA9                 mov     r9d, [rsp+158h+fildes]
.text:000000000000FDAE                 test    r8d, r8d
.text:000000000000FDB1                 jnz     loc_FB61
.text:000000000000FDB7                 jmp     loc_FBD2
.text:000000000000FDBC ; ---------------------------------------------------------------------------
.text:000000000000FDBC
.text:000000000000FDBC loc_FDBC:                               ; CODE XREF: utimecmpat+5D9↑j
.text:000000000000FDBC                 mov     [rsp+158h+fd], esi
.text:000000000000FDC0                 jmp     loc_FC3D
.text:000000000000FDC5 ; ---------------------------------------------------------------------------
.text:000000000000FDC5
.text:000000000000FDC5 loc_FDC5:                               ; CODE XREF: utimecmpat+5A5↑j
.text:000000000000FDC5                 mov     [rsp+158h+fd], ebx
.text:000000000000FDC9                 jmp     loc_FC3D
.text:000000000000FDC9 ; } // starts at F650
.text:000000000000FDC9 utimecmpat      endp
.text:000000000000FDC9
.text:000000000000FDC9 ; ---------------------------------------------------------------------------
.text:000000000000FDCE                 align 10h
.text:000000000000FDD0
.text:000000000000FDD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FDD0
.text:000000000000FDD0
.text:000000000000FDD0                 public utimecmp
.text:000000000000FDD0 utimecmp        proc near               ; CODE XREF: copy_internal+28B↑p
.text:000000000000FDD0 ; __unwind {
.text:000000000000FDD0                 mov     r8d, ecx
.text:000000000000FDD3                 mov     rcx, rdx
.text:000000000000FDD6                 mov     rdx, rsi
.text:000000000000FDD9                 mov     rsi, rdi
.text:000000000000FDDC                 mov     edi, 0FFFFFF9Ch
.text:000000000000FDE1                 jmp     utimecmpat
.text:000000000000FDE1 ; } // starts at FDD0
.text:000000000000FDE1 utimecmp        endp
.text:000000000000FDE1
.text:000000000000FDE1 ; ---------------------------------------------------------------------------
.text:000000000000FDE6                 align 10h
.text:000000000000FDF0
.text:000000000000FDF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FDF0
.text:000000000000FDF0
.text:000000000000FDF0 update_timespec proc near               ; CODE XREF: fdutimens+264↓p
.text:000000000000FDF0                                         ; lutimens+C5↓p
.text:000000000000FDF0
.text:000000000000FDF0 var_19          = byte ptr -19h
.text:000000000000FDF0
.text:000000000000FDF0 ; __unwind {
.text:000000000000FDF0                 push    rbp
.text:000000000000FDF1                 push    rbx
.text:000000000000FDF2                 mov     rbp, rdi
.text:000000000000FDF5                 sub     rsp, 18h
.text:000000000000FDF9                 mov     rbx, [rsi]
.text:000000000000FDFC                 mov     rax, [rbx+8]
.text:000000000000FE00                 mov     rdx, [rbx+18h]
.text:000000000000FE04                 cmp     rax, 3FFFFFFEh
.text:000000000000FE0A                 jz      short loc_FE70
.text:000000000000FE0C                 cmp     rax, 3FFFFFFFh
.text:000000000000FE12                 jz      short loc_FE30
.text:000000000000FE14                 cmp     rdx, 3FFFFFFEh
.text:000000000000FE1B                 jz      short loc_FE4E
.text:000000000000FE1D
.text:000000000000FE1D loc_FE1D:                               ; CODE XREF: update_timespec+5C↓j
.text:000000000000FE1D                 xor     eax, eax
.text:000000000000FE1F                 cmp     rdx, 3FFFFFFFh
.text:000000000000FE26                 jz      short loc_FE98
.text:000000000000FE28
.text:000000000000FE28 loc_FE28:                               ; CODE XREF: update_timespec+8C↓j
.text:000000000000FE28                                         ; update_timespec+A6↓j ...
.text:000000000000FE28                 add     rsp, 18h
.text:000000000000FE2C                 pop     rbx
.text:000000000000FE2D                 pop     rbp
.text:000000000000FE2E                 retn
.text:000000000000FE2E ; ---------------------------------------------------------------------------
.text:000000000000FE2F                 align 10h
.text:000000000000FE30
.text:000000000000FE30 loc_FE30:                               ; CODE XREF: update_timespec+22↑j
.text:000000000000FE30                 cmp     rdx, 3FFFFFFFh
.text:000000000000FE37                 jz      short loc_FEB8
.text:000000000000FE39                 mov     rdi, rbx        ; tp
.text:000000000000FE3C                 call    gettime
.text:000000000000FE41                 mov     rdx, [rbx+18h]
.text:000000000000FE45                 cmp     rdx, 3FFFFFFEh
.text:000000000000FE4C                 jnz     short loc_FE1D
.text:000000000000FE4E
.text:000000000000FE4E loc_FE4E:                               ; CODE XREF: update_timespec+2B↑j
.text:000000000000FE4E                 mov     rax, [rbp+60h]
.text:000000000000FE52                 mov     rdx, [rbp+58h]
.text:000000000000FE56                 mov     [rbx+18h], rax
.text:000000000000FE5A                 mov     [rbx+10h], rdx
.text:000000000000FE5E                 add     rsp, 18h
.text:000000000000FE62                 xor     eax, eax
.text:000000000000FE64                 pop     rbx
.text:000000000000FE65                 pop     rbp
.text:000000000000FE66                 retn
.text:000000000000FE66 ; ---------------------------------------------------------------------------
.text:000000000000FE67                 align 10h
.text:000000000000FE70
.text:000000000000FE70 loc_FE70:                               ; CODE XREF: update_timespec+1A↑j
.text:000000000000FE70                 cmp     rdx, 3FFFFFFEh
.text:000000000000FE77                 mov     eax, 1
.text:000000000000FE7C                 jz      short loc_FE28
.text:000000000000FE7E                 mov     rax, [rdi+50h]
.text:000000000000FE82                 mov     rcx, [rdi+48h]
.text:000000000000FE86                 mov     [rbx+8], rax
.text:000000000000FE8A                 xor     eax, eax
.text:000000000000FE8C                 cmp     rdx, 3FFFFFFFh
.text:000000000000FE93                 mov     [rbx], rcx
.text:000000000000FE96                 jnz     short loc_FE28
.text:000000000000FE98
.text:000000000000FE98 loc_FE98:                               ; CODE XREF: update_timespec+36↑j
.text:000000000000FE98                 lea     rdi, [rbx+10h]  ; tp
.text:000000000000FE9C                 mov     [rsp+28h+var_19], al
.text:000000000000FEA0                 call    gettime
.text:000000000000FEA5                 movzx   eax, [rsp+28h+var_19]
.text:000000000000FEAA                 add     rsp, 18h
.text:000000000000FEAE                 pop     rbx
.text:000000000000FEAF                 pop     rbp
.text:000000000000FEB0                 retn
.text:000000000000FEB0 ; ---------------------------------------------------------------------------
.text:000000000000FEB1                 align 8
.text:000000000000FEB8
.text:000000000000FEB8 loc_FEB8:                               ; CODE XREF: update_timespec+47↑j
.text:000000000000FEB8                 mov     qword ptr [rsi], 0
.text:000000000000FEBF                 xor     eax, eax
.text:000000000000FEC1                 jmp     loc_FE28
.text:000000000000FEC1 ; } // starts at FDF0
.text:000000000000FEC1 update_timespec endp
.text:000000000000FEC1
.text:000000000000FEC1 ; ---------------------------------------------------------------------------
.text:000000000000FEC6                 align 10h
.text:000000000000FED0
.text:000000000000FED0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FED0
.text:000000000000FED0
.text:000000000000FED0 validate_timespec proc near             ; CODE XREF: fdutimens+4D↓p
.text:000000000000FED0                                         ; lutimens+47↓p
.text:000000000000FED0 ; __unwind {
.text:000000000000FED0                 mov     r9, [rdi+8]
.text:000000000000FED4                 lea     rcx, [r9-3FFFFFFEh]
.text:000000000000FEDB                 cmp     rcx, 1
.text:000000000000FEDF                 jbe     short loc_FEEA
.text:000000000000FEE1                 cmp     r9, 3B9AC9FFh
.text:000000000000FEE8                 ja      short loc_FF60
.text:000000000000FEEA
.text:000000000000FEEA loc_FEEA:                               ; CODE XREF: validate_timespec+F↑j
.text:000000000000FEEA                 mov     rdx, [rdi+18h]
.text:000000000000FEEE                 lea     r8, [rdx-3FFFFFFEh]
.text:000000000000FEF5                 cmp     r8, 1
.text:000000000000FEF9                 jbe     short loc_FF04
.text:000000000000FEFB                 cmp     rdx, 3B9AC9FFh
.text:000000000000FF02                 ja      short loc_FF60
.text:000000000000FF04
.text:000000000000FF04 loc_FF04:                               ; CODE XREF: validate_timespec+29↑j
.text:000000000000FF04                 xor     esi, esi
.text:000000000000FF06                 xor     r10d, r10d
.text:000000000000FF09                 cmp     rcx, 1
.text:000000000000FF0D                 ja      short loc_FF29
.text:000000000000FF0F                 xor     esi, esi
.text:000000000000FF11                 cmp     r9, 3FFFFFFEh
.text:000000000000FF18                 mov     qword ptr [rdi], 0
.text:000000000000FF1F                 setz    sil
.text:000000000000FF23                 mov     r10d, 1
.text:000000000000FF29
.text:000000000000FF29 loc_FF29:                               ; CODE XREF: validate_timespec+3D↑j
.text:000000000000FF29                 cmp     r8, 1
.text:000000000000FF2D                 ja      short loc_FF4B
.text:000000000000FF2F                 xor     eax, eax
.text:000000000000FF31                 cmp     rdx, 3FFFFFFEh
.text:000000000000FF38                 mov     qword ptr [rdi+10h], 0
.text:000000000000FF40                 setz    al
.text:000000000000FF43                 mov     r10d, 1
.text:000000000000FF49                 add     esi, eax
.text:000000000000FF4B
.text:000000000000FF4B loc_FF4B:                               ; CODE XREF: validate_timespec+5D↑j
.text:000000000000FF4B                 xor     eax, eax
.text:000000000000FF4D                 cmp     esi, 1
.text:000000000000FF50                 setz    al
.text:000000000000FF53                 add     eax, r10d
.text:000000000000FF56                 retn
.text:000000000000FF56 ; ---------------------------------------------------------------------------
.text:000000000000FF57                 align 20h
.text:000000000000FF60
.text:000000000000FF60 loc_FF60:                               ; CODE XREF: validate_timespec+18↑j
.text:000000000000FF60                                         ; validate_timespec+32↑j
.text:000000000000FF60                 sub     rsp, 8
.text:000000000000FF64                 call    ___errno_location
.text:000000000000FF69                 mov     dword ptr [rax], 16h
.text:000000000000FF6F                 mov     eax, 0FFFFFFFFh
.text:000000000000FF74                 add     rsp, 8
.text:000000000000FF78                 retn
.text:000000000000FF78 ; } // starts at FED0
.text:000000000000FF78 validate_timespec endp
.text:000000000000FF78
.text:000000000000FF78 ; ---------------------------------------------------------------------------
.text:000000000000FF79                 align 20h
.text:000000000000FF80
.text:000000000000FF80 ; =============== S U B R O U T I N E =======================================
.text:000000000000FF80
.text:000000000000FF80
.text:000000000000FF80                 public lutimensat
.text:000000000000FF80 lutimensat      proc near
.text:000000000000FF80 ; __unwind {
.text:000000000000FF80                 mov     ecx, 100h       ; flags
.text:000000000000FF85                 jmp     _utimensat
.text:000000000000FF85 ; } // starts at FF80
.text:000000000000FF85 lutimensat      endp
.text:000000000000FF85
.text:000000000000FF85 ; ---------------------------------------------------------------------------
.text:000000000000FF8A                 align 10h
.text:000000000000FF90
.text:000000000000FF90 ; =============== S U B R O U T I N E =======================================
.text:000000000000FF90
.text:000000000000FF90 ; Attributes: info_from_lumina
.text:000000000000FF90
.text:000000000000FF90 ; __int64 __fastcall fdutimens(int fildes, char *path)
.text:000000000000FF90                 public fdutimens
.text:000000000000FF90 fdutimens       proc near               ; CODE XREF: copy_internal+3A12↑p
.text:000000000000FF90                                         ; utimens+B↓j ...
.text:000000000000FF90
.text:000000000000FF90 times           = qword ptr -130h
.text:000000000000FF90 var_128         = xmmword ptr -128h
.text:000000000000FF90 var_118         = xmmword ptr -118h
.text:000000000000FF90 tvp             = timeval ptr -108h
.text:000000000000FF90 var_F8          = qword ptr -0F8h
.text:000000000000FF90 var_F0          = qword ptr -0F0h
.text:000000000000FF90 var_E8          = timeval ptr -0E8h
.text:000000000000FF90 var_D8          = xmmword ptr -0D8h
.text:000000000000FF90 stat_buf        = stat ptr -0C8h
.text:000000000000FF90 var_30          = qword ptr -30h
.text:000000000000FF90
.text:000000000000FF90 ; __unwind {
.text:000000000000FF90                 push    r14
.text:000000000000FF92                 push    r13
.text:000000000000FF94                 push    r12
.text:000000000000FF96                 push    rbp
.text:000000000000FF97                 mov     r12, rsi
.text:000000000000FF9A                 push    rbx
.text:000000000000FF9B                 mov     ebx, edi
.text:000000000000FF9D                 sub     rsp, 110h
.text:000000000000FFA4                 mov     rax, fs:28h
.text:000000000000FFAD                 mov     [rsp+138h+var_30], rax
.text:000000000000FFB5                 xor     eax, eax
.text:000000000000FFB7                 test    rdx, rdx
.text:000000000000FFBA                 jz      loc_10280
.text:000000000000FFC0                 movdqu  xmm0, xmmword ptr [rdx]
.text:000000000000FFC4                 lea     rdi, [rsp+138h+var_128]
.text:000000000000FFC9                 movaps  [rsp+138h+var_128], xmm0
.text:000000000000FFCE                 mov     [rsp+138h+times], rdi
.text:000000000000FFD3                 movdqu  xmm0, xmmword ptr [rdx+10h]
.text:000000000000FFD8                 movaps  [rsp+138h+var_118], xmm0
.text:000000000000FFDD                 call    validate_timespec
.text:000000000000FFE2                 test    eax, eax
.text:000000000000FFE4                 mov     r13d, eax
.text:000000000000FFE7                 js      loc_103A3
.text:000000000000FFED
.text:000000000000FFED loc_FFED:                               ; CODE XREF: fdutimens+2FC↓j
.text:000000000000FFED                 test    ebx, ebx
.text:000000000000FFEF                 jns     short loc_FFFA
.text:000000000000FFF1                 test    r12, r12
.text:000000000000FFF4                 jz      loc_10398
.text:000000000000FFFA
.text:000000000000FFFA loc_FFFA:                               ; CODE XREF: fdutimens+5F↑j
.text:000000000000FFFA                 mov     eax, cs:utimensat_works_really
.text:0000000000010000                 test    eax, eax
.text:0000000000010002                 js      short loc_10038
.text:0000000000010004                 cmp     r13d, 2
.text:0000000000010008                 jz      loc_10210
.text:000000000001000E                 mov     rsi, [rsp+138h+times] ; times
.text:0000000000010013
.text:0000000000010013 loc_10013:                              ; CODE XREF: fdutimens+2C7↓j
.text:0000000000010013                                         ; fdutimens+2E5↓j ...
.text:0000000000010013                 test    ebx, ebx
.text:0000000000010015                 js      loc_10340
.text:000000000001001B                 mov     edi, ebx        ; fd
.text:000000000001001D                 call    _futimens       ; PIC mode
.text:0000000000010022                 cmp     eax, 0
.text:0000000000010025                 mov     ebp, eax
.text:0000000000010027                 jle     loc_1035D
.text:000000000001002D
.text:000000000001002D loc_1002D:                              ; CODE XREF: fdutimens+3C7↓j
.text:000000000001002D                 call    ___errno_location ; PIC mode
.text:0000000000010032                 mov     dword ptr [rax], 26h ; '&'
.text:0000000000010038
.text:0000000000010038 loc_10038:                              ; CODE XREF: fdutimens+72↑j
.text:0000000000010038                                         ; fdutimens+459↓j
.text:0000000000010038                 test    r13d, r13d
.text:000000000001003B                 mov     cs:utimensat_works_really, 0FFFFFFFFh
.text:0000000000010045                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:000000000001004F                 jnz     loc_101B0
.text:0000000000010055
.text:0000000000010055 loc_10055:                              ; CODE XREF: fdutimens+26B↓j
.text:0000000000010055                 mov     rsi, [rsp+138h+times]
.text:000000000001005A                 test    rsi, rsi
.text:000000000001005D                 jz      loc_102F0
.text:0000000000010063                 mov     rax, [rsi]
.text:0000000000010066                 mov     rdi, [rsi+8]
.text:000000000001006A                 mov     rcx, 20C49BA5E353F7CFh
.text:0000000000010074                 lea     r13, [rsp+138h+tvp]
.text:0000000000010079                 mov     [rsp+138h+tvp.tv_sec], rax
.text:000000000001007E                 mov     rax, rdi
.text:0000000000010081                 sar     rdi, 3Fh
.text:0000000000010085                 imul    rcx
.text:0000000000010088                 mov     rax, [rsi+10h]
.text:000000000001008C                 mov     rsi, [rsi+18h]
.text:0000000000010090                 mov     [rsp+138h+var_F8], rax
.text:0000000000010095                 mov     rax, rsi
.text:0000000000010098                 sar     rsi, 3Fh
.text:000000000001009C                 sar     rdx, 7
.text:00000000000100A0                 sub     rdx, rdi
.text:00000000000100A3                 mov     [rsp+138h+tvp.tv_usec], rdx
.text:00000000000100A8                 imul    rcx
.text:00000000000100AB                 mov     rcx, rdx
.text:00000000000100AE                 sar     rcx, 7
.text:00000000000100B2                 sub     rcx, rsi
.text:00000000000100B5                 mov     [rsp+138h+var_F0], rcx
.text:00000000000100BA
.text:00000000000100BA loc_100BA:                              ; CODE XREF: fdutimens+363↓j
.text:00000000000100BA                 test    ebx, ebx
.text:00000000000100BC                 mov     rdx, r13        ; tvp
.text:00000000000100BF                 js      loc_10298
.text:00000000000100C5                 xor     esi, esi        ; file
.text:00000000000100C7                 mov     edi, ebx        ; fd
.text:00000000000100C9                 call    _futimesat      ; PIC mode
.text:00000000000100CE                 test    eax, eax
.text:00000000000100D0                 mov     ebp, eax
.text:00000000000100D2                 jnz     loc_102D0
.text:00000000000100D8                 test    r13, r13
.text:00000000000100DB                 jz      loc_102A7
.text:00000000000100E1                 cmp     qword ptr [r13+8], 7A11Fh
.text:00000000000100E9                 setnle  r12b
.text:00000000000100ED                 cmp     qword ptr [r13+18h], 7A11Fh
.text:00000000000100F5                 setnle  r14b
.text:00000000000100F9                 test    r12b, r12b
.text:00000000000100FC                 jnz     short loc_10107
.text:00000000000100FE                 test    r14b, r14b
.text:0000000000010101                 jz      loc_102A7
.text:0000000000010107
.text:0000000000010107 loc_10107:                              ; CODE XREF: fdutimens+16C↑j
.text:0000000000010107                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:000000000001010C                 mov     esi, ebx        ; fildes
.text:000000000001010E                 mov     edi, 1          ; ver
.text:0000000000010113                 call    ___fxstat       ; PIC mode
.text:0000000000010118                 test    eax, eax
.text:000000000001011A                 jnz     loc_102A7
.text:0000000000010120                 mov     rdx, [rsp+138h+stat_buf.st_mtim.tv_sec]
.text:0000000000010128                 sub     rdx, [r13+10h]
.text:000000000001012C                 mov     rax, [rsp+138h+stat_buf.st_atim.tv_sec]
.text:0000000000010134                 sub     rax, [r13+0]
.text:0000000000010138                 movdqa  xmm0, xmmword ptr [r13+0]
.text:000000000001013E                 cmp     rdx, 1
.text:0000000000010142                 setz    dl
.text:0000000000010145                 movaps  xmmword ptr [rsp+138h+var_E8.tv_sec], xmm0
.text:000000000001014A                 and     r14d, edx
.text:000000000001014D                 cmp     rax, 1
.text:0000000000010151                 movdqa  xmm0, xmmword ptr [r13+10h]
.text:0000000000010157                 movaps  [rsp+138h+var_D8], xmm0
.text:000000000001015C                 jnz     loc_103B0
.text:0000000000010162                 test    r12b, r12b
.text:0000000000010165                 jz      loc_103B0
.text:000000000001016B                 cmp     [rsp+138h+stat_buf.st_atim.tv_nsec], 0
.text:0000000000010174                 jnz     loc_103B0
.text:000000000001017A                 test    r14b, r14b
.text:000000000001017D                 mov     [rsp+138h+var_E8.tv_usec], 0
.text:0000000000010186                 jz      short loc_10197
.text:0000000000010188                 cmp     [rsp+138h+stat_buf.st_mtim.tv_nsec], 0
.text:0000000000010191                 jz      loc_103C8
.text:0000000000010197
.text:0000000000010197 loc_10197:                              ; CODE XREF: fdutimens+1F6↑j
.text:0000000000010197                                         ; fdutimens+441↓j
.text:0000000000010197                 lea     rdx, [rsp+138h+var_E8] ; tvp
.text:000000000001019C                 xor     esi, esi        ; file
.text:000000000001019E                 mov     edi, ebx        ; fd
.text:00000000000101A0                 call    _futimesat      ; PIC mode
.text:00000000000101A5
.text:00000000000101A5 loc_101A5:                              ; CODE XREF: fdutimens+423↓j
.text:00000000000101A5                                         ; fdutimens+432↓j
.text:00000000000101A5                 xor     ebp, ebp
.text:00000000000101A7                 jmp     loc_102A7
.text:00000000000101A7 ; ---------------------------------------------------------------------------
.text:00000000000101AC                 align 10h
.text:00000000000101B0
.text:00000000000101B0 loc_101B0:                              ; CODE XREF: fdutimens+BF↑j
.text:00000000000101B0                 cmp     r13d, 3
.text:00000000000101B4                 jz      short loc_101DC
.text:00000000000101B6                 test    ebx, ebx
.text:00000000000101B8                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:00000000000101BD                 js      loc_10300
.text:00000000000101C3                 mov     esi, ebx        ; fildes
.text:00000000000101C5                 mov     edi, 1          ; ver
.text:00000000000101CA                 call    ___fxstat       ; PIC mode
.text:00000000000101CF                 test    eax, eax
.text:00000000000101D1                 setnz   al
.text:00000000000101D4
.text:00000000000101D4 loc_101D4:                              ; CODE XREF: fdutimens+382↓j
.text:00000000000101D4                 test    al, al
.text:00000000000101D6                 jnz     loc_103A3
.text:00000000000101DC
.text:00000000000101DC loc_101DC:                              ; CODE XREF: fdutimens+224↑j
.text:00000000000101DC                 cmp     [rsp+138h+times], 0
.text:00000000000101E2                 jz      loc_102F0
.text:00000000000101E8                 lea     rsi, [rsp+138h+times]
.text:00000000000101ED                 lea     rdi, [rsp+138h+stat_buf]
.text:00000000000101F2                 xor     ebp, ebp
.text:00000000000101F4                 call    update_timespec
.text:00000000000101F9                 test    al, al
.text:00000000000101FB                 jz      loc_10055
.text:0000000000010201                 jmp     loc_102A7
.text:0000000000010201 ; ---------------------------------------------------------------------------
.text:0000000000010206                 align 10h
.text:0000000000010210
.text:0000000000010210 loc_10210:                              ; CODE XREF: fdutimens+78↑j
.text:0000000000010210                 test    ebx, ebx
.text:0000000000010212                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:0000000000010217                 js      loc_10320
.text:000000000001021D                 mov     esi, ebx        ; fildes
.text:000000000001021F                 mov     edi, 1          ; ver
.text:0000000000010224                 call    ___fxstat       ; PIC mode
.text:0000000000010229                 test    eax, eax
.text:000000000001022B                 setnz   al
.text:000000000001022E
.text:000000000001022E loc_1022E:                              ; CODE XREF: fdutimens+3A2↓j
.text:000000000001022E                 test    al, al
.text:0000000000010230                 jnz     loc_103A3
.text:0000000000010236                 mov     rsi, [rsp+138h+times]
.text:000000000001023B                 cmp     qword ptr [rsi+8], 3FFFFFFEh
.text:0000000000010243                 jz      loc_10370
.text:0000000000010249                 cmp     qword ptr [rsi+18h], 3FFFFFFEh
.text:0000000000010251                 mov     r13d, 3
.text:0000000000010257                 jnz     loc_10013
.text:000000000001025D                 mov     rax, [rsp+138h+stat_buf.st_mtim.tv_nsec]
.text:0000000000010265                 mov     rdx, [rsp+138h+stat_buf.st_mtim.tv_sec]
.text:000000000001026D                 mov     [rsi+18h], rax
.text:0000000000010271                 mov     [rsi+10h], rdx
.text:0000000000010275                 jmp     loc_10013
.text:0000000000010275 ; ---------------------------------------------------------------------------
.text:000000000001027A                 align 20h
.text:0000000000010280
.text:0000000000010280 loc_10280:                              ; CODE XREF: fdutimens+2A↑j
.text:0000000000010280                 mov     [rsp+138h+times], 0
.text:0000000000010289                 xor     r13d, r13d
.text:000000000001028C                 jmp     loc_FFED
.text:000000000001028C ; ---------------------------------------------------------------------------
.text:0000000000010291                 align 8
.text:0000000000010298
.text:0000000000010298 loc_10298:                              ; CODE XREF: fdutimens+12F↑j
.text:0000000000010298                 mov     rsi, r12        ; file
.text:000000000001029B                 mov     edi, 0FFFFFF9Ch ; fd
.text:00000000000102A0                 call    _futimesat      ; PIC mode
.text:00000000000102A5                 mov     ebp, eax
.text:00000000000102A7
.text:00000000000102A7 loc_102A7:                              ; CODE XREF: fdutimens+14B↑j
.text:00000000000102A7                                         ; fdutimens+171↑j ...
.text:00000000000102A7                 mov     rcx, [rsp+138h+var_30]
.text:00000000000102AF                 xor     rcx, fs:28h
.text:00000000000102B8                 mov     eax, ebp
.text:00000000000102BA                 jnz     loc_103D6
.text:00000000000102C0                 add     rsp, 110h
.text:00000000000102C7                 pop     rbx
.text:00000000000102C8                 pop     rbp
.text:00000000000102C9                 pop     r12
.text:00000000000102CB                 pop     r13
.text:00000000000102CD                 pop     r14
.text:00000000000102CF                 retn
.text:00000000000102D0 ; ---------------------------------------------------------------------------
.text:00000000000102D0
.text:00000000000102D0 loc_102D0:                              ; CODE XREF: fdutimens+142↑j
.text:00000000000102D0                 test    r12, r12
.text:00000000000102D3                 mov     ebp, 0FFFFFFFFh
.text:00000000000102D8                 jz      short loc_102A7
.text:00000000000102DA                 mov     rsi, r13        ; tvp
.text:00000000000102DD                 mov     rdi, r12        ; file
.text:00000000000102E0                 call    _utimes         ; PIC mode
.text:00000000000102E5                 mov     ebp, eax
.text:00000000000102E7                 jmp     short loc_102A7
.text:00000000000102E7 ; ---------------------------------------------------------------------------
.text:00000000000102E9                 align 10h
.text:00000000000102F0
.text:00000000000102F0 loc_102F0:                              ; CODE XREF: fdutimens+CD↑j
.text:00000000000102F0                                         ; fdutimens+252↑j
.text:00000000000102F0                 xor     r13d, r13d
.text:00000000000102F3                 jmp     loc_100BA
.text:00000000000102F3 ; ---------------------------------------------------------------------------
.text:00000000000102F8                 align 20h
.text:0000000000010300
.text:0000000000010300 loc_10300:                              ; CODE XREF: fdutimens+22D↑j
.text:0000000000010300                 mov     rsi, r12        ; filename
.text:0000000000010303                 mov     edi, 1          ; ver
.text:0000000000010308                 call    ___xstat        ; PIC mode
.text:000000000001030D                 test    eax, eax
.text:000000000001030F                 setnz   al
.text:0000000000010312                 jmp     loc_101D4
.text:0000000000010312 ; ---------------------------------------------------------------------------
.text:0000000000010317                 align 20h
.text:0000000000010320
.text:0000000000010320 loc_10320:                              ; CODE XREF: fdutimens+287↑j
.text:0000000000010320                 mov     rsi, r12        ; filename
.text:0000000000010323                 mov     edi, 1          ; ver
.text:0000000000010328                 call    ___xstat        ; PIC mode
.text:000000000001032D                 test    eax, eax
.text:000000000001032F                 setnz   al
.text:0000000000010332                 jmp     loc_1022E
.text:0000000000010332 ; ---------------------------------------------------------------------------
.text:0000000000010337                 align 20h
.text:0000000000010340
.text:0000000000010340 loc_10340:                              ; CODE XREF: fdutimens+85↑j
.text:0000000000010340                 xor     ecx, ecx        ; flags
.text:0000000000010342                 mov     rdx, rsi        ; times
.text:0000000000010345                 mov     edi, 0FFFFFF9Ch ; fd
.text:000000000001034A                 mov     rsi, r12        ; path
.text:000000000001034D                 call    _utimensat      ; PIC mode
.text:0000000000010352                 cmp     eax, 0
.text:0000000000010355                 mov     ebp, eax
.text:0000000000010357                 jg      loc_1002D
.text:000000000001035D
.text:000000000001035D loc_1035D:                              ; CODE XREF: fdutimens+97↑j
.text:000000000001035D                 jnz     short loc_103DB
.text:000000000001035F
.text:000000000001035F loc_1035F:                              ; CODE XREF: fdutimens+453↓j
.text:000000000001035F                 mov     cs:utimensat_works_really, 1
.text:0000000000010369                 jmp     loc_102A7
.text:0000000000010369 ; ---------------------------------------------------------------------------
.text:000000000001036E                 align 10h
.text:0000000000010370
.text:0000000000010370 loc_10370:                              ; CODE XREF: fdutimens+2B3↑j
.text:0000000000010370                 mov     rax, [rsp+138h+stat_buf.st_atim.tv_nsec]
.text:0000000000010378                 mov     rdx, [rsp+138h+stat_buf.st_atim.tv_sec]
.text:0000000000010380                 mov     r13d, 3
.text:0000000000010386                 mov     [rsi], rdx
.text:0000000000010389                 mov     [rsi+8], rax
.text:000000000001038D                 jmp     loc_10013
.text:000000000001038D ; ---------------------------------------------------------------------------
.text:0000000000010392                 align 8
.text:0000000000010398
.text:0000000000010398 loc_10398:                              ; CODE XREF: fdutimens+64↑j
.text:0000000000010398                 call    ___errno_location ; PIC mode
.text:000000000001039D                 mov     dword ptr [rax], 9
.text:00000000000103A3
.text:00000000000103A3 loc_103A3:                              ; CODE XREF: fdutimens+57↑j
.text:00000000000103A3                                         ; fdutimens+246↑j ...
.text:00000000000103A3                 mov     ebp, 0FFFFFFFFh
.text:00000000000103A8                 jmp     loc_102A7
.text:00000000000103A8 ; ---------------------------------------------------------------------------
.text:00000000000103AD                 align 10h
.text:00000000000103B0
.text:00000000000103B0 loc_103B0:                              ; CODE XREF: fdutimens+1CC↑j
.text:00000000000103B0                                         ; fdutimens+1D5↑j ...
.text:00000000000103B0                 test    r14b, r14b
.text:00000000000103B3                 jz      loc_101A5
.text:00000000000103B9                 cmp     [rsp+138h+stat_buf.st_mtim.tv_nsec], 0
.text:00000000000103C2                 jnz     loc_101A5
.text:00000000000103C8
.text:00000000000103C8 loc_103C8:                              ; CODE XREF: fdutimens+201↑j
.text:00000000000103C8                 mov     qword ptr [rsp+138h+var_D8+8], 0
.text:00000000000103D1                 jmp     loc_10197
.text:00000000000103D6 ; ---------------------------------------------------------------------------
.text:00000000000103D6
.text:00000000000103D6 loc_103D6:                              ; CODE XREF: fdutimens+32A↑j
.text:00000000000103D6                 call    ___stack_chk_fail ; PIC mode
.text:00000000000103DB ; ---------------------------------------------------------------------------
.text:00000000000103DB
.text:00000000000103DB loc_103DB:                              ; CODE XREF: fdutimens:loc_1035D↑j
.text:00000000000103DB                 call    ___errno_location ; PIC mode
.text:00000000000103E0                 cmp     dword ptr [rax], 26h ; '&'
.text:00000000000103E3                 jnz     loc_1035F
.text:00000000000103E9                 jmp     loc_10038
.text:00000000000103E9 ; } // starts at FF90
.text:00000000000103E9 fdutimens       endp
.text:00000000000103E9
.text:00000000000103E9 ; ---------------------------------------------------------------------------
.text:00000000000103EE                 align 10h
.text:00000000000103F0
.text:00000000000103F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000103F0
.text:00000000000103F0
.text:00000000000103F0 ; __int64 __fastcall utimens(char *path)
.text:00000000000103F0                 public utimens
.text:00000000000103F0 utimens         proc near               ; CODE XREF: copy_internal:loc_7F60↑p
.text:00000000000103F0 ; __unwind {
.text:00000000000103F0                 mov     rdx, rsi
.text:00000000000103F3                 mov     rsi, rdi        ; path
.text:00000000000103F6                 mov     edi, 0FFFFFFFFh ; fildes
.text:00000000000103FB                 jmp     fdutimens
.text:00000000000103FB ; } // starts at 103F0
.text:00000000000103FB utimens         endp
.text:00000000000103FB
.text:0000000000010400
.text:0000000000010400 ; =============== S U B R O U T I N E =======================================
.text:0000000000010400
.text:0000000000010400 ; Attributes: info_from_lumina
.text:0000000000010400
.text:0000000000010400 ; int __fastcall lutimens(const char *file, const timespec *timespec)
.text:0000000000010400                 public lutimens
.text:0000000000010400 lutimens        proc near               ; CODE XREF: copy_internal+677↑p
.text:0000000000010400
.text:0000000000010400 times           = qword ptr -0E0h
.text:0000000000010400 var_D8          = xmmword ptr -0D8h
.text:0000000000010400 var_C8          = xmmword ptr -0C8h
.text:0000000000010400 stat_buf        = stat ptr -0B8h
.text:0000000000010400 var_20          = qword ptr -20h
.text:0000000000010400
.text:0000000000010400 ; __unwind {
.text:0000000000010400                 push    r12
.text:0000000000010402                 push    rbp
.text:0000000000010403                 mov     r12, rdi
.text:0000000000010406                 push    rbx
.text:0000000000010407                 sub     rsp, 0D0h
.text:000000000001040E                 mov     rax, fs:28h
.text:0000000000010417                 mov     [rsp+0E8h+var_20], rax
.text:000000000001041F                 xor     eax, eax
.text:0000000000010421                 test    rsi, rsi
.text:0000000000010424                 jz      loc_10520
.text:000000000001042A                 movdqu  xmm0, xmmword ptr [rsi]
.text:000000000001042E                 lea     rdi, [rsp+0E8h+var_D8]
.text:0000000000010433                 movaps  [rsp+0E8h+var_D8], xmm0
.text:0000000000010438                 mov     [rsp+0E8h+times], rdi
.text:000000000001043D                 movdqu  xmm0, xmmword ptr [rsi+10h]
.text:0000000000010442                 movaps  [rsp+0E8h+var_C8], xmm0
.text:0000000000010447                 call    validate_timespec
.text:000000000001044C                 test    eax, eax
.text:000000000001044E                 mov     ebx, eax
.text:0000000000010450                 js      loc_10560
.text:0000000000010456                 mov     eax, cs:lutimensat_works_really
.text:000000000001045C                 test    eax, eax
.text:000000000001045E                 js      short loc_10496
.text:0000000000010460                 cmp     ebx, 2
.text:0000000000010463                 jz      loc_10590
.text:0000000000010469                 mov     rdx, [rsp+0E8h+times] ; times
.text:000000000001046E
.text:000000000001046E loc_1046E:                              ; CODE XREF: lutimens+135↓j
.text:000000000001046E                                         ; lutimens+1C2↓j ...
.text:000000000001046E                 mov     ecx, 100h       ; flags
.text:0000000000010473                 mov     rsi, r12        ; path
.text:0000000000010476                 mov     edi, 0FFFFFF9Ch ; fd
.text:000000000001047B                 call    _utimensat
.text:0000000000010480                 cmp     eax, 0
.text:0000000000010483                 mov     ebp, eax
.text:0000000000010485                 jle     loc_10570
.text:000000000001048B                 call    ___errno_location
.text:0000000000010490                 mov     dword ptr [rax], 26h ; '&'
.text:0000000000010496
.text:0000000000010496 loc_10496:                              ; CODE XREF: lutimens+5E↑j
.text:0000000000010496                                         ; lutimens+259↓j
.text:0000000000010496                 test    ebx, ebx
.text:0000000000010498                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:00000000000104A2                 jz      loc_10545
.text:00000000000104A8                 cmp     ebx, 3
.text:00000000000104AB                 jnz     loc_105E8
.text:00000000000104B1                 cmp     [rsp+0E8h+times], 0
.text:00000000000104B7                 jz      short loc_104D0
.text:00000000000104B9
.text:00000000000104B9 loc_104B9:                              ; CODE XREF: lutimens+208↓j
.text:00000000000104B9                 lea     rsi, [rsp+0E8h+times]
.text:00000000000104BE                 lea     rdi, [rsp+0E8h+stat_buf]
.text:00000000000104C3                 xor     ebp, ebp
.text:00000000000104C5                 call    update_timespec
.text:00000000000104CA                 test    al, al
.text:00000000000104CC                 jnz     short loc_104F8
.text:00000000000104CE                 xchg    ax, ax
.text:00000000000104D0
.text:00000000000104D0 loc_104D0:                              ; CODE XREF: lutimens+B7↑j
.text:00000000000104D0                                         ; lutimens+159↓j ...
.text:00000000000104D0                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:00000000000104D4                 and     eax, 0F000h
.text:00000000000104D9                 cmp     eax, 0A000h
.text:00000000000104DE                 jz      loc_10636
.text:00000000000104E4                 mov     rdx, [rsp+0E8h+times]
.text:00000000000104E9                 mov     rsi, r12        ; path
.text:00000000000104EC                 mov     edi, 0FFFFFFFFh ; fildes
.text:00000000000104F1                 call    fdutimens
.text:00000000000104F6                 mov     ebp, eax
.text:00000000000104F8
.text:00000000000104F8 loc_104F8:                              ; CODE XREF: lutimens+CC↑j
.text:00000000000104F8                                         ; lutimens+165↓j ...
.text:00000000000104F8                 mov     rcx, [rsp+0E8h+var_20]
.text:0000000000010500                 xor     rcx, fs:28h
.text:0000000000010509                 mov     eax, ebp
.text:000000000001050B                 jnz     loc_10646
.text:0000000000010511                 add     rsp, 0D0h
.text:0000000000010518                 pop     rbx
.text:0000000000010519                 pop     rbp
.text:000000000001051A                 pop     r12
.text:000000000001051C                 retn
.text:000000000001051C ; ---------------------------------------------------------------------------
.text:000000000001051D                 align 20h
.text:0000000000010520
.text:0000000000010520 loc_10520:                              ; CODE XREF: lutimens+24↑j
.text:0000000000010520                 mov     ecx, cs:lutimensat_works_really
.text:0000000000010526                 xor     edx, edx
.text:0000000000010528                 xor     ebx, ebx
.text:000000000001052A                 mov     [rsp+0E8h+times], 0
.text:0000000000010533                 test    ecx, ecx
.text:0000000000010535                 jns     loc_1046E
.text:000000000001053B                 mov     cs:lutimensat_works_really, 0FFFFFFFFh
.text:0000000000010545
.text:0000000000010545 loc_10545:                              ; CODE XREF: lutimens+A2↑j
.text:0000000000010545                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:000000000001054A                 mov     rsi, r12        ; filename
.text:000000000001054D                 mov     edi, 1          ; ver
.text:0000000000010552                 call    ___lxstat
.text:0000000000010557                 test    eax, eax
.text:0000000000010559                 jz      loc_104D0
.text:000000000001055F                 nop
.text:0000000000010560
.text:0000000000010560 loc_10560:                              ; CODE XREF: lutimens+50↑j
.text:0000000000010560                                         ; lutimens+1A4↓j ...
.text:0000000000010560                 mov     ebp, 0FFFFFFFFh
.text:0000000000010565                 jmp     short loc_104F8
.text:0000000000010565 ; ---------------------------------------------------------------------------
.text:0000000000010567                 align 10h
.text:0000000000010570
.text:0000000000010570 loc_10570:                              ; CODE XREF: lutimens+85↑j
.text:0000000000010570                 jnz     loc_1064B
.text:0000000000010576
.text:0000000000010576 loc_10576:                              ; CODE XREF: lutimens+253↓j
.text:0000000000010576                 mov     cs:utimensat_works_really, 1
.text:0000000000010580                 mov     cs:lutimensat_works_really, 1
.text:000000000001058A                 jmp     loc_104F8
.text:000000000001058A ; ---------------------------------------------------------------------------
.text:000000000001058F                 align 10h
.text:0000000000010590
.text:0000000000010590 loc_10590:                              ; CODE XREF: lutimens+63↑j
.text:0000000000010590                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000010595                 mov     rsi, r12        ; filename
.text:0000000000010598                 mov     edi, 1          ; ver
.text:000000000001059D                 call    ___lxstat
.text:00000000000105A2                 test    eax, eax
.text:00000000000105A4                 jnz     short loc_10560
.text:00000000000105A6                 mov     rdx, [rsp+0E8h+times]
.text:00000000000105AB                 cmp     qword ptr [rdx+8], 3FFFFFFEh
.text:00000000000105B3                 jz      short loc_10618
.text:00000000000105B5                 cmp     qword ptr [rdx+18h], 3FFFFFFEh
.text:00000000000105BD                 mov     ebx, 3
.text:00000000000105C2                 jnz     loc_1046E
.text:00000000000105C8                 mov     rax, [rsp+0E8h+stat_buf.st_mtim.tv_nsec]
.text:00000000000105D0                 mov     rcx, [rsp+0E8h+stat_buf.st_mtim.tv_sec]
.text:00000000000105D8                 mov     [rdx+18h], rax
.text:00000000000105DC                 mov     [rdx+10h], rcx
.text:00000000000105E0                 jmp     loc_1046E
.text:00000000000105E0 ; ---------------------------------------------------------------------------
.text:00000000000105E5                 align 8
.text:00000000000105E8
.text:00000000000105E8 loc_105E8:                              ; CODE XREF: lutimens+AB↑j
.text:00000000000105E8                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:00000000000105ED                 mov     rsi, r12        ; filename
.text:00000000000105F0                 mov     edi, 1          ; ver
.text:00000000000105F5                 call    ___lxstat
.text:00000000000105FA                 test    eax, eax
.text:00000000000105FC                 jnz     loc_10560
.text:0000000000010602                 cmp     [rsp+0E8h+times], 0
.text:0000000000010608                 jnz     loc_104B9
.text:000000000001060E                 jmp     loc_104D0
.text:000000000001060E ; ---------------------------------------------------------------------------
.text:0000000000010613                 align 8
.text:0000000000010618
.text:0000000000010618 loc_10618:                              ; CODE XREF: lutimens+1B3↑j
.text:0000000000010618                 mov     rax, [rsp+0E8h+stat_buf.st_atim.tv_nsec]
.text:0000000000010620                 mov     rcx, [rsp+0E8h+stat_buf.st_atim.tv_sec]
.text:0000000000010625                 mov     ebx, 3
.text:000000000001062A                 mov     [rdx], rcx
.text:000000000001062D                 mov     [rdx+8], rax
.text:0000000000010631                 jmp     loc_1046E
.text:0000000000010636 ; ---------------------------------------------------------------------------
.text:0000000000010636
.text:0000000000010636 loc_10636:                              ; CODE XREF: lutimens+DE↑j
.text:0000000000010636                 call    ___errno_location
.text:000000000001063B                 mov     dword ptr [rax], 26h ; '&'
.text:0000000000010641                 jmp     loc_10560
.text:0000000000010646 ; ---------------------------------------------------------------------------
.text:0000000000010646
.text:0000000000010646 loc_10646:                              ; CODE XREF: lutimens+10B↑j
.text:0000000000010646                 call    ___stack_chk_fail
.text:000000000001064B ; ---------------------------------------------------------------------------
.text:000000000001064B
.text:000000000001064B loc_1064B:                              ; CODE XREF: lutimens:loc_10570↑j
.text:000000000001064B                 call    ___errno_location
.text:0000000000010650                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000010653                 jnz     loc_10576
.text:0000000000010659                 jmp     loc_10496
.text:0000000000010659 ; } // starts at 10400
.text:0000000000010659 lutimens        endp
.text:0000000000010659
.text:0000000000010659 ; ---------------------------------------------------------------------------
.text:000000000001065E                 align 20h
.text:0000000000010660
.text:0000000000010660 ; =============== S U B R O U T I N E =======================================
.text:0000000000010660
.text:0000000000010660
.text:0000000000010660 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000010660                 public version_etc_arn
.text:0000000000010660 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_10A9B↓j
.text:0000000000010660                                         ; version_etc_va:loc_10AEB↓p ...
.text:0000000000010660
.text:0000000000010660 var_58          = qword ptr -58h
.text:0000000000010660 var_50          = qword ptr -50h
.text:0000000000010660 var_48          = qword ptr -48h
.text:0000000000010660 var_40          = qword ptr -40h
.text:0000000000010660
.text:0000000000010660 ; __unwind {
.text:0000000000010660                 push    r15
.text:0000000000010662                 push    r14
.text:0000000000010664                 push    r13
.text:0000000000010666                 push    r12
.text:0000000000010668                 mov     r12, r9
.text:000000000001066B                 push    rbp
.text:000000000001066C                 push    rbx
.text:000000000001066D                 mov     rbp, rdi
.text:0000000000010670                 mov     rbx, r8
.text:0000000000010673                 sub     rsp, 28h
.text:0000000000010677                 test    rsi, rsi
.text:000000000001067A                 jz      loc_10798
.text:0000000000010680                 mov     r8, rdx
.text:0000000000010683                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000001068A                 mov     r9, rcx
.text:000000000001068D                 xor     eax, eax
.text:000000000001068F                 mov     rcx, rsi
.text:0000000000010692                 mov     esi, 1
.text:0000000000010697                 call    ___fprintf_chk
.text:000000000001069C
.text:000000000001069C loc_1069C:                              ; CODE XREF: version_etc_arn+151↓j
.text:000000000001069C                 lea     rsi, aC_0       ; "(C)"
.text:00000000000106A3                 xor     edi, edi        ; domainname
.text:00000000000106A5                 mov     edx, 5          ; category
.text:00000000000106AA                 call    _dcgettext
.text:00000000000106AF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000106B6                 mov     rcx, rax
.text:00000000000106B9                 mov     r8d, 7E3h
.text:00000000000106BF                 mov     esi, 1
.text:00000000000106C4                 mov     rdi, rbp
.text:00000000000106C7                 xor     eax, eax
.text:00000000000106C9                 call    ___fprintf_chk
.text:00000000000106CE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:00000000000106D5                 xor     edi, edi        ; domainname
.text:00000000000106D7                 mov     edx, 5          ; category
.text:00000000000106DC                 call    _dcgettext
.text:00000000000106E1                 mov     rsi, rbp        ; stream
.text:00000000000106E4                 mov     rdi, rax        ; s
.text:00000000000106E7                 call    _fputs_unlocked
.text:00000000000106EC                 cmp     r12, 9          ; switch 10 cases
.text:00000000000106F0                 ja      def_10704       ; jumptable 0000000000010704 default case
.text:00000000000106F6                 lea     rdx, jpt_10704
.text:00000000000106FD                 movsxd  rax, ds:(jpt_10704 - 17304h)[rdx+r12*4]
.text:0000000000010701                 add     rax, rdx
.text:0000000000010704                 jmp     rax             ; switch jump
.text:0000000000010704 ; ---------------------------------------------------------------------------
.text:0000000000010706                 align 10h
.text:0000000000010710
.text:0000000000010710 loc_10710:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010710                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:0000000000010710                 mov     r9, [rbx+38h]   ; jumptable 0000000000010704 case 8
.text:0000000000010714                 mov     rax, [rbx+10h]
.text:0000000000010718                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000001071F                 mov     r8, [rbx+8]
.text:0000000000010723                 mov     edx, 5          ; category
.text:0000000000010728                 xor     edi, edi        ; domainname
.text:000000000001072A                 mov     r13, [rbx+30h]
.text:000000000001072E                 mov     r12, [rbx+28h]
.text:0000000000010732                 mov     [rsp+58h+var_48], r9
.text:0000000000010737                 mov     r15, [rbx+20h]
.text:000000000001073B                 mov     r14, [rbx+18h]
.text:000000000001073F                 mov     [rsp+58h+var_58], rax
.text:0000000000010743                 mov     [rsp+58h+var_50], r8
.text:0000000000010748                 mov     rbx, [rbx]
.text:000000000001074B                 call    _dcgettext
.text:0000000000010750                 sub     rsp, 8
.text:0000000000010754
.text:0000000000010754 loc_10754:                              ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000010754                 mov     r9, [rsp+60h+var_48]
.text:0000000000010759                 mov     rdx, rax
.text:000000000001075C                 mov     rcx, rbx
.text:000000000001075F                 mov     esi, 1
.text:0000000000010764                 mov     rdi, rbp
.text:0000000000010767                 xor     eax, eax
.text:0000000000010769                 push    r9
.text:000000000001076B                 push    r13
.text:000000000001076D                 push    r12
.text:000000000001076F                 push    r15
.text:0000000000010771                 push    r14
.text:0000000000010773                 mov     r9, [rsp+88h+var_58]
.text:0000000000010778                 mov     r8, [rsp+88h+var_50]
.text:000000000001077D                 call    ___fprintf_chk
.text:0000000000010782                 add     rsp, 30h
.text:0000000000010786
.text:0000000000010786 loc_10786:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010786                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:0000000000010786                 add     rsp, 28h        ; jumptable 0000000000010704 case 0
.text:000000000001078A                 pop     rbx
.text:000000000001078B                 pop     rbp
.text:000000000001078C                 pop     r12
.text:000000000001078E                 pop     r13
.text:0000000000010790                 pop     r14
.text:0000000000010792                 pop     r15
.text:0000000000010794                 retn
.text:0000000000010794 ; ---------------------------------------------------------------------------
.text:0000000000010795                 align 8
.text:0000000000010798
.text:0000000000010798 loc_10798:                              ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000010798                 mov     r8, rcx
.text:000000000001079B                 mov     rcx, rdx
.text:000000000001079E                 lea     rdx, aSS_1      ; "%s %s\n"
.text:00000000000107A5                 mov     esi, 1
.text:00000000000107AA                 xor     eax, eax
.text:00000000000107AC                 call    ___fprintf_chk
.text:00000000000107B1                 jmp     loc_1069C
.text:00000000000107B1 ; ---------------------------------------------------------------------------
.text:00000000000107B6                 align 20h
.text:00000000000107C0
.text:00000000000107C0 loc_107C0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000107C0                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:00000000000107C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000010704 case 9
.text:00000000000107C4                 mov     r9, [rbx+38h]
.text:00000000000107C8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000107CF                 mov     rax, [rbx+10h]
.text:00000000000107D3                 mov     r8, [rbx+8]
.text:00000000000107D7                 mov     edx, 5          ; category
.text:00000000000107DC                 mov     r13, [rbx+30h]
.text:00000000000107E0                 mov     r12, [rbx+28h]
.text:00000000000107E4                 mov     r15, [rbx+20h]
.text:00000000000107E8                 mov     r14, [rbx+18h]
.text:00000000000107EC                 mov     rbx, [rbx]
.text:00000000000107EF                 mov     [rsp+58h+var_40], r10
.text:00000000000107F4                 mov     [rsp+58h+var_48], r9
.text:00000000000107F9                 mov     [rsp+58h+var_58], rax
.text:00000000000107FD                 mov     [rsp+58h+var_50], r8
.text:0000000000010802
.text:0000000000010802 loc_10802:                              ; CODE XREF: version_etc_arn+412↓j
.text:0000000000010802                 xor     edi, edi        ; domainname
.text:0000000000010804                 call    _dcgettext
.text:0000000000010809                 mov     r10, [rsp+58h+var_40]
.text:000000000001080E                 push    r10
.text:0000000000010810                 jmp     loc_10754
.text:0000000000010810 ; ---------------------------------------------------------------------------
.text:0000000000010815                 align 8
.text:0000000000010818
.text:0000000000010818 loc_10818:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010818                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:0000000000010818                 mov     rbx, [rbx]      ; jumptable 0000000000010704 case 1
.text:000000000001081B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000010822                 mov     edx, 5          ; category
.text:0000000000010827                 xor     edi, edi        ; domainname
.text:0000000000010829                 call    _dcgettext
.text:000000000001082E                 add     rsp, 28h
.text:0000000000010832                 mov     rcx, rbx
.text:0000000000010835                 mov     rdi, rbp
.text:0000000000010838                 pop     rbx
.text:0000000000010839                 pop     rbp
.text:000000000001083A                 pop     r12
.text:000000000001083C                 pop     r13
.text:000000000001083E                 pop     r14
.text:0000000000010840                 pop     r15
.text:0000000000010842                 mov     rdx, rax
.text:0000000000010845                 mov     esi, 1
.text:000000000001084A                 xor     eax, eax
.text:000000000001084C                 jmp     ___fprintf_chk
.text:000000000001084C ; ---------------------------------------------------------------------------
.text:0000000000010851                 align 8
.text:0000000000010858
.text:0000000000010858 loc_10858:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010858                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:0000000000010858                 mov     r12, [rbx+8]    ; jumptable 0000000000010704 case 2
.text:000000000001085C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000010863                 mov     rbx, [rbx]
.text:0000000000010866                 mov     edx, 5          ; category
.text:000000000001086B                 xor     edi, edi        ; domainname
.text:000000000001086D                 call    _dcgettext
.text:0000000000010872                 add     rsp, 28h
.text:0000000000010876                 mov     r8, r12
.text:0000000000010879                 mov     rcx, rbx
.text:000000000001087C                 mov     rdi, rbp
.text:000000000001087F                 mov     rdx, rax
.text:0000000000010882                 mov     esi, 1
.text:0000000000010887                 pop     rbx
.text:0000000000010888                 pop     rbp
.text:0000000000010889                 pop     r12
.text:000000000001088B                 pop     r13
.text:000000000001088D                 pop     r14
.text:000000000001088F                 pop     r15
.text:0000000000010891                 xor     eax, eax
.text:0000000000010893                 jmp     ___fprintf_chk
.text:0000000000010893 ; ---------------------------------------------------------------------------
.text:0000000000010898                 align 20h
.text:00000000000108A0
.text:00000000000108A0 loc_108A0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000108A0                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:00000000000108A0                 mov     r13, [rbx+10h]  ; jumptable 0000000000010704 case 3
.text:00000000000108A4                 mov     r12, [rbx+8]
.text:00000000000108A8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000108AF                 mov     rbx, [rbx]
.text:00000000000108B2                 mov     edx, 5          ; category
.text:00000000000108B7                 xor     edi, edi        ; domainname
.text:00000000000108B9                 call    _dcgettext
.text:00000000000108BE                 add     rsp, 28h
.text:00000000000108C2                 mov     r9, r13
.text:00000000000108C5                 mov     r8, r12
.text:00000000000108C8                 mov     rcx, rbx
.text:00000000000108CB                 mov     rdi, rbp
.text:00000000000108CE                 mov     rdx, rax
.text:00000000000108D1                 pop     rbx
.text:00000000000108D2                 pop     rbp
.text:00000000000108D3                 pop     r12
.text:00000000000108D5                 pop     r13
.text:00000000000108D7                 pop     r14
.text:00000000000108D9                 pop     r15
.text:00000000000108DB                 mov     esi, 1
.text:00000000000108E0                 xor     eax, eax
.text:00000000000108E2                 jmp     ___fprintf_chk
.text:00000000000108E2 ; ---------------------------------------------------------------------------
.text:00000000000108E7                 align 10h
.text:00000000000108F0
.text:00000000000108F0 loc_108F0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000108F0                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:00000000000108F0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000010704 case 4
.text:00000000000108F7                 mov     edx, 5          ; category
.text:00000000000108FC                 xor     edi, edi        ; domainname
.text:00000000000108FE                 mov     r14, [rbx+18h]
.text:0000000000010902                 mov     r13, [rbx+10h]
.text:0000000000010906                 mov     r12, [rbx+8]
.text:000000000001090A                 mov     rbx, [rbx]
.text:000000000001090D                 call    _dcgettext
.text:0000000000010912                 sub     rsp, 8
.text:0000000000010916
.text:0000000000010916 loc_10916:                              ; CODE XREF: version_etc_arn+310↓j
.text:0000000000010916                 push    r14
.text:0000000000010918                 mov     rdx, rax
.text:000000000001091B                 mov     r9, r13
.text:000000000001091E                 mov     r8, r12
.text:0000000000010921                 mov     rcx, rbx
.text:0000000000010924                 mov     rdi, rbp
.text:0000000000010927                 mov     esi, 1
.text:000000000001092C                 xor     eax, eax
.text:000000000001092E                 call    ___fprintf_chk
.text:0000000000010933                 pop     rax
.text:0000000000010934                 pop     rdx
.text:0000000000010935                 add     rsp, 28h
.text:0000000000010939                 pop     rbx
.text:000000000001093A                 pop     rbp
.text:000000000001093B                 pop     r12
.text:000000000001093D                 pop     r13
.text:000000000001093F                 pop     r14
.text:0000000000010941                 pop     r15
.text:0000000000010943                 retn
.text:0000000000010943 ; ---------------------------------------------------------------------------
.text:0000000000010944                 align 8
.text:0000000000010948
.text:0000000000010948 loc_10948:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010948                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:0000000000010948                 mov     r15, [rbx+20h]  ; jumptable 0000000000010704 case 5
.text:000000000001094C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000010953                 mov     edx, 5          ; category
.text:0000000000010958                 xor     edi, edi        ; domainname
.text:000000000001095A                 mov     r14, [rbx+18h]
.text:000000000001095E                 mov     r13, [rbx+10h]
.text:0000000000010962                 mov     r12, [rbx+8]
.text:0000000000010966                 mov     rbx, [rbx]
.text:0000000000010969                 call    _dcgettext
.text:000000000001096E                 push    r15
.text:0000000000010970                 jmp     short loc_10916
.text:0000000000010970 ; ---------------------------------------------------------------------------
.text:0000000000010972                 align 8
.text:0000000000010978
.text:0000000000010978 loc_10978:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000010978                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:0000000000010978                 mov     r8, [rbx+8]     ; jumptable 0000000000010704 case 6
.text:000000000001097C                 mov     r12, [rbx+28h]
.text:0000000000010980                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000010987                 mov     r15, [rbx+20h]
.text:000000000001098B                 mov     r14, [rbx+18h]
.text:000000000001098F                 mov     edx, 5          ; category
.text:0000000000010994                 mov     r13, [rbx+10h]
.text:0000000000010998                 xor     edi, edi        ; domainname
.text:000000000001099A                 mov     rbx, [rbx]
.text:000000000001099D                 mov     [rsp+58h+var_58], r8
.text:00000000000109A1                 call    _dcgettext
.text:00000000000109A6                 sub     rsp, 8
.text:00000000000109AA                 mov     r9, r13
.text:00000000000109AD                 push    r12
.text:00000000000109AF                 push    r15
.text:00000000000109B1                 push    r14
.text:00000000000109B3
.text:00000000000109B3 loc_109B3:                              ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000109B3                 mov     r8, [rsp+78h+var_58]
.text:00000000000109B8                 mov     rcx, rbx
.text:00000000000109BB                 mov     rdx, rax
.text:00000000000109BE                 mov     rdi, rbp
.text:00000000000109C1                 mov     esi, 1
.text:00000000000109C6                 xor     eax, eax
.text:00000000000109C8                 call    ___fprintf_chk
.text:00000000000109CD                 add     rsp, 20h
.text:00000000000109D1                 add     rsp, 28h
.text:00000000000109D5                 pop     rbx
.text:00000000000109D6                 pop     rbp
.text:00000000000109D7                 pop     r12
.text:00000000000109D9                 pop     r13
.text:00000000000109DB                 pop     r14
.text:00000000000109DD                 pop     r15
.text:00000000000109DF                 retn
.text:00000000000109E0 ; ---------------------------------------------------------------------------
.text:00000000000109E0
.text:00000000000109E0 loc_109E0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000109E0                                         ; DATA XREF: .rodata:jpt_10704↓o
.text:00000000000109E0                 mov     r9, [rbx+10h]   ; jumptable 0000000000010704 case 7
.text:00000000000109E4                 mov     r13, [rbx+30h]
.text:00000000000109E8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000109EF                 mov     r12, [rbx+28h]
.text:00000000000109F3                 mov     r15, [rbx+20h]
.text:00000000000109F7                 mov     edx, 5          ; category
.text:00000000000109FC                 mov     r14, [rbx+18h]
.text:0000000000010A00                 mov     r8, [rbx+8]
.text:0000000000010A04                 xor     edi, edi        ; domainname
.text:0000000000010A06                 mov     [rsp+58h+var_50], r9
.text:0000000000010A0B                 mov     rbx, [rbx]
.text:0000000000010A0E                 mov     [rsp+58h+var_58], r8
.text:0000000000010A12                 call    _dcgettext
.text:0000000000010A17                 push    r13
.text:0000000000010A19                 push    r12
.text:0000000000010A1B                 push    r15
.text:0000000000010A1D                 push    r14
.text:0000000000010A1F                 mov     r9, [rsp+78h+var_50]
.text:0000000000010A24                 jmp     short loc_109B3
.text:0000000000010A24 ; ---------------------------------------------------------------------------
.text:0000000000010A26                 align 10h
.text:0000000000010A30
.text:0000000000010A30 def_10704:                              ; CODE XREF: version_etc_arn+90↑j
.text:0000000000010A30                 mov     r10, [rbx+40h]  ; jumptable 0000000000010704 default case
.text:0000000000010A34                 mov     r9, [rbx+38h]
.text:0000000000010A38                 mov     edx, 5
.text:0000000000010A3D                 mov     rax, [rbx+10h]
.text:0000000000010A41                 mov     r8, [rbx+8]
.text:0000000000010A45                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000010A4C                 mov     r13, [rbx+30h]
.text:0000000000010A50                 mov     r12, [rbx+28h]
.text:0000000000010A54                 mov     r15, [rbx+20h]
.text:0000000000010A58                 mov     r14, [rbx+18h]
.text:0000000000010A5C                 mov     [rsp+58h+var_40], r10
.text:0000000000010A61                 mov     [rsp+58h+var_48], r9
.text:0000000000010A66                 mov     [rsp+58h+var_58], rax
.text:0000000000010A6A                 mov     [rsp+58h+var_50], r8
.text:0000000000010A6F                 mov     rbx, [rbx]
.text:0000000000010A72                 jmp     loc_10802
.text:0000000000010A72 ; } // starts at 10660
.text:0000000000010A72 version_etc_arn endp
.text:0000000000010A72
.text:0000000000010A72 ; ---------------------------------------------------------------------------
.text:0000000000010A77                 align 20h
.text:0000000000010A80
.text:0000000000010A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000010A80
.text:0000000000010A80 ; Attributes: info_from_lumina
.text:0000000000010A80
.text:0000000000010A80 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000010A80                 public version_etc_ar
.text:0000000000010A80 version_etc_ar  proc near
.text:0000000000010A80 ; __unwind {
.text:0000000000010A80                 xor     r9d, r9d
.text:0000000000010A83                 cmp     qword ptr [r8], 0
.text:0000000000010A87                 jz      short loc_10A9B
.text:0000000000010A89                 nop     dword ptr [rax+00000000h]
.text:0000000000010A90
.text:0000000000010A90 loc_10A90:                              ; CODE XREF: version_etc_ar+19↓j
.text:0000000000010A90                 add     r9, 1
.text:0000000000010A94                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000010A99                 jnz     short loc_10A90
.text:0000000000010A9B
.text:0000000000010A9B loc_10A9B:                              ; CODE XREF: version_etc_ar+7↑j
.text:0000000000010A9B                 jmp     version_etc_arn
.text:0000000000010A9B ; } // starts at 10A80
.text:0000000000010A9B version_etc_ar  endp
.text:0000000000010A9B
.text:0000000000010AA0
.text:0000000000010AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010AA0
.text:0000000000010AA0 ; Attributes: info_from_lumina
.text:0000000000010AA0
.text:0000000000010AA0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000010AA0                 public version_etc_va
.text:0000000000010AA0 version_etc_va  proc near
.text:0000000000010AA0
.text:0000000000010AA0 authtab         = qword ptr -68h
.text:0000000000010AA0 var_10          = qword ptr -10h
.text:0000000000010AA0
.text:0000000000010AA0 ; __unwind {
.text:0000000000010AA0                 sub     rsp, 68h
.text:0000000000010AA4                 mov     r10, r8
.text:0000000000010AA7                 xor     r9d, r9d
.text:0000000000010AAA                 mov     rax, fs:28h
.text:0000000000010AB3                 mov     [rsp+68h+var_10], rax
.text:0000000000010AB8                 xor     eax, eax
.text:0000000000010ABA                 mov     r8, rsp
.text:0000000000010ABD                 nop     dword ptr [rax]
.text:0000000000010AC0
.text:0000000000010AC0 loc_10AC0:                              ; CODE XREF: version_etc_va+49↓j
.text:0000000000010AC0                 mov     eax, [r10]
.text:0000000000010AC3                 cmp     eax, 2Fh ; '/'
.text:0000000000010AC6                 ja      short loc_10B0A
.text:0000000000010AC8                 mov     r11d, eax
.text:0000000000010ACB                 add     r11, [r10+10h]
.text:0000000000010ACF                 add     eax, 8
.text:0000000000010AD2                 mov     [r10], eax
.text:0000000000010AD5
.text:0000000000010AD5 loc_10AD5:                              ; CODE XREF: version_etc_va+76↓j
.text:0000000000010AD5                 mov     rax, [r11]
.text:0000000000010AD8                 test    rax, rax
.text:0000000000010ADB                 mov     [r8+r9*8], rax
.text:0000000000010ADF                 jz      short loc_10AEB
.text:0000000000010AE1                 add     r9, 1
.text:0000000000010AE5                 cmp     r9, 0Ah
.text:0000000000010AE9                 jnz     short loc_10AC0
.text:0000000000010AEB
.text:0000000000010AEB loc_10AEB:                              ; CODE XREF: version_etc_va+3F↑j
.text:0000000000010AEB                 call    version_etc_arn
.text:0000000000010AF0                 mov     rax, [rsp+68h+var_10]
.text:0000000000010AF5                 xor     rax, fs:28h
.text:0000000000010AFE                 jnz     short loc_10B05
.text:0000000000010B00                 add     rsp, 68h
.text:0000000000010B04                 retn
.text:0000000000010B05 ; ---------------------------------------------------------------------------
.text:0000000000010B05
.text:0000000000010B05 loc_10B05:                              ; CODE XREF: version_etc_va+5E↑j
.text:0000000000010B05                 call    ___stack_chk_fail
.text:0000000000010B0A ; ---------------------------------------------------------------------------
.text:0000000000010B0A
.text:0000000000010B0A loc_10B0A:                              ; CODE XREF: version_etc_va+26↑j
.text:0000000000010B0A                 mov     r11, [r10+8]
.text:0000000000010B0E                 lea     rax, [r11+8]
.text:0000000000010B12                 mov     [r10+8], rax
.text:0000000000010B16                 jmp     short loc_10AD5
.text:0000000000010B16 ; } // starts at 10AA0
.text:0000000000010B16 version_etc_va  endp
.text:0000000000010B16
.text:0000000000010B16 ; ---------------------------------------------------------------------------
.text:0000000000010B18                 align 20h
.text:0000000000010B20
.text:0000000000010B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000010B20
.text:0000000000010B20 ; Attributes: info_from_lumina
.text:0000000000010B20
.text:0000000000010B20 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000010B20                 public version_etc
.text:0000000000010B20 version_etc     proc near               ; CODE XREF: main+261↑p
.text:0000000000010B20
.text:0000000000010B20 var_C0          = dword ptr -0C0h
.text:0000000000010B20 var_B8          = qword ptr -0B8h
.text:0000000000010B20 var_B0          = qword ptr -0B0h
.text:0000000000010B20 var_A8          = byte ptr -0A8h
.text:0000000000010B20 var_50          = qword ptr -50h
.text:0000000000010B20 var_48          = byte ptr -48h
.text:0000000000010B20 var_28          = qword ptr -28h
.text:0000000000010B20 var_20          = qword ptr -20h
.text:0000000000010B20 arg_0           = byte ptr  8
.text:0000000000010B20
.text:0000000000010B20 ; __unwind {
.text:0000000000010B20                 push    rbp
.text:0000000000010B21                 push    rbx
.text:0000000000010B22                 mov     r10d, 20h ; ' '
.text:0000000000010B28                 xor     r11d, r11d
.text:0000000000010B2B                 sub     rsp, 0B8h
.text:0000000000010B32                 mov     rax, fs:28h
.text:0000000000010B3B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000010B40                 xor     eax, eax
.text:0000000000010B42                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000010B4A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000010B52                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000010B5A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000010B5F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000010B67                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000010B6F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000010B74                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000010B7C                 xor     r9d, r9d
.text:0000000000010B7F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000010B84                 mov     rbp, rax
.text:0000000000010B87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000010B90
.text:0000000000010B90 loc_10B90:                              ; CODE XREF: version_etc+9A↓j
.text:0000000000010B90                 cmp     r10d, 2Fh ; '/'
.text:0000000000010B94                 ja      short loc_10BEC
.text:0000000000010B96                 mov     eax, r10d
.text:0000000000010B99                 mov     r11d, 1
.text:0000000000010B9F                 add     r10d, 8
.text:0000000000010BA3                 add     rax, rbp
.text:0000000000010BA6
.text:0000000000010BA6 loc_10BA6:                              ; CODE XREF: version_etc+D3↓j
.text:0000000000010BA6                 mov     rax, [rax]
.text:0000000000010BA9                 test    rax, rax
.text:0000000000010BAC                 mov     [r8+r9*8], rax
.text:0000000000010BB0                 jz      short loc_10BBC
.text:0000000000010BB2                 add     r9, 1
.text:0000000000010BB6                 cmp     r9, 0Ah
.text:0000000000010BBA                 jnz     short loc_10B90
.text:0000000000010BBC
.text:0000000000010BBC loc_10BBC:                              ; CODE XREF: version_etc+90↑j
.text:0000000000010BBC                 test    r11b, r11b
.text:0000000000010BBF                 jnz     short loc_10BE5
.text:0000000000010BC1
.text:0000000000010BC1 loc_10BC1:                              ; CODE XREF: version_etc+CA↓j
.text:0000000000010BC1                 call    version_etc_arn
.text:0000000000010BC6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000010BCB                 xor     rax, fs:28h
.text:0000000000010BD4                 jnz     short loc_10BE0
.text:0000000000010BD6                 add     rsp, 0B8h
.text:0000000000010BDD                 pop     rbx
.text:0000000000010BDE                 pop     rbp
.text:0000000000010BDF                 retn
.text:0000000000010BE0 ; ---------------------------------------------------------------------------
.text:0000000000010BE0
.text:0000000000010BE0 loc_10BE0:                              ; CODE XREF: version_etc+B4↑j
.text:0000000000010BE0                 call    ___stack_chk_fail
.text:0000000000010BE5 ; ---------------------------------------------------------------------------
.text:0000000000010BE5
.text:0000000000010BE5 loc_10BE5:                              ; CODE XREF: version_etc+9F↑j
.text:0000000000010BE5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000010BEA                 jmp     short loc_10BC1
.text:0000000000010BEC ; ---------------------------------------------------------------------------
.text:0000000000010BEC
.text:0000000000010BEC loc_10BEC:                              ; CODE XREF: version_etc+74↑j
.text:0000000000010BEC                 mov     rax, rbx
.text:0000000000010BEF                 add     rbx, 8
.text:0000000000010BF3                 jmp     short loc_10BA6
.text:0000000000010BF3 ; } // starts at 10B20
.text:0000000000010BF3 version_etc     endp
.text:0000000000010BF3
.text:0000000000010BF3 ; ---------------------------------------------------------------------------
.text:0000000000010BF5                 align 20h
.text:0000000000010C00
.text:0000000000010C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000010C00
.text:0000000000010C00 ; Attributes: info_from_lumina
.text:0000000000010C00
.text:0000000000010C00 ; void __cdecl emit_bug_reporting_address()
.text:0000000000010C00                 public emit_bug_reporting_address
.text:0000000000010C00 emit_bug_reporting_address proc near
.text:0000000000010C00 ; __unwind {
.text:0000000000010C00                 push    rbx
.text:0000000000010C01                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000010C08                 mov     edx, 5          ; category
.text:0000000000010C0D                 xor     edi, edi        ; domainname
.text:0000000000010C0F                 call    _dcgettext
.text:0000000000010C14                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000010C1B                 mov     rsi, rax
.text:0000000000010C1E                 mov     edi, 1
.text:0000000000010C23                 xor     eax, eax
.text:0000000000010C25                 call    ___printf_chk
.text:0000000000010C2A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000010C31                 mov     edx, 5          ; category
.text:0000000000010C36                 xor     edi, edi        ; domainname
.text:0000000000010C38                 call    _dcgettext
.text:0000000000010C3D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000010C44                 lea     rdx, unk_14FAE
.text:0000000000010C4B                 mov     rsi, rax
.text:0000000000010C4E                 mov     edi, 1
.text:0000000000010C53                 xor     eax, eax
.text:0000000000010C55                 call    ___printf_chk
.text:0000000000010C5A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000010C61                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000010C68                 xor     edi, edi        ; domainname
.text:0000000000010C6A                 mov     edx, 5          ; category
.text:0000000000010C6F                 call    _dcgettext
.text:0000000000010C74                 mov     rsi, rbx        ; stream
.text:0000000000010C77                 mov     rdi, rax        ; s
.text:0000000000010C7A                 pop     rbx
.text:0000000000010C7B                 jmp     _fputs_unlocked
.text:0000000000010C7B ; } // starts at 10C00
.text:0000000000010C7B emit_bug_reporting_address endp
.text:0000000000010C7B
.text:0000000000010C80
.text:0000000000010C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000010C80
.text:0000000000010C80
.text:0000000000010C80                 public can_write_any_file
.text:0000000000010C80 can_write_any_file proc near            ; CODE XREF: prompt:loc_3F98↑p
.text:0000000000010C80                                         ; writable_destination+12↑p
.text:0000000000010C80 ; __unwind {
.text:0000000000010C80                 cmp     cs:initialized_3064, 0
.text:0000000000010C87                 jz      short loc_10C98
.text:0000000000010C89                 movzx   eax, cs:can_write_3065
.text:0000000000010C90                 retn
.text:0000000000010C90 ; ---------------------------------------------------------------------------
.text:0000000000010C91                 align 8
.text:0000000000010C98
.text:0000000000010C98 loc_10C98:                              ; CODE XREF: can_write_any_file+7↑j
.text:0000000000010C98                 sub     rsp, 8
.text:0000000000010C9C                 call    _geteuid
.text:0000000000010CA1                 test    eax, eax
.text:0000000000010CA3                 mov     cs:initialized_3064, 1
.text:0000000000010CAA                 setz    al
.text:0000000000010CAD                 mov     cs:can_write_3065, al
.text:0000000000010CB3                 add     rsp, 8
.text:0000000000010CB7                 retn
.text:0000000000010CB7 ; } // starts at 10C80
.text:0000000000010CB7 can_write_any_file endp
.text:0000000000010CB7
.text:0000000000010CB7 ; ---------------------------------------------------------------------------
.text:0000000000010CB8                 align 20h
.text:0000000000010CC0
.text:0000000000010CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010CC0
.text:0000000000010CC0
.text:0000000000010CC0                 public xmalloc
.text:0000000000010CC0 xmalloc         proc near               ; CODE XREF: copy_internal+2886↑p
.text:0000000000010CC0                                         ; copy_internal+303B↑p ...
.text:0000000000010CC0 ; __unwind {
.text:0000000000010CC0                 push    rbx
.text:0000000000010CC1                 mov     rbx, rdi
.text:0000000000010CC4                 call    _malloc
.text:0000000000010CC9                 test    rax, rax
.text:0000000000010CCC                 jnz     short loc_10CD3
.text:0000000000010CCE                 test    rbx, rbx
.text:0000000000010CD1                 jnz     short loc_10CD5
.text:0000000000010CD3
.text:0000000000010CD3 loc_10CD3:                              ; CODE XREF: xmalloc+C↑j
.text:0000000000010CD3                 pop     rbx
.text:0000000000010CD4                 retn
.text:0000000000010CD5 ; ---------------------------------------------------------------------------
.text:0000000000010CD5
.text:0000000000010CD5 loc_10CD5:                              ; CODE XREF: xmalloc+11↑j
.text:0000000000010CD5                 call    xalloc_die
.text:0000000000010CD5 ; } // starts at 10CC0
.text:0000000000010CD5 xmalloc         endp
.text:0000000000010CD5
.text:0000000000010CD5 ; ---------------------------------------------------------------------------
.text:0000000000010CDA                 align 20h
.text:0000000000010CE0
.text:0000000000010CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010CE0
.text:0000000000010CE0 ; Attributes: info_from_lumina
.text:0000000000010CE0
.text:0000000000010CE0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000010CE0                 public xnmalloc
.text:0000000000010CE0 xnmalloc        proc near
.text:0000000000010CE0 ; __unwind {
.text:0000000000010CE0                 mov     rax, rdi
.text:0000000000010CE3                 mul     rsi
.text:0000000000010CE6                 mov     rdi, rax
.text:0000000000010CE9                 seto    al
.text:0000000000010CEC                 test    rdi, rdi
.text:0000000000010CEF                 js      short loc_10CFB
.text:0000000000010CF1                 movzx   eax, al
.text:0000000000010CF4                 test    rax, rax
.text:0000000000010CF7                 jnz     short loc_10CFB
.text:0000000000010CF9                 jmp     short xmalloc
.text:0000000000010CFB ; ---------------------------------------------------------------------------
.text:0000000000010CFB
.text:0000000000010CFB loc_10CFB:                              ; CODE XREF: xnmalloc+F↑j
.text:0000000000010CFB                                         ; xnmalloc+17↑j
.text:0000000000010CFB                 sub     rsp, 8
.text:0000000000010CFF                 call    xalloc_die
.text:0000000000010CFF ; } // starts at 10CE0
.text:0000000000010CFF xnmalloc        endp
.text:0000000000010CFF
.text:0000000000010CFF ; ---------------------------------------------------------------------------
.text:0000000000010D04                 align 10h
.text:0000000000010D10
.text:0000000000010D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000010D10
.text:0000000000010D10
.text:0000000000010D10                 public xcharalloc
.text:0000000000010D10 xcharalloc      proc near
.text:0000000000010D10 ; __unwind {
.text:0000000000010D10                 jmp     short xmalloc
.text:0000000000010D10 ; } // starts at 10D10
.text:0000000000010D10 xcharalloc      endp
.text:0000000000010D10
.text:0000000000010D10 ; ---------------------------------------------------------------------------
.text:0000000000010D12                 align 20h
.text:0000000000010D20
.text:0000000000010D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000010D20
.text:0000000000010D20 ; Attributes: info_from_lumina
.text:0000000000010D20
.text:0000000000010D20 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000010D20                 public xrealloc
.text:0000000000010D20 xrealloc        proc near               ; CODE XREF: extent_scan_read+E0↑p
.text:0000000000010D20                                         ; quotearg_n_options+6E↑p ...
.text:0000000000010D20 ; __unwind {
.text:0000000000010D20                 test    rsi, rsi
.text:0000000000010D23                 push    rbx
.text:0000000000010D24                 mov     rbx, rsi
.text:0000000000010D27                 jnz     short loc_10D2E
.text:0000000000010D29                 test    rdi, rdi
.text:0000000000010D2C                 jnz     short loc_10D48
.text:0000000000010D2E
.text:0000000000010D2E loc_10D2E:                              ; CODE XREF: xrealloc+7↑j
.text:0000000000010D2E                 mov     rsi, rbx        ; size
.text:0000000000010D31                 call    _realloc
.text:0000000000010D36                 test    rax, rax
.text:0000000000010D39                 jnz     short loc_10D40
.text:0000000000010D3B                 test    rbx, rbx
.text:0000000000010D3E                 jnz     short loc_10D51
.text:0000000000010D40
.text:0000000000010D40 loc_10D40:                              ; CODE XREF: xrealloc+19↑j
.text:0000000000010D40                 pop     rbx
.text:0000000000010D41                 retn
.text:0000000000010D41 ; ---------------------------------------------------------------------------
.text:0000000000010D42                 align 8
.text:0000000000010D48
.text:0000000000010D48 loc_10D48:                              ; CODE XREF: xrealloc+C↑j
.text:0000000000010D48                 call    free
.text:0000000000010D4D                 xor     eax, eax
.text:0000000000010D4F                 pop     rbx
.text:0000000000010D50                 retn
.text:0000000000010D51 ; ---------------------------------------------------------------------------
.text:0000000000010D51
.text:0000000000010D51 loc_10D51:                              ; CODE XREF: xrealloc+1E↑j
.text:0000000000010D51                 call    xalloc_die
.text:0000000000010D51 ; } // starts at 10D20
.text:0000000000010D51 xrealloc        endp
.text:0000000000010D51
.text:0000000000010D51 ; ---------------------------------------------------------------------------
.text:0000000000010D56                 align 20h
.text:0000000000010D60
.text:0000000000010D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000010D60
.text:0000000000010D60 ; Attributes: info_from_lumina
.text:0000000000010D60
.text:0000000000010D60 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000010D60                 public xnrealloc
.text:0000000000010D60 xnrealloc       proc near
.text:0000000000010D60 ; __unwind {
.text:0000000000010D60                 mov     rax, rsi
.text:0000000000010D63                 mul     rdx
.text:0000000000010D66                 mov     rsi, rax
.text:0000000000010D69                 seto    al
.text:0000000000010D6C                 test    rsi, rsi
.text:0000000000010D6F                 js      short loc_10D7B
.text:0000000000010D71                 movzx   eax, al
.text:0000000000010D74                 test    rax, rax
.text:0000000000010D77                 jnz     short loc_10D7B
.text:0000000000010D79                 jmp     short xrealloc
.text:0000000000010D7B ; ---------------------------------------------------------------------------
.text:0000000000010D7B
.text:0000000000010D7B loc_10D7B:                              ; CODE XREF: xnrealloc+F↑j
.text:0000000000010D7B                                         ; xnrealloc+17↑j
.text:0000000000010D7B                 sub     rsp, 8
.text:0000000000010D7F                 call    xalloc_die
.text:0000000000010D7F ; } // starts at 10D60
.text:0000000000010D7F xnrealloc       endp
.text:0000000000010D7F
.text:0000000000010D7F ; ---------------------------------------------------------------------------
.text:0000000000010D84                 align 10h
.text:0000000000010D90
.text:0000000000010D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000010D90
.text:0000000000010D90 ; Attributes: info_from_lumina
.text:0000000000010D90
.text:0000000000010D90 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000010D90                 public x2nrealloc
.text:0000000000010D90 x2nrealloc      proc near
.text:0000000000010D90 ; __unwind {
.text:0000000000010D90                 test    rdi, rdi
.text:0000000000010D93                 mov     r9, rdx
.text:0000000000010D96                 mov     rcx, [rsi]
.text:0000000000010D99                 jz      short loc_10DD0
.text:0000000000010D9B                 xor     edx, edx
.text:0000000000010D9D                 mov     rax, 5555555555555554h
.text:0000000000010DA7                 div     r9
.text:0000000000010DAA                 cmp     rax, rcx
.text:0000000000010DAD                 jbe     short loc_10DEB
.text:0000000000010DAF                 mov     rax, rcx
.text:0000000000010DB2                 shr     rax, 1
.text:0000000000010DB5                 lea     rcx, [rax+rcx+1]
.text:0000000000010DBA
.text:0000000000010DBA loc_10DBA:                              ; CODE XREF: x2nrealloc+59↓j
.text:0000000000010DBA                 mov     [rsi], rcx
.text:0000000000010DBD                 imul    rcx, r9
.text:0000000000010DC1                 mov     rsi, rcx
.text:0000000000010DC4                 jmp     xrealloc
.text:0000000000010DC4 ; ---------------------------------------------------------------------------
.text:0000000000010DC9                 align 10h
.text:0000000000010DD0
.text:0000000000010DD0 loc_10DD0:                              ; CODE XREF: x2nrealloc+9↑j
.text:0000000000010DD0                 test    rcx, rcx
.text:0000000000010DD3                 jz      short loc_10DF8
.text:0000000000010DD5
.text:0000000000010DD5 loc_10DD5:                              ; CODE XREF: x2nrealloc+80↓j
.text:0000000000010DD5                 mov     rax, rcx
.text:0000000000010DD8                 mul     r9
.text:0000000000010DDB                 seto    dl
.text:0000000000010DDE                 test    rax, rax
.text:0000000000010DE1                 movzx   edx, dl
.text:0000000000010DE4                 js      short loc_10DEB
.text:0000000000010DE6                 test    rdx, rdx
.text:0000000000010DE9                 jz      short loc_10DBA
.text:0000000000010DEB
.text:0000000000010DEB loc_10DEB:                              ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000010DEB                                         ; x2nrealloc+54↑j
.text:0000000000010DEB                 sub     rsp, 8
.text:0000000000010DEF                 call    xalloc_die
.text:0000000000010DEF ; ---------------------------------------------------------------------------
.text:0000000000010DF4                 align 8
.text:0000000000010DF8
.text:0000000000010DF8 loc_10DF8:                              ; CODE XREF: x2nrealloc+43↑j
.text:0000000000010DF8                 xor     edx, edx
.text:0000000000010DFA                 mov     eax, 80h
.text:0000000000010DFF                 xor     r8d, r8d
.text:0000000000010E02                 div     r9
.text:0000000000010E05                 test    rax, rax
.text:0000000000010E08                 setz    r8b
.text:0000000000010E0C                 lea     rcx, [r8+rax]
.text:0000000000010E10                 jmp     short loc_10DD5
.text:0000000000010E10 ; } // starts at 10D90
.text:0000000000010E10 x2nrealloc      endp
.text:0000000000010E10
.text:0000000000010E10 ; ---------------------------------------------------------------------------
.text:0000000000010E12                 align 20h
.text:0000000000010E20
.text:0000000000010E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000010E20
.text:0000000000010E20 ; Attributes: info_from_lumina
.text:0000000000010E20
.text:0000000000010E20 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000010E20                 public x2realloc
.text:0000000000010E20 x2realloc       proc near
.text:0000000000010E20 ; __unwind {
.text:0000000000010E20                 test    rdi, rdi
.text:0000000000010E23                 mov     rax, [rsi]
.text:0000000000010E26                 jz      short loc_10E50
.text:0000000000010E28                 mov     rdx, 5555555555555553h
.text:0000000000010E32                 cmp     rax, rdx
.text:0000000000010E35                 ja      short loc_10E61
.text:0000000000010E37                 mov     rdx, rax
.text:0000000000010E3A                 shr     rdx, 1
.text:0000000000010E3D                 lea     rax, [rdx+rax+1]
.text:0000000000010E42
.text:0000000000010E42 loc_10E42:                              ; CODE XREF: x2realloc+3F↓j
.text:0000000000010E42                 mov     [rsi], rax
.text:0000000000010E45                 mov     rsi, rax
.text:0000000000010E48                 jmp     xrealloc
.text:0000000000010E48 ; ---------------------------------------------------------------------------
.text:0000000000010E4D                 align 10h
.text:0000000000010E50
.text:0000000000010E50 loc_10E50:                              ; CODE XREF: x2realloc+6↑j
.text:0000000000010E50                 test    rax, rax
.text:0000000000010E53                 mov     edx, 80h
.text:0000000000010E58                 cmovz   rax, rdx
.text:0000000000010E5C                 test    rax, rax
.text:0000000000010E5F                 jns     short loc_10E42
.text:0000000000010E61
.text:0000000000010E61 loc_10E61:                              ; CODE XREF: x2realloc+15↑j
.text:0000000000010E61                 sub     rsp, 8
.text:0000000000010E65                 call    xalloc_die
.text:0000000000010E65 ; } // starts at 10E20
.text:0000000000010E65 x2realloc       endp
.text:0000000000010E65
.text:0000000000010E65 ; ---------------------------------------------------------------------------
.text:0000000000010E6A                 align 10h
.text:0000000000010E70
.text:0000000000010E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000010E70
.text:0000000000010E70
.text:0000000000010E70 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000010E70                 public xzalloc
.text:0000000000010E70 xzalloc         proc near
.text:0000000000010E70 ; __unwind {
.text:0000000000010E70                 push    rbx
.text:0000000000010E71                 mov     rbx, rdi
.text:0000000000010E74                 call    xmalloc
.text:0000000000010E79                 mov     rdx, rbx        ; n
.text:0000000000010E7C                 xor     esi, esi        ; c
.text:0000000000010E7E                 mov     rdi, rax        ; s
.text:0000000000010E81                 pop     rbx
.text:0000000000010E82                 jmp     _memset
.text:0000000000010E82 ; } // starts at 10E70
.text:0000000000010E82 xzalloc         endp
.text:0000000000010E82
.text:0000000000010E82 ; ---------------------------------------------------------------------------
.text:0000000000010E87                 align 10h
.text:0000000000010E90
.text:0000000000010E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000010E90
.text:0000000000010E90 ; Attributes: info_from_lumina
.text:0000000000010E90
.text:0000000000010E90 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000010E90                 public xcalloc
.text:0000000000010E90 xcalloc         proc near
.text:0000000000010E90 ; __unwind {
.text:0000000000010E90                 mov     rax, rdi
.text:0000000000010E93                 sub     rsp, 8
.text:0000000000010E97                 mul     rsi
.text:0000000000010E9A                 seto    dl
.text:0000000000010E9D                 test    rax, rax
.text:0000000000010EA0                 js      short loc_10EB9
.text:0000000000010EA2                 movzx   edx, dl
.text:0000000000010EA5                 test    rdx, rdx
.text:0000000000010EA8                 jnz     short loc_10EB9
.text:0000000000010EAA                 call    _calloc
.text:0000000000010EAF                 test    rax, rax
.text:0000000000010EB2                 jz      short loc_10EB9
.text:0000000000010EB4                 add     rsp, 8
.text:0000000000010EB8                 retn
.text:0000000000010EB9 ; ---------------------------------------------------------------------------
.text:0000000000010EB9
.text:0000000000010EB9 loc_10EB9:                              ; CODE XREF: xcalloc+10↑j
.text:0000000000010EB9                                         ; xcalloc+18↑j ...
.text:0000000000010EB9                 call    xalloc_die
.text:0000000000010EB9 ; } // starts at 10E90
.text:0000000000010EB9 xcalloc         endp
.text:0000000000010EB9
.text:0000000000010EB9 ; ---------------------------------------------------------------------------
.text:0000000000010EBE                 align 20h
.text:0000000000010EC0
.text:0000000000010EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010EC0
.text:0000000000010EC0 ; Attributes: info_from_lumina
.text:0000000000010EC0
.text:0000000000010EC0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000010EC0                 public xmemdup
.text:0000000000010EC0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000010EC0                                         ; xstrdup+11↓j
.text:0000000000010EC0 ; __unwind {
.text:0000000000010EC0                 push    rbp
.text:0000000000010EC1                 push    rbx
.text:0000000000010EC2                 mov     rbp, rdi
.text:0000000000010EC5                 mov     rdi, rsi
.text:0000000000010EC8                 mov     rbx, rsi
.text:0000000000010ECB                 sub     rsp, 8
.text:0000000000010ECF                 call    xmalloc
.text:0000000000010ED4                 add     rsp, 8
.text:0000000000010ED8                 mov     rdx, rbx        ; n
.text:0000000000010EDB                 mov     rsi, rbp        ; src
.text:0000000000010EDE                 pop     rbx
.text:0000000000010EDF                 pop     rbp
.text:0000000000010EE0                 mov     rdi, rax        ; dest
.text:0000000000010EE3                 jmp     _memcpy
.text:0000000000010EE3 ; } // starts at 10EC0
.text:0000000000010EE3 xmemdup         endp
.text:0000000000010EE3
.text:0000000000010EE3 ; ---------------------------------------------------------------------------
.text:0000000000010EE8                 align 10h
.text:0000000000010EF0
.text:0000000000010EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010EF0
.text:0000000000010EF0
.text:0000000000010EF0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000010EF0                 public xstrdup
.text:0000000000010EF0 xstrdup         proc near               ; CODE XREF: remember_copied+23↑p
.text:0000000000010EF0                                         ; record_file+28↑p ...
.text:0000000000010EF0 ; __unwind {
.text:0000000000010EF0                 push    rbx
.text:0000000000010EF1                 mov     rbx, rdi
.text:0000000000010EF4                 call    _strlen
.text:0000000000010EF9                 mov     rdi, rbx        ; src
.text:0000000000010EFC                 lea     rsi, [rax+1]    ; n
.text:0000000000010F00                 pop     rbx
.text:0000000000010F01                 jmp     short xmemdup
.text:0000000000010F01 ; } // starts at 10EF0
.text:0000000000010F01 xstrdup         endp
.text:0000000000010F01
.text:0000000000010F01 ; ---------------------------------------------------------------------------
.text:0000000000010F03                 align 10h
.text:0000000000010F10
.text:0000000000010F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000010F10
.text:0000000000010F10 ; Attributes: noreturn info_from_lumina
.text:0000000000010F10
.text:0000000000010F10 ; void __cdecl xalloc_die()
.text:0000000000010F10                 public xalloc_die
.text:0000000000010F10 xalloc_die      proc near               ; CODE XREF: remember_copied:loc_9D54↑p
.text:0000000000010F10                                         ; hash_init:loc_9D96↑p ...
.text:0000000000010F10 ; __unwind {
.text:0000000000010F10                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000010F17                 sub     rsp, 8
.text:0000000000010F1B                 mov     edx, 5          ; category
.text:0000000000010F20                 xor     edi, edi        ; domainname
.text:0000000000010F22                 call    _dcgettext
.text:0000000000010F27                 mov     edi, cs:exit_failure ; status
.text:0000000000010F2D                 lea     rdx, aS_0+2     ; format
.text:0000000000010F34                 mov     rcx, rax
.text:0000000000010F37                 xor     esi, esi        ; errnum
.text:0000000000010F39                 xor     eax, eax
.text:0000000000010F3B                 call    _error
.text:0000000000010F40                 call    _abort
.text:0000000000010F40 ; } // starts at 10F10
.text:0000000000010F40 xalloc_die      endp
.text:0000000000010F40
.text:0000000000010F40 ; ---------------------------------------------------------------------------
.text:0000000000010F45                 align 10h
.text:0000000000010F50
.text:0000000000010F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000010F50
.text:0000000000010F50
.text:0000000000010F50                 public xfts_open
.text:0000000000010F50 xfts_open       proc near               ; CODE XREF: rm+4E↑p
.text:0000000000010F50 ; __unwind {
.text:0000000000010F50                 sub     rsp, 8
.text:0000000000010F54                 or      esi, 200h
.text:0000000000010F5A                 call    rpl_fts_open
.text:0000000000010F5F                 test    rax, rax
.text:0000000000010F62                 jz      short loc_10F70
.text:0000000000010F64                 add     rsp, 8
.text:0000000000010F68                 retn
.text:0000000000010F68 ; ---------------------------------------------------------------------------
.text:0000000000010F69                 align 10h
.text:0000000000010F70
.text:0000000000010F70 loc_10F70:                              ; CODE XREF: xfts_open+12↑j
.text:0000000000010F70                 call    ___errno_location
.text:0000000000010F75                 cmp     dword ptr [rax], 16h
.text:0000000000010F78                 jz      short loc_10F80
.text:0000000000010F7A                 call    xalloc_die
.text:0000000000010F7A ; ---------------------------------------------------------------------------
.text:0000000000010F7F                 align 20h
.text:0000000000010F80
.text:0000000000010F80 loc_10F80:                              ; CODE XREF: xfts_open+28↑j
.text:0000000000010F80                 lea     rcx, __PRETTY_FUNCTION___3434 ; "xfts_open"
.text:0000000000010F87                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/xfts.c"
.text:0000000000010F8E                 lea     rdi, aErrnoEinval ; "errno != EINVAL"
.text:0000000000010F95                 mov     edx, 29h ; ')'  ; line
.text:0000000000010F9A                 call    ___assert_fail
.text:0000000000010F9A ; } // starts at 10F50
.text:0000000000010F9A xfts_open       endp
.text:0000000000010F9A
.text:0000000000010F9A ; ---------------------------------------------------------------------------
.text:0000000000010F9F                 align 20h
.text:0000000000010FA0
.text:0000000000010FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010FA0
.text:0000000000010FA0
.text:0000000000010FA0                 public cycle_warning_required
.text:0000000000010FA0 cycle_warning_required proc near
.text:0000000000010FA0 ; __unwind {
.text:0000000000010FA0                 mov     edx, [rdi+48h]
.text:0000000000010FA3                 mov     eax, 1
.text:0000000000010FA8                 and     edx, 11h
.text:0000000000010FAB                 cmp     edx, 10h
.text:0000000000010FAE                 jz      short locret_10FB7
.text:0000000000010FB0                 xor     eax, eax
.text:0000000000010FB2                 cmp     edx, 11h
.text:0000000000010FB5                 jz      short loc_10FC0
.text:0000000000010FB7
.text:0000000000010FB7 locret_10FB7:                           ; CODE XREF: cycle_warning_required+E↑j
.text:0000000000010FB7                 rep retn
.text:0000000000010FB7 ; ---------------------------------------------------------------------------
.text:0000000000010FB9                 align 20h
.text:0000000000010FC0
.text:0000000000010FC0 loc_10FC0:                              ; CODE XREF: cycle_warning_required+15↑j
.text:0000000000010FC0                 cmp     qword ptr [rsi+58h], 0
.text:0000000000010FC5                 setnz   al
.text:0000000000010FC8                 retn
.text:0000000000010FC8 ; } // starts at 10FA0
.text:0000000000010FC8 cycle_warning_required endp
.text:0000000000010FC8
.text:0000000000010FC8 ; ---------------------------------------------------------------------------
.text:0000000000010FC9                 align 10h
.text:0000000000010FD0
.text:0000000000010FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000010FD0
.text:0000000000010FD0
.text:0000000000010FD0                 public yesno
.text:0000000000010FD0 yesno           proc near               ; CODE XREF: prompt:loc_4091↑p
.text:0000000000010FD0                                         ; overwrite_ok_isra_12:loc_4FCE↑p
.text:0000000000010FD0
.text:0000000000010FD0 lineptr         = qword ptr -20h
.text:0000000000010FD0 n               = qword ptr -18h
.text:0000000000010FD0 var_10          = qword ptr -10h
.text:0000000000010FD0
.text:0000000000010FD0 ; __unwind {
.text:0000000000010FD0                 push    rbx
.text:0000000000010FD1                 mov     edx, 0Ah        ; delimiter
.text:0000000000010FD6                 xor     ebx, ebx
.text:0000000000010FD8                 sub     rsp, 20h
.text:0000000000010FDC                 mov     rcx, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000010FE3                 lea     rsi, [rsp+28h+n] ; n
.text:0000000000010FE8                 lea     rdi, [rsp+28h+lineptr] ; lineptr
.text:0000000000010FED                 mov     [rsp+28h+lineptr], 0
.text:0000000000010FF6                 mov     rax, fs:28h
.text:0000000000010FFF                 mov     [rsp+28h+var_10], rax
.text:0000000000011004                 xor     eax, eax
.text:0000000000011006                 mov     [rsp+28h+n], 0
.text:000000000001100F                 call    ___getdelim
.text:0000000000011014                 test    rax, rax
.text:0000000000011017                 jle     short loc_11032
.text:0000000000011019                 mov     rdi, [rsp+28h+lineptr] ; response
.text:000000000001101E                 lea     rax, [rdi+rax-1]
.text:0000000000011023                 cmp     byte ptr [rax], 0Ah
.text:0000000000011026                 jz      short loc_11058
.text:0000000000011028
.text:0000000000011028 loc_11028:                              ; CODE XREF: yesno+90↓j
.text:0000000000011028                 call    _rpmatch
.text:000000000001102D                 test    eax, eax
.text:000000000001102F                 setnle  bl
.text:0000000000011032
.text:0000000000011032 loc_11032:                              ; CODE XREF: yesno+47↑j
.text:0000000000011032                 mov     rdi, [rsp+28h+lineptr] ; ptr
.text:0000000000011037                 call    free
.text:000000000001103C                 mov     rdx, [rsp+28h+var_10]
.text:0000000000011041                 xor     rdx, fs:28h
.text:000000000001104A                 mov     eax, ebx
.text:000000000001104C                 jnz     short loc_11062
.text:000000000001104E                 add     rsp, 20h
.text:0000000000011052                 pop     rbx
.text:0000000000011053                 retn
.text:0000000000011053 ; ---------------------------------------------------------------------------
.text:0000000000011054                 align 8
.text:0000000000011058
.text:0000000000011058 loc_11058:                              ; CODE XREF: yesno+56↑j
.text:0000000000011058                 mov     byte ptr [rax], 0
.text:000000000001105B                 mov     rdi, [rsp+28h+lineptr]
.text:0000000000011060                 jmp     short loc_11028
.text:0000000000011062 ; ---------------------------------------------------------------------------
.text:0000000000011062
.text:0000000000011062 loc_11062:                              ; CODE XREF: yesno+7C↑j
.text:0000000000011062                 call    ___stack_chk_fail
.text:0000000000011062 ; } // starts at 10FD0
.text:0000000000011062 yesno           endp
.text:0000000000011062
.text:0000000000011062 ; ---------------------------------------------------------------------------
.text:0000000000011067                 align 10h
.text:0000000000011070
.text:0000000000011070 ; =============== S U B R O U T I N E =======================================
.text:0000000000011070
.text:0000000000011070 ; Attributes: info_from_lumina
.text:0000000000011070
.text:0000000000011070 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000011070                 public rpl_fflush
.text:0000000000011070 rpl_fflush      proc near               ; CODE XREF: close_stdin:loc_AE38↑p
.text:0000000000011070                                         ; rpl_fclose+1F↓p
.text:0000000000011070 ; __unwind {
.text:0000000000011070                 test    rdi, rdi
.text:0000000000011073                 push    rbx
.text:0000000000011074                 mov     rbx, rdi
.text:0000000000011077                 jz      short loc_1108A
.text:0000000000011079                 call    ___freading
.text:000000000001107E                 test    eax, eax
.text:0000000000011080                 jz      short loc_1108A
.text:0000000000011082                 test    dword ptr [rbx], 100h
.text:0000000000011088                 jnz     short loc_11098
.text:000000000001108A
.text:000000000001108A loc_1108A:                              ; CODE XREF: rpl_fflush+7↑j
.text:000000000001108A                                         ; rpl_fflush+10↑j
.text:000000000001108A                 mov     rdi, rbx        ; stream
.text:000000000001108D                 pop     rbx
.text:000000000001108E                 jmp     _fflush
.text:000000000001108E ; ---------------------------------------------------------------------------
.text:0000000000011093                 align 8
.text:0000000000011098
.text:0000000000011098 loc_11098:                              ; CODE XREF: rpl_fflush+18↑j
.text:0000000000011098                 mov     rdi, rbx
.text:000000000001109B                 mov     edx, 1
.text:00000000000110A0                 xor     esi, esi
.text:00000000000110A2                 call    rpl_fseeko
.text:00000000000110A7                 mov     rdi, rbx        ; stream
.text:00000000000110AA                 pop     rbx
.text:00000000000110AB                 jmp     _fflush
.text:00000000000110AB ; } // starts at 11070
.text:00000000000110AB rpl_fflush      endp
.text:00000000000110AB
.text:00000000000110B0
.text:00000000000110B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000110B0
.text:00000000000110B0
.text:00000000000110B0                 public freadahead
.text:00000000000110B0 freadahead      proc near               ; CODE XREF: close_stdin+E↑p
.text:00000000000110B0 ; __unwind {
.text:00000000000110B0                 xor     eax, eax
.text:00000000000110B2                 mov     rcx, [rdi+20h]
.text:00000000000110B6                 cmp     [rdi+28h], rcx
.text:00000000000110BA                 ja      short locret_110D7
.text:00000000000110BC                 mov     rax, [rdi+10h]
.text:00000000000110C0                 sub     rax, [rdi+8]
.text:00000000000110C4                 test    dword ptr [rdi], 100h
.text:00000000000110CA                 jz      short locret_110D7
.text:00000000000110CC                 mov     rdx, [rdi+58h]
.text:00000000000110D0                 sub     rdx, [rdi+48h]
.text:00000000000110D4                 add     rax, rdx
.text:00000000000110D7
.text:00000000000110D7 locret_110D7:                           ; CODE XREF: freadahead+A↑j
.text:00000000000110D7                                         ; freadahead+1A↑j
.text:00000000000110D7                 rep retn
.text:00000000000110D7 ; } // starts at 110B0
.text:00000000000110D7 freadahead      endp
.text:00000000000110D7
.text:00000000000110D7 ; ---------------------------------------------------------------------------
.text:00000000000110D9                 align 20h
.text:00000000000110E0
.text:00000000000110E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000110E0
.text:00000000000110E0 ; Attributes: info_from_lumina
.text:00000000000110E0
.text:00000000000110E0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000110E0                 public rpl_fseeko
.text:00000000000110E0 rpl_fseeko      proc near               ; CODE XREF: close_stdin+C2↑p
.text:00000000000110E0                                         ; rpl_fflush+32↑p
.text:00000000000110E0 ; __unwind {
.text:00000000000110E0                 mov     rax, [rdi+8]
.text:00000000000110E4                 cmp     [rdi+10h], rax
.text:00000000000110E8                 jz      short loc_110F0
.text:00000000000110EA
.text:00000000000110EA loc_110EA:                              ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000110EA                                         ; rpl_fseeko+1F↓j
.text:00000000000110EA                 jmp     _fseeko
.text:00000000000110EA ; ---------------------------------------------------------------------------
.text:00000000000110EF                 align 10h
.text:00000000000110F0
.text:00000000000110F0 loc_110F0:                              ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000110F0                 mov     rax, [rdi+20h]
.text:00000000000110F4                 cmp     [rdi+28h], rax
.text:00000000000110F8                 jnz     short loc_110EA
.text:00000000000110FA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000110FF                 jnz     short loc_110EA
.text:0000000000011101                 push    r12
.text:0000000000011103                 push    rbp
.text:0000000000011104                 mov     r12d, edx
.text:0000000000011107                 push    rbx
.text:0000000000011108                 mov     rbp, rsi
.text:000000000001110B                 mov     rbx, rdi
.text:000000000001110E                 call    _fileno
.text:0000000000011113                 mov     edx, r12d       ; whence
.text:0000000000011116                 mov     rsi, rbp        ; offset
.text:0000000000011119                 mov     edi, eax        ; fd
.text:000000000001111B                 call    _lseek
.text:0000000000011120                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000011124                 jz      short loc_11132
.text:0000000000011126                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000011129                 mov     [rbx+90h], rax
.text:0000000000011130                 xor     eax, eax
.text:0000000000011132
.text:0000000000011132 loc_11132:                              ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000011132                 pop     rbx
.text:0000000000011133                 pop     rbp
.text:0000000000011134                 pop     r12
.text:0000000000011136                 retn
.text:0000000000011136 ; } // starts at 110E0
.text:0000000000011136 rpl_fseeko      endp
.text:0000000000011136
.text:0000000000011136 ; ---------------------------------------------------------------------------
.text:0000000000011137                 align 20h
.text:0000000000011140
.text:0000000000011140 ; =============== S U B R O U T I N E =======================================
.text:0000000000011140
.text:0000000000011140
.text:0000000000011140 AD_compare      proc near               ; DATA XREF: setup_dir_isra_4+13↓o
.text:0000000000011140 ; __unwind {
.text:0000000000011140                 xor     eax, eax
.text:0000000000011142                 mov     rdx, [rsi+8]
.text:0000000000011146                 cmp     [rdi+8], rdx
.text:000000000001114A                 jz      short loc_11150
.text:000000000001114C                 rep retn
.text:000000000001114C ; ---------------------------------------------------------------------------
.text:000000000001114E                 align 10h
.text:0000000000011150
.text:0000000000011150 loc_11150:                              ; CODE XREF: AD_compare+A↑j
.text:0000000000011150                 mov     rax, [rsi]
.text:0000000000011153                 cmp     [rdi], rax
.text:0000000000011156                 setz    al
.text:0000000000011159                 retn
.text:0000000000011159 ; } // starts at 11140
.text:0000000000011159 AD_compare      endp
.text:0000000000011159
.text:0000000000011159 ; ---------------------------------------------------------------------------
.text:000000000001115A                 align 20h
.text:0000000000011160
.text:0000000000011160 ; =============== S U B R O U T I N E =======================================
.text:0000000000011160
.text:0000000000011160
.text:0000000000011160 AD_hash         proc near               ; DATA XREF: setup_dir_isra_4+1A↓o
.text:0000000000011160 ; __unwind {
.text:0000000000011160                 mov     rax, [rdi+8]
.text:0000000000011164                 xor     edx, edx
.text:0000000000011166                 div     rsi
.text:0000000000011169                 mov     rax, rdx
.text:000000000001116C                 retn
.text:000000000001116C ; } // starts at 11160
.text:000000000001116C AD_hash         endp
.text:000000000001116C
.text:000000000001116C ; ---------------------------------------------------------------------------
.text:000000000001116D                 align 10h
.text:0000000000011170
.text:0000000000011170 ; =============== S U B R O U T I N E =======================================
.text:0000000000011170
.text:0000000000011170
.text:0000000000011170 dev_type_hash   proc near               ; DATA XREF: filesystem_type+6E↓o
.text:0000000000011170 ; __unwind {
.text:0000000000011170                 mov     rax, [rdi]
.text:0000000000011173                 xor     edx, edx
.text:0000000000011175                 div     rsi
.text:0000000000011178                 mov     rax, rdx
.text:000000000001117B                 retn
.text:000000000001117B ; } // starts at 11170
.text:000000000001117B dev_type_hash   endp
.text:000000000001117B
.text:000000000001117B ; ---------------------------------------------------------------------------
.text:000000000001117C                 align 20h
.text:0000000000011180
.text:0000000000011180 ; =============== S U B R O U T I N E =======================================
.text:0000000000011180
.text:0000000000011180
.text:0000000000011180 dev_type_compare proc near              ; DATA XREF: filesystem_type+67↓o
.text:0000000000011180 ; __unwind {
.text:0000000000011180                 mov     rax, [rsi]
.text:0000000000011183                 cmp     [rdi], rax
.text:0000000000011186                 setz    al
.text:0000000000011189                 retn
.text:0000000000011189 ; } // starts at 11180
.text:0000000000011189 dev_type_compare endp
.text:0000000000011189
.text:0000000000011189 ; ---------------------------------------------------------------------------
.text:000000000001118A                 align 10h
.text:0000000000011190
.text:0000000000011190 ; =============== S U B R O U T I N E =======================================
.text:0000000000011190
.text:0000000000011190
.text:0000000000011190 fts_compare_ino proc near               ; DATA XREF: fts_build:loc_12538↓o
.text:0000000000011190 ; __unwind {
.text:0000000000011190                 mov     rdx, [rdi]
.text:0000000000011193                 mov     rax, [rsi]
.text:0000000000011196                 mov     rax, [rax+80h]
.text:000000000001119D                 cmp     [rdx+80h], rax
.text:00000000000111A4                 jb      short loc_111B0
.text:00000000000111A6                 setnbe  al
.text:00000000000111A9                 movzx   eax, al
.text:00000000000111AC                 retn
.text:00000000000111AC ; ---------------------------------------------------------------------------
.text:00000000000111AD                 align 10h
.text:00000000000111B0
.text:00000000000111B0 loc_111B0:                              ; CODE XREF: fts_compare_ino+14↑j
.text:00000000000111B0                 mov     eax, 0FFFFFFFFh
.text:00000000000111B5                 retn
.text:00000000000111B5 ; } // starts at 11190
.text:00000000000111B5 fts_compare_ino endp
.text:00000000000111B5
.text:00000000000111B5 ; ---------------------------------------------------------------------------
.text:00000000000111B6                 align 20h
.text:00000000000111C0
.text:00000000000111C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000111C0
.text:00000000000111C0
.text:00000000000111C0 fts_stat        proc near               ; CODE XREF: fts_build+450↓p
.text:00000000000111C0                                         ; fts_build+607↓p ...
.text:00000000000111C0 ; __unwind {
.text:00000000000111C0                 push    r12
.text:00000000000111C2                 push    rbp
.text:00000000000111C3                 mov     rbp, rsi
.text:00000000000111C6                 push    rbx
.text:00000000000111C7                 cmp     qword ptr [rbp+58h], 0
.text:00000000000111CC                 lea     rbx, [rsi+78h]
.text:00000000000111D0                 mov     r12, rdi
.text:00000000000111D3                 mov     eax, [rdi+48h]
.text:00000000000111D6                 mov     rsi, [rsi+30h]  ; filename
.text:00000000000111DA                 jnz     short loc_11240
.text:00000000000111DC                 test    al, 1
.text:00000000000111DE                 jz      short loc_11240
.text:00000000000111E0
.text:00000000000111E0 loc_111E0:                              ; CODE XREF: fts_stat+82↓j
.text:00000000000111E0                                         ; fts_stat+86↓j
.text:00000000000111E0                 mov     rdx, rbx        ; stat_buf
.text:00000000000111E3                 mov     edi, 1          ; ver
.text:00000000000111E8                 call    ___xstat
.text:00000000000111ED                 test    eax, eax
.text:00000000000111EF                 jz      short loc_1126B
.text:00000000000111F1                 call    ___errno_location
.text:00000000000111F6                 mov     r12, rax
.text:00000000000111F9                 mov     eax, [rax]
.text:00000000000111FB                 cmp     eax, 2
.text:00000000000111FE                 jz      loc_11310
.text:0000000000011204
.text:0000000000011204 loc_11204:                              ; CODE XREF: fts_stat+147↓j
.text:0000000000011204                                         ; fts_stat+169↓j
.text:0000000000011204                 lea     rdi, [rbx+8]
.text:0000000000011208                 mov     [rbp+40h], eax
.text:000000000001120B                 mov     qword ptr [rbp+78h], 0
.text:0000000000011213                 mov     qword ptr [rbx+88h], 0
.text:000000000001121E                 xor     eax, eax
.text:0000000000011220                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000011224                 sub     rbx, rdi
.text:0000000000011227                 lea     ecx, [rbx+90h]
.text:000000000001122D                 shr     ecx, 3
.text:0000000000011230                 rep stosq
.text:0000000000011233                 mov     eax, 0Ah
.text:0000000000011238
.text:0000000000011238 loc_11238:                              ; CODE XREF: fts_stat+116↓j
.text:0000000000011238                                         ; fts_stat+136↓j ...
.text:0000000000011238                 pop     rbx
.text:0000000000011239                 pop     rbp
.text:000000000001123A                 pop     r12
.text:000000000001123C                 retn
.text:000000000001123C ; ---------------------------------------------------------------------------
.text:000000000001123D                 align 20h
.text:0000000000011240
.text:0000000000011240 loc_11240:                              ; CODE XREF: fts_stat+1A↑j
.text:0000000000011240                                         ; fts_stat+1E↑j
.text:0000000000011240                 test    al, 2
.text:0000000000011242                 jnz     short loc_111E0
.text:0000000000011244                 test    dl, dl
.text:0000000000011246                 jnz     short loc_111E0
.text:0000000000011248                 mov     rdx, rsi        ; filename
.text:000000000001124B                 mov     esi, [r12+2Ch]  ; fildes
.text:0000000000011250                 mov     r8d, 100h       ; flag
.text:0000000000011256                 mov     rcx, rbx        ; stat_buf
.text:0000000000011259                 mov     edi, 1          ; ver
.text:000000000001125E                 call    ___fxstatat
.text:0000000000011263                 test    eax, eax
.text:0000000000011265                 jnz     loc_11300
.text:000000000001126B
.text:000000000001126B loc_1126B:                              ; CODE XREF: fts_stat+2F↑j
.text:000000000001126B                 mov     eax, [rbp+90h]
.text:0000000000011271                 and     eax, 0F000h
.text:0000000000011276                 cmp     eax, 4000h
.text:000000000001127B                 jz      short loc_112A0
.text:000000000001127D                 cmp     eax, 0A000h
.text:0000000000011282                 jz      loc_11358
.text:0000000000011288                 cmp     eax, 8000h
.text:000000000001128D                 setz    al
.text:0000000000011290                 movzx   eax, al
.text:0000000000011293                 pop     rbx
.text:0000000000011294                 lea     eax, [rax+rax*4+3]
.text:0000000000011298                 pop     rbp
.text:0000000000011299                 pop     r12
.text:000000000001129B                 retn
.text:000000000001129B ; ---------------------------------------------------------------------------
.text:000000000001129C                 align 20h
.text:00000000000112A0
.text:00000000000112A0 loc_112A0:                              ; CODE XREF: fts_stat+BB↑j
.text:00000000000112A0                 mov     rax, [rbp+88h]
.text:00000000000112A7                 cmp     rax, 1
.text:00000000000112AB                 jbe     loc_11330
.text:00000000000112B1                 cmp     qword ptr [rbp+58h], 0
.text:00000000000112B6                 jle     short loc_11330
.text:00000000000112B8                 test    byte ptr [r12+48h], 20h
.text:00000000000112BE                 lea     rdx, [rax-2]
.text:00000000000112C2                 cmovz   rax, rdx
.text:00000000000112C6
.text:00000000000112C6 loc_112C6:                              ; CODE XREF: fts_stat+177↓j
.text:00000000000112C6                 cmp     byte ptr [rbp+108h], 2Eh ; '.'
.text:00000000000112CD                 mov     [rbp+68h], rax
.text:00000000000112D1                 mov     eax, 1
.text:00000000000112D6                 jnz     loc_11238
.text:00000000000112DC                 cmp     byte ptr [rbp+109h], 0
.text:00000000000112E3                 jnz     loc_11368
.text:00000000000112E9
.text:00000000000112E9 loc_112E9:                              ; CODE XREF: fts_stat+1C0↓j
.text:00000000000112E9                 cmp     qword ptr [rbp+58h], 1
.text:00000000000112EE                 sbb     eax, eax
.text:00000000000112F0                 and     eax, 0FFFFFFFCh
.text:00000000000112F3                 add     eax, 5
.text:00000000000112F6                 jmp     loc_11238
.text:00000000000112F6 ; ---------------------------------------------------------------------------
.text:00000000000112FB                 align 20h
.text:0000000000011300
.text:0000000000011300 loc_11300:                              ; CODE XREF: fts_stat+A5↑j
.text:0000000000011300                 call    ___errno_location
.text:0000000000011305                 mov     eax, [rax]
.text:0000000000011307                 jmp     loc_11204
.text:0000000000011307 ; ---------------------------------------------------------------------------
.text:000000000001130C                 align 10h
.text:0000000000011310
.text:0000000000011310 loc_11310:                              ; CODE XREF: fts_stat+3E↑j
.text:0000000000011310                 mov     rsi, [rbp+30h]  ; filename
.text:0000000000011314                 mov     rdx, rbx        ; stat_buf
.text:0000000000011317                 mov     edi, 1          ; ver
.text:000000000001131C                 call    ___lxstat
.text:0000000000011321                 test    eax, eax
.text:0000000000011323                 jz      short loc_11340
.text:0000000000011325                 mov     eax, [r12]
.text:0000000000011329                 jmp     loc_11204
.text:0000000000011329 ; ---------------------------------------------------------------------------
.text:000000000001132E                 align 10h
.text:0000000000011330
.text:0000000000011330 loc_11330:                              ; CODE XREF: fts_stat+EB↑j
.text:0000000000011330                                         ; fts_stat+F6↑j
.text:0000000000011330                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000011337                 jmp     short loc_112C6
.text:0000000000011337 ; ---------------------------------------------------------------------------
.text:0000000000011339                 align 20h
.text:0000000000011340
.text:0000000000011340 loc_11340:                              ; CODE XREF: fts_stat+163↑j
.text:0000000000011340                 mov     dword ptr [r12], 0
.text:0000000000011348                 mov     eax, 0Dh
.text:000000000001134D                 jmp     loc_11238
.text:000000000001134D ; ---------------------------------------------------------------------------
.text:0000000000011352                 align 8
.text:0000000000011358
.text:0000000000011358 loc_11358:                              ; CODE XREF: fts_stat+C2↑j
.text:0000000000011358                 mov     eax, 0Ch
.text:000000000001135D                 jmp     loc_11238
.text:000000000001135D ; ---------------------------------------------------------------------------
.text:0000000000011362                 align 8
.text:0000000000011368
.text:0000000000011368 loc_11368:                              ; CODE XREF: fts_stat+123↑j
.text:0000000000011368                 mov     edx, [rbp+108h]
.text:000000000001136E                 and     edx, 0FFFF00h
.text:0000000000011374                 cmp     edx, 2E00h
.text:000000000001137A                 jnz     loc_11238
.text:0000000000011380                 jmp     loc_112E9
.text:0000000000011380 ; } // starts at 111C0
.text:0000000000011380 fts_stat        endp
.text:0000000000011380
.text:0000000000011380 ; ---------------------------------------------------------------------------
.text:0000000000011385                 align 10h
.text:0000000000011390
.text:0000000000011390 ; =============== S U B R O U T I N E =======================================
.text:0000000000011390
.text:0000000000011390
.text:0000000000011390 fts_sort        proc near               ; CODE XREF: fts_build+721↓p
.text:0000000000011390                                         ; fts_build+80E↓p ...
.text:0000000000011390 ; __unwind {
.text:0000000000011390                 push    r13
.text:0000000000011392                 push    r12
.text:0000000000011394                 mov     r12, rdx
.text:0000000000011397                 push    rbp
.text:0000000000011398                 push    rbx
.text:0000000000011399                 mov     rbp, rdi
.text:000000000001139C                 mov     rbx, rsi
.text:000000000001139F                 sub     rsp, 8
.text:00000000000113A3                 cmp     [rbp+38h], rdx
.text:00000000000113A7                 mov     r13, [rdi+40h]
.text:00000000000113AB                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000113AF                 jnb     short loc_113E5
.text:00000000000113B1                 lea     rsi, [rdx+28h]
.text:00000000000113B5                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:00000000000113BF                 cmp     rsi, rax
.text:00000000000113C2                 mov     [rbp+38h], rsi
.text:00000000000113C6                 ja      loc_11464
.text:00000000000113CC                 shl     rsi, 3          ; size
.text:00000000000113D0                 call    _realloc
.text:00000000000113D5                 test    rax, rax
.text:00000000000113D8                 mov     rdi, rax        ; base
.text:00000000000113DB                 jz      loc_11460
.text:00000000000113E1                 mov     [rbp+10h], rax
.text:00000000000113E5
.text:00000000000113E5 loc_113E5:                              ; CODE XREF: fts_sort+1F↑j
.text:00000000000113E5                 test    rbx, rbx
.text:00000000000113E8                 jz      short loc_11401
.text:00000000000113EA                 mov     rdx, rdi
.text:00000000000113ED                 nop     dword ptr [rax]
.text:00000000000113F0
.text:00000000000113F0 loc_113F0:                              ; CODE XREF: fts_sort+6F↓j
.text:00000000000113F0                 add     rdx, 8
.text:00000000000113F4                 mov     [rdx-8], rbx
.text:00000000000113F8                 mov     rbx, [rbx+10h]
.text:00000000000113FC                 test    rbx, rbx
.text:00000000000113FF                 jnz     short loc_113F0
.text:0000000000011401
.text:0000000000011401 loc_11401:                              ; CODE XREF: fts_sort+58↑j
.text:0000000000011401                 mov     rcx, r13        ; compar
.text:0000000000011404                 mov     edx, 8          ; size
.text:0000000000011409                 mov     rsi, r12        ; nmemb
.text:000000000001140C                 call    _qsort
.text:0000000000011411                 mov     r8, [rbp+10h]
.text:0000000000011415                 mov     rcx, r12
.text:0000000000011418                 sub     rcx, 1
.text:000000000001141C                 mov     rax, [r8]
.text:000000000001141F                 jz      short loc_11490
.text:0000000000011421                 mov     rdi, rax
.text:0000000000011424                 mov     rdx, r8
.text:0000000000011427                 jmp     short loc_11433
.text:0000000000011427 ; ---------------------------------------------------------------------------
.text:0000000000011429                 align 10h
.text:0000000000011430
.text:0000000000011430 loc_11430:                              ; CODE XREF: fts_sort+B3↓j
.text:0000000000011430                 mov     rdi, [rdx]
.text:0000000000011433
.text:0000000000011433 loc_11433:                              ; CODE XREF: fts_sort+97↑j
.text:0000000000011433                 mov     rsi, [rdx+8]
.text:0000000000011437                 add     rdx, 8
.text:000000000001143B                 sub     rcx, 1
.text:000000000001143F                 mov     [rdi+10h], rsi
.text:0000000000011443                 jnz     short loc_11430
.text:0000000000011445                 mov     rdx, [r8+r12*8-8]
.text:000000000001144A
.text:000000000001144A loc_1144A:                              ; CODE XREF: fts_sort+103↓j
.text:000000000001144A                 mov     qword ptr [rdx+10h], 0
.text:0000000000011452                 add     rsp, 8
.text:0000000000011456                 pop     rbx
.text:0000000000011457                 pop     rbp
.text:0000000000011458                 pop     r12
.text:000000000001145A                 pop     r13
.text:000000000001145C                 retn
.text:000000000001145C ; ---------------------------------------------------------------------------
.text:000000000001145D                 align 20h
.text:0000000000011460
.text:0000000000011460 loc_11460:                              ; CODE XREF: fts_sort+4B↑j
.text:0000000000011460                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000011464
.text:0000000000011464 loc_11464:                              ; CODE XREF: fts_sort+36↑j
.text:0000000000011464                 call    free
.text:0000000000011469                 mov     qword ptr [rbp+10h], 0
.text:0000000000011471                 mov     qword ptr [rbp+38h], 0
.text:0000000000011479                 add     rsp, 8
.text:000000000001147D                 mov     rax, rbx
.text:0000000000011480                 pop     rbx
.text:0000000000011481                 pop     rbp
.text:0000000000011482                 pop     r12
.text:0000000000011484                 pop     r13
.text:0000000000011486                 retn
.text:0000000000011486 ; ---------------------------------------------------------------------------
.text:0000000000011487                 align 10h
.text:0000000000011490
.text:0000000000011490 loc_11490:                              ; CODE XREF: fts_sort+8F↑j
.text:0000000000011490                 mov     rdx, rax
.text:0000000000011493                 jmp     short loc_1144A
.text:0000000000011493 ; } // starts at 11390
.text:0000000000011493 fts_sort        endp
.text:0000000000011493
.text:0000000000011493 ; ---------------------------------------------------------------------------
.text:0000000000011495                 align 20h
.text:00000000000114A0
.text:00000000000114A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000114A0
.text:00000000000114A0
.text:00000000000114A0 fts_alloc       proc near               ; CODE XREF: fts_build+22C↓p
.text:00000000000114A0                                         ; rpl_fts_open+E7↓p ...
.text:00000000000114A0 ; __unwind {
.text:00000000000114A0                 push    r13
.text:00000000000114A2                 push    r12
.text:00000000000114A4                 mov     r12, rdi
.text:00000000000114A7                 push    rbp
.text:00000000000114A8                 lea     rdi, [rdx+110h]
.text:00000000000114AF                 push    rbx
.text:00000000000114B0                 mov     r13, rsi
.text:00000000000114B3                 mov     rbp, rdx
.text:00000000000114B6                 sub     rsp, 8
.text:00000000000114BA                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:00000000000114BE                 call    _malloc
.text:00000000000114C3                 test    rax, rax
.text:00000000000114C6                 mov     rbx, rax
.text:00000000000114C9                 jz      short loc_1151C
.text:00000000000114CB                 lea     rdi, [rax+108h] ; dest
.text:00000000000114D2                 mov     rdx, rbp        ; n
.text:00000000000114D5                 mov     rsi, r13        ; src
.text:00000000000114D8                 call    _memcpy
.text:00000000000114DD                 mov     rax, [r12+20h]
.text:00000000000114E2                 mov     byte ptr [rbx+rbp+108h], 0
.text:00000000000114EA                 mov     [rbx+60h], rbp
.text:00000000000114EE                 mov     [rbx+50h], r12
.text:00000000000114F2                 mov     dword ptr [rbx+40h], 0
.text:00000000000114F9                 mov     qword ptr [rbx+18h], 0
.text:0000000000011501                 mov     [rbx+38h], rax
.text:0000000000011505                 mov     dword ptr [rbx+72h], 30000h
.text:000000000001150C                 mov     qword ptr [rbx+20h], 0
.text:0000000000011514                 mov     qword ptr [rbx+28h], 0
.text:000000000001151C
.text:000000000001151C loc_1151C:                              ; CODE XREF: fts_alloc+29↑j
.text:000000000001151C                 add     rsp, 8
.text:0000000000011520                 mov     rax, rbx
.text:0000000000011523                 pop     rbx
.text:0000000000011524                 pop     rbp
.text:0000000000011525                 pop     r12
.text:0000000000011527                 pop     r13
.text:0000000000011529                 retn
.text:0000000000011529 ; } // starts at 114A0
.text:0000000000011529 fts_alloc       endp
.text:0000000000011529
.text:0000000000011529 ; ---------------------------------------------------------------------------
.text:000000000001152A                 align 10h
.text:0000000000011530
.text:0000000000011530 ; =============== S U B R O U T I N E =======================================
.text:0000000000011530
.text:0000000000011530
.text:0000000000011530 ; __int64 __fastcall fts_lfree(void *ptr)
.text:0000000000011530 fts_lfree       proc near               ; CODE XREF: fts_build+666↓p
.text:0000000000011530                                         ; fts_build+765↓p ...
.text:0000000000011530 ; __unwind {
.text:0000000000011530                 test    rdi, rdi
.text:0000000000011533                 jz      short locret_11570
.text:0000000000011535                 push    rbp
.text:0000000000011536                 push    rbx
.text:0000000000011537                 mov     rbx, rdi
.text:000000000001153A                 sub     rsp, 8
.text:000000000001153E                 xchg    ax, ax
.text:0000000000011540
.text:0000000000011540 loc_11540:                              ; CODE XREF: fts_lfree+30↓j
.text:0000000000011540                 mov     rdi, [rbx+18h]  ; dirp
.text:0000000000011544                 mov     rbp, [rbx+10h]
.text:0000000000011548                 test    rdi, rdi
.text:000000000001154B                 jz      short loc_11552
.text:000000000001154D                 call    _closedir
.text:0000000000011552
.text:0000000000011552 loc_11552:                              ; CODE XREF: fts_lfree+1B↑j
.text:0000000000011552                 mov     rdi, rbx        ; ptr
.text:0000000000011555                 mov     rbx, rbp
.text:0000000000011558                 call    free
.text:000000000001155D                 test    rbp, rbp
.text:0000000000011560                 jnz     short loc_11540
.text:0000000000011562                 add     rsp, 8
.text:0000000000011566                 pop     rbx
.text:0000000000011567                 pop     rbp
.text:0000000000011568                 retn
.text:0000000000011568 ; ---------------------------------------------------------------------------
.text:0000000000011569                 align 10h
.text:0000000000011570
.text:0000000000011570 locret_11570:                           ; CODE XREF: fts_lfree+3↑j
.text:0000000000011570                 rep retn
.text:0000000000011570 ; } // starts at 11530
.text:0000000000011570 fts_lfree       endp
.text:0000000000011570
.text:0000000000011570 ; ---------------------------------------------------------------------------
.text:0000000000011572                 align 20h
.text:0000000000011580
.text:0000000000011580 ; =============== S U B R O U T I N E =======================================
.text:0000000000011580
.text:0000000000011580
.text:0000000000011580 fd_ring_clear   proc near               ; CODE XREF: restore_initial_cwd+2C↓p
.text:0000000000011580                                         ; rpl_fts_close+8C↓p
.text:0000000000011580 ; __unwind {
.text:0000000000011580                 push    rbx
.text:0000000000011581                 mov     rbx, rdi
.text:0000000000011584                 jmp     short loc_1159C
.text:0000000000011584 ; ---------------------------------------------------------------------------
.text:0000000000011586                 align 10h
.text:0000000000011590
.text:0000000000011590 loc_11590:                              ; CODE XREF: fd_ring_clear+26↓j
.text:0000000000011590                 mov     rdi, rbx
.text:0000000000011593                 call    i_ring_pop
.text:0000000000011598                 test    eax, eax
.text:000000000001159A                 jns     short loc_115B0
.text:000000000001159C
.text:000000000001159C loc_1159C:                              ; CODE XREF: fd_ring_clear+4↑j
.text:000000000001159C                                         ; fd_ring_clear+37↓j
.text:000000000001159C                 mov     rdi, rbx
.text:000000000001159F                 call    i_ring_empty
.text:00000000000115A4                 test    al, al
.text:00000000000115A6                 jz      short loc_11590
.text:00000000000115A8                 pop     rbx
.text:00000000000115A9                 retn
.text:00000000000115A9 ; ---------------------------------------------------------------------------
.text:00000000000115AA                 align 10h
.text:00000000000115B0
.text:00000000000115B0 loc_115B0:                              ; CODE XREF: fd_ring_clear+1A↑j
.text:00000000000115B0                 mov     edi, eax        ; fd
.text:00000000000115B2                 call    _close
.text:00000000000115B7                 jmp     short loc_1159C
.text:00000000000115B7 ; } // starts at 11580
.text:00000000000115B7 fd_ring_clear   endp
.text:00000000000115B7
.text:00000000000115B7 ; ---------------------------------------------------------------------------
.text:00000000000115B9                 align 20h
.text:00000000000115C0
.text:00000000000115C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000115C0
.text:00000000000115C0
.text:00000000000115C0 filesystem_type proc near               ; CODE XREF: leaf_optimization+4↓p
.text:00000000000115C0                                         ; fts_build+2C4↓p
.text:00000000000115C0
.text:00000000000115C0 var_B8          = qword ptr -0B8h
.text:00000000000115C0 buf             = statfs ptr -0A8h
.text:00000000000115C0 var_30          = qword ptr -30h
.text:00000000000115C0
.text:00000000000115C0 ; __unwind {
.text:00000000000115C0                 push    r13
.text:00000000000115C2                 push    r12
.text:00000000000115C4                 push    rbp
.text:00000000000115C5                 push    rbx
.text:00000000000115C6                 sub     rsp, 98h
.text:00000000000115CD                 mov     rbx, [rdi+50h]
.text:00000000000115D1                 mov     rax, fs:28h
.text:00000000000115DA                 mov     [rsp+0B8h+var_30], rax
.text:00000000000115E2                 xor     eax, eax
.text:00000000000115E4                 test    byte ptr [rbx+49h], 2
.text:00000000000115E8                 jz      short loc_11652
.text:00000000000115EA                 mov     r12, [rbx+50h]
.text:00000000000115EE                 mov     rbp, rdi
.text:00000000000115F1                 mov     r13d, esi
.text:00000000000115F4                 test    r12, r12
.text:00000000000115F7                 jz      short loc_11620
.text:00000000000115F9
.text:00000000000115F9 loc_115F9:                              ; CODE XREF: filesystem_type+8B↓j
.text:00000000000115F9                 mov     rax, [rbp+78h]
.text:00000000000115FD                 mov     rsi, rsp
.text:0000000000011600                 mov     rdi, r12
.text:0000000000011603                 mov     [rsp+0B8h+var_B8], rax
.text:0000000000011607                 call    hash_lookup
.text:000000000001160C                 test    rax, rax
.text:000000000001160F                 jz      short loc_1164D
.text:0000000000011611                 mov     rbx, [rax+8]
.text:0000000000011615                 jmp     short loc_11654
.text:0000000000011615 ; ---------------------------------------------------------------------------
.text:0000000000011617                 align 20h
.text:0000000000011620
.text:0000000000011620 loc_11620:                              ; CODE XREF: filesystem_type+37↑j
.text:0000000000011620                 mov     r8, cs:free_ptr
.text:0000000000011627                 lea     rcx, dev_type_compare
.text:000000000001162E                 lea     rdx, dev_type_hash
.text:0000000000011635                 xor     esi, esi
.text:0000000000011637                 mov     edi, 0Dh
.text:000000000001163C                 call    hash_initialize
.text:0000000000011641                 test    rax, rax
.text:0000000000011644                 mov     r12, rax
.text:0000000000011647                 mov     [rbx+50h], rax
.text:000000000001164B                 jnz     short loc_115F9
.text:000000000001164D
.text:000000000001164D loc_1164D:                              ; CODE XREF: filesystem_type+4F↑j
.text:000000000001164D                 test    r13d, r13d
.text:0000000000011650                 jns     short loc_11680
.text:0000000000011652
.text:0000000000011652 loc_11652:                              ; CODE XREF: filesystem_type+28↑j
.text:0000000000011652                                         ; filesystem_type+CF↓j
.text:0000000000011652                 xor     ebx, ebx
.text:0000000000011654
.text:0000000000011654 loc_11654:                              ; CODE XREF: filesystem_type+55↑j
.text:0000000000011654                                         ; filesystem_type+D9↓j ...
.text:0000000000011654                 mov     rdx, [rsp+0B8h+var_30]
.text:000000000001165C                 xor     rdx, fs:28h
.text:0000000000011665                 mov     rax, rbx
.text:0000000000011668                 jnz     short loc_116E2
.text:000000000001166A                 add     rsp, 98h
.text:0000000000011671                 pop     rbx
.text:0000000000011672                 pop     rbp
.text:0000000000011673                 pop     r12
.text:0000000000011675                 pop     r13
.text:0000000000011677                 retn
.text:0000000000011677 ; ---------------------------------------------------------------------------
.text:0000000000011678                 align 20h
.text:0000000000011680
.text:0000000000011680 loc_11680:                              ; CODE XREF: filesystem_type+90↑j
.text:0000000000011680                 lea     rsi, [rsp+0B8h+buf] ; buf
.text:0000000000011685                 mov     edi, r13d       ; fildes
.text:0000000000011688                 call    _fstatfs
.text:000000000001168D                 test    eax, eax
.text:000000000001168F                 jnz     short loc_11652
.text:0000000000011691                 test    r12, r12
.text:0000000000011694                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:0000000000011699                 jz      short loc_11654
.text:000000000001169B                 mov     edi, 10h        ; size
.text:00000000000116A0                 call    _malloc
.text:00000000000116A5                 test    rax, rax
.text:00000000000116A8                 mov     r13, rax
.text:00000000000116AB                 jz      short loc_11654
.text:00000000000116AD                 mov     rax, [rbp+78h]
.text:00000000000116B1                 mov     [r13+8], rbx
.text:00000000000116B5                 mov     rsi, r13
.text:00000000000116B8                 mov     rdi, r12
.text:00000000000116BB                 mov     [r13+0], rax
.text:00000000000116BF                 call    hash_insert
.text:00000000000116C4                 test    rax, rax
.text:00000000000116C7                 jz      short loc_116D8
.text:00000000000116C9                 cmp     r13, rax
.text:00000000000116CC                 jnz     short loc_116E7
.text:00000000000116CE
.text:00000000000116CE loc_116CE:                              ; CODE XREF: filesystem_type+120↓j
.text:00000000000116CE                 mov     rbx, [rsp+0B8h+buf.f_type]
.text:00000000000116D3                 jmp     loc_11654
.text:00000000000116D8 ; ---------------------------------------------------------------------------
.text:00000000000116D8
.text:00000000000116D8 loc_116D8:                              ; CODE XREF: filesystem_type+107↑j
.text:00000000000116D8                 mov     rdi, r13        ; ptr
.text:00000000000116DB                 call    free
.text:00000000000116E0                 jmp     short loc_116CE
.text:00000000000116E2 ; ---------------------------------------------------------------------------
.text:00000000000116E2
.text:00000000000116E2 loc_116E2:                              ; CODE XREF: filesystem_type+A8↑j
.text:00000000000116E2                 call    ___stack_chk_fail
.text:00000000000116E7 ; ---------------------------------------------------------------------------
.text:00000000000116E7
.text:00000000000116E7 loc_116E7:                              ; CODE XREF: filesystem_type+10C↑j
.text:00000000000116E7                 call    _abort
.text:00000000000116E7 ; } // starts at 115C0
.text:00000000000116E7 filesystem_type endp
.text:00000000000116E7
.text:00000000000116E7 ; ---------------------------------------------------------------------------
.text:00000000000116EC                 align 10h
.text:00000000000116F0
.text:00000000000116F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000116F0
.text:00000000000116F0
.text:00000000000116F0 leaf_optimization proc near             ; CODE XREF: fts_build+8B7↓p
.text:00000000000116F0                                         ; rpl_fts_read+705↓p
.text:00000000000116F0 ; __unwind {
.text:00000000000116F0                 sub     rsp, 8
.text:00000000000116F4                 call    filesystem_type
.text:00000000000116F9                 cmp     rax, 52654973h
.text:00000000000116FF                 jz      short loc_11750
.text:0000000000011701                 jle     short loc_11730
.text:0000000000011703                 cmp     rax, 58465342h
.text:0000000000011709                 jz      short loc_11750
.text:000000000001170B                 mov     edx, 0FF534D42h
.text:0000000000011710                 cmp     rax, rdx
.text:0000000000011713                 jz      short loc_11745
.text:0000000000011715                 cmp     rax, 5346414Fh
.text:000000000001171B                 jz      short loc_11745
.text:000000000001171D
.text:000000000001171D loc_1171D:                              ; CODE XREF: leaf_optimization+53↓j
.text:000000000001171D                 mov     eax, 1
.text:0000000000011722                 add     rsp, 8
.text:0000000000011726                 retn
.text:0000000000011726 ; ---------------------------------------------------------------------------
.text:0000000000011727                 align 10h
.text:0000000000011730
.text:0000000000011730 loc_11730:                              ; CODE XREF: leaf_optimization+11↑j
.text:0000000000011730                 cmp     rax, 6969h
.text:0000000000011736                 jz      short loc_11745
.text:0000000000011738                 cmp     rax, 9FA0h
.text:000000000001173E                 jz      short loc_11745
.text:0000000000011740                 test    rax, rax
.text:0000000000011743                 jnz     short loc_1171D
.text:0000000000011745
.text:0000000000011745 loc_11745:                              ; CODE XREF: leaf_optimization+23↑j
.text:0000000000011745                                         ; leaf_optimization+2B↑j ...
.text:0000000000011745                 xor     eax, eax
.text:0000000000011747                 add     rsp, 8
.text:000000000001174B                 retn
.text:000000000001174B ; ---------------------------------------------------------------------------
.text:000000000001174C                 align 10h
.text:0000000000011750
.text:0000000000011750 loc_11750:                              ; CODE XREF: leaf_optimization+F↑j
.text:0000000000011750                                         ; leaf_optimization+19↑j
.text:0000000000011750                 mov     eax, 2
.text:0000000000011755                 add     rsp, 8
.text:0000000000011759                 retn
.text:0000000000011759 ; } // starts at 116F0
.text:0000000000011759 leaf_optimization endp
.text:0000000000011759
.text:0000000000011759 ; ---------------------------------------------------------------------------
.text:000000000001175A                 align 20h
.text:0000000000011760
.text:0000000000011760 ; =============== S U B R O U T I N E =======================================
.text:0000000000011760
.text:0000000000011760
.text:0000000000011760 cwd_advance_fd  proc near               ; CODE XREF: restore_initial_cwd+4A↓p
.text:0000000000011760                                         ; fts_safe_changedir+21E↓p ...
.text:0000000000011760 ; __unwind {
.text:0000000000011760                 push    rbp
.text:0000000000011761                 push    rbx
.text:0000000000011762                 mov     ebp, esi
.text:0000000000011764                 mov     rbx, rdi
.text:0000000000011767                 sub     rsp, 8
.text:000000000001176B                 mov     esi, [rdi+2Ch]
.text:000000000001176E                 cmp     esi, ebp
.text:0000000000011770                 jnz     short loc_11777
.text:0000000000011772                 cmp     esi, 0FFFFFF9Ch
.text:0000000000011775                 jnz     short loc_117C1
.text:0000000000011777
.text:0000000000011777 loc_11777:                              ; CODE XREF: cwd_advance_fd+10↑j
.text:0000000000011777                 test    dl, dl
.text:0000000000011779                 jnz     short loc_11790
.text:000000000001177B                 test    byte ptr [rbx+48h], 4
.text:000000000001177F                 jnz     short loc_11785
.text:0000000000011781                 test    esi, esi
.text:0000000000011783                 jns     short loc_117B0
.text:0000000000011785
.text:0000000000011785 loc_11785:                              ; CODE XREF: cwd_advance_fd+1F↑j
.text:0000000000011785                                         ; cwd_advance_fd+3B↓j
.text:0000000000011785                 mov     [rbx+2Ch], ebp
.text:0000000000011788                 add     rsp, 8
.text:000000000001178C                 pop     rbx
.text:000000000001178D                 pop     rbp
.text:000000000001178E                 retn
.text:000000000001178E ; ---------------------------------------------------------------------------
.text:000000000001178F                 align 10h
.text:0000000000011790
.text:0000000000011790 loc_11790:                              ; CODE XREF: cwd_advance_fd+19↑j
.text:0000000000011790                 lea     rdi, [rbx+60h]
.text:0000000000011794                 call    i_ring_push
.text:0000000000011799                 test    eax, eax
.text:000000000001179B                 js      short loc_11785
.text:000000000001179D                 mov     edi, eax        ; fd
.text:000000000001179F                 call    _close
.text:00000000000117A4                 mov     [rbx+2Ch], ebp
.text:00000000000117A7                 add     rsp, 8
.text:00000000000117AB                 pop     rbx
.text:00000000000117AC                 pop     rbp
.text:00000000000117AD                 retn
.text:00000000000117AD ; ---------------------------------------------------------------------------
.text:00000000000117AE                 align 10h
.text:00000000000117B0
.text:00000000000117B0 loc_117B0:                              ; CODE XREF: cwd_advance_fd+23↑j
.text:00000000000117B0                 mov     edi, esi        ; fd
.text:00000000000117B2                 call    _close
.text:00000000000117B7                 mov     [rbx+2Ch], ebp
.text:00000000000117BA                 add     rsp, 8
.text:00000000000117BE                 pop     rbx
.text:00000000000117BF                 pop     rbp
.text:00000000000117C0                 retn
.text:00000000000117C1 ; ---------------------------------------------------------------------------
.text:00000000000117C1
.text:00000000000117C1 loc_117C1:                              ; CODE XREF: cwd_advance_fd+15↑j
.text:00000000000117C1                 call    _abort
.text:00000000000117C1 ; } // starts at 11760
.text:00000000000117C1 cwd_advance_fd  endp
.text:00000000000117C1
.text:00000000000117C1 ; ---------------------------------------------------------------------------
.text:00000000000117C6                 align 10h
.text:00000000000117D0
.text:00000000000117D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000117D0
.text:00000000000117D0
.text:00000000000117D0 restore_initial_cwd proc near           ; CODE XREF: fts_build+73E↓p
.text:00000000000117D0                                         ; rpl_fts_read+2A3↓p ...
.text:00000000000117D0 ; __unwind {
.text:00000000000117D0                 push    rbp
.text:00000000000117D1                 push    rbx
.text:00000000000117D2                 mov     rbx, rdi
.text:00000000000117D5                 sub     rsp, 8
.text:00000000000117D9                 mov     edx, [rdi+48h]
.text:00000000000117DC                 mov     ebp, edx
.text:00000000000117DE                 and     ebp, 4
.text:00000000000117E1                 jnz     short loc_11828
.text:00000000000117E3                 and     dh, 2
.text:00000000000117E6                 jnz     short loc_11810
.text:00000000000117E8                 mov     edi, [rdi+28h]  ; fd
.text:00000000000117EB                 xor     ebp, ebp
.text:00000000000117ED                 call    _fchdir
.text:00000000000117F2                 test    eax, eax
.text:00000000000117F4                 setnz   bpl
.text:00000000000117F8
.text:00000000000117F8 loc_117F8:                              ; CODE XREF: restore_initial_cwd+4F↓j
.text:00000000000117F8                                         ; restore_initial_cwd+5A↓j
.text:00000000000117F8                 lea     rdi, [rbx+60h]
.text:00000000000117FC                 call    fd_ring_clear
.text:0000000000011801                 add     rsp, 8
.text:0000000000011805                 mov     eax, ebp
.text:0000000000011807                 pop     rbx
.text:0000000000011808                 pop     rbp
.text:0000000000011809                 retn
.text:0000000000011809 ; ---------------------------------------------------------------------------
.text:000000000001180A                 align 10h
.text:0000000000011810
.text:0000000000011810 loc_11810:                              ; CODE XREF: restore_initial_cwd+16↑j
.text:0000000000011810                 mov     edx, 1
.text:0000000000011815                 mov     esi, 0FFFFFF9Ch
.text:000000000001181A                 call    cwd_advance_fd
.text:000000000001181F                 jmp     short loc_117F8
.text:000000000001181F ; ---------------------------------------------------------------------------
.text:0000000000011821                 align 8
.text:0000000000011828
.text:0000000000011828 loc_11828:                              ; CODE XREF: restore_initial_cwd+11↑j
.text:0000000000011828                 xor     ebp, ebp
.text:000000000001182A                 jmp     short loc_117F8
.text:000000000001182A ; } // starts at 117D0
.text:000000000001182A restore_initial_cwd endp
.text:000000000001182A
.text:000000000001182A ; ---------------------------------------------------------------------------
.text:000000000001182C                 align 10h
.text:0000000000011830
.text:0000000000011830 ; =============== S U B R O U T I N E =======================================
.text:0000000000011830
.text:0000000000011830
.text:0000000000011830 fts_palloc_isra_2 proc near             ; CODE XREF: fts_build+263↓p
.text:0000000000011830                                         ; rpl_fts_open+BD↓p
.text:0000000000011830 ; __unwind {
.text:0000000000011830                 push    rbx
.text:0000000000011831                 mov     rcx, [rsi]
.text:0000000000011834                 mov     rbx, rdi
.text:0000000000011837                 mov     rdi, [rdi]      ; ptr
.text:000000000001183A                 lea     rax, [rcx+rdx+100h]
.text:0000000000011842                 cmp     rcx, rax
.text:0000000000011845                 ja      short loc_11868
.text:0000000000011847                 mov     [rsi], rax
.text:000000000001184A                 mov     rsi, rax        ; size
.text:000000000001184D                 call    _realloc
.text:0000000000011852                 test    rax, rax
.text:0000000000011855                 jz      short loc_11888
.text:0000000000011857                 mov     [rbx], rax
.text:000000000001185A                 mov     eax, 1
.text:000000000001185F                 pop     rbx
.text:0000000000011860                 retn
.text:0000000000011860 ; ---------------------------------------------------------------------------
.text:0000000000011861                 align 8
.text:0000000000011868
.text:0000000000011868 loc_11868:                              ; CODE XREF: fts_palloc_isra_2+15↑j
.text:0000000000011868                 call    free
.text:000000000001186D                 mov     qword ptr [rbx], 0
.text:0000000000011874                 call    ___errno_location
.text:0000000000011879                 mov     dword ptr [rax], 24h ; '$'
.text:000000000001187F                 xor     eax, eax
.text:0000000000011881                 pop     rbx
.text:0000000000011882                 retn
.text:0000000000011882 ; ---------------------------------------------------------------------------
.text:0000000000011883                 align 8
.text:0000000000011888
.text:0000000000011888 loc_11888:                              ; CODE XREF: fts_palloc_isra_2+25↑j
.text:0000000000011888                 mov     rdi, [rbx]      ; ptr
.text:000000000001188B                 call    free
.text:0000000000011890                 mov     qword ptr [rbx], 0
.text:0000000000011897                 xor     eax, eax
.text:0000000000011899                 pop     rbx
.text:000000000001189A                 retn
.text:000000000001189A ; } // starts at 11830
.text:000000000001189A fts_palloc_isra_2 endp
.text:000000000001189A
.text:000000000001189A ; ---------------------------------------------------------------------------
.text:000000000001189B                 align 20h
.text:00000000000118A0
.text:00000000000118A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000118A0
.text:00000000000118A0
.text:00000000000118A0 setup_dir_isra_4 proc near              ; CODE XREF: rpl_fts_open+265↓p
.text:00000000000118A0                                         ; rpl_fts_read+345↓p
.text:00000000000118A0 ; __unwind {
.text:00000000000118A0                 and     edi, 102h
.text:00000000000118A6                 push    rbx
.text:00000000000118A7                 mov     rbx, rsi
.text:00000000000118AA                 jz      short loc_118E0
.text:00000000000118AC                 mov     r8, cs:free_ptr
.text:00000000000118B3                 lea     rcx, AD_compare
.text:00000000000118BA                 lea     rdx, AD_hash
.text:00000000000118C1                 xor     esi, esi
.text:00000000000118C3                 mov     edi, 1Fh
.text:00000000000118C8                 call    hash_initialize
.text:00000000000118CD                 test    rax, rax
.text:00000000000118D0                 mov     [rbx], rax
.text:00000000000118D3                 setnz   al
.text:00000000000118D6
.text:00000000000118D6 loc_118D6:                              ; CODE XREF: setup_dir_isra_4+55↓j
.text:00000000000118D6                 pop     rbx
.text:00000000000118D7                 retn
.text:00000000000118D7 ; ---------------------------------------------------------------------------
.text:00000000000118D8                 align 20h
.text:00000000000118E0
.text:00000000000118E0 loc_118E0:                              ; CODE XREF: setup_dir_isra_4+A↑j
.text:00000000000118E0                 mov     edi, 20h ; ' '  ; size
.text:00000000000118E5                 call    _malloc
.text:00000000000118EA                 mov     rdi, rax
.text:00000000000118ED                 mov     [rbx], rax
.text:00000000000118F0                 xor     eax, eax
.text:00000000000118F2                 test    rdi, rdi
.text:00000000000118F5                 jz      short loc_118D6
.text:00000000000118F7                 call    cycle_check_init
.text:00000000000118FC                 mov     eax, 1
.text:0000000000011901                 pop     rbx
.text:0000000000011902                 retn
.text:0000000000011902 ; } // starts at 118A0
.text:0000000000011902 setup_dir_isra_4 endp
.text:0000000000011902
.text:0000000000011902 ; ---------------------------------------------------------------------------
.text:0000000000011903                 align 10h
.text:0000000000011910
.text:0000000000011910 ; =============== S U B R O U T I N E =======================================
.text:0000000000011910
.text:0000000000011910
.text:0000000000011910 diropen_isra_6  proc near               ; CODE XREF: fts_safe_changedir+8D↓p
.text:0000000000011910                                         ; rpl_fts_open+287↓p ...
.text:0000000000011910 ; __unwind {
.text:0000000000011910                 mov     rax, rdx
.text:0000000000011913                 mov     edx, esi
.text:0000000000011915                 shl     edx, 0Dh
.text:0000000000011918                 and     edx, 20000h
.text:000000000001191E                 or      edx, 90900h
.text:0000000000011924                 and     esi, 200h
.text:000000000001192A                 jnz     short loc_11940
.text:000000000001192C                 mov     rdi, rax
.text:000000000001192F                 mov     esi, edx
.text:0000000000011931                 xor     eax, eax
.text:0000000000011933                 jmp     open_safer
.text:0000000000011933 ; ---------------------------------------------------------------------------
.text:0000000000011938                 align 20h
.text:0000000000011940
.text:0000000000011940 loc_11940:                              ; CODE XREF: diropen_isra_6+1A↑j
.text:0000000000011940                 mov     rsi, rax
.text:0000000000011943                 xor     eax, eax
.text:0000000000011945                 jmp     openat_safer
.text:0000000000011945 ; } // starts at 11910
.text:0000000000011945 diropen_isra_6  endp
.text:0000000000011945
.text:0000000000011945 ; ---------------------------------------------------------------------------
.text:000000000001194A                 align 10h
.text:0000000000011950
.text:0000000000011950 ; =============== S U B R O U T I N E =======================================
.text:0000000000011950
.text:0000000000011950 ; Attributes: info_from_lumina
.text:0000000000011950
.text:0000000000011950 fts_safe_changedir proc near            ; CODE XREF: fts_build+879↓p
.text:0000000000011950                                         ; fts_build+892↓p ...
.text:0000000000011950
.text:0000000000011950 var_D9          = byte ptr -0D9h
.text:0000000000011950 stat_buf        = stat ptr -0D8h
.text:0000000000011950 var_40          = qword ptr -40h
.text:0000000000011950
.text:0000000000011950 ; __unwind {
.text:0000000000011950                 push    r15
.text:0000000000011952                 push    r14
.text:0000000000011954                 mov     r14, rsi
.text:0000000000011957                 push    r13
.text:0000000000011959                 push    r12
.text:000000000001195B                 mov     r13, rdi
.text:000000000001195E                 push    rbp
.text:000000000001195F                 push    rbx
.text:0000000000011960                 mov     r12d, edx
.text:0000000000011963                 mov     rbp, rcx
.text:0000000000011966                 sub     rsp, 0B8h
.text:000000000001196D                 mov     ebx, [rdi+48h]
.text:0000000000011970                 mov     rax, fs:28h
.text:0000000000011979                 mov     [rsp+0E8h+var_40], rax
.text:0000000000011981                 xor     eax, eax
.text:0000000000011983                 mov     r9d, ebx
.text:0000000000011986                 and     r9d, 4
.text:000000000001198A                 test    rcx, rcx
.text:000000000001198D                 jz      loc_11A40
.text:0000000000011993                 lea     rdx, asc_15AEB  ; ".."
.text:000000000001199A                 mov     ecx, 3
.text:000000000001199F                 mov     rsi, rbp
.text:00000000000119A2                 mov     rdi, rdx
.text:00000000000119A5                 repe cmpsb
.text:00000000000119A7                 setnbe  al
.text:00000000000119AA                 sbb     al, 0
.text:00000000000119AC                 test    al, al
.text:00000000000119AE                 jnz     loc_11A40
.text:00000000000119B4                 test    r9d, r9d
.text:00000000000119B7                 jnz     loc_11A45
.text:00000000000119BD                 test    r12d, r12d
.text:00000000000119C0                 jns     loc_11BAA
.text:00000000000119C6                 test    bh, 2
.text:00000000000119C9                 jnz     loc_11B10
.text:00000000000119CF
.text:00000000000119CF loc_119CF:                              ; CODE XREF: fts_safe_changedir+1E9↓j
.text:00000000000119CF                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000119D4
.text:00000000000119D4 loc_119D4:                              ; CODE XREF: fts_safe_changedir+1D2↓j
.text:00000000000119D4                                         ; fts_safe_changedir+275↓j
.text:00000000000119D4                 mov     edi, [r13+2Ch]
.text:00000000000119D8                 mov     rdx, rbp
.text:00000000000119DB                 mov     esi, ebx
.text:00000000000119DD                 call    diropen_isra_6
.text:00000000000119E2                 test    eax, eax
.text:00000000000119E4                 mov     r15d, eax
.text:00000000000119E7                 js      loc_11B9B
.text:00000000000119ED                 mov     ebx, [r13+48h]
.text:00000000000119F1                 test    bl, 2
.text:00000000000119F4                 jz      loc_11A9A
.text:00000000000119FA                 nop     word ptr [rax+rax+00h]
.text:0000000000011A00
.text:0000000000011A00 loc_11A00:                              ; CODE XREF: fts_safe_changedir+144↓j
.text:0000000000011A00                                         ; fts_safe_changedir+16A↓j ...
.text:0000000000011A00                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:0000000000011A05                 mov     esi, r15d       ; fildes
.text:0000000000011A08                 mov     edi, 1          ; ver
.text:0000000000011A0D                 call    ___fxstat       ; PIC mode
.text:0000000000011A12                 test    eax, eax
.text:0000000000011A14                 jz      loc_11AE0
.text:0000000000011A1A
.text:0000000000011A1A loc_11A1A:                              ; CODE XREF: fts_safe_changedir+1AA↓j
.text:0000000000011A1A                 mov     ebx, 0FFFFFFFFh
.text:0000000000011A1F
.text:0000000000011A1F loc_11A1F:                              ; CODE XREF: fts_safe_changedir+183↓j
.text:0000000000011A1F                 test    r12d, r12d
.text:0000000000011A22                 jns     short loc_11A55
.text:0000000000011A24                 call    ___errno_location ; PIC mode
.text:0000000000011A29                 mov     r12d, [rax]
.text:0000000000011A2C                 mov     rbp, rax
.text:0000000000011A2F                 mov     edi, r15d       ; fd
.text:0000000000011A32                 call    _close          ; PIC mode
.text:0000000000011A37                 mov     [rbp+0], r12d
.text:0000000000011A3B                 jmp     short loc_11A55
.text:0000000000011A3B ; ---------------------------------------------------------------------------
.text:0000000000011A3D                 align 20h
.text:0000000000011A40
.text:0000000000011A40 loc_11A40:                              ; CODE XREF: fts_safe_changedir+3D↑j
.text:0000000000011A40                                         ; fts_safe_changedir+5E↑j
.text:0000000000011A40                 test    r9d, r9d
.text:0000000000011A43                 jz      short loc_11A80
.text:0000000000011A45
.text:0000000000011A45 loc_11A45:                              ; CODE XREF: fts_safe_changedir+67↑j
.text:0000000000011A45                 and     bh, 2
.text:0000000000011A48                 jz      short loc_11A53
.text:0000000000011A4A                 test    r12d, r12d
.text:0000000000011A4D                 jns     loc_11B00
.text:0000000000011A53
.text:0000000000011A53 loc_11A53:                              ; CODE XREF: fts_safe_changedir+F8↑j
.text:0000000000011A53                 xor     ebx, ebx
.text:0000000000011A55
.text:0000000000011A55 loc_11A55:                              ; CODE XREF: fts_safe_changedir+D2↑j
.text:0000000000011A55                                         ; fts_safe_changedir+EB↑j ...
.text:0000000000011A55                 mov     rcx, [rsp+0E8h+var_40]
.text:0000000000011A5D                 xor     rcx, fs:28h
.text:0000000000011A66                 mov     eax, ebx
.text:0000000000011A68                 jnz     loc_11BA5
.text:0000000000011A6E                 add     rsp, 0B8h
.text:0000000000011A75                 pop     rbx
.text:0000000000011A76                 pop     rbp
.text:0000000000011A77                 pop     r12
.text:0000000000011A79                 pop     r13
.text:0000000000011A7B                 pop     r14
.text:0000000000011A7D                 pop     r15
.text:0000000000011A7F                 retn
.text:0000000000011A80 ; ---------------------------------------------------------------------------
.text:0000000000011A80
.text:0000000000011A80 loc_11A80:                              ; CODE XREF: fts_safe_changedir+F3↑j
.text:0000000000011A80                 test    r12d, r12d
.text:0000000000011A83                 js      loc_11BC0
.text:0000000000011A89                 test    bl, 2
.text:0000000000011A8C                 mov     r15d, r12d
.text:0000000000011A8F                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000011A94                 jnz     loc_11A00
.text:0000000000011A9A
.text:0000000000011A9A loc_11A9A:                              ; CODE XREF: fts_safe_changedir+A4↑j
.text:0000000000011A9A                 test    rbp, rbp
.text:0000000000011A9D                 jz      short loc_11AC0
.text:0000000000011A9F                 lea     rdx, asc_15AEB  ; ".."
.text:0000000000011AA6
.text:0000000000011AA6 loc_11AA6:                              ; CODE XREF: fts_safe_changedir+265↓j
.text:0000000000011AA6                 mov     ecx, 3
.text:0000000000011AAB                 mov     rsi, rbp
.text:0000000000011AAE                 mov     rdi, rdx
.text:0000000000011AB1                 repe cmpsb
.text:0000000000011AB3                 setnbe  al
.text:0000000000011AB6                 sbb     al, 0
.text:0000000000011AB8                 test    al, al
.text:0000000000011ABA                 jz      loc_11A00
.text:0000000000011AC0
.text:0000000000011AC0 loc_11AC0:                              ; CODE XREF: fts_safe_changedir+14D↑j
.text:0000000000011AC0                                         ; fts_safe_changedir+1FA↓j ...
.text:0000000000011AC0                 and     bh, 2
.text:0000000000011AC3                 jnz     loc_11B58
.text:0000000000011AC9                 mov     edi, r15d       ; fd
.text:0000000000011ACC                 call    _fchdir         ; PIC mode
.text:0000000000011AD1                 mov     ebx, eax
.text:0000000000011AD3                 jmp     loc_11A1F
.text:0000000000011AD3 ; ---------------------------------------------------------------------------
.text:0000000000011AD8                 align 20h
.text:0000000000011AE0
.text:0000000000011AE0 loc_11AE0:                              ; CODE XREF: fts_safe_changedir+C4↑j
.text:0000000000011AE0                 mov     rax, [rsp+0E8h+stat_buf.st_dev]
.text:0000000000011AE5                 cmp     [r14+78h], rax
.text:0000000000011AE9                 jz      loc_11B80
.text:0000000000011AEF
.text:0000000000011AEF loc_11AEF:                              ; CODE XREF: fts_safe_changedir+23C↓j
.text:0000000000011AEF                 call    ___errno_location ; PIC mode
.text:0000000000011AF4                 mov     dword ptr [rax], 2
.text:0000000000011AFA                 jmp     loc_11A1A
.text:0000000000011AFA ; ---------------------------------------------------------------------------
.text:0000000000011AFF                 align 20h
.text:0000000000011B00
.text:0000000000011B00 loc_11B00:                              ; CODE XREF: fts_safe_changedir+FD↑j
.text:0000000000011B00                 mov     edi, r12d       ; fd
.text:0000000000011B03                 xor     ebx, ebx
.text:0000000000011B05                 call    _close          ; PIC mode
.text:0000000000011B0A                 jmp     loc_11A55
.text:0000000000011B0A ; ---------------------------------------------------------------------------
.text:0000000000011B0F                 align 10h
.text:0000000000011B10
.text:0000000000011B10 loc_11B10:                              ; CODE XREF: fts_safe_changedir+79↑j
.text:0000000000011B10                 lea     r15, [r13+60h]
.text:0000000000011B14                 mov     rdi, r15
.text:0000000000011B17                 call    i_ring_empty    ; PIC mode
.text:0000000000011B1C                 test    al, al
.text:0000000000011B1E                 mov     [rsp+0E8h+var_D9], al
.text:0000000000011B22                 jnz     loc_119D4
.text:0000000000011B28                 mov     rdi, r15
.text:0000000000011B2B                 call    i_ring_pop      ; PIC mode
.text:0000000000011B30                 test    eax, eax
.text:0000000000011B32                 mov     r15d, eax
.text:0000000000011B35                 mov     ebx, [r13+48h]
.text:0000000000011B39                 js      loc_119CF
.text:0000000000011B3F                 test    bl, 2
.text:0000000000011B42                 mov     r12d, eax
.text:0000000000011B45                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000011B4A                 jz      loc_11AC0
.text:0000000000011B50                 jmp     loc_11A00
.text:0000000000011B50 ; ---------------------------------------------------------------------------
.text:0000000000011B55                 align 8
.text:0000000000011B58
.text:0000000000011B58 loc_11B58:                              ; CODE XREF: fts_safe_changedir+173↑j
.text:0000000000011B58                 movzx   r14d, [rsp+0E8h+var_D9]
.text:0000000000011B5E                 mov     esi, r15d
.text:0000000000011B61                 mov     rdi, r13
.text:0000000000011B64                 xor     ebx, ebx
.text:0000000000011B66                 xor     r14d, 1
.text:0000000000011B6A                 movzx   edx, r14b
.text:0000000000011B6E                 call    cwd_advance_fd
.text:0000000000011B73                 jmp     loc_11A55
.text:0000000000011B73 ; ---------------------------------------------------------------------------
.text:0000000000011B78                 align 20h
.text:0000000000011B80
.text:0000000000011B80 loc_11B80:                              ; CODE XREF: fts_safe_changedir+199↑j
.text:0000000000011B80                 mov     rax, [rsp+0E8h+stat_buf.st_ino]
.text:0000000000011B85                 cmp     [r14+80h], rax
.text:0000000000011B8C                 jnz     loc_11AEF
.text:0000000000011B92                 mov     ebx, [r13+48h]
.text:0000000000011B96                 jmp     loc_11AC0
.text:0000000000011B9B ; ---------------------------------------------------------------------------
.text:0000000000011B9B
.text:0000000000011B9B loc_11B9B:                              ; CODE XREF: fts_safe_changedir+97↑j
.text:0000000000011B9B                 mov     ebx, 0FFFFFFFFh
.text:0000000000011BA0                 jmp     loc_11A55
.text:0000000000011BA5 ; ---------------------------------------------------------------------------
.text:0000000000011BA5
.text:0000000000011BA5 loc_11BA5:                              ; CODE XREF: fts_safe_changedir+118↑j
.text:0000000000011BA5                 call    ___stack_chk_fail ; PIC mode
.text:0000000000011BAA ; ---------------------------------------------------------------------------
.text:0000000000011BAA
.text:0000000000011BAA loc_11BAA:                              ; CODE XREF: fts_safe_changedir+70↑j
.text:0000000000011BAA                 test    bl, 2
.text:0000000000011BAD                 mov     r15d, r12d
.text:0000000000011BB0                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000011BB5                 jz      loc_11AA6
.text:0000000000011BBB                 jmp     loc_11A00
.text:0000000000011BC0 ; ---------------------------------------------------------------------------
.text:0000000000011BC0
.text:0000000000011BC0 loc_11BC0:                              ; CODE XREF: fts_safe_changedir+133↑j
.text:0000000000011BC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000011BC5                 jmp     loc_119D4
.text:0000000000011BC5 ; } // starts at 11950
.text:0000000000011BC5 fts_safe_changedir endp
.text:0000000000011BC5
.text:0000000000011BC5 ; ---------------------------------------------------------------------------
.text:0000000000011BCA                 align 10h
.text:0000000000011BD0
.text:0000000000011BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011BD0
.text:0000000000011BD0
.text:0000000000011BD0 enter_dir_isra_10 proc near             ; CODE XREF: fts_build+616↓p
.text:0000000000011BD0                                         ; rpl_fts_read+383↓p
.text:0000000000011BD0 ; __unwind {
.text:0000000000011BD0                 and     edi, 102h
.text:0000000000011BD6                 push    r12
.text:0000000000011BD8                 mov     r12, rsi
.text:0000000000011BDB                 push    rbp
.text:0000000000011BDC                 push    rbx
.text:0000000000011BDD                 mov     rbx, rdx
.text:0000000000011BE0                 jz      short loc_11C50
.text:0000000000011BE2                 mov     edi, 18h        ; size
.text:0000000000011BE7                 call    _malloc
.text:0000000000011BEC                 test    rax, rax
.text:0000000000011BEF                 mov     rbp, rax
.text:0000000000011BF2                 jz      loc_11C78
.text:0000000000011BF8                 mov     rax, [rbx+78h]
.text:0000000000011BFC                 mov     rdi, [r12]
.text:0000000000011C00                 mov     rsi, rbp
.text:0000000000011C03                 mov     [rbp+10h], rbx
.text:0000000000011C07                 mov     [rbp+0], rax
.text:0000000000011C0B                 mov     rax, [rbx+80h]
.text:0000000000011C12                 mov     [rbp+8], rax
.text:0000000000011C16                 call    hash_insert
.text:0000000000011C1B                 cmp     rbp, rax
.text:0000000000011C1E                 mov     r12, rax
.text:0000000000011C21                 jz      short loc_11C41
.text:0000000000011C23                 mov     rdi, rbp        ; ptr
.text:0000000000011C26                 call    free
.text:0000000000011C2B                 test    r12, r12
.text:0000000000011C2E                 jz      short loc_11C78
.text:0000000000011C30                 mov     rax, [r12+10h]
.text:0000000000011C35                 mov     ecx, 2
.text:0000000000011C3A                 mov     [rbx+70h], cx
.text:0000000000011C3E                 mov     [rbx], rax
.text:0000000000011C41
.text:0000000000011C41 loc_11C41:                              ; CODE XREF: enter_dir_isra_10+51↑j
.text:0000000000011C41                                         ; enter_dir_isra_10+8F↓j
.text:0000000000011C41                 pop     rbx
.text:0000000000011C42                 mov     eax, 1
.text:0000000000011C47                 pop     rbp
.text:0000000000011C48                 pop     r12
.text:0000000000011C4A                 retn
.text:0000000000011C4A ; ---------------------------------------------------------------------------
.text:0000000000011C4B                 align 10h
.text:0000000000011C50
.text:0000000000011C50 loc_11C50:                              ; CODE XREF: enter_dir_isra_10+10↑j
.text:0000000000011C50                 mov     rdi, [r12]
.text:0000000000011C54                 lea     rsi, [rdx+78h]
.text:0000000000011C58                 call    cycle_check
.text:0000000000011C5D                 test    al, al
.text:0000000000011C5F                 jz      short loc_11C41
.text:0000000000011C61                 mov     edx, 2
.text:0000000000011C66                 mov     [rbx], rbx
.text:0000000000011C69                 mov     [rbx+70h], dx
.text:0000000000011C6D                 pop     rbx
.text:0000000000011C6E                 pop     rbp
.text:0000000000011C6F                 pop     r12
.text:0000000000011C71                 retn
.text:0000000000011C71 ; ---------------------------------------------------------------------------
.text:0000000000011C72                 align 8
.text:0000000000011C78
.text:0000000000011C78 loc_11C78:                              ; CODE XREF: enter_dir_isra_10+22↑j
.text:0000000000011C78                                         ; enter_dir_isra_10+5E↑j
.text:0000000000011C78                 pop     rbx
.text:0000000000011C79                 xor     eax, eax
.text:0000000000011C7B                 pop     rbp
.text:0000000000011C7C                 pop     r12
.text:0000000000011C7E                 retn
.text:0000000000011C7E ; } // starts at 11BD0
.text:0000000000011C7E enter_dir_isra_10 endp
.text:0000000000011C7E
.text:0000000000011C7E ; ---------------------------------------------------------------------------
.text:0000000000011C7F                 align 20h
.text:0000000000011C80
.text:0000000000011C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000011C80
.text:0000000000011C80
.text:0000000000011C80 leave_dir_isra_12 proc near             ; CODE XREF: fts_build+5FA↓p
.text:0000000000011C80                                         ; rpl_fts_read+195↓p ...
.text:0000000000011C80
.text:0000000000011C80 var_28          = qword ptr -28h
.text:0000000000011C80 var_20          = qword ptr -20h
.text:0000000000011C80 var_10          = qword ptr -10h
.text:0000000000011C80
.text:0000000000011C80 ; __unwind {
.text:0000000000011C80                 sub     rsp, 28h
.text:0000000000011C84                 mov     rcx, rsi
.text:0000000000011C87                 mov     rax, fs:28h
.text:0000000000011C90                 mov     [rsp+28h+var_10], rax
.text:0000000000011C95                 xor     eax, eax
.text:0000000000011C97                 and     edi, 102h
.text:0000000000011C9D                 jnz     short loc_11CE0
.text:0000000000011C9F                 mov     rax, [rdx+8]
.text:0000000000011CA3                 test    rax, rax
.text:0000000000011CA6                 jz      short loc_11CC5
.text:0000000000011CA8                 cmp     qword ptr [rax+58h], 0
.text:0000000000011CAD                 js      short loc_11CC5
.text:0000000000011CAF                 mov     rcx, [rsi]
.text:0000000000011CB2                 cmp     qword ptr [rcx+10h], 0
.text:0000000000011CB7                 jz      short loc_11D33
.text:0000000000011CB9                 mov     rsi, [rdx+80h]
.text:0000000000011CC0                 cmp     [rcx], rsi
.text:0000000000011CC3                 jz      short loc_11D10
.text:0000000000011CC5
.text:0000000000011CC5 loc_11CC5:                              ; CODE XREF: leave_dir_isra_12+26↑j
.text:0000000000011CC5                                         ; leave_dir_isra_12+2D↑j ...
.text:0000000000011CC5                 mov     rax, [rsp+28h+var_10]
.text:0000000000011CCA                 xor     rax, fs:28h
.text:0000000000011CD3                 jnz     short loc_11D2E
.text:0000000000011CD5                 add     rsp, 28h
.text:0000000000011CD9                 retn
.text:0000000000011CD9 ; ---------------------------------------------------------------------------
.text:0000000000011CDA                 align 20h
.text:0000000000011CE0
.text:0000000000011CE0 loc_11CE0:                              ; CODE XREF: leave_dir_isra_12+1D↑j
.text:0000000000011CE0                 mov     rax, [rdx+78h]
.text:0000000000011CE4                 mov     rdi, [rcx]
.text:0000000000011CE7                 mov     rsi, rsp
.text:0000000000011CEA                 mov     [rsp+28h+var_28], rax
.text:0000000000011CEE                 mov     rax, [rdx+80h]
.text:0000000000011CF5                 mov     [rsp+28h+var_20], rax
.text:0000000000011CFA                 call    hash_delete
.text:0000000000011CFF                 test    rax, rax
.text:0000000000011D02                 jz      short loc_11D33
.text:0000000000011D04                 mov     rdi, rax        ; ptr
.text:0000000000011D07                 call    free
.text:0000000000011D0C                 jmp     short loc_11CC5
.text:0000000000011D0C ; ---------------------------------------------------------------------------
.text:0000000000011D0E                 align 10h
.text:0000000000011D10
.text:0000000000011D10 loc_11D10:                              ; CODE XREF: leave_dir_isra_12+43↑j
.text:0000000000011D10                 mov     rsi, [rdx+78h]
.text:0000000000011D14                 cmp     [rcx+8], rsi
.text:0000000000011D18                 jnz     short loc_11CC5
.text:0000000000011D1A                 mov     rdx, [rax+78h]
.text:0000000000011D1E                 mov     rax, [rax+80h]
.text:0000000000011D25                 mov     [rcx+8], rdx
.text:0000000000011D29                 mov     [rcx], rax
.text:0000000000011D2C                 jmp     short loc_11CC5
.text:0000000000011D2E ; ---------------------------------------------------------------------------
.text:0000000000011D2E
.text:0000000000011D2E loc_11D2E:                              ; CODE XREF: leave_dir_isra_12+53↑j
.text:0000000000011D2E                 call    ___stack_chk_fail
.text:0000000000011D33 ; ---------------------------------------------------------------------------
.text:0000000000011D33
.text:0000000000011D33 loc_11D33:                              ; CODE XREF: leave_dir_isra_12+37↑j
.text:0000000000011D33                                         ; leave_dir_isra_12+82↑j
.text:0000000000011D33                 call    _abort
.text:0000000000011D33 ; } // starts at 11C80
.text:0000000000011D33 leave_dir_isra_12 endp
.text:0000000000011D33
.text:0000000000011D33 ; ---------------------------------------------------------------------------
.text:0000000000011D38                 align 20h
.text:0000000000011D40
.text:0000000000011D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000011D40
.text:0000000000011D40
.text:0000000000011D40 fts_build       proc near               ; CODE XREF: rpl_fts_read+420↓p
.text:0000000000011D40                                         ; rpl_fts_read+619↓p ...
.text:0000000000011D40
.text:0000000000011D40 var_A0          = qword ptr -0A0h
.text:0000000000011D40 ptr             = qword ptr -98h
.text:0000000000011D40 var_90          = qword ptr -90h
.text:0000000000011D40 var_88          = qword ptr -88h
.text:0000000000011D40 var_80          = qword ptr -80h
.text:0000000000011D40 var_78          = qword ptr -78h
.text:0000000000011D40 var_70          = qword ptr -70h
.text:0000000000011D40 dest            = qword ptr -68h
.text:0000000000011D40 var_60          = qword ptr -60h
.text:0000000000011D40 var_58          = qword ptr -58h
.text:0000000000011D40 var_50          = dword ptr -50h
.text:0000000000011D40 var_4B          = byte ptr -4Bh
.text:0000000000011D40 var_4A          = byte ptr -4Ah
.text:0000000000011D40 var_49          = byte ptr -49h
.text:0000000000011D40 fd              = dword ptr -44h
.text:0000000000011D40 var_40          = qword ptr -40h
.text:0000000000011D40
.text:0000000000011D40 ; __unwind {
.text:0000000000011D40                 push    r15
.text:0000000000011D42                 push    r14
.text:0000000000011D44                 mov     r15, rdi
.text:0000000000011D47                 push    r13
.text:0000000000011D49                 push    r12
.text:0000000000011D4B                 push    rbp
.text:0000000000011D4C                 push    rbx
.text:0000000000011D4D                 sub     rsp, 78h
.text:0000000000011D51                 mov     rbp, [rdi]
.text:0000000000011D54                 mov     rax, fs:28h
.text:0000000000011D5D                 mov     [rsp+0A8h+var_40], rax
.text:0000000000011D62                 xor     eax, eax
.text:0000000000011D64                 mov     [rsp+0A8h+var_50], esi
.text:0000000000011D68                 mov     rax, [rbp+18h]
.text:0000000000011D6C                 test    rax, rax
.text:0000000000011D6F                 mov     [rsp+0A8h+var_58], rax
.text:0000000000011D74                 jz      loc_121B0
.text:0000000000011D7A                 mov     rdi, rax        ; dirp
.text:0000000000011D7D                 call    _dirfd
.text:0000000000011D82                 test    eax, eax
.text:0000000000011D84                 mov     [rsp+0A8h+fd], eax
.text:0000000000011D88                 js      loc_122E0
.text:0000000000011D8E                 cmp     qword ptr [r15+40h], 0
.text:0000000000011D93                 jz      loc_12568
.text:0000000000011D99                 mov     [rsp+0A8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:0000000000011DA2
.text:0000000000011DA2 loc_11DA2:                              ; CODE XREF: fts_build+89F↓j
.text:0000000000011DA2                 mov     edi, [r15+48h]
.text:0000000000011DA6                 mov     [rsp+0A8h+var_49], 1
.text:0000000000011DAB
.text:0000000000011DAB loc_11DAB:                              ; CODE XREF: fts_build+57D↓j
.text:0000000000011DAB                                         ; fts_build+83A↓j ...
.text:0000000000011DAB                 mov     rcx, [rbp+48h]
.text:0000000000011DAF                 mov     rdx, [rbp+38h]
.text:0000000000011DB3                 mov     [rsp+0A8h+dest], 0
.text:0000000000011DBC                 cmp     byte ptr [rdx+rcx-1], 2Fh ; '/'
.text:0000000000011DC1                 lea     rax, [rcx-1]
.text:0000000000011DC5                 cmovnz  rax, rcx
.text:0000000000011DC9                 and     edi, 4
.text:0000000000011DCC                 mov     [rsp+0A8h+var_60], rax
.text:0000000000011DD1                 jz      short loc_11DE3
.text:0000000000011DD3                 add     rax, [r15+20h]
.text:0000000000011DD7                 lea     rbx, [rax+1]
.text:0000000000011DDB                 mov     byte ptr [rax], 2Fh ; '/'
.text:0000000000011DDE                 mov     [rsp+0A8h+dest], rbx
.text:0000000000011DE3
.text:0000000000011DE3 loc_11DE3:                              ; CODE XREF: fts_build+91↑j
.text:0000000000011DE3                 mov     rax, [rsp+0A8h+var_60]
.text:0000000000011DE8                 mov     rbx, [r15+30h]
.text:0000000000011DEC                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000011DF1                 mov     [rsp+0A8h+var_4B], 0
.text:0000000000011DF6                 mov     [rsp+0A8h+var_A0], 0
.text:0000000000011DFF                 mov     [rsp+0A8h+ptr], 0
.text:0000000000011E08                 add     rax, 1
.text:0000000000011E0C                 mov     [rsp+0A8h+var_88], rbp
.text:0000000000011E11                 sub     rbx, rax
.text:0000000000011E14                 mov     [rsp+0A8h+var_90], rax
.text:0000000000011E19                 mov     rax, [rbp+58h]
.text:0000000000011E1D                 mov     [rsp+0A8h+var_80], rbx
.text:0000000000011E22                 xor     ebx, ebx
.text:0000000000011E24                 add     rax, 1
.text:0000000000011E28                 mov     [rsp+0A8h+var_78], rax
.text:0000000000011E2D                 jmp     loc_11F0F
.text:0000000000011E2D ; ---------------------------------------------------------------------------
.text:0000000000011E32                 align 8
.text:0000000000011E38
.text:0000000000011E38 loc_11E38:                              ; CODE XREF: fts_build+242↓j
.text:0000000000011E38                                         ; fts_build+2A6↓j
.text:0000000000011E38                 mov     r9, r14
.text:0000000000011E3B                 add     r9, [rsp+0A8h+var_90]
.text:0000000000011E40                 jb      loc_126A0
.text:0000000000011E46                 mov     rax, [rsp+0A8h+var_78]
.text:0000000000011E4B                 lea     rsi, [r13+108h] ; src
.text:0000000000011E52                 mov     [r13+58h], rax
.text:0000000000011E56                 mov     rax, [r15]
.text:0000000000011E59                 mov     [r13+48h], r9
.text:0000000000011E5D                 mov     [r13+8], rax
.text:0000000000011E61                 mov     rax, [rbp+0]
.text:0000000000011E65                 mov     [r13+80h], rax
.text:0000000000011E6C                 mov     eax, [r15+48h]
.text:0000000000011E70                 test    al, 4
.text:0000000000011E72                 jnz     loc_120E0
.text:0000000000011E78                 mov     [r13+30h], rsi
.text:0000000000011E7C
.text:0000000000011E7C loc_11E7C:                              ; CODE XREF: fts_build+3BE↓j
.text:0000000000011E7C                 cmp     qword ptr [r15+40h], 0
.text:0000000000011E81                 jz      short loc_11E8C
.text:0000000000011E83                 test    ah, 4
.text:0000000000011E86                 jz      loc_12188
.text:0000000000011E8C
.text:0000000000011E8C loc_11E8C:                              ; CODE XREF: fts_build+141↑j
.text:0000000000011E8C                 movzx   edx, byte ptr [rbp+12h]
.text:0000000000011E90                 and     eax, 18h
.text:0000000000011E93                 mov     esi, edx
.text:0000000000011E95                 sub     edx, 1
.text:0000000000011E98                 cmp     eax, 18h
.text:0000000000011E9B                 jz      loc_12150
.text:0000000000011EA1
.text:0000000000011EA1 loc_11EA1:                              ; CODE XREF: fts_build+416↓j
.text:0000000000011EA1                 mov     ecx, 0Bh
.text:0000000000011EA6                 cmp     edx, 0Bh
.text:0000000000011EA9                 mov     [r13+70h], cx
.text:0000000000011EAE                 ja      loc_12118
.text:0000000000011EB4                 lea     rax, CSWTCH_53
.text:0000000000011EBB                 mov     eax, [rax+rdx*4]
.text:0000000000011EBE                 mov     [r13+90h], eax
.text:0000000000011EC5                 mov     eax, 2
.text:0000000000011ECA
.text:0000000000011ECA loc_11ECA:                              ; CODE XREF: fts_build+3E8↓j
.text:0000000000011ECA                                         ; fts_build+43F↓j ...
.text:0000000000011ECA                 mov     [r13+0A8h], rax
.text:0000000000011ED1
.text:0000000000011ED1 loc_11ED1:                              ; CODE XREF: fts_build+45A↓j
.text:0000000000011ED1                 cmp     [rsp+0A8h+ptr], 0
.text:0000000000011ED7                 mov     qword ptr [r13+10h], 0
.text:0000000000011EDF                 jz      loc_12108
.text:0000000000011EE5                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000011EEA                 mov     [rax+10h], r13
.text:0000000000011EEE
.text:0000000000011EEE loc_11EEE:                              ; CODE XREF: fts_build+3CD↓j
.text:0000000000011EEE                 cmp     rbx, 2710h
.text:0000000000011EF5                 jz      loc_11FF0
.text:0000000000011EFB
.text:0000000000011EFB loc_11EFB:                              ; CODE XREF: fts_build+2B5↓j
.text:0000000000011EFB                                         ; fts_build+645↓j
.text:0000000000011EFB                 add     rbx, 1
.text:0000000000011EFF                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000011F04                 jnb     loc_12048
.text:0000000000011F0A
.text:0000000000011F0A loc_11F0A:                              ; CODE XREF: fts_build+2FD↓j
.text:0000000000011F0A                                         ; fts_build+406↓j
.text:0000000000011F0A                 mov     [rsp+0A8h+var_A0], r13
.text:0000000000011F0F
.text:0000000000011F0F loc_11F0F:                              ; CODE XREF: fts_build+ED↑j
.text:0000000000011F0F                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000011F14                 mov     r13, [rax+18h]
.text:0000000000011F18                 test    r13, r13
.text:0000000000011F1B                 jz      loc_123E8
.text:0000000000011F21                 call    ___errno_location
.text:0000000000011F26                 mov     rdi, r13        ; dirp
.text:0000000000011F29                 mov     dword ptr [rax], 0
.text:0000000000011F2F                 mov     r12, rax
.text:0000000000011F32                 call    _readdir
.text:0000000000011F37                 test    rax, rax
.text:0000000000011F3A                 mov     rbp, rax
.text:0000000000011F3D                 jz      loc_124C0
.text:0000000000011F43                 test    byte ptr [r15+48h], 20h
.text:0000000000011F48                 jnz     short loc_11F54
.text:0000000000011F4A                 cmp     byte ptr [rax+13h], 2Eh ; '.'
.text:0000000000011F4E                 jz      loc_12130
.text:0000000000011F54
.text:0000000000011F54 loc_11F54:                              ; CODE XREF: fts_build+208↑j
.text:0000000000011F54                                         ; fts_build+3FB↓j
.text:0000000000011F54                 lea     r13, [rbp+13h]
.text:0000000000011F58                 mov     rdi, r13        ; s
.text:0000000000011F5B                 call    _strlen
.text:0000000000011F60                 mov     rsi, r13
.text:0000000000011F63                 mov     rdx, rax
.text:0000000000011F66                 mov     rdi, r15
.text:0000000000011F69                 mov     r14, rax
.text:0000000000011F6C                 call    fts_alloc
.text:0000000000011F71                 test    rax, rax
.text:0000000000011F74                 mov     r13, rax
.text:0000000000011F77                 jz      loc_12390
.text:0000000000011F7D                 cmp     [rsp+0A8h+var_80], r14
.text:0000000000011F82                 ja      loc_11E38
.text:0000000000011F88                 mov     rax, [r15+20h]
.text:0000000000011F8C                 lea     rsi, [r15+30h]
.text:0000000000011F90                 lea     rdi, [r15+20h]
.text:0000000000011F94                 mov     [rsp+0A8h+var_80], rax
.text:0000000000011F99                 mov     rax, [rsp+0A8h+var_60]
.text:0000000000011F9E                 lea     rdx, [rax+r14+2]
.text:0000000000011FA3                 call    fts_palloc_isra_2
.text:0000000000011FA8                 test    al, al
.text:0000000000011FAA                 jz      loc_12390
.text:0000000000011FB0                 mov     rdx, [r15+20h]
.text:0000000000011FB4                 cmp     rdx, [rsp+0A8h+var_80]
.text:0000000000011FB9                 jz      loc_121A0
.text:0000000000011FBF                 add     rdx, [rsp+0A8h+var_90]
.text:0000000000011FC4                 test    byte ptr [r15+48h], 4
.text:0000000000011FC9                 cmovz   rdx, [rsp+0A8h+dest]
.text:0000000000011FCF                 mov     [rsp+0A8h+dest], rdx
.text:0000000000011FD4
.text:0000000000011FD4 loc_11FD4:                              ; CODE XREF: fts_build+465↓j
.text:0000000000011FD4                 mov     rcx, [r15+30h]
.text:0000000000011FD8                 sub     rcx, [rsp+0A8h+var_90]
.text:0000000000011FDD                 mov     [rsp+0A8h+var_4B], al
.text:0000000000011FE1                 mov     [rsp+0A8h+var_80], rcx
.text:0000000000011FE6                 jmp     loc_11E38
.text:0000000000011FE6 ; ---------------------------------------------------------------------------
.text:0000000000011FEB                 align 10h
.text:0000000000011FF0
.text:0000000000011FF0 loc_11FF0:                              ; CODE XREF: fts_build+1B5↑j
.text:0000000000011FF0                 cmp     qword ptr [r15+40h], 0
.text:0000000000011FF5                 jnz     loc_11EFB
.text:0000000000011FFB                 mov     esi, [rsp+0A8h+fd]
.text:0000000000011FFF                 mov     rdi, [rsp+0A8h+var_88]
.text:0000000000012004                 call    filesystem_type
.text:0000000000012009                 cmp     rax, 1021994h
.text:000000000001200F                 jz      loc_12380
.text:0000000000012015                 mov     ecx, 0FF534D42h
.text:000000000001201A                 cmp     rax, rcx
.text:000000000001201D                 jz      loc_12380
.text:0000000000012023                 cmp     rax, 6969h
.text:0000000000012029                 jz      loc_12380
.text:000000000001202F                 add     rbx, 1
.text:0000000000012033                 cmp     rbx, [rsp+0A8h+var_70]
.text:0000000000012038                 mov     [rsp+0A8h+var_4A], 1
.text:000000000001203D                 jb      loc_11F0A
.text:0000000000012043                 nop     dword ptr [rax+rax+00h]
.text:0000000000012048
.text:0000000000012048 loc_12048:                              ; CODE XREF: fts_build+1C4↑j
.text:0000000000012048                 cmp     [rsp+0A8h+var_4B], 0
.text:000000000001204D                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000012052                 jz      loc_123F6
.text:0000000000012058
.text:0000000000012058 loc_12058:                              ; CODE XREF: fts_build+6B0↓j
.text:0000000000012058                 mov     rax, [r15+8]
.text:000000000001205C                 mov     rcx, [r15+20h]
.text:0000000000012060                 test    rax, rax
.text:0000000000012063                 jz      short loc_12090
.text:0000000000012065                 nop     dword ptr [rax]
.text:0000000000012068
.text:0000000000012068 loc_12068:                              ; CODE XREF: fts_build+34E↓j
.text:0000000000012068                 mov     rdx, [rax+30h]
.text:000000000001206C                 lea     rsi, [rax+108h]
.text:0000000000012073                 cmp     rdx, rsi
.text:0000000000012076                 jz      short loc_12083
.text:0000000000012078                 sub     rdx, [rax+38h]
.text:000000000001207C                 add     rdx, rcx
.text:000000000001207F                 mov     [rax+30h], rdx
.text:0000000000012083
.text:0000000000012083 loc_12083:                              ; CODE XREF: fts_build+336↑j
.text:0000000000012083                 mov     [rax+38h], rcx
.text:0000000000012087                 mov     rax, [rax+10h]
.text:000000000001208B                 test    rax, rax
.text:000000000001208E                 jnz     short loc_12068
.text:0000000000012090
.text:0000000000012090 loc_12090:                              ; CODE XREF: fts_build+323↑j
.text:0000000000012090                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000012095                 jmp     short loc_120A3
.text:0000000000012095 ; ---------------------------------------------------------------------------
.text:0000000000012097                 align 20h
.text:00000000000120A0
.text:00000000000120A0 loc_120A0:                              ; CODE XREF: fts_build+394↓j
.text:00000000000120A0                                         ; fts_build+39A↓j
.text:00000000000120A0                 mov     rax, rdx
.text:00000000000120A3
.text:00000000000120A3 loc_120A3:                              ; CODE XREF: fts_build+355↑j
.text:00000000000120A3                 cmp     qword ptr [rax+58h], 0
.text:00000000000120A8                 js      loc_123F6
.text:00000000000120AE                 mov     rdx, [rax+30h]
.text:00000000000120B2                 lea     rsi, [rax+108h]
.text:00000000000120B9                 cmp     rdx, rsi
.text:00000000000120BC                 jz      short loc_120C9
.text:00000000000120BE                 sub     rdx, [rax+38h]
.text:00000000000120C2                 add     rdx, rcx
.text:00000000000120C5                 mov     [rax+30h], rdx
.text:00000000000120C9
.text:00000000000120C9 loc_120C9:                              ; CODE XREF: fts_build+37C↑j
.text:00000000000120C9                 mov     rdx, [rax+10h]
.text:00000000000120CD                 mov     [rax+38h], rcx
.text:00000000000120D1                 test    rdx, rdx
.text:00000000000120D4                 jnz     short loc_120A0
.text:00000000000120D6                 mov     rdx, [rax+8]
.text:00000000000120DA                 jmp     short loc_120A0
.text:00000000000120DA ; ---------------------------------------------------------------------------
.text:00000000000120DC                 align 20h
.text:00000000000120E0
.text:00000000000120E0 loc_120E0:                              ; CODE XREF: fts_build+132↑j
.text:00000000000120E0                 mov     rax, [r13+38h]
.text:00000000000120E4                 mov     rdi, [rsp+0A8h+dest] ; dest
.text:00000000000120E9                 mov     [r13+30h], rax
.text:00000000000120ED                 mov     rax, [r13+60h]
.text:00000000000120F1                 lea     rdx, [rax+1]    ; n
.text:00000000000120F5                 call    _memmove
.text:00000000000120FA                 mov     eax, [r15+48h]
.text:00000000000120FE                 jmp     loc_11E7C
.text:00000000000120FE ; ---------------------------------------------------------------------------
.text:0000000000012103                 align 8
.text:0000000000012108
.text:0000000000012108 loc_12108:                              ; CODE XREF: fts_build+19F↑j
.text:0000000000012108                 mov     [rsp+0A8h+ptr], r13
.text:000000000001210D                 jmp     loc_11EEE
.text:000000000001210D ; ---------------------------------------------------------------------------
.text:0000000000012112                 align 8
.text:0000000000012118
.text:0000000000012118 loc_12118:                              ; CODE XREF: fts_build+16E↑j
.text:0000000000012118                 mov     dword ptr [r13+90h], 0
.text:0000000000012123                 mov     eax, 2
.text:0000000000012128                 jmp     loc_11ECA
.text:0000000000012128 ; ---------------------------------------------------------------------------
.text:000000000001212D                 align 10h
.text:0000000000012130
.text:0000000000012130 loc_12130:                              ; CODE XREF: fts_build+20E↑j
.text:0000000000012130                 cmp     byte ptr [rax+14h], 0
.text:0000000000012134                 jz      short loc_12141
.text:0000000000012136                 cmp     word ptr [rax+14h], 2Eh ; '.'
.text:000000000001213B                 jnz     loc_11F54
.text:0000000000012141
.text:0000000000012141 loc_12141:                              ; CODE XREF: fts_build+3F4↑j
.text:0000000000012141                 mov     r13, [rsp+0A8h+var_A0]
.text:0000000000012146                 jmp     loc_11F0A
.text:0000000000012146 ; ---------------------------------------------------------------------------
.text:000000000001214B                 align 10h
.text:0000000000012150
.text:0000000000012150 loc_12150:                              ; CODE XREF: fts_build+15B↑j
.text:0000000000012150                 and     esi, 0FBh
.text:0000000000012156                 jz      loc_11EA1
.text:000000000001215C                 mov     eax, 0Bh
.text:0000000000012161                 cmp     edx, 0Bh
.text:0000000000012164                 mov     [r13+70h], ax
.text:0000000000012169                 jbe     loc_126F6
.text:000000000001216F                 mov     dword ptr [r13+90h], 0
.text:000000000001217A                 mov     eax, 1
.text:000000000001217F                 jmp     loc_11ECA
.text:000000000001217F ; ---------------------------------------------------------------------------
.text:0000000000012184                 align 8
.text:0000000000012188
.text:0000000000012188 loc_12188:                              ; CODE XREF: fts_build+146↑j
.text:0000000000012188                 xor     edx, edx
.text:000000000001218A                 mov     rsi, r13
.text:000000000001218D                 mov     rdi, r15
.text:0000000000012190                 call    fts_stat
.text:0000000000012195                 mov     [r13+70h], ax
.text:000000000001219A                 jmp     loc_11ED1
.text:000000000001219A ; ---------------------------------------------------------------------------
.text:000000000001219F                 align 20h
.text:00000000000121A0
.text:00000000000121A0 loc_121A0:                              ; CODE XREF: fts_build+279↑j
.text:00000000000121A0                 movzx   eax, [rsp+0A8h+var_4B]
.text:00000000000121A5                 jmp     loc_11FD4
.text:00000000000121A5 ; ---------------------------------------------------------------------------
.text:00000000000121AA                 align 10h
.text:00000000000121B0
.text:00000000000121B0 loc_121B0:                              ; CODE XREF: fts_build+34↑j
.text:00000000000121B0                 mov     eax, [rdi+48h]
.text:00000000000121B3                 mov     edx, eax
.text:00000000000121B5                 and     edx, 10h
.text:00000000000121B8                 jz      short loc_121C7
.text:00000000000121BA                 test    al, 1
.text:00000000000121BC                 mov     edx, 20000h
.text:00000000000121C1                 jnz     loc_122C8
.text:00000000000121C7
.text:00000000000121C7 loc_121C7:                              ; CODE XREF: fts_build+478↑j
.text:00000000000121C7                                         ; fts_build+595↓j
.text:00000000000121C7                 and     eax, 204h
.text:00000000000121CC                 mov     rsi, [rbp+30h]
.text:00000000000121D0                 mov     edi, 0FFFFFF9Ch
.text:00000000000121D5                 cmp     eax, 200h
.text:00000000000121DA                 jnz     short loc_121E0
.text:00000000000121DC                 mov     edi, [r15+2Ch]
.text:00000000000121E0
.text:00000000000121E0 loc_121E0:                              ; CODE XREF: fts_build+49A↑j
.text:00000000000121E0                 lea     rcx, [rsp+0A8h+fd]
.text:00000000000121E5                 call    opendirat
.text:00000000000121EA                 test    rax, rax
.text:00000000000121ED                 mov     [rbp+18h], rax
.text:00000000000121F1                 jz      loc_12510
.text:00000000000121F7                 cmp     word ptr [rbp+70h], 0Bh
.text:00000000000121FC                 jz      loc_12590
.text:0000000000012202                 mov     edi, [r15+48h]
.text:0000000000012206                 test    edi, 100h
.text:000000000001220C                 jnz     loc_12330
.text:0000000000012212
.text:0000000000012212 loc_12212:                              ; CODE XREF: fts_build+61D↓j
.text:0000000000012212                                         ; fts_build+861↓j
.text:0000000000012212                 cmp     qword ptr [r15+40h], 1
.text:0000000000012217                 sbb     rax, rax
.text:000000000001221A                 and     eax, 186A1h
.text:000000000001221F                 sub     rax, 1
.text:0000000000012223                 cmp     [rsp+0A8h+var_50], 2
.text:0000000000012228                 mov     [rsp+0A8h+var_70], rax
.text:000000000001222D                 jz      loc_12580
.text:0000000000012233                 mov     edx, [r15+48h]
.text:0000000000012237                 mov     eax, [rsp+0A8h+fd]
.text:000000000001223B                 and     edx, 38h
.text:000000000001223E                 cmp     edx, 18h
.text:0000000000012241                 jz      loc_125E4
.text:0000000000012247
.text:0000000000012247 loc_12247:                              ; CODE XREF: fts_build+8AC↓j
.text:0000000000012247                                         ; fts_build+8C4↓j
.text:0000000000012247                 cmp     [rsp+0A8h+var_50], 3
.text:000000000001224C                 mov     r12d, 1
.text:0000000000012252                 setz    bl
.text:0000000000012255
.text:0000000000012255 loc_12255:                              ; CODE XREF: fts_build+955↓j
.text:0000000000012255                 test    byte ptr [r15+49h], 2
.text:000000000001225A                 jnz     loc_1263C
.text:0000000000012260
.text:0000000000012260 loc_12260:                              ; CODE XREF: fts_build+913↓j
.text:0000000000012260                 test    eax, eax
.text:0000000000012262                 jns     loc_125C8
.text:0000000000012268
.text:0000000000012268 loc_12268:                              ; CODE XREF: fts_build+899↓j
.text:0000000000012268                 test    bl, bl
.text:000000000001226A                 jz      short loc_1227B
.text:000000000001226C                 test    r12b, r12b
.text:000000000001226F                 jz      short loc_1227B
.text:0000000000012271                 call    ___errno_location
.text:0000000000012276                 mov     eax, [rax]
.text:0000000000012278                 mov     [rbp+40h], eax
.text:000000000001227B
.text:000000000001227B loc_1227B:                              ; CODE XREF: fts_build+52A↑j
.text:000000000001227B                                         ; fts_build+52F↑j
.text:000000000001227B                 or      word ptr [rbp+72h], 1
.text:0000000000012280                 mov     rdi, [rbp+18h]  ; dirp
.text:0000000000012284                 call    _closedir
.text:0000000000012289                 mov     edi, [r15+48h]
.text:000000000001228D                 mov     qword ptr [rbp+18h], 0
.text:0000000000012295                 test    edi, 200h
.text:000000000001229B                 jz      short loc_122B0
.text:000000000001229D                 mov     eax, [rsp+0A8h+fd]
.text:00000000000122A1                 test    eax, eax
.text:00000000000122A3                 js      short loc_122B0
.text:00000000000122A5                 mov     edi, eax        ; fd
.text:00000000000122A7                 call    _close
.text:00000000000122AC                 mov     edi, [r15+48h]
.text:00000000000122B0
.text:00000000000122B0 loc_122B0:                              ; CODE XREF: fts_build+55B↑j
.text:00000000000122B0                                         ; fts_build+563↑j
.text:00000000000122B0                 mov     qword ptr [rbp+18h], 0
.text:00000000000122B8                 mov     [rsp+0A8h+var_49], 0
.text:00000000000122BD                 jmp     loc_11DAB
.text:00000000000122BD ; ---------------------------------------------------------------------------
.text:00000000000122C2                 align 8
.text:00000000000122C8
.text:00000000000122C8 loc_122C8:                              ; CODE XREF: fts_build+481↑j
.text:00000000000122C8                 xor     edx, edx
.text:00000000000122CA                 cmp     qword ptr [rbp+58h], 0
.text:00000000000122CF                 setnz   dl
.text:00000000000122D2                 shl     edx, 11h
.text:00000000000122D5                 jmp     loc_121C7
.text:00000000000122D5 ; ---------------------------------------------------------------------------
.text:00000000000122DA                 align 20h
.text:00000000000122E0
.text:00000000000122E0 loc_122E0:                              ; CODE XREF: fts_build+48↑j
.text:00000000000122E0                 mov     rdi, [rbp+18h]  ; dirp
.text:00000000000122E4                 call    _closedir
.text:00000000000122E9                 cmp     [rsp+0A8h+var_50], 3
.text:00000000000122EE                 mov     qword ptr [rbp+18h], 0
.text:00000000000122F6                 jz      loc_1251B
.text:00000000000122FC
.text:00000000000122FC loc_122FC:                              ; CODE XREF: fts_build+7D5↓j
.text:00000000000122FC                                         ; fts_build+7F0↓j
.text:00000000000122FC                 mov     [rsp+0A8h+ptr], 0
.text:0000000000012305
.text:0000000000012305 loc_12305:                              ; CODE XREF: fts_build+637↓j
.text:0000000000012305                                         ; fts_build+69C↓j ...
.text:0000000000012305                 mov     rbx, [rsp+0A8h+var_40]
.text:000000000001230A                 xor     rbx, fs:28h
.text:0000000000012313                 mov     rax, [rsp+0A8h+ptr]
.text:0000000000012318                 jnz     loc_126F1
.text:000000000001231E                 add     rsp, 78h
.text:0000000000012322                 pop     rbx
.text:0000000000012323                 pop     rbp
.text:0000000000012324                 pop     r12
.text:0000000000012326                 pop     r13
.text:0000000000012328                 pop     r14
.text:000000000001232A                 pop     r15
.text:000000000001232C                 retn
.text:000000000001232C ; ---------------------------------------------------------------------------
.text:000000000001232D                 align 10h
.text:0000000000012330
.text:0000000000012330 loc_12330:                              ; CODE XREF: fts_build+4CC↑j
.text:0000000000012330                 lea     rbx, [r15+58h]
.text:0000000000012334                 mov     rdx, rbp
.text:0000000000012337                 mov     rsi, rbx
.text:000000000001233A                 call    leave_dir_isra_12
.text:000000000001233F                 xor     edx, edx
.text:0000000000012341                 mov     rsi, rbp
.text:0000000000012344                 mov     rdi, r15
.text:0000000000012347                 call    fts_stat
.text:000000000001234C                 mov     edi, [r15+48h]
.text:0000000000012350                 mov     rdx, rbp
.text:0000000000012353                 mov     rsi, rbx
.text:0000000000012356                 call    enter_dir_isra_10
.text:000000000001235B                 test    al, al
.text:000000000001235D                 jnz     loc_12212
.text:0000000000012363                 call    ___errno_location
.text:0000000000012368                 mov     [rsp+0A8h+ptr], 0
.text:0000000000012371                 mov     dword ptr [rax], 0Ch
.text:0000000000012377                 jmp     short loc_12305
.text:0000000000012377 ; ---------------------------------------------------------------------------
.text:0000000000012379                 align 20h
.text:0000000000012380
.text:0000000000012380 loc_12380:                              ; CODE XREF: fts_build+2CF↑j
.text:0000000000012380                                         ; fts_build+2DD↑j ...
.text:0000000000012380                 mov     [rsp+0A8h+var_4A], 0
.text:0000000000012385                 jmp     loc_11EFB
.text:0000000000012385 ; ---------------------------------------------------------------------------
.text:000000000001238A                 align 10h
.text:0000000000012390
.text:0000000000012390 loc_12390:                              ; CODE XREF: fts_build+237↑j
.text:0000000000012390                                         ; fts_build+26A↑j
.text:0000000000012390                 mov     rdi, r13        ; ptr
.text:0000000000012393                 mov     rbp, [rsp+0A8h+var_88]
.text:0000000000012398                 mov     ebx, [r12]
.text:000000000001239C                 call    free
.text:00000000000123A1                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000123A6                 call    fts_lfree
.text:00000000000123AB                 mov     rdi, [rbp+18h]  ; dirp
.text:00000000000123AF                 call    _closedir
.text:00000000000123B4                 mov     r9d, 7
.text:00000000000123BA                 mov     qword ptr [rbp+18h], 0
.text:00000000000123C2                 mov     [rsp+0A8h+ptr], 0
.text:00000000000123CB                 mov     [rbp+70h], r9w
.text:00000000000123D0                 or      dword ptr [r15+48h], 2000h
.text:00000000000123D8                 mov     [r12], ebx
.text:00000000000123DC                 jmp     loc_12305
.text:00000000000123DC ; ---------------------------------------------------------------------------
.text:00000000000123E1                 align 8
.text:00000000000123E8
.text:00000000000123E8 loc_123E8:                              ; CODE XREF: fts_build+1DB↑j
.text:00000000000123E8                 mov     rbp, rax
.text:00000000000123EB
.text:00000000000123EB loc_123EB:                              ; CODE XREF: fts_build+7B5↓j
.text:00000000000123EB                                         ; fts_build+7C8↓j
.text:00000000000123EB                 cmp     [rsp+0A8h+var_4B], 0
.text:00000000000123F0                 jnz     loc_12058
.text:00000000000123F6
.text:00000000000123F6 loc_123F6:                              ; CODE XREF: fts_build+312↑j
.text:00000000000123F6                                         ; fts_build+368↑j
.text:00000000000123F6                 test    byte ptr [r15+48h], 4
.text:00000000000123FB                 jz      short loc_1241B
.text:00000000000123FD                 mov     rax, [rsp+0A8h+var_90]
.text:0000000000012402                 cmp     [r15+30h], rax
.text:0000000000012406                 jz      short loc_1240D
.text:0000000000012408                 test    rbx, rbx
.text:000000000001240B                 jnz     short loc_12413
.text:000000000001240D
.text:000000000001240D loc_1240D:                              ; CODE XREF: fts_build+6C6↑j
.text:000000000001240D                 sub     [rsp+0A8h+dest], 1
.text:0000000000012413
.text:0000000000012413 loc_12413:                              ; CODE XREF: fts_build+6CB↑j
.text:0000000000012413                 mov     rax, [rsp+0A8h+dest]
.text:0000000000012418                 mov     byte ptr [rax], 0
.text:000000000001241B
.text:000000000001241B loc_1241B:                              ; CODE XREF: fts_build+6BB↑j
.text:000000000001241B                 cmp     [rsp+0A8h+var_58], 0
.text:0000000000012421                 jnz     short loc_12490
.text:0000000000012423                 cmp     [rsp+0A8h+var_49], 0
.text:0000000000012428                 jz      short loc_12490
.text:000000000001242A                 cmp     [rsp+0A8h+var_50], 1
.text:000000000001242F                 jz      short loc_12470
.text:0000000000012431                 test    rbx, rbx
.text:0000000000012434                 jz      short loc_12470
.text:0000000000012436
.text:0000000000012436 loc_12436:                              ; CODE XREF: fts_build+753↓j
.text:0000000000012436                 cmp     [rsp+0A8h+var_4A], 0
.text:000000000001243B                 jnz     loc_12538
.text:0000000000012441                 cmp     qword ptr [r15+40h], 0
.text:0000000000012446                 jz      loc_12305
.text:000000000001244C                 cmp     rbx, 1
.text:0000000000012450                 jz      loc_12305
.text:0000000000012456                 mov     rsi, [rsp+0A8h+ptr]
.text:000000000001245B                 mov     rdx, rbx
.text:000000000001245E                 mov     rdi, r15
.text:0000000000012461                 call    fts_sort
.text:0000000000012466                 mov     [rsp+0A8h+ptr], rax
.text:000000000001246B                 jmp     loc_12305
.text:0000000000012470 ; ---------------------------------------------------------------------------
.text:0000000000012470
.text:0000000000012470 loc_12470:                              ; CODE XREF: fts_build+6EF↑j
.text:0000000000012470                                         ; fts_build+6F4↑j
.text:0000000000012470                 cmp     qword ptr [rbp+58h], 0
.text:0000000000012475                 jnz     loc_125A6
.text:000000000001247B                 mov     rdi, r15
.text:000000000001247E                 call    restore_initial_cwd
.text:0000000000012483                 test    eax, eax
.text:0000000000012485                 setnz   al
.text:0000000000012488
.text:0000000000012488 loc_12488:                              ; CODE XREF: fts_build+883↓j
.text:0000000000012488                 test    al, al
.text:000000000001248A                 jnz     loc_12613
.text:0000000000012490
.text:0000000000012490 loc_12490:                              ; CODE XREF: fts_build+6E1↑j
.text:0000000000012490                                         ; fts_build+6E8↑j
.text:0000000000012490                 test    rbx, rbx
.text:0000000000012493                 jnz     short loc_12436
.text:0000000000012495                 cmp     [rsp+0A8h+var_50], 3
.text:000000000001249A                 jz      loc_12658
.text:00000000000124A0
.text:00000000000124A0 loc_124A0:                              ; CODE XREF: fts_build+920↓j
.text:00000000000124A0                                         ; fts_build+92A↓j ...
.text:00000000000124A0                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000124A5                 call    fts_lfree
.text:00000000000124AA                 mov     [rsp+0A8h+ptr], 0
.text:00000000000124B3                 jmp     loc_12305
.text:00000000000124B3 ; ---------------------------------------------------------------------------
.text:00000000000124B8                 align 20h
.text:00000000000124C0
.text:00000000000124C0 loc_124C0:                              ; CODE XREF: fts_build+1FD↑j
.text:00000000000124C0                 mov     eax, [r12]
.text:00000000000124C4                 mov     rbp, [rsp+0A8h+var_88]
.text:00000000000124C9                 test    eax, eax
.text:00000000000124CB                 jz      short loc_124EE
.text:00000000000124CD                 test    rbx, rbx
.text:00000000000124D0                 mov     [rbp+40h], eax
.text:00000000000124D3                 jnz     loc_12609
.text:00000000000124D9                 cmp     [rsp+0A8h+var_58], 0
.text:00000000000124DF                 mov     eax, 4
.text:00000000000124E4                 jnz     loc_12609
.text:00000000000124EA
.text:00000000000124EA loc_124EA:                              ; CODE XREF: fts_build+8CE↓j
.text:00000000000124EA                 mov     [rbp+70h], ax
.text:00000000000124EE
.text:00000000000124EE loc_124EE:                              ; CODE XREF: fts_build+78B↑j
.text:00000000000124EE                 mov     rdi, [rbp+18h]  ; dirp
.text:00000000000124F2                 test    rdi, rdi
.text:00000000000124F5                 jz      loc_123EB
.text:00000000000124FB                 call    _closedir
.text:0000000000012500                 mov     qword ptr [rbp+18h], 0
.text:0000000000012508                 jmp     loc_123EB
.text:0000000000012508 ; ---------------------------------------------------------------------------
.text:000000000001250D                 align 10h
.text:0000000000012510
.text:0000000000012510 loc_12510:                              ; CODE XREF: fts_build+4B1↑j
.text:0000000000012510                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000012515                 jnz     loc_122FC
.text:000000000001251B
.text:000000000001251B loc_1251B:                              ; CODE XREF: fts_build+5B6↑j
.text:000000000001251B                 mov     r10d, 4
.text:0000000000012521                 mov     [rbp+70h], r10w
.text:0000000000012526                 call    ___errno_location
.text:000000000001252B                 mov     eax, [rax]
.text:000000000001252D                 mov     [rbp+40h], eax
.text:0000000000012530                 jmp     loc_122FC
.text:0000000000012530 ; ---------------------------------------------------------------------------
.text:0000000000012535                 align 8
.text:0000000000012538
.text:0000000000012538 loc_12538:                              ; CODE XREF: fts_build+6FB↑j
.text:0000000000012538                 lea     rax, fts_compare_ino
.text:000000000001253F                 mov     rsi, [rsp+0A8h+ptr]
.text:0000000000012544                 mov     rdx, rbx
.text:0000000000012547                 mov     rdi, r15
.text:000000000001254A                 mov     [r15+40h], rax
.text:000000000001254E                 call    fts_sort
.text:0000000000012553                 mov     qword ptr [r15+40h], 0
.text:000000000001255B                 mov     [rsp+0A8h+ptr], rax
.text:0000000000012560                 jmp     loc_12305
.text:0000000000012560 ; ---------------------------------------------------------------------------
.text:0000000000012565                 align 8
.text:0000000000012568
.text:0000000000012568 loc_12568:                              ; CODE XREF: fts_build+53↑j
.text:0000000000012568                 mov     [rsp+0A8h+var_70], offset unk_186A0
.text:0000000000012571                 mov     [rsp+0A8h+var_49], 1
.text:0000000000012576                 mov     edi, [r15+48h]
.text:000000000001257A                 jmp     loc_11DAB
.text:000000000001257A ; ---------------------------------------------------------------------------
.text:000000000001257F                 align 20h
.text:0000000000012580
.text:0000000000012580 loc_12580:                              ; CODE XREF: fts_build+4ED↑j
.text:0000000000012580                                         ; fts_build+943↓j
.text:0000000000012580                 mov     [rsp+0A8h+var_49], 0
.text:0000000000012585                 mov     edi, [r15+48h]
.text:0000000000012589                 jmp     loc_11DAB
.text:0000000000012589 ; ---------------------------------------------------------------------------
.text:000000000001258E                 align 10h
.text:0000000000012590
.text:0000000000012590 loc_12590:                              ; CODE XREF: fts_build+4BC↑j
.text:0000000000012590                 xor     edx, edx
.text:0000000000012592                 mov     rsi, rbp
.text:0000000000012595                 mov     rdi, r15
.text:0000000000012598                 call    fts_stat
.text:000000000001259D                 mov     [rbp+70h], ax
.text:00000000000125A1                 jmp     loc_12212
.text:00000000000125A6 ; ---------------------------------------------------------------------------
.text:00000000000125A6
.text:00000000000125A6 loc_125A6:                              ; CODE XREF: fts_build+735↑j
.text:00000000000125A6                 mov     rsi, [rbp+8]
.text:00000000000125AA                 lea     rcx, asc_15AEB  ; ".."
.text:00000000000125B1                 mov     edx, 0FFFFFFFFh
.text:00000000000125B6                 mov     rdi, r15
.text:00000000000125B9                 call    fts_safe_changedir
.text:00000000000125BE                 test    eax, eax
.text:00000000000125C0                 setnz   al
.text:00000000000125C3                 jmp     loc_12488
.text:00000000000125C8 ; ---------------------------------------------------------------------------
.text:00000000000125C8
.text:00000000000125C8 loc_125C8:                              ; CODE XREF: fts_build+522↑j
.text:00000000000125C8                 xor     ecx, ecx
.text:00000000000125CA                 mov     edx, eax
.text:00000000000125CC                 mov     rsi, rbp
.text:00000000000125CF                 mov     rdi, r15
.text:00000000000125D2                 call    fts_safe_changedir
.text:00000000000125D7                 test    eax, eax
.text:00000000000125D9                 jnz     loc_12268
.text:00000000000125DF                 jmp     loc_11DA2
.text:00000000000125E4 ; ---------------------------------------------------------------------------
.text:00000000000125E4
.text:00000000000125E4 loc_125E4:                              ; CODE XREF: fts_build+501↑j
.text:00000000000125E4                 cmp     qword ptr [rbp+88h], 2
.text:00000000000125EC                 jnz     loc_12247
.text:00000000000125F2                 mov     esi, eax
.text:00000000000125F4                 mov     rdi, rbp
.text:00000000000125F7                 call    leaf_optimization
.text:00000000000125FC                 test    eax, eax
.text:00000000000125FE                 jnz     short loc_1267E
.text:0000000000012600                 mov     eax, [rsp+0A8h+fd]
.text:0000000000012604                 jmp     loc_12247
.text:0000000000012609 ; ---------------------------------------------------------------------------
.text:0000000000012609
.text:0000000000012609 loc_12609:                              ; CODE XREF: fts_build+793↑j
.text:0000000000012609                                         ; fts_build+7A4↑j
.text:0000000000012609                 mov     eax, 7
.text:000000000001260E                 jmp     loc_124EA
.text:0000000000012613 ; ---------------------------------------------------------------------------
.text:0000000000012613
.text:0000000000012613 loc_12613:                              ; CODE XREF: fts_build+74A↑j
.text:0000000000012613                 mov     edi, 7
.text:0000000000012618                 mov     [rbp+70h], di
.text:000000000001261C                 or      dword ptr [r15+48h], 2000h
.text:0000000000012624                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:0000000000012629                 call    fts_lfree
.text:000000000001262E                 mov     [rsp+0A8h+ptr], 0
.text:0000000000012637                 jmp     loc_12305
.text:000000000001263C ; ---------------------------------------------------------------------------
.text:000000000001263C
.text:000000000001263C loc_1263C:                              ; CODE XREF: fts_build+51A↑j
.text:000000000001263C                 mov     edi, eax        ; fd
.text:000000000001263E                 mov     edx, 3
.text:0000000000012643                 mov     esi, 406h
.text:0000000000012648                 xor     eax, eax
.text:000000000001264A                 call    rpl_fcntl
.text:000000000001264F                 mov     [rsp+0A8h+fd], eax
.text:0000000000012653                 jmp     loc_12260
.text:0000000000012658 ; ---------------------------------------------------------------------------
.text:0000000000012658
.text:0000000000012658 loc_12658:                              ; CODE XREF: fts_build+75A↑j
.text:0000000000012658                 movzx   eax, word ptr [rbp+70h]
.text:000000000001265C                 cmp     ax, 7
.text:0000000000012660                 jz      loc_124A0
.text:0000000000012666                 cmp     ax, 4
.text:000000000001266A                 jz      loc_124A0
.text:0000000000012670                 mov     esi, 6
.text:0000000000012675                 mov     [rbp+70h], si
.text:0000000000012679                 jmp     loc_124A0
.text:000000000001267E ; ---------------------------------------------------------------------------
.text:000000000001267E
.text:000000000001267E loc_1267E:                              ; CODE XREF: fts_build+8BE↑j
.text:000000000001267E                 cmp     [rsp+0A8h+var_50], 3
.text:0000000000012683                 jnz     loc_12580
.text:0000000000012689                 mov     eax, [rsp+0A8h+fd]
.text:000000000001268D                 xor     r12d, r12d
.text:0000000000012690                 mov     ebx, 1
.text:0000000000012695                 jmp     loc_12255
.text:0000000000012695 ; ---------------------------------------------------------------------------
.text:000000000001269A                 align 20h
.text:00000000000126A0
.text:00000000000126A0 loc_126A0:                              ; CODE XREF: fts_build+100↑j
.text:00000000000126A0                 mov     rdi, r13        ; ptr
.text:00000000000126A3                 mov     rbp, [rsp+0A8h+var_88]
.text:00000000000126A8                 call    free
.text:00000000000126AD                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:00000000000126B2                 call    fts_lfree
.text:00000000000126B7                 mov     rdi, [rbp+18h]  ; dirp
.text:00000000000126BB                 call    _closedir
.text:00000000000126C0                 mov     r8d, 7
.text:00000000000126C6                 mov     qword ptr [rbp+18h], 0
.text:00000000000126CE                 mov     [rsp+0A8h+ptr], 0
.text:00000000000126D7                 mov     [rbp+70h], r8w
.text:00000000000126DC                 or      dword ptr [r15+48h], 2000h
.text:00000000000126E4                 mov     dword ptr [r12], 24h ; '$'
.text:00000000000126EC                 jmp     loc_12305
.text:00000000000126F1 ; ---------------------------------------------------------------------------
.text:00000000000126F1
.text:00000000000126F1 loc_126F1:                              ; CODE XREF: fts_build+5D8↑j
.text:00000000000126F1                 call    ___stack_chk_fail
.text:00000000000126F6 ; ---------------------------------------------------------------------------
.text:00000000000126F6
.text:00000000000126F6 loc_126F6:                              ; CODE XREF: fts_build+429↑j
.text:00000000000126F6                 lea     rax, CSWTCH_53
.text:00000000000126FD                 mov     eax, [rax+rdx*4]
.text:0000000000012700                 mov     [r13+90h], eax
.text:0000000000012707                 mov     eax, 1
.text:000000000001270C                 jmp     loc_11ECA
.text:000000000001270C ; } // starts at 11D40
.text:000000000001270C fts_build       endp
.text:000000000001270C
.text:000000000001270C ; ---------------------------------------------------------------------------
.text:0000000000012711                 align 20h
.text:0000000000012720
.text:0000000000012720 ; =============== S U B R O U T I N E =======================================
.text:0000000000012720
.text:0000000000012720
.text:0000000000012720                 public rpl_fts_open
.text:0000000000012720 rpl_fts_open    proc near               ; CODE XREF: xfts_open+A↑p
.text:0000000000012720
.text:0000000000012720 var_50          = qword ptr -50h
.text:0000000000012720 var_42          = byte ptr -42h
.text:0000000000012720 var_41          = byte ptr -41h
.text:0000000000012720 var_40          = qword ptr -40h
.text:0000000000012720
.text:0000000000012720 ; __unwind {
.text:0000000000012720                 push    r15
.text:0000000000012722                 push    r14
.text:0000000000012724                 push    r13
.text:0000000000012726                 push    r12
.text:0000000000012728                 push    rbp
.text:0000000000012729                 push    rbx
.text:000000000001272A                 sub     rsp, 28h
.text:000000000001272E                 test    esi, 0FFFFF000h
.text:0000000000012734                 jnz     loc_12AB8
.text:000000000001273A                 mov     eax, esi
.text:000000000001273C                 mov     ebp, esi
.text:000000000001273E                 and     eax, 204h
.text:0000000000012743                 cmp     eax, 204h
.text:0000000000012748                 jz      loc_12AB8
.text:000000000001274E                 test    sil, 12h
.text:0000000000012752                 jz      loc_12AB8
.text:0000000000012758                 mov     r13, rdi
.text:000000000001275B                 mov     esi, 1          ; size
.text:0000000000012760                 mov     edi, 80h        ; nmemb
.text:0000000000012765                 mov     r14, rdx
.text:0000000000012768                 call    _calloc
.text:000000000001276D                 test    rax, rax
.text:0000000000012770                 mov     rbx, rax
.text:0000000000012773                 jz      loc_129CE
.text:0000000000012779                 test    bpl, 2
.text:000000000001277D                 mov     [rax+40h], r14
.text:0000000000012781                 jnz     loc_129E0
.text:0000000000012787                 mov     rdi, [r13+0]    ; s
.text:000000000001278B                 mov     [rax+48h], ebp
.text:000000000001278E                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:0000000000012795                 test    rdi, rdi
.text:0000000000012798                 jz      loc_129FF
.text:000000000001279E
.text:000000000001279E loc_1279E:                              ; CODE XREF: rpl_fts_open+2D9↓j
.text:000000000001279E                 mov     r15, r13
.text:00000000000127A1                 xor     r12d, r12d
.text:00000000000127A4                 nop     dword ptr [rax+00h]
.text:00000000000127A8
.text:00000000000127A8 loc_127A8:                              ; CODE XREF: rpl_fts_open+9E↓j
.text:00000000000127A8                 call    _strlen
.text:00000000000127AD                 cmp     r12, rax
.text:00000000000127B0                 cmovb   r12, rax
.text:00000000000127B4                 add     r15, 8
.text:00000000000127B8                 mov     rdi, [r15]
.text:00000000000127BB                 test    rdi, rdi
.text:00000000000127BE                 jnz     short loc_127A8
.text:00000000000127C0                 lea     rdx, [r12+1]
.text:00000000000127C5                 mov     eax, 1000h
.text:00000000000127CA                 cmp     rdx, 1000h
.text:00000000000127D1                 cmovb   rdx, rax
.text:00000000000127D5
.text:00000000000127D5 loc_127D5:                              ; CODE XREF: rpl_fts_open+2E4↓j
.text:00000000000127D5                 lea     rsi, [rbx+30h]
.text:00000000000127D9                 lea     rdi, [rbx+20h]
.text:00000000000127DD                 call    fts_palloc_isra_2
.text:00000000000127E2                 test    al, al
.text:00000000000127E4                 mov     [rsp+58h+var_42], al
.text:00000000000127E8                 jz      loc_12A89
.text:00000000000127EE                 mov     rsi, [r13+0]
.text:00000000000127F2                 test    rsi, rsi
.text:00000000000127F5                 jz      loc_12AA0
.text:00000000000127FB                 lea     rsi, aSSUnbackup+14h ; ""
.text:0000000000012802                 xor     edx, edx
.text:0000000000012804                 mov     rdi, rbx
.text:0000000000012807                 call    fts_alloc
.text:000000000001280C                 test    rax, rax
.text:000000000001280F                 mov     r15, rax
.text:0000000000012812                 jz      loc_12A80
.text:0000000000012818                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001281F                 test    r14, r14
.text:0000000000012822                 mov     rsi, [r13+0]
.text:0000000000012826                 mov     [r15+58h], rax
.text:000000000001282A                 mov     [r15+68h], rax
.text:000000000001282E                 jz      short loc_1283D
.text:0000000000012830
.text:0000000000012830 loc_12830:                              ; CODE XREF: rpl_fts_open+386↓j
.text:0000000000012830                 mov     eax, [rbx+48h]
.text:0000000000012833                 shr     eax, 0Ah
.text:0000000000012836                 and     eax, 1
.text:0000000000012839                 mov     [rsp+58h+var_42], al
.text:000000000001283D
.text:000000000001283D loc_1283D:                              ; CODE XREF: rpl_fts_open+10E↑j
.text:000000000001283D                 test    rsi, rsi
.text:0000000000012840                 jz      loc_12AAC
.text:0000000000012846                 shr     ebp, 0Bh
.text:0000000000012849                 mov     [rsp+58h+var_40], 0
.text:0000000000012852                 xor     r12d, r12d
.text:0000000000012855                 xor     ebp, 1
.text:0000000000012858                 mov     eax, ebp
.text:000000000001285A                 xor     ebp, ebp
.text:000000000001285C                 and     eax, 1
.text:000000000001285F                 mov     [rsp+58h+var_41], al
.text:0000000000012863                 jmp     short loc_128DC
.text:0000000000012863 ; ---------------------------------------------------------------------------
.text:0000000000012865                 align 8
.text:0000000000012868
.text:0000000000012868 loc_12868:                              ; CODE XREF: rpl_fts_open+1D2↓j
.text:0000000000012868                                         ; rpl_fts_open+1DD↓j ...
.text:0000000000012868                 mov     rdx, rax
.text:000000000001286B                 mov     rdi, rbx
.text:000000000001286E                 call    fts_alloc
.text:0000000000012873                 test    rax, rax
.text:0000000000012876                 mov     rcx, rax
.text:0000000000012879                 jz      loc_12A70
.text:000000000001287F                 mov     qword ptr [rax+58h], 0
.text:0000000000012887                 mov     [rax+8], r15
.text:000000000001288B                 lea     rax, [rax+108h]
.text:0000000000012892                 test    r12, r12
.text:0000000000012895                 mov     [rcx+30h], rax
.text:0000000000012899                 jz      loc_12A10
.text:000000000001289F                 cmp     [rsp+58h+var_42], 0
.text:00000000000128A4                 jz      loc_12A10
.text:00000000000128AA                 mov     esi, 0Bh
.text:00000000000128AF                 test    r14, r14
.text:00000000000128B2                 mov     qword ptr [rcx+0A8h], 2
.text:00000000000128BD                 mov     [rcx+70h], si
.text:00000000000128C1                 jz      loc_12A50
.text:00000000000128C7
.text:00000000000128C7 loc_128C7:                              ; CODE XREF: rpl_fts_open+30E↓j
.text:00000000000128C7                 mov     [rcx+10h], r12
.text:00000000000128CB                 mov     r12, rcx
.text:00000000000128CE
.text:00000000000128CE loc_128CE:                              ; CODE XREF: rpl_fts_open+329↓j
.text:00000000000128CE                                         ; rpl_fts_open+346↓j
.text:00000000000128CE                 add     rbp, 1
.text:00000000000128D2                 mov     rsi, [r13+rbp*8+0]
.text:00000000000128D7                 test    rsi, rsi
.text:00000000000128DA                 jz      short loc_12930
.text:00000000000128DC
.text:00000000000128DC loc_128DC:                              ; CODE XREF: rpl_fts_open+143↑j
.text:00000000000128DC                 mov     rdi, rsi        ; s
.text:00000000000128DF                 mov     [rsp+58h+var_50], rsi
.text:00000000000128E4                 call    _strlen
.text:00000000000128E9                 cmp     rax, 2
.text:00000000000128ED                 mov     rsi, [rsp+58h+var_50]
.text:00000000000128F2                 jbe     loc_12868
.text:00000000000128F8                 cmp     [rsp+58h+var_41], 0
.text:00000000000128FD                 jz      loc_12868
.text:0000000000012903                 cmp     byte ptr [rsi+rax-1], 2Fh ; '/'
.text:0000000000012908                 jnz     loc_12868
.text:000000000001290E                 xchg    ax, ax
.text:0000000000012910
.text:0000000000012910 loc_12910:                              ; CODE XREF: rpl_fts_open+203↓j
.text:0000000000012910                 cmp     byte ptr [rsi+rax-2], 2Fh ; '/'
.text:0000000000012915                 jnz     loc_12868
.text:000000000001291B                 sub     rax, 1
.text:000000000001291F                 cmp     rax, 1
.text:0000000000012923                 jnz     short loc_12910
.text:0000000000012925                 jmp     loc_12868
.text:0000000000012925 ; ---------------------------------------------------------------------------
.text:000000000001292A                 align 10h
.text:0000000000012930
.text:0000000000012930 loc_12930:                              ; CODE XREF: rpl_fts_open+1BA↑j
.text:0000000000012930                 test    r14, r14
.text:0000000000012933                 jz      short loc_1294C
.text:0000000000012935                 cmp     rbp, 1
.text:0000000000012939                 jbe     short loc_1294C
.text:000000000001293B                 mov     rsi, r12
.text:000000000001293E                 mov     rdx, rbp
.text:0000000000012941                 mov     rdi, rbx
.text:0000000000012944                 call    fts_sort
.text:0000000000012949                 mov     r12, rax
.text:000000000001294C
.text:000000000001294C loc_1294C:                              ; CODE XREF: rpl_fts_open+213↑j
.text:000000000001294C                                         ; rpl_fts_open+219↑j ...
.text:000000000001294C                 lea     rsi, aSSUnbackup+14h ; ""
.text:0000000000012953                 xor     edx, edx
.text:0000000000012955                 mov     rdi, rbx
.text:0000000000012958                 call    fts_alloc
.text:000000000001295D                 test    rax, rax
.text:0000000000012960                 mov     [rbx], rax
.text:0000000000012963                 jz      loc_12A70
.text:0000000000012969                 mov     edi, [rbx+48h]
.text:000000000001296C                 mov     edx, 9
.text:0000000000012971                 lea     rsi, [rbx+58h]
.text:0000000000012975                 mov     [rax+10h], r12
.text:0000000000012979                 mov     [rax+70h], dx
.text:000000000001297D                 mov     qword ptr [rax+58h], 1
.text:0000000000012985                 call    setup_dir_isra_4
.text:000000000001298A                 test    al, al
.text:000000000001298C                 jz      loc_12A70
.text:0000000000012992                 mov     esi, [rbx+48h]
.text:0000000000012995                 test    esi, 204h
.text:000000000001299B                 jnz     short loc_129C0
.text:000000000001299D                 mov     edi, [rbx+2Ch]
.text:00000000000129A0                 lea     rdx, asc_15AEB+1 ; "."
.text:00000000000129A7                 call    diropen_isra_6
.text:00000000000129AC                 test    eax, eax
.text:00000000000129AE                 mov     [rbx+28h], eax
.text:00000000000129B1                 jns     short loc_129C0
.text:00000000000129B3                 or      dword ptr [rbx+48h], 4
.text:00000000000129B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000129C0
.text:00000000000129C0 loc_129C0:                              ; CODE XREF: rpl_fts_open+27B↑j
.text:00000000000129C0                                         ; rpl_fts_open+291↑j
.text:00000000000129C0                 lea     rdi, [rbx+60h]
.text:00000000000129C4                 mov     esi, 0FFFFFFFFh
.text:00000000000129C9                 call    i_ring_init
.text:00000000000129CE
.text:00000000000129CE loc_129CE:                              ; CODE XREF: rpl_fts_open+53↑j
.text:00000000000129CE                                         ; rpl_fts_open+373↓j ...
.text:00000000000129CE                 add     rsp, 28h
.text:00000000000129D2                 mov     rax, rbx
.text:00000000000129D5                 pop     rbx
.text:00000000000129D6                 pop     rbp
.text:00000000000129D7                 pop     r12
.text:00000000000129D9                 pop     r13
.text:00000000000129DB                 pop     r14
.text:00000000000129DD                 pop     r15
.text:00000000000129DF                 retn
.text:00000000000129E0 ; ---------------------------------------------------------------------------
.text:00000000000129E0
.text:00000000000129E0 loc_129E0:                              ; CODE XREF: rpl_fts_open+61↑j
.text:00000000000129E0                 mov     rdi, [r13+0]
.text:00000000000129E4                 mov     eax, ebp
.text:00000000000129E6                 mov     dword ptr [rbx+2Ch], 0FFFFFF9Ch
.text:00000000000129ED                 and     ah, 0FDh
.text:00000000000129F0                 or      eax, 4
.text:00000000000129F3                 test    rdi, rdi
.text:00000000000129F6                 mov     [rbx+48h], eax
.text:00000000000129F9                 jnz     loc_1279E
.text:00000000000129FF
.text:00000000000129FF loc_129FF:                              ; CODE XREF: rpl_fts_open+78↑j
.text:00000000000129FF                 mov     edx, 1000h
.text:0000000000012A04                 jmp     loc_127D5
.text:0000000000012A04 ; ---------------------------------------------------------------------------
.text:0000000000012A09                 align 10h
.text:0000000000012A10
.text:0000000000012A10 loc_12A10:                              ; CODE XREF: rpl_fts_open+179↑j
.text:0000000000012A10                                         ; rpl_fts_open+184↑j
.text:0000000000012A10                 xor     edx, edx
.text:0000000000012A12                 mov     rsi, rcx
.text:0000000000012A15                 mov     rdi, rbx
.text:0000000000012A18                 mov     [rsp+58h+var_50], rcx
.text:0000000000012A1D                 call    fts_stat
.text:0000000000012A22                 mov     rcx, [rsp+58h+var_50]
.text:0000000000012A27                 test    r14, r14
.text:0000000000012A2A                 mov     [rcx+70h], ax
.text:0000000000012A2E                 jnz     loc_128C7
.text:0000000000012A34                 test    r12, r12
.text:0000000000012A37                 mov     qword ptr [rcx+10h], 0
.text:0000000000012A3F                 jnz     short loc_12A58
.text:0000000000012A41                 mov     [rsp+58h+var_40], rcx
.text:0000000000012A46                 mov     r12, rcx
.text:0000000000012A49                 jmp     loc_128CE
.text:0000000000012A49 ; ---------------------------------------------------------------------------
.text:0000000000012A4E                 align 10h
.text:0000000000012A50
.text:0000000000012A50 loc_12A50:                              ; CODE XREF: rpl_fts_open+1A1↑j
.text:0000000000012A50                 mov     qword ptr [rcx+10h], 0
.text:0000000000012A58
.text:0000000000012A58 loc_12A58:                              ; CODE XREF: rpl_fts_open+31F↑j
.text:0000000000012A58                 mov     rax, [rsp+58h+var_40]
.text:0000000000012A5D                 mov     [rsp+58h+var_40], rcx
.text:0000000000012A62                 mov     [rax+10h], rcx
.text:0000000000012A66                 jmp     loc_128CE
.text:0000000000012A66 ; ---------------------------------------------------------------------------
.text:0000000000012A6B                 align 10h
.text:0000000000012A70
.text:0000000000012A70 loc_12A70:                              ; CODE XREF: rpl_fts_open+159↑j
.text:0000000000012A70                                         ; rpl_fts_open+243↑j ...
.text:0000000000012A70                 mov     rdi, r12        ; ptr
.text:0000000000012A73                 call    fts_lfree
.text:0000000000012A78                 mov     rdi, r15        ; ptr
.text:0000000000012A7B                 call    free
.text:0000000000012A80
.text:0000000000012A80 loc_12A80:                              ; CODE XREF: rpl_fts_open+F2↑j
.text:0000000000012A80                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000012A84                 call    free
.text:0000000000012A89
.text:0000000000012A89 loc_12A89:                              ; CODE XREF: rpl_fts_open+C8↑j
.text:0000000000012A89                 mov     rdi, rbx        ; ptr
.text:0000000000012A8C                 xor     ebx, ebx
.text:0000000000012A8E                 call    free
.text:0000000000012A93                 jmp     loc_129CE
.text:0000000000012A93 ; ---------------------------------------------------------------------------
.text:0000000000012A98                 align 20h
.text:0000000000012AA0
.text:0000000000012AA0 loc_12AA0:                              ; CODE XREF: rpl_fts_open+D5↑j
.text:0000000000012AA0                 xor     r15d, r15d
.text:0000000000012AA3                 test    r14, r14
.text:0000000000012AA6                 jnz     loc_12830
.text:0000000000012AAC
.text:0000000000012AAC loc_12AAC:                              ; CODE XREF: rpl_fts_open+120↑j
.text:0000000000012AAC                 xor     r12d, r12d
.text:0000000000012AAF                 jmp     loc_1294C
.text:0000000000012AAF ; ---------------------------------------------------------------------------
.text:0000000000012AB4                 align 8
.text:0000000000012AB8
.text:0000000000012AB8 loc_12AB8:                              ; CODE XREF: rpl_fts_open+14↑j
.text:0000000000012AB8                                         ; rpl_fts_open+28↑j ...
.text:0000000000012AB8                 call    ___errno_location
.text:0000000000012ABD                 xor     ebx, ebx
.text:0000000000012ABF                 mov     dword ptr [rax], 16h
.text:0000000000012AC5                 jmp     loc_129CE
.text:0000000000012AC5 ; } // starts at 12720
.text:0000000000012AC5 rpl_fts_open    endp
.text:0000000000012AC5
.text:0000000000012AC5 ; ---------------------------------------------------------------------------
.text:0000000000012ACA                 align 10h
.text:0000000000012AD0
.text:0000000000012AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000012AD0
.text:0000000000012AD0
.text:0000000000012AD0 ; __int64 __fastcall rpl_fts_close(void *ptr)
.text:0000000000012AD0                 public rpl_fts_close
.text:0000000000012AD0 rpl_fts_close   proc near               ; CODE XREF: rm+11F↑p
.text:0000000000012AD0                                         ; rm+653↑p
.text:0000000000012AD0 ; __unwind {
.text:0000000000012AD0                 push    r12
.text:0000000000012AD2                 push    rbp
.text:0000000000012AD3                 mov     rbp, rdi
.text:0000000000012AD6                 push    rbx
.text:0000000000012AD7                 mov     rdi, [rdi]
.text:0000000000012ADA                 test    rdi, rdi
.text:0000000000012ADD                 jz      short loc_12B23
.text:0000000000012ADF                 cmp     qword ptr [rdi+58h], 0
.text:0000000000012AE4                 jns     short loc_12AFF
.text:0000000000012AE6                 jmp     loc_12C00
.text:0000000000012AE6 ; ---------------------------------------------------------------------------
.text:0000000000012AEB                 align 10h
.text:0000000000012AF0
.text:0000000000012AF0 loc_12AF0:                              ; CODE XREF: rpl_fts_close+36↓j
.text:0000000000012AF0                 call    free
.text:0000000000012AF5                 cmp     qword ptr [rbx+58h], 0
.text:0000000000012AFA                 mov     rdi, rbx        ; ptr
.text:0000000000012AFD                 js      short loc_12B1B
.text:0000000000012AFF
.text:0000000000012AFF loc_12AFF:                              ; CODE XREF: rpl_fts_close+14↑j
.text:0000000000012AFF                                         ; rpl_fts_close+49↓j
.text:0000000000012AFF                 mov     rbx, [rdi+10h]
.text:0000000000012B03                 test    rbx, rbx
.text:0000000000012B06                 jnz     short loc_12AF0
.text:0000000000012B08                 mov     rbx, [rdi+8]
.text:0000000000012B0C                 call    free
.text:0000000000012B11                 cmp     qword ptr [rbx+58h], 0
.text:0000000000012B16                 mov     rdi, rbx
.text:0000000000012B19                 jns     short loc_12AFF
.text:0000000000012B1B
.text:0000000000012B1B loc_12B1B:                              ; CODE XREF: rpl_fts_close+2D↑j
.text:0000000000012B1B                 mov     rdi, rbx        ; ptr
.text:0000000000012B1E                 call    free
.text:0000000000012B23
.text:0000000000012B23 loc_12B23:                              ; CODE XREF: rpl_fts_close+D↑j
.text:0000000000012B23                                         ; rpl_fts_close+13B↓j
.text:0000000000012B23                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000012B27                 test    rdi, rdi
.text:0000000000012B2A                 jz      short loc_12B31
.text:0000000000012B2C                 call    fts_lfree
.text:0000000000012B31
.text:0000000000012B31 loc_12B31:                              ; CODE XREF: rpl_fts_close+5A↑j
.text:0000000000012B31                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000012B35                 call    free
.text:0000000000012B3A                 mov     rdi, [rbp+20h]  ; ptr
.text:0000000000012B3E                 call    free
.text:0000000000012B43                 mov     eax, [rbp+48h]
.text:0000000000012B46                 test    ah, 2
.text:0000000000012B49                 jz      short loc_12BB0
.text:0000000000012B4B                 mov     edi, [rbp+2Ch]  ; fd
.text:0000000000012B4E                 test    edi, edi
.text:0000000000012B50                 jns     loc_12BE0
.text:0000000000012B56
.text:0000000000012B56 loc_12B56:                              ; CODE XREF: rpl_fts_close+E2↓j
.text:0000000000012B56                                         ; rpl_fts_close+FA↓j ...
.text:0000000000012B56                 xor     ebx, ebx
.text:0000000000012B58
.text:0000000000012B58 loc_12B58:                              ; CODE XREF: rpl_fts_close+124↓j
.text:0000000000012B58                                         ; rpl_fts_close+154↓j ...
.text:0000000000012B58                 lea     rdi, [rbp+60h]
.text:0000000000012B5C                 call    fd_ring_clear
.text:0000000000012B61                 mov     rdi, [rbp+50h]  ; ptr
.text:0000000000012B65                 test    rdi, rdi
.text:0000000000012B68                 jz      short loc_12B6F
.text:0000000000012B6A                 call    hash_free
.text:0000000000012B6F
.text:0000000000012B6F loc_12B6F:                              ; CODE XREF: rpl_fts_close+98↑j
.text:0000000000012B6F                 test    dword ptr [rbp+48h], 102h
.text:0000000000012B76                 mov     rdi, [rbp+58h]  ; ptr
.text:0000000000012B7A                 jz      short loc_12BA0
.text:0000000000012B7C                 test    rdi, rdi
.text:0000000000012B7F                 jz      short loc_12B86
.text:0000000000012B81                 call    hash_free
.text:0000000000012B86
.text:0000000000012B86 loc_12B86:                              ; CODE XREF: rpl_fts_close+AF↑j
.text:0000000000012B86                                         ; rpl_fts_close+D5↓j
.text:0000000000012B86                 mov     rdi, rbp        ; ptr
.text:0000000000012B89                 call    free
.text:0000000000012B8E                 test    ebx, ebx
.text:0000000000012B90                 jnz     loc_12C41
.text:0000000000012B96
.text:0000000000012B96 loc_12B96:                              ; CODE XREF: rpl_fts_close+17D↓j
.text:0000000000012B96                 mov     eax, ebx
.text:0000000000012B98                 pop     rbx
.text:0000000000012B99                 pop     rbp
.text:0000000000012B9A                 pop     r12
.text:0000000000012B9C                 retn
.text:0000000000012B9C ; ---------------------------------------------------------------------------
.text:0000000000012B9D                 align 20h
.text:0000000000012BA0
.text:0000000000012BA0 loc_12BA0:                              ; CODE XREF: rpl_fts_close+AA↑j
.text:0000000000012BA0                 call    free
.text:0000000000012BA5                 jmp     short loc_12B86
.text:0000000000012BA5 ; ---------------------------------------------------------------------------
.text:0000000000012BA7                 align 10h
.text:0000000000012BB0
.text:0000000000012BB0 loc_12BB0:                              ; CODE XREF: rpl_fts_close+79↑j
.text:0000000000012BB0                 test    al, 4
.text:0000000000012BB2                 jnz     short loc_12B56
.text:0000000000012BB4                 mov     edi, [rbp+28h]  ; fd
.text:0000000000012BB7                 call    _fchdir
.text:0000000000012BBC                 test    eax, eax
.text:0000000000012BBE                 jnz     short loc_12C10
.text:0000000000012BC0                 mov     edi, [rbp+28h]  ; fd
.text:0000000000012BC3                 call    _close
.text:0000000000012BC8                 test    eax, eax
.text:0000000000012BCA                 jz      short loc_12B56
.text:0000000000012BCC                 call    ___errno_location
.text:0000000000012BD1                 mov     r12, rax
.text:0000000000012BD4                 jmp     short loc_12C38
.text:0000000000012BD4 ; ---------------------------------------------------------------------------
.text:0000000000012BD6                 align 20h
.text:0000000000012BE0
.text:0000000000012BE0 loc_12BE0:                              ; CODE XREF: rpl_fts_close+80↑j
.text:0000000000012BE0                 call    _close
.text:0000000000012BE5                 test    eax, eax
.text:0000000000012BE7                 jz      loc_12B56
.text:0000000000012BED                 call    ___errno_location
.text:0000000000012BF2                 mov     ebx, [rax]
.text:0000000000012BF4                 jmp     loc_12B58
.text:0000000000012BF4 ; ---------------------------------------------------------------------------
.text:0000000000012BF9                 align 20h
.text:0000000000012C00
.text:0000000000012C00 loc_12C00:                              ; CODE XREF: rpl_fts_close+16↑j
.text:0000000000012C00                 mov     rbx, rdi
.text:0000000000012C03                 mov     rdi, rbx        ; ptr
.text:0000000000012C06                 call    free
.text:0000000000012C0B                 jmp     loc_12B23
.text:0000000000012C10 ; ---------------------------------------------------------------------------
.text:0000000000012C10
.text:0000000000012C10 loc_12C10:                              ; CODE XREF: rpl_fts_close+EE↑j
.text:0000000000012C10                 call    ___errno_location
.text:0000000000012C15                 mov     edi, [rbp+28h]  ; fd
.text:0000000000012C18                 mov     r12, rax
.text:0000000000012C1B                 mov     ebx, [rax]
.text:0000000000012C1D                 call    _close
.text:0000000000012C22                 test    eax, eax
.text:0000000000012C24                 jz      loc_12B58
.text:0000000000012C2A                 test    ebx, ebx
.text:0000000000012C2C                 jnz     loc_12B58
.text:0000000000012C32                 nop     word ptr [rax+rax+00h]
.text:0000000000012C38
.text:0000000000012C38 loc_12C38:                              ; CODE XREF: rpl_fts_close+104↑j
.text:0000000000012C38                 mov     ebx, [r12]
.text:0000000000012C3C                 jmp     loc_12B58
.text:0000000000012C41 ; ---------------------------------------------------------------------------
.text:0000000000012C41
.text:0000000000012C41 loc_12C41:                              ; CODE XREF: rpl_fts_close+C0↑j
.text:0000000000012C41                 call    ___errno_location
.text:0000000000012C46                 mov     [rax], ebx
.text:0000000000012C48                 mov     ebx, 0FFFFFFFFh
.text:0000000000012C4D                 jmp     loc_12B96
.text:0000000000012C4D ; } // starts at 12AD0
.text:0000000000012C4D rpl_fts_close   endp
.text:0000000000012C4D
.text:0000000000012C4D ; ---------------------------------------------------------------------------
.text:0000000000012C52                 align 20h
.text:0000000000012C60
.text:0000000000012C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000012C60
.text:0000000000012C60
.text:0000000000012C60                 public rpl_fts_read
.text:0000000000012C60 rpl_fts_read    proc near               ; CODE XREF: rm+73↑p
.text:0000000000012C60                                         ; rm+F1↑p ...
.text:0000000000012C60 ; __unwind {
.text:0000000000012C60                 push    r14
.text:0000000000012C62                 push    r13
.text:0000000000012C64                 push    r12
.text:0000000000012C66                 push    rbp
.text:0000000000012C67                 push    rbx
.text:0000000000012C68                 mov     rbp, [rdi]
.text:0000000000012C6B                 test    rbp, rbp
.text:0000000000012C6E                 jz      loc_12D7E
.text:0000000000012C74                 mov     edx, [rdi+48h]
.text:0000000000012C77                 test    dh, 20h
.text:0000000000012C7A                 jnz     loc_12D7E
.text:0000000000012C80                 movzx   eax, word ptr [rbp+74h]
.text:0000000000012C84                 mov     ebx, 3
.text:0000000000012C89                 mov     r12, rdi
.text:0000000000012C8C                 mov     [rbp+74h], bx
.text:0000000000012C90                 cmp     ax, 1
.text:0000000000012C94                 jz      loc_12EE0
.text:0000000000012C9A                 cmp     ax, 2
.text:0000000000012C9E                 movzx   ecx, word ptr [rbp+70h]
.text:0000000000012CA2                 jz      loc_12D90
.text:0000000000012CA8                 cmp     cx, 1
.text:0000000000012CAC                 jnz     short loc_12CE0
.text:0000000000012CAE                 jmp     loc_12ED0
.text:0000000000012CAE ; ---------------------------------------------------------------------------
.text:0000000000012CB3                 align 8
.text:0000000000012CB8
.text:0000000000012CB8 loc_12CB8:                              ; CODE XREF: rpl_fts_read+87↓j
.text:0000000000012CB8                 mov     [r12], rbx
.text:0000000000012CBC                 mov     rdi, rbp        ; ptr
.text:0000000000012CBF                 call    free
.text:0000000000012CC4                 cmp     qword ptr [rbx+58h], 0
.text:0000000000012CC9                 jz      loc_12F00
.text:0000000000012CCF                 movzx   eax, word ptr [rbx+74h]
.text:0000000000012CD3                 mov     rbp, rbx
.text:0000000000012CD6                 cmp     ax, 4
.text:0000000000012CDA                 jnz     loc_13008
.text:0000000000012CE0
.text:0000000000012CE0 loc_12CE0:                              ; CODE XREF: rpl_fts_read+4C↑j
.text:0000000000012CE0                                         ; rpl_fts_read+13D↓j
.text:0000000000012CE0                 mov     rbx, [rbp+10h]
.text:0000000000012CE4                 test    rbx, rbx
.text:0000000000012CE7                 jnz     short loc_12CB8
.text:0000000000012CE9                 mov     rbx, [rbp+8]
.text:0000000000012CED                 cmp     qword ptr [rbx+18h], 0
.text:0000000000012CF2                 jnz     loc_13260
.text:0000000000012CF8
.text:0000000000012CF8 loc_12CF8:                              ; CODE XREF: rpl_fts_read+688↓j
.text:0000000000012CF8                 mov     [r12], rbx
.text:0000000000012CFC                 mov     rdi, rbp        ; ptr
.text:0000000000012CFF                 call    free
.text:0000000000012D04                 cmp     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:0000000000012D09                 jz      loc_131C2
.text:0000000000012D0F                 cmp     word ptr [rbx+70h], 0Bh
.text:0000000000012D14                 jz      loc_12E4F
.text:0000000000012D1A                 mov     rdx, [r12+20h]
.text:0000000000012D1F                 mov     rax, [rbx+48h]
.text:0000000000012D23                 mov     byte ptr [rdx+rax], 0
.text:0000000000012D27                 cmp     qword ptr [rbx+58h], 0
.text:0000000000012D2C                 jz      loc_130F0
.text:0000000000012D32                 movzx   eax, word ptr [rbx+72h]
.text:0000000000012D36                 test    al, 2
.text:0000000000012D38                 jz      loc_130A8
.text:0000000000012D3E                 mov     eax, [r12+48h]
.text:0000000000012D43                 mov     edi, [rbx+44h]  ; fd
.text:0000000000012D46                 test    al, 4
.text:0000000000012D48                 jz      loc_1314C
.text:0000000000012D4E
.text:0000000000012D4E loc_12D4E:                              ; CODE XREF: rpl_fts_read+507↓j
.text:0000000000012D4E                                         ; rpl_fts_read+6AC↓j
.text:0000000000012D4E                 call    _close
.text:0000000000012D53
.text:0000000000012D53 loc_12D53:                              ; CODE XREF: rpl_fts_read+44A↓j
.text:0000000000012D53                                         ; rpl_fts_read+46A↓j ...
.text:0000000000012D53                 mov     edi, [r12+48h]
.text:0000000000012D58
.text:0000000000012D58 loc_12D58:                              ; CODE XREF: rpl_fts_read+48A↓j
.text:0000000000012D58                 cmp     word ptr [rbx+70h], 2
.text:0000000000012D5D                 jz      short loc_12D73
.text:0000000000012D5F                 mov     ecx, [rbx+40h]
.text:0000000000012D62                 test    ecx, ecx
.text:0000000000012D64                 jz      loc_13108
.text:0000000000012D6A                 mov     edx, 7
.text:0000000000012D6F                 mov     [rbx+70h], dx
.text:0000000000012D73
.text:0000000000012D73 loc_12D73:                              ; CODE XREF: rpl_fts_read+FD↑j
.text:0000000000012D73                                         ; rpl_fts_read+4C3↓j
.text:0000000000012D73                 and     edi, 2000h
.text:0000000000012D79                 mov     rbp, rbx
.text:0000000000012D7C                 jz      short loc_12DFA
.text:0000000000012D7E
.text:0000000000012D7E loc_12D7E:                              ; CODE XREF: rpl_fts_read+E↑j
.text:0000000000012D7E                                         ; rpl_fts_read+1A↑j ...
.text:0000000000012D7E                 xor     ebp, ebp
.text:0000000000012D80                 pop     rbx
.text:0000000000012D81                 mov     rax, rbp
.text:0000000000012D84                 pop     rbp
.text:0000000000012D85                 pop     r12
.text:0000000000012D87                 pop     r13
.text:0000000000012D89                 pop     r14
.text:0000000000012D8B                 retn
.text:0000000000012D8B ; ---------------------------------------------------------------------------
.text:0000000000012D8C                 align 10h
.text:0000000000012D90
.text:0000000000012D90 loc_12D90:                              ; CODE XREF: rpl_fts_read+42↑j
.text:0000000000012D90                 lea     eax, [rcx-0Ch]
.text:0000000000012D93                 cmp     ax, 1
.text:0000000000012D97                 jbe     short loc_12E10
.text:0000000000012D99                 cmp     cx, 1
.text:0000000000012D9D                 jnz     loc_12CE0
.text:0000000000012DA3
.text:0000000000012DA3 loc_12DA3:                              ; CODE XREF: rpl_fts_read+274↓j
.text:0000000000012DA3                 test    dl, 40h
.text:0000000000012DA6                 jz      loc_12E58
.text:0000000000012DAC                 mov     rax, [r12+18h]
.text:0000000000012DB1                 cmp     [rbp+78h], rax
.text:0000000000012DB5                 jz      loc_12E58
.text:0000000000012DBB
.text:0000000000012DBB loc_12DBB:                              ; CODE XREF: rpl_fts_read+27A↓j
.text:0000000000012DBB                 test    byte ptr [rbp+72h], 2
.text:0000000000012DBF                 jnz     loc_132A0
.text:0000000000012DC5
.text:0000000000012DC5 loc_12DC5:                              ; CODE XREF: rpl_fts_read+648↓j
.text:0000000000012DC5                 mov     rdi, [r12+8]    ; ptr
.text:0000000000012DCA                 test    rdi, rdi
.text:0000000000012DCD                 jz      short loc_12DDD
.text:0000000000012DCF                 call    fts_lfree
.text:0000000000012DD4                 mov     qword ptr [r12+8], 0
.text:0000000000012DDD
.text:0000000000012DDD loc_12DDD:                              ; CODE XREF: rpl_fts_read+16D↑j
.text:0000000000012DDD                 mov     edi, [r12+48h]
.text:0000000000012DE2                 mov     r10d, 6
.text:0000000000012DE8                 lea     rsi, [r12+58h]
.text:0000000000012DED                 mov     [rbp+70h], r10w
.text:0000000000012DF2                 mov     rdx, rbp
.text:0000000000012DF5                 call    leave_dir_isra_12
.text:0000000000012DFA
.text:0000000000012DFA loc_12DFA:                              ; CODE XREF: rpl_fts_read+11C↑j
.text:0000000000012DFA                                         ; rpl_fts_read+1D3↓j ...
.text:0000000000012DFA                 pop     rbx
.text:0000000000012DFB                 mov     rax, rbp
.text:0000000000012DFE                 pop     rbp
.text:0000000000012DFF                 pop     r12
.text:0000000000012E01                 pop     r13
.text:0000000000012E03                 pop     r14
.text:0000000000012E05                 retn
.text:0000000000012E05 ; ---------------------------------------------------------------------------
.text:0000000000012E06                 align 10h
.text:0000000000012E10
.text:0000000000012E10 loc_12E10:                              ; CODE XREF: rpl_fts_read+137↑j
.text:0000000000012E10                 mov     edx, 1
.text:0000000000012E15                 mov     rsi, rbp
.text:0000000000012E18                 call    fts_stat
.text:0000000000012E1D                 cmp     ax, 1
.text:0000000000012E21                 mov     [rbp+70h], ax
.text:0000000000012E25                 jz      loc_1316C
.text:0000000000012E2B                 cmp     ax, 0Bh
.text:0000000000012E2F                 mov     [r12], rbp
.text:0000000000012E33                 jnz     short loc_12DFA
.text:0000000000012E35                 nop     dword ptr [rax]
.text:0000000000012E38
.text:0000000000012E38 loc_12E38:                              ; CODE XREF: rpl_fts_read+356↓j
.text:0000000000012E38                 mov     rax, [rbp+0A8h]
.text:0000000000012E3F                 cmp     rax, 2
.text:0000000000012E43                 jz      loc_131E8
.text:0000000000012E49                 cmp     rax, 1
.text:0000000000012E4D                 jz      short loc_12DFA
.text:0000000000012E4F
.text:0000000000012E4F loc_12E4F:                              ; CODE XREF: rpl_fts_read+B4↑j
.text:0000000000012E4F                 call    _abort
.text:0000000000012E4F ; ---------------------------------------------------------------------------
.text:0000000000012E54                 align 8
.text:0000000000012E58
.text:0000000000012E58 loc_12E58:                              ; CODE XREF: rpl_fts_read+146↑j
.text:0000000000012E58                                         ; rpl_fts_read+155↑j
.text:0000000000012E58                 mov     rdi, [r12+8]    ; ptr
.text:0000000000012E5D                 test    rdi, rdi
.text:0000000000012E60                 jz      loc_13078
.text:0000000000012E66                 test    dh, 10h
.text:0000000000012E69                 jnz     loc_13062
.text:0000000000012E6F                 mov     rcx, [rbp+30h]
.text:0000000000012E73                 mov     edx, 0FFFFFFFFh
.text:0000000000012E78                 mov     rsi, rbp
.text:0000000000012E7B                 mov     rdi, r12
.text:0000000000012E7E                 call    fts_safe_changedir
.text:0000000000012E83                 test    eax, eax
.text:0000000000012E85                 jz      loc_13142
.text:0000000000012E8B                 call    ___errno_location
.text:0000000000012E90                 mov     eax, [rax]
.text:0000000000012E92                 or      word ptr [rbp+72h], 1
.text:0000000000012E97                 mov     [rbp+40h], eax
.text:0000000000012E9A                 mov     rbp, [r12+8]
.text:0000000000012E9F                 test    rbp, rbp
.text:0000000000012EA2                 jz      loc_13096
.text:0000000000012EA8                 mov     rax, rbp
.text:0000000000012EAB                 nop     dword ptr [rax+rax+00h]
.text:0000000000012EB0
.text:0000000000012EB0 loc_12EB0:                              ; CODE XREF: rpl_fts_read+263↓j
.text:0000000000012EB0                 mov     rdx, [rax+8]
.text:0000000000012EB4                 mov     rdx, [rdx+30h]
.text:0000000000012EB8                 mov     [rax+30h], rdx
.text:0000000000012EBC                 mov     rax, [rax+10h]
.text:0000000000012EC0                 test    rax, rax
.text:0000000000012EC3                 jnz     short loc_12EB0
.text:0000000000012EC5                 jmp     loc_13096
.text:0000000000012EC5 ; ---------------------------------------------------------------------------
.text:0000000000012ECA                 align 10h
.text:0000000000012ED0
.text:0000000000012ED0 loc_12ED0:                              ; CODE XREF: rpl_fts_read+4E↑j
.text:0000000000012ED0                 cmp     ax, 4
.text:0000000000012ED4                 jnz     loc_12DA3
.text:0000000000012EDA                 jmp     loc_12DBB
.text:0000000000012EDA ; ---------------------------------------------------------------------------
.text:0000000000012EDF                 align 20h
.text:0000000000012EE0
.text:0000000000012EE0 loc_12EE0:                              ; CODE XREF: rpl_fts_read+34↑j
.text:0000000000012EE0                 mov     rsi, rbp
.text:0000000000012EE3                 xor     edx, edx
.text:0000000000012EE5                 call    fts_stat
.text:0000000000012EEA                 mov     [rbp+70h], ax
.text:0000000000012EEE                 mov     rax, rbp
.text:0000000000012EF1                 pop     rbx
.text:0000000000012EF2                 pop     rbp
.text:0000000000012EF3                 pop     r12
.text:0000000000012EF5                 pop     r13
.text:0000000000012EF7                 pop     r14
.text:0000000000012EF9                 retn
.text:0000000000012EF9 ; ---------------------------------------------------------------------------
.text:0000000000012EFA                 align 20h
.text:0000000000012F00
.text:0000000000012F00 loc_12F00:                              ; CODE XREF: rpl_fts_read+69↑j
.text:0000000000012F00                 mov     rdi, r12
.text:0000000000012F03                 call    restore_initial_cwd
.text:0000000000012F08                 test    eax, eax
.text:0000000000012F0A                 jnz     loc_13311
.text:0000000000012F10                 test    dword ptr [r12+48h], 102h
.text:0000000000012F19                 mov     rdi, [r12+58h]  ; ptr
.text:0000000000012F1E                 jz      loc_13058
.text:0000000000012F24                 test    rdi, rdi
.text:0000000000012F27                 jz      short loc_12F2E
.text:0000000000012F29                 call    hash_free
.text:0000000000012F2E
.text:0000000000012F2E loc_12F2E:                              ; CODE XREF: rpl_fts_read+2C7↑j
.text:0000000000012F2E                                         ; rpl_fts_read+3FD↓j
.text:0000000000012F2E                 mov     rdx, [rbx+60h]
.text:0000000000012F32                 lea     rbp, [rbx+108h]
.text:0000000000012F39                 mov     rdi, [r12+20h]  ; dest
.text:0000000000012F3E                 mov     rsi, rbp        ; src
.text:0000000000012F41                 mov     [rbx+48h], rdx
.text:0000000000012F45                 add     rdx, 1          ; n
.text:0000000000012F49                 call    _memmove
.text:0000000000012F4E                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000012F53                 mov     rdi, rbp        ; s
.text:0000000000012F56                 call    _strrchr
.text:0000000000012F5B                 test    rax, rax
.text:0000000000012F5E                 jz      short loc_12F8B
.text:0000000000012F60                 cmp     rbp, rax
.text:0000000000012F63                 jz      loc_13130
.text:0000000000012F69
.text:0000000000012F69 loc_12F69:                              ; CODE XREF: rpl_fts_read+4D7↓j
.text:0000000000012F69                 lea     r13, [rax+1]
.text:0000000000012F6D                 mov     rdi, r13        ; s
.text:0000000000012F70                 call    _strlen
.text:0000000000012F75                 lea     rdx, [rax+1]    ; n
.text:0000000000012F79                 mov     r14, rax
.text:0000000000012F7C                 mov     rsi, r13        ; src
.text:0000000000012F7F                 mov     rdi, rbp        ; dest
.text:0000000000012F82                 call    _memmove
.text:0000000000012F87                 mov     [rbx+60h], r14
.text:0000000000012F8B
.text:0000000000012F8B loc_12F8B:                              ; CODE XREF: rpl_fts_read+2FE↑j
.text:0000000000012F8B                                         ; rpl_fts_read+4DD↓j
.text:0000000000012F8B                 mov     rax, [r12+20h]
.text:0000000000012F90                 mov     edi, [r12+48h]
.text:0000000000012F95                 lea     rsi, [r12+58h]
.text:0000000000012F9A                 mov     rbp, rbx
.text:0000000000012F9D                 mov     [rbx+38h], rax
.text:0000000000012FA1                 mov     [rbx+30h], rax
.text:0000000000012FA5                 call    setup_dir_isra_4
.text:0000000000012FAA                 movzx   eax, word ptr [rbx+70h]
.text:0000000000012FAE
.text:0000000000012FAE loc_12FAE:                              ; CODE XREF: rpl_fts_read+3EF↓j
.text:0000000000012FAE                                         ; rpl_fts_read+73D↓j
.text:0000000000012FAE                 cmp     ax, 0Bh
.text:0000000000012FB2                 mov     [r12], rbp
.text:0000000000012FB6                 jz      loc_12E38
.text:0000000000012FBC
.text:0000000000012FBC loc_12FBC:                              ; CODE XREF: rpl_fts_read+5C7↓j
.text:0000000000012FBC                                         ; rpl_fts_read+717↓j
.text:0000000000012FBC                 cmp     ax, 1
.text:0000000000012FC0                 jnz     loc_12DFA
.text:0000000000012FC6
.text:0000000000012FC6 loc_12FC6:                              ; CODE XREF: rpl_fts_read+51F↓j
.text:0000000000012FC6                 cmp     qword ptr [rbp+58h], 0
.text:0000000000012FCB                 jnz     short loc_12FD6
.text:0000000000012FCD
.text:0000000000012FCD loc_12FCD:                              ; CODE XREF: rpl_fts_read+6F8↓j
.text:0000000000012FCD                 mov     rax, [rbp+78h]
.text:0000000000012FD1                 mov     [r12+18h], rax
.text:0000000000012FD6
.text:0000000000012FD6 loc_12FD6:                              ; CODE XREF: rpl_fts_read+36B↑j
.text:0000000000012FD6                                         ; rpl_fts_read+5F4↓j
.text:0000000000012FD6                 mov     edi, [r12+48h]
.text:0000000000012FDB                 lea     rsi, [r12+58h]
.text:0000000000012FE0                 mov     rdx, rbp
.text:0000000000012FE3                 call    enter_dir_isra_10
.text:0000000000012FE8                 test    al, al
.text:0000000000012FEA                 jnz     loc_12DFA
.text:0000000000012FF0                 call    ___errno_location
.text:0000000000012FF5                 xor     ebp, ebp
.text:0000000000012FF7                 mov     dword ptr [rax], 0Ch
.text:0000000000012FFD                 jmp     loc_12DFA
.text:0000000000012FFD ; ---------------------------------------------------------------------------
.text:0000000000013002                 align 8
.text:0000000000013008
.text:0000000000013008 loc_13008:                              ; CODE XREF: rpl_fts_read+7A↑j
.text:0000000000013008                 cmp     ax, 2
.text:000000000001300C                 jz      loc_132AD
.text:0000000000013012
.text:0000000000013012 loc_13012:                              ; CODE XREF: rpl_fts_read+43F↓j
.text:0000000000013012                                         ; rpl_fts_read+631↓j ...
.text:0000000000013012                 mov     rax, [rbp+8]
.text:0000000000013016                 lea     rsi, [rbp+108h] ; src
.text:000000000001301D                 mov     rdi, [rax+48h]
.text:0000000000013021                 mov     rax, [rax+38h]
.text:0000000000013025                 cmp     byte ptr [rax+rdi-1], 2Fh ; '/'
.text:000000000001302A                 lea     rdx, [rdi-1]
.text:000000000001302E                 cmovz   rdi, rdx
.text:0000000000013032                 add     rdi, [r12+20h]
.text:0000000000013037                 mov     byte ptr [rdi], 2Fh ; '/'
.text:000000000001303A                 mov     rax, [rbp+60h]
.text:000000000001303E                 add     rdi, 1          ; dest
.text:0000000000013042                 lea     rdx, [rax+1]    ; n
.text:0000000000013046                 call    _memmove
.text:000000000001304B                 movzx   eax, word ptr [rbp+70h]
.text:000000000001304F                 jmp     loc_12FAE
.text:000000000001304F ; ---------------------------------------------------------------------------
.text:0000000000013054                 align 8
.text:0000000000013058
.text:0000000000013058 loc_13058:                              ; CODE XREF: rpl_fts_read+2BE↑j
.text:0000000000013058                 call    free
.text:000000000001305D                 jmp     loc_12F2E
.text:0000000000013062 ; ---------------------------------------------------------------------------
.text:0000000000013062
.text:0000000000013062 loc_13062:                              ; CODE XREF: rpl_fts_read+209↑j
.text:0000000000013062                 and     dh, 0EFh
.text:0000000000013065                 mov     [r12+48h], edx
.text:000000000001306A                 call    fts_lfree
.text:000000000001306F                 mov     qword ptr [r12+8], 0
.text:0000000000013078
.text:0000000000013078 loc_13078:                              ; CODE XREF: rpl_fts_read+200↑j
.text:0000000000013078                 mov     esi, 3
.text:000000000001307D                 mov     rdi, r12
.text:0000000000013080                 call    fts_build
.text:0000000000013085                 test    rax, rax
.text:0000000000013088                 mov     [r12+8], rax
.text:000000000001308D                 jz      loc_13184
.text:0000000000013093                 mov     rbp, rax
.text:0000000000013096
.text:0000000000013096 loc_13096:                              ; CODE XREF: rpl_fts_read+242↑j
.text:0000000000013096                                         ; rpl_fts_read+265↑j ...
.text:0000000000013096                 mov     qword ptr [r12+8], 0
.text:000000000001309F                 jmp     loc_13012
.text:000000000001309F ; ---------------------------------------------------------------------------
.text:00000000000130A4                 align 8
.text:00000000000130A8
.text:00000000000130A8 loc_130A8:                              ; CODE XREF: rpl_fts_read+D8↑j
.text:00000000000130A8                 test    al, 1
.text:00000000000130AA                 jnz     loc_12D53
.text:00000000000130B0                 mov     rsi, [rbx+8]
.text:00000000000130B4                 lea     rcx, asc_15AEB  ; ".."
.text:00000000000130BB                 mov     edx, 0FFFFFFFFh
.text:00000000000130C0                 mov     rdi, r12
.text:00000000000130C3                 call    fts_safe_changedir
.text:00000000000130C8                 test    eax, eax
.text:00000000000130CA                 jz      loc_12D53
.text:00000000000130D0
.text:00000000000130D0 loc_130D0:                              ; CODE XREF: rpl_fts_read+49A↓j
.text:00000000000130D0                 call    ___errno_location
.text:00000000000130D5                 mov     edi, [r12+48h]
.text:00000000000130DA                 mov     eax, [rax]
.text:00000000000130DC                 or      edi, 2000h
.text:00000000000130E2                 mov     [rbx+40h], eax
.text:00000000000130E5                 mov     [r12+48h], edi
.text:00000000000130EA                 jmp     loc_12D58
.text:00000000000130EA ; ---------------------------------------------------------------------------
.text:00000000000130EF                 align 10h
.text:00000000000130F0
.text:00000000000130F0 loc_130F0:                              ; CODE XREF: rpl_fts_read+CC↑j
.text:00000000000130F0                 mov     rdi, r12
.text:00000000000130F3                 call    restore_initial_cwd
.text:00000000000130F8                 test    eax, eax
.text:00000000000130FA                 jnz     short loc_130D0
.text:00000000000130FC                 jmp     loc_12D53
.text:00000000000130FC ; ---------------------------------------------------------------------------
.text:0000000000013101                 align 8
.text:0000000000013108
.text:0000000000013108 loc_13108:                              ; CODE XREF: rpl_fts_read+104↑j
.text:0000000000013108                 mov     eax, 6
.text:000000000001310D                 lea     rsi, [r12+58h]
.text:0000000000013112                 mov     rdx, rbx
.text:0000000000013115                 mov     [rbx+70h], ax
.text:0000000000013119                 call    leave_dir_isra_12
.text:000000000001311E                 mov     edi, [r12+48h]
.text:0000000000013123                 jmp     loc_12D73
.text:0000000000013123 ; ---------------------------------------------------------------------------
.text:0000000000013128                 align 10h
.text:0000000000013130
.text:0000000000013130 loc_13130:                              ; CODE XREF: rpl_fts_read+303↑j
.text:0000000000013130                 cmp     byte ptr [rbx+109h], 0
.text:0000000000013137                 jnz     loc_12F69
.text:000000000001313D                 jmp     loc_12F8B
.text:0000000000013142 ; ---------------------------------------------------------------------------
.text:0000000000013142
.text:0000000000013142 loc_13142:                              ; CODE XREF: rpl_fts_read+225↑j
.text:0000000000013142                 mov     rbp, [r12+8]
.text:0000000000013147                 jmp     loc_13096
.text:000000000001314C ; ---------------------------------------------------------------------------
.text:000000000001314C
.text:000000000001314C loc_1314C:                              ; CODE XREF: rpl_fts_read+E8↑j
.text:000000000001314C                 test    ah, 2
.text:000000000001314F                 jz      loc_132ED
.text:0000000000013155                 mov     esi, edi
.text:0000000000013157                 mov     edx, 1
.text:000000000001315C                 mov     rdi, r12
.text:000000000001315F                 call    cwd_advance_fd
.text:0000000000013164                 mov     edi, [rbx+44h]
.text:0000000000013167                 jmp     loc_12D4E
.text:000000000001316C ; ---------------------------------------------------------------------------
.text:000000000001316C
.text:000000000001316C loc_1316C:                              ; CODE XREF: rpl_fts_read+1C5↑j
.text:000000000001316C                 mov     esi, [r12+48h]
.text:0000000000013171                 test    sil, 4
.text:0000000000013175                 jz      loc_1337C
.text:000000000001317B                 mov     [r12], rbp
.text:000000000001317F                 jmp     loc_12FC6
.text:0000000000013184 ; ---------------------------------------------------------------------------
.text:0000000000013184
.text:0000000000013184 loc_13184:                              ; CODE XREF: rpl_fts_read+42D↑j
.text:0000000000013184                 mov     edi, [r12+48h]
.text:0000000000013189                 test    edi, 2000h
.text:000000000001318F                 jnz     loc_12D7E
.text:0000000000013195                 mov     r9d, [rbp+40h]
.text:0000000000013199                 test    r9d, r9d
.text:000000000001319C                 jz      short loc_131B0
.text:000000000001319E                 cmp     word ptr [rbp+70h], 4
.text:00000000000131A3                 jz      short loc_131B0
.text:00000000000131A5                 mov     r8d, 7
.text:00000000000131AB                 mov     [rbp+70h], r8w
.text:00000000000131B0
.text:00000000000131B0 loc_131B0:                              ; CODE XREF: rpl_fts_read+53C↑j
.text:00000000000131B0                                         ; rpl_fts_read+543↑j
.text:00000000000131B0                 lea     rsi, [r12+58h]
.text:00000000000131B5                 mov     rdx, rbp
.text:00000000000131B8                 call    leave_dir_isra_12
.text:00000000000131BD                 jmp     loc_12DFA
.text:00000000000131C2 ; ---------------------------------------------------------------------------
.text:00000000000131C2
.text:00000000000131C2 loc_131C2:                              ; CODE XREF: rpl_fts_read+A9↑j
.text:00000000000131C2                 mov     rdi, rbx        ; ptr
.text:00000000000131C5                 xor     ebp, ebp
.text:00000000000131C7                 call    free
.text:00000000000131CC                 call    ___errno_location
.text:00000000000131D1                 mov     dword ptr [rax], 0
.text:00000000000131D7                 mov     qword ptr [r12], 0
.text:00000000000131DF                 jmp     loc_12DFA
.text:00000000000131DF ; ---------------------------------------------------------------------------
.text:00000000000131E4                 align 8
.text:00000000000131E8
.text:00000000000131E8 loc_131E8:                              ; CODE XREF: rpl_fts_read+1E3↑j
.text:00000000000131E8                 mov     rbx, [rbp+8]
.text:00000000000131EC                 cmp     qword ptr [rbx+68h], 0
.text:00000000000131F1                 jnz     short loc_13204
.text:00000000000131F3                 mov     eax, [r12+48h]
.text:00000000000131F8                 and     eax, 18h
.text:00000000000131FB                 cmp     eax, 18h
.text:00000000000131FE                 jz      loc_1335D
.text:0000000000013204
.text:0000000000013204 loc_13204:                              ; CODE XREF: rpl_fts_read+591↑j
.text:0000000000013204                                         ; rpl_fts_read+70D↓j
.text:0000000000013204                 xor     edx, edx
.text:0000000000013206                 mov     rsi, rbp
.text:0000000000013209                 mov     rdi, r12
.text:000000000001320C                 call    fts_stat
.text:0000000000013211                 mov     edx, [rbp+90h]
.text:0000000000013217                 mov     [rbp+70h], ax
.text:000000000001321B                 and     edx, 0F000h
.text:0000000000013221                 cmp     edx, 4000h
.text:0000000000013227                 jnz     loc_12FBC
.text:000000000001322D                 cmp     qword ptr [rbp+58h], 0
.text:0000000000013232                 jz      loc_1334E
.text:0000000000013238                 mov     rcx, [rbx+68h]
.text:000000000001323C                 lea     rdx, [rcx-1]
.text:0000000000013240                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:0000000000013244                 ja      short loc_1324A
.text:0000000000013246                 mov     [rbx+68h], rdx
.text:000000000001324A
.text:000000000001324A loc_1324A:                              ; CODE XREF: rpl_fts_read+5E4↑j
.text:000000000001324A                 cmp     ax, 1
.text:000000000001324E                 jnz     loc_12DFA
.text:0000000000013254                 jmp     loc_12FD6
.text:0000000000013254 ; ---------------------------------------------------------------------------
.text:0000000000013259                 align 20h
.text:0000000000013260
.text:0000000000013260 loc_13260:                              ; CODE XREF: rpl_fts_read+92↑j
.text:0000000000013260                 mov     rax, [rbx+48h]
.text:0000000000013264                 mov     rdx, [r12+20h]
.text:0000000000013269                 mov     esi, 3
.text:000000000001326E                 mov     [r12], rbx
.text:0000000000013272                 mov     rdi, r12
.text:0000000000013275                 mov     byte ptr [rdx+rax], 0
.text:0000000000013279                 call    fts_build
.text:000000000001327E                 test    rax, rax
.text:0000000000013281                 mov     rbx, rax
.text:0000000000013284                 jz      short loc_132D8
.text:0000000000013286                 mov     rdi, rbp        ; ptr
.text:0000000000013289                 mov     rbp, rbx
.text:000000000001328C                 call    free
.text:0000000000013291                 jmp     loc_13012
.text:0000000000013291 ; ---------------------------------------------------------------------------
.text:0000000000013296                 align 20h
.text:00000000000132A0
.text:00000000000132A0 loc_132A0:                              ; CODE XREF: rpl_fts_read+15F↑j
.text:00000000000132A0                 mov     edi, [rbp+44h]  ; fd
.text:00000000000132A3                 call    _close
.text:00000000000132A8                 jmp     loc_12DC5
.text:00000000000132AD ; ---------------------------------------------------------------------------
.text:00000000000132AD
.text:00000000000132AD loc_132AD:                              ; CODE XREF: rpl_fts_read+3AC↑j
.text:00000000000132AD                 mov     edx, 1
.text:00000000000132B2                 mov     rsi, rbx
.text:00000000000132B5                 mov     rdi, r12
.text:00000000000132B8                 call    fts_stat
.text:00000000000132BD                 cmp     ax, 1
.text:00000000000132C1                 mov     [rbx+70h], ax
.text:00000000000132C5                 jz      short loc_13321
.text:00000000000132C7
.text:00000000000132C7 loc_132C7:                              ; CODE XREF: rpl_fts_read+6CA↓j
.text:00000000000132C7                                         ; rpl_fts_read+6E9↓j ...
.text:00000000000132C7                 mov     esi, 3
.text:00000000000132CC                 mov     rbp, rbx
.text:00000000000132CF                 mov     [rbx+74h], si
.text:00000000000132D3                 jmp     loc_13012
.text:00000000000132D8 ; ---------------------------------------------------------------------------
.text:00000000000132D8
.text:00000000000132D8 loc_132D8:                              ; CODE XREF: rpl_fts_read+624↑j
.text:00000000000132D8                 test    byte ptr [r12+49h], 20h
.text:00000000000132DE                 jnz     loc_12D7E
.text:00000000000132E4                 mov     rbx, [rbp+8]
.text:00000000000132E8                 jmp     loc_12CF8
.text:00000000000132ED ; ---------------------------------------------------------------------------
.text:00000000000132ED
.text:00000000000132ED loc_132ED:                              ; CODE XREF: rpl_fts_read+4EF↑j
.text:00000000000132ED                 call    _fchdir
.text:00000000000132F2                 test    eax, eax
.text:00000000000132F4                 jz      short loc_13309
.text:00000000000132F6                 call    ___errno_location
.text:00000000000132FB                 mov     eax, [rax]
.text:00000000000132FD                 mov     [rbx+40h], eax
.text:0000000000013300                 or      dword ptr [r12+48h], 2000h
.text:0000000000013309
.text:0000000000013309 loc_13309:                              ; CODE XREF: rpl_fts_read+694↑j
.text:0000000000013309                 mov     edi, [rbx+44h]
.text:000000000001330C                 jmp     loc_12D4E
.text:0000000000013311 ; ---------------------------------------------------------------------------
.text:0000000000013311
.text:0000000000013311 loc_13311:                              ; CODE XREF: rpl_fts_read+2AA↑j
.text:0000000000013311                 or      dword ptr [r12+48h], 2000h
.text:000000000001331A                 xor     ebp, ebp
.text:000000000001331C                 jmp     loc_12DFA
.text:0000000000013321 ; ---------------------------------------------------------------------------
.text:0000000000013321
.text:0000000000013321 loc_13321:                              ; CODE XREF: rpl_fts_read+665↑j
.text:0000000000013321                 mov     esi, [r12+48h]
.text:0000000000013326                 test    sil, 4
.text:000000000001332A                 jnz     short loc_132C7
.text:000000000001332C                 mov     edi, [r12+2Ch]
.text:0000000000013331                 lea     rdx, asc_15AEB+1 ; "."
.text:0000000000013338                 call    diropen_isra_6
.text:000000000001333D                 test    eax, eax
.text:000000000001333F                 mov     [rbx+44h], eax
.text:0000000000013342                 js      short loc_133C0
.text:0000000000013344                 or      word ptr [rbx+72h], 2
.text:0000000000013349                 jmp     loc_132C7
.text:000000000001334E ; ---------------------------------------------------------------------------
.text:000000000001334E
.text:000000000001334E loc_1334E:                              ; CODE XREF: rpl_fts_read+5D2↑j
.text:000000000001334E                 cmp     ax, 1
.text:0000000000013352                 jnz     loc_12DFA
.text:0000000000013358                 jmp     loc_12FCD
.text:000000000001335D ; ---------------------------------------------------------------------------
.text:000000000001335D
.text:000000000001335D loc_1335D:                              ; CODE XREF: rpl_fts_read+59E↑j
.text:000000000001335D                 mov     esi, [r12+2Ch]
.text:0000000000013362                 mov     rdi, rbx
.text:0000000000013365                 call    leaf_optimization
.text:000000000001336A                 cmp     eax, 2
.text:000000000001336D                 jnz     loc_13204
.text:0000000000013373                 movzx   eax, word ptr [rbp+70h]
.text:0000000000013377                 jmp     loc_12FBC
.text:000000000001337C ; ---------------------------------------------------------------------------
.text:000000000001337C
.text:000000000001337C loc_1337C:                              ; CODE XREF: rpl_fts_read+515↑j
.text:000000000001337C                 mov     edi, [r12+2Ch]
.text:0000000000013381                 lea     rdx, asc_15AEB+1 ; "."
.text:0000000000013388                 call    diropen_isra_6
.text:000000000001338D                 test    eax, eax
.text:000000000001338F                 mov     [rbp+44h], eax
.text:0000000000013392                 js      short loc_133A2
.text:0000000000013394                 or      word ptr [rbp+72h], 2
.text:0000000000013399                 movzx   eax, word ptr [rbp+70h]
.text:000000000001339D                 jmp     loc_12FAE
.text:00000000000133A2 ; ---------------------------------------------------------------------------
.text:00000000000133A2
.text:00000000000133A2 loc_133A2:                              ; CODE XREF: rpl_fts_read+732↑j
.text:00000000000133A2                 call    ___errno_location
.text:00000000000133A7                 mov     eax, [rax]
.text:00000000000133A9                 mov     r11d, 7
.text:00000000000133AF                 mov     [rbp+70h], r11w
.text:00000000000133B4                 mov     [rbp+40h], eax
.text:00000000000133B7                 mov     [r12], rbp
.text:00000000000133BB                 jmp     loc_12DFA
.text:00000000000133C0 ; ---------------------------------------------------------------------------
.text:00000000000133C0
.text:00000000000133C0 loc_133C0:                              ; CODE XREF: rpl_fts_read+6E2↑j
.text:00000000000133C0                 call    ___errno_location
.text:00000000000133C5                 mov     eax, [rax]
.text:00000000000133C7                 mov     edi, 7
.text:00000000000133CC                 mov     [rbx+70h], di
.text:00000000000133D0                 mov     [rbx+40h], eax
.text:00000000000133D3                 jmp     loc_132C7
.text:00000000000133D3 ; } // starts at 12C60
.text:00000000000133D3 rpl_fts_read    endp
.text:00000000000133D3
.text:00000000000133D3 ; ---------------------------------------------------------------------------
.text:00000000000133D8                 align 20h
.text:00000000000133E0
.text:00000000000133E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000133E0
.text:00000000000133E0
.text:00000000000133E0                 public rpl_fts_set
.text:00000000000133E0 rpl_fts_set     proc near               ; CODE XREF: rm+E4↑p
.text:00000000000133E0                                         ; rm+389↑p ...
.text:00000000000133E0 ; __unwind {
.text:00000000000133E0                 cmp     edx, 4
.text:00000000000133E3                 ja      short loc_133F0
.text:00000000000133E5                 mov     [rsi+74h], dx
.text:00000000000133E9                 xor     eax, eax
.text:00000000000133EB                 retn
.text:00000000000133EB ; ---------------------------------------------------------------------------
.text:00000000000133EC                 align 10h
.text:00000000000133F0
.text:00000000000133F0 loc_133F0:                              ; CODE XREF: rpl_fts_set+3↑j
.text:00000000000133F0                 sub     rsp, 8
.text:00000000000133F4                 call    ___errno_location
.text:00000000000133F9                 mov     dword ptr [rax], 16h
.text:00000000000133FF                 mov     eax, 1
.text:0000000000013404                 add     rsp, 8
.text:0000000000013408                 retn
.text:0000000000013408 ; } // starts at 133E0
.text:0000000000013408 rpl_fts_set     endp
.text:0000000000013408
.text:0000000000013408 ; ---------------------------------------------------------------------------
.text:0000000000013409                 align 10h
.text:0000000000013410
.text:0000000000013410 ; =============== S U B R O U T I N E =======================================
.text:0000000000013410
.text:0000000000013410
.text:0000000000013410                 public rpl_fts_children
.text:0000000000013410 rpl_fts_children proc near
.text:0000000000013410 ; __unwind {
.text:0000000000013410                 push    r14
.text:0000000000013412                 push    r13
.text:0000000000013414                 push    r12
.text:0000000000013416                 push    rbp
.text:0000000000013417                 mov     r12d, esi
.text:000000000001341A                 push    rbx
.text:000000000001341B                 mov     rbx, rdi
.text:000000000001341E                 call    ___errno_location
.text:0000000000013423                 test    r12d, 0FFFFEFFFh
.text:000000000001342A                 mov     r13, rax
.text:000000000001342D                 jnz     loc_13518
.text:0000000000013433                 mov     rbp, [rbx]
.text:0000000000013436                 mov     dword ptr [rax], 0
.text:000000000001343C                 test    byte ptr [rbx+49h], 20h
.text:0000000000013440                 jnz     short loc_134C0
.text:0000000000013442                 movzx   eax, word ptr [rbp+70h]
.text:0000000000013446                 cmp     ax, 9
.text:000000000001344A                 jz      short loc_134B0
.text:000000000001344C                 cmp     ax, 1
.text:0000000000013450                 jnz     short loc_134C0
.text:0000000000013452                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000013456                 test    rdi, rdi
.text:0000000000013459                 jz      short loc_13460
.text:000000000001345B                 call    fts_lfree
.text:0000000000013460
.text:0000000000013460 loc_13460:                              ; CODE XREF: rpl_fts_children+49↑j
.text:0000000000013460                 cmp     r12d, 1000h
.text:0000000000013467                 mov     r14d, 1
.text:000000000001346D                 jnz     short loc_1347C
.text:000000000001346F                 or      dword ptr [rbx+48h], 1000h
.text:0000000000013476                 mov     r14d, 2
.text:000000000001347C
.text:000000000001347C loc_1347C:                              ; CODE XREF: rpl_fts_children+5D↑j
.text:000000000001347C                 cmp     qword ptr [rbp+58h], 0
.text:0000000000013481                 jnz     short loc_13495
.text:0000000000013483                 mov     rax, [rbp+30h]
.text:0000000000013487                 cmp     byte ptr [rax], 2Fh ; '/'
.text:000000000001348A                 jz      short loc_13495
.text:000000000001348C                 mov     esi, [rbx+48h]
.text:000000000001348F                 test    sil, 4
.text:0000000000013493                 jz      short loc_134D0
.text:0000000000013495
.text:0000000000013495 loc_13495:                              ; CODE XREF: rpl_fts_children+71↑j
.text:0000000000013495                                         ; rpl_fts_children+7A↑j
.text:0000000000013495                 mov     esi, r14d
.text:0000000000013498                 mov     rdi, rbx
.text:000000000001349B                 call    fts_build
.text:00000000000134A0                 mov     [rbx+8], rax
.text:00000000000134A4
.text:00000000000134A4 loc_134A4:                              ; CODE XREF: rpl_fts_children+100↓j
.text:00000000000134A4                                         ; rpl_fts_children+110↓j ...
.text:00000000000134A4                 pop     rbx
.text:00000000000134A5                 pop     rbp
.text:00000000000134A6                 pop     r12
.text:00000000000134A8                 pop     r13
.text:00000000000134AA                 pop     r14
.text:00000000000134AC                 retn
.text:00000000000134AC ; ---------------------------------------------------------------------------
.text:00000000000134AD                 align 10h
.text:00000000000134B0
.text:00000000000134B0 loc_134B0:                              ; CODE XREF: rpl_fts_children+3A↑j
.text:00000000000134B0                 pop     rbx
.text:00000000000134B1                 mov     rax, [rbp+10h]
.text:00000000000134B5                 pop     rbp
.text:00000000000134B6                 pop     r12
.text:00000000000134B8                 pop     r13
.text:00000000000134BA                 pop     r14
.text:00000000000134BC                 retn
.text:00000000000134BC ; ---------------------------------------------------------------------------
.text:00000000000134BD                 align 20h
.text:00000000000134C0
.text:00000000000134C0 loc_134C0:                              ; CODE XREF: rpl_fts_children+30↑j
.text:00000000000134C0                                         ; rpl_fts_children+40↑j
.text:00000000000134C0                 pop     rbx
.text:00000000000134C1                 xor     eax, eax
.text:00000000000134C3                 pop     rbp
.text:00000000000134C4                 pop     r12
.text:00000000000134C6                 pop     r13
.text:00000000000134C8                 pop     r14
.text:00000000000134CA                 retn
.text:00000000000134CA ; ---------------------------------------------------------------------------
.text:00000000000134CB                 align 10h
.text:00000000000134D0
.text:00000000000134D0 loc_134D0:                              ; CODE XREF: rpl_fts_children+83↑j
.text:00000000000134D0                 mov     edi, [rbx+2Ch]
.text:00000000000134D3                 lea     rdx, asc_15AEB+1 ; "."
.text:00000000000134DA                 call    diropen_isra_6
.text:00000000000134DF                 test    eax, eax
.text:00000000000134E1                 mov     ebp, eax
.text:00000000000134E3                 js      short loc_13539
.text:00000000000134E5                 mov     esi, r14d
.text:00000000000134E8                 mov     rdi, rbx
.text:00000000000134EB                 call    fts_build
.text:00000000000134F0                 test    byte ptr [rbx+49h], 2
.text:00000000000134F4                 mov     [rbx+8], rax
.text:00000000000134F8                 jnz     short loc_13528
.text:00000000000134FA                 mov     edi, ebp        ; fd
.text:00000000000134FC                 call    _fchdir
.text:0000000000013501                 test    eax, eax
.text:0000000000013503                 jnz     short loc_13548
.text:0000000000013505                 mov     edi, ebp        ; fd
.text:0000000000013507                 call    _close
.text:000000000001350C
.text:000000000001350C loc_1350C:                              ; CODE XREF: rpl_fts_children+127↓j
.text:000000000001350C                 mov     rax, [rbx+8]
.text:0000000000013510                 jmp     short loc_134A4
.text:0000000000013510 ; ---------------------------------------------------------------------------
.text:0000000000013512                 align 8
.text:0000000000013518
.text:0000000000013518 loc_13518:                              ; CODE XREF: rpl_fts_children+1D↑j
.text:0000000000013518                 mov     dword ptr [rax], 16h
.text:000000000001351E                 xor     eax, eax
.text:0000000000013520                 jmp     loc_134A4
.text:0000000000013520 ; ---------------------------------------------------------------------------
.text:0000000000013525                 align 8
.text:0000000000013528
.text:0000000000013528 loc_13528:                              ; CODE XREF: rpl_fts_children+E8↑j
.text:0000000000013528                 mov     edx, 1
.text:000000000001352D                 mov     esi, ebp
.text:000000000001352F                 mov     rdi, rbx
.text:0000000000013532                 call    cwd_advance_fd
.text:0000000000013537                 jmp     short loc_1350C
.text:0000000000013539 ; ---------------------------------------------------------------------------
.text:0000000000013539
.text:0000000000013539 loc_13539:                              ; CODE XREF: rpl_fts_children+D3↑j
.text:0000000000013539                 mov     qword ptr [rbx+8], 0
.text:0000000000013541                 xor     eax, eax
.text:0000000000013543                 jmp     loc_134A4
.text:0000000000013548 ; ---------------------------------------------------------------------------
.text:0000000000013548
.text:0000000000013548 loc_13548:                              ; CODE XREF: rpl_fts_children+F3↑j
.text:0000000000013548                 mov     ebx, [r13+0]
.text:000000000001354C                 mov     edi, ebp        ; fd
.text:000000000001354E                 call    _close
.text:0000000000013553                 xor     eax, eax
.text:0000000000013555                 mov     [r13+0], ebx
.text:0000000000013559                 jmp     loc_134A4
.text:0000000000013559 ; } // starts at 13410
.text:0000000000013559 rpl_fts_children endp
.text:0000000000013559
.text:0000000000013559 ; ---------------------------------------------------------------------------
.text:000000000001355E                 align 20h
.text:0000000000013560
.text:0000000000013560 ; =============== S U B R O U T I N E =======================================
.text:0000000000013560
.text:0000000000013560 ; Attributes: info_from_lumina
.text:0000000000013560
.text:0000000000013560 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000013560                 public rpl_mbrtowc
.text:0000000000013560 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000013560
.text:0000000000013560 pwc             = dword ptr -34h
.text:0000000000013560 var_30          = qword ptr -30h
.text:0000000000013560
.text:0000000000013560 ; __unwind {
.text:0000000000013560                 push    r13
.text:0000000000013562                 push    r12
.text:0000000000013564                 mov     r13, rsi
.text:0000000000013567                 push    rbp
.text:0000000000013568                 push    rbx
.text:0000000000013569                 mov     rbx, rdi
.text:000000000001356C                 mov     r12, rdx
.text:000000000001356F                 sub     rsp, 18h
.text:0000000000013573                 mov     rax, fs:28h
.text:000000000001357C                 mov     [rsp+38h+var_30], rax
.text:0000000000013581                 xor     eax, eax
.text:0000000000013583                 lea     rax, [rsp+38h+pwc]
.text:0000000000013588                 test    rdi, rdi
.text:000000000001358B                 cmovz   rbx, rax
.text:000000000001358F                 mov     rdi, rbx        ; pwc
.text:0000000000013592                 call    _mbrtowc
.text:0000000000013597                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000001359B                 mov     rbp, rax
.text:000000000001359E                 jbe     short loc_135C0
.text:00000000000135A0                 test    r12, r12
.text:00000000000135A3                 jz      short loc_135C0
.text:00000000000135A5                 xor     edi, edi
.text:00000000000135A7                 call    hard_locale
.text:00000000000135AC                 test    al, al
.text:00000000000135AE                 jnz     short loc_135C0
.text:00000000000135B0                 movzx   eax, byte ptr [r13+0]
.text:00000000000135B5                 mov     ebp, 1
.text:00000000000135BA                 mov     [rbx], eax
.text:00000000000135BC                 nop     dword ptr [rax+00h]
.text:00000000000135C0
.text:00000000000135C0 loc_135C0:                              ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000135C0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000135C0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000135C5                 xor     rdx, fs:28h
.text:00000000000135CE                 mov     rax, rbp
.text:00000000000135D1                 jnz     short loc_135DE
.text:00000000000135D3                 add     rsp, 18h
.text:00000000000135D7                 pop     rbx
.text:00000000000135D8                 pop     rbp
.text:00000000000135D9                 pop     r12
.text:00000000000135DB                 pop     r13
.text:00000000000135DD                 retn
.text:00000000000135DE ; ---------------------------------------------------------------------------
.text:00000000000135DE
.text:00000000000135DE loc_135DE:                              ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000135DE                 call    ___stack_chk_fail
.text:00000000000135DE ; } // starts at 13560
.text:00000000000135DE rpl_mbrtowc     endp
.text:00000000000135DE
.text:00000000000135DE ; ---------------------------------------------------------------------------
.text:00000000000135E3                 align 10h
.text:00000000000135F0
.text:00000000000135F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000135F0
.text:00000000000135F0
.text:00000000000135F0                 public free_permission_context
.text:00000000000135F0 free_permission_context proc near       ; CODE XREF: qcopy_acl+45↑p
.text:00000000000135F0                                         ; qset_acl+31↑p
.text:00000000000135F0 ; __unwind {
.text:00000000000135F0                 rep retn
.text:00000000000135F0 ; } // starts at 135F0
.text:00000000000135F0 free_permission_context endp
.text:00000000000135F0
.text:00000000000135F0 ; ---------------------------------------------------------------------------
.text:00000000000135F2                 align 20h
.text:0000000000013600
.text:0000000000013600 ; =============== S U B R O U T I N E =======================================
.text:0000000000013600
.text:0000000000013600
.text:0000000000013600                 public get_permissions
.text:0000000000013600 get_permissions proc near               ; CODE XREF: qcopy_acl+29↑p
.text:0000000000013600 ; __unwind {
.text:0000000000013600                 mov     [rcx], edx
.text:0000000000013602                 xor     eax, eax
.text:0000000000013604                 retn
.text:0000000000013604 ; } // starts at 13600
.text:0000000000013604 get_permissions endp
.text:0000000000013604
.text:0000000000013604 ; ---------------------------------------------------------------------------
.text:0000000000013605                 align 10h
.text:0000000000013610
.text:0000000000013610 ; =============== S U B R O U T I N E =======================================
.text:0000000000013610
.text:0000000000013610
.text:0000000000013610                 public chmod_or_fchmod
.text:0000000000013610 chmod_or_fchmod proc near               ; CODE XREF: set_permissions+E↓p
.text:0000000000013610 ; __unwind {
.text:0000000000013610                 mov     eax, esi
.text:0000000000013612                 mov     esi, edx        ; mode
.text:0000000000013614                 cmp     eax, 0FFFFFFFFh
.text:0000000000013617                 jz      short loc_13620
.text:0000000000013619                 mov     edi, eax        ; file
.text:000000000001361B                 jmp     _fchmod
.text:0000000000013620 ; ---------------------------------------------------------------------------
.text:0000000000013620
.text:0000000000013620 loc_13620:                              ; CODE XREF: chmod_or_fchmod+7↑j
.text:0000000000013620                 jmp     _chmod
.text:0000000000013620 ; } // starts at 13610
.text:0000000000013620 chmod_or_fchmod endp
.text:0000000000013620
.text:0000000000013620 ; ---------------------------------------------------------------------------
.text:0000000000013625                 align 10h
.text:0000000000013630
.text:0000000000013630 ; =============== S U B R O U T I N E =======================================
.text:0000000000013630
.text:0000000000013630 ; Attributes: info_from_lumina
.text:0000000000013630
.text:0000000000013630                 public set_permissions
.text:0000000000013630 set_permissions proc near               ; CODE XREF: qcopy_acl+3B↑p
.text:0000000000013630                                         ; qset_acl+27↑p
.text:0000000000013630 ; __unwind {
.text:0000000000013630                 sub     rsp, 8
.text:0000000000013634                 mov     rax, rsi
.text:0000000000013637                 mov     esi, edx
.text:0000000000013639                 mov     edx, [rdi]
.text:000000000001363B                 mov     rdi, rax
.text:000000000001363E                 call    chmod_or_fchmod
.text:0000000000013643                 test    eax, eax
.text:0000000000013645                 setnz   al
.text:0000000000013648                 add     rsp, 8
.text:000000000001364C                 movzx   eax, al
.text:000000000001364F                 neg     eax
.text:0000000000013651                 retn
.text:0000000000013651 ; } // starts at 13630
.text:0000000000013651 set_permissions endp
.text:0000000000013651
.text:0000000000013651 ; ---------------------------------------------------------------------------
.text:0000000000013652                 align 20h
.text:0000000000013660
.text:0000000000013660 ; =============== S U B R O U T I N E =======================================
.text:0000000000013660
.text:0000000000013660 ; Attributes: noreturn
.text:0000000000013660
.text:0000000000013660 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000013660 ; __unwind {
.text:0000000000013660                 mov     edi, 1          ; status
.text:0000000000013665                 jmp     usage
.text:0000000000013665 ; } // starts at 13660
.text:0000000000013665 __argmatch_die  endp
.text:0000000000013665
.text:0000000000013665 ; ---------------------------------------------------------------------------
.text:000000000001366A                 align 10h
.text:0000000000013670
.text:0000000000013670 ; =============== S U B R O U T I N E =======================================
.text:0000000000013670
.text:0000000000013670 ; Attributes: info_from_lumina
.text:0000000000013670
.text:0000000000013670 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000013670                 public argmatch
.text:0000000000013670 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000013670
.text:0000000000013670 var_58          = qword ptr -58h
.text:0000000000013670 s2              = qword ptr -50h
.text:0000000000013670 var_41          = byte ptr -41h
.text:0000000000013670 var_40          = qword ptr -40h
.text:0000000000013670
.text:0000000000013670 ; __unwind {
.text:0000000000013670                 push    r15
.text:0000000000013672                 push    r14
.text:0000000000013674                 mov     r15, rsi
.text:0000000000013677                 push    r13
.text:0000000000013679                 push    r12
.text:000000000001367B                 mov     r13, rcx
.text:000000000001367E                 push    rbp
.text:000000000001367F                 push    rbx
.text:0000000000013680                 mov     rbp, rdx
.text:0000000000013683                 sub     rsp, 28h
.text:0000000000013687                 mov     [rsp+58h+s2], rdi
.text:000000000001368C                 mov     [rsp+58h+var_40], rdx
.text:0000000000013691                 call    _strlen
.text:0000000000013696                 mov     r14, [r15]
.text:0000000000013699                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000136A1                 test    r14, r14
.text:00000000000136A4                 jz      loc_1375D
.text:00000000000136AA                 mov     r12, rax
.text:00000000000136AD                 mov     [rsp+58h+var_41], 0
.text:00000000000136B2                 xor     ebx, ebx
.text:00000000000136B4                 jmp     short loc_13707
.text:00000000000136B4 ; ---------------------------------------------------------------------------
.text:00000000000136B6                 align 20h
.text:00000000000136C0
.text:00000000000136C0 loc_136C0:                              ; CODE XREF: argmatch+BD↓j
.text:00000000000136C0                 mov     rax, [rsp+58h+var_40]
.text:00000000000136C5                 test    rax, rax
.text:00000000000136C8                 jz      loc_13770
.text:00000000000136CE                 mov     rdi, [rsp+58h+var_58]
.text:00000000000136D2                 mov     rdx, r13        ; n
.text:00000000000136D5                 mov     rsi, rbp        ; s2
.text:00000000000136D8                 imul    rdi, r13
.text:00000000000136DC                 add     rdi, rax        ; s1
.text:00000000000136DF                 call    _memcmp
.text:00000000000136E4                 test    eax, eax
.text:00000000000136E6                 movzx   eax, [rsp+58h+var_41]
.text:00000000000136EB                 mov     ecx, 1
.text:00000000000136F0                 cmovnz  eax, ecx
.text:00000000000136F3                 mov     [rsp+58h+var_41], al
.text:00000000000136F7
.text:00000000000136F7 loc_136F7:                              ; CODE XREF: argmatch+A9↓j
.text:00000000000136F7                                         ; argmatch+105↓j
.text:00000000000136F7                 add     rbx, 1
.text:00000000000136FB                 add     rbp, r13
.text:00000000000136FE                 mov     r14, [r15+rbx*8]
.text:0000000000013702                 test    r14, r14
.text:0000000000013705                 jz      short loc_13748
.text:0000000000013707
.text:0000000000013707 loc_13707:                              ; CODE XREF: argmatch+44↑j
.text:0000000000013707                                         ; argmatch+D1↓j
.text:0000000000013707                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000001370C                 mov     rdx, r12        ; n
.text:000000000001370F                 mov     rdi, r14        ; s1
.text:0000000000013712                 call    _strncmp
.text:0000000000013717                 test    eax, eax
.text:0000000000013719                 jnz     short loc_136F7
.text:000000000001371B                 mov     rdi, r14        ; s
.text:000000000001371E                 call    _strlen
.text:0000000000013723                 cmp     rax, r12
.text:0000000000013726                 jz      short loc_13780
.text:0000000000013728                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000001372D                 jnz     short loc_136C0
.text:000000000001372F                 mov     [rsp+58h+var_58], rbx
.text:0000000000013733                 add     rbx, 1
.text:0000000000013737                 add     rbp, r13
.text:000000000001373A                 mov     r14, [r15+rbx*8]
.text:000000000001373E                 test    r14, r14
.text:0000000000013741                 jnz     short loc_13707
.text:0000000000013743                 nop     dword ptr [rax+rax+00h]
.text:0000000000013748
.text:0000000000013748 loc_13748:                              ; CODE XREF: argmatch+95↑j
.text:0000000000013748                 cmp     [rsp+58h+var_41], 0
.text:000000000001374D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000013754                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000013759                 mov     [rsp+58h+var_58], rax
.text:000000000001375D
.text:000000000001375D loc_1375D:                              ; CODE XREF: argmatch+34↑j
.text:000000000001375D                                         ; argmatch+114↓j
.text:000000000001375D                 mov     rax, [rsp+58h+var_58]
.text:0000000000013761                 add     rsp, 28h
.text:0000000000013765                 pop     rbx
.text:0000000000013766                 pop     rbp
.text:0000000000013767                 pop     r12
.text:0000000000013769                 pop     r13
.text:000000000001376B                 pop     r14
.text:000000000001376D                 pop     r15
.text:000000000001376F                 retn
.text:0000000000013770 ; ---------------------------------------------------------------------------
.text:0000000000013770
.text:0000000000013770 loc_13770:                              ; CODE XREF: argmatch+58↑j
.text:0000000000013770                 mov     [rsp+58h+var_41], 1
.text:0000000000013775                 jmp     short loc_136F7
.text:0000000000013775 ; ---------------------------------------------------------------------------
.text:0000000000013777                 align 20h
.text:0000000000013780
.text:0000000000013780 loc_13780:                              ; CODE XREF: argmatch+B6↑j
.text:0000000000013780                 mov     [rsp+58h+var_58], rbx
.text:0000000000013784                 jmp     short loc_1375D
.text:0000000000013784 ; } // starts at 13670
.text:0000000000013784 argmatch        endp
.text:0000000000013784
.text:0000000000013784 ; ---------------------------------------------------------------------------
.text:0000000000013786                 align 10h
.text:0000000000013790
.text:0000000000013790 ; =============== S U B R O U T I N E =======================================
.text:0000000000013790
.text:0000000000013790 ; Attributes: info_from_lumina
.text:0000000000013790
.text:0000000000013790 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000013790                 public argmatch_invalid
.text:0000000000013790 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000013790 ; __unwind {
.text:0000000000013790                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013794                 push    r12
.text:0000000000013796                 mov     edx, 5          ; category
.text:000000000001379B                 push    rbp
.text:000000000001379C                 mov     r12, rsi
.text:000000000001379F                 push    rbx
.text:00000000000137A0                 mov     rbp, rdi
.text:00000000000137A3                 jz      short loc_137F0
.text:00000000000137A5                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:00000000000137AC                 xor     edi, edi        ; domainname
.text:00000000000137AE                 call    _dcgettext
.text:00000000000137B3                 mov     rbx, rax
.text:00000000000137B6
.text:00000000000137B6 loc_137B6:                              ; CODE XREF: argmatch_invalid+71↓j
.text:00000000000137B6                 mov     rsi, rbp
.text:00000000000137B9                 mov     edi, 1
.text:00000000000137BE                 call    quote_n
.text:00000000000137C3                 mov     rdx, r12
.text:00000000000137C6                 mov     rbp, rax
.text:00000000000137C9                 mov     esi, 8
.text:00000000000137CE                 xor     edi, edi
.text:00000000000137D0                 call    quotearg_n_style
.text:00000000000137D5                 mov     r8, rbp
.text:00000000000137D8                 mov     rdx, rbx        ; format
.text:00000000000137DB                 mov     rcx, rax
.text:00000000000137DE                 pop     rbx
.text:00000000000137DF                 pop     rbp
.text:00000000000137E0                 pop     r12
.text:00000000000137E2                 xor     esi, esi        ; errnum
.text:00000000000137E4                 xor     edi, edi        ; status
.text:00000000000137E6                 xor     eax, eax
.text:00000000000137E8                 jmp     _error
.text:00000000000137E8 ; ---------------------------------------------------------------------------
.text:00000000000137ED                 align 10h
.text:00000000000137F0
.text:00000000000137F0 loc_137F0:                              ; CODE XREF: argmatch_invalid+13↑j
.text:00000000000137F0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:00000000000137F7                 xor     edi, edi        ; domainname
.text:00000000000137F9                 call    _dcgettext
.text:00000000000137FE                 mov     rbx, rax
.text:0000000000013801                 jmp     short loc_137B6
.text:0000000000013801 ; } // starts at 13790
.text:0000000000013801 argmatch_invalid endp
.text:0000000000013801
.text:0000000000013801 ; ---------------------------------------------------------------------------
.text:0000000000013803                 align 10h
.text:0000000000013810
.text:0000000000013810 ; =============== S U B R O U T I N E =======================================
.text:0000000000013810
.text:0000000000013810 ; Attributes: info_from_lumina
.text:0000000000013810
.text:0000000000013810 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000013810                 public argmatch_valid
.text:0000000000013810 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000013810 ; __unwind {
.text:0000000000013810                 push    r15
.text:0000000000013812                 push    r14
.text:0000000000013814                 mov     r14, rdi
.text:0000000000013817                 push    r13
.text:0000000000013819                 push    r12
.text:000000000001381B                 xor     edi, edi        ; domainname
.text:000000000001381D                 push    rbp
.text:000000000001381E                 push    rbx
.text:000000000001381F                 mov     rbp, rsi
.text:0000000000013822                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000013829                 mov     r12, rdx
.text:000000000001382C                 mov     edx, 5          ; category
.text:0000000000013831                 sub     rsp, 8
.text:0000000000013835                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000001383C                 call    _dcgettext
.text:0000000000013841                 mov     rdi, rax        ; s
.text:0000000000013844                 mov     rsi, rbx        ; stream
.text:0000000000013847                 call    _fputs_unlocked
.text:000000000001384C                 mov     r15, [r14]
.text:000000000001384F                 test    r15, r15
.text:0000000000013852                 jz      loc_138E8
.text:0000000000013858                 xor     r13d, r13d
.text:000000000001385B                 xor     ebx, ebx
.text:000000000001385D                 jmp     short loc_13898
.text:000000000001385D ; ---------------------------------------------------------------------------
.text:000000000001385F                 align 20h
.text:0000000000013860
.text:0000000000013860 loc_13860:                              ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000013860                                         ; argmatch_valid+9D↓j
.text:0000000000013860                 mov     rdi, r15
.text:0000000000013863                 add     rbx, 1
.text:0000000000013867                 mov     r13, rbp
.text:000000000001386A                 call    quote
.text:000000000001386F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000013876                 lea     rdx, aS         ; "\n  - %s"
.text:000000000001387D                 mov     rcx, rax
.text:0000000000013880                 mov     esi, 1
.text:0000000000013885                 xor     eax, eax
.text:0000000000013887                 add     rbp, r12
.text:000000000001388A                 call    ___fprintf_chk
.text:000000000001388F                 mov     r15, [r14+rbx*8]
.text:0000000000013893                 test    r15, r15
.text:0000000000013896                 jz      short loc_138E8
.text:0000000000013898
.text:0000000000013898 loc_13898:                              ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000013898                                         ; argmatch_valid+D2↓j
.text:0000000000013898                 test    rbx, rbx
.text:000000000001389B                 jz      short loc_13860
.text:000000000001389D                 mov     rdx, r12        ; n
.text:00000000000138A0                 mov     rsi, rbp        ; s2
.text:00000000000138A3                 mov     rdi, r13        ; s1
.text:00000000000138A6                 call    _memcmp
.text:00000000000138AB                 test    eax, eax
.text:00000000000138AD                 jnz     short loc_13860
.text:00000000000138AF                 mov     rdi, r15
.text:00000000000138B2                 add     rbx, 1
.text:00000000000138B6                 add     rbp, r12
.text:00000000000138B9                 call    quote
.text:00000000000138BE                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000138C5                 lea     rdx, aS_0       ; ", %s"
.text:00000000000138CC                 mov     rcx, rax
.text:00000000000138CF                 mov     esi, 1
.text:00000000000138D4                 xor     eax, eax
.text:00000000000138D6                 call    ___fprintf_chk
.text:00000000000138DB                 mov     r15, [r14+rbx*8]
.text:00000000000138DF                 test    r15, r15
.text:00000000000138E2                 jnz     short loc_13898
.text:00000000000138E4                 nop     dword ptr [rax+00h]
.text:00000000000138E8
.text:00000000000138E8 loc_138E8:                              ; CODE XREF: argmatch_valid+42↑j
.text:00000000000138E8                                         ; argmatch_valid+86↑j
.text:00000000000138E8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000138EF                 mov     rax, [rdi+28h]
.text:00000000000138F3                 cmp     rax, [rdi+30h]
.text:00000000000138F7                 jnb     short loc_13918
.text:00000000000138F9                 lea     rdx, [rax+1]
.text:00000000000138FD                 mov     [rdi+28h], rdx
.text:0000000000013901                 mov     byte ptr [rax], 0Ah
.text:0000000000013904                 add     rsp, 8
.text:0000000000013908                 pop     rbx
.text:0000000000013909                 pop     rbp
.text:000000000001390A                 pop     r12
.text:000000000001390C                 pop     r13
.text:000000000001390E                 pop     r14
.text:0000000000013910                 pop     r15
.text:0000000000013912                 retn
.text:0000000000013912 ; ---------------------------------------------------------------------------
.text:0000000000013913                 align 8
.text:0000000000013918
.text:0000000000013918 loc_13918:                              ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000013918                 add     rsp, 8
.text:000000000001391C                 mov     esi, 0Ah        ; int
.text:0000000000013921                 pop     rbx
.text:0000000000013922                 pop     rbp
.text:0000000000013923                 pop     r12
.text:0000000000013925                 pop     r13
.text:0000000000013927                 pop     r14
.text:0000000000013929                 pop     r15
.text:000000000001392B                 jmp     ___overflow
.text:000000000001392B ; } // starts at 13810
.text:000000000001392B argmatch_valid  endp
.text:000000000001392B
.text:0000000000013930
.text:0000000000013930 ; =============== S U B R O U T I N E =======================================
.text:0000000000013930
.text:0000000000013930 ; Attributes: info_from_lumina
.text:0000000000013930
.text:0000000000013930 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000013930                 public __xargmatch_internal
.text:0000000000013930 __xargmatch_internal proc near          ; CODE XREF: get_version_part_0+1F↑p
.text:0000000000013930 ; __unwind {
.text:0000000000013930                 push    r15
.text:0000000000013932                 push    r14
.text:0000000000013934                 mov     r14, rdi
.text:0000000000013937                 push    r13
.text:0000000000013939                 push    r12
.text:000000000001393B                 mov     r12, rsi
.text:000000000001393E                 push    rbp
.text:000000000001393F                 push    rbx
.text:0000000000013940                 mov     rbp, rcx
.text:0000000000013943                 mov     rbx, rdx
.text:0000000000013946                 mov     rcx, r8
.text:0000000000013949                 mov     rdx, rbp
.text:000000000001394C                 sub     rsp, 8
.text:0000000000013950                 mov     rsi, rbx
.text:0000000000013953                 mov     rdi, r12
.text:0000000000013956                 mov     r15, r8
.text:0000000000013959                 mov     r13, r9
.text:000000000001395C                 call    argmatch
.text:0000000000013961                 test    rax, rax
.text:0000000000013964                 js      short loc_13975
.text:0000000000013966
.text:0000000000013966 loc_13966:                              ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000013966                 add     rsp, 8
.text:000000000001396A                 pop     rbx
.text:000000000001396B                 pop     rbp
.text:000000000001396C                 pop     r12
.text:000000000001396E                 pop     r13
.text:0000000000013970                 pop     r14
.text:0000000000013972                 pop     r15
.text:0000000000013974                 retn
.text:0000000000013975 ; ---------------------------------------------------------------------------
.text:0000000000013975
.text:0000000000013975 loc_13975:                              ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000013975                 mov     rdx, rax
.text:0000000000013978                 mov     rsi, r12
.text:000000000001397B                 mov     rdi, r14
.text:000000000001397E                 call    argmatch_invalid
.text:0000000000013983                 mov     rdx, r15
.text:0000000000013986                 mov     rsi, rbp
.text:0000000000013989                 mov     rdi, rbx
.text:000000000001398C                 call    argmatch_valid
.text:0000000000013991                 call    r13
.text:0000000000013994                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001399B                 jmp     short loc_13966
.text:000000000001399B ; } // starts at 13930
.text:000000000001399B __xargmatch_internal endp
.text:000000000001399B
.text:000000000001399B ; ---------------------------------------------------------------------------
.text:000000000001399D                 align 20h
.text:00000000000139A0
.text:00000000000139A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000139A0
.text:00000000000139A0 ; Attributes: info_from_lumina
.text:00000000000139A0
.text:00000000000139A0 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000139A0                 public argmatch_to_argument
.text:00000000000139A0 argmatch_to_argument proc near
.text:00000000000139A0 ; __unwind {
.text:00000000000139A0                 push    r14
.text:00000000000139A2                 push    r13
.text:00000000000139A4                 push    r12
.text:00000000000139A6                 push    rbp
.text:00000000000139A7                 push    rbx
.text:00000000000139A8                 mov     r14, [rsi]
.text:00000000000139AB                 test    r14, r14
.text:00000000000139AE                 jz      short loc_139E1
.text:00000000000139B0                 mov     r12, rcx
.text:00000000000139B3                 mov     r13, rdi
.text:00000000000139B6                 mov     rbp, rdx
.text:00000000000139B9                 lea     rbx, [rsi+8]
.text:00000000000139BD                 jmp     short loc_139CF
.text:00000000000139BD ; ---------------------------------------------------------------------------
.text:00000000000139BF                 align 20h
.text:00000000000139C0
.text:00000000000139C0 loc_139C0:                              ; CODE XREF: argmatch_to_argument+3F↓j
.text:00000000000139C0                 mov     r14, [rbx]
.text:00000000000139C3                 add     rbp, r12
.text:00000000000139C6                 add     rbx, 8
.text:00000000000139CA                 test    r14, r14
.text:00000000000139CD                 jz      short loc_139E1
.text:00000000000139CF
.text:00000000000139CF loc_139CF:                              ; CODE XREF: argmatch_to_argument+1D↑j
.text:00000000000139CF                 mov     rdx, r12        ; n
.text:00000000000139D2                 mov     rsi, rbp        ; s2
.text:00000000000139D5                 mov     rdi, r13        ; s1
.text:00000000000139D8                 call    _memcmp
.text:00000000000139DD                 test    eax, eax
.text:00000000000139DF                 jnz     short loc_139C0
.text:00000000000139E1
.text:00000000000139E1 loc_139E1:                              ; CODE XREF: argmatch_to_argument+E↑j
.text:00000000000139E1                                         ; argmatch_to_argument+2D↑j
.text:00000000000139E1                 pop     rbx
.text:00000000000139E2                 mov     rax, r14
.text:00000000000139E5                 pop     rbp
.text:00000000000139E6                 pop     r12
.text:00000000000139E8                 pop     r13
.text:00000000000139EA                 pop     r14
.text:00000000000139EC                 retn
.text:00000000000139EC ; } // starts at 139A0
.text:00000000000139EC argmatch_to_argument endp
.text:00000000000139EC
.text:00000000000139EC ; ---------------------------------------------------------------------------
.text:00000000000139ED                 align 10h
.text:00000000000139F0
.text:00000000000139F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000139F0
.text:00000000000139F0 ; Attributes: info_from_lumina
.text:00000000000139F0
.text:00000000000139F0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000139F0                 public close_stream
.text:00000000000139F0 close_stream    proc near               ; CODE XREF: close_stdin+1F↑p
.text:00000000000139F0                                         ; close_stdin+4C↑p ...
.text:00000000000139F0 ; __unwind {
.text:00000000000139F0                 push    r12
.text:00000000000139F2                 push    rbp
.text:00000000000139F3                 mov     rbp, rdi
.text:00000000000139F6                 push    rbx
.text:00000000000139F7                 call    ___fpending
.text:00000000000139FC                 mov     ebx, [rbp+0]
.text:00000000000139FF                 mov     rdi, rbp        ; stream
.text:0000000000013A02                 mov     r12, rax
.text:0000000000013A05                 call    rpl_fclose
.text:0000000000013A0A                 and     ebx, 20h
.text:0000000000013A0D                 test    ebx, ebx
.text:0000000000013A0F                 jnz     short loc_13A28
.text:0000000000013A11                 test    eax, eax
.text:0000000000013A13                 jz      short loc_13A1F
.text:0000000000013A15                 test    r12, r12
.text:0000000000013A18                 mov     eax, 0FFFFFFFFh
.text:0000000000013A1D                 jz      short loc_13A58
.text:0000000000013A1F
.text:0000000000013A1F loc_13A1F:                              ; CODE XREF: close_stream+23↑j
.text:0000000000013A1F                 pop     rbx
.text:0000000000013A20                 pop     rbp
.text:0000000000013A21                 pop     r12
.text:0000000000013A23                 retn
.text:0000000000013A23 ; ---------------------------------------------------------------------------
.text:0000000000013A24                 align 8
.text:0000000000013A28
.text:0000000000013A28 loc_13A28:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000013A28                 test    eax, eax
.text:0000000000013A2A                 jnz     short loc_13A48
.text:0000000000013A2C                 call    ___errno_location
.text:0000000000013A31                 mov     dword ptr [rax], 0
.text:0000000000013A37                 mov     eax, 0FFFFFFFFh
.text:0000000000013A3C                 pop     rbx
.text:0000000000013A3D                 pop     rbp
.text:0000000000013A3E                 pop     r12
.text:0000000000013A40                 retn
.text:0000000000013A40 ; ---------------------------------------------------------------------------
.text:0000000000013A41                 align 8
.text:0000000000013A48
.text:0000000000013A48 loc_13A48:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000013A48                 pop     rbx
.text:0000000000013A49                 mov     eax, 0FFFFFFFFh
.text:0000000000013A4E                 pop     rbp
.text:0000000000013A4F                 pop     r12
.text:0000000000013A51                 retn
.text:0000000000013A51 ; ---------------------------------------------------------------------------
.text:0000000000013A52                 align 8
.text:0000000000013A58
.text:0000000000013A58 loc_13A58:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000013A58                 call    ___errno_location
.text:0000000000013A5D                 cmp     dword ptr [rax], 9
.text:0000000000013A60                 pop     rbx
.text:0000000000013A61                 pop     rbp
.text:0000000000013A62                 pop     r12
.text:0000000000013A64                 setnz   al
.text:0000000000013A67                 movzx   eax, al
.text:0000000000013A6A                 neg     eax
.text:0000000000013A6C                 retn
.text:0000000000013A6C ; } // starts at 139F0
.text:0000000000013A6C close_stream    endp
.text:0000000000013A6C
.text:0000000000013A6C ; ---------------------------------------------------------------------------
.text:0000000000013A6D                 align 10h
.text:0000000000013A70
.text:0000000000013A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A70
.text:0000000000013A70
.text:0000000000013A70                 public cycle_check_init
.text:0000000000013A70 cycle_check_init proc near              ; CODE XREF: setup_dir_isra_4+57↑p
.text:0000000000013A70 ; __unwind {
.text:0000000000013A70                 mov     qword ptr [rdi+10h], 0
.text:0000000000013A78                 mov     dword ptr [rdi+18h], 95F616h
.text:0000000000013A7F                 retn
.text:0000000000013A7F ; } // starts at 13A70
.text:0000000000013A7F cycle_check_init endp
.text:0000000000013A7F
.text:0000000000013A80
.text:0000000000013A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A80
.text:0000000000013A80
.text:0000000000013A80                 public cycle_check
.text:0000000000013A80 cycle_check     proc near               ; CODE XREF: enter_dir_isra_10+88↑p
.text:0000000000013A80 ; __unwind {
.text:0000000000013A80                 cmp     dword ptr [rdi+18h], 95F616h
.text:0000000000013A87                 jnz     short loc_13AE7
.text:0000000000013A89                 mov     rdx, [rdi+10h]
.text:0000000000013A8D                 mov     rcx, [rsi+8]
.text:0000000000013A91                 test    rdx, rdx
.text:0000000000013A94                 jz      short loc_13AB0
.text:0000000000013A96                 cmp     [rdi], rcx
.text:0000000000013A99                 jz      short loc_13AC8
.text:0000000000013A9B
.text:0000000000013A9B loc_13A9B:                              ; CODE XREF: cycle_check+4F↓j
.text:0000000000013A9B                 lea     r8, [rdx+1]
.text:0000000000013A9F                 xor     eax, eax
.text:0000000000013AA1                 test    rdx, r8
.text:0000000000013AA4                 mov     [rdi+10h], r8
.text:0000000000013AA8                 jz      short loc_13AE0
.text:0000000000013AAA                 rep retn
.text:0000000000013AAA ; ---------------------------------------------------------------------------
.text:0000000000013AAC                 align 10h
.text:0000000000013AB0
.text:0000000000013AB0 loc_13AB0:                              ; CODE XREF: cycle_check+14↑j
.text:0000000000013AB0                 mov     qword ptr [rdi+10h], 1
.text:0000000000013AB8
.text:0000000000013AB8 loc_13AB8:                              ; CODE XREF: cycle_check+65↓j
.text:0000000000013AB8                 mov     rax, [rsi]
.text:0000000000013ABB                 mov     [rdi], rcx
.text:0000000000013ABE                 mov     [rdi+8], rax
.text:0000000000013AC2                 xor     eax, eax
.text:0000000000013AC4                 retn
.text:0000000000013AC4 ; ---------------------------------------------------------------------------
.text:0000000000013AC5                 align 8
.text:0000000000013AC8
.text:0000000000013AC8 loc_13AC8:                              ; CODE XREF: cycle_check+19↑j
.text:0000000000013AC8                 mov     rax, [rdi+8]
.text:0000000000013ACC                 cmp     [rsi], rax
.text:0000000000013ACF                 jnz     short loc_13A9B
.text:0000000000013AD1
.text:0000000000013AD1 loc_13AD1:                              ; CODE XREF: cycle_check+63↓j
.text:0000000000013AD1                 mov     eax, 1
.text:0000000000013AD6                 retn
.text:0000000000013AD6 ; ---------------------------------------------------------------------------
.text:0000000000013AD7                 align 20h
.text:0000000000013AE0
.text:0000000000013AE0 loc_13AE0:                              ; CODE XREF: cycle_check+28↑j
.text:0000000000013AE0                 test    r8, r8
.text:0000000000013AE3                 jz      short loc_13AD1
.text:0000000000013AE5                 jmp     short loc_13AB8
.text:0000000000013AE7 ; ---------------------------------------------------------------------------
.text:0000000000013AE7
.text:0000000000013AE7 loc_13AE7:                              ; CODE XREF: cycle_check+7↑j
.text:0000000000013AE7                 lea     rcx, __PRETTY_FUNCTION___3994 ; "cycle_check"
.text:0000000000013AEE                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/cycle-check.c"
.text:0000000000013AF5                 lea     rdi, aStateMagic9827 ; "state->magic == 9827862"
.text:0000000000013AFC                 sub     rsp, 8
.text:0000000000013B00                 mov     edx, 3Ch ; '<'  ; line
.text:0000000000013B05                 call    ___assert_fail
.text:0000000000013B05 ; } // starts at 13A80
.text:0000000000013B05 cycle_check     endp
.text:0000000000013B05
.text:0000000000013B05 ; ---------------------------------------------------------------------------
.text:0000000000013B0A                 align 10h
.text:0000000000013B10
.text:0000000000013B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000013B10
.text:0000000000013B10
.text:0000000000013B10                 public opendir_safer
.text:0000000000013B10 opendir_safer   proc near               ; CODE XREF: savedir+6↑p
.text:0000000000013B10 ; __unwind {
.text:0000000000013B10                 push    r14
.text:0000000000013B12                 push    r13
.text:0000000000013B14                 push    r12
.text:0000000000013B16                 push    rbp
.text:0000000000013B17                 push    rbx             ; char
.text:0000000000013B18                 call    _opendir
.text:0000000000013B1D                 test    rax, rax
.text:0000000000013B20                 mov     rbx, rax
.text:0000000000013B23                 jz      short loc_13B32
.text:0000000000013B25                 mov     rdi, rax        ; dirp
.text:0000000000013B28                 call    _dirfd
.text:0000000000013B2D                 cmp     eax, 2
.text:0000000000013B30                 jbe     short loc_13B40
.text:0000000000013B32
.text:0000000000013B32 loc_13B32:                              ; CODE XREF: opendir_safer+13↑j
.text:0000000000013B32                 mov     rax, rbx
.text:0000000000013B35                 pop     rbx
.text:0000000000013B36                 pop     rbp
.text:0000000000013B37                 pop     r12
.text:0000000000013B39                 pop     r13
.text:0000000000013B3B                 pop     r14
.text:0000000000013B3D                 retn
.text:0000000000013B3D ; ---------------------------------------------------------------------------
.text:0000000000013B3E                 align 20h
.text:0000000000013B40
.text:0000000000013B40 loc_13B40:                              ; CODE XREF: opendir_safer+20↑j
.text:0000000000013B40                 mov     edi, eax        ; fd
.text:0000000000013B42                 mov     edx, 3
.text:0000000000013B47                 mov     esi, 406h
.text:0000000000013B4C                 xor     eax, eax
.text:0000000000013B4E                 call    rpl_fcntl
.text:0000000000013B53                 mov     r12d, eax
.text:0000000000013B56                 call    ___errno_location
.text:0000000000013B5B                 test    r12d, r12d
.text:0000000000013B5E                 mov     rbp, rax
.text:0000000000013B61                 jns     short loc_13B88
.text:0000000000013B63                 mov     r14d, [rax]
.text:0000000000013B66                 xor     r13d, r13d
.text:0000000000013B69
.text:0000000000013B69 loc_13B69:                              ; CODE XREF: opendir_safer+8A↓j
.text:0000000000013B69                                         ; opendir_safer+94↓j
.text:0000000000013B69                 mov     rdi, rbx        ; dirp
.text:0000000000013B6C                 mov     rbx, r13
.text:0000000000013B6F                 call    _closedir
.text:0000000000013B74                 mov     [rbp+0], r14d
.text:0000000000013B78                 mov     rax, rbx
.text:0000000000013B7B                 pop     rbx
.text:0000000000013B7C                 pop     rbp
.text:0000000000013B7D                 pop     r12
.text:0000000000013B7F                 pop     r13
.text:0000000000013B81                 pop     r14
.text:0000000000013B83                 retn
.text:0000000000013B83 ; ---------------------------------------------------------------------------
.text:0000000000013B84                 align 8
.text:0000000000013B88
.text:0000000000013B88 loc_13B88:                              ; CODE XREF: opendir_safer+51↑j
.text:0000000000013B88                 mov     edi, r12d       ; fd
.text:0000000000013B8B                 call    _fdopendir
.text:0000000000013B90                 test    rax, rax
.text:0000000000013B93                 mov     r13, rax
.text:0000000000013B96                 mov     r14d, [rbp+0]
.text:0000000000013B9A                 jnz     short loc_13B69
.text:0000000000013B9C                 mov     edi, r12d       ; fd
.text:0000000000013B9F                 call    _close
.text:0000000000013BA4                 jmp     short loc_13B69
.text:0000000000013BA4 ; } // starts at 13B10
.text:0000000000013BA4 opendir_safer   endp
.text:0000000000013BA4
.text:0000000000013BA4 ; ---------------------------------------------------------------------------
.text:0000000000013BA6                 align 10h
.text:0000000000013BB0
.text:0000000000013BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013BB0
.text:0000000000013BB0
.text:0000000000013BB0 ; __int64 __fastcall gettime(struct timespec *tp)
.text:0000000000013BB0                 public gettime
.text:0000000000013BB0 gettime         proc near               ; CODE XREF: update_timespec+4C↑p
.text:0000000000013BB0                                         ; update_timespec+B0↑p
.text:0000000000013BB0 ; __unwind {
.text:0000000000013BB0                 mov     rsi, rdi        ; tp
.text:0000000000013BB3                 xor     edi, edi        ; clock_id
.text:0000000000013BB5                 jmp     _clock_gettime
.text:0000000000013BB5 ; } // starts at 13BB0
.text:0000000000013BB5 gettime         endp
.text:0000000000013BB5
.text:0000000000013BB5 ; ---------------------------------------------------------------------------
.text:0000000000013BBA                 align 20h
.text:0000000000013BC0
.text:0000000000013BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013BC0
.text:0000000000013BC0
.text:0000000000013BC0                 public current_timespec
.text:0000000000013BC0 current_timespec proc near
.text:0000000000013BC0
.text:0000000000013BC0 var_28          = qword ptr -28h
.text:0000000000013BC0 var_20          = qword ptr -20h
.text:0000000000013BC0 var_10          = qword ptr -10h
.text:0000000000013BC0
.text:0000000000013BC0 ; __unwind {
.text:0000000000013BC0                 sub     rsp, 28h
.text:0000000000013BC4                 xor     edi, edi        ; clock_id
.text:0000000000013BC6                 mov     rsi, rsp        ; tp
.text:0000000000013BC9                 mov     rax, fs:28h
.text:0000000000013BD2                 mov     [rsp+28h+var_10], rax
.text:0000000000013BD7                 xor     eax, eax
.text:0000000000013BD9                 call    _clock_gettime
.text:0000000000013BDE                 mov     rcx, [rsp+28h+var_10]
.text:0000000000013BE3                 xor     rcx, fs:28h
.text:0000000000013BEC                 mov     rax, [rsp+28h+var_28]
.text:0000000000013BF0                 mov     rdx, [rsp+28h+var_20]
.text:0000000000013BF5                 jnz     short loc_13BFC
.text:0000000000013BF7                 add     rsp, 28h
.text:0000000000013BFB                 retn
.text:0000000000013BFC ; ---------------------------------------------------------------------------
.text:0000000000013BFC
.text:0000000000013BFC loc_13BFC:                              ; CODE XREF: current_timespec+35↑j
.text:0000000000013BFC                 call    ___stack_chk_fail
.text:0000000000013BFC ; } // starts at 13BC0
.text:0000000000013BFC current_timespec endp
.text:0000000000013BFC
.text:0000000000013BFC ; ---------------------------------------------------------------------------
.text:0000000000013C01                 align 10h
.text:0000000000013C10
.text:0000000000013C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000013C10
.text:0000000000013C10
.text:0000000000013C10                 public hard_locale
.text:0000000000013C10 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000013C10 ; __unwind {
.text:0000000000013C10                 sub     rsp, 8
.text:0000000000013C14                 xor     esi, esi        ; locale
.text:0000000000013C16                 call    _setlocale
.text:0000000000013C1B                 mov     rdx, rax
.text:0000000000013C1E                 mov     eax, 1
.text:0000000000013C23                 test    rdx, rdx
.text:0000000000013C26                 jz      short loc_13C45
.text:0000000000013C28                 lea     rdi, aC         ; "C"
.text:0000000000013C2F                 mov     ecx, 2
.text:0000000000013C34                 mov     rsi, rdx
.text:0000000000013C37                 repe cmpsb
.text:0000000000013C39                 setnbe  cl
.text:0000000000013C3C                 sbb     cl, 0
.text:0000000000013C3F                 xor     eax, eax
.text:0000000000013C41                 test    cl, cl
.text:0000000000013C43                 jnz     short loc_13C50
.text:0000000000013C45
.text:0000000000013C45 loc_13C45:                              ; CODE XREF: hard_locale+16↑j
.text:0000000000013C45                 add     rsp, 8
.text:0000000000013C49                 retn
.text:0000000000013C49 ; ---------------------------------------------------------------------------
.text:0000000000013C4A                 align 10h
.text:0000000000013C50
.text:0000000000013C50 loc_13C50:                              ; CODE XREF: hard_locale+33↑j
.text:0000000000013C50                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000013C57                 mov     ecx, 6
.text:0000000000013C5C                 mov     rsi, rdx
.text:0000000000013C5F                 repe cmpsb
.text:0000000000013C61                 setnbe  al
.text:0000000000013C64                 sbb     al, 0
.text:0000000000013C66                 test    al, al
.text:0000000000013C68                 setnz   al
.text:0000000000013C6B                 add     rsp, 8
.text:0000000000013C6F                 retn
.text:0000000000013C6F ; } // starts at 13C10
.text:0000000000013C6F hard_locale     endp
.text:0000000000013C6F
.text:0000000000013C70
.text:0000000000013C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000013C70
.text:0000000000013C70 ; Attributes: info_from_lumina
.text:0000000000013C70
.text:0000000000013C70 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:0000000000013C70                 public hash_pjw
.text:0000000000013C70 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:0000000000013C70 ; __unwind {
.text:0000000000013C70                 movsx   rcx, byte ptr [rdi]
.text:0000000000013C74                 test    cl, cl
.text:0000000000013C76                 jz      short loc_13CA0
.text:0000000000013C78                 xor     eax, eax
.text:0000000000013C7A                 nop     word ptr [rax+rax+00h]
.text:0000000000013C80
.text:0000000000013C80 loc_13C80:                              ; CODE XREF: hash_pjw+21↓j
.text:0000000000013C80                 rol     rax, 9
.text:0000000000013C84                 add     rdi, 1
.text:0000000000013C88                 add     rax, rcx
.text:0000000000013C8B                 movsx   rcx, byte ptr [rdi]
.text:0000000000013C8F                 test    cl, cl
.text:0000000000013C91                 jnz     short loc_13C80
.text:0000000000013C93                 xor     edx, edx
.text:0000000000013C95                 div     rsi
.text:0000000000013C98                 mov     rax, rdx
.text:0000000000013C9B                 retn
.text:0000000000013C9B ; ---------------------------------------------------------------------------
.text:0000000000013C9C                 align 20h
.text:0000000000013CA0
.text:0000000000013CA0 loc_13CA0:                              ; CODE XREF: hash_pjw+6↑j
.text:0000000000013CA0                 xor     edx, edx
.text:0000000000013CA2                 mov     rax, rdx
.text:0000000000013CA5                 retn
.text:0000000000013CA5 ; } // starts at 13C70
.text:0000000000013CA5 hash_pjw        endp
.text:0000000000013CA5
.text:0000000000013CA5 ; ---------------------------------------------------------------------------
.text:0000000000013CA6                 align 10h
.text:0000000000013CB0
.text:0000000000013CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CB0
.text:0000000000013CB0
.text:0000000000013CB0                 public i_ring_init
.text:0000000000013CB0 i_ring_init     proc near               ; CODE XREF: rpl_fts_open+2A9↑p
.text:0000000000013CB0 ; __unwind {
.text:0000000000013CB0                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000013CB4                 mov     qword ptr [rdi+14h], 0
.text:0000000000013CBC                 mov     [rdi], esi
.text:0000000000013CBE                 mov     [rdi+4], esi
.text:0000000000013CC1                 mov     [rdi+8], esi
.text:0000000000013CC4                 mov     [rdi+0Ch], esi
.text:0000000000013CC7                 mov     [rdi+10h], esi
.text:0000000000013CCA                 retn
.text:0000000000013CCA ; } // starts at 13CB0
.text:0000000000013CCA i_ring_init     endp
.text:0000000000013CCA
.text:0000000000013CCA ; ---------------------------------------------------------------------------
.text:0000000000013CCB                 align 10h
.text:0000000000013CD0
.text:0000000000013CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CD0
.text:0000000000013CD0
.text:0000000000013CD0                 public i_ring_empty
.text:0000000000013CD0 i_ring_empty    proc near               ; CODE XREF: fd_ring_clear+1F↑p
.text:0000000000013CD0                                         ; fts_safe_changedir+1C7↑p
.text:0000000000013CD0 ; __unwind {
.text:0000000000013CD0                 movzx   eax, byte ptr [rdi+1Ch]
.text:0000000000013CD4                 retn
.text:0000000000013CD4 ; } // starts at 13CD0
.text:0000000000013CD4 i_ring_empty    endp
.text:0000000000013CD4
.text:0000000000013CD4 ; ---------------------------------------------------------------------------
.text:0000000000013CD5                 align 20h
.text:0000000000013CE0
.text:0000000000013CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CE0
.text:0000000000013CE0
.text:0000000000013CE0                 public i_ring_push
.text:0000000000013CE0 i_ring_push     proc near               ; CODE XREF: cwd_advance_fd+34↑p
.text:0000000000013CE0 ; __unwind {
.text:0000000000013CE0                 movzx   edx, byte ptr [rdi+1Ch]
.text:0000000000013CE4                 mov     ecx, [rdi+14h]
.text:0000000000013CE7                 xor     edx, 1
.text:0000000000013CEA                 movzx   edx, dl
.text:0000000000013CED                 add     ecx, edx
.text:0000000000013CEF                 and     ecx, 3
.text:0000000000013CF2                 mov     eax, ecx
.text:0000000000013CF4                 lea     r8, [rdi+rax*4]
.text:0000000000013CF8                 mov     eax, [r8]
.text:0000000000013CFB                 mov     [r8], esi
.text:0000000000013CFE                 mov     esi, [rdi+18h]
.text:0000000000013D01                 mov     [rdi+14h], ecx
.text:0000000000013D04                 cmp     esi, ecx
.text:0000000000013D06                 jnz     short loc_13D10
.text:0000000000013D08                 add     edx, esi
.text:0000000000013D0A                 and     edx, 3
.text:0000000000013D0D                 mov     [rdi+18h], edx
.text:0000000000013D10
.text:0000000000013D10 loc_13D10:                              ; CODE XREF: i_ring_push+26↑j
.text:0000000000013D10                 mov     byte ptr [rdi+1Ch], 0
.text:0000000000013D14                 retn
.text:0000000000013D14 ; } // starts at 13CE0
.text:0000000000013D14 i_ring_push     endp
.text:0000000000013D14
.text:0000000000013D14 ; ---------------------------------------------------------------------------
.text:0000000000013D15                 align 20h
.text:0000000000013D20
.text:0000000000013D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D20
.text:0000000000013D20
.text:0000000000013D20                 public i_ring_pop
.text:0000000000013D20 i_ring_pop      proc near               ; CODE XREF: fd_ring_clear+13↑p
.text:0000000000013D20                                         ; fts_safe_changedir+1DB↑p
.text:0000000000013D20 ; __unwind {
.text:0000000000013D20                 cmp     byte ptr [rdi+1Ch], 0
.text:0000000000013D24                 jnz     short loc_13D55
.text:0000000000013D26                 mov     eax, [rdi+14h]
.text:0000000000013D29                 mov     esi, [rdi+10h]
.text:0000000000013D2C                 lea     rcx, [rdi+rax*4]
.text:0000000000013D30                 mov     rdx, rax
.text:0000000000013D33                 mov     eax, [rcx]
.text:0000000000013D35                 mov     [rcx], esi
.text:0000000000013D37                 cmp     edx, [rdi+18h]
.text:0000000000013D3A                 jz      short loc_13D50
.text:0000000000013D3C                 add     edx, 3
.text:0000000000013D3F                 and     edx, 3
.text:0000000000013D42                 mov     [rdi+14h], edx
.text:0000000000013D45                 retn
.text:0000000000013D45 ; ---------------------------------------------------------------------------
.text:0000000000013D46                 align 10h
.text:0000000000013D50
.text:0000000000013D50 loc_13D50:                              ; CODE XREF: i_ring_pop+1A↑j
.text:0000000000013D50                 mov     byte ptr [rdi+1Ch], 1
.text:0000000000013D54                 retn
.text:0000000000013D55 ; ---------------------------------------------------------------------------
.text:0000000000013D55
.text:0000000000013D55 loc_13D55:                              ; CODE XREF: i_ring_pop+4↑j
.text:0000000000013D55                 sub     rsp, 8
.text:0000000000013D59                 call    _abort
.text:0000000000013D59 ; } // starts at 13D20
.text:0000000000013D59 i_ring_pop      endp
.text:0000000000013D59
.text:0000000000013D59 ; ---------------------------------------------------------------------------
.text:0000000000013D5E                 align 20h
.text:0000000000013D60
.text:0000000000013D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D60
.text:0000000000013D60
.text:0000000000013D60                 public locale_charset
.text:0000000000013D60 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000013D60 ; __unwind {
.text:0000000000013D60                 sub     rsp, 8
.text:0000000000013D64                 mov     edi, 0Eh        ; item
.text:0000000000013D69                 call    _nl_langinfo
.text:0000000000013D6E                 test    rax, rax
.text:0000000000013D71                 jz      short loc_13D90
.text:0000000000013D73                 cmp     byte ptr [rax], 0
.text:0000000000013D76                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000013D7D                 cmovz   rax, rdx
.text:0000000000013D81                 add     rsp, 8
.text:0000000000013D85                 retn
.text:0000000000013D85 ; ---------------------------------------------------------------------------
.text:0000000000013D86                 align 10h
.text:0000000000013D90
.text:0000000000013D90 loc_13D90:                              ; CODE XREF: locale_charset+11↑j
.text:0000000000013D90                 lea     rax, aAscii     ; "ASCII"
.text:0000000000013D97                 add     rsp, 8
.text:0000000000013D9B                 retn
.text:0000000000013D9B ; } // starts at 13D60
.text:0000000000013D9B locale_charset  endp
.text:0000000000013D9B
.text:0000000000013D9B ; ---------------------------------------------------------------------------
.text:0000000000013D9C                 align 20h
.text:0000000000013DA0
.text:0000000000013DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013DA0
.text:0000000000013DA0
.text:0000000000013DA0                 public openat_safer
.text:0000000000013DA0 openat_safer    proc near               ; CODE XREF: opendirat+15↑p
.text:0000000000013DA0                                         ; diropen_isra_6+35↑j
.text:0000000000013DA0
.text:0000000000013DA0 var_58          = dword ptr -58h
.text:0000000000013DA0 var_50          = qword ptr -50h
.text:0000000000013DA0 var_48          = qword ptr -48h
.text:0000000000013DA0 var_40          = qword ptr -40h
.text:0000000000013DA0 var_38          = byte ptr -38h
.text:0000000000013DA0 var_20          = qword ptr -20h
.text:0000000000013DA0 arg_0           = byte ptr  8
.text:0000000000013DA0
.text:0000000000013DA0 ; __unwind {
.text:0000000000013DA0                 sub     rsp, 58h
.text:0000000000013DA4                 mov     [rsp+58h+var_20], rcx
.text:0000000000013DA9                 xor     ecx, ecx
.text:0000000000013DAB                 mov     rax, fs:28h
.text:0000000000013DB4                 mov     [rsp+58h+var_40], rax
.text:0000000000013DB9                 xor     eax, eax
.text:0000000000013DBB                 test    dl, 40h
.text:0000000000013DBE                 jnz     short loc_13DE8
.text:0000000000013DC0
.text:0000000000013DC0 loc_13DC0:                              ; CODE XREF: openat_safer+67↓j
.text:0000000000013DC0                 xor     eax, eax
.text:0000000000013DC2                 call    _openat
.text:0000000000013DC7                 mov     edi, eax        ; fd
.text:0000000000013DC9                 call    fd_safer_flag
.text:0000000000013DCE                 mov     rsi, [rsp+58h+var_40]
.text:0000000000013DD3                 xor     rsi, fs:28h
.text:0000000000013DDC                 jnz     short loc_13E09
.text:0000000000013DDE                 add     rsp, 58h
.text:0000000000013DE2                 retn
.text:0000000000013DE2 ; ---------------------------------------------------------------------------
.text:0000000000013DE3                 align 8
.text:0000000000013DE8
.text:0000000000013DE8 loc_13DE8:                              ; CODE XREF: openat_safer+1E↑j
.text:0000000000013DE8                 lea     rax, [rsp+58h+arg_0]
.text:0000000000013DED                 mov     [rsp+58h+var_58], 18h
.text:0000000000013DF4                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:0000000000013DF8                 mov     [rsp+58h+var_50], rax
.text:0000000000013DFD                 lea     rax, [rsp+58h+var_38]
.text:0000000000013E02                 mov     [rsp+58h+var_48], rax
.text:0000000000013E07                 jmp     short loc_13DC0
.text:0000000000013E09 ; ---------------------------------------------------------------------------
.text:0000000000013E09
.text:0000000000013E09 loc_13E09:                              ; CODE XREF: openat_safer+3C↑j
.text:0000000000013E09                 call    ___stack_chk_fail
.text:0000000000013E09 ; } // starts at 13DA0
.text:0000000000013E09 openat_safer    endp
.text:0000000000013E09
.text:0000000000013E09 ; ---------------------------------------------------------------------------
.text:0000000000013E0E                 align 10h
.text:0000000000013E10
.text:0000000000013E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000013E10
.text:0000000000013E10
.text:0000000000013E10                 public randint_new
.text:0000000000013E10 randint_new     proc near
.text:0000000000013E10 ; __unwind {
.text:0000000000013E10                 push    rbx
.text:0000000000013E11                 mov     rbx, rdi
.text:0000000000013E14                 mov     edi, 18h
.text:0000000000013E19                 call    xmalloc
.text:0000000000013E1E                 mov     [rax], rbx
.text:0000000000013E21                 mov     qword ptr [rax+10h], 0
.text:0000000000013E29                 mov     qword ptr [rax+8], 0
.text:0000000000013E31                 pop     rbx
.text:0000000000013E32                 retn
.text:0000000000013E32 ; } // starts at 13E10
.text:0000000000013E32 randint_new     endp
.text:0000000000013E32
.text:0000000000013E32 ; ---------------------------------------------------------------------------
.text:0000000000013E33                 align 20h
.text:0000000000013E40
.text:0000000000013E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000013E40
.text:0000000000013E40
.text:0000000000013E40                 public randint_all_new
.text:0000000000013E40 randint_all_new proc near               ; CODE XREF: try_tempname_len+7B↑p
.text:0000000000013E40 ; __unwind {
.text:0000000000013E40                 push    rbx
.text:0000000000013E41                 call    randread_new
.text:0000000000013E46                 test    rax, rax
.text:0000000000013E49                 jz      short loc_13E70
.text:0000000000013E4B                 mov     rbx, rax
.text:0000000000013E4E                 mov     edi, 18h
.text:0000000000013E53                 call    xmalloc
.text:0000000000013E58                 mov     [rax], rbx
.text:0000000000013E5B                 mov     qword ptr [rax+10h], 0
.text:0000000000013E63                 mov     qword ptr [rax+8], 0
.text:0000000000013E6B                 pop     rbx
.text:0000000000013E6C                 retn
.text:0000000000013E6C ; ---------------------------------------------------------------------------
.text:0000000000013E6D                 align 10h
.text:0000000000013E70
.text:0000000000013E70 loc_13E70:                              ; CODE XREF: randint_all_new+9↑j
.text:0000000000013E70                 xor     eax, eax
.text:0000000000013E72                 pop     rbx
.text:0000000000013E73                 retn
.text:0000000000013E73 ; } // starts at 13E40
.text:0000000000013E73 randint_all_new endp
.text:0000000000013E73
.text:0000000000013E73 ; ---------------------------------------------------------------------------
.text:0000000000013E74                 align 20h
.text:0000000000013E80
.text:0000000000013E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000013E80
.text:0000000000013E80
.text:0000000000013E80                 public randint_get_source
.text:0000000000013E80 randint_get_source proc near
.text:0000000000013E80 ; __unwind {
.text:0000000000013E80                 mov     rax, [rdi]
.text:0000000000013E83                 retn
.text:0000000000013E83 ; } // starts at 13E80
.text:0000000000013E83 randint_get_source endp
.text:0000000000013E83
.text:0000000000013E83 ; ---------------------------------------------------------------------------
.text:0000000000013E84                 align 10h
.text:0000000000013E90
.text:0000000000013E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000013E90
.text:0000000000013E90
.text:0000000000013E90                 public randint_genmax
.text:0000000000013E90 randint_genmax  proc near               ; CODE XREF: try_tempname_len+C4↑p
.text:0000000000013E90
.text:0000000000013E90 var_50          = qword ptr -50h
.text:0000000000013E90 var_48          = byte ptr -48h
.text:0000000000013E90 var_40          = qword ptr -40h
.text:0000000000013E90
.text:0000000000013E90 ; __unwind {
.text:0000000000013E90                 push    r15
.text:0000000000013E92                 push    r14
.text:0000000000013E94                 lea     r15, [rsi+1]
.text:0000000000013E98                 push    r13
.text:0000000000013E9A                 push    r12
.text:0000000000013E9C                 mov     r13, rdi
.text:0000000000013E9F                 push    rbp
.text:0000000000013EA0                 push    rbx
.text:0000000000013EA1                 mov     r14, rsi
.text:0000000000013EA4                 sub     rsp, 28h
.text:0000000000013EA8                 mov     rbp, [rdi+8]
.text:0000000000013EAC                 mov     rbx, [rdi+10h]
.text:0000000000013EB0                 mov     rax, fs:28h
.text:0000000000013EB9                 mov     [rsp+58h+var_40], rax
.text:0000000000013EBE                 xor     eax, eax
.text:0000000000013EC0                 mov     rax, [rdi]
.text:0000000000013EC3                 lea     r12, [rsp+58h+var_48]
.text:0000000000013EC8                 mov     [rsp+58h+var_50], rax
.text:0000000000013ECD                 jmp     short loc_13F05
.text:0000000000013ECD ; ---------------------------------------------------------------------------
.text:0000000000013ECF                 align 10h
.text:0000000000013ED0
.text:0000000000013ED0 loc_13ED0:                              ; CODE XREF: randint_genmax+78↓j
.text:0000000000013ED0                 cmp     rbx, r14
.text:0000000000013ED3                 jz      loc_13F5F
.text:0000000000013ED9
.text:0000000000013ED9 loc_13ED9:                              ; CODE XREF: randint_genmax+C9↓j
.text:0000000000013ED9                 mov     rax, rbx
.text:0000000000013EDC                 xor     edx, edx
.text:0000000000013EDE                 sub     rax, r14
.text:0000000000013EE1                 div     r15
.text:0000000000013EE4                 sub     rbx, rdx
.text:0000000000013EE7                 mov     rdi, rdx
.text:0000000000013EEA                 mov     rsi, rax
.text:0000000000013EED                 xor     edx, edx
.text:0000000000013EEF                 mov     rax, rbp
.text:0000000000013EF2                 div     r15
.text:0000000000013EF5                 cmp     rbp, rbx
.text:0000000000013EF8                 jbe     loc_13F98
.text:0000000000013EFE                 lea     rbx, [rdi-1]
.text:0000000000013F02                 mov     rbp, rdx
.text:0000000000013F05
.text:0000000000013F05 loc_13F05:                              ; CODE XREF: randint_genmax+3D↑j
.text:0000000000013F05                 cmp     rbx, r14
.text:0000000000013F08                 jnb     short loc_13ED0
.text:0000000000013F0A                 mov     rax, rbx
.text:0000000000013F0D                 xor     edx, edx
.text:0000000000013F0F                 nop
.text:0000000000013F10
.text:0000000000013F10 loc_13F10:                              ; CODE XREF: randint_genmax+91↓j
.text:0000000000013F10                 shl     rax, 8
.text:0000000000013F14                 add     rdx, 1
.text:0000000000013F18                 add     rax, 0FFh
.text:0000000000013F1E                 cmp     r14, rax
.text:0000000000013F21                 ja      short loc_13F10
.text:0000000000013F23                 mov     rdi, [rsp+58h+var_50]
.text:0000000000013F28                 mov     rsi, r12
.text:0000000000013F2B                 call    randread
.text:0000000000013F30                 mov     rax, r12
.text:0000000000013F33                 nop     dword ptr [rax+rax+00h]
.text:0000000000013F38
.text:0000000000013F38 loc_13F38:                              ; CODE XREF: randint_genmax+C4↓j
.text:0000000000013F38                 movzx   edx, byte ptr [rax]
.text:0000000000013F3B                 shl     rbx, 8
.text:0000000000013F3F                 shl     rbp, 8
.text:0000000000013F43                 add     rbx, 0FFh
.text:0000000000013F4A                 add     rax, 1
.text:0000000000013F4E                 add     rbp, rdx
.text:0000000000013F51                 cmp     r14, rbx
.text:0000000000013F54                 ja      short loc_13F38
.text:0000000000013F56                 cmp     rbx, r14
.text:0000000000013F59                 jnz     loc_13ED9
.text:0000000000013F5F
.text:0000000000013F5F loc_13F5F:                              ; CODE XREF: randint_genmax+43↑j
.text:0000000000013F5F                 mov     qword ptr [r13+10h], 0
.text:0000000000013F67                 mov     qword ptr [r13+8], 0
.text:0000000000013F6F
.text:0000000000013F6F loc_13F6F:                              ; CODE XREF: randint_genmax+113↓j
.text:0000000000013F6F                 mov     rcx, [rsp+58h+var_40]
.text:0000000000013F74                 xor     rcx, fs:28h
.text:0000000000013F7D                 mov     rax, rbp
.text:0000000000013F80                 jnz     short loc_13FA5
.text:0000000000013F82                 add     rsp, 28h
.text:0000000000013F86                 pop     rbx
.text:0000000000013F87                 pop     rbp
.text:0000000000013F88                 pop     r12
.text:0000000000013F8A                 pop     r13
.text:0000000000013F8C                 pop     r14
.text:0000000000013F8E                 pop     r15
.text:0000000000013F90                 retn
.text:0000000000013F90 ; ---------------------------------------------------------------------------
.text:0000000000013F91                 align 8
.text:0000000000013F98
.text:0000000000013F98 loc_13F98:                              ; CODE XREF: randint_genmax+68↑j
.text:0000000000013F98                 mov     [r13+8], rax
.text:0000000000013F9C                 mov     [r13+10h], rsi
.text:0000000000013FA0                 mov     rbp, rdx
.text:0000000000013FA3                 jmp     short loc_13F6F
.text:0000000000013FA5 ; ---------------------------------------------------------------------------
.text:0000000000013FA5
.text:0000000000013FA5 loc_13FA5:                              ; CODE XREF: randint_genmax+F0↑j
.text:0000000000013FA5                 call    ___stack_chk_fail
.text:0000000000013FA5 ; } // starts at 13E90
.text:0000000000013FA5 randint_genmax  endp
.text:0000000000013FA5
.text:0000000000013FA5 ; ---------------------------------------------------------------------------
.text:0000000000013FAA                 align 10h
.text:0000000000013FB0
.text:0000000000013FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013FB0
.text:0000000000013FB0
.text:0000000000013FB0 ; __int64 __fastcall randint_free(void *ptr)
.text:0000000000013FB0                 public randint_free
.text:0000000000013FB0 randint_free    proc near
.text:0000000000013FB0 ; __unwind {
.text:0000000000013FB0                 push    rbx
.text:0000000000013FB1                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013FB8                 mov     rbx, rdi
.text:0000000000013FBB                 mov     esi, 18h
.text:0000000000013FC0                 call    ___explicit_bzero_chk
.text:0000000000013FC5                 mov     rdi, rbx        ; ptr
.text:0000000000013FC8                 pop     rbx
.text:0000000000013FC9                 jmp     free
.text:0000000000013FC9 ; } // starts at 13FB0
.text:0000000000013FC9 randint_free    endp
.text:0000000000013FC9
.text:0000000000013FC9 ; ---------------------------------------------------------------------------
.text:0000000000013FCE                 align 10h
.text:0000000000013FD0
.text:0000000000013FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013FD0
.text:0000000000013FD0
.text:0000000000013FD0 ; __int64 __fastcall randint_all_free(void *ptr)
.text:0000000000013FD0                 public randint_all_free
.text:0000000000013FD0 randint_all_free proc near              ; CODE XREF: try_tempname_len+102↑p
.text:0000000000013FD0                                         ; try_tempname_len+130↑p
.text:0000000000013FD0 ; __unwind {
.text:0000000000013FD0                 push    r13
.text:0000000000013FD2                 push    r12
.text:0000000000013FD4                 push    rbp
.text:0000000000013FD5                 push    rbx
.text:0000000000013FD6                 mov     rbx, rdi
.text:0000000000013FD9                 sub     rsp, 8
.text:0000000000013FDD                 mov     rdi, [rdi]      ; ptr
.text:0000000000013FE0                 call    randread_free
.text:0000000000013FE5                 mov     r12d, eax
.text:0000000000013FE8                 call    ___errno_location
.text:0000000000013FED                 mov     r13d, [rax]
.text:0000000000013FF0                 mov     rdi, rbx
.text:0000000000013FF3                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013FFA                 mov     esi, 18h
.text:0000000000013FFF                 mov     rbp, rax
.text:0000000000014002                 call    ___explicit_bzero_chk
.text:0000000000014007                 mov     rdi, rbx        ; ptr
.text:000000000001400A                 call    free
.text:000000000001400F                 mov     [rbp+0], r13d
.text:0000000000014013                 add     rsp, 8
.text:0000000000014017                 mov     eax, r12d
.text:000000000001401A                 pop     rbx
.text:000000000001401B                 pop     rbp
.text:000000000001401C                 pop     r12
.text:000000000001401E                 pop     r13
.text:0000000000014020                 retn
.text:0000000000014020 ; } // starts at 13FD0
.text:0000000000014020 randint_all_free endp
.text:0000000000014020
.text:0000000000014020 ; ---------------------------------------------------------------------------
.text:0000000000014021                 align 10h
.text:0000000000014030
.text:0000000000014030 ; =============== S U B R O U T I N E =======================================
.text:0000000000014030
.text:0000000000014030 ; Attributes: noreturn
.text:0000000000014030
.text:0000000000014030 randread_error  proc near               ; DATA XREF: randread_new+5A↓o
.text:0000000000014030                                         ; randread_new+C4↓o ...
.text:0000000000014030 ; __unwind {
.text:0000000000014030                 push    rbp
.text:0000000000014031                 push    rbx
.text:0000000000014032                 sub     rsp, 8
.text:0000000000014036                 test    rdi, rdi
.text:0000000000014039                 jz      short loc_14078
.text:000000000001403B                 call    quote
.text:0000000000014040                 mov     rbp, rax
.text:0000000000014043                 call    ___errno_location
.text:0000000000014048                 cmp     dword ptr [rax], 0
.text:000000000001404B                 mov     rbx, rax
.text:000000000001404E                 mov     edx, 5          ; category
.text:0000000000014053                 jz      short loc_1407D
.text:0000000000014055                 lea     rsi, aSReadError ; "%s: read error"
.text:000000000001405C                 xor     edi, edi        ; domainname
.text:000000000001405E                 call    _dcgettext
.text:0000000000014063
.text:0000000000014063 loc_14063:                              ; CODE XREF: randread_error+5B↓j
.text:0000000000014063                 mov     edi, cs:exit_failure ; status
.text:0000000000014069                 mov     esi, [rbx]      ; errnum
.text:000000000001406B                 mov     rdx, rax        ; format
.text:000000000001406E                 mov     rcx, rbp
.text:0000000000014071                 xor     eax, eax
.text:0000000000014073                 call    _error
.text:0000000000014078
.text:0000000000014078 loc_14078:                              ; CODE XREF: randread_error+9↑j
.text:0000000000014078                 call    _abort
.text:000000000001407D ; ---------------------------------------------------------------------------
.text:000000000001407D
.text:000000000001407D loc_1407D:                              ; CODE XREF: randread_error+23↑j
.text:000000000001407D                 lea     rsi, aSEndOfFile ; "%s: end of file"
.text:0000000000014084                 xor     edi, edi        ; domainname
.text:0000000000014086                 call    _dcgettext
.text:000000000001408B                 jmp     short loc_14063
.text:000000000001408B ; } // starts at 14030
.text:000000000001408B randread_error  endp
.text:000000000001408B
.text:000000000001408B ; ---------------------------------------------------------------------------
.text:000000000001408D                 align 10h
.text:0000000000014090
.text:0000000000014090 ; =============== S U B R O U T I N E =======================================
.text:0000000000014090
.text:0000000000014090
.text:0000000000014090                 public randread_new
.text:0000000000014090 randread_new    proc near               ; CODE XREF: randint_all_new+1↑p
.text:0000000000014090
.text:0000000000014090 var_68          = qword ptr -68h
.text:0000000000014090 var_60          = qword ptr -60h
.text:0000000000014090 tv              = timeval ptr -58h
.text:0000000000014090 var_40          = qword ptr -40h
.text:0000000000014090
.text:0000000000014090 ; __unwind {
.text:0000000000014090                 push    r15
.text:0000000000014092                 push    r14
.text:0000000000014094                 push    r13
.text:0000000000014096                 push    r12
.text:0000000000014098                 push    rbp
.text:0000000000014099                 push    rbx
.text:000000000001409A                 sub     rsp, 38h
.text:000000000001409E                 mov     rax, fs:28h
.text:00000000000140A7                 mov     [rsp+68h+var_40], rax
.text:00000000000140AC                 xor     eax, eax
.text:00000000000140AE                 test    rsi, rsi
.text:00000000000140B1                 jz      loc_141D8
.text:00000000000140B7                 test    rdi, rdi
.text:00000000000140BA                 mov     r12, rdi
.text:00000000000140BD                 mov     rbp, rsi
.text:00000000000140C0                 jz      short loc_14140
.text:00000000000140C2                 lea     rsi, aRb        ; "rb"
.text:00000000000140C9                 call    fopen_safer
.text:00000000000140CE                 test    rax, rax
.text:00000000000140D1                 mov     r13, rax
.text:00000000000140D4                 jz      loc_142D8
.text:00000000000140DA                 mov     edi, 1038h
.text:00000000000140DF                 call    xmalloc
.text:00000000000140E4                 mov     rbx, rax
.text:00000000000140E7                 mov     [rax], r13
.text:00000000000140EA                 lea     rax, randread_error
.text:00000000000140F1                 cmp     rbp, 1000h
.text:00000000000140F8                 mov     ecx, 1000h
.text:00000000000140FD                 lea     rsi, [rbx+18h]  ; buf
.text:0000000000014101                 cmovbe  rcx, rbp        ; n
.text:0000000000014105                 mov     [rbx+8], rax
.text:0000000000014109                 mov     [rbx+10h], r12
.text:000000000001410D                 xor     edx, edx        ; modes
.text:000000000001410F                 mov     rdi, r13        ; stream
.text:0000000000014112                 call    _setvbuf
.text:0000000000014117
.text:0000000000014117 loc_14117:                              ; CODE XREF: randread_new+13D↓j
.text:0000000000014117                                         ; randread_new+16F↓j ...
.text:0000000000014117                 mov     rdx, [rsp+68h+var_40]
.text:000000000001411C                 xor     rdx, fs:28h
.text:0000000000014125                 mov     rax, rbx
.text:0000000000014128                 jnz     loc_142DF
.text:000000000001412E                 add     rsp, 38h
.text:0000000000014132                 pop     rbx
.text:0000000000014133                 pop     rbp
.text:0000000000014134                 pop     r12
.text:0000000000014136                 pop     r13
.text:0000000000014138                 pop     r14
.text:000000000001413A                 pop     r15
.text:000000000001413C                 retn
.text:000000000001413C ; ---------------------------------------------------------------------------
.text:000000000001413D                 align 20h
.text:0000000000014140
.text:0000000000014140 loc_14140:                              ; CODE XREF: randread_new+30↑j
.text:0000000000014140                 mov     edi, 1038h
.text:0000000000014145                 call    xmalloc
.text:000000000001414A                 mov     rbx, rax
.text:000000000001414D                 mov     qword ptr [rax], 0
.text:0000000000014154                 lea     rax, randread_error
.text:000000000001415B                 lea     rdi, aDevUrandom ; "/dev/urandom"
.text:0000000000014162                 xor     esi, esi        ; oflag
.text:0000000000014164                 mov     qword ptr [rbx+10h], 0
.text:000000000001416C                 mov     [rbx+8], rax
.text:0000000000014170                 mov     qword ptr [rbx+18h], 0
.text:0000000000014178                 xor     eax, eax
.text:000000000001417A                 call    _open
.text:000000000001417F                 test    eax, eax
.text:0000000000014181                 lea     r13, [rbx+20h]
.text:0000000000014185                 mov     r15d, eax
.text:0000000000014188                 js      short loc_14208
.text:000000000001418A                 cmp     rbp, 800h
.text:0000000000014191                 mov     rdx, rbp
.text:0000000000014194                 mov     r14d, 800h
.text:000000000001419A                 cmova   rdx, r14
.text:000000000001419E                 mov     ecx, 1018h
.text:00000000000141A3                 mov     rsi, r13
.text:00000000000141A6                 mov     edi, eax
.text:00000000000141A8                 call    ___read_chk
.text:00000000000141AD                 mov     edi, r15d       ; fd
.text:00000000000141B0                 mov     rbp, rax
.text:00000000000141B3                 call    _close
.text:00000000000141B8                 cmp     rbp, 7FFh
.text:00000000000141BF                 jle     loc_142E4
.text:00000000000141C5
.text:00000000000141C5 loc_141C5:                              ; CODE XREF: randread_new+1F6↓j
.text:00000000000141C5                                         ; randread_new+223↓j ...
.text:00000000000141C5                 mov     rdi, r13
.text:00000000000141C8                 call    isaac_seed
.text:00000000000141CD                 jmp     loc_14117
.text:00000000000141CD ; ---------------------------------------------------------------------------
.text:00000000000141D2                 align 8
.text:00000000000141D8
.text:00000000000141D8 loc_141D8:                              ; CODE XREF: randread_new+21↑j
.text:00000000000141D8                 mov     edi, 1038h
.text:00000000000141DD                 call    xmalloc
.text:00000000000141E2                 mov     rbx, rax
.text:00000000000141E5                 mov     qword ptr [rax], 0
.text:00000000000141EC                 lea     rax, randread_error
.text:00000000000141F3                 mov     qword ptr [rbx+10h], 0
.text:00000000000141FB                 mov     [rbx+8], rax
.text:00000000000141FF                 jmp     loc_14117
.text:00000000000141FF ; ---------------------------------------------------------------------------
.text:0000000000014204                 align 8
.text:0000000000014208
.text:0000000000014208 loc_14208:                              ; CODE XREF: randread_new+F8↑j
.text:0000000000014208                 lea     r12, [rsp+68h+tv]
.text:000000000001420D                 xor     esi, esi        ; tz
.text:000000000001420F                 mov     r14d, 18h
.text:0000000000014215                 mov     rdi, r12        ; tv
.text:0000000000014218                 call    _gettimeofday
.text:000000000001421D                 movdqa  xmm0, xmmword ptr [rsp+68h+tv.tv_sec]
.text:0000000000014223                 movups  xmmword ptr [rbx+20h], xmm0
.text:0000000000014227                 call    _getpid
.text:000000000001422C                 mov     [rbx+30h], eax
.text:000000000001422F                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000014233                 call    _getppid
.text:0000000000014238                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000001423C                 mov     [rbx+34h], eax
.text:000000000001423F
.text:000000000001423F loc_1423F:                              ; CODE XREF: randread_new+324↓j
.text:000000000001423F                 mov     ebp, 800h
.text:0000000000014244                 mov     eax, 4
.text:0000000000014249                 sub     rbp, r14
.text:000000000001424C                 cmp     rbp, 4
.text:0000000000014250                 cmova   rbp, rax
.text:0000000000014254                 call    _getuid
.text:0000000000014259                 test    ebp, ebp
.text:000000000001425B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000001425F                 lea     rcx, [r13+r14+0]
.text:0000000000014264                 mov     esi, ebp
.text:0000000000014266                 jz      short loc_1427C
.text:0000000000014268                 xor     eax, eax
.text:000000000001426A
.text:000000000001426A loc_1426A:                              ; CODE XREF: randread_new+1EA↓j
.text:000000000001426A                 mov     edx, eax
.text:000000000001426C                 add     eax, 1
.text:000000000001426F                 movzx   edi, byte ptr [r12+rdx]
.text:0000000000014274                 cmp     eax, esi
.text:0000000000014276                 mov     [rcx+rdx], dil
.text:000000000001427A                 jb      short loc_1426A
.text:000000000001427C
.text:000000000001427C loc_1427C:                              ; CODE XREF: randread_new+1D6↑j
.text:000000000001427C                 add     rbp, r14
.text:000000000001427F                 cmp     rbp, 7FFh
.text:0000000000014286                 ja      loc_141C5
.text:000000000001428C                 call    _getgid
.text:0000000000014291                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000014295                 mov     eax, 800h
.text:000000000001429A                 mov     edx, 4
.text:000000000001429F                 sub     rax, rbp
.text:00000000000142A2                 lea     rcx, [r13+rbp+0]
.text:00000000000142A7                 cmp     rax, 4
.text:00000000000142AB                 cmova   rax, rdx
.text:00000000000142AF                 test    eax, eax
.text:00000000000142B1                 mov     esi, eax
.text:00000000000142B3                 jz      loc_141C5
.text:00000000000142B9                 xor     eax, eax
.text:00000000000142BB
.text:00000000000142BB loc_142BB:                              ; CODE XREF: randread_new+23B↓j
.text:00000000000142BB                 mov     edx, eax
.text:00000000000142BD                 add     eax, 1
.text:00000000000142C0                 movzx   edi, byte ptr [r12+rdx]
.text:00000000000142C5                 cmp     eax, esi
.text:00000000000142C7                 mov     [rcx+rdx], dil
.text:00000000000142CB                 jb      short loc_142BB
.text:00000000000142CD                 jmp     loc_141C5
.text:00000000000142CD ; ---------------------------------------------------------------------------
.text:00000000000142D2                 align 8
.text:00000000000142D8
.text:00000000000142D8 loc_142D8:                              ; CODE XREF: randread_new+44↑j
.text:00000000000142D8                 xor     ebx, ebx
.text:00000000000142DA                 jmp     loc_14117
.text:00000000000142DF ; ---------------------------------------------------------------------------
.text:00000000000142DF
.text:00000000000142DF loc_142DF:                              ; CODE XREF: randread_new+98↑j
.text:00000000000142DF                 call    ___stack_chk_fail
.text:00000000000142E4 ; ---------------------------------------------------------------------------
.text:00000000000142E4
.text:00000000000142E4 loc_142E4:                              ; CODE XREF: randread_new+12F↑j
.text:00000000000142E4                 test    rbp, rbp
.text:00000000000142E7                 mov     r15, r14
.text:00000000000142EA                 mov     eax, 10h
.text:00000000000142EF                 cmovs   rbp, r12
.text:00000000000142F3                 lea     r12, [rsp+68h+tv]
.text:00000000000142F8                 sub     r15, rbp
.text:00000000000142FB                 cmp     r15, 10h
.text:00000000000142FF                 mov     rdi, r12        ; tv
.text:0000000000014302                 cmova   r15, rax
.text:0000000000014306                 xor     esi, esi        ; tz
.text:0000000000014308                 call    _gettimeofday
.text:000000000001430D                 lea     rax, [r13+rbp+0]
.text:0000000000014312                 add     rbp, r15
.text:0000000000014315                 mov     ecx, r15d
.text:0000000000014318                 cmp     rbp, 7FFh
.text:000000000001431F                 mov     rsi, r12
.text:0000000000014322                 mov     rdi, rax
.text:0000000000014325                 rep movsb
.text:0000000000014327                 ja      loc_141C5
.text:000000000001432D                 mov     r15, r14
.text:0000000000014330                 mov     r8d, 4
.text:0000000000014336                 sub     r15, rbp
.text:0000000000014339                 mov     [rsp+68h+var_60], r8
.text:000000000001433E                 cmp     r15, 4
.text:0000000000014342                 cmova   r15, r8
.text:0000000000014346                 lea     rdx, [rbp+r15+0]
.text:000000000001434B                 add     rbp, r13
.text:000000000001434E                 mov     [rsp+68h+var_68], rdx
.text:0000000000014352                 call    _getpid
.text:0000000000014357                 mov     rdx, [rsp+68h+var_68]
.text:000000000001435B                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000001435F                 mov     ecx, r15d
.text:0000000000014362                 mov     rdi, rbp
.text:0000000000014365                 mov     rsi, r12
.text:0000000000014368                 mov     r8, [rsp+68h+var_60]
.text:000000000001436D                 rep movsb
.text:000000000001436F                 cmp     rdx, 7FFh
.text:0000000000014376                 jg      loc_141C5
.text:000000000001437C                 sub     r14, rdx
.text:000000000001437F                 cmp     r14, 4
.text:0000000000014383                 cmova   r14, r8
.text:0000000000014387                 call    _getppid
.text:000000000001438C                 mov     rdx, [rsp+68h+var_68]
.text:0000000000014390                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:0000000000014394                 mov     ecx, r14d
.text:0000000000014397                 mov     rsi, r12
.text:000000000001439A                 lea     rax, [r13+rdx+0]
.text:000000000001439F                 add     r14, rdx
.text:00000000000143A2                 cmp     r14, 7FFh
.text:00000000000143A9                 mov     rdi, rax
.text:00000000000143AC                 rep movsb
.text:00000000000143AE                 ja      loc_141C5
.text:00000000000143B4                 jmp     loc_1423F
.text:00000000000143B4 ; } // starts at 14090
.text:00000000000143B4 randread_new    endp
.text:00000000000143B4
.text:00000000000143B4 ; ---------------------------------------------------------------------------
.text:00000000000143B9                 align 20h
.text:00000000000143C0
.text:00000000000143C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000143C0
.text:00000000000143C0
.text:00000000000143C0                 public randread_set_handler
.text:00000000000143C0 randread_set_handler proc near
.text:00000000000143C0 ; __unwind {
.text:00000000000143C0                 mov     [rdi+8], rsi
.text:00000000000143C4                 retn
.text:00000000000143C4 ; } // starts at 143C0
.text:00000000000143C4 randread_set_handler endp
.text:00000000000143C4
.text:00000000000143C4 ; ---------------------------------------------------------------------------
.text:00000000000143C5                 align 10h
.text:00000000000143D0
.text:00000000000143D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000143D0
.text:00000000000143D0
.text:00000000000143D0                 public randread_set_handler_arg
.text:00000000000143D0 randread_set_handler_arg proc near
.text:00000000000143D0 ; __unwind {
.text:00000000000143D0                 mov     [rdi+10h], rsi
.text:00000000000143D4                 retn
.text:00000000000143D4 ; } // starts at 143D0
.text:00000000000143D4 randread_set_handler_arg endp
.text:00000000000143D4
.text:00000000000143D4 ; ---------------------------------------------------------------------------
.text:00000000000143D5                 align 20h
.text:00000000000143E0
.text:00000000000143E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000143E0
.text:00000000000143E0
.text:00000000000143E0                 public randread
.text:00000000000143E0 randread        proc near               ; CODE XREF: randint_genmax+9B↑p
.text:00000000000143E0
.text:00000000000143E0 src             = qword ptr -40h
.text:00000000000143E0
.text:00000000000143E0 ; __unwind {
.text:00000000000143E0                 push    r15
.text:00000000000143E2                 push    r14
.text:00000000000143E4                 push    r13
.text:00000000000143E6                 push    r12
.text:00000000000143E8                 mov     r12, rdi
.text:00000000000143EB                 push    rbp
.text:00000000000143EC                 push    rbx
.text:00000000000143ED                 mov     rbp, rdx
.text:00000000000143F0                 mov     rbx, rsi
.text:00000000000143F3                 sub     rsp, 18h
.text:00000000000143F7                 mov     rcx, [rdi]
.text:00000000000143FA                 test    rcx, rcx
.text:00000000000143FD                 mov     [rsp+48h+src], rcx
.text:0000000000014402                 jz      short loc_14468
.text:0000000000014404                 call    ___errno_location
.text:0000000000014409                 mov     rcx, [rsp+48h+src]
.text:000000000001440E                 mov     r13, rax
.text:0000000000014411                 jmp     short loc_14436
.text:0000000000014411 ; ---------------------------------------------------------------------------
.text:0000000000014413                 align 8
.text:0000000000014418
.text:0000000000014418 loc_14418:                              ; CODE XREF: randread+70↓j
.text:0000000000014418                 mov     rax, [r12]
.text:000000000001441C                 mov     rdi, [r12+10h]
.text:0000000000014421                 mov     eax, [rax]
.text:0000000000014423                 and     eax, 20h
.text:0000000000014426                 cmovnz  eax, edx
.text:0000000000014429                 mov     [r13+0], eax
.text:000000000001442D                 call    qword ptr [r12+8]
.text:0000000000014432                 mov     rcx, [r12]      ; stream
.text:0000000000014436
.text:0000000000014436 loc_14436:                              ; CODE XREF: randread+31↑j
.text:0000000000014436                 mov     rdx, rbp        ; n
.text:0000000000014439                 mov     rdi, rbx        ; ptr
.text:000000000001443C                 mov     esi, 1          ; size
.text:0000000000014441                 call    _fread_unlocked
.text:0000000000014446                 add     rbx, rax
.text:0000000000014449                 sub     rbp, rax
.text:000000000001444C                 mov     edx, [r13+0]
.text:0000000000014450                 jnz     short loc_14418
.text:0000000000014452
.text:0000000000014452 loc_14452:                              ; CODE XREF: randread+16E↓j
.text:0000000000014452                 add     rsp, 18h
.text:0000000000014456                 pop     rbx
.text:0000000000014457                 pop     rbp
.text:0000000000014458                 pop     r12
.text:000000000001445A                 pop     r13
.text:000000000001445C                 pop     r14
.text:000000000001445E                 pop     r15
.text:0000000000014460                 retn
.text:0000000000014460 ; ---------------------------------------------------------------------------
.text:0000000000014461                 align 8
.text:0000000000014468
.text:0000000000014468 loc_14468:                              ; CODE XREF: randread+22↑j
.text:0000000000014468                 mov     r14, [rdi+18h]
.text:000000000001446C                 lea     rax, [rdi+838h]
.text:0000000000014473                 lea     r13, [rdi+20h]
.text:0000000000014477                 mov     [rsp+48h+src], rax
.text:000000000001447C                 cmp     rdx, r14
.text:000000000001447F                 jbe     loc_14562
.text:0000000000014485
.text:0000000000014485 loc_14485:                              ; CODE XREF: randread+14A↓j
.text:0000000000014485                 mov     esi, 800h
.text:000000000001448A                 mov     rdi, rbx        ; dest
.text:000000000001448D                 mov     rdx, r14        ; n
.text:0000000000014490                 sub     rsi, r14
.text:0000000000014493                 add     rsi, [rsp+48h+src] ; src
.text:0000000000014498                 add     rbx, r14
.text:000000000001449B                 sub     rbp, r14
.text:000000000001449E                 call    _memcpy
.text:00000000000144A3                 test    bl, 7
.text:00000000000144A6                 jnz     short loc_14510
.text:00000000000144A8                 cmp     rbp, 7FFh
.text:00000000000144AF                 jbe     loc_14553
.text:00000000000144B5                 lea     r15, [rbp-800h]
.text:00000000000144BC                 mov     r14, r15
.text:00000000000144BF                 and     r14d, 7FFh
.text:00000000000144C6                 jmp     short loc_144DC
.text:00000000000144C6 ; ---------------------------------------------------------------------------
.text:00000000000144C8                 align 10h
.text:00000000000144D0
.text:00000000000144D0 loc_144D0:                              ; CODE XREF: randread+114↓j
.text:00000000000144D0                 cmp     r15, r14
.text:00000000000144D3                 jz      short loc_14510
.text:00000000000144D5                 sub     r15, 800h
.text:00000000000144DC
.text:00000000000144DC loc_144DC:                              ; CODE XREF: randread+E6↑j
.text:00000000000144DC                 mov     rsi, rbx
.text:00000000000144DF                 mov     rdi, r13
.text:00000000000144E2                 add     rbx, 800h
.text:00000000000144E9                 call    isaac_refill
.text:00000000000144EE                 test    r15, r15
.text:00000000000144F1                 mov     rbp, r15
.text:00000000000144F4                 jnz     short loc_144D0
.text:00000000000144F6                 mov     qword ptr [r12+18h], 0
.text:00000000000144FF                 add     rsp, 18h
.text:0000000000014503                 pop     rbx
.text:0000000000014504                 pop     rbp
.text:0000000000014505                 pop     r12
.text:0000000000014507                 pop     r13
.text:0000000000014509                 pop     r14
.text:000000000001450B                 pop     r15
.text:000000000001450D                 retn
.text:000000000001450D ; ---------------------------------------------------------------------------
.text:000000000001450E                 align 10h
.text:0000000000014510
.text:0000000000014510 loc_14510:                              ; CODE XREF: randread+C6↑j
.text:0000000000014510                                         ; randread+F3↑j
.text:0000000000014510                 mov     rsi, [rsp+48h+src]
.text:0000000000014515                 mov     rdi, r13
.text:0000000000014518                 mov     r14d, 800h
.text:000000000001451E                 call    isaac_refill
.text:0000000000014523                 cmp     rbp, 800h
.text:000000000001452A                 ja      loc_14485
.text:0000000000014530
.text:0000000000014530 loc_14530:                              ; CODE XREF: randread+180↓j
.text:0000000000014530                 mov     r14d, 800h
.text:0000000000014536
.text:0000000000014536 loc_14536:                              ; CODE XREF: randread+194↓j
.text:0000000000014536                 mov     rsi, [rsp+48h+src] ; src
.text:000000000001453B                 mov     rdx, rbp        ; n
.text:000000000001453E                 mov     rdi, rbx        ; dest
.text:0000000000014541                 sub     r14, rbp
.text:0000000000014544                 call    _memcpy
.text:0000000000014549                 mov     [r12+18h], r14
.text:000000000001454E                 jmp     loc_14452
.text:0000000000014553 ; ---------------------------------------------------------------------------
.text:0000000000014553
.text:0000000000014553 loc_14553:                              ; CODE XREF: randread+CF↑j
.text:0000000000014553                 mov     rsi, [rsp+48h+src]
.text:0000000000014558                 mov     rdi, r13
.text:000000000001455B                 call    isaac_refill
.text:0000000000014560                 jmp     short loc_14530
.text:0000000000014562 ; ---------------------------------------------------------------------------
.text:0000000000014562
.text:0000000000014562 loc_14562:                              ; CODE XREF: randread+9F↑j
.text:0000000000014562                 mov     r15, rax
.text:0000000000014565                 sub     r15, r14
.text:0000000000014568                 lea     rax, [r15+800h]
.text:000000000001456F                 mov     [rsp+48h+src], rax
.text:0000000000014574                 jmp     short loc_14536
.text:0000000000014574 ; } // starts at 143E0
.text:0000000000014574 randread        endp
.text:0000000000014574
.text:0000000000014574 ; ---------------------------------------------------------------------------
.text:0000000000014576                 align 20h
.text:0000000000014580
.text:0000000000014580 ; =============== S U B R O U T I N E =======================================
.text:0000000000014580
.text:0000000000014580
.text:0000000000014580 ; __int64 __fastcall randread_free(void *ptr)
.text:0000000000014580                 public randread_free
.text:0000000000014580 randread_free   proc near               ; CODE XREF: randint_all_free+10↑p
.text:0000000000014580 ; __unwind {
.text:0000000000014580                 push    rbp
.text:0000000000014581                 push    rbx
.text:0000000000014582                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014589                 mov     rbx, rdi
.text:000000000001458C                 mov     esi, 1038h
.text:0000000000014591                 sub     rsp, 8
.text:0000000000014595                 mov     rbp, [rdi]
.text:0000000000014598                 call    ___explicit_bzero_chk
.text:000000000001459D                 mov     rdi, rbx        ; ptr
.text:00000000000145A0                 call    free
.text:00000000000145A5                 test    rbp, rbp
.text:00000000000145A8                 jz      short loc_145C0
.text:00000000000145AA                 add     rsp, 8
.text:00000000000145AE                 mov     rdi, rbp        ; stream
.text:00000000000145B1                 pop     rbx
.text:00000000000145B2                 pop     rbp
.text:00000000000145B3                 jmp     rpl_fclose
.text:00000000000145B3 ; ---------------------------------------------------------------------------
.text:00000000000145B8                 align 20h
.text:00000000000145C0
.text:00000000000145C0 loc_145C0:                              ; CODE XREF: randread_free+28↑j
.text:00000000000145C0                 add     rsp, 8
.text:00000000000145C4                 xor     eax, eax
.text:00000000000145C6                 pop     rbx
.text:00000000000145C7                 pop     rbp
.text:00000000000145C8                 retn
.text:00000000000145C8 ; } // starts at 14580
.text:00000000000145C8 randread_free   endp
.text:00000000000145C8
.text:00000000000145C8 ; ---------------------------------------------------------------------------
.text:00000000000145C9                 align 10h
.text:00000000000145D0
.text:00000000000145D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000145D0
.text:00000000000145D0
.text:00000000000145D0                 public isaac_refill
.text:00000000000145D0 isaac_refill    proc near               ; CODE XREF: randread+109↑p
.text:00000000000145D0                                         ; randread+13E↑p ...
.text:00000000000145D0 ; __unwind {
.text:00000000000145D0                 mov     rax, [rdi+810h]
.text:00000000000145D7                 mov     rdx, [rdi+800h]
.text:00000000000145DE                 lea     r9, [rdi+400h]
.text:00000000000145E5                 lea     rcx, [rax+1]
.text:00000000000145E9                 mov     rax, rdi
.text:00000000000145EC                 mov     [rdi+810h], rcx
.text:00000000000145F3                 add     rcx, [rdi+808h]
.text:00000000000145FA                 nop     word ptr [rax+rax+00h]
.text:0000000000014600
.text:0000000000014600 loc_14600:                              ; CODE XREF: isaac_refill+149↓j
.text:0000000000014600                 mov     r8, rdx
.text:0000000000014603                 shl     r8, 15h
.text:0000000000014607                 xor     rdx, r8
.text:000000000001460A                 mov     r8, [rax]
.text:000000000001460D                 not     rdx
.text:0000000000014610                 add     rdx, [rax+400h]
.text:0000000000014617                 mov     r10, r8
.text:000000000001461A                 and     r10d, 7F8h
.text:0000000000014621                 mov     r11, [rdi+r10]
.text:0000000000014625                 mov     r10, rdx
.text:0000000000014628                 shr     r10, 5
.text:000000000001462C                 add     r11, rdx
.text:000000000001462F                 xor     rdx, r10
.text:0000000000014632                 add     rcx, r11
.text:0000000000014635                 mov     [rax], rcx
.text:0000000000014638                 shr     rcx, 8
.text:000000000001463C                 and     ecx, 7F8h
.text:0000000000014642                 mov     r11, [rdi+rcx]
.text:0000000000014646                 add     r11, r8
.text:0000000000014649                 mov     [rsi], r11
.text:000000000001464C                 add     rdx, [rax+408h]
.text:0000000000014653                 mov     rcx, [rax+8]
.text:0000000000014657                 mov     r10, rdx
.text:000000000001465A                 mov     rdx, rcx
.text:000000000001465D                 and     edx, 7F8h
.text:0000000000014663                 mov     r8, [rdi+rdx]
.text:0000000000014667                 mov     rdx, r10
.text:000000000001466A                 shl     rdx, 0Ch
.text:000000000001466E                 xor     rdx, r10
.text:0000000000014671                 add     r8, r10
.text:0000000000014674                 add     r8, r11
.text:0000000000014677                 mov     [rax+8], r8
.text:000000000001467B                 shr     r8, 8
.text:000000000001467F                 and     r8d, 7F8h
.text:0000000000014686                 add     rcx, [rdi+r8]
.text:000000000001468A                 mov     [rsi+8], rcx
.text:000000000001468E                 mov     r8, [rax+10h]
.text:0000000000014692                 mov     r11, rcx
.text:0000000000014695                 add     rdx, [rax+410h]
.text:000000000001469C                 mov     rcx, r8
.text:000000000001469F                 and     ecx, 7F8h
.text:00000000000146A5                 mov     r10, [rdi+rcx]
.text:00000000000146A9                 add     r10, rdx
.text:00000000000146AC                 mov     rcx, r10
.text:00000000000146AF                 add     rcx, r11
.text:00000000000146B2                 mov     [rax+10h], rcx
.text:00000000000146B6                 shr     rcx, 8
.text:00000000000146BA                 and     ecx, 7F8h
.text:00000000000146C0                 mov     r10, [rdi+rcx]
.text:00000000000146C4                 mov     rcx, rdx
.text:00000000000146C7                 shr     rcx, 21h
.text:00000000000146CB                 xor     rdx, rcx
.text:00000000000146CE                 add     r10, r8
.text:00000000000146D1                 mov     [rsi+10h], r10
.text:00000000000146D5                 mov     rcx, [rax+18h]
.text:00000000000146D9                 add     rdx, [rax+418h]
.text:00000000000146E0                 mov     r8, rcx
.text:00000000000146E3                 and     r8d, 7F8h
.text:00000000000146EA                 mov     r11, [rdi+r8]
.text:00000000000146EE                 add     r11, rdx
.text:00000000000146F1                 mov     r8, r11
.text:00000000000146F4                 add     r8, r10
.text:00000000000146F7                 add     rax, 20h ; ' '
.text:00000000000146FB                 add     rsi, 20h ; ' '
.text:00000000000146FF                 mov     [rax-8], r8
.text:0000000000014703                 shr     r8, 8
.text:0000000000014707                 and     r8d, 7F8h
.text:000000000001470E                 add     rcx, [rdi+r8]
.text:0000000000014712                 mov     [rsi-8], rcx
.text:0000000000014716                 cmp     rax, r9
.text:0000000000014719                 jb      loc_14600
.text:000000000001471F                 lea     r9, [rdi+800h]
.text:0000000000014726                 db      2Eh
.text:0000000000014726                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014730
.text:0000000000014730 loc_14730:                              ; CODE XREF: isaac_refill+279↓j
.text:0000000000014730                 mov     r8, rdx
.text:0000000000014733                 shl     r8, 15h
.text:0000000000014737                 xor     rdx, r8
.text:000000000001473A                 mov     r8, [rax]
.text:000000000001473D                 not     rdx
.text:0000000000014740                 add     rdx, [rax-400h]
.text:0000000000014747                 mov     r10, r8
.text:000000000001474A                 and     r10d, 7F8h
.text:0000000000014751                 mov     r11, [rdi+r10]
.text:0000000000014755                 mov     r10, rdx
.text:0000000000014758                 shr     r10, 5
.text:000000000001475C                 add     r11, rdx
.text:000000000001475F                 xor     rdx, r10
.text:0000000000014762                 add     rcx, r11
.text:0000000000014765                 mov     [rax], rcx
.text:0000000000014768                 shr     rcx, 8
.text:000000000001476C                 and     ecx, 7F8h
.text:0000000000014772                 mov     r11, [rdi+rcx]
.text:0000000000014776                 add     r11, r8
.text:0000000000014779                 mov     [rsi], r11
.text:000000000001477C                 add     rdx, [rax-3F8h]
.text:0000000000014783                 mov     rcx, [rax+8]
.text:0000000000014787                 mov     r10, rdx
.text:000000000001478A                 mov     rdx, rcx
.text:000000000001478D                 and     edx, 7F8h
.text:0000000000014793                 mov     r8, [rdi+rdx]
.text:0000000000014797                 mov     rdx, r10
.text:000000000001479A                 shl     rdx, 0Ch
.text:000000000001479E                 xor     rdx, r10
.text:00000000000147A1                 add     r8, r10
.text:00000000000147A4                 add     r8, r11
.text:00000000000147A7                 mov     [rax+8], r8
.text:00000000000147AB                 shr     r8, 8
.text:00000000000147AF                 and     r8d, 7F8h
.text:00000000000147B6                 add     rcx, [rdi+r8]
.text:00000000000147BA                 mov     [rsi+8], rcx
.text:00000000000147BE                 mov     r8, [rax+10h]
.text:00000000000147C2                 mov     r11, rcx
.text:00000000000147C5                 add     rdx, [rax-3F0h]
.text:00000000000147CC                 mov     rcx, r8
.text:00000000000147CF                 and     ecx, 7F8h
.text:00000000000147D5                 mov     r10, [rdi+rcx]
.text:00000000000147D9                 add     r10, rdx
.text:00000000000147DC                 mov     rcx, r10
.text:00000000000147DF                 add     rcx, r11
.text:00000000000147E2                 mov     [rax+10h], rcx
.text:00000000000147E6                 shr     rcx, 8
.text:00000000000147EA                 and     ecx, 7F8h
.text:00000000000147F0                 mov     r10, [rdi+rcx]
.text:00000000000147F4                 mov     rcx, rdx
.text:00000000000147F7                 shr     rcx, 21h
.text:00000000000147FB                 xor     rdx, rcx
.text:00000000000147FE                 add     r10, r8
.text:0000000000014801                 mov     [rsi+10h], r10
.text:0000000000014805                 mov     rcx, [rax+18h]
.text:0000000000014809                 add     rdx, [rax-3E8h]
.text:0000000000014810                 mov     r8, rcx
.text:0000000000014813                 and     r8d, 7F8h
.text:000000000001481A                 mov     r11, [rdi+r8]
.text:000000000001481E                 add     r11, rdx
.text:0000000000014821                 mov     r8, r11
.text:0000000000014824                 add     r8, r10
.text:0000000000014827                 add     rax, 20h ; ' '
.text:000000000001482B                 add     rsi, 20h ; ' '
.text:000000000001482F                 mov     [rax-8], r8
.text:0000000000014833                 shr     r8, 8
.text:0000000000014837                 and     r8d, 7F8h
.text:000000000001483E                 add     rcx, [rdi+r8]
.text:0000000000014842                 mov     [rsi-8], rcx
.text:0000000000014846                 cmp     rax, r9
.text:0000000000014849                 jb      loc_14730
.text:000000000001484F                 mov     [rdi+800h], rdx
.text:0000000000014856                 mov     [rdi+808h], rcx
.text:000000000001485D                 retn
.text:000000000001485D ; } // starts at 145D0
.text:000000000001485D isaac_refill    endp
.text:000000000001485D
.text:000000000001485D ; ---------------------------------------------------------------------------
.text:000000000001485E                 align 20h
.text:0000000000014860
.text:0000000000014860 ; =============== S U B R O U T I N E =======================================
.text:0000000000014860
.text:0000000000014860
.text:0000000000014860                 public isaac_seed
.text:0000000000014860 isaac_seed      proc near               ; CODE XREF: randread_new+138↑p
.text:0000000000014860 ; __unwind {
.text:0000000000014860                 push    r13
.text:0000000000014862                 push    r12
.text:0000000000014864                 lea     r12, [rdi+800h]
.text:000000000001486B                 push    rbp
.text:000000000001486C                 mov     rdx, rdi
.text:000000000001486F                 push    rbx
.text:0000000000014870                 mov     rax, rdi
.text:0000000000014873                 mov     rcx, 98F5704F6C44C0ABh
.text:000000000001487D                 mov     r10, 0AE985BF2CBFC89EDh
.text:0000000000014887                 mov     rbp, 48FE4A0FA5A09315h
.text:0000000000014891                 mov     rsi, 82F053DB8355E0CEh
.text:000000000001489B                 mov     r8, 0B29B2E824A595524h
.text:00000000000148A5                 mov     rbx, 8C0EA5053D4712A0h
.text:00000000000148AF                 mov     r11, 0B9F8B322C73AC862h
.text:00000000000148B9                 mov     r9, 647C4677A2884B7Ch
.text:00000000000148C3                 nop     dword ptr [rax+rax+00h]
.text:00000000000148C8
.text:00000000000148C8 loc_148C8:                              ; CODE XREF: isaac_seed+13A↓j
.text:00000000000148C8                 add     rsi, [rax+20h]
.text:00000000000148CC                 add     rcx, [rax+38h]
.text:00000000000148D0                 mov     r13, [rax]
.text:00000000000148D3                 add     rbp, [rax+28h]
.text:00000000000148D7                 add     r10, [rax+30h]
.text:00000000000148DB                 sub     r13, rsi
.text:00000000000148DE                 add     r9, r13
.text:00000000000148E1                 mov     r13, rcx
.text:00000000000148E4                 shr     r13, 9
.text:00000000000148E8                 add     rcx, r9
.text:00000000000148EB                 xor     rbp, r13
.text:00000000000148EE                 mov     r13, [rax+8]
.text:00000000000148F2                 sub     r13, rbp
.text:00000000000148F5                 add     r11, r13
.text:00000000000148F8                 mov     r13, r9
.text:00000000000148FB                 shl     r13, 9
.text:00000000000148FF                 add     r9, r11
.text:0000000000014902                 xor     r10, r13
.text:0000000000014905                 mov     r13, [rax+10h]
.text:0000000000014909                 sub     r13, r10
.text:000000000001490C                 add     rbx, r13
.text:000000000001490F                 mov     r13, r11
.text:0000000000014912                 shr     r13, 17h
.text:0000000000014916                 add     r11, rbx
.text:0000000000014919                 xor     rcx, r13
.text:000000000001491C                 mov     r13, [rax+18h]
.text:0000000000014920                 sub     r13, rcx
.text:0000000000014923                 add     r8, r13
.text:0000000000014926                 mov     r13, rbx
.text:0000000000014929                 shl     r13, 0Fh
.text:000000000001492D                 add     rbx, r8
.text:0000000000014930                 xor     r9, r13
.text:0000000000014933                 mov     r13, r8
.text:0000000000014936                 sub     rsi, r9
.text:0000000000014939                 shr     r13, 0Eh
.text:000000000001493D                 mov     [rax], r9
.text:0000000000014940                 xor     r11, r13
.text:0000000000014943                 mov     r13, rsi
.text:0000000000014946                 add     r8, rsi
.text:0000000000014949                 sub     rbp, r11
.text:000000000001494C                 shl     r13, 14h
.text:0000000000014950                 mov     [rax+8], r11
.text:0000000000014954                 xor     rbx, r13
.text:0000000000014957                 lea     r13, [rsi+rbp]
.text:000000000001495B                 mov     rsi, rbp
.text:000000000001495E                 sub     r10, rbx
.text:0000000000014961                 shr     rsi, 11h
.text:0000000000014965                 mov     [rax+10h], rbx
.text:0000000000014969                 xor     r8, rsi
.text:000000000001496C                 mov     rsi, r10
.text:000000000001496F                 add     rbp, r10
.text:0000000000014972                 sub     rcx, r8
.text:0000000000014975                 shl     rsi, 0Eh
.text:0000000000014979                 mov     [rax+18h], r8
.text:000000000001497D                 xor     rsi, r13
.text:0000000000014980                 add     r10, rcx
.text:0000000000014983                 mov     [rax+28h], rbp
.text:0000000000014987                 mov     [rax+20h], rsi
.text:000000000001498B                 mov     [rax+30h], r10
.text:000000000001498F                 add     rax, 40h ; '@'
.text:0000000000014993                 mov     [rax-8], rcx
.text:0000000000014997                 cmp     r12, rax
.text:000000000001499A                 jnz     loc_148C8
.text:00000000000149A0
.text:00000000000149A0 loc_149A0:                              ; CODE XREF: isaac_seed+212↓j
.text:00000000000149A0                 add     rsi, [rdx+20h]
.text:00000000000149A4                 add     rcx, [rdx+38h]
.text:00000000000149A8                 mov     r12, [rdx]
.text:00000000000149AB                 add     rbp, [rdx+28h]
.text:00000000000149AF                 add     r10, [rdx+30h]
.text:00000000000149B3                 sub     r12, rsi
.text:00000000000149B6                 add     r9, r12
.text:00000000000149B9                 mov     r12, rcx
.text:00000000000149BC                 shr     r12, 9
.text:00000000000149C0                 add     rcx, r9
.text:00000000000149C3                 xor     rbp, r12
.text:00000000000149C6                 mov     r12, [rdx+8]
.text:00000000000149CA                 sub     r12, rbp
.text:00000000000149CD                 add     r11, r12
.text:00000000000149D0                 mov     r12, r9
.text:00000000000149D3                 shl     r12, 9
.text:00000000000149D7                 add     r9, r11
.text:00000000000149DA                 xor     r10, r12
.text:00000000000149DD                 mov     r12, [rdx+10h]
.text:00000000000149E1                 sub     r12, r10
.text:00000000000149E4                 add     rbx, r12
.text:00000000000149E7                 mov     r12, r11
.text:00000000000149EA                 shr     r12, 17h
.text:00000000000149EE                 add     r11, rbx
.text:00000000000149F1                 xor     rcx, r12
.text:00000000000149F4                 mov     r12, [rdx+18h]
.text:00000000000149F8                 sub     r12, rcx
.text:00000000000149FB                 add     r8, r12
.text:00000000000149FE                 mov     r12, rbx
.text:0000000000014A01                 shl     r12, 0Fh
.text:0000000000014A05                 add     rbx, r8
.text:0000000000014A08                 xor     r9, r12
.text:0000000000014A0B                 mov     r12, r8
.text:0000000000014A0E                 sub     rsi, r9
.text:0000000000014A11                 shr     r12, 0Eh
.text:0000000000014A15                 mov     [rdx], r9
.text:0000000000014A18                 xor     r11, r12
.text:0000000000014A1B                 mov     r12, rsi
.text:0000000000014A1E                 add     r8, rsi
.text:0000000000014A21                 sub     rbp, r11
.text:0000000000014A24                 shl     r12, 14h
.text:0000000000014A28                 mov     [rdx+8], r11
.text:0000000000014A2C                 xor     rbx, r12
.text:0000000000014A2F                 lea     r12, [rsi+rbp]
.text:0000000000014A33                 mov     rsi, rbp
.text:0000000000014A36                 sub     r10, rbx
.text:0000000000014A39                 shr     rsi, 11h
.text:0000000000014A3D                 mov     [rdx+10h], rbx
.text:0000000000014A41                 xor     r8, rsi
.text:0000000000014A44                 mov     rsi, r10
.text:0000000000014A47                 add     rbp, r10
.text:0000000000014A4A                 sub     rcx, r8
.text:0000000000014A4D                 shl     rsi, 0Eh
.text:0000000000014A51                 mov     [rdx+18h], r8
.text:0000000000014A55                 xor     rsi, r12
.text:0000000000014A58                 add     r10, rcx
.text:0000000000014A5B                 mov     [rdx+28h], rbp
.text:0000000000014A5F                 mov     [rdx+20h], rsi
.text:0000000000014A63                 mov     [rdx+30h], r10
.text:0000000000014A67                 add     rdx, 40h ; '@'
.text:0000000000014A6B                 mov     [rdx-8], rcx
.text:0000000000014A6F                 cmp     rax, rdx
.text:0000000000014A72                 jnz     loc_149A0
.text:0000000000014A78                 pop     rbx
.text:0000000000014A79                 mov     qword ptr [rdi+810h], 0
.text:0000000000014A84                 mov     qword ptr [rdi+808h], 0
.text:0000000000014A8F                 pop     rbp
.text:0000000000014A90                 mov     qword ptr [rdi+800h], 0
.text:0000000000014A9B                 pop     r12
.text:0000000000014A9D                 pop     r13
.text:0000000000014A9F                 retn
.text:0000000000014A9F ; } // starts at 14860
.text:0000000000014A9F isaac_seed      endp
.text:0000000000014A9F
.text:0000000000014AA0
.text:0000000000014AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000014AA0
.text:0000000000014AA0
.text:0000000000014AA0                 public dup_safer
.text:0000000000014AA0 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:0000000000014AA0                                         ; fopen_safer+32↓p
.text:0000000000014AA0 ; __unwind {
.text:0000000000014AA0                 mov     edx, 3
.text:0000000000014AA5                 xor     esi, esi
.text:0000000000014AA7                 xor     eax, eax
.text:0000000000014AA9                 jmp     rpl_fcntl
.text:0000000000014AA9 ; } // starts at 14AA0
.text:0000000000014AA9 dup_safer       endp
.text:0000000000014AA9
.text:0000000000014AA9 ; ---------------------------------------------------------------------------
.text:0000000000014AAE                 align 10h
.text:0000000000014AB0
.text:0000000000014AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000014AB0
.text:0000000000014AB0 ; Attributes: info_from_lumina
.text:0000000000014AB0
.text:0000000000014AB0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000014AB0                 public rpl_fclose
.text:0000000000014AB0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000014AB0                                         ; randread_free+33↑j ...
.text:0000000000014AB0 ; __unwind {
.text:0000000000014AB0                 push    r12
.text:0000000000014AB2                 push    rbp
.text:0000000000014AB3                 push    rbx
.text:0000000000014AB4                 mov     rbx, rdi
.text:0000000000014AB7                 call    _fileno
.text:0000000000014ABC                 test    eax, eax
.text:0000000000014ABE                 mov     rdi, rbx        ; fp
.text:0000000000014AC1                 js      short loc_14B17
.text:0000000000014AC3                 call    ___freading
.text:0000000000014AC8                 test    eax, eax
.text:0000000000014ACA                 jnz     short loc_14AF8
.text:0000000000014ACC
.text:0000000000014ACC loc_14ACC:                              ; CODE XREF: rpl_fclose+62↓j
.text:0000000000014ACC                 mov     rdi, rbx        ; stream
.text:0000000000014ACF                 call    rpl_fflush
.text:0000000000014AD4                 test    eax, eax
.text:0000000000014AD6                 jz      short loc_14B14
.text:0000000000014AD8                 call    ___errno_location
.text:0000000000014ADD                 mov     r12d, [rax]
.text:0000000000014AE0                 mov     rdi, rbx        ; stream
.text:0000000000014AE3                 mov     rbp, rax
.text:0000000000014AE6                 call    _fclose
.text:0000000000014AEB                 test    r12d, r12d
.text:0000000000014AEE                 jnz     short loc_14B20
.text:0000000000014AF0
.text:0000000000014AF0 loc_14AF0:                              ; CODE XREF: rpl_fclose+79↓j
.text:0000000000014AF0                 pop     rbx
.text:0000000000014AF1                 pop     rbp
.text:0000000000014AF2                 pop     r12
.text:0000000000014AF4                 retn
.text:0000000000014AF4 ; ---------------------------------------------------------------------------
.text:0000000000014AF5                 align 8
.text:0000000000014AF8
.text:0000000000014AF8 loc_14AF8:                              ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000014AF8                 mov     rdi, rbx        ; stream
.text:0000000000014AFB                 call    _fileno
.text:0000000000014B00                 xor     esi, esi        ; offset
.text:0000000000014B02                 mov     edx, 1          ; whence
.text:0000000000014B07                 mov     edi, eax        ; fd
.text:0000000000014B09                 call    _lseek
.text:0000000000014B0E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014B12                 jnz     short loc_14ACC
.text:0000000000014B14
.text:0000000000014B14 loc_14B14:                              ; CODE XREF: rpl_fclose+26↑j
.text:0000000000014B14                 mov     rdi, rbx        ; stream
.text:0000000000014B17
.text:0000000000014B17 loc_14B17:                              ; CODE XREF: rpl_fclose+11↑j
.text:0000000000014B17                 pop     rbx
.text:0000000000014B18                 pop     rbp
.text:0000000000014B19                 pop     r12
.text:0000000000014B1B                 jmp     _fclose
.text:0000000000014B20 ; ---------------------------------------------------------------------------
.text:0000000000014B20
.text:0000000000014B20 loc_14B20:                              ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000014B20                 mov     [rbp+0], r12d
.text:0000000000014B24                 mov     eax, 0FFFFFFFFh
.text:0000000000014B29                 jmp     short loc_14AF0
.text:0000000000014B29 ; } // starts at 14AB0
.text:0000000000014B29 rpl_fclose      endp
.text:0000000000014B29
.text:0000000000014B29 ; ---------------------------------------------------------------------------
.text:0000000000014B2B                 align 10h
.text:0000000000014B30
.text:0000000000014B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000014B30
.text:0000000000014B30
.text:0000000000014B30 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000014B30                 public rpl_fcntl
.text:0000000000014B30 rpl_fcntl       proc near               ; CODE XREF: fts_build+90A↑p
.text:0000000000014B30                                         ; opendir_safer+3E↑p ...
.text:0000000000014B30
.text:0000000000014B30 var_68          = dword ptr -68h
.text:0000000000014B30 var_60          = qword ptr -60h
.text:0000000000014B30 var_58          = qword ptr -58h
.text:0000000000014B30 var_50          = qword ptr -50h
.text:0000000000014B30 var_48          = byte ptr -48h
.text:0000000000014B30 var_38          = qword ptr -38h
.text:0000000000014B30 var_30          = qword ptr -30h
.text:0000000000014B30 var_28          = qword ptr -28h
.text:0000000000014B30 var_20          = qword ptr -20h
.text:0000000000014B30 arg_0           = byte ptr  8
.text:0000000000014B30
.text:0000000000014B30 ; __unwind {
.text:0000000000014B30                 push    r12
.text:0000000000014B32                 push    rbp
.text:0000000000014B33                 mov     ebp, edi
.text:0000000000014B35                 push    rbx
.text:0000000000014B36                 sub     rsp, 50h
.text:0000000000014B3A                 mov     rax, fs:28h
.text:0000000000014B43                 mov     [rsp+68h+var_50], rax
.text:0000000000014B48                 xor     eax, eax
.text:0000000000014B4A                 lea     rax, [rsp+68h+arg_0]
.text:0000000000014B4F                 test    esi, esi
.text:0000000000014B51                 mov     [rsp+68h+var_38], rdx
.text:0000000000014B56                 mov     [rsp+68h+var_30], rcx
.text:0000000000014B5B                 mov     [rsp+68h+var_28], r8
.text:0000000000014B60                 mov     [rsp+68h+var_60], rax
.text:0000000000014B65                 lea     rax, [rsp+68h+var_48]
.text:0000000000014B6A                 mov     [rsp+68h+var_20], r9
.text:0000000000014B6F                 mov     [rsp+68h+var_68], 10h
.text:0000000000014B76                 mov     [rsp+68h+var_58], rax
.text:0000000000014B7B                 jz      loc_14D82
.text:0000000000014B81                 cmp     esi, 406h
.text:0000000000014B87                 jnz     short loc_14BD0
.text:0000000000014B89                 mov     rax, [rsp+68h+var_58]
.text:0000000000014B8E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000014B95                 mov     [rsp+68h+var_68], 18h
.text:0000000000014B9C                 mov     r12d, [rax+10h]
.text:0000000000014BA0                 mov     edx, r12d
.text:0000000000014BA3                 js      loc_14CD3
.text:0000000000014BA9                 xor     eax, eax
.text:0000000000014BAB                 mov     esi, 406h       ; cmd
.text:0000000000014BB0                 call    _fcntl
.text:0000000000014BB5                 test    eax, eax
.text:0000000000014BB7                 mov     ebx, eax
.text:0000000000014BB9                 js      loc_14D48
.text:0000000000014BBF
.text:0000000000014BBF loc_14BBF:                              ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000014BBF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000014BC9                 jmp     short loc_14C10
.text:0000000000014BC9 ; ---------------------------------------------------------------------------
.text:0000000000014BCB                 align 10h
.text:0000000000014BD0
.text:0000000000014BD0 loc_14BD0:                              ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000014BD0                 cmp     esi, 0Bh
.text:0000000000014BD3                 jz      short loc_14C00
.text:0000000000014BD5                 jg      short loc_14C30
.text:0000000000014BD7                 cmp     esi, 4
.text:0000000000014BDA                 jz      loc_14CB0
.text:0000000000014BE0                 jg      loc_14CA0
.text:0000000000014BE6                 cmp     esi, 2
.text:0000000000014BE9                 jz      loc_14CB0
.text:0000000000014BEF                 jg      short loc_14C00
.text:0000000000014BF1                 cmp     esi, 1
.text:0000000000014BF4                 jnz     short loc_14C58
.text:0000000000014BF6                 db      2Eh
.text:0000000000014BF6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014C00
.text:0000000000014C00 loc_14C00:                              ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000014C00                                         ; rpl_fcntl+BF↑j ...
.text:0000000000014C00                 mov     edi, ebp        ; fd
.text:0000000000014C02                 xor     eax, eax
.text:0000000000014C04                 call    _fcntl
.text:0000000000014C09                 mov     ebx, eax
.text:0000000000014C0B                 nop     dword ptr [rax+rax+00h]
.text:0000000000014C10
.text:0000000000014C10 loc_14C10:                              ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000014C10                                         ; rpl_fcntl+147↓j ...
.text:0000000000014C10                 mov     rcx, [rsp+68h+var_50]
.text:0000000000014C15                 xor     rcx, fs:28h
.text:0000000000014C1E                 mov     eax, ebx
.text:0000000000014C20                 jnz     loc_14D7D
.text:0000000000014C26                 add     rsp, 50h
.text:0000000000014C2A                 pop     rbx
.text:0000000000014C2B                 pop     rbp
.text:0000000000014C2C                 pop     r12
.text:0000000000014C2E                 retn
.text:0000000000014C2E ; ---------------------------------------------------------------------------
.text:0000000000014C2F                 align 10h
.text:0000000000014C30
.text:0000000000014C30 loc_14C30:                              ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000014C30                 cmp     esi, 407h
.text:0000000000014C36                 jg      short loc_14C80
.text:0000000000014C38                 cmp     esi, 406h
.text:0000000000014C3E                 jge     short loc_14CB0
.text:0000000000014C40                 cmp     esi, 401h
.text:0000000000014C46                 jz      short loc_14C00
.text:0000000000014C48                 cmp     esi, 402h
.text:0000000000014C4E                 jz      short loc_14CB0
.text:0000000000014C50                 cmp     esi, 400h
.text:0000000000014C56                 jz      short loc_14CB0
.text:0000000000014C58
.text:0000000000014C58 loc_14C58:                              ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000014C58                                         ; rpl_fcntl+164↓j ...
.text:0000000000014C58                 mov     eax, [rsp+68h+var_68]
.text:0000000000014C5B                 cmp     eax, 2Fh ; '/'
.text:0000000000014C5E                 ja      loc_14D9A
.text:0000000000014C64                 add     rax, [rsp+68h+var_58]
.text:0000000000014C69
.text:0000000000014C69 loc_14C69:                              ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000014C69                 mov     rdx, [rax]
.text:0000000000014C6C                 mov     edi, ebp        ; fd
.text:0000000000014C6E                 xor     eax, eax
.text:0000000000014C70                 call    _fcntl
.text:0000000000014C75                 mov     ebx, eax
.text:0000000000014C77                 jmp     short loc_14C10
.text:0000000000014C77 ; ---------------------------------------------------------------------------
.text:0000000000014C79                 align 20h
.text:0000000000014C80
.text:0000000000014C80 loc_14C80:                              ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000014C80                 cmp     esi, 409h
.text:0000000000014C86                 jz      short loc_14CB0
.text:0000000000014C88                 jl      loc_14C00
.text:0000000000014C8E                 cmp     esi, 40Ah
.text:0000000000014C94                 jnz     short loc_14C58
.text:0000000000014C96                 jmp     loc_14C00
.text:0000000000014C96 ; ---------------------------------------------------------------------------
.text:0000000000014C9B                 align 20h
.text:0000000000014CA0
.text:0000000000014CA0 loc_14CA0:                              ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000014CA0                 cmp     esi, 9
.text:0000000000014CA3                 jz      loc_14C00
.text:0000000000014CA9                 jg      short loc_14CB0
.text:0000000000014CAB                 cmp     esi, 8
.text:0000000000014CAE                 jnz     short loc_14C58
.text:0000000000014CB0
.text:0000000000014CB0 loc_14CB0:                              ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000014CB0                                         ; rpl_fcntl+B9↑j ...
.text:0000000000014CB0                 mov     eax, [rsp+68h+var_68]
.text:0000000000014CB3                 cmp     eax, 2Fh ; '/'
.text:0000000000014CB6                 ja      loc_14DA4
.text:0000000000014CBC                 add     rax, [rsp+68h+var_58]
.text:0000000000014CC1
.text:0000000000014CC1 loc_14CC1:                              ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000014CC1                 mov     edx, [rax]
.text:0000000000014CC3                 mov     edi, ebp        ; fd
.text:0000000000014CC5                 xor     eax, eax
.text:0000000000014CC7                 call    _fcntl
.text:0000000000014CCC                 mov     ebx, eax
.text:0000000000014CCE                 jmp     loc_14C10
.text:0000000000014CD3 ; ---------------------------------------------------------------------------
.text:0000000000014CD3
.text:0000000000014CD3 loc_14CD3:                              ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000014CD3                 xor     esi, esi        ; cmd
.text:0000000000014CD5                 xor     eax, eax
.text:0000000000014CD7                 call    _fcntl
.text:0000000000014CDC                 test    eax, eax
.text:0000000000014CDE                 mov     ebx, eax
.text:0000000000014CE0                 js      loc_14C10
.text:0000000000014CE6                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000014CED                 jnz     loc_14C10
.text:0000000000014CF3
.text:0000000000014CF3 loc_14CF3:                              ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000014CF3                 xor     eax, eax
.text:0000000000014CF5                 mov     esi, 1          ; cmd
.text:0000000000014CFA                 mov     edi, ebx        ; fd
.text:0000000000014CFC                 call    _fcntl
.text:0000000000014D01                 test    eax, eax
.text:0000000000014D03                 js      short loc_14D21
.text:0000000000014D05                 or      eax, 1
.text:0000000000014D08                 mov     esi, 2          ; cmd
.text:0000000000014D0D                 mov     edi, ebx        ; fd
.text:0000000000014D0F                 mov     edx, eax
.text:0000000000014D11                 xor     eax, eax
.text:0000000000014D13                 call    _fcntl
.text:0000000000014D18                 cmp     eax, 0FFFFFFFFh
.text:0000000000014D1B                 jnz     loc_14C10
.text:0000000000014D21
.text:0000000000014D21 loc_14D21:                              ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000014D21                 call    ___errno_location
.text:0000000000014D26                 mov     r12d, [rax]
.text:0000000000014D29                 mov     rbp, rax
.text:0000000000014D2C                 mov     edi, ebx        ; fd
.text:0000000000014D2E                 call    _close
.text:0000000000014D33                 mov     ebx, 0FFFFFFFFh
.text:0000000000014D38                 mov     [rbp+0], r12d
.text:0000000000014D3C                 jmp     loc_14C10
.text:0000000000014D3C ; ---------------------------------------------------------------------------
.text:0000000000014D41                 align 8
.text:0000000000014D48
.text:0000000000014D48 loc_14D48:                              ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000014D48                 call    ___errno_location
.text:0000000000014D4D                 cmp     dword ptr [rax], 16h
.text:0000000000014D50                 jnz     loc_14BBF
.text:0000000000014D56                 xor     esi, esi        ; cmd
.text:0000000000014D58                 xor     eax, eax
.text:0000000000014D5A                 mov     edx, r12d
.text:0000000000014D5D                 mov     edi, ebp        ; fd
.text:0000000000014D5F                 call    _fcntl
.text:0000000000014D64                 test    eax, eax
.text:0000000000014D66                 mov     ebx, eax
.text:0000000000014D68                 js      loc_14C10
.text:0000000000014D6E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000014D78                 jmp     loc_14CF3
.text:0000000000014D7D ; ---------------------------------------------------------------------------
.text:0000000000014D7D
.text:0000000000014D7D loc_14D7D:                              ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000014D7D                 call    ___stack_chk_fail
.text:0000000000014D82 ; ---------------------------------------------------------------------------
.text:0000000000014D82
.text:0000000000014D82 loc_14D82:                              ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000014D82                 mov     rax, [rsp+68h+var_58]
.text:0000000000014D87                 xor     esi, esi        ; cmd
.text:0000000000014D89                 mov     edx, [rax+10h]
.text:0000000000014D8C                 xor     eax, eax
.text:0000000000014D8E                 call    _fcntl
.text:0000000000014D93                 mov     ebx, eax
.text:0000000000014D95                 jmp     loc_14C10
.text:0000000000014D9A ; ---------------------------------------------------------------------------
.text:0000000000014D9A
.text:0000000000014D9A loc_14D9A:                              ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000014D9A                 mov     rax, [rsp+68h+var_60]
.text:0000000000014D9F                 jmp     loc_14C69
.text:0000000000014DA4 ; ---------------------------------------------------------------------------
.text:0000000000014DA4
.text:0000000000014DA4 loc_14DA4:                              ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000014DA4                 mov     rax, [rsp+68h+var_60]
.text:0000000000014DA9                 jmp     loc_14CC1
.text:0000000000014DA9 ; } // starts at 14B30
.text:0000000000014DA9 rpl_fcntl       endp
.text:0000000000014DA9
.text:0000000000014DA9 ; ---------------------------------------------------------------------------
.text:0000000000014DAE                 align 10h
.text:0000000000014DB0
.text:0000000000014DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000014DB0
.text:0000000000014DB0
.text:0000000000014DB0                 public fopen_safer
.text:0000000000014DB0 fopen_safer     proc near               ; CODE XREF: randread_new+39↑p
.text:0000000000014DB0 ; __unwind {
.text:0000000000014DB0                 push    r12
.text:0000000000014DB2                 push    rbp
.text:0000000000014DB3                 mov     rbp, rsi
.text:0000000000014DB6                 push    rbx
.text:0000000000014DB7                 call    _fopen
.text:0000000000014DBC                 test    rax, rax
.text:0000000000014DBF                 mov     rbx, rax
.text:0000000000014DC2                 jz      short loc_14DD1
.text:0000000000014DC4                 mov     rdi, rax        ; stream
.text:0000000000014DC7                 call    _fileno
.text:0000000000014DCC                 cmp     eax, 2
.text:0000000000014DCF                 jbe     short loc_14DE0
.text:0000000000014DD1
.text:0000000000014DD1 loc_14DD1:                              ; CODE XREF: fopen_safer+12↑j
.text:0000000000014DD1                                         ; fopen_safer+5B↓j ...
.text:0000000000014DD1                 mov     rax, rbx
.text:0000000000014DD4                 pop     rbx
.text:0000000000014DD5                 pop     rbp
.text:0000000000014DD6                 pop     r12
.text:0000000000014DD8                 retn
.text:0000000000014DD8 ; ---------------------------------------------------------------------------
.text:0000000000014DD9                 align 20h
.text:0000000000014DE0
.text:0000000000014DE0 loc_14DE0:                              ; CODE XREF: fopen_safer+1F↑j
.text:0000000000014DE0                 mov     edi, eax
.text:0000000000014DE2                 call    dup_safer
.text:0000000000014DE7                 test    eax, eax
.text:0000000000014DE9                 mov     r12d, eax
.text:0000000000014DEC                 js      short loc_14E28
.text:0000000000014DEE                 mov     rdi, rbx        ; stream
.text:0000000000014DF1                 call    rpl_fclose
.text:0000000000014DF6                 test    eax, eax
.text:0000000000014DF8                 jnz     short loc_14E0D
.text:0000000000014DFA                 mov     rsi, rbp        ; modes
.text:0000000000014DFD                 mov     edi, r12d       ; fd
.text:0000000000014E00                 call    _fdopen
.text:0000000000014E05                 test    rax, rax
.text:0000000000014E08                 mov     rbx, rax
.text:0000000000014E0B                 jnz     short loc_14DD1
.text:0000000000014E0D
.text:0000000000014E0D loc_14E0D:                              ; CODE XREF: fopen_safer+48↑j
.text:0000000000014E0D                 call    ___errno_location
.text:0000000000014E12                 mov     ebp, [rax]
.text:0000000000014E14                 mov     rbx, rax
.text:0000000000014E17                 mov     edi, r12d       ; fd
.text:0000000000014E1A                 call    _close
.text:0000000000014E1F                 mov     [rbx], ebp
.text:0000000000014E21                 xor     ebx, ebx
.text:0000000000014E23                 jmp     short loc_14DD1
.text:0000000000014E23 ; ---------------------------------------------------------------------------
.text:0000000000014E25                 align 8
.text:0000000000014E28
.text:0000000000014E28 loc_14E28:                              ; CODE XREF: fopen_safer+3C↑j
.text:0000000000014E28                 call    ___errno_location
.text:0000000000014E2D                 mov     r12d, [rax]
.text:0000000000014E30                 mov     rbp, rax
.text:0000000000014E33                 mov     rdi, rbx        ; stream
.text:0000000000014E36                 call    rpl_fclose
.text:0000000000014E3B                 xor     ebx, ebx
.text:0000000000014E3D                 mov     [rbp+0], r12d
.text:0000000000014E41                 jmp     short loc_14DD1
.text:0000000000014E41 ; } // starts at 14DB0
.text:0000000000014E41 fopen_safer     endp
.text:0000000000014E41
.text:0000000000014E41 ; ---------------------------------------------------------------------------
.text:0000000000014E43                 align 10h
.text:0000000000014E50
.text:0000000000014E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000014E50
.text:0000000000014E50 ; Attributes: info_from_lumina
.text:0000000000014E50
.text:0000000000014E50 ; void _libc_csu_init(void)
.text:0000000000014E50                 public __libc_csu_init
.text:0000000000014E50 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000014E50 ; __unwind {
.text:0000000000014E50                 push    r15
.text:0000000000014E52                 push    r14
.text:0000000000014E54                 mov     r15, rdx
.text:0000000000014E57                 push    r13
.text:0000000000014E59                 push    r12
.text:0000000000014E5B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000014E62                 push    rbp
.text:0000000000014E63                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000014E6A                 push    rbx
.text:0000000000014E6B                 mov     r13d, edi
.text:0000000000014E6E                 mov     r14, rsi
.text:0000000000014E71                 sub     rbp, r12
.text:0000000000014E74                 sub     rsp, 8
.text:0000000000014E78                 sar     rbp, 3
.text:0000000000014E7C                 call    _init_proc
.text:0000000000014E81                 test    rbp, rbp
.text:0000000000014E84                 jz      short loc_14EA6
.text:0000000000014E86                 xor     ebx, ebx
.text:0000000000014E88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000014E90
.text:0000000000014E90 loc_14E90:                              ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000014E90                 mov     rdx, r15
.text:0000000000014E93                 mov     rsi, r14
.text:0000000000014E96                 mov     edi, r13d
.text:0000000000014E99                 call    ds:(__frame_dummy_init_array_entry - 21B790h)[r12+rbx*8]
.text:0000000000014E9D                 add     rbx, 1
.text:0000000000014EA1                 cmp     rbp, rbx
.text:0000000000014EA4                 jnz     short loc_14E90
.text:0000000000014EA6
.text:0000000000014EA6 loc_14EA6:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000014EA6                 add     rsp, 8
.text:0000000000014EAA                 pop     rbx
.text:0000000000014EAB                 pop     rbp
.text:0000000000014EAC                 pop     r12
.text:0000000000014EAE                 pop     r13
.text:0000000000014EB0                 pop     r14
.text:0000000000014EB2                 pop     r15
.text:0000000000014EB4                 retn
.text:0000000000014EB4 ; } // starts at 14E50
.text:0000000000014EB4 __libc_csu_init endp
.text:0000000000014EB4
.text:0000000000014EB4 ; ---------------------------------------------------------------------------
.text:0000000000014EB5                 align 20h
.text:0000000000014EC0
.text:0000000000014EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000014EC0
.text:0000000000014EC0
.text:0000000000014EC0 ; void _libc_csu_fini(void)
.text:0000000000014EC0                 public __libc_csu_fini
.text:0000000000014EC0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000014EC0 ; __unwind {
.text:0000000000014EC0                 rep retn
.text:0000000000014EC0 ; } // starts at 14EC0
.text:0000000000014EC0 __libc_csu_fini endp
.text:0000000000014EC0
.text:0000000000014EC0 ; ---------------------------------------------------------------------------
.text:0000000000014EC2                 align 10h
.text:0000000000014ED0
.text:0000000000014ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000014ED0
.text:0000000000014ED0
.text:0000000000014ED0 atexit          proc near               ; CODE XREF: main+6D↑p
.text:0000000000014ED0 ; __unwind {
.text:0000000000014ED0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000014ED7                 xor     esi, esi        ; obj
.text:0000000000014ED9                 jmp     ___cxa_atexit
.text:0000000000014ED9 ; } // starts at 14ED0
.text:0000000000014ED9 atexit          endp
.text:0000000000014ED9
.text:0000000000014ED9 _text           ends
.text:0000000000014ED9
LOAD:0000000000014EDE ; ===========================================================================
LOAD:0000000000014EDE
LOAD:0000000000014EDE ; Segment type: Pure code
LOAD:0000000000014EDE ; Segment permissions: Read/Execute
LOAD:0000000000014EDE LOAD            segment byte public 'CODE' use64
LOAD:0000000000014EDE                 assume cs:LOAD
LOAD:0000000000014EDE                 ;org 14EDEh
LOAD:0000000000014EDE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000014EDE                 align 20h
LOAD:0000000000014EDE LOAD            ends
LOAD:0000000000014EDE
.fini:0000000000014EE0 ; ===========================================================================
.fini:0000000000014EE0
.fini:0000000000014EE0 ; Segment type: Pure code
.fini:0000000000014EE0 ; Segment permissions: Read/Execute
.fini:0000000000014EE0 _fini           segment dword public 'CODE' use64
.fini:0000000000014EE0                 assume cs:_fini
.fini:0000000000014EE0                 ;org 14EE0h
.fini:0000000000014EE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000014EE0
.fini:0000000000014EE0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000014EE0
.fini:0000000000014EE0
.fini:0000000000014EE0                 public _term_proc
.fini:0000000000014EE0 _term_proc      proc near
.fini:0000000000014EE0                 sub     rsp, 8          ; _fini
.fini:0000000000014EE4                 add     rsp, 8
.fini:0000000000014EE8                 retn
.fini:0000000000014EE8 _term_proc      endp
.fini:0000000000014EE8
.fini:0000000000014EE8 _fini           ends
.fini:0000000000014EE8
LOAD:0000000000014EE9 ; ===========================================================================
LOAD:0000000000014EE9
LOAD:0000000000014EE9 ; Segment type: Pure code
LOAD:0000000000014EE9 ; Segment permissions: Read/Execute
LOAD:0000000000014EE9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000014EE9                 assume cs:LOAD
LOAD:0000000000014EE9                 ;org 14EE9h
LOAD:0000000000014EE9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000014EE9                 align 20h
LOAD:0000000000014EE9 LOAD            ends
LOAD:0000000000014EE9
.rodata:0000000000014F00 ; ===========================================================================
.rodata:0000000000014F00
.rodata:0000000000014F00 ; Segment type: Pure data
.rodata:0000000000014F00 ; Segment permissions: Read
.rodata:0000000000014F00 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000014F00                 assume cs:_rodata
.rodata:0000000000014F00                 ;org 14F00h
.rodata:0000000000014F00                 public _IO_stdin_used
.rodata:0000000000014F00 _IO_stdin_used  db    1
.rodata:0000000000014F01                 db    0
.rodata:0000000000014F02                 db    2
.rodata:0000000000014F03                 db    0
.rodata:0000000000014F04 ; const char file[]
.rodata:0000000000014F04 file            db '../coreutils-8.31/src/mv.c',0
.rodata:0000000000014F04                                         ; DATA XREF: main+6A7↑o
.rodata:0000000000014F04                                         ; do_move+100↑o
.rodata:0000000000014F1F ; const char aValidStatusSta[]
.rodata:0000000000014F1F aValidStatusSta db 'VALID_STATUS (status)',0
.rodata:0000000000014F1F                                         ; DATA XREF: do_move+107↑o
.rodata:0000000000014F35 aMv             db 'mv',0               ; DATA XREF: main+258↑o
.rodata:0000000000014F35                                         ; usage+1CB↑o ...
.rodata:0000000000014F38 asc_14F38       db '[',0                ; DATA XREF: usage+1D7↑o
.rodata:0000000000014F3A aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1FE↑o
.rodata:0000000000014F4A aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000014F4A                                         ; DATA XREF: usage+22E↑o
.rodata:0000000000014F4A                                         ; usage+32C↑o ...
.rodata:0000000000014F60 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+23F↑o
.rodata:0000000000014F6A aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+24B↑o
.rodata:0000000000014F79 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1DE↑o
.rodata:0000000000014F83 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+20A↑o
.rodata:0000000000014F8D aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+222↑o
.rodata:0000000000014F97 ; const char aSOnlineHelpS[]
.rodata:0000000000014F97 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+29A↑o
.rodata:0000000000014F97                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000014FAE unk_14FAE       db  47h ; G             ; DATA XREF: main+251↑o
.rodata:0000000000014FAE                                         ; usage+2B6↑o ...
.rodata:0000000000014FAF                 db  4Eh ; N
.rodata:0000000000014FB0                 db  55h ; U
.rodata:0000000000014FB1                 db  20h
.rodata:0000000000014FB2 ; const char domainname[]
.rodata:0000000000014FB2 domainname      db 'coreutils',0        ; DATA XREF: main+4E↑o
.rodata:0000000000014FB2                                         ; main+5A↑o ...
.rodata:0000000000014FBC ; const char s2[]
.rodata:0000000000014FBC s2              db 'en_',0              ; DATA XREF: usage+2DD↑o
.rodata:0000000000014FBC                                         ; usage+39E↑o
.rodata:0000000000014FC0 ; const char aFullDocumentat[]
.rodata:0000000000014FC0 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000014FC0                                         ; DATA XREF: usage:loc_3A79↑o
.rodata:0000000000014FC0                                         ; usage:loc_3B36↑o
.rodata:0000000000014FDB ; const char dirname[]
.rodata:0000000000014FDB dirname         db '/usr/local/share/locale',0
.rodata:0000000000014FDB                                         ; DATA XREF: main+47↑o
.rodata:0000000000014FF3 ; const char aFailedToAccess[]
.rodata:0000000000014FF3 aFailedToAccess db 'failed to access %s',0
.rodata:0000000000014FF3                                         ; DATA XREF: main+6F7↑o
.rodata:0000000000014FF3                                         ; main+738↑o
.rodata:0000000000015007 ; const char aTargetSIsNotAD[]
.rodata:0000000000015007 aTargetSIsNotAD db 'target %s is not a directory',0
.rodata:0000000000015007                                         ; DATA XREF: main+2C2↑o
.rodata:0000000000015007                                         ; main+676↑o
.rodata:0000000000015024 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+242↑o
.rodata:0000000000015034 aMikeParker     db 'Mike Parker',0      ; DATA XREF: main+249↑o
.rodata:0000000000015040 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+22B↑o
.rodata:000000000001504D ; const char shortopts[]
.rodata:000000000001504D shortopts       db 'bfint:uvS:TZ',0     ; DATA XREF: main+16F↑o
.rodata:000000000001505A aMissingFileOpe db 'missing file operand',0
.rodata:000000000001505A                                         ; DATA XREF: main+65E↑o
.rodata:000000000001506F aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+469↑o
.rodata:0000000000015080 ; const char assertion[]
.rodata:0000000000015080 assertion       db '2 <= n_files',0     ; DATA XREF: main+6AE↑o
.rodata:000000000001508D ; const char aBackupType[]
.rodata:000000000001508D aBackupType     db 'backup type',0      ; DATA XREF: main+3B2↑o
.rodata:0000000000015099 aBackup         db 'backup',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:00000000000150A0 aContext        db 'context',0          ; DATA XREF: .data.rel.ro:000000000021B7C0↓o
.rodata:00000000000150A8 aForce          db 'force',0            ; DATA XREF: .data.rel.ro:000000000021B7E0↓o
.rodata:00000000000150AE aInteractive    db 'interactive',0      ; DATA XREF: .data.rel.ro:000000000021B800↓o
.rodata:00000000000150BA aNoClobber      db 'no-clobber',0       ; DATA XREF: .data.rel.ro:000000000021B820↓o
.rodata:00000000000150C5 aNoTargetDirect db 'no-target-directory',0
.rodata:00000000000150C5                                         ; DATA XREF: .data.rel.ro:000000000021B840↓o
.rodata:00000000000150C5                                         ; .data.rel.ro:000000000021B8A0↓o
.rodata:00000000000150D9 aStripTrailingS_0 db 'strip-trailing-slashes',0
.rodata:00000000000150D9                                         ; DATA XREF: .data.rel.ro:000000000021B860↓o
.rodata:00000000000150F0 aSuffix         db 'suffix',0           ; DATA XREF: .data.rel.ro:000000000021B880↓o
.rodata:00000000000150F7 aUpdate         db 'update',0           ; DATA XREF: .data.rel.ro:000000000021B8C0↓o
.rodata:00000000000150FE aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000021B8E0↓o
.rodata:0000000000015106 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000021B900↓o
.rodata:000000000001510B aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000021B920↓o
.rodata:0000000000015113                 align 8
.rodata:0000000000015118 ; const char aFailedToGetAtt[]
.rodata:0000000000015118 aFailedToGetAtt db 'failed to get attributes of %s',0
.rodata:0000000000015118                                         ; DATA XREF: do_move+129↑o
.rodata:0000000000015137                 align 8
.rodata:0000000000015138 ; const char aTrySHelpForMor[]
.rodata:0000000000015138 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000015138                                         ; DATA XREF: usage+2F↑o
.rodata:000000000001515F                 align 20h
.rodata:0000000000015160 ; const char aUsageSOptionTS[]
.rodata:0000000000015160 aUsageSOptionTS db 'Usage: %s [OPTION]... [-T] SOURCE DEST',0Ah
.rodata:0000000000015160                                         ; DATA XREF: usage:loc_37DD↑o
.rodata:0000000000015160                 db '  or:  %s [OPTION]... SOURCE... DIRECTORY',0Ah
.rodata:0000000000015160                 db '  or:  %s [OPTION]... -t DIRECTORY SOURCE...',0Ah,0
.rodata:00000000000151DF                 align 20h
.rodata:00000000000151E0 ; const char aRenameSourceTo[]
.rodata:00000000000151E0 aRenameSourceTo db 'Rename SOURCE to DEST, or move SOURCE(s) to DIRECTORY.',0Ah,0
.rodata:00000000000151E0                                         ; DATA XREF: usage+8A↑o
.rodata:0000000000015218 ; const char aMandatoryArgum[]
.rodata:0000000000015218 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:0000000000015218                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000015218                 db 'ns too.',0Ah,0
.rodata:0000000000015263                 align 8
.rodata:0000000000015268 ; const char aBackupControlM[]
.rodata:0000000000015268 aBackupControlM db '      --backup[=CONTROL]       make a backup of each existing des'
.rodata:0000000000015268                                         ; DATA XREF: usage+D4↑o
.rodata:0000000000015268                 db 'tination file',0Ah
.rodata:0000000000015268                 db '  -b                           like --backup but does not accept '
.rodata:0000000000015268                 db 'an argument',0Ah
.rodata:0000000000015268                 db '  -f, --force                  do not prompt before overwriting',0Ah
.rodata:0000000000015268                 db '  -i, --interactive            prompt before overwrite',0Ah
.rodata:0000000000015268                 db '  -n, --no-clobber             do not overwrite an existing file',0Ah
.rodata:0000000000015268                 db 'If you specify more than one of -i, -f, -n, only the final one ta'
.rodata:0000000000015268                 db 'kes effect.',0Ah,0
.rodata:000000000001540A                 align 10h
.rodata:0000000000015410 ; const char aStripTrailingS[]
.rodata:0000000000015410 aStripTrailingS db '      --strip-trailing-slashes  remove any trailing slashes from '
.rodata:0000000000015410                                         ; DATA XREF: usage+F9↑o
.rodata:0000000000015410                 db 'each SOURCE',0Ah
.rodata:0000000000015410                 db '                                 argument',0Ah
.rodata:0000000000015410                 db '  -S, --suffix=SUFFIX          override the usual backup suffix',0Ah
.rodata:0000000000015410                 db 0
.rodata:00000000000154C8 ; const char aTTargetDirecto[]
.rodata:00000000000154C8 aTTargetDirecto db '  -t, --target-directory=DIRECTORY  move all SOURCE arguments int'
.rodata:00000000000154C8                                         ; DATA XREF: usage+11E↑o
.rodata:00000000000154C8                 db 'o DIRECTORY',0Ah
.rodata:00000000000154C8                 db '  -T, --no-target-directory    treat DEST as a normal file',0Ah
.rodata:00000000000154C8                 db '  -u, --update                 move only when the SOURCE file is '
.rodata:00000000000154C8                 db 'newer',0Ah
.rodata:00000000000154C8                 db '                                 than the destination file or whe'
.rodata:00000000000154C8                 db 'n the',0Ah
.rodata:00000000000154C8                 db '                                 destination file is missing',0Ah
.rodata:00000000000154C8                 db '  -v, --verbose                explain what is being done',0Ah
.rodata:00000000000154C8                 db '  -Z, --context                set SELinux security context of de'
.rodata:00000000000154C8                 db 'stination',0Ah
.rodata:00000000000154C8                 db '                                 file to default type',0Ah,0
.rodata:00000000000156D7                 align 8
.rodata:00000000000156D8 ; const char aHelpDisplayThi[]
.rodata:00000000000156D8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000156D8                                         ; DATA XREF: usage+143↑o
.rodata:0000000000015705                 align 8
.rodata:0000000000015708 ; const char aVersionOutputV[]
.rodata:0000000000015708 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000015708                                         ; DATA XREF: usage+168↑o
.rodata:000000000001573E                 align 20h
.rodata:0000000000015740 ; const char aTheBackupSuffi[]
.rodata:0000000000015740 aTheBackupSuffi db 0Ah                  ; DATA XREF: usage+18D↑o
.rodata:0000000000015740                 db 'The backup suffix is ',27h,'~',27h,', unless set with --suffix or'
.rodata:0000000000015740                 db ' SIMPLE_BACKUP_SUFFIX.',0Ah
.rodata:0000000000015740                 db 'The version control method may be selected via the --backup optio'
.rodata:0000000000015740                 db 'n or through',0Ah
.rodata:0000000000015740                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.rodata:0000000000015740                 db 0Ah,0
.rodata:000000000001581D                 align 20h
.rodata:0000000000015820 ; const char aNoneOffNeverMa[]
.rodata:0000000000015820 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.rodata:0000000000015820                                         ; DATA XREF: usage+1B2↑o
.rodata:0000000000015820                 db '  numbered, t     make numbered backups',0Ah
.rodata:0000000000015820                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.rodata:0000000000015820                 db 'rwise',0Ah
.rodata:0000000000015820                 db '  simple, never   always make simple backups',0Ah,0
.rodata:00000000000158FE                 align 20h
.rodata:0000000000015900 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000015900                                         ; DATA XREF: usage+2AF↑o
.rodata:0000000000015900                                         ; usage+313↑o ...
.rodata:0000000000015928 ; const char aReportAnyTrans[]
.rodata:0000000000015928 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000015928                                         ; DATA XREF: usage+407↑o
.rodata:0000000000015928                 db 'am/>',0Ah,0
.rodata:000000000001596F                 align 10h
.rodata:0000000000015970 ; const char aOrAvailableLoc[]
.rodata:0000000000015970 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000015970                                         ; DATA XREF: usage:loc_3ABE↑o
.rodata:00000000000159A3                 align 8
.rodata:00000000000159A8 ; const char aMultipleTarget[]
.rodata:00000000000159A8 aMultipleTarget db 'multiple target directories specified',0
.rodata:00000000000159A8                                         ; DATA XREF: main:loc_339F↑o
.rodata:00000000000159CE                 align 10h
.rodata:00000000000159D0 ; const char aMissingDestina[]
.rodata:00000000000159D0 aMissingDestina db 'missing destination file operand after %s',0
.rodata:00000000000159D0                                         ; DATA XREF: main+607↑o
.rodata:00000000000159FA                 align 20h
.rodata:0000000000015A00 ; const char aCannotCombineT[]
.rodata:0000000000015A00 aCannotCombineT db 'cannot combine --target-directory (-t) and --no-target-directory '
.rodata:0000000000015A00                                         ; DATA XREF: main:loc_344A↑o
.rodata:0000000000015A00                 db '(-T)',0
.rodata:0000000000015A46                 align 8
.rodata:0000000000015A48 ; const char aOptionsBackupA[]
.rodata:0000000000015A48 aOptionsBackupA db 'options --backup and --no-clobber are mutually exclusive',0
.rodata:0000000000015A48                                         ; DATA XREF: main:loc_3313↑o
.rodata:0000000000015A81                 align 8
.rodata:0000000000015A88 ; const char _PRETTY_FUNCTION___7189[]
.rodata:0000000000015A88 __PRETTY_FUNCTION___7189 db 'do_move',0 ; DATA XREF: do_move:loc_3689↑o
.rodata:0000000000015A90 ; const char _PRETTY_FUNCTION___7244[]
.rodata:0000000000015A90 __PRETTY_FUNCTION___7244 db 'main',0    ; DATA XREF: main:loc_3380↑o
.rodata:0000000000015A95 ; const char aRemovedDirecto[]
.rodata:0000000000015A95 aRemovedDirecto db 'removed directory %s',0Ah,0
.rodata:0000000000015A95                                         ; DATA XREF: excise+157↑o
.rodata:0000000000015AAB ; const char aRemovedS[]
.rodata:0000000000015AAB aRemovedS       db 'removed %s',0Ah,0   ; DATA XREF: excise:loc_3DC8↑o
.rodata:0000000000015AAB                                         ; create_hard_link+6D↑o ...
.rodata:0000000000015AB7 ; const char aCannotRemoveS[]
.rodata:0000000000015AB7 aCannotRemoveS  db 'cannot remove %s',0 ; DATA XREF: excise+D9↑o
.rodata:0000000000015AB7                                         ; prompt:loc_41D9↑o ...
.rodata:0000000000015AC8 ; const char aSRemoveSS[]
.rodata:0000000000015AC8 aSRemoveSS      db '%s: remove %s %s? ',0
.rodata:0000000000015AC8                                         ; DATA XREF: prompt:loc_42D8↑o
.rodata:0000000000015ADB ; const char aFtsReadFailed[]
.rodata:0000000000015ADB aFtsReadFailed  db 'fts_read failed',0  ; DATA XREF: rm:loc_4978↑o
.rodata:0000000000015AEB asc_15AEB       db '..',0               ; DATA XREF: rm+4AD↑o
.rodata:0000000000015AEB                                         ; rm:loc_4868↑o ...
.rodata:0000000000015AEE ; const char aTraversalFaile[]
.rodata:0000000000015AEE aTraversalFaile db 'traversal failed: %s',0
.rodata:0000000000015AEE                                         ; DATA XREF: rm+B0↑o
.rodata:0000000000015B03 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000015B03                                         ; DATA XREF: rm+812↑o
.rodata:0000000000015B03                                         ; emit_bug_reporting_address+14↑o
.rodata:0000000000015B19 ; const char aValidStatusS[]
.rodata:0000000000015B19 aValidStatusS   db 'VALID_STATUS (s)',0 ; DATA XREF: rm+83F↑o
.rodata:0000000000015B2A ; const char aFtsCloseFailed[]
.rodata:0000000000015B2A aFtsCloseFailed db 'fts_close failed',0 ; DATA XREF: rm:loc_49B0↑o
.rodata:0000000000015B3B                 align 20h
.rodata:0000000000015B40 ; const char aSDescendIntoWr[]
.rodata:0000000000015B40 aSDescendIntoWr db '%s: descend into write-protected directory %s? ',0
.rodata:0000000000015B40                                         ; DATA XREF: prompt+2BA↑o
.rodata:0000000000015B70 ; const char aSDescendIntoDi[]
.rodata:0000000000015B70 aSDescendIntoDi db '%s: descend into directory %s? ',0
.rodata:0000000000015B70                                         ; DATA XREF: prompt:loc_4330↑o
.rodata:0000000000015B90 ; const char aSRemoveWritePr[]
.rodata:0000000000015B90 aSRemoveWritePr db '%s: remove write-protected %s %s? ',0
.rodata:0000000000015B90                                         ; DATA XREF: prompt+1E4↑o
.rodata:0000000000015BB3                 align 8
.rodata:0000000000015BB8 ; const char aRefusingToRemo[]
.rodata:0000000000015BB8 aRefusingToRemo db 'refusing to remove %s or %s directory: skipping %s',0
.rodata:0000000000015BB8                                         ; DATA XREF: rm+4DC↑o
.rodata:0000000000015BEB                 align 10h
.rodata:0000000000015BF0 ; const char aItIsDangerousT_0[]
.rodata:0000000000015BF0 aItIsDangerousT_0 db 'it is dangerous to operate recursively on %s',0
.rodata:0000000000015BF0                                         ; DATA XREF: rm+7BB↑o
.rodata:0000000000015C1D                 align 20h
.rodata:0000000000015C20 ; const char aItIsDangerousT[]
.rodata:0000000000015C20 aItIsDangerousT db 'it is dangerous to operate recursively on %s (same as %s)',0
.rodata:0000000000015C20                                         ; DATA XREF: rm+6E9↑o
.rodata:0000000000015C5A                 align 20h
.rodata:0000000000015C60 aUseNoPreserveR db 'use --no-preserve-root to override this failsafe',0
.rodata:0000000000015C60                                         ; DATA XREF: rm+718↑o
.rodata:0000000000015C91                 align 8
.rodata:0000000000015C98 ; const char aFailedToStatSS[]
.rodata:0000000000015C98 aFailedToStatSS db 'failed to stat %s: skipping %s',0
.rodata:0000000000015C98                                         ; DATA XREF: rm+56C↑o
.rodata:0000000000015CB7                 align 8
.rodata:0000000000015CB8 ; const char aSkippingSSince[]
.rodata:0000000000015CB8 aSkippingSSince db 'skipping %s, since it',27h,'s on a different device',0
.rodata:0000000000015CB8                                         ; DATA XREF: rm+5D5↑o
.rodata:0000000000015CB8                                         ; rm+760↑o
.rodata:0000000000015CE6                 align 8
.rodata:0000000000015CE8 ; const char aWarningCircula[]
.rodata:0000000000015CE8 aWarningCircula db 'WARNING: Circular directory structure.',0Ah
.rodata:0000000000015CE8                                         ; DATA XREF: rm+200↑o
.rodata:0000000000015CE8                 db 'This almost certainly means that you have a corrupted file system'
.rodata:0000000000015CE8                 db '.',0Ah
.rodata:0000000000015CE8                 db 'NOTIFY YOUR SYSTEM MANAGER.',0Ah
.rodata:0000000000015CE8                 db 'The following directory is part of the cycle:',0Ah
.rodata:0000000000015CE8                 db '  %s',0Ah,0
.rodata:0000000000015DA2                 align 8
.rodata:0000000000015DA8 ; const char aUnexpectedFail[]
.rodata:0000000000015DA8 aUnexpectedFail db 'unexpected failure: fts_info=%d: %s',0Ah
.rodata:0000000000015DA8                                         ; DATA XREF: rm+7FC↑o
.rodata:0000000000015DA8                 db 'please report to %s',0
.rodata:0000000000015DE0 ; const char aCoreutils831Sr_0[]
.rodata:0000000000015DE0 aCoreutils831Sr_0 db '../coreutils-8.31/src/remove.c',0
.rodata:0000000000015DE0                                         ; DATA XREF: rm+838↑o
.rodata:0000000000015DFF                 align 20h
.rodata:0000000000015E00 ; const char aAndPreserveRoo[]
.rodata:0000000000015E00 aAndPreserveRoo db 'and --preserve-root=all is in effect',0
.rodata:0000000000015E00                                         ; DATA XREF: rm+5FC↑o
.rodata:0000000000015E25                 align 8
.rodata:0000000000015E28 jpt_43EC        dd offset def_43EC - 15E28h
.rodata:0000000000015E28                                         ; DATA XREF: rm+35↑o
.rodata:0000000000015E28                                         ; rm+95↑r
.rodata:0000000000015E28                 dd offset loc_4578 - 15E28h ; jump table for switch statement
.rodata:0000000000015E28                 dd offset loc_4540 - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E28                 dd offset def_43EC - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E28                 dd offset loc_43F0 - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E28                 dd offset def_43EC - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E28                 dd offset loc_44B0 - 15E28h
.rodata:0000000000015E60 ; const char _PRETTY_FUNCTION___7067[]
.rodata:0000000000015E60 __PRETTY_FUNCTION___7067 dq offset loc_6D71+1
.rodata:0000000000015E60                                         ; DATA XREF: rm:loc_4B81↑o
.rodata:0000000000015E68 ; const char msgid[]
.rodata:0000000000015E68 msgid           db 'failed to restore the default file creation context',0
.rodata:0000000000015E68                                         ; DATA XREF: restore_default_fscreatecon_or_die+6↑o
.rodata:0000000000015E9C                 align 20h
.rodata:0000000000015EA0 ; const char aCannotCreateHa[]
.rodata:0000000000015EA0 aCannotCreateHa db 'cannot create hard link %s to %s',0
.rodata:0000000000015EA0                                         ; DATA XREF: create_hard_link+CC↑o
.rodata:0000000000015EC1                 align 8
.rodata:0000000000015EC8 ; const char aSReplaceSOverr[]
.rodata:0000000000015EC8 aSReplaceSOverr db '%s: replace %s, overriding mode %04lo (%s)? ',0
.rodata:0000000000015EC8                                         ; DATA XREF: overwrite_ok_isra_12:loc_4F46↑o
.rodata:0000000000015EF5                 align 8
.rodata:0000000000015EF8 ; const char aSUnwritableSMo[]
.rodata:0000000000015EF8 aSUnwritableSMo db '%s: unwritable %s (mode %04lo, %s); try anyway? ',0
.rodata:0000000000015EF8                                         ; DATA XREF: overwrite_ok_isra_12:loc_4FF0↑o
.rodata:0000000000015F29                 align 10h
.rodata:0000000000015F30 ; const char aFailedToGetSec[]
.rodata:0000000000015F30 aFailedToGetSec db 'failed to get security context of %s',0
.rodata:0000000000015F30                                         ; DATA XREF: set_process_security_ctx+3A↑o
.rodata:0000000000015F55                 align 8
.rodata:0000000000015F58 ; const char aFailedToSetThe[]
.rodata:0000000000015F58 aFailedToSetThe db 'failed to set the security context of %s',0
.rodata:0000000000015F58                                         ; DATA XREF: set_file_security_ctx+33↑o
.rodata:0000000000015F81                 align 8
.rodata:0000000000015F88 ; const char aFailedToPreser[]
.rodata:0000000000015F88 aFailedToPreser db 'failed to preserve ownership for %s',0
.rodata:0000000000015F88                                         ; DATA XREF: set_owner+19D↑o
.rodata:0000000000015F88                                         ; copy_internal:loc_9904↑o
.rodata:0000000000015FAC                 align 10h
.rodata:0000000000015FB0 ; const char aRNotSpecifiedO[]
.rodata:0000000000015FB0 aRNotSpecifiedO db '-r not specified; omitting directory %s',0
.rodata:0000000000015FB0                                         ; DATA XREF: copy_internal+BF9↑o
.rodata:0000000000015FD8 ; const char aWarningSourceF[]
.rodata:0000000000015FD8 aWarningSourceF db 'warning: source file %s specified more than once',0
.rodata:0000000000015FD8                                         ; DATA XREF: copy_internal+1939↑o
.rodata:0000000000016009                 align 10h
.rodata:0000000000016010 aCannotOverwrit_0 db 'cannot overwrite non-directory %s with directory %s',0
.rodata:0000000000016010                                         ; DATA XREF: copy_internal+23AF↑o
.rodata:0000000000016044                 align 8
.rodata:0000000000016048 aWillNotOverwri db 'will not overwrite just-created %s with %s',0
.rodata:0000000000016048                                         ; DATA XREF: copy_internal+2B49↑o
.rodata:0000000000016073                 align 8
.rodata:0000000000016078 ; const char aCannotOverwrit[]
.rodata:0000000000016078 aCannotOverwrit db 'cannot overwrite directory %s with non-directory',0
.rodata:0000000000016078                                         ; DATA XREF: copy_internal+1303↑o
.rodata:00000000000160A9                 align 10h
.rodata:00000000000160B0 aCannotMoveDire db 'cannot move directory onto non-directory: %s -> %s',0
.rodata:00000000000160B0                                         ; DATA XREF: copy_internal+25A0↑o
.rodata:00000000000160E3                 align 8
.rodata:00000000000160E8 ; const char aBackingUpSMigh[]
.rodata:00000000000160E8 aBackingUpSMigh db 'backing up %s might destroy source;  %s not moved',0
.rodata:00000000000160E8                                         ; DATA XREF: copy_internal+2914↑o
.rodata:000000000001611A                 align 20h
.rodata:0000000000016120 ; const char aBackingUpSMigh_0[]
.rodata:0000000000016120 aBackingUpSMigh_0 db 'backing up %s might destroy source;  %s not copied',0
.rodata:0000000000016120                                         ; DATA XREF: copy_internal:loc_84B6↑o
.rodata:0000000000016153                 align 8
.rodata:0000000000016158 ; const char aWillNotCopySTh[]
.rodata:0000000000016158 aWillNotCopySTh db 'will not copy %s through just-created symlink %s',0
.rodata:0000000000016158                                         ; DATA XREF: copy_internal+419↑o
.rodata:0000000000016189                 align 10h
.rodata:0000000000016190 ; const char aCannotCopyADir[]
.rodata:0000000000016190 aCannotCopyADir db 'cannot copy a directory, %s, into itself, %s',0
.rodata:0000000000016190                                         ; DATA XREF: copy_internal+10D2↑o
.rodata:00000000000161BD                 align 20h
.rodata:00000000000161C0 ; const char aWarningSourceD[]
.rodata:00000000000161C0 aWarningSourceD db 'warning: source directory %s specified more than once',0
.rodata:00000000000161C0                                         ; DATA XREF: copy_internal+26DB↑o
.rodata:00000000000161F6                 align 8
.rodata:00000000000161F8 ; const char aWillNotCreateH[]
.rodata:00000000000161F8 aWillNotCreateH db 'will not create hard link %s to directory %s',0
.rodata:00000000000161F8                                         ; DATA XREF: copy_internal+2041↑o
.rodata:0000000000016225                 align 8
.rodata:0000000000016228 ; const char aCannotMoveSToA[]
.rodata:0000000000016228 aCannotMoveSToA db 'cannot move %s to a subdirectory of itself, %s',0
.rodata:0000000000016228                                         ; DATA XREF: copy_internal+19DC↑o
.rodata:0000000000016257                 align 8
.rodata:0000000000016258 ; const char aInterDeviceMov[]
.rodata:0000000000016258 aInterDeviceMov db 'inter-device move failed: %s to %s; unable to remove target',0
.rodata:0000000000016258                                         ; DATA XREF: copy_internal+1A6A↑o
.rodata:0000000000016294                 align 8
.rodata:0000000000016298 ; const char aCannotCreateSy[]
.rodata:0000000000016298 aCannotCreateSy db 'cannot create symbolic link %s to %s',0
.rodata:0000000000016298                                         ; DATA XREF: copy_internal+F60↑o
.rodata:00000000000162BD                 align 20h
.rodata:00000000000162C0 ; const char aSkippingFileSA[]
.rodata:00000000000162C0 aSkippingFileSA db 'skipping file %s, as it was replaced while being copied',0
.rodata:00000000000162C0                                         ; DATA XREF: copy_internal+2123↑o
.rodata:00000000000162F8 ; const char aNotWritingThro[]
.rodata:00000000000162F8 aNotWritingThro db 'not writing through dangling symlink %s',0
.rodata:00000000000162F8                                         ; DATA XREF: copy_internal+401F↑o
.rodata:0000000000016320 aSFailedToGetEx db '%s: failed to get extents info',0
.rodata:0000000000016320                                         ; DATA XREF: copy_internal+3F4B↑o
.rodata:000000000001633F                 align 20h
.rodata:0000000000016340 ; const char aCannotCopyCycl[]
.rodata:0000000000016340 aCannotCopyCycl db 'cannot copy cyclic symbolic link %s',0
.rodata:0000000000016340                                         ; DATA XREF: copy_internal+B99↑o
.rodata:0000000000016364                 align 8
.rodata:0000000000016368 aSCanMakeRelati db '%s: can make relative symbolic links only in current directory',0
.rodata:0000000000016368                                         ; DATA XREF: copy_internal+2247↑o
.rodata:00000000000163A7                 align 8
.rodata:00000000000163A8 ; const char aCannotCreateSy_0[]
.rodata:00000000000163A8 aCannotCreateSy_0 db 'cannot create symbolic link %s',0
.rodata:00000000000163A8                                         ; DATA XREF: copy_internal+2CD3↑o
.rodata:00000000000163C7                 align 8
.rodata:00000000000163C8 ; const char aValidBackupTyp[]
.rodata:00000000000163C8 aValidBackupTyp db 'VALID_BACKUP_TYPE (co->backup_type)',0
.rodata:00000000000163C8                                         ; DATA XREF: copy+135↑o
.rodata:00000000000163EC                 align 10h
.rodata:00000000000163F0 ; const char aValidSparseMod[]
.rodata:00000000000163F0 aValidSparseMod db 'VALID_SPARSE_MODE (co->sparse_mode)',0
.rodata:00000000000163F0                                         ; DATA XREF: copy+116↑o
.rodata:0000000000016414                 align 8
.rodata:0000000000016418 ; const char aValidReflinkMo[]
.rodata:0000000000016418 aValidReflinkMo db 'VALID_REFLINK_MODE (co->reflink_mode)',0
.rodata:0000000000016418                                         ; DATA XREF: copy+F7↑o
.rodata:000000000001643E                 align 20h
.rodata:0000000000016440 ; const char aCoHardLinkCoSy[]
.rodata:0000000000016440 aCoHardLinkCoSy db '!(co->hard_link && co->symbolic_link)',0
.rodata:0000000000016440                                         ; DATA XREF: copy+B4↑o
.rodata:0000000000016466                 align 8
.rodata:0000000000016468 ; const char aCoReflinkModeR[]
.rodata:0000000000016468 aCoReflinkModeR db '! (co->reflink_mode == REFLINK_ALWAYS && co->sparse_mode != SPARS'
.rodata:0000000000016468                                         ; DATA XREF: copy+D3↑o
.rodata:0000000000016468                 db 'E_AUTO)',0
.rodata:00000000000164B1 aSS             db '%s -> %s',0         ; DATA XREF: emit_verbose+2E↑o
.rodata:00000000000164BA ; const char aBackupS[]
.rodata:00000000000164BA aBackupS        db ' (backup: %s)',0    ; DATA XREF: emit_verbose+59↑o
.rodata:00000000000164C8 ; const char aSOverwriteS[]
.rodata:00000000000164C8 aSOverwriteS    db '%s: overwrite %s? ',0
.rodata:00000000000164C8                                         ; DATA XREF: overwrite_ok_isra_12+D5↑o
.rodata:00000000000164DB aCannotLseekS   db 'cannot lseek %s',0  ; DATA XREF: create_hole+B5↑o
.rodata:00000000000164DB                                         ; copy_internal+40D6↑o
.rodata:00000000000164EB ; const char aErrorDeallocat[]
.rodata:00000000000164EB aErrorDeallocat db 'error deallocating %s',0
.rodata:00000000000164EB                                         ; DATA XREF: create_hole+61↑o
.rodata:00000000000164EB                                         ; copy_internal+3CA2↑o
.rodata:0000000000016501 ; const char aErrorReadingS[]
.rodata:0000000000016501 aErrorReadingS  db 'error reading %s',0 ; DATA XREF: sparse_copy+DE↑o
.rodata:0000000000016512 ; const char aErrorWritingS[]
.rodata:0000000000016512 aErrorWritingS  db 'error writing %s',0 ; DATA XREF: sparse_copy+3CF↑o
.rodata:0000000000016523 ; const char aOverflowReadin[]
.rodata:0000000000016523 aOverflowReadin db 'overflow reading %s',0
.rodata:0000000000016523                                         ; DATA XREF: sparse_copy+382↑o
.rodata:0000000000016537 ; const char aClearingPermis[]
.rodata:0000000000016537 aClearingPermis db 'clearing permissions for %s',0
.rodata:0000000000016537                                         ; DATA XREF: set_owner+163↑o
.rodata:0000000000016553 ; const char aCannotStatS[]
.rodata:0000000000016553 aCannotStatS    db 'cannot stat %s',0   ; DATA XREF: copy_internal+8EF↑o
.rodata:0000000000016553                                         ; copy_internal+E75↑o ...
.rodata:0000000000016562 ; const char aOmittingDirect[]
.rodata:0000000000016562 aOmittingDirect db 'omitting directory %s',0
.rodata:0000000000016562                                         ; DATA XREF: copy_internal:loc_72D0↑o
.rodata:0000000000016578 ; const char aSAndSAreTheSam[]
.rodata:0000000000016578 aSAndSAreTheSam db '%s and %s are the same file',0
.rodata:0000000000016578                                         ; DATA XREF: copy_internal+162C↑o
.rodata:0000000000016594 ; const char aCannotBackupS[]
.rodata:0000000000016594 aCannotBackupS  db 'cannot backup %s',0 ; DATA XREF: copy_internal+2742↑o
.rodata:00000000000165A5 ; const char aRenamed[]
.rodata:00000000000165A5 aRenamed        db 'renamed ',0         ; DATA XREF: copy_internal:loc_6CD0↑o
.rodata:00000000000165AE ; const char aCannotMoveSToS[]
.rodata:00000000000165AE aCannotMoveSToS db 'cannot move %s to %s',0
.rodata:00000000000165AE                                         ; DATA XREF: copy_internal+1194↑o
.rodata:00000000000165C3 ; const char aCopied[]
.rodata:00000000000165C3 aCopied         db 'copied ',0          ; DATA XREF: copy_internal:loc_7C70↑o
.rodata:00000000000165CB ; const char aCannotCreateDi[]
.rodata:00000000000165CB aCannotCreateDi db 'cannot create directory %s',0
.rodata:00000000000165CB                                         ; DATA XREF: copy_internal+14D0↑o
.rodata:00000000000165E6 ; const char aSettingPermiss[]
.rodata:00000000000165E6 aSettingPermiss db 'setting permissions for %s',0
.rodata:00000000000165E6                                         ; DATA XREF: copy_internal+2D1C↑o
.rodata:00000000000165E6                                         ; set_acl+1A↑o
.rodata:0000000000016601 ; const char aCreatedDirecto[]
.rodata:0000000000016601 aCreatedDirecto db 'created directory %s',0Ah,0
.rodata:0000000000016601                                         ; DATA XREF: copy_internal+1D19↑o
.rodata:0000000000016617 ; const char aCannotAccessS[]
.rodata:0000000000016617 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: copy_internal+2C29↑o
.rodata:0000000000016628 aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:0000000000016628                                         ; DATA XREF: copy_internal+27E4↑o
.rodata:0000000000016643 ; const char aCannotFstatS[]
.rodata:0000000000016643 aCannotFstatS   db 'cannot fstat %s',0  ; DATA XREF: copy_internal+2A18↑o
.rodata:0000000000016643                                         ; copy_internal+3A87↑o
.rodata:0000000000016653 ; const char aCannotCreateRe[]
.rodata:0000000000016653 aCannotCreateRe db 'cannot create regular file %s',0
.rodata:0000000000016653                                         ; DATA XREF: copy_internal+3476↑o
.rodata:0000000000016671 ; const char aFailedToCloneS[]
.rodata:0000000000016671 aFailedToCloneS db 'failed to clone %s from %s',0
.rodata:0000000000016671                                         ; DATA XREF: copy_internal+3D9A↑o
.rodata:000000000001668C ; const char aSWriteFailed[]
.rodata:000000000001668C aSWriteFailed   db '%s: write failed',0 ; DATA XREF: copy_internal+3EF4↑o
.rodata:000000000001669D ; const char aFailedToExtend[]
.rodata:000000000001669D aFailedToExtend db 'failed to extend %s',0
.rodata:000000000001669D                                         ; DATA XREF: copy_internal+3B8B↑o
.rodata:00000000000166B1 ; const char aPreservingTime[]
.rodata:00000000000166B1 aPreservingTime db 'preserving times for %s',0
.rodata:00000000000166B1                                         ; DATA XREF: copy_internal+69B↑o
.rodata:00000000000166B1                                         ; copy_internal+3A30↑o
.rodata:00000000000166C9 ; const char aPreservingPerm[]
.rodata:00000000000166C9 aPreservingPerm db 'preserving permissions for %s',0
.rodata:00000000000166C9                                         ; DATA XREF: copy_internal+7BB↑o
.rodata:00000000000166C9                                         ; copy_internal+36D0↑o ...
.rodata:00000000000166E7 ; const char aFailedToCloseS[]
.rodata:00000000000166E7 aFailedToCloseS db 'failed to close %s',0
.rodata:00000000000166E7                                         ; DATA XREF: copy_internal+2BD8↑o
.rodata:00000000000166E7                                         ; copy_internal+32C8↑o
.rodata:00000000000166FA aCannotCreateFi db 'cannot create fifo %s',0
.rodata:00000000000166FA                                         ; DATA XREF: copy_internal+29FB↑o
.rodata:0000000000016710 aCannotCreateSp db 'cannot create special file %s',0
.rodata:0000000000016710                                         ; DATA XREF: copy_internal+2614↑o
.rodata:000000000001672E aCannotReadSymb db 'cannot read symbolic link %s',0
.rodata:000000000001672E                                         ; DATA XREF: copy_internal+34DC↑o
.rodata:000000000001674B aSHasUnknownFil db '%s has unknown file type',0
.rodata:000000000001674B                                         ; DATA XREF: copy_internal+18FB↑o
.rodata:0000000000016764 aCannotUnBackup db 'cannot un-backup %s',0
.rodata:0000000000016764                                         ; DATA XREF: copy_internal+1879↑o
.rodata:0000000000016778 ; const char aSSUnbackup[]
.rodata:0000000000016778 aSSUnbackup     db '%s -> %s (unbackup)',0Ah,0
.rodata:0000000000016778                                         ; DATA XREF: copy_internal+1005↑o
.rodata:000000000001678D ; const char aCoreutils831Sr_1[]
.rodata:000000000001678D aCoreutils831Sr_1 db '../coreutils-8.31/src/copy.c',0
.rodata:000000000001678D                                         ; DATA XREF: copy+AD↑o
.rodata:000000000001678D                                         ; copy+CC↑o ...
.rodata:00000000000167AA ; const char aCoNull[]
.rodata:00000000000167AA aCoNull         db 'co != NULL',0       ; DATA XREF: copy+154↑o
.rodata:00000000000167B5                 align 8
.rodata:00000000000167B8 ; const char _PRETTY_FUNCTION___7875[]
.rodata:00000000000167B8 __PRETTY_FUNCTION___7875 db 'valid_options',0
.rodata:00000000000167B8                                         ; DATA XREF: copy+A6↑o
.rodata:00000000000167B8                                         ; copy:loc_9B15↑o ...
.rodata:00000000000167C6                 align 8
.rodata:00000000000167C8 ; const char aCoreutils831Sr_2[]
.rodata:00000000000167C8 aCoreutils831Sr_2 db '../coreutils-8.31/src/extent-scan.c',0
.rodata:00000000000167C8                                         ; DATA XREF: extent_scan_read+1F1↑o
.rodata:00000000000167C8                                         ; extent_scan_read+2E1↑o
.rodata:00000000000167EC                 align 10h
.rodata:00000000000167F0 ; const char aScanEiCountSiz[]
.rodata:00000000000167F0 aScanEiCountSiz db 'scan->ei_count <= SIZE_MAX - fiemap->fm_mapped_extents',0
.rodata:00000000000167F0                                         ; DATA XREF: extent_scan_read+2E8↑o
.rodata:0000000000016827                 align 8
.rodata:0000000000016828 ; const char aFmExtentsIFeLo[]
.rodata:0000000000016828 aFmExtentsIFeLo db 'fm_extents[i].fe_logical <= OFF_T_MAX - fm_extents[i].fe_length',0
.rodata:0000000000016828                                         ; DATA XREF: extent_scan_read+1F8↑o
.rodata:0000000000016868                 align 10h
.rodata:0000000000016870 ; const char _PRETTY_FUNCTION___6956[]
.rodata:0000000000016870 __PRETTY_FUNCTION___6956 db 'extent_scan_read',0
.rodata:0000000000016870                                         ; DATA XREF: extent_scan_read:loc_9FCA↑o
.rodata:0000000000016870                                         ; extent_scan_read:loc_A0BA↑o
.rodata:0000000000016881 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000016886 asc_16886       db '~',0                ; DATA XREF: set_simple_backup_suffix:loc_A63E↑o
.rodata:0000000000016888 ; const char name[]
.rodata:0000000000016888 name            db 'SIMPLE_BACKUP_SUFFIX',0
.rodata:0000000000016888                                         ; DATA XREF: set_simple_backup_suffix:loc_A660↑o
.rodata:000000000001689D unk_1689D       db  24h ; $             ; DATA XREF: xget_version+24↑o
.rodata:000000000001689E ; const char aVersionControl[]
.rodata:000000000001689E aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: xget_version:loc_AD3A↑o
.rodata:00000000000168AE aNone           db 'none',0             ; DATA XREF: .data.rel.ro:backup_args↓o
.rodata:00000000000168B3 aOff            db 'off',0              ; DATA XREF: .data.rel.ro:000000000021B968↓o
.rodata:00000000000168B7 aSimple         db 'simple',0           ; DATA XREF: .data.rel.ro:000000000021B970↓o
.rodata:00000000000168BE aNever          db 'never',0            ; DATA XREF: .data.rel.ro:000000000021B978↓o
.rodata:00000000000168C4 aExisting       db 'existing',0         ; DATA XREF: .data.rel.ro:000000000021B980↓o
.rodata:00000000000168CD aNil            db 'nil',0              ; DATA XREF: .data.rel.ro:000000000021B988↓o
.rodata:00000000000168D1 aNumbered       db 'numbered',0         ; DATA XREF: .data.rel.ro:000000000021B990↓o
.rodata:00000000000168DA                 align 20h
.rodata:00000000000168E0 backup_types    db    0                 ; DATA XREF: get_version_part_0+12↑o
.rodata:00000000000168E0                                         ; get_version_part_0+24↑o
.rodata:00000000000168E1                 db    0
.rodata:00000000000168E2                 db    0
.rodata:00000000000168E3                 db    0
.rodata:00000000000168E4                 db    0
.rodata:00000000000168E5                 db    0
.rodata:00000000000168E6                 db    0
.rodata:00000000000168E7                 db    0
.rodata:00000000000168E8                 db    1
.rodata:00000000000168E9                 db    0
.rodata:00000000000168EA                 db    0
.rodata:00000000000168EB                 db    0
.rodata:00000000000168EC                 db    1
.rodata:00000000000168ED                 db    0
.rodata:00000000000168EE                 db    0
.rodata:00000000000168EF                 db    0
.rodata:00000000000168F0                 db    2
.rodata:00000000000168F1                 db    0
.rodata:00000000000168F2                 db    0
.rodata:00000000000168F3                 db    0
.rodata:00000000000168F4                 db    2
.rodata:00000000000168F5                 db    0
.rodata:00000000000168F6                 db    0
.rodata:00000000000168F7                 db    0
.rodata:00000000000168F8                 db    3
.rodata:00000000000168F9                 db    0
.rodata:00000000000168FA                 db    0
.rodata:00000000000168FB                 db    0
.rodata:00000000000168FC                 db    3
.rodata:00000000000168FD                 db    0
.rodata:00000000000168FE                 db    0
.rodata:00000000000168FF                 db    0
.rodata:0000000000016900 ; const char aErrorClosingFi[]
.rodata:0000000000016900 aErrorClosingFi db 'error closing file',0
.rodata:0000000000016900                                         ; DATA XREF: close_stdin:loc_AE58↑o
.rodata:0000000000016913 ; const char format[]
.rodata:0000000000016913 format          db '%s: %s',0           ; DATA XREF: close_stdin+8D↑o
.rodata:0000000000016913                                         ; close_stdout+6C↑o
.rodata:000000000001691A ; const char aWriteError[]
.rodata:000000000001691A aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_AF73↑o
.rodata:0000000000016926 ; const char aRegularEmptyFi[]
.rodata:0000000000016926 aRegularEmptyFi db 'regular empty file',0
.rodata:0000000000016926                                         ; DATA XREF: file_type+67↑o
.rodata:0000000000016939 ; const char aRegularFile[]
.rodata:0000000000016939 aRegularFile    db 'regular file',0     ; DATA XREF: file_type:loc_B3C8↑o
.rodata:0000000000016946 ; const char aSymbolicLink[]
.rodata:0000000000016946 aSymbolicLink   db 'symbolic link',0    ; DATA XREF: file_type:loc_B3E0↑o
.rodata:0000000000016954 ; const char aBlockSpecialFi[]
.rodata:0000000000016954 aBlockSpecialFi db 'block special file',0
.rodata:0000000000016954                                         ; DATA XREF: file_type:loc_B410↑o
.rodata:0000000000016967 ; const char aCharacterSpeci[]
.rodata:0000000000016967 aCharacterSpeci db 'character special file',0
.rodata:0000000000016967                                         ; DATA XREF: file_type:loc_B420↑o
.rodata:000000000001697E ; const char aFifo[]
.rodata:000000000001697E aFifo           db 'fifo',0             ; DATA XREF: file_type:loc_B430↑o
.rodata:0000000000016983 ; const char aSocket[]
.rodata:0000000000016983 aSocket         db 'socket',0           ; DATA XREF: file_type:loc_B3F0↑o
.rodata:0000000000016983                                         ; .data.rel.ro:000000000021B998↓o
.rodata:000000000001698A ; const char aWeirdFile[]
.rodata:000000000001698A aWeirdFile      db 'weird file',0       ; DATA XREF: file_type+4E↑o
.rodata:0000000000016995 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:0000000000016995                                         ; DATA XREF: hash_print_statistics:loc_BC95↑o
.rodata:00000000000169AD aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:00000000000169AD                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:00000000000169C5 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:00000000000169C5                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:00000000000169DD                 align 20h
.rodata:00000000000169E0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:00000000000169E0                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:0000000000016A01                 align 10h
.rodata:0000000000016A10 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:0000000000016A10                                         ; hash_initialize:loc_C100↑o
.rodata:0000000000016A11                 db    0
.rodata:0000000000016A12                 db    0
.rodata:0000000000016A13                 db    0
.rodata:0000000000016A14                 db    0
.rodata:0000000000016A15                 db    0
.rodata:0000000000016A16                 db  80h
.rodata:0000000000016A17                 db  3Fh ; ?
.rodata:0000000000016A18                 db 0CDh
.rodata:0000000000016A19                 db 0CCh
.rodata:0000000000016A1A                 db  4Ch ; L
.rodata:0000000000016A1B                 db  3Fh ; ?
.rodata:0000000000016A1C                 db 0F4h
.rodata:0000000000016A1D                 db 0FDh
.rodata:0000000000016A1E                 db 0B4h
.rodata:0000000000016A1F                 db  3Fh ; ?
.rodata:0000000000016A20                 db    0
.rodata:0000000000016A21                 db    0
.rodata:0000000000016A22                 db    0
.rodata:0000000000016A23                 db    0
.rodata:0000000000016A24 dword_16A24     dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:0000000000016A24                                         ; check_tuning+4A↑r
.rodata:0000000000016A28 dword_16A28     dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:0000000000016A2C dword_16A2C     dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:0000000000016A30 dword_16A30     dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:0000000000016A34 dword_16A34     dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:0000000000016A38 dword_16A38     dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:0000000000016A3C dword_16A3C     dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:0000000000016A3C                                         ; hash_rehash+40↑r ...
.rodata:0000000000016A40 dword_16A40     dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:0000000000016A40                                         ; hash_initialize+150↑r ...
.rodata:0000000000016A44                 align 8
.rodata:0000000000016A48 qword_16A48     dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:0000000000016A48                                         ; hash_print_statistics+11F↑r
.rodata:0000000000016A50 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000016A50                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000016A88 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000016A88                                         ; do_move:loc_36A8↑o ...
.rodata:0000000000016A90 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000016A94 unk_16A94       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000016A95                 db  80h
.rodata:0000000000016A96                 db  98h
.rodata:0000000000016A97                 db    0
.rodata:0000000000016A98 unk_16A98       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000016A99                 db  80h
.rodata:0000000000016A9A                 db  99h
.rodata:0000000000016A9B                 db    0
.rodata:0000000000016A9C unk_16A9C       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000016A9D                 db    7
.rodata:0000000000016A9E                 db  65h ; e
.rodata:0000000000016A9F                 db    0
.rodata:0000000000016AA0 unk_16AA0       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000016AA1                 db 0AFh
.rodata:0000000000016AA2                 db    0
.rodata:0000000000016AA3 unk_16AA3       db  22h ; "             ; DATA XREF: gettext_quote:loc_CD50↑o
.rodata:0000000000016AA3                                         ; quotearg_buffer_restyled:loc_DB0B↑o ...
.rodata:0000000000016AA4                 db    0
.rodata:0000000000016AA5 ; const char asc_16AA5[2]
.rodata:0000000000016AA5 asc_16AA5       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000016AA5                                         ; quotearg_buffer_restyled:loc_CED3↑o ...
.rodata:0000000000016AA7 ; const char asc_16AA7[2]
.rodata:0000000000016AA7 asc_16AA7       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000016AA7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000016AA9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000016AB1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000021B9C8↓o
.rodata:0000000000016AB7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000021B9D0↓o
.rodata:0000000000016AC4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000021B9D8↓o
.rodata:0000000000016AC4                                         ; .data.rel.ro:000000000021B9F8↓o
.rodata:0000000000016AD1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000016AD1                                         ; DATA XREF: .data.rel.ro:000000000021B9E0↓o
.rodata:0000000000016AE5 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000021B9F0↓o
.rodata:0000000000016AED aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000021BA08↓o
.rodata:0000000000016AF5                 align 20h
.rodata:0000000000016B00 jpt_CEB1        dd offset loc_DC5A - 16B00h
.rodata:0000000000016B00                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000016B00                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000016B00                 dd offset loc_CEB3 - 16B00h ; jump table for switch statement
.rodata:0000000000016B00                 dd offset loc_DE88 - 16B00h
.rodata:0000000000016B00                 dd offset loc_DC94 - 16B00h
.rodata:0000000000016B00                 dd offset loc_DA84 - 16B00h
.rodata:0000000000016B00                 dd offset loc_DAE0 - 16B00h
.rodata:0000000000016B00                 dd offset loc_DB35 - 16B00h
.rodata:0000000000016B00                 dd offset loc_DB7A - 16B00h
.rodata:0000000000016B00                 dd offset loc_DBB4 - 16B00h
.rodata:0000000000016B00                 dd offset loc_DBB4 - 16B00h
.rodata:0000000000016B00                 dd offset loc_DBB4 - 16B00h
.rodata:0000000000016B2C jpt_D00E        dd offset loc_D230 - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000016B2C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch ; jump table for switch statement
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset loc_D270 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D178 - 16B2Ch, offset loc_D138 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D300 - 16B2Ch, offset loc_D2F0 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2E0 - 16B2Ch, offset loc_D2D0 - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset def_D00E - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2C0 - 16B2Ch, offset loc_D2B0 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D280 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D113 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D2B0 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D2B0 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D2B0 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D0E3 - 16B2Ch
.rodata:0000000000016B2C                 dd offset def_D00E - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D2B0 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D188 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D258 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D258 - 16B2Ch, offset loc_D013 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D2B0 - 16B2Ch, offset loc_D013 - 16B2Ch
.rodata:0000000000016B2C                 dd offset loc_D280 - 16B2Ch
.rodata:0000000000016D28 jpt_D39A        dd offset loc_D400 - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000016D28                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h ; jump table for switch statement
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset loc_D3F0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D540 - 16D28h, offset loc_D528 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D3D8 - 16D28h, offset loc_D518 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D3C0 - 16D28h, offset loc_D500 - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset def_D39A - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4E8 - 16D28h, offset loc_D4D0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D4B8 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D110 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D4D0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4D0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D4D0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D0E0 - 16D28h
.rodata:0000000000016D28                 dd offset def_D39A - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4D0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D3A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D4A0 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4A0 - 16D28h, offset loc_D010 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4D0 - 16D28h, offset loc_D010 - 16D28h
.rodata:0000000000016D28                 dd offset loc_D4B8 - 16D28h
.rodata:0000000000016F24                 align 20h
.rodata:0000000000016F40                 public quoting_style_vals
.rodata:0000000000016F40 quoting_style_vals db    0
.rodata:0000000000016F41                 db    0
.rodata:0000000000016F42                 db    0
.rodata:0000000000016F43                 db    0
.rodata:0000000000016F44                 db    1
.rodata:0000000000016F45                 db    0
.rodata:0000000000016F46                 db    0
.rodata:0000000000016F47                 db    0
.rodata:0000000000016F48                 db    2
.rodata:0000000000016F49                 db    0
.rodata:0000000000016F4A                 db    0
.rodata:0000000000016F4B                 db    0
.rodata:0000000000016F4C                 db    3
.rodata:0000000000016F4D                 db    0
.rodata:0000000000016F4E                 db    0
.rodata:0000000000016F4F                 db    0
.rodata:0000000000016F50                 db    4
.rodata:0000000000016F51                 db    0
.rodata:0000000000016F52                 db    0
.rodata:0000000000016F53                 db    0
.rodata:0000000000016F54                 db    5
.rodata:0000000000016F55                 db    0
.rodata:0000000000016F56                 db    0
.rodata:0000000000016F57                 db    0
.rodata:0000000000016F58                 db    6
.rodata:0000000000016F59                 db    0
.rodata:0000000000016F5A                 db    0
.rodata:0000000000016F5B                 db    0
.rodata:0000000000016F5C                 db    7
.rodata:0000000000016F5D                 db    0
.rodata:0000000000016F5E                 db    0
.rodata:0000000000016F5F                 db    0
.rodata:0000000000016F60                 db    8
.rodata:0000000000016F61                 db    0
.rodata:0000000000016F62                 db    0
.rodata:0000000000016F63                 db    0
.rodata:0000000000016F64                 db    9
.rodata:0000000000016F65                 db    0
.rodata:0000000000016F66                 db    0
.rodata:0000000000016F67                 db    0
.rodata:0000000000016F68 ; const char aCoreutils831Li[]
.rodata:0000000000016F68 aCoreutils831Li db '../coreutils-8.31/lib/tempname.c',0
.rodata:0000000000016F68                                         ; DATA XREF: gen_tempname_len+1D↑o
.rodata:0000000000016F89                 align 10h
.rodata:0000000000016F90 ; const char s[]
.rodata:0000000000016F90 s               db '! "invalid KIND in __gen_tempname"',0
.rodata:0000000000016F90                                         ; DATA XREF: gen_tempname_len+24↑o
.rodata:0000000000016FB3                 align 20h
.rodata:0000000000016FC0 ; const char _PRETTY_FUNCTION___5642[]
.rodata:0000000000016FC0 __PRETTY_FUNCTION___5642 db 'gen_tempname_len',0
.rodata:0000000000016FC0                                         ; DATA XREF: gen_tempname_len+16↑o
.rodata:0000000000016FD1                 align 20h
.rodata:0000000000016FE0 letters         db 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.rodata:0000000000016FE0                                         ; DATA XREF: try_tempname_len+90↑o
.rodata:000000000001701F aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000001702B aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000017032 ; const char aC_0[]
.rodata:0000000000017032 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_1069C↑o
.rodata:0000000000017036 ; const char aWrittenByS[]
.rodata:0000000000017036 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000017036                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000017046 ; const char aWrittenBySAndS[]
.rodata:0000000000017046 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000017046                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000001705D ; const char aWrittenBySSAnd[]
.rodata:000000000001705D aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000001705D                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000017079 ; const char aReportBugsToS[]
.rodata:0000000000017079 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000017079                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000001708E ; const char aSHomePageS[]
.rodata:000000000001708E aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000001708E                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000170A2                 align 8
.rodata:00000000000170A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000170A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000170A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000170A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000170A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000170A8                 db '.',0Ah
.rodata:00000000000170A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000170A8                 db 0Ah,0
.rodata:0000000000017174                 align 8
.rodata:0000000000017178 ; const char aWrittenBySSSAn[]
.rodata:0000000000017178 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017178                                         ; DATA XREF: version_etc_arn:loc_108F0↑o
.rodata:0000000000017178                 db 'and %s.',0Ah,0
.rodata:0000000000017198 ; const char aWrittenBySSSSA[]
.rodata:0000000000017198 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017198                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000017198                 db '%s, and %s.',0Ah,0
.rodata:00000000000171BC                 align 20h
.rodata:00000000000171C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000171C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000171C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000171C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000171E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000171E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000171E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000171E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000017214                 align 8
.rodata:0000000000017218 ; const char aWrittenBySSSSS[]
.rodata:0000000000017218 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017218                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000017218                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000017218                 db 'and %s.',0Ah,0
.rodata:0000000000017248 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000017248 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017248                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000017248                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000017248                 db '%s, and %s.',0Ah,0
.rodata:000000000001727C                 align 20h
.rodata:0000000000017280 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000017280                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000017280                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000017280                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000172BC                 align 20h
.rodata:00000000000172C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000172C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000172C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000172C0                 db 0
.rodata:0000000000017301                 align 4
.rodata:0000000000017304 jpt_10704       dd offset loc_10786 - 17304h
.rodata:0000000000017304                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000017304                                         ; version_etc_arn+9D↑r
.rodata:0000000000017304                 dd offset loc_10818 - 17304h ; jump table for switch statement
.rodata:0000000000017304                 dd offset loc_10858 - 17304h
.rodata:0000000000017304                 dd offset loc_108A0 - 17304h
.rodata:0000000000017304                 dd offset loc_108F0 - 17304h
.rodata:0000000000017304                 dd offset loc_10948 - 17304h
.rodata:0000000000017304                 dd offset loc_10978 - 17304h
.rodata:0000000000017304                 dd offset loc_109E0 - 17304h
.rodata:0000000000017304                 dd offset loc_10710 - 17304h
.rodata:0000000000017304                 dd offset loc_107C0 - 17304h
.rodata:000000000001732C                 align 20h
.rodata:0000000000017340                 public version_etc_copyright
.rodata:0000000000017340 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000017340                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000001736F ; const char aMemoryExhauste[]
.rodata:000000000001736F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000017380 ; const char aCoreutils831Li_0[]
.rodata:0000000000017380 aCoreutils831Li_0 db '../coreutils-8.31/lib/xfts.c',0
.rodata:0000000000017380                                         ; DATA XREF: xfts_open+37↑o
.rodata:000000000001739D ; const char aErrnoEinval[]
.rodata:000000000001739D aErrnoEinval    db 'errno != EINVAL',0  ; DATA XREF: xfts_open+3E↑o
.rodata:00000000000173AD                 align 10h
.rodata:00000000000173B0 ; const char _PRETTY_FUNCTION___3434[]
.rodata:00000000000173B0 __PRETTY_FUNCTION___3434 db 'xfts_open',0
.rodata:00000000000173B0                                         ; DATA XREF: xfts_open:loc_10F80↑o
.rodata:00000000000173BA                 align 20h
.rodata:00000000000173C0 CSWTCH_53       db    0                 ; DATA XREF: fts_build+174↑o
.rodata:00000000000173C0                                         ; fts_build:loc_126F6↑o
.rodata:00000000000173C1                 db  10h
.rodata:00000000000173C2                 db    0
.rodata:00000000000173C3                 db    0
.rodata:00000000000173C4                 db    0
.rodata:00000000000173C5                 db  20h
.rodata:00000000000173C6                 db    0
.rodata:00000000000173C7                 db    0
.rodata:00000000000173C8                 db    0
.rodata:00000000000173C9                 db    0
.rodata:00000000000173CA                 db    0
.rodata:00000000000173CB                 db    0
.rodata:00000000000173CC                 db    0
.rodata:00000000000173CD                 db  40h ; @
.rodata:00000000000173CE                 db    0
.rodata:00000000000173CF                 db    0
.rodata:00000000000173D0                 db    0
.rodata:00000000000173D1                 db    0
.rodata:00000000000173D2                 db    0
.rodata:00000000000173D3                 db    0
.rodata:00000000000173D4                 db    0
.rodata:00000000000173D5                 db  60h ; `
.rodata:00000000000173D6                 db    0
.rodata:00000000000173D7                 db    0
.rodata:00000000000173D8                 db    0
.rodata:00000000000173D9                 db    0
.rodata:00000000000173DA                 db    0
.rodata:00000000000173DB                 db    0
.rodata:00000000000173DC                 db    0
.rodata:00000000000173DD                 db  80h
.rodata:00000000000173DE                 db    0
.rodata:00000000000173DF                 db    0
.rodata:00000000000173E0                 db    0
.rodata:00000000000173E1                 db    0
.rodata:00000000000173E2                 db    0
.rodata:00000000000173E3                 db    0
.rodata:00000000000173E4                 db    0
.rodata:00000000000173E5                 db 0A0h
.rodata:00000000000173E6                 db    0
.rodata:00000000000173E7                 db    0
.rodata:00000000000173E8                 db    0
.rodata:00000000000173E9                 db    0
.rodata:00000000000173EA                 db    0
.rodata:00000000000173EB                 db    0
.rodata:00000000000173EC                 db    0
.rodata:00000000000173ED                 db 0C0h
.rodata:00000000000173EE                 db    0
.rodata:00000000000173EF                 db    0
.rodata:00000000000173F0 ; const char aInvalidArgumen[]
.rodata:00000000000173F0 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:00000000000173F0                                         ; DATA XREF: argmatch_invalid:loc_137F0↑o
.rodata:000000000001740B ; const char aAmbiguousArgum[]
.rodata:000000000001740B aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000001740B                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000017428 ; const char aValidArguments[]
.rodata:0000000000017428 aValidArguments db 'Valid arguments are:',0
.rodata:0000000000017428                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000001743D aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000001743D                 db '  - %s',0
.rodata:0000000000017445 aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000017445                                         ; copy_acl+72↑o ...
.rodata:000000000001744A                 align 10h
.rodata:0000000000017450 ; const char aCoreutils831Li_1[]
.rodata:0000000000017450 aCoreutils831Li_1 db '../coreutils-8.31/lib/cycle-check.c',0
.rodata:0000000000017450                                         ; DATA XREF: cycle_check+6E↑o
.rodata:0000000000017474                 align 8
.rodata:0000000000017478 ; const char aStateMagic9827[]
.rodata:0000000000017478 aStateMagic9827 db 'state->magic == 9827862',0
.rodata:0000000000017478                                         ; DATA XREF: cycle_check+75↑o
.rodata:0000000000017490 ; const char _PRETTY_FUNCTION___3994[]
.rodata:0000000000017490 __PRETTY_FUNCTION___3994 db 'cycle_check',0
.rodata:0000000000017490                                         ; DATA XREF: cycle_check:loc_13AE7↑o
.rodata:000000000001749C aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000001749E aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_13C50↑o
.rodata:00000000000174A4 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000174A4                                         ; locale_charset:loc_13D90↑o
.rodata:00000000000174AA ; const char aSEndOfFile[]
.rodata:00000000000174AA aSEndOfFile     db '%s: end of file',0  ; DATA XREF: randread_error:loc_1407D↑o
.rodata:00000000000174BA ; const char aSReadError[]
.rodata:00000000000174BA aSReadError     db '%s: read error',0   ; DATA XREF: randread_error+25↑o
.rodata:00000000000174C9 ; const char aDevUrandom[]
.rodata:00000000000174C9 aDevUrandom     db '/dev/urandom',0     ; DATA XREF: randread_new+CB↑o
.rodata:00000000000174D6 aRb             db 'rb',0               ; DATA XREF: randread_new+32↑o
.rodata:00000000000174D6 _rodata         ends
.rodata:00000000000174D6
LOAD:00000000000174D9 ; ===========================================================================
LOAD:00000000000174D9
LOAD:00000000000174D9 ; Segment type: Pure code
LOAD:00000000000174D9 ; Segment permissions: Read/Execute
LOAD:00000000000174D9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000174D9                 assume cs:LOAD
LOAD:00000000000174D9                 ;org 174D9h
LOAD:00000000000174D9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000174D9                 align 4
LOAD:00000000000174D9 LOAD            ends
LOAD:00000000000174D9
.eh_frame_hdr:00000000000174DC ; ===========================================================================
.eh_frame_hdr:00000000000174DC
.eh_frame_hdr:00000000000174DC ; Segment type: Pure data
.eh_frame_hdr:00000000000174DC ; Segment permissions: Read
.eh_frame_hdr:00000000000174DC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000174DC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000174DC                 ;org 174DCh
.eh_frame_hdr:00000000000174DC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000174DD                 db  1Bh
.eh_frame_hdr:00000000000174DE                 db    3
.eh_frame_hdr:00000000000174DF                 db  3Bh ; ;
.eh_frame_hdr:00000000000174E0                 db  90h
.eh_frame_hdr:00000000000174E1                 db    8
.eh_frame_hdr:00000000000174E2                 db    0
.eh_frame_hdr:00000000000174E3                 db    0
.eh_frame_hdr:00000000000174E4                 db  11h
.eh_frame_hdr:00000000000174E5                 db    1
.eh_frame_hdr:00000000000174E6                 db    0
.eh_frame_hdr:00000000000174E7                 db    0
.eh_frame_hdr:00000000000174E8                 db  84h
.eh_frame_hdr:00000000000174E9                 db 0B0h
.eh_frame_hdr:00000000000174EA                 db 0FEh
.eh_frame_hdr:00000000000174EB                 db 0FFh
.eh_frame_hdr:00000000000174EC                 db 0DCh
.eh_frame_hdr:00000000000174ED                 db    8
.eh_frame_hdr:00000000000174EE                 db    0
.eh_frame_hdr:00000000000174EF                 db    0
.eh_frame_hdr:00000000000174F0                 db 0A4h
.eh_frame_hdr:00000000000174F1                 db 0B7h
.eh_frame_hdr:00000000000174F2                 db 0FEh
.eh_frame_hdr:00000000000174F3                 db 0FFh
.eh_frame_hdr:00000000000174F4                 db    4
.eh_frame_hdr:00000000000174F5                 db    9
.eh_frame_hdr:00000000000174F6                 db    0
.eh_frame_hdr:00000000000174F7                 db    0
.eh_frame_hdr:00000000000174F8                 db 0B4h
.eh_frame_hdr:00000000000174F9                 db 0B7h
.eh_frame_hdr:00000000000174FA                 db 0FEh
.eh_frame_hdr:00000000000174FB                 db 0FFh
.eh_frame_hdr:00000000000174FC                 db  94h
.eh_frame_hdr:00000000000174FD                 db  0Bh
.eh_frame_hdr:00000000000174FE                 db    0
.eh_frame_hdr:00000000000174FF                 db    0
.eh_frame_hdr:0000000000017500                 db 0CAh
.eh_frame_hdr:0000000000017501                 db 0B7h
.eh_frame_hdr:0000000000017502                 db 0FEh
.eh_frame_hdr:0000000000017503                 db 0FFh
.eh_frame_hdr:0000000000017504                 db 0A8h
.eh_frame_hdr:0000000000017505                 db  0Bh
.eh_frame_hdr:0000000000017506                 db    0
.eh_frame_hdr:0000000000017507                 db    0
.eh_frame_hdr:0000000000017508                 db    4
.eh_frame_hdr:0000000000017509                 db 0B8h
.eh_frame_hdr:000000000001750A                 db 0FEh
.eh_frame_hdr:000000000001750B                 db 0FFh
.eh_frame_hdr:000000000001750C                 db 0B8h
.eh_frame_hdr:000000000001750D                 db    9
.eh_frame_hdr:000000000001750E                 db    0
.eh_frame_hdr:000000000001750F                 db    0
.eh_frame_hdr:0000000000017510                 db 0A4h
.eh_frame_hdr:0000000000017511                 db 0BFh
.eh_frame_hdr:0000000000017512                 db 0FEh
.eh_frame_hdr:0000000000017513                 db 0FFh
.eh_frame_hdr:0000000000017514                 db 0ACh
.eh_frame_hdr:0000000000017515                 db    8
.eh_frame_hdr:0000000000017516                 db    0
.eh_frame_hdr:0000000000017517                 db    0
.eh_frame_hdr:0000000000017518                 db 0B4h
.eh_frame_hdr:0000000000017519                 db 0C0h
.eh_frame_hdr:000000000001751A                 db 0FEh
.eh_frame_hdr:000000000001751B                 db 0FFh
.eh_frame_hdr:000000000001751C                 db  1Ch
.eh_frame_hdr:000000000001751D                 db    9
.eh_frame_hdr:000000000001751E                 db    0
.eh_frame_hdr:000000000001751F                 db    0
.eh_frame_hdr:0000000000017520                 db  14h
.eh_frame_hdr:0000000000017521                 db 0C2h
.eh_frame_hdr:0000000000017522                 db 0FEh
.eh_frame_hdr:0000000000017523                 db 0FFh
.eh_frame_hdr:0000000000017524                 db  48h ; H
.eh_frame_hdr:0000000000017525                 db    9
.eh_frame_hdr:0000000000017526                 db    0
.eh_frame_hdr:0000000000017527                 db    0
.eh_frame_hdr:0000000000017528                 db 0A4h
.eh_frame_hdr:0000000000017529                 db 0C2h
.eh_frame_hdr:000000000001752A                 db 0FEh
.eh_frame_hdr:000000000001752B                 db 0FFh
.eh_frame_hdr:000000000001752C                 db  8Ch
.eh_frame_hdr:000000000001752D                 db    9
.eh_frame_hdr:000000000001752E                 db    0
.eh_frame_hdr:000000000001752F                 db    0
.eh_frame_hdr:0000000000017530                 db 0D4h
.eh_frame_hdr:0000000000017531                 db 0C6h
.eh_frame_hdr:0000000000017532                 db 0FEh
.eh_frame_hdr:0000000000017533                 db 0FFh
.eh_frame_hdr:0000000000017534                 db  14h
.eh_frame_hdr:0000000000017535                 db  0Ah
.eh_frame_hdr:0000000000017536                 db    0
.eh_frame_hdr:0000000000017537                 db    0
.eh_frame_hdr:0000000000017538                 db  24h ; $
.eh_frame_hdr:0000000000017539                 db 0C9h
.eh_frame_hdr:000000000001753A                 db 0FEh
.eh_frame_hdr:000000000001753B                 db 0FFh
.eh_frame_hdr:000000000001753C                 db  50h ; P
.eh_frame_hdr:000000000001753D                 db  0Ah
.eh_frame_hdr:000000000001753E                 db    0
.eh_frame_hdr:000000000001753F                 db    0
.eh_frame_hdr:0000000000017540                 db 0A4h
.eh_frame_hdr:0000000000017541                 db 0C9h
.eh_frame_hdr:0000000000017542                 db 0FEh
.eh_frame_hdr:0000000000017543                 db 0FFh
.eh_frame_hdr:0000000000017544                 db  74h ; t
.eh_frame_hdr:0000000000017545                 db  0Ah
.eh_frame_hdr:0000000000017546                 db    0
.eh_frame_hdr:0000000000017547                 db    0
.eh_frame_hdr:0000000000017548                 db  74h ; t
.eh_frame_hdr:0000000000017549                 db 0CEh
.eh_frame_hdr:000000000001754A                 db 0FEh
.eh_frame_hdr:000000000001754B                 db 0FFh
.eh_frame_hdr:000000000001754C                 db 0C4h
.eh_frame_hdr:000000000001754D                 db  0Ah
.eh_frame_hdr:000000000001754E                 db    0
.eh_frame_hdr:000000000001754F                 db    0
.eh_frame_hdr:0000000000017550                 db 0D4h
.eh_frame_hdr:0000000000017551                 db 0D6h
.eh_frame_hdr:0000000000017552                 db 0FEh
.eh_frame_hdr:0000000000017553                 db 0FFh
.eh_frame_hdr:0000000000017554                 db  14h
.eh_frame_hdr:0000000000017555                 db  0Bh
.eh_frame_hdr:0000000000017556                 db    0
.eh_frame_hdr:0000000000017557                 db    0
.eh_frame_hdr:0000000000017558                 db  24h ; $
.eh_frame_hdr:0000000000017559                 db 0D7h
.eh_frame_hdr:000000000001755A                 db 0FEh
.eh_frame_hdr:000000000001755B                 db 0FFh
.eh_frame_hdr:000000000001755C                 db  38h ; 8
.eh_frame_hdr:000000000001755D                 db  0Bh
.eh_frame_hdr:000000000001755E                 db    0
.eh_frame_hdr:000000000001755F                 db    0
.eh_frame_hdr:0000000000017560                 db 0D4h
.eh_frame_hdr:0000000000017561                 db 0D7h
.eh_frame_hdr:0000000000017562                 db 0FEh
.eh_frame_hdr:0000000000017563                 db 0FFh
.eh_frame_hdr:0000000000017564                 db  74h ; t
.eh_frame_hdr:0000000000017565                 db  0Bh
.eh_frame_hdr:0000000000017566                 db    0
.eh_frame_hdr:0000000000017567                 db    0
.eh_frame_hdr:0000000000017568                 db  14h
.eh_frame_hdr:0000000000017569                 db 0D8h
.eh_frame_hdr:000000000001756A                 db 0FEh
.eh_frame_hdr:000000000001756B                 db 0FFh
.eh_frame_hdr:000000000001756C                 db 0C0h
.eh_frame_hdr:000000000001756D                 db  0Bh
.eh_frame_hdr:000000000001756E                 db    0
.eh_frame_hdr:000000000001756F                 db    0
.eh_frame_hdr:0000000000017570                 db 0D4h
.eh_frame_hdr:0000000000017571                 db 0D8h
.eh_frame_hdr:0000000000017572                 db 0FEh
.eh_frame_hdr:0000000000017573                 db 0FFh
.eh_frame_hdr:0000000000017574                 db 0F8h
.eh_frame_hdr:0000000000017575                 db  0Bh
.eh_frame_hdr:0000000000017576                 db    0
.eh_frame_hdr:0000000000017577                 db    0
.eh_frame_hdr:0000000000017578                 db 0E4h
.eh_frame_hdr:0000000000017579                 db 0D9h
.eh_frame_hdr:000000000001757A                 db 0FEh
.eh_frame_hdr:000000000001757B                 db 0FFh
.eh_frame_hdr:000000000001757C                 db  60h ; `
.eh_frame_hdr:000000000001757D                 db  0Ch
.eh_frame_hdr:000000000001757E                 db    0
.eh_frame_hdr:000000000001757F                 db    0
.eh_frame_hdr:0000000000017580                 db  34h ; 4
.eh_frame_hdr:0000000000017581                 db 0DBh
.eh_frame_hdr:0000000000017582                 db 0FEh
.eh_frame_hdr:0000000000017583                 db 0FFh
.eh_frame_hdr:0000000000017584                 db 0B0h
.eh_frame_hdr:0000000000017585                 db  0Ch
.eh_frame_hdr:0000000000017586                 db    0
.eh_frame_hdr:0000000000017587                 db    0
.eh_frame_hdr:0000000000017588                 db 0F4h
.eh_frame_hdr:0000000000017589                 db 0DBh
.eh_frame_hdr:000000000001758A                 db 0FEh
.eh_frame_hdr:000000000001758B                 db 0FFh
.eh_frame_hdr:000000000001758C                 db    0
.eh_frame_hdr:000000000001758D                 db  0Dh
.eh_frame_hdr:000000000001758E                 db    0
.eh_frame_hdr:000000000001758F                 db    0
.eh_frame_hdr:0000000000017590                 db    4
.eh_frame_hdr:0000000000017591                 db 0E0h
.eh_frame_hdr:0000000000017592                 db 0FEh
.eh_frame_hdr:0000000000017593                 db 0FFh
.eh_frame_hdr:0000000000017594                 db  68h ; h
.eh_frame_hdr:0000000000017595                 db  0Dh
.eh_frame_hdr:0000000000017596                 db    0
.eh_frame_hdr:0000000000017597                 db    0
.eh_frame_hdr:0000000000017598                 db 0D4h
.eh_frame_hdr:0000000000017599                 db 0E0h
.eh_frame_hdr:000000000001759A                 db 0FEh
.eh_frame_hdr:000000000001759B                 db 0FFh
.eh_frame_hdr:000000000001759C                 db 0C4h
.eh_frame_hdr:000000000001759D                 db  0Dh
.eh_frame_hdr:000000000001759E                 db    0
.eh_frame_hdr:000000000001759F                 db    0
.eh_frame_hdr:00000000000175A0                 db  54h ; T
.eh_frame_hdr:00000000000175A1                 db 0E1h
.eh_frame_hdr:00000000000175A2                 db 0FEh
.eh_frame_hdr:00000000000175A3                 db 0FFh
.eh_frame_hdr:00000000000175A4                 db 0FCh
.eh_frame_hdr:00000000000175A5                 db  0Dh
.eh_frame_hdr:00000000000175A6                 db    0
.eh_frame_hdr:00000000000175A7                 db    0
.eh_frame_hdr:00000000000175A8                 db  84h
.eh_frame_hdr:00000000000175A9                 db 0E1h
.eh_frame_hdr:00000000000175AA                 db 0FEh
.eh_frame_hdr:00000000000175AB                 db 0FFh
.eh_frame_hdr:00000000000175AC                 db  18h
.eh_frame_hdr:00000000000175AD                 db  0Eh
.eh_frame_hdr:00000000000175AE                 db    0
.eh_frame_hdr:00000000000175AF                 db    0
.eh_frame_hdr:00000000000175B0                 db 0B4h
.eh_frame_hdr:00000000000175B1                 db 0E1h
.eh_frame_hdr:00000000000175B2                 db 0FEh
.eh_frame_hdr:00000000000175B3                 db 0FFh
.eh_frame_hdr:00000000000175B4                 db  34h ; 4
.eh_frame_hdr:00000000000175B5                 db  0Eh
.eh_frame_hdr:00000000000175B6                 db    0
.eh_frame_hdr:00000000000175B7                 db    0
.eh_frame_hdr:00000000000175B8                 db 0F4h
.eh_frame_hdr:00000000000175B9                 db 0E1h
.eh_frame_hdr:00000000000175BA                 db 0FEh
.eh_frame_hdr:00000000000175BB                 db 0FFh
.eh_frame_hdr:00000000000175BC                 db  50h ; P
.eh_frame_hdr:00000000000175BD                 db  0Eh
.eh_frame_hdr:00000000000175BE                 db    0
.eh_frame_hdr:00000000000175BF                 db    0
.eh_frame_hdr:00000000000175C0                 db  24h ; $
.eh_frame_hdr:00000000000175C1                 db 0E2h
.eh_frame_hdr:00000000000175C2                 db 0FEh
.eh_frame_hdr:00000000000175C3                 db 0FFh
.eh_frame_hdr:00000000000175C4                 db  6Ch ; l
.eh_frame_hdr:00000000000175C5                 db  0Eh
.eh_frame_hdr:00000000000175C6                 db    0
.eh_frame_hdr:00000000000175C7                 db    0
.eh_frame_hdr:00000000000175C8                 db  34h ; 4
.eh_frame_hdr:00000000000175C9                 db 0E4h
.eh_frame_hdr:00000000000175CA                 db 0FEh
.eh_frame_hdr:00000000000175CB                 db 0FFh
.eh_frame_hdr:00000000000175CC                 db 0ECh
.eh_frame_hdr:00000000000175CD                 db  0Eh
.eh_frame_hdr:00000000000175CE                 db    0
.eh_frame_hdr:00000000000175CF                 db    0
.eh_frame_hdr:00000000000175D0                 db  64h ; d
.eh_frame_hdr:00000000000175D1                 db 0E4h
.eh_frame_hdr:00000000000175D2                 db 0FEh
.eh_frame_hdr:00000000000175D3                 db 0FFh
.eh_frame_hdr:00000000000175D4                 db  0Ch
.eh_frame_hdr:00000000000175D5                 db  0Fh
.eh_frame_hdr:00000000000175D6                 db    0
.eh_frame_hdr:00000000000175D7                 db    0
.eh_frame_hdr:00000000000175D8                 db  74h ; t
.eh_frame_hdr:00000000000175D9                 db  25h ; %
.eh_frame_hdr:00000000000175DA                 db 0FFh
.eh_frame_hdr:00000000000175DB                 db 0FFh
.eh_frame_hdr:00000000000175DC                 db  3Ch ; <
.eh_frame_hdr:00000000000175DD                 db  0Fh
.eh_frame_hdr:00000000000175DE                 db    0
.eh_frame_hdr:00000000000175DF                 db    0
.eh_frame_hdr:00000000000175E0                 db 0E4h
.eh_frame_hdr:00000000000175E1                 db  26h ; &
.eh_frame_hdr:00000000000175E2                 db 0FFh
.eh_frame_hdr:00000000000175E3                 db 0FFh
.eh_frame_hdr:00000000000175E4                 db  6Ch ; l
.eh_frame_hdr:00000000000175E5                 db  0Fh
.eh_frame_hdr:00000000000175E6                 db    0
.eh_frame_hdr:00000000000175E7                 db    0
.eh_frame_hdr:00000000000175E8                 db 0F4h
.eh_frame_hdr:00000000000175E9                 db  26h ; &
.eh_frame_hdr:00000000000175EA                 db 0FFh
.eh_frame_hdr:00000000000175EB                 db 0FFh
.eh_frame_hdr:00000000000175EC                 db  80h
.eh_frame_hdr:00000000000175ED                 db  0Fh
.eh_frame_hdr:00000000000175EE                 db    0
.eh_frame_hdr:00000000000175EF                 db    0
.eh_frame_hdr:00000000000175F0                 db  14h
.eh_frame_hdr:00000000000175F1                 db  27h ; '
.eh_frame_hdr:00000000000175F2                 db 0FFh
.eh_frame_hdr:00000000000175F3                 db 0FFh
.eh_frame_hdr:00000000000175F4                 db  94h
.eh_frame_hdr:00000000000175F5                 db  0Fh
.eh_frame_hdr:00000000000175F6                 db    0
.eh_frame_hdr:00000000000175F7                 db    0
.eh_frame_hdr:00000000000175F8                 db  34h ; 4
.eh_frame_hdr:00000000000175F9                 db  27h ; '
.eh_frame_hdr:00000000000175FA                 db 0FFh
.eh_frame_hdr:00000000000175FB                 db 0FFh
.eh_frame_hdr:00000000000175FC                 db 0B0h
.eh_frame_hdr:00000000000175FD                 db  0Fh
.eh_frame_hdr:00000000000175FE                 db    0
.eh_frame_hdr:00000000000175FF                 db    0
.eh_frame_hdr:0000000000017600                 db 0A4h
.eh_frame_hdr:0000000000017601                 db  27h ; '
.eh_frame_hdr:0000000000017602                 db 0FFh
.eh_frame_hdr:0000000000017603                 db 0FFh
.eh_frame_hdr:0000000000017604                 db 0D4h
.eh_frame_hdr:0000000000017605                 db  0Fh
.eh_frame_hdr:0000000000017606                 db    0
.eh_frame_hdr:0000000000017607                 db    0
.eh_frame_hdr:0000000000017608                 db    4
.eh_frame_hdr:0000000000017609                 db  28h ; (
.eh_frame_hdr:000000000001760A                 db 0FFh
.eh_frame_hdr:000000000001760B                 db 0FFh
.eh_frame_hdr:000000000001760C                 db 0F0h
.eh_frame_hdr:000000000001760D                 db  0Fh
.eh_frame_hdr:000000000001760E                 db    0
.eh_frame_hdr:000000000001760F                 db    0
.eh_frame_hdr:0000000000017610                 db  84h
.eh_frame_hdr:0000000000017611                 db  28h ; (
.eh_frame_hdr:0000000000017612                 db 0FFh
.eh_frame_hdr:0000000000017613                 db 0FFh
.eh_frame_hdr:0000000000017614                 db  2Ch ; ,
.eh_frame_hdr:0000000000017615                 db  10h
.eh_frame_hdr:0000000000017616                 db    0
.eh_frame_hdr:0000000000017617                 db    0
.eh_frame_hdr:0000000000017618                 db 0C4h
.eh_frame_hdr:0000000000017619                 db  28h ; (
.eh_frame_hdr:000000000001761A                 db 0FFh
.eh_frame_hdr:000000000001761B                 db 0FFh
.eh_frame_hdr:000000000001761C                 db  48h ; H
.eh_frame_hdr:000000000001761D                 db  10h
.eh_frame_hdr:000000000001761E                 db    0
.eh_frame_hdr:000000000001761F                 db    0
.eh_frame_hdr:0000000000017620                 db 0D4h
.eh_frame_hdr:0000000000017621                 db  28h ; (
.eh_frame_hdr:0000000000017622                 db 0FFh
.eh_frame_hdr:0000000000017623                 db 0FFh
.eh_frame_hdr:0000000000017624                 db  5Ch ; \
.eh_frame_hdr:0000000000017625                 db  10h
.eh_frame_hdr:0000000000017626                 db    0
.eh_frame_hdr:0000000000017627                 db    0
.eh_frame_hdr:0000000000017628                 db    4
.eh_frame_hdr:0000000000017629                 db  29h ; )
.eh_frame_hdr:000000000001762A                 db 0FFh
.eh_frame_hdr:000000000001762B                 db 0FFh
.eh_frame_hdr:000000000001762C                 db  70h ; p
.eh_frame_hdr:000000000001762D                 db  10h
.eh_frame_hdr:000000000001762E                 db    0
.eh_frame_hdr:000000000001762F                 db    0
.eh_frame_hdr:0000000000017630                 db  14h
.eh_frame_hdr:0000000000017631                 db  2Ch ; ,
.eh_frame_hdr:0000000000017632                 db 0FFh
.eh_frame_hdr:0000000000017633                 db 0FFh
.eh_frame_hdr:0000000000017634                 db 0C4h
.eh_frame_hdr:0000000000017635                 db  10h
.eh_frame_hdr:0000000000017636                 db    0
.eh_frame_hdr:0000000000017637                 db    0
.eh_frame_hdr:0000000000017638                 db  34h ; 4
.eh_frame_hdr:0000000000017639                 db  2Ch ; ,
.eh_frame_hdr:000000000001763A                 db 0FFh
.eh_frame_hdr:000000000001763B                 db 0FFh
.eh_frame_hdr:000000000001763C                 db 0D8h
.eh_frame_hdr:000000000001763D                 db  10h
.eh_frame_hdr:000000000001763E                 db    0
.eh_frame_hdr:000000000001763F                 db    0
.eh_frame_hdr:0000000000017640                 db  94h
.eh_frame_hdr:0000000000017641                 db  2Ch ; ,
.eh_frame_hdr:0000000000017642                 db 0FFh
.eh_frame_hdr:0000000000017643                 db 0FFh
.eh_frame_hdr:0000000000017644                 db    4
.eh_frame_hdr:0000000000017645                 db  11h
.eh_frame_hdr:0000000000017646                 db    0
.eh_frame_hdr:0000000000017647                 db    0
.eh_frame_hdr:0000000000017648                 db 0B4h
.eh_frame_hdr:0000000000017649                 db  2Ch ; ,
.eh_frame_hdr:000000000001764A                 db 0FFh
.eh_frame_hdr:000000000001764B                 db 0FFh
.eh_frame_hdr:000000000001764C                 db  18h
.eh_frame_hdr:000000000001764D                 db  11h
.eh_frame_hdr:000000000001764E                 db    0
.eh_frame_hdr:000000000001764F                 db    0
.eh_frame_hdr:0000000000017650                 db  24h ; $
.eh_frame_hdr:0000000000017651                 db  2Eh ; .
.eh_frame_hdr:0000000000017652                 db 0FFh
.eh_frame_hdr:0000000000017653                 db 0FFh
.eh_frame_hdr:0000000000017654                 db  64h ; d
.eh_frame_hdr:0000000000017655                 db  11h
.eh_frame_hdr:0000000000017656                 db    0
.eh_frame_hdr:0000000000017657                 db    0
.eh_frame_hdr:0000000000017658                 db  84h
.eh_frame_hdr:0000000000017659                 db  2Fh ; /
.eh_frame_hdr:000000000001765A                 db 0FFh
.eh_frame_hdr:000000000001765B                 db 0FFh
.eh_frame_hdr:000000000001765C                 db 0ACh
.eh_frame_hdr:000000000001765D                 db  11h
.eh_frame_hdr:000000000001765E                 db    0
.eh_frame_hdr:000000000001765F                 db    0
.eh_frame_hdr:0000000000017660                 db  14h
.eh_frame_hdr:0000000000017661                 db  30h ; 0
.eh_frame_hdr:0000000000017662                 db 0FFh
.eh_frame_hdr:0000000000017663                 db 0FFh
.eh_frame_hdr:0000000000017664                 db 0E4h
.eh_frame_hdr:0000000000017665                 db  11h
.eh_frame_hdr:0000000000017666                 db    0
.eh_frame_hdr:0000000000017667                 db    0
.eh_frame_hdr:0000000000017668                 db  64h ; d
.eh_frame_hdr:0000000000017669                 db  30h ; 0
.eh_frame_hdr:000000000001766A                 db 0FFh
.eh_frame_hdr:000000000001766B                 db 0FFh
.eh_frame_hdr:000000000001766C                 db  14h
.eh_frame_hdr:000000000001766D                 db  12h
.eh_frame_hdr:000000000001766E                 db    0
.eh_frame_hdr:000000000001766F                 db    0
.eh_frame_hdr:0000000000017670                 db  54h ; T
.eh_frame_hdr:0000000000017671                 db  31h ; 1
.eh_frame_hdr:0000000000017672                 db 0FFh
.eh_frame_hdr:0000000000017673                 db 0FFh
.eh_frame_hdr:0000000000017674                 db  64h ; d
.eh_frame_hdr:0000000000017675                 db  12h
.eh_frame_hdr:0000000000017676                 db    0
.eh_frame_hdr:0000000000017677                 db    0
.eh_frame_hdr:0000000000017678                 db 0A4h
.eh_frame_hdr:0000000000017679                 db  31h ; 1
.eh_frame_hdr:000000000001767A                 db 0FFh
.eh_frame_hdr:000000000001767B                 db 0FFh
.eh_frame_hdr:000000000001767C                 db  80h
.eh_frame_hdr:000000000001767D                 db  12h
.eh_frame_hdr:000000000001767E                 db    0
.eh_frame_hdr:000000000001767F                 db    0
.eh_frame_hdr:0000000000017680                 db 0C4h
.eh_frame_hdr:0000000000017681                 db  37h ; 7
.eh_frame_hdr:0000000000017682                 db 0FFh
.eh_frame_hdr:0000000000017683                 db 0FFh
.eh_frame_hdr:0000000000017684                 db 0D4h
.eh_frame_hdr:0000000000017685                 db  12h
.eh_frame_hdr:0000000000017686                 db    0
.eh_frame_hdr:0000000000017687                 db    0
.eh_frame_hdr:0000000000017688                 db 0D4h
.eh_frame_hdr:0000000000017689                 db  37h ; 7
.eh_frame_hdr:000000000001768A                 db 0FFh
.eh_frame_hdr:000000000001768B                 db 0FFh
.eh_frame_hdr:000000000001768C                 db 0ECh
.eh_frame_hdr:000000000001768D                 db  12h
.eh_frame_hdr:000000000001768E                 db    0
.eh_frame_hdr:000000000001768F                 db    0
.eh_frame_hdr:0000000000017690                 db  14h
.eh_frame_hdr:0000000000017691                 db  38h ; 8
.eh_frame_hdr:0000000000017692                 db 0FFh
.eh_frame_hdr:0000000000017693                 db 0FFh
.eh_frame_hdr:0000000000017694                 db    4
.eh_frame_hdr:0000000000017695                 db  13h
.eh_frame_hdr:0000000000017696                 db    0
.eh_frame_hdr:0000000000017697                 db    0
.eh_frame_hdr:0000000000017698                 db  34h ; 4
.eh_frame_hdr:0000000000017699                 db  38h ; 8
.eh_frame_hdr:000000000001769A                 db 0FFh
.eh_frame_hdr:000000000001769B                 db 0FFh
.eh_frame_hdr:000000000001769C                 db  20h
.eh_frame_hdr:000000000001769D                 db  13h
.eh_frame_hdr:000000000001769E                 db    0
.eh_frame_hdr:000000000001769F                 db    0
.eh_frame_hdr:00000000000176A0                 db  54h ; T
.eh_frame_hdr:00000000000176A1                 db  38h ; 8
.eh_frame_hdr:00000000000176A2                 db 0FFh
.eh_frame_hdr:00000000000176A3                 db 0FFh
.eh_frame_hdr:00000000000176A4                 db  34h ; 4
.eh_frame_hdr:00000000000176A5                 db  13h
.eh_frame_hdr:00000000000176A6                 db    0
.eh_frame_hdr:00000000000176A7                 db    0
.eh_frame_hdr:00000000000176A8                 db 0A4h
.eh_frame_hdr:00000000000176A9                 db  38h ; 8
.eh_frame_hdr:00000000000176AA                 db 0FFh
.eh_frame_hdr:00000000000176AB                 db 0FFh
.eh_frame_hdr:00000000000176AC                 db  54h ; T
.eh_frame_hdr:00000000000176AD                 db  13h
.eh_frame_hdr:00000000000176AE                 db    0
.eh_frame_hdr:00000000000176AF                 db    0
.eh_frame_hdr:00000000000176B0                 db  14h
.eh_frame_hdr:00000000000176B1                 db  39h ; 9
.eh_frame_hdr:00000000000176B2                 db 0FFh
.eh_frame_hdr:00000000000176B3                 db 0FFh
.eh_frame_hdr:00000000000176B4                 db  6Ch ; l
.eh_frame_hdr:00000000000176B5                 db  13h
.eh_frame_hdr:00000000000176B6                 db    0
.eh_frame_hdr:00000000000176B7                 db    0
.eh_frame_hdr:00000000000176B8                 db  24h ; $
.eh_frame_hdr:00000000000176B9                 db  39h ; 9
.eh_frame_hdr:00000000000176BA                 db 0FFh
.eh_frame_hdr:00000000000176BB                 db 0FFh
.eh_frame_hdr:00000000000176BC                 db  80h
.eh_frame_hdr:00000000000176BD                 db  13h
.eh_frame_hdr:00000000000176BE                 db    0
.eh_frame_hdr:00000000000176BF                 db    0
.eh_frame_hdr:00000000000176C0                 db  34h ; 4
.eh_frame_hdr:00000000000176C1                 db  3Ah ; :
.eh_frame_hdr:00000000000176C2                 db 0FFh
.eh_frame_hdr:00000000000176C3                 db 0FFh
.eh_frame_hdr:00000000000176C4                 db 0BCh
.eh_frame_hdr:00000000000176C5                 db  13h
.eh_frame_hdr:00000000000176C6                 db    0
.eh_frame_hdr:00000000000176C7                 db    0
.eh_frame_hdr:00000000000176C8                 db  44h ; D
.eh_frame_hdr:00000000000176C9                 db  3Ah ; :
.eh_frame_hdr:00000000000176CA                 db 0FFh
.eh_frame_hdr:00000000000176CB                 db 0FFh
.eh_frame_hdr:00000000000176CC                 db 0D0h
.eh_frame_hdr:00000000000176CD                 db  13h
.eh_frame_hdr:00000000000176CE                 db    0
.eh_frame_hdr:00000000000176CF                 db    0
.eh_frame_hdr:00000000000176D0                 db  54h ; T
.eh_frame_hdr:00000000000176D1                 db  3Ah ; :
.eh_frame_hdr:00000000000176D2                 db 0FFh
.eh_frame_hdr:00000000000176D3                 db 0FFh
.eh_frame_hdr:00000000000176D4                 db 0E4h
.eh_frame_hdr:00000000000176D5                 db  13h
.eh_frame_hdr:00000000000176D6                 db    0
.eh_frame_hdr:00000000000176D7                 db    0
.eh_frame_hdr:00000000000176D8                 db    4
.eh_frame_hdr:00000000000176D9                 db  3Bh ; ;
.eh_frame_hdr:00000000000176DA                 db 0FFh
.eh_frame_hdr:00000000000176DB                 db 0FFh
.eh_frame_hdr:00000000000176DC                 db  14h
.eh_frame_hdr:00000000000176DD                 db  14h
.eh_frame_hdr:00000000000176DE                 db    0
.eh_frame_hdr:00000000000176DF                 db    0
.eh_frame_hdr:00000000000176E0                 db  24h ; $
.eh_frame_hdr:00000000000176E1                 db  3Bh ; ;
.eh_frame_hdr:00000000000176E2                 db 0FFh
.eh_frame_hdr:00000000000176E3                 db 0FFh
.eh_frame_hdr:00000000000176E4                 db  34h ; 4
.eh_frame_hdr:00000000000176E5                 db  14h
.eh_frame_hdr:00000000000176E6                 db    0
.eh_frame_hdr:00000000000176E7                 db    0
.eh_frame_hdr:00000000000176E8                 db  84h
.eh_frame_hdr:00000000000176E9                 db  3Bh ; ;
.eh_frame_hdr:00000000000176EA                 db 0FFh
.eh_frame_hdr:00000000000176EB                 db 0FFh
.eh_frame_hdr:00000000000176EC                 db  68h ; h
.eh_frame_hdr:00000000000176ED                 db  14h
.eh_frame_hdr:00000000000176EE                 db    0
.eh_frame_hdr:00000000000176EF                 db    0
.eh_frame_hdr:00000000000176F0                 db 0E4h
.eh_frame_hdr:00000000000176F1                 db  3Bh ; ;
.eh_frame_hdr:00000000000176F2                 db 0FFh
.eh_frame_hdr:00000000000176F3                 db 0FFh
.eh_frame_hdr:00000000000176F4                 db  94h
.eh_frame_hdr:00000000000176F5                 db  14h
.eh_frame_hdr:00000000000176F6                 db    0
.eh_frame_hdr:00000000000176F7                 db    0
.eh_frame_hdr:00000000000176F8                 db  44h ; D
.eh_frame_hdr:00000000000176F9                 db  3Ch ; <
.eh_frame_hdr:00000000000176FA                 db 0FFh
.eh_frame_hdr:00000000000176FB                 db 0FFh
.eh_frame_hdr:00000000000176FC                 db 0A8h
.eh_frame_hdr:00000000000176FD                 db  14h
.eh_frame_hdr:00000000000176FE                 db    0
.eh_frame_hdr:00000000000176FF                 db    0
.eh_frame_hdr:0000000000017700                 db  94h
.eh_frame_hdr:0000000000017701                 db  3Ch ; <
.eh_frame_hdr:0000000000017702                 db 0FFh
.eh_frame_hdr:0000000000017703                 db 0FFh
.eh_frame_hdr:0000000000017704                 db 0D4h
.eh_frame_hdr:0000000000017705                 db  14h
.eh_frame_hdr:0000000000017706                 db    0
.eh_frame_hdr:0000000000017707                 db    0
.eh_frame_hdr:0000000000017708                 db 0D4h
.eh_frame_hdr:0000000000017709                 db  3Ch ; <
.eh_frame_hdr:000000000001770A                 db 0FFh
.eh_frame_hdr:000000000001770B                 db 0FFh
.eh_frame_hdr:000000000001770C                 db 0FCh
.eh_frame_hdr:000000000001770D                 db  14h
.eh_frame_hdr:000000000001770E                 db    0
.eh_frame_hdr:000000000001770F                 db    0
.eh_frame_hdr:0000000000017710                 db 0E4h
.eh_frame_hdr:0000000000017711                 db  3Ch ; <
.eh_frame_hdr:0000000000017712                 db 0FFh
.eh_frame_hdr:0000000000017713                 db 0FFh
.eh_frame_hdr:0000000000017714                 db  10h
.eh_frame_hdr:0000000000017715                 db  15h
.eh_frame_hdr:0000000000017716                 db    0
.eh_frame_hdr:0000000000017717                 db    0
.eh_frame_hdr:0000000000017718                 db  14h
.eh_frame_hdr:0000000000017719                 db  3Dh ; =
.eh_frame_hdr:000000000001771A                 db 0FFh
.eh_frame_hdr:000000000001771B                 db 0FFh
.eh_frame_hdr:000000000001771C                 db  2Ch ; ,
.eh_frame_hdr:000000000001771D                 db  15h
.eh_frame_hdr:000000000001771E                 db    0
.eh_frame_hdr:000000000001771F                 db    0
.eh_frame_hdr:0000000000017720                 db  84h
.eh_frame_hdr:0000000000017721                 db  3Dh ; =
.eh_frame_hdr:0000000000017722                 db 0FFh
.eh_frame_hdr:0000000000017723                 db 0FFh
.eh_frame_hdr:0000000000017724                 db  4Ch ; L
.eh_frame_hdr:0000000000017725                 db  15h
.eh_frame_hdr:0000000000017726                 db    0
.eh_frame_hdr:0000000000017727                 db    0
.eh_frame_hdr:0000000000017728                 db  14h
.eh_frame_hdr:0000000000017729                 db  3Eh ; >
.eh_frame_hdr:000000000001772A                 db 0FFh
.eh_frame_hdr:000000000001772B                 db 0FFh
.eh_frame_hdr:000000000001772C                 db 0ACh
.eh_frame_hdr:000000000001772D                 db  15h
.eh_frame_hdr:000000000001772E                 db    0
.eh_frame_hdr:000000000001772F                 db    0
.eh_frame_hdr:0000000000017730                 db  74h ; t
.eh_frame_hdr:0000000000017731                 db  3Eh ; >
.eh_frame_hdr:0000000000017732                 db 0FFh
.eh_frame_hdr:0000000000017733                 db 0FFh
.eh_frame_hdr:0000000000017734                 db 0CCh
.eh_frame_hdr:0000000000017735                 db  15h
.eh_frame_hdr:0000000000017736                 db    0
.eh_frame_hdr:0000000000017737                 db    0
.eh_frame_hdr:0000000000017738                 db  64h ; d
.eh_frame_hdr:0000000000017739                 db  3Fh ; ?
.eh_frame_hdr:000000000001773A                 db 0FFh
.eh_frame_hdr:000000000001773B                 db 0FFh
.eh_frame_hdr:000000000001773C                 db 0E4h
.eh_frame_hdr:000000000001773D                 db  15h
.eh_frame_hdr:000000000001773E                 db    0
.eh_frame_hdr:000000000001773F                 db    0
.eh_frame_hdr:0000000000017740                 db 0F4h
.eh_frame_hdr:0000000000017741                 db  40h ; @
.eh_frame_hdr:0000000000017742                 db 0FFh
.eh_frame_hdr:0000000000017743                 db 0FFh
.eh_frame_hdr:0000000000017744                 db 0F8h
.eh_frame_hdr:0000000000017745                 db  15h
.eh_frame_hdr:0000000000017746                 db    0
.eh_frame_hdr:0000000000017747                 db    0
.eh_frame_hdr:0000000000017748                 db    4
.eh_frame_hdr:0000000000017749                 db  41h ; A
.eh_frame_hdr:000000000001774A                 db 0FFh
.eh_frame_hdr:000000000001774B                 db 0FFh
.eh_frame_hdr:000000000001774C                 db  0Ch
.eh_frame_hdr:000000000001774D                 db  16h
.eh_frame_hdr:000000000001774E                 db    0
.eh_frame_hdr:000000000001774F                 db    0
.eh_frame_hdr:0000000000017750                 db  24h ; $
.eh_frame_hdr:0000000000017751                 db  41h ; A
.eh_frame_hdr:0000000000017752                 db 0FFh
.eh_frame_hdr:0000000000017753                 db 0FFh
.eh_frame_hdr:0000000000017754                 db  2Ch ; ,
.eh_frame_hdr:0000000000017755                 db  16h
.eh_frame_hdr:0000000000017756                 db    0
.eh_frame_hdr:0000000000017757                 db    0
.eh_frame_hdr:0000000000017758                 db  24h ; $
.eh_frame_hdr:0000000000017759                 db  42h ; B
.eh_frame_hdr:000000000001775A                 db 0FFh
.eh_frame_hdr:000000000001775B                 db 0FFh
.eh_frame_hdr:000000000001775C                 db  7Ch ; |
.eh_frame_hdr:000000000001775D                 db  16h
.eh_frame_hdr:000000000001775E                 db    0
.eh_frame_hdr:000000000001775F                 db    0
.eh_frame_hdr:0000000000017760                 db 0A4h
.eh_frame_hdr:0000000000017761                 db  42h ; B
.eh_frame_hdr:0000000000017762                 db 0FFh
.eh_frame_hdr:0000000000017763                 db 0FFh
.eh_frame_hdr:0000000000017764                 db 0CCh
.eh_frame_hdr:0000000000017765                 db  16h
.eh_frame_hdr:0000000000017766                 db    0
.eh_frame_hdr:0000000000017767                 db    0
.eh_frame_hdr:0000000000017768                 db  44h ; D
.eh_frame_hdr:0000000000017769                 db  43h ; C
.eh_frame_hdr:000000000001776A                 db 0FFh
.eh_frame_hdr:000000000001776B                 db 0FFh
.eh_frame_hdr:000000000001776C                 db 0E0h
.eh_frame_hdr:000000000001776D                 db  16h
.eh_frame_hdr:000000000001776E                 db    0
.eh_frame_hdr:000000000001776F                 db    0
.eh_frame_hdr:0000000000017770                 db  54h ; T
.eh_frame_hdr:0000000000017771                 db  43h ; C
.eh_frame_hdr:0000000000017772                 db 0FFh
.eh_frame_hdr:0000000000017773                 db 0FFh
.eh_frame_hdr:0000000000017774                 db 0F4h
.eh_frame_hdr:0000000000017775                 db  16h
.eh_frame_hdr:0000000000017776                 db    0
.eh_frame_hdr:0000000000017777                 db    0
.eh_frame_hdr:0000000000017778                 db  64h ; d
.eh_frame_hdr:0000000000017779                 db  43h ; C
.eh_frame_hdr:000000000001777A                 db 0FFh
.eh_frame_hdr:000000000001777B                 db 0FFh
.eh_frame_hdr:000000000001777C                 db    8
.eh_frame_hdr:000000000001777D                 db  17h
.eh_frame_hdr:000000000001777E                 db    0
.eh_frame_hdr:000000000001777F                 db    0
.eh_frame_hdr:0000000000017780                 db  94h
.eh_frame_hdr:0000000000017781                 db  43h ; C
.eh_frame_hdr:0000000000017782                 db 0FFh
.eh_frame_hdr:0000000000017783                 db 0FFh
.eh_frame_hdr:0000000000017784                 db  24h ; $
.eh_frame_hdr:0000000000017785                 db  17h
.eh_frame_hdr:0000000000017786                 db    0
.eh_frame_hdr:0000000000017787                 db    0
.eh_frame_hdr:0000000000017788                 db 0B4h
.eh_frame_hdr:0000000000017789                 db  44h ; D
.eh_frame_hdr:000000000001778A                 db 0FFh
.eh_frame_hdr:000000000001778B                 db 0FFh
.eh_frame_hdr:000000000001778C                 db  84h
.eh_frame_hdr:000000000001778D                 db  17h
.eh_frame_hdr:000000000001778E                 db    0
.eh_frame_hdr:000000000001778F                 db    0
.eh_frame_hdr:0000000000017790                 db  34h ; 4
.eh_frame_hdr:0000000000017791                 db  45h ; E
.eh_frame_hdr:0000000000017792                 db 0FFh
.eh_frame_hdr:0000000000017793                 db 0FFh
.eh_frame_hdr:0000000000017794                 db  98h
.eh_frame_hdr:0000000000017795                 db  17h
.eh_frame_hdr:0000000000017796                 db    0
.eh_frame_hdr:0000000000017797                 db    0
.eh_frame_hdr:0000000000017798                 db  74h ; t
.eh_frame_hdr:0000000000017799                 db  46h ; F
.eh_frame_hdr:000000000001779A                 db 0FFh
.eh_frame_hdr:000000000001779B                 db 0FFh
.eh_frame_hdr:000000000001779C                 db 0F8h
.eh_frame_hdr:000000000001779D                 db  17h
.eh_frame_hdr:000000000001779E                 db    0
.eh_frame_hdr:000000000001779F                 db    0
.eh_frame_hdr:00000000000177A0                 db  84h
.eh_frame_hdr:00000000000177A1                 db  46h ; F
.eh_frame_hdr:00000000000177A2                 db 0FFh
.eh_frame_hdr:00000000000177A3                 db 0FFh
.eh_frame_hdr:00000000000177A4                 db  0Ch
.eh_frame_hdr:00000000000177A5                 db  18h
.eh_frame_hdr:00000000000177A6                 db    0
.eh_frame_hdr:00000000000177A7                 db    0
.eh_frame_hdr:00000000000177A8                 db  94h
.eh_frame_hdr:00000000000177A9                 db  46h ; F
.eh_frame_hdr:00000000000177AA                 db 0FFh
.eh_frame_hdr:00000000000177AB                 db 0FFh
.eh_frame_hdr:00000000000177AC                 db  20h
.eh_frame_hdr:00000000000177AD                 db  18h
.eh_frame_hdr:00000000000177AE                 db    0
.eh_frame_hdr:00000000000177AF                 db    0
.eh_frame_hdr:00000000000177B0                 db 0A4h
.eh_frame_hdr:00000000000177B1                 db  46h ; F
.eh_frame_hdr:00000000000177B2                 db 0FFh
.eh_frame_hdr:00000000000177B3                 db 0FFh
.eh_frame_hdr:00000000000177B4                 db  34h ; 4
.eh_frame_hdr:00000000000177B5                 db  18h
.eh_frame_hdr:00000000000177B6                 db    0
.eh_frame_hdr:00000000000177B7                 db    0
.eh_frame_hdr:00000000000177B8                 db 0F4h
.eh_frame_hdr:00000000000177B9                 db  46h ; F
.eh_frame_hdr:00000000000177BA                 db 0FFh
.eh_frame_hdr:00000000000177BB                 db 0FFh
.eh_frame_hdr:00000000000177BC                 db  48h ; H
.eh_frame_hdr:00000000000177BD                 db  18h
.eh_frame_hdr:00000000000177BE                 db    0
.eh_frame_hdr:00000000000177BF                 db    0
.eh_frame_hdr:00000000000177C0                 db  54h ; T
.eh_frame_hdr:00000000000177C1                 db  47h ; G
.eh_frame_hdr:00000000000177C2                 db 0FFh
.eh_frame_hdr:00000000000177C3                 db 0FFh
.eh_frame_hdr:00000000000177C4                 db  5Ch ; \
.eh_frame_hdr:00000000000177C5                 db  18h
.eh_frame_hdr:00000000000177C6                 db    0
.eh_frame_hdr:00000000000177C7                 db    0
.eh_frame_hdr:00000000000177C8                 db 0A4h
.eh_frame_hdr:00000000000177C9                 db  48h ; H
.eh_frame_hdr:00000000000177CA                 db 0FFh
.eh_frame_hdr:00000000000177CB                 db 0FFh
.eh_frame_hdr:00000000000177CC                 db  98h
.eh_frame_hdr:00000000000177CD                 db  18h
.eh_frame_hdr:00000000000177CE                 db    0
.eh_frame_hdr:00000000000177CF                 db    0
.eh_frame_hdr:00000000000177D0                 db    4
.eh_frame_hdr:00000000000177D1                 db  49h ; I
.eh_frame_hdr:00000000000177D2                 db 0FFh
.eh_frame_hdr:00000000000177D3                 db 0FFh
.eh_frame_hdr:00000000000177D4                 db 0D0h
.eh_frame_hdr:00000000000177D5                 db  18h
.eh_frame_hdr:00000000000177D6                 db    0
.eh_frame_hdr:00000000000177D7                 db    0
.eh_frame_hdr:00000000000177D8                 db  54h ; T
.eh_frame_hdr:00000000000177D9                 db  49h ; I
.eh_frame_hdr:00000000000177DA                 db 0FFh
.eh_frame_hdr:00000000000177DB                 db 0FFh
.eh_frame_hdr:00000000000177DC                 db 0E4h
.eh_frame_hdr:00000000000177DD                 db  18h
.eh_frame_hdr:00000000000177DE                 db    0
.eh_frame_hdr:00000000000177DF                 db    0
.eh_frame_hdr:00000000000177E0                 db 0D4h
.eh_frame_hdr:00000000000177E1                 db  49h ; I
.eh_frame_hdr:00000000000177E2                 db 0FFh
.eh_frame_hdr:00000000000177E3                 db 0FFh
.eh_frame_hdr:00000000000177E4                 db  18h
.eh_frame_hdr:00000000000177E5                 db  19h
.eh_frame_hdr:00000000000177E6                 db    0
.eh_frame_hdr:00000000000177E7                 db    0
.eh_frame_hdr:00000000000177E8                 db  44h ; D
.eh_frame_hdr:00000000000177E9                 db  4Ah ; J
.eh_frame_hdr:00000000000177EA                 db 0FFh
.eh_frame_hdr:00000000000177EB                 db 0FFh
.eh_frame_hdr:00000000000177EC                 db  2Ch ; ,
.eh_frame_hdr:00000000000177ED                 db  19h
.eh_frame_hdr:00000000000177EE                 db    0
.eh_frame_hdr:00000000000177EF                 db    0
.eh_frame_hdr:00000000000177F0                 db 0B4h
.eh_frame_hdr:00000000000177F1                 db  4Ah ; J
.eh_frame_hdr:00000000000177F2                 db 0FFh
.eh_frame_hdr:00000000000177F3                 db 0FFh
.eh_frame_hdr:00000000000177F4                 db  78h ; x
.eh_frame_hdr:00000000000177F5                 db  19h
.eh_frame_hdr:00000000000177F6                 db    0
.eh_frame_hdr:00000000000177F7                 db    0
.eh_frame_hdr:00000000000177F8                 db 0F4h
.eh_frame_hdr:00000000000177F9                 db  4Ah ; J
.eh_frame_hdr:00000000000177FA                 db 0FFh
.eh_frame_hdr:00000000000177FB                 db 0FFh
.eh_frame_hdr:00000000000177FC                 db  8Ch
.eh_frame_hdr:00000000000177FD                 db  19h
.eh_frame_hdr:00000000000177FE                 db    0
.eh_frame_hdr:00000000000177FF                 db    0
.eh_frame_hdr:0000000000017800                 db  14h
.eh_frame_hdr:0000000000017801                 db  4Bh ; K
.eh_frame_hdr:0000000000017802                 db 0FFh
.eh_frame_hdr:0000000000017803                 db 0FFh
.eh_frame_hdr:0000000000017804                 db 0A0h
.eh_frame_hdr:0000000000017805                 db  19h
.eh_frame_hdr:0000000000017806                 db    0
.eh_frame_hdr:0000000000017807                 db    0
.eh_frame_hdr:0000000000017808                 db 0D4h
.eh_frame_hdr:0000000000017809                 db  4Ch ; L
.eh_frame_hdr:000000000001780A                 db 0FFh
.eh_frame_hdr:000000000001780B                 db 0FFh
.eh_frame_hdr:000000000001780C                 db 0ECh
.eh_frame_hdr:000000000001780D                 db  19h
.eh_frame_hdr:000000000001780E                 db    0
.eh_frame_hdr:000000000001780F                 db    0
.eh_frame_hdr:0000000000017810                 db  64h ; d
.eh_frame_hdr:0000000000017811                 db  4Dh ; M
.eh_frame_hdr:0000000000017812                 db 0FFh
.eh_frame_hdr:0000000000017813                 db 0FFh
.eh_frame_hdr:0000000000017814                 db  18h
.eh_frame_hdr:0000000000017815                 db  1Ah
.eh_frame_hdr:0000000000017816                 db    0
.eh_frame_hdr:0000000000017817                 db    0
.eh_frame_hdr:0000000000017818                 db  44h ; D
.eh_frame_hdr:0000000000017819                 db  4Eh ; N
.eh_frame_hdr:000000000001781A                 db 0FFh
.eh_frame_hdr:000000000001781B                 db 0FFh
.eh_frame_hdr:000000000001781C                 db  44h ; D
.eh_frame_hdr:000000000001781D                 db  1Ah
.eh_frame_hdr:000000000001781E                 db    0
.eh_frame_hdr:000000000001781F                 db    0
.eh_frame_hdr:0000000000017820                 db  84h
.eh_frame_hdr:0000000000017821                 db  50h ; P
.eh_frame_hdr:0000000000017822                 db 0FFh
.eh_frame_hdr:0000000000017823                 db 0FFh
.eh_frame_hdr:0000000000017824                 db  7Ch ; |
.eh_frame_hdr:0000000000017825                 db  1Ah
.eh_frame_hdr:0000000000017826                 db    0
.eh_frame_hdr:0000000000017827                 db    0
.eh_frame_hdr:0000000000017828                 db  14h
.eh_frame_hdr:0000000000017829                 db  53h ; S
.eh_frame_hdr:000000000001782A                 db 0FFh
.eh_frame_hdr:000000000001782B                 db 0FFh
.eh_frame_hdr:000000000001782C                 db 0B8h
.eh_frame_hdr:000000000001782D                 db  1Ah
.eh_frame_hdr:000000000001782E                 db    0
.eh_frame_hdr:000000000001782F                 db    0
.eh_frame_hdr:0000000000017830                 db  74h ; t
.eh_frame_hdr:0000000000017831                 db  53h ; S
.eh_frame_hdr:0000000000017832                 db 0FFh
.eh_frame_hdr:0000000000017833                 db 0FFh
.eh_frame_hdr:0000000000017834                 db 0DCh
.eh_frame_hdr:0000000000017835                 db  1Ah
.eh_frame_hdr:0000000000017836                 db    0
.eh_frame_hdr:0000000000017837                 db    0
.eh_frame_hdr:0000000000017838                 db  84h
.eh_frame_hdr:0000000000017839                 db  55h ; U
.eh_frame_hdr:000000000001783A                 db 0FFh
.eh_frame_hdr:000000000001783B                 db 0FFh
.eh_frame_hdr:000000000001783C                 db  14h
.eh_frame_hdr:000000000001783D                 db  1Bh
.eh_frame_hdr:000000000001783E                 db    0
.eh_frame_hdr:000000000001783F                 db    0
.eh_frame_hdr:0000000000017840                 db 0B4h
.eh_frame_hdr:0000000000017841                 db  55h ; U
.eh_frame_hdr:0000000000017842                 db 0FFh
.eh_frame_hdr:0000000000017843                 db 0FFh
.eh_frame_hdr:0000000000017844                 db  3Ch ; <
.eh_frame_hdr:0000000000017845                 db  1Bh
.eh_frame_hdr:0000000000017846                 db    0
.eh_frame_hdr:0000000000017847                 db    0
.eh_frame_hdr:0000000000017848                 db 0C4h
.eh_frame_hdr:0000000000017849                 db  55h ; U
.eh_frame_hdr:000000000001784A                 db 0FFh
.eh_frame_hdr:000000000001784B                 db 0FFh
.eh_frame_hdr:000000000001784C                 db  50h ; P
.eh_frame_hdr:000000000001784D                 db  1Bh
.eh_frame_hdr:000000000001784E                 db    0
.eh_frame_hdr:000000000001784F                 db    0
.eh_frame_hdr:0000000000017850                 db 0F4h
.eh_frame_hdr:0000000000017851                 db  55h ; U
.eh_frame_hdr:0000000000017852                 db 0FFh
.eh_frame_hdr:0000000000017853                 db 0FFh
.eh_frame_hdr:0000000000017854                 db  68h ; h
.eh_frame_hdr:0000000000017855                 db  1Bh
.eh_frame_hdr:0000000000017856                 db    0
.eh_frame_hdr:0000000000017857                 db    0
.eh_frame_hdr:0000000000017858                 db  34h ; 4
.eh_frame_hdr:0000000000017859                 db  56h ; V
.eh_frame_hdr:000000000001785A                 db 0FFh
.eh_frame_hdr:000000000001785B                 db 0FFh
.eh_frame_hdr:000000000001785C                 db  80h
.eh_frame_hdr:000000000001785D                 db  1Bh
.eh_frame_hdr:000000000001785E                 db    0
.eh_frame_hdr:000000000001785F                 db    0
.eh_frame_hdr:0000000000017860                 db  54h ; T
.eh_frame_hdr:0000000000017861                 db  56h ; V
.eh_frame_hdr:0000000000017862                 db 0FFh
.eh_frame_hdr:0000000000017863                 db 0FFh
.eh_frame_hdr:0000000000017864                 db  9Ch
.eh_frame_hdr:0000000000017865                 db  1Bh
.eh_frame_hdr:0000000000017866                 db    0
.eh_frame_hdr:0000000000017867                 db    0
.eh_frame_hdr:0000000000017868                 db 0D4h
.eh_frame_hdr:0000000000017869                 db  56h ; V
.eh_frame_hdr:000000000001786A                 db 0FFh
.eh_frame_hdr:000000000001786B                 db 0FFh
.eh_frame_hdr:000000000001786C                 db 0FCh
.eh_frame_hdr:000000000001786D                 db  1Bh
.eh_frame_hdr:000000000001786E                 db    0
.eh_frame_hdr:000000000001786F                 db    0
.eh_frame_hdr:0000000000017870                 db  74h ; t
.eh_frame_hdr:0000000000017871                 db  57h ; W
.eh_frame_hdr:0000000000017872                 db 0FFh
.eh_frame_hdr:0000000000017873                 db 0FFh
.eh_frame_hdr:0000000000017874                 db  1Ch
.eh_frame_hdr:0000000000017875                 db  1Ch
.eh_frame_hdr:0000000000017876                 db    0
.eh_frame_hdr:0000000000017877                 db    0
.eh_frame_hdr:0000000000017878                 db 0F4h
.eh_frame_hdr:0000000000017879                 db  57h ; W
.eh_frame_hdr:000000000001787A                 db 0FFh
.eh_frame_hdr:000000000001787B                 db 0FFh
.eh_frame_hdr:000000000001787C                 db  54h ; T
.eh_frame_hdr:000000000001787D                 db  1Ch
.eh_frame_hdr:000000000001787E                 db    0
.eh_frame_hdr:000000000001787F                 db    0
.eh_frame_hdr:0000000000017880                 db  54h ; T
.eh_frame_hdr:0000000000017881                 db  58h ; X
.eh_frame_hdr:0000000000017882                 db 0FFh
.eh_frame_hdr:0000000000017883                 db 0FFh
.eh_frame_hdr:0000000000017884                 db  84h
.eh_frame_hdr:0000000000017885                 db  1Ch
.eh_frame_hdr:0000000000017886                 db    0
.eh_frame_hdr:0000000000017887                 db    0
.eh_frame_hdr:0000000000017888                 db  44h ; D
.eh_frame_hdr:0000000000017889                 db  59h ; Y
.eh_frame_hdr:000000000001788A                 db 0FFh
.eh_frame_hdr:000000000001788B                 db 0FFh
.eh_frame_hdr:000000000001788C                 db 0C8h
.eh_frame_hdr:000000000001788D                 db  1Ch
.eh_frame_hdr:000000000001788E                 db    0
.eh_frame_hdr:000000000001788F                 db    0
.eh_frame_hdr:0000000000017890                 db  84h
.eh_frame_hdr:0000000000017891                 db  6Bh ; k
.eh_frame_hdr:0000000000017892                 db 0FFh
.eh_frame_hdr:0000000000017893                 db 0FFh
.eh_frame_hdr:0000000000017894                 db  40h ; @
.eh_frame_hdr:0000000000017895                 db  1Dh
.eh_frame_hdr:0000000000017896                 db    0
.eh_frame_hdr:0000000000017897                 db    0
.eh_frame_hdr:0000000000017898                 db  34h ; 4
.eh_frame_hdr:0000000000017899                 db  6Dh ; m
.eh_frame_hdr:000000000001789A                 db 0FFh
.eh_frame_hdr:000000000001789B                 db 0FFh
.eh_frame_hdr:000000000001789C                 db 0ACh
.eh_frame_hdr:000000000001789D                 db  1Dh
.eh_frame_hdr:000000000001789E                 db    0
.eh_frame_hdr:000000000001789F                 db    0
.eh_frame_hdr:00000000000178A0                 db  74h ; t
.eh_frame_hdr:00000000000178A1                 db  6Dh ; m
.eh_frame_hdr:00000000000178A2                 db 0FFh
.eh_frame_hdr:00000000000178A3                 db 0FFh
.eh_frame_hdr:00000000000178A4                 db 0D8h
.eh_frame_hdr:00000000000178A5                 db  1Dh
.eh_frame_hdr:00000000000178A6                 db    0
.eh_frame_hdr:00000000000178A7                 db    0
.eh_frame_hdr:00000000000178A8                 db  94h
.eh_frame_hdr:00000000000178A9                 db  6Dh ; m
.eh_frame_hdr:00000000000178AA                 db 0FFh
.eh_frame_hdr:00000000000178AB                 db 0FFh
.eh_frame_hdr:00000000000178AC                 db 0ECh
.eh_frame_hdr:00000000000178AD                 db  1Dh
.eh_frame_hdr:00000000000178AE                 db    0
.eh_frame_hdr:00000000000178AF                 db    0
.eh_frame_hdr:00000000000178B0                 db 0B4h
.eh_frame_hdr:00000000000178B1                 db  6Dh ; m
.eh_frame_hdr:00000000000178B2                 db 0FFh
.eh_frame_hdr:00000000000178B3                 db 0FFh
.eh_frame_hdr:00000000000178B4                 db    0
.eh_frame_hdr:00000000000178B5                 db  1Eh
.eh_frame_hdr:00000000000178B6                 db    0
.eh_frame_hdr:00000000000178B7                 db    0
.eh_frame_hdr:00000000000178B8                 db 0F4h
.eh_frame_hdr:00000000000178B9                 db  6Dh ; m
.eh_frame_hdr:00000000000178BA                 db 0FFh
.eh_frame_hdr:00000000000178BB                 db 0FFh
.eh_frame_hdr:00000000000178BC                 db  14h
.eh_frame_hdr:00000000000178BD                 db  1Eh
.eh_frame_hdr:00000000000178BE                 db    0
.eh_frame_hdr:00000000000178BF                 db    0
.eh_frame_hdr:00000000000178C0                 db  14h
.eh_frame_hdr:00000000000178C1                 db  6Eh ; n
.eh_frame_hdr:00000000000178C2                 db 0FFh
.eh_frame_hdr:00000000000178C3                 db 0FFh
.eh_frame_hdr:00000000000178C4                 db  28h ; (
.eh_frame_hdr:00000000000178C5                 db  1Eh
.eh_frame_hdr:00000000000178C6                 db    0
.eh_frame_hdr:00000000000178C7                 db    0
.eh_frame_hdr:00000000000178C8                 db  44h ; D
.eh_frame_hdr:00000000000178C9                 db  6Eh ; n
.eh_frame_hdr:00000000000178CA                 db 0FFh
.eh_frame_hdr:00000000000178CB                 db 0FFh
.eh_frame_hdr:00000000000178CC                 db  3Ch ; <
.eh_frame_hdr:00000000000178CD                 db  1Eh
.eh_frame_hdr:00000000000178CE                 db    0
.eh_frame_hdr:00000000000178CF                 db    0
.eh_frame_hdr:00000000000178D0                 db 0C4h
.eh_frame_hdr:00000000000178D1                 db  6Eh ; n
.eh_frame_hdr:00000000000178D2                 db 0FFh
.eh_frame_hdr:00000000000178D3                 db 0FFh
.eh_frame_hdr:00000000000178D4                 db  90h
.eh_frame_hdr:00000000000178D5                 db  1Eh
.eh_frame_hdr:00000000000178D6                 db    0
.eh_frame_hdr:00000000000178D7                 db    0
.eh_frame_hdr:00000000000178D8                 db 0B4h
.eh_frame_hdr:00000000000178D9                 db  6Fh ; o
.eh_frame_hdr:00000000000178DA                 db 0FFh
.eh_frame_hdr:00000000000178DB                 db 0FFh
.eh_frame_hdr:00000000000178DC                 db 0FCh
.eh_frame_hdr:00000000000178DD                 db  1Eh
.eh_frame_hdr:00000000000178DE                 db    0
.eh_frame_hdr:00000000000178DF                 db    0
.eh_frame_hdr:00000000000178E0                 db 0C4h
.eh_frame_hdr:00000000000178E1                 db  6Fh ; o
.eh_frame_hdr:00000000000178E2                 db 0FFh
.eh_frame_hdr:00000000000178E3                 db 0FFh
.eh_frame_hdr:00000000000178E4                 db  10h
.eh_frame_hdr:00000000000178E5                 db  1Fh
.eh_frame_hdr:00000000000178E6                 db    0
.eh_frame_hdr:00000000000178E7                 db    0
.eh_frame_hdr:00000000000178E8                 db  64h ; d
.eh_frame_hdr:00000000000178E9                 db  70h ; p
.eh_frame_hdr:00000000000178EA                 db 0FFh
.eh_frame_hdr:00000000000178EB                 db 0FFh
.eh_frame_hdr:00000000000178EC                 db  3Ch ; <
.eh_frame_hdr:00000000000178ED                 db  1Fh
.eh_frame_hdr:00000000000178EE                 db    0
.eh_frame_hdr:00000000000178EF                 db    0
.eh_frame_hdr:00000000000178F0                 db  84h
.eh_frame_hdr:00000000000178F1                 db  70h ; p
.eh_frame_hdr:00000000000178F2                 db 0FFh
.eh_frame_hdr:00000000000178F3                 db 0FFh
.eh_frame_hdr:00000000000178F4                 db  50h ; P
.eh_frame_hdr:00000000000178F5                 db  1Fh
.eh_frame_hdr:00000000000178F6                 db    0
.eh_frame_hdr:00000000000178F7                 db    0
.eh_frame_hdr:00000000000178F8                 db  94h
.eh_frame_hdr:00000000000178F9                 db  70h ; p
.eh_frame_hdr:00000000000178FA                 db 0FFh
.eh_frame_hdr:00000000000178FB                 db 0FFh
.eh_frame_hdr:00000000000178FC                 db  64h ; d
.eh_frame_hdr:00000000000178FD                 db  1Fh
.eh_frame_hdr:00000000000178FE                 db    0
.eh_frame_hdr:00000000000178FF                 db    0
.eh_frame_hdr:0000000000017900                 db 0B4h
.eh_frame_hdr:0000000000017901                 db  70h ; p
.eh_frame_hdr:0000000000017902                 db 0FFh
.eh_frame_hdr:0000000000017903                 db 0FFh
.eh_frame_hdr:0000000000017904                 db  78h ; x
.eh_frame_hdr:0000000000017905                 db  1Fh
.eh_frame_hdr:0000000000017906                 db    0
.eh_frame_hdr:0000000000017907                 db    0
.eh_frame_hdr:0000000000017908                 db 0D4h
.eh_frame_hdr:0000000000017909                 db  70h ; p
.eh_frame_hdr:000000000001790A                 db 0FFh
.eh_frame_hdr:000000000001790B                 db 0FFh
.eh_frame_hdr:000000000001790C                 db  8Ch
.eh_frame_hdr:000000000001790D                 db  1Fh
.eh_frame_hdr:000000000001790E                 db    0
.eh_frame_hdr:000000000001790F                 db    0
.eh_frame_hdr:0000000000017910                 db  64h ; d
.eh_frame_hdr:0000000000017911                 db  71h ; q
.eh_frame_hdr:0000000000017912                 db 0FFh
.eh_frame_hdr:0000000000017913                 db 0FFh
.eh_frame_hdr:0000000000017914                 db 0A8h
.eh_frame_hdr:0000000000017915                 db  1Fh
.eh_frame_hdr:0000000000017916                 db    0
.eh_frame_hdr:0000000000017917                 db    0
.eh_frame_hdr:0000000000017918                 db 0F4h
.eh_frame_hdr:0000000000017919                 db  71h ; q
.eh_frame_hdr:000000000001791A                 db 0FFh
.eh_frame_hdr:000000000001791B                 db 0FFh
.eh_frame_hdr:000000000001791C                 db 0C4h
.eh_frame_hdr:000000000001791D                 db  1Fh
.eh_frame_hdr:000000000001791E                 db    0
.eh_frame_hdr:000000000001791F                 db    0
.eh_frame_hdr:0000000000017920                 db    4
.eh_frame_hdr:0000000000017921                 db  72h ; r
.eh_frame_hdr:0000000000017922                 db 0FFh
.eh_frame_hdr:0000000000017923                 db 0FFh
.eh_frame_hdr:0000000000017924                 db 0D8h
.eh_frame_hdr:0000000000017925                 db  1Fh
.eh_frame_hdr:0000000000017926                 db    0
.eh_frame_hdr:0000000000017927                 db    0
.eh_frame_hdr:0000000000017928                 db  14h
.eh_frame_hdr:0000000000017929                 db  72h ; r
.eh_frame_hdr:000000000001792A                 db 0FFh
.eh_frame_hdr:000000000001792B                 db 0FFh
.eh_frame_hdr:000000000001792C                 db 0ECh
.eh_frame_hdr:000000000001792D                 db  1Fh
.eh_frame_hdr:000000000001792E                 db    0
.eh_frame_hdr:000000000001792F                 db    0
.eh_frame_hdr:0000000000017930                 db 0B4h
.eh_frame_hdr:0000000000017931                 db  72h ; r
.eh_frame_hdr:0000000000017932                 db 0FFh
.eh_frame_hdr:0000000000017933                 db 0FFh
.eh_frame_hdr:0000000000017934                 db    8
.eh_frame_hdr:0000000000017935                 db  20h
.eh_frame_hdr:0000000000017936                 db    0
.eh_frame_hdr:0000000000017937                 db    0
.eh_frame_hdr:0000000000017938                 db 0C4h
.eh_frame_hdr:0000000000017939                 db  72h ; r
.eh_frame_hdr:000000000001793A                 db 0FFh
.eh_frame_hdr:000000000001793B                 db 0FFh
.eh_frame_hdr:000000000001793C                 db  1Ch
.eh_frame_hdr:000000000001793D                 db  20h
.eh_frame_hdr:000000000001793E                 db    0
.eh_frame_hdr:000000000001793F                 db    0
.eh_frame_hdr:0000000000017940                 db 0E4h
.eh_frame_hdr:0000000000017941                 db  72h ; r
.eh_frame_hdr:0000000000017942                 db 0FFh
.eh_frame_hdr:0000000000017943                 db 0FFh
.eh_frame_hdr:0000000000017944                 db  30h ; 0
.eh_frame_hdr:0000000000017945                 db  20h
.eh_frame_hdr:0000000000017946                 db    0
.eh_frame_hdr:0000000000017947                 db    0
.eh_frame_hdr:0000000000017948                 db 0F4h
.eh_frame_hdr:0000000000017949                 db  72h ; r
.eh_frame_hdr:000000000001794A                 db 0FFh
.eh_frame_hdr:000000000001794B                 db 0FFh
.eh_frame_hdr:000000000001794C                 db  44h ; D
.eh_frame_hdr:000000000001794D                 db  20h
.eh_frame_hdr:000000000001794E                 db    0
.eh_frame_hdr:000000000001794F                 db    0
.eh_frame_hdr:0000000000017950                 db  84h
.eh_frame_hdr:0000000000017951                 db  73h ; s
.eh_frame_hdr:0000000000017952                 db 0FFh
.eh_frame_hdr:0000000000017953                 db 0FFh
.eh_frame_hdr:0000000000017954                 db  60h ; `
.eh_frame_hdr:0000000000017955                 db  20h
.eh_frame_hdr:0000000000017956                 db    0
.eh_frame_hdr:0000000000017957                 db    0
.eh_frame_hdr:0000000000017958                 db  24h ; $
.eh_frame_hdr:0000000000017959                 db  74h ; t
.eh_frame_hdr:000000000001795A                 db 0FFh
.eh_frame_hdr:000000000001795B                 db 0FFh
.eh_frame_hdr:000000000001795C                 db  7Ch ; |
.eh_frame_hdr:000000000001795D                 db  20h
.eh_frame_hdr:000000000001795E                 db    0
.eh_frame_hdr:000000000001795F                 db    0
.eh_frame_hdr:0000000000017960                 db  34h ; 4
.eh_frame_hdr:0000000000017961                 db  74h ; t
.eh_frame_hdr:0000000000017962                 db 0FFh
.eh_frame_hdr:0000000000017963                 db 0FFh
.eh_frame_hdr:0000000000017964                 db  90h
.eh_frame_hdr:0000000000017965                 db  20h
.eh_frame_hdr:0000000000017966                 db    0
.eh_frame_hdr:0000000000017967                 db    0
.eh_frame_hdr:0000000000017968                 db  54h ; T
.eh_frame_hdr:0000000000017969                 db  74h ; t
.eh_frame_hdr:000000000001796A                 db 0FFh
.eh_frame_hdr:000000000001796B                 db 0FFh
.eh_frame_hdr:000000000001796C                 db 0A4h
.eh_frame_hdr:000000000001796D                 db  20h
.eh_frame_hdr:000000000001796E                 db    0
.eh_frame_hdr:000000000001796F                 db    0
.eh_frame_hdr:0000000000017970                 db  74h ; t
.eh_frame_hdr:0000000000017971                 db  74h ; t
.eh_frame_hdr:0000000000017972                 db 0FFh
.eh_frame_hdr:0000000000017973                 db 0FFh
.eh_frame_hdr:0000000000017974                 db 0B8h
.eh_frame_hdr:0000000000017975                 db  20h
.eh_frame_hdr:0000000000017976                 db    0
.eh_frame_hdr:0000000000017977                 db    0
.eh_frame_hdr:0000000000017978                 db  84h
.eh_frame_hdr:0000000000017979                 db  74h ; t
.eh_frame_hdr:000000000001797A                 db 0FFh
.eh_frame_hdr:000000000001797B                 db 0FFh
.eh_frame_hdr:000000000001797C                 db 0CCh
.eh_frame_hdr:000000000001797D                 db  20h
.eh_frame_hdr:000000000001797E                 db    0
.eh_frame_hdr:000000000001797F                 db    0
.eh_frame_hdr:0000000000017980                 db 0A4h
.eh_frame_hdr:0000000000017981                 db  74h ; t
.eh_frame_hdr:0000000000017982                 db 0FFh
.eh_frame_hdr:0000000000017983                 db 0FFh
.eh_frame_hdr:0000000000017984                 db 0E0h
.eh_frame_hdr:0000000000017985                 db  20h
.eh_frame_hdr:0000000000017986                 db    0
.eh_frame_hdr:0000000000017987                 db    0
.eh_frame_hdr:0000000000017988                 db 0C4h
.eh_frame_hdr:0000000000017989                 db  74h ; t
.eh_frame_hdr:000000000001798A                 db 0FFh
.eh_frame_hdr:000000000001798B                 db 0FFh
.eh_frame_hdr:000000000001798C                 db 0F4h
.eh_frame_hdr:000000000001798D                 db  20h
.eh_frame_hdr:000000000001798E                 db    0
.eh_frame_hdr:000000000001798F                 db    0
.eh_frame_hdr:0000000000017990                 db 0E4h
.eh_frame_hdr:0000000000017991                 db  74h ; t
.eh_frame_hdr:0000000000017992                 db 0FFh
.eh_frame_hdr:0000000000017993                 db 0FFh
.eh_frame_hdr:0000000000017994                 db  0Ch
.eh_frame_hdr:0000000000017995                 db  21h ; !
.eh_frame_hdr:0000000000017996                 db    0
.eh_frame_hdr:0000000000017997                 db    0
.eh_frame_hdr:0000000000017998                 db  54h ; T
.eh_frame_hdr:0000000000017999                 db  77h ; w
.eh_frame_hdr:000000000001799A                 db 0FFh
.eh_frame_hdr:000000000001799B                 db 0FFh
.eh_frame_hdr:000000000001799C                 db  5Ch ; \
.eh_frame_hdr:000000000001799D                 db  21h ; !
.eh_frame_hdr:000000000001799E                 db    0
.eh_frame_hdr:000000000001799F                 db    0
.eh_frame_hdr:00000000000179A0                 db 0D4h
.eh_frame_hdr:00000000000179A1                 db  77h ; w
.eh_frame_hdr:00000000000179A2                 db 0FFh
.eh_frame_hdr:00000000000179A3                 db 0FFh
.eh_frame_hdr:00000000000179A4                 db  84h
.eh_frame_hdr:00000000000179A5                 db  21h ; !
.eh_frame_hdr:00000000000179A6                 db    0
.eh_frame_hdr:00000000000179A7                 db    0
.eh_frame_hdr:00000000000179A8                 db  34h ; 4
.eh_frame_hdr:00000000000179A9                 db  78h ; x
.eh_frame_hdr:00000000000179AA                 db 0FFh
.eh_frame_hdr:00000000000179AB                 db 0FFh
.eh_frame_hdr:00000000000179AC                 db 0BCh
.eh_frame_hdr:00000000000179AD                 db  21h ; !
.eh_frame_hdr:00000000000179AE                 db    0
.eh_frame_hdr:00000000000179AF                 db    0
.eh_frame_hdr:00000000000179B0                 db  64h ; d
.eh_frame_hdr:00000000000179B1                 db  79h ; y
.eh_frame_hdr:00000000000179B2                 db 0FFh
.eh_frame_hdr:00000000000179B3                 db 0FFh
.eh_frame_hdr:00000000000179B4                 db 0F8h
.eh_frame_hdr:00000000000179B5                 db  21h ; !
.eh_frame_hdr:00000000000179B6                 db    0
.eh_frame_hdr:00000000000179B7                 db    0
.eh_frame_hdr:00000000000179B8                 db    4
.eh_frame_hdr:00000000000179B9                 db  7Ah ; z
.eh_frame_hdr:00000000000179BA                 db 0FFh
.eh_frame_hdr:00000000000179BB                 db 0FFh
.eh_frame_hdr:00000000000179BC                 db  58h ; X
.eh_frame_hdr:00000000000179BD                 db  22h ; "
.eh_frame_hdr:00000000000179BE                 db    0
.eh_frame_hdr:00000000000179BF                 db    0
.eh_frame_hdr:00000000000179C0                 db  24h ; $
.eh_frame_hdr:00000000000179C1                 db  7Ah ; z
.eh_frame_hdr:00000000000179C2                 db 0FFh
.eh_frame_hdr:00000000000179C3                 db 0FFh
.eh_frame_hdr:00000000000179C4                 db  6Ch ; l
.eh_frame_hdr:00000000000179C5                 db  22h ; "
.eh_frame_hdr:00000000000179C6                 db    0
.eh_frame_hdr:00000000000179C7                 db    0
.eh_frame_hdr:00000000000179C8                 db  44h ; D
.eh_frame_hdr:00000000000179C9                 db  7Ah ; z
.eh_frame_hdr:00000000000179CA                 db 0FFh
.eh_frame_hdr:00000000000179CB                 db 0FFh
.eh_frame_hdr:00000000000179CC                 db  80h
.eh_frame_hdr:00000000000179CD                 db  22h ; "
.eh_frame_hdr:00000000000179CE                 db    0
.eh_frame_hdr:00000000000179CF                 db    0
.eh_frame_hdr:00000000000179D0                 db  54h ; T
.eh_frame_hdr:00000000000179D1                 db  7Ah ; z
.eh_frame_hdr:00000000000179D2                 db 0FFh
.eh_frame_hdr:00000000000179D3                 db 0FFh
.eh_frame_hdr:00000000000179D4                 db  94h
.eh_frame_hdr:00000000000179D5                 db  22h ; "
.eh_frame_hdr:00000000000179D6                 db    0
.eh_frame_hdr:00000000000179D7                 db    0
.eh_frame_hdr:00000000000179D8                 db 0D4h
.eh_frame_hdr:00000000000179D9                 db  7Dh ; }
.eh_frame_hdr:00000000000179DA                 db 0FFh
.eh_frame_hdr:00000000000179DB                 db 0FFh
.eh_frame_hdr:00000000000179DC                 db 0E4h
.eh_frame_hdr:00000000000179DD                 db  22h ; "
.eh_frame_hdr:00000000000179DE                 db    0
.eh_frame_hdr:00000000000179DF                 db    0
.eh_frame_hdr:00000000000179E0                 db  34h ; 4
.eh_frame_hdr:00000000000179E1                 db  7Eh ; ~
.eh_frame_hdr:00000000000179E2                 db 0FFh
.eh_frame_hdr:00000000000179E3                 db 0FFh
.eh_frame_hdr:00000000000179E4                 db  14h
.eh_frame_hdr:00000000000179E5                 db  23h ; #
.eh_frame_hdr:00000000000179E6                 db    0
.eh_frame_hdr:00000000000179E7                 db    0
.eh_frame_hdr:00000000000179E8                 db 0B4h
.eh_frame_hdr:00000000000179E9                 db  7Eh ; ~
.eh_frame_hdr:00000000000179EA                 db 0FFh
.eh_frame_hdr:00000000000179EB                 db 0FFh
.eh_frame_hdr:00000000000179EC                 db  38h ; 8
.eh_frame_hdr:00000000000179ED                 db  23h ; #
.eh_frame_hdr:00000000000179EE                 db    0
.eh_frame_hdr:00000000000179EF                 db    0
.eh_frame_hdr:00000000000179F0                 db 0C4h
.eh_frame_hdr:00000000000179F1                 db  7Eh ; ~
.eh_frame_hdr:00000000000179F2                 db 0FFh
.eh_frame_hdr:00000000000179F3                 db 0FFh
.eh_frame_hdr:00000000000179F4                 db  4Ch ; L
.eh_frame_hdr:00000000000179F5                 db  23h ; #
.eh_frame_hdr:00000000000179F6                 db    0
.eh_frame_hdr:00000000000179F7                 db    0
.eh_frame_hdr:00000000000179F8                 db 0E4h
.eh_frame_hdr:00000000000179F9                 db  7Eh ; ~
.eh_frame_hdr:00000000000179FA                 db 0FFh
.eh_frame_hdr:00000000000179FB                 db 0FFh
.eh_frame_hdr:00000000000179FC                 db  60h ; `
.eh_frame_hdr:00000000000179FD                 db  23h ; #
.eh_frame_hdr:00000000000179FE                 db    0
.eh_frame_hdr:00000000000179FF                 db    0
.eh_frame_hdr:0000000000017A00                 db  64h ; d
.eh_frame_hdr:0000000000017A01                 db  80h
.eh_frame_hdr:0000000000017A02                 db 0FFh
.eh_frame_hdr:0000000000017A03                 db 0FFh
.eh_frame_hdr:0000000000017A04                 db 0ACh
.eh_frame_hdr:0000000000017A05                 db  23h ; #
.eh_frame_hdr:0000000000017A06                 db    0
.eh_frame_hdr:0000000000017A07                 db    0
.eh_frame_hdr:0000000000017A08                 db 0F4h
.eh_frame_hdr:0000000000017A09                 db  80h
.eh_frame_hdr:0000000000017A0A                 db 0FFh
.eh_frame_hdr:0000000000017A0B                 db 0FFh
.eh_frame_hdr:0000000000017A0C                 db 0D0h
.eh_frame_hdr:0000000000017A0D                 db  23h ; #
.eh_frame_hdr:0000000000017A0E                 db    0
.eh_frame_hdr:0000000000017A0F                 db    0
.eh_frame_hdr:0000000000017A10                 db    4
.eh_frame_hdr:0000000000017A11                 db  81h
.eh_frame_hdr:0000000000017A12                 db 0FFh
.eh_frame_hdr:0000000000017A13                 db 0FFh
.eh_frame_hdr:0000000000017A14                 db 0E4h
.eh_frame_hdr:0000000000017A15                 db  23h ; #
.eh_frame_hdr:0000000000017A16                 db    0
.eh_frame_hdr:0000000000017A17                 db    0
.eh_frame_hdr:0000000000017A18                 db  14h
.eh_frame_hdr:0000000000017A19                 db  81h
.eh_frame_hdr:0000000000017A1A                 db 0FFh
.eh_frame_hdr:0000000000017A1B                 db 0FFh
.eh_frame_hdr:0000000000017A1C                 db 0FCh
.eh_frame_hdr:0000000000017A1D                 db  23h ; #
.eh_frame_hdr:0000000000017A1E                 db    0
.eh_frame_hdr:0000000000017A1F                 db    0
.eh_frame_hdr:0000000000017A20                 db  54h ; T
.eh_frame_hdr:0000000000017A21                 db  81h
.eh_frame_hdr:0000000000017A22                 db 0FFh
.eh_frame_hdr:0000000000017A23                 db 0FFh
.eh_frame_hdr:0000000000017A24                 db  34h ; 4
.eh_frame_hdr:0000000000017A25                 db  24h ; $
.eh_frame_hdr:0000000000017A26                 db    0
.eh_frame_hdr:0000000000017A27                 db    0
.eh_frame_hdr:0000000000017A28                 db  64h ; d
.eh_frame_hdr:0000000000017A29                 db  81h
.eh_frame_hdr:0000000000017A2A                 db 0FFh
.eh_frame_hdr:0000000000017A2B                 db 0FFh
.eh_frame_hdr:0000000000017A2C                 db  48h ; H
.eh_frame_hdr:0000000000017A2D                 db  24h ; $
.eh_frame_hdr:0000000000017A2E                 db    0
.eh_frame_hdr:0000000000017A2F                 db    0
.eh_frame_hdr:0000000000017A30                 db  74h ; t
.eh_frame_hdr:0000000000017A31                 db  81h
.eh_frame_hdr:0000000000017A32                 db 0FFh
.eh_frame_hdr:0000000000017A33                 db 0FFh
.eh_frame_hdr:0000000000017A34                 db  5Ch ; \
.eh_frame_hdr:0000000000017A35                 db  24h ; $
.eh_frame_hdr:0000000000017A36                 db    0
.eh_frame_hdr:0000000000017A37                 db    0
.eh_frame_hdr:0000000000017A38                 db 0F4h
.eh_frame_hdr:0000000000017A39                 db  88h
.eh_frame_hdr:0000000000017A3A                 db 0FFh
.eh_frame_hdr:0000000000017A3B                 db 0FFh
.eh_frame_hdr:0000000000017A3C                 db 0ACh
.eh_frame_hdr:0000000000017A3D                 db  24h ; $
.eh_frame_hdr:0000000000017A3E                 db    0
.eh_frame_hdr:0000000000017A3F                 db    0
.eh_frame_hdr:0000000000017A40                 db  14h
.eh_frame_hdr:0000000000017A41                 db  89h
.eh_frame_hdr:0000000000017A42                 db 0FFh
.eh_frame_hdr:0000000000017A43                 db 0FFh
.eh_frame_hdr:0000000000017A44                 db 0C4h
.eh_frame_hdr:0000000000017A45                 db  24h ; $
.eh_frame_hdr:0000000000017A46                 db    0
.eh_frame_hdr:0000000000017A47                 db    0
.eh_frame_hdr:0000000000017A48                 db 0F4h
.eh_frame_hdr:0000000000017A49                 db  89h
.eh_frame_hdr:0000000000017A4A                 db 0FFh
.eh_frame_hdr:0000000000017A4B                 db 0FFh
.eh_frame_hdr:0000000000017A4C                 db    8
.eh_frame_hdr:0000000000017A4D                 db  25h ; %
.eh_frame_hdr:0000000000017A4E                 db    0
.eh_frame_hdr:0000000000017A4F                 db    0
.eh_frame_hdr:0000000000017A50                 db 0A4h
.eh_frame_hdr:0000000000017A51                 db  8Ah
.eh_frame_hdr:0000000000017A52                 db 0FFh
.eh_frame_hdr:0000000000017A53                 db 0FFh
.eh_frame_hdr:0000000000017A54                 db  20h
.eh_frame_hdr:0000000000017A55                 db  25h ; %
.eh_frame_hdr:0000000000017A56                 db    0
.eh_frame_hdr:0000000000017A57                 db    0
.eh_frame_hdr:0000000000017A58                 db 0B4h
.eh_frame_hdr:0000000000017A59                 db  8Ah
.eh_frame_hdr:0000000000017A5A                 db 0FFh
.eh_frame_hdr:0000000000017A5B                 db 0FFh
.eh_frame_hdr:0000000000017A5C                 db  34h ; 4
.eh_frame_hdr:0000000000017A5D                 db  25h ; %
.eh_frame_hdr:0000000000017A5E                 db    0
.eh_frame_hdr:0000000000017A5F                 db    0
.eh_frame_hdr:0000000000017A60                 db  14h
.eh_frame_hdr:0000000000017A61                 db  8Fh
.eh_frame_hdr:0000000000017A62                 db 0FFh
.eh_frame_hdr:0000000000017A63                 db 0FFh
.eh_frame_hdr:0000000000017A64                 db  7Ch ; |
.eh_frame_hdr:0000000000017A65                 db  25h ; %
.eh_frame_hdr:0000000000017A66                 db    0
.eh_frame_hdr:0000000000017A67                 db    0
.eh_frame_hdr:0000000000017A68                 db  24h ; $
.eh_frame_hdr:0000000000017A69                 db  8Fh
.eh_frame_hdr:0000000000017A6A                 db 0FFh
.eh_frame_hdr:0000000000017A6B                 db 0FFh
.eh_frame_hdr:0000000000017A6C                 db  90h
.eh_frame_hdr:0000000000017A6D                 db  25h ; %
.eh_frame_hdr:0000000000017A6E                 db    0
.eh_frame_hdr:0000000000017A6F                 db    0
.eh_frame_hdr:0000000000017A70                 db  84h
.eh_frame_hdr:0000000000017A71                 db  91h
.eh_frame_hdr:0000000000017A72                 db 0FFh
.eh_frame_hdr:0000000000017A73                 db 0FFh
.eh_frame_hdr:0000000000017A74                 db 0CCh
.eh_frame_hdr:0000000000017A75                 db  25h ; %
.eh_frame_hdr:0000000000017A76                 db    0
.eh_frame_hdr:0000000000017A77                 db    0
.eh_frame_hdr:0000000000017A78                 db 0A4h
.eh_frame_hdr:0000000000017A79                 db  95h
.eh_frame_hdr:0000000000017A7A                 db 0FFh
.eh_frame_hdr:0000000000017A7B                 db 0FFh
.eh_frame_hdr:0000000000017A7C                 db 0E0h
.eh_frame_hdr:0000000000017A7D                 db  26h ; &
.eh_frame_hdr:0000000000017A7E                 db    0
.eh_frame_hdr:0000000000017A7F                 db    0
.eh_frame_hdr:0000000000017A80                 db 0C4h
.eh_frame_hdr:0000000000017A81                 db  95h
.eh_frame_hdr:0000000000017A82                 db 0FFh
.eh_frame_hdr:0000000000017A83                 db 0FFh
.eh_frame_hdr:0000000000017A84                 db 0F4h
.eh_frame_hdr:0000000000017A85                 db  26h ; &
.eh_frame_hdr:0000000000017A86                 db    0
.eh_frame_hdr:0000000000017A87                 db    0
.eh_frame_hdr:0000000000017A88                 db  44h ; D
.eh_frame_hdr:0000000000017A89                 db  96h
.eh_frame_hdr:0000000000017A8A                 db 0FFh
.eh_frame_hdr:0000000000017A8B                 db 0FFh
.eh_frame_hdr:0000000000017A8C                 db  10h
.eh_frame_hdr:0000000000017A8D                 db  27h ; '
.eh_frame_hdr:0000000000017A8E                 db    0
.eh_frame_hdr:0000000000017A8F                 db    0
.eh_frame_hdr:0000000000017A90                 db  24h ; $
.eh_frame_hdr:0000000000017A91                 db  97h
.eh_frame_hdr:0000000000017A92                 db 0FFh
.eh_frame_hdr:0000000000017A93                 db 0FFh
.eh_frame_hdr:0000000000017A94                 db  3Ch ; <
.eh_frame_hdr:0000000000017A95                 db  27h ; '
.eh_frame_hdr:0000000000017A96                 db    0
.eh_frame_hdr:0000000000017A97                 db    0
.eh_frame_hdr:0000000000017A98                 db 0A4h
.eh_frame_hdr:0000000000017A99                 db  97h
.eh_frame_hdr:0000000000017A9A                 db 0FFh
.eh_frame_hdr:0000000000017A9B                 db 0FFh
.eh_frame_hdr:0000000000017A9C                 db  5Ch ; \
.eh_frame_hdr:0000000000017A9D                 db  27h ; '
.eh_frame_hdr:0000000000017A9E                 db    0
.eh_frame_hdr:0000000000017A9F                 db    0
.eh_frame_hdr:0000000000017AA0                 db 0E4h
.eh_frame_hdr:0000000000017AA1                 db  97h
.eh_frame_hdr:0000000000017AA2                 db 0FFh
.eh_frame_hdr:0000000000017AA3                 db 0FFh
.eh_frame_hdr:0000000000017AA4                 db  74h ; t
.eh_frame_hdr:0000000000017AA5                 db  27h ; '
.eh_frame_hdr:0000000000017AA6                 db    0
.eh_frame_hdr:0000000000017AA7                 db    0
.eh_frame_hdr:0000000000017AA8                 db    4
.eh_frame_hdr:0000000000017AA9                 db  98h
.eh_frame_hdr:0000000000017AAA                 db 0FFh
.eh_frame_hdr:0000000000017AAB                 db 0FFh
.eh_frame_hdr:0000000000017AAC                 db  90h
.eh_frame_hdr:0000000000017AAD                 db  27h ; '
.eh_frame_hdr:0000000000017AAE                 db    0
.eh_frame_hdr:0000000000017AAF                 db    0
.eh_frame_hdr:0000000000017AB0                 db  34h ; 4
.eh_frame_hdr:0000000000017AB1                 db  98h
.eh_frame_hdr:0000000000017AB2                 db 0FFh
.eh_frame_hdr:0000000000017AB3                 db 0FFh
.eh_frame_hdr:0000000000017AB4                 db 0A4h
.eh_frame_hdr:0000000000017AB5                 db  27h ; '
.eh_frame_hdr:0000000000017AB6                 db    0
.eh_frame_hdr:0000000000017AB7                 db    0
.eh_frame_hdr:0000000000017AB8                 db  44h ; D
.eh_frame_hdr:0000000000017AB9                 db  98h
.eh_frame_hdr:0000000000017ABA                 db 0FFh
.eh_frame_hdr:0000000000017ABB                 db 0FFh
.eh_frame_hdr:0000000000017ABC                 db 0B8h
.eh_frame_hdr:0000000000017ABD                 db  27h ; '
.eh_frame_hdr:0000000000017ABE                 db    0
.eh_frame_hdr:0000000000017ABF                 db    0
.eh_frame_hdr:0000000000017AC0                 db  84h
.eh_frame_hdr:0000000000017AC1                 db  98h
.eh_frame_hdr:0000000000017AC2                 db 0FFh
.eh_frame_hdr:0000000000017AC3                 db 0FFh
.eh_frame_hdr:0000000000017AC4                 db 0DCh
.eh_frame_hdr:0000000000017AC5                 db  27h ; '
.eh_frame_hdr:0000000000017AC6                 db    0
.eh_frame_hdr:0000000000017AC7                 db    0
.eh_frame_hdr:0000000000017AC8                 db 0B4h
.eh_frame_hdr:0000000000017AC9                 db  98h
.eh_frame_hdr:0000000000017ACA                 db 0FFh
.eh_frame_hdr:0000000000017ACB                 db 0FFh
.eh_frame_hdr:0000000000017ACC                 db 0F0h
.eh_frame_hdr:0000000000017ACD                 db  27h ; '
.eh_frame_hdr:0000000000017ACE                 db    0
.eh_frame_hdr:0000000000017ACF                 db    0
.eh_frame_hdr:0000000000017AD0                 db  44h ; D
.eh_frame_hdr:0000000000017AD1                 db  99h
.eh_frame_hdr:0000000000017AD2                 db 0FFh
.eh_frame_hdr:0000000000017AD3                 db 0FFh
.eh_frame_hdr:0000000000017AD4                 db    8
.eh_frame_hdr:0000000000017AD5                 db  28h ; (
.eh_frame_hdr:0000000000017AD6                 db    0
.eh_frame_hdr:0000000000017AD7                 db    0
.eh_frame_hdr:0000000000017AD8                 db  94h
.eh_frame_hdr:0000000000017AD9                 db  99h
.eh_frame_hdr:0000000000017ADA                 db 0FFh
.eh_frame_hdr:0000000000017ADB                 db 0FFh
.eh_frame_hdr:0000000000017ADC                 db  20h
.eh_frame_hdr:0000000000017ADD                 db  28h ; (
.eh_frame_hdr:0000000000017ADE                 db    0
.eh_frame_hdr:0000000000017ADF                 db    0
.eh_frame_hdr:0000000000017AE0                 db 0B4h
.eh_frame_hdr:0000000000017AE1                 db  99h
.eh_frame_hdr:0000000000017AE2                 db 0FFh
.eh_frame_hdr:0000000000017AE3                 db 0FFh
.eh_frame_hdr:0000000000017AE4                 db  3Ch ; <
.eh_frame_hdr:0000000000017AE5                 db  28h ; (
.eh_frame_hdr:0000000000017AE6                 db    0
.eh_frame_hdr:0000000000017AE7                 db    0
.eh_frame_hdr:0000000000017AE8                 db 0E4h
.eh_frame_hdr:0000000000017AE9                 db  99h
.eh_frame_hdr:0000000000017AEA                 db 0FFh
.eh_frame_hdr:0000000000017AEB                 db 0FFh
.eh_frame_hdr:0000000000017AEC                 db  58h ; X
.eh_frame_hdr:0000000000017AED                 db  28h ; (
.eh_frame_hdr:0000000000017AEE                 db    0
.eh_frame_hdr:0000000000017AEF                 db    0
.eh_frame_hdr:0000000000017AF0                 db  14h
.eh_frame_hdr:0000000000017AF1                 db  9Ah
.eh_frame_hdr:0000000000017AF2                 db 0FFh
.eh_frame_hdr:0000000000017AF3                 db 0FFh
.eh_frame_hdr:0000000000017AF4                 db  80h
.eh_frame_hdr:0000000000017AF5                 db  28h ; (
.eh_frame_hdr:0000000000017AF6                 db    0
.eh_frame_hdr:0000000000017AF7                 db    0
.eh_frame_hdr:0000000000017AF8                 db  34h ; 4
.eh_frame_hdr:0000000000017AF9                 db  9Ah
.eh_frame_hdr:0000000000017AFA                 db 0FFh
.eh_frame_hdr:0000000000017AFB                 db 0FFh
.eh_frame_hdr:0000000000017AFC                 db  9Ch
.eh_frame_hdr:0000000000017AFD                 db  28h ; (
.eh_frame_hdr:0000000000017AFE                 db    0
.eh_frame_hdr:0000000000017AFF                 db    0
.eh_frame_hdr:0000000000017B00                 db  74h ; t
.eh_frame_hdr:0000000000017B01                 db  9Ah
.eh_frame_hdr:0000000000017B02                 db 0FFh
.eh_frame_hdr:0000000000017B03                 db 0FFh
.eh_frame_hdr:0000000000017B04                 db 0B4h
.eh_frame_hdr:0000000000017B05                 db  28h ; (
.eh_frame_hdr:0000000000017B06                 db    0
.eh_frame_hdr:0000000000017B07                 db    0
.eh_frame_hdr:0000000000017B08                 db 0C4h
.eh_frame_hdr:0000000000017B09                 db  9Ah
.eh_frame_hdr:0000000000017B0A                 db 0FFh
.eh_frame_hdr:0000000000017B0B                 db 0FFh
.eh_frame_hdr:0000000000017B0C                 db 0D0h
.eh_frame_hdr:0000000000017B0D                 db  28h ; (
.eh_frame_hdr:0000000000017B0E                 db    0
.eh_frame_hdr:0000000000017B0F                 db    0
.eh_frame_hdr:0000000000017B10                 db 0F4h
.eh_frame_hdr:0000000000017B11                 db  9Ah
.eh_frame_hdr:0000000000017B12                 db 0FFh
.eh_frame_hdr:0000000000017B13                 db 0FFh
.eh_frame_hdr:0000000000017B14                 db 0E4h
.eh_frame_hdr:0000000000017B15                 db  28h ; (
.eh_frame_hdr:0000000000017B16                 db    0
.eh_frame_hdr:0000000000017B17                 db    0
.eh_frame_hdr:0000000000017B18                 db  94h
.eh_frame_hdr:0000000000017B19                 db  9Bh
.eh_frame_hdr:0000000000017B1A                 db 0FFh
.eh_frame_hdr:0000000000017B1B                 db 0FFh
.eh_frame_hdr:0000000000017B1C                 db  0Ch
.eh_frame_hdr:0000000000017B1D                 db  29h ; )
.eh_frame_hdr:0000000000017B1E                 db    0
.eh_frame_hdr:0000000000017B1F                 db    0
.eh_frame_hdr:0000000000017B20                 db 0D4h
.eh_frame_hdr:0000000000017B21                 db  9Bh
.eh_frame_hdr:0000000000017B22                 db 0FFh
.eh_frame_hdr:0000000000017B23                 db 0FFh
.eh_frame_hdr:0000000000017B24                 db  2Ch ; ,
.eh_frame_hdr:0000000000017B25                 db  29h ; )
.eh_frame_hdr:0000000000017B26                 db    0
.eh_frame_hdr:0000000000017B27                 db    0
.eh_frame_hdr:0000000000017B28                 db    4
.eh_frame_hdr:0000000000017B29                 db  9Ch
.eh_frame_hdr:0000000000017B2A                 db 0FFh
.eh_frame_hdr:0000000000017B2B                 db 0FFh
.eh_frame_hdr:0000000000017B2C                 db  44h ; D
.eh_frame_hdr:0000000000017B2D                 db  29h ; )
.eh_frame_hdr:0000000000017B2E                 db    0
.eh_frame_hdr:0000000000017B2F                 db    0
.eh_frame_hdr:0000000000017B30                 db  64h ; d
.eh_frame_hdr:0000000000017B31                 db  9Ch
.eh_frame_hdr:0000000000017B32                 db 0FFh
.eh_frame_hdr:0000000000017B33                 db 0FFh
.eh_frame_hdr:0000000000017B34                 db  74h ; t
.eh_frame_hdr:0000000000017B35                 db  29h ; )
.eh_frame_hdr:0000000000017B36                 db    0
.eh_frame_hdr:0000000000017B37                 db    0
.eh_frame_hdr:0000000000017B38                 db  84h
.eh_frame_hdr:0000000000017B39                 db  9Ch
.eh_frame_hdr:0000000000017B3A                 db 0FFh
.eh_frame_hdr:0000000000017B3B                 db 0FFh
.eh_frame_hdr:0000000000017B3C                 db  88h
.eh_frame_hdr:0000000000017B3D                 db  29h ; )
.eh_frame_hdr:0000000000017B3E                 db    0
.eh_frame_hdr:0000000000017B3F                 db    0
.eh_frame_hdr:0000000000017B40                 db  94h
.eh_frame_hdr:0000000000017B41                 db  9Ch
.eh_frame_hdr:0000000000017B42                 db 0FFh
.eh_frame_hdr:0000000000017B43                 db 0FFh
.eh_frame_hdr:0000000000017B44                 db  9Ch
.eh_frame_hdr:0000000000017B45                 db  29h ; )
.eh_frame_hdr:0000000000017B46                 db    0
.eh_frame_hdr:0000000000017B47                 db    0
.eh_frame_hdr:0000000000017B48                 db 0A4h
.eh_frame_hdr:0000000000017B49                 db  9Ch
.eh_frame_hdr:0000000000017B4A                 db 0FFh
.eh_frame_hdr:0000000000017B4B                 db 0FFh
.eh_frame_hdr:0000000000017B4C                 db 0B0h
.eh_frame_hdr:0000000000017B4D                 db  29h ; )
.eh_frame_hdr:0000000000017B4E                 db    0
.eh_frame_hdr:0000000000017B4F                 db    0
.eh_frame_hdr:0000000000017B50                 db 0B4h
.eh_frame_hdr:0000000000017B51                 db  9Ch
.eh_frame_hdr:0000000000017B52                 db 0FFh
.eh_frame_hdr:0000000000017B53                 db 0FFh
.eh_frame_hdr:0000000000017B54                 db 0C4h
.eh_frame_hdr:0000000000017B55                 db  29h ; )
.eh_frame_hdr:0000000000017B56                 db    0
.eh_frame_hdr:0000000000017B57                 db    0
.eh_frame_hdr:0000000000017B58                 db 0E4h
.eh_frame_hdr:0000000000017B59                 db  9Ch
.eh_frame_hdr:0000000000017B5A                 db 0FFh
.eh_frame_hdr:0000000000017B5B                 db 0FFh
.eh_frame_hdr:0000000000017B5C                 db 0D8h
.eh_frame_hdr:0000000000017B5D                 db  29h ; )
.eh_frame_hdr:0000000000017B5E                 db    0
.eh_frame_hdr:0000000000017B5F                 db    0
.eh_frame_hdr:0000000000017B60                 db 0B4h
.eh_frame_hdr:0000000000017B61                 db  9Eh
.eh_frame_hdr:0000000000017B62                 db 0FFh
.eh_frame_hdr:0000000000017B63                 db 0FFh
.eh_frame_hdr:0000000000017B64                 db  14h
.eh_frame_hdr:0000000000017B65                 db  2Ah ; *
.eh_frame_hdr:0000000000017B66                 db    0
.eh_frame_hdr:0000000000017B67                 db    0
.eh_frame_hdr:0000000000017B68                 db 0C4h
.eh_frame_hdr:0000000000017B69                 db  9Fh
.eh_frame_hdr:0000000000017B6A                 db 0FFh
.eh_frame_hdr:0000000000017B6B                 db 0FFh
.eh_frame_hdr:0000000000017B6C                 db  64h ; d
.eh_frame_hdr:0000000000017B6D                 db  2Ah ; *
.eh_frame_hdr:0000000000017B6E                 db    0
.eh_frame_hdr:0000000000017B6F                 db    0
.eh_frame_hdr:0000000000017B70                 db  54h ; T
.eh_frame_hdr:0000000000017B71                 db 0A0h
.eh_frame_hdr:0000000000017B72                 db 0FFh
.eh_frame_hdr:0000000000017B73                 db 0FFh
.eh_frame_hdr:0000000000017B74                 db  9Ch
.eh_frame_hdr:0000000000017B75                 db  2Ah ; *
.eh_frame_hdr:0000000000017B76                 db    0
.eh_frame_hdr:0000000000017B77                 db    0
.eh_frame_hdr:0000000000017B78                 db 0A4h
.eh_frame_hdr:0000000000017B79                 db 0A0h
.eh_frame_hdr:0000000000017B7A                 db 0FFh
.eh_frame_hdr:0000000000017B7B                 db 0FFh
.eh_frame_hdr:0000000000017B7C                 db 0C8h
.eh_frame_hdr:0000000000017B7D                 db  2Ah ; *
.eh_frame_hdr:0000000000017B7E                 db    0
.eh_frame_hdr:0000000000017B7F                 db    0
.eh_frame_hdr:0000000000017B80                 db 0E4h
.eh_frame_hdr:0000000000017B81                 db 0A0h
.eh_frame_hdr:0000000000017B82                 db 0FFh
.eh_frame_hdr:0000000000017B83                 db 0FFh
.eh_frame_hdr:0000000000017B84                 db 0E4h
.eh_frame_hdr:0000000000017B85                 db  2Ah ; *
.eh_frame_hdr:0000000000017B86                 db    0
.eh_frame_hdr:0000000000017B87                 db    0
.eh_frame_hdr:0000000000017B88                 db  14h
.eh_frame_hdr:0000000000017B89                 db 0A2h
.eh_frame_hdr:0000000000017B8A                 db 0FFh
.eh_frame_hdr:0000000000017B8B                 db 0FFh
.eh_frame_hdr:0000000000017B8C                 db  20h
.eh_frame_hdr:0000000000017B8D                 db  2Bh ; +
.eh_frame_hdr:0000000000017B8E                 db    0
.eh_frame_hdr:0000000000017B8F                 db    0
.eh_frame_hdr:0000000000017B90                 db  84h
.eh_frame_hdr:0000000000017B91                 db 0A2h
.eh_frame_hdr:0000000000017B92                 db 0FFh
.eh_frame_hdr:0000000000017B93                 db 0FFh
.eh_frame_hdr:0000000000017B94                 db  44h ; D
.eh_frame_hdr:0000000000017B95                 db  2Bh ; +
.eh_frame_hdr:0000000000017B96                 db    0
.eh_frame_hdr:0000000000017B97                 db    0
.eh_frame_hdr:0000000000017B98                 db 0F4h
.eh_frame_hdr:0000000000017B99                 db 0A2h
.eh_frame_hdr:0000000000017B9A                 db 0FFh
.eh_frame_hdr:0000000000017B9B                 db 0FFh
.eh_frame_hdr:0000000000017B9C                 db  88h
.eh_frame_hdr:0000000000017B9D                 db  2Bh ; +
.eh_frame_hdr:0000000000017B9E                 db    0
.eh_frame_hdr:0000000000017B9F                 db    0
.eh_frame_hdr:0000000000017BA0                 db  54h ; T
.eh_frame_hdr:0000000000017BA1                 db 0A3h
.eh_frame_hdr:0000000000017BA2                 db 0FFh
.eh_frame_hdr:0000000000017BA3                 db 0FFh
.eh_frame_hdr:0000000000017BA4                 db 0B4h
.eh_frame_hdr:0000000000017BA5                 db  2Bh ; +
.eh_frame_hdr:0000000000017BA6                 db    0
.eh_frame_hdr:0000000000017BA7                 db    0
.eh_frame_hdr:0000000000017BA8                 db 0C4h
.eh_frame_hdr:0000000000017BA9                 db 0A3h
.eh_frame_hdr:0000000000017BAA                 db 0FFh
.eh_frame_hdr:0000000000017BAB                 db 0FFh
.eh_frame_hdr:0000000000017BAC                 db 0DCh
.eh_frame_hdr:0000000000017BAD                 db  2Bh ; +
.eh_frame_hdr:0000000000017BAE                 db    0
.eh_frame_hdr:0000000000017BAF                 db    0
.eh_frame_hdr:0000000000017BB0                 db  34h ; 4
.eh_frame_hdr:0000000000017BB1                 db 0A4h
.eh_frame_hdr:0000000000017BB2                 db 0FFh
.eh_frame_hdr:0000000000017BB3                 db 0FFh
.eh_frame_hdr:0000000000017BB4                 db 0FCh
.eh_frame_hdr:0000000000017BB5                 db  2Bh ; +
.eh_frame_hdr:0000000000017BB6                 db    0
.eh_frame_hdr:0000000000017BB7                 db    0
.eh_frame_hdr:0000000000017BB8                 db  74h ; t
.eh_frame_hdr:0000000000017BB9                 db 0A4h
.eh_frame_hdr:0000000000017BBA                 db 0FFh
.eh_frame_hdr:0000000000017BBB                 db 0FFh
.eh_frame_hdr:0000000000017BBC                 db  10h
.eh_frame_hdr:0000000000017BBD                 db  2Ch ; ,
.eh_frame_hdr:0000000000017BBE                 db    0
.eh_frame_hdr:0000000000017BBF                 db    0
.eh_frame_hdr:0000000000017BC0                 db 0F4h
.eh_frame_hdr:0000000000017BC1                 db 0A6h
.eh_frame_hdr:0000000000017BC2                 db 0FFh
.eh_frame_hdr:0000000000017BC3                 db 0FFh
.eh_frame_hdr:0000000000017BC4                 db  60h ; `
.eh_frame_hdr:0000000000017BC5                 db  2Ch ; ,
.eh_frame_hdr:0000000000017BC6                 db    0
.eh_frame_hdr:0000000000017BC7                 db    0
.eh_frame_hdr:0000000000017BC8                 db 0A4h
.eh_frame_hdr:0000000000017BC9                 db 0A7h
.eh_frame_hdr:0000000000017BCA                 db 0FFh
.eh_frame_hdr:0000000000017BCB                 db 0FFh
.eh_frame_hdr:0000000000017BCC                 db 0A4h
.eh_frame_hdr:0000000000017BCD                 db  2Ch ; ,
.eh_frame_hdr:0000000000017BCE                 db    0
.eh_frame_hdr:0000000000017BCF                 db    0
.eh_frame_hdr:0000000000017BD0                 db  64h ; d
.eh_frame_hdr:0000000000017BD1                 db 0A8h
.eh_frame_hdr:0000000000017BD2                 db 0FFh
.eh_frame_hdr:0000000000017BD3                 db 0FFh
.eh_frame_hdr:0000000000017BD4                 db 0C0h
.eh_frame_hdr:0000000000017BD5                 db  2Ch ; ,
.eh_frame_hdr:0000000000017BD6                 db    0
.eh_frame_hdr:0000000000017BD7                 db    0
.eh_frame_hdr:0000000000017BD8                 db  44h ; D
.eh_frame_hdr:0000000000017BD9                 db 0B2h
.eh_frame_hdr:0000000000017BDA                 db 0FFh
.eh_frame_hdr:0000000000017BDB                 db 0FFh
.eh_frame_hdr:0000000000017BDC                 db  10h
.eh_frame_hdr:0000000000017BDD                 db  2Dh ; -
.eh_frame_hdr:0000000000017BDE                 db    0
.eh_frame_hdr:0000000000017BDF                 db    0
.eh_frame_hdr:0000000000017BE0                 db 0F4h
.eh_frame_hdr:0000000000017BE1                 db 0B5h
.eh_frame_hdr:0000000000017BE2                 db 0FFh
.eh_frame_hdr:0000000000017BE3                 db 0FFh
.eh_frame_hdr:0000000000017BE4                 db  5Ch ; \
.eh_frame_hdr:0000000000017BE5                 db  2Dh ; -
.eh_frame_hdr:0000000000017BE6                 db    0
.eh_frame_hdr:0000000000017BE7                 db    0
.eh_frame_hdr:0000000000017BE8                 db  84h
.eh_frame_hdr:0000000000017BE9                 db 0B7h
.eh_frame_hdr:0000000000017BEA                 db 0FFh
.eh_frame_hdr:0000000000017BEB                 db 0FFh
.eh_frame_hdr:0000000000017BEC                 db  8Ch
.eh_frame_hdr:0000000000017BED                 db  2Dh ; -
.eh_frame_hdr:0000000000017BEE                 db    0
.eh_frame_hdr:0000000000017BEF                 db    0
.eh_frame_hdr:0000000000017BF0                 db    4
.eh_frame_hdr:0000000000017BF1                 db 0BFh
.eh_frame_hdr:0000000000017BF2                 db 0FFh
.eh_frame_hdr:0000000000017BF3                 db 0FFh
.eh_frame_hdr:0000000000017BF4                 db 0F0h
.eh_frame_hdr:0000000000017BF5                 db  2Dh ; -
.eh_frame_hdr:0000000000017BF6                 db    0
.eh_frame_hdr:0000000000017BF7                 db    0
.eh_frame_hdr:0000000000017BF8                 db  34h ; 4
.eh_frame_hdr:0000000000017BF9                 db 0BFh
.eh_frame_hdr:0000000000017BFA                 db 0FFh
.eh_frame_hdr:0000000000017BFB                 db 0FFh
.eh_frame_hdr:0000000000017BFC                 db    8
.eh_frame_hdr:0000000000017BFD                 db  2Eh ; .
.eh_frame_hdr:0000000000017BFE                 db    0
.eh_frame_hdr:0000000000017BFF                 db    0
.eh_frame_hdr:0000000000017C00                 db  84h
.eh_frame_hdr:0000000000017C01                 db 0C0h
.eh_frame_hdr:0000000000017C02                 db 0FFh
.eh_frame_hdr:0000000000017C03                 db 0FFh
.eh_frame_hdr:0000000000017C04                 db  6Ch ; l
.eh_frame_hdr:0000000000017C05                 db  2Eh ; .
.eh_frame_hdr:0000000000017C06                 db    0
.eh_frame_hdr:0000000000017C07                 db    0
.eh_frame_hdr:0000000000017C08                 db  14h
.eh_frame_hdr:0000000000017C09                 db 0C1h
.eh_frame_hdr:0000000000017C0A                 db 0FFh
.eh_frame_hdr:0000000000017C0B                 db 0FFh
.eh_frame_hdr:0000000000017C0C                 db 0ACh
.eh_frame_hdr:0000000000017C0D                 db  2Eh ; .
.eh_frame_hdr:0000000000017C0E                 db    0
.eh_frame_hdr:0000000000017C0F                 db    0
.eh_frame_hdr:0000000000017C10                 db  24h ; $
.eh_frame_hdr:0000000000017C11                 db 0C1h
.eh_frame_hdr:0000000000017C12                 db 0FFh
.eh_frame_hdr:0000000000017C13                 db 0FFh
.eh_frame_hdr:0000000000017C14                 db 0C4h
.eh_frame_hdr:0000000000017C15                 db  2Eh ; .
.eh_frame_hdr:0000000000017C16                 db    0
.eh_frame_hdr:0000000000017C17                 db    0
.eh_frame_hdr:0000000000017C18                 db  34h ; 4
.eh_frame_hdr:0000000000017C19                 db 0C1h
.eh_frame_hdr:0000000000017C1A                 db 0FFh
.eh_frame_hdr:0000000000017C1B                 db 0FFh
.eh_frame_hdr:0000000000017C1C                 db 0DCh
.eh_frame_hdr:0000000000017C1D                 db  2Eh ; .
.eh_frame_hdr:0000000000017C1E                 db    0
.eh_frame_hdr:0000000000017C1F                 db    0
.eh_frame_hdr:0000000000017C20                 db  54h ; T
.eh_frame_hdr:0000000000017C21                 db 0C1h
.eh_frame_hdr:0000000000017C22                 db 0FFh
.eh_frame_hdr:0000000000017C23                 db 0FFh
.eh_frame_hdr:0000000000017C24                 db 0F0h
.eh_frame_hdr:0000000000017C25                 db  2Eh ; .
.eh_frame_hdr:0000000000017C26                 db    0
.eh_frame_hdr:0000000000017C27                 db    0
.eh_frame_hdr:0000000000017C28                 db  84h
.eh_frame_hdr:0000000000017C29                 db 0C1h
.eh_frame_hdr:0000000000017C2A                 db 0FFh
.eh_frame_hdr:0000000000017C2B                 db 0FFh
.eh_frame_hdr:0000000000017C2C                 db  0Ch
.eh_frame_hdr:0000000000017C2D                 db  2Fh ; /
.eh_frame_hdr:0000000000017C2E                 db    0
.eh_frame_hdr:0000000000017C2F                 db    0
.eh_frame_hdr:0000000000017C30                 db  94h
.eh_frame_hdr:0000000000017C31                 db 0C1h
.eh_frame_hdr:0000000000017C32                 db 0FFh
.eh_frame_hdr:0000000000017C33                 db 0FFh
.eh_frame_hdr:0000000000017C34                 db  20h
.eh_frame_hdr:0000000000017C35                 db  2Fh ; /
.eh_frame_hdr:0000000000017C36                 db    0
.eh_frame_hdr:0000000000017C37                 db    0
.eh_frame_hdr:0000000000017C38                 db 0B4h
.eh_frame_hdr:0000000000017C39                 db 0C2h
.eh_frame_hdr:0000000000017C3A                 db 0FFh
.eh_frame_hdr:0000000000017C3B                 db 0FFh
.eh_frame_hdr:0000000000017C3C                 db  6Ch ; l
.eh_frame_hdr:0000000000017C3D                 db  2Fh ; /
.eh_frame_hdr:0000000000017C3E                 db    0
.eh_frame_hdr:0000000000017C3F                 db    0
.eh_frame_hdr:0000000000017C40                 db  34h ; 4
.eh_frame_hdr:0000000000017C41                 db 0C3h
.eh_frame_hdr:0000000000017C42                 db 0FFh
.eh_frame_hdr:0000000000017C43                 db 0FFh
.eh_frame_hdr:0000000000017C44                 db  98h
.eh_frame_hdr:0000000000017C45                 db  2Fh ; /
.eh_frame_hdr:0000000000017C46                 db    0
.eh_frame_hdr:0000000000017C47                 db    0
.eh_frame_hdr:0000000000017C48                 db  54h ; T
.eh_frame_hdr:0000000000017C49                 db 0C4h
.eh_frame_hdr:0000000000017C4A                 db 0FFh
.eh_frame_hdr:0000000000017C4B                 db 0FFh
.eh_frame_hdr:0000000000017C4C                 db 0F8h
.eh_frame_hdr:0000000000017C4D                 db  2Fh ; /
.eh_frame_hdr:0000000000017C4E                 db    0
.eh_frame_hdr:0000000000017C4F                 db    0
.eh_frame_hdr:0000000000017C50                 db 0C4h
.eh_frame_hdr:0000000000017C51                 db 0C4h
.eh_frame_hdr:0000000000017C52                 db 0FFh
.eh_frame_hdr:0000000000017C53                 db 0FFh
.eh_frame_hdr:0000000000017C54                 db  44h ; D
.eh_frame_hdr:0000000000017C55                 db  30h ; 0
.eh_frame_hdr:0000000000017C56                 db    0
.eh_frame_hdr:0000000000017C57                 db    0
.eh_frame_hdr:0000000000017C58                 db  14h
.eh_frame_hdr:0000000000017C59                 db 0C5h
.eh_frame_hdr:0000000000017C5A                 db 0FFh
.eh_frame_hdr:0000000000017C5B                 db 0FFh
.eh_frame_hdr:0000000000017C5C                 db  84h
.eh_frame_hdr:0000000000017C5D                 db  30h ; 0
.eh_frame_hdr:0000000000017C5E                 db    0
.eh_frame_hdr:0000000000017C5F                 db    0
.eh_frame_hdr:0000000000017C60                 db  94h
.eh_frame_hdr:0000000000017C61                 db 0C5h
.eh_frame_hdr:0000000000017C62                 db 0FFh
.eh_frame_hdr:0000000000017C63                 db 0FFh
.eh_frame_hdr:0000000000017C64                 db 0D4h
.eh_frame_hdr:0000000000017C65                 db  30h ; 0
.eh_frame_hdr:0000000000017C66                 db    0
.eh_frame_hdr:0000000000017C67                 db    0
.eh_frame_hdr:0000000000017C68                 db 0A4h
.eh_frame_hdr:0000000000017C69                 db 0C5h
.eh_frame_hdr:0000000000017C6A                 db 0FFh
.eh_frame_hdr:0000000000017C6B                 db 0FFh
.eh_frame_hdr:0000000000017C6C                 db 0E8h
.eh_frame_hdr:0000000000017C6D                 db  30h ; 0
.eh_frame_hdr:0000000000017C6E                 db    0
.eh_frame_hdr:0000000000017C6F                 db    0
.eh_frame_hdr:0000000000017C70                 db  34h ; 4
.eh_frame_hdr:0000000000017C71                 db 0C6h
.eh_frame_hdr:0000000000017C72                 db 0FFh
.eh_frame_hdr:0000000000017C73                 db 0FFh
.eh_frame_hdr:0000000000017C74                 db    4
.eh_frame_hdr:0000000000017C75                 db  31h ; 1
.eh_frame_hdr:0000000000017C76                 db    0
.eh_frame_hdr:0000000000017C77                 db    0
.eh_frame_hdr:0000000000017C78                 db 0D4h
.eh_frame_hdr:0000000000017C79                 db 0C6h
.eh_frame_hdr:0000000000017C7A                 db 0FFh
.eh_frame_hdr:0000000000017C7B                 db 0FFh
.eh_frame_hdr:0000000000017C7C                 db  54h ; T
.eh_frame_hdr:0000000000017C7D                 db  31h ; 1
.eh_frame_hdr:0000000000017C7E                 db    0
.eh_frame_hdr:0000000000017C7F                 db    0
.eh_frame_hdr:0000000000017C80                 db 0E4h
.eh_frame_hdr:0000000000017C81                 db 0C6h
.eh_frame_hdr:0000000000017C82                 db 0FFh
.eh_frame_hdr:0000000000017C83                 db 0FFh
.eh_frame_hdr:0000000000017C84                 db  68h ; h
.eh_frame_hdr:0000000000017C85                 db  31h ; 1
.eh_frame_hdr:0000000000017C86                 db    0
.eh_frame_hdr:0000000000017C87                 db    0
.eh_frame_hdr:0000000000017C88                 db  34h ; 4
.eh_frame_hdr:0000000000017C89                 db 0C7h
.eh_frame_hdr:0000000000017C8A                 db 0FFh
.eh_frame_hdr:0000000000017C8B                 db 0FFh
.eh_frame_hdr:0000000000017C8C                 db  84h
.eh_frame_hdr:0000000000017C8D                 db  31h ; 1
.eh_frame_hdr:0000000000017C8E                 db    0
.eh_frame_hdr:0000000000017C8F                 db    0
.eh_frame_hdr:0000000000017C90                 db  94h
.eh_frame_hdr:0000000000017C91                 db 0C7h
.eh_frame_hdr:0000000000017C92                 db 0FFh
.eh_frame_hdr:0000000000017C93                 db 0FFh
.eh_frame_hdr:0000000000017C94                 db 0A4h
.eh_frame_hdr:0000000000017C95                 db  31h ; 1
.eh_frame_hdr:0000000000017C96                 db    0
.eh_frame_hdr:0000000000017C97                 db    0
.eh_frame_hdr:0000000000017C98                 db 0D4h
.eh_frame_hdr:0000000000017C99                 db 0C7h
.eh_frame_hdr:0000000000017C9A                 db 0FFh
.eh_frame_hdr:0000000000017C9B                 db 0FFh
.eh_frame_hdr:0000000000017C9C                 db 0BCh
.eh_frame_hdr:0000000000017C9D                 db  31h ; 1
.eh_frame_hdr:0000000000017C9E                 db    0
.eh_frame_hdr:0000000000017C9F                 db    0
.eh_frame_hdr:0000000000017CA0                 db 0F4h
.eh_frame_hdr:0000000000017CA1                 db 0C7h
.eh_frame_hdr:0000000000017CA2                 db 0FFh
.eh_frame_hdr:0000000000017CA3                 db 0FFh
.eh_frame_hdr:0000000000017CA4                 db 0D0h
.eh_frame_hdr:0000000000017CA5                 db  31h ; 1
.eh_frame_hdr:0000000000017CA6                 db    0
.eh_frame_hdr:0000000000017CA7                 db    0
.eh_frame_hdr:0000000000017CA8                 db    4
.eh_frame_hdr:0000000000017CA9                 db 0C8h
.eh_frame_hdr:0000000000017CAA                 db 0FFh
.eh_frame_hdr:0000000000017CAB                 db 0FFh
.eh_frame_hdr:0000000000017CAC                 db 0E4h
.eh_frame_hdr:0000000000017CAD                 db  31h ; 1
.eh_frame_hdr:0000000000017CAE                 db    0
.eh_frame_hdr:0000000000017CAF                 db    0
.eh_frame_hdr:0000000000017CB0                 db  44h ; D
.eh_frame_hdr:0000000000017CB1                 db 0C8h
.eh_frame_hdr:0000000000017CB2                 db 0FFh
.eh_frame_hdr:0000000000017CB3                 db 0FFh
.eh_frame_hdr:0000000000017CB4                 db 0F8h
.eh_frame_hdr:0000000000017CB5                 db  31h ; 1
.eh_frame_hdr:0000000000017CB6                 db    0
.eh_frame_hdr:0000000000017CB7                 db    0
.eh_frame_hdr:0000000000017CB8                 db  84h
.eh_frame_hdr:0000000000017CB9                 db 0C8h
.eh_frame_hdr:0000000000017CBA                 db 0FFh
.eh_frame_hdr:0000000000017CBB                 db 0FFh
.eh_frame_hdr:0000000000017CBC                 db  0Ch
.eh_frame_hdr:0000000000017CBD                 db  32h ; 2
.eh_frame_hdr:0000000000017CBE                 db    0
.eh_frame_hdr:0000000000017CBF                 db    0
.eh_frame_hdr:0000000000017CC0                 db 0C4h
.eh_frame_hdr:0000000000017CC1                 db 0C8h
.eh_frame_hdr:0000000000017CC2                 db 0FFh
.eh_frame_hdr:0000000000017CC3                 db 0FFh
.eh_frame_hdr:0000000000017CC4                 db  2Ch ; ,
.eh_frame_hdr:0000000000017CC5                 db  32h ; 2
.eh_frame_hdr:0000000000017CC6                 db    0
.eh_frame_hdr:0000000000017CC7                 db    0
.eh_frame_hdr:0000000000017CC8                 db  34h ; 4
.eh_frame_hdr:0000000000017CC9                 db 0C9h
.eh_frame_hdr:0000000000017CCA                 db 0FFh
.eh_frame_hdr:0000000000017CCB                 db 0FFh
.eh_frame_hdr:0000000000017CCC                 db  4Ch ; L
.eh_frame_hdr:0000000000017CCD                 db  32h ; 2
.eh_frame_hdr:0000000000017CCE                 db    0
.eh_frame_hdr:0000000000017CCF                 db    0
.eh_frame_hdr:0000000000017CD0                 db  64h ; d
.eh_frame_hdr:0000000000017CD1                 db 0C9h
.eh_frame_hdr:0000000000017CD2                 db 0FFh
.eh_frame_hdr:0000000000017CD3                 db 0FFh
.eh_frame_hdr:0000000000017CD4                 db  68h ; h
.eh_frame_hdr:0000000000017CD5                 db  32h ; 2
.eh_frame_hdr:0000000000017CD6                 db    0
.eh_frame_hdr:0000000000017CD7                 db    0
.eh_frame_hdr:0000000000017CD8                 db 0A4h
.eh_frame_hdr:0000000000017CD9                 db 0C9h
.eh_frame_hdr:0000000000017CDA                 db 0FFh
.eh_frame_hdr:0000000000017CDB                 db 0FFh
.eh_frame_hdr:0000000000017CDC                 db  88h
.eh_frame_hdr:0000000000017CDD                 db  32h ; 2
.eh_frame_hdr:0000000000017CDE                 db    0
.eh_frame_hdr:0000000000017CDF                 db    0
.eh_frame_hdr:0000000000017CE0                 db 0B4h
.eh_frame_hdr:0000000000017CE1                 db 0C9h
.eh_frame_hdr:0000000000017CE2                 db 0FFh
.eh_frame_hdr:0000000000017CE3                 db 0FFh
.eh_frame_hdr:0000000000017CE4                 db  9Ch
.eh_frame_hdr:0000000000017CE5                 db  32h ; 2
.eh_frame_hdr:0000000000017CE6                 db    0
.eh_frame_hdr:0000000000017CE7                 db    0
.eh_frame_hdr:0000000000017CE8                 db 0D4h
.eh_frame_hdr:0000000000017CE9                 db 0CAh
.eh_frame_hdr:0000000000017CEA                 db 0FFh
.eh_frame_hdr:0000000000017CEB                 db 0FFh
.eh_frame_hdr:0000000000017CEC                 db 0E8h
.eh_frame_hdr:0000000000017CED                 db  32h ; 2
.eh_frame_hdr:0000000000017CEE                 db    0
.eh_frame_hdr:0000000000017CEF                 db    0
.eh_frame_hdr:0000000000017CF0                 db 0F4h
.eh_frame_hdr:0000000000017CF1                 db 0CAh
.eh_frame_hdr:0000000000017CF2                 db 0FFh
.eh_frame_hdr:0000000000017CF3                 db 0FFh
.eh_frame_hdr:0000000000017CF4                 db    4
.eh_frame_hdr:0000000000017CF5                 db  33h ; 3
.eh_frame_hdr:0000000000017CF6                 db    0
.eh_frame_hdr:0000000000017CF7                 db    0
.eh_frame_hdr:0000000000017CF8                 db  54h ; T
.eh_frame_hdr:0000000000017CF9                 db 0CBh
.eh_frame_hdr:0000000000017CFA                 db 0FFh
.eh_frame_hdr:0000000000017CFB                 db 0FFh
.eh_frame_hdr:0000000000017CFC                 db  3Ch ; <
.eh_frame_hdr:0000000000017CFD                 db  33h ; 3
.eh_frame_hdr:0000000000017CFE                 db    0
.eh_frame_hdr:0000000000017CFF                 db    0
.eh_frame_hdr:0000000000017D00                 db 0B4h
.eh_frame_hdr:0000000000017D01                 db 0CBh
.eh_frame_hdr:0000000000017D02                 db 0FFh
.eh_frame_hdr:0000000000017D03                 db 0FFh
.eh_frame_hdr:0000000000017D04                 db  5Ch ; \
.eh_frame_hdr:0000000000017D05                 db  33h ; 3
.eh_frame_hdr:0000000000017D06                 db    0
.eh_frame_hdr:0000000000017D07                 db    0
.eh_frame_hdr:0000000000017D08                 db 0E4h
.eh_frame_hdr:0000000000017D09                 db 0CEh
.eh_frame_hdr:0000000000017D0A                 db 0FFh
.eh_frame_hdr:0000000000017D0B                 db 0FFh
.eh_frame_hdr:0000000000017D0C                 db 0A8h
.eh_frame_hdr:0000000000017D0D                 db  33h ; 3
.eh_frame_hdr:0000000000017D0E                 db    0
.eh_frame_hdr:0000000000017D0F                 db    0
.eh_frame_hdr:0000000000017D10                 db 0F4h
.eh_frame_hdr:0000000000017D11                 db 0CEh
.eh_frame_hdr:0000000000017D12                 db 0FFh
.eh_frame_hdr:0000000000017D13                 db 0FFh
.eh_frame_hdr:0000000000017D14                 db 0BCh
.eh_frame_hdr:0000000000017D15                 db  33h ; 3
.eh_frame_hdr:0000000000017D16                 db    0
.eh_frame_hdr:0000000000017D17                 db    0
.eh_frame_hdr:0000000000017D18                 db    4
.eh_frame_hdr:0000000000017D19                 db 0CFh
.eh_frame_hdr:0000000000017D1A                 db 0FFh
.eh_frame_hdr:0000000000017D1B                 db 0FFh
.eh_frame_hdr:0000000000017D1C                 db 0D0h
.eh_frame_hdr:0000000000017D1D                 db  33h ; 3
.eh_frame_hdr:0000000000017D1E                 db    0
.eh_frame_hdr:0000000000017D1F                 db    0
.eh_frame_hdr:0000000000017D20                 db 0A4h
.eh_frame_hdr:0000000000017D21                 db 0D0h
.eh_frame_hdr:0000000000017D22                 db 0FFh
.eh_frame_hdr:0000000000017D23                 db 0FFh
.eh_frame_hdr:0000000000017D24                 db  34h ; 4
.eh_frame_hdr:0000000000017D25                 db  34h ; 4
.eh_frame_hdr:0000000000017D26                 db    0
.eh_frame_hdr:0000000000017D27                 db    0
.eh_frame_hdr:0000000000017D28                 db 0F4h
.eh_frame_hdr:0000000000017D29                 db 0D0h
.eh_frame_hdr:0000000000017D2A                 db 0FFh
.eh_frame_hdr:0000000000017D2B                 db 0FFh
.eh_frame_hdr:0000000000017D2C                 db  6Ch ; l
.eh_frame_hdr:0000000000017D2D                 db  34h ; 4
.eh_frame_hdr:0000000000017D2E                 db    0
.eh_frame_hdr:0000000000017D2F                 db    0
.eh_frame_hdr:0000000000017D30                 db  84h
.eh_frame_hdr:0000000000017D31                 db 0D3h
.eh_frame_hdr:0000000000017D32                 db 0FFh
.eh_frame_hdr:0000000000017D33                 db 0FFh
.eh_frame_hdr:0000000000017D34                 db  80h
.eh_frame_hdr:0000000000017D35                 db  34h ; 4
.eh_frame_hdr:0000000000017D36                 db    0
.eh_frame_hdr:0000000000017D37                 db    0
.eh_frame_hdr:0000000000017D38                 db 0C4h
.eh_frame_hdr:0000000000017D39                 db 0D5h
.eh_frame_hdr:0000000000017D3A                 db 0FFh
.eh_frame_hdr:0000000000017D3B                 db 0FFh
.eh_frame_hdr:0000000000017D3C                 db 0B4h
.eh_frame_hdr:0000000000017D3D                 db  34h ; 4
.eh_frame_hdr:0000000000017D3E                 db    0
.eh_frame_hdr:0000000000017D3F                 db    0
.eh_frame_hdr:0000000000017D40                 db 0D4h
.eh_frame_hdr:0000000000017D41                 db 0D5h
.eh_frame_hdr:0000000000017D42                 db 0FFh
.eh_frame_hdr:0000000000017D43                 db 0FFh
.eh_frame_hdr:0000000000017D44                 db 0CCh
.eh_frame_hdr:0000000000017D45                 db  34h ; 4
.eh_frame_hdr:0000000000017D46                 db    0
.eh_frame_hdr:0000000000017D47                 db    0
.eh_frame_hdr:0000000000017D48                 db  54h ; T
.eh_frame_hdr:0000000000017D49                 db 0D6h
.eh_frame_hdr:0000000000017D4A                 db 0FFh
.eh_frame_hdr:0000000000017D4B                 db 0FFh
.eh_frame_hdr:0000000000017D4C                 db    4
.eh_frame_hdr:0000000000017D4D                 db  35h ; 5
.eh_frame_hdr:0000000000017D4E                 db    0
.eh_frame_hdr:0000000000017D4F                 db    0
.eh_frame_hdr:0000000000017D50                 db 0D4h
.eh_frame_hdr:0000000000017D51                 db 0D8h
.eh_frame_hdr:0000000000017D52                 db 0FFh
.eh_frame_hdr:0000000000017D53                 db 0FFh
.eh_frame_hdr:0000000000017D54                 db  3Ch ; <
.eh_frame_hdr:0000000000017D55                 db  35h ; 5
.eh_frame_hdr:0000000000017D56                 db    0
.eh_frame_hdr:0000000000017D57                 db    0
.eh_frame_hdr:0000000000017D58                 db  74h ; t
.eh_frame_hdr:0000000000017D59                 db 0D9h
.eh_frame_hdr:0000000000017D5A                 db 0FFh
.eh_frame_hdr:0000000000017D5B                 db 0FFh
.eh_frame_hdr:0000000000017D5C                 db  6Ch ; l
.eh_frame_hdr:0000000000017D5D                 db  35h ; 5
.eh_frame_hdr:0000000000017D5E                 db    0
.eh_frame_hdr:0000000000017D5F                 db    0
.eh_frame_hdr:0000000000017D60                 db 0E4h
.eh_frame_hdr:0000000000017D61                 db 0D9h
.eh_frame_hdr:0000000000017D62                 db 0FFh
.eh_frame_hdr:0000000000017D63                 db 0FFh
.eh_frame_hdr:0000000000017D64                 db 0B4h
.eh_frame_hdr:0000000000017D65                 db  35h ; 5
.eh_frame_hdr:0000000000017D66                 db    0
.eh_frame_hdr:0000000000017D67                 db    0
.eh_frame_hdr:0000000000017D68                 db 0F4h
.eh_frame_hdr:0000000000017D69                 db 0D9h
.eh_frame_hdr:0000000000017D6A                 db 0FFh
.eh_frame_hdr:0000000000017D6B                 db 0FFh
.eh_frame_hdr:0000000000017D6C                 db 0CCh
.eh_frame_hdr:0000000000017D6D                 db  35h ; 5
.eh_frame_hdr:0000000000017D6E                 db    0
.eh_frame_hdr:0000000000017D6F                 db    0
.eh_frame_hdr:0000000000017D6F _eh_frame_hdr   ends
.eh_frame_hdr:0000000000017D6F
.eh_frame:0000000000017D70 ; ===========================================================================
.eh_frame:0000000000017D70
.eh_frame:0000000000017D70 ; Segment type: Pure data
.eh_frame:0000000000017D70 ; Segment permissions: Read
.eh_frame:0000000000017D70 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000017D70                 assume cs:_eh_frame
.eh_frame:0000000000017D70                 ;org 17D70h
.eh_frame:0000000000017D70                 db  14h
.eh_frame:0000000000017D71                 db    0
.eh_frame:0000000000017D72                 db    0
.eh_frame:0000000000017D73                 db    0
.eh_frame:0000000000017D74                 db    0
.eh_frame:0000000000017D75                 db    0
.eh_frame:0000000000017D76                 db    0
.eh_frame:0000000000017D77                 db    0
.eh_frame:0000000000017D78                 db    1
.eh_frame:0000000000017D79                 db  7Ah ; z
.eh_frame:0000000000017D7A                 db  52h ; R
.eh_frame:0000000000017D7B                 db    0
.eh_frame:0000000000017D7C                 db    1
.eh_frame:0000000000017D7D                 db  78h ; x
.eh_frame:0000000000017D7E                 db  10h
.eh_frame:0000000000017D7F                 db    1
.eh_frame:0000000000017D80                 db  1Bh
.eh_frame:0000000000017D81                 db  0Ch
.eh_frame:0000000000017D82                 db    7
.eh_frame:0000000000017D83                 db    8
.eh_frame:0000000000017D84                 db  90h
.eh_frame:0000000000017D85                 db    1
.eh_frame:0000000000017D86                 db    7
.eh_frame:0000000000017D87                 db  10h
.eh_frame:0000000000017D88                 db  14h
.eh_frame:0000000000017D89                 db    0
.eh_frame:0000000000017D8A                 db    0
.eh_frame:0000000000017D8B                 db    0
.eh_frame:0000000000017D8C                 db  1Ch
.eh_frame:0000000000017D8D                 db    0
.eh_frame:0000000000017D8E                 db    0
.eh_frame:0000000000017D8F                 db    0
.eh_frame:0000000000017D90                 db 0F0h
.eh_frame:0000000000017D91                 db 0B6h
.eh_frame:0000000000017D92                 db 0FEh
.eh_frame:0000000000017D93                 db 0FFh
.eh_frame:0000000000017D94                 db  2Bh ; +
.eh_frame:0000000000017D95                 db    0
.eh_frame:0000000000017D96                 db    0
.eh_frame:0000000000017D97                 db    0
.eh_frame:0000000000017D98                 db    0
.eh_frame:0000000000017D99                 db    0
.eh_frame:0000000000017D9A                 db    0
.eh_frame:0000000000017D9B                 db    0
.eh_frame:0000000000017D9C                 db    0
.eh_frame:0000000000017D9D                 db    0
.eh_frame:0000000000017D9E                 db    0
.eh_frame:0000000000017D9F                 db    0
.eh_frame:0000000000017DA0                 db  14h
.eh_frame:0000000000017DA1                 db    0
.eh_frame:0000000000017DA2                 db    0
.eh_frame:0000000000017DA3                 db    0
.eh_frame:0000000000017DA4                 db    0
.eh_frame:0000000000017DA5                 db    0
.eh_frame:0000000000017DA6                 db    0
.eh_frame:0000000000017DA7                 db    0
.eh_frame:0000000000017DA8                 db    1
.eh_frame:0000000000017DA9                 db  7Ah ; z
.eh_frame:0000000000017DAA                 db  52h ; R
.eh_frame:0000000000017DAB                 db    0
.eh_frame:0000000000017DAC                 db    1
.eh_frame:0000000000017DAD                 db  78h ; x
.eh_frame:0000000000017DAE                 db  10h
.eh_frame:0000000000017DAF                 db    1
.eh_frame:0000000000017DB0                 db  1Bh
.eh_frame:0000000000017DB1                 db  0Ch
.eh_frame:0000000000017DB2                 db    7
.eh_frame:0000000000017DB3                 db    8
.eh_frame:0000000000017DB4                 db  90h
.eh_frame:0000000000017DB5                 db    1
.eh_frame:0000000000017DB6                 db    0
.eh_frame:0000000000017DB7                 db    0
.eh_frame:0000000000017DB8                 db  24h ; $
.eh_frame:0000000000017DB9                 db    0
.eh_frame:0000000000017DBA                 db    0
.eh_frame:0000000000017DBB                 db    0
.eh_frame:0000000000017DBC                 db  1Ch
.eh_frame:0000000000017DBD                 db    0
.eh_frame:0000000000017DBE                 db    0
.eh_frame:0000000000017DBF                 db    0
.eh_frame:0000000000017DC0                 db 0A0h
.eh_frame:0000000000017DC1                 db 0A7h
.eh_frame:0000000000017DC2                 db 0FEh
.eh_frame:0000000000017DC3                 db 0FFh
.eh_frame:0000000000017DC4                 db  20h
.eh_frame:0000000000017DC5                 db    7
.eh_frame:0000000000017DC6                 db    0
.eh_frame:0000000000017DC7                 db    0
.eh_frame:0000000000017DC8                 db    0
.eh_frame:0000000000017DC9                 db  0Eh
.eh_frame:0000000000017DCA                 db  10h
.eh_frame:0000000000017DCB                 db  46h ; F
.eh_frame:0000000000017DCC                 db  0Eh
.eh_frame:0000000000017DCD                 db  18h
.eh_frame:0000000000017DCE                 db  4Ah ; J
.eh_frame:0000000000017DCF                 db  0Fh
.eh_frame:0000000000017DD0                 db  0Bh
.eh_frame:0000000000017DD1                 db  77h ; w
.eh_frame:0000000000017DD2                 db    8
.eh_frame:0000000000017DD3                 db  80h
.eh_frame:0000000000017DD4                 db    0
.eh_frame:0000000000017DD5                 db  3Fh ; ?
.eh_frame:0000000000017DD6                 db  1Ah
.eh_frame:0000000000017DD7                 db  3Bh ; ;
.eh_frame:0000000000017DD8                 db  2Ah ; *
.eh_frame:0000000000017DD9                 db  33h ; 3
.eh_frame:0000000000017DDA                 db  24h ; $
.eh_frame:0000000000017DDB                 db  22h ; "
.eh_frame:0000000000017DDC                 db    0
.eh_frame:0000000000017DDD                 db    0
.eh_frame:0000000000017DDE                 db    0
.eh_frame:0000000000017DDF                 db    0
.eh_frame:0000000000017DE0                 db  14h
.eh_frame:0000000000017DE1                 db    0
.eh_frame:0000000000017DE2                 db    0
.eh_frame:0000000000017DE3                 db    0
.eh_frame:0000000000017DE4                 db  44h ; D
.eh_frame:0000000000017DE5                 db    0
.eh_frame:0000000000017DE6                 db    0
.eh_frame:0000000000017DE7                 db    0
.eh_frame:0000000000017DE8                 db  98h
.eh_frame:0000000000017DE9                 db 0AEh
.eh_frame:0000000000017DEA                 db 0FEh
.eh_frame:0000000000017DEB                 db 0FFh
.eh_frame:0000000000017DEC                 db  10h
.eh_frame:0000000000017DED                 db    0
.eh_frame:0000000000017DEE                 db    0
.eh_frame:0000000000017DEF                 db    0
.eh_frame:0000000000017DF0                 db    0
.eh_frame:0000000000017DF1                 db    0
.eh_frame:0000000000017DF2                 db    0
.eh_frame:0000000000017DF3                 db    0
.eh_frame:0000000000017DF4                 db    0
.eh_frame:0000000000017DF5                 db    0
.eh_frame:0000000000017DF6                 db    0
.eh_frame:0000000000017DF7                 db    0
.eh_frame:0000000000017DF8                 db  28h ; (
.eh_frame:0000000000017DF9                 db    0
.eh_frame:0000000000017DFA                 db    0
.eh_frame:0000000000017DFB                 db    0
.eh_frame:0000000000017DFC                 db  5Ch ; \
.eh_frame:0000000000017DFD                 db    0
.eh_frame:0000000000017DFE                 db    0
.eh_frame:0000000000017DFF                 db    0
.eh_frame:0000000000017E00                 db  90h
.eh_frame:0000000000017E01                 db 0B7h
.eh_frame:0000000000017E02                 db 0FEh
.eh_frame:0000000000017E03                 db 0FFh
.eh_frame:0000000000017E04                 db  5Bh ; [
.eh_frame:0000000000017E05                 db    1
.eh_frame:0000000000017E06                 db    0
.eh_frame:0000000000017E07                 db    0
.eh_frame:0000000000017E08                 db    0
.eh_frame:0000000000017E09                 db  41h ; A
.eh_frame:0000000000017E0A                 db  0Eh
.eh_frame:0000000000017E0B                 db  10h
.eh_frame:0000000000017E0C                 db  86h
.eh_frame:0000000000017E0D                 db    2
.eh_frame:0000000000017E0E                 db  41h ; A
.eh_frame:0000000000017E0F                 db  0Eh
.eh_frame:0000000000017E10                 db  18h
.eh_frame:0000000000017E11                 db  83h
.eh_frame:0000000000017E12                 db    3
.eh_frame:0000000000017E13                 db  4Fh ; O
.eh_frame:0000000000017E14                 db  0Eh
.eh_frame:0000000000017E15                 db  70h ; p
.eh_frame:0000000000017E16                 db    2
.eh_frame:0000000000017E17                 db 0D3h
.eh_frame:0000000000017E18                 db  0Ah
.eh_frame:0000000000017E19                 db  0Eh
.eh_frame:0000000000017E1A                 db  18h
.eh_frame:0000000000017E1B                 db  41h ; A
.eh_frame:0000000000017E1C                 db  0Eh
.eh_frame:0000000000017E1D                 db  10h
.eh_frame:0000000000017E1E                 db  41h ; A
.eh_frame:0000000000017E1F                 db  0Eh
.eh_frame:0000000000017E20                 db    8
.eh_frame:0000000000017E21                 db  4Ah ; J
.eh_frame:0000000000017E22                 db  0Bh
.eh_frame:0000000000017E23                 db    0
.eh_frame:0000000000017E24                 db  40h ; @
.eh_frame:0000000000017E25                 db    0
.eh_frame:0000000000017E26                 db    0
.eh_frame:0000000000017E27                 db    0
.eh_frame:0000000000017E28                 db  88h
.eh_frame:0000000000017E29                 db    0
.eh_frame:0000000000017E2A                 db    0
.eh_frame:0000000000017E2B                 db    0
.eh_frame:0000000000017E2C                 db 0C4h
.eh_frame:0000000000017E2D                 db 0B8h
.eh_frame:0000000000017E2E                 db 0FEh
.eh_frame:0000000000017E2F                 db 0FFh
.eh_frame:0000000000017E30                 db  8Fh
.eh_frame:0000000000017E31                 db    0
.eh_frame:0000000000017E32                 db    0
.eh_frame:0000000000017E33                 db    0
.eh_frame:0000000000017E34                 db    0
.eh_frame:0000000000017E35                 db  42h ; B
.eh_frame:0000000000017E36                 db  0Eh
.eh_frame:0000000000017E37                 db  10h
.eh_frame:0000000000017E38                 db  8Ch
.eh_frame:0000000000017E39                 db    2
.eh_frame:0000000000017E3A                 db  41h ; A
.eh_frame:0000000000017E3B                 db  0Eh
.eh_frame:0000000000017E3C                 db  18h
.eh_frame:0000000000017E3D                 db  86h
.eh_frame:0000000000017E3E                 db    3
.eh_frame:0000000000017E3F                 db  44h ; D
.eh_frame:0000000000017E40                 db  0Eh
.eh_frame:0000000000017E41                 db  20h
.eh_frame:0000000000017E42                 db  83h
.eh_frame:0000000000017E43                 db    4
.eh_frame:0000000000017E44                 db  4Ah ; J
.eh_frame:0000000000017E45                 db  0Eh
.eh_frame:0000000000017E46                 db  30h ; 0
.eh_frame:0000000000017E47                 db  51h ; Q
.eh_frame:0000000000017E48                 db  0Ah
.eh_frame:0000000000017E49                 db  0Eh
.eh_frame:0000000000017E4A                 db  20h
.eh_frame:0000000000017E4B                 db  4Ah ; J
.eh_frame:0000000000017E4C                 db  0Eh
.eh_frame:0000000000017E4D                 db  18h
.eh_frame:0000000000017E4E                 db  41h ; A
.eh_frame:0000000000017E4F                 db  0Eh
.eh_frame:0000000000017E50                 db  10h
.eh_frame:0000000000017E51                 db  42h ; B
.eh_frame:0000000000017E52                 db  0Eh
.eh_frame:0000000000017E53                 db    8
.eh_frame:0000000000017E54                 db  49h ; I
.eh_frame:0000000000017E55                 db  0Bh
.eh_frame:0000000000017E56                 db  7Ch ; |
.eh_frame:0000000000017E57                 db  0Ah
.eh_frame:0000000000017E58                 db  0Eh
.eh_frame:0000000000017E59                 db  20h
.eh_frame:0000000000017E5A                 db  43h ; C
.eh_frame:0000000000017E5B                 db  0Eh
.eh_frame:0000000000017E5C                 db  18h
.eh_frame:0000000000017E5D                 db  41h ; A
.eh_frame:0000000000017E5E                 db  0Eh
.eh_frame:0000000000017E5F                 db  10h
.eh_frame:0000000000017E60                 db  42h ; B
.eh_frame:0000000000017E61                 db  0Eh
.eh_frame:0000000000017E62                 db    8
.eh_frame:0000000000017E63                 db  46h ; F
.eh_frame:0000000000017E64                 db  0Bh
.eh_frame:0000000000017E65                 db    0
.eh_frame:0000000000017E66                 db    0
.eh_frame:0000000000017E67                 db    0
.eh_frame:0000000000017E68                 db  28h ; (
.eh_frame:0000000000017E69                 db    0
.eh_frame:0000000000017E6A                 db    0
.eh_frame:0000000000017E6B                 db    0
.eh_frame:0000000000017E6C                 db 0CCh
.eh_frame:0000000000017E6D                 db    0
.eh_frame:0000000000017E6E                 db    0
.eh_frame:0000000000017E6F                 db    0
.eh_frame:0000000000017E70                 db  10h
.eh_frame:0000000000017E71                 db 0B9h
.eh_frame:0000000000017E72                 db 0FEh
.eh_frame:0000000000017E73                 db 0FFh
.eh_frame:0000000000017E74                 db  2Ah ; *
.eh_frame:0000000000017E75                 db    4
.eh_frame:0000000000017E76                 db    0
.eh_frame:0000000000017E77                 db    0
.eh_frame:0000000000017E78                 db    0
.eh_frame:0000000000017E79                 db  42h ; B
.eh_frame:0000000000017E7A                 db  0Eh
.eh_frame:0000000000017E7B                 db  10h
.eh_frame:0000000000017E7C                 db  8Dh
.eh_frame:0000000000017E7D                 db    2
.eh_frame:0000000000017E7E                 db  42h ; B
.eh_frame:0000000000017E7F                 db  0Eh
.eh_frame:0000000000017E80                 db  18h
.eh_frame:0000000000017E81                 db  8Ch
.eh_frame:0000000000017E82                 db    3
.eh_frame:0000000000017E83                 db  46h ; F
.eh_frame:0000000000017E84                 db  0Eh
.eh_frame:0000000000017E85                 db  20h
.eh_frame:0000000000017E86                 db  86h
.eh_frame:0000000000017E87                 db    4
.eh_frame:0000000000017E88                 db  41h ; A
.eh_frame:0000000000017E89                 db  0Eh
.eh_frame:0000000000017E8A                 db  28h ; (
.eh_frame:0000000000017E8B                 db  83h
.eh_frame:0000000000017E8C                 db    5
.eh_frame:0000000000017E8D                 db  49h ; I
.eh_frame:0000000000017E8E                 db  0Eh
.eh_frame:0000000000017E8F                 db 0B0h
.eh_frame:0000000000017E90                 db    1
.eh_frame:0000000000017E91                 db    0
.eh_frame:0000000000017E92                 db    0
.eh_frame:0000000000017E93                 db    0
.eh_frame:0000000000017E94                 db  58h ; X
.eh_frame:0000000000017E95                 db    0
.eh_frame:0000000000017E96                 db    0
.eh_frame:0000000000017E97                 db    0
.eh_frame:0000000000017E98                 db 0F8h
.eh_frame:0000000000017E99                 db    0
.eh_frame:0000000000017E9A                 db    0
.eh_frame:0000000000017E9B                 db    0
.eh_frame:0000000000017E9C                 db  44h ; D
.eh_frame:0000000000017E9D                 db 0AEh
.eh_frame:0000000000017E9E                 db 0FEh
.eh_frame:0000000000017E9F                 db 0FFh
.eh_frame:0000000000017EA0                 db  93h
.eh_frame:0000000000017EA1                 db    7
.eh_frame:0000000000017EA2                 db    0
.eh_frame:0000000000017EA3                 db    0
.eh_frame:0000000000017EA4                 db    0
.eh_frame:0000000000017EA5                 db  42h ; B
.eh_frame:0000000000017EA6                 db  0Eh
.eh_frame:0000000000017EA7                 db  10h
.eh_frame:0000000000017EA8                 db  8Fh
.eh_frame:0000000000017EA9                 db    2
.eh_frame:0000000000017EAA                 db  42h ; B
.eh_frame:0000000000017EAB                 db  0Eh
.eh_frame:0000000000017EAC                 db  18h
.eh_frame:0000000000017EAD                 db  8Eh
.eh_frame:0000000000017EAE                 db    3
.eh_frame:0000000000017EAF                 db  42h ; B
.eh_frame:0000000000017EB0                 db  0Eh
.eh_frame:0000000000017EB1                 db  20h
.eh_frame:0000000000017EB2                 db  8Dh
.eh_frame:0000000000017EB3                 db    4
.eh_frame:0000000000017EB4                 db  42h ; B
.eh_frame:0000000000017EB5                 db  0Eh
.eh_frame:0000000000017EB6                 db  28h ; (
.eh_frame:0000000000017EB7                 db  8Ch
.eh_frame:0000000000017EB8                 db    5
.eh_frame:0000000000017EB9                 db  41h ; A
.eh_frame:0000000000017EBA                 db  0Eh
.eh_frame:0000000000017EBB                 db  30h ; 0
.eh_frame:0000000000017EBC                 db  86h
.eh_frame:0000000000017EBD                 db    6
.eh_frame:0000000000017EBE                 db  41h ; A
.eh_frame:0000000000017EBF                 db  0Eh
.eh_frame:0000000000017EC0                 db  38h ; 8
.eh_frame:0000000000017EC1                 db  83h
.eh_frame:0000000000017EC2                 db    7
.eh_frame:0000000000017EC3                 db  4Ch ; L
.eh_frame:0000000000017EC4                 db  0Eh
.eh_frame:0000000000017EC5                 db 0D0h
.eh_frame:0000000000017EC6                 db    2
.eh_frame:0000000000017EC7                 db    3
.eh_frame:0000000000017EC8                 db  2Ch ; ,
.eh_frame:0000000000017EC9                 db    2
.eh_frame:0000000000017ECA                 db  0Ah
.eh_frame:0000000000017ECB                 db  0Eh
.eh_frame:0000000000017ECC                 db 0D8h
.eh_frame:0000000000017ECD                 db    2
.eh_frame:0000000000017ECE                 db  4Fh ; O
.eh_frame:0000000000017ECF                 db  0Eh
.eh_frame:0000000000017ED0                 db 0E0h
.eh_frame:0000000000017ED1                 db    2
.eh_frame:0000000000017ED2                 db  5Fh ; _
.eh_frame:0000000000017ED3                 db  0Bh
.eh_frame:0000000000017ED4                 db    3
.eh_frame:0000000000017ED5                 db 0C6h
.eh_frame:0000000000017ED6                 db    1
.eh_frame:0000000000017ED7                 db  0Ah
.eh_frame:0000000000017ED8                 db  0Eh
.eh_frame:0000000000017ED9                 db  38h ; 8
.eh_frame:0000000000017EDA                 db  41h ; A
.eh_frame:0000000000017EDB                 db  0Eh
.eh_frame:0000000000017EDC                 db  30h ; 0
.eh_frame:0000000000017EDD                 db  41h ; A
.eh_frame:0000000000017EDE                 db  0Eh
.eh_frame:0000000000017EDF                 db  28h ; (
.eh_frame:0000000000017EE0                 db  42h ; B
.eh_frame:0000000000017EE1                 db  0Eh
.eh_frame:0000000000017EE2                 db  20h
.eh_frame:0000000000017EE3                 db  42h ; B
.eh_frame:0000000000017EE4                 db  0Eh
.eh_frame:0000000000017EE5                 db  18h
.eh_frame:0000000000017EE6                 db  42h ; B
.eh_frame:0000000000017EE7                 db  0Eh
.eh_frame:0000000000017EE8                 db  10h
.eh_frame:0000000000017EE9                 db  42h ; B
.eh_frame:0000000000017EEA                 db  0Eh
.eh_frame:0000000000017EEB                 db    8
.eh_frame:0000000000017EEC                 db  41h ; A
.eh_frame:0000000000017EED                 db  0Bh
.eh_frame:0000000000017EEE                 db    0
.eh_frame:0000000000017EEF                 db    0
.eh_frame:0000000000017EF0                 db  38h ; 8
.eh_frame:0000000000017EF1                 db    0
.eh_frame:0000000000017EF2                 db    0
.eh_frame:0000000000017EF3                 db    0
.eh_frame:0000000000017EF4                 db  54h ; T
.eh_frame:0000000000017EF5                 db    1
.eh_frame:0000000000017EF6                 db    0
.eh_frame:0000000000017EF7                 db    0
.eh_frame:0000000000017EF8                 db 0B8h
.eh_frame:0000000000017EF9                 db 0BCh
.eh_frame:0000000000017EFA                 db 0FEh
.eh_frame:0000000000017EFB                 db 0FFh
.eh_frame:0000000000017EFC                 db  4Dh ; M
.eh_frame:0000000000017EFD                 db    2
.eh_frame:0000000000017EFE                 db    0
.eh_frame:0000000000017EFF                 db    0
.eh_frame:0000000000017F00                 db    0
.eh_frame:0000000000017F01                 db  42h ; B
.eh_frame:0000000000017F02                 db  0Eh
.eh_frame:0000000000017F03                 db  10h
.eh_frame:0000000000017F04                 db  8Dh
.eh_frame:0000000000017F05                 db    2
.eh_frame:0000000000017F06                 db  42h ; B
.eh_frame:0000000000017F07                 db  0Eh
.eh_frame:0000000000017F08                 db  18h
.eh_frame:0000000000017F09                 db  8Ch
.eh_frame:0000000000017F0A                 db    3
.eh_frame:0000000000017F0B                 db  44h ; D
.eh_frame:0000000000017F0C                 db  0Eh
.eh_frame:0000000000017F0D                 db  20h
.eh_frame:0000000000017F0E                 db  86h
.eh_frame:0000000000017F0F                 db    4
.eh_frame:0000000000017F10                 db  41h ; A
.eh_frame:0000000000017F11                 db  0Eh
.eh_frame:0000000000017F12                 db  28h ; (
.eh_frame:0000000000017F13                 db  83h
.eh_frame:0000000000017F14                 db    5
.eh_frame:0000000000017F15                 db  51h ; Q
.eh_frame:0000000000017F16                 db  0Eh
.eh_frame:0000000000017F17                 db 0D0h
.eh_frame:0000000000017F18                 db    1
.eh_frame:0000000000017F19                 db    2
.eh_frame:0000000000017F1A                 db  59h ; Y
.eh_frame:0000000000017F1B                 db  0Ah
.eh_frame:0000000000017F1C                 db  0Eh
.eh_frame:0000000000017F1D                 db  28h ; (
.eh_frame:0000000000017F1E                 db  41h ; A
.eh_frame:0000000000017F1F                 db  0Eh
.eh_frame:0000000000017F20                 db  20h
.eh_frame:0000000000017F21                 db  41h ; A
.eh_frame:0000000000017F22                 db  0Eh
.eh_frame:0000000000017F23                 db  18h
.eh_frame:0000000000017F24                 db  42h ; B
.eh_frame:0000000000017F25                 db  0Eh
.eh_frame:0000000000017F26                 db  10h
.eh_frame:0000000000017F27                 db  42h ; B
.eh_frame:0000000000017F28                 db  0Eh
.eh_frame:0000000000017F29                 db    8
.eh_frame:0000000000017F2A                 db  47h ; G
.eh_frame:0000000000017F2B                 db  0Bh
.eh_frame:0000000000017F2C                 db  20h
.eh_frame:0000000000017F2D                 db    0
.eh_frame:0000000000017F2E                 db    0
.eh_frame:0000000000017F2F                 db    0
.eh_frame:0000000000017F30                 db  90h
.eh_frame:0000000000017F31                 db    1
.eh_frame:0000000000017F32                 db    0
.eh_frame:0000000000017F33                 db    0
.eh_frame:0000000000017F34                 db 0CCh
.eh_frame:0000000000017F35                 db 0BEh
.eh_frame:0000000000017F36                 db 0FEh
.eh_frame:0000000000017F37                 db 0FFh
.eh_frame:0000000000017F38                 db  71h ; q
.eh_frame:0000000000017F39                 db    0
.eh_frame:0000000000017F3A                 db    0
.eh_frame:0000000000017F3B                 db    0
.eh_frame:0000000000017F3C                 db    0
.eh_frame:0000000000017F3D                 db  41h ; A
.eh_frame:0000000000017F3E                 db  0Eh
.eh_frame:0000000000017F3F                 db  10h
.eh_frame:0000000000017F40                 db  83h
.eh_frame:0000000000017F41                 db    2
.eh_frame:0000000000017F42                 db  55h ; U
.eh_frame:0000000000017F43                 db  0Ah
.eh_frame:0000000000017F44                 db  0Eh
.eh_frame:0000000000017F45                 db    8
.eh_frame:0000000000017F46                 db  4Ah ; J
.eh_frame:0000000000017F47                 db  0Bh
.eh_frame:0000000000017F48                 db  78h ; x
.eh_frame:0000000000017F49                 db  0Ah
.eh_frame:0000000000017F4A                 db  0Eh
.eh_frame:0000000000017F4B                 db    8
.eh_frame:0000000000017F4C                 db  48h ; H
.eh_frame:0000000000017F4D                 db  0Bh
.eh_frame:0000000000017F4E                 db    0
.eh_frame:0000000000017F4F                 db    0
.eh_frame:0000000000017F50                 db  4Ch ; L
.eh_frame:0000000000017F51                 db    0
.eh_frame:0000000000017F52                 db    0
.eh_frame:0000000000017F53                 db    0
.eh_frame:0000000000017F54                 db 0B4h
.eh_frame:0000000000017F55                 db    1
.eh_frame:0000000000017F56                 db    0
.eh_frame:0000000000017F57                 db    0
.eh_frame:0000000000017F58                 db  28h ; (
.eh_frame:0000000000017F59                 db 0BFh
.eh_frame:0000000000017F5A                 db 0FEh
.eh_frame:0000000000017F5B                 db 0FFh
.eh_frame:0000000000017F5C                 db 0C8h
.eh_frame:0000000000017F5D                 db    4
.eh_frame:0000000000017F5E                 db    0
.eh_frame:0000000000017F5F                 db    0
.eh_frame:0000000000017F60                 db    0
.eh_frame:0000000000017F61                 db  42h ; B
.eh_frame:0000000000017F62                 db  0Eh
.eh_frame:0000000000017F63                 db  10h
.eh_frame:0000000000017F64                 db  8Fh
.eh_frame:0000000000017F65                 db    2
.eh_frame:0000000000017F66                 db  42h ; B
.eh_frame:0000000000017F67                 db  0Eh
.eh_frame:0000000000017F68                 db  18h
.eh_frame:0000000000017F69                 db  8Eh
.eh_frame:0000000000017F6A                 db    3
.eh_frame:0000000000017F6B                 db  42h ; B
.eh_frame:0000000000017F6C                 db  0Eh
.eh_frame:0000000000017F6D                 db  20h
.eh_frame:0000000000017F6E                 db  8Dh
.eh_frame:0000000000017F6F                 db    4
.eh_frame:0000000000017F70                 db  42h ; B
.eh_frame:0000000000017F71                 db  0Eh
.eh_frame:0000000000017F72                 db  28h ; (
.eh_frame:0000000000017F73                 db  8Ch
.eh_frame:0000000000017F74                 db    5
.eh_frame:0000000000017F75                 db  44h ; D
.eh_frame:0000000000017F76                 db  0Eh
.eh_frame:0000000000017F77                 db  30h ; 0
.eh_frame:0000000000017F78                 db  86h
.eh_frame:0000000000017F79                 db    6
.eh_frame:0000000000017F7A                 db  41h ; A
.eh_frame:0000000000017F7B                 db  0Eh
.eh_frame:0000000000017F7C                 db  38h ; 8
.eh_frame:0000000000017F7D                 db  83h
.eh_frame:0000000000017F7E                 db    7
.eh_frame:0000000000017F7F                 db  4Ah ; J
.eh_frame:0000000000017F80                 db  0Eh
.eh_frame:0000000000017F81                 db  80h
.eh_frame:0000000000017F82                 db    2
.eh_frame:0000000000017F83                 db    3
.eh_frame:0000000000017F84                 db  3Eh ; >
.eh_frame:0000000000017F85                 db    1
.eh_frame:0000000000017F86                 db  0Ah
.eh_frame:0000000000017F87                 db  0Eh
.eh_frame:0000000000017F88                 db  38h ; 8
.eh_frame:0000000000017F89                 db  41h ; A
.eh_frame:0000000000017F8A                 db  0Eh
.eh_frame:0000000000017F8B                 db  30h ; 0
.eh_frame:0000000000017F8C                 db  41h ; A
.eh_frame:0000000000017F8D                 db  0Eh
.eh_frame:0000000000017F8E                 db  28h ; (
.eh_frame:0000000000017F8F                 db  42h ; B
.eh_frame:0000000000017F90                 db  0Eh
.eh_frame:0000000000017F91                 db  20h
.eh_frame:0000000000017F92                 db  42h ; B
.eh_frame:0000000000017F93                 db  0Eh
.eh_frame:0000000000017F94                 db  18h
.eh_frame:0000000000017F95                 db  42h ; B
.eh_frame:0000000000017F96                 db  0Eh
.eh_frame:0000000000017F97                 db  10h
.eh_frame:0000000000017F98                 db  42h ; B
.eh_frame:0000000000017F99                 db  0Eh
.eh_frame:0000000000017F9A                 db    8
.eh_frame:0000000000017F9B                 db  41h ; A
.eh_frame:0000000000017F9C                 db  0Bh
.eh_frame:0000000000017F9D                 db    0
.eh_frame:0000000000017F9E                 db    0
.eh_frame:0000000000017F9F                 db    0
.eh_frame:0000000000017FA0                 db  4Ch ; L
.eh_frame:0000000000017FA1                 db    0
.eh_frame:0000000000017FA2                 db    0
.eh_frame:0000000000017FA3                 db    0
.eh_frame:0000000000017FA4                 db    4
.eh_frame:0000000000017FA5                 db    2
.eh_frame:0000000000017FA6                 db    0
.eh_frame:0000000000017FA7                 db    0
.eh_frame:0000000000017FA8                 db 0A8h
.eh_frame:0000000000017FA9                 db 0C3h
.eh_frame:0000000000017FAA                 db 0FEh
.eh_frame:0000000000017FAB                 db 0FFh
.eh_frame:0000000000017FAC                 db  5Fh ; _
.eh_frame:0000000000017FAD                 db    8
.eh_frame:0000000000017FAE                 db    0
.eh_frame:0000000000017FAF                 db    0
.eh_frame:0000000000017FB0                 db    0
.eh_frame:0000000000017FB1                 db  42h ; B
.eh_frame:0000000000017FB2                 db  0Eh
.eh_frame:0000000000017FB3                 db  10h
.eh_frame:0000000000017FB4                 db  8Fh
.eh_frame:0000000000017FB5                 db    2
.eh_frame:0000000000017FB6                 db  42h ; B
.eh_frame:0000000000017FB7                 db  0Eh
.eh_frame:0000000000017FB8                 db  18h
.eh_frame:0000000000017FB9                 db  8Eh
.eh_frame:0000000000017FBA                 db    3
.eh_frame:0000000000017FBB                 db  42h ; B
.eh_frame:0000000000017FBC                 db  0Eh
.eh_frame:0000000000017FBD                 db  20h
.eh_frame:0000000000017FBE                 db  8Dh
.eh_frame:0000000000017FBF                 db    4
.eh_frame:0000000000017FC0                 db  42h ; B
.eh_frame:0000000000017FC1                 db  0Eh
.eh_frame:0000000000017FC2                 db  28h ; (
.eh_frame:0000000000017FC3                 db  8Ch
.eh_frame:0000000000017FC4                 db    5
.eh_frame:0000000000017FC5                 db  41h ; A
.eh_frame:0000000000017FC6                 db  0Eh
.eh_frame:0000000000017FC7                 db  30h ; 0
.eh_frame:0000000000017FC8                 db  86h
.eh_frame:0000000000017FC9                 db    6
.eh_frame:0000000000017FCA                 db  41h ; A
.eh_frame:0000000000017FCB                 db  0Eh
.eh_frame:0000000000017FCC                 db  38h ; 8
.eh_frame:0000000000017FCD                 db  83h
.eh_frame:0000000000017FCE                 db    7
.eh_frame:0000000000017FCF                 db  47h ; G
.eh_frame:0000000000017FD0                 db  0Eh
.eh_frame:0000000000017FD1                 db  90h
.eh_frame:0000000000017FD2                 db    2
.eh_frame:0000000000017FD3                 db    3
.eh_frame:0000000000017FD4                 db  3Bh ; ;
.eh_frame:0000000000017FD5                 db    1
.eh_frame:0000000000017FD6                 db  0Ah
.eh_frame:0000000000017FD7                 db  0Eh
.eh_frame:0000000000017FD8                 db  38h ; 8
.eh_frame:0000000000017FD9                 db  41h ; A
.eh_frame:0000000000017FDA                 db  0Eh
.eh_frame:0000000000017FDB                 db  30h ; 0
.eh_frame:0000000000017FDC                 db  41h ; A
.eh_frame:0000000000017FDD                 db  0Eh
.eh_frame:0000000000017FDE                 db  28h ; (
.eh_frame:0000000000017FDF                 db  42h ; B
.eh_frame:0000000000017FE0                 db  0Eh
.eh_frame:0000000000017FE1                 db  20h
.eh_frame:0000000000017FE2                 db  42h ; B
.eh_frame:0000000000017FE3                 db  0Eh
.eh_frame:0000000000017FE4                 db  18h
.eh_frame:0000000000017FE5                 db  42h ; B
.eh_frame:0000000000017FE6                 db  0Eh
.eh_frame:0000000000017FE7                 db  10h
.eh_frame:0000000000017FE8                 db  42h ; B
.eh_frame:0000000000017FE9                 db  0Eh
.eh_frame:0000000000017FEA                 db    8
.eh_frame:0000000000017FEB                 db  4Ah ; J
.eh_frame:0000000000017FEC                 db  0Bh
.eh_frame:0000000000017FED                 db    0
.eh_frame:0000000000017FEE                 db    0
.eh_frame:0000000000017FEF                 db    0
.eh_frame:0000000000017FF0                 db  20h
.eh_frame:0000000000017FF1                 db    0
.eh_frame:0000000000017FF2                 db    0
.eh_frame:0000000000017FF3                 db    0
.eh_frame:0000000000017FF4                 db  54h ; T
.eh_frame:0000000000017FF5                 db    2
.eh_frame:0000000000017FF6                 db    0
.eh_frame:0000000000017FF7                 db    0
.eh_frame:0000000000017FF8                 db 0B8h
.eh_frame:0000000000017FF9                 db 0CBh
.eh_frame:0000000000017FFA                 db 0FEh
.eh_frame:0000000000017FFB                 db 0FFh
.eh_frame:0000000000017FFC                 db  44h ; D
.eh_frame:0000000000017FFD                 db    0
.eh_frame:0000000000017FFE                 db    0
.eh_frame:0000000000017FFF                 db    0
.eh_frame:0000000000018000                 db    0
.eh_frame:0000000000018001                 db  4Fh ; O
.eh_frame:0000000000018002                 db  0Eh
.eh_frame:0000000000018003                 db  10h
.eh_frame:0000000000018004                 db  83h
.eh_frame:0000000000018005                 db    2
.eh_frame:0000000000018006                 db  52h ; R
.eh_frame:0000000000018007                 db  0Eh
.eh_frame:0000000000018008                 db    8
.eh_frame:0000000000018009                 db  47h ; G
.eh_frame:000000000001800A                 db 0C3h
.eh_frame:000000000001800B                 db  48h ; H
.eh_frame:000000000001800C                 db  0Eh
.eh_frame:000000000001800D                 db  10h
.eh_frame:000000000001800E                 db  83h
.eh_frame:000000000001800F                 db    2
.eh_frame:0000000000018010                 db  53h ; S
.eh_frame:0000000000018011                 db  0Eh
.eh_frame:0000000000018012                 db    8
.eh_frame:0000000000018013                 db    0
.eh_frame:0000000000018014                 db  38h ; 8
.eh_frame:0000000000018015                 db    0
.eh_frame:0000000000018016                 db    0
.eh_frame:0000000000018017                 db    0
.eh_frame:0000000000018018                 db  78h ; x
.eh_frame:0000000000018019                 db    2
.eh_frame:000000000001801A                 db    0
.eh_frame:000000000001801B                 db    0
.eh_frame:000000000001801C                 db 0E4h
.eh_frame:000000000001801D                 db 0CBh
.eh_frame:000000000001801E                 db 0FEh
.eh_frame:000000000001801F                 db 0FFh
.eh_frame:0000000000018020                 db 0A5h
.eh_frame:0000000000018021                 db    0
.eh_frame:0000000000018022                 db    0
.eh_frame:0000000000018023                 db    0
.eh_frame:0000000000018024                 db    0
.eh_frame:0000000000018025                 db  4Ah ; J
.eh_frame:0000000000018026                 db  0Eh
.eh_frame:0000000000018027                 db  10h
.eh_frame:0000000000018028                 db  8Ch
.eh_frame:0000000000018029                 db    2
.eh_frame:000000000001802A                 db  44h ; D
.eh_frame:000000000001802B                 db  0Eh
.eh_frame:000000000001802C                 db  18h
.eh_frame:000000000001802D                 db  86h
.eh_frame:000000000001802E                 db    3
.eh_frame:000000000001802F                 db  41h ; A
.eh_frame:0000000000018030                 db  0Eh
.eh_frame:0000000000018031                 db  20h
.eh_frame:0000000000018032                 db  83h
.eh_frame:0000000000018033                 db    4
.eh_frame:0000000000018034                 db    2
.eh_frame:0000000000018035                 db  40h ; @
.eh_frame:0000000000018036                 db  0Ah
.eh_frame:0000000000018037                 db  0Eh
.eh_frame:0000000000018038                 db  18h
.eh_frame:0000000000018039                 db  43h ; C
.eh_frame:000000000001803A                 db  0Eh
.eh_frame:000000000001803B                 db  10h
.eh_frame:000000000001803C                 db  42h ; B
.eh_frame:000000000001803D                 db  0Eh
.eh_frame:000000000001803E                 db    8
.eh_frame:000000000001803F                 db  44h ; D
.eh_frame:0000000000018040                 db  0Bh
.eh_frame:0000000000018041                 db  41h ; A
.eh_frame:0000000000018042                 db  0Ah
.eh_frame:0000000000018043                 db  0Eh
.eh_frame:0000000000018044                 db  18h
.eh_frame:0000000000018045                 db  46h ; F
.eh_frame:0000000000018046                 db  0Eh
.eh_frame:0000000000018047                 db  10h
.eh_frame:0000000000018048                 db  42h ; B
.eh_frame:0000000000018049                 db  0Eh
.eh_frame:000000000001804A                 db    8
.eh_frame:000000000001804B                 db  47h ; G
.eh_frame:000000000001804C                 db  0Bh
.eh_frame:000000000001804D                 db    0
.eh_frame:000000000001804E                 db    0
.eh_frame:000000000001804F                 db    0
.eh_frame:0000000000018050                 db  1Ch
.eh_frame:0000000000018051                 db    0
.eh_frame:0000000000018052                 db    0
.eh_frame:0000000000018053                 db    0
.eh_frame:0000000000018054                 db 0B4h
.eh_frame:0000000000018055                 db    2
.eh_frame:0000000000018056                 db    0
.eh_frame:0000000000018057                 db    0
.eh_frame:0000000000018058                 db  58h ; X
.eh_frame:0000000000018059                 db 0CCh
.eh_frame:000000000001805A                 db 0FEh
.eh_frame:000000000001805B                 db 0FFh
.eh_frame:000000000001805C                 db  37h ; 7
.eh_frame:000000000001805D                 db    0
.eh_frame:000000000001805E                 db    0
.eh_frame:000000000001805F                 db    0
.eh_frame:0000000000018060                 db    0
.eh_frame:0000000000018061                 db  41h ; A
.eh_frame:0000000000018062                 db  0Eh
.eh_frame:0000000000018063                 db  10h
.eh_frame:0000000000018064                 db  83h
.eh_frame:0000000000018065                 db    2
.eh_frame:0000000000018066                 db  59h ; Y
.eh_frame:0000000000018067                 db  0Ah
.eh_frame:0000000000018068                 db  0Eh
.eh_frame:0000000000018069                 db    8
.eh_frame:000000000001806A                 db  46h ; F
.eh_frame:000000000001806B                 db  0Bh
.eh_frame:000000000001806C                 db  56h ; V
.eh_frame:000000000001806D                 db  0Eh
.eh_frame:000000000001806E                 db    8
.eh_frame:000000000001806F                 db    0
.eh_frame:0000000000018070                 db  10h
.eh_frame:0000000000018071                 db    0
.eh_frame:0000000000018072                 db    0
.eh_frame:0000000000018073                 db    0
.eh_frame:0000000000018074                 db 0D4h
.eh_frame:0000000000018075                 db    2
.eh_frame:0000000000018076                 db    0
.eh_frame:0000000000018077                 db    0
.eh_frame:0000000000018078                 db  18h
.eh_frame:0000000000018079                 db 0ACh
.eh_frame:000000000001807A                 db 0FEh
.eh_frame:000000000001807B                 db 0FFh
.eh_frame:000000000001807C                 db  16h
.eh_frame:000000000001807D                 db    0
.eh_frame:000000000001807E                 db    0
.eh_frame:000000000001807F                 db    0
.eh_frame:0000000000018080                 db    0
.eh_frame:0000000000018081                 db    0
.eh_frame:0000000000018082                 db    0
.eh_frame:0000000000018083                 db    0
.eh_frame:0000000000018084                 db  14h
.eh_frame:0000000000018085                 db    0
.eh_frame:0000000000018086                 db    0
.eh_frame:0000000000018087                 db    0
.eh_frame:0000000000018088                 db 0E8h
.eh_frame:0000000000018089                 db    2
.eh_frame:000000000001808A                 db    0
.eh_frame:000000000001808B                 db    0
.eh_frame:000000000001808C                 db  1Ah
.eh_frame:000000000001808D                 db 0ACh
.eh_frame:000000000001808E                 db 0FEh
.eh_frame:000000000001808F                 db 0FFh
.eh_frame:0000000000018090                 db  33h ; 3
.eh_frame:0000000000018091                 db    0
.eh_frame:0000000000018092                 db    0
.eh_frame:0000000000018093                 db    0
.eh_frame:0000000000018094                 db    0
.eh_frame:0000000000018095                 db  41h ; A
.eh_frame:0000000000018096                 db  0Eh
.eh_frame:0000000000018097                 db  10h
.eh_frame:0000000000018098                 db  83h
.eh_frame:0000000000018099                 db    2
.eh_frame:000000000001809A                 db    0
.eh_frame:000000000001809B                 db    0
.eh_frame:000000000001809C                 db  34h ; 4
.eh_frame:000000000001809D                 db    0
.eh_frame:000000000001809E                 db    0
.eh_frame:000000000001809F                 db    0
.eh_frame:00000000000180A0                 db    0
.eh_frame:00000000000180A1                 db    3
.eh_frame:00000000000180A2                 db    0
.eh_frame:00000000000180A3                 db    0
.eh_frame:00000000000180A4                 db  4Ch ; L
.eh_frame:00000000000180A5                 db 0CCh
.eh_frame:00000000000180A6                 db 0FEh
.eh_frame:00000000000180A7                 db 0FFh
.eh_frame:00000000000180A8                 db 0B6h
.eh_frame:00000000000180A9                 db    0
.eh_frame:00000000000180AA                 db    0
.eh_frame:00000000000180AB                 db    0
.eh_frame:00000000000180AC                 db    0
.eh_frame:00000000000180AD                 db  42h ; B
.eh_frame:00000000000180AE                 db  0Eh
.eh_frame:00000000000180AF                 db  10h
.eh_frame:00000000000180B0                 db  8Ch
.eh_frame:00000000000180B1                 db    2
.eh_frame:00000000000180B2                 db  41h ; A
.eh_frame:00000000000180B3                 db  0Eh
.eh_frame:00000000000180B4                 db  18h
.eh_frame:00000000000180B5                 db  86h
.eh_frame:00000000000180B6                 db    3
.eh_frame:00000000000180B7                 db  44h ; D
.eh_frame:00000000000180B8                 db  0Eh
.eh_frame:00000000000180B9                 db  20h
.eh_frame:00000000000180BA                 db  83h
.eh_frame:00000000000180BB                 db    4
.eh_frame:00000000000180BC                 db    2
.eh_frame:00000000000180BD                 db  97h
.eh_frame:00000000000180BE                 db  0Ah
.eh_frame:00000000000180BF                 db  0Eh
.eh_frame:00000000000180C0                 db  18h
.eh_frame:00000000000180C1                 db  41h ; A
.eh_frame:00000000000180C2                 db  0Eh
.eh_frame:00000000000180C3                 db  10h
.eh_frame:00000000000180C4                 db  42h ; B
.eh_frame:00000000000180C5                 db  0Eh
.eh_frame:00000000000180C6                 db    8
.eh_frame:00000000000180C7                 db  47h ; G
.eh_frame:00000000000180C8                 db  0Bh
.eh_frame:00000000000180C9                 db  41h ; A
.eh_frame:00000000000180CA                 db  0Eh
.eh_frame:00000000000180CB                 db  18h
.eh_frame:00000000000180CC                 db  41h ; A
.eh_frame:00000000000180CD                 db  0Eh
.eh_frame:00000000000180CE                 db  10h
.eh_frame:00000000000180CF                 db  42h ; B
.eh_frame:00000000000180D0                 db  0Eh
.eh_frame:00000000000180D1                 db    8
.eh_frame:00000000000180D2                 db    0
.eh_frame:00000000000180D3                 db    0
.eh_frame:00000000000180D4                 db  64h ; d
.eh_frame:00000000000180D5                 db    0
.eh_frame:00000000000180D6                 db    0
.eh_frame:00000000000180D7                 db    0
.eh_frame:00000000000180D8                 db  38h ; 8
.eh_frame:00000000000180D9                 db    3
.eh_frame:00000000000180DA                 db    0
.eh_frame:00000000000180DB                 db    0
.eh_frame:00000000000180DC                 db 0D4h
.eh_frame:00000000000180DD                 db 0CCh
.eh_frame:00000000000180DE                 db 0FEh
.eh_frame:00000000000180DF                 db 0FFh
.eh_frame:00000000000180E0                 db    5
.eh_frame:00000000000180E1                 db    1
.eh_frame:00000000000180E2                 db    0
.eh_frame:00000000000180E3                 db    0
.eh_frame:00000000000180E4                 db    0
.eh_frame:00000000000180E5                 db  42h ; B
.eh_frame:00000000000180E6                 db  0Eh
.eh_frame:00000000000180E7                 db  10h
.eh_frame:00000000000180E8                 db  8Dh
.eh_frame:00000000000180E9                 db    2
.eh_frame:00000000000180EA                 db  42h ; B
.eh_frame:00000000000180EB                 db  0Eh
.eh_frame:00000000000180EC                 db  18h
.eh_frame:00000000000180ED                 db  8Ch
.eh_frame:00000000000180EE                 db    3
.eh_frame:00000000000180EF                 db  45h ; E
.eh_frame:00000000000180F0                 db  0Eh
.eh_frame:00000000000180F1                 db  20h
.eh_frame:00000000000180F2                 db  86h
.eh_frame:00000000000180F3                 db    4
.eh_frame:00000000000180F4                 db  41h ; A
.eh_frame:00000000000180F5                 db  0Eh
.eh_frame:00000000000180F6                 db  28h ; (
.eh_frame:00000000000180F7                 db  83h
.eh_frame:00000000000180F8                 db    5
.eh_frame:00000000000180F9                 db  51h ; Q
.eh_frame:00000000000180FA                 db  0Eh
.eh_frame:00000000000180FB                 db  38h ; 8
.eh_frame:00000000000180FC                 db  4Ch ; L
.eh_frame:00000000000180FD                 db  0Eh
.eh_frame:00000000000180FE                 db  40h ; @
.eh_frame:00000000000180FF                 db  57h ; W
.eh_frame:0000000000018100                 db  0Eh
.eh_frame:0000000000018101                 db  38h ; 8
.eh_frame:0000000000018102                 db  41h ; A
.eh_frame:0000000000018103                 db  0Eh
.eh_frame:0000000000018104                 db  30h ; 0
.eh_frame:0000000000018105                 db  4Eh ; N
.eh_frame:0000000000018106                 db  0Ah
.eh_frame:0000000000018107                 db  0Eh
.eh_frame:0000000000018108                 db  28h ; (
.eh_frame:0000000000018109                 db  48h ; H
.eh_frame:000000000001810A                 db  0Eh
.eh_frame:000000000001810B                 db  20h
.eh_frame:000000000001810C                 db  41h ; A
.eh_frame:000000000001810D                 db  0Eh
.eh_frame:000000000001810E                 db  18h
.eh_frame:000000000001810F                 db  42h ; B
.eh_frame:0000000000018110                 db  0Eh
.eh_frame:0000000000018111                 db  10h
.eh_frame:0000000000018112                 db  42h ; B
.eh_frame:0000000000018113                 db  0Eh
.eh_frame:0000000000018114                 db    8
.eh_frame:0000000000018115                 db  46h ; F
.eh_frame:0000000000018116                 db  0Bh
.eh_frame:0000000000018117                 db  79h ; y
.eh_frame:0000000000018118                 db  0Ah
.eh_frame:0000000000018119                 db  0Eh
.eh_frame:000000000001811A                 db  28h ; (
.eh_frame:000000000001811B                 db  43h ; C
.eh_frame:000000000001811C                 db  0Eh
.eh_frame:000000000001811D                 db  20h
.eh_frame:000000000001811E                 db  41h ; A
.eh_frame:000000000001811F                 db  0Eh
.eh_frame:0000000000018120                 db  18h
.eh_frame:0000000000018121                 db  42h ; B
.eh_frame:0000000000018122                 db  0Eh
.eh_frame:0000000000018123                 db  10h
.eh_frame:0000000000018124                 db  42h ; B
.eh_frame:0000000000018125                 db  0Eh
.eh_frame:0000000000018126                 db    8
.eh_frame:0000000000018127                 db  47h ; G
.eh_frame:0000000000018128                 db  0Bh
.eh_frame:0000000000018129                 db    2
.eh_frame:000000000001812A                 db  54h ; T
.eh_frame:000000000001812B                 db  0Eh
.eh_frame:000000000001812C                 db  28h ; (
.eh_frame:000000000001812D                 db  43h ; C
.eh_frame:000000000001812E                 db  0Eh
.eh_frame:000000000001812F                 db  20h
.eh_frame:0000000000018130                 db  41h ; A
.eh_frame:0000000000018131                 db  0Eh
.eh_frame:0000000000018132                 db  18h
.eh_frame:0000000000018133                 db  42h ; B
.eh_frame:0000000000018134                 db  0Eh
.eh_frame:0000000000018135                 db  10h
.eh_frame:0000000000018136                 db  42h ; B
.eh_frame:0000000000018137                 db  0Eh
.eh_frame:0000000000018138                 db    8
.eh_frame:0000000000018139                 db    0
.eh_frame:000000000001813A                 db    0
.eh_frame:000000000001813B                 db    0
.eh_frame:000000000001813C                 db  4Ch ; L
.eh_frame:000000000001813D                 db    0
.eh_frame:000000000001813E                 db    0
.eh_frame:000000000001813F                 db    0
.eh_frame:0000000000018140                 db 0A0h
.eh_frame:0000000000018141                 db    3
.eh_frame:0000000000018142                 db    0
.eh_frame:0000000000018143                 db    0
.eh_frame:0000000000018144                 db  7Ch ; |
.eh_frame:0000000000018145                 db 0CDh
.eh_frame:0000000000018146                 db 0FEh
.eh_frame:0000000000018147                 db 0FFh
.eh_frame:0000000000018148                 db  4Bh ; K
.eh_frame:0000000000018149                 db    1
.eh_frame:000000000001814A                 db    0
.eh_frame:000000000001814B                 db    0
.eh_frame:000000000001814C                 db    0
.eh_frame:000000000001814D                 db  42h ; B
.eh_frame:000000000001814E                 db  0Eh
.eh_frame:000000000001814F                 db  10h
.eh_frame:0000000000018150                 db  8Eh
.eh_frame:0000000000018151                 db    2
.eh_frame:0000000000018152                 db  42h ; B
.eh_frame:0000000000018153                 db  0Eh
.eh_frame:0000000000018154                 db  18h
.eh_frame:0000000000018155                 db  8Dh
.eh_frame:0000000000018156                 db    3
.eh_frame:0000000000018157                 db  45h ; E
.eh_frame:0000000000018158                 db  0Eh
.eh_frame:0000000000018159                 db  20h
.eh_frame:000000000001815A                 db  8Ch
.eh_frame:000000000001815B                 db    4
.eh_frame:000000000001815C                 db  41h ; A
.eh_frame:000000000001815D                 db  0Eh
.eh_frame:000000000001815E                 db  28h ; (
.eh_frame:000000000001815F                 db  86h
.eh_frame:0000000000018160                 db    5
.eh_frame:0000000000018161                 db  44h ; D
.eh_frame:0000000000018162                 db  0Eh
.eh_frame:0000000000018163                 db  30h ; 0
.eh_frame:0000000000018164                 db  83h
.eh_frame:0000000000018165                 db    6
.eh_frame:0000000000018166                 db  4Ah ; J
.eh_frame:0000000000018167                 db  0Eh
.eh_frame:0000000000018168                 db  50h ; P
.eh_frame:0000000000018169                 db    2
.eh_frame:000000000001816A                 db  83h
.eh_frame:000000000001816B                 db  0Eh
.eh_frame:000000000001816C                 db  58h ; X
.eh_frame:000000000001816D                 db  4Dh ; M
.eh_frame:000000000001816E                 db  0Eh
.eh_frame:000000000001816F                 db  60h ; `
.eh_frame:0000000000018170                 db  56h ; V
.eh_frame:0000000000018171                 db  0Eh
.eh_frame:0000000000018172                 db  58h ; X
.eh_frame:0000000000018173                 db  41h ; A
.eh_frame:0000000000018174                 db  0Eh
.eh_frame:0000000000018175                 db  50h ; P
.eh_frame:0000000000018176                 db    2
.eh_frame:0000000000018177                 db  68h ; h
.eh_frame:0000000000018178                 db  0Ah
.eh_frame:0000000000018179                 db  0Eh
.eh_frame:000000000001817A                 db  30h ; 0
.eh_frame:000000000001817B                 db  41h ; A
.eh_frame:000000000001817C                 db  0Eh
.eh_frame:000000000001817D                 db  28h ; (
.eh_frame:000000000001817E                 db  41h ; A
.eh_frame:000000000001817F                 db  0Eh
.eh_frame:0000000000018180                 db  20h
.eh_frame:0000000000018181                 db  42h ; B
.eh_frame:0000000000018182                 db  0Eh
.eh_frame:0000000000018183                 db  18h
.eh_frame:0000000000018184                 db  42h ; B
.eh_frame:0000000000018185                 db  0Eh
.eh_frame:0000000000018186                 db  10h
.eh_frame:0000000000018187                 db  42h ; B
.eh_frame:0000000000018188                 db  0Eh
.eh_frame:0000000000018189                 db    8
.eh_frame:000000000001818A                 db  41h ; A
.eh_frame:000000000001818B                 db  0Bh
.eh_frame:000000000001818C                 db  4Ch ; L
.eh_frame:000000000001818D                 db    0
.eh_frame:000000000001818E                 db    0
.eh_frame:000000000001818F                 db    0
.eh_frame:0000000000018190                 db 0F0h
.eh_frame:0000000000018191                 db    3
.eh_frame:0000000000018192                 db    0
.eh_frame:0000000000018193                 db    0
.eh_frame:0000000000018194                 db  7Ch ; |
.eh_frame:0000000000018195                 db 0CEh
.eh_frame:0000000000018196                 db 0FEh
.eh_frame:0000000000018197                 db 0FFh
.eh_frame:0000000000018198                 db 0BEh
.eh_frame:0000000000018199                 db    0
.eh_frame:000000000001819A                 db    0
.eh_frame:000000000001819B                 db    0
.eh_frame:000000000001819C                 db    0
.eh_frame:000000000001819D                 db  42h ; B
.eh_frame:000000000001819E                 db  0Eh
.eh_frame:000000000001819F                 db  10h
.eh_frame:00000000000181A0                 db  8Dh
.eh_frame:00000000000181A1                 db    2
.eh_frame:00000000000181A2                 db  42h ; B
.eh_frame:00000000000181A3                 db  0Eh
.eh_frame:00000000000181A4                 db  18h
.eh_frame:00000000000181A5                 db  8Ch
.eh_frame:00000000000181A6                 db    3
.eh_frame:00000000000181A7                 db  44h ; D
.eh_frame:00000000000181A8                 db  0Eh
.eh_frame:00000000000181A9                 db  20h
.eh_frame:00000000000181AA                 db  86h
.eh_frame:00000000000181AB                 db    4
.eh_frame:00000000000181AC                 db  41h ; A
.eh_frame:00000000000181AD                 db  0Eh
.eh_frame:00000000000181AE                 db  28h ; (
.eh_frame:00000000000181AF                 db  83h
.eh_frame:00000000000181B0                 db    5
.eh_frame:00000000000181B1                 db  51h ; Q
.eh_frame:00000000000181B2                 db  0Eh
.eh_frame:00000000000181B3                 db  30h ; 0
.eh_frame:00000000000181B4                 db  56h ; V
.eh_frame:00000000000181B5                 db  0Ah
.eh_frame:00000000000181B6                 db  0Eh
.eh_frame:00000000000181B7                 db  28h ; (
.eh_frame:00000000000181B8                 db  46h ; F
.eh_frame:00000000000181B9                 db  0Eh
.eh_frame:00000000000181BA                 db  20h
.eh_frame:00000000000181BB                 db  41h ; A
.eh_frame:00000000000181BC                 db  0Eh
.eh_frame:00000000000181BD                 db  18h
.eh_frame:00000000000181BE                 db  42h ; B
.eh_frame:00000000000181BF                 db  0Eh
.eh_frame:00000000000181C0                 db  10h
.eh_frame:00000000000181C1                 db  42h ; B
.eh_frame:00000000000181C2                 db  0Eh
.eh_frame:00000000000181C3                 db    8
.eh_frame:00000000000181C4                 db  45h ; E
.eh_frame:00000000000181C5                 db  0Bh
.eh_frame:00000000000181C6                 db    2
.eh_frame:00000000000181C7                 db  54h ; T
.eh_frame:00000000000181C8                 db  0Ah
.eh_frame:00000000000181C9                 db  0Eh
.eh_frame:00000000000181CA                 db  28h ; (
.eh_frame:00000000000181CB                 db  43h ; C
.eh_frame:00000000000181CC                 db  0Eh
.eh_frame:00000000000181CD                 db  20h
.eh_frame:00000000000181CE                 db  41h ; A
.eh_frame:00000000000181CF                 db  0Eh
.eh_frame:00000000000181D0                 db  18h
.eh_frame:00000000000181D1                 db  42h ; B
.eh_frame:00000000000181D2                 db  0Eh
.eh_frame:00000000000181D3                 db  10h
.eh_frame:00000000000181D4                 db  42h ; B
.eh_frame:00000000000181D5                 db  0Eh
.eh_frame:00000000000181D6                 db    8
.eh_frame:00000000000181D7                 db  44h ; D
.eh_frame:00000000000181D8                 db  0Bh
.eh_frame:00000000000181D9                 db    0
.eh_frame:00000000000181DA                 db    0
.eh_frame:00000000000181DB                 db    0
.eh_frame:00000000000181DC                 db  64h ; d
.eh_frame:00000000000181DD                 db    0
.eh_frame:00000000000181DE                 db    0
.eh_frame:00000000000181DF                 db    0
.eh_frame:00000000000181E0                 db  40h ; @
.eh_frame:00000000000181E1                 db    4
.eh_frame:00000000000181E2                 db    0
.eh_frame:00000000000181E3                 db    0
.eh_frame:00000000000181E4                 db 0ECh
.eh_frame:00000000000181E5                 db 0CEh
.eh_frame:00000000000181E6                 db 0FEh
.eh_frame:00000000000181E7                 db 0FFh
.eh_frame:00000000000181E8                 db  0Eh
.eh_frame:00000000000181E9                 db    4
.eh_frame:00000000000181EA                 db    0
.eh_frame:00000000000181EB                 db    0
.eh_frame:00000000000181EC                 db    0
.eh_frame:00000000000181ED                 db  42h ; B
.eh_frame:00000000000181EE                 db  0Eh
.eh_frame:00000000000181EF                 db  10h
.eh_frame:00000000000181F0                 db  8Fh
.eh_frame:00000000000181F1                 db    2
.eh_frame:00000000000181F2                 db  42h ; B
.eh_frame:00000000000181F3                 db  0Eh
.eh_frame:00000000000181F4                 db  18h
.eh_frame:00000000000181F5                 db  8Eh
.eh_frame:00000000000181F6                 db    3
.eh_frame:00000000000181F7                 db  42h ; B
.eh_frame:00000000000181F8                 db  0Eh
.eh_frame:00000000000181F9                 db  20h
.eh_frame:00000000000181FA                 db  8Dh
.eh_frame:00000000000181FB                 db    4
.eh_frame:00000000000181FC                 db  42h ; B
.eh_frame:00000000000181FD                 db  0Eh
.eh_frame:00000000000181FE                 db  28h ; (
.eh_frame:00000000000181FF                 db  8Ch
.eh_frame:0000000000018200                 db    5
.eh_frame:0000000000018201                 db  41h ; A
.eh_frame:0000000000018202                 db  0Eh
.eh_frame:0000000000018203                 db  30h ; 0
.eh_frame:0000000000018204                 db  86h
.eh_frame:0000000000018205                 db    6
.eh_frame:0000000000018206                 db  41h ; A
.eh_frame:0000000000018207                 db  0Eh
.eh_frame:0000000000018208                 db  38h ; 8
.eh_frame:0000000000018209                 db  83h
.eh_frame:000000000001820A                 db    7
.eh_frame:000000000001820B                 db  44h ; D
.eh_frame:000000000001820C                 db  0Eh
.eh_frame:000000000001820D                 db 0B0h
.eh_frame:000000000001820E                 db    1
.eh_frame:000000000001820F                 db    2
.eh_frame:0000000000018210                 db 0FBh
.eh_frame:0000000000018211                 db  0Ah
.eh_frame:0000000000018212                 db  0Eh
.eh_frame:0000000000018213                 db  38h ; 8
.eh_frame:0000000000018214                 db  44h ; D
.eh_frame:0000000000018215                 db  0Eh
.eh_frame:0000000000018216                 db  30h ; 0
.eh_frame:0000000000018217                 db  41h ; A
.eh_frame:0000000000018218                 db  0Eh
.eh_frame:0000000000018219                 db  28h ; (
.eh_frame:000000000001821A                 db  42h ; B
.eh_frame:000000000001821B                 db  0Eh
.eh_frame:000000000001821C                 db  20h
.eh_frame:000000000001821D                 db  42h ; B
.eh_frame:000000000001821E                 db  0Eh
.eh_frame:000000000001821F                 db  18h
.eh_frame:0000000000018220                 db  42h ; B
.eh_frame:0000000000018221                 db  0Eh
.eh_frame:0000000000018222                 db  10h
.eh_frame:0000000000018223                 db  42h ; B
.eh_frame:0000000000018224                 db  0Eh
.eh_frame:0000000000018225                 db    8
.eh_frame:0000000000018226                 db  4Ah ; J
.eh_frame:0000000000018227                 db  0Bh
.eh_frame:0000000000018228                 db    3
.eh_frame:0000000000018229                 db  4Dh ; M
.eh_frame:000000000001822A                 db    1
.eh_frame:000000000001822B                 db  0Ah
.eh_frame:000000000001822C                 db  0Eh
.eh_frame:000000000001822D                 db  38h ; 8
.eh_frame:000000000001822E                 db  41h ; A
.eh_frame:000000000001822F                 db  0Eh
.eh_frame:0000000000018230                 db  30h ; 0
.eh_frame:0000000000018231                 db  41h ; A
.eh_frame:0000000000018232                 db  0Eh
.eh_frame:0000000000018233                 db  28h ; (
.eh_frame:0000000000018234                 db  42h ; B
.eh_frame:0000000000018235                 db  0Eh
.eh_frame:0000000000018236                 db  20h
.eh_frame:0000000000018237                 db  42h ; B
.eh_frame:0000000000018238                 db  0Eh
.eh_frame:0000000000018239                 db  18h
.eh_frame:000000000001823A                 db  42h ; B
.eh_frame:000000000001823B                 db  0Eh
.eh_frame:000000000001823C                 db  10h
.eh_frame:000000000001823D                 db  42h ; B
.eh_frame:000000000001823E                 db  0Eh
.eh_frame:000000000001823F                 db    8
.eh_frame:0000000000018240                 db  49h ; I
.eh_frame:0000000000018241                 db  0Bh
.eh_frame:0000000000018242                 db    0
.eh_frame:0000000000018243                 db    0
.eh_frame:0000000000018244                 db  58h ; X
.eh_frame:0000000000018245                 db    0
.eh_frame:0000000000018246                 db    0
.eh_frame:0000000000018247                 db    0
.eh_frame:0000000000018248                 db 0A8h
.eh_frame:0000000000018249                 db    4
.eh_frame:000000000001824A                 db    0
.eh_frame:000000000001824B                 db    0
.eh_frame:000000000001824C                 db  94h
.eh_frame:000000000001824D                 db 0D2h
.eh_frame:000000000001824E                 db 0FEh
.eh_frame:000000000001824F                 db 0FFh
.eh_frame:0000000000018250                 db 0D0h
.eh_frame:0000000000018251                 db    0
.eh_frame:0000000000018252                 db    0
.eh_frame:0000000000018253                 db    0
.eh_frame:0000000000018254                 db    0
.eh_frame:0000000000018255                 db  42h ; B
.eh_frame:0000000000018256                 db  0Eh
.eh_frame:0000000000018257                 db  10h
.eh_frame:0000000000018258                 db  8Dh
.eh_frame:0000000000018259                 db    2
.eh_frame:000000000001825A                 db  42h ; B
.eh_frame:000000000001825B                 db  0Eh
.eh_frame:000000000001825C                 db  18h
.eh_frame:000000000001825D                 db  8Ch
.eh_frame:000000000001825E                 db    3
.eh_frame:000000000001825F                 db  41h ; A
.eh_frame:0000000000018260                 db  0Eh
.eh_frame:0000000000018261                 db  20h
.eh_frame:0000000000018262                 db  86h
.eh_frame:0000000000018263                 db    4
.eh_frame:0000000000018264                 db  41h ; A
.eh_frame:0000000000018265                 db  0Eh
.eh_frame:0000000000018266                 db  28h ; (
.eh_frame:0000000000018267                 db  83h
.eh_frame:0000000000018268                 db    5
.eh_frame:0000000000018269                 db  47h ; G
.eh_frame:000000000001826A                 db  0Eh
.eh_frame:000000000001826B                 db  30h ; 0
.eh_frame:000000000001826C                 db    2
.eh_frame:000000000001826D                 db  5Eh ; ^
.eh_frame:000000000001826E                 db  0Ah
.eh_frame:000000000001826F                 db  0Eh
.eh_frame:0000000000018270                 db  28h ; (
.eh_frame:0000000000018271                 db  46h ; F
.eh_frame:0000000000018272                 db  0Eh
.eh_frame:0000000000018273                 db  20h
.eh_frame:0000000000018274                 db  41h ; A
.eh_frame:0000000000018275                 db  0Eh
.eh_frame:0000000000018276                 db  18h
.eh_frame:0000000000018277                 db  42h ; B
.eh_frame:0000000000018278                 db  0Eh
.eh_frame:0000000000018279                 db  10h
.eh_frame:000000000001827A                 db  42h ; B
.eh_frame:000000000001827B                 db  0Eh
.eh_frame:000000000001827C                 db    8
.eh_frame:000000000001827D                 db  4Ah ; J
.eh_frame:000000000001827E                 db  0Bh
.eh_frame:000000000001827F                 db  4Ch ; L
.eh_frame:0000000000018280                 db  0Ah
.eh_frame:0000000000018281                 db  0Eh
.eh_frame:0000000000018282                 db  28h ; (
.eh_frame:0000000000018283                 db  48h ; H
.eh_frame:0000000000018284                 db  0Eh
.eh_frame:0000000000018285                 db  20h
.eh_frame:0000000000018286                 db  41h ; A
.eh_frame:0000000000018287                 db  0Eh
.eh_frame:0000000000018288                 db  18h
.eh_frame:0000000000018289                 db  42h ; B
.eh_frame:000000000001828A                 db  0Eh
.eh_frame:000000000001828B                 db  10h
.eh_frame:000000000001828C                 db  42h ; B
.eh_frame:000000000001828D                 db  0Eh
.eh_frame:000000000001828E                 db    8
.eh_frame:000000000001828F                 db  47h ; G
.eh_frame:0000000000018290                 db  0Bh
.eh_frame:0000000000018291                 db  67h ; g
.eh_frame:0000000000018292                 db  0Eh
.eh_frame:0000000000018293                 db  28h ; (
.eh_frame:0000000000018294                 db  43h ; C
.eh_frame:0000000000018295                 db  0Eh
.eh_frame:0000000000018296                 db  20h
.eh_frame:0000000000018297                 db  41h ; A
.eh_frame:0000000000018298                 db  0Eh
.eh_frame:0000000000018299                 db  18h
.eh_frame:000000000001829A                 db  42h ; B
.eh_frame:000000000001829B                 db  0Eh
.eh_frame:000000000001829C                 db  10h
.eh_frame:000000000001829D                 db  42h ; B
.eh_frame:000000000001829E                 db  0Eh
.eh_frame:000000000001829F                 db    8
.eh_frame:00000000000182A0                 db  34h ; 4
.eh_frame:00000000000182A1                 db    0
.eh_frame:00000000000182A2                 db    0
.eh_frame:00000000000182A3                 db    0
.eh_frame:00000000000182A4                 db    4
.eh_frame:00000000000182A5                 db    5
.eh_frame:00000000000182A6                 db    0
.eh_frame:00000000000182A7                 db    0
.eh_frame:00000000000182A8                 db    8
.eh_frame:00000000000182A9                 db 0D3h
.eh_frame:00000000000182AA                 db 0FEh
.eh_frame:00000000000182AB                 db 0FFh
.eh_frame:00000000000182AC                 db  75h ; u
.eh_frame:00000000000182AD                 db    0
.eh_frame:00000000000182AE                 db    0
.eh_frame:00000000000182AF                 db    0
.eh_frame:00000000000182B0                 db    0
.eh_frame:00000000000182B1                 db  42h ; B
.eh_frame:00000000000182B2                 db  0Eh
.eh_frame:00000000000182B3                 db  10h
.eh_frame:00000000000182B4                 db  8Ch
.eh_frame:00000000000182B5                 db    2
.eh_frame:00000000000182B6                 db  41h ; A
.eh_frame:00000000000182B7                 db  0Eh
.eh_frame:00000000000182B8                 db  18h
.eh_frame:00000000000182B9                 db  86h
.eh_frame:00000000000182BA                 db    3
.eh_frame:00000000000182BB                 db  44h ; D
.eh_frame:00000000000182BC                 db  0Eh
.eh_frame:00000000000182BD                 db  20h
.eh_frame:00000000000182BE                 db  83h
.eh_frame:00000000000182BF                 db    4
.eh_frame:00000000000182C0                 db    2
.eh_frame:00000000000182C1                 db  54h ; T
.eh_frame:00000000000182C2                 db  0Ah
.eh_frame:00000000000182C3                 db  0Eh
.eh_frame:00000000000182C4                 db  18h
.eh_frame:00000000000182C5                 db  43h ; C
.eh_frame:00000000000182C6                 db  0Eh
.eh_frame:00000000000182C7                 db  10h
.eh_frame:00000000000182C8                 db  42h ; B
.eh_frame:00000000000182C9                 db  0Eh
.eh_frame:00000000000182CA                 db    8
.eh_frame:00000000000182CB                 db  48h ; H
.eh_frame:00000000000182CC                 db  0Bh
.eh_frame:00000000000182CD                 db  49h ; I
.eh_frame:00000000000182CE                 db  0Eh
.eh_frame:00000000000182CF                 db  18h
.eh_frame:00000000000182D0                 db  41h ; A
.eh_frame:00000000000182D1                 db  0Eh
.eh_frame:00000000000182D2                 db  10h
.eh_frame:00000000000182D3                 db  42h ; B
.eh_frame:00000000000182D4                 db  0Eh
.eh_frame:00000000000182D5                 db    8
.eh_frame:00000000000182D6                 db    0
.eh_frame:00000000000182D7                 db    0
.eh_frame:00000000000182D8                 db  18h
.eh_frame:00000000000182D9                 db    0
.eh_frame:00000000000182DA                 db    0
.eh_frame:00000000000182DB                 db    0
.eh_frame:00000000000182DC                 db  3Ch ; <
.eh_frame:00000000000182DD                 db    5
.eh_frame:00000000000182DE                 db    0
.eh_frame:00000000000182DF                 db    0
.eh_frame:00000000000182E0                 db  50h ; P
.eh_frame:00000000000182E1                 db 0D3h
.eh_frame:00000000000182E2                 db 0FEh
.eh_frame:00000000000182E3                 db 0FFh
.eh_frame:00000000000182E4                 db  2Bh ; +
.eh_frame:00000000000182E5                 db    0
.eh_frame:00000000000182E6                 db    0
.eh_frame:00000000000182E7                 db    0
.eh_frame:00000000000182E8                 db    0
.eh_frame:00000000000182E9                 db  58h ; X
.eh_frame:00000000000182EA                 db  0Eh
.eh_frame:00000000000182EB                 db  10h
.eh_frame:00000000000182EC                 db  83h
.eh_frame:00000000000182ED                 db    2
.eh_frame:00000000000182EE                 db  52h ; R
.eh_frame:00000000000182EF                 db  0Eh
.eh_frame:00000000000182F0                 db    8
.eh_frame:00000000000182F1                 db    0
.eh_frame:00000000000182F2                 db    0
.eh_frame:00000000000182F3                 db    0
.eh_frame:00000000000182F4                 db  18h
.eh_frame:00000000000182F5                 db    0
.eh_frame:00000000000182F6                 db    0
.eh_frame:00000000000182F7                 db    0
.eh_frame:00000000000182F8                 db  58h ; X
.eh_frame:00000000000182F9                 db    5
.eh_frame:00000000000182FA                 db    0
.eh_frame:00000000000182FB                 db    0
.eh_frame:00000000000182FC                 db  64h ; d
.eh_frame:00000000000182FD                 db 0D3h
.eh_frame:00000000000182FE                 db 0FEh
.eh_frame:00000000000182FF                 db 0FFh
.eh_frame:0000000000018300                 db  2Bh ; +
.eh_frame:0000000000018301                 db    0
.eh_frame:0000000000018302                 db    0
.eh_frame:0000000000018303                 db    0
.eh_frame:0000000000018304                 db    0
.eh_frame:0000000000018305                 db  58h ; X
.eh_frame:0000000000018306                 db  0Eh
.eh_frame:0000000000018307                 db  10h
.eh_frame:0000000000018308                 db  83h
.eh_frame:0000000000018309                 db    2
.eh_frame:000000000001830A                 db  52h ; R
.eh_frame:000000000001830B                 db  0Eh
.eh_frame:000000000001830C                 db    8
.eh_frame:000000000001830D                 db    0
.eh_frame:000000000001830E                 db    0
.eh_frame:000000000001830F                 db    0
.eh_frame:0000000000018310                 db  18h
.eh_frame:0000000000018311                 db    0
.eh_frame:0000000000018312                 db    0
.eh_frame:0000000000018313                 db    0
.eh_frame:0000000000018314                 db  74h ; t
.eh_frame:0000000000018315                 db    5
.eh_frame:0000000000018316                 db    0
.eh_frame:0000000000018317                 db    0
.eh_frame:0000000000018318                 db  78h ; x
.eh_frame:0000000000018319                 db 0D3h
.eh_frame:000000000001831A                 db 0FEh
.eh_frame:000000000001831B                 db 0FFh
.eh_frame:000000000001831C                 db  34h ; 4
.eh_frame:000000000001831D                 db    0
.eh_frame:000000000001831E                 db    0
.eh_frame:000000000001831F                 db    0
.eh_frame:0000000000018320                 db    0
.eh_frame:0000000000018321                 db  45h ; E
.eh_frame:0000000000018322                 db  0Eh
.eh_frame:0000000000018323                 db  10h
.eh_frame:0000000000018324                 db  83h
.eh_frame:0000000000018325                 db    2
.eh_frame:0000000000018326                 db  6Eh ; n
.eh_frame:0000000000018327                 db  0Eh
.eh_frame:0000000000018328                 db    8
.eh_frame:0000000000018329                 db    0
.eh_frame:000000000001832A                 db    0
.eh_frame:000000000001832B                 db    0
.eh_frame:000000000001832C                 db  18h
.eh_frame:000000000001832D                 db    0
.eh_frame:000000000001832E                 db    0
.eh_frame:000000000001832F                 db    0
.eh_frame:0000000000018330                 db  90h
.eh_frame:0000000000018331                 db    5
.eh_frame:0000000000018332                 db    0
.eh_frame:0000000000018333                 db    0
.eh_frame:0000000000018334                 db  9Ch
.eh_frame:0000000000018335                 db 0D3h
.eh_frame:0000000000018336                 db 0FEh
.eh_frame:0000000000018337                 db 0FFh
.eh_frame:0000000000018338                 db  24h ; $
.eh_frame:0000000000018339                 db    0
.eh_frame:000000000001833A                 db    0
.eh_frame:000000000001833B                 db    0
.eh_frame:000000000001833C                 db    0
.eh_frame:000000000001833D                 db  41h ; A
.eh_frame:000000000001833E                 db  0Eh
.eh_frame:000000000001833F                 db  10h
.eh_frame:0000000000018340                 db  83h
.eh_frame:0000000000018341                 db    2
.eh_frame:0000000000018342                 db  62h ; b
.eh_frame:0000000000018343                 db  0Eh
.eh_frame:0000000000018344                 db    8
.eh_frame:0000000000018345                 db    0
.eh_frame:0000000000018346                 db    0
.eh_frame:0000000000018347                 db    0
.eh_frame:0000000000018348                 db  7Ch ; |
.eh_frame:0000000000018349                 db    0
.eh_frame:000000000001834A                 db    0
.eh_frame:000000000001834B                 db    0
.eh_frame:000000000001834C                 db 0ACh
.eh_frame:000000000001834D                 db    5
.eh_frame:000000000001834E                 db    0
.eh_frame:000000000001834F                 db    0
.eh_frame:0000000000018350                 db 0B0h
.eh_frame:0000000000018351                 db 0D3h
.eh_frame:0000000000018352                 db 0FEh
.eh_frame:0000000000018353                 db 0FFh
.eh_frame:0000000000018354                 db  0Ch
.eh_frame:0000000000018355                 db    2
.eh_frame:0000000000018356                 db    0
.eh_frame:0000000000018357                 db    0
.eh_frame:0000000000018358                 db    0
.eh_frame:0000000000018359                 db  42h ; B
.eh_frame:000000000001835A                 db  0Eh
.eh_frame:000000000001835B                 db  10h
.eh_frame:000000000001835C                 db  8Fh
.eh_frame:000000000001835D                 db    2
.eh_frame:000000000001835E                 db  42h ; B
.eh_frame:000000000001835F                 db  0Eh
.eh_frame:0000000000018360                 db  18h
.eh_frame:0000000000018361                 db  8Eh
.eh_frame:0000000000018362                 db    3
.eh_frame:0000000000018363                 db  42h ; B
.eh_frame:0000000000018364                 db  0Eh
.eh_frame:0000000000018365                 db  20h
.eh_frame:0000000000018366                 db  8Dh
.eh_frame:0000000000018367                 db    4
.eh_frame:0000000000018368                 db  42h ; B
.eh_frame:0000000000018369                 db  0Eh
.eh_frame:000000000001836A                 db  28h ; (
.eh_frame:000000000001836B                 db  8Ch
.eh_frame:000000000001836C                 db    5
.eh_frame:000000000001836D                 db  44h ; D
.eh_frame:000000000001836E                 db  0Eh
.eh_frame:000000000001836F                 db  30h ; 0
.eh_frame:0000000000018370                 db  86h
.eh_frame:0000000000018371                 db    6
.eh_frame:0000000000018372                 db  41h ; A
.eh_frame:0000000000018373                 db  0Eh
.eh_frame:0000000000018374                 db  38h ; 8
.eh_frame:0000000000018375                 db  83h
.eh_frame:0000000000018376                 db    7
.eh_frame:0000000000018377                 db  49h ; I
.eh_frame:0000000000018378                 db  0Eh
.eh_frame:0000000000018379                 db  40h ; @
.eh_frame:000000000001837A                 db    2
.eh_frame:000000000001837B                 db  8Ch
.eh_frame:000000000001837C                 db  0Ah
.eh_frame:000000000001837D                 db  0Eh
.eh_frame:000000000001837E                 db  38h ; 8
.eh_frame:000000000001837F                 db  41h ; A
.eh_frame:0000000000018380                 db  0Eh
.eh_frame:0000000000018381                 db  30h ; 0
.eh_frame:0000000000018382                 db  41h ; A
.eh_frame:0000000000018383                 db  0Eh
.eh_frame:0000000000018384                 db  28h ; (
.eh_frame:0000000000018385                 db  42h ; B
.eh_frame:0000000000018386                 db  0Eh
.eh_frame:0000000000018387                 db  20h
.eh_frame:0000000000018388                 db  42h ; B
.eh_frame:0000000000018389                 db  0Eh
.eh_frame:000000000001838A                 db  18h
.eh_frame:000000000001838B                 db  42h ; B
.eh_frame:000000000001838C                 db  0Eh
.eh_frame:000000000001838D                 db  10h
.eh_frame:000000000001838E                 db  42h ; B
.eh_frame:000000000001838F                 db  0Eh
.eh_frame:0000000000018390                 db    8
.eh_frame:0000000000018391                 db  44h ; D
.eh_frame:0000000000018392                 db  0Bh
.eh_frame:0000000000018393                 db  50h ; P
.eh_frame:0000000000018394                 db  0Ah
.eh_frame:0000000000018395                 db  0Eh
.eh_frame:0000000000018396                 db  38h ; 8
.eh_frame:0000000000018397                 db  46h ; F
.eh_frame:0000000000018398                 db  0Eh
.eh_frame:0000000000018399                 db  30h ; 0
.eh_frame:000000000001839A                 db  41h ; A
.eh_frame:000000000001839B                 db  0Eh
.eh_frame:000000000001839C                 db  28h ; (
.eh_frame:000000000001839D                 db  42h ; B
.eh_frame:000000000001839E                 db  0Eh
.eh_frame:000000000001839F                 db  20h
.eh_frame:00000000000183A0                 db  42h ; B
.eh_frame:00000000000183A1                 db  0Eh
.eh_frame:00000000000183A2                 db  18h
.eh_frame:00000000000183A3                 db  42h ; B
.eh_frame:00000000000183A4                 db  0Eh
.eh_frame:00000000000183A5                 db  10h
.eh_frame:00000000000183A6                 db  42h ; B
.eh_frame:00000000000183A7                 db  0Eh
.eh_frame:00000000000183A8                 db    8
.eh_frame:00000000000183A9                 db  41h ; A
.eh_frame:00000000000183AA                 db  0Bh
.eh_frame:00000000000183AB                 db    3
.eh_frame:00000000000183AC                 db    4
.eh_frame:00000000000183AD                 db    1
.eh_frame:00000000000183AE                 db  0Ah
.eh_frame:00000000000183AF                 db  0Eh
.eh_frame:00000000000183B0                 db  38h ; 8
.eh_frame:00000000000183B1                 db  41h ; A
.eh_frame:00000000000183B2                 db  0Eh
.eh_frame:00000000000183B3                 db  30h ; 0
.eh_frame:00000000000183B4                 db  41h ; A
.eh_frame:00000000000183B5                 db  0Eh
.eh_frame:00000000000183B6                 db  28h ; (
.eh_frame:00000000000183B7                 db  42h ; B
.eh_frame:00000000000183B8                 db  0Eh
.eh_frame:00000000000183B9                 db  20h
.eh_frame:00000000000183BA                 db  44h ; D
.eh_frame:00000000000183BB                 db  0Eh
.eh_frame:00000000000183BC                 db  18h
.eh_frame:00000000000183BD                 db  42h ; B
.eh_frame:00000000000183BE                 db  0Eh
.eh_frame:00000000000183BF                 db  10h
.eh_frame:00000000000183C0                 db  42h ; B
.eh_frame:00000000000183C1                 db  0Eh
.eh_frame:00000000000183C2                 db    8
.eh_frame:00000000000183C3                 db  48h ; H
.eh_frame:00000000000183C4                 db  0Bh
.eh_frame:00000000000183C5                 db    0
.eh_frame:00000000000183C6                 db    0
.eh_frame:00000000000183C7                 db    0
.eh_frame:00000000000183C8                 db  1Ch
.eh_frame:00000000000183C9                 db    0
.eh_frame:00000000000183CA                 db    0
.eh_frame:00000000000183CB                 db    0
.eh_frame:00000000000183CC                 db  2Ch ; ,
.eh_frame:00000000000183CD                 db    6
.eh_frame:00000000000183CE                 db    0
.eh_frame:00000000000183CF                 db    0
.eh_frame:00000000000183D0                 db  40h ; @
.eh_frame:00000000000183D1                 db 0D5h
.eh_frame:00000000000183D2                 db 0FEh
.eh_frame:00000000000183D3                 db 0FFh
.eh_frame:00000000000183D4                 db  2Ah ; *
.eh_frame:00000000000183D5                 db    0
.eh_frame:00000000000183D6                 db    0
.eh_frame:00000000000183D7                 db    0
.eh_frame:00000000000183D8                 db    0
.eh_frame:00000000000183D9                 db  41h ; A
.eh_frame:00000000000183DA                 db  0Eh
.eh_frame:00000000000183DB                 db  10h
.eh_frame:00000000000183DC                 db  83h
.eh_frame:00000000000183DD                 db    2
.eh_frame:00000000000183DE                 db  4Eh ; N
.eh_frame:00000000000183DF                 db  0Ah
.eh_frame:00000000000183E0                 db  0Eh
.eh_frame:00000000000183E1                 db    8
.eh_frame:00000000000183E2                 db  41h ; A
.eh_frame:00000000000183E3                 db  0Bh
.eh_frame:00000000000183E4                 db  59h ; Y
.eh_frame:00000000000183E5                 db  0Eh
.eh_frame:00000000000183E6                 db    8
.eh_frame:00000000000183E7                 db    0
.eh_frame:00000000000183E8                 db  2Ch ; ,
.eh_frame:00000000000183E9                 db    0
.eh_frame:00000000000183EA                 db    0
.eh_frame:00000000000183EB                 db    0
.eh_frame:00000000000183EC                 db  4Ch ; L
.eh_frame:00000000000183ED                 db    6
.eh_frame:00000000000183EE                 db    0
.eh_frame:00000000000183EF                 db    0
.eh_frame:00000000000183F0                 db  50h ; P
.eh_frame:00000000000183F1                 db 0D5h
.eh_frame:00000000000183F2                 db 0FEh
.eh_frame:00000000000183F3                 db 0FFh
.eh_frame:00000000000183F4                 db  0Ch
.eh_frame:00000000000183F5                 db  41h ; A
.eh_frame:00000000000183F6                 db    0
.eh_frame:00000000000183F7                 db    0
.eh_frame:00000000000183F8                 db    0
.eh_frame:00000000000183F9                 db  41h ; A
.eh_frame:00000000000183FA                 db  0Eh
.eh_frame:00000000000183FB                 db  10h
.eh_frame:00000000000183FC                 db  86h
.eh_frame:00000000000183FD                 db    2
.eh_frame:00000000000183FE                 db  43h ; C
.eh_frame:00000000000183FF                 db  0Dh
.eh_frame:0000000000018400                 db    6
.eh_frame:0000000000018401                 db  48h ; H
.eh_frame:0000000000018402                 db  8Fh
.eh_frame:0000000000018403                 db    3
.eh_frame:0000000000018404                 db  8Eh
.eh_frame:0000000000018405                 db    4
.eh_frame:0000000000018406                 db  8Dh
.eh_frame:0000000000018407                 db    5
.eh_frame:0000000000018408                 db  8Ch
.eh_frame:0000000000018409                 db    6
.eh_frame:000000000001840A                 db  44h ; D
.eh_frame:000000000001840B                 db  83h
.eh_frame:000000000001840C                 db    7
.eh_frame:000000000001840D                 db    3
.eh_frame:000000000001840E                 db  5Ah ; Z
.eh_frame:000000000001840F                 db    8
.eh_frame:0000000000018410                 db  0Ah
.eh_frame:0000000000018411                 db  0Ch
.eh_frame:0000000000018412                 db    7
.eh_frame:0000000000018413                 db    8
.eh_frame:0000000000018414                 db  46h ; F
.eh_frame:0000000000018415                 db  0Bh
.eh_frame:0000000000018416                 db    0
.eh_frame:0000000000018417                 db    0
.eh_frame:0000000000018418                 db  2Ch ; ,
.eh_frame:0000000000018419                 db    0
.eh_frame:000000000001841A                 db    0
.eh_frame:000000000001841B                 db    0
.eh_frame:000000000001841C                 db  7Ch ; |
.eh_frame:000000000001841D                 db    6
.eh_frame:000000000001841E                 db    0
.eh_frame:000000000001841F                 db    0
.eh_frame:0000000000018420                 db  30h ; 0
.eh_frame:0000000000018421                 db  16h
.eh_frame:0000000000018422                 db 0FFh
.eh_frame:0000000000018423                 db 0FFh
.eh_frame:0000000000018424                 db  65h ; e
.eh_frame:0000000000018425                 db    1
.eh_frame:0000000000018426                 db    0
.eh_frame:0000000000018427                 db    0
.eh_frame:0000000000018428                 db    0
.eh_frame:0000000000018429                 db  44h ; D
.eh_frame:000000000001842A                 db  0Eh
.eh_frame:000000000001842B                 db  20h
.eh_frame:000000000001842C                 db    2
.eh_frame:000000000001842D                 db  59h ; Y
.eh_frame:000000000001842E                 db  0Eh
.eh_frame:000000000001842F                 db  28h ; (
.eh_frame:0000000000018430                 db  45h ; E
.eh_frame:0000000000018431                 db  0Eh
.eh_frame:0000000000018432                 db  30h ; 0
.eh_frame:0000000000018433                 db  5Ch ; \
.eh_frame:0000000000018434                 db  0Eh
.eh_frame:0000000000018435                 db  38h ; 8
.eh_frame:0000000000018436                 db  42h ; B
.eh_frame:0000000000018437                 db  0Eh
.eh_frame:0000000000018438                 db  40h ; @
.eh_frame:0000000000018439                 db  49h ; I
.eh_frame:000000000001843A                 db  0Eh
.eh_frame:000000000001843B                 db  20h
.eh_frame:000000000001843C                 db  54h ; T
.eh_frame:000000000001843D                 db  0Ah
.eh_frame:000000000001843E                 db  0Eh
.eh_frame:000000000001843F                 db    8
.eh_frame:0000000000018440                 db  43h ; C
.eh_frame:0000000000018441                 db  0Bh
.eh_frame:0000000000018442                 db    0
.eh_frame:0000000000018443                 db    0
.eh_frame:0000000000018444                 db    0
.eh_frame:0000000000018445                 db    0
.eh_frame:0000000000018446                 db    0
.eh_frame:0000000000018447                 db    0
.eh_frame:0000000000018448                 db  10h
.eh_frame:0000000000018449                 db    0
.eh_frame:000000000001844A                 db    0
.eh_frame:000000000001844B                 db    0
.eh_frame:000000000001844C                 db 0ACh
.eh_frame:000000000001844D                 db    6
.eh_frame:000000000001844E                 db    0
.eh_frame:000000000001844F                 db    0
.eh_frame:0000000000018450                 db  70h ; p
.eh_frame:0000000000018451                 db  17h
.eh_frame:0000000000018452                 db 0FFh
.eh_frame:0000000000018453                 db 0FFh
.eh_frame:0000000000018454                 db  0Ch
.eh_frame:0000000000018455                 db    0
.eh_frame:0000000000018456                 db    0
.eh_frame:0000000000018457                 db    0
.eh_frame:0000000000018458                 db    0
.eh_frame:0000000000018459                 db    0
.eh_frame:000000000001845A                 db    0
.eh_frame:000000000001845B                 db    0
.eh_frame:000000000001845C                 db  10h
.eh_frame:000000000001845D                 db    0
.eh_frame:000000000001845E                 db    0
.eh_frame:000000000001845F                 db    0
.eh_frame:0000000000018460                 db 0C0h
.eh_frame:0000000000018461                 db    6
.eh_frame:0000000000018462                 db    0
.eh_frame:0000000000018463                 db    0
.eh_frame:0000000000018464                 db  6Ch ; l
.eh_frame:0000000000018465                 db  17h
.eh_frame:0000000000018466                 db 0FFh
.eh_frame:0000000000018467                 db 0FFh
.eh_frame:0000000000018468                 db  1Ch
.eh_frame:0000000000018469                 db    0
.eh_frame:000000000001846A                 db    0
.eh_frame:000000000001846B                 db    0
.eh_frame:000000000001846C                 db    0
.eh_frame:000000000001846D                 db    0
.eh_frame:000000000001846E                 db    0
.eh_frame:000000000001846F                 db    0
.eh_frame:0000000000018470                 db  18h
.eh_frame:0000000000018471                 db    0
.eh_frame:0000000000018472                 db    0
.eh_frame:0000000000018473                 db    0
.eh_frame:0000000000018474                 db 0D4h
.eh_frame:0000000000018475                 db    6
.eh_frame:0000000000018476                 db    0
.eh_frame:0000000000018477                 db    0
.eh_frame:0000000000018478                 db  78h ; x
.eh_frame:0000000000018479                 db  17h
.eh_frame:000000000001847A                 db 0FFh
.eh_frame:000000000001847B                 db 0FFh
.eh_frame:000000000001847C                 db  16h
.eh_frame:000000000001847D                 db    0
.eh_frame:000000000001847E                 db    0
.eh_frame:000000000001847F                 db    0
.eh_frame:0000000000018480                 db    0
.eh_frame:0000000000018481                 db  41h ; A
.eh_frame:0000000000018482                 db  0Eh
.eh_frame:0000000000018483                 db  10h
.eh_frame:0000000000018484                 db  83h
.eh_frame:0000000000018485                 db    2
.eh_frame:0000000000018486                 db  50h ; P
.eh_frame:0000000000018487                 db  0Eh
.eh_frame:0000000000018488                 db    8
.eh_frame:0000000000018489                 db    0
.eh_frame:000000000001848A                 db    0
.eh_frame:000000000001848B                 db    0
.eh_frame:000000000001848C                 db  20h
.eh_frame:000000000001848D                 db    0
.eh_frame:000000000001848E                 db    0
.eh_frame:000000000001848F                 db    0
.eh_frame:0000000000018490                 db 0F0h
.eh_frame:0000000000018491                 db    6
.eh_frame:0000000000018492                 db    0
.eh_frame:0000000000018493                 db    0
.eh_frame:0000000000018494                 db  7Ch ; |
.eh_frame:0000000000018495                 db  17h
.eh_frame:0000000000018496                 db 0FFh
.eh_frame:0000000000018497                 db 0FFh
.eh_frame:0000000000018498                 db  6Ah ; j
.eh_frame:0000000000018499                 db    0
.eh_frame:000000000001849A                 db    0
.eh_frame:000000000001849B                 db    0
.eh_frame:000000000001849C                 db    0
.eh_frame:000000000001849D                 db  41h ; A
.eh_frame:000000000001849E                 db  0Eh
.eh_frame:000000000001849F                 db  10h
.eh_frame:00000000000184A0                 db  83h
.eh_frame:00000000000184A1                 db    2
.eh_frame:00000000000184A2                 db  44h ; D
.eh_frame:00000000000184A3                 db  0Eh
.eh_frame:00000000000184A4                 db  30h ; 0
.eh_frame:00000000000184A5                 db    2
.eh_frame:00000000000184A6                 db  5Eh ; ^
.eh_frame:00000000000184A7                 db  0Ah
.eh_frame:00000000000184A8                 db  0Eh
.eh_frame:00000000000184A9                 db  10h
.eh_frame:00000000000184AA                 db  41h ; A
.eh_frame:00000000000184AB                 db  0Eh
.eh_frame:00000000000184AC                 db    8
.eh_frame:00000000000184AD                 db  41h ; A
.eh_frame:00000000000184AE                 db  0Bh
.eh_frame:00000000000184AF                 db    0
.eh_frame:00000000000184B0                 db  18h
.eh_frame:00000000000184B1                 db    0
.eh_frame:00000000000184B2                 db    0
.eh_frame:00000000000184B3                 db    0
.eh_frame:00000000000184B4                 db  14h
.eh_frame:00000000000184B5                 db    7
.eh_frame:00000000000184B6                 db    0
.eh_frame:00000000000184B7                 db    0
.eh_frame:00000000000184B8                 db 0C8h
.eh_frame:00000000000184B9                 db  17h
.eh_frame:00000000000184BA                 db 0FFh
.eh_frame:00000000000184BB                 db 0FFh
.eh_frame:00000000000184BC                 db  59h ; Y
.eh_frame:00000000000184BD                 db    0
.eh_frame:00000000000184BE                 db    0
.eh_frame:00000000000184BF                 db    0
.eh_frame:00000000000184C0                 db    0
.eh_frame:00000000000184C1                 db  44h ; D
.eh_frame:00000000000184C2                 db  0Eh
.eh_frame:00000000000184C3                 db  30h ; 0
.eh_frame:00000000000184C4                 db    2
.eh_frame:00000000000184C5                 db  45h ; E
.eh_frame:00000000000184C6                 db  0Ah
.eh_frame:00000000000184C7                 db  0Eh
.eh_frame:00000000000184C8                 db    8
.eh_frame:00000000000184C9                 db  47h ; G
.eh_frame:00000000000184CA                 db  0Bh
.eh_frame:00000000000184CB                 db    0
.eh_frame:00000000000184CC                 db  38h ; 8
.eh_frame:00000000000184CD                 db    0
.eh_frame:00000000000184CE                 db    0
.eh_frame:00000000000184CF                 db    0
.eh_frame:00000000000184D0                 db  30h ; 0
.eh_frame:00000000000184D1                 db    7
.eh_frame:00000000000184D2                 db    0
.eh_frame:00000000000184D3                 db    0
.eh_frame:00000000000184D4                 db  0Ch
.eh_frame:00000000000184D5                 db  18h
.eh_frame:00000000000184D6                 db 0FFh
.eh_frame:00000000000184D7                 db 0FFh
.eh_frame:00000000000184D8                 db  79h ; y
.eh_frame:00000000000184D9                 db    0
.eh_frame:00000000000184DA                 db    0
.eh_frame:00000000000184DB                 db    0
.eh_frame:00000000000184DC                 db    0
.eh_frame:00000000000184DD                 db  42h ; B
.eh_frame:00000000000184DE                 db  0Eh
.eh_frame:00000000000184DF                 db  10h
.eh_frame:00000000000184E0                 db  8Dh
.eh_frame:00000000000184E1                 db    2
.eh_frame:00000000000184E2                 db  42h ; B
.eh_frame:00000000000184E3                 db  0Eh
.eh_frame:00000000000184E4                 db  18h
.eh_frame:00000000000184E5                 db  8Ch
.eh_frame:00000000000184E6                 db    3
.eh_frame:00000000000184E7                 db  44h ; D
.eh_frame:00000000000184E8                 db  0Eh
.eh_frame:00000000000184E9                 db  20h
.eh_frame:00000000000184EA                 db  86h
.eh_frame:00000000000184EB                 db    4
.eh_frame:00000000000184EC                 db  41h ; A
.eh_frame:00000000000184ED                 db  0Eh
.eh_frame:00000000000184EE                 db  28h ; (
.eh_frame:00000000000184EF                 db  83h
.eh_frame:00000000000184F0                 db    5
.eh_frame:00000000000184F1                 db  4Fh ; O
.eh_frame:00000000000184F2                 db  0Eh
.eh_frame:00000000000184F3                 db  30h ; 0
.eh_frame:00000000000184F4                 db    2
.eh_frame:00000000000184F5                 db  50h ; P
.eh_frame:00000000000184F6                 db  0Ah
.eh_frame:00000000000184F7                 db  0Eh
.eh_frame:00000000000184F8                 db  28h ; (
.eh_frame:00000000000184F9                 db  41h ; A
.eh_frame:00000000000184FA                 db  0Eh
.eh_frame:00000000000184FB                 db  20h
.eh_frame:00000000000184FC                 db  41h ; A
.eh_frame:00000000000184FD                 db  0Eh
.eh_frame:00000000000184FE                 db  18h
.eh_frame:00000000000184FF                 db  42h ; B
.eh_frame:0000000000018500                 db  0Eh
.eh_frame:0000000000018501                 db  10h
.eh_frame:0000000000018502                 db  42h ; B
.eh_frame:0000000000018503                 db  0Eh
.eh_frame:0000000000018504                 db    8
.eh_frame:0000000000018505                 db  42h ; B
.eh_frame:0000000000018506                 db  0Bh
.eh_frame:0000000000018507                 db    0
.eh_frame:0000000000018508                 db  18h
.eh_frame:0000000000018509                 db    0
.eh_frame:000000000001850A                 db    0
.eh_frame:000000000001850B                 db    0
.eh_frame:000000000001850C                 db  6Ch ; l
.eh_frame:000000000001850D                 db    7
.eh_frame:000000000001850E                 db    0
.eh_frame:000000000001850F                 db    0
.eh_frame:0000000000018510                 db  50h ; P
.eh_frame:0000000000018511                 db  18h
.eh_frame:0000000000018512                 db 0FFh
.eh_frame:0000000000018513                 db 0FFh
.eh_frame:0000000000018514                 db  3Bh ; ;
.eh_frame:0000000000018515                 db    0
.eh_frame:0000000000018516                 db    0
.eh_frame:0000000000018517                 db    0
.eh_frame:0000000000018518                 db    0
.eh_frame:0000000000018519                 db  59h ; Y
.eh_frame:000000000001851A                 db  0Eh
.eh_frame:000000000001851B                 db  10h
.eh_frame:000000000001851C                 db  5Ch ; \
.eh_frame:000000000001851D                 db  0Ah
.eh_frame:000000000001851E                 db  0Eh
.eh_frame:000000000001851F                 db    8
.eh_frame:0000000000018520                 db  41h ; A
.eh_frame:0000000000018521                 db  0Bh
.eh_frame:0000000000018522                 db    0
.eh_frame:0000000000018523                 db    0
.eh_frame:0000000000018524                 db  10h
.eh_frame:0000000000018525                 db    0
.eh_frame:0000000000018526                 db    0
.eh_frame:0000000000018527                 db    0
.eh_frame:0000000000018528                 db  88h
.eh_frame:0000000000018529                 db    7
.eh_frame:000000000001852A                 db    0
.eh_frame:000000000001852B                 db    0
.eh_frame:000000000001852C                 db  74h ; t
.eh_frame:000000000001852D                 db  18h
.eh_frame:000000000001852E                 db 0FFh
.eh_frame:000000000001852F                 db 0FFh
.eh_frame:0000000000018530                 db  0Ch
.eh_frame:0000000000018531                 db    0
.eh_frame:0000000000018532                 db    0
.eh_frame:0000000000018533                 db    0
.eh_frame:0000000000018534                 db    0
.eh_frame:0000000000018535                 db    0
.eh_frame:0000000000018536                 db    0
.eh_frame:0000000000018537                 db    0
.eh_frame:0000000000018538                 db  10h
.eh_frame:0000000000018539                 db    0
.eh_frame:000000000001853A                 db    0
.eh_frame:000000000001853B                 db    0
.eh_frame:000000000001853C                 db  9Ch
.eh_frame:000000000001853D                 db    7
.eh_frame:000000000001853E                 db    0
.eh_frame:000000000001853F                 db    0
.eh_frame:0000000000018540                 db  70h ; p
.eh_frame:0000000000018541                 db  18h
.eh_frame:0000000000018542                 db 0FFh
.eh_frame:0000000000018543                 db 0FFh
.eh_frame:0000000000018544                 db  2Ah ; *
.eh_frame:0000000000018545                 db    0
.eh_frame:0000000000018546                 db    0
.eh_frame:0000000000018547                 db    0
.eh_frame:0000000000018548                 db    0
.eh_frame:0000000000018549                 db    0
.eh_frame:000000000001854A                 db    0
.eh_frame:000000000001854B                 db    0
.eh_frame:000000000001854C                 db  50h ; P
.eh_frame:000000000001854D                 db    0
.eh_frame:000000000001854E                 db    0
.eh_frame:000000000001854F                 db    0
.eh_frame:0000000000018550                 db 0B0h
.eh_frame:0000000000018551                 db    7
.eh_frame:0000000000018552                 db    0
.eh_frame:0000000000018553                 db    0
.eh_frame:0000000000018554                 db  8Ch
.eh_frame:0000000000018555                 db  18h
.eh_frame:0000000000018556                 db 0FFh
.eh_frame:0000000000018557                 db 0FFh
.eh_frame:0000000000018558                 db  0Dh
.eh_frame:0000000000018559                 db    3
.eh_frame:000000000001855A                 db    0
.eh_frame:000000000001855B                 db    0
.eh_frame:000000000001855C                 db    0
.eh_frame:000000000001855D                 db  42h ; B
.eh_frame:000000000001855E                 db  0Eh
.eh_frame:000000000001855F                 db  10h
.eh_frame:0000000000018560                 db  8Fh
.eh_frame:0000000000018561                 db    2
.eh_frame:0000000000018562                 db  42h ; B
.eh_frame:0000000000018563                 db  0Eh
.eh_frame:0000000000018564                 db  18h
.eh_frame:0000000000018565                 db  8Eh
.eh_frame:0000000000018566                 db    3
.eh_frame:0000000000018567                 db  45h ; E
.eh_frame:0000000000018568                 db  0Eh
.eh_frame:0000000000018569                 db  20h
.eh_frame:000000000001856A                 db  8Dh
.eh_frame:000000000001856B                 db    4
.eh_frame:000000000001856C                 db  42h ; B
.eh_frame:000000000001856D                 db  0Eh
.eh_frame:000000000001856E                 db  28h ; (
.eh_frame:000000000001856F                 db  8Ch
.eh_frame:0000000000018570                 db    5
.eh_frame:0000000000018571                 db  44h ; D
.eh_frame:0000000000018572                 db  0Eh
.eh_frame:0000000000018573                 db  30h ; 0
.eh_frame:0000000000018574                 db  86h
.eh_frame:0000000000018575                 db    6
.eh_frame:0000000000018576                 db  41h ; A
.eh_frame:0000000000018577                 db  0Eh
.eh_frame:0000000000018578                 db  38h ; 8
.eh_frame:0000000000018579                 db  83h
.eh_frame:000000000001857A                 db    7
.eh_frame:000000000001857B                 db  51h ; Q
.eh_frame:000000000001857C                 db  0Eh
.eh_frame:000000000001857D                 db 0D0h
.eh_frame:000000000001857E                 db  20h
.eh_frame:000000000001857F                 db    3
.eh_frame:0000000000018580                 db  5Dh ; ]
.eh_frame:0000000000018581                 db    1
.eh_frame:0000000000018582                 db  0Ah
.eh_frame:0000000000018583                 db  0Eh
.eh_frame:0000000000018584                 db  38h ; 8
.eh_frame:0000000000018585                 db  41h ; A
.eh_frame:0000000000018586                 db  0Eh
.eh_frame:0000000000018587                 db  30h ; 0
.eh_frame:0000000000018588                 db  41h ; A
.eh_frame:0000000000018589                 db  0Eh
.eh_frame:000000000001858A                 db  28h ; (
.eh_frame:000000000001858B                 db  42h ; B
.eh_frame:000000000001858C                 db  0Eh
.eh_frame:000000000001858D                 db  20h
.eh_frame:000000000001858E                 db  42h ; B
.eh_frame:000000000001858F                 db  0Eh
.eh_frame:0000000000018590                 db  18h
.eh_frame:0000000000018591                 db  42h ; B
.eh_frame:0000000000018592                 db  0Eh
.eh_frame:0000000000018593                 db  10h
.eh_frame:0000000000018594                 db  42h ; B
.eh_frame:0000000000018595                 db  0Eh
.eh_frame:0000000000018596                 db    8
.eh_frame:0000000000018597                 db  48h ; H
.eh_frame:0000000000018598                 db  0Bh
.eh_frame:0000000000018599                 db    0
.eh_frame:000000000001859A                 db    0
.eh_frame:000000000001859B                 db    0
.eh_frame:000000000001859C                 db    0
.eh_frame:000000000001859D                 db    0
.eh_frame:000000000001859E                 db    0
.eh_frame:000000000001859F                 db    0
.eh_frame:00000000000185A0                 db  10h
.eh_frame:00000000000185A1                 db    0
.eh_frame:00000000000185A2                 db    0
.eh_frame:00000000000185A3                 db    0
.eh_frame:00000000000185A4                 db    4
.eh_frame:00000000000185A5                 db    8
.eh_frame:00000000000185A6                 db    0
.eh_frame:00000000000185A7                 db    0
.eh_frame:00000000000185A8                 db  48h ; H
.eh_frame:00000000000185A9                 db  1Bh
.eh_frame:00000000000185AA                 db 0FFh
.eh_frame:00000000000185AB                 db 0FFh
.eh_frame:00000000000185AC                 db  18h
.eh_frame:00000000000185AD                 db    0
.eh_frame:00000000000185AE                 db    0
.eh_frame:00000000000185AF                 db    0
.eh_frame:00000000000185B0                 db    0
.eh_frame:00000000000185B1                 db    0
.eh_frame:00000000000185B2                 db    0
.eh_frame:00000000000185B3                 db    0
.eh_frame:00000000000185B4                 db  28h ; (
.eh_frame:00000000000185B5                 db    0
.eh_frame:00000000000185B6                 db    0
.eh_frame:00000000000185B7                 db    0
.eh_frame:00000000000185B8                 db  18h
.eh_frame:00000000000185B9                 db    8
.eh_frame:00000000000185BA                 db    0
.eh_frame:00000000000185BB                 db    0
.eh_frame:00000000000185BC                 db  54h ; T
.eh_frame:00000000000185BD                 db  1Bh
.eh_frame:00000000000185BE                 db 0FFh
.eh_frame:00000000000185BF                 db 0FFh
.eh_frame:00000000000185C0                 db  58h ; X
.eh_frame:00000000000185C1                 db    0
.eh_frame:00000000000185C2                 db    0
.eh_frame:00000000000185C3                 db    0
.eh_frame:00000000000185C4                 db    0
.eh_frame:00000000000185C5                 db  42h ; B
.eh_frame:00000000000185C6                 db  0Eh
.eh_frame:00000000000185C7                 db  10h
.eh_frame:00000000000185C8                 db  8Ch
.eh_frame:00000000000185C9                 db    2
.eh_frame:00000000000185CA                 db  41h ; A
.eh_frame:00000000000185CB                 db  0Eh
.eh_frame:00000000000185CC                 db  18h
.eh_frame:00000000000185CD                 db  86h
.eh_frame:00000000000185CE                 db    3
.eh_frame:00000000000185CF                 db  44h ; D
.eh_frame:00000000000185D0                 db  0Eh
.eh_frame:00000000000185D1                 db  20h
.eh_frame:00000000000185D2                 db  83h
.eh_frame:00000000000185D3                 db    4
.eh_frame:00000000000185D4                 db    2
.eh_frame:00000000000185D5                 db  4Dh ; M
.eh_frame:00000000000185D6                 db  0Eh
.eh_frame:00000000000185D7                 db  18h
.eh_frame:00000000000185D8                 db  41h ; A
.eh_frame:00000000000185D9                 db  0Eh
.eh_frame:00000000000185DA                 db  10h
.eh_frame:00000000000185DB                 db  42h ; B
.eh_frame:00000000000185DC                 db  0Eh
.eh_frame:00000000000185DD                 db    8
.eh_frame:00000000000185DE                 db    0
.eh_frame:00000000000185DF                 db    0
.eh_frame:00000000000185E0                 db  10h
.eh_frame:00000000000185E1                 db    0
.eh_frame:00000000000185E2                 db    0
.eh_frame:00000000000185E3                 db    0
.eh_frame:00000000000185E4                 db  44h ; D
.eh_frame:00000000000185E5                 db    8
.eh_frame:00000000000185E6                 db    0
.eh_frame:00000000000185E7                 db    0
.eh_frame:00000000000185E8                 db  88h
.eh_frame:00000000000185E9                 db  1Bh
.eh_frame:00000000000185EA                 db 0FFh
.eh_frame:00000000000185EB                 db 0FFh
.eh_frame:00000000000185EC                 db  11h
.eh_frame:00000000000185ED                 db    0
.eh_frame:00000000000185EE                 db    0
.eh_frame:00000000000185EF                 db    0
.eh_frame:00000000000185F0                 db    0
.eh_frame:00000000000185F1                 db    0
.eh_frame:00000000000185F2                 db    0
.eh_frame:00000000000185F3                 db    0
.eh_frame:00000000000185F4                 db  48h ; H
.eh_frame:00000000000185F5                 db    0
.eh_frame:00000000000185F6                 db    0
.eh_frame:00000000000185F7                 db    0
.eh_frame:00000000000185F8                 db  58h ; X
.eh_frame:00000000000185F9                 db    8
.eh_frame:00000000000185FA                 db    0
.eh_frame:00000000000185FB                 db    0
.eh_frame:00000000000185FC                 db  94h
.eh_frame:00000000000185FD                 db  1Bh
.eh_frame:00000000000185FE                 db 0FFh
.eh_frame:00000000000185FF                 db 0FFh
.eh_frame:0000000000018600                 db  61h ; a
.eh_frame:0000000000018601                 db    1
.eh_frame:0000000000018602                 db    0
.eh_frame:0000000000018603                 db    0
.eh_frame:0000000000018604                 db    0
.eh_frame:0000000000018605                 db  42h ; B
.eh_frame:0000000000018606                 db  0Eh
.eh_frame:0000000000018607                 db  10h
.eh_frame:0000000000018608                 db  8Fh
.eh_frame:0000000000018609                 db    2
.eh_frame:000000000001860A                 db  42h ; B
.eh_frame:000000000001860B                 db  0Eh
.eh_frame:000000000001860C                 db  18h
.eh_frame:000000000001860D                 db  8Eh
.eh_frame:000000000001860E                 db    3
.eh_frame:000000000001860F                 db  45h ; E
.eh_frame:0000000000018610                 db  0Eh
.eh_frame:0000000000018611                 db  20h
.eh_frame:0000000000018612                 db  8Dh
.eh_frame:0000000000018613                 db    4
.eh_frame:0000000000018614                 db  42h ; B
.eh_frame:0000000000018615                 db  0Eh
.eh_frame:0000000000018616                 db  28h ; (
.eh_frame:0000000000018617                 db  8Ch
.eh_frame:0000000000018618                 db    5
.eh_frame:0000000000018619                 db  44h ; D
.eh_frame:000000000001861A                 db  0Eh
.eh_frame:000000000001861B                 db  30h ; 0
.eh_frame:000000000001861C                 db  86h
.eh_frame:000000000001861D                 db    6
.eh_frame:000000000001861E                 db  41h ; A
.eh_frame:000000000001861F                 db  0Eh
.eh_frame:0000000000018620                 db  38h ; 8
.eh_frame:0000000000018621                 db  83h
.eh_frame:0000000000018622                 db    7
.eh_frame:0000000000018623                 db  4Fh ; O
.eh_frame:0000000000018624                 db  0Eh
.eh_frame:0000000000018625                 db  80h
.eh_frame:0000000000018626                 db    3
.eh_frame:0000000000018627                 db    2
.eh_frame:0000000000018628                 db 0C1h
.eh_frame:0000000000018629                 db  0Ah
.eh_frame:000000000001862A                 db  0Eh
.eh_frame:000000000001862B                 db  38h ; 8
.eh_frame:000000000001862C                 db  41h ; A
.eh_frame:000000000001862D                 db  0Eh
.eh_frame:000000000001862E                 db  30h ; 0
.eh_frame:000000000001862F                 db  41h ; A
.eh_frame:0000000000018630                 db  0Eh
.eh_frame:0000000000018631                 db  28h ; (
.eh_frame:0000000000018632                 db  42h ; B
.eh_frame:0000000000018633                 db  0Eh
.eh_frame:0000000000018634                 db  20h
.eh_frame:0000000000018635                 db  42h ; B
.eh_frame:0000000000018636                 db  0Eh
.eh_frame:0000000000018637                 db  18h
.eh_frame:0000000000018638                 db  42h ; B
.eh_frame:0000000000018639                 db  0Eh
.eh_frame:000000000001863A                 db  10h
.eh_frame:000000000001863B                 db  42h ; B
.eh_frame:000000000001863C                 db  0Eh
.eh_frame:000000000001863D                 db    8
.eh_frame:000000000001863E                 db  46h ; F
.eh_frame:000000000001863F                 db  0Bh
.eh_frame:0000000000018640                 db  44h ; D
.eh_frame:0000000000018641                 db    0
.eh_frame:0000000000018642                 db    0
.eh_frame:0000000000018643                 db    0
.eh_frame:0000000000018644                 db 0A4h
.eh_frame:0000000000018645                 db    8
.eh_frame:0000000000018646                 db    0
.eh_frame:0000000000018647                 db    0
.eh_frame:0000000000018648                 db 0B8h
.eh_frame:0000000000018649                 db  1Ch
.eh_frame:000000000001864A                 db 0FFh
.eh_frame:000000000001864B                 db 0FFh
.eh_frame:000000000001864C                 db  52h ; R
.eh_frame:000000000001864D                 db    1
.eh_frame:000000000001864E                 db    0
.eh_frame:000000000001864F                 db    0
.eh_frame:0000000000018650                 db    0
.eh_frame:0000000000018651                 db  42h ; B
.eh_frame:0000000000018652                 db  0Eh
.eh_frame:0000000000018653                 db  10h
.eh_frame:0000000000018654                 db  8Eh
.eh_frame:0000000000018655                 db    2
.eh_frame:0000000000018656                 db  42h ; B
.eh_frame:0000000000018657                 db  0Eh
.eh_frame:0000000000018658                 db  18h
.eh_frame:0000000000018659                 db  8Dh
.eh_frame:000000000001865A                 db    3
.eh_frame:000000000001865B                 db  42h ; B
.eh_frame:000000000001865C                 db  0Eh
.eh_frame:000000000001865D                 db  20h
.eh_frame:000000000001865E                 db  8Ch
.eh_frame:000000000001865F                 db    4
.eh_frame:0000000000018660                 db  41h ; A
.eh_frame:0000000000018661                 db  0Eh
.eh_frame:0000000000018662                 db  28h ; (
.eh_frame:0000000000018663                 db  86h
.eh_frame:0000000000018664                 db    5
.eh_frame:0000000000018665                 db  44h ; D
.eh_frame:0000000000018666                 db  0Eh
.eh_frame:0000000000018667                 db  30h ; 0
.eh_frame:0000000000018668                 db  83h
.eh_frame:0000000000018669                 db    6
.eh_frame:000000000001866A                 db  4Ch ; L
.eh_frame:000000000001866B                 db  0Eh
.eh_frame:000000000001866C                 db 0E0h
.eh_frame:000000000001866D                 db    2
.eh_frame:000000000001866E                 db    2
.eh_frame:000000000001866F                 db 0B2h
.eh_frame:0000000000018670                 db  0Ah
.eh_frame:0000000000018671                 db  0Eh
.eh_frame:0000000000018672                 db  30h ; 0
.eh_frame:0000000000018673                 db  41h ; A
.eh_frame:0000000000018674                 db  0Eh
.eh_frame:0000000000018675                 db  28h ; (
.eh_frame:0000000000018676                 db  41h ; A
.eh_frame:0000000000018677                 db  0Eh
.eh_frame:0000000000018678                 db  20h
.eh_frame:0000000000018679                 db  42h ; B
.eh_frame:000000000001867A                 db  0Eh
.eh_frame:000000000001867B                 db  18h
.eh_frame:000000000001867C                 db  42h ; B
.eh_frame:000000000001867D                 db  0Eh
.eh_frame:000000000001867E                 db  10h
.eh_frame:000000000001867F                 db  42h ; B
.eh_frame:0000000000018680                 db  0Eh
.eh_frame:0000000000018681                 db    8
.eh_frame:0000000000018682                 db  47h ; G
.eh_frame:0000000000018683                 db  0Bh
.eh_frame:0000000000018684                 db    0
.eh_frame:0000000000018685                 db    0
.eh_frame:0000000000018686                 db    0
.eh_frame:0000000000018687                 db    0
.eh_frame:0000000000018688                 db  34h ; 4
.eh_frame:0000000000018689                 db    0
.eh_frame:000000000001868A                 db    0
.eh_frame:000000000001868B                 db    0
.eh_frame:000000000001868C                 db 0ECh
.eh_frame:000000000001868D                 db    8
.eh_frame:000000000001868E                 db    0
.eh_frame:000000000001868F                 db    0
.eh_frame:0000000000018690                 db 0D0h
.eh_frame:0000000000018691                 db  1Dh
.eh_frame:0000000000018692                 db 0FFh
.eh_frame:0000000000018693                 db 0FFh
.eh_frame:0000000000018694                 db  8Ch
.eh_frame:0000000000018695                 db    0
.eh_frame:0000000000018696                 db    0
.eh_frame:0000000000018697                 db    0
.eh_frame:0000000000018698                 db    0
.eh_frame:0000000000018699                 db  42h ; B
.eh_frame:000000000001869A                 db  0Eh
.eh_frame:000000000001869B                 db  10h
.eh_frame:000000000001869C                 db  8Ch
.eh_frame:000000000001869D                 db    2
.eh_frame:000000000001869E                 db  41h ; A
.eh_frame:000000000001869F                 db  0Eh
.eh_frame:00000000000186A0 unk_186A0       db  18h                 ; DATA XREF: fts_build:loc_12568↑o
.eh_frame:00000000000186A1                 db  86h
.eh_frame:00000000000186A2                 db    3
.eh_frame:00000000000186A3                 db  44h ; D
.eh_frame:00000000000186A4                 db  0Eh
.eh_frame:00000000000186A5                 db  20h
.eh_frame:00000000000186A6                 db  83h
.eh_frame:00000000000186A7                 db    4
.eh_frame:00000000000186A8                 db    2
.eh_frame:00000000000186A9                 db  4Eh ; N
.eh_frame:00000000000186AA                 db  0Ah
.eh_frame:00000000000186AB                 db  0Eh
.eh_frame:00000000000186AC                 db  18h
.eh_frame:00000000000186AD                 db  41h ; A
.eh_frame:00000000000186AE                 db  0Eh
.eh_frame:00000000000186AF                 db  10h
.eh_frame:00000000000186B0                 db  42h ; B
.eh_frame:00000000000186B1                 db  0Eh
.eh_frame:00000000000186B2                 db    8
.eh_frame:00000000000186B3                 db  48h ; H
.eh_frame:00000000000186B4                 db  0Bh
.eh_frame:00000000000186B5                 db  68h ; h
.eh_frame:00000000000186B6                 db  0Eh
.eh_frame:00000000000186B7                 db  18h
.eh_frame:00000000000186B8                 db  41h ; A
.eh_frame:00000000000186B9                 db  0Eh
.eh_frame:00000000000186BA                 db  10h
.eh_frame:00000000000186BB                 db  42h ; B
.eh_frame:00000000000186BC                 db  0Eh
.eh_frame:00000000000186BD                 db    8
.eh_frame:00000000000186BE                 db    0
.eh_frame:00000000000186BF                 db    0
.eh_frame:00000000000186C0                 db  2Ch ; ,
.eh_frame:00000000000186C1                 db    0
.eh_frame:00000000000186C2                 db    0
.eh_frame:00000000000186C3                 db    0
.eh_frame:00000000000186C4                 db  24h ; $
.eh_frame:00000000000186C5                 db    9
.eh_frame:00000000000186C6                 db    0
.eh_frame:00000000000186C7                 db    0
.eh_frame:00000000000186C8                 db  28h ; (
.eh_frame:00000000000186C9                 db  1Eh
.eh_frame:00000000000186CA                 db 0FFh
.eh_frame:00000000000186CB                 db 0FFh
.eh_frame:00000000000186CC                 db  50h ; P
.eh_frame:00000000000186CD                 db    0
.eh_frame:00000000000186CE                 db    0
.eh_frame:00000000000186CF                 db    0
.eh_frame:00000000000186D0                 db    0
.eh_frame:00000000000186D1                 db  42h ; B
.eh_frame:00000000000186D2                 db  0Eh
.eh_frame:00000000000186D3                 db  10h
.eh_frame:00000000000186D4                 db  8Ch
.eh_frame:00000000000186D5                 db    2
.eh_frame:00000000000186D6                 db  41h ; A
.eh_frame:00000000000186D7                 db  0Eh
.eh_frame:00000000000186D8                 db  18h
.eh_frame:00000000000186D9                 db  86h
.eh_frame:00000000000186DA                 db    3
.eh_frame:00000000000186DB                 db  44h ; D
.eh_frame:00000000000186DC                 db  0Eh
.eh_frame:00000000000186DD                 db  20h
.eh_frame:00000000000186DE                 db  83h
.eh_frame:00000000000186DF                 db    4
.eh_frame:00000000000186E0                 db    2
.eh_frame:00000000000186E1                 db  45h ; E
.eh_frame:00000000000186E2                 db  0Eh
.eh_frame:00000000000186E3                 db  18h
.eh_frame:00000000000186E4                 db  41h ; A
.eh_frame:00000000000186E5                 db  0Eh
.eh_frame:00000000000186E6                 db  10h
.eh_frame:00000000000186E7                 db  42h ; B
.eh_frame:00000000000186E8                 db  0Eh
.eh_frame:00000000000186E9                 db    8
.eh_frame:00000000000186EA                 db    0
.eh_frame:00000000000186EB                 db    0
.eh_frame:00000000000186EC                 db    0
.eh_frame:00000000000186ED                 db    0
.eh_frame:00000000000186EE                 db    0
.eh_frame:00000000000186EF                 db    0
.eh_frame:00000000000186F0                 db  4Ch ; L
.eh_frame:00000000000186F1                 db    0
.eh_frame:00000000000186F2                 db    0
.eh_frame:00000000000186F3                 db    0
.eh_frame:00000000000186F4                 db  54h ; T
.eh_frame:00000000000186F5                 db    9
.eh_frame:00000000000186F6                 db    0
.eh_frame:00000000000186F7                 db    0
.eh_frame:00000000000186F8                 db  48h ; H
.eh_frame:00000000000186F9                 db  1Eh
.eh_frame:00000000000186FA                 db 0FFh
.eh_frame:00000000000186FB                 db 0FFh
.eh_frame:00000000000186FC                 db 0EFh
.eh_frame:00000000000186FD                 db    0
.eh_frame:00000000000186FE                 db    0
.eh_frame:00000000000186FF                 db    0
.eh_frame:0000000000018700                 db    0
.eh_frame:0000000000018701                 db  42h ; B
.eh_frame:0000000000018702                 db  0Eh
.eh_frame:0000000000018703                 db  10h
.eh_frame:0000000000018704                 db  8Fh
.eh_frame:0000000000018705                 db    2
.eh_frame:0000000000018706                 db  42h ; B
.eh_frame:0000000000018707                 db  0Eh
.eh_frame:0000000000018708                 db  18h
.eh_frame:0000000000018709                 db  8Eh
.eh_frame:000000000001870A                 db    3
.eh_frame:000000000001870B                 db  47h ; G
.eh_frame:000000000001870C                 db  0Eh
.eh_frame:000000000001870D                 db  20h
.eh_frame:000000000001870E                 db  8Dh
.eh_frame:000000000001870F                 db    4
.eh_frame:0000000000018710                 db  42h ; B
.eh_frame:0000000000018711                 db  0Eh
.eh_frame:0000000000018712                 db  28h ; (
.eh_frame:0000000000018713                 db  8Ch
.eh_frame:0000000000018714                 db    5
.eh_frame:0000000000018715                 db  44h ; D
.eh_frame:0000000000018716                 db  0Eh
.eh_frame:0000000000018717                 db  30h ; 0
.eh_frame:0000000000018718                 db  86h
.eh_frame:0000000000018719                 db    6
.eh_frame:000000000001871A                 db  41h ; A
.eh_frame:000000000001871B                 db  0Eh
.eh_frame:000000000001871C                 db  38h ; 8
.eh_frame:000000000001871D                 db  83h
.eh_frame:000000000001871E                 db    7
.eh_frame:000000000001871F                 db  5Ch ; \
.eh_frame:0000000000018720                 db  0Eh
.eh_frame:0000000000018721                 db  40h ; @
.eh_frame:0000000000018722                 db    2
.eh_frame:0000000000018723                 db  61h ; a
.eh_frame:0000000000018724                 db  0Ah
.eh_frame:0000000000018725                 db  0Eh
.eh_frame:0000000000018726                 db  38h ; 8
.eh_frame:0000000000018727                 db  44h ; D
.eh_frame:0000000000018728                 db  0Eh
.eh_frame:0000000000018729                 db  30h ; 0
.eh_frame:000000000001872A                 db  41h ; A
.eh_frame:000000000001872B                 db  0Eh
.eh_frame:000000000001872C                 db  28h ; (
.eh_frame:000000000001872D                 db  42h ; B
.eh_frame:000000000001872E                 db  0Eh
.eh_frame:000000000001872F                 db  20h
.eh_frame:0000000000018730                 db  42h ; B
.eh_frame:0000000000018731                 db  0Eh
.eh_frame:0000000000018732                 db  18h
.eh_frame:0000000000018733                 db  42h ; B
.eh_frame:0000000000018734                 db  0Eh
.eh_frame:0000000000018735                 db  10h
.eh_frame:0000000000018736                 db  42h ; B
.eh_frame:0000000000018737                 db  0Eh
.eh_frame:0000000000018738                 db    8
.eh_frame:0000000000018739                 db  44h ; D
.eh_frame:000000000001873A                 db  0Bh
.eh_frame:000000000001873B                 db    0
.eh_frame:000000000001873C                 db    0
.eh_frame:000000000001873D                 db    0
.eh_frame:000000000001873E                 db    0
.eh_frame:000000000001873F                 db    0
.eh_frame:0000000000018740                 db  18h
.eh_frame:0000000000018741                 db    0
.eh_frame:0000000000018742                 db    0
.eh_frame:0000000000018743                 db    0
.eh_frame:0000000000018744                 db 0A4h
.eh_frame:0000000000018745                 db    9
.eh_frame:0000000000018746                 db    0
.eh_frame:0000000000018747                 db    0
.eh_frame:0000000000018748                 db 0E8h
.eh_frame:0000000000018749                 db  1Eh
.eh_frame:000000000001874A                 db 0FFh
.eh_frame:000000000001874B                 db 0FFh
.eh_frame:000000000001874C                 db  46h ; F
.eh_frame:000000000001874D                 db    0
.eh_frame:000000000001874E                 db    0
.eh_frame:000000000001874F                 db    0
.eh_frame:0000000000018750                 db    0
.eh_frame:0000000000018751                 db  44h ; D
.eh_frame:0000000000018752                 db  0Eh
.eh_frame:0000000000018753                 db  10h
.eh_frame:0000000000018754                 db  83h
.eh_frame:0000000000018755                 db    2
.eh_frame:0000000000018756                 db  59h ; Y
.eh_frame:0000000000018757                 db  0Ah
.eh_frame:0000000000018758                 db  0Eh
.eh_frame:0000000000018759                 db    8
.eh_frame:000000000001875A                 db  43h ; C
.eh_frame:000000000001875B                 db  0Bh
.eh_frame:000000000001875C                 db  50h ; P
.eh_frame:000000000001875D                 db    0
.eh_frame:000000000001875E                 db    0
.eh_frame:000000000001875F                 db    0
.eh_frame:0000000000018760                 db 0C0h
.eh_frame:0000000000018761                 db    9
.eh_frame:0000000000018762                 db    0
.eh_frame:0000000000018763                 db    0
.eh_frame:0000000000018764                 db  1Ch
.eh_frame:0000000000018765                 db  1Fh
.eh_frame:0000000000018766                 db 0FFh
.eh_frame:0000000000018767                 db 0FFh
.eh_frame:0000000000018768                 db  12h
.eh_frame:0000000000018769                 db    6
.eh_frame:000000000001876A                 db    0
.eh_frame:000000000001876B                 db    0
.eh_frame:000000000001876C                 db    0
.eh_frame:000000000001876D                 db  42h ; B
.eh_frame:000000000001876E                 db  0Eh
.eh_frame:000000000001876F                 db  10h
.eh_frame:0000000000018770                 db  8Fh
.eh_frame:0000000000018771                 db    2
.eh_frame:0000000000018772                 db  42h ; B
.eh_frame:0000000000018773                 db  0Eh
.eh_frame:0000000000018774                 db  18h
.eh_frame:0000000000018775                 db  8Eh
.eh_frame:0000000000018776                 db    3
.eh_frame:0000000000018777                 db  42h ; B
.eh_frame:0000000000018778                 db  0Eh
.eh_frame:0000000000018779                 db  20h
.eh_frame:000000000001877A                 db  8Dh
.eh_frame:000000000001877B                 db    4
.eh_frame:000000000001877C                 db  42h ; B
.eh_frame:000000000001877D                 db  0Eh
.eh_frame:000000000001877E                 db  28h ; (
.eh_frame:000000000001877F                 db  8Ch
.eh_frame:0000000000018780                 db    5
.eh_frame:0000000000018781                 db  41h ; A
.eh_frame:0000000000018782                 db  0Eh
.eh_frame:0000000000018783                 db  30h ; 0
.eh_frame:0000000000018784                 db  86h
.eh_frame:0000000000018785                 db    6
.eh_frame:0000000000018786                 db  41h ; A
.eh_frame:0000000000018787                 db  0Eh
.eh_frame:0000000000018788                 db  38h ; 8
.eh_frame:0000000000018789                 db  83h
.eh_frame:000000000001878A                 db    7
.eh_frame:000000000001878B                 db  4Ah ; J
.eh_frame:000000000001878C                 db  0Eh
.eh_frame:000000000001878D                 db 0C0h
.eh_frame:000000000001878E                 db    1
.eh_frame:000000000001878F                 db    3
.eh_frame:0000000000018790                 db  9Ah
.eh_frame:0000000000018791                 db    3
.eh_frame:0000000000018792                 db  0Ah
.eh_frame:0000000000018793                 db  0Eh
.eh_frame:0000000000018794                 db  38h ; 8
.eh_frame:0000000000018795                 db  41h ; A
.eh_frame:0000000000018796                 db  0Eh
.eh_frame:0000000000018797                 db  30h ; 0
.eh_frame:0000000000018798                 db  41h ; A
.eh_frame:0000000000018799                 db  0Eh
.eh_frame:000000000001879A                 db  28h ; (
.eh_frame:000000000001879B                 db  42h ; B
.eh_frame:000000000001879C                 db  0Eh
.eh_frame:000000000001879D                 db  20h
.eh_frame:000000000001879E                 db  42h ; B
.eh_frame:000000000001879F                 db  0Eh
.eh_frame:00000000000187A0                 db  18h
.eh_frame:00000000000187A1                 db  42h ; B
.eh_frame:00000000000187A2                 db  0Eh
.eh_frame:00000000000187A3                 db  10h
.eh_frame:00000000000187A4                 db  42h ; B
.eh_frame:00000000000187A5                 db  0Eh
.eh_frame:00000000000187A6                 db    8
.eh_frame:00000000000187A7                 db  48h ; H
.eh_frame:00000000000187A8                 db  0Bh
.eh_frame:00000000000187A9                 db    0
.eh_frame:00000000000187AA                 db    0
.eh_frame:00000000000187AB                 db    0
.eh_frame:00000000000187AC                 db    0
.eh_frame:00000000000187AD                 db    0
.eh_frame:00000000000187AE                 db    0
.eh_frame:00000000000187AF                 db    0
.eh_frame:00000000000187B0                 db  14h
.eh_frame:00000000000187B1                 db    0
.eh_frame:00000000000187B2                 db    0
.eh_frame:00000000000187B3                 db    0
.eh_frame:00000000000187B4                 db  14h
.eh_frame:00000000000187B5                 db  0Ah
.eh_frame:00000000000187B6                 db    0
.eh_frame:00000000000187B7                 db    0
.eh_frame:00000000000187B8                 db 0E8h
.eh_frame:00000000000187B9                 db  24h ; $
.eh_frame:00000000000187BA                 db 0FFh
.eh_frame:00000000000187BB                 db 0FFh
.eh_frame:00000000000187BC                 db  0Ah
.eh_frame:00000000000187BD                 db    0
.eh_frame:00000000000187BE                 db    0
.eh_frame:00000000000187BF                 db    0
.eh_frame:00000000000187C0                 db    0
.eh_frame:00000000000187C1                 db    0
.eh_frame:00000000000187C2                 db    0
.eh_frame:00000000000187C3                 db    0
.eh_frame:00000000000187C4                 db    0
.eh_frame:00000000000187C5                 db    0
.eh_frame:00000000000187C6                 db    0
.eh_frame:00000000000187C7                 db    0
.eh_frame:00000000000187C8                 db  14h
.eh_frame:00000000000187C9                 db    0
.eh_frame:00000000000187CA                 db    0
.eh_frame:00000000000187CB                 db    0
.eh_frame:00000000000187CC                 db  2Ch ; ,
.eh_frame:00000000000187CD                 db  0Ah
.eh_frame:00000000000187CE                 db    0
.eh_frame:00000000000187CF                 db    0
.eh_frame:00000000000187D0                 db 0E0h
.eh_frame:00000000000187D1                 db  24h ; $
.eh_frame:00000000000187D2                 db 0FFh
.eh_frame:00000000000187D3                 db 0FFh
.eh_frame:00000000000187D4                 db  33h ; 3
.eh_frame:00000000000187D5                 db    0
.eh_frame:00000000000187D6                 db    0
.eh_frame:00000000000187D7                 db    0
.eh_frame:00000000000187D8                 db    0
.eh_frame:00000000000187D9                 db  44h ; D
.eh_frame:00000000000187DA                 db  0Eh
.eh_frame:00000000000187DB                 db  10h
.eh_frame:00000000000187DC                 db  6Eh ; n
.eh_frame:00000000000187DD                 db  0Eh
.eh_frame:00000000000187DE                 db    8
.eh_frame:00000000000187DF                 db    0
.eh_frame:00000000000187E0                 db  18h
.eh_frame:00000000000187E1                 db    0
.eh_frame:00000000000187E2                 db    0
.eh_frame:00000000000187E3                 db    0
.eh_frame:00000000000187E4                 db  44h ; D
.eh_frame:00000000000187E5                 db  0Ah
.eh_frame:00000000000187E6                 db    0
.eh_frame:00000000000187E7                 db    0
.eh_frame:00000000000187E8                 db    8
.eh_frame:00000000000187E9                 db  25h ; %
.eh_frame:00000000000187EA                 db 0FFh
.eh_frame:00000000000187EB                 db 0FFh
.eh_frame:00000000000187EC                 db  1Ah
.eh_frame:00000000000187ED                 db    0
.eh_frame:00000000000187EE                 db    0
.eh_frame:00000000000187EF                 db    0
.eh_frame:00000000000187F0                 db    0
.eh_frame:00000000000187F1                 db  44h ; D
.eh_frame:00000000000187F2                 db  0Eh
.eh_frame:00000000000187F3                 db  10h
.eh_frame:00000000000187F4                 db  50h ; P
.eh_frame:00000000000187F5                 db  0Ah
.eh_frame:00000000000187F6                 db  0Eh
.eh_frame:00000000000187F7                 db    8
.eh_frame:00000000000187F8                 db  41h ; A
.eh_frame:00000000000187F9                 db  0Bh
.eh_frame:00000000000187FA                 db    0
.eh_frame:00000000000187FB                 db    0
.eh_frame:00000000000187FC                 db  10h
.eh_frame:00000000000187FD                 db    0
.eh_frame:00000000000187FE                 db    0
.eh_frame:00000000000187FF                 db    0
.eh_frame:0000000000018800                 db  60h ; `
.eh_frame:0000000000018801                 db  0Ah
.eh_frame:0000000000018802                 db    0
.eh_frame:0000000000018803                 db    0
.eh_frame:0000000000018804                 db  0Ch
.eh_frame:0000000000018805                 db  25h ; %
.eh_frame:0000000000018806                 db 0FFh
.eh_frame:0000000000018807                 db 0FFh
.eh_frame:0000000000018808                 db  16h
.eh_frame:0000000000018809                 db    0
.eh_frame:000000000001880A                 db    0
.eh_frame:000000000001880B                 db    0
.eh_frame:000000000001880C                 db    0
.eh_frame:000000000001880D                 db    0
.eh_frame:000000000001880E                 db    0
.eh_frame:000000000001880F                 db    0
.eh_frame:0000000000018810                 db  1Ch
.eh_frame:0000000000018811                 db    0
.eh_frame:0000000000018812                 db    0
.eh_frame:0000000000018813                 db    0
.eh_frame:0000000000018814                 db  74h ; t
.eh_frame:0000000000018815                 db  0Ah
.eh_frame:0000000000018816                 db    0
.eh_frame:0000000000018817                 db    0
.eh_frame:0000000000018818                 db  18h
.eh_frame:0000000000018819                 db  25h ; %
.eh_frame:000000000001881A                 db 0FFh
.eh_frame:000000000001881B                 db 0FFh
.eh_frame:000000000001881C                 db  4Ah ; J
.eh_frame:000000000001881D                 db    0
.eh_frame:000000000001881E                 db    0
.eh_frame:000000000001881F                 db    0
.eh_frame:0000000000018820                 db    0
.eh_frame:0000000000018821                 db  55h ; U
.eh_frame:0000000000018822                 db  0Eh
.eh_frame:0000000000018823                 db  10h
.eh_frame:0000000000018824                 db  5Dh ; ]
.eh_frame:0000000000018825                 db  0Eh
.eh_frame:0000000000018826                 db    8
.eh_frame:0000000000018827                 db  4Eh ; N
.eh_frame:0000000000018828                 db  0Eh
.eh_frame:0000000000018829                 db  10h
.eh_frame:000000000001882A                 db  49h ; I
.eh_frame:000000000001882B                 db  0Eh
.eh_frame:000000000001882C                 db    8
.eh_frame:000000000001882D                 db    0
.eh_frame:000000000001882E                 db    0
.eh_frame:000000000001882F                 db    0
.eh_frame:0000000000018830                 db  14h
.eh_frame:0000000000018831                 db    0
.eh_frame:0000000000018832                 db    0
.eh_frame:0000000000018833                 db    0
.eh_frame:0000000000018834                 db  94h
.eh_frame:0000000000018835                 db  0Ah
.eh_frame:0000000000018836                 db    0
.eh_frame:0000000000018837                 db    0
.eh_frame:0000000000018838                 db  48h ; H
.eh_frame:0000000000018839                 db  25h ; %
.eh_frame:000000000001883A                 db 0FFh
.eh_frame:000000000001883B                 db 0FFh
.eh_frame:000000000001883C                 db  70h ; p
.eh_frame:000000000001883D                 db    0
.eh_frame:000000000001883E                 db    0
.eh_frame:000000000001883F                 db    0
.eh_frame:0000000000018840                 db    0
.eh_frame:0000000000018841                 db    0
.eh_frame:0000000000018842                 db    0
.eh_frame:0000000000018843                 db    0
.eh_frame:0000000000018844                 db    0
.eh_frame:0000000000018845                 db    0
.eh_frame:0000000000018846                 db    0
.eh_frame:0000000000018847                 db    0
.eh_frame:0000000000018848                 db  10h
.eh_frame:0000000000018849                 db    0
.eh_frame:000000000001884A                 db    0
.eh_frame:000000000001884B                 db    0
.eh_frame:000000000001884C                 db 0ACh
.eh_frame:000000000001884D                 db  0Ah
.eh_frame:000000000001884E                 db    0
.eh_frame:000000000001884F                 db    0
.eh_frame:0000000000018850                 db 0A0h
.eh_frame:0000000000018851                 db  25h ; %
.eh_frame:0000000000018852                 db 0FFh
.eh_frame:0000000000018853                 db 0FFh
.eh_frame:0000000000018854                 db    8
.eh_frame:0000000000018855                 db    0
.eh_frame:0000000000018856                 db    0
.eh_frame:0000000000018857                 db    0
.eh_frame:0000000000018858                 db    0
.eh_frame:0000000000018859                 db    0
.eh_frame:000000000001885A                 db    0
.eh_frame:000000000001885B                 db    0
.eh_frame:000000000001885C                 db  38h ; 8
.eh_frame:000000000001885D                 db    0
.eh_frame:000000000001885E                 db    0
.eh_frame:000000000001885F                 db    0
.eh_frame:0000000000018860                 db 0C0h
.eh_frame:0000000000018861                 db  0Ah
.eh_frame:0000000000018862                 db    0
.eh_frame:0000000000018863                 db    0
.eh_frame:0000000000018864                 db  9Ch
.eh_frame:0000000000018865                 db  25h ; %
.eh_frame:0000000000018866                 db 0FFh
.eh_frame:0000000000018867                 db 0FFh
.eh_frame:0000000000018868                 db    7
.eh_frame:0000000000018869                 db    1
.eh_frame:000000000001886A                 db    0
.eh_frame:000000000001886B                 db    0
.eh_frame:000000000001886C                 db    0
.eh_frame:000000000001886D                 db  42h ; B
.eh_frame:000000000001886E                 db  0Eh
.eh_frame:000000000001886F                 db  10h
.eh_frame:0000000000018870                 db  8Ch
.eh_frame:0000000000018871                 db    2
.eh_frame:0000000000018872                 db  41h ; A
.eh_frame:0000000000018873                 db  0Eh
.eh_frame:0000000000018874                 db  18h
.eh_frame:0000000000018875                 db  86h
.eh_frame:0000000000018876                 db    3
.eh_frame:0000000000018877                 db  41h ; A
.eh_frame:0000000000018878                 db  0Eh
.eh_frame:0000000000018879                 db  20h
.eh_frame:000000000001887A                 db  83h
.eh_frame:000000000001887B                 db    4
.eh_frame:000000000001887C                 db  65h ; e
.eh_frame:000000000001887D                 db  0Ah
.eh_frame:000000000001887E                 db  0Eh
.eh_frame:000000000001887F                 db  18h
.eh_frame:0000000000018880                 db  41h ; A
.eh_frame:0000000000018881                 db  0Eh
.eh_frame:0000000000018882                 db  10h
.eh_frame:0000000000018883                 db  42h ; B
.eh_frame:0000000000018884                 db  0Eh
.eh_frame:0000000000018885                 db    8
.eh_frame:0000000000018886                 db  4Ch ; L
.eh_frame:0000000000018887                 db  0Bh
.eh_frame:0000000000018888                 db    2
.eh_frame:0000000000018889                 db 0ACh
.eh_frame:000000000001888A                 db  0Ah
.eh_frame:000000000001888B                 db  0Eh
.eh_frame:000000000001888C                 db  18h
.eh_frame:000000000001888D                 db  41h ; A
.eh_frame:000000000001888E                 db  0Eh
.eh_frame:000000000001888F                 db  10h
.eh_frame:0000000000018890                 db  42h ; B
.eh_frame:0000000000018891                 db  0Eh
.eh_frame:0000000000018892                 db    8
.eh_frame:0000000000018893                 db  49h ; I
.eh_frame:0000000000018894                 db  0Bh
.eh_frame:0000000000018895                 db    0
.eh_frame:0000000000018896                 db    0
.eh_frame:0000000000018897                 db    0
.eh_frame:0000000000018898                 db  10h
.eh_frame:0000000000018899                 db    0
.eh_frame:000000000001889A                 db    0
.eh_frame:000000000001889B                 db    0
.eh_frame:000000000001889C                 db 0FCh
.eh_frame:000000000001889D                 db  0Ah
.eh_frame:000000000001889E                 db    0
.eh_frame:000000000001889F                 db    0
.eh_frame:00000000000188A0                 db  70h ; p
.eh_frame:00000000000188A1                 db  26h ; &
.eh_frame:00000000000188A2                 db 0FFh
.eh_frame:00000000000188A3                 db 0FFh
.eh_frame:00000000000188A4                 db    8
.eh_frame:00000000000188A5                 db    0
.eh_frame:00000000000188A6                 db    0
.eh_frame:00000000000188A7                 db    0
.eh_frame:00000000000188A8                 db    0
.eh_frame:00000000000188A9                 db    0
.eh_frame:00000000000188AA                 db    0
.eh_frame:00000000000188AB                 db    0
.eh_frame:00000000000188AC                 db  10h
.eh_frame:00000000000188AD                 db    0
.eh_frame:00000000000188AE                 db    0
.eh_frame:00000000000188AF                 db    0
.eh_frame:00000000000188B0                 db  10h
.eh_frame:00000000000188B1                 db  0Bh
.eh_frame:00000000000188B2                 db    0
.eh_frame:00000000000188B3                 db    0
.eh_frame:00000000000188B4                 db  6Ch ; l
.eh_frame:00000000000188B5                 db  26h ; &
.eh_frame:00000000000188B6                 db 0FFh
.eh_frame:00000000000188B7                 db 0FFh
.eh_frame:00000000000188B8                 db    8
.eh_frame:00000000000188B9                 db    0
.eh_frame:00000000000188BA                 db    0
.eh_frame:00000000000188BB                 db    0
.eh_frame:00000000000188BC                 db    0
.eh_frame:00000000000188BD                 db    0
.eh_frame:00000000000188BE                 db    0
.eh_frame:00000000000188BF                 db    0
.eh_frame:00000000000188C0                 db  2Ch ; ,
.eh_frame:00000000000188C1                 db    0
.eh_frame:00000000000188C2                 db    0
.eh_frame:00000000000188C3                 db    0
.eh_frame:00000000000188C4                 db  24h ; $
.eh_frame:00000000000188C5                 db  0Bh
.eh_frame:00000000000188C6                 db    0
.eh_frame:00000000000188C7                 db    0
.eh_frame:00000000000188C8                 db  68h ; h
.eh_frame:00000000000188C9                 db  26h ; &
.eh_frame:00000000000188CA                 db 0FFh
.eh_frame:00000000000188CB                 db 0FFh
.eh_frame:00000000000188CC                 db 0A4h
.eh_frame:00000000000188CD                 db    0
.eh_frame:00000000000188CE                 db    0
.eh_frame:00000000000188CF                 db    0
.eh_frame:00000000000188D0                 db    0
.eh_frame:00000000000188D1                 db  41h ; A
.eh_frame:00000000000188D2                 db  0Eh
.eh_frame:00000000000188D3                 db  10h
.eh_frame:00000000000188D4                 db  86h
.eh_frame:00000000000188D5                 db    2
.eh_frame:00000000000188D6                 db  41h ; A
.eh_frame:00000000000188D7                 db  0Eh
.eh_frame:00000000000188D8                 db  18h
.eh_frame:00000000000188D9                 db  83h
.eh_frame:00000000000188DA                 db    3
.eh_frame:00000000000188DB                 db  44h ; D
.eh_frame:00000000000188DC                 db  0Eh
.eh_frame:00000000000188DD                 db  20h
.eh_frame:00000000000188DE                 db  7Ah ; z
.eh_frame:00000000000188DF                 db  0Ah
.eh_frame:00000000000188E0                 db  0Eh
.eh_frame:00000000000188E1                 db  18h
.eh_frame:00000000000188E2                 db  41h ; A
.eh_frame:00000000000188E3                 db  0Eh
.eh_frame:00000000000188E4                 db  10h
.eh_frame:00000000000188E5                 db  41h ; A
.eh_frame:00000000000188E6                 db  0Eh
.eh_frame:00000000000188E7                 db    8
.eh_frame:00000000000188E8                 db  41h ; A
.eh_frame:00000000000188E9                 db  0Bh
.eh_frame:00000000000188EA                 db    0
.eh_frame:00000000000188EB                 db    0
.eh_frame:00000000000188EC                 db    0
.eh_frame:00000000000188ED                 db    0
.eh_frame:00000000000188EE                 db    0
.eh_frame:00000000000188EF                 db    0
.eh_frame:00000000000188F0                 db  1Ch
.eh_frame:00000000000188F1                 db    0
.eh_frame:00000000000188F2                 db    0
.eh_frame:00000000000188F3                 db    0
.eh_frame:00000000000188F4                 db  54h ; T
.eh_frame:00000000000188F5                 db  0Bh
.eh_frame:00000000000188F6                 db    0
.eh_frame:00000000000188F7                 db    0
.eh_frame:00000000000188F8                 db 0E8h
.eh_frame:00000000000188F9                 db  26h ; &
.eh_frame:00000000000188FA                 db 0FFh
.eh_frame:00000000000188FB                 db 0FFh
.eh_frame:00000000000188FC                 db  18h
.eh_frame:00000000000188FD                 db    0
.eh_frame:00000000000188FE                 db    0
.eh_frame:00000000000188FF                 db    0
.eh_frame:0000000000018900                 db    0
.eh_frame:0000000000018901                 db  44h ; D
.eh_frame:0000000000018902                 db  0Eh
.eh_frame:0000000000018903                 db  10h
.eh_frame:0000000000018904                 db  4Eh ; N
.eh_frame:0000000000018905                 db  0Ah
.eh_frame:0000000000018906                 db  0Eh
.eh_frame:0000000000018907                 db    8
.eh_frame:0000000000018908                 db  41h ; A
.eh_frame:0000000000018909                 db  0Bh
.eh_frame:000000000001890A                 db    0
.eh_frame:000000000001890B                 db    0
.eh_frame:000000000001890C                 db    0
.eh_frame:000000000001890D                 db    0
.eh_frame:000000000001890E                 db    0
.eh_frame:000000000001890F                 db    0
.eh_frame:0000000000018910                 db  30h ; 0
.eh_frame:0000000000018911                 db    0
.eh_frame:0000000000018912                 db    0
.eh_frame:0000000000018913                 db    0
.eh_frame:0000000000018914                 db  74h ; t
.eh_frame:0000000000018915                 db  0Bh
.eh_frame:0000000000018916                 db    0
.eh_frame:0000000000018917                 db    0
.eh_frame:0000000000018918                 db 0E8h
.eh_frame:0000000000018919                 db  26h ; &
.eh_frame:000000000001891A                 db 0FFh
.eh_frame:000000000001891B                 db 0FFh
.eh_frame:000000000001891C                 db  5Dh ; ]
.eh_frame:000000000001891D                 db    0
.eh_frame:000000000001891E                 db    0
.eh_frame:000000000001891F                 db    0
.eh_frame:0000000000018920                 db    0
.eh_frame:0000000000018921                 db  41h ; A
.eh_frame:0000000000018922                 db  0Eh
.eh_frame:0000000000018923                 db  10h
.eh_frame:0000000000018924                 db  86h
.eh_frame:0000000000018925                 db    2
.eh_frame:0000000000018926                 db  41h ; A
.eh_frame:0000000000018927                 db  0Eh
.eh_frame:0000000000018928                 db  18h
.eh_frame:0000000000018929                 db  83h
.eh_frame:000000000001892A                 db    3
.eh_frame:000000000001892B                 db  49h ; I
.eh_frame:000000000001892C                 db  0Eh
.eh_frame:000000000001892D                 db  20h
.eh_frame:000000000001892E                 db  7Ch ; |
.eh_frame:000000000001892F                 db  0Ah
.eh_frame:0000000000018930                 db  0Eh
.eh_frame:0000000000018931                 db  18h
.eh_frame:0000000000018932                 db  44h ; D
.eh_frame:0000000000018933                 db  0Eh
.eh_frame:0000000000018934                 db  10h
.eh_frame:0000000000018935                 db  41h ; A
.eh_frame:0000000000018936                 db  0Eh
.eh_frame:0000000000018937                 db    8
.eh_frame:0000000000018938                 db  44h ; D
.eh_frame:0000000000018939                 db  0Bh
.eh_frame:000000000001893A                 db  44h ; D
.eh_frame:000000000001893B                 db  0Eh
.eh_frame:000000000001893C                 db  18h
.eh_frame:000000000001893D                 db  47h ; G
.eh_frame:000000000001893E                 db  0Eh
.eh_frame:000000000001893F                 db  10h
.eh_frame:0000000000018940                 db  41h ; A
.eh_frame:0000000000018941                 db  0Eh
.eh_frame:0000000000018942                 db    8
.eh_frame:0000000000018943                 db    0
.eh_frame:0000000000018944                 db  28h ; (
.eh_frame:0000000000018945                 db    0
.eh_frame:0000000000018946                 db    0
.eh_frame:0000000000018947                 db    0
.eh_frame:0000000000018948                 db 0A8h
.eh_frame:0000000000018949                 db  0Bh
.eh_frame:000000000001894A                 db    0
.eh_frame:000000000001894B                 db    0
.eh_frame:000000000001894C                 db  14h
.eh_frame:000000000001894D                 db  27h ; '
.eh_frame:000000000001894E                 db 0FFh
.eh_frame:000000000001894F                 db 0FFh
.eh_frame:0000000000018950                 db  5Ah ; Z
.eh_frame:0000000000018951                 db    0
.eh_frame:0000000000018952                 db    0
.eh_frame:0000000000018953                 db    0
.eh_frame:0000000000018954                 db    0
.eh_frame:0000000000018955                 db  41h ; A
.eh_frame:0000000000018956                 db  0Eh
.eh_frame:0000000000018957                 db  10h
.eh_frame:0000000000018958                 db  86h
.eh_frame:0000000000018959                 db    2
.eh_frame:000000000001895A                 db  41h ; A
.eh_frame:000000000001895B                 db  0Eh
.eh_frame:000000000001895C                 db  18h
.eh_frame:000000000001895D                 db  83h
.eh_frame:000000000001895E                 db    3
.eh_frame:000000000001895F                 db  47h ; G
.eh_frame:0000000000018960                 db  0Eh
.eh_frame:0000000000018961                 db  20h
.eh_frame:0000000000018962                 db    2
.eh_frame:0000000000018963                 db  41h ; A
.eh_frame:0000000000018964                 db  0Ah
.eh_frame:0000000000018965                 db  0Eh
.eh_frame:0000000000018966                 db  18h
.eh_frame:0000000000018967                 db  44h ; D
.eh_frame:0000000000018968                 db  0Eh
.eh_frame:0000000000018969                 db  10h
.eh_frame:000000000001896A                 db  41h ; A
.eh_frame:000000000001896B                 db  0Eh
.eh_frame:000000000001896C                 db    8
.eh_frame:000000000001896D                 db  41h ; A
.eh_frame:000000000001896E                 db  0Bh
.eh_frame:000000000001896F                 db    0
.eh_frame:0000000000018970                 db  10h
.eh_frame:0000000000018971                 db    0
.eh_frame:0000000000018972                 db    0
.eh_frame:0000000000018973                 db    0
.eh_frame:0000000000018974                 db 0D4h
.eh_frame:0000000000018975                 db  0Bh
.eh_frame:0000000000018976                 db    0
.eh_frame:0000000000018977                 db    0
.eh_frame:0000000000018978                 db  48h ; H
.eh_frame:0000000000018979                 db  27h ; '
.eh_frame:000000000001897A                 db 0FFh
.eh_frame:000000000001897B                 db 0FFh
.eh_frame:000000000001897C                 db  5Ch ; \
.eh_frame:000000000001897D                 db    0
.eh_frame:000000000001897E                 db    0
.eh_frame:000000000001897F                 db    0
.eh_frame:0000000000018980                 db    0
.eh_frame:0000000000018981                 db    0
.eh_frame:0000000000018982                 db    0
.eh_frame:0000000000018983                 db    0
.eh_frame:0000000000018984                 db  28h ; (
.eh_frame:0000000000018985                 db    0
.eh_frame:0000000000018986                 db    0
.eh_frame:0000000000018987                 db    0
.eh_frame:0000000000018988                 db 0E8h
.eh_frame:0000000000018989                 db  0Bh
.eh_frame:000000000001898A                 db    0
.eh_frame:000000000001898B                 db    0
.eh_frame:000000000001898C                 db  94h
.eh_frame:000000000001898D                 db  27h ; '
.eh_frame:000000000001898E                 db 0FFh
.eh_frame:000000000001898F                 db 0FFh
.eh_frame:0000000000018990                 db  47h ; G
.eh_frame:0000000000018991                 db    0
.eh_frame:0000000000018992                 db    0
.eh_frame:0000000000018993                 db    0
.eh_frame:0000000000018994                 db    0
.eh_frame:0000000000018995                 db  41h ; A
.eh_frame:0000000000018996                 db  0Eh
.eh_frame:0000000000018997                 db  10h
.eh_frame:0000000000018998                 db  83h
.eh_frame:0000000000018999                 db    2
.eh_frame:000000000001899A                 db  5Ah ; Z
.eh_frame:000000000001899B                 db  0Ah
.eh_frame:000000000001899C                 db  0Eh
.eh_frame:000000000001899D                 db    8
.eh_frame:000000000001899E                 db  45h ; E
.eh_frame:000000000001899F                 db  0Bh
.eh_frame:00000000000189A0                 db  5Dh ; ]
.eh_frame:00000000000189A1                 db  0Ah
.eh_frame:00000000000189A2                 db  0Eh
.eh_frame:00000000000189A3                 db    8
.eh_frame:00000000000189A4                 db  43h ; C
.eh_frame:00000000000189A5                 db  0Bh
.eh_frame:00000000000189A6                 db  46h ; F
.eh_frame:00000000000189A7                 db  0Eh
.eh_frame:00000000000189A8                 db    8
.eh_frame:00000000000189A9                 db    0
.eh_frame:00000000000189AA                 db    0
.eh_frame:00000000000189AB                 db    0
.eh_frame:00000000000189AC                 db    0
.eh_frame:00000000000189AD                 db    0
.eh_frame:00000000000189AE                 db    0
.eh_frame:00000000000189AF                 db    0
.eh_frame:00000000000189B0                 db  24h ; $
.eh_frame:00000000000189B1                 db    0
.eh_frame:00000000000189B2                 db    0
.eh_frame:00000000000189B3                 db    0
.eh_frame:00000000000189B4                 db  14h
.eh_frame:00000000000189B5                 db  0Ch
.eh_frame:00000000000189B6                 db    0
.eh_frame:00000000000189B7                 db    0
.eh_frame:00000000000189B8                 db 0B8h
.eh_frame:00000000000189B9                 db  27h ; '
.eh_frame:00000000000189BA                 db 0FFh
.eh_frame:00000000000189BB                 db 0FFh
.eh_frame:00000000000189BC                 db  33h ; 3
.eh_frame:00000000000189BD                 db    0
.eh_frame:00000000000189BE                 db    0
.eh_frame:00000000000189BF                 db    0
.eh_frame:00000000000189C0                 db    0
.eh_frame:00000000000189C1                 db  41h ; A
.eh_frame:00000000000189C2                 db  0Eh
.eh_frame:00000000000189C3                 db  10h
.eh_frame:00000000000189C4                 db  86h
.eh_frame:00000000000189C5                 db    2
.eh_frame:00000000000189C6                 db  41h ; A
.eh_frame:00000000000189C7                 db  0Eh
.eh_frame:00000000000189C8                 db  18h
.eh_frame:00000000000189C9                 db  83h
.eh_frame:00000000000189CA                 db    3
.eh_frame:00000000000189CB                 db  47h ; G
.eh_frame:00000000000189CC                 db  0Eh
.eh_frame:00000000000189CD                 db  20h
.eh_frame:00000000000189CE                 db  67h ; g
.eh_frame:00000000000189CF                 db  0Eh
.eh_frame:00000000000189D0                 db  18h
.eh_frame:00000000000189D1                 db  41h ; A
.eh_frame:00000000000189D2                 db  0Eh
.eh_frame:00000000000189D3                 db  10h
.eh_frame:00000000000189D4                 db  41h ; A
.eh_frame:00000000000189D5                 db  0Eh
.eh_frame:00000000000189D6                 db    8
.eh_frame:00000000000189D7                 db    0
.eh_frame:00000000000189D8                 db  10h
.eh_frame:00000000000189D9                 db    0
.eh_frame:00000000000189DA                 db    0
.eh_frame:00000000000189DB                 db    0
.eh_frame:00000000000189DC                 db  3Ch ; <
.eh_frame:00000000000189DD                 db  0Ch
.eh_frame:00000000000189DE                 db    0
.eh_frame:00000000000189DF                 db    0
.eh_frame:00000000000189E0                 db 0D0h
.eh_frame:00000000000189E1                 db  27h ; '
.eh_frame:00000000000189E2                 db 0FFh
.eh_frame:00000000000189E3                 db 0FFh
.eh_frame:00000000000189E4                 db    5
.eh_frame:00000000000189E5                 db    0
.eh_frame:00000000000189E6                 db    0
.eh_frame:00000000000189E7                 db    0
.eh_frame:00000000000189E8                 db    0
.eh_frame:00000000000189E9                 db    0
.eh_frame:00000000000189EA                 db    0
.eh_frame:00000000000189EB                 db    0
.eh_frame:00000000000189EC                 db  18h
.eh_frame:00000000000189ED                 db    0
.eh_frame:00000000000189EE                 db    0
.eh_frame:00000000000189EF                 db    0
.eh_frame:00000000000189F0                 db  50h ; P
.eh_frame:00000000000189F1                 db  0Ch
.eh_frame:00000000000189F2                 db    0
.eh_frame:00000000000189F3                 db    0
.eh_frame:00000000000189F4                 db 0CCh
.eh_frame:00000000000189F5                 db  27h ; '
.eh_frame:00000000000189F6                 db 0FFh
.eh_frame:00000000000189F7                 db 0FFh
.eh_frame:00000000000189F8                 db  22h ; "
.eh_frame:00000000000189F9                 db    0
.eh_frame:00000000000189FA                 db    0
.eh_frame:00000000000189FB                 db    0
.eh_frame:00000000000189FC                 db    0
.eh_frame:00000000000189FD                 db  46h ; F
.eh_frame:00000000000189FE                 db  0Eh
.eh_frame:00000000000189FF                 db  10h
.eh_frame:0000000000018A00                 db  83h
.eh_frame:0000000000018A01                 db    2
.eh_frame:0000000000018A02                 db  4Eh ; N
.eh_frame:0000000000018A03                 db 0C3h
.eh_frame:0000000000018A04                 db  0Eh
.eh_frame:0000000000018A05                 db    8
.eh_frame:0000000000018A06                 db    0
.eh_frame:0000000000018A07                 db    0
.eh_frame:0000000000018A08                 db  1Ch
.eh_frame:0000000000018A09                 db    0
.eh_frame:0000000000018A0A                 db    0
.eh_frame:0000000000018A0B                 db    0
.eh_frame:0000000000018A0C                 db  6Ch ; l
.eh_frame:0000000000018A0D                 db  0Ch
.eh_frame:0000000000018A0E                 db    0
.eh_frame:0000000000018A0F                 db    0
.eh_frame:0000000000018A10                 db 0E0h
.eh_frame:0000000000018A11                 db  27h ; '
.eh_frame:0000000000018A12                 db 0FFh
.eh_frame:0000000000018A13                 db 0FFh
.eh_frame:0000000000018A14                 db  6Eh ; n
.eh_frame:0000000000018A15                 db    0
.eh_frame:0000000000018A16                 db    0
.eh_frame:0000000000018A17                 db    0
.eh_frame:0000000000018A18                 db    0
.eh_frame:0000000000018A19                 db  44h ; D
.eh_frame:0000000000018A1A                 db  0Eh
.eh_frame:0000000000018A1B                 db  60h ; `
.eh_frame:0000000000018A1C                 db  7Fh ; 
.eh_frame:0000000000018A1D                 db  0Ah
.eh_frame:0000000000018A1E                 db  0Eh
.eh_frame:0000000000018A1F                 db    8
.eh_frame:0000000000018A20                 db  45h ; E
.eh_frame:0000000000018A21                 db  0Bh
.eh_frame:0000000000018A22                 db    0
.eh_frame:0000000000018A23                 db    0
.eh_frame:0000000000018A24                 db    0
.eh_frame:0000000000018A25                 db    0
.eh_frame:0000000000018A26                 db    0
.eh_frame:0000000000018A27                 db    0
.eh_frame:0000000000018A28                 db  5Ch ; \
.eh_frame:0000000000018A29                 db    0
.eh_frame:0000000000018A2A                 db    0
.eh_frame:0000000000018A2B                 db    0
.eh_frame:0000000000018A2C                 db  8Ch
.eh_frame:0000000000018A2D                 db  0Ch
.eh_frame:0000000000018A2E                 db    0
.eh_frame:0000000000018A2F                 db    0
.eh_frame:0000000000018A30                 db  30h ; 0
.eh_frame:0000000000018A31                 db  28h ; (
.eh_frame:0000000000018A32                 db 0FFh
.eh_frame:0000000000018A33                 db 0FFh
.eh_frame:0000000000018A34                 db  87h
.eh_frame:0000000000018A35                 db    0
.eh_frame:0000000000018A36                 db    0
.eh_frame:0000000000018A37                 db    0
.eh_frame:0000000000018A38                 db    0
.eh_frame:0000000000018A39                 db  47h ; G
.eh_frame:0000000000018A3A                 db  0Eh
.eh_frame:0000000000018A3B                 db  10h
.eh_frame:0000000000018A3C                 db  8Dh
.eh_frame:0000000000018A3D                 db    2
.eh_frame:0000000000018A3E                 db  42h ; B
.eh_frame:0000000000018A3F                 db  0Eh
.eh_frame:0000000000018A40                 db  18h
.eh_frame:0000000000018A41                 db  8Ch
.eh_frame:0000000000018A42                 db    3
.eh_frame:0000000000018A43                 db  44h ; D
.eh_frame:0000000000018A44                 db  0Eh
.eh_frame:0000000000018A45                 db  20h
.eh_frame:0000000000018A46                 db  86h
.eh_frame:0000000000018A47                 db    4
.eh_frame:0000000000018A48                 db  41h ; A
.eh_frame:0000000000018A49                 db  0Eh
.eh_frame:0000000000018A4A                 db  28h ; (
.eh_frame:0000000000018A4B                 db  83h
.eh_frame:0000000000018A4C                 db    5
.eh_frame:0000000000018A4D                 db  4Fh ; O
.eh_frame:0000000000018A4E                 db  0Eh
.eh_frame:0000000000018A4F                 db  30h ; 0
.eh_frame:0000000000018A50                 db  7Ch ; |
.eh_frame:0000000000018A51                 db  0Ah
.eh_frame:0000000000018A52                 db  0Eh
.eh_frame:0000000000018A53                 db  28h ; (
.eh_frame:0000000000018A54                 db  44h ; D
.eh_frame:0000000000018A55                 db 0C3h
.eh_frame:0000000000018A56                 db  0Eh
.eh_frame:0000000000018A57                 db  20h
.eh_frame:0000000000018A58                 db  41h ; A
.eh_frame:0000000000018A59                 db 0C6h
.eh_frame:0000000000018A5A                 db  0Eh
.eh_frame:0000000000018A5B                 db  18h
.eh_frame:0000000000018A5C                 db  42h ; B
.eh_frame:0000000000018A5D                 db 0CCh
.eh_frame:0000000000018A5E                 db  0Eh
.eh_frame:0000000000018A5F                 db  10h
.eh_frame:0000000000018A60                 db  42h ; B
.eh_frame:0000000000018A61                 db 0CDh
.eh_frame:0000000000018A62                 db  0Eh
.eh_frame:0000000000018A63                 db    8
.eh_frame:0000000000018A64                 db  4Eh ; N
.eh_frame:0000000000018A65                 db  0Bh
.eh_frame:0000000000018A66                 db  44h ; D
.eh_frame:0000000000018A67                 db  0Eh
.eh_frame:0000000000018A68                 db  28h ; (
.eh_frame:0000000000018A69                 db  41h ; A
.eh_frame:0000000000018A6A                 db  0Eh
.eh_frame:0000000000018A6B                 db  20h
.eh_frame:0000000000018A6C                 db  41h ; A
.eh_frame:0000000000018A6D                 db  0Eh
.eh_frame:0000000000018A6E                 db  18h
.eh_frame:0000000000018A6F                 db  42h ; B
.eh_frame:0000000000018A70                 db  0Eh
.eh_frame:0000000000018A71                 db  10h
.eh_frame:0000000000018A72                 db  42h ; B
.eh_frame:0000000000018A73                 db  0Eh
.eh_frame:0000000000018A74                 db    8
.eh_frame:0000000000018A75                 db  46h ; F
.eh_frame:0000000000018A76                 db 0C3h
.eh_frame:0000000000018A77                 db 0C6h
.eh_frame:0000000000018A78                 db 0CCh
.eh_frame:0000000000018A79                 db 0CDh
.eh_frame:0000000000018A7A                 db  42h ; B
.eh_frame:0000000000018A7B                 db  0Eh
.eh_frame:0000000000018A7C                 db  30h ; 0
.eh_frame:0000000000018A7D                 db  83h
.eh_frame:0000000000018A7E                 db    5
.eh_frame:0000000000018A7F                 db  86h
.eh_frame:0000000000018A80                 db    4
.eh_frame:0000000000018A81                 db  8Ch
.eh_frame:0000000000018A82                 db    3
.eh_frame:0000000000018A83                 db  8Dh
.eh_frame:0000000000018A84                 db    2
.eh_frame:0000000000018A85                 db    0
.eh_frame:0000000000018A86                 db    0
.eh_frame:0000000000018A87                 db    0
.eh_frame:0000000000018A88                 db  1Ch
.eh_frame:0000000000018A89                 db    0
.eh_frame:0000000000018A8A                 db    0
.eh_frame:0000000000018A8B                 db    0
.eh_frame:0000000000018A8C                 db 0ECh
.eh_frame:0000000000018A8D                 db  0Ch
.eh_frame:0000000000018A8E                 db    0
.eh_frame:0000000000018A8F                 db    0
.eh_frame:0000000000018A90                 db  60h ; `
.eh_frame:0000000000018A91                 db  28h ; (
.eh_frame:0000000000018A92                 db 0FFh
.eh_frame:0000000000018A93                 db 0FFh
.eh_frame:0000000000018A94                 db  56h ; V
.eh_frame:0000000000018A95                 db    0
.eh_frame:0000000000018A96                 db    0
.eh_frame:0000000000018A97                 db    0
.eh_frame:0000000000018A98                 db    0
.eh_frame:0000000000018A99                 db  44h ; D
.eh_frame:0000000000018A9A                 db  0Eh
.eh_frame:0000000000018A9B                 db  30h ; 0
.eh_frame:0000000000018A9C                 db    2
.eh_frame:0000000000018A9D                 db  4Ch ; L
.eh_frame:0000000000018A9E                 db  0Ah
.eh_frame:0000000000018A9F                 db  0Eh
.eh_frame:0000000000018AA0                 db    8
.eh_frame:0000000000018AA1                 db  41h ; A
.eh_frame:0000000000018AA2                 db  0Bh
.eh_frame:0000000000018AA3                 db    0
.eh_frame:0000000000018AA4                 db    0
.eh_frame:0000000000018AA5                 db    0
.eh_frame:0000000000018AA6                 db    0
.eh_frame:0000000000018AA7                 db    0
.eh_frame:0000000000018AA8                 db  14h
.eh_frame:0000000000018AA9                 db    0
.eh_frame:0000000000018AAA                 db    0
.eh_frame:0000000000018AAB                 db    0
.eh_frame:0000000000018AAC                 db  0Ch
.eh_frame:0000000000018AAD                 db  0Dh
.eh_frame:0000000000018AAE                 db    0
.eh_frame:0000000000018AAF                 db    0
.eh_frame:0000000000018AB0                 db 0A0h
.eh_frame:0000000000018AB1                 db  28h ; (
.eh_frame:0000000000018AB2                 db 0FFh
.eh_frame:0000000000018AB3                 db 0FFh
.eh_frame:0000000000018AB4                 db 0EEh
.eh_frame:0000000000018AB5                 db    0
.eh_frame:0000000000018AB6                 db    0
.eh_frame:0000000000018AB7                 db    0
.eh_frame:0000000000018AB8                 db    0
.eh_frame:0000000000018AB9                 db    0
.eh_frame:0000000000018ABA                 db    0
.eh_frame:0000000000018ABB                 db    0
.eh_frame:0000000000018ABC                 db    0
.eh_frame:0000000000018ABD                 db    0
.eh_frame:0000000000018ABE                 db    0
.eh_frame:0000000000018ABF                 db    0
.eh_frame:0000000000018AC0                 db  10h
.eh_frame:0000000000018AC1                 db    0
.eh_frame:0000000000018AC2                 db    0
.eh_frame:0000000000018AC3                 db    0
.eh_frame:0000000000018AC4                 db  24h ; $
.eh_frame:0000000000018AC5                 db  0Dh
.eh_frame:0000000000018AC6                 db    0
.eh_frame:0000000000018AC7                 db    0
.eh_frame:0000000000018AC8                 db  78h ; x
.eh_frame:0000000000018AC9                 db  29h ; )
.eh_frame:0000000000018ACA                 db 0FFh
.eh_frame:0000000000018ACB                 db 0FFh
.eh_frame:0000000000018ACC                 db  83h
.eh_frame:0000000000018ACD                 db    1
.eh_frame:0000000000018ACE                 db    0
.eh_frame:0000000000018ACF                 db    0
.eh_frame:0000000000018AD0                 db    0
.eh_frame:0000000000018AD1                 db    0
.eh_frame:0000000000018AD2                 db    0
.eh_frame:0000000000018AD3                 db    0
.eh_frame:0000000000018AD4                 db  10h
.eh_frame:0000000000018AD5                 db    0
.eh_frame:0000000000018AD6                 db    0
.eh_frame:0000000000018AD7                 db    0
.eh_frame:0000000000018AD8                 db  38h ; 8
.eh_frame:0000000000018AD9                 db  0Dh
.eh_frame:0000000000018ADA                 db    0
.eh_frame:0000000000018ADB                 db    0
.eh_frame:0000000000018ADC                 db 0F4h
.eh_frame:0000000000018ADD                 db  2Ah ; *
.eh_frame:0000000000018ADE                 db 0FFh
.eh_frame:0000000000018ADF                 db 0FFh
.eh_frame:0000000000018AE0                 db    8
.eh_frame:0000000000018AE1                 db    0
.eh_frame:0000000000018AE2                 db    0
.eh_frame:0000000000018AE3                 db    0
.eh_frame:0000000000018AE4                 db    0
.eh_frame:0000000000018AE5                 db    0
.eh_frame:0000000000018AE6                 db    0
.eh_frame:0000000000018AE7                 db    0
.eh_frame:0000000000018AE8                 db  1Ch
.eh_frame:0000000000018AE9                 db    0
.eh_frame:0000000000018AEA                 db    0
.eh_frame:0000000000018AEB                 db    0
.eh_frame:0000000000018AEC                 db  4Ch ; L
.eh_frame:0000000000018AED                 db  0Dh
.eh_frame:0000000000018AEE                 db    0
.eh_frame:0000000000018AEF                 db    0
.eh_frame:0000000000018AF0                 db 0F0h
.eh_frame:0000000000018AF1                 db  2Ah ; *
.eh_frame:0000000000018AF2                 db 0FFh
.eh_frame:0000000000018AF3                 db 0FFh
.eh_frame:0000000000018AF4                 db  18h
.eh_frame:0000000000018AF5                 db    0
.eh_frame:0000000000018AF6                 db    0
.eh_frame:0000000000018AF7                 db    0
.eh_frame:0000000000018AF8                 db    0
.eh_frame:0000000000018AF9                 db  44h ; D
.eh_frame:0000000000018AFA                 db  0Eh
.eh_frame:0000000000018AFB                 db  10h
.eh_frame:0000000000018AFC                 db  4Eh ; N
.eh_frame:0000000000018AFD                 db  0Ah
.eh_frame:0000000000018AFE                 db  0Eh
.eh_frame:0000000000018AFF                 db    8
.eh_frame:0000000000018B00                 db  41h ; A
.eh_frame:0000000000018B01                 db  0Bh
.eh_frame:0000000000018B02                 db    0
.eh_frame:0000000000018B03                 db    0
.eh_frame:0000000000018B04                 db    0
.eh_frame:0000000000018B05                 db    0
.eh_frame:0000000000018B06                 db    0
.eh_frame:0000000000018B07                 db    0
.eh_frame:0000000000018B08                 db  4Ch ; L
.eh_frame:0000000000018B09                 db    0
.eh_frame:0000000000018B0A                 db    0
.eh_frame:0000000000018B0B                 db    0
.eh_frame:0000000000018B0C                 db  6Ch ; l
.eh_frame:0000000000018B0D                 db  0Dh
.eh_frame:0000000000018B0E                 db    0
.eh_frame:0000000000018B0F                 db    0
.eh_frame:0000000000018B10                 db 0F0h
.eh_frame:0000000000018B11                 db  2Ah ; *
.eh_frame:0000000000018B12                 db 0FFh
.eh_frame:0000000000018B13                 db 0FFh
.eh_frame:0000000000018B14                 db 0FFh
.eh_frame:0000000000018B15                 db    0
.eh_frame:0000000000018B16                 db    0
.eh_frame:0000000000018B17                 db    0
.eh_frame:0000000000018B18                 db    0
.eh_frame:0000000000018B19                 db  42h ; B
.eh_frame:0000000000018B1A                 db  0Eh
.eh_frame:0000000000018B1B                 db  10h
.eh_frame:0000000000018B1C                 db  8Fh
.eh_frame:0000000000018B1D                 db    2
.eh_frame:0000000000018B1E                 db  42h ; B
.eh_frame:0000000000018B1F                 db  0Eh
.eh_frame:0000000000018B20                 db  18h
.eh_frame:0000000000018B21                 db  8Eh
.eh_frame:0000000000018B22                 db    3
.eh_frame:0000000000018B23                 db  45h ; E
.eh_frame:0000000000018B24                 db  0Eh
.eh_frame:0000000000018B25                 db  20h
.eh_frame:0000000000018B26                 db  8Dh
.eh_frame:0000000000018B27                 db    4
.eh_frame:0000000000018B28                 db  42h ; B
.eh_frame:0000000000018B29                 db  0Eh
.eh_frame:0000000000018B2A                 db  28h ; (
.eh_frame:0000000000018B2B                 db  8Ch
.eh_frame:0000000000018B2C                 db    5
.eh_frame:0000000000018B2D                 db  44h ; D
.eh_frame:0000000000018B2E                 db  0Eh
.eh_frame:0000000000018B2F                 db  30h ; 0
.eh_frame:0000000000018B30                 db  86h
.eh_frame:0000000000018B31                 db    6
.eh_frame:0000000000018B32                 db  41h ; A
.eh_frame:0000000000018B33                 db  0Eh
.eh_frame:0000000000018B34                 db  38h ; 8
.eh_frame:0000000000018B35                 db  83h
.eh_frame:0000000000018B36                 db    7
.eh_frame:0000000000018B37                 db  47h ; G
.eh_frame:0000000000018B38                 db  0Eh
.eh_frame:0000000000018B39                 db  50h ; P
.eh_frame:0000000000018B3A                 db    2
.eh_frame:0000000000018B3B                 db 0C3h
.eh_frame:0000000000018B3C                 db  0Ah
.eh_frame:0000000000018B3D                 db  0Eh
.eh_frame:0000000000018B3E                 db  38h ; 8
.eh_frame:0000000000018B3F                 db  44h ; D
.eh_frame:0000000000018B40                 db  0Eh
.eh_frame:0000000000018B41                 db  30h ; 0
.eh_frame:0000000000018B42                 db  41h ; A
.eh_frame:0000000000018B43                 db  0Eh
.eh_frame:0000000000018B44                 db  28h ; (
.eh_frame:0000000000018B45                 db  42h ; B
.eh_frame:0000000000018B46                 db  0Eh
.eh_frame:0000000000018B47                 db  20h
.eh_frame:0000000000018B48                 db  42h ; B
.eh_frame:0000000000018B49                 db  0Eh
.eh_frame:0000000000018B4A                 db  18h
.eh_frame:0000000000018B4B                 db  42h ; B
.eh_frame:0000000000018B4C                 db  0Eh
.eh_frame:0000000000018B4D                 db  10h
.eh_frame:0000000000018B4E                 db  42h ; B
.eh_frame:0000000000018B4F                 db  0Eh
.eh_frame:0000000000018B50                 db    8
.eh_frame:0000000000018B51                 db  49h ; I
.eh_frame:0000000000018B52                 db  0Bh
.eh_frame:0000000000018B53                 db    0
.eh_frame:0000000000018B54                 db    0
.eh_frame:0000000000018B55                 db    0
.eh_frame:0000000000018B56                 db    0
.eh_frame:0000000000018B57                 db    0
.eh_frame:0000000000018B58                 db  4Ch ; L
.eh_frame:0000000000018B59                 db    0
.eh_frame:0000000000018B5A                 db    0
.eh_frame:0000000000018B5B                 db    0
.eh_frame:0000000000018B5C                 db 0BCh
.eh_frame:0000000000018B5D                 db  0Dh
.eh_frame:0000000000018B5E                 db    0
.eh_frame:0000000000018B5F                 db    0
.eh_frame:0000000000018B60                 db 0A0h
.eh_frame:0000000000018B61                 db  2Bh ; +
.eh_frame:0000000000018B62                 db 0FFh
.eh_frame:0000000000018B63                 db 0FFh
.eh_frame:0000000000018B64                 db  76h ; v
.eh_frame:0000000000018B65                 db    0
.eh_frame:0000000000018B66                 db    0
.eh_frame:0000000000018B67                 db    0
.eh_frame:0000000000018B68                 db    0
.eh_frame:0000000000018B69                 db  42h ; B
.eh_frame:0000000000018B6A                 db  0Eh
.eh_frame:0000000000018B6B                 db  10h
.eh_frame:0000000000018B6C                 db  8Dh
.eh_frame:0000000000018B6D                 db    2
.eh_frame:0000000000018B6E                 db  42h ; B
.eh_frame:0000000000018B6F                 db  0Eh
.eh_frame:0000000000018B70                 db  18h
.eh_frame:0000000000018B71                 db  8Ch
.eh_frame:0000000000018B72                 db    3
.eh_frame:0000000000018B73                 db  41h ; A
.eh_frame:0000000000018B74                 db  0Eh
.eh_frame:0000000000018B75                 db  20h
.eh_frame:0000000000018B76                 db  86h
.eh_frame:0000000000018B77                 db    4
.eh_frame:0000000000018B78                 db  41h ; A
.eh_frame:0000000000018B79                 db  0Eh
.eh_frame:0000000000018B7A                 db  28h ; (
.eh_frame:0000000000018B7B                 db  83h
.eh_frame:0000000000018B7C                 db    5
.eh_frame:0000000000018B7D                 db  44h ; D
.eh_frame:0000000000018B7E                 db  0Eh
.eh_frame:0000000000018B7F                 db  30h ; 0
.eh_frame:0000000000018B80                 db  7Eh ; ~
.eh_frame:0000000000018B81                 db  0Ah
.eh_frame:0000000000018B82                 db  0Eh
.eh_frame:0000000000018B83                 db  28h ; (
.eh_frame:0000000000018B84                 db  44h ; D
.eh_frame:0000000000018B85                 db  0Eh
.eh_frame:0000000000018B86                 db  20h
.eh_frame:0000000000018B87                 db  41h ; A
.eh_frame:0000000000018B88                 db  0Eh
.eh_frame:0000000000018B89                 db  18h
.eh_frame:0000000000018B8A                 db  42h ; B
.eh_frame:0000000000018B8B                 db  0Eh
.eh_frame:0000000000018B8C                 db  10h
.eh_frame:0000000000018B8D                 db  42h ; B
.eh_frame:0000000000018B8E                 db  0Eh
.eh_frame:0000000000018B8F                 db    8
.eh_frame:0000000000018B90                 db  47h ; G
.eh_frame:0000000000018B91                 db  0Bh
.eh_frame:0000000000018B92                 db  4Fh ; O
.eh_frame:0000000000018B93                 db  0Ah
.eh_frame:0000000000018B94                 db  0Eh
.eh_frame:0000000000018B95                 db  28h ; (
.eh_frame:0000000000018B96                 db  44h ; D
.eh_frame:0000000000018B97                 db  0Eh
.eh_frame:0000000000018B98                 db  20h
.eh_frame:0000000000018B99                 db  41h ; A
.eh_frame:0000000000018B9A                 db  0Eh
.eh_frame:0000000000018B9B                 db  18h
.eh_frame:0000000000018B9C                 db  42h ; B
.eh_frame:0000000000018B9D                 db  0Eh
.eh_frame:0000000000018B9E                 db  10h
.eh_frame:0000000000018B9F                 db  42h ; B
.eh_frame:0000000000018BA0                 db  0Eh
.eh_frame:0000000000018BA1                 db    8
.eh_frame:0000000000018BA2                 db  41h ; A
.eh_frame:0000000000018BA3                 db  0Bh
.eh_frame:0000000000018BA4                 db    0
.eh_frame:0000000000018BA5                 db    0
.eh_frame:0000000000018BA6                 db    0
.eh_frame:0000000000018BA7                 db    0
.eh_frame:0000000000018BA8                 db  10h
.eh_frame:0000000000018BA9                 db    0
.eh_frame:0000000000018BAA                 db    0
.eh_frame:0000000000018BAB                 db    0
.eh_frame:0000000000018BAC                 db  0Ch
.eh_frame:0000000000018BAD                 db  0Eh
.eh_frame:0000000000018BAE                 db    0
.eh_frame:0000000000018BAF                 db    0
.eh_frame:0000000000018BB0                 db 0D0h
.eh_frame:0000000000018BB1                 db  2Bh ; +
.eh_frame:0000000000018BB2                 db 0FFh
.eh_frame:0000000000018BB3                 db 0FFh
.eh_frame:0000000000018BB4                 db  93h
.eh_frame:0000000000018BB5                 db    0
.eh_frame:0000000000018BB6                 db    0
.eh_frame:0000000000018BB7                 db    0
.eh_frame:0000000000018BB8                 db    0
.eh_frame:0000000000018BB9                 db    0
.eh_frame:0000000000018BBA                 db    0
.eh_frame:0000000000018BBB                 db    0
.eh_frame:0000000000018BBC                 db  10h
.eh_frame:0000000000018BBD                 db    0
.eh_frame:0000000000018BBE                 db    0
.eh_frame:0000000000018BBF                 db    0
.eh_frame:0000000000018BC0                 db  20h
.eh_frame:0000000000018BC1                 db  0Eh
.eh_frame:0000000000018BC2                 db    0
.eh_frame:0000000000018BC3                 db    0
.eh_frame:0000000000018BC4                 db  5Ch ; \
.eh_frame:0000000000018BC5                 db  2Ch ; ,
.eh_frame:0000000000018BC6                 db 0FFh
.eh_frame:0000000000018BC7                 db 0FFh
.eh_frame:0000000000018BC8                 db  10h
.eh_frame:0000000000018BC9                 db    0
.eh_frame:0000000000018BCA                 db    0
.eh_frame:0000000000018BCB                 db    0
.eh_frame:0000000000018BCC                 db    0
.eh_frame:0000000000018BCD                 db    0
.eh_frame:0000000000018BCE                 db    0
.eh_frame:0000000000018BCF                 db    0
.eh_frame:0000000000018BD0                 db  10h
.eh_frame:0000000000018BD1                 db    0
.eh_frame:0000000000018BD2                 db    0
.eh_frame:0000000000018BD3                 db    0
.eh_frame:0000000000018BD4                 db  34h ; 4
.eh_frame:0000000000018BD5                 db  0Eh
.eh_frame:0000000000018BD6                 db    0
.eh_frame:0000000000018BD7                 db    0
.eh_frame:0000000000018BD8                 db  58h ; X
.eh_frame:0000000000018BD9                 db  2Ch ; ,
.eh_frame:0000000000018BDA                 db 0FFh
.eh_frame:0000000000018BDB                 db 0FFh
.eh_frame:0000000000018BDC                 db    7
.eh_frame:0000000000018BDD                 db    0
.eh_frame:0000000000018BDE                 db    0
.eh_frame:0000000000018BDF                 db    0
.eh_frame:0000000000018BE0                 db    0
.eh_frame:0000000000018BE1                 db    0
.eh_frame:0000000000018BE2                 db    0
.eh_frame:0000000000018BE3                 db    0
.eh_frame:0000000000018BE4                 db  18h
.eh_frame:0000000000018BE5                 db    0
.eh_frame:0000000000018BE6                 db    0
.eh_frame:0000000000018BE7                 db    0
.eh_frame:0000000000018BE8                 db  48h ; H
.eh_frame:0000000000018BE9                 db  0Eh
.eh_frame:0000000000018BEA                 db    0
.eh_frame:0000000000018BEB                 db    0
.eh_frame:0000000000018BEC                 db  54h ; T
.eh_frame:0000000000018BED                 db  2Ch ; ,
.eh_frame:0000000000018BEE                 db 0FFh
.eh_frame:0000000000018BEF                 db 0FFh
.eh_frame:0000000000018BF0                 db  22h ; "
.eh_frame:0000000000018BF1                 db    0
.eh_frame:0000000000018BF2                 db    0
.eh_frame:0000000000018BF3                 db    0
.eh_frame:0000000000018BF4                 db    0
.eh_frame:0000000000018BF5                 db  41h ; A
.eh_frame:0000000000018BF6                 db  0Eh
.eh_frame:0000000000018BF7                 db  10h
.eh_frame:0000000000018BF8                 db  83h
.eh_frame:0000000000018BF9                 db    2
.eh_frame:0000000000018BFA                 db  5Bh ; [
.eh_frame:0000000000018BFB                 db  0Ah
.eh_frame:0000000000018BFC                 db  0Eh
.eh_frame:0000000000018BFD                 db    8
.eh_frame:0000000000018BFE                 db  41h ; A
.eh_frame:0000000000018BFF                 db  0Bh
.eh_frame:0000000000018C00                 db  5Ch ; \
.eh_frame:0000000000018C01                 db    0
.eh_frame:0000000000018C02                 db    0
.eh_frame:0000000000018C03                 db    0
.eh_frame:0000000000018C04                 db  64h ; d
.eh_frame:0000000000018C05                 db  0Eh
.eh_frame:0000000000018C06                 db    0
.eh_frame:0000000000018C07                 db    0
.eh_frame:0000000000018C08                 db  68h ; h
.eh_frame:0000000000018C09                 db  2Ch ; ,
.eh_frame:0000000000018C0A                 db 0FFh
.eh_frame:0000000000018C0B                 db 0FFh
.eh_frame:0000000000018C0C                 db  1Eh
.eh_frame:0000000000018C0D                 db    1
.eh_frame:0000000000018C0E                 db    0
.eh_frame:0000000000018C0F                 db    0
.eh_frame:0000000000018C10                 db    0
.eh_frame:0000000000018C11                 db  42h ; B
.eh_frame:0000000000018C12                 db  0Eh
.eh_frame:0000000000018C13                 db  10h
.eh_frame:0000000000018C14                 db  8Eh
.eh_frame:0000000000018C15                 db    2
.eh_frame:0000000000018C16                 db  42h ; B
.eh_frame:0000000000018C17                 db  0Eh
.eh_frame:0000000000018C18                 db  18h
.eh_frame:0000000000018C19                 db  8Dh
.eh_frame:0000000000018C1A                 db    3
.eh_frame:0000000000018C1B                 db  45h ; E
.eh_frame:0000000000018C1C                 db  0Eh
.eh_frame:0000000000018C1D                 db  20h
.eh_frame:0000000000018C1E                 db  8Ch
.eh_frame:0000000000018C1F                 db    4
.eh_frame:0000000000018C20                 db  41h ; A
.eh_frame:0000000000018C21                 db  0Eh
.eh_frame:0000000000018C22                 db  28h ; (
.eh_frame:0000000000018C23                 db  86h
.eh_frame:0000000000018C24                 db    5
.eh_frame:0000000000018C25                 db  44h ; D
.eh_frame:0000000000018C26                 db  0Eh
.eh_frame:0000000000018C27                 db  30h ; 0
.eh_frame:0000000000018C28                 db  83h
.eh_frame:0000000000018C29                 db    6
.eh_frame:0000000000018C2A                 db    2
.eh_frame:0000000000018C2B                 db 0A1h
.eh_frame:0000000000018C2C                 db  0Ah
.eh_frame:0000000000018C2D                 db  0Eh
.eh_frame:0000000000018C2E                 db  28h ; (
.eh_frame:0000000000018C2F                 db  44h ; D
.eh_frame:0000000000018C30                 db  0Eh
.eh_frame:0000000000018C31                 db  20h
.eh_frame:0000000000018C32                 db  42h ; B
.eh_frame:0000000000018C33                 db  0Eh
.eh_frame:0000000000018C34                 db  18h
.eh_frame:0000000000018C35                 db  42h ; B
.eh_frame:0000000000018C36                 db  0Eh
.eh_frame:0000000000018C37                 db  10h
.eh_frame:0000000000018C38                 db  42h ; B
.eh_frame:0000000000018C39                 db  0Eh
.eh_frame:0000000000018C3A                 db    8
.eh_frame:0000000000018C3B                 db  47h ; G
.eh_frame:0000000000018C3C                 db  0Bh
.eh_frame:0000000000018C3D                 db  71h ; q
.eh_frame:0000000000018C3E                 db  0Ah
.eh_frame:0000000000018C3F                 db  0Eh
.eh_frame:0000000000018C40                 db  28h ; (
.eh_frame:0000000000018C41                 db  41h ; A
.eh_frame:0000000000018C42                 db  0Eh
.eh_frame:0000000000018C43                 db  20h
.eh_frame:0000000000018C44                 db  42h ; B
.eh_frame:0000000000018C45                 db  0Eh
.eh_frame:0000000000018C46                 db  18h
.eh_frame:0000000000018C47                 db  42h ; B
.eh_frame:0000000000018C48                 db  0Eh
.eh_frame:0000000000018C49                 db  10h
.eh_frame:0000000000018C4A                 db  42h ; B
.eh_frame:0000000000018C4B                 db  0Eh
.eh_frame:0000000000018C4C                 db    8
.eh_frame:0000000000018C4D                 db  48h ; H
.eh_frame:0000000000018C4E                 db  0Bh
.eh_frame:0000000000018C4F                 db  53h ; S
.eh_frame:0000000000018C50                 db  0Eh
.eh_frame:0000000000018C51                 db  28h ; (
.eh_frame:0000000000018C52                 db  44h ; D
.eh_frame:0000000000018C53                 db  0Eh
.eh_frame:0000000000018C54                 db  20h
.eh_frame:0000000000018C55                 db  42h ; B
.eh_frame:0000000000018C56                 db  0Eh
.eh_frame:0000000000018C57                 db  18h
.eh_frame:0000000000018C58                 db  42h ; B
.eh_frame:0000000000018C59                 db  0Eh
.eh_frame:0000000000018C5A                 db  10h
.eh_frame:0000000000018C5B                 db  42h ; B
.eh_frame:0000000000018C5C                 db  0Eh
.eh_frame:0000000000018C5D                 db    8
.eh_frame:0000000000018C5E                 db    0
.eh_frame:0000000000018C5F                 db    0
.eh_frame:0000000000018C60                 db  10h
.eh_frame:0000000000018C61                 db    0
.eh_frame:0000000000018C62                 db    0
.eh_frame:0000000000018C63                 db    0
.eh_frame:0000000000018C64                 db 0C4h
.eh_frame:0000000000018C65                 db  0Eh
.eh_frame:0000000000018C66                 db    0
.eh_frame:0000000000018C67                 db    0
.eh_frame:0000000000018C68                 db  28h ; (
.eh_frame:0000000000018C69                 db  2Dh ; -
.eh_frame:0000000000018C6A                 db 0FFh
.eh_frame:0000000000018C6B                 db 0FFh
.eh_frame:0000000000018C6C                 db  77h ; w
.eh_frame:0000000000018C6D                 db    0
.eh_frame:0000000000018C6E                 db    0
.eh_frame:0000000000018C6F                 db    0
.eh_frame:0000000000018C70                 db    0
.eh_frame:0000000000018C71                 db    0
.eh_frame:0000000000018C72                 db    0
.eh_frame:0000000000018C73                 db    0
.eh_frame:0000000000018C74                 db  5Ch ; \
.eh_frame:0000000000018C75                 db    0
.eh_frame:0000000000018C76                 db    0
.eh_frame:0000000000018C77                 db    0
.eh_frame:0000000000018C78                 db 0D8h
.eh_frame:0000000000018C79                 db  0Eh
.eh_frame:0000000000018C7A                 db    0
.eh_frame:0000000000018C7B                 db    0
.eh_frame:0000000000018C7C                 db  94h
.eh_frame:0000000000018C7D                 db  2Dh ; -
.eh_frame:0000000000018C7E                 db 0FFh
.eh_frame:0000000000018C7F                 db 0FFh
.eh_frame:0000000000018C80                 db  40h ; @
.eh_frame:0000000000018C81                 db    1
.eh_frame:0000000000018C82                 db    0
.eh_frame:0000000000018C83                 db    0
.eh_frame:0000000000018C84                 db    0
.eh_frame:0000000000018C85                 db  42h ; B
.eh_frame:0000000000018C86                 db  0Eh
.eh_frame:0000000000018C87                 db  10h
.eh_frame:0000000000018C88                 db  8Fh
.eh_frame:0000000000018C89                 db    2
.eh_frame:0000000000018C8A                 db  42h ; B
.eh_frame:0000000000018C8B                 db  0Eh
.eh_frame:0000000000018C8C                 db  18h
.eh_frame:0000000000018C8D                 db  8Eh
.eh_frame:0000000000018C8E                 db    3
.eh_frame:0000000000018C8F                 db  42h ; B
.eh_frame:0000000000018C90                 db  0Eh
.eh_frame:0000000000018C91                 db  20h
.eh_frame:0000000000018C92                 db  8Dh
.eh_frame:0000000000018C93                 db    4
.eh_frame:0000000000018C94                 db  42h ; B
.eh_frame:0000000000018C95                 db  0Eh
.eh_frame:0000000000018C96                 db  28h ; (
.eh_frame:0000000000018C97                 db  8Ch
.eh_frame:0000000000018C98                 db    5
.eh_frame:0000000000018C99                 db  41h ; A
.eh_frame:0000000000018C9A                 db  0Eh
.eh_frame:0000000000018C9B                 db  30h ; 0
.eh_frame:0000000000018C9C                 db  86h
.eh_frame:0000000000018C9D                 db    6
.eh_frame:0000000000018C9E                 db  41h ; A
.eh_frame:0000000000018C9F                 db  0Eh
.eh_frame:0000000000018CA0                 db  38h ; 8
.eh_frame:0000000000018CA1                 db  83h
.eh_frame:0000000000018CA2                 db    7
.eh_frame:0000000000018CA3                 db  44h ; D
.eh_frame:0000000000018CA4                 db  0Eh
.eh_frame:0000000000018CA5                 db  40h ; @
.eh_frame:0000000000018CA6                 db    2
.eh_frame:0000000000018CA7                 db 0EEh
.eh_frame:0000000000018CA8                 db  0Ah
.eh_frame:0000000000018CA9                 db  0Eh
.eh_frame:0000000000018CAA                 db  38h ; 8
.eh_frame:0000000000018CAB                 db  46h ; F
.eh_frame:0000000000018CAC                 db  0Eh
.eh_frame:0000000000018CAD                 db  30h ; 0
.eh_frame:0000000000018CAE                 db  41h ; A
.eh_frame:0000000000018CAF                 db  0Eh
.eh_frame:0000000000018CB0                 db  28h ; (
.eh_frame:0000000000018CB1                 db  42h ; B
.eh_frame:0000000000018CB2                 db  0Eh
.eh_frame:0000000000018CB3                 db  20h
.eh_frame:0000000000018CB4                 db  42h ; B
.eh_frame:0000000000018CB5                 db  0Eh
.eh_frame:0000000000018CB6                 db  18h
.eh_frame:0000000000018CB7                 db  42h ; B
.eh_frame:0000000000018CB8                 db  0Eh
.eh_frame:0000000000018CB9                 db  10h
.eh_frame:0000000000018CBA                 db  42h ; B
.eh_frame:0000000000018CBB                 db  0Eh
.eh_frame:0000000000018CBC                 db    8
.eh_frame:0000000000018CBD                 db  45h ; E
.eh_frame:0000000000018CBE                 db  0Bh
.eh_frame:0000000000018CBF                 db  63h ; c
.eh_frame:0000000000018CC0                 db  0Eh
.eh_frame:0000000000018CC1                 db  38h ; 8
.eh_frame:0000000000018CC2                 db  43h ; C
.eh_frame:0000000000018CC3                 db  0Eh
.eh_frame:0000000000018CC4                 db  30h ; 0
.eh_frame:0000000000018CC5                 db  41h ; A
.eh_frame:0000000000018CC6                 db  0Eh
.eh_frame:0000000000018CC7                 db  28h ; (
.eh_frame:0000000000018CC8                 db  42h ; B
.eh_frame:0000000000018CC9                 db  0Eh
.eh_frame:0000000000018CCA                 db  20h
.eh_frame:0000000000018CCB                 db  42h ; B
.eh_frame:0000000000018CCC                 db  0Eh
.eh_frame:0000000000018CCD                 db  18h
.eh_frame:0000000000018CCE                 db  42h ; B
.eh_frame:0000000000018CCF                 db  0Eh
.eh_frame:0000000000018CD0                 db  10h
.eh_frame:0000000000018CD1                 db  42h ; B
.eh_frame:0000000000018CD2                 db  0Eh
.eh_frame:0000000000018CD3                 db    8
.eh_frame:0000000000018CD4                 db  10h
.eh_frame:0000000000018CD5                 db    0
.eh_frame:0000000000018CD6                 db    0
.eh_frame:0000000000018CD7                 db    0
.eh_frame:0000000000018CD8                 db  38h ; 8
.eh_frame:0000000000018CD9                 db  0Fh
.eh_frame:0000000000018CDA                 db    0
.eh_frame:0000000000018CDB                 db    0
.eh_frame:0000000000018CDC                 db  74h ; t
.eh_frame:0000000000018CDD                 db  2Eh ; .
.eh_frame:0000000000018CDE                 db 0FFh
.eh_frame:0000000000018CDF                 db 0FFh
.eh_frame:0000000000018CE0                 db    5
.eh_frame:0000000000018CE1                 db    0
.eh_frame:0000000000018CE2                 db    0
.eh_frame:0000000000018CE3                 db    0
.eh_frame:0000000000018CE4                 db    0
.eh_frame:0000000000018CE5                 db    0
.eh_frame:0000000000018CE6                 db    0
.eh_frame:0000000000018CE7                 db    0
.eh_frame:0000000000018CE8                 db  10h
.eh_frame:0000000000018CE9                 db    0
.eh_frame:0000000000018CEA                 db    0
.eh_frame:0000000000018CEB                 db    0
.eh_frame:0000000000018CEC                 db  4Ch ; L
.eh_frame:0000000000018CED                 db  0Fh
.eh_frame:0000000000018CEE                 db    0
.eh_frame:0000000000018CEF                 db    0
.eh_frame:0000000000018CF0                 db  70h ; p
.eh_frame:0000000000018CF1                 db  2Eh ; .
.eh_frame:0000000000018CF2                 db 0FFh
.eh_frame:0000000000018CF3                 db 0FFh
.eh_frame:0000000000018CF4                 db    5
.eh_frame:0000000000018CF5                 db    0
.eh_frame:0000000000018CF6                 db    0
.eh_frame:0000000000018CF7                 db    0
.eh_frame:0000000000018CF8                 db    0
.eh_frame:0000000000018CF9                 db    0
.eh_frame:0000000000018CFA                 db    0
.eh_frame:0000000000018CFB                 db    0
.eh_frame:0000000000018CFC                 db  10h
.eh_frame:0000000000018CFD                 db    0
.eh_frame:0000000000018CFE                 db    0
.eh_frame:0000000000018CFF                 db    0
.eh_frame:0000000000018D00                 db  60h ; `
.eh_frame:0000000000018D01                 db  0Fh
.eh_frame:0000000000018D02                 db    0
.eh_frame:0000000000018D03                 db    0
.eh_frame:0000000000018D04                 db  6Ch ; l
.eh_frame:0000000000018D05                 db  2Eh ; .
.eh_frame:0000000000018D06                 db 0FFh
.eh_frame:0000000000018D07                 db 0FFh
.eh_frame:0000000000018D08                 db    5
.eh_frame:0000000000018D09                 db    0
.eh_frame:0000000000018D0A                 db    0
.eh_frame:0000000000018D0B                 db    0
.eh_frame:0000000000018D0C                 db    0
.eh_frame:0000000000018D0D                 db    0
.eh_frame:0000000000018D0E                 db    0
.eh_frame:0000000000018D0F                 db    0
.eh_frame:0000000000018D10                 db  10h
.eh_frame:0000000000018D11                 db    0
.eh_frame:0000000000018D12                 db    0
.eh_frame:0000000000018D13                 db    0
.eh_frame:0000000000018D14                 db  74h ; t
.eh_frame:0000000000018D15                 db  0Fh
.eh_frame:0000000000018D16                 db    0
.eh_frame:0000000000018D17                 db    0
.eh_frame:0000000000018D18                 db  68h ; h
.eh_frame:0000000000018D19                 db  2Eh ; .
.eh_frame:0000000000018D1A                 db 0FFh
.eh_frame:0000000000018D1B                 db 0FFh
.eh_frame:0000000000018D1C                 db  49h ; I
.eh_frame:0000000000018D1D                 db    0
.eh_frame:0000000000018D1E                 db    0
.eh_frame:0000000000018D1F                 db    0
.eh_frame:0000000000018D20                 db    0
.eh_frame:0000000000018D21                 db    0
.eh_frame:0000000000018D22                 db    0
.eh_frame:0000000000018D23                 db    0
.eh_frame:0000000000018D24                 db  10h
.eh_frame:0000000000018D25                 db    0
.eh_frame:0000000000018D26                 db    0
.eh_frame:0000000000018D27                 db    0
.eh_frame:0000000000018D28                 db  88h
.eh_frame:0000000000018D29                 db  0Fh
.eh_frame:0000000000018D2A                 db    0
.eh_frame:0000000000018D2B                 db    0
.eh_frame:0000000000018D2C                 db 0A4h
.eh_frame:0000000000018D2D                 db  2Eh ; .
.eh_frame:0000000000018D2E                 db 0FFh
.eh_frame:0000000000018D2F                 db 0FFh
.eh_frame:0000000000018D30                 db  58h ; X
.eh_frame:0000000000018D31                 db    0
.eh_frame:0000000000018D32                 db    0
.eh_frame:0000000000018D33                 db    0
.eh_frame:0000000000018D34                 db    0
.eh_frame:0000000000018D35                 db    0
.eh_frame:0000000000018D36                 db    0
.eh_frame:0000000000018D37                 db    0
.eh_frame:0000000000018D38                 db  38h ; 8
.eh_frame:0000000000018D39                 db    0
.eh_frame:0000000000018D3A                 db    0
.eh_frame:0000000000018D3B                 db    0
.eh_frame:0000000000018D3C                 db  9Ch
.eh_frame:0000000000018D3D                 db  0Fh
.eh_frame:0000000000018D3E                 db    0
.eh_frame:0000000000018D3F                 db    0
.eh_frame:0000000000018D40                 db 0F0h
.eh_frame:0000000000018D41                 db  2Eh ; .
.eh_frame:0000000000018D42                 db 0FFh
.eh_frame:0000000000018D43                 db 0FFh
.eh_frame:0000000000018D44                 db  47h ; G
.eh_frame:0000000000018D45                 db    1
.eh_frame:0000000000018D46                 db    0
.eh_frame:0000000000018D47                 db    0
.eh_frame:0000000000018D48                 db    0
.eh_frame:0000000000018D49                 db  42h ; B
.eh_frame:0000000000018D4A                 db  0Eh
.eh_frame:0000000000018D4B                 db  10h
.eh_frame:0000000000018D4C                 db  8Dh
.eh_frame:0000000000018D4D                 db    2
.eh_frame:0000000000018D4E                 db  42h ; B
.eh_frame:0000000000018D4F                 db  0Eh
.eh_frame:0000000000018D50                 db  18h
.eh_frame:0000000000018D51                 db  8Ch
.eh_frame:0000000000018D52                 db    3
.eh_frame:0000000000018D53                 db  44h ; D
.eh_frame:0000000000018D54                 db  0Eh
.eh_frame:0000000000018D55                 db  20h
.eh_frame:0000000000018D56                 db  86h
.eh_frame:0000000000018D57                 db    4
.eh_frame:0000000000018D58                 db  41h ; A
.eh_frame:0000000000018D59                 db  0Eh
.eh_frame:0000000000018D5A                 db  28h ; (
.eh_frame:0000000000018D5B                 db  83h
.eh_frame:0000000000018D5C                 db    5
.eh_frame:0000000000018D5D                 db  46h ; F
.eh_frame:0000000000018D5E                 db  0Eh
.eh_frame:0000000000018D5F                 db  30h ; 0
.eh_frame:0000000000018D60                 db    2
.eh_frame:0000000000018D61                 db 0CDh
.eh_frame:0000000000018D62                 db  0Ah
.eh_frame:0000000000018D63                 db  0Eh
.eh_frame:0000000000018D64                 db  28h ; (
.eh_frame:0000000000018D65                 db  47h ; G
.eh_frame:0000000000018D66                 db  0Eh
.eh_frame:0000000000018D67                 db  20h
.eh_frame:0000000000018D68                 db  41h ; A
.eh_frame:0000000000018D69                 db  0Eh
.eh_frame:0000000000018D6A                 db  18h
.eh_frame:0000000000018D6B                 db  42h ; B
.eh_frame:0000000000018D6C                 db  0Eh
.eh_frame:0000000000018D6D                 db  10h
.eh_frame:0000000000018D6E                 db  42h ; B
.eh_frame:0000000000018D6F                 db  0Eh
.eh_frame:0000000000018D70                 db    8
.eh_frame:0000000000018D71                 db  58h ; X
.eh_frame:0000000000018D72                 db  0Bh
.eh_frame:0000000000018D73                 db    0
.eh_frame:0000000000018D74                 db  34h ; 4
.eh_frame:0000000000018D75                 db    0
.eh_frame:0000000000018D76                 db    0
.eh_frame:0000000000018D77                 db    0
.eh_frame:0000000000018D78                 db 0D8h
.eh_frame:0000000000018D79                 db  0Fh
.eh_frame:0000000000018D7A                 db    0
.eh_frame:0000000000018D7B                 db    0
.eh_frame:0000000000018D7C                 db    4
.eh_frame:0000000000018D7D                 db  30h ; 0
.eh_frame:0000000000018D7E                 db 0FFh
.eh_frame:0000000000018D7F                 db 0FFh
.eh_frame:0000000000018D80                 db  5Bh ; [
.eh_frame:0000000000018D81                 db    0
.eh_frame:0000000000018D82                 db    0
.eh_frame:0000000000018D83                 db    0
.eh_frame:0000000000018D84                 db    0
.eh_frame:0000000000018D85                 db  42h ; B
.eh_frame:0000000000018D86                 db  0Eh
.eh_frame:0000000000018D87                 db  10h
.eh_frame:0000000000018D88                 db  8Ch
.eh_frame:0000000000018D89                 db    2
.eh_frame:0000000000018D8A                 db  41h ; A
.eh_frame:0000000000018D8B                 db  0Eh
.eh_frame:0000000000018D8C                 db  18h
.eh_frame:0000000000018D8D                 db  86h
.eh_frame:0000000000018D8E                 db    3
.eh_frame:0000000000018D8F                 db  44h ; D
.eh_frame:0000000000018D90                 db  0Eh
.eh_frame:0000000000018D91                 db  20h
.eh_frame:0000000000018D92                 db  83h
.eh_frame:0000000000018D93                 db    4
.eh_frame:0000000000018D94                 db  79h ; y
.eh_frame:0000000000018D95                 db  0Ah
.eh_frame:0000000000018D96                 db  0Eh
.eh_frame:0000000000018D97                 db  18h
.eh_frame:0000000000018D98                 db  44h ; D
.eh_frame:0000000000018D99                 db  0Eh
.eh_frame:0000000000018D9A                 db  10h
.eh_frame:0000000000018D9B                 db  42h ; B
.eh_frame:0000000000018D9C                 db  0Eh
.eh_frame:0000000000018D9D                 db    8
.eh_frame:0000000000018D9E                 db  4Ah ; J
.eh_frame:0000000000018D9F                 db  0Bh
.eh_frame:0000000000018DA0                 db  44h ; D
.eh_frame:0000000000018DA1                 db  0Eh
.eh_frame:0000000000018DA2                 db  18h
.eh_frame:0000000000018DA3                 db  41h ; A
.eh_frame:0000000000018DA4                 db  0Eh
.eh_frame:0000000000018DA5                 db  10h
.eh_frame:0000000000018DA6                 db  45h ; E
.eh_frame:0000000000018DA7                 db  0Eh
.eh_frame:0000000000018DA8                 db    8
.eh_frame:0000000000018DA9                 db    0
.eh_frame:0000000000018DAA                 db    0
.eh_frame:0000000000018DAB                 db    0
.eh_frame:0000000000018DAC                 db  10h
.eh_frame:0000000000018DAD                 db    0
.eh_frame:0000000000018DAE                 db    0
.eh_frame:0000000000018DAF                 db    0
.eh_frame:0000000000018DB0                 db  10h
.eh_frame:0000000000018DB1                 db  10h
.eh_frame:0000000000018DB2                 db    0
.eh_frame:0000000000018DB3                 db    0
.eh_frame:0000000000018DB4                 db  2Ch ; ,
.eh_frame:0000000000018DB5                 db  30h ; 0
.eh_frame:0000000000018DB6                 db 0FFh
.eh_frame:0000000000018DB7                 db 0FFh
.eh_frame:0000000000018DB8                 db  41h ; A
.eh_frame:0000000000018DB9                 db    0
.eh_frame:0000000000018DBA                 db    0
.eh_frame:0000000000018DBB                 db    0
.eh_frame:0000000000018DBC                 db    0
.eh_frame:0000000000018DBD                 db  7Ch ; |
.eh_frame:0000000000018DBE                 db  0Eh
.eh_frame:0000000000018DBF                 db  10h
.eh_frame:0000000000018DC0                 db  30h ; 0
.eh_frame:0000000000018DC1                 db    0
.eh_frame:0000000000018DC2                 db    0
.eh_frame:0000000000018DC3                 db    0
.eh_frame:0000000000018DC4                 db  24h ; $
.eh_frame:0000000000018DC5                 db  10h
.eh_frame:0000000000018DC6                 db    0
.eh_frame:0000000000018DC7                 db    0
.eh_frame:0000000000018DC8                 db  68h ; h
.eh_frame:0000000000018DC9                 db  30h ; 0
.eh_frame:0000000000018DCA                 db 0FFh
.eh_frame:0000000000018DCB                 db 0FFh
.eh_frame:0000000000018DCC                 db  72h ; r
.eh_frame:0000000000018DCD                 db    0
.eh_frame:0000000000018DCE                 db    0
.eh_frame:0000000000018DCF                 db    0
.eh_frame:0000000000018DD0                 db    0
.eh_frame:0000000000018DD1                 db  41h ; A
.eh_frame:0000000000018DD2                 db  0Eh
.eh_frame:0000000000018DD3                 db  10h
.eh_frame:0000000000018DD4                 db  86h
.eh_frame:0000000000018DD5                 db    2
.eh_frame:0000000000018DD6                 db  41h ; A
.eh_frame:0000000000018DD7                 db  0Eh
.eh_frame:0000000000018DD8                 db  18h
.eh_frame:0000000000018DD9                 db  83h
.eh_frame:0000000000018DDA                 db    3
.eh_frame:0000000000018DDB                 db  4Ah ; J
.eh_frame:0000000000018DDC                 db  0Eh
.eh_frame:0000000000018DDD                 db  20h
.eh_frame:0000000000018DDE                 db    2
.eh_frame:0000000000018DDF                 db  53h ; S
.eh_frame:0000000000018DE0                 db  0Ah
.eh_frame:0000000000018DE1                 db  0Eh
.eh_frame:0000000000018DE2                 db  18h
.eh_frame:0000000000018DE3                 db  41h ; A
.eh_frame:0000000000018DE4                 db  0Eh
.eh_frame:0000000000018DE5                 db  10h
.eh_frame:0000000000018DE6                 db  41h ; A
.eh_frame:0000000000018DE7                 db  0Eh
.eh_frame:0000000000018DE8                 db    8
.eh_frame:0000000000018DE9                 db  47h ; G
.eh_frame:0000000000018DEA                 db  0Bh
.eh_frame:0000000000018DEB                 db  47h ; G
.eh_frame:0000000000018DEC                 db  0Eh
.eh_frame:0000000000018DED                 db  18h
.eh_frame:0000000000018DEE                 db  41h ; A
.eh_frame:0000000000018DEF                 db  0Eh
.eh_frame:0000000000018DF0                 db  10h
.eh_frame:0000000000018DF1                 db  41h ; A
.eh_frame:0000000000018DF2                 db  0Eh
.eh_frame:0000000000018DF3                 db    8
.eh_frame:0000000000018DF4                 db  10h
.eh_frame:0000000000018DF5                 db    0
.eh_frame:0000000000018DF6                 db    0
.eh_frame:0000000000018DF7                 db    0
.eh_frame:0000000000018DF8                 db  58h ; X
.eh_frame:0000000000018DF9                 db  10h
.eh_frame:0000000000018DFA                 db    0
.eh_frame:0000000000018DFB                 db    0
.eh_frame:0000000000018DFC                 db 0B4h
.eh_frame:0000000000018DFD                 db  30h ; 0
.eh_frame:0000000000018DFE                 db 0FFh
.eh_frame:0000000000018DFF                 db 0FFh
.eh_frame:0000000000018E00                 db  65h ; e
.eh_frame:0000000000018E01                 db    0
.eh_frame:0000000000018E02                 db    0
.eh_frame:0000000000018E03                 db    0
.eh_frame:0000000000018E04                 db    0
.eh_frame:0000000000018E05                 db    0
.eh_frame:0000000000018E06                 db    0
.eh_frame:0000000000018E07                 db    0
.eh_frame:0000000000018E08                 db  48h ; H
.eh_frame:0000000000018E09                 db    0
.eh_frame:0000000000018E0A                 db    0
.eh_frame:0000000000018E0B                 db    0
.eh_frame:0000000000018E0C                 db  6Ch ; l
.eh_frame:0000000000018E0D                 db  10h
.eh_frame:0000000000018E0E                 db    0
.eh_frame:0000000000018E0F                 db    0
.eh_frame:0000000000018E10                 db  10h
.eh_frame:0000000000018E11                 db  31h ; 1
.eh_frame:0000000000018E12                 db 0FFh
.eh_frame:0000000000018E13                 db 0FFh
.eh_frame:0000000000018E14                 db  6Ah ; j
.eh_frame:0000000000018E15                 db    0
.eh_frame:0000000000018E16                 db    0
.eh_frame:0000000000018E17                 db    0
.eh_frame:0000000000018E18                 db    0
.eh_frame:0000000000018E19                 db  42h ; B
.eh_frame:0000000000018E1A                 db  0Eh
.eh_frame:0000000000018E1B                 db  10h
.eh_frame:0000000000018E1C                 db  8Fh
.eh_frame:0000000000018E1D                 db    2
.eh_frame:0000000000018E1E                 db  42h ; B
.eh_frame:0000000000018E1F                 db  0Eh
.eh_frame:0000000000018E20                 db  18h
.eh_frame:0000000000018E21                 db  8Eh
.eh_frame:0000000000018E22                 db    3
.eh_frame:0000000000018E23                 db  42h ; B
.eh_frame:0000000000018E24                 db  0Eh
.eh_frame:0000000000018E25                 db  20h
.eh_frame:0000000000018E26                 db  8Dh
.eh_frame:0000000000018E27                 db    4
.eh_frame:0000000000018E28                 db  42h ; B
.eh_frame:0000000000018E29                 db  0Eh
.eh_frame:0000000000018E2A                 db  28h ; (
.eh_frame:0000000000018E2B                 db  8Ch
.eh_frame:0000000000018E2C                 db    5
.eh_frame:0000000000018E2D                 db  41h ; A
.eh_frame:0000000000018E2E                 db  0Eh
.eh_frame:0000000000018E2F                 db  30h ; 0
.eh_frame:0000000000018E30                 db  86h
.eh_frame:0000000000018E31                 db    6
.eh_frame:0000000000018E32                 db  41h ; A
.eh_frame:0000000000018E33                 db  0Eh
.eh_frame:0000000000018E34                 db  38h ; 8
.eh_frame:0000000000018E35                 db  83h
.eh_frame:0000000000018E36                 db    7
.eh_frame:0000000000018E37                 db  44h ; D
.eh_frame:0000000000018E38                 db  0Eh
.eh_frame:0000000000018E39                 db  40h ; @
.eh_frame:0000000000018E3A                 db    2
.eh_frame:0000000000018E3B                 db  4Ah ; J
.eh_frame:0000000000018E3C                 db  0Ah
.eh_frame:0000000000018E3D                 db  0Eh
.eh_frame:0000000000018E3E                 db  38h ; 8
.eh_frame:0000000000018E3F                 db  44h ; D
.eh_frame:0000000000018E40                 db  0Eh
.eh_frame:0000000000018E41                 db  30h ; 0
.eh_frame:0000000000018E42                 db  41h ; A
.eh_frame:0000000000018E43                 db  0Eh
.eh_frame:0000000000018E44                 db  28h ; (
.eh_frame:0000000000018E45                 db  42h ; B
.eh_frame:0000000000018E46                 db  0Eh
.eh_frame:0000000000018E47                 db  20h
.eh_frame:0000000000018E48                 db  42h ; B
.eh_frame:0000000000018E49                 db  0Eh
.eh_frame:0000000000018E4A                 db  18h
.eh_frame:0000000000018E4B                 db  42h ; B
.eh_frame:0000000000018E4C                 db  0Eh
.eh_frame:0000000000018E4D                 db  10h
.eh_frame:0000000000018E4E                 db  42h ; B
.eh_frame:0000000000018E4F                 db  0Eh
.eh_frame:0000000000018E50                 db    8
.eh_frame:0000000000018E51                 db  41h ; A
.eh_frame:0000000000018E52                 db  0Bh
.eh_frame:0000000000018E53                 db    0
.eh_frame:0000000000018E54                 db  10h
.eh_frame:0000000000018E55                 db    0
.eh_frame:0000000000018E56                 db    0
.eh_frame:0000000000018E57                 db    0
.eh_frame:0000000000018E58                 db 0B8h
.eh_frame:0000000000018E59                 db  10h
.eh_frame:0000000000018E5A                 db    0
.eh_frame:0000000000018E5B                 db    0
.eh_frame:0000000000018E5C                 db  34h ; 4
.eh_frame:0000000000018E5D                 db  31h ; 1
.eh_frame:0000000000018E5E                 db 0FFh
.eh_frame:0000000000018E5F                 db 0FFh
.eh_frame:0000000000018E60                 db  31h ; 1
.eh_frame:0000000000018E61                 db    0
.eh_frame:0000000000018E62                 db    0
.eh_frame:0000000000018E63                 db    0
.eh_frame:0000000000018E64                 db    0
.eh_frame:0000000000018E65                 db    0
.eh_frame:0000000000018E66                 db    0
.eh_frame:0000000000018E67                 db    0
.eh_frame:0000000000018E68                 db  10h
.eh_frame:0000000000018E69                 db    0
.eh_frame:0000000000018E6A                 db    0
.eh_frame:0000000000018E6B                 db    0
.eh_frame:0000000000018E6C                 db 0CCh
.eh_frame:0000000000018E6D                 db  10h
.eh_frame:0000000000018E6E                 db    0
.eh_frame:0000000000018E6F                 db    0
.eh_frame:0000000000018E70                 db  60h ; `
.eh_frame:0000000000018E71                 db  31h ; 1
.eh_frame:0000000000018E72                 db 0FFh
.eh_frame:0000000000018E73                 db 0FFh
.eh_frame:0000000000018E74                 db  20h
.eh_frame:0000000000018E75                 db    0
.eh_frame:0000000000018E76                 db    0
.eh_frame:0000000000018E77                 db    0
.eh_frame:0000000000018E78                 db    0
.eh_frame:0000000000018E79                 db    0
.eh_frame:0000000000018E7A                 db    0
.eh_frame:0000000000018E7B                 db    0
.eh_frame:0000000000018E7C                 db  48h ; H
.eh_frame:0000000000018E7D                 db    0
.eh_frame:0000000000018E7E                 db    0
.eh_frame:0000000000018E7F                 db    0
.eh_frame:0000000000018E80                 db 0E0h
.eh_frame:0000000000018E81                 db  10h
.eh_frame:0000000000018E82                 db    0
.eh_frame:0000000000018E83                 db    0
.eh_frame:0000000000018E84                 db  6Ch ; l
.eh_frame:0000000000018E85                 db  31h ; 1
.eh_frame:0000000000018E86                 db 0FFh
.eh_frame:0000000000018E87                 db 0FFh
.eh_frame:0000000000018E88                 db 0B4h
.eh_frame:0000000000018E89                 db    1
.eh_frame:0000000000018E8A                 db    0
.eh_frame:0000000000018E8B                 db    0
.eh_frame:0000000000018E8C                 db    0
.eh_frame:0000000000018E8D                 db  42h ; B
.eh_frame:0000000000018E8E                 db  0Eh
.eh_frame:0000000000018E8F                 db  10h
.eh_frame:0000000000018E90                 db  8Fh
.eh_frame:0000000000018E91                 db    2
.eh_frame:0000000000018E92                 db  42h ; B
.eh_frame:0000000000018E93                 db  0Eh
.eh_frame:0000000000018E94                 db  18h
.eh_frame:0000000000018E95                 db  8Eh
.eh_frame:0000000000018E96                 db    3
.eh_frame:0000000000018E97                 db  49h ; I
.eh_frame:0000000000018E98                 db  0Eh
.eh_frame:0000000000018E99                 db  20h
.eh_frame:0000000000018E9A                 db  8Dh
.eh_frame:0000000000018E9B                 db    4
.eh_frame:0000000000018E9C                 db  42h ; B
.eh_frame:0000000000018E9D                 db  0Eh
.eh_frame:0000000000018E9E                 db  28h ; (
.eh_frame:0000000000018E9F                 db  8Ch
.eh_frame:0000000000018EA0                 db    5
.eh_frame:0000000000018EA1                 db  44h ; D
.eh_frame:0000000000018EA2                 db  0Eh
.eh_frame:0000000000018EA3                 db  30h ; 0
.eh_frame:0000000000018EA4                 db  86h
.eh_frame:0000000000018EA5                 db    6
.eh_frame:0000000000018EA6                 db  41h ; A
.eh_frame:0000000000018EA7                 db  0Eh
.eh_frame:0000000000018EA8                 db  38h ; 8
.eh_frame:0000000000018EA9                 db  83h
.eh_frame:0000000000018EAA                 db    7
.eh_frame:0000000000018EAB                 db  52h ; R
.eh_frame:0000000000018EAC                 db  0Eh
.eh_frame:0000000000018EAD                 db  40h ; @
.eh_frame:0000000000018EAE                 db    2
.eh_frame:0000000000018EAF                 db 0D8h
.eh_frame:0000000000018EB0                 db  0Ah
.eh_frame:0000000000018EB1                 db  0Eh
.eh_frame:0000000000018EB2                 db  38h ; 8
.eh_frame:0000000000018EB3                 db  44h ; D
.eh_frame:0000000000018EB4                 db  0Eh
.eh_frame:0000000000018EB5                 db  30h ; 0
.eh_frame:0000000000018EB6                 db  41h ; A
.eh_frame:0000000000018EB7                 db  0Eh
.eh_frame:0000000000018EB8                 db  28h ; (
.eh_frame:0000000000018EB9                 db  42h ; B
.eh_frame:0000000000018EBA                 db  0Eh
.eh_frame:0000000000018EBB                 db  20h
.eh_frame:0000000000018EBC                 db  42h ; B
.eh_frame:0000000000018EBD                 db  0Eh
.eh_frame:0000000000018EBE                 db  18h
.eh_frame:0000000000018EBF                 db  42h ; B
.eh_frame:0000000000018EC0                 db  0Eh
.eh_frame:0000000000018EC1                 db  10h
.eh_frame:0000000000018EC2                 db  42h ; B
.eh_frame:0000000000018EC3                 db  0Eh
.eh_frame:0000000000018EC4                 db    8
.eh_frame:0000000000018EC5                 db  45h ; E
.eh_frame:0000000000018EC6                 db  0Bh
.eh_frame:0000000000018EC7                 db    0
.eh_frame:0000000000018EC8                 db  28h ; (
.eh_frame:0000000000018EC9                 db    0
.eh_frame:0000000000018ECA                 db    0
.eh_frame:0000000000018ECB                 db    0
.eh_frame:0000000000018ECC                 db  2Ch ; ,
.eh_frame:0000000000018ECD                 db  11h
.eh_frame:0000000000018ECE                 db    0
.eh_frame:0000000000018ECF                 db    0
.eh_frame:0000000000018ED0                 db 0E0h
.eh_frame:0000000000018ED1                 db  32h ; 2
.eh_frame:0000000000018ED2                 db 0FFh
.eh_frame:0000000000018ED3                 db 0FFh
.eh_frame:0000000000018ED4                 db  90h
.eh_frame:0000000000018ED5                 db    0
.eh_frame:0000000000018ED6                 db    0
.eh_frame:0000000000018ED7                 db    0
.eh_frame:0000000000018ED8                 db    0
.eh_frame:0000000000018ED9                 db  42h ; B
.eh_frame:0000000000018EDA                 db  0Eh
.eh_frame:0000000000018EDB                 db  10h
.eh_frame:0000000000018EDC                 db  8Ch
.eh_frame:0000000000018EDD                 db    2
.eh_frame:0000000000018EDE                 db  41h ; A
.eh_frame:0000000000018EDF                 db  0Eh
.eh_frame:0000000000018EE0                 db  18h
.eh_frame:0000000000018EE1                 db  86h
.eh_frame:0000000000018EE2                 db    3
.eh_frame:0000000000018EE3                 db  44h ; D
.eh_frame:0000000000018EE4                 db  0Eh
.eh_frame:0000000000018EE5                 db  20h
.eh_frame:0000000000018EE6                 db  83h
.eh_frame:0000000000018EE7                 db    4
.eh_frame:0000000000018EE8                 db    2
.eh_frame:0000000000018EE9                 db  85h
.eh_frame:0000000000018EEA                 db  0Eh
.eh_frame:0000000000018EEB                 db  18h
.eh_frame:0000000000018EEC                 db  41h ; A
.eh_frame:0000000000018EED                 db  0Eh
.eh_frame:0000000000018EEE                 db  10h
.eh_frame:0000000000018EEF                 db  42h ; B
.eh_frame:0000000000018EF0                 db  0Eh
.eh_frame:0000000000018EF1                 db    8
.eh_frame:0000000000018EF2                 db    0
.eh_frame:0000000000018EF3                 db    0
.eh_frame:0000000000018EF4                 db  28h ; (
.eh_frame:0000000000018EF5                 db    0
.eh_frame:0000000000018EF6                 db    0
.eh_frame:0000000000018EF7                 db    0
.eh_frame:0000000000018EF8                 db  58h ; X
.eh_frame:0000000000018EF9                 db  11h
.eh_frame:0000000000018EFA                 db    0
.eh_frame:0000000000018EFB                 db    0
.eh_frame:0000000000018EFC                 db  44h ; D
.eh_frame:0000000000018EFD                 db  33h ; 3
.eh_frame:0000000000018EFE                 db 0FFh
.eh_frame:0000000000018EFF                 db 0FFh
.eh_frame:0000000000018F00                 db 0D6h
.eh_frame:0000000000018F01                 db    0
.eh_frame:0000000000018F02                 db    0
.eh_frame:0000000000018F03                 db    0
.eh_frame:0000000000018F04                 db    0
.eh_frame:0000000000018F05                 db  42h ; B
.eh_frame:0000000000018F06                 db  0Eh
.eh_frame:0000000000018F07                 db  10h
.eh_frame:0000000000018F08                 db  8Ch
.eh_frame:0000000000018F09                 db    2
.eh_frame:0000000000018F0A                 db  41h ; A
.eh_frame:0000000000018F0B                 db  0Eh
.eh_frame:0000000000018F0C                 db  18h
.eh_frame:0000000000018F0D                 db  86h
.eh_frame:0000000000018F0E                 db    3
.eh_frame:0000000000018F0F                 db  44h ; D
.eh_frame:0000000000018F10                 db  0Eh
.eh_frame:0000000000018F11                 db  20h
.eh_frame:0000000000018F12                 db  83h
.eh_frame:0000000000018F13                 db    4
.eh_frame:0000000000018F14                 db    2
.eh_frame:0000000000018F15                 db 0C4h
.eh_frame:0000000000018F16                 db  0Eh
.eh_frame:0000000000018F17                 db  18h
.eh_frame:0000000000018F18                 db  44h ; D
.eh_frame:0000000000018F19                 db  0Eh
.eh_frame:0000000000018F1A                 db  10h
.eh_frame:0000000000018F1B                 db  42h ; B
.eh_frame:0000000000018F1C                 db  0Eh
.eh_frame:0000000000018F1D                 db    8
.eh_frame:0000000000018F1E                 db    0
.eh_frame:0000000000018F1F                 db    0
.eh_frame:0000000000018F20                 db  34h ; 4
.eh_frame:0000000000018F21                 db    0
.eh_frame:0000000000018F22                 db    0
.eh_frame:0000000000018F23                 db    0
.eh_frame:0000000000018F24                 db  84h
.eh_frame:0000000000018F25                 db  11h
.eh_frame:0000000000018F26                 db    0
.eh_frame:0000000000018F27                 db    0
.eh_frame:0000000000018F28                 db 0F8h
.eh_frame:0000000000018F29                 db  33h ; 3
.eh_frame:0000000000018F2A                 db 0FFh
.eh_frame:0000000000018F2B                 db 0FFh
.eh_frame:0000000000018F2C                 db  3Eh ; >
.eh_frame:0000000000018F2D                 db    2
.eh_frame:0000000000018F2E                 db    0
.eh_frame:0000000000018F2F                 db    0
.eh_frame:0000000000018F30                 db    0
.eh_frame:0000000000018F31                 db  42h ; B
.eh_frame:0000000000018F32                 db  0Eh
.eh_frame:0000000000018F33                 db  10h
.eh_frame:0000000000018F34                 db  8Ch
.eh_frame:0000000000018F35                 db    2
.eh_frame:0000000000018F36                 db  41h ; A
.eh_frame:0000000000018F37                 db  0Eh
.eh_frame:0000000000018F38                 db  18h
.eh_frame:0000000000018F39                 db  86h
.eh_frame:0000000000018F3A                 db    3
.eh_frame:0000000000018F3B                 db  44h ; D
.eh_frame:0000000000018F3C                 db  0Eh
.eh_frame:0000000000018F3D                 db  20h
.eh_frame:0000000000018F3E                 db  83h
.eh_frame:0000000000018F3F                 db    4
.eh_frame:0000000000018F40                 db  44h ; D
.eh_frame:0000000000018F41                 db  0Eh
.eh_frame:0000000000018F42                 db  80h
.eh_frame:0000000000018F43                 db    1
.eh_frame:0000000000018F44                 db    3
.eh_frame:0000000000018F45                 db  91h
.eh_frame:0000000000018F46                 db    1
.eh_frame:0000000000018F47                 db  0Ah
.eh_frame:0000000000018F48                 db  0Eh
.eh_frame:0000000000018F49                 db  20h
.eh_frame:0000000000018F4A                 db  41h ; A
.eh_frame:0000000000018F4B                 db  0Eh
.eh_frame:0000000000018F4C                 db  18h
.eh_frame:0000000000018F4D                 db  41h ; A
.eh_frame:0000000000018F4E                 db  0Eh
.eh_frame:0000000000018F4F                 db  10h
.eh_frame:0000000000018F50                 db  42h ; B
.eh_frame:0000000000018F51                 db  0Eh
.eh_frame:0000000000018F52                 db    8
.eh_frame:0000000000018F53                 db  48h ; H
.eh_frame:0000000000018F54                 db  0Bh
.eh_frame:0000000000018F55                 db    0
.eh_frame:0000000000018F56                 db    0
.eh_frame:0000000000018F57                 db    0
.eh_frame:0000000000018F58                 db  38h ; 8
.eh_frame:0000000000018F59                 db    0
.eh_frame:0000000000018F5A                 db    0
.eh_frame:0000000000018F5B                 db    0
.eh_frame:0000000000018F5C                 db 0BCh
.eh_frame:0000000000018F5D                 db  11h
.eh_frame:0000000000018F5E                 db    0
.eh_frame:0000000000018F5F                 db    0
.eh_frame:0000000000018F60                 db    0
.eh_frame:0000000000018F61                 db  36h ; 6
.eh_frame:0000000000018F62                 db 0FFh
.eh_frame:0000000000018F63                 db 0FFh
.eh_frame:0000000000018F64                 db  84h
.eh_frame:0000000000018F65                 db    2
.eh_frame:0000000000018F66                 db    0
.eh_frame:0000000000018F67                 db    0
.eh_frame:0000000000018F68                 db    0
.eh_frame:0000000000018F69                 db  42h ; B
.eh_frame:0000000000018F6A                 db  0Eh
.eh_frame:0000000000018F6B                 db  10h
.eh_frame:0000000000018F6C                 db  8Dh
.eh_frame:0000000000018F6D                 db    2
.eh_frame:0000000000018F6E                 db  42h ; B
.eh_frame:0000000000018F6F                 db  0Eh
.eh_frame:0000000000018F70                 db  18h
.eh_frame:0000000000018F71                 db  8Ch
.eh_frame:0000000000018F72                 db    3
.eh_frame:0000000000018F73                 db  41h ; A
.eh_frame:0000000000018F74                 db  0Eh
.eh_frame:0000000000018F75                 db  20h
.eh_frame:0000000000018F76                 db  86h
.eh_frame:0000000000018F77                 db    4
.eh_frame:0000000000018F78                 db  41h ; A
.eh_frame:0000000000018F79                 db  0Eh
.eh_frame:0000000000018F7A                 db  28h ; (
.eh_frame:0000000000018F7B                 db  83h
.eh_frame:0000000000018F7C                 db    5
.eh_frame:0000000000018F7D                 db  44h ; D
.eh_frame:0000000000018F7E                 db  0Eh
.eh_frame:0000000000018F7F                 db  40h ; @
.eh_frame:0000000000018F80                 db    2
.eh_frame:0000000000018F81                 db  5Ah ; Z
.eh_frame:0000000000018F82                 db  0Ah
.eh_frame:0000000000018F83                 db  0Eh
.eh_frame:0000000000018F84                 db  28h ; (
.eh_frame:0000000000018F85                 db  41h ; A
.eh_frame:0000000000018F86                 db  0Eh
.eh_frame:0000000000018F87                 db  20h
.eh_frame:0000000000018F88                 db  41h ; A
.eh_frame:0000000000018F89                 db  0Eh
.eh_frame:0000000000018F8A                 db  18h
.eh_frame:0000000000018F8B                 db  42h ; B
.eh_frame:0000000000018F8C                 db  0Eh
.eh_frame:0000000000018F8D                 db  10h
.eh_frame:0000000000018F8E                 db  42h ; B
.eh_frame:0000000000018F8F                 db  0Eh
.eh_frame:0000000000018F90                 db    8
.eh_frame:0000000000018F91                 db  46h ; F
.eh_frame:0000000000018F92                 db  0Bh
.eh_frame:0000000000018F93                 db    0
.eh_frame:0000000000018F94                 db  20h
.eh_frame:0000000000018F95                 db    0
.eh_frame:0000000000018F96                 db    0
.eh_frame:0000000000018F97                 db    0
.eh_frame:0000000000018F98                 db 0F8h
.eh_frame:0000000000018F99                 db  11h
.eh_frame:0000000000018F9A                 db    0
.eh_frame:0000000000018F9B                 db    0
.eh_frame:0000000000018F9C                 db  54h ; T
.eh_frame:0000000000018F9D                 db  38h ; 8
.eh_frame:0000000000018F9E                 db 0FFh
.eh_frame:0000000000018F9F                 db 0FFh
.eh_frame:0000000000018FA0                 db  59h ; Y
.eh_frame:0000000000018FA1                 db    0
.eh_frame:0000000000018FA2                 db    0
.eh_frame:0000000000018FA3                 db    0
.eh_frame:0000000000018FA4                 db    0
.eh_frame:0000000000018FA5                 db  41h ; A
.eh_frame:0000000000018FA6                 db  0Eh
.eh_frame:0000000000018FA7                 db  10h
.eh_frame:0000000000018FA8                 db  83h
.eh_frame:0000000000018FA9                 db    2
.eh_frame:0000000000018FAA                 db  47h ; G
.eh_frame:0000000000018FAB                 db  0Eh
.eh_frame:0000000000018FAC                 db  20h
.eh_frame:0000000000018FAD                 db  7Ch ; |
.eh_frame:0000000000018FAE                 db  0Ah
.eh_frame:0000000000018FAF                 db  0Eh
.eh_frame:0000000000018FB0                 db  10h
.eh_frame:0000000000018FB1                 db  41h ; A
.eh_frame:0000000000018FB2                 db  0Eh
.eh_frame:0000000000018FB3                 db    8
.eh_frame:0000000000018FB4                 db  4Bh ; K
.eh_frame:0000000000018FB5                 db  0Bh
.eh_frame:0000000000018FB6                 db    0
.eh_frame:0000000000018FB7                 db    0
.eh_frame:0000000000018FB8                 db  34h ; 4
.eh_frame:0000000000018FB9                 db    0
.eh_frame:0000000000018FBA                 db    0
.eh_frame:0000000000018FBB                 db    0
.eh_frame:0000000000018FBC                 db  1Ch
.eh_frame:0000000000018FBD                 db  12h
.eh_frame:0000000000018FBE                 db    0
.eh_frame:0000000000018FBF                 db    0
.eh_frame:0000000000018FC0                 db  90h
.eh_frame:0000000000018FC1                 db  38h ; 8
.eh_frame:0000000000018FC2                 db 0FFh
.eh_frame:0000000000018FC3                 db 0FFh
.eh_frame:0000000000018FC4                 db    3
.eh_frame:0000000000018FC5                 db    2
.eh_frame:0000000000018FC6                 db    0
.eh_frame:0000000000018FC7                 db    0
.eh_frame:0000000000018FC8                 db    0
.eh_frame:0000000000018FC9                 db  42h ; B
.eh_frame:0000000000018FCA                 db  0Eh
.eh_frame:0000000000018FCB                 db  10h
.eh_frame:0000000000018FCC                 db  8Ch
.eh_frame:0000000000018FCD                 db    2
.eh_frame:0000000000018FCE                 db  41h ; A
.eh_frame:0000000000018FCF                 db  0Eh
.eh_frame:0000000000018FD0                 db  18h
.eh_frame:0000000000018FD1                 db  86h
.eh_frame:0000000000018FD2                 db    3
.eh_frame:0000000000018FD3                 db  46h ; F
.eh_frame:0000000000018FD4                 db  0Eh
.eh_frame:0000000000018FD5                 db  20h
.eh_frame:0000000000018FD6                 db  83h
.eh_frame:0000000000018FD7                 db    4
.eh_frame:0000000000018FD8                 db  47h ; G
.eh_frame:0000000000018FD9                 db  0Eh
.eh_frame:0000000000018FDA                 db  30h ; 0
.eh_frame:0000000000018FDB                 db    2
.eh_frame:0000000000018FDC                 db  4Ah ; J
.eh_frame:0000000000018FDD                 db  0Ah
.eh_frame:0000000000018FDE                 db  0Eh
.eh_frame:0000000000018FDF                 db  20h
.eh_frame:0000000000018FE0                 db  41h ; A
.eh_frame:0000000000018FE1                 db  0Eh
.eh_frame:0000000000018FE2                 db  18h
.eh_frame:0000000000018FE3                 db  41h ; A
.eh_frame:0000000000018FE4                 db  0Eh
.eh_frame:0000000000018FE5                 db  10h
.eh_frame:0000000000018FE6                 db  42h ; B
.eh_frame:0000000000018FE7                 db  0Eh
.eh_frame:0000000000018FE8                 db    8
.eh_frame:0000000000018FE9                 db  42h ; B
.eh_frame:0000000000018FEA                 db  0Bh
.eh_frame:0000000000018FEB                 db    0
.eh_frame:0000000000018FEC                 db    0
.eh_frame:0000000000018FED                 db    0
.eh_frame:0000000000018FEE                 db    0
.eh_frame:0000000000018FEF                 db    0
.eh_frame:0000000000018FF0                 db  24h ; $
.eh_frame:0000000000018FF1                 db    0
.eh_frame:0000000000018FF2                 db    0
.eh_frame:0000000000018FF3                 db    0
.eh_frame:0000000000018FF4                 db  54h ; T
.eh_frame:0000000000018FF5                 db  12h
.eh_frame:0000000000018FF6                 db    0
.eh_frame:0000000000018FF7                 db    0
.eh_frame:0000000000018FF8                 db  68h ; h
.eh_frame:0000000000018FF9                 db  3Ah ; :
.eh_frame:0000000000018FFA                 db 0FFh
.eh_frame:0000000000018FFB                 db 0FFh
.eh_frame:0000000000018FFC                 db  27h ; '
.eh_frame:0000000000018FFD                 db    0
.eh_frame:0000000000018FFE                 db    0
.eh_frame:0000000000018FFF                 db    0
.eh_frame:0000000000019000                 db    0
.eh_frame:0000000000019001                 db  41h ; A
.eh_frame:0000000000019002                 db  0Eh
.eh_frame:0000000000019003                 db  10h
.eh_frame:0000000000019004                 db  86h
.eh_frame:0000000000019005                 db    2
.eh_frame:0000000000019006                 db  41h ; A
.eh_frame:0000000000019007                 db  0Eh
.eh_frame:0000000000019008                 db  18h
.eh_frame:0000000000019009                 db  83h
.eh_frame:000000000001900A                 db    3
.eh_frame:000000000001900B                 db  4Ah ; J
.eh_frame:000000000001900C                 db  0Eh
.eh_frame:000000000001900D                 db  20h
.eh_frame:000000000001900E                 db  52h ; R
.eh_frame:000000000001900F                 db  0Eh
.eh_frame:0000000000019010                 db  18h
.eh_frame:0000000000019011                 db  44h ; D
.eh_frame:0000000000019012                 db  0Eh
.eh_frame:0000000000019013                 db  10h
.eh_frame:0000000000019014                 db  41h ; A
.eh_frame:0000000000019015                 db  0Eh
.eh_frame:0000000000019016                 db    8
.eh_frame:0000000000019017                 db    0
.eh_frame:0000000000019018                 db  10h
.eh_frame:0000000000019019                 db    0
.eh_frame:000000000001901A                 db    0
.eh_frame:000000000001901B                 db    0
.eh_frame:000000000001901C                 db  7Ch ; |
.eh_frame:000000000001901D                 db  12h
.eh_frame:000000000001901E                 db    0
.eh_frame:000000000001901F                 db    0
.eh_frame:0000000000019020                 db  70h ; p
.eh_frame:0000000000019021                 db  3Ah ; :
.eh_frame:0000000000019022                 db 0FFh
.eh_frame:0000000000019023                 db 0FFh
.eh_frame:0000000000019024                 db  0Dh
.eh_frame:0000000000019025                 db    0
.eh_frame:0000000000019026                 db    0
.eh_frame:0000000000019027                 db    0
.eh_frame:0000000000019028                 db    0
.eh_frame:0000000000019029                 db    0
.eh_frame:000000000001902A                 db    0
.eh_frame:000000000001902B                 db    0
.eh_frame:000000000001902C                 db  14h
.eh_frame:000000000001902D                 db    0
.eh_frame:000000000001902E                 db    0
.eh_frame:000000000001902F                 db    0
.eh_frame:0000000000019030                 db  90h
.eh_frame:0000000000019031                 db  12h
.eh_frame:0000000000019032                 db    0
.eh_frame:0000000000019033                 db    0
.eh_frame:0000000000019034                 db  6Ch ; l
.eh_frame:0000000000019035                 db  3Ah ; :
.eh_frame:0000000000019036                 db 0FFh
.eh_frame:0000000000019037                 db 0FFh
.eh_frame:0000000000019038                 db  2Eh ; .
.eh_frame:0000000000019039                 db    0
.eh_frame:000000000001903A                 db    0
.eh_frame:000000000001903B                 db    0
.eh_frame:000000000001903C                 db    0
.eh_frame:000000000001903D                 db  5Eh ; ^
.eh_frame:000000000001903E                 db  0Eh
.eh_frame:000000000001903F                 db  10h
.eh_frame:0000000000019040                 db  4Fh ; O
.eh_frame:0000000000019041                 db  0Eh
.eh_frame:0000000000019042                 db    8
.eh_frame:0000000000019043                 db    0
.eh_frame:0000000000019044                 db  14h
.eh_frame:0000000000019045                 db    0
.eh_frame:0000000000019046                 db    0
.eh_frame:0000000000019047                 db    0
.eh_frame:0000000000019048                 db 0A8h
.eh_frame:0000000000019049                 db  12h
.eh_frame:000000000001904A                 db    0
.eh_frame:000000000001904B                 db    0
.eh_frame:000000000001904C                 db  84h
.eh_frame:000000000001904D                 db  3Ah ; :
.eh_frame:000000000001904E                 db 0FFh
.eh_frame:000000000001904F                 db 0FFh
.eh_frame:0000000000019050                 db  33h ; 3
.eh_frame:0000000000019051                 db    0
.eh_frame:0000000000019052                 db    0
.eh_frame:0000000000019053                 db    0
.eh_frame:0000000000019054                 db    0
.eh_frame:0000000000019055                 db  5Eh ; ^
.eh_frame:0000000000019056                 db  0Eh
.eh_frame:0000000000019057                 db  10h
.eh_frame:0000000000019058                 db  54h ; T
.eh_frame:0000000000019059                 db  0Eh
.eh_frame:000000000001905A                 db    8
.eh_frame:000000000001905B                 db    0
.eh_frame:000000000001905C                 db  18h
.eh_frame:000000000001905D                 db    0
.eh_frame:000000000001905E                 db    0
.eh_frame:000000000001905F                 db    0
.eh_frame:0000000000019060                 db 0C0h
.eh_frame:0000000000019061                 db  12h
.eh_frame:0000000000019062                 db    0
.eh_frame:0000000000019063                 db    0
.eh_frame:0000000000019064                 db 0ACh
.eh_frame:0000000000019065                 db  3Ah ; :
.eh_frame:0000000000019066                 db 0FFh
.eh_frame:0000000000019067                 db 0FFh
.eh_frame:0000000000019068                 db  15h
.eh_frame:0000000000019069                 db    0
.eh_frame:000000000001906A                 db    0
.eh_frame:000000000001906B                 db    0
.eh_frame:000000000001906C                 db    0
.eh_frame:000000000001906D                 db  41h ; A
.eh_frame:000000000001906E                 db  0Eh
.eh_frame:000000000001906F                 db  10h
.eh_frame:0000000000019070                 db  83h
.eh_frame:0000000000019071                 db    2
.eh_frame:0000000000019072                 db  4Fh ; O
.eh_frame:0000000000019073                 db  0Eh
.eh_frame:0000000000019074                 db    8
.eh_frame:0000000000019075                 db    0
.eh_frame:0000000000019076                 db    0
.eh_frame:0000000000019077                 db    0
.eh_frame:0000000000019078                 db  5Ch ; \
.eh_frame:0000000000019079                 db    0
.eh_frame:000000000001907A                 db    0
.eh_frame:000000000001907B                 db    0
.eh_frame:000000000001907C                 db 0DCh
.eh_frame:000000000001907D                 db  12h
.eh_frame:000000000001907E                 db    0
.eh_frame:000000000001907F                 db    0
.eh_frame:0000000000019080                 db 0B0h
.eh_frame:0000000000019081                 db  3Ah ; :
.eh_frame:0000000000019082                 db 0FFh
.eh_frame:0000000000019083                 db 0FFh
.eh_frame:0000000000019084                 db  80h
.eh_frame:0000000000019085                 db    0
.eh_frame:0000000000019086                 db    0
.eh_frame:0000000000019087                 db    0
.eh_frame:0000000000019088                 db    0
.eh_frame:0000000000019089                 db  42h ; B
.eh_frame:000000000001908A                 db  0Eh
.eh_frame:000000000001908B                 db  10h
.eh_frame:000000000001908C                 db  8Dh
.eh_frame:000000000001908D                 db    2
.eh_frame:000000000001908E                 db  42h ; B
.eh_frame:000000000001908F                 db  0Eh
.eh_frame:0000000000019090                 db  18h
.eh_frame:0000000000019091                 db  8Ch
.eh_frame:0000000000019092                 db    3
.eh_frame:0000000000019093                 db  47h ; G
.eh_frame:0000000000019094                 db  0Eh
.eh_frame:0000000000019095                 db  20h
.eh_frame:0000000000019096                 db  86h
.eh_frame:0000000000019097                 db    4
.eh_frame:0000000000019098                 db  41h ; A
.eh_frame:0000000000019099                 db  0Eh
.eh_frame:000000000001909A                 db  28h ; (
.eh_frame:000000000001909B                 db  83h
.eh_frame:000000000001909C                 db    5
.eh_frame:000000000001909D                 db  49h ; I
.eh_frame:000000000001909E                 db  0Eh
.eh_frame:000000000001909F                 db  30h ; 0
.eh_frame:00000000000190A0                 db  62h ; b
.eh_frame:00000000000190A1                 db  0Ah
.eh_frame:00000000000190A2                 db  0Eh
.eh_frame:00000000000190A3                 db  28h ; (
.eh_frame:00000000000190A4                 db  44h ; D
.eh_frame:00000000000190A5                 db  0Eh
.eh_frame:00000000000190A6                 db  20h
.eh_frame:00000000000190A7                 db  41h ; A
.eh_frame:00000000000190A8                 db  0Eh
.eh_frame:00000000000190A9                 db  18h
.eh_frame:00000000000190AA                 db  42h ; B
.eh_frame:00000000000190AB                 db  0Eh
.eh_frame:00000000000190AC                 db  10h
.eh_frame:00000000000190AD                 db  42h ; B
.eh_frame:00000000000190AE                 db  0Eh
.eh_frame:00000000000190AF                 db    8
.eh_frame:00000000000190B0                 db  48h ; H
.eh_frame:00000000000190B1                 db  0Bh
.eh_frame:00000000000190B2                 db  5Dh ; ]
.eh_frame:00000000000190B3                 db  0Ah
.eh_frame:00000000000190B4                 db  0Eh
.eh_frame:00000000000190B5                 db  28h ; (
.eh_frame:00000000000190B6                 db  41h ; A
.eh_frame:00000000000190B7                 db  0Eh
.eh_frame:00000000000190B8                 db  20h
.eh_frame:00000000000190B9                 db  41h ; A
.eh_frame:00000000000190BA                 db  0Eh
.eh_frame:00000000000190BB                 db  18h
.eh_frame:00000000000190BC                 db  42h ; B
.eh_frame:00000000000190BD                 db  0Eh
.eh_frame:00000000000190BE                 db  10h
.eh_frame:00000000000190BF                 db  42h ; B
.eh_frame:00000000000190C0                 db  0Eh
.eh_frame:00000000000190C1                 db    8
.eh_frame:00000000000190C2                 db  45h ; E
.eh_frame:00000000000190C3                 db  0Bh
.eh_frame:00000000000190C4                 db  44h ; D
.eh_frame:00000000000190C5                 db  0Eh
.eh_frame:00000000000190C6                 db  28h ; (
.eh_frame:00000000000190C7                 db  43h ; C
.eh_frame:00000000000190C8                 db  0Eh
.eh_frame:00000000000190C9                 db  20h
.eh_frame:00000000000190CA                 db  44h ; D
.eh_frame:00000000000190CB                 db  0Eh
.eh_frame:00000000000190CC                 db  18h
.eh_frame:00000000000190CD                 db  42h ; B
.eh_frame:00000000000190CE                 db  0Eh
.eh_frame:00000000000190CF                 db  10h
.eh_frame:00000000000190D0                 db  42h ; B
.eh_frame:00000000000190D1                 db  0Eh
.eh_frame:00000000000190D2                 db    8
.eh_frame:00000000000190D3                 db    0
.eh_frame:00000000000190D4                 db    0
.eh_frame:00000000000190D5                 db    0
.eh_frame:00000000000190D6                 db    0
.eh_frame:00000000000190D7                 db    0
.eh_frame:00000000000190D8                 db  1Ch
.eh_frame:00000000000190D9                 db    0
.eh_frame:00000000000190DA                 db    0
.eh_frame:00000000000190DB                 db    0
.eh_frame:00000000000190DC                 db  3Ch ; <
.eh_frame:00000000000190DD                 db  13h
.eh_frame:00000000000190DE                 db    0
.eh_frame:00000000000190DF                 db    0
.eh_frame:00000000000190E0                 db 0D0h
.eh_frame:00000000000190E1                 db  3Ah ; :
.eh_frame:00000000000190E2                 db 0FFh
.eh_frame:00000000000190E3                 db 0FFh
.eh_frame:00000000000190E4                 db  9Fh
.eh_frame:00000000000190E5                 db    0
.eh_frame:00000000000190E6                 db    0
.eh_frame:00000000000190E7                 db    0
.eh_frame:00000000000190E8                 db    0
.eh_frame:00000000000190E9                 db  44h ; D
.eh_frame:00000000000190EA                 db  0Eh
.eh_frame:00000000000190EB                 db  10h
.eh_frame:00000000000190EC                 db  83h
.eh_frame:00000000000190ED                 db    2
.eh_frame:00000000000190EE                 db    2
.eh_frame:00000000000190EF                 db  78h ; x
.eh_frame:00000000000190F0                 db  0Ah
.eh_frame:00000000000190F1                 db  0Eh
.eh_frame:00000000000190F2                 db    8
.eh_frame:00000000000190F3                 db  41h ; A
.eh_frame:00000000000190F4                 db  0Bh
.eh_frame:00000000000190F5                 db    0
.eh_frame:00000000000190F6                 db    0
.eh_frame:00000000000190F7                 db    0
.eh_frame:00000000000190F8                 db  34h ; 4
.eh_frame:00000000000190F9                 db    0
.eh_frame:00000000000190FA                 db    0
.eh_frame:00000000000190FB                 db    0
.eh_frame:00000000000190FC                 db  5Ch ; \
.eh_frame:00000000000190FD                 db  13h
.eh_frame:00000000000190FE                 db    0
.eh_frame:00000000000190FF                 db    0
.eh_frame:0000000000019100                 db  50h ; P
.eh_frame:0000000000019101                 db  3Bh ; ;
.eh_frame:0000000000019102                 db 0FFh
.eh_frame:0000000000019103                 db 0FFh
.eh_frame:0000000000019104                 db  74h ; t
.eh_frame:0000000000019105                 db    0
.eh_frame:0000000000019106                 db    0
.eh_frame:0000000000019107                 db    0
.eh_frame:0000000000019108                 db    0
.eh_frame:0000000000019109                 db  42h ; B
.eh_frame:000000000001910A                 db  0Eh
.eh_frame:000000000001910B                 db  10h
.eh_frame:000000000001910C                 db  8Ch
.eh_frame:000000000001910D                 db    2
.eh_frame:000000000001910E                 db  41h ; A
.eh_frame:000000000001910F                 db  0Eh
.eh_frame:0000000000019110                 db  18h
.eh_frame:0000000000019111                 db  86h
.eh_frame:0000000000019112                 db    3
.eh_frame:0000000000019113                 db  44h ; D
.eh_frame:0000000000019114                 db  0Eh
.eh_frame:0000000000019115                 db  20h
.eh_frame:0000000000019116                 db  83h
.eh_frame:0000000000019117                 db    4
.eh_frame:0000000000019118                 db  4Ah ; J
.eh_frame:0000000000019119                 db  0Eh
.eh_frame:000000000001911A                 db  30h ; 0
.eh_frame:000000000001911B                 db    2
.eh_frame:000000000001911C                 db  4Fh ; O
.eh_frame:000000000001911D                 db  0Ah
.eh_frame:000000000001911E                 db  0Eh
.eh_frame:000000000001911F                 db  20h
.eh_frame:0000000000019120                 db  41h ; A
.eh_frame:0000000000019121                 db  0Eh
.eh_frame:0000000000019122                 db  18h
.eh_frame:0000000000019123                 db  41h ; A
.eh_frame:0000000000019124                 db  0Eh
.eh_frame:0000000000019125                 db  10h
.eh_frame:0000000000019126                 db  42h ; B
.eh_frame:0000000000019127                 db  0Eh
.eh_frame:0000000000019128                 db    8
.eh_frame:0000000000019129                 db  44h ; D
.eh_frame:000000000001912A                 db  0Bh
.eh_frame:000000000001912B                 db    0
.eh_frame:000000000001912C                 db    0
.eh_frame:000000000001912D                 db    0
.eh_frame:000000000001912E                 db    0
.eh_frame:000000000001912F                 db    0
.eh_frame:0000000000019130                 db  2Ch ; ,
.eh_frame:0000000000019131                 db    0
.eh_frame:0000000000019132                 db    0
.eh_frame:0000000000019133                 db    0
.eh_frame:0000000000019134                 db  94h
.eh_frame:0000000000019135                 db  13h
.eh_frame:0000000000019136                 db    0
.eh_frame:0000000000019137                 db    0
.eh_frame:0000000000019138                 db  98h
.eh_frame:0000000000019139                 db  3Bh ; ;
.eh_frame:000000000001913A                 db 0FFh
.eh_frame:000000000001913B                 db 0FFh
.eh_frame:000000000001913C                 db  54h ; T
.eh_frame:000000000001913D                 db    0
.eh_frame:000000000001913E                 db    0
.eh_frame:000000000001913F                 db    0
.eh_frame:0000000000019140                 db    0
.eh_frame:0000000000019141                 db  41h ; A
.eh_frame:0000000000019142                 db  0Eh
.eh_frame:0000000000019143                 db  10h
.eh_frame:0000000000019144                 db  86h
.eh_frame:0000000000019145                 db    2
.eh_frame:0000000000019146                 db  41h ; A
.eh_frame:0000000000019147                 db  0Eh
.eh_frame:0000000000019148                 db  18h
.eh_frame:0000000000019149                 db  83h
.eh_frame:000000000001914A                 db    3
.eh_frame:000000000001914B                 db  44h ; D
.eh_frame:000000000001914C                 db  0Eh
.eh_frame:000000000001914D                 db  30h ; 0
.eh_frame:000000000001914E                 db    2
.eh_frame:000000000001914F                 db  44h ; D
.eh_frame:0000000000019150                 db  0Ah
.eh_frame:0000000000019151                 db  0Eh
.eh_frame:0000000000019152                 db  18h
.eh_frame:0000000000019153                 db  43h ; C
.eh_frame:0000000000019154                 db  0Eh
.eh_frame:0000000000019155                 db  10h
.eh_frame:0000000000019156                 db  41h ; A
.eh_frame:0000000000019157                 db  0Eh
.eh_frame:0000000000019158                 db    8
.eh_frame:0000000000019159                 db  41h ; A
.eh_frame:000000000001915A                 db  0Bh
.eh_frame:000000000001915B                 db    0
.eh_frame:000000000001915C                 db    0
.eh_frame:000000000001915D                 db    0
.eh_frame:000000000001915E                 db    0
.eh_frame:000000000001915F                 db    0
.eh_frame:0000000000019160                 db  40h ; @
.eh_frame:0000000000019161                 db    0
.eh_frame:0000000000019162                 db    0
.eh_frame:0000000000019163                 db    0
.eh_frame:0000000000019164                 db 0C4h
.eh_frame:0000000000019165                 db  13h
.eh_frame:0000000000019166                 db    0
.eh_frame:0000000000019167                 db    0
.eh_frame:0000000000019168                 db 0C8h
.eh_frame:0000000000019169                 db  3Bh ; ;
.eh_frame:000000000001916A                 db 0FFh
.eh_frame:000000000001916B                 db 0FFh
.eh_frame:000000000001916C                 db 0E7h
.eh_frame:000000000001916D                 db    0
.eh_frame:000000000001916E                 db    0
.eh_frame:000000000001916F                 db    0
.eh_frame:0000000000019170                 db    0
.eh_frame:0000000000019171                 db  41h ; A
.eh_frame:0000000000019172                 db  0Eh
.eh_frame:0000000000019173                 db  10h
.eh_frame:0000000000019174                 db  86h
.eh_frame:0000000000019175                 db    2
.eh_frame:0000000000019176                 db  41h ; A
.eh_frame:0000000000019177                 db  0Eh
.eh_frame:0000000000019178                 db  18h
.eh_frame:0000000000019179                 db  83h
.eh_frame:000000000001917A                 db    3
.eh_frame:000000000001917B                 db  49h ; I
.eh_frame:000000000001917C                 db  0Eh
.eh_frame:000000000001917D                 db  20h
.eh_frame:000000000001917E                 db  6Eh ; n
.eh_frame:000000000001917F                 db  0Ah
.eh_frame:0000000000019180                 db  0Eh
.eh_frame:0000000000019181                 db  18h
.eh_frame:0000000000019182                 db  41h ; A
.eh_frame:0000000000019183                 db  0Eh
.eh_frame:0000000000019184                 db  10h
.eh_frame:0000000000019185                 db  41h ; A
.eh_frame:0000000000019186                 db  0Eh
.eh_frame:0000000000019187                 db    8
.eh_frame:0000000000019188                 db  45h ; E
.eh_frame:0000000000019189                 db  0Bh
.eh_frame:000000000001918A                 db    2
.eh_frame:000000000001918B                 db  4Ah ; J
.eh_frame:000000000001918C                 db  0Ah
.eh_frame:000000000001918D                 db  0Eh
.eh_frame:000000000001918E                 db  18h
.eh_frame:000000000001918F                 db  41h ; A
.eh_frame:0000000000019190                 db  0Eh
.eh_frame:0000000000019191                 db  10h
.eh_frame:0000000000019192                 db  41h ; A
.eh_frame:0000000000019193                 db  0Eh
.eh_frame:0000000000019194                 db    8
.eh_frame:0000000000019195                 db  44h ; D
.eh_frame:0000000000019196                 db  0Bh
.eh_frame:0000000000019197                 db    2
.eh_frame:0000000000019198                 db  54h ; T
.eh_frame:0000000000019199                 db  0Eh
.eh_frame:000000000001919A                 db  18h
.eh_frame:000000000001919B                 db  41h ; A
.eh_frame:000000000001919C                 db  0Eh
.eh_frame:000000000001919D                 db  10h
.eh_frame:000000000001919E                 db  41h ; A
.eh_frame:000000000001919F                 db  0Eh
.eh_frame:00000000000191A0                 db    8
.eh_frame:00000000000191A1                 db    0
.eh_frame:00000000000191A2                 db    0
.eh_frame:00000000000191A3                 db    0
.eh_frame:00000000000191A4                 db  74h ; t
.eh_frame:00000000000191A5                 db    0
.eh_frame:00000000000191A6                 db    0
.eh_frame:00000000000191A7                 db    0
.eh_frame:00000000000191A8                 db    8
.eh_frame:00000000000191A9                 db  14h
.eh_frame:00000000000191AA                 db    0
.eh_frame:00000000000191AB                 db    0
.eh_frame:00000000000191AC                 db  74h ; t
.eh_frame:00000000000191AD                 db  3Ch ; <
.eh_frame:00000000000191AE                 db 0FFh
.eh_frame:00000000000191AF                 db 0FFh
.eh_frame:00000000000191B0                 db  34h ; 4
.eh_frame:00000000000191B1                 db  12h
.eh_frame:00000000000191B2                 db    0
.eh_frame:00000000000191B3                 db    0
.eh_frame:00000000000191B4                 db    0
.eh_frame:00000000000191B5                 db  42h ; B
.eh_frame:00000000000191B6                 db  0Eh
.eh_frame:00000000000191B7                 db  10h
.eh_frame:00000000000191B8                 db  8Fh
.eh_frame:00000000000191B9                 db    2
.eh_frame:00000000000191BA                 db  42h ; B
.eh_frame:00000000000191BB                 db  0Eh
.eh_frame:00000000000191BC                 db  18h
.eh_frame:00000000000191BD                 db  8Eh
.eh_frame:00000000000191BE                 db    3
.eh_frame:00000000000191BF                 db  45h ; E
.eh_frame:00000000000191C0                 db  0Eh
.eh_frame:00000000000191C1                 db  20h
.eh_frame:00000000000191C2                 db  8Dh
.eh_frame:00000000000191C3                 db    4
.eh_frame:00000000000191C4                 db  42h ; B
.eh_frame:00000000000191C5                 db  0Eh
.eh_frame:00000000000191C6                 db  28h ; (
.eh_frame:00000000000191C7                 db  8Ch
.eh_frame:00000000000191C8                 db    5
.eh_frame:00000000000191C9                 db  44h ; D
.eh_frame:00000000000191CA                 db  0Eh
.eh_frame:00000000000191CB                 db  30h ; 0
.eh_frame:00000000000191CC                 db  86h
.eh_frame:00000000000191CD                 db    6
.eh_frame:00000000000191CE                 db  41h ; A
.eh_frame:00000000000191CF                 db  0Eh
.eh_frame:00000000000191D0                 db  38h ; 8
.eh_frame:00000000000191D1                 db  83h
.eh_frame:00000000000191D2                 db    7
.eh_frame:00000000000191D3                 db  53h ; S
.eh_frame:00000000000191D4                 db  0Eh
.eh_frame:00000000000191D5                 db 0F0h
.eh_frame:00000000000191D6                 db    1
.eh_frame:00000000000191D7                 db    3
.eh_frame:00000000000191D8                 db  81h
.eh_frame:00000000000191D9                 db  0Bh
.eh_frame:00000000000191DA                 db  0Eh
.eh_frame:00000000000191DB                 db 0F8h
.eh_frame:00000000000191DC                 db    1
.eh_frame:00000000000191DD                 db  4Ah ; J
.eh_frame:00000000000191DE                 db  0Eh
.eh_frame:00000000000191DF                 db  80h
.eh_frame:00000000000191E0                 db    2
.eh_frame:00000000000191E1                 db  44h ; D
.eh_frame:00000000000191E2                 db  0Eh
.eh_frame:00000000000191E3                 db  88h
.eh_frame:00000000000191E4                 db    2
.eh_frame:00000000000191E5                 db  45h ; E
.eh_frame:00000000000191E6                 db  0Eh
.eh_frame:00000000000191E7                 db  90h
.eh_frame:00000000000191E8                 db    2
.eh_frame:00000000000191E9                 db  5Fh ; _
.eh_frame:00000000000191EA                 db  0Eh
.eh_frame:00000000000191EB                 db 0F0h
.eh_frame:00000000000191EC                 db    1
.eh_frame:00000000000191ED                 db  64h ; d
.eh_frame:00000000000191EE                 db  0Ah
.eh_frame:00000000000191EF                 db  0Eh
.eh_frame:00000000000191F0                 db  38h ; 8
.eh_frame:00000000000191F1                 db  41h ; A
.eh_frame:00000000000191F2                 db  0Eh
.eh_frame:00000000000191F3                 db  30h ; 0
.eh_frame:00000000000191F4                 db  41h ; A
.eh_frame:00000000000191F5                 db  0Eh
.eh_frame:00000000000191F6                 db  28h ; (
.eh_frame:00000000000191F7                 db  42h ; B
.eh_frame:00000000000191F8                 db  0Eh
.eh_frame:00000000000191F9                 db  20h
.eh_frame:00000000000191FA                 db  42h ; B
.eh_frame:00000000000191FB                 db  0Eh
.eh_frame:00000000000191FC                 db  18h
.eh_frame:00000000000191FD                 db  42h ; B
.eh_frame:00000000000191FE                 db  0Eh
.eh_frame:00000000000191FF                 db  10h
.eh_frame:0000000000019200                 db  42h ; B
.eh_frame:0000000000019201                 db  0Eh
.eh_frame:0000000000019202                 db    8
.eh_frame:0000000000019203                 db  44h ; D
.eh_frame:0000000000019204                 db  0Bh
.eh_frame:0000000000019205                 db    3
.eh_frame:0000000000019206                 db  99h
.eh_frame:0000000000019207                 db    5
.eh_frame:0000000000019208                 db  0Eh
.eh_frame:0000000000019209                 db 0F8h
.eh_frame:000000000001920A                 db    1
.eh_frame:000000000001920B                 db  4Dh ; M
.eh_frame:000000000001920C                 db  0Eh
.eh_frame:000000000001920D                 db  80h
.eh_frame:000000000001920E                 db    2
.eh_frame:000000000001920F                 db  44h ; D
.eh_frame:0000000000019210                 db  0Eh
.eh_frame:0000000000019211                 db  88h
.eh_frame:0000000000019212                 db    2
.eh_frame:0000000000019213                 db  47h ; G
.eh_frame:0000000000019214                 db  0Eh
.eh_frame:0000000000019215                 db  90h
.eh_frame:0000000000019216                 db    2
.eh_frame:0000000000019217                 db  5Bh ; [
.eh_frame:0000000000019218                 db  0Eh
.eh_frame:0000000000019219                 db 0F0h
.eh_frame:000000000001921A                 db    1
.eh_frame:000000000001921B                 db    0
.eh_frame:000000000001921C                 db  68h ; h
.eh_frame:000000000001921D                 db    0
.eh_frame:000000000001921E                 db    0
.eh_frame:000000000001921F                 db    0
.eh_frame:0000000000019220                 db  80h
.eh_frame:0000000000019221                 db  14h
.eh_frame:0000000000019222                 db    0
.eh_frame:0000000000019223                 db    0
.eh_frame:0000000000019224                 db  3Ch ; <
.eh_frame:0000000000019225                 db  4Eh ; N
.eh_frame:0000000000019226                 db 0FFh
.eh_frame:0000000000019227                 db 0FFh
.eh_frame:0000000000019228                 db 0ABh
.eh_frame:0000000000019229                 db    1
.eh_frame:000000000001922A                 db    0
.eh_frame:000000000001922B                 db    0
.eh_frame:000000000001922C                 db    0
.eh_frame:000000000001922D                 db  42h ; B
.eh_frame:000000000001922E                 db  0Eh
.eh_frame:000000000001922F                 db  10h
.eh_frame:0000000000019230                 db  8Fh
.eh_frame:0000000000019231                 db    2
.eh_frame:0000000000019232                 db  42h ; B
.eh_frame:0000000000019233                 db  0Eh
.eh_frame:0000000000019234                 db  18h
.eh_frame:0000000000019235                 db  8Eh
.eh_frame:0000000000019236                 db    3
.eh_frame:0000000000019237                 db  45h ; E
.eh_frame:0000000000019238                 db  0Eh
.eh_frame:0000000000019239                 db  20h
.eh_frame:000000000001923A                 db  8Dh
.eh_frame:000000000001923B                 db    4
.eh_frame:000000000001923C                 db  42h ; B
.eh_frame:000000000001923D                 db  0Eh
.eh_frame:000000000001923E                 db  28h ; (
.eh_frame:000000000001923F                 db  8Ch
.eh_frame:0000000000019240                 db    5
.eh_frame:0000000000019241                 db  44h ; D
.eh_frame:0000000000019242                 db  0Eh
.eh_frame:0000000000019243                 db  30h ; 0
.eh_frame:0000000000019244                 db  86h
.eh_frame:0000000000019245                 db    6
.eh_frame:0000000000019246                 db  41h ; A
.eh_frame:0000000000019247                 db  0Eh
.eh_frame:0000000000019248                 db  38h ; 8
.eh_frame:0000000000019249                 db  83h
.eh_frame:000000000001924A                 db    7
.eh_frame:000000000001924B                 db  47h ; G
.eh_frame:000000000001924C                 db  0Eh
.eh_frame:000000000001924D                 db  60h ; `
.eh_frame:000000000001924E                 db    2
.eh_frame:000000000001924F                 db  99h
.eh_frame:0000000000019250                 db  0Eh
.eh_frame:0000000000019251                 db  68h ; h
.eh_frame:0000000000019252                 db  5Fh ; _
.eh_frame:0000000000019253                 db  0Eh
.eh_frame:0000000000019254                 db  70h ; p
.eh_frame:0000000000019255                 db  46h ; F
.eh_frame:0000000000019256                 db  0Eh
.eh_frame:0000000000019257                 db  78h ; x
.eh_frame:0000000000019258                 db  42h ; B
.eh_frame:0000000000019259                 db  0Eh
.eh_frame:000000000001925A                 db  80h
.eh_frame:000000000001925B                 db    1
.eh_frame:000000000001925C                 db  59h ; Y
.eh_frame:000000000001925D                 db  0Eh
.eh_frame:000000000001925E                 db  60h ; `
.eh_frame:000000000001925F                 db    2
.eh_frame:0000000000019260                 db  40h ; @
.eh_frame:0000000000019261                 db  0Eh
.eh_frame:0000000000019262                 db  68h ; h
.eh_frame:0000000000019263                 db  4Bh ; K
.eh_frame:0000000000019264                 db  0Eh
.eh_frame:0000000000019265                 db  70h ; p
.eh_frame:0000000000019266                 db  43h ; C
.eh_frame:0000000000019267                 db  0Eh
.eh_frame:0000000000019268                 db  78h ; x
.eh_frame:0000000000019269                 db  45h ; E
.eh_frame:000000000001926A                 db  0Eh
.eh_frame:000000000001926B                 db  80h
.eh_frame:000000000001926C                 db    1
.eh_frame:000000000001926D                 db  5Eh ; ^
.eh_frame:000000000001926E                 db  0Eh
.eh_frame:000000000001926F                 db  60h ; `
.eh_frame:0000000000019270                 db  4Ch ; L
.eh_frame:0000000000019271                 db  0Ah
.eh_frame:0000000000019272                 db  0Eh
.eh_frame:0000000000019273                 db  38h ; 8
.eh_frame:0000000000019274                 db  44h ; D
.eh_frame:0000000000019275                 db  0Eh
.eh_frame:0000000000019276                 db  30h ; 0
.eh_frame:0000000000019277                 db  41h ; A
.eh_frame:0000000000019278                 db  0Eh
.eh_frame:0000000000019279                 db  28h ; (
.eh_frame:000000000001927A                 db  42h ; B
.eh_frame:000000000001927B                 db  0Eh
.eh_frame:000000000001927C                 db  20h
.eh_frame:000000000001927D                 db  42h ; B
.eh_frame:000000000001927E                 db  0Eh
.eh_frame:000000000001927F                 db  18h
.eh_frame:0000000000019280                 db  42h ; B
.eh_frame:0000000000019281                 db  0Eh
.eh_frame:0000000000019282                 db  10h
.eh_frame:0000000000019283                 db  42h ; B
.eh_frame:0000000000019284                 db  0Eh
.eh_frame:0000000000019285                 db    8
.eh_frame:0000000000019286                 db  46h ; F
.eh_frame:0000000000019287                 db  0Bh
.eh_frame:0000000000019288                 db  28h ; (
.eh_frame:0000000000019289                 db    0
.eh_frame:000000000001928A                 db    0
.eh_frame:000000000001928B                 db    0
.eh_frame:000000000001928C                 db 0ECh
.eh_frame:000000000001928D                 db  14h
.eh_frame:000000000001928E                 db    0
.eh_frame:000000000001928F                 db    0
.eh_frame:0000000000019290                 db  80h
.eh_frame:0000000000019291                 db  4Fh ; O
.eh_frame:0000000000019292                 db 0FFh
.eh_frame:0000000000019293                 db 0FFh
.eh_frame:0000000000019294                 db  36h ; 6
.eh_frame:0000000000019295                 db    0
.eh_frame:0000000000019296                 db    0
.eh_frame:0000000000019297                 db    0
.eh_frame:0000000000019298                 db    0
.eh_frame:0000000000019299                 db  42h ; B
.eh_frame:000000000001929A                 db  0Eh
.eh_frame:000000000001929B                 db  10h
.eh_frame:000000000001929C                 db  8Ch
.eh_frame:000000000001929D                 db    2
.eh_frame:000000000001929E                 db  41h ; A
.eh_frame:000000000001929F                 db  0Eh
.eh_frame:00000000000192A0                 db  18h
.eh_frame:00000000000192A1                 db  86h
.eh_frame:00000000000192A2                 db    3
.eh_frame:00000000000192A3                 db  41h ; A
.eh_frame:00000000000192A4                 db  0Eh
.eh_frame:00000000000192A5                 db  20h
.eh_frame:00000000000192A6                 db  83h
.eh_frame:00000000000192A7                 db    4
.eh_frame:00000000000192A8                 db  6Eh ; n
.eh_frame:00000000000192A9                 db  0Eh
.eh_frame:00000000000192AA                 db  18h
.eh_frame:00000000000192AB                 db  41h ; A
.eh_frame:00000000000192AC                 db  0Eh
.eh_frame:00000000000192AD                 db  10h
.eh_frame:00000000000192AE                 db  42h ; B
.eh_frame:00000000000192AF                 db  0Eh
.eh_frame:00000000000192B0                 db    8
.eh_frame:00000000000192B1                 db    0
.eh_frame:00000000000192B2                 db    0
.eh_frame:00000000000192B3                 db    0
.eh_frame:00000000000192B4                 db  10h
.eh_frame:00000000000192B5                 db    0
.eh_frame:00000000000192B6                 db    0
.eh_frame:00000000000192B7                 db    0
.eh_frame:00000000000192B8                 db  18h
.eh_frame:00000000000192B9                 db  15h
.eh_frame:00000000000192BA                 db    0
.eh_frame:00000000000192BB                 db    0
.eh_frame:00000000000192BC                 db  94h
.eh_frame:00000000000192BD                 db  4Fh ; O
.eh_frame:00000000000192BE                 db 0FFh
.eh_frame:00000000000192BF                 db 0FFh
.eh_frame:00000000000192C0                 db  11h
.eh_frame:00000000000192C1                 db    0
.eh_frame:00000000000192C2                 db    0
.eh_frame:00000000000192C3                 db    0
.eh_frame:00000000000192C4                 db    0
.eh_frame:00000000000192C5                 db    0
.eh_frame:00000000000192C6                 db    0
.eh_frame:00000000000192C7                 db    0
.eh_frame:00000000000192C8                 db  10h
.eh_frame:00000000000192C9                 db    0
.eh_frame:00000000000192CA                 db    0
.eh_frame:00000000000192CB                 db    0
.eh_frame:00000000000192CC                 db  2Ch ; ,
.eh_frame:00000000000192CD                 db  15h
.eh_frame:00000000000192CE                 db    0
.eh_frame:00000000000192CF                 db    0
.eh_frame:00000000000192D0                 db 0A0h
.eh_frame:00000000000192D1                 db  4Fh ; O
.eh_frame:00000000000192D2                 db 0FFh
.eh_frame:00000000000192D3                 db 0FFh
.eh_frame:00000000000192D4                 db  11h
.eh_frame:00000000000192D5                 db    0
.eh_frame:00000000000192D6                 db    0
.eh_frame:00000000000192D7                 db    0
.eh_frame:00000000000192D8                 db    0
.eh_frame:00000000000192D9                 db    0
.eh_frame:00000000000192DA                 db    0
.eh_frame:00000000000192DB                 db    0
.eh_frame:00000000000192DC                 db  10h
.eh_frame:00000000000192DD                 db    0
.eh_frame:00000000000192DE                 db    0
.eh_frame:00000000000192DF                 db    0
.eh_frame:00000000000192E0                 db  40h ; @
.eh_frame:00000000000192E1                 db  15h
.eh_frame:00000000000192E2                 db    0
.eh_frame:00000000000192E3                 db    0
.eh_frame:00000000000192E4                 db 0ACh
.eh_frame:00000000000192E5                 db  4Fh ; O
.eh_frame:00000000000192E6                 db 0FFh
.eh_frame:00000000000192E7                 db 0FFh
.eh_frame:00000000000192E8                 db  35h ; 5
.eh_frame:00000000000192E9                 db    0
.eh_frame:00000000000192EA                 db    0
.eh_frame:00000000000192EB                 db    0
.eh_frame:00000000000192EC                 db    0
.eh_frame:00000000000192ED                 db    0
.eh_frame:00000000000192EE                 db    0
.eh_frame:00000000000192EF                 db    0
.eh_frame:00000000000192F0                 db  10h
.eh_frame:00000000000192F1                 db    0
.eh_frame:00000000000192F2                 db    0
.eh_frame:00000000000192F3                 db    0
.eh_frame:00000000000192F4                 db  54h ; T
.eh_frame:00000000000192F5                 db  15h
.eh_frame:00000000000192F6                 db    0
.eh_frame:00000000000192F7                 db    0
.eh_frame:00000000000192F8                 db 0D8h
.eh_frame:00000000000192F9                 db  4Fh ; O
.eh_frame:00000000000192FA                 db 0FFh
.eh_frame:00000000000192FB                 db 0FFh
.eh_frame:00000000000192FC                 db  15h
.eh_frame:00000000000192FD                 db    0
.eh_frame:00000000000192FE                 db    0
.eh_frame:00000000000192FF                 db    0
.eh_frame:0000000000019300                 db    0
.eh_frame:0000000000019301                 db    0
.eh_frame:0000000000019302                 db    0
.eh_frame:0000000000019303                 db    0
.eh_frame:0000000000019304                 db  10h
.eh_frame:0000000000019305                 db    0
.eh_frame:0000000000019306                 db    0
.eh_frame:0000000000019307                 db    0
.eh_frame:0000000000019308                 db  68h ; h
.eh_frame:0000000000019309                 db  15h
.eh_frame:000000000001930A                 db    0
.eh_frame:000000000001930B                 db    0
.eh_frame:000000000001930C                 db 0E4h
.eh_frame:000000000001930D                 db  4Fh ; O
.eh_frame:000000000001930E                 db 0FFh
.eh_frame:000000000001930F                 db 0FFh
.eh_frame:0000000000019310                 db  30h ; 0
.eh_frame:0000000000019311                 db    0
.eh_frame:0000000000019312                 db    0
.eh_frame:0000000000019313                 db    0
.eh_frame:0000000000019314                 db    0
.eh_frame:0000000000019315                 db  6Bh ; k
.eh_frame:0000000000019316                 db  0Eh
.eh_frame:0000000000019317                 db  10h
.eh_frame:0000000000019318                 db  50h ; P
.eh_frame:0000000000019319                 db    0
.eh_frame:000000000001931A                 db    0
.eh_frame:000000000001931B                 db    0
.eh_frame:000000000001931C                 db  7Ch ; |
.eh_frame:000000000001931D                 db  15h
.eh_frame:000000000001931E                 db    0
.eh_frame:000000000001931F                 db    0
.eh_frame:0000000000019320                 db    0
.eh_frame:0000000000019321                 db  50h ; P
.eh_frame:0000000000019322                 db 0FFh
.eh_frame:0000000000019323                 db 0FFh
.eh_frame:0000000000019324                 db  74h ; t
.eh_frame:0000000000019325                 db    0
.eh_frame:0000000000019326                 db    0
.eh_frame:0000000000019327                 db    0
.eh_frame:0000000000019328                 db    0
.eh_frame:0000000000019329                 db  42h ; B
.eh_frame:000000000001932A                 db  0Eh
.eh_frame:000000000001932B                 db  10h
.eh_frame:000000000001932C                 db  8Fh
.eh_frame:000000000001932D                 db    2
.eh_frame:000000000001932E                 db  42h ; B
.eh_frame:000000000001932F                 db  0Eh
.eh_frame:0000000000019330                 db  18h
.eh_frame:0000000000019331                 db  8Eh
.eh_frame:0000000000019332                 db    3
.eh_frame:0000000000019333                 db  49h ; I
.eh_frame:0000000000019334                 db  0Eh
.eh_frame:0000000000019335                 db  20h
.eh_frame:0000000000019336                 db  8Dh
.eh_frame:0000000000019337                 db    4
.eh_frame:0000000000019338                 db  42h ; B
.eh_frame:0000000000019339                 db  0Eh
.eh_frame:000000000001933A                 db  28h ; (
.eh_frame:000000000001933B                 db  8Ch
.eh_frame:000000000001933C                 db    5
.eh_frame:000000000001933D                 db  44h ; D
.eh_frame:000000000001933E                 db  0Eh
.eh_frame:000000000001933F                 db  30h ; 0
.eh_frame:0000000000019340                 db  86h
.eh_frame:0000000000019341                 db    6
.eh_frame:0000000000019342                 db  41h ; A
.eh_frame:0000000000019343                 db  0Eh
.eh_frame:0000000000019344                 db  38h ; 8
.eh_frame:0000000000019345                 db  83h
.eh_frame:0000000000019346                 db    7
.eh_frame:0000000000019347                 db  4Dh ; M
.eh_frame:0000000000019348                 db  0Eh
.eh_frame:0000000000019349                 db  50h ; P
.eh_frame:000000000001934A                 db  5Fh ; _
.eh_frame:000000000001934B                 db  0Eh
.eh_frame:000000000001934C                 db  58h ; X
.eh_frame:000000000001934D                 db  47h ; G
.eh_frame:000000000001934E                 db  0Eh
.eh_frame:000000000001934F                 db  60h ; `
.eh_frame:0000000000019350                 db  46h ; F
.eh_frame:0000000000019351                 db  0Eh
.eh_frame:0000000000019352                 db  68h ; h
.eh_frame:0000000000019353                 db  44h ; D
.eh_frame:0000000000019354                 db  0Eh
.eh_frame:0000000000019355                 db  70h ; p
.eh_frame:0000000000019356                 db  58h ; X
.eh_frame:0000000000019357                 db  0Eh
.eh_frame:0000000000019358                 db  38h ; 8
.eh_frame:0000000000019359                 db  41h ; A
.eh_frame:000000000001935A                 db  0Eh
.eh_frame:000000000001935B                 db  30h ; 0
.eh_frame:000000000001935C                 db  41h ; A
.eh_frame:000000000001935D                 db  0Eh
.eh_frame:000000000001935E                 db  28h ; (
.eh_frame:000000000001935F                 db  42h ; B
.eh_frame:0000000000019360                 db  0Eh
.eh_frame:0000000000019361                 db  20h
.eh_frame:0000000000019362                 db  42h ; B
.eh_frame:0000000000019363                 db  0Eh
.eh_frame:0000000000019364                 db  18h
.eh_frame:0000000000019365                 db  42h ; B
.eh_frame:0000000000019366                 db  0Eh
.eh_frame:0000000000019367                 db  10h
.eh_frame:0000000000019368                 db  42h ; B
.eh_frame:0000000000019369                 db  0Eh
.eh_frame:000000000001936A                 db    8
.eh_frame:000000000001936B                 db    0
.eh_frame:000000000001936C                 db  68h ; h
.eh_frame:000000000001936D                 db    0
.eh_frame:000000000001936E                 db    0
.eh_frame:000000000001936F                 db    0
.eh_frame:0000000000019370                 db 0D0h
.eh_frame:0000000000019371                 db  15h
.eh_frame:0000000000019372                 db    0
.eh_frame:0000000000019373                 db    0
.eh_frame:0000000000019374                 db  2Ch ; ,
.eh_frame:0000000000019375                 db  50h ; P
.eh_frame:0000000000019376                 db 0FFh
.eh_frame:0000000000019377                 db 0FFh
.eh_frame:0000000000019378                 db 0E3h
.eh_frame:0000000000019379                 db    0
.eh_frame:000000000001937A                 db    0
.eh_frame:000000000001937B                 db    0
.eh_frame:000000000001937C                 db    0
.eh_frame:000000000001937D                 db  42h ; B
.eh_frame:000000000001937E                 db  0Eh
.eh_frame:000000000001937F                 db  10h
.eh_frame:0000000000019380                 db  8Fh
.eh_frame:0000000000019381                 db    2
.eh_frame:0000000000019382                 db  42h ; B
.eh_frame:0000000000019383                 db  0Eh
.eh_frame:0000000000019384                 db  18h
.eh_frame:0000000000019385                 db  8Eh
.eh_frame:0000000000019386                 db    3
.eh_frame:0000000000019387                 db  49h ; I
.eh_frame:0000000000019388                 db  0Eh
.eh_frame:0000000000019389                 db  20h
.eh_frame:000000000001938A                 db  8Dh
.eh_frame:000000000001938B                 db    4
.eh_frame:000000000001938C                 db  42h ; B
.eh_frame:000000000001938D                 db  0Eh
.eh_frame:000000000001938E                 db  28h ; (
.eh_frame:000000000001938F                 db  8Ch
.eh_frame:0000000000019390                 db    5
.eh_frame:0000000000019391                 db  44h ; D
.eh_frame:0000000000019392                 db  0Eh
.eh_frame:0000000000019393                 db  30h ; 0
.eh_frame:0000000000019394                 db  86h
.eh_frame:0000000000019395                 db    6
.eh_frame:0000000000019396                 db  41h ; A
.eh_frame:0000000000019397                 db  0Eh
.eh_frame:0000000000019398                 db  38h ; 8
.eh_frame:0000000000019399                 db  83h
.eh_frame:000000000001939A                 db    7
.eh_frame:000000000001939B                 db  4Dh ; M
.eh_frame:000000000001939C                 db  0Eh
.eh_frame:000000000001939D                 db  70h ; p
.eh_frame:000000000001939E                 db  65h ; e
.eh_frame:000000000001939F                 db  0Eh
.eh_frame:00000000000193A0                 db  78h ; x
.eh_frame:00000000000193A1                 db  4Dh ; M
.eh_frame:00000000000193A2                 db  0Eh
.eh_frame:00000000000193A3                 db  80h
.eh_frame:00000000000193A4                 db    1
.eh_frame:00000000000193A5                 db  46h ; F
.eh_frame:00000000000193A6                 db  0Eh
.eh_frame:00000000000193A7                 db  88h
.eh_frame:00000000000193A8                 db    1
.eh_frame:00000000000193A9                 db  42h ; B
.eh_frame:00000000000193AA                 db  0Eh
.eh_frame:00000000000193AB                 db  90h
.eh_frame:00000000000193AC                 db    1
.eh_frame:00000000000193AD                 db  5Eh ; ^
.eh_frame:00000000000193AE                 db  0Eh
.eh_frame:00000000000193AF                 db  70h ; p
.eh_frame:00000000000193B0                 db  56h ; V
.eh_frame:00000000000193B1                 db  0Eh
.eh_frame:00000000000193B2                 db  78h ; x
.eh_frame:00000000000193B3                 db  43h ; C
.eh_frame:00000000000193B4                 db  0Eh
.eh_frame:00000000000193B5                 db  80h
.eh_frame:00000000000193B6                 db    1
.eh_frame:00000000000193B7                 db  43h ; C
.eh_frame:00000000000193B8                 db  0Eh
.eh_frame:00000000000193B9                 db  88h
.eh_frame:00000000000193BA                 db    1
.eh_frame:00000000000193BB                 db  56h ; V
.eh_frame:00000000000193BC                 db  0Eh
.eh_frame:00000000000193BD                 db  90h
.eh_frame:00000000000193BE                 db    1
.eh_frame:00000000000193BF                 db  52h ; R
.eh_frame:00000000000193C0                 db  0Eh
.eh_frame:00000000000193C1                 db  70h ; p
.eh_frame:00000000000193C2                 db  5Bh ; [
.eh_frame:00000000000193C3                 db  0Eh
.eh_frame:00000000000193C4                 db  38h ; 8
.eh_frame:00000000000193C5                 db  41h ; A
.eh_frame:00000000000193C6                 db  0Eh
.eh_frame:00000000000193C7                 db  30h ; 0
.eh_frame:00000000000193C8                 db  41h ; A
.eh_frame:00000000000193C9                 db  0Eh
.eh_frame:00000000000193CA                 db  28h ; (
.eh_frame:00000000000193CB                 db  42h ; B
.eh_frame:00000000000193CC                 db  0Eh
.eh_frame:00000000000193CD                 db  20h
.eh_frame:00000000000193CE                 db  42h ; B
.eh_frame:00000000000193CF                 db  0Eh
.eh_frame:00000000000193D0                 db  18h
.eh_frame:00000000000193D1                 db  42h ; B
.eh_frame:00000000000193D2                 db  0Eh
.eh_frame:00000000000193D3                 db  10h
.eh_frame:00000000000193D4                 db  42h ; B
.eh_frame:00000000000193D5                 db  0Eh
.eh_frame:00000000000193D6                 db    8
.eh_frame:00000000000193D7                 db    0
.eh_frame:00000000000193D8                 db  10h
.eh_frame:00000000000193D9                 db    0
.eh_frame:00000000000193DA                 db    0
.eh_frame:00000000000193DB                 db    0
.eh_frame:00000000000193DC                 db  3Ch ; <
.eh_frame:00000000000193DD                 db  16h
.eh_frame:00000000000193DE                 db    0
.eh_frame:00000000000193DF                 db    0
.eh_frame:00000000000193E0                 db 0B0h
.eh_frame:00000000000193E1                 db  50h ; P
.eh_frame:00000000000193E2                 db 0FFh
.eh_frame:00000000000193E3                 db 0FFh
.eh_frame:00000000000193E4                 db  0Ah
.eh_frame:00000000000193E5                 db    0
.eh_frame:00000000000193E6                 db    0
.eh_frame:00000000000193E7                 db    0
.eh_frame:00000000000193E8                 db    0
.eh_frame:00000000000193E9                 db    0
.eh_frame:00000000000193EA                 db    0
.eh_frame:00000000000193EB                 db    0
.eh_frame:00000000000193EC                 db  28h ; (
.eh_frame:00000000000193ED                 db    0
.eh_frame:00000000000193EE                 db    0
.eh_frame:00000000000193EF                 db    0
.eh_frame:00000000000193F0                 db  50h ; P
.eh_frame:00000000000193F1                 db  16h
.eh_frame:00000000000193F2                 db    0
.eh_frame:00000000000193F3                 db    0
.eh_frame:00000000000193F4                 db 0ACh
.eh_frame:00000000000193F5                 db  50h ; P
.eh_frame:00000000000193F6                 db 0FFh
.eh_frame:00000000000193F7                 db 0FFh
.eh_frame:00000000000193F8                 db  93h
.eh_frame:00000000000193F9                 db    0
.eh_frame:00000000000193FA                 db    0
.eh_frame:00000000000193FB                 db    0
.eh_frame:00000000000193FC                 db    0
.eh_frame:00000000000193FD                 db  48h ; H
.eh_frame:00000000000193FE                 db  0Eh
.eh_frame:00000000000193FF                 db  10h
.eh_frame:0000000000019400                 db  8Ch
.eh_frame:0000000000019401                 db    2
.eh_frame:0000000000019402                 db  48h ; H
.eh_frame:0000000000019403                 db  0Eh
.eh_frame:0000000000019404                 db  18h
.eh_frame:0000000000019405                 db  86h
.eh_frame:0000000000019406                 db    3
.eh_frame:0000000000019407                 db  41h ; A
.eh_frame:0000000000019408                 db  0Eh
.eh_frame:0000000000019409                 db  20h
.eh_frame:000000000001940A                 db  83h
.eh_frame:000000000001940B                 db    4
.eh_frame:000000000001940C                 db    2
.eh_frame:000000000001940D                 db  74h ; t
.eh_frame:000000000001940E                 db  0Eh
.eh_frame:000000000001940F                 db  18h
.eh_frame:0000000000019410                 db  4Bh ; K
.eh_frame:0000000000019411                 db  0Eh
.eh_frame:0000000000019412                 db  10h
.eh_frame:0000000000019413                 db  42h ; B
.eh_frame:0000000000019414                 db  0Eh
.eh_frame:0000000000019415                 db    8
.eh_frame:0000000000019416                 db    0
.eh_frame:0000000000019417                 db    0
.eh_frame:0000000000019418                 db  10h
.eh_frame:0000000000019419                 db    0
.eh_frame:000000000001941A                 db    0
.eh_frame:000000000001941B                 db    0
.eh_frame:000000000001941C                 db  7Ch ; |
.eh_frame:000000000001941D                 db  16h
.eh_frame:000000000001941E                 db    0
.eh_frame:000000000001941F                 db    0
.eh_frame:0000000000019420                 db  20h
.eh_frame:0000000000019421                 db  51h ; Q
.eh_frame:0000000000019422                 db 0FFh
.eh_frame:0000000000019423                 db 0FFh
.eh_frame:0000000000019424                 db  13h
.eh_frame:0000000000019425                 db    0
.eh_frame:0000000000019426                 db    0
.eh_frame:0000000000019427                 db    0
.eh_frame:0000000000019428                 db    0
.eh_frame:0000000000019429                 db    0
.eh_frame:000000000001942A                 db    0
.eh_frame:000000000001942B                 db    0
.eh_frame:000000000001942C                 db  10h
.eh_frame:000000000001942D                 db    0
.eh_frame:000000000001942E                 db    0
.eh_frame:000000000001942F                 db    0
.eh_frame:0000000000019430                 db  90h
.eh_frame:0000000000019431                 db  16h
.eh_frame:0000000000019432                 db    0
.eh_frame:0000000000019433                 db    0
.eh_frame:0000000000019434                 db  2Ch ; ,
.eh_frame:0000000000019435                 db  51h ; Q
.eh_frame:0000000000019436                 db 0FFh
.eh_frame:0000000000019437                 db 0FFh
.eh_frame:0000000000019438                 db  0Ch
.eh_frame:0000000000019439                 db    0
.eh_frame:000000000001943A                 db    0
.eh_frame:000000000001943B                 db    0
.eh_frame:000000000001943C                 db    0
.eh_frame:000000000001943D                 db    0
.eh_frame:000000000001943E                 db    0
.eh_frame:000000000001943F                 db    0
.eh_frame:0000000000019440                 db  10h
.eh_frame:0000000000019441                 db    0
.eh_frame:0000000000019442                 db    0
.eh_frame:0000000000019443                 db    0
.eh_frame:0000000000019444                 db 0A4h
.eh_frame:0000000000019445                 db  16h
.eh_frame:0000000000019446                 db    0
.eh_frame:0000000000019447                 db    0
.eh_frame:0000000000019448                 db  28h ; (
.eh_frame:0000000000019449                 db  51h ; Q
.eh_frame:000000000001944A                 db 0FFh
.eh_frame:000000000001944B                 db 0FFh
.eh_frame:000000000001944C                 db  18h
.eh_frame:000000000001944D                 db    0
.eh_frame:000000000001944E                 db    0
.eh_frame:000000000001944F                 db    0
.eh_frame:0000000000019450                 db    0
.eh_frame:0000000000019451                 db    0
.eh_frame:0000000000019452                 db    0
.eh_frame:0000000000019453                 db    0
.eh_frame:0000000000019454                 db  10h
.eh_frame:0000000000019455                 db    0
.eh_frame:0000000000019456                 db    0
.eh_frame:0000000000019457                 db    0
.eh_frame:0000000000019458                 db 0B8h
.eh_frame:0000000000019459                 db  16h
.eh_frame:000000000001945A                 db    0
.eh_frame:000000000001945B                 db    0
.eh_frame:000000000001945C                 db  34h ; 4
.eh_frame:000000000001945D                 db  51h ; Q
.eh_frame:000000000001945E                 db 0FFh
.eh_frame:000000000001945F                 db 0FFh
.eh_frame:0000000000019460                 db  14h
.eh_frame:0000000000019461                 db    0
.eh_frame:0000000000019462                 db    0
.eh_frame:0000000000019463                 db    0
.eh_frame:0000000000019464                 db    0
.eh_frame:0000000000019465                 db    0
.eh_frame:0000000000019466                 db    0
.eh_frame:0000000000019467                 db    0
.eh_frame:0000000000019468                 db  18h
.eh_frame:0000000000019469                 db    0
.eh_frame:000000000001946A                 db    0
.eh_frame:000000000001946B                 db    0
.eh_frame:000000000001946C                 db 0CCh
.eh_frame:000000000001946D                 db  16h
.eh_frame:000000000001946E                 db    0
.eh_frame:000000000001946F                 db    0
.eh_frame:0000000000019470                 db  40h ; @
.eh_frame:0000000000019471                 db  51h ; Q
.eh_frame:0000000000019472                 db 0FFh
.eh_frame:0000000000019473                 db 0FFh
.eh_frame:0000000000019474                 db  8Eh
.eh_frame:0000000000019475                 db    0
.eh_frame:0000000000019476                 db    0
.eh_frame:0000000000019477                 db    0
.eh_frame:0000000000019478                 db    0
.eh_frame:0000000000019479                 db  44h ; D
.eh_frame:000000000001947A                 db  0Eh
.eh_frame:000000000001947B                 db  50h ; P
.eh_frame:000000000001947C                 db    2
.eh_frame:000000000001947D                 db  7Fh ; 
.eh_frame:000000000001947E                 db  0Ah
.eh_frame:000000000001947F                 db  0Eh
.eh_frame:0000000000019480                 db    8
.eh_frame:0000000000019481                 db  41h ; A
.eh_frame:0000000000019482                 db  0Bh
.eh_frame:0000000000019483                 db    0
.eh_frame:0000000000019484                 db  18h
.eh_frame:0000000000019485                 db    0
.eh_frame:0000000000019486                 db    0
.eh_frame:0000000000019487                 db    0
.eh_frame:0000000000019488                 db 0E8h
.eh_frame:0000000000019489                 db  16h
.eh_frame:000000000001948A                 db    0
.eh_frame:000000000001948B                 db    0
.eh_frame:000000000001948C                 db 0B4h
.eh_frame:000000000001948D                 db  51h ; Q
.eh_frame:000000000001948E                 db 0FFh
.eh_frame:000000000001948F                 db 0FFh
.eh_frame:0000000000019490                 db  8Ah
.eh_frame:0000000000019491                 db    0
.eh_frame:0000000000019492                 db    0
.eh_frame:0000000000019493                 db    0
.eh_frame:0000000000019494                 db    0
.eh_frame:0000000000019495                 db  44h ; D
.eh_frame:0000000000019496                 db  0Eh
.eh_frame:0000000000019497                 db  50h ; P
.eh_frame:0000000000019498                 db    2
.eh_frame:0000000000019499                 db  7Bh ; {
.eh_frame:000000000001949A                 db  0Ah
.eh_frame:000000000001949B                 db  0Eh
.eh_frame:000000000001949C                 db    8
.eh_frame:000000000001949D                 db  41h ; A
.eh_frame:000000000001949E                 db  0Bh
.eh_frame:000000000001949F                 db    0
.eh_frame:00000000000194A0                 db  10h
.eh_frame:00000000000194A1                 db    0
.eh_frame:00000000000194A2                 db    0
.eh_frame:00000000000194A3                 db    0
.eh_frame:00000000000194A4                 db    4
.eh_frame:00000000000194A5                 db  17h
.eh_frame:00000000000194A6                 db    0
.eh_frame:00000000000194A7                 db    0
.eh_frame:00000000000194A8                 db  28h ; (
.eh_frame:00000000000194A9                 db  52h ; R
.eh_frame:00000000000194AA                 db 0FFh
.eh_frame:00000000000194AB                 db 0FFh
.eh_frame:00000000000194AC                 db  0Ch
.eh_frame:00000000000194AD                 db    0
.eh_frame:00000000000194AE                 db    0
.eh_frame:00000000000194AF                 db    0
.eh_frame:00000000000194B0                 db    0
.eh_frame:00000000000194B1                 db    0
.eh_frame:00000000000194B2                 db    0
.eh_frame:00000000000194B3                 db    0
.eh_frame:00000000000194B4                 db  10h
.eh_frame:00000000000194B5                 db    0
.eh_frame:00000000000194B6                 db    0
.eh_frame:00000000000194B7                 db    0
.eh_frame:00000000000194B8                 db  18h
.eh_frame:00000000000194B9                 db  17h
.eh_frame:00000000000194BA                 db    0
.eh_frame:00000000000194BB                 db    0
.eh_frame:00000000000194BC                 db  24h ; $
.eh_frame:00000000000194BD                 db  52h ; R
.eh_frame:00000000000194BE                 db 0FFh
.eh_frame:00000000000194BF                 db 0FFh
.eh_frame:00000000000194C0                 db  0Fh
.eh_frame:00000000000194C1                 db    0
.eh_frame:00000000000194C2                 db    0
.eh_frame:00000000000194C3                 db    0
.eh_frame:00000000000194C4                 db    0
.eh_frame:00000000000194C5                 db    0
.eh_frame:00000000000194C6                 db    0
.eh_frame:00000000000194C7                 db    0
.eh_frame:00000000000194C8                 db  18h
.eh_frame:00000000000194C9                 db    0
.eh_frame:00000000000194CA                 db    0
.eh_frame:00000000000194CB                 db    0
.eh_frame:00000000000194CC                 db  2Ch ; ,
.eh_frame:00000000000194CD                 db  17h
.eh_frame:00000000000194CE                 db    0
.eh_frame:00000000000194CF                 db    0
.eh_frame:00000000000194D0                 db  20h
.eh_frame:00000000000194D1                 db  52h ; R
.eh_frame:00000000000194D2                 db 0FFh
.eh_frame:00000000000194D3                 db 0FFh
.eh_frame:00000000000194D4                 db  98h
.eh_frame:00000000000194D5                 db    0
.eh_frame:00000000000194D6                 db    0
.eh_frame:00000000000194D7                 db    0
.eh_frame:00000000000194D8                 db    0
.eh_frame:00000000000194D9                 db  44h ; D
.eh_frame:00000000000194DA                 db  0Eh
.eh_frame:00000000000194DB                 db  50h ; P
.eh_frame:00000000000194DC                 db    2
.eh_frame:00000000000194DD                 db  8Eh
.eh_frame:00000000000194DE                 db  0Ah
.eh_frame:00000000000194DF                 db  0Eh
.eh_frame:00000000000194E0                 db    8
.eh_frame:00000000000194E1                 db  41h ; A
.eh_frame:00000000000194E2                 db  0Bh
.eh_frame:00000000000194E3                 db    0
.eh_frame:00000000000194E4                 db  10h
.eh_frame:00000000000194E5                 db    0
.eh_frame:00000000000194E6                 db    0
.eh_frame:00000000000194E7                 db    0
.eh_frame:00000000000194E8                 db  48h ; H
.eh_frame:00000000000194E9                 db  17h
.eh_frame:00000000000194EA                 db    0
.eh_frame:00000000000194EB                 db    0
.eh_frame:00000000000194EC                 db 0A4h
.eh_frame:00000000000194ED                 db  52h ; R
.eh_frame:00000000000194EE                 db 0FFh
.eh_frame:00000000000194EF                 db 0FFh
.eh_frame:00000000000194F0                 db  10h
.eh_frame:00000000000194F1                 db    0
.eh_frame:00000000000194F2                 db    0
.eh_frame:00000000000194F3                 db    0
.eh_frame:00000000000194F4                 db    0
.eh_frame:00000000000194F5                 db    0
.eh_frame:00000000000194F6                 db    0
.eh_frame:00000000000194F7                 db    0
.eh_frame:00000000000194F8                 db  10h
.eh_frame:00000000000194F9                 db    0
.eh_frame:00000000000194FA                 db    0
.eh_frame:00000000000194FB                 db    0
.eh_frame:00000000000194FC                 db  5Ch ; \
.eh_frame:00000000000194FD                 db  17h
.eh_frame:00000000000194FE                 db    0
.eh_frame:00000000000194FF                 db    0
.eh_frame:0000000000019500                 db 0A0h
.eh_frame:0000000000019501                 db  52h ; R
.eh_frame:0000000000019502                 db 0FFh
.eh_frame:0000000000019503                 db 0FFh
.eh_frame:0000000000019504                 db  11h
.eh_frame:0000000000019505                 db    0
.eh_frame:0000000000019506                 db    0
.eh_frame:0000000000019507                 db    0
.eh_frame:0000000000019508                 db    0
.eh_frame:0000000000019509                 db    0
.eh_frame:000000000001950A                 db    0
.eh_frame:000000000001950B                 db    0
.eh_frame:000000000001950C                 db  10h
.eh_frame:000000000001950D                 db    0
.eh_frame:000000000001950E                 db    0
.eh_frame:000000000001950F                 db    0
.eh_frame:0000000000019510                 db  70h ; p
.eh_frame:0000000000019511                 db  17h
.eh_frame:0000000000019512                 db    0
.eh_frame:0000000000019513                 db    0
.eh_frame:0000000000019514                 db 0ACh
.eh_frame:0000000000019515                 db  52h ; R
.eh_frame:0000000000019516                 db 0FFh
.eh_frame:0000000000019517                 db 0FFh
.eh_frame:0000000000019518                 db  0Ah
.eh_frame:0000000000019519                 db    0
.eh_frame:000000000001951A                 db    0
.eh_frame:000000000001951B                 db    0
.eh_frame:000000000001951C                 db    0
.eh_frame:000000000001951D                 db    0
.eh_frame:000000000001951E                 db    0
.eh_frame:000000000001951F                 db    0
.eh_frame:0000000000019520                 db  18h
.eh_frame:0000000000019521                 db    0
.eh_frame:0000000000019522                 db    0
.eh_frame:0000000000019523                 db    0
.eh_frame:0000000000019524                 db  84h
.eh_frame:0000000000019525                 db  17h
.eh_frame:0000000000019526                 db    0
.eh_frame:0000000000019527                 db    0
.eh_frame:0000000000019528                 db 0A8h
.eh_frame:0000000000019529                 db  52h ; R
.eh_frame:000000000001952A                 db 0FFh
.eh_frame:000000000001952B                 db 0FFh
.eh_frame:000000000001952C                 db  8Eh
.eh_frame:000000000001952D                 db    0
.eh_frame:000000000001952E                 db    0
.eh_frame:000000000001952F                 db    0
.eh_frame:0000000000019530                 db    0
.eh_frame:0000000000019531                 db  44h ; D
.eh_frame:0000000000019532                 db  0Eh
.eh_frame:0000000000019533                 db  50h ; P
.eh_frame:0000000000019534                 db    2
.eh_frame:0000000000019535                 db  7Fh ; 
.eh_frame:0000000000019536                 db  0Ah
.eh_frame:0000000000019537                 db  0Eh
.eh_frame:0000000000019538                 db    8
.eh_frame:0000000000019539                 db  41h ; A
.eh_frame:000000000001953A                 db  0Bh
.eh_frame:000000000001953B                 db    0
.eh_frame:000000000001953C                 db  18h
.eh_frame:000000000001953D                 db    0
.eh_frame:000000000001953E                 db    0
.eh_frame:000000000001953F                 db    0
.eh_frame:0000000000019540                 db 0A0h
.eh_frame:0000000000019541                 db  17h
.eh_frame:0000000000019542                 db    0
.eh_frame:0000000000019543                 db    0
.eh_frame:0000000000019544                 db  1Ch
.eh_frame:0000000000019545                 db  53h ; S
.eh_frame:0000000000019546                 db 0FFh
.eh_frame:0000000000019547                 db 0FFh
.eh_frame:0000000000019548                 db  91h
.eh_frame:0000000000019549                 db    0
.eh_frame:000000000001954A                 db    0
.eh_frame:000000000001954B                 db    0
.eh_frame:000000000001954C                 db    0
.eh_frame:000000000001954D                 db  44h ; D
.eh_frame:000000000001954E                 db  0Eh
.eh_frame:000000000001954F                 db  50h ; P
.eh_frame:0000000000019550                 db    2
.eh_frame:0000000000019551                 db  82h
.eh_frame:0000000000019552                 db  0Ah
.eh_frame:0000000000019553                 db  0Eh
.eh_frame:0000000000019554                 db    8
.eh_frame:0000000000019555                 db  41h ; A
.eh_frame:0000000000019556                 db  0Bh
.eh_frame:0000000000019557                 db    0
.eh_frame:0000000000019558                 db  10h
.eh_frame:0000000000019559                 db    0
.eh_frame:000000000001955A                 db    0
.eh_frame:000000000001955B                 db    0
.eh_frame:000000000001955C                 db 0BCh
.eh_frame:000000000001955D                 db  17h
.eh_frame:000000000001955E                 db    0
.eh_frame:000000000001955F                 db    0
.eh_frame:0000000000019560                 db 0A0h
.eh_frame:0000000000019561                 db  53h ; S
.eh_frame:0000000000019562                 db 0FFh
.eh_frame:0000000000019563                 db 0FFh
.eh_frame:0000000000019564                 db  0Ch
.eh_frame:0000000000019565                 db    0
.eh_frame:0000000000019566                 db    0
.eh_frame:0000000000019567                 db    0
.eh_frame:0000000000019568                 db    0
.eh_frame:0000000000019569                 db    0
.eh_frame:000000000001956A                 db    0
.eh_frame:000000000001956B                 db    0
.eh_frame:000000000001956C                 db  10h
.eh_frame:000000000001956D                 db    0
.eh_frame:000000000001956E                 db    0
.eh_frame:000000000001956F                 db    0
.eh_frame:0000000000019570                 db 0D0h
.eh_frame:0000000000019571                 db  17h
.eh_frame:0000000000019572                 db    0
.eh_frame:0000000000019573                 db    0
.eh_frame:0000000000019574                 db  9Ch
.eh_frame:0000000000019575                 db  53h ; S
.eh_frame:0000000000019576                 db 0FFh
.eh_frame:0000000000019577                 db 0FFh
.eh_frame:0000000000019578                 db  17h
.eh_frame:0000000000019579                 db    0
.eh_frame:000000000001957A                 db    0
.eh_frame:000000000001957B                 db    0
.eh_frame:000000000001957C                 db    0
.eh_frame:000000000001957D                 db    0
.eh_frame:000000000001957E                 db    0
.eh_frame:000000000001957F                 db    0
.eh_frame:0000000000019580                 db  10h
.eh_frame:0000000000019581                 db    0
.eh_frame:0000000000019582                 db    0
.eh_frame:0000000000019583                 db    0
.eh_frame:0000000000019584                 db 0E4h
.eh_frame:0000000000019585                 db  17h
.eh_frame:0000000000019586                 db    0
.eh_frame:0000000000019587                 db    0
.eh_frame:0000000000019588                 db 0A8h
.eh_frame:0000000000019589                 db  53h ; S
.eh_frame:000000000001958A                 db 0FFh
.eh_frame:000000000001958B                 db 0FFh
.eh_frame:000000000001958C                 db  13h
.eh_frame:000000000001958D                 db    0
.eh_frame:000000000001958E                 db    0
.eh_frame:000000000001958F                 db    0
.eh_frame:0000000000019590                 db    0
.eh_frame:0000000000019591                 db    0
.eh_frame:0000000000019592                 db    0
.eh_frame:0000000000019593                 db    0
.eh_frame:0000000000019594                 db  10h
.eh_frame:0000000000019595                 db    0
.eh_frame:0000000000019596                 db    0
.eh_frame:0000000000019597                 db    0
.eh_frame:0000000000019598                 db 0F8h
.eh_frame:0000000000019599                 db  17h
.eh_frame:000000000001959A                 db    0
.eh_frame:000000000001959B                 db    0
.eh_frame:000000000001959C                 db 0B4h
.eh_frame:000000000001959D                 db  53h ; S
.eh_frame:000000000001959E                 db 0FFh
.eh_frame:000000000001959F                 db 0FFh
.eh_frame:00000000000195A0                 db  0Ch
.eh_frame:00000000000195A1                 db    0
.eh_frame:00000000000195A2                 db    0
.eh_frame:00000000000195A3                 db    0
.eh_frame:00000000000195A4                 db    0
.eh_frame:00000000000195A5                 db    0
.eh_frame:00000000000195A6                 db    0
.eh_frame:00000000000195A7                 db    0
.eh_frame:00000000000195A8                 db  10h
.eh_frame:00000000000195A9                 db    0
.eh_frame:00000000000195AA                 db    0
.eh_frame:00000000000195AB                 db    0
.eh_frame:00000000000195AC                 db  0Ch
.eh_frame:00000000000195AD                 db  18h
.eh_frame:00000000000195AE                 db    0
.eh_frame:00000000000195AF                 db    0
.eh_frame:00000000000195B0                 db 0B0h
.eh_frame:00000000000195B1                 db  53h ; S
.eh_frame:00000000000195B2                 db 0FFh
.eh_frame:00000000000195B3                 db 0FFh
.eh_frame:00000000000195B4                 db  14h
.eh_frame:00000000000195B5                 db    0
.eh_frame:00000000000195B6                 db    0
.eh_frame:00000000000195B7                 db    0
.eh_frame:00000000000195B8                 db    0
.eh_frame:00000000000195B9                 db    0
.eh_frame:00000000000195BA                 db    0
.eh_frame:00000000000195BB                 db    0
.eh_frame:00000000000195BC                 db  10h
.eh_frame:00000000000195BD                 db    0
.eh_frame:00000000000195BE                 db    0
.eh_frame:00000000000195BF                 db    0
.eh_frame:00000000000195C0                 db  20h
.eh_frame:00000000000195C1                 db  18h
.eh_frame:00000000000195C2                 db    0
.eh_frame:00000000000195C3                 db    0
.eh_frame:00000000000195C4                 db 0BCh
.eh_frame:00000000000195C5                 db  53h ; S
.eh_frame:00000000000195C6                 db 0FFh
.eh_frame:00000000000195C7                 db 0FFh
.eh_frame:00000000000195C8                 db  13h
.eh_frame:00000000000195C9                 db    0
.eh_frame:00000000000195CA                 db    0
.eh_frame:00000000000195CB                 db    0
.eh_frame:00000000000195CC                 db    0
.eh_frame:00000000000195CD                 db    0
.eh_frame:00000000000195CE                 db    0
.eh_frame:00000000000195CF                 db    0
.eh_frame:00000000000195D0                 db  14h
.eh_frame:00000000000195D1                 db    0
.eh_frame:00000000000195D2                 db    0
.eh_frame:00000000000195D3                 db    0
.eh_frame:00000000000195D4                 db  34h ; 4
.eh_frame:00000000000195D5                 db  18h
.eh_frame:00000000000195D6                 db    0
.eh_frame:00000000000195D7                 db    0
.eh_frame:00000000000195D8                 db 0C8h
.eh_frame:00000000000195D9                 db  53h ; S
.eh_frame:00000000000195DA                 db 0FFh
.eh_frame:00000000000195DB                 db 0FFh
.eh_frame:00000000000195DC                 db  18h
.eh_frame:00000000000195DD                 db    0
.eh_frame:00000000000195DE                 db    0
.eh_frame:00000000000195DF                 db    0
.eh_frame:00000000000195E0                 db    0
.eh_frame:00000000000195E1                 db    0
.eh_frame:00000000000195E2                 db    0
.eh_frame:00000000000195E3                 db    0
.eh_frame:00000000000195E4                 db    0
.eh_frame:00000000000195E5                 db    0
.eh_frame:00000000000195E6                 db    0
.eh_frame:00000000000195E7                 db    0
.eh_frame:00000000000195E8                 db  4Ch ; L
.eh_frame:00000000000195E9                 db    0
.eh_frame:00000000000195EA                 db    0
.eh_frame:00000000000195EB                 db    0
.eh_frame:00000000000195EC                 db  4Ch ; L
.eh_frame:00000000000195ED                 db  18h
.eh_frame:00000000000195EE                 db    0
.eh_frame:00000000000195EF                 db    0
.eh_frame:00000000000195F0                 db 0D0h
.eh_frame:00000000000195F1                 db  53h ; S
.eh_frame:00000000000195F2                 db 0FFh
.eh_frame:00000000000195F3                 db 0FFh
.eh_frame:00000000000195F4                 db  6Ah ; j
.eh_frame:00000000000195F5                 db    2
.eh_frame:00000000000195F6                 db    0
.eh_frame:00000000000195F7                 db    0
.eh_frame:00000000000195F8                 db    0
.eh_frame:00000000000195F9                 db  42h ; B
.eh_frame:00000000000195FA                 db  0Eh
.eh_frame:00000000000195FB                 db  10h
.eh_frame:00000000000195FC                 db  8Fh
.eh_frame:00000000000195FD                 db    2
.eh_frame:00000000000195FE                 db  42h ; B
.eh_frame:00000000000195FF                 db  0Eh
.eh_frame:0000000000019600                 db  18h
.eh_frame:0000000000019601                 db  8Eh
.eh_frame:0000000000019602                 db    3
.eh_frame:0000000000019603                 db  45h ; E
.eh_frame:0000000000019604                 db  0Eh
.eh_frame:0000000000019605                 db  20h
.eh_frame:0000000000019606                 db  8Dh
.eh_frame:0000000000019607                 db    4
.eh_frame:0000000000019608                 db  42h ; B
.eh_frame:0000000000019609                 db  0Eh
.eh_frame:000000000001960A                 db  28h ; (
.eh_frame:000000000001960B                 db  8Ch
.eh_frame:000000000001960C                 db    5
.eh_frame:000000000001960D                 db  44h ; D
.eh_frame:000000000001960E                 db  0Eh
.eh_frame:000000000001960F                 db  30h ; 0
.eh_frame:0000000000019610                 db  86h
.eh_frame:0000000000019611                 db    6
.eh_frame:0000000000019612                 db  41h ; A
.eh_frame:0000000000019613                 db  0Eh
.eh_frame:0000000000019614                 db  38h ; 8
.eh_frame:0000000000019615                 db  83h
.eh_frame:0000000000019616                 db    7
.eh_frame:0000000000019617                 db  53h ; S
.eh_frame:0000000000019618                 db  0Eh
.eh_frame:0000000000019619                 db  80h
.eh_frame:000000000001961A                 db    3
.eh_frame:000000000001961B                 db    2
.eh_frame:000000000001961C                 db  58h ; X
.eh_frame:000000000001961D                 db  0Ah
.eh_frame:000000000001961E                 db  0Eh
.eh_frame:000000000001961F                 db  38h ; 8
.eh_frame:0000000000019620                 db  41h ; A
.eh_frame:0000000000019621                 db  0Eh
.eh_frame:0000000000019622                 db  30h ; 0
.eh_frame:0000000000019623                 db  41h ; A
.eh_frame:0000000000019624                 db  0Eh
.eh_frame:0000000000019625                 db  28h ; (
.eh_frame:0000000000019626                 db  42h ; B
.eh_frame:0000000000019627                 db  0Eh
.eh_frame:0000000000019628                 db  20h
.eh_frame:0000000000019629                 db  42h ; B
.eh_frame:000000000001962A                 db  0Eh
.eh_frame:000000000001962B                 db  18h
.eh_frame:000000000001962C                 db  42h ; B
.eh_frame:000000000001962D                 db  0Eh
.eh_frame:000000000001962E                 db  10h
.eh_frame:000000000001962F                 db  42h ; B
.eh_frame:0000000000019630                 db  0Eh
.eh_frame:0000000000019631                 db    8
.eh_frame:0000000000019632                 db  4Bh ; K
.eh_frame:0000000000019633                 db  0Bh
.eh_frame:0000000000019634                 db    0
.eh_frame:0000000000019635                 db    0
.eh_frame:0000000000019636                 db    0
.eh_frame:0000000000019637                 db    0
.eh_frame:0000000000019638                 db  24h ; $
.eh_frame:0000000000019639                 db    0
.eh_frame:000000000001963A                 db    0
.eh_frame:000000000001963B                 db    0
.eh_frame:000000000001963C                 db  9Ch
.eh_frame:000000000001963D                 db  18h
.eh_frame:000000000001963E                 db    0
.eh_frame:000000000001963F                 db    0
.eh_frame:0000000000019640                 db 0F0h
.eh_frame:0000000000019641                 db  55h ; U
.eh_frame:0000000000019642                 db 0FFh
.eh_frame:0000000000019643                 db 0FFh
.eh_frame:0000000000019644                 db  71h ; q
.eh_frame:0000000000019645                 db    0
.eh_frame:0000000000019646                 db    0
.eh_frame:0000000000019647                 db    0
.eh_frame:0000000000019648                 db    0
.eh_frame:0000000000019649                 db  41h ; A
.eh_frame:000000000001964A                 db  0Eh
.eh_frame:000000000001964B                 db  10h
.eh_frame:000000000001964C                 db  83h
.eh_frame:000000000001964D                 db    2
.eh_frame:000000000001964E                 db  56h ; V
.eh_frame:000000000001964F                 db  0Eh
.eh_frame:0000000000019650                 db 0B0h
.eh_frame:0000000000019651                 db    1
.eh_frame:0000000000019652                 db    2
.eh_frame:0000000000019653                 db  4Ch ; L
.eh_frame:0000000000019654                 db  0Ah
.eh_frame:0000000000019655                 db  0Eh
.eh_frame:0000000000019656                 db  10h
.eh_frame:0000000000019657                 db  41h ; A
.eh_frame:0000000000019658                 db  0Eh
.eh_frame:0000000000019659                 db    8
.eh_frame:000000000001965A                 db  44h ; D
.eh_frame:000000000001965B                 db  0Bh
.eh_frame:000000000001965C                 db    0
.eh_frame:000000000001965D                 db    0
.eh_frame:000000000001965E                 db    0
.eh_frame:000000000001965F                 db    0
.eh_frame:0000000000019660                 db  34h ; 4
.eh_frame:0000000000019661                 db    0
.eh_frame:0000000000019662                 db    0
.eh_frame:0000000000019663                 db    0
.eh_frame:0000000000019664                 db 0C4h
.eh_frame:0000000000019665                 db  18h
.eh_frame:0000000000019666                 db    0
.eh_frame:0000000000019667                 db    0
.eh_frame:0000000000019668                 db  48h ; H
.eh_frame:0000000000019669                 db  56h ; V
.eh_frame:000000000001966A                 db 0FFh
.eh_frame:000000000001966B                 db 0FFh
.eh_frame:000000000001966C                 db  5Eh ; ^
.eh_frame:000000000001966D                 db    0
.eh_frame:000000000001966E                 db    0
.eh_frame:000000000001966F                 db    0
.eh_frame:0000000000019670                 db    0
.eh_frame:0000000000019671                 db  42h ; B
.eh_frame:0000000000019672                 db  0Eh
.eh_frame:0000000000019673                 db  10h
.eh_frame:0000000000019674                 db  8Dh
.eh_frame:0000000000019675                 db    2
.eh_frame:0000000000019676                 db  42h ; B
.eh_frame:0000000000019677                 db  0Eh
.eh_frame:0000000000019678                 db  18h
.eh_frame:0000000000019679                 db  8Ch
.eh_frame:000000000001967A                 db    3
.eh_frame:000000000001967B                 db  44h ; D
.eh_frame:000000000001967C                 db  0Eh
.eh_frame:000000000001967D                 db  20h
.eh_frame:000000000001967E                 db  86h
.eh_frame:000000000001967F                 db    4
.eh_frame:0000000000019680                 db  41h ; A
.eh_frame:0000000000019681                 db  0Eh
.eh_frame:0000000000019682                 db  28h ; (
.eh_frame:0000000000019683                 db  83h
.eh_frame:0000000000019684                 db    5
.eh_frame:0000000000019685                 db  4Ah ; J
.eh_frame:0000000000019686                 db  0Eh
.eh_frame:0000000000019687                 db  30h ; 0
.eh_frame:0000000000019688                 db    2
.eh_frame:0000000000019689                 db  41h ; A
.eh_frame:000000000001968A                 db  0Eh
.eh_frame:000000000001968B                 db  28h ; (
.eh_frame:000000000001968C                 db  44h ; D
.eh_frame:000000000001968D                 db  0Eh
.eh_frame:000000000001968E                 db  20h
.eh_frame:000000000001968F                 db  41h ; A
.eh_frame:0000000000019690                 db  0Eh
.eh_frame:0000000000019691                 db  18h
.eh_frame:0000000000019692                 db  42h ; B
.eh_frame:0000000000019693                 db  0Eh
.eh_frame:0000000000019694                 db  10h
.eh_frame:0000000000019695                 db  42h ; B
.eh_frame:0000000000019696                 db  0Eh
.eh_frame:0000000000019697                 db    8
.eh_frame:0000000000019698                 db  38h ; 8
.eh_frame:0000000000019699                 db    0
.eh_frame:000000000001969A                 db    0
.eh_frame:000000000001969B                 db    0
.eh_frame:000000000001969C                 db 0FCh
.eh_frame:000000000001969D                 db  18h
.eh_frame:000000000001969E                 db    0
.eh_frame:000000000001969F                 db    0
.eh_frame:00000000000196A0                 db  70h ; p
.eh_frame:00000000000196A1                 db  56h ; V
.eh_frame:00000000000196A2                 db 0FFh
.eh_frame:00000000000196A3                 db 0FFh
.eh_frame:00000000000196A4                 db  27h ; '
.eh_frame:00000000000196A5                 db    1
.eh_frame:00000000000196A6                 db    0
.eh_frame:00000000000196A7                 db    0
.eh_frame:00000000000196A8                 db    0
.eh_frame:00000000000196A9                 db  42h ; B
.eh_frame:00000000000196AA                 db  0Eh
.eh_frame:00000000000196AB                 db  10h
.eh_frame:00000000000196AC                 db  8Dh
.eh_frame:00000000000196AD                 db    2
.eh_frame:00000000000196AE                 db  42h ; B
.eh_frame:00000000000196AF                 db  0Eh
.eh_frame:00000000000196B0                 db  18h
.eh_frame:00000000000196B1                 db  8Ch
.eh_frame:00000000000196B2                 db    3
.eh_frame:00000000000196B3                 db  44h ; D
.eh_frame:00000000000196B4                 db  0Eh
.eh_frame:00000000000196B5                 db  20h
.eh_frame:00000000000196B6                 db  86h
.eh_frame:00000000000196B7                 db    4
.eh_frame:00000000000196B8                 db  41h ; A
.eh_frame:00000000000196B9                 db  0Eh
.eh_frame:00000000000196BA                 db  28h ; (
.eh_frame:00000000000196BB                 db  83h
.eh_frame:00000000000196BC                 db    5
.eh_frame:00000000000196BD                 db  4Fh ; O
.eh_frame:00000000000196BE                 db  0Eh
.eh_frame:00000000000196BF                 db 0E0h
.eh_frame:00000000000196C0                 db    2
.eh_frame:00000000000196C1                 db    2
.eh_frame:00000000000196C2                 db 0B5h
.eh_frame:00000000000196C3                 db  0Ah
.eh_frame:00000000000196C4                 db  0Eh
.eh_frame:00000000000196C5                 db  28h ; (
.eh_frame:00000000000196C6                 db  41h ; A
.eh_frame:00000000000196C7                 db  0Eh
.eh_frame:00000000000196C8                 db  20h
.eh_frame:00000000000196C9                 db  41h ; A
.eh_frame:00000000000196CA                 db  0Eh
.eh_frame:00000000000196CB                 db  18h
.eh_frame:00000000000196CC                 db  42h ; B
.eh_frame:00000000000196CD                 db  0Eh
.eh_frame:00000000000196CE                 db  10h
.eh_frame:00000000000196CF                 db  42h ; B
.eh_frame:00000000000196D0                 db  0Eh
.eh_frame:00000000000196D1                 db    8
.eh_frame:00000000000196D2                 db  45h ; E
.eh_frame:00000000000196D3                 db  0Bh
.eh_frame:00000000000196D4                 db  5Ch ; \
.eh_frame:00000000000196D5                 db    0
.eh_frame:00000000000196D6                 db    0
.eh_frame:00000000000196D7                 db    0
.eh_frame:00000000000196D8                 db  38h ; 8
.eh_frame:00000000000196D9                 db  19h
.eh_frame:00000000000196DA                 db    0
.eh_frame:00000000000196DB                 db    0
.eh_frame:00000000000196DC                 db  64h ; d
.eh_frame:00000000000196DD                 db  57h ; W
.eh_frame:00000000000196DE                 db 0FFh
.eh_frame:00000000000196DF                 db 0FFh
.eh_frame:00000000000196E0                 db  92h
.eh_frame:00000000000196E1                 db    0
.eh_frame:00000000000196E2                 db    0
.eh_frame:00000000000196E3                 db    0
.eh_frame:00000000000196E4                 db    0
.eh_frame:00000000000196E5                 db  42h ; B
.eh_frame:00000000000196E6                 db  0Eh
.eh_frame:00000000000196E7                 db  10h
.eh_frame:00000000000196E8                 db  8Fh
.eh_frame:00000000000196E9                 db    2
.eh_frame:00000000000196EA                 db  42h ; B
.eh_frame:00000000000196EB                 db  0Eh
.eh_frame:00000000000196EC                 db  18h
.eh_frame:00000000000196ED                 db  8Eh
.eh_frame:00000000000196EE                 db    3
.eh_frame:00000000000196EF                 db  45h ; E
.eh_frame:00000000000196F0                 db  0Eh
.eh_frame:00000000000196F1                 db  20h
.eh_frame:00000000000196F2                 db  8Dh
.eh_frame:00000000000196F3                 db    4
.eh_frame:00000000000196F4                 db  42h ; B
.eh_frame:00000000000196F5                 db  0Eh
.eh_frame:00000000000196F6                 db  28h ; (
.eh_frame:00000000000196F7                 db  8Ch
.eh_frame:00000000000196F8                 db    5
.eh_frame:00000000000196F9                 db  41h ; A
.eh_frame:00000000000196FA                 db  0Eh
.eh_frame:00000000000196FB                 db  30h ; 0
.eh_frame:00000000000196FC                 db  86h
.eh_frame:00000000000196FD                 db    6
.eh_frame:00000000000196FE                 db  41h ; A
.eh_frame:00000000000196FF                 db  0Eh
.eh_frame:0000000000019700                 db  38h ; 8
.eh_frame:0000000000019701                 db  83h
.eh_frame:0000000000019702                 db    7
.eh_frame:0000000000019703                 db  4Ah ; J
.eh_frame:0000000000019704                 db  0Eh
.eh_frame:0000000000019705                 db  50h ; P
.eh_frame:0000000000019706                 db  76h ; v
.eh_frame:0000000000019707                 db  0Ah
.eh_frame:0000000000019708                 db  0Eh
.eh_frame:0000000000019709                 db  38h ; 8
.eh_frame:000000000001970A                 db  43h ; C
.eh_frame:000000000001970B                 db  0Eh
.eh_frame:000000000001970C                 db  30h ; 0
.eh_frame:000000000001970D                 db  41h ; A
.eh_frame:000000000001970E                 db  0Eh
.eh_frame:000000000001970F                 db  28h ; (
.eh_frame:0000000000019710                 db  42h ; B
.eh_frame:0000000000019711                 db  0Eh
.eh_frame:0000000000019712                 db  20h
.eh_frame:0000000000019713                 db  42h ; B
.eh_frame:0000000000019714                 db  0Eh
.eh_frame:0000000000019715                 db  18h
.eh_frame:0000000000019716                 db  42h ; B
.eh_frame:0000000000019717                 db  0Eh
.eh_frame:0000000000019718                 db  10h
.eh_frame:0000000000019719                 db  42h ; B
.eh_frame:000000000001971A                 db  0Eh
.eh_frame:000000000001971B                 db    8
.eh_frame:000000000001971C                 db  47h ; G
.eh_frame:000000000001971D                 db  0Bh
.eh_frame:000000000001971E                 db  5Ah ; Z
.eh_frame:000000000001971F                 db  0Eh
.eh_frame:0000000000019720                 db  38h ; 8
.eh_frame:0000000000019721                 db  4Ah ; J
.eh_frame:0000000000019722                 db  0Eh
.eh_frame:0000000000019723                 db  30h ; 0
.eh_frame:0000000000019724                 db  41h ; A
.eh_frame:0000000000019725                 db  0Eh
.eh_frame:0000000000019726                 db  28h ; (
.eh_frame:0000000000019727                 db  42h ; B
.eh_frame:0000000000019728                 db  0Eh
.eh_frame:0000000000019729                 db  20h
.eh_frame:000000000001972A                 db  42h ; B
.eh_frame:000000000001972B                 db  0Eh
.eh_frame:000000000001972C                 db  18h
.eh_frame:000000000001972D                 db  42h ; B
.eh_frame:000000000001972E                 db  0Eh
.eh_frame:000000000001972F                 db  10h
.eh_frame:0000000000019730                 db  42h ; B
.eh_frame:0000000000019731                 db  0Eh
.eh_frame:0000000000019732                 db    8
.eh_frame:0000000000019733                 db    0
.eh_frame:0000000000019734                 db  10h
.eh_frame:0000000000019735                 db    0
.eh_frame:0000000000019736                 db    0
.eh_frame:0000000000019737                 db    0
.eh_frame:0000000000019738                 db  98h
.eh_frame:0000000000019739                 db  19h
.eh_frame:000000000001973A                 db    0
.eh_frame:000000000001973B                 db    0
.eh_frame:000000000001973C                 db 0A4h
.eh_frame:000000000001973D                 db  57h ; W
.eh_frame:000000000001973E                 db 0FFh
.eh_frame:000000000001973F                 db 0FFh
.eh_frame:0000000000019740                 db  12h
.eh_frame:0000000000019741                 db    0
.eh_frame:0000000000019742                 db    0
.eh_frame:0000000000019743                 db    0
.eh_frame:0000000000019744                 db    0
.eh_frame:0000000000019745                 db    0
.eh_frame:0000000000019746                 db    0
.eh_frame:0000000000019747                 db    0
.eh_frame:0000000000019748                 db  10h
.eh_frame:0000000000019749                 db    0
.eh_frame:000000000001974A                 db    0
.eh_frame:000000000001974B                 db    0
.eh_frame:000000000001974C                 db 0ACh
.eh_frame:000000000001974D                 db  19h
.eh_frame:000000000001974E                 db    0
.eh_frame:000000000001974F                 db    0
.eh_frame:0000000000019750                 db 0B0h
.eh_frame:0000000000019751                 db  57h ; W
.eh_frame:0000000000019752                 db 0FFh
.eh_frame:0000000000019753                 db 0FFh
.eh_frame:0000000000019754                 db  1Eh
.eh_frame:0000000000019755                 db    0
.eh_frame:0000000000019756                 db    0
.eh_frame:0000000000019757                 db    0
.eh_frame:0000000000019758                 db    0
.eh_frame:0000000000019759                 db    0
.eh_frame:000000000001975A                 db    0
.eh_frame:000000000001975B                 db    0
.eh_frame:000000000001975C                 db  10h
.eh_frame:000000000001975D                 db    0
.eh_frame:000000000001975E                 db    0
.eh_frame:000000000001975F                 db    0
.eh_frame:0000000000019760                 db 0C0h
.eh_frame:0000000000019761                 db  19h
.eh_frame:0000000000019762                 db    0
.eh_frame:0000000000019763                 db    0
.eh_frame:0000000000019764                 db 0BCh
.eh_frame:0000000000019765                 db  57h ; W
.eh_frame:0000000000019766                 db 0FFh
.eh_frame:0000000000019767                 db 0FFh
.eh_frame:0000000000019768                 db  0Bh
.eh_frame:0000000000019769                 db    0
.eh_frame:000000000001976A                 db    0
.eh_frame:000000000001976B                 db    0
.eh_frame:000000000001976C                 db    0
.eh_frame:000000000001976D                 db    0
.eh_frame:000000000001976E                 db    0
.eh_frame:000000000001976F                 db    0
.eh_frame:0000000000019770                 db  4Ch ; L
.eh_frame:0000000000019771                 db    0
.eh_frame:0000000000019772                 db    0
.eh_frame:0000000000019773                 db    0
.eh_frame:0000000000019774                 db 0D4h
.eh_frame:0000000000019775                 db  19h
.eh_frame:0000000000019776                 db    0
.eh_frame:0000000000019777                 db    0
.eh_frame:0000000000019778                 db 0B8h
.eh_frame:0000000000019779                 db  57h ; W
.eh_frame:000000000001977A                 db 0FFh
.eh_frame:000000000001977B                 db 0FFh
.eh_frame:000000000001977C                 db  78h ; x
.eh_frame:000000000001977D                 db    3
.eh_frame:000000000001977E                 db    0
.eh_frame:000000000001977F                 db    0
.eh_frame:0000000000019780                 db    0
.eh_frame:0000000000019781                 db  42h ; B
.eh_frame:0000000000019782                 db  0Eh
.eh_frame:0000000000019783                 db  10h
.eh_frame:0000000000019784                 db  8Fh
.eh_frame:0000000000019785                 db    2
.eh_frame:0000000000019786                 db  49h ; I
.eh_frame:0000000000019787                 db  0Eh
.eh_frame:0000000000019788                 db  18h
.eh_frame:0000000000019789                 db  8Eh
.eh_frame:000000000001978A                 db    3
.eh_frame:000000000001978B                 db  42h ; B
.eh_frame:000000000001978C                 db  0Eh
.eh_frame:000000000001978D                 db  20h
.eh_frame:000000000001978E                 db  8Dh
.eh_frame:000000000001978F                 db    4
.eh_frame:0000000000019790                 db  42h ; B
.eh_frame:0000000000019791                 db  0Eh
.eh_frame:0000000000019792                 db  28h ; (
.eh_frame:0000000000019793                 db  8Ch
.eh_frame:0000000000019794                 db    5
.eh_frame:0000000000019795                 db  43h ; C
.eh_frame:0000000000019796                 db  0Eh
.eh_frame:0000000000019797                 db  30h ; 0
.eh_frame:0000000000019798                 db  86h
.eh_frame:0000000000019799                 db    6
.eh_frame:000000000001979A                 db  41h ; A
.eh_frame:000000000001979B                 db  0Eh
.eh_frame:000000000001979C                 db  38h ; 8
.eh_frame:000000000001979D                 db  83h
.eh_frame:000000000001979E                 db    7
.eh_frame:000000000001979F                 db  44h ; D
.eh_frame:00000000000197A0                 db  0Eh
.eh_frame:00000000000197A1                 db  80h
.eh_frame:00000000000197A2                 db    1
.eh_frame:00000000000197A3                 db    3
.eh_frame:00000000000197A4                 db  48h ; H
.eh_frame:00000000000197A5                 db    1
.eh_frame:00000000000197A6                 db  0Ah
.eh_frame:00000000000197A7                 db  0Eh
.eh_frame:00000000000197A8                 db  38h ; 8
.eh_frame:00000000000197A9                 db  44h ; D
.eh_frame:00000000000197AA                 db  0Eh
.eh_frame:00000000000197AB                 db  30h ; 0
.eh_frame:00000000000197AC                 db  41h ; A
.eh_frame:00000000000197AD                 db  0Eh
.eh_frame:00000000000197AE                 db  28h ; (
.eh_frame:00000000000197AF                 db  42h ; B
.eh_frame:00000000000197B0                 db  0Eh
.eh_frame:00000000000197B1                 db  20h
.eh_frame:00000000000197B2                 db  42h ; B
.eh_frame:00000000000197B3                 db  0Eh
.eh_frame:00000000000197B4                 db  18h
.eh_frame:00000000000197B5                 db  42h ; B
.eh_frame:00000000000197B6                 db  0Eh
.eh_frame:00000000000197B7                 db  10h
.eh_frame:00000000000197B8                 db  42h ; B
.eh_frame:00000000000197B9                 db  0Eh
.eh_frame:00000000000197BA                 db    8
.eh_frame:00000000000197BB                 db  44h ; D
.eh_frame:00000000000197BC                 db  0Bh
.eh_frame:00000000000197BD                 db    0
.eh_frame:00000000000197BE                 db    0
.eh_frame:00000000000197BF                 db    0
.eh_frame:00000000000197C0                 db  2Ch ; ,
.eh_frame:00000000000197C1                 db    0
.eh_frame:00000000000197C2                 db    0
.eh_frame:00000000000197C3                 db    0
.eh_frame:00000000000197C4                 db  24h ; $
.eh_frame:00000000000197C5                 db  1Ah
.eh_frame:00000000000197C6                 db    0
.eh_frame:00000000000197C7                 db    0
.eh_frame:00000000000197C8                 db 0E8h
.eh_frame:00000000000197C9                 db  5Ah ; Z
.eh_frame:00000000000197CA                 db 0FFh
.eh_frame:00000000000197CB                 db 0FFh
.eh_frame:00000000000197CC                 db  5Ah ; Z
.eh_frame:00000000000197CD                 db    0
.eh_frame:00000000000197CE                 db    0
.eh_frame:00000000000197CF                 db    0
.eh_frame:00000000000197D0                 db    0
.eh_frame:00000000000197D1                 db  42h ; B
.eh_frame:00000000000197D2                 db  0Eh
.eh_frame:00000000000197D3                 db  10h
.eh_frame:00000000000197D4                 db  8Ch
.eh_frame:00000000000197D5                 db    2
.eh_frame:00000000000197D6                 db  41h ; A
.eh_frame:00000000000197D7                 db  0Eh
.eh_frame:00000000000197D8                 db  18h
.eh_frame:00000000000197D9                 db  86h
.eh_frame:00000000000197DA                 db    3
.eh_frame:00000000000197DB                 db  43h ; C
.eh_frame:00000000000197DC                 db  0Eh
.eh_frame:00000000000197DD                 db  20h
.eh_frame:00000000000197DE                 db  83h
.eh_frame:00000000000197DF                 db    4
.eh_frame:00000000000197E0                 db  6Ah ; j
.eh_frame:00000000000197E1                 db  0Ah
.eh_frame:00000000000197E2                 db  0Eh
.eh_frame:00000000000197E3                 db  18h
.eh_frame:00000000000197E4                 db  41h ; A
.eh_frame:00000000000197E5                 db  0Eh
.eh_frame:00000000000197E6                 db  10h
.eh_frame:00000000000197E7                 db  42h ; B
.eh_frame:00000000000197E8                 db  0Eh
.eh_frame:00000000000197E9                 db    8
.eh_frame:00000000000197EA                 db  45h ; E
.eh_frame:00000000000197EB                 db  0Bh
.eh_frame:00000000000197EC                 db    0
.eh_frame:00000000000197ED                 db    0
.eh_frame:00000000000197EE                 db    0
.eh_frame:00000000000197EF                 db    0
.eh_frame:00000000000197F0                 db  20h
.eh_frame:00000000000197F1                 db    0
.eh_frame:00000000000197F2                 db    0
.eh_frame:00000000000197F3                 db    0
.eh_frame:00000000000197F4                 db  54h ; T
.eh_frame:00000000000197F5                 db  1Ah
.eh_frame:00000000000197F6                 db    0
.eh_frame:00000000000197F7                 db    0
.eh_frame:00000000000197F8                 db  18h
.eh_frame:00000000000197F9                 db  5Bh ; [
.eh_frame:00000000000197FA                 db 0FFh
.eh_frame:00000000000197FB                 db 0FFh
.eh_frame:00000000000197FC                 db  7Ch ; |
.eh_frame:00000000000197FD                 db    0
.eh_frame:00000000000197FE                 db    0
.eh_frame:00000000000197FF                 db    0
.eh_frame:0000000000019800                 db    0
.eh_frame:0000000000019801                 db  41h ; A
.eh_frame:0000000000019802                 db  0Eh
.eh_frame:0000000000019803                 db  10h
.eh_frame:0000000000019804                 db  83h
.eh_frame:0000000000019805                 db    2
.eh_frame:0000000000019806                 db  4Fh ; O
.eh_frame:0000000000019807                 db  0Eh
.eh_frame:0000000000019808                 db 0B0h
.eh_frame:0000000000019809                 db    1
.eh_frame:000000000001980A                 db    2
.eh_frame:000000000001980B                 db  65h ; e
.eh_frame:000000000001980C                 db  0Ah
.eh_frame:000000000001980D                 db  0Eh
.eh_frame:000000000001980E                 db  10h
.eh_frame:000000000001980F                 db  41h ; A
.eh_frame:0000000000019810                 db  0Eh
.eh_frame:0000000000019811                 db    8
.eh_frame:0000000000019812                 db  41h ; A
.eh_frame:0000000000019813                 db  0Bh
.eh_frame:0000000000019814                 db  10h
.eh_frame:0000000000019815                 db    0
.eh_frame:0000000000019816                 db    0
.eh_frame:0000000000019817                 db    0
.eh_frame:0000000000019818                 db  78h ; x
.eh_frame:0000000000019819                 db  1Ah
.eh_frame:000000000001981A                 db    0
.eh_frame:000000000001981B                 db    0
.eh_frame:000000000001981C                 db  74h ; t
.eh_frame:000000000001981D                 db  5Bh ; [
.eh_frame:000000000001981E                 db 0FFh
.eh_frame:000000000001981F                 db 0FFh
.eh_frame:0000000000019820                 db  0Ah
.eh_frame:0000000000019821                 db    0
.eh_frame:0000000000019822                 db    0
.eh_frame:0000000000019823                 db    0
.eh_frame:0000000000019824                 db    0
.eh_frame:0000000000019825                 db    0
.eh_frame:0000000000019826                 db    0
.eh_frame:0000000000019827                 db    0
.eh_frame:0000000000019828                 db  10h
.eh_frame:0000000000019829                 db    0
.eh_frame:000000000001982A                 db    0
.eh_frame:000000000001982B                 db    0
.eh_frame:000000000001982C                 db  8Ch
.eh_frame:000000000001982D                 db  1Ah
.eh_frame:000000000001982E                 db    0
.eh_frame:000000000001982F                 db    0
.eh_frame:0000000000019830                 db  70h ; p
.eh_frame:0000000000019831                 db  5Bh ; [
.eh_frame:0000000000019832                 db 0FFh
.eh_frame:0000000000019833                 db 0FFh
.eh_frame:0000000000019834                 db  16h
.eh_frame:0000000000019835                 db    0
.eh_frame:0000000000019836                 db    0
.eh_frame:0000000000019837                 db    0
.eh_frame:0000000000019838                 db    0
.eh_frame:0000000000019839                 db    0
.eh_frame:000000000001983A                 db    0
.eh_frame:000000000001983B                 db    0
.eh_frame:000000000001983C                 db  48h ; H
.eh_frame:000000000001983D                 db    0
.eh_frame:000000000001983E                 db    0
.eh_frame:000000000001983F                 db    0
.eh_frame:0000000000019840                 db 0A0h
.eh_frame:0000000000019841                 db  1Ah
.eh_frame:0000000000019842                 db    0
.eh_frame:0000000000019843                 db    0
.eh_frame:0000000000019844                 db  7Ch ; |
.eh_frame:0000000000019845                 db  5Bh ; [
.eh_frame:0000000000019846                 db 0FFh
.eh_frame:0000000000019847                 db 0FFh
.eh_frame:0000000000019848                 db  74h ; t
.eh_frame:0000000000019849                 db    1
.eh_frame:000000000001984A                 db    0
.eh_frame:000000000001984B                 db    0
.eh_frame:000000000001984C                 db    0
.eh_frame:000000000001984D                 db  42h ; B
.eh_frame:000000000001984E                 db  0Eh
.eh_frame:000000000001984F                 db  10h
.eh_frame:0000000000019850                 db  8Fh
.eh_frame:0000000000019851                 db    2
.eh_frame:0000000000019852                 db  42h ; B
.eh_frame:0000000000019853                 db  0Eh
.eh_frame:0000000000019854                 db  18h
.eh_frame:0000000000019855                 db  8Eh
.eh_frame:0000000000019856                 db    3
.eh_frame:0000000000019857                 db  45h ; E
.eh_frame:0000000000019858                 db  0Eh
.eh_frame:0000000000019859                 db  20h
.eh_frame:000000000001985A                 db  8Dh
.eh_frame:000000000001985B                 db    4
.eh_frame:000000000001985C                 db  42h ; B
.eh_frame:000000000001985D                 db  0Eh
.eh_frame:000000000001985E                 db  28h ; (
.eh_frame:000000000001985F                 db  8Ch
.eh_frame:0000000000019860                 db    5
.eh_frame:0000000000019861                 db  44h ; D
.eh_frame:0000000000019862                 db  0Eh
.eh_frame:0000000000019863                 db  30h ; 0
.eh_frame:0000000000019864                 db  86h
.eh_frame:0000000000019865                 db    6
.eh_frame:0000000000019866                 db  41h ; A
.eh_frame:0000000000019867                 db  0Eh
.eh_frame:0000000000019868                 db  38h ; 8
.eh_frame:0000000000019869                 db  83h
.eh_frame:000000000001986A                 db    7
.eh_frame:000000000001986B                 db  46h ; F
.eh_frame:000000000001986C                 db  0Eh
.eh_frame:000000000001986D                 db  70h ; p
.eh_frame:000000000001986E                 db    3
.eh_frame:000000000001986F                 db  31h ; 1
.eh_frame:0000000000019870                 db    1
.eh_frame:0000000000019871                 db  0Ah
.eh_frame:0000000000019872                 db  0Eh
.eh_frame:0000000000019873                 db  38h ; 8
.eh_frame:0000000000019874                 db  43h ; C
.eh_frame:0000000000019875                 db  0Eh
.eh_frame:0000000000019876                 db  30h ; 0
.eh_frame:0000000000019877                 db  41h ; A
.eh_frame:0000000000019878                 db  0Eh
.eh_frame:0000000000019879                 db  28h ; (
.eh_frame:000000000001987A                 db  42h ; B
.eh_frame:000000000001987B                 db  0Eh
.eh_frame:000000000001987C                 db  20h
.eh_frame:000000000001987D                 db  42h ; B
.eh_frame:000000000001987E                 db  0Eh
.eh_frame:000000000001987F                 db  18h
.eh_frame:0000000000019880                 db  42h ; B
.eh_frame:0000000000019881                 db  0Eh
.eh_frame:0000000000019882                 db  10h
.eh_frame:0000000000019883                 db  42h ; B
.eh_frame:0000000000019884                 db  0Eh
.eh_frame:0000000000019885                 db    8
.eh_frame:0000000000019886                 db  41h ; A
.eh_frame:0000000000019887                 db  0Bh
.eh_frame:0000000000019888                 db  20h
.eh_frame:0000000000019889                 db    0
.eh_frame:000000000001988A                 db    0
.eh_frame:000000000001988B                 db    0
.eh_frame:000000000001988C                 db 0ECh
.eh_frame:000000000001988D                 db  1Ah
.eh_frame:000000000001988E                 db    0
.eh_frame:000000000001988F                 db    0
.eh_frame:0000000000019890                 db 0B0h
.eh_frame:0000000000019891                 db  5Ch ; \
.eh_frame:0000000000019892                 db 0FFh
.eh_frame:0000000000019893                 db 0FFh
.eh_frame:0000000000019894                 db  86h
.eh_frame:0000000000019895                 db    0
.eh_frame:0000000000019896                 db    0
.eh_frame:0000000000019897                 db    0
.eh_frame:0000000000019898                 db    0
.eh_frame:0000000000019899                 db  44h ; D
.eh_frame:000000000001989A                 db  0Eh
.eh_frame:000000000001989B                 db  20h
.eh_frame:000000000001989C                 db    2
.eh_frame:000000000001989D                 db  49h ; I
.eh_frame:000000000001989E                 db  0Ah
.eh_frame:000000000001989F                 db  0Eh
.eh_frame:00000000000198A0                 db    8
.eh_frame:00000000000198A1                 db  43h ; C
.eh_frame:00000000000198A2                 db  0Bh
.eh_frame:00000000000198A3                 db  55h ; U
.eh_frame:00000000000198A4                 db  0Ah
.eh_frame:00000000000198A5                 db  0Eh
.eh_frame:00000000000198A6                 db    8
.eh_frame:00000000000198A7                 db  4Bh ; K
.eh_frame:00000000000198A8                 db  0Bh
.eh_frame:00000000000198A9                 db  55h ; U
.eh_frame:00000000000198AA                 db  0Eh
.eh_frame:00000000000198AB                 db    8
.eh_frame:00000000000198AC                 db  10h
.eh_frame:00000000000198AD                 db    0
.eh_frame:00000000000198AE                 db    0
.eh_frame:00000000000198AF                 db    0
.eh_frame:00000000000198B0                 db  10h
.eh_frame:00000000000198B1                 db  1Bh
.eh_frame:00000000000198B2                 db    0
.eh_frame:00000000000198B3                 db    0
.eh_frame:00000000000198B4                 db  1Ch
.eh_frame:00000000000198B5                 db  5Dh ; ]
.eh_frame:00000000000198B6                 db 0FFh
.eh_frame:00000000000198B7                 db 0FFh
.eh_frame:00000000000198B8                 db  0Bh
.eh_frame:00000000000198B9                 db    0
.eh_frame:00000000000198BA                 db    0
.eh_frame:00000000000198BB                 db    0
.eh_frame:00000000000198BC                 db    0
.eh_frame:00000000000198BD                 db    0
.eh_frame:00000000000198BE                 db    0
.eh_frame:00000000000198BF                 db    0
.eh_frame:00000000000198C0                 db  14h
.eh_frame:00000000000198C1                 db    0
.eh_frame:00000000000198C2                 db    0
.eh_frame:00000000000198C3                 db    0
.eh_frame:00000000000198C4                 db  24h ; $
.eh_frame:00000000000198C5                 db  1Bh
.eh_frame:00000000000198C6                 db    0
.eh_frame:00000000000198C7                 db    0
.eh_frame:00000000000198C8                 db  18h
.eh_frame:00000000000198C9                 db  5Dh ; ]
.eh_frame:00000000000198CA                 db 0FFh
.eh_frame:00000000000198CB                 db 0FFh
.eh_frame:00000000000198CC                 db  0Bh
.eh_frame:00000000000198CD                 db    0
.eh_frame:00000000000198CE                 db    0
.eh_frame:00000000000198CF                 db    0
.eh_frame:00000000000198D0                 db    0
.eh_frame:00000000000198D1                 db    0
.eh_frame:00000000000198D2                 db    0
.eh_frame:00000000000198D3                 db    0
.eh_frame:00000000000198D4                 db    0
.eh_frame:00000000000198D5                 db    0
.eh_frame:00000000000198D6                 db    0
.eh_frame:00000000000198D7                 db    0
.eh_frame:00000000000198D8                 db  34h ; 4
.eh_frame:00000000000198D9                 db    0
.eh_frame:00000000000198DA                 db    0
.eh_frame:00000000000198DB                 db    0
.eh_frame:00000000000198DC                 db  3Ch ; <
.eh_frame:00000000000198DD                 db  1Bh
.eh_frame:00000000000198DE                 db    0
.eh_frame:00000000000198DF                 db    0
.eh_frame:00000000000198E0                 db  10h
.eh_frame:00000000000198E1                 db  5Dh ; ]
.eh_frame:00000000000198E2                 db 0FFh
.eh_frame:00000000000198E3                 db 0FFh
.eh_frame:00000000000198E4                 db  3Fh ; ?
.eh_frame:00000000000198E5                 db    0
.eh_frame:00000000000198E6                 db    0
.eh_frame:00000000000198E7                 db    0
.eh_frame:00000000000198E8                 db    0
.eh_frame:00000000000198E9                 db  42h ; B
.eh_frame:00000000000198EA                 db  0Eh
.eh_frame:00000000000198EB                 db  10h
.eh_frame:00000000000198EC                 db  8Dh
.eh_frame:00000000000198ED                 db    2
.eh_frame:00000000000198EE                 db  42h ; B
.eh_frame:00000000000198EF                 db  0Eh
.eh_frame:00000000000198F0                 db  18h
.eh_frame:00000000000198F1                 db  8Ch
.eh_frame:00000000000198F2                 db    3
.eh_frame:00000000000198F3                 db  41h ; A
.eh_frame:00000000000198F4                 db  0Eh
.eh_frame:00000000000198F5                 db  20h
.eh_frame:00000000000198F6                 db  86h
.eh_frame:00000000000198F7                 db    4
.eh_frame:00000000000198F8                 db  41h ; A
.eh_frame:00000000000198F9                 db  0Eh
.eh_frame:00000000000198FA                 db  28h ; (
.eh_frame:00000000000198FB                 db  83h
.eh_frame:00000000000198FC                 db    5
.eh_frame:00000000000198FD                 db  46h ; F
.eh_frame:00000000000198FE                 db  0Eh
.eh_frame:00000000000198FF                 db  30h ; 0
.eh_frame:0000000000019900                 db  6Ah ; j
.eh_frame:0000000000019901                 db  0Eh
.eh_frame:0000000000019902                 db  28h ; (
.eh_frame:0000000000019903                 db  43h ; C
.eh_frame:0000000000019904                 db  0Eh
.eh_frame:0000000000019905                 db  20h
.eh_frame:0000000000019906                 db  41h ; A
.eh_frame:0000000000019907                 db  0Eh
.eh_frame:0000000000019908                 db  18h
.eh_frame:0000000000019909                 db  42h ; B
.eh_frame:000000000001990A                 db  0Eh
.eh_frame:000000000001990B                 db  10h
.eh_frame:000000000001990C                 db  42h ; B
.eh_frame:000000000001990D                 db  0Eh
.eh_frame:000000000001990E                 db    8
.eh_frame:000000000001990F                 db    0
.eh_frame:0000000000019910                 db  10h
.eh_frame:0000000000019911                 db    0
.eh_frame:0000000000019912                 db    0
.eh_frame:0000000000019913                 db    0
.eh_frame:0000000000019914                 db  74h ; t
.eh_frame:0000000000019915                 db  1Bh
.eh_frame:0000000000019916                 db    0
.eh_frame:0000000000019917                 db    0
.eh_frame:0000000000019918                 db  18h
.eh_frame:0000000000019919                 db  5Dh ; ]
.eh_frame:000000000001991A                 db 0FFh
.eh_frame:000000000001991B                 db 0FFh
.eh_frame:000000000001991C                 db  0Ch
.eh_frame:000000000001991D                 db    0
.eh_frame:000000000001991E                 db    0
.eh_frame:000000000001991F                 db    0
.eh_frame:0000000000019920                 db    0
.eh_frame:0000000000019921                 db    0
.eh_frame:0000000000019922                 db    0
.eh_frame:0000000000019923                 db    0
.eh_frame:0000000000019924                 db  10h
.eh_frame:0000000000019925                 db    0
.eh_frame:0000000000019926                 db    0
.eh_frame:0000000000019927                 db    0
.eh_frame:0000000000019928                 db  88h
.eh_frame:0000000000019929                 db  1Bh
.eh_frame:000000000001992A                 db    0
.eh_frame:000000000001992B                 db    0
.eh_frame:000000000001992C                 db  14h
.eh_frame:000000000001992D                 db  5Dh ; ]
.eh_frame:000000000001992E                 db 0FFh
.eh_frame:000000000001992F                 db 0FFh
.eh_frame:0000000000019930                 db  0Ah
.eh_frame:0000000000019931                 db    0
.eh_frame:0000000000019932                 db    0
.eh_frame:0000000000019933                 db    0
.eh_frame:0000000000019934                 db    0
.eh_frame:0000000000019935                 db    0
.eh_frame:0000000000019936                 db    0
.eh_frame:0000000000019937                 db    0
.eh_frame:0000000000019938                 db  4Ch ; L
.eh_frame:0000000000019939                 db    0
.eh_frame:000000000001993A                 db    0
.eh_frame:000000000001993B                 db    0
.eh_frame:000000000001993C                 db  9Ch
.eh_frame:000000000001993D                 db  1Bh
.eh_frame:000000000001993E                 db    0
.eh_frame:000000000001993F                 db    0
.eh_frame:0000000000019940                 db  10h
.eh_frame:0000000000019941                 db  5Dh ; ]
.eh_frame:0000000000019942                 db 0FFh
.eh_frame:0000000000019943                 db 0FFh
.eh_frame:0000000000019944                 db  7Eh ; ~
.eh_frame:0000000000019945                 db    7
.eh_frame:0000000000019946                 db    0
.eh_frame:0000000000019947                 db    0
.eh_frame:0000000000019948                 db    0
.eh_frame:0000000000019949                 db  42h ; B
.eh_frame:000000000001994A                 db  0Eh
.eh_frame:000000000001994B                 db  10h
.eh_frame:000000000001994C                 db  8Fh
.eh_frame:000000000001994D                 db    2
.eh_frame:000000000001994E                 db  42h ; B
.eh_frame:000000000001994F                 db  0Eh
.eh_frame:0000000000019950                 db  18h
.eh_frame:0000000000019951                 db  8Eh
.eh_frame:0000000000019952                 db    3
.eh_frame:0000000000019953                 db  42h ; B
.eh_frame:0000000000019954                 db  0Eh
.eh_frame:0000000000019955                 db  20h
.eh_frame:0000000000019956                 db  8Dh
.eh_frame:0000000000019957                 db    4
.eh_frame:0000000000019958                 db  42h ; B
.eh_frame:0000000000019959                 db  0Eh
.eh_frame:000000000001995A                 db  28h ; (
.eh_frame:000000000001995B                 db  8Ch
.eh_frame:000000000001995C                 db    5
.eh_frame:000000000001995D                 db  41h ; A
.eh_frame:000000000001995E                 db  0Eh
.eh_frame:000000000001995F                 db  30h ; 0
.eh_frame:0000000000019960                 db  86h
.eh_frame:0000000000019961                 db    6
.eh_frame:0000000000019962                 db  41h ; A
.eh_frame:0000000000019963                 db  0Eh
.eh_frame:0000000000019964                 db  38h ; 8
.eh_frame:0000000000019965                 db  83h
.eh_frame:0000000000019966                 db    7
.eh_frame:0000000000019967                 db  4Dh ; M
.eh_frame:0000000000019968                 db  0Eh
.eh_frame:0000000000019969                 db 0E0h
.eh_frame:000000000001996A                 db    2
.eh_frame:000000000001996B                 db    3
.eh_frame:000000000001996C                 db  48h ; H
.eh_frame:000000000001996D                 db    1
.eh_frame:000000000001996E                 db  0Ah
.eh_frame:000000000001996F                 db  0Eh
.eh_frame:0000000000019970                 db  38h ; 8
.eh_frame:0000000000019971                 db  41h ; A
.eh_frame:0000000000019972                 db  0Eh
.eh_frame:0000000000019973                 db  30h ; 0
.eh_frame:0000000000019974                 db  41h ; A
.eh_frame:0000000000019975                 db  0Eh
.eh_frame:0000000000019976                 db  28h ; (
.eh_frame:0000000000019977                 db  42h ; B
.eh_frame:0000000000019978                 db  0Eh
.eh_frame:0000000000019979                 db  20h
.eh_frame:000000000001997A                 db  42h ; B
.eh_frame:000000000001997B                 db  0Eh
.eh_frame:000000000001997C                 db  18h
.eh_frame:000000000001997D                 db  42h ; B
.eh_frame:000000000001997E                 db  0Eh
.eh_frame:000000000001997F                 db  10h
.eh_frame:0000000000019980                 db  42h ; B
.eh_frame:0000000000019981                 db  0Eh
.eh_frame:0000000000019982                 db    8
.eh_frame:0000000000019983                 db  47h ; G
.eh_frame:0000000000019984                 db  0Bh
.eh_frame:0000000000019985                 db    0
.eh_frame:0000000000019986                 db    0
.eh_frame:0000000000019987                 db    0
.eh_frame:0000000000019988                 db  14h
.eh_frame:0000000000019989                 db    0
.eh_frame:000000000001998A                 db    0
.eh_frame:000000000001998B                 db    0
.eh_frame:000000000001998C                 db 0ECh
.eh_frame:000000000001998D                 db  1Bh
.eh_frame:000000000001998E                 db    0
.eh_frame:000000000001998F                 db    0
.eh_frame:0000000000019990                 db  40h ; @
.eh_frame:0000000000019991                 db  64h ; d
.eh_frame:0000000000019992                 db 0FFh
.eh_frame:0000000000019993                 db 0FFh
.eh_frame:0000000000019994                 db  16h
.eh_frame:0000000000019995                 db    0
.eh_frame:0000000000019996                 db    0
.eh_frame:0000000000019997                 db    0
.eh_frame:0000000000019998                 db    0
.eh_frame:0000000000019999                 db    0
.eh_frame:000000000001999A                 db    0
.eh_frame:000000000001999B                 db    0
.eh_frame:000000000001999C                 db    0
.eh_frame:000000000001999D                 db    0
.eh_frame:000000000001999E                 db    0
.eh_frame:000000000001999F                 db    0
.eh_frame:00000000000199A0                 db  40h ; @
.eh_frame:00000000000199A1                 db    0
.eh_frame:00000000000199A2                 db    0
.eh_frame:00000000000199A3                 db    0
.eh_frame:00000000000199A4                 db    4
.eh_frame:00000000000199A5                 db  1Ch
.eh_frame:00000000000199A6                 db    0
.eh_frame:00000000000199A7                 db    0
.eh_frame:00000000000199A8                 db  48h ; H
.eh_frame:00000000000199A9                 db  64h ; d
.eh_frame:00000000000199AA                 db 0FFh
.eh_frame:00000000000199AB                 db 0FFh
.eh_frame:00000000000199AC                 db 0D6h
.eh_frame:00000000000199AD                 db    0
.eh_frame:00000000000199AE                 db    0
.eh_frame:00000000000199AF                 db    0
.eh_frame:00000000000199B0                 db    0
.eh_frame:00000000000199B1                 db  41h ; A
.eh_frame:00000000000199B2                 db  0Eh
.eh_frame:00000000000199B3                 db  10h
.eh_frame:00000000000199B4                 db  86h
.eh_frame:00000000000199B5                 db    2
.eh_frame:00000000000199B6                 db  41h ; A
.eh_frame:00000000000199B7                 db  0Eh
.eh_frame:00000000000199B8                 db  18h
.eh_frame:00000000000199B9                 db  83h
.eh_frame:00000000000199BA                 db    3
.eh_frame:00000000000199BB                 db  47h ; G
.eh_frame:00000000000199BC                 db  0Eh
.eh_frame:00000000000199BD                 db  30h ; 0
.eh_frame:00000000000199BE                 db  73h ; s
.eh_frame:00000000000199BF                 db  0Ah
.eh_frame:00000000000199C0                 db  0Eh
.eh_frame:00000000000199C1                 db  18h
.eh_frame:00000000000199C2                 db  41h ; A
.eh_frame:00000000000199C3                 db  0Eh
.eh_frame:00000000000199C4                 db  10h
.eh_frame:00000000000199C5                 db  41h ; A
.eh_frame:00000000000199C6                 db  0Eh
.eh_frame:00000000000199C7                 db    8
.eh_frame:00000000000199C8                 db  42h ; B
.eh_frame:00000000000199C9                 db  0Bh
.eh_frame:00000000000199CA                 db  72h ; r
.eh_frame:00000000000199CB                 db  0Ah
.eh_frame:00000000000199CC                 db  0Eh
.eh_frame:00000000000199CD                 db  18h
.eh_frame:00000000000199CE                 db  43h ; C
.eh_frame:00000000000199CF                 db  0Eh
.eh_frame:00000000000199D0                 db  10h
.eh_frame:00000000000199D1                 db  41h ; A
.eh_frame:00000000000199D2                 db  0Eh
.eh_frame:00000000000199D3                 db    8
.eh_frame:00000000000199D4                 db  4Ah ; J
.eh_frame:00000000000199D5                 db  0Bh
.eh_frame:00000000000199D6                 db  7Eh ; ~
.eh_frame:00000000000199D7                 db  0Ah
.eh_frame:00000000000199D8                 db  0Eh
.eh_frame:00000000000199D9                 db  18h
.eh_frame:00000000000199DA                 db  41h ; A
.eh_frame:00000000000199DB                 db  0Eh
.eh_frame:00000000000199DC                 db  10h
.eh_frame:00000000000199DD                 db  41h ; A
.eh_frame:00000000000199DE                 db  0Eh
.eh_frame:00000000000199DF                 db    8
.eh_frame:00000000000199E0                 db  48h ; H
.eh_frame:00000000000199E1                 db  0Bh
.eh_frame:00000000000199E2                 db    0
.eh_frame:00000000000199E3                 db    0
.eh_frame:00000000000199E4                 db  14h
.eh_frame:00000000000199E5                 db    0
.eh_frame:00000000000199E6                 db    0
.eh_frame:00000000000199E7                 db    0
.eh_frame:00000000000199E8                 db  48h ; H
.eh_frame:00000000000199E9                 db  1Ch
.eh_frame:00000000000199EA                 db    0
.eh_frame:00000000000199EB                 db    0
.eh_frame:00000000000199EC                 db 0E4h
.eh_frame:00000000000199ED                 db  64h ; d
.eh_frame:00000000000199EE                 db 0FFh
.eh_frame:00000000000199EF                 db 0FFh
.eh_frame:00000000000199F0                 db 0A9h
.eh_frame:00000000000199F1                 db    0
.eh_frame:00000000000199F2                 db    0
.eh_frame:00000000000199F3                 db    0
.eh_frame:00000000000199F4                 db    0
.eh_frame:00000000000199F5                 db    2
.eh_frame:00000000000199F6                 db  94h
.eh_frame:00000000000199F7                 db  0Eh
.eh_frame:00000000000199F8                 db  10h
.eh_frame:00000000000199F9                 db  54h ; T
.eh_frame:00000000000199FA                 db  0Eh
.eh_frame:00000000000199FB                 db    8
.eh_frame:00000000000199FC                 db  10h
.eh_frame:00000000000199FD                 db    0
.eh_frame:00000000000199FE                 db    0
.eh_frame:00000000000199FF                 db    0
.eh_frame:0000000000019A00                 db  60h ; `
.eh_frame:0000000000019A01                 db  1Ch
.eh_frame:0000000000019A02                 db    0
.eh_frame:0000000000019A03                 db    0
.eh_frame:0000000000019A04                 db  7Ch ; |
.eh_frame:0000000000019A05                 db  65h ; e
.eh_frame:0000000000019A06                 db 0FFh
.eh_frame:0000000000019A07                 db 0FFh
.eh_frame:0000000000019A08                 db  0Ah
.eh_frame:0000000000019A09                 db    0
.eh_frame:0000000000019A0A                 db    0
.eh_frame:0000000000019A0B                 db    0
.eh_frame:0000000000019A0C                 db    0
.eh_frame:0000000000019A0D                 db    0
.eh_frame:0000000000019A0E                 db    0
.eh_frame:0000000000019A0F                 db    0
.eh_frame:0000000000019A10                 db  44h ; D
.eh_frame:0000000000019A11                 db    0
.eh_frame:0000000000019A12                 db    0
.eh_frame:0000000000019A13                 db    0
.eh_frame:0000000000019A14                 db  74h ; t
.eh_frame:0000000000019A15                 db  1Ch
.eh_frame:0000000000019A16                 db    0
.eh_frame:0000000000019A17                 db    0
.eh_frame:0000000000019A18                 db  78h ; x
.eh_frame:0000000000019A19                 db  65h ; e
.eh_frame:0000000000019A1A                 db 0FFh
.eh_frame:0000000000019A1B                 db 0FFh
.eh_frame:0000000000019A1C                 db  5Eh ; ^
.eh_frame:0000000000019A1D                 db    4
.eh_frame:0000000000019A1E                 db    0
.eh_frame:0000000000019A1F                 db    0
.eh_frame:0000000000019A20                 db    0
.eh_frame:0000000000019A21                 db  42h ; B
.eh_frame:0000000000019A22                 db  0Eh
.eh_frame:0000000000019A23                 db  10h
.eh_frame:0000000000019A24                 db  8Eh
.eh_frame:0000000000019A25                 db    2
.eh_frame:0000000000019A26                 db  42h ; B
.eh_frame:0000000000019A27                 db  0Eh
.eh_frame:0000000000019A28                 db  18h
.eh_frame:0000000000019A29                 db  8Dh
.eh_frame:0000000000019A2A                 db    3
.eh_frame:0000000000019A2B                 db  42h ; B
.eh_frame:0000000000019A2C                 db  0Eh
.eh_frame:0000000000019A2D                 db  20h
.eh_frame:0000000000019A2E                 db  8Ch
.eh_frame:0000000000019A2F                 db    4
.eh_frame:0000000000019A30                 db  41h ; A
.eh_frame:0000000000019A31                 db  0Eh
.eh_frame:0000000000019A32                 db  28h ; (
.eh_frame:0000000000019A33                 db  86h
.eh_frame:0000000000019A34                 db    5
.eh_frame:0000000000019A35                 db  44h ; D
.eh_frame:0000000000019A36                 db  0Eh
.eh_frame:0000000000019A37                 db  30h ; 0
.eh_frame:0000000000019A38                 db  83h
.eh_frame:0000000000019A39                 db    6
.eh_frame:0000000000019A3A                 db  49h ; I
.eh_frame:0000000000019A3B                 db  0Eh
.eh_frame:0000000000019A3C                 db 0C0h
.eh_frame:0000000000019A3D                 db    2
.eh_frame:0000000000019A3E                 db    3
.eh_frame:0000000000019A3F                 db  23h ; #
.eh_frame:0000000000019A40                 db    3
.eh_frame:0000000000019A41                 db  0Ah
.eh_frame:0000000000019A42                 db  0Eh
.eh_frame:0000000000019A43                 db  30h ; 0
.eh_frame:0000000000019A44                 db  41h ; A
.eh_frame:0000000000019A45                 db  0Eh
.eh_frame:0000000000019A46                 db  28h ; (
.eh_frame:0000000000019A47                 db  41h ; A
.eh_frame:0000000000019A48                 db  0Eh
.eh_frame:0000000000019A49                 db  20h
.eh_frame:0000000000019A4A                 db  42h ; B
.eh_frame:0000000000019A4B                 db  0Eh
.eh_frame:0000000000019A4C                 db  18h
.eh_frame:0000000000019A4D                 db  42h ; B
.eh_frame:0000000000019A4E                 db  0Eh
.eh_frame:0000000000019A4F                 db  10h
.eh_frame:0000000000019A50                 db  42h ; B
.eh_frame:0000000000019A51                 db  0Eh
.eh_frame:0000000000019A52                 db    8
.eh_frame:0000000000019A53                 db  41h ; A
.eh_frame:0000000000019A54                 db  0Bh
.eh_frame:0000000000019A55                 db    0
.eh_frame:0000000000019A56                 db    0
.eh_frame:0000000000019A57                 db    0
.eh_frame:0000000000019A58                 db  10h
.eh_frame:0000000000019A59                 db    0
.eh_frame:0000000000019A5A                 db    0
.eh_frame:0000000000019A5B                 db    0
.eh_frame:0000000000019A5C                 db 0BCh
.eh_frame:0000000000019A5D                 db  1Ch
.eh_frame:0000000000019A5E                 db    0
.eh_frame:0000000000019A5F                 db    0
.eh_frame:0000000000019A60                 db  90h
.eh_frame:0000000000019A61                 db  69h ; i
.eh_frame:0000000000019A62                 db 0FFh
.eh_frame:0000000000019A63                 db 0FFh
.eh_frame:0000000000019A64                 db  10h
.eh_frame:0000000000019A65                 db    0
.eh_frame:0000000000019A66                 db    0
.eh_frame:0000000000019A67                 db    0
.eh_frame:0000000000019A68                 db    0
.eh_frame:0000000000019A69                 db    0
.eh_frame:0000000000019A6A                 db    0
.eh_frame:0000000000019A6B                 db    0
.eh_frame:0000000000019A6C                 db  38h ; 8
.eh_frame:0000000000019A6D                 db    0
.eh_frame:0000000000019A6E                 db    0
.eh_frame:0000000000019A6F                 db    0
.eh_frame:0000000000019A70                 db 0D0h
.eh_frame:0000000000019A71                 db  1Ch
.eh_frame:0000000000019A72                 db    0
.eh_frame:0000000000019A73                 db    0
.eh_frame:0000000000019A74                 db  8Ch
.eh_frame:0000000000019A75                 db  69h ; i
.eh_frame:0000000000019A76                 db 0FFh
.eh_frame:0000000000019A77                 db 0FFh
.eh_frame:0000000000019A78                 db  5Eh ; ^
.eh_frame:0000000000019A79                 db    2
.eh_frame:0000000000019A7A                 db    0
.eh_frame:0000000000019A7B                 db    0
.eh_frame:0000000000019A7C                 db    0
.eh_frame:0000000000019A7D                 db  42h ; B
.eh_frame:0000000000019A7E                 db  0Eh
.eh_frame:0000000000019A7F                 db  10h
.eh_frame:0000000000019A80                 db  8Ch
.eh_frame:0000000000019A81                 db    2
.eh_frame:0000000000019A82                 db  41h ; A
.eh_frame:0000000000019A83                 db  0Eh
.eh_frame:0000000000019A84                 db  18h
.eh_frame:0000000000019A85                 db  86h
.eh_frame:0000000000019A86                 db    3
.eh_frame:0000000000019A87                 db  44h ; D
.eh_frame:0000000000019A88                 db  0Eh
.eh_frame:0000000000019A89                 db  20h
.eh_frame:0000000000019A8A                 db  83h
.eh_frame:0000000000019A8B                 db    4
.eh_frame:0000000000019A8C                 db  47h ; G
.eh_frame:0000000000019A8D                 db  0Eh
.eh_frame:0000000000019A8E                 db 0F0h
.eh_frame:0000000000019A8F                 db    1
.eh_frame:0000000000019A90                 db    3
.eh_frame:0000000000019A91                 db  0Ah
.eh_frame:0000000000019A92                 db    1
.eh_frame:0000000000019A93                 db  0Ah
.eh_frame:0000000000019A94                 db  0Eh
.eh_frame:0000000000019A95                 db  20h
.eh_frame:0000000000019A96                 db  41h ; A
.eh_frame:0000000000019A97                 db  0Eh
.eh_frame:0000000000019A98                 db  18h
.eh_frame:0000000000019A99                 db  41h ; A
.eh_frame:0000000000019A9A                 db  0Eh
.eh_frame:0000000000019A9B                 db  10h
.eh_frame:0000000000019A9C                 db  42h ; B
.eh_frame:0000000000019A9D                 db  0Eh
.eh_frame:0000000000019A9E                 db    8
.eh_frame:0000000000019A9F                 db  44h ; D
.eh_frame:0000000000019AA0                 db  0Bh
.eh_frame:0000000000019AA1                 db    0
.eh_frame:0000000000019AA2                 db    0
.eh_frame:0000000000019AA3                 db    0
.eh_frame:0000000000019AA4                 db    0
.eh_frame:0000000000019AA5                 db    0
.eh_frame:0000000000019AA6                 db    0
.eh_frame:0000000000019AA7                 db    0
.eh_frame:0000000000019AA8                 db  10h
.eh_frame:0000000000019AA9                 db    1
.eh_frame:0000000000019AAA                 db    0
.eh_frame:0000000000019AAB                 db    0
.eh_frame:0000000000019AAC                 db  0Ch
.eh_frame:0000000000019AAD                 db  1Dh
.eh_frame:0000000000019AAE                 db    0
.eh_frame:0000000000019AAF                 db    0
.eh_frame:0000000000019AB0                 db 0B0h
.eh_frame:0000000000019AB1                 db  6Bh ; k
.eh_frame:0000000000019AB2                 db 0FFh
.eh_frame:0000000000019AB3                 db 0FFh
.eh_frame:0000000000019AB4                 db  17h
.eh_frame:0000000000019AB5                 db    4
.eh_frame:0000000000019AB6                 db    0
.eh_frame:0000000000019AB7                 db    0
.eh_frame:0000000000019AB8                 db    0
.eh_frame:0000000000019AB9                 db  42h ; B
.eh_frame:0000000000019ABA                 db  0Eh
.eh_frame:0000000000019ABB                 db  10h
.eh_frame:0000000000019ABC                 db  8Fh
.eh_frame:0000000000019ABD                 db    2
.eh_frame:0000000000019ABE                 db  42h ; B
.eh_frame:0000000000019ABF                 db  0Eh
.eh_frame:0000000000019AC0                 db  18h
.eh_frame:0000000000019AC1                 db  8Eh
.eh_frame:0000000000019AC2                 db    3
.eh_frame:0000000000019AC3                 db  42h ; B
.eh_frame:0000000000019AC4                 db  0Eh
.eh_frame:0000000000019AC5                 db  20h
.eh_frame:0000000000019AC6                 db  8Dh
.eh_frame:0000000000019AC7                 db    4
.eh_frame:0000000000019AC8                 db  42h ; B
.eh_frame:0000000000019AC9                 db  0Eh
.eh_frame:0000000000019ACA                 db  28h ; (
.eh_frame:0000000000019ACB                 db  8Ch
.eh_frame:0000000000019ACC                 db    5
.eh_frame:0000000000019ACD                 db  44h ; D
.eh_frame:0000000000019ACE                 db  0Eh
.eh_frame:0000000000019ACF                 db  30h ; 0
.eh_frame:0000000000019AD0                 db  86h
.eh_frame:0000000000019AD1                 db    6
.eh_frame:0000000000019AD2                 db  41h ; A
.eh_frame:0000000000019AD3                 db  0Eh
.eh_frame:0000000000019AD4                 db  38h ; 8
.eh_frame:0000000000019AD5                 db  83h
.eh_frame:0000000000019AD6                 db    7
.eh_frame:0000000000019AD7                 db  4Ah ; J
.eh_frame:0000000000019AD8                 db  0Eh
.eh_frame:0000000000019AD9                 db  60h ; `
.eh_frame:0000000000019ADA                 db    2
.eh_frame:0000000000019ADB                 db 0DDh
.eh_frame:0000000000019ADC                 db  0Eh
.eh_frame:0000000000019ADD                 db  68h ; h
.eh_frame:0000000000019ADE                 db  57h ; W
.eh_frame:0000000000019ADF                 db  0Eh
.eh_frame:0000000000019AE0                 db  70h ; p
.eh_frame:0000000000019AE1                 db  42h ; B
.eh_frame:0000000000019AE2                 db  0Eh
.eh_frame:0000000000019AE3                 db  78h ; x
.eh_frame:0000000000019AE4                 db  42h ; B
.eh_frame:0000000000019AE5                 db  0Eh
.eh_frame:0000000000019AE6                 db  80h
.eh_frame:0000000000019AE7                 db    1
.eh_frame:0000000000019AE8                 db  42h ; B
.eh_frame:0000000000019AE9                 db  0Eh
.eh_frame:0000000000019AEA                 db  88h
.eh_frame:0000000000019AEB                 db    1
.eh_frame:0000000000019AEC                 db  42h ; B
.eh_frame:0000000000019AED                 db  0Eh
.eh_frame:0000000000019AEE                 db  90h
.eh_frame:0000000000019AEF                 db    1
.eh_frame:0000000000019AF0                 db  53h ; S
.eh_frame:0000000000019AF1                 db  0Eh
.eh_frame:0000000000019AF2                 db  60h ; `
.eh_frame:0000000000019AF3                 db  44h ; D
.eh_frame:0000000000019AF4                 db  0Ah
.eh_frame:0000000000019AF5                 db  0Eh
.eh_frame:0000000000019AF6                 db  38h ; 8
.eh_frame:0000000000019AF7                 db  41h ; A
.eh_frame:0000000000019AF8                 db  0Eh
.eh_frame:0000000000019AF9                 db  30h ; 0
.eh_frame:0000000000019AFA                 db  41h ; A
.eh_frame:0000000000019AFB                 db  0Eh
.eh_frame:0000000000019AFC                 db  28h ; (
.eh_frame:0000000000019AFD                 db  42h ; B
.eh_frame:0000000000019AFE                 db  0Eh
.eh_frame:0000000000019AFF                 db  20h
.eh_frame:0000000000019B00                 db  42h ; B
.eh_frame:0000000000019B01                 db  0Eh
.eh_frame:0000000000019B02                 db  18h
.eh_frame:0000000000019B03                 db  42h ; B
.eh_frame:0000000000019B04                 db  0Eh
.eh_frame:0000000000019B05                 db  10h
.eh_frame:0000000000019B06                 db  42h ; B
.eh_frame:0000000000019B07                 db  0Eh
.eh_frame:0000000000019B08                 db    8
.eh_frame:0000000000019B09                 db  44h ; D
.eh_frame:0000000000019B0A                 db  0Bh
.eh_frame:0000000000019B0B                 db    2
.eh_frame:0000000000019B0C                 db  78h ; x
.eh_frame:0000000000019B0D                 db  0Ah
.eh_frame:0000000000019B0E                 db  0Eh
.eh_frame:0000000000019B0F                 db  68h ; h
.eh_frame:0000000000019B10                 db  48h ; H
.eh_frame:0000000000019B11                 db  0Bh
.eh_frame:0000000000019B12                 db  5Ah ; Z
.eh_frame:0000000000019B13                 db  0Ah
.eh_frame:0000000000019B14                 db  0Eh
.eh_frame:0000000000019B15                 db  38h ; 8
.eh_frame:0000000000019B16                 db  47h ; G
.eh_frame:0000000000019B17                 db  0Eh
.eh_frame:0000000000019B18                 db  30h ; 0
.eh_frame:0000000000019B19                 db  41h ; A
.eh_frame:0000000000019B1A                 db  0Eh
.eh_frame:0000000000019B1B                 db  28h ; (
.eh_frame:0000000000019B1C                 db  42h ; B
.eh_frame:0000000000019B1D                 db  0Eh
.eh_frame:0000000000019B1E                 db  20h
.eh_frame:0000000000019B1F                 db  42h ; B
.eh_frame:0000000000019B20                 db  0Eh
.eh_frame:0000000000019B21                 db  18h
.eh_frame:0000000000019B22                 db  42h ; B
.eh_frame:0000000000019B23                 db  0Eh
.eh_frame:0000000000019B24                 db  10h
.eh_frame:0000000000019B25                 db  42h ; B
.eh_frame:0000000000019B26                 db  0Eh
.eh_frame:0000000000019B27                 db    8
.eh_frame:0000000000019B28                 db  56h ; V
.eh_frame:0000000000019B29                 db  0Bh
.eh_frame:0000000000019B2A                 db  5Eh ; ^
.eh_frame:0000000000019B2B                 db  0Ah
.eh_frame:0000000000019B2C                 db  0Eh
.eh_frame:0000000000019B2D                 db  38h ; 8
.eh_frame:0000000000019B2E                 db  52h ; R
.eh_frame:0000000000019B2F                 db  0Eh
.eh_frame:0000000000019B30                 db  30h ; 0
.eh_frame:0000000000019B31                 db  41h ; A
.eh_frame:0000000000019B32                 db  0Eh
.eh_frame:0000000000019B33                 db  28h ; (
.eh_frame:0000000000019B34                 db  42h ; B
.eh_frame:0000000000019B35                 db  0Eh
.eh_frame:0000000000019B36                 db  20h
.eh_frame:0000000000019B37                 db  42h ; B
.eh_frame:0000000000019B38                 db  0Eh
.eh_frame:0000000000019B39                 db  18h
.eh_frame:0000000000019B3A                 db  42h ; B
.eh_frame:0000000000019B3B                 db  0Eh
.eh_frame:0000000000019B3C                 db  10h
.eh_frame:0000000000019B3D                 db  42h ; B
.eh_frame:0000000000019B3E                 db  0Eh
.eh_frame:0000000000019B3F                 db    8
.eh_frame:0000000000019B40                 db  4Fh ; O
.eh_frame:0000000000019B41                 db  0Bh
.eh_frame:0000000000019B42                 db  62h ; b
.eh_frame:0000000000019B43                 db  0Ah
.eh_frame:0000000000019B44                 db  0Eh
.eh_frame:0000000000019B45                 db  38h ; 8
.eh_frame:0000000000019B46                 db  50h ; P
.eh_frame:0000000000019B47                 db  0Eh
.eh_frame:0000000000019B48                 db  30h ; 0
.eh_frame:0000000000019B49                 db  41h ; A
.eh_frame:0000000000019B4A                 db  0Eh
.eh_frame:0000000000019B4B                 db  28h ; (
.eh_frame:0000000000019B4C                 db  42h ; B
.eh_frame:0000000000019B4D                 db  0Eh
.eh_frame:0000000000019B4E                 db  20h
.eh_frame:0000000000019B4F                 db  42h ; B
.eh_frame:0000000000019B50                 db  0Eh
.eh_frame:0000000000019B51                 db  18h
.eh_frame:0000000000019B52                 db  42h ; B
.eh_frame:0000000000019B53                 db  0Eh
.eh_frame:0000000000019B54                 db  10h
.eh_frame:0000000000019B55                 db  42h ; B
.eh_frame:0000000000019B56                 db  0Eh
.eh_frame:0000000000019B57                 db    8
.eh_frame:0000000000019B58                 db  55h ; U
.eh_frame:0000000000019B59                 db  0Bh
.eh_frame:0000000000019B5A                 db  66h ; f
.eh_frame:0000000000019B5B                 db  0Eh
.eh_frame:0000000000019B5C                 db  68h ; h
.eh_frame:0000000000019B5D                 db  42h ; B
.eh_frame:0000000000019B5E                 db  0Eh
.eh_frame:0000000000019B5F                 db  70h ; p
.eh_frame:0000000000019B60                 db  5Ch ; \
.eh_frame:0000000000019B61                 db  0Eh
.eh_frame:0000000000019B62                 db  68h ; h
.eh_frame:0000000000019B63                 db  41h ; A
.eh_frame:0000000000019B64                 db  0Eh
.eh_frame:0000000000019B65                 db  60h ; `
.eh_frame:0000000000019B66                 db  44h ; D
.eh_frame:0000000000019B67                 db  0Ah
.eh_frame:0000000000019B68                 db  0Eh
.eh_frame:0000000000019B69                 db  38h ; 8
.eh_frame:0000000000019B6A                 db  41h ; A
.eh_frame:0000000000019B6B                 db  0Eh
.eh_frame:0000000000019B6C                 db  30h ; 0
.eh_frame:0000000000019B6D                 db  41h ; A
.eh_frame:0000000000019B6E                 db  0Eh
.eh_frame:0000000000019B6F                 db  28h ; (
.eh_frame:0000000000019B70                 db  42h ; B
.eh_frame:0000000000019B71                 db  0Eh
.eh_frame:0000000000019B72                 db  20h
.eh_frame:0000000000019B73                 db  42h ; B
.eh_frame:0000000000019B74                 db  0Eh
.eh_frame:0000000000019B75                 db  18h
.eh_frame:0000000000019B76                 db  42h ; B
.eh_frame:0000000000019B77                 db  0Eh
.eh_frame:0000000000019B78                 db  10h
.eh_frame:0000000000019B79                 db  42h ; B
.eh_frame:0000000000019B7A                 db  0Eh
.eh_frame:0000000000019B7B                 db    8
.eh_frame:0000000000019B7C                 db  45h ; E
.eh_frame:0000000000019B7D                 db  0Bh
.eh_frame:0000000000019B7E                 db  68h ; h
.eh_frame:0000000000019B7F                 db  0Ah
.eh_frame:0000000000019B80                 db  0Eh
.eh_frame:0000000000019B81                 db  68h ; h
.eh_frame:0000000000019B82                 db  48h ; H
.eh_frame:0000000000019B83                 db  0Bh
.eh_frame:0000000000019B84                 db  72h ; r
.eh_frame:0000000000019B85                 db  0Eh
.eh_frame:0000000000019B86                 db  68h ; h
.eh_frame:0000000000019B87                 db  45h ; E
.eh_frame:0000000000019B88                 db  0Eh
.eh_frame:0000000000019B89                 db  70h ; p
.eh_frame:0000000000019B8A                 db  42h ; B
.eh_frame:0000000000019B8B                 db  0Eh
.eh_frame:0000000000019B8C                 db  78h ; x
.eh_frame:0000000000019B8D                 db  42h ; B
.eh_frame:0000000000019B8E                 db  0Eh
.eh_frame:0000000000019B8F                 db  80h
.eh_frame:0000000000019B90                 db    1
.eh_frame:0000000000019B91                 db  5Eh ; ^
.eh_frame:0000000000019B92                 db  0Eh
.eh_frame:0000000000019B93                 db  60h ; `
.eh_frame:0000000000019B94                 db  44h ; D
.eh_frame:0000000000019B95                 db  0Ah
.eh_frame:0000000000019B96                 db  0Eh
.eh_frame:0000000000019B97                 db  38h ; 8
.eh_frame:0000000000019B98                 db  41h ; A
.eh_frame:0000000000019B99                 db  0Eh
.eh_frame:0000000000019B9A                 db  30h ; 0
.eh_frame:0000000000019B9B                 db  41h ; A
.eh_frame:0000000000019B9C                 db  0Eh
.eh_frame:0000000000019B9D                 db  28h ; (
.eh_frame:0000000000019B9E                 db  42h ; B
.eh_frame:0000000000019B9F                 db  0Eh
.eh_frame:0000000000019BA0                 db  20h
.eh_frame:0000000000019BA1                 db  42h ; B
.eh_frame:0000000000019BA2                 db  0Eh
.eh_frame:0000000000019BA3                 db  18h
.eh_frame:0000000000019BA4                 db  42h ; B
.eh_frame:0000000000019BA5                 db  0Eh
.eh_frame:0000000000019BA6                 db  10h
.eh_frame:0000000000019BA7                 db  42h ; B
.eh_frame:0000000000019BA8                 db  0Eh
.eh_frame:0000000000019BA9                 db    8
.eh_frame:0000000000019BAA                 db  41h ; A
.eh_frame:0000000000019BAB                 db  0Bh
.eh_frame:0000000000019BAC                 db  79h ; y
.eh_frame:0000000000019BAD                 db  0Ah
.eh_frame:0000000000019BAE                 db  0Eh
.eh_frame:0000000000019BAF                 db  68h ; h
.eh_frame:0000000000019BB0                 db  42h ; B
.eh_frame:0000000000019BB1                 db  0Eh
.eh_frame:0000000000019BB2                 db  70h ; p
.eh_frame:0000000000019BB3                 db  42h ; B
.eh_frame:0000000000019BB4                 db  0Eh
.eh_frame:0000000000019BB5                 db  78h ; x
.eh_frame:0000000000019BB6                 db  42h ; B
.eh_frame:0000000000019BB7                 db  0Eh
.eh_frame:0000000000019BB8                 db  80h
.eh_frame:0000000000019BB9                 db    1
.eh_frame:0000000000019BBA                 db  51h ; Q
.eh_frame:0000000000019BBB                 db  0Bh
.eh_frame:0000000000019BBC                 db  10h
.eh_frame:0000000000019BBD                 db    0
.eh_frame:0000000000019BBE                 db    0
.eh_frame:0000000000019BBF                 db    0
.eh_frame:0000000000019BC0                 db  20h
.eh_frame:0000000000019BC1                 db  1Eh
.eh_frame:0000000000019BC2                 db    0
.eh_frame:0000000000019BC3                 db    0
.eh_frame:0000000000019BC4                 db 0BCh
.eh_frame:0000000000019BC5                 db  6Eh ; n
.eh_frame:0000000000019BC6                 db 0FFh
.eh_frame:0000000000019BC7                 db 0FFh
.eh_frame:0000000000019BC8                 db  20h
.eh_frame:0000000000019BC9                 db    0
.eh_frame:0000000000019BCA                 db    0
.eh_frame:0000000000019BCB                 db    0
.eh_frame:0000000000019BCC                 db    0
.eh_frame:0000000000019BCD                 db    0
.eh_frame:0000000000019BCE                 db    0
.eh_frame:0000000000019BCF                 db    0
.eh_frame:0000000000019BD0                 db  18h
.eh_frame:0000000000019BD1                 db    0
.eh_frame:0000000000019BD2                 db    0
.eh_frame:0000000000019BD3                 db    0
.eh_frame:0000000000019BD4                 db  34h ; 4
.eh_frame:0000000000019BD5                 db  1Eh
.eh_frame:0000000000019BD6                 db    0
.eh_frame:0000000000019BD7                 db    0
.eh_frame:0000000000019BD8                 db 0C8h
.eh_frame:0000000000019BD9                 db  6Eh ; n
.eh_frame:0000000000019BDA                 db 0FFh
.eh_frame:0000000000019BDB                 db 0FFh
.eh_frame:0000000000019BDC                 db  78h ; x
.eh_frame:0000000000019BDD                 db    0
.eh_frame:0000000000019BDE                 db    0
.eh_frame:0000000000019BDF                 db    0
.eh_frame:0000000000019BE0                 db    0
.eh_frame:0000000000019BE1                 db  44h ; D
.eh_frame:0000000000019BE2                 db  0Eh
.eh_frame:0000000000019BE3                 db  70h ; p
.eh_frame:0000000000019BE4                 db    2
.eh_frame:0000000000019BE5                 db  60h ; `
.eh_frame:0000000000019BE6                 db  0Ah
.eh_frame:0000000000019BE7                 db  0Eh
.eh_frame:0000000000019BE8                 db    8
.eh_frame:0000000000019BE9                 db  41h ; A
.eh_frame:0000000000019BEA                 db  0Bh
.eh_frame:0000000000019BEB                 db    0
.eh_frame:0000000000019BEC                 db  28h ; (
.eh_frame:0000000000019BED                 db    0
.eh_frame:0000000000019BEE                 db    0
.eh_frame:0000000000019BEF                 db    0
.eh_frame:0000000000019BF0                 db  50h ; P
.eh_frame:0000000000019BF1                 db  1Eh
.eh_frame:0000000000019BF2                 db    0
.eh_frame:0000000000019BF3                 db    0
.eh_frame:0000000000019BF4                 db  2Ch ; ,
.eh_frame:0000000000019BF5                 db  6Fh ; o
.eh_frame:0000000000019BF6                 db 0FFh
.eh_frame:0000000000019BF7                 db 0FFh
.eh_frame:0000000000019BF8                 db 0D5h
.eh_frame:0000000000019BF9                 db    0
.eh_frame:0000000000019BFA                 db    0
.eh_frame:0000000000019BFB                 db    0
.eh_frame:0000000000019BFC                 db    0
.eh_frame:0000000000019BFD                 db  41h ; A
.eh_frame:0000000000019BFE                 db  0Eh
.eh_frame:0000000000019BFF                 db  10h
.eh_frame:0000000000019C00                 db  86h
.eh_frame:0000000000019C01                 db    2
.eh_frame:0000000000019C02                 db  41h ; A
.eh_frame:0000000000019C03                 db  0Eh
.eh_frame:0000000000019C04                 db  18h
.eh_frame:0000000000019C05                 db  83h
.eh_frame:0000000000019C06                 db    3
.eh_frame:0000000000019C07                 db  50h ; P
.eh_frame:0000000000019C08                 db  0Eh
.eh_frame:0000000000019C09                 db 0D0h
.eh_frame:0000000000019C0A                 db    1
.eh_frame:0000000000019C0B                 db    2
.eh_frame:0000000000019C0C                 db 0ABh
.eh_frame:0000000000019C0D                 db  0Ah
.eh_frame:0000000000019C0E                 db  0Eh
.eh_frame:0000000000019C0F                 db  18h
.eh_frame:0000000000019C10                 db  41h ; A
.eh_frame:0000000000019C11                 db  0Eh
.eh_frame:0000000000019C12                 db  10h
.eh_frame:0000000000019C13                 db  41h ; A
.eh_frame:0000000000019C14                 db  0Eh
.eh_frame:0000000000019C15                 db    8
.eh_frame:0000000000019C16                 db  41h ; A
.eh_frame:0000000000019C17                 db  0Bh
.eh_frame:0000000000019C18                 db  1Ch
.eh_frame:0000000000019C19                 db    0
.eh_frame:0000000000019C1A                 db    0
.eh_frame:0000000000019C1B                 db    0
.eh_frame:0000000000019C1C                 db  7Ch ; |
.eh_frame:0000000000019C1D                 db  1Eh
.eh_frame:0000000000019C1E                 db    0
.eh_frame:0000000000019C1F                 db    0
.eh_frame:0000000000019C20                 db 0E0h
.eh_frame:0000000000019C21                 db  6Fh ; o
.eh_frame:0000000000019C22                 db 0FFh
.eh_frame:0000000000019C23                 db 0FFh
.eh_frame:0000000000019C24                 db  80h
.eh_frame:0000000000019C25                 db    0
.eh_frame:0000000000019C26                 db    0
.eh_frame:0000000000019C27                 db    0
.eh_frame:0000000000019C28                 db    0
.eh_frame:0000000000019C29                 db  41h ; A
.eh_frame:0000000000019C2A                 db  0Eh
.eh_frame:0000000000019C2B                 db  10h
.eh_frame:0000000000019C2C                 db  83h
.eh_frame:0000000000019C2D                 db    2
.eh_frame:0000000000019C2E                 db    2
.eh_frame:0000000000019C2F                 db  7Ah ; z
.eh_frame:0000000000019C30                 db  0Eh
.eh_frame:0000000000019C31                 db    8
.eh_frame:0000000000019C32                 db    0
.eh_frame:0000000000019C33                 db    0
.eh_frame:0000000000019C34                 db    0
.eh_frame:0000000000019C35                 db    0
.eh_frame:0000000000019C36                 db    0
.eh_frame:0000000000019C37                 db    0
.eh_frame:0000000000019C38                 db  14h
.eh_frame:0000000000019C39                 db    0
.eh_frame:0000000000019C3A                 db    0
.eh_frame:0000000000019C3B                 db    0
.eh_frame:0000000000019C3C                 db  9Ch
.eh_frame:0000000000019C3D                 db  1Eh
.eh_frame:0000000000019C3E                 db    0
.eh_frame:0000000000019C3F                 db    0
.eh_frame:0000000000019C40                 db  40h ; @
.eh_frame:0000000000019C41                 db  70h ; p
.eh_frame:0000000000019C42                 db 0FFh
.eh_frame:0000000000019C43                 db 0FFh
.eh_frame:0000000000019C44                 db  38h ; 8
.eh_frame:0000000000019C45                 db    0
.eh_frame:0000000000019C46                 db    0
.eh_frame:0000000000019C47                 db    0
.eh_frame:0000000000019C48                 db    0
.eh_frame:0000000000019C49                 db  5Ch ; \
.eh_frame:0000000000019C4A                 db  0Eh
.eh_frame:0000000000019C4B                 db  10h
.eh_frame:0000000000019C4C                 db  5Bh ; [
.eh_frame:0000000000019C4D                 db  0Eh
.eh_frame:0000000000019C4E                 db    8
.eh_frame:0000000000019C4F                 db    0
.eh_frame:0000000000019C50                 db  18h
.eh_frame:0000000000019C51                 db    0
.eh_frame:0000000000019C52                 db    0
.eh_frame:0000000000019C53                 db    0
.eh_frame:0000000000019C54                 db 0B4h
.eh_frame:0000000000019C55                 db  1Eh
.eh_frame:0000000000019C56                 db    0
.eh_frame:0000000000019C57                 db    0
.eh_frame:0000000000019C58                 db  68h ; h
.eh_frame:0000000000019C59                 db  70h ; p
.eh_frame:0000000000019C5A                 db 0FFh
.eh_frame:0000000000019C5B                 db 0FFh
.eh_frame:0000000000019C5C                 db  1Ah
.eh_frame:0000000000019C5D                 db    0
.eh_frame:0000000000019C5E                 db    0
.eh_frame:0000000000019C5F                 db    0
.eh_frame:0000000000019C60                 db    0
.eh_frame:0000000000019C61                 db  41h ; A
.eh_frame:0000000000019C62                 db  0Eh
.eh_frame:0000000000019C63                 db  10h
.eh_frame:0000000000019C64                 db  83h
.eh_frame:0000000000019C65                 db    2
.eh_frame:0000000000019C66                 db  53h ; S
.eh_frame:0000000000019C67                 db  0Ah
.eh_frame:0000000000019C68                 db  0Eh
.eh_frame:0000000000019C69                 db    8
.eh_frame:0000000000019C6A                 db  41h ; A
.eh_frame:0000000000019C6B                 db  0Bh
.eh_frame:0000000000019C6C                 db  10h
.eh_frame:0000000000019C6D                 db    0
.eh_frame:0000000000019C6E                 db    0
.eh_frame:0000000000019C6F                 db    0
.eh_frame:0000000000019C70                 db 0D0h
.eh_frame:0000000000019C71                 db  1Eh
.eh_frame:0000000000019C72                 db    0
.eh_frame:0000000000019C73                 db    0
.eh_frame:0000000000019C74                 db  6Ch ; l
.eh_frame:0000000000019C75                 db  70h ; p
.eh_frame:0000000000019C76                 db 0FFh
.eh_frame:0000000000019C77                 db 0FFh
.eh_frame:0000000000019C78                 db  24h ; $
.eh_frame:0000000000019C79                 db    0
.eh_frame:0000000000019C7A                 db    0
.eh_frame:0000000000019C7B                 db    0
.eh_frame:0000000000019C7C                 db    0
.eh_frame:0000000000019C7D                 db  5Fh ; _
.eh_frame:0000000000019C7E                 db  0Eh
.eh_frame:0000000000019C7F                 db  10h
.eh_frame:0000000000019C80                 db  10h
.eh_frame:0000000000019C81                 db    0
.eh_frame:0000000000019C82                 db    0
.eh_frame:0000000000019C83                 db    0
.eh_frame:0000000000019C84                 db 0E4h
.eh_frame:0000000000019C85                 db  1Eh
.eh_frame:0000000000019C86                 db    0
.eh_frame:0000000000019C87                 db    0
.eh_frame:0000000000019C88                 db  88h
.eh_frame:0000000000019C89                 db  70h ; p
.eh_frame:0000000000019C8A                 db 0FFh
.eh_frame:0000000000019C8B                 db 0FFh
.eh_frame:0000000000019C8C                 db    2
.eh_frame:0000000000019C8D                 db    0
.eh_frame:0000000000019C8E                 db    0
.eh_frame:0000000000019C8F                 db    0
.eh_frame:0000000000019C90                 db    0
.eh_frame:0000000000019C91                 db    0
.eh_frame:0000000000019C92                 db    0
.eh_frame:0000000000019C93                 db    0
.eh_frame:0000000000019C94                 db  20h
.eh_frame:0000000000019C95                 db    0
.eh_frame:0000000000019C96                 db    0
.eh_frame:0000000000019C97                 db    0
.eh_frame:0000000000019C98                 db 0F8h
.eh_frame:0000000000019C99                 db  1Eh
.eh_frame:0000000000019C9A                 db    0
.eh_frame:0000000000019C9B                 db    0
.eh_frame:0000000000019C9C                 db  84h
.eh_frame:0000000000019C9D                 db  70h ; p
.eh_frame:0000000000019C9E                 db 0FFh
.eh_frame:0000000000019C9F                 db 0FFh
.eh_frame:0000000000019CA0                 db  36h ; 6
.eh_frame:0000000000019CA1                 db    0
.eh_frame:0000000000019CA2                 db    0
.eh_frame:0000000000019CA3                 db    0
.eh_frame:0000000000019CA4                 db    0
.eh_frame:0000000000019CA5                 db  44h ; D
.eh_frame:0000000000019CA6                 db  0Eh
.eh_frame:0000000000019CA7                 db  10h
.eh_frame:0000000000019CA8                 db  83h
.eh_frame:0000000000019CA9                 db    2
.eh_frame:0000000000019CAA                 db  5Dh ; ]
.eh_frame:0000000000019CAB                 db  0Ah
.eh_frame:0000000000019CAC                 db  0Eh
.eh_frame:0000000000019CAD                 db    8
.eh_frame:0000000000019CAE                 db  47h ; G
.eh_frame:0000000000019CAF                 db  0Bh
.eh_frame:0000000000019CB0                 db  48h ; H
.eh_frame:0000000000019CB1                 db  0Ah
.eh_frame:0000000000019CB2                 db  0Eh
.eh_frame:0000000000019CB3                 db    8
.eh_frame:0000000000019CB4                 db  41h ; A
.eh_frame:0000000000019CB5                 db  0Bh
.eh_frame:0000000000019CB6                 db    0
.eh_frame:0000000000019CB7                 db    0
.eh_frame:0000000000019CB8                 db  10h
.eh_frame:0000000000019CB9                 db    0
.eh_frame:0000000000019CBA                 db    0
.eh_frame:0000000000019CBB                 db    0
.eh_frame:0000000000019CBC                 db  1Ch
.eh_frame:0000000000019CBD                 db  1Fh
.eh_frame:0000000000019CBE                 db    0
.eh_frame:0000000000019CBF                 db    0
.eh_frame:0000000000019CC0                 db 0A0h
.eh_frame:0000000000019CC1                 db  70h ; p
.eh_frame:0000000000019CC2                 db 0FFh
.eh_frame:0000000000019CC3                 db 0FFh
.eh_frame:0000000000019CC4                 db  24h ; $
.eh_frame:0000000000019CC5                 db    0
.eh_frame:0000000000019CC6                 db    0
.eh_frame:0000000000019CC7                 db    0
.eh_frame:0000000000019CC8                 db    0
.eh_frame:0000000000019CC9                 db  5Fh ; _
.eh_frame:0000000000019CCA                 db  0Eh
.eh_frame:0000000000019CCB                 db  10h
.eh_frame:0000000000019CCC                 db  14h
.eh_frame:0000000000019CCD                 db    0
.eh_frame:0000000000019CCE                 db    0
.eh_frame:0000000000019CCF                 db    0
.eh_frame:0000000000019CD0                 db  30h ; 0
.eh_frame:0000000000019CD1                 db  1Fh
.eh_frame:0000000000019CD2                 db    0
.eh_frame:0000000000019CD3                 db    0
.eh_frame:0000000000019CD4                 db 0BCh
.eh_frame:0000000000019CD5                 db  70h ; p
.eh_frame:0000000000019CD6                 db 0FFh
.eh_frame:0000000000019CD7                 db 0FFh
.eh_frame:0000000000019CD8                 db  82h
.eh_frame:0000000000019CD9                 db    0
.eh_frame:0000000000019CDA                 db    0
.eh_frame:0000000000019CDB                 db    0
.eh_frame:0000000000019CDC                 db    0
.eh_frame:0000000000019CDD                 db    2
.eh_frame:0000000000019CDE                 db  5Fh ; _
.eh_frame:0000000000019CDF                 db  0Eh
.eh_frame:0000000000019CE0                 db  10h
.eh_frame:0000000000019CE1                 db  49h ; I
.eh_frame:0000000000019CE2                 db  0Eh
.eh_frame:0000000000019CE3                 db    8
.eh_frame:0000000000019CE4                 db  14h
.eh_frame:0000000000019CE5                 db    0
.eh_frame:0000000000019CE6                 db    0
.eh_frame:0000000000019CE7                 db    0
.eh_frame:0000000000019CE8                 db  48h ; H
.eh_frame:0000000000019CE9                 db  1Fh
.eh_frame:0000000000019CEA                 db    0
.eh_frame:0000000000019CEB                 db    0
.eh_frame:0000000000019CEC                 db  34h ; 4
.eh_frame:0000000000019CED                 db  71h ; q
.eh_frame:0000000000019CEE                 db 0FFh
.eh_frame:0000000000019CEF                 db 0FFh
.eh_frame:0000000000019CF0                 db  4Ah ; J
.eh_frame:0000000000019CF1                 db    0
.eh_frame:0000000000019CF2                 db    0
.eh_frame:0000000000019CF3                 db    0
.eh_frame:0000000000019CF4                 db    0
.eh_frame:0000000000019CF5                 db    2
.eh_frame:0000000000019CF6                 db  45h ; E
.eh_frame:0000000000019CF7                 db  0Eh
.eh_frame:0000000000019CF8                 db  10h
.eh_frame:0000000000019CF9                 db    0
.eh_frame:0000000000019CFA                 db    0
.eh_frame:0000000000019CFB                 db    0
.eh_frame:0000000000019CFC                 db  18h
.eh_frame:0000000000019CFD                 db    0
.eh_frame:0000000000019CFE                 db    0
.eh_frame:0000000000019CFF                 db    0
.eh_frame:0000000000019D00                 db  60h ; `
.eh_frame:0000000000019D01                 db  1Fh
.eh_frame:0000000000019D02                 db    0
.eh_frame:0000000000019D03                 db    0
.eh_frame:0000000000019D04                 db  6Ch ; l
.eh_frame:0000000000019D05                 db  71h ; q
.eh_frame:0000000000019D06                 db 0FFh
.eh_frame:0000000000019D07                 db 0FFh
.eh_frame:0000000000019D08                 db  17h
.eh_frame:0000000000019D09                 db    0
.eh_frame:0000000000019D0A                 db    0
.eh_frame:0000000000019D0B                 db    0
.eh_frame:0000000000019D0C                 db    0
.eh_frame:0000000000019D0D                 db  41h ; A
.eh_frame:0000000000019D0E                 db  0Eh
.eh_frame:0000000000019D0F                 db  10h
.eh_frame:0000000000019D10                 db  83h
.eh_frame:0000000000019D11                 db    2
.eh_frame:0000000000019D12                 db  51h ; Q
.eh_frame:0000000000019D13                 db  0Eh
.eh_frame:0000000000019D14                 db    8
.eh_frame:0000000000019D15                 db    0
.eh_frame:0000000000019D16                 db    0
.eh_frame:0000000000019D17                 db    0
.eh_frame:0000000000019D18                 db  18h
.eh_frame:0000000000019D19                 db    0
.eh_frame:0000000000019D1A                 db    0
.eh_frame:0000000000019D1B                 db    0
.eh_frame:0000000000019D1C                 db  7Ch ; |
.eh_frame:0000000000019D1D                 db  1Fh
.eh_frame:0000000000019D1E                 db    0
.eh_frame:0000000000019D1F                 db    0
.eh_frame:0000000000019D20                 db  70h ; p
.eh_frame:0000000000019D21                 db  71h ; q
.eh_frame:0000000000019D22                 db 0FFh
.eh_frame:0000000000019D23                 db 0FFh
.eh_frame:0000000000019D24                 db  2Eh ; .
.eh_frame:0000000000019D25                 db    0
.eh_frame:0000000000019D26                 db    0
.eh_frame:0000000000019D27                 db    0
.eh_frame:0000000000019D28                 db    0
.eh_frame:0000000000019D29                 db  47h ; G
.eh_frame:0000000000019D2A                 db  0Eh
.eh_frame:0000000000019D2B                 db  10h
.eh_frame:0000000000019D2C                 db  61h ; a
.eh_frame:0000000000019D2D                 db  0Ah
.eh_frame:0000000000019D2E                 db  0Eh
.eh_frame:0000000000019D2F                 db    8
.eh_frame:0000000000019D30                 db  41h ; A
.eh_frame:0000000000019D31                 db  0Bh
.eh_frame:0000000000019D32                 db    0
.eh_frame:0000000000019D33                 db    0
.eh_frame:0000000000019D34                 db  24h ; $
.eh_frame:0000000000019D35                 db    0
.eh_frame:0000000000019D36                 db    0
.eh_frame:0000000000019D37                 db    0
.eh_frame:0000000000019D38                 db  98h
.eh_frame:0000000000019D39                 db  1Fh
.eh_frame:0000000000019D3A                 db    0
.eh_frame:0000000000019D3B                 db    0
.eh_frame:0000000000019D3C                 db  84h
.eh_frame:0000000000019D3D                 db  71h ; q
.eh_frame:0000000000019D3E                 db 0FFh
.eh_frame:0000000000019D3F                 db 0FFh
.eh_frame:0000000000019D40                 db  28h ; (
.eh_frame:0000000000019D41                 db    0
.eh_frame:0000000000019D42                 db    0
.eh_frame:0000000000019D43                 db    0
.eh_frame:0000000000019D44                 db    0
.eh_frame:0000000000019D45                 db  41h ; A
.eh_frame:0000000000019D46                 db  0Eh
.eh_frame:0000000000019D47                 db  10h
.eh_frame:0000000000019D48                 db  86h
.eh_frame:0000000000019D49                 db    2
.eh_frame:0000000000019D4A                 db  41h ; A
.eh_frame:0000000000019D4B                 db  0Eh
.eh_frame:0000000000019D4C                 db  18h
.eh_frame:0000000000019D4D                 db  83h
.eh_frame:0000000000019D4E                 db    3
.eh_frame:0000000000019D4F                 db  4Dh ; M
.eh_frame:0000000000019D50                 db  0Eh
.eh_frame:0000000000019D51                 db  20h
.eh_frame:0000000000019D52                 db  49h ; I
.eh_frame:0000000000019D53                 db  0Eh
.eh_frame:0000000000019D54                 db  18h
.eh_frame:0000000000019D55                 db  47h ; G
.eh_frame:0000000000019D56                 db  0Eh
.eh_frame:0000000000019D57                 db  10h
.eh_frame:0000000000019D58                 db  41h ; A
.eh_frame:0000000000019D59                 db  0Eh
.eh_frame:0000000000019D5A                 db    8
.eh_frame:0000000000019D5B                 db    0
.eh_frame:0000000000019D5C                 db  18h
.eh_frame:0000000000019D5D                 db    0
.eh_frame:0000000000019D5E                 db    0
.eh_frame:0000000000019D5F                 db    0
.eh_frame:0000000000019D60                 db 0C0h
.eh_frame:0000000000019D61                 db  1Fh
.eh_frame:0000000000019D62                 db    0
.eh_frame:0000000000019D63                 db    0
.eh_frame:0000000000019D64                 db  8Ch
.eh_frame:0000000000019D65                 db  71h ; q
.eh_frame:0000000000019D66                 db 0FFh
.eh_frame:0000000000019D67                 db 0FFh
.eh_frame:0000000000019D68                 db  13h
.eh_frame:0000000000019D69                 db    0
.eh_frame:0000000000019D6A                 db    0
.eh_frame:0000000000019D6B                 db    0
.eh_frame:0000000000019D6C                 db    0
.eh_frame:0000000000019D6D                 db  41h ; A
.eh_frame:0000000000019D6E                 db  0Eh
.eh_frame:0000000000019D6F                 db  10h
.eh_frame:0000000000019D70                 db  83h
.eh_frame:0000000000019D71                 db    2
.eh_frame:0000000000019D72                 db  50h ; P
.eh_frame:0000000000019D73                 db  0Eh
.eh_frame:0000000000019D74                 db    8
.eh_frame:0000000000019D75                 db    0
.eh_frame:0000000000019D76                 db    0
.eh_frame:0000000000019D77                 db    0
.eh_frame:0000000000019D78                 db  14h
.eh_frame:0000000000019D79                 db    0
.eh_frame:0000000000019D7A                 db    0
.eh_frame:0000000000019D7B                 db    0
.eh_frame:0000000000019D7C                 db 0DCh
.eh_frame:0000000000019D7D                 db  1Fh
.eh_frame:0000000000019D7E                 db    0
.eh_frame:0000000000019D7F                 db    0
.eh_frame:0000000000019D80                 db  90h
.eh_frame:0000000000019D81                 db  71h ; q
.eh_frame:0000000000019D82                 db 0FFh
.eh_frame:0000000000019D83                 db 0FFh
.eh_frame:0000000000019D84                 db  35h ; 5
.eh_frame:0000000000019D85                 db    0
.eh_frame:0000000000019D86                 db    0
.eh_frame:0000000000019D87                 db    0
.eh_frame:0000000000019D88                 db    0
.eh_frame:0000000000019D89                 db  4Bh ; K
.eh_frame:0000000000019D8A                 db  0Eh
.eh_frame:0000000000019D8B                 db  10h
.eh_frame:0000000000019D8C                 db    0
.eh_frame:0000000000019D8D                 db    0
.eh_frame:0000000000019D8E                 db    0
.eh_frame:0000000000019D8F                 db    0
.eh_frame:0000000000019D90                 db  18h
.eh_frame:0000000000019D91                 db    0
.eh_frame:0000000000019D92                 db    0
.eh_frame:0000000000019D93                 db    0
.eh_frame:0000000000019D94                 db 0F4h
.eh_frame:0000000000019D95                 db  1Fh
.eh_frame:0000000000019D96                 db    0
.eh_frame:0000000000019D97                 db    0
.eh_frame:0000000000019D98                 db 0B8h
.eh_frame:0000000000019D99                 db  71h ; q
.eh_frame:0000000000019D9A                 db 0FFh
.eh_frame:0000000000019D9B                 db 0FFh
.eh_frame:0000000000019D9C                 db  4Fh ; O
.eh_frame:0000000000019D9D                 db    0
.eh_frame:0000000000019D9E                 db    0
.eh_frame:0000000000019D9F                 db    0
.eh_frame:0000000000019DA0                 db    0
.eh_frame:0000000000019DA1                 db  44h ; D
.eh_frame:0000000000019DA2                 db  0Eh
.eh_frame:0000000000019DA3                 db  10h
.eh_frame:0000000000019DA4                 db  54h ; T
.eh_frame:0000000000019DA5                 db  0Ah
.eh_frame:0000000000019DA6                 db  0Eh
.eh_frame:0000000000019DA7                 db    8
.eh_frame:0000000000019DA8                 db  48h ; H
.eh_frame:0000000000019DA9                 db  0Bh
.eh_frame:0000000000019DAA                 db    0
.eh_frame:0000000000019DAB                 db    0
.eh_frame:0000000000019DAC                 db  10h
.eh_frame:0000000000019DAD                 db    0
.eh_frame:0000000000019DAE                 db    0
.eh_frame:0000000000019DAF                 db    0
.eh_frame:0000000000019DB0                 db  10h
.eh_frame:0000000000019DB1                 db  20h
.eh_frame:0000000000019DB2                 db    0
.eh_frame:0000000000019DB3                 db    0
.eh_frame:0000000000019DB4                 db 0ECh
.eh_frame:0000000000019DB5                 db  71h ; q
.eh_frame:0000000000019DB6                 db 0FFh
.eh_frame:0000000000019DB7                 db 0FFh
.eh_frame:0000000000019DB8                 db  29h ; )
.eh_frame:0000000000019DB9                 db    0
.eh_frame:0000000000019DBA                 db    0
.eh_frame:0000000000019DBB                 db    0
.eh_frame:0000000000019DBC                 db    0
.eh_frame:0000000000019DBD                 db    0
.eh_frame:0000000000019DBE                 db    0
.eh_frame:0000000000019DBF                 db    0
.eh_frame:0000000000019DC0                 db  24h ; $
.eh_frame:0000000000019DC1                 db    0
.eh_frame:0000000000019DC2                 db    0
.eh_frame:0000000000019DC3                 db    0
.eh_frame:0000000000019DC4                 db  24h ; $
.eh_frame:0000000000019DC5                 db  20h
.eh_frame:0000000000019DC6                 db    0
.eh_frame:0000000000019DC7                 db    0
.eh_frame:0000000000019DC8                 db    8
.eh_frame:0000000000019DC9                 db  72h ; r
.eh_frame:0000000000019DCA                 db 0FFh
.eh_frame:0000000000019DCB                 db 0FFh
.eh_frame:0000000000019DCC                 db  97h
.eh_frame:0000000000019DCD                 db    0
.eh_frame:0000000000019DCE                 db    0
.eh_frame:0000000000019DCF                 db    0
.eh_frame:0000000000019DD0                 db    0
.eh_frame:0000000000019DD1                 db  41h ; A
.eh_frame:0000000000019DD2                 db  0Eh
.eh_frame:0000000000019DD3                 db  10h
.eh_frame:0000000000019DD4                 db  83h
.eh_frame:0000000000019DD5                 db    2
.eh_frame:0000000000019DD6                 db  4Bh ; K
.eh_frame:0000000000019DD7                 db  0Eh
.eh_frame:0000000000019DD8                 db  30h ; 0
.eh_frame:0000000000019DD9                 db    2
.eh_frame:0000000000019DDA                 db  76h ; v
.eh_frame:0000000000019DDB                 db  0Ah
.eh_frame:0000000000019DDC                 db  0Eh
.eh_frame:0000000000019DDD                 db  10h
.eh_frame:0000000000019DDE                 db  41h ; A
.eh_frame:0000000000019DDF                 db  0Eh
.eh_frame:0000000000019DE0                 db    8
.eh_frame:0000000000019DE1                 db  45h ; E
.eh_frame:0000000000019DE2                 db  0Bh
.eh_frame:0000000000019DE3                 db    0
.eh_frame:0000000000019DE4                 db    0
.eh_frame:0000000000019DE5                 db    0
.eh_frame:0000000000019DE6                 db    0
.eh_frame:0000000000019DE7                 db    0
.eh_frame:0000000000019DE8                 db  1Ch
.eh_frame:0000000000019DE9                 db    0
.eh_frame:0000000000019DEA                 db    0
.eh_frame:0000000000019DEB                 db    0
.eh_frame:0000000000019DEC                 db  4Ch ; L
.eh_frame:0000000000019DED                 db  20h
.eh_frame:0000000000019DEE                 db    0
.eh_frame:0000000000019DEF                 db    0
.eh_frame:0000000000019DF0                 db  80h
.eh_frame:0000000000019DF1                 db  72h ; r
.eh_frame:0000000000019DF2                 db 0FFh
.eh_frame:0000000000019DF3                 db 0FFh
.eh_frame:0000000000019DF4                 db  40h ; @
.eh_frame:0000000000019DF5                 db    0
.eh_frame:0000000000019DF6                 db    0
.eh_frame:0000000000019DF7                 db    0
.eh_frame:0000000000019DF8                 db    0
.eh_frame:0000000000019DF9                 db  44h ; D
.eh_frame:0000000000019DFA                 db  0Eh
.eh_frame:0000000000019DFB                 db  10h
.eh_frame:0000000000019DFC                 db  83h
.eh_frame:0000000000019DFD                 db    2
.eh_frame:0000000000019DFE                 db  5Ah ; Z
.eh_frame:0000000000019DFF                 db  0Ah
.eh_frame:0000000000019E00                 db  0Eh
.eh_frame:0000000000019E01                 db    8
.eh_frame:0000000000019E02                 db  4Ah ; J
.eh_frame:0000000000019E03                 db  0Bh
.eh_frame:0000000000019E04                 db  53h ; S
.eh_frame:0000000000019E05                 db  0Eh
.eh_frame:0000000000019E06                 db    8
.eh_frame:0000000000019E07                 db    0
.eh_frame:0000000000019E08                 db  14h
.eh_frame:0000000000019E09                 db    0
.eh_frame:0000000000019E0A                 db    0
.eh_frame:0000000000019E0B                 db    0
.eh_frame:0000000000019E0C                 db  6Ch ; l
.eh_frame:0000000000019E0D                 db  20h
.eh_frame:0000000000019E0E                 db    0
.eh_frame:0000000000019E0F                 db    0
.eh_frame:0000000000019E10                 db 0A0h
.eh_frame:0000000000019E11                 db  72h ; r
.eh_frame:0000000000019E12                 db 0FFh
.eh_frame:0000000000019E13                 db 0FFh
.eh_frame:0000000000019E14                 db  29h ; )
.eh_frame:0000000000019E15                 db    0
.eh_frame:0000000000019E16                 db    0
.eh_frame:0000000000019E17                 db    0
.eh_frame:0000000000019E18                 db    0
.eh_frame:0000000000019E19                 db    0
.eh_frame:0000000000019E1A                 db    0
.eh_frame:0000000000019E1B                 db    0
.eh_frame:0000000000019E1C                 db    0
.eh_frame:0000000000019E1D                 db    0
.eh_frame:0000000000019E1E                 db    0
.eh_frame:0000000000019E1F                 db    0
.eh_frame:0000000000019E20                 db  2Ch ; ,
.eh_frame:0000000000019E21                 db    0
.eh_frame:0000000000019E22                 db    0
.eh_frame:0000000000019E23                 db    0
.eh_frame:0000000000019E24                 db  84h
.eh_frame:0000000000019E25                 db  20h
.eh_frame:0000000000019E26                 db    0
.eh_frame:0000000000019E27                 db    0
.eh_frame:0000000000019E28                 db 0B8h
.eh_frame:0000000000019E29                 db  72h ; r
.eh_frame:0000000000019E2A                 db 0FFh
.eh_frame:0000000000019E2B                 db 0FFh
.eh_frame:0000000000019E2C                 db  57h ; W
.eh_frame:0000000000019E2D                 db    0
.eh_frame:0000000000019E2E                 db    0
.eh_frame:0000000000019E2F                 db    0
.eh_frame:0000000000019E30                 db    0
.eh_frame:0000000000019E31                 db  63h ; c
.eh_frame:0000000000019E32                 db  0Eh
.eh_frame:0000000000019E33                 db  10h
.eh_frame:0000000000019E34                 db  8Ch
.eh_frame:0000000000019E35                 db    2
.eh_frame:0000000000019E36                 db  41h ; A
.eh_frame:0000000000019E37                 db  0Eh
.eh_frame:0000000000019E38                 db  18h
.eh_frame:0000000000019E39                 db  86h
.eh_frame:0000000000019E3A                 db    3
.eh_frame:0000000000019E3B                 db  44h ; D
.eh_frame:0000000000019E3C                 db  0Eh
.eh_frame:0000000000019E3D                 db  20h
.eh_frame:0000000000019E3E                 db  83h
.eh_frame:0000000000019E3F                 db    4
.eh_frame:0000000000019E40                 db  6Bh ; k
.eh_frame:0000000000019E41                 db  0Eh
.eh_frame:0000000000019E42                 db  18h
.eh_frame:0000000000019E43                 db  41h ; A
.eh_frame:0000000000019E44                 db  0Eh
.eh_frame:0000000000019E45                 db  10h
.eh_frame:0000000000019E46                 db  42h ; B
.eh_frame:0000000000019E47                 db  0Eh
.eh_frame:0000000000019E48                 db    8
.eh_frame:0000000000019E49                 db    0
.eh_frame:0000000000019E4A                 db    0
.eh_frame:0000000000019E4B                 db    0
.eh_frame:0000000000019E4C                 db    0
.eh_frame:0000000000019E4D                 db    0
.eh_frame:0000000000019E4E                 db    0
.eh_frame:0000000000019E4F                 db    0
.eh_frame:0000000000019E50                 db  10h
.eh_frame:0000000000019E51                 db    0
.eh_frame:0000000000019E52                 db    0
.eh_frame:0000000000019E53                 db    0
.eh_frame:0000000000019E54                 db 0B4h
.eh_frame:0000000000019E55                 db  20h
.eh_frame:0000000000019E56                 db    0
.eh_frame:0000000000019E57                 db    0
.eh_frame:0000000000019E58                 db 0E8h
.eh_frame:0000000000019E59                 db  72h ; r
.eh_frame:0000000000019E5A                 db 0FFh
.eh_frame:0000000000019E5B                 db 0FFh
.eh_frame:0000000000019E5C                 db  1Ah
.eh_frame:0000000000019E5D                 db    0
.eh_frame:0000000000019E5E                 db    0
.eh_frame:0000000000019E5F                 db    0
.eh_frame:0000000000019E60                 db    0
.eh_frame:0000000000019E61                 db    0
.eh_frame:0000000000019E62                 db    0
.eh_frame:0000000000019E63                 db    0
.eh_frame:0000000000019E64                 db  10h
.eh_frame:0000000000019E65                 db    0
.eh_frame:0000000000019E66                 db    0
.eh_frame:0000000000019E67                 db    0
.eh_frame:0000000000019E68                 db 0C8h
.eh_frame:0000000000019E69                 db  20h
.eh_frame:0000000000019E6A                 db    0
.eh_frame:0000000000019E6B                 db    0
.eh_frame:0000000000019E6C                 db 0F4h
.eh_frame:0000000000019E6D                 db  72h ; r
.eh_frame:0000000000019E6E                 db 0FFh
.eh_frame:0000000000019E6F                 db 0FFh
.eh_frame:0000000000019E70                 db  0Dh
.eh_frame:0000000000019E71                 db    0
.eh_frame:0000000000019E72                 db    0
.eh_frame:0000000000019E73                 db    0
.eh_frame:0000000000019E74                 db    0
.eh_frame:0000000000019E75                 db    0
.eh_frame:0000000000019E76                 db    0
.eh_frame:0000000000019E77                 db    0
.eh_frame:0000000000019E78                 db  10h
.eh_frame:0000000000019E79                 db    0
.eh_frame:0000000000019E7A                 db    0
.eh_frame:0000000000019E7B                 db    0
.eh_frame:0000000000019E7C                 db 0DCh
.eh_frame:0000000000019E7D                 db  20h
.eh_frame:0000000000019E7E                 db    0
.eh_frame:0000000000019E7F                 db    0
.eh_frame:0000000000019E80                 db 0F0h
.eh_frame:0000000000019E81                 db  72h ; r
.eh_frame:0000000000019E82                 db 0FFh
.eh_frame:0000000000019E83                 db 0FFh
.eh_frame:0000000000019E84                 db  0Ch
.eh_frame:0000000000019E85                 db    0
.eh_frame:0000000000019E86                 db    0
.eh_frame:0000000000019E87                 db    0
.eh_frame:0000000000019E88                 db    0
.eh_frame:0000000000019E89                 db    0
.eh_frame:0000000000019E8A                 db    0
.eh_frame:0000000000019E8B                 db    0
.eh_frame:0000000000019E8C                 db  10h
.eh_frame:0000000000019E8D                 db    0
.eh_frame:0000000000019E8E                 db    0
.eh_frame:0000000000019E8F                 db    0
.eh_frame:0000000000019E90                 db 0F0h
.eh_frame:0000000000019E91                 db  20h
.eh_frame:0000000000019E92                 db    0
.eh_frame:0000000000019E93                 db    0
.eh_frame:0000000000019E94                 db 0ECh
.eh_frame:0000000000019E95                 db  72h ; r
.eh_frame:0000000000019E96                 db 0FFh
.eh_frame:0000000000019E97                 db 0FFh
.eh_frame:0000000000019E98                 db  0Ah
.eh_frame:0000000000019E99                 db    0
.eh_frame:0000000000019E9A                 db    0
.eh_frame:0000000000019E9B                 db    0
.eh_frame:0000000000019E9C                 db    0
.eh_frame:0000000000019E9D                 db    0
.eh_frame:0000000000019E9E                 db    0
.eh_frame:0000000000019E9F                 db    0
.eh_frame:0000000000019EA0                 db  10h
.eh_frame:0000000000019EA1                 db    0
.eh_frame:0000000000019EA2                 db    0
.eh_frame:0000000000019EA3                 db    0
.eh_frame:0000000000019EA4                 db    4
.eh_frame:0000000000019EA5                 db  21h ; !
.eh_frame:0000000000019EA6                 db    0
.eh_frame:0000000000019EA7                 db    0
.eh_frame:0000000000019EA8                 db 0E8h
.eh_frame:0000000000019EA9                 db  72h ; r
.eh_frame:0000000000019EAA                 db 0FFh
.eh_frame:0000000000019EAB                 db 0FFh
.eh_frame:0000000000019EAC                 db  26h ; &
.eh_frame:0000000000019EAD                 db    0
.eh_frame:0000000000019EAE                 db    0
.eh_frame:0000000000019EAF                 db    0
.eh_frame:0000000000019EB0                 db    0
.eh_frame:0000000000019EB1                 db    0
.eh_frame:0000000000019EB2                 db    0
.eh_frame:0000000000019EB3                 db    0
.eh_frame:0000000000019EB4                 db  38h ; 8
.eh_frame:0000000000019EB5                 db    0
.eh_frame:0000000000019EB6                 db    0
.eh_frame:0000000000019EB7                 db    0
.eh_frame:0000000000019EB8                 db  18h
.eh_frame:0000000000019EB9                 db  21h ; !
.eh_frame:0000000000019EBA                 db    0
.eh_frame:0000000000019EBB                 db    0
.eh_frame:0000000000019EBC                 db    4
.eh_frame:0000000000019EBD                 db  73h ; s
.eh_frame:0000000000019EBE                 db 0FFh
.eh_frame:0000000000019EBF                 db 0FFh
.eh_frame:0000000000019EC0                 db 0C5h
.eh_frame:0000000000019EC1                 db    1
.eh_frame:0000000000019EC2                 db    0
.eh_frame:0000000000019EC3                 db    0
.eh_frame:0000000000019EC4                 db    0
.eh_frame:0000000000019EC5                 db  42h ; B
.eh_frame:0000000000019EC6                 db  0Eh
.eh_frame:0000000000019EC7                 db  10h
.eh_frame:0000000000019EC8                 db  8Ch
.eh_frame:0000000000019EC9                 db    2
.eh_frame:0000000000019ECA                 db  41h ; A
.eh_frame:0000000000019ECB                 db  0Eh
.eh_frame:0000000000019ECC                 db  18h
.eh_frame:0000000000019ECD                 db  86h
.eh_frame:0000000000019ECE                 db    3
.eh_frame:0000000000019ECF                 db  44h ; D
.eh_frame:0000000000019ED0                 db  0Eh
.eh_frame:0000000000019ED1                 db  20h
.eh_frame:0000000000019ED2                 db  83h
.eh_frame:0000000000019ED3                 db    4
.eh_frame:0000000000019ED4                 db    2
.eh_frame:0000000000019ED5                 db  72h ; r
.eh_frame:0000000000019ED6                 db  0Ah
.eh_frame:0000000000019ED7                 db  0Eh
.eh_frame:0000000000019ED8                 db  18h
.eh_frame:0000000000019ED9                 db  41h ; A
.eh_frame:0000000000019EDA                 db  0Eh
.eh_frame:0000000000019EDB                 db  10h
.eh_frame:0000000000019EDC                 db  42h ; B
.eh_frame:0000000000019EDD                 db  0Eh
.eh_frame:0000000000019EDE                 db    8
.eh_frame:0000000000019EDF                 db  44h ; D
.eh_frame:0000000000019EE0                 db  0Bh
.eh_frame:0000000000019EE1                 db    2
.eh_frame:0000000000019EE2                 db  54h ; T
.eh_frame:0000000000019EE3                 db  0Ah
.eh_frame:0000000000019EE4                 db  0Eh
.eh_frame:0000000000019EE5                 db  18h
.eh_frame:0000000000019EE6                 db  45h ; E
.eh_frame:0000000000019EE7                 db  0Eh
.eh_frame:0000000000019EE8                 db  10h
.eh_frame:0000000000019EE9                 db  42h ; B
.eh_frame:0000000000019EEA                 db  0Eh
.eh_frame:0000000000019EEB                 db    8
.eh_frame:0000000000019EEC                 db  45h ; E
.eh_frame:0000000000019EED                 db  0Bh
.eh_frame:0000000000019EEE                 db    0
.eh_frame:0000000000019EEF                 db    0
.eh_frame:0000000000019EF0                 db  4Ch ; L
.eh_frame:0000000000019EF1                 db    0
.eh_frame:0000000000019EF2                 db    0
.eh_frame:0000000000019EF3                 db    0
.eh_frame:0000000000019EF4                 db  54h ; T
.eh_frame:0000000000019EF5                 db  21h ; !
.eh_frame:0000000000019EF6                 db    0
.eh_frame:0000000000019EF7                 db    0
.eh_frame:0000000000019EF8                 db  98h
.eh_frame:0000000000019EF9                 db  74h ; t
.eh_frame:0000000000019EFA                 db 0FFh
.eh_frame:0000000000019EFB                 db 0FFh
.eh_frame:0000000000019EFC                 db    5
.eh_frame:0000000000019EFD                 db    1
.eh_frame:0000000000019EFE                 db    0
.eh_frame:0000000000019EFF                 db    0
.eh_frame:0000000000019F00                 db    0
.eh_frame:0000000000019F01                 db  42h ; B
.eh_frame:0000000000019F02                 db  0Eh
.eh_frame:0000000000019F03                 db  10h
.eh_frame:0000000000019F04                 db  8Dh
.eh_frame:0000000000019F05                 db    2
.eh_frame:0000000000019F06                 db  42h ; B
.eh_frame:0000000000019F07                 db  0Eh
.eh_frame:0000000000019F08                 db  18h
.eh_frame:0000000000019F09                 db  8Ch
.eh_frame:0000000000019F0A                 db    3
.eh_frame:0000000000019F0B                 db  44h ; D
.eh_frame:0000000000019F0C                 db  0Eh
.eh_frame:0000000000019F0D                 db  20h
.eh_frame:0000000000019F0E                 db  86h
.eh_frame:0000000000019F0F                 db    4
.eh_frame:0000000000019F10                 db  41h ; A
.eh_frame:0000000000019F11                 db  0Eh
.eh_frame:0000000000019F12                 db  28h ; (
.eh_frame:0000000000019F13                 db  83h
.eh_frame:0000000000019F14                 db    5
.eh_frame:0000000000019F15                 db  4Ah ; J
.eh_frame:0000000000019F16                 db  0Eh
.eh_frame:0000000000019F17                 db  30h ; 0
.eh_frame:0000000000019F18                 db    2
.eh_frame:0000000000019F19                 db 0B3h
.eh_frame:0000000000019F1A                 db  0Ah
.eh_frame:0000000000019F1B                 db  0Eh
.eh_frame:0000000000019F1C                 db  28h ; (
.eh_frame:0000000000019F1D                 db  41h ; A
.eh_frame:0000000000019F1E                 db  0Eh
.eh_frame:0000000000019F1F                 db  20h
.eh_frame:0000000000019F20                 db  41h ; A
.eh_frame:0000000000019F21                 db  0Eh
.eh_frame:0000000000019F22                 db  18h
.eh_frame:0000000000019F23                 db  42h ; B
.eh_frame:0000000000019F24                 db  0Eh
.eh_frame:0000000000019F25                 db  10h
.eh_frame:0000000000019F26                 db  42h ; B
.eh_frame:0000000000019F27                 db  0Eh
.eh_frame:0000000000019F28                 db    8
.eh_frame:0000000000019F29                 db  44h ; D
.eh_frame:0000000000019F2A                 db  0Bh
.eh_frame:0000000000019F2B                 db  5Dh ; ]
.eh_frame:0000000000019F2C                 db  0Ah
.eh_frame:0000000000019F2D                 db  0Eh
.eh_frame:0000000000019F2E                 db  28h ; (
.eh_frame:0000000000019F2F                 db  44h ; D
.eh_frame:0000000000019F30                 db  0Eh
.eh_frame:0000000000019F31                 db  20h
.eh_frame:0000000000019F32                 db  41h ; A
.eh_frame:0000000000019F33                 db  0Eh
.eh_frame:0000000000019F34                 db  18h
.eh_frame:0000000000019F35                 db  42h ; B
.eh_frame:0000000000019F36                 db  0Eh
.eh_frame:0000000000019F37                 db  10h
.eh_frame:0000000000019F38                 db  42h ; B
.eh_frame:0000000000019F39                 db  0Eh
.eh_frame:0000000000019F3A                 db    8
.eh_frame:0000000000019F3B                 db  4Ah ; J
.eh_frame:0000000000019F3C                 db  0Bh
.eh_frame:0000000000019F3D                 db    0
.eh_frame:0000000000019F3E                 db    0
.eh_frame:0000000000019F3F                 db    0
.eh_frame:0000000000019F40                 db  34h ; 4
.eh_frame:0000000000019F41                 db    0
.eh_frame:0000000000019F42                 db    0
.eh_frame:0000000000019F43                 db    0
.eh_frame:0000000000019F44                 db 0A4h
.eh_frame:0000000000019F45                 db  21h ; !
.eh_frame:0000000000019F46                 db    0
.eh_frame:0000000000019F47                 db    0
.eh_frame:0000000000019F48                 db  58h ; X
.eh_frame:0000000000019F49                 db  75h ; u
.eh_frame:0000000000019F4A                 db 0FFh
.eh_frame:0000000000019F4B                 db 0FFh
.eh_frame:0000000000019F4C                 db  8Ah
.eh_frame:0000000000019F4D                 db    0
.eh_frame:0000000000019F4E                 db    0
.eh_frame:0000000000019F4F                 db    0
.eh_frame:0000000000019F50                 db    0
.eh_frame:0000000000019F51                 db  42h ; B
.eh_frame:0000000000019F52                 db  0Eh
.eh_frame:0000000000019F53                 db  10h
.eh_frame:0000000000019F54                 db  8Dh
.eh_frame:0000000000019F55                 db    2
.eh_frame:0000000000019F56                 db  42h ; B
.eh_frame:0000000000019F57                 db  0Eh
.eh_frame:0000000000019F58                 db  18h
.eh_frame:0000000000019F59                 db  8Ch
.eh_frame:0000000000019F5A                 db    3
.eh_frame:0000000000019F5B                 db  44h ; D
.eh_frame:0000000000019F5C                 db  0Eh
.eh_frame:0000000000019F5D                 db  20h
.eh_frame:0000000000019F5E                 db  86h
.eh_frame:0000000000019F5F                 db    4
.eh_frame:0000000000019F60                 db  48h ; H
.eh_frame:0000000000019F61                 db  0Eh
.eh_frame:0000000000019F62                 db  28h ; (
.eh_frame:0000000000019F63                 db  83h
.eh_frame:0000000000019F64                 db    5
.eh_frame:0000000000019F65                 db  4Ah ; J
.eh_frame:0000000000019F66                 db  0Eh
.eh_frame:0000000000019F67                 db  30h ; 0
.eh_frame:0000000000019F68                 db    2
.eh_frame:0000000000019F69                 db  66h ; f
.eh_frame:0000000000019F6A                 db  0Eh
.eh_frame:0000000000019F6B                 db  28h ; (
.eh_frame:0000000000019F6C                 db  44h ; D
.eh_frame:0000000000019F6D                 db  0Eh
.eh_frame:0000000000019F6E                 db  20h
.eh_frame:0000000000019F6F                 db  41h ; A
.eh_frame:0000000000019F70                 db  0Eh
.eh_frame:0000000000019F71                 db  18h
.eh_frame:0000000000019F72                 db  42h ; B
.eh_frame:0000000000019F73                 db  0Eh
.eh_frame:0000000000019F74                 db  10h
.eh_frame:0000000000019F75                 db  42h ; B
.eh_frame:0000000000019F76                 db  0Eh
.eh_frame:0000000000019F77                 db    8
.eh_frame:0000000000019F78                 db  28h ; (
.eh_frame:0000000000019F79                 db    0
.eh_frame:0000000000019F7A                 db    0
.eh_frame:0000000000019F7B                 db    0
.eh_frame:0000000000019F7C                 db 0DCh
.eh_frame:0000000000019F7D                 db  21h ; !
.eh_frame:0000000000019F7E                 db    0
.eh_frame:0000000000019F7F                 db    0
.eh_frame:0000000000019F80                 db 0B0h
.eh_frame:0000000000019F81                 db  75h ; u
.eh_frame:0000000000019F82                 db 0FFh
.eh_frame:0000000000019F83                 db 0FFh
.eh_frame:0000000000019F84                 db  42h ; B
.eh_frame:0000000000019F85                 db    0
.eh_frame:0000000000019F86                 db    0
.eh_frame:0000000000019F87                 db    0
.eh_frame:0000000000019F88                 db    0
.eh_frame:0000000000019F89                 db  46h ; F
.eh_frame:0000000000019F8A                 db  0Eh
.eh_frame:0000000000019F8B                 db  10h
.eh_frame:0000000000019F8C                 db  86h
.eh_frame:0000000000019F8D                 db    2
.eh_frame:0000000000019F8E                 db  41h ; A
.eh_frame:0000000000019F8F                 db  0Eh
.eh_frame:0000000000019F90                 db  18h
.eh_frame:0000000000019F91                 db  83h
.eh_frame:0000000000019F92                 db    3
.eh_frame:0000000000019F93                 db  47h ; G
.eh_frame:0000000000019F94                 db  0Eh
.eh_frame:0000000000019F95                 db  20h
.eh_frame:0000000000019F96                 db  68h ; h
.eh_frame:0000000000019F97                 db  0Eh
.eh_frame:0000000000019F98                 db  18h
.eh_frame:0000000000019F99                 db  41h ; A
.eh_frame:0000000000019F9A                 db  0Eh
.eh_frame:0000000000019F9B                 db  10h
.eh_frame:0000000000019F9C                 db  41h ; A
.eh_frame:0000000000019F9D                 db  0Eh
.eh_frame:0000000000019F9E                 db    8
.eh_frame:0000000000019F9F                 db  48h ; H
.eh_frame:0000000000019FA0                 db 0C3h
.eh_frame:0000000000019FA1                 db 0C6h
.eh_frame:0000000000019FA2                 db    0
.eh_frame:0000000000019FA3                 db    0
.eh_frame:0000000000019FA4                 db  18h
.eh_frame:0000000000019FA5                 db    0
.eh_frame:0000000000019FA6                 db    0
.eh_frame:0000000000019FA7                 db    0
.eh_frame:0000000000019FA8                 db    8
.eh_frame:0000000000019FA9                 db  22h ; "
.eh_frame:0000000000019FAA                 db    0
.eh_frame:0000000000019FAB                 db    0
.eh_frame:0000000000019FAC                 db 0D4h
.eh_frame:0000000000019FAD                 db  75h ; u
.eh_frame:0000000000019FAE                 db 0FFh
.eh_frame:0000000000019FAF                 db 0FFh
.eh_frame:0000000000019FB0                 db  39h ; 9
.eh_frame:0000000000019FB1                 db    0
.eh_frame:0000000000019FB2                 db    0
.eh_frame:0000000000019FB3                 db    0
.eh_frame:0000000000019FB4                 db    0
.eh_frame:0000000000019FB5                 db  41h ; A
.eh_frame:0000000000019FB6                 db  0Eh
.eh_frame:0000000000019FB7                 db  10h
.eh_frame:0000000000019FB8                 db  83h
.eh_frame:0000000000019FB9                 db    2
.eh_frame:0000000000019FBA                 db  68h ; h
.eh_frame:0000000000019FBB                 db  0Ah
.eh_frame:0000000000019FBC                 db  0Eh
.eh_frame:0000000000019FBD                 db    8
.eh_frame:0000000000019FBE                 db  47h ; G
.eh_frame:0000000000019FBF                 db  0Bh
.eh_frame:0000000000019FC0                 db  38h ; 8
.eh_frame:0000000000019FC1                 db    0
.eh_frame:0000000000019FC2                 db    0
.eh_frame:0000000000019FC3                 db    0
.eh_frame:0000000000019FC4                 db  24h ; $
.eh_frame:0000000000019FC5                 db  22h ; "
.eh_frame:0000000000019FC6                 db    0
.eh_frame:0000000000019FC7                 db    0
.eh_frame:0000000000019FC8                 db 0F8h
.eh_frame:0000000000019FC9                 db  75h ; u
.eh_frame:0000000000019FCA                 db 0FFh
.eh_frame:0000000000019FCB                 db 0FFh
.eh_frame:0000000000019FCC                 db  2Ch ; ,
.eh_frame:0000000000019FCD                 db    1
.eh_frame:0000000000019FCE                 db    0
.eh_frame:0000000000019FCF                 db    0
.eh_frame:0000000000019FD0                 db    0
.eh_frame:0000000000019FD1                 db  42h ; B
.eh_frame:0000000000019FD2                 db  0Eh
.eh_frame:0000000000019FD3                 db  10h
.eh_frame:0000000000019FD4                 db  8Dh
.eh_frame:0000000000019FD5                 db    2
.eh_frame:0000000000019FD6                 db  42h ; B
.eh_frame:0000000000019FD7                 db  0Eh
.eh_frame:0000000000019FD8                 db  18h
.eh_frame:0000000000019FD9                 db  8Ch
.eh_frame:0000000000019FDA                 db    3
.eh_frame:0000000000019FDB                 db  41h ; A
.eh_frame:0000000000019FDC                 db  0Eh
.eh_frame:0000000000019FDD                 db  20h
.eh_frame:0000000000019FDE                 db  86h
.eh_frame:0000000000019FDF                 db    4
.eh_frame:0000000000019FE0                 db  41h ; A
.eh_frame:0000000000019FE1                 db  0Eh
.eh_frame:0000000000019FE2                 db  28h ; (
.eh_frame:0000000000019FE3                 db  83h
.eh_frame:0000000000019FE4                 db    5
.eh_frame:0000000000019FE5                 db  47h ; G
.eh_frame:0000000000019FE6                 db  0Eh
.eh_frame:0000000000019FE7                 db 0C0h
.eh_frame:0000000000019FE8                 db    1
.eh_frame:0000000000019FE9                 db    2
.eh_frame:0000000000019FEA                 db 0A4h
.eh_frame:0000000000019FEB                 db  0Ah
.eh_frame:0000000000019FEC                 db  0Eh
.eh_frame:0000000000019FED                 db  28h ; (
.eh_frame:0000000000019FEE                 db  41h ; A
.eh_frame:0000000000019FEF                 db  0Eh
.eh_frame:0000000000019FF0                 db  20h
.eh_frame:0000000000019FF1                 db  41h ; A
.eh_frame:0000000000019FF2                 db  0Eh
.eh_frame:0000000000019FF3                 db  18h
.eh_frame:0000000000019FF4                 db  42h ; B
.eh_frame:0000000000019FF5                 db  0Eh
.eh_frame:0000000000019FF6                 db  10h
.eh_frame:0000000000019FF7                 db  42h ; B
.eh_frame:0000000000019FF8                 db  0Eh
.eh_frame:0000000000019FF9                 db    8
.eh_frame:0000000000019FFA                 db  49h ; I
.eh_frame:0000000000019FFB                 db  0Bh
.eh_frame:0000000000019FFC                 db  20h
.eh_frame:0000000000019FFD                 db    0
.eh_frame:0000000000019FFE                 db    0
.eh_frame:0000000000019FFF                 db    0
.eh_frame:000000000001A000                 db  60h ; `
.eh_frame:000000000001A001                 db  22h ; "
.eh_frame:000000000001A002                 db    0
.eh_frame:000000000001A003                 db    0
.eh_frame:000000000001A004                 db 0ECh
.eh_frame:000000000001A005                 db  76h ; v
.eh_frame:000000000001A006                 db 0FFh
.eh_frame:000000000001A007                 db 0FFh
.eh_frame:000000000001A008                 db  6Ah ; j
.eh_frame:000000000001A009                 db    0
.eh_frame:000000000001A00A                 db    0
.eh_frame:000000000001A00B                 db    0
.eh_frame:000000000001A00C                 db    0
.eh_frame:000000000001A00D                 db  44h ; D
.eh_frame:000000000001A00E                 db  0Eh
.eh_frame:000000000001A00F                 db  10h
.eh_frame:000000000001A010                 db  72h ; r
.eh_frame:000000000001A011                 db  0Ah
.eh_frame:000000000001A012                 db  0Eh
.eh_frame:000000000001A013                 db    8
.eh_frame:000000000001A014                 db  4Ah ; J
.eh_frame:000000000001A015                 db  0Bh
.eh_frame:000000000001A016                 db  5Bh ; [
.eh_frame:000000000001A017                 db  0Ah
.eh_frame:000000000001A018                 db  0Eh
.eh_frame:000000000001A019                 db    8
.eh_frame:000000000001A01A                 db  45h ; E
.eh_frame:000000000001A01B                 db  0Bh
.eh_frame:000000000001A01C                 db  49h ; I
.eh_frame:000000000001A01D                 db  0Eh
.eh_frame:000000000001A01E                 db    8
.eh_frame:000000000001A01F                 db    0
.eh_frame:000000000001A020                 db  40h ; @
.eh_frame:000000000001A021                 db    0
.eh_frame:000000000001A022                 db    0
.eh_frame:000000000001A023                 db    0
.eh_frame:000000000001A024                 db  84h
.eh_frame:000000000001A025                 db  22h ; "
.eh_frame:000000000001A026                 db    0
.eh_frame:000000000001A027                 db    0
.eh_frame:000000000001A028                 db  38h ; 8
.eh_frame:000000000001A029                 db  77h ; w
.eh_frame:000000000001A02A                 db 0FFh
.eh_frame:000000000001A02B                 db 0FFh
.eh_frame:000000000001A02C                 db  66h ; f
.eh_frame:000000000001A02D                 db    0
.eh_frame:000000000001A02E                 db    0
.eh_frame:000000000001A02F                 db    0
.eh_frame:000000000001A030                 db    0
.eh_frame:000000000001A031                 db  41h ; A
.eh_frame:000000000001A032                 db  0Eh
.eh_frame:000000000001A033                 db  10h
.eh_frame:000000000001A034                 db  86h
.eh_frame:000000000001A035                 db    2
.eh_frame:000000000001A036                 db  41h ; A
.eh_frame:000000000001A037                 db  0Eh
.eh_frame:000000000001A038                 db  18h
.eh_frame:000000000001A039                 db  83h
.eh_frame:000000000001A03A                 db    3
.eh_frame:000000000001A03B                 db  49h ; I
.eh_frame:000000000001A03C                 db  0Eh
.eh_frame:000000000001A03D                 db  20h
.eh_frame:000000000001A03E                 db  61h ; a
.eh_frame:000000000001A03F                 db  0Ah
.eh_frame:000000000001A040                 db  0Eh
.eh_frame:000000000001A041                 db  18h
.eh_frame:000000000001A042                 db  41h ; A
.eh_frame:000000000001A043                 db  0Eh
.eh_frame:000000000001A044                 db  10h
.eh_frame:000000000001A045                 db  41h ; A
.eh_frame:000000000001A046                 db  0Eh
.eh_frame:000000000001A047                 db    8
.eh_frame:000000000001A048                 db  42h ; B
.eh_frame:000000000001A049                 db  0Bh
.eh_frame:000000000001A04A                 db  5Bh ; [
.eh_frame:000000000001A04B                 db  0Ah
.eh_frame:000000000001A04C                 db  0Eh
.eh_frame:000000000001A04D                 db  18h
.eh_frame:000000000001A04E                 db  41h ; A
.eh_frame:000000000001A04F                 db  0Eh
.eh_frame:000000000001A050                 db  10h
.eh_frame:000000000001A051                 db  41h ; A
.eh_frame:000000000001A052                 db  0Eh
.eh_frame:000000000001A053                 db    8
.eh_frame:000000000001A054                 db  43h ; C
.eh_frame:000000000001A055                 db  0Bh
.eh_frame:000000000001A056                 db  4Eh ; N
.eh_frame:000000000001A057                 db  0Ah
.eh_frame:000000000001A058                 db  0Eh
.eh_frame:000000000001A059                 db  18h
.eh_frame:000000000001A05A                 db  41h ; A
.eh_frame:000000000001A05B                 db  0Eh
.eh_frame:000000000001A05C                 db  10h
.eh_frame:000000000001A05D                 db  41h ; A
.eh_frame:000000000001A05E                 db  0Eh
.eh_frame:000000000001A05F                 db    8
.eh_frame:000000000001A060                 db  41h ; A
.eh_frame:000000000001A061                 db  0Bh
.eh_frame:000000000001A062                 db    0
.eh_frame:000000000001A063                 db    0
.eh_frame:000000000001A064                 db  28h ; (
.eh_frame:000000000001A065                 db    0
.eh_frame:000000000001A066                 db    0
.eh_frame:000000000001A067                 db    0
.eh_frame:000000000001A068                 db 0C8h
.eh_frame:000000000001A069                 db  22h ; "
.eh_frame:000000000001A06A                 db    0
.eh_frame:000000000001A06B                 db    0
.eh_frame:000000000001A06C                 db  64h ; d
.eh_frame:000000000001A06D                 db  77h ; w
.eh_frame:000000000001A06E                 db 0FFh
.eh_frame:000000000001A06F                 db 0FFh
.eh_frame:000000000001A070                 db  5Ch ; \
.eh_frame:000000000001A071                 db    0
.eh_frame:000000000001A072                 db    0
.eh_frame:000000000001A073                 db    0
.eh_frame:000000000001A074                 db    0
.eh_frame:000000000001A075                 db  41h ; A
.eh_frame:000000000001A076                 db  0Eh
.eh_frame:000000000001A077                 db  10h
.eh_frame:000000000001A078                 db  86h
.eh_frame:000000000001A079                 db    2
.eh_frame:000000000001A07A                 db  41h ; A
.eh_frame:000000000001A07B                 db  0Eh
.eh_frame:000000000001A07C                 db  18h
.eh_frame:000000000001A07D                 db  83h
.eh_frame:000000000001A07E                 db    3
.eh_frame:000000000001A07F                 db  47h ; G
.eh_frame:000000000001A080                 db  0Eh
.eh_frame:000000000001A081                 db  20h
.eh_frame:000000000001A082                 db  6Ch ; l
.eh_frame:000000000001A083                 db  0Ah
.eh_frame:000000000001A084                 db  0Eh
.eh_frame:000000000001A085                 db  18h
.eh_frame:000000000001A086                 db  43h ; C
.eh_frame:000000000001A087                 db  0Eh
.eh_frame:000000000001A088                 db  10h
.eh_frame:000000000001A089                 db  41h ; A
.eh_frame:000000000001A08A                 db  0Eh
.eh_frame:000000000001A08B                 db    8
.eh_frame:000000000001A08C                 db  47h ; G
.eh_frame:000000000001A08D                 db  0Bh
.eh_frame:000000000001A08E                 db    0
.eh_frame:000000000001A08F                 db    0
.eh_frame:000000000001A090                 db  24h ; $
.eh_frame:000000000001A091                 db    0
.eh_frame:000000000001A092                 db    0
.eh_frame:000000000001A093                 db    0
.eh_frame:000000000001A094                 db 0F4h
.eh_frame:000000000001A095                 db  22h ; "
.eh_frame:000000000001A096                 db    0
.eh_frame:000000000001A097                 db    0
.eh_frame:000000000001A098                 db  98h
.eh_frame:000000000001A099                 db  77h ; w
.eh_frame:000000000001A09A                 db 0FFh
.eh_frame:000000000001A09B                 db 0FFh
.eh_frame:000000000001A09C                 db  6Bh ; k
.eh_frame:000000000001A09D                 db    0
.eh_frame:000000000001A09E                 db    0
.eh_frame:000000000001A09F                 db    0
.eh_frame:000000000001A0A0                 db    0
.eh_frame:000000000001A0A1                 db  41h ; A
.eh_frame:000000000001A0A2                 db  0Eh
.eh_frame:000000000001A0A3                 db  10h
.eh_frame:000000000001A0A4                 db  83h
.eh_frame:000000000001A0A5                 db    2
.eh_frame:000000000001A0A6                 db  6Fh ; o
.eh_frame:000000000001A0A7                 db  0Ah
.eh_frame:000000000001A0A8                 db  0Eh
.eh_frame:000000000001A0A9                 db    8
.eh_frame:000000000001A0AA                 db  48h ; H
.eh_frame:000000000001A0AB                 db  0Bh
.eh_frame:000000000001A0AC                 db  5Ah ; Z
.eh_frame:000000000001A0AD                 db  0Ah
.eh_frame:000000000001A0AE                 db  0Eh
.eh_frame:000000000001A0AF                 db    8
.eh_frame:000000000001A0B0                 db  46h ; F
.eh_frame:000000000001A0B1                 db  0Bh
.eh_frame:000000000001A0B2                 db  52h ; R
.eh_frame:000000000001A0B3                 db  0Eh
.eh_frame:000000000001A0B4                 db    8
.eh_frame:000000000001A0B5                 db    0
.eh_frame:000000000001A0B6                 db    0
.eh_frame:000000000001A0B7                 db    0
.eh_frame:000000000001A0B8                 db  1Ch
.eh_frame:000000000001A0B9                 db    0
.eh_frame:000000000001A0BA                 db    0
.eh_frame:000000000001A0BB                 db    0
.eh_frame:000000000001A0BC                 db  1Ch
.eh_frame:000000000001A0BD                 db  23h ; #
.eh_frame:000000000001A0BE                 db    0
.eh_frame:000000000001A0BF                 db    0
.eh_frame:000000000001A0C0                 db 0E0h
.eh_frame:000000000001A0C1                 db  77h ; w
.eh_frame:000000000001A0C2                 db 0FFh
.eh_frame:000000000001A0C3                 db 0FFh
.eh_frame:000000000001A0C4                 db  63h ; c
.eh_frame:000000000001A0C5                 db    0
.eh_frame:000000000001A0C6                 db    0
.eh_frame:000000000001A0C7                 db    0
.eh_frame:000000000001A0C8                 db    0
.eh_frame:000000000001A0C9                 db  47h ; G
.eh_frame:000000000001A0CA                 db  0Eh
.eh_frame:000000000001A0CB                 db  10h
.eh_frame:000000000001A0CC                 db  83h
.eh_frame:000000000001A0CD                 db    2
.eh_frame:000000000001A0CE                 db  70h ; p
.eh_frame:000000000001A0CF                 db  0Ah
.eh_frame:000000000001A0D0                 db  0Eh
.eh_frame:000000000001A0D1                 db    8
.eh_frame:000000000001A0D2                 db  49h ; I
.eh_frame:000000000001A0D3                 db  0Bh
.eh_frame:000000000001A0D4                 db  62h ; b
.eh_frame:000000000001A0D5                 db  0Eh
.eh_frame:000000000001A0D6                 db    8
.eh_frame:000000000001A0D7                 db    0
.eh_frame:000000000001A0D8                 db  10h
.eh_frame:000000000001A0D9                 db    0
.eh_frame:000000000001A0DA                 db    0
.eh_frame:000000000001A0DB                 db    0
.eh_frame:000000000001A0DC                 db  3Ch ; <
.eh_frame:000000000001A0DD                 db  23h ; #
.eh_frame:000000000001A0DE                 db    0
.eh_frame:000000000001A0DF                 db    0
.eh_frame:000000000001A0E0                 db  30h ; 0
.eh_frame:000000000001A0E1                 db  78h ; x
.eh_frame:000000000001A0E2                 db 0FFh
.eh_frame:000000000001A0E3                 db 0FFh
.eh_frame:000000000001A0E4                 db  3Ah ; :
.eh_frame:000000000001A0E5                 db    0
.eh_frame:000000000001A0E6                 db    0
.eh_frame:000000000001A0E7                 db    0
.eh_frame:000000000001A0E8                 db    0
.eh_frame:000000000001A0E9                 db    0
.eh_frame:000000000001A0EA                 db    0
.eh_frame:000000000001A0EB                 db    0
.eh_frame:000000000001A0EC                 db  4Ch ; L
.eh_frame:000000000001A0ED                 db    0
.eh_frame:000000000001A0EE                 db    0
.eh_frame:000000000001A0EF                 db    0
.eh_frame:000000000001A0F0                 db  50h ; P
.eh_frame:000000000001A0F1                 db  23h ; #
.eh_frame:000000000001A0F2                 db    0
.eh_frame:000000000001A0F3                 db    0
.eh_frame:000000000001A0F4                 db  5Ch ; \
.eh_frame:000000000001A0F5                 db  78h ; x
.eh_frame:000000000001A0F6                 db 0FFh
.eh_frame:000000000001A0F7                 db 0FFh
.eh_frame:000000000001A0F8                 db  7Ah ; z
.eh_frame:000000000001A0F9                 db    2
.eh_frame:000000000001A0FA                 db    0
.eh_frame:000000000001A0FB                 db    0
.eh_frame:000000000001A0FC                 db    0
.eh_frame:000000000001A0FD                 db  42h ; B
.eh_frame:000000000001A0FE                 db  0Eh
.eh_frame:000000000001A0FF                 db  10h
.eh_frame:000000000001A100                 db  8Fh
.eh_frame:000000000001A101                 db    2
.eh_frame:000000000001A102                 db  42h ; B
.eh_frame:000000000001A103                 db  0Eh
.eh_frame:000000000001A104                 db  18h
.eh_frame:000000000001A105                 db  8Eh
.eh_frame:000000000001A106                 db    3
.eh_frame:000000000001A107                 db  45h ; E
.eh_frame:000000000001A108                 db  0Eh
.eh_frame:000000000001A109                 db  20h
.eh_frame:000000000001A10A                 db  8Dh
.eh_frame:000000000001A10B                 db    4
.eh_frame:000000000001A10C                 db  42h ; B
.eh_frame:000000000001A10D                 db  0Eh
.eh_frame:000000000001A10E                 db  28h ; (
.eh_frame:000000000001A10F                 db  8Ch
.eh_frame:000000000001A110                 db    5
.eh_frame:000000000001A111                 db  44h ; D
.eh_frame:000000000001A112                 db  0Eh
.eh_frame:000000000001A113                 db  30h ; 0
.eh_frame:000000000001A114                 db  86h
.eh_frame:000000000001A115                 db    6
.eh_frame:000000000001A116                 db  41h ; A
.eh_frame:000000000001A117                 db  0Eh
.eh_frame:000000000001A118                 db  38h ; 8
.eh_frame:000000000001A119                 db  83h
.eh_frame:000000000001A11A                 db    7
.eh_frame:000000000001A11B                 db  4Dh ; M
.eh_frame:000000000001A11C                 db  0Eh
.eh_frame:000000000001A11D                 db 0F0h
.eh_frame:000000000001A11E                 db    1
.eh_frame:000000000001A11F                 db    3
.eh_frame:000000000001A120                 db    8
.eh_frame:000000000001A121                 db    1
.eh_frame:000000000001A122                 db  0Ah
.eh_frame:000000000001A123                 db  0Eh
.eh_frame:000000000001A124                 db  38h ; 8
.eh_frame:000000000001A125                 db  41h ; A
.eh_frame:000000000001A126                 db  0Eh
.eh_frame:000000000001A127                 db  30h ; 0
.eh_frame:000000000001A128                 db  41h ; A
.eh_frame:000000000001A129                 db  0Eh
.eh_frame:000000000001A12A                 db  28h ; (
.eh_frame:000000000001A12B                 db  42h ; B
.eh_frame:000000000001A12C                 db  0Eh
.eh_frame:000000000001A12D                 db  20h
.eh_frame:000000000001A12E                 db  42h ; B
.eh_frame:000000000001A12F                 db  0Eh
.eh_frame:000000000001A130                 db  18h
.eh_frame:000000000001A131                 db  42h ; B
.eh_frame:000000000001A132                 db  0Eh
.eh_frame:000000000001A133                 db  10h
.eh_frame:000000000001A134                 db  42h ; B
.eh_frame:000000000001A135                 db  0Eh
.eh_frame:000000000001A136                 db    8
.eh_frame:000000000001A137                 db  41h ; A
.eh_frame:000000000001A138                 db  0Bh
.eh_frame:000000000001A139                 db    0
.eh_frame:000000000001A13A                 db    0
.eh_frame:000000000001A13B                 db    0
.eh_frame:000000000001A13C                 db  40h ; @
.eh_frame:000000000001A13D                 db    0
.eh_frame:000000000001A13E                 db    0
.eh_frame:000000000001A13F                 db    0
.eh_frame:000000000001A140                 db 0A0h
.eh_frame:000000000001A141                 db  23h ; #
.eh_frame:000000000001A142                 db    0
.eh_frame:000000000001A143                 db    0
.eh_frame:000000000001A144                 db  8Ch
.eh_frame:000000000001A145                 db  7Ah ; z
.eh_frame:000000000001A146                 db 0FFh
.eh_frame:000000000001A147                 db 0FFh
.eh_frame:000000000001A148                 db 0AFh
.eh_frame:000000000001A149                 db    0
.eh_frame:000000000001A14A                 db    0
.eh_frame:000000000001A14B                 db    0
.eh_frame:000000000001A14C                 db    0
.eh_frame:000000000001A14D                 db  48h ; H
.eh_frame:000000000001A14E                 db  0Eh
.eh_frame:000000000001A14F                 db  10h
.eh_frame:000000000001A150                 db  8Ch
.eh_frame:000000000001A151                 db    2
.eh_frame:000000000001A152                 db  44h ; D
.eh_frame:000000000001A153                 db  0Eh
.eh_frame:000000000001A154                 db  18h
.eh_frame:000000000001A155                 db  86h
.eh_frame:000000000001A156                 db    3
.eh_frame:000000000001A157                 db  41h ; A
.eh_frame:000000000001A158                 db  0Eh
.eh_frame:000000000001A159                 db  20h
.eh_frame:000000000001A15A                 db  83h
.eh_frame:000000000001A15B                 db    4
.eh_frame:000000000001A15C                 db    2
.eh_frame:000000000001A15D                 db  65h ; e
.eh_frame:000000000001A15E                 db  0Ah
.eh_frame:000000000001A15F                 db  0Eh
.eh_frame:000000000001A160                 db  18h
.eh_frame:000000000001A161                 db  46h ; F
.eh_frame:000000000001A162                 db  0Eh
.eh_frame:000000000001A163                 db  10h
.eh_frame:000000000001A164                 db  42h ; B
.eh_frame:000000000001A165                 db  0Eh
.eh_frame:000000000001A166                 db    8
.eh_frame:000000000001A167                 db  46h ; F
.eh_frame:000000000001A168                 db  0Bh
.eh_frame:000000000001A169                 db  5Eh ; ^
.eh_frame:000000000001A16A                 db  0Ah
.eh_frame:000000000001A16B                 db  0Eh
.eh_frame:000000000001A16C                 db  18h
.eh_frame:000000000001A16D                 db  41h ; A
.eh_frame:000000000001A16E                 db  0Eh
.eh_frame:000000000001A16F                 db  10h
.eh_frame:000000000001A170                 db  42h ; B
.eh_frame:000000000001A171                 db  0Eh
.eh_frame:000000000001A172                 db    8
.eh_frame:000000000001A173                 db  47h ; G
.eh_frame:000000000001A174                 db  0Bh
.eh_frame:000000000001A175                 db  41h ; A
.eh_frame:000000000001A176                 db  0Eh
.eh_frame:000000000001A177                 db  18h
.eh_frame:000000000001A178                 db  43h ; C
.eh_frame:000000000001A179                 db  0Eh
.eh_frame:000000000001A17A                 db  10h
.eh_frame:000000000001A17B                 db  42h ; B
.eh_frame:000000000001A17C                 db  0Eh
.eh_frame:000000000001A17D                 db    8
.eh_frame:000000000001A17E                 db    0
.eh_frame:000000000001A17F                 db    0
.eh_frame:000000000001A180                 db  18h
.eh_frame:000000000001A181                 db    0
.eh_frame:000000000001A182                 db    0
.eh_frame:000000000001A183                 db    0
.eh_frame:000000000001A184                 db 0E4h
.eh_frame:000000000001A185                 db  23h ; #
.eh_frame:000000000001A186                 db    0
.eh_frame:000000000001A187                 db    0
.eh_frame:000000000001A188                 db 0F8h
.eh_frame:000000000001A189                 db  7Ah ; z
.eh_frame:000000000001A18A                 db 0FFh
.eh_frame:000000000001A18B                 db 0FFh
.eh_frame:000000000001A18C                 db 0B8h
.eh_frame:000000000001A18D                 db    0
.eh_frame:000000000001A18E                 db    0
.eh_frame:000000000001A18F                 db    0
.eh_frame:000000000001A190                 db    0
.eh_frame:000000000001A191                 db  44h ; D
.eh_frame:000000000001A192                 db  0Eh
.eh_frame:000000000001A193                 db  30h ; 0
.eh_frame:000000000001A194                 db    2
.eh_frame:000000000001A195                 db  55h ; U
.eh_frame:000000000001A196                 db  0Ah
.eh_frame:000000000001A197                 db  0Eh
.eh_frame:000000000001A198                 db    8
.eh_frame:000000000001A199                 db  47h ; G
.eh_frame:000000000001A19A                 db  0Bh
.eh_frame:000000000001A19B                 db    0
.eh_frame:000000000001A19C                 db  4Ch ; L
.eh_frame:000000000001A19D                 db    0
.eh_frame:000000000001A19E                 db    0
.eh_frame:000000000001A19F                 db    0
.eh_frame:000000000001A1A0                 db    0
.eh_frame:000000000001A1A1                 db  24h ; $
.eh_frame:000000000001A1A2                 db    0
.eh_frame:000000000001A1A3                 db    0
.eh_frame:000000000001A1A4                 db  9Ch
.eh_frame:000000000001A1A5                 db  7Bh ; {
.eh_frame:000000000001A1A6                 db 0FFh
.eh_frame:000000000001A1A7                 db 0FFh
.eh_frame:000000000001A1A8                 db 0D1h
.eh_frame:000000000001A1A9                 db    9
.eh_frame:000000000001A1AA                 db    0
.eh_frame:000000000001A1AB                 db    0
.eh_frame:000000000001A1AC                 db    0
.eh_frame:000000000001A1AD                 db  42h ; B
.eh_frame:000000000001A1AE                 db  0Eh
.eh_frame:000000000001A1AF                 db  10h
.eh_frame:000000000001A1B0                 db  8Fh
.eh_frame:000000000001A1B1                 db    2
.eh_frame:000000000001A1B2                 db  42h ; B
.eh_frame:000000000001A1B3                 db  0Eh
.eh_frame:000000000001A1B4                 db  18h
.eh_frame:000000000001A1B5                 db  8Eh
.eh_frame:000000000001A1B6                 db    3
.eh_frame:000000000001A1B7                 db  45h ; E
.eh_frame:000000000001A1B8                 db  0Eh
.eh_frame:000000000001A1B9                 db  20h
.eh_frame:000000000001A1BA                 db  8Dh
.eh_frame:000000000001A1BB                 db    4
.eh_frame:000000000001A1BC                 db  42h ; B
.eh_frame:000000000001A1BD                 db  0Eh
.eh_frame:000000000001A1BE                 db  28h ; (
.eh_frame:000000000001A1BF                 db  8Ch
.eh_frame:000000000001A1C0                 db    5
.eh_frame:000000000001A1C1                 db  41h ; A
.eh_frame:000000000001A1C2                 db  0Eh
.eh_frame:000000000001A1C3                 db  30h ; 0
.eh_frame:000000000001A1C4                 db  86h
.eh_frame:000000000001A1C5                 db    6
.eh_frame:000000000001A1C6                 db  41h ; A
.eh_frame:000000000001A1C7                 db  0Eh
.eh_frame:000000000001A1C8                 db  38h ; 8
.eh_frame:000000000001A1C9                 db  83h
.eh_frame:000000000001A1CA                 db    7
.eh_frame:000000000001A1CB                 db  44h ; D
.eh_frame:000000000001A1CC                 db  0Eh
.eh_frame:000000000001A1CD                 db 0B0h
.eh_frame:000000000001A1CE                 db    1
.eh_frame:000000000001A1CF                 db    3
.eh_frame:000000000001A1D0                 db 0D1h
.eh_frame:000000000001A1D1                 db    5
.eh_frame:000000000001A1D2                 db  0Ah
.eh_frame:000000000001A1D3                 db  0Eh
.eh_frame:000000000001A1D4                 db  38h ; 8
.eh_frame:000000000001A1D5                 db  41h ; A
.eh_frame:000000000001A1D6                 db  0Eh
.eh_frame:000000000001A1D7                 db  30h ; 0
.eh_frame:000000000001A1D8                 db  41h ; A
.eh_frame:000000000001A1D9                 db  0Eh
.eh_frame:000000000001A1DA                 db  28h ; (
.eh_frame:000000000001A1DB                 db  42h ; B
.eh_frame:000000000001A1DC                 db  0Eh
.eh_frame:000000000001A1DD                 db  20h
.eh_frame:000000000001A1DE                 db  42h ; B
.eh_frame:000000000001A1DF                 db  0Eh
.eh_frame:000000000001A1E0                 db  18h
.eh_frame:000000000001A1E1                 db  42h ; B
.eh_frame:000000000001A1E2                 db  0Eh
.eh_frame:000000000001A1E3                 db  10h
.eh_frame:000000000001A1E4                 db  42h ; B
.eh_frame:000000000001A1E5                 db  0Eh
.eh_frame:000000000001A1E6                 db    8
.eh_frame:000000000001A1E7                 db  44h ; D
.eh_frame:000000000001A1E8                 db  0Bh
.eh_frame:000000000001A1E9                 db    0
.eh_frame:000000000001A1EA                 db    0
.eh_frame:000000000001A1EB                 db    0
.eh_frame:000000000001A1EC                 db  48h ; H
.eh_frame:000000000001A1ED                 db    0
.eh_frame:000000000001A1EE                 db    0
.eh_frame:000000000001A1EF                 db    0
.eh_frame:000000000001A1F0                 db  50h ; P
.eh_frame:000000000001A1F1                 db  24h ; $
.eh_frame:000000000001A1F2                 db    0
.eh_frame:000000000001A1F3                 db    0
.eh_frame:000000000001A1F4                 db  2Ch ; ,
.eh_frame:000000000001A1F5                 db  85h
.eh_frame:000000000001A1F6                 db 0FFh
.eh_frame:000000000001A1F7                 db 0FFh
.eh_frame:000000000001A1F8                 db 0AAh
.eh_frame:000000000001A1F9                 db    3
.eh_frame:000000000001A1FA                 db    0
.eh_frame:000000000001A1FB                 db    0
.eh_frame:000000000001A1FC                 db    0
.eh_frame:000000000001A1FD                 db  42h ; B
.eh_frame:000000000001A1FE                 db  0Eh
.eh_frame:000000000001A1FF                 db  10h
.eh_frame:000000000001A200                 db  8Fh
.eh_frame:000000000001A201                 db    2
.eh_frame:000000000001A202                 db  42h ; B
.eh_frame:000000000001A203                 db  0Eh
.eh_frame:000000000001A204                 db  18h
.eh_frame:000000000001A205                 db  8Eh
.eh_frame:000000000001A206                 db    3
.eh_frame:000000000001A207                 db  42h ; B
.eh_frame:000000000001A208                 db  0Eh
.eh_frame:000000000001A209                 db  20h
.eh_frame:000000000001A20A                 db  8Dh
.eh_frame:000000000001A20B                 db    4
.eh_frame:000000000001A20C                 db  42h ; B
.eh_frame:000000000001A20D                 db  0Eh
.eh_frame:000000000001A20E                 db  28h ; (
.eh_frame:000000000001A20F                 db  8Ch
.eh_frame:000000000001A210                 db    5
.eh_frame:000000000001A211                 db  41h ; A
.eh_frame:000000000001A212                 db  0Eh
.eh_frame:000000000001A213                 db  30h ; 0
.eh_frame:000000000001A214                 db  86h
.eh_frame:000000000001A215                 db    6
.eh_frame:000000000001A216                 db  41h ; A
.eh_frame:000000000001A217                 db  0Eh
.eh_frame:000000000001A218                 db  38h ; 8
.eh_frame:000000000001A219                 db  83h
.eh_frame:000000000001A21A                 db    7
.eh_frame:000000000001A21B                 db  44h ; D
.eh_frame:000000000001A21C                 db  0Eh
.eh_frame:000000000001A21D                 db  60h ; `
.eh_frame:000000000001A21E                 db    3
.eh_frame:000000000001A21F                 db 0A4h
.eh_frame:000000000001A220                 db    2
.eh_frame:000000000001A221                 db  0Ah
.eh_frame:000000000001A222                 db  0Eh
.eh_frame:000000000001A223                 db  38h ; 8
.eh_frame:000000000001A224                 db  44h ; D
.eh_frame:000000000001A225                 db  0Eh
.eh_frame:000000000001A226                 db  30h ; 0
.eh_frame:000000000001A227                 db  41h ; A
.eh_frame:000000000001A228                 db  0Eh
.eh_frame:000000000001A229                 db  28h ; (
.eh_frame:000000000001A22A                 db  42h ; B
.eh_frame:000000000001A22B                 db  0Eh
.eh_frame:000000000001A22C                 db  20h
.eh_frame:000000000001A22D                 db  42h ; B
.eh_frame:000000000001A22E                 db  0Eh
.eh_frame:000000000001A22F                 db  18h
.eh_frame:000000000001A230                 db  42h ; B
.eh_frame:000000000001A231                 db  0Eh
.eh_frame:000000000001A232                 db  10h
.eh_frame:000000000001A233                 db  42h ; B
.eh_frame:000000000001A234                 db  0Eh
.eh_frame:000000000001A235                 db    8
.eh_frame:000000000001A236                 db  41h ; A
.eh_frame:000000000001A237                 db  0Bh
.eh_frame:000000000001A238                 db  2Ch ; ,
.eh_frame:000000000001A239                 db    0
.eh_frame:000000000001A23A                 db    0
.eh_frame:000000000001A23B                 db    0
.eh_frame:000000000001A23C                 db  9Ch
.eh_frame:000000000001A23D                 db  24h ; $
.eh_frame:000000000001A23E                 db    0
.eh_frame:000000000001A23F                 db    0
.eh_frame:000000000001A240                 db  90h
.eh_frame:000000000001A241                 db  88h
.eh_frame:000000000001A242                 db 0FFh
.eh_frame:000000000001A243                 db 0FFh
.eh_frame:000000000001A244                 db  82h
.eh_frame:000000000001A245                 db    1
.eh_frame:000000000001A246                 db    0
.eh_frame:000000000001A247                 db    0
.eh_frame:000000000001A248                 db    0
.eh_frame:000000000001A249                 db  42h ; B
.eh_frame:000000000001A24A                 db  0Eh
.eh_frame:000000000001A24B                 db  10h
.eh_frame:000000000001A24C                 db  8Ch
.eh_frame:000000000001A24D                 db    2
.eh_frame:000000000001A24E                 db  41h ; A
.eh_frame:000000000001A24F                 db  0Eh
.eh_frame:000000000001A250                 db  18h
.eh_frame:000000000001A251                 db  86h
.eh_frame:000000000001A252                 db    3
.eh_frame:000000000001A253                 db  44h ; D
.eh_frame:000000000001A254                 db  0Eh
.eh_frame:000000000001A255                 db  20h
.eh_frame:000000000001A256                 db  83h
.eh_frame:000000000001A257                 db    4
.eh_frame:000000000001A258                 db    2
.eh_frame:000000000001A259                 db 0C2h
.eh_frame:000000000001A25A                 db  0Ah
.eh_frame:000000000001A25B                 db  0Eh
.eh_frame:000000000001A25C                 db  18h
.eh_frame:000000000001A25D                 db  41h ; A
.eh_frame:000000000001A25E                 db  0Eh
.eh_frame:000000000001A25F                 db  10h
.eh_frame:000000000001A260                 db  42h ; B
.eh_frame:000000000001A261                 db  0Eh
.eh_frame:000000000001A262                 db    8
.eh_frame:000000000001A263                 db  44h ; D
.eh_frame:000000000001A264                 db  0Bh
.eh_frame:000000000001A265                 db    0
.eh_frame:000000000001A266                 db    0
.eh_frame:000000000001A267                 db    0
.eh_frame:000000000001A268                 db  60h ; `
.eh_frame:000000000001A269                 db    0
.eh_frame:000000000001A26A                 db    0
.eh_frame:000000000001A26B                 db    0
.eh_frame:000000000001A26C                 db 0CCh
.eh_frame:000000000001A26D                 db  24h ; $
.eh_frame:000000000001A26E                 db    0
.eh_frame:000000000001A26F                 db    0
.eh_frame:000000000001A270                 db 0F0h
.eh_frame:000000000001A271                 db  89h
.eh_frame:000000000001A272                 db 0FFh
.eh_frame:000000000001A273                 db 0FFh
.eh_frame:000000000001A274                 db  78h ; x
.eh_frame:000000000001A275                 db    7
.eh_frame:000000000001A276                 db    0
.eh_frame:000000000001A277                 db    0
.eh_frame:000000000001A278                 db    0
.eh_frame:000000000001A279                 db  42h ; B
.eh_frame:000000000001A27A                 db  0Eh
.eh_frame:000000000001A27B                 db  10h
.eh_frame:000000000001A27C                 db  8Eh
.eh_frame:000000000001A27D                 db    2
.eh_frame:000000000001A27E                 db  42h ; B
.eh_frame:000000000001A27F                 db  0Eh
.eh_frame:000000000001A280                 db  18h
.eh_frame:000000000001A281                 db  8Dh
.eh_frame:000000000001A282                 db    3
.eh_frame:000000000001A283                 db  42h ; B
.eh_frame:000000000001A284                 db  0Eh
.eh_frame:000000000001A285                 db  20h
.eh_frame:000000000001A286                 db  8Ch
.eh_frame:000000000001A287                 db    4
.eh_frame:000000000001A288                 db  41h ; A
.eh_frame:000000000001A289                 db  0Eh
.eh_frame:000000000001A28A                 db  28h ; (
.eh_frame:000000000001A28B                 db  86h
.eh_frame:000000000001A28C                 db    5
.eh_frame:000000000001A28D                 db  41h ; A
.eh_frame:000000000001A28E                 db  0Eh
.eh_frame:000000000001A28F                 db  30h ; 0
.eh_frame:000000000001A290                 db  83h
.eh_frame:000000000001A291                 db    6
.eh_frame:000000000001A292                 db    3
.eh_frame:000000000001A293                 db  19h
.eh_frame:000000000001A294                 db    1
.eh_frame:000000000001A295                 db  0Ah
.eh_frame:000000000001A296                 db  0Eh
.eh_frame:000000000001A297                 db  28h ; (
.eh_frame:000000000001A298                 db  44h ; D
.eh_frame:000000000001A299                 db  0Eh
.eh_frame:000000000001A29A                 db  20h
.eh_frame:000000000001A29B                 db  42h ; B
.eh_frame:000000000001A29C                 db  0Eh
.eh_frame:000000000001A29D                 db  18h
.eh_frame:000000000001A29E                 db  42h ; B
.eh_frame:000000000001A29F                 db  0Eh
.eh_frame:000000000001A2A0                 db  10h
.eh_frame:000000000001A2A1                 db  42h ; B
.eh_frame:000000000001A2A2                 db  0Eh
.eh_frame:000000000001A2A3                 db    8
.eh_frame:000000000001A2A4                 db  45h ; E
.eh_frame:000000000001A2A5                 db  0Bh
.eh_frame:000000000001A2A6                 db    2
.eh_frame:000000000001A2A7                 db  6Bh ; k
.eh_frame:000000000001A2A8                 db  0Ah
.eh_frame:000000000001A2A9                 db  0Eh
.eh_frame:000000000001A2AA                 db  28h ; (
.eh_frame:000000000001A2AB                 db  44h ; D
.eh_frame:000000000001A2AC                 db  0Eh
.eh_frame:000000000001A2AD                 db  20h
.eh_frame:000000000001A2AE                 db  42h ; B
.eh_frame:000000000001A2AF                 db  0Eh
.eh_frame:000000000001A2B0                 db  18h
.eh_frame:000000000001A2B1                 db  42h ; B
.eh_frame:000000000001A2B2                 db  0Eh
.eh_frame:000000000001A2B3                 db  10h
.eh_frame:000000000001A2B4                 db  42h ; B
.eh_frame:000000000001A2B5                 db  0Eh
.eh_frame:000000000001A2B6                 db    8
.eh_frame:000000000001A2B7                 db  4Bh ; K
.eh_frame:000000000001A2B8                 db  0Bh
.eh_frame:000000000001A2B9                 db    2
.eh_frame:000000000001A2BA                 db 0E2h
.eh_frame:000000000001A2BB                 db  0Ah
.eh_frame:000000000001A2BC                 db  0Eh
.eh_frame:000000000001A2BD                 db  28h ; (
.eh_frame:000000000001A2BE                 db  41h ; A
.eh_frame:000000000001A2BF                 db  0Eh
.eh_frame:000000000001A2C0                 db  20h
.eh_frame:000000000001A2C1                 db  42h ; B
.eh_frame:000000000001A2C2                 db  0Eh
.eh_frame:000000000001A2C3                 db  18h
.eh_frame:000000000001A2C4                 db  42h ; B
.eh_frame:000000000001A2C5                 db  0Eh
.eh_frame:000000000001A2C6                 db  10h
.eh_frame:000000000001A2C7                 db  42h ; B
.eh_frame:000000000001A2C8                 db  0Eh
.eh_frame:000000000001A2C9                 db    8
.eh_frame:000000000001A2CA                 db  47h ; G
.eh_frame:000000000001A2CB                 db  0Bh
.eh_frame:000000000001A2CC                 db  14h
.eh_frame:000000000001A2CD                 db    0
.eh_frame:000000000001A2CE                 db    0
.eh_frame:000000000001A2CF                 db    0
.eh_frame:000000000001A2D0                 db  30h ; 0
.eh_frame:000000000001A2D1                 db  25h ; %
.eh_frame:000000000001A2D2                 db    0
.eh_frame:000000000001A2D3                 db    0
.eh_frame:000000000001A2D4                 db  0Ch
.eh_frame:000000000001A2D5                 db  91h
.eh_frame:000000000001A2D6                 db 0FFh
.eh_frame:000000000001A2D7                 db 0FFh
.eh_frame:000000000001A2D8                 db  29h ; )
.eh_frame:000000000001A2D9                 db    0
.eh_frame:000000000001A2DA                 db    0
.eh_frame:000000000001A2DB                 db    0
.eh_frame:000000000001A2DC                 db    0
.eh_frame:000000000001A2DD                 db  54h ; T
.eh_frame:000000000001A2DE                 db  0Eh
.eh_frame:000000000001A2DF                 db  10h
.eh_frame:000000000001A2E0                 db  54h ; T
.eh_frame:000000000001A2E1                 db  0Eh
.eh_frame:000000000001A2E2                 db    8
.eh_frame:000000000001A2E3                 db    0
.eh_frame:000000000001A2E4                 db  60h ; `
.eh_frame:000000000001A2E5                 db    0
.eh_frame:000000000001A2E6                 db    0
.eh_frame:000000000001A2E7                 db    0
.eh_frame:000000000001A2E8                 db  48h ; H
.eh_frame:000000000001A2E9                 db  25h ; %
.eh_frame:000000000001A2EA                 db    0
.eh_frame:000000000001A2EB                 db    0
.eh_frame:000000000001A2EC                 db  24h ; $
.eh_frame:000000000001A2ED                 db  91h
.eh_frame:000000000001A2EE                 db 0FFh
.eh_frame:000000000001A2EF                 db 0FFh
.eh_frame:000000000001A2F0                 db  4Eh ; N
.eh_frame:000000000001A2F1                 db    1
.eh_frame:000000000001A2F2                 db    0
.eh_frame:000000000001A2F3                 db    0
.eh_frame:000000000001A2F4                 db    0
.eh_frame:000000000001A2F5                 db  42h ; B
.eh_frame:000000000001A2F6                 db  0Eh
.eh_frame:000000000001A2F7                 db  10h
.eh_frame:000000000001A2F8                 db  8Eh
.eh_frame:000000000001A2F9                 db    2
.eh_frame:000000000001A2FA                 db  42h ; B
.eh_frame:000000000001A2FB                 db  0Eh
.eh_frame:000000000001A2FC                 db  18h
.eh_frame:000000000001A2FD                 db  8Dh
.eh_frame:000000000001A2FE                 db    3
.eh_frame:000000000001A2FF                 db  42h ; B
.eh_frame:000000000001A300                 db  0Eh
.eh_frame:000000000001A301                 db  20h
.eh_frame:000000000001A302                 db  8Ch
.eh_frame:000000000001A303                 db    4
.eh_frame:000000000001A304                 db  41h ; A
.eh_frame:000000000001A305                 db  0Eh
.eh_frame:000000000001A306                 db  28h ; (
.eh_frame:000000000001A307                 db  86h
.eh_frame:000000000001A308                 db    5
.eh_frame:000000000001A309                 db  44h ; D
.eh_frame:000000000001A30A                 db  0Eh
.eh_frame:000000000001A30B                 db  30h ; 0
.eh_frame:000000000001A30C                 db  83h
.eh_frame:000000000001A30D                 db    6
.eh_frame:000000000001A30E                 db    2
.eh_frame:000000000001A30F                 db  8Ah
.eh_frame:000000000001A310                 db  0Ah
.eh_frame:000000000001A311                 db  0Eh
.eh_frame:000000000001A312                 db  28h ; (
.eh_frame:000000000001A313                 db  41h ; A
.eh_frame:000000000001A314                 db  0Eh
.eh_frame:000000000001A315                 db  20h
.eh_frame:000000000001A316                 db  42h ; B
.eh_frame:000000000001A317                 db  0Eh
.eh_frame:000000000001A318                 db  18h
.eh_frame:000000000001A319                 db  42h ; B
.eh_frame:000000000001A31A                 db  0Eh
.eh_frame:000000000001A31B                 db  10h
.eh_frame:000000000001A31C                 db  42h ; B
.eh_frame:000000000001A31D                 db  0Eh
.eh_frame:000000000001A31E                 db    8
.eh_frame:000000000001A31F                 db  44h ; D
.eh_frame:000000000001A320                 db  0Bh
.eh_frame:000000000001A321                 db  41h ; A
.eh_frame:000000000001A322                 db  0Ah
.eh_frame:000000000001A323                 db  0Eh
.eh_frame:000000000001A324                 db  28h ; (
.eh_frame:000000000001A325                 db  45h ; E
.eh_frame:000000000001A326                 db  0Eh
.eh_frame:000000000001A327                 db  20h
.eh_frame:000000000001A328                 db  42h ; B
.eh_frame:000000000001A329                 db  0Eh
.eh_frame:000000000001A32A                 db  18h
.eh_frame:000000000001A32B                 db  42h ; B
.eh_frame:000000000001A32C                 db  0Eh
.eh_frame:000000000001A32D                 db  10h
.eh_frame:000000000001A32E                 db  42h ; B
.eh_frame:000000000001A32F                 db  0Eh
.eh_frame:000000000001A330                 db    8
.eh_frame:000000000001A331                 db  44h ; D
.eh_frame:000000000001A332                 db  0Bh
.eh_frame:000000000001A333                 db  41h ; A
.eh_frame:000000000001A334                 db  0Ah
.eh_frame:000000000001A335                 db  0Eh
.eh_frame:000000000001A336                 db  28h ; (
.eh_frame:000000000001A337                 db  43h ; C
.eh_frame:000000000001A338                 db  0Eh
.eh_frame:000000000001A339                 db  20h
.eh_frame:000000000001A33A                 db  42h ; B
.eh_frame:000000000001A33B                 db  0Eh
.eh_frame:000000000001A33C                 db  18h
.eh_frame:000000000001A33D                 db  42h ; B
.eh_frame:000000000001A33E                 db  0Eh
.eh_frame:000000000001A33F                 db  10h
.eh_frame:000000000001A340                 db  42h ; B
.eh_frame:000000000001A341                 db  0Eh
.eh_frame:000000000001A342                 db    8
.eh_frame:000000000001A343                 db  46h ; F
.eh_frame:000000000001A344                 db  0Bh
.eh_frame:000000000001A345                 db    0
.eh_frame:000000000001A346                 db    0
.eh_frame:000000000001A347                 db    0
.eh_frame:000000000001A348                 db  3Ch ; <
.eh_frame:000000000001A349                 db    0
.eh_frame:000000000001A34A                 db    0
.eh_frame:000000000001A34B                 db    0
.eh_frame:000000000001A34C                 db 0ACh
.eh_frame:000000000001A34D                 db  25h ; %
.eh_frame:000000000001A34E                 db    0
.eh_frame:000000000001A34F                 db    0
.eh_frame:000000000001A350                 db  10h
.eh_frame:000000000001A351                 db  92h
.eh_frame:000000000001A352                 db 0FFh
.eh_frame:000000000001A353                 db 0FFh
.eh_frame:000000000001A354                 db  83h
.eh_frame:000000000001A355                 db    0
.eh_frame:000000000001A356                 db    0
.eh_frame:000000000001A357                 db    0
.eh_frame:000000000001A358                 db    0
.eh_frame:000000000001A359                 db  42h ; B
.eh_frame:000000000001A35A                 db  0Eh
.eh_frame:000000000001A35B                 db  10h
.eh_frame:000000000001A35C                 db  8Dh
.eh_frame:000000000001A35D                 db    2
.eh_frame:000000000001A35E                 db  42h ; B
.eh_frame:000000000001A35F                 db  0Eh
.eh_frame:000000000001A360                 db  18h
.eh_frame:000000000001A361                 db  8Ch
.eh_frame:000000000001A362                 db    3
.eh_frame:000000000001A363                 db  44h ; D
.eh_frame:000000000001A364                 db  0Eh
.eh_frame:000000000001A365                 db  20h
.eh_frame:000000000001A366                 db  86h
.eh_frame:000000000001A367                 db    4
.eh_frame:000000000001A368                 db  41h ; A
.eh_frame:000000000001A369                 db  0Eh
.eh_frame:000000000001A36A                 db  28h ; (
.eh_frame:000000000001A36B                 db  83h
.eh_frame:000000000001A36C                 db    5
.eh_frame:000000000001A36D                 db  4Ah ; J
.eh_frame:000000000001A36E                 db  0Eh
.eh_frame:000000000001A36F                 db  40h ; @
.eh_frame:000000000001A370                 db    2
.eh_frame:000000000001A371                 db  64h ; d
.eh_frame:000000000001A372                 db  0Ah
.eh_frame:000000000001A373                 db  0Eh
.eh_frame:000000000001A374                 db  28h ; (
.eh_frame:000000000001A375                 db  41h ; A
.eh_frame:000000000001A376                 db  0Eh
.eh_frame:000000000001A377                 db  20h
.eh_frame:000000000001A378                 db  41h ; A
.eh_frame:000000000001A379                 db  0Eh
.eh_frame:000000000001A37A                 db  18h
.eh_frame:000000000001A37B                 db  42h ; B
.eh_frame:000000000001A37C                 db  0Eh
.eh_frame:000000000001A37D                 db  10h
.eh_frame:000000000001A37E                 db  42h ; B
.eh_frame:000000000001A37F                 db  0Eh
.eh_frame:000000000001A380                 db    8
.eh_frame:000000000001A381                 db  41h ; A
.eh_frame:000000000001A382                 db  0Bh
.eh_frame:000000000001A383                 db    0
.eh_frame:000000000001A384                 db    0
.eh_frame:000000000001A385                 db    0
.eh_frame:000000000001A386                 db    0
.eh_frame:000000000001A387                 db    0
.eh_frame:000000000001A388                 db  14h
.eh_frame:000000000001A389                 db    0
.eh_frame:000000000001A38A                 db    0
.eh_frame:000000000001A38B                 db    0
.eh_frame:000000000001A38C                 db 0ECh
.eh_frame:000000000001A38D                 db  25h ; %
.eh_frame:000000000001A38E                 db    0
.eh_frame:000000000001A38F                 db    0
.eh_frame:000000000001A390                 db  60h ; `
.eh_frame:000000000001A391                 db  92h
.eh_frame:000000000001A392                 db 0FFh
.eh_frame:000000000001A393                 db 0FFh
.eh_frame:000000000001A394                 db    2
.eh_frame:000000000001A395                 db    0
.eh_frame:000000000001A396                 db    0
.eh_frame:000000000001A397                 db    0
.eh_frame:000000000001A398                 db    0
.eh_frame:000000000001A399                 db    0
.eh_frame:000000000001A39A                 db    0
.eh_frame:000000000001A39B                 db    0
.eh_frame:000000000001A39C                 db    0
.eh_frame:000000000001A39D                 db    0
.eh_frame:000000000001A39E                 db    0
.eh_frame:000000000001A39F                 db    0
.eh_frame:000000000001A3A0                 db  14h
.eh_frame:000000000001A3A1                 db    0
.eh_frame:000000000001A3A2                 db    0
.eh_frame:000000000001A3A3                 db    0
.eh_frame:000000000001A3A4                 db    4
.eh_frame:000000000001A3A5                 db  26h ; &
.eh_frame:000000000001A3A6                 db    0
.eh_frame:000000000001A3A7                 db    0
.eh_frame:000000000001A3A8                 db  58h ; X
.eh_frame:000000000001A3A9                 db  92h
.eh_frame:000000000001A3AA                 db 0FFh
.eh_frame:000000000001A3AB                 db 0FFh
.eh_frame:000000000001A3AC                 db    5
.eh_frame:000000000001A3AD                 db    0
.eh_frame:000000000001A3AE                 db    0
.eh_frame:000000000001A3AF                 db    0
.eh_frame:000000000001A3B0                 db    0
.eh_frame:000000000001A3B1                 db    0
.eh_frame:000000000001A3B2                 db    0
.eh_frame:000000000001A3B3                 db    0
.eh_frame:000000000001A3B4                 db    0
.eh_frame:000000000001A3B5                 db    0
.eh_frame:000000000001A3B6                 db    0
.eh_frame:000000000001A3B7                 db    0
.eh_frame:000000000001A3B8                 db  10h
.eh_frame:000000000001A3B9                 db    0
.eh_frame:000000000001A3BA                 db    0
.eh_frame:000000000001A3BB                 db    0
.eh_frame:000000000001A3BC                 db  1Ch
.eh_frame:000000000001A3BD                 db  26h ; &
.eh_frame:000000000001A3BE                 db    0
.eh_frame:000000000001A3BF                 db    0
.eh_frame:000000000001A3C0                 db  50h ; P
.eh_frame:000000000001A3C1                 db  92h
.eh_frame:000000000001A3C2                 db 0FFh
.eh_frame:000000000001A3C3                 db 0FFh
.eh_frame:000000000001A3C4                 db  15h
.eh_frame:000000000001A3C5                 db    0
.eh_frame:000000000001A3C6                 db    0
.eh_frame:000000000001A3C7                 db    0
.eh_frame:000000000001A3C8                 db    0
.eh_frame:000000000001A3C9                 db    0
.eh_frame:000000000001A3CA                 db    0
.eh_frame:000000000001A3CB                 db    0
.eh_frame:000000000001A3CC                 db  18h
.eh_frame:000000000001A3CD                 db    0
.eh_frame:000000000001A3CE                 db    0
.eh_frame:000000000001A3CF                 db    0
.eh_frame:000000000001A3D0                 db  30h ; 0
.eh_frame:000000000001A3D1                 db  26h ; &
.eh_frame:000000000001A3D2                 db    0
.eh_frame:000000000001A3D3                 db    0
.eh_frame:000000000001A3D4                 db  5Ch ; \
.eh_frame:000000000001A3D5                 db  92h
.eh_frame:000000000001A3D6                 db 0FFh
.eh_frame:000000000001A3D7                 db 0FFh
.eh_frame:000000000001A3D8                 db  22h ; "
.eh_frame:000000000001A3D9                 db    0
.eh_frame:000000000001A3DA                 db    0
.eh_frame:000000000001A3DB                 db    0
.eh_frame:000000000001A3DC                 db    0
.eh_frame:000000000001A3DD                 db  44h ; D
.eh_frame:000000000001A3DE                 db  0Eh
.eh_frame:000000000001A3DF                 db  10h
.eh_frame:000000000001A3E0                 db  58h ; X
.eh_frame:000000000001A3E1                 db  0Eh
.eh_frame:000000000001A3E2                 db    8
.eh_frame:000000000001A3E3                 db    0
.eh_frame:000000000001A3E4                 db    0
.eh_frame:000000000001A3E5                 db    0
.eh_frame:000000000001A3E6                 db    0
.eh_frame:000000000001A3E7                 db    0
.eh_frame:000000000001A3E8                 db  10h
.eh_frame:000000000001A3E9                 db    0
.eh_frame:000000000001A3EA                 db    0
.eh_frame:000000000001A3EB                 db    0
.eh_frame:000000000001A3EC                 db  4Ch ; L
.eh_frame:000000000001A3ED                 db  26h ; &
.eh_frame:000000000001A3EE                 db    0
.eh_frame:000000000001A3EF                 db    0
.eh_frame:000000000001A3F0                 db  70h ; p
.eh_frame:000000000001A3F1                 db  92h
.eh_frame:000000000001A3F2                 db 0FFh
.eh_frame:000000000001A3F3                 db 0FFh
.eh_frame:000000000001A3F4                 db  0Ah
.eh_frame:000000000001A3F5                 db    0
.eh_frame:000000000001A3F6                 db    0
.eh_frame:000000000001A3F7                 db    0
.eh_frame:000000000001A3F8                 db    0
.eh_frame:000000000001A3F9                 db    0
.eh_frame:000000000001A3FA                 db    0
.eh_frame:000000000001A3FB                 db    0
.eh_frame:000000000001A3FC                 db  48h ; H
.eh_frame:000000000001A3FD                 db    0
.eh_frame:000000000001A3FE                 db    0
.eh_frame:000000000001A3FF                 db    0
.eh_frame:000000000001A400                 db  60h ; `
.eh_frame:000000000001A401                 db  26h ; &
.eh_frame:000000000001A402                 db    0
.eh_frame:000000000001A403                 db    0
.eh_frame:000000000001A404                 db  6Ch ; l
.eh_frame:000000000001A405                 db  92h
.eh_frame:000000000001A406                 db 0FFh
.eh_frame:000000000001A407                 db 0FFh
.eh_frame:000000000001A408                 db  16h
.eh_frame:000000000001A409                 db    1
.eh_frame:000000000001A40A                 db    0
.eh_frame:000000000001A40B                 db    0
.eh_frame:000000000001A40C                 db    0
.eh_frame:000000000001A40D                 db  42h ; B
.eh_frame:000000000001A40E                 db  0Eh
.eh_frame:000000000001A40F                 db  10h
.eh_frame:000000000001A410                 db  8Fh
.eh_frame:000000000001A411                 db    2
.eh_frame:000000000001A412                 db  42h ; B
.eh_frame:000000000001A413                 db  0Eh
.eh_frame:000000000001A414                 db  18h
.eh_frame:000000000001A415                 db  8Eh
.eh_frame:000000000001A416                 db    3
.eh_frame:000000000001A417                 db  45h ; E
.eh_frame:000000000001A418                 db  0Eh
.eh_frame:000000000001A419                 db  20h
.eh_frame:000000000001A41A                 db  8Dh
.eh_frame:000000000001A41B                 db    4
.eh_frame:000000000001A41C                 db  42h ; B
.eh_frame:000000000001A41D                 db  0Eh
.eh_frame:000000000001A41E                 db  28h ; (
.eh_frame:000000000001A41F                 db  8Ch
.eh_frame:000000000001A420                 db    5
.eh_frame:000000000001A421                 db  44h ; D
.eh_frame:000000000001A422                 db  0Eh
.eh_frame:000000000001A423                 db  30h ; 0
.eh_frame:000000000001A424                 db  86h
.eh_frame:000000000001A425                 db    6
.eh_frame:000000000001A426                 db  41h ; A
.eh_frame:000000000001A427                 db  0Eh
.eh_frame:000000000001A428                 db  38h ; 8
.eh_frame:000000000001A429                 db  83h
.eh_frame:000000000001A42A                 db    7
.eh_frame:000000000001A42B                 db  47h ; G
.eh_frame:000000000001A42C                 db  0Eh
.eh_frame:000000000001A42D                 db  60h ; `
.eh_frame:000000000001A42E                 db    2
.eh_frame:000000000001A42F                 db 0DEh
.eh_frame:000000000001A430                 db  0Ah
.eh_frame:000000000001A431                 db  0Eh
.eh_frame:000000000001A432                 db  38h ; 8
.eh_frame:000000000001A433                 db  41h ; A
.eh_frame:000000000001A434                 db  0Eh
.eh_frame:000000000001A435                 db  30h ; 0
.eh_frame:000000000001A436                 db  41h ; A
.eh_frame:000000000001A437                 db  0Eh
.eh_frame:000000000001A438                 db  28h ; (
.eh_frame:000000000001A439                 db  42h ; B
.eh_frame:000000000001A43A                 db  0Eh
.eh_frame:000000000001A43B                 db  20h
.eh_frame:000000000001A43C                 db  42h ; B
.eh_frame:000000000001A43D                 db  0Eh
.eh_frame:000000000001A43E                 db  18h
.eh_frame:000000000001A43F                 db  42h ; B
.eh_frame:000000000001A440                 db  0Eh
.eh_frame:000000000001A441                 db  10h
.eh_frame:000000000001A442                 db  42h ; B
.eh_frame:000000000001A443                 db  0Eh
.eh_frame:000000000001A444                 db    8
.eh_frame:000000000001A445                 db  41h ; A
.eh_frame:000000000001A446                 db  0Bh
.eh_frame:000000000001A447                 db    0
.eh_frame:000000000001A448                 db  28h ; (
.eh_frame:000000000001A449                 db    0
.eh_frame:000000000001A44A                 db    0
.eh_frame:000000000001A44B                 db    0
.eh_frame:000000000001A44C                 db 0ACh
.eh_frame:000000000001A44D                 db  26h ; &
.eh_frame:000000000001A44E                 db    0
.eh_frame:000000000001A44F                 db    0
.eh_frame:000000000001A450                 db  40h ; @
.eh_frame:000000000001A451                 db  93h
.eh_frame:000000000001A452                 db 0FFh
.eh_frame:000000000001A453                 db 0FFh
.eh_frame:000000000001A454                 db  73h ; s
.eh_frame:000000000001A455                 db    0
.eh_frame:000000000001A456                 db    0
.eh_frame:000000000001A457                 db    0
.eh_frame:000000000001A458                 db    0
.eh_frame:000000000001A459                 db  46h ; F
.eh_frame:000000000001A45A                 db  0Eh
.eh_frame:000000000001A45B                 db  10h
.eh_frame:000000000001A45C                 db  8Ch
.eh_frame:000000000001A45D                 db    2
.eh_frame:000000000001A45E                 db  46h ; F
.eh_frame:000000000001A45F                 db  0Eh
.eh_frame:000000000001A460                 db  18h
.eh_frame:000000000001A461                 db  86h
.eh_frame:000000000001A462                 db    3
.eh_frame:000000000001A463                 db  44h ; D
.eh_frame:000000000001A464                 db  0Eh
.eh_frame:000000000001A465                 db  20h
.eh_frame:000000000001A466                 db  83h
.eh_frame:000000000001A467                 db    4
.eh_frame:000000000001A468                 db  7Fh ; 
.eh_frame:000000000001A469                 db  0Ah
.eh_frame:000000000001A46A                 db  0Eh
.eh_frame:000000000001A46B                 db  18h
.eh_frame:000000000001A46C                 db  41h ; A
.eh_frame:000000000001A46D                 db  0Eh
.eh_frame:000000000001A46E                 db  10h
.eh_frame:000000000001A46F                 db  42h ; B
.eh_frame:000000000001A470                 db  0Eh
.eh_frame:000000000001A471                 db    8
.eh_frame:000000000001A472                 db  4Eh ; N
.eh_frame:000000000001A473                 db  0Bh
.eh_frame:000000000001A474                 db  5Ch ; \
.eh_frame:000000000001A475                 db    0
.eh_frame:000000000001A476                 db    0
.eh_frame:000000000001A477                 db    0
.eh_frame:000000000001A478                 db 0D8h
.eh_frame:000000000001A479                 db  26h ; &
.eh_frame:000000000001A47A                 db    0
.eh_frame:000000000001A47B                 db    0
.eh_frame:000000000001A47C                 db  94h
.eh_frame:000000000001A47D                 db  93h
.eh_frame:000000000001A47E                 db 0FFh
.eh_frame:000000000001A47F                 db 0FFh
.eh_frame:000000000001A480                 db  20h
.eh_frame:000000000001A481                 db    1
.eh_frame:000000000001A482                 db    0
.eh_frame:000000000001A483                 db    0
.eh_frame:000000000001A484                 db    0
.eh_frame:000000000001A485                 db  42h ; B
.eh_frame:000000000001A486                 db  0Eh
.eh_frame:000000000001A487                 db  10h
.eh_frame:000000000001A488                 db  8Fh
.eh_frame:000000000001A489                 db    2
.eh_frame:000000000001A48A                 db  42h ; B
.eh_frame:000000000001A48B                 db  0Eh
.eh_frame:000000000001A48C                 db  18h
.eh_frame:000000000001A48D                 db  8Eh
.eh_frame:000000000001A48E                 db    3
.eh_frame:000000000001A48F                 db  45h ; E
.eh_frame:000000000001A490                 db  0Eh
.eh_frame:000000000001A491                 db  20h
.eh_frame:000000000001A492                 db  8Dh
.eh_frame:000000000001A493                 db    4
.eh_frame:000000000001A494                 db  42h ; B
.eh_frame:000000000001A495                 db  0Eh
.eh_frame:000000000001A496                 db  28h ; (
.eh_frame:000000000001A497                 db  8Ch
.eh_frame:000000000001A498                 db    5
.eh_frame:000000000001A499                 db  43h ; C
.eh_frame:000000000001A49A                 db  0Eh
.eh_frame:000000000001A49B                 db  30h ; 0
.eh_frame:000000000001A49C                 db  86h
.eh_frame:000000000001A49D                 db    6
.eh_frame:000000000001A49E                 db  41h ; A
.eh_frame:000000000001A49F                 db  0Eh
.eh_frame:000000000001A4A0                 db  38h ; 8
.eh_frame:000000000001A4A1                 db  83h
.eh_frame:000000000001A4A2                 db    7
.eh_frame:000000000001A4A3                 db  56h ; V
.eh_frame:000000000001A4A4                 db  0Eh
.eh_frame:000000000001A4A5                 db  40h ; @
.eh_frame:000000000001A4A6                 db    2
.eh_frame:000000000001A4A7                 db 0D3h
.eh_frame:000000000001A4A8                 db  0Ah
.eh_frame:000000000001A4A9                 db  0Eh
.eh_frame:000000000001A4AA                 db  38h ; 8
.eh_frame:000000000001A4AB                 db  41h ; A
.eh_frame:000000000001A4AC                 db  0Eh
.eh_frame:000000000001A4AD                 db  30h ; 0
.eh_frame:000000000001A4AE                 db  41h ; A
.eh_frame:000000000001A4AF                 db  0Eh
.eh_frame:000000000001A4B0                 db  28h ; (
.eh_frame:000000000001A4B1                 db  42h ; B
.eh_frame:000000000001A4B2                 db  0Eh
.eh_frame:000000000001A4B3                 db  20h
.eh_frame:000000000001A4B4                 db  42h ; B
.eh_frame:000000000001A4B5                 db  0Eh
.eh_frame:000000000001A4B6                 db  18h
.eh_frame:000000000001A4B7                 db  42h ; B
.eh_frame:000000000001A4B8                 db  0Eh
.eh_frame:000000000001A4B9                 db  10h
.eh_frame:000000000001A4BA                 db  42h ; B
.eh_frame:000000000001A4BB                 db  0Eh
.eh_frame:000000000001A4BC                 db    8
.eh_frame:000000000001A4BD                 db  46h ; F
.eh_frame:000000000001A4BE                 db  0Bh
.eh_frame:000000000001A4BF                 db  44h ; D
.eh_frame:000000000001A4C0                 db  0Eh
.eh_frame:000000000001A4C1                 db  38h ; 8
.eh_frame:000000000001A4C2                 db  46h ; F
.eh_frame:000000000001A4C3                 db  0Eh
.eh_frame:000000000001A4C4                 db  30h ; 0
.eh_frame:000000000001A4C5                 db  41h ; A
.eh_frame:000000000001A4C6                 db  0Eh
.eh_frame:000000000001A4C7                 db  28h ; (
.eh_frame:000000000001A4C8                 db  42h ; B
.eh_frame:000000000001A4C9                 db  0Eh
.eh_frame:000000000001A4CA                 db  20h
.eh_frame:000000000001A4CB                 db  42h ; B
.eh_frame:000000000001A4CC                 db  0Eh
.eh_frame:000000000001A4CD                 db  18h
.eh_frame:000000000001A4CE                 db  42h ; B
.eh_frame:000000000001A4CF                 db  0Eh
.eh_frame:000000000001A4D0                 db  10h
.eh_frame:000000000001A4D1                 db  42h ; B
.eh_frame:000000000001A4D2                 db  0Eh
.eh_frame:000000000001A4D3                 db    8
.eh_frame:000000000001A4D4                 db  48h ; H
.eh_frame:000000000001A4D5                 db    0
.eh_frame:000000000001A4D6                 db    0
.eh_frame:000000000001A4D7                 db    0
.eh_frame:000000000001A4D8                 db  38h ; 8
.eh_frame:000000000001A4D9                 db  27h ; '
.eh_frame:000000000001A4DA                 db    0
.eh_frame:000000000001A4DB                 db    0
.eh_frame:000000000001A4DC                 db  54h ; T
.eh_frame:000000000001A4DD                 db  94h
.eh_frame:000000000001A4DE                 db 0FFh
.eh_frame:000000000001A4DF                 db 0FFh
.eh_frame:000000000001A4E0                 db  6Dh ; m
.eh_frame:000000000001A4E1                 db    0
.eh_frame:000000000001A4E2                 db    0
.eh_frame:000000000001A4E3                 db    0
.eh_frame:000000000001A4E4                 db    0
.eh_frame:000000000001A4E5                 db  42h ; B
.eh_frame:000000000001A4E6                 db  0Eh
.eh_frame:000000000001A4E7                 db  10h
.eh_frame:000000000001A4E8                 db  8Fh
.eh_frame:000000000001A4E9                 db    2
.eh_frame:000000000001A4EA                 db  42h ; B
.eh_frame:000000000001A4EB                 db  0Eh
.eh_frame:000000000001A4EC                 db  18h
.eh_frame:000000000001A4ED                 db  8Eh
.eh_frame:000000000001A4EE                 db    3
.eh_frame:000000000001A4EF                 db  45h ; E
.eh_frame:000000000001A4F0                 db  0Eh
.eh_frame:000000000001A4F1                 db  20h
.eh_frame:000000000001A4F2                 db  8Dh
.eh_frame:000000000001A4F3                 db    4
.eh_frame:000000000001A4F4                 db  42h ; B
.eh_frame:000000000001A4F5                 db  0Eh
.eh_frame:000000000001A4F6                 db  28h ; (
.eh_frame:000000000001A4F7                 db  8Ch
.eh_frame:000000000001A4F8                 db    5
.eh_frame:000000000001A4F9                 db  44h ; D
.eh_frame:000000000001A4FA                 db  0Eh
.eh_frame:000000000001A4FB                 db  30h ; 0
.eh_frame:000000000001A4FC                 db  86h
.eh_frame:000000000001A4FD                 db    6
.eh_frame:000000000001A4FE                 db  41h ; A
.eh_frame:000000000001A4FF                 db  0Eh
.eh_frame:000000000001A500                 db  38h ; 8
.eh_frame:000000000001A501                 db  83h
.eh_frame:000000000001A502                 db    7
.eh_frame:000000000001A503                 db  50h ; P
.eh_frame:000000000001A504                 db  0Eh
.eh_frame:000000000001A505                 db  40h ; @
.eh_frame:000000000001A506                 db  5Ah ; Z
.eh_frame:000000000001A507                 db  0Ah
.eh_frame:000000000001A508                 db  0Eh
.eh_frame:000000000001A509                 db  38h ; 8
.eh_frame:000000000001A50A                 db  41h ; A
.eh_frame:000000000001A50B                 db  0Eh
.eh_frame:000000000001A50C                 db  30h ; 0
.eh_frame:000000000001A50D                 db  41h ; A
.eh_frame:000000000001A50E                 db  0Eh
.eh_frame:000000000001A50F                 db  28h ; (
.eh_frame:000000000001A510                 db  42h ; B
.eh_frame:000000000001A511                 db  0Eh
.eh_frame:000000000001A512                 db  20h
.eh_frame:000000000001A513                 db  42h ; B
.eh_frame:000000000001A514                 db  0Eh
.eh_frame:000000000001A515                 db  18h
.eh_frame:000000000001A516                 db  42h ; B
.eh_frame:000000000001A517                 db  0Eh
.eh_frame:000000000001A518                 db  10h
.eh_frame:000000000001A519                 db  42h ; B
.eh_frame:000000000001A51A                 db  0Eh
.eh_frame:000000000001A51B                 db    8
.eh_frame:000000000001A51C                 db  41h ; A
.eh_frame:000000000001A51D                 db  0Bh
.eh_frame:000000000001A51E                 db    0
.eh_frame:000000000001A51F                 db    0
.eh_frame:000000000001A520                 db  3Ch ; <
.eh_frame:000000000001A521                 db    0
.eh_frame:000000000001A522                 db    0
.eh_frame:000000000001A523                 db    0
.eh_frame:000000000001A524                 db  84h
.eh_frame:000000000001A525                 db  27h ; '
.eh_frame:000000000001A526                 db    0
.eh_frame:000000000001A527                 db    0
.eh_frame:000000000001A528                 db  78h ; x
.eh_frame:000000000001A529                 db  94h
.eh_frame:000000000001A52A                 db 0FFh
.eh_frame:000000000001A52B                 db 0FFh
.eh_frame:000000000001A52C                 db  4Dh ; M
.eh_frame:000000000001A52D                 db    0
.eh_frame:000000000001A52E                 db    0
.eh_frame:000000000001A52F                 db    0
.eh_frame:000000000001A530                 db    0
.eh_frame:000000000001A531                 db  42h ; B
.eh_frame:000000000001A532                 db  0Eh
.eh_frame:000000000001A533                 db  10h
.eh_frame:000000000001A534                 db  8Eh
.eh_frame:000000000001A535                 db    2
.eh_frame:000000000001A536                 db  42h ; B
.eh_frame:000000000001A537                 db  0Eh
.eh_frame:000000000001A538                 db  18h
.eh_frame:000000000001A539                 db  8Dh
.eh_frame:000000000001A53A                 db    3
.eh_frame:000000000001A53B                 db  42h ; B
.eh_frame:000000000001A53C                 db  0Eh
.eh_frame:000000000001A53D                 db  20h
.eh_frame:000000000001A53E                 db  8Ch
.eh_frame:000000000001A53F                 db    4
.eh_frame:000000000001A540                 db  41h ; A
.eh_frame:000000000001A541                 db  0Eh
.eh_frame:000000000001A542                 db  28h ; (
.eh_frame:000000000001A543                 db  86h
.eh_frame:000000000001A544                 db    5
.eh_frame:000000000001A545                 db  41h ; A
.eh_frame:000000000001A546                 db  0Eh
.eh_frame:000000000001A547                 db  30h ; 0
.eh_frame:000000000001A548                 db  83h
.eh_frame:000000000001A549                 db    6
.eh_frame:000000000001A54A                 db  7Ah ; z
.eh_frame:000000000001A54B                 db  0Eh
.eh_frame:000000000001A54C                 db  28h ; (
.eh_frame:000000000001A54D                 db  44h ; D
.eh_frame:000000000001A54E                 db  0Eh
.eh_frame:000000000001A54F                 db  20h
.eh_frame:000000000001A550                 db  42h ; B
.eh_frame:000000000001A551                 db  0Eh
.eh_frame:000000000001A552                 db  18h
.eh_frame:000000000001A553                 db  42h ; B
.eh_frame:000000000001A554                 db  0Eh
.eh_frame:000000000001A555                 db  10h
.eh_frame:000000000001A556                 db  42h ; B
.eh_frame:000000000001A557                 db  0Eh
.eh_frame:000000000001A558                 db    8
.eh_frame:000000000001A559                 db    0
.eh_frame:000000000001A55A                 db    0
.eh_frame:000000000001A55B                 db    0
.eh_frame:000000000001A55C                 db    0
.eh_frame:000000000001A55D                 db    0
.eh_frame:000000000001A55E                 db    0
.eh_frame:000000000001A55F                 db    0
.eh_frame:000000000001A560                 db  4Ch ; L
.eh_frame:000000000001A561                 db    0
.eh_frame:000000000001A562                 db    0
.eh_frame:000000000001A563                 db    0
.eh_frame:000000000001A564                 db 0C4h
.eh_frame:000000000001A565                 db  27h ; '
.eh_frame:000000000001A566                 db    0
.eh_frame:000000000001A567                 db    0
.eh_frame:000000000001A568                 db  88h
.eh_frame:000000000001A569                 db  94h
.eh_frame:000000000001A56A                 db 0FFh
.eh_frame:000000000001A56B                 db 0FFh
.eh_frame:000000000001A56C                 db  7Dh ; }
.eh_frame:000000000001A56D                 db    0
.eh_frame:000000000001A56E                 db    0
.eh_frame:000000000001A56F                 db    0
.eh_frame:000000000001A570                 db    0
.eh_frame:000000000001A571                 db  42h ; B
.eh_frame:000000000001A572                 db  0Eh
.eh_frame:000000000001A573                 db  10h
.eh_frame:000000000001A574                 db  8Ch
.eh_frame:000000000001A575                 db    2
.eh_frame:000000000001A576                 db  41h ; A
.eh_frame:000000000001A577                 db  0Eh
.eh_frame:000000000001A578                 db  18h
.eh_frame:000000000001A579                 db  86h
.eh_frame:000000000001A57A                 db    3
.eh_frame:000000000001A57B                 db  44h ; D
.eh_frame:000000000001A57C                 db  0Eh
.eh_frame:000000000001A57D                 db  20h
.eh_frame:000000000001A57E                 db  83h
.eh_frame:000000000001A57F                 db    4
.eh_frame:000000000001A580                 db  69h ; i
.eh_frame:000000000001A581                 db  0Ah
.eh_frame:000000000001A582                 db  0Eh
.eh_frame:000000000001A583                 db  18h
.eh_frame:000000000001A584                 db  41h ; A
.eh_frame:000000000001A585                 db  0Eh
.eh_frame:000000000001A586                 db  10h
.eh_frame:000000000001A587                 db  42h ; B
.eh_frame:000000000001A588                 db  0Eh
.eh_frame:000000000001A589                 db    8
.eh_frame:000000000001A58A                 db  45h ; E
.eh_frame:000000000001A58B                 db  0Bh
.eh_frame:000000000001A58C                 db  55h ; U
.eh_frame:000000000001A58D                 db  0Ah
.eh_frame:000000000001A58E                 db  0Eh
.eh_frame:000000000001A58F                 db  18h
.eh_frame:000000000001A590                 db  41h ; A
.eh_frame:000000000001A591                 db  0Eh
.eh_frame:000000000001A592                 db  10h
.eh_frame:000000000001A593                 db  42h ; B
.eh_frame:000000000001A594                 db  0Eh
.eh_frame:000000000001A595                 db    8
.eh_frame:000000000001A596                 db  48h ; H
.eh_frame:000000000001A597                 db  0Bh
.eh_frame:000000000001A598                 db  41h ; A
.eh_frame:000000000001A599                 db  0Ah
.eh_frame:000000000001A59A                 db  0Eh
.eh_frame:000000000001A59B                 db  18h
.eh_frame:000000000001A59C                 db  46h ; F
.eh_frame:000000000001A59D                 db  0Eh
.eh_frame:000000000001A59E                 db  10h
.eh_frame:000000000001A59F                 db  42h ; B
.eh_frame:000000000001A5A0                 db  0Eh
.eh_frame:000000000001A5A1                 db    8
.eh_frame:000000000001A5A2                 db  47h ; G
.eh_frame:000000000001A5A3                 db  0Bh
.eh_frame:000000000001A5A4                 db  49h ; I
.eh_frame:000000000001A5A5                 db  0Eh
.eh_frame:000000000001A5A6                 db  18h
.eh_frame:000000000001A5A7                 db  41h ; A
.eh_frame:000000000001A5A8                 db  0Eh
.eh_frame:000000000001A5A9                 db  10h
.eh_frame:000000000001A5AA                 db  42h ; B
.eh_frame:000000000001A5AB                 db  0Eh
.eh_frame:000000000001A5AC                 db    8
.eh_frame:000000000001A5AD                 db    0
.eh_frame:000000000001A5AE                 db    0
.eh_frame:000000000001A5AF                 db    0
.eh_frame:000000000001A5B0                 db  10h
.eh_frame:000000000001A5B1                 db    0
.eh_frame:000000000001A5B2                 db    0
.eh_frame:000000000001A5B3                 db    0
.eh_frame:000000000001A5B4                 db  14h
.eh_frame:000000000001A5B5                 db  28h ; (
.eh_frame:000000000001A5B6                 db    0
.eh_frame:000000000001A5B7                 db    0
.eh_frame:000000000001A5B8                 db 0B8h
.eh_frame:000000000001A5B9                 db  94h
.eh_frame:000000000001A5BA                 db 0FFh
.eh_frame:000000000001A5BB                 db 0FFh
.eh_frame:000000000001A5BC                 db  10h
.eh_frame:000000000001A5BD                 db    0
.eh_frame:000000000001A5BE                 db    0
.eh_frame:000000000001A5BF                 db    0
.eh_frame:000000000001A5C0                 db    0
.eh_frame:000000000001A5C1                 db    0
.eh_frame:000000000001A5C2                 db    0
.eh_frame:000000000001A5C3                 db    0
.eh_frame:000000000001A5C4                 db  18h
.eh_frame:000000000001A5C5                 db    0
.eh_frame:000000000001A5C6                 db    0
.eh_frame:000000000001A5C7                 db    0
.eh_frame:000000000001A5C8                 db  28h ; (
.eh_frame:000000000001A5C9                 db  28h ; (
.eh_frame:000000000001A5CA                 db    0
.eh_frame:000000000001A5CB                 db    0
.eh_frame:000000000001A5CC                 db 0B4h
.eh_frame:000000000001A5CD                 db  94h
.eh_frame:000000000001A5CE                 db 0FFh
.eh_frame:000000000001A5CF                 db 0FFh
.eh_frame:000000000001A5D0                 db  8Ah
.eh_frame:000000000001A5D1                 db    0
.eh_frame:000000000001A5D2                 db    0
.eh_frame:000000000001A5D3                 db    0
.eh_frame:000000000001A5D4                 db    0
.eh_frame:000000000001A5D5                 db    2
.eh_frame:000000000001A5D6                 db  80h
.eh_frame:000000000001A5D7                 db  0Eh
.eh_frame:000000000001A5D8                 db  10h
.eh_frame:000000000001A5D9                 db    0
.eh_frame:000000000001A5DA                 db    0
.eh_frame:000000000001A5DB                 db    0
.eh_frame:000000000001A5DC                 db    0
.eh_frame:000000000001A5DD                 db    0
.eh_frame:000000000001A5DE                 db    0
.eh_frame:000000000001A5DF                 db    0
.eh_frame:000000000001A5E0                 db  4Ch ; L
.eh_frame:000000000001A5E1                 db    0
.eh_frame:000000000001A5E2                 db    0
.eh_frame:000000000001A5E3                 db    0
.eh_frame:000000000001A5E4                 db  44h ; D
.eh_frame:000000000001A5E5                 db  28h ; (
.eh_frame:000000000001A5E6                 db    0
.eh_frame:000000000001A5E7                 db    0
.eh_frame:000000000001A5E8                 db  28h ; (
.eh_frame:000000000001A5E9                 db  95h
.eh_frame:000000000001A5EA                 db 0FFh
.eh_frame:000000000001A5EB                 db 0FFh
.eh_frame:000000000001A5EC                 db  96h
.eh_frame:000000000001A5ED                 db    0
.eh_frame:000000000001A5EE                 db    0
.eh_frame:000000000001A5EF                 db    0
.eh_frame:000000000001A5F0                 db    0
.eh_frame:000000000001A5F1                 db  42h ; B
.eh_frame:000000000001A5F2                 db  0Eh
.eh_frame:000000000001A5F3                 db  10h
.eh_frame:000000000001A5F4                 db  8Eh
.eh_frame:000000000001A5F5                 db    2
.eh_frame:000000000001A5F6                 db  42h ; B
.eh_frame:000000000001A5F7                 db  0Eh
.eh_frame:000000000001A5F8                 db  18h
.eh_frame:000000000001A5F9                 db  8Dh
.eh_frame:000000000001A5FA                 db    3
.eh_frame:000000000001A5FB                 db  42h ; B
.eh_frame:000000000001A5FC                 db  0Eh
.eh_frame:000000000001A5FD                 db  20h
.eh_frame:000000000001A5FE                 db  8Ch
.eh_frame:000000000001A5FF                 db    4
.eh_frame:000000000001A600                 db  41h ; A
.eh_frame:000000000001A601                 db  0Eh
.eh_frame:000000000001A602                 db  28h ; (
.eh_frame:000000000001A603                 db  86h
.eh_frame:000000000001A604                 db    5
.eh_frame:000000000001A605                 db  41h ; A
.eh_frame:000000000001A606                 db  0Eh
.eh_frame:000000000001A607                 db  30h ; 0
.eh_frame:000000000001A608                 db  83h
.eh_frame:000000000001A609                 db    6
.eh_frame:000000000001A60A                 db  5Eh ; ^
.eh_frame:000000000001A60B                 db  0Ah
.eh_frame:000000000001A60C                 db  0Eh
.eh_frame:000000000001A60D                 db  28h ; (
.eh_frame:000000000001A60E                 db  41h ; A
.eh_frame:000000000001A60F                 db  0Eh
.eh_frame:000000000001A610                 db  20h
.eh_frame:000000000001A611                 db  42h ; B
.eh_frame:000000000001A612                 db  0Eh
.eh_frame:000000000001A613                 db  18h
.eh_frame:000000000001A614                 db  42h ; B
.eh_frame:000000000001A615                 db  0Eh
.eh_frame:000000000001A616                 db  10h
.eh_frame:000000000001A617                 db  42h ; B
.eh_frame:000000000001A618                 db  0Eh
.eh_frame:000000000001A619                 db    8
.eh_frame:000000000001A61A                 db  43h ; C
.eh_frame:000000000001A61B                 db  0Bh
.eh_frame:000000000001A61C                 db  7Ch ; |
.eh_frame:000000000001A61D                 db  0Ah
.eh_frame:000000000001A61E                 db  0Eh
.eh_frame:000000000001A61F                 db  28h ; (
.eh_frame:000000000001A620                 db  41h ; A
.eh_frame:000000000001A621                 db  0Eh
.eh_frame:000000000001A622                 db  20h
.eh_frame:000000000001A623                 db  42h ; B
.eh_frame:000000000001A624                 db  0Eh
.eh_frame:000000000001A625                 db  18h
.eh_frame:000000000001A626                 db  42h ; B
.eh_frame:000000000001A627                 db  0Eh
.eh_frame:000000000001A628                 db  10h
.eh_frame:000000000001A629                 db  42h ; B
.eh_frame:000000000001A62A                 db  0Eh
.eh_frame:000000000001A62B                 db    8
.eh_frame:000000000001A62C                 db  45h ; E
.eh_frame:000000000001A62D                 db  0Bh
.eh_frame:000000000001A62E                 db    0
.eh_frame:000000000001A62F                 db    0
.eh_frame:000000000001A630                 db  10h
.eh_frame:000000000001A631                 db    0
.eh_frame:000000000001A632                 db    0
.eh_frame:000000000001A633                 db    0
.eh_frame:000000000001A634                 db  94h
.eh_frame:000000000001A635                 db  28h ; (
.eh_frame:000000000001A636                 db    0
.eh_frame:000000000001A637                 db    0
.eh_frame:000000000001A638                 db  78h ; x
.eh_frame:000000000001A639                 db  95h
.eh_frame:000000000001A63A                 db 0FFh
.eh_frame:000000000001A63B                 db 0FFh
.eh_frame:000000000001A63C                 db  0Ah
.eh_frame:000000000001A63D                 db    0
.eh_frame:000000000001A63E                 db    0
.eh_frame:000000000001A63F                 db    0
.eh_frame:000000000001A640                 db    0
.eh_frame:000000000001A641                 db    0
.eh_frame:000000000001A642                 db    0
.eh_frame:000000000001A643                 db    0
.eh_frame:000000000001A644                 db  18h
.eh_frame:000000000001A645                 db    0
.eh_frame:000000000001A646                 db    0
.eh_frame:000000000001A647                 db    0
.eh_frame:000000000001A648                 db 0A8h
.eh_frame:000000000001A649                 db  28h ; (
.eh_frame:000000000001A64A                 db    0
.eh_frame:000000000001A64B                 db    0
.eh_frame:000000000001A64C                 db  74h ; t
.eh_frame:000000000001A64D                 db  95h
.eh_frame:000000000001A64E                 db 0FFh
.eh_frame:000000000001A64F                 db 0FFh
.eh_frame:000000000001A650                 db  41h ; A
.eh_frame:000000000001A651                 db    0
.eh_frame:000000000001A652                 db    0
.eh_frame:000000000001A653                 db    0
.eh_frame:000000000001A654                 db    0
.eh_frame:000000000001A655                 db  44h ; D
.eh_frame:000000000001A656                 db  0Eh
.eh_frame:000000000001A657                 db  30h ; 0
.eh_frame:000000000001A658                 db  77h ; w
.eh_frame:000000000001A659                 db  0Ah
.eh_frame:000000000001A65A                 db  0Eh
.eh_frame:000000000001A65B                 db    8
.eh_frame:000000000001A65C                 db  41h ; A
.eh_frame:000000000001A65D                 db  0Bh
.eh_frame:000000000001A65E                 db    0
.eh_frame:000000000001A65F                 db    0
.eh_frame:000000000001A660                 db  1Ch
.eh_frame:000000000001A661                 db    0
.eh_frame:000000000001A662                 db    0
.eh_frame:000000000001A663                 db    0
.eh_frame:000000000001A664                 db 0C4h
.eh_frame:000000000001A665                 db  28h ; (
.eh_frame:000000000001A666                 db    0
.eh_frame:000000000001A667                 db    0
.eh_frame:000000000001A668                 db 0A8h
.eh_frame:000000000001A669                 db  95h
.eh_frame:000000000001A66A                 db 0FFh
.eh_frame:000000000001A66B                 db 0FFh
.eh_frame:000000000001A66C                 db  60h ; `
.eh_frame:000000000001A66D                 db    0
.eh_frame:000000000001A66E                 db    0
.eh_frame:000000000001A66F                 db    0
.eh_frame:000000000001A670                 db    0
.eh_frame:000000000001A671                 db  44h ; D
.eh_frame:000000000001A672                 db  0Eh
.eh_frame:000000000001A673                 db  10h
.eh_frame:000000000001A674                 db  75h ; u
.eh_frame:000000000001A675                 db  0Ah
.eh_frame:000000000001A676                 db  0Eh
.eh_frame:000000000001A677                 db    8
.eh_frame:000000000001A678                 db  47h ; G
.eh_frame:000000000001A679                 db  0Bh
.eh_frame:000000000001A67A                 db  5Fh ; _
.eh_frame:000000000001A67B                 db  0Eh
.eh_frame:000000000001A67C                 db    8
.eh_frame:000000000001A67D                 db    0
.eh_frame:000000000001A67E                 db    0
.eh_frame:000000000001A67F                 db    0
.eh_frame:000000000001A680                 db  14h
.eh_frame:000000000001A681                 db    0
.eh_frame:000000000001A682                 db    0
.eh_frame:000000000001A683                 db    0
.eh_frame:000000000001A684                 db 0E4h
.eh_frame:000000000001A685                 db  28h ; (
.eh_frame:000000000001A686                 db    0
.eh_frame:000000000001A687                 db    0
.eh_frame:000000000001A688                 db 0E8h
.eh_frame:000000000001A689                 db  95h
.eh_frame:000000000001A68A                 db 0FFh
.eh_frame:000000000001A68B                 db 0FFh
.eh_frame:000000000001A68C                 db  36h ; 6
.eh_frame:000000000001A68D                 db    0
.eh_frame:000000000001A68E                 db    0
.eh_frame:000000000001A68F                 db    0
.eh_frame:000000000001A690                 db    0
.eh_frame:000000000001A691                 db    0
.eh_frame:000000000001A692                 db    0
.eh_frame:000000000001A693                 db    0
.eh_frame:000000000001A694                 db    0
.eh_frame:000000000001A695                 db    0
.eh_frame:000000000001A696                 db    0
.eh_frame:000000000001A697                 db    0
.eh_frame:000000000001A698                 db  10h
.eh_frame:000000000001A699                 db    0
.eh_frame:000000000001A69A                 db    0
.eh_frame:000000000001A69B                 db    0
.eh_frame:000000000001A69C                 db 0FCh
.eh_frame:000000000001A69D                 db  28h ; (
.eh_frame:000000000001A69E                 db    0
.eh_frame:000000000001A69F                 db    0
.eh_frame:000000000001A6A0                 db  10h
.eh_frame:000000000001A6A1                 db  96h
.eh_frame:000000000001A6A2                 db 0FFh
.eh_frame:000000000001A6A3                 db 0FFh
.eh_frame:000000000001A6A4                 db  1Bh
.eh_frame:000000000001A6A5                 db    0
.eh_frame:000000000001A6A6                 db    0
.eh_frame:000000000001A6A7                 db    0
.eh_frame:000000000001A6A8                 db    0
.eh_frame:000000000001A6A9                 db    0
.eh_frame:000000000001A6AA                 db    0
.eh_frame:000000000001A6AB                 db    0
.eh_frame:000000000001A6AC                 db  10h
.eh_frame:000000000001A6AD                 db    0
.eh_frame:000000000001A6AE                 db    0
.eh_frame:000000000001A6AF                 db    0
.eh_frame:000000000001A6B0                 db  10h
.eh_frame:000000000001A6B1                 db  29h ; )
.eh_frame:000000000001A6B2                 db    0
.eh_frame:000000000001A6B3                 db    0
.eh_frame:000000000001A6B4                 db  1Ch
.eh_frame:000000000001A6B5                 db  96h
.eh_frame:000000000001A6B6                 db 0FFh
.eh_frame:000000000001A6B7                 db 0FFh
.eh_frame:000000000001A6B8                 db    5
.eh_frame:000000000001A6B9                 db    0
.eh_frame:000000000001A6BA                 db    0
.eh_frame:000000000001A6BB                 db    0
.eh_frame:000000000001A6BC                 db    0
.eh_frame:000000000001A6BD                 db    0
.eh_frame:000000000001A6BE                 db    0
.eh_frame:000000000001A6BF                 db    0
.eh_frame:000000000001A6C0                 db  10h
.eh_frame:000000000001A6C1                 db    0
.eh_frame:000000000001A6C2                 db    0
.eh_frame:000000000001A6C3                 db    0
.eh_frame:000000000001A6C4                 db  24h ; $
.eh_frame:000000000001A6C5                 db  29h ; )
.eh_frame:000000000001A6C6                 db    0
.eh_frame:000000000001A6C7                 db    0
.eh_frame:000000000001A6C8                 db  18h
.eh_frame:000000000001A6C9                 db  96h
.eh_frame:000000000001A6CA                 db 0FFh
.eh_frame:000000000001A6CB                 db 0FFh
.eh_frame:000000000001A6CC                 db  35h ; 5
.eh_frame:000000000001A6CD                 db    0
.eh_frame:000000000001A6CE                 db    0
.eh_frame:000000000001A6CF                 db    0
.eh_frame:000000000001A6D0                 db    0
.eh_frame:000000000001A6D1                 db    0
.eh_frame:000000000001A6D2                 db    0
.eh_frame:000000000001A6D3                 db    0
.eh_frame:000000000001A6D4                 db  10h
.eh_frame:000000000001A6D5                 db    0
.eh_frame:000000000001A6D6                 db    0
.eh_frame:000000000001A6D7                 db    0
.eh_frame:000000000001A6D8                 db  38h ; 8
.eh_frame:000000000001A6D9                 db  29h ; )
.eh_frame:000000000001A6DA                 db    0
.eh_frame:000000000001A6DB                 db    0
.eh_frame:000000000001A6DC                 db  44h ; D
.eh_frame:000000000001A6DD                 db  96h
.eh_frame:000000000001A6DE                 db 0FFh
.eh_frame:000000000001A6DF                 db 0FFh
.eh_frame:000000000001A6E0                 db  3Eh ; >
.eh_frame:000000000001A6E1                 db    0
.eh_frame:000000000001A6E2                 db    0
.eh_frame:000000000001A6E3                 db    0
.eh_frame:000000000001A6E4                 db    0
.eh_frame:000000000001A6E5                 db  79h ; y
.eh_frame:000000000001A6E6                 db  0Eh
.eh_frame:000000000001A6E7                 db  10h
.eh_frame:000000000001A6E8                 db  1Ch
.eh_frame:000000000001A6E9                 db    0
.eh_frame:000000000001A6EA                 db    0
.eh_frame:000000000001A6EB                 db    0
.eh_frame:000000000001A6EC                 db  4Ch ; L
.eh_frame:000000000001A6ED                 db  29h ; )
.eh_frame:000000000001A6EE                 db    0
.eh_frame:000000000001A6EF                 db    0
.eh_frame:000000000001A6F0                 db  70h ; p
.eh_frame:000000000001A6F1                 db  96h
.eh_frame:000000000001A6F2                 db 0FFh
.eh_frame:000000000001A6F3                 db 0FFh
.eh_frame:000000000001A6F4                 db  3Ch ; <
.eh_frame:000000000001A6F5                 db    0
.eh_frame:000000000001A6F6                 db    0
.eh_frame:000000000001A6F7                 db    0
.eh_frame:000000000001A6F8                 db    0
.eh_frame:000000000001A6F9                 db  44h ; D
.eh_frame:000000000001A6FA                 db  0Eh
.eh_frame:000000000001A6FB                 db  10h
.eh_frame:000000000001A6FC                 db  61h ; a
.eh_frame:000000000001A6FD                 db  0Ah
.eh_frame:000000000001A6FE                 db  0Eh
.eh_frame:000000000001A6FF                 db    8
.eh_frame:000000000001A700                 db  4Bh ; K
.eh_frame:000000000001A701                 db  0Bh
.eh_frame:000000000001A702                 db  4Bh ; K
.eh_frame:000000000001A703                 db  0Eh
.eh_frame:000000000001A704                 db    8
.eh_frame:000000000001A705                 db    0
.eh_frame:000000000001A706                 db    0
.eh_frame:000000000001A707                 db    0
.eh_frame:000000000001A708                 db  1Ch
.eh_frame:000000000001A709                 db    0
.eh_frame:000000000001A70A                 db    0
.eh_frame:000000000001A70B                 db    0
.eh_frame:000000000001A70C                 db  6Ch ; l
.eh_frame:000000000001A70D                 db  29h ; )
.eh_frame:000000000001A70E                 db    0
.eh_frame:000000000001A70F                 db    0
.eh_frame:000000000001A710                 db  90h
.eh_frame:000000000001A711                 db  96h
.eh_frame:000000000001A712                 db 0FFh
.eh_frame:000000000001A713                 db 0FFh
.eh_frame:000000000001A714                 db  6Eh ; n
.eh_frame:000000000001A715                 db    0
.eh_frame:000000000001A716                 db    0
.eh_frame:000000000001A717                 db    0
.eh_frame:000000000001A718                 db    0
.eh_frame:000000000001A719                 db  44h ; D
.eh_frame:000000000001A71A                 db  0Eh
.eh_frame:000000000001A71B                 db  60h ; `
.eh_frame:000000000001A71C                 db  7Eh ; ~
.eh_frame:000000000001A71D                 db  0Ah
.eh_frame:000000000001A71E                 db  0Eh
.eh_frame:000000000001A71F                 db    8
.eh_frame:000000000001A720                 db  46h ; F
.eh_frame:000000000001A721                 db  0Bh
.eh_frame:000000000001A722                 db    0
.eh_frame:000000000001A723                 db    0
.eh_frame:000000000001A724                 db    0
.eh_frame:000000000001A725                 db    0
.eh_frame:000000000001A726                 db    0
.eh_frame:000000000001A727                 db    0
.eh_frame:000000000001A728                 db  18h
.eh_frame:000000000001A729                 db    0
.eh_frame:000000000001A72A                 db    0
.eh_frame:000000000001A72B                 db    0
.eh_frame:000000000001A72C                 db  8Ch
.eh_frame:000000000001A72D                 db  29h ; )
.eh_frame:000000000001A72E                 db    0
.eh_frame:000000000001A72F                 db    0
.eh_frame:000000000001A730                 db 0E0h
.eh_frame:000000000001A731                 db  96h
.eh_frame:000000000001A732                 db 0FFh
.eh_frame:000000000001A733                 db 0FFh
.eh_frame:000000000001A734                 db  23h ; #
.eh_frame:000000000001A735                 db    0
.eh_frame:000000000001A736                 db    0
.eh_frame:000000000001A737                 db    0
.eh_frame:000000000001A738                 db    0
.eh_frame:000000000001A739                 db  41h ; A
.eh_frame:000000000001A73A                 db  0Eh
.eh_frame:000000000001A73B                 db  10h
.eh_frame:000000000001A73C                 db  83h
.eh_frame:000000000001A73D                 db    2
.eh_frame:000000000001A73E                 db  61h ; a
.eh_frame:000000000001A73F                 db  0Eh
.eh_frame:000000000001A740                 db    8
.eh_frame:000000000001A741                 db    0
.eh_frame:000000000001A742                 db    0
.eh_frame:000000000001A743                 db    0
.eh_frame:000000000001A744                 db  1Ch
.eh_frame:000000000001A745                 db    0
.eh_frame:000000000001A746                 db    0
.eh_frame:000000000001A747                 db    0
.eh_frame:000000000001A748                 db 0A8h
.eh_frame:000000000001A749                 db  29h ; )
.eh_frame:000000000001A74A                 db    0
.eh_frame:000000000001A74B                 db    0
.eh_frame:000000000001A74C                 db 0F4h
.eh_frame:000000000001A74D                 db  96h
.eh_frame:000000000001A74E                 db 0FFh
.eh_frame:000000000001A74F                 db 0FFh
.eh_frame:000000000001A750                 db  34h ; 4
.eh_frame:000000000001A751                 db    0
.eh_frame:000000000001A752                 db    0
.eh_frame:000000000001A753                 db    0
.eh_frame:000000000001A754                 db    0
.eh_frame:000000000001A755                 db  41h ; A
.eh_frame:000000000001A756                 db  0Eh
.eh_frame:000000000001A757                 db  10h
.eh_frame:000000000001A758                 db  83h
.eh_frame:000000000001A759                 db    2
.eh_frame:000000000001A75A                 db  6Bh ; k
.eh_frame:000000000001A75B                 db  0Ah
.eh_frame:000000000001A75C                 db  0Eh
.eh_frame:000000000001A75D                 db    8
.eh_frame:000000000001A75E                 db  44h ; D
.eh_frame:000000000001A75F                 db  0Bh
.eh_frame:000000000001A760                 db  43h ; C
.eh_frame:000000000001A761                 db  0Eh
.eh_frame:000000000001A762                 db    8
.eh_frame:000000000001A763                 db    0
.eh_frame:000000000001A764                 db  10h
.eh_frame:000000000001A765                 db    0
.eh_frame:000000000001A766                 db    0
.eh_frame:000000000001A767                 db    0
.eh_frame:000000000001A768                 db 0C8h
.eh_frame:000000000001A769                 db  29h ; )
.eh_frame:000000000001A76A                 db    0
.eh_frame:000000000001A76B                 db    0
.eh_frame:000000000001A76C                 db  14h
.eh_frame:000000000001A76D                 db  97h
.eh_frame:000000000001A76E                 db 0FFh
.eh_frame:000000000001A76F                 db 0FFh
.eh_frame:000000000001A770                 db    4
.eh_frame:000000000001A771                 db    0
.eh_frame:000000000001A772                 db    0
.eh_frame:000000000001A773                 db    0
.eh_frame:000000000001A774                 db    0
.eh_frame:000000000001A775                 db    0
.eh_frame:000000000001A776                 db    0
.eh_frame:000000000001A777                 db    0
.eh_frame:000000000001A778                 db  48h ; H
.eh_frame:000000000001A779                 db    0
.eh_frame:000000000001A77A                 db    0
.eh_frame:000000000001A77B                 db    0
.eh_frame:000000000001A77C                 db 0DCh
.eh_frame:000000000001A77D                 db  29h ; )
.eh_frame:000000000001A77E                 db    0
.eh_frame:000000000001A77F                 db    0
.eh_frame:000000000001A780                 db  10h
.eh_frame:000000000001A781                 db  97h
.eh_frame:000000000001A782                 db 0FFh
.eh_frame:000000000001A783                 db 0FFh
.eh_frame:000000000001A784                 db  1Ah
.eh_frame:000000000001A785                 db    1
.eh_frame:000000000001A786                 db    0
.eh_frame:000000000001A787                 db    0
.eh_frame:000000000001A788                 db    0
.eh_frame:000000000001A789                 db  42h ; B
.eh_frame:000000000001A78A                 db  0Eh
.eh_frame:000000000001A78B                 db  10h
.eh_frame:000000000001A78C                 db  8Fh
.eh_frame:000000000001A78D                 db    2
.eh_frame:000000000001A78E                 db  42h ; B
.eh_frame:000000000001A78F                 db  0Eh
.eh_frame:000000000001A790                 db  18h
.eh_frame:000000000001A791                 db  8Eh
.eh_frame:000000000001A792                 db    3
.eh_frame:000000000001A793                 db  46h ; F
.eh_frame:000000000001A794                 db  0Eh
.eh_frame:000000000001A795                 db  20h
.eh_frame:000000000001A796                 db  8Dh
.eh_frame:000000000001A797                 db    4
.eh_frame:000000000001A798                 db  42h ; B
.eh_frame:000000000001A799                 db  0Eh
.eh_frame:000000000001A79A                 db  28h ; (
.eh_frame:000000000001A79B                 db  8Ch
.eh_frame:000000000001A79C                 db    5
.eh_frame:000000000001A79D                 db  44h ; D
.eh_frame:000000000001A79E                 db  0Eh
.eh_frame:000000000001A79F                 db  30h ; 0
.eh_frame:000000000001A7A0                 db  86h
.eh_frame:000000000001A7A1                 db    6
.eh_frame:000000000001A7A2                 db  41h ; A
.eh_frame:000000000001A7A3                 db  0Eh
.eh_frame:000000000001A7A4                 db  38h ; 8
.eh_frame:000000000001A7A5                 db  83h
.eh_frame:000000000001A7A6                 db    7
.eh_frame:000000000001A7A7                 db  47h ; G
.eh_frame:000000000001A7A8                 db  0Eh
.eh_frame:000000000001A7A9                 db  60h ; `
.eh_frame:000000000001A7AA                 db    2
.eh_frame:000000000001A7AB                 db 0DEh
.eh_frame:000000000001A7AC                 db  0Ah
.eh_frame:000000000001A7AD                 db  0Eh
.eh_frame:000000000001A7AE                 db  38h ; 8
.eh_frame:000000000001A7AF                 db  41h ; A
.eh_frame:000000000001A7B0                 db  0Eh
.eh_frame:000000000001A7B1                 db  30h ; 0
.eh_frame:000000000001A7B2                 db  41h ; A
.eh_frame:000000000001A7B3                 db  0Eh
.eh_frame:000000000001A7B4                 db  28h ; (
.eh_frame:000000000001A7B5                 db  42h ; B
.eh_frame:000000000001A7B6                 db  0Eh
.eh_frame:000000000001A7B7                 db  20h
.eh_frame:000000000001A7B8                 db  42h ; B
.eh_frame:000000000001A7B9                 db  0Eh
.eh_frame:000000000001A7BA                 db  18h
.eh_frame:000000000001A7BB                 db  42h ; B
.eh_frame:000000000001A7BC                 db  0Eh
.eh_frame:000000000001A7BD                 db  10h
.eh_frame:000000000001A7BE                 db  42h ; B
.eh_frame:000000000001A7BF                 db  0Eh
.eh_frame:000000000001A7C0                 db    8
.eh_frame:000000000001A7C1                 db  48h ; H
.eh_frame:000000000001A7C2                 db  0Bh
.eh_frame:000000000001A7C3                 db    0
.eh_frame:000000000001A7C4                 db  18h
.eh_frame:000000000001A7C5                 db    0
.eh_frame:000000000001A7C6                 db    0
.eh_frame:000000000001A7C7                 db    0
.eh_frame:000000000001A7C8                 db  28h ; (
.eh_frame:000000000001A7C9                 db  2Ah ; *
.eh_frame:000000000001A7CA                 db    0
.eh_frame:000000000001A7CB                 db    0
.eh_frame:000000000001A7CC                 db 0E4h
.eh_frame:000000000001A7CD                 db  97h
.eh_frame:000000000001A7CE                 db 0FFh
.eh_frame:000000000001A7CF                 db 0FFh
.eh_frame:000000000001A7D0                 db  1Eh
.eh_frame:000000000001A7D1                 db    0
.eh_frame:000000000001A7D2                 db    0
.eh_frame:000000000001A7D3                 db    0
.eh_frame:000000000001A7D4                 db    0
.eh_frame:000000000001A7D5                 db  41h ; A
.eh_frame:000000000001A7D6                 db  0Eh
.eh_frame:000000000001A7D7                 db  10h
.eh_frame:000000000001A7D8                 db  83h
.eh_frame:000000000001A7D9                 db    2
.eh_frame:000000000001A7DA                 db  58h ; X
.eh_frame:000000000001A7DB                 db  0Eh
.eh_frame:000000000001A7DC                 db    8
.eh_frame:000000000001A7DD                 db    0
.eh_frame:000000000001A7DE                 db    0
.eh_frame:000000000001A7DF                 db    0
.eh_frame:000000000001A7E0                 db  34h ; 4
.eh_frame:000000000001A7E1                 db    0
.eh_frame:000000000001A7E2                 db    0
.eh_frame:000000000001A7E3                 db    0
.eh_frame:000000000001A7E4                 db  44h ; D
.eh_frame:000000000001A7E5                 db  2Ah ; *
.eh_frame:000000000001A7E6                 db    0
.eh_frame:000000000001A7E7                 db    0
.eh_frame:000000000001A7E8                 db 0E8h
.eh_frame:000000000001A7E9                 db  97h
.eh_frame:000000000001A7EA                 db 0FFh
.eh_frame:000000000001A7EB                 db 0FFh
.eh_frame:000000000001A7EC                 db  51h ; Q
.eh_frame:000000000001A7ED                 db    0
.eh_frame:000000000001A7EE                 db    0
.eh_frame:000000000001A7EF                 db    0
.eh_frame:000000000001A7F0                 db    0
.eh_frame:000000000001A7F1                 db  42h ; B
.eh_frame:000000000001A7F2                 db  0Eh
.eh_frame:000000000001A7F3                 db  10h
.eh_frame:000000000001A7F4                 db  8Dh
.eh_frame:000000000001A7F5                 db    2
.eh_frame:000000000001A7F6                 db  42h ; B
.eh_frame:000000000001A7F7                 db  0Eh
.eh_frame:000000000001A7F8                 db  18h
.eh_frame:000000000001A7F9                 db  8Ch
.eh_frame:000000000001A7FA                 db    3
.eh_frame:000000000001A7FB                 db  41h ; A
.eh_frame:000000000001A7FC                 db  0Eh
.eh_frame:000000000001A7FD                 db  20h
.eh_frame:000000000001A7FE                 db  86h
.eh_frame:000000000001A7FF                 db    4
.eh_frame:000000000001A800                 db  41h ; A
.eh_frame:000000000001A801                 db  0Eh
.eh_frame:000000000001A802                 db  28h ; (
.eh_frame:000000000001A803                 db  83h
.eh_frame:000000000001A804                 db    5
.eh_frame:000000000001A805                 db  47h ; G
.eh_frame:000000000001A806                 db  0Eh
.eh_frame:000000000001A807                 db  30h ; 0
.eh_frame:000000000001A808                 db  7Ah ; z
.eh_frame:000000000001A809                 db  0Eh
.eh_frame:000000000001A80A                 db  28h ; (
.eh_frame:000000000001A80B                 db  44h ; D
.eh_frame:000000000001A80C                 db  0Eh
.eh_frame:000000000001A80D                 db  20h
.eh_frame:000000000001A80E                 db  41h ; A
.eh_frame:000000000001A80F                 db  0Eh
.eh_frame:000000000001A810                 db  18h
.eh_frame:000000000001A811                 db  42h ; B
.eh_frame:000000000001A812                 db  0Eh
.eh_frame:000000000001A813                 db  10h
.eh_frame:000000000001A814                 db  42h ; B
.eh_frame:000000000001A815                 db  0Eh
.eh_frame:000000000001A816                 db    8
.eh_frame:000000000001A817                 db    0
.eh_frame:000000000001A818                 db  1Ch
.eh_frame:000000000001A819                 db    0
.eh_frame:000000000001A81A                 db    0
.eh_frame:000000000001A81B                 db    0
.eh_frame:000000000001A81C                 db  7Ch ; |
.eh_frame:000000000001A81D                 db  2Ah ; *
.eh_frame:000000000001A81E                 db    0
.eh_frame:000000000001A81F                 db    0
.eh_frame:000000000001A820                 db  10h
.eh_frame:000000000001A821                 db  98h
.eh_frame:000000000001A822                 db 0FFh
.eh_frame:000000000001A823                 db 0FFh
.eh_frame:000000000001A824                 db  5Dh ; ]
.eh_frame:000000000001A825                 db    0
.eh_frame:000000000001A826                 db    0
.eh_frame:000000000001A827                 db    0
.eh_frame:000000000001A828                 db    0
.eh_frame:000000000001A829                 db  41h ; A
.eh_frame:000000000001A82A                 db  0Eh
.eh_frame:000000000001A82B                 db  10h
.eh_frame:000000000001A82C                 db  86h
.eh_frame:000000000001A82D                 db    2
.eh_frame:000000000001A82E                 db  41h ; A
.eh_frame:000000000001A82F                 db  0Eh
.eh_frame:000000000001A830                 db  18h
.eh_frame:000000000001A831                 db  83h
.eh_frame:000000000001A832                 db    3
.eh_frame:000000000001A833                 db  44h ; D
.eh_frame:000000000001A834                 db  0Eh
.eh_frame:000000000001A835                 db  20h
.eh_frame:000000000001A836                 db    0
.eh_frame:000000000001A837                 db    0
.eh_frame:000000000001A838                 db  48h ; H
.eh_frame:000000000001A839                 db    0
.eh_frame:000000000001A83A                 db    0
.eh_frame:000000000001A83B                 db    0
.eh_frame:000000000001A83C                 db  9Ch
.eh_frame:000000000001A83D                 db  2Ah ; *
.eh_frame:000000000001A83E                 db    0
.eh_frame:000000000001A83F                 db    0
.eh_frame:000000000001A840                 db  50h ; P
.eh_frame:000000000001A841                 db  98h
.eh_frame:000000000001A842                 db 0FFh
.eh_frame:000000000001A843                 db 0FFh
.eh_frame:000000000001A844                 db  29h ; )
.eh_frame:000000000001A845                 db    3
.eh_frame:000000000001A846                 db    0
.eh_frame:000000000001A847                 db    0
.eh_frame:000000000001A848                 db    0
.eh_frame:000000000001A849                 db  42h ; B
.eh_frame:000000000001A84A                 db  0Eh
.eh_frame:000000000001A84B                 db  10h
.eh_frame:000000000001A84C                 db  8Fh
.eh_frame:000000000001A84D                 db    2
.eh_frame:000000000001A84E                 db  42h ; B
.eh_frame:000000000001A84F                 db  0Eh
.eh_frame:000000000001A850                 db  18h
.eh_frame:000000000001A851                 db  8Eh
.eh_frame:000000000001A852                 db    3
.eh_frame:000000000001A853                 db  42h ; B
.eh_frame:000000000001A854                 db  0Eh
.eh_frame:000000000001A855                 db  20h
.eh_frame:000000000001A856                 db  8Dh
.eh_frame:000000000001A857                 db    4
.eh_frame:000000000001A858                 db  42h ; B
.eh_frame:000000000001A859                 db  0Eh
.eh_frame:000000000001A85A                 db  28h ; (
.eh_frame:000000000001A85B                 db  8Ch
.eh_frame:000000000001A85C                 db    5
.eh_frame:000000000001A85D                 db  41h ; A
.eh_frame:000000000001A85E                 db  0Eh
.eh_frame:000000000001A85F                 db  30h ; 0
.eh_frame:000000000001A860                 db  86h
.eh_frame:000000000001A861                 db    6
.eh_frame:000000000001A862                 db  41h ; A
.eh_frame:000000000001A863                 db  0Eh
.eh_frame:000000000001A864                 db  38h ; 8
.eh_frame:000000000001A865                 db  83h
.eh_frame:000000000001A866                 db    7
.eh_frame:000000000001A867                 db  44h ; D
.eh_frame:000000000001A868                 db  0Eh
.eh_frame:000000000001A869                 db  70h ; p
.eh_frame:000000000001A86A                 db    2
.eh_frame:000000000001A86B                 db  94h
.eh_frame:000000000001A86C                 db  0Ah
.eh_frame:000000000001A86D                 db  0Eh
.eh_frame:000000000001A86E                 db  38h ; 8
.eh_frame:000000000001A86F                 db  41h ; A
.eh_frame:000000000001A870                 db  0Eh
.eh_frame:000000000001A871                 db  30h ; 0
.eh_frame:000000000001A872                 db  41h ; A
.eh_frame:000000000001A873                 db  0Eh
.eh_frame:000000000001A874                 db  28h ; (
.eh_frame:000000000001A875                 db  42h ; B
.eh_frame:000000000001A876                 db  0Eh
.eh_frame:000000000001A877                 db  20h
.eh_frame:000000000001A878                 db  42h ; B
.eh_frame:000000000001A879                 db  0Eh
.eh_frame:000000000001A87A                 db  18h
.eh_frame:000000000001A87B                 db  42h ; B
.eh_frame:000000000001A87C                 db  0Eh
.eh_frame:000000000001A87D                 db  10h
.eh_frame:000000000001A87E                 db  42h ; B
.eh_frame:000000000001A87F                 db  0Eh
.eh_frame:000000000001A880                 db    8
.eh_frame:000000000001A881                 db  44h ; D
.eh_frame:000000000001A882                 db  0Bh
.eh_frame:000000000001A883                 db    0
.eh_frame:000000000001A884                 db  10h
.eh_frame:000000000001A885                 db    0
.eh_frame:000000000001A886                 db    0
.eh_frame:000000000001A887                 db    0
.eh_frame:000000000001A888                 db 0E8h
.eh_frame:000000000001A889                 db  2Ah ; *
.eh_frame:000000000001A88A                 db    0
.eh_frame:000000000001A88B                 db    0
.eh_frame:000000000001A88C                 db  34h ; 4
.eh_frame:000000000001A88D                 db  9Bh
.eh_frame:000000000001A88E                 db 0FFh
.eh_frame:000000000001A88F                 db 0FFh
.eh_frame:000000000001A890                 db    5
.eh_frame:000000000001A891                 db    0
.eh_frame:000000000001A892                 db    0
.eh_frame:000000000001A893                 db    0
.eh_frame:000000000001A894                 db    0
.eh_frame:000000000001A895                 db    0
.eh_frame:000000000001A896                 db    0
.eh_frame:000000000001A897                 db    0
.eh_frame:000000000001A898                 db  10h
.eh_frame:000000000001A899                 db    0
.eh_frame:000000000001A89A                 db    0
.eh_frame:000000000001A89B                 db    0
.eh_frame:000000000001A89C                 db 0FCh
.eh_frame:000000000001A89D                 db  2Ah ; *
.eh_frame:000000000001A89E                 db    0
.eh_frame:000000000001A89F                 db    0
.eh_frame:000000000001A8A0                 db  30h ; 0
.eh_frame:000000000001A8A1                 db  9Bh
.eh_frame:000000000001A8A2                 db 0FFh
.eh_frame:000000000001A8A3                 db 0FFh
.eh_frame:000000000001A8A4                 db    5
.eh_frame:000000000001A8A5                 db    0
.eh_frame:000000000001A8A6                 db    0
.eh_frame:000000000001A8A7                 db    0
.eh_frame:000000000001A8A8                 db    0
.eh_frame:000000000001A8A9                 db    0
.eh_frame:000000000001A8AA                 db    0
.eh_frame:000000000001A8AB                 db    0
.eh_frame:000000000001A8AC                 db  60h ; `
.eh_frame:000000000001A8AD                 db    0
.eh_frame:000000000001A8AE                 db    0
.eh_frame:000000000001A8AF                 db    0
.eh_frame:000000000001A8B0                 db  10h
.eh_frame:000000000001A8B1                 db  2Bh ; +
.eh_frame:000000000001A8B2                 db    0
.eh_frame:000000000001A8B3                 db    0
.eh_frame:000000000001A8B4                 db  2Ch ; ,
.eh_frame:000000000001A8B5                 db  9Bh
.eh_frame:000000000001A8B6                 db 0FFh
.eh_frame:000000000001A8B7                 db 0FFh
.eh_frame:000000000001A8B8                 db  96h
.eh_frame:000000000001A8B9                 db    1
.eh_frame:000000000001A8BA                 db    0
.eh_frame:000000000001A8BB                 db    0
.eh_frame:000000000001A8BC                 db    0
.eh_frame:000000000001A8BD                 db  42h ; B
.eh_frame:000000000001A8BE                 db  0Eh
.eh_frame:000000000001A8BF                 db  10h
.eh_frame:000000000001A8C0                 db  8Fh
.eh_frame:000000000001A8C1                 db    2
.eh_frame:000000000001A8C2                 db  42h ; B
.eh_frame:000000000001A8C3                 db  0Eh
.eh_frame:000000000001A8C4                 db  18h
.eh_frame:000000000001A8C5                 db  8Eh
.eh_frame:000000000001A8C6                 db    3
.eh_frame:000000000001A8C7                 db  42h ; B
.eh_frame:000000000001A8C8                 db  0Eh
.eh_frame:000000000001A8C9                 db  20h
.eh_frame:000000000001A8CA                 db  8Dh
.eh_frame:000000000001A8CB                 db    4
.eh_frame:000000000001A8CC                 db  42h ; B
.eh_frame:000000000001A8CD                 db  0Eh
.eh_frame:000000000001A8CE                 db  28h ; (
.eh_frame:000000000001A8CF                 db  8Ch
.eh_frame:000000000001A8D0                 db    5
.eh_frame:000000000001A8D1                 db  44h ; D
.eh_frame:000000000001A8D2                 db  0Eh
.eh_frame:000000000001A8D3                 db  30h ; 0
.eh_frame:000000000001A8D4                 db  86h
.eh_frame:000000000001A8D5                 db    6
.eh_frame:000000000001A8D6                 db  41h ; A
.eh_frame:000000000001A8D7                 db  0Eh
.eh_frame:000000000001A8D8                 db  38h ; 8
.eh_frame:000000000001A8D9                 db  83h
.eh_frame:000000000001A8DA                 db    7
.eh_frame:000000000001A8DB                 db  4Ah ; J
.eh_frame:000000000001A8DC                 db  0Eh
.eh_frame:000000000001A8DD                 db  50h ; P
.eh_frame:000000000001A8DE                 db    2
.eh_frame:000000000001A8DF                 db  5Fh ; _
.eh_frame:000000000001A8E0                 db  0Ah
.eh_frame:000000000001A8E1                 db  0Eh
.eh_frame:000000000001A8E2                 db  38h ; 8
.eh_frame:000000000001A8E3                 db  41h ; A
.eh_frame:000000000001A8E4                 db  0Eh
.eh_frame:000000000001A8E5                 db  30h ; 0
.eh_frame:000000000001A8E6                 db  41h ; A
.eh_frame:000000000001A8E7                 db  0Eh
.eh_frame:000000000001A8E8                 db  28h ; (
.eh_frame:000000000001A8E9                 db  42h ; B
.eh_frame:000000000001A8EA                 db  0Eh
.eh_frame:000000000001A8EB                 db  20h
.eh_frame:000000000001A8EC                 db  42h ; B
.eh_frame:000000000001A8ED                 db  0Eh
.eh_frame:000000000001A8EE                 db  18h
.eh_frame:000000000001A8EF                 db  42h ; B
.eh_frame:000000000001A8F0                 db  0Eh
.eh_frame:000000000001A8F1                 db  10h
.eh_frame:000000000001A8F2                 db  42h ; B
.eh_frame:000000000001A8F3                 db  0Eh
.eh_frame:000000000001A8F4                 db    8
.eh_frame:000000000001A8F5                 db  48h ; H
.eh_frame:000000000001A8F6                 db  0Bh
.eh_frame:000000000001A8F7                 db    2
.eh_frame:000000000001A8F8                 db  9Bh
.eh_frame:000000000001A8F9                 db  0Ah
.eh_frame:000000000001A8FA                 db  0Eh
.eh_frame:000000000001A8FB                 db  38h ; 8
.eh_frame:000000000001A8FC                 db  41h ; A
.eh_frame:000000000001A8FD                 db  0Eh
.eh_frame:000000000001A8FE                 db  30h ; 0
.eh_frame:000000000001A8FF                 db  41h ; A
.eh_frame:000000000001A900                 db  0Eh
.eh_frame:000000000001A901                 db  28h ; (
.eh_frame:000000000001A902                 db  42h ; B
.eh_frame:000000000001A903                 db  0Eh
.eh_frame:000000000001A904                 db  20h
.eh_frame:000000000001A905                 db  42h ; B
.eh_frame:000000000001A906                 db  0Eh
.eh_frame:000000000001A907                 db  18h
.eh_frame:000000000001A908                 db  42h ; B
.eh_frame:000000000001A909                 db  0Eh
.eh_frame:000000000001A90A                 db  10h
.eh_frame:000000000001A90B                 db  42h ; B
.eh_frame:000000000001A90C                 db  0Eh
.eh_frame:000000000001A90D                 db    8
.eh_frame:000000000001A90E                 db  43h ; C
.eh_frame:000000000001A90F                 db  0Bh
.eh_frame:000000000001A910                 db  34h ; 4
.eh_frame:000000000001A911                 db    0
.eh_frame:000000000001A912                 db    0
.eh_frame:000000000001A913                 db    0
.eh_frame:000000000001A914                 db  74h ; t
.eh_frame:000000000001A915                 db  2Bh ; +
.eh_frame:000000000001A916                 db    0
.eh_frame:000000000001A917                 db    0
.eh_frame:000000000001A918                 db  68h ; h
.eh_frame:000000000001A919                 db  9Ch
.eh_frame:000000000001A91A                 db 0FFh
.eh_frame:000000000001A91B                 db 0FFh
.eh_frame:000000000001A91C                 db  49h ; I
.eh_frame:000000000001A91D                 db    0
.eh_frame:000000000001A91E                 db    0
.eh_frame:000000000001A91F                 db    0
.eh_frame:000000000001A920                 db    0
.eh_frame:000000000001A921                 db  41h ; A
.eh_frame:000000000001A922                 db  0Eh
.eh_frame:000000000001A923                 db  10h
.eh_frame:000000000001A924                 db  86h
.eh_frame:000000000001A925                 db    2
.eh_frame:000000000001A926                 db  41h ; A
.eh_frame:000000000001A927                 db  0Eh
.eh_frame:000000000001A928                 db  18h
.eh_frame:000000000001A929                 db  83h
.eh_frame:000000000001A92A                 db    3
.eh_frame:000000000001A92B                 db  53h ; S
.eh_frame:000000000001A92C                 db  0Eh
.eh_frame:000000000001A92D                 db  20h
.eh_frame:000000000001A92E                 db  59h ; Y
.eh_frame:000000000001A92F                 db  0Ah
.eh_frame:000000000001A930                 db  0Eh
.eh_frame:000000000001A931                 db  18h
.eh_frame:000000000001A932                 db  44h ; D
.eh_frame:000000000001A933                 db  0Eh
.eh_frame:000000000001A934                 db  10h
.eh_frame:000000000001A935                 db  41h ; A
.eh_frame:000000000001A936                 db  0Eh
.eh_frame:000000000001A937                 db    8
.eh_frame:000000000001A938                 db  4Dh ; M
.eh_frame:000000000001A939                 db  0Bh
.eh_frame:000000000001A93A                 db  44h ; D
.eh_frame:000000000001A93B                 db  0Eh
.eh_frame:000000000001A93C                 db  18h
.eh_frame:000000000001A93D                 db  43h ; C
.eh_frame:000000000001A93E                 db  0Eh
.eh_frame:000000000001A93F                 db  10h
.eh_frame:000000000001A940                 db  41h ; A
.eh_frame:000000000001A941                 db  0Eh
.eh_frame:000000000001A942                 db    8
.eh_frame:000000000001A943                 db    0
.eh_frame:000000000001A944                 db    0
.eh_frame:000000000001A945                 db    0
.eh_frame:000000000001A946                 db    0
.eh_frame:000000000001A947                 db    0
.eh_frame:000000000001A948                 db  10h
.eh_frame:000000000001A949                 db    0
.eh_frame:000000000001A94A                 db    0
.eh_frame:000000000001A94B                 db    0
.eh_frame:000000000001A94C                 db 0ACh
.eh_frame:000000000001A94D                 db  2Bh ; +
.eh_frame:000000000001A94E                 db    0
.eh_frame:000000000001A94F                 db    0
.eh_frame:000000000001A950                 db  80h
.eh_frame:000000000001A951                 db  9Ch
.eh_frame:000000000001A952                 db 0FFh
.eh_frame:000000000001A953                 db 0FFh
.eh_frame:000000000001A954                 db  8Eh
.eh_frame:000000000001A955                 db    2
.eh_frame:000000000001A956                 db    0
.eh_frame:000000000001A957                 db    0
.eh_frame:000000000001A958                 db    0
.eh_frame:000000000001A959                 db    0
.eh_frame:000000000001A95A                 db    0
.eh_frame:000000000001A95B                 db    0
.eh_frame:000000000001A95C                 db  30h ; 0
.eh_frame:000000000001A95D                 db    0
.eh_frame:000000000001A95E                 db    0
.eh_frame:000000000001A95F                 db    0
.eh_frame:000000000001A960                 db 0C0h
.eh_frame:000000000001A961                 db  2Bh ; +
.eh_frame:000000000001A962                 db    0
.eh_frame:000000000001A963                 db    0
.eh_frame:000000000001A964                 db 0FCh
.eh_frame:000000000001A965                 db  9Eh
.eh_frame:000000000001A966                 db 0FFh
.eh_frame:000000000001A967                 db 0FFh
.eh_frame:000000000001A968                 db  40h ; @
.eh_frame:000000000001A969                 db    2
.eh_frame:000000000001A96A                 db    0
.eh_frame:000000000001A96B                 db    0
.eh_frame:000000000001A96C                 db    0
.eh_frame:000000000001A96D                 db  42h ; B
.eh_frame:000000000001A96E                 db  0Eh
.eh_frame:000000000001A96F                 db  10h
.eh_frame:000000000001A970                 db  8Dh
.eh_frame:000000000001A971                 db    2
.eh_frame:000000000001A972                 db  42h ; B
.eh_frame:000000000001A973                 db  0Eh
.eh_frame:000000000001A974                 db  18h
.eh_frame:000000000001A975                 db  8Ch
.eh_frame:000000000001A976                 db    3
.eh_frame:000000000001A977                 db  48h ; H
.eh_frame:000000000001A978                 db  0Eh
.eh_frame:000000000001A979                 db  20h
.eh_frame:000000000001A97A                 db  86h
.eh_frame:000000000001A97B                 db    4
.eh_frame:000000000001A97C                 db  44h ; D
.eh_frame:000000000001A97D                 db  0Eh
.eh_frame:000000000001A97E                 db  28h ; (
.eh_frame:000000000001A97F                 db  83h
.eh_frame:000000000001A980                 db    5
.eh_frame:000000000001A981                 db    3
.eh_frame:000000000001A982                 db    9
.eh_frame:000000000001A983                 db    2
.eh_frame:000000000001A984                 db  0Eh
.eh_frame:000000000001A985                 db  20h
.eh_frame:000000000001A986                 db  57h ; W
.eh_frame:000000000001A987                 db  0Eh
.eh_frame:000000000001A988                 db  18h
.eh_frame:000000000001A989                 db  4Dh ; M
.eh_frame:000000000001A98A                 db  0Eh
.eh_frame:000000000001A98B                 db  10h
.eh_frame:000000000001A98C                 db  42h ; B
.eh_frame:000000000001A98D                 db  0Eh
.eh_frame:000000000001A98E                 db    8
.eh_frame:000000000001A98F                 db    0
.eh_frame:000000000001A990                 db  14h
.eh_frame:000000000001A991                 db    0
.eh_frame:000000000001A992                 db    0
.eh_frame:000000000001A993                 db    0
.eh_frame:000000000001A994                 db 0F4h
.eh_frame:000000000001A995                 db  2Bh ; +
.eh_frame:000000000001A996                 db    0
.eh_frame:000000000001A997                 db    0
.eh_frame:000000000001A998                 db    8
.eh_frame:000000000001A999                 db 0A1h
.eh_frame:000000000001A99A                 db 0FFh
.eh_frame:000000000001A99B                 db 0FFh
.eh_frame:000000000001A99C                 db  0Eh
.eh_frame:000000000001A99D                 db    0
.eh_frame:000000000001A99E                 db    0
.eh_frame:000000000001A99F                 db    0
.eh_frame:000000000001A9A0                 db    0
.eh_frame:000000000001A9A1                 db    0
.eh_frame:000000000001A9A2                 db    0
.eh_frame:000000000001A9A3                 db    0
.eh_frame:000000000001A9A4                 db    0
.eh_frame:000000000001A9A5                 db    0
.eh_frame:000000000001A9A6                 db    0
.eh_frame:000000000001A9A7                 db    0
.eh_frame:000000000001A9A8                 db  34h ; 4
.eh_frame:000000000001A9A9                 db    0
.eh_frame:000000000001A9AA                 db    0
.eh_frame:000000000001A9AB                 db    0
.eh_frame:000000000001A9AC                 db  0Ch
.eh_frame:000000000001A9AD                 db  2Ch ; ,
.eh_frame:000000000001A9AE                 db    0
.eh_frame:000000000001A9AF                 db    0
.eh_frame:000000000001A9B0                 db    0
.eh_frame:000000000001A9B1                 db 0A1h
.eh_frame:000000000001A9B2                 db 0FFh
.eh_frame:000000000001A9B3                 db 0FFh
.eh_frame:000000000001A9B4                 db  7Bh ; {
.eh_frame:000000000001A9B5                 db    0
.eh_frame:000000000001A9B6                 db    0
.eh_frame:000000000001A9B7                 db    0
.eh_frame:000000000001A9B8                 db    0
.eh_frame:000000000001A9B9                 db  42h ; B
.eh_frame:000000000001A9BA                 db  0Eh
.eh_frame:000000000001A9BB                 db  10h
.eh_frame:000000000001A9BC                 db  8Ch
.eh_frame:000000000001A9BD                 db    2
.eh_frame:000000000001A9BE                 db  41h ; A
.eh_frame:000000000001A9BF                 db  0Eh
.eh_frame:000000000001A9C0                 db  18h
.eh_frame:000000000001A9C1                 db  86h
.eh_frame:000000000001A9C2                 db    3
.eh_frame:000000000001A9C3                 db  41h ; A
.eh_frame:000000000001A9C4                 db  0Eh
.eh_frame:000000000001A9C5                 db  20h
.eh_frame:000000000001A9C6                 db  83h
.eh_frame:000000000001A9C7                 db    4
.eh_frame:000000000001A9C8                 db  7Dh ; }
.eh_frame:000000000001A9C9                 db  0Ah
.eh_frame:000000000001A9CA                 db  0Eh
.eh_frame:000000000001A9CB                 db  18h
.eh_frame:000000000001A9CC                 db  41h ; A
.eh_frame:000000000001A9CD                 db  0Eh
.eh_frame:000000000001A9CE                 db  10h
.eh_frame:000000000001A9CF                 db  42h ; B
.eh_frame:000000000001A9D0                 db  0Eh
.eh_frame:000000000001A9D1                 db    8
.eh_frame:000000000001A9D2                 db  44h ; D
.eh_frame:000000000001A9D3                 db  0Bh
.eh_frame:000000000001A9D4                 db  60h ; `
.eh_frame:000000000001A9D5                 db  0Ah
.eh_frame:000000000001A9D6                 db  0Eh
.eh_frame:000000000001A9D7                 db  18h
.eh_frame:000000000001A9D8                 db  41h ; A
.eh_frame:000000000001A9D9                 db  0Eh
.eh_frame:000000000001A9DA                 db  10h
.eh_frame:000000000001A9DB                 db  42h ; B
.eh_frame:000000000001A9DC                 db  0Eh
.eh_frame:000000000001A9DD                 db    8
.eh_frame:000000000001A9DE                 db  45h ; E
.eh_frame:000000000001A9DF                 db  0Bh
.eh_frame:000000000001A9E0                 db  34h ; 4
.eh_frame:000000000001A9E1                 db    0
.eh_frame:000000000001A9E2                 db    0
.eh_frame:000000000001A9E3                 db    0
.eh_frame:000000000001A9E4                 db  44h ; D
.eh_frame:000000000001A9E5                 db  2Ch ; ,
.eh_frame:000000000001A9E6                 db    0
.eh_frame:000000000001A9E7                 db    0
.eh_frame:000000000001A9E8                 db  48h ; H
.eh_frame:000000000001A9E9                 db 0A1h
.eh_frame:000000000001A9EA                 db 0FFh
.eh_frame:000000000001A9EB                 db 0FFh
.eh_frame:000000000001A9EC                 db  7Eh ; ~
.eh_frame:000000000001A9ED                 db    2
.eh_frame:000000000001A9EE                 db    0
.eh_frame:000000000001A9EF                 db    0
.eh_frame:000000000001A9F0                 db    0
.eh_frame:000000000001A9F1                 db  42h ; B
.eh_frame:000000000001A9F2                 db  0Eh
.eh_frame:000000000001A9F3                 db  10h
.eh_frame:000000000001A9F4                 db  8Ch
.eh_frame:000000000001A9F5                 db    2
.eh_frame:000000000001A9F6                 db  41h ; A
.eh_frame:000000000001A9F7                 db  0Eh
.eh_frame:000000000001A9F8                 db  18h
.eh_frame:000000000001A9F9                 db  86h
.eh_frame:000000000001A9FA                 db    3
.eh_frame:000000000001A9FB                 db  43h ; C
.eh_frame:000000000001A9FC                 db  0Eh
.eh_frame:000000000001A9FD                 db  20h
.eh_frame:000000000001A9FE                 db  83h
.eh_frame:000000000001A9FF                 db    4
.eh_frame:000000000001AA00                 db  44h ; D
.eh_frame:000000000001AA01                 db  0Eh
.eh_frame:000000000001AA02                 db  70h ; p
.eh_frame:000000000001AA03                 db    2
.eh_frame:000000000001AA04                 db 0F0h
.eh_frame:000000000001AA05                 db  0Ah
.eh_frame:000000000001AA06                 db  0Eh
.eh_frame:000000000001AA07                 db  20h
.eh_frame:000000000001AA08                 db  41h ; A
.eh_frame:000000000001AA09                 db  0Eh
.eh_frame:000000000001AA0A                 db  18h
.eh_frame:000000000001AA0B                 db  41h ; A
.eh_frame:000000000001AA0C                 db  0Eh
.eh_frame:000000000001AA0D                 db  10h
.eh_frame:000000000001AA0E                 db  42h ; B
.eh_frame:000000000001AA0F                 db  0Eh
.eh_frame:000000000001AA10                 db    8
.eh_frame:000000000001AA11                 db  42h ; B
.eh_frame:000000000001AA12                 db  0Bh
.eh_frame:000000000001AA13                 db    0
.eh_frame:000000000001AA14                 db    0
.eh_frame:000000000001AA15                 db    0
.eh_frame:000000000001AA16                 db    0
.eh_frame:000000000001AA17                 db    0
.eh_frame:000000000001AA18                 db  2Ch ; ,
.eh_frame:000000000001AA19                 db    0
.eh_frame:000000000001AA1A                 db    0
.eh_frame:000000000001AA1B                 db    0
.eh_frame:000000000001AA1C                 db  7Ch ; |
.eh_frame:000000000001AA1D                 db  2Ch ; ,
.eh_frame:000000000001AA1E                 db    0
.eh_frame:000000000001AA1F                 db    0
.eh_frame:000000000001AA20                 db  90h
.eh_frame:000000000001AA21                 db 0A3h
.eh_frame:000000000001AA22                 db 0FFh
.eh_frame:000000000001AA23                 db 0FFh
.eh_frame:000000000001AA24                 db  93h
.eh_frame:000000000001AA25                 db    0
.eh_frame:000000000001AA26                 db    0
.eh_frame:000000000001AA27                 db    0
.eh_frame:000000000001AA28                 db    0
.eh_frame:000000000001AA29                 db  42h ; B
.eh_frame:000000000001AA2A                 db  0Eh
.eh_frame:000000000001AA2B                 db  10h
.eh_frame:000000000001AA2C                 db  8Ch
.eh_frame:000000000001AA2D                 db    2
.eh_frame:000000000001AA2E                 db  41h ; A
.eh_frame:000000000001AA2F                 db  0Eh
.eh_frame:000000000001AA30                 db  18h
.eh_frame:000000000001AA31                 db  86h
.eh_frame:000000000001AA32                 db    3
.eh_frame:000000000001AA33                 db  44h ; D
.eh_frame:000000000001AA34                 db  0Eh
.eh_frame:000000000001AA35                 db  20h
.eh_frame:000000000001AA36                 db  83h
.eh_frame:000000000001AA37                 db    4
.eh_frame:000000000001AA38                 db  5Eh ; ^
.eh_frame:000000000001AA39                 db  0Ah
.eh_frame:000000000001AA3A                 db  0Eh
.eh_frame:000000000001AA3B                 db  18h
.eh_frame:000000000001AA3C                 db  41h ; A
.eh_frame:000000000001AA3D                 db  0Eh
.eh_frame:000000000001AA3E                 db  10h
.eh_frame:000000000001AA3F                 db  42h ; B
.eh_frame:000000000001AA40                 db  0Eh
.eh_frame:000000000001AA41                 db    8
.eh_frame:000000000001AA42                 db  48h ; H
.eh_frame:000000000001AA43                 db  0Bh
.eh_frame:000000000001AA44                 db    0
.eh_frame:000000000001AA45                 db    0
.eh_frame:000000000001AA46                 db    0
.eh_frame:000000000001AA47                 db    0
.eh_frame:000000000001AA48                 db  44h ; D
.eh_frame:000000000001AA49                 db    0
.eh_frame:000000000001AA4A                 db    0
.eh_frame:000000000001AA4B                 db    0
.eh_frame:000000000001AA4C                 db 0ACh
.eh_frame:000000000001AA4D                 db  2Ch ; ,
.eh_frame:000000000001AA4E                 db    0
.eh_frame:000000000001AA4F                 db    0
.eh_frame:000000000001AA50                 db    0
.eh_frame:000000000001AA51                 db 0A4h
.eh_frame:000000000001AA52                 db 0FFh
.eh_frame:000000000001AA53                 db 0FFh
.eh_frame:000000000001AA54                 db  65h ; e
.eh_frame:000000000001AA55                 db    0
.eh_frame:000000000001AA56                 db    0
.eh_frame:000000000001AA57                 db    0
.eh_frame:000000000001AA58                 db    0
.eh_frame:000000000001AA59                 db  42h ; B
.eh_frame:000000000001AA5A                 db  0Eh
.eh_frame:000000000001AA5B                 db  10h
.eh_frame:000000000001AA5C                 db  8Fh
.eh_frame:000000000001AA5D                 db    2
.eh_frame:000000000001AA5E                 db  42h ; B
.eh_frame:000000000001AA5F                 db  0Eh
.eh_frame:000000000001AA60                 db  18h
.eh_frame:000000000001AA61                 db  8Eh
.eh_frame:000000000001AA62                 db    3
.eh_frame:000000000001AA63                 db  45h ; E
.eh_frame:000000000001AA64                 db  0Eh
.eh_frame:000000000001AA65                 db  20h
.eh_frame:000000000001AA66                 db  8Dh
.eh_frame:000000000001AA67                 db    4
.eh_frame:000000000001AA68                 db  42h ; B
.eh_frame:000000000001AA69                 db  0Eh
.eh_frame:000000000001AA6A                 db  28h ; (
.eh_frame:000000000001AA6B                 db  8Ch
.eh_frame:000000000001AA6C                 db    5
.eh_frame:000000000001AA6D                 db  48h ; H
.eh_frame:000000000001AA6E                 db  0Eh
.eh_frame:000000000001AA6F                 db  30h ; 0
.eh_frame:000000000001AA70                 db  86h
.eh_frame:000000000001AA71                 db    6
.eh_frame:000000000001AA72                 db  48h ; H
.eh_frame:000000000001AA73                 db  0Eh
.eh_frame:000000000001AA74                 db  38h ; 8
.eh_frame:000000000001AA75                 db  83h
.eh_frame:000000000001AA76                 db    7
.eh_frame:000000000001AA77                 db  4Dh ; M
.eh_frame:000000000001AA78                 db  0Eh
.eh_frame:000000000001AA79                 db  40h ; @
.eh_frame:000000000001AA7A                 db  72h ; r
.eh_frame:000000000001AA7B                 db  0Eh
.eh_frame:000000000001AA7C                 db  38h ; 8
.eh_frame:000000000001AA7D                 db  41h ; A
.eh_frame:000000000001AA7E                 db  0Eh
.eh_frame:000000000001AA7F                 db  30h ; 0
.eh_frame:000000000001AA80                 db  41h ; A
.eh_frame:000000000001AA81                 db  0Eh
.eh_frame:000000000001AA82                 db  28h ; (
.eh_frame:000000000001AA83                 db  42h ; B
.eh_frame:000000000001AA84                 db  0Eh
.eh_frame:000000000001AA85                 db  20h
.eh_frame:000000000001AA86                 db  42h ; B
.eh_frame:000000000001AA87                 db  0Eh
.eh_frame:000000000001AA88                 db  18h
.eh_frame:000000000001AA89                 db  42h ; B
.eh_frame:000000000001AA8A                 db  0Eh
.eh_frame:000000000001AA8B                 db  10h
.eh_frame:000000000001AA8C                 db  42h ; B
.eh_frame:000000000001AA8D                 db  0Eh
.eh_frame:000000000001AA8E                 db    8
.eh_frame:000000000001AA8F                 db    0
.eh_frame:000000000001AA90                 db  14h
.eh_frame:000000000001AA91                 db    0
.eh_frame:000000000001AA92                 db    0
.eh_frame:000000000001AA93                 db    0
.eh_frame:000000000001AA94                 db 0F4h
.eh_frame:000000000001AA95                 db  2Ch ; ,
.eh_frame:000000000001AA96                 db    0
.eh_frame:000000000001AA97                 db    0
.eh_frame:000000000001AA98                 db  28h ; (
.eh_frame:000000000001AA99                 db 0A4h
.eh_frame:000000000001AA9A                 db 0FFh
.eh_frame:000000000001AA9B                 db 0FFh
.eh_frame:000000000001AA9C                 db    2
.eh_frame:000000000001AA9D                 db    0
.eh_frame:000000000001AA9E                 db    0
.eh_frame:000000000001AA9F                 db    0
.eh_frame:000000000001AAA0                 db    0
.eh_frame:000000000001AAA1                 db    0
.eh_frame:000000000001AAA2                 db    0
.eh_frame:000000000001AAA3                 db    0
.eh_frame:000000000001AAA4                 db    0
.eh_frame:000000000001AAA5                 db    0
.eh_frame:000000000001AAA6                 db    0
.eh_frame:000000000001AAA7                 db    0
.eh_frame:000000000001AAA8                 db  10h
.eh_frame:000000000001AAA9                 db    0
.eh_frame:000000000001AAAA                 db    0
.eh_frame:000000000001AAAB                 db    0
.eh_frame:000000000001AAAC                 db  0Ch
.eh_frame:000000000001AAAD                 db  2Dh ; -
.eh_frame:000000000001AAAE                 db    0
.eh_frame:000000000001AAAF                 db    0
.eh_frame:000000000001AAB0                 db  20h
.eh_frame:000000000001AAB1                 db 0A4h
.eh_frame:000000000001AAB2                 db 0FFh
.eh_frame:000000000001AAB3                 db 0FFh
.eh_frame:000000000001AAB4                 db  0Eh
.eh_frame:000000000001AAB5                 db    0
.eh_frame:000000000001AAB6                 db    0
.eh_frame:000000000001AAB7                 db    0
.eh_frame:000000000001AAB8                 db    0
.eh_frame:000000000001AAB9                 db    0
.eh_frame:000000000001AABA                 db    0
.eh_frame:000000000001AABB                 db    0
.eh_frame:000000000001AABC __FRAME_END__   db    0
.eh_frame:000000000001AABD                 db    0
.eh_frame:000000000001AABE                 db    0
.eh_frame:000000000001AABF                 db    0
.eh_frame:000000000001AABF _eh_frame       ends
.eh_frame:000000000001AABF
.init_array:000000000021B790 ; ELF Initialization Function Table
.init_array:000000000021B790 ; ===========================================================================
.init_array:000000000021B790
.init_array:000000000021B790 ; Segment type: Pure data
.init_array:000000000021B790 ; Segment permissions: Read/Write
.init_array:000000000021B790 _init_array     segment qword public 'DATA' use64
.init_array:000000000021B790                 assume cs:_init_array
.init_array:000000000021B790                 ;org 21B790h
.init_array:000000000021B790 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000021B790                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000021B790                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000021B790 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000021B790
.fini_array:000000000021B798 ; ELF Termination Function Table
.fini_array:000000000021B798 ; ===========================================================================
.fini_array:000000000021B798
.fini_array:000000000021B798 ; Segment type: Pure data
.fini_array:000000000021B798 ; Segment permissions: Read/Write
.fini_array:000000000021B798 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000021B798                 assume cs:_fini_array
.fini_array:000000000021B798                 ;org 21B798h
.fini_array:000000000021B798 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000021B798                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000021B798 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000021B798
.data.rel.ro:000000000021B7A0 ; ===========================================================================
.data.rel.ro:000000000021B7A0
.data.rel.ro:000000000021B7A0 ; Segment type: Pure data
.data.rel.ro:000000000021B7A0 ; Segment permissions: Read/Write
.data.rel.ro:000000000021B7A0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000021B7A0                 assume cs:_data_rel_ro
.data.rel.ro:000000000021B7A0                 ;org 21B7A0h
.data.rel.ro:000000000021B7A0 ; struct option long_options
.data.rel.ro:000000000021B7A0 long_options    dq offset aBackup       ; name
.data.rel.ro:000000000021B7A0                                         ; DATA XREF: main:loc_2E48↑o
.data.rel.ro:000000000021B7A0                 dd 2                    ; has_arg ; "backup"
.data.rel.ro:000000000021B7A0                 db 4 dup(0)
.data.rel.ro:000000000021B7A0                 dq 0                    ; flag
.data.rel.ro:000000000021B7A0                 dd 62h                  ; val
.data.rel.ro:000000000021B7A0                 db 4 dup(0)
.data.rel.ro:000000000021B7C0                 dq offset aContext      ; "context"
.data.rel.ro:000000000021B7C8                 db    0
.data.rel.ro:000000000021B7C9                 db    0
.data.rel.ro:000000000021B7CA                 db    0
.data.rel.ro:000000000021B7CB                 db    0
.data.rel.ro:000000000021B7CC                 db    0
.data.rel.ro:000000000021B7CD                 db    0
.data.rel.ro:000000000021B7CE                 db    0
.data.rel.ro:000000000021B7CF                 db    0
.data.rel.ro:000000000021B7D0                 db    0
.data.rel.ro:000000000021B7D1                 db    0
.data.rel.ro:000000000021B7D2                 db    0
.data.rel.ro:000000000021B7D3                 db    0
.data.rel.ro:000000000021B7D4                 db    0
.data.rel.ro:000000000021B7D5                 db    0
.data.rel.ro:000000000021B7D6                 db    0
.data.rel.ro:000000000021B7D7                 db    0
.data.rel.ro:000000000021B7D8                 db  5Ah ; Z
.data.rel.ro:000000000021B7D9                 db    0
.data.rel.ro:000000000021B7DA                 db    0
.data.rel.ro:000000000021B7DB                 db    0
.data.rel.ro:000000000021B7DC                 db    0
.data.rel.ro:000000000021B7DD                 db    0
.data.rel.ro:000000000021B7DE                 db    0
.data.rel.ro:000000000021B7DF                 db    0
.data.rel.ro:000000000021B7E0                 dq offset aForce        ; "force"
.data.rel.ro:000000000021B7E8                 db    0
.data.rel.ro:000000000021B7E9                 db    0
.data.rel.ro:000000000021B7EA                 db    0
.data.rel.ro:000000000021B7EB                 db    0
.data.rel.ro:000000000021B7EC                 db    0
.data.rel.ro:000000000021B7ED                 db    0
.data.rel.ro:000000000021B7EE                 db    0
.data.rel.ro:000000000021B7EF                 db    0
.data.rel.ro:000000000021B7F0                 db    0
.data.rel.ro:000000000021B7F1                 db    0
.data.rel.ro:000000000021B7F2                 db    0
.data.rel.ro:000000000021B7F3                 db    0
.data.rel.ro:000000000021B7F4                 db    0
.data.rel.ro:000000000021B7F5                 db    0
.data.rel.ro:000000000021B7F6                 db    0
.data.rel.ro:000000000021B7F7                 db    0
.data.rel.ro:000000000021B7F8                 db  66h ; f
.data.rel.ro:000000000021B7F9                 db    0
.data.rel.ro:000000000021B7FA                 db    0
.data.rel.ro:000000000021B7FB                 db    0
.data.rel.ro:000000000021B7FC                 db    0
.data.rel.ro:000000000021B7FD                 db    0
.data.rel.ro:000000000021B7FE                 db    0
.data.rel.ro:000000000021B7FF                 db    0
.data.rel.ro:000000000021B800                 dq offset aInteractive  ; "interactive"
.data.rel.ro:000000000021B808                 db    0
.data.rel.ro:000000000021B809                 db    0
.data.rel.ro:000000000021B80A                 db    0
.data.rel.ro:000000000021B80B                 db    0
.data.rel.ro:000000000021B80C                 db    0
.data.rel.ro:000000000021B80D                 db    0
.data.rel.ro:000000000021B80E                 db    0
.data.rel.ro:000000000021B80F                 db    0
.data.rel.ro:000000000021B810                 db    0
.data.rel.ro:000000000021B811                 db    0
.data.rel.ro:000000000021B812                 db    0
.data.rel.ro:000000000021B813                 db    0
.data.rel.ro:000000000021B814                 db    0
.data.rel.ro:000000000021B815                 db    0
.data.rel.ro:000000000021B816                 db    0
.data.rel.ro:000000000021B817                 db    0
.data.rel.ro:000000000021B818                 db  69h ; i
.data.rel.ro:000000000021B819                 db    0
.data.rel.ro:000000000021B81A                 db    0
.data.rel.ro:000000000021B81B                 db    0
.data.rel.ro:000000000021B81C                 db    0
.data.rel.ro:000000000021B81D                 db    0
.data.rel.ro:000000000021B81E                 db    0
.data.rel.ro:000000000021B81F                 db    0
.data.rel.ro:000000000021B820                 dq offset aNoClobber    ; "no-clobber"
.data.rel.ro:000000000021B828                 db    0
.data.rel.ro:000000000021B829                 db    0
.data.rel.ro:000000000021B82A                 db    0
.data.rel.ro:000000000021B82B                 db    0
.data.rel.ro:000000000021B82C                 db    0
.data.rel.ro:000000000021B82D                 db    0
.data.rel.ro:000000000021B82E                 db    0
.data.rel.ro:000000000021B82F                 db    0
.data.rel.ro:000000000021B830                 db    0
.data.rel.ro:000000000021B831                 db    0
.data.rel.ro:000000000021B832                 db    0
.data.rel.ro:000000000021B833                 db    0
.data.rel.ro:000000000021B834                 db    0
.data.rel.ro:000000000021B835                 db    0
.data.rel.ro:000000000021B836                 db    0
.data.rel.ro:000000000021B837                 db    0
.data.rel.ro:000000000021B838                 db  6Eh ; n
.data.rel.ro:000000000021B839                 db    0
.data.rel.ro:000000000021B83A                 db    0
.data.rel.ro:000000000021B83B                 db    0
.data.rel.ro:000000000021B83C                 db    0
.data.rel.ro:000000000021B83D                 db    0
.data.rel.ro:000000000021B83E                 db    0
.data.rel.ro:000000000021B83F                 db    0
.data.rel.ro:000000000021B840                 dq offset aNoTargetDirect ; "no-target-directory"
.data.rel.ro:000000000021B848                 db    0
.data.rel.ro:000000000021B849                 db    0
.data.rel.ro:000000000021B84A                 db    0
.data.rel.ro:000000000021B84B                 db    0
.data.rel.ro:000000000021B84C                 db    0
.data.rel.ro:000000000021B84D                 db    0
.data.rel.ro:000000000021B84E                 db    0
.data.rel.ro:000000000021B84F                 db    0
.data.rel.ro:000000000021B850                 db    0
.data.rel.ro:000000000021B851                 db    0
.data.rel.ro:000000000021B852                 db    0
.data.rel.ro:000000000021B853                 db    0
.data.rel.ro:000000000021B854                 db    0
.data.rel.ro:000000000021B855                 db    0
.data.rel.ro:000000000021B856                 db    0
.data.rel.ro:000000000021B857                 db    0
.data.rel.ro:000000000021B858                 db  54h ; T
.data.rel.ro:000000000021B859                 db    0
.data.rel.ro:000000000021B85A                 db    0
.data.rel.ro:000000000021B85B                 db    0
.data.rel.ro:000000000021B85C                 db    0
.data.rel.ro:000000000021B85D                 db    0
.data.rel.ro:000000000021B85E                 db    0
.data.rel.ro:000000000021B85F                 db    0
.data.rel.ro:000000000021B860                 dq offset aStripTrailingS_0 ; "strip-trailing-slashes"
.data.rel.ro:000000000021B868                 db    0
.data.rel.ro:000000000021B869                 db    0
.data.rel.ro:000000000021B86A                 db    0
.data.rel.ro:000000000021B86B                 db    0
.data.rel.ro:000000000021B86C                 db    0
.data.rel.ro:000000000021B86D                 db    0
.data.rel.ro:000000000021B86E                 db    0
.data.rel.ro:000000000021B86F                 db    0
.data.rel.ro:000000000021B870                 db    0
.data.rel.ro:000000000021B871                 db    0
.data.rel.ro:000000000021B872                 db    0
.data.rel.ro:000000000021B873                 db    0
.data.rel.ro:000000000021B874                 db    0
.data.rel.ro:000000000021B875                 db    0
.data.rel.ro:000000000021B876                 db    0
.data.rel.ro:000000000021B877                 db    0
.data.rel.ro:000000000021B878                 db  80h
.data.rel.ro:000000000021B879                 db    0
.data.rel.ro:000000000021B87A                 db    0
.data.rel.ro:000000000021B87B                 db    0
.data.rel.ro:000000000021B87C                 db    0
.data.rel.ro:000000000021B87D                 db    0
.data.rel.ro:000000000021B87E                 db    0
.data.rel.ro:000000000021B87F                 db    0
.data.rel.ro:000000000021B880                 dq offset aSuffix       ; "suffix"
.data.rel.ro:000000000021B888                 db    1
.data.rel.ro:000000000021B889                 db    0
.data.rel.ro:000000000021B88A                 db    0
.data.rel.ro:000000000021B88B                 db    0
.data.rel.ro:000000000021B88C                 db    0
.data.rel.ro:000000000021B88D                 db    0
.data.rel.ro:000000000021B88E                 db    0
.data.rel.ro:000000000021B88F                 db    0
.data.rel.ro:000000000021B890                 db    0
.data.rel.ro:000000000021B891                 db    0
.data.rel.ro:000000000021B892                 db    0
.data.rel.ro:000000000021B893                 db    0
.data.rel.ro:000000000021B894                 db    0
.data.rel.ro:000000000021B895                 db    0
.data.rel.ro:000000000021B896                 db    0
.data.rel.ro:000000000021B897                 db    0
.data.rel.ro:000000000021B898                 db  53h ; S
.data.rel.ro:000000000021B899                 db    0
.data.rel.ro:000000000021B89A                 db    0
.data.rel.ro:000000000021B89B                 db    0
.data.rel.ro:000000000021B89C                 db    0
.data.rel.ro:000000000021B89D                 db    0
.data.rel.ro:000000000021B89E                 db    0
.data.rel.ro:000000000021B89F                 db    0
.data.rel.ro:000000000021B8A0                 dq offset aNoTargetDirect+3 ; "target-directory"
.data.rel.ro:000000000021B8A8                 db    1
.data.rel.ro:000000000021B8A9                 db    0
.data.rel.ro:000000000021B8AA                 db    0
.data.rel.ro:000000000021B8AB                 db    0
.data.rel.ro:000000000021B8AC                 db    0
.data.rel.ro:000000000021B8AD                 db    0
.data.rel.ro:000000000021B8AE                 db    0
.data.rel.ro:000000000021B8AF                 db    0
.data.rel.ro:000000000021B8B0                 db    0
.data.rel.ro:000000000021B8B1                 db    0
.data.rel.ro:000000000021B8B2                 db    0
.data.rel.ro:000000000021B8B3                 db    0
.data.rel.ro:000000000021B8B4                 db    0
.data.rel.ro:000000000021B8B5                 db    0
.data.rel.ro:000000000021B8B6                 db    0
.data.rel.ro:000000000021B8B7                 db    0
.data.rel.ro:000000000021B8B8                 db  74h ; t
.data.rel.ro:000000000021B8B9                 db    0
.data.rel.ro:000000000021B8BA                 db    0
.data.rel.ro:000000000021B8BB                 db    0
.data.rel.ro:000000000021B8BC                 db    0
.data.rel.ro:000000000021B8BD                 db    0
.data.rel.ro:000000000021B8BE                 db    0
.data.rel.ro:000000000021B8BF                 db    0
.data.rel.ro:000000000021B8C0                 dq offset aUpdate       ; "update"
.data.rel.ro:000000000021B8C8                 db    0
.data.rel.ro:000000000021B8C9                 db    0
.data.rel.ro:000000000021B8CA                 db    0
.data.rel.ro:000000000021B8CB                 db    0
.data.rel.ro:000000000021B8CC                 db    0
.data.rel.ro:000000000021B8CD                 db    0
.data.rel.ro:000000000021B8CE                 db    0
.data.rel.ro:000000000021B8CF                 db    0
.data.rel.ro:000000000021B8D0                 db    0
.data.rel.ro:000000000021B8D1                 db    0
.data.rel.ro:000000000021B8D2                 db    0
.data.rel.ro:000000000021B8D3                 db    0
.data.rel.ro:000000000021B8D4                 db    0
.data.rel.ro:000000000021B8D5                 db    0
.data.rel.ro:000000000021B8D6                 db    0
.data.rel.ro:000000000021B8D7                 db    0
.data.rel.ro:000000000021B8D8                 db  75h ; u
.data.rel.ro:000000000021B8D9                 db    0
.data.rel.ro:000000000021B8DA                 db    0
.data.rel.ro:000000000021B8DB                 db    0
.data.rel.ro:000000000021B8DC                 db    0
.data.rel.ro:000000000021B8DD                 db    0
.data.rel.ro:000000000021B8DE                 db    0
.data.rel.ro:000000000021B8DF                 db    0
.data.rel.ro:000000000021B8E0                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000021B8E8                 db    0
.data.rel.ro:000000000021B8E9                 db    0
.data.rel.ro:000000000021B8EA                 db    0
.data.rel.ro:000000000021B8EB                 db    0
.data.rel.ro:000000000021B8EC                 db    0
.data.rel.ro:000000000021B8ED                 db    0
.data.rel.ro:000000000021B8EE                 db    0
.data.rel.ro:000000000021B8EF                 db    0
.data.rel.ro:000000000021B8F0                 db    0
.data.rel.ro:000000000021B8F1                 db    0
.data.rel.ro:000000000021B8F2                 db    0
.data.rel.ro:000000000021B8F3                 db    0
.data.rel.ro:000000000021B8F4                 db    0
.data.rel.ro:000000000021B8F5                 db    0
.data.rel.ro:000000000021B8F6                 db    0
.data.rel.ro:000000000021B8F7                 db    0
.data.rel.ro:000000000021B8F8                 db  76h ; v
.data.rel.ro:000000000021B8F9                 db    0
.data.rel.ro:000000000021B8FA                 db    0
.data.rel.ro:000000000021B8FB                 db    0
.data.rel.ro:000000000021B8FC                 db    0
.data.rel.ro:000000000021B8FD                 db    0
.data.rel.ro:000000000021B8FE                 db    0
.data.rel.ro:000000000021B8FF                 db    0
.data.rel.ro:000000000021B900                 dq offset aHelp         ; "help"
.data.rel.ro:000000000021B908                 db    0
.data.rel.ro:000000000021B909                 db    0
.data.rel.ro:000000000021B90A                 db    0
.data.rel.ro:000000000021B90B                 db    0
.data.rel.ro:000000000021B90C                 db    0
.data.rel.ro:000000000021B90D                 db    0
.data.rel.ro:000000000021B90E                 db    0
.data.rel.ro:000000000021B90F                 db    0
.data.rel.ro:000000000021B910                 db    0
.data.rel.ro:000000000021B911                 db    0
.data.rel.ro:000000000021B912                 db    0
.data.rel.ro:000000000021B913                 db    0
.data.rel.ro:000000000021B914                 db    0
.data.rel.ro:000000000021B915                 db    0
.data.rel.ro:000000000021B916                 db    0
.data.rel.ro:000000000021B917                 db    0
.data.rel.ro:000000000021B918                 db  7Eh ; ~
.data.rel.ro:000000000021B919                 db 0FFh
.data.rel.ro:000000000021B91A                 db 0FFh
.data.rel.ro:000000000021B91B                 db 0FFh
.data.rel.ro:000000000021B91C                 db    0
.data.rel.ro:000000000021B91D                 db    0
.data.rel.ro:000000000021B91E                 db    0
.data.rel.ro:000000000021B91F                 db    0
.data.rel.ro:000000000021B920                 dq offset aVersion      ; "version"
.data.rel.ro:000000000021B928                 db    0
.data.rel.ro:000000000021B929                 db    0
.data.rel.ro:000000000021B92A                 db    0
.data.rel.ro:000000000021B92B                 db    0
.data.rel.ro:000000000021B92C                 db    0
.data.rel.ro:000000000021B92D                 db    0
.data.rel.ro:000000000021B92E                 db    0
.data.rel.ro:000000000021B92F                 db    0
.data.rel.ro:000000000021B930                 db    0
.data.rel.ro:000000000021B931                 db    0
.data.rel.ro:000000000021B932                 db    0
.data.rel.ro:000000000021B933                 db    0
.data.rel.ro:000000000021B934                 db    0
.data.rel.ro:000000000021B935                 db    0
.data.rel.ro:000000000021B936                 db    0
.data.rel.ro:000000000021B937                 db    0
.data.rel.ro:000000000021B938                 db  7Dh ; }
.data.rel.ro:000000000021B939                 db 0FFh
.data.rel.ro:000000000021B93A                 db 0FFh
.data.rel.ro:000000000021B93B                 db 0FFh
.data.rel.ro:000000000021B93C                 db    0
.data.rel.ro:000000000021B93D                 db    0
.data.rel.ro:000000000021B93E                 db    0
.data.rel.ro:000000000021B93F                 db    0
.data.rel.ro:000000000021B940                 db    0
.data.rel.ro:000000000021B941                 db    0
.data.rel.ro:000000000021B942                 db    0
.data.rel.ro:000000000021B943                 db    0
.data.rel.ro:000000000021B944                 db    0
.data.rel.ro:000000000021B945                 db    0
.data.rel.ro:000000000021B946                 db    0
.data.rel.ro:000000000021B947                 db    0
.data.rel.ro:000000000021B948                 db    0
.data.rel.ro:000000000021B949                 db    0
.data.rel.ro:000000000021B94A                 db    0
.data.rel.ro:000000000021B94B                 db    0
.data.rel.ro:000000000021B94C                 db    0
.data.rel.ro:000000000021B94D                 db    0
.data.rel.ro:000000000021B94E                 db    0
.data.rel.ro:000000000021B94F                 db    0
.data.rel.ro:000000000021B950                 db    0
.data.rel.ro:000000000021B951                 db    0
.data.rel.ro:000000000021B952                 db    0
.data.rel.ro:000000000021B953                 db    0
.data.rel.ro:000000000021B954                 db    0
.data.rel.ro:000000000021B955                 db    0
.data.rel.ro:000000000021B956                 db    0
.data.rel.ro:000000000021B957                 db    0
.data.rel.ro:000000000021B958                 db    0
.data.rel.ro:000000000021B959                 db    0
.data.rel.ro:000000000021B95A                 db    0
.data.rel.ro:000000000021B95B                 db    0
.data.rel.ro:000000000021B95C                 db    0
.data.rel.ro:000000000021B95D                 db    0
.data.rel.ro:000000000021B95E                 db    0
.data.rel.ro:000000000021B95F                 db    0
.data.rel.ro:000000000021B960 backup_args     dq offset aNone         ; DATA XREF: get_version_part_0+B↑o
.data.rel.ro:000000000021B960                                         ; "none"
.data.rel.ro:000000000021B968                 dq offset aOff          ; "off"
.data.rel.ro:000000000021B970                 dq offset aSimple       ; "simple"
.data.rel.ro:000000000021B978                 dq offset aNever        ; "never"
.data.rel.ro:000000000021B980                 dq offset aExisting     ; "existing"
.data.rel.ro:000000000021B988                 dq offset aNil          ; "nil"
.data.rel.ro:000000000021B990                 dq offset aNumbered     ; "numbered"
.data.rel.ro:000000000021B998                 dq offset aSocket+5     ; "t"
.data.rel.ro:000000000021B9A0                 align 40h
.data.rel.ro:000000000021B9C0                 public quoting_style_args
.data.rel.ro:000000000021B9C0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000021B9C8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000021B9D0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000021B9D8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000021B9E0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000021B9E8                 dq offset aCoreutils831Li_0+1Bh ; "c"
.data.rel.ro:000000000021B9F0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000021B9F8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000021BA00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000021BA08                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000021BA10                 align 20h
.data.rel.ro:000000000021BA20 comparison_function_table db    0       ; DATA XREF: streamsavedir+2↑o
.data.rel.ro:000000000021BA21                 db    0
.data.rel.ro:000000000021BA22                 db    0
.data.rel.ro:000000000021BA23                 db    0
.data.rel.ro:000000000021BA24                 db    0
.data.rel.ro:000000000021BA25                 db    0
.data.rel.ro:000000000021BA26                 db    0
.data.rel.ro:000000000021BA27                 db    0
.data.rel.ro:000000000021BA28                 dq offset direntry_cmp_name
.data.rel.ro:000000000021BA30                 dq offset direntry_cmp_inode
.data.rel.ro:000000000021BA30 _data_rel_ro    ends
.data.rel.ro:000000000021BA30
LOAD:000000000021BA38 ; ELF Dynamic Information
LOAD:000000000021BA38 ; ===========================================================================
LOAD:000000000021BA38
LOAD:000000000021BA38 ; Segment type: Pure data
LOAD:000000000021BA38 ; Segment permissions: Read/Write
LOAD:000000000021BA38 LOAD            segment byte public 'DATA' use64
LOAD:000000000021BA38                 assume cs:LOAD
LOAD:000000000021BA38                 ;org 21BA38h
LOAD:000000000021BA38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000021BA38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000021BA38                                         ; DT_NEEDED libc.so.6
LOAD:000000000021BA48                 Elf64_Dyn <0Ch, 2540h>  ; DT_INIT
LOAD:000000000021BA58                 Elf64_Dyn <0Dh, 14EE0h> ; DT_FINI
LOAD:000000000021BA68                 Elf64_Dyn <19h, 21B790h> ; DT_INIT_ARRAY
LOAD:000000000021BA78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000021BA88                 Elf64_Dyn <1Ah, 21B798h> ; DT_FINI_ARRAY
LOAD:000000000021BA98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000021BAA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000021BAB8                 Elf64_Dyn <5, 0EF8h>    ; DT_STRTAB
LOAD:000000000021BAC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000021BAD8                 Elf64_Dyn <0Ah, 511h>   ; DT_STRSZ
LOAD:000000000021BAE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000021BAF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000021BB08                 Elf64_Dyn <3, 21BC28h>  ; DT_PLTGOT
LOAD:000000000021BB18                 Elf64_Dyn <2, 0A98h>    ; DT_PLTRELSZ
LOAD:000000000021BB28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000021BB38                 Elf64_Dyn <17h, 1AA8h>  ; DT_JMPREL
LOAD:000000000021BB48                 Elf64_Dyn <7, 15B0h>    ; DT_RELA
LOAD:000000000021BB58                 Elf64_Dyn <8, 4F8h>     ; DT_RELASZ
LOAD:000000000021BB68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000021BB78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000021BB88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000021BB98                 Elf64_Dyn <6FFFFFFEh, 1510h> ; DT_VERNEED
LOAD:000000000021BBA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000021BBB8                 Elf64_Dyn <6FFFFFF0h, 140Ah> ; DT_VERSYM
LOAD:000000000021BBC8                 Elf64_Dyn <6FFFFFF9h, 28h> ; DT_RELACOUNT
LOAD:000000000021BBD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000021BBE8                 db    0
LOAD:000000000021BBE9                 db    0
LOAD:000000000021BBEA                 db    0
LOAD:000000000021BBEB                 db    0
LOAD:000000000021BBEC                 db    0
LOAD:000000000021BBED                 db    0
LOAD:000000000021BBEE                 db    0
LOAD:000000000021BBEF                 db    0
LOAD:000000000021BBF0                 db    0
LOAD:000000000021BBF1                 db    0
LOAD:000000000021BBF2                 db    0
LOAD:000000000021BBF3                 db    0
LOAD:000000000021BBF4                 db    0
LOAD:000000000021BBF5                 db    0
LOAD:000000000021BBF6                 db    0
LOAD:000000000021BBF7                 db    0
LOAD:000000000021BBF8                 db    0
LOAD:000000000021BBF9                 db    0
LOAD:000000000021BBFA                 db    0
LOAD:000000000021BBFB                 db    0
LOAD:000000000021BBFC                 db    0
LOAD:000000000021BBFD                 db    0
LOAD:000000000021BBFE                 db    0
LOAD:000000000021BBFF                 db    0
LOAD:000000000021BC00                 db    0
LOAD:000000000021BC01                 db    0
LOAD:000000000021BC02                 db    0
LOAD:000000000021BC03                 db    0
LOAD:000000000021BC04                 db    0
LOAD:000000000021BC05                 db    0
LOAD:000000000021BC06                 db    0
LOAD:000000000021BC07                 db    0
LOAD:000000000021BC08                 db    0
LOAD:000000000021BC09                 db    0
LOAD:000000000021BC0A                 db    0
LOAD:000000000021BC0B                 db    0
LOAD:000000000021BC0C                 db    0
LOAD:000000000021BC0D                 db    0
LOAD:000000000021BC0E                 db    0
LOAD:000000000021BC0F                 db    0
LOAD:000000000021BC10                 db    0
LOAD:000000000021BC11                 db    0
LOAD:000000000021BC12                 db    0
LOAD:000000000021BC13                 db    0
LOAD:000000000021BC14                 db    0
LOAD:000000000021BC15                 db    0
LOAD:000000000021BC16                 db    0
LOAD:000000000021BC17                 db    0
LOAD:000000000021BC18                 db    0
LOAD:000000000021BC19                 db    0
LOAD:000000000021BC1A                 db    0
LOAD:000000000021BC1B                 db    0
LOAD:000000000021BC1C                 db    0
LOAD:000000000021BC1D                 db    0
LOAD:000000000021BC1E                 db    0
LOAD:000000000021BC1F                 db    0
LOAD:000000000021BC20                 db    0
LOAD:000000000021BC21                 db    0
LOAD:000000000021BC22                 db    0
LOAD:000000000021BC23                 db    0
LOAD:000000000021BC24                 db    0
LOAD:000000000021BC25                 db    0
LOAD:000000000021BC26                 db    0
LOAD:000000000021BC27                 db    0
LOAD:000000000021BC27 LOAD            ends
LOAD:000000000021BC27
.got:000000000021BC28 ; ===========================================================================
.got:000000000021BC28
.got:000000000021BC28 ; Segment type: Pure data
.got:000000000021BC28 ; Segment permissions: Read/Write
.got:000000000021BC28 _got            segment qword public 'DATA' use64
.got:000000000021BC28                 assume cs:_got
.got:000000000021BC28                 ;org 21BC28h
.got:000000000021BC28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000021BC30 qword_21BC30    dq 0                    ; DATA XREF: sub_2560↑r
.got:000000000021BC38 qword_21BC38    dq 0                    ; DATA XREF: sub_2560+6↑r
.got:000000000021BC40 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000021BC48 utimensat_ptr   dq offset utimensat     ; DATA XREF: _utimensat↑r
.got:000000000021BC50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000021BC58 __errno_location_ptr dq offset __errno_location
.got:000000000021BC58                                         ; DATA XREF: ___errno_location↑r
.got:000000000021BC60 unlink_ptr      dq offset unlink        ; DATA XREF: _unlink↑r
.got:000000000021BC68 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000021BC70 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000021BC78 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000021BC80 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000021BC88 __read_chk_ptr  dq offset __read_chk    ; DATA XREF: ___read_chk↑r
.got:000000000021BC90 mkdir_ptr       dq offset mkdir         ; DATA XREF: _mkdir↑r
.got:000000000021BC98 unlinkat_ptr    dq offset unlinkat      ; DATA XREF: _unlinkat↑r
.got:000000000021BCA0 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:000000000021BCA8 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:000000000021BCB0 faccessat_ptr   dq offset faccessat     ; DATA XREF: _faccessat↑r
.got:000000000021BCB8 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:000000000021BCC0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000021BCC8 clock_gettime_ptr dq offset clock_gettime
.got:000000000021BCC8                                         ; DATA XREF: _clock_gettime↑r
.got:000000000021BCD0 write_ptr       dq offset write         ; DATA XREF: _write↑r
.got:000000000021BCD8 getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
.got:000000000021BCE0 fread_unlocked_ptr dq offset fread_unlocked
.got:000000000021BCE0                                         ; DATA XREF: _fread_unlocked↑r
.got:000000000021BCE8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000021BCF0 pathconf_ptr    dq offset pathconf      ; DATA XREF: _pathconf↑r
.got:000000000021BCF8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000021BD00 opendir_ptr     dq offset opendir       ; DATA XREF: _opendir↑r
.got:000000000021BD08 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000021BD08                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000021BD10 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:000000000021BD18 rmdir_ptr       dq offset rmdir         ; DATA XREF: _rmdir↑r
.got:000000000021BD20 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000021BD28 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000021BD28                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000021BD30 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000021BD38 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000021BD40 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000021BD48 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000021BD48                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000021BD50 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:000000000021BD58 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000021BD60 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000021BD68 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000021BD70 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000021BD78 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000021BD80 ftruncate_ptr   dq offset ftruncate     ; DATA XREF: _ftruncate↑r
.got:000000000021BD88 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000021BD90 gettimeofday_ptr dq offset gettimeofday ; DATA XREF: _gettimeofday↑r
.got:000000000021BD98 __assert_fail_ptr dq offset __assert_fail
.got:000000000021BD98                                         ; DATA XREF: ___assert_fail↑r
.got:000000000021BDA0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000021BDA8 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:000000000021BDB0 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:000000000021BDB8 canonicalize_file_name_ptr dq offset canonicalize_file_name
.got:000000000021BDB8                                         ; DATA XREF: _canonicalize_file_name↑r
.got:000000000021BDC0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000021BDC8 rewinddir_ptr   dq offset rewinddir     ; DATA XREF: _rewinddir↑r
.got:000000000021BDD0 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000021BDD8 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000021BDE0 posix_fadvise_ptr dq offset posix_fadvise
.got:000000000021BDE0                                         ; DATA XREF: _posix_fadvise↑r
.got:000000000021BDE8 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:000000000021BDF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000021BDF8 fallocate_ptr   dq offset fallocate     ; DATA XREF: _fallocate↑r
.got:000000000021BE00 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000021BE00                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000021BE08 utimes_ptr      dq offset utimes        ; DATA XREF: _utimes↑r
.got:000000000021BE10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000021BE18 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:000000000021BE20 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000021BE28 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000021BE30 fpathconf_ptr   dq offset fpathconf     ; DATA XREF: _fpathconf↑r
.got:000000000021BE38 rpmatch_ptr     dq offset rpmatch       ; DATA XREF: _rpmatch↑r
.got:000000000021BE40 syscall_ptr     dq offset syscall       ; DATA XREF: _syscall↑r
.got:000000000021BE48 mkfifo_ptr      dq offset mkfifo        ; DATA XREF: _mkfifo↑r
.got:000000000021BE50 umask_ptr       dq offset umask         ; DATA XREF: _umask↑r
.got:000000000021BE58 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000021BE60 __xmknod_ptr    dq offset __xmknod      ; DATA XREF: ___xmknod↑r
.got:000000000021BE68 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000021BE70 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:000000000021BE78 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000021BE80 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000021BE88 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000021BE90 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000021BE98 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000021BEA0 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000021BEA8 lchown_ptr      dq offset lchown        ; DATA XREF: _lchown↑r
.got:000000000021BEB0 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000021BEB8 fchdir_ptr      dq offset fchdir        ; DATA XREF: _fchdir↑r
.got:000000000021BEC0 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000021BEC8 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000021BED0 linkat_ptr      dq offset linkat        ; DATA XREF: _linkat↑r
.got:000000000021BED8 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000021BEE0 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000021BEE8 fchmod_ptr      dq offset fchmod        ; DATA XREF: _fchmod↑r
.got:000000000021BEF0 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:000000000021BEF8 chmod_ptr       dq offset chmod         ; DATA XREF: _chmod↑r
.got:000000000021BF00 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000021BF08 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000021BF10 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000021BF18 __explicit_bzero_chk_ptr dq offset __explicit_bzero_chk
.got:000000000021BF18                                         ; DATA XREF: ___explicit_bzero_chk↑r
.got:000000000021BF20 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000021BF28 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000021BF30 fchown_ptr      dq offset fchown        ; DATA XREF: _fchown↑r
.got:000000000021BF38 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000021BF40 rename_ptr      dq offset rename        ; DATA XREF: _rename↑r
.got:000000000021BF48 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000021BF50 futimens_ptr    dq offset futimens      ; DATA XREF: _futimens↑r
.got:000000000021BF58 euidaccess_ptr  dq offset euidaccess    ; DATA XREF: _euidaccess↑r
.got:000000000021BF60 fstatfs_ptr     dq offset fstatfs       ; DATA XREF: _fstatfs↑r
.got:000000000021BF68 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000021BF70 renameat_ptr    dq offset renameat      ; DATA XREF: _renameat↑r
.got:000000000021BF78 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:000000000021BF80 getppid_ptr     dq offset getppid       ; DATA XREF: _getppid↑r
.got:000000000021BF88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000021BF90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000021BF98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000021BF98                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000021BFA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000021BFA8 symlinkat_ptr   dq offset symlinkat     ; DATA XREF: _symlinkat↑r
.got:000000000021BFB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000021BFB8 futimesat_ptr   dq offset futimesat     ; DATA XREF: _futimesat↑r
.got:000000000021BFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000021BFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000021BFC8 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000021BFC8                                         ; utimecmpat:loc_FC80↑r ...
.got:000000000021BFD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000021BFD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000021BFD8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000021BFD8                                         ; DATA XREF: start+24↑r
.got:000000000021BFE0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000021BFE0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000021BFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000021BFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000021BFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000021BFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000021BFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000021BFF0 _got            ends
.got:000000000021BFF0
LOAD:000000000021BFF8 ; ===========================================================================
LOAD:000000000021BFF8
LOAD:000000000021BFF8 ; Segment type: Pure data
LOAD:000000000021BFF8 ; Segment permissions: Read/Write
LOAD:000000000021BFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000021BFF8                 assume cs:LOAD
LOAD:000000000021BFF8                 ;org 21BFF8h
LOAD:000000000021BFF8                 align 20h
LOAD:000000000021BFF8 LOAD            ends
LOAD:000000000021BFF8
.data:000000000021C000 ; ===========================================================================
.data:000000000021C000
.data:000000000021C000 ; Segment type: Pure data
.data:000000000021C000 ; Segment permissions: Read/Write
.data:000000000021C000 _data           segment align_32 public 'DATA' use64
.data:000000000021C000                 assume cs:_data
.data:000000000021C000                 ;org 21C000h
.data:000000000021C000                 public __data_start ; weak
.data:000000000021C000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000021C000                                         ; data_start
.data:000000000021C001                 db    0
.data:000000000021C002                 db    0
.data:000000000021C003                 db    0
.data:000000000021C004                 db    0
.data:000000000021C005                 db    0
.data:000000000021C006                 db    0
.data:000000000021C007                 db    0
.data:000000000021C008                 public __dso_handle
.data:000000000021C008 ; void *_dso_handle
.data:000000000021C008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000021C008                                         ; atexit↑r ...
.data:000000000021C010 mask_7898       dd 0FFFFFFFFh           ; DATA XREF: cached_umask+1↑r
.data:000000000021C010                                         ; cached_umask+1B↑w
.data:000000000021C014                 align 8
.data:000000000021C018 ; size_t nz_7571
.data:000000000021C018 nz_7571         dq 20000h               ; DATA XREF: write_zeros:loc_4C25↑r
.data:000000000021C018                                         ; write_zeros+36↑r ...
.data:000000000021C020                 public Version
.data:000000000021C020 Version         dq offset a831          ; DATA XREF: main+239↑r
.data:000000000021C020                                         ; "8.31"
.data:000000000021C028                 public exit_failure
.data:000000000021C028 ; int exit_failure
.data:000000000021C028 exit_failure    dd 1                    ; DATA XREF: close_stdin+A8↑r
.data:000000000021C028                                         ; close_stdout:loc_AFB2↑r ...
.data:000000000021C02C                 align 20h
.data:000000000021C040                 public quote_quoting_options
.data:000000000021C040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000021C040                                         ; quote_mem↑o ...
.data:000000000021C041                 db    0
.data:000000000021C042                 db    0
.data:000000000021C043                 db    0
.data:000000000021C044                 db    0
.data:000000000021C045                 db    0
.data:000000000021C046                 db    0
.data:000000000021C047                 db    0
.data:000000000021C048                 db    0
.data:000000000021C049                 db    0
.data:000000000021C04A                 db    0
.data:000000000021C04B                 db    0
.data:000000000021C04C                 db    0
.data:000000000021C04D                 db    0
.data:000000000021C04E                 db    0
.data:000000000021C04F                 db    0
.data:000000000021C050                 db    0
.data:000000000021C051                 db    0
.data:000000000021C052                 db    0
.data:000000000021C053                 db    0
.data:000000000021C054                 db    0
.data:000000000021C055                 db    0
.data:000000000021C056                 db    0
.data:000000000021C057                 db    0
.data:000000000021C058                 db    0
.data:000000000021C059                 db    0
.data:000000000021C05A                 db    0
.data:000000000021C05B                 db    0
.data:000000000021C05C                 db    0
.data:000000000021C05D                 db    0
.data:000000000021C05E                 db    0
.data:000000000021C05F                 db    0
.data:000000000021C060                 db    0
.data:000000000021C061                 db    0
.data:000000000021C062                 db    0
.data:000000000021C063                 db    0
.data:000000000021C064                 db    0
.data:000000000021C065                 db    0
.data:000000000021C066                 db    0
.data:000000000021C067                 db    0
.data:000000000021C068                 db    0
.data:000000000021C069                 db    0
.data:000000000021C06A                 db    0
.data:000000000021C06B                 db    0
.data:000000000021C06C                 db    0
.data:000000000021C06D                 db    0
.data:000000000021C06E                 db    0
.data:000000000021C06F                 db    0
.data:000000000021C070                 db    0
.data:000000000021C071                 db    0
.data:000000000021C072                 db    0
.data:000000000021C073                 db    0
.data:000000000021C074                 db    0
.data:000000000021C075                 db    0
.data:000000000021C076                 db    0
.data:000000000021C077                 db    0
.data:000000000021C078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000021C078                                         ; quotearg_n_options:loc_E0DD↑r ...
.data:000000000021C07C                 align 20h
.data:000000000021C080 ; void *slotvec
.data:000000000021C080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000021C080                                         ; quotearg_n_options+76↑w ...
.data:000000000021C088                 align 10h
.data:000000000021C090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000021C090                                         ; quotearg_n_options+187↑r ...
.data:000000000021C098 off_21C098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000021C0A0                 public argmatch_die
.data:000000000021C0A0 argmatch_die    dq offset __argmatch_die
.data:000000000021C0A0                                         ; DATA XREF: get_version_part_0+4↑r
.data:000000000021C0A0 _data           ends
.data:000000000021C0A0
LOAD:000000000021C0A8 ; ===========================================================================
LOAD:000000000021C0A8
LOAD:000000000021C0A8 ; Segment type: Pure data
LOAD:000000000021C0A8 ; Segment permissions: Read/Write
LOAD:000000000021C0A8 LOAD            segment byte public 'DATA' use64
LOAD:000000000021C0A8                 assume cs:LOAD
LOAD:000000000021C0A8                 ;org 21C0A8h
LOAD:000000000021C0A8                 public __bss_start
LOAD:000000000021C0A8 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:000000000021C0A8                                         ; deregister_tm_clones+8↑o ...
LOAD:000000000021C0A8                                         ; Alternative name is '_edata'
LOAD:000000000021C0A8                                         ; __TMC_END__
LOAD:000000000021C0A8                                         ; _edata
LOAD:000000000021C0A9                 db    ? ;
LOAD:000000000021C0AA                 db    ? ;
LOAD:000000000021C0AB                 db    ? ;
LOAD:000000000021C0AC                 db    ? ;
LOAD:000000000021C0AD                 db    ? ;
LOAD:000000000021C0AE                 db    ? ;
LOAD:000000000021C0AF                 db    ? ;
LOAD:000000000021C0B0                 db    ? ;
LOAD:000000000021C0B1                 db    ? ;
LOAD:000000000021C0B2                 db    ? ;
LOAD:000000000021C0B3                 db    ? ;
LOAD:000000000021C0B4                 db    ? ;
LOAD:000000000021C0B5                 db    ? ;
LOAD:000000000021C0B6                 db    ? ;
LOAD:000000000021C0B7                 db    ? ;
LOAD:000000000021C0B8                 db    ? ;
LOAD:000000000021C0B9                 db    ? ;
LOAD:000000000021C0BA                 db    ? ;
LOAD:000000000021C0BB                 db    ? ;
LOAD:000000000021C0BC                 db    ? ;
LOAD:000000000021C0BD                 db    ? ;
LOAD:000000000021C0BE                 db    ? ;
LOAD:000000000021C0BF                 db    ? ;
LOAD:000000000021C0BF LOAD            ends
LOAD:000000000021C0BF
.bss:000000000021C0C0 ; ===========================================================================
.bss:000000000021C0C0
.bss:000000000021C0C0 ; Segment type: Uninitialized
.bss:000000000021C0C0 ; Segment permissions: Read/Write
.bss:000000000021C0C0 _bss            segment align_32 public 'BSS' use64
.bss:000000000021C0C0                 assume cs:_bss
.bss:000000000021C0C0                 ;org 21C0C0h
.bss:000000000021C0C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000021C0C0                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:000000000021C0C0 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:000000000021C0C0                                         ; DATA XREF: LOAD:0000000000000E38↑o
.bss:000000000021C0C0                                         ; LOAD:0000000000000E98↑o ...
.bss:000000000021C0C0                                         ; Alternative name is '__progname'
.bss:000000000021C0C0                                         ; Copy of shared data
.bss:000000000021C0C8                 public stdout@@GLIBC_2_2_5
.bss:000000000021C0C8 ; FILE *stdout
.bss:000000000021C0C8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000E20↑o
.bss:000000000021C0C8                                         ; main+232↑r ...
.bss:000000000021C0C8                                         ; Alternative name is 'stdout'
.bss:000000000021C0C8                                         ; Copy of shared data
.bss:000000000021C0D0                 public stdin@@GLIBC_2_2_5
.bss:000000000021C0D0 ; FILE *stdin
.bss:000000000021C0D0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000E50↑o
.bss:000000000021C0D0                                         ; close_stdin+4↑r ...
.bss:000000000021C0D0                                         ; Alternative name is 'stdin'
.bss:000000000021C0D0                                         ; Copy of shared data
.bss:000000000021C0D8                 public optind@@GLIBC_2_2_5
.bss:000000000021C0D8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000EC8↑o
.bss:000000000021C0D8                                         ; main:loc_304D↑r
.bss:000000000021C0D8                                         ; Alternative name is 'optind'
.bss:000000000021C0D8                                         ; Copy of shared data
.bss:000000000021C0DC                 align 20h
.bss:000000000021C0E0                 public optarg@@GLIBC_2_2_5
.bss:000000000021C0E0 ; char *optarg
.bss:000000000021C0E0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000EE0↑o
.bss:000000000021C0E0                                         ; main+27E↑r ...
.bss:000000000021C0E0                                         ; Alternative name is 'optarg'
.bss:000000000021C0E0                                         ; Copy of shared data
.bss:000000000021C0E8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000021C0E8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000021C0E8                                         ; DATA XREF: LOAD:0000000000000E68↑o
.bss:000000000021C0E8                                         ; LOAD:0000000000000E80↑o ...
.bss:000000000021C0E8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000021C0E8                                         ; Copy of shared data
.bss:000000000021C0F0                 align 20h
.bss:000000000021C100                 public stderr@@GLIBC_2_2_5
.bss:000000000021C100 ; FILE *stderr
.bss:000000000021C100 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000EB0↑o
.bss:000000000021C100                                         ; usage+3D↑r ...
.bss:000000000021C100                                         ; Alternative name is 'stderr'
.bss:000000000021C100                                         ; Copy of shared data
.bss:000000000021C108 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000021C108                                         ; __do_global_dtors_aux+28↑w
.bss:000000000021C109                 align 10h
.bss:000000000021C110 dev_ino_buf_7162 db    ? ;              ; DATA XREF: do_move+53↑o
.bss:000000000021C111                 db    ? ;
.bss:000000000021C112                 db    ? ;
.bss:000000000021C113                 db    ? ;
.bss:000000000021C114                 db    ? ;
.bss:000000000021C115                 db    ? ;
.bss:000000000021C116                 db    ? ;
.bss:000000000021C117                 db    ? ;
.bss:000000000021C118                 db    ? ;
.bss:000000000021C119                 db    ? ;
.bss:000000000021C11A                 db    ? ;
.bss:000000000021C11B                 db    ? ;
.bss:000000000021C11C                 db    ? ;
.bss:000000000021C11D                 db    ? ;
.bss:000000000021C11E                 db    ? ;
.bss:000000000021C11F                 db    ? ;
.bss:000000000021C120 remove_trailing_slashes db ?            ; DATA XREF: main+1B6↑w
.bss:000000000021C120                                         ; movefile+11↑r
.bss:000000000021C121                 align 20h
.bss:000000000021C140 fallback_7572   db    ? ;               ; DATA XREF: write_zeros:loc_4C87↑o
.bss:000000000021C141                 db    ? ;
.bss:000000000021C142                 db    ? ;
.bss:000000000021C143                 db    ? ;
.bss:000000000021C144                 db    ? ;
.bss:000000000021C145                 db    ? ;
.bss:000000000021C146                 db    ? ;
.bss:000000000021C147                 db    ? ;
.bss:000000000021C148                 db    ? ;
.bss:000000000021C149                 db    ? ;
.bss:000000000021C14A                 db    ? ;
.bss:000000000021C14B                 db    ? ;
.bss:000000000021C14C                 db    ? ;
.bss:000000000021C14D                 db    ? ;
.bss:000000000021C14E                 db    ? ;
.bss:000000000021C14F                 db    ? ;
.bss:000000000021C150                 db    ? ;
.bss:000000000021C151                 db    ? ;
.bss:000000000021C152                 db    ? ;
.bss:000000000021C153                 db    ? ;
.bss:000000000021C154                 db    ? ;
.bss:000000000021C155                 db    ? ;
.bss:000000000021C156                 db    ? ;
.bss:000000000021C157                 db    ? ;
.bss:000000000021C158                 db    ? ;
.bss:000000000021C159                 db    ? ;
.bss:000000000021C15A                 db    ? ;
.bss:000000000021C15B                 db    ? ;
.bss:000000000021C15C                 db    ? ;
.bss:000000000021C15D                 db    ? ;
.bss:000000000021C15E                 db    ? ;
.bss:000000000021C15F                 db    ? ;
.bss:000000000021C160                 db    ? ;
.bss:000000000021C161                 db    ? ;
.bss:000000000021C162                 db    ? ;
.bss:000000000021C163                 db    ? ;
.bss:000000000021C164                 db    ? ;
.bss:000000000021C165                 db    ? ;
.bss:000000000021C166                 db    ? ;
.bss:000000000021C167                 db    ? ;
.bss:000000000021C168                 db    ? ;
.bss:000000000021C169                 db    ? ;
.bss:000000000021C16A                 db    ? ;
.bss:000000000021C16B                 db    ? ;
.bss:000000000021C16C                 db    ? ;
.bss:000000000021C16D                 db    ? ;
.bss:000000000021C16E                 db    ? ;
.bss:000000000021C16F                 db    ? ;
.bss:000000000021C170                 db    ? ;
.bss:000000000021C171                 db    ? ;
.bss:000000000021C172                 db    ? ;
.bss:000000000021C173                 db    ? ;
.bss:000000000021C174                 db    ? ;
.bss:000000000021C175                 db    ? ;
.bss:000000000021C176                 db    ? ;
.bss:000000000021C177                 db    ? ;
.bss:000000000021C178                 db    ? ;
.bss:000000000021C179                 db    ? ;
.bss:000000000021C17A                 db    ? ;
.bss:000000000021C17B                 db    ? ;
.bss:000000000021C17C                 db    ? ;
.bss:000000000021C17D                 db    ? ;
.bss:000000000021C17E                 db    ? ;
.bss:000000000021C17F                 db    ? ;
.bss:000000000021C180                 db    ? ;
.bss:000000000021C181                 db    ? ;
.bss:000000000021C182                 db    ? ;
.bss:000000000021C183                 db    ? ;
.bss:000000000021C184                 db    ? ;
.bss:000000000021C185                 db    ? ;
.bss:000000000021C186                 db    ? ;
.bss:000000000021C187                 db    ? ;
.bss:000000000021C188                 db    ? ;
.bss:000000000021C189                 db    ? ;
.bss:000000000021C18A                 db    ? ;
.bss:000000000021C18B                 db    ? ;
.bss:000000000021C18C                 db    ? ;
.bss:000000000021C18D                 db    ? ;
.bss:000000000021C18E                 db    ? ;
.bss:000000000021C18F                 db    ? ;
.bss:000000000021C190                 db    ? ;
.bss:000000000021C191                 db    ? ;
.bss:000000000021C192                 db    ? ;
.bss:000000000021C193                 db    ? ;
.bss:000000000021C194                 db    ? ;
.bss:000000000021C195                 db    ? ;
.bss:000000000021C196                 db    ? ;
.bss:000000000021C197                 db    ? ;
.bss:000000000021C198                 db    ? ;
.bss:000000000021C199                 db    ? ;
.bss:000000000021C19A                 db    ? ;
.bss:000000000021C19B                 db    ? ;
.bss:000000000021C19C                 db    ? ;
.bss:000000000021C19D                 db    ? ;
.bss:000000000021C19E                 db    ? ;
.bss:000000000021C19F                 db    ? ;
.bss:000000000021C1A0                 db    ? ;
.bss:000000000021C1A1                 db    ? ;
.bss:000000000021C1A2                 db    ? ;
.bss:000000000021C1A3                 db    ? ;
.bss:000000000021C1A4                 db    ? ;
.bss:000000000021C1A5                 db    ? ;
.bss:000000000021C1A6                 db    ? ;
.bss:000000000021C1A7                 db    ? ;
.bss:000000000021C1A8                 db    ? ;
.bss:000000000021C1A9                 db    ? ;
.bss:000000000021C1AA                 db    ? ;
.bss:000000000021C1AB                 db    ? ;
.bss:000000000021C1AC                 db    ? ;
.bss:000000000021C1AD                 db    ? ;
.bss:000000000021C1AE                 db    ? ;
.bss:000000000021C1AF                 db    ? ;
.bss:000000000021C1B0                 db    ? ;
.bss:000000000021C1B1                 db    ? ;
.bss:000000000021C1B2                 db    ? ;
.bss:000000000021C1B3                 db    ? ;
.bss:000000000021C1B4                 db    ? ;
.bss:000000000021C1B5                 db    ? ;
.bss:000000000021C1B6                 db    ? ;
.bss:000000000021C1B7                 db    ? ;
.bss:000000000021C1B8                 db    ? ;
.bss:000000000021C1B9                 db    ? ;
.bss:000000000021C1BA                 db    ? ;
.bss:000000000021C1BB                 db    ? ;
.bss:000000000021C1BC                 db    ? ;
.bss:000000000021C1BD                 db    ? ;
.bss:000000000021C1BE                 db    ? ;
.bss:000000000021C1BF                 db    ? ;
.bss:000000000021C1C0                 db    ? ;
.bss:000000000021C1C1                 db    ? ;
.bss:000000000021C1C2                 db    ? ;
.bss:000000000021C1C3                 db    ? ;
.bss:000000000021C1C4                 db    ? ;
.bss:000000000021C1C5                 db    ? ;
.bss:000000000021C1C6                 db    ? ;
.bss:000000000021C1C7                 db    ? ;
.bss:000000000021C1C8                 db    ? ;
.bss:000000000021C1C9                 db    ? ;
.bss:000000000021C1CA                 db    ? ;
.bss:000000000021C1CB                 db    ? ;
.bss:000000000021C1CC                 db    ? ;
.bss:000000000021C1CD                 db    ? ;
.bss:000000000021C1CE                 db    ? ;
.bss:000000000021C1CF                 db    ? ;
.bss:000000000021C1D0                 db    ? ;
.bss:000000000021C1D1                 db    ? ;
.bss:000000000021C1D2                 db    ? ;
.bss:000000000021C1D3                 db    ? ;
.bss:000000000021C1D4                 db    ? ;
.bss:000000000021C1D5                 db    ? ;
.bss:000000000021C1D6                 db    ? ;
.bss:000000000021C1D7                 db    ? ;
.bss:000000000021C1D8                 db    ? ;
.bss:000000000021C1D9                 db    ? ;
.bss:000000000021C1DA                 db    ? ;
.bss:000000000021C1DB                 db    ? ;
.bss:000000000021C1DC                 db    ? ;
.bss:000000000021C1DD                 db    ? ;
.bss:000000000021C1DE                 db    ? ;
.bss:000000000021C1DF                 db    ? ;
.bss:000000000021C1E0                 db    ? ;
.bss:000000000021C1E1                 db    ? ;
.bss:000000000021C1E2                 db    ? ;
.bss:000000000021C1E3                 db    ? ;
.bss:000000000021C1E4                 db    ? ;
.bss:000000000021C1E5                 db    ? ;
.bss:000000000021C1E6                 db    ? ;
.bss:000000000021C1E7                 db    ? ;
.bss:000000000021C1E8                 db    ? ;
.bss:000000000021C1E9                 db    ? ;
.bss:000000000021C1EA                 db    ? ;
.bss:000000000021C1EB                 db    ? ;
.bss:000000000021C1EC                 db    ? ;
.bss:000000000021C1ED                 db    ? ;
.bss:000000000021C1EE                 db    ? ;
.bss:000000000021C1EF                 db    ? ;
.bss:000000000021C1F0                 db    ? ;
.bss:000000000021C1F1                 db    ? ;
.bss:000000000021C1F2                 db    ? ;
.bss:000000000021C1F3                 db    ? ;
.bss:000000000021C1F4                 db    ? ;
.bss:000000000021C1F5                 db    ? ;
.bss:000000000021C1F6                 db    ? ;
.bss:000000000021C1F7                 db    ? ;
.bss:000000000021C1F8                 db    ? ;
.bss:000000000021C1F9                 db    ? ;
.bss:000000000021C1FA                 db    ? ;
.bss:000000000021C1FB                 db    ? ;
.bss:000000000021C1FC                 db    ? ;
.bss:000000000021C1FD                 db    ? ;
.bss:000000000021C1FE                 db    ? ;
.bss:000000000021C1FF                 db    ? ;
.bss:000000000021C200                 db    ? ;
.bss:000000000021C201                 db    ? ;
.bss:000000000021C202                 db    ? ;
.bss:000000000021C203                 db    ? ;
.bss:000000000021C204                 db    ? ;
.bss:000000000021C205                 db    ? ;
.bss:000000000021C206                 db    ? ;
.bss:000000000021C207                 db    ? ;
.bss:000000000021C208                 db    ? ;
.bss:000000000021C209                 db    ? ;
.bss:000000000021C20A                 db    ? ;
.bss:000000000021C20B                 db    ? ;
.bss:000000000021C20C                 db    ? ;
.bss:000000000021C20D                 db    ? ;
.bss:000000000021C20E                 db    ? ;
.bss:000000000021C20F                 db    ? ;
.bss:000000000021C210                 db    ? ;
.bss:000000000021C211                 db    ? ;
.bss:000000000021C212                 db    ? ;
.bss:000000000021C213                 db    ? ;
.bss:000000000021C214                 db    ? ;
.bss:000000000021C215                 db    ? ;
.bss:000000000021C216                 db    ? ;
.bss:000000000021C217                 db    ? ;
.bss:000000000021C218                 db    ? ;
.bss:000000000021C219                 db    ? ;
.bss:000000000021C21A                 db    ? ;
.bss:000000000021C21B                 db    ? ;
.bss:000000000021C21C                 db    ? ;
.bss:000000000021C21D                 db    ? ;
.bss:000000000021C21E                 db    ? ;
.bss:000000000021C21F                 db    ? ;
.bss:000000000021C220                 db    ? ;
.bss:000000000021C221                 db    ? ;
.bss:000000000021C222                 db    ? ;
.bss:000000000021C223                 db    ? ;
.bss:000000000021C224                 db    ? ;
.bss:000000000021C225                 db    ? ;
.bss:000000000021C226                 db    ? ;
.bss:000000000021C227                 db    ? ;
.bss:000000000021C228                 db    ? ;
.bss:000000000021C229                 db    ? ;
.bss:000000000021C22A                 db    ? ;
.bss:000000000021C22B                 db    ? ;
.bss:000000000021C22C                 db    ? ;
.bss:000000000021C22D                 db    ? ;
.bss:000000000021C22E                 db    ? ;
.bss:000000000021C22F                 db    ? ;
.bss:000000000021C230                 db    ? ;
.bss:000000000021C231                 db    ? ;
.bss:000000000021C232                 db    ? ;
.bss:000000000021C233                 db    ? ;
.bss:000000000021C234                 db    ? ;
.bss:000000000021C235                 db    ? ;
.bss:000000000021C236                 db    ? ;
.bss:000000000021C237                 db    ? ;
.bss:000000000021C238                 db    ? ;
.bss:000000000021C239                 db    ? ;
.bss:000000000021C23A                 db    ? ;
.bss:000000000021C23B                 db    ? ;
.bss:000000000021C23C                 db    ? ;
.bss:000000000021C23D                 db    ? ;
.bss:000000000021C23E                 db    ? ;
.bss:000000000021C23F                 db    ? ;
.bss:000000000021C240                 db    ? ;
.bss:000000000021C241                 db    ? ;
.bss:000000000021C242                 db    ? ;
.bss:000000000021C243                 db    ? ;
.bss:000000000021C244                 db    ? ;
.bss:000000000021C245                 db    ? ;
.bss:000000000021C246                 db    ? ;
.bss:000000000021C247                 db    ? ;
.bss:000000000021C248                 db    ? ;
.bss:000000000021C249                 db    ? ;
.bss:000000000021C24A                 db    ? ;
.bss:000000000021C24B                 db    ? ;
.bss:000000000021C24C                 db    ? ;
.bss:000000000021C24D                 db    ? ;
.bss:000000000021C24E                 db    ? ;
.bss:000000000021C24F                 db    ? ;
.bss:000000000021C250                 db    ? ;
.bss:000000000021C251                 db    ? ;
.bss:000000000021C252                 db    ? ;
.bss:000000000021C253                 db    ? ;
.bss:000000000021C254                 db    ? ;
.bss:000000000021C255                 db    ? ;
.bss:000000000021C256                 db    ? ;
.bss:000000000021C257                 db    ? ;
.bss:000000000021C258                 db    ? ;
.bss:000000000021C259                 db    ? ;
.bss:000000000021C25A                 db    ? ;
.bss:000000000021C25B                 db    ? ;
.bss:000000000021C25C                 db    ? ;
.bss:000000000021C25D                 db    ? ;
.bss:000000000021C25E                 db    ? ;
.bss:000000000021C25F                 db    ? ;
.bss:000000000021C260                 db    ? ;
.bss:000000000021C261                 db    ? ;
.bss:000000000021C262                 db    ? ;
.bss:000000000021C263                 db    ? ;
.bss:000000000021C264                 db    ? ;
.bss:000000000021C265                 db    ? ;
.bss:000000000021C266                 db    ? ;
.bss:000000000021C267                 db    ? ;
.bss:000000000021C268                 db    ? ;
.bss:000000000021C269                 db    ? ;
.bss:000000000021C26A                 db    ? ;
.bss:000000000021C26B                 db    ? ;
.bss:000000000021C26C                 db    ? ;
.bss:000000000021C26D                 db    ? ;
.bss:000000000021C26E                 db    ? ;
.bss:000000000021C26F                 db    ? ;
.bss:000000000021C270                 db    ? ;
.bss:000000000021C271                 db    ? ;
.bss:000000000021C272                 db    ? ;
.bss:000000000021C273                 db    ? ;
.bss:000000000021C274                 db    ? ;
.bss:000000000021C275                 db    ? ;
.bss:000000000021C276                 db    ? ;
.bss:000000000021C277                 db    ? ;
.bss:000000000021C278                 db    ? ;
.bss:000000000021C279                 db    ? ;
.bss:000000000021C27A                 db    ? ;
.bss:000000000021C27B                 db    ? ;
.bss:000000000021C27C                 db    ? ;
.bss:000000000021C27D                 db    ? ;
.bss:000000000021C27E                 db    ? ;
.bss:000000000021C27F                 db    ? ;
.bss:000000000021C280                 db    ? ;
.bss:000000000021C281                 db    ? ;
.bss:000000000021C282                 db    ? ;
.bss:000000000021C283                 db    ? ;
.bss:000000000021C284                 db    ? ;
.bss:000000000021C285                 db    ? ;
.bss:000000000021C286                 db    ? ;
.bss:000000000021C287                 db    ? ;
.bss:000000000021C288                 db    ? ;
.bss:000000000021C289                 db    ? ;
.bss:000000000021C28A                 db    ? ;
.bss:000000000021C28B                 db    ? ;
.bss:000000000021C28C                 db    ? ;
.bss:000000000021C28D                 db    ? ;
.bss:000000000021C28E                 db    ? ;
.bss:000000000021C28F                 db    ? ;
.bss:000000000021C290                 db    ? ;
.bss:000000000021C291                 db    ? ;
.bss:000000000021C292                 db    ? ;
.bss:000000000021C293                 db    ? ;
.bss:000000000021C294                 db    ? ;
.bss:000000000021C295                 db    ? ;
.bss:000000000021C296                 db    ? ;
.bss:000000000021C297                 db    ? ;
.bss:000000000021C298                 db    ? ;
.bss:000000000021C299                 db    ? ;
.bss:000000000021C29A                 db    ? ;
.bss:000000000021C29B                 db    ? ;
.bss:000000000021C29C                 db    ? ;
.bss:000000000021C29D                 db    ? ;
.bss:000000000021C29E                 db    ? ;
.bss:000000000021C29F                 db    ? ;
.bss:000000000021C2A0                 db    ? ;
.bss:000000000021C2A1                 db    ? ;
.bss:000000000021C2A2                 db    ? ;
.bss:000000000021C2A3                 db    ? ;
.bss:000000000021C2A4                 db    ? ;
.bss:000000000021C2A5                 db    ? ;
.bss:000000000021C2A6                 db    ? ;
.bss:000000000021C2A7                 db    ? ;
.bss:000000000021C2A8                 db    ? ;
.bss:000000000021C2A9                 db    ? ;
.bss:000000000021C2AA                 db    ? ;
.bss:000000000021C2AB                 db    ? ;
.bss:000000000021C2AC                 db    ? ;
.bss:000000000021C2AD                 db    ? ;
.bss:000000000021C2AE                 db    ? ;
.bss:000000000021C2AF                 db    ? ;
.bss:000000000021C2B0                 db    ? ;
.bss:000000000021C2B1                 db    ? ;
.bss:000000000021C2B2                 db    ? ;
.bss:000000000021C2B3                 db    ? ;
.bss:000000000021C2B4                 db    ? ;
.bss:000000000021C2B5                 db    ? ;
.bss:000000000021C2B6                 db    ? ;
.bss:000000000021C2B7                 db    ? ;
.bss:000000000021C2B8                 db    ? ;
.bss:000000000021C2B9                 db    ? ;
.bss:000000000021C2BA                 db    ? ;
.bss:000000000021C2BB                 db    ? ;
.bss:000000000021C2BC                 db    ? ;
.bss:000000000021C2BD                 db    ? ;
.bss:000000000021C2BE                 db    ? ;
.bss:000000000021C2BF                 db    ? ;
.bss:000000000021C2C0                 db    ? ;
.bss:000000000021C2C1                 db    ? ;
.bss:000000000021C2C2                 db    ? ;
.bss:000000000021C2C3                 db    ? ;
.bss:000000000021C2C4                 db    ? ;
.bss:000000000021C2C5                 db    ? ;
.bss:000000000021C2C6                 db    ? ;
.bss:000000000021C2C7                 db    ? ;
.bss:000000000021C2C8                 db    ? ;
.bss:000000000021C2C9                 db    ? ;
.bss:000000000021C2CA                 db    ? ;
.bss:000000000021C2CB                 db    ? ;
.bss:000000000021C2CC                 db    ? ;
.bss:000000000021C2CD                 db    ? ;
.bss:000000000021C2CE                 db    ? ;
.bss:000000000021C2CF                 db    ? ;
.bss:000000000021C2D0                 db    ? ;
.bss:000000000021C2D1                 db    ? ;
.bss:000000000021C2D2                 db    ? ;
.bss:000000000021C2D3                 db    ? ;
.bss:000000000021C2D4                 db    ? ;
.bss:000000000021C2D5                 db    ? ;
.bss:000000000021C2D6                 db    ? ;
.bss:000000000021C2D7                 db    ? ;
.bss:000000000021C2D8                 db    ? ;
.bss:000000000021C2D9                 db    ? ;
.bss:000000000021C2DA                 db    ? ;
.bss:000000000021C2DB                 db    ? ;
.bss:000000000021C2DC                 db    ? ;
.bss:000000000021C2DD                 db    ? ;
.bss:000000000021C2DE                 db    ? ;
.bss:000000000021C2DF                 db    ? ;
.bss:000000000021C2E0                 db    ? ;
.bss:000000000021C2E1                 db    ? ;
.bss:000000000021C2E2                 db    ? ;
.bss:000000000021C2E3                 db    ? ;
.bss:000000000021C2E4                 db    ? ;
.bss:000000000021C2E5                 db    ? ;
.bss:000000000021C2E6                 db    ? ;
.bss:000000000021C2E7                 db    ? ;
.bss:000000000021C2E8                 db    ? ;
.bss:000000000021C2E9                 db    ? ;
.bss:000000000021C2EA                 db    ? ;
.bss:000000000021C2EB                 db    ? ;
.bss:000000000021C2EC                 db    ? ;
.bss:000000000021C2ED                 db    ? ;
.bss:000000000021C2EE                 db    ? ;
.bss:000000000021C2EF                 db    ? ;
.bss:000000000021C2F0                 db    ? ;
.bss:000000000021C2F1                 db    ? ;
.bss:000000000021C2F2                 db    ? ;
.bss:000000000021C2F3                 db    ? ;
.bss:000000000021C2F4                 db    ? ;
.bss:000000000021C2F5                 db    ? ;
.bss:000000000021C2F6                 db    ? ;
.bss:000000000021C2F7                 db    ? ;
.bss:000000000021C2F8                 db    ? ;
.bss:000000000021C2F9                 db    ? ;
.bss:000000000021C2FA                 db    ? ;
.bss:000000000021C2FB                 db    ? ;
.bss:000000000021C2FC                 db    ? ;
.bss:000000000021C2FD                 db    ? ;
.bss:000000000021C2FE                 db    ? ;
.bss:000000000021C2FF                 db    ? ;
.bss:000000000021C300                 db    ? ;
.bss:000000000021C301                 db    ? ;
.bss:000000000021C302                 db    ? ;
.bss:000000000021C303                 db    ? ;
.bss:000000000021C304                 db    ? ;
.bss:000000000021C305                 db    ? ;
.bss:000000000021C306                 db    ? ;
.bss:000000000021C307                 db    ? ;
.bss:000000000021C308                 db    ? ;
.bss:000000000021C309                 db    ? ;
.bss:000000000021C30A                 db    ? ;
.bss:000000000021C30B                 db    ? ;
.bss:000000000021C30C                 db    ? ;
.bss:000000000021C30D                 db    ? ;
.bss:000000000021C30E                 db    ? ;
.bss:000000000021C30F                 db    ? ;
.bss:000000000021C310                 db    ? ;
.bss:000000000021C311                 db    ? ;
.bss:000000000021C312                 db    ? ;
.bss:000000000021C313                 db    ? ;
.bss:000000000021C314                 db    ? ;
.bss:000000000021C315                 db    ? ;
.bss:000000000021C316                 db    ? ;
.bss:000000000021C317                 db    ? ;
.bss:000000000021C318                 db    ? ;
.bss:000000000021C319                 db    ? ;
.bss:000000000021C31A                 db    ? ;
.bss:000000000021C31B                 db    ? ;
.bss:000000000021C31C                 db    ? ;
.bss:000000000021C31D                 db    ? ;
.bss:000000000021C31E                 db    ? ;
.bss:000000000021C31F                 db    ? ;
.bss:000000000021C320                 db    ? ;
.bss:000000000021C321                 db    ? ;
.bss:000000000021C322                 db    ? ;
.bss:000000000021C323                 db    ? ;
.bss:000000000021C324                 db    ? ;
.bss:000000000021C325                 db    ? ;
.bss:000000000021C326                 db    ? ;
.bss:000000000021C327                 db    ? ;
.bss:000000000021C328                 db    ? ;
.bss:000000000021C329                 db    ? ;
.bss:000000000021C32A                 db    ? ;
.bss:000000000021C32B                 db    ? ;
.bss:000000000021C32C                 db    ? ;
.bss:000000000021C32D                 db    ? ;
.bss:000000000021C32E                 db    ? ;
.bss:000000000021C32F                 db    ? ;
.bss:000000000021C330                 db    ? ;
.bss:000000000021C331                 db    ? ;
.bss:000000000021C332                 db    ? ;
.bss:000000000021C333                 db    ? ;
.bss:000000000021C334                 db    ? ;
.bss:000000000021C335                 db    ? ;
.bss:000000000021C336                 db    ? ;
.bss:000000000021C337                 db    ? ;
.bss:000000000021C338                 db    ? ;
.bss:000000000021C339                 db    ? ;
.bss:000000000021C33A                 db    ? ;
.bss:000000000021C33B                 db    ? ;
.bss:000000000021C33C                 db    ? ;
.bss:000000000021C33D                 db    ? ;
.bss:000000000021C33E                 db    ? ;
.bss:000000000021C33F                 db    ? ;
.bss:000000000021C340                 db    ? ;
.bss:000000000021C341                 db    ? ;
.bss:000000000021C342                 db    ? ;
.bss:000000000021C343                 db    ? ;
.bss:000000000021C344                 db    ? ;
.bss:000000000021C345                 db    ? ;
.bss:000000000021C346                 db    ? ;
.bss:000000000021C347                 db    ? ;
.bss:000000000021C348                 db    ? ;
.bss:000000000021C349                 db    ? ;
.bss:000000000021C34A                 db    ? ;
.bss:000000000021C34B                 db    ? ;
.bss:000000000021C34C                 db    ? ;
.bss:000000000021C34D                 db    ? ;
.bss:000000000021C34E                 db    ? ;
.bss:000000000021C34F                 db    ? ;
.bss:000000000021C350                 db    ? ;
.bss:000000000021C351                 db    ? ;
.bss:000000000021C352                 db    ? ;
.bss:000000000021C353                 db    ? ;
.bss:000000000021C354                 db    ? ;
.bss:000000000021C355                 db    ? ;
.bss:000000000021C356                 db    ? ;
.bss:000000000021C357                 db    ? ;
.bss:000000000021C358                 db    ? ;
.bss:000000000021C359                 db    ? ;
.bss:000000000021C35A                 db    ? ;
.bss:000000000021C35B                 db    ? ;
.bss:000000000021C35C                 db    ? ;
.bss:000000000021C35D                 db    ? ;
.bss:000000000021C35E                 db    ? ;
.bss:000000000021C35F                 db    ? ;
.bss:000000000021C360                 db    ? ;
.bss:000000000021C361                 db    ? ;
.bss:000000000021C362                 db    ? ;
.bss:000000000021C363                 db    ? ;
.bss:000000000021C364                 db    ? ;
.bss:000000000021C365                 db    ? ;
.bss:000000000021C366                 db    ? ;
.bss:000000000021C367                 db    ? ;
.bss:000000000021C368                 db    ? ;
.bss:000000000021C369                 db    ? ;
.bss:000000000021C36A                 db    ? ;
.bss:000000000021C36B                 db    ? ;
.bss:000000000021C36C                 db    ? ;
.bss:000000000021C36D                 db    ? ;
.bss:000000000021C36E                 db    ? ;
.bss:000000000021C36F                 db    ? ;
.bss:000000000021C370                 db    ? ;
.bss:000000000021C371                 db    ? ;
.bss:000000000021C372                 db    ? ;
.bss:000000000021C373                 db    ? ;
.bss:000000000021C374                 db    ? ;
.bss:000000000021C375                 db    ? ;
.bss:000000000021C376                 db    ? ;
.bss:000000000021C377                 db    ? ;
.bss:000000000021C378                 db    ? ;
.bss:000000000021C379                 db    ? ;
.bss:000000000021C37A                 db    ? ;
.bss:000000000021C37B                 db    ? ;
.bss:000000000021C37C                 db    ? ;
.bss:000000000021C37D                 db    ? ;
.bss:000000000021C37E                 db    ? ;
.bss:000000000021C37F                 db    ? ;
.bss:000000000021C380                 db    ? ;
.bss:000000000021C381                 db    ? ;
.bss:000000000021C382                 db    ? ;
.bss:000000000021C383                 db    ? ;
.bss:000000000021C384                 db    ? ;
.bss:000000000021C385                 db    ? ;
.bss:000000000021C386                 db    ? ;
.bss:000000000021C387                 db    ? ;
.bss:000000000021C388                 db    ? ;
.bss:000000000021C389                 db    ? ;
.bss:000000000021C38A                 db    ? ;
.bss:000000000021C38B                 db    ? ;
.bss:000000000021C38C                 db    ? ;
.bss:000000000021C38D                 db    ? ;
.bss:000000000021C38E                 db    ? ;
.bss:000000000021C38F                 db    ? ;
.bss:000000000021C390                 db    ? ;
.bss:000000000021C391                 db    ? ;
.bss:000000000021C392                 db    ? ;
.bss:000000000021C393                 db    ? ;
.bss:000000000021C394                 db    ? ;
.bss:000000000021C395                 db    ? ;
.bss:000000000021C396                 db    ? ;
.bss:000000000021C397                 db    ? ;
.bss:000000000021C398                 db    ? ;
.bss:000000000021C399                 db    ? ;
.bss:000000000021C39A                 db    ? ;
.bss:000000000021C39B                 db    ? ;
.bss:000000000021C39C                 db    ? ;
.bss:000000000021C39D                 db    ? ;
.bss:000000000021C39E                 db    ? ;
.bss:000000000021C39F                 db    ? ;
.bss:000000000021C3A0                 db    ? ;
.bss:000000000021C3A1                 db    ? ;
.bss:000000000021C3A2                 db    ? ;
.bss:000000000021C3A3                 db    ? ;
.bss:000000000021C3A4                 db    ? ;
.bss:000000000021C3A5                 db    ? ;
.bss:000000000021C3A6                 db    ? ;
.bss:000000000021C3A7                 db    ? ;
.bss:000000000021C3A8                 db    ? ;
.bss:000000000021C3A9                 db    ? ;
.bss:000000000021C3AA                 db    ? ;
.bss:000000000021C3AB                 db    ? ;
.bss:000000000021C3AC                 db    ? ;
.bss:000000000021C3AD                 db    ? ;
.bss:000000000021C3AE                 db    ? ;
.bss:000000000021C3AF                 db    ? ;
.bss:000000000021C3B0                 db    ? ;
.bss:000000000021C3B1                 db    ? ;
.bss:000000000021C3B2                 db    ? ;
.bss:000000000021C3B3                 db    ? ;
.bss:000000000021C3B4                 db    ? ;
.bss:000000000021C3B5                 db    ? ;
.bss:000000000021C3B6                 db    ? ;
.bss:000000000021C3B7                 db    ? ;
.bss:000000000021C3B8                 db    ? ;
.bss:000000000021C3B9                 db    ? ;
.bss:000000000021C3BA                 db    ? ;
.bss:000000000021C3BB                 db    ? ;
.bss:000000000021C3BC                 db    ? ;
.bss:000000000021C3BD                 db    ? ;
.bss:000000000021C3BE                 db    ? ;
.bss:000000000021C3BF                 db    ? ;
.bss:000000000021C3C0                 db    ? ;
.bss:000000000021C3C1                 db    ? ;
.bss:000000000021C3C2                 db    ? ;
.bss:000000000021C3C3                 db    ? ;
.bss:000000000021C3C4                 db    ? ;
.bss:000000000021C3C5                 db    ? ;
.bss:000000000021C3C6                 db    ? ;
.bss:000000000021C3C7                 db    ? ;
.bss:000000000021C3C8                 db    ? ;
.bss:000000000021C3C9                 db    ? ;
.bss:000000000021C3CA                 db    ? ;
.bss:000000000021C3CB                 db    ? ;
.bss:000000000021C3CC                 db    ? ;
.bss:000000000021C3CD                 db    ? ;
.bss:000000000021C3CE                 db    ? ;
.bss:000000000021C3CF                 db    ? ;
.bss:000000000021C3D0                 db    ? ;
.bss:000000000021C3D1                 db    ? ;
.bss:000000000021C3D2                 db    ? ;
.bss:000000000021C3D3                 db    ? ;
.bss:000000000021C3D4                 db    ? ;
.bss:000000000021C3D5                 db    ? ;
.bss:000000000021C3D6                 db    ? ;
.bss:000000000021C3D7                 db    ? ;
.bss:000000000021C3D8                 db    ? ;
.bss:000000000021C3D9                 db    ? ;
.bss:000000000021C3DA                 db    ? ;
.bss:000000000021C3DB                 db    ? ;
.bss:000000000021C3DC                 db    ? ;
.bss:000000000021C3DD                 db    ? ;
.bss:000000000021C3DE                 db    ? ;
.bss:000000000021C3DF                 db    ? ;
.bss:000000000021C3E0                 db    ? ;
.bss:000000000021C3E1                 db    ? ;
.bss:000000000021C3E2                 db    ? ;
.bss:000000000021C3E3                 db    ? ;
.bss:000000000021C3E4                 db    ? ;
.bss:000000000021C3E5                 db    ? ;
.bss:000000000021C3E6                 db    ? ;
.bss:000000000021C3E7                 db    ? ;
.bss:000000000021C3E8                 db    ? ;
.bss:000000000021C3E9                 db    ? ;
.bss:000000000021C3EA                 db    ? ;
.bss:000000000021C3EB                 db    ? ;
.bss:000000000021C3EC                 db    ? ;
.bss:000000000021C3ED                 db    ? ;
.bss:000000000021C3EE                 db    ? ;
.bss:000000000021C3EF                 db    ? ;
.bss:000000000021C3F0                 db    ? ;
.bss:000000000021C3F1                 db    ? ;
.bss:000000000021C3F2                 db    ? ;
.bss:000000000021C3F3                 db    ? ;
.bss:000000000021C3F4                 db    ? ;
.bss:000000000021C3F5                 db    ? ;
.bss:000000000021C3F6                 db    ? ;
.bss:000000000021C3F7                 db    ? ;
.bss:000000000021C3F8                 db    ? ;
.bss:000000000021C3F9                 db    ? ;
.bss:000000000021C3FA                 db    ? ;
.bss:000000000021C3FB                 db    ? ;
.bss:000000000021C3FC                 db    ? ;
.bss:000000000021C3FD                 db    ? ;
.bss:000000000021C3FE                 db    ? ;
.bss:000000000021C3FF                 db    ? ;
.bss:000000000021C400                 db    ? ;
.bss:000000000021C401                 db    ? ;
.bss:000000000021C402                 db    ? ;
.bss:000000000021C403                 db    ? ;
.bss:000000000021C404                 db    ? ;
.bss:000000000021C405                 db    ? ;
.bss:000000000021C406                 db    ? ;
.bss:000000000021C407                 db    ? ;
.bss:000000000021C408                 db    ? ;
.bss:000000000021C409                 db    ? ;
.bss:000000000021C40A                 db    ? ;
.bss:000000000021C40B                 db    ? ;
.bss:000000000021C40C                 db    ? ;
.bss:000000000021C40D                 db    ? ;
.bss:000000000021C40E                 db    ? ;
.bss:000000000021C40F                 db    ? ;
.bss:000000000021C410                 db    ? ;
.bss:000000000021C411                 db    ? ;
.bss:000000000021C412                 db    ? ;
.bss:000000000021C413                 db    ? ;
.bss:000000000021C414                 db    ? ;
.bss:000000000021C415                 db    ? ;
.bss:000000000021C416                 db    ? ;
.bss:000000000021C417                 db    ? ;
.bss:000000000021C418                 db    ? ;
.bss:000000000021C419                 db    ? ;
.bss:000000000021C41A                 db    ? ;
.bss:000000000021C41B                 db    ? ;
.bss:000000000021C41C                 db    ? ;
.bss:000000000021C41D                 db    ? ;
.bss:000000000021C41E                 db    ? ;
.bss:000000000021C41F                 db    ? ;
.bss:000000000021C420                 db    ? ;
.bss:000000000021C421                 db    ? ;
.bss:000000000021C422                 db    ? ;
.bss:000000000021C423                 db    ? ;
.bss:000000000021C424                 db    ? ;
.bss:000000000021C425                 db    ? ;
.bss:000000000021C426                 db    ? ;
.bss:000000000021C427                 db    ? ;
.bss:000000000021C428                 db    ? ;
.bss:000000000021C429                 db    ? ;
.bss:000000000021C42A                 db    ? ;
.bss:000000000021C42B                 db    ? ;
.bss:000000000021C42C                 db    ? ;
.bss:000000000021C42D                 db    ? ;
.bss:000000000021C42E                 db    ? ;
.bss:000000000021C42F                 db    ? ;
.bss:000000000021C430                 db    ? ;
.bss:000000000021C431                 db    ? ;
.bss:000000000021C432                 db    ? ;
.bss:000000000021C433                 db    ? ;
.bss:000000000021C434                 db    ? ;
.bss:000000000021C435                 db    ? ;
.bss:000000000021C436                 db    ? ;
.bss:000000000021C437                 db    ? ;
.bss:000000000021C438                 db    ? ;
.bss:000000000021C439                 db    ? ;
.bss:000000000021C43A                 db    ? ;
.bss:000000000021C43B                 db    ? ;
.bss:000000000021C43C                 db    ? ;
.bss:000000000021C43D                 db    ? ;
.bss:000000000021C43E                 db    ? ;
.bss:000000000021C43F                 db    ? ;
.bss:000000000021C440                 db    ? ;
.bss:000000000021C441                 db    ? ;
.bss:000000000021C442                 db    ? ;
.bss:000000000021C443                 db    ? ;
.bss:000000000021C444                 db    ? ;
.bss:000000000021C445                 db    ? ;
.bss:000000000021C446                 db    ? ;
.bss:000000000021C447                 db    ? ;
.bss:000000000021C448                 db    ? ;
.bss:000000000021C449                 db    ? ;
.bss:000000000021C44A                 db    ? ;
.bss:000000000021C44B                 db    ? ;
.bss:000000000021C44C                 db    ? ;
.bss:000000000021C44D                 db    ? ;
.bss:000000000021C44E                 db    ? ;
.bss:000000000021C44F                 db    ? ;
.bss:000000000021C450                 db    ? ;
.bss:000000000021C451                 db    ? ;
.bss:000000000021C452                 db    ? ;
.bss:000000000021C453                 db    ? ;
.bss:000000000021C454                 db    ? ;
.bss:000000000021C455                 db    ? ;
.bss:000000000021C456                 db    ? ;
.bss:000000000021C457                 db    ? ;
.bss:000000000021C458                 db    ? ;
.bss:000000000021C459                 db    ? ;
.bss:000000000021C45A                 db    ? ;
.bss:000000000021C45B                 db    ? ;
.bss:000000000021C45C                 db    ? ;
.bss:000000000021C45D                 db    ? ;
.bss:000000000021C45E                 db    ? ;
.bss:000000000021C45F                 db    ? ;
.bss:000000000021C460                 db    ? ;
.bss:000000000021C461                 db    ? ;
.bss:000000000021C462                 db    ? ;
.bss:000000000021C463                 db    ? ;
.bss:000000000021C464                 db    ? ;
.bss:000000000021C465                 db    ? ;
.bss:000000000021C466                 db    ? ;
.bss:000000000021C467                 db    ? ;
.bss:000000000021C468                 db    ? ;
.bss:000000000021C469                 db    ? ;
.bss:000000000021C46A                 db    ? ;
.bss:000000000021C46B                 db    ? ;
.bss:000000000021C46C                 db    ? ;
.bss:000000000021C46D                 db    ? ;
.bss:000000000021C46E                 db    ? ;
.bss:000000000021C46F                 db    ? ;
.bss:000000000021C470                 db    ? ;
.bss:000000000021C471                 db    ? ;
.bss:000000000021C472                 db    ? ;
.bss:000000000021C473                 db    ? ;
.bss:000000000021C474                 db    ? ;
.bss:000000000021C475                 db    ? ;
.bss:000000000021C476                 db    ? ;
.bss:000000000021C477                 db    ? ;
.bss:000000000021C478                 db    ? ;
.bss:000000000021C479                 db    ? ;
.bss:000000000021C47A                 db    ? ;
.bss:000000000021C47B                 db    ? ;
.bss:000000000021C47C                 db    ? ;
.bss:000000000021C47D                 db    ? ;
.bss:000000000021C47E                 db    ? ;
.bss:000000000021C47F                 db    ? ;
.bss:000000000021C480                 db    ? ;
.bss:000000000021C481                 db    ? ;
.bss:000000000021C482                 db    ? ;
.bss:000000000021C483                 db    ? ;
.bss:000000000021C484                 db    ? ;
.bss:000000000021C485                 db    ? ;
.bss:000000000021C486                 db    ? ;
.bss:000000000021C487                 db    ? ;
.bss:000000000021C488                 db    ? ;
.bss:000000000021C489                 db    ? ;
.bss:000000000021C48A                 db    ? ;
.bss:000000000021C48B                 db    ? ;
.bss:000000000021C48C                 db    ? ;
.bss:000000000021C48D                 db    ? ;
.bss:000000000021C48E                 db    ? ;
.bss:000000000021C48F                 db    ? ;
.bss:000000000021C490                 db    ? ;
.bss:000000000021C491                 db    ? ;
.bss:000000000021C492                 db    ? ;
.bss:000000000021C493                 db    ? ;
.bss:000000000021C494                 db    ? ;
.bss:000000000021C495                 db    ? ;
.bss:000000000021C496                 db    ? ;
.bss:000000000021C497                 db    ? ;
.bss:000000000021C498                 db    ? ;
.bss:000000000021C499                 db    ? ;
.bss:000000000021C49A                 db    ? ;
.bss:000000000021C49B                 db    ? ;
.bss:000000000021C49C                 db    ? ;
.bss:000000000021C49D                 db    ? ;
.bss:000000000021C49E                 db    ? ;
.bss:000000000021C49F                 db    ? ;
.bss:000000000021C4A0                 db    ? ;
.bss:000000000021C4A1                 db    ? ;
.bss:000000000021C4A2                 db    ? ;
.bss:000000000021C4A3                 db    ? ;
.bss:000000000021C4A4                 db    ? ;
.bss:000000000021C4A5                 db    ? ;
.bss:000000000021C4A6                 db    ? ;
.bss:000000000021C4A7                 db    ? ;
.bss:000000000021C4A8                 db    ? ;
.bss:000000000021C4A9                 db    ? ;
.bss:000000000021C4AA                 db    ? ;
.bss:000000000021C4AB                 db    ? ;
.bss:000000000021C4AC                 db    ? ;
.bss:000000000021C4AD                 db    ? ;
.bss:000000000021C4AE                 db    ? ;
.bss:000000000021C4AF                 db    ? ;
.bss:000000000021C4B0                 db    ? ;
.bss:000000000021C4B1                 db    ? ;
.bss:000000000021C4B2                 db    ? ;
.bss:000000000021C4B3                 db    ? ;
.bss:000000000021C4B4                 db    ? ;
.bss:000000000021C4B5                 db    ? ;
.bss:000000000021C4B6                 db    ? ;
.bss:000000000021C4B7                 db    ? ;
.bss:000000000021C4B8                 db    ? ;
.bss:000000000021C4B9                 db    ? ;
.bss:000000000021C4BA                 db    ? ;
.bss:000000000021C4BB                 db    ? ;
.bss:000000000021C4BC                 db    ? ;
.bss:000000000021C4BD                 db    ? ;
.bss:000000000021C4BE                 db    ? ;
.bss:000000000021C4BF                 db    ? ;
.bss:000000000021C4C0                 db    ? ;
.bss:000000000021C4C1                 db    ? ;
.bss:000000000021C4C2                 db    ? ;
.bss:000000000021C4C3                 db    ? ;
.bss:000000000021C4C4                 db    ? ;
.bss:000000000021C4C5                 db    ? ;
.bss:000000000021C4C6                 db    ? ;
.bss:000000000021C4C7                 db    ? ;
.bss:000000000021C4C8                 db    ? ;
.bss:000000000021C4C9                 db    ? ;
.bss:000000000021C4CA                 db    ? ;
.bss:000000000021C4CB                 db    ? ;
.bss:000000000021C4CC                 db    ? ;
.bss:000000000021C4CD                 db    ? ;
.bss:000000000021C4CE                 db    ? ;
.bss:000000000021C4CF                 db    ? ;
.bss:000000000021C4D0                 db    ? ;
.bss:000000000021C4D1                 db    ? ;
.bss:000000000021C4D2                 db    ? ;
.bss:000000000021C4D3                 db    ? ;
.bss:000000000021C4D4                 db    ? ;
.bss:000000000021C4D5                 db    ? ;
.bss:000000000021C4D6                 db    ? ;
.bss:000000000021C4D7                 db    ? ;
.bss:000000000021C4D8                 db    ? ;
.bss:000000000021C4D9                 db    ? ;
.bss:000000000021C4DA                 db    ? ;
.bss:000000000021C4DB                 db    ? ;
.bss:000000000021C4DC                 db    ? ;
.bss:000000000021C4DD                 db    ? ;
.bss:000000000021C4DE                 db    ? ;
.bss:000000000021C4DF                 db    ? ;
.bss:000000000021C4E0                 db    ? ;
.bss:000000000021C4E1                 db    ? ;
.bss:000000000021C4E2                 db    ? ;
.bss:000000000021C4E3                 db    ? ;
.bss:000000000021C4E4                 db    ? ;
.bss:000000000021C4E5                 db    ? ;
.bss:000000000021C4E6                 db    ? ;
.bss:000000000021C4E7                 db    ? ;
.bss:000000000021C4E8                 db    ? ;
.bss:000000000021C4E9                 db    ? ;
.bss:000000000021C4EA                 db    ? ;
.bss:000000000021C4EB                 db    ? ;
.bss:000000000021C4EC                 db    ? ;
.bss:000000000021C4ED                 db    ? ;
.bss:000000000021C4EE                 db    ? ;
.bss:000000000021C4EF                 db    ? ;
.bss:000000000021C4F0                 db    ? ;
.bss:000000000021C4F1                 db    ? ;
.bss:000000000021C4F2                 db    ? ;
.bss:000000000021C4F3                 db    ? ;
.bss:000000000021C4F4                 db    ? ;
.bss:000000000021C4F5                 db    ? ;
.bss:000000000021C4F6                 db    ? ;
.bss:000000000021C4F7                 db    ? ;
.bss:000000000021C4F8                 db    ? ;
.bss:000000000021C4F9                 db    ? ;
.bss:000000000021C4FA                 db    ? ;
.bss:000000000021C4FB                 db    ? ;
.bss:000000000021C4FC                 db    ? ;
.bss:000000000021C4FD                 db    ? ;
.bss:000000000021C4FE                 db    ? ;
.bss:000000000021C4FF                 db    ? ;
.bss:000000000021C500                 db    ? ;
.bss:000000000021C501                 db    ? ;
.bss:000000000021C502                 db    ? ;
.bss:000000000021C503                 db    ? ;
.bss:000000000021C504                 db    ? ;
.bss:000000000021C505                 db    ? ;
.bss:000000000021C506                 db    ? ;
.bss:000000000021C507                 db    ? ;
.bss:000000000021C508                 db    ? ;
.bss:000000000021C509                 db    ? ;
.bss:000000000021C50A                 db    ? ;
.bss:000000000021C50B                 db    ? ;
.bss:000000000021C50C                 db    ? ;
.bss:000000000021C50D                 db    ? ;
.bss:000000000021C50E                 db    ? ;
.bss:000000000021C50F                 db    ? ;
.bss:000000000021C510                 db    ? ;
.bss:000000000021C511                 db    ? ;
.bss:000000000021C512                 db    ? ;
.bss:000000000021C513                 db    ? ;
.bss:000000000021C514                 db    ? ;
.bss:000000000021C515                 db    ? ;
.bss:000000000021C516                 db    ? ;
.bss:000000000021C517                 db    ? ;
.bss:000000000021C518                 db    ? ;
.bss:000000000021C519                 db    ? ;
.bss:000000000021C51A                 db    ? ;
.bss:000000000021C51B                 db    ? ;
.bss:000000000021C51C                 db    ? ;
.bss:000000000021C51D                 db    ? ;
.bss:000000000021C51E                 db    ? ;
.bss:000000000021C51F                 db    ? ;
.bss:000000000021C520                 db    ? ;
.bss:000000000021C521                 db    ? ;
.bss:000000000021C522                 db    ? ;
.bss:000000000021C523                 db    ? ;
.bss:000000000021C524                 db    ? ;
.bss:000000000021C525                 db    ? ;
.bss:000000000021C526                 db    ? ;
.bss:000000000021C527                 db    ? ;
.bss:000000000021C528                 db    ? ;
.bss:000000000021C529                 db    ? ;
.bss:000000000021C52A                 db    ? ;
.bss:000000000021C52B                 db    ? ;
.bss:000000000021C52C                 db    ? ;
.bss:000000000021C52D                 db    ? ;
.bss:000000000021C52E                 db    ? ;
.bss:000000000021C52F                 db    ? ;
.bss:000000000021C530                 db    ? ;
.bss:000000000021C531                 db    ? ;
.bss:000000000021C532                 db    ? ;
.bss:000000000021C533                 db    ? ;
.bss:000000000021C534                 db    ? ;
.bss:000000000021C535                 db    ? ;
.bss:000000000021C536                 db    ? ;
.bss:000000000021C537                 db    ? ;
.bss:000000000021C538                 db    ? ;
.bss:000000000021C539                 db    ? ;
.bss:000000000021C53A                 db    ? ;
.bss:000000000021C53B                 db    ? ;
.bss:000000000021C53C                 db    ? ;
.bss:000000000021C53D                 db    ? ;
.bss:000000000021C53E                 db    ? ;
.bss:000000000021C53F                 db    ? ;
.bss:000000000021C540 ; void *zeros_7570
.bss:000000000021C540 zeros_7570      dq ?                    ; DATA XREF: write_zeros↑r
.bss:000000000021C540                                         ; write_zeros+2F↑r ...
.bss:000000000021C548 top_level_dst_name dq ?                 ; DATA XREF: copy_internal+10A6↑r
.bss:000000000021C548                                         ; copy_internal:loc_72F0↑r ...
.bss:000000000021C550 top_level_src_name dq ?                 ; DATA XREF: copy_internal+10BC↑r
.bss:000000000021C550                                         ; copy_internal+19C6↑r ...
.bss:000000000021C558 ; void *src_to_dest
.bss:000000000021C558 src_to_dest     dq ?                    ; DATA XREF: forget_created+9↑r
.bss:000000000021C558                                         ; src_to_dest_lookup+8↑r ...
.bss:000000000021C560                 public simple_backup_suffix
.bss:000000000021C560 ; char *simple_backup_suffix
.bss:000000000021C560 simple_backup_suffix dq ?               ; DATA XREF: copy_internal+D94↑r
.bss:000000000021C560                                         ; copy_internal+288B↑r ...
.bss:000000000021C568 file_name       dq ?                    ; DATA XREF: close_stdin_set_file_name↑w
.bss:000000000021C568                                         ; close_stdin+6B↑r
.bss:000000000021C570 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000021C570                                         ; close_stdout+1B↑r
.bss:000000000021C571                 align 8
.bss:000000000021C578 file_name_0     dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000021C578                                         ; close_stdout+56↑r
.bss:000000000021C580                 public program_name
.bss:000000000021C580 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000021C580                                         ; prompt+1D2↑r ...
.bss:000000000021C588                 align 20h
.bss:000000000021C5A0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000021C5A0                                         ; quotearg_free+46↑o ...
.bss:000000000021C5A1                 db    ? ;
.bss:000000000021C5A2                 db    ? ;
.bss:000000000021C5A3                 db    ? ;
.bss:000000000021C5A4                 db    ? ;
.bss:000000000021C5A5                 db    ? ;
.bss:000000000021C5A6                 db    ? ;
.bss:000000000021C5A7                 db    ? ;
.bss:000000000021C5A8                 db    ? ;
.bss:000000000021C5A9                 db    ? ;
.bss:000000000021C5AA                 db    ? ;
.bss:000000000021C5AB                 db    ? ;
.bss:000000000021C5AC                 db    ? ;
.bss:000000000021C5AD                 db    ? ;
.bss:000000000021C5AE                 db    ? ;
.bss:000000000021C5AF                 db    ? ;
.bss:000000000021C5B0                 db    ? ;
.bss:000000000021C5B1                 db    ? ;
.bss:000000000021C5B2                 db    ? ;
.bss:000000000021C5B3                 db    ? ;
.bss:000000000021C5B4                 db    ? ;
.bss:000000000021C5B5                 db    ? ;
.bss:000000000021C5B6                 db    ? ;
.bss:000000000021C5B7                 db    ? ;
.bss:000000000021C5B8                 db    ? ;
.bss:000000000021C5B9                 db    ? ;
.bss:000000000021C5BA                 db    ? ;
.bss:000000000021C5BB                 db    ? ;
.bss:000000000021C5BC                 db    ? ;
.bss:000000000021C5BD                 db    ? ;
.bss:000000000021C5BE                 db    ? ;
.bss:000000000021C5BF                 db    ? ;
.bss:000000000021C5C0                 db    ? ;
.bss:000000000021C5C1                 db    ? ;
.bss:000000000021C5C2                 db    ? ;
.bss:000000000021C5C3                 db    ? ;
.bss:000000000021C5C4                 db    ? ;
.bss:000000000021C5C5                 db    ? ;
.bss:000000000021C5C6                 db    ? ;
.bss:000000000021C5C7                 db    ? ;
.bss:000000000021C5C8                 db    ? ;
.bss:000000000021C5C9                 db    ? ;
.bss:000000000021C5CA                 db    ? ;
.bss:000000000021C5CB                 db    ? ;
.bss:000000000021C5CC                 db    ? ;
.bss:000000000021C5CD                 db    ? ;
.bss:000000000021C5CE                 db    ? ;
.bss:000000000021C5CF                 db    ? ;
.bss:000000000021C5D0                 db    ? ;
.bss:000000000021C5D1                 db    ? ;
.bss:000000000021C5D2                 db    ? ;
.bss:000000000021C5D3                 db    ? ;
.bss:000000000021C5D4                 db    ? ;
.bss:000000000021C5D5                 db    ? ;
.bss:000000000021C5D6                 db    ? ;
.bss:000000000021C5D7                 db    ? ;
.bss:000000000021C5D8                 db    ? ;
.bss:000000000021C5D9                 db    ? ;
.bss:000000000021C5DA                 db    ? ;
.bss:000000000021C5DB                 db    ? ;
.bss:000000000021C5DC                 db    ? ;
.bss:000000000021C5DD                 db    ? ;
.bss:000000000021C5DE                 db    ? ;
.bss:000000000021C5DF                 db    ? ;
.bss:000000000021C5E0                 db    ? ;
.bss:000000000021C5E1                 db    ? ;
.bss:000000000021C5E2                 db    ? ;
.bss:000000000021C5E3                 db    ? ;
.bss:000000000021C5E4                 db    ? ;
.bss:000000000021C5E5                 db    ? ;
.bss:000000000021C5E6                 db    ? ;
.bss:000000000021C5E7                 db    ? ;
.bss:000000000021C5E8                 db    ? ;
.bss:000000000021C5E9                 db    ? ;
.bss:000000000021C5EA                 db    ? ;
.bss:000000000021C5EB                 db    ? ;
.bss:000000000021C5EC                 db    ? ;
.bss:000000000021C5ED                 db    ? ;
.bss:000000000021C5EE                 db    ? ;
.bss:000000000021C5EF                 db    ? ;
.bss:000000000021C5F0                 db    ? ;
.bss:000000000021C5F1                 db    ? ;
.bss:000000000021C5F2                 db    ? ;
.bss:000000000021C5F3                 db    ? ;
.bss:000000000021C5F4                 db    ? ;
.bss:000000000021C5F5                 db    ? ;
.bss:000000000021C5F6                 db    ? ;
.bss:000000000021C5F7                 db    ? ;
.bss:000000000021C5F8                 db    ? ;
.bss:000000000021C5F9                 db    ? ;
.bss:000000000021C5FA                 db    ? ;
.bss:000000000021C5FB                 db    ? ;
.bss:000000000021C5FC                 db    ? ;
.bss:000000000021C5FD                 db    ? ;
.bss:000000000021C5FE                 db    ? ;
.bss:000000000021C5FF                 db    ? ;
.bss:000000000021C600                 db    ? ;
.bss:000000000021C601                 db    ? ;
.bss:000000000021C602                 db    ? ;
.bss:000000000021C603                 db    ? ;
.bss:000000000021C604                 db    ? ;
.bss:000000000021C605                 db    ? ;
.bss:000000000021C606                 db    ? ;
.bss:000000000021C607                 db    ? ;
.bss:000000000021C608                 db    ? ;
.bss:000000000021C609                 db    ? ;
.bss:000000000021C60A                 db    ? ;
.bss:000000000021C60B                 db    ? ;
.bss:000000000021C60C                 db    ? ;
.bss:000000000021C60D                 db    ? ;
.bss:000000000021C60E                 db    ? ;
.bss:000000000021C60F                 db    ? ;
.bss:000000000021C610                 db    ? ;
.bss:000000000021C611                 db    ? ;
.bss:000000000021C612                 db    ? ;
.bss:000000000021C613                 db    ? ;
.bss:000000000021C614                 db    ? ;
.bss:000000000021C615                 db    ? ;
.bss:000000000021C616                 db    ? ;
.bss:000000000021C617                 db    ? ;
.bss:000000000021C618                 db    ? ;
.bss:000000000021C619                 db    ? ;
.bss:000000000021C61A                 db    ? ;
.bss:000000000021C61B                 db    ? ;
.bss:000000000021C61C                 db    ? ;
.bss:000000000021C61D                 db    ? ;
.bss:000000000021C61E                 db    ? ;
.bss:000000000021C61F                 db    ? ;
.bss:000000000021C620                 db    ? ;
.bss:000000000021C621                 db    ? ;
.bss:000000000021C622                 db    ? ;
.bss:000000000021C623                 db    ? ;
.bss:000000000021C624                 db    ? ;
.bss:000000000021C625                 db    ? ;
.bss:000000000021C626                 db    ? ;
.bss:000000000021C627                 db    ? ;
.bss:000000000021C628                 db    ? ;
.bss:000000000021C629                 db    ? ;
.bss:000000000021C62A                 db    ? ;
.bss:000000000021C62B                 db    ? ;
.bss:000000000021C62C                 db    ? ;
.bss:000000000021C62D                 db    ? ;
.bss:000000000021C62E                 db    ? ;
.bss:000000000021C62F                 db    ? ;
.bss:000000000021C630                 db    ? ;
.bss:000000000021C631                 db    ? ;
.bss:000000000021C632                 db    ? ;
.bss:000000000021C633                 db    ? ;
.bss:000000000021C634                 db    ? ;
.bss:000000000021C635                 db    ? ;
.bss:000000000021C636                 db    ? ;
.bss:000000000021C637                 db    ? ;
.bss:000000000021C638                 db    ? ;
.bss:000000000021C639                 db    ? ;
.bss:000000000021C63A                 db    ? ;
.bss:000000000021C63B                 db    ? ;
.bss:000000000021C63C                 db    ? ;
.bss:000000000021C63D                 db    ? ;
.bss:000000000021C63E                 db    ? ;
.bss:000000000021C63F                 db    ? ;
.bss:000000000021C640                 db    ? ;
.bss:000000000021C641                 db    ? ;
.bss:000000000021C642                 db    ? ;
.bss:000000000021C643                 db    ? ;
.bss:000000000021C644                 db    ? ;
.bss:000000000021C645                 db    ? ;
.bss:000000000021C646                 db    ? ;
.bss:000000000021C647                 db    ? ;
.bss:000000000021C648                 db    ? ;
.bss:000000000021C649                 db    ? ;
.bss:000000000021C64A                 db    ? ;
.bss:000000000021C64B                 db    ? ;
.bss:000000000021C64C                 db    ? ;
.bss:000000000021C64D                 db    ? ;
.bss:000000000021C64E                 db    ? ;
.bss:000000000021C64F                 db    ? ;
.bss:000000000021C650                 db    ? ;
.bss:000000000021C651                 db    ? ;
.bss:000000000021C652                 db    ? ;
.bss:000000000021C653                 db    ? ;
.bss:000000000021C654                 db    ? ;
.bss:000000000021C655                 db    ? ;
.bss:000000000021C656                 db    ? ;
.bss:000000000021C657                 db    ? ;
.bss:000000000021C658                 db    ? ;
.bss:000000000021C659                 db    ? ;
.bss:000000000021C65A                 db    ? ;
.bss:000000000021C65B                 db    ? ;
.bss:000000000021C65C                 db    ? ;
.bss:000000000021C65D                 db    ? ;
.bss:000000000021C65E                 db    ? ;
.bss:000000000021C65F                 db    ? ;
.bss:000000000021C660                 db    ? ;
.bss:000000000021C661                 db    ? ;
.bss:000000000021C662                 db    ? ;
.bss:000000000021C663                 db    ? ;
.bss:000000000021C664                 db    ? ;
.bss:000000000021C665                 db    ? ;
.bss:000000000021C666                 db    ? ;
.bss:000000000021C667                 db    ? ;
.bss:000000000021C668                 db    ? ;
.bss:000000000021C669                 db    ? ;
.bss:000000000021C66A                 db    ? ;
.bss:000000000021C66B                 db    ? ;
.bss:000000000021C66C                 db    ? ;
.bss:000000000021C66D                 db    ? ;
.bss:000000000021C66E                 db    ? ;
.bss:000000000021C66F                 db    ? ;
.bss:000000000021C670                 db    ? ;
.bss:000000000021C671                 db    ? ;
.bss:000000000021C672                 db    ? ;
.bss:000000000021C673                 db    ? ;
.bss:000000000021C674                 db    ? ;
.bss:000000000021C675                 db    ? ;
.bss:000000000021C676                 db    ? ;
.bss:000000000021C677                 db    ? ;
.bss:000000000021C678                 db    ? ;
.bss:000000000021C679                 db    ? ;
.bss:000000000021C67A                 db    ? ;
.bss:000000000021C67B                 db    ? ;
.bss:000000000021C67C                 db    ? ;
.bss:000000000021C67D                 db    ? ;
.bss:000000000021C67E                 db    ? ;
.bss:000000000021C67F                 db    ? ;
.bss:000000000021C680                 db    ? ;
.bss:000000000021C681                 db    ? ;
.bss:000000000021C682                 db    ? ;
.bss:000000000021C683                 db    ? ;
.bss:000000000021C684                 db    ? ;
.bss:000000000021C685                 db    ? ;
.bss:000000000021C686                 db    ? ;
.bss:000000000021C687                 db    ? ;
.bss:000000000021C688                 db    ? ;
.bss:000000000021C689                 db    ? ;
.bss:000000000021C68A                 db    ? ;
.bss:000000000021C68B                 db    ? ;
.bss:000000000021C68C                 db    ? ;
.bss:000000000021C68D                 db    ? ;
.bss:000000000021C68E                 db    ? ;
.bss:000000000021C68F                 db    ? ;
.bss:000000000021C690                 db    ? ;
.bss:000000000021C691                 db    ? ;
.bss:000000000021C692                 db    ? ;
.bss:000000000021C693                 db    ? ;
.bss:000000000021C694                 db    ? ;
.bss:000000000021C695                 db    ? ;
.bss:000000000021C696                 db    ? ;
.bss:000000000021C697                 db    ? ;
.bss:000000000021C698                 db    ? ;
.bss:000000000021C699                 db    ? ;
.bss:000000000021C69A                 db    ? ;
.bss:000000000021C69B                 db    ? ;
.bss:000000000021C69C                 db    ? ;
.bss:000000000021C69D                 db    ? ;
.bss:000000000021C69E                 db    ? ;
.bss:000000000021C69F                 db    ? ;
.bss:000000000021C6A0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000021C6A0                                         ; get_quoting_style↑o ...
.bss:000000000021C6B0 xmmword_21C6B0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000021C6B0                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000021C6C0 xmmword_21C6C0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000021C6C0                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000021C6D0 qword_21C6D0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000021C6D0                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000021C6D8 new_dst_res_5308 dq ?                   ; DATA XREF: utimecmpat:loc_F6E9↑r
.bss:000000000021C6D8                                         ; utimecmpat+E4↑r ...
.bss:000000000021C6E0 ht_5307         dq ?                    ; DATA XREF: utimecmpat+86↑r
.bss:000000000021C6E0                                         ; utimecmpat:loc_F828↑r ...
.bss:000000000021C6E8 lutimensat_works_really dd ?            ; DATA XREF: fdutimens+B5↑w
.bss:000000000021C6E8                                         ; lutimens+56↑r ...
.bss:000000000021C6EC utimensat_works_really dd ?             ; DATA XREF: fdutimens:loc_FFFA↑r
.bss:000000000021C6EC                                         ; fdutimens+AB↑w ...
.bss:000000000021C6F0 can_write_3065  db ?                    ; DATA XREF: can_write_any_file+9↑r
.bss:000000000021C6F0                                         ; can_write_any_file+2D↑w
.bss:000000000021C6F1 initialized_3064 db ?                   ; DATA XREF: can_write_any_file↑r
.bss:000000000021C6F1                                         ; can_write_any_file+23↑w
.bss:000000000021C6F2                 align 4
.bss:000000000021C6F4 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000021C6F4                                         ; rpl_fcntl:loc_14BBF↑w ...
.bss:000000000021C6F4 _bss            ends
.bss:000000000021C6F4
.prgend:000000000021C6F8 ; ===========================================================================
.prgend:000000000021C6F8
.prgend:000000000021C6F8 ; Segment type: Zero-length
.prgend:000000000021C6F8 _prgend         segment byte public '' use64
.prgend:000000000021C6F8 _end            label byte
.prgend:000000000021C6F8 _prgend         ends
.prgend:000000000021C6F8
extern:000000000021C700 ; ===========================================================================
extern:000000000021C700
extern:000000000021C700 ; Segment type: Externs
extern:000000000021C700 ; extern
extern:000000000021C700 ; char *getenv(const char *name)
extern:000000000021C700                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000021C700                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000021C708 ; void free(void *ptr)
extern:000000000021C708                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000021C708                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000021C710 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
extern:000000000021C710                 extrn utimensat:near    ; CODE XREF: _utimensat↑j
extern:000000000021C710                                         ; DATA XREF: .got:utimensat_ptr↑o
extern:000000000021C718 ; void __noreturn abort(void)
extern:000000000021C718                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000021C718                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000021C720 ; int *_errno_location(void)
extern:000000000021C720                 extrn __errno_location:near
extern:000000000021C720                                         ; CODE XREF: ___errno_location↑j
extern:000000000021C720                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000021C728 ; int unlink(const char *name)
extern:000000000021C728                 extrn unlink:near       ; CODE XREF: _unlink↑j
extern:000000000021C728                                         ; DATA XREF: .got:unlink_ptr↑o
extern:000000000021C730 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000021C730                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000021C730                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000021C738 ; void __noreturn exit(int status)
extern:000000000021C738                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000021C738                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000021C740 ; char *strcpy(char *dest, const char *src)
extern:000000000021C740                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000021C740                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000021C748 ; size_t _fpending(FILE *fp)
extern:000000000021C748                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000021C748                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000021C750                 extrn __read_chk:near   ; CODE XREF: ___read_chk↑j
extern:000000000021C750                                         ; DATA XREF: .got:__read_chk_ptr↑o
extern:000000000021C758 ; int mkdir(const char *path, __mode_t mode)
extern:000000000021C758                 extrn mkdir:near        ; CODE XREF: _mkdir↑j
extern:000000000021C758                                         ; DATA XREF: .got:mkdir_ptr↑o
extern:000000000021C760 ; int unlinkat(int fd, const char *name, int flag)
extern:000000000021C760                 extrn unlinkat:near     ; CODE XREF: _unlinkat↑j
extern:000000000021C760                                         ; DATA XREF: .got:unlinkat_ptr↑o
extern:000000000021C768 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:000000000021C768                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:000000000021C768                                         ; DATA XREF: .got:qsort_ptr↑o
extern:000000000021C770 ; int isatty(int fd)
extern:000000000021C770                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:000000000021C770                                         ; DATA XREF: .got:isatty_ptr↑o
extern:000000000021C778 ; int faccessat(int fd, const char *file, int type, int flag)
extern:000000000021C778                 extrn faccessat:near    ; CODE XREF: _faccessat↑j
extern:000000000021C778                                         ; DATA XREF: .got:faccessat_ptr↑o
extern:000000000021C780 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:000000000021C780                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:000000000021C780                                         ; DATA XREF: .got:readlink_ptr↑o
extern:000000000021C788 ; int fcntl(int fd, int cmd, ...)
extern:000000000021C788                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000021C788                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000021C790 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:000000000021C790                 extrn clock_gettime:near
extern:000000000021C790                                         ; CODE XREF: _clock_gettime↑j
extern:000000000021C790                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:000000000021C798 ; ssize_t write(int fd, const void *buf, size_t n)
extern:000000000021C798                 extrn write:near        ; CODE XREF: _write↑j
extern:000000000021C798                                         ; DATA XREF: .got:write_ptr↑o
extern:000000000021C7A0 ; __pid_t getpid(void)
extern:000000000021C7A0                 extrn getpid:near       ; CODE XREF: _getpid↑j
extern:000000000021C7A0                                         ; DATA XREF: .got:getpid_ptr↑o
extern:000000000021C7A8 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000021C7A8                 extrn fread_unlocked:near
extern:000000000021C7A8                                         ; CODE XREF: _fread_unlocked↑j
extern:000000000021C7A8                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:000000000021C7B0 ; char *textdomain(const char *domainname)
extern:000000000021C7B0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000021C7B0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000021C7B8 ; __int64 pathconf(const char *path, int name)
extern:000000000021C7B8                 extrn pathconf:near     ; CODE XREF: _pathconf↑j
extern:000000000021C7B8                                         ; DATA XREF: .got:pathconf_ptr↑o
extern:000000000021C7C0 ; int fclose(FILE *stream)
extern:000000000021C7C0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000021C7C0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000021C7C8 ; DIR *opendir(const char *name)
extern:000000000021C7C8                 extrn opendir:near      ; CODE XREF: _opendir↑j
extern:000000000021C7C8                                         ; DATA XREF: .got:opendir_ptr↑o
extern:000000000021C7D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000021C7D0                 extrn bindtextdomain:near
extern:000000000021C7D0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000021C7D0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000021C7D8 ; char *stpcpy(char *dest, const char *src)
extern:000000000021C7D8                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:000000000021C7D8                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:000000000021C7E0 ; int rmdir(const char *path)
extern:000000000021C7E0                 extrn rmdir:near        ; CODE XREF: _rmdir↑j
extern:000000000021C7E0                                         ; DATA XREF: .got:rmdir_ptr↑o
extern:000000000021C7E8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000021C7E8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000021C7E8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000021C7F0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000021C7F0                 extrn __ctype_get_mb_cur_max:near
extern:000000000021C7F0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000021C7F0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000021C7F8 ; size_t strlen(const char *s)
extern:000000000021C7F8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000021C7F8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000021C800 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000021C800                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:000000000021C800                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:000000000021C808 ; int openat(int fd, const char *file, int oflag, ...)
extern:000000000021C808                 extrn openat:near       ; CODE XREF: _openat↑j
extern:000000000021C808                                         ; DATA XREF: .got:openat_ptr↑o
extern:000000000021C810                 extrn __stack_chk_fail:near
extern:000000000021C810                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000021C810                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000021C818 ; __uid_t getuid(void)
extern:000000000021C818                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:000000000021C818                                         ; DATA XREF: .got:getuid_ptr↑o
extern:000000000021C820 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000021C820                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000021C820                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000021C828 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000021C828                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000021C828                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000021C830 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:000000000021C830                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:000000000021C830                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:000000000021C838 ; int _overflow(_IO_FILE *, int)
extern:000000000021C838                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000021C838                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000021C840 ; char *strrchr(const char *s, int c)
extern:000000000021C840                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000021C840                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000021C848 ; int ftruncate(int fd, __off_t length)
extern:000000000021C848                 extrn ftruncate:near    ; CODE XREF: _ftruncate↑j
extern:000000000021C848                                         ; DATA XREF: .got:ftruncate_ptr↑o
extern:000000000021C850 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000021C850                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000021C850                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000021C858 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
extern:000000000021C858                 extrn gettimeofday:near ; CODE XREF: _gettimeofday↑j
extern:000000000021C858                                         ; DATA XREF: .got:gettimeofday_ptr↑o
extern:000000000021C860 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000021C860                 extrn __assert_fail:near
extern:000000000021C860                                         ; CODE XREF: ___assert_fail↑j
extern:000000000021C860                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000021C868 ; void *memset(void *s, int c, size_t n)
extern:000000000021C868                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000021C868                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000021C870 ; __uid_t geteuid(void)
extern:000000000021C870                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:000000000021C870                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:000000000021C878 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:000000000021C878                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:000000000021C878                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:000000000021C880 ; char *canonicalize_file_name(const char *name)
extern:000000000021C880                 extrn canonicalize_file_name:near
extern:000000000021C880                                         ; CODE XREF: _canonicalize_file_name↑j
extern:000000000021C880                                         ; DATA XREF: .got:canonicalize_file_name_ptr↑o
extern:000000000021C888 ; int close(int fd)
extern:000000000021C888                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000021C888                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000021C890 ; void rewinddir(DIR *dirp)
extern:000000000021C890                 extrn rewinddir:near    ; CODE XREF: _rewinddir↑j
extern:000000000021C890                                         ; DATA XREF: .got:rewinddir_ptr↑o
extern:000000000021C898 ; size_t strspn(const char *s, const char *accept)
extern:000000000021C898                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000021C898                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000021C8A0 ; int closedir(DIR *dirp)
extern:000000000021C8A0                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:000000000021C8A0                                         ; DATA XREF: .got:closedir_ptr↑o
extern:000000000021C8A8 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000021C8A8                 extrn posix_fadvise:near
extern:000000000021C8A8                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000021C8A8                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000021C8B0 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000021C8B0                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000021C8B0                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000021C8B8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000021C8B8                 extrn __libc_start_main:near
extern:000000000021C8B8                                         ; CODE XREF: start+24↑p
extern:000000000021C8B8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000021C8C0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000021C8C0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000021C8C0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000021C8C8 ; int fallocate(int fd, int mode, __off_t offset, __off_t len)
extern:000000000021C8C8                 extrn fallocate:near    ; CODE XREF: _fallocate↑j
extern:000000000021C8C8                                         ; DATA XREF: .got:fallocate_ptr↑o
extern:000000000021C8D0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000021C8D0                 extrn fputs_unlocked:near
extern:000000000021C8D0                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000021C8D0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000021C8D8 ; int utimes(const char *file, const struct timeval tvp[2])
extern:000000000021C8D8                 extrn utimes:near       ; CODE XREF: _utimes↑j
extern:000000000021C8D8                                         ; DATA XREF: .got:utimes_ptr↑o
extern:000000000021C8E0 ; void *calloc(size_t nmemb, size_t size)
extern:000000000021C8E0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000021C8E0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000021C8E8 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000021C8E8                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:000000000021C8E8                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:000000000021C8F0 ; int strcmp(const char *s1, const char *s2)
extern:000000000021C8F0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000021C8F0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000021C8F8 ; int dirfd(DIR *dirp)
extern:000000000021C8F8                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:000000000021C8F8                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:000000000021C900 ; __int64 fpathconf(int fd, int name)
extern:000000000021C900                 extrn fpathconf:near    ; CODE XREF: _fpathconf↑j
extern:000000000021C900                                         ; DATA XREF: .got:fpathconf_ptr↑o
extern:000000000021C908 ; int rpmatch(const char *response)
extern:000000000021C908                 extrn rpmatch:near      ; CODE XREF: _rpmatch↑j
extern:000000000021C908                                         ; DATA XREF: .got:rpmatch_ptr↑o
extern:000000000021C910 ; __int64 syscall(__int64 sysno, ...)
extern:000000000021C910                 extrn syscall:near      ; CODE XREF: _syscall↑j
extern:000000000021C910                                         ; DATA XREF: .got:syscall_ptr↑o
extern:000000000021C918 ; int mkfifo(const char *path, __mode_t mode)
extern:000000000021C918                 extrn mkfifo:near       ; CODE XREF: _mkfifo↑j
extern:000000000021C918                                         ; DATA XREF: .got:mkfifo_ptr↑o
extern:000000000021C920 ; __mode_t umask(__mode_t mask)
extern:000000000021C920                 extrn umask:near        ; CODE XREF: _umask↑j
extern:000000000021C920                                         ; DATA XREF: .got:umask_ptr↑o
extern:000000000021C928 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000021C928                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000021C928                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000021C930 ; int _xmknod(int ver, const char *path, __mode_t mode, __dev_t *dev)
extern:000000000021C930                 extrn __xmknod:near     ; CODE XREF: ___xmknod↑j
extern:000000000021C930                                         ; DATA XREF: .got:__xmknod_ptr↑o
extern:000000000021C938 ; int fileno(FILE *stream)
extern:000000000021C938                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000021C938                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000021C940 ; __gid_t getgid(void)
extern:000000000021C940                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:000000000021C940                                         ; DATA XREF: .got:getgid_ptr↑o
extern:000000000021C948 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000021C948                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000021C948                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000021C950 ; struct dirent *readdir(DIR *dirp)
extern:000000000021C950                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:000000000021C950                                         ; DATA XREF: .got:readdir_ptr↑o
extern:000000000021C958 ; void *malloc(size_t size)
extern:000000000021C958                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000021C958                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000021C960 ; int fflush(FILE *stream)
extern:000000000021C960                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000021C960                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000021C968 ; char *nl_langinfo(nl_item item)
extern:000000000021C968                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000021C968                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000021C970 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000021C970                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000021C970                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000021C978 ; int lchown(const char *file, __uid_t owner, __gid_t group)
extern:000000000021C978                 extrn lchown:near       ; CODE XREF: _lchown↑j
extern:000000000021C978                                         ; DATA XREF: .got:lchown_ptr↑o
extern:000000000021C980 ; int _freading(FILE *fp)
extern:000000000021C980                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000021C980                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000021C988 ; int fchdir(int fd)
extern:000000000021C988                 extrn fchdir:near       ; CODE XREF: _fchdir↑j
extern:000000000021C988                                         ; DATA XREF: .got:fchdir_ptr↑o
extern:000000000021C990 ; void *realloc(void *ptr, size_t size)
extern:000000000021C990                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000021C990                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000021C998 ; FILE *fdopen(int fd, const char *modes)
extern:000000000021C998                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000021C998                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000021C9A0 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
extern:000000000021C9A0                 extrn linkat:near       ; CODE XREF: _linkat↑j
extern:000000000021C9A0                                         ; DATA XREF: .got:linkat_ptr↑o
extern:000000000021C9A8 ; char *setlocale(int category, const char *locale)
extern:000000000021C9A8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000021C9A8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000021C9B0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000021C9B0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000021C9B8 ; int fchmod(int fd, __mode_t mode)
extern:000000000021C9B8                 extrn fchmod:near       ; CODE XREF: _fchmod↑j
extern:000000000021C9B8                                         ; DATA XREF: .got:fchmod_ptr↑o
extern:000000000021C9C0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000021C9C0                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000021C9C0                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000021C9C8 ; int chmod(const char *file, __mode_t mode)
extern:000000000021C9C8                 extrn chmod:near        ; CODE XREF: _chmod↑j
extern:000000000021C9C8                                         ; DATA XREF: .got:chmod_ptr↑o
extern:000000000021C9D0 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000021C9D0                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000021C9D0                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000021C9D8 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000021C9D8                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000021C9D8                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000021C9E0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000021C9E0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000021C9E0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000021C9E8                 extrn __explicit_bzero_chk:near
extern:000000000021C9E8                                         ; CODE XREF: ___explicit_bzero_chk↑j
extern:000000000021C9E8                                         ; DATA XREF: .got:__explicit_bzero_chk_ptr↑o
extern:000000000021C9F0 ; int open(const char *file, int oflag, ...)
extern:000000000021C9F0                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000021C9F0                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000021C9F8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000021C9F8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000021C9F8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000021CA00 ; int fchown(int fd, __uid_t owner, __gid_t group)
extern:000000000021CA00                 extrn fchown:near       ; CODE XREF: _fchown↑j
extern:000000000021CA00                                         ; DATA XREF: .got:fchown_ptr↑o
extern:000000000021CA08 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000021CA08                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000021CA08                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000021CA10 ; int rename(const char *old, const char *new)
extern:000000000021CA10                 extrn rename:near       ; CODE XREF: _rename↑j
extern:000000000021CA10                                         ; DATA XREF: .got:rename_ptr↑o
extern:000000000021CA18 ; DIR *fdopendir(int fd)
extern:000000000021CA18                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:000000000021CA18                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:000000000021CA20 ; int futimens(int fd, const struct timespec times[2])
extern:000000000021CA20                 extrn futimens:near     ; CODE XREF: _futimens↑j
extern:000000000021CA20                                         ; DATA XREF: .got:futimens_ptr↑o
extern:000000000021CA28 ; int euidaccess(const char *name, int type)
extern:000000000021CA28                 extrn euidaccess:near   ; CODE XREF: _euidaccess↑j
extern:000000000021CA28                                         ; DATA XREF: .got:euidaccess_ptr↑o
extern:000000000021CA30 ; int fstatfs(int fildes, struct statfs *buf)
extern:000000000021CA30                 extrn fstatfs:near      ; CODE XREF: _fstatfs↑j
extern:000000000021CA30                                         ; DATA XREF: .got:fstatfs_ptr↑o
extern:000000000021CA38 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000021CA38                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000021CA38                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000021CA40 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
extern:000000000021CA40                 extrn renameat:near     ; CODE XREF: _renameat↑j
extern:000000000021CA40                                         ; DATA XREF: .got:renameat_ptr↑o
extern:000000000021CA48 ; int getpagesize(void)
extern:000000000021CA48                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:000000000021CA48                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:000000000021CA50 ; __pid_t getppid(void)
extern:000000000021CA50                 extrn getppid:near      ; CODE XREF: _getppid↑j
extern:000000000021CA50                                         ; DATA XREF: .got:getppid_ptr↑o
extern:000000000021CA58 ; void __noreturn exit(int status)
extern:000000000021CA58                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000021CA58                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000021CA60 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000021CA60                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000021CA60                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000021CA68                 extrn __fprintf_chk:near
extern:000000000021CA68                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000021CA68                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000021CA70 ; int mbsinit(const mbstate_t *ps)
extern:000000000021CA70                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000021CA70                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000021CA78 ; int symlinkat(const char *from, int tofd, const char *to)
extern:000000000021CA78                 extrn symlinkat:near    ; CODE XREF: _symlinkat↑j
extern:000000000021CA78                                         ; DATA XREF: .got:symlinkat_ptr↑o
extern:000000000021CA80 ; int iswprint(wint_t wc)
extern:000000000021CA80                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000021CA80                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000021CA88 ; int __fastcall __cxa_finalize(void *)
extern:000000000021CA88                 extrn __imp___cxa_finalize:near ; weak
extern:000000000021CA88                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000021CA88                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000021CA90 ; int futimesat(int fd, const char *file, const struct timeval tvp[2])
extern:000000000021CA90                 extrn futimesat:near    ; CODE XREF: _futimesat↑j
extern:000000000021CA90                                         ; DATA XREF: .got:futimesat_ptr↑o
extern:000000000021CA98 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000021CA98                 extrn __ctype_b_loc:near
extern:000000000021CA98                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000021CA98                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000021CAA0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000021CAA0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000021CAA8                 extrn __gmon_start__:near ; weak
extern:000000000021CAA8                                         ; CODE XREF: _init_proc+10↑p
extern:000000000021CAA8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000021CAB0                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000021CAB0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000021CAB0
extern:000000000021CAB0
extern:000000000021CAB0                 end start
