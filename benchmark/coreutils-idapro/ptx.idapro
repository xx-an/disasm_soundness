LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : E50ACDAD24ECA61D88D6B95C4738D9BC238B08330B2F8BDE7ACAAB358759E445
LOAD:0000000000000000 ; Input MD5    : B23D8F014E8DC8A7B86E3A2FA050172A
LOAD:0000000000000000 ; Input CRC32  : 21B53AC5
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/ptx
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'propername.c'
LOAD:0000000000000000 ; Source File : 'trim.c'
LOAD:0000000000000000 ; Source File : 'mbsstr.c'
LOAD:0000000000000000 ; Source File : 'ptx.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'diacrit.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'freopen-safer.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'read-file.c'
LOAD:0000000000000000 ; Source File : 'strnlen1.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstriconv.c'
LOAD:0000000000000000 ; Source File : 'xstrtoimax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'regex.c'
LOAD:0000000000000000 ; Source File : 'c-strcasecmp.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'mbchar.c'
LOAD:0000000000000000 ; Source File : 'striconv.c'
LOAD:0000000000000000 ; Source File : 'malloca.c'
LOAD:0000000000000000 ; Source File : 'mbslen.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 9AC08h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048 qword_48        dq 40h                  ; DATA XREF: .data:line_width↓o
LOAD:0000000000000048                                         ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 1FFD8h               ; Size in file image
LOAD:00000000000000D8                 dq 1FFD8h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 20870h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 220870h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 850h                 ; Size in file image
LOAD:0000000000000110                 dq 1190h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 20B58h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 220B58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 1CFB4h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 1CFB4h               ; Physical address
LOAD:00000000000001B0                 dq 68Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 68Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 20870h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 220870h              ; Physical address
LOAD:0000000000000220                 dq 790h                 ; Size in file image
LOAD:0000000000000228                 dq 790h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0E9h, 82h, 8Fh, 0D6h, 76h, 6Dh, 0E6h, 89h, 33h, 7Ah ; Desc
LOAD:0000000000000284                 db 57h, 7Fh, 0Ah, 0BCh, 0E5h, 7Ah, 80h, 86h, 8Dh, 8Ch
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 52h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 52h, 53h, 59h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_B68, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_B68, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_B68, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_B68, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_B68, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_B68, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_B68, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFtello - offset byte_B68, 12h, 0, 0, \ ; "ftello"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_B68, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aIconv - offset byte_B68, 12h, 0, 0, offset dword_0,\ ; "iconv"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFerror - offset byte_B68, 12h, 0, 0, \ ; "ferror"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aQsort - offset byte_B68, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aFread - offset byte_B68, 12h, 0, 0, offset dword_0,\ ; "fread"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aIswcntrl - offset byte_B68, 12h, 0, 0, \ ; "iswcntrl"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_B68, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrtolInternal - offset byte_B68, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aIswctype - offset byte_B68, 12h, 0, 0, \ ; "iswctype"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aFclose - offset byte_B68, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aBindtextdomain - offset byte_B68, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStpcpy - offset byte_B68, 12h, 0, 0, \ ; "stpcpy"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aDcgettext - offset byte_B68, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_B68, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrlen - offset byte_B68, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStackChkFail - offset byte_B68, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGetoptLong - offset byte_B68, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMbrtowc - offset byte_B68, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aDup2 - offset byte_B68, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:0000000000000568                            0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrchr - offset byte_B68, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aOverflow - offset byte_B68, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrrchr - offset byte_B68, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aLseek - offset byte_B68, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005C8                            0>
LOAD:00000000000005E0                 Elf64_Sym <offset aAssertFail - offset byte_B68, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemset - offset byte_B68, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFreopen - offset byte_B68, 12h, 0, 0, \ ; "freopen"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aStrnlen - offset byte_B68, 12h, 0, 0, \ ; "strnlen"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aIconvClose+6 - offset byte_B68, 12h, 0, 0, \ ; "close"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMemchr - offset byte_B68, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aLibcStartMain - offset byte_B68, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcmp - offset byte_B68, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aIswctype+2 - offset byte_B68, 12h, 0, 0, \ ; "wctype"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFputsUnlocked - offset byte_B68, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aCalloc - offset byte_B68, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aStrcmp - offset byte_B68, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aGmonStart - offset byte_B68, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMemcpy - offset byte_B68, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFileno - offset byte_B68, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aWcwidth - offset byte_B68, 12h, 0, 0, \ ; "wcwidth"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aIswalnum - offset byte_B68, 12h, 0, 0, \ ; "iswalnum"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aMalloc - offset byte_B68, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aWcrtomb - offset byte_B68, 12h, 0, 0, \ ; "wcrtomb"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFflush - offset byte_B68, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aNlLanginfo - offset byte_B68, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFxstat - offset byte_B68, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aFreading - offset byte_B68, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFwriteUnlocked - offset byte_B68, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aRealloc - offset byte_B68, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aSetlocale - offset byte_B68, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aPrintfChk - offset byte_B68, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aIconvClose - offset byte_B68, 12h, 0, 0, \ ; "iconv_close"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aIswspace - offset byte_B68, 12h, 0, 0, \ ; "iswspace"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aBtowc - offset byte_B68, 12h, 0, 0, offset dword_0,\ ; "btowc"
LOAD:0000000000000898                            0>
LOAD:00000000000008B0                 Elf64_Sym <offset aMemmove - offset byte_B68, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFerror+1 - offset byte_B68, 12h, 0, 0, \ ; "error"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aIconvOpen+6 - offset byte_B68, 12h, 0, 0, \ ; "open"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFseeko - offset byte_B68, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFopen - offset byte_B68, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000910                            0>
LOAD:0000000000000928                 Elf64_Sym <offset aTowlower - offset byte_B68, 12h, 0, 0, \ ; "towlower"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aTowupper - offset byte_B68, 12h, 0, 0, \ ; "towupper"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aCxaAtexit - offset byte_B68, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aExit+1 - offset byte_B68, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aFwrite - offset byte_B68, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aFprintfChk - offset byte_B68, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aItmRegistertmc - offset byte_B68, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aStrdup - offset byte_B68, 12h, 0, 0, \ ; "strdup"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aMbsinit - offset byte_B68, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aIswprint - offset byte_B68, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aCxaFinalize - offset byte_B68, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_B68, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aCtypeBLoc - offset byte_B68, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aIconvOpen - offset byte_B68, 12h, 0, 0, \ ; "iconv_open"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aSprintfChk - offset byte_B68, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aStdout - offset byte_B68, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000A90                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000AA8                 Elf64_Sym <offset aProgname - offset byte_B68, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000AA8                            offset __bss_start, 8>
LOAD:0000000000000AC0                 Elf64_Sym <offset aStdin - offset byte_B68, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000AC0                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000AD8                 Elf64_Sym <offset aProgramInvocat - offset byte_B68, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000AD8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AF0                 Elf64_Sym <offset aPrognameFull - offset byte_B68, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000AF0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000B08                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_B68, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000B08                            offset __bss_start, 8>
LOAD:0000000000000B20                 Elf64_Sym <offset aStderr - offset byte_B68, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000B20                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000B38                 Elf64_Sym <offset aOptind - offset byte_B68, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000B38                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000B50                 Elf64_Sym <offset aOptarg - offset byte_B68, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000B50                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000B68 ; ELF String Table
LOAD:0000000000000B68 byte_B68        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000B68                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000B69 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000FE0↓o
LOAD:0000000000000B73 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000B7A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B87 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B91 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000B99 aTowlower       db 'towlower',0         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000BA2 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BA8 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BB0 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:0000000000000BB7 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000BBF aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BC9 aWcrtomb        db 'wcrtomb',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BD1 aIswspace       db 'iswspace',0         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000BDA aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000BEB aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000BF4 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000BFC aBtowc          db 'btowc',0            ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000C02 aTowupper       db 'towupper',0         ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000C0B aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C11 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000C17 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000C17                                         ; LOAD:0000000000000970↑o
LOAD:0000000000000C1D aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C24 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000C24                                         ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000C3C aStrdup         db 'strdup',0           ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000C43 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C51 aIswalnum       db 'iswalnum',0         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000C5A aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000C5A                                         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000C71 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000C78 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000C7F aIswctype       db 'iswctype',0         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000C7F                                         ; LOAD:00000000000006A0↑o
LOAD:0000000000000C88 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000C8F aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000CA0 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000CA7 aDup2           db 'dup2',0             ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000CAC aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000CBA aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000CC1 aStrnlen        db 'strnlen',0          ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000CC9 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000CCF aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000CD6 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000CDD aStrtolInternal db '__strtol_internal',0
LOAD:0000000000000CDD                                         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000CEF aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000CF6 aFtello         db 'ftello',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000CFD aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000D05 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000D11 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000D1F aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:0000000000000D26 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000D31 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000D38 aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000D40 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000D4C aFreopen        db 'freopen',0          ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000D54 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000D5D aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000D64 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000D6B aFread          db 'fread',0            ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000D71 aIconvClose     db 'iconv_close',0      ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000D71                                         ; LOAD:0000000000000640↑o
LOAD:0000000000000D7D aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000D88 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000D8F aIswcntrl       db 'iswcntrl',0         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000D98 aIconv          db 'iconv',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000D9E aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D9E                                         ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000DBC aQsort          db 'qsort',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000DC2 aIconvOpen      db 'iconv_open',0       ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000DC2                                         ; LOAD:00000000000008E0↑o
LOAD:0000000000000DCD aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000DCD                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000DE1 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000DE1                                         ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000DF5 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000E04 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000E12 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000E1A aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000E1A                                         ; LOAD:0000000000000448↑o
LOAD:0000000000000E29 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000E39 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000E40 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000E40                                         ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000E52 aFerror         db 'ferror',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000E52                                         ; LOAD:00000000000008C8↑o
LOAD:0000000000000E59 aStpcpy         db 'stpcpy',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000E60 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000E67 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000E72 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000E81 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000E86 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000E91 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000EA1 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000EAE aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000FF0↓o
LOAD:0000000000000EBA aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001000↓o
LOAD:0000000000000EC5 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001010↓o
LOAD:0000000000000ECF aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001020↓o
LOAD:0000000000000EDB aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001030↓o
LOAD:0000000000000EE5 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000EE5                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000F01 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000F10 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000F10                                         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000F2A ; ELF GNU Symbol Version Table
LOAD:0000000000000F2A                 dw 0
LOAD:0000000000000F2C                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000F2E                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000F30                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000F32                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000F34                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000F36                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000F38                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000F3A                 dw 3                    ; ftello@@GLIBC_2.2.5
LOAD:0000000000000F3C                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000F3E                 dw 3                    ; iconv@@GLIBC_2.2.5
LOAD:0000000000000F40                 dw 3                    ; ferror@@GLIBC_2.2.5
LOAD:0000000000000F42                 dw 3                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000F44                 dw 3                    ; fread@@GLIBC_2.2.5
LOAD:0000000000000F46                 dw 3                    ; iswcntrl@@GLIBC_2.2.5
LOAD:0000000000000F48                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000F4A                 dw 3                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:0000000000000F4C                 dw 3                    ; iswctype@@GLIBC_2.2.5
LOAD:0000000000000F4E                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000F50                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000F52                 dw 3                    ; stpcpy@@GLIBC_2.2.5
LOAD:0000000000000F54                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000F56                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000F58                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000F5A                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000F5C                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000F5E                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000F60                 dw 3                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000F62                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000F64                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000F66                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000F68                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000F6A                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000F6C                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000F6E                 dw 3                    ; freopen@@GLIBC_2.2.5
LOAD:0000000000000F70                 dw 3                    ; strnlen@@GLIBC_2.2.5
LOAD:0000000000000F72                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000F74                 dw 3                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000F76                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000F78                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000F7A                 dw 3                    ; wctype@@GLIBC_2.2.5
LOAD:0000000000000F7C                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F7E                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000F80                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000F82                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000F84                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000F86                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000F88                 dw 3                    ; wcwidth@@GLIBC_2.2.5
LOAD:0000000000000F8A                 dw 3                    ; iswalnum@@GLIBC_2.2.5
LOAD:0000000000000F8C                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000F8E                 dw 3                    ; wcrtomb@@GLIBC_2.2.5
LOAD:0000000000000F90                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000F92                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000F94                 dw 3                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000F96                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000F98                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F9A                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000F9C                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000F9E                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000FA0                 dw 3                    ; iconv_close@@GLIBC_2.2.5
LOAD:0000000000000FA2                 dw 3                    ; iswspace@@GLIBC_2.2.5
LOAD:0000000000000FA4                 dw 3                    ; btowc@@GLIBC_2.2.5
LOAD:0000000000000FA6                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000FA8                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000FAA                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:0000000000000FAC                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000FAE                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000FB0                 dw 3                    ; towlower@@GLIBC_2.2.5
LOAD:0000000000000FB2                 dw 3                    ; towupper@@GLIBC_2.2.5
LOAD:0000000000000FB4                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000FB6                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000FB8                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000FBA                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000FBC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000FBE                 dw 3                    ; strdup@@GLIBC_2.2.5
LOAD:0000000000000FC0                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000FC2                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000FC4                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000FC6                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000FC8                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000FCA                 dw 3                    ; iconv_open@@GLIBC_2.2.5
LOAD:0000000000000FCC                 dw 6                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000FCE                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000FD0                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000FD2                 dw 3                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000FD4                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000FD6                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000FD8                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000FDA                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000FDC                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000FDE                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000FE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000FE0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_B68, 10h, 0> ; "libc.so.6"
LOAD:0000000000000FF0                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_B68, \ ; "GLIBC_2.3.4"
LOAD:0000000000000FF0                                10h>
LOAD:0000000000001000                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_B68, \ ; "GLIBC_2.14"
LOAD:0000000000001000                                10h>
LOAD:0000000000001010                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_B68, \ ; "GLIBC_2.4"
LOAD:0000000000001010                                10h>
LOAD:0000000000001020                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_B68, \ ; "GLIBC_2.2.5"
LOAD:0000000000001020                                10h>
LOAD:0000000000001030                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_B68, 0> ; "GLIBC_2.3"
LOAD:0000000000001040 ; ELF RELA Relocation Table
LOAD:0000000000001040                 Elf64_Rela <220870h, 8, 4940h> ; R_X86_64_RELATIVE +4940h
LOAD:0000000000001058                 Elf64_Rela <220878h, 8, 4900h> ; R_X86_64_RELATIVE +4900h
LOAD:0000000000001070                 Elf64_Rela <220880h, 8, 1B8B2h> ; R_X86_64_RELATIVE +1B8B2h
LOAD:0000000000001088                 Elf64_Rela <220888h, 8, 1B8B7h> ; R_X86_64_RELATIVE +1B8B7h
LOAD:00000000000010A0                 Elf64_Rela <2208A0h, 8, 1B8BBh> ; R_X86_64_RELATIVE +1B8BBh
LOAD:00000000000010B8                 Elf64_Rela <2208C0h, 8, 1B8CAh> ; R_X86_64_RELATIVE +1B8CAh
LOAD:00000000000010D0                 Elf64_Rela <2208E0h, 8, 1B8D5h> ; R_X86_64_RELATIVE +1B8D5h
LOAD:00000000000010E8                 Elf64_Rela <220900h, 8, 1B8E5h> ; R_X86_64_RELATIVE +1B8E5h
LOAD:0000000000001100                 Elf64_Rela <220920h, 8, 1B8F1h> ; R_X86_64_RELATIVE +1B8F1h
LOAD:0000000000001118                 Elf64_Rela <220940h, 8, 1B8FAh> ; R_X86_64_RELATIVE +1B8FAh
LOAD:0000000000001130                 Elf64_Rela <220960h, 8, 1B906h> ; R_X86_64_RELATIVE +1B906h
LOAD:0000000000001148                 Elf64_Rela <220980h, 8, 1B911h> ; R_X86_64_RELATIVE +1B911h
LOAD:0000000000001160                 Elf64_Rela <2209A0h, 8, 1B91Bh> ; R_X86_64_RELATIVE +1B91Bh
LOAD:0000000000001178                 Elf64_Rela <2209C0h, 8, 1B926h> ; R_X86_64_RELATIVE +1B926h
LOAD:0000000000001190                 Elf64_Rela <2209E0h, 8, 1B84Fh> ; R_X86_64_RELATIVE +1B84Fh
LOAD:00000000000011A8                 Elf64_Rela <220A00h, 8, 1B936h> ; R_X86_64_RELATIVE +1B936h
LOAD:00000000000011C0                 Elf64_Rela <220A20h, 8, 1B946h> ; R_X86_64_RELATIVE +1B946h
LOAD:00000000000011D8                 Elf64_Rela <220A40h, 8, 1B952h> ; R_X86_64_RELATIVE +1B952h
LOAD:00000000000011F0                 Elf64_Rela <220A60h, 8, 1B95Fh> ; R_X86_64_RELATIVE +1B95Fh
LOAD:0000000000001208                 Elf64_Rela <220A80h, 8, 1B965h> ; R_X86_64_RELATIVE +1B965h
LOAD:0000000000001220                 Elf64_Rela <220AA0h, 8, 1B971h> ; R_X86_64_RELATIVE +1B971h
LOAD:0000000000001238                 Elf64_Rela <220AC0h, 8, 1B976h> ; R_X86_64_RELATIVE +1B976h
LOAD:0000000000001250                 Elf64_Rela <220B00h, 8, 1BD34h> ; R_X86_64_RELATIVE +1BD34h
LOAD:0000000000001268                 Elf64_Rela <220B08h, 8, 1BD3Ch> ; R_X86_64_RELATIVE +1BD3Ch
LOAD:0000000000001280                 Elf64_Rela <220B10h, 8, 1BD42h> ; R_X86_64_RELATIVE +1BD42h
LOAD:0000000000001298                 Elf64_Rela <220B18h, 8, 1BD4Fh> ; R_X86_64_RELATIVE +1BD4Fh
LOAD:00000000000012B0                 Elf64_Rela <220B20h, 8, 1BD5Ch> ; R_X86_64_RELATIVE +1BD5Ch
LOAD:00000000000012C8                 Elf64_Rela <220B28h, 8, 1B71Fh> ; R_X86_64_RELATIVE +1B71Fh
LOAD:00000000000012E0                 Elf64_Rela <220B30h, 8, 1BD70h> ; R_X86_64_RELATIVE +1BD70h
LOAD:00000000000012F8                 Elf64_Rela <220B38h, 8, 1BD55h> ; R_X86_64_RELATIVE +1BD55h
LOAD:0000000000001310                 Elf64_Rela <220B40h, 8, 1B819h> ; R_X86_64_RELATIVE +1B819h
LOAD:0000000000001328                 Elf64_Rela <220B48h, 8, 1BD78h> ; R_X86_64_RELATIVE +1BD78h
LOAD:0000000000001340                 Elf64_Rela <221008h, 8, 221008h> ; R_X86_64_RELATIVE +221008h
LOAD:0000000000001358                 Elf64_Rela <221028h, 8, 1B97Eh> ; R_X86_64_RELATIVE +1B97Eh
LOAD:0000000000001370                 Elf64_Rela <221030h, 8, 1BC8Eh> ; R_X86_64_RELATIVE +1BC8Eh
LOAD:0000000000001388                 Elf64_Rela <221038h, 8, 1B9B8h> ; R_X86_64_RELATIVE +1B9B8h
LOAD:00000000000013A0                 Elf64_Rela <221040h, 8, 5930h> ; R_X86_64_RELATIVE +5930h
LOAD:00000000000013B8                 Elf64_Rela <2210A0h, 8, 2210B0h> ; R_X86_64_RELATIVE +2210B0h
LOAD:00000000000013D0                 Elf64_Rela <2210B8h, 8, 2218C0h> ; R_X86_64_RELATIVE +2218C0h
LOAD:00000000000013E8                 Elf64_Rela <220FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001400                 Elf64_Rela <220FC8h, 2600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001418                 Elf64_Rela <220FD0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001430                 Elf64_Rela <220FD8h, 4900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001448                 Elf64_Rela <220FE0h, 4D00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001460                 Elf64_Rela <2210C0h, 5300000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001478                 Elf64_Rela <2210C8h, 5200000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001490                 Elf64_Rela <2210D0h, 5400000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000014A8                 Elf64_Rela <2210D8h, 5900000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000014C0                 Elf64_Rela <2210E0h, 5A00000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000014D8                 Elf64_Rela <2210E8h, 5600000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000014F0                 Elf64_Rela <221100h, 5800000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001508 ; ELF JMPREL Relocation Table
LOAD:0000000000001508                 Elf64_Rela <220D60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000001520                 Elf64_Rela <220D68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001538                 Elf64_Rela <220D70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001550                 Elf64_Rela <220D78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001568                 Elf64_Rela <220D80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001580                 Elf64_Rela <220D88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001598                 Elf64_Rela <220D90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT ftello
LOAD:00000000000015B0                 Elf64_Rela <220D98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000015C8                 Elf64_Rela <220DA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT iconv
LOAD:00000000000015E0                 Elf64_Rela <220DA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:00000000000015F8                 Elf64_Rela <220DB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000001610                 Elf64_Rela <220DB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fread
LOAD:0000000000001628                 Elf64_Rela <220DC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT iswcntrl
LOAD:0000000000001640                 Elf64_Rela <220DC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001658                 Elf64_Rela <220DD0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:0000000000001670                 Elf64_Rela <220DD8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT iswctype
LOAD:0000000000001688                 Elf64_Rela <220DE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000016A0                 Elf64_Rela <220DE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000016B8                 Elf64_Rela <220DF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT stpcpy
LOAD:00000000000016D0                 Elf64_Rela <220DF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000016E8                 Elf64_Rela <220E00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001700                 Elf64_Rela <220E08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001718                 Elf64_Rela <220E10h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001730                 Elf64_Rela <220E18h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001748                 Elf64_Rela <220E20h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001760                 Elf64_Rela <220E28h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:0000000000001778                 Elf64_Rela <220E30h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001790                 Elf64_Rela <220E38h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000017A8                 Elf64_Rela <220E40h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000017C0                 Elf64_Rela <220E48h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000017D8                 Elf64_Rela <220E50h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000017F0                 Elf64_Rela <220E58h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001808                 Elf64_Rela <220E60h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT freopen
LOAD:0000000000001820                 Elf64_Rela <220E68h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT strnlen
LOAD:0000000000001838                 Elf64_Rela <220E70h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001850                 Elf64_Rela <220E78h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001868                 Elf64_Rela <220E80h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001880                 Elf64_Rela <220E88h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT wctype
LOAD:0000000000001898                 Elf64_Rela <220E90h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000018B0                 Elf64_Rela <220E98h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000018C8                 Elf64_Rela <220EA0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000018E0                 Elf64_Rela <220EA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000018F8                 Elf64_Rela <220EB0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001910                 Elf64_Rela <220EB8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:0000000000001928                 Elf64_Rela <220EC0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT iswalnum
LOAD:0000000000001940                 Elf64_Rela <220EC8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001958                 Elf64_Rela <220ED0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT wcrtomb
LOAD:0000000000001970                 Elf64_Rela <220ED8h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001988                 Elf64_Rela <220EE0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000019A0                 Elf64_Rela <220EE8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:00000000000019B8                 Elf64_Rela <220EF0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000019D0                 Elf64_Rela <220EF8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000019E8                 Elf64_Rela <220F00h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001A00                 Elf64_Rela <220F08h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001A18                 Elf64_Rela <220F10h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001A30                 Elf64_Rela <220F18h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT iconv_close
LOAD:0000000000001A48                 Elf64_Rela <220F20h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT iswspace
LOAD:0000000000001A60                 Elf64_Rela <220F28h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT btowc
LOAD:0000000000001A78                 Elf64_Rela <220F30h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001A90                 Elf64_Rela <220F38h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001AA8                 Elf64_Rela <220F40h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001AC0                 Elf64_Rela <220F48h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001AD8                 Elf64_Rela <220F50h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001AF0                 Elf64_Rela <220F58h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT towlower
LOAD:0000000000001B08                 Elf64_Rela <220F60h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT towupper
LOAD:0000000000001B20                 Elf64_Rela <220F68h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001B38                 Elf64_Rela <220F70h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001B50                 Elf64_Rela <220F78h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001B68                 Elf64_Rela <220F80h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001B80                 Elf64_Rela <220F88h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT strdup
LOAD:0000000000001B98                 Elf64_Rela <220F90h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001BB0                 Elf64_Rela <220F98h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001BC8                 Elf64_Rela <220FA0h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001BE0                 Elf64_Rela <220FA8h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001BF8                 Elf64_Rela <220FB0h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT iconv_open
LOAD:0000000000001C10                 Elf64_Rela <220FB8h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001C10 LOAD            ends
LOAD:0000000000001C10
.init:0000000000001C28 ; ===========================================================================
.init:0000000000001C28
.init:0000000000001C28 ; Segment type: Pure code
.init:0000000000001C28 ; Segment permissions: Read/Execute
.init:0000000000001C28 _init           segment dword public 'CODE' use64
.init:0000000000001C28                 assume cs:_init
.init:0000000000001C28                 ;org 1C28h
.init:0000000000001C28                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001C28
.init:0000000000001C28 ; =============== S U B R O U T I N E =======================================
.init:0000000000001C28
.init:0000000000001C28
.init:0000000000001C28                 public _init_proc
.init:0000000000001C28 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001C28                 sub     rsp, 8          ; _init
.init:0000000000001C2C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001C33                 test    rax, rax
.init:0000000000001C36                 jz      short loc_1C3A
.init:0000000000001C38                 call    rax ; __gmon_start__
.init:0000000000001C3A
.init:0000000000001C3A loc_1C3A:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001C3A                 add     rsp, 8
.init:0000000000001C3E                 retn
.init:0000000000001C3E _init_proc      endp
.init:0000000000001C3E
.init:0000000000001C3E _init           ends
.init:0000000000001C3E
LOAD:0000000000001C3F ; ===========================================================================
LOAD:0000000000001C3F
LOAD:0000000000001C3F ; Segment type: Pure code
LOAD:0000000000001C3F ; Segment permissions: Read/Execute
LOAD:0000000000001C3F LOAD            segment byte public 'CODE' use64
LOAD:0000000000001C3F                 assume cs:LOAD
LOAD:0000000000001C3F                 ;org 1C3Fh
LOAD:0000000000001C3F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001C3F                 align 20h
LOAD:0000000000001C3F LOAD            ends
LOAD:0000000000001C3F
.plt:0000000000001C40 ; ===========================================================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Segment type: Pure code
.plt:0000000000001C40 ; Segment permissions: Read/Execute
.plt:0000000000001C40 _plt            segment para public 'CODE' use64
.plt:0000000000001C40                 assume cs:_plt
.plt:0000000000001C40                 ;org 1C40h
.plt:0000000000001C40                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40
.plt:0000000000001C40 sub_1C40        proc near               ; CODE XREF: .plt:0000000000001C5B↓j
.plt:0000000000001C40                                         ; .plt:0000000000001C6B↓j ...
.plt:0000000000001C40 ; __unwind {
.plt:0000000000001C40                 push    cs:qword_220D50
.plt:0000000000001C46                 jmp     cs:qword_220D58
.plt:0000000000001C46 sub_1C40        endp
.plt:0000000000001C46
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C4C                 align 10h
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001C50 ___ctype_toupper_loc proc near          ; CODE XREF: main+53C↓p
.plt:0000000000001C50                                         ; build_upper_buffer+1D↓p ...
.plt:0000000000001C50                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001C50 ___ctype_toupper_loc endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    0
.plt:0000000000001C5B                 jmp     sub_1C40
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; void free(void *ptr)
.plt:0000000000001C60 _free           proc near               ; CODE XREF: main:loc_279F↓p
.plt:0000000000001C60                                         ; mbsstr_trimmed_wordbounded+DF↓p ...
.plt:0000000000001C60                 jmp     cs:free_ptr
.plt:0000000000001C60 _free           endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    1
.plt:0000000000001C6B                 jmp     sub_1C40
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: noreturn thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; void __noreturn abort(void)
.plt:0000000000001C70 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001C70                                         ; mbsstr_trimmed_wordbounded:loc_6952↓p ...
.plt:0000000000001C70                 jmp     cs:abort_ptr
.plt:0000000000001C70 _abort          endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    2
.plt:0000000000001C7B                 jmp     sub_1C40
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; int *__errno_location(void)
.plt:0000000000001C80 ___errno_location proc near             ; CODE XREF: main+2448↓p
.plt:0000000000001C80                                         ; matcher_error+17↓p ...
.plt:0000000000001C80                 jmp     cs:__errno_location_ptr
.plt:0000000000001C80 ___errno_location endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    3
.plt:0000000000001C8B                 jmp     sub_1C40
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001C90 _strncmp        proc near               ; CODE XREF: usage+30C↓p
.plt:0000000000001C90                                         ; usage+3CD↓p ...
.plt:0000000000001C90                 jmp     cs:strncmp_ptr
.plt:0000000000001C90 _strncmp        endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    4
.plt:0000000000001C9B                 jmp     sub_1C40
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: noreturn thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; void __noreturn _exit(int status)
.plt:0000000000001CA0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001CA0                 jmp     cs:_exit_ptr
.plt:0000000000001CA0 __exit          endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    5
.plt:0000000000001CAB                 jmp     sub_1C40
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; __off_t ftello(FILE *stream)
.plt:0000000000001CB0 _ftello         proc near               ; CODE XREF: fread_file+1AB↓p
.plt:0000000000001CB0                 jmp     cs:ftello_ptr
.plt:0000000000001CB0 _ftello         endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    6
.plt:0000000000001CBB                 jmp     sub_1C40
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; size_t __fpending(FILE *fp)
.plt:0000000000001CC0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001CC0                 jmp     cs:__fpending_ptr
.plt:0000000000001CC0 ___fpending     endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    7
.plt:0000000000001CCB                 jmp     sub_1C40
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; size_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)
.plt:0000000000001CD0 _iconv          proc near               ; CODE XREF: libgettextpo_mem_cd_iconv+48↓p
.plt:0000000000001CD0                                         ; libgettextpo_mem_cd_iconv+C6↓p ...
.plt:0000000000001CD0                 jmp     cs:iconv_ptr
.plt:0000000000001CD0 _iconv          endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    8
.plt:0000000000001CDB                 jmp     sub_1C40
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; int ferror(FILE *stream)
.plt:0000000000001CE0 _ferror         proc near               ; CODE XREF: fread_file+EA↓p
.plt:0000000000001CE0                 jmp     cs:ferror_ptr
.plt:0000000000001CE0 _ferror         endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    9
.plt:0000000000001CEB                 jmp     sub_1C40
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000001CF0 _qsort          proc near               ; CODE XREF: main+1225↓p
.plt:0000000000001CF0                                         ; digest_word_file+8F↓p
.plt:0000000000001CF0                 jmp     cs:qsort_ptr
.plt:0000000000001CF0 _qsort          endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    0Ah
.plt:0000000000001CFB                 jmp     sub_1C40
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001D00 _fread          proc near               ; CODE XREF: fread_file+CF↓p
.plt:0000000000001D00                 jmp     cs:fread_ptr
.plt:0000000000001D00 _fread          endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    0Bh
.plt:0000000000001D0B                 jmp     sub_1C40
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int iswcntrl(wint_t wc)
.plt:0000000000001D10 _iswcntrl       proc near               ; CODE XREF: mb_width_aux+12↓p
.plt:0000000000001D10                 jmp     cs:iswcntrl_ptr
.plt:0000000000001D10 _iswcntrl       endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    0Ch
.plt:0000000000001D1B                 jmp     sub_1C40
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; char *textdomain(const char *domainname)
.plt:0000000000001D20 _textdomain     proc near               ; CODE XREF: main+76↓p
.plt:0000000000001D20                 jmp     cs:textdomain_ptr
.plt:0000000000001D20 _textdomain     endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    0Dh
.plt:0000000000001D2B                 jmp     sub_1C40
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001D30 ___strtol_internal proc near            ; CODE XREF: xstrtoimax+59↓p
.plt:0000000000001D30                 jmp     cs:__strtol_internal_ptr
.plt:0000000000001D30 ___strtol_internal endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    0Eh
.plt:0000000000001D3B                 jmp     sub_1C40
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; int iswctype(wint_t wc, wctype_t desc)
.plt:0000000000001D40 _iswctype       proc near               ; CODE XREF: check_node_accept_bytes_isra_31+D9↓p
.plt:0000000000001D40                 jmp     cs:iswctype_ptr
.plt:0000000000001D40 _iswctype       endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    0Fh
.plt:0000000000001D4B                 jmp     sub_1C40
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; int fclose(FILE *stream)
.plt:0000000000001D50 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001D50                                         ; rpl_fclose+6B↓j
.plt:0000000000001D50                 jmp     cs:fclose_ptr
.plt:0000000000001D50 _fclose         endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    10h
.plt:0000000000001D5B                 jmp     sub_1C40
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001D60 _bindtextdomain proc near               ; CODE XREF: main+6A↓p
.plt:0000000000001D60                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001D60 _bindtextdomain endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    11h
.plt:0000000000001D6B                 jmp     sub_1C40
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; char *stpcpy(char *dest, const char *src)
.plt:0000000000001D70 _stpcpy         proc near               ; CODE XREF: main+1849↓p
.plt:0000000000001D70                 jmp     cs:stpcpy_ptr
.plt:0000000000001D70 _stpcpy         endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    12h
.plt:0000000000001D7B                 jmp     sub_1C40
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001D80 _dcgettext      proc near               ; CODE XREF: main+2342↓p
.plt:0000000000001D80                                         ; main+2414↓p ...
.plt:0000000000001D80                 jmp     cs:dcgettext_ptr
.plt:0000000000001D80 _dcgettext      endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    13h
.plt:0000000000001D8B                 jmp     sub_1C40
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001D90 ___ctype_get_mb_cur_max proc near       ; CODE XREF: mbsstr_trimmed_wordbounded+6B↓p
.plt:0000000000001D90                                         ; mbsstr_trimmed_wordbounded:loc_61DE↓p ...
.plt:0000000000001D90                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001D90 ___ctype_get_mb_cur_max endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    14h
.plt:0000000000001D9B                 jmp     sub_1C40
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; size_t strlen(const char *s)
.plt:0000000000001DA0 _strlen         proc near               ; CODE XREF: copy_unescaped_string+7↓p
.plt:0000000000001DA0                                         ; compile_regex+41↓p ...
.plt:0000000000001DA0                 jmp     cs:strlen_ptr
.plt:0000000000001DA0 _strlen         endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    15h
.plt:0000000000001DAB                 jmp     sub_1C40
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: noreturn thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_473F↓p
.plt:0000000000001DB0                                         ; swallow_file_in_memory:loc_4E15↓p ...
.plt:0000000000001DB0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001DB0 ___stack_chk_fail endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    16h
.plt:0000000000001DBB                 jmp     sub_1C40
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001DC0 _getopt_long    proc near               ; CODE XREF: main+9E↓p
.plt:0000000000001DC0                 jmp     cs:getopt_long_ptr
.plt:0000000000001DC0 _getopt_long    endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    17h
.plt:0000000000001DCB                 jmp     sub_1C40
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001DD0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001DD0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001DD0 _mbrtowc        endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    18h
.plt:0000000000001DDB                 jmp     sub_1C40
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; int dup2(int fd, int fd2)
.plt:0000000000001DE0 _dup2           proc near               ; CODE XREF: freopen_safer+4F↓p
.plt:0000000000001DE0                                         ; freopen_safer+64↓p ...
.plt:0000000000001DE0                 jmp     cs:dup2_ptr
.plt:0000000000001DE0 _dup2           endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    19h
.plt:0000000000001DEB                 jmp     sub_1C40
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; char *strchr(const char *s, int c)
.plt:0000000000001DF0 _strchr         proc near               ; CODE XREF: proper_name_utf8+1B5↓p
.plt:0000000000001DF0                                         ; xstrtoimax+EC↓p ...
.plt:0000000000001DF0                 jmp     cs:strchr_ptr
.plt:0000000000001DF0 _strchr         endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    1Ah
.plt:0000000000001DFB                 jmp     sub_1C40
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001E00 ___overflow     proc near               ; CODE XREF: main+24E7↓p
.plt:0000000000001E00                                         ; main+24F6↓p ...
.plt:0000000000001E00                 jmp     cs:__overflow_ptr
.plt:0000000000001E00 ___overflow     endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    1Bh
.plt:0000000000001E0B                 jmp     sub_1C40
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; char *strrchr(const char *s, int c)
.plt:0000000000001E10 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001E10                 jmp     cs:strrchr_ptr
.plt:0000000000001E10 _strrchr        endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    1Ch
.plt:0000000000001E1B                 jmp     sub_1C40
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001E20 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001E20                                         ; rpl_fseeko+3B↓p
.plt:0000000000001E20                 jmp     cs:lseek_ptr
.plt:0000000000001E20 _lseek          endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    1Dh
.plt:0000000000001E2B                 jmp     sub_1C40
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: noreturn thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001E30 ___assert_fail  proc near               ; CODE XREF: mbuiter_multi_next_part_0+1E↓p
.plt:0000000000001E30                                         ; mbiter_multi_next_part_0+1E↓p ...
.plt:0000000000001E30                 jmp     cs:__assert_fail_ptr
.plt:0000000000001E30 ___assert_fail  endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    1Eh
.plt:0000000000001E3B                 jmp     sub_1C40
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001E40 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001E40                                         ; xzalloc+12↓j ...
.plt:0000000000001E40                 jmp     cs:memset_ptr
.plt:0000000000001E40 _memset         endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    1Fh
.plt:0000000000001E4B                 jmp     sub_1C40
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
.plt:0000000000001E50 _freopen        proc near               ; CODE XREF: freopen_safer+BB↓p
.plt:0000000000001E50                 jmp     cs:freopen_ptr
.plt:0000000000001E50 _freopen        endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    20h ; ' '
.plt:0000000000001E5B                 jmp     sub_1C40
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; size_t strnlen(const char *string, size_t maxlen)
.plt:0000000000001E60 _strnlen        proc near               ; CODE XREF: mbsstr+D0↓p
.plt:0000000000001E60                 jmp     cs:strnlen_ptr
.plt:0000000000001E60 _strnlen        endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    21h ; '!'
.plt:0000000000001E6B                 jmp     sub_1C40
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; int close(int fd)
.plt:0000000000001E70 _close          proc near               ; CODE XREF: protect_fd+29↓p
.plt:0000000000001E70                                         ; freopen_safer+133↓p ...
.plt:0000000000001E70                 jmp     cs:close_ptr
.plt:0000000000001E70 _close          endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    22h ; '"'
.plt:0000000000001E7B                 jmp     sub_1C40
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001E80 _memchr         proc near               ; CODE XREF: strnlen1+11↓p
.plt:0000000000001E80                 jmp     cs:memchr_ptr
.plt:0000000000001E80 _memchr         endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    23h ; '#'
.plt:0000000000001E8B                 jmp     sub_1C40
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001E90 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000001E90                                         ; argmatch_valid+96↓p ...
.plt:0000000000001E90                 jmp     cs:memcmp_ptr
.plt:0000000000001E90 _memcmp         endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    24h ; '$'
.plt:0000000000001E9B                 jmp     sub_1C40
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; wctype_t wctype(const char *property)
.plt:0000000000001EA0 _wctype         proc near               ; CODE XREF: build_charclass_isra_29+67↓p
.plt:0000000000001EA0                 jmp     cs:wctype_ptr
.plt:0000000000001EA0 _wctype         endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    25h ; '%'
.plt:0000000000001EAB                 jmp     sub_1C40
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001EB0 _fputs_unlocked proc near               ; CODE XREF: main+1C8F↓p
.plt:0000000000001EB0                                         ; main+1CE8↓p ...
.plt:0000000000001EB0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001EB0 _fputs_unlocked endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    26h ; '&'
.plt:0000000000001EBB                 jmp     sub_1C40
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001EC0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001EC0                                         ; re_acquire_state_context+CA↓p ...
.plt:0000000000001EC0                 jmp     cs:calloc_ptr
.plt:0000000000001EC0 _calloc         endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    27h ; '''
.plt:0000000000001ECB                 jmp     sub_1C40
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001ED0 _strcmp         proc near               ; CODE XREF: main+496↓p
.plt:0000000000001ED0                                         ; main+22C2↓p ...
.plt:0000000000001ED0                 jmp     cs:strcmp_ptr
.plt:0000000000001ED0 _strcmp         endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    28h ; '('
.plt:0000000000001EDB                 jmp     sub_1C40
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001EE0 _memcpy         proc near               ; CODE XREF: proper_name_utf8+15A↓p
.plt:0000000000001EE0                                         ; xmemdup+23↓j ...
.plt:0000000000001EE0                 jmp     cs:memcpy_ptr
.plt:0000000000001EE0 _memcpy         endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    29h ; ')'
.plt:0000000000001EEB                 jmp     sub_1C40
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; int fileno(FILE *stream)
.plt:0000000000001EF0 _fileno         proc near               ; CODE XREF: freopen_safer+1C↓p
.plt:0000000000001EF0                                         ; fread_file+2C↓p ...
.plt:0000000000001EF0                 jmp     cs:fileno_ptr
.plt:0000000000001EF0 _fileno         endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    2Ah ; '*'
.plt:0000000000001EFB                 jmp     sub_1C40
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; int wcwidth(wchar_t c)
.plt:0000000000001F00 _wcwidth        proc near               ; CODE XREF: mb_width_aux+3↓p
.plt:0000000000001F00                 jmp     cs:wcwidth_ptr
.plt:0000000000001F00 _wcwidth        endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    2Bh ; '+'
.plt:0000000000001F0B                 jmp     sub_1C40
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; int iswalnum(wint_t wc)
.plt:0000000000001F10 _iswalnum       proc near               ; CODE XREF: mbsstr_trimmed_wordbounded+2DA↓p
.plt:0000000000001F10                                         ; mbsstr_trimmed_wordbounded+50B↓p ...
.plt:0000000000001F10                 jmp     cs:iswalnum_ptr
.plt:0000000000001F10 _iswalnum       endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    2Ch ; ','
.plt:0000000000001F1B                 jmp     sub_1C40
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; void *malloc(size_t size)
.plt:0000000000001F20 _malloc         proc near               ; CODE XREF: fread_file+62↓p
.plt:0000000000001F20                                         ; xmalloc+4↓p ...
.plt:0000000000001F20                 jmp     cs:malloc_ptr
.plt:0000000000001F20 _malloc         endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    2Dh ; '-'
.plt:0000000000001F2B                 jmp     sub_1C40
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
.plt:0000000000001F30 _wcrtomb        proc near               ; CODE XREF: build_wcs_upper_buffer+139↓p
.plt:0000000000001F30                                         ; build_wcs_upper_buffer+29C↓p ...
.plt:0000000000001F30                 jmp     cs:wcrtomb_ptr
.plt:0000000000001F30 _wcrtomb        endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    2Eh ; '.'
.plt:0000000000001F3B                 jmp     sub_1C40
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ; int fflush(FILE *stream)
.plt:0000000000001F40 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001F40                                         ; rpl_fflush+3B↓j
.plt:0000000000001F40                 jmp     cs:fflush_ptr
.plt:0000000000001F40 _fflush         endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    2Fh ; '/'
.plt:0000000000001F4B                 jmp     sub_1C40
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ; char *nl_langinfo(nl_item item)
.plt:0000000000001F50 _nl_langinfo    proc near               ; CODE XREF: re_compile_internal+132↓p
.plt:0000000000001F50                                         ; locale_charset+9↓p
.plt:0000000000001F50                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001F50 _nl_langinfo    endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    30h ; '0'
.plt:0000000000001F5B                 jmp     sub_1C40
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001F60 ___fxstat       proc near               ; CODE XREF: fread_file+3D↓p
.plt:0000000000001F60                 jmp     cs:__fxstat_ptr
.plt:0000000000001F60 ___fxstat       endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    31h ; '1'
.plt:0000000000001F6B                 jmp     sub_1C40
.plt:0000000000001F70
.plt:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F70
.plt:0000000000001F70 ; Attributes: thunk
.plt:0000000000001F70
.plt:0000000000001F70 ; int __freading(FILE *fp)
.plt:0000000000001F70 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001F70                                         ; rpl_fflush+9↓p
.plt:0000000000001F70                 jmp     cs:__freading_ptr
.plt:0000000000001F70 ___freading     endp
.plt:0000000000001F70
.plt:0000000000001F76 ; ---------------------------------------------------------------------------
.plt:0000000000001F76                 push    32h ; '2'
.plt:0000000000001F7B                 jmp     sub_1C40
.plt:0000000000001F80
.plt:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F80
.plt:0000000000001F80 ; Attributes: thunk
.plt:0000000000001F80
.plt:0000000000001F80 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001F80 _fwrite_unlocked proc near              ; CODE XREF: main+18FD↓p
.plt:0000000000001F80                                         ; main+192D↓p ...
.plt:0000000000001F80                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001F80 _fwrite_unlocked endp
.plt:0000000000001F80
.plt:0000000000001F86 ; ---------------------------------------------------------------------------
.plt:0000000000001F86                 push    33h ; '3'
.plt:0000000000001F8B                 jmp     sub_1C40
.plt:0000000000001F90
.plt:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F90
.plt:0000000000001F90 ; Attributes: thunk
.plt:0000000000001F90
.plt:0000000000001F90 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001F90 _realloc        proc near               ; CODE XREF: fread_file+A9↓p
.plt:0000000000001F90                                         ; fread_file+187↓p ...
.plt:0000000000001F90                 jmp     cs:realloc_ptr
.plt:0000000000001F90 _realloc        endp
.plt:0000000000001F90
.plt:0000000000001F96 ; ---------------------------------------------------------------------------
.plt:0000000000001F96                 push    34h ; '4'
.plt:0000000000001F9B                 jmp     sub_1C40
.plt:0000000000001FA0
.plt:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FA0
.plt:0000000000001FA0 ; Attributes: thunk
.plt:0000000000001FA0
.plt:0000000000001FA0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001FA0 _setlocale      proc near               ; CODE XREF: main+57↓p
.plt:0000000000001FA0                                         ; usage+2F3↓p ...
.plt:0000000000001FA0                 jmp     cs:setlocale_ptr
.plt:0000000000001FA0 _setlocale      endp
.plt:0000000000001FA0
.plt:0000000000001FA6 ; ---------------------------------------------------------------------------
.plt:0000000000001FA6                 push    35h ; '5'
.plt:0000000000001FAB                 jmp     sub_1C40
.plt:0000000000001FB0
.plt:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FB0
.plt:0000000000001FB0 ; Attributes: thunk
.plt:0000000000001FB0
.plt:0000000000001FB0 ___printf_chk   proc near               ; CODE XREF: main+18AD↓p
.plt:0000000000001FB0                                         ; main+1C60↓p ...
.plt:0000000000001FB0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001FB0 ___printf_chk   endp
.plt:0000000000001FB0
.plt:0000000000001FB6 ; ---------------------------------------------------------------------------
.plt:0000000000001FB6                 push    36h ; '6'
.plt:0000000000001FBB                 jmp     sub_1C40
.plt:0000000000001FC0
.plt:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FC0
.plt:0000000000001FC0 ; Attributes: thunk
.plt:0000000000001FC0
.plt:0000000000001FC0 ; int iconv_close(iconv_t cd)
.plt:0000000000001FC0 _iconv_close    proc near               ; CODE XREF: str_iconv+76↓p
.plt:0000000000001FC0                                         ; str_iconv+CE↓p
.plt:0000000000001FC0                 jmp     cs:iconv_close_ptr
.plt:0000000000001FC0 _iconv_close    endp
.plt:0000000000001FC0
.plt:0000000000001FC6 ; ---------------------------------------------------------------------------
.plt:0000000000001FC6                 push    37h ; '7'
.plt:0000000000001FCB                 jmp     sub_1C40
.plt:0000000000001FD0
.plt:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FD0
.plt:0000000000001FD0 ; Attributes: thunk
.plt:0000000000001FD0
.plt:0000000000001FD0 ; int iswspace(wint_t wc)
.plt:0000000000001FD0 _iswspace       proc near               ; CODE XREF: trim2+DC↓p
.plt:0000000000001FD0                                         ; trim2+17D↓p ...
.plt:0000000000001FD0                 jmp     cs:iswspace_ptr
.plt:0000000000001FD0 _iswspace       endp
.plt:0000000000001FD0
.plt:0000000000001FD6 ; ---------------------------------------------------------------------------
.plt:0000000000001FD6                 push    38h ; '8'
.plt:0000000000001FDB                 jmp     sub_1C40
.plt:0000000000001FE0
.plt:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FE0
.plt:0000000000001FE0 ; Attributes: thunk
.plt:0000000000001FE0
.plt:0000000000001FE0 ; wint_t btowc(int c)
.plt:0000000000001FE0 _btowc          proc near               ; CODE XREF: parse_expression+F23↓p
.plt:0000000000001FE0                                         ; parse_expression+11F7↓p ...
.plt:0000000000001FE0                 jmp     cs:btowc_ptr
.plt:0000000000001FE0 _btowc          endp
.plt:0000000000001FE0
.plt:0000000000001FE6 ; ---------------------------------------------------------------------------
.plt:0000000000001FE6                 push    39h ; '9'
.plt:0000000000001FEB                 jmp     sub_1C40
.plt:0000000000001FF0
.plt:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FF0
.plt:0000000000001FF0 ; Attributes: thunk
.plt:0000000000001FF0
.plt:0000000000001FF0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001FF0 _memmove        proc near               ; CODE XREF: trim2+387↓p
.plt:0000000000001FF0                                         ; trim2+562↓p ...
.plt:0000000000001FF0                 jmp     cs:memmove_ptr
.plt:0000000000001FF0 _memmove        endp
.plt:0000000000001FF0
.plt:0000000000001FF6 ; ---------------------------------------------------------------------------
.plt:0000000000001FF6                 push    3Ah ; ':'
.plt:0000000000001FFB                 jmp     sub_1C40
.plt:0000000000002000
.plt:0000000000002000 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002000
.plt:0000000000002000 ; Attributes: thunk
.plt:0000000000002000
.plt:0000000000002000 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002000 _error          proc near               ; CODE XREF: main+2353↓p
.plt:0000000000002000                                         ; main+2428↓p ...
.plt:0000000000002000                 jmp     cs:error_ptr
.plt:0000000000002000 _error          endp
.plt:0000000000002000
.plt:0000000000002006 ; ---------------------------------------------------------------------------
.plt:0000000000002006                 push    3Bh ; ';'
.plt:000000000000200B                 jmp     sub_1C40
.plt:0000000000002010
.plt:0000000000002010 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002010
.plt:0000000000002010 ; Attributes: thunk
.plt:0000000000002010
.plt:0000000000002010 ; int open(const char *file, int oflag, ...)
.plt:0000000000002010 _open           proc near               ; CODE XREF: protect_fd+18↓p
.plt:0000000000002010                 jmp     cs:open_ptr
.plt:0000000000002010 _open           endp
.plt:0000000000002010
.plt:0000000000002016 ; ---------------------------------------------------------------------------
.plt:0000000000002016                 push    3Ch ; '<'
.plt:000000000000201B                 jmp     sub_1C40
.plt:0000000000002020
.plt:0000000000002020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002020
.plt:0000000000002020 ; Attributes: thunk
.plt:0000000000002020
.plt:0000000000002020 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002020 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_A35A↓j
.plt:0000000000002020                 jmp     cs:fseeko_ptr
.plt:0000000000002020 _fseeko         endp
.plt:0000000000002020
.plt:0000000000002026 ; ---------------------------------------------------------------------------
.plt:0000000000002026                 push    3Dh ; '='
.plt:000000000000202B                 jmp     sub_1C40
.plt:0000000000002030
.plt:0000000000002030 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002030
.plt:0000000000002030 ; Attributes: thunk
.plt:0000000000002030
.plt:0000000000002030 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000002030 _fopen          proc near               ; CODE XREF: internal_read_file+10↓p
.plt:0000000000002030                 jmp     cs:fopen_ptr
.plt:0000000000002030 _fopen          endp
.plt:0000000000002030
.plt:0000000000002036 ; ---------------------------------------------------------------------------
.plt:0000000000002036                 push    3Eh ; '>'
.plt:000000000000203B                 jmp     sub_1C40
.plt:0000000000002040
.plt:0000000000002040 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002040
.plt:0000000000002040 ; Attributes: thunk
.plt:0000000000002040
.plt:0000000000002040 ; wint_t towlower(wint_t wc)
.plt:0000000000002040 _towlower       proc near               ; CODE XREF: re_compile_fastmap_iter_isra_30+205↓p
.plt:0000000000002040                                         ; re_compile_fastmap_iter_isra_30+30E↓p
.plt:0000000000002040                 jmp     cs:towlower_ptr
.plt:0000000000002040 _towlower       endp
.plt:0000000000002040
.plt:0000000000002046 ; ---------------------------------------------------------------------------
.plt:0000000000002046                 push    3Fh ; '?'
.plt:000000000000204B                 jmp     sub_1C40
.plt:0000000000002050
.plt:0000000000002050 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002050
.plt:0000000000002050 ; Attributes: thunk
.plt:0000000000002050
.plt:0000000000002050 ; wint_t towupper(wint_t wc)
.plt:0000000000002050 _towupper       proc near               ; CODE XREF: build_wcs_upper_buffer+10C↓p
.plt:0000000000002050                                         ; build_wcs_upper_buffer+280↓p
.plt:0000000000002050                 jmp     cs:towupper_ptr
.plt:0000000000002050 _towupper       endp
.plt:0000000000002050
.plt:0000000000002056 ; ---------------------------------------------------------------------------
.plt:0000000000002056                 push    40h ; '@'
.plt:000000000000205B                 jmp     sub_1C40
.plt:0000000000002060
.plt:0000000000002060 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002060
.plt:0000000000002060 ; Attributes: thunk
.plt:0000000000002060
.plt:0000000000002060 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002060 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002060                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002060 ___cxa_atexit   endp
.plt:0000000000002060
.plt:0000000000002066 ; ---------------------------------------------------------------------------
.plt:0000000000002066                 push    41h ; 'A'
.plt:000000000000206B                 jmp     sub_1C40
.plt:0000000000002070
.plt:0000000000002070 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002070
.plt:0000000000002070 ; Attributes: noreturn thunk
.plt:0000000000002070
.plt:0000000000002070 ; void __noreturn exit(int status)
.plt:0000000000002070 _exit           proc near               ; CODE XREF: main+2B5↓p
.plt:0000000000002070                                         ; usage+58↓p
.plt:0000000000002070                 jmp     cs:exit_ptr
.plt:0000000000002070 _exit           endp
.plt:0000000000002070
.plt:0000000000002076 ; ---------------------------------------------------------------------------
.plt:0000000000002076                 push    42h ; 'B'
.plt:000000000000207B                 jmp     sub_1C40
.plt:0000000000002080
.plt:0000000000002080 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002080
.plt:0000000000002080 ; Attributes: thunk
.plt:0000000000002080
.plt:0000000000002080 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002080 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000002080                 jmp     cs:fwrite_ptr
.plt:0000000000002080 _fwrite         endp
.plt:0000000000002080
.plt:0000000000002086 ; ---------------------------------------------------------------------------
.plt:0000000000002086                 push    43h ; 'C'
.plt:000000000000208B                 jmp     sub_1C40
.plt:0000000000002090
.plt:0000000000002090 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002090
.plt:0000000000002090 ; Attributes: thunk
.plt:0000000000002090
.plt:0000000000002090 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000002090                                         ; argmatch_valid+7A↓p ...
.plt:0000000000002090                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002090 ___fprintf_chk  endp
.plt:0000000000002090
.plt:0000000000002096 ; ---------------------------------------------------------------------------
.plt:0000000000002096                 push    44h ; 'D'
.plt:000000000000209B                 jmp     sub_1C40
.plt:00000000000020A0
.plt:00000000000020A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020A0
.plt:00000000000020A0 ; Attributes: thunk
.plt:00000000000020A0
.plt:00000000000020A0 ; char *strdup(const char *s)
.plt:00000000000020A0 _strdup         proc near               ; CODE XREF: trim2+21↓p
.plt:00000000000020A0                                         ; str_iconv+2A↓p
.plt:00000000000020A0                 jmp     cs:strdup_ptr
.plt:00000000000020A0 _strdup         endp
.plt:00000000000020A0
.plt:00000000000020A6 ; ---------------------------------------------------------------------------
.plt:00000000000020A6                 push    45h ; 'E'
.plt:00000000000020AB                 jmp     sub_1C40
.plt:00000000000020B0
.plt:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020B0
.plt:00000000000020B0 ; Attributes: thunk
.plt:00000000000020B0
.plt:00000000000020B0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000020B0 _mbsinit        proc near               ; CODE XREF: mbsstr_trimmed_wordbounded+228↓p
.plt:00000000000020B0                                         ; mbsstr_trimmed_wordbounded+24C↓p ...
.plt:00000000000020B0                 jmp     cs:mbsinit_ptr
.plt:00000000000020B0 _mbsinit        endp
.plt:00000000000020B0
.plt:00000000000020B6 ; ---------------------------------------------------------------------------
.plt:00000000000020B6                 push    46h ; 'F'
.plt:00000000000020BB                 jmp     sub_1C40
.plt:00000000000020C0
.plt:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020C0
.plt:00000000000020C0 ; Attributes: thunk
.plt:00000000000020C0
.plt:00000000000020C0 ; int iswprint(wint_t wc)
.plt:00000000000020C0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000020C0                 jmp     cs:iswprint_ptr
.plt:00000000000020C0 _iswprint       endp
.plt:00000000000020C0
.plt:00000000000020C6 ; ---------------------------------------------------------------------------
.plt:00000000000020C6                 push    47h ; 'G'
.plt:00000000000020CB                 jmp     sub_1C40
.plt:00000000000020D0
.plt:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020D0
.plt:00000000000020D0 ; Attributes: thunk
.plt:00000000000020D0
.plt:00000000000020D0 ; const __int32_t **__ctype_tolower_loc(void)
.plt:00000000000020D0 ___ctype_tolower_loc proc near          ; CODE XREF: re_compile_fastmap_iter_isra_30+11F↓p
.plt:00000000000020D0                                         ; re_compile_fastmap_iter_isra_30+2D9↓p ...
.plt:00000000000020D0                 jmp     cs:__ctype_tolower_loc_ptr
.plt:00000000000020D0 ___ctype_tolower_loc endp
.plt:00000000000020D0
.plt:00000000000020D6 ; ---------------------------------------------------------------------------
.plt:00000000000020D6                 push    48h ; 'H'
.plt:00000000000020DB                 jmp     sub_1C40
.plt:00000000000020E0
.plt:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020E0
.plt:00000000000020E0 ; Attributes: thunk
.plt:00000000000020E0
.plt:00000000000020E0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000020E0 ___ctype_b_loc  proc near               ; CODE XREF: main+703↓p
.plt:00000000000020E0                                         ; main:loc_2964↓p ...
.plt:00000000000020E0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000020E0 ___ctype_b_loc  endp
.plt:00000000000020E0
.plt:00000000000020E6 ; ---------------------------------------------------------------------------
.plt:00000000000020E6                 push    49h ; 'I'
.plt:00000000000020EB                 jmp     sub_1C40
.plt:00000000000020F0
.plt:00000000000020F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020F0
.plt:00000000000020F0 ; Attributes: thunk
.plt:00000000000020F0
.plt:00000000000020F0 ; iconv_t iconv_open(const char *tocode, const char *fromcode)
.plt:00000000000020F0 _iconv_open     proc near               ; CODE XREF: str_iconv+4E↓p
.plt:00000000000020F0                 jmp     cs:iconv_open_ptr
.plt:00000000000020F0 _iconv_open     endp
.plt:00000000000020F0
.plt:00000000000020F6 ; ---------------------------------------------------------------------------
.plt:00000000000020F6                 push    4Ah ; 'J'
.plt:00000000000020FB                 jmp     sub_1C40
.plt:0000000000002100
.plt:0000000000002100 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002100
.plt:0000000000002100 ; Attributes: thunk
.plt:0000000000002100
.plt:0000000000002100 ___sprintf_chk  proc near               ; CODE XREF: main+1120↓p
.plt:0000000000002100                                         ; main+1869↓p ...
.plt:0000000000002100                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000002100 ___sprintf_chk  endp
.plt:0000000000002100
.plt:0000000000002106 ; ---------------------------------------------------------------------------
.plt:0000000000002106                 push    4Bh ; 'K'
.plt:000000000000210B                 jmp     sub_1C40
.plt:000000000000210B ; } // starts at 1C40
.plt:000000000000210B _plt            ends
.plt:000000000000210B
.plt.got:0000000000002110 ; ===========================================================================
.plt.got:0000000000002110
.plt.got:0000000000002110 ; Segment type: Pure code
.plt.got:0000000000002110 ; Segment permissions: Read/Execute
.plt.got:0000000000002110 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002110                 assume cs:_plt_got
.plt.got:0000000000002110                 ;org 2110h
.plt.got:0000000000002110                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002110
.plt.got:0000000000002110 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002110
.plt.got:0000000000002110 ; Attributes: thunk
.plt.got:0000000000002110
.plt.got:0000000000002110 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002110 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002110 ; __unwind {
.plt.got:0000000000002110                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002110 __cxa_finalize  endp
.plt.got:0000000000002110
.plt.got:0000000000002110 ; ---------------------------------------------------------------------------
.plt.got:0000000000002116                 align 8
.plt.got:0000000000002116 ; } // starts at 2110
.plt.got:0000000000002116 _plt_got        ends
.plt.got:0000000000002116
LOAD:0000000000002118 ; ===========================================================================
LOAD:0000000000002118
LOAD:0000000000002118 ; Segment type: Pure code
LOAD:0000000000002118 ; Segment permissions: Read/Execute
LOAD:0000000000002118 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002118                 assume cs:LOAD
LOAD:0000000000002118                 ;org 2118h
LOAD:0000000000002118                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002118                 align 20h
LOAD:0000000000002118 LOAD            ends
LOAD:0000000000002118
.text:0000000000002120 ; ===========================================================================
.text:0000000000002120
.text:0000000000002120 ; Segment type: Pure code
.text:0000000000002120 ; Segment permissions: Read/Execute
.text:0000000000002120 _text           segment para public 'CODE' use64
.text:0000000000002120                 assume cs:_text
.text:0000000000002120                 ;org 2120h
.text:0000000000002120                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002120
.text:0000000000002120 ; =============== S U B R O U T I N E =======================================
.text:0000000000002120
.text:0000000000002120 ; Attributes: noreturn
.text:0000000000002120
.text:0000000000002120 mbuiter_multi_next_part_0 proc near     ; CODE XREF: mbsstr_trimmed_wordbounded:loc_68FC↓p
.text:0000000000002120 ; __unwind {
.text:0000000000002120                 lea     rcx, __PRETTY_FUNCTION___5159 ; "mbuiter_multi_next"
.text:0000000000002127                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000000212E                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:0000000000002135                 sub     rsp, 8
.text:0000000000002139                 mov     edx, 0B3h       ; line
.text:000000000000213E                 call    ___assert_fail
.text:000000000000213E ; } // starts at 2120
.text:000000000000213E mbuiter_multi_next_part_0 endp
.text:000000000000213E
.text:0000000000002143
.text:0000000000002143 ; =============== S U B R O U T I N E =======================================
.text:0000000000002143
.text:0000000000002143 ; Attributes: noreturn
.text:0000000000002143
.text:0000000000002143 mbiter_multi_next_part_0 proc near      ; CODE XREF: trim2:loc_927B↓p
.text:0000000000002143 ; __unwind {
.text:0000000000002143                 lea     rcx, __PRETTY_FUNCTION___5134 ; "mbiter_multi_next"
.text:000000000000214A                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/mbiter.h"
.text:0000000000002151                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:0000000000002158                 sub     rsp, 8
.text:000000000000215C                 mov     edx, 0AAh       ; line
.text:0000000000002161                 call    ___assert_fail
.text:0000000000002161 ; } // starts at 2143
.text:0000000000002161 mbiter_multi_next_part_0 endp
.text:0000000000002161
.text:0000000000002166
.text:0000000000002166 ; =============== S U B R O U T I N E =======================================
.text:0000000000002166
.text:0000000000002166 ; Attributes: noreturn
.text:0000000000002166
.text:0000000000002166 mbuiter_multi_next_part_0_0 proc near   ; CODE XREF: knuth_morris_pratt_multibyte:loc_19482↓p
.text:0000000000002166                                         ; mbsstr:loc_1A262↓p
.text:0000000000002166 ; __unwind {
.text:0000000000002166                 lea     rcx, __PRETTY_FUNCTION___5056 ; "mbuiter_multi_next"
.text:000000000000216D                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000002174                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:000000000000217B                 sub     rsp, 8
.text:000000000000217F                 mov     edx, 0B3h       ; line
.text:0000000000002184                 call    ___assert_fail
.text:0000000000002184 ; } // starts at 2166
.text:0000000000002184 mbuiter_multi_next_part_0_0 endp
.text:0000000000002184
.text:0000000000002184 ; ---------------------------------------------------------------------------
.text:0000000000002189                 align 10h
.text:0000000000002190
.text:0000000000002190 ; =============== S U B R O U T I N E =======================================
.text:0000000000002190
.text:0000000000002190
.text:0000000000002190 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002190                 public main
.text:0000000000002190 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002190
.text:0000000000002190 var_C8          = qword ptr -0C8h
.text:0000000000002190 var_C0          = qword ptr -0C0h
.text:0000000000002190 var_B8          = qword ptr -0B8h
.text:0000000000002190 var_B0          = qword ptr -0B0h
.text:0000000000002190 var_A8          = qword ptr -0A8h
.text:0000000000002190 var_A0          = qword ptr -0A0h
.text:0000000000002190 var_98          = qword ptr -98h
.text:0000000000002190 var_90          = dword ptr -90h
.text:0000000000002190 var_89          = byte ptr -89h
.text:0000000000002190 var_88          = qword ptr -88h
.text:0000000000002190 var_80          = qword ptr -80h
.text:0000000000002190 var_78          = qword ptr -78h
.text:0000000000002190 var_70          = qword ptr -70h
.text:0000000000002190 ptr             = qword ptr -68h
.text:0000000000002190 var_58          = byte ptr -58h
.text:0000000000002190 var_40          = qword ptr -40h
.text:0000000000002190
.text:0000000000002190 ; __unwind {
.text:0000000000002190                 push    r15
.text:0000000000002192                 push    r14
.text:0000000000002194                 lea     r14, format_vals
.text:000000000000219B                 push    r13
.text:000000000000219D                 push    r12
.text:000000000000219F                 lea     r13, long_options
.text:00000000000021A6                 push    rbp
.text:00000000000021A7                 push    rbx
.text:00000000000021A8                 mov     ebx, edi
.text:00000000000021AA                 mov     rbp, rsi
.text:00000000000021AD                 lea     r12, shortopts  ; "AF:GM:ORS:TW:b:i:fg:o:trw:"
.text:00000000000021B4                 sub     rsp, 98h
.text:00000000000021BB                 mov     rdi, [rsi]
.text:00000000000021BE                 mov     rax, fs:28h
.text:00000000000021C7                 mov     [rsp+0C8h+var_40], rax
.text:00000000000021CF                 xor     eax, eax
.text:00000000000021D1                 lea     r15, [rsp+0C8h+ptr]
.text:00000000000021D6                 call    set_program_name
.text:00000000000021DB                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000021E2                 mov     edi, 6          ; category
.text:00000000000021E7                 call    _setlocale
.text:00000000000021EC                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000021F3                 lea     rdi, domainname ; "coreutils"
.text:00000000000021FA                 call    _bindtextdomain
.text:00000000000021FF                 lea     rdi, domainname ; "coreutils"
.text:0000000000002206                 call    _textdomain
.text:000000000000220B                 lea     rdi, close_stdout
.text:0000000000002212                 call    atexit
.text:0000000000002217                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: main+E8↓j
.text:0000000000002220                                         ; main+117↓j ...
.text:0000000000002220                 xor     r8d, r8d        ; longind
.text:0000000000002223                 mov     rcx, r13        ; longopts
.text:0000000000002226                 mov     rdx, r12        ; shortopts
.text:0000000000002229                 mov     rsi, rbp        ; argv
.text:000000000000222C                 mov     edi, ebx        ; argc
.text:000000000000222E                 call    _getopt_long
.text:0000000000002233                 cmp     eax, 0FFFFFFFFh
.text:0000000000002236                 jz      loc_24FD
.text:000000000000223C                 cmp     eax, 53h ; 'S'
.text:000000000000223F                 jz      loc_24BA
.text:0000000000002245                 jle     short loc_227A
.text:0000000000002247                 cmp     eax, 67h ; 'g'
.text:000000000000224A                 jz      loc_2476
.text:0000000000002250                 jle     short loc_22AC
.text:0000000000002252                 cmp     eax, 72h ; 'r'
.text:0000000000002255                 jz      loc_24AE
.text:000000000000225B                 jg      loc_232A
.text:0000000000002261                 cmp     eax, 69h ; 'i'
.text:0000000000002264                 jnz     loc_2374
.text:000000000000226A                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002271                 mov     cs:ignore_file, rax
.text:0000000000002278                 jmp     short loc_2220
.text:000000000000227A ; ---------------------------------------------------------------------------
.text:000000000000227A
.text:000000000000227A loc_227A:                               ; CODE XREF: main+B5↑j
.text:000000000000227A                 cmp     eax, 46h ; 'F'
.text:000000000000227D                 jz      loc_24E5
.text:0000000000002283                 jle     short loc_22D7
.text:0000000000002285                 cmp     eax, 4Dh ; 'M'
.text:0000000000002288                 jz      loc_24D2
.text:000000000000228E                 jle     loc_2390
.text:0000000000002294                 cmp     eax, 4Fh ; 'O'
.text:0000000000002297                 jnz     loc_23D2
.text:000000000000229D                 mov     cs:output_format, 2
.text:00000000000022A7                 jmp     loc_2220
.text:00000000000022AC ; ---------------------------------------------------------------------------
.text:00000000000022AC
.text:00000000000022AC loc_22AC:                               ; CODE XREF: main+C0↑j
.text:00000000000022AC                 cmp     eax, 57h ; 'W'
.text:00000000000022AF                 jz      loc_244A
.text:00000000000022B5                 jle     loc_23BA
.text:00000000000022BB                 cmp     eax, 62h ; 'b'
.text:00000000000022BE                 jnz     loc_23A5
.text:00000000000022C4                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000022CB                 mov     cs:break_file, rax
.text:00000000000022D2                 jmp     loc_2220
.text:00000000000022D7 ; ---------------------------------------------------------------------------
.text:00000000000022D7
.text:00000000000022D7 loc_22D7:                               ; CODE XREF: main+F3↑j
.text:00000000000022D7                 cmp     eax, 0FFFFFF7Eh
.text:00000000000022DC                 jz      loc_45F5
.text:00000000000022E2                 jle     loc_23FC
.text:00000000000022E8                 cmp     eax, 0Ah
.text:00000000000022EB                 jnz     loc_23E7
.text:00000000000022F1                 mov     r9, cs:argmatch_die
.text:00000000000022F8                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:00000000000022FF                 lea     rdx, format_args
.text:0000000000002306                 lea     rdi, aFormat    ; "--format"
.text:000000000000230D                 mov     r8d, 4
.text:0000000000002313                 mov     rcx, r14
.text:0000000000002316                 call    __xargmatch_internal
.text:000000000000231B                 mov     eax, [r14+rax*4]
.text:000000000000231F                 mov     cs:output_format, eax
.text:0000000000002325                 jmp     loc_2220
.text:000000000000232A ; ---------------------------------------------------------------------------
.text:000000000000232A
.text:000000000000232A loc_232A:                               ; CODE XREF: main+CB↑j
.text:000000000000232A                 cmp     eax, 74h ; 't'
.text:000000000000232D                 jz      loc_2220
.text:0000000000002333                 cmp     eax, 77h ; 'w'
.text:0000000000002336                 jnz     loc_44E8
.text:000000000000233C                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:0000000000002343                 xor     r8d, r8d
.text:0000000000002346                 xor     edx, edx
.text:0000000000002348                 xor     esi, esi
.text:000000000000234A                 mov     rcx, r15
.text:000000000000234D                 call    xstrtoimax
.text:0000000000002352                 test    eax, eax
.text:0000000000002354                 jnz     loc_463C
.text:000000000000235A                 mov     rax, [rsp+0C8h+ptr]
.text:000000000000235F                 test    rax, rax
.text:0000000000002362                 jle     loc_463C
.text:0000000000002368                 mov     cs:line_width, rax
.text:000000000000236F                 jmp     loc_2220
.text:0000000000002374 ; ---------------------------------------------------------------------------
.text:0000000000002374
.text:0000000000002374 loc_2374:                               ; CODE XREF: main+D4↑j
.text:0000000000002374                 cmp     eax, 6Fh ; 'o'
.text:0000000000002377                 jnz     loc_44E8
.text:000000000000237D                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002384                 mov     cs:only_file, rax
.text:000000000000238B                 jmp     loc_2220
.text:0000000000002390 ; ---------------------------------------------------------------------------
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: main+FE↑j
.text:0000000000002390                 cmp     eax, 47h ; 'G'
.text:0000000000002393                 jnz     loc_44E8
.text:0000000000002399                 mov     cs:gnu_extensions, 0
.text:00000000000023A0                 jmp     loc_2220
.text:00000000000023A5 ; ---------------------------------------------------------------------------
.text:00000000000023A5
.text:00000000000023A5 loc_23A5:                               ; CODE XREF: main+12E↑j
.text:00000000000023A5                 cmp     eax, 66h ; 'f'
.text:00000000000023A8                 jnz     loc_44E8
.text:00000000000023AE                 mov     cs:ignore_case, 1
.text:00000000000023B5                 jmp     loc_2220
.text:00000000000023BA ; ---------------------------------------------------------------------------
.text:00000000000023BA
.text:00000000000023BA loc_23BA:                               ; CODE XREF: main+125↑j
.text:00000000000023BA                 cmp     eax, 54h ; 'T'
.text:00000000000023BD                 jnz     loc_44E8
.text:00000000000023C3                 mov     cs:output_format, 3
.text:00000000000023CD                 jmp     loc_2220
.text:00000000000023D2 ; ---------------------------------------------------------------------------
.text:00000000000023D2
.text:00000000000023D2 loc_23D2:                               ; CODE XREF: main+107↑j
.text:00000000000023D2                 cmp     eax, 52h ; 'R'
.text:00000000000023D5                 jnz     loc_44E8
.text:00000000000023DB                 mov     cs:right_reference, 1
.text:00000000000023E2                 jmp     loc_2220
.text:00000000000023E7 ; ---------------------------------------------------------------------------
.text:00000000000023E7
.text:00000000000023E7 loc_23E7:                               ; CODE XREF: main+15B↑j
.text:00000000000023E7                 cmp     eax, 41h ; 'A'
.text:00000000000023EA                 jnz     loc_44E8
.text:00000000000023F0                 mov     cs:auto_reference, 1
.text:00000000000023F7                 jmp     loc_2220
.text:00000000000023FC ; ---------------------------------------------------------------------------
.text:00000000000023FC
.text:00000000000023FC loc_23FC:                               ; CODE XREF: main+152↑j
.text:00000000000023FC                 cmp     eax, 0FFFFFF7Dh
.text:0000000000002401                 jnz     loc_44E8
.text:0000000000002407                 lea     rsi, s          ; "Fran"
.text:000000000000240E                 lea     rdi, aFPinard   ; "F. Pinard"
.text:0000000000002415                 call    proper_name_utf8
.text:000000000000241A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002421                 mov     rcx, cs:Version
.text:0000000000002428                 lea     rdx, unk_1B7D2
.text:000000000000242F                 lea     rsi, aPtx       ; "ptx"
.text:0000000000002436                 mov     r8, rax
.text:0000000000002439                 xor     r9d, r9d
.text:000000000000243C                 xor     eax, eax
.text:000000000000243E                 call    version_etc
.text:0000000000002443                 xor     edi, edi        ; status
.text:0000000000002445                 call    _exit
.text:000000000000244A ; ---------------------------------------------------------------------------
.text:000000000000244A
.text:000000000000244A loc_244A:                               ; CODE XREF: main+11F↑j
.text:000000000000244A                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002451                 call    copy_unescaped_string
.text:0000000000002456                 mov     cs:_word_regex, rax
.text:000000000000245D                 cmp     byte ptr [rax], 0
.text:0000000000002460                 jnz     loc_2220
.text:0000000000002466                 mov     cs:_word_regex, 0
.text:0000000000002471                 jmp     loc_2220
.text:0000000000002476 ; ---------------------------------------------------------------------------
.text:0000000000002476
.text:0000000000002476 loc_2476:                               ; CODE XREF: main+BA↑j
.text:0000000000002476                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:000000000000247D                 xor     r8d, r8d
.text:0000000000002480                 xor     edx, edx
.text:0000000000002482                 xor     esi, esi
.text:0000000000002484                 mov     rcx, r15
.text:0000000000002487                 call    xstrtoimax
.text:000000000000248C                 test    eax, eax
.text:000000000000248E                 jnz     loc_4606
.text:0000000000002494                 mov     rax, [rsp+0C8h+ptr]
.text:0000000000002499                 test    rax, rax
.text:000000000000249C                 jle     loc_4606
.text:00000000000024A2                 mov     cs:gap_size, rax
.text:00000000000024A9                 jmp     loc_2220
.text:00000000000024AE ; ---------------------------------------------------------------------------
.text:00000000000024AE
.text:00000000000024AE loc_24AE:                               ; CODE XREF: main+C5↑j
.text:00000000000024AE                 mov     cs:input_reference, 1
.text:00000000000024B5                 jmp     loc_2220
.text:00000000000024BA ; ---------------------------------------------------------------------------
.text:00000000000024BA
.text:00000000000024BA loc_24BA:                               ; CODE XREF: main+AF↑j
.text:00000000000024BA                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000024C1                 call    copy_unescaped_string
.text:00000000000024C6                 mov     cs:context_regex, rax
.text:00000000000024CD                 jmp     loc_2220
.text:00000000000024D2 ; ---------------------------------------------------------------------------
.text:00000000000024D2
.text:00000000000024D2 loc_24D2:                               ; CODE XREF: main+F8↑j
.text:00000000000024D2                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000024D9                 mov     cs:macro_name, rax
.text:00000000000024E0                 jmp     loc_2220
.text:00000000000024E5 ; ---------------------------------------------------------------------------
.text:00000000000024E5
.text:00000000000024E5 loc_24E5:                               ; CODE XREF: main+ED↑j
.text:00000000000024E5                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000024EC                 call    copy_unescaped_string
.text:00000000000024F1                 mov     cs:truncation_string, rax
.text:00000000000024F8                 jmp     loc_2220
.text:00000000000024FD ; ---------------------------------------------------------------------------
.text:00000000000024FD
.text:00000000000024FD loc_24FD:                               ; CODE XREF: main+A6↑j
.text:00000000000024FD                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002503                 cmp     eax, ebx
.text:0000000000002505                 jz      loc_265B
.text:000000000000250B                 cmp     cs:gnu_extensions, 0
.text:0000000000002512                 jz      loc_43E9
.text:0000000000002518                 mov     ecx, ebx
.text:000000000000251A                 mov     edx, 8
.text:000000000000251F                 xor     esi, esi
.text:0000000000002521                 sub     ecx, eax
.text:0000000000002523                 mov     rax, rdx
.text:0000000000002526                 mov     cs:number_input_files, ecx
.text:000000000000252C                 movsxd  rcx, ecx
.text:000000000000252F                 mul     rcx
.text:0000000000002532                 jo      loc_45FC
.text:0000000000002538
.text:0000000000002538 loc_2538:                               ; CODE XREF: main+2471↓j
.text:0000000000002538                 test    rax, rax
.text:000000000000253B                 js      loc_31E5
.text:0000000000002541                 test    rsi, rsi
.text:0000000000002544                 jnz     loc_31E5
.text:000000000000254A                 lea     rdi, ds:0[rcx*8]
.text:0000000000002552                 call    xmalloc
.text:0000000000002557                 movsxd  rcx, cs:number_input_files
.text:000000000000255E                 mov     edx, 8
.text:0000000000002563                 mov     cs:input_file_name, rax
.text:000000000000256A                 mov     rax, rdx
.text:000000000000256D                 xor     esi, esi
.text:000000000000256F                 mul     rcx
.text:0000000000002572                 jo      loc_454C
.text:0000000000002578
.text:0000000000002578 loc_2578:                               ; CODE XREF: main+23C1↓j
.text:0000000000002578                 test    rax, rax
.text:000000000000257B                 js      loc_31E5
.text:0000000000002581                 test    rsi, rsi
.text:0000000000002584                 jnz     loc_31E5
.text:000000000000258A                 lea     rdi, ds:0[rcx*8]
.text:0000000000002592                 call    xmalloc
.text:0000000000002597                 movsxd  rcx, cs:number_input_files
.text:000000000000259E                 mov     edx, 10h
.text:00000000000025A3                 mov     cs:file_line_count, rax
.text:00000000000025AA                 mov     rax, rdx
.text:00000000000025AD                 xor     esi, esi
.text:00000000000025AF                 mul     rcx
.text:00000000000025B2                 jo      loc_4542
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: main+23B7↓j
.text:00000000000025B8                 test    rax, rax
.text:00000000000025BB                 js      loc_31E5
.text:00000000000025C1                 test    rsi, rsi
.text:00000000000025C4                 jnz     loc_31E5
.text:00000000000025CA                 mov     rdi, rcx
.text:00000000000025CD                 shl     rdi, 4
.text:00000000000025D1                 call    xmalloc
.text:00000000000025D6                 mov     edx, cs:number_input_files
.text:00000000000025DC                 mov     cs:text_buffers, rax
.text:00000000000025E3                 test    edx, edx
.text:00000000000025E5                 jle     loc_26A6
.text:00000000000025EB                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000025F1                 lea     r13d, [rdx-1]
.text:00000000000025F5                 lea     ebx, [rax+1]
.text:00000000000025F8                 movsxd  rdx, eax
.text:00000000000025FB                 movsxd  rbx, ebx
.text:00000000000025FE                 imul    rax, rbx, -8
.text:0000000000002602                 lea     r12, [rbx+1]
.text:0000000000002606                 add     r13, r12
.text:0000000000002609                 lea     r14, [rax+rdx*8]
.text:000000000000260D                 add     rax, cs:input_file_name
.text:0000000000002614                 add     r14, rbp
.text:0000000000002617                 mov     rbp, rax
.text:000000000000261A                 jmp     short loc_2646
.text:000000000000261C ; ---------------------------------------------------------------------------
.text:000000000000261C
.text:000000000000261C loc_261C:                               ; CODE XREF: main+4BE↓j
.text:000000000000261C                 lea     rsi, aLt+2      ; s2
.text:0000000000002623                 mov     rdi, r15        ; s1
.text:0000000000002626                 call    _strcmp
.text:000000000000262B                 test    eax, eax
.text:000000000000262D                 jz      short loc_2650
.text:000000000000262F                 mov     [rbp+rbx*8+0], r15
.text:0000000000002634
.text:0000000000002634 loc_2634:                               ; CODE XREF: main+4C9↓j
.text:0000000000002634                 cmp     r13, r12
.text:0000000000002637                 mov     cs:optind@@GLIBC_2_2_5, ebx
.text:000000000000263D                 mov     rbx, r12
.text:0000000000002640                 jz      short loc_26A6
.text:0000000000002642                 add     r12, 1
.text:0000000000002646
.text:0000000000002646 loc_2646:                               ; CODE XREF: main+48A↑j
.text:0000000000002646                 mov     r15, [r14+rbx*8]
.text:000000000000264A                 cmp     byte ptr [r15], 0
.text:000000000000264E                 jnz     short loc_261C
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: main+49D↑j
.text:0000000000002650                 mov     qword ptr [rbp+rbx*8+0], 0
.text:0000000000002659                 jmp     short loc_2634
.text:000000000000265B ; ---------------------------------------------------------------------------
.text:000000000000265B
.text:000000000000265B loc_265B:                               ; CODE XREF: main+375↑j
.text:000000000000265B                 mov     edi, 8
.text:0000000000002660                 call    xmalloc
.text:0000000000002665                 mov     edi, 8
.text:000000000000266A                 mov     cs:input_file_name, rax
.text:0000000000002671                 call    xmalloc
.text:0000000000002676                 mov     edi, 10h
.text:000000000000267B                 mov     cs:file_line_count, rax
.text:0000000000002682                 call    xmalloc
.text:0000000000002687                 mov     cs:text_buffers, rax
.text:000000000000268E                 mov     rax, cs:input_file_name
.text:0000000000002695                 mov     cs:number_input_files, 1
.text:000000000000269F                 mov     qword ptr [rax], 0
.text:00000000000026A6
.text:00000000000026A6 loc_26A6:                               ; CODE XREF: main+455↑j
.text:00000000000026A6                                         ; main+4B0↑j ...
.text:00000000000026A6                 cmp     cs:output_format, 0
.text:00000000000026AD                 jnz     short loc_26C3
.text:00000000000026AF                 cmp     cs:gnu_extensions, 1
.text:00000000000026B6                 sbb     eax, eax
.text:00000000000026B8                 not     eax
.text:00000000000026BA                 add     eax, 2
.text:00000000000026BD                 mov     cs:output_format, eax
.text:00000000000026C3
.text:00000000000026C3 loc_26C3:                               ; CODE XREF: main+51D↑j
.text:00000000000026C3                 cmp     cs:ignore_case, 0
.text:00000000000026CA                 jz      short loc_26FB
.text:00000000000026CC                 call    ___ctype_toupper_loc
.text:00000000000026D1                 lea     rcx, folded_chars
.text:00000000000026D8                 xor     edx, edx
.text:00000000000026DA                 nop     word ptr [rax+rax+00h]
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: main+569↓j
.text:00000000000026E0                 mov     rsi, [rax]
.text:00000000000026E3                 add     rcx, 1
.text:00000000000026E7                 mov     esi, [rsi+rdx]
.text:00000000000026EA                 add     rdx, 4
.text:00000000000026EE                 mov     [rcx-1], sil
.text:00000000000026F2                 cmp     rdx, 400h
.text:00000000000026F9                 jnz     short loc_26E0
.text:00000000000026FB
.text:00000000000026FB loc_26FB:                               ; CODE XREF: main+53A↑j
.text:00000000000026FB                 mov     rax, cs:context_regex
.text:0000000000002702                 test    rax, rax
.text:0000000000002705                 jz      loc_4505
.text:000000000000270B                 cmp     byte ptr [rax], 0
.text:000000000000270E                 jz      loc_3392
.text:0000000000002714
.text:0000000000002714 loc_2714:                               ; CODE XREF: main+2395↓j
.text:0000000000002714                                         ; main+23AD↓j
.text:0000000000002714                 lea     rdi, context_regex
.text:000000000000271B                 call    compile_regex
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: main+120D↓j
.text:0000000000002720                 cmp     cs:_word_regex, 0
.text:0000000000002728                 jnz     loc_3226
.text:000000000000272E                 mov     rdi, cs:break_file
.text:0000000000002735                 test    rdi, rdi
.text:0000000000002738                 jz      loc_3350
.text:000000000000273E
.text:000000000000273E loc_273E:                               ; CODE XREF: main+10B2↓j
.text:000000000000273E                 lea     rsi, [rsp+0C8h+ptr]
.text:0000000000002743                 call    swallow_file_in_memory
.text:0000000000002748                 lea     rdx, _word_fastmap
.text:000000000000274F                 mov     ecx, 20h ; ' '
.text:0000000000002754                 mov     rax, 101010101010101h
.text:000000000000275E                 mov     rdi, rdx
.text:0000000000002761                 rep stosq
.text:0000000000002764                 mov     rdi, [rsp+0C8h+ptr] ; ptr
.text:0000000000002769                 mov     rcx, [rsp+0C8h+ptr+8]
.text:000000000000276E                 cmp     rdi, rcx
.text:0000000000002771                 jnb     short loc_2786
.text:0000000000002773                 mov     rax, rdi
.text:0000000000002776
.text:0000000000002776 loc_2776:                               ; CODE XREF: main+5F4↓j
.text:0000000000002776                 movzx   esi, byte ptr [rax]
.text:0000000000002779                 add     rax, 1
.text:000000000000277D                 cmp     rax, rcx
.text:0000000000002780                 mov     byte ptr [rdx+rsi], 0
.text:0000000000002784                 jnz     short loc_2776
.text:0000000000002786
.text:0000000000002786 loc_2786:                               ; CODE XREF: main+5E1↑j
.text:0000000000002786                 cmp     cs:gnu_extensions, 0
.text:000000000000278D                 jnz     short loc_279F
.text:000000000000278F                 mov     cs:byte_2213A0, 0
.text:0000000000002796                 mov     cs:word_221389, 0
.text:000000000000279F
.text:000000000000279F loc_279F:                               ; CODE XREF: main+5FD↑j
.text:000000000000279F                 call    _free
.text:00000000000027A4
.text:00000000000027A4 loc_27A4:                               ; CODE XREF: main+10AC↓j
.text:00000000000027A4                                         ; main+11FD↓j ...
.text:00000000000027A4                 mov     rdi, cs:ignore_file
.text:00000000000027AB                 test    rdi, rdi
.text:00000000000027AE                 jz      short loc_27CA
.text:00000000000027B0                 lea     rsi, ignore_table
.text:00000000000027B7                 call    digest_word_file
.text:00000000000027BC                 cmp     cs:qword_221350, 0
.text:00000000000027C4                 jz      loc_3340
.text:00000000000027CA
.text:00000000000027CA loc_27CA:                               ; CODE XREF: main+61E↑j
.text:00000000000027CA                                         ; main+11BB↓j
.text:00000000000027CA                 mov     rdi, cs:only_file
.text:00000000000027D1                 test    rdi, rdi
.text:00000000000027D4                 jz      short loc_27F0
.text:00000000000027D6                 lea     rsi, only_table
.text:00000000000027DD                 call    digest_word_file
.text:00000000000027E2                 cmp     cs:qword_221330, 0
.text:00000000000027EA                 jz      loc_3330
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: main+644↑j
.text:00000000000027F0                                         ; main+11AB↓j
.text:00000000000027F0                 cmp     cs:number_input_files, 0
.text:00000000000027F7                 mov     cs:number_of_occurs, 0
.text:0000000000002802                 mov     cs:total_line_count, 0
.text:000000000000280D                 mov     cs:maximum_word_length, 0
.text:0000000000002818                 mov     cs:reference_max_width, 0
.text:0000000000002823                 jle     loc_2BDD
.text:0000000000002829                 lea     r15, _word_fastmap
.text:0000000000002830                 mov     [rsp+0C8h+var_70], 0
.text:0000000000002839                 mov     [rsp+0C8h+var_90], 0
.text:0000000000002841
.text:0000000000002841 loc_2841:                               ; CODE XREF: main+A37↓j
.text:0000000000002841                 mov     rdi, [rsp+0C8h+var_70]
.text:0000000000002846                 mov     rax, cs:input_file_name
.text:000000000000284D                 mov     rsi, cs:text_buffers
.text:0000000000002854                 lea     rbx, [rdi+rdi]
.text:0000000000002858                 mov     rdi, [rax+rdi]
.text:000000000000285C                 add     rsi, rbx
.text:000000000000285F                 call    swallow_file_in_memory
.text:0000000000002864                 mov     rax, cs:text_buffers
.text:000000000000286B                 add     rax, rbx
.text:000000000000286E                 cmp     cs:input_reference, 0
.text:0000000000002875                 mov     [rsp+0C8h+var_B0], rax
.text:000000000000287A                 mov     r12, [rax]
.text:000000000000287D                 jz      loc_320C
.text:0000000000002883                 mov     rbp, [rax+8]
.text:0000000000002887                 cmp     r12, rbp
.text:000000000000288A                 mov     rbx, rbp
.text:000000000000288D                 jnb     loc_3247
.text:0000000000002893                 call    ___ctype_b_loc
.text:0000000000002898                 mov     r14, r12
.text:000000000000289B                 mov     rax, [rax]
.text:000000000000289E                 jmp     short loc_28AD
.text:00000000000028A0 ; ---------------------------------------------------------------------------
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: main+726↓j
.text:00000000000028A0                 add     r14, 1
.text:00000000000028A4                 cmp     r14, rbp
.text:00000000000028A7                 jz      loc_324A
.text:00000000000028AD
.text:00000000000028AD loc_28AD:                               ; CODE XREF: main+70E↑j
.text:00000000000028AD                 movzx   edx, byte ptr [r14]
.text:00000000000028B1                 test    byte ptr [rax+rdx*2+1], 20h
.text:00000000000028B6                 jz      short loc_28A0
.text:00000000000028B8                 mov     rsi, r14
.text:00000000000028BB                 sub     rsi, r12
.text:00000000000028BE                 cmp     r14, rbp
.text:00000000000028C1                 mov     [rsp+0C8h+var_A8], rsi
.text:00000000000028C6                 jb      short loc_28D9
.text:00000000000028C8                 jmp     short loc_28E4
.text:00000000000028C8 ; ---------------------------------------------------------------------------
.text:00000000000028CA                 align 10h
.text:00000000000028D0
.text:00000000000028D0 loc_28D0:                               ; CODE XREF: main+752↓j
.text:00000000000028D0                 add     r14, 1
.text:00000000000028D4                 cmp     r14, rbp
.text:00000000000028D7                 jz      short loc_28E4
.text:00000000000028D9
.text:00000000000028D9 loc_28D9:                               ; CODE XREF: main+736↑j
.text:00000000000028D9                 movzx   edx, byte ptr [r14]
.text:00000000000028DD                 test    byte ptr [rax+rdx*2+1], 20h
.text:00000000000028E2                 jnz     short loc_28D0
.text:00000000000028E4
.text:00000000000028E4 loc_28E4:                               ; CODE XREF: main+738↑j
.text:00000000000028E4                                         ; main+747↑j ...
.text:00000000000028E4                 lea     rax, [rsp+0C8h+ptr]
.text:00000000000028E9                 cmp     rbp, r12
.text:00000000000028EC                 mov     [rsp+0C8h+var_C8], r12
.text:00000000000028F0                 mov     [rsp+0C8h+var_78], rbp
.text:00000000000028F5                 mov     [rsp+0C8h+var_C0], rax
.text:00000000000028FA                 jbe     loc_2B8D
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: main+9F7↓j
.text:0000000000002900                 cmp     cs:context_regex, 0
.text:0000000000002908                 jz      short loc_2964
.text:000000000000290A                 mov     rdx, [rsp+0C8h+var_78]
.text:000000000000290F                 lea     r9, context_regs
.text:0000000000002916                 lea     rdi, unk_221728
.text:000000000000291D                 xor     ecx, ecx
.text:000000000000291F                 mov     rsi, r12
.text:0000000000002922                 sub     rdx, r12
.text:0000000000002925                 mov     r8, rdx
.text:0000000000002928                 call    rpl_re_search
.text:000000000000292D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002931                 jz      short loc_2958
.text:0000000000002933                 test    rax, rax
.text:0000000000002936                 jz      loc_4587
.text:000000000000293C                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002940                 jz      loc_452A
.text:0000000000002946                 mov     rax, cs:qword_2214B0
.text:000000000000294D                 mov     rsi, [rax]
.text:0000000000002950                 add     rsi, r12
.text:0000000000002953                 mov     [rsp+0C8h+var_78], rsi
.text:0000000000002958
.text:0000000000002958 loc_2958:                               ; CODE XREF: main+7A1↑j
.text:0000000000002958                 cmp     r12, [rsp+0C8h+var_78]
.text:000000000000295D                 mov     rbp, [rsp+0C8h+var_78]
.text:0000000000002962                 jnb     short loc_298C
.text:0000000000002964
.text:0000000000002964 loc_2964:                               ; CODE XREF: main+778↑j
.text:0000000000002964                 call    ___ctype_b_loc
.text:0000000000002969                 mov     rbp, [rsp+0C8h+var_78]
.text:000000000000296E                 mov     rdx, [rax]
.text:0000000000002971                 jmp     short loc_2981
.text:0000000000002971 ; ---------------------------------------------------------------------------
.text:0000000000002973                 align 8
.text:0000000000002978
.text:0000000000002978 loc_2978:                               ; CODE XREF: main+7FA↓j
.text:0000000000002978                 sub     rbp, 1
.text:000000000000297C                 cmp     r12, rbp
.text:000000000000297F                 jnb     short loc_298C
.text:0000000000002981
.text:0000000000002981 loc_2981:                               ; CODE XREF: main+7E1↑j
.text:0000000000002981                 movzx   eax, byte ptr [rbp-1]
.text:0000000000002985                 test    byte ptr [rdx+rax*2+1], 20h
.text:000000000000298A                 jnz     short loc_2978
.text:000000000000298C
.text:000000000000298C loc_298C:                               ; CODE XREF: main+7D2↑j
.text:000000000000298C                                         ; main+7EF↑j
.text:000000000000298C                 lea     rax, _word_regex
.text:0000000000002993                 mov     [rsp+0C8h+var_B8], r12
.text:0000000000002998                 mov     rdx, [rax]
.text:000000000000299B                 nop     dword ptr [rax+rax+00h]
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: main+D43↓j
.text:00000000000029A0                                         ; main+F1E↓j
.text:00000000000029A0                 test    rdx, rdx
.text:00000000000029A3                 jz      loc_2B3B
.text:00000000000029A9
.text:00000000000029A9 loc_29A9:                               ; CODE XREF: main+9A5↓j
.text:00000000000029A9                 mov     rdx, rbp
.text:00000000000029AC                 lea     r9, _word_regs
.text:00000000000029B3                 lea     rdi, unk_2215C8
.text:00000000000029BA                 sub     rdx, r12
.text:00000000000029BD                 xor     ecx, ecx
.text:00000000000029BF                 mov     rsi, r12
.text:00000000000029C2                 mov     r8, rdx
.text:00000000000029C5                 call    rpl_re_search
.text:00000000000029CA                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000029CE                 jz      loc_452A
.text:00000000000029D4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000029D8                 jz      loc_2B71
.text:00000000000029DE                 mov     rax, cs:qword_221488
.text:00000000000029E5                 mov     rbx, [rax]
.text:00000000000029E8                 mov     rax, cs:qword_221490
.text:00000000000029EF                 add     rbx, r12
.text:00000000000029F2                 add     r12, [rax]
.text:00000000000029F5
.text:00000000000029F5 loc_29F5:                               ; CODE XREF: main+F2E↓j
.text:00000000000029F5                 cmp     rbx, r12
.text:00000000000029F8                 jz      loc_30A0
.text:00000000000029FE
.text:00000000000029FE loc_29FE:                               ; CODE XREF: main+D8D↓j
.text:00000000000029FE                 mov     rax, r12
.text:0000000000002A01                 mov     [rsp+0C8h+ptr], rbx
.text:0000000000002A06                 sub     rax, rbx
.text:0000000000002A09                 cmp     rax, cs:maximum_word_length
.text:0000000000002A10                 mov     [rsp+0C8h+ptr+8], rax
.text:0000000000002A15                 jle     short loc_2A1E
.text:0000000000002A17                 mov     cs:maximum_word_length, rax
.text:0000000000002A1E
.text:0000000000002A1E loc_2A1E:                               ; CODE XREF: main+885↑j
.text:0000000000002A1E                 movzx   r13d, cs:input_reference
.text:0000000000002A26                 test    r13b, r13b
.text:0000000000002A29                 jnz     loc_2F28
.text:0000000000002A2F
.text:0000000000002A2F loc_2A2F:                               ; CODE XREF: main+D33↓j
.text:0000000000002A2F                 cmp     cs:ignore_file, 0
.text:0000000000002A37                 jz      short loc_2A59
.text:0000000000002A39                 mov     rdx, cs:qword_221350
.text:0000000000002A40                 mov     rsi, cs:ignore_table
.text:0000000000002A47                 mov     rdi, [rsp+0C8h+var_C0] ; void *
.text:0000000000002A4C                 call    search_table_isra_1
.text:0000000000002A51                 test    al, al
.text:0000000000002A53                 jnz     loc_2EC9
.text:0000000000002A59
.text:0000000000002A59 loc_2A59:                               ; CODE XREF: main+8A7↑j
.text:0000000000002A59                 cmp     cs:only_file, 0
.text:0000000000002A61                 jz      short loc_2A83
.text:0000000000002A63                 mov     rdx, cs:qword_221330
.text:0000000000002A6A                 mov     rsi, cs:only_table
.text:0000000000002A71                 mov     rdi, [rsp+0C8h+var_C0] ; void *
.text:0000000000002A76                 call    search_table_isra_1
.text:0000000000002A7B                 test    al, al
.text:0000000000002A7D                 jz      loc_2EC9
.text:0000000000002A83
.text:0000000000002A83 loc_2A83:                               ; CODE XREF: main+8D1↑j
.text:0000000000002A83                 mov     rcx, cs:number_of_occurs
.text:0000000000002A8A                 cmp     rcx, cs:occurs_alloc
.text:0000000000002A91                 mov     r8, cs:occurs_table
.text:0000000000002A98                 jz      loc_30C8
.text:0000000000002A9E
.text:0000000000002A9E loc_2A9E:                               ; CODE XREF: main+F8F↓j
.text:0000000000002A9E                 lea     rdi, [rcx+rcx*2]
.text:0000000000002AA2                 mov     rax, rdi
.text:0000000000002AA5                 shl     rax, 4
.text:0000000000002AA9                 lea     rdi, [r8+rax]
.text:0000000000002AAD                 movzx   r8d, cs:auto_reference
.text:0000000000002AB5                 test    r8b, r8b
.text:0000000000002AB8                 jnz     loc_2FC0
.text:0000000000002ABE                 test    r13b, r13b
.text:0000000000002AC1                 jz      short loc_2AF7
.text:0000000000002AC3                 mov     rax, [rsp+0C8h+var_C8]
.text:0000000000002AC7                 sub     rax, rbx
.text:0000000000002ACA                 mov     [rdi+20h], rax
.text:0000000000002ACE                 mov     rax, [rsp+0C8h+var_A8]
.text:0000000000002AD3                 cmp     cs:reference_max_width, rax
.text:0000000000002ADA                 jge     short loc_2AE3
.text:0000000000002ADC                 mov     cs:reference_max_width, rax
.text:0000000000002AE3
.text:0000000000002AE3 loc_2AE3:                               ; CODE XREF: main+94A↑j
.text:0000000000002AE3                                         ; main+F08↓j
.text:0000000000002AE3                 mov     rsi, [rsp+0C8h+var_B8]
.text:0000000000002AE8                 cmp     [rsp+0C8h+var_C8], rsi
.text:0000000000002AEC                 jnz     short loc_2AF7
.text:0000000000002AEE                 test    r13b, r13b
.text:0000000000002AF1                 jnz     loc_3140
.text:0000000000002AF7
.text:0000000000002AF7 loc_2AF7:                               ; CODE XREF: main+931↑j
.text:0000000000002AF7                                         ; main+95C↑j ...
.text:0000000000002AF7                 mov     rax, [rsp+0C8h+var_B8]
.text:0000000000002AFC                 add     rcx, 1
.text:0000000000002B00                 movdqa  xmm0, xmmword ptr [rsp+0C8h+ptr]
.text:0000000000002B06                 mov     cs:number_of_occurs, rcx
.text:0000000000002B0D                 sub     rax, rbx
.text:0000000000002B10                 mov     [rdi+10h], rax
.text:0000000000002B14                 mov     rax, rbp
.text:0000000000002B17                 sub     rax, rbx
.text:0000000000002B1A                 mov     [rdi+18h], rax
.text:0000000000002B1E                 mov     eax, [rsp+0C8h+var_90]
.text:0000000000002B22                 movups  xmmword ptr [rdi], xmm0
.text:0000000000002B25                 mov     [rdi+28h], eax
.text:0000000000002B28                 lea     rax, _word_regex
.text:0000000000002B2F                 mov     rdx, [rax]
.text:0000000000002B32                 test    rdx, rdx
.text:0000000000002B35                 jnz     loc_29A9
.text:0000000000002B3B
.text:0000000000002B3B loc_2B3B:                               ; CODE XREF: main+813↑j
.text:0000000000002B3B                 cmp     r12, rbp
.text:0000000000002B3E                 jnb     loc_3128
.text:0000000000002B44                 movzx   eax, byte ptr [r12]
.text:0000000000002B49                 cmp     byte ptr [r15+rax], 0
.text:0000000000002B4E                 jz      short loc_2B68
.text:0000000000002B50                 jmp     loc_2EE9
.text:0000000000002B50 ; ---------------------------------------------------------------------------
.text:0000000000002B55                 align 8
.text:0000000000002B58
.text:0000000000002B58 loc_2B58:                               ; CODE XREF: main+9DF↓j
.text:0000000000002B58                 movzx   eax, byte ptr [r12]
.text:0000000000002B5D                 cmp     byte ptr [r15+rax], 0
.text:0000000000002B62                 jnz     loc_2EE0
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: main+9BE↑j
.text:0000000000002B68                 add     r12, 1
.text:0000000000002B6C                 cmp     r12, rbp
.text:0000000000002B6F                 jnz     short loc_2B58
.text:0000000000002B71
.text:0000000000002B71 loc_2B71:                               ; CODE XREF: main+848↑j
.text:0000000000002B71                                         ; main:loc_3128↓j
.text:0000000000002B71                 mov     rax, [rsp+0C8h+var_B0]
.text:0000000000002B76                 mov     r12, [rsp+0C8h+var_78]
.text:0000000000002B7B                 mov     rbp, [rax+8]
.text:0000000000002B7F                 cmp     rbp, r12
.text:0000000000002B82                 mov     [rsp+0C8h+var_78], rbp
.text:0000000000002B87                 ja      loc_2900
.text:0000000000002B8D
.text:0000000000002B8D loc_2B8D:                               ; CODE XREF: main+76A↑j
.text:0000000000002B8D                 mov     rax, cs:total_line_count
.text:0000000000002B94                 mov     rsi, [rsp+0C8h+var_70]
.text:0000000000002B99                 mov     rdx, cs:file_line_count
.text:0000000000002BA0                 add     [rsp+0C8h+var_90], 1
.text:0000000000002BA5                 add     rax, 1
.text:0000000000002BA9                 mov     [rdx+rsi], rax
.text:0000000000002BAD                 add     rsi, 8
.text:0000000000002BB1                 mov     cs:total_line_count, rax
.text:0000000000002BB8                 mov     eax, [rsp+0C8h+var_90]
.text:0000000000002BBC                 cmp     cs:number_input_files, eax
.text:0000000000002BC2                 mov     [rsp+0C8h+var_70], rsi
.text:0000000000002BC7                 jg      loc_2841
.text:0000000000002BCD                 mov     rsi, cs:number_of_occurs ; nmemb
.text:0000000000002BD4                 test    rsi, rsi
.text:0000000000002BD7                 jnz     loc_33A2
.text:0000000000002BDD
.text:0000000000002BDD loc_2BDD:                               ; CODE XREF: main+693↑j
.text:0000000000002BDD                                         ; main+122A↓j
.text:0000000000002BDD                 cmp     cs:auto_reference, 0
.text:0000000000002BE4                 jnz     loc_325D
.text:0000000000002BEA
.text:0000000000002BEA loc_2BEA:                               ; CODE XREF: main+119B↓j
.text:0000000000002BEA                 cmp     cs:input_reference, 0
.text:0000000000002BF1                 jz      short loc_2C11
.text:0000000000002BF3
.text:0000000000002BF3 loc_2BF3:                               ; CODE XREF: main+1195↓j
.text:0000000000002BF3                 cmp     cs:right_reference, 0
.text:0000000000002BFA                 jnz     short loc_2C11
.text:0000000000002BFC                 mov     rax, cs:gap_size
.text:0000000000002C03                 add     rax, cs:reference_max_width
.text:0000000000002C0A                 sub     cs:line_width, rax
.text:0000000000002C11
.text:0000000000002C11 loc_2C11:                               ; CODE XREF: main+A61↑j
.text:0000000000002C11                                         ; main+A6A↑j
.text:0000000000002C11                 cmp     cs:line_width, 0
.text:0000000000002C19                 jns     short loc_2C26
.text:0000000000002C1B                 mov     cs:line_width, 0
.text:0000000000002C26
.text:0000000000002C26 loc_2C26:                               ; CODE XREF: main+A89↑j
.text:0000000000002C26                 mov     rax, cs:line_width
.text:0000000000002C2D                 mov     ecx, 2
.text:0000000000002C32                 mov     rdi, cs:truncation_string
.text:0000000000002C39                 cqo
.text:0000000000002C3B                 idiv    rcx
.text:0000000000002C3E                 mov     rdx, rax
.text:0000000000002C41                 sub     rdx, cs:gap_size
.text:0000000000002C48                 test    rdi, rdi
.text:0000000000002C4B                 mov     rsi, rax
.text:0000000000002C4E                 mov     cs:half_line_width, rax
.text:0000000000002C55                 mov     cs:keyafter_max_width, rax
.text:0000000000002C5C                 mov     cs:before_max_width, rdx
.text:0000000000002C63                 jz      loc_43D1
.text:0000000000002C69                 cmp     byte ptr [rdi], 0
.text:0000000000002C6C                 jz      loc_43D1
.text:0000000000002C72                 xor     eax, eax
.text:0000000000002C74                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C78                 repne scasb
.text:0000000000002C7A                 mov     rax, rcx
.text:0000000000002C7D                 not     rax
.text:0000000000002C80                 sub     rax, 1
.text:0000000000002C84                 mov     cs:truncation_string_length, rax
.text:0000000000002C8B
.text:0000000000002C8B loc_2C8B:                               ; CODE XREF: main+224C↓j
.text:0000000000002C8B                 mov     rax, cs:truncation_string_length
.text:0000000000002C92                 add     rax, rax
.text:0000000000002C95                 cmp     cs:gnu_extensions, 0
.text:0000000000002C9C                 jz      loc_43C8
.text:0000000000002CA2                 sub     rdx, rax
.text:0000000000002CA5                 test    rdx, rdx
.text:0000000000002CA8                 mov     cs:before_max_width, rdx
.text:0000000000002CAF                 js      loc_4744
.text:0000000000002CB5
.text:0000000000002CB5 loc_2CB5:                               ; CODE XREF: main+223C↓j
.text:0000000000002CB5                                         ; main+25BF↓j
.text:0000000000002CB5                 sub     rsi, rax
.text:0000000000002CB8                 mov     cs:keyafter_max_width, rsi
.text:0000000000002CBF                 call    ___ctype_b_loc
.text:0000000000002CC4                 mov     rsi, [rax]
.text:0000000000002CC7                 lea     rcx, edited_flag
.text:0000000000002CCE                 mov     [rsp+0C8h+var_C8], rax
.text:0000000000002CD2                 xor     edx, edx
.text:0000000000002CD4                 nop     dword ptr [rax+00h]
.text:0000000000002CD8
.text:0000000000002CD8 loc_2CD8:                               ; CODE XREF: main+B61↓j
.text:0000000000002CD8                 movzx   eax, word ptr [rsi+rdx*2]
.text:0000000000002CDC                 shr     ax, 0Dh
.text:0000000000002CE0                 and     eax, 1
.text:0000000000002CE3                 mov     [rcx+rdx], al
.text:0000000000002CE6                 add     rdx, 1
.text:0000000000002CEA                 cmp     rdx, 100h
.text:0000000000002CF1                 jnz     short loc_2CD8
.text:0000000000002CF3                 mov     eax, cs:output_format
.text:0000000000002CF9                 mov     cs:byte_2211EC, 1
.text:0000000000002D00                 cmp     eax, 2
.text:0000000000002D03                 jz      loc_43BC
.text:0000000000002D09                 cmp     eax, 3
.text:0000000000002D0C                 jnz     short loc_2D49
.text:0000000000002D0E                 lea     rdx, asc_1B7FF  ; "$%&#_{}\\"
.text:0000000000002D15                 mov     eax, 24h ; '$'
.text:0000000000002D1A
.text:0000000000002D1A loc_2D1A:                               ; CODE XREF: main+B97↓j
.text:0000000000002D1A                 add     rdx, 1
.text:0000000000002D1E                 mov     byte ptr [rcx+rax], 1
.text:0000000000002D22                 movzx   eax, byte ptr [rdx]
.text:0000000000002D25                 test    al, al
.text:0000000000002D27                 jnz     short loc_2D1A
.text:0000000000002D29                 lea     rdx, diacrit_diac
.text:0000000000002D30                 mov     eax, 80h
.text:0000000000002D35
.text:0000000000002D35 loc_2D35:                               ; CODE XREF: main+BB7↓j
.text:0000000000002D35                 cmp     byte ptr [rdx+rax], 0
.text:0000000000002D39                 setnz   byte ptr [rcx+rax]
.text:0000000000002D3D                 add     rax, 1
.text:0000000000002D41                 cmp     rax, 100h
.text:0000000000002D47                 jnz     short loc_2D35
.text:0000000000002D49
.text:0000000000002D49 loc_2D49:                               ; CODE XREF: main+B7C↑j
.text:0000000000002D49                                         ; main+2233↓j
.text:0000000000002D49                 cmp     cs:number_of_occurs, 0
.text:0000000000002D51                 mov     cs:tail, 0
.text:0000000000002D5C                 mov     cs:qword_2211A8, 0
.text:0000000000002D67                 mov     cs:tail_truncation, 0
.text:0000000000002D6E                 mov     cs:head, 0
.text:0000000000002D79                 mov     cs:qword_221148, 0
.text:0000000000002D84                 mov     cs:head_truncation, 0
.text:0000000000002D8B                 mov     r12, cs:occurs_table
.text:0000000000002D92                 jle     loc_3C39
.text:0000000000002D98                 mov     [rsp+0C8h+var_B8], 0
.text:0000000000002DA1
.text:0000000000002DA1 loc_2DA1:                               ; CODE XREF: main+1AA3↓j
.text:0000000000002DA1                 mov     rdx, [r12]
.text:0000000000002DA5                 mov     rcx, [r12+10h]
.text:0000000000002DAA                 lea     rax, keyafter
.text:0000000000002DB1                 mov     rbx, [r12+8]
.text:0000000000002DB6                 mov     rbp, [r12+18h]
.text:0000000000002DBB                 mov     [rax], rdx
.text:0000000000002DBE                 lea     rax, [rdx+rcx]
.text:0000000000002DC2                 add     rbx, rdx
.text:0000000000002DC5                 add     rbp, rdx
.text:0000000000002DC8                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000002DCD                 movsxd  rax, dword ptr [r12+28h]
.text:0000000000002DD2                 mov     cs:qword_221168, rbx
.text:0000000000002DD9                 shl     rax, 4
.text:0000000000002DDD                 add     rax, cs:text_buffers
.text:0000000000002DE4                 mov     r13, [rax]
.text:0000000000002DE7                 mov     r14, [rax+8]
.text:0000000000002DEB                 mov     rax, cs:keyafter_max_width
.text:0000000000002DF2                 add     rdx, rax
.text:0000000000002DF5                 cmp     rbx, rbp
.text:0000000000002DF8                 jnb     loc_33F5
.text:0000000000002DFE                 cmp     rbx, rdx
.text:0000000000002E01                 jbe     short loc_2E6A
.text:0000000000002E03                 jmp     loc_3D58
.text:0000000000002E03 ; ---------------------------------------------------------------------------
.text:0000000000002E08                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: main+CEC↓j
.text:0000000000002E10                 mov     rdx, rbp
.text:0000000000002E13                 lea     rdi, unk_2215C8
.text:0000000000002E1A                 xor     r8d, r8d
.text:0000000000002E1D                 sub     rdx, rbx
.text:0000000000002E20                 xor     ecx, ecx
.text:0000000000002E22                 mov     rsi, rbx
.text:0000000000002E25                 call    rpl_re_match
.text:0000000000002E2A                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002E2E                 jz      loc_452A
.text:0000000000002E34                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E38                 mov     edx, 1
.text:0000000000002E3D                 cmovz   rax, rdx
.text:0000000000002E41                 add     rbx, rax
.text:0000000000002E44                 mov     rax, cs:keyafter_max_width
.text:0000000000002E4B
.text:0000000000002E4B loc_2E4B:                               ; CODE XREF: main+D06↓j
.text:0000000000002E4B                 cmp     rbp, rbx
.text:0000000000002E4E                 jbe     loc_33F0
.text:0000000000002E54
.text:0000000000002E54 loc_2E54:                               ; CODE XREF: main+124E↓j
.text:0000000000002E54                 lea     rsi, keyafter
.text:0000000000002E5B                 mov     rdx, [rsi]
.text:0000000000002E5E                 add     rdx, rax
.text:0000000000002E61                 cmp     rbx, rdx
.text:0000000000002E64                 ja      loc_3D53
.text:0000000000002E6A
.text:0000000000002E6A loc_2E6A:                               ; CODE XREF: main+C71↑j
.text:0000000000002E6A                 lea     rsi, _word_regex
.text:0000000000002E71                 mov     cs:qword_221168, rbx
.text:0000000000002E78                 cmp     qword ptr [rsi], 0
.text:0000000000002E7C                 jnz     short loc_2E10
.text:0000000000002E7E                 movzx   edx, byte ptr [rbx]
.text:0000000000002E81                 lea     rsi, _word_fastmap
.text:0000000000002E88                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000002E8C                 jnz     loc_33C0
.text:0000000000002E92                 add     rbx, 1
.text:0000000000002E96                 jmp     short loc_2E4B
.text:0000000000002E96 ; ---------------------------------------------------------------------------
.text:0000000000002E98                 align 20h
.text:0000000000002EA0
.text:0000000000002EA0 loc_2EA0:                               ; CODE XREF: main+DC3↓j
.text:0000000000002EA0                 test    dl, dl
.text:0000000000002EA2                 mov     rbx, r13
.text:0000000000002EA5                 mov     rdi, r12
.text:0000000000002EA8                 mov     r13d, ebp
.text:0000000000002EAB                 mov     r12, [rsp+0C8h+var_98]
.text:0000000000002EB0                 mov     rbp, [rsp+0C8h+var_A0]
.text:0000000000002EB5                 jz      short loc_2EC0
.text:0000000000002EB7                 mov     cs:total_line_count, rdi
.text:0000000000002EBE                 xchg    ax, ax
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: main+D25↑j
.text:0000000000002EC0                                         ; main+D9B↓j
.text:0000000000002EC0                 cmp     r14, rbx
.text:0000000000002EC3                 jbe     loc_2A2F
.text:0000000000002EC9
.text:0000000000002EC9 loc_2EC9:                               ; CODE XREF: main+8C3↑j
.text:0000000000002EC9                                         ; main+8ED↑j
.text:0000000000002EC9                 lea     rax, _word_regex
.text:0000000000002ED0                 mov     rdx, [rax]
.text:0000000000002ED3                 jmp     loc_29A0
.text:0000000000002ED3 ; ---------------------------------------------------------------------------
.text:0000000000002ED8                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: main+9D2↑j
.text:0000000000002EE0                 cmp     r12, rbp
.text:0000000000002EE3                 jnb     loc_312E
.text:0000000000002EE9
.text:0000000000002EE9 loc_2EE9:                               ; CODE XREF: main+9C0↑j
.text:0000000000002EE9                 movzx   eax, byte ptr [r12]
.text:0000000000002EEE                 cmp     byte ptr [r15+rax], 0
.text:0000000000002EF3                 jz      loc_312E
.text:0000000000002EF9                 mov     rax, r12
.text:0000000000002EFC                 jmp     short loc_2F0E
.text:0000000000002EFC ; ---------------------------------------------------------------------------
.text:0000000000002EFE                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: main+D85↓j
.text:0000000000002F00                 movzx   edx, byte ptr [rax]
.text:0000000000002F03                 cmp     byte ptr [r15+rdx], 0
.text:0000000000002F08                 jz      loc_30B8
.text:0000000000002F0E
.text:0000000000002F0E loc_2F0E:                               ; CODE XREF: main+D6C↑j
.text:0000000000002F0E                 add     rax, 1
.text:0000000000002F12                 cmp     rax, rbp
.text:0000000000002F15                 jnz     short loc_2F00
.text:0000000000002F17                 mov     rbx, r12
.text:0000000000002F1A                 mov     r12, rbp
.text:0000000000002F1D                 jmp     loc_29FE
.text:0000000000002F1D ; ---------------------------------------------------------------------------
.text:0000000000002F22                 align 8
.text:0000000000002F28
.text:0000000000002F28 loc_2F28:                               ; CODE XREF: main+899↑j
.text:0000000000002F28                 cmp     r14, rbx
.text:0000000000002F2B                 jnb     short loc_2EC0
.text:0000000000002F2D                 mov     rdi, cs:total_line_count
.text:0000000000002F34                 mov     [rsp+0C8h+var_A0], rbp
.text:0000000000002F39                 xor     edx, edx
.text:0000000000002F3B                 mov     [rsp+0C8h+var_98], r12
.text:0000000000002F40                 mov     ebp, r13d
.text:0000000000002F43                 mov     r13, rbx
.text:0000000000002F46                 mov     r12, rdi
.text:0000000000002F49                 jmp     short loc_2F59
.text:0000000000002F49 ; ---------------------------------------------------------------------------
.text:0000000000002F4B                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: main+DD3↓j
.text:0000000000002F50                                         ; main+E27↓j
.text:0000000000002F50                 cmp     r14, r13
.text:0000000000002F53                 jnb     loc_2EA0
.text:0000000000002F59
.text:0000000000002F59 loc_2F59:                               ; CODE XREF: main+DB9↑j
.text:0000000000002F59                 movzx   eax, byte ptr [r14]
.text:0000000000002F5D                 add     r14, 1
.text:0000000000002F61                 cmp     al, 0Ah
.text:0000000000002F63                 jnz     short loc_2F50
.text:0000000000002F65                 mov     rax, [rsp+0C8h+var_B0]
.text:0000000000002F6A                 add     r12, 1
.text:0000000000002F6E                 mov     rbx, [rax+8]
.text:0000000000002F72                 cmp     rbx, r14
.text:0000000000002F75                 jbe     loc_31F0
.text:0000000000002F7B                 call    ___ctype_b_loc
.text:0000000000002F80                 mov     rcx, [rax]
.text:0000000000002F83                 mov     rax, r14
.text:0000000000002F86                 jmp     short loc_2F99
.text:0000000000002F86 ; ---------------------------------------------------------------------------
.text:0000000000002F88                 align 10h
.text:0000000000002F90
.text:0000000000002F90 loc_2F90:                               ; CODE XREF: main+E11↓j
.text:0000000000002F90                 add     rax, 1
.text:0000000000002F94                 cmp     rax, rbx
.text:0000000000002F97                 jz      short loc_2FA3
.text:0000000000002F99
.text:0000000000002F99 loc_2F99:                               ; CODE XREF: main+DF6↑j
.text:0000000000002F99                 movzx   edx, byte ptr [rax]
.text:0000000000002F9C                 test    byte ptr [rcx+rdx*2+1], 20h
.text:0000000000002FA1                 jz      short loc_2F90
.text:0000000000002FA3
.text:0000000000002FA3 loc_2FA3:                               ; CODE XREF: main+E07↑j
.text:0000000000002FA3                 mov     rsi, rax
.text:0000000000002FA6                 sub     rsi, r14
.text:0000000000002FA9                 mov     [rsp+0C8h+var_A8], rsi
.text:0000000000002FAE
.text:0000000000002FAE loc_2FAE:                               ; CODE XREF: main+106C↓j
.text:0000000000002FAE                 mov     [rsp+0C8h+var_C8], r14
.text:0000000000002FB2                 mov     edx, ebp
.text:0000000000002FB4                 mov     r14, rax
.text:0000000000002FB7                 jmp     short loc_2F50
.text:0000000000002FB7 ; ---------------------------------------------------------------------------
.text:0000000000002FB9                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 loc_2FC0:                               ; CODE XREF: main+928↑j
.text:0000000000002FC0                 cmp     r14, rbx
.text:0000000000002FC3                 mov     r10, cs:total_line_count
.text:0000000000002FCA                 jnb     loc_3094
.text:0000000000002FD0                 mov     [rsp+0C8h+var_A0], rbp
.text:0000000000002FD5                 mov     [rsp+0C8h+var_98], r12
.text:0000000000002FDA                 xor     esi, esi
.text:0000000000002FDC                 mov     r12, r10
.text:0000000000002FDF                 mov     [rsp+0C8h+var_80], r10
.text:0000000000002FE4                 mov     [rsp+0C8h+var_89], r13b
.text:0000000000002FE9                 mov     r10, r14
.text:0000000000002FEC                 mov     [rsp+0C8h+var_88], rcx
.text:0000000000002FF1                 mov     ebp, r8d
.text:0000000000002FF4                 mov     r14, rdi
.text:0000000000002FF7                 jmp     short loc_3005
.text:0000000000002FF7 ; ---------------------------------------------------------------------------
.text:0000000000002FF9                 align 20h
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: main+E7F↓j
.text:0000000000003000                                         ; main+1077↓j
.text:0000000000003000                 cmp     r10, rbx
.text:0000000000003003                 jnb     short loc_3068
.text:0000000000003005
.text:0000000000003005 loc_3005:                               ; CODE XREF: main+E67↑j
.text:0000000000003005                                         ; main+ED0↓j
.text:0000000000003005                 movzx   eax, byte ptr [r10]
.text:0000000000003009                 add     r10, 1
.text:000000000000300D                 cmp     al, 0Ah
.text:000000000000300F                 jnz     short loc_3000
.text:0000000000003011                 mov     rax, [rsp+0C8h+var_B0]
.text:0000000000003016                 add     r12, 1
.text:000000000000301A                 mov     r13, [rax+8]
.text:000000000000301E                 cmp     r13, r10
.text:0000000000003021                 jbe     loc_3201
.text:0000000000003027                 mov     [rsp+0C8h+var_C8], r10
.text:000000000000302B                 call    ___ctype_b_loc
.text:0000000000003030                 mov     r10, [rsp+0C8h+var_C8]
.text:0000000000003034                 mov     r8, [rax]
.text:0000000000003037                 mov     rax, r10
.text:000000000000303A                 jmp     short loc_3049
.text:000000000000303A ; ---------------------------------------------------------------------------
.text:000000000000303C                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: main+EC2↓j
.text:0000000000003040                 add     rax, 1
.text:0000000000003044                 cmp     rax, r13
.text:0000000000003047                 jz      short loc_3054
.text:0000000000003049
.text:0000000000003049 loc_3049:                               ; CODE XREF: main+EAA↑j
.text:0000000000003049                 movzx   edx, byte ptr [rax]
.text:000000000000304C                 test    byte ptr [r8+rdx*2+1], 20h
.text:0000000000003052                 jz      short loc_3040
.text:0000000000003054
.text:0000000000003054 loc_3054:                               ; CODE XREF: main+EB7↑j
.text:0000000000003054                 mov     [rsp+0C8h+var_C8], r10
.text:0000000000003058                 mov     r10, rax
.text:000000000000305B                 mov     esi, ebp
.text:000000000000305D                 cmp     r10, rbx
.text:0000000000003060                 jb      short loc_3005
.text:0000000000003062                 nop     word ptr [rax+rax+00h]
.text:0000000000003068
.text:0000000000003068 loc_3068:                               ; CODE XREF: main+E73↑j
.text:0000000000003068                 test    sil, sil
.text:000000000000306B                 mov     rdi, r14
.text:000000000000306E                 mov     r9, r12
.text:0000000000003071                 mov     r14, r10
.text:0000000000003074                 mov     rbp, [rsp+0C8h+var_A0]
.text:0000000000003079                 movzx   r13d, [rsp+0C8h+var_89]
.text:000000000000307F                 mov     rcx, [rsp+0C8h+var_88]
.text:0000000000003084                 mov     r12, [rsp+0C8h+var_98]
.text:0000000000003089                 mov     r10, [rsp+0C8h+var_80]
.text:000000000000308E                 jnz     loc_482B
.text:0000000000003094
.text:0000000000003094 loc_3094:                               ; CODE XREF: main+E3A↑j
.text:0000000000003094                                         ; main+26A5↓j
.text:0000000000003094                 mov     [rdi+20h], r10
.text:0000000000003098                 jmp     loc_2AE3
.text:0000000000003098 ; ---------------------------------------------------------------------------
.text:000000000000309D                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: main+868↑j
.text:00000000000030A0                 lea     rax, _word_regex
.text:00000000000030A7                 mov     rdx, [rax]
.text:00000000000030AA
.text:00000000000030AA loc_30AA:                               ; CODE XREF: main+FA1↓j
.text:00000000000030AA                 lea     r12, [rbx+1]
.text:00000000000030AE                 jmp     loc_29A0
.text:00000000000030AE ; ---------------------------------------------------------------------------
.text:00000000000030B3                 align 8
.text:00000000000030B8
.text:00000000000030B8 loc_30B8:                               ; CODE XREF: main+D78↑j
.text:00000000000030B8                 mov     rbx, r12
.text:00000000000030BB                 mov     r12, rax
.text:00000000000030BE                 jmp     loc_29F5
.text:00000000000030BE ; ---------------------------------------------------------------------------
.text:00000000000030C3                 align 8
.text:00000000000030C8
.text:00000000000030C8 loc_30C8:                               ; CODE XREF: main+908↑j
.text:00000000000030C8                 test    r8, r8
.text:00000000000030CB                 jz      loc_31B8
.text:00000000000030D1                 mov     rax, 1C71C71C71C71C6h
.text:00000000000030DB                 cmp     rcx, rax
.text:00000000000030DE                 ja      loc_31E5
.text:00000000000030E4                 mov     rax, rcx
.text:00000000000030E7                 shr     rax, 1
.text:00000000000030EA                 lea     rcx, [rcx+rax+1]
.text:00000000000030EF
.text:00000000000030EF loc_30EF:                               ; CODE XREF: main+104F↓j
.text:00000000000030EF                 lea     rsi, [rcx+rcx*2]
.text:00000000000030F3                 mov     rdi, r8
.text:00000000000030F6                 mov     cs:occurs_alloc, rcx
.text:00000000000030FD                 shl     rsi, 4
.text:0000000000003101                 call    xrealloc
.text:0000000000003106                 mov     rcx, cs:number_of_occurs
.text:000000000000310D                 mov     r8, rax
.text:0000000000003110                 mov     cs:occurs_table, rax
.text:0000000000003117                 movzx   r13d, cs:input_reference
.text:000000000000311F                 jmp     loc_2A9E
.text:000000000000311F ; ---------------------------------------------------------------------------
.text:0000000000003124                 align 8
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: main+9AE↑j
.text:0000000000003128                 jz      loc_2B71
.text:000000000000312E
.text:000000000000312E loc_312E:                               ; CODE XREF: main+D53↑j
.text:000000000000312E                                         ; main+D63↑j
.text:000000000000312E                 mov     rbx, r12
.text:0000000000003131                 jmp     loc_30AA
.text:0000000000003131 ; ---------------------------------------------------------------------------
.text:0000000000003136                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: main+961↑j
.text:0000000000003140                 cmp     rsi, rbp
.text:0000000000003143                 mov     r13, rsi
.text:0000000000003146                 jnb     loc_2AF7
.text:000000000000314C                 mov     [rsp+0C8h+var_A0], rdi
.text:0000000000003151                 mov     [rsp+0C8h+var_B8], rcx
.text:0000000000003156                 call    ___ctype_b_loc
.text:000000000000315B                 mov     rcx, [rsp+0C8h+var_B8]
.text:0000000000003160                 mov     rax, [rax]
.text:0000000000003163                 mov     rdx, r13
.text:0000000000003166                 mov     rdi, [rsp+0C8h+var_A0]
.text:000000000000316B                 jmp     short loc_3179
.text:000000000000316B ; ---------------------------------------------------------------------------
.text:000000000000316D                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: main+FF1↓j
.text:0000000000003170                 add     rdx, 1
.text:0000000000003174                 cmp     rdx, rbp
.text:0000000000003177                 jz      short loc_31AB
.text:0000000000003179
.text:0000000000003179 loc_3179:                               ; CODE XREF: main+FDB↑j
.text:0000000000003179                 movzx   esi, byte ptr [rdx]
.text:000000000000317C                 test    byte ptr [rax+rsi*2+1], 20h
.text:0000000000003181                 jz      short loc_3170
.text:0000000000003183                 cmp     rdx, rbp
.text:0000000000003186                 mov     [rsp+0C8h+var_B8], rdx
.text:000000000000318B                 jnb     loc_2AF7
.text:0000000000003191                 nop     dword ptr [rax+00000000h]
.text:0000000000003198
.text:0000000000003198 loc_3198:                               ; CODE XREF: main+1019↓j
.text:0000000000003198                 add     rdx, 1
.text:000000000000319C                 cmp     rdx, rbp
.text:000000000000319F                 jz      short loc_31AB
.text:00000000000031A1                 movzx   esi, byte ptr [rdx]
.text:00000000000031A4                 test    byte ptr [rax+rsi*2+1], 20h
.text:00000000000031A9                 jnz     short loc_3198
.text:00000000000031AB
.text:00000000000031AB loc_31AB:                               ; CODE XREF: main+FE7↑j
.text:00000000000031AB                                         ; main+100F↑j
.text:00000000000031AB                 mov     [rsp+0C8h+var_B8], rdx
.text:00000000000031B0                 jmp     loc_2AF7
.text:00000000000031B0 ; ---------------------------------------------------------------------------
.text:00000000000031B5                 align 8
.text:00000000000031B8
.text:00000000000031B8 loc_31B8:                               ; CODE XREF: main+F3B↑j
.text:00000000000031B8                 test    rcx, rcx
.text:00000000000031BB                 mov     eax, 2
.text:00000000000031C0                 mov     edx, 30h ; '0'
.text:00000000000031C5                 cmovz   rcx, rax
.text:00000000000031C9                 mov     rax, rdx
.text:00000000000031CC                 xor     esi, esi
.text:00000000000031CE                 mul     rcx
.text:00000000000031D1                 jo      loc_4821
.text:00000000000031D7
.text:00000000000031D7 loc_31D7:                               ; CODE XREF: main+2696↓j
.text:00000000000031D7                 test    rax, rax
.text:00000000000031DA                 js      short loc_31E5
.text:00000000000031DC                 test    rsi, rsi
.text:00000000000031DF                 jz      loc_30EF
.text:00000000000031E5
.text:00000000000031E5 loc_31E5:                               ; CODE XREF: main+3AB↑j
.text:00000000000031E5                                         ; main+3B4↑j ...
.text:00000000000031E5                 call    xalloc_die
.text:00000000000031E5 ; ---------------------------------------------------------------------------
.text:00000000000031EA                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: main+DE5↑j
.text:00000000000031F0                 mov     rax, r14
.text:00000000000031F3                 mov     [rsp+0C8h+var_A8], 0
.text:00000000000031FC                 jmp     loc_2FAE
.text:0000000000003201 ; ---------------------------------------------------------------------------
.text:0000000000003201
.text:0000000000003201 loc_3201:                               ; CODE XREF: main+E91↑j
.text:0000000000003201                 mov     esi, ebp
.text:0000000000003203                 mov     [rsp+0C8h+var_C8], r10
.text:0000000000003207                 jmp     loc_3000
.text:000000000000320C ; ---------------------------------------------------------------------------
.text:000000000000320C
.text:000000000000320C loc_320C:                               ; CODE XREF: main+6ED↑j
.text:000000000000320C                 mov     rax, [rsp+0C8h+var_B0]
.text:0000000000003211                 mov     r14, r12
.text:0000000000003214                 mov     [rsp+0C8h+var_A8], 0
.text:000000000000321D                 mov     rbp, [rax+8]
.text:0000000000003221                 jmp     loc_28E4
.text:0000000000003226 ; ---------------------------------------------------------------------------
.text:0000000000003226
.text:0000000000003226 loc_3226:                               ; CODE XREF: main+598↑j
.text:0000000000003226                 lea     rdi, _word_regex
.text:000000000000322D                 call    compile_regex
.text:0000000000003232                 mov     rdi, cs:break_file
.text:0000000000003239                 test    rdi, rdi
.text:000000000000323C                 jz      loc_27A4
.text:0000000000003242                 jmp     loc_273E
.text:0000000000003247 ; ---------------------------------------------------------------------------
.text:0000000000003247
.text:0000000000003247 loc_3247:                               ; CODE XREF: main+6FD↑j
.text:0000000000003247                 mov     rbx, r12
.text:000000000000324A
.text:000000000000324A loc_324A:                               ; CODE XREF: main+717↑j
.text:000000000000324A                 mov     rax, rbx
.text:000000000000324D                 mov     r14, rbx
.text:0000000000003250                 sub     rax, r12
.text:0000000000003253                 mov     [rsp+0C8h+var_A8], rax
.text:0000000000003258                 jmp     loc_28E4
.text:000000000000325D ; ---------------------------------------------------------------------------
.text:000000000000325D
.text:000000000000325D loc_325D:                               ; CODE XREF: main+A54↑j
.text:000000000000325D                 mov     cs:reference_max_width, 0
.text:0000000000003268                 xor     r13d, r13d
.text:000000000000326B                 lea     r12, [rsp+0C8h+var_58]
.text:0000000000003270                 lea     rbp, aLd+1      ; "%ld"
.text:0000000000003277                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000327B                 jmp     short loc_32F0
.text:000000000000327D ; ---------------------------------------------------------------------------
.text:000000000000327D
.text:000000000000327D loc_327D:                               ; CODE XREF: main+116A↓j
.text:000000000000327D                 mov     rax, cs:file_line_count
.text:0000000000003284                 test    r13, r13
.text:0000000000003287                 lea     r14, ds:0[r13*8]
.text:000000000000328F                 mov     rsi, [rax+r13*8]
.text:0000000000003293                 lea     r8, [rsi+1]
.text:0000000000003297                 jz      short loc_329E
.text:0000000000003299                 sub     r8, [rax+r14-8]
.text:000000000000329E
.text:000000000000329E loc_329E:                               ; CODE XREF: main+1107↑j
.text:000000000000329E                 mov     edx, 15h
.text:00000000000032A3                 mov     rdi, r12
.text:00000000000032A6                 xor     eax, eax
.text:00000000000032A8                 mov     rcx, rbp
.text:00000000000032AB                 mov     esi, 1
.text:00000000000032B0                 call    ___sprintf_chk
.text:00000000000032B5                 mov     edx, eax
.text:00000000000032B7                 mov     rax, cs:input_file_name
.text:00000000000032BE                 mov     rdi, [rax+r14]
.text:00000000000032C2                 movsxd  rax, edx
.text:00000000000032C5                 test    rdi, rdi
.text:00000000000032C8                 jz      short loc_32DC
.text:00000000000032CA                 xor     eax, eax
.text:00000000000032CC                 mov     rcx, rbx
.text:00000000000032CF                 repne scasb
.text:00000000000032D1                 movsxd  rax, edx
.text:00000000000032D4                 not     rcx
.text:00000000000032D7                 lea     rax, [rcx+rax-1]
.text:00000000000032DC
.text:00000000000032DC loc_32DC:                               ; CODE XREF: main+1138↑j
.text:00000000000032DC                 cmp     cs:reference_max_width, rax
.text:00000000000032E3                 jge     short loc_32EC
.text:00000000000032E5                 mov     cs:reference_max_width, rax
.text:00000000000032EC
.text:00000000000032EC loc_32EC:                               ; CODE XREF: main+1153↑j
.text:00000000000032EC                 add     r13, 1
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: main+10EB↑j
.text:00000000000032F0                 movsxd  rax, cs:number_input_files
.text:00000000000032F7                 cmp     r13, rax
.text:00000000000032FA                 jb      short loc_327D
.text:00000000000032FC                 mov     rax, cs:reference_max_width
.text:0000000000003303                 lea     rdx, [rax+1]
.text:0000000000003307                 lea     rdi, [rax+2]
.text:000000000000330B                 mov     cs:reference_max_width, rdx
.text:0000000000003312                 call    xmalloc
.text:0000000000003317                 cmp     cs:auto_reference, 0
.text:000000000000331E                 mov     cs:reference, rax
.text:0000000000003325                 jnz     loc_2BF3
.text:000000000000332B                 jmp     loc_2BEA
.text:0000000000003330 ; ---------------------------------------------------------------------------
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: main+65A↑j
.text:0000000000003330                 mov     cs:only_file, 0
.text:000000000000333B                 jmp     loc_27F0
.text:0000000000003340 ; ---------------------------------------------------------------------------
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: main+634↑j
.text:0000000000003340                 mov     cs:ignore_file, 0
.text:000000000000334B                 jmp     loc_27CA
.text:0000000000003350 ; ---------------------------------------------------------------------------
.text:0000000000003350
.text:0000000000003350 loc_3350:                               ; CODE XREF: main+5A8↑j
.text:0000000000003350                 cmp     cs:gnu_extensions, 0
.text:0000000000003357                 jz      loc_4556
.text:000000000000335D                 call    ___ctype_b_loc
.text:0000000000003362                 lea     rsi, _word_fastmap
.text:0000000000003369                 xor     ecx, ecx
.text:000000000000336B
.text:000000000000336B loc_336B:                               ; CODE XREF: main+11FB↓j
.text:000000000000336B                 mov     rdx, [rax]
.text:000000000000336E                 add     rsi, 1
.text:0000000000003372                 movzx   edx, word ptr [rdx+rcx]
.text:0000000000003376                 add     rcx, 2
.text:000000000000337A                 shr     dx, 0Ah
.text:000000000000337E                 and     edx, 1
.text:0000000000003381                 mov     [rsi-1], dl
.text:0000000000003384                 cmp     rcx, 200h
.text:000000000000338B                 jnz     short loc_336B
.text:000000000000338D                 jmp     loc_27A4
.text:0000000000003392 ; ---------------------------------------------------------------------------
.text:0000000000003392
.text:0000000000003392 loc_3392:                               ; CODE XREF: main+57E↑j
.text:0000000000003392                 mov     cs:context_regex, 0
.text:000000000000339D                 jmp     loc_2720
.text:00000000000033A2 ; ---------------------------------------------------------------------------
.text:00000000000033A2
.text:00000000000033A2 loc_33A2:                               ; CODE XREF: main+A47↑j
.text:00000000000033A2                 mov     rdi, cs:occurs_table ; base
.text:00000000000033A9                 lea     rcx, compare_occurs ; compar
.text:00000000000033B0                 mov     edx, 30h ; '0'  ; size
.text:00000000000033B5                 call    _qsort
.text:00000000000033BA                 jmp     loc_2BDD
.text:00000000000033BA ; ---------------------------------------------------------------------------
.text:00000000000033BF                 align 20h
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: main+CFC↑j
.text:00000000000033C0                 cmp     rbp, rbx
.text:00000000000033C3                 ja      short loc_33E4
.text:00000000000033C5                 jmp     short loc_33F0
.text:00000000000033C5 ; ---------------------------------------------------------------------------
.text:00000000000033C7                 align 10h
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: main+125B↓j
.text:00000000000033D0                 movzx   edx, byte ptr [rbx]
.text:00000000000033D3                 lea     rsi, _word_fastmap
.text:00000000000033DA                 cmp     byte ptr [rsi+rdx], 0
.text:00000000000033DE                 jz      loc_2E54
.text:00000000000033E4
.text:00000000000033E4 loc_33E4:                               ; CODE XREF: main+1233↑j
.text:00000000000033E4                 add     rbx, 1
.text:00000000000033E8                 cmp     rbp, rbx
.text:00000000000033EB                 jnz     short loc_33D0
.text:00000000000033ED                 mov     rbx, rbp
.text:00000000000033F0
.text:00000000000033F0 loc_33F0:                               ; CODE XREF: main+CBE↑j
.text:00000000000033F0                                         ; main+1235↑j
.text:00000000000033F0                 mov     rcx, [r12+10h]
.text:00000000000033F5
.text:00000000000033F5 loc_33F5:                               ; CODE XREF: main+C68↑j
.text:00000000000033F5                 lea     rsi, keyafter
.text:00000000000033FC                 mov     rsi, [rsi]
.text:00000000000033FF                 add     rax, rsi
.text:0000000000003402                 cmp     rbx, rax
.text:0000000000003405                 ja      short loc_340E
.text:0000000000003407                 mov     cs:qword_221168, rbx
.text:000000000000340E
.text:000000000000340E loc_340E:                               ; CODE XREF: main+1275↑j
.text:000000000000340E                                         ; main+1BD2↓j
.text:000000000000340E                 xor     edi, edi
.text:0000000000003410                 cmp     cs:truncation_string, 0
.text:0000000000003418                 mov     rdx, cs:qword_221168
.text:000000000000341F                 mov     rax, rdx
.text:0000000000003422                 jz      short loc_342D
.text:0000000000003424                 xor     edi, edi
.text:0000000000003426                 cmp     rbp, rdx
.text:0000000000003429                 setnbe  dil
.text:000000000000342D
.text:000000000000342D loc_342D:                               ; CODE XREF: main+1292↑j
.text:000000000000342D                 mov     cs:keyafter_truncation, dil
.text:0000000000003434                 and     cs:keyafter_truncation, 1
.text:000000000000343B                 cmp     rsi, rdx
.text:000000000000343E                 jnb     short loc_3472
.text:0000000000003440                 mov     rdi, [rsp+0C8h+var_C8]
.text:0000000000003444                 mov     r8, [rdi]
.text:0000000000003447                 xor     edi, edi
.text:0000000000003449                 jmp     short loc_345D
.text:000000000000344B ; ---------------------------------------------------------------------------
.text:000000000000344B
.text:000000000000344B loc_344B:                               ; CODE XREF: main+12D7↓j
.text:000000000000344B                 sub     rax, 1
.text:000000000000344F                 mov     edi, 1
.text:0000000000003454                 cmp     rax, rsi
.text:0000000000003457                 jz      loc_4815
.text:000000000000345D
.text:000000000000345D loc_345D:                               ; CODE XREF: main+12B9↑j
.text:000000000000345D                 movzx   edx, byte ptr [rax-1]
.text:0000000000003461                 test    byte ptr [r8+rdx*2+1], 20h
.text:0000000000003467                 jnz     short loc_344B
.text:0000000000003469                 test    dil, dil
.text:000000000000346C                 jnz     loc_47FA
.text:0000000000003472
.text:0000000000003472 loc_3472:                               ; CODE XREF: main+12AE↑j
.text:0000000000003472                                         ; main+2671↓j ...
.text:0000000000003472                 mov     rdx, cs:maximum_word_length
.text:0000000000003479                 add     rdx, cs:half_line_width
.text:0000000000003480                 mov     rax, rcx
.text:0000000000003483                 neg     rax
.text:0000000000003486                 cmp     rax, rdx
.text:0000000000003489                 jle     loc_3D4A
.text:000000000000348F                 lea     rax, _word_regex
.text:0000000000003496                 mov     rbx, rsi
.text:0000000000003499                 sub     rbx, rdx
.text:000000000000349C                 cmp     qword ptr [rax], 0
.text:00000000000034A0                 jz      loc_41CA
.text:00000000000034A6                 lea     rdi, [rax+8]
.text:00000000000034AA                 xor     r8d, r8d
.text:00000000000034AD                 xor     ecx, ecx
.text:00000000000034AF                 mov     rsi, rbx
.text:00000000000034B2                 call    rpl_re_match
.text:00000000000034B7                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000034BB                 jz      loc_452A
.text:00000000000034C1                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000034C5                 jnz     short loc_34CC
.text:00000000000034C7                 mov     eax, 1
.text:00000000000034CC
.text:00000000000034CC loc_34CC:                               ; CODE XREF: main+1335↑j
.text:00000000000034CC                 add     rbx, rax
.text:00000000000034CF
.text:00000000000034CF loc_34CF:                               ; CODE XREF: main+1BBE↓j
.text:00000000000034CF                                         ; main+2053↓j ...
.text:00000000000034CF                 lea     rax, keyafter
.text:00000000000034D6                 lea     r15, before
.text:00000000000034DD                 mov     cs:before, rbx
.text:00000000000034E4                 mov     rax, [rax]
.text:00000000000034E7                 cmp     rbx, rax
.text:00000000000034EA                 mov     cs:qword_221188, rax
.text:00000000000034F1                 jnb     short loc_3523
.text:00000000000034F3                 mov     rsi, [rsp+0C8h+var_C8]
.text:00000000000034F7                 xor     ecx, ecx
.text:00000000000034F9                 mov     rsi, [rsi]
.text:00000000000034FC                 jmp     short loc_3510
.text:00000000000034FE ; ---------------------------------------------------------------------------
.text:00000000000034FE
.text:00000000000034FE loc_34FE:                               ; CODE XREF: main+1389↓j
.text:00000000000034FE                 sub     rax, 1
.text:0000000000003502                 mov     ecx, 1
.text:0000000000003507                 cmp     rbx, rax
.text:000000000000350A                 jz      loc_47EE
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: main+136C↑j
.text:0000000000003510                 movzx   edx, byte ptr [rax-1]
.text:0000000000003514                 test    byte ptr [rsi+rdx*2+1], 20h
.text:0000000000003519                 jnz     short loc_34FE
.text:000000000000351B                 test    cl, cl
.text:000000000000351D                 jnz     loc_4703
.text:0000000000003523
.text:0000000000003523 loc_3523:                               ; CODE XREF: main+1361↑j
.text:0000000000003523                                         ; main+257A↓j ...
.text:0000000000003523                 mov     rcx, cs:before_max_width
.text:000000000000352A                 mov     rdx, cs:qword_221188
.text:0000000000003531                 mov     rsi, rbx
.text:0000000000003534                 lea     rax, [rbx+rcx]
.text:0000000000003538
.text:0000000000003538 loc_3538:                               ; CODE XREF: main+15AF↓j
.text:0000000000003538                                         ; main+15B7↓j ...
.text:0000000000003538                 cmp     rdx, rax
.text:000000000000353B                 jbe     short loc_3596
.text:000000000000353D
.text:000000000000353D loc_353D:                               ; CODE XREF: main+1404↓j
.text:000000000000353D                 lea     rdi, _word_regex
.text:0000000000003544                 cmp     qword ptr [rdi], 0
.text:0000000000003548                 jz      loc_3723
.text:000000000000354E                 sub     rdx, rsi
.text:0000000000003551                 xor     r8d, r8d
.text:0000000000003554                 xor     ecx, ecx
.text:0000000000003556                 add     rdi, 8
.text:000000000000355A                 call    rpl_re_match
.text:000000000000355F                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003563                 jz      loc_452A
.text:0000000000003569                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000356D                 mov     edx, 1
.text:0000000000003572                 mov     rcx, cs:before_max_width
.text:0000000000003579                 cmovz   rax, rdx
.text:000000000000357D                 add     rax, [r15]
.text:0000000000003580                 mov     rdx, cs:qword_221188
.text:0000000000003587                 mov     rsi, rax
.text:000000000000358A                 mov     [r15], rax
.text:000000000000358D                 lea     rax, [rax+rcx]
.text:0000000000003591                 cmp     rdx, rax
.text:0000000000003594                 ja      short loc_353D
.text:0000000000003596
.text:0000000000003596 loc_3596:                               ; CODE XREF: main+13AB↑j
.text:0000000000003596                 cmp     cs:truncation_string, 0
.text:000000000000359E                 jz      loc_3DBB
.text:00000000000035A4                 cmp     r13, rsi
.text:00000000000035A7                 jnb     loc_43E1
.text:00000000000035AD                 mov     rax, [rsp+0C8h+var_C8]
.text:00000000000035B1                 mov     r8, [rax]
.text:00000000000035B4                 mov     rax, rsi
.text:00000000000035B7                 jmp     short loc_35C6
.text:00000000000035B9 ; ---------------------------------------------------------------------------
.text:00000000000035B9
.text:00000000000035B9 loc_35B9:                               ; CODE XREF: main+1440↓j
.text:00000000000035B9                 sub     rax, 1
.text:00000000000035BD                 cmp     r13, rax
.text:00000000000035C0                 jz      loc_3DC7
.text:00000000000035C6
.text:00000000000035C6 loc_35C6:                               ; CODE XREF: main+1427↑j
.text:00000000000035C6                 movzx   edi, byte ptr [rax-1]
.text:00000000000035CA                 test    byte ptr [r8+rdi*2+1], 20h
.text:00000000000035D0                 jnz     short loc_35B9
.text:00000000000035D2
.text:00000000000035D2 loc_35D2:                               ; CODE XREF: main+1C3A↓j
.text:00000000000035D2                                         ; main+2254↓j
.text:00000000000035D2                 cmp     [rsp+0C8h+var_B0], rax
.text:00000000000035D7                 setb    cs:before_truncation
.text:00000000000035DE
.text:00000000000035DE loc_35DE:                               ; CODE XREF: main+1C32↓j
.text:00000000000035DE                 cmp     r14, rsi
.text:00000000000035E1                 jbe     short loc_3614
.text:00000000000035E3                 mov     rax, [rsp+0C8h+var_C8]
.text:00000000000035E7                 xor     edi, edi
.text:00000000000035E9                 mov     r8, [rax]
.text:00000000000035EC                 jmp     short loc_3600
.text:00000000000035EE ; ---------------------------------------------------------------------------
.text:00000000000035EE
.text:00000000000035EE loc_35EE:                               ; CODE XREF: main+1479↓j
.text:00000000000035EE                 add     rsi, 1
.text:00000000000035F2                 mov     edi, 1
.text:00000000000035F7                 cmp     r14, rsi
.text:00000000000035FA                 jz      loc_3D67
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: main+145C↑j
.text:0000000000003600                 movzx   eax, byte ptr [rsi]
.text:0000000000003603                 test    byte ptr [r8+rax*2+1], 20h
.text:0000000000003609                 jnz     short loc_35EE
.text:000000000000360B                 test    dil, dil
.text:000000000000360E                 jnz     loc_476C
.text:0000000000003614
.text:0000000000003614 loc_3614:                               ; CODE XREF: main+1451↑j
.text:0000000000003614                                         ; main+1BDE↓j ...
.text:0000000000003614                 sub     rdx, rsi
.text:0000000000003617                 sub     rcx, rdx
.text:000000000000361A                 sub     rcx, cs:gap_size
.text:0000000000003621                 test    rcx, rcx
.text:0000000000003624                 mov     r10, rcx
.text:0000000000003627                 jle     loc_3D73
.text:000000000000362D                 mov     rdx, cs:qword_221168
.text:0000000000003634                 lea     r11, tail
.text:000000000000363B                 cmp     r14, rdx
.text:000000000000363E                 mov     r9, rdx
.text:0000000000003641                 mov     cs:tail, rdx
.text:0000000000003648                 jbe     short loc_367A
.text:000000000000364A                 mov     rax, [rsp+0C8h+var_C8]
.text:000000000000364E                 xor     ecx, ecx
.text:0000000000003650                 mov     rsi, [rax]
.text:0000000000003653                 jmp     short loc_3667
.text:0000000000003655 ; ---------------------------------------------------------------------------
.text:0000000000003655
.text:0000000000003655 loc_3655:                               ; CODE XREF: main+14E0↓j
.text:0000000000003655                 add     r9, 1
.text:0000000000003659                 mov     ecx, 1
.text:000000000000365E                 cmp     r14, r9
.text:0000000000003661                 jz      loc_3D9C
.text:0000000000003667
.text:0000000000003667 loc_3667:                               ; CODE XREF: main+14C3↑j
.text:0000000000003667                 movzx   eax, byte ptr [r9]
.text:000000000000366B                 test    byte ptr [rsi+rax*2+1], 20h
.text:0000000000003670                 jnz     short loc_3655
.text:0000000000003672                 test    cl, cl
.text:0000000000003674                 jnz     loc_3D9C
.text:000000000000367A
.text:000000000000367A loc_367A:                               ; CODE XREF: main+14B8↑j
.text:000000000000367A                                         ; main+1C13↓j
.text:000000000000367A                 mov     rax, cs:tail
.text:0000000000003681                 mov     cs:qword_2211A8, r9
.text:0000000000003688                 add     rax, r10
.text:000000000000368B                 cmp     rbp, r9
.text:000000000000368E                 jbe     loc_37C3
.text:0000000000003694                 cmp     r9, rax
.text:0000000000003697                 jnb     loc_3DAF
.text:000000000000369D                 mov     r15, r10
.text:00000000000036A0                 mov     r14, r9
.text:00000000000036A3                 jmp     short loc_36F8
.text:00000000000036A5 ; ---------------------------------------------------------------------------
.text:00000000000036A5
.text:00000000000036A5 loc_36A5:                               ; CODE XREF: main+157A↓j
.text:00000000000036A5                 mov     rdx, rbp
.text:00000000000036A8                 lea     rdi, [rax+8]
.text:00000000000036AC                 xor     r8d, r8d
.text:00000000000036AF                 sub     rdx, r14
.text:00000000000036B2                 xor     ecx, ecx
.text:00000000000036B4                 mov     rsi, r14
.text:00000000000036B7                 mov     [rsp+0C8h+var_C0], r11
.text:00000000000036BC                 call    rpl_re_match
.text:00000000000036C1                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000036C5                 jz      loc_452A
.text:00000000000036CB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000036CF                 mov     edx, 1
.text:00000000000036D4                 mov     r11, [rsp+0C8h+var_C0]
.text:00000000000036D9                 cmovz   rax, rdx
.text:00000000000036DD                 add     r14, rax
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: main+1591↓j
.text:00000000000036E0                 cmp     rbp, r14
.text:00000000000036E3                 jbe     loc_43AA
.text:00000000000036E9
.text:00000000000036E9 loc_36E9:                               ; CODE XREF: main+1617↓j
.text:00000000000036E9                 mov     rax, [r11]
.text:00000000000036EC                 add     rax, r15
.text:00000000000036EF                 cmp     r14, rax
.text:00000000000036F2                 jnb     loc_3DA8
.text:00000000000036F8
.text:00000000000036F8 loc_36F8:                               ; CODE XREF: main+1513↑j
.text:00000000000036F8                 lea     rax, _word_regex
.text:00000000000036FF                 mov     cs:qword_2211A8, r14
.text:0000000000003706                 cmp     qword ptr [rax], 0
.text:000000000000370A                 jnz     short loc_36A5
.text:000000000000370C                 movzx   eax, byte ptr [r14]
.text:0000000000003710                 lea     rsi, _word_fastmap
.text:0000000000003717                 cmp     byte ptr [rsi+rax], 0
.text:000000000000371B                 jnz     short loc_3788
.text:000000000000371D                 add     r14, 1
.text:0000000000003721                 jmp     short loc_36E0
.text:0000000000003723 ; ---------------------------------------------------------------------------
.text:0000000000003723
.text:0000000000003723 loc_3723:                               ; CODE XREF: main+13B8↑j
.text:0000000000003723                 movzx   edi, byte ptr [rsi]
.text:0000000000003726                 lea     r11, _word_fastmap
.text:000000000000372D                 cmp     byte ptr [r11+rdi], 0
.text:0000000000003732                 jnz     short loc_3744
.text:0000000000003734                 add     rsi, 1
.text:0000000000003738                 mov     [r15], rsi
.text:000000000000373B                 lea     rax, [rsi+rcx]
.text:000000000000373F                 jmp     loc_3538
.text:0000000000003744 ; ---------------------------------------------------------------------------
.text:0000000000003744
.text:0000000000003744 loc_3744:                               ; CODE XREF: main+15A2↑j
.text:0000000000003744                 cmp     rsi, rdx
.text:0000000000003747                 jnb     loc_3538
.text:000000000000374D                 lea     rax, [rsi+1]
.text:0000000000003751                 jmp     short loc_3771
.text:0000000000003751 ; ---------------------------------------------------------------------------
.text:0000000000003753                 align 8
.text:0000000000003758
.text:0000000000003758 loc_3758:                               ; CODE XREF: main+15E7↓j
.text:0000000000003758                 movzx   edi, byte ptr [rsi]
.text:000000000000375B                 lea     r11, _word_fastmap
.text:0000000000003762                 lea     rax, [rax+1]
.text:0000000000003766                 cmp     byte ptr [r11+rdi], 0
.text:000000000000376B                 jz      loc_471B
.text:0000000000003771
.text:0000000000003771 loc_3771:                               ; CODE XREF: main+15C1↑j
.text:0000000000003771                 cmp     rdx, rax
.text:0000000000003774                 mov     rsi, rax
.text:0000000000003777                 jnz     short loc_3758
.text:0000000000003779                 mov     [r15], rdx
.text:000000000000377C                 lea     rax, [rdx+rcx]
.text:0000000000003780                 jmp     loc_3538
.text:0000000000003780 ; ---------------------------------------------------------------------------
.text:0000000000003785                 align 8
.text:0000000000003788
.text:0000000000003788 loc_3788:                               ; CODE XREF: main+158B↑j
.text:0000000000003788                 cmp     rbp, r14
.text:000000000000378B                 ja      short loc_37AD
.text:000000000000378D                 jmp     loc_43AA
.text:000000000000378D ; ---------------------------------------------------------------------------
.text:0000000000003792                 align 8
.text:0000000000003798
.text:0000000000003798 loc_3798:                               ; CODE XREF: main+1624↓j
.text:0000000000003798                 movzx   eax, byte ptr [r14]
.text:000000000000379C                 lea     rsi, _word_fastmap
.text:00000000000037A3                 cmp     byte ptr [rsi+rax], 0
.text:00000000000037A7                 jz      loc_36E9
.text:00000000000037AD
.text:00000000000037AD loc_37AD:                               ; CODE XREF: main+15FB↑j
.text:00000000000037AD                 add     r14, 1
.text:00000000000037B1                 cmp     rbp, r14
.text:00000000000037B4                 jnz     short loc_3798
.text:00000000000037B6                 mov     rdx, cs:qword_221168
.text:00000000000037BD                 mov     r10, r15
.text:00000000000037C0                 mov     r9, rbp
.text:00000000000037C3
.text:00000000000037C3 loc_37C3:                               ; CODE XREF: main+14FE↑j
.text:00000000000037C3                                         ; main+2227↓j
.text:00000000000037C3                 mov     rcx, cs:tail
.text:00000000000037CA                 add     r10, rcx
.text:00000000000037CD                 cmp     r9, r10
.text:00000000000037D0                 jnb     short loc_37D9
.text:00000000000037D2                 mov     cs:qword_2211A8, r9
.text:00000000000037D9
.text:00000000000037D9 loc_37D9:                               ; CODE XREF: main+1640↑j
.text:00000000000037D9                                         ; main+1C26↓j
.text:00000000000037D9                 mov     rax, cs:qword_2211A8
.text:00000000000037E0                 cmp     rax, rcx
.text:00000000000037E3                 jbe     loc_3DCF
.text:00000000000037E9                 cmp     cs:truncation_string, 0
.text:00000000000037F1                 mov     cs:keyafter_truncation, 0
.text:00000000000037F8                 mov     r8, cs:tail
.text:00000000000037FF                 setnz   cl
.text:0000000000003802                 cmp     rbp, rax
.text:0000000000003805                 setnbe  sil
.text:0000000000003809                 and     ecx, esi
.text:000000000000380B                 mov     rsi, [rsp+0C8h+var_C8]
.text:000000000000380F                 mov     cs:tail_truncation, cl
.text:0000000000003815                 mov     rdi, [rsi]
.text:0000000000003818                 xor     esi, esi
.text:000000000000381A                 jmp     short loc_3832
.text:000000000000381A ; ---------------------------------------------------------------------------
.text:000000000000381C                 align 20h
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: main+16AB↓j
.text:0000000000003820                 sub     rax, 1
.text:0000000000003824                 mov     esi, 1
.text:0000000000003829                 cmp     r8, rax
.text:000000000000382C                 jnb     loc_470F
.text:0000000000003832
.text:0000000000003832 loc_3832:                               ; CODE XREF: main+168A↑j
.text:0000000000003832                 movzx   ecx, byte ptr [rax-1]
.text:0000000000003836                 test    byte ptr [rdi+rcx*2+1], 20h
.text:000000000000383B                 jnz     short loc_3820
.text:000000000000383D                 test    sil, sil
.text:0000000000003840                 jnz     loc_470F
.text:0000000000003846
.text:0000000000003846 loc_3846:                               ; CODE XREF: main+1C07↓j
.text:0000000000003846                                         ; main+1C46↓j ...
.text:0000000000003846                 lea     rax, keyafter
.text:000000000000384D                 mov     r14, cs:keyafter_max_width
.text:0000000000003854                 sub     rdx, [rax]
.text:0000000000003857                 sub     r14, rdx
.text:000000000000385A                 sub     r14, cs:gap_size
.text:0000000000003861                 test    r14, r14
.text:0000000000003864                 jle     loc_3CBD
.text:000000000000386A                 mov     rax, cs:before
.text:0000000000003871                 cmp     r13, rax
.text:0000000000003874                 mov     cs:qword_221148, rax
.text:000000000000387B                 jnb     short loc_38AD
.text:000000000000387D                 mov     rsi, [rsp+0C8h+var_C8]
.text:0000000000003881                 xor     ecx, ecx
.text:0000000000003883                 mov     rsi, [rsi]
.text:0000000000003886                 jmp     short loc_389A
.text:0000000000003888 ; ---------------------------------------------------------------------------
.text:0000000000003888
.text:0000000000003888 loc_3888:                               ; CODE XREF: main+1713↓j
.text:0000000000003888                 sub     rax, 1
.text:000000000000388C                 mov     ecx, 1
.text:0000000000003891                 cmp     r13, rax
.text:0000000000003894                 jz      loc_4727
.text:000000000000389A
.text:000000000000389A loc_389A:                               ; CODE XREF: main+16F6↑j
.text:000000000000389A                 movzx   edx, byte ptr [rax-1]
.text:000000000000389E                 test    byte ptr [rsi+rdx*2+1], 20h
.text:00000000000038A3                 jnz     short loc_3888
.text:00000000000038A5                 test    cl, cl
.text:00000000000038A7                 jnz     loc_4760
.text:00000000000038AD
.text:00000000000038AD loc_38AD:                               ; CODE XREF: main+16EB↑j
.text:00000000000038AD                                         ; main+259E↓j ...
.text:00000000000038AD                 mov     rdx, cs:qword_221148
.text:00000000000038B4                 lea     r13, head
.text:00000000000038BB                 lea     rax, [rbx+r14]
.text:00000000000038BF                 mov     cs:head, rbx
.text:00000000000038C6                 mov     rsi, rbx
.text:00000000000038C9
.text:00000000000038C9 loc_38C9:                               ; CODE XREF: main+1AF0↓j
.text:00000000000038C9                                         ; main+1AF8↓j ...
.text:00000000000038C9                 cmp     rdx, rax
.text:00000000000038CC                 jbe     short loc_3922
.text:00000000000038CE
.text:00000000000038CE loc_38CE:                               ; CODE XREF: main+1790↓j
.text:00000000000038CE                 lea     rdi, _word_regex
.text:00000000000038D5                 cmp     qword ptr [rdi], 0
.text:00000000000038D9                 jz      loc_3C64
.text:00000000000038DF                 sub     rdx, rsi
.text:00000000000038E2                 xor     r8d, r8d
.text:00000000000038E5                 xor     ecx, ecx
.text:00000000000038E7                 add     rdi, 8
.text:00000000000038EB                 call    rpl_re_match
.text:00000000000038F0                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000038F4                 jz      loc_452A
.text:00000000000038FA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000038FE                 mov     edx, 1
.text:0000000000003903                 cmovz   rax, rdx
.text:0000000000003907                 add     rax, [r13+0]
.text:000000000000390B                 mov     rdx, cs:qword_221148
.text:0000000000003912                 mov     rsi, rax
.text:0000000000003915                 mov     [r13+0], rax
.text:0000000000003919                 lea     rax, [rax+r14]
.text:000000000000391D                 cmp     rdx, rax
.text:0000000000003920                 ja      short loc_38CE
.text:0000000000003922
.text:0000000000003922 loc_3922:                               ; CODE XREF: main+173C↑j
.text:0000000000003922                 cmp     rdx, rsi
.text:0000000000003925                 mov     rbx, rsi
.text:0000000000003928                 jbe     loc_3CD3
.text:000000000000392E                 cmp     cs:truncation_string, 0
.text:0000000000003936                 mov     cs:before_truncation, 0
.text:000000000000393D                 setnz   al
.text:0000000000003940                 cmp     [rsp+0C8h+var_B0], rsi
.text:0000000000003945                 setb    cl
.text:0000000000003948                 and     eax, ecx
.text:000000000000394A                 xor     ecx, ecx
.text:000000000000394C                 mov     cs:head_truncation, al
.text:0000000000003952                 mov     rax, [rsp+0C8h+var_C8]
.text:0000000000003956                 mov     rsi, [rax]
.text:0000000000003959                 jmp     short loc_3972
.text:0000000000003959 ; ---------------------------------------------------------------------------
.text:000000000000395B                 align 20h
.text:0000000000003960
.text:0000000000003960 loc_3960:                               ; CODE XREF: main+17EA↓j
.text:0000000000003960                 add     rbx, 1
.text:0000000000003964                 mov     ecx, 1
.text:0000000000003969                 cmp     rbx, rdx
.text:000000000000396C                 jz      loc_4733
.text:0000000000003972
.text:0000000000003972 loc_3972:                               ; CODE XREF: main+17C9↑j
.text:0000000000003972                 movzx   eax, byte ptr [rbx]
.text:0000000000003975                 test    byte ptr [rsi+rax*2+1], 20h
.text:000000000000397A                 jnz     short loc_3960
.text:000000000000397C                 test    cl, cl
.text:000000000000397E                 jnz     loc_4733
.text:0000000000003984
.text:0000000000003984 loc_3984:                               ; CODE XREF: main+1B4A↓j
.text:0000000000003984                                         ; main+25AA↓j
.text:0000000000003984                 movzx   edx, cs:auto_reference
.text:000000000000398B                 test    dl, dl
.text:000000000000398D                 jz      loc_3CDF
.text:0000000000003993                 movsxd  rdx, dword ptr [r12+28h]
.text:0000000000003998                 mov     rsi, cs:input_file_name
.text:000000000000399F                 lea     rdi, aWrittenBySSAnd+1Bh ; ""
.text:00000000000039A6                 mov     rsi, [rsi+rdx*8]
.text:00000000000039AA                 lea     rcx, ds:0[rdx*8]
.text:00000000000039B2                 test    rsi, rsi
.text:00000000000039B5                 cmovz   rsi, rdi        ; src
.text:00000000000039B9                 mov     rdi, [r12+20h]
.text:00000000000039BE                 test    edx, edx
.text:00000000000039C0                 lea     rbx, [rdi+1]
.text:00000000000039C4                 jle     short loc_39D2
.text:00000000000039C6                 mov     rax, cs:file_line_count
.text:00000000000039CD                 sub     rbx, [rax+rcx-8]
.text:00000000000039D2
.text:00000000000039D2 loc_39D2:                               ; CODE XREF: main+1834↑j
.text:00000000000039D2                 mov     rdi, cs:reference ; dest
.text:00000000000039D9                 call    _stpcpy
.text:00000000000039DE                 lea     rcx, aLd        ; ":%ld"
.text:00000000000039E5                 mov     rbp, rax
.text:00000000000039E8                 mov     rdi, rax
.text:00000000000039EB                 mov     r8, rbx
.text:00000000000039EE                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000039F2                 mov     esi, 1
.text:00000000000039F7                 xor     eax, eax
.text:00000000000039F9                 call    ___sprintf_chk
.text:00000000000039FE                 cdqe
.text:0000000000003A00                 add     rbp, rax
.text:0000000000003A03                 mov     cs:qword_221128, rbp
.text:0000000000003A0A
.text:0000000000003A0A loc_3A0A:                               ; CODE XREF: main+1B58↓j
.text:0000000000003A0A                                         ; main+1B7E↓j ...
.text:0000000000003A0A                 mov     eax, cs:output_format
.text:0000000000003A10                 cmp     eax, 2
.text:0000000000003A13                 jz      loc_3DDB
.text:0000000000003A19                 jb      loc_3FF6
.text:0000000000003A1F                 cmp     eax, 3
.text:0000000000003A22                 jnz     loc_3C1D
.text:0000000000003A28                 mov     rdx, cs:macro_name
.text:0000000000003A2F                 lea     rsi, aS         ; "\\%s "
.text:0000000000003A36                 mov     edi, 1
.text:0000000000003A3B                 xor     eax, eax
.text:0000000000003A3D                 call    ___printf_chk
.text:0000000000003A42                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000003A49                 mov     rax, [rdi+28h]
.text:0000000000003A4D                 cmp     rax, [rdi+30h]
.text:0000000000003A51                 jnb     loc_4672
.text:0000000000003A57                 lea     rdx, [rax+1]
.text:0000000000003A5B                 mov     [rdi+28h], rdx
.text:0000000000003A5F                 mov     byte ptr [rax], 7Bh ; '{'
.text:0000000000003A62
.text:0000000000003A62 loc_3A62:                               ; CODE XREF: main+24EC↓j
.text:0000000000003A62                 mov     rdi, cs:tail
.text:0000000000003A69                 mov     rsi, cs:qword_2211A8
.text:0000000000003A70                 call    print_field
.text:0000000000003A75                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003A7C                 lea     rdi, asc_1B8AF  ; "}{"
.text:0000000000003A83                 mov     edx, 2          ; n
.text:0000000000003A88                 mov     esi, 1          ; size
.text:0000000000003A8D                 call    _fwrite_unlocked
.text:0000000000003A92                 mov     rdi, cs:before
.text:0000000000003A99                 mov     rsi, cs:qword_221188
.text:0000000000003AA0                 call    print_field
.text:0000000000003AA5                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003AAC                 lea     rdi, asc_1B8AF  ; "}{"
.text:0000000000003AB3                 mov     edx, 2          ; n
.text:0000000000003AB8                 mov     esi, 1          ; size
.text:0000000000003ABD                 call    _fwrite_unlocked
.text:0000000000003AC2                 lea     rax, keyafter
.text:0000000000003AC9                 mov     rbp, cs:qword_221168
.text:0000000000003AD0                 mov     rbx, [rax]
.text:0000000000003AD3                 lea     rax, _word_regex
.text:0000000000003ADA                 cmp     qword ptr [rax], 0
.text:0000000000003ADE                 mov     r13, rbx
.text:0000000000003AE1                 jz      loc_436E
.text:0000000000003AE7                 mov     rdx, rbp
.text:0000000000003AEA                 lea     rdi, [rax+8]
.text:0000000000003AEE                 xor     r8d, r8d
.text:0000000000003AF1                 sub     rdx, rbx
.text:0000000000003AF4                 xor     ecx, ecx
.text:0000000000003AF6                 mov     rsi, rbx
.text:0000000000003AF9                 call    rpl_re_match
.text:0000000000003AFE                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003B02                 jz      loc_452A
.text:0000000000003B08                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B0C                 jz      loc_46DB
.text:0000000000003B12
.text:0000000000003B12 loc_3B12:                               ; CODE XREF: main+2550↓j
.text:0000000000003B12                 add     rbx, rax
.text:0000000000003B15
.text:0000000000003B15 loc_3B15:                               ; CODE XREF: main+21F2↓j
.text:0000000000003B15                                         ; main+21FA↓j ...
.text:0000000000003B15                 mov     rdi, r13
.text:0000000000003B18                 mov     rsi, rbx
.text:0000000000003B1B                 call    print_field
.text:0000000000003B20                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003B27                 lea     rdi, asc_1B8AF  ; "}{"
.text:0000000000003B2E                 mov     edx, 2          ; n
.text:0000000000003B33                 mov     esi, 1          ; size
.text:0000000000003B38                 call    _fwrite_unlocked
.text:0000000000003B3D                 mov     rdi, rbx
.text:0000000000003B40                 mov     rsi, rbp
.text:0000000000003B43                 call    print_field
.text:0000000000003B48                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003B4F                 lea     rdi, asc_1B8AF  ; "}{"
.text:0000000000003B56                 mov     edx, 2          ; n
.text:0000000000003B5B                 mov     esi, 1          ; size
.text:0000000000003B60                 call    _fwrite_unlocked
.text:0000000000003B65                 mov     rdi, cs:head
.text:0000000000003B6C                 mov     rsi, cs:qword_221148
.text:0000000000003B73                 call    print_field
.text:0000000000003B78                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003B7F                 mov     rax, [rdi+28h]
.text:0000000000003B83                 cmp     rax, [rdi+30h]
.text:0000000000003B87                 jnb     loc_46CC
.text:0000000000003B8D                 lea     rdx, [rax+1]
.text:0000000000003B91                 mov     [rdi+28h], rdx
.text:0000000000003B95                 mov     byte ptr [rax], 7Dh ; '}'
.text:0000000000003B98
.text:0000000000003B98 loc_3B98:                               ; CODE XREF: main+2546↓j
.text:0000000000003B98                 cmp     cs:auto_reference, 0
.text:0000000000003B9F                 jnz     short loc_3BAA
.text:0000000000003BA1                 cmp     cs:input_reference, 0
.text:0000000000003BA8                 jz      short loc_3BFD
.text:0000000000003BAA
.text:0000000000003BAA loc_3BAA:                               ; CODE XREF: main+1A0F↑j
.text:0000000000003BAA                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003BB1                 mov     rax, [rdi+28h]
.text:0000000000003BB5                 cmp     rax, [rdi+30h]
.text:0000000000003BB9                 jnb     loc_4681
.text:0000000000003BBF                 lea     rdx, [rax+1]
.text:0000000000003BC3                 mov     [rdi+28h], rdx
.text:0000000000003BC7                 mov     byte ptr [rax], 7Bh ; '{'
.text:0000000000003BCA
.text:0000000000003BCA loc_3BCA:                               ; CODE XREF: main+24FB↓j
.text:0000000000003BCA                 mov     rdi, cs:reference
.text:0000000000003BD1                 mov     rsi, cs:qword_221128
.text:0000000000003BD8                 call    print_field
.text:0000000000003BDD                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003BE4                 mov     rax, [rdi+28h]
.text:0000000000003BE8                 cmp     rax, [rdi+30h]
.text:0000000000003BEC                 jnb     loc_4690
.text:0000000000003BF2                 lea     rdx, [rax+1]
.text:0000000000003BF6                 mov     [rdi+28h], rdx
.text:0000000000003BFA                 mov     byte ptr [rax], 7Dh ; '}'
.text:0000000000003BFD
.text:0000000000003BFD loc_3BFD:                               ; CODE XREF: main+1A18↑j
.text:0000000000003BFD                                         ; main+1E0B↓j ...
.text:0000000000003BFD                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003C04                 mov     rax, [rdi+28h]
.text:0000000000003C08                 cmp     rax, [rdi+30h]
.text:0000000000003C0C                 jnb     loc_4806
.text:0000000000003C12                 lea     rdx, [rax+1]
.text:0000000000003C16                 mov     [rdi+28h], rdx
.text:0000000000003C1A                 mov     byte ptr [rax], 0Ah
.text:0000000000003C1D
.text:0000000000003C1D loc_3C1D:                               ; CODE XREF: main+1892↑j
.text:0000000000003C1D                                         ; main+2680↓j
.text:0000000000003C1D                 add     [rsp+0C8h+var_B8], 1
.text:0000000000003C23                 add     r12, 30h ; '0'
.text:0000000000003C27                 mov     rax, [rsp+0C8h+var_B8]
.text:0000000000003C2C                 cmp     rax, cs:number_of_occurs
.text:0000000000003C33                 jl      loc_2DA1
.text:0000000000003C39
.text:0000000000003C39 loc_3C39:                               ; CODE XREF: main+C02↑j
.text:0000000000003C39                 xor     eax, eax
.text:0000000000003C3B                 mov     rsi, [rsp+0C8h+var_40]
.text:0000000000003C43                 xor     rsi, fs:28h
.text:0000000000003C4C                 jnz     loc_473F
.text:0000000000003C52                 add     rsp, 98h
.text:0000000000003C59                 pop     rbx
.text:0000000000003C5A                 pop     rbp
.text:0000000000003C5B                 pop     r12
.text:0000000000003C5D                 pop     r13
.text:0000000000003C5F                 pop     r14
.text:0000000000003C61                 pop     r15
.text:0000000000003C63                 retn
.text:0000000000003C64 ; ---------------------------------------------------------------------------
.text:0000000000003C64
.text:0000000000003C64 loc_3C64:                               ; CODE XREF: main+1749↑j
.text:0000000000003C64                 movzx   ecx, byte ptr [rsi]
.text:0000000000003C67                 lea     rdi, _word_fastmap
.text:0000000000003C6E                 cmp     byte ptr [rdi+rcx], 0
.text:0000000000003C72                 jnz     short loc_3C85
.text:0000000000003C74                 add     rsi, 1
.text:0000000000003C78
.text:0000000000003C78 loc_3C78:                               ; CODE XREF: main+1B16↓j
.text:0000000000003C78                 mov     [r13+0], rsi
.text:0000000000003C7C                 lea     rax, [rsi+r14]
.text:0000000000003C80                 jmp     loc_38C9
.text:0000000000003C85 ; ---------------------------------------------------------------------------
.text:0000000000003C85
.text:0000000000003C85 loc_3C85:                               ; CODE XREF: main+1AE2↑j
.text:0000000000003C85                 cmp     rdx, rsi
.text:0000000000003C88                 jbe     loc_38C9
.text:0000000000003C8E                 lea     rax, [rsi+1]
.text:0000000000003C92                 jmp     short loc_3CA8
.text:0000000000003C94 ; ---------------------------------------------------------------------------
.text:0000000000003C94
.text:0000000000003C94 loc_3C94:                               ; CODE XREF: main+1B1E↓j
.text:0000000000003C94                 movzx   ecx, byte ptr [rsi]
.text:0000000000003C97                 lea     rdi, _word_fastmap
.text:0000000000003C9E                 lea     rax, [rax+1]
.text:0000000000003CA2                 cmp     byte ptr [rdi+rcx], 0
.text:0000000000003CA6                 jz      short loc_3C78
.text:0000000000003CA8
.text:0000000000003CA8 loc_3CA8:                               ; CODE XREF: main+1B02↑j
.text:0000000000003CA8                 cmp     rdx, rax
.text:0000000000003CAB                 mov     rsi, rax
.text:0000000000003CAE                 jnz     short loc_3C94
.text:0000000000003CB0                 mov     [r13+0], rdx
.text:0000000000003CB4                 lea     rax, [rdx+r14]
.text:0000000000003CB8                 jmp     loc_38C9
.text:0000000000003CBD ; ---------------------------------------------------------------------------
.text:0000000000003CBD
.text:0000000000003CBD loc_3CBD:                               ; CODE XREF: main+16D4↑j
.text:0000000000003CBD                 mov     cs:head, 0
.text:0000000000003CC8                 mov     cs:qword_221148, 0
.text:0000000000003CD3
.text:0000000000003CD3 loc_3CD3:                               ; CODE XREF: main+1798↑j
.text:0000000000003CD3                 mov     cs:head_truncation, 0
.text:0000000000003CDA                 jmp     loc_3984
.text:0000000000003CDF ; ---------------------------------------------------------------------------
.text:0000000000003CDF
.text:0000000000003CDF loc_3CDF:                               ; CODE XREF: main+17FD↑j
.text:0000000000003CDF                 movzx   ecx, cs:input_reference
.text:0000000000003CE6                 test    cl, cl
.text:0000000000003CE8                 jz      loc_3A0A
.text:0000000000003CEE                 lea     rsi, keyafter
.text:0000000000003CF5                 mov     rax, [r12+20h]
.text:0000000000003CFA                 add     rax, [rsi]
.text:0000000000003CFD                 cmp     rbp, rax
.text:0000000000003D00                 mov     cs:reference, rax
.text:0000000000003D07                 mov     cs:qword_221128, rax
.text:0000000000003D0E                 jbe     loc_3A0A
.text:0000000000003D14                 mov     rsi, [rsp+0C8h+var_C8]
.text:0000000000003D18                 mov     rsi, [rsi]
.text:0000000000003D1B                 jmp     short loc_3D2C
.text:0000000000003D1D ; ---------------------------------------------------------------------------
.text:0000000000003D1D
.text:0000000000003D1D loc_3D1D:                               ; CODE XREF: main+1BA4↓j
.text:0000000000003D1D                 add     rax, 1
.text:0000000000003D21                 mov     edx, ecx
.text:0000000000003D23                 cmp     rbp, rax
.text:0000000000003D26                 jz      loc_4754
.text:0000000000003D2C
.text:0000000000003D2C loc_3D2C:                               ; CODE XREF: main+1B8B↑j
.text:0000000000003D2C                 movzx   edi, byte ptr [rax]
.text:0000000000003D2F                 test    byte ptr [rsi+rdi*2+1], 20h
.text:0000000000003D34                 jz      short loc_3D1D
.text:0000000000003D36                 test    dl, dl
.text:0000000000003D38                 jz      loc_3A0A
.text:0000000000003D3E                 mov     cs:qword_221128, rax
.text:0000000000003D45                 jmp     loc_3A0A
.text:0000000000003D4A ; ---------------------------------------------------------------------------
.text:0000000000003D4A
.text:0000000000003D4A loc_3D4A:                               ; CODE XREF: main+12F9↑j
.text:0000000000003D4A                 lea     rbx, [rsi+rcx]
.text:0000000000003D4E                 jmp     loc_34CF
.text:0000000000003D53 ; ---------------------------------------------------------------------------
.text:0000000000003D53
.text:0000000000003D53 loc_3D53:                               ; CODE XREF: main+CD4↑j
.text:0000000000003D53                 mov     rcx, [r12+10h]
.text:0000000000003D58
.text:0000000000003D58 loc_3D58:                               ; CODE XREF: main+C73↑j
.text:0000000000003D58                 lea     rax, keyafter
.text:0000000000003D5F                 mov     rsi, [rax]
.text:0000000000003D62                 jmp     loc_340E
.text:0000000000003D67 ; ---------------------------------------------------------------------------
.text:0000000000003D67
.text:0000000000003D67 loc_3D67:                               ; CODE XREF: main+146A↑j
.text:0000000000003D67                 mov     cs:before, r14
.text:0000000000003D6E                 jmp     loc_3614
.text:0000000000003D73 ; ---------------------------------------------------------------------------
.text:0000000000003D73
.text:0000000000003D73 loc_3D73:                               ; CODE XREF: main+1497↑j
.text:0000000000003D73                 mov     cs:tail, 0
.text:0000000000003D7E                 mov     cs:qword_2211A8, 0
.text:0000000000003D89                 mov     cs:tail_truncation, 0
.text:0000000000003D90                 mov     rdx, cs:qword_221168
.text:0000000000003D97                 jmp     loc_3846
.text:0000000000003D9C ; ---------------------------------------------------------------------------
.text:0000000000003D9C
.text:0000000000003D9C loc_3D9C:                               ; CODE XREF: main+14D1↑j
.text:0000000000003D9C                                         ; main+14E4↑j
.text:0000000000003D9C                 mov     cs:tail, r9
.text:0000000000003DA3                 jmp     loc_367A
.text:0000000000003DA8 ; ---------------------------------------------------------------------------
.text:0000000000003DA8
.text:0000000000003DA8 loc_3DA8:                               ; CODE XREF: main+1562↑j
.text:0000000000003DA8                 mov     rdx, cs:qword_221168
.text:0000000000003DAF
.text:0000000000003DAF loc_3DAF:                               ; CODE XREF: main+1507↑j
.text:0000000000003DAF                 mov     rcx, cs:tail
.text:0000000000003DB6                 jmp     loc_37D9
.text:0000000000003DBB ; ---------------------------------------------------------------------------
.text:0000000000003DBB
.text:0000000000003DBB loc_3DBB:                               ; CODE XREF: main+140E↑j
.text:0000000000003DBB                 mov     cs:before_truncation, 0
.text:0000000000003DC2                 jmp     loc_35DE
.text:0000000000003DC7 ; ---------------------------------------------------------------------------
.text:0000000000003DC7
.text:0000000000003DC7 loc_3DC7:                               ; CODE XREF: main+1430↑j
.text:0000000000003DC7                 mov     rax, r13
.text:0000000000003DCA                 jmp     loc_35D2
.text:0000000000003DCF ; ---------------------------------------------------------------------------
.text:0000000000003DCF
.text:0000000000003DCF loc_3DCF:                               ; CODE XREF: main+1653↑j
.text:0000000000003DCF                 mov     cs:tail_truncation, 0
.text:0000000000003DD6                 jmp     loc_3846
.text:0000000000003DDB ; ---------------------------------------------------------------------------
.text:0000000000003DDB
.text:0000000000003DDB loc_3DDB:                               ; CODE XREF: main+1883↑j
.text:0000000000003DDB                 mov     rdx, cs:macro_name
.text:0000000000003DE2                 lea     rsi, aS_0       ; ".%s \""
.text:0000000000003DE9                 mov     edi, 1
.text:0000000000003DEE                 xor     eax, eax
.text:0000000000003DF0                 call    ___printf_chk
.text:0000000000003DF5                 mov     rdi, cs:tail
.text:0000000000003DFC                 mov     rsi, cs:qword_2211A8
.text:0000000000003E03                 call    print_field
.text:0000000000003E08                 cmp     cs:tail_truncation, 0
.text:0000000000003E0F                 jz      short loc_3E24
.text:0000000000003E11                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003E18                 mov     rdi, cs:truncation_string ; s
.text:0000000000003E1F                 call    _fputs_unlocked
.text:0000000000003E24
.text:0000000000003E24 loc_3E24:                               ; CODE XREF: main+1C7F↑j
.text:0000000000003E24                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003E2B                 mov     rax, [rdi+28h]
.text:0000000000003E2F                 cmp     rax, [rdi+30h]
.text:0000000000003E33                 jnb     loc_46F4
.text:0000000000003E39                 lea     rdx, [rax+1]
.text:0000000000003E3D                 mov     [rdi+28h], rdx
.text:0000000000003E41                 mov     byte ptr [rax], 22h ; '"'
.text:0000000000003E44
.text:0000000000003E44 loc_3E44:                               ; CODE XREF: main+256E↓j
.text:0000000000003E44                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003E4B                 lea     rdi, aS_0+3     ; ptr
.text:0000000000003E52                 mov     edx, 2          ; n
.text:0000000000003E57                 mov     esi, 1          ; size
.text:0000000000003E5C                 call    _fwrite_unlocked
.text:0000000000003E61                 cmp     cs:before_truncation, 0
.text:0000000000003E68                 jz      short loc_3E7D
.text:0000000000003E6A                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003E71                 mov     rdi, cs:truncation_string ; s
.text:0000000000003E78                 call    _fputs_unlocked
.text:0000000000003E7D
.text:0000000000003E7D loc_3E7D:                               ; CODE XREF: main+1CD8↑j
.text:0000000000003E7D                 mov     rdi, cs:before
.text:0000000000003E84                 mov     rsi, cs:qword_221188
.text:0000000000003E8B                 call    print_field
.text:0000000000003E90                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003E97                 mov     rax, [rdi+28h]
.text:0000000000003E9B                 cmp     rax, [rdi+30h]
.text:0000000000003E9F                 jnb     loc_46E5
.text:0000000000003EA5                 lea     rdx, [rax+1]
.text:0000000000003EA9                 mov     [rdi+28h], rdx
.text:0000000000003EAD                 mov     byte ptr [rax], 22h ; '"'
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: main+255F↓j
.text:0000000000003EB0                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003EB7                 lea     rdi, aS_0+3     ; ptr
.text:0000000000003EBE                 mov     edx, 2          ; n
.text:0000000000003EC3                 mov     esi, 1          ; size
.text:0000000000003EC8                 call    _fwrite_unlocked
.text:0000000000003ECD                 lea     rax, keyafter
.text:0000000000003ED4                 mov     rsi, cs:qword_221168
.text:0000000000003EDB                 mov     rdi, [rax]
.text:0000000000003EDE                 call    print_field
.text:0000000000003EE3                 cmp     cs:keyafter_truncation, 0
.text:0000000000003EEA                 jz      short loc_3EFF
.text:0000000000003EEC                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003EF3                 mov     rdi, cs:truncation_string ; s
.text:0000000000003EFA                 call    _fputs_unlocked
.text:0000000000003EFF
.text:0000000000003EFF loc_3EFF:                               ; CODE XREF: main+1D5A↑j
.text:0000000000003EFF                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003F06                 mov     rax, [rdi+28h]
.text:0000000000003F0A                 cmp     rax, [rdi+30h]
.text:0000000000003F0E                 jnb     loc_46BD
.text:0000000000003F14                 lea     rdx, [rax+1]
.text:0000000000003F18                 mov     [rdi+28h], rdx
.text:0000000000003F1C                 mov     byte ptr [rax], 22h ; '"'
.text:0000000000003F1F
.text:0000000000003F1F loc_3F1F:                               ; CODE XREF: main+2537↓j
.text:0000000000003F1F                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003F26                 lea     rdi, aS_0+3     ; ptr
.text:0000000000003F2D                 mov     edx, 2          ; n
.text:0000000000003F32                 mov     esi, 1          ; size
.text:0000000000003F37                 call    _fwrite_unlocked
.text:0000000000003F3C                 cmp     cs:head_truncation, 0
.text:0000000000003F43                 jz      short loc_3F58
.text:0000000000003F45                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003F4C                 mov     rdi, cs:truncation_string ; s
.text:0000000000003F53                 call    _fputs_unlocked
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: main+1DB3↑j
.text:0000000000003F58                 mov     rdi, cs:head
.text:0000000000003F5F                 mov     rsi, cs:qword_221148
.text:0000000000003F66                 call    print_field
.text:0000000000003F6B                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003F72                 mov     rax, [rdi+28h]
.text:0000000000003F76                 cmp     rax, [rdi+30h]
.text:0000000000003F7A                 jnb     loc_46AE
.text:0000000000003F80                 lea     rdx, [rax+1]
.text:0000000000003F84                 mov     [rdi+28h], rdx
.text:0000000000003F88                 mov     byte ptr [rax], 22h ; '"'
.text:0000000000003F8B
.text:0000000000003F8B loc_3F8B:                               ; CODE XREF: main+2528↓j
.text:0000000000003F8B                 cmp     cs:auto_reference, 0
.text:0000000000003F92                 jnz     short loc_3FA1
.text:0000000000003F94                 cmp     cs:input_reference, 0
.text:0000000000003F9B                 jz      loc_3BFD
.text:0000000000003FA1
.text:0000000000003FA1 loc_3FA1:                               ; CODE XREF: main+1E02↑j
.text:0000000000003FA1                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003FA8                 lea     rdi, aS_0+3     ; ptr
.text:0000000000003FAF                 mov     edx, 2          ; n
.text:0000000000003FB4                 mov     esi, 1          ; size
.text:0000000000003FB9                 call    _fwrite_unlocked
.text:0000000000003FBE                 mov     rdi, cs:reference
.text:0000000000003FC5                 mov     rsi, cs:qword_221128
.text:0000000000003FCC                 call    print_field
.text:0000000000003FD1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003FD8                 mov     rax, [rdi+28h]
.text:0000000000003FDC                 cmp     rax, [rdi+30h]
.text:0000000000003FE0                 jnb     loc_469F
.text:0000000000003FE6                 lea     rdx, [rax+1]
.text:0000000000003FEA                 mov     [rdi+28h], rdx
.text:0000000000003FEE                 mov     byte ptr [rax], 22h ; '"'
.text:0000000000003FF1                 jmp     loc_3BFD
.text:0000000000003FF6 ; ---------------------------------------------------------------------------
.text:0000000000003FF6
.text:0000000000003FF6 loc_3FF6:                               ; CODE XREF: main+1889↑j
.text:0000000000003FF6                 cmp     cs:right_reference, 0
.text:0000000000003FFD                 jnz     short loc_4067
.text:0000000000003FFF                 cmp     cs:auto_reference, 0
.text:0000000000004006                 mov     rdi, cs:reference
.text:000000000000400D                 mov     rsi, cs:qword_221128
.text:0000000000004014                 jz      loc_421C
.text:000000000000401A                 call    print_field
.text:000000000000401F                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004026                 mov     rax, [rdi+28h]
.text:000000000000402A                 cmp     rax, [rdi+30h]
.text:000000000000402E                 jnb     loc_47B5
.text:0000000000004034                 lea     rdx, [rax+1]
.text:0000000000004038                 mov     [rdi+28h], rdx
.text:000000000000403C                 mov     byte ptr [rax], 3Ah ; ':'
.text:000000000000403F
.text:000000000000403F loc_403F:                               ; CODE XREF: main+262F↓j
.text:000000000000403F                 mov     rdi, cs:gap_size
.text:0000000000004046                 mov     rax, cs:qword_221128
.text:000000000000404D                 add     rdi, cs:reference_max_width
.text:0000000000004054                 sub     rax, cs:reference
.text:000000000000405B                 sub     rdi, rax
.text:000000000000405E                 sub     rdi, 1
.text:0000000000004062                 call    print_spaces
.text:0000000000004067
.text:0000000000004067 loc_4067:                               ; CODE XREF: main+1E6D↑j
.text:0000000000004067                                         ; main+20B5↓j
.text:0000000000004067                 mov     rdi, cs:tail
.text:000000000000406E                 cmp     rdi, cs:qword_2211A8
.text:0000000000004075                 jb      loc_42F3
.text:000000000000407B                 mov     rdi, cs:half_line_width
.text:0000000000004082                 mov     rax, cs:qword_221188
.text:0000000000004089                 sub     rdi, cs:gap_size
.text:0000000000004090                 sub     rax, cs:before
.text:0000000000004097                 sub     rdi, rax
.text:000000000000409A                 xor     eax, eax
.text:000000000000409C                 cmp     cs:before_truncation, 0
.text:00000000000040A3                 jz      short loc_40AC
.text:00000000000040A5
.text:00000000000040A5 loc_40A5:                               ; CODE XREF: main+21D0↓j
.text:00000000000040A5                 mov     rax, cs:truncation_string_length
.text:00000000000040AC
.text:00000000000040AC loc_40AC:                               ; CODE XREF: main+1F13↑j
.text:00000000000040AC                                         ; main+21CA↓j
.text:00000000000040AC                 sub     rdi, rax
.text:00000000000040AF                 call    print_spaces
.text:00000000000040B4                 cmp     cs:before_truncation, 0
.text:00000000000040BB                 jz      short loc_40D0
.text:00000000000040BD                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000040C4                 mov     rdi, cs:truncation_string ; s
.text:00000000000040CB                 call    _fputs_unlocked
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: main+1F2B↑j
.text:00000000000040D0                 mov     rsi, cs:qword_221188
.text:00000000000040D7                 mov     rdi, cs:before
.text:00000000000040DE                 call    print_field
.text:00000000000040E3                 mov     rdi, cs:gap_size
.text:00000000000040EA                 call    print_spaces
.text:00000000000040EF                 lea     rax, keyafter
.text:00000000000040F6                 mov     rsi, cs:qword_221168
.text:00000000000040FD                 mov     rdi, [rax]
.text:0000000000004100                 call    print_field
.text:0000000000004105                 cmp     cs:keyafter_truncation, 0
.text:000000000000410C                 jnz     loc_424A
.text:0000000000004112                 mov     rcx, cs:head
.text:0000000000004119                 mov     rdx, cs:qword_221148
.text:0000000000004120                 lea     r13, head
.text:0000000000004127                 cmp     rcx, rdx
.text:000000000000412A                 jb      loc_4790
.text:0000000000004130
.text:0000000000004130 loc_4130:                               ; CODE XREF: main+20E5↓j
.text:0000000000004130                 cmp     cs:auto_reference, 0
.text:0000000000004137                 jnz     loc_420A
.text:000000000000413D                 cmp     cs:input_reference, 0
.text:0000000000004144                 jz      loc_3BFD
.text:000000000000414A                 cmp     cs:right_reference, 0
.text:0000000000004151                 jz      loc_47DC
.text:0000000000004157
.text:0000000000004157 loc_4157:                               ; CODE XREF: main+2081↓j
.text:0000000000004157                 lea     rsi, keyafter
.text:000000000000415E                 mov     rax, cs:qword_221168
.text:0000000000004165                 mov     rdi, cs:half_line_width
.text:000000000000416C                 sub     rax, [rsi]
.text:000000000000416F                 sub     rdi, rax
.text:0000000000004172                 xor     eax, eax
.text:0000000000004174                 cmp     cs:keyafter_truncation, 0
.text:000000000000417B                 jz      short loc_4184
.text:000000000000417D                 mov     rax, cs:truncation_string_length
.text:0000000000004184
.text:0000000000004184 loc_4184:                               ; CODE XREF: main+1FEB↑j
.text:0000000000004184                 sub     rdi, rax
.text:0000000000004187                 call    print_spaces
.text:000000000000418C
.text:000000000000418C loc_418C:                               ; CODE XREF: main+215E↓j
.text:000000000000418C                 cmp     cs:auto_reference, 0
.text:0000000000004193                 jz      loc_47DC
.text:0000000000004199
.text:0000000000004199 loc_4199:                               ; CODE XREF: main+2653↓j
.text:0000000000004199                 cmp     cs:right_reference, 0
.text:00000000000041A0                 jz      loc_3BFD
.text:00000000000041A6                 mov     rdi, cs:gap_size
.text:00000000000041AD                 call    print_spaces
.text:00000000000041B2                 mov     rdi, cs:reference
.text:00000000000041B9                 mov     rsi, cs:qword_221128
.text:00000000000041C0                 call    print_field
.text:00000000000041C5                 jmp     loc_3BFD
.text:00000000000041CA ; ---------------------------------------------------------------------------
.text:00000000000041CA
.text:00000000000041CA loc_41CA:                               ; CODE XREF: main+1310↑j
.text:00000000000041CA                 movzx   eax, byte ptr [rbx]
.text:00000000000041CD                 lea     rdi, _word_fastmap
.text:00000000000041D4                 cmp     byte ptr [rdi+rax], 0
.text:00000000000041D8                 jz      loc_4365
.text:00000000000041DE                 cmp     rbx, rsi
.text:00000000000041E1                 jb      short loc_41FC
.text:00000000000041E3                 jmp     loc_34CF
.text:00000000000041E8 ; ---------------------------------------------------------------------------
.text:00000000000041E8
.text:00000000000041E8 loc_41E8:                               ; CODE XREF: main+2073↓j
.text:00000000000041E8                 movzx   eax, byte ptr [rbx]
.text:00000000000041EB                 lea     rdi, _word_fastmap
.text:00000000000041F2                 cmp     byte ptr [rdi+rax], 0
.text:00000000000041F6                 jz      loc_34CF
.text:00000000000041FC
.text:00000000000041FC loc_41FC:                               ; CODE XREF: main+2051↑j
.text:00000000000041FC                 add     rbx, 1
.text:0000000000004200                 cmp     rbx, rsi
.text:0000000000004203                 jnz     short loc_41E8
.text:0000000000004205                 jmp     loc_34CF
.text:000000000000420A ; ---------------------------------------------------------------------------
.text:000000000000420A
.text:000000000000420A loc_420A:                               ; CODE XREF: main+1FA7↑j
.text:000000000000420A                 cmp     cs:right_reference, 0
.text:0000000000004211                 jnz     loc_4157
.text:0000000000004217                 jmp     loc_3BFD
.text:000000000000421C ; ---------------------------------------------------------------------------
.text:000000000000421C
.text:000000000000421C loc_421C:                               ; CODE XREF: main+1E84↑j
.text:000000000000421C                 call    print_field
.text:0000000000004221                 mov     rdi, cs:gap_size
.text:0000000000004228                 mov     rax, cs:qword_221128
.text:000000000000422F                 add     rdi, cs:reference_max_width
.text:0000000000004236                 sub     rax, cs:reference
.text:000000000000423D                 sub     rdi, rax
.text:0000000000004240                 call    print_spaces
.text:0000000000004245                 jmp     loc_4067
.text:000000000000424A ; ---------------------------------------------------------------------------
.text:000000000000424A
.text:000000000000424A loc_424A:                               ; CODE XREF: main+1F7C↑j
.text:000000000000424A                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000004251                 mov     rdi, cs:truncation_string ; s
.text:0000000000004258                 lea     r13, head
.text:000000000000425F                 call    _fputs_unlocked
.text:0000000000004264                 mov     rcx, cs:head
.text:000000000000426B                 mov     rdx, cs:qword_221148
.text:0000000000004272                 cmp     rcx, rdx
.text:0000000000004275                 jnb     loc_4130
.text:000000000000427B                 lea     rsi, keyafter
.text:0000000000004282                 mov     rax, cs:qword_221168
.text:0000000000004289                 sub     rax, [rsi]
.text:000000000000428C                 mov     rsi, cs:half_line_width
.text:0000000000004293                 sub     rsi, rax
.text:0000000000004296                 mov     rax, rsi
.text:0000000000004299                 xor     esi, esi
.text:000000000000429B                 cmp     cs:keyafter_truncation, 0
.text:00000000000042A2                 jz      short loc_42AB
.text:00000000000042A4                 mov     rsi, cs:truncation_string_length
.text:00000000000042AB
.text:00000000000042AB loc_42AB:                               ; CODE XREF: main+2112↑j
.text:00000000000042AB                                         ; main+2620↓j
.text:00000000000042AB                 sub     rax, rsi
.text:00000000000042AE                 sub     rdx, rcx
.text:00000000000042B1                 mov     rdi, rax
.text:00000000000042B4                 xor     eax, eax
.text:00000000000042B6                 sub     rdi, rdx
.text:00000000000042B9                 cmp     cs:head_truncation, 0
.text:00000000000042C0                 jz      short loc_42C9
.text:00000000000042C2                 mov     rax, cs:truncation_string_length
.text:00000000000042C9
.text:00000000000042C9 loc_42C9:                               ; CODE XREF: main+2130↑j
.text:00000000000042C9                 sub     rdi, rax
.text:00000000000042CC                 call    print_spaces
.text:00000000000042D1                 cmp     cs:head_truncation, 0
.text:00000000000042D8                 jnz     loc_47C4
.text:00000000000042DE
.text:00000000000042DE loc_42DE:                               ; CODE XREF: main+2647↓j
.text:00000000000042DE                 mov     rdi, [r13+0]
.text:00000000000042E2                 mov     rsi, cs:qword_221148
.text:00000000000042E9                 call    print_field
.text:00000000000042EE                 jmp     loc_418C
.text:00000000000042F3 ; ---------------------------------------------------------------------------
.text:00000000000042F3
.text:00000000000042F3 loc_42F3:                               ; CODE XREF: main+1EE5↑j
.text:00000000000042F3                 mov     rsi, cs:qword_2211A8
.text:00000000000042FA                 call    print_field
.text:00000000000042FF                 cmp     cs:tail_truncation, 0
.text:0000000000004306                 jnz     loc_4778
.text:000000000000430C
.text:000000000000430C loc_430C:                               ; CODE XREF: main+25FB↓j
.text:000000000000430C                 mov     rdi, cs:half_line_width
.text:0000000000004313                 mov     rax, cs:qword_221188
.text:000000000000431A                 sub     rdi, cs:gap_size
.text:0000000000004321                 sub     rax, cs:before
.text:0000000000004328                 sub     rdi, rax
.text:000000000000432B                 xor     eax, eax
.text:000000000000432D                 cmp     cs:before_truncation, 0
.text:0000000000004334                 jz      short loc_433D
.text:0000000000004336                 mov     rax, cs:truncation_string_length
.text:000000000000433D
.text:000000000000433D loc_433D:                               ; CODE XREF: main+21A4↑j
.text:000000000000433D                 sub     rdi, rax
.text:0000000000004340                 mov     rax, cs:qword_2211A8
.text:0000000000004347                 sub     rax, cs:tail
.text:000000000000434E                 sub     rdi, rax
.text:0000000000004351                 xor     eax, eax
.text:0000000000004353                 cmp     cs:tail_truncation, 0
.text:000000000000435A                 jz      loc_40AC
.text:0000000000004360                 jmp     loc_40A5
.text:0000000000004365 ; ---------------------------------------------------------------------------
.text:0000000000004365
.text:0000000000004365 loc_4365:                               ; CODE XREF: main+2048↑j
.text:0000000000004365                 add     rbx, 1
.text:0000000000004369                 jmp     loc_34CF
.text:000000000000436E ; ---------------------------------------------------------------------------
.text:000000000000436E
.text:000000000000436E loc_436E:                               ; CODE XREF: main+1951↑j
.text:000000000000436E                 movzx   eax, byte ptr [rbx]
.text:0000000000004371                 lea     rsi, _word_fastmap
.text:0000000000004378                 cmp     byte ptr [rsi+rax], 0
.text:000000000000437C                 jnz     short loc_4387
.text:000000000000437E                 add     rbx, 1
.text:0000000000004382                 jmp     loc_3B15
.text:0000000000004387 ; ---------------------------------------------------------------------------
.text:0000000000004387
.text:0000000000004387 loc_4387:                               ; CODE XREF: main+21EC↑j
.text:0000000000004387                                         ; main+2218↓j
.text:0000000000004387                 cmp     rbp, rbx
.text:000000000000438A                 jbe     loc_3B15
.text:0000000000004390                 movzx   eax, byte ptr [rbx]
.text:0000000000004393                 lea     rsi, _word_fastmap
.text:000000000000439A                 cmp     byte ptr [rsi+rax], 0
.text:000000000000439E                 jz      loc_3B15
.text:00000000000043A4                 add     rbx, 1
.text:00000000000043A8                 jmp     short loc_4387
.text:00000000000043AA ; ---------------------------------------------------------------------------
.text:00000000000043AA
.text:00000000000043AA loc_43AA:                               ; CODE XREF: main+1553↑j
.text:00000000000043AA                                         ; main+15FD↑j
.text:00000000000043AA                 mov     r10, r15
.text:00000000000043AD                 mov     r9, r14
.text:00000000000043B0                 mov     rdx, cs:qword_221168
.text:00000000000043B7                 jmp     loc_37C3
.text:00000000000043BC ; ---------------------------------------------------------------------------
.text:00000000000043BC
.text:00000000000043BC loc_43BC:                               ; CODE XREF: main+B73↑j
.text:00000000000043BC                 mov     cs:byte_221202, 1
.text:00000000000043C3                 jmp     loc_2D49
.text:00000000000043C8 ; ---------------------------------------------------------------------------
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: main+B0C↑j
.text:00000000000043C8                 add     rax, 1
.text:00000000000043CC                 jmp     loc_2CB5
.text:00000000000043D1 ; ---------------------------------------------------------------------------
.text:00000000000043D1
.text:00000000000043D1 loc_43D1:                               ; CODE XREF: main+AD3↑j
.text:00000000000043D1                                         ; main+ADC↑j
.text:00000000000043D1                 mov     cs:truncation_string, 0
.text:00000000000043DC                 jmp     loc_2C8B
.text:00000000000043E1 ; ---------------------------------------------------------------------------
.text:00000000000043E1
.text:00000000000043E1 loc_43E1:                               ; CODE XREF: main+1417↑j
.text:00000000000043E1                 mov     rax, rsi
.text:00000000000043E4                 jmp     loc_35D2
.text:00000000000043E9 ; ---------------------------------------------------------------------------
.text:00000000000043E9
.text:00000000000043E9 loc_43E9:                               ; CODE XREF: main+382↑j
.text:00000000000043E9                 mov     edi, 8
.text:00000000000043EE                 mov     cs:number_input_files, 1
.text:00000000000043F8                 call    xmalloc
.text:00000000000043FD                 mov     edi, 8
.text:0000000000004402                 mov     cs:input_file_name, rax
.text:0000000000004409                 call    xmalloc
.text:000000000000440E                 mov     edi, 10h
.text:0000000000004413                 mov     cs:file_line_count, rax
.text:000000000000441A                 call    xmalloc
.text:000000000000441F                 mov     cs:text_buffers, rax
.text:0000000000004426                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000442D                 mov     r13, [rbp+rax*8+0]
.text:0000000000004432                 mov     r12, rax
.text:0000000000004435                 lea     r14, ds:0[rax*8]
.text:000000000000443D                 cmp     byte ptr [r13+0], 0
.text:0000000000004442                 jz      loc_44F2
.text:0000000000004448                 lea     rsi, aLt+2      ; s2
.text:000000000000444F                 mov     rdi, r13        ; s1
.text:0000000000004452                 call    _strcmp
.text:0000000000004457                 test    eax, eax
.text:0000000000004459                 mov     rdx, cs:input_file_name
.text:0000000000004460                 jz      loc_44F9
.text:0000000000004466                 mov     [rdx], r13
.text:0000000000004469
.text:0000000000004469 loc_4469:                               ; CODE XREF: main+2370↓j
.text:0000000000004469                 add     r12d, 1
.text:000000000000446D                 cmp     r12d, ebx
.text:0000000000004470                 mov     cs:optind@@GLIBC_2_2_5, r12d
.text:0000000000004477                 jge     loc_26A6
.text:000000000000447D                 mov     rdi, [rbp+r14+8]
.text:0000000000004482                 mov     rdx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004489                 lea     rsi, aW         ; "w"
.text:0000000000004490                 call    freopen_safer
.text:0000000000004495                 test    rax, rax
.text:0000000000004498                 jz      loc_45BD
.text:000000000000449E                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000044A4                 add     eax, 1
.text:00000000000044A7                 cmp     eax, ebx
.text:00000000000044A9                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:00000000000044AF                 jge     loc_26A6
.text:00000000000044B5                 cdqe
.text:00000000000044B7                 mov     rdi, [rbp+rax*8+0]
.text:00000000000044BC                 call    quote
.text:00000000000044C1                 lea     rsi, msgid      ; "extra operand %s"
.text:00000000000044C8                 mov     rbx, rax
.text:00000000000044CB                 mov     edx, 5          ; category
.text:00000000000044D0                 xor     edi, edi        ; domainname
.text:00000000000044D2                 call    _dcgettext
.text:00000000000044D7                 mov     rcx, rbx
.text:00000000000044DA                 mov     rdx, rax        ; format
.text:00000000000044DD                 xor     esi, esi        ; errnum
.text:00000000000044DF                 xor     edi, edi        ; status
.text:00000000000044E1                 xor     eax, eax
.text:00000000000044E3                 call    _error
.text:00000000000044E8
.text:00000000000044E8 loc_44E8:                               ; CODE XREF: main+1A6↑j
.text:00000000000044E8                                         ; main+1E7↑j ...
.text:00000000000044E8                 mov     edi, 1          ; status
.text:00000000000044ED                 call    usage
.text:00000000000044F2 ; ---------------------------------------------------------------------------
.text:00000000000044F2
.text:00000000000044F2 loc_44F2:                               ; CODE XREF: main+22B2↑j
.text:00000000000044F2                 mov     rdx, cs:input_file_name
.text:00000000000044F9
.text:00000000000044F9 loc_44F9:                               ; CODE XREF: main+22D0↑j
.text:00000000000044F9                 mov     qword ptr [rdx], 0
.text:0000000000004500                 jmp     loc_4469
.text:0000000000004505 ; ---------------------------------------------------------------------------
.text:0000000000004505
.text:0000000000004505 loc_4505:                               ; CODE XREF: main+575↑j
.text:0000000000004505                 cmp     cs:gnu_extensions, 0
.text:000000000000450C                 jz      short loc_452F
.text:000000000000450E                 cmp     cs:input_reference, 0
.text:0000000000004515                 jnz     short loc_452F
.text:0000000000004517                 lea     rax, asc_1B688  ; "[.?!][]\"')}]*\\($\\|\t\\|  \\)[ \t\n]*"
.text:000000000000451E                 mov     cs:context_regex, rax
.text:0000000000004525                 jmp     loc_2714
.text:000000000000452A ; ---------------------------------------------------------------------------
.text:000000000000452A
.text:000000000000452A loc_452A:                               ; CODE XREF: main+7B0↑j
.text:000000000000452A                                         ; main+83E↑j ...
.text:000000000000452A                 call    matcher_error
.text:000000000000452F
.text:000000000000452F loc_452F:                               ; CODE XREF: main+237C↑j
.text:000000000000452F                                         ; main+2385↑j
.text:000000000000452F                 lea     rax, aWrittenBySSAnd+1Ah ; "\n"
.text:0000000000004536                 mov     cs:context_regex, rax
.text:000000000000453D                 jmp     loc_2714
.text:0000000000004542 ; ---------------------------------------------------------------------------
.text:0000000000004542
.text:0000000000004542 loc_4542:                               ; CODE XREF: main+422↑j
.text:0000000000004542                 mov     esi, 1
.text:0000000000004547                 jmp     loc_25B8
.text:000000000000454C ; ---------------------------------------------------------------------------
.text:000000000000454C
.text:000000000000454C loc_454C:                               ; CODE XREF: main+3E2↑j
.text:000000000000454C                 mov     esi, 1
.text:0000000000004551                 jmp     loc_2578
.text:0000000000004556 ; ---------------------------------------------------------------------------
.text:0000000000004556
.text:0000000000004556 loc_4556:                               ; CODE XREF: main+11C7↑j
.text:0000000000004556                 lea     rdx, _word_fastmap
.text:000000000000455D                 mov     ecx, 20h ; ' '
.text:0000000000004562                 mov     rax, 101010101010101h
.text:000000000000456C                 mov     rdi, rdx
.text:000000000000456F                 rep stosq
.text:0000000000004572                 mov     cs:byte_2213A0, 0
.text:0000000000004579                 mov     cs:word_221389, 0
.text:0000000000004582                 jmp     loc_27A4
.text:0000000000004587 ; ---------------------------------------------------------------------------
.text:0000000000004587
.text:0000000000004587 loc_4587:                               ; CODE XREF: main+7A6↑j
.text:0000000000004587                 mov     rdi, cs:context_regex
.text:000000000000458E                 call    quote
.text:0000000000004593                 lea     rsi, aErrorRegularEx ; "error: regular expression has a match o"...
.text:000000000000459A                 mov     rbx, rax
.text:000000000000459D                 mov     edx, 5          ; category
.text:00000000000045A2                 xor     edi, edi        ; domainname
.text:00000000000045A4                 call    _dcgettext
.text:00000000000045A9                 mov     rcx, rbx
.text:00000000000045AC                 mov     rdx, rax        ; format
.text:00000000000045AF                 xor     esi, esi        ; errnum
.text:00000000000045B1                 mov     edi, 1          ; status
.text:00000000000045B6                 xor     eax, eax
.text:00000000000045B8                 call    _error
.text:00000000000045BD
.text:00000000000045BD loc_45BD:                               ; CODE XREF: main+2308↑j
.text:00000000000045BD                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000045C4                 mov     esi, 3
.text:00000000000045C9                 xor     edi, edi
.text:00000000000045CB                 mov     rdx, [rbp+rax*8+0]
.text:00000000000045D0                 call    quotearg_n_style_colon
.text:00000000000045D5                 mov     rbx, rax
.text:00000000000045D8                 call    ___errno_location
.text:00000000000045DD                 mov     esi, [rax]      ; errnum
.text:00000000000045DF                 lea     rdx, aS_2+2     ; format
.text:00000000000045E6                 mov     rcx, rbx
.text:00000000000045E9                 mov     edi, 1          ; status
.text:00000000000045EE                 xor     eax, eax
.text:00000000000045F0                 call    _error
.text:00000000000045F5
.text:00000000000045F5 loc_45F5:                               ; CODE XREF: main+14C↑j
.text:00000000000045F5                 xor     edi, edi        ; status
.text:00000000000045F7                 call    usage
.text:00000000000045FC ; ---------------------------------------------------------------------------
.text:00000000000045FC
.text:00000000000045FC loc_45FC:                               ; CODE XREF: main+3A2↑j
.text:00000000000045FC                 mov     esi, 1
.text:0000000000004601                 jmp     loc_2538
.text:0000000000004606 ; ---------------------------------------------------------------------------
.text:0000000000004606
.text:0000000000004606 loc_4606:                               ; CODE XREF: main+2FE↑j
.text:0000000000004606                                         ; main+30C↑j
.text:0000000000004606                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000460D                 call    quote
.text:0000000000004612                 lea     rsi, aInvalidGapWidt ; "invalid gap width: %s"
.text:0000000000004619                 mov     rbx, rax
.text:000000000000461C                 mov     edx, 5          ; category
.text:0000000000004621                 xor     edi, edi        ; domainname
.text:0000000000004623                 call    _dcgettext
.text:0000000000004628                 mov     rcx, rbx
.text:000000000000462B                 mov     rdx, rax        ; format
.text:000000000000462E                 xor     esi, esi        ; errnum
.text:0000000000004630                 mov     edi, 1          ; status
.text:0000000000004635                 xor     eax, eax
.text:0000000000004637                 call    _error
.text:000000000000463C
.text:000000000000463C loc_463C:                               ; CODE XREF: main+1C4↑j
.text:000000000000463C                                         ; main+1D2↑j
.text:000000000000463C                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000004643                 call    quote
.text:0000000000004648                 lea     rsi, aInvalidLineWid ; "invalid line width: %s"
.text:000000000000464F                 mov     rbx, rax
.text:0000000000004652                 mov     edx, 5          ; category
.text:0000000000004657                 xor     edi, edi        ; domainname
.text:0000000000004659                 call    _dcgettext
.text:000000000000465E                 mov     rcx, rbx
.text:0000000000004661                 mov     rdx, rax        ; format
.text:0000000000004664                 xor     esi, esi        ; errnum
.text:0000000000004666                 mov     edi, (offset dword_0+1) ; _IO_FILE *
.text:000000000000466B                 xor     eax, eax
.text:000000000000466D                 call    _error
.text:0000000000004672
.text:0000000000004672 loc_4672:                               ; CODE XREF: main+18C1↑j
.text:0000000000004672                 mov     esi, 7Bh ; '{'  ; int
.text:0000000000004677                 call    ___overflow
.text:000000000000467C                 jmp     loc_3A62
.text:0000000000004681 ; ---------------------------------------------------------------------------
.text:0000000000004681
.text:0000000000004681 loc_4681:                               ; CODE XREF: main+1A29↑j
.text:0000000000004681                 mov     esi, 7Bh ; '{'  ; int
.text:0000000000004686                 call    ___overflow
.text:000000000000468B                 jmp     loc_3BCA
.text:0000000000004690 ; ---------------------------------------------------------------------------
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: main+1A5C↑j
.text:0000000000004690                 mov     esi, 7Dh ; '}'  ; int
.text:0000000000004695                 call    ___overflow
.text:000000000000469A                 jmp     loc_3BFD
.text:000000000000469F ; ---------------------------------------------------------------------------
.text:000000000000469F
.text:000000000000469F loc_469F:                               ; CODE XREF: main+1E50↑j
.text:000000000000469F                 mov     esi, 22h ; '"'  ; int
.text:00000000000046A4                 call    ___overflow
.text:00000000000046A9                 jmp     loc_3BFD
.text:00000000000046AE ; ---------------------------------------------------------------------------
.text:00000000000046AE
.text:00000000000046AE loc_46AE:                               ; CODE XREF: main+1DEA↑j
.text:00000000000046AE                 mov     esi, 22h ; '"'  ; int
.text:00000000000046B3                 call    ___overflow
.text:00000000000046B8                 jmp     loc_3F8B
.text:00000000000046BD ; ---------------------------------------------------------------------------
.text:00000000000046BD
.text:00000000000046BD loc_46BD:                               ; CODE XREF: main+1D7E↑j
.text:00000000000046BD                 mov     esi, 22h ; '"'  ; int
.text:00000000000046C2                 call    ___overflow
.text:00000000000046C7                 jmp     loc_3F1F
.text:00000000000046CC ; ---------------------------------------------------------------------------
.text:00000000000046CC
.text:00000000000046CC loc_46CC:                               ; CODE XREF: main+19F7↑j
.text:00000000000046CC                 mov     esi, 7Dh ; '}'  ; int
.text:00000000000046D1                 call    ___overflow
.text:00000000000046D6                 jmp     loc_3B98
.text:00000000000046DB ; ---------------------------------------------------------------------------
.text:00000000000046DB
.text:00000000000046DB loc_46DB:                               ; CODE XREF: main+197C↑j
.text:00000000000046DB                 mov     eax, 1
.text:00000000000046E0                 jmp     loc_3B12
.text:00000000000046E5 ; ---------------------------------------------------------------------------
.text:00000000000046E5
.text:00000000000046E5 loc_46E5:                               ; CODE XREF: main+1D0F↑j
.text:00000000000046E5                 mov     esi, 22h ; '"'  ; int
.text:00000000000046EA                 call    ___overflow
.text:00000000000046EF                 jmp     loc_3EB0
.text:00000000000046F4 ; ---------------------------------------------------------------------------
.text:00000000000046F4
.text:00000000000046F4 loc_46F4:                               ; CODE XREF: main+1CA3↑j
.text:00000000000046F4                 mov     esi, 22h ; '"'  ; int
.text:00000000000046F9                 call    ___overflow
.text:00000000000046FE                 jmp     loc_3E44
.text:0000000000004703 ; ---------------------------------------------------------------------------
.text:0000000000004703
.text:0000000000004703 loc_4703:                               ; CODE XREF: main+138D↑j
.text:0000000000004703                 mov     cs:qword_221188, rax
.text:000000000000470A                 jmp     loc_3523
.text:000000000000470F ; ---------------------------------------------------------------------------
.text:000000000000470F
.text:000000000000470F loc_470F:                               ; CODE XREF: main+169C↑j
.text:000000000000470F                                         ; main+16B0↑j
.text:000000000000470F                 mov     cs:qword_2211A8, rax
.text:0000000000004716                 jmp     loc_3846
.text:000000000000471B ; ---------------------------------------------------------------------------
.text:000000000000471B
.text:000000000000471B loc_471B:                               ; CODE XREF: main+15DB↑j
.text:000000000000471B                 mov     [r15], rsi
.text:000000000000471E                 lea     rax, [rsi+rcx]
.text:0000000000004722                 jmp     loc_3538
.text:0000000000004727 ; ---------------------------------------------------------------------------
.text:0000000000004727
.text:0000000000004727 loc_4727:                               ; CODE XREF: main+1704↑j
.text:0000000000004727                 mov     cs:qword_221148, r13
.text:000000000000472E                 jmp     loc_38AD
.text:0000000000004733 ; ---------------------------------------------------------------------------
.text:0000000000004733
.text:0000000000004733 loc_4733:                               ; CODE XREF: main+17DC↑j
.text:0000000000004733                                         ; main+17EE↑j
.text:0000000000004733                 mov     cs:head, rbx
.text:000000000000473A                 jmp     loc_3984
.text:000000000000473F ; ---------------------------------------------------------------------------
.text:000000000000473F
.text:000000000000473F loc_473F:                               ; CODE XREF: main+1ABC↑j
.text:000000000000473F                 call    ___stack_chk_fail
.text:0000000000004744 ; ---------------------------------------------------------------------------
.text:0000000000004744
.text:0000000000004744 loc_4744:                               ; CODE XREF: main+B1F↑j
.text:0000000000004744                 mov     cs:before_max_width, 0
.text:000000000000474F                 jmp     loc_2CB5
.text:0000000000004754 ; ---------------------------------------------------------------------------
.text:0000000000004754
.text:0000000000004754 loc_4754:                               ; CODE XREF: main+1B96↑j
.text:0000000000004754                 mov     cs:qword_221128, rbp
.text:000000000000475B                 jmp     loc_3A0A
.text:0000000000004760 ; ---------------------------------------------------------------------------
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: main+1717↑j
.text:0000000000004760                 mov     cs:qword_221148, rax
.text:0000000000004767                 jmp     loc_38AD
.text:000000000000476C ; ---------------------------------------------------------------------------
.text:000000000000476C
.text:000000000000476C loc_476C:                               ; CODE XREF: main+147E↑j
.text:000000000000476C                 mov     cs:before, rsi
.text:0000000000004773                 jmp     loc_3614
.text:0000000000004778 ; ---------------------------------------------------------------------------
.text:0000000000004778
.text:0000000000004778 loc_4778:                               ; CODE XREF: main+2176↑j
.text:0000000000004778                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000477F                 mov     rdi, cs:truncation_string ; s
.text:0000000000004786                 call    _fputs_unlocked
.text:000000000000478B                 jmp     loc_430C
.text:0000000000004790 ; ---------------------------------------------------------------------------
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: main+1F9A↑j
.text:0000000000004790                 lea     rsi, keyafter
.text:0000000000004797                 mov     rax, cs:qword_221168
.text:000000000000479E                 sub     rax, [rsi]
.text:00000000000047A1                 mov     rsi, cs:half_line_width
.text:00000000000047A8                 sub     rsi, rax
.text:00000000000047AB                 mov     rax, rsi
.text:00000000000047AE                 xor     esi, esi
.text:00000000000047B0                 jmp     loc_42AB
.text:00000000000047B5 ; ---------------------------------------------------------------------------
.text:00000000000047B5
.text:00000000000047B5 loc_47B5:                               ; CODE XREF: main+1E9E↑j
.text:00000000000047B5                 mov     esi, 3Ah ; ':'  ; int
.text:00000000000047BA                 call    ___overflow
.text:00000000000047BF                 jmp     loc_403F
.text:00000000000047C4 ; ---------------------------------------------------------------------------
.text:00000000000047C4
.text:00000000000047C4 loc_47C4:                               ; CODE XREF: main+2148↑j
.text:00000000000047C4                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000047CB                 mov     rdi, cs:truncation_string ; s
.text:00000000000047D2                 call    _fputs_unlocked
.text:00000000000047D7                 jmp     loc_42DE
.text:00000000000047DC ; ---------------------------------------------------------------------------
.text:00000000000047DC
.text:00000000000047DC loc_47DC:                               ; CODE XREF: main+1FC1↑j
.text:00000000000047DC                                         ; main+2003↑j
.text:00000000000047DC                 cmp     cs:input_reference, 0
.text:00000000000047E3                 jnz     loc_4199
.text:00000000000047E9                 jmp     loc_3BFD
.text:00000000000047EE ; ---------------------------------------------------------------------------
.text:00000000000047EE
.text:00000000000047EE loc_47EE:                               ; CODE XREF: main+137A↑j
.text:00000000000047EE                 mov     cs:qword_221188, rbx
.text:00000000000047F5                 jmp     loc_3523
.text:00000000000047FA ; ---------------------------------------------------------------------------
.text:00000000000047FA
.text:00000000000047FA loc_47FA:                               ; CODE XREF: main+12DC↑j
.text:00000000000047FA                 mov     cs:qword_221168, rax
.text:0000000000004801                 jmp     loc_3472
.text:0000000000004806 ; ---------------------------------------------------------------------------
.text:0000000000004806
.text:0000000000004806 loc_4806:                               ; CODE XREF: main+1A7C↑j
.text:0000000000004806                 mov     esi, 0Ah        ; int
.text:000000000000480B                 call    ___overflow
.text:0000000000004810                 jmp     loc_3C1D
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: main+12C7↑j
.text:0000000000004815                 mov     cs:qword_221168, rsi
.text:000000000000481C                 jmp     loc_3472
.text:0000000000004821 ; ---------------------------------------------------------------------------
.text:0000000000004821
.text:0000000000004821 loc_4821:                               ; CODE XREF: main+1041↑j
.text:0000000000004821                 mov     esi, 1
.text:0000000000004826                 jmp     loc_31D7
.text:000000000000482B ; ---------------------------------------------------------------------------
.text:000000000000482B
.text:000000000000482B loc_482B:                               ; CODE XREF: main+EFE↑j
.text:000000000000482B                 mov     cs:total_line_count, r9
.text:0000000000004832                 mov     r10, r9
.text:0000000000004835                 jmp     loc_3094
.text:0000000000004835 ; } // starts at 2190
.text:0000000000004835 main            endp
.text:0000000000004835
.text:0000000000004835 ; ---------------------------------------------------------------------------
.text:000000000000483A                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000004840
.text:0000000000004840 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000004840                 public start
.text:0000000000004840 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 xor     ebp, ebp
.text:0000000000004842                 mov     r9, rdx         ; rtld_fini
.text:0000000000004845                 pop     rsi             ; argc
.text:0000000000004846                 mov     rdx, rsp        ; ubp_av
.text:0000000000004849                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000484D                 push    rax
.text:000000000000484E                 push    rsp             ; stack_end
.text:000000000000484F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000004856                 lea     rcx, __libc_csu_init ; init
.text:000000000000485D                 lea     rdi, main       ; main
.text:0000000000004864                 call    cs:__libc_start_main_ptr
.text:000000000000486A                 hlt
.text:000000000000486A ; } // starts at 4840
.text:000000000000486A start           endp
.text:000000000000486A
.text:000000000000486A ; ---------------------------------------------------------------------------
.text:000000000000486B                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870 ; Attributes: bp-based frame info_from_lumina
.text:0000000000004870
.text:0000000000004870 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_4923↓p
.text:0000000000004870                 lea     rdi, __bss_start
.text:0000000000004877                 push    rbp
.text:0000000000004878                 lea     rax, __bss_start
.text:000000000000487F                 cmp     rax, rdi
.text:0000000000004882                 mov     rbp, rsp
.text:0000000000004885                 jz      short loc_48A0
.text:0000000000004887                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000488E                 test    rax, rax
.text:0000000000004891                 jz      short loc_48A0
.text:0000000000004893                 pop     rbp
.text:0000000000004894                 jmp     rax
.text:0000000000004894 ; ---------------------------------------------------------------------------
.text:0000000000004896                 align 20h
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000048A0                                         ; deregister_tm_clones+21↑j
.text:00000000000048A0                 pop     rbp
.text:00000000000048A1                 retn
.text:00000000000048A1 deregister_tm_clones endp
.text:00000000000048A1
.text:00000000000048A1 ; ---------------------------------------------------------------------------
.text:00000000000048A2                 align 10h
.text:00000000000048B0
.text:00000000000048B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048B0
.text:00000000000048B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000048B0
.text:00000000000048B0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000048B0                 lea     rdi, __bss_start
.text:00000000000048B7                 lea     rsi, __bss_start
.text:00000000000048BE                 push    rbp
.text:00000000000048BF                 sub     rsi, rdi
.text:00000000000048C2                 mov     rbp, rsp
.text:00000000000048C5                 sar     rsi, 3
.text:00000000000048C9                 mov     rax, rsi
.text:00000000000048CC                 shr     rax, 3Fh
.text:00000000000048D0                 add     rsi, rax
.text:00000000000048D3                 sar     rsi, 1
.text:00000000000048D6                 jz      short loc_48F0
.text:00000000000048D8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000048DF                 test    rax, rax
.text:00000000000048E2                 jz      short loc_48F0
.text:00000000000048E4                 pop     rbp
.text:00000000000048E5                 jmp     rax
.text:00000000000048E5 ; ---------------------------------------------------------------------------
.text:00000000000048E7                 align 10h
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000048F0                                         ; register_tm_clones+32↑j
.text:00000000000048F0                 pop     rbp
.text:00000000000048F1                 retn
.text:00000000000048F1 register_tm_clones endp
.text:00000000000048F1
.text:00000000000048F1 ; ---------------------------------------------------------------------------
.text:00000000000048F2                 align 20h
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900 ; Attributes: info_from_lumina
.text:0000000000004900
.text:0000000000004900 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000004900                 cmp     cs:completed_7697, 0
.text:0000000000004907                 jnz     short locret_4938
.text:0000000000004909                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000004911                 push    rbp
.text:0000000000004912                 mov     rbp, rsp
.text:0000000000004915                 jz      short loc_4923
.text:0000000000004917                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000491E                 call    __cxa_finalize
.text:0000000000004923
.text:0000000000004923 loc_4923:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000004923                 call    deregister_tm_clones
.text:0000000000004928                 mov     cs:completed_7697, 1
.text:000000000000492F                 pop     rbp
.text:0000000000004930                 retn
.text:0000000000004930 ; ---------------------------------------------------------------------------
.text:0000000000004931                 align 8
.text:0000000000004938
.text:0000000000004938 locret_4938:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000004938                 rep retn
.text:0000000000004938 __do_global_dtors_aux endp
.text:0000000000004938
.text:0000000000004938 ; ---------------------------------------------------------------------------
.text:000000000000493A                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940 ; Attributes: bp-based frame
.text:0000000000004940
.text:0000000000004940 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000004940                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000004940                 push    rbp
.text:0000000000004941                 mov     rbp, rsp
.text:0000000000004944                 pop     rbp
.text:0000000000004945                 jmp     register_tm_clones
.text:0000000000004945 frame_dummy     endp
.text:0000000000004945
.text:0000000000004945 ; ---------------------------------------------------------------------------
.text:000000000000494A                 align 10h
.text:0000000000004950
.text:0000000000004950 ; =============== S U B R O U T I N E =======================================
.text:0000000000004950
.text:0000000000004950
.text:0000000000004950 ; int compare_words(const void *, const void *)
.text:0000000000004950 compare_words   proc near               ; CODE XREF: compare_occurs+8↓p
.text:0000000000004950                                         ; search_table_isra_1+49↓p
.text:0000000000004950                                         ; DATA XREF: ...
.text:0000000000004950 ; __unwind {
.text:0000000000004950                 mov     r10, [rsi+8]
.text:0000000000004954                 mov     r9, [rdi+8]
.text:0000000000004958                 cmp     r10, r9
.text:000000000000495B                 mov     r8, r9
.text:000000000000495E                 cmovle  r8, r10
.text:0000000000004962                 cmp     cs:ignore_case, 0
.text:0000000000004969                 jnz     short loc_49B0
.text:000000000000496B                 test    r8, r8
.text:000000000000496E                 jle     short loc_499D
.text:0000000000004970                 mov     rdi, [rdi]
.text:0000000000004973                 mov     rsi, [rsi]
.text:0000000000004976                 movzx   eax, byte ptr [rdi]
.text:0000000000004979                 movzx   edx, byte ptr [rsi]
.text:000000000000497C                 sub     eax, edx
.text:000000000000497E                 jnz     short locret_49AE
.text:0000000000004980                 xor     edx, edx
.text:0000000000004982                 jmp     short loc_4994
.text:0000000000004982 ; ---------------------------------------------------------------------------
.text:0000000000004984                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: compare_words+4B↓j
.text:0000000000004988                 movzx   eax, byte ptr [rdi+rdx]
.text:000000000000498C                 movzx   ecx, byte ptr [rsi+rdx]
.text:0000000000004990                 sub     eax, ecx
.text:0000000000004992                 jnz     short locret_49AE
.text:0000000000004994
.text:0000000000004994 loc_4994:                               ; CODE XREF: compare_words+32↑j
.text:0000000000004994                 add     rdx, 1
.text:0000000000004998                 cmp     r8, rdx
.text:000000000000499B                 jnz     short loc_4988
.text:000000000000499D
.text:000000000000499D loc_499D:                               ; CODE XREF: compare_words+1E↑j
.text:000000000000499D                                         ; compare_words+63↓j ...
.text:000000000000499D                 cmp     r10, r9
.text:00000000000049A0                 jg      short loc_49A9
.text:00000000000049A2                 setl    al
.text:00000000000049A5                 movzx   eax, al
.text:00000000000049A8                 retn
.text:00000000000049A9 ; ---------------------------------------------------------------------------
.text:00000000000049A9
.text:00000000000049A9 loc_49A9:                               ; CODE XREF: compare_words+50↑j
.text:00000000000049A9                 mov     eax, 0FFFFFFFFh
.text:00000000000049AE
.text:00000000000049AE locret_49AE:                            ; CODE XREF: compare_words+2E↑j
.text:00000000000049AE                                         ; compare_words+42↑j ...
.text:00000000000049AE                 rep retn
.text:00000000000049B0 ; ---------------------------------------------------------------------------
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: compare_words+19↑j
.text:00000000000049B0                 test    r8, r8
.text:00000000000049B3                 jle     short loc_499D
.text:00000000000049B5                 mov     r11, [rsi]
.text:00000000000049B8                 mov     rdi, [rdi]
.text:00000000000049BB                 lea     rsi, folded_chars
.text:00000000000049C2                 movzx   eax, byte ptr [rdi]
.text:00000000000049C5                 movzx   edx, byte ptr [r11]
.text:00000000000049C9                 movzx   eax, byte ptr [rsi+rax]
.text:00000000000049CD                 movzx   edx, byte ptr [rsi+rdx]
.text:00000000000049D1                 sub     eax, edx
.text:00000000000049D3                 jnz     short locret_49AE
.text:00000000000049D5                 xor     edx, edx
.text:00000000000049D7                 jmp     short loc_49F5
.text:00000000000049D7 ; ---------------------------------------------------------------------------
.text:00000000000049D9                 align 20h
.text:00000000000049E0
.text:00000000000049E0 loc_49E0:                               ; CODE XREF: compare_words+AC↓j
.text:00000000000049E0                 movzx   eax, byte ptr [rdi+rdx]
.text:00000000000049E4                 movzx   ecx, byte ptr [r11+rdx]
.text:00000000000049E9                 movzx   eax, byte ptr [rsi+rax]
.text:00000000000049ED                 movzx   ecx, byte ptr [rsi+rcx]
.text:00000000000049F1                 sub     eax, ecx
.text:00000000000049F3                 jnz     short locret_49AE
.text:00000000000049F5
.text:00000000000049F5 loc_49F5:                               ; CODE XREF: compare_words+87↑j
.text:00000000000049F5                 add     rdx, 1
.text:00000000000049F9                 cmp     r8, rdx
.text:00000000000049FC                 jnz     short loc_49E0
.text:00000000000049FE                 jmp     short loc_499D
.text:00000000000049FE ; } // starts at 4950
.text:00000000000049FE compare_words   endp
.text:00000000000049FE
.text:0000000000004A00
.text:0000000000004A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A00
.text:0000000000004A00
.text:0000000000004A00 matcher_error   proc near               ; CODE XREF: main:loc_452A↑p
.text:0000000000004A00 ; __unwind {
.text:0000000000004A00                 push    rbx
.text:0000000000004A01                 lea     rsi, aErrorInRegular ; "error in regular expression matcher"
.text:0000000000004A08                 mov     edx, 5          ; category
.text:0000000000004A0D                 xor     edi, edi        ; domainname
.text:0000000000004A0F                 call    _dcgettext
.text:0000000000004A14                 mov     rbx, rax
.text:0000000000004A17                 call    ___errno_location
.text:0000000000004A1C                 mov     esi, [rax]      ; errnum
.text:0000000000004A1E                 mov     rdx, rbx        ; format
.text:0000000000004A21                 mov     edi, 1          ; status
.text:0000000000004A26                 xor     eax, eax
.text:0000000000004A28                 call    _error
.text:0000000000004A28 ; } // starts at 4A00
.text:0000000000004A2D                 nop     dword ptr [rax]
.text:0000000000004A2D matcher_error   endp ; sp-analysis failed
.text:0000000000004A2D
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30
.text:0000000000004A30 copy_unescaped_string proc near         ; CODE XREF: main+2C1↑p
.text:0000000000004A30                                         ; main+331↑p ...
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 push    r12
.text:0000000000004A32                 push    rbp
.text:0000000000004A33                 push    rbx
.text:0000000000004A34                 mov     rbx, rdi
.text:0000000000004A37                 call    _strlen
.text:0000000000004A3C                 lea     rdi, [rax+1]
.text:0000000000004A40                 call    xmalloc
.text:0000000000004A45                 mov     r12, rax
.text:0000000000004A48                 movzx   eax, byte ptr [rbx]
.text:0000000000004A4B                 mov     rbp, r12
.text:0000000000004A4E
.text:0000000000004A4E loc_4A4E:                               ; CODE XREF: copy_unescaped_string+106↓j
.text:0000000000004A4E                                         ; copy_unescaped_string+12E↓j ...
.text:0000000000004A4E                 test    al, al
.text:0000000000004A50                 jz      short loc_4A6E
.text:0000000000004A52
.text:0000000000004A52 loc_4A52:                               ; CODE XREF: copy_unescaped_string+3C↓j
.text:0000000000004A52                 cmp     al, 5Ch ; '\'
.text:0000000000004A54                 movzx   edx, byte ptr [rbx+1]
.text:0000000000004A58                 lea     rcx, [rbx+1]
.text:0000000000004A5C                 jz      short loc_4A80
.text:0000000000004A5E                 mov     [rbp+0], al
.text:0000000000004A61                 mov     eax, edx
.text:0000000000004A63                 add     rbp, 1
.text:0000000000004A67                 test    al, al
.text:0000000000004A69                 mov     rbx, rcx
.text:0000000000004A6C                 jnz     short loc_4A52
.text:0000000000004A6E
.text:0000000000004A6E loc_4A6E:                               ; CODE XREF: copy_unescaped_string+20↑j
.text:0000000000004A6E                                         ; copy_unescaped_string+87↓j ...
.text:0000000000004A6E                 mov     byte ptr [rbp+0], 0
.text:0000000000004A72                 mov     rax, r12
.text:0000000000004A75                 pop     rbx
.text:0000000000004A76                 pop     rbp
.text:0000000000004A77                 pop     r12
.text:0000000000004A79                 retn
.text:0000000000004A79 ; ---------------------------------------------------------------------------
.text:0000000000004A7A                 align 20h
.text:0000000000004A80
.text:0000000000004A80 loc_4A80:                               ; CODE XREF: copy_unescaped_string+2C↑j
.text:0000000000004A80                 cmp     dl, 66h ; 'f'
.text:0000000000004A83                 jz      loc_4C20
.text:0000000000004A89                 jg      short loc_4AC8
.text:0000000000004A8B                 cmp     dl, 61h ; 'a'
.text:0000000000004A8E                 jz      loc_4C38
.text:0000000000004A94                 jle     loc_4B68
.text:0000000000004A9A                 cmp     dl, 62h ; 'b'
.text:0000000000004A9D                 jz      loc_4C68
.text:0000000000004AA3                 cmp     dl, 63h ; 'c'
.text:0000000000004AA6                 jnz     loc_4BB8
.text:0000000000004AAC                 nop     dword ptr [rax+00h]
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: copy_unescaped_string+90↓j
.text:0000000000004AB0                 add     rcx, 1
.text:0000000000004AB4                 cmp     byte ptr [rcx], 0
.text:0000000000004AB7                 jz      short loc_4A6E
.text:0000000000004AB9                 add     rcx, 1
.text:0000000000004ABD                 cmp     byte ptr [rcx], 0
.text:0000000000004AC0                 jnz     short loc_4AB0
.text:0000000000004AC2                 jmp     short loc_4A6E
.text:0000000000004AC2 ; ---------------------------------------------------------------------------
.text:0000000000004AC4                 align 8
.text:0000000000004AC8
.text:0000000000004AC8 loc_4AC8:                               ; CODE XREF: copy_unescaped_string+59↑j
.text:0000000000004AC8                 cmp     dl, 74h ; 't'
.text:0000000000004ACB                 jz      loc_4C50
.text:0000000000004AD1                 jle     short loc_4B40
.text:0000000000004AD3                 cmp     dl, 76h ; 'v'
.text:0000000000004AD6                 jz      loc_4BF0
.text:0000000000004ADC                 cmp     dl, 78h ; 'x'
.text:0000000000004ADF                 jnz     loc_4BB8
.text:0000000000004AE5                 call    ___ctype_b_loc
.text:0000000000004AEA                 mov     r8, [rax]
.text:0000000000004AED                 add     rbx, 2
.text:0000000000004AF1                 xor     edi, edi
.text:0000000000004AF3                 xor     ecx, ecx
.text:0000000000004AF5
.text:0000000000004AF5 loc_4AF5:                               ; CODE XREF: copy_unescaped_string+FA↓j
.text:0000000000004AF5                 movsx   edx, byte ptr [rbx]
.text:0000000000004AF8                 movzx   esi, dl
.text:0000000000004AFB                 mov     eax, edx
.text:0000000000004AFD                 test    byte ptr [r8+rsi*2+1], 10h
.text:0000000000004B03                 jz      loc_4C90
.text:0000000000004B09                 mov     esi, ecx
.text:0000000000004B0B                 lea     ecx, [rax-61h]
.text:0000000000004B0E                 shl     esi, 4
.text:0000000000004B11                 cmp     cl, 5
.text:0000000000004B14                 ja      loc_4BD0
.text:0000000000004B1A                 lea     eax, [rdx-57h]
.text:0000000000004B1D
.text:0000000000004B1D loc_4B1D:                               ; CODE XREF: copy_unescaped_string+1B1↓j
.text:0000000000004B1D                 add     edi, 1
.text:0000000000004B20                 add     rbx, 1
.text:0000000000004B24                 lea     ecx, [rsi+rax]
.text:0000000000004B27                 cmp     edi, 3
.text:0000000000004B2A                 jnz     short loc_4AF5
.text:0000000000004B2C
.text:0000000000004B2C loc_4B2C:                               ; CODE XREF: copy_unescaped_string+262↓j
.text:0000000000004B2C                 mov     [rbp+0], cl
.text:0000000000004B2F                 movzx   eax, byte ptr [rbx]
.text:0000000000004B32                 add     rbp, 1
.text:0000000000004B36                 jmp     loc_4A4E
.text:0000000000004B36 ; ---------------------------------------------------------------------------
.text:0000000000004B3B                 align 20h
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: copy_unescaped_string+A1↑j
.text:0000000000004B40                 cmp     dl, 6Eh ; 'n'
.text:0000000000004B43                 jz      loc_4C08
.text:0000000000004B49                 cmp     dl, 72h ; 'r'
.text:0000000000004B4C                 jnz     short loc_4BB8
.text:0000000000004B4E                 mov     byte ptr [rbp+0], 0Dh
.text:0000000000004B52                 movzx   eax, byte ptr [rbx+2]
.text:0000000000004B56                 add     rbp, 1
.text:0000000000004B5A                 add     rbx, 2
.text:0000000000004B5E                 jmp     loc_4A4E
.text:0000000000004B5E ; ---------------------------------------------------------------------------
.text:0000000000004B63                 align 8
.text:0000000000004B68
.text:0000000000004B68 loc_4B68:                               ; CODE XREF: copy_unescaped_string+64↑j
.text:0000000000004B68                 test    dl, dl
.text:0000000000004B6A                 jz      loc_4A6E
.text:0000000000004B70                 cmp     dl, 30h ; '0'
.text:0000000000004B73                 jnz     short loc_4BB8
.text:0000000000004B75                 lea     rdx, [rbx+2]
.text:0000000000004B79                 movsx   eax, byte ptr [rdx]
.text:0000000000004B7C                 xor     ecx, ecx
.text:0000000000004B7E                 lea     rdi, [rbx+5]
.text:0000000000004B82                 lea     esi, [rax-30h]
.text:0000000000004B85                 cmp     sil, 7
.text:0000000000004B89                 ja      short loc_4BAB
.text:0000000000004B8B
.text:0000000000004B8B loc_4B8B:                               ; CODE XREF: copy_unescaped_string+179↓j
.text:0000000000004B8B                 lea     rbx, [rdx+1]
.text:0000000000004B8F                 lea     ecx, [rax+rcx*8-30h]
.text:0000000000004B93                 cmp     rdi, rbx
.text:0000000000004B96                 jz      loc_4C80
.text:0000000000004B9C                 mov     rdx, rbx
.text:0000000000004B9F                 movsx   eax, byte ptr [rdx]
.text:0000000000004BA2                 lea     esi, [rax-30h]
.text:0000000000004BA5                 cmp     sil, 7
.text:0000000000004BA9                 jbe     short loc_4B8B
.text:0000000000004BAB
.text:0000000000004BAB loc_4BAB:                               ; CODE XREF: copy_unescaped_string+159↑j
.text:0000000000004BAB                 mov     rbx, rdx
.text:0000000000004BAE                 jmp     loc_4C84
.text:0000000000004BAE ; ---------------------------------------------------------------------------
.text:0000000000004BB3                 align 8
.text:0000000000004BB8
.text:0000000000004BB8 loc_4BB8:                               ; CODE XREF: copy_unescaped_string+76↑j
.text:0000000000004BB8                                         ; copy_unescaped_string+AF↑j ...
.text:0000000000004BB8                 mov     byte ptr [rbp+0], 5Ch ; '\'
.text:0000000000004BBC                 mov     [rbp+1], dl
.text:0000000000004BBF                 add     rbx, 2
.text:0000000000004BC3                 movzx   eax, byte ptr [rbx]
.text:0000000000004BC6                 add     rbp, 2
.text:0000000000004BCA                 jmp     loc_4A4E
.text:0000000000004BCA ; ---------------------------------------------------------------------------
.text:0000000000004BCF                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 loc_4BD0:                               ; CODE XREF: copy_unescaped_string+E4↑j
.text:0000000000004BD0                 lea     r9d, [rax-41h]
.text:0000000000004BD4                 lea     ecx, [rdx-30h]
.text:0000000000004BD7                 lea     eax, [rdx-37h]
.text:0000000000004BDA                 cmp     r9b, 5
.text:0000000000004BDE                 cmova   eax, ecx
.text:0000000000004BE1                 jmp     loc_4B1D
.text:0000000000004BE1 ; ---------------------------------------------------------------------------
.text:0000000000004BE6                 align 10h
.text:0000000000004BF0
.text:0000000000004BF0 loc_4BF0:                               ; CODE XREF: copy_unescaped_string+A6↑j
.text:0000000000004BF0                 mov     byte ptr [rbp+0], 0Bh
.text:0000000000004BF4                 movzx   eax, byte ptr [rbx+2]
.text:0000000000004BF8                 add     rbp, 1
.text:0000000000004BFC                 add     rbx, 2
.text:0000000000004C00                 jmp     loc_4A4E
.text:0000000000004C00 ; ---------------------------------------------------------------------------
.text:0000000000004C05                 align 8
.text:0000000000004C08
.text:0000000000004C08 loc_4C08:                               ; CODE XREF: copy_unescaped_string+113↑j
.text:0000000000004C08                 mov     byte ptr [rbp+0], 0Ah
.text:0000000000004C0C                 movzx   eax, byte ptr [rbx+2]
.text:0000000000004C10                 add     rbp, 1
.text:0000000000004C14                 add     rbx, 2
.text:0000000000004C18                 jmp     loc_4A4E
.text:0000000000004C18 ; ---------------------------------------------------------------------------
.text:0000000000004C1D                 align 20h
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: copy_unescaped_string+53↑j
.text:0000000000004C20                 mov     byte ptr [rbp+0], 0Ch
.text:0000000000004C24                 movzx   eax, byte ptr [rbx+2]
.text:0000000000004C28                 add     rbp, 1
.text:0000000000004C2C                 add     rbx, 2
.text:0000000000004C30                 jmp     loc_4A4E
.text:0000000000004C30 ; ---------------------------------------------------------------------------
.text:0000000000004C35                 align 8
.text:0000000000004C38
.text:0000000000004C38 loc_4C38:                               ; CODE XREF: copy_unescaped_string+5E↑j
.text:0000000000004C38                 mov     byte ptr [rbp+0], 7
.text:0000000000004C3C                 movzx   eax, byte ptr [rbx+2]
.text:0000000000004C40                 add     rbp, 1
.text:0000000000004C44                 add     rbx, 2
.text:0000000000004C48                 jmp     loc_4A4E
.text:0000000000004C48 ; ---------------------------------------------------------------------------
.text:0000000000004C4D                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: copy_unescaped_string+9B↑j
.text:0000000000004C50                 mov     byte ptr [rbp+0], 9
.text:0000000000004C54                 movzx   eax, byte ptr [rbx+2]
.text:0000000000004C58                 add     rbp, 1
.text:0000000000004C5C                 add     rbx, 2
.text:0000000000004C60                 jmp     loc_4A4E
.text:0000000000004C60 ; ---------------------------------------------------------------------------
.text:0000000000004C65                 align 8
.text:0000000000004C68
.text:0000000000004C68 loc_4C68:                               ; CODE XREF: copy_unescaped_string+6D↑j
.text:0000000000004C68                 mov     byte ptr [rbp+0], 8
.text:0000000000004C6C                 movzx   eax, byte ptr [rbx+2]
.text:0000000000004C70                 add     rbp, 1
.text:0000000000004C74                 add     rbx, 2
.text:0000000000004C78                 jmp     loc_4A4E
.text:0000000000004C78 ; ---------------------------------------------------------------------------
.text:0000000000004C7D                 align 20h
.text:0000000000004C80
.text:0000000000004C80 loc_4C80:                               ; CODE XREF: copy_unescaped_string+166↑j
.text:0000000000004C80                 movzx   eax, byte ptr [rdx+1]
.text:0000000000004C84
.text:0000000000004C84 loc_4C84:                               ; CODE XREF: copy_unescaped_string+17E↑j
.text:0000000000004C84                 mov     [rbp+0], cl
.text:0000000000004C87                 add     rbp, 1
.text:0000000000004C8B                 jmp     loc_4A4E
.text:0000000000004C90 ; ---------------------------------------------------------------------------
.text:0000000000004C90
.text:0000000000004C90 loc_4C90:                               ; CODE XREF: copy_unescaped_string+D3↑j
.text:0000000000004C90                 test    edi, edi
.text:0000000000004C92                 jnz     loc_4B2C
.text:0000000000004C98                 mov     edx, 785Ch
.text:0000000000004C9D                 add     rbp, 2
.text:0000000000004CA1                 mov     [rbp-2], dx
.text:0000000000004CA5                 jmp     loc_4A4E
.text:0000000000004CA5 ; } // starts at 4A30
.text:0000000000004CA5 copy_unescaped_string endp
.text:0000000000004CA5
.text:0000000000004CA5 ; ---------------------------------------------------------------------------
.text:0000000000004CAA                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0 compile_regex   proc near               ; CODE XREF: main+58B↑p
.text:0000000000004CB0                                         ; main+109D↑p
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 cmp     cs:ignore_case, 0
.text:0000000000004CB7                 lea     rax, [rdi+48h]
.text:0000000000004CBB                 push    r12
.text:0000000000004CBD                 push    rbp
.text:0000000000004CBE                 push    rbx
.text:0000000000004CBF                 mov     edx, 0
.text:0000000000004CC4                 mov     rbx, [rdi]
.text:0000000000004CC7                 mov     [rdi+28h], rax
.text:0000000000004CCB                 lea     rax, folded_chars
.text:0000000000004CD2                 lea     rbp, [rdi+8]
.text:0000000000004CD6                 mov     qword ptr [rdi+8], 0
.text:0000000000004CDE                 mov     qword ptr [rdi+10h], 0
.text:0000000000004CE6                 cmovz   rax, rdx
.text:0000000000004CEA                 mov     [rdi+30h], rax
.text:0000000000004CEE                 mov     rdi, rbx        ; s
.text:0000000000004CF1                 call    _strlen
.text:0000000000004CF6                 mov     rdx, rbp
.text:0000000000004CF9                 mov     rsi, rax
.text:0000000000004CFC                 mov     rdi, rbx
.text:0000000000004CFF                 call    rpl_re_compile_pattern
.text:0000000000004D04                 test    rax, rax
.text:0000000000004D07                 jnz     short loc_4D15
.text:0000000000004D09                 pop     rbx
.text:0000000000004D0A                 mov     rdi, rbp
.text:0000000000004D0D                 pop     rbp
.text:0000000000004D0E                 pop     r12
.text:0000000000004D10                 jmp     rpl_re_compile_fastmap
.text:0000000000004D15 ; ---------------------------------------------------------------------------
.text:0000000000004D15
.text:0000000000004D15 loc_4D15:                               ; CODE XREF: compile_regex+57↑j
.text:0000000000004D15                 mov     rdi, rbx
.text:0000000000004D18                 mov     r12, rax
.text:0000000000004D1B                 call    quote
.text:0000000000004D20                 lea     rsi, aSForRegexpS ; "%s (for regexp %s)"
.text:0000000000004D27                 mov     rbx, rax
.text:0000000000004D2A                 mov     edx, 5          ; category
.text:0000000000004D2F                 xor     edi, edi        ; domainname
.text:0000000000004D31                 call    _dcgettext
.text:0000000000004D36                 mov     r8, rbx
.text:0000000000004D39                 mov     rdx, rax        ; format
.text:0000000000004D3C                 mov     rcx, r12
.text:0000000000004D3F                 xor     esi, esi        ; errnum
.text:0000000000004D41                 mov     edi, 1          ; status
.text:0000000000004D46                 xor     eax, eax
.text:0000000000004D48                 call    _error
.text:0000000000004D48 ; } // starts at 4CB0
.text:0000000000004D4D                 nop     dword ptr [rax]
.text:0000000000004D4D compile_regex   endp ; sp-analysis failed
.text:0000000000004D4D
.text:0000000000004D50
.text:0000000000004D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D50
.text:0000000000004D50
.text:0000000000004D50 swallow_file_in_memory proc near        ; CODE XREF: main+5B3↑p
.text:0000000000004D50                                         ; main+6CF↑p ...
.text:0000000000004D50
.text:0000000000004D50 var_28          = qword ptr -28h
.text:0000000000004D50 var_20          = qword ptr -20h
.text:0000000000004D50
.text:0000000000004D50 ; __unwind {
.text:0000000000004D50                 push    rbp
.text:0000000000004D51                 push    rbx
.text:0000000000004D52                 mov     rbp, rsi
.text:0000000000004D55                 sub     rsp, 18h
.text:0000000000004D59                 mov     rax, fs:28h
.text:0000000000004D62                 mov     [rsp+28h+var_20], rax
.text:0000000000004D67                 xor     eax, eax
.text:0000000000004D69                 test    rdi, rdi
.text:0000000000004D6C                 jz      short loc_4D76
.text:0000000000004D6E                 cmp     byte ptr [rdi], 0
.text:0000000000004D71                 mov     rbx, rdi
.text:0000000000004D74                 jnz     short loc_4DB8
.text:0000000000004D76
.text:0000000000004D76 loc_4D76:                               ; CODE XREF: swallow_file_in_memory+1C↑j
.text:0000000000004D76                                         ; swallow_file_in_memory+80↓j
.text:0000000000004D76                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000004D7D                 mov     rsi, rsp
.text:0000000000004D80                 call    fread_file
.text:0000000000004D85                 test    rax, rax
.text:0000000000004D88                 mov     [rbp+0], rax
.text:0000000000004D8C                 jz      loc_4E1A
.text:0000000000004D92
.text:0000000000004D92 loc_4D92:                               ; CODE XREF: swallow_file_in_memory+94↓j
.text:0000000000004D92                 add     rax, [rsp+28h+var_28]
.text:0000000000004D96                 mov     [rbp+8], rax
.text:0000000000004D9A                 mov     rax, [rsp+28h+var_20]
.text:0000000000004D9F                 xor     rax, fs:28h
.text:0000000000004DA8                 jnz     short loc_4E15
.text:0000000000004DAA                 add     rsp, 18h
.text:0000000000004DAE                 pop     rbx
.text:0000000000004DAF                 pop     rbp
.text:0000000000004DB0                 retn
.text:0000000000004DB0 ; ---------------------------------------------------------------------------
.text:0000000000004DB1                 align 8
.text:0000000000004DB8
.text:0000000000004DB8 loc_4DB8:                               ; CODE XREF: swallow_file_in_memory+24↑j
.text:0000000000004DB8                 lea     rdi, aLt+2      ; "-"
.text:0000000000004DBF                 mov     ecx, 2
.text:0000000000004DC4                 mov     rsi, rbx
.text:0000000000004DC7                 repe cmpsb
.text:0000000000004DC9                 setnbe  al
.text:0000000000004DCC                 sbb     al, 0
.text:0000000000004DCE                 test    al, al
.text:0000000000004DD0                 jz      short loc_4D76
.text:0000000000004DD2                 mov     rsi, rsp
.text:0000000000004DD5                 mov     rdi, rbx
.text:0000000000004DD8                 call    read_file
.text:0000000000004DDD                 test    rax, rax
.text:0000000000004DE0                 mov     [rbp+0], rax
.text:0000000000004DE4                 jnz     short loc_4D92
.text:0000000000004DE6
.text:0000000000004DE6 loc_4DE6:                               ; CODE XREF: swallow_file_in_memory+D1↓j
.text:0000000000004DE6                 mov     rdx, rbx
.text:0000000000004DE9                 mov     esi, 3
.text:0000000000004DEE                 xor     edi, edi
.text:0000000000004DF0                 call    quotearg_n_style_colon
.text:0000000000004DF5                 mov     rbx, rax
.text:0000000000004DF8                 call    ___errno_location
.text:0000000000004DFD                 mov     esi, [rax]      ; errnum
.text:0000000000004DFF                 lea     rdx, aS_2+2     ; format
.text:0000000000004E06                 mov     rcx, rbx
.text:0000000000004E09                 mov     edi, 1          ; status
.text:0000000000004E0E                 xor     eax, eax
.text:0000000000004E10                 call    _error
.text:0000000000004E15
.text:0000000000004E15 loc_4E15:                               ; CODE XREF: swallow_file_in_memory+58↑j
.text:0000000000004E15                 call    ___stack_chk_fail
.text:0000000000004E1A ; ---------------------------------------------------------------------------
.text:0000000000004E1A
.text:0000000000004E1A loc_4E1A:                               ; CODE XREF: swallow_file_in_memory+3C↑j
.text:0000000000004E1A                 lea     rbx, aLt+2      ; "-"
.text:0000000000004E21                 jmp     short loc_4DE6
.text:0000000000004E21 ; } // starts at 4D50
.text:0000000000004E21 swallow_file_in_memory endp
.text:0000000000004E21
.text:0000000000004E21 ; ---------------------------------------------------------------------------
.text:0000000000004E23                 align 10h
.text:0000000000004E30
.text:0000000000004E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E30
.text:0000000000004E30
.text:0000000000004E30 digest_word_file proc near              ; CODE XREF: main+627↑p
.text:0000000000004E30                                         ; main+64D↑p
.text:0000000000004E30
.text:0000000000004E30 var_48          = qword ptr -48h
.text:0000000000004E30 var_40          = qword ptr -40h
.text:0000000000004E30 var_30          = qword ptr -30h
.text:0000000000004E30
.text:0000000000004E30 ; __unwind {
.text:0000000000004E30                 push    r13
.text:0000000000004E32                 push    r12
.text:0000000000004E34                 mov     r12, rsi
.text:0000000000004E37                 push    rbp
.text:0000000000004E38                 push    rbx
.text:0000000000004E39                 lea     r13, [r12+8]
.text:0000000000004E3E                 sub     rsp, 28h
.text:0000000000004E42                 mov     rsi, rsp
.text:0000000000004E45                 mov     rax, fs:28h
.text:0000000000004E4E                 mov     [rsp+48h+var_30], rax
.text:0000000000004E53                 xor     eax, eax
.text:0000000000004E55                 call    swallow_file_in_memory
.text:0000000000004E5A                 mov     rbp, [rsp+48h+var_48]
.text:0000000000004E5E                 mov     rdx, [rsp+48h+var_40]
.text:0000000000004E63                 xor     esi, esi        ; nmemb
.text:0000000000004E65                 mov     qword ptr [r12], 0
.text:0000000000004E6D                 mov     qword ptr [r12+8], 0
.text:0000000000004E76                 xor     edi, edi        ; base
.text:0000000000004E78                 mov     qword ptr [r12+10h], 0
.text:0000000000004E81
.text:0000000000004E81 loc_4E81:                               ; CODE XREF: digest_word_file+E5↓j
.text:0000000000004E81                                         ; digest_word_file+10D↓j
.text:0000000000004E81                 cmp     rbp, rdx
.text:0000000000004E84                 jnb     short loc_4EB3
.text:0000000000004E86
.text:0000000000004E86 loc_4E86:                               ; CODE XREF: digest_word_file+81↓j
.text:0000000000004E86                 cmp     byte ptr [rbp+0], 0Ah
.text:0000000000004E8A                 mov     rbx, rbp
.text:0000000000004E8D                 jnz     short loc_4E9D
.text:0000000000004E8F                 jmp     loc_4F11
.text:0000000000004E8F ; ---------------------------------------------------------------------------
.text:0000000000004E94                 align 8
.text:0000000000004E98
.text:0000000000004E98 loc_4E98:                               ; CODE XREF: digest_word_file+74↓j
.text:0000000000004E98                 cmp     byte ptr [rbx], 0Ah
.text:0000000000004E9B                 jz      short loc_4EE0
.text:0000000000004E9D
.text:0000000000004E9D loc_4E9D:                               ; CODE XREF: digest_word_file+5D↑j
.text:0000000000004E9D                 add     rbx, 1
.text:0000000000004EA1                 cmp     rbx, rdx
.text:0000000000004EA4                 jnz     short loc_4E98
.text:0000000000004EA6                 cmp     rbp, rdx
.text:0000000000004EA9                 jb      short loc_4EE5
.text:0000000000004EAB                 mov     rbp, rdx
.text:0000000000004EAE                 cmp     rbp, rdx
.text:0000000000004EB1                 jb      short loc_4E86
.text:0000000000004EB3
.text:0000000000004EB3 loc_4EB3:                               ; CODE XREF: digest_word_file+54↑j
.text:0000000000004EB3                 lea     rcx, compare_words ; compar
.text:0000000000004EBA                 mov     edx, 10h        ; size
.text:0000000000004EBF                 call    _qsort
.text:0000000000004EC4                 mov     rax, [rsp+48h+var_30]
.text:0000000000004EC9                 xor     rax, fs:28h
.text:0000000000004ED2                 jnz     short loc_4F42
.text:0000000000004ED4                 add     rsp, 28h
.text:0000000000004ED8                 pop     rbx
.text:0000000000004ED9                 pop     rbp
.text:0000000000004EDA                 pop     r12
.text:0000000000004EDC                 pop     r13
.text:0000000000004EDE                 retn
.text:0000000000004EDE ; ---------------------------------------------------------------------------
.text:0000000000004EDF                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: digest_word_file+6B↑j
.text:0000000000004EE0                 cmp     rbp, rbx
.text:0000000000004EE3                 jnb     short loc_4F11
.text:0000000000004EE5
.text:0000000000004EE5 loc_4EE5:                               ; CODE XREF: digest_word_file+79↑j
.text:0000000000004EE5                 cmp     rsi, [r12+8]
.text:0000000000004EEA                 jz      short loc_4F1A
.text:0000000000004EEC
.text:0000000000004EEC loc_4EEC:                               ; CODE XREF: digest_word_file+108↓j
.text:0000000000004EEC                 mov     rcx, rsi
.text:0000000000004EEF                 mov     rax, rbx
.text:0000000000004EF2                 add     rsi, 1
.text:0000000000004EF6                 shl     rcx, 4
.text:0000000000004EFA                 sub     rax, rbp
.text:0000000000004EFD                 add     rcx, rdi
.text:0000000000004F00                 cmp     rbx, rdx
.text:0000000000004F03                 mov     [rcx], rbp
.text:0000000000004F06                 mov     [rcx+8], rax
.text:0000000000004F0A                 mov     [r12+10h], rsi
.text:0000000000004F0F                 jnb     short loc_4F3A
.text:0000000000004F11
.text:0000000000004F11 loc_4F11:                               ; CODE XREF: digest_word_file+5F↑j
.text:0000000000004F11                                         ; digest_word_file+B3↑j
.text:0000000000004F11                 lea     rbp, [rbx+1]
.text:0000000000004F15                 jmp     loc_4E81
.text:0000000000004F1A ; ---------------------------------------------------------------------------
.text:0000000000004F1A
.text:0000000000004F1A loc_4F1A:                               ; CODE XREF: digest_word_file+BA↑j
.text:0000000000004F1A                 mov     edx, 10h
.text:0000000000004F1F                 mov     rsi, r13
.text:0000000000004F22                 call    x2nrealloc
.text:0000000000004F27                 mov     rsi, [r12+10h]
.text:0000000000004F2C                 mov     rdi, rax
.text:0000000000004F2F                 mov     [r12], rax
.text:0000000000004F33                 mov     rdx, [rsp+48h+var_40]
.text:0000000000004F38                 jmp     short loc_4EEC
.text:0000000000004F3A ; ---------------------------------------------------------------------------
.text:0000000000004F3A
.text:0000000000004F3A loc_4F3A:                               ; CODE XREF: digest_word_file+DF↑j
.text:0000000000004F3A                 mov     rbp, rbx
.text:0000000000004F3D                 jmp     loc_4E81
.text:0000000000004F42 ; ---------------------------------------------------------------------------
.text:0000000000004F42
.text:0000000000004F42 loc_4F42:                               ; CODE XREF: digest_word_file+A2↑j
.text:0000000000004F42                 call    ___stack_chk_fail
.text:0000000000004F42 ; } // starts at 4E30
.text:0000000000004F42 digest_word_file endp
.text:0000000000004F42
.text:0000000000004F42 ; ---------------------------------------------------------------------------
.text:0000000000004F47                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50
.text:0000000000004F50 print_spaces    proc near               ; CODE XREF: main+1ED2↑p
.text:0000000000004F50                                         ; main+1F1F↑p ...
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 test    rdi, rdi
.text:0000000000004F53                 jle     short locret_4F98
.text:0000000000004F55                 push    rbx
.text:0000000000004F56                 mov     rbx, rdi
.text:0000000000004F59                 nop     dword ptr [rax+00000000h]
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: print_spaces+30↓j
.text:0000000000004F60                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004F67                 mov     rax, [rdi+28h]
.text:0000000000004F6B                 cmp     rax, [rdi+30h]
.text:0000000000004F6F                 jnb     short loc_4F88
.text:0000000000004F71                 lea     rdx, [rax+1]
.text:0000000000004F75                 mov     [rdi+28h], rdx
.text:0000000000004F79                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000004F7C
.text:0000000000004F7C loc_4F7C:                               ; CODE XREF: print_spaces+42↓j
.text:0000000000004F7C                 sub     rbx, 1
.text:0000000000004F80                 jnz     short loc_4F60
.text:0000000000004F82                 pop     rbx
.text:0000000000004F83                 retn
.text:0000000000004F83 ; ---------------------------------------------------------------------------
.text:0000000000004F84                 align 8
.text:0000000000004F88
.text:0000000000004F88 loc_4F88:                               ; CODE XREF: print_spaces+1F↑j
.text:0000000000004F88                 mov     esi, 20h ; ' '  ; int
.text:0000000000004F8D                 call    ___overflow
.text:0000000000004F92                 jmp     short loc_4F7C
.text:0000000000004F92 ; ---------------------------------------------------------------------------
.text:0000000000004F94                 align 8
.text:0000000000004F98
.text:0000000000004F98 locret_4F98:                            ; CODE XREF: print_spaces+3↑j
.text:0000000000004F98                 rep retn
.text:0000000000004F98 ; } // starts at 4F50
.text:0000000000004F98 print_spaces    endp
.text:0000000000004F98
.text:0000000000004F98 ; ---------------------------------------------------------------------------
.text:0000000000004F9A                 align 20h
.text:0000000000004FA0
.text:0000000000004FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FA0
.text:0000000000004FA0
.text:0000000000004FA0 print_field     proc near               ; CODE XREF: main+18E0↑p
.text:0000000000004FA0                                         ; main+1910↑p ...
.text:0000000000004FA0
.text:0000000000004FA0 var_3C          = dword ptr -3Ch
.text:0000000000004FA0
.text:0000000000004FA0 ; __unwind {
.text:0000000000004FA0                 cmp     rsi, rdi
.text:0000000000004FA3                 jbe     locret_51C0
.text:0000000000004FA9                 push    r15
.text:0000000000004FAB                 push    r14
.text:0000000000004FAD                 lea     r14, diacrit_diac
.text:0000000000004FB4                 push    r13
.text:0000000000004FB6                 push    r12
.text:0000000000004FB8                 lea     r13, edited_flag
.text:0000000000004FBF                 push    rbp
.text:0000000000004FC0                 push    rbx
.text:0000000000004FC1                 lea     r12, jpt_514F
.text:0000000000004FC8                 mov     rbx, rdi
.text:0000000000004FCB                 mov     r15, rsi
.text:0000000000004FCE                 sub     rsp, 18h
.text:0000000000004FD2                 nop     word ptr [rax+rax+00h]
.text:0000000000004FD8
.text:0000000000004FD8 loc_4FD8:                               ; CODE XREF: print_field+C0↓j
.text:0000000000004FD8                                         ; print_field+127↓j
.text:0000000000004FD8                 movzx   edx, byte ptr [rbx]
.text:0000000000004FDB                 movsxd  rax, edx
.text:0000000000004FDE                 mov     ebp, edx
.text:0000000000004FE0                 cmp     byte ptr [r13+rax+0], 0
.text:0000000000004FE6                 jz      loc_50A0
.text:0000000000004FEC                 movzx   esi, byte ptr [r14+rax]
.text:0000000000004FF1                 test    sil, sil
.text:0000000000004FF4                 jz      short loc_5003
.text:0000000000004FF6                 cmp     cs:output_format, 3
.text:0000000000004FFD                 jz      loc_5130
.text:0000000000005003
.text:0000000000005003 loc_5003:                               ; CODE XREF: print_field+54↑j
.text:0000000000005003                 cmp     bpl, 5Ch ; '\'
.text:0000000000005007                 jz      loc_5158
.text:000000000000500D                 jg      loc_50E0
.text:0000000000005013                 cmp     bpl, 22h ; '"'
.text:0000000000005017                 jnz     short loc_5078
.text:0000000000005019                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000005020                 mov     rax, [rdi+28h]
.text:0000000000005024                 cmp     rax, [rdi+30h]
.text:0000000000005028                 jnb     loc_5328
.text:000000000000502E                 lea     rdx, [rax+1]
.text:0000000000005032                 mov     [rdi+28h], rdx
.text:0000000000005036                 mov     byte ptr [rax], 22h ; '"'
.text:0000000000005039
.text:0000000000005039 loc_5039:                               ; CODE XREF: print_field+392↓j
.text:0000000000005039                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000005040                 mov     rax, [rdi+28h]
.text:0000000000005044                 cmp     rax, [rdi+30h]
.text:0000000000005048                 jnb     loc_5337
.text:000000000000504E                 lea     rdx, [rax+1]
.text:0000000000005052                 add     rbx, 1
.text:0000000000005056                 cmp     r15, rbx
.text:0000000000005059                 mov     [rdi+28h], rdx
.text:000000000000505D                 mov     byte ptr [rax], 22h ; '"'
.text:0000000000005060                 jnz     loc_4FD8
.text:0000000000005066                 add     rsp, 18h
.text:000000000000506A                 pop     rbx
.text:000000000000506B                 pop     rbp
.text:000000000000506C                 pop     r12
.text:000000000000506E                 pop     r13
.text:0000000000005070                 pop     r14
.text:0000000000005072                 pop     r15
.text:0000000000005074                 retn
.text:0000000000005074 ; ---------------------------------------------------------------------------
.text:0000000000005075                 align 8
.text:0000000000005078
.text:0000000000005078 loc_5078:                               ; CODE XREF: print_field+77↑j
.text:0000000000005078                 jl      short loc_50F2
.text:000000000000507A                 cmp     bpl, 26h ; '&'
.text:000000000000507E                 jg      short loc_50F2
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: print_field+150↓j
.text:0000000000005080                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000005087                 mov     rax, [rdi+28h]
.text:000000000000508B                 cmp     rax, [rdi+30h]
.text:000000000000508F                 jnb     loc_5311
.text:0000000000005095                 lea     rcx, [rax+1]
.text:0000000000005099                 mov     [rdi+28h], rcx
.text:000000000000509D                 mov     byte ptr [rax], 5Ch ; '\'
.text:00000000000050A0
.text:00000000000050A0 loc_50A0:                               ; CODE XREF: print_field+46↑j
.text:00000000000050A0                                         ; print_field+383↓j
.text:00000000000050A0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000050A7                 mov     rax, [rdi+28h]
.text:00000000000050AB                 cmp     rax, [rdi+30h]
.text:00000000000050AF                 jnb     loc_5180
.text:00000000000050B5                 lea     rdx, [rax+1]
.text:00000000000050B9                 mov     [rdi+28h], rdx
.text:00000000000050BD                 mov     [rax], bpl
.text:00000000000050C0
.text:00000000000050C0 def_514F:                               ; CODE XREF: print_field+172↓j
.text:00000000000050C0                                         ; print_field+18B↓j ...
.text:00000000000050C0                 add     rbx, 1          ; jumptable 000000000000514F default case, case 0
.text:00000000000050C4                 cmp     r15, rbx
.text:00000000000050C7                 jnz     loc_4FD8
.text:00000000000050CD                 add     rsp, 18h
.text:00000000000050D1                 pop     rbx
.text:00000000000050D2                 pop     rbp
.text:00000000000050D3                 pop     r12
.text:00000000000050D5                 pop     r13
.text:00000000000050D7                 pop     r14
.text:00000000000050D9                 pop     r15
.text:00000000000050DB                 retn
.text:00000000000050DB ; ---------------------------------------------------------------------------
.text:00000000000050DC                 align 20h
.text:00000000000050E0
.text:00000000000050E0 loc_50E0:                               ; CODE XREF: print_field+6D↑j
.text:00000000000050E0                 cmp     bpl, 7Bh ; '{'
.text:00000000000050E4                 jz      short loc_5118
.text:00000000000050E6                 cmp     bpl, 7Dh ; '}'
.text:00000000000050EA                 jz      short loc_5118
.text:00000000000050EC                 cmp     bpl, 5Fh ; '_'
.text:00000000000050F0                 jz      short loc_5080
.text:00000000000050F2
.text:00000000000050F2 loc_50F2:                               ; CODE XREF: print_field:loc_5078↑j
.text:00000000000050F2                                         ; print_field+DE↑j
.text:00000000000050F2                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000050F9                 mov     rax, [rdi+28h]
.text:00000000000050FD                 cmp     rax, [rdi+30h]
.text:0000000000005101                 jnb     loc_5346
.text:0000000000005107                 lea     rdx, [rax+1]
.text:000000000000510B                 mov     [rdi+28h], rdx
.text:000000000000510F                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000005112                 jmp     short def_514F  ; jumptable 000000000000514F default case, case 0
.text:0000000000005112 ; ---------------------------------------------------------------------------
.text:0000000000005114                 align 8
.text:0000000000005118
.text:0000000000005118 loc_5118:                               ; CODE XREF: print_field+144↑j
.text:0000000000005118                                         ; print_field+14A↑j
.text:0000000000005118                 lea     rsi, aC         ; "$\\%c$"
.text:000000000000511F                 mov     edi, 1
.text:0000000000005124                 xor     eax, eax
.text:0000000000005126                 call    ___printf_chk
.text:000000000000512B                 jmp     short def_514F  ; jumptable 000000000000514F default case, case 0
.text:000000000000512B ; ---------------------------------------------------------------------------
.text:000000000000512D                 align 10h
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: print_field+5D↑j
.text:0000000000005130                 lea     rcx, diacrit_base
.text:0000000000005137                 cmp     sil, 9          ; switch 10 cases
.text:000000000000513B                 movsx   ecx, byte ptr [rcx+rax]
.text:000000000000513F                 mov     r10d, ecx
.text:0000000000005142                 ja      def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005148                 movsxd  rax, ds:(jpt_514F - 1B988h)[r12+rsi*4]
.text:000000000000514C                 add     rax, r12
.text:000000000000514F                 jmp     rax             ; switch jump
.text:000000000000514F ; ---------------------------------------------------------------------------
.text:0000000000005151                 align 8
.text:0000000000005158
.text:0000000000005158 loc_5158:                               ; CODE XREF: print_field+67↑j
.text:0000000000005158                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000515F                 lea     rdi, aBackslash ; "\\backslash{}"
.text:0000000000005166                 mov     edx, 0Ch        ; n
.text:000000000000516B                 mov     esi, 1          ; size
.text:0000000000005170                 call    _fwrite_unlocked
.text:0000000000005175                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005175 ; ---------------------------------------------------------------------------
.text:000000000000517A                 align 20h
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: print_field+10F↑j
.text:0000000000005180                 mov     esi, edx        ; int
.text:0000000000005182                 call    ___overflow
.text:0000000000005187                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005187 ; ---------------------------------------------------------------------------
.text:000000000000518C                 align 10h
.text:0000000000005190
.text:0000000000005190 loc_5190:                               ; CODE XREF: print_field+1AF↑j
.text:0000000000005190                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:0000000000005190                 lea     rax, aWrittenBySSAnd+1Bh ; jumptable 000000000000514F cases 2,3
.text:0000000000005197                 lea     rdx, asc_1B7FF+7 ; "\\"
.text:000000000000519E                 cmp     ecx, 69h ; 'i'
.text:00000000000051A1                 lea     rsi, aSC        ; "\\'%s%c"
.text:00000000000051A8                 mov     edi, 1
.text:00000000000051AD                 cmovnz  rdx, rax
.text:00000000000051B1                 xor     eax, eax
.text:00000000000051B3                 call    ___printf_chk
.text:00000000000051B8                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:00000000000051B8 ; ---------------------------------------------------------------------------
.text:00000000000051BD                 align 20h
.text:00000000000051C0
.text:00000000000051C0 locret_51C0:                            ; CODE XREF: print_field+3↑j
.text:00000000000051C0                 rep retn
.text:00000000000051C2 ; ---------------------------------------------------------------------------
.text:00000000000051C2
.text:00000000000051C2 loc_51C2:                               ; CODE XREF: print_field+1AF↑j
.text:00000000000051C2                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:00000000000051C2                 cmp     r10b, 4Fh ; 'O' ; jumptable 000000000000514F case 9
.text:00000000000051C6                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000051CD                 jz      loc_5373
.text:00000000000051D3                 cmp     r10b, 6Fh ; 'o'
.text:00000000000051D7                 jnz     loc_5355
.text:00000000000051DD                 lea     rdi, aO         ; "\\o{}"
.text:00000000000051E4                 mov     edx, 4          ; n
.text:00000000000051E9                 mov     esi, 1          ; size
.text:00000000000051EE                 call    _fwrite_unlocked
.text:00000000000051F3                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:00000000000051F8 ; ---------------------------------------------------------------------------
.text:00000000000051F8
.text:00000000000051F8 loc_51F8:                               ; CODE XREF: print_field+1AF↑j
.text:00000000000051F8                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:00000000000051F8                 lea     rax, aWrittenBySSAnd+1Bh ; jumptable 000000000000514F case 4
.text:00000000000051FF                 lea     rdx, asc_1B7FF+7 ; "\\"
.text:0000000000005206                 cmp     ecx, 69h ; 'i'
.text:0000000000005209                 lea     rsi, aSC_0      ; "\\^%s%c"
.text:0000000000005210                 mov     edi, 1
.text:0000000000005215                 cmovnz  rdx, rax
.text:0000000000005219                 xor     eax, eax
.text:000000000000521B                 call    ___printf_chk
.text:0000000000005220                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005225 ; ---------------------------------------------------------------------------
.text:0000000000005225
.text:0000000000005225 loc_5225:                               ; CODE XREF: print_field+1AF↑j
.text:0000000000005225                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:0000000000005225                 lea     rax, aWrittenBySSAnd+1Bh ; jumptable 000000000000514F case 5
.text:000000000000522C                 lea     rdx, asc_1B7FF+7 ; "\\"
.text:0000000000005233                 cmp     ecx, 69h ; 'i'
.text:0000000000005236                 lea     rsi, aSC_1      ; "\\\"%s%c"
.text:000000000000523D                 mov     edi, 1
.text:0000000000005242                 cmovnz  rdx, rax
.text:0000000000005246                 xor     eax, eax
.text:0000000000005248                 call    ___printf_chk
.text:000000000000524D                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005252 ; ---------------------------------------------------------------------------
.text:0000000000005252
.text:0000000000005252 loc_5252:                               ; CODE XREF: print_field+1AF↑j
.text:0000000000005252                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:0000000000005252                 lea     rax, aWrittenBySSAnd+1Bh ; jumptable 000000000000514F case 6
.text:0000000000005259                 lea     rdx, asc_1B7FF+7 ; "\\"
.text:0000000000005260                 cmp     ecx, 69h ; 'i'
.text:0000000000005263                 lea     rsi, aSC_2      ; "\\~%s%c"
.text:000000000000526A                 mov     edi, 1
.text:000000000000526F                 cmovnz  rdx, rax
.text:0000000000005273                 xor     eax, eax
.text:0000000000005275                 call    ___printf_chk
.text:000000000000527A                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:000000000000527F ; ---------------------------------------------------------------------------
.text:000000000000527F
.text:000000000000527F loc_527F:                               ; CODE XREF: print_field+1AF↑j
.text:000000000000527F                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:000000000000527F                 lea     rsi, aCC        ; jumptable 000000000000514F case 7
.text:0000000000005286                 mov     edx, ecx
.text:0000000000005288                 mov     edi, 1
.text:000000000000528D                 xor     eax, eax
.text:000000000000528F                 call    ___printf_chk
.text:0000000000005294                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005299 ; ---------------------------------------------------------------------------
.text:0000000000005299
.text:0000000000005299 loc_5299:                               ; CODE XREF: print_field+1AF↑j
.text:0000000000005299                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:0000000000005299                 cmp     r10b, 41h ; 'A' ; jumptable 000000000000514F case 8
.text:000000000000529D                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000052A4                 jz      loc_538E
.text:00000000000052AA                 cmp     r10b, 61h ; 'a'
.text:00000000000052AE                 jnz     loc_5355
.text:00000000000052B4                 lea     rdi, aAa        ; "\\aa{}"
.text:00000000000052BB                 mov     edx, 5          ; n
.text:00000000000052C0                 mov     esi, 1          ; size
.text:00000000000052C5                 call    _fwrite_unlocked
.text:00000000000052CA                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:00000000000052CF ; ---------------------------------------------------------------------------
.text:00000000000052CF
.text:00000000000052CF loc_52CF:                               ; CODE XREF: print_field+1AF↑j
.text:00000000000052CF                                         ; DATA XREF: .rodata:jpt_514F↓o
.text:00000000000052CF                 cmp     r10b, 4Fh ; 'O' ; jumptable 000000000000514F case 1
.text:00000000000052D3                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000052DA                 jz      loc_53CA
.text:00000000000052E0                 jle     loc_53A9
.text:00000000000052E6                 cmp     r10b, 61h ; 'a'
.text:00000000000052EA                 jz      loc_53E5
.text:00000000000052F0                 cmp     r10b, 6Fh ; 'o'
.text:00000000000052F4                 jnz     short loc_5355
.text:00000000000052F6                 lea     rdi, aOe        ; "\\oe{}"
.text:00000000000052FD                 mov     edx, 5          ; n
.text:0000000000005302                 mov     esi, 1          ; size
.text:0000000000005307                 call    _fwrite_unlocked
.text:000000000000530C                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005311 ; ---------------------------------------------------------------------------
.text:0000000000005311
.text:0000000000005311 loc_5311:                               ; CODE XREF: print_field+EF↑j
.text:0000000000005311                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000005316                 mov     [rsp+48h+var_3C], edx
.text:000000000000531A                 call    ___overflow
.text:000000000000531F                 mov     edx, [rsp+48h+var_3C]
.text:0000000000005323                 jmp     loc_50A0
.text:0000000000005328 ; ---------------------------------------------------------------------------
.text:0000000000005328
.text:0000000000005328 loc_5328:                               ; CODE XREF: print_field+88↑j
.text:0000000000005328                 mov     esi, 22h ; '"'  ; int
.text:000000000000532D                 call    ___overflow
.text:0000000000005332                 jmp     loc_5039
.text:0000000000005337 ; ---------------------------------------------------------------------------
.text:0000000000005337
.text:0000000000005337 loc_5337:                               ; CODE XREF: print_field+A8↑j
.text:0000000000005337                 mov     esi, 22h ; '"'  ; int
.text:000000000000533C                 call    ___overflow
.text:0000000000005341                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005346 ; ---------------------------------------------------------------------------
.text:0000000000005346
.text:0000000000005346 loc_5346:                               ; CODE XREF: print_field+161↑j
.text:0000000000005346                 mov     esi, 20h ; ' '  ; int
.text:000000000000534B                 call    ___overflow
.text:0000000000005350                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005355 ; ---------------------------------------------------------------------------
.text:0000000000005355
.text:0000000000005355 loc_5355:                               ; CODE XREF: print_field+237↑j
.text:0000000000005355                                         ; print_field+30E↑j ...
.text:0000000000005355                 mov     rax, [rcx+28h]
.text:0000000000005359                 cmp     rax, [rcx+30h]
.text:000000000000535D                 jnb     loc_5400
.text:0000000000005363                 lea     rdx, [rax+1]
.text:0000000000005367                 mov     [rcx+28h], rdx
.text:000000000000536B                 mov     byte ptr [rax], 20h ; ' '
.text:000000000000536E                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005373 ; ---------------------------------------------------------------------------
.text:0000000000005373
.text:0000000000005373 loc_5373:                               ; CODE XREF: print_field+22D↑j
.text:0000000000005373                 lea     rdi, aO_0       ; "\\O{}"
.text:000000000000537A                 mov     edx, 4          ; n
.text:000000000000537F                 mov     esi, 1          ; size
.text:0000000000005384                 call    _fwrite_unlocked
.text:0000000000005389                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:000000000000538E ; ---------------------------------------------------------------------------
.text:000000000000538E
.text:000000000000538E loc_538E:                               ; CODE XREF: print_field+304↑j
.text:000000000000538E                 lea     rdi, aAa_0      ; "\\AA{}"
.text:0000000000005395                 mov     edx, 5          ; n
.text:000000000000539A                 mov     esi, 1          ; size
.text:000000000000539F                 call    _fwrite_unlocked
.text:00000000000053A4                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:00000000000053A9 ; ---------------------------------------------------------------------------
.text:00000000000053A9
.text:00000000000053A9 loc_53A9:                               ; CODE XREF: print_field+340↑j
.text:00000000000053A9                 cmp     r10b, 41h ; 'A'
.text:00000000000053AD                 jnz     short loc_5355
.text:00000000000053AF                 lea     rdi, aAe        ; "\\AE{}"
.text:00000000000053B6                 mov     edx, 5          ; n
.text:00000000000053BB                 mov     esi, 1          ; size
.text:00000000000053C0                 call    _fwrite_unlocked
.text:00000000000053C5                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:00000000000053CA ; ---------------------------------------------------------------------------
.text:00000000000053CA
.text:00000000000053CA loc_53CA:                               ; CODE XREF: print_field+33A↑j
.text:00000000000053CA                 lea     rdi, aOe_0      ; "\\OE{}"
.text:00000000000053D1                 mov     edx, 5          ; n
.text:00000000000053D6                 mov     esi, 1          ; size
.text:00000000000053DB                 call    _fwrite_unlocked
.text:00000000000053E0                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:00000000000053E5 ; ---------------------------------------------------------------------------
.text:00000000000053E5
.text:00000000000053E5 loc_53E5:                               ; CODE XREF: print_field+34A↑j
.text:00000000000053E5                 lea     rdi, aAe_0      ; "\\ae{}"
.text:00000000000053EC                 mov     edx, 5          ; n
.text:00000000000053F1                 mov     esi, 1          ; size
.text:00000000000053F6                 call    _fwrite_unlocked
.text:00000000000053FB                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:0000000000005400 ; ---------------------------------------------------------------------------
.text:0000000000005400
.text:0000000000005400 loc_5400:                               ; CODE XREF: print_field+3BD↑j
.text:0000000000005400                 mov     esi, 20h ; ' '  ; int
.text:0000000000005405                 mov     rdi, rcx        ; _IO_FILE *
.text:0000000000005408                 call    ___overflow
.text:000000000000540D                 jmp     def_514F        ; jumptable 000000000000514F default case, case 0
.text:000000000000540D ; } // starts at 4FA0
.text:000000000000540D print_field     endp
.text:000000000000540D
.text:000000000000540D ; ---------------------------------------------------------------------------
.text:0000000000005412                 align 20h
.text:0000000000005420
.text:0000000000005420 ; =============== S U B R O U T I N E =======================================
.text:0000000000005420
.text:0000000000005420
.text:0000000000005420 ; int compare_occurs(const void *, const void *)
.text:0000000000005420 compare_occurs  proc near               ; DATA XREF: main+1219↑o
.text:0000000000005420 ; __unwind {
.text:0000000000005420                 push    rbp
.text:0000000000005421                 push    rbx
.text:0000000000005422                 mov     rbp, rdi
.text:0000000000005425                 mov     rbx, rsi
.text:0000000000005428                 call    compare_words
.text:000000000000542D                 test    eax, eax
.text:000000000000542F                 jnz     short loc_5440
.text:0000000000005431                 mov     rax, [rbx]
.text:0000000000005434                 cmp     [rbp+0], rax
.text:0000000000005438                 jb      short loc_5448
.text:000000000000543A                 setnbe  al
.text:000000000000543D                 movzx   eax, al
.text:0000000000005440
.text:0000000000005440 loc_5440:                               ; CODE XREF: compare_occurs+F↑j
.text:0000000000005440                                         ; compare_occurs+2D↓j
.text:0000000000005440                 pop     rbx
.text:0000000000005441                 pop     rbp
.text:0000000000005442                 retn
.text:0000000000005442 ; ---------------------------------------------------------------------------
.text:0000000000005443                 align 8
.text:0000000000005448
.text:0000000000005448 loc_5448:                               ; CODE XREF: compare_occurs+18↑j
.text:0000000000005448                 mov     eax, 0FFFFFFFFh
.text:000000000000544D                 jmp     short loc_5440
.text:000000000000544D ; } // starts at 5420
.text:000000000000544D compare_occurs  endp
.text:000000000000544D
.text:000000000000544D ; ---------------------------------------------------------------------------
.text:000000000000544F                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450
.text:0000000000005450 ; __int64 __fastcall search_table_isra_1(void *)
.text:0000000000005450 search_table_isra_1 proc near           ; CODE XREF: main+8BC↑p
.text:0000000000005450                                         ; main+8E6↑p
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 sub     rdx, 1
.text:0000000000005454                 js      short loc_54CE
.text:0000000000005456                 push    r14
.text:0000000000005458                 xor     r14d, r14d
.text:000000000000545B                 push    r13
.text:000000000000545D                 mov     r13, rdx
.text:0000000000005460                 push    r12
.text:0000000000005462                 mov     r12, rsi
.text:0000000000005465                 push    rbp
.text:0000000000005466                 mov     rbp, rdi
.text:0000000000005469                 push    rbx
.text:000000000000546A                 jmp     short loc_547B
.text:000000000000546A ; ---------------------------------------------------------------------------
.text:000000000000546C                 align 10h
.text:0000000000005470
.text:0000000000005470 loc_5470:                               ; CODE XREF: search_table_isra_1+50↓j
.text:0000000000005470                 jz      short loc_54C0
.text:0000000000005472                 lea     r14, [rbx+1]
.text:0000000000005476                 cmp     r14, r13
.text:0000000000005479                 jg      short loc_54AB
.text:000000000000547B
.text:000000000000547B loc_547B:                               ; CODE XREF: search_table_isra_1+1A↑j
.text:000000000000547B                                         ; search_table_isra_1+59↓j
.text:000000000000547B                 lea     rax, [r14+r13]
.text:000000000000547F                 mov     rdi, rbp        ; void *
.text:0000000000005482                 mov     rbx, rax
.text:0000000000005485                 shr     rbx, 3Fh
.text:0000000000005489                 add     rbx, rax
.text:000000000000548C                 sar     rbx, 1
.text:000000000000548F                 mov     rsi, rbx
.text:0000000000005492                 shl     rsi, 4
.text:0000000000005496                 add     rsi, r12        ; void *
.text:0000000000005499                 call    compare_words
.text:000000000000549E                 test    eax, eax
.text:00000000000054A0                 jns     short loc_5470
.text:00000000000054A2                 lea     r13, [rbx-1]
.text:00000000000054A6                 cmp     r14, r13
.text:00000000000054A9                 jle     short loc_547B
.text:00000000000054AB
.text:00000000000054AB loc_54AB:                               ; CODE XREF: search_table_isra_1+29↑j
.text:00000000000054AB                 pop     rbx
.text:00000000000054AC                 xor     eax, eax
.text:00000000000054AE                 pop     rbp
.text:00000000000054AF                 pop     r12
.text:00000000000054B1                 pop     r13
.text:00000000000054B3                 pop     r14
.text:00000000000054B5                 retn
.text:00000000000054B5 ; ---------------------------------------------------------------------------
.text:00000000000054B6                 align 20h
.text:00000000000054C0
.text:00000000000054C0 loc_54C0:                               ; CODE XREF: search_table_isra_1:loc_5470↑j
.text:00000000000054C0                 pop     rbx
.text:00000000000054C1                 mov     eax, 1
.text:00000000000054C6                 pop     rbp
.text:00000000000054C7                 pop     r12
.text:00000000000054C9                 pop     r13
.text:00000000000054CB                 pop     r14
.text:00000000000054CD                 retn
.text:00000000000054CE ; ---------------------------------------------------------------------------
.text:00000000000054CE
.text:00000000000054CE loc_54CE:                               ; CODE XREF: search_table_isra_1+4↑j
.text:00000000000054CE                 xor     eax, eax
.text:00000000000054D0                 retn
.text:00000000000054D0 ; } // starts at 5450
.text:00000000000054D0 search_table_isra_1 endp
.text:00000000000054D0
.text:00000000000054D0 ; ---------------------------------------------------------------------------
.text:00000000000054D1                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0 ; Attributes: noreturn
.text:00000000000054E0
.text:00000000000054E0 ; void __fastcall __noreturn usage(int status)
.text:00000000000054E0                 public usage
.text:00000000000054E0 usage           proc near               ; CODE XREF: main+235D↑p
.text:00000000000054E0                                         ; main+2467↑p ...
.text:00000000000054E0
.text:00000000000054E0 var_A8          = qword ptr -0A8h
.text:00000000000054E0 var_A0          = qword ptr -0A0h
.text:00000000000054E0 var_98          = qword ptr -98h
.text:00000000000054E0 var_90          = qword ptr -90h
.text:00000000000054E0 var_88          = qword ptr -88h
.text:00000000000054E0 var_80          = qword ptr -80h
.text:00000000000054E0 var_78          = qword ptr -78h
.text:00000000000054E0 var_70          = qword ptr -70h
.text:00000000000054E0 var_68          = qword ptr -68h
.text:00000000000054E0 var_60          = qword ptr -60h
.text:00000000000054E0 var_58          = qword ptr -58h
.text:00000000000054E0 var_50          = qword ptr -50h
.text:00000000000054E0 var_48          = qword ptr -48h
.text:00000000000054E0 var_40          = qword ptr -40h
.text:00000000000054E0 var_30          = qword ptr -30h
.text:00000000000054E0
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 push    r13
.text:00000000000054E2                 push    r12
.text:00000000000054E4                 mov     edx, 5          ; category
.text:00000000000054E9                 push    rbp
.text:00000000000054EA                 push    rbx
.text:00000000000054EB                 mov     ebp, edi
.text:00000000000054ED                 sub     rsp, 88h
.text:00000000000054F4                 mov     rbx, cs:program_name
.text:00000000000054FB                 mov     rax, fs:28h
.text:0000000000005504                 mov     [rsp+0A8h+var_30], rax
.text:0000000000005509                 xor     eax, eax
.text:000000000000550B                 test    edi, edi
.text:000000000000550D                 jz      short loc_553D
.text:000000000000550F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000005516                 xor     edi, edi        ; domainname
.text:0000000000005518                 call    _dcgettext
.text:000000000000551D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005524                 mov     rdx, rax
.text:0000000000005527                 mov     rcx, rbx
.text:000000000000552A                 mov     esi, 1
.text:000000000000552F                 xor     eax, eax
.text:0000000000005531                 call    ___fprintf_chk
.text:0000000000005536
.text:0000000000005536 loc_5536:                               ; CODE XREF: usage+386↓j
.text:0000000000005536                 mov     edi, ebp        ; status
.text:0000000000005538                 call    _exit
.text:000000000000553D ; ---------------------------------------------------------------------------
.text:000000000000553D
.text:000000000000553D loc_553D:                               ; CODE XREF: usage+2D↑j
.text:000000000000553D                 lea     rsi, aUsageSOptionIn ; "Usage: %s [OPTION]... [INPUT]...   (wit"...
.text:0000000000005544                 xor     edi, edi        ; domainname
.text:0000000000005546                 call    _dcgettext
.text:000000000000554B                 mov     rcx, rbx
.text:000000000000554E                 mov     rdx, rbx
.text:0000000000005551                 mov     rsi, rax
.text:0000000000005554                 mov     edi, 1
.text:0000000000005559                 xor     eax, eax
.text:000000000000555B                 call    ___printf_chk
.text:0000000000005560                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005567                 lea     rsi, aOutputAPermute ; "Output a permuted index, including cont"...
.text:000000000000556E                 mov     edx, 5          ; category
.text:0000000000005573                 xor     edi, edi        ; domainname
.text:0000000000005575                 call    _dcgettext
.text:000000000000557A                 mov     rsi, rbx        ; stream
.text:000000000000557D                 mov     rdi, rax        ; s
.text:0000000000005580                 call    _fputs_unlocked
.text:0000000000005585                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000558C                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000005593                 mov     edx, 5          ; category
.text:0000000000005598                 xor     edi, edi        ; domainname
.text:000000000000559A                 call    _dcgettext
.text:000000000000559F                 mov     rsi, rbx        ; stream
.text:00000000000055A2                 mov     rdi, rax        ; s
.text:00000000000055A5                 call    _fputs_unlocked
.text:00000000000055AA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000055B1                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:00000000000055B8                 mov     edx, 5          ; category
.text:00000000000055BD                 xor     edi, edi        ; domainname
.text:00000000000055BF                 call    _dcgettext
.text:00000000000055C4                 mov     rsi, rbx        ; stream
.text:00000000000055C7                 mov     rdi, rax        ; s
.text:00000000000055CA                 call    _fputs_unlocked
.text:00000000000055CF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000055D6                 lea     rsi, aAAutoReference ; "  -A, --auto-reference           output"...
.text:00000000000055DD                 mov     edx, 5          ; category
.text:00000000000055E2                 xor     edi, edi        ; domainname
.text:00000000000055E4                 call    _dcgettext
.text:00000000000055E9                 mov     rsi, rbx        ; stream
.text:00000000000055EC                 mov     rdi, rax        ; s
.text:00000000000055EF                 call    _fputs_unlocked
.text:00000000000055F4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000055FB                 lea     rsi, aFFlagTruncatio ; "  -F, --flag-truncation=STRING   use ST"...
.text:0000000000005602                 mov     edx, 5          ; category
.text:0000000000005607                 xor     edi, edi        ; domainname
.text:0000000000005609                 call    _dcgettext
.text:000000000000560E                 mov     rsi, rbx        ; stream
.text:0000000000005611                 mov     rdi, rax        ; s
.text:0000000000005614                 call    _fputs_unlocked
.text:0000000000005619                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005620                 lea     rsi, aMMacroNameStri ; "  -M, --macro-name=STRING        macro "...
.text:0000000000005627                 mov     edx, 5          ; category
.text:000000000000562C                 xor     edi, edi        ; domainname
.text:000000000000562E                 call    _dcgettext
.text:0000000000005633                 mov     rsi, rbx        ; stream
.text:0000000000005636                 mov     rdi, rax        ; s
.text:0000000000005639                 call    _fputs_unlocked
.text:000000000000563E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005645                 lea     rsi, aWWordRegexpReg ; "  -W, --word-regexp=REGEXP       use RE"...
.text:000000000000564C                 mov     edx, 5          ; category
.text:0000000000005651                 xor     edi, edi        ; domainname
.text:0000000000005653                 call    _dcgettext
.text:0000000000005658                 mov     rsi, rbx        ; stream
.text:000000000000565B                 mov     rdi, rax        ; s
.text:000000000000565E                 call    _fputs_unlocked
.text:0000000000005663                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000566A                 lea     rsi, aRReferencesFir ; "  -r, --references               first "...
.text:0000000000005671                 mov     edx, 5          ; category
.text:0000000000005676                 xor     edi, edi        ; domainname
.text:0000000000005678                 call    _dcgettext
.text:000000000000567D                 mov     rsi, rbx        ; stream
.text:0000000000005680                 mov     rdi, rax        ; s
.text:0000000000005683                 call    _fputs_unlocked
.text:0000000000005688                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000568F                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000005696                 mov     edx, 5          ; category
.text:000000000000569B                 xor     edi, edi        ; domainname
.text:000000000000569D                 call    _dcgettext
.text:00000000000056A2                 mov     rsi, rbx        ; stream
.text:00000000000056A5                 mov     rdi, rax        ; s
.text:00000000000056A8                 call    _fputs_unlocked
.text:00000000000056AD                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000056B4                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000056BB                 mov     edx, 5          ; category
.text:00000000000056C0                 xor     edi, edi        ; domainname
.text:00000000000056C2                 call    _dcgettext
.text:00000000000056C7                 mov     rsi, rbx        ; stream
.text:00000000000056CA                 mov     rdi, rax        ; s
.text:00000000000056CD                 lea     rbx, aPtx       ; "ptx"
.text:00000000000056D4                 call    _fputs_unlocked
.text:00000000000056D9                 lea     rax, asc_1B75C  ; "["
.text:00000000000056E0                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000056E7                 mov     [rsp+0A8h+var_48], 0
.text:00000000000056F0                 mov     [rsp+0A8h+var_40], 0
.text:00000000000056F9                 mov     rdx, rsp
.text:00000000000056FC                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000005700                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000005707                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000570C                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000005713                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000005718                 lea     rax, domainname ; "coreutils"
.text:000000000000571F                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000005724                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000572B                 mov     [rsp+0A8h+var_98], rax
.text:0000000000005730                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000005737                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000573C                 mov     [rsp+0A8h+var_90], rax
.text:0000000000005741                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000005748                 mov     [rsp+0A8h+var_88], rax
.text:000000000000574D                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000005754                 mov     [rsp+0A8h+var_80], rax
.text:0000000000005759                 mov     [rsp+0A8h+var_70], rax
.text:000000000000575E                 mov     [rsp+0A8h+var_60], rax
.text:0000000000005763                 mov     [rsp+0A8h+var_50], rax
.text:0000000000005768                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005770
.text:0000000000005770 loc_5770:                               ; CODE XREF: usage+2AD↓j
.text:0000000000005770                 add     rdx, 10h
.text:0000000000005774                 mov     rdi, [rdx]
.text:0000000000005777                 test    rdi, rdi
.text:000000000000577A                 jz      short loc_578F
.text:000000000000577C                 mov     ecx, 4
.text:0000000000005781                 mov     rsi, rbx
.text:0000000000005784                 repe cmpsb
.text:0000000000005786                 setnbe  al
.text:0000000000005789                 sbb     al, 0
.text:000000000000578B                 test    al, al
.text:000000000000578D                 jnz     short loc_5770
.text:000000000000578F
.text:000000000000578F loc_578F:                               ; CODE XREF: usage+29A↑j
.text:000000000000578F                 mov     r12, [rdx+8]
.text:0000000000005793                 xor     edi, edi        ; domainname
.text:0000000000005795                 mov     edx, 5          ; category
.text:000000000000579A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000057A1                 test    r12, r12
.text:00000000000057A4                 jz      loc_586B
.text:00000000000057AA                 call    _dcgettext
.text:00000000000057AF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000057B6                 lea     rdx, unk_1B7D2
.text:00000000000057BD                 mov     rsi, rax
.text:00000000000057C0                 mov     edi, 1
.text:00000000000057C5                 xor     eax, eax
.text:00000000000057C7                 call    ___printf_chk
.text:00000000000057CC                 xor     esi, esi        ; locale
.text:00000000000057CE                 mov     edi, 5          ; category
.text:00000000000057D3                 call    _setlocale
.text:00000000000057D8                 test    rax, rax
.text:00000000000057DB                 jz      short loc_57F9
.text:00000000000057DD                 lea     rsi, s2         ; "en_"
.text:00000000000057E4                 mov     edx, 3          ; n
.text:00000000000057E9                 mov     rdi, rax        ; s1
.text:00000000000057EC                 call    _strncmp
.text:00000000000057F1                 test    eax, eax
.text:00000000000057F3                 jnz     loc_5900
.text:00000000000057F9
.text:00000000000057F9 loc_57F9:                               ; CODE XREF: usage+2FB↑j
.text:00000000000057F9                                         ; usage+445↓j
.text:00000000000057F9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000005800                 xor     edi, edi        ; domainname
.text:0000000000005802                 mov     edx, 5          ; category
.text:0000000000005807                 call    _dcgettext
.text:000000000000580C                 lea     rcx, aPtx       ; "ptx"
.text:0000000000005813                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000581A                 mov     rsi, rax
.text:000000000000581D                 mov     edi, 1
.text:0000000000005822                 xor     eax, eax
.text:0000000000005824                 call    ___printf_chk
.text:0000000000005829                 cmp     r12, rbx
.text:000000000000582C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000005833                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000583A                 cmovz   rbx, rcx
.text:000000000000583E
.text:000000000000583E loc_583E:                               ; CODE XREF: usage+414↓j
.text:000000000000583E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000005845                 xor     edi, edi        ; domainname
.text:0000000000005847                 mov     edx, 5          ; category
.text:000000000000584C                 call    _dcgettext
.text:0000000000005851                 mov     rcx, rbx
.text:0000000000005854                 mov     rsi, rax
.text:0000000000005857                 mov     rdx, r12
.text:000000000000585A                 mov     edi, 1
.text:000000000000585F                 xor     eax, eax
.text:0000000000005861                 call    ___printf_chk
.text:0000000000005866                 jmp     loc_5536
.text:000000000000586B ; ---------------------------------------------------------------------------
.text:000000000000586B
.text:000000000000586B loc_586B:                               ; CODE XREF: usage+2C4↑j
.text:000000000000586B                 call    _dcgettext
.text:0000000000005870                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005877                 lea     rdx, unk_1B7D2
.text:000000000000587E                 mov     rsi, rax
.text:0000000000005881                 mov     edi, 1
.text:0000000000005886                 xor     eax, eax
.text:0000000000005888                 call    ___printf_chk
.text:000000000000588D                 xor     esi, esi        ; locale
.text:000000000000588F                 mov     edi, 5          ; category
.text:0000000000005894                 call    _setlocale
.text:0000000000005899                 test    rax, rax
.text:000000000000589C                 jz      short loc_58B6
.text:000000000000589E                 lea     rsi, s2         ; "en_"
.text:00000000000058A5                 mov     edx, 3          ; n
.text:00000000000058AA                 mov     rdi, rax        ; s1
.text:00000000000058AD                 call    _strncmp
.text:00000000000058B2                 test    eax, eax
.text:00000000000058B4                 jnz     short loc_58F9
.text:00000000000058B6
.text:00000000000058B6 loc_58B6:                               ; CODE XREF: usage+3BC↑j
.text:00000000000058B6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000058BD                 mov     edx, 5          ; category
.text:00000000000058C2                 xor     edi, edi        ; domainname
.text:00000000000058C4                 lea     r12, aPtx       ; "ptx"
.text:00000000000058CB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000058D2                 call    _dcgettext
.text:00000000000058D7                 lea     rcx, aPtx       ; "ptx"
.text:00000000000058DE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000058E5                 mov     rsi, rax
.text:00000000000058E8                 mov     edi, 1
.text:00000000000058ED                 xor     eax, eax
.text:00000000000058EF                 call    ___printf_chk
.text:00000000000058F4                 jmp     loc_583E
.text:00000000000058F9 ; ---------------------------------------------------------------------------
.text:00000000000058F9
.text:00000000000058F9 loc_58F9:                               ; CODE XREF: usage+3D4↑j
.text:00000000000058F9                 lea     r12, aPtx       ; "ptx"
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: usage+313↑j
.text:0000000000005900                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000005907                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000590E                 xor     edi, edi        ; domainname
.text:0000000000005910                 mov     edx, 5          ; category
.text:0000000000005915                 call    _dcgettext
.text:000000000000591A                 mov     rsi, r13        ; stream
.text:000000000000591D                 mov     rdi, rax        ; s
.text:0000000000005920                 call    _fputs_unlocked
.text:0000000000005925                 jmp     loc_57F9
.text:0000000000005925 ; } // starts at 54E0
.text:0000000000005925 usage           endp
.text:0000000000005925
.text:0000000000005925 ; ---------------------------------------------------------------------------
.text:000000000000592A                 align 10h
.text:0000000000005930
.text:0000000000005930 ; =============== S U B R O U T I N E =======================================
.text:0000000000005930
.text:0000000000005930 ; Attributes: noreturn
.text:0000000000005930
.text:0000000000005930 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000005930 ; __unwind {
.text:0000000000005930                 mov     edi, 1          ; status
.text:0000000000005935                 jmp     usage
.text:0000000000005935 ; } // starts at 5930
.text:0000000000005935 __argmatch_die  endp
.text:0000000000005935
.text:0000000000005935 ; ---------------------------------------------------------------------------
.text:000000000000593A                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940 ; Attributes: info_from_lumina
.text:0000000000005940
.text:0000000000005940 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005940                 public argmatch
.text:0000000000005940 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000005940
.text:0000000000005940 var_58          = qword ptr -58h
.text:0000000000005940 s2              = qword ptr -50h
.text:0000000000005940 var_41          = byte ptr -41h
.text:0000000000005940 var_40          = qword ptr -40h
.text:0000000000005940
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 push    r15
.text:0000000000005942                 push    r14
.text:0000000000005944                 mov     r15, rsi
.text:0000000000005947                 push    r13
.text:0000000000005949                 push    r12
.text:000000000000594B                 mov     r13, rcx
.text:000000000000594E                 push    rbp
.text:000000000000594F                 push    rbx
.text:0000000000005950                 mov     rbp, rdx
.text:0000000000005953                 sub     rsp, 28h
.text:0000000000005957                 mov     [rsp+58h+s2], rdi
.text:000000000000595C                 mov     [rsp+58h+var_40], rdx
.text:0000000000005961                 call    _strlen
.text:0000000000005966                 mov     r14, [r15]
.text:0000000000005969                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000005971                 test    r14, r14
.text:0000000000005974                 jz      loc_5A2D
.text:000000000000597A                 mov     r12, rax
.text:000000000000597D                 mov     [rsp+58h+var_41], 0
.text:0000000000005982                 xor     ebx, ebx
.text:0000000000005984                 jmp     short loc_59D7
.text:0000000000005984 ; ---------------------------------------------------------------------------
.text:0000000000005986                 align 10h
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000005990                 mov     rax, [rsp+58h+var_40]
.text:0000000000005995                 test    rax, rax
.text:0000000000005998                 jz      loc_5A40
.text:000000000000599E                 mov     rdi, [rsp+58h+var_58]
.text:00000000000059A2                 mov     rdx, r13        ; n
.text:00000000000059A5                 mov     rsi, rbp        ; s2
.text:00000000000059A8                 imul    rdi, r13
.text:00000000000059AC                 add     rdi, rax        ; s1
.text:00000000000059AF                 call    _memcmp
.text:00000000000059B4                 test    eax, eax
.text:00000000000059B6                 movzx   eax, [rsp+58h+var_41]
.text:00000000000059BB                 mov     ecx, 1
.text:00000000000059C0                 cmovnz  eax, ecx
.text:00000000000059C3                 mov     [rsp+58h+var_41], al
.text:00000000000059C7
.text:00000000000059C7 loc_59C7:                               ; CODE XREF: argmatch+A9↓j
.text:00000000000059C7                                         ; argmatch+105↓j
.text:00000000000059C7                 add     rbx, 1
.text:00000000000059CB                 add     rbp, r13
.text:00000000000059CE                 mov     r14, [r15+rbx*8]
.text:00000000000059D2                 test    r14, r14
.text:00000000000059D5                 jz      short loc_5A18
.text:00000000000059D7
.text:00000000000059D7 loc_59D7:                               ; CODE XREF: argmatch+44↑j
.text:00000000000059D7                                         ; argmatch+D1↓j
.text:00000000000059D7                 mov     rsi, [rsp+58h+s2] ; s2
.text:00000000000059DC                 mov     rdx, r12        ; n
.text:00000000000059DF                 mov     rdi, r14        ; s1
.text:00000000000059E2                 call    _strncmp
.text:00000000000059E7                 test    eax, eax
.text:00000000000059E9                 jnz     short loc_59C7
.text:00000000000059EB                 mov     rdi, r14        ; s
.text:00000000000059EE                 call    _strlen
.text:00000000000059F3                 cmp     rax, r12
.text:00000000000059F6                 jz      short loc_5A50
.text:00000000000059F8                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:00000000000059FD                 jnz     short loc_5990
.text:00000000000059FF                 mov     [rsp+58h+var_58], rbx
.text:0000000000005A03                 add     rbx, 1
.text:0000000000005A07                 add     rbp, r13
.text:0000000000005A0A                 mov     r14, [r15+rbx*8]
.text:0000000000005A0E                 test    r14, r14
.text:0000000000005A11                 jnz     short loc_59D7
.text:0000000000005A13                 nop     dword ptr [rax+rax+00h]
.text:0000000000005A18
.text:0000000000005A18 loc_5A18:                               ; CODE XREF: argmatch+95↑j
.text:0000000000005A18                 cmp     [rsp+58h+var_41], 0
.text:0000000000005A1D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005A24                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000005A29                 mov     [rsp+58h+var_58], rax
.text:0000000000005A2D
.text:0000000000005A2D loc_5A2D:                               ; CODE XREF: argmatch+34↑j
.text:0000000000005A2D                                         ; argmatch+114↓j
.text:0000000000005A2D                 mov     rax, [rsp+58h+var_58]
.text:0000000000005A31                 add     rsp, 28h
.text:0000000000005A35                 pop     rbx
.text:0000000000005A36                 pop     rbp
.text:0000000000005A37                 pop     r12
.text:0000000000005A39                 pop     r13
.text:0000000000005A3B                 pop     r14
.text:0000000000005A3D                 pop     r15
.text:0000000000005A3F                 retn
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: argmatch+58↑j
.text:0000000000005A40                 mov     [rsp+58h+var_41], 1
.text:0000000000005A45                 jmp     short loc_59C7
.text:0000000000005A45 ; ---------------------------------------------------------------------------
.text:0000000000005A47                 align 10h
.text:0000000000005A50
.text:0000000000005A50 loc_5A50:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000005A50                 mov     [rsp+58h+var_58], rbx
.text:0000000000005A54                 jmp     short loc_5A2D
.text:0000000000005A54 ; } // starts at 5940
.text:0000000000005A54 argmatch        endp
.text:0000000000005A54
.text:0000000000005A54 ; ---------------------------------------------------------------------------
.text:0000000000005A56                 align 20h
.text:0000000000005A60
.text:0000000000005A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A60
.text:0000000000005A60 ; Attributes: info_from_lumina
.text:0000000000005A60
.text:0000000000005A60 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000005A60                 public argmatch_invalid
.text:0000000000005A60 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000005A60 ; __unwind {
.text:0000000000005A60                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A64                 push    r12
.text:0000000000005A66                 mov     edx, 5          ; category
.text:0000000000005A6B                 push    rbp
.text:0000000000005A6C                 mov     r12, rsi
.text:0000000000005A6F                 push    rbx
.text:0000000000005A70                 mov     rbp, rdi
.text:0000000000005A73                 jz      short loc_5AC0
.text:0000000000005A75                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000005A7C                 xor     edi, edi        ; domainname
.text:0000000000005A7E                 call    _dcgettext
.text:0000000000005A83                 mov     rbx, rax
.text:0000000000005A86
.text:0000000000005A86 loc_5A86:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000005A86                 mov     rsi, rbp
.text:0000000000005A89                 mov     edi, 1
.text:0000000000005A8E                 call    quote_n
.text:0000000000005A93                 mov     rdx, r12
.text:0000000000005A96                 mov     rbp, rax
.text:0000000000005A99                 mov     esi, 8
.text:0000000000005A9E                 xor     edi, edi
.text:0000000000005AA0                 call    quotearg_n_style
.text:0000000000005AA5                 mov     r8, rbp
.text:0000000000005AA8                 mov     rdx, rbx        ; format
.text:0000000000005AAB                 mov     rcx, rax
.text:0000000000005AAE                 pop     rbx
.text:0000000000005AAF                 pop     rbp
.text:0000000000005AB0                 pop     r12
.text:0000000000005AB2                 xor     esi, esi        ; errnum
.text:0000000000005AB4                 xor     edi, edi        ; status
.text:0000000000005AB6                 xor     eax, eax
.text:0000000000005AB8                 jmp     _error
.text:0000000000005AB8 ; ---------------------------------------------------------------------------
.text:0000000000005ABD                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 loc_5AC0:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000005AC0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000005AC7                 xor     edi, edi        ; domainname
.text:0000000000005AC9                 call    _dcgettext
.text:0000000000005ACE                 mov     rbx, rax
.text:0000000000005AD1                 jmp     short loc_5A86
.text:0000000000005AD1 ; } // starts at 5A60
.text:0000000000005AD1 argmatch_invalid endp
.text:0000000000005AD1
.text:0000000000005AD1 ; ---------------------------------------------------------------------------
.text:0000000000005AD3                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AE0
.text:0000000000005AE0 ; Attributes: info_from_lumina
.text:0000000000005AE0
.text:0000000000005AE0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005AE0                 public argmatch_valid
.text:0000000000005AE0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000005AE0 ; __unwind {
.text:0000000000005AE0                 push    r15
.text:0000000000005AE2                 push    r14
.text:0000000000005AE4                 mov     r14, rdi
.text:0000000000005AE7                 push    r13
.text:0000000000005AE9                 push    r12
.text:0000000000005AEB                 xor     edi, edi        ; domainname
.text:0000000000005AED                 push    rbp
.text:0000000000005AEE                 push    rbx
.text:0000000000005AEF                 mov     rbp, rsi
.text:0000000000005AF2                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000005AF9                 mov     r12, rdx
.text:0000000000005AFC                 mov     edx, 5          ; category
.text:0000000000005B01                 sub     rsp, 8
.text:0000000000005B05                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000005B0C                 call    _dcgettext
.text:0000000000005B11                 mov     rdi, rax        ; s
.text:0000000000005B14                 mov     rsi, rbx        ; stream
.text:0000000000005B17                 call    _fputs_unlocked
.text:0000000000005B1C                 mov     r15, [r14]
.text:0000000000005B1F                 test    r15, r15
.text:0000000000005B22                 jz      loc_5BB8
.text:0000000000005B28                 xor     r13d, r13d
.text:0000000000005B2B                 xor     ebx, ebx
.text:0000000000005B2D                 jmp     short loc_5B68
.text:0000000000005B2D ; ---------------------------------------------------------------------------
.text:0000000000005B2F                 align 10h
.text:0000000000005B30
.text:0000000000005B30 loc_5B30:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000005B30                                         ; argmatch_valid+9D↓j
.text:0000000000005B30                 mov     rdi, r15
.text:0000000000005B33                 add     rbx, 1
.text:0000000000005B37                 mov     r13, rbp
.text:0000000000005B3A                 call    quote
.text:0000000000005B3F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005B46                 lea     rdx, aS_1       ; "\n  - %s"
.text:0000000000005B4D                 mov     rcx, rax
.text:0000000000005B50                 mov     esi, 1
.text:0000000000005B55                 xor     eax, eax
.text:0000000000005B57                 add     rbp, r12
.text:0000000000005B5A                 call    ___fprintf_chk
.text:0000000000005B5F                 mov     r15, [r14+rbx*8]
.text:0000000000005B63                 test    r15, r15
.text:0000000000005B66                 jz      short loc_5BB8
.text:0000000000005B68
.text:0000000000005B68 loc_5B68:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000005B68                                         ; argmatch_valid+D2↓j
.text:0000000000005B68                 test    rbx, rbx
.text:0000000000005B6B                 jz      short loc_5B30
.text:0000000000005B6D                 mov     rdx, r12        ; n
.text:0000000000005B70                 mov     rsi, rbp        ; s2
.text:0000000000005B73                 mov     rdi, r13        ; s1
.text:0000000000005B76                 call    _memcmp
.text:0000000000005B7B                 test    eax, eax
.text:0000000000005B7D                 jnz     short loc_5B30
.text:0000000000005B7F                 mov     rdi, r15
.text:0000000000005B82                 add     rbx, 1
.text:0000000000005B86                 add     rbp, r12
.text:0000000000005B89                 call    quote
.text:0000000000005B8E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005B95                 lea     rdx, aS_2       ; ", %s"
.text:0000000000005B9C                 mov     rcx, rax
.text:0000000000005B9F                 mov     esi, 1
.text:0000000000005BA4                 xor     eax, eax
.text:0000000000005BA6                 call    ___fprintf_chk
.text:0000000000005BAB                 mov     r15, [r14+rbx*8]
.text:0000000000005BAF                 test    r15, r15
.text:0000000000005BB2                 jnz     short loc_5B68
.text:0000000000005BB4                 nop     dword ptr [rax+00h]
.text:0000000000005BB8
.text:0000000000005BB8 loc_5BB8:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000005BB8                                         ; argmatch_valid+86↑j
.text:0000000000005BB8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000005BBF                 mov     rax, [rdi+28h]
.text:0000000000005BC3                 cmp     rax, [rdi+30h]
.text:0000000000005BC7                 jnb     short loc_5BE8
.text:0000000000005BC9                 lea     rdx, [rax+1]
.text:0000000000005BCD                 mov     [rdi+28h], rdx
.text:0000000000005BD1                 mov     byte ptr [rax], 0Ah
.text:0000000000005BD4                 add     rsp, 8
.text:0000000000005BD8                 pop     rbx
.text:0000000000005BD9                 pop     rbp
.text:0000000000005BDA                 pop     r12
.text:0000000000005BDC                 pop     r13
.text:0000000000005BDE                 pop     r14
.text:0000000000005BE0                 pop     r15
.text:0000000000005BE2                 retn
.text:0000000000005BE2 ; ---------------------------------------------------------------------------
.text:0000000000005BE3                 align 8
.text:0000000000005BE8
.text:0000000000005BE8 loc_5BE8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000005BE8                 add     rsp, 8
.text:0000000000005BEC                 mov     esi, 0Ah        ; int
.text:0000000000005BF1                 pop     rbx
.text:0000000000005BF2                 pop     rbp
.text:0000000000005BF3                 pop     r12
.text:0000000000005BF5                 pop     r13
.text:0000000000005BF7                 pop     r14
.text:0000000000005BF9                 pop     r15
.text:0000000000005BFB                 jmp     ___overflow
.text:0000000000005BFB ; } // starts at 5AE0
.text:0000000000005BFB argmatch_valid  endp
.text:0000000000005BFB
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00 ; Attributes: info_from_lumina
.text:0000000000005C00
.text:0000000000005C00 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000005C00                 public __xargmatch_internal
.text:0000000000005C00 __xargmatch_internal proc near          ; CODE XREF: main+186↑p
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 push    r15
.text:0000000000005C02                 push    r14
.text:0000000000005C04                 mov     r14, rdi
.text:0000000000005C07                 push    r13
.text:0000000000005C09                 push    r12
.text:0000000000005C0B                 mov     r12, rsi
.text:0000000000005C0E                 push    rbp
.text:0000000000005C0F                 push    rbx
.text:0000000000005C10                 mov     rbp, rcx
.text:0000000000005C13                 mov     rbx, rdx
.text:0000000000005C16                 mov     rcx, r8
.text:0000000000005C19                 mov     rdx, rbp
.text:0000000000005C1C                 sub     rsp, 8
.text:0000000000005C20                 mov     rsi, rbx
.text:0000000000005C23                 mov     rdi, r12
.text:0000000000005C26                 mov     r15, r8
.text:0000000000005C29                 mov     r13, r9
.text:0000000000005C2C                 call    argmatch
.text:0000000000005C31                 test    rax, rax
.text:0000000000005C34                 js      short loc_5C45
.text:0000000000005C36
.text:0000000000005C36 loc_5C36:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000005C36                 add     rsp, 8
.text:0000000000005C3A                 pop     rbx
.text:0000000000005C3B                 pop     rbp
.text:0000000000005C3C                 pop     r12
.text:0000000000005C3E                 pop     r13
.text:0000000000005C40                 pop     r14
.text:0000000000005C42                 pop     r15
.text:0000000000005C44                 retn
.text:0000000000005C45 ; ---------------------------------------------------------------------------
.text:0000000000005C45
.text:0000000000005C45 loc_5C45:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000005C45                 mov     rdx, rax
.text:0000000000005C48                 mov     rsi, r12
.text:0000000000005C4B                 mov     rdi, r14
.text:0000000000005C4E                 call    argmatch_invalid
.text:0000000000005C53                 mov     rdx, r15
.text:0000000000005C56                 mov     rsi, rbp
.text:0000000000005C59                 mov     rdi, rbx
.text:0000000000005C5C                 call    argmatch_valid
.text:0000000000005C61                 call    r13
.text:0000000000005C64                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C6B                 jmp     short loc_5C36
.text:0000000000005C6B ; } // starts at 5C00
.text:0000000000005C6B __xargmatch_internal endp
.text:0000000000005C6B
.text:0000000000005C6B ; ---------------------------------------------------------------------------
.text:0000000000005C6D                 align 10h
.text:0000000000005C70
.text:0000000000005C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C70
.text:0000000000005C70 ; Attributes: info_from_lumina
.text:0000000000005C70
.text:0000000000005C70 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005C70                 public argmatch_to_argument
.text:0000000000005C70 argmatch_to_argument proc near
.text:0000000000005C70 ; __unwind {
.text:0000000000005C70                 push    r14
.text:0000000000005C72                 push    r13
.text:0000000000005C74                 push    r12
.text:0000000000005C76                 push    rbp
.text:0000000000005C77                 push    rbx
.text:0000000000005C78                 mov     r14, [rsi]
.text:0000000000005C7B                 test    r14, r14
.text:0000000000005C7E                 jz      short loc_5CB1
.text:0000000000005C80                 mov     r12, rcx
.text:0000000000005C83                 mov     r13, rdi
.text:0000000000005C86                 mov     rbp, rdx
.text:0000000000005C89                 lea     rbx, [rsi+8]
.text:0000000000005C8D                 jmp     short loc_5C9F
.text:0000000000005C8D ; ---------------------------------------------------------------------------
.text:0000000000005C8F                 align 10h
.text:0000000000005C90
.text:0000000000005C90 loc_5C90:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000005C90                 mov     r14, [rbx]
.text:0000000000005C93                 add     rbp, r12
.text:0000000000005C96                 add     rbx, 8
.text:0000000000005C9A                 test    r14, r14
.text:0000000000005C9D                 jz      short loc_5CB1
.text:0000000000005C9F
.text:0000000000005C9F loc_5C9F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000005C9F                 mov     rdx, r12        ; n
.text:0000000000005CA2                 mov     rsi, rbp        ; s2
.text:0000000000005CA5                 mov     rdi, r13        ; s1
.text:0000000000005CA8                 call    _memcmp
.text:0000000000005CAD                 test    eax, eax
.text:0000000000005CAF                 jnz     short loc_5C90
.text:0000000000005CB1
.text:0000000000005CB1 loc_5CB1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000005CB1                                         ; argmatch_to_argument+2D↑j
.text:0000000000005CB1                 pop     rbx
.text:0000000000005CB2                 mov     rax, r14
.text:0000000000005CB5                 pop     rbp
.text:0000000000005CB6                 pop     r12
.text:0000000000005CB8                 pop     r13
.text:0000000000005CBA                 pop     r14
.text:0000000000005CBC                 retn
.text:0000000000005CBC ; } // starts at 5C70
.text:0000000000005CBC argmatch_to_argument endp
.text:0000000000005CBC
.text:0000000000005CBC ; ---------------------------------------------------------------------------
.text:0000000000005CBD                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CC0
.text:0000000000005CC0
.text:0000000000005CC0                 public close_stdout_set_file_name
.text:0000000000005CC0 close_stdout_set_file_name proc near
.text:0000000000005CC0 ; __unwind {
.text:0000000000005CC0                 mov     cs:file_name, rdi
.text:0000000000005CC7                 retn
.text:0000000000005CC7 ; } // starts at 5CC0
.text:0000000000005CC7 close_stdout_set_file_name endp
.text:0000000000005CC7
.text:0000000000005CC7 ; ---------------------------------------------------------------------------
.text:0000000000005CC8                 align 10h
.text:0000000000005CD0
.text:0000000000005CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CD0
.text:0000000000005CD0
.text:0000000000005CD0                 public close_stdout_set_ignore_EPIPE
.text:0000000000005CD0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005CD0 ; __unwind {
.text:0000000000005CD0                 mov     cs:ignore_EPIPE, dil
.text:0000000000005CD7                 retn
.text:0000000000005CD7 ; } // starts at 5CD0
.text:0000000000005CD7 close_stdout_set_ignore_EPIPE endp
.text:0000000000005CD7
.text:0000000000005CD7 ; ---------------------------------------------------------------------------
.text:0000000000005CD8                 align 20h
.text:0000000000005CE0
.text:0000000000005CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CE0
.text:0000000000005CE0 ; Attributes: info_from_lumina
.text:0000000000005CE0
.text:0000000000005CE0 ; void __cdecl close_stdout()
.text:0000000000005CE0                 public close_stdout
.text:0000000000005CE0 close_stdout    proc near               ; DATA XREF: main+7B↑o
.text:0000000000005CE0 ; __unwind {
.text:0000000000005CE0                 push    rbp
.text:0000000000005CE1                 push    rbx
.text:0000000000005CE2                 sub     rsp, 8
.text:0000000000005CE6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000005CED                 call    close_stream
.text:0000000000005CF2                 test    eax, eax
.text:0000000000005CF4                 jz      short loc_5D0C
.text:0000000000005CF6                 call    ___errno_location
.text:0000000000005CFB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005D02                 mov     rbx, rax
.text:0000000000005D05                 jz      short loc_5D23
.text:0000000000005D07                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000005D0A                 jnz     short loc_5D23
.text:0000000000005D0C
.text:0000000000005D0C loc_5D0C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000005D0C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005D13                 call    close_stream
.text:0000000000005D18                 test    eax, eax
.text:0000000000005D1A                 jnz     short loc_5D62
.text:0000000000005D1C                 add     rsp, 8
.text:0000000000005D20                 pop     rbx
.text:0000000000005D21                 pop     rbp
.text:0000000000005D22                 retn
.text:0000000000005D23 ; ---------------------------------------------------------------------------
.text:0000000000005D23
.text:0000000000005D23 loc_5D23:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005D23                                         ; close_stdout+2A↑j
.text:0000000000005D23                 lea     rsi, aWriteError ; "write error"
.text:0000000000005D2A                 xor     edi, edi        ; domainname
.text:0000000000005D2C                 mov     edx, 5          ; category
.text:0000000000005D31                 call    _dcgettext
.text:0000000000005D36                 mov     rdi, cs:file_name
.text:0000000000005D3D                 mov     rbp, rax
.text:0000000000005D40                 test    rdi, rdi
.text:0000000000005D43                 jz      short loc_5D6D
.text:0000000000005D45                 call    quotearg_colon
.text:0000000000005D4A                 mov     esi, [rbx]      ; errnum
.text:0000000000005D4C                 lea     rdx, format     ; "%s: %s"
.text:0000000000005D53                 mov     rcx, rax
.text:0000000000005D56                 mov     r8, rbp
.text:0000000000005D59                 xor     edi, edi        ; status
.text:0000000000005D5B                 xor     eax, eax
.text:0000000000005D5D                 call    _error
.text:0000000000005D62
.text:0000000000005D62 loc_5D62:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005D62                                         ; close_stdout+A2↓j
.text:0000000000005D62                 mov     edi, cs:exit_failure ; status
.text:0000000000005D68                 call    __exit
.text:0000000000005D6D ; ---------------------------------------------------------------------------
.text:0000000000005D6D
.text:0000000000005D6D loc_5D6D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000005D6D                 mov     esi, [rbx]      ; errnum
.text:0000000000005D6F                 lea     rdx, aS_2+2     ; format
.text:0000000000005D76                 mov     rcx, rax
.text:0000000000005D79                 xor     edi, edi        ; status
.text:0000000000005D7B                 xor     eax, eax
.text:0000000000005D7D                 call    _error
.text:0000000000005D82                 jmp     short loc_5D62
.text:0000000000005D82 ; } // starts at 5CE0
.text:0000000000005D82 close_stdout    endp
.text:0000000000005D82
.text:0000000000005D82 ; ---------------------------------------------------------------------------
.text:0000000000005D84                 align 10h
.text:0000000000005D90
.text:0000000000005D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D90
.text:0000000000005D90
.text:0000000000005D90 protect_fd      proc near               ; CODE XREF: freopen_safer+83↓p
.text:0000000000005D90                                         ; freopen_safer+A1↓p ...
.text:0000000000005D90 ; __unwind {
.text:0000000000005D90                 push    rbp
.text:0000000000005D91                 push    rbx
.text:0000000000005D92                 mov     ebp, edi
.text:0000000000005D94                 lea     rdi, aDevNull   ; "/dev/null"
.text:0000000000005D9B                 xor     esi, esi        ; oflag
.text:0000000000005D9D                 xor     eax, eax
.text:0000000000005D9F                 sub     rsp, 8
.text:0000000000005DA3                 mov     ebx, 1
.text:0000000000005DA8                 call    _open
.text:0000000000005DAD                 cmp     ebp, eax
.text:0000000000005DAF                 jz      short loc_5DC9
.text:0000000000005DB1                 xor     ebx, ebx
.text:0000000000005DB3                 test    eax, eax
.text:0000000000005DB5                 js      short loc_5DC9
.text:0000000000005DB7                 mov     edi, eax        ; fd
.text:0000000000005DB9                 call    _close
.text:0000000000005DBE                 call    ___errno_location
.text:0000000000005DC3                 mov     dword ptr [rax], 9
.text:0000000000005DC9
.text:0000000000005DC9 loc_5DC9:                               ; CODE XREF: protect_fd+1F↑j
.text:0000000000005DC9                                         ; protect_fd+25↑j
.text:0000000000005DC9                 add     rsp, 8
.text:0000000000005DCD                 mov     eax, ebx
.text:0000000000005DCF                 pop     rbx
.text:0000000000005DD0                 pop     rbp
.text:0000000000005DD1                 retn
.text:0000000000005DD1 ; } // starts at 5D90
.text:0000000000005DD1 protect_fd      endp
.text:0000000000005DD1
.text:0000000000005DD1 ; ---------------------------------------------------------------------------
.text:0000000000005DD2                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DE0
.text:0000000000005DE0
.text:0000000000005DE0                 public freopen_safer
.text:0000000000005DE0 freopen_safer   proc near               ; CODE XREF: main+2300↑p
.text:0000000000005DE0
.text:0000000000005DE0 filename        = qword ptr -40h
.text:0000000000005DE0
.text:0000000000005DE0 ; __unwind {
.text:0000000000005DE0                 push    r15
.text:0000000000005DE2                 push    r14
.text:0000000000005DE4                 mov     r15, rsi
.text:0000000000005DE7                 push    r13
.text:0000000000005DE9                 push    r12
.text:0000000000005DEB                 mov     r12, rdx
.text:0000000000005DEE                 push    rbp
.text:0000000000005DEF                 push    rbx
.text:0000000000005DF0                 sub     rsp, 18h
.text:0000000000005DF4                 mov     [rsp+48h+filename], rdi
.text:0000000000005DF9                 mov     rdi, rdx        ; stream
.text:0000000000005DFC                 call    _fileno
.text:0000000000005E01                 mov     ebx, eax
.text:0000000000005E03                 call    ___errno_location
.text:0000000000005E08                 cmp     ebx, 1
.text:0000000000005E0B                 mov     r14, rax
.text:0000000000005E0E                 jz      loc_5F70
.text:0000000000005E14                 cmp     ebx, 2
.text:0000000000005E17                 jz      loc_5F60
.text:0000000000005E1D                 test    ebx, ebx
.text:0000000000005E1F                 jz      loc_5ED8
.text:0000000000005E25                 mov     esi, 2          ; fd2
.text:0000000000005E2A                 mov     edi, 2          ; fd
.text:0000000000005E2F                 call    _dup2
.text:0000000000005E34                 cmp     eax, 2
.text:0000000000005E37                 setnz   bl
.text:0000000000005E3A
.text:0000000000005E3A loc_5E3A:                               ; CODE XREF: freopen_safer+182↓j
.text:0000000000005E3A                 mov     esi, 1          ; fd2
.text:0000000000005E3F                 mov     edi, 1          ; fd
.text:0000000000005E44                 call    _dup2
.text:0000000000005E49                 cmp     eax, 1
.text:0000000000005E4C                 setnz   bpl
.text:0000000000005E50
.text:0000000000005E50 loc_5E50:                               ; CODE XREF: freopen_safer+194↓j
.text:0000000000005E50                 xor     esi, esi        ; fd2
.text:0000000000005E52                 xor     edi, edi        ; fd
.text:0000000000005E54                 call    _dup2
.text:0000000000005E59                 test    eax, eax
.text:0000000000005E5B                 jz      loc_5EE8
.text:0000000000005E61                 xor     edi, edi
.text:0000000000005E63                 call    protect_fd
.text:0000000000005E68                 test    al, al
.text:0000000000005E6A                 mov     r13d, eax
.text:0000000000005E6D                 jz      loc_5F80
.text:0000000000005E73                 test    bpl, bpl
.text:0000000000005E76                 jnz     short loc_5EF0
.text:0000000000005E78
.text:0000000000005E78 loc_5E78:                               ; CODE XREF: freopen_safer+10E↓j
.text:0000000000005E78                                         ; freopen_safer+11E↓j
.text:0000000000005E78                 test    bl, bl
.text:0000000000005E7A                 jz      short loc_5E90
.text:0000000000005E7C                 mov     edi, 2
.text:0000000000005E81                 call    protect_fd
.text:0000000000005E86                 test    al, al
.text:0000000000005E88                 mov     ebx, eax
.text:0000000000005E8A                 jz      loc_5F40
.text:0000000000005E90
.text:0000000000005E90 loc_5E90:                               ; CODE XREF: freopen_safer+9A↑j
.text:0000000000005E90                                         ; freopen_safer+FF↓j
.text:0000000000005E90                 mov     rdi, [rsp+48h+filename] ; filename
.text:0000000000005E95                 mov     rdx, r12        ; stream
.text:0000000000005E98                 mov     rsi, r15        ; modes
.text:0000000000005E9B                 call    _freopen
.text:0000000000005EA0                 mov     r12, rax
.text:0000000000005EA3
.text:0000000000005EA3 loc_5EA3:                               ; CODE XREF: freopen_safer+1A9↓j
.text:0000000000005EA3                 test    bl, bl
.text:0000000000005EA5                 mov     r15d, [r14]
.text:0000000000005EA8                 jnz     loc_5F50
.text:0000000000005EAE
.text:0000000000005EAE loc_5EAE:                               ; CODE XREF: freopen_safer+17A↓j
.text:0000000000005EAE                 test    bpl, bpl
.text:0000000000005EB1                 jnz     short loc_5F20
.text:0000000000005EB3                 test    r13b, r13b
.text:0000000000005EB6                 jnz     short loc_5F2F
.text:0000000000005EB8
.text:0000000000005EB8 loc_5EB8:                               ; CODE XREF: freopen_safer+14D↓j
.text:0000000000005EB8                                         ; freopen_safer+156↓j
.text:0000000000005EB8                 test    r12, r12
.text:0000000000005EBB                 jnz     short loc_5EC0
.text:0000000000005EBD                 mov     [r14], r15d
.text:0000000000005EC0
.text:0000000000005EC0 loc_5EC0:                               ; CODE XREF: freopen_safer+DB↑j
.text:0000000000005EC0                 add     rsp, 18h
.text:0000000000005EC4                 mov     rax, r12
.text:0000000000005EC7                 pop     rbx
.text:0000000000005EC8                 pop     rbp
.text:0000000000005EC9                 pop     r12
.text:0000000000005ECB                 pop     r13
.text:0000000000005ECD                 pop     r14
.text:0000000000005ECF                 pop     r15
.text:0000000000005ED1                 retn
.text:0000000000005ED1 ; ---------------------------------------------------------------------------
.text:0000000000005ED2                 align 8
.text:0000000000005ED8
.text:0000000000005ED8 loc_5ED8:                               ; CODE XREF: freopen_safer+3F↑j
.text:0000000000005ED8                 xor     ebx, ebx
.text:0000000000005EDA                 xor     ebp, ebp
.text:0000000000005EDC                 xor     r13d, r13d
.text:0000000000005EDF                 jmp     short loc_5E90
.text:0000000000005EDF ; ---------------------------------------------------------------------------
.text:0000000000005EE1                 align 8
.text:0000000000005EE8
.text:0000000000005EE8 loc_5EE8:                               ; CODE XREF: freopen_safer+7B↑j
.text:0000000000005EE8                 xor     r13d, r13d
.text:0000000000005EEB                 test    bpl, bpl
.text:0000000000005EEE                 jz      short loc_5E78
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: freopen_safer+96↑j
.text:0000000000005EF0                 mov     edi, 1
.text:0000000000005EF5                 call    protect_fd
.text:0000000000005EFA                 test    al, al
.text:0000000000005EFC                 mov     ebp, eax
.text:0000000000005EFE                 jnz     loc_5E78
.text:0000000000005F04                 xor     r12d, r12d
.text:0000000000005F07                 test    bl, bl
.text:0000000000005F09                 mov     r15d, [r14]
.text:0000000000005F0C                 jz      short loc_5F20
.text:0000000000005F0E                 mov     edi, 2          ; fd
.text:0000000000005F13                 call    _close
.text:0000000000005F18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005F20
.text:0000000000005F20 loc_5F20:                               ; CODE XREF: freopen_safer+D1↑j
.text:0000000000005F20                                         ; freopen_safer+12C↑j
.text:0000000000005F20                 mov     edi, 1          ; fd
.text:0000000000005F25                 call    _close
.text:0000000000005F2A                 test    r13b, r13b
.text:0000000000005F2D                 jz      short loc_5EB8
.text:0000000000005F2F
.text:0000000000005F2F loc_5F2F:                               ; CODE XREF: freopen_safer+D6↑j
.text:0000000000005F2F                 xor     edi, edi        ; fd
.text:0000000000005F31                 call    _close
.text:0000000000005F36                 jmp     short loc_5EB8
.text:0000000000005F36 ; ---------------------------------------------------------------------------
.text:0000000000005F38                 align 20h
.text:0000000000005F40
.text:0000000000005F40 loc_5F40:                               ; CODE XREF: freopen_safer+AA↑j
.text:0000000000005F40                 mov     r15d, [r14]
.text:0000000000005F43                 xor     r12d, r12d
.text:0000000000005F46                 db      2Eh
.text:0000000000005F46                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005F50
.text:0000000000005F50 loc_5F50:                               ; CODE XREF: freopen_safer+C8↑j
.text:0000000000005F50                 mov     edi, 2          ; fd
.text:0000000000005F55                 call    _close
.text:0000000000005F5A                 jmp     loc_5EAE
.text:0000000000005F5A ; ---------------------------------------------------------------------------
.text:0000000000005F5F                 align 20h
.text:0000000000005F60
.text:0000000000005F60 loc_5F60:                               ; CODE XREF: freopen_safer+37↑j
.text:0000000000005F60                 xor     ebx, ebx
.text:0000000000005F62                 jmp     loc_5E3A
.text:0000000000005F62 ; ---------------------------------------------------------------------------
.text:0000000000005F67                 align 10h
.text:0000000000005F70
.text:0000000000005F70 loc_5F70:                               ; CODE XREF: freopen_safer+2E↑j
.text:0000000000005F70                 xor     ebx, ebx
.text:0000000000005F72                 xor     ebp, ebp
.text:0000000000005F74                 jmp     loc_5E50
.text:0000000000005F74 ; ---------------------------------------------------------------------------
.text:0000000000005F79                 align 20h
.text:0000000000005F80
.text:0000000000005F80 loc_5F80:                               ; CODE XREF: freopen_safer+8D↑j
.text:0000000000005F80                 mov     r13d, 1
.text:0000000000005F86                 xor     r12d, r12d
.text:0000000000005F89                 jmp     loc_5EA3
.text:0000000000005F89 ; } // starts at 5DE0
.text:0000000000005F89 freopen_safer   endp
.text:0000000000005F89
.text:0000000000005F89 ; ---------------------------------------------------------------------------
.text:0000000000005F8E                 align 10h
.text:0000000000005F90
.text:0000000000005F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F90
.text:0000000000005F90
.text:0000000000005F90                 public set_program_name
.text:0000000000005F90 set_program_name proc near              ; CODE XREF: main+46↑p
.text:0000000000005F90 ; __unwind {
.text:0000000000005F90                 test    rdi, rdi
.text:0000000000005F93                 push    rbx
.text:0000000000005F94                 jz      short loc_600D
.text:0000000000005F96                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000005F9B                 mov     rbx, rdi
.text:0000000000005F9E                 call    _strrchr
.text:0000000000005FA3                 test    rax, rax
.text:0000000000005FA6                 jz      short loc_5FFD
.text:0000000000005FA8                 lea     r8, [rax+1]
.text:0000000000005FAC                 mov     rdx, r8
.text:0000000000005FAF                 sub     rdx, rbx
.text:0000000000005FB2                 cmp     rdx, 6
.text:0000000000005FB6                 jle     short loc_5FFD
.text:0000000000005FB8                 lea     rsi, [rax-6]
.text:0000000000005FBC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000005FC3                 mov     ecx, 7
.text:0000000000005FC8                 repe cmpsb
.text:0000000000005FCA                 setnbe  dl
.text:0000000000005FCD                 sbb     dl, 0
.text:0000000000005FD0                 test    dl, dl
.text:0000000000005FD2                 jnz     short loc_5FFD
.text:0000000000005FD4                 lea     rdi, aLt        ; "lt-"
.text:0000000000005FDB                 mov     ecx, 3
.text:0000000000005FE0                 mov     rsi, r8
.text:0000000000005FE3                 mov     rbx, r8
.text:0000000000005FE6                 repe cmpsb
.text:0000000000005FE8                 setnbe  dl
.text:0000000000005FEB                 sbb     dl, 0
.text:0000000000005FEE                 test    dl, dl
.text:0000000000005FF0                 jnz     short loc_5FFD
.text:0000000000005FF2                 lea     rbx, [rax+4]
.text:0000000000005FF6                 mov     cs:__bss_start, rbx
.text:0000000000005FFD
.text:0000000000005FFD loc_5FFD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000005FFD                                         ; set_program_name+26↑j ...
.text:0000000000005FFD                 mov     cs:program_name, rbx
.text:0000000000006004                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000600B                 pop     rbx
.text:000000000000600C                 retn
.text:000000000000600D ; ---------------------------------------------------------------------------
.text:000000000000600D
.text:000000000000600D loc_600D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000600D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000006014                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000601B                 mov     edx, 37h ; '7'  ; n
.text:0000000000006020                 mov     esi, 1          ; size
.text:0000000000006025                 call    _fwrite
.text:000000000000602A                 call    _abort
.text:000000000000602A ; } // starts at 5F90
.text:000000000000602A set_program_name endp
.text:000000000000602A
.text:000000000000602A ; ---------------------------------------------------------------------------
.text:000000000000602F                 align 10h
.text:0000000000006030
.text:0000000000006030 ; =============== S U B R O U T I N E =======================================
.text:0000000000006030
.text:0000000000006030
.text:0000000000006030 mbsstr_trimmed_wordbounded proc near    ; CODE XREF: proper_name+24↓p
.text:0000000000006030                                         ; proper_name_utf8+C7↓p ...
.text:0000000000006030
.text:0000000000006030 s               = qword ptr -0E0h
.text:0000000000006030 var_D8          = qword ptr -0D8h
.text:0000000000006030 var_D0          = qword ptr -0D0h
.text:0000000000006030 var_C8          = byte ptr -0C8h
.text:0000000000006030 var_BC          = byte ptr -0BCh
.text:0000000000006030 var_B8          = qword ptr -0B8h
.text:0000000000006030 var_B0          = qword ptr -0B0h
.text:0000000000006030 var_A8          = byte ptr -0A8h
.text:0000000000006030 var_A4          = dword ptr -0A4h
.text:0000000000006030 var_88          = byte ptr -88h
.text:0000000000006030 var_7C          = byte ptr -7Ch
.text:0000000000006030 var_78          = qword ptr -78h
.text:0000000000006030 var_70          = qword ptr -70h
.text:0000000000006030 var_68          = byte ptr -68h
.text:0000000000006030 var_64          = dword ptr -64h
.text:0000000000006030 var_40          = qword ptr -40h
.text:0000000000006030
.text:0000000000006030 ; __unwind {
.text:0000000000006030                 push    r15
.text:0000000000006032                 push    r14
.text:0000000000006034                 mov     r15, rdi
.text:0000000000006037                 push    r13
.text:0000000000006039                 push    r12
.text:000000000000603B                 mov     rdi, rsi
.text:000000000000603E                 push    rbp
.text:000000000000603F                 push    rbx
.text:0000000000006040                 mov     esi, 2
.text:0000000000006045                 lea     r13, is_basic_table
.text:000000000000604C                 sub     rsp, 0B8h
.text:0000000000006053                 lea     rbx, [rsp+0E8h+var_C8]
.text:0000000000006058                 lea     r12, [rsp+0E8h+var_88]
.text:000000000000605D                 mov     rax, fs:28h
.text:0000000000006066                 mov     [rsp+0E8h+var_40], rax
.text:000000000000606E                 xor     eax, eax
.text:0000000000006070                 lea     r14, [rbx+24h]
.text:0000000000006074                 call    trim2
.text:0000000000006079                 mov     [rsp+0E8h+s], rax
.text:000000000000607E                 xchg    ax, ax
.text:0000000000006080
.text:0000000000006080 loc_6080:                               ; CODE XREF: mbsstr_trimmed_wordbounded+583↓j
.text:0000000000006080                 cmp     byte ptr [r15], 0
.text:0000000000006084                 jz      short loc_6105
.text:0000000000006086
.text:0000000000006086 loc_6086:                               ; CODE XREF: mbsstr_trimmed_wordbounded+D3↓j
.text:0000000000006086                 mov     rsi, [rsp+0E8h+s]
.text:000000000000608B                 mov     rdi, r15
.text:000000000000608E                 call    mbsstr
.text:0000000000006093                 test    rax, rax
.text:0000000000006096                 mov     rbp, rax
.text:0000000000006099                 jz      short loc_6105
.text:000000000000609B                 call    ___ctype_get_mb_cur_max
.text:00000000000060A0                 cmp     rax, 1
.text:00000000000060A4                 ja      loc_6148
.text:00000000000060AA                 cmp     r15, rbp
.text:00000000000060AD                 jnb     loc_6718
.text:00000000000060B3                 call    ___ctype_b_loc
.text:00000000000060B8                 movzx   edx, byte ptr [rbp-1]
.text:00000000000060BC                 mov     rax, [rax]
.text:00000000000060BF                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000060C4                 movzx   r15d, word ptr [rax+rdx*2]
.text:00000000000060C9                 shr     r15w, 3
.text:00000000000060CE                 xor     r15d, 1
.text:00000000000060D2                 mov     eax, r15d
.text:00000000000060D5                 and     eax, 1
.text:00000000000060D8                 mov     byte ptr [rsp+0E8h+var_D8], al
.text:00000000000060DC                 call    _strlen
.text:00000000000060E1                 movzx   edx, byte ptr [rbp+rax+0]
.text:00000000000060E6                 test    dl, dl
.text:00000000000060E8                 jnz     loc_6734
.text:00000000000060EE
.text:00000000000060EE loc_60EE:                               ; CODE XREF: mbsstr_trimmed_wordbounded+71F↓j
.text:00000000000060EE                 cmp     byte ptr [rsp+0E8h+var_D8], 0
.text:00000000000060F3                 jnz     short loc_610A
.text:00000000000060F5
.text:00000000000060F5 loc_60F5:                               ; CODE XREF: mbsstr_trimmed_wordbounded+719↓j
.text:00000000000060F5                 cmp     byte ptr [rbp+0], 0
.text:00000000000060F9                 jz      short loc_6105
.text:00000000000060FB                 lea     r15, [rbp+1]
.text:00000000000060FF                 cmp     byte ptr [r15], 0
.text:0000000000006103                 jnz     short loc_6086
.text:0000000000006105
.text:0000000000006105 loc_6105:                               ; CODE XREF: mbsstr_trimmed_wordbounded+54↑j
.text:0000000000006105                                         ; mbsstr_trimmed_wordbounded+69↑j ...
.text:0000000000006105                 mov     byte ptr [rsp+0E8h+var_D8], 0
.text:000000000000610A
.text:000000000000610A loc_610A:                               ; CODE XREF: mbsstr_trimmed_wordbounded+C3↑j
.text:000000000000610A                                         ; mbsstr_trimmed_wordbounded+519↓j ...
.text:000000000000610A                 mov     rdi, [rsp+0E8h+s] ; ptr
.text:000000000000610F                 call    _free
.text:0000000000006114                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000611C                 xor     rbx, fs:28h
.text:0000000000006125                 movzx   eax, byte ptr [rsp+0E8h+var_D8]
.text:000000000000612A                 jnz     loc_6976
.text:0000000000006130                 add     rsp, 0B8h
.text:0000000000006137                 pop     rbx
.text:0000000000006138                 pop     rbp
.text:0000000000006139                 pop     r12
.text:000000000000613B                 pop     r13
.text:000000000000613D                 pop     r14
.text:000000000000613F                 pop     r15
.text:0000000000006141                 retn
.text:0000000000006141 ; ---------------------------------------------------------------------------
.text:0000000000006142                 align 8
.text:0000000000006148
.text:0000000000006148 loc_6148:                               ; CODE XREF: mbsstr_trimmed_wordbounded+74↑j
.text:0000000000006148                 cmp     r15, rbp
.text:000000000000614B                 mov     [rsp+0E8h+var_B8], r15
.text:0000000000006150                 mov     [rsp+0E8h+var_C8], 0
.text:0000000000006155                 mov     qword ptr [rbx+4], 0
.text:000000000000615D                 mov     [rsp+0E8h+var_BC], 0
.text:0000000000006162                 jb      short loc_61D7
.text:0000000000006164                 jmp     loc_6708
.text:0000000000006164 ; ---------------------------------------------------------------------------
.text:0000000000006169                 align 10h
.text:0000000000006170
.text:0000000000006170 loc_6170:                               ; CODE XREF: mbsstr_trimmed_wordbounded+1AC↓j
.text:0000000000006170                 mov     r15, [rsp+0E8h+var_B8]
.text:0000000000006175                 movzx   edx, byte ptr [r15]
.text:0000000000006179                 mov     eax, edx
.text:000000000000617B                 shr     al, 5
.text:000000000000617E                 and     eax, 7
.text:0000000000006181                 mov     eax, [r13+rax*4+0]
.text:0000000000006186                 bt      eax, edx
.text:0000000000006189                 jnb     loc_6278
.text:000000000000618F                 mov     [rsp+0E8h+var_B0], 1
.text:0000000000006198                 movsx   edx, byte ptr [r15]
.text:000000000000619C                 mov     [rsp+0E8h+var_A8], 1
.text:00000000000061A1                 mov     [rsp+0E8h+var_BC], 1
.text:00000000000061A6                 mov     [rsp+0E8h+var_A4], edx
.text:00000000000061AA
.text:00000000000061AA loc_61AA:                               ; CODE XREF: mbsstr_trimmed_wordbounded+23F↓j
.text:00000000000061AA                                         ; mbsstr_trimmed_wordbounded+2B5↓j
.text:00000000000061AA                 test    edx, edx
.text:00000000000061AC                 jz      loc_6952
.text:00000000000061B2                 mov     r15, [rsp+0E8h+var_B8]
.text:00000000000061B7
.text:00000000000061B7 loc_61B7:                               ; CODE XREF: mbsstr_trimmed_wordbounded+27F↓j
.text:00000000000061B7                                         ; mbsstr_trimmed_wordbounded+2A3↓j
.text:00000000000061B7                 mov     rax, [rsp+0E8h+var_B0]
.text:00000000000061BC                 movzx   ecx, [rsp+0E8h+var_A8]
.text:00000000000061C1                 mov     [rsp+0E8h+var_BC], 0
.text:00000000000061C6                 add     rax, r15
.text:00000000000061C9                 cmp     rax, rbp
.text:00000000000061CC                 mov     [rsp+0E8h+var_B8], rax
.text:00000000000061D1                 jnb     loc_6300
.text:00000000000061D7
.text:00000000000061D7 loc_61D7:                               ; CODE XREF: mbsstr_trimmed_wordbounded+132↑j
.text:00000000000061D7                 cmp     [rsp+0E8h+var_C8], 0
.text:00000000000061DC                 jz      short loc_6170
.text:00000000000061DE
.text:00000000000061DE loc_61DE:                               ; CODE XREF: mbsstr_trimmed_wordbounded+25E↓j
.text:00000000000061DE                 call    ___ctype_get_mb_cur_max
.text:00000000000061E3                 mov     r15, [rsp+0E8h+var_B8]
.text:00000000000061E8                 mov     rsi, rax
.text:00000000000061EB                 mov     rdi, r15
.text:00000000000061EE                 call    strnlen1
.text:00000000000061F3                 lea     rcx, [rbx+4]
.text:00000000000061F7                 mov     rdx, rax
.text:00000000000061FA                 mov     rsi, r15
.text:00000000000061FD                 mov     rdi, r14
.text:0000000000006200                 call    rpl_mbrtowc
.text:0000000000006205                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006209                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000620E                 jz      loc_6298
.text:0000000000006214                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006218                 jz      loc_62B8
.text:000000000000621E                 test    rax, rax
.text:0000000000006221                 jnz     loc_62F0
.text:0000000000006227                 mov     r15, [rsp+0E8h+var_B8]
.text:000000000000622C                 mov     [rsp+0E8h+var_B0], 1
.text:0000000000006235                 cmp     byte ptr [r15], 0
.text:0000000000006239                 jnz     loc_697B
.text:000000000000623F                 mov     edx, [rsp+0E8h+var_A4]
.text:0000000000006243                 test    edx, edx
.text:0000000000006245                 jnz     loc_68FC
.text:000000000000624B
.text:000000000000624B loc_624B:                               ; CODE XREF: mbsstr_trimmed_wordbounded+2C4↓j
.text:000000000000624B                 lea     rdi, [rbx+4]    ; ps
.text:000000000000624F                 mov     dword ptr [rsp+0E8h+var_D8], edx
.text:0000000000006253                 mov     [rsp+0E8h+var_A8], 1
.text:0000000000006258                 call    _mbsinit
.text:000000000000625D                 test    eax, eax
.text:000000000000625F                 mov     edx, dword ptr [rsp+0E8h+var_D8]
.text:0000000000006263                 jz      short loc_62E0
.text:0000000000006265                 mov     [rsp+0E8h+var_C8], 0
.text:000000000000626A                 mov     [rsp+0E8h+var_BC], 1
.text:000000000000626F                 jmp     loc_61AA
.text:000000000000626F ; ---------------------------------------------------------------------------
.text:0000000000006274                 align 8
.text:0000000000006278
.text:0000000000006278 loc_6278:                               ; CODE XREF: mbsstr_trimmed_wordbounded+159↑j
.text:0000000000006278                 lea     rdi, [rbx+4]    ; ps
.text:000000000000627C                 call    _mbsinit
.text:0000000000006281                 test    eax, eax
.text:0000000000006283                 jz      loc_6957
.text:0000000000006289                 mov     [rsp+0E8h+var_C8], 1
.text:000000000000628E                 jmp     loc_61DE
.text:000000000000628E ; ---------------------------------------------------------------------------
.text:0000000000006293                 align 8
.text:0000000000006298
.text:0000000000006298 loc_6298:                               ; CODE XREF: mbsstr_trimmed_wordbounded+1DE↑j
.text:0000000000006298                 mov     [rsp+0E8h+var_B0], 1
.text:00000000000062A1                 mov     [rsp+0E8h+var_A8], 0
.text:00000000000062A6                 mov     edx, [rsp+0E8h+var_A4]
.text:00000000000062AA                 mov     r15, [rsp+0E8h+var_B8]
.text:00000000000062AF                 jmp     loc_61B7
.text:00000000000062AF ; ---------------------------------------------------------------------------
.text:00000000000062B4                 align 8
.text:00000000000062B8
.text:00000000000062B8 loc_62B8:                               ; CODE XREF: mbsstr_trimmed_wordbounded+1E8↑j
.text:00000000000062B8                 mov     r15, [rsp+0E8h+var_B8]
.text:00000000000062BD                 mov     rdi, r15        ; s
.text:00000000000062C0                 call    _strlen
.text:00000000000062C5                 mov     [rsp+0E8h+var_A8], 0
.text:00000000000062CA                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000062CF                 mov     edx, [rsp+0E8h+var_A4]
.text:00000000000062D3                 jmp     loc_61B7
.text:00000000000062D3 ; ---------------------------------------------------------------------------
.text:00000000000062D8                 align 20h
.text:00000000000062E0
.text:00000000000062E0 loc_62E0:                               ; CODE XREF: mbsstr_trimmed_wordbounded+233↑j
.text:00000000000062E0                 mov     [rsp+0E8h+var_BC], 1
.text:00000000000062E5                 jmp     loc_61AA
.text:00000000000062E5 ; ---------------------------------------------------------------------------
.text:00000000000062EA                 align 10h
.text:00000000000062F0
.text:00000000000062F0 loc_62F0:                               ; CODE XREF: mbsstr_trimmed_wordbounded+1F1↑j
.text:00000000000062F0                 mov     edx, [rsp+0E8h+var_A4]
.text:00000000000062F4                 jmp     loc_624B
.text:00000000000062F4 ; ---------------------------------------------------------------------------
.text:00000000000062F9                 align 20h
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: mbsstr_trimmed_wordbounded+1A1↑j
.text:0000000000006300                 test    cl, cl
.text:0000000000006302                 jz      loc_6708
.text:0000000000006308                 mov     edi, edx        ; wc
.text:000000000000630A                 call    _iswalnum
.text:000000000000630F                 test    eax, eax
.text:0000000000006311                 setz    byte ptr [rsp+0E8h+var_D8]
.text:0000000000006316
.text:0000000000006316 loc_6316:                               ; CODE XREF: mbsstr_trimmed_wordbounded+6DD↓j
.text:0000000000006316                 mov     rax, [rsp+0E8h+s]
.text:000000000000631B                 mov     [rsp+0E8h+var_B8], rbp
.text:0000000000006320                 mov     [rsp+0E8h+var_C8], 0
.text:0000000000006325                 mov     qword ptr [rbx+4], 0
.text:000000000000632D                 mov     [rsp+0E8h+var_BC], 0
.text:0000000000006332                 mov     [rsp+0E8h+var_88], 0
.text:0000000000006337                 mov     [rsp+0E8h+var_78], rax
.text:000000000000633C                 mov     qword ptr [r12+4], 0
.text:0000000000006345                 mov     [rsp+0E8h+var_7C], 0
.text:000000000000634A                 jmp     short loc_63BD
.text:000000000000634A ; ---------------------------------------------------------------------------
.text:000000000000634C                 align 10h
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: mbsstr_trimmed_wordbounded+3E2↓j
.text:0000000000006350                 cmp     [rsp+0E8h+var_C8], 0
.text:0000000000006355                 jnz     loc_65D6
.text:000000000000635B                 mov     rcx, [rsp+0E8h+var_B8]
.text:0000000000006360                 movzx   edx, byte ptr [rcx]
.text:0000000000006363                 mov     eax, edx
.text:0000000000006365                 shr     al, 5
.text:0000000000006368                 and     eax, 7
.text:000000000000636B                 mov     eax, [r13+rax*4+0]
.text:0000000000006370                 bt      eax, edx
.text:0000000000006373                 jnb     loc_65C0
.text:0000000000006379                 mov     [rsp+0E8h+var_B0], 1
.text:0000000000006382                 movsx   eax, byte ptr [rcx]
.text:0000000000006385                 mov     [rsp+0E8h+var_A8], 1
.text:000000000000638A                 mov     [rsp+0E8h+var_BC], 1
.text:000000000000638F                 mov     [rsp+0E8h+var_A4], eax
.text:0000000000006393
.text:0000000000006393 loc_6393:                               ; CODE XREF: mbsstr_trimmed_wordbounded+3EF↓j
.text:0000000000006393                                         ; mbsstr_trimmed_wordbounded+630↓j ...
.text:0000000000006393                 mov     edi, [rsp+0E8h+var_A4]
.text:0000000000006397                 test    edi, edi
.text:0000000000006399                 jz      loc_6952
.text:000000000000639F
.text:000000000000639F loc_639F:                               ; CODE XREF: mbsstr_trimmed_wordbounded+3ED↓j
.text:000000000000639F                                         ; mbsstr_trimmed_wordbounded+666↓j ...
.text:000000000000639F                 mov     rax, [rsp+0E8h+var_B0]
.text:00000000000063A4                 add     [rsp+0E8h+var_B8], rax
.text:00000000000063A9                 mov     rax, [rsp+0E8h+var_70]
.text:00000000000063AE                 add     [rsp+0E8h+var_78], rax
.text:00000000000063B3                 mov     [rsp+0E8h+var_BC], 0
.text:00000000000063B8                 mov     [rsp+0E8h+var_7C], 0
.text:00000000000063BD
.text:00000000000063BD loc_63BD:                               ; CODE XREF: mbsstr_trimmed_wordbounded+31A↑j
.text:00000000000063BD                 cmp     [rsp+0E8h+var_88], 0
.text:00000000000063C2                 jnz     short loc_643F
.text:00000000000063C4                 mov     rcx, [rsp+0E8h+var_78]
.text:00000000000063C9                 movzx   edx, byte ptr [rcx]
.text:00000000000063CC                 mov     eax, edx
.text:00000000000063CE                 shr     al, 5
.text:00000000000063D1                 and     eax, 7
.text:00000000000063D4                 mov     eax, [r13+rax*4+0]
.text:00000000000063D9                 bt      eax, edx
.text:00000000000063DC                 jnb     short loc_6428
.text:00000000000063DE                 mov     [rsp+0E8h+var_70], 1
.text:00000000000063E7                 movsx   eax, byte ptr [rcx]
.text:00000000000063EA                 mov     [rsp+0E8h+var_68], 1
.text:00000000000063F2                 mov     [rsp+0E8h+var_7C], 1
.text:00000000000063F7                 mov     [rsp+0E8h+var_64], eax
.text:00000000000063FE
.text:00000000000063FE loc_63FE:                               ; CODE XREF: mbsstr_trimmed_wordbounded+69D↓j
.text:00000000000063FE                 mov     ecx, [rsp+0E8h+var_64]
.text:0000000000006405                 test    ecx, ecx
.text:0000000000006407                 jz      loc_64E0
.text:000000000000640D
.text:000000000000640D loc_640D:                               ; CODE XREF: mbsstr_trimmed_wordbounded+4AA↓j
.text:000000000000640D                                         ; mbsstr_trimmed_wordbounded+64E↓j ...
.text:000000000000640D                 cmp     [rsp+0E8h+var_BC], 0
.text:0000000000006412                 jz      loc_6350
.text:0000000000006418                 cmp     [rsp+0E8h+var_A8], 0
.text:000000000000641D                 jz      short loc_639F
.text:000000000000641F                 jmp     loc_6393
.text:000000000000641F ; ---------------------------------------------------------------------------
.text:0000000000006424                 align 8
.text:0000000000006428
.text:0000000000006428 loc_6428:                               ; CODE XREF: mbsstr_trimmed_wordbounded+3AC↑j
.text:0000000000006428                 lea     rdi, [r12+4]    ; ps
.text:000000000000642D                 call    _mbsinit
.text:0000000000006432                 test    eax, eax
.text:0000000000006434                 jz      loc_6957
.text:000000000000643A                 mov     [rsp+0E8h+var_88], 1
.text:000000000000643F
.text:000000000000643F loc_643F:                               ; CODE XREF: mbsstr_trimmed_wordbounded+392↑j
.text:000000000000643F                 call    ___ctype_get_mb_cur_max
.text:0000000000006444                 mov     r15, [rsp+0E8h+var_78]
.text:0000000000006449                 mov     rsi, rax
.text:000000000000644C                 mov     rdi, r15
.text:000000000000644F                 call    strnlen1
.text:0000000000006454                 lea     rcx, [r12+4]
.text:0000000000006459                 lea     rdi, [r12+24h]
.text:000000000000645E                 mov     rdx, rax
.text:0000000000006461                 mov     rsi, r15
.text:0000000000006464                 call    rpl_mbrtowc
.text:0000000000006469                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000646D                 mov     [rsp+0E8h+var_70], rax
.text:0000000000006472                 jz      loc_6668
.text:0000000000006478                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000647C                 jz      loc_66A0
.text:0000000000006482                 test    rax, rax
.text:0000000000006485                 jnz     short loc_64AD
.text:0000000000006487                 mov     rax, [rsp+0E8h+var_78]
.text:000000000000648C                 mov     [rsp+0E8h+var_70], 1
.text:0000000000006495                 cmp     byte ptr [rax], 0
.text:0000000000006498                 jnz     loc_697B
.text:000000000000649E                 mov     esi, [rsp+0E8h+var_64]
.text:00000000000064A5                 test    esi, esi
.text:00000000000064A7                 jnz     loc_68FC
.text:00000000000064AD
.text:00000000000064AD loc_64AD:                               ; CODE XREF: mbsstr_trimmed_wordbounded+455↑j
.text:00000000000064AD                 lea     rdi, [r12+4]    ; ps
.text:00000000000064B2                 mov     [rsp+0E8h+var_68], 1
.text:00000000000064BA                 call    _mbsinit
.text:00000000000064BF                 test    eax, eax
.text:00000000000064C1                 jz      loc_66C8
.text:00000000000064C7                 mov     ecx, [rsp+0E8h+var_64]
.text:00000000000064CE                 mov     [rsp+0E8h+var_88], 0
.text:00000000000064D3                 mov     [rsp+0E8h+var_7C], 1
.text:00000000000064D8                 test    ecx, ecx
.text:00000000000064DA                 jnz     loc_640D
.text:00000000000064E0
.text:00000000000064E0 loc_64E0:                               ; CODE XREF: mbsstr_trimmed_wordbounded+3D7↑j
.text:00000000000064E0                 cmp     [rsp+0E8h+var_BC], 0
.text:00000000000064E5                 jnz     loc_6758
.text:00000000000064EB                 cmp     [rsp+0E8h+var_C8], 0
.text:00000000000064F0                 jnz     loc_6782
.text:00000000000064F6                 mov     rcx, [rsp+0E8h+var_B8]
.text:00000000000064FB                 movzx   edx, byte ptr [rcx]
.text:00000000000064FE                 mov     eax, edx
.text:0000000000006500                 shr     al, 5
.text:0000000000006503                 and     eax, 7
.text:0000000000006506                 mov     eax, [r13+rax*4+0]
.text:000000000000650B                 bt      eax, edx
.text:000000000000650E                 jnb     loc_676C
.text:0000000000006514                 mov     [rsp+0E8h+var_B0], 1
.text:000000000000651D                 movsx   edx, byte ptr [rcx]
.text:0000000000006520                 mov     [rsp+0E8h+var_A8], 1
.text:0000000000006525                 mov     [rsp+0E8h+var_BC], 1
.text:000000000000652A                 mov     [rsp+0E8h+var_A4], edx
.text:000000000000652E
.text:000000000000652E loc_652E:                               ; CODE XREF: mbsstr_trimmed_wordbounded+737↓j
.text:000000000000652E                                         ; mbsstr_trimmed_wordbounded+7D1↓j ...
.text:000000000000652E                 test    edx, edx
.text:0000000000006530                 jz      short loc_6544
.text:0000000000006532
.text:0000000000006532 loc_6532:                               ; CODE XREF: mbsstr_trimmed_wordbounded+731↓j
.text:0000000000006532                                         ; mbsstr_trimmed_wordbounded+896↓j ...
.text:0000000000006532                 cmp     [rsp+0E8h+var_A8], 0
.text:0000000000006537                 jz      short loc_6544
.text:0000000000006539                 mov     edi, edx        ; wc
.text:000000000000653B                 call    _iswalnum
.text:0000000000006540                 test    eax, eax
.text:0000000000006542                 jnz     short loc_654F
.text:0000000000006544
.text:0000000000006544 loc_6544:                               ; CODE XREF: mbsstr_trimmed_wordbounded+500↑j
.text:0000000000006544                                         ; mbsstr_trimmed_wordbounded+507↑j
.text:0000000000006544                 cmp     byte ptr [rsp+0E8h+var_D8], 0
.text:0000000000006549                 jnz     loc_610A
.text:000000000000654F
.text:000000000000654F loc_654F:                               ; CODE XREF: mbsstr_trimmed_wordbounded+512↑j
.text:000000000000654F                 mov     [rsp+0E8h+var_B8], rbp
.text:0000000000006554                 mov     [rsp+0E8h+var_C8], 0
.text:0000000000006559                 lea     r15, [rbx+4]
.text:000000000000655D                 mov     qword ptr [rbx+4], 0
.text:0000000000006565                 mov     [rsp+0E8h+var_BC], 0
.text:000000000000656A                 movzx   edx, byte ptr [rbp+0]
.text:000000000000656E                 mov     eax, edx
.text:0000000000006570                 shr     al, 5
.text:0000000000006573                 and     eax, 7
.text:0000000000006576                 mov     eax, [r13+rax*4+0]
.text:000000000000657B                 bt      eax, edx
.text:000000000000657E                 jnb     loc_6810
.text:0000000000006584                 mov     [rsp+0E8h+var_B0], 1
.text:000000000000658D                 movsx   eax, byte ptr [rbp+0]
.text:0000000000006591                 mov     [rsp+0E8h+var_A8], 1
.text:0000000000006596                 mov     [rsp+0E8h+var_BC], 1
.text:000000000000659B                 mov     [rsp+0E8h+var_A4], eax
.text:000000000000659F
.text:000000000000659F loc_659F:                               ; CODE XREF: mbsstr_trimmed_wordbounded+87A↓j
.text:000000000000659F                                         ; mbsstr_trimmed_wordbounded+8DD↓j
.text:000000000000659F                 mov     eax, [rsp+0E8h+var_A4]
.text:00000000000065A3                 test    eax, eax
.text:00000000000065A5                 jz      loc_6105
.text:00000000000065AB
.text:00000000000065AB loc_65AB:                               ; CODE XREF: mbsstr_trimmed_wordbounded+8A4↓j
.text:00000000000065AB                                         ; mbsstr_trimmed_wordbounded+8FB↓j
.text:00000000000065AB                 mov     r15, [rsp+0E8h+var_B0]
.text:00000000000065B0                 add     r15, rbp
.text:00000000000065B3                 jmp     loc_6080
.text:00000000000065B3 ; ---------------------------------------------------------------------------
.text:00000000000065B8                 align 20h
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: mbsstr_trimmed_wordbounded+343↑j
.text:00000000000065C0                 lea     rdi, [rbx+4]    ; ps
.text:00000000000065C4                 call    _mbsinit
.text:00000000000065C9                 test    eax, eax
.text:00000000000065CB                 jz      loc_6957
.text:00000000000065D1                 mov     [rsp+0E8h+var_C8], 1
.text:00000000000065D6
.text:00000000000065D6 loc_65D6:                               ; CODE XREF: mbsstr_trimmed_wordbounded+325↑j
.text:00000000000065D6                 call    ___ctype_get_mb_cur_max
.text:00000000000065DB                 mov     r15, [rsp+0E8h+var_B8]
.text:00000000000065E0                 mov     rsi, rax
.text:00000000000065E3                 mov     rdi, r15
.text:00000000000065E6                 call    strnlen1
.text:00000000000065EB                 lea     rcx, [rbx+4]
.text:00000000000065EF                 mov     rdx, rax
.text:00000000000065F2                 mov     rsi, r15
.text:00000000000065F5                 mov     rdi, r14
.text:00000000000065F8                 call    rpl_mbrtowc
.text:00000000000065FD                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006601                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000006606                 jz      loc_6688
.text:000000000000660C                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006610                 jz      loc_66D8
.text:0000000000006616                 test    rax, rax
.text:0000000000006619                 jnz     short loc_6640
.text:000000000000661B                 mov     rax, [rsp+0E8h+var_B8]
.text:0000000000006620                 mov     [rsp+0E8h+var_B0], 1
.text:0000000000006629                 cmp     byte ptr [rax], 0
.text:000000000000662C                 jnz     loc_697B
.text:0000000000006632                 mov     r8d, [rsp+0E8h+var_A4]
.text:0000000000006637                 test    r8d, r8d
.text:000000000000663A                 jnz     loc_68FC
.text:0000000000006640
.text:0000000000006640 loc_6640:                               ; CODE XREF: mbsstr_trimmed_wordbounded+5E9↑j
.text:0000000000006640                 lea     rdi, [rbx+4]    ; ps
.text:0000000000006644                 mov     [rsp+0E8h+var_A8], 1
.text:0000000000006649                 call    _mbsinit
.text:000000000000664E                 test    eax, eax
.text:0000000000006650                 jz      loc_66F8
.text:0000000000006656                 mov     [rsp+0E8h+var_C8], 0
.text:000000000000665B                 mov     [rsp+0E8h+var_BC], 1
.text:0000000000006660                 jmp     loc_6393
.text:0000000000006660 ; ---------------------------------------------------------------------------
.text:0000000000006665                 align 8
.text:0000000000006668
.text:0000000000006668 loc_6668:                               ; CODE XREF: mbsstr_trimmed_wordbounded+442↑j
.text:0000000000006668                 mov     [rsp+0E8h+var_70], 1
.text:0000000000006671                 mov     [rsp+0E8h+var_68], 0
.text:0000000000006679                 mov     [rsp+0E8h+var_7C], 1
.text:000000000000667E                 jmp     loc_640D
.text:000000000000667E ; ---------------------------------------------------------------------------
.text:0000000000006683                 align 8
.text:0000000000006688
.text:0000000000006688 loc_6688:                               ; CODE XREF: mbsstr_trimmed_wordbounded+5D6↑j
.text:0000000000006688                 mov     [rsp+0E8h+var_B0], 1
.text:0000000000006691                 mov     [rsp+0E8h+var_A8], 0
.text:0000000000006696                 jmp     loc_639F
.text:0000000000006696 ; ---------------------------------------------------------------------------
.text:000000000000669B                 align 20h
.text:00000000000066A0
.text:00000000000066A0 loc_66A0:                               ; CODE XREF: mbsstr_trimmed_wordbounded+44C↑j
.text:00000000000066A0                 mov     rdi, [rsp+0E8h+var_78] ; s
.text:00000000000066A5                 call    _strlen
.text:00000000000066AA                 mov     [rsp+0E8h+var_68], 0
.text:00000000000066B2                 mov     [rsp+0E8h+var_70], rax
.text:00000000000066B7                 mov     [rsp+0E8h+var_7C], 1
.text:00000000000066BC                 jmp     loc_640D
.text:00000000000066BC ; ---------------------------------------------------------------------------
.text:00000000000066C1                 align 8
.text:00000000000066C8
.text:00000000000066C8 loc_66C8:                               ; CODE XREF: mbsstr_trimmed_wordbounded+491↑j
.text:00000000000066C8                 mov     [rsp+0E8h+var_7C], 1
.text:00000000000066CD                 jmp     loc_63FE
.text:00000000000066CD ; ---------------------------------------------------------------------------
.text:00000000000066D2                 align 8
.text:00000000000066D8
.text:00000000000066D8 loc_66D8:                               ; CODE XREF: mbsstr_trimmed_wordbounded+5E0↑j
.text:00000000000066D8                 mov     rdi, [rsp+0E8h+var_B8] ; s
.text:00000000000066DD                 call    _strlen
.text:00000000000066E2                 mov     [rsp+0E8h+var_A8], 0
.text:00000000000066E7                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000066EC                 jmp     loc_639F
.text:00000000000066EC ; ---------------------------------------------------------------------------
.text:00000000000066F1                 align 8
.text:00000000000066F8
.text:00000000000066F8 loc_66F8:                               ; CODE XREF: mbsstr_trimmed_wordbounded+620↑j
.text:00000000000066F8                 mov     [rsp+0E8h+var_BC], 1
.text:00000000000066FD                 jmp     loc_6393
.text:00000000000066FD ; ---------------------------------------------------------------------------
.text:0000000000006702                 align 8
.text:0000000000006708
.text:0000000000006708 loc_6708:                               ; CODE XREF: mbsstr_trimmed_wordbounded+134↑j
.text:0000000000006708                                         ; mbsstr_trimmed_wordbounded+2D2↑j
.text:0000000000006708                 mov     byte ptr [rsp+0E8h+var_D8], 1
.text:000000000000670D                 jmp     loc_6316
.text:000000000000670D ; ---------------------------------------------------------------------------
.text:0000000000006712                 align 8
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: mbsstr_trimmed_wordbounded+7D↑j
.text:0000000000006718                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000671D                 call    _strlen
.text:0000000000006722                 movzx   edx, byte ptr [rbp+rax+0]
.text:0000000000006727                 mov     byte ptr [rsp+0E8h+var_D8], 1
.text:000000000000672C                 test    dl, dl
.text:000000000000672E                 jz      loc_610A
.text:0000000000006734
.text:0000000000006734 loc_6734:                               ; CODE XREF: mbsstr_trimmed_wordbounded+B8↑j
.text:0000000000006734                 mov     byte ptr [rsp+0E8h+var_D0], dl
.text:0000000000006738                 call    ___ctype_b_loc
.text:000000000000673D                 movzx   edx, byte ptr [rsp+0E8h+var_D0]
.text:0000000000006742                 mov     rax, [rax]
.text:0000000000006745                 test    byte ptr [rax+rdx*2], 8
.text:0000000000006749                 jnz     loc_60F5
.text:000000000000674F                 jmp     loc_60EE
.text:000000000000674F ; ---------------------------------------------------------------------------
.text:0000000000006754                 align 8
.text:0000000000006758
.text:0000000000006758 loc_6758:                               ; CODE XREF: mbsstr_trimmed_wordbounded+4B5↑j
.text:0000000000006758                 cmp     [rsp+0E8h+var_A8], 0
.text:000000000000675D                 mov     edx, [rsp+0E8h+var_A4]
.text:0000000000006761                 jz      loc_6532
.text:0000000000006767                 jmp     loc_652E
.text:000000000000676C ; ---------------------------------------------------------------------------
.text:000000000000676C
.text:000000000000676C loc_676C:                               ; CODE XREF: mbsstr_trimmed_wordbounded+4DE↑j
.text:000000000000676C                 lea     rdi, [rbx+4]    ; ps
.text:0000000000006770                 call    _mbsinit
.text:0000000000006775                 test    eax, eax
.text:0000000000006777                 jz      loc_6957
.text:000000000000677D                 mov     [rsp+0E8h+var_C8], 1
.text:0000000000006782
.text:0000000000006782 loc_6782:                               ; CODE XREF: mbsstr_trimmed_wordbounded+4C0↑j
.text:0000000000006782                 call    ___ctype_get_mb_cur_max
.text:0000000000006787                 mov     r8, [rsp+0E8h+var_B8]
.text:000000000000678C                 mov     rsi, rax
.text:000000000000678F                 mov     rdi, r8
.text:0000000000006792                 mov     [rsp+0E8h+var_D0], r8
.text:0000000000006797                 call    strnlen1
.text:000000000000679C                 mov     r8, [rsp+0E8h+var_D0]
.text:00000000000067A1                 lea     rcx, [rbx+4]
.text:00000000000067A5                 mov     rdx, rax
.text:00000000000067A8                 mov     rdi, r14
.text:00000000000067AB                 mov     rsi, r8
.text:00000000000067AE                 call    rpl_mbrtowc
.text:00000000000067B3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000067B7                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000067BC                 jz      loc_68AF
.text:00000000000067C2                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000067C6                 jz      loc_6930
.text:00000000000067CC                 test    rax, rax
.text:00000000000067CF                 jz      loc_68D9
.text:00000000000067D5                 mov     edx, [rsp+0E8h+var_A4]
.text:00000000000067D9
.text:00000000000067D9 loc_67D9:                               ; CODE XREF: mbsstr_trimmed_wordbounded+8C6↓j
.text:00000000000067D9                 lea     rdi, [rbx+4]    ; ps
.text:00000000000067DD                 mov     dword ptr [rsp+0E8h+var_D0], edx
.text:00000000000067E1                 mov     [rsp+0E8h+var_A8], 1
.text:00000000000067E6                 call    _mbsinit
.text:00000000000067EB                 test    eax, eax
.text:00000000000067ED                 mov     edx, dword ptr [rsp+0E8h+var_D0]
.text:00000000000067F1                 jz      loc_6912
.text:00000000000067F7                 mov     [rsp+0E8h+var_C8], 0
.text:00000000000067FC                 mov     [rsp+0E8h+var_BC], 1
.text:0000000000006801                 jmp     loc_652E
.text:0000000000006801 ; ---------------------------------------------------------------------------
.text:0000000000006806                 align 10h
.text:0000000000006810
.text:0000000000006810 loc_6810:                               ; CODE XREF: mbsstr_trimmed_wordbounded+54E↑j
.text:0000000000006810                 mov     rdi, r15        ; ps
.text:0000000000006813                 call    _mbsinit
.text:0000000000006818                 test    eax, eax
.text:000000000000681A                 jz      loc_6957
.text:0000000000006820                 mov     [rsp+0E8h+var_C8], 1
.text:0000000000006825                 call    ___ctype_get_mb_cur_max
.text:000000000000682A                 mov     r8, [rsp+0E8h+var_B8]
.text:000000000000682F                 mov     rsi, rax
.text:0000000000006832                 mov     rdi, r8
.text:0000000000006835                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000683A                 call    strnlen1
.text:000000000000683F                 mov     r8, [rsp+0E8h+var_D8]
.text:0000000000006844                 mov     rcx, r15
.text:0000000000006847                 mov     rdx, rax
.text:000000000000684A                 mov     rdi, r14
.text:000000000000684D                 mov     rsi, r8
.text:0000000000006850                 call    rpl_mbrtowc
.text:0000000000006855                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006859                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000685E                 jz      short loc_68CB
.text:0000000000006860                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006864                 jz      loc_691C
.text:000000000000686A                 test    rax, rax
.text:000000000000686D                 jnz     short loc_688E
.text:000000000000686F                 mov     rax, [rsp+0E8h+var_B8]
.text:0000000000006874                 mov     [rsp+0E8h+var_B0], 1
.text:000000000000687D                 cmp     byte ptr [rax], 0
.text:0000000000006880                 jnz     loc_697B
.text:0000000000006886                 mov     edx, [rsp+0E8h+var_A4]
.text:000000000000688A                 test    edx, edx
.text:000000000000688C                 jnz     short loc_68FC
.text:000000000000688E
.text:000000000000688E loc_688E:                               ; CODE XREF: mbsstr_trimmed_wordbounded+83D↑j
.text:000000000000688E                 lea     rdi, [rbx+4]    ; ps
.text:0000000000006892                 mov     [rsp+0E8h+var_A8], 1
.text:0000000000006897                 call    _mbsinit
.text:000000000000689C                 test    eax, eax
.text:000000000000689E                 jz      short loc_6908
.text:00000000000068A0                 mov     [rsp+0E8h+var_C8], 0
.text:00000000000068A5                 mov     [rsp+0E8h+var_BC], 1
.text:00000000000068AA                 jmp     loc_659F
.text:00000000000068AF ; ---------------------------------------------------------------------------
.text:00000000000068AF
.text:00000000000068AF loc_68AF:                               ; CODE XREF: mbsstr_trimmed_wordbounded+78C↑j
.text:00000000000068AF                 mov     [rsp+0E8h+var_B0], 1
.text:00000000000068B8                 mov     [rsp+0E8h+var_A8], 0
.text:00000000000068BD                 mov     edx, [rsp+0E8h+var_A4]
.text:00000000000068C1                 mov     [rsp+0E8h+var_BC], 1
.text:00000000000068C6                 jmp     loc_6532
.text:00000000000068CB ; ---------------------------------------------------------------------------
.text:00000000000068CB
.text:00000000000068CB loc_68CB:                               ; CODE XREF: mbsstr_trimmed_wordbounded+82E↑j
.text:00000000000068CB                 mov     [rsp+0E8h+var_B0], 1
.text:00000000000068D4                 jmp     loc_65AB
.text:00000000000068D9 ; ---------------------------------------------------------------------------
.text:00000000000068D9
.text:00000000000068D9 loc_68D9:                               ; CODE XREF: mbsstr_trimmed_wordbounded+79F↑j
.text:00000000000068D9                 mov     rax, [rsp+0E8h+var_B8]
.text:00000000000068DE                 mov     [rsp+0E8h+var_B0], 1
.text:00000000000068E7                 cmp     byte ptr [rax], 0
.text:00000000000068EA                 jnz     loc_697B
.text:00000000000068F0                 mov     edx, [rsp+0E8h+var_A4]
.text:00000000000068F4                 test    edx, edx
.text:00000000000068F6                 jz      loc_67D9
.text:00000000000068FC
.text:00000000000068FC loc_68FC:                               ; CODE XREF: mbsstr_trimmed_wordbounded+215↑j
.text:00000000000068FC                                         ; mbsstr_trimmed_wordbounded+477↑j ...
.text:00000000000068FC                 call    mbuiter_multi_next_part_0
.text:00000000000068FC ; ---------------------------------------------------------------------------
.text:0000000000006901                 align 8
.text:0000000000006908
.text:0000000000006908 loc_6908:                               ; CODE XREF: mbsstr_trimmed_wordbounded+86E↑j
.text:0000000000006908                 mov     [rsp+0E8h+var_BC], 1
.text:000000000000690D                 jmp     loc_659F
.text:0000000000006912 ; ---------------------------------------------------------------------------
.text:0000000000006912
.text:0000000000006912 loc_6912:                               ; CODE XREF: mbsstr_trimmed_wordbounded+7C1↑j
.text:0000000000006912                 mov     [rsp+0E8h+var_BC], 1
.text:0000000000006917                 jmp     loc_652E
.text:000000000000691C ; ---------------------------------------------------------------------------
.text:000000000000691C
.text:000000000000691C loc_691C:                               ; CODE XREF: mbsstr_trimmed_wordbounded+834↑j
.text:000000000000691C                 mov     rdi, [rsp+0E8h+var_B8] ; s
.text:0000000000006921                 call    _strlen
.text:0000000000006926                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000692B                 jmp     loc_65AB
.text:0000000000006930 ; ---------------------------------------------------------------------------
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: mbsstr_trimmed_wordbounded+796↑j
.text:0000000000006930                 mov     rdi, [rsp+0E8h+var_B8] ; s
.text:0000000000006935                 call    _strlen
.text:000000000000693A                 mov     [rsp+0E8h+var_A8], 0
.text:000000000000693F                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000006944                 mov     edx, [rsp+0E8h+var_A4]
.text:0000000000006948                 mov     [rsp+0E8h+var_BC], 1
.text:000000000000694D                 jmp     loc_6532
.text:0000000000006952 ; ---------------------------------------------------------------------------
.text:0000000000006952
.text:0000000000006952 loc_6952:                               ; CODE XREF: mbsstr_trimmed_wordbounded+17C↑j
.text:0000000000006952                                         ; mbsstr_trimmed_wordbounded+369↑j
.text:0000000000006952                 call    _abort
.text:0000000000006957 ; ---------------------------------------------------------------------------
.text:0000000000006957
.text:0000000000006957 loc_6957:                               ; CODE XREF: mbsstr_trimmed_wordbounded+253↑j
.text:0000000000006957                                         ; mbsstr_trimmed_wordbounded+404↑j ...
.text:0000000000006957                 lea     rcx, __PRETTY_FUNCTION___5159 ; "mbuiter_multi_next"
.text:000000000000695E                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000006965                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:000000000000696C                 mov     edx, 96h        ; line
.text:0000000000006971                 call    ___assert_fail
.text:0000000000006976 ; ---------------------------------------------------------------------------
.text:0000000000006976
.text:0000000000006976 loc_6976:                               ; CODE XREF: mbsstr_trimmed_wordbounded+FA↑j
.text:0000000000006976                 call    ___stack_chk_fail
.text:000000000000697B ; ---------------------------------------------------------------------------
.text:000000000000697B
.text:000000000000697B loc_697B:                               ; CODE XREF: mbsstr_trimmed_wordbounded+209↑j
.text:000000000000697B                                         ; mbsstr_trimmed_wordbounded+468↑j ...
.text:000000000000697B                 lea     rcx, __PRETTY_FUNCTION___5159 ; "mbuiter_multi_next"
.text:0000000000006982                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000006989                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:0000000000006990                 mov     edx, 0B2h       ; line
.text:0000000000006995                 call    ___assert_fail
.text:0000000000006995 ; } // starts at 6030
.text:0000000000006995 mbsstr_trimmed_wordbounded endp
.text:0000000000006995
.text:0000000000006995 ; ---------------------------------------------------------------------------
.text:000000000000699A                 align 20h
.text:00000000000069A0
.text:00000000000069A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069A0
.text:00000000000069A0
.text:00000000000069A0 ; __int64 __fastcall proper_name(char *s)
.text:00000000000069A0                 public proper_name
.text:00000000000069A0 proper_name     proc near
.text:00000000000069A0 ; __unwind {
.text:00000000000069A0                 push    r12
.text:00000000000069A2                 push    rbp
.text:00000000000069A3                 mov     rsi, rdi        ; msgid
.text:00000000000069A6                 push    rbx
.text:00000000000069A7                 mov     rbp, rdi
.text:00000000000069AA                 mov     edx, 5          ; category
.text:00000000000069AF                 xor     edi, edi        ; domainname
.text:00000000000069B1                 call    _dcgettext
.text:00000000000069B6                 cmp     rbp, rax
.text:00000000000069B9                 mov     rbx, rax
.text:00000000000069BC                 jz      short loc_69CD
.text:00000000000069BE                 mov     rsi, rbp
.text:00000000000069C1                 mov     rdi, rax
.text:00000000000069C4                 call    mbsstr_trimmed_wordbounded
.text:00000000000069C9                 test    al, al
.text:00000000000069CB                 jz      short loc_69D8
.text:00000000000069CD
.text:00000000000069CD loc_69CD:                               ; CODE XREF: proper_name+1C↑j
.text:00000000000069CD                 mov     rax, rbx
.text:00000000000069D0                 pop     rbx
.text:00000000000069D1                 pop     rbp
.text:00000000000069D2                 pop     r12
.text:00000000000069D4                 retn
.text:00000000000069D4 ; ---------------------------------------------------------------------------
.text:00000000000069D5                 align 8
.text:00000000000069D8
.text:00000000000069D8 loc_69D8:                               ; CODE XREF: proper_name+2B↑j
.text:00000000000069D8                 mov     rdi, rbx        ; s
.text:00000000000069DB                 call    _strlen
.text:00000000000069E0                 mov     rdi, rbp        ; s
.text:00000000000069E3                 mov     r12, rax
.text:00000000000069E6                 call    _strlen
.text:00000000000069EB                 lea     rdi, [r12+rax+4]
.text:00000000000069F0                 call    xmalloc
.text:00000000000069F5                 lea     rcx, aSS_0      ; "%s (%s)"
.text:00000000000069FC                 mov     r12, rax
.text:00000000000069FF                 mov     r9, rbp
.text:0000000000006A02                 mov     r8, rbx
.text:0000000000006A05                 mov     rdi, rax
.text:0000000000006A08                 mov     rbx, r12
.text:0000000000006A0B                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A12                 mov     esi, 1
.text:0000000000006A17                 xor     eax, eax
.text:0000000000006A19                 call    ___sprintf_chk
.text:0000000000006A1E                 mov     rax, rbx
.text:0000000000006A21                 pop     rbx
.text:0000000000006A22                 pop     rbp
.text:0000000000006A23                 pop     r12
.text:0000000000006A25                 retn
.text:0000000000006A25 ; } // starts at 69A0
.text:0000000000006A25 proper_name     endp
.text:0000000000006A25
.text:0000000000006A25 ; ---------------------------------------------------------------------------
.text:0000000000006A26                 align 10h
.text:0000000000006A30
.text:0000000000006A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A30
.text:0000000000006A30 ; Attributes: info_from_lumina
.text:0000000000006A30
.text:0000000000006A30 ; __int64 __fastcall proper_name_utf8(char *s2, char *s)
.text:0000000000006A30                 public proper_name_utf8
.text:0000000000006A30 proper_name_utf8 proc near              ; CODE XREF: main+285↑p
.text:0000000000006A30
.text:0000000000006A30 ptr             = qword ptr -40h
.text:0000000000006A30
.text:0000000000006A30 ; __unwind {
.text:0000000000006A30                 push    r15
.text:0000000000006A32                 push    r14
.text:0000000000006A34                 mov     edx, 5          ; category
.text:0000000000006A39                 push    r13
.text:0000000000006A3B                 push    r12
.text:0000000000006A3D                 mov     r13, rdi
.text:0000000000006A40                 push    rbp
.text:0000000000006A41                 push    rbx
.text:0000000000006A42                 mov     rbp, rsi
.text:0000000000006A45                 mov     rsi, rdi        ; msgid
.text:0000000000006A48                 xor     edi, edi        ; domainname
.text:0000000000006A4A                 sub     rsp, 18h
.text:0000000000006A4E                 call    _dcgettext
.text:0000000000006A53                 mov     r14, rax
.text:0000000000006A56                 call    locale_charset
.text:0000000000006A5B                 lea     rsi, aUtf8      ; "UTF-8"
.text:0000000000006A62                 mov     rdi, rax
.text:0000000000006A65                 mov     r12, rax
.text:0000000000006A68                 call    c_strcasecmp
.text:0000000000006A6D                 test    eax, eax
.text:0000000000006A6F                 jnz     loc_6B58
.text:0000000000006A75                 test    rbp, rbp
.text:0000000000006A78                 jz      short loc_6AD0
.text:0000000000006A7A                 mov     [rsp+48h+ptr], rbp
.text:0000000000006A7F                 mov     rbx, rbp
.text:0000000000006A82                 xor     r12d, r12d
.text:0000000000006A85                 xor     r15d, r15d
.text:0000000000006A88
.text:0000000000006A88 loc_6A88:                               ; CODE XREF: proper_name_utf8+234↓j
.text:0000000000006A88                                         ; proper_name_utf8+254↓j ...
.text:0000000000006A88                 mov     rsi, r13        ; s2
.text:0000000000006A8B                 mov     rdi, r14        ; s1
.text:0000000000006A8E                 call    _strcmp
.text:0000000000006A93                 test    eax, eax
.text:0000000000006A95                 jnz     short loc_6AF1
.text:0000000000006A97
.text:0000000000006A97 loc_6A97:                               ; CODE XREF: proper_name_utf8+BF↓j
.text:0000000000006A97                 test    r15, r15
.text:0000000000006A9A                 jz      short loc_6AA9
.text:0000000000006A9C                 cmp     rbx, r15
.text:0000000000006A9F                 jz      short loc_6AA9
.text:0000000000006AA1                 mov     rdi, r15        ; ptr
.text:0000000000006AA4                 call    _free
.text:0000000000006AA9
.text:0000000000006AA9 loc_6AA9:                               ; CODE XREF: proper_name_utf8+6A↑j
.text:0000000000006AA9                                         ; proper_name_utf8+6F↑j
.text:0000000000006AA9                 test    r12, r12
.text:0000000000006AAC                 jz      short loc_6ABB
.text:0000000000006AAE                 cmp     rbx, r12
.text:0000000000006AB1                 jz      short loc_6ABB
.text:0000000000006AB3
.text:0000000000006AB3 loc_6AB3:                               ; CODE XREF: proper_name_utf8+117↓j
.text:0000000000006AB3                                         ; proper_name_utf8+20E↓j ...
.text:0000000000006AB3                 mov     rdi, r12        ; ptr
.text:0000000000006AB6                 call    _free
.text:0000000000006ABB
.text:0000000000006ABB loc_6ABB:                               ; CODE XREF: proper_name_utf8+7C↑j
.text:0000000000006ABB                                         ; proper_name_utf8+81↑j ...
.text:0000000000006ABB                 add     rsp, 18h
.text:0000000000006ABF                 mov     rax, rbx
.text:0000000000006AC2                 pop     rbx
.text:0000000000006AC3                 pop     rbp
.text:0000000000006AC4                 pop     r12
.text:0000000000006AC6                 pop     r13
.text:0000000000006AC8                 pop     r14
.text:0000000000006ACA                 pop     r15
.text:0000000000006ACC                 retn
.text:0000000000006ACC ; ---------------------------------------------------------------------------
.text:0000000000006ACD                 align 10h
.text:0000000000006AD0
.text:0000000000006AD0 loc_6AD0:                               ; CODE XREF: proper_name_utf8+48↑j
.text:0000000000006AD0                 mov     rsi, r13        ; s2
.text:0000000000006AD3                 mov     rdi, r14        ; s1
.text:0000000000006AD6                 mov     [rsp+48h+ptr], 0
.text:0000000000006ADF                 xor     r12d, r12d
.text:0000000000006AE2                 xor     r15d, r15d
.text:0000000000006AE5                 mov     rbx, r13
.text:0000000000006AE8                 call    _strcmp
.text:0000000000006AED                 test    eax, eax
.text:0000000000006AEF                 jz      short loc_6A97
.text:0000000000006AF1
.text:0000000000006AF1 loc_6AF1:                               ; CODE XREF: proper_name_utf8+65↑j
.text:0000000000006AF1                 mov     rsi, r13
.text:0000000000006AF4                 mov     rdi, r14
.text:0000000000006AF7                 call    mbsstr_trimmed_wordbounded
.text:0000000000006AFC                 test    al, al
.text:0000000000006AFE                 jnz     short loc_6B38
.text:0000000000006B00
.text:0000000000006B00 loc_6B00:                               ; CODE XREF: proper_name_utf8+2DA↓j
.text:0000000000006B00                 test    rbp, rbp
.text:0000000000006B03                 jz      short loc_6B14
.text:0000000000006B05                 mov     rsi, rbp
.text:0000000000006B08                 mov     rdi, r14
.text:0000000000006B0B                 call    mbsstr_trimmed_wordbounded
.text:0000000000006B10                 test    al, al
.text:0000000000006B12                 jnz     short loc_6B38
.text:0000000000006B14
.text:0000000000006B14 loc_6B14:                               ; CODE XREF: proper_name_utf8+D3↑j
.text:0000000000006B14                 cmp     [rsp+48h+ptr], 0
.text:0000000000006B1A                 jz      loc_6C90
.text:0000000000006B20                 mov     rsi, [rsp+48h+ptr]
.text:0000000000006B25                 mov     rdi, r14
.text:0000000000006B28                 call    mbsstr_trimmed_wordbounded
.text:0000000000006B2D                 test    al, al
.text:0000000000006B2F                 jz      loc_6C90
.text:0000000000006B35                 nop     dword ptr [rax]
.text:0000000000006B38
.text:0000000000006B38 loc_6B38:                               ; CODE XREF: proper_name_utf8+CE↑j
.text:0000000000006B38                                         ; proper_name_utf8+E2↑j
.text:0000000000006B38                 test    r15, r15
.text:0000000000006B3B                 jnz     loc_6C30
.text:0000000000006B41                 test    r12, r12
.text:0000000000006B44                 mov     rbx, r14
.text:0000000000006B47                 jnz     loc_6AB3
.text:0000000000006B4D                 jmp     loc_6ABB
.text:0000000000006B4D ; ---------------------------------------------------------------------------
.text:0000000000006B52                 align 8
.text:0000000000006B58
.text:0000000000006B58 loc_6B58:                               ; CODE XREF: proper_name_utf8+3F↑j
.text:0000000000006B58                 lea     rsi, aUtf8      ; "UTF-8"
.text:0000000000006B5F                 mov     rdx, r12
.text:0000000000006B62                 mov     rdi, rbp
.text:0000000000006B65                 call    xreadlink_0
.text:0000000000006B6A                 mov     rdi, r12        ; s
.text:0000000000006B6D                 mov     rbx, rax
.text:0000000000006B70                 call    _strlen
.text:0000000000006B75                 lea     rdi, [rax+0Bh]
.text:0000000000006B79                 mov     r15, rax
.text:0000000000006B7C                 call    xmalloc
.text:0000000000006B81                 mov     rdx, r15        ; n
.text:0000000000006B84                 mov     rsi, r12        ; src
.text:0000000000006B87                 mov     rdi, rax        ; dest
.text:0000000000006B8A                 call    _memcpy
.text:0000000000006B8F                 mov     rcx, rax
.text:0000000000006B92                 add     r15, rax
.text:0000000000006B95                 mov     rax, 4C534E4152542F2Fh
.text:0000000000006B9F                 mov     [r15], rax
.text:0000000000006BA2                 lea     rsi, aUtf8      ; "UTF-8"
.text:0000000000006BA9                 mov     eax, 5449h
.text:0000000000006BAE                 mov     rdx, rcx
.text:0000000000006BB1                 mov     rdi, rbp
.text:0000000000006BB4                 mov     [r15+8], ax
.text:0000000000006BB9                 mov     byte ptr [r15+0Ah], 0
.text:0000000000006BBE                 mov     [rsp+48h+ptr], rcx
.text:0000000000006BC3                 call    xreadlink_0
.text:0000000000006BC8                 mov     rcx, [rsp+48h+ptr]
.text:0000000000006BCD                 mov     r12, rax
.text:0000000000006BD0                 mov     rdi, rcx        ; ptr
.text:0000000000006BD3                 call    _free
.text:0000000000006BD8                 test    r12, r12
.text:0000000000006BDB                 jz      short loc_6BF7
.text:0000000000006BDD                 mov     esi, 3Fh ; '?'  ; c
.text:0000000000006BE2                 mov     rdi, r12        ; s
.text:0000000000006BE5                 call    _strchr
.text:0000000000006BEA                 test    rax, rax
.text:0000000000006BED                 jz      short loc_6C50
.text:0000000000006BEF                 mov     rdi, r12        ; ptr
.text:0000000000006BF2                 call    _free
.text:0000000000006BF7
.text:0000000000006BF7 loc_6BF7:                               ; CODE XREF: proper_name_utf8+1AB↑j
.text:0000000000006BF7                 test    rbx, rbx
.text:0000000000006BFA                 jz      short loc_6C70
.text:0000000000006BFC                 mov     rsi, r13        ; s2
.text:0000000000006BFF                 mov     rdi, r14        ; s1
.text:0000000000006C02                 call    _strcmp
.text:0000000000006C07                 test    eax, eax
.text:0000000000006C09                 jz      loc_6ABB
.text:0000000000006C0F                 mov     rsi, r13
.text:0000000000006C12                 mov     rdi, r14
.text:0000000000006C15                 call    mbsstr_trimmed_wordbounded
.text:0000000000006C1A                 test    al, al
.text:0000000000006C1C                 jz      loc_6CF8
.text:0000000000006C22                 mov     r15, rbx
.text:0000000000006C25                 xor     r12d, r12d
.text:0000000000006C28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: proper_name_utf8+10B↑j
.text:0000000000006C30                 mov     rdi, r15        ; ptr
.text:0000000000006C33                 mov     rbx, r14
.text:0000000000006C36                 call    _free
.text:0000000000006C3B                 test    r12, r12
.text:0000000000006C3E                 jnz     loc_6AB3
.text:0000000000006C44                 jmp     loc_6ABB
.text:0000000000006C44 ; ---------------------------------------------------------------------------
.text:0000000000006C49                 align 10h
.text:0000000000006C50
.text:0000000000006C50 loc_6C50:                               ; CODE XREF: proper_name_utf8+1BD↑j
.text:0000000000006C50                 test    rbx, rbx
.text:0000000000006C53                 mov     [rsp+48h+ptr], r12
.text:0000000000006C58                 jz      loc_6D10
.text:0000000000006C5E                 mov     rbp, rbx
.text:0000000000006C61                 mov     r15, rbx
.text:0000000000006C64                 jmp     loc_6A88
.text:0000000000006C64 ; ---------------------------------------------------------------------------
.text:0000000000006C69                 align 10h
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: proper_name_utf8+1CA↑j
.text:0000000000006C70                 mov     rbx, r13
.text:0000000000006C73                 mov     [rsp+48h+ptr], 0
.text:0000000000006C7C                 xor     ebp, ebp
.text:0000000000006C7E                 xor     r12d, r12d
.text:0000000000006C81                 xor     r15d, r15d
.text:0000000000006C84                 jmp     loc_6A88
.text:0000000000006C84 ; ---------------------------------------------------------------------------
.text:0000000000006C89                 align 10h
.text:0000000000006C90
.text:0000000000006C90 loc_6C90:                               ; CODE XREF: proper_name_utf8+EA↑j
.text:0000000000006C90                                         ; proper_name_utf8+FF↑j
.text:0000000000006C90                 mov     rdi, r14        ; s
.text:0000000000006C93                 call    _strlen
.text:0000000000006C98                 mov     rdi, rbx        ; s
.text:0000000000006C9B                 mov     rbp, rax
.text:0000000000006C9E                 call    _strlen
.text:0000000000006CA3                 lea     rdi, [rbp+rax+4]
.text:0000000000006CA8                 call    xmalloc
.text:0000000000006CAD                 lea     rcx, aSS_0      ; "%s (%s)"
.text:0000000000006CB4                 mov     rdi, rax
.text:0000000000006CB7                 mov     rbp, rax
.text:0000000000006CBA                 mov     r9, rbx
.text:0000000000006CBD                 xor     eax, eax
.text:0000000000006CBF                 mov     r8, r14
.text:0000000000006CC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006CC9                 mov     esi, 1
.text:0000000000006CCE                 call    ___sprintf_chk
.text:0000000000006CD3                 test    r15, r15
.text:0000000000006CD6                 jz      short loc_6CE0
.text:0000000000006CD8                 mov     rdi, r15        ; ptr
.text:0000000000006CDB                 call    _free
.text:0000000000006CE0
.text:0000000000006CE0 loc_6CE0:                               ; CODE XREF: proper_name_utf8+2A6↑j
.text:0000000000006CE0                 test    r12, r12
.text:0000000000006CE3                 mov     rbx, rbp
.text:0000000000006CE6                 jnz     loc_6AB3
.text:0000000000006CEC                 jmp     loc_6ABB
.text:0000000000006CEC ; ---------------------------------------------------------------------------
.text:0000000000006CF1                 align 8
.text:0000000000006CF8
.text:0000000000006CF8 loc_6CF8:                               ; CODE XREF: proper_name_utf8+1EC↑j
.text:0000000000006CF8                 mov     rbp, rbx
.text:0000000000006CFB                 mov     r15, rbx
.text:0000000000006CFE                 mov     [rsp+48h+ptr], 0
.text:0000000000006D07                 xor     r12d, r12d
.text:0000000000006D0A                 jmp     loc_6B00
.text:0000000000006D0A ; ---------------------------------------------------------------------------
.text:0000000000006D0F                 align 10h
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: proper_name_utf8+228↑j
.text:0000000000006D10                 xor     ebp, ebp
.text:0000000000006D12                 xor     r15d, r15d
.text:0000000000006D15                 mov     rbx, r12
.text:0000000000006D18                 jmp     loc_6A88
.text:0000000000006D18 ; } // starts at 6A30
.text:0000000000006D18 proper_name_utf8 endp
.text:0000000000006D18
.text:0000000000006D18 ; ---------------------------------------------------------------------------
.text:0000000000006D1D                 align 20h
.text:0000000000006D20
.text:0000000000006D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D20
.text:0000000000006D20 ; Attributes: info_from_lumina
.text:0000000000006D20
.text:0000000000006D20 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000006D20 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000006D20                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000006D20 ; __unwind {
.text:0000000000006D20                 push    rbp
.text:0000000000006D21                 push    rbx
.text:0000000000006D22                 mov     rbp, rdi
.text:0000000000006D25                 mov     ebx, esi
.text:0000000000006D27                 sub     rsp, 8
.text:0000000000006D2B                 call    locale_charset
.text:0000000000006D30                 movzx   edx, byte ptr [rax]
.text:0000000000006D33                 and     edx, 0FFFFFFDFh
.text:0000000000006D36                 cmp     dl, 55h ; 'U'
.text:0000000000006D39                 jz      short loc_6DB0
.text:0000000000006D3B                 cmp     dl, 47h ; 'G'
.text:0000000000006D3E                 jz      short loc_6D60
.text:0000000000006D40
.text:0000000000006D40 loc_6D40:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000006D40                                         ; gettext_quote+50↓j ...
.text:0000000000006D40                 lea     rax, aS_0+4     ; "\""
.text:0000000000006D47                 lea     rdx, aIterCurPtr0+15h ; "'"
.text:0000000000006D4E                 cmp     ebx, 9
.text:0000000000006D51                 cmovnz  rax, rdx
.text:0000000000006D55                 add     rsp, 8
.text:0000000000006D59                 pop     rbx
.text:0000000000006D5A                 pop     rbp
.text:0000000000006D5B                 retn
.text:0000000000006D5B ; ---------------------------------------------------------------------------
.text:0000000000006D5C                 align 20h
.text:0000000000006D60
.text:0000000000006D60 loc_6D60:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000006D60                 movzx   edx, byte ptr [rax+1]
.text:0000000000006D64                 and     edx, 0FFFFFFDFh
.text:0000000000006D67                 cmp     dl, 42h ; 'B'
.text:0000000000006D6A                 jnz     short loc_6D40
.text:0000000000006D6C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000006D70                 jnz     short loc_6D40
.text:0000000000006D72                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000006D76                 jnz     short loc_6D40
.text:0000000000006D78                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000006D7C                 jnz     short loc_6D40
.text:0000000000006D7E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000006D82                 jnz     short loc_6D40
.text:0000000000006D84                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000006D88                 jnz     short loc_6D40
.text:0000000000006D8A                 cmp     byte ptr [rax+7], 0
.text:0000000000006D8E                 jnz     short loc_6D40
.text:0000000000006D90                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000006D94                 lea     rax, unk_1BD2B
.text:0000000000006D9B                 lea     rdx, unk_1BD2F
.text:0000000000006DA2                 cmovnz  rax, rdx
.text:0000000000006DA6                 add     rsp, 8
.text:0000000000006DAA                 pop     rbx
.text:0000000000006DAB                 pop     rbp
.text:0000000000006DAC                 retn
.text:0000000000006DAC ; ---------------------------------------------------------------------------
.text:0000000000006DAD                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000006DB0                 movzx   edx, byte ptr [rax+1]
.text:0000000000006DB4                 and     edx, 0FFFFFFDFh
.text:0000000000006DB7                 cmp     dl, 54h ; 'T'
.text:0000000000006DBA                 jnz     short loc_6D40
.text:0000000000006DBC                 movzx   edx, byte ptr [rax+2]
.text:0000000000006DC0                 and     edx, 0FFFFFFDFh
.text:0000000000006DC3                 cmp     dl, 46h ; 'F'
.text:0000000000006DC6                 jnz     loc_6D40
.text:0000000000006DCC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000006DD0                 jnz     loc_6D40
.text:0000000000006DD6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000006DDA                 jnz     loc_6D40
.text:0000000000006DE0                 cmp     byte ptr [rax+5], 0
.text:0000000000006DE4                 jnz     loc_6D40
.text:0000000000006DEA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000006DEE                 lea     rax, unk_1BD23
.text:0000000000006DF5                 lea     rdx, unk_1BD27
.text:0000000000006DFC                 cmovnz  rax, rdx
.text:0000000000006E00                 add     rsp, 8
.text:0000000000006E04                 pop     rbx
.text:0000000000006E05                 pop     rbp
.text:0000000000006E06                 retn
.text:0000000000006E06 ; } // starts at 6D20
.text:0000000000006E06 gettext_quote   endp
.text:0000000000006E06
.text:0000000000006E06 ; ---------------------------------------------------------------------------
.text:0000000000006E07                 align 10h
.text:0000000000006E10
.text:0000000000006E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E10
.text:0000000000006E10 ; Attributes: info_from_lumina
.text:0000000000006E10
.text:0000000000006E10 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000006E10 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000006E10                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000006E10
.text:0000000000006E10 var_E0          = dword ptr -0E0h
.text:0000000000006E10 var_DB          = byte ptr -0DBh
.text:0000000000006E10 var_DA          = byte ptr -0DAh
.text:0000000000006E10 var_D9          = byte ptr -0D9h
.text:0000000000006E10 s               = qword ptr -0D8h
.text:0000000000006E10 n               = qword ptr -0D0h
.text:0000000000006E10 var_C8          = qword ptr -0C8h
.text:0000000000006E10 ps              = qword ptr -0C0h
.text:0000000000006E10 var_B8          = qword ptr -0B8h
.text:0000000000006E10 var_B0          = qword ptr -0B0h
.text:0000000000006E10 var_A8          = qword ptr -0A8h
.text:0000000000006E10 s2              = qword ptr -0A0h
.text:0000000000006E10 var_98          = qword ptr -98h
.text:0000000000006E10 var_90          = qword ptr -90h
.text:0000000000006E10 var_88          = qword ptr -88h
.text:0000000000006E10 var_80          = qword ptr -80h
.text:0000000000006E10 var_78          = qword ptr -78h
.text:0000000000006E10 var_70          = dword ptr -70h
.text:0000000000006E10 var_6C          = byte ptr -6Ch
.text:0000000000006E10 var_6B          = byte ptr -6Bh
.text:0000000000006E10 var_6A          = byte ptr -6Ah
.text:0000000000006E10 var_69          = byte ptr -69h
.text:0000000000006E10 var_68          = qword ptr -68h
.text:0000000000006E10 var_60          = qword ptr -60h
.text:0000000000006E10 wc              = dword ptr -4Ch
.text:0000000000006E10 var_48          = qword ptr -48h
.text:0000000000006E10 var_40          = qword ptr -40h
.text:0000000000006E10 arg_0           = qword ptr  8
.text:0000000000006E10 arg_8           = qword ptr  10h
.text:0000000000006E10 arg_10          = qword ptr  18h
.text:0000000000006E10
.text:0000000000006E10 ; __unwind {
.text:0000000000006E10                 push    r15
.text:0000000000006E12                 push    r14
.text:0000000000006E14                 mov     r15d, r8d
.text:0000000000006E17                 push    r13
.text:0000000000006E19                 push    r12
.text:0000000000006E1B                 mov     r14, rdi
.text:0000000000006E1E                 push    rbp
.text:0000000000006E1F                 push    rbx
.text:0000000000006E20                 mov     ebx, r9d
.text:0000000000006E23                 mov     r13, rsi
.text:0000000000006E26                 mov     rbp, rcx
.text:0000000000006E29                 and     ebx, 2
.text:0000000000006E2C                 sub     rsp, 0B8h
.text:0000000000006E33                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000006E3B                 mov     [rsp+0E8h+s], rdx
.text:0000000000006E40                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000006E45                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000006E4A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000006E4F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000006E57                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006E5C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000006E64                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006E69                 mov     rax, fs:28h
.text:0000000000006E72                 mov     [rsp+0E8h+var_40], rax
.text:0000000000006E7A                 xor     eax, eax
.text:0000000000006E7C                 call    ___ctype_get_mb_cur_max
.text:0000000000006E81                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000006E85                 mov     [rsp+0E8h+var_90], rax
.text:0000000000006E8A                 ja      def_6EA1        ; jumptable 00000000000121F1 default case
.text:0000000000006E90                 lea     rcx, jpt_6EA1
.text:0000000000006E97                 mov     edx, r15d
.text:0000000000006E9A                 movsxd  rax, ds:(jpt_6EA1 - 1BD80h)[rcx+rdx*4]
.text:0000000000006E9E                 add     rax, rcx
.text:0000000000006EA1                 jmp     rax             ; switch jump
.text:0000000000006EA3 ; ---------------------------------------------------------------------------
.text:0000000000006EA3
.text:0000000000006EA3 loc_6EA3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006EA3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000006EA3                                         ; DATA XREF: ...
.text:0000000000006EA3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000006EA8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006EAD                 xor     r12d, r12d
.text:0000000000006EB0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006EB9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006EBE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006EC3
.text:0000000000006EC3 loc_6EC3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000006EC3                 lea     rax, aIterCurPtr0+15h ; "'"
.text:0000000000006ECA                 mov     [rsp+0E8h+n], 1
.text:0000000000006ED3                 xor     r15d, r15d
.text:0000000000006ED6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006EDE                 mov     [rsp+0E8h+s2], rax
.text:0000000000006EE3
.text:0000000000006EE3 loc_6EE3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000006EE3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000006EE3                 xor     r11d, r11d
.text:0000000000006EE6                 mov     rax, rbp
.text:0000000000006EE9                 mov     r8d, r12d
.text:0000000000006EEC                 mov     rbp, r11
.text:0000000000006EEF                 mov     r11, rax
.text:0000000000006EF2                 nop     word ptr [rax+rax+00h]
.text:0000000000006EF8
.text:0000000000006EF8 loc_6EF8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000006EF8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000006EF8                 cmp     r11, rbp
.text:0000000000006EFB                 setnz   r12b
.text:0000000000006EFF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F03                 jnz     short loc_6F12
.text:0000000000006F05                 mov     rax, [rsp+0E8h+s]
.text:0000000000006F0A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000006F0E                 setnz   r12b
.text:0000000000006F12
.text:0000000000006F12 loc_6F12:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000006F12                 test    r12b, r12b
.text:0000000000006F15                 jz      loc_7570
.text:0000000000006F1B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006F20                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000006F25                 lea     r9, [rdi+rbp]
.text:0000000000006F29                 setnz   al
.text:0000000000006F2C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000006F30                 mov     r10d, eax
.text:0000000000006F33                 jz      loc_6FE0
.text:0000000000006F39                 mov     rax, [rsp+0E8h+n]
.text:0000000000006F3E                 test    rax, rax
.text:0000000000006F41                 jz      loc_7370
.text:0000000000006F47                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F4B                 lea     rbx, [rbp+rax+0]
.text:0000000000006F50                 jnz     short loc_6F80
.text:0000000000006F52                 cmp     rax, 1
.text:0000000000006F56                 jbe     short loc_6F80
.text:0000000000006F58                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000006F5D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000006F62                 mov     [rsp+0E8h+ps], r9
.text:0000000000006F67                 call    _strlen
.text:0000000000006F6C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000006F72                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000006F78                 mov     r11, rax
.text:0000000000006F7B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000006F80
.text:0000000000006F80 loc_6F80:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000006F80                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000006F80                 cmp     rbx, r11
.text:0000000000006F83                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000006F88                 ja      loc_7540
.text:0000000000006F8E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000006F93                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000006F98                 mov     rdi, r9         ; s1
.text:0000000000006F9B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000006FA0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000006FA5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000006FAA                 call    _memcmp
.text:0000000000006FAF                 test    eax, eax
.text:0000000000006FB1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000006FB6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000006FBC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000006FC1                 jnz     loc_7540
.text:0000000000006FC7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006FCC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000006FD2                 jnz     loc_7F55
.text:0000000000006FD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006FE0
.text:0000000000006FE0 loc_6FE0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000006FE0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000006FE0                 movzx   ebx, byte ptr [r9]
.text:0000000000006FE4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000006FE7                 ja      def_6FFE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000006FED                 lea     rcx, jpt_6FFE
.text:0000000000006FF4                 movzx   edx, bl
.text:0000000000006FF7                 movsxd  rax, ds:(jpt_6FFE - 1BDACh)[rcx+rdx*4]
.text:0000000000006FFB                 add     rax, rcx
.text:0000000000006FFE                 jmp     rax             ; switch jump
.text:0000000000007000 ; ---------------------------------------------------------------------------
.text:0000000000007000
.text:0000000000007000 loc_7000:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007000                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:0000000000007000                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000007003
.text:0000000000007003 loc_7003:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007003                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007003                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000007007                 setnz   al
.text:000000000000700A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000700E                 jnz     short loc_701C
.text:0000000000007010                 mov     rax, [rsp+0E8h+s]
.text:0000000000007015                 cmp     byte ptr [rax+1], 0
.text:0000000000007019                 setnz   al
.text:000000000000701C
.text:000000000000701C loc_701C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000701C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007021                 setz    dl
.text:0000000000007024                 test    al, al
.text:0000000000007026                 jz      loc_7278
.text:000000000000702C
.text:000000000000702C loc_702C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000702C                 xor     r12d, r12d
.text:000000000000702F                 xor     eax, eax
.text:0000000000007031                 nop     dword ptr [rax+00000000h]
.text:0000000000007038
.text:0000000000007038 loc_7038:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000007038                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000007038                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000703D                 jnz     loc_7152
.text:0000000000007043                 test    dl, dl
.text:0000000000007045                 jnz     loc_7152
.text:000000000000704B
.text:000000000000704B loc_704B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000704B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000007050                 test    rsi, rsi
.text:0000000000007053                 jz      short loc_7069
.text:0000000000007055                 mov     edx, ebx
.text:0000000000007057                 shr     dl, 5
.text:000000000000705A                 movzx   edx, dl
.text:000000000000705D                 mov     edx, [rsi+rdx*4]
.text:0000000000007060                 bt      edx, ebx
.text:0000000000007063                 jb      loc_71B3
.text:0000000000007069
.text:0000000000007069 loc_7069:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000007069                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000007069                 test    r10b, r10b
.text:000000000000706C                 jnz     loc_71B3
.text:0000000000007072                 xor     eax, 1
.text:0000000000007075                 add     rbp, 1
.text:0000000000007079                 and     eax, r8d
.text:000000000000707C
.text:000000000000707C loc_707C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000707C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000707C                 test    al, al
.text:000000000000707E                 jz      short loc_70A0
.text:0000000000007080                 cmp     r13, r15
.text:0000000000007083                 jbe     short loc_708A
.text:0000000000007085                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000708A
.text:000000000000708A loc_708A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000708A                 lea     rax, [r15+1]
.text:000000000000708E                 cmp     r13, rax
.text:0000000000007091                 jbe     short loc_7099
.text:0000000000007093                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000007099
.text:0000000000007099 loc_7099:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000007099                 add     r15, 2
.text:000000000000709D                 xor     r8d, r8d
.text:00000000000070A0
.text:00000000000070A0 loc_70A0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000070A0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000070A0                 cmp     r15, r13
.text:00000000000070A3                 jnb     short loc_70A9
.text:00000000000070A5                 mov     [r14+r15], bl
.text:00000000000070A9
.text:00000000000070A9 loc_70A9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000070A9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000070AE                 add     r15, 1
.text:00000000000070B2                 mov     eax, 0
.text:00000000000070B7                 test    r12b, r12b
.text:00000000000070BA                 cmovz   edi, eax
.text:00000000000070BD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000070C2                 jmp     loc_6EF8
.text:00000000000070C2 ; ---------------------------------------------------------------------------
.text:00000000000070C7                 align 10h
.text:00000000000070D0
.text:00000000000070D0 loc_70D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000070D0                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000070D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000070D3
.text:00000000000070D3 loc_70D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000070D3                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:00000000000070D3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000070D7                 cmp     eax, 2
.text:00000000000070DA                 jz      loc_7698
.text:00000000000070E0                 cmp     eax, 5
.text:00000000000070E3                 jz      loc_7658
.text:00000000000070E9                 cmp     eax, 2
.text:00000000000070EC                 mov     ebx, 3Fh ; '?'
.text:00000000000070F1                 setz    dl
.text:00000000000070F4                 xor     r12d, r12d
.text:00000000000070F7                 xor     eax, eax
.text:00000000000070F9                 jmp     loc_7038
.text:00000000000070F9 ; ---------------------------------------------------------------------------
.text:00000000000070FE                 align 20h
.text:0000000000007100
.text:0000000000007100 loc_7100:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007100                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:0000000000007100                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000007103
.text:0000000000007103 loc_7103:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007103                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007103                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000007108                 jz      loc_7610
.text:000000000000710E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000007113                 xor     edx, edx
.text:0000000000007115                 xor     eax, eax
.text:0000000000007117                 mov     ebx, 27h ; '''
.text:000000000000711C                 jmp     loc_7038
.text:000000000000711C ; ---------------------------------------------------------------------------
.text:0000000000007121                 align 8
.text:0000000000007128
.text:0000000000007128 loc_7128:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007128                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007128                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000712D                 mov     ebx, 74h ; 't'
.text:0000000000007132
.text:0000000000007132 loc_7132:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000007132                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000007132                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007137                 setz    al
.text:000000000000713A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000713E                 jnz     loc_728E
.text:0000000000007144
.text:0000000000007144 loc_7144:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000007144                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000007144                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007149                 jnz     short loc_71B0
.text:000000000000714B
.text:000000000000714B loc_714B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000714B                 mov     ebx, edx
.text:000000000000714D                 xor     r12d, r12d
.text:0000000000007150                 xor     eax, eax
.text:0000000000007152
.text:0000000000007152 loc_7152:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000007152                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000007152                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007157                 jnz     loc_704B
.text:000000000000715D                 jmp     loc_7069
.text:000000000000715D ; ---------------------------------------------------------------------------
.text:0000000000007162                 align 8
.text:0000000000007168
.text:0000000000007168 loc_7168:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007168                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007168                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000716D                 mov     ebx, 62h ; 'b'
.text:0000000000007172                 jmp     short loc_7144
.text:0000000000007172 ; ---------------------------------------------------------------------------
.text:0000000000007174                 align 8
.text:0000000000007178
.text:0000000000007178 loc_7178:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007178                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007178                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000717D                 jz      loc_7550
.text:0000000000007183                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007188                 jz      loc_73A0
.text:000000000000718E
.text:000000000000718E loc_718E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000718E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007193                 jz      loc_73A0
.text:0000000000007199                 cmp     [rsp+0E8h+n], 0
.text:000000000000719F                 jnz     loc_755B
.text:00000000000071A5                 mov     ebx, 5Ch ; '\'
.text:00000000000071AA                 nop     word ptr [rax+rax+00h]
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000071B0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000071B0                 xor     r12d, r12d
.text:00000000000071B3
.text:00000000000071B3 loc_71B3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000071B3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000071B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000071B8                 setz    dl
.text:00000000000071BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000071C0                 mov     eax, edx
.text:00000000000071C2                 jnz     loc_7A18
.text:00000000000071C8                 mov     eax, r8d
.text:00000000000071CB                 xor     eax, 1
.text:00000000000071CE                 and     al, dl
.text:00000000000071D0                 jz      short loc_7201
.text:00000000000071D2                 cmp     r13, r15
.text:00000000000071D5                 jbe     short loc_71DC
.text:00000000000071D7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000071DC
.text:00000000000071DC loc_71DC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000071DC                 lea     rdx, [r15+1]
.text:00000000000071E0                 cmp     r13, rdx
.text:00000000000071E3                 jbe     short loc_71EB
.text:00000000000071E5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000071EB
.text:00000000000071EB loc_71EB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000071EB                 lea     rdx, [r15+2]
.text:00000000000071EF                 cmp     r13, rdx
.text:00000000000071F2                 jbe     short loc_71FA
.text:00000000000071F4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000071FA
.text:00000000000071FA loc_71FA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000071FA                 add     r15, 3
.text:00000000000071FE                 mov     r8d, eax
.text:0000000000007201
.text:0000000000007201 loc_7201:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000007201                 cmp     r13, r15
.text:0000000000007204                 jbe     short loc_720B
.text:0000000000007206                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000720B
.text:000000000000720B loc_720B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000720B                 add     r15, 1
.text:000000000000720F                 add     rbp, 1
.text:0000000000007213                 jmp     loc_70A0
.text:0000000000007213 ; ---------------------------------------------------------------------------
.text:0000000000007218                 align 20h
.text:0000000000007220
.text:0000000000007220 loc_7220:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007220                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007220                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000007225                 jnz     loc_73F3
.text:000000000000722B                 xor     edx, edx
.text:000000000000722D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000007232                 jz      loc_714B
.text:0000000000007238                 add     rbp, 1
.text:000000000000723C                 jmp     loc_6EF8
.text:000000000000723C ; ---------------------------------------------------------------------------
.text:0000000000007241                 align 8
.text:0000000000007248
.text:0000000000007248 loc_7248:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007248                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007248                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000724D                 setz    dl
.text:0000000000007250                 xor     eax, eax
.text:0000000000007252                 jmp     loc_7038
.text:0000000000007252 ; ---------------------------------------------------------------------------
.text:0000000000007257                 align 20h
.text:0000000000007260
.text:0000000000007260 loc_7260:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007260                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007260                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000007265                 mov     ebx, 61h ; 'a'
.text:000000000000726A                 jmp     loc_7144
.text:000000000000726A ; ---------------------------------------------------------------------------
.text:000000000000726F                 align 10h
.text:0000000000007270
.text:0000000000007270 loc_7270:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007270                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:0000000000007270                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000007275                 setz    dl
.text:0000000000007278
.text:0000000000007278 loc_7278:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000007278                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000007278                 test    rbp, rbp
.text:000000000000727B                 jnz     loc_702C
.text:0000000000007281
.text:0000000000007281 loc_7281:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000007281                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000007281                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000007286                 and     al, dl
.text:0000000000007288                 jz      loc_7038
.text:000000000000728E
.text:000000000000728E loc_728E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000728E                 mov     rbp, r11
.text:0000000000007291                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007299                 jmp     loc_7999
.text:0000000000007299 ; ---------------------------------------------------------------------------
.text:000000000000729E                 align 20h
.text:00000000000072A0
.text:00000000000072A0 loc_72A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000072A0                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:00000000000072A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000072A5                 setz    dl
.text:00000000000072A8                 xor     r12d, r12d
.text:00000000000072AB                 jmp     short loc_7281
.text:00000000000072AB ; ---------------------------------------------------------------------------
.text:00000000000072AD                 align 10h
.text:00000000000072B0
.text:00000000000072B0 loc_72B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000072B0                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:00000000000072B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000072B5                 mov     ebx, 20h ; ' '
.text:00000000000072BA                 setz    dl
.text:00000000000072BD                 jmp     short loc_7281
.text:00000000000072BD ; ---------------------------------------------------------------------------
.text:00000000000072BF                 align 20h
.text:00000000000072C0
.text:00000000000072C0 loc_72C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000072C0                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:00000000000072C0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000072C5                 mov     ebx, 72h ; 'r'
.text:00000000000072CA                 jmp     loc_7132
.text:00000000000072CA ; ---------------------------------------------------------------------------
.text:00000000000072CF                 align 10h
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000072D0                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:00000000000072D0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000072D5                 mov     ebx, 66h ; 'f'
.text:00000000000072DA                 jmp     loc_7144
.text:00000000000072DA ; ---------------------------------------------------------------------------
.text:00000000000072DF                 align 20h
.text:00000000000072E0
.text:00000000000072E0 loc_72E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000072E0                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:00000000000072E0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000072E5                 mov     ebx, 76h ; 'v'
.text:00000000000072EA                 jmp     loc_7144
.text:00000000000072EA ; ---------------------------------------------------------------------------
.text:00000000000072EF                 align 10h
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000072F0                                         ; DATA XREF: .rodata:jpt_6FFE↓o
.text:00000000000072F0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000072F5                 mov     ebx, 6Eh ; 'n'
.text:00000000000072FA                 jmp     loc_7132
.text:00000000000072FA ; ---------------------------------------------------------------------------
.text:00000000000072FF                 align 20h
.text:0000000000007300
.text:0000000000007300 def_738A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000007300                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000007300                                         ; DATA XREF: ...
.text:0000000000007300                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000007303                 nop     dword ptr [rax+rax+00h]
.text:0000000000007308
.text:0000000000007308 def_6FFE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000007308                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000007308                                         ; DATA XREF: ...
.text:0000000000007308                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000730E                 jnz     loc_76B8
.text:0000000000007314                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000007319                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000731E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000007323                 call    ___ctype_b_loc
.text:0000000000007328                 mov     rcx, [rax]
.text:000000000000732B                 movzx   edx, bl
.text:000000000000732E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000007334                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000733A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000733F                 mov     edi, 1
.text:0000000000007344                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000007348                 and     ax, 4000h
.text:000000000000734C                 setnz   r12b
.text:0000000000007350                 setz    al
.text:0000000000007353                 and     al, [rsp+0E8h+var_DB]
.text:0000000000007357
.text:0000000000007357 loc_7357:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000007357                 test    al, al
.text:0000000000007359                 jnz     loc_7CF1
.text:000000000000735F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007364                 setz    dl
.text:0000000000007367                 jmp     loc_7038
.text:0000000000007367 ; ---------------------------------------------------------------------------
.text:000000000000736C                 align 10h
.text:0000000000007370
.text:0000000000007370 loc_7370:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000007370                 movzx   ebx, byte ptr [r9]
.text:0000000000007374                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000007377                 ja      short def_738A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000007379                 lea     rcx, jpt_738A
.text:0000000000007380                 movzx   edx, bl
.text:0000000000007383                 movsxd  rax, ds:(jpt_738A - 1BFA8h)[rcx+rdx*4]
.text:0000000000007387                 add     rax, rcx
.text:000000000000738A                 jmp     rax             ; switch jump
.text:000000000000738A ; ---------------------------------------------------------------------------
.text:000000000000738C                 align 10h
.text:0000000000007390
.text:0000000000007390 loc_7390:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007390                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:0000000000007390                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000007393                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007398                 jnz     loc_718E
.text:000000000000739E                 xchg    ax, ax
.text:00000000000073A0
.text:00000000000073A0 loc_73A0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000073A0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000073A0                 mov     edx, 5Ch ; '\'
.text:00000000000073A5                 mov     ebx, 5Ch ; '\'
.text:00000000000073AA                 jmp     loc_7144
.text:00000000000073AA ; ---------------------------------------------------------------------------
.text:00000000000073AF                 align 10h
.text:00000000000073B0
.text:00000000000073B0 loc_73B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000073B0                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000073B0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000073B5                 xor     r10d, r10d
.text:00000000000073B8                 mov     ebx, 66h ; 'f'
.text:00000000000073BD                 jmp     loc_7144
.text:00000000000073BD ; ---------------------------------------------------------------------------
.text:00000000000073C2                 align 8
.text:00000000000073C8
.text:00000000000073C8 loc_73C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000073C8                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000073C8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000073CD                 xor     r10d, r10d
.text:00000000000073D0                 mov     ebx, 6Eh ; 'n'
.text:00000000000073D5                 jmp     loc_7132
.text:00000000000073D5 ; ---------------------------------------------------------------------------
.text:00000000000073DA                 align 20h
.text:00000000000073E0
.text:00000000000073E0 loc_73E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000073E0                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000073E0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000073E5                 jmp     loc_71B0
.text:00000000000073E5 ; ---------------------------------------------------------------------------
.text:00000000000073EA                 align 10h
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000073F0                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000073F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000073F3
.text:00000000000073F3 loc_73F3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000073F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000073F8                 setz    dl
.text:00000000000073FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007400                 jnz     loc_7F9A
.text:0000000000007406                 mov     eax, r8d
.text:0000000000007409                 mov     rcx, r15
.text:000000000000740C                 xor     eax, 1
.text:000000000000740F                 and     al, dl
.text:0000000000007411                 jz      short loc_7440
.text:0000000000007413                 cmp     r13, r15
.text:0000000000007416                 jbe     short loc_741D
.text:0000000000007418                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000741D
.text:000000000000741D loc_741D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000741D                 lea     rcx, [r15+1]
.text:0000000000007421                 cmp     r13, rcx
.text:0000000000007424                 jbe     short loc_742C
.text:0000000000007426                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000742C
.text:000000000000742C loc_742C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000742C                 lea     rcx, [r15+2]
.text:0000000000007430                 cmp     r13, rcx
.text:0000000000007433                 ja      loc_7A69
.text:0000000000007439
.text:0000000000007439 loc_7439:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000007439                 lea     rcx, [r15+3]
.text:000000000000743D                 mov     r8d, eax
.text:0000000000007440
.text:0000000000007440 loc_7440:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000007440                 cmp     r13, rcx
.text:0000000000007443                 jbe     short loc_744A
.text:0000000000007445                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000744A
.text:000000000000744A loc_744A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000744A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000744F                 lea     r15, [rcx+1]
.text:0000000000007453                 jz      loc_7A59
.text:0000000000007459                 lea     rax, [rbp+1]
.text:000000000000745D                 cmp     rax, r11
.text:0000000000007460                 jnb     short loc_747B
.text:0000000000007462                 mov     rax, [rsp+0E8h+s]
.text:0000000000007467                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000746C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000007470                 sub     eax, 30h ; '0'
.text:0000000000007473                 cmp     al, 9
.text:0000000000007475                 jbe     loc_7CA9
.text:000000000000747B
.text:000000000000747B loc_747B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000747B                 mov     eax, r12d
.text:000000000000747E                 mov     ebx, 30h ; '0'
.text:0000000000007483                 xor     r12d, r12d
.text:0000000000007486                 jmp     loc_7038
.text:0000000000007486 ; ---------------------------------------------------------------------------
.text:000000000000748B                 align 10h
.text:0000000000007490
.text:0000000000007490 loc_7490:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007490                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:0000000000007490                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000007495                 mov     r12d, r10d
.text:0000000000007498                 setz    dl
.text:000000000000749B                 xor     r10d, r10d
.text:000000000000749E                 xor     eax, eax
.text:00000000000074A0                 jmp     loc_7038
.text:00000000000074A0 ; ---------------------------------------------------------------------------
.text:00000000000074A5                 align 8
.text:00000000000074A8
.text:00000000000074A8 loc_74A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000074A8                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000074A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000074AD                 setz    dl
.text:00000000000074B0                 xor     r10d, r10d
.text:00000000000074B3                 jmp     loc_7278
.text:00000000000074B3 ; ---------------------------------------------------------------------------
.text:00000000000074B8                 align 20h
.text:00000000000074C0
.text:00000000000074C0 loc_74C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000074C0                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000074C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000074C5                 setz    dl
.text:00000000000074C8                 xor     r10d, r10d
.text:00000000000074CB                 xor     r12d, r12d
.text:00000000000074CE                 jmp     loc_7281
.text:00000000000074CE ; ---------------------------------------------------------------------------
.text:00000000000074D3                 align 8
.text:00000000000074D8
.text:00000000000074D8 loc_74D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000074D8                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000074D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000074DD                 mov     r12d, r10d
.text:00000000000074E0                 mov     ebx, 20h ; ' '
.text:00000000000074E5                 setz    dl
.text:00000000000074E8                 xor     r10d, r10d
.text:00000000000074EB                 jmp     loc_7281
.text:00000000000074F0 ; ---------------------------------------------------------------------------
.text:00000000000074F0
.text:00000000000074F0 loc_74F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000074F0                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:00000000000074F0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000074F5                 xor     r10d, r10d
.text:00000000000074F8                 mov     ebx, 72h ; 'r'
.text:00000000000074FD                 jmp     loc_7132
.text:00000000000074FD ; ---------------------------------------------------------------------------
.text:0000000000007502                 align 8
.text:0000000000007508
.text:0000000000007508 loc_7508:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007508                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:0000000000007508                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000750D                 jmp     loc_71B0
.text:000000000000750D ; ---------------------------------------------------------------------------
.text:0000000000007512                 align 8
.text:0000000000007518
.text:0000000000007518 loc_7518:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007518                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:0000000000007518                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000751D                 xor     r10d, r10d
.text:0000000000007520                 mov     ebx, 74h ; 't'
.text:0000000000007525                 jmp     loc_7132
.text:0000000000007525 ; ---------------------------------------------------------------------------
.text:000000000000752A                 align 10h
.text:0000000000007530
.text:0000000000007530 loc_7530:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007530                                         ; DATA XREF: .rodata:jpt_738A↓o
.text:0000000000007530                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000007535                 jmp     loc_71B0
.text:0000000000007535 ; ---------------------------------------------------------------------------
.text:000000000000753A                 align 20h
.text:0000000000007540
.text:0000000000007540 loc_7540:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000007540                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000007540                 xor     r10d, r10d
.text:0000000000007543                 jmp     loc_6FE0
.text:0000000000007543 ; ---------------------------------------------------------------------------
.text:0000000000007548                 align 10h
.text:0000000000007550
.text:0000000000007550 loc_7550:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000007550                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007555                 jnz     loc_7EC0
.text:000000000000755B
.text:000000000000755B loc_755B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000755B                 add     rbp, 1
.text:000000000000755F                 mov     eax, r8d
.text:0000000000007562                 xor     r12d, r12d
.text:0000000000007565                 mov     ebx, 5Ch ; '\'
.text:000000000000756A                 jmp     loc_707C
.text:000000000000756A ; ---------------------------------------------------------------------------
.text:000000000000756F                 align 10h
.text:0000000000007570
.text:0000000000007570 loc_7570:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000007570                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007575                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000757A                 mov     r12d, r8d
.text:000000000000757D                 mov     rbp, r11
.text:0000000000007580                 setz    dl
.text:0000000000007583                 mov     eax, ebx
.text:0000000000007585                 test    r15, r15
.text:0000000000007588                 setz    cl
.text:000000000000758B                 and     eax, edx
.text:000000000000758D                 and     al, cl
.text:000000000000758F                 jnz     loc_7FF6
.text:0000000000007595                 mov     eax, ebx
.text:0000000000007597                 xor     eax, 1
.text:000000000000759A                 and     dl, al
.text:000000000000759C                 jz      loc_7F0C
.text:00000000000075A2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000075A7                 jz      loc_7F0A
.text:00000000000075AD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000075B2                 jnz     loc_7FAD
.text:00000000000075B8                 test    r13, r13
.text:00000000000075BB                 setz    al
.text:00000000000075BE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000075C4                 setnz   dl
.text:00000000000075C7                 and     al, dl
.text:00000000000075C9                 jz      loc_7FEC
.text:00000000000075CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000075D4
.text:00000000000075D4 loc_75D4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000075D4                 lea     rbx, aIterCurPtr0+15h ; "'"
.text:00000000000075DB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000075DF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000075E7                 mov     r15d, 1
.text:00000000000075ED                 mov     [rsp+0E8h+n], 1
.text:00000000000075F6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000075FB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000007600                 mov     [rsp+0E8h+var_6C], al
.text:0000000000007604                 jmp     loc_6EE3
.text:0000000000007604 ; ---------------------------------------------------------------------------
.text:0000000000007609                 align 10h
.text:0000000000007610
.text:0000000000007610 loc_7610:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000007610                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007615                 jnz     loc_7EC0
.text:000000000000761B                 test    r13, r13
.text:000000000000761E                 jz      loc_7A20
.text:0000000000007624                 xor     edx, edx
.text:0000000000007626                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000762C                 jnz     loc_7A20
.text:0000000000007632
.text:0000000000007632 loc_7632:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000007632                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000007632                 mov     [rsp+0E8h+var_98], r13
.text:0000000000007637                 add     r15, 3
.text:000000000000763B                 xor     eax, eax
.text:000000000000763D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000007642                 xor     r8d, r8d
.text:0000000000007645                 mov     r13, rdx
.text:0000000000007648                 mov     ebx, 27h ; '''
.text:000000000000764D                 jmp     loc_7069
.text:000000000000764D ; ---------------------------------------------------------------------------
.text:0000000000007652                 align 8
.text:0000000000007658
.text:0000000000007658 loc_7658:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000007658                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000765D                 jz      short loc_7680
.text:000000000000765F                 lea     rcx, [rbp+2]
.text:0000000000007663                 cmp     rcx, r11
.text:0000000000007666                 jnb     short loc_7680
.text:0000000000007668                 mov     rax, [rsp+0E8h+s]
.text:000000000000766D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000007672                 jz      loc_7E02
.text:0000000000007678                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007680
.text:0000000000007680 loc_7680:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000007680                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000007680                 xor     edx, edx
.text:0000000000007682                 xor     r12d, r12d
.text:0000000000007685                 xor     eax, eax
.text:0000000000007687                 mov     ebx, 3Fh ; '?'
.text:000000000000768C                 jmp     loc_7038
.text:000000000000768C ; ---------------------------------------------------------------------------
.text:0000000000007691                 align 8
.text:0000000000007698
.text:0000000000007698 loc_7698:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000007698                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000769D                 jnz     loc_7EC0
.text:00000000000076A3                 xor     r12d, r12d
.text:00000000000076A6                 xor     eax, eax
.text:00000000000076A8                 mov     ebx, 3Fh ; '?'
.text:00000000000076AD                 jmp     loc_7069
.text:00000000000076AD ; ---------------------------------------------------------------------------
.text:00000000000076B2                 align 8
.text:00000000000076B8
.text:00000000000076B8 loc_76B8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000076B8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000076C0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000076C4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000076D0                 mov     [rsp+0E8h+ps], rax
.text:00000000000076D5                 jnz     short loc_7704
.text:00000000000076D7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000076DC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000076E1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000076E6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000076EB                 call    _strlen
.text:00000000000076F0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000076F6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000076FC                 mov     r11, rax
.text:00000000000076FF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000007704
.text:0000000000007704 loc_7704:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000007704                 lea     rax, [rsp+0E8h+wc]
.text:000000000000770C                 xor     ecx, ecx
.text:000000000000770E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000007712                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000007717                 mov     rbx, rcx
.text:000000000000771A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000007722                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000007727                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000772C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000007734                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000007739                 mov     [rsp+0E8h+var_78], r13
.text:000000000000773E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000007743
.text:0000000000007743 loc_7743:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000007743                 mov     rax, [rsp+0E8h+s]
.text:0000000000007748                 lea     r14, [rbp+rbx+0]
.text:000000000000774D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000007752                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000007757                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000775C                 lea     r13, [rax+r14]
.text:0000000000007760                 sub     rdx, r14
.text:0000000000007763                 mov     rsi, r13
.text:0000000000007766                 call    rpl_mbrtowc
.text:000000000000776B                 test    rax, rax
.text:000000000000776E                 mov     r15, rax
.text:0000000000007771                 jz      short loc_77C1
.text:0000000000007773                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007777                 jz      loc_7D95
.text:000000000000777D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000007781                 jz      loc_7D21
.text:0000000000007787                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000778C                 setz    al
.text:000000000000778F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000007793                 jnz     loc_7930
.text:0000000000007799
.text:0000000000007799 loc_7799:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000007799                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000007799                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000077A0                 call    _iswprint
.text:00000000000077A5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000077AA                 test    eax, eax
.text:00000000000077AC                 mov     eax, 0
.text:00000000000077B1                 cmovz   r12d, eax
.text:00000000000077B5                 add     rbx, r15
.text:00000000000077B8                 call    _mbsinit
.text:00000000000077BD                 test    eax, eax
.text:00000000000077BF                 jz      short loc_7743
.text:00000000000077C1
.text:00000000000077C1 loc_77C1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000077C1                 mov     edx, r12d
.text:00000000000077C4                 mov     rdi, rbx
.text:00000000000077C7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000077CD                 xor     edx, 1
.text:00000000000077D0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000077D5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000077DB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000077DF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000077E7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000077EC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000077F1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000077F6
.text:00000000000077F6 loc_77F6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000077F6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000077F6                 cmp     rdi, 1
.text:00000000000077FA                 jbe     loc_7DFB
.text:0000000000007800
.text:0000000000007800 loc_7800:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000007800                 mov     rcx, rdi
.text:0000000000007803                 xor     esi, esi
.text:0000000000007805                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000780B                 add     rcx, rbp
.text:000000000000780E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000007813                 jmp     loc_78CE
.text:0000000000007813 ; ---------------------------------------------------------------------------
.text:0000000000007818                 align 20h
.text:0000000000007820
.text:0000000000007820 loc_7820:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000007820                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007825                 setz    al
.text:0000000000007828                 test    r9b, r9b
.text:000000000000782B                 jnz     loc_7CE0
.text:0000000000007831                 mov     esi, r8d
.text:0000000000007834                 xor     esi, 1
.text:0000000000007837                 and     al, sil
.text:000000000000783A                 jz      short loc_786B
.text:000000000000783C                 cmp     r13, r15
.text:000000000000783F                 jbe     short loc_7846
.text:0000000000007841                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007846
.text:0000000000007846 loc_7846:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000007846                 lea     rsi, [r15+1]
.text:000000000000784A                 cmp     r13, rsi
.text:000000000000784D                 jbe     short loc_7855
.text:000000000000784F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000007855
.text:0000000000007855 loc_7855:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000007855                 lea     rsi, [r15+2]
.text:0000000000007859                 cmp     r13, rsi
.text:000000000000785C                 jbe     short loc_7864
.text:000000000000785E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007864
.text:0000000000007864 loc_7864:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000007864                 add     r15, 3
.text:0000000000007868                 mov     r8d, eax
.text:000000000000786B
.text:000000000000786B loc_786B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000786B                 cmp     r13, r15
.text:000000000000786E                 jbe     short loc_7875
.text:0000000000007870                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000007875
.text:0000000000007875 loc_7875:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000007875                 lea     rax, [r15+1]
.text:0000000000007879                 cmp     r13, rax
.text:000000000000787C                 jbe     short loc_788B
.text:000000000000787E                 mov     eax, ebx
.text:0000000000007880                 shr     al, 6
.text:0000000000007883                 add     eax, 30h ; '0'
.text:0000000000007886                 mov     [r14+r15+1], al
.text:000000000000788B
.text:000000000000788B loc_788B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000788B                 lea     rax, [r15+2]
.text:000000000000788F                 cmp     r13, rax
.text:0000000000007892                 jbe     short loc_78A4
.text:0000000000007894                 mov     eax, ebx
.text:0000000000007896                 shr     al, 3
.text:0000000000007899                 and     eax, 7
.text:000000000000789C                 add     eax, 30h ; '0'
.text:000000000000789F                 mov     [r14+r15+2], al
.text:00000000000078A4
.text:00000000000078A4 loc_78A4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000078A4                 and     ebx, 7
.text:00000000000078A7                 add     rbp, 1
.text:00000000000078AB                 add     r15, 3
.text:00000000000078AF                 add     ebx, 30h ; '0'
.text:00000000000078B2                 cmp     rbp, rcx
.text:00000000000078B5                 jnb     loc_70A0
.text:00000000000078BB                 mov     esi, edx
.text:00000000000078BD
.text:00000000000078BD loc_78BD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000078BD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000078BD                 cmp     r13, r15
.text:00000000000078C0                 jbe     short loc_78C6
.text:00000000000078C2                 mov     [r14+r15], bl
.text:00000000000078C6
.text:00000000000078C6 loc_78C6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000078C6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000078CA                 add     r15, 1
.text:00000000000078CE
.text:00000000000078CE loc_78CE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000078CE                 test    dl, dl
.text:00000000000078D0                 jnz     loc_7820
.text:00000000000078D6                 mov     eax, esi
.text:00000000000078D8                 xor     eax, 1
.text:00000000000078DB                 and     eax, r8d
.text:00000000000078DE                 test    r10b, r10b
.text:00000000000078E1                 jz      short loc_78F1
.text:00000000000078E3                 cmp     r13, r15
.text:00000000000078E6                 jbe     short loc_78ED
.text:00000000000078E8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000078ED
.text:00000000000078ED loc_78ED:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000078ED                 add     r15, 1
.text:00000000000078F1
.text:00000000000078F1 loc_78F1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000078F1                 add     rbp, 1
.text:00000000000078F5                 cmp     rbp, rcx
.text:00000000000078F8                 jnb     loc_707C
.text:00000000000078FE                 test    al, al
.text:0000000000007900                 jz      loc_7CFE
.text:0000000000007906                 cmp     r13, r15
.text:0000000000007909                 jbe     short loc_7910
.text:000000000000790B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007910
.text:0000000000007910 loc_7910:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000007910                 lea     rax, [r15+1]
.text:0000000000007914                 cmp     r13, rax
.text:0000000000007917                 jbe     short loc_791F
.text:0000000000007919                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000791F
.text:000000000000791F loc_791F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000791F                 add     r15, 2
.text:0000000000007923                 xor     r10d, r10d
.text:0000000000007926                 xor     r8d, r8d
.text:0000000000007929                 jmp     short loc_78BD
.text:0000000000007929 ; ---------------------------------------------------------------------------
.text:000000000000792B                 align 10h
.text:0000000000007930
.text:0000000000007930 loc_7930:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000007930                 cmp     r15, 1
.text:0000000000007934                 jz      loc_7799
.text:000000000000793A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000793F                 lea     rcx, [rdi+r15]
.text:0000000000007943                 lea     rdx, [rdi+r14+1]
.text:0000000000007948                 lea     r8, [rcx+r14]
.text:000000000000794C                 jmp     short loc_795D
.text:000000000000794C ; ---------------------------------------------------------------------------
.text:000000000000794E                 align 10h
.text:0000000000007950
.text:0000000000007950 loc_7950:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000007950                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000007950                 add     rdx, 1
.text:0000000000007954                 cmp     r8, rdx
.text:0000000000007957                 jz      loc_7799
.text:000000000000795D
.text:000000000000795D loc_795D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000795D                 movzx   ecx, byte ptr [rdx]
.text:0000000000007960                 sub     ecx, 5Bh ; '['
.text:0000000000007963                 cmp     cl, 21h ; '!'
.text:0000000000007966                 ja      short loc_7950
.text:0000000000007968                 mov     esi, 1
.text:000000000000796D                 shl     rsi, cl
.text:0000000000007970                 mov     rcx, rsi
.text:0000000000007973                 mov     rsi, 20000002Bh
.text:000000000000797D                 test    rcx, rsi
.text:0000000000007980                 jz      short loc_7950
.text:0000000000007982                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007987                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000798C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000007991                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007999
.text:0000000000007999 loc_7999:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000007999                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000007999                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000799E                 jz      short loc_79B0
.text:00000000000079A0                 test    al, al
.text:00000000000079A2                 mov     eax, 4
.text:00000000000079A7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000079AC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000079B0
.text:00000000000079B0 loc_79B0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000079B0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000079B0                 sub     rsp, 8
.text:00000000000079B4                 mov     rcx, rbp
.text:00000000000079B7                 mov     rsi, r13
.text:00000000000079BA                 push    [rsp+0F0h+var_88]
.text:00000000000079BE                 push    [rsp+0F8h+var_80]
.text:00000000000079C2                 mov     rdi, r14
.text:00000000000079C5                 push    0
.text:00000000000079C7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000079CF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000079D4                 mov     rdx, [rsp+108h+s]
.text:00000000000079D9                 and     r9d, 0FFFFFFFDh
.text:00000000000079DD                 call    quotearg_buffer_restyled
.text:00000000000079E2                 add     rsp, 20h
.text:00000000000079E6                 mov     r15, rax
.text:00000000000079E9
.text:00000000000079E9 loc_79E9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000079E9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000079E9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000079F1                 xor     rbx, fs:28h
.text:00000000000079FA                 mov     rax, r15
.text:00000000000079FD                 jnz     loc_8003
.text:0000000000007A03                 add     rsp, 0B8h
.text:0000000000007A0A                 pop     rbx
.text:0000000000007A0B                 pop     rbp
.text:0000000000007A0C                 pop     r12
.text:0000000000007A0E                 pop     r13
.text:0000000000007A10                 pop     r14
.text:0000000000007A12                 pop     r15
.text:0000000000007A14                 retn
.text:0000000000007A14 ; ---------------------------------------------------------------------------
.text:0000000000007A15                 align 8
.text:0000000000007A18
.text:0000000000007A18 loc_7A18:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000007A18                 mov     rbp, r11
.text:0000000000007A1B                 jmp     loc_7999
.text:0000000000007A20 ; ---------------------------------------------------------------------------
.text:0000000000007A20
.text:0000000000007A20 loc_7A20:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000007A20                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000007A20                 cmp     r13, r15
.text:0000000000007A23                 jbe     short loc_7A2A
.text:0000000000007A25                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007A2A
.text:0000000000007A2A loc_7A2A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000007A2A                 lea     rax, [r15+1]
.text:0000000000007A2E                 cmp     r13, rax
.text:0000000000007A31                 jbe     short loc_7A39
.text:0000000000007A33                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000007A39
.text:0000000000007A39 loc_7A39:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000007A39                 lea     rax, [r15+2]
.text:0000000000007A3D                 cmp     r13, rax
.text:0000000000007A40                 jbe     loc_8032
.text:0000000000007A46                 mov     rdx, r13
.text:0000000000007A49                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007A4F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000007A54                 jmp     loc_7632
.text:0000000000007A59 ; ---------------------------------------------------------------------------
.text:0000000000007A59
.text:0000000000007A59 loc_7A59:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000007A59                 mov     eax, r12d
.text:0000000000007A5C                 mov     ebx, 30h ; '0'
.text:0000000000007A61                 xor     r12d, r12d
.text:0000000000007A64                 jmp     loc_7069
.text:0000000000007A69 ; ---------------------------------------------------------------------------
.text:0000000000007A69
.text:0000000000007A69 loc_7A69:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000007A69                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007A6F                 jmp     loc_7439
.text:0000000000007A74 ; ---------------------------------------------------------------------------
.text:0000000000007A74
.text:0000000000007A74 loc_7A74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007A74                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007A74                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000007A76                 jnz     loc_6EA3        ; jumptable 00000000000121F1 case 1
.text:0000000000007A7C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007A81
.text:0000000000007A81 loc_7A81:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000007A81                 test    r13, r13
.text:0000000000007A84                 jnz     loc_801A
.text:0000000000007A8A                 lea     rax, aIterCurPtr0+15h ; "'"
.text:0000000000007A91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007A9A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007A9F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007AA4                 xor     r12d, r12d
.text:0000000000007AA7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007AAC                 mov     [rsp+0E8h+n], 1
.text:0000000000007AB5                 mov     [rsp+0E8h+s2], rax
.text:0000000000007ABA                 mov     r15d, 1
.text:0000000000007AC0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007AC8                 jmp     loc_6EE3
.text:0000000000007AC8 ; ---------------------------------------------------------------------------
.text:0000000000007ACD                 align 10h
.text:0000000000007AD0
.text:0000000000007AD0 loc_7AD0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007AD0                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007AD0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000007AD2                 jnz     loc_7ECD
.text:0000000000007AD8                 test    r13, r13
.text:0000000000007ADB                 jz      loc_7D06
.text:0000000000007AE1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000007AE5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007AEA                 xor     r12d, r12d
.text:0000000000007AED                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007AF2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007AFB
.text:0000000000007AFB loc_7AFB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000007AFB                 lea     rax, aS_0+4     ; "\""
.text:0000000000007B02                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007B07                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007B0C                 mov     [rsp+0E8h+n], 1
.text:0000000000007B15                 mov     r15d, 1
.text:0000000000007B1B                 mov     [rsp+0E8h+s2], rax
.text:0000000000007B20                 jmp     loc_6EE3
.text:0000000000007B25 ; ---------------------------------------------------------------------------
.text:0000000000007B25
.text:0000000000007B25 loc_7B25:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007B25                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007B25                 lea     rax, aS_0+4     ; jumptable 00000000000121F1 case 6
.text:0000000000007B2C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007B31                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007B36                 xor     r12d, r12d
.text:0000000000007B39                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007B42                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007B47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007B4C                 mov     [rsp+0E8h+n], 1
.text:0000000000007B55                 xor     r15d, r15d
.text:0000000000007B58                 mov     [rsp+0E8h+s2], rax
.text:0000000000007B5D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000007B65                 jmp     loc_6EE3
.text:0000000000007B6A ; ---------------------------------------------------------------------------
.text:0000000000007B6A
.text:0000000000007B6A loc_7B6A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007B6A                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007B6A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000007B6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007B74                 xor     r12d, r12d
.text:0000000000007B77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007B80                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007B85                 xor     r15d, r15d
.text:0000000000007B88                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007B8D                 mov     [rsp+0E8h+n], 0
.text:0000000000007B96                 mov     [rsp+0E8h+s2], 0
.text:0000000000007B9F                 jmp     loc_6EE3
.text:0000000000007BA4 ; ---------------------------------------------------------------------------
.text:0000000000007BA4
.text:0000000000007BA4 loc_7BA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007BA4                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007BA4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000007BA9                 jz      short loc_7C01
.text:0000000000007BAB                 lea     rsi, asc_1BD32  ; "`"
.text:0000000000007BB2                 xor     edi, edi        ; domainname
.text:0000000000007BB4                 mov     edx, 5          ; category
.text:0000000000007BB9                 call    _dcgettext
.text:0000000000007BBE                 mov     rcx, rax
.text:0000000000007BC1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000007BC6                 lea     rax, asc_1BD32  ; "`"
.text:0000000000007BCD                 cmp     rcx, rax
.text:0000000000007BD0                 jz      loc_7F6E
.text:0000000000007BD6
.text:0000000000007BD6 loc_7BD6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000007BD6                 lea     rsi, aIterCurPtr0+15h ; msgid
.text:0000000000007BDD                 xor     edi, edi        ; domainname
.text:0000000000007BDF                 mov     edx, 5          ; category
.text:0000000000007BE4                 call    _dcgettext
.text:0000000000007BE9                 mov     rcx, rax
.text:0000000000007BEC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000007BF1                 lea     rax, aIterCurPtr0+15h ; "'"
.text:0000000000007BF8                 cmp     rcx, rax
.text:0000000000007BFB                 jz      loc_7F84
.text:0000000000007C01
.text:0000000000007C01 loc_7C01:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000007C01                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000007C01                 xor     r15d, r15d
.text:0000000000007C04                 test    ebx, ebx
.text:0000000000007C06                 jz      loc_7DCD
.text:0000000000007C0C
.text:0000000000007C0C loc_7C0C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000007C0C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000007C0C                 test    ebx, ebx
.text:0000000000007C0E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000007C13                 setnz   [rsp+0E8h+var_D9]
.text:0000000000007C18                 xor     r12d, r12d
.text:0000000000007C1B                 mov     rdi, rbx        ; s
.text:0000000000007C1E                 call    _strlen
.text:0000000000007C23                 mov     [rsp+0E8h+s2], rbx
.text:0000000000007C28                 mov     [rsp+0E8h+n], rax
.text:0000000000007C2D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007C32                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007C37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007C40                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007C45                 jmp     loc_6EE3
.text:0000000000007C4A ; ---------------------------------------------------------------------------
.text:0000000000007C4A
.text:0000000000007C4A loc_7C4A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007C4A                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007C4A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000007C4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007C54                 xor     r12d, r12d
.text:0000000000007C57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007C60                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007C65                 xor     r15d, r15d
.text:0000000000007C68                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007C6D                 mov     [rsp+0E8h+n], 0
.text:0000000000007C76                 mov     [rsp+0E8h+s2], 0
.text:0000000000007C7F                 jmp     loc_6EE3
.text:0000000000007C84 ; ---------------------------------------------------------------------------
.text:0000000000007C84
.text:0000000000007C84 loc_7C84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007C84                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007C84                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000007C89                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007C8E                 xor     r12d, r12d
.text:0000000000007C91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007C9A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007C9F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007CA4                 jmp     loc_6EC3
.text:0000000000007CA9 ; ---------------------------------------------------------------------------
.text:0000000000007CA9
.text:0000000000007CA9 loc_7CA9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000007CA9                 cmp     r13, r15
.text:0000000000007CAC                 jbe     short loc_7CB3
.text:0000000000007CAE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000007CB3
.text:0000000000007CB3 loc_7CB3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000007CB3                 lea     rax, [rcx+2]
.text:0000000000007CB7                 cmp     r13, rax
.text:0000000000007CBA                 jbe     short loc_7CC2
.text:0000000000007CBC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000007CC2
.text:0000000000007CC2 loc_7CC2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000007CC2                 mov     eax, r12d
.text:0000000000007CC5                 lea     r15, [rcx+3]
.text:0000000000007CC9                 xor     r12d, r12d
.text:0000000000007CCC                 mov     ebx, 30h ; '0'
.text:0000000000007CD1                 jmp     loc_7038
.text:0000000000007CD1 ; ---------------------------------------------------------------------------
.text:0000000000007CD6                 align 20h
.text:0000000000007CE0
.text:0000000000007CE0 loc_7CE0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000007CE0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000007CE5                 mov     rbp, r11
.text:0000000000007CE8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000007CEC                 jmp     loc_7999
.text:0000000000007CF1 ; ---------------------------------------------------------------------------
.text:0000000000007CF1
.text:0000000000007CF1 loc_7CF1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000007CF1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000007CF6                 xor     r12d, r12d
.text:0000000000007CF9                 jmp     loc_7800
.text:0000000000007CFE ; ---------------------------------------------------------------------------
.text:0000000000007CFE
.text:0000000000007CFE loc_7CFE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000007CFE                 xor     r10d, r10d
.text:0000000000007D01                 jmp     loc_78BD
.text:0000000000007D06 ; ---------------------------------------------------------------------------
.text:0000000000007D06
.text:0000000000007D06 loc_7D06:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000007D06                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007D0F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007D14                 xor     r12d, r12d
.text:0000000000007D17                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007D1C                 jmp     loc_7AFB
.text:0000000000007D21 ; ---------------------------------------------------------------------------
.text:0000000000007D21
.text:0000000000007D21 loc_7D21:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000007D21                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000007D26                 mov     rsi, r14
.text:0000000000007D29                 mov     rcx, r13
.text:0000000000007D2C                 mov     rax, rbx
.text:0000000000007D2F                 mov     rdi, rbx
.text:0000000000007D32                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000007D38                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000007D3D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000007D45                 cmp     rsi, r11
.text:0000000000007D48                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000007D4E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000007D56                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007D5B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000007D60                 jnb     short loc_7D88
.text:0000000000007D62                 cmp     byte ptr [rcx], 0
.text:0000000000007D65                 jnz     short loc_7D77
.text:0000000000007D67                 jmp     short loc_7D88
.text:0000000000007D67 ; ---------------------------------------------------------------------------
.text:0000000000007D69                 align 10h
.text:0000000000007D70
.text:0000000000007D70 loc_7D70:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000007D70                 cmp     byte ptr [r9+rax], 0
.text:0000000000007D75                 jz      short loc_7D85
.text:0000000000007D77
.text:0000000000007D77 loc_7D77:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000007D77                 add     rax, 1
.text:0000000000007D7B                 lea     rdx, [rbp+rax+0]
.text:0000000000007D80                 cmp     r11, rdx
.text:0000000000007D83                 ja      short loc_7D70
.text:0000000000007D85
.text:0000000000007D85 loc_7D85:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000007D85                 mov     rdi, rax
.text:0000000000007D88
.text:0000000000007D88 loc_7D88:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000007D88                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000007D88                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000007D8D                 xor     r12d, r12d
.text:0000000000007D90                 jmp     loc_77F6
.text:0000000000007D95 ; ---------------------------------------------------------------------------
.text:0000000000007D95
.text:0000000000007D95 loc_7D95:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000007D95                 mov     rdi, rbx
.text:0000000000007D98                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000007D9E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000007DA3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000007DA9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000007DB1                 xor     r12d, r12d
.text:0000000000007DB4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007DB9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000007DBE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000007DC3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000007DC8                 jmp     loc_77F6
.text:0000000000007DCD ; ---------------------------------------------------------------------------
.text:0000000000007DCD
.text:0000000000007DCD loc_7DCD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000007DCD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000007DD2                 movzx   eax, byte ptr [rdx]
.text:0000000000007DD5                 test    al, al
.text:0000000000007DD7                 jz      loc_7C0C
.text:0000000000007DDD                 nop     dword ptr [rax]
.text:0000000000007DE0
.text:0000000000007DE0 loc_7DE0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000007DE0                 cmp     r13, r15
.text:0000000000007DE3                 jbe     short loc_7DE9
.text:0000000000007DE5                 mov     [r14+r15], al
.text:0000000000007DE9
.text:0000000000007DE9 loc_7DE9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000007DE9                 add     r15, 1
.text:0000000000007DED                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000007DF2                 test    al, al
.text:0000000000007DF4                 jnz     short loc_7DE0
.text:0000000000007DF6                 jmp     loc_7C0C
.text:0000000000007DFB ; ---------------------------------------------------------------------------
.text:0000000000007DFB
.text:0000000000007DFB loc_7DFB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000007DFB                 mov     eax, edx
.text:0000000000007DFD                 jmp     loc_7357
.text:0000000000007E02 ; ---------------------------------------------------------------------------
.text:0000000000007E02
.text:0000000000007E02 loc_7E02:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000007E02                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000007E06                 cmp     bl, 3Eh ; '>'
.text:0000000000007E09                 ja      loc_7680
.text:0000000000007E0F                 mov     rax, 7000A38200000000h
.text:0000000000007E19                 bt      rax, rbx
.text:0000000000007E1D                 jnb     loc_7680
.text:0000000000007E23                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007E28                 jnz     loc_8012
.text:0000000000007E2E                 cmp     r13, r15
.text:0000000000007E31                 jbe     short loc_7E38
.text:0000000000007E33                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000007E38
.text:0000000000007E38 loc_7E38:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000007E38                 lea     rax, [r15+1]
.text:0000000000007E3C                 cmp     r13, rax
.text:0000000000007E3F                 jbe     short loc_7E47
.text:0000000000007E41                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000007E47
.text:0000000000007E47 loc_7E47:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000007E47                 lea     rax, [r15+2]
.text:0000000000007E4B                 cmp     r13, rax
.text:0000000000007E4E                 jbe     short loc_7E56
.text:0000000000007E50                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000007E56
.text:0000000000007E56 loc_7E56:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000007E56                 lea     rax, [r15+3]
.text:0000000000007E5A                 cmp     r13, rax
.text:0000000000007E5D                 jbe     short loc_7E65
.text:0000000000007E5F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000007E65
.text:0000000000007E65 loc_7E65:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000007E65                 add     r15, 4
.text:0000000000007E69                 xor     edx, edx
.text:0000000000007E6B                 xor     r12d, r12d
.text:0000000000007E6E                 xor     eax, eax
.text:0000000000007E70                 mov     rbp, rcx
.text:0000000000007E73                 jmp     loc_7038
.text:0000000000007E78 ; ---------------------------------------------------------------------------
.text:0000000000007E78
.text:0000000000007E78 loc_7E78:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007E78                                         ; DATA XREF: .rodata:jpt_6EA1↓o
.text:0000000000007E78                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000007E7A                 jz      loc_8008
.text:0000000000007E80                 lea     rax, aIterCurPtr0+15h ; "'"
.text:0000000000007E87                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007E8C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007E91                 xor     r12d, r12d
.text:0000000000007E94                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007E9D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007EA2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007EA7                 mov     [rsp+0E8h+n], 1
.text:0000000000007EB0                 xor     r15d, r15d
.text:0000000000007EB3                 mov     [rsp+0E8h+s2], rax
.text:0000000000007EB8                 jmp     loc_6EE3
.text:0000000000007EB8 ; ---------------------------------------------------------------------------
.text:0000000000007EBD                 align 20h
.text:0000000000007EC0
.text:0000000000007EC0 loc_7EC0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000007EC0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000007EC0                 mov     rbp, r11
.text:0000000000007EC3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000007EC8                 jmp     loc_7999
.text:0000000000007ECD ; ---------------------------------------------------------------------------
.text:0000000000007ECD
.text:0000000000007ECD loc_7ECD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000007ECD                 lea     rax, aS_0+4     ; "\""
.text:0000000000007ED4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007ED9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007EDE                 xor     r12d, r12d
.text:0000000000007EE1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007EEA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007EEF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007EF4                 mov     [rsp+0E8h+n], 1
.text:0000000000007EFD                 xor     r15d, r15d
.text:0000000000007F00                 mov     [rsp+0E8h+s2], rax
.text:0000000000007F05                 jmp     loc_6EE3
.text:0000000000007F0A ; ---------------------------------------------------------------------------
.text:0000000000007F0A
.text:0000000000007F0A loc_7F0A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000007F0A                 mov     eax, edx
.text:0000000000007F0C
.text:0000000000007F0C loc_7F0C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000007F0C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000007F0C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000007F11                 test    rbx, rbx
.text:0000000000007F14                 jz      short loc_7F42
.text:0000000000007F16                 test    al, al
.text:0000000000007F18                 jz      short loc_7F42
.text:0000000000007F1A                 movzx   ecx, byte ptr [rbx]
.text:0000000000007F1D                 mov     rax, rbx
.text:0000000000007F20                 test    cl, cl
.text:0000000000007F22                 jz      short loc_7F42
.text:0000000000007F24                 mov     rdx, r15
.text:0000000000007F27                 sub     rax, r15
.text:0000000000007F2A
.text:0000000000007F2A loc_7F2A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000007F2A                 cmp     r13, rdx
.text:0000000000007F2D                 jbe     short loc_7F33
.text:0000000000007F2F                 mov     [r14+rdx], cl
.text:0000000000007F33
.text:0000000000007F33 loc_7F33:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000007F33                 add     rdx, 1
.text:0000000000007F37                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000007F3B                 test    cl, cl
.text:0000000000007F3D                 jnz     short loc_7F2A
.text:0000000000007F3F                 mov     r15, rdx
.text:0000000000007F42
.text:0000000000007F42 loc_7F42:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000007F42                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000007F42                 cmp     r13, r15
.text:0000000000007F45                 jbe     loc_79E9
.text:0000000000007F4B                 mov     byte ptr [r14+r15], 0
.text:0000000000007F50                 jmp     loc_79E9
.text:0000000000007F55 ; ---------------------------------------------------------------------------
.text:0000000000007F55
.text:0000000000007F55 loc_7F55:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000007F55                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007F5A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000007F5F                 mov     rbp, r11
.text:0000000000007F62                 setz    al
.text:0000000000007F65                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000007F69                 jmp     loc_7999
.text:0000000000007F6E ; ---------------------------------------------------------------------------
.text:0000000000007F6E
.text:0000000000007F6E loc_7F6E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000007F6E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000007F72                 mov     rdi, rcx
.text:0000000000007F75                 call    gettext_quote
.text:0000000000007F7A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000007F7F                 jmp     loc_7BD6
.text:0000000000007F84 ; ---------------------------------------------------------------------------
.text:0000000000007F84
.text:0000000000007F84 loc_7F84:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000007F84                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000007F88                 mov     rdi, rcx
.text:0000000000007F8B                 call    gettext_quote
.text:0000000000007F90                 mov     [rsp+0E8h+var_88], rax
.text:0000000000007F95                 jmp     loc_7C01
.text:0000000000007F9A ; ---------------------------------------------------------------------------
.text:0000000000007F9A
.text:0000000000007F9A loc_7F9A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000007F9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000007F9F                 mov     rbp, r11
.text:0000000000007FA2                 mov     eax, edx
.text:0000000000007FA4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000007FA8                 jmp     loc_7999
.text:0000000000007FAD ; ---------------------------------------------------------------------------
.text:0000000000007FAD
.text:0000000000007FAD loc_7FAD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000007FAD                 sub     rsp, 8
.text:0000000000007FB1                 mov     r8d, 5
.text:0000000000007FB7                 mov     rcx, r11
.text:0000000000007FBA                 push    [rsp+0F0h+var_88]
.text:0000000000007FBE                 push    [rsp+0F8h+var_80]
.text:0000000000007FC2                 mov     rdi, r14
.text:0000000000007FC5                 push    [rsp+100h+var_C8]
.text:0000000000007FC9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000007FD1                 mov     rdx, [rsp+108h+s]
.text:0000000000007FD6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000007FDB                 call    quotearg_buffer_restyled
.text:0000000000007FE0                 add     rsp, 20h
.text:0000000000007FE4                 mov     r15, rax
.text:0000000000007FE7                 jmp     loc_79E9
.text:0000000000007FEC ; ---------------------------------------------------------------------------
.text:0000000000007FEC
.text:0000000000007FEC loc_7FEC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000007FEC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000007FF1                 jmp     loc_7F0C
.text:0000000000007FF6 ; ---------------------------------------------------------------------------
.text:0000000000007FF6
.text:0000000000007FF6 loc_7FF6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000007FF6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007FFE                 jmp     loc_7999
.text:0000000000008003 ; ---------------------------------------------------------------------------
.text:0000000000008003
.text:0000000000008003 loc_8003:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000008003                 call    ___stack_chk_fail
.text:0000000000008008 ; ---------------------------------------------------------------------------
.text:0000000000008008
.text:0000000000008008 loc_8008:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000008008                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000800D                 jmp     loc_7A81
.text:0000000000008012 ; ---------------------------------------------------------------------------
.text:0000000000008012
.text:0000000000008012 loc_8012:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000008012                 mov     rbp, r11
.text:0000000000008015                 jmp     loc_79B0
.text:000000000000801A ; ---------------------------------------------------------------------------
.text:000000000000801A
.text:000000000000801A loc_801A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000801A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000801F                 xor     eax, eax
.text:0000000000008021                 xor     r12d, r12d
.text:0000000000008024                 mov     [rsp+0E8h+var_98], 0
.text:000000000000802D                 jmp     loc_75D4
.text:0000000000008032 ; ---------------------------------------------------------------------------
.text:0000000000008032
.text:0000000000008032 loc_8032:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000008032                 mov     rdx, r13
.text:0000000000008035                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000803A                 jmp     loc_7632
.text:000000000000803F ; ---------------------------------------------------------------------------
.text:000000000000803F
.text:000000000000803F def_6EA1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000803F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000803F ; } // starts at 6E10
.text:000000000000803F quotearg_buffer_restyled endp
.text:000000000000803F
.text:000000000000803F ; ---------------------------------------------------------------------------
.text:0000000000008044                 align 10h
.text:0000000000008050
.text:0000000000008050 ; =============== S U B R O U T I N E =======================================
.text:0000000000008050
.text:0000000000008050
.text:0000000000008050 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000008050                                         ; quotearg_n_mem+7↓j ...
.text:0000000000008050
.text:0000000000008050 var_50          = qword ptr -50h
.text:0000000000008050 var_48          = qword ptr -48h
.text:0000000000008050 var_40          = dword ptr -40h
.text:0000000000008050 var_3C          = dword ptr -3Ch
.text:0000000000008050
.text:0000000000008050 ; __unwind {
.text:0000000000008050                 push    r15
.text:0000000000008052                 push    r14
.text:0000000000008054                 movsxd  r15, edi
.text:0000000000008057                 push    r13
.text:0000000000008059                 push    r12
.text:000000000000805B                 mov     r14, rdx
.text:000000000000805E                 push    rbp
.text:000000000000805F                 push    rbx
.text:0000000000008060                 mov     rbp, rcx
.text:0000000000008063                 sub     rsp, 28h
.text:0000000000008067                 mov     [rsp+58h+var_50], rsi
.text:000000000000806C                 call    ___errno_location
.text:0000000000008071                 mov     r13, rax
.text:0000000000008074                 mov     eax, [rax]
.text:0000000000008076                 test    r15d, r15d
.text:0000000000008079                 mov     rbx, cs:slotvec
.text:0000000000008080                 mov     [rsp+58h+var_40], eax
.text:0000000000008084                 js      loc_81F1
.text:000000000000808A                 cmp     cs:nslots, r15d
.text:0000000000008091                 jg      short loc_80F5
.text:0000000000008093                 cmp     r15d, 7FFFFFFFh
.text:000000000000809A                 jz      loc_81F6
.text:00000000000080A0                 lea     r12d, [r15+1]
.text:00000000000080A4                 lea     rax, slotvec0
.text:00000000000080AB                 movsxd  rsi, r12d
.text:00000000000080AE                 shl     rsi, 4
.text:00000000000080B2                 cmp     rbx, rax
.text:00000000000080B5                 jz      loc_81D0
.text:00000000000080BB                 mov     rdi, rbx
.text:00000000000080BE                 call    xrealloc
.text:00000000000080C3                 mov     rbx, rax
.text:00000000000080C6                 mov     cs:slotvec, rax
.text:00000000000080CD
.text:00000000000080CD loc_80CD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000080CD                 movsxd  rdi, cs:nslots
.text:00000000000080D4                 mov     edx, r12d
.text:00000000000080D7                 xor     esi, esi        ; c
.text:00000000000080D9                 sub     edx, edi
.text:00000000000080DB                 shl     rdi, 4
.text:00000000000080DF                 movsxd  rdx, edx
.text:00000000000080E2                 add     rdi, rbx        ; s
.text:00000000000080E5                 shl     rdx, 4          ; n
.text:00000000000080E9                 call    _memset
.text:00000000000080EE                 mov     cs:nslots, r12d
.text:00000000000080F5
.text:00000000000080F5 loc_80F5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000080F5                 mov     eax, [rbp+4]
.text:00000000000080F8                 shl     r15, 4
.text:00000000000080FC                 sub     rsp, 8
.text:0000000000008100                 add     rbx, r15
.text:0000000000008103                 lea     r15, [rbp+8]
.text:0000000000008107                 mov     r8d, [rbp+0]
.text:000000000000810B                 mov     r11, [rbx]
.text:000000000000810E                 mov     r12, [rbx+8]
.text:0000000000008112                 mov     rcx, r14
.text:0000000000008115                 or      eax, 1
.text:0000000000008118                 mov     [rsp+60h+var_3C], eax
.text:000000000000811C                 push    qword ptr [rbp+30h]
.text:000000000000811F                 mov     r9d, eax
.text:0000000000008122                 push    qword ptr [rbp+28h]
.text:0000000000008125                 push    r15
.text:0000000000008127                 mov     rsi, r11
.text:000000000000812A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000812F                 mov     rdi, r12
.text:0000000000008132                 mov     [rsp+78h+var_48], r11
.text:0000000000008137                 call    quotearg_buffer_restyled
.text:000000000000813C                 add     rsp, 20h
.text:0000000000008140                 mov     r11, [rsp+58h+var_48]
.text:0000000000008145                 cmp     r11, rax
.text:0000000000008148                 ja      short loc_81B1
.text:000000000000814A                 lea     rsi, [rax+1]
.text:000000000000814E                 lea     rax, slot0
.text:0000000000008155                 cmp     r12, rax
.text:0000000000008158                 mov     [rbx], rsi
.text:000000000000815B                 jz      short loc_816F
.text:000000000000815D                 mov     rdi, r12        ; ptr
.text:0000000000008160                 mov     [rsp+58h+var_48], rsi
.text:0000000000008165                 call    _free
.text:000000000000816A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000816F
.text:000000000000816F loc_816F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000816F                 mov     rdi, rsi
.text:0000000000008172                 mov     [rsp+58h+var_48], rsi
.text:0000000000008177                 call    xmalloc
.text:000000000000817C                 sub     rsp, 8
.text:0000000000008180                 mov     [rbx+8], rax
.text:0000000000008184                 mov     r8d, [rbp+0]
.text:0000000000008188                 push    qword ptr [rbp+30h]
.text:000000000000818B                 push    qword ptr [rbp+28h]
.text:000000000000818E                 mov     rcx, r14
.text:0000000000008191                 push    r15
.text:0000000000008193                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000008198                 mov     rdi, rax
.text:000000000000819B                 mov     rdx, [rsp+78h+var_50]
.text:00000000000081A0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000081A5                 mov     r12, rax
.text:00000000000081A8                 call    quotearg_buffer_restyled
.text:00000000000081AD                 add     rsp, 20h
.text:00000000000081B1
.text:00000000000081B1 loc_81B1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000081B1                 mov     eax, [rsp+58h+var_40]
.text:00000000000081B5                 mov     [r13+0], eax
.text:00000000000081B9                 add     rsp, 28h
.text:00000000000081BD                 mov     rax, r12
.text:00000000000081C0                 pop     rbx
.text:00000000000081C1                 pop     rbp
.text:00000000000081C2                 pop     r12
.text:00000000000081C4                 pop     r13
.text:00000000000081C6                 pop     r14
.text:00000000000081C8                 pop     r15
.text:00000000000081CA                 retn
.text:00000000000081CA ; ---------------------------------------------------------------------------
.text:00000000000081CB                 align 10h
.text:00000000000081D0
.text:00000000000081D0 loc_81D0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000081D0                 xor     edi, edi
.text:00000000000081D2                 call    xrealloc
.text:00000000000081D7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000081DF                 mov     rbx, rax
.text:00000000000081E2                 mov     cs:slotvec, rax
.text:00000000000081E9                 movups  xmmword ptr [rax], xmm0
.text:00000000000081EC                 jmp     loc_80CD
.text:00000000000081F1 ; ---------------------------------------------------------------------------
.text:00000000000081F1
.text:00000000000081F1 loc_81F1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000081F1                 call    _abort
.text:00000000000081F6 ; ---------------------------------------------------------------------------
.text:00000000000081F6
.text:00000000000081F6 loc_81F6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000081F6                 call    xalloc_die
.text:00000000000081F6 ; } // starts at 8050
.text:00000000000081F6 quotearg_n_options endp
.text:00000000000081F6
.text:00000000000081F6 ; ---------------------------------------------------------------------------
.text:00000000000081FB                 align 20h
.text:0000000000008200
.text:0000000000008200 ; =============== S U B R O U T I N E =======================================
.text:0000000000008200
.text:0000000000008200 ; Attributes: info_from_lumina
.text:0000000000008200
.text:0000000000008200 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000008200                 public clone_quoting_options
.text:0000000000008200 clone_quoting_options proc near
.text:0000000000008200 ; __unwind {
.text:0000000000008200                 push    r12
.text:0000000000008202                 push    rbp
.text:0000000000008203                 push    rbx
.text:0000000000008204                 mov     rbx, rdi
.text:0000000000008207                 call    ___errno_location
.text:000000000000820C                 mov     r12d, [rax]
.text:000000000000820F                 mov     rbp, rax
.text:0000000000008212                 lea     rax, default_quoting_options
.text:0000000000008219                 test    rbx, rbx
.text:000000000000821C                 mov     esi, 38h ; '8'  ; n
.text:0000000000008221                 cmovz   rbx, rax
.text:0000000000008225                 mov     rdi, rbx        ; src
.text:0000000000008228                 call    xmemdup
.text:000000000000822D                 mov     [rbp+0], r12d
.text:0000000000008231                 pop     rbx
.text:0000000000008232                 pop     rbp
.text:0000000000008233                 pop     r12
.text:0000000000008235                 retn
.text:0000000000008235 ; } // starts at 8200
.text:0000000000008235 clone_quoting_options endp
.text:0000000000008235
.text:0000000000008235 ; ---------------------------------------------------------------------------
.text:0000000000008236                 align 20h
.text:0000000000008240
.text:0000000000008240 ; =============== S U B R O U T I N E =======================================
.text:0000000000008240
.text:0000000000008240
.text:0000000000008240                 public get_quoting_style
.text:0000000000008240 get_quoting_style proc near
.text:0000000000008240 ; __unwind {
.text:0000000000008240                 lea     rax, default_quoting_options
.text:0000000000008247                 test    rdi, rdi
.text:000000000000824A                 cmovz   rdi, rax
.text:000000000000824E                 mov     eax, [rdi]
.text:0000000000008250                 retn
.text:0000000000008250 ; } // starts at 8240
.text:0000000000008250 get_quoting_style endp
.text:0000000000008250
.text:0000000000008250 ; ---------------------------------------------------------------------------
.text:0000000000008251                 align 20h
.text:0000000000008260
.text:0000000000008260 ; =============== S U B R O U T I N E =======================================
.text:0000000000008260
.text:0000000000008260
.text:0000000000008260                 public set_quoting_style
.text:0000000000008260 set_quoting_style proc near
.text:0000000000008260 ; __unwind {
.text:0000000000008260                 lea     rax, default_quoting_options
.text:0000000000008267                 test    rdi, rdi
.text:000000000000826A                 cmovz   rdi, rax
.text:000000000000826E                 mov     [rdi], esi
.text:0000000000008270                 retn
.text:0000000000008270 ; } // starts at 8260
.text:0000000000008270 set_quoting_style endp
.text:0000000000008270
.text:0000000000008270 ; ---------------------------------------------------------------------------
.text:0000000000008271                 align 20h
.text:0000000000008280
.text:0000000000008280 ; =============== S U B R O U T I N E =======================================
.text:0000000000008280
.text:0000000000008280 ; Attributes: info_from_lumina
.text:0000000000008280
.text:0000000000008280 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000008280                 public set_char_quoting
.text:0000000000008280 set_char_quoting proc near
.text:0000000000008280 ; __unwind {
.text:0000000000008280                 lea     rax, default_quoting_options
.text:0000000000008287                 test    rdi, rdi
.text:000000000000828A                 mov     ecx, esi
.text:000000000000828C                 cmovz   rdi, rax
.text:0000000000008290                 mov     eax, esi
.text:0000000000008292                 and     ecx, 1Fh
.text:0000000000008295                 shr     al, 5
.text:0000000000008298                 movzx   eax, al
.text:000000000000829B                 lea     rdi, [rdi+rax*4+8]
.text:00000000000082A0                 mov     esi, [rdi]
.text:00000000000082A2                 mov     eax, esi
.text:00000000000082A4                 shr     eax, cl
.text:00000000000082A6                 xor     edx, eax
.text:00000000000082A8                 and     eax, 1
.text:00000000000082AB                 and     edx, 1
.text:00000000000082AE                 shl     edx, cl
.text:00000000000082B0                 xor     edx, esi
.text:00000000000082B2                 mov     [rdi], edx
.text:00000000000082B4                 retn
.text:00000000000082B4 ; } // starts at 8280
.text:00000000000082B4 set_char_quoting endp
.text:00000000000082B4
.text:00000000000082B4 ; ---------------------------------------------------------------------------
.text:00000000000082B5                 align 20h
.text:00000000000082C0
.text:00000000000082C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082C0
.text:00000000000082C0
.text:00000000000082C0                 public set_quoting_flags
.text:00000000000082C0 set_quoting_flags proc near
.text:00000000000082C0 ; __unwind {
.text:00000000000082C0                 lea     rax, default_quoting_options
.text:00000000000082C7                 test    rdi, rdi
.text:00000000000082CA                 cmovz   rdi, rax
.text:00000000000082CE                 mov     eax, [rdi+4]
.text:00000000000082D1                 mov     [rdi+4], esi
.text:00000000000082D4                 retn
.text:00000000000082D4 ; } // starts at 82C0
.text:00000000000082D4 set_quoting_flags endp
.text:00000000000082D4
.text:00000000000082D4 ; ---------------------------------------------------------------------------
.text:00000000000082D5                 align 20h
.text:00000000000082E0
.text:00000000000082E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082E0
.text:00000000000082E0 ; Attributes: info_from_lumina
.text:00000000000082E0
.text:00000000000082E0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000082E0                 public set_custom_quoting
.text:00000000000082E0 set_custom_quoting proc near
.text:00000000000082E0 ; __unwind {
.text:00000000000082E0                 lea     rax, default_quoting_options
.text:00000000000082E7                 test    rdi, rdi
.text:00000000000082EA                 cmovz   rdi, rax
.text:00000000000082EE                 test    rsi, rsi
.text:00000000000082F1                 mov     dword ptr [rdi], 0Ah
.text:00000000000082F7                 jz      short loc_8307
.text:00000000000082F9                 test    rdx, rdx
.text:00000000000082FC                 jz      short loc_8307
.text:00000000000082FE                 mov     [rdi+28h], rsi
.text:0000000000008302                 mov     [rdi+30h], rdx
.text:0000000000008306                 retn
.text:0000000000008307 ; ---------------------------------------------------------------------------
.text:0000000000008307
.text:0000000000008307 loc_8307:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000008307                                         ; set_custom_quoting+1C↑j
.text:0000000000008307                 sub     rsp, 8
.text:000000000000830B                 call    _abort
.text:000000000000830B ; } // starts at 82E0
.text:000000000000830B set_custom_quoting endp
.text:000000000000830B
.text:0000000000008310
.text:0000000000008310 ; =============== S U B R O U T I N E =======================================
.text:0000000000008310
.text:0000000000008310 ; Attributes: info_from_lumina
.text:0000000000008310
.text:0000000000008310 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000008310                 public quotearg_buffer
.text:0000000000008310 quotearg_buffer proc near
.text:0000000000008310
.text:0000000000008310 var_40          = qword ptr -40h
.text:0000000000008310
.text:0000000000008310 ; __unwind {
.text:0000000000008310                 push    r15
.text:0000000000008312                 push    r14
.text:0000000000008314                 lea     rax, default_quoting_options
.text:000000000000831B                 push    r13
.text:000000000000831D                 push    r12
.text:000000000000831F                 mov     r13, rdi
.text:0000000000008322                 push    rbp
.text:0000000000008323                 push    rbx
.text:0000000000008324                 mov     rbx, r8
.text:0000000000008327                 mov     r14, rsi
.text:000000000000832A                 mov     r15, rdx
.text:000000000000832D                 sub     rsp, 18h
.text:0000000000008331                 test    r8, r8
.text:0000000000008334                 cmovz   rbx, rax
.text:0000000000008338                 mov     [rsp+48h+var_40], rcx
.text:000000000000833D                 call    ___errno_location
.text:0000000000008342                 mov     r12d, [rax]
.text:0000000000008345                 mov     rbp, rax
.text:0000000000008348                 lea     rax, [rbx+8]
.text:000000000000834C                 sub     rsp, 8
.text:0000000000008350                 mov     r9d, [rbx+4]
.text:0000000000008354                 push    qword ptr [rbx+30h]
.text:0000000000008357                 mov     r8d, [rbx]
.text:000000000000835A                 push    qword ptr [rbx+28h]
.text:000000000000835D                 mov     rdx, r15
.text:0000000000008360                 push    rax
.text:0000000000008361                 mov     rcx, [rsp+68h+var_40]
.text:0000000000008366                 mov     rsi, r14
.text:0000000000008369                 mov     rdi, r13
.text:000000000000836C                 call    quotearg_buffer_restyled
.text:0000000000008371                 mov     [rbp+0], r12d
.text:0000000000008375                 add     rsp, 38h
.text:0000000000008379                 pop     rbx
.text:000000000000837A                 pop     rbp
.text:000000000000837B                 pop     r12
.text:000000000000837D                 pop     r13
.text:000000000000837F                 pop     r14
.text:0000000000008381                 pop     r15
.text:0000000000008383                 retn
.text:0000000000008383 ; } // starts at 8310
.text:0000000000008383 quotearg_buffer endp
.text:0000000000008383
.text:0000000000008383 ; ---------------------------------------------------------------------------
.text:0000000000008384                 align 10h
.text:0000000000008390
.text:0000000000008390 ; =============== S U B R O U T I N E =======================================
.text:0000000000008390
.text:0000000000008390 ; Attributes: info_from_lumina
.text:0000000000008390
.text:0000000000008390 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000008390                 public quotearg_alloc_mem
.text:0000000000008390 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000008390
.text:0000000000008390 var_5C          = dword ptr -5Ch
.text:0000000000008390 var_58          = qword ptr -58h
.text:0000000000008390 var_50          = qword ptr -50h
.text:0000000000008390 var_48          = qword ptr -48h
.text:0000000000008390 var_40          = qword ptr -40h
.text:0000000000008390
.text:0000000000008390 ; __unwind {
.text:0000000000008390                 push    r15
.text:0000000000008392                 push    r14
.text:0000000000008394                 lea     rax, default_quoting_options
.text:000000000000839B                 push    r13
.text:000000000000839D                 push    r12
.text:000000000000839F                 mov     r12, rdx
.text:00000000000083A2                 push    rbp
.text:00000000000083A3                 push    rbx
.text:00000000000083A4                 mov     rbx, rcx
.text:00000000000083A7                 mov     r14, rdi
.text:00000000000083AA                 mov     r15, rsi
.text:00000000000083AD                 sub     rsp, 38h
.text:00000000000083B1                 test    rcx, rcx
.text:00000000000083B4                 cmovz   rbx, rax
.text:00000000000083B8                 xor     ebp, ebp
.text:00000000000083BA                 call    ___errno_location
.text:00000000000083BF                 test    r12, r12
.text:00000000000083C2                 mov     r13, rax
.text:00000000000083C5                 mov     eax, [rax]
.text:00000000000083C7                 setz    bpl
.text:00000000000083CB                 or      ebp, [rbx+4]
.text:00000000000083CE                 lea     r10, [rbx+8]
.text:00000000000083D2                 sub     rsp, 8
.text:00000000000083D6                 mov     r8d, [rbx]
.text:00000000000083D9                 mov     rcx, r15
.text:00000000000083DC                 mov     [rsp+70h+var_5C], eax
.text:00000000000083E0                 push    qword ptr [rbx+30h]
.text:00000000000083E3                 mov     rdx, r14
.text:00000000000083E6                 push    qword ptr [rbx+28h]
.text:00000000000083E9                 push    r10
.text:00000000000083EB                 xor     esi, esi
.text:00000000000083ED                 mov     r9d, ebp
.text:00000000000083F0                 xor     edi, edi
.text:00000000000083F2                 mov     [rsp+88h+var_48], r10
.text:00000000000083F7                 call    quotearg_buffer_restyled
.text:00000000000083FC                 lea     rsi, [rax+1]
.text:0000000000008400                 mov     [rsp+88h+var_40], rax
.text:0000000000008405                 add     rsp, 20h
.text:0000000000008409                 mov     rdi, rsi
.text:000000000000840C                 mov     [rsp+68h+var_50], rsi
.text:0000000000008411                 call    xmalloc
.text:0000000000008416                 mov     [rsp+68h+var_58], rax
.text:000000000000841B                 sub     rsp, 8
.text:000000000000841F                 push    qword ptr [rbx+30h]
.text:0000000000008422                 push    qword ptr [rbx+28h]
.text:0000000000008425                 mov     r10, [rsp+80h+var_48]
.text:000000000000842A                 mov     r9d, ebp
.text:000000000000842D                 mov     r8d, [rbx]
.text:0000000000008430                 mov     rcx, r15
.text:0000000000008433                 mov     rdx, r14
.text:0000000000008436                 mov     rdi, rax
.text:0000000000008439                 push    r10
.text:000000000000843B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000008440                 call    quotearg_buffer_restyled
.text:0000000000008445                 mov     eax, [rsp+88h+var_5C]
.text:0000000000008449                 add     rsp, 20h
.text:000000000000844D                 test    r12, r12
.text:0000000000008450                 mov     [r13+0], eax
.text:0000000000008454                 jz      short loc_845F
.text:0000000000008456                 mov     r11, [rsp+68h+var_40]
.text:000000000000845B                 mov     [r12], r11
.text:000000000000845F
.text:000000000000845F loc_845F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000845F                 mov     rax, [rsp+68h+var_58]
.text:0000000000008464                 add     rsp, 38h
.text:0000000000008468                 pop     rbx
.text:0000000000008469                 pop     rbp
.text:000000000000846A                 pop     r12
.text:000000000000846C                 pop     r13
.text:000000000000846E                 pop     r14
.text:0000000000008470                 pop     r15
.text:0000000000008472                 retn
.text:0000000000008472 ; } // starts at 8390
.text:0000000000008472 quotearg_alloc_mem endp
.text:0000000000008472
.text:0000000000008472 ; ---------------------------------------------------------------------------
.text:0000000000008473                 align 20h
.text:0000000000008480
.text:0000000000008480 ; =============== S U B R O U T I N E =======================================
.text:0000000000008480
.text:0000000000008480
.text:0000000000008480                 public quotearg_alloc
.text:0000000000008480 quotearg_alloc  proc near
.text:0000000000008480 ; __unwind {
.text:0000000000008480                 mov     rcx, rdx
.text:0000000000008483                 xor     edx, edx
.text:0000000000008485                 jmp     quotearg_alloc_mem
.text:0000000000008485 ; } // starts at 8480
.text:0000000000008485 quotearg_alloc  endp
.text:0000000000008485
.text:0000000000008485 ; ---------------------------------------------------------------------------
.text:000000000000848A                 align 10h
.text:0000000000008490
.text:0000000000008490 ; =============== S U B R O U T I N E =======================================
.text:0000000000008490
.text:0000000000008490 ; Attributes: info_from_lumina
.text:0000000000008490
.text:0000000000008490 ; void __cdecl quotearg_free()
.text:0000000000008490                 public quotearg_free
.text:0000000000008490 quotearg_free   proc near
.text:0000000000008490 ; __unwind {
.text:0000000000008490                 mov     eax, cs:nslots
.text:0000000000008496                 push    r12
.text:0000000000008498                 mov     r12, cs:slotvec
.text:000000000000849F                 push    rbp
.text:00000000000084A0                 push    rbx
.text:00000000000084A1                 cmp     eax, 1
.text:00000000000084A4                 jle     short loc_84D1
.text:00000000000084A6                 sub     eax, 2
.text:00000000000084A9                 lea     rbx, [r12+18h]
.text:00000000000084AE                 shl     rax, 4
.text:00000000000084B2                 lea     rbp, [r12+rax+28h]
.text:00000000000084B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000084C0
.text:00000000000084C0 loc_84C0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000084C0                 mov     rdi, [rbx]      ; ptr
.text:00000000000084C3                 add     rbx, 10h
.text:00000000000084C7                 call    _free
.text:00000000000084CC                 cmp     rbx, rbp
.text:00000000000084CF                 jnz     short loc_84C0
.text:00000000000084D1
.text:00000000000084D1 loc_84D1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000084D1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000084D6                 lea     rbx, slot0
.text:00000000000084DD                 cmp     rdi, rbx
.text:00000000000084E0                 jz      short loc_84F9
.text:00000000000084E2                 call    _free
.text:00000000000084E7                 mov     cs:slotvec0, 100h
.text:00000000000084F2                 mov     cs:off_2210B8, rbx
.text:00000000000084F9
.text:00000000000084F9 loc_84F9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000084F9                 lea     rbx, slotvec0
.text:0000000000008500                 cmp     r12, rbx
.text:0000000000008503                 jz      short loc_8514
.text:0000000000008505                 mov     rdi, r12        ; ptr
.text:0000000000008508                 call    _free
.text:000000000000850D                 mov     cs:slotvec, rbx
.text:0000000000008514
.text:0000000000008514 loc_8514:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000008514                 pop     rbx
.text:0000000000008515                 mov     cs:nslots, 1
.text:000000000000851F                 pop     rbp
.text:0000000000008520                 pop     r12
.text:0000000000008522                 retn
.text:0000000000008522 ; } // starts at 8490
.text:0000000000008522 quotearg_free   endp
.text:0000000000008522
.text:0000000000008522 ; ---------------------------------------------------------------------------
.text:0000000000008523                 align 10h
.text:0000000000008530
.text:0000000000008530 ; =============== S U B R O U T I N E =======================================
.text:0000000000008530
.text:0000000000008530
.text:0000000000008530                 public quotearg_n
.text:0000000000008530 quotearg_n      proc near
.text:0000000000008530 ; __unwind {
.text:0000000000008530                 lea     rcx, default_quoting_options
.text:0000000000008537                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000853E                 jmp     quotearg_n_options
.text:000000000000853E ; } // starts at 8530
.text:000000000000853E quotearg_n      endp
.text:000000000000853E
.text:000000000000853E ; ---------------------------------------------------------------------------
.text:0000000000008543                 align 10h
.text:0000000000008550
.text:0000000000008550 ; =============== S U B R O U T I N E =======================================
.text:0000000000008550
.text:0000000000008550
.text:0000000000008550                 public quotearg_n_mem
.text:0000000000008550 quotearg_n_mem  proc near
.text:0000000000008550 ; __unwind {
.text:0000000000008550                 lea     rcx, default_quoting_options
.text:0000000000008557                 jmp     quotearg_n_options
.text:0000000000008557 ; } // starts at 8550
.text:0000000000008557 quotearg_n_mem  endp
.text:0000000000008557
.text:0000000000008557 ; ---------------------------------------------------------------------------
.text:000000000000855C                 align 20h
.text:0000000000008560
.text:0000000000008560 ; =============== S U B R O U T I N E =======================================
.text:0000000000008560
.text:0000000000008560
.text:0000000000008560                 public quotearg
.text:0000000000008560 quotearg        proc near
.text:0000000000008560 ; __unwind {
.text:0000000000008560                 lea     rcx, default_quoting_options
.text:0000000000008567                 mov     rsi, rdi
.text:000000000000856A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008571                 xor     edi, edi
.text:0000000000008573                 jmp     quotearg_n_options
.text:0000000000008573 ; } // starts at 8560
.text:0000000000008573 quotearg        endp
.text:0000000000008573
.text:0000000000008573 ; ---------------------------------------------------------------------------
.text:0000000000008578                 align 20h
.text:0000000000008580
.text:0000000000008580 ; =============== S U B R O U T I N E =======================================
.text:0000000000008580
.text:0000000000008580
.text:0000000000008580                 public quotearg_mem
.text:0000000000008580 quotearg_mem    proc near
.text:0000000000008580 ; __unwind {
.text:0000000000008580                 lea     rcx, default_quoting_options
.text:0000000000008587                 mov     rdx, rsi
.text:000000000000858A                 mov     rsi, rdi
.text:000000000000858D                 xor     edi, edi
.text:000000000000858F                 jmp     quotearg_n_options
.text:000000000000858F ; } // starts at 8580
.text:000000000000858F quotearg_mem    endp
.text:000000000000858F
.text:000000000000858F ; ---------------------------------------------------------------------------
.text:0000000000008594                 align 20h
.text:00000000000085A0
.text:00000000000085A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085A0
.text:00000000000085A0 ; Attributes: info_from_lumina
.text:00000000000085A0
.text:00000000000085A0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000085A0                 public quotearg_n_style
.text:00000000000085A0 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:00000000000085A0                                         ; quotearg_style+7↓j
.text:00000000000085A0
.text:00000000000085A0 var_48          = dword ptr -48h
.text:00000000000085A0 var_44          = qword ptr -44h
.text:00000000000085A0 var_3C          = qword ptr -3Ch
.text:00000000000085A0 var_34          = qword ptr -34h
.text:00000000000085A0 var_2C          = qword ptr -2Ch
.text:00000000000085A0 var_24          = qword ptr -24h
.text:00000000000085A0 var_1C          = qword ptr -1Ch
.text:00000000000085A0 var_14          = dword ptr -14h
.text:00000000000085A0 var_10          = qword ptr -10h
.text:00000000000085A0
.text:00000000000085A0 ; __unwind {
.text:00000000000085A0                 sub     rsp, 48h
.text:00000000000085A4                 mov     rax, rdx
.text:00000000000085A7                 mov     rdx, fs:28h
.text:00000000000085B0                 mov     [rsp+48h+var_10], rdx
.text:00000000000085B5                 xor     edx, edx
.text:00000000000085B7                 cmp     esi, 0Ah
.text:00000000000085BA                 jz      short loc_8624
.text:00000000000085BC                 mov     [rsp+48h+var_48], esi
.text:00000000000085BF                 mov     rcx, rsp
.text:00000000000085C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000085C9                 mov     rsi, rax
.text:00000000000085CC                 mov     [rsp+48h+var_44], 0
.text:00000000000085D5                 mov     [rsp+48h+var_3C], 0
.text:00000000000085DE                 mov     [rsp+48h+var_34], 0
.text:00000000000085E7                 mov     [rsp+48h+var_2C], 0
.text:00000000000085F0                 mov     [rsp+48h+var_24], 0
.text:00000000000085F9                 mov     [rsp+48h+var_1C], 0
.text:0000000000008602                 mov     [rsp+48h+var_14], 0
.text:000000000000860A                 call    quotearg_n_options
.text:000000000000860F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000008614                 xor     rcx, fs:28h
.text:000000000000861D                 jnz     short loc_8629
.text:000000000000861F                 add     rsp, 48h
.text:0000000000008623                 retn
.text:0000000000008624 ; ---------------------------------------------------------------------------
.text:0000000000008624
.text:0000000000008624 loc_8624:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000008624                 call    _abort
.text:0000000000008629 ; ---------------------------------------------------------------------------
.text:0000000000008629
.text:0000000000008629 loc_8629:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000008629                 call    ___stack_chk_fail
.text:0000000000008629 ; } // starts at 85A0
.text:0000000000008629 quotearg_n_style endp
.text:0000000000008629
.text:0000000000008629 ; ---------------------------------------------------------------------------
.text:000000000000862E                 align 10h
.text:0000000000008630
.text:0000000000008630 ; =============== S U B R O U T I N E =======================================
.text:0000000000008630
.text:0000000000008630 ; Attributes: info_from_lumina
.text:0000000000008630
.text:0000000000008630 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000008630                 public quotearg_n_style_mem
.text:0000000000008630 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000008630
.text:0000000000008630 var_48          = dword ptr -48h
.text:0000000000008630 var_44          = qword ptr -44h
.text:0000000000008630 var_3C          = qword ptr -3Ch
.text:0000000000008630 var_34          = qword ptr -34h
.text:0000000000008630 var_2C          = qword ptr -2Ch
.text:0000000000008630 var_24          = qword ptr -24h
.text:0000000000008630 var_1C          = qword ptr -1Ch
.text:0000000000008630 var_14          = dword ptr -14h
.text:0000000000008630 var_10          = qword ptr -10h
.text:0000000000008630
.text:0000000000008630 ; __unwind {
.text:0000000000008630                 sub     rsp, 48h
.text:0000000000008634                 mov     rax, rdx
.text:0000000000008637                 mov     rdx, rcx
.text:000000000000863A                 mov     rcx, fs:28h
.text:0000000000008643                 mov     [rsp+48h+var_10], rcx
.text:0000000000008648                 xor     ecx, ecx
.text:000000000000864A                 cmp     esi, 0Ah
.text:000000000000864D                 jz      short loc_86B0
.text:000000000000864F                 mov     [rsp+48h+var_48], esi
.text:0000000000008652                 mov     rcx, rsp
.text:0000000000008655                 mov     rsi, rax
.text:0000000000008658                 mov     [rsp+48h+var_44], 0
.text:0000000000008661                 mov     [rsp+48h+var_3C], 0
.text:000000000000866A                 mov     [rsp+48h+var_34], 0
.text:0000000000008673                 mov     [rsp+48h+var_2C], 0
.text:000000000000867C                 mov     [rsp+48h+var_24], 0
.text:0000000000008685                 mov     [rsp+48h+var_1C], 0
.text:000000000000868E                 mov     [rsp+48h+var_14], 0
.text:0000000000008696                 call    quotearg_n_options
.text:000000000000869B                 mov     rdx, [rsp+48h+var_10]
.text:00000000000086A0                 xor     rdx, fs:28h
.text:00000000000086A9                 jnz     short loc_86B5
.text:00000000000086AB                 add     rsp, 48h
.text:00000000000086AF                 retn
.text:00000000000086B0 ; ---------------------------------------------------------------------------
.text:00000000000086B0
.text:00000000000086B0 loc_86B0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000086B0                 call    _abort
.text:00000000000086B5 ; ---------------------------------------------------------------------------
.text:00000000000086B5
.text:00000000000086B5 loc_86B5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000086B5                 call    ___stack_chk_fail
.text:00000000000086B5 ; } // starts at 8630
.text:00000000000086B5 quotearg_n_style_mem endp
.text:00000000000086B5
.text:00000000000086B5 ; ---------------------------------------------------------------------------
.text:00000000000086BA                 align 20h
.text:00000000000086C0
.text:00000000000086C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086C0
.text:00000000000086C0
.text:00000000000086C0                 public quotearg_style
.text:00000000000086C0 quotearg_style  proc near
.text:00000000000086C0 ; __unwind {
.text:00000000000086C0                 mov     rdx, rsi
.text:00000000000086C3                 mov     esi, edi
.text:00000000000086C5                 xor     edi, edi
.text:00000000000086C7                 jmp     quotearg_n_style
.text:00000000000086C7 ; } // starts at 86C0
.text:00000000000086C7 quotearg_style  endp
.text:00000000000086C7
.text:00000000000086C7 ; ---------------------------------------------------------------------------
.text:00000000000086CC                 align 10h
.text:00000000000086D0
.text:00000000000086D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086D0
.text:00000000000086D0
.text:00000000000086D0                 public quotearg_style_mem
.text:00000000000086D0 quotearg_style_mem proc near
.text:00000000000086D0 ; __unwind {
.text:00000000000086D0                 mov     rcx, rdx
.text:00000000000086D3                 mov     rdx, rsi
.text:00000000000086D6                 mov     esi, edi
.text:00000000000086D8                 xor     edi, edi
.text:00000000000086DA                 jmp     quotearg_n_style_mem
.text:00000000000086DA ; } // starts at 86D0
.text:00000000000086DA quotearg_style_mem endp
.text:00000000000086DA
.text:00000000000086DA ; ---------------------------------------------------------------------------
.text:00000000000086DF                 align 20h
.text:00000000000086E0
.text:00000000000086E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086E0
.text:00000000000086E0 ; Attributes: info_from_lumina
.text:00000000000086E0
.text:00000000000086E0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000086E0                 public quotearg_char_mem
.text:00000000000086E0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000086E0                                         ; quotearg_colon+C↓j ...
.text:00000000000086E0
.text:00000000000086E0 var_48          = xmmword ptr -48h
.text:00000000000086E0 var_38          = xmmword ptr -38h
.text:00000000000086E0 var_28          = xmmword ptr -28h
.text:00000000000086E0 var_18          = qword ptr -18h
.text:00000000000086E0 var_10          = qword ptr -10h
.text:00000000000086E0
.text:00000000000086E0 ; __unwind {
.text:00000000000086E0                 sub     rsp, 48h
.text:00000000000086E4                 mov     ecx, edx
.text:00000000000086E6                 mov     rax, fs:28h
.text:00000000000086EF                 mov     [rsp+48h+var_10], rax
.text:00000000000086F4                 xor     eax, eax
.text:00000000000086F6                 mov     rax, cs:qword_2219F0
.text:00000000000086FD                 mov     r8, rsp
.text:0000000000008700                 and     ecx, 1Fh
.text:0000000000008703                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000870B                 mov     [rsp+48h+var_18], rax
.text:0000000000008710                 mov     eax, edx
.text:0000000000008712                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000008716                 shr     al, 5
.text:0000000000008719                 movzx   eax, al
.text:000000000000871C                 lea     r9, [r8+rax*4+8]
.text:0000000000008721                 movdqa  xmm0, cs:xmmword_2219D0
.text:0000000000008729                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000872E                 movdqa  xmm0, cs:xmmword_2219E0
.text:0000000000008736                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000873B                 mov     edx, [r9]
.text:000000000000873E                 mov     eax, edx
.text:0000000000008740                 shr     eax, cl
.text:0000000000008742                 not     eax
.text:0000000000008744                 and     eax, 1
.text:0000000000008747                 shl     eax, cl
.text:0000000000008749                 mov     rcx, r8
.text:000000000000874C                 xor     eax, edx
.text:000000000000874E                 mov     rdx, rsi
.text:0000000000008751                 mov     rsi, rdi
.text:0000000000008754                 mov     [r9], eax
.text:0000000000008757                 xor     edi, edi
.text:0000000000008759                 call    quotearg_n_options
.text:000000000000875E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000008763                 xor     rsi, fs:28h
.text:000000000000876C                 jnz     short loc_8773
.text:000000000000876E                 add     rsp, 48h
.text:0000000000008772                 retn
.text:0000000000008773 ; ---------------------------------------------------------------------------
.text:0000000000008773
.text:0000000000008773 loc_8773:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000008773                 call    ___stack_chk_fail
.text:0000000000008773 ; } // starts at 86E0
.text:0000000000008773 quotearg_char_mem endp
.text:0000000000008773
.text:0000000000008773 ; ---------------------------------------------------------------------------
.text:0000000000008778                 align 20h
.text:0000000000008780
.text:0000000000008780 ; =============== S U B R O U T I N E =======================================
.text:0000000000008780
.text:0000000000008780
.text:0000000000008780                 public quotearg_char
.text:0000000000008780 quotearg_char   proc near
.text:0000000000008780 ; __unwind {
.text:0000000000008780                 movsx   edx, sil
.text:0000000000008784                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000878B                 jmp     quotearg_char_mem
.text:000000000000878B ; } // starts at 8780
.text:000000000000878B quotearg_char   endp
.text:000000000000878B
.text:0000000000008790
.text:0000000000008790 ; =============== S U B R O U T I N E =======================================
.text:0000000000008790
.text:0000000000008790
.text:0000000000008790                 public quotearg_colon
.text:0000000000008790 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000008790 ; __unwind {
.text:0000000000008790                 mov     edx, 3Ah ; ':'
.text:0000000000008795                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000879C                 jmp     quotearg_char_mem
.text:000000000000879C ; } // starts at 8790
.text:000000000000879C quotearg_colon  endp
.text:000000000000879C
.text:000000000000879C ; ---------------------------------------------------------------------------
.text:00000000000087A1                 align 10h
.text:00000000000087B0
.text:00000000000087B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087B0
.text:00000000000087B0
.text:00000000000087B0                 public quotearg_colon_mem
.text:00000000000087B0 quotearg_colon_mem proc near
.text:00000000000087B0 ; __unwind {
.text:00000000000087B0                 mov     edx, 3Ah ; ':'
.text:00000000000087B5                 jmp     quotearg_char_mem
.text:00000000000087B5 ; } // starts at 87B0
.text:00000000000087B5 quotearg_colon_mem endp
.text:00000000000087B5
.text:00000000000087B5 ; ---------------------------------------------------------------------------
.text:00000000000087BA                 align 20h
.text:00000000000087C0
.text:00000000000087C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087C0
.text:00000000000087C0 ; Attributes: info_from_lumina
.text:00000000000087C0
.text:00000000000087C0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000087C0                 public quotearg_n_style_colon
.text:00000000000087C0 quotearg_n_style_colon proc near        ; CODE XREF: main+2440↑p
.text:00000000000087C0                                         ; swallow_file_in_memory+A0↑p
.text:00000000000087C0
.text:00000000000087C0 var_48          = dword ptr -48h
.text:00000000000087C0 var_44          = qword ptr -44h
.text:00000000000087C0 var_3C          = qword ptr -3Ch
.text:00000000000087C0 var_34          = qword ptr -34h
.text:00000000000087C0 var_2C          = qword ptr -2Ch
.text:00000000000087C0 var_24          = qword ptr -24h
.text:00000000000087C0 var_1C          = qword ptr -1Ch
.text:00000000000087C0 var_14          = dword ptr -14h
.text:00000000000087C0 var_10          = qword ptr -10h
.text:00000000000087C0
.text:00000000000087C0 ; __unwind {
.text:00000000000087C0                 sub     rsp, 48h
.text:00000000000087C4                 mov     rax, rdx
.text:00000000000087C7                 mov     rdx, fs:28h
.text:00000000000087D0                 mov     [rsp+48h+var_10], rdx
.text:00000000000087D5                 xor     edx, edx
.text:00000000000087D7                 cmp     esi, 0Ah
.text:00000000000087DA                 jz      short loc_8844
.text:00000000000087DC                 mov     [rsp+48h+var_48], esi
.text:00000000000087DF                 mov     rcx, rsp
.text:00000000000087E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000087E9                 mov     rsi, rax
.text:00000000000087EC                 mov     [rsp+48h+var_44], 0
.text:00000000000087F5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000087FE                 mov     [rsp+48h+var_34], 0
.text:0000000000008807                 mov     [rsp+48h+var_2C], 0
.text:0000000000008810                 mov     [rsp+48h+var_24], 0
.text:0000000000008819                 mov     [rsp+48h+var_1C], 0
.text:0000000000008822                 mov     [rsp+48h+var_14], 0
.text:000000000000882A                 call    quotearg_n_options
.text:000000000000882F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000008834                 xor     rcx, fs:28h
.text:000000000000883D                 jnz     short loc_8849
.text:000000000000883F                 add     rsp, 48h
.text:0000000000008843                 retn
.text:0000000000008844 ; ---------------------------------------------------------------------------
.text:0000000000008844
.text:0000000000008844 loc_8844:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000008844                 call    _abort
.text:0000000000008849 ; ---------------------------------------------------------------------------
.text:0000000000008849
.text:0000000000008849 loc_8849:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000008849                 call    ___stack_chk_fail
.text:0000000000008849 ; } // starts at 87C0
.text:0000000000008849 quotearg_n_style_colon endp
.text:0000000000008849
.text:0000000000008849 ; ---------------------------------------------------------------------------
.text:000000000000884E                 align 10h
.text:0000000000008850
.text:0000000000008850 ; =============== S U B R O U T I N E =======================================
.text:0000000000008850
.text:0000000000008850 ; Attributes: info_from_lumina
.text:0000000000008850
.text:0000000000008850 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000008850                 public quotearg_n_custom_mem
.text:0000000000008850 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000008850                                         ; quotearg_custom+12↓j ...
.text:0000000000008850
.text:0000000000008850 var_48          = xmmword ptr -48h
.text:0000000000008850 var_38          = xmmword ptr -38h
.text:0000000000008850 var_28          = xmmword ptr -28h
.text:0000000000008850 var_18          = qword ptr -18h
.text:0000000000008850 var_10          = qword ptr -10h
.text:0000000000008850
.text:0000000000008850 ; __unwind {
.text:0000000000008850                 sub     rsp, 48h
.text:0000000000008854                 mov     r9, rcx
.text:0000000000008857                 mov     rcx, cs:qword_2219F0
.text:000000000000885E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000008866                 mov     rax, fs:28h
.text:000000000000886F                 mov     [rsp+48h+var_10], rax
.text:0000000000008874                 xor     eax, eax
.text:0000000000008876                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000887A                 test    rsi, rsi
.text:000000000000887D                 mov     [rsp+48h+var_18], rcx
.text:0000000000008882                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000008889                 movdqa  xmm0, cs:xmmword_2219D0
.text:0000000000008891                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000008896                 movdqa  xmm0, cs:xmmword_2219E0
.text:000000000000889E                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000088A3                 jz      short loc_88D7
.text:00000000000088A5                 test    rdx, rdx
.text:00000000000088A8                 jz      short loc_88D7
.text:00000000000088AA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000088AF                 mov     [rsp+48h+var_18], rdx
.text:00000000000088B4                 mov     rcx, rsp
.text:00000000000088B7                 mov     rdx, r8
.text:00000000000088BA                 mov     rsi, r9
.text:00000000000088BD                 call    quotearg_n_options
.text:00000000000088C2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000088C7                 xor     rdi, fs:28h
.text:00000000000088D0                 jnz     short loc_88DC
.text:00000000000088D2                 add     rsp, 48h
.text:00000000000088D6                 retn
.text:00000000000088D7 ; ---------------------------------------------------------------------------
.text:00000000000088D7
.text:00000000000088D7 loc_88D7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000088D7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000088D7                 call    _abort
.text:00000000000088DC ; ---------------------------------------------------------------------------
.text:00000000000088DC
.text:00000000000088DC loc_88DC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000088DC                 call    ___stack_chk_fail
.text:00000000000088DC ; } // starts at 8850
.text:00000000000088DC quotearg_n_custom_mem endp
.text:00000000000088DC
.text:00000000000088DC ; ---------------------------------------------------------------------------
.text:00000000000088E1                 align 10h
.text:00000000000088F0
.text:00000000000088F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088F0
.text:00000000000088F0
.text:00000000000088F0                 public quotearg_n_custom
.text:00000000000088F0 quotearg_n_custom proc near
.text:00000000000088F0 ; __unwind {
.text:00000000000088F0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000088F7                 jmp     quotearg_n_custom_mem
.text:00000000000088F7 ; } // starts at 88F0
.text:00000000000088F7 quotearg_n_custom endp
.text:00000000000088F7
.text:00000000000088F7 ; ---------------------------------------------------------------------------
.text:00000000000088FC                 align 20h
.text:0000000000008900
.text:0000000000008900 ; =============== S U B R O U T I N E =======================================
.text:0000000000008900
.text:0000000000008900
.text:0000000000008900                 public quotearg_custom
.text:0000000000008900 quotearg_custom proc near
.text:0000000000008900 ; __unwind {
.text:0000000000008900                 mov     rcx, rdx
.text:0000000000008903                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000890A                 mov     rdx, rsi
.text:000000000000890D                 mov     rsi, rdi
.text:0000000000008910                 xor     edi, edi
.text:0000000000008912                 jmp     quotearg_n_custom_mem
.text:0000000000008912 ; } // starts at 8900
.text:0000000000008912 quotearg_custom endp
.text:0000000000008912
.text:0000000000008912 ; ---------------------------------------------------------------------------
.text:0000000000008917                 align 20h
.text:0000000000008920
.text:0000000000008920 ; =============== S U B R O U T I N E =======================================
.text:0000000000008920
.text:0000000000008920
.text:0000000000008920                 public quotearg_custom_mem
.text:0000000000008920 quotearg_custom_mem proc near
.text:0000000000008920 ; __unwind {
.text:0000000000008920                 mov     r8, rcx
.text:0000000000008923                 mov     rcx, rdx
.text:0000000000008926                 mov     rdx, rsi
.text:0000000000008929                 mov     rsi, rdi
.text:000000000000892C                 xor     edi, edi
.text:000000000000892E                 jmp     quotearg_n_custom_mem
.text:000000000000892E ; } // starts at 8920
.text:000000000000892E quotearg_custom_mem endp
.text:000000000000892E
.text:000000000000892E ; ---------------------------------------------------------------------------
.text:0000000000008933                 align 20h
.text:0000000000008940
.text:0000000000008940 ; =============== S U B R O U T I N E =======================================
.text:0000000000008940
.text:0000000000008940
.text:0000000000008940                 public quote_n_mem
.text:0000000000008940 quote_n_mem     proc near
.text:0000000000008940 ; __unwind {
.text:0000000000008940                 lea     rcx, quote_quoting_options
.text:0000000000008947                 jmp     quotearg_n_options
.text:0000000000008947 ; } // starts at 8940
.text:0000000000008947 quote_n_mem     endp
.text:0000000000008947
.text:0000000000008947 ; ---------------------------------------------------------------------------
.text:000000000000894C                 align 10h
.text:0000000000008950
.text:0000000000008950 ; =============== S U B R O U T I N E =======================================
.text:0000000000008950
.text:0000000000008950
.text:0000000000008950                 public quote_mem
.text:0000000000008950 quote_mem       proc near
.text:0000000000008950 ; __unwind {
.text:0000000000008950                 lea     rcx, quote_quoting_options
.text:0000000000008957                 mov     rdx, rsi
.text:000000000000895A                 mov     rsi, rdi
.text:000000000000895D                 xor     edi, edi
.text:000000000000895F                 jmp     quotearg_n_options
.text:000000000000895F ; } // starts at 8950
.text:000000000000895F quote_mem       endp
.text:000000000000895F
.text:000000000000895F ; ---------------------------------------------------------------------------
.text:0000000000008964                 align 10h
.text:0000000000008970
.text:0000000000008970 ; =============== S U B R O U T I N E =======================================
.text:0000000000008970
.text:0000000000008970
.text:0000000000008970                 public quote_n
.text:0000000000008970 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000008970 ; __unwind {
.text:0000000000008970                 lea     rcx, quote_quoting_options
.text:0000000000008977                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000897E                 jmp     quotearg_n_options
.text:000000000000897E ; } // starts at 8970
.text:000000000000897E quote_n         endp
.text:000000000000897E
.text:000000000000897E ; ---------------------------------------------------------------------------
.text:0000000000008983                 align 10h
.text:0000000000008990
.text:0000000000008990 ; =============== S U B R O U T I N E =======================================
.text:0000000000008990
.text:0000000000008990
.text:0000000000008990                 public quote
.text:0000000000008990 quote           proc near               ; CODE XREF: main+232C↑p
.text:0000000000008990                                         ; main+23FE↑p ...
.text:0000000000008990 ; __unwind {
.text:0000000000008990                 lea     rcx, quote_quoting_options
.text:0000000000008997                 mov     rsi, rdi
.text:000000000000899A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000089A1                 xor     edi, edi
.text:00000000000089A3                 jmp     quotearg_n_options
.text:00000000000089A3 ; } // starts at 8990
.text:00000000000089A3 quote           endp
.text:00000000000089A3
.text:00000000000089A3 ; ---------------------------------------------------------------------------
.text:00000000000089A8                 align 10h
.text:00000000000089B0
.text:00000000000089B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000089B0
.text:00000000000089B0
.text:00000000000089B0 ; __int64 __fastcall fread_file(FILE *stream)
.text:00000000000089B0                 public fread_file
.text:00000000000089B0 fread_file      proc near               ; CODE XREF: swallow_file_in_memory+30↑p
.text:00000000000089B0                                         ; internal_read_file+23↓p
.text:00000000000089B0
.text:00000000000089B0 var_E0          = qword ptr -0E0h
.text:00000000000089B0 stat_buf        = stat ptr -0D8h
.text:00000000000089B0 var_40          = qword ptr -40h
.text:00000000000089B0
.text:00000000000089B0 ; __unwind {
.text:00000000000089B0                 push    r15
.text:00000000000089B2                 push    r14
.text:00000000000089B4                 push    r13
.text:00000000000089B6                 push    r12
.text:00000000000089B8                 mov     r13, rdi
.text:00000000000089BB                 push    rbp
.text:00000000000089BC                 push    rbx
.text:00000000000089BD                 sub     rsp, 0B8h
.text:00000000000089C4                 mov     [rsp+0E8h+var_E0], rsi
.text:00000000000089C9                 mov     rax, fs:28h
.text:00000000000089D2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000089DA                 xor     eax, eax
.text:00000000000089DC                 call    _fileno
.text:00000000000089E1                 lea     rdx, [rsp+0E8h+stat_buf] ; stat_buf
.text:00000000000089E6                 mov     esi, eax        ; fildes
.text:00000000000089E8                 mov     edi, 1          ; ver
.text:00000000000089ED                 call    ___fxstat
.text:00000000000089F2                 test    eax, eax
.text:00000000000089F4                 js      short loc_8A0A
.text:00000000000089F6                 mov     eax, [rsp+0E8h+stat_buf.st_mode]
.text:00000000000089FA                 and     eax, 0F000h
.text:00000000000089FF                 cmp     eax, 8000h
.text:0000000000008A04                 jz      loc_8B58
.text:0000000000008A0A
.text:0000000000008A0A loc_8A0A:                               ; CODE XREF: fread_file+44↑j
.text:0000000000008A0A                                         ; fread_file+1B3↓j ...
.text:0000000000008A0A                 mov     ebx, 2000h
.text:0000000000008A0F
.text:0000000000008A0F loc_8A0F:                               ; CODE XREF: fread_file+1CE↓j
.text:0000000000008A0F                 mov     rdi, rbx        ; size
.text:0000000000008A12                 call    _malloc
.text:0000000000008A17                 test    rax, rax
.text:0000000000008A1A                 mov     r12, rax
.text:0000000000008A1D                 jz      loc_8AC0
.text:0000000000008A23                 xor     ebp, ebp
.text:0000000000008A25                 mov     r15, 0FFFFFFFFFFFFFFFFh
.text:0000000000008A2C                 jmp     short loc_8A6A
.text:0000000000008A2C ; ---------------------------------------------------------------------------
.text:0000000000008A2E                 align 10h
.text:0000000000008A30
.text:0000000000008A30 loc_8A30:                               ; CODE XREF: fread_file+DA↓j
.text:0000000000008A30                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008A34                 jz      loc_8B10
.text:0000000000008A3A                 mov     rax, rbx
.text:0000000000008A3D                 mov     rdi, r12        ; ptr
.text:0000000000008A40                 shr     rax, 1
.text:0000000000008A43                 mov     rdx, rax
.text:0000000000008A46                 add     rax, rbx
.text:0000000000008A49                 not     rdx
.text:0000000000008A4C                 cmp     rdx, rbx
.text:0000000000008A4F                 cmovbe  rax, r15
.text:0000000000008A53                 mov     rsi, rax        ; size
.text:0000000000008A56                 mov     rbx, rax
.text:0000000000008A59                 call    _realloc
.text:0000000000008A5E                 test    rax, rax
.text:0000000000008A61                 jz      loc_8AF0
.text:0000000000008A67                 mov     r12, rax
.text:0000000000008A6A
.text:0000000000008A6A loc_8A6A:                               ; CODE XREF: fread_file+7C↑j
.text:0000000000008A6A                 mov     r14, rbx
.text:0000000000008A6D                 lea     rdi, [r12+rbp]  ; ptr
.text:0000000000008A71                 mov     rcx, r13        ; stream
.text:0000000000008A74                 sub     r14, rbp
.text:0000000000008A77                 mov     esi, 1          ; size
.text:0000000000008A7C                 mov     rdx, r14        ; n
.text:0000000000008A7F                 call    _fread
.text:0000000000008A84                 add     rbp, rax
.text:0000000000008A87                 cmp     r14, rax
.text:0000000000008A8A                 jz      short loc_8A30
.text:0000000000008A8C                 call    ___errno_location
.text:0000000000008A91                 mov     rdi, r13        ; stream
.text:0000000000008A94                 mov     r14, rax
.text:0000000000008A97                 mov     r15d, [rax]
.text:0000000000008A9A                 call    _ferror
.text:0000000000008A9F                 test    eax, eax
.text:0000000000008AA1                 jnz     short loc_8AFB
.text:0000000000008AA3                 sub     rbx, 1
.text:0000000000008AA7                 cmp     rbx, rbp
.text:0000000000008AAA                 ja      loc_8B30
.text:0000000000008AB0                 mov     rax, [rsp+0E8h+var_E0]
.text:0000000000008AB5                 mov     byte ptr [r12+rbp], 0
.text:0000000000008ABA                 mov     [rax], rbp
.text:0000000000008ABD                 nop     dword ptr [rax]
.text:0000000000008AC0
.text:0000000000008AC0 loc_8AC0:                               ; CODE XREF: fread_file+6D↑j
.text:0000000000008AC0                                         ; fread_file+159↓j ...
.text:0000000000008AC0                 mov     rcx, [rsp+0E8h+var_40]
.text:0000000000008AC8                 xor     rcx, fs:28h
.text:0000000000008AD1                 mov     rax, r12
.text:0000000000008AD4                 jnz     loc_8B83
.text:0000000000008ADA                 add     rsp, 0B8h
.text:0000000000008AE1                 pop     rbx
.text:0000000000008AE2                 pop     rbp
.text:0000000000008AE3                 pop     r12
.text:0000000000008AE5                 pop     r13
.text:0000000000008AE7                 pop     r14
.text:0000000000008AE9                 pop     r15
.text:0000000000008AEB                 retn
.text:0000000000008AEB ; ---------------------------------------------------------------------------
.text:0000000000008AEC                 align 10h
.text:0000000000008AF0
.text:0000000000008AF0 loc_8AF0:                               ; CODE XREF: fread_file+B1↑j
.text:0000000000008AF0                 call    ___errno_location
.text:0000000000008AF5                 mov     r15d, [rax]
.text:0000000000008AF8                 mov     r14, rax
.text:0000000000008AFB
.text:0000000000008AFB loc_8AFB:                               ; CODE XREF: fread_file+F1↑j
.text:0000000000008AFB                 mov     rdi, r12        ; ptr
.text:0000000000008AFE                 xor     r12d, r12d
.text:0000000000008B01                 call    _free
.text:0000000000008B06                 mov     [r14], r15d
.text:0000000000008B09                 jmp     short loc_8AC0
.text:0000000000008B09 ; ---------------------------------------------------------------------------
.text:0000000000008B0B                 align 10h
.text:0000000000008B10
.text:0000000000008B10 loc_8B10:                               ; CODE XREF: fread_file+84↑j
.text:0000000000008B10                 call    ___errno_location
.text:0000000000008B15                 mov     r15d, 0Ch
.text:0000000000008B1B                 mov     r14, rax
.text:0000000000008B1E                 mov     rdi, r12        ; ptr
.text:0000000000008B21                 call    _free
.text:0000000000008B26                 xor     r12d, r12d
.text:0000000000008B29                 mov     [r14], r15d
.text:0000000000008B2C                 jmp     short loc_8AC0
.text:0000000000008B2C ; ---------------------------------------------------------------------------
.text:0000000000008B2E                 align 10h
.text:0000000000008B30
.text:0000000000008B30 loc_8B30:                               ; CODE XREF: fread_file+FA↑j
.text:0000000000008B30                 lea     rsi, [rbp+1]    ; size
.text:0000000000008B34                 mov     rdi, r12        ; ptr
.text:0000000000008B37                 call    _realloc
.text:0000000000008B3C                 test    rax, rax
.text:0000000000008B3F                 cmovnz  r12, rax
.text:0000000000008B43                 mov     rax, [rsp+0E8h+var_E0]
.text:0000000000008B48                 mov     byte ptr [r12+rbp], 0
.text:0000000000008B4D                 mov     [rax], rbp
.text:0000000000008B50                 jmp     loc_8AC0
.text:0000000000008B50 ; ---------------------------------------------------------------------------
.text:0000000000008B55                 align 8
.text:0000000000008B58
.text:0000000000008B58 loc_8B58:                               ; CODE XREF: fread_file+54↑j
.text:0000000000008B58                 mov     rdi, r13        ; stream
.text:0000000000008B5B                 call    _ftello
.text:0000000000008B60                 test    rax, rax
.text:0000000000008B63                 js      loc_8A0A
.text:0000000000008B69                 mov     rbx, [rsp+0E8h+stat_buf.st_size]
.text:0000000000008B6E                 cmp     rbx, rax
.text:0000000000008B71                 jle     loc_8A0A
.text:0000000000008B77                 sub     rbx, rax
.text:0000000000008B7A                 add     rbx, 1
.text:0000000000008B7E                 jmp     loc_8A0F
.text:0000000000008B83 ; ---------------------------------------------------------------------------
.text:0000000000008B83
.text:0000000000008B83 loc_8B83:                               ; CODE XREF: fread_file+124↑j
.text:0000000000008B83                 call    ___stack_chk_fail
.text:0000000000008B83 ; } // starts at 89B0
.text:0000000000008B83 fread_file      endp
.text:0000000000008B83
.text:0000000000008B83 ; ---------------------------------------------------------------------------
.text:0000000000008B88                 align 10h
.text:0000000000008B90
.text:0000000000008B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B90
.text:0000000000008B90
.text:0000000000008B90 internal_read_file proc near            ; CODE XREF: read_file+7↓j
.text:0000000000008B90                                         ; read_binary_file+7↓j
.text:0000000000008B90 ; __unwind {
.text:0000000000008B90                 push    r13
.text:0000000000008B92                 push    r12
.text:0000000000008B94                 push    rbp
.text:0000000000008B95                 push    rbx
.text:0000000000008B96                 mov     rbp, rsi
.text:0000000000008B99                 mov     rsi, rdx        ; modes
.text:0000000000008B9C                 sub     rsp, 8
.text:0000000000008BA0                 call    _fopen
.text:0000000000008BA5                 test    rax, rax
.text:0000000000008BA8                 jz      short loc_8C00
.text:0000000000008BAA                 mov     rsi, rbp
.text:0000000000008BAD                 mov     rdi, rax        ; stream
.text:0000000000008BB0                 mov     rbx, rax
.text:0000000000008BB3                 call    fread_file
.text:0000000000008BB8                 mov     rbp, rax
.text:0000000000008BBB                 call    ___errno_location
.text:0000000000008BC0                 mov     rdi, rbx        ; stream
.text:0000000000008BC3                 mov     r12, rax
.text:0000000000008BC6                 mov     r13d, [rax]
.text:0000000000008BC9                 call    rpl_fclose
.text:0000000000008BCE                 test    eax, eax
.text:0000000000008BD0                 jnz     short loc_8BE0
.text:0000000000008BD2
.text:0000000000008BD2 loc_8BD2:                               ; CODE XREF: internal_read_file+67↓j
.text:0000000000008BD2                                         ; internal_read_file+72↓j
.text:0000000000008BD2                 add     rsp, 8
.text:0000000000008BD6                 mov     rax, rbp
.text:0000000000008BD9                 pop     rbx
.text:0000000000008BDA                 pop     rbp
.text:0000000000008BDB                 pop     r12
.text:0000000000008BDD                 pop     r13
.text:0000000000008BDF                 retn
.text:0000000000008BE0 ; ---------------------------------------------------------------------------
.text:0000000000008BE0
.text:0000000000008BE0 loc_8BE0:                               ; CODE XREF: internal_read_file+40↑j
.text:0000000000008BE0                 test    rbp, rbp
.text:0000000000008BE3                 jz      short loc_8BF1
.text:0000000000008BE5                 mov     rdi, rbp        ; ptr
.text:0000000000008BE8                 mov     r13d, [r12]
.text:0000000000008BEC                 call    _free
.text:0000000000008BF1
.text:0000000000008BF1 loc_8BF1:                               ; CODE XREF: internal_read_file+53↑j
.text:0000000000008BF1                 mov     [r12], r13d
.text:0000000000008BF5                 xor     ebp, ebp
.text:0000000000008BF7                 jmp     short loc_8BD2
.text:0000000000008BF7 ; ---------------------------------------------------------------------------
.text:0000000000008BF9                 align 20h
.text:0000000000008C00
.text:0000000000008C00 loc_8C00:                               ; CODE XREF: internal_read_file+18↑j
.text:0000000000008C00                 xor     ebp, ebp
.text:0000000000008C02                 jmp     short loc_8BD2
.text:0000000000008C02 ; } // starts at 8B90
.text:0000000000008C02 internal_read_file endp
.text:0000000000008C02
.text:0000000000008C02 ; ---------------------------------------------------------------------------
.text:0000000000008C04                 align 10h
.text:0000000000008C10
.text:0000000000008C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C10
.text:0000000000008C10
.text:0000000000008C10                 public read_file
.text:0000000000008C10 read_file       proc near               ; CODE XREF: swallow_file_in_memory+88↑p
.text:0000000000008C10 ; __unwind {
.text:0000000000008C10                 lea     rdx, aUpper+4   ; "r"
.text:0000000000008C17                 jmp     internal_read_file
.text:0000000000008C17 ; } // starts at 8C10
.text:0000000000008C17 read_file       endp
.text:0000000000008C17
.text:0000000000008C17 ; ---------------------------------------------------------------------------
.text:0000000000008C1C                 align 20h
.text:0000000000008C20
.text:0000000000008C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C20
.text:0000000000008C20
.text:0000000000008C20                 public read_binary_file
.text:0000000000008C20 read_binary_file proc near
.text:0000000000008C20 ; __unwind {
.text:0000000000008C20                 lea     rdx, unk_1C1E8
.text:0000000000008C27                 jmp     internal_read_file
.text:0000000000008C27 ; } // starts at 8C20
.text:0000000000008C27 read_binary_file endp
.text:0000000000008C27
.text:0000000000008C27 ; ---------------------------------------------------------------------------
.text:0000000000008C2C                 align 10h
.text:0000000000008C30
.text:0000000000008C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C30
.text:0000000000008C30
.text:0000000000008C30                 public strnlen1
.text:0000000000008C30 strnlen1        proc near               ; CODE XREF: mbsstr_trimmed_wordbounded+1BE↑p
.text:0000000000008C30                                         ; mbsstr_trimmed_wordbounded+41F↑p ...
.text:0000000000008C30 ; __unwind {
.text:0000000000008C30                 push    rbp
.text:0000000000008C31                 push    rbx
.text:0000000000008C32                 mov     rdx, rsi        ; n
.text:0000000000008C35                 mov     rbx, rsi
.text:0000000000008C38                 xor     esi, esi        ; c
.text:0000000000008C3A                 mov     rbp, rdi
.text:0000000000008C3D                 sub     rsp, 8
.text:0000000000008C41                 call    _memchr
.text:0000000000008C46                 mov     rdx, rax
.text:0000000000008C49                 sub     rdx, rbp
.text:0000000000008C4C                 add     rdx, 1
.text:0000000000008C50                 test    rax, rax
.text:0000000000008C53                 mov     rax, rbx
.text:0000000000008C56                 cmovnz  rax, rdx
.text:0000000000008C5A                 add     rsp, 8
.text:0000000000008C5E                 pop     rbx
.text:0000000000008C5F                 pop     rbp
.text:0000000000008C60                 retn
.text:0000000000008C60 ; } // starts at 8C30
.text:0000000000008C60 strnlen1        endp
.text:0000000000008C60
.text:0000000000008C60 ; ---------------------------------------------------------------------------
.text:0000000000008C61                 align 10h
.text:0000000000008C70
.text:0000000000008C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C70
.text:0000000000008C70
.text:0000000000008C70                 public trim2
.text:0000000000008C70 trim2           proc near               ; CODE XREF: mbsstr_trimmed_wordbounded+44↑p
.text:0000000000008C70
.text:0000000000008C70 var_A0          = qword ptr -0A0h
.text:0000000000008C70 var_98          = qword ptr -98h
.text:0000000000008C70 ps              = qword ptr -90h
.text:0000000000008C70 var_88          = qword ptr -88h
.text:0000000000008C70 var_80          = byte ptr -80h
.text:0000000000008C70 var_7C          = qword ptr -7Ch
.text:0000000000008C70 var_74          = byte ptr -74h
.text:0000000000008C70 var_70          = qword ptr -70h
.text:0000000000008C70 var_68          = qword ptr -68h
.text:0000000000008C70 var_60          = byte ptr -60h
.text:0000000000008C70 wc              = dword ptr -5Ch
.text:0000000000008C70 var_40          = qword ptr -40h
.text:0000000000008C70
.text:0000000000008C70 ; __unwind {
.text:0000000000008C70                 push    r15
.text:0000000000008C72                 push    r14
.text:0000000000008C74                 push    r13
.text:0000000000008C76                 push    r12
.text:0000000000008C78                 mov     r12d, esi
.text:0000000000008C7B                 push    rbp
.text:0000000000008C7C                 push    rbx
.text:0000000000008C7D                 sub     rsp, 78h
.text:0000000000008C81                 mov     rax, fs:28h
.text:0000000000008C8A                 mov     [rsp+0A8h+var_40], rax
.text:0000000000008C8F                 xor     eax, eax
.text:0000000000008C91                 call    _strdup
.text:0000000000008C96                 test    rax, rax
.text:0000000000008C99                 jz      loc_9257
.text:0000000000008C9F                 mov     rbx, rax
.text:0000000000008CA2                 call    ___ctype_get_mb_cur_max
.text:0000000000008CA7                 cmp     rax, 1
.text:0000000000008CAB                 jbe     loc_8FB0
.text:0000000000008CB1                 test    r12d, r12d
.text:0000000000008CB4                 jnz     loc_8E08
.text:0000000000008CBA
.text:0000000000008CBA loc_8CBA:                               ; CODE XREF: trim2+571↓j
.text:0000000000008CBA                 mov     [rsp+0A8h+var_70], rbx
.text:0000000000008CBF                 mov     rdx, rbx
.text:0000000000008CC2
.text:0000000000008CC2 loc_8CC2:                               ; CODE XREF: trim2+67↓j
.text:0000000000008CC2                 mov     ecx, [rdx]
.text:0000000000008CC4                 add     rdx, 4
.text:0000000000008CC8                 lea     eax, [rcx-1010101h]
.text:0000000000008CCE                 not     ecx
.text:0000000000008CD0                 and     eax, ecx
.text:0000000000008CD2                 and     eax, 80808080h
.text:0000000000008CD7                 jz      short loc_8CC2
.text:0000000000008CD9                 mov     ecx, eax
.text:0000000000008CDB                 mov     [rsp+0A8h+var_80], 0
.text:0000000000008CE0                 mov     [rsp+0A8h+var_7C], 0
.text:0000000000008CE9                 shr     ecx, 10h
.text:0000000000008CEC                 test    eax, 8080h
.text:0000000000008CF1                 mov     [rsp+0A8h+var_74], 0
.text:0000000000008CF6                 cmovz   eax, ecx
.text:0000000000008CF9                 lea     rcx, [rdx+2]
.text:0000000000008CFD                 mov     esi, eax
.text:0000000000008CFF                 cmovz   rdx, rcx
.text:0000000000008D03                 add     sil, al
.text:0000000000008D06                 mov     rsi, rbx
.text:0000000000008D09                 sbb     rdx, 3
.text:0000000000008D0D                 xor     r15d, r15d
.text:0000000000008D10                 cmp     rdx, rbx
.text:0000000000008D13                 mov     r14, rdx
.text:0000000000008D16                 mov     [rsp+0A8h+var_88], rdx
.text:0000000000008D1B                 jbe     loc_8F80
.text:0000000000008D21                 lea     rbp, [rsp+0A8h+var_88]
.text:0000000000008D26                 lea     rax, [rbp+0Ch]
.text:0000000000008D2A                 mov     [rsp+0A8h+ps], rax
.text:0000000000008D2F                 jmp     short loc_8D6E
.text:0000000000008D2F ; ---------------------------------------------------------------------------
.text:0000000000008D31                 align 8
.text:0000000000008D38
.text:0000000000008D38 loc_8D38:                               ; CODE XREF: trim2+154↓j
.text:0000000000008D38                 cmp     [rsp+0A8h+var_60], 0
.text:0000000000008D3D                 mov     r15d, 1
.text:0000000000008D43                 jz      short loc_8D57
.text:0000000000008D45                 mov     edi, [rsp+0A8h+wc] ; wc
.text:0000000000008D49                 xor     r15d, r15d
.text:0000000000008D4C                 call    _iswspace
.text:0000000000008D51                 test    eax, eax
.text:0000000000008D53                 setz    r15b
.text:0000000000008D57
.text:0000000000008D57 loc_8D57:                               ; CODE XREF: trim2+D3↑j
.text:0000000000008D57                                         ; trim2+18D↓j ...
.text:0000000000008D57                 lea     rsi, [r12+r13]
.text:0000000000008D5B                 mov     [rsp+0A8h+var_74], 0
.text:0000000000008D60                 cmp     rsi, r14
.text:0000000000008D63                 mov     [rsp+0A8h+var_70], rsi
.text:0000000000008D68                 jnb     loc_8F70
.text:0000000000008D6E
.text:0000000000008D6E loc_8D6E:                               ; CODE XREF: trim2+BF↑j
.text:0000000000008D6E                 cmp     [rsp+0A8h+var_80], 0
.text:0000000000008D73                 jnz     loc_90A1
.text:0000000000008D79                 movzx   ecx, byte ptr [rsi]
.text:0000000000008D7C                 lea     rdi, is_basic_table
.text:0000000000008D83                 mov     eax, ecx
.text:0000000000008D85                 shr     al, 5
.text:0000000000008D88                 and     eax, 7
.text:0000000000008D8B                 mov     eax, [rdi+rax*4]
.text:0000000000008D8E                 bt      eax, ecx
.text:0000000000008D91                 jnb     loc_9080
.text:0000000000008D97                 mov     [rsp+0A8h+var_68], 1
.text:0000000000008DA0                 movsx   eax, byte ptr [rsi]
.text:0000000000008DA3                 mov     r13d, 1
.text:0000000000008DA9                 mov     r12, [rsp+0A8h+var_70]
.text:0000000000008DAE                 mov     r14, [rsp+0A8h+var_88]
.text:0000000000008DB3                 mov     [rsp+0A8h+var_60], 1
.text:0000000000008DB8                 mov     [rsp+0A8h+wc], eax
.text:0000000000008DBC
.text:0000000000008DBC loc_8DBC:                               ; CODE XREF: trim2+4A8↓j
.text:0000000000008DBC                                         ; trim2+52E↓j ...
.text:0000000000008DBC                 test    r15d, r15d
.text:0000000000008DBF                 mov     [rsp+0A8h+var_74], 1
.text:0000000000008DC4                 jz      loc_8D38
.text:0000000000008DCA                 cmp     r15d, 1
.text:0000000000008DCE                 jz      loc_9120
.text:0000000000008DD4                 cmp     r15d, 2
.text:0000000000008DD8                 jnz     loc_91F0
.text:0000000000008DDE                 cmp     [rsp+0A8h+var_60], 0
.text:0000000000008DE3                 jz      loc_91F0
.text:0000000000008DE9                 mov     edi, [rsp+0A8h+wc] ; wc
.text:0000000000008DED                 call    _iswspace
.text:0000000000008DF2                 test    eax, eax
.text:0000000000008DF4                 mov     eax, 1
.text:0000000000008DF9                 cmovz   r15d, eax
.text:0000000000008DFD                 jmp     loc_8D57
.text:0000000000008DFD ; ---------------------------------------------------------------------------
.text:0000000000008E02                 align 8
.text:0000000000008E08
.text:0000000000008E08 loc_8E08:                               ; CODE XREF: trim2+44↑j
.text:0000000000008E08                 mov     [rsp+0A8h+var_70], rbx
.text:0000000000008E0D                 mov     rdx, rbx
.text:0000000000008E10
.text:0000000000008E10 loc_8E10:                               ; CODE XREF: trim2+1B5↓j
.text:0000000000008E10                 mov     ecx, [rdx]
.text:0000000000008E12                 add     rdx, 4
.text:0000000000008E16                 lea     eax, [rcx-1010101h]
.text:0000000000008E1C                 not     ecx
.text:0000000000008E1E                 and     eax, ecx
.text:0000000000008E20                 and     eax, 80808080h
.text:0000000000008E25                 jz      short loc_8E10
.text:0000000000008E27                 mov     ecx, eax
.text:0000000000008E29                 mov     [rsp+0A8h+var_80], 0
.text:0000000000008E2E                 mov     [rsp+0A8h+var_7C], 0
.text:0000000000008E37                 shr     ecx, 10h
.text:0000000000008E3A                 test    eax, 8080h
.text:0000000000008E3F                 mov     [rsp+0A8h+var_74], 0
.text:0000000000008E44                 cmovz   eax, ecx
.text:0000000000008E47                 lea     rcx, [rdx+2]
.text:0000000000008E4B                 mov     r15, rbx
.text:0000000000008E4E                 mov     esi, eax
.text:0000000000008E50                 cmovz   rdx, rcx
.text:0000000000008E54                 add     sil, al
.text:0000000000008E57                 sbb     rdx, 3
.text:0000000000008E5B                 cmp     rdx, rbx
.text:0000000000008E5E                 mov     [rsp+0A8h+var_88], rdx
.text:0000000000008E63                 jbe     loc_91C0
.text:0000000000008E69                 lea     rbp, [rsp+0A8h+var_88]
.text:0000000000008E6E                 lea     r14, is_basic_table
.text:0000000000008E75                 lea     r13, [rbp+0Ch]
.text:0000000000008E79                 jmp     short loc_8EE7
.text:0000000000008E79 ; ---------------------------------------------------------------------------
.text:0000000000008E7B                 align 20h
.text:0000000000008E80
.text:0000000000008E80 loc_8E80:                               ; CODE XREF: trim2+27C↓j
.text:0000000000008E80                 movzx   ecx, byte ptr [r15]
.text:0000000000008E84                 mov     eax, ecx
.text:0000000000008E86                 shr     al, 5
.text:0000000000008E89                 and     eax, 7
.text:0000000000008E8C                 mov     eax, [r14+rax*4]
.text:0000000000008E90                 bt      eax, ecx
.text:0000000000008E93                 jnb     loc_9158
.text:0000000000008E99                 mov     [rsp+0A8h+var_68], 1
.text:0000000000008EA2                 movsx   eax, byte ptr [r15]
.text:0000000000008EA6                 mov     r15, [rsp+0A8h+var_70]
.text:0000000000008EAB                 mov     [rsp+0A8h+var_60], 1
.text:0000000000008EB0                 mov     [rsp+0A8h+var_74], 1
.text:0000000000008EB5                 mov     [rsp+0A8h+wc], eax
.text:0000000000008EB9
.text:0000000000008EB9 loc_8EB9:                               ; CODE XREF: trim2+2F3↓j
.text:0000000000008EB9                                         ; trim2+5D5↓j
.text:0000000000008EB9                 mov     edi, [rsp+0A8h+wc] ; wc
.text:0000000000008EBD                 call    _iswspace
.text:0000000000008EC2                 test    eax, eax
.text:0000000000008EC4                 jz      loc_91C0
.text:0000000000008ECA                 add     r15, [rsp+0A8h+var_68]
.text:0000000000008ECF                 mov     rdx, [rsp+0A8h+var_88]
.text:0000000000008ED4                 mov     [rsp+0A8h+var_74], 0
.text:0000000000008ED9                 cmp     r15, rdx
.text:0000000000008EDC                 mov     [rsp+0A8h+var_70], r15
.text:0000000000008EE1                 jnb     loc_91C0
.text:0000000000008EE7
.text:0000000000008EE7 loc_8EE7:                               ; CODE XREF: trim2+209↑j
.text:0000000000008EE7                 cmp     [rsp+0A8h+var_80], 0
.text:0000000000008EEC                 jz      short loc_8E80
.text:0000000000008EEE
.text:0000000000008EEE loc_8EEE:                               ; CODE XREF: trim2+507↓j
.text:0000000000008EEE                 lea     rcx, [rbp+0Ch]
.text:0000000000008EF2                 lea     rdi, [rbp+2Ch]
.text:0000000000008EF6                 sub     rdx, r15
.text:0000000000008EF9                 mov     rsi, r15
.text:0000000000008EFC                 call    rpl_mbrtowc
.text:0000000000008F01                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008F05                 mov     [rsp+0A8h+var_68], rax
.text:0000000000008F0A                 jz      loc_91A8
.text:0000000000008F10                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000008F14                 mov     r15, [rsp+0A8h+var_70]
.text:0000000000008F19                 jz      loc_9220
.text:0000000000008F1F                 test    rax, rax
.text:0000000000008F22                 jnz     short loc_8F43
.text:0000000000008F24                 mov     [rsp+0A8h+var_68], 1
.text:0000000000008F2D                 cmp     byte ptr [r15], 0
.text:0000000000008F31                 jnz     loc_9280
.text:0000000000008F37                 mov     edx, [rsp+0A8h+wc]
.text:0000000000008F3B                 test    edx, edx
.text:0000000000008F3D                 jnz     loc_927B
.text:0000000000008F43
.text:0000000000008F43 loc_8F43:                               ; CODE XREF: trim2+2B2↑j
.text:0000000000008F43                 lea     rdi, [rbp+0Ch]  ; ps
.text:0000000000008F47                 mov     [rsp+0A8h+var_60], 1
.text:0000000000008F4C                 call    _mbsinit
.text:0000000000008F51                 test    eax, eax
.text:0000000000008F53                 jz      loc_9240
.text:0000000000008F59                 mov     [rsp+0A8h+var_80], 0
.text:0000000000008F5E                 mov     [rsp+0A8h+var_74], 1
.text:0000000000008F63                 jmp     loc_8EB9
.text:0000000000008F63 ; ---------------------------------------------------------------------------
.text:0000000000008F68                 align 10h
.text:0000000000008F70
.text:0000000000008F70 loc_8F70:                               ; CODE XREF: trim2+F8↑j
.text:0000000000008F70                 cmp     r15d, 2
.text:0000000000008F74                 jnz     short loc_8F80
.text:0000000000008F76                 mov     rax, [rsp+0A8h+var_A0]
.text:0000000000008F7B                 mov     byte ptr [rax], 0
.text:0000000000008F7E                 xchg    ax, ax
.text:0000000000008F80
.text:0000000000008F80 loc_8F80:                               ; CODE XREF: trim2+AB↑j
.text:0000000000008F80                                         ; trim2+304↑j ...
.text:0000000000008F80                 mov     rax, rbx
.text:0000000000008F83                 mov     rbx, [rsp+0A8h+var_40]
.text:0000000000008F88                 xor     rbx, fs:28h
.text:0000000000008F91                 jnz     loc_9252
.text:0000000000008F97                 add     rsp, 78h
.text:0000000000008F9B                 pop     rbx
.text:0000000000008F9C                 pop     rbp
.text:0000000000008F9D                 pop     r12
.text:0000000000008F9F                 pop     r13
.text:0000000000008FA1                 pop     r14
.text:0000000000008FA3                 pop     r15
.text:0000000000008FA5                 retn
.text:0000000000008FA5 ; ---------------------------------------------------------------------------
.text:0000000000008FA6                 align 10h
.text:0000000000008FB0
.text:0000000000008FB0 loc_8FB0:                               ; CODE XREF: trim2+3B↑j
.text:0000000000008FB0                 test    r12d, r12d
.text:0000000000008FB3                 jz      short loc_9006
.text:0000000000008FB5                 movzx   ebp, byte ptr [rbx]
.text:0000000000008FB8                 test    bpl, bpl
.text:0000000000008FBB                 jz      loc_924A
.text:0000000000008FC1                 call    ___ctype_b_loc
.text:0000000000008FC6                 mov     r13, rbx
.text:0000000000008FC9                 mov     rax, [rax]
.text:0000000000008FCC                 jmp     short loc_8FDE
.text:0000000000008FCC ; ---------------------------------------------------------------------------
.text:0000000000008FCE                 align 10h
.text:0000000000008FD0
.text:0000000000008FD0 loc_8FD0:                               ; CODE XREF: trim2+373↓j
.text:0000000000008FD0                 add     r13, 1
.text:0000000000008FD4                 movzx   ebp, byte ptr [r13+0]
.text:0000000000008FD9                 test    bpl, bpl
.text:0000000000008FDC                 jz      short loc_8FE5
.text:0000000000008FDE
.text:0000000000008FDE loc_8FDE:                               ; CODE XREF: trim2+35C↑j
.text:0000000000008FDE                 test    byte ptr [rax+rbp*2+1], 20h
.text:0000000000008FE3                 jnz     short loc_8FD0
.text:0000000000008FE5
.text:0000000000008FE5 loc_8FE5:                               ; CODE XREF: trim2+36C↑j
.text:0000000000008FE5                                         ; trim2+5DD↓j
.text:0000000000008FE5                 mov     rdi, r13        ; s
.text:0000000000008FE8                 call    _strlen
.text:0000000000008FED                 lea     rdx, [rax+1]    ; n
.text:0000000000008FF1                 mov     rsi, r13        ; src
.text:0000000000008FF4                 mov     rdi, rbx        ; dest
.text:0000000000008FF7                 call    _memmove
.text:0000000000008FFC                 cmp     r12d, 1
.text:0000000000009000                 jz      loc_8F80
.text:0000000000009006
.text:0000000000009006 loc_9006:                               ; CODE XREF: trim2+343↑j
.text:0000000000009006                 mov     rdx, rbx
.text:0000000000009009
.text:0000000000009009 loc_9009:                               ; CODE XREF: trim2+3AE↓j
.text:0000000000009009                 mov     ecx, [rdx]
.text:000000000000900B                 add     rdx, 4
.text:000000000000900F                 lea     eax, [rcx-1010101h]
.text:0000000000009015                 not     ecx
.text:0000000000009017                 and     eax, ecx
.text:0000000000009019                 and     eax, 80808080h
.text:000000000000901E                 jz      short loc_9009
.text:0000000000009020                 mov     ecx, eax
.text:0000000000009022                 shr     ecx, 10h
.text:0000000000009025                 test    eax, 8080h
.text:000000000000902A                 cmovz   eax, ecx
.text:000000000000902D                 lea     rcx, [rdx+2]
.text:0000000000009031                 mov     esi, eax
.text:0000000000009033                 cmovz   rdx, rcx
.text:0000000000009037                 add     sil, al
.text:000000000000903A                 sbb     rdx, 3
.text:000000000000903E                 lea     rbp, [rdx-1]
.text:0000000000009042                 cmp     rbx, rbp
.text:0000000000009045                 ja      loc_8F80
.text:000000000000904B                 call    ___ctype_b_loc
.text:0000000000009050                 mov     rdx, [rax]
.text:0000000000009053                 jmp     short loc_9069
.text:0000000000009053 ; ---------------------------------------------------------------------------
.text:0000000000009055                 align 8
.text:0000000000009058
.text:0000000000009058 loc_9058:                               ; CODE XREF: trim2+402↓j
.text:0000000000009058                 mov     byte ptr [rbp+0], 0
.text:000000000000905C                 sub     rbp, 1
.text:0000000000009060                 cmp     rbx, rbp
.text:0000000000009063                 ja      loc_8F80
.text:0000000000009069
.text:0000000000009069 loc_9069:                               ; CODE XREF: trim2+3E3↑j
.text:0000000000009069                 movzx   eax, byte ptr [rbp+0]
.text:000000000000906D                 test    byte ptr [rdx+rax*2+1], 20h
.text:0000000000009072                 jnz     short loc_9058
.text:0000000000009074                 jmp     loc_8F80
.text:0000000000009074 ; ---------------------------------------------------------------------------
.text:0000000000009079                 align 20h
.text:0000000000009080
.text:0000000000009080 loc_9080:                               ; CODE XREF: trim2+121↑j
.text:0000000000009080                 mov     rdi, [rsp+0A8h+ps] ; ps
.text:0000000000009085                 mov     [rsp+0A8h+var_98], rsi
.text:000000000000908A                 call    _mbsinit
.text:000000000000908F                 test    eax, eax
.text:0000000000009091                 jz      loc_925C
.text:0000000000009097                 mov     rsi, [rsp+0A8h+var_98]
.text:000000000000909C                 mov     [rsp+0A8h+var_80], 1
.text:00000000000090A1
.text:00000000000090A1 loc_90A1:                               ; CODE XREF: trim2+103↑j
.text:00000000000090A1                 lea     rcx, [rbp+0Ch]
.text:00000000000090A5                 mov     rdx, r14
.text:00000000000090A8                 lea     rdi, [rbp+2Ch]
.text:00000000000090AC                 sub     rdx, rsi
.text:00000000000090AF                 call    rpl_mbrtowc
.text:00000000000090B4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000090B8                 mov     [rsp+0A8h+var_68], rax
.text:00000000000090BD                 jz      loc_9180
.text:00000000000090C3                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000090C7                 mov     r12, [rsp+0A8h+var_70]
.text:00000000000090CC                 jz      loc_9200
.text:00000000000090D2                 test    rax, rax
.text:00000000000090D5                 jnz     short loc_90F7
.text:00000000000090D7                 mov     [rsp+0A8h+var_68], 1
.text:00000000000090E0                 cmp     byte ptr [r12], 0
.text:00000000000090E5                 jnz     loc_9280
.text:00000000000090EB                 mov     eax, [rsp+0A8h+wc]
.text:00000000000090EF                 test    eax, eax
.text:00000000000090F1                 jnz     loc_927B
.text:00000000000090F7
.text:00000000000090F7 loc_90F7:                               ; CODE XREF: trim2+465↑j
.text:00000000000090F7                 lea     rdi, [rbp+0Ch]  ; ps
.text:00000000000090FB                 mov     [rsp+0A8h+var_60], 1
.text:0000000000009100                 call    _mbsinit
.text:0000000000009105                 test    eax, eax
.text:0000000000009107                 mov     r14, [rsp+0A8h+var_88]
.text:000000000000910C                 jz      short loc_9113
.text:000000000000910E                 mov     [rsp+0A8h+var_80], 0
.text:0000000000009113
.text:0000000000009113 loc_9113:                               ; CODE XREF: trim2+49C↑j
.text:0000000000009113                 mov     r13, [rsp+0A8h+var_68]
.text:0000000000009118                 jmp     loc_8DBC
.text:0000000000009118 ; ---------------------------------------------------------------------------
.text:000000000000911D                 align 20h
.text:0000000000009120
.text:0000000000009120 loc_9120:                               ; CODE XREF: trim2+15E↑j
.text:0000000000009120                 cmp     [rsp+0A8h+var_60], 0
.text:0000000000009125                 jz      loc_8D57
.text:000000000000912B                 mov     edi, [rsp+0A8h+wc] ; wc
.text:000000000000912F                 call    _iswspace
.text:0000000000009134                 mov     rsi, [rsp+0A8h+var_A0]
.text:0000000000009139                 test    eax, eax
.text:000000000000913B                 mov     eax, 2
.text:0000000000009140                 cmovnz  r15d, eax
.text:0000000000009144                 cmovnz  rsi, r12
.text:0000000000009148                 mov     [rsp+0A8h+var_A0], rsi
.text:000000000000914D                 jmp     loc_8D57
.text:000000000000914D ; ---------------------------------------------------------------------------
.text:0000000000009152                 align 8
.text:0000000000009158
.text:0000000000009158 loc_9158:                               ; CODE XREF: trim2+223↑j
.text:0000000000009158                 mov     rdi, r13        ; ps
.text:000000000000915B                 mov     [rsp+0A8h+var_98], rdx
.text:0000000000009160                 call    _mbsinit
.text:0000000000009165                 test    eax, eax
.text:0000000000009167                 mov     rdx, [rsp+0A8h+var_98]
.text:000000000000916C                 jz      loc_925C
.text:0000000000009172                 mov     [rsp+0A8h+var_80], 1
.text:0000000000009177                 jmp     loc_8EEE
.text:0000000000009177 ; ---------------------------------------------------------------------------
.text:000000000000917C                 align 20h
.text:0000000000009180
.text:0000000000009180 loc_9180:                               ; CODE XREF: trim2+44D↑j
.text:0000000000009180                 mov     [rsp+0A8h+var_68], 1
.text:0000000000009189                 mov     [rsp+0A8h+var_60], 0
.text:000000000000918E                 mov     r13d, 1
.text:0000000000009194                 mov     r12, [rsp+0A8h+var_70]
.text:0000000000009199                 mov     r14, [rsp+0A8h+var_88]
.text:000000000000919E                 jmp     loc_8DBC
.text:000000000000919E ; ---------------------------------------------------------------------------
.text:00000000000091A3                 align 8
.text:00000000000091A8
.text:00000000000091A8 loc_91A8:                               ; CODE XREF: trim2+29A↑j
.text:00000000000091A8                 mov     r15, [rsp+0A8h+var_70]
.text:00000000000091AD                 mov     [rsp+0A8h+var_68], 1
.text:00000000000091B6                 mov     [rsp+0A8h+var_60], 0
.text:00000000000091BB                 mov     [rsp+0A8h+var_74], 1
.text:00000000000091C0
.text:00000000000091C0 loc_91C0:                               ; CODE XREF: trim2+1F3↑j
.text:00000000000091C0                                         ; trim2+254↑j ...
.text:00000000000091C0                 mov     rdi, r15        ; s
.text:00000000000091C3                 call    _strlen
.text:00000000000091C8                 lea     rdx, [rax+1]    ; n
.text:00000000000091CC                 mov     rsi, r15        ; src
.text:00000000000091CF                 mov     rdi, rbx        ; dest
.text:00000000000091D2                 call    _memmove
.text:00000000000091D7                 cmp     r12d, 1
.text:00000000000091DB                 jz      loc_8F80
.text:00000000000091E1                 jmp     loc_8CBA
.text:00000000000091E1 ; ---------------------------------------------------------------------------
.text:00000000000091E6                 align 10h
.text:00000000000091F0
.text:00000000000091F0 loc_91F0:                               ; CODE XREF: trim2+168↑j
.text:00000000000091F0                                         ; trim2+173↑j
.text:00000000000091F0                 mov     r15d, 1
.text:00000000000091F6                 jmp     loc_8D57
.text:00000000000091F6 ; ---------------------------------------------------------------------------
.text:00000000000091FB                 align 20h
.text:0000000000009200
.text:0000000000009200 loc_9200:                               ; CODE XREF: trim2+45C↑j
.text:0000000000009200                 mov     r14, [rsp+0A8h+var_88]
.text:0000000000009205                 mov     [rsp+0A8h+var_60], 0
.text:000000000000920A                 mov     r13, r14
.text:000000000000920D                 sub     r13, r12
.text:0000000000009210                 mov     [rsp+0A8h+var_68], r13
.text:0000000000009215                 jmp     loc_8DBC
.text:0000000000009215 ; ---------------------------------------------------------------------------
.text:000000000000921A                 align 20h
.text:0000000000009220
.text:0000000000009220 loc_9220:                               ; CODE XREF: trim2+2A9↑j
.text:0000000000009220                 mov     rax, [rsp+0A8h+var_88]
.text:0000000000009225                 mov     [rsp+0A8h+var_60], 0
.text:000000000000922A                 mov     [rsp+0A8h+var_74], 1
.text:000000000000922F                 sub     rax, r15
.text:0000000000009232                 mov     [rsp+0A8h+var_68], rax
.text:0000000000009237                 jmp     short loc_91C0
.text:0000000000009237 ; ---------------------------------------------------------------------------
.text:0000000000009239                 align 20h
.text:0000000000009240
.text:0000000000009240 loc_9240:                               ; CODE XREF: trim2+2E3↑j
.text:0000000000009240                 mov     [rsp+0A8h+var_74], 1
.text:0000000000009245                 jmp     loc_8EB9
.text:000000000000924A ; ---------------------------------------------------------------------------
.text:000000000000924A
.text:000000000000924A loc_924A:                               ; CODE XREF: trim2+34B↑j
.text:000000000000924A                 mov     r13, rbx
.text:000000000000924D                 jmp     loc_8FE5
.text:0000000000009252 ; ---------------------------------------------------------------------------
.text:0000000000009252
.text:0000000000009252 loc_9252:                               ; CODE XREF: trim2+321↑j
.text:0000000000009252                 call    ___stack_chk_fail
.text:0000000000009257 ; ---------------------------------------------------------------------------
.text:0000000000009257
.text:0000000000009257 loc_9257:                               ; CODE XREF: trim2+29↑j
.text:0000000000009257                 call    xalloc_die
.text:000000000000925C ; ---------------------------------------------------------------------------
.text:000000000000925C
.text:000000000000925C loc_925C:                               ; CODE XREF: trim2+421↑j
.text:000000000000925C                                         ; trim2+4FC↑j
.text:000000000000925C                 lea     rcx, __PRETTY_FUNCTION___5134 ; "mbiter_multi_next"
.text:0000000000009263                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/mbiter.h"
.text:000000000000926A                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:0000000000009271                 mov     edx, 8Eh        ; line
.text:0000000000009276                 call    ___assert_fail
.text:000000000000927B ; ---------------------------------------------------------------------------
.text:000000000000927B
.text:000000000000927B loc_927B:                               ; CODE XREF: trim2+2CD↑j
.text:000000000000927B                                         ; trim2+481↑j
.text:000000000000927B                 call    mbiter_multi_next_part_0
.text:0000000000009280 ; ---------------------------------------------------------------------------
.text:0000000000009280
.text:0000000000009280 loc_9280:                               ; CODE XREF: trim2+2C1↑j
.text:0000000000009280                                         ; trim2+475↑j
.text:0000000000009280                 lea     rcx, __PRETTY_FUNCTION___5134 ; "mbiter_multi_next"
.text:0000000000009287                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/mbiter.h"
.text:000000000000928E                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:0000000000009295                 mov     edx, 0A9h       ; line
.text:000000000000929A                 call    ___assert_fail
.text:000000000000929A ; } // starts at 8C70
.text:000000000000929A trim2           endp
.text:000000000000929A
.text:000000000000929A ; ---------------------------------------------------------------------------
.text:000000000000929F                 align 20h
.text:00000000000092A0
.text:00000000000092A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092A0
.text:00000000000092A0
.text:00000000000092A0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000092A0                 public version_etc_arn
.text:00000000000092A0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_96DB↓j
.text:00000000000092A0                                         ; version_etc_va:loc_972B↓p ...
.text:00000000000092A0
.text:00000000000092A0 var_58          = qword ptr -58h
.text:00000000000092A0 var_50          = qword ptr -50h
.text:00000000000092A0 var_48          = qword ptr -48h
.text:00000000000092A0 var_40          = qword ptr -40h
.text:00000000000092A0
.text:00000000000092A0 ; __unwind {
.text:00000000000092A0                 push    r15
.text:00000000000092A2                 push    r14
.text:00000000000092A4                 push    r13
.text:00000000000092A6                 push    r12
.text:00000000000092A8                 mov     r12, r9
.text:00000000000092AB                 push    rbp
.text:00000000000092AC                 push    rbx
.text:00000000000092AD                 mov     rbp, rdi
.text:00000000000092B0                 mov     rbx, r8
.text:00000000000092B3                 sub     rsp, 28h
.text:00000000000092B7                 test    rsi, rsi
.text:00000000000092BA                 jz      loc_93D8
.text:00000000000092C0                 mov     r8, rdx
.text:00000000000092C3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000092CA                 mov     r9, rcx
.text:00000000000092CD                 xor     eax, eax
.text:00000000000092CF                 mov     rcx, rsi
.text:00000000000092D2                 mov     esi, 1
.text:00000000000092D7                 call    ___fprintf_chk
.text:00000000000092DC
.text:00000000000092DC loc_92DC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000092DC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000092E3                 xor     edi, edi        ; domainname
.text:00000000000092E5                 mov     edx, 5          ; category
.text:00000000000092EA                 call    _dcgettext
.text:00000000000092EF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000092F6                 mov     rcx, rax
.text:00000000000092F9                 mov     r8d, 7E3h
.text:00000000000092FF                 mov     esi, 1
.text:0000000000009304                 mov     rdi, rbp
.text:0000000000009307                 xor     eax, eax
.text:0000000000009309                 call    ___fprintf_chk
.text:000000000000930E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000009315                 xor     edi, edi        ; domainname
.text:0000000000009317                 mov     edx, 5          ; category
.text:000000000000931C                 call    _dcgettext
.text:0000000000009321                 mov     rsi, rbp        ; stream
.text:0000000000009324                 mov     rdi, rax        ; s
.text:0000000000009327                 call    _fputs_unlocked
.text:000000000000932C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000009330                 ja      def_9344        ; jumptable 0000000000009344 default case
.text:0000000000009336                 lea     rdx, jpt_9344
.text:000000000000933D                 movsxd  rax, ds:(jpt_9344 - 1C51Ch)[rdx+r12*4]
.text:0000000000009341                 add     rax, rdx
.text:0000000000009344                 jmp     rax             ; switch jump
.text:0000000000009344 ; ---------------------------------------------------------------------------
.text:0000000000009346                 align 10h
.text:0000000000009350
.text:0000000000009350 loc_9350:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009350                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:0000000000009350                 mov     r9, [rbx+38h]   ; jumptable 0000000000009344 case 8
.text:0000000000009354                 mov     rax, [rbx+10h]
.text:0000000000009358                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000935F                 mov     r8, [rbx+8]
.text:0000000000009363                 mov     edx, 5          ; category
.text:0000000000009368                 xor     edi, edi        ; domainname
.text:000000000000936A                 mov     r13, [rbx+30h]
.text:000000000000936E                 mov     r12, [rbx+28h]
.text:0000000000009372                 mov     [rsp+58h+var_48], r9
.text:0000000000009377                 mov     r15, [rbx+20h]
.text:000000000000937B                 mov     r14, [rbx+18h]
.text:000000000000937F                 mov     [rsp+58h+var_58], rax
.text:0000000000009383                 mov     [rsp+58h+var_50], r8
.text:0000000000009388                 mov     rbx, [rbx]
.text:000000000000938B                 call    _dcgettext
.text:0000000000009390                 sub     rsp, 8
.text:0000000000009394
.text:0000000000009394 loc_9394:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000009394                 mov     r9, [rsp+60h+var_48]
.text:0000000000009399                 mov     rdx, rax
.text:000000000000939C                 mov     rcx, rbx
.text:000000000000939F                 mov     esi, 1
.text:00000000000093A4                 mov     rdi, rbp
.text:00000000000093A7                 xor     eax, eax
.text:00000000000093A9                 push    r9
.text:00000000000093AB                 push    r13
.text:00000000000093AD                 push    r12
.text:00000000000093AF                 push    r15
.text:00000000000093B1                 push    r14
.text:00000000000093B3                 mov     r9, [rsp+88h+var_58]
.text:00000000000093B8                 mov     r8, [rsp+88h+var_50]
.text:00000000000093BD                 call    ___fprintf_chk
.text:00000000000093C2                 add     rsp, 30h
.text:00000000000093C6
.text:00000000000093C6 loc_93C6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000093C6                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:00000000000093C6                 add     rsp, 28h        ; jumptable 0000000000009344 case 0
.text:00000000000093CA                 pop     rbx
.text:00000000000093CB                 pop     rbp
.text:00000000000093CC                 pop     r12
.text:00000000000093CE                 pop     r13
.text:00000000000093D0                 pop     r14
.text:00000000000093D2                 pop     r15
.text:00000000000093D4                 retn
.text:00000000000093D4 ; ---------------------------------------------------------------------------
.text:00000000000093D5                 align 8
.text:00000000000093D8
.text:00000000000093D8 loc_93D8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000093D8                 mov     r8, rcx
.text:00000000000093DB                 mov     rcx, rdx
.text:00000000000093DE                 lea     rdx, aSS_1      ; "%s %s\n"
.text:00000000000093E5                 mov     esi, 1
.text:00000000000093EA                 xor     eax, eax
.text:00000000000093EC                 call    ___fprintf_chk
.text:00000000000093F1                 jmp     loc_92DC
.text:00000000000093F1 ; ---------------------------------------------------------------------------
.text:00000000000093F6                 align 20h
.text:0000000000009400
.text:0000000000009400 loc_9400:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009400                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:0000000000009400                 mov     r10, [rbx+40h]  ; jumptable 0000000000009344 case 9
.text:0000000000009404                 mov     r9, [rbx+38h]
.text:0000000000009408                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000940F                 mov     rax, [rbx+10h]
.text:0000000000009413                 mov     r8, [rbx+8]
.text:0000000000009417                 mov     edx, 5          ; category
.text:000000000000941C                 mov     r13, [rbx+30h]
.text:0000000000009420                 mov     r12, [rbx+28h]
.text:0000000000009424                 mov     r15, [rbx+20h]
.text:0000000000009428                 mov     r14, [rbx+18h]
.text:000000000000942C                 mov     rbx, [rbx]
.text:000000000000942F                 mov     [rsp+58h+var_40], r10
.text:0000000000009434                 mov     [rsp+58h+var_48], r9
.text:0000000000009439                 mov     [rsp+58h+var_58], rax
.text:000000000000943D                 mov     [rsp+58h+var_50], r8
.text:0000000000009442
.text:0000000000009442 loc_9442:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000009442                 xor     edi, edi        ; domainname
.text:0000000000009444                 call    _dcgettext
.text:0000000000009449                 mov     r10, [rsp+58h+var_40]
.text:000000000000944E                 push    r10
.text:0000000000009450                 jmp     loc_9394
.text:0000000000009450 ; ---------------------------------------------------------------------------
.text:0000000000009455                 align 8
.text:0000000000009458
.text:0000000000009458 loc_9458:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009458                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:0000000000009458                 mov     rbx, [rbx]      ; jumptable 0000000000009344 case 1
.text:000000000000945B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000009462                 mov     edx, 5          ; category
.text:0000000000009467                 xor     edi, edi        ; domainname
.text:0000000000009469                 call    _dcgettext
.text:000000000000946E                 add     rsp, 28h
.text:0000000000009472                 mov     rcx, rbx
.text:0000000000009475                 mov     rdi, rbp
.text:0000000000009478                 pop     rbx
.text:0000000000009479                 pop     rbp
.text:000000000000947A                 pop     r12
.text:000000000000947C                 pop     r13
.text:000000000000947E                 pop     r14
.text:0000000000009480                 pop     r15
.text:0000000000009482                 mov     rdx, rax
.text:0000000000009485                 mov     esi, 1
.text:000000000000948A                 xor     eax, eax
.text:000000000000948C                 jmp     ___fprintf_chk
.text:000000000000948C ; ---------------------------------------------------------------------------
.text:0000000000009491                 align 8
.text:0000000000009498
.text:0000000000009498 loc_9498:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009498                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:0000000000009498                 mov     r12, [rbx+8]    ; jumptable 0000000000009344 case 2
.text:000000000000949C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000094A3                 mov     rbx, [rbx]
.text:00000000000094A6                 mov     edx, 5          ; category
.text:00000000000094AB                 xor     edi, edi        ; domainname
.text:00000000000094AD                 call    _dcgettext
.text:00000000000094B2                 add     rsp, 28h
.text:00000000000094B6                 mov     r8, r12
.text:00000000000094B9                 mov     rcx, rbx
.text:00000000000094BC                 mov     rdi, rbp
.text:00000000000094BF                 mov     rdx, rax
.text:00000000000094C2                 mov     esi, 1
.text:00000000000094C7                 pop     rbx
.text:00000000000094C8                 pop     rbp
.text:00000000000094C9                 pop     r12
.text:00000000000094CB                 pop     r13
.text:00000000000094CD                 pop     r14
.text:00000000000094CF                 pop     r15
.text:00000000000094D1                 xor     eax, eax
.text:00000000000094D3                 jmp     ___fprintf_chk
.text:00000000000094D3 ; ---------------------------------------------------------------------------
.text:00000000000094D8                 align 20h
.text:00000000000094E0
.text:00000000000094E0 loc_94E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000094E0                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:00000000000094E0                 mov     r13, [rbx+10h]  ; jumptable 0000000000009344 case 3
.text:00000000000094E4                 mov     r12, [rbx+8]
.text:00000000000094E8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000094EF                 mov     rbx, [rbx]
.text:00000000000094F2                 mov     edx, 5          ; category
.text:00000000000094F7                 xor     edi, edi        ; domainname
.text:00000000000094F9                 call    _dcgettext
.text:00000000000094FE                 add     rsp, 28h
.text:0000000000009502                 mov     r9, r13
.text:0000000000009505                 mov     r8, r12
.text:0000000000009508                 mov     rcx, rbx
.text:000000000000950B                 mov     rdi, rbp
.text:000000000000950E                 mov     rdx, rax
.text:0000000000009511                 pop     rbx
.text:0000000000009512                 pop     rbp
.text:0000000000009513                 pop     r12
.text:0000000000009515                 pop     r13
.text:0000000000009517                 pop     r14
.text:0000000000009519                 pop     r15
.text:000000000000951B                 mov     esi, 1
.text:0000000000009520                 xor     eax, eax
.text:0000000000009522                 jmp     ___fprintf_chk
.text:0000000000009522 ; ---------------------------------------------------------------------------
.text:0000000000009527                 align 10h
.text:0000000000009530
.text:0000000000009530 loc_9530:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009530                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:0000000000009530                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000009344 case 4
.text:0000000000009537                 mov     edx, 5          ; category
.text:000000000000953C                 xor     edi, edi        ; domainname
.text:000000000000953E                 mov     r14, [rbx+18h]
.text:0000000000009542                 mov     r13, [rbx+10h]
.text:0000000000009546                 mov     r12, [rbx+8]
.text:000000000000954A                 mov     rbx, [rbx]
.text:000000000000954D                 call    _dcgettext
.text:0000000000009552                 sub     rsp, 8
.text:0000000000009556
.text:0000000000009556 loc_9556:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000009556                 push    r14
.text:0000000000009558                 mov     rdx, rax
.text:000000000000955B                 mov     r9, r13
.text:000000000000955E                 mov     r8, r12
.text:0000000000009561                 mov     rcx, rbx
.text:0000000000009564                 mov     rdi, rbp
.text:0000000000009567                 mov     esi, 1
.text:000000000000956C                 xor     eax, eax
.text:000000000000956E                 call    ___fprintf_chk
.text:0000000000009573                 pop     rax
.text:0000000000009574                 pop     rdx
.text:0000000000009575                 add     rsp, 28h
.text:0000000000009579                 pop     rbx
.text:000000000000957A                 pop     rbp
.text:000000000000957B                 pop     r12
.text:000000000000957D                 pop     r13
.text:000000000000957F                 pop     r14
.text:0000000000009581                 pop     r15
.text:0000000000009583                 retn
.text:0000000000009583 ; ---------------------------------------------------------------------------
.text:0000000000009584                 align 8
.text:0000000000009588
.text:0000000000009588 loc_9588:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009588                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:0000000000009588                 mov     r15, [rbx+20h]  ; jumptable 0000000000009344 case 5
.text:000000000000958C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000009593                 mov     edx, 5          ; category
.text:0000000000009598                 xor     edi, edi        ; domainname
.text:000000000000959A                 mov     r14, [rbx+18h]
.text:000000000000959E                 mov     r13, [rbx+10h]
.text:00000000000095A2                 mov     r12, [rbx+8]
.text:00000000000095A6                 mov     rbx, [rbx]
.text:00000000000095A9                 call    _dcgettext
.text:00000000000095AE                 push    r15
.text:00000000000095B0                 jmp     short loc_9556
.text:00000000000095B0 ; ---------------------------------------------------------------------------
.text:00000000000095B2                 align 8
.text:00000000000095B8
.text:00000000000095B8 loc_95B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000095B8                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:00000000000095B8                 mov     r8, [rbx+8]     ; jumptable 0000000000009344 case 6
.text:00000000000095BC                 mov     r12, [rbx+28h]
.text:00000000000095C0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000095C7                 mov     r15, [rbx+20h]
.text:00000000000095CB                 mov     r14, [rbx+18h]
.text:00000000000095CF                 mov     edx, 5          ; category
.text:00000000000095D4                 mov     r13, [rbx+10h]
.text:00000000000095D8                 xor     edi, edi        ; domainname
.text:00000000000095DA                 mov     rbx, [rbx]
.text:00000000000095DD                 mov     [rsp+58h+var_58], r8
.text:00000000000095E1                 call    _dcgettext
.text:00000000000095E6                 sub     rsp, 8
.text:00000000000095EA                 mov     r9, r13
.text:00000000000095ED                 push    r12
.text:00000000000095EF                 push    r15
.text:00000000000095F1                 push    r14
.text:00000000000095F3
.text:00000000000095F3 loc_95F3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000095F3                 mov     r8, [rsp+78h+var_58]
.text:00000000000095F8                 mov     rcx, rbx
.text:00000000000095FB                 mov     rdx, rax
.text:00000000000095FE                 mov     rdi, rbp
.text:0000000000009601                 mov     esi, 1
.text:0000000000009606                 xor     eax, eax
.text:0000000000009608                 call    ___fprintf_chk
.text:000000000000960D                 add     rsp, 20h
.text:0000000000009611                 add     rsp, 28h
.text:0000000000009615                 pop     rbx
.text:0000000000009616                 pop     rbp
.text:0000000000009617                 pop     r12
.text:0000000000009619                 pop     r13
.text:000000000000961B                 pop     r14
.text:000000000000961D                 pop     r15
.text:000000000000961F                 retn
.text:0000000000009620 ; ---------------------------------------------------------------------------
.text:0000000000009620
.text:0000000000009620 loc_9620:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009620                                         ; DATA XREF: .rodata:jpt_9344↓o
.text:0000000000009620                 mov     r9, [rbx+10h]   ; jumptable 0000000000009344 case 7
.text:0000000000009624                 mov     r13, [rbx+30h]
.text:0000000000009628                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000962F                 mov     r12, [rbx+28h]
.text:0000000000009633                 mov     r15, [rbx+20h]
.text:0000000000009637                 mov     edx, 5          ; category
.text:000000000000963C                 mov     r14, [rbx+18h]
.text:0000000000009640                 mov     r8, [rbx+8]
.text:0000000000009644                 xor     edi, edi        ; domainname
.text:0000000000009646                 mov     [rsp+58h+var_50], r9
.text:000000000000964B                 mov     rbx, [rbx]
.text:000000000000964E                 mov     [rsp+58h+var_58], r8
.text:0000000000009652                 call    _dcgettext
.text:0000000000009657                 push    r13
.text:0000000000009659                 push    r12
.text:000000000000965B                 push    r15
.text:000000000000965D                 push    r14
.text:000000000000965F                 mov     r9, [rsp+78h+var_50]
.text:0000000000009664                 jmp     short loc_95F3
.text:0000000000009664 ; ---------------------------------------------------------------------------
.text:0000000000009666                 align 10h
.text:0000000000009670
.text:0000000000009670 def_9344:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000009670                 mov     r10, [rbx+40h]  ; jumptable 0000000000009344 default case
.text:0000000000009674                 mov     r9, [rbx+38h]
.text:0000000000009678                 mov     edx, 5
.text:000000000000967D                 mov     rax, [rbx+10h]
.text:0000000000009681                 mov     r8, [rbx+8]
.text:0000000000009685                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000968C                 mov     r13, [rbx+30h]
.text:0000000000009690                 mov     r12, [rbx+28h]
.text:0000000000009694                 mov     r15, [rbx+20h]
.text:0000000000009698                 mov     r14, [rbx+18h]
.text:000000000000969C                 mov     [rsp+58h+var_40], r10
.text:00000000000096A1                 mov     [rsp+58h+var_48], r9
.text:00000000000096A6                 mov     [rsp+58h+var_58], rax
.text:00000000000096AA                 mov     [rsp+58h+var_50], r8
.text:00000000000096AF                 mov     rbx, [rbx]
.text:00000000000096B2                 jmp     loc_9442
.text:00000000000096B2 ; } // starts at 92A0
.text:00000000000096B2 version_etc_arn endp
.text:00000000000096B2
.text:00000000000096B2 ; ---------------------------------------------------------------------------
.text:00000000000096B7                 align 20h
.text:00000000000096C0
.text:00000000000096C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096C0
.text:00000000000096C0 ; Attributes: info_from_lumina
.text:00000000000096C0
.text:00000000000096C0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000096C0                 public version_etc_ar
.text:00000000000096C0 version_etc_ar  proc near
.text:00000000000096C0 ; __unwind {
.text:00000000000096C0                 xor     r9d, r9d
.text:00000000000096C3                 cmp     qword ptr [r8], 0
.text:00000000000096C7                 jz      short loc_96DB
.text:00000000000096C9                 nop     dword ptr [rax+00000000h]
.text:00000000000096D0
.text:00000000000096D0 loc_96D0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000096D0                 add     r9, 1
.text:00000000000096D4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000096D9                 jnz     short loc_96D0
.text:00000000000096DB
.text:00000000000096DB loc_96DB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000096DB                 jmp     version_etc_arn
.text:00000000000096DB ; } // starts at 96C0
.text:00000000000096DB version_etc_ar  endp
.text:00000000000096DB
.text:00000000000096E0
.text:00000000000096E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096E0
.text:00000000000096E0 ; Attributes: info_from_lumina
.text:00000000000096E0
.text:00000000000096E0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000096E0                 public version_etc_va
.text:00000000000096E0 version_etc_va  proc near
.text:00000000000096E0
.text:00000000000096E0 authtab         = qword ptr -68h
.text:00000000000096E0 var_10          = qword ptr -10h
.text:00000000000096E0
.text:00000000000096E0 ; __unwind {
.text:00000000000096E0                 sub     rsp, 68h
.text:00000000000096E4                 mov     r10, r8
.text:00000000000096E7                 xor     r9d, r9d
.text:00000000000096EA                 mov     rax, fs:28h
.text:00000000000096F3                 mov     [rsp+68h+var_10], rax
.text:00000000000096F8                 xor     eax, eax
.text:00000000000096FA                 mov     r8, rsp
.text:00000000000096FD                 nop     dword ptr [rax]
.text:0000000000009700
.text:0000000000009700 loc_9700:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000009700                 mov     eax, [r10]
.text:0000000000009703                 cmp     eax, 2Fh ; '/'
.text:0000000000009706                 ja      short loc_974A
.text:0000000000009708                 mov     r11d, eax
.text:000000000000970B                 add     r11, [r10+10h]
.text:000000000000970F                 add     eax, 8
.text:0000000000009712                 mov     [r10], eax
.text:0000000000009715
.text:0000000000009715 loc_9715:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000009715                 mov     rax, [r11]
.text:0000000000009718                 test    rax, rax
.text:000000000000971B                 mov     [r8+r9*8], rax
.text:000000000000971F                 jz      short loc_972B
.text:0000000000009721                 add     r9, 1
.text:0000000000009725                 cmp     r9, 0Ah
.text:0000000000009729                 jnz     short loc_9700
.text:000000000000972B
.text:000000000000972B loc_972B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000972B                 call    version_etc_arn
.text:0000000000009730                 mov     rax, [rsp+68h+var_10]
.text:0000000000009735                 xor     rax, fs:28h
.text:000000000000973E                 jnz     short loc_9745
.text:0000000000009740                 add     rsp, 68h
.text:0000000000009744                 retn
.text:0000000000009745 ; ---------------------------------------------------------------------------
.text:0000000000009745
.text:0000000000009745 loc_9745:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000009745                 call    ___stack_chk_fail
.text:000000000000974A ; ---------------------------------------------------------------------------
.text:000000000000974A
.text:000000000000974A loc_974A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000974A                 mov     r11, [r10+8]
.text:000000000000974E                 lea     rax, [r11+8]
.text:0000000000009752                 mov     [r10+8], rax
.text:0000000000009756                 jmp     short loc_9715
.text:0000000000009756 ; } // starts at 96E0
.text:0000000000009756 version_etc_va  endp
.text:0000000000009756
.text:0000000000009756 ; ---------------------------------------------------------------------------
.text:0000000000009758                 align 20h
.text:0000000000009760
.text:0000000000009760 ; =============== S U B R O U T I N E =======================================
.text:0000000000009760
.text:0000000000009760 ; Attributes: info_from_lumina
.text:0000000000009760
.text:0000000000009760 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000009760                 public version_etc
.text:0000000000009760 version_etc     proc near               ; CODE XREF: main+2AE↑p
.text:0000000000009760
.text:0000000000009760 var_C0          = dword ptr -0C0h
.text:0000000000009760 var_B8          = qword ptr -0B8h
.text:0000000000009760 var_B0          = qword ptr -0B0h
.text:0000000000009760 var_A8          = byte ptr -0A8h
.text:0000000000009760 var_50          = qword ptr -50h
.text:0000000000009760 var_48          = byte ptr -48h
.text:0000000000009760 var_28          = qword ptr -28h
.text:0000000000009760 var_20          = qword ptr -20h
.text:0000000000009760 arg_0           = byte ptr  8
.text:0000000000009760
.text:0000000000009760 ; __unwind {
.text:0000000000009760                 push    rbp
.text:0000000000009761                 push    rbx
.text:0000000000009762                 mov     r10d, 20h ; ' '
.text:0000000000009768                 xor     r11d, r11d
.text:000000000000976B                 sub     rsp, 0B8h
.text:0000000000009772                 mov     rax, fs:28h
.text:000000000000977B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000009780                 xor     eax, eax
.text:0000000000009782                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000978A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000009792                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000979A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000979F                 mov     [rsp+0C8h+var_20], r9
.text:00000000000097A7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000097AF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000097B4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000097BC                 xor     r9d, r9d
.text:00000000000097BF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000097C4                 mov     rbp, rax
.text:00000000000097C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000097D0
.text:00000000000097D0 loc_97D0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000097D0                 cmp     r10d, 2Fh ; '/'
.text:00000000000097D4                 ja      short loc_982C
.text:00000000000097D6                 mov     eax, r10d
.text:00000000000097D9                 mov     r11d, 1
.text:00000000000097DF                 add     r10d, 8
.text:00000000000097E3                 add     rax, rbp
.text:00000000000097E6
.text:00000000000097E6 loc_97E6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000097E6                 mov     rax, [rax]
.text:00000000000097E9                 test    rax, rax
.text:00000000000097EC                 mov     [r8+r9*8], rax
.text:00000000000097F0                 jz      short loc_97FC
.text:00000000000097F2                 add     r9, 1
.text:00000000000097F6                 cmp     r9, 0Ah
.text:00000000000097FA                 jnz     short loc_97D0
.text:00000000000097FC
.text:00000000000097FC loc_97FC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000097FC                 test    r11b, r11b
.text:00000000000097FF                 jnz     short loc_9825
.text:0000000000009801
.text:0000000000009801 loc_9801:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000009801                 call    version_etc_arn
.text:0000000000009806                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000980B                 xor     rax, fs:28h
.text:0000000000009814                 jnz     short loc_9820
.text:0000000000009816                 add     rsp, 0B8h
.text:000000000000981D                 pop     rbx
.text:000000000000981E                 pop     rbp
.text:000000000000981F                 retn
.text:0000000000009820 ; ---------------------------------------------------------------------------
.text:0000000000009820
.text:0000000000009820 loc_9820:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000009820                 call    ___stack_chk_fail
.text:0000000000009825 ; ---------------------------------------------------------------------------
.text:0000000000009825
.text:0000000000009825 loc_9825:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000009825                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000982A                 jmp     short loc_9801
.text:000000000000982C ; ---------------------------------------------------------------------------
.text:000000000000982C
.text:000000000000982C loc_982C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000982C                 mov     rax, rbx
.text:000000000000982F                 add     rbx, 8
.text:0000000000009833                 jmp     short loc_97E6
.text:0000000000009833 ; } // starts at 9760
.text:0000000000009833 version_etc     endp
.text:0000000000009833
.text:0000000000009833 ; ---------------------------------------------------------------------------
.text:0000000000009835                 align 20h
.text:0000000000009840
.text:0000000000009840 ; =============== S U B R O U T I N E =======================================
.text:0000000000009840
.text:0000000000009840 ; Attributes: info_from_lumina
.text:0000000000009840
.text:0000000000009840 ; void __cdecl emit_bug_reporting_address()
.text:0000000000009840                 public emit_bug_reporting_address
.text:0000000000009840 emit_bug_reporting_address proc near
.text:0000000000009840 ; __unwind {
.text:0000000000009840                 push    rbx
.text:0000000000009841                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000009848                 mov     edx, 5          ; category
.text:000000000000984D                 xor     edi, edi        ; domainname
.text:000000000000984F                 call    _dcgettext
.text:0000000000009854                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000985B                 mov     rsi, rax
.text:000000000000985E                 mov     edi, 1
.text:0000000000009863                 xor     eax, eax
.text:0000000000009865                 call    ___printf_chk
.text:000000000000986A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000009871                 mov     edx, 5          ; category
.text:0000000000009876                 xor     edi, edi        ; domainname
.text:0000000000009878                 call    _dcgettext
.text:000000000000987D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000009884                 lea     rdx, unk_1B7D2
.text:000000000000988B                 mov     rsi, rax
.text:000000000000988E                 mov     edi, 1
.text:0000000000009893                 xor     eax, eax
.text:0000000000009895                 call    ___printf_chk
.text:000000000000989A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000098A1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000098A8                 xor     edi, edi        ; domainname
.text:00000000000098AA                 mov     edx, 5          ; category
.text:00000000000098AF                 call    _dcgettext
.text:00000000000098B4                 mov     rsi, rbx        ; stream
.text:00000000000098B7                 mov     rdi, rax        ; s
.text:00000000000098BA                 pop     rbx
.text:00000000000098BB                 jmp     _fputs_unlocked
.text:00000000000098BB ; } // starts at 9840
.text:00000000000098BB emit_bug_reporting_address endp
.text:00000000000098BB
.text:00000000000098C0
.text:00000000000098C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098C0
.text:00000000000098C0
.text:00000000000098C0                 public xmalloc
.text:00000000000098C0 xmalloc         proc near               ; CODE XREF: main+3C2↑p
.text:00000000000098C0                                         ; main+402↑p ...
.text:00000000000098C0 ; __unwind {
.text:00000000000098C0                 push    rbx
.text:00000000000098C1                 mov     rbx, rdi
.text:00000000000098C4                 call    _malloc
.text:00000000000098C9                 test    rax, rax
.text:00000000000098CC                 jnz     short loc_98D3
.text:00000000000098CE                 test    rbx, rbx
.text:00000000000098D1                 jnz     short loc_98D5
.text:00000000000098D3
.text:00000000000098D3 loc_98D3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000098D3                 pop     rbx
.text:00000000000098D4                 retn
.text:00000000000098D5 ; ---------------------------------------------------------------------------
.text:00000000000098D5
.text:00000000000098D5 loc_98D5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000098D5                 call    xalloc_die
.text:00000000000098D5 ; } // starts at 98C0
.text:00000000000098D5 xmalloc         endp
.text:00000000000098D5
.text:00000000000098D5 ; ---------------------------------------------------------------------------
.text:00000000000098DA                 align 20h
.text:00000000000098E0
.text:00000000000098E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098E0
.text:00000000000098E0 ; Attributes: info_from_lumina
.text:00000000000098E0
.text:00000000000098E0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000098E0                 public xnmalloc
.text:00000000000098E0 xnmalloc        proc near
.text:00000000000098E0 ; __unwind {
.text:00000000000098E0                 mov     rax, rdi
.text:00000000000098E3                 mul     rsi
.text:00000000000098E6                 mov     rdi, rax
.text:00000000000098E9                 seto    al
.text:00000000000098EC                 test    rdi, rdi
.text:00000000000098EF                 js      short loc_98FB
.text:00000000000098F1                 movzx   eax, al
.text:00000000000098F4                 test    rax, rax
.text:00000000000098F7                 jnz     short loc_98FB
.text:00000000000098F9                 jmp     short xmalloc
.text:00000000000098FB ; ---------------------------------------------------------------------------
.text:00000000000098FB
.text:00000000000098FB loc_98FB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000098FB                                         ; xnmalloc+17↑j
.text:00000000000098FB                 sub     rsp, 8
.text:00000000000098FF                 call    xalloc_die
.text:00000000000098FF ; } // starts at 98E0
.text:00000000000098FF xnmalloc        endp
.text:00000000000098FF
.text:00000000000098FF ; ---------------------------------------------------------------------------
.text:0000000000009904                 align 10h
.text:0000000000009910
.text:0000000000009910 ; =============== S U B R O U T I N E =======================================
.text:0000000000009910
.text:0000000000009910
.text:0000000000009910                 public xcharalloc
.text:0000000000009910 xcharalloc      proc near
.text:0000000000009910 ; __unwind {
.text:0000000000009910                 jmp     short xmalloc
.text:0000000000009910 ; } // starts at 9910
.text:0000000000009910 xcharalloc      endp
.text:0000000000009910
.text:0000000000009910 ; ---------------------------------------------------------------------------
.text:0000000000009912                 align 20h
.text:0000000000009920
.text:0000000000009920 ; =============== S U B R O U T I N E =======================================
.text:0000000000009920
.text:0000000000009920 ; Attributes: info_from_lumina
.text:0000000000009920
.text:0000000000009920 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000009920                 public xrealloc
.text:0000000000009920 xrealloc        proc near               ; CODE XREF: main+F71↑p
.text:0000000000009920                                         ; quotearg_n_options+6E↑p ...
.text:0000000000009920 ; __unwind {
.text:0000000000009920                 test    rsi, rsi
.text:0000000000009923                 push    rbx
.text:0000000000009924                 mov     rbx, rsi
.text:0000000000009927                 jnz     short loc_992E
.text:0000000000009929                 test    rdi, rdi
.text:000000000000992C                 jnz     short loc_9948
.text:000000000000992E
.text:000000000000992E loc_992E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000992E                 mov     rsi, rbx        ; size
.text:0000000000009931                 call    _realloc
.text:0000000000009936                 test    rax, rax
.text:0000000000009939                 jnz     short loc_9940
.text:000000000000993B                 test    rbx, rbx
.text:000000000000993E                 jnz     short loc_9951
.text:0000000000009940
.text:0000000000009940 loc_9940:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000009940                 pop     rbx
.text:0000000000009941                 retn
.text:0000000000009941 ; ---------------------------------------------------------------------------
.text:0000000000009942                 align 8
.text:0000000000009948
.text:0000000000009948 loc_9948:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000009948                 call    _free
.text:000000000000994D                 xor     eax, eax
.text:000000000000994F                 pop     rbx
.text:0000000000009950                 retn
.text:0000000000009951 ; ---------------------------------------------------------------------------
.text:0000000000009951
.text:0000000000009951 loc_9951:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000009951                 call    xalloc_die
.text:0000000000009951 ; } // starts at 9920
.text:0000000000009951 xrealloc        endp
.text:0000000000009951
.text:0000000000009951 ; ---------------------------------------------------------------------------
.text:0000000000009956                 align 20h
.text:0000000000009960
.text:0000000000009960 ; =============== S U B R O U T I N E =======================================
.text:0000000000009960
.text:0000000000009960 ; Attributes: info_from_lumina
.text:0000000000009960
.text:0000000000009960 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000009960                 public xnrealloc
.text:0000000000009960 xnrealloc       proc near
.text:0000000000009960 ; __unwind {
.text:0000000000009960                 mov     rax, rsi
.text:0000000000009963                 mul     rdx
.text:0000000000009966                 mov     rsi, rax
.text:0000000000009969                 seto    al
.text:000000000000996C                 test    rsi, rsi
.text:000000000000996F                 js      short loc_997B
.text:0000000000009971                 movzx   eax, al
.text:0000000000009974                 test    rax, rax
.text:0000000000009977                 jnz     short loc_997B
.text:0000000000009979                 jmp     short xrealloc
.text:000000000000997B ; ---------------------------------------------------------------------------
.text:000000000000997B
.text:000000000000997B loc_997B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000997B                                         ; xnrealloc+17↑j
.text:000000000000997B                 sub     rsp, 8
.text:000000000000997F                 call    xalloc_die
.text:000000000000997F ; } // starts at 9960
.text:000000000000997F xnrealloc       endp
.text:000000000000997F
.text:000000000000997F ; ---------------------------------------------------------------------------
.text:0000000000009984                 align 10h
.text:0000000000009990
.text:0000000000009990 ; =============== S U B R O U T I N E =======================================
.text:0000000000009990
.text:0000000000009990 ; Attributes: info_from_lumina
.text:0000000000009990
.text:0000000000009990 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000009990                 public x2nrealloc
.text:0000000000009990 x2nrealloc      proc near               ; CODE XREF: digest_word_file+F2↑p
.text:0000000000009990 ; __unwind {
.text:0000000000009990                 test    rdi, rdi
.text:0000000000009993                 mov     r9, rdx
.text:0000000000009996                 mov     rcx, [rsi]
.text:0000000000009999                 jz      short loc_99D0
.text:000000000000999B                 xor     edx, edx
.text:000000000000999D                 mov     rax, 5555555555555554h
.text:00000000000099A7                 div     r9
.text:00000000000099AA                 cmp     rax, rcx
.text:00000000000099AD                 jbe     short loc_99EB
.text:00000000000099AF                 mov     rax, rcx
.text:00000000000099B2                 shr     rax, 1
.text:00000000000099B5                 lea     rcx, [rax+rcx+1]
.text:00000000000099BA
.text:00000000000099BA loc_99BA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000099BA                 mov     [rsi], rcx
.text:00000000000099BD                 imul    rcx, r9
.text:00000000000099C1                 mov     rsi, rcx
.text:00000000000099C4                 jmp     xrealloc
.text:00000000000099C4 ; ---------------------------------------------------------------------------
.text:00000000000099C9                 align 10h
.text:00000000000099D0
.text:00000000000099D0 loc_99D0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000099D0                 test    rcx, rcx
.text:00000000000099D3                 jz      short loc_99F8
.text:00000000000099D5
.text:00000000000099D5 loc_99D5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000099D5                 mov     rax, rcx
.text:00000000000099D8                 mul     r9
.text:00000000000099DB                 seto    dl
.text:00000000000099DE                 test    rax, rax
.text:00000000000099E1                 movzx   edx, dl
.text:00000000000099E4                 js      short loc_99EB
.text:00000000000099E6                 test    rdx, rdx
.text:00000000000099E9                 jz      short loc_99BA
.text:00000000000099EB
.text:00000000000099EB loc_99EB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000099EB                                         ; x2nrealloc+54↑j
.text:00000000000099EB                 sub     rsp, 8
.text:00000000000099EF                 call    xalloc_die
.text:00000000000099EF ; ---------------------------------------------------------------------------
.text:00000000000099F4                 align 8
.text:00000000000099F8
.text:00000000000099F8 loc_99F8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000099F8                 xor     edx, edx
.text:00000000000099FA                 mov     eax, 80h
.text:00000000000099FF                 xor     r8d, r8d
.text:0000000000009A02                 div     r9
.text:0000000000009A05                 test    rax, rax
.text:0000000000009A08                 setz    r8b
.text:0000000000009A0C                 lea     rcx, [r8+rax]
.text:0000000000009A10                 jmp     short loc_99D5
.text:0000000000009A10 ; } // starts at 9990
.text:0000000000009A10 x2nrealloc      endp
.text:0000000000009A10
.text:0000000000009A10 ; ---------------------------------------------------------------------------
.text:0000000000009A12                 align 20h
.text:0000000000009A20
.text:0000000000009A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A20
.text:0000000000009A20 ; Attributes: info_from_lumina
.text:0000000000009A20
.text:0000000000009A20 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000009A20                 public x2realloc
.text:0000000000009A20 x2realloc       proc near
.text:0000000000009A20 ; __unwind {
.text:0000000000009A20                 test    rdi, rdi
.text:0000000000009A23                 mov     rax, [rsi]
.text:0000000000009A26                 jz      short loc_9A50
.text:0000000000009A28                 mov     rdx, 5555555555555553h
.text:0000000000009A32                 cmp     rax, rdx
.text:0000000000009A35                 ja      short loc_9A61
.text:0000000000009A37                 mov     rdx, rax
.text:0000000000009A3A                 shr     rdx, 1
.text:0000000000009A3D                 lea     rax, [rdx+rax+1]
.text:0000000000009A42
.text:0000000000009A42 loc_9A42:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000009A42                 mov     [rsi], rax
.text:0000000000009A45                 mov     rsi, rax
.text:0000000000009A48                 jmp     xrealloc
.text:0000000000009A48 ; ---------------------------------------------------------------------------
.text:0000000000009A4D                 align 10h
.text:0000000000009A50
.text:0000000000009A50 loc_9A50:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000009A50                 test    rax, rax
.text:0000000000009A53                 mov     edx, 80h
.text:0000000000009A58                 cmovz   rax, rdx
.text:0000000000009A5C                 test    rax, rax
.text:0000000000009A5F                 jns     short loc_9A42
.text:0000000000009A61
.text:0000000000009A61 loc_9A61:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000009A61                 sub     rsp, 8
.text:0000000000009A65                 call    xalloc_die
.text:0000000000009A65 ; } // starts at 9A20
.text:0000000000009A65 x2realloc       endp
.text:0000000000009A65
.text:0000000000009A65 ; ---------------------------------------------------------------------------
.text:0000000000009A6A                 align 10h
.text:0000000000009A70
.text:0000000000009A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A70
.text:0000000000009A70
.text:0000000000009A70 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000009A70                 public xzalloc
.text:0000000000009A70 xzalloc         proc near
.text:0000000000009A70 ; __unwind {
.text:0000000000009A70                 push    rbx
.text:0000000000009A71                 mov     rbx, rdi
.text:0000000000009A74                 call    xmalloc
.text:0000000000009A79                 mov     rdx, rbx        ; n
.text:0000000000009A7C                 xor     esi, esi        ; c
.text:0000000000009A7E                 mov     rdi, rax        ; s
.text:0000000000009A81                 pop     rbx
.text:0000000000009A82                 jmp     _memset
.text:0000000000009A82 ; } // starts at 9A70
.text:0000000000009A82 xzalloc         endp
.text:0000000000009A82
.text:0000000000009A82 ; ---------------------------------------------------------------------------
.text:0000000000009A87                 align 10h
.text:0000000000009A90
.text:0000000000009A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A90
.text:0000000000009A90 ; Attributes: info_from_lumina
.text:0000000000009A90
.text:0000000000009A90 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000009A90                 public xcalloc
.text:0000000000009A90 xcalloc         proc near
.text:0000000000009A90 ; __unwind {
.text:0000000000009A90                 mov     rax, rdi
.text:0000000000009A93                 sub     rsp, 8
.text:0000000000009A97                 mul     rsi
.text:0000000000009A9A                 seto    dl
.text:0000000000009A9D                 test    rax, rax
.text:0000000000009AA0                 js      short loc_9AB9
.text:0000000000009AA2                 movzx   edx, dl
.text:0000000000009AA5                 test    rdx, rdx
.text:0000000000009AA8                 jnz     short loc_9AB9
.text:0000000000009AAA                 call    _calloc
.text:0000000000009AAF                 test    rax, rax
.text:0000000000009AB2                 jz      short loc_9AB9
.text:0000000000009AB4                 add     rsp, 8
.text:0000000000009AB8                 retn
.text:0000000000009AB9 ; ---------------------------------------------------------------------------
.text:0000000000009AB9
.text:0000000000009AB9 loc_9AB9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000009AB9                                         ; xcalloc+18↑j ...
.text:0000000000009AB9                 call    xalloc_die
.text:0000000000009AB9 ; } // starts at 9A90
.text:0000000000009AB9 xcalloc         endp
.text:0000000000009AB9
.text:0000000000009AB9 ; ---------------------------------------------------------------------------
.text:0000000000009ABE                 align 20h
.text:0000000000009AC0
.text:0000000000009AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009AC0
.text:0000000000009AC0 ; Attributes: info_from_lumina
.text:0000000000009AC0
.text:0000000000009AC0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000009AC0                 public xmemdup
.text:0000000000009AC0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000009AC0                                         ; xstrdup+11↓j
.text:0000000000009AC0 ; __unwind {
.text:0000000000009AC0                 push    rbp
.text:0000000000009AC1                 push    rbx
.text:0000000000009AC2                 mov     rbp, rdi
.text:0000000000009AC5                 mov     rdi, rsi
.text:0000000000009AC8                 mov     rbx, rsi
.text:0000000000009ACB                 sub     rsp, 8
.text:0000000000009ACF                 call    xmalloc
.text:0000000000009AD4                 add     rsp, 8
.text:0000000000009AD8                 mov     rdx, rbx        ; n
.text:0000000000009ADB                 mov     rsi, rbp        ; src
.text:0000000000009ADE                 pop     rbx
.text:0000000000009ADF                 pop     rbp
.text:0000000000009AE0                 mov     rdi, rax        ; dest
.text:0000000000009AE3                 jmp     _memcpy
.text:0000000000009AE3 ; } // starts at 9AC0
.text:0000000000009AE3 xmemdup         endp
.text:0000000000009AE3
.text:0000000000009AE3 ; ---------------------------------------------------------------------------
.text:0000000000009AE8                 align 10h
.text:0000000000009AF0
.text:0000000000009AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009AF0
.text:0000000000009AF0
.text:0000000000009AF0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000009AF0                 public xstrdup
.text:0000000000009AF0 xstrdup         proc near
.text:0000000000009AF0 ; __unwind {
.text:0000000000009AF0                 push    rbx
.text:0000000000009AF1                 mov     rbx, rdi
.text:0000000000009AF4                 call    _strlen
.text:0000000000009AF9                 mov     rdi, rbx        ; src
.text:0000000000009AFC                 lea     rsi, [rax+1]    ; n
.text:0000000000009B00                 pop     rbx
.text:0000000000009B01                 jmp     short xmemdup
.text:0000000000009B01 ; } // starts at 9AF0
.text:0000000000009B01 xstrdup         endp
.text:0000000000009B01
.text:0000000000009B01 ; ---------------------------------------------------------------------------
.text:0000000000009B03                 align 10h
.text:0000000000009B10
.text:0000000000009B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B10
.text:0000000000009B10 ; Attributes: noreturn info_from_lumina
.text:0000000000009B10
.text:0000000000009B10 ; void __cdecl xalloc_die()
.text:0000000000009B10                 public xalloc_die
.text:0000000000009B10 xalloc_die      proc near               ; CODE XREF: main:loc_31E5↑p
.text:0000000000009B10                                         ; quotearg_n_options:loc_81F6↑p ...
.text:0000000000009B10 ; __unwind {
.text:0000000000009B10                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000009B17                 sub     rsp, 8
.text:0000000000009B1B                 mov     edx, 5          ; category
.text:0000000000009B20                 xor     edi, edi        ; domainname
.text:0000000000009B22                 call    _dcgettext
.text:0000000000009B27                 mov     edi, cs:exit_failure ; status
.text:0000000000009B2D                 lea     rdx, aS_2+2     ; format
.text:0000000000009B34                 mov     rcx, rax
.text:0000000000009B37                 xor     esi, esi        ; errnum
.text:0000000000009B39                 xor     eax, eax
.text:0000000000009B3B                 call    _error
.text:0000000000009B40                 call    _abort
.text:0000000000009B40 ; } // starts at 9B10
.text:0000000000009B40 xalloc_die      endp
.text:0000000000009B40
.text:0000000000009B40 ; ---------------------------------------------------------------------------
.text:0000000000009B45                 align 10h
.text:0000000000009B50
.text:0000000000009B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B50
.text:0000000000009B50
.text:0000000000009B50                 public xmem_cd_iconv
.text:0000000000009B50 xmem_cd_iconv   proc near
.text:0000000000009B50 ; __unwind {
.text:0000000000009B50                 push    rbx
.text:0000000000009B51                 call    libgettextpo_mem_cd_iconv
.text:0000000000009B56                 test    eax, eax
.text:0000000000009B58                 mov     ebx, eax
.text:0000000000009B5A                 js      short loc_9B60
.text:0000000000009B5C
.text:0000000000009B5C loc_9B5C:                               ; CODE XREF: xmem_cd_iconv+18↓j
.text:0000000000009B5C                 mov     eax, ebx
.text:0000000000009B5E                 pop     rbx
.text:0000000000009B5F                 retn
.text:0000000000009B60 ; ---------------------------------------------------------------------------
.text:0000000000009B60
.text:0000000000009B60 loc_9B60:                               ; CODE XREF: xmem_cd_iconv+A↑j
.text:0000000000009B60                 call    ___errno_location
.text:0000000000009B65                 cmp     dword ptr [rax], 0Ch
.text:0000000000009B68                 jnz     short loc_9B5C
.text:0000000000009B6A                 call    xalloc_die
.text:0000000000009B6A ; } // starts at 9B50
.text:0000000000009B6A xmem_cd_iconv   endp
.text:0000000000009B6A
.text:0000000000009B6A ; ---------------------------------------------------------------------------
.text:0000000000009B6F                 align 10h
.text:0000000000009B70
.text:0000000000009B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B70
.text:0000000000009B70 ; Attributes: info_from_lumina
.text:0000000000009B70
.text:0000000000009B70                 public xreadlink
.text:0000000000009B70 xreadlink       proc near
.text:0000000000009B70 ; __unwind {
.text:0000000000009B70                 push    rbx
.text:0000000000009B71                 call    libgettextpo_str_cd_iconv
.text:0000000000009B76                 test    rax, rax
.text:0000000000009B79                 mov     rbx, rax
.text:0000000000009B7C                 jz      short loc_9B88
.text:0000000000009B7E
.text:0000000000009B7E loc_9B7E:                               ; CODE XREF: xreadlink+20↓j
.text:0000000000009B7E                 mov     rax, rbx
.text:0000000000009B81                 pop     rbx
.text:0000000000009B82                 retn
.text:0000000000009B82 ; ---------------------------------------------------------------------------
.text:0000000000009B83                 align 8
.text:0000000000009B88
.text:0000000000009B88 loc_9B88:                               ; CODE XREF: xreadlink+C↑j
.text:0000000000009B88                 call    ___errno_location
.text:0000000000009B8D                 cmp     dword ptr [rax], 0Ch
.text:0000000000009B90                 jnz     short loc_9B7E
.text:0000000000009B92                 call    xalloc_die
.text:0000000000009B92 ; } // starts at 9B70
.text:0000000000009B92 xreadlink       endp
.text:0000000000009B92
.text:0000000000009B92 ; ---------------------------------------------------------------------------
.text:0000000000009B97                 align 20h
.text:0000000000009BA0
.text:0000000000009BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BA0
.text:0000000000009BA0 ; Attributes: info_from_lumina
.text:0000000000009BA0
.text:0000000000009BA0                 public xreadlink_0
.text:0000000000009BA0 xreadlink_0     proc near               ; CODE XREF: proper_name_utf8+135↑p
.text:0000000000009BA0                                         ; proper_name_utf8+193↑p
.text:0000000000009BA0 ; __unwind {
.text:0000000000009BA0                 push    rbx
.text:0000000000009BA1                 call    str_iconv
.text:0000000000009BA6                 test    rax, rax
.text:0000000000009BA9                 mov     rbx, rax
.text:0000000000009BAC                 jz      short loc_9BB8
.text:0000000000009BAE
.text:0000000000009BAE loc_9BAE:                               ; CODE XREF: xreadlink_0+20↓j
.text:0000000000009BAE                 mov     rax, rbx
.text:0000000000009BB1                 pop     rbx
.text:0000000000009BB2                 retn
.text:0000000000009BB2 ; ---------------------------------------------------------------------------
.text:0000000000009BB3                 align 8
.text:0000000000009BB8
.text:0000000000009BB8 loc_9BB8:                               ; CODE XREF: xreadlink_0+C↑j
.text:0000000000009BB8                 call    ___errno_location
.text:0000000000009BBD                 cmp     dword ptr [rax], 0Ch
.text:0000000000009BC0                 jnz     short loc_9BAE
.text:0000000000009BC2                 call    xalloc_die
.text:0000000000009BC2 ; } // starts at 9BA0
.text:0000000000009BC2 xreadlink_0     endp
.text:0000000000009BC2
.text:0000000000009BC2 ; ---------------------------------------------------------------------------
.text:0000000000009BC7                 align 10h
.text:0000000000009BD0
.text:0000000000009BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BD0
.text:0000000000009BD0
.text:0000000000009BD0 ; __int64 __fastcall xstrtoimax(char *nptr)
.text:0000000000009BD0                 public xstrtoimax
.text:0000000000009BD0 xstrtoimax      proc near               ; CODE XREF: main+1BD↑p
.text:0000000000009BD0                                         ; main+2F7↑p
.text:0000000000009BD0
.text:0000000000009BD0 var_50          = qword ptr -50h
.text:0000000000009BD0 endptr          = qword ptr -48h
.text:0000000000009BD0 var_40          = qword ptr -40h
.text:0000000000009BD0
.text:0000000000009BD0 ; __unwind {
.text:0000000000009BD0                 push    r15
.text:0000000000009BD2                 push    r14
.text:0000000000009BD4                 push    r13
.text:0000000000009BD6                 push    r12
.text:0000000000009BD8                 push    rbp
.text:0000000000009BD9                 push    rbx
.text:0000000000009BDA                 sub     rsp, 28h
.text:0000000000009BDE                 mov     rax, fs:28h
.text:0000000000009BE7                 mov     [rsp+58h+var_40], rax
.text:0000000000009BEC                 xor     eax, eax
.text:0000000000009BEE                 cmp     edx, 24h ; '$'
.text:0000000000009BF1                 ja      loc_A25F
.text:0000000000009BF7                 lea     rax, [rsp+58h+endptr]
.text:0000000000009BFC                 test    rsi, rsi
.text:0000000000009BFF                 mov     rbx, rsi
.text:0000000000009C02                 mov     r12, rdi
.text:0000000000009C05                 mov     ebp, edx
.text:0000000000009C07                 mov     r14, rcx
.text:0000000000009C0A                 cmovz   rbx, rax
.text:0000000000009C0E                 mov     r15, r8
.text:0000000000009C11                 call    ___errno_location
.text:0000000000009C16                 xor     ecx, ecx        ; group
.text:0000000000009C18                 mov     edx, ebp        ; base
.text:0000000000009C1A                 mov     dword ptr [rax], 0
.text:0000000000009C20                 mov     rsi, rbx        ; endptr
.text:0000000000009C23                 mov     rdi, r12        ; nptr
.text:0000000000009C26                 mov     r13, rax
.text:0000000000009C29                 call    ___strtol_internal
.text:0000000000009C2E                 mov     rcx, [rbx]
.text:0000000000009C31                 mov     rbp, rax
.text:0000000000009C34                 cmp     rcx, r12
.text:0000000000009C37                 jz      short loc_9C98
.text:0000000000009C39                 mov     eax, [r13+0]
.text:0000000000009C3D                 test    eax, eax
.text:0000000000009C3F                 jnz     short loc_9C80
.text:0000000000009C41                 xor     r12d, r12d
.text:0000000000009C44
.text:0000000000009C44 loc_9C44:                               ; CODE XREF: xstrtoimax+C1↓j
.text:0000000000009C44                 test    r15, r15
.text:0000000000009C47                 jz      short loc_9C56
.text:0000000000009C49                 movzx   r13d, byte ptr [rcx]
.text:0000000000009C4D                 test    r13b, r13b
.text:0000000000009C50                 jnz     loc_9CD3
.text:0000000000009C56
.text:0000000000009C56 loc_9C56:                               ; CODE XREF: xstrtoimax+77↑j
.text:0000000000009C56                                         ; xstrtoimax+226↓j
.text:0000000000009C56                 mov     [r14], rbp
.text:0000000000009C59
.text:0000000000009C59 loc_9C59:                               ; CODE XREF: xstrtoimax+B9↓j
.text:0000000000009C59                                         ; xstrtoimax+E3↓j ...
.text:0000000000009C59                 mov     rdi, [rsp+58h+var_40]
.text:0000000000009C5E                 xor     rdi, fs:28h
.text:0000000000009C67                 mov     eax, r12d
.text:0000000000009C6A                 jnz     loc_A27E
.text:0000000000009C70                 add     rsp, 28h
.text:0000000000009C74                 pop     rbx
.text:0000000000009C75                 pop     rbp
.text:0000000000009C76                 pop     r12
.text:0000000000009C78                 pop     r13
.text:0000000000009C7A                 pop     r14
.text:0000000000009C7C                 pop     r15
.text:0000000000009C7E                 retn
.text:0000000000009C7E ; ---------------------------------------------------------------------------
.text:0000000000009C7F                 align 20h
.text:0000000000009C80
.text:0000000000009C80 loc_9C80:                               ; CODE XREF: xstrtoimax+6F↑j
.text:0000000000009C80                 cmp     eax, 22h ; '"'
.text:0000000000009C83                 mov     r12d, 4
.text:0000000000009C89                 jnz     short loc_9C59
.text:0000000000009C8B                 mov     r12d, 1
.text:0000000000009C91                 jmp     short loc_9C44
.text:0000000000009C91 ; ---------------------------------------------------------------------------
.text:0000000000009C93                 align 8
.text:0000000000009C98
.text:0000000000009C98 loc_9C98:                               ; CODE XREF: xstrtoimax+67↑j
.text:0000000000009C98                 test    r15, r15
.text:0000000000009C9B                 jz      loc_A130
.text:0000000000009CA1                 movzx   r13d, byte ptr [rcx]
.text:0000000000009CA5                 mov     [rsp+58h+var_50], rcx
.text:0000000000009CAA                 mov     r12d, 4
.text:0000000000009CB0                 test    r13b, r13b
.text:0000000000009CB3                 jz      short loc_9C59
.text:0000000000009CB5                 movsx   esi, r13b       ; c
.text:0000000000009CB9                 mov     rdi, r15        ; s
.text:0000000000009CBC                 call    _strchr
.text:0000000000009CC1                 test    rax, rax
.text:0000000000009CC4                 mov     rcx, [rsp+58h+var_50]
.text:0000000000009CC9                 jz      short loc_9C59
.text:0000000000009CCB                 mov     ebp, 1
.text:0000000000009CD0                 xor     r12d, r12d
.text:0000000000009CD3
.text:0000000000009CD3 loc_9CD3:                               ; CODE XREF: xstrtoimax+80↑j
.text:0000000000009CD3                 movsx   esi, r13b       ; c
.text:0000000000009CD7                 mov     rdi, r15        ; s
.text:0000000000009CDA                 mov     [rsp+58h+var_50], rcx
.text:0000000000009CDF                 call    _strchr
.text:0000000000009CE4                 test    rax, rax
.text:0000000000009CE7                 mov     rcx, [rsp+58h+var_50]
.text:0000000000009CEC                 jz      short def_9D7E  ; jumptable 0000000000009D7E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000009CEE                 lea     eax, [r13-45h]
.text:0000000000009CF2                 cmp     al, 2Fh ; '/'
.text:0000000000009CF4                 ja      short loc_9D58
.text:0000000000009CF6                 mov     rdx, 814400308945h
.text:0000000000009D00                 bt      rdx, rax
.text:0000000000009D04                 jnb     short loc_9D58
.text:0000000000009D06                 mov     esi, 30h ; '0'  ; c
.text:0000000000009D0B                 mov     rdi, r15        ; s
.text:0000000000009D0E                 mov     [rsp+58h+var_50], rcx
.text:0000000000009D13                 call    _strchr
.text:0000000000009D18                 test    rax, rax
.text:0000000000009D1B                 mov     rcx, [rsp+58h+var_50]
.text:0000000000009D20                 jz      short loc_9D58
.text:0000000000009D22                 movzx   eax, byte ptr [rcx+1]
.text:0000000000009D26                 cmp     al, 44h ; 'D'
.text:0000000000009D28                 jz      short loc_9D36
.text:0000000000009D2A                 cmp     al, 69h ; 'i'
.text:0000000000009D2C                 jz      loc_A218
.text:0000000000009D32                 cmp     al, 42h ; 'B'
.text:0000000000009D34                 jnz     short loc_9D58
.text:0000000000009D36
.text:0000000000009D36 loc_9D36:                               ; CODE XREF: xstrtoimax+158↑j
.text:0000000000009D36                 mov     edi, 2
.text:0000000000009D3B                 mov     eax, 3E8h
.text:0000000000009D40                 jmp     short loc_9D62
.text:0000000000009D40 ; ---------------------------------------------------------------------------
.text:0000000000009D42                 align 8
.text:0000000000009D48
.text:0000000000009D48 def_9D7E:                               ; CODE XREF: xstrtoimax+11C↑j
.text:0000000000009D48                                         ; xstrtoimax+19A↓j ...
.text:0000000000009D48                 mov     [r14], rbp      ; jumptable 0000000000009D7E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000009D4B                 or      r12d, 2
.text:0000000000009D4F                 jmp     loc_9C59
.text:0000000000009D4F ; ---------------------------------------------------------------------------
.text:0000000000009D54                 align 8
.text:0000000000009D58
.text:0000000000009D58 loc_9D58:                               ; CODE XREF: xstrtoimax+124↑j
.text:0000000000009D58                                         ; xstrtoimax+134↑j ...
.text:0000000000009D58                 mov     edi, 1
.text:0000000000009D5D                 mov     eax, 400h
.text:0000000000009D62
.text:0000000000009D62 loc_9D62:                               ; CODE XREF: xstrtoimax+170↑j
.text:0000000000009D62                                         ; xstrtoimax+65B↓j
.text:0000000000009D62                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:0000000000009D66                 cmp     r13b, 35h
.text:0000000000009D6A                 ja      short def_9D7E  ; jumptable 0000000000009D7E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000009D6C                 lea     rsi, jpt_9D7E
.text:0000000000009D73                 movzx   r13d, r13b
.text:0000000000009D77                 movsxd  rdx, ds:(jpt_9D7E - 1C5E8h)[rsi+r13*4]
.text:0000000000009D7B                 add     rdx, rsi
.text:0000000000009D7E                 jmp     rdx             ; switch jump
.text:0000000000009D80 ; ---------------------------------------------------------------------------
.text:0000000000009D80
.text:0000000000009D80 loc_9D80:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009D80                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009D80                 mov     r8, 8000000000000000h ; jumptable 0000000000009D7E cases 77,109
.text:0000000000009D8A                 movsxd  rsi, eax
.text:0000000000009D8D                 mov     rax, r8
.text:0000000000009D90                 cqo
.text:0000000000009D92                 idiv    rsi
.text:0000000000009D95                 cmp     rbp, rax
.text:0000000000009D98                 mov     r9, rax
.text:0000000000009D9B                 jl      loc_A245
.text:0000000000009DA1                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:0000000000009DAB                 mov     rax, r10
.text:0000000000009DAE                 cqo
.text:0000000000009DB0                 idiv    rsi
.text:0000000000009DB3                 cmp     rbp, rax
.text:0000000000009DB6                 jg      loc_A252
.text:0000000000009DBC                 imul    rbp, rsi
.text:0000000000009DC0                 cmp     r9, rbp
.text:0000000000009DC3                 jg      loc_A245
.text:0000000000009DC9                 cmp     rax, rbp
.text:0000000000009DCC                 jl      loc_A252
.text:0000000000009DD2                 imul    rbp, rsi
.text:0000000000009DD6                 xor     eax, eax
.text:0000000000009DD8
.text:0000000000009DD8 loc_9DD8:                               ; CODE XREF: xstrtoimax+67D↓j
.text:0000000000009DD8                                         ; xstrtoimax+68A↓j
.text:0000000000009DD8                 or      r12d, eax
.text:0000000000009DDB                 nop     dword ptr [rax+rax+00h]
.text:0000000000009DE0
.text:0000000000009DE0 loc_9DE0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009DE0                                         ; xstrtoimax+259↓j ...
.text:0000000000009DE0                 movsxd  rax, edi        ; jumptable 0000000000009D7E case 99
.text:0000000000009DE3                 add     rcx, rax
.text:0000000000009DE6                 mov     eax, r12d
.text:0000000000009DE9                 or      eax, 2
.text:0000000000009DEC                 mov     [rbx], rcx
.text:0000000000009DEF                 cmp     byte ptr [rcx], 0
.text:0000000000009DF2                 cmovnz  r12d, eax
.text:0000000000009DF6                 jmp     loc_9C56
.text:0000000000009DF6 ; ---------------------------------------------------------------------------
.text:0000000000009DFB                 align 20h
.text:0000000000009E00
.text:0000000000009E00 loc_9E00:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009E00                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009E00                 mov     rax, 0C000000000000000h ; jumptable 0000000000009D7E case 119
.text:0000000000009E0A                 cmp     rbp, rax
.text:0000000000009E0D                 jl      loc_A140
.text:0000000000009E13                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:0000000000009E1D                 cmp     rbp, rax
.text:0000000000009E20                 jg      loc_A200
.text:0000000000009E26                 add     rbp, rbp
.text:0000000000009E29                 jmp     short loc_9DE0  ; jumptable 0000000000009D7E case 99
.text:0000000000009E29 ; ---------------------------------------------------------------------------
.text:0000000000009E2B                 align 10h
.text:0000000000009E30
.text:0000000000009E30 loc_9E30:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009E30                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009E30                 mov     rax, 0FFC0000000000000h ; jumptable 0000000000009D7E case 98
.text:0000000000009E3A                 cmp     rbp, rax
.text:0000000000009E3D                 jl      loc_A140
.text:0000000000009E43                 mov     rax, 3FFFFFFFFFFFFFh
.text:0000000000009E4D                 cmp     rbp, rax
.text:0000000000009E50                 jg      loc_A200
.text:0000000000009E56                 shl     rbp, 9
.text:0000000000009E5A                 jmp     short loc_9DE0  ; jumptable 0000000000009D7E case 99
.text:0000000000009E5A ; ---------------------------------------------------------------------------
.text:0000000000009E5C                 align 20h
.text:0000000000009E60
.text:0000000000009E60 loc_9E60:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009E60                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009E60                 movsxd  rsi, eax        ; jumptable 0000000000009D7E case 90
.text:0000000000009E63                 mov     rax, 8000000000000000h
.text:0000000000009E6D                 mov     r8d, 7
.text:0000000000009E73                 cqo
.text:0000000000009E75                 xor     r11d, r11d
.text:0000000000009E78                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000009E82                 idiv    rsi
.text:0000000000009E85                 mov     r10, rax
.text:0000000000009E88                 jmp     short loc_9EAF
.text:0000000000009E88 ; ---------------------------------------------------------------------------
.text:0000000000009E8A                 align 10h
.text:0000000000009E90
.text:0000000000009E90 loc_9E90:                               ; CODE XREF: xstrtoimax+2E2↓j
.text:0000000000009E90                 mov     rax, r9
.text:0000000000009E93                 cqo
.text:0000000000009E95                 idiv    rsi
.text:0000000000009E98                 cmp     rax, rbp
.text:0000000000009E9B                 jl      loc_A188
.text:0000000000009EA1                 imul    rbp, rsi
.text:0000000000009EA5
.text:0000000000009EA5 loc_9EA5:                               ; CODE XREF: xstrtoimax+2F4↓j
.text:0000000000009EA5                                         ; xstrtoimax+5C8↓j
.text:0000000000009EA5                 sub     r8d, 1
.text:0000000000009EA9                 jz      loc_9FD0
.text:0000000000009EAF
.text:0000000000009EAF loc_9EAF:                               ; CODE XREF: xstrtoimax+2B8↑j
.text:0000000000009EAF                 cmp     r10, rbp
.text:0000000000009EB2                 jle     short loc_9E90
.text:0000000000009EB4                 mov     r11d, 1
.text:0000000000009EBA                 mov     rbp, 8000000000000000h
.text:0000000000009EC4                 jmp     short loc_9EA5
.text:0000000000009EC4 ; ---------------------------------------------------------------------------
.text:0000000000009EC6                 align 10h
.text:0000000000009ED0
.text:0000000000009ED0 loc_9ED0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009ED0                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009ED0                 movsxd  rsi, eax        ; jumptable 0000000000009D7E case 89
.text:0000000000009ED3                 mov     rax, 8000000000000000h
.text:0000000000009EDD                 mov     r8d, 8
.text:0000000000009EE3                 cqo
.text:0000000000009EE5                 xor     r11d, r11d
.text:0000000000009EE8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000009EF2                 idiv    rsi
.text:0000000000009EF5                 mov     r10, rax
.text:0000000000009EF8                 jmp     short loc_9F1F
.text:0000000000009EF8 ; ---------------------------------------------------------------------------
.text:0000000000009EFA                 align 20h
.text:0000000000009F00
.text:0000000000009F00 loc_9F00:                               ; CODE XREF: xstrtoimax+352↓j
.text:0000000000009F00                 mov     rax, r9
.text:0000000000009F03                 cqo
.text:0000000000009F05                 idiv    rsi
.text:0000000000009F08                 cmp     rax, rbp
.text:0000000000009F0B                 jl      loc_A158
.text:0000000000009F11                 imul    rbp, rsi
.text:0000000000009F15
.text:0000000000009F15 loc_9F15:                               ; CODE XREF: xstrtoimax+364↓j
.text:0000000000009F15                                         ; xstrtoimax+598↓j
.text:0000000000009F15                 sub     r8d, 1
.text:0000000000009F19                 jz      loc_9FD0
.text:0000000000009F1F
.text:0000000000009F1F loc_9F1F:                               ; CODE XREF: xstrtoimax+328↑j
.text:0000000000009F1F                 cmp     r10, rbp
.text:0000000000009F22                 jle     short loc_9F00
.text:0000000000009F24                 mov     r11d, 1
.text:0000000000009F2A                 mov     rbp, 8000000000000000h
.text:0000000000009F34                 jmp     short loc_9F15
.text:0000000000009F34 ; ---------------------------------------------------------------------------
.text:0000000000009F36                 align 20h
.text:0000000000009F40
.text:0000000000009F40 loc_9F40:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009F40                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009F40                 mov     r8, 8000000000000000h ; jumptable 0000000000009D7E cases 75,107
.text:0000000000009F4A                 movsxd  rsi, eax
.text:0000000000009F4D                 mov     rax, r8
.text:0000000000009F50                 cqo
.text:0000000000009F52                 idiv    rsi
.text:0000000000009F55                 cmp     rbp, rax
.text:0000000000009F58                 jl      loc_A140
.text:0000000000009F5E                 sub     r8, 1
.text:0000000000009F62                 mov     rax, r8
.text:0000000000009F65                 cqo
.text:0000000000009F67                 idiv    rsi
.text:0000000000009F6A                 cmp     rbp, rax
.text:0000000000009F6D                 jg      loc_A200
.text:0000000000009F73                 imul    rbp, rsi
.text:0000000000009F77                 jmp     loc_9DE0        ; jumptable 0000000000009D7E case 99
.text:0000000000009F77 ; ---------------------------------------------------------------------------
.text:0000000000009F7C                 align 20h
.text:0000000000009F80
.text:0000000000009F80 loc_9F80:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009F80                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009F80                 movsxd  rsi, eax        ; jumptable 0000000000009D7E cases 71,103
.text:0000000000009F83                 mov     rax, 8000000000000000h
.text:0000000000009F8D                 mov     r8d, 3
.text:0000000000009F93                 cqo
.text:0000000000009F95                 xor     r11d, r11d
.text:0000000000009F98                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000009FA2                 idiv    rsi
.text:0000000000009FA5                 mov     r10, rax
.text:0000000000009FA8
.text:0000000000009FA8 loc_9FA8:                               ; CODE XREF: xstrtoimax+3FA↓j
.text:0000000000009FA8                 cmp     r10, rbp
.text:0000000000009FAB                 jg      loc_A1A0
.text:0000000000009FB1                 mov     rax, r9
.text:0000000000009FB4                 cqo
.text:0000000000009FB6                 idiv    rsi
.text:0000000000009FB9                 cmp     rax, rbp
.text:0000000000009FBC                 jl      loc_A230
.text:0000000000009FC2                 imul    rbp, rsi
.text:0000000000009FC6
.text:0000000000009FC6 loc_9FC6:                               ; CODE XREF: xstrtoimax+5E0↓j
.text:0000000000009FC6                                         ; xstrtoimax+670↓j
.text:0000000000009FC6                 sub     r8d, 1
.text:0000000000009FCA                 jnz     short loc_9FA8
.text:0000000000009FCC                 nop     dword ptr [rax+00h]
.text:0000000000009FD0
.text:0000000000009FD0 loc_9FD0:                               ; CODE XREF: xstrtoimax+2D9↑j
.text:0000000000009FD0                                         ; xstrtoimax+349↑j ...
.text:0000000000009FD0                 or      r12d, r11d
.text:0000000000009FD3                 jmp     loc_9DE0        ; jumptable 0000000000009D7E case 99
.text:0000000000009FD3 ; ---------------------------------------------------------------------------
.text:0000000000009FD8                 align 20h
.text:0000000000009FE0
.text:0000000000009FE0 loc_9FE0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:0000000000009FE0                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:0000000000009FE0                 movsxd  rsi, eax        ; jumptable 0000000000009D7E case 69
.text:0000000000009FE3                 mov     rax, 8000000000000000h
.text:0000000000009FED                 mov     r8d, 6
.text:0000000000009FF3                 cqo
.text:0000000000009FF5                 xor     r11d, r11d
.text:0000000000009FF8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A002                 idiv    rsi
.text:000000000000A005                 mov     r10, rax
.text:000000000000A008                 jmp     short loc_A02B
.text:000000000000A008 ; ---------------------------------------------------------------------------
.text:000000000000A00A                 align 10h
.text:000000000000A010
.text:000000000000A010 loc_A010:                               ; CODE XREF: xstrtoimax+45E↓j
.text:000000000000A010                 mov     rax, r9
.text:000000000000A013                 cqo
.text:000000000000A015                 idiv    rsi
.text:000000000000A018                 cmp     rax, rbp
.text:000000000000A01B                 jl      loc_A1B8
.text:000000000000A021                 imul    rbp, rsi
.text:000000000000A025
.text:000000000000A025 loc_A025:                               ; CODE XREF: xstrtoimax+470↓j
.text:000000000000A025                                         ; xstrtoimax+5F8↓j
.text:000000000000A025                 sub     r8d, 1
.text:000000000000A029                 jz      short loc_9FD0
.text:000000000000A02B
.text:000000000000A02B loc_A02B:                               ; CODE XREF: xstrtoimax+438↑j
.text:000000000000A02B                 cmp     r10, rbp
.text:000000000000A02E                 jle     short loc_A010
.text:000000000000A030                 mov     r11d, 1
.text:000000000000A036                 mov     rbp, 8000000000000000h
.text:000000000000A040                 jmp     short loc_A025
.text:000000000000A040 ; ---------------------------------------------------------------------------
.text:000000000000A042                 align 8
.text:000000000000A048
.text:000000000000A048 loc_A048:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A048                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:000000000000A048                 movsxd  rsi, eax        ; jumptable 0000000000009D7E case 80
.text:000000000000A04B                 mov     rax, 8000000000000000h
.text:000000000000A055                 mov     r8d, 5
.text:000000000000A05B                 cqo
.text:000000000000A05D                 xor     r11d, r11d
.text:000000000000A060                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A06A                 idiv    rsi
.text:000000000000A06D                 mov     r10, rax
.text:000000000000A070                 jmp     short loc_A097
.text:000000000000A070 ; ---------------------------------------------------------------------------
.text:000000000000A072                 align 8
.text:000000000000A078
.text:000000000000A078 loc_A078:                               ; CODE XREF: xstrtoimax+4CA↓j
.text:000000000000A078                 mov     rax, r9
.text:000000000000A07B                 cqo
.text:000000000000A07D                 idiv    rsi
.text:000000000000A080                 cmp     rax, rbp
.text:000000000000A083                 jl      loc_A1D0
.text:000000000000A089                 imul    rbp, rsi
.text:000000000000A08D
.text:000000000000A08D loc_A08D:                               ; CODE XREF: xstrtoimax+4DC↓j
.text:000000000000A08D                                         ; xstrtoimax+610↓j
.text:000000000000A08D                 sub     r8d, 1
.text:000000000000A091                 jz      loc_9FD0
.text:000000000000A097
.text:000000000000A097 loc_A097:                               ; CODE XREF: xstrtoimax+4A0↑j
.text:000000000000A097                 cmp     r10, rbp
.text:000000000000A09A                 jle     short loc_A078
.text:000000000000A09C                 mov     r11d, 1
.text:000000000000A0A2                 mov     rbp, 8000000000000000h
.text:000000000000A0AC                 jmp     short loc_A08D
.text:000000000000A0AC ; ---------------------------------------------------------------------------
.text:000000000000A0AE                 align 10h
.text:000000000000A0B0
.text:000000000000A0B0 loc_A0B0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A0B0                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:000000000000A0B0                 mov     rax, 0FFE0000000000000h ; jumptable 0000000000009D7E case 66
.text:000000000000A0BA                 cmp     rbp, rax
.text:000000000000A0BD                 jl      loc_A140
.text:000000000000A0C3                 mov     rax, 1FFFFFFFFFFFFFh
.text:000000000000A0CD                 cmp     rbp, rax
.text:000000000000A0D0                 jg      loc_A200
.text:000000000000A0D6                 shl     rbp, 0Ah
.text:000000000000A0DA                 jmp     loc_9DE0        ; jumptable 0000000000009D7E case 99
.text:000000000000A0DA ; ---------------------------------------------------------------------------
.text:000000000000A0DF                 align 20h
.text:000000000000A0E0
.text:000000000000A0E0 loc_A0E0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A0E0                                         ; DATA XREF: .rodata:jpt_9D7E↓o
.text:000000000000A0E0                 movsxd  rsi, eax        ; jumptable 0000000000009D7E cases 84,116
.text:000000000000A0E3                 mov     rax, 8000000000000000h
.text:000000000000A0ED                 mov     r8d, 4
.text:000000000000A0F3                 cqo
.text:000000000000A0F5                 xor     r11d, r11d
.text:000000000000A0F8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A102                 idiv    rsi
.text:000000000000A105                 mov     r10, rax
.text:000000000000A108
.text:000000000000A108 loc_A108:                               ; CODE XREF: xstrtoimax+556↓j
.text:000000000000A108                 cmp     r10, rbp
.text:000000000000A10B                 jg      short loc_A170
.text:000000000000A10D                 mov     rax, r9
.text:000000000000A110                 cqo
.text:000000000000A112                 idiv    rsi
.text:000000000000A115                 cmp     rax, rbp
.text:000000000000A118                 jl      loc_A1E8
.text:000000000000A11E                 imul    rbp, rsi
.text:000000000000A122
.text:000000000000A122 loc_A122:                               ; CODE XREF: xstrtoimax+5B0↓j
.text:000000000000A122                                         ; xstrtoimax+628↓j
.text:000000000000A122                 sub     r8d, 1
.text:000000000000A126                 jnz     short loc_A108
.text:000000000000A128                 jmp     loc_9FD0
.text:000000000000A128 ; ---------------------------------------------------------------------------
.text:000000000000A12D                 align 10h
.text:000000000000A130
.text:000000000000A130 loc_A130:                               ; CODE XREF: xstrtoimax+CB↑j
.text:000000000000A130                 mov     r12d, 4
.text:000000000000A136                 jmp     loc_9C59
.text:000000000000A136 ; ---------------------------------------------------------------------------
.text:000000000000A13B                 align 20h
.text:000000000000A140
.text:000000000000A140 loc_A140:                               ; CODE XREF: xstrtoimax+23D↑j
.text:000000000000A140                                         ; xstrtoimax+26D↑j ...
.text:000000000000A140                 mov     r12d, 1
.text:000000000000A146                 mov     rbp, 8000000000000000h
.text:000000000000A150                 jmp     loc_9DE0        ; jumptable 0000000000009D7E case 99
.text:000000000000A150 ; ---------------------------------------------------------------------------
.text:000000000000A155                 align 8
.text:000000000000A158
.text:000000000000A158 loc_A158:                               ; CODE XREF: xstrtoimax+33B↑j
.text:000000000000A158                 mov     r11d, 1
.text:000000000000A15E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A168                 jmp     loc_9F15
.text:000000000000A168 ; ---------------------------------------------------------------------------
.text:000000000000A16D                 align 10h
.text:000000000000A170
.text:000000000000A170 loc_A170:                               ; CODE XREF: xstrtoimax+53B↑j
.text:000000000000A170                 mov     r11d, 1
.text:000000000000A176                 mov     rbp, 8000000000000000h
.text:000000000000A180                 jmp     short loc_A122
.text:000000000000A180 ; ---------------------------------------------------------------------------
.text:000000000000A182                 align 8
.text:000000000000A188
.text:000000000000A188 loc_A188:                               ; CODE XREF: xstrtoimax+2CB↑j
.text:000000000000A188                 mov     r11d, 1
.text:000000000000A18E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A198                 jmp     loc_9EA5
.text:000000000000A198 ; ---------------------------------------------------------------------------
.text:000000000000A19D                 align 20h
.text:000000000000A1A0
.text:000000000000A1A0 loc_A1A0:                               ; CODE XREF: xstrtoimax+3DB↑j
.text:000000000000A1A0                 mov     r11d, 1
.text:000000000000A1A6                 mov     rbp, 8000000000000000h
.text:000000000000A1B0                 jmp     loc_9FC6
.text:000000000000A1B0 ; ---------------------------------------------------------------------------
.text:000000000000A1B5                 align 8
.text:000000000000A1B8
.text:000000000000A1B8 loc_A1B8:                               ; CODE XREF: xstrtoimax+44B↑j
.text:000000000000A1B8                 mov     r11d, 1
.text:000000000000A1BE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A1C8                 jmp     loc_A025
.text:000000000000A1C8 ; ---------------------------------------------------------------------------
.text:000000000000A1CD                 align 10h
.text:000000000000A1D0
.text:000000000000A1D0 loc_A1D0:                               ; CODE XREF: xstrtoimax+4B3↑j
.text:000000000000A1D0                 mov     r11d, 1
.text:000000000000A1D6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A1E0                 jmp     loc_A08D
.text:000000000000A1E0 ; ---------------------------------------------------------------------------
.text:000000000000A1E5                 align 8
.text:000000000000A1E8
.text:000000000000A1E8 loc_A1E8:                               ; CODE XREF: xstrtoimax+548↑j
.text:000000000000A1E8                 mov     r11d, 1
.text:000000000000A1EE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A1F8                 jmp     loc_A122
.text:000000000000A1F8 ; ---------------------------------------------------------------------------
.text:000000000000A1FD                 align 20h
.text:000000000000A200
.text:000000000000A200 loc_A200:                               ; CODE XREF: xstrtoimax+250↑j
.text:000000000000A200                                         ; xstrtoimax+280↑j ...
.text:000000000000A200                 mov     r12d, 1
.text:000000000000A206                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A210                 jmp     loc_9DE0        ; jumptable 0000000000009D7E case 99
.text:000000000000A210 ; ---------------------------------------------------------------------------
.text:000000000000A215                 align 8
.text:000000000000A218
.text:000000000000A218 loc_A218:                               ; CODE XREF: xstrtoimax+15C↑j
.text:000000000000A218                 xor     edi, edi
.text:000000000000A21A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000A21E                 mov     eax, 400h
.text:000000000000A223                 setz    dil
.text:000000000000A227                 lea     edi, [rdi+rdi+1]
.text:000000000000A22B                 jmp     loc_9D62
.text:000000000000A230 ; ---------------------------------------------------------------------------
.text:000000000000A230
.text:000000000000A230 loc_A230:                               ; CODE XREF: xstrtoimax+3EC↑j
.text:000000000000A230                 mov     r11d, 1
.text:000000000000A236                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A240                 jmp     loc_9FC6
.text:000000000000A245 ; ---------------------------------------------------------------------------
.text:000000000000A245
.text:000000000000A245 loc_A245:                               ; CODE XREF: xstrtoimax+1CB↑j
.text:000000000000A245                                         ; xstrtoimax+1F3↑j
.text:000000000000A245                 mov     eax, 1
.text:000000000000A24A                 mov     rbp, r8
.text:000000000000A24D                 jmp     loc_9DD8
.text:000000000000A252 ; ---------------------------------------------------------------------------
.text:000000000000A252
.text:000000000000A252 loc_A252:                               ; CODE XREF: xstrtoimax+1E6↑j
.text:000000000000A252                                         ; xstrtoimax+1FC↑j
.text:000000000000A252                 mov     eax, 1
.text:000000000000A257                 mov     rbp, r10
.text:000000000000A25A                 jmp     loc_9DD8
.text:000000000000A25F ; ---------------------------------------------------------------------------
.text:000000000000A25F
.text:000000000000A25F loc_A25F:                               ; CODE XREF: xstrtoimax+21↑j
.text:000000000000A25F                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoimax"
.text:000000000000A266                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000A26D                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000A274                 mov     edx, 54h ; 'T'  ; line
.text:000000000000A279                 call    ___assert_fail
.text:000000000000A27E ; ---------------------------------------------------------------------------
.text:000000000000A27E
.text:000000000000A27E loc_A27E:                               ; CODE XREF: xstrtoimax+9A↑j
.text:000000000000A27E                 call    ___stack_chk_fail
.text:000000000000A27E ; } // starts at 9BD0
.text:000000000000A27E xstrtoimax      endp
.text:000000000000A27E
.text:000000000000A27E ; ---------------------------------------------------------------------------
.text:000000000000A283                 align 10h
.text:000000000000A290
.text:000000000000A290 ; =============== S U B R O U T I N E =======================================
.text:000000000000A290
.text:000000000000A290 ; Attributes: info_from_lumina
.text:000000000000A290
.text:000000000000A290 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000A290                 public rpl_fclose
.text:000000000000A290 rpl_fclose      proc near               ; CODE XREF: internal_read_file+39↑p
.text:000000000000A290                                         ; close_stream+15↓p
.text:000000000000A290 ; __unwind {
.text:000000000000A290                 push    r12
.text:000000000000A292                 push    rbp
.text:000000000000A293                 push    rbx
.text:000000000000A294                 mov     rbx, rdi
.text:000000000000A297                 call    _fileno
.text:000000000000A29C                 test    eax, eax
.text:000000000000A29E                 mov     rdi, rbx        ; fp
.text:000000000000A2A1                 js      short loc_A2F7
.text:000000000000A2A3                 call    ___freading
.text:000000000000A2A8                 test    eax, eax
.text:000000000000A2AA                 jnz     short loc_A2D8
.text:000000000000A2AC
.text:000000000000A2AC loc_A2AC:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000A2AC                 mov     rdi, rbx        ; stream
.text:000000000000A2AF                 call    rpl_fflush
.text:000000000000A2B4                 test    eax, eax
.text:000000000000A2B6                 jz      short loc_A2F4
.text:000000000000A2B8                 call    ___errno_location
.text:000000000000A2BD                 mov     r12d, [rax]
.text:000000000000A2C0                 mov     rdi, rbx        ; stream
.text:000000000000A2C3                 mov     rbp, rax
.text:000000000000A2C6                 call    _fclose
.text:000000000000A2CB                 test    r12d, r12d
.text:000000000000A2CE                 jnz     short loc_A300
.text:000000000000A2D0
.text:000000000000A2D0 loc_A2D0:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000A2D0                 pop     rbx
.text:000000000000A2D1                 pop     rbp
.text:000000000000A2D2                 pop     r12
.text:000000000000A2D4                 retn
.text:000000000000A2D4 ; ---------------------------------------------------------------------------
.text:000000000000A2D5                 align 8
.text:000000000000A2D8
.text:000000000000A2D8 loc_A2D8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000A2D8                 mov     rdi, rbx        ; stream
.text:000000000000A2DB                 call    _fileno
.text:000000000000A2E0                 xor     esi, esi        ; offset
.text:000000000000A2E2                 mov     edx, 1          ; whence
.text:000000000000A2E7                 mov     edi, eax        ; fd
.text:000000000000A2E9                 call    _lseek
.text:000000000000A2EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A2F2                 jnz     short loc_A2AC
.text:000000000000A2F4
.text:000000000000A2F4 loc_A2F4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000A2F4                 mov     rdi, rbx        ; stream
.text:000000000000A2F7
.text:000000000000A2F7 loc_A2F7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000A2F7                 pop     rbx
.text:000000000000A2F8                 pop     rbp
.text:000000000000A2F9                 pop     r12
.text:000000000000A2FB                 jmp     _fclose
.text:000000000000A300 ; ---------------------------------------------------------------------------
.text:000000000000A300
.text:000000000000A300 loc_A300:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000A300                 mov     [rbp+0], r12d
.text:000000000000A304                 mov     eax, 0FFFFFFFFh
.text:000000000000A309                 jmp     short loc_A2D0
.text:000000000000A309 ; } // starts at A290
.text:000000000000A309 rpl_fclose      endp
.text:000000000000A309
.text:000000000000A309 ; ---------------------------------------------------------------------------
.text:000000000000A30B                 align 10h
.text:000000000000A310
.text:000000000000A310 ; =============== S U B R O U T I N E =======================================
.text:000000000000A310
.text:000000000000A310 ; Attributes: info_from_lumina
.text:000000000000A310
.text:000000000000A310 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000A310                 public rpl_fflush
.text:000000000000A310 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000A310 ; __unwind {
.text:000000000000A310                 test    rdi, rdi
.text:000000000000A313                 push    rbx
.text:000000000000A314                 mov     rbx, rdi
.text:000000000000A317                 jz      short loc_A32A
.text:000000000000A319                 call    ___freading
.text:000000000000A31E                 test    eax, eax
.text:000000000000A320                 jz      short loc_A32A
.text:000000000000A322                 test    dword ptr [rbx], 100h
.text:000000000000A328                 jnz     short loc_A338
.text:000000000000A32A
.text:000000000000A32A loc_A32A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000A32A                                         ; rpl_fflush+10↑j
.text:000000000000A32A                 mov     rdi, rbx        ; stream
.text:000000000000A32D                 pop     rbx
.text:000000000000A32E                 jmp     _fflush
.text:000000000000A32E ; ---------------------------------------------------------------------------
.text:000000000000A333                 align 8
.text:000000000000A338
.text:000000000000A338 loc_A338:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000A338                 mov     rdi, rbx
.text:000000000000A33B                 mov     edx, 1
.text:000000000000A340                 xor     esi, esi
.text:000000000000A342                 call    rpl_fseeko
.text:000000000000A347                 mov     rdi, rbx        ; stream
.text:000000000000A34A                 pop     rbx
.text:000000000000A34B                 jmp     _fflush
.text:000000000000A34B ; } // starts at A310
.text:000000000000A34B rpl_fflush      endp
.text:000000000000A34B
.text:000000000000A350
.text:000000000000A350 ; =============== S U B R O U T I N E =======================================
.text:000000000000A350
.text:000000000000A350 ; Attributes: info_from_lumina
.text:000000000000A350
.text:000000000000A350 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000A350                 public rpl_fseeko
.text:000000000000A350 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000A350 ; __unwind {
.text:000000000000A350                 mov     rax, [rdi+8]
.text:000000000000A354                 cmp     [rdi+10h], rax
.text:000000000000A358                 jz      short loc_A360
.text:000000000000A35A
.text:000000000000A35A loc_A35A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000A35A                                         ; rpl_fseeko+1F↓j
.text:000000000000A35A                 jmp     _fseeko
.text:000000000000A35A ; ---------------------------------------------------------------------------
.text:000000000000A35F                 align 20h
.text:000000000000A360
.text:000000000000A360 loc_A360:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000A360                 mov     rax, [rdi+20h]
.text:000000000000A364                 cmp     [rdi+28h], rax
.text:000000000000A368                 jnz     short loc_A35A
.text:000000000000A36A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000A36F                 jnz     short loc_A35A
.text:000000000000A371                 push    r12
.text:000000000000A373                 push    rbp
.text:000000000000A374                 mov     r12d, edx
.text:000000000000A377                 push    rbx
.text:000000000000A378                 mov     rbp, rsi
.text:000000000000A37B                 mov     rbx, rdi
.text:000000000000A37E                 call    _fileno
.text:000000000000A383                 mov     edx, r12d       ; whence
.text:000000000000A386                 mov     rsi, rbp        ; offset
.text:000000000000A389                 mov     edi, eax        ; fd
.text:000000000000A38B                 call    _lseek
.text:000000000000A390                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000A394                 jz      short loc_A3A2
.text:000000000000A396                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000A399                 mov     [rbx+90h], rax
.text:000000000000A3A0                 xor     eax, eax
.text:000000000000A3A2
.text:000000000000A3A2 loc_A3A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000A3A2                 pop     rbx
.text:000000000000A3A3                 pop     rbp
.text:000000000000A3A4                 pop     r12
.text:000000000000A3A6                 retn
.text:000000000000A3A6 ; } // starts at A350
.text:000000000000A3A6 rpl_fseeko      endp
.text:000000000000A3A6
.text:000000000000A3A6 ; ---------------------------------------------------------------------------
.text:000000000000A3A7                 align 10h
.text:000000000000A3B0
.text:000000000000A3B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3B0
.text:000000000000A3B0 ; Attributes: info_from_lumina
.text:000000000000A3B0
.text:000000000000A3B0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000A3B0                 public rpl_mbrtowc
.text:000000000000A3B0 rpl_mbrtowc     proc near               ; CODE XREF: mbsstr_trimmed_wordbounded+1D0↑p
.text:000000000000A3B0                                         ; mbsstr_trimmed_wordbounded+434↑p ...
.text:000000000000A3B0
.text:000000000000A3B0 pwc             = dword ptr -34h
.text:000000000000A3B0 var_30          = qword ptr -30h
.text:000000000000A3B0
.text:000000000000A3B0 ; __unwind {
.text:000000000000A3B0                 push    r13
.text:000000000000A3B2                 push    r12
.text:000000000000A3B4                 mov     r13, rsi
.text:000000000000A3B7                 push    rbp
.text:000000000000A3B8                 push    rbx
.text:000000000000A3B9                 mov     rbx, rdi
.text:000000000000A3BC                 mov     r12, rdx
.text:000000000000A3BF                 sub     rsp, 18h
.text:000000000000A3C3                 mov     rax, fs:28h
.text:000000000000A3CC                 mov     [rsp+38h+var_30], rax
.text:000000000000A3D1                 xor     eax, eax
.text:000000000000A3D3                 lea     rax, [rsp+38h+pwc]
.text:000000000000A3D8                 test    rdi, rdi
.text:000000000000A3DB                 cmovz   rbx, rax
.text:000000000000A3DF                 mov     rdi, rbx        ; pwc
.text:000000000000A3E2                 call    _mbrtowc
.text:000000000000A3E7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000A3EB                 mov     rbp, rax
.text:000000000000A3EE                 jbe     short loc_A410
.text:000000000000A3F0                 test    r12, r12
.text:000000000000A3F3                 jz      short loc_A410
.text:000000000000A3F5                 xor     edi, edi
.text:000000000000A3F7                 call    hard_locale
.text:000000000000A3FC                 test    al, al
.text:000000000000A3FE                 jnz     short loc_A410
.text:000000000000A400                 movzx   eax, byte ptr [r13+0]
.text:000000000000A405                 mov     ebp, 1
.text:000000000000A40A                 mov     [rbx], eax
.text:000000000000A40C                 nop     dword ptr [rax+00h]
.text:000000000000A410
.text:000000000000A410 loc_A410:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000A410                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000A410                 mov     rdx, [rsp+38h+var_30]
.text:000000000000A415                 xor     rdx, fs:28h
.text:000000000000A41E                 mov     rax, rbp
.text:000000000000A421                 jnz     short loc_A42E
.text:000000000000A423                 add     rsp, 18h
.text:000000000000A427                 pop     rbx
.text:000000000000A428                 pop     rbp
.text:000000000000A429                 pop     r12
.text:000000000000A42B                 pop     r13
.text:000000000000A42D                 retn
.text:000000000000A42E ; ---------------------------------------------------------------------------
.text:000000000000A42E
.text:000000000000A42E loc_A42E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000A42E                 call    ___stack_chk_fail
.text:000000000000A42E ; } // starts at A3B0
.text:000000000000A42E rpl_mbrtowc     endp
.text:000000000000A42E
.text:000000000000A42E ; ---------------------------------------------------------------------------
.text:000000000000A433                 align 20h
.text:000000000000A440
.text:000000000000A440 ; =============== S U B R O U T I N E =======================================
.text:000000000000A440
.text:000000000000A440
.text:000000000000A440 peek_token_bracket proc near            ; CODE XREF: parse_bracket_element_constprop_37+1FB↓p
.text:000000000000A440                                         ; parse_expression+854↓p ...
.text:000000000000A440 ; __unwind {
.text:000000000000A440                 mov     rax, [rsi+48h]
.text:000000000000A444                 cmp     [rsi+68h], rax
.text:000000000000A448                 jle     short loc_A4A0
.text:000000000000A44A                 mov     r8, [rsi+8]
.text:000000000000A44E                 cmp     dword ptr [rsi+90h], 1
.text:000000000000A455                 movzx   ecx, byte ptr [r8+rax]
.text:000000000000A45A                 mov     [rdi], cl
.text:000000000000A45C                 jle     short loc_A473
.text:000000000000A45E                 cmp     rax, [rsi+30h]
.text:000000000000A462                 jz      short loc_A473
.text:000000000000A464                 mov     r9, [rsi+10h]
.text:000000000000A468                 cmp     dword ptr [r9+rax*4], 0FFFFFFFFh
.text:000000000000A46D                 jz      loc_A4EF
.text:000000000000A473
.text:000000000000A473 loc_A473:                               ; CODE XREF: peek_token_bracket+1C↑j
.text:000000000000A473                                         ; peek_token_bracket+22↑j
.text:000000000000A473                 cmp     cl, 5Ch ; '\'
.text:000000000000A476                 jz      short loc_A4E0
.text:000000000000A478                 cmp     cl, 5Bh ; '['
.text:000000000000A47B                 jz      short loc_A4B0
.text:000000000000A47D                 cmp     cl, 5Dh ; ']'
.text:000000000000A480                 jz      loc_A520
.text:000000000000A486                 cmp     cl, 5Eh ; '^'
.text:000000000000A489                 jz      loc_A510
.text:000000000000A48F                 cmp     cl, 2Dh ; '-'
.text:000000000000A492                 jnz     short loc_A4EF
.text:000000000000A494                 mov     byte ptr [rdi+8], 16h
.text:000000000000A498                 mov     eax, 1
.text:000000000000A49D                 retn
.text:000000000000A49D ; ---------------------------------------------------------------------------
.text:000000000000A49E                 align 20h
.text:000000000000A4A0
.text:000000000000A4A0 loc_A4A0:                               ; CODE XREF: peek_token_bracket+8↑j
.text:000000000000A4A0                 mov     byte ptr [rdi+8], 2
.text:000000000000A4A4                 xor     eax, eax
.text:000000000000A4A6                 retn
.text:000000000000A4A6 ; ---------------------------------------------------------------------------
.text:000000000000A4A7                 align 10h
.text:000000000000A4B0
.text:000000000000A4B0 loc_A4B0:                               ; CODE XREF: peek_token_bracket+3B↑j
.text:000000000000A4B0                 lea     rcx, [rax+1]
.text:000000000000A4B4                 cmp     rcx, [rsi+58h]
.text:000000000000A4B8                 jge     short loc_A500
.text:000000000000A4BA                 movzx   eax, byte ptr [r8+rax+1]
.text:000000000000A4C0                 cmp     al, 3Ah ; ':'
.text:000000000000A4C2                 mov     [rdi], al
.text:000000000000A4C4                 jz      loc_A560
.text:000000000000A4CA                 cmp     al, 3Dh ; '='
.text:000000000000A4CC                 jz      loc_A550
.text:000000000000A4D2                 cmp     al, 2Eh ; '.'
.text:000000000000A4D4                 jnz     short loc_A500
.text:000000000000A4D6                 mov     byte ptr [rdi+8], 1Ah
.text:000000000000A4DA                 mov     eax, 2
.text:000000000000A4DF                 retn
.text:000000000000A4E0 ; ---------------------------------------------------------------------------
.text:000000000000A4E0
.text:000000000000A4E0 loc_A4E0:                               ; CODE XREF: peek_token_bracket+36↑j
.text:000000000000A4E0                 and     edx, 1
.text:000000000000A4E3                 jz      short loc_A4EF
.text:000000000000A4E5                 lea     rdx, [rax+1]
.text:000000000000A4E9                 cmp     rdx, [rsi+58h]
.text:000000000000A4ED                 jl      short loc_A530
.text:000000000000A4EF
.text:000000000000A4EF loc_A4EF:                               ; CODE XREF: peek_token_bracket+2D↑j
.text:000000000000A4EF                                         ; peek_token_bracket+52↑j ...
.text:000000000000A4EF                 mov     byte ptr [rdi+8], 1
.text:000000000000A4F3                 mov     eax, 1
.text:000000000000A4F8                 retn
.text:000000000000A4F8 ; ---------------------------------------------------------------------------
.text:000000000000A4F9                 align 20h
.text:000000000000A500
.text:000000000000A500 loc_A500:                               ; CODE XREF: peek_token_bracket+78↑j
.text:000000000000A500                                         ; peek_token_bracket+94↑j ...
.text:000000000000A500                 mov     byte ptr [rdi+8], 1
.text:000000000000A504                 mov     byte ptr [rdi], 5Bh ; '['
.text:000000000000A507                 mov     eax, 1
.text:000000000000A50C                 retn
.text:000000000000A50C ; ---------------------------------------------------------------------------
.text:000000000000A50D                 align 10h
.text:000000000000A510
.text:000000000000A510 loc_A510:                               ; CODE XREF: peek_token_bracket+49↑j
.text:000000000000A510                 mov     byte ptr [rdi+8], 19h
.text:000000000000A514                 mov     eax, 1
.text:000000000000A519                 retn
.text:000000000000A519 ; ---------------------------------------------------------------------------
.text:000000000000A51A                 align 20h
.text:000000000000A520
.text:000000000000A520 loc_A520:                               ; CODE XREF: peek_token_bracket+40↑j
.text:000000000000A520                 mov     byte ptr [rdi+8], 15h
.text:000000000000A524                 mov     eax, 1
.text:000000000000A529                 retn
.text:000000000000A529 ; ---------------------------------------------------------------------------
.text:000000000000A52A                 align 10h
.text:000000000000A530
.text:000000000000A530 loc_A530:                               ; CODE XREF: peek_token_bracket+AD↑j
.text:000000000000A530                 mov     [rsi+48h], rdx
.text:000000000000A534                 movzx   eax, byte ptr [r8+rax+1]
.text:000000000000A53A                 mov     byte ptr [rdi+8], 1
.text:000000000000A53E                 mov     [rdi], al
.text:000000000000A540                 mov     eax, 1
.text:000000000000A545                 retn
.text:000000000000A545 ; ---------------------------------------------------------------------------
.text:000000000000A546                 align 10h
.text:000000000000A550
.text:000000000000A550 loc_A550:                               ; CODE XREF: peek_token_bracket+8C↑j
.text:000000000000A550                 mov     byte ptr [rdi+8], 1Ch
.text:000000000000A554                 mov     eax, 2
.text:000000000000A559                 retn
.text:000000000000A559 ; ---------------------------------------------------------------------------
.text:000000000000A55A                 align 20h
.text:000000000000A560
.text:000000000000A560 loc_A560:                               ; CODE XREF: peek_token_bracket+84↑j
.text:000000000000A560                 and     edx, 4
.text:000000000000A563                 jz      short loc_A500
.text:000000000000A565                 mov     byte ptr [rdi+8], 1Eh
.text:000000000000A569                 mov     eax, 2
.text:000000000000A56E                 retn
.text:000000000000A56E ; } // starts at A440
.text:000000000000A56E peek_token_bracket endp
.text:000000000000A56E
.text:000000000000A56E ; ---------------------------------------------------------------------------
.text:000000000000A56F                 align 10h
.text:000000000000A570
.text:000000000000A570 ; =============== S U B R O U T I N E =======================================
.text:000000000000A570
.text:000000000000A570
.text:000000000000A570 mark_opt_subexp proc near               ; DATA XREF: parse_expression+594↓o
.text:000000000000A570 ; __unwind {
.text:000000000000A570                 cmp     byte ptr [rsi+30h], 11h
.text:000000000000A574                 jz      short loc_A580
.text:000000000000A576
.text:000000000000A576 loc_A576:                               ; CODE XREF: mark_opt_subexp+14↓j
.text:000000000000A576                 xor     eax, eax
.text:000000000000A578                 retn
.text:000000000000A578 ; ---------------------------------------------------------------------------
.text:000000000000A579                 align 20h
.text:000000000000A580
.text:000000000000A580 loc_A580:                               ; CODE XREF: mark_opt_subexp+4↑j
.text:000000000000A580                 cmp     rdi, [rsi+28h]
.text:000000000000A584                 jnz     short loc_A576
.text:000000000000A586                 or      byte ptr [rsi+32h], 8
.text:000000000000A58A                 xor     eax, eax
.text:000000000000A58C                 retn
.text:000000000000A58C ; } // starts at A570
.text:000000000000A58C mark_opt_subexp endp
.text:000000000000A58C
.text:000000000000A58C ; ---------------------------------------------------------------------------
.text:000000000000A58D                 align 10h
.text:000000000000A590
.text:000000000000A590 ; =============== S U B R O U T I N E =======================================
.text:000000000000A590
.text:000000000000A590
.text:000000000000A590 check_dst_limits_calc_pos_1 proc near   ; CODE XREF: check_dst_limits_calc_pos_1+15D↓p
.text:000000000000A590                                         ; check_dst_limits_calc_pos+58↓j
.text:000000000000A590
.text:000000000000A590 var_78          = qword ptr -78h
.text:000000000000A590 var_70          = dword ptr -70h
.text:000000000000A590 var_6C          = dword ptr -6Ch
.text:000000000000A590 var_68          = qword ptr -68h
.text:000000000000A590 var_60          = qword ptr -60h
.text:000000000000A590 var_58          = dword ptr -58h
.text:000000000000A590 var_52          = word ptr -52h
.text:000000000000A590 var_50          = qword ptr -50h
.text:000000000000A590 var_48          = qword ptr -48h
.text:000000000000A590 var_40          = qword ptr -40h
.text:000000000000A590
.text:000000000000A590 ; __unwind {
.text:000000000000A590                 push    r15
.text:000000000000A592                 push    r14
.text:000000000000A594                 mov     r9, rdx
.text:000000000000A597                 push    r13
.text:000000000000A599                 push    r12
.text:000000000000A59B                 lea     rdx, [rcx+rcx*2]
.text:000000000000A59F                 push    rbp
.text:000000000000A5A0                 push    rbx
.text:000000000000A5A1                 mov     r15d, esi
.text:000000000000A5A4                 sub     rsp, 48h
.text:000000000000A5A8                 mov     r14, [rdi+98h]
.text:000000000000A5AF                 mov     [rsp+78h+var_78], rdi
.text:000000000000A5B3                 mov     rax, [r14+30h]
.text:000000000000A5B7                 lea     r12, [rax+rdx*8]
.text:000000000000A5BB                 cmp     qword ptr [r12+8], 0
.text:000000000000A5C1                 jle     loc_A755
.text:000000000000A5C7                 lea     rax, [r8+r8*4]
.text:000000000000A5CB                 mov     r11, rcx
.text:000000000000A5CE                 mov     ecx, r9d
.text:000000000000A5D1                 mov     r10, r8
.text:000000000000A5D4                 xor     ebx, ebx
.text:000000000000A5D6                 mov     [rsp+78h+var_58], esi
.text:000000000000A5DA                 shl     rax, 3
.text:000000000000A5DE                 mov     r15, r9
.text:000000000000A5E1                 mov     [rsp+78h+var_68], r11
.text:000000000000A5E6                 mov     [rsp+78h+var_50], rax
.text:000000000000A5EB                 mov     eax, 1
.text:000000000000A5F0                 shl     rax, cl
.text:000000000000A5F3                 mov     [rsp+78h+var_60], rax
.text:000000000000A5F8                 not     eax
.text:000000000000A5FA                 mov     [rsp+78h+var_52], ax
.text:000000000000A5FF                 mov     eax, esi
.text:000000000000A601                 and     eax, 1
.text:000000000000A604                 mov     [rsp+78h+var_6C], eax
.text:000000000000A608                 mov     eax, esi
.text:000000000000A60A                 and     eax, 2
.text:000000000000A60D                 mov     [rsp+78h+var_70], eax
.text:000000000000A611                 jmp     short loc_A635
.text:000000000000A611 ; ---------------------------------------------------------------------------
.text:000000000000A613                 align 8
.text:000000000000A618
.text:000000000000A618 loc_A618:                               ; CODE XREF: check_dst_limits_calc_pos_1+BF↓j
.text:000000000000A618                 cmp     dl, 9
.text:000000000000A61B                 jz      loc_A770
.text:000000000000A621                 cmp     dl, 4
.text:000000000000A624                 jz      short loc_A678
.text:000000000000A626
.text:000000000000A626 loc_A626:                               ; CODE XREF: check_dst_limits_calc_pos_1+C7↓j
.text:000000000000A626                                         ; check_dst_limits_calc_pos_1+CC↓j ...
.text:000000000000A626                 add     rbx, 1
.text:000000000000A62A                 cmp     [r12+8], rbx
.text:000000000000A62F                 jle     loc_A750
.text:000000000000A635
.text:000000000000A635 loc_A635:                               ; CODE XREF: check_dst_limits_calc_pos_1+81↑j
.text:000000000000A635                                         ; check_dst_limits_calc_pos_1+1B4↓j
.text:000000000000A635                 mov     rax, [r12+10h]
.text:000000000000A63A                 mov     rbp, [rax+rbx*8]
.text:000000000000A63E                 mov     rax, rbp
.text:000000000000A641                 shl     rax, 4
.text:000000000000A645                 add     rax, [r14]
.text:000000000000A648                 movzx   edx, byte ptr [rax+8]
.text:000000000000A64C                 cmp     dl, 8
.text:000000000000A64F                 jnz     short loc_A618
.text:000000000000A651                 mov     ecx, [rsp+78h+var_6C]
.text:000000000000A655                 test    ecx, ecx
.text:000000000000A657                 jz      short loc_A626
.text:000000000000A659                 cmp     [rax], r15
.text:000000000000A65C                 jnz     short loc_A626
.text:000000000000A65E
.text:000000000000A65E loc_A65E:                               ; CODE XREF: check_dst_limits_calc_pos_1+165↓j
.text:000000000000A65E                 add     rsp, 48h
.text:000000000000A662                 mov     eax, 0FFFFFFFFh
.text:000000000000A667                 pop     rbx
.text:000000000000A668                 pop     rbp
.text:000000000000A669                 pop     r12
.text:000000000000A66B                 pop     r13
.text:000000000000A66D                 pop     r14
.text:000000000000A66F                 pop     r15
.text:000000000000A671                 retn
.text:000000000000A671 ; ---------------------------------------------------------------------------
.text:000000000000A672                 align 8
.text:000000000000A678
.text:000000000000A678 loc_A678:                               ; CODE XREF: check_dst_limits_calc_pos_1+94↑j
.text:000000000000A678                 cmp     r10, 0FFFFFFFFFFFFFFFFh
.text:000000000000A67C                 jz      short loc_A626
.text:000000000000A67E                 mov     rax, [rsp+78h+var_78]
.text:000000000000A682                 mov     r13, [rsp+78h+var_50]
.text:000000000000A687                 mov     rdi, rbp
.text:000000000000A68A                 mov     [rsp+78h+var_48], r12
.text:000000000000A68F                 mov     [rsp+78h+var_40], rbx
.text:000000000000A694                 mov     r12, r10
.text:000000000000A697                 add     r13, [rax+0D8h]
.text:000000000000A69E                 lea     rax, [rbp+rbp*2+0]
.text:000000000000A6A3                 mov     rbp, r14
.text:000000000000A6A6                 mov     r14, rdi
.text:000000000000A6A9                 shl     rax, 3
.text:000000000000A6AD                 mov     rbx, rax
.text:000000000000A6B0
.text:000000000000A6B0 loc_A6B0:                               ; CODE XREF: check_dst_limits_calc_pos_1+199↓j
.text:000000000000A6B0                 cmp     [r13+0], r14
.text:000000000000A6B4                 jnz     short loc_A720
.text:000000000000A6B6                 cmp     r15, 3Fh ; '?'
.text:000000000000A6BA                 jg      short loc_A6C8
.text:000000000000A6BC                 movzx   eax, word ptr [r13+22h]
.text:000000000000A6C1                 test    [rsp+78h+var_60], rax
.text:000000000000A6C6                 jz      short loc_A720
.text:000000000000A6C8
.text:000000000000A6C8 loc_A6C8:                               ; CODE XREF: check_dst_limits_calc_pos_1+12A↑j
.text:000000000000A6C8                 mov     rax, [rbp+28h]
.text:000000000000A6CC                 mov     rax, [rax+rbx+10h]
.text:000000000000A6D1                 mov     rcx, [rax]
.text:000000000000A6D4                 cmp     [rsp+78h+var_68], rcx
.text:000000000000A6D9                 jz      loc_A7A0
.text:000000000000A6DF                 mov     esi, [rsp+78h+var_58]
.text:000000000000A6E3                 mov     rdi, [rsp+78h+var_78]
.text:000000000000A6E7                 mov     r8, r12
.text:000000000000A6EA                 mov     rdx, r15
.text:000000000000A6ED                 call    check_dst_limits_calc_pos_1
.text:000000000000A6F2                 cmp     eax, 0FFFFFFFFh
.text:000000000000A6F5                 jz      loc_A65E
.text:000000000000A6FB                 test    eax, eax
.text:000000000000A6FD                 jnz     short loc_A707
.text:000000000000A6FF                 mov     esi, [rsp+78h+var_70]
.text:000000000000A703                 test    esi, esi
.text:000000000000A705                 jnz     short loc_A785
.text:000000000000A707
.text:000000000000A707 loc_A707:                               ; CODE XREF: check_dst_limits_calc_pos_1+16D↑j
.text:000000000000A707                 cmp     r15, 3Fh ; '?'
.text:000000000000A70B                 jg      short loc_A720
.text:000000000000A70D                 movzx   eax, [rsp+78h+var_52]
.text:000000000000A712                 and     [r13+22h], ax
.text:000000000000A717                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A720
.text:000000000000A720 loc_A720:                               ; CODE XREF: check_dst_limits_calc_pos_1+124↑j
.text:000000000000A720                                         ; check_dst_limits_calc_pos_1+136↑j ...
.text:000000000000A720                 add     r13, 28h ; '('
.text:000000000000A724                 cmp     byte ptr [r13-8], 0
.text:000000000000A729                 jnz     short loc_A6B0
.text:000000000000A72B                 mov     rbx, [rsp+78h+var_40]
.text:000000000000A730                 mov     r10, r12
.text:000000000000A733                 mov     r12, [rsp+78h+var_48]
.text:000000000000A738                 mov     r14, rbp
.text:000000000000A73B                 add     rbx, 1
.text:000000000000A73F                 cmp     [r12+8], rbx
.text:000000000000A744                 jg      loc_A635
.text:000000000000A74A                 nop     word ptr [rax+rax+00h]
.text:000000000000A750
.text:000000000000A750 loc_A750:                               ; CODE XREF: check_dst_limits_calc_pos_1+9F↑j
.text:000000000000A750                 mov     r15d, [rsp+78h+var_58]
.text:000000000000A755
.text:000000000000A755 loc_A755:                               ; CODE XREF: check_dst_limits_calc_pos_1+31↑j
.text:000000000000A755                 add     rsp, 48h
.text:000000000000A759                 mov     eax, r15d
.text:000000000000A75C                 pop     rbx
.text:000000000000A75D                 sar     eax, 1
.text:000000000000A75F                 pop     rbp
.text:000000000000A760                 pop     r12
.text:000000000000A762                 pop     r13
.text:000000000000A764                 pop     r14
.text:000000000000A766                 pop     r15
.text:000000000000A768                 retn
.text:000000000000A768 ; ---------------------------------------------------------------------------
.text:000000000000A769                 align 10h
.text:000000000000A770
.text:000000000000A770 loc_A770:                               ; CODE XREF: check_dst_limits_calc_pos_1+8B↑j
.text:000000000000A770                 mov     edx, [rsp+78h+var_70]
.text:000000000000A774                 test    edx, edx
.text:000000000000A776                 jz      loc_A626
.text:000000000000A77C                 cmp     [rax], r15
.text:000000000000A77F                 jnz     loc_A626
.text:000000000000A785
.text:000000000000A785 loc_A785:                               ; CODE XREF: check_dst_limits_calc_pos_1+175↑j
.text:000000000000A785                 add     rsp, 48h
.text:000000000000A789                 xor     eax, eax
.text:000000000000A78B                 pop     rbx
.text:000000000000A78C                 pop     rbp
.text:000000000000A78D                 pop     r12
.text:000000000000A78F                 pop     r13
.text:000000000000A791                 pop     r14
.text:000000000000A793                 pop     r15
.text:000000000000A795                 retn
.text:000000000000A795 ; ---------------------------------------------------------------------------
.text:000000000000A796                 align 20h
.text:000000000000A7A0
.text:000000000000A7A0 loc_A7A0:                               ; CODE XREF: check_dst_limits_calc_pos_1+149↑j
.text:000000000000A7A0                 mov     r15d, [rsp+78h+var_58]
.text:000000000000A7A5                 add     rsp, 48h
.text:000000000000A7A9                 pop     rbx
.text:000000000000A7AA                 pop     rbp
.text:000000000000A7AB                 mov     eax, r15d
.text:000000000000A7AE                 and     eax, 1
.text:000000000000A7B1                 pop     r12
.text:000000000000A7B3                 neg     eax
.text:000000000000A7B5                 pop     r13
.text:000000000000A7B7                 pop     r14
.text:000000000000A7B9                 pop     r15
.text:000000000000A7BB                 retn
.text:000000000000A7BB ; } // starts at A590
.text:000000000000A7BB check_dst_limits_calc_pos_1 endp
.text:000000000000A7BB
.text:000000000000A7BB ; ---------------------------------------------------------------------------
.text:000000000000A7BC                 align 20h
.text:000000000000A7C0
.text:000000000000A7C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A7C0
.text:000000000000A7C0
.text:000000000000A7C0 check_dst_limits_calc_pos proc near     ; CODE XREF: check_dst_limits_isra_13+1AE↓p
.text:000000000000A7C0                                         ; check_dst_limits_isra_13+1D0↓p
.text:000000000000A7C0 ; __unwind {
.text:000000000000A7C0                 mov     rax, [rdi+0D8h]
.text:000000000000A7C7                 lea     rsi, [rsi+rsi*4]
.text:000000000000A7CB                 lea     rax, [rax+rsi*8]
.text:000000000000A7CF                 mov     r10, [rax+10h]
.text:000000000000A7D3                 cmp     r10, r8
.text:000000000000A7D6                 jg      short loc_A820
.text:000000000000A7D8                 mov     rax, [rax+18h]
.text:000000000000A7DC                 cmp     rax, r8
.text:000000000000A7DF                 jl      short loc_A800
.text:000000000000A7E1                 xor     esi, esi
.text:000000000000A7E3                 cmp     r10, r8
.text:000000000000A7E6                 setz    sil
.text:000000000000A7EA                 or      esi, 2
.text:000000000000A7ED                 cmp     rax, r8
.text:000000000000A7F0                 jz      short loc_A815
.text:000000000000A7F2                 xor     eax, eax
.text:000000000000A7F4                 cmp     r10, r8
.text:000000000000A7F7                 jz      short loc_A810
.text:000000000000A7F9                 rep retn
.text:000000000000A7F9 ; ---------------------------------------------------------------------------
.text:000000000000A7FB                 align 20h
.text:000000000000A800
.text:000000000000A800 loc_A800:                               ; CODE XREF: check_dst_limits_calc_pos+1F↑j
.text:000000000000A800                 mov     eax, 1
.text:000000000000A805                 retn
.text:000000000000A805 ; ---------------------------------------------------------------------------
.text:000000000000A806                 align 10h
.text:000000000000A810
.text:000000000000A810 loc_A810:                               ; CODE XREF: check_dst_limits_calc_pos+37↑j
.text:000000000000A810                 mov     esi, 1
.text:000000000000A815
.text:000000000000A815 loc_A815:                               ; CODE XREF: check_dst_limits_calc_pos+30↑j
.text:000000000000A815                 mov     r8, r9
.text:000000000000A818                 jmp     check_dst_limits_calc_pos_1
.text:000000000000A818 ; ---------------------------------------------------------------------------
.text:000000000000A81D                 align 20h
.text:000000000000A820
.text:000000000000A820 loc_A820:                               ; CODE XREF: check_dst_limits_calc_pos+16↑j
.text:000000000000A820                 mov     eax, 0FFFFFFFFh
.text:000000000000A825                 retn
.text:000000000000A825 ; } // starts at A7C0
.text:000000000000A825 check_dst_limits_calc_pos endp
.text:000000000000A825
.text:000000000000A825 ; ---------------------------------------------------------------------------
.text:000000000000A826                 align 10h
.text:000000000000A830
.text:000000000000A830 ; =============== S U B R O U T I N E =======================================
.text:000000000000A830
.text:000000000000A830
.text:000000000000A830 postorder       proc near               ; CODE XREF: parse_expression+ED↓p
.text:000000000000A830                                         ; parse_expression+398↓p ...
.text:000000000000A830 ; __unwind {
.text:000000000000A830                 push    r12
.text:000000000000A832                 mov     r12, rsi
.text:000000000000A835                 push    rbp
.text:000000000000A836                 mov     rbp, rdx
.text:000000000000A839                 push    rbx
.text:000000000000A83A                 mov     rbx, rdi
.text:000000000000A83D                 jmp     short loc_A843
.text:000000000000A83D ; ---------------------------------------------------------------------------
.text:000000000000A83F                 align 20h
.text:000000000000A840
.text:000000000000A840 loc_A840:                               ; CODE XREF: postorder+1A↓j
.text:000000000000A840                                         ; postorder+23↓j ...
.text:000000000000A840                 mov     rbx, rax
.text:000000000000A843
.text:000000000000A843 loc_A843:                               ; CODE XREF: postorder+D↑j
.text:000000000000A843                 mov     rax, [rbx+8]
.text:000000000000A847                 test    rax, rax
.text:000000000000A84A                 jnz     short loc_A840
.text:000000000000A84C                 mov     rax, [rbx+10h]
.text:000000000000A850                 test    rax, rax
.text:000000000000A853                 jnz     short loc_A840
.text:000000000000A855                 mov     rsi, rbx
.text:000000000000A858                 mov     rdi, rbp
.text:000000000000A85B                 call    r12
.text:000000000000A85E                 test    eax, eax
.text:000000000000A860                 jnz     short loc_A896
.text:000000000000A862                 nop     word ptr [rax+rax+00h]
.text:000000000000A868
.text:000000000000A868 loc_A868:                               ; CODE XREF: postorder+64↓j
.text:000000000000A868                 mov     rdx, [rbx]
.text:000000000000A86B                 test    rdx, rdx
.text:000000000000A86E                 jz      short loc_A896
.text:000000000000A870                 mov     rax, [rdx+10h]
.text:000000000000A874                 cmp     rax, rbx
.text:000000000000A877                 mov     rbx, rdx
.text:000000000000A87A                 setz    sil
.text:000000000000A87E                 test    rax, rax
.text:000000000000A881                 setz    cl
.text:000000000000A884                 or      sil, cl
.text:000000000000A887                 jz      short loc_A840
.text:000000000000A889                 mov     rsi, rbx
.text:000000000000A88C                 mov     rdi, rbp
.text:000000000000A88F                 call    r12
.text:000000000000A892                 test    eax, eax
.text:000000000000A894                 jz      short loc_A868
.text:000000000000A896
.text:000000000000A896 loc_A896:                               ; CODE XREF: postorder+30↑j
.text:000000000000A896                                         ; postorder+3E↑j
.text:000000000000A896                 pop     rbx
.text:000000000000A897                 pop     rbp
.text:000000000000A898                 pop     r12
.text:000000000000A89A                 retn
.text:000000000000A89A ; } // starts at A830
.text:000000000000A89A postorder       endp
.text:000000000000A89A
.text:000000000000A89A ; ---------------------------------------------------------------------------
.text:000000000000A89B                 align 20h
.text:000000000000A8A0
.text:000000000000A8A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A8A0
.text:000000000000A8A0
.text:000000000000A8A0 preorder        proc near               ; CODE XREF: re_compile_internal+61B↓p
.text:000000000000A8A0                                         ; re_compile_internal+6A3↓p
.text:000000000000A8A0 ; __unwind {
.text:000000000000A8A0                 push    r12
.text:000000000000A8A2                 mov     r12, rsi
.text:000000000000A8A5                 push    rbp
.text:000000000000A8A6                 mov     rbp, rdx
.text:000000000000A8A9                 push    rbx
.text:000000000000A8AA                 mov     rbx, rdi
.text:000000000000A8AD                 jmp     short loc_A8B3
.text:000000000000A8AD ; ---------------------------------------------------------------------------
.text:000000000000A8AF                 align 10h
.text:000000000000A8B0
.text:000000000000A8B0 loc_A8B0:                               ; CODE XREF: preorder+29↓j
.text:000000000000A8B0                                         ; preorder+3F↓j
.text:000000000000A8B0                 mov     rbx, rdx
.text:000000000000A8B3
.text:000000000000A8B3 loc_A8B3:                               ; CODE XREF: preorder+D↑j
.text:000000000000A8B3                 mov     rsi, rbx
.text:000000000000A8B6                 mov     rdi, rbp
.text:000000000000A8B9                 call    r12
.text:000000000000A8BC                 test    eax, eax
.text:000000000000A8BE                 jnz     short loc_A8EC
.text:000000000000A8C0                 mov     rdx, [rbx+8]
.text:000000000000A8C4                 xor     ecx, ecx
.text:000000000000A8C6                 test    rdx, rdx
.text:000000000000A8C9                 jnz     short loc_A8B0
.text:000000000000A8CB                 jmp     short loc_A8D3
.text:000000000000A8CB ; ---------------------------------------------------------------------------
.text:000000000000A8CD                 align 10h
.text:000000000000A8D0
.text:000000000000A8D0 loc_A8D0:                               ; CODE XREF: preorder+4A↓j
.text:000000000000A8D0                 mov     rbx, rdx
.text:000000000000A8D3
.text:000000000000A8D3 loc_A8D3:                               ; CODE XREF: preorder+2B↑j
.text:000000000000A8D3                 mov     rdx, [rbx+10h]
.text:000000000000A8D7                 cmp     rdx, rcx
.text:000000000000A8DA                 jz      short loc_A8E1
.text:000000000000A8DC                 test    rdx, rdx
.text:000000000000A8DF                 jnz     short loc_A8B0
.text:000000000000A8E1
.text:000000000000A8E1 loc_A8E1:                               ; CODE XREF: preorder+3A↑j
.text:000000000000A8E1                 mov     rdx, [rbx]
.text:000000000000A8E4                 mov     rcx, rbx
.text:000000000000A8E7                 test    rdx, rdx
.text:000000000000A8EA                 jnz     short loc_A8D0
.text:000000000000A8EC
.text:000000000000A8EC loc_A8EC:                               ; CODE XREF: preorder+1E↑j
.text:000000000000A8EC                 pop     rbx
.text:000000000000A8ED                 pop     rbp
.text:000000000000A8EE                 pop     r12
.text:000000000000A8F0                 retn
.text:000000000000A8F0 ; } // starts at A8A0
.text:000000000000A8F0 preorder        endp
.text:000000000000A8F0
.text:000000000000A8F0 ; ---------------------------------------------------------------------------
.text:000000000000A8F1                 align 20h
.text:000000000000A900
.text:000000000000A900 ; =============== S U B R O U T I N E =======================================
.text:000000000000A900
.text:000000000000A900
.text:000000000000A900 re_string_realloc_buffers proc near     ; CODE XREF: extend_buffers+38↓p
.text:000000000000A900                                         ; re_search_internal+24B↓p ...
.text:000000000000A900 ; __unwind {
.text:000000000000A900                 push    rbp
.text:000000000000A901                 push    rbx
.text:000000000000A902                 mov     rbp, rsi
.text:000000000000A905                 mov     rbx, rdi
.text:000000000000A908                 sub     rsp, 8
.text:000000000000A90C                 cmp     dword ptr [rdi+90h], 1
.text:000000000000A913                 jle     short loc_A95D
.text:000000000000A915                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000A91F                 cmp     rsi, rax
.text:000000000000A922                 ja      short loc_A990
.text:000000000000A924                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000A928                 lea     rsi, ds:0[rsi*4] ; size
.text:000000000000A930                 call    _realloc
.text:000000000000A935                 test    rax, rax
.text:000000000000A938                 jz      short loc_A990
.text:000000000000A93A                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000A93E                 mov     [rbx+10h], rax
.text:000000000000A942                 test    rdi, rdi
.text:000000000000A945                 jz      short loc_A95D
.text:000000000000A947                 lea     rsi, ds:0[rbp*8] ; size
.text:000000000000A94F                 call    _realloc
.text:000000000000A954                 test    rax, rax
.text:000000000000A957                 jz      short loc_A990
.text:000000000000A959                 mov     [rbx+18h], rax
.text:000000000000A95D
.text:000000000000A95D loc_A95D:                               ; CODE XREF: re_string_realloc_buffers+13↑j
.text:000000000000A95D                                         ; re_string_realloc_buffers+45↑j
.text:000000000000A95D                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000A964                 jnz     short loc_A978
.text:000000000000A966
.text:000000000000A966 loc_A966:                               ; CODE XREF: re_string_realloc_buffers+8D↓j
.text:000000000000A966                 mov     [rbx+40h], rbp
.text:000000000000A96A                 add     rsp, 8
.text:000000000000A96E                 xor     eax, eax
.text:000000000000A970                 pop     rbx
.text:000000000000A971                 pop     rbp
.text:000000000000A972                 retn
.text:000000000000A972 ; ---------------------------------------------------------------------------
.text:000000000000A973                 align 8
.text:000000000000A978
.text:000000000000A978 loc_A978:                               ; CODE XREF: re_string_realloc_buffers+64↑j
.text:000000000000A978                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000A97C                 mov     rsi, rbp        ; size
.text:000000000000A97F                 call    _realloc
.text:000000000000A984                 test    rax, rax
.text:000000000000A987                 jz      short loc_A990
.text:000000000000A989                 mov     [rbx+8], rax
.text:000000000000A98D                 jmp     short loc_A966
.text:000000000000A98D ; ---------------------------------------------------------------------------
.text:000000000000A98F                 align 10h
.text:000000000000A990
.text:000000000000A990 loc_A990:                               ; CODE XREF: re_string_realloc_buffers+22↑j
.text:000000000000A990                                         ; re_string_realloc_buffers+38↑j ...
.text:000000000000A990                 add     rsp, 8
.text:000000000000A994                 mov     eax, 0Ch
.text:000000000000A999                 pop     rbx
.text:000000000000A99A                 pop     rbp
.text:000000000000A99B                 retn
.text:000000000000A99B ; } // starts at A900
.text:000000000000A99B re_string_realloc_buffers endp
.text:000000000000A99B
.text:000000000000A99B ; ---------------------------------------------------------------------------
.text:000000000000A99C                 align 20h
.text:000000000000A9A0
.text:000000000000A9A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A9A0
.text:000000000000A9A0
.text:000000000000A9A0 re_node_set_insert_last proc near       ; CODE XREF: register_state+75↓p
.text:000000000000A9A0                                         ; re_compile_internal+B61↓p
.text:000000000000A9A0 ; __unwind {
.text:000000000000A9A0                 push    rbp
.text:000000000000A9A1                 push    rbx
.text:000000000000A9A2                 mov     rbp, rsi
.text:000000000000A9A5                 mov     rbx, rdi
.text:000000000000A9A8                 sub     rsp, 8
.text:000000000000A9AC                 mov     rsi, [rdi+8]
.text:000000000000A9B0                 cmp     [rdi], rsi
.text:000000000000A9B3                 mov     rax, [rdi+10h]
.text:000000000000A9B7                 jz      short loc_A9D8
.text:000000000000A9B9
.text:000000000000A9B9 loc_A9B9:                               ; CODE XREF: re_node_set_insert_last+5C↓j
.text:000000000000A9B9                 lea     rdx, [rsi+1]
.text:000000000000A9BD                 mov     [rbx+8], rdx
.text:000000000000A9C1                 mov     [rax+rsi*8], rbp
.text:000000000000A9C5                 mov     eax, 1
.text:000000000000A9CA
.text:000000000000A9CA loc_A9CA:                               ; CODE XREF: re_node_set_insert_last+62↓j
.text:000000000000A9CA                 add     rsp, 8
.text:000000000000A9CE                 pop     rbx
.text:000000000000A9CF                 pop     rbp
.text:000000000000A9D0                 retn
.text:000000000000A9D0 ; ---------------------------------------------------------------------------
.text:000000000000A9D1                 align 8
.text:000000000000A9D8
.text:000000000000A9D8 loc_A9D8:                               ; CODE XREF: re_node_set_insert_last+17↑j
.text:000000000000A9D8                 add     rsi, 1
.text:000000000000A9DC                 lea     rdx, [rsi+rsi]
.text:000000000000A9E0                 shl     rsi, 4          ; size
.text:000000000000A9E4                 mov     [rdi], rdx
.text:000000000000A9E7                 mov     rdi, rax        ; ptr
.text:000000000000A9EA                 call    _realloc
.text:000000000000A9EF                 test    rax, rax
.text:000000000000A9F2                 jz      short loc_AA00
.text:000000000000A9F4                 mov     [rbx+10h], rax
.text:000000000000A9F8                 mov     rsi, [rbx+8]
.text:000000000000A9FC                 jmp     short loc_A9B9
.text:000000000000A9FC ; ---------------------------------------------------------------------------
.text:000000000000A9FE                 align 20h
.text:000000000000AA00
.text:000000000000AA00 loc_AA00:                               ; CODE XREF: re_node_set_insert_last+52↑j
.text:000000000000AA00                 xor     eax, eax
.text:000000000000AA02                 jmp     short loc_A9CA
.text:000000000000AA02 ; } // starts at A9A0
.text:000000000000AA02 re_node_set_insert_last endp
.text:000000000000AA02
.text:000000000000AA02 ; ---------------------------------------------------------------------------
.text:000000000000AA04                 align 10h
.text:000000000000AA10
.text:000000000000AA10 ; =============== S U B R O U T I N E =======================================
.text:000000000000AA10
.text:000000000000AA10
.text:000000000000AA10 re_node_set_insert proc near            ; CODE XREF: duplicate_node_closure+E0↓p
.text:000000000000AA10                                         ; duplicate_node_closure+11A↓p ...
.text:000000000000AA10 ; __unwind {
.text:000000000000AA10                 push    rbp
.text:000000000000AA11                 push    rbx
.text:000000000000AA12                 mov     rbp, rsi
.text:000000000000AA15                 mov     rbx, rdi
.text:000000000000AA18                 sub     rsp, 8
.text:000000000000AA1C                 mov     rdx, [rdi]
.text:000000000000AA1F                 test    rdx, rdx
.text:000000000000AA22                 jz      short loc_AA48
.text:000000000000AA24                 mov     rsi, [rdi+8]
.text:000000000000AA28                 mov     rax, [rdi+10h]
.text:000000000000AA2C                 test    rsi, rsi
.text:000000000000AA2F                 jnz     short loc_AA80
.text:000000000000AA31                 mov     [rax], rbp
.text:000000000000AA34                 add     qword ptr [rdi+8], 1
.text:000000000000AA39                 mov     eax, 1
.text:000000000000AA3E
.text:000000000000AA3E loc_AA3E:                               ; CODE XREF: re_node_set_insert+B1↓j
.text:000000000000AA3E                                         ; re_node_set_insert+F7↓j ...
.text:000000000000AA3E                 add     rsp, 8
.text:000000000000AA42                 pop     rbx
.text:000000000000AA43                 pop     rbp
.text:000000000000AA44                 retn
.text:000000000000AA44 ; ---------------------------------------------------------------------------
.text:000000000000AA45                 align 8
.text:000000000000AA48
.text:000000000000AA48 loc_AA48:                               ; CODE XREF: re_node_set_insert+12↑j
.text:000000000000AA48                 mov     qword ptr [rdi], 1
.text:000000000000AA4F                 mov     qword ptr [rdi+8], 1
.text:000000000000AA57                 mov     edi, 8          ; size
.text:000000000000AA5C                 call    _malloc
.text:000000000000AA61                 test    rax, rax
.text:000000000000AA64                 mov     [rbx+10h], rax
.text:000000000000AA68                 jz      loc_AAF8
.text:000000000000AA6E                 mov     [rax], rbp
.text:000000000000AA71                 add     rsp, 8
.text:000000000000AA75                 mov     eax, 1
.text:000000000000AA7A                 pop     rbx
.text:000000000000AA7B                 pop     rbp
.text:000000000000AA7C                 retn
.text:000000000000AA7C ; ---------------------------------------------------------------------------
.text:000000000000AA7D                 align 20h
.text:000000000000AA80
.text:000000000000AA80 loc_AA80:                               ; CODE XREF: re_node_set_insert+1F↑j
.text:000000000000AA80                 cmp     rdx, rsi
.text:000000000000AA83                 jz      loc_AB10
.text:000000000000AA89
.text:000000000000AA89 loc_AA89:                               ; CODE XREF: re_node_set_insert+120↓j
.text:000000000000AA89                 cmp     [rax], rbp
.text:000000000000AA8C                 lea     rdx, ds:0[rsi*8]
.text:000000000000AA94                 jle     short loc_AAD0
.text:000000000000AA96                 test    rsi, rsi
.text:000000000000AA99                 jle     short loc_AAB3
.text:000000000000AA9B                 add     rdx, rax
.text:000000000000AA9E                 xchg    ax, ax
.text:000000000000AAA0
.text:000000000000AAA0 loc_AAA0:                               ; CODE XREF: re_node_set_insert+9F↓j
.text:000000000000AAA0                 mov     rcx, [rdx-8]
.text:000000000000AAA4                 sub     rdx, 8
.text:000000000000AAA8                 mov     [rdx+8], rcx
.text:000000000000AAAC                 cmp     rax, rdx
.text:000000000000AAAF                 jnz     short loc_AAA0
.text:000000000000AAB1                 xor     edx, edx
.text:000000000000AAB3
.text:000000000000AAB3 loc_AAB3:                               ; CODE XREF: re_node_set_insert+89↑j
.text:000000000000AAB3                                         ; re_node_set_insert+C8↓j ...
.text:000000000000AAB3                 mov     [rax+rdx], rbp
.text:000000000000AAB7                 mov     eax, 1
.text:000000000000AABC                 add     qword ptr [rbx+8], 1
.text:000000000000AAC1                 jmp     loc_AA3E
.text:000000000000AAC1 ; ---------------------------------------------------------------------------
.text:000000000000AAC6                 align 10h
.text:000000000000AAD0
.text:000000000000AAD0 loc_AAD0:                               ; CODE XREF: re_node_set_insert+84↑j
.text:000000000000AAD0                 mov     rcx, [rax+rdx-8]
.text:000000000000AAD5                 cmp     rbp, rcx
.text:000000000000AAD8                 jge     short loc_AAB3
.text:000000000000AADA                 nop     word ptr [rax+rax+00h]
.text:000000000000AAE0
.text:000000000000AAE0 loc_AAE0:                               ; CODE XREF: re_node_set_insert+E0↓j
.text:000000000000AAE0                 mov     [rax+rdx], rcx
.text:000000000000AAE4                 sub     rdx, 8
.text:000000000000AAE8                 mov     rcx, [rax+rdx-8]
.text:000000000000AAED                 cmp     rcx, rbp
.text:000000000000AAF0                 jg      short loc_AAE0
.text:000000000000AAF2                 jmp     short loc_AAB3
.text:000000000000AAF2 ; ---------------------------------------------------------------------------
.text:000000000000AAF4                 align 8
.text:000000000000AAF8
.text:000000000000AAF8 loc_AAF8:                               ; CODE XREF: re_node_set_insert+58↑j
.text:000000000000AAF8                 mov     qword ptr [rbx+8], 0
.text:000000000000AB00                 mov     qword ptr [rbx], 0
.text:000000000000AB07                 jmp     loc_AA3E
.text:000000000000AB07 ; ---------------------------------------------------------------------------
.text:000000000000AB0C                 align 10h
.text:000000000000AB10
.text:000000000000AB10 loc_AB10:                               ; CODE XREF: re_node_set_insert+73↑j
.text:000000000000AB10                 lea     rdx, [rsi+rsi]
.text:000000000000AB14                 shl     rsi, 4          ; size
.text:000000000000AB18                 mov     [rdi], rdx
.text:000000000000AB1B                 mov     rdi, rax        ; ptr
.text:000000000000AB1E                 call    _realloc
.text:000000000000AB23                 test    rax, rax
.text:000000000000AB26                 jz      short loc_AB35
.text:000000000000AB28                 mov     [rbx+10h], rax
.text:000000000000AB2C                 mov     rsi, [rbx+8]
.text:000000000000AB30                 jmp     loc_AA89
.text:000000000000AB35 ; ---------------------------------------------------------------------------
.text:000000000000AB35
.text:000000000000AB35 loc_AB35:                               ; CODE XREF: re_node_set_insert+116↑j
.text:000000000000AB35                 xor     eax, eax
.text:000000000000AB37                 jmp     loc_AA3E
.text:000000000000AB37 ; } // starts at AA10
.text:000000000000AB37 re_node_set_insert endp
.text:000000000000AB37
.text:000000000000AB37 ; ---------------------------------------------------------------------------
.text:000000000000AB3C                 align 20h
.text:000000000000AB40
.text:000000000000AB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB40
.text:000000000000AB40
.text:000000000000AB40 register_state  proc near               ; CODE XREF: re_acquire_state_context+201↓p
.text:000000000000AB40                                         ; re_acquire_state+186↓p
.text:000000000000AB40 ; __unwind {
.text:000000000000AB40                 push    r14
.text:000000000000AB42                 push    r13
.text:000000000000AB44                 mov     r14, rdi
.text:000000000000AB47                 push    r12
.text:000000000000AB49                 push    rbp
.text:000000000000AB4A                 mov     r12, rdx
.text:000000000000AB4D                 push    rbx
.text:000000000000AB4E                 mov     rbx, [rsi+10h]
.text:000000000000AB52                 mov     rbp, rsi
.text:000000000000AB55                 mov     [rsi], rdx
.text:000000000000AB58                 mov     qword ptr [rsi+28h], 0
.text:000000000000AB60                 lea     r13, [rsi+20h]
.text:000000000000AB64                 lea     rdi, ds:0[rbx*8] ; size
.text:000000000000AB6C                 mov     [rsi+20h], rbx
.text:000000000000AB70                 call    _malloc
.text:000000000000AB75                 test    rax, rax
.text:000000000000AB78                 mov     [rbp+30h], rax
.text:000000000000AB7C                 jz      short loc_ABBE
.text:000000000000AB7E                 test    rbx, rbx
.text:000000000000AB81                 jle     short loc_ABD0
.text:000000000000AB83                 xor     ebx, ebx
.text:000000000000AB85                 jmp     short loc_AB9A
.text:000000000000AB85 ; ---------------------------------------------------------------------------
.text:000000000000AB87                 align 10h
.text:000000000000AB90
.text:000000000000AB90 loc_AB90:                               ; CODE XREF: register_state+70↓j
.text:000000000000AB90                                         ; register_state+7C↓j
.text:000000000000AB90                 add     rbx, 1
.text:000000000000AB94                 cmp     [rbp+10h], rbx
.text:000000000000AB98                 jle     short loc_ABD0
.text:000000000000AB9A
.text:000000000000AB9A loc_AB9A:                               ; CODE XREF: register_state+45↑j
.text:000000000000AB9A                 mov     rax, [rbp+18h]
.text:000000000000AB9E                 mov     rsi, [rax+rbx*8]
.text:000000000000ABA2                 mov     rax, rsi
.text:000000000000ABA5                 shl     rax, 4
.text:000000000000ABA9                 add     rax, [r14]
.text:000000000000ABAC                 test    byte ptr [rax+8], 8
.text:000000000000ABB0                 jnz     short loc_AB90
.text:000000000000ABB2                 mov     rdi, r13
.text:000000000000ABB5                 call    re_node_set_insert_last
.text:000000000000ABBA                 test    al, al
.text:000000000000ABBC                 jnz     short loc_AB90
.text:000000000000ABBE
.text:000000000000ABBE loc_ABBE:                               ; CODE XREF: register_state+3C↑j
.text:000000000000ABBE                                         ; register_state+D9↓j
.text:000000000000ABBE                 pop     rbx
.text:000000000000ABBF                 mov     eax, 0Ch
.text:000000000000ABC4                 pop     rbp
.text:000000000000ABC5                 pop     r12
.text:000000000000ABC7                 pop     r13
.text:000000000000ABC9                 pop     r14
.text:000000000000ABCB                 retn
.text:000000000000ABCB ; ---------------------------------------------------------------------------
.text:000000000000ABCC                 align 10h
.text:000000000000ABD0
.text:000000000000ABD0 loc_ABD0:                               ; CODE XREF: register_state+41↑j
.text:000000000000ABD0                                         ; register_state+58↑j
.text:000000000000ABD0                 and     r12, [r14+88h]
.text:000000000000ABD7                 mov     rax, [r14+40h]
.text:000000000000ABDB                 lea     rdx, [r12+r12*2]
.text:000000000000ABDF                 lea     rbx, [rax+rdx*8]
.text:000000000000ABE3                 mov     rdx, [rbx]
.text:000000000000ABE6                 cmp     [rbx+8], rdx
.text:000000000000ABEA                 mov     rax, [rbx+10h]
.text:000000000000ABEE                 lea     rsi, [rdx+1]
.text:000000000000ABF2                 jle     short loc_AC06
.text:000000000000ABF4
.text:000000000000ABF4 loc_ABF4:                               ; CODE XREF: register_state+EA↓j
.text:000000000000ABF4                 mov     [rbx], rsi
.text:000000000000ABF7                 mov     [rax+rdx*8], rbp
.text:000000000000ABFB                 xor     eax, eax
.text:000000000000ABFD                 pop     rbx
.text:000000000000ABFE                 pop     rbp
.text:000000000000ABFF                 pop     r12
.text:000000000000AC01                 pop     r13
.text:000000000000AC03                 pop     r14
.text:000000000000AC05                 retn
.text:000000000000AC06 ; ---------------------------------------------------------------------------
.text:000000000000AC06
.text:000000000000AC06 loc_AC06:                               ; CODE XREF: register_state+B2↑j
.text:000000000000AC06                 lea     r12, [rsi+rsi]
.text:000000000000AC0A                 mov     rdi, rax        ; ptr
.text:000000000000AC0D                 shl     rsi, 4          ; size
.text:000000000000AC11                 call    _realloc
.text:000000000000AC16                 test    rax, rax
.text:000000000000AC19                 jz      short loc_ABBE
.text:000000000000AC1B                 mov     rdx, [rbx]
.text:000000000000AC1E                 mov     [rbx+10h], rax
.text:000000000000AC22                 mov     [rbx+8], r12
.text:000000000000AC26                 lea     rsi, [rdx+1]
.text:000000000000AC2A                 jmp     short loc_ABF4
.text:000000000000AC2A ; } // starts at AB40
.text:000000000000AC2A register_state  endp
.text:000000000000AC2A
.text:000000000000AC2A ; ---------------------------------------------------------------------------
.text:000000000000AC2C                 align 10h
.text:000000000000AC30
.text:000000000000AC30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC30
.text:000000000000AC30
.text:000000000000AC30 build_upper_buffer proc near            ; CODE XREF: extend_buffers:loc_B5D0↓p
.text:000000000000AC30                                         ; re_string_reconstruct+673↓p ...
.text:000000000000AC30 ; __unwind {
.text:000000000000AC30                 push    r12
.text:000000000000AC32                 mov     r12, [rdi+58h]
.text:000000000000AC36                 cmp     [rdi+40h], r12
.text:000000000000AC3A                 push    rbp
.text:000000000000AC3B                 mov     rbp, rdi
.text:000000000000AC3E                 cmovle  r12, [rdi+40h]
.text:000000000000AC43                 push    rbx
.text:000000000000AC44                 mov     rbx, [rdi+30h]
.text:000000000000AC48                 cmp     r12, rbx
.text:000000000000AC4B                 jle     short loc_AC85
.text:000000000000AC4D                 call    ___ctype_toupper_loc
.text:000000000000AC52                 nop     word ptr [rax+rax+00h]
.text:000000000000AC58
.text:000000000000AC58 loc_AC58:                               ; CODE XREF: build_upper_buffer+53↓j
.text:000000000000AC58                 mov     rdx, [rbp+0]
.text:000000000000AC5C                 mov     rcx, [rbp+78h]
.text:000000000000AC60                 add     rdx, rbx
.text:000000000000AC63                 add     rdx, [rbp+28h]
.text:000000000000AC67                 test    rcx, rcx
.text:000000000000AC6A                 movzx   edx, byte ptr [rdx]
.text:000000000000AC6D                 jnz     short loc_AC98
.text:000000000000AC6F
.text:000000000000AC6F loc_AC6F:                               ; CODE XREF: build_upper_buffer+6C↓j
.text:000000000000AC6F                 mov     rsi, [rax]
.text:000000000000AC72                 mov     rcx, [rbp+8]
.text:000000000000AC76                 mov     edx, [rsi+rdx*4]
.text:000000000000AC79                 mov     [rcx+rbx], dl
.text:000000000000AC7C                 add     rbx, 1
.text:000000000000AC80                 cmp     r12, rbx
.text:000000000000AC83                 jnz     short loc_AC58
.text:000000000000AC85
.text:000000000000AC85 loc_AC85:                               ; CODE XREF: build_upper_buffer+1B↑j
.text:000000000000AC85                 mov     [rbp+30h], rbx
.text:000000000000AC89                 mov     [rbp+38h], rbx
.text:000000000000AC8D                 pop     rbx
.text:000000000000AC8E                 pop     rbp
.text:000000000000AC8F                 pop     r12
.text:000000000000AC91                 retn
.text:000000000000AC91 ; ---------------------------------------------------------------------------
.text:000000000000AC92                 align 8
.text:000000000000AC98
.text:000000000000AC98 loc_AC98:                               ; CODE XREF: build_upper_buffer+3D↑j
.text:000000000000AC98                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000000AC9C                 jmp     short loc_AC6F
.text:000000000000AC9C ; } // starts at AC30
.text:000000000000AC9C build_upper_buffer endp
.text:000000000000AC9C
.text:000000000000AC9C ; ---------------------------------------------------------------------------
.text:000000000000AC9E                 align 20h
.text:000000000000ACA0
.text:000000000000ACA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACA0
.text:000000000000ACA0
.text:000000000000ACA0 build_wcs_buffer proc near              ; CODE XREF: extend_buffers+113↓p
.text:000000000000ACA0                                         ; re_string_reconstruct:loc_E1A8↓p ...
.text:000000000000ACA0
.text:000000000000ACA0 var_8C          = dword ptr -8Ch
.text:000000000000ACA0 var_88          = byte ptr -88h
.text:000000000000ACA0 var_40          = qword ptr -40h
.text:000000000000ACA0
.text:000000000000ACA0 ; __unwind {
.text:000000000000ACA0                 push    r15
.text:000000000000ACA2                 push    r14
.text:000000000000ACA4                 push    r13
.text:000000000000ACA6                 push    r12
.text:000000000000ACA8                 push    rbp
.text:000000000000ACA9                 push    rbx
.text:000000000000ACAA                 mov     rbx, rdi
.text:000000000000ACAD                 sub     rsp, 68h
.text:000000000000ACB1                 mov     r12, [rdi+58h]
.text:000000000000ACB5                 mov     rbp, [rdi+30h]
.text:000000000000ACB9                 mov     rax, fs:28h
.text:000000000000ACC2                 mov     [rsp+98h+var_40], rax
.text:000000000000ACC7                 xor     eax, eax
.text:000000000000ACC9                 cmp     [rdi+40h], r12
.text:000000000000ACCD                 cmovle  r12, [rdi+40h]
.text:000000000000ACD2                 cmp     r12, rbp
.text:000000000000ACD5                 jle     loc_AD64
.text:000000000000ACDB                 lea     r14, [rdi+20h]
.text:000000000000ACDF                 lea     r13, [rsp+98h+var_8C]
.text:000000000000ACE4                 nop     dword ptr [rax+00h]
.text:000000000000ACE8
.text:000000000000ACE8 loc_ACE8:                               ; CODE XREF: build_wcs_buffer+C2↓j
.text:000000000000ACE8                                         ; build_wcs_buffer+F6↓j
.text:000000000000ACE8                 mov     rdi, [rbx+78h]
.text:000000000000ACEC                 mov     rdx, r12
.text:000000000000ACEF                 mov     r15, [rbx+20h]
.text:000000000000ACF3                 sub     rdx, rbp
.text:000000000000ACF6                 test    rdi, rdi
.text:000000000000ACF9                 jnz     loc_ADE0
.text:000000000000ACFF                 mov     rsi, [rbx+28h]
.text:000000000000AD03                 add     rsi, rbp
.text:000000000000AD06                 add     rsi, [rbx]
.text:000000000000AD09
.text:000000000000AD09 loc_AD09:                               ; CODE XREF: build_wcs_buffer+151↓j
.text:000000000000AD09                                         ; build_wcs_buffer+167↓j ...
.text:000000000000AD09                 mov     rcx, r14
.text:000000000000AD0C                 mov     rdi, r13
.text:000000000000AD0F                 call    rpl_mbrtowc
.text:000000000000AD14                 lea     rdx, [rax-1]
.text:000000000000AD18                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:000000000000AD1C                 ja      loc_ADB0
.text:000000000000AD22                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000AD26                 mov     edx, [rsp+98h+var_8C]
.text:000000000000AD2A                 jz      short loc_ADA0
.text:000000000000AD2C
.text:000000000000AD2C loc_AD2C:                               ; CODE XREF: build_wcs_buffer+137↓j
.text:000000000000AD2C                 mov     rcx, [rbx+10h]
.text:000000000000AD30                 lea     rsi, [rbp+1]
.text:000000000000AD34                 lea     rdi, ds:0[rbp*4]
.text:000000000000AD3C                 mov     [rcx+rbp*4], edx
.text:000000000000AD3F                 add     rbp, rax
.text:000000000000AD42                 cmp     rsi, rbp
.text:000000000000AD45                 jge     short loc_AD90
.text:000000000000AD47                 lea     rdx, [rcx+rdi+4]
.text:000000000000AD4C                 lea     rax, [rcx+rbp*4]
.text:000000000000AD50
.text:000000000000AD50 loc_AD50:                               ; CODE XREF: build_wcs_buffer+BD↓j
.text:000000000000AD50                 mov     dword ptr [rdx], 0FFFFFFFFh
.text:000000000000AD56                 add     rdx, 4
.text:000000000000AD5A                 cmp     rax, rdx
.text:000000000000AD5D                 jnz     short loc_AD50
.text:000000000000AD5F                 cmp     rbp, r12
.text:000000000000AD62                 jl      short loc_ACE8
.text:000000000000AD64
.text:000000000000AD64 loc_AD64:                               ; CODE XREF: build_wcs_buffer+35↑j
.text:000000000000AD64                                         ; build_wcs_buffer+FC↓j ...
.text:000000000000AD64                 mov     rax, [rsp+98h+var_40]
.text:000000000000AD69                 xor     rax, fs:28h
.text:000000000000AD72                 mov     [rbx+30h], rbp
.text:000000000000AD76                 mov     [rbx+38h], rbp
.text:000000000000AD7A                 jnz     loc_AE5E
.text:000000000000AD80                 add     rsp, 68h
.text:000000000000AD84                 pop     rbx
.text:000000000000AD85                 pop     rbp
.text:000000000000AD86                 pop     r12
.text:000000000000AD88                 pop     r13
.text:000000000000AD8A                 pop     r14
.text:000000000000AD8C                 pop     r15
.text:000000000000AD8E                 retn
.text:000000000000AD8E ; ---------------------------------------------------------------------------
.text:000000000000AD8F                 align 10h
.text:000000000000AD90
.text:000000000000AD90 loc_AD90:                               ; CODE XREF: build_wcs_buffer+A5↑j
.text:000000000000AD90                 mov     rbp, rsi
.text:000000000000AD93                 cmp     rbp, r12
.text:000000000000AD96                 jl      loc_ACE8
.text:000000000000AD9C                 jmp     short loc_AD64
.text:000000000000AD9C ; ---------------------------------------------------------------------------
.text:000000000000AD9E                 align 20h
.text:000000000000ADA0
.text:000000000000ADA0 loc_ADA0:                               ; CODE XREF: build_wcs_buffer+8A↑j
.text:000000000000ADA0                 mov     rax, [rbx+58h]
.text:000000000000ADA4                 cmp     [rbx+40h], rax
.text:000000000000ADA8                 jl      loc_AE48
.text:000000000000ADAE                 xchg    ax, ax
.text:000000000000ADB0
.text:000000000000ADB0 loc_ADB0:                               ; CODE XREF: build_wcs_buffer+7C↑j
.text:000000000000ADB0                 mov     rax, [rbx]
.text:000000000000ADB3                 mov     rcx, [rbx+78h]
.text:000000000000ADB7                 add     rax, rbp
.text:000000000000ADBA                 add     rax, [rbx+28h]
.text:000000000000ADBE                 test    rcx, rcx
.text:000000000000ADC1                 movzx   edx, byte ptr [rax]
.text:000000000000ADC4                 mov     [rsp+98h+var_8C], edx
.text:000000000000ADC8                 jnz     loc_AE51
.text:000000000000ADCE
.text:000000000000ADCE loc_ADCE:                               ; CODE XREF: build_wcs_buffer+1B9↓j
.text:000000000000ADCE                 mov     [rbx+20h], r15
.text:000000000000ADD2                 mov     eax, 1
.text:000000000000ADD7                 jmp     loc_AD2C
.text:000000000000ADD7 ; ---------------------------------------------------------------------------
.text:000000000000ADDC                 align 20h
.text:000000000000ADE0
.text:000000000000ADE0 loc_ADE0:                               ; CODE XREF: build_wcs_buffer+59↑j
.text:000000000000ADE0                 mov     ecx, [rbx+90h]
.text:000000000000ADE6                 xor     eax, eax
.text:000000000000ADE8                 lea     rsi, [rsp+98h+var_88]
.text:000000000000ADED                 test    ecx, ecx
.text:000000000000ADEF                 jg      short loc_AE11
.text:000000000000ADF1                 jmp     loc_AD09
.text:000000000000ADF1 ; ---------------------------------------------------------------------------
.text:000000000000ADF6                 align 20h
.text:000000000000AE00
.text:000000000000AE00 loc_AE00:                               ; CODE XREF: build_wcs_buffer+19B↓j
.text:000000000000AE00                 add     rax, 1
.text:000000000000AE04                 cmp     rdx, rax
.text:000000000000AE07                 jz      loc_AD09
.text:000000000000AE0D                 mov     rdi, [rbx+78h]
.text:000000000000AE11
.text:000000000000AE11 loc_AE11:                               ; CODE XREF: build_wcs_buffer+14F↑j
.text:000000000000AE11                 mov     rcx, [rbx]
.text:000000000000AE14                 add     rcx, rbp
.text:000000000000AE17                 add     rcx, rax
.text:000000000000AE1A                 add     rcx, [rbx+28h]
.text:000000000000AE1E                 movzx   ecx, byte ptr [rcx]
.text:000000000000AE21                 movzx   ecx, byte ptr [rdi+rcx]
.text:000000000000AE25                 mov     rdi, [rbx+8]
.text:000000000000AE29                 add     rdi, rbp
.text:000000000000AE2C                 mov     [rdi+rax], cl
.text:000000000000AE2F                 mov     [rsi+rax], cl
.text:000000000000AE32                 lea     ecx, [rax+1]
.text:000000000000AE35                 cmp     ecx, [rbx+90h]
.text:000000000000AE3B                 jl      short loc_AE00
.text:000000000000AE3D                 jmp     loc_AD09
.text:000000000000AE3D ; ---------------------------------------------------------------------------
.text:000000000000AE42                 align 8
.text:000000000000AE48
.text:000000000000AE48 loc_AE48:                               ; CODE XREF: build_wcs_buffer+108↑j
.text:000000000000AE48                 mov     [rbx+20h], r15
.text:000000000000AE4C                 jmp     loc_AD64
.text:000000000000AE51 ; ---------------------------------------------------------------------------
.text:000000000000AE51
.text:000000000000AE51 loc_AE51:                               ; CODE XREF: build_wcs_buffer+128↑j
.text:000000000000AE51                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000000AE55                 mov     [rsp+98h+var_8C], edx
.text:000000000000AE59                 jmp     loc_ADCE
.text:000000000000AE5E ; ---------------------------------------------------------------------------
.text:000000000000AE5E
.text:000000000000AE5E loc_AE5E:                               ; CODE XREF: build_wcs_buffer+DA↑j
.text:000000000000AE5E                 call    ___stack_chk_fail
.text:000000000000AE5E ; } // starts at ACA0
.text:000000000000AE5E build_wcs_buffer endp
.text:000000000000AE5E
.text:000000000000AE5E ; ---------------------------------------------------------------------------
.text:000000000000AE63                 align 10h
.text:000000000000AE70
.text:000000000000AE70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE70
.text:000000000000AE70
.text:000000000000AE70 build_wcs_upper_buffer proc near        ; CODE XREF: extend_buffers+95↓j
.text:000000000000AE70                                         ; re_string_reconstruct+12A↓p ...
.text:000000000000AE70
.text:000000000000AE70 var_D0          = qword ptr -0D0h
.text:000000000000AE70 src             = qword ptr -0C8h
.text:000000000000AE70 var_C0          = qword ptr -0C0h
.text:000000000000AE70 var_B8          = qword ptr -0B8h
.text:000000000000AE70 var_B0          = qword ptr -0B0h
.text:000000000000AE70 var_A8          = qword ptr -0A8h
.text:000000000000AE70 var_A0          = qword ptr -0A0h
.text:000000000000AE70 wc              = dword ptr -94h
.text:000000000000AE70 ps              = mbstate_t ptr -90h
.text:000000000000AE70 s               = byte ptr -88h
.text:000000000000AE70 var_40          = qword ptr -40h
.text:000000000000AE70
.text:000000000000AE70 ; __unwind {
.text:000000000000AE70                 push    r15
.text:000000000000AE72                 push    r14
.text:000000000000AE74                 mov     r14, rdi
.text:000000000000AE77                 push    r13
.text:000000000000AE79                 push    r12
.text:000000000000AE7B                 push    rbp
.text:000000000000AE7C                 push    rbx
.text:000000000000AE7D                 sub     rsp, 0A8h
.text:000000000000AE84                 mov     rbx, [rdi+58h]
.text:000000000000AE88                 mov     r15, [rdi+30h]
.text:000000000000AE8C                 mov     rax, fs:28h
.text:000000000000AE95                 mov     [rsp+0D8h+var_40], rax
.text:000000000000AE9D                 xor     eax, eax
.text:000000000000AE9F                 cmp     [rdi+40h], rbx
.text:000000000000AEA3                 cmovle  rbx, [rdi+40h]
.text:000000000000AEA8                 cmp     byte ptr [rdi+8Ah], 0
.text:000000000000AEAF                 jnz     short loc_AEBC
.text:000000000000AEB1                 cmp     qword ptr [rdi+78h], 0
.text:000000000000AEB6                 jz      loc_B040
.text:000000000000AEBC
.text:000000000000AEBC loc_AEBC:                               ; CODE XREF: build_wcs_upper_buffer+3F↑j
.text:000000000000AEBC                                         ; build_wcs_upper_buffer+1D7↓j
.text:000000000000AEBC                 mov     r13, [r14+38h]
.text:000000000000AEC0
.text:000000000000AEC0 loc_AEC0:                               ; CODE XREF: build_wcs_upper_buffer+198↓j
.text:000000000000AEC0                                         ; build_wcs_upper_buffer+1C2↓j ...
.text:000000000000AEC0                 cmp     r15, rbx
.text:000000000000AEC3                 jl      short loc_AF00
.text:000000000000AEC5
.text:000000000000AEC5 loc_AEC5:                               ; CODE XREF: build_wcs_upper_buffer+4D1↓j
.text:000000000000AEC5                 mov     [r14+30h], r15
.text:000000000000AEC9                 mov     [r14+38h], r13
.text:000000000000AECD                 xor     eax, eax
.text:000000000000AECF
.text:000000000000AECF loc_AECF:                               ; CODE XREF: build_wcs_upper_buffer+382↓j
.text:000000000000AECF                                         ; build_wcs_upper_buffer+5EB↓j
.text:000000000000AECF                 mov     rcx, [rsp+0D8h+var_40]
.text:000000000000AED7                 xor     rcx, fs:28h
.text:000000000000AEE0                 jnz     loc_B46A
.text:000000000000AEE6                 add     rsp, 0A8h
.text:000000000000AEED                 pop     rbx
.text:000000000000AEEE                 pop     rbp
.text:000000000000AEEF                 pop     r12
.text:000000000000AEF1                 pop     r13
.text:000000000000AEF3                 pop     r14
.text:000000000000AEF5                 pop     r15
.text:000000000000AEF7                 retn
.text:000000000000AEF7 ; ---------------------------------------------------------------------------
.text:000000000000AEF8                 align 20h
.text:000000000000AF00
.text:000000000000AF00 loc_AF00:                               ; CODE XREF: build_wcs_upper_buffer+53↑j
.text:000000000000AF00                 lea     rax, [r14+20h]
.text:000000000000AF04                 mov     [rsp+0D8h+var_D0], rax
.text:000000000000AF09                 mov     rax, rbx
.text:000000000000AF0C                 sub     rax, r15
.text:000000000000AF0F                 mov     [rsp+0D8h+src], rax
.text:000000000000AF14                 lea     rax, [rsp+0D8h+wc]
.text:000000000000AF19                 mov     [rsp+0D8h+var_B8], rax
.text:000000000000AF1E
.text:000000000000AF1E loc_AF1E:                               ; CODE XREF: build_wcs_upper_buffer+41B↓j
.text:000000000000AF1E                 mov     rdx, [r14+78h]
.text:000000000000AF22                 mov     rax, [r14+20h]
.text:000000000000AF26                 test    rdx, rdx
.text:000000000000AF29                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:000000000000AF2E                 jnz     loc_B239
.text:000000000000AF34                 mov     rbp, [r14+28h]
.text:000000000000AF38                 add     rbp, r13
.text:000000000000AF3B                 add     rbp, [r14]
.text:000000000000AF3E                 mov     [rsp+0D8h+var_C0], rbp
.text:000000000000AF43
.text:000000000000AF43 loc_AF43:                               ; CODE XREF: build_wcs_upper_buffer+410↓j
.text:000000000000AF43                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000000AF48                 mov     rdx, [rsp+0D8h+src]
.text:000000000000AF4D                 mov     rsi, [rsp+0D8h+var_C0]
.text:000000000000AF52                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000000AF57                 call    rpl_mbrtowc
.text:000000000000AF5C                 mov     rbp, rax
.text:000000000000AF5F                 lea     rax, [rax-1]
.text:000000000000AF63                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:000000000000AF67                 mov     [rsp+0D8h+var_B8], rax
.text:000000000000AF6C                 ja      loc_B2A9
.text:000000000000AF72                 mov     edx, [rsp+0D8h+wc]
.text:000000000000AF76                 mov     edi, edx        ; wc
.text:000000000000AF78                 mov     dword ptr [rsp+0D8h+src], edx
.text:000000000000AF7C                 call    _towupper
.text:000000000000AF81                 mov     edx, dword ptr [rsp+0D8h+src]
.text:000000000000AF85                 mov     r12d, eax
.text:000000000000AF88                 mov     [rsp+0D8h+var_D0], r15
.text:000000000000AF8D                 cmp     edx, eax
.text:000000000000AF8F                 jz      loc_B290
.text:000000000000AF95                 lea     rcx, [rsp+0D8h+s]
.text:000000000000AF9A                 lea     rdx, [rsp+0D8h+ps] ; ps
.text:000000000000AF9F                 mov     esi, eax        ; wc
.text:000000000000AFA1                 mov     rdi, rcx        ; s
.text:000000000000AFA4                 mov     [rsp+0D8h+src], rcx
.text:000000000000AFA9                 call    _wcrtomb
.text:000000000000AFAE                 cmp     rbp, rax
.text:000000000000AFB1                 mov     r11, rax
.text:000000000000AFB4                 mov     rcx, [rsp+0D8h+src]
.text:000000000000AFB9                 jnz     loc_B346
.text:000000000000AFBF                 mov     rdi, [r14+8]
.text:000000000000AFC3                 mov     rdx, rbp        ; n
.text:000000000000AFC6                 mov     rsi, rcx        ; src
.text:000000000000AFC9                 add     rdi, r15        ; dest
.text:000000000000AFCC                 call    _memcpy
.text:000000000000AFD1
.text:000000000000AFD1 loc_AFD1:                               ; CODE XREF: build_wcs_upper_buffer+434↓j
.text:000000000000AFD1                 cmp     byte ptr [r14+8Ch], 0
.text:000000000000AFD9                 lea     rax, [rbp+r13+0]
.text:000000000000AFDE                 jnz     loc_B315
.text:000000000000AFE4
.text:000000000000AFE4 loc_AFE4:                               ; CODE XREF: build_wcs_upper_buffer+4C3↓j
.text:000000000000AFE4                 add     r15, 1
.text:000000000000AFE8                 mov     rsi, [rsp+0D8h+var_D0]
.text:000000000000AFED                 mov     rdx, [r14+10h]
.text:000000000000AFF1                 lea     rcx, [r15+rbp-1]
.text:000000000000AFF6                 mov     r13, rax
.text:000000000000AFF9                 cmp     r15, rcx
.text:000000000000AFFC                 lea     rax, ds:0[rsi*4]
.text:000000000000B004                 mov     [rdx+rsi*4], r12d
.text:000000000000B008                 jge     loc_AEC0
.text:000000000000B00E                 lea     rax, [rdx+rax+4]
.text:000000000000B013                 lea     rdx, [rdx+rcx*4]
.text:000000000000B017                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B020
.text:000000000000B020 loc_B020:                               ; CODE XREF: build_wcs_upper_buffer+1BD↓j
.text:000000000000B020                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000B026                 add     rax, 4
.text:000000000000B02A                 cmp     rdx, rax
.text:000000000000B02D                 jnz     short loc_B020
.text:000000000000B02F                 mov     r15, rcx
.text:000000000000B032                 jmp     loc_AEC0
.text:000000000000B032 ; ---------------------------------------------------------------------------
.text:000000000000B037                 align 20h
.text:000000000000B040
.text:000000000000B040 loc_B040:                               ; CODE XREF: build_wcs_upper_buffer+46↑j
.text:000000000000B040                 cmp     byte ptr [rdi+8Ch], 0
.text:000000000000B047                 jnz     loc_AEBC
.text:000000000000B04D                 cmp     r15, rbx
.text:000000000000B050                 jge     loc_B1E8
.text:000000000000B056                 lea     rax, [rdi+20h]
.text:000000000000B05A                 mov     [rsp+0D8h+var_D0], rax
.text:000000000000B05F                 lea     rax, [rsp+0D8h+wc]
.text:000000000000B064                 mov     [rsp+0D8h+var_A8], rax
.text:000000000000B069                 lea     rax, [rsp+0D8h+ps]
.text:000000000000B06E                 mov     [rsp+0D8h+var_A0], rax
.text:000000000000B073                 lea     rax, [rsp+0D8h+s]
.text:000000000000B078                 mov     [rsp+0D8h+var_B0], rax
.text:000000000000B07D                 nop     dword ptr [rax]
.text:000000000000B080
.text:000000000000B080 loc_B080:                               ; CODE XREF: build_wcs_upper_buffer+2FD↓j
.text:000000000000B080                 mov     rbp, [r14+28h]
.text:000000000000B084                 mov     r13, r15
.text:000000000000B087                 add     rbp, r15
.text:000000000000B08A                 add     rbp, [r14]
.text:000000000000B08D                 movzx   r12d, byte ptr [rbp+0]
.text:000000000000B092                 test    r12b, 80h
.text:000000000000B096                 jnz     short loc_B0AA
.text:000000000000B098                 mov     rdi, [rsp+0D8h+var_D0] ; ps
.text:000000000000B09D                 call    _mbsinit
.text:000000000000B0A2                 test    eax, eax
.text:000000000000B0A4                 jnz     loc_B198
.text:000000000000B0AA
.text:000000000000B0AA loc_B0AA:                               ; CODE XREF: build_wcs_upper_buffer+226↑j
.text:000000000000B0AA                 mov     rax, [r14+20h]
.text:000000000000B0AE                 mov     rdi, [rsp+0D8h+var_A8]
.text:000000000000B0B3                 mov     rdx, rbx
.text:000000000000B0B6                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000000B0BB                 sub     rdx, r15
.text:000000000000B0BE                 mov     rsi, rbp
.text:000000000000B0C1                 mov     [rsp+0D8h+src], rdx
.text:000000000000B0C6                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:000000000000B0CB                 mov     [rsp+0D8h+var_B8], rdi
.text:000000000000B0D0                 call    rpl_mbrtowc
.text:000000000000B0D5                 mov     rbp, rax
.text:000000000000B0D8                 lea     rax, [rax-1]
.text:000000000000B0DC                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:000000000000B0E0                 ja      loc_B1C8
.text:000000000000B0E6                 mov     edx, [rsp+0D8h+wc]
.text:000000000000B0EA                 mov     edi, edx        ; wc
.text:000000000000B0EC                 mov     dword ptr [rsp+0D8h+var_C0], edx
.text:000000000000B0F0                 call    _towupper
.text:000000000000B0F5                 mov     edx, dword ptr [rsp+0D8h+var_C0]
.text:000000000000B0F9                 mov     r12d, eax
.text:000000000000B0FC                 cmp     edx, eax
.text:000000000000B0FE                 jz      short loc_B178
.text:000000000000B100                 mov     rdx, [rsp+0D8h+var_A0] ; ps
.text:000000000000B105                 mov     rdi, [rsp+0D8h+var_B0] ; s
.text:000000000000B10A                 mov     esi, eax        ; wc
.text:000000000000B10C                 call    _wcrtomb
.text:000000000000B111                 cmp     rbp, rax
.text:000000000000B114                 jnz     loc_B288
.text:000000000000B11A                 mov     rdi, [r14+8]
.text:000000000000B11E                 mov     rsi, [rsp+0D8h+var_B0] ; src
.text:000000000000B123                 mov     rdx, rbp        ; n
.text:000000000000B126                 add     rdi, r15        ; dest
.text:000000000000B129                 call    _memcpy
.text:000000000000B12E
.text:000000000000B12E loc_B12E:                               ; CODE XREF: build_wcs_upper_buffer+321↓j
.text:000000000000B12E                 add     r15, 1
.text:000000000000B132                 mov     rdx, [r14+10h]
.text:000000000000B136                 lea     rax, ds:0[r13*4]
.text:000000000000B13E                 lea     rcx, [r15+rbp-1]
.text:000000000000B143                 cmp     r15, rcx
.text:000000000000B146                 mov     [rdx+r13*4], r12d
.text:000000000000B14A                 jge     short loc_B16A
.text:000000000000B14C                 lea     rax, [rdx+rax+4]
.text:000000000000B151                 lea     rdx, [rdx+rcx*4]
.text:000000000000B155                 nop     dword ptr [rax]
.text:000000000000B158
.text:000000000000B158 loc_B158:                               ; CODE XREF: build_wcs_upper_buffer+2F5↓j
.text:000000000000B158                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000B15E                 add     rax, 4
.text:000000000000B162                 cmp     rdx, rax
.text:000000000000B165                 jnz     short loc_B158
.text:000000000000B167                 mov     r15, rcx
.text:000000000000B16A
.text:000000000000B16A loc_B16A:                               ; CODE XREF: build_wcs_upper_buffer+2DA↑j
.text:000000000000B16A                                         ; build_wcs_upper_buffer+351↓j ...
.text:000000000000B16A                 cmp     rbx, r15
.text:000000000000B16D                 jg      loc_B080
.text:000000000000B173                 jmp     short loc_B1E8
.text:000000000000B173 ; ---------------------------------------------------------------------------
.text:000000000000B175                 align 8
.text:000000000000B178
.text:000000000000B178 loc_B178:                               ; CODE XREF: build_wcs_upper_buffer+28E↑j
.text:000000000000B178                 mov     rsi, [r14+28h]
.text:000000000000B17C                 mov     rdi, [r14+8]
.text:000000000000B180                 mov     rdx, rbp        ; n
.text:000000000000B183                 add     rsi, r15
.text:000000000000B186                 add     rsi, [r14]      ; src
.text:000000000000B189                 add     rdi, r15        ; dest
.text:000000000000B18C                 call    _memcpy
.text:000000000000B191                 jmp     short loc_B12E
.text:000000000000B191 ; ---------------------------------------------------------------------------
.text:000000000000B193                 align 8
.text:000000000000B198
.text:000000000000B198 loc_B198:                               ; CODE XREF: build_wcs_upper_buffer+234↑j
.text:000000000000B198                 call    ___ctype_toupper_loc
.text:000000000000B19D                 mov     rax, [rax]
.text:000000000000B1A0                 mov     rdx, [r14+8]
.text:000000000000B1A4                 mov     eax, [rax+r12*4]
.text:000000000000B1A8                 mov     [rdx+r15], al
.text:000000000000B1AC                 mov     rdx, [r14+8]
.text:000000000000B1B0                 mov     rax, [r14+10h]
.text:000000000000B1B4                 movzx   edx, byte ptr [rdx+r15]
.text:000000000000B1B9                 mov     [rax+r15*4], edx
.text:000000000000B1BD                 add     r15, 1
.text:000000000000B1C1                 jmp     short loc_B16A
.text:000000000000B1C1 ; ---------------------------------------------------------------------------
.text:000000000000B1C3                 align 8
.text:000000000000B1C8
.text:000000000000B1C8 loc_B1C8:                               ; CODE XREF: build_wcs_upper_buffer+270↑j
.text:000000000000B1C8                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000B1CC                 jnz     short loc_B200
.text:000000000000B1CE                 mov     rax, [r14+58h]
.text:000000000000B1D2                 cmp     [r14+40h], rax
.text:000000000000B1D6                 jge     short loc_B200
.text:000000000000B1D8                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:000000000000B1DD                 mov     [r14+20h], rax
.text:000000000000B1E1                 nop     dword ptr [rax+00000000h]
.text:000000000000B1E8
.text:000000000000B1E8 loc_B1E8:                               ; CODE XREF: build_wcs_upper_buffer+1E0↑j
.text:000000000000B1E8                                         ; build_wcs_upper_buffer+303↑j
.text:000000000000B1E8                 mov     [r14+30h], r15
.text:000000000000B1EC                 mov     [r14+38h], r15
.text:000000000000B1F0                 xor     eax, eax
.text:000000000000B1F2                 jmp     loc_AECF
.text:000000000000B1F2 ; ---------------------------------------------------------------------------
.text:000000000000B1F7                 align 20h
.text:000000000000B200
.text:000000000000B200 loc_B200:                               ; CODE XREF: build_wcs_upper_buffer+35C↑j
.text:000000000000B200                                         ; build_wcs_upper_buffer+366↑j
.text:000000000000B200                 mov     rax, [r14]
.text:000000000000B203                 mov     rdx, [r14+8]
.text:000000000000B207                 add     rax, r15
.text:000000000000B20A                 add     rax, [r14+28h]
.text:000000000000B20E                 movzx   eax, byte ptr [rax]
.text:000000000000B211                 mov     [rdx+r15], al
.text:000000000000B215                 mov     rdx, [r14+10h]
.text:000000000000B219                 add     r15, 1
.text:000000000000B21D                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000B221                 mov     [rdx+r13*4], eax
.text:000000000000B225                 jnz     loc_B16A
.text:000000000000B22B                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:000000000000B230                 mov     [r14+20h], rax
.text:000000000000B234                 jmp     loc_B16A
.text:000000000000B239 ; ---------------------------------------------------------------------------
.text:000000000000B239
.text:000000000000B239 loc_B239:                               ; CODE XREF: build_wcs_upper_buffer+BE↑j
.text:000000000000B239                 mov     eax, [r14+90h]
.text:000000000000B240                 test    eax, eax
.text:000000000000B242                 jle     loc_B460
.text:000000000000B248                 mov     rdi, [r14+28h]
.text:000000000000B24C                 lea     r11d, [rax-1]
.text:000000000000B250                 lea     rcx, [rsp+0D8h+s]
.text:000000000000B255                 xor     eax, eax
.text:000000000000B257                 add     rdi, r13
.text:000000000000B25A                 add     rdi, [r14]
.text:000000000000B25D                 jmp     short loc_B26A
.text:000000000000B25F ; ---------------------------------------------------------------------------
.text:000000000000B25F
.text:000000000000B25F loc_B25F:                               ; CODE XREF: build_wcs_upper_buffer+409↓j
.text:000000000000B25F                 add     rax, 1
.text:000000000000B263                 cmp     [rsp+0D8h+src], rax
.text:000000000000B268                 jz      short loc_B27B
.text:000000000000B26A
.text:000000000000B26A loc_B26A:                               ; CODE XREF: build_wcs_upper_buffer+3ED↑j
.text:000000000000B26A                 movzx   esi, byte ptr [rdi+rax]
.text:000000000000B26E                 cmp     r11, rax
.text:000000000000B271                 movzx   esi, byte ptr [rdx+rsi]
.text:000000000000B275                 mov     [rcx+rax], sil
.text:000000000000B279                 jnz     short loc_B25F
.text:000000000000B27B
.text:000000000000B27B loc_B27B:                               ; CODE XREF: build_wcs_upper_buffer+3F8↑j
.text:000000000000B27B                                         ; build_wcs_upper_buffer+5F5↓j
.text:000000000000B27B                 mov     [rsp+0D8h+var_C0], rcx
.text:000000000000B280                 jmp     loc_AF43
.text:000000000000B280 ; ---------------------------------------------------------------------------
.text:000000000000B285                 align 8
.text:000000000000B288
.text:000000000000B288 loc_B288:                               ; CODE XREF: build_wcs_upper_buffer+2A4↑j
.text:000000000000B288                 mov     r13, r15
.text:000000000000B28B                 jmp     loc_AF1E
.text:000000000000B290 ; ---------------------------------------------------------------------------
.text:000000000000B290
.text:000000000000B290 loc_B290:                               ; CODE XREF: build_wcs_upper_buffer+11F↑j
.text:000000000000B290                                         ; build_wcs_upper_buffer+4DA↓j
.text:000000000000B290                 mov     rdi, [r14+8]
.text:000000000000B294                 mov     rsi, [rsp+0D8h+var_C0] ; src
.text:000000000000B299                 mov     rdx, rbp        ; n
.text:000000000000B29C                 add     rdi, r15        ; dest
.text:000000000000B29F                 call    _memcpy
.text:000000000000B2A4                 jmp     loc_AFD1
.text:000000000000B2A9 ; ---------------------------------------------------------------------------
.text:000000000000B2A9
.text:000000000000B2A9 loc_B2A9:                               ; CODE XREF: build_wcs_upper_buffer+FC↑j
.text:000000000000B2A9                 cmp     [rsp+0D8h+var_B8], 0FFFFFFFFFFFFFFFDh
.text:000000000000B2AF                 jnz     short loc_B2BB
.text:000000000000B2B1                 mov     rax, [r14+58h]
.text:000000000000B2B5                 cmp     [r14+40h], rax
.text:000000000000B2B9                 jl      short loc_B338
.text:000000000000B2BB
.text:000000000000B2BB loc_B2BB:                               ; CODE XREF: build_wcs_upper_buffer+43F↑j
.text:000000000000B2BB                 mov     rax, [r14]
.text:000000000000B2BE                 mov     rdx, [r14+78h]
.text:000000000000B2C2                 add     rax, r13
.text:000000000000B2C5                 add     rax, [r14+28h]
.text:000000000000B2C9                 test    rdx, rdx
.text:000000000000B2CC                 movzx   eax, byte ptr [rax]
.text:000000000000B2CF                 jnz     loc_B47C
.text:000000000000B2D5
.text:000000000000B2D5 loc_B2D5:                               ; CODE XREF: build_wcs_upper_buffer+610↓j
.text:000000000000B2D5                 mov     rdx, [r14+8]
.text:000000000000B2D9                 mov     rcx, r15
.text:000000000000B2DC                 mov     [rdx+r15], al
.text:000000000000B2E0                 cmp     byte ptr [r14+8Ch], 0
.text:000000000000B2E8                 jnz     loc_B46F
.text:000000000000B2EE
.text:000000000000B2EE loc_B2EE:                               ; CODE XREF: build_wcs_upper_buffer+607↓j
.text:000000000000B2EE                 mov     rdx, [r14+10h]
.text:000000000000B2F2                 add     r13, 1
.text:000000000000B2F6                 add     r15, 1
.text:000000000000B2FA                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000B2FE                 mov     [rdx+rcx*4], eax
.text:000000000000B301                 jnz     loc_AEC0
.text:000000000000B307                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:000000000000B30C                 mov     [r14+20h], rax
.text:000000000000B310                 jmp     loc_AEC0
.text:000000000000B315 ; ---------------------------------------------------------------------------
.text:000000000000B315
.text:000000000000B315 loc_B315:                               ; CODE XREF: build_wcs_upper_buffer+16E↑j
.text:000000000000B315                 mov     rdx, [r14+18h]
.text:000000000000B319                 mov     rcx, r15
.text:000000000000B31C                 mov     r10, r13
.text:000000000000B31F                 sub     rcx, r13
.text:000000000000B322                 lea     rdx, [rdx+rcx*8]
.text:000000000000B326
.text:000000000000B326 loc_B326:                               ; CODE XREF: build_wcs_upper_buffer+4C1↓j
.text:000000000000B326                 mov     [rdx+r10*8], r10
.text:000000000000B32A                 add     r10, 1
.text:000000000000B32E                 cmp     rax, r10
.text:000000000000B331                 jnz     short loc_B326
.text:000000000000B333                 jmp     loc_AFE4
.text:000000000000B338 ; ---------------------------------------------------------------------------
.text:000000000000B338
.text:000000000000B338 loc_B338:                               ; CODE XREF: build_wcs_upper_buffer+449↑j
.text:000000000000B338                                         ; build_wcs_upper_buffer+4F3↓j
.text:000000000000B338                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:000000000000B33D                 mov     [r14+20h], rax
.text:000000000000B341                 jmp     loc_AEC5
.text:000000000000B346 ; ---------------------------------------------------------------------------
.text:000000000000B346
.text:000000000000B346 loc_B346:                               ; CODE XREF: build_wcs_upper_buffer+149↑j
.text:000000000000B346                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B34A                 jz      loc_B290
.text:000000000000B350                 lea     rax, [rax+r15]
.text:000000000000B354                 mov     rsi, rax
.text:000000000000B357                 mov     [rsp+0D8h+var_D0], rax
.text:000000000000B35C                 mov     rax, [r14+40h]
.text:000000000000B360                 cmp     rsi, rax
.text:000000000000B363                 ja      short loc_B338
.text:000000000000B365                 cmp     qword ptr [r14+18h], 0
.text:000000000000B36A                 jz      loc_B428
.text:000000000000B370
.text:000000000000B370 loc_B370:                               ; CODE XREF: build_wcs_upper_buffer+5E0↓j
.text:000000000000B370                 cmp     byte ptr [r14+8Ch], 0
.text:000000000000B378                 jnz     short loc_B39A
.text:000000000000B37A                 test    r15, r15
.text:000000000000B37D                 jz      short loc_B392
.text:000000000000B37F                 mov     rdx, [r14+18h]
.text:000000000000B383                 xor     eax, eax
.text:000000000000B385
.text:000000000000B385 loc_B385:                               ; CODE XREF: build_wcs_upper_buffer+520↓j
.text:000000000000B385                 mov     [rdx+rax*8], rax
.text:000000000000B389                 add     rax, 1
.text:000000000000B38D                 cmp     rax, r15
.text:000000000000B390                 jnz     short loc_B385
.text:000000000000B392
.text:000000000000B392 loc_B392:                               ; CODE XREF: build_wcs_upper_buffer+50D↑j
.text:000000000000B392                 mov     byte ptr [r14+8Ch], 1
.text:000000000000B39A
.text:000000000000B39A loc_B39A:                               ; CODE XREF: build_wcs_upper_buffer+508↑j
.text:000000000000B39A                 mov     rdi, [r14+8]
.text:000000000000B39E                 mov     rsi, rcx        ; src
.text:000000000000B3A1                 mov     rdx, r11        ; n
.text:000000000000B3A4                 mov     [rsp+0D8h+src], r11
.text:000000000000B3A9                 add     rdi, r15        ; dest
.text:000000000000B3AC                 call    _memcpy
.text:000000000000B3B1                 mov     rax, [r14+10h]
.text:000000000000B3B5                 mov     r11, [rsp+0D8h+src]
.text:000000000000B3BA                 lea     rcx, [rax+r15*4]
.text:000000000000B3BE                 mov     rax, [r14+18h]
.text:000000000000B3C2                 cmp     r11, 1
.text:000000000000B3C6                 mov     [rcx], r12d
.text:000000000000B3C9                 lea     rsi, [rax+r15*8]
.text:000000000000B3CD                 mov     [rsi], r13
.text:000000000000B3D0                 jbe     short loc_B3FA
.text:000000000000B3D2                 mov     eax, 1
.text:000000000000B3D7
.text:000000000000B3D7 loc_B3D7:                               ; CODE XREF: build_wcs_upper_buffer+588↓j
.text:000000000000B3D7                 mov     rdx, [rsp+0D8h+var_B8]
.text:000000000000B3DC                 cmp     rax, rbp
.text:000000000000B3DF                 cmovb   rdx, rax
.text:000000000000B3E3                 add     rdx, r13
.text:000000000000B3E6                 mov     [rsi+rax*8], rdx
.text:000000000000B3EA                 mov     dword ptr [rcx+rax*4], 0FFFFFFFFh
.text:000000000000B3F1                 add     rax, 1
.text:000000000000B3F5                 cmp     rax, r11
.text:000000000000B3F8                 jnz     short loc_B3D7
.text:000000000000B3FA
.text:000000000000B3FA loc_B3FA:                               ; CODE XREF: build_wcs_upper_buffer+560↑j
.text:000000000000B3FA                 mov     rbx, [r14+58h]
.text:000000000000B3FE                 sub     r11, rbp
.text:000000000000B401                 add     rbx, r11
.text:000000000000B404                 cmp     r13, [r14+60h]
.text:000000000000B408                 mov     [r14+58h], rbx
.text:000000000000B40C                 jge     short loc_B412
.text:000000000000B40E                 add     [r14+68h], r11
.text:000000000000B412
.text:000000000000B412 loc_B412:                               ; CODE XREF: build_wcs_upper_buffer+59C↑j
.text:000000000000B412                 cmp     [r14+40h], rbx
.text:000000000000B416                 mov     r15, [rsp+0D8h+var_D0]
.text:000000000000B41B                 cmovle  rbx, [r14+40h]
.text:000000000000B420                 add     r13, rbp
.text:000000000000B423                 jmp     loc_AEC0
.text:000000000000B428 ; ---------------------------------------------------------------------------
.text:000000000000B428
.text:000000000000B428 loc_B428:                               ; CODE XREF: build_wcs_upper_buffer+4FA↑j
.text:000000000000B428                 lea     rdi, ds:0[rax*8] ; size
.text:000000000000B430                 mov     [rsp+0D8h+var_C0], rcx
.text:000000000000B435                 mov     [rsp+0D8h+src], r11
.text:000000000000B43A                 call    _malloc
.text:000000000000B43F                 test    rax, rax
.text:000000000000B442                 mov     [r14+18h], rax
.text:000000000000B446                 mov     r11, [rsp+0D8h+src]
.text:000000000000B44B                 mov     rcx, [rsp+0D8h+var_C0]
.text:000000000000B450                 jnz     loc_B370
.text:000000000000B456                 mov     eax, 0Ch
.text:000000000000B45B                 jmp     loc_AECF
.text:000000000000B460 ; ---------------------------------------------------------------------------
.text:000000000000B460
.text:000000000000B460 loc_B460:                               ; CODE XREF: build_wcs_upper_buffer+3D2↑j
.text:000000000000B460                 lea     rcx, [rsp+0D8h+s]
.text:000000000000B465                 jmp     loc_B27B
.text:000000000000B46A ; ---------------------------------------------------------------------------
.text:000000000000B46A
.text:000000000000B46A loc_B46A:                               ; CODE XREF: build_wcs_upper_buffer+70↑j
.text:000000000000B46A                 call    ___stack_chk_fail
.text:000000000000B46F ; ---------------------------------------------------------------------------
.text:000000000000B46F
.text:000000000000B46F loc_B46F:                               ; CODE XREF: build_wcs_upper_buffer+478↑j
.text:000000000000B46F                 mov     rdx, [r14+18h]
.text:000000000000B473                 mov     [rdx+r15*8], r13
.text:000000000000B477                 jmp     loc_B2EE
.text:000000000000B47C ; ---------------------------------------------------------------------------
.text:000000000000B47C
.text:000000000000B47C loc_B47C:                               ; CODE XREF: build_wcs_upper_buffer+45F↑j
.text:000000000000B47C                 movzx   eax, byte ptr [rdx+rax]
.text:000000000000B480                 jmp     loc_B2D5
.text:000000000000B480 ; } // starts at AE70
.text:000000000000B480 build_wcs_upper_buffer endp
.text:000000000000B480
.text:000000000000B480 ; ---------------------------------------------------------------------------
.text:000000000000B485                 align 10h
.text:000000000000B490
.text:000000000000B490 ; =============== S U B R O U T I N E =======================================
.text:000000000000B490
.text:000000000000B490
.text:000000000000B490 extend_buffers  proc near               ; CODE XREF: clean_state_log_if_needed+26↓p
.text:000000000000B490                                         ; clean_state_log_if_needed+55↓p ...
.text:000000000000B490 ; __unwind {
.text:000000000000B490                 push    rbp
.text:000000000000B491                 push    rbx
.text:000000000000B492                 mov     rdx, 0FFFFFFFFFFFFFFEh
.text:000000000000B49C                 sub     rsp, 8
.text:000000000000B4A0                 mov     rax, [rdi+40h]
.text:000000000000B4A4                 cmp     rax, rdx
.text:000000000000B4A7                 ja      loc_B5B8
.text:000000000000B4AD                 mov     rdx, [rdi+58h]
.text:000000000000B4B1                 add     rax, rax
.text:000000000000B4B4                 movsxd  rsi, esi
.text:000000000000B4B7                 mov     rbx, rdi
.text:000000000000B4BA                 cmp     rax, rdx
.text:000000000000B4BD                 cmovg   rax, rdx
.text:000000000000B4C1                 cmp     rax, rsi
.text:000000000000B4C4                 cmovge  rsi, rax
.text:000000000000B4C8                 call    re_string_realloc_buffers
.text:000000000000B4CD                 test    eax, eax
.text:000000000000B4CF                 mov     ebp, eax
.text:000000000000B4D1                 jnz     loc_B58D
.text:000000000000B4D7                 mov     rdi, [rbx+0B8h] ; ptr
.text:000000000000B4DE                 test    rdi, rdi
.text:000000000000B4E1                 jz      short loc_B504
.text:000000000000B4E3                 mov     rax, [rbx+40h]
.text:000000000000B4E7                 lea     rsi, ds:8[rax*8] ; size
.text:000000000000B4EF                 call    _realloc
.text:000000000000B4F4                 test    rax, rax
.text:000000000000B4F7                 jz      loc_B5B8
.text:000000000000B4FD                 mov     [rbx+0B8h], rax
.text:000000000000B504
.text:000000000000B504 loc_B504:                               ; CODE XREF: extend_buffers+51↑j
.text:000000000000B504                 cmp     byte ptr [rbx+88h], 0
.text:000000000000B50B                 mov     eax, [rbx+90h]
.text:000000000000B511                 jz      short loc_B530
.text:000000000000B513                 cmp     eax, 1
.text:000000000000B516                 mov     rdi, rbx
.text:000000000000B519                 jle     loc_B5D0
.text:000000000000B51F                 add     rsp, 8
.text:000000000000B523                 pop     rbx
.text:000000000000B524                 pop     rbp
.text:000000000000B525                 jmp     build_wcs_upper_buffer
.text:000000000000B525 ; ---------------------------------------------------------------------------
.text:000000000000B52A                 align 10h
.text:000000000000B530
.text:000000000000B530 loc_B530:                               ; CODE XREF: extend_buffers+81↑j
.text:000000000000B530                 cmp     eax, 1
.text:000000000000B533                 jg      short loc_B5A0
.text:000000000000B535                 mov     rcx, [rbx+78h]
.text:000000000000B539                 test    rcx, rcx
.text:000000000000B53C                 jz      short loc_B58D
.text:000000000000B53E                 mov     rsi, [rbx+58h]
.text:000000000000B542                 cmp     [rbx+40h], rsi
.text:000000000000B546                 cmovle  rsi, [rbx+40h]
.text:000000000000B54B                 mov     rax, [rbx+30h]
.text:000000000000B54F                 cmp     rsi, rax
.text:000000000000B552                 jg      short loc_B564
.text:000000000000B554                 jmp     short loc_B585
.text:000000000000B554 ; ---------------------------------------------------------------------------
.text:000000000000B556                 align 20h
.text:000000000000B560
.text:000000000000B560 loc_B560:                               ; CODE XREF: extend_buffers+F3↓j
.text:000000000000B560                 mov     rcx, [rbx+78h]
.text:000000000000B564
.text:000000000000B564 loc_B564:                               ; CODE XREF: extend_buffers+C2↑j
.text:000000000000B564                 mov     rdx, [rbx]
.text:000000000000B567                 add     rdx, rax
.text:000000000000B56A                 add     rdx, [rbx+28h]
.text:000000000000B56E                 movzx   edx, byte ptr [rdx]
.text:000000000000B571                 movzx   ecx, byte ptr [rcx+rdx]
.text:000000000000B575                 mov     rdx, [rbx+8]
.text:000000000000B579                 mov     [rdx+rax], cl
.text:000000000000B57C                 add     rax, 1
.text:000000000000B580                 cmp     rsi, rax
.text:000000000000B583                 jnz     short loc_B560
.text:000000000000B585
.text:000000000000B585 loc_B585:                               ; CODE XREF: extend_buffers+C4↑j
.text:000000000000B585                 mov     [rbx+30h], rax
.text:000000000000B589                 mov     [rbx+38h], rax
.text:000000000000B58D
.text:000000000000B58D loc_B58D:                               ; CODE XREF: extend_buffers+41↑j
.text:000000000000B58D                                         ; extend_buffers+AC↑j
.text:000000000000B58D                 add     rsp, 8
.text:000000000000B591                 mov     eax, ebp
.text:000000000000B593                 pop     rbx
.text:000000000000B594                 pop     rbp
.text:000000000000B595                 retn
.text:000000000000B595 ; ---------------------------------------------------------------------------
.text:000000000000B596                 align 20h
.text:000000000000B5A0
.text:000000000000B5A0 loc_B5A0:                               ; CODE XREF: extend_buffers+A3↑j
.text:000000000000B5A0                 mov     rdi, rbx
.text:000000000000B5A3                 call    build_wcs_buffer
.text:000000000000B5A8                 add     rsp, 8
.text:000000000000B5AC                 mov     eax, ebp
.text:000000000000B5AE                 pop     rbx
.text:000000000000B5AF                 pop     rbp
.text:000000000000B5B0                 retn
.text:000000000000B5B0 ; ---------------------------------------------------------------------------
.text:000000000000B5B1                 align 8
.text:000000000000B5B8
.text:000000000000B5B8 loc_B5B8:                               ; CODE XREF: extend_buffers+17↑j
.text:000000000000B5B8                                         ; extend_buffers+67↑j
.text:000000000000B5B8                 mov     ebp, 0Ch
.text:000000000000B5BD                 add     rsp, 8
.text:000000000000B5C1                 mov     eax, ebp
.text:000000000000B5C3                 pop     rbx
.text:000000000000B5C4                 pop     rbp
.text:000000000000B5C5                 retn
.text:000000000000B5C5 ; ---------------------------------------------------------------------------
.text:000000000000B5C6                 align 10h
.text:000000000000B5D0
.text:000000000000B5D0 loc_B5D0:                               ; CODE XREF: extend_buffers+89↑j
.text:000000000000B5D0                 call    build_upper_buffer
.text:000000000000B5D5                 add     rsp, 8
.text:000000000000B5D9                 mov     eax, ebp
.text:000000000000B5DB                 pop     rbx
.text:000000000000B5DC                 pop     rbp
.text:000000000000B5DD                 retn
.text:000000000000B5DD ; } // starts at B490
.text:000000000000B5DD extend_buffers  endp
.text:000000000000B5DD
.text:000000000000B5DD ; ---------------------------------------------------------------------------
.text:000000000000B5DE                 align 20h
.text:000000000000B5E0
.text:000000000000B5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5E0
.text:000000000000B5E0
.text:000000000000B5E0 clean_state_log_if_needed proc near     ; CODE XREF: get_subexp_sub_isra_32+F4↓j
.text:000000000000B5E0                                         ; transit_state_bkref_isra_34+330↓p ...
.text:000000000000B5E0 ; __unwind {
.text:000000000000B5E0                 push    r12
.text:000000000000B5E2                 push    rbp
.text:000000000000B5E3                 mov     rbp, rsi
.text:000000000000B5E6                 push    rbx
.text:000000000000B5E7                 mov     rax, [rdi+40h]
.text:000000000000B5EB                 mov     rbx, rdi
.text:000000000000B5EE                 mov     r12, [rdi+0C0h]
.text:000000000000B5F5                 cmp     rax, rsi
.text:000000000000B5F8                 jg      short loc_B620
.text:000000000000B5FA                 cmp     rax, [rdi+58h]
.text:000000000000B5FE                 jge     short loc_B620
.text:000000000000B600                 lea     esi, [rbp+1]
.text:000000000000B603                 mov     rdi, rbx
.text:000000000000B606                 call    extend_buffers
.text:000000000000B60B                 test    eax, eax
.text:000000000000B60D                 jnz     short loc_B616
.text:000000000000B60F
.text:000000000000B60F loc_B60F:                               ; CODE XREF: clean_state_log_if_needed+47↓j
.text:000000000000B60F                                         ; clean_state_log_if_needed+4D↓j ...
.text:000000000000B60F                 cmp     r12, rbp
.text:000000000000B612                 jl      short loc_B640
.text:000000000000B614
.text:000000000000B614 loc_B614:                               ; CODE XREF: clean_state_log_if_needed+84↓j
.text:000000000000B614                 xor     eax, eax
.text:000000000000B616
.text:000000000000B616 loc_B616:                               ; CODE XREF: clean_state_log_if_needed+2D↑j
.text:000000000000B616                                         ; clean_state_log_if_needed+5E↓j
.text:000000000000B616                 pop     rbx
.text:000000000000B617                 pop     rbp
.text:000000000000B618                 pop     r12
.text:000000000000B61A                 retn
.text:000000000000B61A ; ---------------------------------------------------------------------------
.text:000000000000B61B                 align 20h
.text:000000000000B620
.text:000000000000B620 loc_B620:                               ; CODE XREF: clean_state_log_if_needed+18↑j
.text:000000000000B620                                         ; clean_state_log_if_needed+1E↑j
.text:000000000000B620                 mov     rax, [rbx+30h]
.text:000000000000B624                 cmp     rax, rbp
.text:000000000000B627                 jg      short loc_B60F
.text:000000000000B629                 cmp     rax, [rbx+58h]
.text:000000000000B62D                 jge     short loc_B60F
.text:000000000000B62F                 lea     esi, [rbp+1]
.text:000000000000B632                 mov     rdi, rbx
.text:000000000000B635                 call    extend_buffers
.text:000000000000B63A                 test    eax, eax
.text:000000000000B63C                 jz      short loc_B60F
.text:000000000000B63E                 jmp     short loc_B616
.text:000000000000B640 ; ---------------------------------------------------------------------------
.text:000000000000B640
.text:000000000000B640 loc_B640:                               ; CODE XREF: clean_state_log_if_needed+32↑j
.text:000000000000B640                 mov     rax, [rbx+0B8h]
.text:000000000000B647                 mov     rdx, rbp
.text:000000000000B64A                 xor     esi, esi        ; c
.text:000000000000B64C                 sub     rdx, r12
.text:000000000000B64F                 shl     rdx, 3          ; n
.text:000000000000B653                 lea     rdi, [rax+r12*8+8] ; s
.text:000000000000B658                 call    _memset
.text:000000000000B65D                 mov     [rbx+0C0h], rbp
.text:000000000000B664                 jmp     short loc_B614
.text:000000000000B664 ; } // starts at B5E0
.text:000000000000B664 clean_state_log_if_needed endp
.text:000000000000B664
.text:000000000000B664 ; ---------------------------------------------------------------------------
.text:000000000000B666                 align 10h
.text:000000000000B670
.text:000000000000B670 ; =============== S U B R O U T I N E =======================================
.text:000000000000B670
.text:000000000000B670 ; Attributes: info_from_lumina
.text:000000000000B670
.text:000000000000B670 ; isl_union_flow_0 *__fastcall isl_union_flow_free_0(isl_union_flow_0 *flow)
.text:000000000000B670 isl_union_flow_free_0 proc near         ; CODE XREF: free_token+23↓j
.text:000000000000B670                                         ; build_charclass_op+1F3↓p ...
.text:000000000000B670 ; __unwind {
.text:000000000000B670                 push    rbx
.text:000000000000B671                 mov     rbx, rdi
.text:000000000000B674                 mov     rdi, [rdi]      ; ptr
.text:000000000000B677                 call    _free
.text:000000000000B67C                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000B680                 call    _free
.text:000000000000B685                 mov     rdi, [rbx+10h]  ; ptr
.text:000000000000B689                 call    _free
.text:000000000000B68E                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000B692                 call    _free
.text:000000000000B697                 mov     rdi, rbx        ; ptr
.text:000000000000B69A                 pop     rbx
.text:000000000000B69B                 jmp     _free
.text:000000000000B69B ; } // starts at B670
.text:000000000000B69B isl_union_flow_free_0 endp
.text:000000000000B69B
.text:000000000000B6A0
.text:000000000000B6A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6A0
.text:000000000000B6A0
.text:000000000000B6A0 free_token      proc near               ; CODE XREF: free_tree+8↓p
.text:000000000000B6A0                                         ; free_dfa_content+32↓p
.text:000000000000B6A0 ; __unwind {
.text:000000000000B6A0                 mov     eax, [rdi+8]
.text:000000000000B6A3                 and     eax, 400FFh
.text:000000000000B6A8                 cmp     eax, 6
.text:000000000000B6AB                 jz      short loc_B6C0
.text:000000000000B6AD                 cmp     eax, 3
.text:000000000000B6B0                 jz      short loc_B6B8
.text:000000000000B6B2                 rep retn
.text:000000000000B6B2 ; ---------------------------------------------------------------------------
.text:000000000000B6B4                 align 8
.text:000000000000B6B8
.text:000000000000B6B8 loc_B6B8:                               ; CODE XREF: free_token+10↑j
.text:000000000000B6B8                 mov     rdi, [rdi]      ; ptr
.text:000000000000B6BB                 jmp     _free
.text:000000000000B6C0 ; ---------------------------------------------------------------------------
.text:000000000000B6C0
.text:000000000000B6C0 loc_B6C0:                               ; CODE XREF: free_token+B↑j
.text:000000000000B6C0                 mov     rdi, [rdi]      ; ptr
.text:000000000000B6C3                 jmp     short isl_union_flow_free_0
.text:000000000000B6C3 ; } // starts at B6A0
.text:000000000000B6C3 free_token      endp
.text:000000000000B6C3
.text:000000000000B6C3 ; ---------------------------------------------------------------------------
.text:000000000000B6C5                 align 10h
.text:000000000000B6D0
.text:000000000000B6D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6D0
.text:000000000000B6D0
.text:000000000000B6D0 free_tree       proc near               ; DATA XREF: parse_expression+E1↓o
.text:000000000000B6D0                                         ; parse_expression+38C↓o ...
.text:000000000000B6D0 ; __unwind {
.text:000000000000B6D0                 lea     rdi, [rsi+28h]
.text:000000000000B6D4                 sub     rsp, 8
.text:000000000000B6D8                 call    free_token
.text:000000000000B6DD                 xor     eax, eax
.text:000000000000B6DF                 add     rsp, 8
.text:000000000000B6E3                 retn
.text:000000000000B6E3 ; } // starts at B6D0
.text:000000000000B6E3 free_tree       endp
.text:000000000000B6E3
.text:000000000000B6E3 ; ---------------------------------------------------------------------------
.text:000000000000B6E4                 align 10h
.text:000000000000B6F0
.text:000000000000B6F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6F0
.text:000000000000B6F0
.text:000000000000B6F0 re_dfa_add_node proc near               ; CODE XREF: duplicate_node+26↓p
.text:000000000000B6F0                                         ; calc_first+1E↓p
.text:000000000000B6F0
.text:000000000000B6F0 ptr             = qword ptr -48h
.text:000000000000B6F0 var_40          = qword ptr -40h
.text:000000000000B6F0
.text:000000000000B6F0 ; __unwind {
.text:000000000000B6F0                 push    r15
.text:000000000000B6F2                 push    r14
.text:000000000000B6F4                 mov     r14, rsi
.text:000000000000B6F7                 push    r13
.text:000000000000B6F9                 push    r12
.text:000000000000B6FB                 push    rbp
.text:000000000000B6FC                 push    rbx
.text:000000000000B6FD                 mov     rbx, rdi
.text:000000000000B700                 sub     rsp, 18h
.text:000000000000B704                 mov     rsi, [rdi+10h]
.text:000000000000B708                 mov     rbp, [rdi+8]
.text:000000000000B70C                 cmp     rsi, rbp
.text:000000000000B70F                 jnb     loc_B7C0
.text:000000000000B715                 mov     r12, [rdi+18h]
.text:000000000000B719                 mov     rbp, [rdi+28h]
.text:000000000000B71D
.text:000000000000B71D loc_B71D:                               ; CODE XREF: re_dfa_add_node+187↓j
.text:000000000000B71D                 mov     rax, rsi
.text:000000000000B720                 mov     ecx, edx
.text:000000000000B722                 shl     rax, 4
.text:000000000000B726                 add     rax, [rbx]
.text:000000000000B729                 and     ecx, 0FFFC00FFh
.text:000000000000B72F                 mov     [rax+8], rdx
.text:000000000000B733                 mov     [rax+8], ecx
.text:000000000000B736                 xor     ecx, ecx
.text:000000000000B738                 cmp     dl, 6
.text:000000000000B73B                 mov     [rax], r14
.text:000000000000B73E                 setz    cl
.text:000000000000B741                 cmp     dl, 5
.text:000000000000B744                 jnz     short loc_B752
.text:000000000000B746                 xor     ecx, ecx
.text:000000000000B748                 cmp     dword ptr [rbx+0B4h], 1
.text:000000000000B74F                 setnle  cl
.text:000000000000B752
.text:000000000000B752 loc_B752:                               ; CODE XREF: re_dfa_add_node+54↑j
.text:000000000000B752                 movzx   edx, byte ptr [rax+0Ah]
.text:000000000000B756                 shl     ecx, 4
.text:000000000000B759                 pxor    xmm0, xmm0
.text:000000000000B75D                 and     edx, 0FFFFFFEFh
.text:000000000000B760                 or      edx, ecx
.text:000000000000B762                 mov     [rax+0Ah], dl
.text:000000000000B765                 mov     qword ptr [r12+rsi*8], 0FFFFFFFFFFFFFFFFh
.text:000000000000B76D                 mov     rax, [rbx+10h]
.text:000000000000B771                 lea     rax, [rax+rax*2]
.text:000000000000B775                 lea     rax, [rbp+rax*8+0]
.text:000000000000B77A                 movups  xmmword ptr [rax], xmm0
.text:000000000000B77D                 mov     qword ptr [rax+10h], 0
.text:000000000000B785                 mov     rax, [rbx+10h]
.text:000000000000B789                 lea     rdx, [rax+rax*2]
.text:000000000000B78D                 mov     rax, [rbx+30h]
.text:000000000000B791                 lea     rax, [rax+rdx*8]
.text:000000000000B795                 movups  xmmword ptr [rax], xmm0
.text:000000000000B798                 mov     qword ptr [rax+10h], 0
.text:000000000000B7A0                 mov     rax, [rbx+10h]
.text:000000000000B7A4                 lea     rdx, [rax+1]
.text:000000000000B7A8                 mov     [rbx+10h], rdx
.text:000000000000B7AC
.text:000000000000B7AC loc_B7AC:                               ; CODE XREF: re_dfa_add_node+1C9↓j
.text:000000000000B7AC                 add     rsp, 18h
.text:000000000000B7B0                 pop     rbx
.text:000000000000B7B1                 pop     rbp
.text:000000000000B7B2                 pop     r12
.text:000000000000B7B4                 pop     r13
.text:000000000000B7B6                 pop     r14
.text:000000000000B7B8                 pop     r15
.text:000000000000B7BA                 retn
.text:000000000000B7BA ; ---------------------------------------------------------------------------
.text:000000000000B7BB                 align 20h
.text:000000000000B7C0
.text:000000000000B7C0 loc_B7C0:                               ; CODE XREF: re_dfa_add_node+1F↑j
.text:000000000000B7C0                 lea     r13, [rbp+rbp+0]
.text:000000000000B7C5                 mov     rax, 0AAAAAAAAAAAAAAAh
.text:000000000000B7CF                 cmp     r13, rax
.text:000000000000B7D2                 ja      loc_B8B2
.text:000000000000B7D8                 mov     rdi, [rdi]      ; ptr
.text:000000000000B7DB                 mov     rsi, rbp
.text:000000000000B7DE                 mov     [rsp+48h+var_40], rdx
.text:000000000000B7E3                 shl     rsi, 5          ; size
.text:000000000000B7E7                 call    _realloc
.text:000000000000B7EC                 test    rax, rax
.text:000000000000B7EF                 jz      loc_B8B2
.text:000000000000B7F5                 mov     r15, rbp
.text:000000000000B7F8                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000B7FC                 mov     [rbx], rax
.text:000000000000B7FF                 shl     r15, 4
.text:000000000000B803                 mov     rsi, r15        ; size
.text:000000000000B806                 call    _realloc
.text:000000000000B80B                 mov     rdi, [rbx+20h]  ; ptr
.text:000000000000B80F                 mov     rsi, r15        ; size
.text:000000000000B812                 lea     r15, [r13+rbp*4+0]
.text:000000000000B817                 mov     r12, rax
.text:000000000000B81A                 shl     r15, 3
.text:000000000000B81E                 call    _realloc
.text:000000000000B823                 mov     rdi, [rbx+28h]  ; ptr
.text:000000000000B827                 mov     rsi, r15        ; size
.text:000000000000B82A                 mov     [rsp+48h+ptr], rax
.text:000000000000B82E                 call    _realloc
.text:000000000000B833                 mov     rdi, [rbx+30h]  ; ptr
.text:000000000000B837                 mov     rsi, r15        ; size
.text:000000000000B83A                 mov     rbp, rax
.text:000000000000B83D                 call    _realloc
.text:000000000000B842                 test    r12, r12
.text:000000000000B845                 mov     rcx, [rsp+48h+ptr]
.text:000000000000B849                 jz      short loc_B880
.text:000000000000B84B                 test    rcx, rcx
.text:000000000000B84E                 jz      short loc_B880
.text:000000000000B850                 test    rbp, rbp
.text:000000000000B853                 jz      short loc_B880
.text:000000000000B855                 test    rax, rax
.text:000000000000B858                 mov     rdx, [rsp+48h+var_40]
.text:000000000000B85D                 jz      short loc_B880
.text:000000000000B85F                 mov     [rbx+18h], r12
.text:000000000000B863                 mov     [rbx+20h], rcx
.text:000000000000B867                 mov     [rbx+28h], rbp
.text:000000000000B86B                 mov     [rbx+30h], rax
.text:000000000000B86F                 mov     [rbx+8], r13
.text:000000000000B873                 mov     rsi, [rbx+10h]
.text:000000000000B877                 jmp     loc_B71D
.text:000000000000B877 ; ---------------------------------------------------------------------------
.text:000000000000B87C                 align 20h
.text:000000000000B880
.text:000000000000B880 loc_B880:                               ; CODE XREF: re_dfa_add_node+159↑j
.text:000000000000B880                                         ; re_dfa_add_node+15E↑j ...
.text:000000000000B880                 mov     rdi, r12        ; ptr
.text:000000000000B883                 mov     [rsp+48h+var_40], rax
.text:000000000000B888                 mov     [rsp+48h+ptr], rcx
.text:000000000000B88C                 call    _free
.text:000000000000B891                 mov     rcx, [rsp+48h+ptr]
.text:000000000000B895                 mov     rdi, rcx        ; ptr
.text:000000000000B898                 call    _free
.text:000000000000B89D                 mov     rdi, rbp        ; ptr
.text:000000000000B8A0                 call    _free
.text:000000000000B8A5                 mov     rax, [rsp+48h+var_40]
.text:000000000000B8AA                 mov     rdi, rax        ; ptr
.text:000000000000B8AD                 call    _free
.text:000000000000B8B2
.text:000000000000B8B2 loc_B8B2:                               ; CODE XREF: re_dfa_add_node+E2↑j
.text:000000000000B8B2                                         ; re_dfa_add_node+FF↑j
.text:000000000000B8B2                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B8B9                 jmp     loc_B7AC
.text:000000000000B8B9 ; } // starts at B6F0
.text:000000000000B8B9 re_dfa_add_node endp
.text:000000000000B8B9
.text:000000000000B8B9 ; ---------------------------------------------------------------------------
.text:000000000000B8BE                 align 20h
.text:000000000000B8C0
.text:000000000000B8C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B8C0
.text:000000000000B8C0
.text:000000000000B8C0 duplicate_node  proc near               ; CODE XREF: duplicate_node_closure+102↓p
.text:000000000000B8C0                                         ; duplicate_node_closure+148↓p ...
.text:000000000000B8C0 ; __unwind {
.text:000000000000B8C0                 push    r13
.text:000000000000B8C2                 push    r12
.text:000000000000B8C4                 mov     r13, rsi
.text:000000000000B8C7                 push    rbp
.text:000000000000B8C8                 push    rbx
.text:000000000000B8C9                 shl     r13, 4
.text:000000000000B8CD                 mov     rbp, rsi
.text:000000000000B8D0                 mov     r12d, edx
.text:000000000000B8D3                 mov     rbx, rdi
.text:000000000000B8D6                 sub     rsp, 8
.text:000000000000B8DA                 mov     rax, [rdi]
.text:000000000000B8DD                 mov     rsi, [rax+r13]
.text:000000000000B8E1                 mov     rdx, [rax+r13+8]
.text:000000000000B8E6                 call    re_dfa_add_node
.text:000000000000B8EB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B8EF                 jz      short loc_B954
.text:000000000000B8F1                 mov     edi, r12d
.text:000000000000B8F4                 mov     r8, [rbx]
.text:000000000000B8F7                 mov     rsi, rax
.text:000000000000B8FA                 and     di, 3FFh
.text:000000000000B8FF                 shl     rsi, 4
.text:000000000000B903                 mov     ecx, edi
.text:000000000000B905                 and     ecx, 3FFh
.text:000000000000B90B                 add     rsi, r8
.text:000000000000B90E                 shl     ecx, 8
.text:000000000000B911                 mov     edx, ecx
.text:000000000000B913                 mov     ecx, [rsi+8]
.text:000000000000B916                 and     ecx, 0FFFC00FFh
.text:000000000000B91C                 or      ecx, edx
.text:000000000000B91E                 mov     [rsi+8], ecx
.text:000000000000B921                 mov     edx, [r8+r13+8]
.text:000000000000B926                 and     ecx, 0FFFC00FFh
.text:000000000000B92C                 shr     edx, 8
.text:000000000000B92F                 or      edx, edi
.text:000000000000B931                 and     edx, 3FFh
.text:000000000000B937                 shl     edx, 8
.text:000000000000B93A                 or      edx, ecx
.text:000000000000B93C                 mov     ecx, edx
.text:000000000000B93E                 mov     [rsi+8], edx
.text:000000000000B941                 shr     ecx, 10h
.text:000000000000B944                 mov     edx, ecx
.text:000000000000B946                 or      edx, 4
.text:000000000000B949                 mov     [rsi+0Ah], dl
.text:000000000000B94C                 mov     rdx, [rbx+20h]
.text:000000000000B950                 mov     [rdx+rax*8], rbp
.text:000000000000B954
.text:000000000000B954 loc_B954:                               ; CODE XREF: duplicate_node+2F↑j
.text:000000000000B954                 add     rsp, 8
.text:000000000000B958                 pop     rbx
.text:000000000000B959                 pop     rbp
.text:000000000000B95A                 pop     r12
.text:000000000000B95C                 pop     r13
.text:000000000000B95E                 retn
.text:000000000000B95E ; } // starts at B8C0
.text:000000000000B95E duplicate_node  endp
.text:000000000000B95E
.text:000000000000B95E ; ---------------------------------------------------------------------------
.text:000000000000B95F                 align 20h
.text:000000000000B960
.text:000000000000B960 ; =============== S U B R O U T I N E =======================================
.text:000000000000B960
.text:000000000000B960
.text:000000000000B960 duplicate_node_closure proc near        ; CODE XREF: duplicate_node_closure+17A↓p
.text:000000000000B960                                         ; calc_eclosure_iter+26A↓p
.text:000000000000B960
.text:000000000000B960 var_48          = qword ptr -48h
.text:000000000000B960 var_40          = qword ptr -40h
.text:000000000000B960
.text:000000000000B960 ; __unwind {
.text:000000000000B960                 push    r15
.text:000000000000B962                 push    r14
.text:000000000000B964                 mov     r9, rsi
.text:000000000000B967                 push    r13
.text:000000000000B969                 push    r12
.text:000000000000B96B                 mov     r14, rdi
.text:000000000000B96E                 push    rbp
.text:000000000000B96F                 push    rbx
.text:000000000000B970                 mov     r13, rdx
.text:000000000000B973                 mov     ebp, r8d
.text:000000000000B976                 sub     rsp, 18h
.text:000000000000B97A                 mov     [rsp+48h+var_40], rcx
.text:000000000000B97F
.text:000000000000B97F loc_B97F:                               ; CODE XREF: duplicate_node_closure+125↓j
.text:000000000000B97F                                         ; duplicate_node_closure+1E1↓j
.text:000000000000B97F                 mov     r8, [r14]
.text:000000000000B982                 mov     rax, r9
.text:000000000000B985                 mov     rdi, [r14+28h]
.text:000000000000B989                 shl     rax, 4
.text:000000000000B98D                 mov     r12, r13
.text:000000000000B990                 add     rax, r8
.text:000000000000B993                 cmp     byte ptr [rax+8], 4
.text:000000000000B997                 jz      loc_BB50
.text:000000000000B99D                 lea     r12, [r9+r9*2]
.text:000000000000B9A1                 shl     r12, 3
.text:000000000000B9A5                 lea     rsi, [rdi+r12]
.text:000000000000B9A9                 mov     rcx, [rsi+8]
.text:000000000000B9AD                 test    rcx, rcx
.text:000000000000B9B0                 jz      loc_BBA9
.text:000000000000B9B6                 lea     rbx, [r13+r13*2+0]
.text:000000000000B9BB                 mov     rsi, [rsi+10h]
.text:000000000000B9BF                 shl     rbx, 3
.text:000000000000B9C3                 add     rdi, rbx
.text:000000000000B9C6                 cmp     rcx, 1
.text:000000000000B9CA                 mov     r15, [rsi]
.text:000000000000B9CD                 mov     qword ptr [rdi+8], 0
.text:000000000000B9D5                 jz      loc_BAF0
.text:000000000000B9DB                 mov     rdx, [r14+10h]
.text:000000000000B9DF                 lea     rsi, [rdx-1]
.text:000000000000B9E3                 mov     rax, rsi
.text:000000000000B9E6                 shl     rax, 4
.text:000000000000B9EA                 add     rax, r8
.text:000000000000B9ED                 test    byte ptr [rax+0Ah], 4
.text:000000000000B9F1                 jz      loc_BAA0
.text:000000000000B9F7                 test    rsi, rsi
.text:000000000000B9FA                 jle     loc_BAA0
.text:000000000000BA00                 shl     rdx, 4
.text:000000000000BA04                 sub     r8, rax
.text:000000000000BA07                 mov     rcx, [r14+20h]
.text:000000000000BA0B                 lea     r8, [r8+rdx-20h]
.text:000000000000BA10                 jmp     short loc_BA2A
.text:000000000000BA10 ; ---------------------------------------------------------------------------
.text:000000000000BA12                 align 8
.text:000000000000BA18
.text:000000000000BA18 loc_BA18:                               ; CODE XREF: duplicate_node_closure+CE↓j
.text:000000000000BA18                                         ; duplicate_node_closure+DE↓j
.text:000000000000BA18                 add     rax, r8
.text:000000000000BA1B                 sub     rsi, 1
.text:000000000000BA1F                 test    byte ptr [rax+0Ah], 4
.text:000000000000BA23                 jz      short loc_BAA0
.text:000000000000BA25                 test    rsi, rsi
.text:000000000000BA28                 jle     short loc_BAA0
.text:000000000000BA2A
.text:000000000000BA2A loc_BA2A:                               ; CODE XREF: duplicate_node_closure+B0↑j
.text:000000000000BA2A                 cmp     [rcx+rsi*8], r15
.text:000000000000BA2E                 jnz     short loc_BA18
.text:000000000000BA30                 mov     edx, [rax+8]
.text:000000000000BA33                 shr     edx, 8
.text:000000000000BA36                 and     edx, 3FFh
.text:000000000000BA3C                 cmp     ebp, edx
.text:000000000000BA3E                 jnz     short loc_BA18
.text:000000000000BA40                 call    re_node_set_insert
.text:000000000000BA45                 test    al, al
.text:000000000000BA47                 jz      short loc_BA8B
.text:000000000000BA49
.text:000000000000BA49 loc_BA49:                               ; CODE XREF: duplicate_node_closure+181↓j
.text:000000000000BA49                 mov     rax, [r14+28h]
.text:000000000000BA4D                 mov     edx, ebp
.text:000000000000BA4F                 mov     rdi, r14
.text:000000000000BA52                 mov     rax, [rax+r12+10h]
.text:000000000000BA57                 mov     r9, [rax+8]
.text:000000000000BA5B                 mov     rsi, r9
.text:000000000000BA5E                 mov     [rsp+48h+var_48], r9
.text:000000000000BA62                 call    duplicate_node
.text:000000000000BA67                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BA6B                 mov     r13, rax
.text:000000000000BA6E                 jz      short loc_BA8B
.text:000000000000BA70
.text:000000000000BA70 loc_BA70:                               ; CODE XREF: duplicate_node_closure+244↓j
.text:000000000000BA70                 add     rbx, [r14+28h]
.text:000000000000BA74                 mov     rsi, r13
.text:000000000000BA77                 mov     rdi, rbx
.text:000000000000BA7A                 call    re_node_set_insert
.text:000000000000BA7F                 test    al, al
.text:000000000000BA81                 mov     r9, [rsp+48h+var_48]
.text:000000000000BA85                 jnz     loc_B97F
.text:000000000000BA8B
.text:000000000000BA8B loc_BA8B:                               ; CODE XREF: duplicate_node_closure+E7↑j
.text:000000000000BA8B                                         ; duplicate_node_closure+10E↑j ...
.text:000000000000BA8B                 mov     eax, 0Ch
.text:000000000000BA90
.text:000000000000BA90 loc_BA90:                               ; CODE XREF: duplicate_node_closure+187↓j
.text:000000000000BA90                                         ; duplicate_node_closure+257↓j ...
.text:000000000000BA90                 add     rsp, 18h
.text:000000000000BA94                 pop     rbx
.text:000000000000BA95                 pop     rbp
.text:000000000000BA96                 pop     r12
.text:000000000000BA98                 pop     r13
.text:000000000000BA9A                 pop     r14
.text:000000000000BA9C                 pop     r15
.text:000000000000BA9E                 retn
.text:000000000000BA9E ; ---------------------------------------------------------------------------
.text:000000000000BA9F                 align 20h
.text:000000000000BAA0
.text:000000000000BAA0 loc_BAA0:                               ; CODE XREF: duplicate_node_closure+91↑j
.text:000000000000BAA0                                         ; duplicate_node_closure+9A↑j ...
.text:000000000000BAA0                 mov     edx, ebp
.text:000000000000BAA2                 mov     rsi, r15
.text:000000000000BAA5                 mov     rdi, r14
.text:000000000000BAA8                 call    duplicate_node
.text:000000000000BAAD                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BAB1                 mov     r13, rax
.text:000000000000BAB4                 jz      short loc_BA8B
.text:000000000000BAB6                 mov     rdi, [r14+28h]
.text:000000000000BABA                 mov     rsi, r13
.text:000000000000BABD                 add     rdi, rbx
.text:000000000000BAC0                 call    re_node_set_insert
.text:000000000000BAC5                 test    al, al
.text:000000000000BAC7                 jz      short loc_BA8B
.text:000000000000BAC9                 mov     rcx, [rsp+48h+var_40]
.text:000000000000BACE                 mov     r8d, ebp
.text:000000000000BAD1                 mov     rdx, r13
.text:000000000000BAD4                 mov     rsi, r15
.text:000000000000BAD7                 mov     rdi, r14
.text:000000000000BADA                 call    duplicate_node_closure
.text:000000000000BADF                 test    eax, eax
.text:000000000000BAE1                 jz      loc_BA49
.text:000000000000BAE7                 jmp     short loc_BA90
.text:000000000000BAE7 ; ---------------------------------------------------------------------------
.text:000000000000BAE9                 align 10h
.text:000000000000BAF0
.text:000000000000BAF0 loc_BAF0:                               ; CODE XREF: duplicate_node_closure+75↑j
.text:000000000000BAF0                 cmp     r9, [rsp+48h+var_40]
.text:000000000000BAF5                 jnz     short loc_BB00
.text:000000000000BAF7                 cmp     r9, r13
.text:000000000000BAFA                 jnz     loc_BBBC
.text:000000000000BB00
.text:000000000000BB00 loc_BB00:                               ; CODE XREF: duplicate_node_closure+195↑j
.text:000000000000BB00                 mov     eax, [rax+8]
.text:000000000000BB03                 mov     rsi, r15
.text:000000000000BB06                 mov     rdi, r14
.text:000000000000BB09                 shr     eax, 8
.text:000000000000BB0C                 and     eax, 3FFh
.text:000000000000BB11                 or      ebp, eax
.text:000000000000BB13                 mov     edx, ebp
.text:000000000000BB15                 call    duplicate_node
.text:000000000000BB1A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BB1E                 mov     r13, rax
.text:000000000000BB21                 jz      loc_BA8B
.text:000000000000BB27                 add     rbx, [r14+28h]
.text:000000000000BB2B                 mov     rsi, rax
.text:000000000000BB2E                 mov     rdi, rbx
.text:000000000000BB31                 call    re_node_set_insert
.text:000000000000BB36                 test    al, al
.text:000000000000BB38                 jz      loc_BA8B
.text:000000000000BB3E                 mov     r9, r15
.text:000000000000BB41                 jmp     loc_B97F
.text:000000000000BB41 ; ---------------------------------------------------------------------------
.text:000000000000BB46                 align 10h
.text:000000000000BB50
.text:000000000000BB50 loc_BB50:                               ; CODE XREF: duplicate_node_closure+37↑j
.text:000000000000BB50                 mov     rax, [r14+18h]
.text:000000000000BB54                 lea     rbx, [r13+r13*2+0]
.text:000000000000BB59                 lea     r15, ds:0[r9*8]
.text:000000000000BB61                 mov     edx, ebp
.text:000000000000BB63                 shl     rbx, 3
.text:000000000000BB67                 mov     r9, [rax+r9*8]
.text:000000000000BB6B                 mov     qword ptr [rdi+rbx+8], 0
.text:000000000000BB74                 mov     rdi, r14
.text:000000000000BB77                 mov     rsi, r9
.text:000000000000BB7A                 mov     [rsp+48h+var_48], r9
.text:000000000000BB7E                 call    duplicate_node
.text:000000000000BB83                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BB87                 mov     r13, rax
.text:000000000000BB8A                 mov     r9, [rsp+48h+var_48]
.text:000000000000BB8E                 jz      loc_BA8B
.text:000000000000BB94                 mov     rax, [r14+18h]
.text:000000000000BB98                 mov     [rsp+48h+var_48], r9
.text:000000000000BB9C                 mov     rcx, [rax+r15]
.text:000000000000BBA0                 mov     [rax+r12*8], rcx
.text:000000000000BBA4                 jmp     loc_BA70
.text:000000000000BBA9 ; ---------------------------------------------------------------------------
.text:000000000000BBA9
.text:000000000000BBA9 loc_BBA9:                               ; CODE XREF: duplicate_node_closure+50↑j
.text:000000000000BBA9                 mov     rax, [r14+18h]
.text:000000000000BBAD                 mov     rcx, [rax+r9*8]
.text:000000000000BBB1                 mov     [rax+r13*8], rcx
.text:000000000000BBB5                 xor     eax, eax
.text:000000000000BBB7                 jmp     loc_BA90
.text:000000000000BBBC ; ---------------------------------------------------------------------------
.text:000000000000BBBC
.text:000000000000BBBC loc_BBBC:                               ; CODE XREF: duplicate_node_closure+19A↑j
.text:000000000000BBBC                 mov     rsi, r15
.text:000000000000BBBF                 call    re_node_set_insert
.text:000000000000BBC4                 mov     edx, eax
.text:000000000000BBC6                 xor     eax, eax
.text:000000000000BBC8                 test    dl, dl
.text:000000000000BBCA                 jnz     loc_BA90
.text:000000000000BBD0                 jmp     loc_BA8B
.text:000000000000BBD0 ; } // starts at B960
.text:000000000000BBD0 duplicate_node_closure endp
.text:000000000000BBD0
.text:000000000000BBD0 ; ---------------------------------------------------------------------------
.text:000000000000BBD5                 align 20h
.text:000000000000BBE0
.text:000000000000BBE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BBE0
.text:000000000000BBE0
.text:000000000000BBE0 ; __int64 __fastcall free_state(void *ptr)
.text:000000000000BBE0 free_state      proc near               ; CODE XREF: free_dfa_content+FC↓p
.text:000000000000BBE0                                         ; re_acquire_state_context+211↓p ...
.text:000000000000BBE0 ; __unwind {
.text:000000000000BBE0                 push    rbx
.text:000000000000BBE1                 mov     rbx, rdi
.text:000000000000BBE4                 mov     rdi, [rdi+30h]  ; ptr
.text:000000000000BBE8                 call    _free
.text:000000000000BBED                 mov     rdi, [rbx+48h]  ; ptr
.text:000000000000BBF1                 call    _free
.text:000000000000BBF6                 mov     rax, [rbx+50h]
.text:000000000000BBFA                 lea     rdx, [rbx+8]
.text:000000000000BBFE                 cmp     rax, rdx
.text:000000000000BC01                 jz      short loc_BC15
.text:000000000000BC03                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000BC07                 call    _free
.text:000000000000BC0C                 mov     rdi, [rbx+50h]  ; ptr
.text:000000000000BC10                 call    _free
.text:000000000000BC15
.text:000000000000BC15 loc_BC15:                               ; CODE XREF: free_state+21↑j
.text:000000000000BC15                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000BC19                 call    _free
.text:000000000000BC1E                 mov     rdi, [rbx+60h]  ; ptr
.text:000000000000BC22                 call    _free
.text:000000000000BC27                 mov     rdi, [rbx+58h]  ; ptr
.text:000000000000BC2B                 call    _free
.text:000000000000BC30                 mov     rdi, rbx        ; ptr
.text:000000000000BC33                 pop     rbx
.text:000000000000BC34                 jmp     _free
.text:000000000000BC34 ; } // starts at BBE0
.text:000000000000BC34 free_state      endp
.text:000000000000BC34
.text:000000000000BC34 ; ---------------------------------------------------------------------------
.text:000000000000BC39                 align 20h
.text:000000000000BC40
.text:000000000000BC40 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC40
.text:000000000000BC40
.text:000000000000BC40 re_string_destruct proc near            ; CODE XREF: re_search_internal+B74↓p
.text:000000000000BC40                                         ; re_compile_internal+377↓p ...
.text:000000000000BC40 ; __unwind {
.text:000000000000BC40                 push    rbx
.text:000000000000BC41                 mov     rbx, rdi
.text:000000000000BC44                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000BC48                 call    _free
.text:000000000000BC4D                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000BC51                 call    _free
.text:000000000000BC56                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000BC5D                 jnz     short loc_BC68
.text:000000000000BC5F                 pop     rbx
.text:000000000000BC60                 retn
.text:000000000000BC60 ; ---------------------------------------------------------------------------
.text:000000000000BC61                 align 8
.text:000000000000BC68
.text:000000000000BC68 loc_BC68:                               ; CODE XREF: re_string_destruct+1D↑j
.text:000000000000BC68                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000BC6C                 pop     rbx
.text:000000000000BC6D                 jmp     _free
.text:000000000000BC6D ; } // starts at BC40
.text:000000000000BC6D re_string_destruct endp
.text:000000000000BC6D
.text:000000000000BC6D ; ---------------------------------------------------------------------------
.text:000000000000BC72                 align 20h
.text:000000000000BC80
.text:000000000000BC80 ; =============== S U B R O U T I N E =======================================
.text:000000000000BC80
.text:000000000000BC80
.text:000000000000BC80 ; __int64 __fastcall free_dfa_content(void *ptr)
.text:000000000000BC80 free_dfa_content proc near              ; CODE XREF: re_compile_internal+37F↓p
.text:000000000000BC80                                         ; regfree+C↓p
.text:000000000000BC80 ; __unwind {
.text:000000000000BC80                 push    r14
.text:000000000000BC82                 push    r13
.text:000000000000BC84                 push    r12
.text:000000000000BC86                 mov     r12, rdi
.text:000000000000BC89                 push    rbp
.text:000000000000BC8A                 push    rbx
.text:000000000000BC8B                 mov     rdi, [rdi]
.text:000000000000BC8E                 test    rdi, rdi
.text:000000000000BC91                 jz      short loc_BCBE
.text:000000000000BC93                 cmp     qword ptr [r12+10h], 0
.text:000000000000BC99                 jz      short loc_BCBE
.text:000000000000BC9B                 xor     ebx, ebx
.text:000000000000BC9D                 jmp     short loc_BCA4
.text:000000000000BC9D ; ---------------------------------------------------------------------------
.text:000000000000BC9F                 align 20h
.text:000000000000BCA0
.text:000000000000BCA0 loc_BCA0:                               ; CODE XREF: free_dfa_content+3C↓j
.text:000000000000BCA0                 mov     rdi, [r12]
.text:000000000000BCA4
.text:000000000000BCA4 loc_BCA4:                               ; CODE XREF: free_dfa_content+1D↑j
.text:000000000000BCA4                 mov     rax, rbx
.text:000000000000BCA7                 add     rbx, 1
.text:000000000000BCAB                 shl     rax, 4
.text:000000000000BCAF                 add     rdi, rax
.text:000000000000BCB2                 call    free_token
.text:000000000000BCB7                 cmp     [r12+10h], rbx
.text:000000000000BCBC                 ja      short loc_BCA0
.text:000000000000BCBE
.text:000000000000BCBE loc_BCBE:                               ; CODE XREF: free_dfa_content+11↑j
.text:000000000000BCBE                                         ; free_dfa_content+19↑j
.text:000000000000BCBE                 mov     rdi, [r12+18h]  ; ptr
.text:000000000000BCC3                 call    _free
.text:000000000000BCC8                 cmp     qword ptr [r12+10h], 0
.text:000000000000BCCE                 jz      short loc_BD23
.text:000000000000BCD0                 xor     ebx, ebx
.text:000000000000BCD2                 xor     ebp, ebp
.text:000000000000BCD4                 nop     dword ptr [rax+00h]
.text:000000000000BCD8
.text:000000000000BCD8 loc_BCD8:                               ; CODE XREF: free_dfa_content+A1↓j
.text:000000000000BCD8                 mov     rax, [r12+30h]
.text:000000000000BCDD                 test    rax, rax
.text:000000000000BCE0                 jz      short loc_BCEC
.text:000000000000BCE2                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000BCE7                 call    _free
.text:000000000000BCEC
.text:000000000000BCEC loc_BCEC:                               ; CODE XREF: free_dfa_content+60↑j
.text:000000000000BCEC                 mov     rax, [r12+38h]
.text:000000000000BCF1                 test    rax, rax
.text:000000000000BCF4                 jz      short loc_BD00
.text:000000000000BCF6                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000BCFB                 call    _free
.text:000000000000BD00
.text:000000000000BD00 loc_BD00:                               ; CODE XREF: free_dfa_content+74↑j
.text:000000000000BD00                 mov     rax, [r12+28h]
.text:000000000000BD05                 test    rax, rax
.text:000000000000BD08                 jz      short loc_BD14
.text:000000000000BD0A                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000BD0F                 call    _free
.text:000000000000BD14
.text:000000000000BD14 loc_BD14:                               ; CODE XREF: free_dfa_content+88↑j
.text:000000000000BD14                 add     rbp, 1
.text:000000000000BD18                 add     rbx, 18h
.text:000000000000BD1C                 cmp     [r12+10h], rbp
.text:000000000000BD21                 ja      short loc_BCD8
.text:000000000000BD23
.text:000000000000BD23 loc_BD23:                               ; CODE XREF: free_dfa_content+4E↑j
.text:000000000000BD23                 mov     rdi, [r12+28h]  ; ptr
.text:000000000000BD28                 call    _free
.text:000000000000BD2D                 mov     rdi, [r12+30h]  ; ptr
.text:000000000000BD32                 call    _free
.text:000000000000BD37                 mov     rdi, [r12+38h]  ; ptr
.text:000000000000BD3C                 call    _free
.text:000000000000BD41                 mov     rdi, [r12]      ; ptr
.text:000000000000BD45                 call    _free
.text:000000000000BD4A                 mov     rdi, [r12+40h]
.text:000000000000BD4F                 test    rdi, rdi
.text:000000000000BD52                 jz      short loc_BDA7
.text:000000000000BD54                 xor     r14d, r14d
.text:000000000000BD57                 xor     r13d, r13d
.text:000000000000BD5A                 nop     word ptr [rax+rax+00h]
.text:000000000000BD60
.text:000000000000BD60 loc_BD60:                               ; CODE XREF: free_dfa_content+125↓j
.text:000000000000BD60                 lea     rbp, [rdi+r14]
.text:000000000000BD64                 cmp     qword ptr [rbp+0], 0
.text:000000000000BD69                 jle     short loc_BD87
.text:000000000000BD6B                 xor     ebx, ebx
.text:000000000000BD6D                 nop     dword ptr [rax]
.text:000000000000BD70
.text:000000000000BD70 loc_BD70:                               ; CODE XREF: free_dfa_content+105↓j
.text:000000000000BD70                 mov     rax, [rbp+10h]
.text:000000000000BD74                 mov     rdi, [rax+rbx*8] ; ptr
.text:000000000000BD78                 add     rbx, 1
.text:000000000000BD7C                 call    free_state
.text:000000000000BD81                 cmp     [rbp+0], rbx
.text:000000000000BD85                 jg      short loc_BD70
.text:000000000000BD87
.text:000000000000BD87 loc_BD87:                               ; CODE XREF: free_dfa_content+E9↑j
.text:000000000000BD87                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000BD8B                 add     r13, 1
.text:000000000000BD8F                 add     r14, 18h
.text:000000000000BD93                 call    _free
.text:000000000000BD98                 cmp     [r12+88h], r13
.text:000000000000BDA0                 mov     rdi, [r12+40h]  ; ptr
.text:000000000000BDA5                 jnb     short loc_BD60
.text:000000000000BDA7
.text:000000000000BDA7 loc_BDA7:                               ; CODE XREF: free_dfa_content+D2↑j
.text:000000000000BDA7                 call    _free
.text:000000000000BDAC                 mov     rdi, [r12+78h]  ; ptr
.text:000000000000BDB1                 lea     rax, utf8_sb_map
.text:000000000000BDB8                 cmp     rdi, rax
.text:000000000000BDBB                 jz      short loc_BDC2
.text:000000000000BDBD                 call    _free
.text:000000000000BDC2
.text:000000000000BDC2 loc_BDC2:                               ; CODE XREF: free_dfa_content+13B↑j
.text:000000000000BDC2                 mov     rdi, [r12+0E0h] ; ptr
.text:000000000000BDCA                 call    _free
.text:000000000000BDCF                 pop     rbx
.text:000000000000BDD0                 mov     rdi, r12        ; ptr
.text:000000000000BDD3                 pop     rbp
.text:000000000000BDD4                 pop     r12
.text:000000000000BDD6                 pop     r13
.text:000000000000BDD8                 pop     r14
.text:000000000000BDDA                 jmp     _free
.text:000000000000BDDA ; } // starts at BC80
.text:000000000000BDDA free_dfa_content endp
.text:000000000000BDDA
.text:000000000000BDDA ; ---------------------------------------------------------------------------
.text:000000000000BDDF                 align 20h
.text:000000000000BDE0
.text:000000000000BDE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDE0
.text:000000000000BDE0
.text:000000000000BDE0 match_ctx_clean proc near               ; CODE XREF: re_search_internal+F34↓p
.text:000000000000BDE0                                         ; re_search_internal+1494↓p
.text:000000000000BDE0 ; __unwind {
.text:000000000000BDE0                 push    r14
.text:000000000000BDE2                 push    r13
.text:000000000000BDE4                 mov     r14, rdi
.text:000000000000BDE7                 push    r12
.text:000000000000BDE9                 push    rbp
.text:000000000000BDEA                 push    rbx
.text:000000000000BDEB                 cmp     qword ptr [rdi+0E8h], 0
.text:000000000000BDF3                 jle     loc_BE79
.text:000000000000BDF9                 xor     r13d, r13d
.text:000000000000BDFC                 nop     dword ptr [rax+00h]
.text:000000000000BE00
.text:000000000000BE00 loc_BE00:                               ; CODE XREF: match_ctx_clean+97↓j
.text:000000000000BE00                 mov     rax, [r14+0F8h]
.text:000000000000BE07                 mov     r12, [rax+r13*8]
.text:000000000000BE0B                 cmp     qword ptr [r12+20h], 0
.text:000000000000BE11                 jle     short loc_BE3D
.text:000000000000BE13                 xor     ebx, ebx
.text:000000000000BE15                 nop     dword ptr [rax]
.text:000000000000BE18
.text:000000000000BE18 loc_BE18:                               ; CODE XREF: match_ctx_clean+5B↓j
.text:000000000000BE18                 mov     rax, [r12+28h]
.text:000000000000BE1D                 mov     rbp, [rax+rbx*8]
.text:000000000000BE21                 add     rbx, 1
.text:000000000000BE25                 mov     rdi, [rbp+20h]  ; ptr
.text:000000000000BE29                 call    _free
.text:000000000000BE2E                 mov     rdi, rbp        ; ptr
.text:000000000000BE31                 call    _free
.text:000000000000BE36                 cmp     [r12+20h], rbx
.text:000000000000BE3B                 jg      short loc_BE18
.text:000000000000BE3D
.text:000000000000BE3D loc_BE3D:                               ; CODE XREF: match_ctx_clean+31↑j
.text:000000000000BE3D                 mov     rdi, [r12+28h]  ; ptr
.text:000000000000BE42                 call    _free
.text:000000000000BE47                 mov     rax, [r12+10h]
.text:000000000000BE4C                 test    rax, rax
.text:000000000000BE4F                 jz      short loc_BE64
.text:000000000000BE51                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000BE55                 call    _free
.text:000000000000BE5A                 mov     rdi, [r12+10h]  ; ptr
.text:000000000000BE5F                 call    _free
.text:000000000000BE64
.text:000000000000BE64 loc_BE64:                               ; CODE XREF: match_ctx_clean+6F↑j
.text:000000000000BE64                 mov     rdi, r12        ; ptr
.text:000000000000BE67                 add     r13, 1
.text:000000000000BE6B                 call    _free
.text:000000000000BE70                 cmp     [r14+0E8h], r13
.text:000000000000BE77                 jg      short loc_BE00
.text:000000000000BE79
.text:000000000000BE79 loc_BE79:                               ; CODE XREF: match_ctx_clean+13↑j
.text:000000000000BE79                 pop     rbx
.text:000000000000BE7A                 mov     qword ptr [r14+0E8h], 0
.text:000000000000BE85                 mov     qword ptr [r14+0C8h], 0
.text:000000000000BE90                 pop     rbp
.text:000000000000BE91                 pop     r12
.text:000000000000BE93                 pop     r13
.text:000000000000BE95                 pop     r14
.text:000000000000BE97                 retn
.text:000000000000BE97 ; } // starts at BDE0
.text:000000000000BE97 match_ctx_clean endp
.text:000000000000BE97
.text:000000000000BE97 ; ---------------------------------------------------------------------------
.text:000000000000BE98                 align 20h
.text:000000000000BEA0
.text:000000000000BEA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BEA0
.text:000000000000BEA0
.text:000000000000BEA0 re_string_char_size_at_part_0 proc near ; CODE XREF: check_node_accept_bytes_isra_31+3A↓p
.text:000000000000BEA0                                         ; parse_bracket_element_constprop_37+3B↓p ...
.text:000000000000BEA0 ; __unwind {
.text:000000000000BEA0                 mov     rcx, [rdi+30h]
.text:000000000000BEA4                 lea     rax, [rsi+1]
.text:000000000000BEA8                 cmp     rax, rcx
.text:000000000000BEAB                 jge     short loc_BEE8
.text:000000000000BEAD                 mov     rdx, [rdi+10h]
.text:000000000000BEB1                 lea     rdi, ds:0[rax*4]
.text:000000000000BEB9                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:000000000000BEBD                 jnz     short loc_BEE8
.text:000000000000BEBF                 sub     rcx, rsi
.text:000000000000BEC2                 lea     rsi, [rdx+rdi-4]
.text:000000000000BEC7                 mov     edx, 2
.text:000000000000BECC                 jmp     short loc_BEDB
.text:000000000000BECC ; ---------------------------------------------------------------------------
.text:000000000000BECE                 align 10h
.text:000000000000BED0
.text:000000000000BED0 loc_BED0:                               ; CODE XREF: re_string_char_size_at_part_0+40↓j
.text:000000000000BED0                 add     rdx, 1
.text:000000000000BED4                 cmp     dword ptr [rsi+rdx*4-4], 0FFFFFFFFh
.text:000000000000BED9                 jnz     short locret_BEED
.text:000000000000BEDB
.text:000000000000BEDB loc_BEDB:                               ; CODE XREF: re_string_char_size_at_part_0+2C↑j
.text:000000000000BEDB                 cmp     rdx, rcx
.text:000000000000BEDE                 mov     eax, edx
.text:000000000000BEE0                 jnz     short loc_BED0
.text:000000000000BEE2                 rep retn
.text:000000000000BEE2 ; ---------------------------------------------------------------------------
.text:000000000000BEE4                 align 8
.text:000000000000BEE8
.text:000000000000BEE8 loc_BEE8:                               ; CODE XREF: re_string_char_size_at_part_0+B↑j
.text:000000000000BEE8                                         ; re_string_char_size_at_part_0+1D↑j
.text:000000000000BEE8                 mov     eax, 1
.text:000000000000BEED
.text:000000000000BEED locret_BEED:                            ; CODE XREF: re_string_char_size_at_part_0+39↑j
.text:000000000000BEED                 rep retn
.text:000000000000BEED ; } // starts at BEA0
.text:000000000000BEED re_string_char_size_at_part_0 endp
.text:000000000000BEED
.text:000000000000BEED ; ---------------------------------------------------------------------------
.text:000000000000BEEF                 align 10h
.text:000000000000BEF0
.text:000000000000BEF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BEF0
.text:000000000000BEF0
.text:000000000000BEF0 re_node_set_compare_part_2 proc near    ; CODE XREF: re_acquire_state_context+A3↓p
.text:000000000000BEF0                                         ; re_acquire_state+80↓p
.text:000000000000BEF0 ; __unwind {
.text:000000000000BEF0                 mov     rdx, [rdi+8]
.text:000000000000BEF4                 xor     eax, eax
.text:000000000000BEF6                 cmp     rdx, [rsi+8]
.text:000000000000BEFA                 jz      short loc_BF00
.text:000000000000BEFC                 rep retn
.text:000000000000BEFC ; ---------------------------------------------------------------------------
.text:000000000000BEFE                 align 20h
.text:000000000000BF00
.text:000000000000BF00 loc_BF00:                               ; CODE XREF: re_node_set_compare_part_2+A↑j
.text:000000000000BF00                 lea     rax, [rdx-1]
.text:000000000000BF04                 lea     rdx, ds:0[rax*8]
.text:000000000000BF0C                 jmp     short loc_BF2D
.text:000000000000BF0C ; ---------------------------------------------------------------------------
.text:000000000000BF0E                 align 10h
.text:000000000000BF10
.text:000000000000BF10 loc_BF10:                               ; CODE XREF: re_node_set_compare_part_2+40↓j
.text:000000000000BF10                 mov     rcx, [rdi+10h]
.text:000000000000BF14                 mov     r8, [rcx+rdx]
.text:000000000000BF18                 mov     rcx, [rsi+10h]
.text:000000000000BF1C                 mov     rcx, [rcx+rdx]
.text:000000000000BF20                 sub     rdx, 8
.text:000000000000BF24                 cmp     r8, rcx
.text:000000000000BF27                 jnz     short loc_BF40
.text:000000000000BF29                 sub     rax, 1
.text:000000000000BF2D
.text:000000000000BF2D loc_BF2D:                               ; CODE XREF: re_node_set_compare_part_2+1C↑j
.text:000000000000BF2D                 test    rax, rax
.text:000000000000BF30                 jns     short loc_BF10
.text:000000000000BF32                 mov     eax, 1
.text:000000000000BF37                 retn
.text:000000000000BF37 ; ---------------------------------------------------------------------------
.text:000000000000BF38                 align 20h
.text:000000000000BF40
.text:000000000000BF40 loc_BF40:                               ; CODE XREF: re_node_set_compare_part_2+37↑j
.text:000000000000BF40                 xor     eax, eax
.text:000000000000BF42                 retn
.text:000000000000BF42 ; } // starts at BEF0
.text:000000000000BF42 re_node_set_compare_part_2 endp
.text:000000000000BF42
.text:000000000000BF42 ; ---------------------------------------------------------------------------
.text:000000000000BF43                 align 10h
.text:000000000000BF50
.text:000000000000BF50 ; =============== S U B R O U T I N E =======================================
.text:000000000000BF50
.text:000000000000BF50
.text:000000000000BF50 re_node_set_contains_isra_3 proc near   ; CODE XREF: check_arrival_expand_ecl_sub+2B↓p
.text:000000000000BF50                                         ; expand_bkref_cache+173↓p ...
.text:000000000000BF50 ; __unwind {
.text:000000000000BF50                 xor     eax, eax
.text:000000000000BF52                 test    rdi, rdi
.text:000000000000BF55                 jle     short locret_BF95
.text:000000000000BF57                 mov     r8, [rsi]
.text:000000000000BF5A                 sub     rdi, 1
.text:000000000000BF5E                 xor     esi, esi
.text:000000000000BF60
.text:000000000000BF60 loc_BF60:                               ; CODE XREF: re_node_set_contains_isra_3+67↓j
.text:000000000000BF60                 cmp     rsi, rdi
.text:000000000000BF63                 jnb     short loc_BF8D
.text:000000000000BF65                 lea     rcx, [rsi+rdi]
.text:000000000000BF69                 shr     rcx, 1
.text:000000000000BF6C                 cmp     rdx, [r8+rcx*8]
.text:000000000000BF70                 jle     short loc_BF88
.text:000000000000BF72                 jmp     short loc_BFA0
.text:000000000000BF72 ; ---------------------------------------------------------------------------
.text:000000000000BF74                 align 8
.text:000000000000BF78
.text:000000000000BF78 loc_BF78:                               ; CODE XREF: re_node_set_contains_isra_3+3B↓j
.text:000000000000BF78                 lea     rax, [rsi+rcx]
.text:000000000000BF7C                 shr     rax, 1
.text:000000000000BF7F                 cmp     [r8+rax*8], rdx
.text:000000000000BF83                 jl      short loc_BFB0
.text:000000000000BF85                 mov     rcx, rax
.text:000000000000BF88
.text:000000000000BF88 loc_BF88:                               ; CODE XREF: re_node_set_contains_isra_3+20↑j
.text:000000000000BF88                 cmp     rsi, rcx
.text:000000000000BF8B                 jb      short loc_BF78
.text:000000000000BF8D
.text:000000000000BF8D loc_BF8D:                               ; CODE XREF: re_node_set_contains_isra_3+13↑j
.text:000000000000BF8D                 xor     eax, eax
.text:000000000000BF8F                 cmp     rdx, [r8+rsi*8]
.text:000000000000BF93                 jz      short loc_BFC0
.text:000000000000BF95
.text:000000000000BF95 locret_BF95:                            ; CODE XREF: re_node_set_contains_isra_3+5↑j
.text:000000000000BF95                 rep retn
.text:000000000000BF95 ; ---------------------------------------------------------------------------
.text:000000000000BF97                 align 20h
.text:000000000000BFA0
.text:000000000000BFA0 loc_BFA0:                               ; CODE XREF: re_node_set_contains_isra_3+22↑j
.text:000000000000BFA0                 mov     rax, rcx
.text:000000000000BFA3                 mov     rcx, rdi
.text:000000000000BFA6                 db      2Eh
.text:000000000000BFA6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000BFB0
.text:000000000000BFB0 loc_BFB0:                               ; CODE XREF: re_node_set_contains_isra_3+33↑j
.text:000000000000BFB0                 lea     rsi, [rax+1]
.text:000000000000BFB4                 mov     rdi, rcx
.text:000000000000BFB7                 jmp     short loc_BF60
.text:000000000000BFB7 ; ---------------------------------------------------------------------------
.text:000000000000BFB9                 align 20h
.text:000000000000BFC0
.text:000000000000BFC0 loc_BFC0:                               ; CODE XREF: re_node_set_contains_isra_3+43↑j
.text:000000000000BFC0                 lea     rax, [rsi+1]
.text:000000000000BFC4                 retn
.text:000000000000BFC4 ; } // starts at BF50
.text:000000000000BFC4 re_node_set_contains_isra_3 endp
.text:000000000000BFC4
.text:000000000000BFC4 ; ---------------------------------------------------------------------------
.text:000000000000BFC5                 align 10h
.text:000000000000BFD0
.text:000000000000BFD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BFD0
.text:000000000000BFD0
.text:000000000000BFD0 check_arrival_expand_ecl_sub proc near  ; CODE XREF: check_arrival_expand_ecl_sub+E0↓p
.text:000000000000BFD0                                         ; check_arrival_expand_ecl+D8↓p
.text:000000000000BFD0 ; __unwind {
.text:000000000000BFD0                 push    r15
.text:000000000000BFD2                 push    r14
.text:000000000000BFD4                 lea     r14, [rsi+10h]
.text:000000000000BFD8                 push    r13
.text:000000000000BFDA                 push    r12
.text:000000000000BFDC                 mov     r15, rcx
.text:000000000000BFDF                 push    rbp
.text:000000000000BFE0                 push    rbx
.text:000000000000BFE1                 mov     r12, rdi
.text:000000000000BFE4                 mov     rbp, rsi
.text:000000000000BFE7                 mov     rbx, rdx
.text:000000000000BFEA                 mov     r13d, r8d
.text:000000000000BFED                 sub     rsp, 8
.text:000000000000BFF1
.text:000000000000BFF1 loc_BFF1:                               ; CODE XREF: check_arrival_expand_ecl_sub+83↓j
.text:000000000000BFF1                 mov     rdi, [rbp+8]
.text:000000000000BFF5                 mov     rdx, rbx
.text:000000000000BFF8                 mov     rsi, r14
.text:000000000000BFFB                 call    re_node_set_contains_isra_3
.text:000000000000C000                 test    rax, rax
.text:000000000000C003                 jnz     short loc_C070
.text:000000000000C005                 mov     rax, rbx
.text:000000000000C008                 shl     rax, 4
.text:000000000000C00C                 add     rax, [r12]
.text:000000000000C010                 movzx   edx, byte ptr [rax+8]
.text:000000000000C014                 cmp     edx, r13d
.text:000000000000C017                 jnz     short loc_C01E
.text:000000000000C019                 cmp     [rax], r15
.text:000000000000C01C                 jz      short loc_C058
.text:000000000000C01E
.text:000000000000C01E loc_C01E:                               ; CODE XREF: check_arrival_expand_ecl_sub+47↑j
.text:000000000000C01E                 mov     rsi, rbx
.text:000000000000C021                 mov     rdi, rbp
.text:000000000000C024                 call    re_node_set_insert
.text:000000000000C029                 test    al, al
.text:000000000000C02B                 jz      short loc_C088
.text:000000000000C02D                 lea     rbx, [rbx+rbx*2]
.text:000000000000C031                 mov     rdx, [r12+28h]
.text:000000000000C036                 shl     rbx, 3
.text:000000000000C03A                 add     rdx, rbx
.text:000000000000C03D                 mov     rax, [rdx+8]
.text:000000000000C041                 test    rax, rax
.text:000000000000C044                 jz      short loc_C070
.text:000000000000C046                 cmp     rax, 2
.text:000000000000C04A                 mov     rdx, [rdx+10h]
.text:000000000000C04E                 jz      short loc_C0A0
.text:000000000000C050
.text:000000000000C050 loc_C050:                               ; CODE XREF: check_arrival_expand_ecl_sub+F3↓j
.text:000000000000C050                 mov     rbx, [rdx]
.text:000000000000C053                 jmp     short loc_BFF1
.text:000000000000C053 ; ---------------------------------------------------------------------------
.text:000000000000C055                 align 8
.text:000000000000C058
.text:000000000000C058 loc_C058:                               ; CODE XREF: check_arrival_expand_ecl_sub+4C↑j
.text:000000000000C058                 cmp     r13d, 9
.text:000000000000C05C                 jnz     short loc_C070
.text:000000000000C05E                 mov     rsi, rbx
.text:000000000000C061                 mov     rdi, rbp
.text:000000000000C064                 call    re_node_set_insert
.text:000000000000C069                 test    al, al
.text:000000000000C06B                 jz      short loc_C088
.text:000000000000C06D                 nop     dword ptr [rax]
.text:000000000000C070
.text:000000000000C070 loc_C070:                               ; CODE XREF: check_arrival_expand_ecl_sub+33↑j
.text:000000000000C070                                         ; check_arrival_expand_ecl_sub+74↑j ...
.text:000000000000C070                 xor     eax, eax
.text:000000000000C072
.text:000000000000C072 loc_C072:                               ; CODE XREF: check_arrival_expand_ecl_sub+E7↓j
.text:000000000000C072                 add     rsp, 8
.text:000000000000C076                 pop     rbx
.text:000000000000C077                 pop     rbp
.text:000000000000C078                 pop     r12
.text:000000000000C07A                 pop     r13
.text:000000000000C07C                 pop     r14
.text:000000000000C07E                 pop     r15
.text:000000000000C080                 retn
.text:000000000000C080 ; ---------------------------------------------------------------------------
.text:000000000000C081                 align 8
.text:000000000000C088
.text:000000000000C088 loc_C088:                               ; CODE XREF: check_arrival_expand_ecl_sub+5B↑j
.text:000000000000C088                                         ; check_arrival_expand_ecl_sub+9B↑j
.text:000000000000C088                 add     rsp, 8
.text:000000000000C08C                 mov     eax, 0Ch
.text:000000000000C091                 pop     rbx
.text:000000000000C092                 pop     rbp
.text:000000000000C093                 pop     r12
.text:000000000000C095                 pop     r13
.text:000000000000C097                 pop     r14
.text:000000000000C099                 pop     r15
.text:000000000000C09B                 retn
.text:000000000000C09B ; ---------------------------------------------------------------------------
.text:000000000000C09C                 align 20h
.text:000000000000C0A0
.text:000000000000C0A0 loc_C0A0:                               ; CODE XREF: check_arrival_expand_ecl_sub+7E↑j
.text:000000000000C0A0                 mov     rdx, [rdx+8]
.text:000000000000C0A4                 mov     r8d, r13d
.text:000000000000C0A7                 mov     rcx, r15
.text:000000000000C0AA                 mov     rsi, rbp
.text:000000000000C0AD                 mov     rdi, r12
.text:000000000000C0B0                 call    check_arrival_expand_ecl_sub
.text:000000000000C0B5                 test    eax, eax
.text:000000000000C0B7                 jnz     short loc_C072
.text:000000000000C0B9                 mov     rax, [r12+28h]
.text:000000000000C0BE                 mov     rdx, [rax+rbx+10h]
.text:000000000000C0C3                 jmp     short loc_C050
.text:000000000000C0C3 ; } // starts at BFD0
.text:000000000000C0C3 check_arrival_expand_ecl_sub endp
.text:000000000000C0C3
.text:000000000000C0C3 ; ---------------------------------------------------------------------------
.text:000000000000C0C5                 align 10h
.text:000000000000C0D0
.text:000000000000C0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C0D0
.text:000000000000C0D0
.text:000000000000C0D0 re_node_set_remove_at_isra_4_part_5 proc near
.text:000000000000C0D0                                         ; CODE XREF: re_acquire_state_context+1D9↓p
.text:000000000000C0D0                                         ; _sub_epsilon_src_nodes+1DD↓p ...
.text:000000000000C0D0 ; __unwind {
.text:000000000000C0D0                 mov     rax, [rdi]
.text:000000000000C0D3                 cmp     rax, rdx
.text:000000000000C0D6                 jle     short locret_C102
.text:000000000000C0D8                 sub     rax, 1
.text:000000000000C0DC                 cmp     rdx, rax
.text:000000000000C0DF                 mov     [rdi], rax
.text:000000000000C0E2                 jge     short locret_C102
.text:000000000000C0E4                 mov     rax, [rsi]
.text:000000000000C0E7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C0F0
.text:000000000000C0F0 loc_C0F0:                               ; CODE XREF: re_node_set_remove_at_isra_4_part_5+30↓j
.text:000000000000C0F0                 mov     rcx, [rax+rdx*8+8]
.text:000000000000C0F5                 mov     [rax+rdx*8], rcx
.text:000000000000C0F9                 add     rdx, 1
.text:000000000000C0FD                 cmp     rdx, [rdi]
.text:000000000000C100                 jl      short loc_C0F0
.text:000000000000C102
.text:000000000000C102 locret_C102:                            ; CODE XREF: re_node_set_remove_at_isra_4_part_5+6↑j
.text:000000000000C102                                         ; re_node_set_remove_at_isra_4_part_5+12↑j
.text:000000000000C102                 rep retn
.text:000000000000C102 ; } // starts at C0D0
.text:000000000000C102 re_node_set_remove_at_isra_4_part_5 endp
.text:000000000000C102
.text:000000000000C102 ; ---------------------------------------------------------------------------
.text:000000000000C104                 align 10h
.text:000000000000C110
.text:000000000000C110 ; =============== S U B R O U T I N E =======================================
.text:000000000000C110
.text:000000000000C110
.text:000000000000C110 optimize_subexps proc near              ; DATA XREF: re_compile_internal+611↓o
.text:000000000000C110 ; __unwind {
.text:000000000000C110                 movzx   eax, byte ptr [rsi+30h]
.text:000000000000C114                 cmp     al, 4
.text:000000000000C116                 jz      short loc_C170
.text:000000000000C118                 cmp     al, 11h
.text:000000000000C11A                 jz      short loc_C120
.text:000000000000C11C
.text:000000000000C11C loc_C11C:                               ; CODE XREF: optimize_subexps+17↓j
.text:000000000000C11C                                         ; optimize_subexps+1D↓j ...
.text:000000000000C11C                 xor     eax, eax
.text:000000000000C11E                 retn
.text:000000000000C11E ; ---------------------------------------------------------------------------
.text:000000000000C11F                 align 20h
.text:000000000000C120
.text:000000000000C120 loc_C120:                               ; CODE XREF: optimize_subexps+A↑j
.text:000000000000C120                 mov     rax, [rsi+8]
.text:000000000000C124                 test    rax, rax
.text:000000000000C127                 jz      short loc_C11C
.text:000000000000C129                 cmp     byte ptr [rax+30h], 11h
.text:000000000000C12D                 jnz     short loc_C11C
.text:000000000000C12F                 mov     rcx, [rax+28h]
.text:000000000000C133                 mov     rax, [rax+8]
.text:000000000000C137                 test    rax, rax
.text:000000000000C13A                 mov     [rsi+8], rax
.text:000000000000C13E                 jz      short loc_C143
.text:000000000000C140                 mov     [rax], rsi
.text:000000000000C143
.text:000000000000C143 loc_C143:                               ; CODE XREF: optimize_subexps+2E↑j
.text:000000000000C143                 mov     rax, [rdi+0E0h]
.text:000000000000C14A                 mov     rdx, [rsi+28h]
.text:000000000000C14E                 cmp     rcx, 3Fh ; '?'
.text:000000000000C152                 mov     rdx, [rax+rdx*8]
.text:000000000000C156                 mov     [rax+rcx*8], rdx
.text:000000000000C15A                 jg      short loc_C11C
.text:000000000000C15C                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000C163                 rol     rax, cl
.text:000000000000C166                 and     [rdi+0A0h], rax
.text:000000000000C16D                 jmp     short loc_C11C
.text:000000000000C16D ; ---------------------------------------------------------------------------
.text:000000000000C16F                 align 10h
.text:000000000000C170
.text:000000000000C170 loc_C170:                               ; CODE XREF: optimize_subexps+6↑j
.text:000000000000C170                 mov     rax, [rdi+0E0h]
.text:000000000000C177                 test    rax, rax
.text:000000000000C17A                 jz      short loc_C11C
.text:000000000000C17C                 movsxd  rdx, dword ptr [rsi+28h]
.text:000000000000C180                 mov     rcx, [rax+rdx*8]
.text:000000000000C184                 mov     eax, 1
.text:000000000000C189                 shl     eax, cl
.text:000000000000C18B                 mov     [rsi+28h], rcx
.text:000000000000C18F                 cdqe
.text:000000000000C191                 or      [rdi+0A0h], rax
.text:000000000000C198                 xor     eax, eax
.text:000000000000C19A                 retn
.text:000000000000C19A ; } // starts at C110
.text:000000000000C19A optimize_subexps endp
.text:000000000000C19A
.text:000000000000C19A ; ---------------------------------------------------------------------------
.text:000000000000C19B                 align 20h
.text:000000000000C1A0
.text:000000000000C1A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C1A0
.text:000000000000C1A0
.text:000000000000C1A0 calc_next       proc near               ; DATA XREF: re_compile_internal+699↓o
.text:000000000000C1A0 ; __unwind {
.text:000000000000C1A0                 movzx   eax, byte ptr [rsi+30h]
.text:000000000000C1A4                 mov     rdx, [rsi+8]
.text:000000000000C1A8                 cmp     al, 0Bh
.text:000000000000C1AA                 jz      short loc_C1F0
.text:000000000000C1AC                 cmp     al, 10h
.text:000000000000C1AE                 jz      short loc_C1D8
.text:000000000000C1B0                 test    rdx, rdx
.text:000000000000C1B3                 jz      short loc_C1BD
.text:000000000000C1B5                 mov     rax, [rsi+20h]
.text:000000000000C1B9                 mov     [rdx+20h], rax
.text:000000000000C1BD
.text:000000000000C1BD loc_C1BD:                               ; CODE XREF: calc_next+13↑j
.text:000000000000C1BD                 mov     rax, [rsi+10h]
.text:000000000000C1C1                 test    rax, rax
.text:000000000000C1C4                 jz      short loc_C1CE
.text:000000000000C1C6                 mov     rdx, [rsi+20h]
.text:000000000000C1CA                 mov     [rax+20h], rdx
.text:000000000000C1CE
.text:000000000000C1CE loc_C1CE:                               ; CODE XREF: calc_next+24↑j
.text:000000000000C1CE                 xor     eax, eax
.text:000000000000C1D0                 retn
.text:000000000000C1D0 ; ---------------------------------------------------------------------------
.text:000000000000C1D1                 align 8
.text:000000000000C1D8
.text:000000000000C1D8 loc_C1D8:                               ; CODE XREF: calc_next+E↑j
.text:000000000000C1D8                 mov     rax, [rsi+10h]
.text:000000000000C1DC                 mov     rcx, [rax+18h]
.text:000000000000C1E0                 mov     [rdx+20h], rcx
.text:000000000000C1E4                 mov     rdx, [rsi+20h]
.text:000000000000C1E8                 mov     [rax+20h], rdx
.text:000000000000C1EC                 xor     eax, eax
.text:000000000000C1EE                 retn
.text:000000000000C1EE ; ---------------------------------------------------------------------------
.text:000000000000C1EF                 align 10h
.text:000000000000C1F0
.text:000000000000C1F0 loc_C1F0:                               ; CODE XREF: calc_next+A↑j
.text:000000000000C1F0                 mov     [rdx+20h], rsi
.text:000000000000C1F4                 xor     eax, eax
.text:000000000000C1F6                 retn
.text:000000000000C1F6 ; } // starts at C1A0
.text:000000000000C1F6 calc_next       endp
.text:000000000000C1F6
.text:000000000000C1F6 ; ---------------------------------------------------------------------------
.text:000000000000C1F7                 align 20h
.text:000000000000C200
.text:000000000000C200 ; =============== S U B R O U T I N E =======================================
.text:000000000000C200
.text:000000000000C200
.text:000000000000C200 check_dst_limits_isra_13 proc near      ; CODE XREF: sift_states_backward+18C↓p
.text:000000000000C200                                         ; update_cur_sifted_state+6A3↓p
.text:000000000000C200
.text:000000000000C200 var_70          = qword ptr -70h
.text:000000000000C200 var_68          = qword ptr -68h
.text:000000000000C200 var_60          = qword ptr -60h
.text:000000000000C200 var_58          = qword ptr -58h
.text:000000000000C200 var_50          = qword ptr -50h
.text:000000000000C200 var_48          = qword ptr -48h
.text:000000000000C200 var_40          = qword ptr -40h
.text:000000000000C200 arg_0           = qword ptr  8
.text:000000000000C200
.text:000000000000C200 ; __unwind {
.text:000000000000C200                 push    r15
.text:000000000000C202                 push    r14
.text:000000000000C204                 push    r13
.text:000000000000C206                 push    r12
.text:000000000000C208                 push    rbp
.text:000000000000C209                 push    rbx
.text:000000000000C20A                 xor     ebx, ebx
.text:000000000000C20C                 sub     rsp, 48h
.text:000000000000C210                 mov     rax, [rdi+98h]
.text:000000000000C217                 mov     r15, [rdi+0C8h]
.text:000000000000C21E                 mov     r12, [rsp+78h+arg_0]
.text:000000000000C226                 mov     [rsp+78h+var_70], rax
.text:000000000000C22B                 mov     rbp, r15
.text:000000000000C22E
.text:000000000000C22E loc_C22E:                               ; CODE XREF: check_dst_limits_isra_13+207↓j
.text:000000000000C22E                 cmp     rbx, rbp
.text:000000000000C231                 jge     short loc_C28B
.text:000000000000C233                 lea     rax, [rbx+rbp]
.text:000000000000C237                 mov     r13, [rdi+0D8h]
.text:000000000000C23E                 mov     r10, rax
.text:000000000000C241                 shr     r10, 3Fh
.text:000000000000C245                 add     r10, rax
.text:000000000000C248                 sar     r10, 1
.text:000000000000C24B                 lea     rax, [r10+r10*4]
.text:000000000000C24F                 cmp     r8, [r13+rax*8+8]
.text:000000000000C254                 jle     short loc_C286
.text:000000000000C256                 jmp     loc_C3F0
.text:000000000000C256 ; ---------------------------------------------------------------------------
.text:000000000000C25B                 align 20h
.text:000000000000C260
.text:000000000000C260 loc_C260:                               ; CODE XREF: check_dst_limits_isra_13+89↓j
.text:000000000000C260                 lea     r11, [rbx+r10]
.text:000000000000C264                 mov     rax, r11
.text:000000000000C267                 shr     rax, 3Fh
.text:000000000000C26B                 add     rax, r11
.text:000000000000C26E                 sar     rax, 1
.text:000000000000C271                 lea     r11, [rax+rax*4]
.text:000000000000C275                 mov     r14, rax
.text:000000000000C278                 cmp     [r13+r11*8+8], r8
.text:000000000000C27D                 jl      loc_C400
.text:000000000000C283                 mov     r10, rax
.text:000000000000C286
.text:000000000000C286 loc_C286:                               ; CODE XREF: check_dst_limits_isra_13+54↑j
.text:000000000000C286                 cmp     rbx, r10
.text:000000000000C289                 jl      short loc_C260
.text:000000000000C28B
.text:000000000000C28B loc_C28B:                               ; CODE XREF: check_dst_limits_isra_13+31↑j
.text:000000000000C28B                 cmp     r15, rbx
.text:000000000000C28E                 jle     loc_C430
.text:000000000000C294                 mov     r11, [rdi+0D8h]
.text:000000000000C29B                 lea     rax, [rbx+rbx*4]
.text:000000000000C29F                 lea     rax, [r11+rax*8]
.text:000000000000C2A3                 cmp     r8, [rax+8]
.text:000000000000C2A7                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C2AE                 cmovnz  rbx, rax
.text:000000000000C2B2
.text:000000000000C2B2 loc_C2B2:                               ; CODE XREF: check_dst_limits_isra_13+237↓j
.text:000000000000C2B2                 mov     rax, r15
.text:000000000000C2B5                 xor     ebp, ebp
.text:000000000000C2B7
.text:000000000000C2B7 loc_C2B7:                               ; CODE XREF: check_dst_limits_isra_13+227↓j
.text:000000000000C2B7                 cmp     rbp, rax
.text:000000000000C2BA                 jge     short loc_C314
.text:000000000000C2BC                 lea     r11, [rbp+rax+0]
.text:000000000000C2C1                 mov     r10, r11
.text:000000000000C2C4                 shr     r10, 3Fh
.text:000000000000C2C8                 add     r10, r11
.text:000000000000C2CB                 mov     r11, [rdi+0D8h]
.text:000000000000C2D2                 sar     r10, 1
.text:000000000000C2D5                 lea     r13, [r10+r10*4]
.text:000000000000C2D9                 cmp     r12, [r11+r13*8+8]
.text:000000000000C2DE                 jle     short loc_C30F
.text:000000000000C2E0                 jmp     loc_C410
.text:000000000000C2E0 ; ---------------------------------------------------------------------------
.text:000000000000C2E5                 align 8
.text:000000000000C2E8
.text:000000000000C2E8 loc_C2E8:                               ; CODE XREF: check_dst_limits_isra_13+112↓j
.text:000000000000C2E8                 lea     r13, [rbp+r10+0]
.text:000000000000C2ED                 mov     rax, r13
.text:000000000000C2F0                 shr     rax, 3Fh
.text:000000000000C2F4                 add     rax, r13
.text:000000000000C2F7                 sar     rax, 1
.text:000000000000C2FA                 lea     r13, [rax+rax*4]
.text:000000000000C2FE                 mov     r14, rax
.text:000000000000C301                 cmp     [r11+r13*8+8], r12
.text:000000000000C306                 jl      loc_C420
.text:000000000000C30C                 mov     r10, rax
.text:000000000000C30F
.text:000000000000C30F loc_C30F:                               ; CODE XREF: check_dst_limits_isra_13+DE↑j
.text:000000000000C30F                 cmp     rbp, r10
.text:000000000000C312                 jl      short loc_C2E8
.text:000000000000C314
.text:000000000000C314 loc_C314:                               ; CODE XREF: check_dst_limits_isra_13+BA↑j
.text:000000000000C314                 cmp     r15, rbp
.text:000000000000C317                 jle     loc_C440
.text:000000000000C31D                 mov     r10, [rdi+0D8h]
.text:000000000000C324                 lea     rax, [rbp+rbp*4+0]
.text:000000000000C329                 lea     rax, [r10+rax*8]
.text:000000000000C32D                 cmp     r12, [rax+8]
.text:000000000000C331                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C338                 cmovnz  rbp, rax
.text:000000000000C33C
.text:000000000000C33C loc_C33C:                               ; CODE XREF: check_dst_limits_isra_13+247↓j
.text:000000000000C33C                 cmp     qword ptr [rsi], 0
.text:000000000000C340                 jle     loc_C462
.text:000000000000C346                 mov     [rsp+78h+var_48], rbp
.text:000000000000C34B                 mov     [rsp+78h+var_58], r9
.text:000000000000C350                 mov     r13, rdi
.text:000000000000C353                 mov     [rsp+78h+var_60], r8
.text:000000000000C358                 mov     [rsp+78h+var_68], rcx
.text:000000000000C35D                 xor     r14d, r14d
.text:000000000000C360                 mov     [rsp+78h+var_40], rsi
.text:000000000000C365                 mov     [rsp+78h+var_50], rbx
.text:000000000000C36A                 mov     rbp, rdx
.text:000000000000C36D                 mov     r15, r12
.text:000000000000C370
.text:000000000000C370 loc_C370:                               ; CODE XREF: check_dst_limits_isra_13+25C↓j
.text:000000000000C370                 mov     rax, [rbp+0]
.text:000000000000C374                 mov     rdx, [r13+0D8h]
.text:000000000000C37B                 mov     rdi, r13
.text:000000000000C37E                 mov     r9, [rsp+78h+var_50]
.text:000000000000C383                 mov     r8, [rsp+78h+var_60]
.text:000000000000C388                 mov     rcx, [rsp+78h+var_68]
.text:000000000000C38D                 mov     rsi, [rax+r14*8]
.text:000000000000C391                 lea     rax, [rsi+rsi*4]
.text:000000000000C395                 lea     rax, [rdx+rax*8]
.text:000000000000C399                 mov     rdx, [rsp+78h+var_70]
.text:000000000000C39E                 mov     rax, [rax]
.text:000000000000C3A1                 shl     rax, 4
.text:000000000000C3A5                 add     rax, [rdx]
.text:000000000000C3A8                 mov     r12, [rax]
.text:000000000000C3AB                 mov     rdx, r12
.text:000000000000C3AE                 call    check_dst_limits_calc_pos
.text:000000000000C3B3                 mov     ebx, eax
.text:000000000000C3B5                 mov     rax, [rbp+0]
.text:000000000000C3B9                 mov     r9, [rsp+78h+var_48]
.text:000000000000C3BE                 mov     rcx, [rsp+78h+var_58]
.text:000000000000C3C3                 mov     r8, r15
.text:000000000000C3C6                 mov     rdx, r12
.text:000000000000C3C9                 mov     rdi, r13
.text:000000000000C3CC                 mov     rsi, [rax+r14*8]
.text:000000000000C3D0                 call    check_dst_limits_calc_pos
.text:000000000000C3D5                 cmp     ebx, eax
.text:000000000000C3D7                 jz      short loc_C450
.text:000000000000C3D9                 mov     eax, 1
.text:000000000000C3DE
.text:000000000000C3DE loc_C3DE:                               ; CODE XREF: check_dst_limits_isra_13+264↓j
.text:000000000000C3DE                 add     rsp, 48h
.text:000000000000C3E2                 pop     rbx
.text:000000000000C3E3                 pop     rbp
.text:000000000000C3E4                 pop     r12
.text:000000000000C3E6                 pop     r13
.text:000000000000C3E8                 pop     r14
.text:000000000000C3EA                 pop     r15
.text:000000000000C3EC                 retn
.text:000000000000C3EC ; ---------------------------------------------------------------------------
.text:000000000000C3ED                 align 10h
.text:000000000000C3F0
.text:000000000000C3F0 loc_C3F0:                               ; CODE XREF: check_dst_limits_isra_13+56↑j
.text:000000000000C3F0                 mov     r14, r10
.text:000000000000C3F3                 mov     r10, rbp
.text:000000000000C3F6                 db      2Eh
.text:000000000000C3F6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C400
.text:000000000000C400 loc_C400:                               ; CODE XREF: check_dst_limits_isra_13+7D↑j
.text:000000000000C400                 lea     rbx, [r14+1]
.text:000000000000C404                 mov     rbp, r10
.text:000000000000C407                 jmp     loc_C22E
.text:000000000000C407 ; ---------------------------------------------------------------------------
.text:000000000000C40C                 align 10h
.text:000000000000C410
.text:000000000000C410 loc_C410:                               ; CODE XREF: check_dst_limits_isra_13+E0↑j
.text:000000000000C410                 mov     r14, r10
.text:000000000000C413                 mov     r10, rax
.text:000000000000C416                 db      2Eh
.text:000000000000C416                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C420
.text:000000000000C420 loc_C420:                               ; CODE XREF: check_dst_limits_isra_13+106↑j
.text:000000000000C420                 lea     rbp, [r14+1]
.text:000000000000C424                 mov     rax, r10
.text:000000000000C427                 jmp     loc_C2B7
.text:000000000000C427 ; ---------------------------------------------------------------------------
.text:000000000000C42C                 align 10h
.text:000000000000C430
.text:000000000000C430 loc_C430:                               ; CODE XREF: check_dst_limits_isra_13+8E↑j
.text:000000000000C430                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C437                 jmp     loc_C2B2
.text:000000000000C437 ; ---------------------------------------------------------------------------
.text:000000000000C43C                 align 20h
.text:000000000000C440
.text:000000000000C440 loc_C440:                               ; CODE XREF: check_dst_limits_isra_13+117↑j
.text:000000000000C440                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000C447                 jmp     loc_C33C
.text:000000000000C447 ; ---------------------------------------------------------------------------
.text:000000000000C44C                 align 10h
.text:000000000000C450
.text:000000000000C450 loc_C450:                               ; CODE XREF: check_dst_limits_isra_13+1D7↑j
.text:000000000000C450                 mov     rax, [rsp+78h+var_40]
.text:000000000000C455                 add     r14, 1
.text:000000000000C459                 cmp     r14, [rax]
.text:000000000000C45C                 jl      loc_C370
.text:000000000000C462
.text:000000000000C462 loc_C462:                               ; CODE XREF: check_dst_limits_isra_13+140↑j
.text:000000000000C462                 xor     eax, eax
.text:000000000000C464                 jmp     loc_C3DE
.text:000000000000C464 ; } // starts at C200
.text:000000000000C464 check_dst_limits_isra_13 endp
.text:000000000000C464
.text:000000000000C464 ; ---------------------------------------------------------------------------
.text:000000000000C469                 align 10h
.text:000000000000C470
.text:000000000000C470 ; =============== S U B R O U T I N E =======================================
.text:000000000000C470
.text:000000000000C470
.text:000000000000C470 re_node_set_merge proc near             ; CODE XREF: calc_eclosure_iter+132↓p
.text:000000000000C470                                         ; check_arrival_expand_ecl+113↓p ...
.text:000000000000C470 ; __unwind {
.text:000000000000C470                 test    rsi, rsi
.text:000000000000C473                 jz      loc_C568
.text:000000000000C479                 mov     rdx, [rsi+8]
.text:000000000000C47D                 test    rdx, rdx
.text:000000000000C480                 jz      loc_C568
.text:000000000000C486                 push    r12
.text:000000000000C488                 push    rbp
.text:000000000000C489                 mov     r12, rsi
.text:000000000000C48C                 push    rbx
.text:000000000000C48D                 mov     rax, [rdi+8]
.text:000000000000C491                 mov     rbx, rdi
.text:000000000000C494                 mov     rsi, [rdi]
.text:000000000000C497                 lea     rcx, [rax+rdx*2]
.text:000000000000C49B                 cmp     rsi, rcx
.text:000000000000C49E                 jl      loc_C5E8
.text:000000000000C4A4
.text:000000000000C4A4 loc_C4A4:                               ; CODE XREF: re_node_set_merge+1A4↓j
.text:000000000000C4A4                 test    rax, rax
.text:000000000000C4A7                 jz      loc_C620
.text:000000000000C4AD                 lea     rbp, [rax+rdx*2]
.text:000000000000C4B1                 sub     rdx, 1
.text:000000000000C4B5                 sub     rax, 1
.text:000000000000C4B9                 mov     rdi, rdx
.text:000000000000C4BC                 not     rdi
.text:000000000000C4BF
.text:000000000000C4BF loc_C4BF:                               ; CODE XREF: re_node_set_merge+10E↓j
.text:000000000000C4BF                                         ; re_node_set_merge+11C↓j
.text:000000000000C4BF                 test    rdi, rdi
.text:000000000000C4C2                 jns     short loc_C500
.text:000000000000C4C4
.text:000000000000C4C4 loc_C4C4:                               ; CODE XREF: re_node_set_merge+8B↓j
.text:000000000000C4C4                 test    rax, rax
.text:000000000000C4C7                 js      short loc_C500
.text:000000000000C4C9                 mov     rcx, [rbx+10h]
.text:000000000000C4CD                 mov     rsi, [r12+10h]
.text:000000000000C4D2                 mov     rsi, [rsi+rdx*8]
.text:000000000000C4D6                 cmp     [rcx+rax*8], rsi
.text:000000000000C4DA                 jz      loc_C570
.text:000000000000C4E0                 jge     loc_C588
.text:000000000000C4E6                 sub     rdx, 1
.text:000000000000C4EA                 sub     rbp, 1
.text:000000000000C4EE                 mov     rdi, rdx
.text:000000000000C4F1                 mov     [rcx+rbp*8], rsi
.text:000000000000C4F5                 not     rdi
.text:000000000000C4F8                 test    rdi, rdi
.text:000000000000C4FB                 js      short loc_C4C4
.text:000000000000C4FD                 nop     dword ptr [rax]
.text:000000000000C500
.text:000000000000C500 loc_C500:                               ; CODE XREF: re_node_set_merge+52↑j
.text:000000000000C500                                         ; re_node_set_merge+57↑j
.text:000000000000C500                 test    rdx, rdx
.text:000000000000C503                 jns     loc_C598
.text:000000000000C509
.text:000000000000C509 loc_C509:                               ; CODE XREF: re_node_set_merge+145↓j
.text:000000000000C509                 mov     rcx, [rbx+8]
.text:000000000000C50D                 mov     rax, [r12+8]
.text:000000000000C512                 lea     r8, [rcx+rax*2-1]
.text:000000000000C517                 mov     rdx, r8
.text:000000000000C51A                 sub     rdx, rbp
.text:000000000000C51D                 add     rdx, 1
.text:000000000000C521                 jz      short loc_C55A
.text:000000000000C523                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000C527                 lea     rax, [rcx-1]
.text:000000000000C52B                 add     rcx, rdx
.text:000000000000C52E                 mov     [rbx+8], rcx
.text:000000000000C532                 nop     word ptr [rax+rax+00h]
.text:000000000000C538
.text:000000000000C538 loc_C538:                               ; CODE XREF: re_node_set_merge+E8↓j
.text:000000000000C538                                         ; re_node_set_merge+157↓j
.text:000000000000C538                 mov     rsi, [rdi+r8*8]
.text:000000000000C53C                 mov     rcx, [rdi+rax*8]
.text:000000000000C540                 lea     r9, [rax+rdx]
.text:000000000000C544                 lea     r9, [rdi+r9*8]
.text:000000000000C548                 cmp     rsi, rcx
.text:000000000000C54B                 jle     short loc_C5C0
.text:000000000000C54D                 sub     r8, 1
.text:000000000000C551                 sub     rdx, 1
.text:000000000000C555                 mov     [r9], rsi
.text:000000000000C558                 jnz     short loc_C538
.text:000000000000C55A
.text:000000000000C55A loc_C55A:                               ; CODE XREF: re_node_set_merge+B1↑j
.text:000000000000C55A                                         ; re_node_set_merge+1CF↓j
.text:000000000000C55A                 xor     eax, eax
.text:000000000000C55C
.text:000000000000C55C loc_C55C:                               ; CODE XREF: re_node_set_merge+16C↓j
.text:000000000000C55C                                         ; re_node_set_merge+1D9↓j
.text:000000000000C55C                 pop     rbx
.text:000000000000C55D                 pop     rbp
.text:000000000000C55E                 pop     r12
.text:000000000000C560                 retn
.text:000000000000C560 ; ---------------------------------------------------------------------------
.text:000000000000C561                 align 8
.text:000000000000C568
.text:000000000000C568 loc_C568:                               ; CODE XREF: re_node_set_merge+3↑j
.text:000000000000C568                                         ; re_node_set_merge+10↑j
.text:000000000000C568                 xor     eax, eax
.text:000000000000C56A                 retn
.text:000000000000C56A ; ---------------------------------------------------------------------------
.text:000000000000C56B                 align 10h
.text:000000000000C570
.text:000000000000C570 loc_C570:                               ; CODE XREF: re_node_set_merge+6A↑j
.text:000000000000C570                 sub     rdx, 1
.text:000000000000C574                 sub     rax, 1
.text:000000000000C578                 mov     rdi, rdx
.text:000000000000C57B                 not     rdi
.text:000000000000C57E                 jmp     loc_C4BF
.text:000000000000C57E ; ---------------------------------------------------------------------------
.text:000000000000C583                 align 8
.text:000000000000C588
.text:000000000000C588 loc_C588:                               ; CODE XREF: re_node_set_merge+70↑j
.text:000000000000C588                 sub     rax, 1
.text:000000000000C58C                 jmp     loc_C4BF
.text:000000000000C58C ; ---------------------------------------------------------------------------
.text:000000000000C591                 align 8
.text:000000000000C598
.text:000000000000C598 loc_C598:                               ; CODE XREF: re_node_set_merge+93↑j
.text:000000000000C598                 mov     rax, [rbx+10h]
.text:000000000000C59C                 add     rdx, 1
.text:000000000000C5A0                 mov     rsi, [r12+10h]  ; src
.text:000000000000C5A5                 sub     rbp, rdx
.text:000000000000C5A8                 shl     rdx, 3          ; n
.text:000000000000C5AC                 lea     rdi, [rax+rbp*8] ; dest
.text:000000000000C5B0                 call    _memcpy
.text:000000000000C5B5                 jmp     loc_C509
.text:000000000000C5B5 ; ---------------------------------------------------------------------------
.text:000000000000C5BA                 align 20h
.text:000000000000C5C0
.text:000000000000C5C0 loc_C5C0:                               ; CODE XREF: re_node_set_merge+DB↑j
.text:000000000000C5C0                 sub     rax, 1
.text:000000000000C5C4                 mov     [r9], rcx
.text:000000000000C5C7                 jns     loc_C538
.text:000000000000C5CD                 lea     rsi, [rdi+rbp*8] ; src
.text:000000000000C5D1                 shl     rdx, 3          ; n
.text:000000000000C5D5                 call    _memcpy
.text:000000000000C5DA                 xor     eax, eax
.text:000000000000C5DC                 jmp     loc_C55C
.text:000000000000C5DC ; ---------------------------------------------------------------------------
.text:000000000000C5E1                 align 8
.text:000000000000C5E8
.text:000000000000C5E8 loc_C5E8:                               ; CODE XREF: re_node_set_merge+2E↑j
.text:000000000000C5E8                 add     rdx, rsi
.text:000000000000C5EB                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000C5EF                 lea     rbp, [rdx+rdx]
.text:000000000000C5F3                 shl     rdx, 4
.text:000000000000C5F7                 mov     rsi, rdx        ; size
.text:000000000000C5FA                 call    _realloc
.text:000000000000C5FF                 test    rax, rax
.text:000000000000C602                 jz      short loc_C644
.text:000000000000C604                 mov     [rbx+10h], rax
.text:000000000000C608                 mov     [rbx], rbp
.text:000000000000C60B                 mov     rax, [rbx+8]
.text:000000000000C60F                 mov     rdx, [r12+8]
.text:000000000000C614                 jmp     loc_C4A4
.text:000000000000C614 ; ---------------------------------------------------------------------------
.text:000000000000C619                 align 20h
.text:000000000000C620
.text:000000000000C620 loc_C620:                               ; CODE XREF: re_node_set_merge+37↑j
.text:000000000000C620                 mov     [rbx+8], rdx
.text:000000000000C624                 mov     rax, [r12+8]
.text:000000000000C629                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000C62D                 mov     rsi, [r12+10h]  ; src
.text:000000000000C632                 lea     rdx, ds:0[rax*8] ; n
.text:000000000000C63A                 call    _memcpy
.text:000000000000C63F                 jmp     loc_C55A
.text:000000000000C644 ; ---------------------------------------------------------------------------
.text:000000000000C644
.text:000000000000C644 loc_C644:                               ; CODE XREF: re_node_set_merge+192↑j
.text:000000000000C644                 mov     eax, 0Ch
.text:000000000000C649                 jmp     loc_C55C
.text:000000000000C649 ; } // starts at C470
.text:000000000000C649 re_node_set_merge endp
.text:000000000000C649
.text:000000000000C649 ; ---------------------------------------------------------------------------
.text:000000000000C64E                 align 10h
.text:000000000000C650
.text:000000000000C650 ; =============== S U B R O U T I N E =======================================
.text:000000000000C650
.text:000000000000C650
.text:000000000000C650 calc_eclosure_iter proc near            ; CODE XREF: calc_eclosure_iter+28E↓p
.text:000000000000C650                                         ; re_compile_internal+A2A↓p
.text:000000000000C650
.text:000000000000C650 var_90          = qword ptr -90h
.text:000000000000C650 var_88          = qword ptr -88h
.text:000000000000C650 var_7D          = byte ptr -7Dh
.text:000000000000C650 var_7C          = dword ptr -7Ch
.text:000000000000C650 var_78          = xmmword ptr -78h
.text:000000000000C650 var_68          = qword ptr -68h
.text:000000000000C650 var_58          = xmmword ptr -58h
.text:000000000000C650 ptr             = qword ptr -48h
.text:000000000000C650 var_40          = qword ptr -40h
.text:000000000000C650
.text:000000000000C650 ; __unwind {
.text:000000000000C650                 push    r15
.text:000000000000C652                 push    r14
.text:000000000000C654                 mov     r15, rsi
.text:000000000000C657                 push    r13
.text:000000000000C659                 push    r12
.text:000000000000C65B                 push    rbp
.text:000000000000C65C                 push    rbx
.text:000000000000C65D                 lea     rbx, [rdx+rdx*2]
.text:000000000000C661                 mov     rbp, rdx
.text:000000000000C664                 sub     rsp, 68h
.text:000000000000C668                 mov     r12, [rsi+28h]
.text:000000000000C66C                 shl     rbx, 3
.text:000000000000C670                 mov     rax, fs:28h
.text:000000000000C679                 mov     [rsp+98h+var_40], rax
.text:000000000000C67E                 xor     eax, eax
.text:000000000000C680                 mov     [rsp+98h+var_88], rdi
.text:000000000000C685                 mov     [rsp+98h+var_7C], ecx
.text:000000000000C689                 add     r12, rbx
.text:000000000000C68C                 mov     rax, [r12+8]
.text:000000000000C691                 mov     qword ptr [rsp+98h+var_78+8], 0
.text:000000000000C69A                 lea     rdi, [rax+1]
.text:000000000000C69E                 mov     qword ptr [rsp+98h+var_78], rdi
.text:000000000000C6A3                 shl     rdi, 3          ; size
.text:000000000000C6A7                 call    _malloc
.text:000000000000C6AC                 test    rax, rax
.text:000000000000C6AF                 mov     [rsp+98h+var_68], rax
.text:000000000000C6B4                 jz      loc_C8F0
.text:000000000000C6BA                 mov     rax, [r15+30h]
.text:000000000000C6BE                 mov     rdx, [r15]
.text:000000000000C6C1                 mov     r13, rbp
.text:000000000000C6C4                 shl     r13, 4
.text:000000000000C6C8                 mov     qword ptr [rax+rbx+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000C6D1                 lea     rax, [rdx+r13]
.text:000000000000C6D5                 mov     r8d, [rax+8]
.text:000000000000C6D9                 test    r8d, 3FF00h
.text:000000000000C6E0                 jnz     loc_C880
.text:000000000000C6E6
.text:000000000000C6E6 loc_C6E6:                               ; CODE XREF: calc_eclosure_iter+24D↓j
.text:000000000000C6E6                                         ; calc_eclosure_iter+27D↓j
.text:000000000000C6E6                 test    byte ptr [rax+8], 8
.text:000000000000C6EA                 jz      loc_C7B0
.text:000000000000C6F0                 mov     rsi, [r15+28h]
.text:000000000000C6F4                 lea     rax, [rsi+rbx]
.text:000000000000C6F8                 cmp     qword ptr [rax+8], 0
.text:000000000000C6FD                 jle     loc_C7B0
.text:000000000000C703                 lea     rdx, [rsp+98h+var_78]
.text:000000000000C708                 mov     [rsp+98h+var_7D], 0
.text:000000000000C70D                 xor     r14d, r14d
.text:000000000000C710                 lea     r12, [rsp+98h+var_58]
.text:000000000000C715                 mov     [rsp+98h+var_90], rdx
.text:000000000000C71A                 jmp     short loc_C736
.text:000000000000C71A ; ---------------------------------------------------------------------------
.text:000000000000C71C                 align 20h
.text:000000000000C720
.text:000000000000C720 loc_C720:                               ; CODE XREF: calc_eclosure_iter+145↓j
.text:000000000000C720                                         ; calc_eclosure_iter+156↓j
.text:000000000000C720                 mov     rsi, [r15+28h]
.text:000000000000C724                 add     r14, 1
.text:000000000000C728                 lea     rax, [rsi+rbx]
.text:000000000000C72C                 cmp     [rax+8], r14
.text:000000000000C730                 jle     loc_C837
.text:000000000000C736
.text:000000000000C736 loc_C736:                               ; CODE XREF: calc_eclosure_iter+CA↑j
.text:000000000000C736                                         ; calc_eclosure_iter+1E1↓j
.text:000000000000C736                 mov     rax, [rax+10h]
.text:000000000000C73A                 mov     rdx, [rax+r14*8]
.text:000000000000C73E                 mov     rax, [r15+30h]
.text:000000000000C742                 lea     r8, [rdx+rdx*2]
.text:000000000000C746                 lea     r13, ds:0[r8*8]
.text:000000000000C74E                 add     rax, r13
.text:000000000000C751                 mov     rcx, [rax+8]
.text:000000000000C755                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C759                 jz      loc_C820
.text:000000000000C75F                 test    rcx, rcx
.text:000000000000C762                 jz      loc_C8D8
.text:000000000000C768                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000C76C                 movaps  [rsp+98h+var_58], xmm0
.text:000000000000C771                 mov     rax, [rax+10h]
.text:000000000000C775                 mov     [rsp+98h+ptr], rax
.text:000000000000C77A
.text:000000000000C77A loc_C77A:                               ; CODE XREF: calc_eclosure_iter+295↓j
.text:000000000000C77A                 mov     rdi, [rsp+98h+var_90]
.text:000000000000C77F                 mov     rsi, r12
.text:000000000000C782                 call    re_node_set_merge
.text:000000000000C787                 test    eax, eax
.text:000000000000C789                 jnz     short loc_C7F6
.text:000000000000C78B                 mov     rax, [r15+30h]
.text:000000000000C78F                 cmp     qword ptr [rax+r13+8], 0
.text:000000000000C795                 jnz     short loc_C720
.text:000000000000C797                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000C79C                 call    _free
.text:000000000000C7A1                 mov     [rsp+98h+var_7D], 1
.text:000000000000C7A6                 jmp     loc_C720
.text:000000000000C7A6 ; ---------------------------------------------------------------------------
.text:000000000000C7AB                 align 10h
.text:000000000000C7B0
.text:000000000000C7B0 loc_C7B0:                               ; CODE XREF: calc_eclosure_iter+9A↑j
.text:000000000000C7B0                                         ; calc_eclosure_iter+AD↑j ...
.text:000000000000C7B0                 lea     rdi, [rsp+98h+var_78]
.text:000000000000C7B5                 mov     rsi, rbp
.text:000000000000C7B8                 call    re_node_set_insert
.text:000000000000C7BD                 test    al, al
.text:000000000000C7BF                 jz      loc_C8F0
.text:000000000000C7C5                 mov     rax, [r15+30h]
.text:000000000000C7C9
.text:000000000000C7C9 loc_C7C9:                               ; CODE XREF: calc_eclosure_iter+209↓j
.text:000000000000C7C9                                         ; calc_eclosure_iter+214↓j
.text:000000000000C7C9                 movdqa  xmm0, [rsp+98h+var_78]
.text:000000000000C7CF                 movups  xmmword ptr [rax+rbx], xmm0
.text:000000000000C7D3                 mov     rdx, [rsp+98h+var_68]
.text:000000000000C7D8                 mov     [rax+rbx+10h], rdx
.text:000000000000C7DD
.text:000000000000C7DD loc_C7DD:                               ; CODE XREF: calc_eclosure_iter+222↓j
.text:000000000000C7DD                 mov     rbx, [rsp+98h+var_88]
.text:000000000000C7E2                 mov     rax, [rsp+98h+var_68]
.text:000000000000C7E7                 movdqa  xmm0, [rsp+98h+var_78]
.text:000000000000C7ED                 movaps  xmmword ptr [rbx], xmm0
.text:000000000000C7F0                 mov     [rbx+10h], rax
.text:000000000000C7F4                 xor     eax, eax
.text:000000000000C7F6
.text:000000000000C7F6 loc_C7F6:                               ; CODE XREF: calc_eclosure_iter+139↑j
.text:000000000000C7F6                                         ; calc_eclosure_iter+271↓j ...
.text:000000000000C7F6                 mov     rsi, [rsp+98h+var_40]
.text:000000000000C7FB                 xor     rsi, fs:28h
.text:000000000000C804                 jnz     loc_C8FA
.text:000000000000C80A                 add     rsp, 68h
.text:000000000000C80E                 pop     rbx
.text:000000000000C80F                 pop     rbp
.text:000000000000C810                 pop     r12
.text:000000000000C812                 pop     r13
.text:000000000000C814                 pop     r14
.text:000000000000C816                 pop     r15
.text:000000000000C818                 retn
.text:000000000000C818 ; ---------------------------------------------------------------------------
.text:000000000000C819                 align 20h
.text:000000000000C820
.text:000000000000C820 loc_C820:                               ; CODE XREF: calc_eclosure_iter+109↑j
.text:000000000000C820                 lea     rax, [rsi+rbx]
.text:000000000000C824                 add     r14, 1
.text:000000000000C828                 mov     [rsp+98h+var_7D], 1
.text:000000000000C82D                 cmp     [rax+8], r14
.text:000000000000C831                 jg      loc_C736
.text:000000000000C837
.text:000000000000C837 loc_C837:                               ; CODE XREF: calc_eclosure_iter+E0↑j
.text:000000000000C837                 lea     rdi, [rsp+98h+var_78]
.text:000000000000C83C                 mov     rsi, rbp
.text:000000000000C83F                 call    re_node_set_insert
.text:000000000000C844                 test    al, al
.text:000000000000C846                 jz      loc_C8F0
.text:000000000000C84C                 cmp     byte ptr [rsp+98h+var_7C], 1
.text:000000000000C851                 mov     rax, [r15+30h]
.text:000000000000C855                 lea     rdx, [rax+rbx]
.text:000000000000C859                 jz      loc_C7C9
.text:000000000000C85F                 cmp     [rsp+98h+var_7D], 0
.text:000000000000C864                 jz      loc_C7C9
.text:000000000000C86A                 mov     qword ptr [rdx+8], 0
.text:000000000000C872                 jmp     loc_C7DD
.text:000000000000C872 ; ---------------------------------------------------------------------------
.text:000000000000C877                 align 20h
.text:000000000000C880
.text:000000000000C880 loc_C880:                               ; CODE XREF: calc_eclosure_iter+90↑j
.text:000000000000C880                 cmp     qword ptr [r12+8], 0
.text:000000000000C886                 jz      loc_C7B0
.text:000000000000C88C                 mov     rcx, [r12+10h]
.text:000000000000C891                 mov     rcx, [rcx]
.text:000000000000C894                 shl     rcx, 4
.text:000000000000C898                 test    byte ptr [rdx+rcx+0Ah], 4
.text:000000000000C89D                 jnz     loc_C6E6
.text:000000000000C8A3                 shr     r8d, 8
.text:000000000000C8A7                 mov     rcx, rbp
.text:000000000000C8AA                 mov     rdx, rbp
.text:000000000000C8AD                 and     r8d, 3FFh
.text:000000000000C8B4                 mov     rsi, rbp
.text:000000000000C8B7                 mov     rdi, r15
.text:000000000000C8BA                 call    duplicate_node_closure
.text:000000000000C8BF                 test    eax, eax
.text:000000000000C8C1                 jnz     loc_C7F6
.text:000000000000C8C7                 mov     rax, [r15]
.text:000000000000C8CA                 add     rax, r13
.text:000000000000C8CD                 jmp     loc_C6E6
.text:000000000000C8CD ; ---------------------------------------------------------------------------
.text:000000000000C8D2                 align 8
.text:000000000000C8D8
.text:000000000000C8D8 loc_C8D8:                               ; CODE XREF: calc_eclosure_iter+112↑j
.text:000000000000C8D8                 mov     rsi, r15
.text:000000000000C8DB                 mov     rdi, r12
.text:000000000000C8DE                 call    calc_eclosure_iter
.text:000000000000C8E3                 test    eax, eax
.text:000000000000C8E5                 jz      loc_C77A
.text:000000000000C8EB                 jmp     loc_C7F6
.text:000000000000C8F0 ; ---------------------------------------------------------------------------
.text:000000000000C8F0
.text:000000000000C8F0 loc_C8F0:                               ; CODE XREF: calc_eclosure_iter+64↑j
.text:000000000000C8F0                                         ; calc_eclosure_iter+16F↑j ...
.text:000000000000C8F0                 mov     eax, 0Ch
.text:000000000000C8F5                 jmp     loc_C7F6
.text:000000000000C8FA ; ---------------------------------------------------------------------------
.text:000000000000C8FA
.text:000000000000C8FA loc_C8FA:                               ; CODE XREF: calc_eclosure_iter+1B4↑j
.text:000000000000C8FA                 call    ___stack_chk_fail
.text:000000000000C8FA ; } // starts at C650
.text:000000000000C8FA calc_eclosure_iter endp
.text:000000000000C8FA
.text:000000000000C8FA ; ---------------------------------------------------------------------------
.text:000000000000C8FF                 align 20h
.text:000000000000C900
.text:000000000000C900 ; =============== S U B R O U T I N E =======================================
.text:000000000000C900
.text:000000000000C900
.text:000000000000C900 check_arrival_expand_ecl proc near      ; CODE XREF: expand_bkref_cache+2A8↓p
.text:000000000000C900                                         ; check_arrival+374↓p ...
.text:000000000000C900
.text:000000000000C900 var_5C          = dword ptr -5Ch
.text:000000000000C900 var_58          = xmmword ptr -58h
.text:000000000000C900 ptr             = qword ptr -48h
.text:000000000000C900 var_40          = qword ptr -40h
.text:000000000000C900
.text:000000000000C900 ; __unwind {
.text:000000000000C900                 push    r15
.text:000000000000C902                 push    r14
.text:000000000000C904                 mov     r14, rdi
.text:000000000000C907                 push    r13
.text:000000000000C909                 push    r12
.text:000000000000C90B                 mov     r15, rsi
.text:000000000000C90E                 push    rbp
.text:000000000000C90F                 push    rbx
.text:000000000000C910                 mov     rbp, rdx
.text:000000000000C913                 mov     ebx, ecx
.text:000000000000C915                 sub     rsp, 38h
.text:000000000000C919                 mov     r12, [rsi+8]
.text:000000000000C91D                 mov     rax, fs:28h
.text:000000000000C926                 mov     [rsp+68h+var_40], rax
.text:000000000000C92B                 xor     eax, eax
.text:000000000000C92D                 mov     qword ptr [rsp+68h+var_58+8], 0
.text:000000000000C936                 lea     rdi, ds:0[r12*8] ; size
.text:000000000000C93E                 mov     qword ptr [rsp+68h+var_58], r12
.text:000000000000C943                 call    _malloc
.text:000000000000C948                 test    rax, rax
.text:000000000000C94B                 mov     [rsp+68h+ptr], rax
.text:000000000000C950                 jz      loc_CA4D
.text:000000000000C956                 test    r12, r12
.text:000000000000C959                 jle     loc_C9EB
.text:000000000000C95F                 lea     r12, [rsp+68h+var_58]
.text:000000000000C964                 xor     r13d, r13d
.text:000000000000C967                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C970
.text:000000000000C970 loc_C970:                               ; CODE XREF: check_arrival_expand_ecl+E9↓j
.text:000000000000C970                 mov     rax, [r15+10h]
.text:000000000000C974                 mov     rdx, [rax+r13*8]
.text:000000000000C978                 mov     rax, [r14+30h]
.text:000000000000C97C                 lea     rcx, [rdx+rdx*2]
.text:000000000000C980                 lea     rsi, [rax+rcx*8]
.text:000000000000C984                 mov     r8, [rsi+8]
.text:000000000000C988                 test    r8, r8
.text:000000000000C98B                 jle     loc_CA10
.text:000000000000C991                 mov     r10, [rsi+10h]
.text:000000000000C995                 mov     r9, [r14]
.text:000000000000C998                 xor     ecx, ecx
.text:000000000000C99A                 jmp     short loc_C9A9
.text:000000000000C99A ; ---------------------------------------------------------------------------
.text:000000000000C99C                 align 20h
.text:000000000000C9A0
.text:000000000000C9A0 loc_C9A0:                               ; CODE XREF: check_arrival_expand_ecl+BF↓j
.text:000000000000C9A0                                         ; check_arrival_expand_ecl+C4↓j
.text:000000000000C9A0                 add     rcx, 1
.text:000000000000C9A4                 cmp     r8, rcx
.text:000000000000C9A7                 jz      short loc_CA10
.text:000000000000C9A9
.text:000000000000C9A9 loc_C9A9:                               ; CODE XREF: check_arrival_expand_ecl+9A↑j
.text:000000000000C9A9                 mov     rdi, [r10+rcx*8]
.text:000000000000C9AD                 mov     rax, rdi
.text:000000000000C9B0                 shl     rax, 4
.text:000000000000C9B4                 add     rax, r9
.text:000000000000C9B7                 movzx   r11d, byte ptr [rax+8]
.text:000000000000C9BC                 cmp     ebx, r11d
.text:000000000000C9BF                 jnz     short loc_C9A0
.text:000000000000C9C1                 cmp     rbp, [rax]
.text:000000000000C9C4                 jnz     short loc_C9A0
.text:000000000000C9C6                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C9CA                 jz      short loc_CA10
.text:000000000000C9CC                 mov     r8d, ebx
.text:000000000000C9CF                 mov     rcx, rbp
.text:000000000000C9D2                 mov     rsi, r12
.text:000000000000C9D5                 mov     rdi, r14
.text:000000000000C9D8                 call    check_arrival_expand_ecl_sub
.text:000000000000C9DD                 test    eax, eax
.text:000000000000C9DF                 jnz     short loc_CA1C
.text:000000000000C9E1
.text:000000000000C9E1 loc_C9E1:                               ; CODE XREF: check_arrival_expand_ecl+11A↓j
.text:000000000000C9E1                 add     r13, 1
.text:000000000000C9E5                 cmp     [r15+8], r13
.text:000000000000C9E9                 jg      short loc_C970
.text:000000000000C9EB
.text:000000000000C9EB loc_C9EB:                               ; CODE XREF: check_arrival_expand_ecl+59↑j
.text:000000000000C9EB                 mov     rdi, [r15+10h]  ; ptr
.text:000000000000C9EF                 call    _free
.text:000000000000C9F4                 mov     rax, [rsp+68h+ptr]
.text:000000000000C9F9                 movdqa  xmm0, [rsp+68h+var_58]
.text:000000000000C9FF                 mov     [r15+10h], rax
.text:000000000000CA03                 xor     eax, eax
.text:000000000000CA05                 movaps  xmmword ptr [r15], xmm0
.text:000000000000CA09                 jmp     short loc_CA2E
.text:000000000000CA09 ; ---------------------------------------------------------------------------
.text:000000000000CA0B                 align 10h
.text:000000000000CA10
.text:000000000000CA10 loc_CA10:                               ; CODE XREF: check_arrival_expand_ecl+8B↑j
.text:000000000000CA10                                         ; check_arrival_expand_ecl+A7↑j ...
.text:000000000000CA10                 mov     rdi, r12
.text:000000000000CA13                 call    re_node_set_merge
.text:000000000000CA18                 test    eax, eax
.text:000000000000CA1A                 jz      short loc_C9E1
.text:000000000000CA1C
.text:000000000000CA1C loc_CA1C:                               ; CODE XREF: check_arrival_expand_ecl+DF↑j
.text:000000000000CA1C                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000CA21                 mov     [rsp+68h+var_5C], eax
.text:000000000000CA25                 call    _free
.text:000000000000CA2A                 mov     eax, [rsp+68h+var_5C]
.text:000000000000CA2E
.text:000000000000CA2E loc_CA2E:                               ; CODE XREF: check_arrival_expand_ecl+109↑j
.text:000000000000CA2E                                         ; check_arrival_expand_ecl+152↓j
.text:000000000000CA2E                 mov     rdx, [rsp+68h+var_40]
.text:000000000000CA33                 xor     rdx, fs:28h
.text:000000000000CA3C                 jnz     short loc_CA54
.text:000000000000CA3E                 add     rsp, 38h
.text:000000000000CA42                 pop     rbx
.text:000000000000CA43                 pop     rbp
.text:000000000000CA44                 pop     r12
.text:000000000000CA46                 pop     r13
.text:000000000000CA48                 pop     r14
.text:000000000000CA4A                 pop     r15
.text:000000000000CA4C                 retn
.text:000000000000CA4D ; ---------------------------------------------------------------------------
.text:000000000000CA4D
.text:000000000000CA4D loc_CA4D:                               ; CODE XREF: check_arrival_expand_ecl+50↑j
.text:000000000000CA4D                 mov     eax, 0Ch
.text:000000000000CA52                 jmp     short loc_CA2E
.text:000000000000CA54 ; ---------------------------------------------------------------------------
.text:000000000000CA54
.text:000000000000CA54 loc_CA54:                               ; CODE XREF: check_arrival_expand_ecl+13C↑j
.text:000000000000CA54                 call    ___stack_chk_fail
.text:000000000000CA54 ; } // starts at C900
.text:000000000000CA54 check_arrival_expand_ecl endp
.text:000000000000CA54
.text:000000000000CA54 ; ---------------------------------------------------------------------------
.text:000000000000CA59                 align 20h
.text:000000000000CA60
.text:000000000000CA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CA60
.text:000000000000CA60
.text:000000000000CA60 re_node_set_add_intersect proc near     ; CODE XREF: _sub_epsilon_src_nodes+9C↓p
.text:000000000000CA60                                         ; update_cur_sifted_state+107↓p
.text:000000000000CA60 ; __unwind {
.text:000000000000CA60                 mov     r9, [rsi+8]
.text:000000000000CA64                 xor     eax, eax
.text:000000000000CA66                 test    r9, r9
.text:000000000000CA69                 jz      locret_CB28
.text:000000000000CA6F                 mov     r11, [rdx+8]
.text:000000000000CA73                 test    r11, r11
.text:000000000000CA76                 jz      locret_CB28
.text:000000000000CA7C                 push    r13
.text:000000000000CA7E                 push    r12
.text:000000000000CA80                 lea     rax, [r9+r11]
.text:000000000000CA84                 push    rbp
.text:000000000000CA85                 push    rbx
.text:000000000000CA86                 mov     r12, rdx
.text:000000000000CA89                 mov     rbx, rdi
.text:000000000000CA8C                 mov     rbp, rsi
.text:000000000000CA8F                 sub     rsp, 8
.text:000000000000CA93                 mov     rcx, [rdi+8]
.text:000000000000CA97                 mov     r13, [rdi]
.text:000000000000CA9A                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000CA9E                 lea     rdx, [rax+rcx]
.text:000000000000CAA2                 cmp     rdx, r13
.text:000000000000CAA5                 jg      loc_CBD0
.text:000000000000CAAB
.text:000000000000CAAB loc_CAAB:                               ; CODE XREF: re_node_set_add_intersect+19C↓j
.text:000000000000CAAB                 lea     rsi, [rcx+r9]
.text:000000000000CAAF                 mov     r13, [rbp+10h]
.text:000000000000CAB3                 mov     rdx, [r12+10h]
.text:000000000000CAB8                 sub     r9, 1
.text:000000000000CABC                 sub     rcx, 1
.text:000000000000CAC0                 add     rsi, r11
.text:000000000000CAC3                 sub     r11, 1
.text:000000000000CAC7                 mov     rax, [r13+r9*8+0]
.text:000000000000CACC                 mov     r8, [rdx+r11*8]
.text:000000000000CAD0
.text:000000000000CAD0 loc_CAD0:                               ; CODE XREF: re_node_set_add_intersect+DB↓j
.text:000000000000CAD0                 cmp     rax, r8
.text:000000000000CAD3                 jz      short loc_CAE6
.text:000000000000CAD5
.text:000000000000CAD5 loc_CAD5:                               ; CODE XREF: re_node_set_add_intersect+84↓j
.text:000000000000CAD5                 jge     short loc_CB30
.text:000000000000CAD7                 sub     r11, 1
.text:000000000000CADB                 js      short loc_CB40
.text:000000000000CADD
.text:000000000000CADD loc_CADD:                               ; CODE XREF: re_node_set_add_intersect+C1↓j
.text:000000000000CADD                 mov     r8, [rdx+r11*8]
.text:000000000000CAE1                 cmp     rax, r8
.text:000000000000CAE4                 jnz     short loc_CAD5
.text:000000000000CAE6
.text:000000000000CAE6 loc_CAE6:                               ; CODE XREF: re_node_set_add_intersect+73↑j
.text:000000000000CAE6                 test    rcx, rcx
.text:000000000000CAE9                 jns     short loc_CAFA
.text:000000000000CAEB                 jmp     short loc_CB08
.text:000000000000CAEB ; ---------------------------------------------------------------------------
.text:000000000000CAED                 align 10h
.text:000000000000CAF0
.text:000000000000CAF0 loc_CAF0:                               ; CODE XREF: re_node_set_add_intersect+A1↓j
.text:000000000000CAF0                 sub     rcx, 1
.text:000000000000CAF4                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000CAF8                 jz      short loc_CB08
.text:000000000000CAFA
.text:000000000000CAFA loc_CAFA:                               ; CODE XREF: re_node_set_add_intersect+89↑j
.text:000000000000CAFA                 mov     r10, [rdi+rcx*8]
.text:000000000000CAFE                 cmp     r10, r8
.text:000000000000CB01                 jg      short loc_CAF0
.text:000000000000CB03                 cmp     r10, r8
.text:000000000000CB06                 jz      short loc_CB10
.text:000000000000CB08
.text:000000000000CB08 loc_CB08:                               ; CODE XREF: re_node_set_add_intersect+8B↑j
.text:000000000000CB08                                         ; re_node_set_add_intersect+98↑j
.text:000000000000CB08                 sub     rsi, 1
.text:000000000000CB0C                 mov     [rdi+rsi*8], r8
.text:000000000000CB10
.text:000000000000CB10 loc_CB10:                               ; CODE XREF: re_node_set_add_intersect+A6↑j
.text:000000000000CB10                 sub     r9, 1
.text:000000000000CB14                 js      short loc_CB40
.text:000000000000CB16                 sub     r11, 1
.text:000000000000CB1A                 js      short loc_CB40
.text:000000000000CB1C                 mov     rax, [r13+r9*8+0]
.text:000000000000CB21                 jmp     short loc_CADD
.text:000000000000CB21 ; ---------------------------------------------------------------------------
.text:000000000000CB23                 align 8
.text:000000000000CB28
.text:000000000000CB28 locret_CB28:                            ; CODE XREF: re_node_set_add_intersect+9↑j
.text:000000000000CB28                                         ; re_node_set_add_intersect+16↑j
.text:000000000000CB28                 rep retn
.text:000000000000CB28 ; ---------------------------------------------------------------------------
.text:000000000000CB2A                 align 10h
.text:000000000000CB30
.text:000000000000CB30 loc_CB30:                               ; CODE XREF: re_node_set_add_intersect:loc_CAD5↑j
.text:000000000000CB30                 sub     r9, 1
.text:000000000000CB34                 js      short loc_CB40
.text:000000000000CB36                 mov     rax, [r13+r9*8+0]
.text:000000000000CB3B                 jmp     short loc_CAD0
.text:000000000000CB3B ; ---------------------------------------------------------------------------
.text:000000000000CB3D                 align 20h
.text:000000000000CB40
.text:000000000000CB40 loc_CB40:                               ; CODE XREF: re_node_set_add_intersect+7B↑j
.text:000000000000CB40                                         ; re_node_set_add_intersect+B4↑j ...
.text:000000000000CB40                 mov     rcx, [rbx+8]
.text:000000000000CB44                 mov     rdx, [rbp+8]
.text:000000000000CB48                 add     rdx, rcx
.text:000000000000CB4B                 add     rdx, [r12+8]
.text:000000000000CB50                 lea     rax, [rcx-1]
.text:000000000000CB54                 lea     r9, [rdx-1]
.text:000000000000CB58                 sub     rdx, rsi
.text:000000000000CB5B                 add     rcx, rdx
.text:000000000000CB5E                 test    rdx, rdx
.text:000000000000CB61                 mov     [rbx+8], rcx
.text:000000000000CB65                 jle     short loc_CBAD
.text:000000000000CB67                 test    rax, rax
.text:000000000000CB6A                 js      short loc_CBAD
.text:000000000000CB6C                 nop     dword ptr [rax+00h]
.text:000000000000CB70
.text:000000000000CB70 loc_CB70:                               ; CODE XREF: re_node_set_add_intersect+130↓j
.text:000000000000CB70                                         ; re_node_set_add_intersect+14B↓j
.text:000000000000CB70                 mov     r8, [rdi+r9*8]
.text:000000000000CB74                 mov     rcx, [rdi+rax*8]
.text:000000000000CB78                 lea     r10, [rax+rdx]
.text:000000000000CB7C                 lea     r10, [rdi+r10*8]
.text:000000000000CB80                 cmp     r8, rcx
.text:000000000000CB83                 jle     short loc_CBA0
.text:000000000000CB85                 sub     r9, 1
.text:000000000000CB89                 sub     rdx, 1
.text:000000000000CB8D                 mov     [r10], r8
.text:000000000000CB90                 jnz     short loc_CB70
.text:000000000000CB92                 xor     edx, edx
.text:000000000000CB94                 jmp     short loc_CBB1
.text:000000000000CB94 ; ---------------------------------------------------------------------------
.text:000000000000CB96                 align 20h
.text:000000000000CBA0
.text:000000000000CBA0 loc_CBA0:                               ; CODE XREF: re_node_set_add_intersect+123↑j
.text:000000000000CBA0                 sub     rax, 1
.text:000000000000CBA4                 mov     [r10], rcx
.text:000000000000CBA7                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000CBAB                 jnz     short loc_CB70
.text:000000000000CBAD
.text:000000000000CBAD loc_CBAD:                               ; CODE XREF: re_node_set_add_intersect+105↑j
.text:000000000000CBAD                                         ; re_node_set_add_intersect+10A↑j
.text:000000000000CBAD                 shl     rdx, 3          ; n
.text:000000000000CBB1
.text:000000000000CBB1 loc_CBB1:                               ; CODE XREF: re_node_set_add_intersect+134↑j
.text:000000000000CBB1                 lea     rsi, [rdi+rsi*8] ; src
.text:000000000000CBB5                 call    _memcpy
.text:000000000000CBBA                 xor     eax, eax
.text:000000000000CBBC
.text:000000000000CBBC loc_CBBC:                               ; CODE XREF: re_node_set_add_intersect+1A6↓j
.text:000000000000CBBC                 add     rsp, 8
.text:000000000000CBC0                 pop     rbx
.text:000000000000CBC1                 pop     rbp
.text:000000000000CBC2                 pop     r12
.text:000000000000CBC4                 pop     r13
.text:000000000000CBC6                 retn
.text:000000000000CBC6 ; ---------------------------------------------------------------------------
.text:000000000000CBC7                 align 10h
.text:000000000000CBD0
.text:000000000000CBD0 loc_CBD0:                               ; CODE XREF: re_node_set_add_intersect+45↑j
.text:000000000000CBD0                 add     r13, rax
.text:000000000000CBD3                 lea     rsi, ds:0[r13*8] ; size
.text:000000000000CBDB                 call    _realloc
.text:000000000000CBE0                 test    rax, rax
.text:000000000000CBE3                 mov     rdi, rax
.text:000000000000CBE6                 jz      short loc_CC01
.text:000000000000CBE8                 mov     [rbx+10h], rax
.text:000000000000CBEC                 mov     [rbx], r13
.text:000000000000CBEF                 mov     rcx, [rbx+8]
.text:000000000000CBF3                 mov     r9, [rbp+8]
.text:000000000000CBF7                 mov     r11, [r12+8]
.text:000000000000CBFC                 jmp     loc_CAAB
.text:000000000000CC01 ; ---------------------------------------------------------------------------
.text:000000000000CC01
.text:000000000000CC01 loc_CC01:                               ; CODE XREF: re_node_set_add_intersect+186↑j
.text:000000000000CC01                 mov     eax, 0Ch
.text:000000000000CC06                 jmp     short loc_CBBC
.text:000000000000CC06 ; } // starts at CA60
.text:000000000000CC06 re_node_set_add_intersect endp
.text:000000000000CC06
.text:000000000000CC06 ; ---------------------------------------------------------------------------
.text:000000000000CC08                 align 10h
.text:000000000000CC10
.text:000000000000CC10 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC10
.text:000000000000CC10
.text:000000000000CC10 create_token_tree_isra_16 proc near     ; CODE XREF: duplicate_tree+3E↓p
.text:000000000000CC10                                         ; lower_subexp+82↓p ...
.text:000000000000CC10
.text:000000000000CC10 var_28          = qword ptr -28h
.text:000000000000CC10 var_20          = qword ptr -20h
.text:000000000000CC10 var_18          = qword ptr -18h
.text:000000000000CC10 var_10          = qword ptr -10h
.text:000000000000CC10
.text:000000000000CC10 ; __unwind {
.text:000000000000CC10                 push    rbx
.text:000000000000CC11                 mov     rbx, rdi
.text:000000000000CC14                 sub     rsp, 20h
.text:000000000000CC18                 mov     eax, [rsi]
.text:000000000000CC1A                 cmp     eax, 0Fh
.text:000000000000CC1D                 jz      short loc_CC98
.text:000000000000CC1F                 movsxd  r9, eax
.text:000000000000CC22                 lea     r10d, [rax+1]
.text:000000000000CC26                 mov     rdi, [rdi]
.text:000000000000CC29                 mov     rax, r9
.text:000000000000CC2C                 shl     rax, 6
.text:000000000000CC30                 add     rax, 8
.text:000000000000CC34
.text:000000000000CC34 loc_CC34:                               ; CODE XREF: create_token_tree_isra_16+D7↓j
.text:000000000000CC34                 shl     r9, 6
.text:000000000000CC38                 mov     [rsi], r10d
.text:000000000000CC3B                 add     rax, rdi
.text:000000000000CC3E                 lea     rsi, [rdi+r9]
.text:000000000000CC42                 mov     qword ptr [rsi+8], 0
.text:000000000000CC4A                 mov     [rsi+10h], rdx
.text:000000000000CC4E                 lea     rdi, [rsi+20h]
.text:000000000000CC52                 mov     [rsi+18h], rcx
.text:000000000000CC56                 movdqu  xmm0, xmmword ptr [r8]
.text:000000000000CC5B                 movups  xmmword ptr [rsi+30h], xmm0
.text:000000000000CC5F                 and     byte ptr [rdi+1Ah], 0F3h
.text:000000000000CC63                 test    rdx, rdx
.text:000000000000CC66                 mov     qword ptr [rsi+20h], 0
.text:000000000000CC6E                 mov     qword ptr [rsi+28h], 0
.text:000000000000CC76                 mov     qword ptr [rsi+40h], 0FFFFFFFFFFFFFFFFh
.text:000000000000CC7E                 jz      short loc_CC83
.text:000000000000CC80                 mov     [rdx], rax
.text:000000000000CC83
.text:000000000000CC83 loc_CC83:                               ; CODE XREF: create_token_tree_isra_16+6E↑j
.text:000000000000CC83                 test    rcx, rcx
.text:000000000000CC86                 jz      short loc_CC8B
.text:000000000000CC88                 mov     [rcx], rax
.text:000000000000CC8B
.text:000000000000CC8B loc_CC8B:                               ; CODE XREF: create_token_tree_isra_16+76↑j
.text:000000000000CC8B                                         ; create_token_tree_isra_16+DE↓j
.text:000000000000CC8B                 add     rsp, 20h
.text:000000000000CC8F                 pop     rbx
.text:000000000000CC90                 retn
.text:000000000000CC90 ; ---------------------------------------------------------------------------
.text:000000000000CC91                 align 8
.text:000000000000CC98
.text:000000000000CC98 loc_CC98:                               ; CODE XREF: create_token_tree_isra_16+D↑j
.text:000000000000CC98                 mov     edi, 3C8h       ; size
.text:000000000000CC9D                 mov     [rsp+28h+var_10], r8
.text:000000000000CCA2                 mov     [rsp+28h+var_18], rcx
.text:000000000000CCA7                 mov     [rsp+28h+var_20], rdx
.text:000000000000CCAC                 mov     [rsp+28h+var_28], rsi
.text:000000000000CCB0                 call    _malloc
.text:000000000000CCB5                 test    rax, rax
.text:000000000000CCB8                 mov     rdi, rax
.text:000000000000CCBB                 jz      short loc_CCEC
.text:000000000000CCBD                 mov     rax, [rbx]
.text:000000000000CCC0                 mov     r10d, 1
.text:000000000000CCC6                 mov     [rbx], rdi
.text:000000000000CCC9                 xor     r9d, r9d
.text:000000000000CCCC                 mov     r8, [rsp+28h+var_10]
.text:000000000000CCD1                 mov     rcx, [rsp+28h+var_18]
.text:000000000000CCD6                 mov     rdx, [rsp+28h+var_20]
.text:000000000000CCDB                 mov     rsi, [rsp+28h+var_28]
.text:000000000000CCDF                 mov     [rdi], rax
.text:000000000000CCE2                 mov     eax, 8
.text:000000000000CCE7                 jmp     loc_CC34
.text:000000000000CCEC ; ---------------------------------------------------------------------------
.text:000000000000CCEC
.text:000000000000CCEC loc_CCEC:                               ; CODE XREF: create_token_tree_isra_16+AB↑j
.text:000000000000CCEC                 xor     eax, eax
.text:000000000000CCEE                 jmp     short loc_CC8B
.text:000000000000CCEE ; } // starts at CC10
.text:000000000000CCEE create_token_tree_isra_16 endp
.text:000000000000CCEE
.text:000000000000CCF0
.text:000000000000CCF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCF0
.text:000000000000CCF0
.text:000000000000CCF0 duplicate_tree  proc near               ; CODE XREF: parse_expression+2AC↓p
.text:000000000000CCF0                                         ; parse_expression+408↓p ...
.text:000000000000CCF0
.text:000000000000CCF0 var_38          = qword ptr -38h
.text:000000000000CCF0 var_30          = qword ptr -30h
.text:000000000000CCF0
.text:000000000000CCF0 ; __unwind {
.text:000000000000CCF0                 push    r14
.text:000000000000CCF2                 push    r13
.text:000000000000CCF4                 lea     r13, [rsi+70h]
.text:000000000000CCF8                 push    r12
.text:000000000000CCFA                 push    rbp
.text:000000000000CCFB                 lea     r12, [rsi+80h]
.text:000000000000CD02                 push    rbx
.text:000000000000CD03                 mov     rbx, rdi
.text:000000000000CD06                 sub     rsp, 10h
.text:000000000000CD0A                 mov     rbp, [rdi]
.text:000000000000CD0D                 mov     rax, fs:28h
.text:000000000000CD16                 mov     [rsp+38h+var_30], rax
.text:000000000000CD1B                 xor     eax, eax
.text:000000000000CD1D                 mov     r14, rsp
.text:000000000000CD20
.text:000000000000CD20 loc_CD20:                               ; CODE XREF: duplicate_tree+65↓j
.text:000000000000CD20                                         ; duplicate_tree+C7↓j
.text:000000000000CD20                 lea     r8, [rbx+28h]
.text:000000000000CD24                 xor     ecx, ecx
.text:000000000000CD26                 xor     edx, edx
.text:000000000000CD28                 mov     rsi, r12
.text:000000000000CD2B                 mov     rdi, r13
.text:000000000000CD2E                 call    create_token_tree_isra_16
.text:000000000000CD33                 test    rax, rax
.text:000000000000CD36                 mov     [r14], rax
.text:000000000000CD39                 jz      short loc_CD8C
.text:000000000000CD3B                 mov     [rax], rbp
.text:000000000000CD3E                 mov     rbp, [r14]
.text:000000000000CD41                 or      byte ptr [rbp+32h], 4
.text:000000000000CD45                 mov     rax, [rbx+8]
.text:000000000000CD49                 test    rax, rax
.text:000000000000CD4C                 jz      short loc_CD60
.text:000000000000CD4E                 lea     r14, [rbp+8]
.text:000000000000CD52                 mov     rbx, rax
.text:000000000000CD55                 jmp     short loc_CD20
.text:000000000000CD55 ; ---------------------------------------------------------------------------
.text:000000000000CD57                 align 20h
.text:000000000000CD60
.text:000000000000CD60 loc_CD60:                               ; CODE XREF: duplicate_tree+5C↑j
.text:000000000000CD60                 xor     edx, edx
.text:000000000000CD62                 jmp     short loc_CD6B
.text:000000000000CD62 ; ---------------------------------------------------------------------------
.text:000000000000CD64                 align 8
.text:000000000000CD68
.text:000000000000CD68 loc_CD68:                               ; CODE XREF: duplicate_tree+96↓j
.text:000000000000CD68                 mov     rbx, rax
.text:000000000000CD6B
.text:000000000000CD6B loc_CD6B:                               ; CODE XREF: duplicate_tree+72↑j
.text:000000000000CD6B                 mov     rax, [rbx+10h]
.text:000000000000CD6F                 test    rax, rax
.text:000000000000CD72                 jz      short loc_CD79
.text:000000000000CD74                 cmp     rax, rdx
.text:000000000000CD77                 jnz     short loc_CDB0
.text:000000000000CD79
.text:000000000000CD79 loc_CD79:                               ; CODE XREF: duplicate_tree+82↑j
.text:000000000000CD79                 mov     rax, [rbx]
.text:000000000000CD7C                 mov     rbp, [rbp+0]
.text:000000000000CD80                 mov     rdx, rbx
.text:000000000000CD83                 test    rax, rax
.text:000000000000CD86                 jnz     short loc_CD68
.text:000000000000CD88                 mov     rax, [rsp+38h+var_38]
.text:000000000000CD8C
.text:000000000000CD8C loc_CD8C:                               ; CODE XREF: duplicate_tree+49↑j
.text:000000000000CD8C                 mov     rcx, [rsp+38h+var_30]
.text:000000000000CD91                 xor     rcx, fs:28h
.text:000000000000CD9A                 jnz     short loc_CDBC
.text:000000000000CD9C                 add     rsp, 10h
.text:000000000000CDA0                 pop     rbx
.text:000000000000CDA1                 pop     rbp
.text:000000000000CDA2                 pop     r12
.text:000000000000CDA4                 pop     r13
.text:000000000000CDA6                 pop     r14
.text:000000000000CDA8                 retn
.text:000000000000CDA8 ; ---------------------------------------------------------------------------
.text:000000000000CDA9                 align 10h
.text:000000000000CDB0
.text:000000000000CDB0 loc_CDB0:                               ; CODE XREF: duplicate_tree+87↑j
.text:000000000000CDB0                 lea     r14, [rbp+10h]
.text:000000000000CDB4                 mov     rbx, rax
.text:000000000000CDB7                 jmp     loc_CD20
.text:000000000000CDBC ; ---------------------------------------------------------------------------
.text:000000000000CDBC
.text:000000000000CDBC loc_CDBC:                               ; CODE XREF: duplicate_tree+AA↑j
.text:000000000000CDBC                 call    ___stack_chk_fail
.text:000000000000CDBC ; } // starts at CCF0
.text:000000000000CDBC duplicate_tree  endp
.text:000000000000CDBC
.text:000000000000CDBC ; ---------------------------------------------------------------------------
.text:000000000000CDC1                 align 10h
.text:000000000000CDD0
.text:000000000000CDD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CDD0
.text:000000000000CDD0
.text:000000000000CDD0 lower_subexp    proc near               ; CODE XREF: lower_subexps+68↓p
.text:000000000000CDD0                                         ; lower_subexps+88↓p
.text:000000000000CDD0
.text:000000000000CDD0 var_70          = qword ptr -70h
.text:000000000000CDD0 var_68          = qword ptr -68h
.text:000000000000CDD0 var_60          = qword ptr -60h
.text:000000000000CDD0 var_58          = byte ptr -58h
.text:000000000000CDD0 var_50          = byte ptr -50h
.text:000000000000CDD0 var_40          = qword ptr -40h
.text:000000000000CDD0
.text:000000000000CDD0 ; __unwind {
.text:000000000000CDD0                 push    r15
.text:000000000000CDD2                 push    r14
.text:000000000000CDD4                 push    r13
.text:000000000000CDD6                 push    r12
.text:000000000000CDD8                 mov     r13, rdx
.text:000000000000CDDB                 push    rbp
.text:000000000000CDDC                 push    rbx
.text:000000000000CDDD                 sub     rsp, 48h
.text:000000000000CDE1                 mov     rbx, [rsi]
.text:000000000000CDE4                 mov     rbp, [rdx+8]
.text:000000000000CDE8                 mov     rax, fs:28h
.text:000000000000CDF1                 mov     [rsp+78h+var_40], rax
.text:000000000000CDF6                 xor     eax, eax
.text:000000000000CDF8                 test    byte ptr [rsi+38h], 10h
.text:000000000000CDFC                 mov     [rsp+78h+var_60], rdi
.text:000000000000CE01                 jz      loc_CF78
.text:000000000000CE07                 test    rbp, rbp
.text:000000000000CE0A                 jz      short loc_CE80
.text:000000000000CE0C                 mov     rax, [rdx+28h]
.text:000000000000CE10                 cmp     rax, 3Fh ; '?'
.text:000000000000CE14                 jg      loc_CF4D
.text:000000000000CE1A                 mov     rdx, [rbx+0A0h]
.text:000000000000CE21                 bt      rdx, rax
.text:000000000000CE25                 jnb     loc_CF4D
.text:000000000000CE2B                 lea     rax, [rbx+70h]
.text:000000000000CE2F                 lea     r14, [rsp+78h+var_58]
.text:000000000000CE34                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000CE38                 xor     ecx, ecx
.text:000000000000CE3A                 xor     edx, edx
.text:000000000000CE3C                 mov     rsi, rbx
.text:000000000000CE3F                 mov     r15, rax
.text:000000000000CE42                 mov     r8, r14
.text:000000000000CE45                 mov     rdi, rax
.text:000000000000CE48                 mov     [rsp+78h+var_50], 8
.text:000000000000CE4D                 mov     [rsp+78h+var_70], rax
.text:000000000000CE52                 call    create_token_tree_isra_16
.text:000000000000CE57                 mov     rdi, r15
.text:000000000000CE5A                 mov     r8, r14
.text:000000000000CE5D                 xor     ecx, ecx
.text:000000000000CE5F                 xor     edx, edx
.text:000000000000CE61                 mov     rsi, rbx
.text:000000000000CE64                 mov     r12, rax
.text:000000000000CE67                 mov     [rsp+78h+var_50], 9
.text:000000000000CE6C                 call    create_token_tree_isra_16
.text:000000000000CE71                 mov     r15, rax
.text:000000000000CE74                 jmp     loc_CFCD
.text:000000000000CE74 ; ---------------------------------------------------------------------------
.text:000000000000CE79                 align 20h
.text:000000000000CE80
.text:000000000000CE80 loc_CE80:                               ; CODE XREF: lower_subexp+3A↑j
.text:000000000000CE80                 lea     rax, [rbx+70h]
.text:000000000000CE84                 lea     r14, [rsp+78h+var_58]
.text:000000000000CE89                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000CE8D                 xor     ecx, ecx
.text:000000000000CE8F                 xor     edx, edx
.text:000000000000CE91                 mov     rsi, rbx
.text:000000000000CE94                 mov     r15, rax
.text:000000000000CE97                 mov     r8, r14
.text:000000000000CE9A                 mov     rdi, rax
.text:000000000000CE9D                 mov     [rsp+78h+var_50], 8
.text:000000000000CEA2                 mov     [rsp+78h+var_70], rax
.text:000000000000CEA7                 call    create_token_tree_isra_16
.text:000000000000CEAC                 mov     rdi, r15
.text:000000000000CEAF                 mov     r8, r14
.text:000000000000CEB2                 xor     ecx, ecx
.text:000000000000CEB4                 xor     edx, edx
.text:000000000000CEB6                 mov     rsi, rbx
.text:000000000000CEB9                 mov     r12, rax
.text:000000000000CEBC                 mov     [rsp+78h+var_50], 9
.text:000000000000CEC1                 call    create_token_tree_isra_16
.text:000000000000CEC6                 mov     r11, rax
.text:000000000000CEC9                 mov     r15, rax
.text:000000000000CECC
.text:000000000000CECC loc_CECC:                               ; CODE XREF: lower_subexp+1F7↓j
.text:000000000000CECC                                         ; lower_subexp+21B↓j
.text:000000000000CECC                 mov     rdi, [rsp+78h+var_70]
.text:000000000000CED1                 mov     r8, r14
.text:000000000000CED4                 mov     rcx, r11
.text:000000000000CED7                 mov     rdx, r12
.text:000000000000CEDA                 mov     rsi, rbx
.text:000000000000CEDD                 mov     [rsp+78h+var_50], 10h
.text:000000000000CEE2                 mov     [rsp+78h+var_68], r11
.text:000000000000CEE7                 call    create_token_tree_isra_16
.text:000000000000CEEC                 test    rax, rax
.text:000000000000CEEF                 mov     rbp, rax
.text:000000000000CEF2                 jz      loc_CFF0
.text:000000000000CEF8                 mov     r11, [rsp+78h+var_68]
.text:000000000000CEFD                 test    r11, r11
.text:000000000000CF00                 jz      loc_CFF0
.text:000000000000CF06                 test    r12, r12
.text:000000000000CF09                 jz      loc_CFF0
.text:000000000000CF0F                 test    r15, r15
.text:000000000000CF12                 jz      loc_CFF0
.text:000000000000CF18                 mov     rax, [r13+28h]
.text:000000000000CF1C                 mov     [r15+28h], rax
.text:000000000000CF20                 mov     [r12+28h], rax
.text:000000000000CF25                 movzx   eax, byte ptr [r13+32h]
.text:000000000000CF2A                 movzx   edx, byte ptr [r15+32h]
.text:000000000000CF2F                 and     eax, 8
.text:000000000000CF32                 and     edx, 0FFFFFFF7h
.text:000000000000CF35                 mov     ecx, eax
.text:000000000000CF37                 or      edx, ecx
.text:000000000000CF39                 mov     [r15+32h], dl
.text:000000000000CF3D                 movzx   eax, byte ptr [r12+32h]
.text:000000000000CF43                 and     eax, 0FFFFFFF7h
.text:000000000000CF46                 or      eax, ecx
.text:000000000000CF48                 mov     [r12+32h], al
.text:000000000000CF4D
.text:000000000000CF4D loc_CF4D:                               ; CODE XREF: lower_subexp+44↑j
.text:000000000000CF4D                                         ; lower_subexp+55↑j ...
.text:000000000000CF4D                 mov     rdi, [rsp+78h+var_40]
.text:000000000000CF52                 xor     rdi, fs:28h
.text:000000000000CF5B                 mov     rax, rbp
.text:000000000000CF5E                 jnz     loc_D002
.text:000000000000CF64                 add     rsp, 48h
.text:000000000000CF68                 pop     rbx
.text:000000000000CF69                 pop     rbp
.text:000000000000CF6A                 pop     r12
.text:000000000000CF6C                 pop     r13
.text:000000000000CF6E                 pop     r14
.text:000000000000CF70                 pop     r15
.text:000000000000CF72                 retn
.text:000000000000CF72 ; ---------------------------------------------------------------------------
.text:000000000000CF73                 align 8
.text:000000000000CF78
.text:000000000000CF78 loc_CF78:                               ; CODE XREF: lower_subexp+31↑j
.text:000000000000CF78                 lea     rax, [rbx+70h]
.text:000000000000CF7C                 lea     r14, [rsp+78h+var_58]
.text:000000000000CF81                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000CF85                 xor     ecx, ecx
.text:000000000000CF87                 xor     edx, edx
.text:000000000000CF89                 mov     rsi, rbx
.text:000000000000CF8C                 mov     r15, rax
.text:000000000000CF8F                 mov     r8, r14
.text:000000000000CF92                 mov     rdi, rax
.text:000000000000CF95                 mov     [rsp+78h+var_50], 8
.text:000000000000CF9A                 mov     [rsp+78h+var_70], rax
.text:000000000000CF9F                 call    create_token_tree_isra_16
.text:000000000000CFA4                 xor     ecx, ecx
.text:000000000000CFA6                 xor     edx, edx
.text:000000000000CFA8                 mov     rdi, r15
.text:000000000000CFAB                 mov     r8, r14
.text:000000000000CFAE                 mov     rsi, rbx
.text:000000000000CFB1                 mov     r12, rax
.text:000000000000CFB4                 mov     [rsp+78h+var_50], 9
.text:000000000000CFB9                 call    create_token_tree_isra_16
.text:000000000000CFBE                 test    rbp, rbp
.text:000000000000CFC1                 mov     r15, rax
.text:000000000000CFC4                 mov     r11, rax
.text:000000000000CFC7                 jz      loc_CECC
.text:000000000000CFCD
.text:000000000000CFCD loc_CFCD:                               ; CODE XREF: lower_subexp+A4↑j
.text:000000000000CFCD                 mov     rdi, [rsp+78h+var_70]
.text:000000000000CFD2                 mov     r8, r14
.text:000000000000CFD5                 mov     rcx, r15
.text:000000000000CFD8                 mov     rdx, rbp
.text:000000000000CFDB                 mov     rsi, rbx
.text:000000000000CFDE                 mov     [rsp+78h+var_50], 10h
.text:000000000000CFE3                 call    create_token_tree_isra_16
.text:000000000000CFE8                 mov     r11, rax
.text:000000000000CFEB                 jmp     loc_CECC
.text:000000000000CFF0 ; ---------------------------------------------------------------------------
.text:000000000000CFF0
.text:000000000000CFF0 loc_CFF0:                               ; CODE XREF: lower_subexp+122↑j
.text:000000000000CFF0                                         ; lower_subexp+130↑j ...
.text:000000000000CFF0                 mov     rax, [rsp+78h+var_60]
.text:000000000000CFF5                 xor     ebp, ebp
.text:000000000000CFF7                 mov     dword ptr [rax], 0Ch
.text:000000000000CFFD                 jmp     loc_CF4D
.text:000000000000D002 ; ---------------------------------------------------------------------------
.text:000000000000D002
.text:000000000000D002 loc_D002:                               ; CODE XREF: lower_subexp+18E↑j
.text:000000000000D002                 call    ___stack_chk_fail
.text:000000000000D002 ; } // starts at CDD0
.text:000000000000D002 lower_subexp    endp
.text:000000000000D002
.text:000000000000D002 ; ---------------------------------------------------------------------------
.text:000000000000D007                 align 10h
.text:000000000000D010
.text:000000000000D010 ; =============== S U B R O U T I N E =======================================
.text:000000000000D010
.text:000000000000D010
.text:000000000000D010 lower_subexps   proc near               ; DATA XREF: re_compile_internal+666↓o
.text:000000000000D010
.text:000000000000D010 var_24          = dword ptr -24h
.text:000000000000D010 var_20          = qword ptr -20h
.text:000000000000D010
.text:000000000000D010 ; __unwind {
.text:000000000000D010                 push    rbp
.text:000000000000D011                 push    rbx
.text:000000000000D012                 mov     rbp, rdi
.text:000000000000D015                 mov     rbx, rsi
.text:000000000000D018                 sub     rsp, 18h
.text:000000000000D01C                 mov     rdx, [rsi+8]
.text:000000000000D020                 mov     rax, fs:28h
.text:000000000000D029                 mov     [rsp+28h+var_20], rax
.text:000000000000D02E                 xor     eax, eax
.text:000000000000D030                 mov     [rsp+28h+var_24], 0
.text:000000000000D038                 test    rdx, rdx
.text:000000000000D03B                 jz      short loc_D043
.text:000000000000D03D                 cmp     byte ptr [rdx+30h], 11h
.text:000000000000D041                 jz      short loc_D090
.text:000000000000D043
.text:000000000000D043 loc_D043:                               ; CODE XREF: lower_subexps+2B↑j
.text:000000000000D043                                         ; lower_subexps+94↓j ...
.text:000000000000D043                 mov     rdx, [rbx+10h]
.text:000000000000D047                 test    rdx, rdx
.text:000000000000D04A                 jz      short loc_D052
.text:000000000000D04C                 cmp     byte ptr [rdx+30h], 11h
.text:000000000000D050                 jz      short loc_D070
.text:000000000000D052
.text:000000000000D052 loc_D052:                               ; CODE XREF: lower_subexps+3A↑j
.text:000000000000D052                                         ; lower_subexps+74↓j ...
.text:000000000000D052                 mov     rcx, [rsp+28h+var_20]
.text:000000000000D057                 xor     rcx, fs:28h
.text:000000000000D060                 mov     eax, [rsp+28h+var_24]
.text:000000000000D064                 jnz     short loc_D0AB
.text:000000000000D066                 add     rsp, 18h
.text:000000000000D06A                 pop     rbx
.text:000000000000D06B                 pop     rbp
.text:000000000000D06C                 retn
.text:000000000000D06C ; ---------------------------------------------------------------------------
.text:000000000000D06D                 align 10h
.text:000000000000D070
.text:000000000000D070 loc_D070:                               ; CODE XREF: lower_subexps+40↑j
.text:000000000000D070                 lea     rdi, [rsp+28h+var_24]
.text:000000000000D075                 mov     rsi, rbp
.text:000000000000D078                 call    lower_subexp
.text:000000000000D07D                 test    rax, rax
.text:000000000000D080                 mov     [rbx+10h], rax
.text:000000000000D084                 jz      short loc_D052
.text:000000000000D086                 mov     [rax], rbx
.text:000000000000D089                 jmp     short loc_D052
.text:000000000000D089 ; ---------------------------------------------------------------------------
.text:000000000000D08B                 align 10h
.text:000000000000D090
.text:000000000000D090 loc_D090:                               ; CODE XREF: lower_subexps+31↑j
.text:000000000000D090                 lea     rdi, [rsp+28h+var_24]
.text:000000000000D095                 mov     rsi, rbp
.text:000000000000D098                 call    lower_subexp
.text:000000000000D09D                 test    rax, rax
.text:000000000000D0A0                 mov     [rbx+8], rax
.text:000000000000D0A4                 jz      short loc_D043
.text:000000000000D0A6                 mov     [rax], rbx
.text:000000000000D0A9                 jmp     short loc_D043
.text:000000000000D0AB ; ---------------------------------------------------------------------------
.text:000000000000D0AB
.text:000000000000D0AB loc_D0AB:                               ; CODE XREF: lower_subexps+54↑j
.text:000000000000D0AB                 call    ___stack_chk_fail
.text:000000000000D0AB ; } // starts at D010
.text:000000000000D0AB lower_subexps   endp
.text:000000000000D0AB
.text:000000000000D0B0
.text:000000000000D0B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D0B0
.text:000000000000D0B0
.text:000000000000D0B0 re_node_set_init_copy proc near         ; CODE XREF: re_node_set_init_union+EB↓j
.text:000000000000D0B0                                         ; re_acquire_state_context+E8↓p ...
.text:000000000000D0B0 ; __unwind {
.text:000000000000D0B0                 push    r12
.text:000000000000D0B2                 push    rbp
.text:000000000000D0B3                 push    rbx
.text:000000000000D0B4                 mov     rax, [rsi+8]
.text:000000000000D0B8                 mov     [rdi+8], rax
.text:000000000000D0BC                 mov     r12, [rsi+8]
.text:000000000000D0C0                 test    r12, r12
.text:000000000000D0C3                 jle     short loc_D100
.text:000000000000D0C5                 mov     rbx, rdi
.text:000000000000D0C8                 mov     [rdi], rax
.text:000000000000D0CB                 lea     rdi, ds:0[rax*8] ; size
.text:000000000000D0D3                 mov     rbp, rsi
.text:000000000000D0D6                 call    _malloc
.text:000000000000D0DB                 test    rax, rax
.text:000000000000D0DE                 mov     [rbx+10h], rax
.text:000000000000D0E2                 jz      short loc_D120
.text:000000000000D0E4                 mov     rsi, [rbp+10h]  ; src
.text:000000000000D0E8                 lea     rdx, ds:0[r12*8] ; n
.text:000000000000D0F0                 mov     rdi, rax        ; dest
.text:000000000000D0F3                 call    _memcpy
.text:000000000000D0F8                 xor     eax, eax
.text:000000000000D0FA
.text:000000000000D0FA loc_D0FA:                               ; CODE XREF: re_node_set_init_copy+84↓j
.text:000000000000D0FA                 pop     rbx
.text:000000000000D0FB                 pop     rbp
.text:000000000000D0FC                 pop     r12
.text:000000000000D0FE                 retn
.text:000000000000D0FE ; ---------------------------------------------------------------------------
.text:000000000000D0FF                 align 20h
.text:000000000000D100
.text:000000000000D100 loc_D100:                               ; CODE XREF: re_node_set_init_copy+13↑j
.text:000000000000D100                 pxor    xmm0, xmm0
.text:000000000000D104                 mov     qword ptr [rdi+10h], 0
.text:000000000000D10C                 xor     eax, eax
.text:000000000000D10E                 movups  xmmword ptr [rdi], xmm0
.text:000000000000D111                 pop     rbx
.text:000000000000D112                 pop     rbp
.text:000000000000D113                 pop     r12
.text:000000000000D115                 retn
.text:000000000000D115 ; ---------------------------------------------------------------------------
.text:000000000000D116                 align 20h
.text:000000000000D120
.text:000000000000D120 loc_D120:                               ; CODE XREF: re_node_set_init_copy+32↑j
.text:000000000000D120                 mov     qword ptr [rbx+8], 0
.text:000000000000D128                 mov     qword ptr [rbx], 0
.text:000000000000D12F                 mov     eax, 0Ch
.text:000000000000D134                 jmp     short loc_D0FA
.text:000000000000D134 ; } // starts at D0B0
.text:000000000000D134 re_node_set_init_copy endp
.text:000000000000D134
.text:000000000000D134 ; ---------------------------------------------------------------------------
.text:000000000000D136                 align 20h
.text:000000000000D140
.text:000000000000D140 ; =============== S U B R O U T I N E =======================================
.text:000000000000D140
.text:000000000000D140
.text:000000000000D140 re_node_set_init_union proc near        ; CODE XREF: merge_state_array+60↓p
.text:000000000000D140                                         ; transit_state_bkref_isra_34+4A1↓p ...
.text:000000000000D140 ; __unwind {
.text:000000000000D140                 test    rsi, rsi
.text:000000000000D143                 push    r14
.text:000000000000D145                 push    r13
.text:000000000000D147                 push    r12
.text:000000000000D149                 push    rbp
.text:000000000000D14A                 push    rbx
.text:000000000000D14B                 jz      loc_D1F5
.text:000000000000D151                 test    rdx, rdx
.text:000000000000D154                 mov     r13, [rsi+8]
.text:000000000000D158                 jz      loc_D1F0
.text:000000000000D15E                 test    r13, r13
.text:000000000000D161                 jle     loc_D1F0
.text:000000000000D167                 mov     r14, [rdx+8]
.text:000000000000D16B                 test    r14, r14
.text:000000000000D16E                 jle     loc_D223
.text:000000000000D174                 mov     r12, rdi
.text:000000000000D177                 lea     rdi, [r13+r14+0]
.text:000000000000D17C                 mov     rbx, rdx
.text:000000000000D17F                 mov     rbp, rsi
.text:000000000000D182                 mov     [r12], rdi
.text:000000000000D186                 shl     rdi, 3          ; size
.text:000000000000D18A                 call    _malloc
.text:000000000000D18F                 test    rax, rax
.text:000000000000D192                 mov     [r12+10h], rax
.text:000000000000D197                 jz      loc_D288
.text:000000000000D19D                 mov     r9, [rbx+10h]
.text:000000000000D1A1                 mov     r8, [rbp+10h]
.text:000000000000D1A5                 xor     ebx, ebx
.text:000000000000D1A7                 xor     ecx, ecx
.text:000000000000D1A9                 xor     esi, esi
.text:000000000000D1AB                 jmp     short loc_D1CE
.text:000000000000D1AB ; ---------------------------------------------------------------------------
.text:000000000000D1AD                 align 10h
.text:000000000000D1B0
.text:000000000000D1B0 loc_D1B0:                               ; CODE XREF: re_node_set_init_union+9D↓j
.text:000000000000D1B0                 setz    dil
.text:000000000000D1B4                 mov     [rax+rbx*8-8], rdx
.text:000000000000D1B9                 add     rsi, 1
.text:000000000000D1BD                 movzx   edi, dil
.text:000000000000D1C1                 add     rcx, rdi
.text:000000000000D1C4
.text:000000000000D1C4 loc_D1C4:                               ; CODE XREF: re_node_set_init_union+A8↓j
.text:000000000000D1C4                 cmp     r13, rsi
.text:000000000000D1C7                 jle     short loc_D230
.text:000000000000D1C9                 cmp     r14, rcx
.text:000000000000D1CC                 jle     short loc_D248
.text:000000000000D1CE
.text:000000000000D1CE loc_D1CE:                               ; CODE XREF: re_node_set_init_union+6B↑j
.text:000000000000D1CE                 mov     rdx, [r8+rsi*8]
.text:000000000000D1D2                 mov     rdi, [r9+rcx*8]
.text:000000000000D1D6                 add     rbx, 1
.text:000000000000D1DA                 cmp     rdx, rdi
.text:000000000000D1DD                 jle     short loc_D1B0
.text:000000000000D1DF                 add     rcx, 1
.text:000000000000D1E3                 mov     [rax+rbx*8-8], rdi
.text:000000000000D1E8                 jmp     short loc_D1C4
.text:000000000000D1E8 ; ---------------------------------------------------------------------------
.text:000000000000D1EA                 align 10h
.text:000000000000D1F0
.text:000000000000D1F0 loc_D1F0:                               ; CODE XREF: re_node_set_init_union+18↑j
.text:000000000000D1F0                                         ; re_node_set_init_union+21↑j
.text:000000000000D1F0                 test    r13, r13
.text:000000000000D1F3                 jg      short loc_D223
.text:000000000000D1F5
.text:000000000000D1F5 loc_D1F5:                               ; CODE XREF: re_node_set_init_union+B↑j
.text:000000000000D1F5                 test    rdx, rdx
.text:000000000000D1F8                 jz      short loc_D201
.text:000000000000D1FA                 cmp     qword ptr [rdx+8], 0
.text:000000000000D1FF                 jg      short loc_D220
.text:000000000000D201
.text:000000000000D201 loc_D201:                               ; CODE XREF: re_node_set_init_union+B8↑j
.text:000000000000D201                 pxor    xmm0, xmm0
.text:000000000000D205                 mov     qword ptr [rdi+10h], 0
.text:000000000000D20D                 xor     eax, eax
.text:000000000000D20F                 movaps  xmmword ptr [rdi], xmm0
.text:000000000000D212
.text:000000000000D212 loc_D212:                               ; CODE XREF: re_node_set_init_union+14D↓j
.text:000000000000D212                 pop     rbx
.text:000000000000D213                 pop     rbp
.text:000000000000D214                 pop     r12
.text:000000000000D216                 pop     r13
.text:000000000000D218                 pop     r14
.text:000000000000D21A                 retn
.text:000000000000D21A ; ---------------------------------------------------------------------------
.text:000000000000D21B                 align 20h
.text:000000000000D220
.text:000000000000D220 loc_D220:                               ; CODE XREF: re_node_set_init_union+BF↑j
.text:000000000000D220                 mov     rsi, rdx
.text:000000000000D223
.text:000000000000D223 loc_D223:                               ; CODE XREF: re_node_set_init_union+2E↑j
.text:000000000000D223                                         ; re_node_set_init_union+B3↑j
.text:000000000000D223                 pop     rbx
.text:000000000000D224                 pop     rbp
.text:000000000000D225                 pop     r12
.text:000000000000D227                 pop     r13
.text:000000000000D229                 pop     r14
.text:000000000000D22B                 jmp     re_node_set_init_copy
.text:000000000000D230 ; ---------------------------------------------------------------------------
.text:000000000000D230
.text:000000000000D230 loc_D230:                               ; CODE XREF: re_node_set_init_union+87↑j
.text:000000000000D230                 cmp     r14, rcx
.text:000000000000D233                 jg      short loc_D268
.text:000000000000D235
.text:000000000000D235 loc_D235:                               ; CODE XREF: re_node_set_init_union+123↓j
.text:000000000000D235                                         ; re_node_set_init_union+143↓j
.text:000000000000D235                 mov     [r12+8], rbx
.text:000000000000D23A                 xor     eax, eax
.text:000000000000D23C                 pop     rbx
.text:000000000000D23D                 pop     rbp
.text:000000000000D23E                 pop     r12
.text:000000000000D240                 pop     r13
.text:000000000000D242                 pop     r14
.text:000000000000D244                 retn
.text:000000000000D244 ; ---------------------------------------------------------------------------
.text:000000000000D245                 align 8
.text:000000000000D248
.text:000000000000D248 loc_D248:                               ; CODE XREF: re_node_set_init_union+8C↑j
.text:000000000000D248                 sub     r13, rsi
.text:000000000000D24B                 lea     rdi, [rax+rbx*8] ; dest
.text:000000000000D24F                 lea     rsi, [r8+rsi*8] ; src
.text:000000000000D253                 lea     rdx, ds:0[r13*8] ; n
.text:000000000000D25B                 add     rbx, r13
.text:000000000000D25E                 call    _memcpy
.text:000000000000D263                 jmp     short loc_D235
.text:000000000000D263 ; ---------------------------------------------------------------------------
.text:000000000000D265                 align 8
.text:000000000000D268
.text:000000000000D268 loc_D268:                               ; CODE XREF: re_node_set_init_union+F3↑j
.text:000000000000D268                 sub     r14, rcx
.text:000000000000D26B                 lea     rdi, [rax+rbx*8] ; dest
.text:000000000000D26F                 lea     rsi, [r9+rcx*8] ; src
.text:000000000000D273                 lea     rdx, ds:0[r14*8] ; n
.text:000000000000D27B                 add     rbx, r14
.text:000000000000D27E                 call    _memcpy
.text:000000000000D283                 jmp     short loc_D235
.text:000000000000D283 ; ---------------------------------------------------------------------------
.text:000000000000D285                 align 8
.text:000000000000D288
.text:000000000000D288 loc_D288:                               ; CODE XREF: re_node_set_init_union+57↑j
.text:000000000000D288                 mov     eax, 0Ch
.text:000000000000D28D                 jmp     loc_D212
.text:000000000000D28D ; } // starts at D140
.text:000000000000D28D re_node_set_init_union endp
.text:000000000000D28D
.text:000000000000D28D ; ---------------------------------------------------------------------------
.text:000000000000D292                 align 20h
.text:000000000000D2A0
.text:000000000000D2A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D2A0
.text:000000000000D2A0
.text:000000000000D2A0 re_acquire_state_context proc near      ; CODE XREF: build_trtable+255↓p
.text:000000000000D2A0                                         ; build_trtable+9A0↓p ...
.text:000000000000D2A0
.text:000000000000D2A0 var_54          = dword ptr -54h
.text:000000000000D2A0 var_50          = qword ptr -50h
.text:000000000000D2A0 var_48          = qword ptr -48h
.text:000000000000D2A0 var_40          = qword ptr -40h
.text:000000000000D2A0
.text:000000000000D2A0 ; __unwind {
.text:000000000000D2A0                 push    r15
.text:000000000000D2A2                 push    r14
.text:000000000000D2A4                 push    r13
.text:000000000000D2A6                 push    r12
.text:000000000000D2A8                 push    rbp
.text:000000000000D2A9                 push    rbx
.text:000000000000D2AA                 sub     rsp, 28h
.text:000000000000D2AE                 mov     r10, [rdx+8]
.text:000000000000D2B2                 test    r10, r10
.text:000000000000D2B5                 jz      loc_D53F
.text:000000000000D2BB                 mov     r8d, ecx
.text:000000000000D2BE                 test    r10, r10
.text:000000000000D2C1                 lea     r12, [r8+r10]
.text:000000000000D2C5                 jle     short loc_D2DC
.text:000000000000D2C7                 mov     rax, [rdx+10h]
.text:000000000000D2CB                 lea     r10, [rax+r10*8]
.text:000000000000D2CF                 nop
.text:000000000000D2D0
.text:000000000000D2D0 loc_D2D0:                               ; CODE XREF: re_acquire_state_context+3A↓j
.text:000000000000D2D0                 add     r12, [rax]
.text:000000000000D2D3                 add     rax, 8
.text:000000000000D2D7                 cmp     r10, rax
.text:000000000000D2DA                 jnz     short loc_D2D0
.text:000000000000D2DC
.text:000000000000D2DC loc_D2DC:                               ; CODE XREF: re_acquire_state_context+25↑j
.text:000000000000D2DC                 mov     rax, [rsi+88h]
.text:000000000000D2E3                 mov     rbp, rdx
.text:000000000000D2E6                 mov     [rsp+58h+var_54], ecx
.text:000000000000D2EA                 mov     r13, rsi
.text:000000000000D2ED                 mov     [rsp+58h+var_40], rdi
.text:000000000000D2F2                 and     rax, r12
.text:000000000000D2F5                 lea     rdx, [rax+rax*2]
.text:000000000000D2F9                 mov     rax, [rsi+40h]
.text:000000000000D2FD                 lea     rax, [rax+rdx*8]
.text:000000000000D301                 mov     r11, [rax]
.text:000000000000D304                 test    r11, r11
.text:000000000000D307                 jle     short loc_D360
.text:000000000000D309                 mov     rbx, [rax+10h]
.text:000000000000D30D                 xor     r10d, r10d
.text:000000000000D310                 mov     r9d, ecx
.text:000000000000D313                 jmp     short loc_D321
.text:000000000000D313 ; ---------------------------------------------------------------------------
.text:000000000000D315                 align 8
.text:000000000000D318
.text:000000000000D318 loc_D318:                               ; CODE XREF: re_acquire_state_context+88↓j
.text:000000000000D318                                         ; re_acquire_state_context+95↓j ...
.text:000000000000D318                 add     r10, 1
.text:000000000000D31C                 cmp     r10, r11
.text:000000000000D31F                 jz      short loc_D360
.text:000000000000D321
.text:000000000000D321 loc_D321:                               ; CODE XREF: re_acquire_state_context+73↑j
.text:000000000000D321                 mov     r14, [rbx+r10*8]
.text:000000000000D325                 cmp     [r14], r12
.text:000000000000D328                 jnz     short loc_D318
.text:000000000000D32A                 movzx   eax, byte ptr [r14+68h]
.text:000000000000D32F                 and     eax, 0Fh
.text:000000000000D332                 cmp     eax, r9d
.text:000000000000D335                 jnz     short loc_D318
.text:000000000000D337                 mov     rdi, [r14+50h]
.text:000000000000D33B                 test    rdi, rdi
.text:000000000000D33E                 jz      short loc_D318
.text:000000000000D340                 mov     rsi, rbp
.text:000000000000D343                 call    re_node_set_compare_part_2
.text:000000000000D348                 test    al, al
.text:000000000000D34A                 jz      short loc_D318
.text:000000000000D34C
.text:000000000000D34C loc_D34C:                               ; CODE XREF: re_acquire_state_context+208↓j
.text:000000000000D34C                                         ; re_acquire_state_context+224↓j ...
.text:000000000000D34C                 add     rsp, 28h
.text:000000000000D350                 mov     rax, r14
.text:000000000000D353                 pop     rbx
.text:000000000000D354                 pop     rbp
.text:000000000000D355                 pop     r12
.text:000000000000D357                 pop     r13
.text:000000000000D359                 pop     r14
.text:000000000000D35B                 pop     r15
.text:000000000000D35D                 retn
.text:000000000000D35D ; ---------------------------------------------------------------------------
.text:000000000000D35E                 align 20h
.text:000000000000D360
.text:000000000000D360 loc_D360:                               ; CODE XREF: re_acquire_state_context+67↑j
.text:000000000000D360                                         ; re_acquire_state_context+7F↑j
.text:000000000000D360                 mov     esi, 1          ; size
.text:000000000000D365                 mov     edi, 70h ; 'p'  ; nmemb
.text:000000000000D36A                 call    _calloc
.text:000000000000D36F                 test    rax, rax
.text:000000000000D372                 mov     r14, rax
.text:000000000000D375                 jz      loc_D4B6
.text:000000000000D37B                 lea     rax, [rax+8]
.text:000000000000D37F                 mov     rsi, rbp
.text:000000000000D382                 mov     rdi, rax
.text:000000000000D385                 mov     rbx, rax
.text:000000000000D388                 call    re_node_set_init_copy
.text:000000000000D38D                 test    eax, eax
.text:000000000000D38F                 jnz     loc_D54D
.text:000000000000D395                 movzx   eax, byte ptr [r14+68h]
.text:000000000000D39A                 movzx   edx, byte ptr [rsp+58h+var_54]
.text:000000000000D39F                 mov     [r14+50h], rbx
.text:000000000000D3A3                 and     edx, 0Fh
.text:000000000000D3A6                 and     eax, 0FFFFFFF0h
.text:000000000000D3A9                 or      eax, edx
.text:000000000000D3AB                 cmp     qword ptr [rbp+8], 0
.text:000000000000D3B0                 mov     [r14+68h], al
.text:000000000000D3B4                 jle     loc_D498
.text:000000000000D3BA                 lea     rcx, [r14+18h]
.text:000000000000D3BE                 xor     r15d, r15d
.text:000000000000D3C1                 mov     [rsp+58h+var_48], r12
.text:000000000000D3C6                 xor     r10d, r10d
.text:000000000000D3C9                 mov     r12, r13
.text:000000000000D3CC                 mov     r13, r15
.text:000000000000D3CF                 mov     [rsp+58h+var_50], rcx
.text:000000000000D3D4                 mov     r15, rbx
.text:000000000000D3D7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000D3E0
.text:000000000000D3E0 loc_D3E0:                               ; CODE XREF: re_acquire_state_context+1EA↓j
.text:000000000000D3E0                 mov     rax, [rbp+10h]
.text:000000000000D3E4                 mov     rax, [rax+r13*8]
.text:000000000000D3E8                 shl     rax, 4
.text:000000000000D3EC                 add     rax, [r12]
.text:000000000000D3F0                 movzx   esi, byte ptr [rax+8]
.text:000000000000D3F4                 mov     ebx, [rax+8]
.text:000000000000D3F7                 shr     ebx, 8
.text:000000000000D3FA                 and     bx, 3FFh
.text:000000000000D3FF                 cmp     esi, 1
.text:000000000000D402                 movzx   edi, bx
.text:000000000000D405                 jnz     short loc_D40B
.text:000000000000D407                 test    edi, edi
.text:000000000000D409                 jz      short loc_D482
.text:000000000000D40B
.text:000000000000D40B loc_D40B:                               ; CODE XREF: re_acquire_state_context+165↑j
.text:000000000000D40B                 movzx   edx, byte ptr [r14+68h]
.text:000000000000D410                 movzx   eax, byte ptr [rax+0Ah]
.text:000000000000D414                 mov     r9d, edx
.text:000000000000D417                 shr     al, 4
.text:000000000000D41A                 and     edx, 0FFFFFFDFh
.text:000000000000D41D                 shr     r9b, 5
.text:000000000000D421                 or      eax, r9d
.text:000000000000D424                 and     eax, 1
.text:000000000000D427                 shl     eax, 5
.text:000000000000D42A                 or      eax, edx
.text:000000000000D42C                 cmp     esi, 2
.text:000000000000D42F                 mov     [r14+68h], al
.text:000000000000D433                 jz      loc_D500
.text:000000000000D439                 cmp     esi, 4
.text:000000000000D43C                 jnz     short loc_D445
.text:000000000000D43E                 or      eax, 40h
.text:000000000000D441                 mov     [r14+68h], al
.text:000000000000D445
.text:000000000000D445 loc_D445:                               ; CODE XREF: re_acquire_state_context+19C↑j
.text:000000000000D445                                         ; re_acquire_state_context+267↓j
.text:000000000000D445                 test    edi, edi
.text:000000000000D447                 jz      short loc_D482
.text:000000000000D449                 cmp     r15, [r14+50h]
.text:000000000000D44D                 jz      loc_D510
.text:000000000000D453
.text:000000000000D453 loc_D453:                               ; CODE XREF: re_acquire_state_context+29A↓j
.text:000000000000D453                 test    bl, 1
.text:000000000000D456                 jz      short loc_D4D0
.text:000000000000D458                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000D45D                 jz      short loc_D468
.text:000000000000D45F                 test    bl, 2
.text:000000000000D462                 jz      short loc_D4DC
.text:000000000000D464                 nop     dword ptr [rax+00h]
.text:000000000000D468
.text:000000000000D468 loc_D468:                               ; CODE XREF: re_acquire_state_context+1BD↑j
.text:000000000000D468                                         ; re_acquire_state_context+23A↓j ...
.text:000000000000D468                 mov     rdx, r13
.text:000000000000D46B                 sub     rdx, r10
.text:000000000000D46E                 js      short loc_D47E
.text:000000000000D470                 mov     rsi, [rsp+58h+var_50]
.text:000000000000D475                 lea     rdi, [r14+10h]
.text:000000000000D479                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000D47E
.text:000000000000D47E loc_D47E:                               ; CODE XREF: re_acquire_state_context+1CE↑j
.text:000000000000D47E                 add     r10, 1
.text:000000000000D482
.text:000000000000D482 loc_D482:                               ; CODE XREF: re_acquire_state_context+169↑j
.text:000000000000D482                                         ; re_acquire_state_context+1A7↑j ...
.text:000000000000D482                 add     r13, 1
.text:000000000000D486                 cmp     r13, [rbp+8]
.text:000000000000D48A                 jl      loc_D3E0
.text:000000000000D490                 mov     r13, r12
.text:000000000000D493                 mov     r12, [rsp+58h+var_48]
.text:000000000000D498
.text:000000000000D498 loc_D498:                               ; CODE XREF: re_acquire_state_context+114↑j
.text:000000000000D498                 mov     rdx, r12
.text:000000000000D49B                 mov     rsi, r14
.text:000000000000D49E                 mov     rdi, r13
.text:000000000000D4A1                 call    register_state
.text:000000000000D4A6                 test    eax, eax
.text:000000000000D4A8                 jz      loc_D34C
.text:000000000000D4AE
.text:000000000000D4AE loc_D4AE:                               ; CODE XREF: re_acquire_state_context+281↓j
.text:000000000000D4AE                 mov     rdi, r14        ; ptr
.text:000000000000D4B1                 call    free_state
.text:000000000000D4B6
.text:000000000000D4B6 loc_D4B6:                               ; CODE XREF: re_acquire_state_context+D5↑j
.text:000000000000D4B6                                         ; re_acquire_state_context+290↓j ...
.text:000000000000D4B6                 mov     rax, [rsp+58h+var_40]
.text:000000000000D4BB                 xor     r14d, r14d
.text:000000000000D4BE                 mov     dword ptr [rax], 0Ch
.text:000000000000D4C4                 jmp     loc_D34C
.text:000000000000D4C4 ; ---------------------------------------------------------------------------
.text:000000000000D4C9                 align 10h
.text:000000000000D4D0
.text:000000000000D4D0 loc_D4D0:                               ; CODE XREF: re_acquire_state_context+1B6↑j
.text:000000000000D4D0                 test    bl, 2
.text:000000000000D4D3                 jz      short loc_D4DC
.text:000000000000D4D5                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000D4DA                 jnz     short loc_D468
.text:000000000000D4DC
.text:000000000000D4DC loc_D4DC:                               ; CODE XREF: re_acquire_state_context+1C2↑j
.text:000000000000D4DC                                         ; re_acquire_state_context+233↑j
.text:000000000000D4DC                 test    bl, 10h
.text:000000000000D4DF                 jz      short loc_D4E8
.text:000000000000D4E1                 test    byte ptr [rsp+58h+var_54], 2
.text:000000000000D4E6                 jz      short loc_D468
.text:000000000000D4E8
.text:000000000000D4E8 loc_D4E8:                               ; CODE XREF: re_acquire_state_context+23F↑j
.text:000000000000D4E8                 and     ebx, 40h
.text:000000000000D4EB                 jz      short loc_D482
.text:000000000000D4ED                 test    byte ptr [rsp+58h+var_54], 4
.text:000000000000D4F2                 jnz     short loc_D482
.text:000000000000D4F4                 jmp     loc_D468
.text:000000000000D4F4 ; ---------------------------------------------------------------------------
.text:000000000000D4F9                 align 20h
.text:000000000000D500
.text:000000000000D500 loc_D500:                               ; CODE XREF: re_acquire_state_context+193↑j
.text:000000000000D500                 or      eax, 10h
.text:000000000000D503                 mov     [r14+68h], al
.text:000000000000D507                 jmp     loc_D445
.text:000000000000D507 ; ---------------------------------------------------------------------------
.text:000000000000D50C                 align 10h
.text:000000000000D510
.text:000000000000D510 loc_D510:                               ; CODE XREF: re_acquire_state_context+1AD↑j
.text:000000000000D510                 mov     edi, 18h        ; size
.text:000000000000D515                 call    _malloc
.text:000000000000D51A                 test    rax, rax
.text:000000000000D51D                 mov     [r14+50h], rax
.text:000000000000D521                 jz      short loc_D4AE
.text:000000000000D523                 mov     rsi, rbp
.text:000000000000D526                 mov     rdi, rax
.text:000000000000D529                 call    re_node_set_init_copy
.text:000000000000D52E                 test    eax, eax
.text:000000000000D530                 jnz     short loc_D4B6
.text:000000000000D532                 or      byte ptr [r14+68h], 80h
.text:000000000000D537                 xor     r10d, r10d
.text:000000000000D53A                 jmp     loc_D453
.text:000000000000D53F ; ---------------------------------------------------------------------------
.text:000000000000D53F
.text:000000000000D53F loc_D53F:                               ; CODE XREF: re_acquire_state_context+15↑j
.text:000000000000D53F                 mov     dword ptr [rdi], 0
.text:000000000000D545                 xor     r14d, r14d
.text:000000000000D548                 jmp     loc_D34C
.text:000000000000D54D ; ---------------------------------------------------------------------------
.text:000000000000D54D
.text:000000000000D54D loc_D54D:                               ; CODE XREF: re_acquire_state_context+EF↑j
.text:000000000000D54D                 mov     rdi, r14        ; ptr
.text:000000000000D550                 call    _free
.text:000000000000D555                 jmp     loc_D4B6
.text:000000000000D555 ; } // starts at D2A0
.text:000000000000D555 re_acquire_state_context endp
.text:000000000000D555
.text:000000000000D555 ; ---------------------------------------------------------------------------
.text:000000000000D55A                 align 20h
.text:000000000000D560
.text:000000000000D560 ; =============== S U B R O U T I N E =======================================
.text:000000000000D560
.text:000000000000D560
.text:000000000000D560 re_acquire_state proc near              ; CODE XREF: merge_state_array+78↓p
.text:000000000000D560                                         ; expand_bkref_cache+1D0↓p ...
.text:000000000000D560 ; __unwind {
.text:000000000000D560                 push    r15
.text:000000000000D562                 push    r14
.text:000000000000D564                 push    r13
.text:000000000000D566                 push    r12
.text:000000000000D568                 push    rbp
.text:000000000000D569                 push    rbx
.text:000000000000D56A                 sub     rsp, 8
.text:000000000000D56E                 mov     rbp, [rdx+8]
.text:000000000000D572                 test    rbp, rbp
.text:000000000000D575                 jz      loc_D750
.text:000000000000D57B                 test    rbp, rbp
.text:000000000000D57E                 jle     short loc_D59C
.text:000000000000D580                 mov     rax, [rdx+10h]
.text:000000000000D584                 lea     rcx, [rax+rbp*8]
.text:000000000000D588                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000D590
.text:000000000000D590 loc_D590:                               ; CODE XREF: re_acquire_state+3A↓j
.text:000000000000D590                 add     rbp, [rax]
.text:000000000000D593                 add     rax, 8
.text:000000000000D597                 cmp     rcx, rax
.text:000000000000D59A                 jnz     short loc_D590
.text:000000000000D59C
.text:000000000000D59C loc_D59C:                               ; CODE XREF: re_acquire_state+1E↑j
.text:000000000000D59C                 mov     rax, [rsi+88h]
.text:000000000000D5A3                 mov     r14, rdx
.text:000000000000D5A6                 mov     r12, rsi
.text:000000000000D5A9                 mov     r13, rdi
.text:000000000000D5AC                 and     rax, rbp
.text:000000000000D5AF                 lea     rdx, [rax+rax*2]
.text:000000000000D5B3                 mov     rax, [rsi+40h]
.text:000000000000D5B7                 lea     rax, [rax+rdx*8]
.text:000000000000D5BB                 mov     r10, [rax]
.text:000000000000D5BE                 test    r10, r10
.text:000000000000D5C1                 jle     short loc_D5F6
.text:000000000000D5C3                 mov     r11, [rax+10h]
.text:000000000000D5C7                 xor     r9d, r9d
.text:000000000000D5CA                 nop     word ptr [rax+rax+00h]
.text:000000000000D5D0
.text:000000000000D5D0 loc_D5D0:                               ; CODE XREF: re_acquire_state+94↓j
.text:000000000000D5D0                 mov     rbx, [r11+r9*8]
.text:000000000000D5D4                 cmp     [rbx], rbp
.text:000000000000D5D7                 jnz     short loc_D5ED
.text:000000000000D5D9                 lea     rdi, [rbx+8]
.text:000000000000D5DD                 mov     rsi, r14
.text:000000000000D5E0                 call    re_node_set_compare_part_2
.text:000000000000D5E5                 test    al, al
.text:000000000000D5E7                 jnz     loc_D6EF
.text:000000000000D5ED
.text:000000000000D5ED loc_D5ED:                               ; CODE XREF: re_acquire_state+77↑j
.text:000000000000D5ED                 add     r9, 1
.text:000000000000D5F1                 cmp     r10, r9
.text:000000000000D5F4                 jnz     short loc_D5D0
.text:000000000000D5F6
.text:000000000000D5F6 loc_D5F6:                               ; CODE XREF: re_acquire_state+61↑j
.text:000000000000D5F6                 mov     esi, 1          ; size
.text:000000000000D5FB                 mov     edi, 70h ; 'p'  ; nmemb
.text:000000000000D600                 call    _calloc
.text:000000000000D605                 test    rax, rax
.text:000000000000D608                 mov     rbx, rax
.text:000000000000D60B                 jz      loc_D738
.text:000000000000D611                 lea     r15, [rax+8]
.text:000000000000D615                 mov     rsi, r14
.text:000000000000D618                 mov     rdi, r15
.text:000000000000D61B                 call    re_node_set_init_copy
.text:000000000000D620                 test    eax, eax
.text:000000000000D622                 jnz     loc_D730
.text:000000000000D628                 mov     rax, [r14+8]
.text:000000000000D62C                 mov     [rbx+50h], r15
.text:000000000000D630                 test    rax, rax
.text:000000000000D633                 jle     loc_D6DD
.text:000000000000D639                 mov     rsi, [r14+10h]
.text:000000000000D63D                 mov     r8, [r12]
.text:000000000000D641                 lea     r9, [rsi+rax*8]
.text:000000000000D645                 jmp     short loc_D694
.text:000000000000D645 ; ---------------------------------------------------------------------------
.text:000000000000D647                 align 10h
.text:000000000000D650
.text:000000000000D650 loc_D650:                               ; CODE XREF: re_acquire_state+145↓j
.text:000000000000D650                 movzx   ecx, byte ptr [rbx+68h]
.text:000000000000D654                 movzx   edx, byte ptr [rax+0Ah]
.text:000000000000D658                 mov     r10d, ecx
.text:000000000000D65B                 shr     dl, 4
.text:000000000000D65E                 and     ecx, 0FFFFFFDFh
.text:000000000000D661                 shr     r10b, 5
.text:000000000000D665                 or      edx, r10d
.text:000000000000D668                 and     edx, 1
.text:000000000000D66B                 shl     edx, 5
.text:000000000000D66E                 or      edx, ecx
.text:000000000000D670                 cmp     edi, 2
.text:000000000000D673                 mov     [rbx+68h], dl
.text:000000000000D676                 jz      loc_D708
.text:000000000000D67C                 cmp     edi, 4
.text:000000000000D67F                 jnz     loc_D718
.text:000000000000D685                 or      edx, 40h
.text:000000000000D688                 mov     [rbx+68h], dl
.text:000000000000D68B
.text:000000000000D68B loc_D68B:                               ; CODE XREF: re_acquire_state+14E↓j
.text:000000000000D68B                                         ; re_acquire_state+1AE↓j ...
.text:000000000000D68B                 add     rsi, 8
.text:000000000000D68F                 cmp     r9, rsi
.text:000000000000D692                 jz      short loc_D6DD
.text:000000000000D694
.text:000000000000D694 loc_D694:                               ; CODE XREF: re_acquire_state+E5↑j
.text:000000000000D694                                         ; re_acquire_state+17B↓j
.text:000000000000D694                 mov     rax, [rsi]
.text:000000000000D697                 shl     rax, 4
.text:000000000000D69B                 add     rax, r8
.text:000000000000D69E                 movzx   edi, byte ptr [rax+8]
.text:000000000000D6A2                 cmp     edi, 1
.text:000000000000D6A5                 jnz     short loc_D650
.text:000000000000D6A7                 test    dword ptr [rax+8], 3FF00h
.text:000000000000D6AE                 jz      short loc_D68B
.text:000000000000D6B0                 movzx   edx, byte ptr [rbx+68h]
.text:000000000000D6B4                 movzx   eax, byte ptr [rax+0Ah]
.text:000000000000D6B8                 mov     ecx, edx
.text:000000000000D6BA                 shr     al, 4
.text:000000000000D6BD                 and     edx, 0FFFFFFDFh
.text:000000000000D6C0                 shr     cl, 5
.text:000000000000D6C3                 or      eax, ecx
.text:000000000000D6C5                 and     eax, 1
.text:000000000000D6C8                 shl     eax, 5
.text:000000000000D6CB                 or      eax, edx
.text:000000000000D6CD                 mov     [rbx+68h], al
.text:000000000000D6D0
.text:000000000000D6D0 loc_D6D0:                               ; CODE XREF: re_acquire_state+1BB↓j
.text:000000000000D6D0                                         ; re_acquire_state+1CA↓j
.text:000000000000D6D0                 add     rsi, 8
.text:000000000000D6D4                 or      byte ptr [rbx+68h], 80h
.text:000000000000D6D8                 cmp     r9, rsi
.text:000000000000D6DB                 jnz     short loc_D694
.text:000000000000D6DD
.text:000000000000D6DD loc_D6DD:                               ; CODE XREF: re_acquire_state+D3↑j
.text:000000000000D6DD                                         ; re_acquire_state+132↑j
.text:000000000000D6DD                 mov     rdx, rbp
.text:000000000000D6E0                 mov     rsi, rbx
.text:000000000000D6E3                 mov     rdi, r12
.text:000000000000D6E6                 call    register_state
.text:000000000000D6EB                 test    eax, eax
.text:000000000000D6ED                 jnz     short loc_D744
.text:000000000000D6EF
.text:000000000000D6EF loc_D6EF:                               ; CODE XREF: re_acquire_state+87↑j
.text:000000000000D6EF                                         ; re_acquire_state+1E2↓j ...
.text:000000000000D6EF                 add     rsp, 8
.text:000000000000D6F3                 mov     rax, rbx
.text:000000000000D6F6                 pop     rbx
.text:000000000000D6F7                 pop     rbp
.text:000000000000D6F8                 pop     r12
.text:000000000000D6FA                 pop     r13
.text:000000000000D6FC                 pop     r14
.text:000000000000D6FE                 pop     r15
.text:000000000000D700                 retn
.text:000000000000D700 ; ---------------------------------------------------------------------------
.text:000000000000D701                 align 8
.text:000000000000D708
.text:000000000000D708 loc_D708:                               ; CODE XREF: re_acquire_state+116↑j
.text:000000000000D708                 or      edx, 10h
.text:000000000000D70B                 mov     [rbx+68h], dl
.text:000000000000D70E                 jmp     loc_D68B
.text:000000000000D70E ; ---------------------------------------------------------------------------
.text:000000000000D713                 align 8
.text:000000000000D718
.text:000000000000D718 loc_D718:                               ; CODE XREF: re_acquire_state+11F↑j
.text:000000000000D718                 cmp     edi, 0Ch
.text:000000000000D71B                 jz      short loc_D6D0
.text:000000000000D71D                 test    dword ptr [rax+8], 3FF00h
.text:000000000000D724                 jz      loc_D68B
.text:000000000000D72A                 jmp     short loc_D6D0
.text:000000000000D72A ; ---------------------------------------------------------------------------
.text:000000000000D72C                 align 10h
.text:000000000000D730
.text:000000000000D730 loc_D730:                               ; CODE XREF: re_acquire_state+C2↑j
.text:000000000000D730                 mov     rdi, rbx        ; ptr
.text:000000000000D733                 call    _free
.text:000000000000D738
.text:000000000000D738 loc_D738:                               ; CODE XREF: re_acquire_state+AB↑j
.text:000000000000D738                                         ; re_acquire_state+1EC↓j
.text:000000000000D738                 mov     dword ptr [r13+0], 0Ch
.text:000000000000D740                 xor     ebx, ebx
.text:000000000000D742                 jmp     short loc_D6EF
.text:000000000000D744 ; ---------------------------------------------------------------------------
.text:000000000000D744
.text:000000000000D744 loc_D744:                               ; CODE XREF: re_acquire_state+18D↑j
.text:000000000000D744                 mov     rdi, rbx        ; ptr
.text:000000000000D747                 call    free_state
.text:000000000000D74C                 jmp     short loc_D738
.text:000000000000D74C ; ---------------------------------------------------------------------------
.text:000000000000D74E                 align 10h
.text:000000000000D750
.text:000000000000D750 loc_D750:                               ; CODE XREF: re_acquire_state+15↑j
.text:000000000000D750                 mov     dword ptr [rdi], 0
.text:000000000000D756                 xor     ebx, ebx
.text:000000000000D758                 jmp     short loc_D6EF
.text:000000000000D758 ; } // starts at D560
.text:000000000000D758 re_acquire_state endp
.text:000000000000D758
.text:000000000000D758 ; ---------------------------------------------------------------------------
.text:000000000000D75A                 align 20h
.text:000000000000D760
.text:000000000000D760 ; =============== S U B R O U T I N E =======================================
.text:000000000000D760
.text:000000000000D760
.text:000000000000D760 merge_state_array proc near             ; CODE XREF: re_search_internal+167B↓p
.text:000000000000D760                                         ; update_cur_sifted_state+71B↓p
.text:000000000000D760
.text:000000000000D760 var_70          = qword ptr -70h
.text:000000000000D760 var_5C          = dword ptr -5Ch
.text:000000000000D760 var_58          = byte ptr -58h
.text:000000000000D760 ptr             = qword ptr -48h
.text:000000000000D760 var_40          = qword ptr -40h
.text:000000000000D760
.text:000000000000D760 ; __unwind {
.text:000000000000D760                 push    r15
.text:000000000000D762                 push    r14
.text:000000000000D764                 push    r13
.text:000000000000D766                 push    r12
.text:000000000000D768                 push    rbp
.text:000000000000D769                 push    rbx
.text:000000000000D76A                 sub     rsp, 48h
.text:000000000000D76E                 mov     rax, fs:28h
.text:000000000000D777                 mov     [rsp+78h+var_40], rax
.text:000000000000D77C                 xor     eax, eax
.text:000000000000D77E                 test    rcx, rcx
.text:000000000000D781                 jle     loc_D816
.text:000000000000D787                 lea     rax, [rsp+78h+var_5C]
.text:000000000000D78C                 mov     r14, rdi
.text:000000000000D78F                 mov     rbx, rsi
.text:000000000000D792                 mov     r12, rdx
.text:000000000000D795                 mov     rbp, rcx
.text:000000000000D798                 xor     r15d, r15d
.text:000000000000D79B                 lea     r13, [rsp+78h+var_58]
.text:000000000000D7A0                 mov     [rsp+78h+var_70], rax
.text:000000000000D7A5                 jmp     short loc_D7FC
.text:000000000000D7A5 ; ---------------------------------------------------------------------------
.text:000000000000D7A7                 align 10h
.text:000000000000D7B0
.text:000000000000D7B0 loc_D7B0:                               ; CODE XREF: merge_state_array+A7↓j
.text:000000000000D7B0                 test    rdx, rdx
.text:000000000000D7B3                 jz      short loc_D7F3
.text:000000000000D7B5                 add     rdx, 8
.text:000000000000D7B9                 add     rsi, 8
.text:000000000000D7BD                 mov     rdi, r13
.text:000000000000D7C0                 call    re_node_set_init_union
.text:000000000000D7C5                 test    eax, eax
.text:000000000000D7C7                 mov     [rsp+78h+var_5C], eax
.text:000000000000D7CB                 jnz     short loc_D818
.text:000000000000D7CD                 mov     rdi, [rsp+78h+var_70]
.text:000000000000D7D2                 mov     rdx, r13
.text:000000000000D7D5                 mov     rsi, r14
.text:000000000000D7D8                 call    re_acquire_state
.text:000000000000D7DD                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000D7E2                 mov     [rbx+r15*8], rax
.text:000000000000D7E6                 call    _free
.text:000000000000D7EB                 mov     eax, [rsp+78h+var_5C]
.text:000000000000D7EF                 test    eax, eax
.text:000000000000D7F1                 jnz     short loc_D818
.text:000000000000D7F3
.text:000000000000D7F3 loc_D7F3:                               ; CODE XREF: merge_state_array+53↑j
.text:000000000000D7F3                 add     r15, 1
.text:000000000000D7F7                 cmp     rbp, r15
.text:000000000000D7FA                 jz      short loc_D816
.text:000000000000D7FC
.text:000000000000D7FC loc_D7FC:                               ; CODE XREF: merge_state_array+45↑j
.text:000000000000D7FC                                         ; merge_state_array+B4↓j
.text:000000000000D7FC                 mov     rsi, [rbx+r15*8]
.text:000000000000D800                 mov     rdx, [r12+r15*8]
.text:000000000000D804                 test    rsi, rsi
.text:000000000000D807                 jnz     short loc_D7B0
.text:000000000000D809                 mov     [rbx+r15*8], rdx
.text:000000000000D80D                 add     r15, 1
.text:000000000000D811                 cmp     rbp, r15
.text:000000000000D814                 jnz     short loc_D7FC
.text:000000000000D816
.text:000000000000D816 loc_D816:                               ; CODE XREF: merge_state_array+21↑j
.text:000000000000D816                                         ; merge_state_array+9A↑j
.text:000000000000D816                 xor     eax, eax
.text:000000000000D818
.text:000000000000D818 loc_D818:                               ; CODE XREF: merge_state_array+6B↑j
.text:000000000000D818                                         ; merge_state_array+91↑j
.text:000000000000D818                 mov     rcx, [rsp+78h+var_40]
.text:000000000000D81D                 xor     rcx, fs:28h
.text:000000000000D826                 jnz     short loc_D837
.text:000000000000D828                 add     rsp, 48h
.text:000000000000D82C                 pop     rbx
.text:000000000000D82D                 pop     rbp
.text:000000000000D82E                 pop     r12
.text:000000000000D830                 pop     r13
.text:000000000000D832                 pop     r14
.text:000000000000D834                 pop     r15
.text:000000000000D836                 retn
.text:000000000000D837 ; ---------------------------------------------------------------------------
.text:000000000000D837
.text:000000000000D837 loc_D837:                               ; CODE XREF: merge_state_array+C6↑j
.text:000000000000D837                 call    ___stack_chk_fail
.text:000000000000D837 ; } // starts at D760
.text:000000000000D837 merge_state_array endp
.text:000000000000D837
.text:000000000000D837 ; ---------------------------------------------------------------------------
.text:000000000000D83C                 align 20h
.text:000000000000D840
.text:000000000000D840 ; =============== S U B R O U T I N E =======================================
.text:000000000000D840
.text:000000000000D840
.text:000000000000D840 expand_bkref_cache proc near            ; CODE XREF: check_arrival+3A0↓p
.text:000000000000D840                                         ; check_arrival+64E↓p
.text:000000000000D840
.text:000000000000D840 var_A8          = qword ptr -0A8h
.text:000000000000D840 var_A0          = qword ptr -0A0h
.text:000000000000D840 var_98          = qword ptr -98h
.text:000000000000D840 var_90          = qword ptr -90h
.text:000000000000D840 var_88          = qword ptr -88h
.text:000000000000D840 var_7C          = dword ptr -7Ch
.text:000000000000D840 var_78          = qword ptr -78h
.text:000000000000D840 var_70          = qword ptr -70h
.text:000000000000D840 var_5C          = dword ptr -5Ch
.text:000000000000D840 var_58          = qword ptr -58h
.text:000000000000D840 var_50          = qword ptr -50h
.text:000000000000D840 ptr             = qword ptr -48h
.text:000000000000D840 var_40          = qword ptr -40h
.text:000000000000D840
.text:000000000000D840 ; __unwind {
.text:000000000000D840                 push    r15
.text:000000000000D842                 push    r14
.text:000000000000D844                 push    r13
.text:000000000000D846                 push    r12
.text:000000000000D848                 mov     r12, rdx
.text:000000000000D84B                 push    rbp
.text:000000000000D84C                 push    rbx
.text:000000000000D84D                 mov     rbx, rdi
.text:000000000000D850                 mov     rbp, rsi
.text:000000000000D853                 xor     esi, esi
.text:000000000000D855                 sub     rsp, 78h
.text:000000000000D859                 mov     rdi, [rdi+0C8h]
.text:000000000000D860                 mov     rax, fs:28h
.text:000000000000D869                 mov     [rsp+0A8h+var_40], rax
.text:000000000000D86E                 xor     eax, eax
.text:000000000000D870                 mov     [rsp+0A8h+var_88], rcx
.text:000000000000D875                 mov     [rsp+0A8h+var_7C], r8d
.text:000000000000D87A                 mov     rdx, rdi
.text:000000000000D87D
.text:000000000000D87D loc_D87D:                               ; CODE XREF: expand_bkref_cache+F7↓j
.text:000000000000D87D                 cmp     rsi, rdx
.text:000000000000D880                 jge     short loc_D8D7
.text:000000000000D882                 lea     rax, [rsi+rdx]
.text:000000000000D886                 mov     r8, [rbx+0D8h]
.text:000000000000D88D                 mov     rcx, rax
.text:000000000000D890                 shr     rcx, 3Fh
.text:000000000000D894                 add     rcx, rax
.text:000000000000D897                 sar     rcx, 1
.text:000000000000D89A                 lea     rax, [rcx+rcx*4]
.text:000000000000D89E                 cmp     r12, [r8+rax*8+8]
.text:000000000000D8A3                 jle     short loc_D8D2
.text:000000000000D8A5                 jmp     loc_D928
.text:000000000000D8A5 ; ---------------------------------------------------------------------------
.text:000000000000D8AA                 align 10h
.text:000000000000D8B0
.text:000000000000D8B0 loc_D8B0:                               ; CODE XREF: expand_bkref_cache+95↓j
.text:000000000000D8B0                 lea     rdx, [rsi+rcx]
.text:000000000000D8B4                 mov     rax, rdx
.text:000000000000D8B7                 shr     rax, 3Fh
.text:000000000000D8BB                 add     rax, rdx
.text:000000000000D8BE                 sar     rax, 1
.text:000000000000D8C1                 lea     rdx, [rax+rax*4]
.text:000000000000D8C5                 mov     r9, rax
.text:000000000000D8C8                 cmp     r12, [r8+rdx*8+8]
.text:000000000000D8CD                 jg      short loc_D930
.text:000000000000D8CF                 mov     rcx, rax
.text:000000000000D8D2
.text:000000000000D8D2 loc_D8D2:                               ; CODE XREF: expand_bkref_cache+63↑j
.text:000000000000D8D2                 cmp     rsi, rcx
.text:000000000000D8D5                 jl      short loc_D8B0
.text:000000000000D8D7
.text:000000000000D8D7 loc_D8D7:                               ; CODE XREF: expand_bkref_cache+40↑j
.text:000000000000D8D7                 cmp     rdi, rsi
.text:000000000000D8DA                 jle     short loc_D8FD
.text:000000000000D8DC                 mov     rcx, [rbx+0D8h]
.text:000000000000D8E3                 lea     rax, [rsi+rsi*4]
.text:000000000000D8E7                 shl     rax, 3
.text:000000000000D8EB                 cmp     [rcx+rax+8], r12
.text:000000000000D8F0                 mov     [rsp+0A8h+var_78], rax
.text:000000000000D8F5                 jnz     short loc_D8FD
.text:000000000000D8F7                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D8FB                 jnz     short loc_D940
.text:000000000000D8FD
.text:000000000000D8FD loc_D8FD:                               ; CODE XREF: expand_bkref_cache+9A↑j
.text:000000000000D8FD                                         ; expand_bkref_cache+B5↑j ...
.text:000000000000D8FD                 xor     eax, eax
.text:000000000000D8FF
.text:000000000000D8FF loc_D8FF:                               ; CODE XREF: expand_bkref_cache+341↓j
.text:000000000000D8FF                                         ; expand_bkref_cache+356↓j ...
.text:000000000000D8FF                 mov     rbx, [rsp+0A8h+var_40]
.text:000000000000D904                 xor     rbx, fs:28h
.text:000000000000D90D                 jnz     loc_DBD9
.text:000000000000D913                 add     rsp, 78h
.text:000000000000D917                 pop     rbx
.text:000000000000D918                 pop     rbp
.text:000000000000D919                 pop     r12
.text:000000000000D91B                 pop     r13
.text:000000000000D91D                 pop     r14
.text:000000000000D91F                 pop     r15
.text:000000000000D921                 retn
.text:000000000000D921 ; ---------------------------------------------------------------------------
.text:000000000000D922                 align 8
.text:000000000000D928
.text:000000000000D928 loc_D928:                               ; CODE XREF: expand_bkref_cache+65↑j
.text:000000000000D928                 mov     r9, rcx
.text:000000000000D92B                 mov     rcx, rdx
.text:000000000000D92E                 xchg    ax, ax
.text:000000000000D930
.text:000000000000D930 loc_D930:                               ; CODE XREF: expand_bkref_cache+8D↑j
.text:000000000000D930                 lea     rsi, [r9+1]
.text:000000000000D934                 mov     rdx, rcx
.text:000000000000D937                 jmp     loc_D87D
.text:000000000000D937 ; ---------------------------------------------------------------------------
.text:000000000000D93C                 align 20h
.text:000000000000D940
.text:000000000000D940 loc_D940:                               ; CODE XREF: expand_bkref_cache+BB↑j
.text:000000000000D940                 lea     rax, [rbp+10h]
.text:000000000000D944                 mov     r13, [rbx+98h]
.text:000000000000D94B                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000D94F                 lea     rax, [rsp+0A8h+var_5C]
.text:000000000000D954                 mov     [rsp+0A8h+var_70], rax
.text:000000000000D959                 lea     rax, [rsp+0A8h+var_58]
.text:000000000000D95E                 mov     [rsp+0A8h+var_98], rax
.text:000000000000D963
.text:000000000000D963 loc_D963:                               ; CODE XREF: expand_bkref_cache+2E1↓j
.text:000000000000D963                 mov     rax, [rsp+0A8h+var_78]
.text:000000000000D968                 lea     r15, [rcx+rax]
.text:000000000000D96C                 jmp     loc_DA48
.text:000000000000D96C ; ---------------------------------------------------------------------------
.text:000000000000D971                 align 8
.text:000000000000D978
.text:000000000000D978 loc_D978:                               ; CODE XREF: expand_bkref_cache+234↓j
.text:000000000000D978                 mov     rax, [r13+18h]
.text:000000000000D97C                 mov     rcx, [rax+r10*8]
.text:000000000000D980                 mov     r10, [rbx+0B8h]
.text:000000000000D987                 lea     rax, ds:0[r14*8]
.text:000000000000D98F                 mov     [rsp+0A8h+var_90], rax
.text:000000000000D994                 add     r10, rax
.text:000000000000D997                 mov     [rsp+0A8h+var_A0], rcx
.text:000000000000D99C                 mov     r9, [r10]
.text:000000000000D99F                 test    r9, r9
.text:000000000000D9A2                 jz      loc_DB30
.text:000000000000D9A8                 mov     rdi, [r9+10h]
.text:000000000000D9AC                 lea     rsi, [r9+18h]
.text:000000000000D9B0                 mov     rdx, rcx
.text:000000000000D9B3                 call    re_node_set_contains_isra_3
.text:000000000000D9B8                 test    rax, rax
.text:000000000000D9BB                 jnz     short loc_DA39
.text:000000000000D9BD                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000D9C2                 lea     rsi, [r9+8]
.text:000000000000D9C6                 call    re_node_set_init_copy
.text:000000000000D9CB                 mov     rsi, [rsp+0A8h+var_A0]
.text:000000000000D9D0                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000D9D5                 mov     [rsp+0A8h+var_5C], eax
.text:000000000000D9D9                 call    re_node_set_insert
.text:000000000000D9DE                 mov     edx, [rsp+0A8h+var_5C]
.text:000000000000D9E2                 test    edx, edx
.text:000000000000D9E4                 jnz     loc_DB86
.text:000000000000D9EA                 cmp     al, 1
.text:000000000000D9EC                 jnz     loc_DB86
.text:000000000000D9F2                 mov     r10, [rsp+0A8h+var_90]
.text:000000000000D9F7                 add     r10, [rbx+0B8h]
.text:000000000000D9FE
.text:000000000000D9FE loc_D9FE:                               ; CODE XREF: expand_bkref_cache+330↓j
.text:000000000000D9FE                 mov     rdx, [rsp+0A8h+var_98]
.text:000000000000DA03                 mov     rdi, [rsp+0A8h+var_70]
.text:000000000000DA08                 mov     rsi, r13
.text:000000000000DA0B                 mov     [rsp+0A8h+var_A0], r10
.text:000000000000DA10                 call    re_acquire_state
.text:000000000000DA15                 mov     r10, [rsp+0A8h+var_A0]
.text:000000000000DA1A                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000DA1F                 mov     [r10], rax
.text:000000000000DA22                 call    _free
.text:000000000000DA27                 mov     rax, [rbx+0B8h]
.text:000000000000DA2E                 cmp     qword ptr [rax+r14*8], 0
.text:000000000000DA33                 jz      loc_DB75
.text:000000000000DA39
.text:000000000000DA39 loc_DA39:                               ; CODE XREF: expand_bkref_cache+17B↑j
.text:000000000000DA39                                         ; expand_bkref_cache+221↓j ...
.text:000000000000DA39                 add     r15, 28h ; '('
.text:000000000000DA3D                 cmp     byte ptr [r15-8], 0
.text:000000000000DA42                 jz      loc_D8FD
.text:000000000000DA48
.text:000000000000DA48 loc_DA48:                               ; CODE XREF: expand_bkref_cache+12C↑j
.text:000000000000DA48                 mov     r10, [r15]
.text:000000000000DA4B                 mov     r9, [rbp+8]
.text:000000000000DA4F                 mov     rsi, [rsp+0A8h+var_A8]
.text:000000000000DA53                 mov     rdx, r10
.text:000000000000DA56                 mov     rdi, r9
.text:000000000000DA59                 call    re_node_set_contains_isra_3
.text:000000000000DA5E                 test    rax, rax
.text:000000000000DA61                 jz      short loc_DA39
.text:000000000000DA63                 mov     r8, [r15+18h]
.text:000000000000DA67                 add     r8, r12
.text:000000000000DA6A                 mov     r14, r8
.text:000000000000DA6D                 sub     r14, [r15+10h]
.text:000000000000DA71                 cmp     r12, r14
.text:000000000000DA74                 jnz     loc_D978
.text:000000000000DA7A                 mov     rcx, [r13+28h]
.text:000000000000DA7E                 lea     rax, [r10+r10*2]
.text:000000000000DA82                 mov     rsi, [rsp+0A8h+var_A8]
.text:000000000000DA86                 mov     rdi, r9
.text:000000000000DA89                 lea     rax, [rcx+rax*8]
.text:000000000000DA8D                 mov     rax, [rax+10h]
.text:000000000000DA91                 mov     r14, [rax]
.text:000000000000DA94                 mov     rdx, r14
.text:000000000000DA97                 call    re_node_set_contains_isra_3
.text:000000000000DA9C                 test    rax, rax
.text:000000000000DA9F                 jnz     short loc_DA39
.text:000000000000DAA1                 mov     edi, 8          ; size
.text:000000000000DAA6                 mov     [rsp+0A8h+var_58], 1
.text:000000000000DAAF                 mov     [rsp+0A8h+var_50], 1
.text:000000000000DAB8                 call    _malloc
.text:000000000000DABD                 test    rax, rax
.text:000000000000DAC0                 mov     [rsp+0A8h+ptr], rax
.text:000000000000DAC5                 jz      loc_DBBD
.text:000000000000DACB                 mov     [rax], r14
.text:000000000000DACE                 xor     eax, eax
.text:000000000000DAD0
.text:000000000000DAD0 loc_DAD0:                               ; CODE XREF: expand_bkref_cache+394↓j
.text:000000000000DAD0                 mov     r15, [rsp+0A8h+var_98]
.text:000000000000DAD5                 mov     rdx, [rsp+0A8h+var_88]
.text:000000000000DADA                 mov     rdi, r13
.text:000000000000DADD                 mov     ecx, [rsp+0A8h+var_7C]
.text:000000000000DAE1                 mov     [rsp+0A8h+var_5C], eax
.text:000000000000DAE5                 mov     rsi, r15
.text:000000000000DAE8                 call    check_arrival_expand_ecl
.text:000000000000DAED                 mov     rsi, r15
.text:000000000000DAF0                 mov     rdi, rbp
.text:000000000000DAF3                 mov     r14d, eax
.text:000000000000DAF6                 call    re_node_set_merge
.text:000000000000DAFB                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000DB00                 mov     r15d, eax
.text:000000000000DB03                 call    _free
.text:000000000000DB08                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000DB0C                 mov     edx, r14d
.text:000000000000DB0F                 or      edx, r15d
.text:000000000000DB12                 or      edx, eax
.text:000000000000DB14                 jnz     loc_DBA6
.text:000000000000DB1A                 mov     rcx, [rbx+0D8h]
.text:000000000000DB21                 jmp     loc_D963
.text:000000000000DB21 ; ---------------------------------------------------------------------------
.text:000000000000DB26                 align 10h
.text:000000000000DB30
.text:000000000000DB30 loc_DB30:                               ; CODE XREF: expand_bkref_cache+162↑j
.text:000000000000DB30                 mov     edi, 8          ; size
.text:000000000000DB35                 mov     [rsp+0A8h+var_90], r10
.text:000000000000DB3A                 mov     [rsp+0A8h+var_58], 1
.text:000000000000DB43                 mov     [rsp+0A8h+var_50], 1
.text:000000000000DB4C                 call    _malloc
.text:000000000000DB51                 test    rax, rax
.text:000000000000DB54                 mov     [rsp+0A8h+ptr], rax
.text:000000000000DB59                 jz      short loc_DB9C
.text:000000000000DB5B                 mov     rdi, [rsp+0A8h+var_A0]
.text:000000000000DB60                 mov     [rsp+0A8h+var_5C], 0
.text:000000000000DB68                 mov     r10, [rsp+0A8h+var_90]
.text:000000000000DB6D                 mov     [rax], rdi
.text:000000000000DB70                 jmp     loc_D9FE
.text:000000000000DB75 ; ---------------------------------------------------------------------------
.text:000000000000DB75
.text:000000000000DB75 loc_DB75:                               ; CODE XREF: expand_bkref_cache+1F3↑j
.text:000000000000DB75                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000DB79                 test    eax, eax
.text:000000000000DB7B                 jz      loc_DA39
.text:000000000000DB81                 jmp     loc_D8FF
.text:000000000000DB86 ; ---------------------------------------------------------------------------
.text:000000000000DB86
.text:000000000000DB86 loc_DB86:                               ; CODE XREF: expand_bkref_cache+1A4↑j
.text:000000000000DB86                                         ; expand_bkref_cache+1AC↑j
.text:000000000000DB86                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000DB8B                 call    _free
.text:000000000000DB90                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000DB94                 test    eax, eax
.text:000000000000DB96                 jnz     loc_D8FF
.text:000000000000DB9C
.text:000000000000DB9C loc_DB9C:                               ; CODE XREF: expand_bkref_cache+319↑j
.text:000000000000DB9C                 mov     eax, 0Ch
.text:000000000000DBA1                 jmp     loc_D8FF
.text:000000000000DBA6 ; ---------------------------------------------------------------------------
.text:000000000000DBA6
.text:000000000000DBA6 loc_DBA6:                               ; CODE XREF: expand_bkref_cache+2D4↑j
.text:000000000000DBA6                 test    eax, eax
.text:000000000000DBA8                 jnz     loc_D8FF
.text:000000000000DBAE                 test    r14d, r14d
.text:000000000000DBB1                 mov     eax, r14d
.text:000000000000DBB4                 cmovz   eax, r15d
.text:000000000000DBB8                 jmp     loc_D8FF
.text:000000000000DBBD ; ---------------------------------------------------------------------------
.text:000000000000DBBD
.text:000000000000DBBD loc_DBBD:                               ; CODE XREF: expand_bkref_cache+285↑j
.text:000000000000DBBD                 mov     [rsp+0A8h+var_50], 0
.text:000000000000DBC6                 mov     [rsp+0A8h+var_58], 0
.text:000000000000DBCF                 mov     eax, 0Ch
.text:000000000000DBD4                 jmp     loc_DAD0
.text:000000000000DBD9 ; ---------------------------------------------------------------------------
.text:000000000000DBD9
.text:000000000000DBD9 loc_DBD9:                               ; CODE XREF: expand_bkref_cache+CD↑j
.text:000000000000DBD9                 call    ___stack_chk_fail
.text:000000000000DBD9 ; } // starts at D840
.text:000000000000DBD9 expand_bkref_cache endp
.text:000000000000DBD9
.text:000000000000DBD9 ; ---------------------------------------------------------------------------
.text:000000000000DBDE                 align 20h
.text:000000000000DBE0
.text:000000000000DBE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DBE0
.text:000000000000DBE0
.text:000000000000DBE0 check_subexp_matching_top_isra_18 proc near
.text:000000000000DBE0                                         ; CODE XREF: transit_state_bkref_isra_34+808↓p
.text:000000000000DBE0                                         ; merge_state_with_log+1A1↓p ...
.text:000000000000DBE0
.text:000000000000DBE0 var_50          = qword ptr -50h
.text:000000000000DBE0 var_48          = qword ptr -48h
.text:000000000000DBE0 var_40          = qword ptr -40h
.text:000000000000DBE0
.text:000000000000DBE0 ; __unwind {
.text:000000000000DBE0                 push    r15
.text:000000000000DBE2                 push    r14
.text:000000000000DBE4                 push    r13
.text:000000000000DBE6                 push    r12
.text:000000000000DBE8                 push    rbp
.text:000000000000DBE9                 push    rbx
.text:000000000000DBEA                 sub     rsp, 28h
.text:000000000000DBEE                 cmp     qword ptr [rsi], 0
.text:000000000000DBF2                 mov     r13, [rdi+98h]
.text:000000000000DBF9                 jle     loc_DCC0
.text:000000000000DBFF                 mov     r14, rdx
.text:000000000000DC02                 mov     r12, rsi
.text:000000000000DC05                 mov     r15, rdi
.text:000000000000DC08                 xor     ebx, ebx
.text:000000000000DC0A                 jmp     short loc_DC1E
.text:000000000000DC0A ; ---------------------------------------------------------------------------
.text:000000000000DC0C                 align 10h
.text:000000000000DC10
.text:000000000000DC10 loc_DC10:                               ; CODE XREF: check_subexp_matching_top_isra_18+54↓j
.text:000000000000DC10                                         ; check_subexp_matching_top_isra_18+5D↓j ...
.text:000000000000DC10                 add     rbx, 1
.text:000000000000DC14                 cmp     rbx, [r12]
.text:000000000000DC18                 jge     loc_DCC0
.text:000000000000DC1E
.text:000000000000DC1E loc_DC1E:                               ; CODE XREF: check_subexp_matching_top_isra_18+2A↑j
.text:000000000000DC1E                                         ; check_subexp_matching_top_isra_18+D3↓j
.text:000000000000DC1E                 mov     rax, [r14]
.text:000000000000DC21                 mov     rbp, [rax+rbx*8]
.text:000000000000DC25                 mov     rax, rbp
.text:000000000000DC28                 shl     rax, 4
.text:000000000000DC2C                 add     rax, [r13+0]
.text:000000000000DC30                 cmp     byte ptr [rax+8], 8
.text:000000000000DC34                 jnz     short loc_DC10
.text:000000000000DC36                 mov     rax, [rax]
.text:000000000000DC39                 cmp     rax, 3Fh ; '?'
.text:000000000000DC3D                 jg      short loc_DC10
.text:000000000000DC3F                 mov     rsi, [r13+0A0h]
.text:000000000000DC46                 bt      rsi, rax
.text:000000000000DC4A                 jnb     short loc_DC10
.text:000000000000DC4C                 mov     r8, [r15+0E8h]
.text:000000000000DC53                 cmp     r8, [r15+0F0h]
.text:000000000000DC5A                 mov     r9, [r15+0F8h]
.text:000000000000DC61                 jz      short loc_DCD8
.text:000000000000DC63
.text:000000000000DC63 loc_DC63:                               ; CODE XREF: check_subexp_matching_top_isra_18+13C↓j
.text:000000000000DC63                 mov     esi, 30h ; '0'  ; size
.text:000000000000DC68                 mov     edi, 1          ; nmemb
.text:000000000000DC6D                 mov     [rsp+58h+var_48], r9
.text:000000000000DC72                 mov     [rsp+58h+var_50], r8
.text:000000000000DC77                 mov     [rsp+58h+var_40], rcx
.text:000000000000DC7C                 call    _calloc
.text:000000000000DC81                 mov     r8, [rsp+58h+var_50]
.text:000000000000DC86                 mov     r9, [rsp+58h+var_48]
.text:000000000000DC8B                 test    rax, rax
.text:000000000000DC8E                 mov     [r9+r8*8], rax
.text:000000000000DC92                 jz      short loc_DCD1
.text:000000000000DC94                 add     r8, 1
.text:000000000000DC98                 add     rbx, 1
.text:000000000000DC9C                 mov     rcx, [rsp+58h+var_40]
.text:000000000000DCA1                 mov     [r15+0E8h], r8
.text:000000000000DCA8                 cmp     rbx, [r12]
.text:000000000000DCAC                 mov     [rax+8], rbp
.text:000000000000DCB0                 mov     [rax], rcx
.text:000000000000DCB3                 jl      loc_DC1E
.text:000000000000DCB9                 nop     dword ptr [rax+00000000h]
.text:000000000000DCC0
.text:000000000000DCC0 loc_DCC0:                               ; CODE XREF: check_subexp_matching_top_isra_18+19↑j
.text:000000000000DCC0                                         ; check_subexp_matching_top_isra_18+38↑j
.text:000000000000DCC0                 xor     eax, eax
.text:000000000000DCC2
.text:000000000000DCC2 loc_DCC2:                               ; CODE XREF: check_subexp_matching_top_isra_18+F6↓j
.text:000000000000DCC2                 add     rsp, 28h
.text:000000000000DCC6                 pop     rbx
.text:000000000000DCC7                 pop     rbp
.text:000000000000DCC8                 pop     r12
.text:000000000000DCCA                 pop     r13
.text:000000000000DCCC                 pop     r14
.text:000000000000DCCE                 pop     r15
.text:000000000000DCD0                 retn
.text:000000000000DCD1 ; ---------------------------------------------------------------------------
.text:000000000000DCD1
.text:000000000000DCD1 loc_DCD1:                               ; CODE XREF: check_subexp_matching_top_isra_18+B2↑j
.text:000000000000DCD1                                         ; check_subexp_matching_top_isra_18+120↓j
.text:000000000000DCD1                 mov     eax, 0Ch
.text:000000000000DCD6                 jmp     short loc_DCC2
.text:000000000000DCD8 ; ---------------------------------------------------------------------------
.text:000000000000DCD8
.text:000000000000DCD8 loc_DCD8:                               ; CODE XREF: check_subexp_matching_top_isra_18+81↑j
.text:000000000000DCD8                 lea     rax, [r8+r8]
.text:000000000000DCDC                 mov     rsi, r8
.text:000000000000DCDF                 mov     rdi, r9         ; ptr
.text:000000000000DCE2                 shl     rsi, 4          ; size
.text:000000000000DCE6                 mov     [rsp+58h+var_50], rcx
.text:000000000000DCEB                 mov     [rsp+58h+var_48], rax
.text:000000000000DCF0                 call    _realloc
.text:000000000000DCF5                 test    rax, rax
.text:000000000000DCF8                 mov     r9, rax
.text:000000000000DCFB                 mov     rcx, [rsp+58h+var_50]
.text:000000000000DD00                 jz      short loc_DCD1
.text:000000000000DD02                 mov     [r15+0F8h], rax
.text:000000000000DD09                 mov     rax, [rsp+58h+var_48]
.text:000000000000DD0E                 mov     r8, [r15+0E8h]
.text:000000000000DD15                 mov     [r15+0F0h], rax
.text:000000000000DD1C                 jmp     loc_DC63
.text:000000000000DD1C ; } // starts at DBE0
.text:000000000000DD1C check_subexp_matching_top_isra_18 endp
.text:000000000000DD1C
.text:000000000000DD1C ; ---------------------------------------------------------------------------
.text:000000000000DD21                 align 10h
.text:000000000000DD30
.text:000000000000DD30 ; =============== S U B R O U T I N E =======================================
.text:000000000000DD30
.text:000000000000DD30
.text:000000000000DD30 re_string_context_at proc near          ; CODE XREF: check_node_accept+6D↓p
.text:000000000000DD30                                         ; check_halt_state_context_isra_20+16↓p ...
.text:000000000000DD30 ; __unwind {
.text:000000000000DD30                 push    rbp
.text:000000000000DD31                 push    rbx
.text:000000000000DD32                 mov     rbp, rdi
.text:000000000000DD35                 sub     rsp, 8
.text:000000000000DD39                 test    rsi, rsi
.text:000000000000DD3C                 js      short loc_DD90
.text:000000000000DD3E                 cmp     [rdi+58h], rsi
.text:000000000000DD42                 jz      loc_DDE8
.text:000000000000DD48                 cmp     dword ptr [rdi+90h], 1
.text:000000000000DD4F                 jle     short loc_DDA0
.text:000000000000DD51                 mov     rax, [rdi+10h]
.text:000000000000DD55                 jmp     short loc_DD6A
.text:000000000000DD55 ; ---------------------------------------------------------------------------
.text:000000000000DD57                 align 20h
.text:000000000000DD60
.text:000000000000DD60 loc_DD60:                               ; CODE XREF: re_string_context_at+40↓j
.text:000000000000DD60                 sub     rsi, 1
.text:000000000000DD64                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD68                 jz      short loc_DD90
.text:000000000000DD6A
.text:000000000000DD6A loc_DD6A:                               ; CODE XREF: re_string_context_at+25↑j
.text:000000000000DD6A                 mov     ebx, [rax+rsi*4]
.text:000000000000DD6D                 cmp     ebx, 0FFFFFFFFh
.text:000000000000DD70                 jz      short loc_DD60
.text:000000000000DD72                 cmp     byte ptr [rbp+8Eh], 0
.text:000000000000DD79                 jnz     short loc_DDF8
.text:000000000000DD7B
.text:000000000000DD7B loc_DD7B:                               ; CODE XREF: re_string_context_at+D6↓j
.text:000000000000DD7B                 xor     eax, eax
.text:000000000000DD7D                 cmp     ebx, 0Ah
.text:000000000000DD80                 jz      short loc_DDCC
.text:000000000000DD82
.text:000000000000DD82 loc_DD82:                               ; CODE XREF: re_string_context_at+93↓j
.text:000000000000DD82                                         ; re_string_context_at+9A↓j ...
.text:000000000000DD82                 add     rsp, 8
.text:000000000000DD86                 pop     rbx
.text:000000000000DD87                 pop     rbp
.text:000000000000DD88                 retn
.text:000000000000DD88 ; ---------------------------------------------------------------------------
.text:000000000000DD89                 align 10h
.text:000000000000DD90
.text:000000000000DD90 loc_DD90:                               ; CODE XREF: re_string_context_at+C↑j
.text:000000000000DD90                                         ; re_string_context_at+38↑j
.text:000000000000DD90                 mov     eax, [rbp+70h]
.text:000000000000DD93                 add     rsp, 8
.text:000000000000DD97                 pop     rbx
.text:000000000000DD98                 pop     rbp
.text:000000000000DD99                 retn
.text:000000000000DD99 ; ---------------------------------------------------------------------------
.text:000000000000DD9A                 align 20h
.text:000000000000DDA0
.text:000000000000DDA0 loc_DDA0:                               ; CODE XREF: re_string_context_at+1F↑j
.text:000000000000DDA0                 mov     rax, [rdi+8]
.text:000000000000DDA4                 mov     rcx, [rdi+80h]
.text:000000000000DDAB                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000DDAF                 mov     rdx, rax
.text:000000000000DDB2                 sar     rax, 6
.text:000000000000DDB6                 mov     rcx, [rcx+rax*8]
.text:000000000000DDBA                 mov     eax, 1
.text:000000000000DDBF                 bt      rcx, rdx
.text:000000000000DDC3                 jb      short loc_DD82
.text:000000000000DDC5                 xor     eax, eax
.text:000000000000DDC7                 cmp     dl, 0Ah
.text:000000000000DDCA                 jnz     short loc_DD82
.text:000000000000DDCC
.text:000000000000DDCC loc_DDCC:                               ; CODE XREF: re_string_context_at+50↑j
.text:000000000000DDCC                 xor     eax, eax
.text:000000000000DDCE                 cmp     byte ptr [rbp+8Dh], 0
.text:000000000000DDD5                 setnz   al
.text:000000000000DDD8                 add     rsp, 8
.text:000000000000DDDC                 add     eax, eax
.text:000000000000DDDE                 pop     rbx
.text:000000000000DDDF                 pop     rbp
.text:000000000000DDE0                 retn
.text:000000000000DDE0 ; ---------------------------------------------------------------------------
.text:000000000000DDE1                 align 8
.text:000000000000DDE8
.text:000000000000DDE8 loc_DDE8:                               ; CODE XREF: re_string_context_at+12↑j
.text:000000000000DDE8                 and     edx, 2
.text:000000000000DDEB                 cmp     edx, 1
.text:000000000000DDEE                 sbb     eax, eax
.text:000000000000DDF0                 and     eax, 2
.text:000000000000DDF3                 add     eax, 8
.text:000000000000DDF6                 jmp     short loc_DD82
.text:000000000000DDF8 ; ---------------------------------------------------------------------------
.text:000000000000DDF8
.text:000000000000DDF8 loc_DDF8:                               ; CODE XREF: re_string_context_at+49↑j
.text:000000000000DDF8                 mov     edi, ebx        ; wc
.text:000000000000DDFA                 call    _iswalnum
.text:000000000000DDFF                 test    eax, eax
.text:000000000000DE01                 jnz     short loc_DE0C
.text:000000000000DE03                 cmp     ebx, 5Fh ; '_'
.text:000000000000DE06                 jnz     loc_DD7B
.text:000000000000DE0C
.text:000000000000DE0C loc_DE0C:                               ; CODE XREF: re_string_context_at+D1↑j
.text:000000000000DE0C                 mov     eax, 1
.text:000000000000DE11                 jmp     loc_DD82
.text:000000000000DE11 ; } // starts at DD30
.text:000000000000DE11 re_string_context_at endp
.text:000000000000DE11
.text:000000000000DE11 ; ---------------------------------------------------------------------------
.text:000000000000DE16                 align 20h
.text:000000000000DE20
.text:000000000000DE20 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE20
.text:000000000000DE20
.text:000000000000DE20 check_node_accept proc near             ; CODE XREF: check_arrival+1EF↓p
.text:000000000000DE20                                         ; set_regs+17A↓p ...
.text:000000000000DE20 ; __unwind {
.text:000000000000DE20                 mov     rax, [rdi+8]
.text:000000000000DE24                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000DE28                 movzx   eax, byte ptr [rsi+8]
.text:000000000000DE2C                 cmp     al, 3
.text:000000000000DE2E                 jz      loc_DEE8
.text:000000000000DE34                 jbe     loc_DED0
.text:000000000000DE3A                 cmp     al, 5
.text:000000000000DE3C                 jz      short loc_DE50
.text:000000000000DE3E                 cmp     al, 7
.text:000000000000DE40                 jnz     loc_DEE0
.text:000000000000DE46                 xor     eax, eax
.text:000000000000DE48                 test    cl, cl
.text:000000000000DE4A                 js      locret_DEDA
.text:000000000000DE50
.text:000000000000DE50 loc_DE50:                               ; CODE XREF: check_node_accept+1C↑j
.text:000000000000DE50                 cmp     cl, 0Ah
.text:000000000000DE53                 jz      loc_DF18
.text:000000000000DE59                 test    cl, cl
.text:000000000000DE5B                 jnz     short loc_DE70
.text:000000000000DE5D                 mov     rcx, [rdi+98h]
.text:000000000000DE64                 xor     eax, eax
.text:000000000000DE66                 test    byte ptr [rcx+0D8h], 80h
.text:000000000000DE6D                 jnz     short locret_DEDA
.text:000000000000DE6F                 nop
.text:000000000000DE70
.text:000000000000DE70 loc_DE70:                               ; CODE XREF: check_node_accept+3B↑j
.text:000000000000DE70                                         ; check_node_accept+B8↓j ...
.text:000000000000DE70                 push    rbx
.text:000000000000DE71                 mov     ebx, [rsi+8]
.text:000000000000DE74                 mov     eax, 1
.text:000000000000DE79                 test    ebx, 3FF00h
.text:000000000000DE7F                 jz      short loc_DECC
.text:000000000000DE81                 mov     rsi, rdx
.text:000000000000DE84                 mov     edx, [rdi+0A0h]
.text:000000000000DE8A                 shr     ebx, 8
.text:000000000000DE8D                 call    re_string_context_at
.text:000000000000DE92                 mov     ecx, ebx
.text:000000000000DE94                 mov     edx, eax
.text:000000000000DE96                 and     cx, 3FFh
.text:000000000000DE9B                 test    bl, 4
.text:000000000000DE9E                 jz      short loc_DF08
.text:000000000000DEA0                 xor     eax, eax
.text:000000000000DEA2                 test    dl, 1
.text:000000000000DEA5                 jz      short loc_DECC
.text:000000000000DEA7                 and     ebx, 8
.text:000000000000DEAA                 jnz     short loc_DECC
.text:000000000000DEAC
.text:000000000000DEAC loc_DEAC:                               ; CODE XREF: check_node_accept+EB↓j
.text:000000000000DEAC                                         ; check_node_accept+EF↓j
.text:000000000000DEAC                 test    cl, 20h
.text:000000000000DEAF                 jz      short loc_DEB8
.text:000000000000DEB1                 xor     eax, eax
.text:000000000000DEB3                 test    dl, 2
.text:000000000000DEB6                 jz      short loc_DECC
.text:000000000000DEB8
.text:000000000000DEB8 loc_DEB8:                               ; CODE XREF: check_node_accept+8F↑j
.text:000000000000DEB8                 shr     edx, 3
.text:000000000000DEBB                 mov     eax, 1
.text:000000000000DEC0                 and     edx, 1
.text:000000000000DEC3                 and     ecx, 80h
.text:000000000000DEC9                 cmovnz  eax, edx
.text:000000000000DECC
.text:000000000000DECC loc_DECC:                               ; CODE XREF: check_node_accept+5F↑j
.text:000000000000DECC                                         ; check_node_accept+85↑j ...
.text:000000000000DECC                 pop     rbx
.text:000000000000DECD                 retn
.text:000000000000DECD ; ---------------------------------------------------------------------------
.text:000000000000DECE                 align 10h
.text:000000000000DED0
.text:000000000000DED0 loc_DED0:                               ; CODE XREF: check_node_accept+14↑j
.text:000000000000DED0                 cmp     al, 1
.text:000000000000DED2                 jnz     short loc_DEE0
.text:000000000000DED4                 xor     eax, eax
.text:000000000000DED6                 cmp     [rsi], cl
.text:000000000000DED8                 jz      short loc_DE70
.text:000000000000DEDA
.text:000000000000DEDA locret_DEDA:                            ; CODE XREF: check_node_accept+2A↑j
.text:000000000000DEDA                                         ; check_node_accept+4D↑j
.text:000000000000DEDA                 rep retn
.text:000000000000DEDA ; ---------------------------------------------------------------------------
.text:000000000000DEDC                 align 20h
.text:000000000000DEE0
.text:000000000000DEE0 loc_DEE0:                               ; CODE XREF: check_node_accept+20↑j
.text:000000000000DEE0                                         ; check_node_accept+B2↑j
.text:000000000000DEE0                 xor     eax, eax
.text:000000000000DEE2                 retn
.text:000000000000DEE2 ; ---------------------------------------------------------------------------
.text:000000000000DEE3                 align 8
.text:000000000000DEE8
.text:000000000000DEE8 loc_DEE8:                               ; CODE XREF: check_node_accept+E↑j
.text:000000000000DEE8                 mov     r8, [rsi]
.text:000000000000DEEB                 movzx   eax, cl
.text:000000000000DEEE                 sar     rax, 6
.text:000000000000DEF2                 mov     r8, [r8+rax*8]
.text:000000000000DEF6                 xor     eax, eax
.text:000000000000DEF8                 bt      r8, rcx
.text:000000000000DEFC                 jb      loc_DE70
.text:000000000000DF02                 rep retn
.text:000000000000DF02 ; ---------------------------------------------------------------------------
.text:000000000000DF04                 align 8
.text:000000000000DF08
.text:000000000000DF08 loc_DF08:                               ; CODE XREF: check_node_accept+7E↑j
.text:000000000000DF08                 and     ebx, 8
.text:000000000000DF0B                 jz      short loc_DEAC
.text:000000000000DF0D                 test    al, 1
.text:000000000000DF0F                 jz      short loc_DEAC
.text:000000000000DF11                 xor     eax, eax
.text:000000000000DF13                 pop     rbx
.text:000000000000DF14                 retn
.text:000000000000DF14 ; ---------------------------------------------------------------------------
.text:000000000000DF15                 align 8
.text:000000000000DF18
.text:000000000000DF18 loc_DF18:                               ; CODE XREF: check_node_accept+33↑j
.text:000000000000DF18                 mov     rcx, [rdi+98h]
.text:000000000000DF1F                 xor     eax, eax
.text:000000000000DF21                 test    byte ptr [rcx+0D8h], 40h
.text:000000000000DF28                 jnz     loc_DE70
.text:000000000000DF2E                 rep retn
.text:000000000000DF2E ; } // starts at DE20
.text:000000000000DF2E check_node_accept endp
.text:000000000000DF2E
.text:000000000000DF30
.text:000000000000DF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000DF30
.text:000000000000DF30
.text:000000000000DF30 check_halt_state_context_isra_20 proc near
.text:000000000000DF30                                         ; CODE XREF: re_search_internal+8C7↓p
.text:000000000000DF30                                         ; re_search_internal+A3C↓p ...
.text:000000000000DF30 ; __unwind {
.text:000000000000DF30                 push    r12
.text:000000000000DF32                 mov     r12, rdx
.text:000000000000DF35                 push    rbp
.text:000000000000DF36                 push    rbx
.text:000000000000DF37                 mov     edx, [rdi+0A0h]
.text:000000000000DF3D                 mov     rbx, rsi
.text:000000000000DF40                 mov     rsi, rcx
.text:000000000000DF43                 mov     rbp, rdi
.text:000000000000DF46                 call    re_string_context_at
.text:000000000000DF4B                 test    rbx, rbx
.text:000000000000DF4E                 jle     loc_DFF8
.text:000000000000DF54                 mov     rdx, [rbp+98h]
.text:000000000000DF5B                 mov     r11d, eax
.text:000000000000DF5E                 mov     ebp, eax
.text:000000000000DF60                 and     eax, 1
.text:000000000000DF63                 mov     r9, [r12]
.text:000000000000DF67                 xor     esi, esi
.text:000000000000DF69                 and     ebp, 8
.text:000000000000DF6C                 and     r11d, 2
.text:000000000000DF70                 mov     r10d, eax
.text:000000000000DF73                 mov     r8, [rdx]
.text:000000000000DF76                 jmp     short loc_DF89
.text:000000000000DF76 ; ---------------------------------------------------------------------------
.text:000000000000DF78                 align 20h
.text:000000000000DF80
.text:000000000000DF80 loc_DF80:                               ; CODE XREF: check_halt_state_context_isra_20+78↓j
.text:000000000000DF80                                         ; check_halt_state_context_isra_20+87↓j ...
.text:000000000000DF80                 add     rsi, 1
.text:000000000000DF84                 cmp     rsi, rbx
.text:000000000000DF87                 jz      short loc_DFF8
.text:000000000000DF89
.text:000000000000DF89 loc_DF89:                               ; CODE XREF: check_halt_state_context_isra_20+46↑j
.text:000000000000DF89                 mov     rax, [r9+rsi*8]
.text:000000000000DF8D                 mov     rdx, rax
.text:000000000000DF90                 shl     rdx, 4
.text:000000000000DF94                 add     rdx, r8
.text:000000000000DF97                 mov     ecx, [rdx+8]
.text:000000000000DF9A                 shr     ecx, 8
.text:000000000000DF9D                 mov     edi, ecx
.text:000000000000DF9F                 and     di, 3FFh
.text:000000000000DFA4                 cmp     byte ptr [rdx+8], 2
.text:000000000000DFA8                 jnz     short loc_DF80
.text:000000000000DFAA                 test    di, di
.text:000000000000DFAD                 jz      short loc_DFD5
.text:000000000000DFAF                 test    cl, 4
.text:000000000000DFB2                 jz      short loc_DFE0
.text:000000000000DFB4                 test    r10d, r10d
.text:000000000000DFB7                 jz      short loc_DF80
.text:000000000000DFB9                 and     ecx, 8
.text:000000000000DFBC                 jnz     short loc_DF80
.text:000000000000DFBE
.text:000000000000DFBE loc_DFBE:                               ; CODE XREF: check_halt_state_context_isra_20+B3↓j
.text:000000000000DFBE                 test    dil, 20h
.text:000000000000DFC2                 jz      short loc_DFC9
.text:000000000000DFC4
.text:000000000000DFC4 loc_DFC4:                               ; CODE XREF: check_halt_state_context_isra_20+C0↓j
.text:000000000000DFC4                 test    r11d, r11d
.text:000000000000DFC7                 jz      short loc_DF80
.text:000000000000DFC9
.text:000000000000DFC9 loc_DFC9:                               ; CODE XREF: check_halt_state_context_isra_20+92↑j
.text:000000000000DFC9                                         ; check_halt_state_context_isra_20+BE↓j
.text:000000000000DFC9                 and     edi, 80h
.text:000000000000DFCF                 jz      short loc_DFD5
.text:000000000000DFD1                 test    ebp, ebp
.text:000000000000DFD3                 jz      short loc_DF80
.text:000000000000DFD5
.text:000000000000DFD5 loc_DFD5:                               ; CODE XREF: check_halt_state_context_isra_20+7D↑j
.text:000000000000DFD5                                         ; check_halt_state_context_isra_20+9F↑j
.text:000000000000DFD5                 pop     rbx
.text:000000000000DFD6                 pop     rbp
.text:000000000000DFD7                 pop     r12
.text:000000000000DFD9                 retn
.text:000000000000DFD9 ; ---------------------------------------------------------------------------
.text:000000000000DFDA                 align 20h
.text:000000000000DFE0
.text:000000000000DFE0 loc_DFE0:                               ; CODE XREF: check_halt_state_context_isra_20+82↑j
.text:000000000000DFE0                 and     ecx, 8
.text:000000000000DFE3                 jz      short loc_DFBE
.text:000000000000DFE5                 test    r10d, r10d
.text:000000000000DFE8                 jnz     short loc_DF80
.text:000000000000DFEA                 test    dil, 20h
.text:000000000000DFEE                 jz      short loc_DFC9
.text:000000000000DFF0                 jmp     short loc_DFC4
.text:000000000000DFF0 ; ---------------------------------------------------------------------------
.text:000000000000DFF2                 align 8
.text:000000000000DFF8
.text:000000000000DFF8 loc_DFF8:                               ; CODE XREF: check_halt_state_context_isra_20+1E↑j
.text:000000000000DFF8                                         ; check_halt_state_context_isra_20+57↑j
.text:000000000000DFF8                 pop     rbx
.text:000000000000DFF9                 xor     eax, eax
.text:000000000000DFFB                 pop     rbp
.text:000000000000DFFC                 pop     r12
.text:000000000000DFFE                 retn
.text:000000000000DFFE ; } // starts at DF30
.text:000000000000DFFE check_halt_state_context_isra_20 endp
.text:000000000000DFFE
.text:000000000000DFFE ; ---------------------------------------------------------------------------
.text:000000000000DFFF                 align 20h
.text:000000000000E000
.text:000000000000E000 ; =============== S U B R O U T I N E =======================================
.text:000000000000E000
.text:000000000000E000
.text:000000000000E000 re_string_reconstruct proc near         ; CODE XREF: re_search_internal+5E6↓p
.text:000000000000E000                                         ; re_search_internal+115B↓p
.text:000000000000E000
.text:000000000000E000 var_78          = qword ptr -78h
.text:000000000000E000 var_6C          = dword ptr -6Ch
.text:000000000000E000 var_68          = qword ptr -68h
.text:000000000000E000 var_60          = qword ptr -60h
.text:000000000000E000 wc              = dword ptr -54h
.text:000000000000E000 var_50          = qword ptr -50h
.text:000000000000E000 var_46          = byte ptr -46h
.text:000000000000E000 var_40          = qword ptr -40h
.text:000000000000E000
.text:000000000000E000 ; __unwind {
.text:000000000000E000                 push    r15
.text:000000000000E002                 push    r14
.text:000000000000E004                 mov     r15, rsi
.text:000000000000E007                 push    r13
.text:000000000000E009                 push    r12
.text:000000000000E00B                 mov     r10d, edx
.text:000000000000E00E                 push    rbp
.text:000000000000E00F                 push    rbx
.text:000000000000E010                 mov     rbp, rsi
.text:000000000000E013                 mov     rbx, rdi
.text:000000000000E016                 sub     rsp, 48h
.text:000000000000E01A                 mov     rax, fs:28h
.text:000000000000E023                 mov     [rsp+78h+var_40], rax
.text:000000000000E028                 xor     eax, eax
.text:000000000000E02A                 mov     rax, [rdi+28h]
.text:000000000000E02E                 sub     rbp, rax
.text:000000000000E031                 cmp     rax, rsi
.text:000000000000E034                 jle     short loc_E096
.text:000000000000E036                 cmp     dword ptr [rdi+90h], 1
.text:000000000000E03D                 jg      loc_E170
.text:000000000000E043
.text:000000000000E043 loc_E043:                               ; CODE XREF: re_string_reconstruct+178↓j
.text:000000000000E043                 mov     rax, [rbx+50h]
.text:000000000000E047                 mov     qword ptr [rbx+30h], 0
.text:000000000000E04F                 mov     rbp, r15
.text:000000000000E052                 mov     qword ptr [rbx+28h], 0
.text:000000000000E05A                 mov     qword ptr [rbx+38h], 0
.text:000000000000E062                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000E069                 mov     [rbx+58h], rax
.text:000000000000E06D                 mov     rax, [rbx+60h]
.text:000000000000E071                 mov     [rbx+68h], rax
.text:000000000000E075                 mov     eax, r10d
.text:000000000000E078                 and     eax, 1
.text:000000000000E07B                 cmp     eax, 1
.text:000000000000E07E                 sbb     eax, eax
.text:000000000000E080                 and     eax, 2
.text:000000000000E083                 add     eax, 4
.text:000000000000E086                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000E08D                 mov     [rbx+70h], eax
.text:000000000000E090                 jz      loc_E160
.text:000000000000E096
.text:000000000000E096 loc_E096:                               ; CODE XREF: re_string_reconstruct+34↑j
.text:000000000000E096                                         ; re_string_reconstruct+167↓j
.text:000000000000E096                 test    rbp, rbp
.text:000000000000E099                 jz      short loc_E0FE
.text:000000000000E09B                 mov     rax, [rbx+38h]
.text:000000000000E09F                 movzx   edx, byte ptr [rbx+8Ch]
.text:000000000000E0A6                 mov     r8, [rbx+30h]
.text:000000000000E0AA                 cmp     rax, rbp
.text:000000000000E0AD                 jle     loc_E1D0
.text:000000000000E0B3                 test    dl, dl
.text:000000000000E0B5                 jnz     loc_E2C8
.text:000000000000E0BB                 lea     rsi, [rbp-1]
.text:000000000000E0BF                 mov     edx, r10d
.text:000000000000E0C2                 mov     rdi, rbx
.text:000000000000E0C5                 mov     [rsp+78h+var_78], r8
.text:000000000000E0C9                 call    re_string_context_at
.text:000000000000E0CE                 mov     r8, [rsp+78h+var_78]
.text:000000000000E0D2                 mov     [rbx+70h], eax
.text:000000000000E0D5                 sub     r8, rbp
.text:000000000000E0D8                 cmp     dword ptr [rbx+90h], 1
.text:000000000000E0DF                 jg      loc_E180
.text:000000000000E0E5
.text:000000000000E0E5 loc_E0E5:                               ; CODE XREF: re_string_reconstruct+19C↓j
.text:000000000000E0E5                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000E0EC                 jnz     loc_E490
.text:000000000000E0F2                 sub     [rbx+38h], rbp
.text:000000000000E0F6                 mov     [rbx+30h], r8
.text:000000000000E0FA
.text:000000000000E0FA loc_E0FA:                               ; CODE XREF: re_string_reconstruct+47E↓j
.text:000000000000E0FA                                         ; re_string_reconstruct+6F4↓j
.text:000000000000E0FA                 add     [rbx+8], rbp
.text:000000000000E0FE
.text:000000000000E0FE loc_E0FE:                               ; CODE XREF: re_string_reconstruct+99↑j
.text:000000000000E0FE                                         ; re_string_reconstruct+484↓j
.text:000000000000E0FE                 mov     rax, [rbx+58h]
.text:000000000000E102                 sub     [rbx+68h], rbp
.text:000000000000E106                 mov     [rbx+28h], r15
.text:000000000000E10A                 sub     rax, rbp
.text:000000000000E10D                 cmp     dword ptr [rbx+90h], 1
.text:000000000000E114                 mov     [rbx+58h], rax
.text:000000000000E118                 jle     loc_E1B8
.text:000000000000E11E                 cmp     byte ptr [rbx+88h], 0
.text:000000000000E125                 mov     rdi, rbx
.text:000000000000E128                 jz      short loc_E1A8
.text:000000000000E12A                 call    build_wcs_upper_buffer
.text:000000000000E12F                 test    eax, eax
.text:000000000000E131                 jnz     short loc_E13D
.text:000000000000E133
.text:000000000000E133 loc_E133:                               ; CODE XREF: re_string_reconstruct+1AD↓j
.text:000000000000E133                                         ; re_string_reconstruct+1C9↓j ...
.text:000000000000E133                 mov     qword ptr [rbx+48h], 0
.text:000000000000E13B                 xor     eax, eax
.text:000000000000E13D
.text:000000000000E13D loc_E13D:                               ; CODE XREF: re_string_reconstruct+131↑j
.text:000000000000E13D                 mov     rcx, [rsp+78h+var_40]
.text:000000000000E142                 xor     rcx, fs:28h
.text:000000000000E14B                 jnz     loc_E79A
.text:000000000000E151                 add     rsp, 48h
.text:000000000000E155                 pop     rbx
.text:000000000000E156                 pop     rbp
.text:000000000000E157                 pop     r12
.text:000000000000E159                 pop     r13
.text:000000000000E15B                 pop     r14
.text:000000000000E15D                 pop     r15
.text:000000000000E15F                 retn
.text:000000000000E160 ; ---------------------------------------------------------------------------
.text:000000000000E160
.text:000000000000E160 loc_E160:                               ; CODE XREF: re_string_reconstruct+90↑j
.text:000000000000E160                 mov     rax, [rbx]
.text:000000000000E163                 mov     [rbx+8], rax
.text:000000000000E167                 jmp     loc_E096
.text:000000000000E167 ; ---------------------------------------------------------------------------
.text:000000000000E16C                 align 10h
.text:000000000000E170
.text:000000000000E170 loc_E170:                               ; CODE XREF: re_string_reconstruct+3D↑j
.text:000000000000E170                 mov     qword ptr [rdi+20h], 0
.text:000000000000E178                 jmp     loc_E043
.text:000000000000E178 ; ---------------------------------------------------------------------------
.text:000000000000E17D                 align 20h
.text:000000000000E180
.text:000000000000E180 loc_E180:                               ; CODE XREF: re_string_reconstruct+DF↑j
.text:000000000000E180                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000E184                 lea     rdx, ds:0[r8*4] ; n
.text:000000000000E18C                 lea     rsi, [rdi+rbp*4] ; src
.text:000000000000E190                 call    _memmove
.text:000000000000E195                 mov     r8, [rbx+30h]
.text:000000000000E199                 sub     r8, rbp
.text:000000000000E19C                 jmp     loc_E0E5
.text:000000000000E19C ; ---------------------------------------------------------------------------
.text:000000000000E1A1                 align 8
.text:000000000000E1A8
.text:000000000000E1A8 loc_E1A8:                               ; CODE XREF: re_string_reconstruct+128↑j
.text:000000000000E1A8                 call    build_wcs_buffer
.text:000000000000E1AD                 jmp     loc_E133
.text:000000000000E1AD ; ---------------------------------------------------------------------------
.text:000000000000E1B2                 align 8
.text:000000000000E1B8
.text:000000000000E1B8 loc_E1B8:                               ; CODE XREF: re_string_reconstruct+118↑j
.text:000000000000E1B8                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000E1BF                 jnz     loc_E570
.text:000000000000E1C5                 mov     [rbx+30h], rax
.text:000000000000E1C9                 jmp     loc_E133
.text:000000000000E1C9 ; ---------------------------------------------------------------------------
.text:000000000000E1CE                 align 10h
.text:000000000000E1D0
.text:000000000000E1D0 loc_E1D0:                               ; CODE XREF: re_string_reconstruct+AD↑j
.text:000000000000E1D0                 test    dl, dl
.text:000000000000E1D2                 jnz     loc_E67D
.text:000000000000E1D8
.text:000000000000E1D8 loc_E1D8:                               ; CODE XREF: re_string_reconstruct+6A0↓j
.text:000000000000E1D8                 movsxd  rdx, dword ptr [rbx+90h]
.text:000000000000E1DF                 mov     qword ptr [rbx+30h], 0
.text:000000000000E1E7                 mov     r11, [rbx+28h]
.text:000000000000E1EB                 cmp     edx, 1
.text:000000000000E1EE                 jle     loc_E5D8
.text:000000000000E1F4                 cmp     byte ptr [rbx+89h], 0
.text:000000000000E1FB                 jnz     loc_E4B8
.text:000000000000E201
.text:000000000000E201 loc_E201:                               ; CODE XREF: re_string_reconstruct+4DC↓j
.text:000000000000E201                                         ; re_string_reconstruct+4EF↓j ...
.text:000000000000E201                 lea     r14, [r11+rax]
.text:000000000000E205                 cmp     r15, r14
.text:000000000000E208                 jle     loc_E64F
.text:000000000000E20E                 lea     rax, [rbx+20h]
.text:000000000000E212                 lea     r13, [rsp+78h+wc]
.text:000000000000E217                 mov     [rsp+78h+var_68], rax
.text:000000000000E21C                 nop     dword ptr [rax+00h]
.text:000000000000E220
.text:000000000000E220 loc_E220:                               ; CODE XREF: re_string_reconstruct+270↓j
.text:000000000000E220                 mov     r12, [rbx+50h]
.text:000000000000E224                 mov     rsi, [rbx]
.text:000000000000E227                 mov     rdi, r13
.text:000000000000E22A                 mov     rax, [rbx+20h]
.text:000000000000E22E                 mov     rcx, [rsp+78h+var_68]
.text:000000000000E233                 mov     [rsp+78h+var_6C], r10d
.text:000000000000E238                 mov     [rsp+78h+var_78], r8
.text:000000000000E23C                 sub     r12, r14
.text:000000000000E23F                 add     rsi, r14
.text:000000000000E242                 mov     rdx, r12
.text:000000000000E245                 mov     [rsp+78h+var_60], rax
.text:000000000000E24A                 call    rpl_mbrtowc
.text:000000000000E24F                 lea     rcx, [rax-1]
.text:000000000000E253                 mov     edx, [rsp+78h+wc]
.text:000000000000E257                 mov     r8, [rsp+78h+var_78]
.text:000000000000E25B                 mov     r10d, [rsp+78h+var_6C]
.text:000000000000E260                 cmp     rcx, 0FFFFFFFFFFFFFFFCh
.text:000000000000E264                 ja      loc_E6A5
.text:000000000000E26A
.text:000000000000E26A loc_E26A:                               ; CODE XREF: re_string_reconstruct+6C5↓j
.text:000000000000E26A                 add     r14, rax
.text:000000000000E26D                 cmp     r15, r14
.text:000000000000E270                 jg      short loc_E220
.text:000000000000E272                 sub     r14, r15
.text:000000000000E275                 cmp     edx, 0FFFFFFFFh
.text:000000000000E278                 mov     r12, r14
.text:000000000000E27B                 mov     [rbx+30h], r14
.text:000000000000E27F                 jz      loc_E659
.text:000000000000E285
.text:000000000000E285 loc_E285:                               ; CODE XREF: re_string_reconstruct+73A↓j
.text:000000000000E285                 cmp     byte ptr [rbx+8Eh], 0
.text:000000000000E28C                 jnz     loc_E6F9
.text:000000000000E292
.text:000000000000E292 loc_E292:                               ; CODE XREF: re_string_reconstruct+70D↓j
.text:000000000000E292                 xor     eax, eax
.text:000000000000E294                 cmp     edx, 0Ah
.text:000000000000E297                 jnz     short loc_E2A7
.text:000000000000E299                 xor     eax, eax
.text:000000000000E29B                 cmp     byte ptr [rbx+8Dh], 0
.text:000000000000E2A2                 setnz   al
.text:000000000000E2A5                 add     eax, eax
.text:000000000000E2A7
.text:000000000000E2A7 loc_E2A7:                               ; CODE XREF: re_string_reconstruct+297↑j
.text:000000000000E2A7                                         ; re_string_reconstruct+718↓j
.text:000000000000E2A7                 mov     [rbx+70h], eax
.text:000000000000E2AA
.text:000000000000E2AA loc_E2AA:                               ; CODE XREF: re_string_reconstruct+66B↓j
.text:000000000000E2AA                 cmp     r12, 0
.text:000000000000E2AE                 jnz     loc_E6CA
.text:000000000000E2B4
.text:000000000000E2B4 loc_E2B4:                               ; CODE XREF: re_string_reconstruct+75D↓j
.text:000000000000E2B4                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000E2BB                 mov     [rbx+38h], r12
.text:000000000000E2BF                 jmp     loc_E47C
.text:000000000000E2BF ; ---------------------------------------------------------------------------
.text:000000000000E2C4                 align 8
.text:000000000000E2C8
.text:000000000000E2C8 loc_E2C8:                               ; CODE XREF: re_string_reconstruct+B5↑j
.text:000000000000E2C8                 mov     r14, [rbx+18h]
.text:000000000000E2CC                 mov     rcx, r8
.text:000000000000E2CF                 xor     esi, esi
.text:000000000000E2D1                 jmp     short loc_E2E3
.text:000000000000E2D1 ; ---------------------------------------------------------------------------
.text:000000000000E2D3                 align 8
.text:000000000000E2D8
.text:000000000000E2D8 loc_E2D8:                               ; CODE XREF: re_string_reconstruct+2FE↓j
.text:000000000000E2D8                 jge     short loc_E313
.text:000000000000E2DA                 lea     rsi, [rax+1]
.text:000000000000E2DE
.text:000000000000E2DE loc_E2DE:                               ; CODE XREF: re_string_reconstruct+303↓j
.text:000000000000E2DE                 cmp     rsi, rcx
.text:000000000000E2E1                 jge     short loc_E308
.text:000000000000E2E3
.text:000000000000E2E3 loc_E2E3:                               ; CODE XREF: re_string_reconstruct+2D1↑j
.text:000000000000E2E3                 lea     rdx, [rsi+rcx]
.text:000000000000E2E7                 mov     rax, rdx
.text:000000000000E2EA                 shr     rax, 3Fh
.text:000000000000E2EE                 add     rax, rdx
.text:000000000000E2F1                 sar     rax, 1
.text:000000000000E2F4                 mov     rdx, [r14+rax*8]
.text:000000000000E2F8                 mov     r12, rax
.text:000000000000E2FB                 cmp     rdx, rbp
.text:000000000000E2FE                 jle     short loc_E2D8
.text:000000000000E300                 mov     rcx, rax
.text:000000000000E303                 jmp     short loc_E2DE
.text:000000000000E303 ; ---------------------------------------------------------------------------
.text:000000000000E305                 align 8
.text:000000000000E308
.text:000000000000E308 loc_E308:                               ; CODE XREF: re_string_reconstruct+2E1↑j
.text:000000000000E308                 lea     r12, [rax+1]
.text:000000000000E30C                 cmp     rdx, rbp
.text:000000000000E30F                 cmovge  r12, rax
.text:000000000000E313
.text:000000000000E313 loc_E313:                               ; CODE XREF: re_string_reconstruct:loc_E2D8↑j
.text:000000000000E313                 lea     r13, [r12-1]
.text:000000000000E318                 mov     edx, r10d
.text:000000000000E31B                 mov     rdi, rbx
.text:000000000000E31E                 mov     [rsp+78h+var_78], r8
.text:000000000000E322                 mov     rsi, r13
.text:000000000000E325                 call    re_string_context_at
.text:000000000000E32A                 cmp     rbp, r12
.text:000000000000E32D                 mov     [rbx+70h], eax
.text:000000000000E330                 mov     r8, [rsp+78h+var_78]
.text:000000000000E334                 jnz     loc_E3B8
.text:000000000000E33A                 cmp     rbp, r8
.text:000000000000E33D                 jge     short loc_E3B8
.text:000000000000E33F                 cmp     [r14+r12*8], rbp
.text:000000000000E343                 jnz     short loc_E3B8
.text:000000000000E345                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000E349                 sub     r8, rbp
.text:000000000000E34C                 lea     rdx, ds:0[r8*4] ; n
.text:000000000000E354                 lea     rsi, [rdi+rbp*4] ; src
.text:000000000000E358                 call    _memmove
.text:000000000000E35D                 mov     rdi, [rbx+8]    ; dest
.text:000000000000E361                 mov     rdx, [rbx+30h]
.text:000000000000E365                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000E369                 sub     rdx, rbp        ; n
.text:000000000000E36C                 call    _memmove
.text:000000000000E371                 mov     rax, [rbx+30h]
.text:000000000000E375                 sub     [rbx+38h], rbp
.text:000000000000E379                 sub     rax, rbp
.text:000000000000E37C                 test    rax, rax
.text:000000000000E37F                 mov     [rbx+30h], rax
.text:000000000000E383                 jle     short loc_E3A8
.text:000000000000E385                 mov     rcx, [rbx+18h]
.text:000000000000E389                 xor     eax, eax
.text:000000000000E38B                 lea     rsi, [rcx+rbp*8]
.text:000000000000E38F                 nop
.text:000000000000E390
.text:000000000000E390 loc_E390:                               ; CODE XREF: re_string_reconstruct+3A3↓j
.text:000000000000E390                 mov     rdx, [rsi+rax*8]
.text:000000000000E394                 sub     rdx, rbp
.text:000000000000E397                 mov     [rcx+rax*8], rdx
.text:000000000000E39B                 add     rax, 1
.text:000000000000E39F                 cmp     [rbx+30h], rax
.text:000000000000E3A3                 jg      short loc_E390
.text:000000000000E3A5                 nop     dword ptr [rax]
.text:000000000000E3A8
.text:000000000000E3A8 loc_E3A8:                               ; CODE XREF: re_string_reconstruct+383↑j
.text:000000000000E3A8                                         ; re_string_reconstruct+633↓j
.text:000000000000E3A8                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000E3AF                 jmp     loc_E47C
.text:000000000000E3AF ; ---------------------------------------------------------------------------
.text:000000000000E3B4                 align 8
.text:000000000000E3B8
.text:000000000000E3B8 loc_E3B8:                               ; CODE XREF: re_string_reconstruct+334↑j
.text:000000000000E3B8                                         ; re_string_reconstruct+33D↑j ...
.text:000000000000E3B8                 mov     rax, [rbx+50h]
.text:000000000000E3BC                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000E3C3                 add     rax, rbp
.text:000000000000E3C6                 sub     rax, r15
.text:000000000000E3C9                 mov     [rbx+58h], rax
.text:000000000000E3CD                 mov     rax, [rbx+60h]
.text:000000000000E3D1                 add     rax, rbp
.text:000000000000E3D4                 sub     rax, r15
.text:000000000000E3D7                 test    r12, r12
.text:000000000000E3DA                 mov     [rbx+68h], rax
.text:000000000000E3DE                 jle     short loc_E403
.text:000000000000E3E0                 cmp     [r14+r12*8-8], rbp
.text:000000000000E3E5                 jz      short loc_E3FB
.text:000000000000E3E7                 jmp     short loc_E403
.text:000000000000E3E7 ; ---------------------------------------------------------------------------
.text:000000000000E3E9                 align 10h
.text:000000000000E3F0
.text:000000000000E3F0 loc_E3F0:                               ; CODE XREF: re_string_reconstruct+401↓j
.text:000000000000E3F0                 cmp     [r14+r13*8-8], rbp
.text:000000000000E3F5                 jnz     short loc_E403
.text:000000000000E3F7                 sub     r13, 1
.text:000000000000E3FB
.text:000000000000E3FB loc_E3FB:                               ; CODE XREF: re_string_reconstruct+3E5↑j
.text:000000000000E3FB                 test    r13, r13
.text:000000000000E3FE                 mov     r12, r13
.text:000000000000E401                 jnz     short loc_E3F0
.text:000000000000E403
.text:000000000000E403 loc_E403:                               ; CODE XREF: re_string_reconstruct+3DE↑j
.text:000000000000E403                                         ; re_string_reconstruct+3E7↑j ...
.text:000000000000E403                 cmp     r12, r8
.text:000000000000E406                 jge     loc_E638
.text:000000000000E40C                 mov     rax, [rbx+10h]
.text:000000000000E410                 jmp     short loc_E425
.text:000000000000E410 ; ---------------------------------------------------------------------------
.text:000000000000E412                 align 8
.text:000000000000E418
.text:000000000000E418 loc_E418:                               ; CODE XREF: re_string_reconstruct+42A↓j
.text:000000000000E418                 add     r12, 1
.text:000000000000E41C                 cmp     r12, r8
.text:000000000000E41F                 jz      loc_E640
.text:000000000000E425
.text:000000000000E425 loc_E425:                               ; CODE XREF: re_string_reconstruct+410↑j
.text:000000000000E425                 cmp     dword ptr [rax+r12*4], 0FFFFFFFFh
.text:000000000000E42A                 jz      short loc_E418
.text:000000000000E42C
.text:000000000000E42C loc_E42C:                               ; CODE XREF: re_string_reconstruct:loc_E638↓j
.text:000000000000E42C                 mov     rdx, [r14+r12*8]
.text:000000000000E430                 sub     rdx, rbp        ; n
.text:000000000000E433                 cmp     rdx, 0
.text:000000000000E437                 mov     [rbx+30h], rdx
.text:000000000000E43B                 jz      short loc_E471
.text:000000000000E43D                 jle     short loc_E45F
.text:000000000000E43F                 mov     rax, [rbx+10h]
.text:000000000000E443                 lea     rcx, [rax+rdx*4]
.text:000000000000E447                 nop     word ptr [rax+rax+00000000h]
.text:000000000000E450
.text:000000000000E450 loc_E450:                               ; CODE XREF: re_string_reconstruct+45D↓j
.text:000000000000E450                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000E456                 add     rax, 4
.text:000000000000E45A                 cmp     rcx, rax
.text:000000000000E45D                 jnz     short loc_E450
.text:000000000000E45F
.text:000000000000E45F loc_E45F:                               ; CODE XREF: re_string_reconstruct+43D↑j
.text:000000000000E45F                 mov     rdi, [rbx+8]    ; s
.text:000000000000E463                 mov     esi, 0FFh       ; c
.text:000000000000E468                 call    _memset
.text:000000000000E46D                 mov     rdx, [rbx+30h]
.text:000000000000E471
.text:000000000000E471 loc_E471:                               ; CODE XREF: re_string_reconstruct+43B↑j
.text:000000000000E471                                         ; re_string_reconstruct+64A↓j
.text:000000000000E471                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000E478                 mov     [rbx+38h], rdx
.text:000000000000E47C
.text:000000000000E47C loc_E47C:                               ; CODE XREF: re_string_reconstruct+2BF↑j
.text:000000000000E47C                                         ; re_string_reconstruct+3AF↑j ...
.text:000000000000E47C                 test    al, al
.text:000000000000E47E                 jz      loc_E0FA
.text:000000000000E484                 jmp     loc_E0FE
.text:000000000000E484 ; ---------------------------------------------------------------------------
.text:000000000000E489                 align 10h
.text:000000000000E490
.text:000000000000E490 loc_E490:                               ; CODE XREF: re_string_reconstruct+EC↑j
.text:000000000000E490                 mov     rdi, [rbx+8]    ; dest
.text:000000000000E494                 mov     rdx, r8         ; n
.text:000000000000E497                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000E49B                 call    _memmove
.text:000000000000E4A0                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000E4A7                 sub     [rbx+30h], rbp
.text:000000000000E4AB                 sub     [rbx+38h], rbp
.text:000000000000E4AF                 jmp     short loc_E47C
.text:000000000000E4AF ; ---------------------------------------------------------------------------
.text:000000000000E4B1                 align 8
.text:000000000000E4B8
.text:000000000000E4B8 loc_E4B8:                               ; CODE XREF: re_string_reconstruct+1FB↑j
.text:000000000000E4B8                 mov     rcx, [rbx]
.text:000000000000E4BB                 mov     rdi, rbp
.text:000000000000E4BE                 sub     rdi, rdx
.text:000000000000E4C1                 mov     rdx, rdi
.text:000000000000E4C4                 lea     r12, [rcx+r11]
.text:000000000000E4C8                 add     rdx, r12
.text:000000000000E4CB                 lea     rsi, [r12+rbp-1]
.text:000000000000E4D0                 cmp     rcx, rdx
.text:000000000000E4D3                 cmovb   rcx, rdx
.text:000000000000E4D7                 cmp     rcx, rsi
.text:000000000000E4DA                 jbe     short loc_E4F5
.text:000000000000E4DC                 jmp     loc_E201
.text:000000000000E4DC ; ---------------------------------------------------------------------------
.text:000000000000E4E1                 align 8
.text:000000000000E4E8
.text:000000000000E4E8 loc_E4E8:                               ; CODE XREF: re_string_reconstruct+4FE↓j
.text:000000000000E4E8                 sub     rsi, 1
.text:000000000000E4EC                 cmp     rcx, rsi
.text:000000000000E4EF                 ja      loc_E201
.text:000000000000E4F5
.text:000000000000E4F5 loc_E4F5:                               ; CODE XREF: re_string_reconstruct+4DA↑j
.text:000000000000E4F5                 movzx   edx, byte ptr [rsi]
.text:000000000000E4F8                 and     edx, 0FFFFFFC0h
.text:000000000000E4FB                 cmp     dl, 80h
.text:000000000000E4FE                 jz      short loc_E4E8
.text:000000000000E500                 mov     rdx, [rbx+58h]
.text:000000000000E504                 mov     rcx, [rbx+78h]
.text:000000000000E508                 mov     r14, rsi
.text:000000000000E50B                 add     rdx, r12
.text:000000000000E50E                 sub     rdx, rsi
.text:000000000000E511                 test    rcx, rcx
.text:000000000000E514                 jnz     loc_E762
.text:000000000000E51A
.text:000000000000E51A loc_E51A:                               ; CODE XREF: re_string_reconstruct+795↓j
.text:000000000000E51A                 lea     r13, [rsp+78h+wc]
.text:000000000000E51F                 add     r12, rbp
.text:000000000000E522                 lea     rcx, [rsp+78h+var_50]
.text:000000000000E527                 sub     r12, r14
.text:000000000000E52A                 mov     [rsp+78h+var_6C], r10d
.text:000000000000E52F                 mov     [rsp+78h+var_78], r8
.text:000000000000E533                 mov     rdi, r13
.text:000000000000E536                 mov     [rsp+78h+var_50], 0
.text:000000000000E53F                 call    rpl_mbrtowc
.text:000000000000E544                 cmp     r12, rax
.text:000000000000E547                 mov     r8, [rsp+78h+var_78]
.text:000000000000E54B                 mov     r10d, [rsp+78h+var_6C]
.text:000000000000E550                 ja      short loc_E55C
.text:000000000000E552                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000E556                 jbe     loc_E721
.text:000000000000E55C
.text:000000000000E55C loc_E55C:                               ; CODE XREF: re_string_reconstruct+550↑j
.text:000000000000E55C                                         ; re_string_reconstruct+740↓j
.text:000000000000E55C                 mov     r11, [rbx+28h]
.text:000000000000E560                 mov     rax, [rbx+38h]
.text:000000000000E564                 jmp     loc_E201
.text:000000000000E564 ; ---------------------------------------------------------------------------
.text:000000000000E569                 align 10h
.text:000000000000E570
.text:000000000000E570 loc_E570:                               ; CODE XREF: re_string_reconstruct+1BF↑j
.text:000000000000E570                 cmp     byte ptr [rbx+88h], 0
.text:000000000000E577                 jnz     loc_E670
.text:000000000000E57D                 mov     rcx, [rbx+78h]
.text:000000000000E581                 test    rcx, rcx
.text:000000000000E584                 jz      loc_E133
.text:000000000000E58A                 cmp     [rbx+40h], rax
.text:000000000000E58E                 mov     rdx, [rbx+30h]
.text:000000000000E592                 cmovle  rax, [rbx+40h]
.text:000000000000E597                 cmp     rax, rdx
.text:000000000000E59A                 jg      short loc_E5A8
.text:000000000000E59C                 jmp     short loc_E5C8
.text:000000000000E59C ; ---------------------------------------------------------------------------
.text:000000000000E59E                 align 20h
.text:000000000000E5A0
.text:000000000000E5A0 loc_E5A0:                               ; CODE XREF: re_string_reconstruct+5C6↓j
.text:000000000000E5A0                 mov     r15, [rbx+28h]
.text:000000000000E5A4                 mov     rcx, [rbx+78h]
.text:000000000000E5A8
.text:000000000000E5A8 loc_E5A8:                               ; CODE XREF: re_string_reconstruct+59A↑j
.text:000000000000E5A8                 mov     rsi, [rbx]
.text:000000000000E5AB                 add     rsi, rdx
.text:000000000000E5AE                 movzx   esi, byte ptr [rsi+r15]
.text:000000000000E5B3                 movzx   esi, byte ptr [rcx+rsi]
.text:000000000000E5B7                 mov     rcx, [rbx+8]
.text:000000000000E5BB                 mov     [rcx+rdx], sil
.text:000000000000E5BF                 add     rdx, 1
.text:000000000000E5C3                 cmp     rax, rdx
.text:000000000000E5C6                 jnz     short loc_E5A0
.text:000000000000E5C8
.text:000000000000E5C8 loc_E5C8:                               ; CODE XREF: re_string_reconstruct+59C↑j
.text:000000000000E5C8                 mov     [rbx+30h], rdx
.text:000000000000E5CC                 mov     [rbx+38h], rdx
.text:000000000000E5D0                 jmp     loc_E133
.text:000000000000E5D0 ; ---------------------------------------------------------------------------
.text:000000000000E5D5                 align 8
.text:000000000000E5D8
.text:000000000000E5D8 loc_E5D8:                               ; CODE XREF: re_string_reconstruct+1EE↑j
.text:000000000000E5D8                 mov     rax, [rbx]
.text:000000000000E5DB                 mov     rdx, [rbx+78h]
.text:000000000000E5DF                 add     rax, rbp
.text:000000000000E5E2                 test    rdx, rdx
.text:000000000000E5E5                 movzx   eax, byte ptr [r11+rax-1]
.text:000000000000E5EB                 mov     qword ptr [rbx+38h], 0
.text:000000000000E5F3                 jz      short loc_E5F9
.text:000000000000E5F5                 movzx   eax, byte ptr [rdx+rax]
.text:000000000000E5F9
.text:000000000000E5F9 loc_E5F9:                               ; CODE XREF: re_string_reconstruct+5F3↑j
.text:000000000000E5F9                 mov     rcx, [rbx+80h]
.text:000000000000E600                 movzx   edx, al
.text:000000000000E603                 sar     rdx, 6
.text:000000000000E607                 mov     rcx, [rcx+rdx*8]
.text:000000000000E60B                 mov     edx, 1
.text:000000000000E610                 bt      rcx, rax
.text:000000000000E614                 jb      short loc_E630
.text:000000000000E616                 xor     edx, edx
.text:000000000000E618                 cmp     al, 0Ah
.text:000000000000E61A                 jnz     short loc_E630
.text:000000000000E61C                 xor     edx, edx
.text:000000000000E61E                 cmp     byte ptr [rbx+8Dh], 0
.text:000000000000E625                 setnz   dl
.text:000000000000E628                 add     edx, edx
.text:000000000000E62A                 nop     word ptr [rax+rax+00h]
.text:000000000000E630
.text:000000000000E630 loc_E630:                               ; CODE XREF: re_string_reconstruct+614↑j
.text:000000000000E630                                         ; re_string_reconstruct+61A↑j
.text:000000000000E630                 mov     [rbx+70h], edx
.text:000000000000E633                 jmp     loc_E3A8
.text:000000000000E638 ; ---------------------------------------------------------------------------
.text:000000000000E638
.text:000000000000E638 loc_E638:                               ; CODE XREF: re_string_reconstruct+406↑j
.text:000000000000E638                 jnz     loc_E42C
.text:000000000000E63E                 xchg    ax, ax
.text:000000000000E640
.text:000000000000E640 loc_E640:                               ; CODE XREF: re_string_reconstruct+41F↑j
.text:000000000000E640                 mov     qword ptr [rbx+30h], 0
.text:000000000000E648                 xor     edx, edx
.text:000000000000E64A                 jmp     loc_E471
.text:000000000000E64F ; ---------------------------------------------------------------------------
.text:000000000000E64F
.text:000000000000E64F loc_E64F:                               ; CODE XREF: re_string_reconstruct+208↑j
.text:000000000000E64F                 sub     r14, r15
.text:000000000000E652                 mov     r12, r14
.text:000000000000E655                 mov     [rbx+30h], r14
.text:000000000000E659
.text:000000000000E659 loc_E659:                               ; CODE XREF: re_string_reconstruct+27F↑j
.text:000000000000E659                 lea     rsi, [r8-1]
.text:000000000000E65D                 mov     edx, r10d
.text:000000000000E660                 mov     rdi, rbx
.text:000000000000E663                 call    re_string_context_at
.text:000000000000E668                 mov     [rbx+70h], eax
.text:000000000000E66B                 jmp     loc_E2AA
.text:000000000000E670 ; ---------------------------------------------------------------------------
.text:000000000000E670
.text:000000000000E670 loc_E670:                               ; CODE XREF: re_string_reconstruct+577↑j
.text:000000000000E670                 mov     rdi, rbx
.text:000000000000E673                 call    build_upper_buffer
.text:000000000000E678                 jmp     loc_E133
.text:000000000000E67D ; ---------------------------------------------------------------------------
.text:000000000000E67D
.text:000000000000E67D loc_E67D:                               ; CODE XREF: re_string_reconstruct+1D2↑j
.text:000000000000E67D                 mov     rdx, [rbx+50h]
.text:000000000000E681                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000E688                 add     rdx, rbp
.text:000000000000E68B                 sub     rdx, r15
.text:000000000000E68E                 mov     [rbx+58h], rdx
.text:000000000000E692                 mov     rdx, [rbx+60h]
.text:000000000000E696                 add     rdx, rbp
.text:000000000000E699                 sub     rdx, r15
.text:000000000000E69C                 mov     [rbx+68h], rdx
.text:000000000000E6A0                 jmp     loc_E1D8
.text:000000000000E6A5 ; ---------------------------------------------------------------------------
.text:000000000000E6A5
.text:000000000000E6A5 loc_E6A5:                               ; CODE XREF: re_string_reconstruct+264↑j
.text:000000000000E6A5                 test    rax, rax
.text:000000000000E6A8                 jz      short loc_E71D
.text:000000000000E6AA                 test    r12, r12
.text:000000000000E6AD                 jz      short loc_E71D
.text:000000000000E6AF                 mov     rax, [rbx]
.text:000000000000E6B2                 movzx   edx, byte ptr [rax+r14]
.text:000000000000E6B7
.text:000000000000E6B7 loc_E6B7:                               ; CODE XREF: re_string_reconstruct+71F↓j
.text:000000000000E6B7                 mov     rax, [rsp+78h+var_60]
.text:000000000000E6BC                 mov     [rbx+20h], rax
.text:000000000000E6C0                 mov     eax, 1
.text:000000000000E6C5                 jmp     loc_E26A
.text:000000000000E6CA ; ---------------------------------------------------------------------------
.text:000000000000E6CA
.text:000000000000E6CA loc_E6CA:                               ; CODE XREF: re_string_reconstruct+2AE↑j
.text:000000000000E6CA                 jle     short loc_E6E7
.text:000000000000E6CC                 mov     rax, [rbx+10h]
.text:000000000000E6D0                 lea     rdx, [rax+r12*4]
.text:000000000000E6D4                 nop     dword ptr [rax+00h]
.text:000000000000E6D8
.text:000000000000E6D8 loc_E6D8:                               ; CODE XREF: re_string_reconstruct+6E5↓j
.text:000000000000E6D8                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000E6DE                 add     rax, 4
.text:000000000000E6E2                 cmp     rdx, rax
.text:000000000000E6E5                 jnz     short loc_E6D8
.text:000000000000E6E7
.text:000000000000E6E7 loc_E6E7:                               ; CODE XREF: re_string_reconstruct:loc_E6CA↑j
.text:000000000000E6E7                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000E6EE                 jnz     short loc_E748
.text:000000000000E6F0                 mov     [rbx+38h], r12
.text:000000000000E6F4                 jmp     loc_E0FA
.text:000000000000E6F9 ; ---------------------------------------------------------------------------
.text:000000000000E6F9
.text:000000000000E6F9 loc_E6F9:                               ; CODE XREF: re_string_reconstruct+28C↑j
.text:000000000000E6F9                 mov     edi, edx        ; wc
.text:000000000000E6FB                 mov     dword ptr [rsp+78h+var_78], edx
.text:000000000000E6FE                 call    _iswalnum
.text:000000000000E703                 test    eax, eax
.text:000000000000E705                 jnz     short loc_E713
.text:000000000000E707                 mov     edx, dword ptr [rsp+78h+var_78]
.text:000000000000E70A                 cmp     edx, 5Fh ; '_'
.text:000000000000E70D                 jnz     loc_E292
.text:000000000000E713
.text:000000000000E713 loc_E713:                               ; CODE XREF: re_string_reconstruct+705↑j
.text:000000000000E713                 mov     eax, 1
.text:000000000000E718                 jmp     loc_E2A7
.text:000000000000E71D ; ---------------------------------------------------------------------------
.text:000000000000E71D
.text:000000000000E71D loc_E71D:                               ; CODE XREF: re_string_reconstruct+6A8↑j
.text:000000000000E71D                                         ; re_string_reconstruct+6AD↑j
.text:000000000000E71D                 xor     edx, edx
.text:000000000000E71F                 jmp     short loc_E6B7
.text:000000000000E721 ; ---------------------------------------------------------------------------
.text:000000000000E721
.text:000000000000E721 loc_E721:                               ; CODE XREF: re_string_reconstruct+556↑j
.text:000000000000E721                 mov     edx, [rsp+78h+wc]
.text:000000000000E725                 sub     rax, r12
.text:000000000000E728                 mov     qword ptr [rbx+20h], 0
.text:000000000000E730                 mov     r12, rax
.text:000000000000E733                 mov     [rbx+30h], rax
.text:000000000000E737                 cmp     edx, 0FFFFFFFFh
.text:000000000000E73A                 jnz     loc_E285
.text:000000000000E740                 jmp     loc_E55C
.text:000000000000E740 ; ---------------------------------------------------------------------------
.text:000000000000E745                 align 8
.text:000000000000E748
.text:000000000000E748 loc_E748:                               ; CODE XREF: re_string_reconstruct+6EE↑j
.text:000000000000E748                 mov     rdi, [rbx+8]    ; s
.text:000000000000E74C                 mov     rdx, r12        ; n
.text:000000000000E74F                 mov     esi, 0FFh       ; c
.text:000000000000E754                 call    _memset
.text:000000000000E759                 mov     r12, [rbx+30h]
.text:000000000000E75D                 jmp     loc_E2B4
.text:000000000000E762 ; ---------------------------------------------------------------------------
.text:000000000000E762
.text:000000000000E762 loc_E762:                               ; CODE XREF: re_string_reconstruct+514↑j
.text:000000000000E762                 cmp     rdx, 6
.text:000000000000E766                 mov     edi, 6
.text:000000000000E76B                 lea     r11, [rsp+78h+var_46]
.text:000000000000E770                 cmovle  rdi, rdx
.text:000000000000E774                 sub     edi, 1
.text:000000000000E777                 test    edi, edi
.text:000000000000E779                 movsxd  rax, edi
.text:000000000000E77C                 js      short loc_E792
.text:000000000000E77E
.text:000000000000E77E loc_E77E:                               ; CODE XREF: re_string_reconstruct+790↓j
.text:000000000000E77E                 movzx   edi, byte ptr [rsi+rax]
.text:000000000000E782                 movzx   edi, byte ptr [rcx+rdi]
.text:000000000000E786                 mov     [r11+rax], dil
.text:000000000000E78A                 sub     rax, 1
.text:000000000000E78E                 test    eax, eax
.text:000000000000E790                 jns     short loc_E77E
.text:000000000000E792
.text:000000000000E792 loc_E792:                               ; CODE XREF: re_string_reconstruct+77C↑j
.text:000000000000E792                 mov     rsi, r11
.text:000000000000E795                 jmp     loc_E51A
.text:000000000000E79A ; ---------------------------------------------------------------------------
.text:000000000000E79A
.text:000000000000E79A loc_E79A:                               ; CODE XREF: re_string_reconstruct+14B↑j
.text:000000000000E79A                 call    ___stack_chk_fail
.text:000000000000E79A ; } // starts at E000
.text:000000000000E79A re_string_reconstruct endp
.text:000000000000E79A
.text:000000000000E79A ; ---------------------------------------------------------------------------
.text:000000000000E79F                 align 20h
.text:000000000000E7A0
.text:000000000000E7A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E7A0
.text:000000000000E7A0
.text:000000000000E7A0 _sub_epsilon_src_nodes proc near        ; CODE XREF: update_cur_sifted_state+44C↓p
.text:000000000000E7A0                                         ; update_cur_sifted_state+50A↓p ...
.text:000000000000E7A0
.text:000000000000E7A0 var_78          = qword ptr -78h
.text:000000000000E7A0 var_70          = qword ptr -70h
.text:000000000000E7A0 var_68          = qword ptr -68h
.text:000000000000E7A0 var_60          = qword ptr -60h
.text:000000000000E7A0 var_58          = xmmword ptr -58h
.text:000000000000E7A0 ptr             = qword ptr -48h
.text:000000000000E7A0 var_40          = qword ptr -40h
.text:000000000000E7A0
.text:000000000000E7A0 ; __unwind {
.text:000000000000E7A0                 push    r15
.text:000000000000E7A2                 push    r14
.text:000000000000E7A4                 mov     r14, rdx
.text:000000000000E7A7                 push    r13
.text:000000000000E7A9                 push    r12
.text:000000000000E7AB                 lea     rdx, [rsi+rsi*2]
.text:000000000000E7AF                 push    rbp
.text:000000000000E7B0                 push    rbx
.text:000000000000E7B1                 pxor    xmm0, xmm0
.text:000000000000E7B5                 sub     rsp, 48h
.text:000000000000E7B9                 mov     rax, fs:28h
.text:000000000000E7C2                 mov     [rsp+78h+var_40], rax
.text:000000000000E7C7                 xor     eax, eax
.text:000000000000E7C9                 mov     rax, [rdi+38h]
.text:000000000000E7CD                 mov     [rsp+78h+ptr], 0
.text:000000000000E7D6                 movaps  [rsp+78h+var_58], xmm0
.text:000000000000E7DB                 mov     [rsp+78h+var_68], rcx
.text:000000000000E7E0                 lea     rbp, [rax+rdx*8]
.text:000000000000E7E4                 mov     r10, [rbp+8]
.text:000000000000E7E8                 test    r10, r10
.text:000000000000E7EB                 jle     loc_E9D2
.text:000000000000E7F1                 lea     rax, [rsp+78h+var_58]
.text:000000000000E7F6                 mov     r12, rdi
.text:000000000000E7F9                 mov     r13, rsi
.text:000000000000E7FC                 xor     ebx, ebx
.text:000000000000E7FE                 mov     [rsp+78h+var_60], rax
.text:000000000000E803                 jmp     short loc_E85D
.text:000000000000E803 ; ---------------------------------------------------------------------------
.text:000000000000E805                 align 8
.text:000000000000E808
.text:000000000000E808 loc_E808:                               ; CODE XREF: _sub_epsilon_src_nodes+11B↓j
.text:000000000000E808                 test    rax, rax
.text:000000000000E80B                 jnz     loc_E8E8
.text:000000000000E811                 mov     rdi, [r14+8]
.text:000000000000E815                 lea     rsi, [r14+10h]
.text:000000000000E819                 mov     rdx, r8
.text:000000000000E81C                 call    re_node_set_contains_isra_3
.text:000000000000E821                 test    rax, rax
.text:000000000000E824                 jz      loc_E8E8
.text:000000000000E82A
.text:000000000000E82A loc_E82A:                               ; CODE XREF: _sub_epsilon_src_nodes+139↓j
.text:000000000000E82A                                         ; _sub_epsilon_src_nodes+182↓j
.text:000000000000E82A                 mov     rdx, [r12+38h]
.text:000000000000E82F                 mov     rsi, [rsp+78h+var_68]
.text:000000000000E834                 mov     rdi, [rsp+78h+var_60]
.text:000000000000E839                 add     rdx, r9
.text:000000000000E83C                 call    re_node_set_add_intersect
.text:000000000000E841                 test    eax, eax
.text:000000000000E843                 jnz     loc_E9C0
.text:000000000000E849                 mov     r10, [rbp+8]
.text:000000000000E84D                 nop     dword ptr [rax]
.text:000000000000E850
.text:000000000000E850 loc_E850:                               ; CODE XREF: _sub_epsilon_src_nodes+C8↓j
.text:000000000000E850                                         ; _sub_epsilon_src_nodes+D9↓j ...
.text:000000000000E850                 add     rbx, 1
.text:000000000000E854                 cmp     r10, rbx
.text:000000000000E857                 jle     loc_E930
.text:000000000000E85D
.text:000000000000E85D loc_E85D:                               ; CODE XREF: _sub_epsilon_src_nodes+63↑j
.text:000000000000E85D                 mov     rax, [rbp+10h]
.text:000000000000E861                 mov     rax, [rax+rbx*8]
.text:000000000000E865                 cmp     r13, rax
.text:000000000000E868                 jz      short loc_E850
.text:000000000000E86A                 mov     rdx, rax
.text:000000000000E86D                 shl     rdx, 4
.text:000000000000E871                 add     rdx, [r12]
.text:000000000000E875                 test    byte ptr [rdx+8], 8
.text:000000000000E879                 jz      short loc_E850
.text:000000000000E87B                 lea     r9, [rax+rax*2]
.text:000000000000E87F                 mov     rcx, [r12+28h]
.text:000000000000E884                 lea     r11, [rbp+10h]
.text:000000000000E888                 mov     rdi, r10
.text:000000000000E88B                 shl     r9, 3
.text:000000000000E88F                 mov     rsi, r11
.text:000000000000E892                 add     rcx, r9
.text:000000000000E895                 mov     r15, [rcx+10h]
.text:000000000000E899                 mov     [rsp+78h+var_70], rcx
.text:000000000000E89E                 mov     r8, [r15]
.text:000000000000E8A1                 mov     rdx, r8
.text:000000000000E8A4                 mov     [rsp+78h+var_78], r8
.text:000000000000E8A8                 call    re_node_set_contains_isra_3
.text:000000000000E8AD                 mov     rcx, [rsp+78h+var_70]
.text:000000000000E8B2                 mov     r8, [rsp+78h+var_78]
.text:000000000000E8B6                 cmp     qword ptr [rcx+8], 1
.text:000000000000E8BB                 jg      loc_E808
.text:000000000000E8C1                 test    rax, rax
.text:000000000000E8C4                 jnz     short loc_E850
.text:000000000000E8C6                 mov     rdi, [r14+8]
.text:000000000000E8CA                 lea     rsi, [r14+10h]
.text:000000000000E8CE                 mov     rdx, r8
.text:000000000000E8D1                 call    re_node_set_contains_isra_3
.text:000000000000E8D6                 test    rax, rax
.text:000000000000E8D9                 jnz     loc_E82A
.text:000000000000E8DF                 jmp     loc_E850
.text:000000000000E8DF ; ---------------------------------------------------------------------------
.text:000000000000E8E4                 align 8
.text:000000000000E8E8
.text:000000000000E8E8 loc_E8E8:                               ; CODE XREF: _sub_epsilon_src_nodes+6B↑j
.text:000000000000E8E8                                         ; _sub_epsilon_src_nodes+84↑j
.text:000000000000E8E8                 mov     r15, [r15+8]
.text:000000000000E8EC                 test    r15, r15
.text:000000000000E8EF                 jle     loc_E850
.text:000000000000E8F5                 mov     rdx, r15
.text:000000000000E8F8                 mov     rsi, r11
.text:000000000000E8FB                 mov     rdi, r10
.text:000000000000E8FE                 call    re_node_set_contains_isra_3
.text:000000000000E903                 test    rax, rax
.text:000000000000E906                 jnz     loc_E850
.text:000000000000E90C                 mov     rdi, [r14+8]
.text:000000000000E910                 lea     rsi, [r14+10h]
.text:000000000000E914                 call    re_node_set_contains_isra_3
.text:000000000000E919                 test    rax, rax
.text:000000000000E91C                 jz      loc_E850
.text:000000000000E922                 jmp     loc_E82A
.text:000000000000E922 ; ---------------------------------------------------------------------------
.text:000000000000E927                 align 10h
.text:000000000000E930
.text:000000000000E930 loc_E930:                               ; CODE XREF: _sub_epsilon_src_nodes+B7↑j
.text:000000000000E930                 xor     r9d, r9d
.text:000000000000E933                 test    r10, r10
.text:000000000000E936                 lea     r11, [rsp+78h+ptr]
.text:000000000000E93B                 jle     short loc_E98C
.text:000000000000E93D                 nop     dword ptr [rax]
.text:000000000000E940
.text:000000000000E940 loc_E940:                               ; CODE XREF: _sub_epsilon_src_nodes+1EA↓j
.text:000000000000E940                 mov     rax, [rbp+10h]
.text:000000000000E944                 mov     rdi, qword ptr [rsp+78h+var_58+8]
.text:000000000000E949                 mov     rsi, r11
.text:000000000000E94C                 mov     r10, [rax+r9*8]
.text:000000000000E950                 mov     rdx, r10
.text:000000000000E953                 call    re_node_set_contains_isra_3
.text:000000000000E958                 test    rax, rax
.text:000000000000E95B                 jnz     short loc_E982
.text:000000000000E95D                 lea     rbx, [r14+10h]
.text:000000000000E961                 mov     rdi, [r14+8]
.text:000000000000E965                 mov     rsi, rbx
.text:000000000000E968                 call    re_node_set_contains_isra_3
.text:000000000000E96D                 sub     rax, 1
.text:000000000000E971                 mov     rdx, rax
.text:000000000000E974                 js      short loc_E982
.text:000000000000E976                 lea     rdi, [r14+8]
.text:000000000000E97A                 mov     rsi, rbx
.text:000000000000E97D                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000E982
.text:000000000000E982 loc_E982:                               ; CODE XREF: _sub_epsilon_src_nodes+1BB↑j
.text:000000000000E982                                         ; _sub_epsilon_src_nodes+1D4↑j
.text:000000000000E982                 add     r9, 1
.text:000000000000E986                 cmp     [rbp+8], r9
.text:000000000000E98A                 jg      short loc_E940
.text:000000000000E98C
.text:000000000000E98C loc_E98C:                               ; CODE XREF: _sub_epsilon_src_nodes+19B↑j
.text:000000000000E98C                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000E991
.text:000000000000E991 loc_E991:                               ; CODE XREF: _sub_epsilon_src_nodes+234↓j
.text:000000000000E991                 call    _free
.text:000000000000E996                 xor     eax, eax
.text:000000000000E998
.text:000000000000E998 loc_E998:                               ; CODE XREF: _sub_epsilon_src_nodes+230↓j
.text:000000000000E998                 mov     rsi, [rsp+78h+var_40]
.text:000000000000E99D                 xor     rsi, fs:28h
.text:000000000000E9A6                 jnz     short loc_E9D6
.text:000000000000E9A8                 add     rsp, 48h
.text:000000000000E9AC                 pop     rbx
.text:000000000000E9AD                 pop     rbp
.text:000000000000E9AE                 pop     r12
.text:000000000000E9B0                 pop     r13
.text:000000000000E9B2                 pop     r14
.text:000000000000E9B4                 pop     r15
.text:000000000000E9B6                 retn
.text:000000000000E9B6 ; ---------------------------------------------------------------------------
.text:000000000000E9B7                 align 20h
.text:000000000000E9C0
.text:000000000000E9C0 loc_E9C0:                               ; CODE XREF: _sub_epsilon_src_nodes+A3↑j
.text:000000000000E9C0                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000E9C5                 mov     dword ptr [rsp+78h+var_78], eax
.text:000000000000E9C8                 call    _free
.text:000000000000E9CD                 mov     eax, dword ptr [rsp+78h+var_78]
.text:000000000000E9D0                 jmp     short loc_E998
.text:000000000000E9D2 ; ---------------------------------------------------------------------------
.text:000000000000E9D2
.text:000000000000E9D2 loc_E9D2:                               ; CODE XREF: _sub_epsilon_src_nodes+4B↑j
.text:000000000000E9D2                 xor     edi, edi
.text:000000000000E9D4                 jmp     short loc_E991
.text:000000000000E9D6 ; ---------------------------------------------------------------------------
.text:000000000000E9D6
.text:000000000000E9D6 loc_E9D6:                               ; CODE XREF: _sub_epsilon_src_nodes+206↑j
.text:000000000000E9D6                 call    ___stack_chk_fail
.text:000000000000E9D6 ; } // starts at E7A0
.text:000000000000E9D6 _sub_epsilon_src_nodes endp
.text:000000000000E9D6
.text:000000000000E9D6 ; ---------------------------------------------------------------------------
.text:000000000000E9DB                 align 20h
.text:000000000000E9E0
.text:000000000000E9E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E9E0
.text:000000000000E9E0
.text:000000000000E9E0 build_trtable   proc near               ; CODE XREF: re_search_internal+1090↓p
.text:000000000000E9E0
.text:000000000000E9E0 var_130         = qword ptr -130h
.text:000000000000E9E0 ptr             = qword ptr -128h
.text:000000000000E9E0 var_120         = qword ptr -120h
.text:000000000000E9E0 var_118         = qword ptr -118h
.text:000000000000E9E0 var_110         = qword ptr -110h
.text:000000000000E9E0 var_108         = qword ptr -108h
.text:000000000000E9E0 var_100         = qword ptr -100h
.text:000000000000E9E0 var_F8          = qword ptr -0F8h
.text:000000000000E9E0 var_E9          = byte ptr -0E9h
.text:000000000000E9E0 var_E8          = qword ptr -0E8h
.text:000000000000E9E0 var_E0          = qword ptr -0E0h
.text:000000000000E9E0 var_CC          = dword ptr -0CCh
.text:000000000000E9E0 var_C8          = qword ptr -0C8h
.text:000000000000E9E0 var_C0          = qword ptr -0C0h
.text:000000000000E9E0 var_B8          = qword ptr -0B8h
.text:000000000000E9E0 var_A8          = xmmword ptr -0A8h
.text:000000000000E9E0 var_98          = xmmword ptr -98h
.text:000000000000E9E0 var_88          = xmmword ptr -88h
.text:000000000000E9E0 var_78          = xmmword ptr -78h
.text:000000000000E9E0 var_68          = xmmword ptr -68h
.text:000000000000E9E0 var_58          = xmmword ptr -58h
.text:000000000000E9E0 var_40          = qword ptr -40h
.text:000000000000E9E0
.text:000000000000E9E0 ; __unwind {
.text:000000000000E9E0                 push    r15
.text:000000000000E9E2                 push    r14
.text:000000000000E9E4                 mov     r15, rdi
.text:000000000000E9E7                 push    r13
.text:000000000000E9E9                 push    r12
.text:000000000000E9EB                 mov     edi, 3800h      ; size
.text:000000000000E9F0                 push    rbp
.text:000000000000E9F1                 push    rbx
.text:000000000000E9F2                 sub     rsp, 108h
.text:000000000000E9F9                 mov     rax, fs:28h
.text:000000000000EA02                 mov     [rsp+138h+var_40], rax
.text:000000000000EA0A                 xor     eax, eax
.text:000000000000EA0C                 mov     [rsp+138h+var_130], rsi
.text:000000000000EA11                 call    _malloc
.text:000000000000EA16                 test    rax, rax
.text:000000000000EA19                 mov     [rsp+138h+var_120], rax
.text:000000000000EA1E                 jz      loc_EDF0
.text:000000000000EA24                 mov     rax, [rsp+138h+var_120]
.text:000000000000EA29                 pxor    xmm0, xmm0
.text:000000000000EA2D                 lea     rbx, [rax+1800h]
.text:000000000000EA34                 mov     rax, [rsp+138h+var_130]
.text:000000000000EA39                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000EA41                 mov     [rsp+138h+var_F8], rbx
.text:000000000000EA46                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000EA4E                 cmp     qword ptr [rax+10h], 0
.text:000000000000EA53                 mov     qword ptr [rax+58h], 0
.text:000000000000EA5B                 mov     qword ptr [rax+60h], 0
.text:000000000000EA63                 jle     loc_F4DA
.text:000000000000EA69                 mov     [rsp+138h+var_108], r15
.text:000000000000EA6E                 xor     ebp, ebp
.text:000000000000EA70                 mov     [rsp+138h+ptr], 0
.text:000000000000EA79                 mov     r15, rbx
.text:000000000000EA7C
.text:000000000000EA7C loc_EA7C:                               ; CODE XREF: build_trtable+113↓j
.text:000000000000EA7C                 mov     rbx, [rsp+138h+ptr]
.text:000000000000EA81                 lea     rax, ds:0[rbx*8]
.text:000000000000EA89                 mov     [rsp+138h+var_118], rax
.text:000000000000EA8E                 mov     rax, [rsp+138h+var_130]
.text:000000000000EA93                 mov     rax, [rax+18h]
.text:000000000000EA97                 mov     r13, [rax+rbx*8]
.text:000000000000EA9B                 mov     rax, [rsp+138h+var_108]
.text:000000000000EAA0                 shl     r13, 4
.text:000000000000EAA4                 add     r13, [rax]
.text:000000000000EAA7                 movzx   r14d, byte ptr [r13+8]
.text:000000000000EAAC                 mov     eax, [r13+8]
.text:000000000000EAB0                 shr     eax, 8
.text:000000000000EAB3                 and     ax, 3FFh
.text:000000000000EAB7                 cmp     r14d, 1
.text:000000000000EABB                 jz      loc_EE20
.text:000000000000EAC1                 cmp     r14d, 3
.text:000000000000EAC5                 jz      loc_F290
.text:000000000000EACB                 cmp     r14d, 5
.text:000000000000EACF                 jz      loc_F150
.text:000000000000EAD5                 cmp     r14d, 7
.text:000000000000EAD9                 jz      loc_F2B9
.text:000000000000EADF
.text:000000000000EADF loc_EADF:                               ; CODE XREF: build_trtable+4CF↓j
.text:000000000000EADF                                         ; build_trtable+524↓j ...
.text:000000000000EADF                 mov     rbx, [rsp+138h+var_130]
.text:000000000000EAE4                 add     [rsp+138h+ptr], 1
.text:000000000000EAEA                 mov     rax, [rsp+138h+ptr]
.text:000000000000EAEF                 cmp     rax, [rbx+10h]
.text:000000000000EAF3                 jl      short loc_EA7C
.text:000000000000EAF5                 test    rbp, rbp
.text:000000000000EAF8                 mov     r15, [rsp+138h+var_108]
.text:000000000000EAFD                 jle     loc_F559
.text:000000000000EB03                 lea     rbx, [rbp+1]
.text:000000000000EB07                 mov     [rsp+138h+var_C0], 0
.text:000000000000EB10                 mov     [rsp+138h+var_C8], rbx
.text:000000000000EB15                 shl     rbx, 3
.text:000000000000EB19                 mov     rdi, rbx        ; size
.text:000000000000EB1C                 call    _malloc
.text:000000000000EB21                 test    rax, rax
.text:000000000000EB24                 mov     r12, rax
.text:000000000000EB27                 mov     [rsp+138h+var_B8], rax
.text:000000000000EB2F                 jz      loc_F32F
.text:000000000000EB35                 mov     rax, 0AAAAAAAAAAAA855h
.text:000000000000EB3F                 mov     [rsp+138h+var_CC], 0
.text:000000000000EB47                 cmp     rbp, rax
.text:000000000000EB4A                 jg      loc_F32F
.text:000000000000EB50                 lea     rax, [rbp+rbp*2+0]
.text:000000000000EB55                 shl     rax, 3
.text:000000000000EB59                 mov     rdi, rax        ; size
.text:000000000000EB5C                 mov     [rsp+138h+var_E0], rax
.text:000000000000EB61                 call    _malloc
.text:000000000000EB66                 test    rax, rax
.text:000000000000EB69                 mov     [rsp+138h+ptr], rax
.text:000000000000EB6E                 jz      loc_F32F
.text:000000000000EB74                 mov     rax, [rsp+138h+ptr]
.text:000000000000EB79                 sub     rbx, 8
.text:000000000000EB7D                 mov     r12, [rsp+138h+var_F8]
.text:000000000000EB82                 pxor    xmm0, xmm0
.text:000000000000EB86                 lea     r14, [rsp+138h+var_C8]
.text:000000000000EB8B                 mov     [rsp+138h+var_118], rbp
.text:000000000000EB90                 mov     [rsp+138h+var_E9], 0
.text:000000000000EB95                 mov     rbp, r15
.text:000000000000EB98                 add     rax, rbx
.text:000000000000EB9B                 mov     [rsp+138h+var_E8], r12
.text:000000000000EBA0                 add     rbx, rax
.text:000000000000EBA3                 mov     [rsp+138h+var_108], rax
.text:000000000000EBA8                 mov     rax, [rsp+138h+var_120]
.text:000000000000EBAD                 movaps  [rsp+138h+var_68], xmm0
.text:000000000000EBB5                 mov     [rsp+138h+var_100], rbx
.text:000000000000EBBA                 xor     ebx, ebx
.text:000000000000EBBC                 lea     r13, [rax+8]
.text:000000000000EBC0                 lea     rax, [rsp+138h+var_CC]
.text:000000000000EBC5                 movaps  [rsp+138h+var_58], xmm0
.text:000000000000EBCD                 mov     [rsp+138h+var_110], rax
.text:000000000000EBD2
.text:000000000000EBD2 loc_EBD2:                               ; CODE XREF: build_trtable+2C2↓j
.text:000000000000EBD2                 mov     [rsp+138h+var_C0], 0
.text:000000000000EBDB                 cmp     qword ptr [r13+0], 0
.text:000000000000EBE0                 jle     short loc_EC28
.text:000000000000EBE2                 xor     r15d, r15d
.text:000000000000EBE5                 nop     dword ptr [rax]
.text:000000000000EBE8
.text:000000000000EBE8 loc_EBE8:                               ; CODE XREF: build_trtable+246↓j
.text:000000000000EBE8                 mov     rax, [r13+8]
.text:000000000000EBEC                 mov     rdx, [rax+r15*8]
.text:000000000000EBF0                 mov     rax, [rbp+18h]
.text:000000000000EBF4                 mov     rax, [rax+rdx*8]
.text:000000000000EBF8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000EBFC                 jz      short loc_EC1E
.text:000000000000EBFE                 lea     rdx, [rax+rax*2]
.text:000000000000EC02                 mov     rax, [rbp+30h]
.text:000000000000EC06                 mov     rdi, r14
.text:000000000000EC09                 lea     rsi, [rax+rdx*8]
.text:000000000000EC0D                 call    re_node_set_merge
.text:000000000000EC12                 test    eax, eax
.text:000000000000EC14                 mov     [rsp+138h+var_CC], eax
.text:000000000000EC18                 jnz     loc_F318
.text:000000000000EC1E
.text:000000000000EC1E loc_EC1E:                               ; CODE XREF: build_trtable+21C↑j
.text:000000000000EC1E                 add     r15, 1
.text:000000000000EC22                 cmp     [r13+0], r15
.text:000000000000EC26                 jg      short loc_EBE8
.text:000000000000EC28
.text:000000000000EC28 loc_EC28:                               ; CODE XREF: build_trtable+200↑j
.text:000000000000EC28                 mov     rdi, [rsp+138h+var_110]
.text:000000000000EC2D                 xor     ecx, ecx
.text:000000000000EC2F                 mov     rsi, rbp
.text:000000000000EC32                 mov     rdx, r14
.text:000000000000EC35                 call    re_acquire_state_context
.text:000000000000EC3A                 mov     rsi, [rsp+138h+ptr]
.text:000000000000EC3F                 test    rax, rax
.text:000000000000EC42                 mov     [rsi+rbx*8], rax
.text:000000000000EC46                 jz      loc_F3F8
.text:000000000000EC4C
.text:000000000000EC4C loc_EC4C:                               ; CODE XREF: build_trtable+A1E↓j
.text:000000000000EC4C                 cmp     byte ptr [rax+68h], 0
.text:000000000000EC50                 js      loc_F370
.text:000000000000EC56                 mov     rdi, [rsp+138h+var_108]
.text:000000000000EC5B                 mov     rsi, [rsp+138h+var_100]
.text:000000000000EC60                 mov     [rdi+rbx*8], rax
.text:000000000000EC64                 mov     rax, [rsp+138h+ptr]
.text:000000000000EC69                 mov     rax, [rax+rbx*8]
.text:000000000000EC6D                 mov     [rsi+rbx*8], rax
.text:000000000000EC71
.text:000000000000EC71 loc_EC71:                               ; CODE XREF: build_trtable+9FC↓j
.text:000000000000EC71                                         ; build_trtable+A08↓j
.text:000000000000EC71                 lea     rdx, [rsp+138h+var_68]
.text:000000000000EC79                 xor     eax, eax
.text:000000000000EC7B
.text:000000000000EC7B loc_EC7B:                               ; CODE XREF: build_trtable+2AF↓j
.text:000000000000EC7B                 mov     rcx, [rdx+rax]
.text:000000000000EC7F                 or      rcx, [r12+rax]
.text:000000000000EC83                 mov     [rdx+rax], rcx
.text:000000000000EC87                 add     rax, 8
.text:000000000000EC8B                 cmp     rax, 20h ; ' '
.text:000000000000EC8F                 jnz     short loc_EC7B
.text:000000000000EC91                 add     rbx, 1
.text:000000000000EC95                 add     r13, 18h
.text:000000000000EC99                 add     r12, 20h ; ' '
.text:000000000000EC9D                 cmp     rbx, [rsp+138h+var_118]
.text:000000000000ECA2                 jnz     loc_EBD2
.text:000000000000ECA8                 cmp     [rsp+138h+var_E9], 0
.text:000000000000ECAD                 mov     r15, rbp
.text:000000000000ECB0                 mov     rbp, [rsp+138h+var_118]
.text:000000000000ECB5                 mov     [rsp+138h+var_118], rdx
.text:000000000000ECBA                 jnz     loc_F409
.text:000000000000ECC0                 mov     esi, 100h       ; size
.text:000000000000ECC5                 mov     edi, 8          ; nmemb
.text:000000000000ECCA                 call    _calloc
.text:000000000000ECCF                 mov     r11, rax
.text:000000000000ECD2                 mov     rax, [rsp+138h+var_130]
.text:000000000000ECD7                 test    r11, r11
.text:000000000000ECDA                 mov     [rax+58h], r11
.text:000000000000ECDE                 jz      loc_F31D
.text:000000000000ECE4                 mov     rbx, [rsp+138h+var_F8]
.text:000000000000ECE9                 mov     r12, [rsp+138h+ptr]
.text:000000000000ECEE                 xor     r9d, r9d
.text:000000000000ECF1                 mov     r13, [rsp+138h+var_108]
.text:000000000000ECF6                 mov     rdx, [rsp+138h+var_118]
.text:000000000000ECFB                 add     rbx, 20h ; ' '
.text:000000000000ECFF
.text:000000000000ECFF loc_ECFF:                               ; CODE XREF: build_trtable+35C↓j
.text:000000000000ECFF                 mov     rax, [rdx+r9]
.text:000000000000ED03                 test    rax, rax
.text:000000000000ED06                 jz      short loc_ED34
.text:000000000000ED08                 mov     rsi, r9
.text:000000000000ED0B                 mov     ecx, 1
.text:000000000000ED10                 shl     rsi, 6
.text:000000000000ED14                 add     rsi, r11
.text:000000000000ED17                 nop     word ptr [rax+rax+00000000h]
.text:000000000000ED20
.text:000000000000ED20 loc_ED20:                               ; CODE XREF: build_trtable+352↓j
.text:000000000000ED20                 test    al, 1
.text:000000000000ED22                 jnz     loc_F488
.text:000000000000ED28
.text:000000000000ED28 loc_ED28:                               ; CODE XREF: build_trtable+AE9↓j
.text:000000000000ED28                                         ; build_trtable+AF5↓j
.text:000000000000ED28                 add     rcx, rcx
.text:000000000000ED2B                 add     rsi, 8
.text:000000000000ED2F                 shr     rax, 1
.text:000000000000ED32                 jnz     short loc_ED20
.text:000000000000ED34
.text:000000000000ED34 loc_ED34:                               ; CODE XREF: build_trtable+326↑j
.text:000000000000ED34                 add     r9, 8
.text:000000000000ED38                 cmp     r9, 20h ; ' '
.text:000000000000ED3C                 jnz     short loc_ECFF
.text:000000000000ED3E
.text:000000000000ED3E loc_ED3E:                               ; CODE XREF: build_trtable+AA0↓j
.text:000000000000ED3E                 test    byte ptr [rsp+138h+var_68+1], 4
.text:000000000000ED46                 jz      short loc_ED82
.text:000000000000ED48                 xor     eax, eax
.text:000000000000ED4A                 mov     rdx, [rsp+138h+var_E8]
.text:000000000000ED4F                 jmp     short loc_ED5E
.text:000000000000ED51 ; ---------------------------------------------------------------------------
.text:000000000000ED51
.text:000000000000ED51 loc_ED51:                               ; CODE XREF: build_trtable+385↓j
.text:000000000000ED51                 add     rax, 1
.text:000000000000ED55                 add     rdx, 20h ; ' '
.text:000000000000ED59                 cmp     rax, rbp
.text:000000000000ED5C                 jz      short loc_ED82
.text:000000000000ED5E
.text:000000000000ED5E loc_ED5E:                               ; CODE XREF: build_trtable+36F↑j
.text:000000000000ED5E                 test    qword ptr [rdx], 400h
.text:000000000000ED65                 jz      short loc_ED51
.text:000000000000ED67                 mov     rbx, [rsp+138h+var_100]
.text:000000000000ED6C                 cmp     [rsp+138h+var_E9], 0
.text:000000000000ED71                 mov     rax, [rbx+rax*8]
.text:000000000000ED75                 mov     [r11+50h], rax
.text:000000000000ED79                 jz      short loc_ED82
.text:000000000000ED7B                 mov     [r11+850h], rax
.text:000000000000ED82
.text:000000000000ED82 loc_ED82:                               ; CODE XREF: build_trtable+366↑j
.text:000000000000ED82                                         ; build_trtable+37C↑j ...
.text:000000000000ED82                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000ED87                 call    _free
.text:000000000000ED8C                 mov     rdi, [rsp+138h+var_B8] ; ptr
.text:000000000000ED94                 call    _free
.text:000000000000ED99                 mov     rax, [rsp+138h+var_120]
.text:000000000000ED9E                 mov     rbx, [rsp+138h+var_E0]
.text:000000000000EDA3                 lea     rbp, [rax+10h]
.text:000000000000EDA7                 add     rbx, rbp
.text:000000000000EDAA
.text:000000000000EDAA loc_EDAA:                               ; CODE XREF: build_trtable+3DA↓j
.text:000000000000EDAA                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000EDAE                 add     rbp, 18h
.text:000000000000EDB2                 call    _free
.text:000000000000EDB7                 cmp     rbx, rbp
.text:000000000000EDBA                 jnz     short loc_EDAA
.text:000000000000EDBC                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000EDC1                 call    _free
.text:000000000000EDC6                 mov     eax, 1
.text:000000000000EDCB                 jmp     short loc_EDF2
.text:000000000000EDCD ; ---------------------------------------------------------------------------
.text:000000000000EDCD
.text:000000000000EDCD loc_EDCD:                               ; CODE XREF: build_trtable+707↓j
.text:000000000000EDCD                 test    rbp, rbp
.text:000000000000EDD0                 mov     qword ptr [rbx+8], 0
.text:000000000000EDD8                 mov     qword ptr [rbx], 0
.text:000000000000EDDF                 jnz     loc_F110
.text:000000000000EDE5                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000EDEA                 call    _free
.text:000000000000EDEF                 nop
.text:000000000000EDF0
.text:000000000000EDF0 loc_EDF0:                               ; CODE XREF: build_trtable+3E↑j
.text:000000000000EDF0                                         ; build_trtable+763↓j ...
.text:000000000000EDF0                 xor     eax, eax
.text:000000000000EDF2
.text:000000000000EDF2 loc_EDF2:                               ; CODE XREF: build_trtable+3EB↑j
.text:000000000000EDF2                                         ; build_trtable+B22↓j
.text:000000000000EDF2                 mov     rbx, [rsp+138h+var_40]
.text:000000000000EDFA                 xor     rbx, fs:28h
.text:000000000000EE03                 jnz     loc_F554
.text:000000000000EE09                 add     rsp, 108h
.text:000000000000EE10                 pop     rbx
.text:000000000000EE11                 pop     rbp
.text:000000000000EE12                 pop     r12
.text:000000000000EE14                 pop     r13
.text:000000000000EE16                 pop     r14
.text:000000000000EE18                 pop     r15
.text:000000000000EE1A                 retn
.text:000000000000EE1A ; ---------------------------------------------------------------------------
.text:000000000000EE1B                 align 20h
.text:000000000000EE20
.text:000000000000EE20 loc_EE20:                               ; CODE XREF: build_trtable+DB↑j
.text:000000000000EE20                 movzx   ecx, byte ptr [r13+0]
.text:000000000000EE25                 lea     r12, [rsp+138h+var_A8]
.text:000000000000EE2D                 mov     edi, 1
.text:000000000000EE32                 mov     rdx, rcx
.text:000000000000EE35                 and     ecx, 3Fh
.text:000000000000EE38                 shr     rdx, 3
.text:000000000000EE3C                 shl     rdi, cl
.text:000000000000EE3F                 and     edx, 18h
.text:000000000000EE42                 or      [r12+rdx], rdi
.text:000000000000EE46
.text:000000000000EE46 loc_EE46:                               ; CODE XREF: build_trtable+7C9↓j
.text:000000000000EE46                                         ; build_trtable+7D8↓j ...
.text:000000000000EE46                 test    ax, ax
.text:000000000000EE49                 jz      loc_EF10
.text:000000000000EE4F                 test    al, 20h
.text:000000000000EE51                 jnz     loc_F1C0
.text:000000000000EE57
.text:000000000000EE57 loc_EE57:                               ; CODE XREF: build_trtable+80C↓j
.text:000000000000EE57                 test    al, 80h
.text:000000000000EE59                 jnz     loc_F0F4
.text:000000000000EE5F                 test    al, 4
.text:000000000000EE61                 jz      short loc_EEB5
.text:000000000000EE63                 cmp     r14d, 1
.text:000000000000EE67                 jz      loc_F245
.text:000000000000EE6D                 mov     r8, [rsp+138h+var_108]
.text:000000000000EE72                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000EE7A                 jle     loc_F2D2
.text:000000000000EE80
.text:000000000000EE80 loc_EE80:                               ; CODE XREF: build_trtable+87D↓j
.text:000000000000EE80                 mov     rdi, [r8+78h]
.text:000000000000EE84                 xor     esi, esi
.text:000000000000EE86                 xor     ecx, ecx
.text:000000000000EE88
.text:000000000000EE88 loc_EE88:                               ; CODE XREF: build_trtable+4CA↓j
.text:000000000000EE88                 mov     rdx, [rdi+rcx*8]
.text:000000000000EE8C                 not     rdx
.text:000000000000EE8F                 or      rdx, [r8+rcx*8+0B8h]
.text:000000000000EE97                 and     rdx, [r12+rcx*8]
.text:000000000000EE9B                 mov     [r12+rcx*8], rdx
.text:000000000000EE9F                 add     rcx, 1
.text:000000000000EEA3                 or      rsi, rdx
.text:000000000000EEA6                 cmp     rcx, 4
.text:000000000000EEAA                 jnz     short loc_EE88
.text:000000000000EEAC                 test    rsi, rsi
.text:000000000000EEAF                 jz      loc_EADF
.text:000000000000EEB5
.text:000000000000EEB5 loc_EEB5:                               ; CODE XREF: build_trtable+481↑j
.text:000000000000EEB5                                         ; build_trtable+91B↓j
.text:000000000000EEB5                 test    al, 8
.text:000000000000EEB7                 jz      short loc_EF10
.text:000000000000EEB9                 cmp     r14d, 1
.text:000000000000EEBD                 jz      loc_F1F1
.text:000000000000EEC3                 mov     rdi, [rsp+138h+var_108]
.text:000000000000EEC8                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000EECF                 jle     loc_F20E
.text:000000000000EED5
.text:000000000000EED5 loc_EED5:                               ; CODE XREF: build_trtable+828↓j
.text:000000000000EED5                 mov     rsi, [rdi+78h]
.text:000000000000EED9                 xor     ecx, ecx
.text:000000000000EEDB                 xor     edx, edx
.text:000000000000EEDD
.text:000000000000EEDD loc_EEDD:                               ; CODE XREF: build_trtable+51F↓j
.text:000000000000EEDD                 mov     rax, [rdi+rdx*8+0B8h]
.text:000000000000EEE5                 and     rax, [rsi+rdx*8]
.text:000000000000EEE9                 not     rax
.text:000000000000EEEC                 and     rax, [r12+rdx*8]
.text:000000000000EEF0                 mov     [r12+rdx*8], rax
.text:000000000000EEF4                 add     rdx, 1
.text:000000000000EEF8                 or      rcx, rax
.text:000000000000EEFB                 cmp     rdx, 4
.text:000000000000EEFF                 jnz     short loc_EEDD
.text:000000000000EF01                 test    rcx, rcx
.text:000000000000EF04                 jz      loc_EADF
.text:000000000000EF0A                 nop     word ptr [rax+rax+00h]
.text:000000000000EF10
.text:000000000000EF10 loc_EF10:                               ; CODE XREF: build_trtable+469↑j
.text:000000000000EF10                                         ; build_trtable+4D7↑j ...
.text:000000000000EF10                 xor     ebx, ebx
.text:000000000000EF12                 test    rbp, rbp
.text:000000000000EF15                 jle     loc_F07B
.text:000000000000EF1B                 mov     [rsp+138h+var_110], r13
.text:000000000000EF20                 mov     r13, r15
.text:000000000000EF23                 nop     dword ptr [rax+rax+00h]
.text:000000000000EF28
.text:000000000000EF28 loc_EF28:                               ; CODE XREF: build_trtable+692↓j
.text:000000000000EF28                 mov     r10, rbx
.text:000000000000EF2B                 shl     r10, 5
.text:000000000000EF2F                 cmp     r14d, 1
.text:000000000000EF33                 jnz     short loc_EF58
.text:000000000000EF35                 mov     rax, [rsp+138h+var_110]
.text:000000000000EF3A                 movzx   edx, byte ptr [rax]
.text:000000000000EF3D                 mov     rax, rdx
.text:000000000000EF40                 shr     rax, 3
.text:000000000000EF44                 and     eax, 18h
.text:000000000000EF47                 add     rax, r13
.text:000000000000EF4A                 mov     rax, [rax+r10]
.text:000000000000EF4E                 bt      rax, rdx
.text:000000000000EF52                 jnb     loc_F06B
.text:000000000000EF58
.text:000000000000EF58 loc_EF58:                               ; CODE XREF: build_trtable+553↑j
.text:000000000000EF58                 lea     rdi, [r13+r10+0]
.text:000000000000EF5D                 lea     rsi, [rsp+138h+var_88]
.text:000000000000EF65                 xor     ecx, ecx
.text:000000000000EF67                 xor     eax, eax
.text:000000000000EF69
.text:000000000000EF69 loc_EF69:                               ; CODE XREF: build_trtable+5A0↓j
.text:000000000000EF69                 mov     rdx, [r12+rax*8]
.text:000000000000EF6D                 and     rdx, [rdi+rax*8]
.text:000000000000EF71                 mov     [rsi+rax*8], rdx
.text:000000000000EF75                 add     rax, 1
.text:000000000000EF79                 or      rcx, rdx
.text:000000000000EF7C                 cmp     rax, 4
.text:000000000000EF80                 jnz     short loc_EF69
.text:000000000000EF82                 test    rcx, rcx
.text:000000000000EF85                 jz      loc_F06B
.text:000000000000EF8B                 lea     r11, [rsp+138h+var_68]
.text:000000000000EF93                 xor     r15d, r15d
.text:000000000000EF96                 xor     r9d, r9d
.text:000000000000EF99                 xor     ecx, ecx
.text:000000000000EF9B
.text:000000000000EF9B loc_EF9B:                               ; CODE XREF: build_trtable+5E8↓j
.text:000000000000EF9B                 mov     rsi, [r12+rcx*8]
.text:000000000000EF9F                 mov     rax, [rdi+rcx*8]
.text:000000000000EFA3                 mov     rdx, rsi
.text:000000000000EFA6                 not     rdx
.text:000000000000EFA9                 and     rdx, rax
.text:000000000000EFAC                 not     rax
.text:000000000000EFAF                 and     rax, rsi
.text:000000000000EFB2                 mov     [r11+rcx*8], rdx
.text:000000000000EFB6                 or      r9, rdx
.text:000000000000EFB9                 mov     [r12+rcx*8], rax
.text:000000000000EFBD                 add     rcx, 1
.text:000000000000EFC1                 or      r15, rax
.text:000000000000EFC4                 cmp     rcx, 4
.text:000000000000EFC8                 jnz     short loc_EF9B
.text:000000000000EFCA                 mov     rdi, [rsp+138h+var_120]
.text:000000000000EFCF                 lea     rax, [rbx+rbx*2]
.text:000000000000EFD3                 test    r9, r9
.text:000000000000EFD6                 lea     rdx, [rdi+rax*8]
.text:000000000000EFDA                 jz      short loc_F044
.text:000000000000EFDC                 mov     rax, rbp
.text:000000000000EFDF                 movdqa  xmm0, [rsp+138h+var_68]
.text:000000000000EFE8                 shl     rax, 5
.text:000000000000EFEC                 mov     rsi, rdx
.text:000000000000EFEF                 mov     [rsp+138h+var_100], rdx
.text:000000000000EFF4                 add     rax, r13
.text:000000000000EFF7                 movups  xmmword ptr [rax], xmm0
.text:000000000000EFFA                 movdqa  xmm0, [rsp+138h+var_58]
.text:000000000000F003                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000F007                 lea     rax, [rbp+rbp*2+0]
.text:000000000000F00C                 lea     rdi, [rdi+rax*8]
.text:000000000000F010                 movdqa  xmm0, [rsp+138h+var_88]
.text:000000000000F019                 movups  xmmword ptr [r13+r10+0], xmm0
.text:000000000000F01F                 movdqa  xmm0, [rsp+138h+var_78]
.text:000000000000F028                 movups  xmmword ptr [r13+r10+10h], xmm0
.text:000000000000F02E                 call    re_node_set_init_copy
.text:000000000000F033                 test    eax, eax
.text:000000000000F035                 jnz     loc_F110
.text:000000000000F03B                 mov     rdx, [rsp+138h+var_100]
.text:000000000000F040                 add     rbp, 1
.text:000000000000F044
.text:000000000000F044 loc_F044:                               ; CODE XREF: build_trtable+5FA↑j
.text:000000000000F044                 mov     rax, [rsp+138h+var_130]
.text:000000000000F049                 mov     rsi, [rsp+138h+var_118]
.text:000000000000F04E                 mov     rdi, rdx
.text:000000000000F051                 mov     rax, [rax+18h]
.text:000000000000F055                 mov     rsi, [rax+rsi]
.text:000000000000F059                 call    re_node_set_insert
.text:000000000000F05E                 test    al, al
.text:000000000000F060                 jz      loc_F110
.text:000000000000F066                 test    r15, r15
.text:000000000000F069                 jz      short loc_F078
.text:000000000000F06B
.text:000000000000F06B loc_F06B:                               ; CODE XREF: build_trtable+572↑j
.text:000000000000F06B                                         ; build_trtable+5A5↑j
.text:000000000000F06B                 add     rbx, 1
.text:000000000000F06F                 cmp     rbx, rbp
.text:000000000000F072                 jl      loc_EF28
.text:000000000000F078
.text:000000000000F078 loc_F078:                               ; CODE XREF: build_trtable+689↑j
.text:000000000000F078                 mov     r15, r13
.text:000000000000F07B
.text:000000000000F07B loc_F07B:                               ; CODE XREF: build_trtable+535↑j
.text:000000000000F07B                 cmp     rbp, rbx
.text:000000000000F07E                 jnz     loc_EADF
.text:000000000000F084                 mov     rax, rbp
.text:000000000000F087                 movdqa  xmm0, [rsp+138h+var_A8]
.text:000000000000F090                 shl     rax, 5
.text:000000000000F094                 mov     rbx, [rsp+138h+var_118]
.text:000000000000F099                 mov     edi, 8          ; size
.text:000000000000F09E                 add     rax, r15
.text:000000000000F0A1                 movups  xmmword ptr [rax], xmm0
.text:000000000000F0A4                 movdqa  xmm0, [rsp+138h+var_98]
.text:000000000000F0AD                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000F0B1                 mov     rax, [rsp+138h+var_130]
.text:000000000000F0B6                 mov     rax, [rax+18h]
.text:000000000000F0BA                 mov     r13, [rax+rbx]
.text:000000000000F0BE                 mov     rbx, [rsp+138h+var_120]
.text:000000000000F0C3                 lea     rax, [rbp+rbp*2+0]
.text:000000000000F0C8                 lea     rbx, [rbx+rax*8]
.text:000000000000F0CC                 mov     qword ptr [rbx], 1
.text:000000000000F0D3                 mov     qword ptr [rbx+8], 1
.text:000000000000F0DB                 call    _malloc
.text:000000000000F0E0                 test    rax, rax
.text:000000000000F0E3                 mov     [rbx+10h], rax
.text:000000000000F0E7                 jz      loc_EDCD
.text:000000000000F0ED                 mov     [rax], r13
.text:000000000000F0F0                 add     rbp, 1
.text:000000000000F0F4
.text:000000000000F0F4 loc_F0F4:                               ; CODE XREF: build_trtable+479↑j
.text:000000000000F0F4                                         ; build_trtable+816↓j ...
.text:000000000000F0F4                 pxor    xmm0, xmm0
.text:000000000000F0F8                 movaps  xmmword ptr [r12], xmm0
.text:000000000000F0FD                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000F103                 jmp     loc_EADF
.text:000000000000F103 ; ---------------------------------------------------------------------------
.text:000000000000F108                 align 10h
.text:000000000000F110
.text:000000000000F110 loc_F110:                               ; CODE XREF: build_trtable+3FF↑j
.text:000000000000F110                                         ; build_trtable+655↑j ...
.text:000000000000F110                 mov     rax, [rsp+138h+var_120]
.text:000000000000F115                 lea     rbx, [rax+10h]
.text:000000000000F119                 lea     rax, [rbp+rbp*2+0]
.text:000000000000F11E                 lea     rbp, [rbx+rax*8]
.text:000000000000F122                 nop     word ptr [rax+rax+00h]
.text:000000000000F128
.text:000000000000F128 loc_F128:                               ; CODE XREF: build_trtable+757↓j
.text:000000000000F128                 mov     rdi, [rbx]      ; ptr
.text:000000000000F12B                 add     rbx, 18h
.text:000000000000F12F                 call    _free
.text:000000000000F134                 cmp     rbp, rbx
.text:000000000000F137                 jnz     short loc_F128
.text:000000000000F139                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000F13E                 call    _free
.text:000000000000F143                 jmp     loc_EDF0
.text:000000000000F143 ; ---------------------------------------------------------------------------
.text:000000000000F148                 align 10h
.text:000000000000F150
.text:000000000000F150 loc_F150:                               ; CODE XREF: build_trtable+EF↑j
.text:000000000000F150                 mov     rsi, [rsp+138h+var_108]
.text:000000000000F155                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000F15C                 jle     loc_F265
.text:000000000000F162                 mov     rsi, [rsi+78h]
.text:000000000000F166                 lea     r12, [rsp+138h+var_A8]
.text:000000000000F16E                 xor     edx, edx
.text:000000000000F170
.text:000000000000F170 loc_F170:                               ; CODE XREF: build_trtable+7A4↓j
.text:000000000000F170                 mov     rcx, [r12+rdx]
.text:000000000000F174                 or      rcx, [rsi+rdx]
.text:000000000000F178                 mov     [r12+rdx], rcx
.text:000000000000F17C                 add     rdx, 8
.text:000000000000F180                 cmp     rdx, 20h ; ' '
.text:000000000000F184                 jnz     short loc_F170
.text:000000000000F186
.text:000000000000F186 loc_F186:                               ; CODE XREF: build_trtable+8A1↓j
.text:000000000000F186                                         ; build_trtable+8ED↓j
.text:000000000000F186                 mov     rbx, [rsp+138h+var_108]
.text:000000000000F18B                 mov     rdx, [rbx+0D8h]
.text:000000000000F192                 test    dl, 40h
.text:000000000000F195                 jnz     short loc_F1A3
.text:000000000000F197                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFBFFh
.text:000000000000F1A3
.text:000000000000F1A3 loc_F1A3:                               ; CODE XREF: build_trtable+7B5↑j
.text:000000000000F1A3                 and     edx, 80h
.text:000000000000F1A9                 jz      loc_EE46
.text:000000000000F1AF                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFFFEh
.text:000000000000F1B8                 jmp     loc_EE46
.text:000000000000F1B8 ; ---------------------------------------------------------------------------
.text:000000000000F1BD                 align 20h
.text:000000000000F1C0
.text:000000000000F1C0 loc_F1C0:                               ; CODE XREF: build_trtable+471↑j
.text:000000000000F1C0                 mov     rdx, qword ptr [rsp+138h+var_A8]
.text:000000000000F1C8                 pxor    xmm0, xmm0
.text:000000000000F1CC                 and     dh, 4
.text:000000000000F1CF                 movaps  xmmword ptr [r12], xmm0
.text:000000000000F1D4                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000F1DA                 jz      loc_EADF
.text:000000000000F1E0                 mov     qword ptr [rsp+138h+var_A8], 400h
.text:000000000000F1EC                 jmp     loc_EE57
.text:000000000000F1F1 ; ---------------------------------------------------------------------------
.text:000000000000F1F1
.text:000000000000F1F1 loc_F1F1:                               ; CODE XREF: build_trtable+4DD↑j
.text:000000000000F1F1                 test    byte ptr [r13+0Ah], 40h
.text:000000000000F1F6                 jnz     loc_F0F4
.text:000000000000F1FC                 mov     rdi, [rsp+138h+var_108]
.text:000000000000F201                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000F208                 jg      loc_EED5
.text:000000000000F20E
.text:000000000000F20E loc_F20E:                               ; CODE XREF: build_trtable+4EF↑j
.text:000000000000F20E                 mov     rsi, [rsp+138h+var_108]
.text:000000000000F213                 xor     ecx, ecx
.text:000000000000F215                 xor     edx, edx
.text:000000000000F217
.text:000000000000F217 loc_F217:                               ; CODE XREF: build_trtable+855↓j
.text:000000000000F217                 mov     rax, [rsi+rdx*8+0B8h]
.text:000000000000F21F                 not     rax
.text:000000000000F222                 and     rax, [r12+rdx*8]
.text:000000000000F226                 mov     [r12+rdx*8], rax
.text:000000000000F22A                 add     rdx, 1
.text:000000000000F22E                 or      rcx, rax
.text:000000000000F231                 cmp     rdx, 4
.text:000000000000F235                 jnz     short loc_F217
.text:000000000000F237                 test    rcx, rcx
.text:000000000000F23A                 jnz     loc_EF10
.text:000000000000F240                 jmp     loc_EADF
.text:000000000000F245 ; ---------------------------------------------------------------------------
.text:000000000000F245
.text:000000000000F245 loc_F245:                               ; CODE XREF: build_trtable+487↑j
.text:000000000000F245                 test    byte ptr [r13+0Ah], 40h
.text:000000000000F24A                 jz      loc_F0F4
.text:000000000000F250                 mov     r8, [rsp+138h+var_108]
.text:000000000000F255                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000F25D                 jg      loc_EE80
.text:000000000000F263                 jmp     short loc_F2D2
.text:000000000000F265 ; ---------------------------------------------------------------------------
.text:000000000000F265
.text:000000000000F265 loc_F265:                               ; CODE XREF: build_trtable+77C↑j
.text:000000000000F265                 pcmpeqd xmm0, xmm0
.text:000000000000F269                 lea     r12, [rsp+138h+var_A8]
.text:000000000000F271                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000F279                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000F281                 jmp     loc_F186
.text:000000000000F281 ; ---------------------------------------------------------------------------
.text:000000000000F286                 align 10h
.text:000000000000F290
.text:000000000000F290 loc_F290:                               ; CODE XREF: build_trtable+E5↑j
.text:000000000000F290                 mov     rsi, [r13+0]
.text:000000000000F294                 lea     r12, [rsp+138h+var_A8]
.text:000000000000F29C                 xor     edx, edx
.text:000000000000F29E
.text:000000000000F29E loc_F29E:                               ; CODE XREF: build_trtable+8D2↓j
.text:000000000000F29E                 mov     rcx, [r12+rdx]
.text:000000000000F2A2                 or      rcx, [rsi+rdx]
.text:000000000000F2A6                 mov     [r12+rdx], rcx
.text:000000000000F2AA                 add     rdx, 8
.text:000000000000F2AE                 cmp     rdx, 20h ; ' '
.text:000000000000F2B2                 jnz     short loc_F29E
.text:000000000000F2B4                 jmp     loc_EE46
.text:000000000000F2B9 ; ---------------------------------------------------------------------------
.text:000000000000F2B9
.text:000000000000F2B9 loc_F2B9:                               ; CODE XREF: build_trtable+F9↑j
.text:000000000000F2B9                 pcmpeqd xmm0, xmm0
.text:000000000000F2BD                 lea     r12, [rsp+138h+var_A8]
.text:000000000000F2C5                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000F2CD                 jmp     loc_F186
.text:000000000000F2D2 ; ---------------------------------------------------------------------------
.text:000000000000F2D2
.text:000000000000F2D2 loc_F2D2:                               ; CODE XREF: build_trtable+49A↑j
.text:000000000000F2D2                                         ; build_trtable+883↑j
.text:000000000000F2D2                 mov     rdi, [rsp+138h+var_108]
.text:000000000000F2D7                 xor     esi, esi
.text:000000000000F2D9                 xor     edx, edx
.text:000000000000F2DB
.text:000000000000F2DB loc_F2DB:                               ; CODE XREF: build_trtable+916↓j
.text:000000000000F2DB                 mov     rcx, [r12+rdx*8]
.text:000000000000F2DF                 and     rcx, [rdi+rdx*8+0B8h]
.text:000000000000F2E7                 mov     [r12+rdx*8], rcx
.text:000000000000F2EB                 add     rdx, 1
.text:000000000000F2EF                 or      rsi, rcx
.text:000000000000F2F2                 cmp     rdx, 4
.text:000000000000F2F6                 jnz     short loc_F2DB
.text:000000000000F2F8                 test    rsi, rsi
.text:000000000000F2FB                 jnz     loc_EEB5
.text:000000000000F301                 jmp     loc_EADF
.text:000000000000F306 ; ---------------------------------------------------------------------------
.text:000000000000F306
.text:000000000000F306 loc_F306:                               ; CODE XREF: build_trtable+9B1↓j
.text:000000000000F306                 mov     edx, [rsp+138h+var_CC]
.text:000000000000F30A                 test    edx, edx
.text:000000000000F30C                 jz      loc_F397
.text:000000000000F312                 nop     word ptr [rax+rax+00h]
.text:000000000000F318
.text:000000000000F318 loc_F318:                               ; CODE XREF: build_trtable+238↑j
.text:000000000000F318                                         ; build_trtable+A0E↓j ...
.text:000000000000F318                 mov     rbp, [rsp+138h+var_118]
.text:000000000000F31D
.text:000000000000F31D loc_F31D:                               ; CODE XREF: build_trtable+2FE↑j
.text:000000000000F31D                                         ; build_trtable+A47↓j
.text:000000000000F31D                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000F322                 call    _free
.text:000000000000F327                 mov     r12, [rsp+138h+var_B8]
.text:000000000000F32F
.text:000000000000F32F loc_F32F:                               ; CODE XREF: build_trtable+14F↑j
.text:000000000000F32F                                         ; build_trtable+16A↑j ...
.text:000000000000F32F                 mov     rdi, r12        ; ptr
.text:000000000000F332                 call    _free
.text:000000000000F337                 mov     rax, [rsp+138h+var_120]
.text:000000000000F33C                 lea     rbx, [rax+10h]
.text:000000000000F340                 lea     rax, [rbp+rbp*2+0]
.text:000000000000F345                 lea     rbp, [rbx+rax*8]
.text:000000000000F349                 nop     dword ptr [rax+00000000h]
.text:000000000000F350
.text:000000000000F350 loc_F350:                               ; CODE XREF: build_trtable+97F↓j
.text:000000000000F350                 mov     rdi, [rbx]      ; ptr
.text:000000000000F353                 add     rbx, 18h
.text:000000000000F357                 call    _free
.text:000000000000F35C                 cmp     rbp, rbx
.text:000000000000F35F                 jnz     short loc_F350
.text:000000000000F361                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000F366                 call    _free
.text:000000000000F36B                 jmp     loc_EDF0
.text:000000000000F370 ; ---------------------------------------------------------------------------
.text:000000000000F370
.text:000000000000F370 loc_F370:                               ; CODE XREF: build_trtable+270↑j
.text:000000000000F370                 mov     rdi, [rsp+138h+var_110]
.text:000000000000F375                 mov     ecx, 1
.text:000000000000F37A                 mov     rdx, r14
.text:000000000000F37D                 mov     rsi, rbp
.text:000000000000F380                 call    re_acquire_state_context
.text:000000000000F385                 mov     rdi, [rsp+138h+var_108]
.text:000000000000F38A                 test    rax, rax
.text:000000000000F38D                 mov     [rdi+rbx*8], rax
.text:000000000000F391                 jz      loc_F306
.text:000000000000F397
.text:000000000000F397 loc_F397:                               ; CODE XREF: build_trtable+92C↑j
.text:000000000000F397                 mov     rdi, [rsp+138h+ptr]
.text:000000000000F39C                 cmp     rax, [rdi+rbx*8]
.text:000000000000F3A0                 jz      short loc_F3BB
.text:000000000000F3A2                 movzx   edi, [rsp+138h+var_E9]
.text:000000000000F3A7                 cmp     dword ptr [rbp+0B4h], 2
.text:000000000000F3AE                 mov     eax, 1
.text:000000000000F3B3                 cmovge  edi, eax
.text:000000000000F3B6                 mov     [rsp+138h+var_E9], dil
.text:000000000000F3BB
.text:000000000000F3BB loc_F3BB:                               ; CODE XREF: build_trtable+9C0↑j
.text:000000000000F3BB                 mov     rdi, [rsp+138h+var_110]
.text:000000000000F3C0                 mov     rsi, rbp
.text:000000000000F3C3                 mov     ecx, 2
.text:000000000000F3C8                 mov     rdx, r14
.text:000000000000F3CB                 call    re_acquire_state_context
.text:000000000000F3D0                 mov     rsi, [rsp+138h+var_100]
.text:000000000000F3D5                 test    rax, rax
.text:000000000000F3D8                 mov     [rsi+rbx*8], rax
.text:000000000000F3DC                 jnz     loc_EC71
.text:000000000000F3E2                 mov     eax, [rsp+138h+var_CC]
.text:000000000000F3E6                 test    eax, eax
.text:000000000000F3E8                 jz      loc_EC71
.text:000000000000F3EE                 jmp     loc_F318
.text:000000000000F3EE ; ---------------------------------------------------------------------------
.text:000000000000F3F3                 align 8
.text:000000000000F3F8
.text:000000000000F3F8 loc_F3F8:                               ; CODE XREF: build_trtable+266↑j
.text:000000000000F3F8                 mov     ecx, [rsp+138h+var_CC]
.text:000000000000F3FC                 test    ecx, ecx
.text:000000000000F3FE                 jz      loc_EC4C
.text:000000000000F404                 jmp     loc_F318
.text:000000000000F409 ; ---------------------------------------------------------------------------
.text:000000000000F409
.text:000000000000F409 loc_F409:                               ; CODE XREF: build_trtable+2DA↑j
.text:000000000000F409                 mov     esi, 200h       ; size
.text:000000000000F40E                 mov     edi, 8          ; nmemb
.text:000000000000F413                 call    _calloc
.text:000000000000F418                 mov     r11, rax
.text:000000000000F41B                 mov     rax, [rsp+138h+var_130]
.text:000000000000F420                 test    r11, r11
.text:000000000000F423                 mov     [rax+60h], r11
.text:000000000000F427                 jz      loc_F31D
.text:000000000000F42D                 mov     r13, [rsp+138h+var_F8]
.text:000000000000F432                 mov     r10, [rsp+138h+ptr]
.text:000000000000F437                 mov     r12, r11
.text:000000000000F43A                 mov     r14, [rsp+138h+var_108]
.text:000000000000F43F                 mov     rdx, [rsp+138h+var_118]
.text:000000000000F444                 xor     ebx, ebx
.text:000000000000F446                 add     r13, 20h ; ' '
.text:000000000000F44A
.text:000000000000F44A loc_F44A:                               ; CODE XREF: build_trtable+A9E↓j
.text:000000000000F44A                 mov     rax, [rdx+rbx]
.text:000000000000F44E                 test    rax, rax
.text:000000000000F451                 jz      short loc_F46F
.text:000000000000F453                 mov     rsi, r12
.text:000000000000F456                 mov     ecx, 1
.text:000000000000F45B
.text:000000000000F45B loc_F45B:                               ; CODE XREF: build_trtable+A8D↓j
.text:000000000000F45B                 test    al, 1
.text:000000000000F45D                 jnz     loc_F50C
.text:000000000000F463
.text:000000000000F463 loc_F463:                               ; CODE XREF: build_trtable+B6B↓j
.text:000000000000F463                 add     rcx, rcx
.text:000000000000F466                 add     rsi, 8
.text:000000000000F46A                 shr     rax, 1
.text:000000000000F46D                 jnz     short loc_F45B
.text:000000000000F46F
.text:000000000000F46F loc_F46F:                               ; CODE XREF: build_trtable+A71↑j
.text:000000000000F46F                 add     rbx, 8
.text:000000000000F473                 add     r12, 200h
.text:000000000000F47A                 cmp     rbx, 20h ; ' '
.text:000000000000F47E                 jnz     short loc_F44A
.text:000000000000F480                 jmp     loc_ED3E
.text:000000000000F480 ; ---------------------------------------------------------------------------
.text:000000000000F485                 align 8
.text:000000000000F488
.text:000000000000F488 loc_F488:                               ; CODE XREF: build_trtable+342↑j
.text:000000000000F488                 mov     rdi, [rsp+138h+var_120]
.text:000000000000F48D                 test    [rdi+r9+1800h], rcx
.text:000000000000F495                 jnz     short loc_F507
.text:000000000000F497                 lea     rdi, [rbx+r9]
.text:000000000000F49B                 xor     r8d, r8d
.text:000000000000F49E                 xchg    ax, ax
.text:000000000000F4A0
.text:000000000000F4A0 loc_F4A0:                               ; CODE XREF: build_trtable+AD1↓j
.text:000000000000F4A0                 mov     r10, [rdi]
.text:000000000000F4A3                 add     r8, 1
.text:000000000000F4A7                 add     rdi, 20h ; ' '
.text:000000000000F4AB                 and     r10, rcx
.text:000000000000F4AE                 test    r10, r10
.text:000000000000F4B1                 jz      short loc_F4A0
.text:000000000000F4B3                 shl     r8, 3
.text:000000000000F4B7
.text:000000000000F4B7 loc_F4B7:                               ; CODE XREF: build_trtable+B2A↓j
.text:000000000000F4B7                 test    [r15+r9+0B8h], rcx
.text:000000000000F4BF                 jz      short loc_F4CE
.text:000000000000F4C1                 mov     rdi, [r13+r8+0]
.text:000000000000F4C6                 mov     [rsi], rdi
.text:000000000000F4C9                 jmp     loc_ED28
.text:000000000000F4CE ; ---------------------------------------------------------------------------
.text:000000000000F4CE
.text:000000000000F4CE loc_F4CE:                               ; CODE XREF: build_trtable+ADF↑j
.text:000000000000F4CE                 mov     rdi, [r12+r8]
.text:000000000000F4D2                 mov     [rsi], rdi
.text:000000000000F4D5                 jmp     loc_ED28
.text:000000000000F4DA ; ---------------------------------------------------------------------------
.text:000000000000F4DA
.text:000000000000F4DA loc_F4DA:                               ; CODE XREF: build_trtable+83↑j
.text:000000000000F4DA                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000F4DF                 call    _free
.text:000000000000F4E4
.text:000000000000F4E4 loc_F4E4:                               ; CODE XREF: build_trtable+B8C↓j
.text:000000000000F4E4                 mov     esi, 100h       ; size
.text:000000000000F4E9                 mov     edi, 8          ; nmemb
.text:000000000000F4EE                 call    _calloc
.text:000000000000F4F3                 mov     rbx, [rsp+138h+var_130]
.text:000000000000F4F8                 test    rax, rax
.text:000000000000F4FB                 mov     [rbx+58h], rax
.text:000000000000F4FF                 setnz   al
.text:000000000000F502                 jmp     loc_EDF2
.text:000000000000F507 ; ---------------------------------------------------------------------------
.text:000000000000F507
.text:000000000000F507 loc_F507:                               ; CODE XREF: build_trtable+AB5↑j
.text:000000000000F507                 xor     r8d, r8d
.text:000000000000F50A                 jmp     short loc_F4B7
.text:000000000000F50C ; ---------------------------------------------------------------------------
.text:000000000000F50C
.text:000000000000F50C loc_F50C:                               ; CODE XREF: build_trtable+A7D↑j
.text:000000000000F50C                 mov     rdi, [rsp+138h+var_120]
.text:000000000000F511                 test    [rdi+rbx+1800h], rcx
.text:000000000000F519                 jnz     short loc_F550
.text:000000000000F51B                 lea     r9, [r13+rbx+0]
.text:000000000000F520                 xor     r8d, r8d
.text:000000000000F523
.text:000000000000F523 loc_F523:                               ; CODE XREF: build_trtable+B57↓j
.text:000000000000F523                 mov     r15, [r9]
.text:000000000000F526                 add     r8, 1
.text:000000000000F52A                 add     r9, 20h ; ' '
.text:000000000000F52E                 mov     rdi, r8
.text:000000000000F531                 and     r15, rcx
.text:000000000000F534                 test    r15, r15
.text:000000000000F537                 jz      short loc_F523
.text:000000000000F539
.text:000000000000F539 loc_F539:                               ; CODE XREF: build_trtable+B72↓j
.text:000000000000F539                 mov     r8, [r10+rdi*8]
.text:000000000000F53D                 mov     [rsi], r8
.text:000000000000F540                 mov     rdi, [r14+rdi*8]
.text:000000000000F544                 mov     [rsi+800h], rdi
.text:000000000000F54B                 jmp     loc_F463
.text:000000000000F550 ; ---------------------------------------------------------------------------
.text:000000000000F550
.text:000000000000F550 loc_F550:                               ; CODE XREF: build_trtable+B39↑j
.text:000000000000F550                 xor     edi, edi
.text:000000000000F552                 jmp     short loc_F539
.text:000000000000F554 ; ---------------------------------------------------------------------------
.text:000000000000F554
.text:000000000000F554 loc_F554:                               ; CODE XREF: build_trtable+423↑j
.text:000000000000F554                 call    ___stack_chk_fail
.text:000000000000F559 ; ---------------------------------------------------------------------------
.text:000000000000F559
.text:000000000000F559 loc_F559:                               ; CODE XREF: build_trtable+11D↑j
.text:000000000000F559                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000F55E                 call    _free
.text:000000000000F563                 test    rbp, rbp
.text:000000000000F566                 jnz     loc_EDF0
.text:000000000000F56C                 jmp     loc_F4E4
.text:000000000000F56C ; } // starts at E9E0
.text:000000000000F56C build_trtable   endp
.text:000000000000F56C
.text:000000000000F56C ; ---------------------------------------------------------------------------
.text:000000000000F571                 align 20h
.text:000000000000F580
.text:000000000000F580 ; =============== S U B R O U T I N E =======================================
.text:000000000000F580
.text:000000000000F580
.text:000000000000F580 calc_first      proc near               ; DATA XREF: re_compile_internal+67E↓o
.text:000000000000F580 ; __unwind {
.text:000000000000F580                 cmp     byte ptr [rsi+30h], 10h
.text:000000000000F584                 jz      short loc_F5E8
.text:000000000000F586                 push    rbp
.text:000000000000F587                 push    rbx
.text:000000000000F588                 mov     rbx, rsi
.text:000000000000F58B                 mov     rbp, rdi
.text:000000000000F58E                 sub     rsp, 8
.text:000000000000F592                 mov     [rbx+18h], rsi
.text:000000000000F596                 mov     rdx, [rbx+30h]
.text:000000000000F59A                 mov     rsi, [rsi+28h]
.text:000000000000F59E                 call    re_dfa_add_node
.text:000000000000F5A3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000F5A7                 mov     rdx, rax
.text:000000000000F5AA                 mov     [rbx+38h], rax
.text:000000000000F5AE                 jz      short loc_F600
.text:000000000000F5B0                 xor     eax, eax
.text:000000000000F5B2                 cmp     byte ptr [rbx+30h], 0Ch
.text:000000000000F5B6                 jnz     short loc_F5DC
.text:000000000000F5B8                 mov     ecx, [rbx+28h]
.text:000000000000F5BB                 shl     rdx, 4
.text:000000000000F5BF                 add     rdx, [rbp+0]
.text:000000000000F5C3                 and     ecx, 3FFh
.text:000000000000F5C9                 shl     ecx, 8
.text:000000000000F5CC                 mov     esi, ecx
.text:000000000000F5CE                 mov     ecx, [rdx+8]
.text:000000000000F5D1                 and     ecx, 0FFFC00FFh
.text:000000000000F5D7                 or      ecx, esi
.text:000000000000F5D9                 mov     [rdx+8], ecx
.text:000000000000F5DC
.text:000000000000F5DC loc_F5DC:                               ; CODE XREF: calc_first+36↑j
.text:000000000000F5DC                                         ; calc_first+85↓j
.text:000000000000F5DC                 add     rsp, 8
.text:000000000000F5E0                 pop     rbx
.text:000000000000F5E1                 pop     rbp
.text:000000000000F5E2                 retn
.text:000000000000F5E2 ; ---------------------------------------------------------------------------
.text:000000000000F5E3                 align 8
.text:000000000000F5E8
.text:000000000000F5E8 loc_F5E8:                               ; CODE XREF: calc_first+4↑j
.text:000000000000F5E8                 mov     rax, [rsi+8]
.text:000000000000F5EC                 mov     rdx, [rax+18h]
.text:000000000000F5F0                 mov     rax, [rax+38h]
.text:000000000000F5F4                 mov     [rsi+18h], rdx
.text:000000000000F5F8                 mov     [rsi+38h], rax
.text:000000000000F5FC                 xor     eax, eax
.text:000000000000F5FE                 retn
.text:000000000000F5FE ; ---------------------------------------------------------------------------
.text:000000000000F5FF                 align 20h
.text:000000000000F600
.text:000000000000F600 loc_F600:                               ; CODE XREF: calc_first+2E↑j
.text:000000000000F600                 mov     eax, 0Ch
.text:000000000000F605                 jmp     short loc_F5DC
.text:000000000000F605 ; } // starts at F580
.text:000000000000F605 calc_first      endp
.text:000000000000F605
.text:000000000000F605 ; ---------------------------------------------------------------------------
.text:000000000000F607                 align 10h
.text:000000000000F610
.text:000000000000F610 ; =============== S U B R O U T I N E =======================================
.text:000000000000F610
.text:000000000000F610
.text:000000000000F610 free_fail_stack_return_part_24 proc near
.text:000000000000F610                                         ; CODE XREF: set_regs+4FF↓p
.text:000000000000F610                                         ; set_regs+567↓p ...
.text:000000000000F610 ; __unwind {
.text:000000000000F610                 push    r12
.text:000000000000F612                 push    rbp
.text:000000000000F613                 mov     rbp, rdi
.text:000000000000F616                 push    rbx
.text:000000000000F617                 cmp     qword ptr [rdi], 0
.text:000000000000F61B                 jle     short loc_F652
.text:000000000000F61D                 xor     ebx, ebx
.text:000000000000F61F                 xor     r12d, r12d
.text:000000000000F622                 nop     word ptr [rax+rax+00h]
.text:000000000000F628
.text:000000000000F628 loc_F628:                               ; CODE XREF: free_fail_stack_return_part_24+40↓j
.text:000000000000F628                 mov     rax, [rbp+10h]
.text:000000000000F62C                 add     r12, 1
.text:000000000000F630                 mov     rdi, [rax+rbx+28h] ; ptr
.text:000000000000F635                 call    _free
.text:000000000000F63A                 mov     rax, [rbp+10h]
.text:000000000000F63E                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000F643                 add     rbx, 30h ; '0'
.text:000000000000F647                 call    _free
.text:000000000000F64C                 cmp     r12, [rbp+0]
.text:000000000000F650                 jl      short loc_F628
.text:000000000000F652
.text:000000000000F652 loc_F652:                               ; CODE XREF: free_fail_stack_return_part_24+B↑j
.text:000000000000F652                 pop     rbx
.text:000000000000F653                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000F657                 pop     rbp
.text:000000000000F658                 pop     r12
.text:000000000000F65A                 jmp     _free
.text:000000000000F65A ; } // starts at F610
.text:000000000000F65A free_fail_stack_return_part_24 endp
.text:000000000000F65A
.text:000000000000F65A ; ---------------------------------------------------------------------------
.text:000000000000F65F                 align 20h
.text:000000000000F660
.text:000000000000F660 ; =============== S U B R O U T I N E =======================================
.text:000000000000F660
.text:000000000000F660
.text:000000000000F660 pop_fail_stack_isra_25 proc near        ; CODE XREF: set_regs+5B3↓p
.text:000000000000F660                                         ; set_regs+606↓p
.text:000000000000F660 ; __unwind {
.text:000000000000F660                 push    r12
.text:000000000000F662                 push    rbp
.text:000000000000F663                 push    rbx
.text:000000000000F664                 mov     rax, [rdi]
.text:000000000000F667                 sub     rax, 1
.text:000000000000F66B                 test    rax, rax
.text:000000000000F66E                 mov     [rdi], rax
.text:000000000000F671                 js      short loc_F6D5
.text:000000000000F673                 lea     rbx, [rax+rax*2]
.text:000000000000F677                 mov     rax, [rsi]
.text:000000000000F67A                 mov     r12, rsi
.text:000000000000F67D                 shl     rcx, 4
.text:000000000000F681                 mov     rbp, r9
.text:000000000000F684                 mov     rdi, r8         ; dest
.text:000000000000F687                 shl     rbx, 4
.text:000000000000F68B                 add     rax, rbx
.text:000000000000F68E                 mov     rsi, [rax]
.text:000000000000F691                 mov     [rdx], rsi
.text:000000000000F694                 mov     rsi, [rax+10h]  ; src
.text:000000000000F698                 mov     rdx, rcx        ; n
.text:000000000000F69B                 call    _memcpy
.text:000000000000F6A0                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000F6A4                 call    _free
.text:000000000000F6A9                 mov     rax, [r12]
.text:000000000000F6AD                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000F6B2                 call    _free
.text:000000000000F6B7                 add     rbx, [r12]
.text:000000000000F6BB                 movdqu  xmm0, xmmword ptr [rbx+18h]
.text:000000000000F6C0                 movaps  xmmword ptr [rbp+0], xmm0
.text:000000000000F6C4                 mov     rax, [rbx+28h]
.text:000000000000F6C8                 mov     [rbp+10h], rax
.text:000000000000F6CC                 mov     rax, [rbx+8]
.text:000000000000F6D0                 pop     rbx
.text:000000000000F6D1                 pop     rbp
.text:000000000000F6D2                 pop     r12
.text:000000000000F6D4                 retn
.text:000000000000F6D5 ; ---------------------------------------------------------------------------
.text:000000000000F6D5
.text:000000000000F6D5 loc_F6D5:                               ; CODE XREF: pop_fail_stack_isra_25+11↑j
.text:000000000000F6D5                 lea     rcx, __PRETTY_FUNCTION___8040 ; "pop_fail_stack"
.text:000000000000F6DC                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000F6E3                 lea     rdi, aNum0      ; "num >= 0"
.text:000000000000F6EA                 mov     edx, 555h       ; line
.text:000000000000F6EF                 call    ___assert_fail
.text:000000000000F6EF ; } // starts at F660
.text:000000000000F6EF pop_fail_stack_isra_25 endp
.text:000000000000F6EF
.text:000000000000F6EF ; ---------------------------------------------------------------------------
.text:000000000000F6F4                 align 20h
.text:000000000000F700
.text:000000000000F700 ; =============== S U B R O U T I N E =======================================
.text:000000000000F700
.text:000000000000F700
.text:000000000000F700 build_equiv_class_isra_27 proc near     ; CODE XREF: parse_expression+C30↓p
.text:000000000000F700                                         ; parse_expression+C68↓p
.text:000000000000F700 ; __unwind {
.text:000000000000F700                 push    rbp
.text:000000000000F701                 push    rbx
.text:000000000000F702                 mov     rbp, rdi
.text:000000000000F705                 mov     rdi, rsi        ; s
.text:000000000000F708                 mov     rbx, rsi
.text:000000000000F70B                 sub     rsp, 8
.text:000000000000F70F                 call    _strlen
.text:000000000000F714                 cmp     rax, 1
.text:000000000000F718                 jnz     short loc_F740
.text:000000000000F71A                 movzx   ecx, byte ptr [rbx]
.text:000000000000F71D                 mov     rdx, rcx
.text:000000000000F720                 and     ecx, 3Fh
.text:000000000000F723                 shr     rdx, 3
.text:000000000000F727                 shl     rax, cl
.text:000000000000F72A                 and     edx, 18h
.text:000000000000F72D                 or      [rbp+rdx+0], rax
.text:000000000000F732                 add     rsp, 8
.text:000000000000F736                 xor     eax, eax
.text:000000000000F738                 pop     rbx
.text:000000000000F739                 pop     rbp
.text:000000000000F73A                 retn
.text:000000000000F73A ; ---------------------------------------------------------------------------
.text:000000000000F73B                 align 20h
.text:000000000000F740
.text:000000000000F740 loc_F740:                               ; CODE XREF: build_equiv_class_isra_27+18↑j
.text:000000000000F740                 add     rsp, 8
.text:000000000000F744                 mov     eax, 3
.text:000000000000F749                 pop     rbx
.text:000000000000F74A                 pop     rbp
.text:000000000000F74B                 retn
.text:000000000000F74B ; } // starts at F700
.text:000000000000F74B build_equiv_class_isra_27 endp
.text:000000000000F74B
.text:000000000000F74B ; ---------------------------------------------------------------------------
.text:000000000000F74C                 align 10h
.text:000000000000F750
.text:000000000000F750 ; =============== S U B R O U T I N E =======================================
.text:000000000000F750
.text:000000000000F750
.text:000000000000F750 build_charclass_isra_29 proc near       ; CODE XREF: build_charclass_op+A3↓p
.text:000000000000F750                                         ; parse_expression+D1D↓p
.text:000000000000F750
.text:000000000000F750 var_38          = qword ptr -38h
.text:000000000000F750 var_30          = qword ptr -30h
.text:000000000000F750 arg_0           = qword ptr  8
.text:000000000000F750
.text:000000000000F750 ; __unwind {
.text:000000000000F750                 push    r14
.text:000000000000F752                 push    r13
.text:000000000000F754                 mov     r13, rcx
.text:000000000000F757                 push    r12
.text:000000000000F759                 push    rbp
.text:000000000000F75A                 mov     r12, r9
.text:000000000000F75D                 push    rbx
.text:000000000000F75E                 mov     rbp, rdi
.text:000000000000F761                 mov     rbx, rsi
.text:000000000000F764                 sub     rsp, 10h
.text:000000000000F768                 test    [rsp+38h+arg_0], 400000h
.text:000000000000F771                 jz      short loc_F798
.text:000000000000F773                 lea     rdi, aUpper     ; "upper"
.text:000000000000F77A                 mov     ecx, 6
.text:000000000000F77F                 mov     rsi, r9
.text:000000000000F782                 repe cmpsb
.text:000000000000F784                 setnbe  al
.text:000000000000F787                 sbb     al, 0
.text:000000000000F789                 test    al, al
.text:000000000000F78B                 jnz     loc_F886
.text:000000000000F791                 lea     r12, aAlpha     ; "alpha"
.text:000000000000F798
.text:000000000000F798 loc_F798:                               ; CODE XREF: build_charclass_isra_29+21↑j
.text:000000000000F798                 mov     rcx, [r13+0]
.text:000000000000F79C                 cmp     [r8], rcx
.text:000000000000F79F                 mov     rax, [rdx]
.text:000000000000F7A2                 jz      loc_F8B9
.text:000000000000F7A8
.text:000000000000F7A8 loc_F7A8:                               ; CODE XREF: build_charclass_isra_29+163↓j
.text:000000000000F7A8                                         ; build_charclass_isra_29+1A3↓j
.text:000000000000F7A8                 lea     rdx, [rcx+1]
.text:000000000000F7AC                 mov     rdi, r12        ; property
.text:000000000000F7AF                 mov     [r13+0], rdx
.text:000000000000F7B3                 lea     r13, [rax+rcx*8]
.text:000000000000F7B7                 call    _wctype
.text:000000000000F7BC                 lea     rdi, aAlnum     ; "alnum"
.text:000000000000F7C3                 mov     [r13+0], rax
.text:000000000000F7C7                 mov     ecx, 6
.text:000000000000F7CC                 mov     rsi, r12
.text:000000000000F7CF                 repe cmpsb
.text:000000000000F7D1                 setnbe  al
.text:000000000000F7D4                 sbb     al, 0
.text:000000000000F7D6                 test    al, al
.text:000000000000F7D8                 jz      short loc_F848
.text:000000000000F7DA                 lea     rdi, aCntrl     ; "cntrl"
.text:000000000000F7E1                 mov     ecx, 6
.text:000000000000F7E6                 mov     rsi, r12
.text:000000000000F7E9                 repe cmpsb
.text:000000000000F7EB                 setnbe  al
.text:000000000000F7EE                 sbb     al, 0
.text:000000000000F7F0                 test    al, al
.text:000000000000F7F2                 jnz     loc_F8F8
.text:000000000000F7F8                 call    ___ctype_b_loc
.text:000000000000F7FD                 xor     ecx, ecx
.text:000000000000F7FF                 test    rbp, rbp
.text:000000000000F802                 mov     rdx, [rax]
.text:000000000000F805                 mov     edi, 1
.text:000000000000F80A                 jnz     loc_FACA
.text:000000000000F810
.text:000000000000F810 loc_F810:                               ; CODE XREF: build_charclass_isra_29+E2↓j
.text:000000000000F810                 test    byte ptr [rdx+rcx*2], 2
.text:000000000000F814                 jz      short loc_F827
.text:000000000000F816                 mov     rax, rcx
.text:000000000000F819                 mov     rsi, rdi
.text:000000000000F81C                 sar     rax, 6
.text:000000000000F820                 shl     rsi, cl
.text:000000000000F823                 or      [rbx+rax*8], rsi
.text:000000000000F827
.text:000000000000F827 loc_F827:                               ; CODE XREF: build_charclass_isra_29+C4↑j
.text:000000000000F827                 add     rcx, 1
.text:000000000000F82B                 cmp     rcx, 100h
.text:000000000000F832                 jnz     short loc_F810
.text:000000000000F834
.text:000000000000F834 loc_F834:                               ; CODE XREF: build_charclass_isra_29+134↓j
.text:000000000000F834                                         ; build_charclass_isra_29+225↓j ...
.text:000000000000F834                 xor     eax, eax
.text:000000000000F836
.text:000000000000F836 loc_F836:                               ; CODE XREF: build_charclass_isra_29+4AD↓j
.text:000000000000F836                                         ; build_charclass_isra_29+765↓j
.text:000000000000F836                 add     rsp, 10h
.text:000000000000F83A                 pop     rbx
.text:000000000000F83B                 pop     rbp
.text:000000000000F83C                 pop     r12
.text:000000000000F83E                 pop     r13
.text:000000000000F840                 pop     r14
.text:000000000000F842                 retn
.text:000000000000F842 ; ---------------------------------------------------------------------------
.text:000000000000F843                 align 8
.text:000000000000F848
.text:000000000000F848 loc_F848:                               ; CODE XREF: build_charclass_isra_29+88↑j
.text:000000000000F848                 call    ___ctype_b_loc
.text:000000000000F84D                 xor     ecx, ecx
.text:000000000000F84F                 test    rbp, rbp
.text:000000000000F852                 mov     rdx, [rax]
.text:000000000000F855                 mov     edi, 1
.text:000000000000F85A                 jnz     loc_FA4A
.text:000000000000F860
.text:000000000000F860 loc_F860:                               ; CODE XREF: build_charclass_isra_29+132↓j
.text:000000000000F860                 test    byte ptr [rdx+rcx*2], 8
.text:000000000000F864                 jz      short loc_F877
.text:000000000000F866                 mov     rax, rcx
.text:000000000000F869                 mov     rsi, rdi
.text:000000000000F86C                 sar     rax, 6
.text:000000000000F870                 shl     rsi, cl
.text:000000000000F873                 or      [rbx+rax*8], rsi
.text:000000000000F877
.text:000000000000F877 loc_F877:                               ; CODE XREF: build_charclass_isra_29+114↑j
.text:000000000000F877                 add     rcx, 1
.text:000000000000F87B                 cmp     rcx, 100h
.text:000000000000F882                 jnz     short loc_F860
.text:000000000000F884                 jmp     short loc_F834
.text:000000000000F886 ; ---------------------------------------------------------------------------
.text:000000000000F886
.text:000000000000F886 loc_F886:                               ; CODE XREF: build_charclass_isra_29+3B↑j
.text:000000000000F886                 lea     rdi, aLower     ; "lower"
.text:000000000000F88D                 mov     ecx, 6
.text:000000000000F892                 mov     rsi, r9
.text:000000000000F895                 repe cmpsb
.text:000000000000F897                 mov     rcx, [r13+0]
.text:000000000000F89B                 setnbe  al
.text:000000000000F89E                 sbb     al, 0
.text:000000000000F8A0                 test    al, al
.text:000000000000F8A2                 lea     rax, aAlpha     ; "alpha"
.text:000000000000F8A9                 cmovz   r12, rax
.text:000000000000F8AD                 cmp     [r8], rcx
.text:000000000000F8B0                 mov     rax, [rdx]
.text:000000000000F8B3                 jnz     loc_F7A8
.text:000000000000F8B9
.text:000000000000F8B9 loc_F8B9:                               ; CODE XREF: build_charclass_isra_29+52↑j
.text:000000000000F8B9                 lea     r14, [rcx+rcx+1]
.text:000000000000F8BE                 mov     rdi, rax        ; ptr
.text:000000000000F8C1                 mov     [rsp+38h+var_30], r8
.text:000000000000F8C6                 mov     [rsp+38h+var_38], rdx
.text:000000000000F8CA                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000F8D2                 call    _realloc
.text:000000000000F8D7                 test    rax, rax
.text:000000000000F8DA                 jz      loc_FBF8
.text:000000000000F8E0                 mov     rdx, [rsp+38h+var_38]
.text:000000000000F8E4                 mov     r8, [rsp+38h+var_30]
.text:000000000000F8E9                 mov     [rdx], rax
.text:000000000000F8EC                 mov     [r8], r14
.text:000000000000F8EF                 mov     rcx, [r13+0]
.text:000000000000F8F3                 jmp     loc_F7A8
.text:000000000000F8F8 ; ---------------------------------------------------------------------------
.text:000000000000F8F8
.text:000000000000F8F8 loc_F8F8:                               ; CODE XREF: build_charclass_isra_29+A2↑j
.text:000000000000F8F8                 lea     rdi, aLower     ; "lower"
.text:000000000000F8FF                 mov     ecx, 6
.text:000000000000F904                 mov     rsi, r12
.text:000000000000F907                 repe cmpsb
.text:000000000000F909                 setnbe  al
.text:000000000000F90C                 sbb     al, 0
.text:000000000000F90E                 test    al, al
.text:000000000000F910                 jz      short loc_F97A
.text:000000000000F912                 lea     rdi, aSpace     ; "space"
.text:000000000000F919                 mov     ecx, 6
.text:000000000000F91E                 mov     rsi, r12
.text:000000000000F921                 repe cmpsb
.text:000000000000F923                 setnbe  al
.text:000000000000F926                 sbb     al, 0
.text:000000000000F928                 test    al, al
.text:000000000000F92A                 jnz     loc_F9C2
.text:000000000000F930                 call    ___ctype_b_loc
.text:000000000000F935                 xor     ecx, ecx
.text:000000000000F937                 test    rbp, rbp
.text:000000000000F93A                 mov     rdx, [rax]
.text:000000000000F93D                 mov     edi, 1
.text:000000000000F942                 jnz     loc_FC9E
.text:000000000000F948                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000F950
.text:000000000000F950 loc_F950:                               ; CODE XREF: build_charclass_isra_29+223↓j
.text:000000000000F950                 test    byte ptr [rdx+rcx*2+1], 20h
.text:000000000000F955                 jz      short loc_F968
.text:000000000000F957                 mov     rax, rcx
.text:000000000000F95A                 mov     rsi, rdi
.text:000000000000F95D                 sar     rax, 6
.text:000000000000F961                 shl     rsi, cl
.text:000000000000F964                 or      [rbx+rax*8], rsi
.text:000000000000F968
.text:000000000000F968 loc_F968:                               ; CODE XREF: build_charclass_isra_29+205↑j
.text:000000000000F968                 add     rcx, 1
.text:000000000000F96C                 cmp     rcx, 100h
.text:000000000000F973                 jnz     short loc_F950
.text:000000000000F975                 jmp     loc_F834
.text:000000000000F97A ; ---------------------------------------------------------------------------
.text:000000000000F97A
.text:000000000000F97A loc_F97A:                               ; CODE XREF: build_charclass_isra_29+1C0↑j
.text:000000000000F97A                 call    ___ctype_b_loc
.text:000000000000F97F                 xor     ecx, ecx
.text:000000000000F981                 test    rbp, rbp
.text:000000000000F984                 mov     rdx, [rax]
.text:000000000000F987                 mov     edi, 1
.text:000000000000F98C                 jnz     loc_FB62
.text:000000000000F992                 nop     word ptr [rax+rax+00h]
.text:000000000000F998
.text:000000000000F998 loc_F998:                               ; CODE XREF: build_charclass_isra_29+26B↓j
.text:000000000000F998                 test    byte ptr [rdx+rcx*2+1], 2
.text:000000000000F99D                 jz      short loc_F9B0
.text:000000000000F99F                 mov     rax, rcx
.text:000000000000F9A2                 mov     rsi, rdi
.text:000000000000F9A5                 sar     rax, 6
.text:000000000000F9A9                 shl     rsi, cl
.text:000000000000F9AC                 or      [rbx+rax*8], rsi
.text:000000000000F9B0
.text:000000000000F9B0 loc_F9B0:                               ; CODE XREF: build_charclass_isra_29+24D↑j
.text:000000000000F9B0                 add     rcx, 1
.text:000000000000F9B4                 cmp     rcx, 100h
.text:000000000000F9BB                 jnz     short loc_F998
.text:000000000000F9BD                 jmp     loc_F834
.text:000000000000F9C2 ; ---------------------------------------------------------------------------
.text:000000000000F9C2
.text:000000000000F9C2 loc_F9C2:                               ; CODE XREF: build_charclass_isra_29+1DA↑j
.text:000000000000F9C2                 lea     rdi, aAlpha     ; "alpha"
.text:000000000000F9C9                 mov     ecx, 6
.text:000000000000F9CE                 mov     rsi, r12
.text:000000000000F9D1                 repe cmpsb
.text:000000000000F9D3                 setnbe  al
.text:000000000000F9D6                 sbb     al, 0
.text:000000000000F9D8                 test    al, al
.text:000000000000F9DA                 jz      loc_FA83
.text:000000000000F9E0                 lea     rdi, aDigit     ; "digit"
.text:000000000000F9E7                 mov     ecx, 6
.text:000000000000F9EC                 mov     rsi, r12
.text:000000000000F9EF                 repe cmpsb
.text:000000000000F9F1                 setnbe  al
.text:000000000000F9F4                 sbb     al, 0
.text:000000000000F9F6                 test    al, al
.text:000000000000F9F8                 jnz     loc_FB03
.text:000000000000F9FE                 call    ___ctype_b_loc
.text:000000000000FA03                 xor     ecx, ecx
.text:000000000000FA05                 test    rbp, rbp
.text:000000000000FA08                 mov     rdx, [rax]
.text:000000000000FA0B                 mov     edi, 1
.text:000000000000FA10                 jnz     loc_FEBA
.text:000000000000FA16                 db      2Eh
.text:000000000000FA16                 nop     word ptr [rax+rax+00000000h]
.text:000000000000FA20
.text:000000000000FA20 loc_FA20:                               ; CODE XREF: build_charclass_isra_29+2F3↓j
.text:000000000000FA20                 test    byte ptr [rdx+rcx*2+1], 8
.text:000000000000FA25                 jz      short loc_FA38
.text:000000000000FA27                 mov     rax, rcx
.text:000000000000FA2A                 mov     rsi, rdi
.text:000000000000FA2D                 sar     rax, 6
.text:000000000000FA31                 shl     rsi, cl
.text:000000000000FA34                 or      [rbx+rax*8], rsi
.text:000000000000FA38
.text:000000000000FA38 loc_FA38:                               ; CODE XREF: build_charclass_isra_29+2D5↑j
.text:000000000000FA38                 add     rcx, 1
.text:000000000000FA3C                 cmp     rcx, 100h
.text:000000000000FA43                 jnz     short loc_FA20
.text:000000000000FA45                 jmp     loc_F834
.text:000000000000FA4A ; ---------------------------------------------------------------------------
.text:000000000000FA4A
.text:000000000000FA4A loc_FA4A:                               ; CODE XREF: build_charclass_isra_29+10A↑j
.text:000000000000FA4A                 xor     eax, eax
.text:000000000000FA4C                 nop     dword ptr [rax+00h]
.text:000000000000FA50
.text:000000000000FA50 loc_FA50:                               ; CODE XREF: build_charclass_isra_29+32C↓j
.text:000000000000FA50                 test    byte ptr [rdx+rax*2], 8
.text:000000000000FA54                 jz      short loc_FA72
.text:000000000000FA56                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FA5B                 mov     r10, rdi
.text:000000000000FA5E                 mov     rsi, rcx
.text:000000000000FA61                 and     ecx, 3Fh
.text:000000000000FA64                 shr     rsi, 3
.text:000000000000FA68                 shl     r10, cl
.text:000000000000FA6B                 and     esi, 18h
.text:000000000000FA6E                 or      [rbx+rsi], r10
.text:000000000000FA72
.text:000000000000FA72 loc_FA72:                               ; CODE XREF: build_charclass_isra_29+304↑j
.text:000000000000FA72                 add     rax, 1
.text:000000000000FA76                 cmp     rax, 100h
.text:000000000000FA7C                 jnz     short loc_FA50
.text:000000000000FA7E                 jmp     loc_F834
.text:000000000000FA83 ; ---------------------------------------------------------------------------
.text:000000000000FA83
.text:000000000000FA83 loc_FA83:                               ; CODE XREF: build_charclass_isra_29+28A↑j
.text:000000000000FA83                 call    ___ctype_b_loc
.text:000000000000FA88                 xor     ecx, ecx
.text:000000000000FA8A                 test    rbp, rbp
.text:000000000000FA8D                 mov     rdx, [rax]
.text:000000000000FA90                 mov     edi, 1
.text:000000000000FA95                 jnz     loc_FC68
.text:000000000000FA9B                 nop     dword ptr [rax+rax+00h]
.text:000000000000FAA0
.text:000000000000FAA0 loc_FAA0:                               ; CODE XREF: build_charclass_isra_29+373↓j
.text:000000000000FAA0                 test    byte ptr [rdx+rcx*2+1], 4
.text:000000000000FAA5                 jz      short loc_FAB8
.text:000000000000FAA7                 mov     rax, rcx
.text:000000000000FAAA                 mov     rsi, rdi
.text:000000000000FAAD                 sar     rax, 6
.text:000000000000FAB1                 shl     rsi, cl
.text:000000000000FAB4                 or      [rbx+rax*8], rsi
.text:000000000000FAB8
.text:000000000000FAB8 loc_FAB8:                               ; CODE XREF: build_charclass_isra_29+355↑j
.text:000000000000FAB8                 add     rcx, 1
.text:000000000000FABC                 cmp     rcx, 100h
.text:000000000000FAC3                 jnz     short loc_FAA0
.text:000000000000FAC5                 jmp     loc_F834
.text:000000000000FACA ; ---------------------------------------------------------------------------
.text:000000000000FACA
.text:000000000000FACA loc_FACA:                               ; CODE XREF: build_charclass_isra_29+BA↑j
.text:000000000000FACA                 xor     eax, eax
.text:000000000000FACC                 nop     dword ptr [rax+00h]
.text:000000000000FAD0
.text:000000000000FAD0 loc_FAD0:                               ; CODE XREF: build_charclass_isra_29+3AC↓j
.text:000000000000FAD0                 test    byte ptr [rdx+rax*2], 2
.text:000000000000FAD4                 jz      short loc_FAF2
.text:000000000000FAD6                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FADB                 mov     r11, rdi
.text:000000000000FADE                 mov     rsi, rcx
.text:000000000000FAE1                 and     ecx, 3Fh
.text:000000000000FAE4                 shr     rsi, 3
.text:000000000000FAE8                 shl     r11, cl
.text:000000000000FAEB                 and     esi, 18h
.text:000000000000FAEE                 or      [rbx+rsi], r11
.text:000000000000FAF2
.text:000000000000FAF2 loc_FAF2:                               ; CODE XREF: build_charclass_isra_29+384↑j
.text:000000000000FAF2                 add     rax, 1
.text:000000000000FAF6                 cmp     rax, 100h
.text:000000000000FAFC                 jnz     short loc_FAD0
.text:000000000000FAFE                 jmp     loc_F834
.text:000000000000FB03 ; ---------------------------------------------------------------------------
.text:000000000000FB03
.text:000000000000FB03 loc_FB03:                               ; CODE XREF: build_charclass_isra_29+2A8↑j
.text:000000000000FB03                 lea     rdi, aPrint     ; "print"
.text:000000000000FB0A                 mov     ecx, 6
.text:000000000000FB0F                 mov     rsi, r12
.text:000000000000FB12                 repe cmpsb
.text:000000000000FB14                 setnbe  al
.text:000000000000FB17                 sbb     al, 0
.text:000000000000FB19                 test    al, al
.text:000000000000FB1B                 jnz     short loc_FB9C
.text:000000000000FB1D                 call    ___ctype_b_loc
.text:000000000000FB22                 xor     ecx, ecx
.text:000000000000FB24                 test    rbp, rbp
.text:000000000000FB27                 mov     rdx, [rax]
.text:000000000000FB2A                 mov     edi, 1
.text:000000000000FB2F                 jnz     loc_FF27
.text:000000000000FB35                 nop     dword ptr [rax]
.text:000000000000FB38
.text:000000000000FB38 loc_FB38:                               ; CODE XREF: build_charclass_isra_29+40B↓j
.text:000000000000FB38                 test    byte ptr [rdx+rcx*2+1], 40h
.text:000000000000FB3D                 jz      short loc_FB50
.text:000000000000FB3F                 mov     rax, rcx
.text:000000000000FB42                 mov     rsi, rdi
.text:000000000000FB45                 sar     rax, 6
.text:000000000000FB49                 shl     rsi, cl
.text:000000000000FB4C                 or      [rbx+rax*8], rsi
.text:000000000000FB50
.text:000000000000FB50 loc_FB50:                               ; CODE XREF: build_charclass_isra_29+3ED↑j
.text:000000000000FB50                 add     rcx, 1
.text:000000000000FB54                 cmp     rcx, 100h
.text:000000000000FB5B                 jnz     short loc_FB38
.text:000000000000FB5D                 jmp     loc_F834
.text:000000000000FB62 ; ---------------------------------------------------------------------------
.text:000000000000FB62
.text:000000000000FB62 loc_FB62:                               ; CODE XREF: build_charclass_isra_29+23C↑j
.text:000000000000FB62                 xor     eax, eax
.text:000000000000FB64                 nop     dword ptr [rax+00h]
.text:000000000000FB68
.text:000000000000FB68 loc_FB68:                               ; CODE XREF: build_charclass_isra_29+445↓j
.text:000000000000FB68                 test    byte ptr [rdx+rax*2+1], 2
.text:000000000000FB6D                 jz      short loc_FB8B
.text:000000000000FB6F                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FB74                 mov     r14, rdi
.text:000000000000FB77                 mov     rsi, rcx
.text:000000000000FB7A                 and     ecx, 3Fh
.text:000000000000FB7D                 shr     rsi, 3
.text:000000000000FB81                 shl     r14, cl
.text:000000000000FB84                 and     esi, 18h
.text:000000000000FB87                 or      [rbx+rsi], r14
.text:000000000000FB8B
.text:000000000000FB8B loc_FB8B:                               ; CODE XREF: build_charclass_isra_29+41D↑j
.text:000000000000FB8B                 add     rax, 1
.text:000000000000FB8F                 cmp     rax, 100h
.text:000000000000FB95                 jnz     short loc_FB68
.text:000000000000FB97                 jmp     loc_F834
.text:000000000000FB9C ; ---------------------------------------------------------------------------
.text:000000000000FB9C
.text:000000000000FB9C loc_FB9C:                               ; CODE XREF: build_charclass_isra_29+3CB↑j
.text:000000000000FB9C                 lea     rdi, aUpper     ; "upper"
.text:000000000000FBA3                 mov     ecx, 6
.text:000000000000FBA8                 mov     rsi, r12
.text:000000000000FBAB                 repe cmpsb
.text:000000000000FBAD                 setnbe  al
.text:000000000000FBB0                 sbb     al, 0
.text:000000000000FBB2                 test    al, al
.text:000000000000FBB4                 jnz     short loc_FC02
.text:000000000000FBB6                 call    ___ctype_b_loc
.text:000000000000FBBB                 xor     ecx, ecx
.text:000000000000FBBD                 test    rbp, rbp
.text:000000000000FBC0                 mov     rax, [rax]
.text:000000000000FBC3                 mov     edi, 1
.text:000000000000FBC8                 jnz     loc_FEF0
.text:000000000000FBCE
.text:000000000000FBCE loc_FBCE:                               ; CODE XREF: build_charclass_isra_29+4A1↓j
.text:000000000000FBCE                 test    byte ptr [rax+rcx*2+1], 1
.text:000000000000FBD3                 jz      short loc_FBE6
.text:000000000000FBD5                 mov     rdx, rcx
.text:000000000000FBD8                 mov     rsi, rdi
.text:000000000000FBDB                 sar     rdx, 6
.text:000000000000FBDF                 shl     rsi, cl
.text:000000000000FBE2                 or      [rbx+rdx*8], rsi
.text:000000000000FBE6
.text:000000000000FBE6 loc_FBE6:                               ; CODE XREF: build_charclass_isra_29+483↑j
.text:000000000000FBE6                 add     rcx, 1
.text:000000000000FBEA                 cmp     rcx, 100h
.text:000000000000FBF1                 jnz     short loc_FBCE
.text:000000000000FBF3                 jmp     loc_F834
.text:000000000000FBF8 ; ---------------------------------------------------------------------------
.text:000000000000FBF8
.text:000000000000FBF8 loc_FBF8:                               ; CODE XREF: build_charclass_isra_29+18A↑j
.text:000000000000FBF8                 mov     eax, 0Ch
.text:000000000000FBFD                 jmp     loc_F836
.text:000000000000FC02 ; ---------------------------------------------------------------------------
.text:000000000000FC02
.text:000000000000FC02 loc_FC02:                               ; CODE XREF: build_charclass_isra_29+464↑j
.text:000000000000FC02                 lea     rdi, aBlank     ; "blank"
.text:000000000000FC09                 mov     ecx, 6
.text:000000000000FC0E                 mov     rsi, r12
.text:000000000000FC11                 repe cmpsb
.text:000000000000FC13                 setnbe  al
.text:000000000000FC16                 sbb     al, 0
.text:000000000000FC18                 test    al, al
.text:000000000000FC1A                 jnz     loc_FD0E
.text:000000000000FC20                 call    ___ctype_b_loc
.text:000000000000FC25                 xor     ecx, ecx
.text:000000000000FC27                 test    rbp, rbp
.text:000000000000FC2A                 mov     rdx, [rax]
.text:000000000000FC2D                 mov     esi, 1
.text:000000000000FC32                 jnz     loc_FCD4
.text:000000000000FC38
.text:000000000000FC38 loc_FC38:                               ; CODE XREF: build_charclass_isra_29+50A↓j
.text:000000000000FC38                 test    byte ptr [rdx+rcx*2], 1
.text:000000000000FC3C                 jz      short loc_FC4F
.text:000000000000FC3E                 mov     rax, rcx
.text:000000000000FC41                 mov     rdi, rsi
.text:000000000000FC44                 sar     rax, 6
.text:000000000000FC48                 shl     rdi, cl
.text:000000000000FC4B                 or      [rbx+rax*8], rdi
.text:000000000000FC4F
.text:000000000000FC4F loc_FC4F:                               ; CODE XREF: build_charclass_isra_29+4EC↑j
.text:000000000000FC4F                 add     rcx, 1
.text:000000000000FC53                 cmp     rcx, 100h
.text:000000000000FC5A                 jnz     short loc_FC38
.text:000000000000FC5C                 jmp     loc_F834
.text:000000000000FC5C ; ---------------------------------------------------------------------------
.text:000000000000FC61                 align 8
.text:000000000000FC68
.text:000000000000FC68 loc_FC68:                               ; CODE XREF: build_charclass_isra_29+345↑j
.text:000000000000FC68                 xor     eax, eax
.text:000000000000FC6A
.text:000000000000FC6A loc_FC6A:                               ; CODE XREF: build_charclass_isra_29+547↓j
.text:000000000000FC6A                 test    byte ptr [rdx+rax*2+1], 4
.text:000000000000FC6F                 jz      short loc_FC8D
.text:000000000000FC71                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FC76                 mov     r9, rdi
.text:000000000000FC79                 mov     rsi, rcx
.text:000000000000FC7C                 and     ecx, 3Fh
.text:000000000000FC7F                 shr     rsi, 3
.text:000000000000FC83                 shl     r9, cl
.text:000000000000FC86                 and     esi, 18h
.text:000000000000FC89                 or      [rbx+rsi], r9
.text:000000000000FC8D
.text:000000000000FC8D loc_FC8D:                               ; CODE XREF: build_charclass_isra_29+51F↑j
.text:000000000000FC8D                 add     rax, 1
.text:000000000000FC91                 cmp     rax, 100h
.text:000000000000FC97                 jnz     short loc_FC6A
.text:000000000000FC99                 jmp     loc_F834
.text:000000000000FC9E ; ---------------------------------------------------------------------------
.text:000000000000FC9E
.text:000000000000FC9E loc_FC9E:                               ; CODE XREF: build_charclass_isra_29+1F2↑j
.text:000000000000FC9E                 xor     eax, eax
.text:000000000000FCA0
.text:000000000000FCA0 loc_FCA0:                               ; CODE XREF: build_charclass_isra_29+57D↓j
.text:000000000000FCA0                 test    byte ptr [rdx+rax*2+1], 20h
.text:000000000000FCA5                 jz      short loc_FCC3
.text:000000000000FCA7                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FCAC                 mov     r9, rdi
.text:000000000000FCAF                 mov     rsi, rcx
.text:000000000000FCB2                 and     ecx, 3Fh
.text:000000000000FCB5                 shr     rsi, 3
.text:000000000000FCB9                 shl     r9, cl
.text:000000000000FCBC                 and     esi, 18h
.text:000000000000FCBF                 or      [rbx+rsi], r9
.text:000000000000FCC3
.text:000000000000FCC3 loc_FCC3:                               ; CODE XREF: build_charclass_isra_29+555↑j
.text:000000000000FCC3                 add     rax, 1
.text:000000000000FCC7                 cmp     rax, 100h
.text:000000000000FCCD                 jnz     short loc_FCA0
.text:000000000000FCCF                 jmp     loc_F834
.text:000000000000FCD4 ; ---------------------------------------------------------------------------
.text:000000000000FCD4
.text:000000000000FCD4 loc_FCD4:                               ; CODE XREF: build_charclass_isra_29+4E2↑j
.text:000000000000FCD4                 xor     eax, eax
.text:000000000000FCD6                 mov     edi, 1
.text:000000000000FCDB
.text:000000000000FCDB loc_FCDB:                               ; CODE XREF: build_charclass_isra_29+5B7↓j
.text:000000000000FCDB                 test    byte ptr [rdx+rax*2], 1
.text:000000000000FCDF                 jz      short loc_FCFD
.text:000000000000FCE1                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FCE6                 mov     r14, rdi
.text:000000000000FCE9                 mov     rsi, rcx
.text:000000000000FCEC                 and     ecx, 3Fh
.text:000000000000FCEF                 shr     rsi, 3
.text:000000000000FCF3                 shl     r14, cl
.text:000000000000FCF6                 and     esi, 18h
.text:000000000000FCF9                 or      [rbx+rsi], r14
.text:000000000000FCFD
.text:000000000000FCFD loc_FCFD:                               ; CODE XREF: build_charclass_isra_29+58F↑j
.text:000000000000FCFD                 add     rax, 1
.text:000000000000FD01                 cmp     rax, 100h
.text:000000000000FD07                 jnz     short loc_FCDB
.text:000000000000FD09                 jmp     loc_F834
.text:000000000000FD0E ; ---------------------------------------------------------------------------
.text:000000000000FD0E
.text:000000000000FD0E loc_FD0E:                               ; CODE XREF: build_charclass_isra_29+4CA↑j
.text:000000000000FD0E                 lea     rsi, aGraph     ; "graph"
.text:000000000000FD15                 mov     rdi, r12        ; s1
.text:000000000000FD18                 call    _strcmp
.text:000000000000FD1D                 test    eax, eax
.text:000000000000FD1F                 jnz     short loc_FD9A
.text:000000000000FD21                 call    ___ctype_b_loc
.text:000000000000FD26                 xor     ecx, ecx
.text:000000000000FD28                 test    rbp, rbp
.text:000000000000FD2B                 mov     rsi, [rax]
.text:000000000000FD2E                 mov     edx, 1
.text:000000000000FD33                 jnz     short loc_FD5F
.text:000000000000FD35
.text:000000000000FD35 loc_FD35:                               ; CODE XREF: build_charclass_isra_29+608↓j
.text:000000000000FD35                 cmp     word ptr [rsi+rcx*2], 0
.text:000000000000FD3A                 jns     short loc_FD4D
.text:000000000000FD3C                 mov     rax, rcx
.text:000000000000FD3F                 mov     rdi, rdx
.text:000000000000FD42                 sar     rax, 6
.text:000000000000FD46                 shl     rdi, cl
.text:000000000000FD49                 or      [rbx+rax*8], rdi
.text:000000000000FD4D
.text:000000000000FD4D loc_FD4D:                               ; CODE XREF: build_charclass_isra_29+5EA↑j
.text:000000000000FD4D                 add     rcx, 1
.text:000000000000FD51                 cmp     rcx, 100h
.text:000000000000FD58                 jnz     short loc_FD35
.text:000000000000FD5A                 jmp     loc_F834
.text:000000000000FD5F ; ---------------------------------------------------------------------------
.text:000000000000FD5F
.text:000000000000FD5F loc_FD5F:                               ; CODE XREF: build_charclass_isra_29+5E3↑j
.text:000000000000FD5F                 xor     eax, eax
.text:000000000000FD61                 mov     edi, 1
.text:000000000000FD66
.text:000000000000FD66 loc_FD66:                               ; CODE XREF: build_charclass_isra_29+643↓j
.text:000000000000FD66                 cmp     word ptr [rsi+rax*2], 0
.text:000000000000FD6B                 jns     short loc_FD89
.text:000000000000FD6D                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FD72                 mov     r9, rdi
.text:000000000000FD75                 mov     rdx, rcx
.text:000000000000FD78                 and     ecx, 3Fh
.text:000000000000FD7B                 shr     rdx, 3
.text:000000000000FD7F                 shl     r9, cl
.text:000000000000FD82                 and     edx, 18h
.text:000000000000FD85                 or      [rbx+rdx], r9
.text:000000000000FD89
.text:000000000000FD89 loc_FD89:                               ; CODE XREF: build_charclass_isra_29+61B↑j
.text:000000000000FD89                 add     rax, 1
.text:000000000000FD8D                 cmp     rax, 100h
.text:000000000000FD93                 jnz     short loc_FD66
.text:000000000000FD95                 jmp     loc_F834
.text:000000000000FD9A ; ---------------------------------------------------------------------------
.text:000000000000FD9A
.text:000000000000FD9A loc_FD9A:                               ; CODE XREF: build_charclass_isra_29+5CF↑j
.text:000000000000FD9A                 lea     rsi, aPunct     ; "punct"
.text:000000000000FDA1                 mov     rdi, r12        ; s1
.text:000000000000FDA4                 call    _strcmp
.text:000000000000FDA9                 test    eax, eax
.text:000000000000FDAB                 jnz     short loc_FE24
.text:000000000000FDAD                 call    ___ctype_b_loc
.text:000000000000FDB2                 xor     ecx, ecx
.text:000000000000FDB4                 test    rbp, rbp
.text:000000000000FDB7                 mov     rsi, [rax]
.text:000000000000FDBA                 mov     edx, 1
.text:000000000000FDBF                 jnz     short loc_FDEA
.text:000000000000FDC1
.text:000000000000FDC1 loc_FDC1:                               ; CODE XREF: build_charclass_isra_29+693↓j
.text:000000000000FDC1                 test    byte ptr [rsi+rcx*2], 4
.text:000000000000FDC5                 jz      short loc_FDD8
.text:000000000000FDC7                 mov     rax, rcx
.text:000000000000FDCA                 mov     rdi, rdx
.text:000000000000FDCD                 sar     rax, 6
.text:000000000000FDD1                 shl     rdi, cl
.text:000000000000FDD4                 or      [rbx+rax*8], rdi
.text:000000000000FDD8
.text:000000000000FDD8 loc_FDD8:                               ; CODE XREF: build_charclass_isra_29+675↑j
.text:000000000000FDD8                 add     rcx, 1
.text:000000000000FDDC                 cmp     rcx, 100h
.text:000000000000FDE3                 jnz     short loc_FDC1
.text:000000000000FDE5                 jmp     loc_F834
.text:000000000000FDEA ; ---------------------------------------------------------------------------
.text:000000000000FDEA
.text:000000000000FDEA loc_FDEA:                               ; CODE XREF: build_charclass_isra_29+66F↑j
.text:000000000000FDEA                 xor     eax, eax
.text:000000000000FDEC                 mov     edi, 1
.text:000000000000FDF1
.text:000000000000FDF1 loc_FDF1:                               ; CODE XREF: build_charclass_isra_29+6CD↓j
.text:000000000000FDF1                 test    byte ptr [rsi+rax*2], 4
.text:000000000000FDF5                 jz      short loc_FE13
.text:000000000000FDF7                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FDFC                 mov     r14, rdi
.text:000000000000FDFF                 mov     rdx, rcx
.text:000000000000FE02                 and     ecx, 3Fh
.text:000000000000FE05                 shr     rdx, 3
.text:000000000000FE09                 shl     r14, cl
.text:000000000000FE0C                 and     edx, 18h
.text:000000000000FE0F                 or      [rbx+rdx], r14
.text:000000000000FE13
.text:000000000000FE13 loc_FE13:                               ; CODE XREF: build_charclass_isra_29+6A5↑j
.text:000000000000FE13                 add     rax, 1
.text:000000000000FE17                 cmp     rax, 100h
.text:000000000000FE1D                 jnz     short loc_FDF1
.text:000000000000FE1F                 jmp     loc_F834
.text:000000000000FE24 ; ---------------------------------------------------------------------------
.text:000000000000FE24
.text:000000000000FE24 loc_FE24:                               ; CODE XREF: build_charclass_isra_29+65B↑j
.text:000000000000FE24                 lea     rsi, asc_1C77D  ; "x"
.text:000000000000FE2B                 mov     rdi, r12        ; s1
.text:000000000000FE2E                 call    _strcmp
.text:000000000000FE33                 test    eax, eax
.text:000000000000FE35                 jnz     short loc_FEB0
.text:000000000000FE37                 call    ___ctype_b_loc
.text:000000000000FE3C                 xor     ecx, ecx
.text:000000000000FE3E                 test    rbp, rbp
.text:000000000000FE41                 mov     rsi, [rax]
.text:000000000000FE44                 mov     edx, 1
.text:000000000000FE49                 jnz     short loc_FE75
.text:000000000000FE4B
.text:000000000000FE4B loc_FE4B:                               ; CODE XREF: build_charclass_isra_29+71E↓j
.text:000000000000FE4B                 test    byte ptr [rsi+rcx*2+1], 10h
.text:000000000000FE50                 jz      short loc_FE63
.text:000000000000FE52                 mov     rax, rcx
.text:000000000000FE55                 mov     rdi, rdx
.text:000000000000FE58                 sar     rax, 6
.text:000000000000FE5C                 shl     rdi, cl
.text:000000000000FE5F                 or      [rbx+rax*8], rdi
.text:000000000000FE63
.text:000000000000FE63 loc_FE63:                               ; CODE XREF: build_charclass_isra_29+700↑j
.text:000000000000FE63                 add     rcx, 1
.text:000000000000FE67                 cmp     rcx, 100h
.text:000000000000FE6E                 jnz     short loc_FE4B
.text:000000000000FE70                 jmp     loc_F834
.text:000000000000FE75 ; ---------------------------------------------------------------------------
.text:000000000000FE75
.text:000000000000FE75 loc_FE75:                               ; CODE XREF: build_charclass_isra_29+6F9↑j
.text:000000000000FE75                 xor     eax, eax
.text:000000000000FE77                 mov     edi, 1
.text:000000000000FE7C
.text:000000000000FE7C loc_FE7C:                               ; CODE XREF: build_charclass_isra_29+759↓j
.text:000000000000FE7C                 test    byte ptr [rsi+rax*2+1], 10h
.text:000000000000FE81                 jz      short loc_FE9F
.text:000000000000FE83                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FE88                 mov     r9, rdi
.text:000000000000FE8B                 mov     rdx, rcx
.text:000000000000FE8E                 and     ecx, 3Fh
.text:000000000000FE91                 shr     rdx, 3
.text:000000000000FE95                 shl     r9, cl
.text:000000000000FE98                 and     edx, 18h
.text:000000000000FE9B                 or      [rbx+rdx], r9
.text:000000000000FE9F
.text:000000000000FE9F loc_FE9F:                               ; CODE XREF: build_charclass_isra_29+731↑j
.text:000000000000FE9F                 add     rax, 1
.text:000000000000FEA3                 cmp     rax, 100h
.text:000000000000FEA9                 jnz     short loc_FE7C
.text:000000000000FEAB                 jmp     loc_F834
.text:000000000000FEB0 ; ---------------------------------------------------------------------------
.text:000000000000FEB0
.text:000000000000FEB0 loc_FEB0:                               ; CODE XREF: build_charclass_isra_29+6E5↑j
.text:000000000000FEB0                 mov     eax, 4
.text:000000000000FEB5                 jmp     loc_F836
.text:000000000000FEBA ; ---------------------------------------------------------------------------
.text:000000000000FEBA
.text:000000000000FEBA loc_FEBA:                               ; CODE XREF: build_charclass_isra_29+2C0↑j
.text:000000000000FEBA                 xor     eax, eax
.text:000000000000FEBC
.text:000000000000FEBC loc_FEBC:                               ; CODE XREF: build_charclass_isra_29+799↓j
.text:000000000000FEBC                 test    byte ptr [rdx+rax*2+1], 8
.text:000000000000FEC1                 jz      short loc_FEDF
.text:000000000000FEC3                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FEC8                 mov     r14, rdi
.text:000000000000FECB                 mov     rsi, rcx
.text:000000000000FECE                 and     ecx, 3Fh
.text:000000000000FED1                 shr     rsi, 3
.text:000000000000FED5                 shl     r14, cl
.text:000000000000FED8                 and     esi, 18h
.text:000000000000FEDB                 or      [rbx+rsi], r14
.text:000000000000FEDF
.text:000000000000FEDF loc_FEDF:                               ; CODE XREF: build_charclass_isra_29+771↑j
.text:000000000000FEDF                 add     rax, 1
.text:000000000000FEE3                 cmp     rax, 100h
.text:000000000000FEE9                 jnz     short loc_FEBC
.text:000000000000FEEB                 jmp     loc_F834
.text:000000000000FEF0 ; ---------------------------------------------------------------------------
.text:000000000000FEF0
.text:000000000000FEF0 loc_FEF0:                               ; CODE XREF: build_charclass_isra_29+478↑j
.text:000000000000FEF0                 xor     edx, edx
.text:000000000000FEF2
.text:000000000000FEF2 loc_FEF2:                               ; CODE XREF: build_charclass_isra_29+7D0↓j
.text:000000000000FEF2                 test    byte ptr [rax+rdx*2+1], 1
.text:000000000000FEF7                 jz      short loc_FF15
.text:000000000000FEF9                 movzx   ecx, byte ptr [rbp+rdx+0]
.text:000000000000FEFE                 mov     r9, rdi
.text:000000000000FF01                 mov     rsi, rcx
.text:000000000000FF04                 and     ecx, 3Fh
.text:000000000000FF07                 shr     rsi, 3
.text:000000000000FF0B                 shl     r9, cl
.text:000000000000FF0E                 and     esi, 18h
.text:000000000000FF11                 or      [rbx+rsi], r9
.text:000000000000FF15
.text:000000000000FF15 loc_FF15:                               ; CODE XREF: build_charclass_isra_29+7A7↑j
.text:000000000000FF15                 add     rdx, 1
.text:000000000000FF19                 cmp     rdx, 100h
.text:000000000000FF20                 jnz     short loc_FEF2
.text:000000000000FF22                 jmp     loc_F834
.text:000000000000FF27 ; ---------------------------------------------------------------------------
.text:000000000000FF27
.text:000000000000FF27 loc_FF27:                               ; CODE XREF: build_charclass_isra_29+3DF↑j
.text:000000000000FF27                 xor     eax, eax
.text:000000000000FF29
.text:000000000000FF29 loc_FF29:                               ; CODE XREF: build_charclass_isra_29+806↓j
.text:000000000000FF29                 test    byte ptr [rdx+rax*2+1], 40h
.text:000000000000FF2E                 jz      short loc_FF4C
.text:000000000000FF30                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000FF35                 mov     r14, rdi
.text:000000000000FF38                 mov     rsi, rcx
.text:000000000000FF3B                 and     ecx, 3Fh
.text:000000000000FF3E                 shr     rsi, 3
.text:000000000000FF42                 shl     r14, cl
.text:000000000000FF45                 and     esi, 18h
.text:000000000000FF48                 or      [rbx+rsi], r14
.text:000000000000FF4C
.text:000000000000FF4C loc_FF4C:                               ; CODE XREF: build_charclass_isra_29+7DE↑j
.text:000000000000FF4C                 add     rax, 1
.text:000000000000FF50                 cmp     rax, 100h
.text:000000000000FF56                 jnz     short loc_FF29
.text:000000000000FF58                 jmp     loc_F834
.text:000000000000FF58 ; } // starts at F750
.text:000000000000FF58 build_charclass_isra_29 endp
.text:000000000000FF58
.text:000000000000FF58 ; ---------------------------------------------------------------------------
.text:000000000000FF5D                 align 20h
.text:000000000000FF60
.text:000000000000FF60 ; =============== S U B R O U T I N E =======================================
.text:000000000000FF60
.text:000000000000FF60
.text:000000000000FF60 build_charclass_op proc near            ; CODE XREF: parse_expression+992↓p
.text:000000000000FF60
.text:000000000000FF60 var_88          = qword ptr -88h
.text:000000000000FF60 var_80          = qword ptr -80h
.text:000000000000FF60 var_70          = qword ptr -70h
.text:000000000000FF60 var_68          = qword ptr -68h
.text:000000000000FF60 var_60          = byte ptr -60h
.text:000000000000FF60 var_58          = byte ptr -58h
.text:000000000000FF60 var_50          = byte ptr -50h
.text:000000000000FF60 var_40          = qword ptr -40h
.text:000000000000FF60
.text:000000000000FF60 ; __unwind {
.text:000000000000FF60                 push    r15
.text:000000000000FF62                 push    r14
.text:000000000000FF64                 mov     r14, rdx
.text:000000000000FF67                 push    r13
.text:000000000000FF69                 push    r12
.text:000000000000FF6B                 mov     r13, rcx
.text:000000000000FF6E                 push    rbp
.text:000000000000FF6F                 push    rbx
.text:000000000000FF70                 mov     rbp, rdi
.text:000000000000FF73                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000000FF78                 mov     r12d, r8d
.text:000000000000FF7B                 sub     rsp, 58h
.text:000000000000FF7F                 mov     [rsp+88h+var_88], rsi
.text:000000000000FF83                 mov     esi, 1          ; size
.text:000000000000FF88                 mov     [rsp+88h+var_80], r9
.text:000000000000FF8D                 mov     rax, fs:28h
.text:000000000000FF96                 mov     [rsp+88h+var_40], rax
.text:000000000000FF9B                 xor     eax, eax
.text:000000000000FF9D                 mov     [rsp+88h+var_70], 0
.text:000000000000FFA6                 call    _calloc
.text:000000000000FFAB                 test    rax, rax
.text:000000000000FFAE                 jz      loc_10170
.text:000000000000FFB4                 mov     esi, 1          ; size
.text:000000000000FFB9                 mov     edi, 50h ; 'P'  ; nmemb
.text:000000000000FFBE                 mov     rbx, rax
.text:000000000000FFC1                 call    _calloc
.text:000000000000FFC6                 test    rax, rax
.text:000000000000FFC9                 mov     r15, rax
.text:000000000000FFCC                 jz      loc_10180
.text:000000000000FFD2                 movzx   eax, byte ptr [rax+20h]
.text:000000000000FFD6                 sub     rsp, 8
.text:000000000000FFDA                 mov     edx, r12d
.text:000000000000FFDD                 push    0
.text:000000000000FFDF                 and     edx, 1
.text:000000000000FFE2                 mov     rdi, [rsp+98h+var_88]
.text:000000000000FFE7                 lea     rcx, [r15+48h]
.text:000000000000FFEB                 mov     r9, r14
.text:000000000000FFEE                 mov     rsi, rbx
.text:000000000000FFF1                 lea     r8, [rsp+98h+var_70]
.text:000000000000FFF6                 and     eax, 0FFFFFFFEh
.text:000000000000FFF9                 or      eax, edx
.text:000000000000FFFB                 lea     rdx, [r15+18h]
.text:000000000000FFFF                 mov     [r15+20h], al
.text:0000000000010003                 call    build_charclass_isra_29
.text:0000000000010008                 test    eax, eax
.text:000000000001000A                 pop     rdx
.text:000000000001000B                 pop     rcx
.text:000000000001000C                 jnz     loc_101A0
.text:0000000000010012                 movsx   rcx, byte ptr [r13+0]
.text:0000000000010017                 mov     esi, 1
.text:000000000001001C                 test    cl, cl
.text:000000000001001E                 jz      short loc_1005A
.text:0000000000010020
.text:0000000000010020 loc_10020:                              ; CODE XREF: build_charclass_op+F8↓j
.text:0000000000010020                 lea     rax, [rcx+3Fh]
.text:0000000000010024                 test    rcx, rcx
.text:0000000000010027                 mov     rdx, rcx
.text:000000000001002A                 cmovns  rax, rcx
.text:000000000001002E                 sar     rdx, 3Fh
.text:0000000000010032                 add     r13, 1
.text:0000000000010036                 shr     rdx, 3Ah
.text:000000000001003A                 sar     rax, 6
.text:000000000001003E                 add     rcx, rdx
.text:0000000000010041                 and     ecx, 3Fh
.text:0000000000010044                 sub     rcx, rdx
.text:0000000000010047                 mov     rdx, rsi
.text:000000000001004A                 shl     rdx, cl
.text:000000000001004D                 movsx   rcx, byte ptr [r13+0]
.text:0000000000010052                 or      [rbx+rax*8], rdx
.text:0000000000010056                 test    cl, cl
.text:0000000000010058                 jnz     short loc_10020
.text:000000000001005A
.text:000000000001005A loc_1005A:                              ; CODE XREF: build_charclass_op+BE↑j
.text:000000000001005A                 test    r12b, r12b
.text:000000000001005D                 jz      short loc_10072
.text:000000000001005F                 lea     rdx, [rbx+20h]
.text:0000000000010063                 mov     rax, rbx
.text:0000000000010066
.text:0000000000010066 loc_10066:                              ; CODE XREF: build_charclass_op+110↓j
.text:0000000000010066                 not     qword ptr [rax]
.text:0000000000010069                 add     rax, 8
.text:000000000001006D                 cmp     rdx, rax
.text:0000000000010070                 jnz     short loc_10066
.text:0000000000010072
.text:0000000000010072 loc_10072:                              ; CODE XREF: build_charclass_op+FD↑j
.text:0000000000010072                 cmp     dword ptr [rbp+0B4h], 1
.text:0000000000010079                 jle     short loc_10093
.text:000000000001007B                 mov     rcx, [rbp+78h]
.text:000000000001007F                 xor     eax, eax
.text:0000000000010081
.text:0000000000010081 loc_10081:                              ; CODE XREF: build_charclass_op+131↓j
.text:0000000000010081                 mov     rdx, [rcx+rax]
.text:0000000000010085                 and     [rbx+rax], rdx
.text:0000000000010089                 add     rax, 8
.text:000000000001008D                 cmp     rax, 20h ; ' '
.text:0000000000010091                 jnz     short loc_10081
.text:0000000000010093
.text:0000000000010093 loc_10093:                              ; CODE XREF: build_charclass_op+119↑j
.text:0000000000010093                 lea     r9, [rsp+88h+var_68]
.text:0000000000010098                 lea     r12, [rbp+70h]
.text:000000000001009C                 lea     r13, [rbp+80h]
.text:00000000000100A3                 xor     ecx, ecx
.text:00000000000100A5                 xor     edx, edx
.text:00000000000100A7                 mov     [rsp+88h+var_60], 3
.text:00000000000100AC                 mov     r8, r9
.text:00000000000100AF                 mov     rsi, r13
.text:00000000000100B2                 mov     rdi, r12
.text:00000000000100B5                 mov     [rsp+88h+var_68], rbx
.text:00000000000100BA                 mov     [rsp+88h+var_88], r9
.text:00000000000100BE                 call    create_token_tree_isra_16
.text:00000000000100C3                 test    rax, rax
.text:00000000000100C6                 mov     r14, rax
.text:00000000000100C9                 jz      loc_10160
.text:00000000000100CF                 cmp     dword ptr [rbp+0B4h], 1
.text:00000000000100D6                 jle     short loc_10150
.text:00000000000100D8                 or      byte ptr [rbp+0B0h], 2
.text:00000000000100DF                 mov     r9, [rsp+88h+var_88]
.text:00000000000100E3                 xor     ecx, ecx
.text:00000000000100E5                 xor     edx, edx
.text:00000000000100E7                 mov     rsi, r13
.text:00000000000100EA                 mov     rdi, r12
.text:00000000000100ED                 mov     [rsp+88h+var_60], 6
.text:00000000000100F2                 mov     [rsp+88h+var_68], r15
.text:00000000000100F7                 mov     r8, r9
.text:00000000000100FA                 call    create_token_tree_isra_16
.text:00000000000100FF                 test    rax, rax
.text:0000000000010102                 jz      short loc_10160
.text:0000000000010104                 lea     r8, [rsp+88h+var_58]
.text:0000000000010109                 mov     rdx, r14
.text:000000000001010C                 mov     rcx, rax
.text:000000000001010F                 mov     rsi, r13
.text:0000000000010112                 mov     rdi, r12
.text:0000000000010115                 mov     [rsp+88h+var_50], 0Ah
.text:000000000001011A                 call    create_token_tree_isra_16
.text:000000000001011F                 mov     r14, rax
.text:0000000000010122
.text:0000000000010122 loc_10122:                              ; CODE XREF: build_charclass_op+1F8↓j
.text:0000000000010122                                         ; build_charclass_op+21E↓j ...
.text:0000000000010122                 mov     rdi, [rsp+88h+var_40]
.text:0000000000010127                 xor     rdi, fs:28h
.text:0000000000010130                 mov     rax, r14
.text:0000000000010133                 jnz     loc_101C5
.text:0000000000010139                 add     rsp, 58h
.text:000000000001013D                 pop     rbx
.text:000000000001013E                 pop     rbp
.text:000000000001013F                 pop     r12
.text:0000000000010141                 pop     r13
.text:0000000000010143                 pop     r14
.text:0000000000010145                 pop     r15
.text:0000000000010147                 retn
.text:0000000000010147 ; ---------------------------------------------------------------------------
.text:0000000000010148                 align 10h
.text:0000000000010150
.text:0000000000010150 loc_10150:                              ; CODE XREF: build_charclass_op+176↑j
.text:0000000000010150                 mov     rdi, r15        ; ptr
.text:0000000000010153                 call    isl_union_flow_free_0
.text:0000000000010158                 jmp     short loc_10122
.text:0000000000010158 ; ---------------------------------------------------------------------------
.text:000000000001015A                 align 20h
.text:0000000000010160
.text:0000000000010160 loc_10160:                              ; CODE XREF: build_charclass_op+169↑j
.text:0000000000010160                                         ; build_charclass_op+1A2↑j
.text:0000000000010160                 mov     rdi, rbx        ; ptr
.text:0000000000010163                 call    _free
.text:0000000000010168                 mov     rdi, r15        ; ptr
.text:000000000001016B                 call    isl_union_flow_free_0
.text:0000000000010170
.text:0000000000010170 loc_10170:                              ; CODE XREF: build_charclass_op+4E↑j
.text:0000000000010170                 mov     rax, [rsp+88h+var_80]
.text:0000000000010175                 xor     r14d, r14d
.text:0000000000010178                 mov     dword ptr [rax], 0Ch
.text:000000000001017E                 jmp     short loc_10122
.text:0000000000010180 ; ---------------------------------------------------------------------------
.text:0000000000010180
.text:0000000000010180 loc_10180:                              ; CODE XREF: build_charclass_op+6C↑j
.text:0000000000010180                 mov     rdi, rbx        ; ptr
.text:0000000000010183                 xor     r14d, r14d
.text:0000000000010186                 call    _free
.text:000000000001018B                 mov     rax, [rsp+88h+var_80]
.text:0000000000010190                 mov     dword ptr [rax], 0Ch
.text:0000000000010196                 jmp     short loc_10122
.text:0000000000010196 ; ---------------------------------------------------------------------------
.text:0000000000010198                 align 20h
.text:00000000000101A0
.text:00000000000101A0 loc_101A0:                              ; CODE XREF: build_charclass_op+AC↑j
.text:00000000000101A0                 mov     rdi, rbx        ; ptr
.text:00000000000101A3                 mov     dword ptr [rsp+88h+var_88], eax
.text:00000000000101A6                 xor     r14d, r14d
.text:00000000000101A9                 call    _free
.text:00000000000101AE                 mov     rdi, r15        ; ptr
.text:00000000000101B1                 call    isl_union_flow_free_0
.text:00000000000101B6                 mov     rdi, [rsp+88h+var_80]
.text:00000000000101BB                 mov     eax, dword ptr [rsp+88h+var_88]
.text:00000000000101BE                 mov     [rdi], eax
.text:00000000000101C0                 jmp     loc_10122
.text:00000000000101C5 ; ---------------------------------------------------------------------------
.text:00000000000101C5
.text:00000000000101C5 loc_101C5:                              ; CODE XREF: build_charclass_op+1D3↑j
.text:00000000000101C5                 call    ___stack_chk_fail
.text:00000000000101C5 ; } // starts at FF60
.text:00000000000101C5 build_charclass_op endp
.text:00000000000101C5
.text:00000000000101C5 ; ---------------------------------------------------------------------------
.text:00000000000101CA                 align 10h
.text:00000000000101D0
.text:00000000000101D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000101D0
.text:00000000000101D0
.text:00000000000101D0 re_compile_fastmap_iter_isra_30 proc near
.text:00000000000101D0                                         ; CODE XREF: rpl_re_compile_fastmap+50↓p
.text:00000000000101D0                                         ; rpl_re_compile_fastmap+6F↓p ...
.text:00000000000101D0
.text:00000000000101D0 var_1A8         = qword ptr -1A8h
.text:00000000000101D0 var_1A0         = qword ptr -1A0h
.text:00000000000101D0 var_198         = qword ptr -198h
.text:00000000000101D0 var_190         = qword ptr -190h
.text:00000000000101D0 var_188         = qword ptr -188h
.text:00000000000101D0 var_180         = qword ptr -180h
.text:00000000000101D0 var_178         = qword ptr -178h
.text:00000000000101D0 s               = qword ptr -170h
.text:00000000000101D0 ps              = qword ptr -168h
.text:00000000000101D0 var_160         = qword ptr -160h
.text:00000000000101D0 wc              = dword ptr -154h
.text:00000000000101D0 var_150         = byte ptr -150h
.text:00000000000101D0 var_148         = byte ptr -148h
.text:00000000000101D0 var_40          = qword ptr -40h
.text:00000000000101D0
.text:00000000000101D0 ; __unwind {
.text:00000000000101D0                 push    r15
.text:00000000000101D2                 push    r14
.text:00000000000101D4                 mov     rax, rdi
.text:00000000000101D7                 push    r13
.text:00000000000101D9                 push    r12
.text:00000000000101DB                 push    rbp
.text:00000000000101DC                 push    rbx
.text:00000000000101DD                 xor     ebx, ebx
.text:00000000000101DF                 mov     rbp, rcx
.text:00000000000101E2                 sub     rsp, 178h
.text:00000000000101E9                 mov     rax, [rax]
.text:00000000000101EC                 mov     [rsp+1A8h+var_178], rdi
.text:00000000000101F1                 mov     [rsp+1A8h+var_188], rsi
.text:00000000000101F6                 mov     rdi, fs:28h
.text:00000000000101FF                 mov     [rsp+1A8h+var_40], rdi
.text:0000000000010207                 xor     edi, edi
.text:0000000000010209                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000010210                 mov     [rsp+1A8h+var_180], rdx
.text:0000000000010215                 mov     [rsp+1A8h+var_1A0], rax
.text:000000000001021A                 jnz     short loc_10233
.text:000000000001021C                 mov     rax, [rsp+1A8h+var_178]
.text:0000000000010221                 mov     rax, [rax+18h]
.text:0000000000010225                 mov     rbx, rax
.text:0000000000010228                 mov     [rsp+1A8h+var_1A8], rax
.text:000000000001022C                 shr     rbx, 16h
.text:0000000000010230                 and     ebx, 1
.text:0000000000010233
.text:0000000000010233 loc_10233:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+4A↑j
.text:0000000000010233                 mov     rax, [rsp+1A8h+var_188]
.text:0000000000010238                 cmp     qword ptr [rax], 0
.text:000000000001023C                 jle     loc_1064D
.text:0000000000010242                 lea     rax, [rsp+1A8h+var_150]
.text:0000000000010247                 mov     [rsp+1A8h+var_1A8], 0
.text:000000000001024F                 mov     [rsp+1A8h+ps], rax
.text:0000000000010254                 lea     rax, [rsp+1A8h+wc]
.text:0000000000010259                 mov     [rsp+1A8h+var_160], rax
.text:000000000001025E                 lea     rax, [rsp+1A8h+var_148]
.text:0000000000010263                 mov     [rsp+1A8h+s], rax
.text:0000000000010268                 jmp     short loc_102AE
.text:0000000000010268 ; ---------------------------------------------------------------------------
.text:000000000001026A                 align 10h
.text:0000000000010270
.text:0000000000010270 loc_10270:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+10F↓j
.text:0000000000010270                 cmp     eax, 3
.text:0000000000010273                 jz      loc_10566
.text:0000000000010279                 cmp     eax, 6
.text:000000000001027C                 jz      loc_10408
.text:0000000000010282                 and     edx, 0FFFFFFFDh
.text:0000000000010285                 cmp     dl, 5
.text:0000000000010288                 jz      loc_10684
.text:000000000001028E                 cmp     eax, 2
.text:0000000000010291                 jz      loc_105E4
.text:0000000000010297
.text:0000000000010297 loc_10297:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+139↓j
.text:0000000000010297                                         ; re_compile_fastmap_iter_isra_30+147↓j ...
.text:0000000000010297                 mov     rdi, [rsp+1A8h+var_188]
.text:000000000001029C                 add     [rsp+1A8h+var_1A8], 1
.text:00000000000102A1                 mov     rax, [rsp+1A8h+var_1A8]
.text:00000000000102A5                 cmp     rax, [rdi]
.text:00000000000102A8                 jge     loc_1064D
.text:00000000000102AE
.text:00000000000102AE loc_102AE:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+98↑j
.text:00000000000102AE                 mov     rax, [rsp+1A8h+var_180]
.text:00000000000102B3                 mov     rdi, [rsp+1A8h+var_1A8]
.text:00000000000102B7                 mov     rax, [rax]
.text:00000000000102BA                 mov     r12, [rax+rdi*8]
.text:00000000000102BE                 mov     rax, [rsp+1A8h+var_1A0]
.text:00000000000102C3                 mov     rcx, [rax]
.text:00000000000102C6                 mov     rax, r12
.text:00000000000102C9                 shl     rax, 4
.text:00000000000102CD                 mov     [rsp+1A8h+var_198], rax
.text:00000000000102D2                 lea     rsi, [rcx+rax]
.text:00000000000102D6                 movzx   eax, byte ptr [rsi+8]
.text:00000000000102DA                 cmp     eax, 1
.text:00000000000102DD                 mov     edx, eax
.text:00000000000102DF                 jnz     short loc_10270
.text:00000000000102E1                 movzx   r13d, byte ptr [rsi]
.text:00000000000102E5                 test    ebx, ebx
.text:00000000000102E7                 mov     byte ptr [rbp+r13+0], 1
.text:00000000000102ED                 jz      short loc_10300
.text:00000000000102EF                 call    ___ctype_tolower_loc
.text:00000000000102F4                 mov     rax, [rax]
.text:00000000000102F7                 movsxd  rax, dword ptr [rax+r13*4]
.text:00000000000102FB                 mov     byte ptr [rbp+rax+0], 1
.text:0000000000010300
.text:0000000000010300 loc_10300:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+11D↑j
.text:0000000000010300                 mov     rax, [rsp+1A8h+var_178]
.text:0000000000010305                 test    byte ptr [rax+1Ah], 40h
.text:0000000000010309                 jz      short loc_10297
.text:000000000001030B                 mov     rsi, [rsp+1A8h+var_1A0]
.text:0000000000010310                 cmp     dword ptr [rsi+0B4h], 1
.text:0000000000010317                 jle     loc_10297
.text:000000000001031D                 mov     rax, [rsi]
.text:0000000000010320                 mov     rdi, [rsp+1A8h+var_198]
.text:0000000000010325                 movzx   edx, byte ptr [rax+rdi]
.text:0000000000010329                 mov     [rsp+1A8h+var_148], dl
.text:000000000001032D                 lea     rdx, [r12+1]
.text:0000000000010332                 cmp     [rsi+10h], rdx
.text:0000000000010336                 jbe     loc_10676
.text:000000000001033C                 lea     rcx, [rax+rdi+10h]
.text:0000000000010341                 mov     eax, [rcx+8]
.text:0000000000010344                 and     eax, 2000FFh
.text:0000000000010349                 cmp     eax, 200001h
.text:000000000001034E                 jnz     loc_10676
.text:0000000000010354                 add     rdi, 20h ; ' '
.text:0000000000010358                 mov     r13, rdi
.text:000000000001035B                 mov     rdi, [rsp+1A8h+s]
.text:0000000000010360                 lea     rax, [rdi+1]
.text:0000000000010364                 jmp     short loc_1038B
.text:0000000000010364 ; ---------------------------------------------------------------------------
.text:0000000000010366                 align 10h
.text:0000000000010370
.text:0000000000010370 loc_10370:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+1D2↓j
.text:0000000000010370                 mov     rcx, [rsi]
.text:0000000000010373                 add     rcx, r13
.text:0000000000010376                 add     r13, 10h
.text:000000000001037A                 mov     edx, [rcx+8]
.text:000000000001037D                 and     edx, 2000FFh
.text:0000000000010383                 cmp     edx, 200001h
.text:0000000000010389                 jnz     short loc_103A4
.text:000000000001038B
.text:000000000001038B loc_1038B:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+194↑j
.text:000000000001038B                 movzx   edx, byte ptr [rcx]
.text:000000000001038E                 add     rax, 1
.text:0000000000010392                 mov     [rax-1], dl
.text:0000000000010395                 mov     rdx, rax
.text:0000000000010398                 sub     rdx, rdi
.text:000000000001039B                 add     rdx, r12
.text:000000000001039E                 cmp     [rsi+10h], rdx
.text:00000000000103A2                 ja      short loc_10370
.text:00000000000103A4
.text:00000000000103A4 loc_103A4:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+1B9↑j
.text:00000000000103A4                                         ; re_compile_fastmap_iter_isra_30+4AF↓j
.text:00000000000103A4                 mov     rsi, [rsp+1A8h+s]
.text:00000000000103A9                 mov     rcx, [rsp+1A8h+ps]
.text:00000000000103AE                 mov     rdi, [rsp+1A8h+var_160]
.text:00000000000103B3                 sub     rax, rsi
.text:00000000000103B6                 mov     qword ptr [rcx], 0
.text:00000000000103BD                 mov     r12, rax
.text:00000000000103C0                 mov     rdx, rax
.text:00000000000103C3                 call    rpl_mbrtowc
.text:00000000000103C8                 cmp     r12, rax
.text:00000000000103CB                 jnz     loc_10297
.text:00000000000103D1                 mov     edi, [rsp+1A8h+wc] ; wc
.text:00000000000103D5                 call    _towlower
.text:00000000000103DA                 mov     rdx, [rsp+1A8h+ps] ; ps
.text:00000000000103DF                 mov     rdi, [rsp+1A8h+s] ; s
.text:00000000000103E4                 mov     esi, eax        ; wc
.text:00000000000103E6                 call    _wcrtomb
.text:00000000000103EB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000103EF                 jz      loc_10297
.text:00000000000103F5                 movzx   eax, [rsp+1A8h+var_148]
.text:00000000000103FA                 mov     byte ptr [rbp+rax+0], 1
.text:00000000000103FF                 jmp     loc_10297
.text:00000000000103FF ; ---------------------------------------------------------------------------
.text:0000000000010404                 align 8
.text:0000000000010408
.text:0000000000010408 loc_10408:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+AC↑j
.text:0000000000010408                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000001040D                 mov     r12, [rsi]
.text:0000000000010410                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000010417                 jle     short loc_1043D
.text:0000000000010419                 cmp     qword ptr [r12+48h], 0
.text:000000000001041F                 jnz     loc_1051F
.text:0000000000010425                 test    byte ptr [r12+20h], 1
.text:000000000001042B                 jnz     loc_1051F
.text:0000000000010431                 cmp     qword ptr [r12+40h], 0
.text:0000000000010437                 jnz     loc_1051F
.text:000000000001043D
.text:000000000001043D loc_1043D:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+247↑j
.text:000000000001043D                 xor     r13d, r13d
.text:0000000000010440                 cmp     qword ptr [r12+28h], 0
.text:0000000000010446                 jle     loc_10297
.text:000000000001044C                 mov     r15, r12
.text:000000000001044F                 mov     r14, [rsp+1A8h+ps]
.text:0000000000010454                 mov     r12, rbp
.text:0000000000010457                 mov     rbp, r13
.text:000000000001045A                 mov     r13d, ebx
.text:000000000001045D                 jmp     short loc_1046D
.text:000000000001045F ; ---------------------------------------------------------------------------
.text:000000000001045F
.text:000000000001045F loc_1045F:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+2F8↓j
.text:000000000001045F                                         ; re_compile_fastmap_iter_isra_30+306↓j ...
.text:000000000001045F                 add     rbp, 1
.text:0000000000010463                 cmp     rbp, [r15+28h]
.text:0000000000010467                 jge     loc_10514
.text:000000000001046D
.text:000000000001046D loc_1046D:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+28D↑j
.text:000000000001046D                                         ; re_compile_fastmap_iter_isra_30+33E↓j
.text:000000000001046D                 mov     qword ptr [r14], 0
.text:0000000000010474                 mov     rax, [r15]
.text:0000000000010477                 mov     rdx, r14        ; ps
.text:000000000001047A                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000001047F                 lea     rbx, ds:0[rbp*4]
.text:0000000000010487                 mov     esi, [rax+rbp*4] ; wc
.text:000000000001048A                 call    _wcrtomb
.text:000000000001048F                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000010493                 jz      short loc_104BF
.text:0000000000010495                 movzx   edx, [rsp+1A8h+var_148]
.text:000000000001049A                 test    r13d, r13d
.text:000000000001049D                 mov     byte ptr [r12+rdx], 1
.text:00000000000104A2                 mov     [rsp+1A8h+var_198], rdx
.text:00000000000104A7                 jz      short loc_104BF
.text:00000000000104A9                 call    ___ctype_tolower_loc
.text:00000000000104AE                 mov     rdx, [rsp+1A8h+var_198]
.text:00000000000104B3                 mov     rax, [rax]
.text:00000000000104B6                 movsxd  rax, dword ptr [rax+rdx*4]
.text:00000000000104BA                 mov     byte ptr [r12+rax], 1
.text:00000000000104BF
.text:00000000000104BF loc_104BF:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+2C3↑j
.text:00000000000104BF                                         ; re_compile_fastmap_iter_isra_30+2D7↑j
.text:00000000000104BF                 mov     rax, [rsp+1A8h+var_178]
.text:00000000000104C4                 test    byte ptr [rax+1Ah], 40h
.text:00000000000104C8                 jz      short loc_1045F
.text:00000000000104CA                 mov     rax, [rsp+1A8h+var_1A0]
.text:00000000000104CF                 cmp     dword ptr [rax+0B4h], 1
.text:00000000000104D6                 jle     short loc_1045F
.text:00000000000104D8                 mov     rax, [r15]
.text:00000000000104DB                 mov     edi, [rax+rbx]  ; wc
.text:00000000000104DE                 call    _towlower
.text:00000000000104E3                 mov     rdi, [rsp+1A8h+s] ; s
.text:00000000000104E8                 mov     rdx, r14        ; ps
.text:00000000000104EB                 mov     esi, eax        ; wc
.text:00000000000104ED                 call    _wcrtomb
.text:00000000000104F2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000104F6                 jz      loc_1045F
.text:00000000000104FC                 movzx   eax, [rsp+1A8h+var_148]
.text:0000000000010501                 add     rbp, 1
.text:0000000000010505                 mov     byte ptr [r12+rax], 1
.text:000000000001050A                 cmp     rbp, [r15+28h]
.text:000000000001050E                 jl      loc_1046D
.text:0000000000010514
.text:0000000000010514 loc_10514:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+297↑j
.text:0000000000010514                 mov     ebx, r13d
.text:0000000000010517                 mov     rbp, r12
.text:000000000001051A                 jmp     loc_10297
.text:000000000001051F ; ---------------------------------------------------------------------------
.text:000000000001051F
.text:000000000001051F loc_1051F:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+24F↑j
.text:000000000001051F                                         ; re_compile_fastmap_iter_isra_30+25B↑j ...
.text:000000000001051F                 mov     r12, [rsp+1A8h+ps]
.text:0000000000010524                 mov     r13, [rsp+1A8h+var_160]
.text:0000000000010529                 mov     byte ptr [rsp+1A8h+wc], 0
.text:000000000001052E                 xchg    ax, ax
.text:0000000000010530
.text:0000000000010530 loc_10530:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+38F↓j
.text:0000000000010530                 xor     edi, edi
.text:0000000000010532                 mov     qword ptr [r12], 0
.text:000000000001053A                 mov     rcx, r12
.text:000000000001053D                 mov     edx, 1
.text:0000000000010542                 mov     rsi, r13
.text:0000000000010545                 call    rpl_mbrtowc
.text:000000000001054A                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001054E                 jnz     short loc_1055A
.text:0000000000010550                 movzx   eax, byte ptr [rsp+1A8h+wc]
.text:0000000000010555                 mov     byte ptr [rbp+rax+0], 1
.text:000000000001055A
.text:000000000001055A loc_1055A:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+37E↑j
.text:000000000001055A                 add     byte ptr [rsp+1A8h+wc], 1
.text:000000000001055F                 jnz     short loc_10530
.text:0000000000010561                 jmp     loc_10297
.text:0000000000010566 ; ---------------------------------------------------------------------------
.text:0000000000010566
.text:0000000000010566 loc_10566:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+A3↑j
.text:0000000000010566                 mov     r13, rbp
.text:0000000000010569                 xor     r12d, r12d
.text:000000000001056C                 mov     [rsp+1A8h+var_190], 0
.text:0000000000010575
.text:0000000000010575 loc_10575:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+412↓j
.text:0000000000010575                 mov     rax, [rsp+1A8h+var_198]
.text:000000000001057A                 mov     rsi, [rsp+1A8h+var_190]
.text:000000000001057F                 xor     r14d, r14d
.text:0000000000010582                 mov     rax, [rcx+rax]
.text:0000000000010586                 mov     r15, [rax+rsi]
.text:000000000001058A                 nop     word ptr [rax+rax+00h]
.text:0000000000010590
.text:0000000000010590 loc_10590:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+3ED↓j
.text:0000000000010590                 bt      r15, r14
.text:0000000000010594                 jnb     short loc_105B5
.text:0000000000010596                 test    ebx, ebx
.text:0000000000010598                 mov     byte ptr [r13+r14+0], 1
.text:000000000001059E                 jz      short loc_105B5
.text:00000000000105A0                 call    ___ctype_tolower_loc
.text:00000000000105A5                 mov     rax, [rax]
.text:00000000000105A8                 lea     rdx, [r12+r14]
.text:00000000000105AC                 movsxd  rax, dword ptr [rax+rdx*4]
.text:00000000000105B0                 mov     byte ptr [rbp+rax+0], 1
.text:00000000000105B5
.text:00000000000105B5 loc_105B5:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+3C4↑j
.text:00000000000105B5                                         ; re_compile_fastmap_iter_isra_30+3CE↑j
.text:00000000000105B5                 add     r14, 1
.text:00000000000105B9                 cmp     r14, 40h ; '@'
.text:00000000000105BD                 jnz     short loc_10590
.text:00000000000105BF                 add     r12, 40h ; '@'
.text:00000000000105C3                 add     [rsp+1A8h+var_190], 8
.text:00000000000105C9                 add     r13, 40h ; '@'
.text:00000000000105CD                 cmp     r12, 100h
.text:00000000000105D4                 jz      loc_10297
.text:00000000000105DA                 mov     rax, [rsp+1A8h+var_1A0]
.text:00000000000105DF                 mov     rcx, [rax]
.text:00000000000105E2                 jmp     short loc_10575
.text:00000000000105E4 ; ---------------------------------------------------------------------------
.text:00000000000105E4
.text:00000000000105E4 loc_105E4:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+C1↑j
.text:00000000000105E4                 movdqa  xmm0, cs:xmmword_1CF40
.text:00000000000105EC                 movups  xmmword ptr [rbp+0], xmm0
.text:00000000000105F0                 movups  xmmword ptr [rbp+10h], xmm0
.text:00000000000105F4                 movups  xmmword ptr [rbp+20h], xmm0
.text:00000000000105F8                 movups  xmmword ptr [rbp+30h], xmm0
.text:00000000000105FC                 movups  xmmword ptr [rbp+40h], xmm0
.text:0000000000010600                 movups  xmmword ptr [rbp+50h], xmm0
.text:0000000000010604                 movups  xmmword ptr [rbp+60h], xmm0
.text:0000000000010608                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000001060C                 movups  xmmword ptr [rbp+80h], xmm0
.text:0000000000010613                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000001061A                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:0000000000010621                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:0000000000010628                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000001062F                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:0000000000010636                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000001063D                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:0000000000010644
.text:0000000000010644 loc_10644:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+51D↓j
.text:0000000000010644                 mov     rax, [rsp+1A8h+var_178]
.text:0000000000010649                 or      byte ptr [rax+38h], 1
.text:000000000001064D
.text:000000000001064D loc_1064D:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+6C↑j
.text:000000000001064D                                         ; re_compile_fastmap_iter_isra_30+D8↑j ...
.text:000000000001064D                 mov     rax, [rsp+1A8h+var_40]
.text:0000000000010655                 xor     rax, fs:28h
.text:000000000001065E                 jnz     loc_106F2
.text:0000000000010664                 add     rsp, 178h
.text:000000000001066B                 pop     rbx
.text:000000000001066C                 pop     rbp
.text:000000000001066D                 pop     r12
.text:000000000001066F                 pop     r13
.text:0000000000010671                 pop     r14
.text:0000000000010673                 pop     r15
.text:0000000000010675                 retn
.text:0000000000010676 ; ---------------------------------------------------------------------------
.text:0000000000010676
.text:0000000000010676 loc_10676:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+166↑j
.text:0000000000010676                                         ; re_compile_fastmap_iter_isra_30+17E↑j
.text:0000000000010676                 mov     rax, [rsp+1A8h+s]
.text:000000000001067B                 add     rax, 1
.text:000000000001067F                 jmp     loc_103A4
.text:0000000000010684 ; ---------------------------------------------------------------------------
.text:0000000000010684
.text:0000000000010684 loc_10684:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+B8↑j
.text:0000000000010684                 movdqa  xmm0, cs:xmmword_1CF40
.text:000000000001068C                 cmp     eax, 2
.text:000000000001068F                 movups  xmmword ptr [rbp+0], xmm0
.text:0000000000010693                 movups  xmmword ptr [rbp+10h], xmm0
.text:0000000000010697                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000001069B                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000001069F                 movups  xmmword ptr [rbp+40h], xmm0
.text:00000000000106A3                 movups  xmmword ptr [rbp+50h], xmm0
.text:00000000000106A7                 movups  xmmword ptr [rbp+60h], xmm0
.text:00000000000106AB                 movups  xmmword ptr [rbp+70h], xmm0
.text:00000000000106AF                 movups  xmmword ptr [rbp+80h], xmm0
.text:00000000000106B6                 movups  xmmword ptr [rbp+90h], xmm0
.text:00000000000106BD                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:00000000000106C4                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:00000000000106CB                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:00000000000106D2                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:00000000000106D9                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:00000000000106E0                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:00000000000106E7                 jnz     loc_1064D
.text:00000000000106ED                 jmp     loc_10644
.text:00000000000106F2 ; ---------------------------------------------------------------------------
.text:00000000000106F2
.text:00000000000106F2 loc_106F2:                              ; CODE XREF: re_compile_fastmap_iter_isra_30+48E↑j
.text:00000000000106F2                 call    ___stack_chk_fail
.text:00000000000106F2 ; } // starts at 101D0
.text:00000000000106F2 re_compile_fastmap_iter_isra_30 endp
.text:00000000000106F2
.text:00000000000106F2 ; ---------------------------------------------------------------------------
.text:00000000000106F7                 align 20h
.text:0000000000010700
.text:0000000000010700 ; =============== S U B R O U T I N E =======================================
.text:0000000000010700
.text:0000000000010700
.text:0000000000010700 check_node_accept_bytes_isra_31 proc near
.text:0000000000010700                                         ; CODE XREF: check_arrival+255↓p
.text:0000000000010700                                         ; set_regs+378↓p ...
.text:0000000000010700 ; __unwind {
.text:0000000000010700                 shl     rdx, 4
.text:0000000000010704                 push    r13
.text:0000000000010706                 push    r12
.text:0000000000010708                 lea     r9, [rdi+rdx]
.text:000000000001070C                 push    rbp
.text:000000000001070D                 push    rbx
.text:000000000001070E                 sub     rsp, 8
.text:0000000000010712                 movzx   r11d, byte ptr [r9+8]
.text:0000000000010717                 cmp     r11b, 7
.text:000000000001071B                 jz      loc_10830
.text:0000000000010721                 cmp     dword ptr [rcx+90h], 1
.text:0000000000010728                 jz      loc_107F0
.text:000000000001072E                 mov     rbx, rsi
.text:0000000000010731                 mov     rdi, rcx
.text:0000000000010734                 mov     rsi, r8
.text:0000000000010737                 mov     r10, rcx
.text:000000000001073A                 call    re_string_char_size_at_part_0
.text:000000000001073F                 cmp     r11b, 5
.text:0000000000010743                 mov     ebp, eax
.text:0000000000010745                 jz      loc_10800
.text:000000000001074B                 cmp     r11b, 6
.text:000000000001074F                 jnz     loc_107F0
.text:0000000000010755                 cmp     eax, 1
.text:0000000000010758                 jle     loc_107F0
.text:000000000001075E                 mov     r13, [r9]
.text:0000000000010761                 mov     rsi, [r13+40h]
.text:0000000000010765                 mov     rdx, [r13+28h]
.text:0000000000010769                 test    rsi, rsi
.text:000000000001076C                 jnz     short loc_10779
.text:000000000001076E                 cmp     qword ptr [r13+48h], 0
.text:0000000000010773                 jz      loc_10868
.text:0000000000010779
.text:0000000000010779 loc_10779:                              ; CODE XREF: check_node_accept_bytes_isra_31+6C↑j
.text:0000000000010779                                         ; check_node_accept_bytes_isra_31+16B↓j
.text:0000000000010779                 mov     rax, [r10+10h]
.text:000000000001077D                 test    rdx, rdx
.text:0000000000010780                 mov     r12d, [rax+r8*4]
.text:0000000000010784                 jle     short loc_107A7
.text:0000000000010786                 mov     rcx, [r13+0]
.text:000000000001078A                 cmp     r12d, [rcx]
.text:000000000001078D                 jz      short loc_107E2
.text:000000000001078F                 xor     eax, eax
.text:0000000000010791                 jmp     short loc_1079E
.text:0000000000010791 ; ---------------------------------------------------------------------------
.text:0000000000010793                 align 8
.text:0000000000010798
.text:0000000000010798 loc_10798:                              ; CODE XREF: check_node_accept_bytes_isra_31+A5↓j
.text:0000000000010798                 cmp     r12d, [rcx+rax*4]
.text:000000000001079C                 jz      short loc_107E2
.text:000000000001079E
.text:000000000001079E loc_1079E:                              ; CODE XREF: check_node_accept_bytes_isra_31+91↑j
.text:000000000001079E                 add     rax, 1
.text:00000000000107A2                 cmp     rax, rdx
.text:00000000000107A5                 jnz     short loc_10798
.text:00000000000107A7
.text:00000000000107A7 loc_107A7:                              ; CODE XREF: check_node_accept_bytes_isra_31+84↑j
.text:00000000000107A7                 mov     rax, [r13+48h]
.text:00000000000107AB                 test    rax, rax
.text:00000000000107AE                 jle     loc_1088C
.text:00000000000107B4                 xor     ebx, ebx
.text:00000000000107B6                 jmp     short loc_107CE
.text:00000000000107B6 ; ---------------------------------------------------------------------------
.text:00000000000107B8                 align 20h
.text:00000000000107C0
.text:00000000000107C0 loc_107C0:                              ; CODE XREF: check_node_accept_bytes_isra_31+E0↓j
.text:00000000000107C0                 add     rbx, 1
.text:00000000000107C4                 cmp     rbx, [r13+48h]
.text:00000000000107C8                 jge     loc_10888
.text:00000000000107CE
.text:00000000000107CE loc_107CE:                              ; CODE XREF: check_node_accept_bytes_isra_31+B6↑j
.text:00000000000107CE                 mov     rax, [r13+18h]
.text:00000000000107D2                 mov     edi, r12d       ; wc
.text:00000000000107D5                 mov     rsi, [rax+rbx*8] ; desc
.text:00000000000107D9                 call    _iswctype
.text:00000000000107DE                 test    eax, eax
.text:00000000000107E0                 jz      short loc_107C0
.text:00000000000107E2
.text:00000000000107E2 loc_107E2:                              ; CODE XREF: check_node_accept_bytes_isra_31+8D↑j
.text:00000000000107E2                                         ; check_node_accept_bytes_isra_31+9C↑j ...
.text:00000000000107E2                 test    byte ptr [r13+20h], 1
.text:00000000000107E7                 jz      short loc_107F2
.text:00000000000107E9                 nop     dword ptr [rax+00000000h]
.text:00000000000107F0
.text:00000000000107F0 loc_107F0:                              ; CODE XREF: check_node_accept_bytes_isra_31+28↑j
.text:00000000000107F0                                         ; check_node_accept_bytes_isra_31+4F↑j ...
.text:00000000000107F0                 xor     ebp, ebp
.text:00000000000107F2
.text:00000000000107F2 loc_107F2:                              ; CODE XREF: check_node_accept_bytes_isra_31+E7↑j
.text:00000000000107F2                                         ; check_node_accept_bytes_isra_31+10E↓j ...
.text:00000000000107F2                 add     rsp, 8
.text:00000000000107F6                 mov     eax, ebp
.text:00000000000107F8                 pop     rbx
.text:00000000000107F9                 pop     rbp
.text:00000000000107FA                 pop     r12
.text:00000000000107FC                 pop     r13
.text:00000000000107FE                 retn
.text:00000000000107FE ; ---------------------------------------------------------------------------
.text:00000000000107FF                 align 20h
.text:0000000000010800
.text:0000000000010800 loc_10800:                              ; CODE XREF: check_node_accept_bytes_isra_31+45↑j
.text:0000000000010800                 cmp     eax, 1
.text:0000000000010803                 jle     short loc_107F0
.text:0000000000010805                 mov     rax, [rbx]
.text:0000000000010808                 test    al, 40h
.text:000000000001080A                 jz      short loc_10820
.text:000000000001080C
.text:000000000001080C loc_1080C:                              ; CODE XREF: check_node_accept_bytes_isra_31+129↓j
.text:000000000001080C                 test    al, 80h
.text:000000000001080E                 jz      short loc_107F2
.text:0000000000010810                 mov     rax, [r10+8]
.text:0000000000010814                 cmp     byte ptr [rax+r8], 0
.text:0000000000010819                 jz      short loc_107F0
.text:000000000001081B                 jmp     short loc_107F2
.text:000000000001081B ; ---------------------------------------------------------------------------
.text:000000000001081D                 align 20h
.text:0000000000010820
.text:0000000000010820 loc_10820:                              ; CODE XREF: check_node_accept_bytes_isra_31+10A↑j
.text:0000000000010820                 mov     rdx, [r10+8]
.text:0000000000010824                 cmp     byte ptr [rdx+r8], 0Ah
.text:0000000000010829                 jnz     short loc_1080C
.text:000000000001082B                 jmp     short loc_107F0
.text:000000000001082B ; ---------------------------------------------------------------------------
.text:000000000001082D                 align 10h
.text:0000000000010830
.text:0000000000010830 loc_10830:                              ; CODE XREF: check_node_accept_bytes_isra_31+1B↑j
.text:0000000000010830                 mov     rdx, [rcx+8]
.text:0000000000010834                 lea     rsi, [rdx+r8]
.text:0000000000010838                 movzx   eax, byte ptr [rsi]
.text:000000000001083B                 cmp     al, 0C1h
.text:000000000001083D                 jbe     short loc_107F0
.text:000000000001083F                 mov     rcx, [rcx+58h]
.text:0000000000010843                 lea     rdi, [r8+1]
.text:0000000000010847                 cmp     rdi, rcx
.text:000000000001084A                 jge     short loc_107F0
.text:000000000001084C                 cmp     al, 0DFh
.text:000000000001084E                 movzx   edx, byte ptr [rdx+r8+1]
.text:0000000000010854                 ja      short loc_108BE
.text:0000000000010856                 add     edx, 0FFFFFF80h
.text:0000000000010859                 mov     ebp, 2
.text:000000000001085E                 cmp     dl, 3Fh ; '?'
.text:0000000000010861                 ja      short loc_107F0
.text:0000000000010863                 jmp     short loc_107F2
.text:0000000000010863 ; ---------------------------------------------------------------------------
.text:0000000000010865                 align 8
.text:0000000000010868
.text:0000000000010868 loc_10868:                              ; CODE XREF: check_node_accept_bytes_isra_31+73↑j
.text:0000000000010868                 test    rdx, rdx
.text:000000000001086B                 jnz     loc_10779
.text:0000000000010871
.text:0000000000010871 loc_10871:                              ; CODE XREF: check_node_accept_bytes_isra_31+18F↓j
.text:0000000000010871                                         ; check_node_accept_bytes_isra_31+1A7↓j
.text:0000000000010871                 test    byte ptr [r13+20h], 1
.text:0000000000010876                 jnz     loc_107F2
.text:000000000001087C                 jmp     loc_107F0
.text:000000000001087C ; ---------------------------------------------------------------------------
.text:0000000000010881                 align 8
.text:0000000000010888
.text:0000000000010888 loc_10888:                              ; CODE XREF: check_node_accept_bytes_isra_31+C8↑j
.text:0000000000010888                 mov     rsi, [r13+40h]
.text:000000000001088C
.text:000000000001088C loc_1088C:                              ; CODE XREF: check_node_accept_bytes_isra_31+AE↑j
.text:000000000001088C                 test    rsi, rsi
.text:000000000001088F                 jle     short loc_10871
.text:0000000000010891                 mov     rdx, [r13+8]
.text:0000000000010895                 xor     eax, eax
.text:0000000000010897                 jmp     short loc_108A9
.text:0000000000010897 ; ---------------------------------------------------------------------------
.text:0000000000010899                 align 20h
.text:00000000000108A0
.text:00000000000108A0 loc_108A0:                              ; CODE XREF: check_node_accept_bytes_isra_31+1AD↓j
.text:00000000000108A0                                         ; check_node_accept_bytes_isra_31+1B7↓j
.text:00000000000108A0                 add     rax, 1
.text:00000000000108A4                 cmp     rax, rsi
.text:00000000000108A7                 jz      short loc_10871
.text:00000000000108A9
.text:00000000000108A9 loc_108A9:                              ; CODE XREF: check_node_accept_bytes_isra_31+197↑j
.text:00000000000108A9                 cmp     r12d, [rdx+rax*4]
.text:00000000000108AD                 jl      short loc_108A0
.text:00000000000108AF                 mov     rcx, [r13+10h]
.text:00000000000108B3                 cmp     r12d, [rcx+rax*4]
.text:00000000000108B7                 jg      short loc_108A0
.text:00000000000108B9                 jmp     loc_107E2
.text:00000000000108BE ; ---------------------------------------------------------------------------
.text:00000000000108BE
.text:00000000000108BE loc_108BE:                              ; CODE XREF: check_node_accept_bytes_isra_31+154↑j
.text:00000000000108BE                 cmp     al, 0EFh
.text:00000000000108C0                 ja      short loc_10908
.text:00000000000108C2                 cmp     al, 0E0h
.text:00000000000108C4                 jnz     short loc_108CF
.text:00000000000108C6                 cmp     dl, 9Fh
.text:00000000000108C9                 jbe     loc_107F0
.text:00000000000108CF
.text:00000000000108CF loc_108CF:                              ; CODE XREF: check_node_accept_bytes_isra_31+1C4↑j
.text:00000000000108CF                 mov     ebp, 3
.text:00000000000108D4
.text:00000000000108D4 loc_108D4:                              ; CODE XREF: check_node_accept_bytes_isra_31+21E↓j
.text:00000000000108D4                                         ; check_node_accept_bytes_isra_31+236↓j ...
.text:00000000000108D4                 movsxd  rdi, ebp
.text:00000000000108D7                 add     r8, rdi
.text:00000000000108DA                 cmp     rcx, r8
.text:00000000000108DD                 jl      loc_107F0
.text:00000000000108E3                 mov     eax, 1
.text:00000000000108E8                 jmp     short loc_108F7
.text:00000000000108EA ; ---------------------------------------------------------------------------
.text:00000000000108EA
.text:00000000000108EA loc_108EA:                              ; CODE XREF: check_node_accept_bytes_isra_31+201↓j
.text:00000000000108EA                 add     rax, 1
.text:00000000000108EE                 cmp     rdi, rax
.text:00000000000108F1                 jle     loc_107F2
.text:00000000000108F7
.text:00000000000108F7 loc_108F7:                              ; CODE XREF: check_node_accept_bytes_isra_31+1E8↑j
.text:00000000000108F7                 movzx   ebx, byte ptr [rsi+rax]
.text:00000000000108FB                 lea     edx, [rbx-80h]
.text:00000000000108FE                 cmp     dl, 3Fh ; '?'
.text:0000000000010901                 jbe     short loc_108EA
.text:0000000000010903                 jmp     loc_107F0
.text:0000000000010908 ; ---------------------------------------------------------------------------
.text:0000000000010908
.text:0000000000010908 loc_10908:                              ; CODE XREF: check_node_accept_bytes_isra_31+1C0↑j
.text:0000000000010908                 cmp     al, 0F7h
.text:000000000001090A                 ja      short loc_10920
.text:000000000001090C                 cmp     al, 0F0h
.text:000000000001090E                 jnz     short loc_10919
.text:0000000000010910                 cmp     dl, 8Fh
.text:0000000000010913                 jbe     loc_107F0
.text:0000000000010919
.text:0000000000010919 loc_10919:                              ; CODE XREF: check_node_accept_bytes_isra_31+20E↑j
.text:0000000000010919                 mov     ebp, 4
.text:000000000001091E                 jmp     short loc_108D4
.text:0000000000010920 ; ---------------------------------------------------------------------------
.text:0000000000010920
.text:0000000000010920 loc_10920:                              ; CODE XREF: check_node_accept_bytes_isra_31+20A↑j
.text:0000000000010920                 cmp     al, 0FBh
.text:0000000000010922                 ja      short loc_10938
.text:0000000000010924                 cmp     al, 0F8h
.text:0000000000010926                 jnz     short loc_10931
.text:0000000000010928                 cmp     dl, 87h
.text:000000000001092B                 jbe     loc_107F0
.text:0000000000010931
.text:0000000000010931 loc_10931:                              ; CODE XREF: check_node_accept_bytes_isra_31+226↑j
.text:0000000000010931                 mov     ebp, 5
.text:0000000000010936                 jmp     short loc_108D4
.text:0000000000010938 ; ---------------------------------------------------------------------------
.text:0000000000010938
.text:0000000000010938 loc_10938:                              ; CODE XREF: check_node_accept_bytes_isra_31+222↑j
.text:0000000000010938                 cmp     al, 0FDh
.text:000000000001093A                 ja      loc_107F0
.text:0000000000010940                 cmp     al, 0FCh
.text:0000000000010942                 jnz     short loc_1094D
.text:0000000000010944                 cmp     dl, 83h
.text:0000000000010947                 jbe     loc_107F0
.text:000000000001094D
.text:000000000001094D loc_1094D:                              ; CODE XREF: check_node_accept_bytes_isra_31+242↑j
.text:000000000001094D                 mov     ebp, 6
.text:0000000000010952                 jmp     short loc_108D4
.text:0000000000010952 ; } // starts at 10700
.text:0000000000010952 check_node_accept_bytes_isra_31 endp
.text:0000000000010952
.text:0000000000010952 ; ---------------------------------------------------------------------------
.text:0000000000010954                 align 20h
.text:0000000000010960
.text:0000000000010960 ; =============== S U B R O U T I N E =======================================
.text:0000000000010960
.text:0000000000010960
.text:0000000000010960 check_arrival   proc near               ; CODE XREF: get_subexp_sub_isra_32+30↓p
.text:0000000000010960                                         ; transit_state_bkref_isra_34+68B↓p
.text:0000000000010960
.text:0000000000010960 var_108         = qword ptr -108h
.text:0000000000010960 var_100         = qword ptr -100h
.text:0000000000010960 var_F8          = qword ptr -0F8h
.text:0000000000010960 var_F0          = qword ptr -0F0h
.text:0000000000010960 var_E8          = qword ptr -0E8h
.text:0000000000010960 var_E0          = qword ptr -0E0h
.text:0000000000010960 var_D8          = qword ptr -0D8h
.text:0000000000010960 var_D0          = qword ptr -0D0h
.text:0000000000010960 var_C8          = qword ptr -0C8h
.text:0000000000010960 var_C0          = qword ptr -0C0h
.text:0000000000010960 var_B8          = qword ptr -0B8h
.text:0000000000010960 var_B0          = qword ptr -0B0h
.text:0000000000010960 var_A8          = qword ptr -0A8h
.text:0000000000010960 var_A0          = qword ptr -0A0h
.text:0000000000010960 var_98          = qword ptr -98h
.text:0000000000010960 var_90          = qword ptr -90h
.text:0000000000010960 var_80          = dword ptr -80h
.text:0000000000010960 var_7C          = dword ptr -7Ch
.text:0000000000010960 var_78          = xmmword ptr -78h
.text:0000000000010960 var_68          = qword ptr -68h
.text:0000000000010960 var_58          = byte ptr -58h
.text:0000000000010960 var_50          = qword ptr -50h
.text:0000000000010960 ptr             = qword ptr -48h
.text:0000000000010960 var_40          = qword ptr -40h
.text:0000000000010960 arg_0           = dword ptr  8
.text:0000000000010960
.text:0000000000010960 ; __unwind {
.text:0000000000010960                 push    r15
.text:0000000000010962                 push    r14
.text:0000000000010964                 mov     r15, rdi
.text:0000000000010967                 push    r13
.text:0000000000010969                 push    r12
.text:000000000001096B                 push    rbp
.text:000000000001096C                 push    rbx
.text:000000000001096D                 mov     rbp, rcx
.text:0000000000010970                 mov     rbx, rdx
.text:0000000000010973                 sub     rsp, 0D8h
.text:000000000001097A                 mov     rcx, [rdi+98h]
.text:0000000000010981                 mov     r13, [rsi+8]
.text:0000000000010985                 mov     rax, fs:28h
.text:000000000001098E                 mov     [rsp+108h+var_40], rax
.text:0000000000010996                 xor     eax, eax
.text:0000000000010998                 mov     rax, rdx
.text:000000000001099B                 mov     [rsp+108h+var_A8], rsi
.text:00000000000109A0                 mov     [rsp+108h+var_90], r8
.text:00000000000109A5                 shl     rax, 4
.text:00000000000109A9                 add     rax, [rcx]
.text:00000000000109AC                 mov     [rsp+108h+var_C8], r9
.text:00000000000109B1                 mov     [rsp+108h+var_D8], rcx
.text:00000000000109B6                 mov     [rsp+108h+var_80], 0
.text:00000000000109C1                 mov     rax, [rax]
.text:00000000000109C4                 mov     [rsp+108h+var_C0], rax
.text:00000000000109C9                 movsxd  rax, dword ptr [rdi+0E0h]
.text:00000000000109D0                 add     rax, r9
.text:00000000000109D3                 cmp     rax, r13
.text:00000000000109D6                 jge     loc_10FF6
.text:00000000000109DC
.text:00000000000109DC loc_109DC:                              ; CODE XREF: check_arrival+6FB↓j
.text:00000000000109DC                 mov     rax, [rsp+108h+var_A8]
.text:00000000000109E1                 mov     rdx, [r15+0B8h]
.text:00000000000109E8                 mov     rcx, [r15+48h]
.text:00000000000109EC                 mov     r12, [rax]
.text:00000000000109EF                 mov     r14, [rax+10h]
.text:00000000000109F3                 mov     [rsp+108h+var_A0], rdx
.text:00000000000109F8                 mov     [rsp+108h+var_98], rcx
.text:00000000000109FD                 mov     edx, [r15+0A0h]
.text:0000000000010A04                 test    r12, r12
.text:0000000000010A07                 mov     [r15+0B8h], r14
.text:0000000000010A0E                 jz      loc_10DF0
.text:0000000000010A14                 lea     rsi, [r12-1]
.text:0000000000010A19                 mov     [r15+48h], r12
.text:0000000000010A1D                 mov     rdi, r15
.text:0000000000010A20                 call    re_string_context_at
.text:0000000000010A25                 cmp     r12, rbp
.text:0000000000010A28                 mov     r13d, eax
.text:0000000000010A2B                 jz      loc_10E03
.text:0000000000010A31                 mov     rbp, [r14+r12*8]
.text:0000000000010A35                 test    rbp, rbp
.text:0000000000010A38                 jz      short loc_10A44
.text:0000000000010A3A                 test    byte ptr [rbp+68h], 40h
.text:0000000000010A3E                 jnz     loc_10F60
.text:0000000000010A44
.text:0000000000010A44 loc_10A44:                              ; CODE XREF: check_arrival+D8↑j
.text:0000000000010A44                 pxor    xmm0, xmm0
.text:0000000000010A48                 mov     [rsp+108h+var_68], 0
.text:0000000000010A54                 movaps  [rsp+108h+var_78], xmm0
.text:0000000000010A5C
.text:0000000000010A5C loc_10A5C:                              ; CODE XREF: check_arrival+627↓j
.text:0000000000010A5C                                         ; check_arrival+691↓j
.text:0000000000010A5C                 cmp     r12, [rsp+108h+var_C8]
.text:0000000000010A61                 jge     loc_10D88
.text:0000000000010A67                 mov     ecx, [r15+0E0h]
.text:0000000000010A6E                 test    ecx, ecx
.text:0000000000010A70                 js      loc_10D88
.text:0000000000010A76                 lea     rbx, [rsp+108h+var_78]
.text:0000000000010A7E                 lea     rax, ds:8[r12*8]
.text:0000000000010A86                 mov     [rsp+108h+var_108], r12
.text:0000000000010A8A                 mov     [rsp+108h+var_E8], 0
.text:0000000000010A93                 mov     [rsp+108h+var_100], rbx
.text:0000000000010A98                 lea     rbx, [rsp+108h+var_58]
.text:0000000000010AA0                 mov     [rsp+108h+var_F8], rax
.text:0000000000010AA5                 mov     rax, [r15+0B8h]
.text:0000000000010AAC                 mov     [rsp+108h+var_F0], rbx
.text:0000000000010AB1                 lea     rbx, [rsp+108h+var_7C]
.text:0000000000010AB9                 mov     [rsp+108h+var_B0], rbx
.text:0000000000010ABE
.text:0000000000010ABE loc_10ABE:                              ; CODE XREF: check_arrival+422↓j
.text:0000000000010ABE                 mov     rcx, [rsp+108h+var_F8]
.text:0000000000010AC3                 mov     qword ptr [rsp+108h+var_78+8], 0
.text:0000000000010ACF                 mov     rsi, [rax+rcx]
.text:0000000000010AD3                 test    rsi, rsi
.text:0000000000010AD6                 jz      loc_10E98
.text:0000000000010ADC                 mov     rdi, [rsp+108h+var_100]
.text:0000000000010AE1                 add     rsi, 8
.text:0000000000010AE5                 call    re_node_set_merge
.text:0000000000010AEA                 test    eax, eax
.text:0000000000010AEC                 mov     [rsp+108h+var_80], eax
.text:0000000000010AF3                 jnz     loc_10ED0
.text:0000000000010AF9                 test    rbp, rbp
.text:0000000000010AFC                 jz      loc_10CA8
.text:0000000000010B02
.text:0000000000010B02 loc_10B02:                              ; CODE XREF: check_arrival+53B↓j
.text:0000000000010B02                 cmp     qword ptr [rbp+28h], 0
.text:0000000000010B07                 mov     rax, [rsp+108h+var_F0]
.text:0000000000010B0C                 pxor    xmm0, xmm0
.text:0000000000010B10                 mov     r12, [r15+98h]
.text:0000000000010B17                 mov     [rsp+108h+var_7C], 0
.text:0000000000010B22                 mov     qword ptr [rax+10h], 0
.text:0000000000010B2A                 movaps  xmmword ptr [rax], xmm0
.text:0000000000010B2D                 jle     loc_11060
.text:0000000000010B33                 lea     rax, [r12+0D8h]
.text:0000000000010B3B                 xor     ebx, ebx
.text:0000000000010B3D                 mov     [rsp+108h+var_E0], rax
.text:0000000000010B42                 jmp     short loc_10B89
.text:0000000000010B42 ; ---------------------------------------------------------------------------
.text:0000000000010B44                 align 8
.text:0000000000010B48
.text:0000000000010B48 loc_10B48:                              ; CODE XREF: check_arrival+244↓j
.text:0000000000010B48                                         ; check_arrival+52F↓j
.text:0000000000010B48                 mov     rdx, [rsp+108h+var_108]
.text:0000000000010B4C                 mov     rdi, r15
.text:0000000000010B4F                 call    check_node_accept
.text:0000000000010B54                 test    al, al
.text:0000000000010B56                 jz      short loc_10B7B
.text:0000000000010B58
.text:0000000000010B58 loc_10B58:                              ; CODE XREF: check_arrival+522↓j
.text:0000000000010B58                 lea     r13, ds:0[r14*8]
.text:0000000000010B60
.text:0000000000010B60 loc_10B60:                              ; CODE XREF: check_arrival+30B↓j
.text:0000000000010B60                                         ; check_arrival+31A↓j
.text:0000000000010B60                 mov     rax, [r12+18h]
.text:0000000000010B65                 mov     rdi, [rsp+108h+var_100]
.text:0000000000010B6A                 mov     rsi, [rax+r13]
.text:0000000000010B6E                 call    re_node_set_insert
.text:0000000000010B73                 test    al, al
.text:0000000000010B75                 jz      loc_10EB8
.text:0000000000010B7B
.text:0000000000010B7B loc_10B7B:                              ; CODE XREF: check_arrival+1F6↑j
.text:0000000000010B7B                 add     rbx, 1
.text:0000000000010B7F                 cmp     rbx, [rbp+28h]
.text:0000000000010B83                 jge     loc_10F10
.text:0000000000010B89
.text:0000000000010B89 loc_10B89:                              ; CODE XREF: check_arrival+1E2↑j
.text:0000000000010B89                 mov     rax, [rbp+30h]
.text:0000000000010B8D                 mov     rdi, [r12]
.text:0000000000010B91                 mov     r14, [rax+rbx*8]
.text:0000000000010B95                 mov     r13, r14
.text:0000000000010B98                 shl     r13, 4
.text:0000000000010B9C                 lea     rsi, [rdi+r13]
.text:0000000000010BA0                 test    byte ptr [rsi+0Ah], 10h
.text:0000000000010BA4                 jz      short loc_10B48
.text:0000000000010BA6                 mov     r8, [rsp+108h+var_108]
.text:0000000000010BAA                 mov     rsi, [rsp+108h+var_E0]
.text:0000000000010BAF                 mov     rcx, r15
.text:0000000000010BB2                 mov     rdx, r14
.text:0000000000010BB5                 call    check_node_accept_bytes_isra_31
.text:0000000000010BBA                 cmp     eax, 1
.text:0000000000010BBD                 jle     loc_10E80
.text:0000000000010BC3                 cdqe
.text:0000000000010BC5                 add     rax, [rsp+108h+var_108]
.text:0000000000010BC9                 mov     rdx, [r12+18h]
.text:0000000000010BCE                 lea     r13, ds:0[r14*8]
.text:0000000000010BD6                 mov     rdx, [rdx+r14*8]
.text:0000000000010BDA                 mov     rcx, rax
.text:0000000000010BDD                 mov     [rsp+108h+var_D0], rax
.text:0000000000010BE2                 lea     r14, ds:0[rax*8]
.text:0000000000010BEA                 mov     rax, [r15+0B8h]
.text:0000000000010BF1                 mov     rsi, [rax+rcx*8]
.text:0000000000010BF5                 mov     [rsp+108h+var_50], 0
.text:0000000000010C01                 test    rsi, rsi
.text:0000000000010C04                 jz      short loc_10C29
.text:0000000000010C06                 mov     rdi, [rsp+108h+var_F0]
.text:0000000000010C0B                 add     rsi, 8
.text:0000000000010C0F                 mov     [rsp+108h+var_B8], rdx
.text:0000000000010C14                 call    re_node_set_merge
.text:0000000000010C19                 test    eax, eax
.text:0000000000010C1B                 mov     [rsp+108h+var_7C], eax
.text:0000000000010C22                 mov     rdx, [rsp+108h+var_B8]
.text:0000000000010C27                 jnz     short loc_10C80
.text:0000000000010C29
.text:0000000000010C29 loc_10C29:                              ; CODE XREF: check_arrival+2A4↑j
.text:0000000000010C29                 mov     rdi, [rsp+108h+var_F0]
.text:0000000000010C2E                 mov     rsi, rdx
.text:0000000000010C31                 call    re_node_set_insert
.text:0000000000010C36                 test    al, al
.text:0000000000010C38                 jz      loc_10EB8
.text:0000000000010C3E                 add     r14, [r15+0B8h]
.text:0000000000010C45                 mov     rdx, [rsp+108h+var_F0]
.text:0000000000010C4A                 mov     rsi, r12
.text:0000000000010C4D                 mov     rdi, [rsp+108h+var_B0]
.text:0000000000010C52                 call    re_acquire_state
.text:0000000000010C57                 mov     rdx, [rsp+108h+var_D0]
.text:0000000000010C5C                 mov     [r14], rax
.text:0000000000010C5F                 mov     rax, [r15+0B8h]
.text:0000000000010C66                 cmp     qword ptr [rax+rdx*8], 0
.text:0000000000010C6B                 jnz     loc_10B60
.text:0000000000010C71                 mov     edx, [rsp+108h+var_7C]
.text:0000000000010C78                 test    edx, edx
.text:0000000000010C7A                 jz      loc_10B60
.text:0000000000010C80
.text:0000000000010C80 loc_10C80:                              ; CODE XREF: check_arrival+2C7↑j
.text:0000000000010C80                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:0000000000010C88                 call    _free
.text:0000000000010C8D                 mov     eax, [rsp+108h+var_7C]
.text:0000000000010C94                 test    eax, eax
.text:0000000000010C96                 mov     [rsp+108h+var_80], eax
.text:0000000000010C9D                 jnz     loc_10ED0
.text:0000000000010CA3                 nop     dword ptr [rax+rax+00h]
.text:0000000000010CA8
.text:0000000000010CA8 loc_10CA8:                              ; CODE XREF: check_arrival+19C↑j
.text:0000000000010CA8                                         ; check_arrival+5C8↓j
.text:0000000000010CA8                 mov     rax, [rsp+108h+var_108]
.text:0000000000010CAC                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:0000000000010CB5                 lea     rbx, [rax+1]
.text:0000000000010CB9                 mov     r12, rbx
.text:0000000000010CBC                 jz      short loc_10D14
.text:0000000000010CBE                 mov     ecx, [rsp+108h+arg_0]
.text:0000000000010CC5                 mov     rdx, [rsp+108h+var_C0]
.text:0000000000010CCA                 mov     rsi, [rsp+108h+var_100]
.text:0000000000010CCF                 mov     rdi, [rsp+108h+var_D8]
.text:0000000000010CD4                 call    check_arrival_expand_ecl
.text:0000000000010CD9                 test    eax, eax
.text:0000000000010CDB                 mov     [rsp+108h+var_80], eax
.text:0000000000010CE2                 jnz     loc_10ED0
.text:0000000000010CE8                 mov     r8d, [rsp+108h+arg_0]
.text:0000000000010CF0                 mov     rcx, [rsp+108h+var_C0]
.text:0000000000010CF5                 mov     rdx, rbx
.text:0000000000010CF8                 mov     rsi, [rsp+108h+var_100]
.text:0000000000010CFD                 mov     rdi, r15
.text:0000000000010D00                 call    expand_bkref_cache
.text:0000000000010D05                 test    eax, eax
.text:0000000000010D07                 mov     [rsp+108h+var_80], eax
.text:0000000000010D0E                 jnz     loc_10ED0
.text:0000000000010D14
.text:0000000000010D14 loc_10D14:                              ; CODE XREF: check_arrival+35C↑j
.text:0000000000010D14                                         ; check_arrival+54C↓j
.text:0000000000010D14                 mov     edx, [r15+0A0h]
.text:0000000000010D1B                 mov     rsi, [rsp+108h+var_108]
.text:0000000000010D1F                 mov     rdi, r15
.text:0000000000010D22                 call    re_string_context_at
.text:0000000000010D27                 mov     rdx, [rsp+108h+var_100]
.text:0000000000010D2C                 mov     rsi, [rsp+108h+var_D8]
.text:0000000000010D31                 lea     rdi, [rsp+108h+var_80]
.text:0000000000010D39                 mov     ecx, eax
.text:0000000000010D3B                 call    re_acquire_state_context
.text:0000000000010D40                 test    rax, rax
.text:0000000000010D43                 mov     rbp, rax
.text:0000000000010D46                 jz      loc_10F30
.text:0000000000010D4C                 mov     rax, [r15+0B8h]
.text:0000000000010D53                 mov     rdx, [rsp+108h+var_F8]
.text:0000000000010D58                 mov     [rsp+108h+var_E8], 0
.text:0000000000010D61                 mov     [rax+rdx], rbp
.text:0000000000010D65
.text:0000000000010D65 loc_10D65:                              ; CODE XREF: check_arrival+5F5↓j
.text:0000000000010D65                 cmp     [rsp+108h+var_C8], rbx
.text:0000000000010D6A                 jle     short loc_10D88
.text:0000000000010D6C                 movsxd  rdx, dword ptr [r15+0E0h]
.text:0000000000010D73                 add     [rsp+108h+var_F8], 8
.text:0000000000010D79                 cmp     rdx, [rsp+108h+var_E8]
.text:0000000000010D7E                 mov     [rsp+108h+var_108], rbx
.text:0000000000010D82                 jge     loc_10ABE
.text:0000000000010D88
.text:0000000000010D88 loc_10D88:                              ; CODE XREF: check_arrival+101↑j
.text:0000000000010D88                                         ; check_arrival+110↑j ...
.text:0000000000010D88                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:0000000000010D90                 call    _free
.text:0000000000010D95                 mov     rax, [r15+0B8h]
.text:0000000000010D9C                 mov     rbx, [rsp+108h+var_C8]
.text:0000000000010DA1                 mov     rax, [rax+rbx*8]
.text:0000000000010DA5                 test    rax, rax
.text:0000000000010DA8                 jz      loc_11085
.text:0000000000010DAE                 mov     rbx, [rsp+108h+var_A8]
.text:0000000000010DB3                 mov     rdx, [rsp+108h+var_90]
.text:0000000000010DB8                 lea     rsi, [rax+18h]
.text:0000000000010DBC                 mov     [rbx], r12
.text:0000000000010DBF                 mov     rbx, [rsp+108h+var_A0]
.text:0000000000010DC4                 mov     [r15+0B8h], rbx
.text:0000000000010DCB                 mov     rbx, [rsp+108h+var_98]
.text:0000000000010DD0                 mov     [r15+48h], rbx
.text:0000000000010DD4                 mov     rdi, [rax+10h]
.text:0000000000010DD8                 call    re_node_set_contains_isra_3
.text:0000000000010DDD                 test    rax, rax
.text:0000000000010DE0                 setz    al
.text:0000000000010DE3                 movzx   eax, al
.text:0000000000010DE6                 jmp     loc_10EE4
.text:0000000000010DE6 ; ---------------------------------------------------------------------------
.text:0000000000010DEB                 align 10h
.text:0000000000010DF0
.text:0000000000010DF0 loc_10DF0:                              ; CODE XREF: check_arrival+AE↑j
.text:0000000000010DF0                 lea     rsi, [rbp-1]
.text:0000000000010DF4                 mov     [r15+48h], rbp
.text:0000000000010DF8                 mov     rdi, r15
.text:0000000000010DFB                 call    re_string_context_at
.text:0000000000010E00                 mov     r13d, eax
.text:0000000000010E03
.text:0000000000010E03 loc_10E03:                              ; CODE XREF: check_arrival+CB↑j
.text:0000000000010E03                 mov     edi, 8          ; size
.text:0000000000010E08                 mov     qword ptr [rsp+108h+var_78], 1
.text:0000000000010E14                 mov     qword ptr [rsp+108h+var_78+8], 1
.text:0000000000010E20                 call    _malloc
.text:0000000000010E25                 test    rax, rax
.text:0000000000010E28                 mov     [rsp+108h+var_68], rax
.text:0000000000010E30                 jz      loc_1107B
.text:0000000000010E36                 mov     [rax], rbx
.text:0000000000010E39                 mov     ecx, [rsp+108h+arg_0]
.text:0000000000010E40                 lea     rbx, [rsp+108h+var_78]
.text:0000000000010E48                 mov     rdx, [rsp+108h+var_C0]
.text:0000000000010E4D                 mov     rdi, [rsp+108h+var_D8]
.text:0000000000010E52                 mov     r12, rbp
.text:0000000000010E55                 mov     rsi, rbx
.text:0000000000010E58                 mov     [rsp+108h+var_80], 0
.text:0000000000010E63                 call    check_arrival_expand_ecl
.text:0000000000010E68                 test    eax, eax
.text:0000000000010E6A                 mov     [rsp+108h+var_80], eax
.text:0000000000010E71                 jz      loc_10F8D
.text:0000000000010E77                 jmp     short loc_10ED0
.text:0000000000010E77 ; ---------------------------------------------------------------------------
.text:0000000000010E79                 align 20h
.text:0000000000010E80
.text:0000000000010E80 loc_10E80:                              ; CODE XREF: check_arrival+25D↑j
.text:0000000000010E80                 test    eax, eax
.text:0000000000010E82                 jnz     loc_10B58
.text:0000000000010E88                 mov     rsi, [r12]
.text:0000000000010E8C                 add     rsi, r13
.text:0000000000010E8F                 jmp     loc_10B48
.text:0000000000010E8F ; ---------------------------------------------------------------------------
.text:0000000000010E94                 align 8
.text:0000000000010E98
.text:0000000000010E98 loc_10E98:                              ; CODE XREF: check_arrival+176↑j
.text:0000000000010E98                 test    rbp, rbp
.text:0000000000010E9B                 jnz     loc_10B02
.text:0000000000010EA1                 mov     rax, [rsp+108h+var_108]
.text:0000000000010EA5                 lea     rbx, [rax+1]
.text:0000000000010EA9                 mov     r12, rbx
.text:0000000000010EAC                 jmp     loc_10D14
.text:0000000000010EAC ; ---------------------------------------------------------------------------
.text:0000000000010EB1                 align 8
.text:0000000000010EB8
.text:0000000000010EB8 loc_10EB8:                              ; CODE XREF: check_arrival+215↑j
.text:0000000000010EB8                                         ; check_arrival+2D8↑j
.text:0000000000010EB8                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:0000000000010EC0                 call    _free
.text:0000000000010EC5                 mov     [rsp+108h+var_80], 0Ch
.text:0000000000010ED0
.text:0000000000010ED0 loc_10ED0:                              ; CODE XREF: check_arrival+193↑j
.text:0000000000010ED0                                         ; check_arrival+33D↑j ...
.text:0000000000010ED0                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:0000000000010ED8                 call    _free
.text:0000000000010EDD                 mov     eax, [rsp+108h+var_80]
.text:0000000000010EE4
.text:0000000000010EE4 loc_10EE4:                              ; CODE XREF: check_arrival+486↑j
.text:0000000000010EE4                                         ; check_arrival+61D↓j ...
.text:0000000000010EE4                 mov     rbx, [rsp+108h+var_40]
.text:0000000000010EEC                 xor     rbx, fs:28h
.text:0000000000010EF5                 jnz     loc_110AC
.text:0000000000010EFB                 add     rsp, 0D8h
.text:0000000000010F02                 pop     rbx
.text:0000000000010F03                 pop     rbp
.text:0000000000010F04                 pop     r12
.text:0000000000010F06                 pop     r13
.text:0000000000010F08                 pop     r14
.text:0000000000010F0A                 pop     r15
.text:0000000000010F0C                 retn
.text:0000000000010F0C ; ---------------------------------------------------------------------------
.text:0000000000010F0D                 align 10h
.text:0000000000010F10
.text:0000000000010F10 loc_10F10:                              ; CODE XREF: check_arrival+223↑j
.text:0000000000010F10                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:0000000000010F18
.text:0000000000010F18 loc_10F18:                              ; CODE XREF: check_arrival+702↓j
.text:0000000000010F18                 call    _free
.text:0000000000010F1D                 mov     [rsp+108h+var_80], 0
.text:0000000000010F28                 jmp     loc_10CA8
.text:0000000000010F28 ; ---------------------------------------------------------------------------
.text:0000000000010F2D                 align 10h
.text:0000000000010F30
.text:0000000000010F30 loc_10F30:                              ; CODE XREF: check_arrival+3E6↑j
.text:0000000000010F30                 mov     eax, [rsp+108h+var_80]
.text:0000000000010F37                 test    eax, eax
.text:0000000000010F39                 jnz     short loc_10ED0
.text:0000000000010F3B                 mov     rax, [r15+0B8h]
.text:0000000000010F42                 mov     rdx, [rsp+108h+var_F8]
.text:0000000000010F47                 add     [rsp+108h+var_E8], 1
.text:0000000000010F4D                 mov     qword ptr [rax+rdx], 0
.text:0000000000010F55                 jmp     loc_10D65
.text:0000000000010F55 ; ---------------------------------------------------------------------------
.text:0000000000010F5A                 align 20h
.text:0000000000010F60
.text:0000000000010F60 loc_10F60:                              ; CODE XREF: check_arrival+DE↑j
.text:0000000000010F60                 lea     rbx, [rsp+108h+var_78]
.text:0000000000010F68                 lea     rsi, [rbp+8]
.text:0000000000010F6C                 mov     rdi, rbx
.text:0000000000010F6F                 call    re_node_set_init_copy
.text:0000000000010F74                 test    eax, eax
.text:0000000000010F76                 mov     [rsp+108h+var_80], eax
.text:0000000000010F7D                 jnz     loc_10EE4
.text:0000000000010F83                 test    byte ptr [rbp+68h], 40h
.text:0000000000010F87                 jz      loc_10A5C
.text:0000000000010F8D
.text:0000000000010F8D loc_10F8D:                              ; CODE XREF: check_arrival+511↑j
.text:0000000000010F8D                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:0000000000010F96                 jz      short loc_10FC2
.text:0000000000010F98                 mov     r8d, [rsp+108h+arg_0]
.text:0000000000010FA0                 mov     rcx, [rsp+108h+var_C0]
.text:0000000000010FA5                 mov     rdx, r12
.text:0000000000010FA8                 mov     rsi, rbx
.text:0000000000010FAB                 mov     rdi, r15
.text:0000000000010FAE                 call    expand_bkref_cache
.text:0000000000010FB3                 test    eax, eax
.text:0000000000010FB5                 mov     [rsp+108h+var_80], eax
.text:0000000000010FBC                 jnz     loc_10ED0
.text:0000000000010FC2
.text:0000000000010FC2 loc_10FC2:                              ; CODE XREF: check_arrival+636↑j
.text:0000000000010FC2                 mov     rsi, [rsp+108h+var_D8]
.text:0000000000010FC7                 lea     rdi, [rsp+108h+var_80]
.text:0000000000010FCF                 mov     ecx, r13d
.text:0000000000010FD2                 mov     rdx, rbx
.text:0000000000010FD5                 call    re_acquire_state_context
.text:0000000000010FDA                 test    rax, rax
.text:0000000000010FDD                 mov     rbp, rax
.text:0000000000010FE0                 jz      loc_11067
.text:0000000000010FE6
.text:0000000000010FE6 loc_10FE6:                              ; CODE XREF: check_arrival+710↓j
.text:0000000000010FE6                 mov     rax, [r15+0B8h]
.text:0000000000010FED                 mov     [rax+r12*8], rbp
.text:0000000000010FF1                 jmp     loc_10A5C
.text:0000000000010FF6 ; ---------------------------------------------------------------------------
.text:0000000000010FF6
.text:0000000000010FF6 loc_10FF6:                              ; CODE XREF: check_arrival+76↑j
.text:0000000000010FF6                 lea     r12, [rax+1]
.text:0000000000010FFA                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000011004                 sub     rax, r13
.text:0000000000011007                 cmp     rax, r12
.text:000000000001100A                 jl      short loc_1107B
.text:000000000001100C                 lea     r14, [r13+r12+0]
.text:0000000000011011                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000001101B                 cmp     r14, rax
.text:000000000001101E                 ja      short loc_1107B
.text:0000000000011020                 mov     rax, [rsp+108h+var_A8]
.text:0000000000011025                 lea     rsi, ds:0[r14*8] ; size
.text:000000000001102D                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000011031                 call    _realloc
.text:0000000000011036                 test    rax, rax
.text:0000000000011039                 jz      short loc_1107B
.text:000000000001103B                 mov     rcx, [rsp+108h+var_A8]
.text:0000000000011040                 lea     rdx, ds:0[r12*8] ; n
.text:0000000000011048                 lea     rdi, [rax+r13*8] ; s
.text:000000000001104C                 xor     esi, esi        ; c
.text:000000000001104E                 mov     [rcx+10h], rax
.text:0000000000011052                 mov     [rcx+8], r14
.text:0000000000011056                 call    _memset
.text:000000000001105B                 jmp     loc_109DC
.text:0000000000011060 ; ---------------------------------------------------------------------------
.text:0000000000011060
.text:0000000000011060 loc_11060:                              ; CODE XREF: check_arrival+1CD↑j
.text:0000000000011060                 xor     edi, edi
.text:0000000000011062                 jmp     loc_10F18
.text:0000000000011067 ; ---------------------------------------------------------------------------
.text:0000000000011067
.text:0000000000011067 loc_11067:                              ; CODE XREF: check_arrival+680↑j
.text:0000000000011067                 mov     esi, [rsp+108h+var_80]
.text:000000000001106E                 test    esi, esi
.text:0000000000011070                 jz      loc_10FE6
.text:0000000000011076                 jmp     loc_10ED0
.text:000000000001107B ; ---------------------------------------------------------------------------
.text:000000000001107B
.text:000000000001107B loc_1107B:                              ; CODE XREF: check_arrival+4D0↑j
.text:000000000001107B                                         ; check_arrival+6AA↑j ...
.text:000000000001107B                 mov     eax, 0Ch
.text:0000000000011080                 jmp     loc_10EE4
.text:0000000000011085 ; ---------------------------------------------------------------------------
.text:0000000000011085
.text:0000000000011085 loc_11085:                              ; CODE XREF: check_arrival+448↑j
.text:0000000000011085                 mov     rax, [rsp+108h+var_A8]
.text:000000000001108A                 mov     [rax], r12
.text:000000000001108D                 mov     rax, [rsp+108h+var_A0]
.text:0000000000011092                 mov     [r15+0B8h], rax
.text:0000000000011099                 mov     rax, [rsp+108h+var_98]
.text:000000000001109E                 mov     [r15+48h], rax
.text:00000000000110A2                 mov     eax, 1
.text:00000000000110A7                 jmp     loc_10EE4
.text:00000000000110AC ; ---------------------------------------------------------------------------
.text:00000000000110AC
.text:00000000000110AC loc_110AC:                              ; CODE XREF: check_arrival+595↑j
.text:00000000000110AC                 call    ___stack_chk_fail
.text:00000000000110AC ; } // starts at 10960
.text:00000000000110AC check_arrival   endp
.text:00000000000110AC
.text:00000000000110AC ; ---------------------------------------------------------------------------
.text:00000000000110B1                 align 20h
.text:00000000000110C0
.text:00000000000110C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000110C0
.text:00000000000110C0 ; Attributes: bp-based frame
.text:00000000000110C0
.text:00000000000110C0 set_regs        proc near               ; CODE XREF: re_search_internal+1351↓p
.text:00000000000110C0
.text:00000000000110C0 var_D1          = byte ptr -0D1h
.text:00000000000110C0 var_C9          = byte ptr -0C9h
.text:00000000000110C0 var_C8          = qword ptr -0C8h
.text:00000000000110C0 dest            = qword ptr -0C0h
.text:00000000000110C0 n               = qword ptr -0B8h
.text:00000000000110C0 var_B0          = qword ptr -0B0h
.text:00000000000110C0 var_A8          = qword ptr -0A8h
.text:00000000000110C0 var_A0          = qword ptr -0A0h
.text:00000000000110C0 var_98          = qword ptr -98h
.text:00000000000110C0 var_90          = qword ptr -90h
.text:00000000000110C0 var_88          = qword ptr -88h
.text:00000000000110C0 var_78          = qword ptr -78h
.text:00000000000110C0 var_70          = xmmword ptr -70h
.text:00000000000110C0 ptr             = qword ptr -60h
.text:00000000000110C0 var_50          = qword ptr -50h
.text:00000000000110C0 var_48          = qword ptr -48h
.text:00000000000110C0 var_40          = qword ptr -40h
.text:00000000000110C0 var_38          = qword ptr -38h
.text:00000000000110C0
.text:00000000000110C0 ; __unwind {
.text:00000000000110C0                 push    rbp
.text:00000000000110C1                 mov     rbp, rsp
.text:00000000000110C4                 push    r15
.text:00000000000110C6                 push    r14
.text:00000000000110C8                 push    r13
.text:00000000000110CA                 push    r12
.text:00000000000110CC                 mov     r13, rcx
.text:00000000000110CF                 push    rbx
.text:00000000000110D0                 mov     r12, rsi
.text:00000000000110D3                 sub     rsp, 0B8h
.text:00000000000110DA                 mov     [rbp+var_98], rdx
.text:00000000000110E1                 mov     [rbp+var_50], 0
.text:00000000000110E9                 mov     rax, fs:28h
.text:00000000000110F2                 mov     [rbp+var_38], rax
.text:00000000000110F6                 xor     eax, eax
.text:00000000000110F8                 mov     rax, [rdi]
.text:00000000000110FB                 test    r8b, r8b
.text:00000000000110FE                 mov     [rbp+var_48], 2
.text:0000000000011106                 mov     [rbp+var_40], 0
.text:000000000001110E                 mov     [rbp+var_90], rax
.text:0000000000011115                 jz      loc_118BD
.text:000000000001111B                 mov     edi, 60h ; '`'  ; size
.text:0000000000011120                 call    _malloc
.text:0000000000011125                 lea     rcx, [rbp+var_50]
.text:0000000000011129                 test    rax, rax
.text:000000000001112C                 mov     [rbp+var_40], rax
.text:0000000000011130                 mov     [rbp+var_88], rcx
.text:0000000000011137                 jz      loc_1185C
.text:000000000001113D
.text:000000000001113D loc_1113D:                              ; CODE XREF: set_regs+808↓j
.text:000000000001113D                 mov     rax, [rbp+var_90]
.text:0000000000011144                 pxor    xmm0, xmm0
.text:0000000000011148                 mov     [rbp+ptr], 0
.text:0000000000011150                 mov     rbx, [rax+90h]
.text:0000000000011157                 mov     rax, [rbp+var_98]
.text:000000000001115E                 movaps  [rbp+var_70], xmm0
.text:0000000000011162                 shl     rax, 4
.text:0000000000011166                 cmp     rax, 0FBFh
.text:000000000001116C                 mov     [rbp+n], rax
.text:0000000000011173                 ja      loc_11866
.text:0000000000011179                 add     rax, 10h
.text:000000000001117D                 mov     [rbp+var_C9], 0
.text:0000000000011184                 sub     rsp, rax
.text:0000000000011187                 lea     rax, [rsp+0E0h+var_D1]
.text:000000000001118C                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000011190                 mov     [rbp+dest], rax
.text:0000000000011197
.text:0000000000011197 loc_11197:                              ; CODE XREF: set_regs+7C3↓j
.text:0000000000011197                 mov     rdx, [rbp+n]    ; n
.text:000000000001119E                 mov     rdi, [rbp+dest] ; dest
.text:00000000000111A5                 mov     rsi, r13        ; src
.text:00000000000111A8                 call    _memcpy
.text:00000000000111AD                 lea     rax, [rbp+var_70]
.text:00000000000111B1                 mov     rcx, [r13+0]
.text:00000000000111B5                 mov     [rbp+var_A8], rax
.text:00000000000111BC                 add     rax, 10h
.text:00000000000111C0                 mov     [rbp+var_78], rcx
.text:00000000000111C4                 mov     [rbp+var_C8], rax
.text:00000000000111CB
.text:00000000000111CB loc_111CB:                              ; CODE XREF: set_regs+612↓j
.text:00000000000111CB                 lea     rax, [rbp+var_78]
.text:00000000000111CF                 mov     [rbp+var_B0], rax
.text:00000000000111D6                 jmp     loc_112B9
.text:00000000000111D6 ; ---------------------------------------------------------------------------
.text:00000000000111DB                 align 20h
.text:00000000000111E0
.text:00000000000111E0 loc_111E0:                              ; CODE XREF: set_regs+224↓j
.text:00000000000111E0                 cmp     esi, 9
.text:00000000000111E3                 jz      loc_113D0
.text:00000000000111E9
.text:00000000000111E9 loc_111E9:                              ; CODE XREF: set_regs+238↓j
.text:00000000000111E9                                         ; set_regs+254↓j ...
.text:00000000000111E9                 cmp     rax, rcx
.text:00000000000111EC                 jnz     short loc_111FC
.text:00000000000111EE                 cmp     [r12+0B0h], rbx
.text:00000000000111F6                 jz      loc_115D0
.text:00000000000111FC
.text:00000000000111FC loc_111FC:                              ; CODE XREF: set_regs+12C↑j
.text:00000000000111FC                                         ; set_regs+5C5↓j
.text:00000000000111FC                 mov     r14, [r12+98h]
.text:0000000000011204                 mov     rdi, [r14]
.text:0000000000011207                 lea     rsi, [rdi+r9]
.text:000000000001120B                 movzx   eax, byte ptr [rsi+8]
.text:000000000001120F                 test    al, 8
.text:0000000000011211                 jnz     loc_11320
.text:0000000000011217                 test    byte ptr [rsi+0Ah], 10h
.text:000000000001121B                 jnz     loc_11420
.text:0000000000011221                 cmp     al, 4
.text:0000000000011223                 jz      loc_11460
.text:0000000000011229                 mov     rcx, [rbp+var_78]
.text:000000000001122D
.text:000000000001122D loc_1122D:                              ; CODE XREF: set_regs+39A↓j
.text:000000000001122D                                         ; set_regs+6A5↓j
.text:000000000001122D                 mov     rdx, rcx
.text:0000000000011230                 mov     rdi, r12
.text:0000000000011233                 mov     [rbp+var_A0], rcx
.text:000000000001123A                 call    check_node_accept
.text:000000000001123F                 test    al, al
.text:0000000000011241                 mov     rcx, [rbp+var_A0]
.text:0000000000011248                 jz      loc_11698
.text:000000000001124E                 mov     rax, [r14+18h]
.text:0000000000011252                 lea     rdx, [rcx+1]
.text:0000000000011256                 mov     rbx, [rax+r15*8]
.text:000000000001125A
.text:000000000001125A loc_1125A:                              ; CODE XREF: set_regs+431↓j
.text:000000000001125A                 cmp     [rbp+var_88], 0
.text:0000000000011262                 mov     [rbp+var_78], rdx
.text:0000000000011266                 jz      short loc_112A4
.text:0000000000011268                 cmp     rdx, [r12+0A8h]
.text:0000000000011270                 jg      loc_116A6
.text:0000000000011276                 mov     rax, [r12+0B8h]
.text:000000000001127E                 mov     rax, [rax+rdx*8]
.text:0000000000011282                 test    rax, rax
.text:0000000000011285                 jz      loc_116A6
.text:000000000001128B                 mov     rdi, [rax+10h]
.text:000000000001128F                 lea     rsi, [rax+18h]
.text:0000000000011293                 mov     rdx, rbx
.text:0000000000011296                 call    re_node_set_contains_isra_3
.text:000000000001129B                 test    rax, rax
.text:000000000001129E                 jz      loc_116A6
.text:00000000000112A4
.text:00000000000112A4 loc_112A4:                              ; CODE XREF: set_regs+1A6↑j
.text:00000000000112A4                 mov     qword ptr [rbp+var_70+8], 0
.text:00000000000112AC
.text:00000000000112AC loc_112AC:                              ; CODE XREF: set_regs+304↓j
.text:00000000000112AC                                         ; set_regs+470↓j ...
.text:00000000000112AC                 test    rbx, rbx
.text:00000000000112AF                 js      loc_1168A
.text:00000000000112B5                 mov     rcx, [rbp+var_78]
.text:00000000000112B9
.text:00000000000112B9 loc_112B9:                              ; CODE XREF: set_regs+116↑j
.text:00000000000112B9                 mov     rax, [r13+8]
.text:00000000000112BD                 cmp     rax, rcx
.text:00000000000112C0                 jl      loc_117B0
.text:00000000000112C6                 mov     rdi, [rbp+var_90]
.text:00000000000112CD                 mov     r9, rbx
.text:00000000000112D0                 mov     r15, rbx
.text:00000000000112D3                 shl     r9, 4
.text:00000000000112D7                 mov     rdx, [rdi]
.text:00000000000112DA                 add     rdx, r9
.text:00000000000112DD                 movzx   esi, byte ptr [rdx+8]
.text:00000000000112E1                 cmp     esi, 8
.text:00000000000112E4                 jnz     loc_111E0
.text:00000000000112EA                 mov     rdx, [rdx]
.text:00000000000112ED                 add     rdx, 1
.text:00000000000112F1                 cmp     [rbp+var_98], rdx
.text:00000000000112F8                 jle     loc_111E9
.text:00000000000112FE                 shl     rdx, 4
.text:0000000000011302                 add     rdx, r13
.text:0000000000011305                 mov     qword ptr [rdx+8], 0FFFFFFFFFFFFFFFFh
.text:000000000001130D                 mov     [rdx], rcx
.text:0000000000011310                 mov     rax, [r13+8]
.text:0000000000011314                 jmp     loc_111E9
.text:0000000000011314 ; ---------------------------------------------------------------------------
.text:0000000000011319                 align 20h
.text:0000000000011320
.text:0000000000011320 loc_11320:                              ; CODE XREF: set_regs+151↑j
.text:0000000000011320                 mov     rax, [r12+0B8h]
.text:0000000000011328                 mov     rdx, [rbp+var_78]
.text:000000000001132C                 mov     rsi, rbx
.text:000000000001132F                 mov     rdi, [rbp+var_A8]
.text:0000000000011336                 mov     r9, [rax+rdx*8]
.text:000000000001133A                 mov     rax, [r14+28h]
.text:000000000001133E                 lea     rdx, [rbx+rbx*2]
.text:0000000000011342                 mov     [rbp+var_A0], r9
.text:0000000000011349                 lea     r15, [rax+rdx*8]
.text:000000000001134D                 call    re_node_set_insert
.text:0000000000011352                 test    al, al
.text:0000000000011354                 mov     r9, [rbp+var_A0]
.text:000000000001135B                 jz      loc_11838
.text:0000000000011361                 mov     r10, [r15+8]
.text:0000000000011365                 test    r10, r10
.text:0000000000011368                 jle     loc_11698
.text:000000000001136E                 mov     r15, [r15+10h]
.text:0000000000011372                 mov     r11, [r9+10h]
.text:0000000000011376                 lea     r14, [r9+18h]
.text:000000000001137A                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011381                 xor     r9d, r9d
.text:0000000000011384                 mov     [rbp+var_A0], r12
.text:000000000001138B                 nop     dword ptr [rax+rax+00h]
.text:0000000000011390
.text:0000000000011390 loc_11390:                              ; CODE XREF: set_regs+2FB↓j
.text:0000000000011390                 mov     r12, [r15+r9*8]
.text:0000000000011394                 mov     rsi, r14
.text:0000000000011397                 mov     rdi, r11
.text:000000000001139A                 mov     rdx, r12
.text:000000000001139D                 call    re_node_set_contains_isra_3
.text:00000000000113A2                 test    rax, rax
.text:00000000000113A5                 jz      short loc_113B4
.text:00000000000113A7                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000113AB                 jnz     loc_11500
.text:00000000000113B1                 mov     rbx, r12
.text:00000000000113B4
.text:00000000000113B4 loc_113B4:                              ; CODE XREF: set_regs+2E5↑j
.text:00000000000113B4                 add     r9, 1
.text:00000000000113B8                 cmp     r10, r9
.text:00000000000113BB                 jnz     short loc_11390
.text:00000000000113BD                 mov     r12, [rbp+var_A0]
.text:00000000000113C4                 jmp     loc_112AC
.text:00000000000113C4 ; ---------------------------------------------------------------------------
.text:00000000000113C9                 align 10h
.text:00000000000113D0
.text:00000000000113D0 loc_113D0:                              ; CODE XREF: set_regs+123↑j
.text:00000000000113D0                 mov     rdi, [rdx]
.text:00000000000113D3                 lea     rsi, [rdi+1]
.text:00000000000113D7                 cmp     [rbp+var_98], rsi
.text:00000000000113DE                 jle     loc_111E9
.text:00000000000113E4                 shl     rsi, 4
.text:00000000000113E8                 lea     rax, [r13+rsi+0]
.text:00000000000113ED                 cmp     [rax], rcx
.text:00000000000113F0                 jl      loc_11770
.text:00000000000113F6                 test    byte ptr [rdx+0Ah], 8
.text:00000000000113FA                 jz      short loc_1140E
.text:00000000000113FC                 mov     rdi, [rbp+dest]
.text:0000000000011403                 cmp     qword ptr [rdi+rsi], 0FFFFFFFFFFFFFFFFh
.text:0000000000011408                 jnz     loc_117FB
.text:000000000001140E
.text:000000000001140E loc_1140E:                              ; CODE XREF: set_regs+33A↑j
.text:000000000001140E                 mov     [rax+8], rcx
.text:0000000000011412                 mov     rax, [r13+8]
.text:0000000000011416                 jmp     loc_111E9
.text:0000000000011416 ; ---------------------------------------------------------------------------
.text:000000000001141B                 align 20h
.text:0000000000011420
.text:0000000000011420 loc_11420:                              ; CODE XREF: set_regs+15B↑j
.text:0000000000011420                 mov     r8, [rbp+var_78]
.text:0000000000011424                 lea     rsi, [r14+0D8h]
.text:000000000001142B                 mov     rcx, r12
.text:000000000001142E                 mov     rdx, rbx
.text:0000000000011431                 mov     [rbp+var_A0], r9
.text:0000000000011438                 call    check_node_accept_bytes_isra_31
.text:000000000001143D                 movsxd  rcx, eax
.text:0000000000011440                 test    rcx, rcx
.text:0000000000011443                 jnz     loc_11641
.text:0000000000011449                 mov     r9, [rbp+var_A0]
.text:0000000000011450                 mov     rsi, [r14]
.text:0000000000011453                 mov     rcx, [rbp+var_78]
.text:0000000000011457                 add     rsi, r9
.text:000000000001145A                 jmp     loc_1122D
.text:000000000001145A ; ---------------------------------------------------------------------------
.text:000000000001145F                 align 20h
.text:0000000000011460
.text:0000000000011460 loc_11460:                              ; CODE XREF: set_regs+163↑j
.text:0000000000011460                 mov     rax, [rsi]
.text:0000000000011463                 add     rax, 1
.text:0000000000011467                 shl     rax, 4
.text:000000000001146B                 add     rax, r13
.text:000000000001146E                 mov     rdx, [rax+8]
.text:0000000000011472                 mov     rdi, [rax]
.text:0000000000011475                 mov     rcx, rdx
.text:0000000000011478                 sub     rcx, rdi
.text:000000000001147B                 cmp     [rbp+var_88], 0
.text:0000000000011483                 jz      loc_11638
.text:0000000000011489                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000001148D                 jz      loc_116A6
.text:0000000000011493                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011497                 jz      loc_116A6
.text:000000000001149D                 test    rcx, rcx
.text:00000000000114A0                 jz      loc_116F0
.text:00000000000114A6                 mov     r15, [rbp+var_78]
.text:00000000000114AA                 mov     rdx, [r12+30h]
.text:00000000000114AF                 mov     rax, [r12+8]
.text:00000000000114B4                 sub     rdx, r15
.text:00000000000114B7                 cmp     rcx, rdx
.text:00000000000114BA                 jg      loc_116A6
.text:00000000000114C0                 lea     rsi, [rax+r15]  ; s2
.text:00000000000114C4                 add     rdi, rax        ; s1
.text:00000000000114C7                 mov     rdx, rcx        ; n
.text:00000000000114CA                 mov     [rbp+var_A0], rcx
.text:00000000000114D1                 call    _memcmp
.text:00000000000114D6                 test    eax, eax
.text:00000000000114D8                 mov     rcx, [rbp+var_A0]
.text:00000000000114DF                 jnz     loc_116A6
.text:00000000000114E5
.text:00000000000114E5 loc_114E5:                              ; CODE XREF: set_regs+585↓j
.text:00000000000114E5                 mov     rax, [r14+18h]
.text:00000000000114E9                 lea     rdx, [r15+rcx]
.text:00000000000114ED                 mov     rbx, [rax+rbx*8]
.text:00000000000114F1                 jmp     loc_1125A
.text:00000000000114F1 ; ---------------------------------------------------------------------------
.text:00000000000114F6                 align 20h
.text:0000000000011500
.text:0000000000011500 loc_11500:                              ; CODE XREF: set_regs+2EB↑j
.text:0000000000011500                 mov     rsi, [rbp+var_C8]
.text:0000000000011507                 mov     rdi, qword ptr [rbp+var_70+8]
.text:000000000001150B                 mov     rdx, rbx
.text:000000000001150E                 mov     r14, r12
.text:0000000000011511                 mov     r12, [rbp+var_A0]
.text:0000000000011518                 call    re_node_set_contains_isra_3
.text:000000000001151D                 test    rax, rax
.text:0000000000011520                 jnz     loc_116E0
.text:0000000000011526                 mov     rcx, [rbp+var_88]
.text:000000000001152D                 test    rcx, rcx
.text:0000000000011530                 jz      loc_112AC
.text:0000000000011536                 mov     r15, [rcx]
.text:0000000000011539                 mov     rdx, [rbp+var_78]
.text:000000000001153D                 lea     rax, [r15+1]
.text:0000000000011541                 cmp     rax, [rcx+8]
.text:0000000000011545                 mov     [rcx], rax
.text:0000000000011548                 jz      loc_118CD
.text:000000000001154E                 mov     rax, [rcx+10h]
.text:0000000000011552
.text:0000000000011552 loc_11552:                              ; CODE XREF: set_regs+847↓j
.text:0000000000011552                 lea     r15, [r15+r15*2]
.text:0000000000011556                 shl     r15, 4
.text:000000000001155A                 add     r15, rax
.text:000000000001155D                 mov     [r15+8], r14
.text:0000000000011561                 mov     r14, [rbp+n]
.text:0000000000011568                 mov     [r15], rdx
.text:000000000001156B                 mov     rdi, r14        ; size
.text:000000000001156E                 call    _malloc
.text:0000000000011573                 test    rax, rax
.text:0000000000011576                 mov     [r15+10h], rax
.text:000000000001157A                 jz      short loc_115A2
.text:000000000001157C                 mov     rdx, r14        ; n
.text:000000000001157F                 mov     rsi, r13        ; src
.text:0000000000011582                 mov     rdi, rax        ; dest
.text:0000000000011585                 call    _memcpy
.text:000000000001158A                 mov     rsi, [rbp+var_A8]
.text:0000000000011591                 lea     rdi, [r15+18h]
.text:0000000000011595                 call    re_node_set_init_copy
.text:000000000001159A                 test    eax, eax
.text:000000000001159C                 jz      loc_112AC
.text:00000000000115A2
.text:00000000000115A2 loc_115A2:                              ; CODE XREF: set_regs+4BA↑j
.text:00000000000115A2                 mov     rdi, [rbp+ptr]  ; ptr
.text:00000000000115A6                 call    _free
.text:00000000000115AB                 cmp     [rbp+var_C9], 0
.text:00000000000115B2                 jnz     loc_1194B
.text:00000000000115B8
.text:00000000000115B8 loc_115B8:                              ; CODE XREF: set_regs+796↓j
.text:00000000000115B8                                         ; set_regs+885↓j
.text:00000000000115B8                 mov     rdi, [rbp+var_88]
.text:00000000000115BF                 call    free_fail_stack_return_part_24
.text:00000000000115C4                 mov     eax, 0Ch
.text:00000000000115C9                 jmp     loc_117D9
.text:00000000000115C9 ; ---------------------------------------------------------------------------
.text:00000000000115CE                 align 10h
.text:00000000000115D0
.text:00000000000115D0 loc_115D0:                              ; CODE XREF: set_regs+136↑j
.text:00000000000115D0                 cmp     [rbp+var_88], 0
.text:00000000000115D8                 jz      loc_1190C
.text:00000000000115DE                 mov     rcx, [rbp+var_98]
.text:00000000000115E5                 test    rcx, rcx
.text:00000000000115E8                 jz      short loc_1160A
.text:00000000000115EA                 mov     rax, r13
.text:00000000000115ED                 xor     edx, edx
.text:00000000000115EF                 nop
.text:00000000000115F0
.text:00000000000115F0 loc_115F0:                              ; CODE XREF: set_regs+548↓j
.text:00000000000115F0                 cmp     qword ptr [rax], 0
.text:00000000000115F4                 js      short loc_115FD
.text:00000000000115F6                 cmp     qword ptr [rax+8], 0FFFFFFFFFFFFFFFFh
.text:00000000000115FB                 jz      short loc_11650
.text:00000000000115FD
.text:00000000000115FD loc_115FD:                              ; CODE XREF: set_regs+534↑j
.text:00000000000115FD                 add     rdx, 1
.text:0000000000011601                 add     rax, 10h
.text:0000000000011605                 cmp     rcx, rdx
.text:0000000000011608                 jnz     short loc_115F0
.text:000000000001160A
.text:000000000001160A loc_1160A:                              ; CODE XREF: set_regs+528↑j
.text:000000000001160A                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000001160E                 call    _free
.text:0000000000011613                 cmp     [rbp+var_C9], 0
.text:000000000001161A                 jnz     loc_11994
.text:0000000000011620
.text:0000000000011620 loc_11620:                              ; CODE XREF: set_regs+8E0↓j
.text:0000000000011620                 mov     rdi, [rbp+var_88]
.text:0000000000011627                 call    free_fail_stack_return_part_24
.text:000000000001162C                 xor     eax, eax
.text:000000000001162E                 jmp     loc_117D9
.text:000000000001162E ; ---------------------------------------------------------------------------
.text:0000000000011633                 align 8
.text:0000000000011638
.text:0000000000011638 loc_11638:                              ; CODE XREF: set_regs+3C3↑j
.text:0000000000011638                 test    rcx, rcx
.text:000000000001163B                 jz      loc_116F0
.text:0000000000011641
.text:0000000000011641 loc_11641:                              ; CODE XREF: set_regs+383↑j
.text:0000000000011641                 mov     r15, [rbp+var_78]
.text:0000000000011645                 jmp     loc_114E5
.text:0000000000011645 ; ---------------------------------------------------------------------------
.text:000000000001164A                 align 10h
.text:0000000000011650
.text:0000000000011650 loc_11650:                              ; CODE XREF: set_regs+53B↑j
.text:0000000000011650                 mov     rdi, [rbp+var_88]
.text:0000000000011657                 mov     r9, [rbp+var_A8]
.text:000000000001165E                 mov     r8, r13
.text:0000000000011661                 mov     rcx, [rbp+var_98]
.text:0000000000011668                 mov     rdx, [rbp+var_B0]
.text:000000000001166F                 lea     rsi, [rdi+10h]
.text:0000000000011673                 call    pop_fail_stack_isra_25
.text:0000000000011678                 mov     r9, rax
.text:000000000001167B                 mov     rbx, rax
.text:000000000001167E                 mov     r15, rax
.text:0000000000011681                 shl     r9, 4
.text:0000000000011685                 jmp     loc_111FC
.text:000000000001168A ; ---------------------------------------------------------------------------
.text:000000000001168A
.text:000000000001168A loc_1168A:                              ; CODE XREF: set_regs+1EF↑j
.text:000000000001168A                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000001168E                 jz      loc_11838
.text:0000000000011694                 nop     dword ptr [rax+00h]
.text:0000000000011698
.text:0000000000011698 loc_11698:                              ; CODE XREF: set_regs+188↑j
.text:0000000000011698                                         ; set_regs+2A8↑j
.text:0000000000011698                 cmp     [rbp+var_88], 0
.text:00000000000116A0                 jz      loc_1195C
.text:00000000000116A6
.text:00000000000116A6 loc_116A6:                              ; CODE XREF: set_regs+1B0↑j
.text:00000000000116A6                                         ; set_regs+1C5↑j ...
.text:00000000000116A6                 mov     rdi, [rbp+var_88]
.text:00000000000116AD                 mov     rcx, [rbp+var_98]
.text:00000000000116B4                 lea     rdx, [rbp+var_78]
.text:00000000000116B8                 mov     r9, [rbp+var_A8]
.text:00000000000116BF                 mov     r8, r13
.text:00000000000116C2                 lea     rsi, [rdi+10h]
.text:00000000000116C6                 call    pop_fail_stack_isra_25
.text:00000000000116CB                 mov     rcx, [rbp+var_78]
.text:00000000000116CF                 mov     rbx, rax
.text:00000000000116D2                 jmp     loc_111CB
.text:00000000000116D2 ; ---------------------------------------------------------------------------
.text:00000000000116D7                 align 20h
.text:00000000000116E0
.text:00000000000116E0 loc_116E0:                              ; CODE XREF: set_regs+460↑j
.text:00000000000116E0                 mov     rbx, r14
.text:00000000000116E3                 jmp     loc_112AC
.text:00000000000116E3 ; ---------------------------------------------------------------------------
.text:00000000000116E8                 align 10h
.text:00000000000116F0
.text:00000000000116F0 loc_116F0:                              ; CODE XREF: set_regs+3E0↑j
.text:00000000000116F0                                         ; set_regs+57B↑j
.text:00000000000116F0                 mov     rdi, [rbp+var_A8]
.text:00000000000116F7                 mov     rsi, rbx
.text:00000000000116FA                 mov     [rbp+var_A0], r9
.text:0000000000011701                 call    re_node_set_insert
.text:0000000000011706                 test    al, al
.text:0000000000011708                 jz      loc_11838
.text:000000000001170E                 mov     rdx, [r14+28h]
.text:0000000000011712                 lea     rax, [rbx+rbx*2]
.text:0000000000011716                 mov     rcx, [rbp+var_78]
.text:000000000001171A                 lea     rax, [rdx+rax*8]
.text:000000000001171E                 mov     [rbp-0D8h], rcx
.text:0000000000011725                 mov     rax, [rax+10h]
.text:0000000000011729                 mov     rbx, [rax]
.text:000000000001172C                 mov     rax, [r12+0B8h]
.text:0000000000011734                 mov     rax, [rax+rcx*8]
.text:0000000000011738                 mov     rdx, rbx
.text:000000000001173B                 mov     rdi, [rax+10h]
.text:000000000001173F                 lea     rsi, [rax+18h]
.text:0000000000011743                 call    re_node_set_contains_isra_3
.text:0000000000011748                 test    rax, rax
.text:000000000001174B                 jnz     loc_112AC
.text:0000000000011751                 mov     r9, [rbp+var_A0]
.text:0000000000011758                 mov     rsi, [r14]
.text:000000000001175B                 mov     rcx, [rbp-0D8h]
.text:0000000000011762                 add     rsi, r9
.text:0000000000011765                 jmp     loc_1122D
.text:0000000000011765 ; ---------------------------------------------------------------------------
.text:000000000001176A                 align 10h
.text:0000000000011770
.text:0000000000011770 loc_11770:                              ; CODE XREF: set_regs+330↑j
.text:0000000000011770                 mov     rdx, [rbp+n]    ; n
.text:0000000000011777                 mov     rdi, [rbp+dest] ; dest
.text:000000000001177E                 mov     rsi, r13        ; src
.text:0000000000011781                 mov     [rax+8], rcx
.text:0000000000011785                 mov     [rbp-0D8h], r9
.text:000000000001178C                 mov     [rbp+var_A0], rcx
.text:0000000000011793                 call    _memcpy
.text:0000000000011798                 mov     rax, [r13+8]
.text:000000000001179C                 mov     rcx, [rbp+var_A0]
.text:00000000000117A3                 mov     r9, [rbp-0D8h]
.text:00000000000117AA                 jmp     loc_111E9
.text:00000000000117AA ; ---------------------------------------------------------------------------
.text:00000000000117AF                 align 10h
.text:00000000000117B0
.text:00000000000117B0 loc_117B0:                              ; CODE XREF: set_regs+200↑j
.text:00000000000117B0                 mov     rdi, [rbp+ptr]  ; ptr
.text:00000000000117B4                 call    _free
.text:00000000000117B9                 cmp     [rbp+var_C9], 0
.text:00000000000117C0                 jnz     loc_1189C
.text:00000000000117C6                 mov     rdi, [rbp+var_88]
.text:00000000000117CD                 test    rdi, rdi
.text:00000000000117D0                 jz      short loc_117D7
.text:00000000000117D2
.text:00000000000117D2 loc_117D2:                              ; CODE XREF: set_regs+7F2↓j
.text:00000000000117D2                 call    free_fail_stack_return_part_24
.text:00000000000117D7
.text:00000000000117D7 loc_117D7:                              ; CODE XREF: set_regs+710↑j
.text:00000000000117D7                                         ; set_regs+7F8↓j ...
.text:00000000000117D7                 xor     eax, eax
.text:00000000000117D9
.text:00000000000117D9 loc_117D9:                              ; CODE XREF: set_regs+509↑j
.text:00000000000117D9                                         ; set_regs+56E↑j ...
.text:00000000000117D9                 mov     rbx, [rbp+var_38]
.text:00000000000117DD                 xor     rbx, fs:28h
.text:00000000000117E6                 jnz     loc_119A5
.text:00000000000117EC                 lea     rsp, [rbp-28h]
.text:00000000000117F0                 pop     rbx
.text:00000000000117F1                 pop     r12
.text:00000000000117F3                 pop     r13
.text:00000000000117F5                 pop     r14
.text:00000000000117F7                 pop     r15
.text:00000000000117F9                 pop     rbp
.text:00000000000117FA                 retn
.text:00000000000117FB ; ---------------------------------------------------------------------------
.text:00000000000117FB
.text:00000000000117FB loc_117FB:                              ; CODE XREF: set_regs+348↑j
.text:00000000000117FB                 mov     rdx, [rbp+n]    ; n
.text:0000000000011802                 mov     rsi, rdi        ; src
.text:0000000000011805                 mov     rdi, r13        ; dest
.text:0000000000011808                 mov     [rbp-0D8h], rcx
.text:000000000001180F                 mov     [rbp+var_A0], r9
.text:0000000000011816                 call    _memcpy
.text:000000000001181B                 mov     rax, [r13+8]
.text:000000000001181F                 mov     r9, [rbp+var_A0]
.text:0000000000011826                 mov     rcx, [rbp-0D8h]
.text:000000000001182D                 jmp     loc_111E9
.text:000000000001182D ; ---------------------------------------------------------------------------
.text:0000000000011832                 align 8
.text:0000000000011838
.text:0000000000011838 loc_11838:                              ; CODE XREF: set_regs+29B↑j
.text:0000000000011838                                         ; set_regs+5CE↑j ...
.text:0000000000011838                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000001183C                 call    _free
.text:0000000000011841                 cmp     [rbp+var_C9], 0
.text:0000000000011848                 jnz     loc_1194B
.text:000000000001184E
.text:000000000001184E loc_1184E:                              ; CODE XREF: set_regs+897↓j
.text:000000000001184E                 cmp     [rbp+var_88], 0
.text:0000000000011856                 jnz     loc_115B8
.text:000000000001185C
.text:000000000001185C loc_1185C:                              ; CODE XREF: set_regs+77↑j
.text:000000000001185C                                         ; set_regs+7D3↓j ...
.text:000000000001185C                 mov     eax, 0Ch
.text:0000000000011861                 jmp     loc_117D9
.text:0000000000011866 ; ---------------------------------------------------------------------------
.text:0000000000011866
.text:0000000000011866 loc_11866:                              ; CODE XREF: set_regs+B3↑j
.text:0000000000011866                 mov     rdi, [rbp+n]    ; size
.text:000000000001186D                 call    _malloc
.text:0000000000011872                 test    rax, rax
.text:0000000000011875                 mov     [rbp+dest], rax
.text:000000000001187C                 mov     [rbp+var_C9], 1
.text:0000000000011883                 jnz     loc_11197
.text:0000000000011889                 mov     rdi, [rbp+var_88]
.text:0000000000011890                 test    rdi, rdi
.text:0000000000011893                 jz      short loc_1185C
.text:0000000000011895                 call    free_fail_stack_return_part_24
.text:000000000001189A                 jmp     short loc_1185C
.text:000000000001189C ; ---------------------------------------------------------------------------
.text:000000000001189C
.text:000000000001189C loc_1189C:                              ; CODE XREF: set_regs+700↑j
.text:000000000001189C                 mov     rdi, [rbp+dest] ; ptr
.text:00000000000118A3                 call    _free
.text:00000000000118A8                 mov     rdi, [rbp+var_88]
.text:00000000000118AF                 test    rdi, rdi
.text:00000000000118B2                 jnz     loc_117D2
.text:00000000000118B8                 jmp     loc_117D7
.text:00000000000118BD ; ---------------------------------------------------------------------------
.text:00000000000118BD
.text:00000000000118BD loc_118BD:                              ; CODE XREF: set_regs+55↑j
.text:00000000000118BD                 mov     [rbp+var_88], 0
.text:00000000000118C8                 jmp     loc_1113D
.text:00000000000118CD ; ---------------------------------------------------------------------------
.text:00000000000118CD
.text:00000000000118CD loc_118CD:                              ; CODE XREF: set_regs+488↑j
.text:00000000000118CD                 lea     rsi, [rax+rax*2]
.text:00000000000118D1                 mov     rax, [rbp+var_88]
.text:00000000000118D8                 mov     [rbp+var_A0], rdx
.text:00000000000118DF                 shl     rsi, 5          ; size
.text:00000000000118E3                 mov     rdi, [rax+10h]  ; ptr
.text:00000000000118E7                 call    _realloc
.text:00000000000118EC                 test    rax, rax
.text:00000000000118EF                 jz      short loc_11935
.text:00000000000118F1                 mov     rcx, [rbp+var_88]
.text:00000000000118F8                 mov     rdx, [rbp+var_A0]
.text:00000000000118FF                 shl     qword ptr [rcx+8], 1
.text:0000000000011903                 mov     [rcx+10h], rax
.text:0000000000011907                 jmp     loc_11552
.text:000000000001190C ; ---------------------------------------------------------------------------
.text:000000000001190C
.text:000000000001190C loc_1190C:                              ; CODE XREF: set_regs+518↑j
.text:000000000001190C                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000011910                 call    _free
.text:0000000000011915                 cmp     [rbp+var_C9], 0
.text:000000000001191C                 jz      loc_117D7
.text:0000000000011922                 mov     rdi, [rbp+dest] ; ptr
.text:0000000000011929                 call    _free
.text:000000000001192E                 xor     eax, eax
.text:0000000000011930                 jmp     loc_117D9
.text:0000000000011935 ; ---------------------------------------------------------------------------
.text:0000000000011935
.text:0000000000011935 loc_11935:                              ; CODE XREF: set_regs+82F↑j
.text:0000000000011935                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000011939                 call    _free
.text:000000000001193E                 cmp     [rbp+var_C9], 0
.text:0000000000011945                 jz      loc_115B8
.text:000000000001194B
.text:000000000001194B loc_1194B:                              ; CODE XREF: set_regs+4F2↑j
.text:000000000001194B                                         ; set_regs+788↑j
.text:000000000001194B                 mov     rdi, [rbp+dest] ; ptr
.text:0000000000011952                 call    _free
.text:0000000000011957                 jmp     loc_1184E
.text:000000000001195C ; ---------------------------------------------------------------------------
.text:000000000001195C
.text:000000000001195C loc_1195C:                              ; CODE XREF: set_regs+5E0↑j
.text:000000000001195C                 mov     rdi, [rbp+ptr]  ; ptr
.text:0000000000011960                 call    _free
.text:0000000000011965                 cmp     [rbp+var_C9], 0
.text:000000000001196C                 mov     eax, 1
.text:0000000000011971                 jz      loc_117D9
.text:0000000000011977                 mov     rdi, [rbp+dest] ; ptr
.text:000000000001197E                 mov     dword ptr [rbp+var_88], eax
.text:0000000000011984                 call    _free
.text:0000000000011989                 mov     eax, dword ptr [rbp+var_88]
.text:000000000001198F                 jmp     loc_117D9
.text:0000000000011994 ; ---------------------------------------------------------------------------
.text:0000000000011994
.text:0000000000011994 loc_11994:                              ; CODE XREF: set_regs+55A↑j
.text:0000000000011994                 mov     rdi, [rbp+dest] ; ptr
.text:000000000001199B                 call    _free
.text:00000000000119A0                 jmp     loc_11620
.text:00000000000119A5 ; ---------------------------------------------------------------------------
.text:00000000000119A5
.text:00000000000119A5 loc_119A5:                              ; CODE XREF: set_regs+726↑j
.text:00000000000119A5                 call    ___stack_chk_fail
.text:00000000000119A5 ; } // starts at 110C0
.text:00000000000119A5 set_regs        endp
.text:00000000000119A5
.text:00000000000119A5 ; ---------------------------------------------------------------------------
.text:00000000000119AA                 align 10h
.text:00000000000119B0
.text:00000000000119B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000119B0
.text:00000000000119B0
.text:00000000000119B0 get_subexp_sub_isra_32 proc near        ; CODE XREF: transit_state_bkref_isra_34+2C6↓p
.text:00000000000119B0                                         ; transit_state_bkref_isra_34+6FD↓p
.text:00000000000119B0
.text:00000000000119B0 var_40          = qword ptr -40h
.text:00000000000119B0
.text:00000000000119B0 ; __unwind {
.text:00000000000119B0                 push    r15
.text:00000000000119B2                 push    r14
.text:00000000000119B4                 mov     r14, rcx
.text:00000000000119B7                 push    r13
.text:00000000000119B9                 push    r12
.text:00000000000119BB                 mov     r13, rsi
.text:00000000000119BE                 push    rbp
.text:00000000000119BF                 push    rbx
.text:00000000000119C0                 lea     rsi, [rdx+10h]
.text:00000000000119C4                 mov     rbp, rdx
.text:00000000000119C7                 mov     r9, r8
.text:00000000000119CA                 mov     r12, r8
.text:00000000000119CD                 sub     rsp, 20h
.text:00000000000119D1                 mov     rcx, [rdx+8]
.text:00000000000119D5                 mov     r8, r14
.text:00000000000119D8                 push    8
.text:00000000000119DA                 mov     rdx, [rdx]
.text:00000000000119DD                 mov     rbx, rdi
.text:00000000000119E0                 call    check_arrival
.text:00000000000119E5                 test    eax, eax
.text:00000000000119E7                 pop     rdx
.text:00000000000119E8                 pop     rcx
.text:00000000000119E9                 jz      short loc_11A00
.text:00000000000119EB
.text:00000000000119EB loc_119EB:                              ; CODE XREF: get_subexp_sub_isra_32+191↓j
.text:00000000000119EB                 add     rsp, 18h
.text:00000000000119EF                 pop     rbx
.text:00000000000119F0                 pop     rbp
.text:00000000000119F1                 pop     r12
.text:00000000000119F3                 pop     r13
.text:00000000000119F5                 pop     r14
.text:00000000000119F7                 pop     r15
.text:00000000000119F9                 retn
.text:00000000000119F9 ; ---------------------------------------------------------------------------
.text:00000000000119FA                 align 20h
.text:0000000000011A00
.text:0000000000011A00 loc_11A00:                              ; CODE XREF: get_subexp_sub_isra_32+39↑j
.text:0000000000011A00                 mov     rax, [rbx+0C8h]
.text:0000000000011A07                 mov     rdx, [rbx+0D0h]
.text:0000000000011A0E                 mov     r15, [rbp+8]
.text:0000000000011A12                 mov     rcx, [r13+0]
.text:0000000000011A16                 mov     rdi, [rbx+0D8h] ; ptr
.text:0000000000011A1D                 cmp     rax, rdx
.text:0000000000011A20                 mov     rsi, r15
.text:0000000000011A23                 jge     loc_11AC0
.text:0000000000011A29
.text:0000000000011A29 loc_11A29:                              ; CODE XREF: get_subexp_sub_isra_32+17B↓j
.text:0000000000011A29                 lea     rdx, [rax+rax*4]
.text:0000000000011A2D                 shl     rdx, 3
.text:0000000000011A31                 test    rax, rax
.text:0000000000011A34                 jle     short loc_11A41
.text:0000000000011A36                 lea     r8, [rdi+rdx-28h]
.text:0000000000011A3B                 cmp     r12, [r8+8]
.text:0000000000011A3F                 jz      short loc_11AB0
.text:0000000000011A41
.text:0000000000011A41 loc_11A41:                              ; CODE XREF: get_subexp_sub_isra_32+84↑j
.text:0000000000011A41                                         ; get_subexp_sub_isra_32+105↓j
.text:0000000000011A41                 add     rdi, rdx
.text:0000000000011A44                 xor     edx, edx
.text:0000000000011A46                 cmp     r15, rcx
.text:0000000000011A49                 setz    dl
.text:0000000000011A4C                 add     rax, 1
.text:0000000000011A50                 mov     [rdi], r14
.text:0000000000011A53                 neg     edx
.text:0000000000011A55                 mov     [rdi+8], r12
.text:0000000000011A59                 mov     [rdi+10h], rcx
.text:0000000000011A5D                 mov     [rdi+22h], dx
.text:0000000000011A61                 mov     [rdi+18h], r15
.text:0000000000011A65                 mov     [rbx+0C8h], rax
.text:0000000000011A6C                 mov     byte ptr [rdi+20h], 0
.text:0000000000011A70                 mov     rax, r15
.text:0000000000011A73                 movsxd  rdx, dword ptr [rbx+0E0h]
.text:0000000000011A7A                 sub     rax, rcx
.text:0000000000011A7D                 cmp     rdx, rax
.text:0000000000011A80                 jge     short loc_11A8C
.text:0000000000011A82                 sub     r15d, ecx
.text:0000000000011A85                 mov     [rbx+0E0h], r15d
.text:0000000000011A8C
.text:0000000000011A8C loc_11A8C:                              ; CODE XREF: get_subexp_sub_isra_32+D0↑j
.text:0000000000011A8C                 add     rsi, r12
.text:0000000000011A8F                 sub     rsi, [r13+0]
.text:0000000000011A93                 add     rsp, 18h
.text:0000000000011A97                 mov     rdi, rbx
.text:0000000000011A9A                 pop     rbx
.text:0000000000011A9B                 pop     rbp
.text:0000000000011A9C                 pop     r12
.text:0000000000011A9E                 pop     r13
.text:0000000000011AA0                 pop     r14
.text:0000000000011AA2                 pop     r15
.text:0000000000011AA4                 jmp     clean_state_log_if_needed
.text:0000000000011AA4 ; ---------------------------------------------------------------------------
.text:0000000000011AA9                 align 10h
.text:0000000000011AB0
.text:0000000000011AB0 loc_11AB0:                              ; CODE XREF: get_subexp_sub_isra_32+8F↑j
.text:0000000000011AB0                 mov     byte ptr [r8+20h], 1
.text:0000000000011AB5                 jmp     short loc_11A41
.text:0000000000011AB5 ; ---------------------------------------------------------------------------
.text:0000000000011AB7                 align 20h
.text:0000000000011AC0
.text:0000000000011AC0 loc_11AC0:                              ; CODE XREF: get_subexp_sub_isra_32+73↑j
.text:0000000000011AC0                 lea     rsi, [rdx+rdx*4]
.text:0000000000011AC4                 mov     [rsp+48h+var_40], rcx
.text:0000000000011AC9                 shl     rsi, 4          ; size
.text:0000000000011ACD                 call    _realloc
.text:0000000000011AD2                 test    rax, rax
.text:0000000000011AD5                 mov     rcx, [rsp+48h+var_40]
.text:0000000000011ADA                 jz      short loc_11B30
.text:0000000000011ADC                 mov     rsi, [rbx+0C8h]
.text:0000000000011AE3                 mov     rdx, [rbx+0D0h]
.text:0000000000011AEA                 mov     [rbx+0D8h], rax
.text:0000000000011AF1                 mov     [rsp+48h+var_40], rcx
.text:0000000000011AF6                 lea     rsi, [rsi+rsi*4]
.text:0000000000011AFA                 lea     rdx, [rdx+rdx*4]
.text:0000000000011AFE                 lea     rdi, [rax+rsi*8] ; s
.text:0000000000011B02                 shl     rdx, 3          ; n
.text:0000000000011B06                 xor     esi, esi        ; c
.text:0000000000011B08                 call    _memset
.text:0000000000011B0D                 shl     qword ptr [rbx+0D0h], 1
.text:0000000000011B14                 mov     rax, [rbx+0C8h]
.text:0000000000011B1B                 mov     rdi, [rbx+0D8h]
.text:0000000000011B22                 mov     rsi, [rbp+8]
.text:0000000000011B26                 mov     rcx, [rsp+48h+var_40]
.text:0000000000011B2B                 jmp     loc_11A29
.text:0000000000011B30 ; ---------------------------------------------------------------------------
.text:0000000000011B30
.text:0000000000011B30 loc_11B30:                              ; CODE XREF: get_subexp_sub_isra_32+12A↑j
.text:0000000000011B30                 mov     rdi, [rbx+0D8h] ; ptr
.text:0000000000011B37                 call    _free
.text:0000000000011B3C                 mov     eax, 0Ch
.text:0000000000011B41                 jmp     loc_119EB
.text:0000000000011B41 ; } // starts at 119B0
.text:0000000000011B41 get_subexp_sub_isra_32 endp
.text:0000000000011B41
.text:0000000000011B41 ; ---------------------------------------------------------------------------
.text:0000000000011B46                 align 10h
.text:0000000000011B50
.text:0000000000011B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000011B50
.text:0000000000011B50
.text:0000000000011B50 transit_state_bkref_isra_34 proc near   ; CODE XREF: transit_state_bkref_isra_34+82A↓p
.text:0000000000011B50                                         ; merge_state_with_log+1C1↓p ...
.text:0000000000011B50
.text:0000000000011B50 var_E8          = qword ptr -0E8h
.text:0000000000011B50 var_E0          = qword ptr -0E0h
.text:0000000000011B50 var_D8          = qword ptr -0D8h
.text:0000000000011B50 var_D0          = qword ptr -0D0h
.text:0000000000011B50 var_C8          = qword ptr -0C8h
.text:0000000000011B50 var_C0          = qword ptr -0C0h
.text:0000000000011B50 var_B8          = qword ptr -0B8h
.text:0000000000011B50 var_B0          = qword ptr -0B0h
.text:0000000000011B50 var_A8          = qword ptr -0A8h
.text:0000000000011B50 var_A0          = qword ptr -0A0h
.text:0000000000011B50 var_98          = qword ptr -98h
.text:0000000000011B50 var_90          = qword ptr -90h
.text:0000000000011B50 var_88          = qword ptr -88h
.text:0000000000011B50 var_80          = qword ptr -80h
.text:0000000000011B50 var_78          = qword ptr -78h
.text:0000000000011B50 var_70          = qword ptr -70h
.text:0000000000011B50 var_5C          = byte ptr -5Ch
.text:0000000000011B50 var_58          = byte ptr -58h
.text:0000000000011B50 ptr             = qword ptr -48h
.text:0000000000011B50 var_40          = qword ptr -40h
.text:0000000000011B50
.text:0000000000011B50 ; __unwind {
.text:0000000000011B50                 push    r15
.text:0000000000011B52                 push    r14
.text:0000000000011B54                 push    r13
.text:0000000000011B56                 push    r12
.text:0000000000011B58                 push    rbp
.text:0000000000011B59                 push    rbx
.text:0000000000011B5A                 sub     rsp, 0B8h
.text:0000000000011B61                 mov     r15, [rdi+48h]
.text:0000000000011B65                 mov     rax, fs:28h
.text:0000000000011B6E                 mov     [rsp+0E8h+var_40], rax
.text:0000000000011B76                 xor     eax, eax
.text:0000000000011B78                 cmp     qword ptr [rsi], 0
.text:0000000000011B7C                 mov     rax, [rdi+98h]
.text:0000000000011B83                 mov     [rsp+0E8h+var_A0], rsi
.text:0000000000011B88                 mov     [rsp+0E8h+var_A8], rdx
.text:0000000000011B8D                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000011B92                 jle     loc_11EC0
.text:0000000000011B98                 lea     rax, ds:0[r15*8]
.text:0000000000011BA0                 mov     r14, rdi
.text:0000000000011BA3                 mov     [rsp+0E8h+var_E8], 0
.text:0000000000011BAB                 mov     [rsp+0E8h+var_E0], r15
.text:0000000000011BB0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000011BB5                 lea     rax, [rsp+0E8h+var_58]
.text:0000000000011BBD                 mov     [rsp+0E8h+var_80], rax
.text:0000000000011BC2                 lea     rax, [rsp+0E8h+var_5C]
.text:0000000000011BCA                 mov     [rsp+0E8h+var_70], rax
.text:0000000000011BCF                 jmp     short loc_11C17
.text:0000000000011BCF ; ---------------------------------------------------------------------------
.text:0000000000011BD1                 align 8
.text:0000000000011BD8
.text:0000000000011BD8 loc_11BD8:                              ; CODE XREF: transit_state_bkref_isra_34+11D↓j
.text:0000000000011BD8                 test    al, 1
.text:0000000000011BDA                 jz      short loc_11C00
.text:0000000000011BDC                 and     edx, 8
.text:0000000000011BDF                 jnz     short loc_11C00
.text:0000000000011BE1
.text:0000000000011BE1 loc_11BE1:                              ; CODE XREF: transit_state_bkref_isra_34+126↓j
.text:0000000000011BE1                                         ; transit_state_bkref_isra_34+12E↓j
.text:0000000000011BE1                 test    cl, 20h
.text:0000000000011BE4                 jz      short loc_11BEA
.text:0000000000011BE6                 test    al, 2
.text:0000000000011BE8                 jz      short loc_11C00
.text:0000000000011BEA
.text:0000000000011BEA loc_11BEA:                              ; CODE XREF: transit_state_bkref_isra_34+94↑j
.text:0000000000011BEA                 and     ecx, 80h
.text:0000000000011BF0                 jz      loc_11C90
.text:0000000000011BF6                 test    al, 8
.text:0000000000011BF8                 jnz     loc_11C90
.text:0000000000011BFE                 xchg    ax, ax
.text:0000000000011C00
.text:0000000000011C00 loc_11C00:                              ; CODE XREF: transit_state_bkref_isra_34+8A↑j
.text:0000000000011C00                                         ; transit_state_bkref_isra_34+8F↑j ...
.text:0000000000011C00                 mov     rdi, [rsp+0E8h+var_A0]
.text:0000000000011C05                 add     [rsp+0E8h+var_E8], 1
.text:0000000000011C0A                 mov     rax, [rsp+0E8h+var_E8]
.text:0000000000011C0E                 cmp     rax, [rdi]
.text:0000000000011C11                 jge     loc_11EC0
.text:0000000000011C17
.text:0000000000011C17 loc_11C17:                              ; CODE XREF: transit_state_bkref_isra_34+7F↑j
.text:0000000000011C17                 mov     rax, [rsp+0E8h+var_A8]
.text:0000000000011C1C                 mov     rdi, [rsp+0E8h+var_E8]
.text:0000000000011C20                 mov     rax, [rax]
.text:0000000000011C23                 mov     r13, [rax+rdi*8]
.text:0000000000011C27                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000011C2C                 mov     rax, [rdi]
.text:0000000000011C2F                 mov     rbx, r13
.text:0000000000011C32                 shl     rbx, 4
.text:0000000000011C36                 add     rax, rbx
.text:0000000000011C39                 cmp     byte ptr [rax+8], 4
.text:0000000000011C3D                 jnz     short loc_11C00
.text:0000000000011C3F                 mov     ebp, [rax+8]
.text:0000000000011C42                 test    ebp, 3FF00h
.text:0000000000011C48                 jz      short loc_11C90
.text:0000000000011C4A                 mov     edx, [r14+0A0h]
.text:0000000000011C51                 mov     rsi, [rsp+0E8h+var_E0]
.text:0000000000011C56                 mov     rdi, r14
.text:0000000000011C59                 call    re_string_context_at
.text:0000000000011C5E                 mov     edx, ebp
.text:0000000000011C60                 shr     edx, 8
.text:0000000000011C63                 mov     ecx, edx
.text:0000000000011C65                 and     cx, 3FFh
.text:0000000000011C6A                 test    dl, 4
.text:0000000000011C6D                 jnz     loc_11BD8
.text:0000000000011C73                 and     edx, 8
.text:0000000000011C76                 jz      loc_11BE1
.text:0000000000011C7C                 test    al, 1
.text:0000000000011C7E                 jz      loc_11BE1
.text:0000000000011C84                 jmp     loc_11C00
.text:0000000000011C84 ; ---------------------------------------------------------------------------
.text:0000000000011C89                 align 10h
.text:0000000000011C90
.text:0000000000011C90 loc_11C90:                              ; CODE XREF: transit_state_bkref_isra_34+A0↑j
.text:0000000000011C90                                         ; transit_state_bkref_isra_34+A8↑j ...
.text:0000000000011C90                 mov     rdi, [r14+0C8h]
.text:0000000000011C97                 mov     rax, [r14+98h]
.text:0000000000011C9E                 xor     ecx, ecx
.text:0000000000011CA0                 mov     r10, [r14+8]
.text:0000000000011CA4                 mov     r9, [rsp+0E8h+var_E0]
.text:0000000000011CA9                 mov     [rsp+0E8h+var_78], rdi
.text:0000000000011CAE                 mov     [rsp+0E8h+var_98], rax
.text:0000000000011CB3
.text:0000000000011CB3 loc_11CB3:                              ; CODE XREF: transit_state_bkref_isra_34+367↓j
.text:0000000000011CB3                 cmp     rcx, rdi
.text:0000000000011CB6                 jge     short loc_11D0B
.text:0000000000011CB8                 lea     rax, [rcx+rdi]
.text:0000000000011CBC                 mov     r11, [r14+0D8h]
.text:0000000000011CC3                 mov     rsi, rax
.text:0000000000011CC6                 shr     rsi, 3Fh
.text:0000000000011CCA                 add     rsi, rax
.text:0000000000011CCD                 sar     rsi, 1
.text:0000000000011CD0                 lea     rax, [rsi+rsi*4]
.text:0000000000011CD4                 cmp     r9, [r11+rax*8+8]
.text:0000000000011CD9                 jle     short loc_11D06
.text:0000000000011CDB                 jmp     loc_11EA8
.text:0000000000011CE0 ; ---------------------------------------------------------------------------
.text:0000000000011CE0
.text:0000000000011CE0 loc_11CE0:                              ; CODE XREF: transit_state_bkref_isra_34+1B9↓j
.text:0000000000011CE0                 lea     rdx, [rsi+rcx]
.text:0000000000011CE4                 mov     rax, rdx
.text:0000000000011CE7                 shr     rax, 3Fh
.text:0000000000011CEB                 add     rax, rdx
.text:0000000000011CEE                 sar     rax, 1
.text:0000000000011CF1                 lea     rdx, [rax+rax*4]
.text:0000000000011CF5                 mov     r8, rax
.text:0000000000011CF8                 cmp     r9, [r11+rdx*8+8]
.text:0000000000011CFD                 jg      loc_11EB0
.text:0000000000011D03                 mov     rsi, rax
.text:0000000000011D06
.text:0000000000011D06 loc_11D06:                              ; CODE XREF: transit_state_bkref_isra_34+189↑j
.text:0000000000011D06                 cmp     rsi, rcx
.text:0000000000011D09                 jg      short loc_11CE0
.text:0000000000011D0B
.text:0000000000011D0B loc_11D0B:                              ; CODE XREF: transit_state_bkref_isra_34+166↑j
.text:0000000000011D0B                 cmp     [rsp+0E8h+var_78], rcx
.text:0000000000011D10                 jle     short loc_11D36
.text:0000000000011D12                 mov     rdx, [r14+0D8h]
.text:0000000000011D19                 lea     rax, [rcx+rcx*4]
.text:0000000000011D1D                 mov     rdi, [rsp+0E8h+var_E0]
.text:0000000000011D22                 lea     rax, [rdx+rax*8]
.text:0000000000011D26                 cmp     [rax+8], rdi
.text:0000000000011D2A                 jnz     short loc_11D36
.text:0000000000011D2C                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011D30                 jnz     loc_11F06
.text:0000000000011D36
.text:0000000000011D36 loc_11D36:                              ; CODE XREF: transit_state_bkref_isra_34+1C0↑j
.text:0000000000011D36                                         ; transit_state_bkref_isra_34+1DA↑j ...
.text:0000000000011D36                 mov     rax, [rsp+0E8h+var_98]
.text:0000000000011D3B                 cmp     qword ptr [r14+0E8h], 0
.text:0000000000011D43                 mov     rdx, [rax]
.text:0000000000011D46                 mov     rax, [rdx+rbx]
.text:0000000000011D4A                 mov     [rsp+0E8h+var_90], rax
.text:0000000000011D4F                 jle     loc_11F0B
.text:0000000000011D55                 mov     [rsp+0E8h+var_B8], r13
.text:0000000000011D5A                 mov     [rsp+0E8h+var_C0], 0
.text:0000000000011D63                 mov     r13, r10
.text:0000000000011D66
.text:0000000000011D66 loc_11D66:                              ; CODE XREF: transit_state_bkref_isra_34+259↓j
.text:0000000000011D66                 mov     rax, [r14+0F8h]
.text:0000000000011D6D                 mov     rbx, [rsp+0E8h+var_C0]
.text:0000000000011D72                 mov     rdi, [rsp+0E8h+var_90]
.text:0000000000011D77                 mov     rbx, [rax+rbx*8]
.text:0000000000011D7B                 mov     rax, [rbx+8]
.text:0000000000011D7F                 shl     rax, 4
.text:0000000000011D83                 cmp     rdi, [rdx+rax]
.text:0000000000011D87                 jz      short loc_11DB0
.text:0000000000011D89
.text:0000000000011D89 loc_11D89:                              ; CODE XREF: transit_state_bkref_isra_34+5A7↓j
.text:0000000000011D89                                         ; transit_state_bkref_isra_34+725↓j ...
.text:0000000000011D89                 add     [rsp+0E8h+var_C0], 1
.text:0000000000011D8F                 mov     rax, [rsp+0E8h+var_C0]
.text:0000000000011D94                 cmp     rax, [r14+0E8h]
.text:0000000000011D9B                 jge     loc_12411
.text:0000000000011DA1                 mov     rax, [rsp+0E8h+var_98]
.text:0000000000011DA6                 mov     rdx, [rax]
.text:0000000000011DA9                 jmp     short loc_11D66
.text:0000000000011DA9 ; ---------------------------------------------------------------------------
.text:0000000000011DAB                 align 10h
.text:0000000000011DB0
.text:0000000000011DB0 loc_11DB0:                              ; CODE XREF: transit_state_bkref_isra_34+237↑j
.text:0000000000011DB0                 cmp     qword ptr [rbx+20h], 0
.text:0000000000011DB5                 mov     r11, [rbx]
.text:0000000000011DB8                 jle     loc_12422
.text:0000000000011DBE                 mov     rcx, [rsp+0E8h+var_E0]
.text:0000000000011DC3                 mov     r8, r13
.text:0000000000011DC6                 xor     ebp, ebp
.text:0000000000011DC8                 mov     r13, rbx
.text:0000000000011DCB                 mov     rbx, rcx
.text:0000000000011DCE                 jmp     short loc_11E3C
.text:0000000000011DD0 ; ---------------------------------------------------------------------------
.text:0000000000011DD0
.text:0000000000011DD0 loc_11DD0:                              ; CODE XREF: transit_state_bkref_isra_34+30B↓j
.text:0000000000011DD0                                         ; transit_state_bkref_isra_34+34C↓j
.text:0000000000011DD0                 lea     rsi, [r8+r11]   ; s2
.text:0000000000011DD4                 lea     rdi, [r8+rbx]   ; s1
.text:0000000000011DD8                 mov     [rsp+0E8h+var_C8], r9
.text:0000000000011DDD                 mov     [rsp+0E8h+var_D0], r11
.text:0000000000011DE2                 mov     [rsp+0E8h+var_D8], r8
.text:0000000000011DE7                 call    _memcmp
.text:0000000000011DEC                 test    eax, eax
.text:0000000000011DEE                 mov     r8, [rsp+0E8h+var_D8]
.text:0000000000011DF3                 mov     r11, [rsp+0E8h+var_D0]
.text:0000000000011DF8                 mov     r9, [rsp+0E8h+var_C8]
.text:0000000000011DFD                 jnz     loc_122C8
.text:0000000000011E03
.text:0000000000011E03 loc_11E03:                              ; CODE XREF: transit_state_bkref_isra_34+305↓j
.text:0000000000011E03                 mov     r8, [rsp+0E8h+var_E0]
.text:0000000000011E08                 mov     rcx, [rsp+0E8h+var_B8]
.text:0000000000011E0D                 mov     rdx, r9
.text:0000000000011E10                 mov     rsi, r13
.text:0000000000011E13                 mov     rdi, r14
.text:0000000000011E16                 call    get_subexp_sub_isra_32
.text:0000000000011E1B                 cmp     eax, 1
.text:0000000000011E1E                 mov     r8, [r14+8]
.text:0000000000011E22                 ja      loc_11EC8
.text:0000000000011E28                 add     rbp, 1
.text:0000000000011E2C                 cmp     rbp, [r13+20h]
.text:0000000000011E30                 mov     r11, r15
.text:0000000000011E33                 mov     rbx, r12
.text:0000000000011E36                 jge     loc_120E8
.text:0000000000011E3C
.text:0000000000011E3C loc_11E3C:                              ; CODE XREF: transit_state_bkref_isra_34+27E↑j
.text:0000000000011E3C                 mov     rax, [r13+28h]
.text:0000000000011E40                 mov     r9, [rax+rbp*8]
.text:0000000000011E44                 mov     r15, [r9+8]
.text:0000000000011E48                 mov     rdx, r15
.text:0000000000011E4B                 sub     rdx, r11        ; n
.text:0000000000011E4E                 test    rdx, rdx
.text:0000000000011E51                 lea     r12, [rdx+rbx]
.text:0000000000011E55                 jle     short loc_11E03
.text:0000000000011E57                 cmp     [r14+30h], r12
.text:0000000000011E5B                 jge     loc_11DD0
.text:0000000000011E61                 cmp     [r14+58h], r12
.text:0000000000011E65                 mov     [rsp+0E8h+var_D0], rdx
.text:0000000000011E6A                 mov     [rsp+0E8h+var_D8], r9
.text:0000000000011E6F                 jl      loc_122C8
.text:0000000000011E75                 mov     rsi, r12
.text:0000000000011E78                 mov     rdi, r14
.text:0000000000011E7B                 mov     [rsp+0E8h+var_C8], r11
.text:0000000000011E80                 call    clean_state_log_if_needed
.text:0000000000011E85                 test    eax, eax
.text:0000000000011E87                 jnz     short loc_11EC8
.text:0000000000011E89                 mov     r8, [r14+8]
.text:0000000000011E8D                 mov     rdx, [rsp+0E8h+var_D0]
.text:0000000000011E92                 mov     r9, [rsp+0E8h+var_D8]
.text:0000000000011E97                 mov     r11, [rsp+0E8h+var_C8]
.text:0000000000011E9C                 jmp     loc_11DD0
.text:0000000000011E9C ; ---------------------------------------------------------------------------
.text:0000000000011EA1                 align 8
.text:0000000000011EA8
.text:0000000000011EA8 loc_11EA8:                              ; CODE XREF: transit_state_bkref_isra_34+18B↑j
.text:0000000000011EA8                 mov     r8, rsi
.text:0000000000011EAB                 mov     rsi, rdi
.text:0000000000011EAE                 xchg    ax, ax
.text:0000000000011EB0
.text:0000000000011EB0 loc_11EB0:                              ; CODE XREF: transit_state_bkref_isra_34+1AD↑j
.text:0000000000011EB0                 lea     rcx, [r8+1]
.text:0000000000011EB4                 mov     rdi, rsi
.text:0000000000011EB7                 jmp     loc_11CB3
.text:0000000000011EB7 ; ---------------------------------------------------------------------------
.text:0000000000011EBC                 align 20h
.text:0000000000011EC0
.text:0000000000011EC0 loc_11EC0:                              ; CODE XREF: transit_state_bkref_isra_34+42↑j
.text:0000000000011EC0                                         ; transit_state_bkref_isra_34+C1↑j
.text:0000000000011EC0                 xor     eax, eax
.text:0000000000011EC2                 nop     word ptr [rax+rax+00h]
.text:0000000000011EC8
.text:0000000000011EC8 loc_11EC8:                              ; CODE XREF: transit_state_bkref_isra_34+2D2↑j
.text:0000000000011EC8                                         ; transit_state_bkref_isra_34+337↑j ...
.text:0000000000011EC8                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000011ED0                 xor     rbx, fs:28h
.text:0000000000011ED9                 jnz     loc_1242C
.text:0000000000011EDF                 add     rsp, 0B8h
.text:0000000000011EE6                 pop     rbx
.text:0000000000011EE7                 pop     rbp
.text:0000000000011EE8                 pop     r12
.text:0000000000011EEA                 pop     r13
.text:0000000000011EEC                 pop     r14
.text:0000000000011EEE                 pop     r15
.text:0000000000011EF0                 retn
.text:0000000000011EF0 ; ---------------------------------------------------------------------------
.text:0000000000011EF1                 align 8
.text:0000000000011EF8
.text:0000000000011EF8 loc_11EF8:                              ; CODE XREF: transit_state_bkref_isra_34+3B9↓j
.text:0000000000011EF8                 add     rax, 28h ; '('
.text:0000000000011EFC                 cmp     byte ptr [rax-8], 0
.text:0000000000011F00                 jz      loc_11D36
.text:0000000000011F06
.text:0000000000011F06 loc_11F06:                              ; CODE XREF: transit_state_bkref_isra_34+1E0↑j
.text:0000000000011F06                 cmp     r13, [rax]
.text:0000000000011F09                 jnz     short loc_11EF8
.text:0000000000011F0B
.text:0000000000011F0B loc_11F0B:                              ; CODE XREF: transit_state_bkref_isra_34+1FF↑j
.text:0000000000011F0B                 mov     rax, [rsp+0E8h+var_78]
.text:0000000000011F10
.text:0000000000011F10 loc_11F10:                              ; CODE XREF: transit_state_bkref_isra_34+8CD↓j
.text:0000000000011F10                 cmp     [rsp+0E8h+var_78], rax
.text:0000000000011F15                 mov     dword ptr [rsp+0E8h+var_5C], 0
.text:0000000000011F20                 jge     loc_11C00
.text:0000000000011F26                 lea     rax, ds:0[r13*8]
.text:0000000000011F2E                 mov     r12, [rsp+0E8h+var_78]
.text:0000000000011F33                 mov     rbp, [rsp+0E8h+var_B0]
.text:0000000000011F38                 mov     [rsp+0E8h+var_98], rax
.text:0000000000011F3D                 lea     rax, [r13+r13*2+0]
.text:0000000000011F42                 lea     r8, [r12+r12*4]
.text:0000000000011F46                 shl     rax, 3
.text:0000000000011F4A                 mov     [rsp+0E8h+var_90], rax
.text:0000000000011F4F                 lea     r15, ds:0[r8*8]
.text:0000000000011F57                 jmp     loc_1208D
.text:0000000000011F57 ; ---------------------------------------------------------------------------
.text:0000000000011F5C                 align 20h
.text:0000000000011F60
.text:0000000000011F60 loc_11F60:                              ; CODE XREF: transit_state_bkref_isra_34+56E↓j
.text:0000000000011F60                 mov     rcx, [rbp+28h]
.text:0000000000011F64                 mov     rdi, [rsp+0E8h+var_90]
.text:0000000000011F69                 mov     rcx, [rcx+rdi+10h]
.text:0000000000011F6E                 mov     rcx, [rcx]
.text:0000000000011F71                 lea     rcx, [rcx+rcx*2]
.text:0000000000011F75                 lea     rcx, [rdx+rcx*8]
.text:0000000000011F79                 mov     [rsp+0E8h+var_D0], rcx
.text:0000000000011F7E
.text:0000000000011F7E loc_11F7E:                              ; CODE XREF: transit_state_bkref_isra_34+58E↓j
.text:0000000000011F7E                 add     rbx, [rsp+0E8h+var_E0]
.text:0000000000011F83                 mov     edx, [r14+0A0h]
.text:0000000000011F8A                 mov     rdi, r14
.text:0000000000011F8D                 sub     rbx, rax
.text:0000000000011F90                 lea     rsi, [rbx-1]
.text:0000000000011F94                 call    re_string_context_at
.text:0000000000011F99                 mov     rsi, [rsp+0E8h+var_88]
.text:0000000000011F9E                 mov     ecx, eax
.text:0000000000011FA0                 mov     rax, [r14+0B8h]
.text:0000000000011FA7                 lea     r10, ds:0[rbx*8]
.text:0000000000011FAF                 mov     [rsp+0E8h+var_D8], 0
.text:0000000000011FB8                 lea     r11, [rax+r10]
.text:0000000000011FBC                 mov     rax, [rax+rsi]
.text:0000000000011FC0                 mov     rdx, [r11]
.text:0000000000011FC3                 test    rax, rax
.text:0000000000011FC6                 jz      short loc_11FD1
.text:0000000000011FC8                 mov     rax, [rax+10h]
.text:0000000000011FCC                 mov     [rsp+0E8h+var_D8], rax
.text:0000000000011FD1
.text:0000000000011FD1 loc_11FD1:                              ; CODE XREF: transit_state_bkref_isra_34+476↑j
.text:0000000000011FD1                 test    rdx, rdx
.text:0000000000011FD4                 jz      loc_122F0
.text:0000000000011FDA                 mov     rsi, [rdx+50h]
.text:0000000000011FDE                 mov     rdi, [rsp+0E8h+var_80]
.text:0000000000011FE3                 mov     rdx, [rsp+0E8h+var_D0]
.text:0000000000011FE8                 mov     [rsp+0E8h+var_B8], r10
.text:0000000000011FED                 mov     dword ptr [rsp+0E8h+var_C0], ecx
.text:0000000000011FF1                 call    re_node_set_init_union
.text:0000000000011FF6                 test    eax, eax
.text:0000000000011FF8                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:0000000000011FFF                 mov     ecx, dword ptr [rsp+0E8h+var_C0]
.text:0000000000012003                 mov     r10, [rsp+0E8h+var_B8]
.text:0000000000012008                 jnz     loc_12398
.text:000000000001200E                 add     r10, [r14+0B8h]
.text:0000000000012015                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000001201A                 mov     rsi, rbp
.text:000000000001201D                 mov     rdi, [rsp+0E8h+var_70]
.text:0000000000012022                 mov     [rsp+0E8h+var_C0], r10
.text:0000000000012027                 call    re_acquire_state_context
.text:000000000001202C                 mov     r10, [rsp+0E8h+var_C0]
.text:0000000000012031                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:0000000000012039                 mov     [r10], rax
.text:000000000001203C                 call    _free
.text:0000000000012041                 mov     rdx, [r14+0B8h]
.text:0000000000012048                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000001204D                 jz      loc_12321
.text:0000000000012053
.text:0000000000012053 loc_12053:                              ; CODE XREF: transit_state_bkref_isra_34+7CB↓j
.text:0000000000012053                                         ; transit_state_bkref_isra_34+7DA↓j
.text:0000000000012053                 cmp     [rsp+0E8h+var_C8], 0
.text:0000000000012059                 jnz     short loc_12078
.text:000000000001205B                 mov     rax, [rsp+0E8h+var_88]
.text:0000000000012060                 mov     rbx, [rsp+0E8h+var_D8]
.text:0000000000012065                 mov     rax, [rdx+rax]
.text:0000000000012069                 cmp     [rax+10h], rbx
.text:000000000001206D                 jg      loc_12338
.text:0000000000012073                 nop     dword ptr [rax+rax+00h]
.text:0000000000012078
.text:0000000000012078 loc_12078:                              ; CODE XREF: transit_state_bkref_isra_34+509↑j
.text:0000000000012078                                         ; transit_state_bkref_isra_34+54A↓j ...
.text:0000000000012078                 add     r12, 1
.text:000000000001207C                 add     r15, 28h ; '('
.text:0000000000012080                 cmp     r12, [r14+0C8h]
.text:0000000000012087                 jge     loc_11C00
.text:000000000001208D
.text:000000000001208D loc_1208D:                              ; CODE XREF: transit_state_bkref_isra_34+407↑j
.text:000000000001208D                 mov     rax, [r14+0D8h]
.text:0000000000012094                 add     rax, r15
.text:0000000000012097                 cmp     r13, [rax]
.text:000000000001209A                 jnz     short loc_12078
.text:000000000001209C                 mov     rdi, [rsp+0E8h+var_E0]
.text:00000000000120A1                 cmp     rdi, [rax+8]
.text:00000000000120A5                 jnz     short loc_12078
.text:00000000000120A7                 mov     rbx, [rax+18h]
.text:00000000000120AB                 mov     rax, [rax+10h]
.text:00000000000120AF                 mov     rdx, [rbp+30h]
.text:00000000000120B3                 mov     rcx, rbx
.text:00000000000120B6                 sub     rcx, rax
.text:00000000000120B9                 mov     [rsp+0E8h+var_C8], rcx
.text:00000000000120BE                 jz      loc_11F60
.text:00000000000120C4                 mov     rcx, [rbp+18h]
.text:00000000000120C8                 mov     rdi, [rsp+0E8h+var_98]
.text:00000000000120CD                 mov     rcx, [rcx+rdi]
.text:00000000000120D1                 lea     rcx, [rcx+rcx*2]
.text:00000000000120D5                 lea     rcx, [rdx+rcx*8]
.text:00000000000120D9                 mov     [rsp+0E8h+var_D0], rcx
.text:00000000000120DE                 jmp     loc_11F7E
.text:00000000000120DE ; ---------------------------------------------------------------------------
.text:00000000000120E3                 align 8
.text:00000000000120E8
.text:00000000000120E8 loc_120E8:                              ; CODE XREF: transit_state_bkref_isra_34+2E6↑j
.text:00000000000120E8                 mov     rbx, r13
.text:00000000000120EB                 mov     r13, r8
.text:00000000000120EE
.text:00000000000120EE loc_120EE:                              ; CODE XREF: transit_state_bkref_isra_34+79A↓j
.text:00000000000120EE                 lea     r11, [r15+1]
.text:00000000000120F2
.text:00000000000120F2 loc_120F2:                              ; CODE XREF: transit_state_bkref_isra_34+791↓j
.text:00000000000120F2                                         ; transit_state_bkref_isra_34+8D7↓j
.text:00000000000120F2                 cmp     [rsp+0E8h+var_E0], r11
.text:00000000000120F7                 jl      loc_11D89
.text:00000000000120FD                 mov     rax, r12
.text:0000000000012100                 lea     r15, ds:0[r11*8]
.text:0000000000012108                 mov     r12, rbx
.text:000000000001210B                 mov     rbx, r11
.text:000000000001210E                 mov     r11, r13
.text:0000000000012111                 mov     r13, rax
.text:0000000000012114                 nop     dword ptr [rax+00h]
.text:0000000000012118
.text:0000000000012118 loc_12118:                              ; CODE XREF: transit_state_bkref_isra_34+71C↓j
.text:0000000000012118                 mov     rax, rbx
.text:000000000001211B                 sub     rax, [r12]
.text:000000000001211F                 test    rax, rax
.text:0000000000012122                 jle     short loc_12145
.text:0000000000012124                 cmp     [r14+30h], r13
.text:0000000000012128                 jle     loc_123B1
.text:000000000001212E
.text:000000000001212E loc_1212E:                              ; CODE XREF: transit_state_bkref_isra_34+883↓j
.text:000000000001212E                 movzx   ecx, byte ptr [r11+rbx-1]
.text:0000000000012134                 lea     rax, [r13+1]
.text:0000000000012138                 cmp     [r11+r13], cl
.text:000000000001213C                 jnz     loc_12272
.text:0000000000012142                 mov     r13, rax
.text:0000000000012145
.text:0000000000012145 loc_12145:                              ; CODE XREF: transit_state_bkref_isra_34+5D2↑j
.text:0000000000012145                 mov     rax, [r14+0B8h]
.text:000000000001214C                 mov     rax, [rax+r15]
.text:0000000000012150                 test    rax, rax
.text:0000000000012153                 jz      loc_1225F
.text:0000000000012159                 mov     rcx, [rax+10h]
.text:000000000001215D                 test    rcx, rcx
.text:0000000000012160                 jle     loc_1225F
.text:0000000000012166                 mov     rdi, [rax+18h]
.text:000000000001216A                 mov     rax, [rsp+0E8h+var_98]
.text:000000000001216F                 xor     edx, edx
.text:0000000000012171                 mov     r8, [rsp+0E8h+var_90]
.text:0000000000012176                 mov     rsi, [rax]
.text:0000000000012179                 jmp     short loc_1218D
.text:0000000000012179 ; ---------------------------------------------------------------------------
.text:000000000001217B                 align 20h
.text:0000000000012180
.text:0000000000012180 loc_12180:                              ; CODE XREF: transit_state_bkref_isra_34+64F↓j
.text:0000000000012180                                         ; transit_state_bkref_isra_34+654↓j
.text:0000000000012180                 add     rdx, 1
.text:0000000000012184                 cmp     rcx, rdx
.text:0000000000012187                 jz      loc_1225F
.text:000000000001218D
.text:000000000001218D loc_1218D:                              ; CODE XREF: transit_state_bkref_isra_34+629↑j
.text:000000000001218D                 mov     rbp, [rdi+rdx*8]
.text:0000000000012191                 mov     rax, rbp
.text:0000000000012194                 shl     rax, 4
.text:0000000000012198                 add     rax, rsi
.text:000000000001219B                 cmp     byte ptr [rax+8], 9
.text:000000000001219F                 jnz     short loc_12180
.text:00000000000121A1                 cmp     r8, [rax]
.text:00000000000121A4                 jnz     short loc_12180
.text:00000000000121A6                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000121AA                 jz      loc_1225F
.text:00000000000121B0                 mov     rsi, [r12+10h]
.text:00000000000121B5                 mov     rcx, [r12]
.text:00000000000121B9                 test    rsi, rsi
.text:00000000000121BC                 jz      loc_12280
.text:00000000000121C2
.text:00000000000121C2 loc_121C2:                              ; CODE XREF: transit_state_bkref_isra_34+763↓j
.text:00000000000121C2                 mov     [rsp+0E8h+var_D8], r11
.text:00000000000121C7                 mov     rdx, [r12+8]
.text:00000000000121CC                 sub     rsp, 8
.text:00000000000121D0                 push    9
.text:00000000000121D2                 mov     r9, rbx
.text:00000000000121D5                 mov     r8, rbp
.text:00000000000121D8                 mov     rdi, r14
.text:00000000000121DB                 call    check_arrival
.text:00000000000121E0                 pop     rdx
.text:00000000000121E1                 cmp     eax, 1
.text:00000000000121E4                 pop     rcx
.text:00000000000121E5                 mov     r11, [rsp+0E8h+var_D8]
.text:00000000000121EA                 jz      short loc_1225F
.text:00000000000121EC                 test    eax, eax
.text:00000000000121EE                 jnz     loc_11EC8
.text:00000000000121F4                 mov     rax, [r12+20h]
.text:00000000000121F9                 cmp     rax, [r12+18h]
.text:00000000000121FE                 jz      loc_123D8
.text:0000000000012204
.text:0000000000012204 loc_12204:                              ; CODE XREF: transit_state_bkref_isra_34+8BC↓j
.text:0000000000012204                 mov     esi, 28h ; '('  ; size
.text:0000000000012209                 mov     edi, 1          ; nmemb
.text:000000000001220E                 call    _calloc
.text:0000000000012213                 test    rax, rax
.text:0000000000012216                 jz      loc_122B9
.text:000000000001221C                 mov     rdx, [r12+20h]
.text:0000000000012221                 mov     rcx, [r12+28h]
.text:0000000000012226                 mov     rsi, r12
.text:0000000000012229                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000001222E                 mov     rdi, r14
.text:0000000000012231                 mov     [rcx+rdx*8], rax
.text:0000000000012235                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000001223A                 add     rdx, 1
.text:000000000001223E                 mov     [rax], rbp
.text:0000000000012241                 mov     [rax+8], rbx
.text:0000000000012245                 mov     [r12+20h], rdx
.text:000000000001224A                 mov     rdx, rax
.text:000000000001224D                 call    get_subexp_sub_isra_32
.text:0000000000012252                 cmp     eax, 1
.text:0000000000012255                 mov     r11, [r14+8]
.text:0000000000012259                 ja      loc_11EC8
.text:000000000001225F
.text:000000000001225F loc_1225F:                              ; CODE XREF: transit_state_bkref_isra_34+603↑j
.text:000000000001225F                                         ; transit_state_bkref_isra_34+610↑j ...
.text:000000000001225F                 add     rbx, 1
.text:0000000000012263                 add     r15, 8
.text:0000000000012267                 cmp     [rsp+0E8h+var_E0], rbx
.text:000000000001226C                 jge     loc_12118
.text:0000000000012272
.text:0000000000012272 loc_12272:                              ; CODE XREF: transit_state_bkref_isra_34+5EC↑j
.text:0000000000012272                                         ; transit_state_bkref_isra_34+865↓j
.text:0000000000012272                 mov     r13, r11
.text:0000000000012275                 jmp     loc_11D89
.text:0000000000012275 ; ---------------------------------------------------------------------------
.text:000000000001227A                 align 20h
.text:0000000000012280
.text:0000000000012280 loc_12280:                              ; CODE XREF: transit_state_bkref_isra_34+66C↑j
.text:0000000000012280                 mov     rsi, rbx
.text:0000000000012283                 mov     edi, 18h        ; nmemb
.text:0000000000012288                 mov     [rsp+0E8h+var_D0], r11
.text:000000000001228D                 sub     rsi, rcx
.text:0000000000012290                 mov     [rsp+0E8h+var_D8], rcx
.text:0000000000012295                 add     rsi, 1          ; size
.text:0000000000012299                 call    _calloc
.text:000000000001229E                 test    rax, rax
.text:00000000000122A1                 mov     rsi, rax
.text:00000000000122A4                 mov     [r12+10h], rax
.text:00000000000122A9                 mov     rcx, [rsp+0E8h+var_D8]
.text:00000000000122AE                 mov     r11, [rsp+0E8h+var_D0]
.text:00000000000122B3                 jnz     loc_121C2
.text:00000000000122B9
.text:00000000000122B9 loc_122B9:                              ; CODE XREF: transit_state_bkref_isra_34+6C6↑j
.text:00000000000122B9                                         ; transit_state_bkref_isra_34+8A7↓j
.text:00000000000122B9                 mov     eax, 0Ch
.text:00000000000122BE                 jmp     loc_11EC8
.text:00000000000122BE ; ---------------------------------------------------------------------------
.text:00000000000122C3                 align 8
.text:00000000000122C8
.text:00000000000122C8 loc_122C8:                              ; CODE XREF: transit_state_bkref_isra_34+2AD↑j
.text:00000000000122C8                                         ; transit_state_bkref_isra_34+31F↑j
.text:00000000000122C8                 mov     rcx, rbx
.text:00000000000122CB                 mov     rbx, r13
.text:00000000000122CE                 mov     r13, r8
.text:00000000000122D1                 cmp     [rbx+20h], rbp
.text:00000000000122D5                 jg      loc_11D89
.text:00000000000122DB                 test    rbp, rbp
.text:00000000000122DE                 mov     r12, rcx
.text:00000000000122E1                 jz      loc_120F2
.text:00000000000122E7                 mov     r15, r11
.text:00000000000122EA                 jmp     loc_120EE
.text:00000000000122EA ; ---------------------------------------------------------------------------
.text:00000000000122EF                 align 10h
.text:00000000000122F0
.text:00000000000122F0 loc_122F0:                              ; CODE XREF: transit_state_bkref_isra_34+484↑j
.text:00000000000122F0                 mov     rdx, [rsp+0E8h+var_D0]
.text:00000000000122F5                 mov     rdi, [rsp+0E8h+var_70]
.text:00000000000122FA                 mov     rsi, rbp
.text:00000000000122FD                 mov     [rsp+0E8h+var_C0], r11
.text:0000000000012302                 call    re_acquire_state_context
.text:0000000000012307                 mov     r11, [rsp+0E8h+var_C0]
.text:000000000001230C                 mov     rdx, [r14+0B8h]
.text:0000000000012313                 mov     [r11], rax
.text:0000000000012316                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000001231B                 jnz     loc_12053
.text:0000000000012321
.text:0000000000012321 loc_12321:                              ; CODE XREF: transit_state_bkref_isra_34+4FD↑j
.text:0000000000012321                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:0000000000012328                 test    eax, eax
.text:000000000001232A                 jz      loc_12053
.text:0000000000012330                 jmp     loc_11EC8
.text:0000000000012330 ; ---------------------------------------------------------------------------
.text:0000000000012335                 align 8
.text:0000000000012338
.text:0000000000012338 loc_12338:                              ; CODE XREF: transit_state_bkref_isra_34+51D↑j
.text:0000000000012338                 mov     rax, [rsp+0E8h+var_D0]
.text:000000000001233D                 mov     rcx, [rsp+0E8h+var_E0]
.text:0000000000012342                 mov     rdi, r14
.text:0000000000012345                 lea     r8, [rax+10h]
.text:0000000000012349                 lea     rbx, [rax+8]
.text:000000000001234D                 mov     rdx, r8
.text:0000000000012350                 mov     rsi, rbx
.text:0000000000012353                 mov     [rsp+0E8h+var_D8], r8
.text:0000000000012358                 call    check_subexp_matching_top_isra_18
.text:000000000001235D                 test    eax, eax
.text:000000000001235F                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:0000000000012366                 jnz     loc_11EC8
.text:000000000001236C                 mov     r8, [rsp+0E8h+var_D8]
.text:0000000000012371                 mov     rsi, rbx
.text:0000000000012374                 mov     rdi, r14
.text:0000000000012377                 mov     rdx, r8
.text:000000000001237A                 call    transit_state_bkref_isra_34
.text:000000000001237F                 test    eax, eax
.text:0000000000012381                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:0000000000012388                 jz      loc_12078
.text:000000000001238E                 jmp     loc_11EC8
.text:000000000001238E ; ---------------------------------------------------------------------------
.text:0000000000012393                 align 8
.text:0000000000012398
.text:0000000000012398 loc_12398:                              ; CODE XREF: transit_state_bkref_isra_34+4B8↑j
.text:0000000000012398                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:00000000000123A0                 call    _free
.text:00000000000123A5                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:00000000000123AC                 jmp     loc_11EC8
.text:00000000000123B1 ; ---------------------------------------------------------------------------
.text:00000000000123B1
.text:00000000000123B1 loc_123B1:                              ; CODE XREF: transit_state_bkref_isra_34+5D8↑j
.text:00000000000123B1                 cmp     [r14+58h], r13
.text:00000000000123B5                 jle     loc_12272
.text:00000000000123BB                 lea     esi, [r13+1]
.text:00000000000123BF                 mov     rdi, r14
.text:00000000000123C2                 call    extend_buffers
.text:00000000000123C7                 test    eax, eax
.text:00000000000123C9                 jnz     loc_11EC8
.text:00000000000123CF                 mov     r11, [r14+8]
.text:00000000000123D3                 jmp     loc_1212E
.text:00000000000123D8 ; ---------------------------------------------------------------------------
.text:00000000000123D8
.text:00000000000123D8 loc_123D8:                              ; CODE XREF: transit_state_bkref_isra_34+6AE↑j
.text:00000000000123D8                 lea     rdx, [rax+rax+1]
.text:00000000000123DD                 mov     rdi, [r12+28h]  ; ptr
.text:00000000000123E2                 lea     rsi, ds:0[rdx*8] ; size
.text:00000000000123EA                 mov     [rsp+0E8h+var_D8], rdx
.text:00000000000123EF                 call    _realloc
.text:00000000000123F4                 test    rax, rax
.text:00000000000123F7                 jz      loc_122B9
.text:00000000000123FD                 mov     rdx, [rsp+0E8h+var_D8]
.text:0000000000012402                 mov     [r12+28h], rax
.text:0000000000012407                 mov     [r12+18h], rdx
.text:000000000001240C                 jmp     loc_12204
.text:0000000000012411 ; ---------------------------------------------------------------------------
.text:0000000000012411
.text:0000000000012411 loc_12411:                              ; CODE XREF: transit_state_bkref_isra_34+24B↑j
.text:0000000000012411                 mov     r13, [rsp+0E8h+var_B8]
.text:0000000000012416                 mov     rax, [r14+0C8h]
.text:000000000001241D                 jmp     loc_11F10
.text:0000000000012422 ; ---------------------------------------------------------------------------
.text:0000000000012422
.text:0000000000012422 loc_12422:                              ; CODE XREF: transit_state_bkref_isra_34+268↑j
.text:0000000000012422                 mov     r12, [rsp+0E8h+var_E0]
.text:0000000000012427                 jmp     loc_120F2
.text:000000000001242C ; ---------------------------------------------------------------------------
.text:000000000001242C
.text:000000000001242C loc_1242C:                              ; CODE XREF: transit_state_bkref_isra_34+389↑j
.text:000000000001242C                 call    ___stack_chk_fail
.text:000000000001242C ; } // starts at 11B50
.text:000000000001242C transit_state_bkref_isra_34 endp
.text:000000000001242C
.text:000000000001242C ; ---------------------------------------------------------------------------
.text:0000000000012431                 align 20h
.text:0000000000012440
.text:0000000000012440 ; =============== S U B R O U T I N E =======================================
.text:0000000000012440
.text:0000000000012440
.text:0000000000012440 merge_state_with_log proc near          ; CODE XREF: re_search_internal+7DC↓p
.text:0000000000012440                                         ; re_search_internal+BC3↓p
.text:0000000000012440
.text:0000000000012440 var_68          = qword ptr -68h
.text:0000000000012440 var_60          = qword ptr -60h
.text:0000000000012440 var_58          = xmmword ptr -58h
.text:0000000000012440 ptr             = qword ptr -48h
.text:0000000000012440 var_40          = qword ptr -40h
.text:0000000000012440
.text:0000000000012440 ; __unwind {
.text:0000000000012440                 push    r15
.text:0000000000012442                 push    r14
.text:0000000000012444                 push    r13
.text:0000000000012446                 push    r12
.text:0000000000012448                 mov     r13, rdi
.text:000000000001244B                 push    rbp
.text:000000000001244C                 push    rbx
.text:000000000001244D                 mov     rbx, rsi
.text:0000000000012450                 sub     rsp, 38h
.text:0000000000012454                 mov     r12, [rsi+48h]
.text:0000000000012458                 mov     r14, [rsi+0B8h]
.text:000000000001245F                 mov     rax, fs:28h
.text:0000000000012468                 mov     [rsp+68h+var_40], rax
.text:000000000001246D                 xor     eax, eax
.text:000000000001246F                 mov     r15, [rsi+98h]
.text:0000000000012476                 lea     rbp, ds:0[r12*8]
.text:000000000001247E                 add     r14, rbp
.text:0000000000012481                 cmp     [rsi+0C0h], r12
.text:0000000000012488                 jge     short loc_124D0
.text:000000000001248A                 mov     [r14], rdx
.text:000000000001248D                 mov     rbp, rdx
.text:0000000000012490                 mov     [rsi+0C0h], r12
.text:0000000000012497
.text:0000000000012497 loc_12497:                              ; CODE XREF: merge_state_with_log+111↓j
.text:0000000000012497                                         ; merge_state_with_log+121↓j ...
.text:0000000000012497                 cmp     qword ptr [r15+98h], 0
.text:000000000001249F                 jnz     loc_125C8
.text:00000000000124A5
.text:00000000000124A5 loc_124A5:                              ; CODE XREF: merge_state_with_log+1B2↓j
.text:00000000000124A5                                         ; merge_state_with_log+1D9↓j ...
.text:00000000000124A5                 mov     rcx, [rsp+68h+var_40]
.text:00000000000124AA                 xor     rcx, fs:28h
.text:00000000000124B3                 mov     rax, rbp
.text:00000000000124B6                 jnz     loc_12627
.text:00000000000124BC                 add     rsp, 38h
.text:00000000000124C0                 pop     rbx
.text:00000000000124C1                 pop     rbp
.text:00000000000124C2                 pop     r12
.text:00000000000124C4                 pop     r13
.text:00000000000124C6                 pop     r14
.text:00000000000124C8                 pop     r15
.text:00000000000124CA                 retn
.text:00000000000124CA ; ---------------------------------------------------------------------------
.text:00000000000124CB                 align 10h
.text:00000000000124D0
.text:00000000000124D0 loc_124D0:                              ; CODE XREF: merge_state_with_log+48↑j
.text:00000000000124D0                 mov     rax, [r14]
.text:00000000000124D3                 test    rax, rax
.text:00000000000124D6                 jz      loc_125B8
.text:00000000000124DC                 test    rdx, rdx
.text:00000000000124DF                 mov     rax, [rax+50h]
.text:00000000000124E3                 jz      loc_12570
.text:00000000000124E9                 mov     r14, [rdx+50h]
.text:00000000000124ED                 lea     rdi, [rsp+68h+var_58]
.text:00000000000124F2                 mov     rdx, rax
.text:00000000000124F5                 mov     [rsp+68h+var_68], rdi
.text:00000000000124F9                 mov     rsi, r14
.text:00000000000124FC                 call    re_node_set_init_union
.text:0000000000012501                 test    eax, eax
.text:0000000000012503                 mov     [r13+0], eax
.text:0000000000012507                 jnz     loc_12620
.text:000000000001250D                 mov     rax, [rbx+48h]
.text:0000000000012511                 mov     edx, [rbx+0A0h]
.text:0000000000012517                 mov     rdi, rbx
.text:000000000001251A                 lea     rsi, [rax-1]
.text:000000000001251E                 call    re_string_context_at
.text:0000000000012523                 mov     r8, [rbx+0B8h]
.text:000000000001252A                 mov     rdx, [rsp+68h+var_68]
.text:000000000001252E                 mov     ecx, eax
.text:0000000000012530                 mov     rsi, r15
.text:0000000000012533                 mov     rdi, r13
.text:0000000000012536                 add     r8, rbp
.text:0000000000012539                 mov     [rsp+68h+var_60], r8
.text:000000000001253E                 call    re_acquire_state_context
.text:0000000000012543                 mov     r8, [rsp+68h+var_60]
.text:0000000000012548                 test    r14, r14
.text:000000000001254B                 mov     rbp, rax
.text:000000000001254E                 mov     [r8], rax
.text:0000000000012551                 jz      loc_12497
.text:0000000000012557                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000001255C                 call    _free
.text:0000000000012561                 jmp     loc_12497
.text:0000000000012561 ; ---------------------------------------------------------------------------
.text:0000000000012566                 align 10h
.text:0000000000012570
.text:0000000000012570 loc_12570:                              ; CODE XREF: merge_state_with_log+A3↑j
.text:0000000000012570                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000012574                 mov     rdi, rbx
.text:0000000000012577                 mov     edx, [rsi+0A0h]
.text:000000000001257D                 lea     rsi, [r12-1]
.text:0000000000012582                 movaps  [rsp+68h+var_58], xmm0
.text:0000000000012587                 mov     rax, [rax+10h]
.text:000000000001258B                 mov     [rsp+68h+ptr], rax
.text:0000000000012590                 call    re_string_context_at
.text:0000000000012595                 lea     rdx, [rsp+68h+var_58]
.text:000000000001259A                 mov     ecx, eax
.text:000000000001259C                 mov     rsi, r15
.text:000000000001259F                 mov     rdi, r13
.text:00000000000125A2                 call    re_acquire_state_context
.text:00000000000125A7                 mov     rbp, rax
.text:00000000000125AA                 mov     [r14], rax
.text:00000000000125AD                 jmp     loc_12497
.text:00000000000125AD ; ---------------------------------------------------------------------------
.text:00000000000125B2                 align 8
.text:00000000000125B8
.text:00000000000125B8 loc_125B8:                              ; CODE XREF: merge_state_with_log+96↑j
.text:00000000000125B8                 mov     [r14], rdx
.text:00000000000125BB                 mov     rbp, rdx
.text:00000000000125BE                 jmp     loc_12497
.text:00000000000125BE ; ---------------------------------------------------------------------------
.text:00000000000125C3                 align 8
.text:00000000000125C8
.text:00000000000125C8 loc_125C8:                              ; CODE XREF: merge_state_with_log+5F↑j
.text:00000000000125C8                 test    rbp, rbp
.text:00000000000125CB                 jz      short loc_12620
.text:00000000000125CD                 lea     r14, [rbp+10h]
.text:00000000000125D1                 lea     r15, [rbp+18h]
.text:00000000000125D5                 mov     rcx, r12
.text:00000000000125D8                 mov     rdi, rbx
.text:00000000000125DB                 mov     rdx, r15
.text:00000000000125DE                 mov     rsi, r14
.text:00000000000125E1                 call    check_subexp_matching_top_isra_18
.text:00000000000125E6                 test    eax, eax
.text:00000000000125E8                 mov     [r13+0], eax
.text:00000000000125EC                 jnz     short loc_12620
.text:00000000000125EE                 test    byte ptr [rbp+68h], 40h
.text:00000000000125F2                 jz      loc_124A5
.text:00000000000125F8                 mov     rdx, r15
.text:00000000000125FB                 mov     rsi, r14
.text:00000000000125FE                 mov     rdi, rbx
.text:0000000000012601                 call    transit_state_bkref_isra_34
.text:0000000000012606                 test    eax, eax
.text:0000000000012608                 mov     [r13+0], eax
.text:000000000001260C                 jnz     short loc_12620
.text:000000000001260E                 mov     rax, [rbx+0B8h]
.text:0000000000012615                 mov     rbp, [rax+r12*8]
.text:0000000000012619                 jmp     loc_124A5
.text:0000000000012619 ; ---------------------------------------------------------------------------
.text:000000000001261E                 align 20h
.text:0000000000012620
.text:0000000000012620 loc_12620:                              ; CODE XREF: merge_state_with_log+C7↑j
.text:0000000000012620                                         ; merge_state_with_log+18B↑j ...
.text:0000000000012620                 xor     ebp, ebp
.text:0000000000012622                 jmp     loc_124A5
.text:0000000000012627 ; ---------------------------------------------------------------------------
.text:0000000000012627
.text:0000000000012627 loc_12627:                              ; CODE XREF: merge_state_with_log+76↑j
.text:0000000000012627                 call    ___stack_chk_fail
.text:0000000000012627 ; } // starts at 12440
.text:0000000000012627 merge_state_with_log endp
.text:0000000000012627
.text:0000000000012627 ; ---------------------------------------------------------------------------
.text:000000000001262C                 align 10h
.text:0000000000012630
.text:0000000000012630 ; =============== S U B R O U T I N E =======================================
.text:0000000000012630
.text:0000000000012630
.text:0000000000012630 sift_states_backward proc near          ; CODE XREF: re_search_internal+9CE↓p
.text:0000000000012630                                         ; re_search_internal+1235↓p ...
.text:0000000000012630
.text:0000000000012630 var_98          = qword ptr -98h
.text:0000000000012630 n               = qword ptr -90h
.text:0000000000012630 var_88          = qword ptr -88h
.text:0000000000012630 var_80          = qword ptr -80h
.text:0000000000012630 var_78          = qword ptr -78h
.text:0000000000012630 var_6C          = dword ptr -6Ch
.text:0000000000012630 var_68          = qword ptr -68h
.text:0000000000012630 var_60          = qword ptr -60h
.text:0000000000012630 var_58          = qword ptr -58h
.text:0000000000012630 var_50          = qword ptr -50h
.text:0000000000012630 ptr             = qword ptr -48h
.text:0000000000012630 var_40          = qword ptr -40h
.text:0000000000012630
.text:0000000000012630 ; __unwind {
.text:0000000000012630                 push    r15
.text:0000000000012632                 push    r14
.text:0000000000012634                 mov     r14, rdi
.text:0000000000012637                 push    r13
.text:0000000000012639                 push    r12
.text:000000000001263B                 mov     r13, rsi
.text:000000000001263E                 push    rbp
.text:000000000001263F                 push    rbx
.text:0000000000012640                 sub     rsp, 68h
.text:0000000000012644                 mov     r15, [rsi+18h]
.text:0000000000012648                 mov     rbx, [rsi+10h]
.text:000000000001264C                 mov     [rsp+98h+var_98], rdi
.text:0000000000012650                 mov     edi, 8          ; size
.text:0000000000012655                 mov     [rsp+98h+var_58], 1
.text:000000000001265E                 mov     rax, fs:28h
.text:0000000000012667                 mov     [rsp+98h+var_40], rax
.text:000000000001266C                 xor     eax, eax
.text:000000000001266E                 mov     [rsp+98h+var_50], 1
.text:0000000000012677                 call    _malloc
.text:000000000001267C                 test    rax, rax
.text:000000000001267F                 mov     [rsp+98h+ptr], rax
.text:0000000000012684                 jz      loc_12964
.text:000000000001268A                 lea     rcx, [rsp+98h+var_58]
.text:000000000001268F                 mov     [rax], rbx
.text:0000000000012692                 mov     rdx, r15
.text:0000000000012695                 mov     rsi, r13
.text:0000000000012698                 mov     rdi, r14
.text:000000000001269B                 mov     [rsp+98h+var_88], rcx
.text:00000000000126A0                 call    update_cur_sifted_state
.text:00000000000126A5                 test    eax, eax
.text:00000000000126A7                 jnz     loc_12935
.text:00000000000126AD                 lea     rax, ds:0[r15*8]
.text:00000000000126B5                 test    r15, r15
.text:00000000000126B8                 mov     [rsp+98h+var_6C], 0
.text:00000000000126C0                 mov     [rsp+98h+n], rax
.text:00000000000126C5                 lea     rax, [r13+30h]
.text:00000000000126C9                 mov     [rsp+98h+var_60], rax
.text:00000000000126CE                 jle     loc_128D7
.text:00000000000126D4
.text:00000000000126D4 loc_126D4:                              ; CODE XREF: sift_states_backward+2A1↓j
.text:00000000000126D4                 mov     rdi, [r13+0]    ; s
.text:00000000000126D8                 mov     rax, [rsp+98h+n]
.text:00000000000126DD                 cmp     qword ptr [rdi+rax], 0
.text:00000000000126E2                 jz      loc_128F8
.text:00000000000126E8                 mov     rax, [rsp+98h+var_98]
.text:00000000000126EC                 mov     [rsp+98h+var_6C], 0
.text:00000000000126F4                 mov     ecx, [rsp+98h+var_6C]
.text:00000000000126F8                 cmp     [rax+0E0h], ecx
.text:00000000000126FE                 jl      loc_12911
.text:0000000000012704
.text:0000000000012704 loc_12704:                              ; CODE XREF: sift_states_backward+2DB↓j
.text:0000000000012704                 mov     rbx, [rsp+98h+var_98]
.text:0000000000012708                 mov     rdi, [rsp+98h+n]
.text:000000000001270D                 sub     r15, 1
.text:0000000000012711                 mov     [rsp+98h+var_50], 0
.text:000000000001271A                 mov     rax, [rbx+0B8h]
.text:0000000000012721                 mov     r12, [rax+rdi-8]
.text:0000000000012726                 test    r12, r12
.text:0000000000012729                 jz      loc_128B0
.text:000000000001272F                 cmp     qword ptr [r12+28h], 0
.text:0000000000012735                 mov     r14, [rbx+98h]
.text:000000000001273C                 jle     loc_128B0
.text:0000000000012742                 xor     ebx, ebx
.text:0000000000012744                 jmp     loc_127EB
.text:0000000000012744 ; ---------------------------------------------------------------------------
.text:0000000000012749                 align 10h
.text:0000000000012750
.text:0000000000012750 loc_12750:                              ; CODE XREF: sift_states_backward+1D5↓j
.text:0000000000012750                                         ; sift_states_backward+271↓j ...
.text:0000000000012750                 mov     rdi, [rsp+98h+var_98]
.text:0000000000012754                 mov     rdx, r15
.text:0000000000012757                 call    check_node_accept
.text:000000000001275C                 test    al, al
.text:000000000001275E                 jz      short loc_127DC
.text:0000000000012760                 mov     rax, [r13+0]
.text:0000000000012764                 mov     rcx, [rsp+98h+n]
.text:0000000000012769                 mov     rax, [rax+rcx]
.text:000000000001276D                 test    rax, rax
.text:0000000000012770                 jz      short loc_127DC
.text:0000000000012772                 mov     rdx, [r14+18h]
.text:0000000000012776                 mov     rdi, [rax+10h]
.text:000000000001277A                 lea     rsi, [rax+18h]
.text:000000000001277E                 mov     rdx, [rdx+rbp*8]
.text:0000000000012782                 call    re_node_set_contains_isra_3
.text:0000000000012787                 test    rax, rax
.text:000000000001278A                 jz      short loc_127DC
.text:000000000001278C                 mov     r10d, 1
.text:0000000000012792
.text:0000000000012792 loc_12792:                              ; CODE XREF: sift_states_backward+22B↓j
.text:0000000000012792                                         ; sift_states_backward+260↓j ...
.text:0000000000012792                 cmp     qword ptr [r13+28h], 0
.text:0000000000012797                 jz      short loc_127C7
.text:0000000000012799                 mov     rax, [r14+18h]
.text:000000000001279D                 sub     rsp, 8
.text:00000000000127A1                 lea     rsi, [r13+28h]
.text:00000000000127A5                 lea     r8, [r10+r15]
.text:00000000000127A9                 mov     r9, rbp
.text:00000000000127AC                 mov     rcx, [rax+rbp*8]
.text:00000000000127B0                 push    r15
.text:00000000000127B2                 mov     rdx, [rsp+0A8h+var_60]
.text:00000000000127B7                 mov     rdi, [rsp+0A8h+var_98]
.text:00000000000127BC                 call    check_dst_limits_isra_13
.text:00000000000127C1                 test    al, al
.text:00000000000127C3                 pop     rdx
.text:00000000000127C4                 pop     rcx
.text:00000000000127C5                 jnz     short loc_127DC
.text:00000000000127C7
.text:00000000000127C7 loc_127C7:                              ; CODE XREF: sift_states_backward+167↑j
.text:00000000000127C7                 mov     rdi, [rsp+98h+var_88]
.text:00000000000127CC                 mov     rsi, rbp
.text:00000000000127CF                 call    re_node_set_insert
.text:00000000000127D4                 test    al, al
.text:00000000000127D6                 jz      loc_12930
.text:00000000000127DC
.text:00000000000127DC loc_127DC:                              ; CODE XREF: sift_states_backward+12E↑j
.text:00000000000127DC                                         ; sift_states_backward+140↑j ...
.text:00000000000127DC                 add     rbx, 1
.text:00000000000127E0                 cmp     rbx, [r12+28h]
.text:00000000000127E5                 jge     loc_128B0
.text:00000000000127EB
.text:00000000000127EB loc_127EB:                              ; CODE XREF: sift_states_backward+114↑j
.text:00000000000127EB                 mov     rax, [r12+30h]
.text:00000000000127F0                 mov     rsi, [r14]
.text:00000000000127F3                 mov     rbp, [rax+rbx*8]
.text:00000000000127F7                 mov     r9, rbp
.text:00000000000127FA                 shl     r9, 4
.text:00000000000127FE                 add     rsi, r9
.text:0000000000012801                 test    byte ptr [rsi+0Ah], 10h
.text:0000000000012805                 jz      loc_12750
.text:000000000001280B                 mov     rcx, [rsp+98h+var_98]
.text:000000000001280F                 mov     rax, [r13+18h]
.text:0000000000012813                 mov     r8, r15
.text:0000000000012816                 mov     rdx, rbp
.text:0000000000012819                 mov     [rsp+98h+var_80], r9
.text:000000000001281E                 mov     r11, [rcx+98h]
.text:0000000000012825                 mov     [rsp+98h+var_78], rax
.text:000000000001282A                 mov     rdi, [r11]
.text:000000000001282D                 lea     rsi, [r11+0D8h]
.text:0000000000012834                 mov     [rsp+98h+var_68], r11
.text:0000000000012839                 call    check_node_accept_bytes_isra_31
.text:000000000001283E                 movsxd  r10, eax
.text:0000000000012841                 mov     r9, [rsp+98h+var_80]
.text:0000000000012846                 cmp     r10d, 0
.text:000000000001284A                 jle     loc_128E0
.text:0000000000012850                 movsxd  rax, r10d
.text:0000000000012853                 add     rax, r15
.text:0000000000012856                 cmp     [rsp+98h+var_78], rax
.text:000000000001285B                 jl      loc_12792
.text:0000000000012861                 mov     rdx, [r13+0]
.text:0000000000012865                 mov     r11, [rsp+98h+var_68]
.text:000000000001286A                 mov     rax, [rdx+rax*8]
.text:000000000001286E                 test    rax, rax
.text:0000000000012871                 jz      short loc_128E6
.text:0000000000012873                 mov     rdx, [r11+18h]
.text:0000000000012877                 mov     rdi, [rax+10h]
.text:000000000001287B                 lea     rsi, [rax+18h]
.text:000000000001287F                 mov     [rsp+98h+var_80], r9
.text:0000000000012884                 mov     rdx, [rdx+rbp*8]
.text:0000000000012888                 call    re_node_set_contains_isra_3
.text:000000000001288D                 test    rax, rax
.text:0000000000012890                 jnz     loc_12792
.text:0000000000012896                 mov     r9, [rsp+98h+var_80]
.text:000000000001289B                 mov     rsi, [r14]
.text:000000000001289E                 add     rsi, r9
.text:00000000000128A1                 jmp     loc_12750
.text:00000000000128A1 ; ---------------------------------------------------------------------------
.text:00000000000128A6                 align 10h
.text:00000000000128B0
.text:00000000000128B0 loc_128B0:                              ; CODE XREF: sift_states_backward+F9↑j
.text:00000000000128B0                                         ; sift_states_backward+10C↑j ...
.text:00000000000128B0                 mov     rcx, [rsp+98h+var_88]
.text:00000000000128B5                 mov     rdi, [rsp+98h+var_98]
.text:00000000000128B9                 mov     rdx, r15
.text:00000000000128BC                 mov     rsi, r13
.text:00000000000128BF                 call    update_cur_sifted_state
.text:00000000000128C4                 test    eax, eax
.text:00000000000128C6                 jnz     short loc_12935
.text:00000000000128C8                 sub     [rsp+98h+n], 8
.text:00000000000128CE                 test    r15, r15
.text:00000000000128D1                 jnz     loc_126D4
.text:00000000000128D7
.text:00000000000128D7 loc_128D7:                              ; CODE XREF: sift_states_backward+9E↑j
.text:00000000000128D7                 xor     eax, eax
.text:00000000000128D9                 jmp     short loc_12935
.text:00000000000128D9 ; ---------------------------------------------------------------------------
.text:00000000000128DB                 align 20h
.text:00000000000128E0
.text:00000000000128E0 loc_128E0:                              ; CODE XREF: sift_states_backward+21A↑j
.text:00000000000128E0                 jnz     loc_12792
.text:00000000000128E6
.text:00000000000128E6 loc_128E6:                              ; CODE XREF: sift_states_backward+241↑j
.text:00000000000128E6                 mov     rsi, [r14]
.text:00000000000128E9                 add     rsi, r9
.text:00000000000128EC                 jmp     loc_12750
.text:00000000000128EC ; ---------------------------------------------------------------------------
.text:00000000000128F1                 align 8
.text:00000000000128F8
.text:00000000000128F8 loc_128F8:                              ; CODE XREF: sift_states_backward+B2↑j
.text:00000000000128F8                 mov     rax, [rsp+98h+var_98]
.text:00000000000128FC                 add     [rsp+98h+var_6C], 1
.text:0000000000012901                 mov     ecx, [rsp+98h+var_6C]
.text:0000000000012905                 cmp     [rax+0E0h], ecx
.text:000000000001290B                 jge     loc_12704
.text:0000000000012911
.text:0000000000012911 loc_12911:                              ; CODE XREF: sift_states_backward+CE↑j
.text:0000000000012911                 mov     rdx, [rsp+98h+n] ; n
.text:0000000000012916                 xor     esi, esi        ; c
.text:0000000000012918                 call    _memset
.text:000000000001291D                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:0000000000012922                 call    _free
.text:0000000000012927                 xor     eax, eax
.text:0000000000012929                 jmp     short loc_12945
.text:0000000000012929 ; ---------------------------------------------------------------------------
.text:000000000001292B                 align 10h
.text:0000000000012930
.text:0000000000012930 loc_12930:                              ; CODE XREF: sift_states_backward+1A6↑j
.text:0000000000012930                 mov     eax, 0Ch
.text:0000000000012935
.text:0000000000012935 loc_12935:                              ; CODE XREF: sift_states_backward+77↑j
.text:0000000000012935                                         ; sift_states_backward+296↑j ...
.text:0000000000012935                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000001293A                 mov     dword ptr [rsp+98h+var_98], eax
.text:000000000001293D                 call    _free
.text:0000000000012942                 mov     eax, dword ptr [rsp+98h+var_98]
.text:0000000000012945
.text:0000000000012945 loc_12945:                              ; CODE XREF: sift_states_backward+2F9↑j
.text:0000000000012945                                         ; sift_states_backward+339↓j
.text:0000000000012945                 mov     rdx, [rsp+98h+var_40]
.text:000000000001294A                 xor     rdx, fs:28h
.text:0000000000012953                 jnz     short loc_1296B
.text:0000000000012955                 add     rsp, 68h
.text:0000000000012959                 pop     rbx
.text:000000000001295A                 pop     rbp
.text:000000000001295B                 pop     r12
.text:000000000001295D                 pop     r13
.text:000000000001295F                 pop     r14
.text:0000000000012961                 pop     r15
.text:0000000000012963                 retn
.text:0000000000012964 ; ---------------------------------------------------------------------------
.text:0000000000012964
.text:0000000000012964 loc_12964:                              ; CODE XREF: sift_states_backward+54↑j
.text:0000000000012964                 mov     eax, 0Ch
.text:0000000000012969                 jmp     short loc_12945
.text:000000000001296B ; ---------------------------------------------------------------------------
.text:000000000001296B
.text:000000000001296B loc_1296B:                              ; CODE XREF: sift_states_backward+323↑j
.text:000000000001296B                 call    ___stack_chk_fail
.text:000000000001296B ; } // starts at 12630
.text:000000000001296B sift_states_backward endp
.text:000000000001296B
.text:0000000000012970
.text:0000000000012970 ; =============== S U B R O U T I N E =======================================
.text:0000000000012970
.text:0000000000012970
.text:0000000000012970 re_search_internal proc near            ; CODE XREF: re_search_stub+10A↓p
.text:0000000000012970                                         ; rpl_regexec+58↓p
.text:0000000000012970
.text:0000000000012970 var_268         = qword ptr -268h
.text:0000000000012970 var_260         = qword ptr -260h
.text:0000000000012970 var_258         = qword ptr -258h
.text:0000000000012970 var_250         = qword ptr -250h
.text:0000000000012970 var_248         = qword ptr -248h
.text:0000000000012970 var_240         = qword ptr -240h
.text:0000000000012970 var_238         = qword ptr -238h
.text:0000000000012970 var_230         = qword ptr -230h
.text:0000000000012970 var_228         = qword ptr -228h
.text:0000000000012970 var_220         = qword ptr -220h
.text:0000000000012970 var_218         = qword ptr -218h
.text:0000000000012970 var_210         = dword ptr -210h
.text:0000000000012970 var_20C         = dword ptr -20Ch
.text:0000000000012970 var_208         = qword ptr -208h
.text:0000000000012970 var_200         = qword ptr -200h
.text:0000000000012970 var_1F8         = qword ptr -1F8h
.text:0000000000012970 var_1F0         = qword ptr -1F0h
.text:0000000000012970 var_1E8         = qword ptr -1E8h
.text:0000000000012970 var_1E0         = qword ptr -1E0h
.text:0000000000012970 var_1D8         = qword ptr -1D8h
.text:0000000000012970 var_1D0         = qword ptr -1D0h
.text:0000000000012970 var_1C8         = qword ptr -1C8h
.text:0000000000012970 var_1C0         = dword ptr -1C0h
.text:0000000000012970 var_1BC         = dword ptr -1BCh
.text:0000000000012970 var_1B8         = qword ptr -1B8h
.text:0000000000012970 var_1B0         = qword ptr -1B0h
.text:0000000000012970 var_1A8         = qword ptr -1A8h
.text:0000000000012970 var_1A0         = dword ptr -1A0h
.text:0000000000012970 var_19A         = byte ptr -19Ah
.text:0000000000012970 var_199         = byte ptr -199h
.text:0000000000012970 var_198         = dword ptr -198h
.text:0000000000012970 var_194         = dword ptr -194h
.text:0000000000012970 var_190         = qword ptr -190h
.text:0000000000012970 var_188         = xmmword ptr -188h
.text:0000000000012970 var_178         = qword ptr -178h
.text:0000000000012970 var_170         = qword ptr -170h
.text:0000000000012970 var_168         = xmmword ptr -168h
.text:0000000000012970 ptr             = qword ptr -158h
.text:0000000000012970 var_148         = qword ptr -148h
.text:0000000000012970 var_140         = qword ptr -140h
.text:0000000000012970 var_138         = qword ptr -138h
.text:0000000000012970 var_130         = qword ptr -130h
.text:0000000000012970 var_120         = qword ptr -120h
.text:0000000000012970 var_118         = qword ptr -118h
.text:0000000000012970 var_110         = qword ptr -110h
.text:0000000000012970 var_108         = qword ptr -108h
.text:0000000000012970 var_100         = qword ptr -100h
.text:0000000000012970 var_F8          = qword ptr -0F8h
.text:0000000000012970 var_F0          = qword ptr -0F0h
.text:0000000000012970 var_E8          = qword ptr -0E8h
.text:0000000000012970 var_E0          = qword ptr -0E0h
.text:0000000000012970 var_D8          = dword ptr -0D8h
.text:0000000000012970 var_D0          = qword ptr -0D0h
.text:0000000000012970 var_C8          = qword ptr -0C8h
.text:0000000000012970 var_C0          = byte ptr -0C0h
.text:0000000000012970 var_BF          = byte ptr -0BFh
.text:0000000000012970 var_BE          = byte ptr -0BEh
.text:0000000000012970 var_BD          = byte ptr -0BDh
.text:0000000000012970 var_BC          = byte ptr -0BCh
.text:0000000000012970 var_BB          = byte ptr -0BBh
.text:0000000000012970 var_BA          = byte ptr -0BAh
.text:0000000000012970 var_B8          = dword ptr -0B8h
.text:0000000000012970 var_B0          = qword ptr -0B0h
.text:0000000000012970 var_A8          = dword ptr -0A8h
.text:0000000000012970 var_A0          = qword ptr -0A0h
.text:0000000000012970 var_98          = qword ptr -98h
.text:0000000000012970 var_90          = qword ptr -90h
.text:0000000000012970 var_88          = qword ptr -88h
.text:0000000000012970 var_80          = qword ptr -80h
.text:0000000000012970 var_78          = qword ptr -78h
.text:0000000000012970 var_70          = qword ptr -70h
.text:0000000000012970 var_68          = dword ptr -68h
.text:0000000000012970 var_58          = qword ptr -58h
.text:0000000000012970 var_50          = qword ptr -50h
.text:0000000000012970 var_40          = qword ptr -40h
.text:0000000000012970 arg_0           = qword ptr  8
.text:0000000000012970 arg_8           = qword ptr  10h
.text:0000000000012970 arg_10          = dword ptr  18h
.text:0000000000012970
.text:0000000000012970 ; __unwind {
.text:0000000000012970                 push    r15
.text:0000000000012972                 push    r14
.text:0000000000012974                 push    r13
.text:0000000000012976                 push    r12
.text:0000000000012978                 mov     r13, r9
.text:000000000001297B                 push    rbp
.text:000000000001297C                 push    rbx
.text:000000000001297D                 mov     rbp, rcx
.text:0000000000012980                 mov     ecx, 20h ; ' '
.text:0000000000012985                 mov     r12, r8
.text:0000000000012988                 sub     rsp, 238h
.text:000000000001298F                 mov     rbx, [rdi]
.text:0000000000012992                 mov     rax, [rsp+268h+arg_8]
.text:000000000001299A                 mov     [rsp+268h+var_220], rdi
.text:000000000001299F                 mov     [rsp+268h+var_1F0], rsi
.text:00000000000129A4                 mov     rsi, rdi
.text:00000000000129A7                 lea     rdi, [rsp+268h+var_148]
.text:00000000000129AF                 mov     [rsp+268h+var_1E0], rdx
.text:00000000000129B7                 mov     [rsp+268h+var_230], rbx
.text:00000000000129BC                 mov     [rsp+268h+var_1B0], rax
.text:00000000000129C4                 mov     [rsp+268h+var_268], rdi
.text:00000000000129C8                 mov     rax, fs:28h
.text:00000000000129D1                 mov     [rsp+268h+var_40], rax
.text:00000000000129D9                 xor     eax, eax
.text:00000000000129DB                 rep stosq
.text:00000000000129DE                 mov     rdi, [rsi+20h]
.text:00000000000129E2                 mov     [rsp+268h+var_B0], rbx
.text:00000000000129EA                 test    rdi, rdi
.text:00000000000129ED                 mov     [rsp+268h+var_200], rdi
.text:00000000000129F2                 jz      short loc_12A16
.text:00000000000129F4                 movzx   edx, byte ptr [rsi+38h]
.text:00000000000129F8                 test    dl, 8
.text:00000000000129FB                 jz      loc_12E90
.text:0000000000012A01                 cmp     rbp, r8
.text:0000000000012A04                 jz      loc_12E90
.text:0000000000012A0A                 and     edx, 1
.text:0000000000012A0D                 cmovz   rax, rdi
.text:0000000000012A11                 mov     [rsp+268h+var_200], rax
.text:0000000000012A16
.text:0000000000012A16 loc_12A16:                              ; CODE XREF: re_search_internal+82↑j
.text:0000000000012A16                                         ; re_search_internal+529↓j
.text:0000000000012A16                 mov     rax, [rsp+268h+var_220]
.text:0000000000012A1B                 mov     [rsp+268h+var_1D0], 0
.text:0000000000012A27                 mov     rax, [rax+30h]
.text:0000000000012A2B                 cmp     rax, [rsp+268h+arg_0]
.text:0000000000012A33                 jnb     short loc_12A54
.text:0000000000012A35                 mov     rcx, [rsp+268h+arg_0]
.text:0000000000012A3D                 lea     rdx, [rcx-1]
.text:0000000000012A41                 sub     rdx, rax
.text:0000000000012A44                 sub     [rsp+268h+arg_0], rdx
.text:0000000000012A4C                 mov     [rsp+268h+var_1D0], rdx
.text:0000000000012A54
.text:0000000000012A54 loc_12A54:                              ; CODE XREF: re_search_internal+C3↑j
.text:0000000000012A54                 mov     rsi, [rsp+268h+var_220]
.text:0000000000012A59                 cmp     qword ptr [rsi+10h], 0
.text:0000000000012A5E                 jz      loc_138F0
.text:0000000000012A64                 mov     rdi, [rsp+268h+var_230]
.text:0000000000012A69                 mov     rax, [rdi+48h]
.text:0000000000012A6D                 test    rax, rax
.text:0000000000012A70                 jz      loc_138F0
.text:0000000000012A76                 mov     rdx, [rdi+50h]
.text:0000000000012A7A                 test    rdx, rdx
.text:0000000000012A7D                 jz      loc_138F0
.text:0000000000012A83                 mov     rcx, [rdi+58h]
.text:0000000000012A87                 test    rcx, rcx
.text:0000000000012A8A                 jz      loc_138F0
.text:0000000000012A90                 cmp     qword ptr [rdi+60h], 0
.text:0000000000012A95                 jz      loc_138F0
.text:0000000000012A9B                 cmp     qword ptr [rax+10h], 0
.text:0000000000012AA0                 jnz     short loc_12AD8
.text:0000000000012AA2                 cmp     qword ptr [rdx+10h], 0
.text:0000000000012AA7                 jnz     short loc_12AD8
.text:0000000000012AA9                 cmp     qword ptr [rcx+10h], 0
.text:0000000000012AAE                 jz      short loc_12AB6
.text:0000000000012AB0                 cmp     byte ptr [rsi+38h], 0
.text:0000000000012AB4                 js      short loc_12AD8
.text:0000000000012AB6
.text:0000000000012AB6 loc_12AB6:                              ; CODE XREF: re_search_internal+13E↑j
.text:0000000000012AB6                 test    rbp, rbp
.text:0000000000012AB9                 jz      short loc_12ACC
.text:0000000000012ABB                 test    r12, r12
.text:0000000000012ABE                 mov     [rsp+268h+var_20C], 1
.text:0000000000012AC6                 jnz     loc_134E9
.text:0000000000012ACC
.text:0000000000012ACC loc_12ACC:                              ; CODE XREF: re_search_internal+149↑j
.text:0000000000012ACC                 xor     r12d, r12d
.text:0000000000012ACF                 xor     ebp, ebp
.text:0000000000012AD1                 nop     dword ptr [rax+00000000h]
.text:0000000000012AD8
.text:0000000000012AD8 loc_12AD8:                              ; CODE XREF: re_search_internal+130↑j
.text:0000000000012AD8                                         ; re_search_internal+137↑j ...
.text:0000000000012AD8                 cmp     [rsp+268h+arg_0], 0
.text:0000000000012AE1                 mov     [rsp+268h+var_210], 1
.text:0000000000012AE9                 jz      loc_12E70
.text:0000000000012AEF
.text:0000000000012AEF loc_12AEF:                              ; CODE XREF: re_search_internal+517↓j
.text:0000000000012AEF                 mov     r11, [rsp+268h+var_230]
.text:0000000000012AF4                 mov     rax, [rsp+268h+var_220]
.text:0000000000012AF9                 mov     rdi, [rsp+268h+var_1E0]
.text:0000000000012B01                 mov     rsi, [r11+10h]
.text:0000000000012B05                 mov     rbx, [rax+28h]
.text:0000000000012B09                 mov     edx, [r11+0B4h]
.text:0000000000012B10                 mov     rax, [rax+18h]
.text:0000000000012B14                 mov     [rsp+268h+var_F0], rdi
.text:0000000000012B1C                 mov     [rsp+268h+var_F8], rdi
.text:0000000000012B24                 mov     [rsp+268h+var_260], rsi
.text:0000000000012B29                 lea     rsi, [rsi+1]
.text:0000000000012B2D                 mov     [rsp+268h+var_1B8], rbx
.text:0000000000012B35                 movsxd  rcx, edx
.text:0000000000012B38                 shr     rax, 16h
.text:0000000000012B3C                 mov     [rsp+268h+var_D0], rbx
.text:0000000000012B44                 and     eax, 1
.text:0000000000012B47                 cmp     rsi, rcx
.text:0000000000012B4A                 mov     [rsp+268h+var_B8], edx
.text:0000000000012B51                 cmovl   rsi, rcx
.text:0000000000012B55                 lea     rcx, [rdi+1]
.text:0000000000012B59                 mov     [rsp+268h+var_C0], al
.text:0000000000012B60                 mov     [rsp+268h+var_E0], rdi
.text:0000000000012B68                 mov     [rsp+268h+var_E8], rdi
.text:0000000000012B70                 cmp     rsi, rcx
.text:0000000000012B73                 mov     rdi, [rsp+268h+var_268]
.text:0000000000012B77                 cmovg   rsi, rcx
.text:0000000000012B7B                 test    rbx, rbx
.text:0000000000012B7E                 mov     rcx, [rsp+268h+var_1F0]
.text:0000000000012B83                 setnz   bl
.text:0000000000012B86                 or      eax, ebx
.text:0000000000012B88                 mov     [rsp+268h+var_BD], al
.text:0000000000012B8F                 movzx   eax, byte ptr [r11+0B0h]
.text:0000000000012B97                 mov     [rsp+268h+var_148], rcx
.text:0000000000012B9F                 mov     edx, eax
.text:0000000000012BA1                 shr     al, 3
.text:0000000000012BA4                 shr     dl, 2
.text:0000000000012BA7                 and     eax, 1
.text:0000000000012BAA                 and     edx, 1
.text:0000000000012BAD                 mov     [rsp+268h+var_BE], al
.text:0000000000012BB4                 mov     [rsp+268h+var_BF], dl
.text:0000000000012BBB                 call    re_string_realloc_buffers
.text:0000000000012BC0                 test    eax, eax
.text:0000000000012BC2                 mov     [rsp+268h+var_20C], eax
.text:0000000000012BC6                 jnz     loc_134C0
.text:0000000000012BCC                 mov     rdi, [rsp+268h+var_230]
.text:0000000000012BD1                 lea     rax, [rdi+0B8h]
.text:0000000000012BD8                 mov     [rsp+268h+var_C8], rax
.text:0000000000012BE0                 movzx   eax, byte ptr [rdi+0B0h]
.text:0000000000012BE7                 mov     byte ptr [rsp+268h+var_260], al
.text:0000000000012BEB                 shr     al, 4
.text:0000000000012BEE                 and     eax, 1
.text:0000000000012BF1                 cmp     [rsp+268h+var_BD], 0
.text:0000000000012BF9                 mov     [rsp+268h+var_BA], al
.text:0000000000012C00                 jnz     short loc_12C25
.text:0000000000012C02                 mov     rsi, [rsp+268h+var_230]
.text:0000000000012C07                 mov     rax, [rsp+268h+var_1F0]
.text:0000000000012C0C                 cmp     dword ptr [rsi+0B4h], 1
.text:0000000000012C13                 mov     [rsp+268h+var_140], rax
.text:0000000000012C1B                 mov     rax, [rsp+268h+var_1E0]
.text:0000000000012C23                 jle     short loc_12C27
.text:0000000000012C25
.text:0000000000012C25 loc_12C25:                              ; CODE XREF: re_search_internal+290↑j
.text:0000000000012C25                 xor     eax, eax
.text:0000000000012C27
.text:0000000000012C27 loc_12C27:                              ; CODE XREF: re_search_internal+2B3↑j
.text:0000000000012C27                 mov     [rsp+268h+var_118], rax
.text:0000000000012C2F                 mov     [rsp+268h+var_110], rax
.text:0000000000012C37                 mov     rax, [rsp+268h+var_220]
.text:0000000000012C3C                 mov     [rsp+268h+var_E0], r13
.text:0000000000012C44                 mov     [rsp+268h+var_E8], r13
.text:0000000000012C4C                 movzx   eax, byte ptr [rax+38h]
.text:0000000000012C50                 mov     byte ptr [rsp+268h+var_260], al
.text:0000000000012C54                 shr     al, 7
.text:0000000000012C57                 mov     [rsp+268h+var_BB], al
.text:0000000000012C5E                 mov     rax, [rsp+268h+var_230]
.text:0000000000012C63                 mov     r14, [rax+98h]
.text:0000000000012C6A                 mov     eax, [rsp+268h+arg_10]
.text:0000000000012C71                 mov     [rsp+268h+var_A0], 0FFFFFFFFFFFFFFFFh
.text:0000000000012C7D                 lea     r13, [r14+r14]
.text:0000000000012C81                 mov     [rsp+268h+var_A8], eax
.text:0000000000012C88                 test    r13, r13
.text:0000000000012C8B                 jle     short loc_12CDF
.text:0000000000012C8D                 mov     rax, 666666666666666h
.text:0000000000012C97                 cmp     r13, rax
.text:0000000000012C9A                 jg      loc_139E0
.text:0000000000012CA0                 lea     rdi, [r13+r14*8+0]
.text:0000000000012CA5                 shl     rdi, 3          ; size
.text:0000000000012CA9                 call    _malloc
.text:0000000000012CAE                 mov     rdi, r14
.text:0000000000012CB1                 mov     r15, rax
.text:0000000000012CB4                 mov     [rsp+268h+var_70], rax
.text:0000000000012CBC                 shl     rdi, 4          ; size
.text:0000000000012CC0                 call    _malloc
.text:0000000000012CC5                 test    rax, rax
.text:0000000000012CC8                 mov     [rsp+268h+var_50], rax
.text:0000000000012CD0                 jz      loc_139E0
.text:0000000000012CD6                 test    r15, r15
.text:0000000000012CD9                 jz      loc_139E0
.text:0000000000012CDF
.text:0000000000012CDF loc_12CDF:                              ; CODE XREF: re_search_internal+31B↑j
.text:0000000000012CDF                 cmp     [rsp+268h+arg_0], 1
.text:0000000000012CE8                 mov     [rsp+268h+var_78], r13
.text:0000000000012CF0                 mov     [rsp+268h+var_68], 1
.text:0000000000012CFB                 mov     [rsp+268h+var_58], r13
.text:0000000000012D03                 jbe     loc_13E28
.text:0000000000012D09
.text:0000000000012D09 loc_12D09:                              ; CODE XREF: re_search_internal+14C4↓j
.text:0000000000012D09                 mov     rax, [rsp+268h+var_108]
.text:0000000000012D11                 mov     rdx, 1FFFFFFFFFFFFFFEh
.text:0000000000012D1B                 cmp     rax, rdx
.text:0000000000012D1E                 ja      loc_139E0
.text:0000000000012D24                 lea     rdi, ds:8[rax*8] ; size
.text:0000000000012D2C                 call    _malloc
.text:0000000000012D31                 test    rax, rax
.text:0000000000012D34                 mov     rdi, rax
.text:0000000000012D37                 mov     [rsp+268h+var_90], rax
.text:0000000000012D3F                 jz      loc_13A30
.text:0000000000012D45
.text:0000000000012D45 loc_12D45:                              ; CODE XREF: re_search_internal+14D6↓j
.text:0000000000012D45                 mov     eax, [rsp+268h+arg_10]
.text:0000000000012D4C                 mov     [rsp+268h+var_190], rbp
.text:0000000000012D54                 and     eax, 1
.text:0000000000012D57                 cmp     eax, 1
.text:0000000000012D5A                 sbb     eax, eax
.text:0000000000012D5C                 and     eax, 2
.text:0000000000012D5F                 add     eax, 4
.text:0000000000012D62                 mov     [rsp+268h+var_D8], eax
.text:0000000000012D69                 xor     eax, eax
.text:0000000000012D6B                 cmp     rbp, r12
.text:0000000000012D6E                 setle   al
.text:0000000000012D71                 lea     eax, [rax+rax-1]
.text:0000000000012D75                 mov     [rsp+268h+var_1BC], eax
.text:0000000000012D7C                 mov     rax, r12
.text:0000000000012D7F                 cmovle  rax, rbp
.text:0000000000012D83                 mov     [rsp+268h+var_1D8], rax
.text:0000000000012D8B                 mov     rax, r12
.text:0000000000012D8E                 cmovge  rax, rbp
.text:0000000000012D92                 cmp     [rsp+268h+var_200], 0
.text:0000000000012D98                 mov     [rsp+268h+var_1F8], rax
.text:0000000000012D9D                 mov     rax, [rsp+268h+var_230]
.text:0000000000012DA2                 mov     esi, [rax+0B4h]
.text:0000000000012DA8                 mov     eax, 8
.text:0000000000012DAD                 mov     [rsp+268h+var_1A0], esi
.text:0000000000012DB4                 jz      short loc_12DEF
.text:0000000000012DB6                 cmp     esi, 1
.text:0000000000012DB9                 mov     ecx, 4
.text:0000000000012DBE                 jz      short loc_12DDE
.text:0000000000012DC0                 mov     rax, [rsp+268h+var_220]
.text:0000000000012DC5                 test    byte ptr [rax+1Ah], 40h
.text:0000000000012DC9                 jnz     loc_13B4E
.text:0000000000012DCF                 cmp     [rsp+268h+var_1B8], 0
.text:0000000000012DD8                 jnz     loc_13B4E
.text:0000000000012DDE
.text:0000000000012DDE loc_12DDE:                              ; CODE XREF: re_search_internal+44E↑j
.text:0000000000012DDE                                         ; re_search_internal+11E0↓j
.text:0000000000012DDE                 xor     edx, edx
.text:0000000000012DE0                 cmp     rbp, r12
.text:0000000000012DE3                 movzx   eax, bl
.text:0000000000012DE6                 setle   dl
.text:0000000000012DE9                 or      eax, ecx
.text:0000000000012DEB                 add     edx, edx
.text:0000000000012DED                 or      eax, edx
.text:0000000000012DEF
.text:0000000000012DEF loc_12DEF:                              ; CODE XREF: re_search_internal+444↑j
.text:0000000000012DEF                 cmp     rbp, [rsp+268h+var_1F8]
.text:0000000000012DF4                 setnle  cl
.text:0000000000012DF7                 cmp     rbp, [rsp+268h+var_1D8]
.text:0000000000012DFF                 setl    dl
.text:0000000000012E02                 or      cl, dl
.text:0000000000012E04                 jnz     loc_138D9
.text:0000000000012E0A                 lea     rcx, [rsp+268h+var_190]
.text:0000000000012E12                 cmp     rbp, r12
.text:0000000000012E15                 mov     edx, 0
.text:0000000000012E1A                 cmovle  rdx, rcx
.text:0000000000012E1E                 test    rdx, rdx
.text:0000000000012E21                 mov     [rsp+268h+var_1A8], rdx
.text:0000000000012E29                 setnz   [rsp+268h+var_199]
.text:0000000000012E31                 sub     eax, 4
.text:0000000000012E34                 mov     [rsp+268h+var_1C0], eax
.text:0000000000012E3B                 lea     rax, [rsp+268h+var_198]
.text:0000000000012E43                 mov     [rsp+268h+var_240], rax
.text:0000000000012E48
.text:0000000000012E48 loc_12E48:                              ; CODE XREF: re_search_internal+F63↓j
.text:0000000000012E48                 mov     eax, [rsp+268h+var_1C0]
.text:0000000000012E4F                 cmp     eax, 4          ; switch 5 cases
.text:0000000000012E52                 ja      def_12E66       ; jumptable 0000000000012E66 default case
.text:0000000000012E58                 lea     rcx, jpt_12E66
.text:0000000000012E5F                 movsxd  rax, ds:(jpt_12E66 - 1C820h)[rcx+rax*4]
.text:0000000000012E63                 add     rax, rcx
.text:0000000000012E66                 jmp     rax             ; switch jump
.text:0000000000012E66 ; ---------------------------------------------------------------------------
.text:0000000000012E68                 align 10h
.text:0000000000012E70
.text:0000000000012E70 loc_12E70:                              ; CODE XREF: re_search_internal+179↑j
.text:0000000000012E70                 mov     rax, [rsp+268h+var_230]
.text:0000000000012E75                 cmp     qword ptr [rax+98h], 0
.text:0000000000012E7D                 setnz   al
.text:0000000000012E80                 movzx   eax, al
.text:0000000000012E83                 mov     [rsp+268h+var_210], eax
.text:0000000000012E87                 jmp     loc_12AEF
.text:0000000000012E87 ; ---------------------------------------------------------------------------
.text:0000000000012E8C                 align 10h
.text:0000000000012E90
.text:0000000000012E90 loc_12E90:                              ; CODE XREF: re_search_internal+8B↑j
.text:0000000000012E90                                         ; re_search_internal+94↑j
.text:0000000000012E90                 mov     [rsp+268h+var_200], 0
.text:0000000000012E99                 jmp     loc_12A16
.text:0000000000012E9E ; ---------------------------------------------------------------------------
.text:0000000000012E9E
.text:0000000000012E9E loc_12E9E:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000012E9E                                         ; DATA XREF: .rodata:jpt_12E66↓o
.text:0000000000012E9E                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 0000000000012E66 case 2
.text:0000000000012EA3                 jle     short loc_12EFF
.text:0000000000012EA5                 mov     rax, [rsp+268h+var_1F0]
.text:0000000000012EAA                 mov     rdi, [rsp+268h+var_200]
.text:0000000000012EAF                 movzx   edx, byte ptr [rax+rbp]
.text:0000000000012EB3                 lea     rax, [rbp+1]
.text:0000000000012EB7                 cmp     byte ptr [rdi+rdx], 0
.text:0000000000012EBB                 jnz     loc_12F48       ; jumptable 0000000000012E66 case 4
.text:0000000000012EC1                 mov     rsi, [rsp+268h+var_200]
.text:0000000000012EC6                 mov     rcx, [rsp+268h+var_1F8]
.text:0000000000012ECB                 mov     rdi, [rsp+268h+var_1F0]
.text:0000000000012ED0                 jmp     short loc_12EEA
.text:0000000000012ED0 ; ---------------------------------------------------------------------------
.text:0000000000012ED2                 align 8
.text:0000000000012ED8
.text:0000000000012ED8 loc_12ED8:                              ; CODE XREF: re_search_internal+580↓j
.text:0000000000012ED8                 movzx   edx, byte ptr [rdi+rax]
.text:0000000000012EDC                 lea     rax, [rax+1]
.text:0000000000012EE0                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000012EE4                 jnz     loc_14081
.text:0000000000012EEA
.text:0000000000012EEA loc_12EEA:                              ; CODE XREF: re_search_internal+560↑j
.text:0000000000012EEA                 cmp     rcx, rax
.text:0000000000012EED                 mov     rbp, rax
.text:0000000000012EF0                 jnz     short loc_12ED8
.text:0000000000012EF2
.text:0000000000012EF2 loc_12EF2:                              ; CODE XREF: re_search_internal+ABF↓j
.text:0000000000012EF2                 mov     rax, [rsp+268h+var_1F8]
.text:0000000000012EF7                 mov     [rsp+268h+var_190], rax
.text:0000000000012EFF
.text:0000000000012EFF loc_12EFF:                              ; CODE XREF: re_search_internal+533↑j
.text:0000000000012EFF                                         ; re_search_internal+A57↓j
.text:0000000000012EFF                 cmp     [rsp+268h+var_1F8], rbp
.text:0000000000012F04                 jnz     short loc_12F48 ; jumptable 0000000000012E66 case 4
.text:0000000000012F06                 xor     eax, eax
.text:0000000000012F08                 mov     rsi, [rsp+268h+var_1F8]
.text:0000000000012F0D                 cmp     [rsp+268h+var_1E0], rsi
.text:0000000000012F15                 jle     short loc_12F20
.text:0000000000012F17                 mov     rax, [rsp+268h+var_1F0]
.text:0000000000012F1C                 movzx   eax, byte ptr [rax+rsi]
.text:0000000000012F20
.text:0000000000012F20 loc_12F20:                              ; CODE XREF: re_search_internal+5A5↑j
.text:0000000000012F20                 mov     rsi, [rsp+268h+var_1B8]
.text:0000000000012F28                 test    rsi, rsi
.text:0000000000012F2B                 jz      short loc_12F31
.text:0000000000012F2D                 movzx   eax, byte ptr [rsi+rax]
.text:0000000000012F31
.text:0000000000012F31 loc_12F31:                              ; CODE XREF: re_search_internal+5BB↑j
.text:0000000000012F31                 mov     rdi, [rsp+268h+var_200]
.text:0000000000012F36                 cmp     byte ptr [rdi+rax], 0
.text:0000000000012F3A                 jz      loc_138D9
.text:0000000000012F40                 mov     rbp, [rsp+268h+var_1F8]
.text:0000000000012F45                 nop     dword ptr [rax]
.text:0000000000012F48
.text:0000000000012F48 loc_12F48:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000012F48                                         ; re_search_internal+54B↑j ...
.text:0000000000012F48                 mov     edx, [rsp+268h+arg_10] ; jumptable 0000000000012E66 case 4
.text:0000000000012F4F                 mov     rdi, [rsp+268h+var_268]
.text:0000000000012F53                 mov     rsi, rbp
.text:0000000000012F56                 call    re_string_reconstruct
.text:0000000000012F5B                 test    eax, eax
.text:0000000000012F5D                 mov     [rsp+268h+var_20C], eax
.text:0000000000012F61                 jnz     loc_134C0
.text:0000000000012F67                 cmp     [rsp+268h+var_1A0], 1
.text:0000000000012F6F                 jz      short loc_12F8D
.text:0000000000012F71                 cmp     [rsp+268h+var_118], 0
.text:0000000000012F7A                 jz      short loc_12F8D
.text:0000000000012F7C                 mov     rax, [rsp+268h+var_138]
.text:0000000000012F84                 cmp     dword ptr [rax], 0FFFFFFFFh
.text:0000000000012F87                 jz      loc_138B1
.text:0000000000012F8D
.text:0000000000012F8D loc_12F8D:                              ; CODE XREF: re_search_internal+5FF↑j
.text:0000000000012F8D                                         ; re_search_internal+60A↑j
.text:0000000000012F8D                 mov     rbx, [rsp+268h+var_B0]
.text:0000000000012F95                 movzx   eax, byte ptr [rsp+268h+var_210]
.text:0000000000012F9A                 mov     [rsp+268h+var_68], 0
.text:0000000000012FA5                 mov     [rsp+268h+var_80], 0
.text:0000000000012FB1                 mov     [rsp+268h+var_88], 0
.text:0000000000012FBD                 mov     [rsp+268h+var_198], 0
.text:0000000000012FC8                 mov     r14, [rbx+48h]
.text:0000000000012FCC                 and     eax, 1
.text:0000000000012FCF                 mov     [rsp+268h+var_19A], al
.text:0000000000012FD6                 mov     rax, [rsp+268h+var_100]
.text:0000000000012FDE                 cmp     byte ptr [r14+68h], 0
.text:0000000000012FE3                 mov     [rsp+268h+var_260], rax
.text:0000000000012FE8                 js      loc_13960
.text:0000000000012FEE
.text:0000000000012FEE loc_12FEE:                              ; CODE XREF: re_search_internal+1013↓j
.text:0000000000012FEE                                         ; re_search_internal+1177↓j ...
.text:0000000000012FEE                 mov     rax, [rsp+268h+var_90]
.text:0000000000012FF6                 test    rax, rax
.text:0000000000012FF9                 jz      short loc_13012
.text:0000000000012FFB                 cmp     qword ptr [rbx+98h], 0
.text:0000000000013003                 mov     rdi, [rsp+268h+var_260]
.text:0000000000013008                 mov     [rax+rdi*8], r14
.text:000000000001300C                 jnz     loc_13EFB
.text:0000000000013012
.text:0000000000013012 loc_13012:                              ; CODE XREF: re_search_internal+689↑j
.text:0000000000013012                 movzx   eax, [rsp+268h+var_199]
.text:000000000001301A                 mov     byte ptr [rsp+268h+var_250], al
.text:000000000001301E                 movzx   eax, byte ptr [r14+68h]
.text:0000000000013023
.text:0000000000013023 loc_13023:                              ; CODE XREF: re_search_internal+15C1↓j
.text:0000000000013023                 test    al, 10h
.text:0000000000013025                 mov     [rsp+268h+var_248], 0FFFFFFFFFFFFFFFFh
.text:000000000001302E                 mov     [rsp+268h+var_238], 0
.text:0000000000013037                 jnz     loc_13EC0
.text:000000000001303D
.text:000000000001303D loc_1303D:                              ; CODE XREF: re_search_internal+1576↓j
.text:000000000001303D                                         ; re_search_internal+15E4↓j
.text:000000000001303D                 mov     rax, [rsp+268h+var_1A8]
.text:0000000000013045                 mov     r8, [rsp+268h+var_100]
.text:000000000001304D                 mov     [rsp+268h+var_218], rax
.text:0000000000013052                 lea     rax, [rsp+268h+var_188]
.text:000000000001305A                 mov     [rsp+268h+var_208], rax
.text:000000000001305F                 lea     rax, [rsp+268h+var_194]
.text:0000000000013067                 mov     [rsp+268h+var_1E8], rax
.text:000000000001306F                 jmp     short loc_130CC
.text:000000000001306F ; ---------------------------------------------------------------------------
.text:0000000000013071                 align 8
.text:0000000000013078
.text:0000000000013078 loc_13078:                              ; CODE XREF: re_search_internal+7E7↓j
.text:0000000000013078                                         ; re_search_internal+1513↓j ...
.text:0000000000013078                 cmp     r14, r13
.text:000000000001307B                 mov     r8, [rsp+268h+var_100]
.text:0000000000013083                 setz    al
.text:0000000000013086                 and     byte ptr [rsp+268h+var_250], al
.text:000000000001308A                 movzx   eax, byte ptr [r13+68h]
.text:000000000001308F                 cmovz   rbx, [rsp+268h+var_260]
.text:0000000000013095                 test    al, 10h
.text:0000000000013097                 mov     [rsp+268h+var_260], rbx
.text:000000000001309C                 jz      short loc_130C9
.text:000000000001309E                 test    al, al
.text:00000000000130A0                 js      loc_13560
.text:00000000000130A6
.text:00000000000130A6 loc_130A6:                              ; CODE XREF: re_search_internal+C17↓j
.text:00000000000130A6                 mov     eax, [rsp+268h+var_210]
.text:00000000000130AA                 mov     [rsp+268h+var_248], r8
.text:00000000000130AF                 test    eax, eax
.text:00000000000130B1                 jz      loc_131D6
.text:00000000000130B7                 mov     [rsp+268h+var_238], 1
.text:00000000000130C0                 mov     [rsp+268h+var_218], 0
.text:00000000000130C9
.text:00000000000130C9 loc_130C9:                              ; CODE XREF: re_search_internal+72C↑j
.text:00000000000130C9                                         ; re_search_internal+C11↓j
.text:00000000000130C9                 mov     r14, r13
.text:00000000000130CC
.text:00000000000130CC loc_130CC:                              ; CODE XREF: re_search_internal+6FF↑j
.text:00000000000130CC                 cmp     [rsp+268h+var_E0], r8
.text:00000000000130D4                 jle     loc_131C4
.text:00000000000130DA                 mov     rax, [rsp+268h+var_108]
.text:00000000000130E2                 lea     rbx, [r8+1]
.text:00000000000130E6                 cmp     rbx, rax
.text:00000000000130E9                 jge     loc_13590
.text:00000000000130EF
.text:00000000000130EF loc_130EF:                              ; CODE XREF: re_search_internal+C28↓j
.text:00000000000130EF                 mov     rax, [rsp+268h+var_118]
.text:00000000000130F7                 cmp     rbx, rax
.text:00000000000130FA                 jge     loc_13880
.text:0000000000013100
.text:0000000000013100 loc_13100:                              ; CODE XREF: re_search_internal+F18↓j
.text:0000000000013100                 test    byte ptr [r14+68h], 20h
.text:0000000000013105                 jnz     loc_135D0
.text:000000000001310B
.text:000000000001310B loc_1310B:                              ; CODE XREF: re_search_internal+C56↓j
.text:000000000001310B                                         ; re_search_internal+FA6↓j
.text:000000000001310B                 lea     rax, [r8+1]
.text:000000000001310F                 mov     [rsp+268h+var_100], rax
.text:0000000000013117                 mov     rax, [rsp+268h+var_140]
.text:000000000001311F                 movzx   r13d, byte ptr [rax+r8]
.text:0000000000013124
.text:0000000000013124 loc_13124:                              ; CODE XREF: re_search_internal+1097↓j
.text:0000000000013124                 mov     rax, [r14+58h]
.text:0000000000013128                 test    rax, rax
.text:000000000001312B                 jz      loc_13840
.text:0000000000013131                 mov     r13, [rax+r13*8]
.text:0000000000013135
.text:0000000000013135 loc_13135:                              ; CODE XREF: re_search_internal+F09↓j
.text:0000000000013135                                         ; re_search_internal+FB5↓j
.text:0000000000013135                 cmp     [rsp+268h+var_90], 0
.text:000000000001313E                 jz      short loc_13154
.text:0000000000013140
.text:0000000000013140 loc_13140:                              ; CODE XREF: re_search_internal+FE3↓j
.text:0000000000013140                 mov     rsi, [rsp+268h+var_268]
.text:0000000000013144                 mov     rdi, [rsp+268h+var_240]
.text:0000000000013149                 mov     rdx, r13
.text:000000000001314C                 call    merge_state_with_log
.text:0000000000013151                 mov     r13, rax
.text:0000000000013154
.text:0000000000013154 loc_13154:                              ; CODE XREF: re_search_internal+7CE↑j
.text:0000000000013154                 test    r13, r13
.text:0000000000013157                 jnz     loc_13078
.text:000000000001315D                 mov     ecx, [rsp+268h+var_198]
.text:0000000000013164                 mov     rdi, [rsp+268h+var_90]
.text:000000000001316C                 test    ecx, ecx
.text:000000000001316E                 jnz     loc_13A30
.text:0000000000013174                 test    rdi, rdi
.text:0000000000013177                 jz      short loc_131C4
.text:0000000000013179                 movzx   eax, [rsp+268h+var_19A]
.text:0000000000013181                 xor     eax, 1
.text:0000000000013184                 test    byte ptr [rsp+268h+var_238], al
.text:0000000000013188                 jnz     short loc_131C4
.text:000000000001318A
.text:000000000001318A loc_1318A:                              ; CODE XREF: re_search_internal+BE8↓j
.text:000000000001318A                 mov     rsi, [rsp+268h+var_88]
.text:0000000000013192                 mov     rax, [rsp+268h+var_100]
.text:000000000001319A                 xor     ecx, ecx
.text:000000000001319C                 jmp     short loc_131B3
.text:000000000001319C ; ---------------------------------------------------------------------------
.text:000000000001319E                 align 20h
.text:00000000000131A0
.text:00000000000131A0 loc_131A0:                              ; CODE XREF: re_search_internal+84A↓j
.text:00000000000131A0                 cmp     qword ptr [rdi+rdx*8], 0
.text:00000000000131A5                 mov     rax, rdx
.text:00000000000131A8                 mov     ecx, 1
.text:00000000000131AD                 jnz     loc_13520
.text:00000000000131B3
.text:00000000000131B3 loc_131B3:                              ; CODE XREF: re_search_internal+82C↑j
.text:00000000000131B3                 lea     rdx, [rax+1]
.text:00000000000131B7                 cmp     rsi, rdx
.text:00000000000131BA                 jge     short loc_131A0
.text:00000000000131BC                 test    cl, cl
.text:00000000000131BE                 jnz     loc_1408E
.text:00000000000131C4
.text:00000000000131C4 loc_131C4:                              ; CODE XREF: re_search_internal+764↑j
.text:00000000000131C4                                         ; re_search_internal+807↑j ...
.text:00000000000131C4                 mov     rax, [rsp+268h+var_218]
.text:00000000000131C9                 test    rax, rax
.text:00000000000131CC                 jz      short loc_131D6
.text:00000000000131CE                 mov     rdi, [rsp+268h+var_260]
.text:00000000000131D3                 add     [rax], rdi
.text:00000000000131D6
.text:00000000000131D6 loc_131D6:                              ; CODE XREF: re_search_internal+741↑j
.text:00000000000131D6                                         ; re_search_internal+85C↑j ...
.text:00000000000131D6                 mov     rax, [rsp+268h+var_248]
.text:00000000000131DB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000131DF                 jz      loc_138A0
.text:00000000000131E5                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000131E9                 jz      loc_139E0
.text:00000000000131EF                 mov     rax, [rsp+268h+var_248]
.text:00000000000131F4                 mov     [rsp+268h+var_A0], rax
.text:00000000000131FC                 mov     rax, [rsp+268h+var_220]
.text:0000000000013201                 test    byte ptr [rax+38h], 10h
.text:0000000000013205                 jnz     loc_139C0
.text:000000000001320B                 cmp     [rsp+268h+arg_0], 1
.text:0000000000013214                 jbe     loc_13B0C
.text:000000000001321A                 mov     rcx, [rsp+268h+var_248]
.text:000000000001321F                 mov     rbx, [rsp+268h+var_90]
.text:0000000000013227                 mov     rdi, [rsp+268h+var_268]
.text:000000000001322B                 mov     rax, [rbx+rcx*8]
.text:000000000001322F                 mov     rsi, [rax+10h]
.text:0000000000013233                 lea     rdx, [rax+18h]
.text:0000000000013237                 call    check_halt_state_context_isra_20
.text:000000000001323C                 mov     r13, rax
.text:000000000001323F                 mov     [rsp+268h+var_98], rax
.text:0000000000013247                 mov     rax, [rsp+268h+var_230]
.text:000000000001324C                 test    byte ptr [rax+0B0h], 1
.text:0000000000013253                 jnz     short loc_13270
.text:0000000000013255                 mov     rax, [rsp+268h+var_230]
.text:000000000001325A                 cmp     qword ptr [rax+98h], 0
.text:0000000000013262                 jz      loc_13BFC
.text:0000000000013268
.text:0000000000013268 loc_13268:                              ; CODE XREF: re_search_internal+11D9↓j
.text:0000000000013268                 mov     r13, [rsp+268h+var_98]
.text:0000000000013270
.text:0000000000013270 loc_13270:                              ; CODE XREF: re_search_internal+8E3↑j
.text:0000000000013270                 mov     rsi, 1FFFFFFFFFFFFFFEh
.text:000000000001327A                 cmp     [rsp+268h+var_248], rsi
.text:000000000001327F                 mov     r15, [rsp+268h+var_B0]
.text:0000000000013287                 ja      loc_13EEB
.text:000000000001328D                 mov     rax, [rsp+268h+var_248]
.text:0000000000013292                 add     rax, 1
.text:0000000000013296                 lea     rbx, ds:0[rax*8]
.text:000000000001329E                 mov     [rsp+268h+var_260], rax
.text:00000000000132A3                 mov     rdi, rbx        ; size
.text:00000000000132A6                 call    _malloc
.text:00000000000132AB                 test    rax, rax
.text:00000000000132AE                 mov     r12, rax
.text:00000000000132B1                 jz      loc_139E0
.text:00000000000132B7                 cmp     qword ptr [r15+98h], 0
.text:00000000000132BF                 jz      loc_13B55
.text:00000000000132C5                 mov     rdi, rbx        ; size
.text:00000000000132C8                 call    _malloc
.text:00000000000132CD                 test    rax, rax
.text:00000000000132D0                 mov     rbp, rax
.text:00000000000132D3                 jz      loc_139D8
.text:00000000000132D9                 mov     r14, [rsp+268h+var_248]
.text:00000000000132DE                 lea     rbx, [rsp+268h+var_188]
.text:00000000000132E6                 mov     [rsp+268h+var_258], r15
.text:00000000000132EB                 mov     [rsp+268h+var_250], rax
.text:00000000000132F0
.text:00000000000132F0 loc_132F0:                              ; CODE XREF: re_search_internal+A4D↓j
.text:00000000000132F0                 mov     rax, [rsp+268h+var_260]
.text:00000000000132F5                 xor     esi, esi        ; c
.text:00000000000132F7                 mov     rdi, rbp        ; s
.text:00000000000132FA                 lea     rdx, ds:0[rax*8] ; n
.text:0000000000013302                 call    _memset
.text:0000000000013307                 pxor    xmm0, xmm0
.text:000000000001330B                 mov     qword ptr [rsp+268h+var_188], r12
.text:0000000000013313                 mov     qword ptr [rsp+268h+var_188+8], rbp
.text:000000000001331B                 mov     [rsp+268h+var_178], r13
.text:0000000000013323                 mov     rsi, rbx
.text:0000000000013326                 mov     [rsp+268h+var_170], r14
.text:000000000001332E                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013332                 movaps  xmmword ptr [rbx+20h], xmm0
.text:0000000000013336                 mov     qword ptr [rbx+30h], 0
.text:000000000001333E                 call    sift_states_backward
.text:0000000000013343                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:000000000001334B                 mov     r15d, eax
.text:000000000001334E                 call    _free
.text:0000000000013353                 test    r15d, r15d
.text:0000000000013356                 jnz     loc_13F74
.text:000000000001335C                 cmp     qword ptr [r12], 0
.text:0000000000013361                 jnz     loc_13FD3
.text:0000000000013367                 cmp     qword ptr [rbp+0], 0
.text:000000000001336C                 jnz     loc_13FD3
.text:0000000000013372                 mov     rdx, [rsp+268h+var_90]
.text:000000000001337A                 nop     word ptr [rax+rax+00h]
.text:0000000000013380
.text:0000000000013380 loc_13380:                              ; CODE XREF: re_search_internal+A25↓j
.text:0000000000013380                                         ; re_search_internal+A2B↓j
.text:0000000000013380                 sub     r14, 1
.text:0000000000013384                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000013388                 jz      loc_13E4B
.text:000000000001338E                 mov     rax, [rdx+r14*8]
.text:0000000000013392                 test    rax, rax
.text:0000000000013395                 jz      short loc_13380
.text:0000000000013397                 test    byte ptr [rax+68h], 10h
.text:000000000001339B                 jz      short loc_13380
.text:000000000001339D                 mov     rsi, [rax+10h]
.text:00000000000133A1                 mov     rdi, [rsp+268h+var_268]
.text:00000000000133A5                 lea     rdx, [rax+18h]
.text:00000000000133A9                 mov     rcx, r14
.text:00000000000133AC                 call    check_halt_state_context_isra_20
.text:00000000000133B1                 mov     r13, rax
.text:00000000000133B4                 lea     rax, [r14+1]
.text:00000000000133B8                 mov     [rsp+268h+var_260], rax
.text:00000000000133BD                 jmp     loc_132F0
.text:00000000000133C2 ; ---------------------------------------------------------------------------
.text:00000000000133C2
.text:00000000000133C2 loc_133C2:                              ; CODE XREF: re_search_internal+4F6↑j
.text:00000000000133C2                                         ; DATA XREF: .rodata:jpt_12E66↓o
.text:00000000000133C2                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 0000000000012E66 case 3
.text:00000000000133C7                 jle     loc_12EFF
.text:00000000000133CD                 mov     rax, [rsp+268h+var_1F0]
.text:00000000000133D2                 mov     rdi, [rsp+268h+var_1B8]
.text:00000000000133DA                 mov     rsi, [rsp+268h+var_200]
.text:00000000000133DF                 movzx   eax, byte ptr [rax+rbp]
.text:00000000000133E3                 movzx   edx, byte ptr [rdi+rax]
.text:00000000000133E7                 lea     rax, [rbp+1]
.text:00000000000133EB                 cmp     byte ptr [rsi+rdx], 0
.text:00000000000133EF                 jnz     loc_12F48       ; jumptable 0000000000012E66 case 4
.text:00000000000133F5                 mov     rsi, [rsp+268h+var_200]
.text:00000000000133FA                 mov     rdi, [rsp+268h+var_1B8]
.text:0000000000013402                 mov     rcx, [rsp+268h+var_1F8]
.text:0000000000013407                 mov     r8, [rsp+268h+var_1F0]
.text:000000000001340C                 jmp     short loc_13427
.text:000000000001340C ; ---------------------------------------------------------------------------
.text:000000000001340E                 align 10h
.text:0000000000013410
.text:0000000000013410 loc_13410:                              ; CODE XREF: re_search_internal+ABD↓j
.text:0000000000013410                 movzx   eax, byte ptr [r8+rax]
.text:0000000000013415                 movzx   edx, byte ptr [rdi+rax]
.text:0000000000013419                 lea     rax, [rbp+1]
.text:000000000001341D                 cmp     byte ptr [rsi+rdx], 0
.text:0000000000013421                 jnz     loc_14081
.text:0000000000013427
.text:0000000000013427 loc_13427:                              ; CODE XREF: re_search_internal+A9C↑j
.text:0000000000013427                 cmp     rcx, rax
.text:000000000001342A                 mov     rbp, rax
.text:000000000001342D                 jnz     short loc_13410
.text:000000000001342F                 jmp     loc_12EF2
.text:0000000000013434 ; ---------------------------------------------------------------------------
.text:0000000000013434
.text:0000000000013434 loc_13434:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000013434                                         ; DATA XREF: .rodata:jpt_12E66↓o
.text:0000000000013434                 cmp     [rsp+268h+var_1D8], rbp ; jumptable 0000000000012E66 cases 0,1
.text:000000000001343C                 jg      loc_138D9
.text:0000000000013442                 xor     ecx, ecx
.text:0000000000013444                 mov     rax, rbp
.text:0000000000013447                 mov     rdi, [rsp+268h+var_200]
.text:000000000001344C                 mov     rsi, [rsp+268h+var_1B8]
.text:0000000000013454                 mov     r9, [rsp+268h+var_1D8]
.text:000000000001345C                 mov     r10, [rsp+268h+var_1F0]
.text:0000000000013461                 mov     r8, [rsp+268h+var_1E0]
.text:0000000000013469                 jmp     short loc_13482
.text:0000000000013469 ; ---------------------------------------------------------------------------
.text:000000000001346B                 align 10h
.text:0000000000013470
.text:0000000000013470 loc_13470:                              ; CODE XREF: re_search_internal+B2B↓j
.text:0000000000013470                 sub     rax, 1
.text:0000000000013474                 mov     ecx, 1
.text:0000000000013479                 cmp     rax, r9
.text:000000000001347C                 jl      loc_13E60
.text:0000000000013482
.text:0000000000013482 loc_13482:                              ; CODE XREF: re_search_internal+AF9↑j
.text:0000000000013482                 xor     edx, edx
.text:0000000000013484                 cmp     r8, rax
.text:0000000000013487                 jle     short loc_1348E
.text:0000000000013489                 movzx   edx, byte ptr [r10+rax]
.text:000000000001348E
.text:000000000001348E loc_1348E:                              ; CODE XREF: re_search_internal+B17↑j
.text:000000000001348E                 test    rsi, rsi
.text:0000000000013491                 jz      short loc_13497
.text:0000000000013493                 movzx   edx, byte ptr [rsi+rdx]
.text:0000000000013497
.text:0000000000013497 loc_13497:                              ; CODE XREF: re_search_internal+B21↑j
.text:0000000000013497                 cmp     byte ptr [rdi+rdx], 0
.text:000000000001349B                 jz      short loc_13470
.text:000000000001349D                 test    cl, cl
.text:000000000001349F                 jz      loc_12F48       ; jumptable 0000000000012E66 case 4
.text:00000000000134A5                 mov     [rsp+268h+var_190], rax
.text:00000000000134AD                 mov     rbp, rax
.text:00000000000134B0                 jmp     loc_12F48       ; jumptable 0000000000012E66 case 4
.text:00000000000134B0 ; ---------------------------------------------------------------------------
.text:00000000000134B5                 align 8
.text:00000000000134B8
.text:00000000000134B8 loc_134B8:                              ; CODE XREF: re_search_internal+1162↓j
.text:00000000000134B8                 mov     [rsp+268h+var_20C], eax
.text:00000000000134BC                 nop     dword ptr [rax+00h]
.text:00000000000134C0
.text:00000000000134C0 loc_134C0:                              ; CODE XREF: re_search_internal+256↑j
.text:00000000000134C0                                         ; re_search_internal+5F1↑j ...
.text:00000000000134C0                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:00000000000134C8
.text:00000000000134C8 loc_134C8:                              ; CODE XREF: re_search_internal+F79↓j
.text:00000000000134C8                                         ; re_search_internal+1080↓j ...
.text:00000000000134C8                 call    _free
.text:00000000000134CD                 mov     rax, [rsp+268h+var_230]
.text:00000000000134D2                 cmp     qword ptr [rax+98h], 0
.text:00000000000134DA                 jnz     loc_13E00
.text:00000000000134E0
.text:00000000000134E0 loc_134E0:                              ; CODE XREF: re_search_internal+14B3↓j
.text:00000000000134E0                 mov     rdi, [rsp+268h+var_268]
.text:00000000000134E4                 call    re_string_destruct
.text:00000000000134E9
.text:00000000000134E9 loc_134E9:                              ; CODE XREF: re_search_internal+156↑j
.text:00000000000134E9                                         ; re_search_internal+F88↓j
.text:00000000000134E9                 mov     rsi, [rsp+268h+var_40]
.text:00000000000134F1                 xor     rsi, fs:28h
.text:00000000000134FA                 mov     eax, [rsp+268h+var_20C]
.text:00000000000134FE                 jnz     loc_1409B
.text:0000000000013504                 add     rsp, 238h
.text:000000000001350B                 pop     rbx
.text:000000000001350C                 pop     rbp
.text:000000000001350D                 pop     r12
.text:000000000001350F                 pop     r13
.text:0000000000013511                 pop     r14
.text:0000000000013513                 pop     r15
.text:0000000000013515                 retn
.text:0000000000013515 ; ---------------------------------------------------------------------------
.text:0000000000013516                 align 20h
.text:0000000000013520
.text:0000000000013520 loc_13520:                              ; CODE XREF: re_search_internal+83D↑j
.text:0000000000013520                 mov     rsi, [rsp+268h+var_268]
.text:0000000000013524                 mov     rdi, [rsp+268h+var_240]
.text:0000000000013529                 mov     [rsp+268h+var_100], rdx
.text:0000000000013531                 xor     edx, edx
.text:0000000000013533                 call    merge_state_with_log
.text:0000000000013538                 mov     edx, [rsp+268h+var_198]
.text:000000000001353F                 test    edx, edx
.text:0000000000013541                 jnz     loc_13E7D
.text:0000000000013547                 test    rax, rax
.text:000000000001354A                 jnz     loc_13E90
.text:0000000000013550                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013558                 jmp     loc_1318A
.text:0000000000013558 ; ---------------------------------------------------------------------------
.text:000000000001355D                 align 20h
.text:0000000000013560
.text:0000000000013560 loc_13560:                              ; CODE XREF: re_search_internal+730↑j
.text:0000000000013560                 mov     rsi, [r13+10h]
.text:0000000000013564                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013568                 lea     rdx, [r13+18h]
.text:000000000001356C                 mov     rcx, r8
.text:000000000001356F                 mov     [rsp+268h+var_258], r8
.text:0000000000013574                 call    check_halt_state_context_isra_20
.text:0000000000013579                 test    rax, rax
.text:000000000001357C                 mov     r8, [rsp+268h+var_258]
.text:0000000000013581                 jz      loc_130C9
.text:0000000000013587                 jmp     loc_130A6
.text:0000000000013587 ; ---------------------------------------------------------------------------
.text:000000000001358C                 align 10h
.text:0000000000013590
.text:0000000000013590 loc_13590:                              ; CODE XREF: re_search_internal+779↑j
.text:0000000000013590                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000013598                 jge     loc_130EF
.text:000000000001359E
.text:000000000001359E loc_1359E:                              ; CODE XREF: re_search_internal+F1E↓j
.text:000000000001359E                 mov     rdi, [rsp+268h+var_268]
.text:00000000000135A2                 lea     esi, [rbx+1]
.text:00000000000135A5                 call    extend_buffers
.text:00000000000135AA                 test    eax, eax
.text:00000000000135AC                 mov     [rsp+268h+var_198], eax
.text:00000000000135B3                 jnz     loc_13E98
.text:00000000000135B9                 test    byte ptr [r14+68h], 20h
.text:00000000000135BE                 mov     r8, [rsp+268h+var_100]
.text:00000000000135C6                 jz      loc_1310B
.text:00000000000135CC                 nop     dword ptr [rax+00h]
.text:00000000000135D0
.text:00000000000135D0 loc_135D0:                              ; CODE XREF: re_search_internal+795↑j
.text:00000000000135D0                 cmp     qword ptr [r14+10h], 0
.text:00000000000135D5                 mov     r13, [rsp+268h+var_B0]
.text:00000000000135DD                 jle     loc_1390B
.text:00000000000135E3                 lea     rax, [r13+0D8h]
.text:00000000000135EA                 xor     r12d, r12d
.text:00000000000135ED                 mov     [rsp+268h+var_1C8], rbx
.text:00000000000135F5                 mov     rbx, r12
.text:00000000000135F8                 mov     r12, r8
.text:00000000000135FB                 mov     [rsp+268h+var_228], rax
.text:0000000000013600                 jmp     loc_13758
.text:0000000000013600 ; ---------------------------------------------------------------------------
.text:0000000000013605                 align 8
.text:0000000000013608
.text:0000000000013608 loc_13608:                              ; CODE XREF: re_search_internal+E3B↓j
.text:0000000000013608                 test    al, 1
.text:000000000001360A                 jz      loc_1374A
.text:0000000000013610                 and     ecx, 8
.text:0000000000013613                 jnz     loc_1374A
.text:0000000000013619
.text:0000000000013619 loc_13619:                              ; CODE XREF: re_search_internal+E44↓j
.text:0000000000013619                                         ; re_search_internal+E4C↓j
.text:0000000000013619                 test    dl, 20h
.text:000000000001361C                 jz      short loc_13626
.text:000000000001361E                 test    al, 2
.text:0000000000013620                 jz      loc_1374A
.text:0000000000013626
.text:0000000000013626 loc_13626:                              ; CODE XREF: re_search_internal+CAC↑j
.text:0000000000013626                 and     edx, 80h
.text:000000000001362C                 jz      short loc_13640
.text:000000000001362E                 test    al, 8
.text:0000000000013630                 jz      loc_1374A
.text:0000000000013636                 db      2Eh
.text:0000000000013636                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013640
.text:0000000000013640 loc_13640:                              ; CODE XREF: re_search_internal+CBC↑j
.text:0000000000013640                                         ; re_search_internal+E11↓j
.text:0000000000013640                 mov     rcx, [rsp+268h+var_268]
.text:0000000000013644                 mov     rsi, [rsp+268h+var_228]
.text:0000000000013649                 mov     r8, r12
.text:000000000001364C                 mov     rdx, r15
.text:000000000001364F                 mov     rdi, rbp
.text:0000000000013652                 call    check_node_accept_bytes_isra_31
.text:0000000000013657                 test    eax, eax
.text:0000000000013659                 jz      loc_13742
.text:000000000001365F                 movsxd  rbp, eax
.text:0000000000013662                 add     rbp, [rsp+268h+var_100]
.text:000000000001366A                 cmp     [rsp+268h+var_68], eax
.text:0000000000013671                 cmovge  eax, [rsp+268h+var_68]
.text:0000000000013679                 mov     rdi, [rsp+268h+var_268]
.text:000000000001367D                 mov     rsi, rbp
.text:0000000000013680                 mov     [rsp+268h+var_68], eax
.text:0000000000013687                 call    clean_state_log_if_needed
.text:000000000001368C                 test    eax, eax
.text:000000000001368E                 mov     [rsp+268h+var_194], eax
.text:0000000000013695                 jnz     loc_13930
.text:000000000001369B                 mov     rax, [r13+18h]
.text:000000000001369F                 lea     r12, ds:0[rbp*8]
.text:00000000000136A7                 mov     rax, [rax+r15*8]
.text:00000000000136AB                 mov     r15, [rsp+268h+var_90]
.text:00000000000136B3                 lea     rdx, [rax+rax*2]
.text:00000000000136B7                 mov     rax, [r13+30h]
.text:00000000000136BB                 add     r15, r12
.text:00000000000136BE                 lea     rdx, [rax+rdx*8]
.text:00000000000136C2                 mov     rax, [r15]
.text:00000000000136C5                 test    rax, rax
.text:00000000000136C8                 jz      loc_137C8
.text:00000000000136CE                 mov     rsi, [rax+50h]
.text:00000000000136D2                 mov     rdi, [rsp+268h+var_208]
.text:00000000000136D7                 call    re_node_set_init_union
.text:00000000000136DC                 test    eax, eax
.text:00000000000136DE                 mov     [rsp+268h+var_194], eax
.text:00000000000136E5                 jnz     loc_13930
.text:00000000000136EB                 mov     edx, [rsp+268h+var_A8]
.text:00000000000136F2                 mov     rdi, [rsp+268h+var_268]
.text:00000000000136F6                 lea     rsi, [rbp-1]
.text:00000000000136FA                 call    re_string_context_at
.text:00000000000136FF                 mov     rdx, [rsp+268h+var_208]
.text:0000000000013704                 mov     rdi, [rsp+268h+var_1E8]
.text:000000000001370C                 mov     ecx, eax
.text:000000000001370E                 add     r12, [rsp+268h+var_90]
.text:0000000000013716                 mov     rsi, r13
.text:0000000000013719                 call    re_acquire_state_context
.text:000000000001371E                 mov     rdi, [rsp+268h+var_178] ; ptr
.text:0000000000013726                 mov     [r12], rax
.text:000000000001372A                 call    _free
.text:000000000001372F                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013737                 cmp     qword ptr [rdi+rbp*8], 0
.text:000000000001373C                 jz      loc_13821
.text:0000000000013742
.text:0000000000013742 loc_13742:                              ; CODE XREF: re_search_internal+CE9↑j
.text:0000000000013742                                         ; re_search_internal+EAB↓j ...
.text:0000000000013742                 mov     r12, [rsp+268h+var_100]
.text:000000000001374A
.text:000000000001374A loc_1374A:                              ; CODE XREF: re_search_internal+C9A↑j
.text:000000000001374A                                         ; re_search_internal+CA3↑j ...
.text:000000000001374A                 add     rbx, 1
.text:000000000001374E                 cmp     rbx, [r14+10h]
.text:0000000000013752                 jge     loc_13900
.text:0000000000013758
.text:0000000000013758 loc_13758:                              ; CODE XREF: re_search_internal+C90↑j
.text:0000000000013758                 mov     rax, [r14+18h]
.text:000000000001375C                 mov     rbp, [r13+0]
.text:0000000000013760                 mov     r15, [rax+rbx*8]
.text:0000000000013764                 mov     rax, r15
.text:0000000000013767                 shl     rax, 4
.text:000000000001376B                 add     rax, rbp
.text:000000000001376E                 test    byte ptr [rax+0Ah], 10h
.text:0000000000013772                 jz      short loc_1374A
.text:0000000000013774                 mov     ecx, [rax+8]
.text:0000000000013777                 test    ecx, 3FF00h
.text:000000000001377D                 mov     dword ptr [rsp+268h+var_258], ecx
.text:0000000000013781                 jz      loc_13640
.text:0000000000013787                 mov     edx, [rsp+268h+var_A8]
.text:000000000001378E                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013792                 mov     rsi, r12
.text:0000000000013795                 call    re_string_context_at
.text:000000000001379A                 mov     ecx, dword ptr [rsp+268h+var_258]
.text:000000000001379E                 shr     ecx, 8
.text:00000000000137A1                 mov     edx, ecx
.text:00000000000137A3                 and     dx, 3FFh
.text:00000000000137A8                 test    cl, 4
.text:00000000000137AB                 jnz     loc_13608
.text:00000000000137B1                 and     ecx, 8
.text:00000000000137B4                 jz      loc_13619
.text:00000000000137BA                 test    al, 1
.text:00000000000137BC                 jz      loc_13619
.text:00000000000137C2                 jmp     short loc_1374A
.text:00000000000137C2 ; ---------------------------------------------------------------------------
.text:00000000000137C4                 align 8
.text:00000000000137C8
.text:00000000000137C8 loc_137C8:                              ; CODE XREF: re_search_internal+D58↑j
.text:00000000000137C8                 movdqu  xmm0, xmmword ptr [rdx]
.text:00000000000137CC                 lea     rsi, [rbp-1]
.text:00000000000137D0                 mov     rdi, [rsp+268h+var_268]
.text:00000000000137D4                 movaps  [rsp+268h+var_188], xmm0
.text:00000000000137DC                 mov     rax, [rdx+10h]
.text:00000000000137E0                 mov     edx, [rsp+268h+var_A8]
.text:00000000000137E7                 mov     [rsp+268h+var_178], rax
.text:00000000000137EF                 call    re_string_context_at
.text:00000000000137F4                 mov     rdi, [rsp+268h+var_1E8]
.text:00000000000137FC                 mov     rdx, [rsp+268h+var_208]
.text:0000000000013801                 mov     ecx, eax
.text:0000000000013803                 mov     rsi, r13
.text:0000000000013806                 call    re_acquire_state_context
.text:000000000001380B                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013813                 mov     [r15], rax
.text:0000000000013816                 cmp     qword ptr [rdi+rbp*8], 0
.text:000000000001381B                 jnz     loc_13742
.text:0000000000013821
.text:0000000000013821 loc_13821:                              ; CODE XREF: re_search_internal+DCC↑j
.text:0000000000013821                 mov     eax, [rsp+268h+var_194]
.text:0000000000013828                 test    eax, eax
.text:000000000001382A                 jz      loc_13742
.text:0000000000013830                 mov     rbx, [rsp+268h+var_1C8]
.text:0000000000013838                 jmp     loc_13940
.text:0000000000013838 ; ---------------------------------------------------------------------------
.text:000000000001383D                 align 20h
.text:0000000000013840
.text:0000000000013840 loc_13840:                              ; CODE XREF: re_search_internal+7BB↑j
.text:0000000000013840                 mov     rbp, [r14+60h]
.text:0000000000013844                 test    rbp, rbp
.text:0000000000013847                 jz      loc_139F5
.text:000000000001384D                 mov     rax, [rsp+268h+var_100]
.text:0000000000013855                 mov     edx, [rsp+268h+var_A8]
.text:000000000001385C                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013860                 lea     rsi, [rax-1]
.text:0000000000013864                 call    re_string_context_at
.text:0000000000013869                 test    al, 1
.text:000000000001386B                 jz      loc_13920
.text:0000000000013871                 mov     r13, [rbp+r13*8+800h]
.text:0000000000013879                 jmp     loc_13135
.text:0000000000013879 ; ---------------------------------------------------------------------------
.text:000000000001387E                 align 20h
.text:0000000000013880
.text:0000000000013880 loc_13880:                              ; CODE XREF: re_search_internal+78A↑j
.text:0000000000013880                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000013888                 jge     loc_13100
.text:000000000001388E                 jmp     loc_1359E
.text:0000000000013893 ; ---------------------------------------------------------------------------
.text:0000000000013893
.text:0000000000013893 loc_13893:                              ; CODE XREF: re_search_internal+125C↓j
.text:0000000000013893                 mov     rdi, r12        ; ptr
.text:0000000000013896                 call    _free
.text:000000000001389B                 nop     dword ptr [rax+rax+00h]
.text:00000000000138A0
.text:00000000000138A0 loc_138A0:                              ; CODE XREF: re_search_internal+86F↑j
.text:00000000000138A0                                         ; re_search_internal+14EB↓j ...
.text:00000000000138A0                 mov     rdi, [rsp+268h+var_268]
.text:00000000000138A4                 call    match_ctx_clean
.text:00000000000138A9                 mov     rbp, [rsp+268h+var_190]
.text:00000000000138B1
.text:00000000000138B1 loc_138B1:                              ; CODE XREF: re_search_internal+617↑j
.text:00000000000138B1                 movsxd  rax, [rsp+268h+var_1BC]
.text:00000000000138B9                 add     rbp, rax
.text:00000000000138BC                 cmp     rbp, [rsp+268h+var_1D8]
.text:00000000000138C4                 mov     [rsp+268h+var_190], rbp
.text:00000000000138CC                 jl      short loc_138D9
.text:00000000000138CE                 cmp     rbp, [rsp+268h+var_1F8]
.text:00000000000138D3                 jle     loc_12E48
.text:00000000000138D9
.text:00000000000138D9 loc_138D9:                              ; CODE XREF: re_search_internal+494↑j
.text:00000000000138D9                                         ; re_search_internal+5CA↑j ...
.text:00000000000138D9                 mov     rdi, [rsp+268h+var_90]
.text:00000000000138E1                 mov     [rsp+268h+var_20C], 1
.text:00000000000138E9                 jmp     loc_134C8
.text:00000000000138E9 ; ---------------------------------------------------------------------------
.text:00000000000138EE                 align 10h
.text:00000000000138F0
.text:00000000000138F0 loc_138F0:                              ; CODE XREF: re_search_internal+EE↑j
.text:00000000000138F0                                         ; re_search_internal+100↑j ...
.text:00000000000138F0                 mov     [rsp+268h+var_20C], 1
.text:00000000000138F8                 jmp     loc_134E9
.text:00000000000138F8 ; ---------------------------------------------------------------------------
.text:00000000000138FD                 align 20h
.text:0000000000013900
.text:0000000000013900 loc_13900:                              ; CODE XREF: re_search_internal+DE2↑j
.text:0000000000013900                 mov     rbx, [rsp+268h+var_1C8]
.text:0000000000013908                 mov     r8, r12
.text:000000000001390B
.text:000000000001390B loc_1390B:                              ; CODE XREF: re_search_internal+C6D↑j
.text:000000000001390B                 mov     [rsp+268h+var_198], 0
.text:0000000000013916                 jmp     loc_1310B
.text:0000000000013916 ; ---------------------------------------------------------------------------
.text:000000000001391B                 align 20h
.text:0000000000013920
.text:0000000000013920 loc_13920:                              ; CODE XREF: re_search_internal+EFB↑j
.text:0000000000013920                 mov     r13, [rbp+r13*8+0]
.text:0000000000013925                 jmp     loc_13135
.text:0000000000013925 ; ---------------------------------------------------------------------------
.text:000000000001392A                 align 10h
.text:0000000000013930
.text:0000000000013930 loc_13930:                              ; CODE XREF: re_search_internal+D25↑j
.text:0000000000013930                                         ; re_search_internal+D75↑j
.text:0000000000013930                 mov     rbx, [rsp+268h+var_1C8]
.text:0000000000013938                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013940
.text:0000000000013940 loc_13940:                              ; CODE XREF: re_search_internal+EC8↑j
.text:0000000000013940                 test    rdi, rdi
.text:0000000000013943                 mov     [rsp+268h+var_198], eax
.text:000000000001394A                 jz      loc_13A30
.text:0000000000013950
.text:0000000000013950 loc_13950:                              ; CODE XREF: re_search_internal+10B3↓j
.text:0000000000013950                 xor     r13d, r13d
.text:0000000000013953                 jmp     loc_13140
.text:0000000000013953 ; ---------------------------------------------------------------------------
.text:0000000000013958                 align 20h
.text:0000000000013960
.text:0000000000013960 loc_13960:                              ; CODE XREF: re_search_internal+678↑j
.text:0000000000013960                 mov     edx, [rsp+268h+var_A8]
.text:0000000000013967                 mov     rdi, [rsp+268h+var_268]
.text:000000000001396B                 lea     rsi, [rax-1]
.text:000000000001396F                 call    re_string_context_at
.text:0000000000013974                 test    al, 1
.text:0000000000013976                 jz      loc_13AE5
.text:000000000001397C                 mov     r14, [rbx+50h]
.text:0000000000013980
.text:0000000000013980 loc_13980:                              ; CODE XREF: re_search_internal+1197↓j
.text:0000000000013980                                         ; re_search_internal+15F3↓j ...
.text:0000000000013980                 test    r14, r14
.text:0000000000013983                 jnz     loc_12FEE
.text:0000000000013989                 mov     eax, [rsp+268h+var_198]
.text:0000000000013990                 cmp     eax, 0Ch
.text:0000000000013993                 mov     [rsp+268h+var_20C], eax
.text:0000000000013997                 jz      loc_134C0
.text:000000000001399D                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:00000000000139A4                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:00000000000139AB                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:00000000000139B2                 mov     edx, 435h       ; line
.text:00000000000139B7                 call    ___assert_fail
.text:00000000000139B7 ; ---------------------------------------------------------------------------
.text:00000000000139BC                 align 20h
.text:00000000000139C0
.text:00000000000139C0 loc_139C0:                              ; CODE XREF: re_search_internal+895↑j
.text:00000000000139C0                 mov     rax, [rsp+268h+var_230]
.text:00000000000139C5                 cmp     qword ptr [rax+98h], 0
.text:00000000000139CD                 jz      loc_13BFC
.text:00000000000139D3                 jmp     loc_13B1F
.text:00000000000139D8 ; ---------------------------------------------------------------------------
.text:00000000000139D8
.text:00000000000139D8 loc_139D8:                              ; CODE XREF: re_search_internal+963↑j
.text:00000000000139D8                 mov     rdi, r12        ; ptr
.text:00000000000139DB                 call    _free
.text:00000000000139E0
.text:00000000000139E0 loc_139E0:                              ; CODE XREF: re_search_internal+32A↑j
.text:00000000000139E0                                         ; re_search_internal+360↑j ...
.text:00000000000139E0                 mov     rdi, [rsp+268h+var_90]
.text:00000000000139E8                 mov     [rsp+268h+var_20C], 0Ch
.text:00000000000139F0                 jmp     loc_134C8
.text:00000000000139F5 ; ---------------------------------------------------------------------------
.text:00000000000139F5
.text:00000000000139F5 loc_139F5:                              ; CODE XREF: re_search_internal+ED7↑j
.text:00000000000139F5                 mov     rdi, [rsp+268h+var_B0]
.text:00000000000139FD                 mov     rsi, r14
.text:0000000000013A00                 call    build_trtable
.text:0000000000013A05                 test    al, al
.text:0000000000013A07                 jnz     loc_13124
.text:0000000000013A0D                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013A15                 mov     [rsp+268h+var_198], 0Ch
.text:0000000000013A20                 test    rdi, rdi
.text:0000000000013A23                 jnz     loc_13950
.text:0000000000013A29                 nop     dword ptr [rax+00000000h]
.text:0000000000013A30
.text:0000000000013A30 loc_13A30:                              ; CODE XREF: re_search_internal+3CF↑j
.text:0000000000013A30                                         ; re_search_internal+7FE↑j ...
.text:0000000000013A30                 mov     [rsp+268h+var_20C], 0Ch
.text:0000000000013A38                 jmp     loc_134C8
.text:0000000000013A3D ; ---------------------------------------------------------------------------
.text:0000000000013A3D
.text:0000000000013A3D def_12E66:                              ; CODE XREF: re_search_internal+4E2↑j
.text:0000000000013A3D                 mov     rbx, [rsp+268h+var_200] ; jumptable 0000000000012E66 default case
.text:0000000000013A42                 mov     r13d, [rsp+268h+var_1BC]
.text:0000000000013A4A                 mov     r14, [rsp+268h+var_1D8]
.text:0000000000013A52                 mov     r15, [rsp+268h+var_1F8]
.text:0000000000013A57                 mov     r12, [rsp+268h+var_1E0]
.text:0000000000013A5F                 jmp     short loc_13AA8
.text:0000000000013A5F ; ---------------------------------------------------------------------------
.text:0000000000013A61                 align 8
.text:0000000000013A68
.text:0000000000013A68 loc_13A68:                              ; CODE XREF: re_search_internal+114B↓j
.text:0000000000013A68                                         ; re_search_internal+1173↓j
.text:0000000000013A68                 cmp     r12, rbp
.text:0000000000013A6B                 mov     rax, rbx
.text:0000000000013A6E                 jle     short loc_13A7F
.text:0000000000013A70                 mov     rax, [rsp+268h+var_140]
.text:0000000000013A78                 movzx   eax, byte ptr [rax+rdx]
.text:0000000000013A7C                 add     rax, rbx
.text:0000000000013A7F
.text:0000000000013A7F loc_13A7F:                              ; CODE XREF: re_search_internal+10FE↑j
.text:0000000000013A7F                 cmp     byte ptr [rax], 0
.text:0000000000013A82                 jnz     loc_12F48       ; jumptable 0000000000012E66 case 4
.text:0000000000013A88                 movsxd  rax, r13d
.text:0000000000013A8B                 add     rbp, rax
.text:0000000000013A8E                 cmp     rbp, r14
.text:0000000000013A91                 mov     [rsp+268h+var_190], rbp
.text:0000000000013A99                 jl      loc_138D9
.text:0000000000013A9F                 cmp     rbp, r15
.text:0000000000013AA2                 jg      loc_138D9
.text:0000000000013AA8
.text:0000000000013AA8 loc_13AA8:                              ; CODE XREF: re_search_internal+10EF↑j
.text:0000000000013AA8                 mov     rdx, rbp
.text:0000000000013AAB                 sub     rdx, [rsp+268h+var_120]
.text:0000000000013AB3                 cmp     [rsp+268h+var_110], rdx
.text:0000000000013ABB                 ja      short loc_13A68
.text:0000000000013ABD                 mov     edx, [rsp+268h+arg_10]
.text:0000000000013AC4                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013AC8                 mov     rsi, rbp
.text:0000000000013ACB                 call    re_string_reconstruct
.text:0000000000013AD0                 test    eax, eax
.text:0000000000013AD2                 jnz     loc_134B8
.text:0000000000013AD8                 mov     rdx, rbp
.text:0000000000013ADB                 sub     rdx, [rsp+268h+var_120]
.text:0000000000013AE3                 jmp     short loc_13A68
.text:0000000000013AE5 ; ---------------------------------------------------------------------------
.text:0000000000013AE5
.text:0000000000013AE5 loc_13AE5:                              ; CODE XREF: re_search_internal+1006↑j
.text:0000000000013AE5                 test    eax, eax
.text:0000000000013AE7                 jz      loc_12FEE
.text:0000000000013AED                 mov     edx, eax
.text:0000000000013AEF                 and     edx, 6
.text:0000000000013AF2                 cmp     edx, 6
.text:0000000000013AF5                 jz      loc_13F5F
.text:0000000000013AFB                 test    al, 2
.text:0000000000013AFD                 jz      loc_13FB0
.text:0000000000013B03                 mov     r14, [rbx+58h]
.text:0000000000013B07                 jmp     loc_13980
.text:0000000000013B0C ; ---------------------------------------------------------------------------
.text:0000000000013B0C
.text:0000000000013B0C loc_13B0C:                              ; CODE XREF: re_search_internal+8A4↑j
.text:0000000000013B0C                 mov     rax, [rsp+268h+var_230]
.text:0000000000013B11                 cmp     qword ptr [rax+98h], 0
.text:0000000000013B19                 jz      loc_13BFC
.text:0000000000013B1F
.text:0000000000013B1F loc_13B1F:                              ; CODE XREF: re_search_internal+1063↑j
.text:0000000000013B1F                 mov     rcx, [rsp+268h+var_248]
.text:0000000000013B24                 mov     rbx, [rsp+268h+var_90]
.text:0000000000013B2C                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013B30                 mov     rax, [rbx+rcx*8]
.text:0000000000013B34                 mov     rsi, [rax+10h]
.text:0000000000013B38                 lea     rdx, [rax+18h]
.text:0000000000013B3C                 call    check_halt_state_context_isra_20
.text:0000000000013B41                 mov     [rsp+268h+var_98], rax
.text:0000000000013B49                 jmp     loc_13268
.text:0000000000013B4E ; ---------------------------------------------------------------------------
.text:0000000000013B4E
.text:0000000000013B4E loc_13B4E:                              ; CODE XREF: re_search_internal+459↑j
.text:0000000000013B4E                                         ; re_search_internal+468↑j
.text:0000000000013B4E                 xor     ecx, ecx
.text:0000000000013B50                 jmp     loc_12DDE
.text:0000000000013B55 ; ---------------------------------------------------------------------------
.text:0000000000013B55
.text:0000000000013B55 loc_13B55:                              ; CODE XREF: re_search_internal+94F↑j
.text:0000000000013B55                 pxor    xmm0, xmm0
.text:0000000000013B59                 mov     qword ptr [rsp+268h+var_188], rax
.text:0000000000013B61                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013B65                 mov     rax, [rsp+268h+var_248]
.text:0000000000013B6A                 lea     rbx, [rsp+268h+var_188]
.text:0000000000013B72                 mov     qword ptr [rsp+268h+var_188+8], 0
.text:0000000000013B7E                 mov     [rsp+268h+var_178], r13
.text:0000000000013B86                 mov     rsi, rbx
.text:0000000000013B89                 mov     [rsp+268h+ptr], 0
.text:0000000000013B95                 movaps  [rsp+268h+var_168], xmm0
.text:0000000000013B9D                 mov     [rsp+268h+var_170], rax
.text:0000000000013BA5                 call    sift_states_backward
.text:0000000000013BAA                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:0000000000013BB2                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000013BB6                 call    _free
.text:0000000000013BBB                 mov     eax, dword ptr [rsp+268h+var_260]
.text:0000000000013BBF                 test    eax, eax
.text:0000000000013BC1                 jnz     loc_14008
.text:0000000000013BC7                 cmp     qword ptr [r12], 0
.text:0000000000013BCC                 jz      loc_13893
.text:0000000000013BD2
.text:0000000000013BD2 loc_13BD2:                              ; CODE XREF: re_search_internal+1692↓j
.text:0000000000013BD2                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:0000000000013BDA                 call    _free
.text:0000000000013BDF                 mov     rax, [rsp+268h+var_248]
.text:0000000000013BE4                 mov     [rsp+268h+var_90], r12
.text:0000000000013BEC                 mov     [rsp+268h+var_98], r13
.text:0000000000013BF4                 mov     [rsp+268h+var_A0], rax
.text:0000000000013BFC
.text:0000000000013BFC loc_13BFC:                              ; CODE XREF: re_search_internal+8F2↑j
.text:0000000000013BFC                                         ; re_search_internal+105D↑j ...
.text:0000000000013BFC                 cmp     [rsp+268h+arg_0], 0
.text:0000000000013C05                 jz      loc_134C0
.text:0000000000013C0B                 cmp     [rsp+268h+arg_0], 1
.text:0000000000013C14                 jz      loc_14038
.text:0000000000013C1A                 mov     rsi, [rsp+268h+var_1B0]
.text:0000000000013C22                 mov     rcx, [rsp+268h+arg_0]
.text:0000000000013C2A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013C31                 shl     rcx, 4
.text:0000000000013C35                 lea     rax, [rsi+10h]
.text:0000000000013C39                 add     rcx, rsi
.text:0000000000013C3C
.text:0000000000013C3C loc_13C3C:                              ; CODE XREF: re_search_internal+12DA↓j
.text:0000000000013C3C                 mov     [rax+8], rdx
.text:0000000000013C40                 mov     [rax], rdx
.text:0000000000013C43                 add     rax, 10h
.text:0000000000013C47                 cmp     rcx, rax
.text:0000000000013C4A                 jnz     short loc_13C3C
.text:0000000000013C4C                 mov     rdi, [rsp+268h+var_1B0]
.text:0000000000013C54                 mov     rax, [rsp+268h+var_A0]
.text:0000000000013C5C                 mov     [rdi+8], rax
.text:0000000000013C60                 mov     rax, [rsp+268h+var_220]
.text:0000000000013C65                 mov     qword ptr [rdi], 0
.text:0000000000013C6C                 test    byte ptr [rax+38h], 10h
.text:0000000000013C70                 jnz     loc_14053
.text:0000000000013C76                 cmp     [rsp+268h+arg_0], 1
.text:0000000000013C7F                 jz      loc_14053
.text:0000000000013C85                 mov     rax, [rsp+268h+var_230]
.text:0000000000013C8A                 xor     r8d, r8d
.text:0000000000013C8D                 test    byte ptr [rax+0B0h], 1
.text:0000000000013C94                 jz      short loc_13CA5
.text:0000000000013C96                 xor     r8d, r8d
.text:0000000000013C99                 cmp     qword ptr [rax+98h], 0
.text:0000000000013CA1                 setnle  r8b
.text:0000000000013CA5
.text:0000000000013CA5 loc_13CA5:                              ; CODE XREF: re_search_internal+1324↑j
.text:0000000000013CA5                 mov     rbx, [rsp+268h+var_1B0]
.text:0000000000013CAD                 mov     rdx, [rsp+268h+arg_0]
.text:0000000000013CB5                 mov     rsi, [rsp+268h+var_268]
.text:0000000000013CB9                 mov     rdi, [rsp+268h+var_220]
.text:0000000000013CBE                 mov     rcx, rbx
.text:0000000000013CC1                 call    set_regs
.text:0000000000013CC6                 test    eax, eax
.text:0000000000013CC8                 jnz     loc_13F9D
.text:0000000000013CCE                 mov     rax, [rbx]
.text:0000000000013CD1
.text:0000000000013CD1 loc_13CD1:                              ; CODE XREF: re_search_internal+16E5↓j
.text:0000000000013CD1                 movzx   r11d, [rsp+268h+var_BC]
.text:0000000000013CDA                 mov     r10, [rsp+268h+var_118]
.text:0000000000013CE2                 xor     ecx, ecx
.text:0000000000013CE4                 mov     r9, [rsp+268h+var_130]
.text:0000000000013CEC                 mov     r8, [rsp+268h+var_110]
.text:0000000000013CF4                 mov     rdi, [rsp+268h+var_190]
.text:0000000000013CFC                 mov     rdx, [rsp+268h+var_1B0]
.text:0000000000013D04                 jmp     short loc_13D09
.text:0000000000013D06 ; ---------------------------------------------------------------------------
.text:0000000000013D06
.text:0000000000013D06 loc_13D06:                              ; CODE XREF: re_search_internal+13C9↓j
.text:0000000000013D06                 mov     rax, [rdx]
.text:0000000000013D09
.text:0000000000013D09 loc_13D09:                              ; CODE XREF: re_search_internal+1394↑j
.text:0000000000013D09                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000013D0D                 jz      short loc_13D29
.text:0000000000013D0F                 test    r11b, r11b
.text:0000000000013D12                 mov     rsi, [rdx+8]
.text:0000000000013D16                 jnz     loc_1405A
.text:0000000000013D1C
.text:0000000000013D1C loc_13D1C:                              ; CODE XREF: re_search_internal+16FF↓j
.text:0000000000013D1C                                         ; re_search_internal+1707↓j
.text:0000000000013D1C                 add     rax, rdi
.text:0000000000013D1F                 add     rsi, rdi
.text:0000000000013D22                 mov     [rdx], rax
.text:0000000000013D25                 mov     [rdx+8], rsi
.text:0000000000013D29
.text:0000000000013D29 loc_13D29:                              ; CODE XREF: re_search_internal+139D↑j
.text:0000000000013D29                 add     rcx, 1
.text:0000000000013D2D                 add     rdx, 10h
.text:0000000000013D31                 cmp     rcx, [rsp+268h+arg_0]
.text:0000000000013D39                 jnz     short loc_13D06
.text:0000000000013D3B                 cmp     [rsp+268h+var_1D0], 0
.text:0000000000013D44                 jle     short loc_13D85
.text:0000000000013D46                 mov     rdx, [rsp+268h+var_1D0]
.text:0000000000013D4E                 mov     rdi, [rsp+268h+var_1B0]
.text:0000000000013D56                 mov     rax, rcx
.text:0000000000013D59                 shl     rax, 4
.text:0000000000013D5D                 add     rdx, rcx
.text:0000000000013D60                 lea     rax, [rdi+rax+8]
.text:0000000000013D65                 shl     rdx, 4
.text:0000000000013D69                 lea     rsi, [rdi+rdx+8]
.text:0000000000013D6E                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013D75
.text:0000000000013D75 loc_13D75:                              ; CODE XREF: re_search_internal+1413↓j
.text:0000000000013D75                 mov     [rax-8], rdx
.text:0000000000013D79                 mov     [rax], rdx
.text:0000000000013D7C                 add     rax, 10h
.text:0000000000013D80                 cmp     rsi, rax
.text:0000000000013D83                 jnz     short loc_13D75
.text:0000000000013D85
.text:0000000000013D85 loc_13D85:                              ; CODE XREF: re_search_internal+13D4↑j
.text:0000000000013D85                 mov     rax, [rsp+268h+var_230]
.text:0000000000013D8A                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013D92                 mov     r9, [rax+0E0h]
.text:0000000000013D99                 test    r9, r9
.text:0000000000013D9C                 jz      loc_134C8
.text:0000000000013DA2                 mov     r10, [rsp+268h+var_1B0]
.text:0000000000013DAA                 xor     r8d, r8d
.text:0000000000013DAD                 lea     rdx, [r10+10h]
.text:0000000000013DB1                 jmp     short loc_13DE9
.text:0000000000013DB3 ; ---------------------------------------------------------------------------
.text:0000000000013DB3
.text:0000000000013DB3 loc_13DB3:                              ; CODE XREF: re_search_internal+1480↓j
.text:0000000000013DB3                 mov     rax, [r9+rsi*8-8]
.text:0000000000013DB8                 cmp     rax, r8
.text:0000000000013DBB                 jz      short loc_13DE2
.text:0000000000013DBD                 add     rax, 1
.text:0000000000013DC1                 shl     rax, 4
.text:0000000000013DC5                 mov     rax, [r10+rax]
.text:0000000000013DC9                 mov     [rdx], rax
.text:0000000000013DCC                 mov     rax, [r9+rsi*8-8]
.text:0000000000013DD1                 add     rax, 1
.text:0000000000013DD5                 shl     rax, 4
.text:0000000000013DD9                 mov     rax, [r10+rax+8]
.text:0000000000013DDE                 mov     [rdx+8], rax
.text:0000000000013DE2
.text:0000000000013DE2 loc_13DE2:                              ; CODE XREF: re_search_internal+144B↑j
.text:0000000000013DE2                 add     rdx, 10h
.text:0000000000013DE6                 mov     r8, rsi
.text:0000000000013DE9
.text:0000000000013DE9 loc_13DE9:                              ; CODE XREF: re_search_internal+1441↑j
.text:0000000000013DE9                 lea     rsi, [r8+1]
.text:0000000000013DED                 cmp     rsi, rcx
.text:0000000000013DF0                 jnz     short loc_13DB3
.text:0000000000013DF2                 jmp     loc_134C8
.text:0000000000013DF2 ; ---------------------------------------------------------------------------
.text:0000000000013DF7                 align 20h
.text:0000000000013E00
.text:0000000000013E00 loc_13E00:                              ; CODE XREF: re_search_internal+B6A↑j
.text:0000000000013E00                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013E04                 call    match_ctx_clean
.text:0000000000013E09                 mov     rdi, [rsp+268h+var_50] ; ptr
.text:0000000000013E11                 call    _free
.text:0000000000013E16                 mov     rdi, [rsp+268h+var_70] ; ptr
.text:0000000000013E1E                 call    _free
.text:0000000000013E23                 jmp     loc_134E0
.text:0000000000013E28 ; ---------------------------------------------------------------------------
.text:0000000000013E28
.text:0000000000013E28 loc_13E28:                              ; CODE XREF: re_search_internal+393↑j
.text:0000000000013E28                 mov     rax, [rsp+268h+var_230]
.text:0000000000013E2D                 test    byte ptr [rax+0B0h], 2
.text:0000000000013E34                 jnz     loc_12D09
.text:0000000000013E3A                 mov     [rsp+268h+var_90], 0
.text:0000000000013E46                 jmp     loc_12D45
.text:0000000000013E4B ; ---------------------------------------------------------------------------
.text:0000000000013E4B
.text:0000000000013E4B loc_13E4B:                              ; CODE XREF: re_search_internal+A18↑j
.text:0000000000013E4B                 mov     rdi, r12        ; ptr
.text:0000000000013E4E                 call    _free
.text:0000000000013E53                 mov     rdi, rbp        ; ptr
.text:0000000000013E56                 call    _free
.text:0000000000013E5B                 jmp     loc_138A0
.text:0000000000013E60 ; ---------------------------------------------------------------------------
.text:0000000000013E60
.text:0000000000013E60 loc_13E60:                              ; CODE XREF: re_search_internal+B0C↑j
.text:0000000000013E60                 mov     [rsp+268h+var_190], rax
.text:0000000000013E68                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013E70                 mov     [rsp+268h+var_20C], 1
.text:0000000000013E78                 jmp     loc_134C8
.text:0000000000013E7D ; ---------------------------------------------------------------------------
.text:0000000000013E7D
.text:0000000000013E7D loc_13E7D:                              ; CODE XREF: re_search_internal+BD1↑j
.text:0000000000013E7D                 test    rax, rax
.text:0000000000013E80                 mov     r13, rax
.text:0000000000013E83                 jnz     loc_13078
.text:0000000000013E89                 jmp     loc_131C4
.text:0000000000013E89 ; ---------------------------------------------------------------------------
.text:0000000000013E8E                 align 10h
.text:0000000000013E90
.text:0000000000013E90 loc_13E90:                              ; CODE XREF: re_search_internal+BDA↑j
.text:0000000000013E90                 mov     r13, rax
.text:0000000000013E93                 jmp     loc_13078
.text:0000000000013E98 ; ---------------------------------------------------------------------------
.text:0000000000013E98
.text:0000000000013E98 loc_13E98:                              ; CODE XREF: re_search_internal+C43↑j
.text:0000000000013E98                 cmp     eax, 0Ch
.text:0000000000013E9B                 jz      loc_139E0
.text:0000000000013EA1                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:0000000000013EA8                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000013EAF                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:0000000000013EB6                 mov     edx, 46Ch       ; line
.text:0000000000013EBB                 call    ___assert_fail
.text:0000000000013EC0 ; ---------------------------------------------------------------------------
.text:0000000000013EC0
.text:0000000000013EC0 loc_13EC0:                              ; CODE XREF: re_search_internal+6C7↑j
.text:0000000000013EC0                 cmp     byte ptr [r14+68h], 0
.text:0000000000013EC5                 js      short loc_13F36
.text:0000000000013EC7
.text:0000000000013EC7 loc_13EC7:                              ; CODE XREF: re_search_internal+15EA↓j
.text:0000000000013EC7                 mov     esi, [rsp+268h+var_210]
.text:0000000000013ECB                 mov     rax, [rsp+268h+var_260]
.text:0000000000013ED0                 test    esi, esi
.text:0000000000013ED2                 mov     [rsp+268h+var_248], rax
.text:0000000000013ED7                 jz      loc_131D6
.text:0000000000013EDD                 mov     [rsp+268h+var_238], 1
.text:0000000000013EE6                 jmp     loc_1303D
.text:0000000000013EEB ; ---------------------------------------------------------------------------
.text:0000000000013EEB
.text:0000000000013EEB loc_13EEB:                              ; CODE XREF: re_search_internal+917↑j
.text:0000000000013EEB                 mov     rdi, rbx
.text:0000000000013EEE                 mov     [rsp+268h+var_20C], 0Ch
.text:0000000000013EF6                 jmp     loc_134C8
.text:0000000000013EFB ; ---------------------------------------------------------------------------
.text:0000000000013EFB
.text:0000000000013EFB loc_13EFB:                              ; CODE XREF: re_search_internal+69C↑j
.text:0000000000013EFB                 lea     rbx, [r14+10h]
.text:0000000000013EFF                 lea     rbp, [r14+18h]
.text:0000000000013F03                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013F07                 xor     ecx, ecx
.text:0000000000013F09                 mov     rdx, rbp
.text:0000000000013F0C                 mov     rsi, rbx
.text:0000000000013F0F                 call    check_subexp_matching_top_isra_18
.text:0000000000013F14                 test    eax, eax
.text:0000000000013F16                 mov     [rsp+268h+var_198], eax
.text:0000000000013F1D                 jnz     short loc_13F68
.text:0000000000013F1F                 movzx   eax, byte ptr [r14+68h]
.text:0000000000013F24                 test    al, 40h
.text:0000000000013F26                 jnz     loc_14010
.text:0000000000013F2C
.text:0000000000013F2C loc_13F2C:                              ; CODE XREF: re_search_internal+16C3↓j
.text:0000000000013F2C                 mov     byte ptr [rsp+268h+var_250], 0
.text:0000000000013F31                 jmp     loc_13023
.text:0000000000013F36 ; ---------------------------------------------------------------------------
.text:0000000000013F36
.text:0000000000013F36 loc_13F36:                              ; CODE XREF: re_search_internal+1555↑j
.text:0000000000013F36                 mov     rsi, [r14+10h]
.text:0000000000013F3A                 mov     rcx, [rsp+268h+var_260]
.text:0000000000013F3F                 lea     rdx, [r14+18h]
.text:0000000000013F43                 mov     rdi, [rsp+268h+var_268]
.text:0000000000013F47                 call    check_halt_state_context_isra_20
.text:0000000000013F4C                 test    rax, rax
.text:0000000000013F4F                 mov     [rsp+268h+var_238], rax
.text:0000000000013F54                 jz      loc_1303D
.text:0000000000013F5A                 jmp     loc_13EC7
.text:0000000000013F5F ; ---------------------------------------------------------------------------
.text:0000000000013F5F
.text:0000000000013F5F loc_13F5F:                              ; CODE XREF: re_search_internal+1185↑j
.text:0000000000013F5F                 mov     r14, [rbx+60h]
.text:0000000000013F63                 jmp     loc_13980
.text:0000000000013F68 ; ---------------------------------------------------------------------------
.text:0000000000013F68
.text:0000000000013F68 loc_13F68:                              ; CODE XREF: re_search_internal+15AD↑j
.text:0000000000013F68                                         ; re_search_internal+16B8↓j
.text:0000000000013F68                 cdqe
.text:0000000000013F6A                 mov     [rsp+268h+var_248], rax
.text:0000000000013F6F                 jmp     loc_131D6
.text:0000000000013F74 ; ---------------------------------------------------------------------------
.text:0000000000013F74
.text:0000000000013F74 loc_13F74:                              ; CODE XREF: re_search_internal+9E6↑j
.text:0000000000013F74                 mov     r14, [rsp+268h+var_250]
.text:0000000000013F79                 mov     eax, r15d
.text:0000000000013F7C
.text:0000000000013F7C loc_13F7C:                              ; CODE XREF: re_search_internal+169B↓j
.text:0000000000013F7C                 mov     rdi, r12        ; ptr
.text:0000000000013F7F                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000013F83                 call    _free
.text:0000000000013F88                 mov     rdi, r14        ; ptr
.text:0000000000013F8B                 call    _free
.text:0000000000013F90                 mov     eax, dword ptr [rsp+268h+var_260]
.text:0000000000013F94                 cmp     eax, 1
.text:0000000000013F97                 jz      loc_138A0
.text:0000000000013F9D
.text:0000000000013F9D loc_13F9D:                              ; CODE XREF: re_search_internal+1358↑j
.text:0000000000013F9D                 mov     rdi, [rsp+268h+var_90]
.text:0000000000013FA5                 mov     [rsp+268h+var_20C], eax
.text:0000000000013FA9                 jmp     loc_134C8
.text:0000000000013FA9 ; ---------------------------------------------------------------------------
.text:0000000000013FAE                 align 10h
.text:0000000000013FB0
.text:0000000000013FB0 loc_13FB0:                              ; CODE XREF: re_search_internal+118D↑j
.text:0000000000013FB0                 test    al, 4
.text:0000000000013FB2                 jz      loc_12FEE
.text:0000000000013FB8                 mov     rdx, [r14+50h]
.text:0000000000013FBC                 mov     rdi, [rsp+268h+var_240]
.text:0000000000013FC1                 mov     ecx, eax
.text:0000000000013FC3                 mov     rsi, rbx
.text:0000000000013FC6                 call    re_acquire_state_context
.text:0000000000013FCB                 mov     r14, rax
.text:0000000000013FCE                 jmp     loc_13980
.text:0000000000013FD3 ; ---------------------------------------------------------------------------
.text:0000000000013FD3
.text:0000000000013FD3 loc_13FD3:                              ; CODE XREF: re_search_internal+9F1↑j
.text:0000000000013FD3                                         ; re_search_internal+9FC↑j
.text:0000000000013FD3                 mov     r15, [rsp+268h+var_258]
.text:0000000000013FD8                 mov     rcx, [rsp+268h+var_260]
.text:0000000000013FDD                 mov     rdx, rbp
.text:0000000000013FE0                 mov     rsi, r12
.text:0000000000013FE3                 mov     [rsp+268h+var_248], r14
.text:0000000000013FE8                 mov     rdi, r15
.text:0000000000013FEB                 call    merge_state_array
.text:0000000000013FF0                 mov     rdi, rbp        ; ptr
.text:0000000000013FF3                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000013FF7                 call    _free
.text:0000000000013FFC                 mov     eax, dword ptr [rsp+268h+var_260]
.text:0000000000014000                 test    eax, eax
.text:0000000000014002                 jz      loc_13BD2
.text:0000000000014008
.text:0000000000014008 loc_14008:                              ; CODE XREF: re_search_internal+1251↑j
.text:0000000000014008                 xor     r14d, r14d
.text:000000000001400B                 jmp     loc_13F7C
.text:0000000000014010 ; ---------------------------------------------------------------------------
.text:0000000000014010
.text:0000000000014010 loc_14010:                              ; CODE XREF: re_search_internal+15B6↑j
.text:0000000000014010                 mov     rdi, [rsp+268h+var_268]
.text:0000000000014014                 mov     rdx, rbp
.text:0000000000014017                 mov     rsi, rbx
.text:000000000001401A                 call    transit_state_bkref_isra_34
.text:000000000001401F                 test    eax, eax
.text:0000000000014021                 mov     [rsp+268h+var_198], eax
.text:0000000000014028                 jnz     loc_13F68
.text:000000000001402E                 movzx   eax, byte ptr [r14+68h]
.text:0000000000014033                 jmp     loc_13F2C
.text:0000000000014038 ; ---------------------------------------------------------------------------
.text:0000000000014038
.text:0000000000014038 loc_14038:                              ; CODE XREF: re_search_internal+12A4↑j
.text:0000000000014038                 mov     rsi, [rsp+268h+var_1B0]
.text:0000000000014040                 mov     rax, [rsp+268h+var_A0]
.text:0000000000014048                 mov     qword ptr [rsi], 0
.text:000000000001404F                 mov     [rsi+8], rax
.text:0000000000014053
.text:0000000000014053 loc_14053:                              ; CODE XREF: re_search_internal+1300↑j
.text:0000000000014053                                         ; re_search_internal+130F↑j
.text:0000000000014053                 xor     eax, eax
.text:0000000000014055                 jmp     loc_13CD1
.text:000000000001405A ; ---------------------------------------------------------------------------
.text:000000000001405A
.text:000000000001405A loc_1405A:                              ; CODE XREF: re_search_internal+13A6↑j
.text:000000000001405A                 cmp     r10, rax
.text:000000000001405D                 jz      short loc_1407C
.text:000000000001405F                 mov     rax, [r9+rax*8]
.text:0000000000014063
.text:0000000000014063 loc_14063:                              ; CODE XREF: re_search_internal+170F↓j
.text:0000000000014063                 cmp     r10, rsi
.text:0000000000014066                 mov     [rdx], rax
.text:0000000000014069                 jz      short loc_14074
.text:000000000001406B                 mov     rsi, [r9+rsi*8]
.text:000000000001406F                 jmp     loc_13D1C
.text:0000000000014074 ; ---------------------------------------------------------------------------
.text:0000000000014074
.text:0000000000014074 loc_14074:                              ; CODE XREF: re_search_internal+16F9↑j
.text:0000000000014074                 mov     rsi, r8
.text:0000000000014077                 jmp     loc_13D1C
.text:000000000001407C ; ---------------------------------------------------------------------------
.text:000000000001407C
.text:000000000001407C loc_1407C:                              ; CODE XREF: re_search_internal+16ED↑j
.text:000000000001407C                 mov     rax, r8
.text:000000000001407F                 jmp     short loc_14063
.text:0000000000014081 ; ---------------------------------------------------------------------------
.text:0000000000014081
.text:0000000000014081 loc_14081:                              ; CODE XREF: re_search_internal+574↑j
.text:0000000000014081                                         ; re_search_internal+AB1↑j
.text:0000000000014081                 mov     [rsp+268h+var_190], rbp
.text:0000000000014089                 jmp     loc_12F48       ; jumptable 0000000000012E66 case 4
.text:000000000001408E ; ---------------------------------------------------------------------------
.text:000000000001408E
.text:000000000001408E loc_1408E:                              ; CODE XREF: re_search_internal+84E↑j
.text:000000000001408E                 mov     [rsp+268h+var_100], rax
.text:0000000000014096                 jmp     loc_131C4
.text:000000000001409B ; ---------------------------------------------------------------------------
.text:000000000001409B
.text:000000000001409B loc_1409B:                              ; CODE XREF: re_search_internal+B8E↑j
.text:000000000001409B                 call    ___stack_chk_fail
.text:000000000001409B ; } // starts at 12970
.text:000000000001409B re_search_internal endp
.text:000000000001409B
.text:00000000000140A0
.text:00000000000140A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000140A0
.text:00000000000140A0
.text:00000000000140A0 update_cur_sifted_state proc near       ; CODE XREF: sift_states_backward+70↑p
.text:00000000000140A0                                         ; sift_states_backward+28F↑p
.text:00000000000140A0
.text:00000000000140A0 var_D0          = qword ptr -0D0h
.text:00000000000140A0 var_C8          = qword ptr -0C8h
.text:00000000000140A0 var_C0          = qword ptr -0C0h
.text:00000000000140A0 var_B8          = qword ptr -0B8h
.text:00000000000140A0 var_B0          = qword ptr -0B0h
.text:00000000000140A0 var_A8          = qword ptr -0A8h
.text:00000000000140A0 var_A0          = qword ptr -0A0h
.text:00000000000140A0 var_98          = qword ptr -98h
.text:00000000000140A0 var_90          = qword ptr -90h
.text:00000000000140A0 var_7C          = dword ptr -7Ch
.text:00000000000140A0 var_78          = xmmword ptr -78h
.text:00000000000140A0 var_68          = xmmword ptr -68h
.text:00000000000140A0 var_50          = qword ptr -50h
.text:00000000000140A0 ptr             = qword ptr -48h
.text:00000000000140A0 var_40          = qword ptr -40h
.text:00000000000140A0
.text:00000000000140A0 ; __unwind {
.text:00000000000140A0                 push    r15
.text:00000000000140A2                 push    r14
.text:00000000000140A4                 mov     rax, rdi
.text:00000000000140A7                 push    r13
.text:00000000000140A9                 push    r12
.text:00000000000140AB                 mov     r13, rsi
.text:00000000000140AE                 push    rbp
.text:00000000000140AF                 push    rbx
.text:00000000000140B0                 mov     rbp, rdx
.text:00000000000140B3                 mov     rbx, rcx
.text:00000000000140B6                 lea     rcx, ds:0[rdx*8]
.text:00000000000140BE                 sub     rsp, 0A8h
.text:00000000000140C5                 mov     r12, [rax+98h]
.text:00000000000140CC                 mov     rax, [rax+0B8h]
.text:00000000000140D3                 mov     [rsp+0D8h+var_D0], rdi
.text:00000000000140D8                 mov     [rsp+0D8h+var_C0], rcx
.text:00000000000140DD                 mov     rdi, fs:28h
.text:00000000000140E6                 mov     [rsp+0D8h+var_40], rdi
.text:00000000000140EE                 xor     edi, edi
.text:00000000000140F0                 mov     rdx, [rax+rdx*8]
.text:00000000000140F4                 mov     [rsp+0D8h+var_7C], 0
.text:00000000000140FC                 mov     rcx, [rbx+8]
.text:0000000000014100                 test    rdx, rdx
.text:0000000000014103                 jz      loc_14358
.text:0000000000014109                 lea     rdi, [rdx+8]
.text:000000000001410D                 test    rcx, rcx
.text:0000000000014110                 mov     [rsp+0D8h+var_C8], rdi
.text:0000000000014115                 jnz     short loc_14168
.text:0000000000014117                 mov     rdx, [rsi]
.text:000000000001411A                 mov     qword ptr [rdx+rbp*8], 0
.text:0000000000014122                 mov     rdx, [rax+rbp*8]
.text:0000000000014126                 xor     eax, eax
.text:0000000000014128                 test    byte ptr [rdx+68h], 40h
.text:000000000001412C                 jnz     loc_1420F
.text:0000000000014132                 nop     word ptr [rax+rax+00h]
.text:0000000000014138
.text:0000000000014138 loc_14138:                              ; CODE XREF: update_cur_sifted_state+E9↓j
.text:0000000000014138                                         ; update_cur_sifted_state+112↓j ...
.text:0000000000014138                 mov     rdi, [rsp+0D8h+var_40]
.text:0000000000014140                 xor     rdi, fs:28h
.text:0000000000014149                 jnz     loc_148EB
.text:000000000001414F                 add     rsp, 0A8h
.text:0000000000014156                 pop     rbx
.text:0000000000014157                 pop     rbp
.text:0000000000014158                 pop     r12
.text:000000000001415A                 pop     r13
.text:000000000001415C                 pop     r14
.text:000000000001415E                 pop     r15
.text:0000000000014160                 retn
.text:0000000000014160 ; ---------------------------------------------------------------------------
.text:0000000000014161                 align 8
.text:0000000000014168
.text:0000000000014168 loc_14168:                              ; CODE XREF: update_cur_sifted_state+75↑j
.text:0000000000014168                 lea     rdi, [rsp+0D8h+var_78]
.text:000000000001416D                 mov     rdx, rbx
.text:0000000000014170                 mov     rsi, r12
.text:0000000000014173                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:000000000001417B                 call    re_acquire_state
.text:0000000000014180                 mov     rdx, rax
.text:0000000000014183                 mov     eax, dword ptr [rsp+0D8h+var_78]
.text:0000000000014187                 test    eax, eax
.text:0000000000014189                 jnz     short loc_14138
.text:000000000001418B                 mov     r15, [rdx+38h]
.text:000000000001418F                 lea     r14, [rdx+38h]
.text:0000000000014193                 test    r15, r15
.text:0000000000014196                 jz      loc_143A0
.text:000000000001419C
.text:000000000001419C loc_1419C:                              ; CODE XREF: update_cur_sifted_state+33B↓j
.text:000000000001419C                                         ; update_cur_sifted_state+348↓j
.text:000000000001419C                 mov     rsi, [rsp+0D8h+var_C8]
.text:00000000000141A1                 mov     rdx, r14
.text:00000000000141A4                 mov     rdi, rbx
.text:00000000000141A7                 call    re_node_set_add_intersect
.text:00000000000141AC                 test    eax, eax
.text:00000000000141AE                 mov     [rsp+0D8h+var_7C], eax
.text:00000000000141B2                 jnz     short loc_14138
.text:00000000000141B4                 cmp     qword ptr [r13+28h], 0
.text:00000000000141B9                 jnz     loc_14430
.text:00000000000141BF
.text:00000000000141BF loc_141BF:                              ; CODE XREF: update_cur_sifted_state+483↓j
.text:00000000000141BF                 mov     r14, [rsp+0D8h+var_C0]
.text:00000000000141C4                 add     r14, [r13+0]
.text:00000000000141C8
.text:00000000000141C8 loc_141C8:                              ; CODE XREF: update_cur_sifted_state+389↓j
.text:00000000000141C8                 lea     rdi, [rsp+0D8h+var_7C]
.text:00000000000141CD                 mov     rdx, rbx
.text:00000000000141D0                 mov     rsi, r12
.text:00000000000141D3                 call    re_acquire_state
.text:00000000000141D8                 mov     [r14], rax
.text:00000000000141DB                 mov     eax, [rsp+0D8h+var_7C]
.text:00000000000141DF                 test    eax, eax
.text:00000000000141E1                 jnz     loc_14138
.text:00000000000141E7                 cmp     [rsp+0D8h+var_C8], 0
.text:00000000000141ED                 jz      loc_14138
.text:00000000000141F3                 mov     rax, [rsp+0D8h+var_D0]
.text:00000000000141F8                 mov     rax, [rax+0B8h]
.text:00000000000141FF                 mov     rdx, [rax+rbp*8]
.text:0000000000014203                 xor     eax, eax
.text:0000000000014205                 test    byte ptr [rdx+68h], 40h
.text:0000000000014209                 jz      loc_14138
.text:000000000001420F
.text:000000000001420F loc_1420F:                              ; CODE XREF: update_cur_sifted_state+8C↑j
.text:000000000001420F                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000014214                 xor     ebx, ebx
.text:0000000000014216                 mov     rsi, [rax+0C8h]
.text:000000000001421D                 mov     rdx, rsi
.text:0000000000014220
.text:0000000000014220 loc_14220:                              ; CODE XREF: update_cur_sifted_state+2F7↓j
.text:0000000000014220                 cmp     rbx, rdx
.text:0000000000014223                 jge     short loc_14283
.text:0000000000014225                 lea     rax, [rbx+rdx]
.text:0000000000014229                 mov     rcx, rax
.text:000000000001422C                 shr     rcx, 3Fh
.text:0000000000014230                 add     rcx, rax
.text:0000000000014233                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000014238                 sar     rcx, 1
.text:000000000001423B                 mov     rdi, [rax+0D8h]
.text:0000000000014242                 lea     rax, [rcx+rcx*4]
.text:0000000000014246                 cmp     rbp, [rdi+rax*8+8]
.text:000000000001424B                 jle     short loc_1427E
.text:000000000001424D                 jmp     loc_14387
.text:000000000001424D ; ---------------------------------------------------------------------------
.text:0000000000014252                 align 8
.text:0000000000014258
.text:0000000000014258 loc_14258:                              ; CODE XREF: update_cur_sifted_state+1E1↓j
.text:0000000000014258                 lea     rdx, [rbx+rcx]
.text:000000000001425C                 mov     rax, rdx
.text:000000000001425F                 shr     rax, 3Fh
.text:0000000000014263                 add     rax, rdx
.text:0000000000014266                 sar     rax, 1
.text:0000000000014269                 lea     rdx, [rax+rax*4]
.text:000000000001426D                 mov     r8, rax
.text:0000000000014270                 cmp     rbp, [rdi+rdx*8+8]
.text:0000000000014275                 jg      loc_14390
.text:000000000001427B                 mov     rcx, rax
.text:000000000001427E
.text:000000000001427E loc_1427E:                              ; CODE XREF: update_cur_sifted_state+1AB↑j
.text:000000000001427E                 cmp     rbx, rcx
.text:0000000000014281                 jl      short loc_14258
.text:0000000000014283
.text:0000000000014283 loc_14283:                              ; CODE XREF: update_cur_sifted_state+183↑j
.text:0000000000014283                 cmp     rsi, rbx
.text:0000000000014286                 jle     loc_14380
.text:000000000001428C                 lea     rax, [rbx+rbx*4]
.text:0000000000014290                 lea     rsi, ds:0[rax*8]
.text:0000000000014298                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001429D                 mov     [rsp+0D8h+var_98], rsi
.text:00000000000142A2                 mov     rax, [rax+0D8h]
.text:00000000000142A9                 cmp     rbp, [rax+rsi+8]
.text:00000000000142AE                 jnz     loc_14380
.text:00000000000142B4                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000142B8                 jz      loc_14380
.text:00000000000142BE                 mov     rax, [rsp+0D8h+var_D0]
.text:00000000000142C3                 mov     qword ptr [rsp+0D8h+var_78], 0
.text:00000000000142CC                 mov     r12, [rax+98h]
.text:00000000000142D3                 mov     rax, [rsp+0D8h+var_C8]
.text:00000000000142D8                 cmp     qword ptr [rax+8], 0
.text:00000000000142DD                 jle     loc_14380
.text:00000000000142E3                 lea     rax, [rsp+0D8h+var_78]
.text:00000000000142E8                 mov     [rsp+0D8h+var_B8], 0
.text:00000000000142F1                 mov     [rsp+0D8h+var_90], rbx
.text:00000000000142F6                 mov     r15, r13
.text:00000000000142F9                 mov     [rsp+0D8h+var_A0], rax
.text:00000000000142FE                 jmp     short loc_14322
.text:0000000000014300 ; ---------------------------------------------------------------------------
.text:0000000000014300
.text:0000000000014300 loc_14300:                              ; CODE XREF: update_cur_sifted_state+2A7↓j
.text:0000000000014300                                         ; update_cur_sifted_state+2AD↓j
.text:0000000000014300                 cmp     al, 4
.text:0000000000014302                 jz      loc_14688
.text:0000000000014308
.text:0000000000014308 loc_14308:                              ; CODE XREF: update_cur_sifted_state+2AF↓j
.text:0000000000014308                                         ; update_cur_sifted_state+7C3↓j
.text:0000000000014308                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000001430D                 add     [rsp+0D8h+var_B8], 1
.text:0000000000014313                 mov     rax, [rsp+0D8h+var_B8]
.text:0000000000014318                 cmp     rax, [rcx+8]
.text:000000000001431C                 jge     loc_148DB
.text:0000000000014322
.text:0000000000014322 loc_14322:                              ; CODE XREF: update_cur_sifted_state+25E↑j
.text:0000000000014322                 mov     rax, [rsp+0D8h+var_C8]
.text:0000000000014327                 mov     rdi, [rsp+0D8h+var_B8]
.text:000000000001432C                 mov     rax, [rax+10h]
.text:0000000000014330                 mov     r14, [rax+rdi*8]
.text:0000000000014334                 mov     rax, r14
.text:0000000000014337                 shl     rax, 4
.text:000000000001433B                 add     rax, [r12]
.text:000000000001433F                 cmp     r14, [r15+10h]
.text:0000000000014343                 movzx   eax, byte ptr [rax+8]
.text:0000000000014347                 jnz     short loc_14300
.text:0000000000014349                 cmp     rbp, [r15+18h]
.text:000000000001434D                 jnz     short loc_14300
.text:000000000001434F                 jmp     short loc_14308
.text:000000000001434F ; ---------------------------------------------------------------------------
.text:0000000000014351                 align 8
.text:0000000000014358
.text:0000000000014358 loc_14358:                              ; CODE XREF: update_cur_sifted_state+63↑j
.text:0000000000014358                 lea     r14, ds:0[rbp*8]
.text:0000000000014360                 add     r14, [rsi]
.text:0000000000014363                 test    rcx, rcx
.text:0000000000014366                 jnz     loc_14420
.text:000000000001436C                 mov     qword ptr [r14], 0
.text:0000000000014373                 xor     eax, eax
.text:0000000000014375                 jmp     loc_14138
.text:0000000000014375 ; ---------------------------------------------------------------------------
.text:000000000001437A                 align 20h
.text:0000000000014380
.text:0000000000014380 loc_14380:                              ; CODE XREF: update_cur_sifted_state+1E6↑j
.text:0000000000014380                                         ; update_cur_sifted_state+20E↑j ...
.text:0000000000014380                 xor     eax, eax
.text:0000000000014382                 jmp     loc_14138
.text:0000000000014387 ; ---------------------------------------------------------------------------
.text:0000000000014387
.text:0000000000014387 loc_14387:                              ; CODE XREF: update_cur_sifted_state+1AD↑j
.text:0000000000014387                 mov     r8, rcx
.text:000000000001438A                 mov     rcx, rdx
.text:000000000001438D                 nop     dword ptr [rax]
.text:0000000000014390
.text:0000000000014390 loc_14390:                              ; CODE XREF: update_cur_sifted_state+1D5↑j
.text:0000000000014390                 lea     rbx, [r8+1]
.text:0000000000014394                 mov     rdx, rcx
.text:0000000000014397                 jmp     loc_14220
.text:0000000000014397 ; ---------------------------------------------------------------------------
.text:000000000001439C                 align 20h
.text:00000000000143A0
.text:00000000000143A0 loc_143A0:                              ; CODE XREF: update_cur_sifted_state+F6↑j
.text:00000000000143A0                 mov     rdi, [rbx+8]
.text:00000000000143A4                 mov     qword ptr [rdx+40h], 0
.text:00000000000143AC                 mov     [rsp+0D8h+var_B8], rdx
.text:00000000000143B1                 mov     [rdx+38h], rdi
.text:00000000000143B5                 shl     rdi, 3          ; size
.text:00000000000143B9                 call    _malloc
.text:00000000000143BE                 mov     rdx, [rsp+0D8h+var_B8]
.text:00000000000143C3                 test    rax, rax
.text:00000000000143C6                 mov     [rdx+48h], rax
.text:00000000000143CA                 jz      short loc_14413
.text:00000000000143CC                 cmp     qword ptr [rbx+8], 0
.text:00000000000143D1                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:00000000000143D9                 jg      short loc_143EE
.text:00000000000143DB                 jmp     loc_1419C
.text:00000000000143E0 ; ---------------------------------------------------------------------------
.text:00000000000143E0
.text:00000000000143E0 loc_143E0:                              ; CODE XREF: update_cur_sifted_state+371↓j
.text:00000000000143E0                 add     r15, 1
.text:00000000000143E4                 cmp     r15, [rbx+8]
.text:00000000000143E8                 jge     loc_1419C
.text:00000000000143EE
.text:00000000000143EE loc_143EE:                              ; CODE XREF: update_cur_sifted_state+339↑j
.text:00000000000143EE                 mov     rax, [rbx+10h]
.text:00000000000143F2                 mov     rdi, r14
.text:00000000000143F5                 mov     rax, [rax+r15*8]
.text:00000000000143F9                 lea     rdx, [rax+rax*2]
.text:00000000000143FD                 mov     rax, [r12+38h]
.text:0000000000014402                 lea     rsi, [rax+rdx*8]
.text:0000000000014406                 call    re_node_set_merge
.text:000000000001440B                 test    eax, eax
.text:000000000001440D                 mov     dword ptr [rsp+0D8h+var_78], eax
.text:0000000000014411                 jz      short loc_143E0
.text:0000000000014413
.text:0000000000014413 loc_14413:                              ; CODE XREF: update_cur_sifted_state+32A↑j
.text:0000000000014413                 mov     eax, 0Ch
.text:0000000000014418                 jmp     loc_14138
.text:0000000000014418 ; ---------------------------------------------------------------------------
.text:000000000001441D                 align 20h
.text:0000000000014420
.text:0000000000014420 loc_14420:                              ; CODE XREF: update_cur_sifted_state+2C6↑j
.text:0000000000014420                 mov     [rsp+0D8h+var_C8], 0
.text:0000000000014429                 jmp     loc_141C8
.text:0000000000014429 ; ---------------------------------------------------------------------------
.text:000000000001442E                 align 10h
.text:0000000000014430
.text:0000000000014430 loc_14430:                              ; CODE XREF: update_cur_sifted_state+119↑j
.text:0000000000014430                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000014435                 mov     rax, [rax+0D8h]
.text:000000000001443C                 mov     [rsp+0D8h+var_B8], rax
.text:0000000000014441                 jle     loc_1451B
.text:0000000000014447                 xor     r15d, r15d
.text:000000000001444A                 nop     word ptr [rax+rax+00h]
.text:0000000000014450
.text:0000000000014450 loc_14450:                              ; CODE XREF: update_cur_sifted_state+475↓j
.text:0000000000014450                 mov     rax, [r13+30h]
.text:0000000000014454                 mov     rdi, [rsp+0D8h+var_B8]
.text:0000000000014459                 mov     rax, [rax+r15*8]
.text:000000000001445D                 lea     rax, [rax+rax*4]
.text:0000000000014461                 lea     rdx, [rdi+rax*8]
.text:0000000000014465                 cmp     rbp, [rdx+10h]
.text:0000000000014469                 jle     loc_1450D
.text:000000000001446F                 cmp     rbp, [rdx+8]
.text:0000000000014473                 jg      loc_1450D
.text:0000000000014479                 mov     rcx, [rdx]
.text:000000000001447C                 mov     rax, [r12]
.text:0000000000014480                 mov     rsi, [rbx+8]
.text:0000000000014484                 shl     rcx, 4
.text:0000000000014488                 cmp     rbp, [rdx+18h]
.text:000000000001448C                 mov     r8, [rax+rcx]
.text:0000000000014490                 jz      loc_14530
.text:0000000000014496                 xor     r14d, r14d
.text:0000000000014499                 test    rsi, rsi
.text:000000000001449C                 jle     short loc_1450D
.text:000000000001449E                 mov     [rsp+0D8h+var_B0], rbp
.text:00000000000144A3                 mov     rbp, r8
.text:00000000000144A6                 jmp     short loc_144BE
.text:00000000000144A6 ; ---------------------------------------------------------------------------
.text:00000000000144A8                 align 10h
.text:00000000000144B0
.text:00000000000144B0 loc_144B0:                              ; CODE XREF: update_cur_sifted_state+43A↓j
.text:00000000000144B0                                         ; update_cur_sifted_state+43F↓j
.text:00000000000144B0                 add     r14, 1
.text:00000000000144B4                 cmp     r14, [rbx+8]
.text:00000000000144B8                 jge     short loc_14508
.text:00000000000144BA
.text:00000000000144BA loc_144BA:                              ; CODE XREF: update_cur_sifted_state+461↓j
.text:00000000000144BA                 mov     rax, [r12]
.text:00000000000144BE
.text:00000000000144BE loc_144BE:                              ; CODE XREF: update_cur_sifted_state+406↑j
.text:00000000000144BE                 mov     rdx, [rbx+10h]
.text:00000000000144C2                 mov     rsi, [rdx+r14*8]
.text:00000000000144C6                 mov     rdx, rsi
.text:00000000000144C9                 shl     rdx, 4
.text:00000000000144CD                 add     rax, rdx
.text:00000000000144D0                 movzx   edx, byte ptr [rax+8]
.text:00000000000144D4                 sub     edx, 8
.text:00000000000144D7                 cmp     edx, 1
.text:00000000000144DA                 ja      short loc_144B0
.text:00000000000144DC                 cmp     rbp, [rax]
.text:00000000000144DF                 jnz     short loc_144B0
.text:00000000000144E1                 mov     rcx, [rsp+0D8h+var_C8]
.text:00000000000144E6                 mov     rdx, rbx
.text:00000000000144E9                 mov     rdi, r12
.text:00000000000144EC                 call    _sub_epsilon_src_nodes
.text:00000000000144F1                 test    eax, eax
.text:00000000000144F3                 jnz     loc_14138
.text:00000000000144F9                 add     r14, 1
.text:00000000000144FD                 cmp     r14, [rbx+8]
.text:0000000000014501                 jl      short loc_144BA
.text:0000000000014503                 nop     dword ptr [rax+rax+00h]
.text:0000000000014508
.text:0000000000014508 loc_14508:                              ; CODE XREF: update_cur_sifted_state+418↑j
.text:0000000000014508                 mov     rbp, [rsp+0D8h+var_B0]
.text:000000000001450D
.text:000000000001450D loc_1450D:                              ; CODE XREF: update_cur_sifted_state+3C9↑j
.text:000000000001450D                                         ; update_cur_sifted_state+3D3↑j ...
.text:000000000001450D                 add     r15, 1
.text:0000000000014511                 cmp     r15, [r13+28h]
.text:0000000000014515                 jl      loc_14450
.text:000000000001451B
.text:000000000001451B loc_1451B:                              ; CODE XREF: update_cur_sifted_state+3A1↑j
.text:000000000001451B                 mov     [rsp+0D8h+var_7C], 0
.text:0000000000014523                 jmp     loc_141BF
.text:0000000000014523 ; ---------------------------------------------------------------------------
.text:0000000000014528                 align 10h
.text:0000000000014530
.text:0000000000014530 loc_14530:                              ; CODE XREF: update_cur_sifted_state+3F0↑j
.text:0000000000014530                 test    rsi, rsi
.text:0000000000014533                 jle     short loc_1450D
.text:0000000000014535                 mov     r10, [rbx+10h]
.text:0000000000014539                 mov     r9, 0FFFFFFFFFFFFFFFFh
.text:0000000000014540                 lea     r11, [r10+rsi*8]
.text:0000000000014544                 mov     rcx, r10
.text:0000000000014547                 mov     rsi, r9
.text:000000000001454A                 jmp     short loc_14566
.text:000000000001454A ; ---------------------------------------------------------------------------
.text:000000000001454C                 align 10h
.text:0000000000014550
.text:0000000000014550 loc_14550:                              ; CODE XREF: update_cur_sifted_state+4DC↓j
.text:0000000000014550                 cmp     r14d, 9
.text:0000000000014554                 jnz     short loc_1455D
.text:0000000000014556                 cmp     r8, [rdx]
.text:0000000000014559                 cmovz   r9, rdi
.text:000000000001455D
.text:000000000001455D loc_1455D:                              ; CODE XREF: update_cur_sifted_state+4B4↑j
.text:000000000001455D                 add     rcx, 8
.text:0000000000014561                 cmp     r11, rcx
.text:0000000000014564                 jz      short loc_1458E
.text:0000000000014566
.text:0000000000014566 loc_14566:                              ; CODE XREF: update_cur_sifted_state+4AA↑j
.text:0000000000014566                                         ; update_cur_sifted_state+4EC↓j
.text:0000000000014566                 mov     rdi, [rcx]
.text:0000000000014569                 mov     rdx, rdi
.text:000000000001456C                 shl     rdx, 4
.text:0000000000014570                 add     rdx, rax
.text:0000000000014573                 movzx   r14d, byte ptr [rdx+8]
.text:0000000000014578                 cmp     r14d, 8
.text:000000000001457C                 jnz     short loc_14550
.text:000000000001457E                 cmp     r8, [rdx]
.text:0000000000014581                 cmovz   rsi, rdi
.text:0000000000014585                 add     rcx, 8
.text:0000000000014589                 cmp     r11, rcx
.text:000000000001458C                 jnz     short loc_14566
.text:000000000001458E
.text:000000000001458E loc_1458E:                              ; CODE XREF: update_cur_sifted_state+4C4↑j
.text:000000000001458E                 test    rsi, rsi
.text:0000000000014591                 mov     r14, r9
.text:0000000000014594                 mov     [rsp+0D8h+var_B0], r9
.text:0000000000014599                 js      loc_14660
.text:000000000001459F                 mov     rcx, [rsp+0D8h+var_C8]
.text:00000000000145A4                 mov     rdx, rbx
.text:00000000000145A7                 mov     rdi, r12
.text:00000000000145AA                 call    _sub_epsilon_src_nodes
.text:00000000000145AF                 test    eax, eax
.text:00000000000145B1                 jnz     loc_14138
.text:00000000000145B7                 test    r14, r14
.text:00000000000145BA                 js      loc_1450D
.text:00000000000145C0                 cmp     qword ptr [rbx+8], 0
.text:00000000000145C5                 jle     loc_1450D
.text:00000000000145CB                 mov     r10, [rbx+10h]
.text:00000000000145CF
.text:00000000000145CF loc_145CF:                              ; CODE XREF: update_cur_sifted_state+5C6↓j
.text:00000000000145CF                 xor     r14d, r14d
.text:00000000000145D2                 mov     [rsp+0D8h+var_A8], rbp
.text:00000000000145D7                 mov     rbp, r14
.text:00000000000145DA                 mov     r14, [rsp+0D8h+var_B0]
.text:00000000000145DF                 jmp     short loc_145FA
.text:00000000000145DF ; ---------------------------------------------------------------------------
.text:00000000000145E1                 align 8
.text:00000000000145E8
.text:00000000000145E8 loc_145E8:                              ; CODE XREF: update_cur_sifted_state+581↓j
.text:00000000000145E8                                         ; update_cur_sifted_state+598↓j ...
.text:00000000000145E8                 add     rbp, 1
.text:00000000000145EC                 cmp     rbp, [rbx+8]
.text:00000000000145F0                 jge     loc_14678
.text:00000000000145F6                 mov     r10, [rbx+10h]
.text:00000000000145FA
.text:00000000000145FA loc_145FA:                              ; CODE XREF: update_cur_sifted_state+53F↑j
.text:00000000000145FA                 mov     r10, [r10+rbp*8]
.text:00000000000145FE                 mov     rax, [r12+38h]
.text:0000000000014603                 mov     rdx, r14
.text:0000000000014606                 lea     r9, [r10+r10*2]
.text:000000000001460A                 shl     r9, 3
.text:000000000001460E                 add     rax, r9
.text:0000000000014611                 mov     rdi, [rax+8]
.text:0000000000014615                 lea     rsi, [rax+10h]
.text:0000000000014619                 call    re_node_set_contains_isra_3
.text:000000000001461E                 test    rax, rax
.text:0000000000014621                 jnz     short loc_145E8
.text:0000000000014623                 add     r9, [r12+30h]
.text:0000000000014628                 mov     rdi, [r9+8]
.text:000000000001462C                 lea     rsi, [r9+10h]
.text:0000000000014630                 call    re_node_set_contains_isra_3
.text:0000000000014635                 test    rax, rax
.text:0000000000014638                 jnz     short loc_145E8
.text:000000000001463A                 mov     rcx, [rsp+0D8h+var_C8]
.text:000000000001463F                 mov     rdx, rbx
.text:0000000000014642                 mov     rsi, r10
.text:0000000000014645                 mov     rdi, r12
.text:0000000000014648                 call    _sub_epsilon_src_nodes
.text:000000000001464D                 test    eax, eax
.text:000000000001464F                 jnz     loc_14138
.text:0000000000014655                 sub     rbp, 1
.text:0000000000014659                 jmp     short loc_145E8
.text:0000000000014659 ; ---------------------------------------------------------------------------
.text:000000000001465B                 align 20h
.text:0000000000014660
.text:0000000000014660 loc_14660:                              ; CODE XREF: update_cur_sifted_state+4F9↑j
.text:0000000000014660                 cmp     [rsp+0D8h+var_B0], 0
.text:0000000000014666                 jns     loc_145CF
.text:000000000001466C                 jmp     loc_1450D
.text:000000000001466C ; ---------------------------------------------------------------------------
.text:0000000000014671                 align 8
.text:0000000000014678
.text:0000000000014678 loc_14678:                              ; CODE XREF: update_cur_sifted_state+550↑j
.text:0000000000014678                 mov     rbp, [rsp+0D8h+var_A8]
.text:000000000001467D                 jmp     loc_1450D
.text:000000000001467D ; ---------------------------------------------------------------------------
.text:0000000000014682                 align 8
.text:0000000000014688
.text:0000000000014688 loc_14688:                              ; CODE XREF: update_cur_sifted_state+262↑j
.text:0000000000014688                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001468D                 mov     r13, [rsp+0D8h+var_98]
.text:0000000000014692                 mov     rbx, [rsp+0D8h+var_90]
.text:0000000000014697                 add     r13, [rax+0D8h]
.text:000000000001469E                 lea     rax, [r14+r14*2]
.text:00000000000146A2                 shl     rax, 3
.text:00000000000146A6                 mov     [rsp+0D8h+var_A8], rax
.text:00000000000146AB                 lea     rax, ds:0[r14*8]
.text:00000000000146B3                 mov     [rsp+0D8h+var_B0], rax
.text:00000000000146B8                 mov     rax, r15
.text:00000000000146BB                 mov     r15, r13
.text:00000000000146BE                 mov     r13, rbx
.text:00000000000146C1                 mov     rbx, rax
.text:00000000000146C4                 jmp     loc_1482E
.text:00000000000146C4 ; ---------------------------------------------------------------------------
.text:00000000000146C9                 align 10h
.text:00000000000146D0
.text:00000000000146D0 loc_146D0:                              ; CODE XREF: update_cur_sifted_state+791↓j
.text:00000000000146D0                 mov     rax, [r15+18h]
.text:00000000000146D4                 sub     rax, [r15+10h]
.text:00000000000146D8                 test    rax, rax
.text:00000000000146DB                 lea     r9, [rbp+rax+0]
.text:00000000000146E0                 jz      loc_14840
.text:00000000000146E6                 mov     rax, [r12+18h]
.text:00000000000146EB                 mov     rsi, [rsp+0D8h+var_B0]
.text:00000000000146F0                 mov     r10, [rax+rsi]
.text:00000000000146F4
.text:00000000000146F4 loc_146F4:                              ; CODE XREF: update_cur_sifted_state+7B2↓j
.text:00000000000146F4                 cmp     r9, [rbx+18h]
.text:00000000000146F8                 jg      loc_14837
.text:00000000000146FE                 mov     rax, [rbx]
.text:0000000000014701                 mov     rax, [rax+r9*8]
.text:0000000000014705                 test    rax, rax
.text:0000000000014708                 jz      loc_14837
.text:000000000001470E                 mov     rdi, [rax+10h]
.text:0000000000014712                 lea     rsi, [rax+18h]
.text:0000000000014716                 mov     rdx, r10
.text:0000000000014719                 call    re_node_set_contains_isra_3
.text:000000000001471E                 test    rax, rax
.text:0000000000014721                 jz      loc_14837
.text:0000000000014727                 sub     rsp, 8
.text:000000000001472B                 lea     rdx, [rbx+30h]
.text:000000000001472F                 lea     rsi, [rbx+28h]
.text:0000000000014733                 push    r9
.text:0000000000014735                 mov     rdi, [rsp+0E8h+var_D0]
.text:000000000001473A                 mov     rcx, r14
.text:000000000001473D                 mov     r9, r10
.text:0000000000014740                 mov     r8, rbp
.text:0000000000014743                 call    check_dst_limits_isra_13
.text:0000000000014748                 test    al, al
.text:000000000001474A                 pop     rdx
.text:000000000001474B                 pop     rcx
.text:000000000001474C                 jnz     loc_14837
.text:0000000000014752                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000014758                 jz      loc_14868
.text:000000000001475E
.text:000000000001475E loc_1475E:                              ; CODE XREF: update_cur_sifted_state+808↓j
.text:000000000001475E                 mov     rax, [rsp+0D8h+var_A0]
.text:0000000000014763                 mov     rsi, r13
.text:0000000000014766                 mov     qword ptr [rsp+0D8h+var_68], r14
.text:000000000001476B                 mov     qword ptr [rsp+0D8h+var_68+8], rbp
.text:0000000000014770                 lea     rdi, [rax+20h]
.text:0000000000014774                 call    re_node_set_insert
.text:0000000000014779                 test    al, al
.text:000000000001477B                 jz      loc_148D4
.text:0000000000014781                 mov     rdi, [rsp+0D8h+var_C0]
.text:0000000000014786                 mov     rax, qword ptr [rsp+0D8h+var_78]
.text:000000000001478B                 mov     rsi, [rsp+0D8h+var_A0]
.text:0000000000014790                 mov     r15, [rax+rdi]
.text:0000000000014794                 mov     rdi, [rsp+0D8h+var_D0]
.text:0000000000014799                 call    sift_states_backward
.text:000000000001479E                 test    eax, eax
.text:00000000000147A0                 jnz     loc_148AE
.text:00000000000147A6                 mov     rsi, [rbx+8]
.text:00000000000147AA                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:00000000000147AF                 test    rsi, rsi
.text:00000000000147B2                 jz      short loc_147CD
.text:00000000000147B4                 lea     rcx, [rbp+1]
.text:00000000000147B8                 mov     rdi, r12
.text:00000000000147BB                 call    merge_state_array
.text:00000000000147C0                 test    eax, eax
.text:00000000000147C2                 jnz     loc_148AE
.text:00000000000147C8                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:00000000000147CD
.text:00000000000147CD loc_147CD:                              ; CODE XREF: update_cur_sifted_state+712↑j
.text:00000000000147CD                 mov     r11, [rsp+0D8h+var_A0]
.text:00000000000147D2                 mov     rax, [rsp+0D8h+var_C0]
.text:00000000000147D7                 mov     rdi, [rsp+0D8h+var_50]
.text:00000000000147DF                 lea     r9, [r11+30h]
.text:00000000000147E3                 mov     [rdx+rax], r15
.text:00000000000147E7                 mov     rdx, r13
.text:00000000000147EA                 mov     rsi, r9
.text:00000000000147ED                 call    re_node_set_contains_isra_3
.text:00000000000147F2                 sub     rax, 1
.text:00000000000147F6                 mov     rdx, rax
.text:00000000000147F9                 js      short loc_14807
.text:00000000000147FB                 lea     rdi, [r11+28h]
.text:00000000000147FF                 mov     rsi, r9
.text:0000000000014802                 call    re_node_set_remove_at_isra_4_part_5
.text:0000000000014807
.text:0000000000014807 loc_14807:                              ; CODE XREF: update_cur_sifted_state+759↑j
.text:0000000000014807                 mov     rcx, [rsp+0D8h+var_D0]
.text:000000000001480C                 lea     rax, [r13+r13*4+0]
.text:0000000000014811                 mov     rdx, [rcx+0D8h]
.text:0000000000014818                 lea     rax, [rdx+rax*8]
.text:000000000001481C                 nop     dword ptr [rax+00h]
.text:0000000000014820
.text:0000000000014820 loc_14820:                              ; CODE XREF: update_cur_sifted_state+79A↓j
.text:0000000000014820                 add     r13, 1
.text:0000000000014824                 cmp     byte ptr [rax+20h], 0
.text:0000000000014828                 lea     r15, [rax+28h]
.text:000000000001482C                 jz      short loc_14860
.text:000000000001482E
.text:000000000001482E loc_1482E:                              ; CODE XREF: update_cur_sifted_state+624↑j
.text:000000000001482E                 cmp     r14, [r15]
.text:0000000000014831                 jz      loc_146D0
.text:0000000000014837
.text:0000000000014837 loc_14837:                              ; CODE XREF: update_cur_sifted_state+658↑j
.text:0000000000014837                                         ; update_cur_sifted_state+668↑j ...
.text:0000000000014837                 mov     rax, r15
.text:000000000001483A                 jmp     short loc_14820
.text:000000000001483A ; ---------------------------------------------------------------------------
.text:000000000001483C                 align 20h
.text:0000000000014840
.text:0000000000014840 loc_14840:                              ; CODE XREF: update_cur_sifted_state+640↑j
.text:0000000000014840                 mov     rax, [r12+28h]
.text:0000000000014845                 mov     rdi, [rsp+0D8h+var_A8]
.text:000000000001484A                 mov     rax, [rax+rdi+10h]
.text:000000000001484F                 mov     r10, [rax]
.text:0000000000014852                 jmp     loc_146F4
.text:0000000000014852 ; ---------------------------------------------------------------------------
.text:0000000000014857                 align 20h
.text:0000000000014860
.text:0000000000014860 loc_14860:                              ; CODE XREF: update_cur_sifted_state+78C↑j
.text:0000000000014860                 mov     r15, rbx
.text:0000000000014863                 jmp     loc_14308
.text:0000000000014868 ; ---------------------------------------------------------------------------
.text:0000000000014868
.text:0000000000014868 loc_14868:                              ; CODE XREF: update_cur_sifted_state+6B8↑j
.text:0000000000014868                 mov     rax, [rbx+30h]
.text:000000000001486C                 lea     rsi, [rbx+20h]
.text:0000000000014870                 movdqa  xmm0, xmmword ptr [rbx]
.text:0000000000014874                 mov     [rsp+0D8h+ptr], rax
.text:000000000001487C                 mov     rax, [rsp+0D8h+var_A0]
.text:0000000000014881                 movaps  [rsp+0D8h+var_78], xmm0
.text:0000000000014886                 lea     rdi, [rax+20h]
.text:000000000001488A                 movdqa  xmm0, xmmword ptr [rbx+10h]
.text:000000000001488F                 movaps  [rsp+0D8h+var_68], xmm0
.text:0000000000014894                 movdqa  xmm0, xmmword ptr [rbx+20h]
.text:0000000000014899                 movaps  xmmword ptr [rsp+80h], xmm0
.text:00000000000148A1                 call    re_node_set_init_copy
.text:00000000000148A6                 test    eax, eax
.text:00000000000148A8                 jz      loc_1475E
.text:00000000000148AE
.text:00000000000148AE loc_148AE:                              ; CODE XREF: update_cur_sifted_state+700↑j
.text:00000000000148AE                                         ; update_cur_sifted_state+722↑j ...
.text:00000000000148AE                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:00000000000148B4                 jz      loc_14138
.text:00000000000148BA
.text:00000000000148BA loc_148BA:                              ; CODE XREF: update_cur_sifted_state+849↓j
.text:00000000000148BA                 mov     rdi, [rsp+0D8h+ptr] ; ptr
.text:00000000000148C2                 mov     dword ptr [rsp+0D8h+var_D0], eax
.text:00000000000148C6                 call    _free
.text:00000000000148CB                 mov     eax, dword ptr [rsp+0D8h+var_D0]
.text:00000000000148CF                 jmp     loc_14138
.text:00000000000148D4 ; ---------------------------------------------------------------------------
.text:00000000000148D4
.text:00000000000148D4 loc_148D4:                              ; CODE XREF: update_cur_sifted_state+6DB↑j
.text:00000000000148D4                 mov     eax, 0Ch
.text:00000000000148D9                 jmp     short loc_148AE
.text:00000000000148DB ; ---------------------------------------------------------------------------
.text:00000000000148DB
.text:00000000000148DB loc_148DB:                              ; CODE XREF: update_cur_sifted_state+27C↑j
.text:00000000000148DB                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:00000000000148E1                 jz      loc_14380
.text:00000000000148E7                 xor     eax, eax
.text:00000000000148E9                 jmp     short loc_148BA
.text:00000000000148EB ; ---------------------------------------------------------------------------
.text:00000000000148EB
.text:00000000000148EB loc_148EB:                              ; CODE XREF: update_cur_sifted_state+A9↑j
.text:00000000000148EB                 call    ___stack_chk_fail
.text:00000000000148EB ; } // starts at 140A0
.text:00000000000148EB update_cur_sifted_state endp
.text:00000000000148EB
.text:00000000000148F0
.text:00000000000148F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000148F0
.text:00000000000148F0
.text:00000000000148F0 parse_bracket_element_constprop_37 proc near
.text:00000000000148F0                                         ; CODE XREF: parse_expression+90F↓p
.text:00000000000148F0                                         ; parse_expression+E67↓p
.text:00000000000148F0
.text:00000000000148F0 var_40          = byte ptr -40h
.text:00000000000148F0 var_30          = qword ptr -30h
.text:00000000000148F0
.text:00000000000148F0 ; __unwind {
.text:00000000000148F0                 push    r14
.text:00000000000148F2                 push    r13
.text:00000000000148F4                 mov     r10, rsi
.text:00000000000148F7                 push    r12
.text:00000000000148F9                 push    rbp
.text:00000000000148FA                 movsxd  r11, ecx
.text:00000000000148FD                 push    rbx
.text:00000000000148FE                 mov     rbp, rdx
.text:0000000000014901                 mov     rbx, rdi
.text:0000000000014904                 sub     rsp, 20h
.text:0000000000014908                 mov     r12, [rsi+48h]
.text:000000000001490C                 mov     rax, fs:28h
.text:0000000000014915                 mov     [rsp+48h+var_30], rax
.text:000000000001491A                 xor     eax, eax
.text:000000000001491C                 cmp     dword ptr [rsi+90h], 1
.text:0000000000014923                 jz      short loc_14978
.text:0000000000014925                 mov     rsi, r12
.text:0000000000014928                 mov     rdi, r10
.text:000000000001492B                 call    re_string_char_size_at_part_0
.text:0000000000014930                 cmp     eax, 1
.text:0000000000014933                 jle     short loc_14978
.text:0000000000014935                 mov     rdx, [r10+10h]
.text:0000000000014939                 cdqe
.text:000000000001493B                 mov     dword ptr [rbx], 1
.text:0000000000014941                 add     rax, r12
.text:0000000000014944                 mov     edx, [rdx+r12*4]
.text:0000000000014948                 mov     [rbx+8], edx
.text:000000000001494B                 mov     [r10+48h], rax
.text:000000000001494F                 xor     eax, eax
.text:0000000000014951
.text:0000000000014951 loc_14951:                              ; CODE XREF: parse_bracket_element_constprop_37+BD↓j
.text:0000000000014951                                         ; parse_bracket_element_constprop_37+161↓j ...
.text:0000000000014951                 mov     rcx, [rsp+48h+var_30]
.text:0000000000014956                 xor     rcx, fs:28h
.text:000000000001495F                 jnz     loc_14B48
.text:0000000000014965                 add     rsp, 20h
.text:0000000000014969                 pop     rbx
.text:000000000001496A                 pop     rbp
.text:000000000001496B                 pop     r12
.text:000000000001496D                 pop     r13
.text:000000000001496F                 pop     r14
.text:0000000000014971                 retn
.text:0000000000014971 ; ---------------------------------------------------------------------------
.text:0000000000014972                 align 8
.text:0000000000014978
.text:0000000000014978 loc_14978:                              ; CODE XREF: parse_bracket_element_constprop_37+33↑j
.text:0000000000014978                                         ; parse_bracket_element_constprop_37+43↑j
.text:0000000000014978                 movzx   eax, byte ptr [rbp+8]
.text:000000000001497C                 add     r11, r12
.text:000000000001497F                 mov     [r10+48h], r11
.text:0000000000014983                 mov     edx, eax
.text:0000000000014985                 and     edx, 0FFFFFFFBh
.text:0000000000014988                 cmp     dl, 1Ah
.text:000000000001498B                 jz      short loc_149B0
.text:000000000001498D                 cmp     al, 1Ch
.text:000000000001498F                 jz      short loc_149B0
.text:0000000000014991                 cmp     al, 16h
.text:0000000000014993                 jnz     short loc_1499E
.text:0000000000014995                 test    r9b, r9b
.text:0000000000014998                 jz      loc_14AE2
.text:000000000001499E
.text:000000000001499E loc_1499E:                              ; CODE XREF: parse_bracket_element_constprop_37+A3↑j
.text:000000000001499E                                         ; parse_bracket_element_constprop_37+20A↓j
.text:000000000001499E                 movzx   eax, byte ptr [rbp+0]
.text:00000000000149A2                 mov     dword ptr [rbx], 0
.text:00000000000149A8                 mov     [rbx+8], al
.text:00000000000149AB                 xor     eax, eax
.text:00000000000149AD                 jmp     short loc_14951
.text:00000000000149AD ; ---------------------------------------------------------------------------
.text:00000000000149AF                 align 10h
.text:00000000000149B0
.text:00000000000149B0 loc_149B0:                              ; CODE XREF: parse_bracket_element_constprop_37+9B↑j
.text:00000000000149B0                                         ; parse_bracket_element_constprop_37+9F↑j
.text:00000000000149B0                 mov     r12, [r10+68h]
.text:00000000000149B4                 cmp     r11, r12
.text:00000000000149B7                 jge     loc_14AD8
.text:00000000000149BD                 movzx   r13d, byte ptr [rbp+0]
.text:00000000000149C2                 xor     r8d, r8d
.text:00000000000149C5                 jmp     short loc_149F2
.text:00000000000149C5 ; ---------------------------------------------------------------------------
.text:00000000000149C7                 align 10h
.text:00000000000149D0
.text:00000000000149D0 loc_149D0:                              ; CODE XREF: parse_bracket_element_constprop_37+126↓j
.text:00000000000149D0                                         ; parse_bracket_element_constprop_37+130↓j
.text:00000000000149D0                 mov     rax, [rbx+8]
.text:00000000000149D4                 mov     [rax+r8], r9b
.text:00000000000149D8                 add     r8, 1
.text:00000000000149DC                 cmp     r8, 20h ; ' '
.text:00000000000149E0                 jz      loc_14AD8
.text:00000000000149E6                 movzx   eax, byte ptr [rbp+8]
.text:00000000000149EA                 mov     r11, [r10+48h]
.text:00000000000149EE                 mov     r12, [r10+68h]
.text:00000000000149F2
.text:00000000000149F2 loc_149F2:                              ; CODE XREF: parse_bracket_element_constprop_37+D5↑j
.text:00000000000149F2                 cmp     al, 1Eh
.text:00000000000149F4                 movsxd  r14, r8d
.text:00000000000149F7                 jz      short loc_14A60
.text:00000000000149F9
.text:00000000000149F9 loc_149F9:                              ; CODE XREF: parse_bracket_element_constprop_37+178↓j
.text:00000000000149F9                                         ; parse_bracket_element_constprop_37+197↓j ...
.text:00000000000149F9                 mov     rdx, [r10+8]
.text:00000000000149FD                 lea     rax, [r11+1]
.text:0000000000014A01                 mov     [r10+48h], rax
.text:0000000000014A05                 movzx   r9d, byte ptr [rdx+r11]
.text:0000000000014A0A
.text:0000000000014A0A loc_14A0A:                              ; CODE XREF: parse_bracket_element_constprop_37+1DD↓j
.text:0000000000014A0A                                         ; parse_bracket_element_constprop_37+22C↓j
.text:0000000000014A0A                 cmp     rax, r12
.text:0000000000014A0D                 jge     loc_14AD8
.text:0000000000014A13                 cmp     r13b, r9b
.text:0000000000014A16                 jnz     short loc_149D0
.text:0000000000014A18                 mov     rdx, [r10+8]
.text:0000000000014A1C                 cmp     byte ptr [rdx+rax], 5Dh ; ']'
.text:0000000000014A20                 jnz     short loc_149D0
.text:0000000000014A22                 add     rax, 1
.text:0000000000014A26                 mov     [r10+48h], rax
.text:0000000000014A2A                 mov     rax, [rbx+8]
.text:0000000000014A2E                 mov     byte ptr [rax+r14], 0
.text:0000000000014A33                 movzx   eax, byte ptr [rbp+8]
.text:0000000000014A37                 cmp     al, 1Ch
.text:0000000000014A39                 jz      loc_14B3B
.text:0000000000014A3F                 cmp     al, 1Eh
.text:0000000000014A41                 jz      loc_14B2E
.text:0000000000014A47                 cmp     al, 1Ah
.text:0000000000014A49                 jz      loc_14B21
.text:0000000000014A4F                 xor     eax, eax
.text:0000000000014A51                 jmp     loc_14951
.text:0000000000014A51 ; ---------------------------------------------------------------------------
.text:0000000000014A56                 align 20h
.text:0000000000014A60
.text:0000000000014A60 loc_14A60:                              ; CODE XREF: parse_bracket_element_constprop_37+107↑j
.text:0000000000014A60                 cmp     byte ptr [r10+8Bh], 0
.text:0000000000014A68                 jz      short loc_149F9
.text:0000000000014A6A                 cmp     byte ptr [r10+8Ch], 0
.text:0000000000014A72                 jz      loc_14B08
.text:0000000000014A78                 cmp     r11, [r10+30h]
.text:0000000000014A7C                 jz      short loc_14A8D
.text:0000000000014A7E                 mov     rax, [r10+10h]
.text:0000000000014A82                 cmp     dword ptr [rax+r11*4], 0FFFFFFFFh
.text:0000000000014A87                 jz      loc_149F9
.text:0000000000014A8D
.text:0000000000014A8D loc_14A8D:                              ; CODE XREF: parse_bracket_element_constprop_37+18C↑j
.text:0000000000014A8D                 mov     rax, [r10+18h]
.text:0000000000014A91                 mov     rax, [rax+r11*8]
.text:0000000000014A95                 add     rax, [r10]
.text:0000000000014A98                 add     rax, [r10+28h]
.text:0000000000014A9C                 movzx   r9d, byte ptr [rax]
.text:0000000000014AA0                 test    r9b, 80h
.text:0000000000014AA4                 jnz     loc_149F9
.text:0000000000014AAA                 cmp     dword ptr [r10+90h], 1
.text:0000000000014AB2                 mov     eax, 1
.text:0000000000014AB7                 jz      short loc_14AC6
.text:0000000000014AB9                 mov     rsi, r11
.text:0000000000014ABC                 mov     rdi, r10
.text:0000000000014ABF                 call    re_string_char_size_at_part_0
.text:0000000000014AC4                 cdqe
.text:0000000000014AC6
.text:0000000000014AC6 loc_14AC6:                              ; CODE XREF: parse_bracket_element_constprop_37+1C7↑j
.text:0000000000014AC6                 add     rax, r11
.text:0000000000014AC9                 mov     [r10+48h], rax
.text:0000000000014ACD                 jmp     loc_14A0A
.text:0000000000014ACD ; ---------------------------------------------------------------------------
.text:0000000000014AD2                 align 8
.text:0000000000014AD8
.text:0000000000014AD8 loc_14AD8:                              ; CODE XREF: parse_bracket_element_constprop_37+C7↑j
.text:0000000000014AD8                                         ; parse_bracket_element_constprop_37+F0↑j ...
.text:0000000000014AD8                 mov     eax, 7
.text:0000000000014ADD                 jmp     loc_14951
.text:0000000000014AE2 ; ---------------------------------------------------------------------------
.text:0000000000014AE2
.text:0000000000014AE2 loc_14AE2:                              ; CODE XREF: parse_bracket_element_constprop_37+A8↑j
.text:0000000000014AE2                 mov     rdi, rsp
.text:0000000000014AE5                 mov     rdx, r8
.text:0000000000014AE8                 mov     rsi, r10
.text:0000000000014AEB                 call    peek_token_bracket
.text:0000000000014AF0                 cmp     [rsp+48h+var_40], 15h
.text:0000000000014AF5                 mov     eax, 0Bh
.text:0000000000014AFA                 jz      loc_1499E
.text:0000000000014B00                 jmp     loc_14951
.text:0000000000014B00 ; ---------------------------------------------------------------------------
.text:0000000000014B05                 align 8
.text:0000000000014B08
.text:0000000000014B08 loc_14B08:                              ; CODE XREF: parse_bracket_element_constprop_37+182↑j
.text:0000000000014B08                 lea     rax, [r11+1]
.text:0000000000014B0C                 add     r11, [r10]
.text:0000000000014B0F                 mov     rdx, [r10+28h]
.text:0000000000014B13                 mov     [r10+48h], rax
.text:0000000000014B17                 movzx   r9d, byte ptr [r11+rdx]
.text:0000000000014B1C                 jmp     loc_14A0A
.text:0000000000014B21 ; ---------------------------------------------------------------------------
.text:0000000000014B21
.text:0000000000014B21 loc_14B21:                              ; CODE XREF: parse_bracket_element_constprop_37+159↑j
.text:0000000000014B21                 mov     dword ptr [rbx], 3
.text:0000000000014B27                 xor     eax, eax
.text:0000000000014B29                 jmp     loc_14951
.text:0000000000014B2E ; ---------------------------------------------------------------------------
.text:0000000000014B2E
.text:0000000000014B2E loc_14B2E:                              ; CODE XREF: parse_bracket_element_constprop_37+151↑j
.text:0000000000014B2E                 mov     dword ptr [rbx], 4
.text:0000000000014B34                 xor     eax, eax
.text:0000000000014B36                 jmp     loc_14951
.text:0000000000014B3B ; ---------------------------------------------------------------------------
.text:0000000000014B3B
.text:0000000000014B3B loc_14B3B:                              ; CODE XREF: parse_bracket_element_constprop_37+149↑j
.text:0000000000014B3B                 mov     dword ptr [rbx], 2
.text:0000000000014B41                 xor     eax, eax
.text:0000000000014B43                 jmp     loc_14951
.text:0000000000014B48 ; ---------------------------------------------------------------------------
.text:0000000000014B48
.text:0000000000014B48 loc_14B48:                              ; CODE XREF: parse_bracket_element_constprop_37+6F↑j
.text:0000000000014B48                 call    ___stack_chk_fail
.text:0000000000014B48 ; } // starts at 148F0
.text:0000000000014B48 parse_bracket_element_constprop_37 endp
.text:0000000000014B48
.text:0000000000014B48 ; ---------------------------------------------------------------------------
.text:0000000000014B4D                 align 10h
.text:0000000000014B50
.text:0000000000014B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000014B50
.text:0000000000014B50
.text:0000000000014B50 peek_token      proc near               ; CODE XREF: peek_token+6BA↓p
.text:0000000000014B50                                         ; fetch_number+29↓p ...
.text:0000000000014B50
.text:0000000000014B50 var_68          = qword ptr -68h
.text:0000000000014B50 var_60          = qword ptr -60h
.text:0000000000014B50 var_58          = byte ptr -58h
.text:0000000000014B50 var_50          = byte ptr -50h
.text:0000000000014B50 var_40          = qword ptr -40h
.text:0000000000014B50
.text:0000000000014B50 ; __unwind {
.text:0000000000014B50                 push    r15
.text:0000000000014B52                 push    r14
.text:0000000000014B54                 push    r13
.text:0000000000014B56                 push    r12
.text:0000000000014B58                 push    rbp
.text:0000000000014B59                 push    rbx
.text:0000000000014B5A                 mov     rbp, rdi
.text:0000000000014B5D                 sub     rsp, 38h
.text:0000000000014B61                 mov     r14, [rsi+48h]
.text:0000000000014B65                 mov     rax, fs:28h
.text:0000000000014B6E                 mov     [rsp+68h+var_40], rax
.text:0000000000014B73                 xor     eax, eax
.text:0000000000014B75                 cmp     [rsi+68h], r14
.text:0000000000014B79                 jle     loc_14C10
.text:0000000000014B7F                 movzx   r13d, byte ptr [rdi+0Ah]
.text:0000000000014B84                 mov     r15, rdx
.text:0000000000014B87                 mov     rdx, [rsi+8]
.text:0000000000014B8B                 mov     rbx, rsi
.text:0000000000014B8E                 movzx   r12d, byte ptr [rdx+r14]
.text:0000000000014B93                 and     r13d, 0FFFFFF9Fh
.text:0000000000014B97                 mov     [rdi+0Ah], r13b
.text:0000000000014B9B                 mov     eax, [rsi+90h]
.text:0000000000014BA1                 mov     [rdi], r12b
.text:0000000000014BA4                 cmp     eax, 1
.text:0000000000014BA7                 jle     loc_14C40
.text:0000000000014BAD                 cmp     r14, [rsi+30h]
.text:0000000000014BB1                 jz      loc_14D50
.text:0000000000014BB7                 mov     rcx, [rsi+10h]
.text:0000000000014BBB                 mov     ecx, [rcx+r14*4]
.text:0000000000014BBF                 cmp     ecx, 0FFFFFFFFh
.text:0000000000014BC2                 jz      loc_14CA0
.text:0000000000014BC8                 cmp     r12b, 5Ch ; '\'
.text:0000000000014BCC                 jz      loc_14CC0
.text:0000000000014BD2                 mov     byte ptr [rdi+8], 1
.text:0000000000014BD6
.text:0000000000014BD6 loc_14BD6:                              ; CODE XREF: peek_token+216↓j
.text:0000000000014BD6                 mov     edi, ecx        ; wc
.text:0000000000014BD8                 mov     [rsp+68h+var_60], rdx
.text:0000000000014BDD                 mov     dword ptr [rsp+68h+var_68], ecx
.text:0000000000014BE0                 call    _iswalnum
.text:0000000000014BE5                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:0000000000014BE8                 test    eax, eax
.text:0000000000014BEA                 setnz   al
.text:0000000000014BED                 cmp     ecx, 5Fh ; '_'
.text:0000000000014BF0                 setz    cl
.text:0000000000014BF3                 or      eax, ecx
.text:0000000000014BF5                 shl     eax, 6
.text:0000000000014BF8                 or      r13d, eax
.text:0000000000014BFB                 mov     [rbp+0Ah], r13b
.text:0000000000014BFF                 mov     rdx, [rsp+68h+var_60]
.text:0000000000014C04                 jmp     short loc_14C7C
.text:0000000000014C04 ; ---------------------------------------------------------------------------
.text:0000000000014C06                 align 10h
.text:0000000000014C10
.text:0000000000014C10 loc_14C10:                              ; CODE XREF: peek_token+29↑j
.text:0000000000014C10                 mov     byte ptr [rdi+8], 2
.text:0000000000014C14
.text:0000000000014C14 loc_14C14:                              ; CODE XREF: peek_token+161↓j
.text:0000000000014C14                                         ; peek_token+229↓j ...
.text:0000000000014C14                 mov     rdi, [rsp+68h+var_40]
.text:0000000000014C19                 xor     rdi, fs:28h
.text:0000000000014C22                 jnz     loc_15248
.text:0000000000014C28                 add     rsp, 38h
.text:0000000000014C2C                 pop     rbx
.text:0000000000014C2D                 pop     rbp
.text:0000000000014C2E                 pop     r12
.text:0000000000014C30                 pop     r13
.text:0000000000014C32                 pop     r14
.text:0000000000014C34                 pop     r15
.text:0000000000014C36                 retn
.text:0000000000014C36 ; ---------------------------------------------------------------------------
.text:0000000000014C37                 align 20h
.text:0000000000014C40
.text:0000000000014C40 loc_14C40:                              ; CODE XREF: peek_token+57↑j
.text:0000000000014C40                 cmp     r12b, 5Ch ; '\'
.text:0000000000014C44                 jz      short loc_14CC0
.text:0000000000014C46                 mov     byte ptr [rbp+8], 1
.text:0000000000014C4A                 mov     [rsp+68h+var_68], rdx
.text:0000000000014C4E                 call    ___ctype_b_loc
.text:0000000000014C53                 mov     rsi, [rax]
.text:0000000000014C56                 movzx   ecx, r12b
.text:0000000000014C5A                 movzx   eax, word ptr [rsi+rcx*2]
.text:0000000000014C5E                 shr     ax, 3
.text:0000000000014C62                 and     eax, 1
.text:0000000000014C65                 cmp     r12b, 5Fh ; '_'
.text:0000000000014C69                 setz    cl
.text:0000000000014C6C                 or      eax, ecx
.text:0000000000014C6E                 shl     eax, 6
.text:0000000000014C71                 or      r13d, eax
.text:0000000000014C74                 mov     [rbp+0Ah], r13b
.text:0000000000014C78                 mov     rdx, [rsp+68h+var_68]
.text:0000000000014C7C
.text:0000000000014C7C loc_14C7C:                              ; CODE XREF: peek_token+B4↑j
.text:0000000000014C7C                 sub     r12d, 0Ah       ; switch 116 cases
.text:0000000000014C80                 cmp     r12b, 73h
.text:0000000000014C84                 ja      def_14C9C       ; jumptable 0000000000014C9C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000014C8A                 lea     rcx, jpt_14C9C
.text:0000000000014C91                 movzx   r12d, r12b
.text:0000000000014C95                 movsxd  rax, ds:(jpt_14C9C - 1C834h)[rcx+r12*4]
.text:0000000000014C99                 add     rax, rcx
.text:0000000000014C9C                 jmp     rax             ; switch jump
.text:0000000000014C9C ; ---------------------------------------------------------------------------
.text:0000000000014C9E                 align 20h
.text:0000000000014CA0
.text:0000000000014CA0 loc_14CA0:                              ; CODE XREF: peek_token+72↑j
.text:0000000000014CA0                 or      r13d, 20h
.text:0000000000014CA4                 mov     byte ptr [rdi+8], 1
.text:0000000000014CA8                 mov     eax, 1
.text:0000000000014CAD                 mov     [rdi+0Ah], r13b
.text:0000000000014CB1                 jmp     loc_14C14
.text:0000000000014CB1 ; ---------------------------------------------------------------------------
.text:0000000000014CB6                 align 20h
.text:0000000000014CC0
.text:0000000000014CC0 loc_14CC0:                              ; CODE XREF: peek_token+7C↑j
.text:0000000000014CC0                                         ; peek_token+F4↑j ...
.text:0000000000014CC0                 lea     rsi, [r14+1]
.text:0000000000014CC4                 cmp     rsi, [rbx+58h]
.text:0000000000014CC8                 jge     loc_14D70
.text:0000000000014CCE                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000014CD5                 jnz     loc_15160
.text:0000000000014CDB
.text:0000000000014CDB loc_14CDB:                              ; CODE XREF: peek_token+66F↓j
.text:0000000000014CDB                 movzx   edi, byte ptr [rdx+r14+1]
.text:0000000000014CE1                 mov     r12d, edi
.text:0000000000014CE4                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000014CE8
.text:0000000000014CE8 loc_14CE8:                              ; CODE XREF: peek_token+675↓j
.text:0000000000014CE8                                         ; peek_token+6A6↓j
.text:0000000000014CE8                 cmp     eax, 1
.text:0000000000014CEB                 mov     [rbp+0], r12b
.text:0000000000014CEF                 mov     byte ptr [rbp+8], 1
.text:0000000000014CF3                 jle     loc_15140
.text:0000000000014CF9                 mov     rax, [rbx+10h]
.text:0000000000014CFD                 mov     r8d, [rax+rsi*4]
.text:0000000000014D01
.text:0000000000014D01 loc_14D01:                              ; CODE XREF: peek_token+6F3↓j
.text:0000000000014D01                 mov     edi, r8d        ; wc
.text:0000000000014D04                 mov     dword ptr [rsp+68h+var_68], r8d
.text:0000000000014D08                 call    _iswalnum
.text:0000000000014D0D                 mov     r8d, dword ptr [rsp+68h+var_68]
.text:0000000000014D11                 test    eax, eax
.text:0000000000014D13                 setnz   al
.text:0000000000014D16                 cmp     r8d, 5Fh ; '_'
.text:0000000000014D1A
.text:0000000000014D1A loc_14D1A:                              ; CODE XREF: peek_token+60B↓j
.text:0000000000014D1A                 setz    dl
.text:0000000000014D1D                 lea     ecx, [r12-27h]  ; switch 87 cases
.text:0000000000014D22                 or      eax, edx
.text:0000000000014D24                 shl     eax, 6
.text:0000000000014D27                 or      r13d, eax
.text:0000000000014D2A                 cmp     cl, 56h
.text:0000000000014D2D                 mov     [rbp+0Ah], r13b
.text:0000000000014D31                 ja      def_14D48       ; jumptable 0000000000014D48 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:0000000000014D37                 lea     rdx, jpt_14D48
.text:0000000000014D3E                 movzx   ecx, cl
.text:0000000000014D41                 movsxd  rax, ds:(jpt_14D48 - 1CA04h)[rdx+rcx*4]
.text:0000000000014D45                 add     rax, rdx
.text:0000000000014D48                 jmp     rax             ; switch jump
.text:0000000000014D48 ; ---------------------------------------------------------------------------
.text:0000000000014D4A                 align 10h
.text:0000000000014D50
.text:0000000000014D50 loc_14D50:                              ; CODE XREF: peek_token+61↑j
.text:0000000000014D50                 cmp     r12b, 5Ch ; '\'
.text:0000000000014D54                 jz      loc_14CC0
.text:0000000000014D5A                 mov     rax, [rbx+10h]
.text:0000000000014D5E                 mov     byte ptr [rbp+8], 1
.text:0000000000014D62                 mov     ecx, [rax+r14*4]
.text:0000000000014D66                 jmp     loc_14BD6
.text:0000000000014D66 ; ---------------------------------------------------------------------------
.text:0000000000014D6B                 align 10h
.text:0000000000014D70
.text:0000000000014D70 loc_14D70:                              ; CODE XREF: peek_token+178↑j
.text:0000000000014D70                 mov     byte ptr [rbp+8], 24h ; '$'
.text:0000000000014D74                 mov     eax, 1
.text:0000000000014D79                 jmp     loc_14C14
.text:0000000000014D79 ; ---------------------------------------------------------------------------
.text:0000000000014D7E                 align 20h
.text:0000000000014D80
.text:0000000000014D80 loc_14D80:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014D80                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014D80                 and     r15d, 1200h     ; jumptable 0000000000014C9C case 125
.text:0000000000014D87                 mov     eax, 1
.text:0000000000014D8C                 cmp     r15, 1200h
.text:0000000000014D93                 jnz     loc_14C14
.text:0000000000014D99
.text:0000000000014D99 loc_14D99:                              ; CODE XREF: peek_token+451↓j
.text:0000000000014D99                 mov     byte ptr [rbp+8], 18h
.text:0000000000014D9D                 jmp     loc_14C14
.text:0000000000014D9D ; ---------------------------------------------------------------------------
.text:0000000000014DA2                 align 8
.text:0000000000014DA8
.text:0000000000014DA8 loc_14DA8:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014DA8                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014DA8                 and     r15d, 8400h     ; jumptable 0000000000014C9C case 124
.text:0000000000014DAF                 cmp     r15, 8000h
.text:0000000000014DB6                 jz      loc_14E92
.text:0000000000014DBC
.text:0000000000014DBC def_14C9C:                              ; CODE XREF: peek_token+134↑j
.text:0000000000014DBC                                         ; peek_token+14C↑j ...
.text:0000000000014DBC                 mov     eax, 1          ; jumptable 0000000000014C9C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000014DC1                 jmp     loc_14C14
.text:0000000000014DC1 ; ---------------------------------------------------------------------------
.text:0000000000014DC6                 align 10h
.text:0000000000014DD0
.text:0000000000014DD0 loc_14DD0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014DD0                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014DD0                 and     r15d, 1200h     ; jumptable 0000000000014C9C case 123
.text:0000000000014DD7                 mov     eax, 1
.text:0000000000014DDC                 cmp     r15, 1200h
.text:0000000000014DE3                 jnz     loc_14C14
.text:0000000000014DE9
.text:0000000000014DE9 loc_14DE9:                              ; CODE XREF: peek_token+3FD↓j
.text:0000000000014DE9                 mov     byte ptr [rbp+8], 17h
.text:0000000000014DED                 jmp     loc_14C14
.text:0000000000014DED ; ---------------------------------------------------------------------------
.text:0000000000014DF2                 align 8
.text:0000000000014DF8
.text:0000000000014DF8 loc_14DF8:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014DF8                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014DF8                 test    r15d, 800008h   ; jumptable 0000000000014C9C case 94
.text:0000000000014DFF                 jnz     short loc_14E0A
.text:0000000000014E01                 test    r14, r14
.text:0000000000014E04                 jnz     loc_151CA
.text:0000000000014E0A
.text:0000000000014E0A loc_14E0A:                              ; CODE XREF: peek_token+2AF↑j
.text:0000000000014E0A                                         ; peek_token+693↓j
.text:0000000000014E0A                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000014E0E                 mov     dword ptr [rbp+0], 10h
.text:0000000000014E15                 mov     eax, 1
.text:0000000000014E1A                 jmp     loc_14C14
.text:0000000000014E1A ; ---------------------------------------------------------------------------
.text:0000000000014E1F                 align 20h
.text:0000000000014E20
.text:0000000000014E20 loc_14E20:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014E20                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014E20                 mov     byte ptr [rbp+8], 14h ; jumptable 0000000000014C9C case 91
.text:0000000000014E24                 mov     eax, 1
.text:0000000000014E29                 jmp     loc_14C14
.text:0000000000014E29 ; ---------------------------------------------------------------------------
.text:0000000000014E2E                 align 10h
.text:0000000000014E30
.text:0000000000014E30 loc_14E30:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014E30                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014E30                 test    r15d, 402h      ; jumptable 0000000000014C9C case 63
.text:0000000000014E37                 mov     eax, 1
.text:0000000000014E3C                 jnz     loc_14C14
.text:0000000000014E42
.text:0000000000014E42 loc_14E42:                              ; CODE XREF: peek_token+508↓j
.text:0000000000014E42                 mov     byte ptr [rbp+8], 13h
.text:0000000000014E46                 jmp     loc_14C14
.text:0000000000014E46 ; ---------------------------------------------------------------------------
.text:0000000000014E4B                 align 10h
.text:0000000000014E50
.text:0000000000014E50 loc_14E50:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014E50                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014E50                 mov     byte ptr [rbp+8], 5 ; jumptable 0000000000014C9C case 46
.text:0000000000014E54                 mov     eax, 1
.text:0000000000014E59                 jmp     loc_14C14
.text:0000000000014E59 ; ---------------------------------------------------------------------------
.text:0000000000014E5E                 align 20h
.text:0000000000014E60
.text:0000000000014E60 loc_14E60:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014E60                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014E60                 test    r15d, 402h      ; jumptable 0000000000014C9C case 43
.text:0000000000014E67                 mov     eax, 1
.text:0000000000014E6C                 jnz     loc_14C14
.text:0000000000014E72
.text:0000000000014E72 loc_14E72:                              ; CODE XREF: peek_token+590↓j
.text:0000000000014E72                 mov     byte ptr [rbp+8], 12h
.text:0000000000014E76                 jmp     loc_14C14
.text:0000000000014E76 ; ---------------------------------------------------------------------------
.text:0000000000014E7B                 align 20h
.text:0000000000014E80
.text:0000000000014E80 loc_14E80:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014E80                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014E80                 test    r15d, 800h      ; jumptable 0000000000014C9C case 10
.text:0000000000014E87                 mov     eax, 1
.text:0000000000014E8C                 jz      loc_14C14
.text:0000000000014E92
.text:0000000000014E92 loc_14E92:                              ; CODE XREF: peek_token+266↑j
.text:0000000000014E92                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000014E96                 mov     eax, 1
.text:0000000000014E9B                 jmp     loc_14C14
.text:0000000000014EA0 ; ---------------------------------------------------------------------------
.text:0000000000014EA0
.text:0000000000014EA0 loc_14EA0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014EA0                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014EA0                 mov     byte ptr [rbp+8], 0Bh ; jumptable 0000000000014C9C case 42
.text:0000000000014EA4                 mov     eax, 1
.text:0000000000014EA9                 jmp     loc_14C14
.text:0000000000014EA9 ; ---------------------------------------------------------------------------
.text:0000000000014EAE                 align 10h
.text:0000000000014EB0
.text:0000000000014EB0 loc_14EB0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014EB0                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014EB0                 test    r15d, 2000h     ; jumptable 0000000000014C9C case 41
.text:0000000000014EB7                 mov     eax, 1
.text:0000000000014EBC                 jz      loc_14C14
.text:0000000000014EC2
.text:0000000000014EC2 loc_14EC2:                              ; CODE XREF: peek_token+5A7↓j
.text:0000000000014EC2                 mov     byte ptr [rbp+8], 9
.text:0000000000014EC6                 jmp     loc_14C14
.text:0000000000014EC6 ; ---------------------------------------------------------------------------
.text:0000000000014ECB                 align 10h
.text:0000000000014ED0
.text:0000000000014ED0 loc_14ED0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014ED0                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014ED0                 test    r15d, 2000h     ; jumptable 0000000000014C9C case 40
.text:0000000000014ED7                 mov     eax, 1
.text:0000000000014EDC                 jz      loc_14C14
.text:0000000000014EE2
.text:0000000000014EE2 loc_14EE2:                              ; CODE XREF: peek_token+5BE↓j
.text:0000000000014EE2                 mov     byte ptr [rbp+8], 8
.text:0000000000014EE6                 jmp     loc_14C14
.text:0000000000014EE6 ; ---------------------------------------------------------------------------
.text:0000000000014EEB                 align 10h
.text:0000000000014EF0
.text:0000000000014EF0 loc_14EF0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000014EF0                                         ; DATA XREF: .rodata:jpt_14C9C↓o
.text:0000000000014EF0                 test    r15b, 8         ; jumptable 0000000000014C9C case 36
.text:0000000000014EF4                 jnz     short loc_14F04
.text:0000000000014EF6                 add     r14, 1
.text:0000000000014EFA                 cmp     r14, [rbx+58h]
.text:0000000000014EFE                 jnz     loc_151FB
.text:0000000000014F04
.text:0000000000014F04 loc_14F04:                              ; CODE XREF: peek_token+3A4↑j
.text:0000000000014F04                                         ; peek_token+6DA↓j
.text:0000000000014F04                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000014F08                 mov     dword ptr [rbp+0], 20h ; ' '
.text:0000000000014F0F                 mov     eax, 1
.text:0000000000014F14                 jmp     loc_14C14
.text:0000000000014F19 ; ---------------------------------------------------------------------------
.text:0000000000014F19
.text:0000000000014F19 loc_14F19:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014F19                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014F19                 test    r15d, 8400h     ; jumptable 0000000000014D48 case 124
.text:0000000000014F20                 mov     eax, 2
.text:0000000000014F25                 jnz     loc_14C14
.text:0000000000014F2B                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000014F2F                 jmp     loc_14C14
.text:0000000000014F34 ; ---------------------------------------------------------------------------
.text:0000000000014F34
.text:0000000000014F34 loc_14F34:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014F34                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014F34                 and     r15d, 1200h     ; jumptable 0000000000014D48 case 123
.text:0000000000014F3B                 mov     eax, 2
.text:0000000000014F40                 cmp     r15, 200h
.text:0000000000014F47                 jnz     loc_14C14
.text:0000000000014F4D                 jmp     loc_14DE9
.text:0000000000014F52 ; ---------------------------------------------------------------------------
.text:0000000000014F52
.text:0000000000014F52 loc_14F52:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014F52                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014F52                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 119
.text:0000000000014F59                 mov     eax, 2
.text:0000000000014F5E                 jnz     loc_14C14
.text:0000000000014F64                 mov     byte ptr [rbp+8], 20h ; ' '
.text:0000000000014F68                 jmp     loc_14C14
.text:0000000000014F6D ; ---------------------------------------------------------------------------
.text:0000000000014F6D
.text:0000000000014F6D loc_14F6D:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014F6D                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014F6D                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 115
.text:0000000000014F74                 mov     eax, 2
.text:0000000000014F79                 jnz     loc_14C14
.text:0000000000014F7F                 mov     byte ptr [rbp+8], 22h ; '"'
.text:0000000000014F83                 jmp     loc_14C14
.text:0000000000014F88 ; ---------------------------------------------------------------------------
.text:0000000000014F88
.text:0000000000014F88 loc_14F88:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014F88                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014F88                 and     r15d, 1200h     ; jumptable 0000000000014D48 case 125
.text:0000000000014F8F                 mov     eax, 2
.text:0000000000014F94                 cmp     r15, 200h
.text:0000000000014F9B                 jnz     loc_14C14
.text:0000000000014FA1                 jmp     loc_14D99
.text:0000000000014FA6 ; ---------------------------------------------------------------------------
.text:0000000000014FA6
.text:0000000000014FA6 loc_14FA6:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014FA6                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014FA6                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 98
.text:0000000000014FAD                 mov     eax, 2
.text:0000000000014FB2                 jnz     loc_14C14
.text:0000000000014FB8                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000014FBC                 mov     dword ptr [rbp+0], 100h
.text:0000000000014FC3                 jmp     loc_14C14
.text:0000000000014FC8 ; ---------------------------------------------------------------------------
.text:0000000000014FC8
.text:0000000000014FC8 loc_14FC8:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014FC8                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014FC8                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 96
.text:0000000000014FCF                 mov     eax, 2
.text:0000000000014FD4                 jnz     loc_14C14
.text:0000000000014FDA                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000014FDE                 mov     dword ptr [rbp+0], 40h ; '@'
.text:0000000000014FE5                 jmp     loc_14C14
.text:0000000000014FEA ; ---------------------------------------------------------------------------
.text:0000000000014FEA
.text:0000000000014FEA loc_14FEA:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000014FEA                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000014FEA                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 87
.text:0000000000014FF1                 mov     eax, 2
.text:0000000000014FF6                 jnz     loc_14C14
.text:0000000000014FFC                 mov     byte ptr [rbp+8], 21h ; '!'
.text:0000000000015000                 jmp     loc_14C14
.text:0000000000015005 ; ---------------------------------------------------------------------------
.text:0000000000015005
.text:0000000000015005 loc_15005:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000015005                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000015005                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 83
.text:000000000001500C                 mov     eax, 2
.text:0000000000015011                 jnz     loc_14C14
.text:0000000000015017                 mov     byte ptr [rbp+8], 23h ; '#'
.text:000000000001501B                 jmp     loc_14C14
.text:0000000000015020 ; ---------------------------------------------------------------------------
.text:0000000000015020
.text:0000000000015020 loc_15020:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000015020                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000015020                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 66
.text:0000000000015027                 mov     eax, 2
.text:000000000001502C                 jnz     loc_14C14
.text:0000000000015032                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000015036                 mov     dword ptr [rbp+0], 200h
.text:000000000001503D                 jmp     loc_14C14
.text:0000000000015042 ; ---------------------------------------------------------------------------
.text:0000000000015042
.text:0000000000015042 loc_15042:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000015042                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000015042                 and     r15d, 402h      ; jumptable 0000000000014D48 case 63
.text:0000000000015049                 mov     eax, 2
.text:000000000001504E                 cmp     r15, 2
.text:0000000000015052                 jnz     loc_14C14
.text:0000000000015058                 jmp     loc_14E42
.text:000000000001505D ; ---------------------------------------------------------------------------
.text:000000000001505D
.text:000000000001505D loc_1505D:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001505D                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:000000000001505D                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 62
.text:0000000000015064                 mov     eax, 2
.text:0000000000015069                 jnz     loc_14C14
.text:000000000001506F                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000015073                 mov     dword ptr [rbp+0], 9
.text:000000000001507A                 jmp     loc_14C14
.text:000000000001507F ; ---------------------------------------------------------------------------
.text:000000000001507F
.text:000000000001507F loc_1507F:                              ; CODE XREF: peek_token+1F8↑j
.text:000000000001507F                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:000000000001507F                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 60
.text:0000000000015086                 mov     eax, 2
.text:000000000001508B                 jnz     loc_14C14
.text:0000000000015091                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000015095                 mov     dword ptr [rbp+0], 6
.text:000000000001509C                 jmp     loc_14C14
.text:00000000000150A1 ; ---------------------------------------------------------------------------
.text:00000000000150A1
.text:00000000000150A1 loc_150A1:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000150A1                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:00000000000150A1                 test    r15d, 4000h     ; jumptable 0000000000014D48 cases 49-57
.text:00000000000150A8                 mov     eax, 2
.text:00000000000150AD                 jnz     loc_14C14
.text:00000000000150B3                 mov     edx, dword ptr [rsp+68h+var_60]
.text:00000000000150B7                 mov     byte ptr [rbp+8], 4
.text:00000000000150BB                 sub     edx, 31h ; '1'
.text:00000000000150BE                 movsxd  rdx, edx
.text:00000000000150C1                 mov     [rbp+0], rdx
.text:00000000000150C5                 jmp     loc_14C14
.text:00000000000150CA ; ---------------------------------------------------------------------------
.text:00000000000150CA
.text:00000000000150CA loc_150CA:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000150CA                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:00000000000150CA                 and     r15d, 402h      ; jumptable 0000000000014D48 case 43
.text:00000000000150D1                 mov     eax, 2
.text:00000000000150D6                 cmp     r15, 2
.text:00000000000150DA                 jnz     loc_14C14
.text:00000000000150E0                 jmp     loc_14E72
.text:00000000000150E5 ; ---------------------------------------------------------------------------
.text:00000000000150E5
.text:00000000000150E5 loc_150E5:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000150E5                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:00000000000150E5                 test    r15d, 2000h     ; jumptable 0000000000014D48 case 41
.text:00000000000150EC                 mov     eax, 2
.text:00000000000150F1                 jnz     loc_14C14
.text:00000000000150F7                 jmp     loc_14EC2
.text:00000000000150FC ; ---------------------------------------------------------------------------
.text:00000000000150FC
.text:00000000000150FC loc_150FC:                              ; CODE XREF: peek_token+1F8↑j
.text:00000000000150FC                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:00000000000150FC                 test    r15d, 2000h     ; jumptable 0000000000014D48 case 40
.text:0000000000015103                 mov     eax, 2
.text:0000000000015108                 jnz     loc_14C14
.text:000000000001510E                 jmp     loc_14EE2
.text:0000000000015113 ; ---------------------------------------------------------------------------
.text:0000000000015113
.text:0000000000015113 loc_15113:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000015113                                         ; DATA XREF: .rodata:jpt_14D48↓o
.text:0000000000015113                 test    r15d, 80000h    ; jumptable 0000000000014D48 case 39
.text:000000000001511A                 mov     eax, 2
.text:000000000001511F                 jnz     loc_14C14
.text:0000000000015125                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000015129                 mov     dword ptr [rbp+0], 80h
.text:0000000000015130                 jmp     loc_14C14
.text:0000000000015135 ; ---------------------------------------------------------------------------
.text:0000000000015135
.text:0000000000015135 def_14D48:                              ; CODE XREF: peek_token+1E1↑j
.text:0000000000015135                                         ; peek_token+1F8↑j
.text:0000000000015135                                         ; DATA XREF: ...
.text:0000000000015135                 mov     eax, 2          ; jumptable 0000000000014D48 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:000000000001513A                 jmp     loc_14C14
.text:000000000001513A ; ---------------------------------------------------------------------------
.text:000000000001513F                 align 20h
.text:0000000000015140
.text:0000000000015140 loc_15140:                              ; CODE XREF: peek_token+1A3↑j
.text:0000000000015140                 call    ___ctype_b_loc
.text:0000000000015145                 mov     rsi, [rax]
.text:0000000000015148                 movzx   edx, r12b
.text:000000000001514C                 movzx   eax, word ptr [rsi+rdx*2]
.text:0000000000015150                 shr     ax, 3
.text:0000000000015154                 and     eax, 1
.text:0000000000015157                 cmp     r12b, 5Fh ; '_'
.text:000000000001515B                 jmp     loc_14D1A
.text:0000000000015160 ; ---------------------------------------------------------------------------
.text:0000000000015160
.text:0000000000015160 loc_15160:                              ; CODE XREF: peek_token+185↑j
.text:0000000000015160                 cmp     eax, 1
.text:0000000000015163                 jle     short loc_15194
.text:0000000000015165                 mov     rcx, [rbx+10h]
.text:0000000000015169                 lea     rdi, ds:0[rsi*4]
.text:0000000000015171                 mov     r8d, [rcx+rsi*4]
.text:0000000000015175                 cmp     r8d, 0FFFFFFFFh
.text:0000000000015179                 jz      loc_1522F
.text:000000000001517F                 lea     r9, [r14+2]
.text:0000000000015183                 cmp     [rbx+30h], r9
.text:0000000000015187                 jz      short loc_15194
.text:0000000000015189                 cmp     dword ptr [rcx+rdi+4], 0FFFFFFFFh
.text:000000000001518E                 jz      loc_1522F
.text:0000000000015194
.text:0000000000015194 loc_15194:                              ; CODE XREF: peek_token+613↑j
.text:0000000000015194                                         ; peek_token+637↑j
.text:0000000000015194                 cmp     byte ptr [rbx+8Ch], 0
.text:000000000001519B                 mov     rcx, [rbx]
.text:000000000001519E                 mov     rdi, [rbx+28h]
.text:00000000000151A2                 jz      short loc_151E8
.text:00000000000151A4                 mov     r8, [rbx+18h]
.text:00000000000151A8                 add     rcx, rdi
.text:00000000000151AB                 add     rcx, [r8+rsi*8]
.text:00000000000151AF                 movzx   edi, byte ptr [rcx]
.text:00000000000151B2                 mov     r12d, edi
.text:00000000000151B5                 mov     dword ptr [rsp+68h+var_60], edi
.text:00000000000151B9                 and     edi, 80h
.text:00000000000151BF                 jnz     loc_14CDB
.text:00000000000151C5                 jmp     loc_14CE8
.text:00000000000151CA ; ---------------------------------------------------------------------------
.text:00000000000151CA
.text:00000000000151CA loc_151CA:                              ; CODE XREF: peek_token+2B4↑j
.text:00000000000151CA                 cmp     byte ptr [rdx+r14-1], 0Ah
.text:00000000000151D0                 jnz     def_14C9C       ; jumptable 0000000000014C9C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:00000000000151D6                 test    r15d, 800h
.text:00000000000151DD                 jz      def_14C9C       ; jumptable 0000000000014C9C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:00000000000151E3                 jmp     loc_14E0A
.text:00000000000151E8 ; ---------------------------------------------------------------------------
.text:00000000000151E8
.text:00000000000151E8 loc_151E8:                              ; CODE XREF: peek_token+652↑j
.text:00000000000151E8                 add     rcx, rsi
.text:00000000000151EB                 movzx   edi, byte ptr [rcx+rdi]
.text:00000000000151EF                 mov     r12d, edi
.text:00000000000151F2                 mov     dword ptr [rsp+68h+var_60], edi
.text:00000000000151F6                 jmp     loc_14CE8
.text:00000000000151FB ; ---------------------------------------------------------------------------
.text:00000000000151FB
.text:00000000000151FB loc_151FB:                              ; CODE XREF: peek_token+3AE↑j
.text:00000000000151FB                 lea     rdi, [rsp+68h+var_58]
.text:0000000000015200                 mov     rdx, r15
.text:0000000000015203                 mov     [rbx+48h], r14
.text:0000000000015207                 mov     rsi, rbx
.text:000000000001520A                 call    peek_token
.text:000000000001520F                 movzx   eax, [rsp+68h+var_50]
.text:0000000000015214                 sub     qword ptr [rbx+48h], 1
.text:0000000000015219                 lea     edx, [rax-9]
.text:000000000001521C                 mov     eax, 1
.text:0000000000015221                 cmp     dl, 1
.text:0000000000015224                 ja      loc_14C14
.text:000000000001522A                 jmp     loc_14F04
.text:000000000001522F ; ---------------------------------------------------------------------------
.text:000000000001522F
.text:000000000001522F loc_1522F:                              ; CODE XREF: peek_token+629↑j
.text:000000000001522F                                         ; peek_token+63E↑j
.text:000000000001522F                 movzx   eax, byte ptr [rdx+r14+1]
.text:0000000000015235                 mov     byte ptr [rbp+8], 1
.text:0000000000015239                 mov     r12d, eax
.text:000000000001523C                 mov     [rbp+0], al
.text:000000000001523F                 mov     dword ptr [rsp+68h+var_60], eax
.text:0000000000015243                 jmp     loc_14D01
.text:0000000000015248 ; ---------------------------------------------------------------------------
.text:0000000000015248
.text:0000000000015248 loc_15248:                              ; CODE XREF: peek_token+D2↑j
.text:0000000000015248                 call    ___stack_chk_fail
.text:0000000000015248 ; } // starts at 14B50
.text:0000000000015248 peek_token      endp
.text:0000000000015248
.text:0000000000015248 ; ---------------------------------------------------------------------------
.text:000000000001524D                 align 10h
.text:0000000000015250
.text:0000000000015250 ; =============== S U B R O U T I N E =======================================
.text:0000000000015250
.text:0000000000015250
.text:0000000000015250 fetch_number    proc near               ; CODE XREF: parse_expression+527↓p
.text:0000000000015250                                         ; parse_expression+611↓p
.text:0000000000015250 ; __unwind {
.text:0000000000015250                 push    r14
.text:0000000000015252                 mov     r14, rdi
.text:0000000000015255                 push    r13
.text:0000000000015257                 mov     r13, rsi
.text:000000000001525A                 push    r12
.text:000000000001525C                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000015263                 push    rbp
.text:0000000000015264                 mov     rbp, rdx
.text:0000000000015267                 push    rbx
.text:0000000000015268                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001526F                 nop
.text:0000000000015270
.text:0000000000015270 loc_15270:                              ; CODE XREF: fetch_number+52↓j
.text:0000000000015270                                         ; fetch_number+87↓j ...
.text:0000000000015270                 mov     rdx, rbp
.text:0000000000015273                 mov     rsi, r14
.text:0000000000015276                 mov     rdi, r13
.text:0000000000015279                 call    peek_token
.text:000000000001527E                 cdqe
.text:0000000000015280                 add     [r14+48h], rax
.text:0000000000015284                 movzx   eax, byte ptr [r13+8]
.text:0000000000015289                 movzx   edx, byte ptr [r13+0]
.text:000000000001528E                 cmp     al, 2
.text:0000000000015290                 jz      short loc_152E0
.text:0000000000015292                 cmp     al, 18h
.text:0000000000015294                 jz      short loc_152E7
.text:0000000000015296                 cmp     dl, 2Ch ; ','
.text:0000000000015299                 jz      short loc_152E7
.text:000000000001529B                 cmp     al, 1
.text:000000000001529D                 jz      short loc_152A8
.text:000000000001529F
.text:000000000001529F loc_1529F:                              ; CODE XREF: fetch_number+5D↓j
.text:000000000001529F                                         ; fetch_number+63↓j
.text:000000000001529F                 mov     rbx, r12
.text:00000000000152A2                 jmp     short loc_15270
.text:00000000000152A2 ; ---------------------------------------------------------------------------
.text:00000000000152A4                 align 8
.text:00000000000152A8
.text:00000000000152A8 loc_152A8:                              ; CODE XREF: fetch_number+4D↑j
.text:00000000000152A8                 lea     eax, [rdx-30h]
.text:00000000000152AB                 cmp     al, 9
.text:00000000000152AD                 ja      short loc_1529F
.text:00000000000152AF                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:00000000000152B3                 jz      short loc_1529F
.text:00000000000152B5                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000152B9                 jz      short loc_152F8
.text:00000000000152BB                 lea     rax, [rbx+rbx*4]
.text:00000000000152BF                 lea     rbx, [rdx+rax*2]
.text:00000000000152C3                 mov     eax, 8030h
.text:00000000000152C8                 cmp     rbx, 8030h
.text:00000000000152CF                 cmovg   rbx, rax
.text:00000000000152D3                 sub     rbx, 30h ; '0'
.text:00000000000152D7                 jmp     short loc_15270
.text:00000000000152D7 ; ---------------------------------------------------------------------------
.text:00000000000152D9                 align 20h
.text:00000000000152E0
.text:00000000000152E0 loc_152E0:                              ; CODE XREF: fetch_number+40↑j
.text:00000000000152E0                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:00000000000152E7
.text:00000000000152E7 loc_152E7:                              ; CODE XREF: fetch_number+44↑j
.text:00000000000152E7                                         ; fetch_number+49↑j
.text:00000000000152E7                 mov     rax, rbx
.text:00000000000152EA                 pop     rbx
.text:00000000000152EB                 pop     rbp
.text:00000000000152EC                 pop     r12
.text:00000000000152EE                 pop     r13
.text:00000000000152F0                 pop     r14
.text:00000000000152F2                 retn
.text:00000000000152F2 ; ---------------------------------------------------------------------------
.text:00000000000152F3                 align 8
.text:00000000000152F8
.text:00000000000152F8 loc_152F8:                              ; CODE XREF: fetch_number+69↑j
.text:00000000000152F8                 movzx   ebx, dl
.text:00000000000152FB                 sub     ebx, 30h ; '0'
.text:00000000000152FE                 movsxd  rbx, ebx
.text:0000000000015301                 jmp     loc_15270
.text:0000000000015301 ; } // starts at 15250
.text:0000000000015301 fetch_number    endp
.text:0000000000015301
.text:0000000000015301 ; ---------------------------------------------------------------------------
.text:0000000000015306                 align 10h
.text:0000000000015310
.text:0000000000015310 ; =============== S U B R O U T I N E =======================================
.text:0000000000015310
.text:0000000000015310
.text:0000000000015310 parse_expression proc near              ; CODE XREF: parse_expression+FFA↓p
.text:0000000000015310                                         ; parse_branch+39↓p ...
.text:0000000000015310
.text:0000000000015310 var_158         = qword ptr -158h
.text:0000000000015310 var_148         = qword ptr -148h
.text:0000000000015310 var_140         = qword ptr -140h
.text:0000000000015310 var_138         = qword ptr -138h
.text:0000000000015310 var_130         = qword ptr -130h
.text:0000000000015310 var_128         = xmmword ptr -128h
.text:0000000000015310 var_118         = qword ptr -118h
.text:0000000000015310 var_110         = qword ptr -110h
.text:0000000000015310 var_101         = byte ptr -101h
.text:0000000000015310 var_100         = qword ptr -100h
.text:0000000000015310 var_F8          = qword ptr -0F8h
.text:0000000000015310 var_F0          = qword ptr -0F0h
.text:0000000000015310 var_E8          = qword ptr -0E8h
.text:0000000000015310 ptr             = qword ptr -0E0h
.text:0000000000015310 size            = qword ptr -0D8h
.text:0000000000015310 var_D0          = dword ptr -0D0h
.text:0000000000015310 var_CC          = dword ptr -0CCh
.text:0000000000015310 var_C0          = qword ptr -0C0h
.text:0000000000015310 var_B8          = dword ptr -0B8h
.text:0000000000015310 var_B0          = qword ptr -0B0h
.text:0000000000015310 var_A8          = qword ptr -0A8h
.text:0000000000015310 var_A0          = qword ptr -0A0h
.text:0000000000015310 var_98          = byte ptr -98h
.text:0000000000015310 var_90          = byte ptr -90h
.text:0000000000015310 var_88          = byte ptr -88h
.text:0000000000015310 var_68          = byte ptr -68h
.text:0000000000015310 var_40          = qword ptr -40h
.text:0000000000015310
.text:0000000000015310 ; __unwind {
.text:0000000000015310                 push    r15
.text:0000000000015312                 push    r14
.text:0000000000015314                 push    r13
.text:0000000000015316                 push    r12
.text:0000000000015318                 push    rbp
.text:0000000000015319                 push    rbx
.text:000000000001531A                 sub     rsp, 128h
.text:0000000000015321                 mov     [rsp+158h+var_138], rcx
.text:0000000000015326                 movzx   ecx, byte ptr [rdx+8]
.text:000000000001532A                 mov     rax, fs:28h
.text:0000000000015333                 mov     [rsp+158h+var_40], rax
.text:000000000001533B                 xor     eax, eax
.text:000000000001533D                 mov     rax, [rsi]
.text:0000000000015340                 mov     [rsp+158h+var_140], rdx
.text:0000000000015345                 mov     [rsp+158h+var_118], r9
.text:000000000001534A                 cmp     cl, 24h         ; switch 37 cases
.text:000000000001534D                 mov     [rsp+158h+var_148], rax
.text:0000000000015352                 ja      def_1536F       ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000015358                 mov     rbp, rsi
.text:000000000001535B                 lea     rsi, jpt_1536F
.text:0000000000015362                 movzx   edx, cl
.text:0000000000015365                 mov     r14, rdi
.text:0000000000015368                 movsxd  rax, ds:(jpt_1536F - 1CB60h)[rsi+rdx*4]
.text:000000000001536C                 add     rax, rsi
.text:000000000001536F                 jmp     rax             ; switch jump
.text:0000000000015371 ; ---------------------------------------------------------------------------
.text:0000000000015371
.text:0000000000015371 loc_15371:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015371                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015371                 mov     rbx, [rbp+30h]  ; jumptable 000000000001536F case 8
.text:0000000000015375                 mov     r15, [rsp+158h+var_138]
.text:000000000001537A                 mov     rsi, rdi
.text:000000000001537D                 mov     r13, [rsp+158h+var_140]
.text:0000000000015382                 mov     [rsp+158h+var_158], r8
.text:0000000000015386                 lea     rax, [rbx+1]
.text:000000000001538A                 mov     rdx, r15
.text:000000000001538D                 or      rdx, 800000h
.text:0000000000015394                 mov     rdi, r13
.text:0000000000015397                 mov     [rbp+30h], rax
.text:000000000001539B                 call    peek_token
.text:00000000000153A0                 cdqe
.text:00000000000153A2                 add     [r14+48h], rax
.text:00000000000153A6                 xor     eax, eax
.text:00000000000153A8                 cmp     byte ptr [r13+8], 9
.text:00000000000153AD                 mov     rdx, r13
.text:00000000000153B0                 jz      loc_15EB0
.text:00000000000153B6                 mov     r13, [rsp+158h+var_118]
.text:00000000000153BB                 mov     r8, [rsp+158h+var_158]
.text:00000000000153BF                 mov     rcx, r15
.text:00000000000153C2                 mov     rsi, rbp
.text:00000000000153C5                 mov     rdi, r14
.text:00000000000153C8                 add     r8, 1
.text:00000000000153CC                 mov     r9, r13
.text:00000000000153CF                 call    parse_reg_exp
.text:00000000000153D4                 mov     r11d, [r13+0]
.text:00000000000153D8                 test    r11d, r11d
.text:00000000000153DB                 jnz     short def_1536F ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:00000000000153DD                 mov     rdx, [rsp+158h+var_140]
.text:00000000000153E2                 cmp     byte ptr [rdx+8], 9
.text:00000000000153E6                 jz      loc_15EB0
.text:00000000000153EC                 test    rax, rax
.text:00000000000153EF                 jz      short loc_15402
.text:00000000000153F1                 lea     rsi, free_tree
.text:00000000000153F8                 xor     edx, edx
.text:00000000000153FA                 mov     rdi, rax
.text:00000000000153FD                 call    postorder
.text:0000000000015402
.text:0000000000015402 loc_15402:                              ; CODE XREF: parse_expression+DF↑j
.text:0000000000015402                 mov     rax, [rsp+158h+var_118]
.text:0000000000015407                 mov     dword ptr [rax], 8
.text:000000000001540D                 nop     dword ptr [rax]
.text:0000000000015410
.text:0000000000015410 def_1536F:                              ; CODE XREF: parse_expression+42↑j
.text:0000000000015410                                         ; parse_expression+5F↑j ...
.text:0000000000015410                 mov     [rsp+158h+var_130], 0 ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000015419                 nop     dword ptr [rax+00000000h]
.text:0000000000015420
.text:0000000000015420 loc_15420:                              ; CODE XREF: parse_expression+1CA↓j
.text:0000000000015420                                         ; parse_expression+1DE↓j ...
.text:0000000000015420                 mov     rdi, [rsp+158h+var_40]
.text:0000000000015428                 xor     rdi, fs:28h
.text:0000000000015431                 mov     rax, [rsp+158h+var_130]
.text:0000000000015436                 jnz     loc_167AE
.text:000000000001543C                 add     rsp, 128h
.text:0000000000015443                 pop     rbx
.text:0000000000015444                 pop     rbp
.text:0000000000015445                 pop     r12
.text:0000000000015447                 pop     r13
.text:0000000000015449                 pop     r14
.text:000000000001544B                 pop     r15
.text:000000000001544D                 retn
.text:000000000001544E ; ---------------------------------------------------------------------------
.text:000000000001544E
.text:000000000001544E loc_1544E:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001544E                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:000000000001544E                 test    [rsp+158h+var_138], 1000000h ; jumptable 000000000001536F case 23
.text:0000000000015457                 jnz     loc_156AD
.text:000000000001545D
.text:000000000001545D loc_1545D:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001545D                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:000000000001545D                 mov     rax, [rsp+158h+var_138] ; jumptable 000000000001536F cases 11,18,19
.text:0000000000015462                 test    al, 20h
.text:0000000000015464                 jnz     loc_156AD
.text:000000000001546A                 test    al, 10h
.text:000000000001546C                 jnz     loc_162D5
.text:0000000000015472                 cmp     cl, 9
.text:0000000000015475                 jz      loc_15E88       ; jumptable 000000000001536F case 9
.text:000000000001547B
.text:000000000001547B loc_1547B:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001547B                                         ; parse_expression+B81↓j
.text:000000000001547B                                         ; DATA XREF: ...
.text:000000000001547B                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001536F case 24
.text:0000000000015480                 mov     r8, [rsp+158h+var_140]
.text:0000000000015485                 xor     ecx, ecx
.text:0000000000015487                 xor     edx, edx
.text:0000000000015489                 lea     rsi, [rax+80h]
.text:0000000000015490                 lea     rdi, [rax+70h]
.text:0000000000015494                 mov     byte ptr [r8+8], 1
.text:0000000000015499                 call    create_token_tree_isra_16
.text:000000000001549E                 test    rax, rax
.text:00000000000154A1                 mov     [rsp+158h+var_130], rax
.text:00000000000154A6                 jz      loc_15E78
.text:00000000000154AC
.text:00000000000154AC loc_154AC:                              ; CODE XREF: parse_expression+9A0↓j
.text:00000000000154AC                                         ; parse_expression+9A9↓j ...
.text:00000000000154AC                 mov     rbx, [rsp+158h+var_140]
.text:00000000000154B1                 mov     rdx, [rsp+158h+var_138]
.text:00000000000154B6                 mov     rsi, r14
.text:00000000000154B9                 lea     r15, [rsp+158h+var_98]
.text:00000000000154C1                 mov     rdi, rbx
.text:00000000000154C4                 call    peek_token
.text:00000000000154C9                 cdqe
.text:00000000000154CB                 add     [r14+48h], rax
.text:00000000000154CF                 movzx   eax, byte ptr [rbx+8]
.text:00000000000154D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000154D8
.text:00000000000154D8 loc_154D8:                              ; CODE XREF: parse_expression+370↓j
.text:00000000000154D8                                         ; parse_expression+37C↓j
.text:00000000000154D8                 cmp     al, 17h
.text:00000000000154DA                 ja      loc_15420
.text:00000000000154E0                 cmp     al, 12h
.text:00000000000154E2                 mov     ecx, 8C0800h
.text:00000000000154E7                 setz    bl
.text:00000000000154EA                 bt      rcx, rax
.text:00000000000154EE                 jnb     loc_15420
.text:00000000000154F4                 mov     rcx, [rsp+158h+var_140]
.text:00000000000154F9                 cmp     al, 17h
.text:00000000000154FB                 mov     rbp, [r14+48h]
.text:00000000000154FF                 movdqa  xmm0, xmmword ptr [rcx]
.text:0000000000015503                 jz      loc_15828
.text:0000000000015509                 cmp     al, 13h
.text:000000000001550B                 movzx   ebx, bl
.text:000000000001550E                 jz      loc_157C0
.text:0000000000015514                 mov     rdx, [rsp+158h+var_138]
.text:0000000000015519                 mov     rdi, [rsp+158h+var_140]
.text:000000000001551E                 mov     rsi, r14
.text:0000000000015521                 call    peek_token
.text:0000000000015526                 cdqe
.text:0000000000015528                 add     [r14+48h], rax
.text:000000000001552C                 cmp     [rsp+158h+var_130], 0
.text:0000000000015532                 jz      loc_158C0
.text:0000000000015538                 mov     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000015540
.text:0000000000015540 loc_15540:                              ; CODE XREF: parse_expression+4E3↓j
.text:0000000000015540                 test    rbx, rbx
.text:0000000000015543                 mov     rbp, [rsp+158h+var_130]
.text:0000000000015548                 mov     qword ptr [rsp+158h+var_128], 0
.text:0000000000015551                 jg      loc_156D0
.text:0000000000015557
.text:0000000000015557 loc_15557:                              ; CODE XREF: parse_expression+471↓j
.text:0000000000015557                 cmp     byte ptr [rbp+30h], 11h
.text:000000000001555B                 jz      loc_158A0
.text:0000000000015561
.text:0000000000015561 loc_15561:                              ; CODE XREF: parse_expression+5A3↓j
.text:0000000000015561                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000015566                 mov     rdx, rbp
.text:0000000000015569                 mov     r8, r15
.text:000000000001556C                 setz    al
.text:000000000001556F                 xor     ecx, ecx
.text:0000000000015571                 add     eax, 0Ah
.text:0000000000015574                 mov     [rsp+158h+var_90], al
.text:000000000001557B                 mov     rax, [rsp+158h+var_148]
.text:0000000000015580                 lea     r12, [rax+70h]
.text:0000000000015584                 lea     r13, [rax+80h]
.text:000000000001558B                 mov     rdi, r12
.text:000000000001558E                 mov     rsi, r13
.text:0000000000015591                 call    create_token_tree_isra_16
.text:0000000000015596                 test    rax, rax
.text:0000000000015599                 mov     rdx, rax
.text:000000000001559C                 jz      loc_15790
.text:00000000000155A2                 add     rbx, 2
.text:00000000000155A6                 cmp     rbx, [rsp+158h+var_158]
.text:00000000000155AA                 jg      short loc_1562B
.text:00000000000155AC                 mov     [rsp+158h+var_110], r14
.text:00000000000155B1                 mov     r14, rax
.text:00000000000155B4
.text:00000000000155B4 loc_155B4:                              ; CODE XREF: parse_expression+311↓j
.text:00000000000155B4                 mov     rsi, [rsp+158h+var_148]
.text:00000000000155B9                 mov     rdi, rbp
.text:00000000000155BC                 call    duplicate_tree
.text:00000000000155C1                 mov     r8, r15
.text:00000000000155C4                 mov     rbp, rax
.text:00000000000155C7                 mov     rcx, rax
.text:00000000000155CA                 mov     rdx, r14
.text:00000000000155CD                 mov     rsi, r13
.text:00000000000155D0                 mov     rdi, r12
.text:00000000000155D3                 mov     [rsp+158h+var_90], 10h
.text:00000000000155DB                 call    create_token_tree_isra_16
.text:00000000000155E0                 test    rbp, rbp
.text:00000000000155E3                 jz      loc_15790
.text:00000000000155E9                 test    rax, rax
.text:00000000000155EC                 jz      loc_15790
.text:00000000000155F2                 xor     ecx, ecx
.text:00000000000155F4                 mov     r8, r15
.text:00000000000155F7                 mov     rdx, rax
.text:00000000000155FA                 mov     rsi, r13
.text:00000000000155FD                 mov     rdi, r12
.text:0000000000015600                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000015608                 call    create_token_tree_isra_16
.text:000000000001560D                 test    rax, rax
.text:0000000000015610                 mov     r14, rax
.text:0000000000015613                 jz      loc_15790
.text:0000000000015619                 add     rbx, 1
.text:000000000001561D                 cmp     rbx, [rsp+158h+var_158]
.text:0000000000015621                 jle     short loc_155B4
.text:0000000000015623                 mov     r14, [rsp+158h+var_110]
.text:0000000000015628                 mov     rdx, rax
.text:000000000001562B
.text:000000000001562B loc_1562B:                              ; CODE XREF: parse_expression+29A↑j
.text:000000000001562B                 mov     rax, qword ptr [rsp+158h+var_128]
.text:0000000000015630                 test    rax, rax
.text:0000000000015633                 jz      loc_158E0
.text:0000000000015639                 mov     rcx, rdx
.text:000000000001563C                 mov     r8, r15
.text:000000000001563F                 mov     rdx, rax
.text:0000000000015642                 mov     rsi, r13
.text:0000000000015645                 mov     rdi, r12
.text:0000000000015648                 mov     [rsp+158h+var_90], 10h
.text:0000000000015650                 call    create_token_tree_isra_16
.text:0000000000015655
.text:0000000000015655 loc_15655:                              ; CODE XREF: parse_expression+581↓j
.text:0000000000015655                 mov     rdi, [rsp+158h+var_118]
.text:000000000001565A                 mov     edx, [rdi]
.text:000000000001565C                 test    edx, edx
.text:000000000001565E                 jz      short loc_15669
.text:0000000000015660                 test    rax, rax
.text:0000000000015663                 jz      loc_159BB
.text:0000000000015669
.text:0000000000015669 loc_15669:                              ; CODE XREF: parse_expression+34E↑j
.text:0000000000015669                 mov     [rsp+158h+var_130], rax
.text:000000000001566E
.text:000000000001566E loc_1566E:                              ; CODE XREF: parse_expression+510↓j
.text:000000000001566E                                         ; parse_expression+5D5↓j
.text:000000000001566E                 test    [rsp+158h+var_138], 1000000h
.text:0000000000015677                 mov     rax, [rsp+158h+var_140]
.text:000000000001567C                 movzx   eax, byte ptr [rax+8]
.text:0000000000015680                 jz      loc_154D8
.text:0000000000015686                 cmp     al, 0Bh
.text:0000000000015688                 jz      short loc_15692
.text:000000000001568A                 cmp     al, 17h
.text:000000000001568C                 jnz     loc_154D8
.text:0000000000015692
.text:0000000000015692 loc_15692:                              ; CODE XREF: parse_expression+378↑j
.text:0000000000015692                 mov     rax, [rsp+158h+var_130]
.text:0000000000015697                 test    rax, rax
.text:000000000001569A                 jz      short loc_156AD
.text:000000000001569C                 lea     rsi, free_tree
.text:00000000000156A3                 xor     edx, edx
.text:00000000000156A5                 mov     rdi, rax
.text:00000000000156A8                 call    postorder
.text:00000000000156AD
.text:00000000000156AD loc_156AD:                              ; CODE XREF: parse_expression+147↑j
.text:00000000000156AD                                         ; parse_expression+154↑j ...
.text:00000000000156AD                 mov     rax, [rsp+158h+var_118]
.text:00000000000156B2                 mov     [rsp+158h+var_130], 0
.text:00000000000156BB                 mov     dword ptr [rax], 0Dh
.text:00000000000156C1                 jmp     loc_15420
.text:00000000000156C1 ; ---------------------------------------------------------------------------
.text:00000000000156C6                 align 10h
.text:00000000000156D0
.text:00000000000156D0 loc_156D0:                              ; CODE XREF: parse_expression+241↑j
.text:00000000000156D0                 cmp     rbx, 1
.text:00000000000156D4                 jz      loc_15F0C
.text:00000000000156DA                 mov     rax, [rsp+158h+var_148]
.text:00000000000156DF                 mov     r13, rbp
.text:00000000000156E2                 mov     [rsp+158h+var_110], r14
.text:00000000000156E7                 lea     r12, [rax+80h]
.text:00000000000156EE                 lea     rdi, [rax+70h]
.text:00000000000156F2                 mov     rax, rbp
.text:00000000000156F5                 mov     r14, rax
.text:00000000000156F8                 mov     ebp, 2
.text:00000000000156FD                 mov     rsi, r12
.text:0000000000015700                 mov     qword ptr [rsp+158h+var_128], rdi
.text:0000000000015705                 mov     r12, r13
.text:0000000000015708                 mov     r13, rbx
.text:000000000001570B                 mov     rbx, rsi
.text:000000000001570E                 xchg    ax, ax
.text:0000000000015710
.text:0000000000015710 loc_15710:                              ; CODE XREF: parse_expression+442↓j
.text:0000000000015710                 mov     rsi, [rsp+158h+var_148]
.text:0000000000015715                 mov     rdi, r12
.text:0000000000015718                 call    duplicate_tree
.text:000000000001571D                 mov     rdi, qword ptr [rsp+158h+var_128]
.text:0000000000015722                 mov     r12, rax
.text:0000000000015725                 mov     rdx, r14
.text:0000000000015728                 mov     r8, r15
.text:000000000001572B                 mov     rcx, rax
.text:000000000001572E                 mov     rsi, rbx
.text:0000000000015731                 mov     [rsp+158h+var_90], 10h
.text:0000000000015739                 call    create_token_tree_isra_16
.text:000000000001573E                 test    r12, r12
.text:0000000000015741                 mov     r14, rax
.text:0000000000015744                 jz      short loc_15790
.text:0000000000015746                 test    rax, rax
.text:0000000000015749                 jz      short loc_15790
.text:000000000001574B                 add     rbp, 1
.text:000000000001574F                 cmp     rbp, r13
.text:0000000000015752                 jle     short loc_15710
.text:0000000000015754                 mov     r14, [rsp+158h+var_110]
.text:0000000000015759                 mov     rbx, r13
.text:000000000001575C                 mov     qword ptr [rsp+158h+var_128], rax
.text:0000000000015761                 mov     r13, r12
.text:0000000000015764
.text:0000000000015764 loc_15764:                              ; CODE XREF: parse_expression+C06↓j
.text:0000000000015764                 cmp     [rsp+158h+var_158], rbx
.text:0000000000015768                 jz      loc_158D4
.text:000000000001576E                 mov     rsi, [rsp+158h+var_148]
.text:0000000000015773                 mov     rdi, r13
.text:0000000000015776                 call    duplicate_tree
.text:000000000001577B                 test    rax, rax
.text:000000000001577E                 mov     rbp, rax
.text:0000000000015781                 jnz     loc_15557
.text:0000000000015787                 nop     word ptr [rax+rax+00000000h]
.text:0000000000015790
.text:0000000000015790 loc_15790:                              ; CODE XREF: parse_expression+28C↑j
.text:0000000000015790                                         ; parse_expression+2D3↑j ...
.text:0000000000015790                 mov     rax, [rsp+158h+var_118]
.text:0000000000015795                 mov     dword ptr [rax], 0Ch
.text:000000000001579B
.text:000000000001579B loc_1579B:                              ; CODE XREF: parse_expression+505↓j
.text:000000000001579B                                         ; parse_expression+6B1↓j
.text:000000000001579B                 mov     rdi, [rsp+158h+var_130]
.text:00000000000157A0                 lea     rsi, free_tree
.text:00000000000157A7                 xor     edx, edx
.text:00000000000157A9                 call    postorder
.text:00000000000157AE                 mov     [rsp+158h+var_130], 0
.text:00000000000157B7                 jmp     loc_15420
.text:00000000000157B7 ; ---------------------------------------------------------------------------
.text:00000000000157BC                 align 20h
.text:00000000000157C0
.text:00000000000157C0 loc_157C0:                              ; CODE XREF: parse_expression+1FE↑j
.text:00000000000157C0                 mov     [rsp+158h+var_158], 1
.text:00000000000157C8
.text:00000000000157C8 loc_157C8:                              ; CODE XREF: parse_expression+65A↓j
.text:00000000000157C8                 mov     rdx, [rsp+158h+var_138]
.text:00000000000157CD                 mov     rdi, [rsp+158h+var_140]
.text:00000000000157D2                 mov     rsi, r14
.text:00000000000157D5                 call    peek_token
.text:00000000000157DA                 cdqe
.text:00000000000157DC                 add     [r14+48h], rax
.text:00000000000157E0                 cmp     [rsp+158h+var_130], 0
.text:00000000000157E6                 jz      loc_158C0
.text:00000000000157EC                 mov     rax, [rsp+158h+var_158]
.text:00000000000157F0                 or      rax, rbx
.text:00000000000157F3                 jnz     loc_15540
.text:00000000000157F9                 mov     rdi, [rsp+158h+var_130]
.text:00000000000157FE                 lea     rsi, free_tree
.text:0000000000015805                 xor     edx, edx
.text:0000000000015807                 call    postorder
.text:000000000001580C                 mov     rax, [rsp+158h+var_118]
.text:0000000000015811                 mov     esi, [rax]
.text:0000000000015813                 test    esi, esi
.text:0000000000015815                 jnz     short loc_1579B
.text:0000000000015817
.text:0000000000015817 loc_15817:                              ; CODE XREF: parse_expression+5B9↓j
.text:0000000000015817                 mov     [rsp+158h+var_130], 0
.text:0000000000015820                 jmp     loc_1566E
.text:0000000000015820 ; ---------------------------------------------------------------------------
.text:0000000000015825                 align 8
.text:0000000000015828
.text:0000000000015828 loc_15828:                              ; CODE XREF: parse_expression+1F3↑j
.text:0000000000015828                 mov     rdx, [rsp+158h+var_138]
.text:000000000001582D                 mov     rsi, rcx
.text:0000000000015830                 mov     rdi, r14
.text:0000000000015833                 movaps  xmmword ptr [rsp+158h+var_158], xmm0
.text:0000000000015837                 call    fetch_number
.text:000000000001583C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015840                 mov     rbx, rax
.text:0000000000015843                 movdqa  xmm0, xmmword ptr [rsp+158h+var_158]
.text:0000000000015848                 jz      loc_158F0
.text:000000000001584E                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000015852                 jz      short loc_1586D
.text:0000000000015854                 mov     rax, [rsp+158h+var_140]
.text:0000000000015859                 movzx   eax, byte ptr [rax+8]
.text:000000000001585D                 cmp     al, 18h
.text:000000000001585F                 jz      loc_15980
.text:0000000000015865                 cmp     al, 1
.text:0000000000015867                 jz      loc_15993
.text:000000000001586D
.text:000000000001586D loc_1586D:                              ; CODE XREF: parse_expression+542↑j
.text:000000000001586D                                         ; parse_expression+624↓j
.text:000000000001586D                 test    [rsp+158h+var_138], 200000h
.text:0000000000015876                 jz      loc_167B3
.text:000000000001587C
.text:000000000001587C loc_1587C:                              ; CODE XREF: parse_expression+69A↓j
.text:000000000001587C                 mov     rax, [rsp+158h+var_140]
.text:0000000000015881                 mov     [r14+48h], rbp
.text:0000000000015885                 movaps  xmmword ptr [rax], xmm0
.text:0000000000015888                 mov     byte ptr [rax+8], 1
.text:000000000001588C                 mov     rax, [rsp+158h+var_130]
.text:0000000000015891                 jmp     loc_15655
.text:0000000000015891 ; ---------------------------------------------------------------------------
.text:0000000000015896                 align 20h
.text:00000000000158A0
.text:00000000000158A0 loc_158A0:                              ; CODE XREF: parse_expression+24B↑j
.text:00000000000158A0                 mov     rdx, [rbp+28h]
.text:00000000000158A4                 lea     rsi, mark_opt_subexp
.text:00000000000158AB                 mov     rdi, rbp
.text:00000000000158AE                 call    postorder
.text:00000000000158B3                 jmp     loc_15561
.text:00000000000158B3 ; ---------------------------------------------------------------------------
.text:00000000000158B8                 align 20h
.text:00000000000158C0
.text:00000000000158C0 loc_158C0:                              ; CODE XREF: parse_expression+222↑j
.text:00000000000158C0                                         ; parse_expression+4D6↑j
.text:00000000000158C0                 mov     rax, [rsp+158h+var_118]
.text:00000000000158C5                 mov     ecx, [rax]
.text:00000000000158C7                 test    ecx, ecx
.text:00000000000158C9                 jz      loc_15817
.text:00000000000158CF                 jmp     def_1536F       ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:00000000000158D4 ; ---------------------------------------------------------------------------
.text:00000000000158D4
.text:00000000000158D4 loc_158D4:                              ; CODE XREF: parse_expression+458↑j
.text:00000000000158D4                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:00000000000158D9                 nop     dword ptr [rax+00000000h]
.text:00000000000158E0
.text:00000000000158E0 loc_158E0:                              ; CODE XREF: parse_expression+323↑j
.text:00000000000158E0                 mov     [rsp+158h+var_130], rdx
.text:00000000000158E5                 jmp     loc_1566E
.text:00000000000158E5 ; ---------------------------------------------------------------------------
.text:00000000000158EA                 align 10h
.text:00000000000158F0
.text:00000000000158F0 loc_158F0:                              ; CODE XREF: parse_expression+538↑j
.text:00000000000158F0                 mov     rax, [rsp+158h+var_140]
.text:00000000000158F5                 cmp     byte ptr [rax+8], 1
.text:00000000000158F9                 jnz     loc_159B0
.text:00000000000158FF                 mov     rax, [rsp+158h+var_140]
.text:0000000000015904                 cmp     byte ptr [rax], 2Ch ; ','
.text:0000000000015907                 jnz     loc_159B0
.text:000000000001590D                 xor     ebx, ebx
.text:000000000001590F
.text:000000000001590F loc_1590F:                              ; CODE XREF: parse_expression+68B↓j
.text:000000000001590F                 mov     rdx, [rsp+158h+var_138]
.text:0000000000015914                 mov     rsi, [rsp+158h+var_140]
.text:0000000000015919                 mov     rdi, r14
.text:000000000001591C                 movaps  [rsp+158h+var_128], xmm0
.text:0000000000015921                 call    fetch_number
.text:0000000000015926                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001592A                 mov     [rsp+158h+var_158], rax
.text:000000000001592E                 movdqa  xmm0, [rsp+158h+var_128]
.text:0000000000015934                 jz      loc_1586D
.text:000000000001593A                 mov     rax, [rsp+158h+var_158]
.text:000000000001593E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015942                 jz      short loc_15949
.text:0000000000015944                 cmp     rax, rbx
.text:0000000000015947                 jl      short loc_159B0
.text:0000000000015949
.text:0000000000015949 loc_15949:                              ; CODE XREF: parse_expression+632↑j
.text:0000000000015949                 mov     rax, [rsp+158h+var_140]
.text:000000000001594E                 cmp     byte ptr [rax+8], 18h
.text:0000000000015952                 jnz     short loc_159B0
.text:0000000000015954                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000015959                 jnz     short loc_15984
.text:000000000001595B                 xor     eax, eax
.text:000000000001595D                 cmp     rbx, 7FFFh
.text:0000000000015964                 setnle  al
.text:0000000000015967
.text:0000000000015967 loc_15967:                              ; CODE XREF: parse_expression+681↓j
.text:0000000000015967                 test    rax, rax
.text:000000000001596A                 jz      loc_157C8
.text:0000000000015970                 mov     rax, [rsp+158h+var_118]
.text:0000000000015975                 mov     dword ptr [rax], 0Fh
.text:000000000001597B                 jmp     short loc_159BB
.text:000000000001597B ; ---------------------------------------------------------------------------
.text:000000000001597D                 align 20h
.text:0000000000015980
.text:0000000000015980 loc_15980:                              ; CODE XREF: parse_expression+54F↑j
.text:0000000000015980                 mov     [rsp+158h+var_158], rbx
.text:0000000000015984
.text:0000000000015984 loc_15984:                              ; CODE XREF: parse_expression+649↑j
.text:0000000000015984                 xor     eax, eax
.text:0000000000015986                 cmp     [rsp+158h+var_158], 7FFFh
.text:000000000001598E                 setnle  al
.text:0000000000015991                 jmp     short loc_15967
.text:0000000000015993 ; ---------------------------------------------------------------------------
.text:0000000000015993
.text:0000000000015993 loc_15993:                              ; CODE XREF: parse_expression+557↑j
.text:0000000000015993                 mov     rax, [rsp+158h+var_140]
.text:0000000000015998                 cmp     byte ptr [rax], 2Ch ; ','
.text:000000000001599B                 jz      loc_1590F
.text:00000000000159A1                 test    [rsp+158h+var_138], 200000h
.text:00000000000159AA                 jnz     loc_1587C
.text:00000000000159B0
.text:00000000000159B0 loc_159B0:                              ; CODE XREF: parse_expression+5E9↑j
.text:00000000000159B0                                         ; parse_expression+5F7↑j ...
.text:00000000000159B0                 mov     rax, [rsp+158h+var_118]
.text:00000000000159B5                 mov     dword ptr [rax], 0Ah
.text:00000000000159BB
.text:00000000000159BB loc_159BB:                              ; CODE XREF: parse_expression+353↑j
.text:00000000000159BB                                         ; parse_expression+66B↑j ...
.text:00000000000159BB                 cmp     [rsp+158h+var_130], 0
.text:00000000000159C1                 jnz     loc_1579B
.text:00000000000159C7                 jmp     def_1536F       ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:00000000000159C7 ; ---------------------------------------------------------------------------
.text:00000000000159CC                 align 10h
.text:00000000000159D0
.text:00000000000159D0 loc_159D0:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000159D0                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:00000000000159D0                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001536F case 12
.text:00000000000159D5                 mov     ebp, [rax]
.text:00000000000159D7                 test    ebp, 30Fh
.text:00000000000159DD                 jz      short loc_15A41
.text:00000000000159DF                 mov     rax, [rsp+158h+var_148]
.text:00000000000159E4                 movzx   eax, byte ptr [rax+0B0h]
.text:00000000000159EB                 test    al, 10h
.text:00000000000159ED                 jnz     short loc_15A41
.text:00000000000159EF                 mov     rdi, [rsp+158h+var_148]
.text:00000000000159F4                 or      eax, 10h
.text:00000000000159F7                 test    al, 8
.text:00000000000159F9                 mov     [rdi+0B0h], al
.text:00000000000159FF                 jnz     loc_16603
.text:0000000000015A05                 mov     rdx, 3FF000000000000h
.text:0000000000015A0F                 test    al, 4
.text:0000000000015A11                 mov     [rdi+0B8h], rdx
.text:0000000000015A18                 mov     rdx, 7FFFFFE87FFFFFEh
.text:0000000000015A22                 mov     [rdi+0C0h], rdx
.text:0000000000015A29                 jz      loc_16588
.text:0000000000015A2F                 pxor    xmm0, xmm0
.text:0000000000015A33                 mov     rax, [rsp+158h+var_140]
.text:0000000000015A38                 movups  xmmword ptr [rdi+0C8h], xmm0
.text:0000000000015A3F                 mov     ebp, [rax]
.text:0000000000015A41
.text:0000000000015A41 loc_15A41:                              ; CODE XREF: parse_expression+6CD↑j
.text:0000000000015A41                                         ; parse_expression+6DD↑j ...
.text:0000000000015A41                 mov     rax, [rsp+158h+var_148]
.text:0000000000015A46                 lea     rbx, [rax+70h]
.text:0000000000015A4A                 lea     r12, [rax+80h]
.text:0000000000015A51                 lea     eax, [rbp-100h]
.text:0000000000015A57                 test    eax, 0FFFFFEFFh
.text:0000000000015A5C                 jnz     loc_160CA
.text:0000000000015A62                 cmp     ebp, 100h
.text:0000000000015A68                 mov     r15, [rsp+158h+var_140]
.text:0000000000015A6D                 jz      loc_160A2
.text:0000000000015A73                 mov     dword ptr [r15], 5
.text:0000000000015A7A                 mov     r8, r15
.text:0000000000015A7D                 xor     ecx, ecx
.text:0000000000015A7F                 xor     edx, edx
.text:0000000000015A81                 mov     rsi, r12
.text:0000000000015A84                 mov     rdi, rbx
.text:0000000000015A87                 call    create_token_tree_isra_16
.text:0000000000015A8C                 mov     dword ptr [r15], 0Ah
.text:0000000000015A93                 mov     rbp, rax
.text:0000000000015A96
.text:0000000000015A96 loc_15A96:                              ; CODE XREF: parse_expression+DB5↓j
.text:0000000000015A96                 mov     r8, [rsp+158h+var_140]
.text:0000000000015A9B                 xor     ecx, ecx
.text:0000000000015A9D                 xor     edx, edx
.text:0000000000015A9F                 mov     rsi, r12
.text:0000000000015AA2                 mov     rdi, rbx
.text:0000000000015AA5                 call    create_token_tree_isra_16
.text:0000000000015AAA                 lea     r8, [rsp+158h+var_98]
.text:0000000000015AB2                 mov     rdx, rbp
.text:0000000000015AB5                 mov     rdi, rbx
.text:0000000000015AB8                 mov     rcx, rax
.text:0000000000015ABB                 mov     rsi, r12
.text:0000000000015ABE                 mov     r13, rax
.text:0000000000015AC1                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000015AC9                 call    create_token_tree_isra_16
.text:0000000000015ACE                 test    rbp, rbp
.text:0000000000015AD1                 mov     rdi, rax
.text:0000000000015AD4                 mov     [rsp+158h+var_130], rax
.text:0000000000015AD9                 setz    dl
.text:0000000000015ADC                 test    r13, r13
.text:0000000000015ADF                 setz    al
.text:0000000000015AE2                 or      dl, al
.text:0000000000015AE4                 jnz     loc_15E78
.text:0000000000015AEA                 test    rdi, rdi
.text:0000000000015AED                 jz      loc_15E78
.text:0000000000015AF3
.text:0000000000015AF3 loc_15AF3:                              ; CODE XREF: parse_expression+DD6↓j
.text:0000000000015AF3                 mov     rdx, [rsp+158h+var_138]
.text:0000000000015AF8                 mov     rdi, [rsp+158h+var_140]
.text:0000000000015AFD                 mov     rsi, r14
.text:0000000000015B00                 call    peek_token
.text:0000000000015B05                 cdqe
.text:0000000000015B07                 add     [r14+48h], rax
.text:0000000000015B0B                 jmp     loc_15420
.text:0000000000015B10 ; ---------------------------------------------------------------------------
.text:0000000000015B10
.text:0000000000015B10 loc_15B10:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015B10                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015B10                 mov     esi, 1          ; jumptable 000000000001536F case 20
.text:0000000000015B15                 mov     edi, 20h ; ' '  ; nmemb
.text:0000000000015B1A                 mov     [rsp+158h+var_C0], 0
.text:0000000000015B26                 call    _calloc
.text:0000000000015B2B                 mov     esi, 1          ; size
.text:0000000000015B30                 mov     r12, rax
.text:0000000000015B33                 mov     edi, 50h ; 'P'  ; nmemb
.text:0000000000015B38                 call    _calloc
.text:0000000000015B3D                 test    r12, r12
.text:0000000000015B40                 mov     r13, rax
.text:0000000000015B43                 setz    dl
.text:0000000000015B46                 test    rax, rax
.text:0000000000015B49                 setz    al
.text:0000000000015B4C                 or      dl, al
.text:0000000000015B4E                 jnz     loc_16329
.text:0000000000015B54                 mov     r10, [rsp+158h+var_140]
.text:0000000000015B59                 mov     rdx, [rsp+158h+var_138]
.text:0000000000015B5E                 mov     rsi, r14
.text:0000000000015B61                 mov     rdi, r10
.text:0000000000015B64                 call    peek_token_bracket
.text:0000000000015B69                 movsxd  rbx, eax
.text:0000000000015B6C                 movzx   eax, byte ptr [r10+8]
.text:0000000000015B71                 cmp     al, 2
.text:0000000000015B73                 jz      loc_16319
.text:0000000000015B79                 cmp     al, 19h
.text:0000000000015B7B                 mov     [rsp+158h+var_101], 0
.text:0000000000015B80                 jz      loc_1604A
.text:0000000000015B86
.text:0000000000015B86 loc_15B86:                              ; CODE XREF: parse_expression+D7F↓j
.text:0000000000015B86                 cmp     al, 15h
.text:0000000000015B88                 jz      loc_16094
.text:0000000000015B8E
.text:0000000000015B8E loc_15B8E:                              ; CODE XREF: parse_expression+D8D↓j
.text:0000000000015B8E                 lea     rax, [rsp+158h+var_88]
.text:0000000000015B96                 mov     r15, [rsp+158h+var_140]
.text:0000000000015B9B                 lea     rbp, jpt_15C76
.text:0000000000015BA2                 mov     [rsp+158h+var_110], 0
.text:0000000000015BAB                 mov     r9d, 1
.text:0000000000015BB1                 mov     qword ptr [rsp+158h+var_128], 0
.text:0000000000015BBA                 mov     [rsp+158h+var_130], rax
.text:0000000000015BBF                 lea     rax, [rsp+158h+var_B8]
.text:0000000000015BC7                 mov     [rsp+158h+var_158], rax
.text:0000000000015BCB                 lea     rax, [rsp+158h+var_C0]
.text:0000000000015BD3                 mov     [rsp+158h+var_100], rax
.text:0000000000015BD8                 lea     rax, [rsp+158h+var_98]
.text:0000000000015BE0                 mov     [rsp+158h+var_F8], rax
.text:0000000000015BE5                 lea     rax, [rsp+158h+var_68]
.text:0000000000015BED                 mov     [rsp+158h+var_F0], rax
.text:0000000000015BF2
.text:0000000000015BF2 loc_15BF2:                              ; CODE XREF: parse_expression+C58↓j
.text:0000000000015BF2                 mov     rax, [rsp+158h+var_130]
.text:0000000000015BF7                 mov     r8, [rsp+158h+var_138]
.text:0000000000015BFC                 and     r9d, 1
.text:0000000000015C00                 mov     rdi, [rsp+158h+var_158]
.text:0000000000015C04                 mov     ecx, ebx
.text:0000000000015C06                 mov     rdx, r15
.text:0000000000015C09                 mov     rsi, r14
.text:0000000000015C0C                 mov     [rsp+158h+var_B8], 3
.text:0000000000015C17                 mov     [rsp+158h+var_B0], rax
.text:0000000000015C1F                 call    parse_bracket_element_constprop_37
.text:0000000000015C24                 test    eax, eax
.text:0000000000015C26                 jnz     loc_1610B
.text:0000000000015C2C                 mov     rdx, [rsp+158h+var_138]
.text:0000000000015C31                 mov     rsi, r14
.text:0000000000015C34                 mov     rdi, r15
.text:0000000000015C37                 call    peek_token_bracket
.text:0000000000015C3C                 movsxd  rbx, eax
.text:0000000000015C3F                 mov     eax, [rsp+158h+var_B8]
.text:0000000000015C46                 lea     edx, [rax-2]
.text:0000000000015C49                 and     edx, 0FFFFFFFDh
.text:0000000000015C4C                 jz      short loc_15C65
.text:0000000000015C4E                 movzx   edx, byte ptr [r15+8]
.text:0000000000015C53                 cmp     dl, 2
.text:0000000000015C56                 jz      loc_160F1
.text:0000000000015C5C                 cmp     dl, 16h
.text:0000000000015C5F                 jz      loc_16117
.text:0000000000015C65
.text:0000000000015C65 loc_15C65:                              ; CODE XREF: parse_expression+93C↑j
.text:0000000000015C65                                         ; parse_expression+105D↓j
.text:0000000000015C65                 cmp     eax, 4          ; switch 5 cases
.text:0000000000015C68                 ja      def_15C76       ; jumptable 0000000000015C76 default case
.text:0000000000015C6E                 movsxd  rax, ss:(jpt_15C76 - 1CBF4h)[rbp+rax*4]
.text:0000000000015C73                 add     rax, rbp
.text:0000000000015C76                 jmp     rax             ; switch jump
.text:0000000000015C78 ; ---------------------------------------------------------------------------
.text:0000000000015C78
.text:0000000000015C78 loc_15C78:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015C78                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015C78                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001536F cases 34,35
.text:0000000000015C7D                 cmp     cl, 23h ; '#'
.text:0000000000015C80                 mov     rsi, [rdi+78h]
.text:0000000000015C84                 setz    r8b
.text:0000000000015C88                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000015C8F                 lea     rdx, aSpace     ; "space"
.text:0000000000015C96                 movzx   r8d, r8b
.text:0000000000015C9A                 mov     r9, rbx
.text:0000000000015C9D
.text:0000000000015C9D loc_15C9D:                              ; CODE XREF: parse_expression+9DD↓j
.text:0000000000015C9D                 mov     rdi, [rsp+158h+var_148]
.text:0000000000015CA2                 call    build_charclass_op
.text:0000000000015CA7                 mov     edi, [rbx]
.text:0000000000015CA9                 mov     [rsp+158h+var_130], rax
.text:0000000000015CAE                 test    edi, edi
.text:0000000000015CB0                 jz      loc_154AC
.text:0000000000015CB6                 test    rax, rax
.text:0000000000015CB9                 jnz     loc_154AC
.text:0000000000015CBF                 jmp     def_1536F       ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000015CBF ; ---------------------------------------------------------------------------
.text:0000000000015CC4                 align 8
.text:0000000000015CC8
.text:0000000000015CC8 loc_15CC8:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015CC8                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015CC8                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001536F cases 32,33
.text:0000000000015CCD                 cmp     cl, 21h ; '!'
.text:0000000000015CD0                 mov     rsi, [rdi+78h]
.text:0000000000015CD4                 setz    r8b
.text:0000000000015CD8                 lea     rcx, s2+2       ; "_"
.text:0000000000015CDF                 lea     rdx, aAlnum     ; "alnum"
.text:0000000000015CE6                 movzx   r8d, r8b
.text:0000000000015CEA                 mov     r9, rbx
.text:0000000000015CED                 jmp     short loc_15C9D
.text:0000000000015CEF ; ---------------------------------------------------------------------------
.text:0000000000015CEF
.text:0000000000015CEF loc_15CEF:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015CEF                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015CEF                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001536F case 4
.text:0000000000015CF4                 mov     rdi, [rsp+158h+var_148]
.text:0000000000015CF9                 mov     rcx, [rax]
.text:0000000000015CFC                 mov     eax, 1
.text:0000000000015D01                 shl     eax, cl
.text:0000000000015D03                 cdqe
.text:0000000000015D05                 test    [rdi+0A8h], rax
.text:0000000000015D0C                 jz      loc_1633E
.text:0000000000015D12                 mov     rbx, [rsp+158h+var_148]
.text:0000000000015D17                 mov     r8, [rsp+158h+var_140]
.text:0000000000015D1C                 xor     ecx, ecx
.text:0000000000015D1E                 xor     edx, edx
.text:0000000000015D20                 or      [rbx+0A0h], rax
.text:0000000000015D27                 lea     rsi, [rbx+80h]
.text:0000000000015D2E                 lea     rdi, [rbx+70h]
.text:0000000000015D32                 call    create_token_tree_isra_16
.text:0000000000015D37                 test    rax, rax
.text:0000000000015D3A                 mov     [rsp+158h+var_130], rax
.text:0000000000015D3F                 jz      loc_15E78
.text:0000000000015D45                 add     qword ptr [rbx+98h], 1
.text:0000000000015D4D                 or      byte ptr [rbx+0B0h], 2
.text:0000000000015D54                 jmp     loc_154AC
.text:0000000000015D59 ; ---------------------------------------------------------------------------
.text:0000000000015D59
.text:0000000000015D59 loc_15D59:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015D59                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015D59                 mov     rbx, [rsp+158h+var_148] ; jumptable 000000000001536F case 5
.text:0000000000015D5E                 mov     r8, [rsp+158h+var_140]
.text:0000000000015D63                 xor     ecx, ecx
.text:0000000000015D65                 xor     edx, edx
.text:0000000000015D67                 lea     rsi, [rbx+80h]
.text:0000000000015D6E                 lea     rdi, [rbx+70h]
.text:0000000000015D72                 call    create_token_tree_isra_16
.text:0000000000015D77                 test    rax, rax
.text:0000000000015D7A                 mov     [rsp+158h+var_130], rax
.text:0000000000015D7F                 jz      loc_15E78
.text:0000000000015D85                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000015D8C                 jle     loc_154AC
.text:0000000000015D92                 or      byte ptr [rbx+0B0h], 2
.text:0000000000015D99                 jmp     loc_154AC
.text:0000000000015D9E ; ---------------------------------------------------------------------------
.text:0000000000015D9E
.text:0000000000015D9E loc_15D9E:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015D9E                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015D9E                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001536F case 1
.text:0000000000015DA3                 mov     r8, [rsp+158h+var_140]
.text:0000000000015DA8                 xor     ecx, ecx
.text:0000000000015DAA                 xor     edx, edx
.text:0000000000015DAC                 lea     rbx, [rax+70h]
.text:0000000000015DB0                 lea     rbp, [rax+80h]
.text:0000000000015DB7                 mov     rdi, rbx
.text:0000000000015DBA                 mov     rsi, rbp
.text:0000000000015DBD                 call    create_token_tree_isra_16
.text:0000000000015DC2                 test    rax, rax
.text:0000000000015DC5                 mov     [rsp+158h+var_130], rax
.text:0000000000015DCA                 jz      loc_15E78
.text:0000000000015DD0                 mov     rax, [rsp+158h+var_148]
.text:0000000000015DD5                 lea     r12, [rsp+158h+var_98]
.text:0000000000015DDD                 mov     r15, [rsp+158h+var_130]
.text:0000000000015DE2                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000015DE9                 jle     loc_154AC
.text:0000000000015DEF
.text:0000000000015DEF loc_15DEF:                              ; CODE XREF: parse_expression+B62↓j
.text:0000000000015DEF                 mov     rax, [r14+48h]
.text:0000000000015DF3                 cmp     [r14+68h], rax
.text:0000000000015DF7                 jle     loc_16101
.text:0000000000015DFD                 cmp     rax, [r14+30h]
.text:0000000000015E01                 jz      loc_16101
.text:0000000000015E07                 mov     rdx, [r14+10h]
.text:0000000000015E0B                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:0000000000015E0F                 jnz     loc_16101
.text:0000000000015E15                 mov     r13, [rsp+158h+var_140]
.text:0000000000015E1A                 mov     rdx, [rsp+158h+var_138]
.text:0000000000015E1F                 mov     rsi, r14
.text:0000000000015E22                 mov     rdi, r13
.text:0000000000015E25                 call    peek_token
.text:0000000000015E2A                 cdqe
.text:0000000000015E2C                 add     [r14+48h], rax
.text:0000000000015E30                 mov     r8, r13
.text:0000000000015E33                 xor     ecx, ecx
.text:0000000000015E35                 xor     edx, edx
.text:0000000000015E37                 mov     rsi, rbp
.text:0000000000015E3A                 mov     rdi, rbx
.text:0000000000015E3D                 call    create_token_tree_isra_16
.text:0000000000015E42                 mov     rdx, r15
.text:0000000000015E45                 mov     r13, rax
.text:0000000000015E48                 mov     r8, r12
.text:0000000000015E4B                 mov     rcx, rax
.text:0000000000015E4E                 mov     rsi, rbp
.text:0000000000015E51                 mov     rdi, rbx
.text:0000000000015E54                 mov     [rsp+158h+var_90], 10h
.text:0000000000015E5C                 call    create_token_tree_isra_16
.text:0000000000015E61                 test    r13, r13
.text:0000000000015E64                 mov     r15, rax
.text:0000000000015E67                 setz    dl
.text:0000000000015E6A                 test    rax, rax
.text:0000000000015E6D                 setz    al
.text:0000000000015E70                 or      dl, al
.text:0000000000015E72                 jz      loc_15DEF
.text:0000000000015E78
.text:0000000000015E78 loc_15E78:                              ; CODE XREF: parse_expression+196↑j
.text:0000000000015E78                                         ; parse_expression+7D4↑j ...
.text:0000000000015E78                 mov     rax, [rsp+158h+var_118]
.text:0000000000015E7D                 mov     dword ptr [rax], 0Ch
.text:0000000000015E83                 jmp     def_1536F       ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000015E88 ; ---------------------------------------------------------------------------
.text:0000000000015E88
.text:0000000000015E88 loc_15E88:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015E88                                         ; parse_expression+165↑j
.text:0000000000015E88                                         ; DATA XREF: ...
.text:0000000000015E88                 test    [rsp+158h+var_138], 20000h ; jumptable 000000000001536F case 9
.text:0000000000015E91                 jnz     loc_1547B       ; jumptable 000000000001536F case 24
.text:0000000000015E97                 mov     rax, [rsp+158h+var_118]
.text:0000000000015E9C                 mov     [rsp+158h+var_130], 0
.text:0000000000015EA5                 mov     dword ptr [rax], 10h
.text:0000000000015EAB                 jmp     loc_15420
.text:0000000000015EB0 ; ---------------------------------------------------------------------------
.text:0000000000015EB0
.text:0000000000015EB0 loc_15EB0:                              ; CODE XREF: parse_expression+A0↑j
.text:0000000000015EB0                                         ; parse_expression+D6↑j
.text:0000000000015EB0                 cmp     rbx, 8
.text:0000000000015EB4                 jbe     short loc_15F1B
.text:0000000000015EB6
.text:0000000000015EB6 loc_15EB6:                              ; CODE XREF: parse_expression+C23↓j
.text:0000000000015EB6                 mov     rdi, [rsp+158h+var_148]
.text:0000000000015EBB                 lea     r8, [rsp+158h+var_98]
.text:0000000000015EC3                 xor     ecx, ecx
.text:0000000000015EC5                 mov     rdx, rax
.text:0000000000015EC8                 mov     [rsp+158h+var_90], 11h
.text:0000000000015ED0                 lea     rsi, [rdi+80h]
.text:0000000000015ED7                 add     rdi, 70h ; 'p'
.text:0000000000015EDB                 call    create_token_tree_isra_16
.text:0000000000015EE0                 test    rax, rax
.text:0000000000015EE3                 mov     [rsp+158h+var_130], rax
.text:0000000000015EE8                 jz      short loc_15E78
.text:0000000000015EEA                 mov     [rax+28h], rbx
.text:0000000000015EEE                 jmp     loc_154AC
.text:0000000000015EF3 ; ---------------------------------------------------------------------------
.text:0000000000015EF3
.text:0000000000015EF3 loc_15EF3:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000015EF3                                         ; DATA XREF: .rodata:jpt_1536F↓o
.text:0000000000015EF3                 mov     rax, [rsp+158h+var_118] ; jumptable 000000000001536F case 36
.text:0000000000015EF8                 mov     [rsp+158h+var_130], 0
.text:0000000000015F01                 mov     dword ptr [rax], 5
.text:0000000000015F07                 jmp     loc_15420
.text:0000000000015F0C ; ---------------------------------------------------------------------------
.text:0000000000015F0C
.text:0000000000015F0C loc_15F0C:                              ; CODE XREF: parse_expression+3C4↑j
.text:0000000000015F0C                 mov     r13, [rsp+158h+var_130]
.text:0000000000015F11                 mov     qword ptr [rsp+158h+var_128], r13
.text:0000000000015F16                 jmp     loc_15764
.text:0000000000015F1B ; ---------------------------------------------------------------------------
.text:0000000000015F1B
.text:0000000000015F1B loc_15F1B:                              ; CODE XREF: parse_expression+BA4↑j
.text:0000000000015F1B                 mov     rsi, [rsp+158h+var_148]
.text:0000000000015F20                 mov     edx, 1
.text:0000000000015F25                 mov     ecx, ebx
.text:0000000000015F27                 shl     edx, cl
.text:0000000000015F29                 movsxd  rdx, edx
.text:0000000000015F2C                 or      [rsi+0A8h], rdx
.text:0000000000015F33                 jmp     short loc_15EB6
.text:0000000000015F35 ; ---------------------------------------------------------------------------
.text:0000000000015F35
.text:0000000000015F35 loc_15F35:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000015F35                                         ; DATA XREF: .rodata:jpt_15C76↓o
.text:0000000000015F35                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000015C76 case 3
.text:0000000000015F3D                 mov     rdi, r12
.text:0000000000015F40                 call    build_equiv_class_isra_27
.text:0000000000015F45                 mov     rdx, [rsp+158h+var_118]
.text:0000000000015F4A                 test    eax, eax
.text:0000000000015F4C                 mov     [rdx], eax
.text:0000000000015F4E                 jnz     short loc_15F88
.text:0000000000015F50
.text:0000000000015F50 loc_15F50:                              ; CODE XREF: parse_expression+C76↓j
.text:0000000000015F50                                         ; parse_expression+CCC↓j ...
.text:0000000000015F50                 movzx   eax, byte ptr [r15+8]
.text:0000000000015F55                 cmp     al, 2
.text:0000000000015F57                 jz      loc_160F1
.text:0000000000015F5D                 cmp     al, 15h
.text:0000000000015F5F                 jz      loc_16372
.text:0000000000015F65                 xor     r9d, r9d
.text:0000000000015F68                 jmp     loc_15BF2
.text:0000000000015F6D ; ---------------------------------------------------------------------------
.text:0000000000015F6D
.text:0000000000015F6D loc_15F6D:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000015F6D                                         ; DATA XREF: .rodata:jpt_15C76↓o
.text:0000000000015F6D                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000015C76 case 2
.text:0000000000015F75                 mov     rdi, r12
.text:0000000000015F78                 call    build_equiv_class_isra_27
.text:0000000000015F7D                 mov     rdx, [rsp+158h+var_118]
.text:0000000000015F82                 test    eax, eax
.text:0000000000015F84                 mov     [rdx], eax
.text:0000000000015F86                 jz      short loc_15F50
.text:0000000000015F88
.text:0000000000015F88 loc_15F88:                              ; CODE XREF: parse_expression+C3E↑j
.text:0000000000015F88                                         ; parse_expression+D35↓j ...
.text:0000000000015F88                 mov     rdi, r12        ; ptr
.text:0000000000015F8B                 call    _free
.text:0000000000015F90                 mov     rdi, r13        ; ptr
.text:0000000000015F93                 call    isl_union_flow_free_0
.text:0000000000015F98                 mov     rax, [rsp+158h+var_118]
.text:0000000000015F9D                 mov     r8d, [rax]
.text:0000000000015FA0                 test    r8d, r8d
.text:0000000000015FA3                 jnz     def_1536F       ; jumptable 000000000001536F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000015FA9                 mov     [rsp+158h+var_130], 0
.text:0000000000015FB2                 jmp     loc_154AC
.text:0000000000015FB7 ; ---------------------------------------------------------------------------
.text:0000000000015FB7
.text:0000000000015FB7 loc_15FB7:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000015FB7                                         ; DATA XREF: .rodata:jpt_15C76↓o
.text:0000000000015FB7                 mov     rdx, [r13+28h]  ; jumptable 0000000000015C76 case 1
.text:0000000000015FBB                 cmp     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000015FC0                 mov     rax, [r13+0]
.text:0000000000015FC4                 jz      loc_164BE
.text:0000000000015FCA
.text:0000000000015FCA loc_15FCA:                              ; CODE XREF: parse_expression+11DE↓j
.text:0000000000015FCA                 lea     rcx, [rdx+1]
.text:0000000000015FCE                 mov     [r13+28h], rcx
.text:0000000000015FD2                 mov     ecx, dword ptr [rsp+158h+var_B0]
.text:0000000000015FD9                 mov     [rax+rdx*4], ecx
.text:0000000000015FDC                 jmp     loc_15F50
.text:0000000000015FE1 ; ---------------------------------------------------------------------------
.text:0000000000015FE1
.text:0000000000015FE1 loc_15FE1:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000015FE1                                         ; DATA XREF: .rodata:jpt_15C76↓o
.text:0000000000015FE1                 movzx   edx, byte ptr [rsp+158h+var_B0] ; jumptable 0000000000015C76 case 0
.text:0000000000015FE9                 mov     esi, 1
.text:0000000000015FEE                 mov     rax, rdx
.text:0000000000015FF1                 and     edx, 3Fh
.text:0000000000015FF4                 shr     rax, 3
.text:0000000000015FF8                 mov     ecx, edx
.text:0000000000015FFA                 and     eax, 18h
.text:0000000000015FFD                 shl     rsi, cl
.text:0000000000016000                 or      [r12+rax], rsi
.text:0000000000016004                 jmp     loc_15F50
.text:0000000000016009 ; ---------------------------------------------------------------------------
.text:0000000000016009
.text:0000000000016009 loc_16009:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000016009                                         ; DATA XREF: .rodata:jpt_15C76↓o
.text:0000000000016009                 sub     rsp, 8          ; jumptable 0000000000015C76 case 4
.text:000000000001600D                 mov     rdi, [r14+78h]
.text:0000000000016011                 lea     rdx, [r13+18h]
.text:0000000000016015                 push    [rsp+160h+var_138]
.text:0000000000016019                 mov     r9, [rsp+168h+var_B0]
.text:0000000000016021                 lea     rcx, [r13+48h]
.text:0000000000016025                 mov     r8, [rsp+168h+var_100]
.text:000000000001602A                 mov     rsi, r12
.text:000000000001602D                 call    build_charclass_isra_29
.text:0000000000016032                 mov     rdx, [rsp+168h+var_118]
.text:0000000000016037                 test    eax, eax
.text:0000000000016039                 mov     [rdx], eax
.text:000000000001603B                 pop     r9
.text:000000000001603D                 pop     r10
.text:000000000001603F                 jz      loc_15F50
.text:0000000000016045                 jmp     loc_15F88
.text:000000000001604A ; ---------------------------------------------------------------------------
.text:000000000001604A
.text:000000000001604A loc_1604A:                              ; CODE XREF: parse_expression+870↑j
.text:000000000001604A                 or      byte ptr [r13+20h], 1
.text:000000000001604F                 test    [rsp+158h+var_138], 100h
.text:0000000000016058                 jz      short loc_16062
.text:000000000001605A                 or      qword ptr [r12], 400h
.text:0000000000016062
.text:0000000000016062 loc_16062:                              ; CODE XREF: parse_expression+D48↑j
.text:0000000000016062                 add     [r14+48h], rbx
.text:0000000000016066                 mov     r11, [rsp+158h+var_140]
.text:000000000001606B                 mov     rsi, r14
.text:000000000001606E                 mov     rdx, [rsp+158h+var_138]
.text:0000000000016073                 mov     rdi, r11
.text:0000000000016076                 call    peek_token_bracket
.text:000000000001607B                 mov     ebx, eax
.text:000000000001607D                 movzx   eax, byte ptr [r11+8]
.text:0000000000016082                 cmp     al, 2
.text:0000000000016084                 jz      loc_16319
.text:000000000001608A                 mov     [rsp+158h+var_101], 1
.text:000000000001608F                 jmp     loc_15B86
.text:0000000000016094 ; ---------------------------------------------------------------------------
.text:0000000000016094
.text:0000000000016094 loc_16094:                              ; CODE XREF: parse_expression+878↑j
.text:0000000000016094                 mov     rax, [rsp+158h+var_140]
.text:0000000000016099                 mov     byte ptr [rax+8], 1
.text:000000000001609D                 jmp     loc_15B8E
.text:00000000000160A2 ; ---------------------------------------------------------------------------
.text:00000000000160A2
.text:00000000000160A2 loc_160A2:                              ; CODE XREF: parse_expression+75D↑j
.text:00000000000160A2                 mov     dword ptr [r15], 6
.text:00000000000160A9                 mov     r8, r15
.text:00000000000160AC                 xor     ecx, ecx
.text:00000000000160AE                 xor     edx, edx
.text:00000000000160B0                 mov     rsi, r12
.text:00000000000160B3                 mov     rdi, rbx
.text:00000000000160B6                 call    create_token_tree_isra_16
.text:00000000000160BB                 mov     dword ptr [r15], 9
.text:00000000000160C2                 mov     rbp, rax
.text:00000000000160C5                 jmp     loc_15A96
.text:00000000000160CA ; ---------------------------------------------------------------------------
.text:00000000000160CA
.text:00000000000160CA loc_160CA:                              ; CODE XREF: parse_expression+74C↑j
.text:00000000000160CA                 mov     r8, [rsp+158h+var_140]
.text:00000000000160CF                 xor     ecx, ecx
.text:00000000000160D1                 xor     edx, edx
.text:00000000000160D3                 mov     rsi, r12
.text:00000000000160D6                 mov     rdi, rbx
.text:00000000000160D9                 call    create_token_tree_isra_16
.text:00000000000160DE                 test    rax, rax
.text:00000000000160E1                 mov     [rsp+158h+var_130], rax
.text:00000000000160E6                 jnz     loc_15AF3
.text:00000000000160EC                 jmp     loc_15E78
.text:00000000000160F1 ; ---------------------------------------------------------------------------
.text:00000000000160F1
.text:00000000000160F1 loc_160F1:                              ; CODE XREF: parse_expression+946↑j
.text:00000000000160F1                                         ; parse_expression+C47↑j ...
.text:00000000000160F1                 mov     rax, [rsp+158h+var_118]
.text:00000000000160F6                 mov     dword ptr [rax], 7
.text:00000000000160FC                 jmp     loc_15F88
.text:0000000000016101 ; ---------------------------------------------------------------------------
.text:0000000000016101
.text:0000000000016101 loc_16101:                              ; CODE XREF: parse_expression+AE7↑j
.text:0000000000016101                                         ; parse_expression+AF1↑j ...
.text:0000000000016101                 mov     [rsp+158h+var_130], r15
.text:0000000000016106                 jmp     loc_154AC
.text:000000000001610B ; ---------------------------------------------------------------------------
.text:000000000001610B
.text:000000000001610B loc_1610B:                              ; CODE XREF: parse_expression+916↑j
.text:000000000001610B                                         ; parse_expression+E6E↓j
.text:000000000001610B                 mov     rdx, [rsp+158h+var_118]
.text:0000000000016110                 mov     [rdx], eax
.text:0000000000016112                 jmp     loc_15F88
.text:0000000000016117 ; ---------------------------------------------------------------------------
.text:0000000000016117
.text:0000000000016117 loc_16117:                              ; CODE XREF: parse_expression+94F↑j
.text:0000000000016117                 movsxd  rax, ebx
.text:000000000001611A                 mov     r11, [rsp+158h+var_138]
.text:000000000001611F                 add     [r14+48h], rax
.text:0000000000016123                 mov     r10, [rsp+158h+var_F8]
.text:0000000000016128                 mov     rdx, r11
.text:000000000001612B                 mov     rdi, r10
.text:000000000001612E                 call    peek_token_bracket
.text:0000000000016133                 movzx   edx, [rsp+158h+var_90]
.text:000000000001613B                 cmp     dl, 2
.text:000000000001613E                 jz      short loc_160F1
.text:0000000000016140                 cmp     dl, 15h
.text:0000000000016143                 jz      loc_16357
.text:0000000000016149                 mov     rdx, [rsp+158h+var_F0]
.text:000000000001614E                 lea     rdi, [rsp+158h+var_A8]
.text:0000000000016156                 mov     r9d, 1
.text:000000000001615C                 mov     r8, r11
.text:000000000001615F                 mov     ecx, eax
.text:0000000000016161                 mov     dword ptr [rsp+158h+var_A8], 3
.text:000000000001616C                 mov     [rsp+158h+var_A0], rdx
.text:0000000000016174                 mov     rdx, r10
.text:0000000000016177                 call    parse_bracket_element_constprop_37
.text:000000000001617C                 test    eax, eax
.text:000000000001617E                 jnz     short loc_1610B
.text:0000000000016180                 mov     rdx, [rsp+158h+var_138]
.text:0000000000016185                 mov     rsi, r14
.text:0000000000016188                 mov     rdi, r15
.text:000000000001618B                 call    peek_token_bracket
.text:0000000000016190                 movsxd  rbx, eax
.text:0000000000016193                 mov     rax, [rsp+158h+var_148]
.text:0000000000016198                 mov     esi, [rsp+158h+var_B8]
.text:000000000001619F                 mov     r9d, 0
.text:00000000000161A5                 cmp     dword ptr [rax+0B4h], 1
.text:00000000000161AC                 lea     eax, [rsi-2]
.text:00000000000161AF                 cmovg   r9, r13
.text:00000000000161B3                 and     eax, 0FFFFFFFDh
.text:00000000000161B6                 jz      loc_16629
.text:00000000000161BC                 mov     r10d, dword ptr [rsp+158h+var_A8]
.text:00000000000161C4                 lea     eax, [r10-2]
.text:00000000000161C8                 and     eax, 0FFFFFFFDh
.text:00000000000161CB                 jz      loc_16629
.text:00000000000161D1                 cmp     esi, 3
.text:00000000000161D4                 setz    r11b
.text:00000000000161D8                 jz      loc_1666D
.text:00000000000161DE
.text:00000000000161DE loc_161DE:                              ; CODE XREF: parse_expression+137B↓j
.text:00000000000161DE                 cmp     r10d, 3
.text:00000000000161E2                 jz      loc_16639
.text:00000000000161E8
.text:00000000000161E8 loc_161E8:                              ; CODE XREF: parse_expression+1347↓j
.text:00000000000161E8                 test    esi, esi
.text:00000000000161EA                 jnz     loc_16559
.text:00000000000161F0                 movzx   edx, byte ptr [rsp+158h+var_B0]
.text:00000000000161F8
.text:00000000000161F8 loc_161F8:                              ; CODE XREF: parse_expression+124E↓j
.text:00000000000161F8                                         ; parse_expression+125F↓j
.text:00000000000161F8                 test    r10d, r10d
.text:00000000000161FB                 jnz     loc_1653D
.text:0000000000016201                 movzx   r8d, byte ptr [rsp+158h+var_A0]
.text:000000000001620A
.text:000000000001620A loc_1620A:                              ; CODE XREF: parse_expression+14CE↓j
.text:000000000001620A                 test    esi, esi
.text:000000000001620C                 jz      loc_164F6
.text:0000000000016212                 test    r11b, r11b
.text:0000000000016215                 jnz     loc_164F6
.text:000000000001621B                 test    r9, r9
.text:000000000001621E                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:0000000000016225                 jz      short loc_16244
.text:0000000000016227
.text:0000000000016227 loc_16227:                              ; CODE XREF: parse_expression+1212↓j
.text:0000000000016227                                         ; parse_expression+121A↓j
.text:0000000000016227                 mov     edi, r8d        ; c
.text:000000000001622A                 mov     dword ptr [rsp+158h+ptr], edx
.text:000000000001622E                 mov     [rsp+158h+var_E8], r9
.text:0000000000016233                 call    _btowc
.text:0000000000016238                 mov     r9, [rsp+158h+var_E8]
.text:000000000001623D                 mov     edx, dword ptr [rsp+158h+ptr]
.text:0000000000016241                 mov     r8d, eax
.text:0000000000016244
.text:0000000000016244 loc_16244:                              ; CODE XREF: parse_expression+F15↑j
.text:0000000000016244                                         ; parse_expression+1228↓j
.text:0000000000016244                 cmp     edx, 0FFFFFFFFh
.text:0000000000016247                 jz      loc_1665D
.text:000000000001624D                 cmp     r8d, 0FFFFFFFFh
.text:0000000000016251                 jz      loc_1665D
.text:0000000000016257
.text:0000000000016257 loc_16257:                              ; CODE XREF: parse_expression+1267↓j
.text:0000000000016257                                         ; parse_expression+1273↓j
.text:0000000000016257                 test    [rsp+158h+var_138], 10000h
.text:0000000000016260                 jz      short loc_1626B
.text:0000000000016262                 cmp     r8d, edx
.text:0000000000016265                 jb      loc_16629
.text:000000000001626B
.text:000000000001626B loc_1626B:                              ; CODE XREF: parse_expression+F50↑j
.text:000000000001626B                 test    r9, r9
.text:000000000001626E                 jz      short loc_16296
.text:0000000000016270                 mov     rax, [r9+40h]
.text:0000000000016274                 cmp     rax, [rsp+158h+var_110]
.text:0000000000016279                 mov     rcx, [r9+8]
.text:000000000001627D                 jz      loc_16693
.text:0000000000016283
.text:0000000000016283 loc_16283:                              ; CODE XREF: parse_expression+1410↓j
.text:0000000000016283                 mov     [rcx+rax*4], edx
.text:0000000000016286                 mov     rcx, [r9+10h]
.text:000000000001628A                 lea     rsi, [rax+1]
.text:000000000001628E                 mov     [r9+40h], rsi
.text:0000000000016292                 mov     [rcx+rax*4], r8d
.text:0000000000016296
.text:0000000000016296 loc_16296:                              ; CODE XREF: parse_expression+F5E↑j
.text:0000000000016296                 xor     eax, eax
.text:0000000000016298                 mov     edi, 1
.text:000000000001629D
.text:000000000001629D loc_1629D:                              ; CODE XREF: parse_expression+FB3↓j
.text:000000000001629D                 cmp     edx, eax
.text:000000000001629F                 mov     ecx, eax
.text:00000000000162A1                 ja      short loc_162B9
.text:00000000000162A3                 cmp     r8d, eax
.text:00000000000162A6                 jb      short loc_162B9
.text:00000000000162A8                 mov     rsi, rax
.text:00000000000162AB                 mov     r11, rdi
.text:00000000000162AE                 sar     rsi, 6
.text:00000000000162B2                 shl     r11, cl
.text:00000000000162B5                 or      [r12+rsi*8], r11
.text:00000000000162B9
.text:00000000000162B9 loc_162B9:                              ; CODE XREF: parse_expression+F91↑j
.text:00000000000162B9                                         ; parse_expression+F96↑j
.text:00000000000162B9                 add     rax, 1
.text:00000000000162BD                 cmp     rax, 100h
.text:00000000000162C3                 jnz     short loc_1629D
.text:00000000000162C5                 mov     rax, [rsp+158h+var_118]
.text:00000000000162CA                 mov     dword ptr [rax], 0
.text:00000000000162D0                 jmp     loc_15F50
.text:00000000000162D5 ; ---------------------------------------------------------------------------
.text:00000000000162D5
.text:00000000000162D5 loc_162D5:                              ; CODE XREF: parse_expression+15C↑j
.text:00000000000162D5                 mov     rbx, [rsp+158h+var_140]
.text:00000000000162DA                 mov     rdx, rax
.text:00000000000162DD                 mov     rsi, r14
.text:00000000000162E0                 mov     [rsp+158h+var_158], r8
.text:00000000000162E4                 mov     r15, rax
.text:00000000000162E7                 mov     rdi, rbx
.text:00000000000162EA                 call    peek_token
.text:00000000000162EF                 cdqe
.text:00000000000162F1                 add     [r14+48h], rax
.text:00000000000162F5                 mov     r9, [rsp+158h+var_118]
.text:00000000000162FA                 mov     r8, [rsp+158h+var_158]
.text:00000000000162FE                 mov     rcx, r15
.text:0000000000016301                 mov     rdx, rbx
.text:0000000000016304                 mov     rsi, rbp
.text:0000000000016307                 mov     rdi, r14
.text:000000000001630A                 call    parse_expression
.text:000000000001630F                 mov     [rsp+158h+var_130], rax
.text:0000000000016314                 jmp     loc_15420
.text:0000000000016319 ; ---------------------------------------------------------------------------
.text:0000000000016319
.text:0000000000016319 loc_16319:                              ; CODE XREF: parse_expression+863↑j
.text:0000000000016319                                         ; parse_expression+D74↑j
.text:0000000000016319                 mov     rax, [rsp+158h+var_118]
.text:000000000001631E                 mov     dword ptr [rax], 2
.text:0000000000016324                 jmp     loc_15F88
.text:0000000000016329 ; ---------------------------------------------------------------------------
.text:0000000000016329
.text:0000000000016329 loc_16329:                              ; CODE XREF: parse_expression+83E↑j
.text:0000000000016329                 mov     rdi, r12        ; ptr
.text:000000000001632C                 call    _free
.text:0000000000016331                 mov     rdi, r13        ; ptr
.text:0000000000016334                 call    _free
.text:0000000000016339                 jmp     loc_15E78
.text:000000000001633E ; ---------------------------------------------------------------------------
.text:000000000001633E
.text:000000000001633E loc_1633E:                              ; CODE XREF: parse_expression+9FC↑j
.text:000000000001633E                 mov     rax, [rsp+158h+var_118]
.text:0000000000016343                 mov     [rsp+158h+var_130], 0
.text:000000000001634C                 mov     dword ptr [rax], 6
.text:0000000000016352                 jmp     loc_15420
.text:0000000000016357 ; ---------------------------------------------------------------------------
.text:0000000000016357
.text:0000000000016357 loc_16357:                              ; CODE XREF: parse_expression+E33↑j
.text:0000000000016357                 mov     eax, ebx
.text:0000000000016359                 neg     eax
.text:000000000001635B                 cdqe
.text:000000000001635D                 add     [r14+48h], rax
.text:0000000000016361                 mov     byte ptr [r15+8], 1
.text:0000000000016366                 mov     eax, [rsp+158h+var_B8]
.text:000000000001636D                 jmp     loc_15C65
.text:0000000000016372 ; ---------------------------------------------------------------------------
.text:0000000000016372
.text:0000000000016372 loc_16372:                              ; CODE XREF: parse_expression+C4F↑j
.text:0000000000016372                 add     [r14+48h], rbx
.text:0000000000016376                 cmp     [rsp+158h+var_101], 0
.text:000000000001637B                 jz      short loc_16391
.text:000000000001637D                 lea     rdx, [r12+20h]
.text:0000000000016382                 mov     rax, r12
.text:0000000000016385
.text:0000000000016385 loc_16385:                              ; CODE XREF: parse_expression+107F↓j
.text:0000000000016385                 not     qword ptr [rax]
.text:0000000000016388                 add     rax, 8
.text:000000000001638C                 cmp     rdx, rax
.text:000000000001638F                 jnz     short loc_16385
.text:0000000000016391
.text:0000000000016391 loc_16391:                              ; CODE XREF: parse_expression+106B↑j
.text:0000000000016391                 mov     rax, [rsp+158h+var_148]
.text:0000000000016396                 mov     edx, [rax+0B4h]
.text:000000000001639C                 cmp     edx, 1
.text:000000000001639F                 jle     short loc_163B9
.text:00000000000163A1                 mov     rcx, [rax+78h]
.text:00000000000163A5                 xor     eax, eax
.text:00000000000163A7
.text:00000000000163A7 loc_163A7:                              ; CODE XREF: parse_expression+10A7↓j
.text:00000000000163A7                 mov     rsi, [rcx+rax]
.text:00000000000163AB                 and     [r12+rax], rsi
.text:00000000000163AF                 add     rax, 8
.text:00000000000163B3                 cmp     rax, 20h ; ' '
.text:00000000000163B7                 jnz     short loc_163A7
.text:00000000000163B9
.text:00000000000163B9 loc_163B9:                              ; CODE XREF: parse_expression+108F↑j
.text:00000000000163B9                 cmp     qword ptr [r13+28h], 0
.text:00000000000163BE                 jnz     loc_16448
.text:00000000000163C4                 cmp     qword ptr [r13+30h], 0
.text:00000000000163C9                 jnz     short loc_16448
.text:00000000000163CB                 cmp     qword ptr [r13+38h], 0
.text:00000000000163D0                 jnz     short loc_16448
.text:00000000000163D2                 cmp     qword ptr [r13+40h], 0
.text:00000000000163D7                 jnz     short loc_16448
.text:00000000000163D9                 sub     edx, 1
.text:00000000000163DC                 jle     short loc_163EC
.text:00000000000163DE                 cmp     qword ptr [r13+48h], 0
.text:00000000000163E3                 jnz     short loc_16448
.text:00000000000163E5                 test    byte ptr [r13+20h], 1
.text:00000000000163EA                 jnz     short loc_16448
.text:00000000000163EC
.text:00000000000163EC loc_163EC:                              ; CODE XREF: parse_expression+10CC↑j
.text:00000000000163EC                 mov     rdi, r13        ; ptr
.text:00000000000163EF                 call    isl_union_flow_free_0
.text:00000000000163F4                 mov     rax, [rsp+158h+var_148]
.text:00000000000163F9                 lea     r8, [rsp+158h+var_A8]
.text:0000000000016401                 xor     ecx, ecx
.text:0000000000016403                 xor     edx, edx
.text:0000000000016405                 mov     byte ptr [rsp+158h+var_A0], 3
.text:000000000001640D                 mov     [rsp+158h+var_A8], r12
.text:0000000000016415                 lea     rsi, [rax+80h]
.text:000000000001641C                 lea     rdi, [rax+70h]
.text:0000000000016420                 call    create_token_tree_isra_16
.text:0000000000016425                 test    rax, rax
.text:0000000000016428                 mov     [rsp+158h+var_130], rax
.text:000000000001642D                 jnz     loc_154AC
.text:0000000000016433
.text:0000000000016433 loc_16433:                              ; CODE XREF: parse_expression+118C↓j
.text:0000000000016433                                         ; parse_expression+11D0↓j ...
.text:0000000000016433                 mov     rax, [rsp+158h+var_118]
.text:0000000000016438                 mov     dword ptr [rax], 0Ch
.text:000000000001643E                 jmp     loc_15F88
.text:000000000001643E ; ---------------------------------------------------------------------------
.text:0000000000016443                 align 8
.text:0000000000016448
.text:0000000000016448 loc_16448:                              ; CODE XREF: parse_expression+10AE↑j
.text:0000000000016448                                         ; parse_expression+10B9↑j ...
.text:0000000000016448                 mov     rax, [rsp+158h+var_148]
.text:000000000001644D                 lea     r15, [rsp+158h+var_A8]
.text:0000000000016455                 xor     edx, edx
.text:0000000000016457                 xor     ecx, ecx
.text:0000000000016459                 mov     r8, r15
.text:000000000001645C                 or      byte ptr [rax+0B0h], 2
.text:0000000000016463                 lea     rbx, [rax+70h]
.text:0000000000016467                 lea     rbp, [rax+80h]
.text:000000000001646E                 mov     byte ptr [rsp+158h+var_A0], 6
.text:0000000000016476                 mov     [rsp+158h+var_A8], r13
.text:000000000001647E                 mov     rdi, rbx
.text:0000000000016481                 mov     rsi, rbp
.text:0000000000016484                 call    create_token_tree_isra_16
.text:0000000000016489                 mov     rdi, rax
.text:000000000001648C                 mov     [rsp+158h+var_130], rax
.text:0000000000016491                 lea     rdx, [r12+20h]
.text:0000000000016496                 test    rdi, rdi
.text:0000000000016499                 mov     rax, r12
.text:000000000001649C                 jz      short loc_16433
.text:000000000001649E
.text:000000000001649E loc_1649E:                              ; CODE XREF: parse_expression+119F↓j
.text:000000000001649E                 cmp     qword ptr [rax], 0
.text:00000000000164A2                 jnz     loc_1674D
.text:00000000000164A8                 add     rax, 8
.text:00000000000164AC                 cmp     rdx, rax
.text:00000000000164AF                 jnz     short loc_1649E
.text:00000000000164B1                 mov     rdi, r12        ; ptr
.text:00000000000164B4                 call    _free
.text:00000000000164B9                 jmp     loc_154AC
.text:00000000000164BE ; ---------------------------------------------------------------------------
.text:00000000000164BE
.text:00000000000164BE loc_164BE:                              ; CODE XREF: parse_expression+CB4↑j
.text:00000000000164BE                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:00000000000164C3                 lea     rdi, [rdx+rdx+1]
.text:00000000000164C8                 lea     rsi, ds:0[rdi*4] ; size
.text:00000000000164D0                 mov     qword ptr [rsp+158h+var_128], rdi
.text:00000000000164D5                 mov     rdi, rax        ; ptr
.text:00000000000164D8                 call    _realloc
.text:00000000000164DD                 test    rax, rax
.text:00000000000164E0                 jz      loc_16433
.text:00000000000164E6                 mov     [r13+0], rax
.text:00000000000164EA                 mov     rdx, [r13+28h]
.text:00000000000164EE                 jmp     loc_15FCA
.text:00000000000164F3 ; ---------------------------------------------------------------------------
.text:00000000000164F3
.text:00000000000164F3 loc_164F3:                              ; CODE XREF: parse_expression+1239↓j
.text:00000000000164F3                                         ; parse_expression+123E↓j
.text:00000000000164F3                 xor     r8d, r8d
.text:00000000000164F6
.text:00000000000164F6 loc_164F6:                              ; CODE XREF: parse_expression+EFC↑j
.text:00000000000164F6                                         ; parse_expression+F05↑j
.text:00000000000164F6                 test    r9, r9
.text:00000000000164F9                 jz      short loc_16574
.text:00000000000164FB                 mov     edi, edx        ; c
.text:00000000000164FD                 mov     dword ptr [rsp+158h+ptr], r8d
.text:0000000000016502                 mov     [rsp+158h+var_E8], r9
.text:0000000000016507                 call    _btowc
.text:000000000001650C                 mov     edx, eax
.text:000000000001650E                 mov     eax, dword ptr [rsp+158h+var_A8]
.text:0000000000016515                 mov     r9, [rsp+158h+var_E8]
.text:000000000001651A                 mov     r8d, dword ptr [rsp+158h+ptr]
.text:000000000001651F                 cmp     eax, 3
.text:0000000000016522                 jz      loc_16227
.text:0000000000016528                 test    eax, eax
.text:000000000001652A                 jz      loc_16227
.text:0000000000016530
.text:0000000000016530 loc_16530:                              ; CODE XREF: parse_expression+1247↓j
.text:0000000000016530                                         ; parse_expression+1271↓j
.text:0000000000016530                 mov     r8d, dword ptr [rsp+158h+var_A0]
.text:0000000000016538                 jmp     loc_16244
.text:000000000001653D ; ---------------------------------------------------------------------------
.text:000000000001653D
.text:000000000001653D loc_1653D:                              ; CODE XREF: parse_expression+EEB↑j
.text:000000000001653D                 cmp     r10d, 3
.text:0000000000016541                 jz      loc_167D2
.text:0000000000016547                 test    esi, esi
.text:0000000000016549                 jz      short loc_164F3
.text:000000000001654B                 test    r11b, r11b
.text:000000000001654E                 jnz     short loc_164F3
.text:0000000000016550                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:0000000000016557                 jmp     short loc_16530
.text:0000000000016559 ; ---------------------------------------------------------------------------
.text:0000000000016559
.text:0000000000016559 loc_16559:                              ; CODE XREF: parse_expression+EDA↑j
.text:0000000000016559                 xor     edx, edx
.text:000000000001655B                 cmp     esi, 3
.text:000000000001655E                 jnz     loc_161F8
.text:0000000000016564                 mov     rax, [rsp+158h+var_B0]
.text:000000000001656C                 movzx   edx, byte ptr [rax]
.text:000000000001656F                 jmp     loc_161F8
.text:0000000000016574 ; ---------------------------------------------------------------------------
.text:0000000000016574
.text:0000000000016574 loc_16574:                              ; CODE XREF: parse_expression+11E9↑j
.text:0000000000016574                 test    r10d, r10d
.text:0000000000016577                 jz      loc_16257
.text:000000000001657D                 cmp     r10d, 3
.text:0000000000016581                 jnz     short loc_16530
.text:0000000000016583                 jmp     loc_16257
.text:0000000000016588 ; ---------------------------------------------------------------------------
.text:0000000000016588
.text:0000000000016588 loc_16588:                              ; CODE XREF: parse_expression+719↑j
.text:0000000000016588                 mov     ebx, 80h
.text:000000000001658D                 mov     r12d, 2
.text:0000000000016593
.text:0000000000016593 loc_16593:                              ; CODE XREF: parse_expression+12F8↓j
.text:0000000000016593                 call    ___ctype_b_loc
.text:0000000000016598                 movsxd  rdx, ebx
.text:000000000001659B                 movsxd  r9, r12d
.text:000000000001659E                 mov     r8d, 1
.text:00000000000165A4                 add     rdx, rdx
.text:00000000000165A7                 add     rdx, [rax]
.text:00000000000165AA                 mov     rax, [rsp+158h+var_148]
.text:00000000000165AF                 lea     rdi, [rax+r9*8]
.text:00000000000165B3
.text:00000000000165B3 loc_165B3:                              ; CODE XREF: parse_expression+12EC↓j
.text:00000000000165B3                 xor     eax, eax
.text:00000000000165B5                 jmp     short loc_165D2
.text:00000000000165B5 ; ---------------------------------------------------------------------------
.text:00000000000165B7                 align 20h
.text:00000000000165C0
.text:00000000000165C0 loc_165C0:                              ; CODE XREF: parse_expression+12C8↓j
.text:00000000000165C0                 lea     esi, [rbx+rax]
.text:00000000000165C3                 cmp     esi, 5Fh ; '_'
.text:00000000000165C6                 jz      short loc_165DA
.text:00000000000165C8
.text:00000000000165C8 loc_165C8:                              ; CODE XREF: parse_expression+12D7↓j
.text:00000000000165C8                 add     rax, 1
.text:00000000000165CC                 cmp     rax, 40h ; '@'
.text:00000000000165D0                 jz      short loc_165E9
.text:00000000000165D2
.text:00000000000165D2 loc_165D2:                              ; CODE XREF: parse_expression+12A5↑j
.text:00000000000165D2                 test    byte ptr [rdx+rax*2], 8
.text:00000000000165D6                 mov     ecx, eax
.text:00000000000165D8                 jz      short loc_165C0
.text:00000000000165DA
.text:00000000000165DA loc_165DA:                              ; CODE XREF: parse_expression+12B6↑j
.text:00000000000165DA                 mov     rsi, r8
.text:00000000000165DD                 shl     rsi, cl
.text:00000000000165E0                 or      [rdi+0B8h], rsi
.text:00000000000165E7                 jmp     short loc_165C8
.text:00000000000165E9 ; ---------------------------------------------------------------------------
.text:00000000000165E9
.text:00000000000165E9 loc_165E9:                              ; CODE XREF: parse_expression+12C0↑j
.text:00000000000165E9                 add     r9, 1
.text:00000000000165ED                 add     ebx, 40h ; '@'
.text:00000000000165F0                 sub     rdx, 0FFFFFFFFFFFFFF80h
.text:00000000000165F4                 add     rdi, 8
.text:00000000000165F8                 cmp     r9d, 3
.text:00000000000165FC                 jle     short loc_165B3
.text:00000000000165FE                 jmp     loc_15A41
.text:0000000000016603 ; ---------------------------------------------------------------------------
.text:0000000000016603
.text:0000000000016603 loc_16603:                              ; CODE XREF: parse_expression+6EF↑j
.text:0000000000016603                 xor     ebx, ebx
.text:0000000000016605                 xor     r12d, r12d
.text:0000000000016608                 jmp     short loc_16593
.text:000000000001660A ; ---------------------------------------------------------------------------
.text:000000000001660A
.text:000000000001660A def_15C76:                              ; CODE XREF: parse_expression+958↑j
.text:000000000001660A                 lea     rcx, __PRETTY_FUNCTION___7327 ; jumptable 0000000000015C76 default case
.text:0000000000016611                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000016618                 lea     rdi, assertion+10h ; assertion
.text:000000000001661F                 mov     edx, 0CEDh      ; line
.text:0000000000016624                 call    ___assert_fail
.text:0000000000016629 ; ---------------------------------------------------------------------------
.text:0000000000016629
.text:0000000000016629 loc_16629:                              ; CODE XREF: parse_expression+EA6↑j
.text:0000000000016629                                         ; parse_expression+EBB↑j ...
.text:0000000000016629                 mov     rax, [rsp+158h+var_118]
.text:000000000001662E                 mov     dword ptr [rax], 0Bh
.text:0000000000016634                 jmp     loc_15F88
.text:0000000000016639 ; ---------------------------------------------------------------------------
.text:0000000000016639
.text:0000000000016639 loc_16639:                              ; CODE XREF: parse_expression+ED2↑j
.text:0000000000016639                 mov     rdi, [rsp+158h+var_A0]
.text:0000000000016641                 xor     eax, eax
.text:0000000000016643                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000016647                 repne scasb
.text:0000000000016649                 mov     rax, rcx
.text:000000000001664C                 not     rax
.text:000000000001664F                 sub     rax, 1
.text:0000000000016653                 cmp     rax, 1
.text:0000000000016657                 jbe     loc_161E8
.text:000000000001665D
.text:000000000001665D loc_1665D:                              ; CODE XREF: parse_expression+F37↑j
.text:000000000001665D                                         ; parse_expression+F41↑j ...
.text:000000000001665D                 mov     rax, [rsp+158h+var_118]
.text:0000000000016662                 mov     dword ptr [rax], 3
.text:0000000000016668                 jmp     loc_15F88
.text:000000000001666D ; ---------------------------------------------------------------------------
.text:000000000001666D
.text:000000000001666D loc_1666D:                              ; CODE XREF: parse_expression+EC8↑j
.text:000000000001666D                 mov     rdi, [rsp+158h+var_B0]
.text:0000000000016675                 xor     eax, eax
.text:0000000000016677                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000001667B                 repne scasb
.text:000000000001667D                 mov     rax, rcx
.text:0000000000016680                 not     rax
.text:0000000000016683                 sub     rax, 1
.text:0000000000016687                 cmp     rax, 1
.text:000000000001668B                 jbe     loc_161DE
.text:0000000000016691                 jmp     short loc_1665D
.text:0000000000016693 ; ---------------------------------------------------------------------------
.text:0000000000016693
.text:0000000000016693 loc_16693:                              ; CODE XREF: parse_expression+F6D↑j
.text:0000000000016693                 mov     rax, [rsp+158h+var_110]
.text:0000000000016698                 mov     rdi, rcx        ; ptr
.text:000000000001669B                 mov     [rsp+158h+var_CC], r8d
.text:00000000000166A3                 mov     [rsp+158h+var_D0], edx
.text:00000000000166AA                 mov     [rsp+158h+var_E8], r9
.text:00000000000166AF                 add     rax, rax
.text:00000000000166B2                 add     rax, 1
.text:00000000000166B6                 lea     r10, ds:0[rax*4]
.text:00000000000166BE                 mov     [rsp+158h+var_110], rax
.text:00000000000166C3                 mov     rsi, r10        ; size
.text:00000000000166C6                 mov     [rsp+158h+size], r10
.text:00000000000166CE                 call    _realloc
.text:00000000000166D3                 mov     r9, [rsp+158h+var_E8]
.text:00000000000166D8                 mov     r10, [rsp+158h+size]
.text:00000000000166E0                 mov     [rsp+158h+ptr], rax
.text:00000000000166E5                 mov     rdi, [r9+10h]   ; ptr
.text:00000000000166E9                 mov     rsi, r10        ; size
.text:00000000000166EC                 call    _realloc
.text:00000000000166F1                 mov     rcx, [rsp+158h+ptr]
.text:00000000000166F6                 test    rcx, rcx
.text:00000000000166F9                 jz      short loc_16725
.text:00000000000166FB                 test    rax, rax
.text:00000000000166FE                 mov     r9, [rsp+158h+var_E8]
.text:0000000000016703                 mov     edx, [rsp+158h+var_D0]
.text:000000000001670A                 mov     r8d, [rsp+158h+var_CC]
.text:0000000000016712                 jz      short loc_16725
.text:0000000000016714                 mov     [r9+10h], rax
.text:0000000000016718                 mov     [r9+8], rcx
.text:000000000001671C                 mov     rax, [r9+40h]
.text:0000000000016720                 jmp     loc_16283
.text:0000000000016725 ; ---------------------------------------------------------------------------
.text:0000000000016725
.text:0000000000016725 loc_16725:                              ; CODE XREF: parse_expression+13E9↑j
.text:0000000000016725                                         ; parse_expression+1402↑j
.text:0000000000016725                 mov     rdi, rcx        ; ptr
.text:0000000000016728                 mov     [rsp+158h+var_158], rax
.text:000000000001672C                 call    _free
.text:0000000000016731                 mov     rax, [rsp+158h+var_158]
.text:0000000000016735                 mov     rdi, rax        ; ptr
.text:0000000000016738                 call    _free
.text:000000000001673D                 mov     rax, [rsp+158h+var_118]
.text:0000000000016742                 mov     dword ptr [rax], 0Ch
.text:0000000000016748                 jmp     loc_15F88
.text:000000000001674D ; ---------------------------------------------------------------------------
.text:000000000001674D
.text:000000000001674D loc_1674D:                              ; CODE XREF: parse_expression+1192↑j
.text:000000000001674D                 xor     ecx, ecx
.text:000000000001674F                 xor     edx, edx
.text:0000000000016751                 mov     r8, r15
.text:0000000000016754                 mov     rsi, rbp
.text:0000000000016757                 mov     rdi, rbx
.text:000000000001675A                 mov     byte ptr [rsp+158h+var_A0], 3
.text:0000000000016762                 mov     [rsp+158h+var_A8], r12
.text:000000000001676A                 call    create_token_tree_isra_16
.text:000000000001676F                 test    rax, rax
.text:0000000000016772                 jz      loc_16433
.text:0000000000016778                 mov     rcx, [rsp+158h+var_130]
.text:000000000001677D                 lea     r8, [rsp+158h+var_98]
.text:0000000000016785                 mov     rdx, rax
.text:0000000000016788                 mov     rsi, rbp
.text:000000000001678B                 mov     rdi, rbx
.text:000000000001678E                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000016796                 call    create_token_tree_isra_16
.text:000000000001679B                 test    rax, rax
.text:000000000001679E                 mov     [rsp+158h+var_130], rax
.text:00000000000167A3                 jnz     loc_154AC
.text:00000000000167A9                 jmp     loc_16433
.text:00000000000167AE ; ---------------------------------------------------------------------------
.text:00000000000167AE
.text:00000000000167AE loc_167AE:                              ; CODE XREF: parse_expression+126↑j
.text:00000000000167AE                 call    ___stack_chk_fail
.text:00000000000167B3 ; ---------------------------------------------------------------------------
.text:00000000000167B3
.text:00000000000167B3 loc_167B3:                              ; CODE XREF: parse_expression+566↑j
.text:00000000000167B3                 mov     rax, [rsp+158h+var_140]
.text:00000000000167B8                 cmp     byte ptr [rax+8], 2
.text:00000000000167BC                 jnz     loc_159B0
.text:00000000000167C2                 mov     rax, [rsp+158h+var_118]
.text:00000000000167C7                 mov     dword ptr [rax], 9
.text:00000000000167CD                 jmp     loc_159BB
.text:00000000000167D2 ; ---------------------------------------------------------------------------
.text:00000000000167D2
.text:00000000000167D2 loc_167D2:                              ; CODE XREF: parse_expression+1231↑j
.text:00000000000167D2                 mov     rax, [rsp+158h+var_A0]
.text:00000000000167DA                 movzx   r8d, byte ptr [rax]
.text:00000000000167DE                 jmp     loc_1620A
.text:00000000000167DE ; } // starts at 15310
.text:00000000000167DE parse_expression endp
.text:00000000000167DE
.text:00000000000167DE ; ---------------------------------------------------------------------------
.text:00000000000167E3                 align 10h
.text:00000000000167F0
.text:00000000000167F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000167F0
.text:00000000000167F0
.text:00000000000167F0 parse_branch    proc near               ; CODE XREF: parse_reg_exp+43↓p
.text:00000000000167F0                                         ; parse_reg_exp+AE↓p
.text:00000000000167F0
.text:00000000000167F0 var_78          = qword ptr -78h
.text:00000000000167F0 var_70          = qword ptr -70h
.text:00000000000167F0 var_68          = qword ptr -68h
.text:00000000000167F0 var_60          = qword ptr -60h
.text:00000000000167F0 var_58          = byte ptr -58h
.text:00000000000167F0 var_50          = byte ptr -50h
.text:00000000000167F0 var_40          = qword ptr -40h
.text:00000000000167F0
.text:00000000000167F0 ; __unwind {
.text:00000000000167F0                 push    r15
.text:00000000000167F2                 push    r14
.text:00000000000167F4                 mov     r15, rcx
.text:00000000000167F7                 push    r13
.text:00000000000167F9                 push    r12
.text:00000000000167FB                 mov     r13, rsi
.text:00000000000167FE                 push    rbp
.text:00000000000167FF                 push    rbx
.text:0000000000016800                 mov     rbx, r9
.text:0000000000016803                 mov     rbp, rdx
.text:0000000000016806                 mov     r12, r8
.text:0000000000016809                 sub     rsp, 48h
.text:000000000001680D                 mov     rax, fs:28h
.text:0000000000016816                 mov     [rsp+78h+var_40], rax
.text:000000000001681B                 xor     eax, eax
.text:000000000001681D                 mov     rax, [rsi]
.text:0000000000016820                 mov     [rsp+78h+var_78], rdi
.text:0000000000016824                 mov     [rsp+78h+var_68], rax
.text:0000000000016829                 call    parse_expression
.text:000000000001682E                 mov     edx, [rbx]
.text:0000000000016830                 mov     r14, rax
.text:0000000000016833                 test    edx, edx
.text:0000000000016835                 jz      short loc_16840
.text:0000000000016837                 test    rax, rax
.text:000000000001683A                 jz      loc_1693A
.text:0000000000016840
.text:0000000000016840 loc_16840:                              ; CODE XREF: parse_branch+45↑j
.text:0000000000016840                 lea     rax, [rsp+78h+var_58]
.text:0000000000016845                 mov     [rsp+78h+var_60], rax
.text:000000000001684A                 nop     word ptr [rax+rax+00h]
.text:0000000000016850
.text:0000000000016850 loc_16850:                              ; CODE XREF: parse_branch+12F↓j
.text:0000000000016850                 movzx   eax, byte ptr [rbp+8]
.text:0000000000016854                 mov     edx, eax
.text:0000000000016856                 and     edx, 0FFFFFFF7h
.text:0000000000016859                 cmp     dl, 2
.text:000000000001685C                 jz      loc_168F0
.text:0000000000016862
.text:0000000000016862 loc_16862:                              ; CODE XREF: parse_branch+F6↓j
.text:0000000000016862                 cmp     al, 9
.text:0000000000016864                 jnz     short loc_1686F
.text:0000000000016866                 test    r12, r12
.text:0000000000016869                 jnz     loc_168F0
.text:000000000001686F
.text:000000000001686F loc_1686F:                              ; CODE XREF: parse_branch+74↑j
.text:000000000001686F                 mov     rdi, [rsp+78h+var_78]
.text:0000000000016873                 mov     r9, rbx
.text:0000000000016876                 mov     r8, r12
.text:0000000000016879                 mov     rcx, r15
.text:000000000001687C                 mov     rdx, rbp
.text:000000000001687F                 mov     rsi, r13
.text:0000000000016882                 call    parse_expression
.text:0000000000016887                 mov     r9, rax
.text:000000000001688A                 mov     eax, [rbx]
.text:000000000001688C                 test    eax, eax
.text:000000000001688E                 jz      short loc_16899
.text:0000000000016890                 test    r9, r9
.text:0000000000016893                 jz      loc_16924
.text:0000000000016899
.text:0000000000016899 loc_16899:                              ; CODE XREF: parse_branch+9E↑j
.text:0000000000016899                 test    r14, r14
.text:000000000001689C                 jz      short loc_16918
.text:000000000001689E                 test    r9, r9
.text:00000000000168A1                 jz      short loc_16918
.text:00000000000168A3                 mov     rax, [rsp+78h+var_68]
.text:00000000000168A8                 mov     r8, [rsp+78h+var_60]
.text:00000000000168AD                 mov     rcx, r9
.text:00000000000168B0                 mov     rdx, r14
.text:00000000000168B3                 mov     [rsp+78h+var_70], r9
.text:00000000000168B8                 mov     [rsp+78h+var_50], 10h
.text:00000000000168BD                 lea     rsi, [rax+80h]
.text:00000000000168C4                 lea     rdi, [rax+70h]
.text:00000000000168C8                 call    create_token_tree_isra_16
.text:00000000000168CD                 test    rax, rax
.text:00000000000168D0                 mov     r9, [rsp+78h+var_70]
.text:00000000000168D5                 jz      short loc_16940
.text:00000000000168D7                 mov     r14, rax
.text:00000000000168DA                 movzx   eax, byte ptr [rbp+8]
.text:00000000000168DE                 mov     edx, eax
.text:00000000000168E0                 and     edx, 0FFFFFFF7h
.text:00000000000168E3                 cmp     dl, 2
.text:00000000000168E6                 jnz     loc_16862
.text:00000000000168EC                 nop     dword ptr [rax+00h]
.text:00000000000168F0
.text:00000000000168F0 loc_168F0:                              ; CODE XREF: parse_branch+6C↑j
.text:00000000000168F0                                         ; parse_branch+79↑j ...
.text:00000000000168F0                 mov     rcx, [rsp+78h+var_40]
.text:00000000000168F5                 xor     rcx, fs:28h
.text:00000000000168FE                 mov     rax, r14
.text:0000000000016901                 jnz     short loc_1696D
.text:0000000000016903                 add     rsp, 48h
.text:0000000000016907                 pop     rbx
.text:0000000000016908                 pop     rbp
.text:0000000000016909                 pop     r12
.text:000000000001690B                 pop     r13
.text:000000000001690D                 pop     r14
.text:000000000001690F                 pop     r15
.text:0000000000016911                 retn
.text:0000000000016911 ; ---------------------------------------------------------------------------
.text:0000000000016912                 align 8
.text:0000000000016918
.text:0000000000016918 loc_16918:                              ; CODE XREF: parse_branch+AC↑j
.text:0000000000016918                                         ; parse_branch+B1↑j
.text:0000000000016918                 test    r14, r14
.text:000000000001691B                 cmovz   r14, r9
.text:000000000001691F                 jmp     loc_16850
.text:0000000000016924 ; ---------------------------------------------------------------------------
.text:0000000000016924
.text:0000000000016924 loc_16924:                              ; CODE XREF: parse_branch+A3↑j
.text:0000000000016924                 test    r14, r14
.text:0000000000016927                 jz      short loc_1693A
.text:0000000000016929                 lea     rsi, free_tree
.text:0000000000016930                 xor     edx, edx
.text:0000000000016932                 mov     rdi, r14
.text:0000000000016935                 call    postorder
.text:000000000001693A
.text:000000000001693A loc_1693A:                              ; CODE XREF: parse_branch+4A↑j
.text:000000000001693A                                         ; parse_branch+137↑j
.text:000000000001693A                 xor     r14d, r14d
.text:000000000001693D                 jmp     short loc_168F0
.text:000000000001693D ; ---------------------------------------------------------------------------
.text:000000000001693F                 align 20h
.text:0000000000016940
.text:0000000000016940 loc_16940:                              ; CODE XREF: parse_branch+E5↑j
.text:0000000000016940                 lea     rsi, free_tree
.text:0000000000016947                 mov     rdi, r9
.text:000000000001694A                 xor     edx, edx
.text:000000000001694C                 call    postorder
.text:0000000000016951                 lea     rsi, free_tree
.text:0000000000016958                 mov     rdi, r14
.text:000000000001695B                 xor     edx, edx
.text:000000000001695D                 xor     r14d, r14d
.text:0000000000016960                 call    postorder
.text:0000000000016965                 mov     dword ptr [rbx], 0Ch
.text:000000000001696B                 jmp     short loc_168F0
.text:000000000001696D ; ---------------------------------------------------------------------------
.text:000000000001696D
.text:000000000001696D loc_1696D:                              ; CODE XREF: parse_branch+111↑j
.text:000000000001696D                 call    ___stack_chk_fail
.text:000000000001696D ; } // starts at 167F0
.text:000000000001696D parse_branch    endp
.text:000000000001696D
.text:000000000001696D ; ---------------------------------------------------------------------------
.text:0000000000016972                 align 20h
.text:0000000000016980
.text:0000000000016980 ; =============== S U B R O U T I N E =======================================
.text:0000000000016980
.text:0000000000016980
.text:0000000000016980 parse_reg_exp   proc near               ; CODE XREF: parse_expression+BF↑p
.text:0000000000016980                                         ; re_compile_internal+4B3↓p
.text:0000000000016980
.text:0000000000016980 var_80          = qword ptr -80h
.text:0000000000016980 var_78          = qword ptr -78h
.text:0000000000016980 var_70          = qword ptr -70h
.text:0000000000016980 var_68          = qword ptr -68h
.text:0000000000016980 var_60          = qword ptr -60h
.text:0000000000016980 var_58          = byte ptr -58h
.text:0000000000016980 var_50          = byte ptr -50h
.text:0000000000016980 var_40          = qword ptr -40h
.text:0000000000016980
.text:0000000000016980 ; __unwind {
.text:0000000000016980                 push    r15
.text:0000000000016982                 push    r14
.text:0000000000016984                 mov     r14, rcx
.text:0000000000016987                 push    r13
.text:0000000000016989                 push    r12
.text:000000000001698B                 mov     r13, r9
.text:000000000001698E                 push    rbp
.text:000000000001698F                 push    rbx
.text:0000000000016990                 mov     rbp, rdx
.text:0000000000016993                 mov     r12, rdi
.text:0000000000016996                 sub     rsp, 58h
.text:000000000001699A                 mov     rbx, [rsi]
.text:000000000001699D                 mov     rax, fs:28h
.text:00000000000169A6                 mov     [rsp+88h+var_40], rax
.text:00000000000169AB                 xor     eax, eax
.text:00000000000169AD                 mov     [rsp+88h+var_60], rsi
.text:00000000000169B2                 mov     [rsp+88h+var_78], r8
.text:00000000000169B7                 mov     rax, [rbx+0A8h]
.text:00000000000169BE                 mov     [rsp+88h+var_68], rax
.text:00000000000169C3                 call    parse_branch
.text:00000000000169C8                 mov     edx, [r13+0]
.text:00000000000169CC                 mov     r15, rax
.text:00000000000169CF                 test    edx, edx
.text:00000000000169D1                 jz      short loc_169DC
.text:00000000000169D3                 test    rax, rax
.text:00000000000169D6                 jz      loc_16AC2
.text:00000000000169DC
.text:00000000000169DC loc_169DC:                              ; CODE XREF: parse_reg_exp+51↑j
.text:00000000000169DC                 lea     rax, [rsp+88h+var_58]
.text:00000000000169E1                 mov     [rsp+88h+var_80], rax
.text:00000000000169E6                 jmp     loc_16A74
.text:00000000000169E6 ; ---------------------------------------------------------------------------
.text:00000000000169EB                 align 10h
.text:00000000000169F0
.text:00000000000169F0 loc_169F0:                              ; CODE XREF: parse_reg_exp+122↓j
.text:00000000000169F0                 cmp     al, 9
.text:00000000000169F2                 jnz     short loc_16A00
.text:00000000000169F4                 cmp     [rsp+88h+var_78], 0
.text:00000000000169FA                 jnz     loc_16AA8
.text:0000000000016A00
.text:0000000000016A00 loc_16A00:                              ; CODE XREF: parse_reg_exp+72↑j
.text:0000000000016A00                 mov     rax, [rbx+0A8h]
.text:0000000000016A07                 mov     r8, [rsp+88h+var_78]
.text:0000000000016A0C                 mov     rcx, r14
.text:0000000000016A0F                 mov     rsi, [rsp+88h+var_60]
.text:0000000000016A14                 mov     r9, r13
.text:0000000000016A17                 mov     rdx, rbp
.text:0000000000016A1A                 mov     rdi, r12
.text:0000000000016A1D                 mov     [rsp+88h+var_70], rax
.text:0000000000016A22                 mov     rax, [rsp+88h+var_68]
.text:0000000000016A27                 mov     [rbx+0A8h], rax
.text:0000000000016A2E                 call    parse_branch
.text:0000000000016A33                 mov     rcx, rax
.text:0000000000016A36                 mov     eax, [r13+0]
.text:0000000000016A3A                 test    eax, eax
.text:0000000000016A3C                 jz      short loc_16A43
.text:0000000000016A3E                 test    rcx, rcx
.text:0000000000016A41                 jz      short loc_16AAC
.text:0000000000016A43
.text:0000000000016A43 loc_16A43:                              ; CODE XREF: parse_reg_exp+BC↑j
.text:0000000000016A43                 mov     rax, [rsp+88h+var_70]
.text:0000000000016A48                 or      [rbx+0A8h], rax
.text:0000000000016A4F
.text:0000000000016A4F loc_16A4F:                              ; CODE XREF: parse_reg_exp+12A↓j
.text:0000000000016A4F                 mov     r8, [rsp+88h+var_80]
.text:0000000000016A54                 lea     rsi, [rbx+80h]
.text:0000000000016A5B                 lea     rdi, [rbx+70h]
.text:0000000000016A5F                 mov     rdx, r15
.text:0000000000016A62                 mov     [rsp+88h+var_50], 0Ah
.text:0000000000016A67                 call    create_token_tree_isra_16
.text:0000000000016A6C                 test    rax, rax
.text:0000000000016A6F                 mov     r15, rax
.text:0000000000016A72                 jz      short loc_16AF0
.text:0000000000016A74
.text:0000000000016A74 loc_16A74:                              ; CODE XREF: parse_reg_exp+66↑j
.text:0000000000016A74                 cmp     byte ptr [rbp+8], 0Ah
.text:0000000000016A78                 jnz     short loc_16AC8
.text:0000000000016A7A                 mov     rdx, r14
.text:0000000000016A7D                 mov     rsi, r12
.text:0000000000016A80                 mov     rdi, rbp
.text:0000000000016A83                 or      rdx, 800000h
.text:0000000000016A8A                 call    peek_token
.text:0000000000016A8F                 cdqe
.text:0000000000016A91                 add     [r12+48h], rax
.text:0000000000016A96                 movzx   eax, byte ptr [rbp+8]
.text:0000000000016A9A                 mov     edx, eax
.text:0000000000016A9C                 and     edx, 0FFFFFFF7h
.text:0000000000016A9F                 cmp     dl, 2
.text:0000000000016AA2                 jnz     loc_169F0
.text:0000000000016AA8
.text:0000000000016AA8 loc_16AA8:                              ; CODE XREF: parse_reg_exp+7A↑j
.text:0000000000016AA8                 xor     ecx, ecx
.text:0000000000016AAA                 jmp     short loc_16A4F
.text:0000000000016AAC ; ---------------------------------------------------------------------------
.text:0000000000016AAC
.text:0000000000016AAC loc_16AAC:                              ; CODE XREF: parse_reg_exp+C1↑j
.text:0000000000016AAC                 test    r15, r15
.text:0000000000016AAF                 jz      short loc_16AC2
.text:0000000000016AB1                 lea     rsi, free_tree
.text:0000000000016AB8                 xor     edx, edx
.text:0000000000016ABA                 mov     rdi, r15
.text:0000000000016ABD                 call    postorder
.text:0000000000016AC2
.text:0000000000016AC2 loc_16AC2:                              ; CODE XREF: parse_reg_exp+56↑j
.text:0000000000016AC2                                         ; parse_reg_exp+12F↑j
.text:0000000000016AC2                 xor     r15d, r15d
.text:0000000000016AC5                 nop     dword ptr [rax]
.text:0000000000016AC8
.text:0000000000016AC8 loc_16AC8:                              ; CODE XREF: parse_reg_exp+F8↑j
.text:0000000000016AC8                                         ; parse_reg_exp+178↓j
.text:0000000000016AC8                 mov     rcx, [rsp+88h+var_40]
.text:0000000000016ACD                 xor     rcx, fs:28h
.text:0000000000016AD6                 mov     rax, r15
.text:0000000000016AD9                 jnz     short loc_16AFA
.text:0000000000016ADB                 add     rsp, 58h
.text:0000000000016ADF                 pop     rbx
.text:0000000000016AE0                 pop     rbp
.text:0000000000016AE1                 pop     r12
.text:0000000000016AE3                 pop     r13
.text:0000000000016AE5                 pop     r14
.text:0000000000016AE7                 pop     r15
.text:0000000000016AE9                 retn
.text:0000000000016AE9 ; ---------------------------------------------------------------------------
.text:0000000000016AEA                 align 10h
.text:0000000000016AF0
.text:0000000000016AF0 loc_16AF0:                              ; CODE XREF: parse_reg_exp+F2↑j
.text:0000000000016AF0                 mov     dword ptr [r13+0], 0Ch
.text:0000000000016AF8                 jmp     short loc_16AC8
.text:0000000000016AFA ; ---------------------------------------------------------------------------
.text:0000000000016AFA
.text:0000000000016AFA loc_16AFA:                              ; CODE XREF: parse_reg_exp+159↑j
.text:0000000000016AFA                 call    ___stack_chk_fail
.text:0000000000016AFA ; } // starts at 16980
.text:0000000000016AFA parse_reg_exp   endp
.text:0000000000016AFA
.text:0000000000016AFA ; ---------------------------------------------------------------------------
.text:0000000000016AFF                 align 20h
.text:0000000000016B00
.text:0000000000016B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000016B00
.text:0000000000016B00
.text:0000000000016B00 re_compile_internal proc near           ; CODE XREF: rpl_re_compile_pattern+35↓p
.text:0000000000016B00                                         ; rpl_regcomp+A4↓p
.text:0000000000016B00
.text:0000000000016B00 size            = qword ptr -158h
.text:0000000000016B00 var_150         = qword ptr -150h
.text:0000000000016B00 var_148         = qword ptr -148h
.text:0000000000016B00 var_140         = qword ptr -140h
.text:0000000000016B00 var_138         = qword ptr -138h
.text:0000000000016B00 var_130         = qword ptr -130h
.text:0000000000016B00 var_128         = qword ptr -128h
.text:0000000000016B00 var_120         = qword ptr -120h
.text:0000000000016B00 var_10C         = dword ptr -10Ch
.text:0000000000016B00 var_108         = dword ptr -108h
.text:0000000000016B00 var_F8          = byte ptr -0F8h
.text:0000000000016B00 var_F0          = qword ptr -0F0h
.text:0000000000016B00 ptr             = qword ptr -0E8h
.text:0000000000016B00 var_D8          = qword ptr -0D8h
.text:0000000000016B00 var_D0          = qword ptr -0D0h
.text:0000000000016B00 var_B0          = qword ptr -0B0h
.text:0000000000016B00 var_A8          = qword ptr -0A8h
.text:0000000000016B00 var_A0          = qword ptr -0A0h
.text:0000000000016B00 var_98          = qword ptr -98h
.text:0000000000016B00 var_90          = qword ptr -90h
.text:0000000000016B00 var_88          = qword ptr -88h
.text:0000000000016B00 var_80          = qword ptr -80h
.text:0000000000016B00 var_78          = qword ptr -78h
.text:0000000000016B00 var_70          = qword ptr -70h
.text:0000000000016B00 var_60          = qword ptr -60h
.text:0000000000016B00 var_50          = byte ptr -50h
.text:0000000000016B00 var_4F          = byte ptr -4Fh
.text:0000000000016B00 var_4E          = byte ptr -4Eh
.text:0000000000016B00 var_4D          = byte ptr -4Dh
.text:0000000000016B00 var_48          = dword ptr -48h
.text:0000000000016B00 var_40          = qword ptr -40h
.text:0000000000016B00
.text:0000000000016B00 ; __unwind {
.text:0000000000016B00                 push    r15
.text:0000000000016B02                 push    r14
.text:0000000000016B04                 push    r13
.text:0000000000016B06                 push    r12
.text:0000000000016B08                 push    rbp
.text:0000000000016B09                 push    rbx
.text:0000000000016B0A                 sub     rsp, 128h
.text:0000000000016B11                 mov     [rdi+18h], rcx
.text:0000000000016B15                 mov     qword ptr [rdi+10h], 0
.text:0000000000016B1D                 mov     rax, fs:28h
.text:0000000000016B26                 mov     [rsp+158h+var_40], rax
.text:0000000000016B2E                 xor     eax, eax
.text:0000000000016B30                 movzx   eax, byte ptr [rdi+38h]
.text:0000000000016B34                 mov     [rsp+158h+var_150], rdi
.text:0000000000016B39                 mov     [rsp+158h+var_148], rsi
.text:0000000000016B3E                 mov     [rsp+158h+size], rdx
.text:0000000000016B42                 mov     [rsp+158h+var_140], rcx
.text:0000000000016B47                 mov     [rsp+158h+var_10C], 0
.text:0000000000016B4F                 mov     qword ptr [rdi+30h], 0
.text:0000000000016B57                 mov     rbx, [rdi]
.text:0000000000016B5A                 mov     byte ptr [rsp+158h+var_138], al
.text:0000000000016B5E                 and     eax, 0FFFFFF90h
.text:0000000000016B61                 cmp     qword ptr [rdi+8], 0E7h
.text:0000000000016B69                 mov     [rdi+38h], al
.text:0000000000016B6C                 jbe     loc_17966
.text:0000000000016B72
.text:0000000000016B72 loc_16B72:                              ; CODE XREF: re_compile_internal+E8F↓j
.text:0000000000016B72                 lea     rdi, [rbx+8]
.text:0000000000016B76                 mov     rax, [rsp+158h+var_150]
.text:0000000000016B7B                 mov     rcx, rbx
.text:0000000000016B7E                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000016B82                 sub     rcx, rdi
.text:0000000000016B85                 mov     qword ptr [rax+10h], 0E8h
.text:0000000000016B8D                 xor     eax, eax
.text:0000000000016B8F                 add     ecx, 0E8h
.text:0000000000016B95                 mov     qword ptr [rbx], 0
.text:0000000000016B9C                 mov     qword ptr [rbx+0E0h], 0
.text:0000000000016BA7                 shr     ecx, 3
.text:0000000000016BAA                 rep stosq
.text:0000000000016BAD                 mov     rax, 555555555555554h
.text:0000000000016BB7                 mov     dword ptr [rbx+80h], 0Fh
.text:0000000000016BC1                 cmp     [rsp+158h+size], rax
.text:0000000000016BC5                 ja      loc_17206
.text:0000000000016BCB                 mov     r14, [rsp+158h+size]
.text:0000000000016BCF                 lea     rax, [r14+1]
.text:0000000000016BD3                 mov     rdi, rax
.text:0000000000016BD6                 mov     [rbx+8], rax
.text:0000000000016BDA                 mov     [rsp+158h+var_130], rax
.text:0000000000016BDF                 shl     rdi, 4          ; size
.text:0000000000016BE3                 call    _malloc
.text:0000000000016BE8                 test    r14, r14
.text:0000000000016BEB                 mov     [rbx], rax
.text:0000000000016BEE                 jz      loc_178D5
.text:0000000000016BF4                 mov     esi, 1
.text:0000000000016BF9                 nop     dword ptr [rax+00000000h]
.text:0000000000016C00
.text:0000000000016C00 loc_16C00:                              ; CODE XREF: re_compile_internal+107↓j
.text:0000000000016C00                 add     rsi, rsi        ; size
.text:0000000000016C03                 cmp     [rsp+158h+size], rsi
.text:0000000000016C07                 jnb     short loc_16C00
.text:0000000000016C09                 lea     rbp, [rsi-1]
.text:0000000000016C0D
.text:0000000000016C0D loc_16C0D:                              ; CODE XREF: re_compile_internal+DDC↓j
.text:0000000000016C0D                 mov     edi, 18h        ; nmemb
.text:0000000000016C12                 call    _calloc
.text:0000000000016C17                 mov     [rbx+88h], rbp
.text:0000000000016C1E                 mov     [rbx+40h], rax
.text:0000000000016C22                 call    ___ctype_get_mb_cur_max
.text:0000000000016C27                 mov     edi, 0Eh        ; item
.text:0000000000016C2C                 mov     [rbx+0B4h], eax
.text:0000000000016C32                 call    _nl_langinfo
.text:0000000000016C37                 movzx   edx, byte ptr [rax]
.text:0000000000016C3A                 and     edx, 0FFFFFFDFh
.text:0000000000016C3D                 cmp     dl, 55h ; 'U'
.text:0000000000016C40                 jnz     short loc_16C90
.text:0000000000016C42                 movzx   edx, byte ptr [rax+1]
.text:0000000000016C46                 and     edx, 0FFFFFFDFh
.text:0000000000016C49                 cmp     dl, 54h ; 'T'
.text:0000000000016C4C                 jnz     short loc_16C90
.text:0000000000016C4E                 movzx   edx, byte ptr [rax+2]
.text:0000000000016C52                 and     edx, 0FFFFFFDFh
.text:0000000000016C55                 cmp     dl, 46h ; 'F'
.text:0000000000016C58                 jnz     short loc_16C90
.text:0000000000016C5A                 xor     edx, edx
.text:0000000000016C5C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000016C60                 lea     rdi, aUtf8+4    ; "8"
.text:0000000000016C67                 mov     ecx, 2
.text:0000000000016C6C                 setz    dl
.text:0000000000016C6F                 lea     rsi, [rax+rdx+3]
.text:0000000000016C74                 repe cmpsb
.text:0000000000016C76                 setnbe  al
.text:0000000000016C79                 sbb     al, 0
.text:0000000000016C7B                 test    al, al
.text:0000000000016C7D                 jnz     short loc_16C90
.text:0000000000016C7F                 or      byte ptr [rbx+0B0h], 4
.text:0000000000016C86                 db      2Eh
.text:0000000000016C86                 nop     word ptr [rax+rax+00000000h]
.text:0000000000016C90
.text:0000000000016C90 loc_16C90:                              ; CODE XREF: re_compile_internal+140↑j
.text:0000000000016C90                                         ; re_compile_internal+14C↑j ...
.text:0000000000016C90                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000016C97                 mov     edx, eax
.text:0000000000016C99                 and     edx, 0FFFFFFF7h
.text:0000000000016C9C                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000016CA3                 mov     [rbx+0B0h], dl
.text:0000000000016CA9                 jle     short loc_16CBE
.text:0000000000016CAB                 test    al, 4
.text:0000000000016CAD                 jz      loc_17213
.text:0000000000016CB3                 lea     rax, utf8_sb_map
.text:0000000000016CBA                 mov     [rbx+78h], rax
.text:0000000000016CBE
.text:0000000000016CBE loc_16CBE:                              ; CODE XREF: re_compile_internal+1A9↑j
.text:0000000000016CBE                                         ; re_compile_internal+793↓j
.text:0000000000016CBE                 cmp     qword ptr [rbx], 0
.text:0000000000016CC2                 jz      loc_17206
.text:0000000000016CC8                 cmp     qword ptr [rbx+40h], 0
.text:0000000000016CCD                 jz      loc_17206
.text:0000000000016CD3                 mov     rax, [rsp+158h+var_140]
.text:0000000000016CD8                 lea     rbp, [rsp+158h+var_D8]
.text:0000000000016CE0                 mov     ecx, 12h
.text:0000000000016CE5                 mov     [rsp+158h+var_10C], 0
.text:0000000000016CED                 lea     r8, [rbp+8]
.text:0000000000016CF1                 and     eax, 400000h
.text:0000000000016CF6                 mov     [rsp+158h+var_138], rax
.text:0000000000016CFB                 mov     rax, [rsp+158h+var_150]
.text:0000000000016D00                 setnz   dl
.text:0000000000016D03                 mov     rdi, r8
.text:0000000000016D06                 mov     rsi, [rax+28h]
.text:0000000000016D0A                 xor     eax, eax
.text:0000000000016D0C                 rep stosq
.text:0000000000016D0F                 mov     rax, [rsp+158h+var_148]
.text:0000000000016D14                 mov     rdi, [rsp+158h+size]
.text:0000000000016D18                 test    rsi, rsi
.text:0000000000016D1B                 mov     [rsp+158h+var_50], dl
.text:0000000000016D22                 mov     ecx, [rbx+0B4h]
.text:0000000000016D28                 setnz   r12b
.text:0000000000016D2C                 mov     [rsp+158h+var_60], rsi
.text:0000000000016D34                 mov     [rsp+158h+var_D8], rax
.text:0000000000016D3C                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000016D43                 or      r12d, edx
.text:0000000000016D46                 mov     [rsp+158h+var_80], rdi
.text:0000000000016D4E                 mov     [rsp+158h+var_88], rdi
.text:0000000000016D56                 mov     esi, r12d
.text:0000000000016D59                 mov     [rsp+158h+var_4D], r12b
.text:0000000000016D61                 mov     [rsp+158h+var_48], ecx
.text:0000000000016D68                 mov     [rsp+158h+var_70], rdi
.text:0000000000016D70                 mov     [rsp+158h+var_78], rdi
.text:0000000000016D78                 mov     edx, eax
.text:0000000000016D7A                 shr     al, 3
.text:0000000000016D7D                 shr     dl, 2
.text:0000000000016D80                 and     eax, 1
.text:0000000000016D83                 and     edx, 1
.text:0000000000016D86                 test    rdi, rdi
.text:0000000000016D89                 mov     [rsp+158h+var_4E], al
.text:0000000000016D90                 mov     [rsp+158h+var_4F], dl
.text:0000000000016D97                 jnz     loc_171D5
.text:0000000000016D9D                 test    sil, sil
.text:0000000000016DA0                 jz      short loc_16DAF
.text:0000000000016DA2
.text:0000000000016DA2 loc_16DA2:                              ; CODE XREF: re_compile_internal+701↓j
.text:0000000000016DA2                 mov     rax, [rsp+158h+var_D0]
.text:0000000000016DAA                 mov     [rsp+158h+var_148], rax
.text:0000000000016DAF
.text:0000000000016DAF loc_16DAF:                              ; CODE XREF: re_compile_internal+2A0↑j
.text:0000000000016DAF                                         ; re_compile_internal+6FB↓j
.text:0000000000016DAF                 cmp     [rsp+158h+var_138], 0
.text:0000000000016DB5                 mov     rax, [rsp+158h+var_148]
.text:0000000000016DBA                 mov     [rsp+158h+var_D0], rax
.text:0000000000016DC2                 jz      loc_16EC5
.text:0000000000016DC8                 cmp     ecx, 1
.text:0000000000016DCB                 jle     loc_179BD
.text:0000000000016DD1
.text:0000000000016DD1 loc_16DD1:                              ; CODE XREF: re_compile_internal+31C↓j
.text:0000000000016DD1                 mov     rdi, rbp
.text:0000000000016DD4                 call    build_wcs_upper_buffer
.text:0000000000016DD9                 test    eax, eax
.text:0000000000016DDB                 jnz     short loc_16E20
.text:0000000000016DDD                 mov     rax, [rsp+158h+size]
.text:0000000000016DE1                 cmp     rax, [rsp+158h+var_A0]
.text:0000000000016DE9                 jle     loc_179A0
.text:0000000000016DEF                 movsxd  rax, dword ptr [rbx+0B4h]
.text:0000000000016DF6                 mov     rsi, [rsp+158h+var_98]
.text:0000000000016DFE                 add     rax, [rsp+158h+var_A8]
.text:0000000000016E06                 cmp     rsi, rax
.text:0000000000016E09                 jg      loc_179A0
.text:0000000000016E0F                 add     rsi, rsi
.text:0000000000016E12                 mov     rdi, rbp
.text:0000000000016E15                 call    re_string_realloc_buffers
.text:0000000000016E1A                 test    eax, eax
.text:0000000000016E1C                 jz      short loc_16DD1
.text:0000000000016E1E                 xchg    ax, ax
.text:0000000000016E20
.text:0000000000016E20 loc_16E20:                              ; CODE XREF: re_compile_internal+2DB↑j
.text:0000000000016E20                                         ; re_compile_internal+674↓j ...
.text:0000000000016E20                 mov     [rsp+158h+var_10C], eax
.text:0000000000016E24                 mov     rax, [rsp+158h+var_150]
.text:0000000000016E29                 mov     r13, [rax]
.text:0000000000016E2C
.text:0000000000016E2C loc_16E2C:                              ; CODE XREF: re_compile_internal+D75↓j
.text:0000000000016E2C                                         ; re_compile_internal+EE2↓j ...
.text:0000000000016E2C                 mov     rdi, [r13+70h]  ; ptr
.text:0000000000016E30                 test    rdi, rdi
.text:0000000000016E33                 jz      short loc_16E48
.text:0000000000016E35                 nop     dword ptr [rax]
.text:0000000000016E38
.text:0000000000016E38 loc_16E38:                              ; CODE XREF: re_compile_internal+346↓j
.text:0000000000016E38                 mov     r12, [rdi]
.text:0000000000016E3B                 call    _free
.text:0000000000016E40                 test    r12, r12
.text:0000000000016E43                 mov     rdi, r12
.text:0000000000016E46                 jnz     short loc_16E38
.text:0000000000016E48
.text:0000000000016E48 loc_16E48:                              ; CODE XREF: re_compile_internal+333↑j
.text:0000000000016E48                 mov     rdi, [r13+20h]  ; ptr
.text:0000000000016E4C                 mov     qword ptr [r13+70h], 0
.text:0000000000016E54                 mov     dword ptr [r13+80h], 0Fh
.text:0000000000016E5F                 mov     qword ptr [r13+68h], 0
.text:0000000000016E67                 call    _free
.text:0000000000016E6C                 mov     qword ptr [r13+20h], 0
.text:0000000000016E74                 mov     rdi, rbp
.text:0000000000016E77                 call    re_string_destruct
.text:0000000000016E7C
.text:0000000000016E7C loc_16E7C:                              ; CODE XREF: re_compile_internal+70E↓j
.text:0000000000016E7C                                         ; re_compile_internal+D68↓j
.text:0000000000016E7C                 mov     rdi, rbx        ; ptr
.text:0000000000016E7F                 call    free_dfa_content
.text:0000000000016E84                 mov     rax, [rsp+158h+var_150]
.text:0000000000016E89                 mov     qword ptr [rax], 0
.text:0000000000016E90                 mov     qword ptr [rax+8], 0
.text:0000000000016E98                 mov     eax, [rsp+158h+var_10C]
.text:0000000000016E9C
.text:0000000000016E9C loc_16E9C:                              ; CODE XREF: re_compile_internal+D62↓j
.text:0000000000016E9C                                         ; re_compile_internal+1016↓j
.text:0000000000016E9C                 mov     rbx, [rsp+158h+var_40]
.text:0000000000016EA4                 xor     rbx, fs:28h
.text:0000000000016EAD                 jnz     loc_17BF0
.text:0000000000016EB3                 add     rsp, 128h
.text:0000000000016EBA                 pop     rbx
.text:0000000000016EBB                 pop     rbp
.text:0000000000016EBC                 pop     r12
.text:0000000000016EBE                 pop     r13
.text:0000000000016EC0                 pop     r14
.text:0000000000016EC2                 pop     r15
.text:0000000000016EC4                 retn
.text:0000000000016EC5 ; ---------------------------------------------------------------------------
.text:0000000000016EC5
.text:0000000000016EC5 loc_16EC5:                              ; CODE XREF: re_compile_internal+2C2↑j
.text:0000000000016EC5                 cmp     ecx, 1
.text:0000000000016EC8                 jg      loc_1787A
.text:0000000000016ECE                 test    r12b, r12b
.text:0000000000016ED1                 mov     rsi, [rsp+158h+var_98]
.text:0000000000016ED9                 jz      loc_174F4
.text:0000000000016EDF                 cmp     [rsp+158h+var_80], rsi
.text:0000000000016EE7                 mov     rax, [rsp+158h+var_A8]
.text:0000000000016EEF                 cmovle  rsi, [rsp+158h+var_80]
.text:0000000000016EF8                 cmp     rsi, rax
.text:0000000000016EFB                 jg      short loc_16F0D
.text:0000000000016EFD                 jmp     short loc_16F40
.text:0000000000016EFD ; ---------------------------------------------------------------------------
.text:0000000000016EFF                 align 20h
.text:0000000000016F00
.text:0000000000016F00 loc_16F00:                              ; CODE XREF: re_compile_internal+43E↓j
.text:0000000000016F00                 mov     rdx, [rsp+158h+var_D0]
.text:0000000000016F08                 mov     [rsp+158h+var_148], rdx
.text:0000000000016F0D
.text:0000000000016F0D loc_16F0D:                              ; CODE XREF: re_compile_internal+3FB↑j
.text:0000000000016F0D                 mov     rdx, [rsp+158h+var_D8]
.text:0000000000016F15                 mov     rcx, [rsp+158h+var_60]
.text:0000000000016F1D                 add     rdx, rax
.text:0000000000016F20                 add     rdx, [rsp+158h+var_B0]
.text:0000000000016F28                 movzx   edx, byte ptr [rdx]
.text:0000000000016F2B                 movzx   edx, byte ptr [rcx+rdx]
.text:0000000000016F2F                 mov     rcx, [rsp+158h+var_148]
.text:0000000000016F34                 mov     [rcx+rax], dl
.text:0000000000016F37                 add     rax, 1
.text:0000000000016F3B                 cmp     rsi, rax
.text:0000000000016F3E                 jnz     short loc_16F00
.text:0000000000016F40
.text:0000000000016F40 loc_16F40:                              ; CODE XREF: re_compile_internal+3FD↑j
.text:0000000000016F40                 mov     [rsp+158h+var_A8], rax
.text:0000000000016F48                 mov     [rsp+158h+var_A0], rax
.text:0000000000016F50                 mov     [rsp+158h+var_10C], 0
.text:0000000000016F58
.text:0000000000016F58 loc_16F58:                              ; CODE XREF: re_compile_internal+A0C↓j
.text:0000000000016F58                                         ; re_compile_internal+D8A↓j ...
.text:0000000000016F58                 mov     r12, [rsp+158h+var_150]
.text:0000000000016F5D                 mov     r14, [rsp+158h+var_140]
.text:0000000000016F62                 lea     r13, [rsp+158h+var_108]
.text:0000000000016F67                 mov     rsi, rbp
.text:0000000000016F6A                 mov     rdi, r13
.text:0000000000016F6D                 mov     [rsp+158h+var_130], r13
.text:0000000000016F72                 mov     r15, [r12]
.text:0000000000016F76                 mov     rdx, r14
.text:0000000000016F79                 mov     qword ptr [r12+30h], 0
.text:0000000000016F82                 or      rdx, 800000h
.text:0000000000016F89                 mov     [r15+0D8h], r14
.text:0000000000016F90                 call    peek_token
.text:0000000000016F95                 lea     r9, [rsp+158h+var_10C]
.text:0000000000016F9A                 xor     r8d, r8d
.text:0000000000016F9D                 mov     rcx, r14
.text:0000000000016FA0                 mov     rdx, r13
.text:0000000000016FA3                 mov     rsi, r12
.text:0000000000016FA6                 mov     rdi, rbp
.text:0000000000016FA9                 cdqe
.text:0000000000016FAB                 add     [rsp+158h+var_90], rax
.text:0000000000016FB3                 call    parse_reg_exp
.text:0000000000016FB8                 mov     ecx, [rsp+158h+var_10C]
.text:0000000000016FBC                 test    ecx, ecx
.text:0000000000016FBE                 jnz     loc_179E7
.text:0000000000016FC4                 lea     r13, [r15+70h]
.text:0000000000016FC8                 lea     r12, [rsp+158h+var_F8]
.text:0000000000016FCD                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:0000000000016FD1                 xor     edx, edx
.text:0000000000016FD3                 xor     ecx, ecx
.text:0000000000016FD5                 mov     rsi, r15
.text:0000000000016FD8                 mov     r8, r12
.text:0000000000016FDB                 mov     rdi, r13
.text:0000000000016FDE                 mov     [rsp+158h+size], rax
.text:0000000000016FE2                 mov     byte ptr [rsp+158h+var_F0], 2
.text:0000000000016FE7                 call    create_token_tree_isra_16
.text:0000000000016FEC                 mov     r9, [rsp+158h+size]
.text:0000000000016FF0                 mov     r11, rax
.text:0000000000016FF3                 mov     rdx, rax
.text:0000000000016FF6                 test    r9, r9
.text:0000000000016FF9                 jz      short loc_17022
.text:0000000000016FFB
.text:0000000000016FFB loc_16FFB:                              ; CODE XREF: re_compile_internal+F1F↓j
.text:0000000000016FFB                 mov     rcx, r11
.text:0000000000016FFE                 mov     rdx, r9
.text:0000000000017001                 mov     r8, r12
.text:0000000000017004                 mov     rsi, r15
.text:0000000000017007                 mov     rdi, r13
.text:000000000001700A                 mov     [rsp+158h+size], r11
.text:000000000001700E                 mov     byte ptr [rsp+158h+var_F0], 10h
.text:0000000000017013                 call    create_token_tree_isra_16
.text:0000000000017018                 mov     r11, [rsp+158h+size]
.text:000000000001701C                 mov     rdx, r11
.text:000000000001701F                 mov     r11, rax
.text:0000000000017022
.text:0000000000017022 loc_17022:                              ; CODE XREF: re_compile_internal+4F9↑j
.text:0000000000017022                 test    rdx, rdx
.text:0000000000017025                 mov     rcx, [rsp+158h+var_150]
.text:000000000001702A                 setz    dl
.text:000000000001702D                 test    r11, r11
.text:0000000000017030                 setz    al
.text:0000000000017033                 or      dl, al
.text:0000000000017035                 mov     r13, [rcx]
.text:0000000000017038                 jnz     loc_179D2
.text:000000000001703E                 mov     r15, [r13+8]
.text:0000000000017042                 mov     [rbx+68h], r11
.text:0000000000017046                 lea     rcx, ds:0[r15*8]
.text:000000000001704E                 lea     r15, [r15+r15*2]
.text:0000000000017052                 mov     rdi, rcx        ; size
.text:0000000000017055                 mov     [rsp+158h+size], rcx
.text:0000000000017059                 shl     r15, 3
.text:000000000001705D                 call    _malloc
.text:0000000000017062                 mov     rcx, [rsp+158h+size]
.text:0000000000017066                 mov     [r13+18h], rax
.text:000000000001706A                 mov     [rsp+158h+var_140], rax
.text:000000000001706F                 mov     rdi, rcx        ; size
.text:0000000000017072                 call    _malloc
.text:0000000000017077                 mov     rdi, r15        ; size
.text:000000000001707A                 mov     [r13+20h], rax
.text:000000000001707E                 mov     [rsp+158h+var_148], rax
.text:0000000000017083                 call    _malloc
.text:0000000000017088                 mov     rdi, r15        ; size
.text:000000000001708B                 mov     [r13+28h], rax
.text:000000000001708F                 mov     [rsp+158h+size], rax
.text:0000000000017093                 call    _malloc
.text:0000000000017098                 mov     rdx, [rsp+158h+var_140]
.text:000000000001709D                 mov     [r13+30h], rax
.text:00000000000170A1                 mov     rsi, [rsp+158h+size]
.text:00000000000170A5                 mov     rcx, [rsp+158h+var_148]
.text:00000000000170AA                 test    rdx, rdx
.text:00000000000170AD                 jz      loc_1786D
.text:00000000000170B3                 test    rcx, rcx
.text:00000000000170B6                 jz      loc_1786D
.text:00000000000170BC                 test    rsi, rsi
.text:00000000000170BF                 jz      loc_1786D
.text:00000000000170C5                 test    rax, rax
.text:00000000000170C8                 jz      loc_1786D
.text:00000000000170CE                 mov     rax, [rsp+158h+var_150]
.text:00000000000170D3                 mov     r15, [rax+30h]
.text:00000000000170D7                 lea     rdi, ds:0[r15*8] ; size
.text:00000000000170DF                 call    _malloc
.text:00000000000170E4                 test    rax, rax
.text:00000000000170E7                 mov     [r13+0E0h], rax
.text:00000000000170EE                 jz      short loc_1715D
.text:00000000000170F0                 test    r15, r15
.text:00000000000170F3                 jz      short loc_1710D
.text:00000000000170F5                 xor     edx, edx
.text:00000000000170F7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000017100
.text:0000000000017100 loc_17100:                              ; CODE XREF: re_compile_internal+60B↓j
.text:0000000000017100                 mov     [rax+rdx*8], rdx
.text:0000000000017104                 add     rdx, 1
.text:0000000000017108                 cmp     rdx, r15
.text:000000000001710B                 jnz     short loc_17100
.text:000000000001710D
.text:000000000001710D loc_1710D:                              ; CODE XREF: re_compile_internal+5F3↑j
.text:000000000001710D                 mov     rdi, [r13+68h]
.text:0000000000017111                 lea     rsi, optimize_subexps
.text:0000000000017118                 mov     rdx, r13
.text:000000000001711B                 call    preorder
.text:0000000000017120                 mov     rax, [rsp+158h+var_150]
.text:0000000000017125                 mov     rdi, [r13+0E0h] ; ptr
.text:000000000001712C                 mov     rdx, [rax+30h]
.text:0000000000017130                 test    rdx, rdx
.text:0000000000017133                 jz      loc_17A24
.text:0000000000017139                 mov     rax, [rdi]
.text:000000000001713C                 test    rax, rax
.text:000000000001713F                 jz      short loc_1714E
.text:0000000000017141                 jmp     short loc_1715D
.text:0000000000017141 ; ---------------------------------------------------------------------------
.text:0000000000017143                 align 8
.text:0000000000017148
.text:0000000000017148 loc_17148:                              ; CODE XREF: re_compile_internal+655↓j
.text:0000000000017148                 cmp     [rdi+rax*8], rax
.text:000000000001714C                 jnz     short loc_1715D
.text:000000000001714E
.text:000000000001714E loc_1714E:                              ; CODE XREF: re_compile_internal+63F↑j
.text:000000000001714E                 add     rax, 1
.text:0000000000017152                 cmp     rdx, rax
.text:0000000000017155                 ja      short loc_17148
.text:0000000000017157                 jz      loc_17A24
.text:000000000001715D
.text:000000000001715D loc_1715D:                              ; CODE XREF: re_compile_internal+5EE↑j
.text:000000000001715D                                         ; re_compile_internal+641↑j ...
.text:000000000001715D                 mov     rdi, [r13+68h]
.text:0000000000017161                 mov     rdx, [rsp+158h+var_150]
.text:0000000000017166                 lea     rsi, lower_subexps
.text:000000000001716D                 call    postorder
.text:0000000000017172                 test    eax, eax
.text:0000000000017174                 jnz     loc_16E20
.text:000000000001717A                 mov     rdi, [r13+68h]
.text:000000000001717E                 lea     rsi, calc_first
.text:0000000000017185                 mov     rdx, r13
.text:0000000000017188                 call    postorder
.text:000000000001718D                 test    eax, eax
.text:000000000001718F                 jnz     loc_16E20
.text:0000000000017195                 mov     rdi, [r13+68h]
.text:0000000000017199                 lea     rsi, calc_next
.text:00000000000171A0                 mov     rdx, r13
.text:00000000000171A3                 call    preorder
.text:00000000000171A8                 mov     rdx, [r13+68h]
.text:00000000000171AC                 lea     rsi, jpt_171D3
.text:00000000000171B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000171B8
.text:00000000000171B8 loc_171B8:                              ; CODE XREF: re_compile_internal+7BF↓j
.text:00000000000171B8                 movzx   ecx, byte ptr [rdx+30h]
.text:00000000000171BC                 mov     rdi, [rdx+38h]
.text:00000000000171C0                 cmp     cl, 10h         ; switch 17 cases
.text:00000000000171C3                 ja      def_171D3       ; jumptable 00000000000171D3 default case, cases 0,1,3,5-7,13-15
.text:00000000000171C9                 movzx   eax, cl
.text:00000000000171CC                 movsxd  rax, ds:(jpt_171D3 - 1CC08h)[rsi+rax*4]
.text:00000000000171D0                 add     rax, rsi
.text:00000000000171D3                 jmp     rax             ; switch jump
.text:00000000000171D5 ; ---------------------------------------------------------------------------
.text:00000000000171D5
.text:00000000000171D5 loc_171D5:                              ; CODE XREF: re_compile_internal+297↑j
.text:00000000000171D5                 mov     rsi, [rsp+158h+var_130]
.text:00000000000171DA                 mov     rdi, rbp
.text:00000000000171DD                 call    re_string_realloc_buffers
.text:00000000000171E2                 test    eax, eax
.text:00000000000171E4                 jnz     loc_16E20
.text:00000000000171EA                 movzx   esi, [rsp+158h+var_4D]
.text:00000000000171F2                 mov     ecx, [rbx+0B4h]
.text:00000000000171F8                 test    sil, sil
.text:00000000000171FB                 jz      loc_16DAF
.text:0000000000017201                 jmp     loc_16DA2
.text:0000000000017206 ; ---------------------------------------------------------------------------
.text:0000000000017206
.text:0000000000017206 loc_17206:                              ; CODE XREF: re_compile_internal+C5↑j
.text:0000000000017206                                         ; re_compile_internal+1C2↑j ...
.text:0000000000017206                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001720E                 jmp     loc_16E7C
.text:0000000000017213 ; ---------------------------------------------------------------------------
.text:0000000000017213
.text:0000000000017213 loc_17213:                              ; CODE XREF: re_compile_internal+1AD↑j
.text:0000000000017213                 mov     esi, 1          ; size
.text:0000000000017218                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000001721D                 call    _calloc
.text:0000000000017222                 test    rax, rax
.text:0000000000017225                 mov     [rbx+78h], rax
.text:0000000000017229                 jz      short loc_17206
.text:000000000001722B                 xor     r12d, r12d
.text:000000000001722E                 xor     ebp, ebp
.text:0000000000017230                 mov     r13d, 1
.text:0000000000017236
.text:0000000000017236 loc_17236:                              ; CODE XREF: re_compile_internal+791↓j
.text:0000000000017236                 xor     r15d, r15d
.text:0000000000017239                 nop     dword ptr [rax+00000000h]
.text:0000000000017240
.text:0000000000017240 loc_17240:                              ; CODE XREF: re_compile_internal+782↓j
.text:0000000000017240                 lea     r14d, [rbp+r15+0]
.text:0000000000017245                 mov     edi, r14d       ; c
.text:0000000000017248                 call    _btowc
.text:000000000001724D                 cmp     eax, 0FFFFFFFFh
.text:0000000000017250                 jz      short loc_17265
.text:0000000000017252                 mov     rsi, [rbx+78h]
.text:0000000000017256                 mov     rdi, r13
.text:0000000000017259                 mov     ecx, r15d
.text:000000000001725C                 shl     rdi, cl
.text:000000000001725F                 add     rsi, r12
.text:0000000000017262                 or      [rsi], rdi
.text:0000000000017265
.text:0000000000017265 loc_17265:                              ; CODE XREF: re_compile_internal+750↑j
.text:0000000000017265                 test    r14d, 0FFFFFF80h
.text:000000000001726C                 jnz     short loc_1727A
.text:000000000001726E                 cmp     eax, r14d
.text:0000000000017271                 jz      short loc_1727A
.text:0000000000017273                 or      byte ptr [rbx+0B0h], 8
.text:000000000001727A
.text:000000000001727A loc_1727A:                              ; CODE XREF: re_compile_internal+76C↑j
.text:000000000001727A                                         ; re_compile_internal+771↑j
.text:000000000001727A                 add     r15, 1
.text:000000000001727E                 cmp     r15, 40h ; '@'
.text:0000000000017282                 jnz     short loc_17240
.text:0000000000017284                 add     ebp, 40h ; '@'
.text:0000000000017287                 add     r12, 8
.text:000000000001728B                 cmp     ebp, 100h
.text:0000000000017291                 jnz     short loc_17236
.text:0000000000017293                 jmp     loc_16CBE
.text:0000000000017298 ; ---------------------------------------------------------------------------
.text:0000000000017298
.text:0000000000017298 def_171D3:                              ; CODE XREF: re_compile_internal+6C3↑j
.text:0000000000017298                                         ; re_compile_internal+6D3↑j
.text:0000000000017298                                         ; DATA XREF: ...
.text:0000000000017298                 and     ecx, 8          ; jumptable 00000000000171D3 default case, cases 0,1,3,5-7,13-15
.text:000000000001729B                 jnz     loc_17BB2
.text:00000000000172A1                 mov     rax, [rdx+20h]
.text:00000000000172A5                 mov     rcx, [rax+38h]
.text:00000000000172A9                 mov     rax, [r13+18h]
.text:00000000000172AD                 mov     [rax+rdi*8], rcx
.text:00000000000172B1
.text:00000000000172B1 loc_172B1:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:00000000000172B1                                         ; re_compile_internal+955↓j ...
.text:00000000000172B1                 mov     r15, [rdx+8]    ; jumptable 00000000000171D3 case 16
.text:00000000000172B5
.text:00000000000172B5 loc_172B5:                              ; CODE XREF: re_compile_internal+8F3↓j
.text:00000000000172B5                                         ; re_compile_internal+94B↓j ...
.text:00000000000172B5                 xor     edi, edi
.text:00000000000172B7                 test    r15, r15
.text:00000000000172BA                 jz      short loc_172CB
.text:00000000000172BC
.text:00000000000172BC loc_172BC:                              ; CODE XREF: re_compile_internal+7E1↓j
.text:00000000000172BC                 mov     rdx, r15
.text:00000000000172BF                 jmp     loc_171B8
.text:00000000000172BF ; ---------------------------------------------------------------------------
.text:00000000000172C4                 align 8
.text:00000000000172C8
.text:00000000000172C8 loc_172C8:                              ; CODE XREF: re_compile_internal+7EC↓j
.text:00000000000172C8                 mov     rdx, rax
.text:00000000000172CB
.text:00000000000172CB loc_172CB:                              ; CODE XREF: re_compile_internal+7BA↑j
.text:00000000000172CB                 mov     r15, [rdx+10h]
.text:00000000000172CF                 test    r15, r15
.text:00000000000172D2                 setz    cl
.text:00000000000172D5                 cmp     r15, rdi
.text:00000000000172D8                 setz    al
.text:00000000000172DB                 or      cl, al
.text:00000000000172DD                 mov     byte ptr [rsp+158h+var_148], cl
.text:00000000000172E1                 jz      short loc_172BC
.text:00000000000172E3                 mov     rax, [rdx]
.text:00000000000172E6                 mov     rdi, rdx
.text:00000000000172E9                 test    rax, rax
.text:00000000000172EC                 jnz     short loc_172C8
.text:00000000000172EE                 xor     r14d, r14d
.text:00000000000172F1                 xor     r15d, r15d
.text:00000000000172F4                 nop     dword ptr [rax+00h]
.text:00000000000172F8
.text:00000000000172F8 loc_172F8:                              ; CODE XREF: re_compile_internal+A49↓j
.text:00000000000172F8                 mov     rdx, [r13+10h]
.text:00000000000172FC                 cmp     rdx, r15
.text:00000000000172FF                 jz      short loc_17326
.text:0000000000017301
.text:0000000000017301 loc_17301:                              ; CODE XREF: re_compile_internal+824↓j
.text:0000000000017301                                         ; re_compile_internal+835↓j ...
.text:0000000000017301                 lea     r10, [r15+r15*2]
.text:0000000000017305                 mov     rax, [r13+30h]
.text:0000000000017309                 shl     r10, 3
.text:000000000001730D                 cmp     qword ptr [rax+r10+8], 0
.text:0000000000017313                 jz      loc_17518
.text:0000000000017319                 mov     rdx, [r13+10h]
.text:000000000001731D                 add     r15, 1
.text:0000000000017321                 cmp     rdx, r15
.text:0000000000017324                 jnz     short loc_17301
.text:0000000000017326
.text:0000000000017326 loc_17326:                              ; CODE XREF: re_compile_internal+7FF↑j
.text:0000000000017326                 test    r14b, r14b
.text:0000000000017329                 jz      loc_1756E
.text:000000000001732F
.text:000000000001732F loc_1732F:                              ; CODE XREF: re_compile_internal+A5D↓j
.text:000000000001732F                 xor     r14d, r14d
.text:0000000000017332                 xor     r15d, r15d
.text:0000000000017335                 jmp     short loc_17301
.text:0000000000017337 ; ---------------------------------------------------------------------------
.text:0000000000017337
.text:0000000000017337 loc_17337:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000017337                                         ; DATA XREF: .rodata:jpt_171D3↓o
.text:0000000000017337                 or      byte ptr [r13+0B0h], 1 ; jumptable 00000000000171D3 cases 10,11
.text:000000000001733F                 mov     r15, [rdx+8]
.text:0000000000017343                 test    r15, r15
.text:0000000000017346                 jz      loc_17959
.text:000000000001734C                 mov     rax, [r15+18h]
.text:0000000000017350                 mov     rcx, [rax+38h]
.text:0000000000017354
.text:0000000000017354 loc_17354:                              ; CODE XREF: re_compile_internal+E61↓j
.text:0000000000017354                 mov     rax, [rdx+10h]
.text:0000000000017358                 test    rax, rax
.text:000000000001735B                 jz      loc_1794C
.text:0000000000017361                 mov     rax, [rax+18h]
.text:0000000000017365                 mov     r9, [rax+38h]
.text:0000000000017369
.text:0000000000017369 loc_17369:                              ; CODE XREF: re_compile_internal+E54↓j
.text:0000000000017369                 test    rcx, rcx
.text:000000000001736C                 js      loc_17BD1
.text:0000000000017372                 test    r9, r9
.text:0000000000017375                 js      loc_17B93
.text:000000000001737B                 mov     rax, [r13+28h]
.text:000000000001737F                 lea     rdi, [rdi+rdi*2]
.text:0000000000017383                 mov     [rsp+158h+var_120], rsi
.text:0000000000017388                 mov     [rsp+158h+var_128], r9
.text:000000000001738D                 mov     [rsp+158h+var_140], rcx
.text:0000000000017392                 mov     [rsp+158h+var_148], rdx
.text:0000000000017397                 lea     r10, [rax+rdi*8]
.text:000000000001739B                 mov     edi, 10h        ; size
.text:00000000000173A0                 mov     qword ptr [r10], 2
.text:00000000000173A7                 mov     [rsp+158h+size], r10
.text:00000000000173AB                 call    _malloc
.text:00000000000173B0                 mov     r10, [rsp+158h+size]
.text:00000000000173B4                 test    rax, rax
.text:00000000000173B7                 mov     rdx, [rsp+158h+var_148]
.text:00000000000173BC                 mov     rcx, [rsp+158h+var_140]
.text:00000000000173C1                 mov     r9, [rsp+158h+var_128]
.text:00000000000173C6                 mov     rsi, [rsp+158h+var_120]
.text:00000000000173CB                 mov     [r10+10h], rax
.text:00000000000173CF                 jz      loc_1766A
.text:00000000000173D5                 cmp     rcx, r9
.text:00000000000173D8                 jz      loc_179AD
.text:00000000000173DE                 mov     qword ptr [r10+8], 2
.text:00000000000173E6                 jl      loc_17994
.text:00000000000173EC                 mov     [rax], r9
.text:00000000000173EF                 mov     [rax+8], rcx
.text:00000000000173F3                 jmp     loc_172B5
.text:00000000000173F8 ; ---------------------------------------------------------------------------
.text:00000000000173F8
.text:00000000000173F8 loc_173F8:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:00000000000173F8                                         ; DATA XREF: .rodata:jpt_171D3↓o
.text:00000000000173F8                 mov     rax, [rdx+20h]  ; jumptable 00000000000171D3 cases 8,9,12
.text:00000000000173FC                 lea     rcx, [rdi+rdi*2]
.text:0000000000017400                 mov     edi, 8          ; size
.text:0000000000017405                 mov     [rsp+158h+var_148], rsi
.text:000000000001740A                 mov     [rsp+158h+size], rdx
.text:000000000001740E                 mov     r14, [rax+38h]
.text:0000000000017412                 mov     rax, [r13+28h]
.text:0000000000017416                 lea     r15, [rax+rcx*8]
.text:000000000001741A                 mov     qword ptr [r15], 1
.text:0000000000017421                 mov     qword ptr [r15+8], 1
.text:0000000000017429                 call    _malloc
.text:000000000001742E                 test    rax, rax
.text:0000000000017431                 mov     [r15+10h], rax
.text:0000000000017435                 mov     rdx, [rsp+158h+size]
.text:0000000000017439                 mov     rsi, [rsp+158h+var_148]
.text:000000000001743E                 jz      loc_17AE8
.text:0000000000017444                 mov     [rax], r14
.text:0000000000017447                 mov     r15, [rdx+8]
.text:000000000001744B                 jmp     loc_172B5
.text:0000000000017450 ; ---------------------------------------------------------------------------
.text:0000000000017450
.text:0000000000017450 loc_17450:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000017450                                         ; DATA XREF: .rodata:jpt_171D3↓o
.text:0000000000017450                 cmp     qword ptr [rdx+20h], 0 ; jumptable 00000000000171D3 case 2
.text:0000000000017455                 jz      loc_172B1       ; jumptable 00000000000171D3 case 16
.text:000000000001745B                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000017462                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000017469                 lea     rdi, aNodeNextNull ; "node->next == NULL"
.text:0000000000017470                 mov     edx, 59Fh       ; line
.text:0000000000017475                 call    ___assert_fail
.text:0000000000017475 ; ---------------------------------------------------------------------------
.text:000000000001747A                 align 20h
.text:0000000000017480
.text:0000000000017480 loc_17480:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000017480                                         ; DATA XREF: .rodata:jpt_171D3↓o
.text:0000000000017480                 mov     rax, [rdx+20h]  ; jumptable 00000000000171D3 case 4
.text:0000000000017484                 mov     r15, [rax+38h]
.text:0000000000017488                 mov     rax, [r13+18h]
.text:000000000001748C                 mov     [rax+rdi*8], r15
.text:0000000000017490                 cmp     byte ptr [rdx+30h], 4
.text:0000000000017494                 jnz     loc_172B1       ; jumptable 00000000000171D3 case 16
.text:000000000001749A                 mov     rax, [r13+28h]
.text:000000000001749E                 lea     rcx, [rdi+rdi*2]
.text:00000000000174A2                 mov     edi, 8          ; size
.text:00000000000174A7                 mov     [rsp+158h+var_140], rsi
.text:00000000000174AC                 mov     [rsp+158h+var_148], rdx
.text:00000000000174B1                 lea     rcx, [rax+rcx*8]
.text:00000000000174B5                 mov     qword ptr [rcx], 1
.text:00000000000174BC                 mov     qword ptr [rcx+8], 1
.text:00000000000174C4                 mov     [rsp+158h+size], rcx
.text:00000000000174C8                 call    _malloc
.text:00000000000174CD                 mov     rcx, [rsp+158h+size]
.text:00000000000174D1                 test    rax, rax
.text:00000000000174D4                 mov     rdx, [rsp+158h+var_148]
.text:00000000000174D9                 mov     rsi, [rsp+158h+var_140]
.text:00000000000174DE                 mov     [rcx+10h], rax
.text:00000000000174E2                 jz      loc_17B30
.text:00000000000174E8                 mov     [rax], r15
.text:00000000000174EB                 mov     r15, [rdx+8]
.text:00000000000174EF                 jmp     loc_172B5
.text:00000000000174F4 ; ---------------------------------------------------------------------------
.text:00000000000174F4
.text:00000000000174F4 loc_174F4:                              ; CODE XREF: re_compile_internal+3D9↑j
.text:00000000000174F4                 mov     [rsp+158h+var_A8], rsi
.text:00000000000174FC                 mov     [rsp+158h+var_A0], rsi
.text:0000000000017504                 mov     [rsp+158h+var_10C], 0
.text:000000000001750C                 jmp     loc_16F58
.text:000000000001750C ; ---------------------------------------------------------------------------
.text:0000000000017511                 align 8
.text:0000000000017518
.text:0000000000017518 loc_17518:                              ; CODE XREF: re_compile_internal+813↑j
.text:0000000000017518                 mov     ecx, 1
.text:000000000001751D                 mov     rdx, r15
.text:0000000000017520                 mov     rsi, r13
.text:0000000000017523                 mov     rdi, r12
.text:0000000000017526                 mov     [rsp+158h+size], r10
.text:000000000001752A                 call    calc_eclosure_iter
.text:000000000001752F                 test    eax, eax
.text:0000000000017531                 jnz     loc_16E20
.text:0000000000017537                 mov     rax, [r13+30h]
.text:000000000001753B                 mov     r10, [rsp+158h+size]
.text:000000000001753F                 add     r15, 1
.text:0000000000017543                 cmp     qword ptr [rax+r10+8], 0
.text:0000000000017549                 jnz     loc_172F8
.text:000000000001754F                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:0000000000017554                 call    _free
.text:0000000000017559                 cmp     [r13+10h], r15
.text:000000000001755D                 jz      loc_1732F
.text:0000000000017563                 movzx   r14d, byte ptr [rsp+158h+var_148]
.text:0000000000017569                 jmp     loc_17301
.text:000000000001756E ; ---------------------------------------------------------------------------
.text:000000000001756E
.text:000000000001756E loc_1756E:                              ; CODE XREF: re_compile_internal+829↑j
.text:000000000001756E                 mov     rax, [rsp+158h+var_150]
.text:0000000000017573                 test    byte ptr [rax+38h], 10h
.text:0000000000017577                 jnz     short loc_1758A
.text:0000000000017579                 cmp     qword ptr [rax+30h], 0
.text:000000000001757E                 jz      short loc_1758A
.text:0000000000017580                 test    byte ptr [r13+0B0h], 1
.text:0000000000017588                 jnz     short loc_17598
.text:000000000001758A
.text:000000000001758A loc_1758A:                              ; CODE XREF: re_compile_internal+A77↑j
.text:000000000001758A                                         ; re_compile_internal+A7E↑j
.text:000000000001758A                 cmp     qword ptr [r13+98h], 0
.text:0000000000017592                 jz      loc_1768B
.text:0000000000017598
.text:0000000000017598 loc_17598:                              ; CODE XREF: re_compile_internal+A88↑j
.text:0000000000017598                 lea     rdi, [rdx+rdx*2]
.text:000000000001759C                 mov     [rsp+158h+size], rdx
.text:00000000000175A0                 shl     rdi, 3          ; size
.text:00000000000175A4                 call    _malloc
.text:00000000000175A9                 test    rax, rax
.text:00000000000175AC                 mov     [r13+38h], rax
.text:00000000000175B0                 jz      loc_17AFC
.text:00000000000175B6                 mov     rdx, [rsp+158h+size]
.text:00000000000175BA                 xor     esi, esi
.text:00000000000175BC                 xor     ecx, ecx
.text:00000000000175BE                 test    rdx, rdx
.text:00000000000175C1                 jnz     short loc_175D4
.text:00000000000175C3                 jmp     loc_1768B
.text:00000000000175C3 ; ---------------------------------------------------------------------------
.text:00000000000175C8                 align 10h
.text:00000000000175D0
.text:00000000000175D0 loc_175D0:                              ; CODE XREF: re_compile_internal+AF5↓j
.text:00000000000175D0                 mov     rax, [r13+38h]
.text:00000000000175D4
.text:00000000000175D4 loc_175D4:                              ; CODE XREF: re_compile_internal+AC1↑j
.text:00000000000175D4                 pxor    xmm0, xmm0
.text:00000000000175D8                 add     rax, rsi
.text:00000000000175DB                 add     rcx, 1
.text:00000000000175DF                 mov     qword ptr [rax+10h], 0
.text:00000000000175E7                 add     rsi, 18h
.text:00000000000175EB                 movups  xmmword ptr [rax], xmm0
.text:00000000000175EE                 mov     rax, [r13+10h]
.text:00000000000175F2                 cmp     rcx, rax
.text:00000000000175F5                 jb      short loc_175D0
.text:00000000000175F7                 test    rax, rax
.text:00000000000175FA                 jz      loc_1768B
.text:0000000000017600                 mov     rax, [r13+30h]
.text:0000000000017604                 mov     [rsp+158h+var_140], 0
.text:000000000001760D                 mov     [rsp+158h+var_148], 0
.text:0000000000017616
.text:0000000000017616 loc_17616:                              ; CODE XREF: re_compile_internal+B89↓j
.text:0000000000017616                 mov     rcx, [rsp+158h+var_140]
.text:000000000001761B                 lea     rdx, [rax+rcx]
.text:000000000001761F                 cmp     qword ptr [rdx+8], 0
.text:0000000000017624                 mov     rcx, [rdx+10h]
.text:0000000000017628                 jle     short loc_17674
.text:000000000001762A                 xor     r15d, r15d
.text:000000000001762D                 jmp     short loc_17648
.text:000000000001762D ; ---------------------------------------------------------------------------
.text:000000000001762F                 align 10h
.text:0000000000017630
.text:0000000000017630 loc_17630:                              ; CODE XREF: re_compile_internal+B68↓j
.text:0000000000017630                 mov     rax, [r13+30h]
.text:0000000000017634                 mov     rdx, [rsp+158h+var_140]
.text:0000000000017639                 add     r15, 1
.text:000000000001763D                 mov     rcx, [rsp+158h+size]
.text:0000000000017641                 cmp     r15, [rax+rdx+8]
.text:0000000000017646                 jge     short loc_17674
.text:0000000000017648
.text:0000000000017648 loc_17648:                              ; CODE XREF: re_compile_internal+B2D↑j
.text:0000000000017648                 mov     rax, [rcx+r15*8]
.text:000000000001764C                 mov     [rsp+158h+size], rcx
.text:0000000000017650                 lea     rsi, [rax+rax*2]
.text:0000000000017654                 mov     rax, [r13+38h]
.text:0000000000017658                 lea     rdi, [rax+rsi*8]
.text:000000000001765C                 mov     rsi, [rsp+158h+var_148]
.text:0000000000017661                 call    re_node_set_insert_last
.text:0000000000017666                 test    al, al
.text:0000000000017668                 jnz     short loc_17630
.text:000000000001766A
.text:000000000001766A loc_1766A:                              ; CODE XREF: re_compile_internal+8CF↑j
.text:000000000001766A                                         ; re_compile_internal+FF7↓j
.text:000000000001766A                 mov     eax, 0Ch
.text:000000000001766F                 jmp     loc_16E20
.text:0000000000017674 ; ---------------------------------------------------------------------------
.text:0000000000017674
.text:0000000000017674 loc_17674:                              ; CODE XREF: re_compile_internal+B28↑j
.text:0000000000017674                                         ; re_compile_internal+B46↑j
.text:0000000000017674                 add     [rsp+158h+var_148], 1
.text:000000000001767A                 add     [rsp+158h+var_140], 18h
.text:0000000000017680                 mov     rdx, [rsp+158h+var_148]
.text:0000000000017685                 cmp     rdx, [r13+10h]
.text:0000000000017689                 jb      short loc_17616
.text:000000000001768B
.text:000000000001768B loc_1768B:                              ; CODE XREF: re_compile_internal+A92↑j
.text:000000000001768B                                         ; re_compile_internal+AC3↑j ...
.text:000000000001768B                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000017692                 mov     [rsp+158h+var_10C], 0
.text:000000000001769A                 shr     al, 2
.text:000000000001769D                 cmp     [rsp+158h+var_138], 0
.text:00000000000176A3                 setz    dl
.text:00000000000176A6                 and     al, dl
.text:00000000000176A8                 jnz     loc_1788F
.text:00000000000176AE
.text:00000000000176AE loc_176AE:                              ; CODE XREF: re_compile_internal+D99↓j
.text:00000000000176AE                                         ; re_compile_internal+DD3↓j ...
.text:00000000000176AE                 mov     rax, [rbx+68h]  ; jumptable 00000000000178D3 case 6
.text:00000000000176B2                 mov     rdi, r12
.text:00000000000176B5                 mov     rax, [rax+18h]
.text:00000000000176B9                 mov     rax, [rax+38h]
.text:00000000000176BD                 lea     rdx, [rax+rax*2]
.text:00000000000176C1                 mov     [rbx+90h], rax
.text:00000000000176C8                 mov     rax, [rbx+30h]
.text:00000000000176CC                 lea     rsi, [rax+rdx*8]
.text:00000000000176D0                 call    re_node_set_init_copy
.text:00000000000176D5                 test    eax, eax
.text:00000000000176D7                 mov     r15d, eax
.text:00000000000176DA                 mov     [rsp+158h+var_108], eax
.text:00000000000176DE                 jnz     loc_177FF
.text:00000000000176E4                 cmp     qword ptr [rbx+98h], 0
.text:00000000000176EC                 jle     loc_177C0
.text:00000000000176F2                 mov     r9, [rsp+158h+var_F0]
.text:00000000000176F7                 test    r9, r9
.text:00000000000176FA                 jle     loc_177C0
.text:0000000000017700                 xor     r10d, r10d
.text:0000000000017703                 lea     r13, [r12+10h]
.text:0000000000017708                 jmp     short loc_1771D
.text:0000000000017708 ; ---------------------------------------------------------------------------
.text:000000000001770A                 align 10h
.text:0000000000017710
.text:0000000000017710 loc_17710:                              ; CODE XREF: re_compile_internal+C37↓j
.text:0000000000017710                                         ; re_compile_internal+C47↓j ...
.text:0000000000017710                 add     r10, 1
.text:0000000000017714                 cmp     r9, r10
.text:0000000000017717                 jle     loc_177C0
.text:000000000001771D
.text:000000000001771D loc_1771D:                              ; CODE XREF: re_compile_internal+C08↑j
.text:000000000001771D                                         ; re_compile_internal+CB2↓j
.text:000000000001771D                 mov     rcx, [rsp+158h+ptr]
.text:0000000000017722                 mov     rsi, [rbx]
.text:0000000000017725                 mov     r8, [rcx+r10*8]
.text:0000000000017729                 mov     rdi, r8
.text:000000000001772C                 shl     rdi, 4
.text:0000000000017730                 add     rdi, rsi
.text:0000000000017733                 cmp     byte ptr [rdi+8], 4
.text:0000000000017737                 jnz     short loc_17710
.text:0000000000017739                 xor     edx, edx
.text:000000000001773B                 jmp     short loc_17749
.text:000000000001773B ; ---------------------------------------------------------------------------
.text:000000000001773D                 align 20h
.text:0000000000017740
.text:0000000000017740 loc_17740:                              ; CODE XREF: re_compile_internal+C58↓j
.text:0000000000017740                                         ; re_compile_internal+C60↓j
.text:0000000000017740                 add     rdx, 1
.text:0000000000017744                 cmp     r9, rdx
.text:0000000000017747                 jz      short loc_17710
.text:0000000000017749
.text:0000000000017749 loc_17749:                              ; CODE XREF: re_compile_internal+C3B↑j
.text:0000000000017749                 mov     rax, [rcx+rdx*8]
.text:000000000001774D                 shl     rax, 4
.text:0000000000017751                 add     rax, rsi
.text:0000000000017754                 cmp     byte ptr [rax+8], 9
.text:0000000000017758                 jnz     short loc_17740
.text:000000000001775A                 mov     r11, [rdi]
.text:000000000001775D                 cmp     [rax], r11
.text:0000000000017760                 jnz     short loc_17740
.text:0000000000017762                 mov     rdx, [rbx+28h]
.text:0000000000017766                 lea     rax, [r8+r8*2]
.text:000000000001776A                 mov     rsi, r13
.text:000000000001776D                 mov     rdi, r9
.text:0000000000017770                 lea     rax, [rdx+rax*8]
.text:0000000000017774                 mov     rax, [rax+10h]
.text:0000000000017778                 mov     r11, [rax]
.text:000000000001777B                 mov     rdx, r11
.text:000000000001777E                 call    re_node_set_contains_isra_3
.text:0000000000017783                 test    rax, rax
.text:0000000000017786                 jnz     short loc_17710
.text:0000000000017788                 mov     rax, [rbx+30h]
.text:000000000001778C                 lea     rdx, [r11+r11*2]
.text:0000000000017790                 mov     rdi, r12
.text:0000000000017793                 lea     rsi, [rax+rdx*8]
.text:0000000000017797                 call    re_node_set_merge
.text:000000000001779C                 test    eax, eax
.text:000000000001779E                 jnz     loc_17AE0
.text:00000000000177A4                 mov     r9, [rsp+158h+var_F0]
.text:00000000000177A9                 mov     r10d, 1
.text:00000000000177AF                 cmp     r9, r10
.text:00000000000177B2                 jg      loc_1771D
.text:00000000000177B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000177C0
.text:00000000000177C0 loc_177C0:                              ; CODE XREF: re_compile_internal+BEC↑j
.text:00000000000177C0                                         ; re_compile_internal+BFA↑j ...
.text:00000000000177C0                 mov     rdi, [rsp+158h+var_130]
.text:00000000000177C5                 xor     ecx, ecx
.text:00000000000177C7                 mov     rdx, r12
.text:00000000000177CA                 mov     rsi, rbx
.text:00000000000177CD                 call    re_acquire_state_context
.text:00000000000177D2                 test    rax, rax
.text:00000000000177D5                 mov     [rbx+48h], rax
.text:00000000000177D9                 jz      loc_17942
.text:00000000000177DF                 cmp     byte ptr [rax+68h], 0
.text:00000000000177E3                 js      loc_178E1
.text:00000000000177E9                 mov     [rbx+60h], rax
.text:00000000000177ED                 mov     [rbx+58h], rax
.text:00000000000177F1                 mov     [rbx+50h], rax
.text:00000000000177F5
.text:00000000000177F5 loc_177F5:                              ; CODE XREF: re_compile_internal+E3C↓j
.text:00000000000177F5                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:00000000000177FA                 call    _free
.text:00000000000177FF
.text:00000000000177FF loc_177FF:                              ; CODE XREF: re_compile_internal+BDE↑j
.text:00000000000177FF                                         ; re_compile_internal+E47↓j ...
.text:00000000000177FF                 mov     rax, [rsp+158h+var_150]
.text:0000000000017804                 mov     [rsp+158h+var_10C], r15d
.text:0000000000017809                 mov     r13, [rax]
.text:000000000001780C                 mov     rdi, [r13+70h]  ; ptr
.text:0000000000017810                 test    rdi, rdi
.text:0000000000017813                 jz      short loc_17828
.text:0000000000017815                 nop     dword ptr [rax]
.text:0000000000017818
.text:0000000000017818 loc_17818:                              ; CODE XREF: re_compile_internal+D26↓j
.text:0000000000017818                 mov     r12, [rdi]
.text:000000000001781B                 call    _free
.text:0000000000017820                 test    r12, r12
.text:0000000000017823                 mov     rdi, r12
.text:0000000000017826                 jnz     short loc_17818
.text:0000000000017828
.text:0000000000017828 loc_17828:                              ; CODE XREF: re_compile_internal+D13↑j
.text:0000000000017828                 mov     rdi, [r13+20h]  ; ptr
.text:000000000001782C                 mov     qword ptr [r13+70h], 0
.text:0000000000017834                 mov     dword ptr [r13+80h], 0Fh
.text:000000000001783F                 mov     qword ptr [r13+68h], 0
.text:0000000000017847                 call    _free
.text:000000000001784C                 mov     qword ptr [r13+20h], 0
.text:0000000000017854                 mov     rdi, rbp
.text:0000000000017857                 call    re_string_destruct
.text:000000000001785C                 mov     eax, [rsp+158h+var_10C]
.text:0000000000017860                 test    eax, eax
.text:0000000000017862                 jz      loc_16E9C
.text:0000000000017868                 jmp     loc_16E7C
.text:000000000001786D ; ---------------------------------------------------------------------------
.text:000000000001786D
.text:000000000001786D loc_1786D:                              ; CODE XREF: re_compile_internal+5AD↑j
.text:000000000001786D                                         ; re_compile_internal+5B6↑j ...
.text:000000000001786D                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000017875                 jmp     loc_16E2C
.text:000000000001787A ; ---------------------------------------------------------------------------
.text:000000000001787A
.text:000000000001787A loc_1787A:                              ; CODE XREF: re_compile_internal+3C8↑j
.text:000000000001787A                 mov     rdi, rbp
.text:000000000001787D                 call    build_wcs_buffer
.text:0000000000017882                 mov     [rsp+158h+var_10C], 0
.text:000000000001788A                 jmp     loc_16F58
.text:000000000001788F ; ---------------------------------------------------------------------------
.text:000000000001788F
.text:000000000001788F loc_1788F:                              ; CODE XREF: re_compile_internal+BA8↑j
.text:000000000001788F                 mov     rcx, [rsp+158h+var_150]
.text:0000000000017894                 cmp     qword ptr [rcx+28h], 0
.text:0000000000017899                 jnz     loc_176AE       ; jumptable 00000000000178D3 case 6
.text:000000000001789F                 mov     r10, [rbx+10h]
.text:00000000000178A3                 test    r10, r10
.text:00000000000178A6                 jz      loc_17B5A
.text:00000000000178AC                 mov     rsi, [rbx]
.text:00000000000178AF                 lea     r9, jpt_178D3
.text:00000000000178B6                 xor     r8d, r8d
.text:00000000000178B9                 xor     edx, edx
.text:00000000000178BB                 mov     rcx, rsi
.text:00000000000178BE
.text:00000000000178BE loc_178BE:                              ; CODE XREF: re_compile_internal+F47↓j
.text:00000000000178BE                 cmp     byte ptr [rcx+8], 0Ch ; switch 13 cases
.text:00000000000178C2                 ja      def_178D3       ; jumptable 00000000000178D3 default case, cases 0,7
.text:00000000000178C8                 movzx   edi, byte ptr [rcx+8]
.text:00000000000178CC                 movsxd  rdi, ds:(jpt_178D3 - 1CC4Ch)[r9+rdi*4]
.text:00000000000178D0                 add     rdi, r9
.text:00000000000178D3                 jmp     rdi             ; switch jump
.text:00000000000178D5 ; ---------------------------------------------------------------------------
.text:00000000000178D5
.text:00000000000178D5 loc_178D5:                              ; CODE XREF: re_compile_internal+EE↑j
.text:00000000000178D5                 xor     ebp, ebp
.text:00000000000178D7                 mov     esi, 1
.text:00000000000178DC                 jmp     loc_16C0D
.text:00000000000178E1 ; ---------------------------------------------------------------------------
.text:00000000000178E1
.text:00000000000178E1 loc_178E1:                              ; CODE XREF: re_compile_internal+CE3↑j
.text:00000000000178E1                 mov     r14, [rsp+158h+var_130]
.text:00000000000178E6                 mov     ecx, 1
.text:00000000000178EB                 mov     rdx, r12
.text:00000000000178EE                 mov     rsi, rbx
.text:00000000000178F1                 mov     rdi, r14
.text:00000000000178F4                 call    re_acquire_state_context
.text:00000000000178F9                 mov     ecx, 2
.text:00000000000178FE                 mov     rdx, r12
.text:0000000000017901                 mov     rsi, rbx
.text:0000000000017904                 mov     rdi, r14
.text:0000000000017907                 mov     [rbx+50h], rax
.text:000000000001790B                 call    re_acquire_state_context
.text:0000000000017910                 mov     ecx, 6
.text:0000000000017915                 mov     [rbx+58h], rax
.text:0000000000017919                 mov     rdx, r12
.text:000000000001791C                 mov     rsi, rbx
.text:000000000001791F                 mov     rdi, r14
.text:0000000000017922                 call    re_acquire_state_context
.text:0000000000017927                 cmp     qword ptr [rbx+50h], 0
.text:000000000001792C                 mov     [rbx+60h], rax
.text:0000000000017930                 jz      short loc_17942
.text:0000000000017932                 cmp     qword ptr [rbx+58h], 0
.text:0000000000017937                 jz      short loc_17942
.text:0000000000017939                 test    rax, rax
.text:000000000001793C                 jnz     loc_177F5
.text:0000000000017942
.text:0000000000017942 loc_17942:                              ; CODE XREF: re_compile_internal+CD9↑j
.text:0000000000017942                                         ; re_compile_internal+E30↑j ...
.text:0000000000017942                 mov     r15d, [rsp+158h+var_108]
.text:0000000000017947                 jmp     loc_177FF
.text:000000000001794C ; ---------------------------------------------------------------------------
.text:000000000001794C
.text:000000000001794C loc_1794C:                              ; CODE XREF: re_compile_internal+85B↑j
.text:000000000001794C                 mov     rax, [rdx+20h]
.text:0000000000017950                 mov     r9, [rax+38h]
.text:0000000000017954                 jmp     loc_17369
.text:0000000000017959 ; ---------------------------------------------------------------------------
.text:0000000000017959
.text:0000000000017959 loc_17959:                              ; CODE XREF: re_compile_internal+846↑j
.text:0000000000017959                 mov     rax, [rdx+20h]
.text:000000000001795D                 mov     rcx, [rax+38h]
.text:0000000000017961                 jmp     loc_17354
.text:0000000000017966 ; ---------------------------------------------------------------------------
.text:0000000000017966
.text:0000000000017966 loc_17966:                              ; CODE XREF: re_compile_internal+6C↑j
.text:0000000000017966                 mov     rdi, rbx        ; ptr
.text:0000000000017969                 mov     esi, 0E8h       ; size
.text:000000000001796E                 call    _realloc
.text:0000000000017973                 test    rax, rax
.text:0000000000017976                 mov     rbx, rax
.text:0000000000017979                 jz      loc_17B11
.text:000000000001797F                 mov     rax, [rsp+158h+var_150]
.text:0000000000017984                 mov     qword ptr [rax+8], 0E8h
.text:000000000001798C                 mov     [rax], rbx
.text:000000000001798F                 jmp     loc_16B72
.text:0000000000017994 ; ---------------------------------------------------------------------------
.text:0000000000017994
.text:0000000000017994 loc_17994:                              ; CODE XREF: re_compile_internal+8E6↑j
.text:0000000000017994                 mov     [rax], rcx
.text:0000000000017997                 mov     [rax+8], r9
.text:000000000001799B                 jmp     loc_172B5
.text:00000000000179A0 ; ---------------------------------------------------------------------------
.text:00000000000179A0
.text:00000000000179A0 loc_179A0:                              ; CODE XREF: re_compile_internal+2E9↑j
.text:00000000000179A0                                         ; re_compile_internal+309↑j
.text:00000000000179A0                 mov     [rsp+158h+var_10C], 0
.text:00000000000179A8                 jmp     loc_16F58
.text:00000000000179AD ; ---------------------------------------------------------------------------
.text:00000000000179AD
.text:00000000000179AD loc_179AD:                              ; CODE XREF: re_compile_internal+8D8↑j
.text:00000000000179AD                 mov     qword ptr [r10+8], 1
.text:00000000000179B5                 mov     [rax], rcx
.text:00000000000179B8                 jmp     loc_172B5
.text:00000000000179BD ; ---------------------------------------------------------------------------
.text:00000000000179BD
.text:00000000000179BD loc_179BD:                              ; CODE XREF: re_compile_internal+2CB↑j
.text:00000000000179BD                 mov     rdi, rbp
.text:00000000000179C0                 call    build_upper_buffer
.text:00000000000179C5                 mov     [rsp+158h+var_10C], 0
.text:00000000000179CD                 jmp     loc_16F58
.text:00000000000179D2 ; ---------------------------------------------------------------------------
.text:00000000000179D2
.text:00000000000179D2 loc_179D2:                              ; CODE XREF: re_compile_internal+538↑j
.text:00000000000179D2                 mov     [rsp+158h+var_10C], 0Ch
.text:00000000000179DA                 mov     qword ptr [rbx+68h], 0
.text:00000000000179E2                 jmp     loc_16E2C
.text:00000000000179E7 ; ---------------------------------------------------------------------------
.text:00000000000179E7
.text:00000000000179E7 loc_179E7:                              ; CODE XREF: re_compile_internal+4BE↑j
.text:00000000000179E7                 test    rax, rax
.text:00000000000179EA                 jz      loc_17B1B
.text:00000000000179F0                 lea     r13, [r15+70h]
.text:00000000000179F4                 lea     r12, [rsp+158h+var_F8]
.text:00000000000179F9                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:00000000000179FD                 xor     ecx, ecx
.text:00000000000179FF                 xor     edx, edx
.text:0000000000017A01                 mov     rsi, r15
.text:0000000000017A04                 mov     r8, r12
.text:0000000000017A07                 mov     rdi, r13
.text:0000000000017A0A                 mov     [rsp+158h+size], rax
.text:0000000000017A0E                 mov     byte ptr [rsp+158h+var_F0], 2
.text:0000000000017A13                 call    create_token_tree_isra_16
.text:0000000000017A18                 mov     r9, [rsp+158h+size]
.text:0000000000017A1C                 mov     r11, rax
.text:0000000000017A1F                 jmp     loc_16FFB
.text:0000000000017A24 ; ---------------------------------------------------------------------------
.text:0000000000017A24
.text:0000000000017A24 loc_17A24:                              ; CODE XREF: re_compile_internal+633↑j
.text:0000000000017A24                                         ; re_compile_internal+657↑j
.text:0000000000017A24                 call    _free
.text:0000000000017A29                 mov     qword ptr [r13+0E0h], 0
.text:0000000000017A34                 jmp     loc_1715D
.text:0000000000017A39 ; ---------------------------------------------------------------------------
.text:0000000000017A39
.text:0000000000017A39 loc_17A39:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000017A39                                         ; DATA XREF: .rodata:jpt_178D3↓o
.text:0000000000017A39                 mov     r8d, eax        ; jumptable 00000000000178D3 case 5
.text:0000000000017A3C
.text:0000000000017A3C loc_17A3C:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000017A3C                                         ; re_compile_internal+F97↓j ...
.text:0000000000017A3C                 add     rdx, 1          ; jumptable 00000000000178D3 cases 2,4,8-11
.text:0000000000017A40                 add     rcx, 10h
.text:0000000000017A44                 cmp     rdx, r10
.text:0000000000017A47                 jnz     loc_178BE
.text:0000000000017A4D                 or      r14b, r8b
.text:0000000000017A50                 jz      loc_17B5A
.text:0000000000017A56                 mov     rax, rdx
.text:0000000000017A59                 shl     rax, 4
.text:0000000000017A5D                 add     rax, rsi
.text:0000000000017A60                 jmp     short loc_17A78
.text:0000000000017A62 ; ---------------------------------------------------------------------------
.text:0000000000017A62
.text:0000000000017A62 loc_17A62:                              ; CODE XREF: re_compile_internal+F7F↓j
.text:0000000000017A62                 cmp     dl, 5
.text:0000000000017A65                 jnz     short loc_17A6B
.text:0000000000017A67                 mov     byte ptr [rsi+8], 7
.text:0000000000017A6B
.text:0000000000017A6B loc_17A6B:                              ; CODE XREF: re_compile_internal+F65↑j
.text:0000000000017A6B                                         ; re_compile_internal+F84↓j ...
.text:0000000000017A6B                 add     rsi, 10h
.text:0000000000017A6F                 cmp     rax, rsi
.text:0000000000017A72                 jz      loc_17B57
.text:0000000000017A78
.text:0000000000017A78 loc_17A78:                              ; CODE XREF: re_compile_internal+F60↑j
.text:0000000000017A78                 movzx   edx, byte ptr [rsi+8]
.text:0000000000017A7C                 cmp     dl, 1
.text:0000000000017A7F                 jnz     short loc_17A62
.text:0000000000017A81                 cmp     byte ptr [rsi], 0
.text:0000000000017A84                 jns     short loc_17A6B
.text:0000000000017A86                 and     byte ptr [rsi+0Ah], 0DFh
.text:0000000000017A8A                 jmp     short loc_17A6B
.text:0000000000017A8A ; ---------------------------------------------------------------------------
.text:0000000000017A8C                 align 10h
.text:0000000000017A90
.text:0000000000017A90 loc_17A90:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000017A90                                         ; DATA XREF: .rodata:jpt_178D3↓o
.text:0000000000017A90                 cmp     byte ptr [rcx], 0 ; jumptable 00000000000178D3 case 1
.text:0000000000017A93                 cmovs   r14d, eax
.text:0000000000017A97                 jmp     short loc_17A3C ; jumptable 00000000000178D3 cases 2,4,8-11
.text:0000000000017A99 ; ---------------------------------------------------------------------------
.text:0000000000017A99
.text:0000000000017A99 loc_17A99:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000017A99                                         ; DATA XREF: .rodata:jpt_178D3↓o
.text:0000000000017A99                 mov     edi, [rcx]      ; jumptable 00000000000178D3 case 12
.text:0000000000017A9B                 cmp     edi, 20h ; ' '
.text:0000000000017A9E                 jz      short loc_17A3C ; jumptable 00000000000178D3 cases 2,4,8-11
.text:0000000000017AA0                 jbe     loc_17B49
.text:0000000000017AA6                 cmp     edi, 40h ; '@'
.text:0000000000017AA9                 jz      short loc_17A3C ; jumptable 00000000000178D3 cases 2,4,8-11
.text:0000000000017AAB                 add     edi, 0FFFFFF80h
.text:0000000000017AAE                 jz      short loc_17A3C ; jumptable 00000000000178D3 cases 2,4,8-11
.text:0000000000017AB0                 jmp     loc_176AE       ; jumptable 00000000000178D3 case 6
.text:0000000000017AB0 ; ---------------------------------------------------------------------------
.text:0000000000017AB5                 align 8
.text:0000000000017AB8
.text:0000000000017AB8 loc_17AB8:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000017AB8                                         ; DATA XREF: .rodata:jpt_178D3↓o
.text:0000000000017AB8                 mov     rdi, [rcx]      ; jumptable 00000000000178D3 case 3
.text:0000000000017ABB                 cmp     qword ptr [rdi+10h], 0
.text:0000000000017AC0                 jnz     loc_176AE       ; jumptable 00000000000178D3 case 6
.text:0000000000017AC6                 cmp     qword ptr [rdi+18h], 0
.text:0000000000017ACB                 jz      loc_17A3C       ; jumptable 00000000000178D3 cases 2,4,8-11
.text:0000000000017AD1                 jmp     loc_176AE       ; jumptable 00000000000178D3 case 6
.text:0000000000017AD1 ; ---------------------------------------------------------------------------
.text:0000000000017AD6                 align 20h
.text:0000000000017AE0
.text:0000000000017AE0 loc_17AE0:                              ; CODE XREF: re_compile_internal+C9E↑j
.text:0000000000017AE0                 mov     r15d, eax
.text:0000000000017AE3                 jmp     loc_177FF
.text:0000000000017AE8 ; ---------------------------------------------------------------------------
.text:0000000000017AE8
.text:0000000000017AE8 loc_17AE8:                              ; CODE XREF: re_compile_internal+93E↑j
.text:0000000000017AE8                 mov     qword ptr [r15+8], 0
.text:0000000000017AF0                 mov     qword ptr [r15], 0
.text:0000000000017AF7                 jmp     loc_1766A
.text:0000000000017AFC ; ---------------------------------------------------------------------------
.text:0000000000017AFC
.text:0000000000017AFC loc_17AFC:                              ; CODE XREF: re_compile_internal+AB0↑j
.text:0000000000017AFC                 mov     rax, [rsp+158h+var_150]
.text:0000000000017B01                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000017B09                 mov     r13, [rax]
.text:0000000000017B0C                 jmp     loc_16E2C
.text:0000000000017B11 ; ---------------------------------------------------------------------------
.text:0000000000017B11
.text:0000000000017B11 loc_17B11:                              ; CODE XREF: re_compile_internal+E79↑j
.text:0000000000017B11                 mov     eax, 0Ch
.text:0000000000017B16                 jmp     loc_16E9C
.text:0000000000017B1B ; ---------------------------------------------------------------------------
.text:0000000000017B1B
.text:0000000000017B1B loc_17B1B:                              ; CODE XREF: re_compile_internal+EEA↑j
.text:0000000000017B1B                 mov     rax, [rsp+158h+var_150]
.text:0000000000017B20                 mov     qword ptr [rbx+68h], 0
.text:0000000000017B28                 mov     r13, [rax]
.text:0000000000017B2B                 jmp     loc_16E2C
.text:0000000000017B30 ; ---------------------------------------------------------------------------
.text:0000000000017B30
.text:0000000000017B30 loc_17B30:                              ; CODE XREF: re_compile_internal+9E2↑j
.text:0000000000017B30                 mov     qword ptr [rcx+8], 0
.text:0000000000017B38                 mov     qword ptr [rcx], 0
.text:0000000000017B3F                 mov     eax, 0Ch
.text:0000000000017B44                 jmp     loc_16E20
.text:0000000000017B49 ; ---------------------------------------------------------------------------
.text:0000000000017B49
.text:0000000000017B49 loc_17B49:                              ; CODE XREF: re_compile_internal+FA0↑j
.text:0000000000017B49                 cmp     edi, 10h
.text:0000000000017B4C                 jz      loc_17A3C       ; jumptable 00000000000178D3 cases 2,4,8-11
.text:0000000000017B52                 jmp     loc_176AE       ; jumptable 00000000000178D3 case 6
.text:0000000000017B57 ; ---------------------------------------------------------------------------
.text:0000000000017B57
.text:0000000000017B57 loc_17B57:                              ; CODE XREF: re_compile_internal+F72↑j
.text:0000000000017B57                 mov     r14d, r8d
.text:0000000000017B5A
.text:0000000000017B5A loc_17B5A:                              ; CODE XREF: re_compile_internal+DA6↑j
.text:0000000000017B5A                                         ; re_compile_internal+F50↑j
.text:0000000000017B5A                 cmp     qword ptr [rbx+98h], 0
.text:0000000000017B62                 movzx   edx, byte ptr [rbx+0B0h]
.text:0000000000017B69                 mov     dword ptr [rbx+0B4h], 1
.text:0000000000017B73                 setnle  al
.text:0000000000017B76                 and     edx, 0FFFFFFF9h
.text:0000000000017B79                 or      eax, r14d
.text:0000000000017B7C                 and     eax, 1
.text:0000000000017B7F                 add     eax, eax
.text:0000000000017B81                 or      eax, edx
.text:0000000000017B83                 mov     [rbx+0B0h], al
.text:0000000000017B89                 jmp     loc_176AE       ; jumptable 00000000000178D3 case 6
.text:0000000000017B8E ; ---------------------------------------------------------------------------
.text:0000000000017B8E
.text:0000000000017B8E def_178D3:                              ; CODE XREF: re_compile_internal+DC2↑j
.text:0000000000017B8E                                         ; re_compile_internal+DD3↑j
.text:0000000000017B8E                                         ; DATA XREF: ...
.text:0000000000017B8E                 call    _abort          ; jumptable 00000000000178D3 default case, cases 0,7
.text:0000000000017B93 ; ---------------------------------------------------------------------------
.text:0000000000017B93
.text:0000000000017B93 loc_17B93:                              ; CODE XREF: re_compile_internal+875↑j
.text:0000000000017B93                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000017B9A                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000017BA1                 lea     rdi, aRight1    ; "right > -1"
.text:0000000000017BA8                 mov     edx, 5B0h       ; line
.text:0000000000017BAD                 call    ___assert_fail
.text:0000000000017BB2 ; ---------------------------------------------------------------------------
.text:0000000000017BB2
.text:0000000000017BB2 loc_17BB2:                              ; CODE XREF: re_compile_internal+79B↑j
.text:0000000000017BB2                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000017BB9                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000017BC0                 lea     rdi, aIsEpsilonNodeN ; "!IS_EPSILON_NODE (node->token.type)"
.text:0000000000017BC7                 mov     edx, 5C2h       ; line
.text:0000000000017BCC                 call    ___assert_fail
.text:0000000000017BD1 ; ---------------------------------------------------------------------------
.text:0000000000017BD1
.text:0000000000017BD1 loc_17BD1:                              ; CODE XREF: re_compile_internal+86C↑j
.text:0000000000017BD1                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000017BD8                 lea     rsi, aCoreutils831Li_3 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000017BDF                 lea     rdi, aLeft1     ; "left > -1"
.text:0000000000017BE6                 mov     edx, 5AFh       ; line
.text:0000000000017BEB                 call    ___assert_fail
.text:0000000000017BF0 ; ---------------------------------------------------------------------------
.text:0000000000017BF0
.text:0000000000017BF0 loc_17BF0:                              ; CODE XREF: re_compile_internal+3AD↑j
.text:0000000000017BF0                 call    ___stack_chk_fail
.text:0000000000017BF0 ; } // starts at 16B00
.text:0000000000017BF0 re_compile_internal endp
.text:0000000000017BF0
.text:0000000000017BF0 ; ---------------------------------------------------------------------------
.text:0000000000017BF5                 align 20h
.text:0000000000017C00
.text:0000000000017C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000017C00
.text:0000000000017C00
.text:0000000000017C00                 public rpl_re_compile_pattern
.text:0000000000017C00 rpl_re_compile_pattern proc near        ; CODE XREF: compile_regex+4F↑p
.text:0000000000017C00 ; __unwind {
.text:0000000000017C00                 sub     rsp, 8
.text:0000000000017C04                 mov     rcx, cs:rpl_re_syntax_options
.text:0000000000017C0B                 mov     r8, rdi
.text:0000000000017C0E                 mov     rdi, rdx
.text:0000000000017C11                 mov     rax, rcx
.text:0000000000017C14                 shr     rax, 19h
.text:0000000000017C18                 and     eax, 1
.text:0000000000017C1B                 shl     eax, 4
.text:0000000000017C1E                 mov     edx, eax
.text:0000000000017C20                 movzx   eax, byte ptr [rdi+38h]
.text:0000000000017C24                 and     eax, 0FFFFFFEFh
.text:0000000000017C27                 or      eax, edx
.text:0000000000017C29                 mov     rdx, rsi
.text:0000000000017C2C                 mov     rsi, r8
.text:0000000000017C2F                 or      eax, 0FFFFFF80h
.text:0000000000017C32                 mov     [rdi+38h], al
.text:0000000000017C35                 call    re_compile_internal
.text:0000000000017C3A                 test    eax, eax
.text:0000000000017C3C                 jz      short loc_17C68
.text:0000000000017C3E                 lea     rdx, __re_error_msgid_idx
.text:0000000000017C45                 cdqe
.text:0000000000017C47                 lea     rsi, __re_error_msgid ; "Success"
.text:0000000000017C4E                 xor     edi, edi        ; domainname
.text:0000000000017C50                 add     rsi, [rdx+rax*8] ; msgid
.text:0000000000017C54                 mov     edx, 5          ; category
.text:0000000000017C59                 add     rsp, 8
.text:0000000000017C5D                 jmp     _dcgettext
.text:0000000000017C5D ; ---------------------------------------------------------------------------
.text:0000000000017C62                 align 8
.text:0000000000017C68
.text:0000000000017C68 loc_17C68:                              ; CODE XREF: rpl_re_compile_pattern+3C↑j
.text:0000000000017C68                 xor     eax, eax
.text:0000000000017C6A                 add     rsp, 8
.text:0000000000017C6E                 retn
.text:0000000000017C6E ; } // starts at 17C00
.text:0000000000017C6E rpl_re_compile_pattern endp
.text:0000000000017C6E
.text:0000000000017C6E ; ---------------------------------------------------------------------------
.text:0000000000017C6F                 align 10h
.text:0000000000017C70
.text:0000000000017C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000017C70
.text:0000000000017C70
.text:0000000000017C70                 public rpl_re_set_syntax
.text:0000000000017C70 rpl_re_set_syntax proc near
.text:0000000000017C70 ; __unwind {
.text:0000000000017C70                 mov     rax, cs:rpl_re_syntax_options
.text:0000000000017C77                 mov     cs:rpl_re_syntax_options, rdi
.text:0000000000017C7E                 retn
.text:0000000000017C7E ; } // starts at 17C70
.text:0000000000017C7E rpl_re_set_syntax endp
.text:0000000000017C7E
.text:0000000000017C7E ; ---------------------------------------------------------------------------
.text:0000000000017C7F                 align 20h
.text:0000000000017C80
.text:0000000000017C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000017C80
.text:0000000000017C80
.text:0000000000017C80                 public rpl_re_compile_fastmap
.text:0000000000017C80 rpl_re_compile_fastmap proc near        ; CODE XREF: compile_regex+60↑j
.text:0000000000017C80                                         ; re_search_stub+297↓p ...
.text:0000000000017C80 ; __unwind {
.text:0000000000017C80                 push    r12
.text:0000000000017C82                 push    rbp
.text:0000000000017C83                 xor     eax, eax
.text:0000000000017C85                 push    rbx
.text:0000000000017C86                 mov     rbp, [rdi+20h]
.text:0000000000017C8A                 mov     rbx, rdi
.text:0000000000017C8D                 mov     r12, [rdi]
.text:0000000000017C90                 lea     rdi, [rbp+8]
.text:0000000000017C94                 mov     rcx, rbp
.text:0000000000017C97                 mov     qword ptr [rbp+0], 0
.text:0000000000017C9F                 mov     qword ptr [rbp+0F8h], 0
.text:0000000000017CAA                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000017CAE                 sub     rcx, rdi
.text:0000000000017CB1                 add     ecx, 100h
.text:0000000000017CB7                 shr     ecx, 3
.text:0000000000017CBA                 rep stosq
.text:0000000000017CBD                 mov     rcx, rbp
.text:0000000000017CC0                 mov     rdi, rbx
.text:0000000000017CC3                 mov     rsi, [r12+48h]
.text:0000000000017CC8                 lea     rdx, [rsi+18h]
.text:0000000000017CCC                 add     rsi, 10h
.text:0000000000017CD0                 call    re_compile_fastmap_iter_isra_30
.text:0000000000017CD5                 mov     rax, [r12+50h]
.text:0000000000017CDA                 cmp     [r12+48h], rax
.text:0000000000017CDF                 jz      short loc_17CF9
.text:0000000000017CE1                 lea     rdx, [rax+18h]
.text:0000000000017CE5                 lea     rsi, [rax+10h]
.text:0000000000017CE9                 mov     rcx, rbp
.text:0000000000017CEC                 mov     rdi, rbx
.text:0000000000017CEF                 call    re_compile_fastmap_iter_isra_30
.text:0000000000017CF4                 mov     rax, [r12+48h]
.text:0000000000017CF9
.text:0000000000017CF9 loc_17CF9:                              ; CODE XREF: rpl_re_compile_fastmap+5F↑j
.text:0000000000017CF9                 mov     rsi, [r12+58h]
.text:0000000000017CFE                 cmp     rsi, rax
.text:0000000000017D01                 jz      short loc_17D1B
.text:0000000000017D03                 lea     rdx, [rsi+18h]
.text:0000000000017D07                 mov     rcx, rbp
.text:0000000000017D0A                 add     rsi, 10h
.text:0000000000017D0E                 mov     rdi, rbx
.text:0000000000017D11                 call    re_compile_fastmap_iter_isra_30
.text:0000000000017D16                 mov     rax, [r12+48h]
.text:0000000000017D1B
.text:0000000000017D1B loc_17D1B:                              ; CODE XREF: rpl_re_compile_fastmap+81↑j
.text:0000000000017D1B                 mov     rsi, [r12+60h]
.text:0000000000017D20                 cmp     rsi, rax
.text:0000000000017D23                 jz      short loc_17D38
.text:0000000000017D25                 lea     rdx, [rsi+18h]
.text:0000000000017D29                 mov     rcx, rbp
.text:0000000000017D2C                 add     rsi, 10h
.text:0000000000017D30                 mov     rdi, rbx
.text:0000000000017D33                 call    re_compile_fastmap_iter_isra_30
.text:0000000000017D38
.text:0000000000017D38 loc_17D38:                              ; CODE XREF: rpl_re_compile_fastmap+A3↑j
.text:0000000000017D38                 or      byte ptr [rbx+38h], 8
.text:0000000000017D3C                 xor     eax, eax
.text:0000000000017D3E                 pop     rbx
.text:0000000000017D3F                 pop     rbp
.text:0000000000017D40                 pop     r12
.text:0000000000017D42                 retn
.text:0000000000017D42 ; } // starts at 17C80
.text:0000000000017D42 rpl_re_compile_fastmap endp
.text:0000000000017D42
.text:0000000000017D42 ; ---------------------------------------------------------------------------
.text:0000000000017D43                 align 10h
.text:0000000000017D50
.text:0000000000017D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000017D50
.text:0000000000017D50
.text:0000000000017D50 re_search_stub  proc near               ; CODE XREF: re_search_2_stub+88↓p
.text:0000000000017D50                                         ; rpl_re_match+E↓p ...
.text:0000000000017D50
.text:0000000000017D50 size            = qword ptr -60h
.text:0000000000017D50 ptr             = qword ptr -58h
.text:0000000000017D50 var_50          = qword ptr -50h
.text:0000000000017D50 var_48          = qword ptr -48h
.text:0000000000017D50 var_40          = dword ptr -40h
.text:0000000000017D50 var_3C          = dword ptr -3Ch
.text:0000000000017D50 arg_0           = qword ptr  8
.text:0000000000017D50 arg_8           = dword ptr  10h
.text:0000000000017D50
.text:0000000000017D50 ; __unwind {
.text:0000000000017D50                 push    r15
.text:0000000000017D52                 push    r14
.text:0000000000017D54                 mov     rax, r8
.text:0000000000017D57                 push    r13
.text:0000000000017D59                 push    r12
.text:0000000000017D5B                 add     r8, rcx
.text:0000000000017D5E                 push    rbp
.text:0000000000017D5F                 push    rbx
.text:0000000000017D60                 sub     rsp, 38h
.text:0000000000017D64                 test    rcx, rcx
.text:0000000000017D67                 mov     ebx, [rsp+68h+arg_8]
.text:0000000000017D6B                 mov     r12, [rsp+68h+arg_0]
.text:0000000000017D70                 mov     [rsp+68h+var_40], ebx
.text:0000000000017D74                 js      loc_180B0
.text:0000000000017D7A                 cmp     rcx, rdx
.text:0000000000017D7D                 jg      loc_180B0
.text:0000000000017D83                 cmp     r8, rdx
.text:0000000000017D86                 mov     rbx, rcx
.text:0000000000017D89                 mov     r15, rdi
.text:0000000000017D8C                 jg      loc_18010
.text:0000000000017D92                 test    rax, rax
.text:0000000000017D95                 js      short loc_17DA0
.text:0000000000017D97                 cmp     rcx, r8
.text:0000000000017D9A                 jg      loc_18010
.text:0000000000017DA0
.text:0000000000017DA0 loc_17DA0:                              ; CODE XREF: re_search_stub+45↑j
.text:0000000000017DA0                 test    r8, r8
.text:0000000000017DA3                 js      loc_18088
.text:0000000000017DA9                 test    rax, rax
.text:0000000000017DAC                 jns     short loc_17DB7
.text:0000000000017DAE                 cmp     rbx, r8
.text:0000000000017DB1                 jle     loc_18088
.text:0000000000017DB7
.text:0000000000017DB7 loc_17DB7:                              ; CODE XREF: re_search_stub+5C↑j
.text:0000000000017DB7                                         ; re_search_stub+2C3↓j
.text:0000000000017DB7                 movzx   eax, byte ptr [r15+38h]
.text:0000000000017DBC                 mov     r13d, eax
.text:0000000000017DBF                 shr     r13b, 5
.text:0000000000017DC3                 mov     edi, r13d
.text:0000000000017DC6                 and     edi, 3
.text:0000000000017DC9                 cmp     r8, rbx
.text:0000000000017DCC                 mov     [rsp+68h+var_3C], edi
.text:0000000000017DD0                 jle     short loc_17DE1
.text:0000000000017DD2                 cmp     qword ptr [r15+20h], 0
.text:0000000000017DD7                 jz      short loc_17DE1
.text:0000000000017DD9                 test    al, 8
.text:0000000000017DDB                 jz      loc_17FD0
.text:0000000000017DE1
.text:0000000000017DE1 loc_17DE1:                              ; CODE XREF: re_search_stub+80↑j
.text:0000000000017DE1                                         ; re_search_stub+87↑j ...
.text:0000000000017DE1                 test    al, 10h
.text:0000000000017DE3                 jnz     loc_17FB0
.text:0000000000017DE9                 test    r12, r12
.text:0000000000017DEC                 jz      loc_17FB0
.text:0000000000017DF2                 and     eax, 6
.text:0000000000017DF5                 mov     rcx, [r15+30h]
.text:0000000000017DF9                 cmp     al, 4
.text:0000000000017DFB                 jz      loc_17F90
.text:0000000000017E01
.text:0000000000017E01 loc_17E01:                              ; CODE XREF: re_search_stub+247↓j
.text:0000000000017E01                 lea     r14, [rcx+1]
.text:0000000000017E05                 mov     r13, r14
.text:0000000000017E08
.text:0000000000017E08 loc_17E08:                              ; CODE XREF: re_search_stub+253↓j
.text:0000000000017E08                 mov     rdi, r14
.text:0000000000017E0B                 shl     rdi, 4          ; size
.text:0000000000017E0F
.text:0000000000017E0F loc_17E0F:                              ; CODE XREF: re_search_stub+274↓j
.text:0000000000017E0F                 mov     [rsp+68h+var_48], r9
.text:0000000000017E14                 mov     [rsp+68h+var_50], rdx
.text:0000000000017E19                 mov     [rsp+68h+ptr], rsi
.text:0000000000017E1E                 mov     [rsp+68h+size], r8
.text:0000000000017E23                 call    _malloc
.text:0000000000017E28                 test    rax, rax
.text:0000000000017E2B                 mov     rbp, rax
.text:0000000000017E2E                 jz      loc_180C0
.text:0000000000017E34                 sub     rsp, 8
.text:0000000000017E38                 mov     rcx, rbx
.text:0000000000017E3B                 mov     rdi, r15
.text:0000000000017E3E                 mov     eax, [rsp+70h+var_3C]
.text:0000000000017E42                 push    rax
.text:0000000000017E43                 push    rbp
.text:0000000000017E44                 push    r14
.text:0000000000017E46                 mov     r9, [rsp+88h+var_48]
.text:0000000000017E4B                 mov     r8, [rsp+88h+size]
.text:0000000000017E50                 mov     rdx, [rsp+88h+var_50]
.text:0000000000017E55                 mov     rsi, [rsp+88h+ptr]
.text:0000000000017E5A                 call    re_search_internal
.text:0000000000017E5F                 add     rsp, 20h
.text:0000000000017E63                 test    eax, eax
.text:0000000000017E65                 jz      short loc_17E98
.text:0000000000017E67                 cmp     eax, 1
.text:0000000000017E6A                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000017E71                 jz      short loc_17E7A
.text:0000000000017E73
.text:0000000000017E73 loc_17E73:                              ; CODE XREF: re_search_stub+212↓j
.text:0000000000017E73                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000017E7A
.text:0000000000017E7A loc_17E7A:                              ; CODE XREF: re_search_stub+121↑j
.text:0000000000017E7A                                         ; re_search_stub+221↓j ...
.text:0000000000017E7A                 mov     rdi, rbp        ; ptr
.text:0000000000017E7D                 call    _free
.text:0000000000017E82
.text:0000000000017E82 loc_17E82:                              ; CODE XREF: re_search_stub+367↓j
.text:0000000000017E82                                         ; re_search_stub+377↓j
.text:0000000000017E82                 add     rsp, 38h
.text:0000000000017E86                 mov     rax, r12
.text:0000000000017E89                 pop     rbx
.text:0000000000017E8A                 pop     rbp
.text:0000000000017E8B                 pop     r12
.text:0000000000017E8D                 pop     r13
.text:0000000000017E8F                 pop     r14
.text:0000000000017E91                 pop     r15
.text:0000000000017E93                 retn
.text:0000000000017E93 ; ---------------------------------------------------------------------------
.text:0000000000017E94                 align 8
.text:0000000000017E98
.text:0000000000017E98 loc_17E98:                              ; CODE XREF: re_search_stub+115↑j
.text:0000000000017E98                 test    r12, r12
.text:0000000000017E9B                 jz      loc_17F68
.text:0000000000017EA1                 movzx   eax, byte ptr [r15+38h]
.text:0000000000017EA6                 lea     rdx, [r13+1]
.text:0000000000017EAA                 shr     al, 1
.text:0000000000017EAC                 and     eax, 3
.text:0000000000017EAF                 jz      loc_18020
.text:0000000000017EB5                 cmp     eax, 1
.text:0000000000017EB8                 jz      loc_180D0
.text:0000000000017EBE                 cmp     eax, 2
.text:0000000000017EC1                 jnz     loc_181B0
.text:0000000000017EC7                 cmp     r14, [r12]
.text:0000000000017ECB                 ja      loc_18191
.text:0000000000017ED1                 mov     r9d, 2
.text:0000000000017ED7
.text:0000000000017ED7 loc_17ED7:                              ; CODE XREF: re_search_stub+32C↓j
.text:0000000000017ED7                                         ; re_search_stub+38A↓j ...
.text:0000000000017ED7                 test    r13, r13
.text:0000000000017EDA                 jle     loc_18148
.text:0000000000017EE0                 mov     r8, [r12+8]
.text:0000000000017EE5                 mov     rdi, [r12+10h]
.text:0000000000017EEA                 lea     rsi, ds:0[r13*8]
.text:0000000000017EF2                 mov     rdx, r13
.text:0000000000017EF5                 xor     eax, eax
.text:0000000000017EF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000017F00
.text:0000000000017F00 loc_17F00:                              ; CODE XREF: re_search_stub+1C9↓j
.text:0000000000017F00                 mov     rcx, [rbp+rax*2+0]
.text:0000000000017F05                 mov     [r8+rax], rcx
.text:0000000000017F09                 mov     rcx, [rbp+rax*2+8]
.text:0000000000017F0E                 mov     [rdi+rax], rcx
.text:0000000000017F12                 add     rax, 8
.text:0000000000017F16                 cmp     rsi, rax
.text:0000000000017F19                 jnz     short loc_17F00
.text:0000000000017F1B
.text:0000000000017F1B loc_17F1B:                              ; CODE XREF: re_search_stub+3FD↓j
.text:0000000000017F1B                 cmp     [r12], rdx
.text:0000000000017F1F                 jbe     short loc_17F4D
.text:0000000000017F21                 mov     rsi, [r12+10h]
.text:0000000000017F26                 mov     rcx, [r12+8]
.text:0000000000017F2B                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000017F32                 nop     word ptr [rax+rax+00h]
.text:0000000000017F38
.text:0000000000017F38 loc_17F38:                              ; CODE XREF: re_search_stub+1FB↓j
.text:0000000000017F38                 mov     [rsi+rdx*8], rax
.text:0000000000017F3C                 add     r13, 1
.text:0000000000017F40                 mov     [rcx+rdx*8], rax
.text:0000000000017F44                 cmp     r13, [r12]
.text:0000000000017F48                 mov     rdx, r13
.text:0000000000017F4B                 jb      short loc_17F38
.text:0000000000017F4D
.text:0000000000017F4D loc_17F4D:                              ; CODE XREF: re_search_stub+1CF↑j
.text:0000000000017F4D                                         ; re_search_stub+40D↓j ...
.text:0000000000017F4D                 movzx   eax, byte ptr [r15+38h]
.text:0000000000017F52                 lea     r13d, [r9+r9]
.text:0000000000017F56                 and     eax, 0FFFFFFF9h
.text:0000000000017F59                 or      eax, r13d
.text:0000000000017F5C                 test    al, 6
.text:0000000000017F5E                 mov     [r15+38h], al
.text:0000000000017F62                 jz      loc_17E73
.text:0000000000017F68
.text:0000000000017F68 loc_17F68:                              ; CODE XREF: re_search_stub+14B↑j
.text:0000000000017F68                 cmp     byte ptr [rsp+68h+var_40], 0
.text:0000000000017F6D                 mov     r12, [rbp+0]
.text:0000000000017F71                 jz      loc_17E7A
.text:0000000000017F77                 cmp     r12, rbx
.text:0000000000017F7A                 jnz     loc_18172
.text:0000000000017F80                 mov     r12, [rbp+8]
.text:0000000000017F84                 sub     r12, rbx
.text:0000000000017F87                 jmp     loc_17E7A
.text:0000000000017F87 ; ---------------------------------------------------------------------------
.text:0000000000017F8C                 align 10h
.text:0000000000017F90
.text:0000000000017F90 loc_17F90:                              ; CODE XREF: re_search_stub+AB↑j
.text:0000000000017F90                 mov     r14, [r12]
.text:0000000000017F94                 cmp     r14, rcx
.text:0000000000017F97                 ja      loc_17E01
.text:0000000000017F9D                 test    r14, r14
.text:0000000000017FA0                 mov     r13, r14
.text:0000000000017FA3                 jg      loc_17E08
.text:0000000000017FA9                 nop     dword ptr [rax+00000000h]
.text:0000000000017FB0
.text:0000000000017FB0 loc_17FB0:                              ; CODE XREF: re_search_stub+93↑j
.text:0000000000017FB0                                         ; re_search_stub+9C↑j
.text:0000000000017FB0                 mov     edi, 10h
.text:0000000000017FB5                 mov     r14d, 1
.text:0000000000017FBB                 mov     r13d, 1
.text:0000000000017FC1                 xor     r12d, r12d
.text:0000000000017FC4                 jmp     loc_17E0F
.text:0000000000017FC4 ; ---------------------------------------------------------------------------
.text:0000000000017FC9                 align 10h
.text:0000000000017FD0
.text:0000000000017FD0 loc_17FD0:                              ; CODE XREF: re_search_stub+8B↑j
.text:0000000000017FD0                 mov     rdi, r15
.text:0000000000017FD3                 mov     [rsp+68h+var_48], r9
.text:0000000000017FD8                 mov     [rsp+68h+var_50], rdx
.text:0000000000017FDD                 mov     [rsp+68h+ptr], rsi
.text:0000000000017FE2                 mov     [rsp+68h+size], r8
.text:0000000000017FE7                 call    rpl_re_compile_fastmap
.text:0000000000017FEC                 movzx   eax, byte ptr [r15+38h]
.text:0000000000017FF1                 mov     r9, [rsp+68h+var_48]
.text:0000000000017FF6                 mov     rdx, [rsp+68h+var_50]
.text:0000000000017FFB                 mov     rsi, [rsp+68h+ptr]
.text:0000000000018000                 mov     r8, [rsp+68h+size]
.text:0000000000018005                 jmp     loc_17DE1
.text:0000000000018005 ; ---------------------------------------------------------------------------
.text:000000000001800A                 align 10h
.text:0000000000018010
.text:0000000000018010 loc_18010:                              ; CODE XREF: re_search_stub+3C↑j
.text:0000000000018010                                         ; re_search_stub+4A↑j
.text:0000000000018010                 mov     r8, rdx
.text:0000000000018013                 jmp     loc_17DB7
.text:0000000000018013 ; ---------------------------------------------------------------------------
.text:0000000000018018                 align 20h
.text:0000000000018020
.text:0000000000018020 loc_18020:                              ; CODE XREF: re_search_stub+15F↑j
.text:0000000000018020                 lea     r14, ds:0[rdx*8]
.text:0000000000018028                 mov     [rsp+68h+size], rdx
.text:000000000001802D                 mov     rdi, r14        ; size
.text:0000000000018030                 call    _malloc
.text:0000000000018035                 test    rax, rax
.text:0000000000018038                 mov     [r12+8], rax
.text:000000000001803D                 mov     rdx, [rsp+68h+size]
.text:0000000000018042                 jz      loc_1815A
.text:0000000000018048                 mov     rdi, r14        ; size
.text:000000000001804B                 mov     [rsp+68h+size], rdx
.text:0000000000018050                 mov     [rsp+68h+ptr], rax
.text:0000000000018055                 call    _malloc
.text:000000000001805A                 test    rax, rax
.text:000000000001805D                 mov     [r12+10h], rax
.text:0000000000018062                 mov     rdx, [rsp+68h+size]
.text:0000000000018067                 mov     rcx, [rsp+68h+ptr]
.text:000000000001806C                 jz      loc_18152
.text:0000000000018072                 mov     [r12], rdx
.text:0000000000018076                 mov     r9d, 1
.text:000000000001807C                 jmp     loc_17ED7
.text:000000000001807C ; ---------------------------------------------------------------------------
.text:0000000000018081                 align 8
.text:0000000000018088
.text:0000000000018088 loc_18088:                              ; CODE XREF: re_search_stub+53↑j
.text:0000000000018088                                         ; re_search_stub+61↑j
.text:0000000000018088                 movzx   eax, byte ptr [r15+38h]
.text:000000000001808D                 xor     r8d, r8d
.text:0000000000018090                 mov     r13d, eax
.text:0000000000018093                 shr     r13b, 5
.text:0000000000018097                 mov     edi, r13d
.text:000000000001809A                 and     edi, 3
.text:000000000001809D                 mov     [rsp+68h+var_3C], edi
.text:00000000000180A1                 jmp     loc_17DE1
.text:00000000000180A1 ; ---------------------------------------------------------------------------
.text:00000000000180A6                 align 10h
.text:00000000000180B0
.text:00000000000180B0 loc_180B0:                              ; CODE XREF: re_search_stub+24↑j
.text:00000000000180B0                                         ; re_search_stub+2D↑j
.text:00000000000180B0                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:00000000000180B7                 jmp     loc_17E82
.text:00000000000180B7 ; ---------------------------------------------------------------------------
.text:00000000000180BC                 align 20h
.text:00000000000180C0
.text:00000000000180C0 loc_180C0:                              ; CODE XREF: re_search_stub+DE↑j
.text:00000000000180C0                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:00000000000180C7                 jmp     loc_17E82
.text:00000000000180C7 ; ---------------------------------------------------------------------------
.text:00000000000180CC                 align 10h
.text:00000000000180D0
.text:00000000000180D0 loc_180D0:                              ; CODE XREF: re_search_stub+168↑j
.text:00000000000180D0                 cmp     [r12], rdx
.text:00000000000180D4                 mov     r9d, 1
.text:00000000000180DA                 jnb     loc_17ED7
.text:00000000000180E0                 lea     rcx, ds:0[rdx*8]
.text:00000000000180E8                 mov     rdi, [r12+8]    ; ptr
.text:00000000000180ED                 mov     byte ptr [rsp+68h+var_50], r9b
.text:00000000000180F2                 mov     [rsp+68h+ptr], rdx
.text:00000000000180F7                 mov     rsi, rcx        ; size
.text:00000000000180FA                 mov     [rsp+68h+size], rcx
.text:00000000000180FF                 call    _realloc
.text:0000000000018104                 test    rax, rax
.text:0000000000018107                 mov     r14, rax
.text:000000000001810A                 jz      short loc_1815A
.text:000000000001810C                 mov     rcx, [rsp+68h+size]
.text:0000000000018111                 mov     rdi, [r12+10h]  ; ptr
.text:0000000000018116                 mov     rsi, rcx        ; size
.text:0000000000018119                 call    _realloc
.text:000000000001811E                 test    rax, rax
.text:0000000000018121                 mov     rdx, [rsp+68h+ptr]
.text:0000000000018126                 movzx   r9d, byte ptr [rsp+68h+var_50]
.text:000000000001812C                 jz      short loc_18162
.text:000000000001812E                 mov     [r12+8], r14
.text:0000000000018133                 mov     [r12+10h], rax
.text:0000000000018138                 mov     [r12], rdx
.text:000000000001813C                 jmp     loc_17ED7
.text:000000000001813C ; ---------------------------------------------------------------------------
.text:0000000000018141                 align 8
.text:0000000000018148
.text:0000000000018148 loc_18148:                              ; CODE XREF: re_search_stub+18A↑j
.text:0000000000018148                 xor     edx, edx
.text:000000000001814A                 xor     r13d, r13d
.text:000000000001814D                 jmp     loc_17F1B
.text:0000000000018152 ; ---------------------------------------------------------------------------
.text:0000000000018152
.text:0000000000018152 loc_18152:                              ; CODE XREF: re_search_stub+31C↑j
.text:0000000000018152                 mov     rdi, rcx        ; ptr
.text:0000000000018155                 call    _free
.text:000000000001815A
.text:000000000001815A loc_1815A:                              ; CODE XREF: re_search_stub+2F2↑j
.text:000000000001815A                                         ; re_search_stub+3BA↑j
.text:000000000001815A                 xor     r9d, r9d
.text:000000000001815D                 jmp     loc_17F4D
.text:0000000000018162 ; ---------------------------------------------------------------------------
.text:0000000000018162
.text:0000000000018162 loc_18162:                              ; CODE XREF: re_search_stub+3DC↑j
.text:0000000000018162                 mov     rdi, r14        ; ptr
.text:0000000000018165                 call    _free
.text:000000000001816A                 xor     r9d, r9d
.text:000000000001816D                 jmp     loc_17F4D
.text:0000000000018172 ; ---------------------------------------------------------------------------
.text:0000000000018172
.text:0000000000018172 loc_18172:                              ; CODE XREF: re_search_stub+22A↑j
.text:0000000000018172                 lea     rcx, __PRETTY_FUNCTION___7847 ; "re_search_stub"
.text:0000000000018179                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000018180                 lea     rdi, aPmatch0RmSoSta ; "pmatch[0].rm_so == start"
.text:0000000000018187                 mov     edx, 1BEh       ; line
.text:000000000001818C                 call    ___assert_fail
.text:0000000000018191 ; ---------------------------------------------------------------------------
.text:0000000000018191
.text:0000000000018191 loc_18191:                              ; CODE XREF: re_search_stub+17B↑j
.text:0000000000018191                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000018198                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001819F                 lea     rdi, aRegsNumRegsNre ; "regs->num_regs >= nregs"
.text:00000000000181A6                 mov     edx, 1FBh       ; line
.text:00000000000181AB                 call    ___assert_fail
.text:00000000000181B0 ; ---------------------------------------------------------------------------
.text:00000000000181B0
.text:00000000000181B0 loc_181B0:                              ; CODE XREF: re_search_stub+171↑j
.text:00000000000181B0                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:00000000000181B7                 lea     rsi, aCoreutils831Li_2 ; "../coreutils-8.31/lib/regexec.c"
.text:00000000000181BE                 lea     rdi, aRegsAllocatedR ; "regs_allocated == REGS_FIXED"
.text:00000000000181C5                 mov     edx, 1F9h       ; line
.text:00000000000181CA                 call    ___assert_fail
.text:00000000000181CA ; } // starts at 17D50
.text:00000000000181CA re_search_stub  endp
.text:00000000000181CA
.text:00000000000181CA ; ---------------------------------------------------------------------------
.text:00000000000181CF                 align 10h
.text:00000000000181D0
.text:00000000000181D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000181D0
.text:00000000000181D0
.text:00000000000181D0 re_search_2_stub proc near              ; CODE XREF: rpl_re_match_2+10↓p
.text:00000000000181D0                                         ; rpl_re_search_2+12↓p
.text:00000000000181D0
.text:00000000000181D0 src             = qword ptr -50h
.text:00000000000181D0 var_48          = qword ptr -48h
.text:00000000000181D0 var_3C          = dword ptr -3Ch
.text:00000000000181D0 arg_0           = qword ptr  8
.text:00000000000181D0 arg_8           = qword ptr  10h
.text:00000000000181D0 arg_10          = qword ptr  18h
.text:00000000000181D0 arg_18          = dword ptr  20h
.text:00000000000181D0
.text:00000000000181D0 ; __unwind {
.text:00000000000181D0                 push    r15
.text:00000000000181D2                 push    r14
.text:00000000000181D4                 push    r13
.text:00000000000181D6                 push    r12
.text:00000000000181D8                 mov     r12, rdi
.text:00000000000181DB                 push    rbp
.text:00000000000181DC                 push    rbx
.text:00000000000181DD                 mov     rbp, r8
.text:00000000000181E0                 mov     rbx, rdx
.text:00000000000181E3                 mov     rdx, rbp
.text:00000000000181E6                 sub     rsp, 28h
.text:00000000000181EA                 shr     rdx, 3Fh
.text:00000000000181EE                 mov     rax, [rsp+58h+arg_10]
.text:00000000000181F3                 mov     edi, edx
.text:00000000000181F5                 mov     r8d, [rsp+58h+arg_18]
.text:00000000000181FA                 shr     rax, 3Fh
.text:00000000000181FE                 or      dil, al
.text:0000000000018201                 jnz     loc_182D0
.text:0000000000018207                 test    rbx, rbx
.text:000000000001820A                 js      loc_182D0
.text:0000000000018210                 mov     r15, rbx
.text:0000000000018213                 add     r15, rbp
.text:0000000000018216                 jo      loc_182D0
.text:000000000001821C                 test    rbp, rbp
.text:000000000001821F                 mov     r14, rcx
.text:0000000000018222                 mov     rcx, r9
.text:0000000000018225                 jz      loc_182E0
.text:000000000001822B                 xor     r13d, r13d
.text:000000000001822E                 test    rbx, rbx
.text:0000000000018231                 mov     [rsp+58h+src], rsi
.text:0000000000018236                 jnz     short loc_18280
.text:0000000000018238
.text:0000000000018238 loc_18238:                              ; CODE XREF: re_search_2_stub+F7↓j
.text:0000000000018238                                         ; re_search_2_stub+116↓j
.text:0000000000018238                 movzx   r8d, r8b
.text:000000000001823C                 mov     rdx, r15
.text:000000000001823F                 mov     rsi, r14
.text:0000000000018242                 push    r8
.text:0000000000018244                 push    [rsp+60h+arg_8]
.text:0000000000018248                 mov     rdi, r12
.text:000000000001824B                 mov     r9, [rsp+68h+arg_10]
.text:0000000000018253                 mov     r8, [rsp+68h+arg_0]
.text:0000000000018258                 call    re_search_stub
.text:000000000001825D                 mov     rdi, r13        ; ptr
.text:0000000000018260                 mov     rbx, rax
.text:0000000000018263                 call    _free
.text:0000000000018268                 pop     rax
.text:0000000000018269                 pop     rdx
.text:000000000001826A
.text:000000000001826A loc_1826A:                              ; CODE XREF: re_search_2_stub+107↓j
.text:000000000001826A                 add     rsp, 28h
.text:000000000001826E                 mov     rax, rbx
.text:0000000000018271                 pop     rbx
.text:0000000000018272                 pop     rbp
.text:0000000000018273                 pop     r12
.text:0000000000018275                 pop     r13
.text:0000000000018277                 pop     r14
.text:0000000000018279                 pop     r15
.text:000000000001827B                 retn
.text:000000000001827B ; ---------------------------------------------------------------------------
.text:000000000001827C                 align 20h
.text:0000000000018280
.text:0000000000018280 loc_18280:                              ; CODE XREF: re_search_2_stub+66↑j
.text:0000000000018280                 mov     rdi, r15        ; size
.text:0000000000018283                 mov     [rsp+58h+var_3C], r8d
.text:0000000000018288                 mov     [rsp+58h+var_48], r9
.text:000000000001828D                 call    _malloc
.text:0000000000018292                 test    rax, rax
.text:0000000000018295                 mov     r13, rax
.text:0000000000018298                 jz      short loc_182D0
.text:000000000001829A                 mov     rsi, [rsp+58h+src] ; src
.text:000000000001829F                 mov     rdx, rbx        ; n
.text:00000000000182A2                 mov     rdi, rax        ; dest
.text:00000000000182A5                 call    _memcpy
.text:00000000000182AA                 lea     rdi, [r13+rbx+0] ; dest
.text:00000000000182AF                 mov     rsi, r14        ; src
.text:00000000000182B2                 mov     rdx, rbp        ; n
.text:00000000000182B5                 mov     r14, r13
.text:00000000000182B8                 call    _memcpy
.text:00000000000182BD                 mov     rcx, [rsp+58h+var_48]
.text:00000000000182C2                 mov     r8d, [rsp+58h+var_3C]
.text:00000000000182C7                 jmp     loc_18238
.text:00000000000182C7 ; ---------------------------------------------------------------------------
.text:00000000000182CC                 align 10h
.text:00000000000182D0
.text:00000000000182D0 loc_182D0:                              ; CODE XREF: re_search_2_stub+31↑j
.text:00000000000182D0                                         ; re_search_2_stub+3A↑j ...
.text:00000000000182D0                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:00000000000182D7                 jmp     short loc_1826A
.text:00000000000182D7 ; ---------------------------------------------------------------------------
.text:00000000000182D9                 align 20h
.text:00000000000182E0
.text:00000000000182E0 loc_182E0:                              ; CODE XREF: re_search_2_stub+55↑j
.text:00000000000182E0                 mov     r14, rsi
.text:00000000000182E3                 xor     r13d, r13d
.text:00000000000182E6                 jmp     loc_18238
.text:00000000000182E6 ; } // starts at 181D0
.text:00000000000182E6 re_search_2_stub endp
.text:00000000000182E6
.text:00000000000182E6 ; ---------------------------------------------------------------------------
.text:00000000000182EB                 align 10h
.text:00000000000182F0
.text:00000000000182F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000182F0
.text:00000000000182F0
.text:00000000000182F0                 public rpl_regcomp
.text:00000000000182F0 rpl_regcomp     proc near
.text:00000000000182F0 ; __unwind {
.text:00000000000182F0                 mov     eax, edx
.text:00000000000182F2                 push    r14
.text:00000000000182F4                 push    r13
.text:00000000000182F6                 and     eax, 1
.text:00000000000182F9                 push    r12
.text:00000000000182FB                 push    rbp
.text:00000000000182FC                 cmp     eax, 1
.text:00000000000182FF                 push    rbx
.text:0000000000018300                 mov     rbx, rdi
.text:0000000000018303                 sbb     r14, r14
.text:0000000000018306                 mov     qword ptr [rdi], 0
.text:000000000001830D                 mov     qword ptr [rdi+8], 0
.text:0000000000018315                 and     r14d, 0FD4FCAh
.text:000000000001831C                 mov     qword ptr [rdi+10h], 0
.text:0000000000018324                 mov     edi, 100h       ; size
.text:0000000000018329                 mov     r12, rsi
.text:000000000001832C                 mov     ebp, edx
.text:000000000001832E                 add     r14, 3B2FCh
.text:0000000000018335                 call    _malloc
.text:000000000001833A                 test    rax, rax
.text:000000000001833D                 mov     [rbx+20h], rax
.text:0000000000018341                 jz      loc_183F0
.text:0000000000018347                 mov     r13, rbp
.text:000000000001834A                 shl     r13, 15h
.text:000000000001834E                 and     r13d, 400000h
.text:0000000000018355                 or      r13, r14
.text:0000000000018358                 test    bpl, 4
.text:000000000001835C                 jnz     short loc_183C0
.text:000000000001835E                 and     byte ptr [rbx+38h], 7Fh
.text:0000000000018362
.text:0000000000018362 loc_18362:                              ; CODE XREF: rpl_regcomp+DF↓j
.text:0000000000018362                 movzx   edx, byte ptr [rbx+38h]
.text:0000000000018366                 shr     ebp, 3
.text:0000000000018369                 mov     rdi, r12        ; s
.text:000000000001836C                 and     ebp, 1
.text:000000000001836F                 mov     qword ptr [rbx+28h], 0
.text:0000000000018377                 shl     ebp, 4
.text:000000000001837A                 and     edx, 0FFFFFFEFh
.text:000000000001837D                 or      ebp, edx
.text:000000000001837F                 mov     [rbx+38h], bpl
.text:0000000000018383                 call    _strlen
.text:0000000000018388                 mov     rcx, r13
.text:000000000001838B                 mov     rdx, rax
.text:000000000001838E                 mov     rsi, r12
.text:0000000000018391                 mov     rdi, rbx
.text:0000000000018394                 call    re_compile_internal
.text:0000000000018399                 cmp     eax, 10h
.text:000000000001839C                 mov     ebp, eax
.text:000000000001839E                 jz      short loc_183D8
.text:00000000000183A0                 test    eax, eax
.text:00000000000183A2                 jnz     short loc_183DD
.text:00000000000183A4                 mov     rdi, rbx
.text:00000000000183A7                 call    rpl_re_compile_fastmap
.text:00000000000183AC
.text:00000000000183AC loc_183AC:                              ; CODE XREF: rpl_regcomp+FE↓j
.text:00000000000183AC                 pop     rbx
.text:00000000000183AD                 mov     eax, ebp
.text:00000000000183AF                 pop     rbp
.text:00000000000183B0                 pop     r12
.text:00000000000183B2                 pop     r13
.text:00000000000183B4                 pop     r14
.text:00000000000183B6                 retn
.text:00000000000183B6 ; ---------------------------------------------------------------------------
.text:00000000000183B7                 align 20h
.text:00000000000183C0
.text:00000000000183C0 loc_183C0:                              ; CODE XREF: rpl_regcomp+6C↑j
.text:00000000000183C0                 and     r13, 0FFFFFFFFFFFFFFBFh
.text:00000000000183C4                 or      byte ptr [rbx+38h], 80h
.text:00000000000183C8                 or      r13, 100h
.text:00000000000183CF                 jmp     short loc_18362
.text:00000000000183CF ; ---------------------------------------------------------------------------
.text:00000000000183D1                 align 8
.text:00000000000183D8
.text:00000000000183D8 loc_183D8:                              ; CODE XREF: rpl_regcomp+AE↑j
.text:00000000000183D8                 mov     ebp, 8
.text:00000000000183DD
.text:00000000000183DD loc_183DD:                              ; CODE XREF: rpl_regcomp+B2↑j
.text:00000000000183DD                 mov     rdi, [rbx+20h]  ; ptr
.text:00000000000183E1                 call    _free
.text:00000000000183E6                 mov     qword ptr [rbx+20h], 0
.text:00000000000183EE                 jmp     short loc_183AC
.text:00000000000183F0 ; ---------------------------------------------------------------------------
.text:00000000000183F0
.text:00000000000183F0 loc_183F0:                              ; CODE XREF: rpl_regcomp+51↑j
.text:00000000000183F0                 mov     ebp, 0Ch
.text:00000000000183F5                 pop     rbx
.text:00000000000183F6                 mov     eax, ebp
.text:00000000000183F8                 pop     rbp
.text:00000000000183F9                 pop     r12
.text:00000000000183FB                 pop     r13
.text:00000000000183FD                 pop     r14
.text:00000000000183FF                 retn
.text:00000000000183FF ; } // starts at 182F0
.text:00000000000183FF rpl_regcomp     endp
.text:00000000000183FF
.text:0000000000018400
.text:0000000000018400 ; =============== S U B R O U T I N E =======================================
.text:0000000000018400
.text:0000000000018400
.text:0000000000018400                 public rpl_regerror
.text:0000000000018400 rpl_regerror    proc near
.text:0000000000018400 ; __unwind {
.text:0000000000018400                 push    r13
.text:0000000000018402                 push    r12
.text:0000000000018404                 push    rbp
.text:0000000000018405                 push    rbx
.text:0000000000018406                 sub     rsp, 8
.text:000000000001840A                 cmp     edi, 10h
.text:000000000001840D                 ja      short loc_18470
.text:000000000001840F                 lea     rax, __re_error_msgid_idx
.text:0000000000018416                 movsxd  rdi, edi
.text:0000000000018419                 lea     rsi, __re_error_msgid ; "Success"
.text:0000000000018420                 mov     rbp, rdx
.text:0000000000018423                 mov     edx, 5          ; category
.text:0000000000018428                 mov     r12, rcx
.text:000000000001842B                 add     rsi, [rax+rdi*8] ; msgid
.text:000000000001842F                 xor     edi, edi        ; domainname
.text:0000000000018431                 call    _dcgettext
.text:0000000000018436                 mov     rdi, rax        ; s
.text:0000000000018439                 mov     r13, rax
.text:000000000001843C                 call    _strlen
.text:0000000000018441                 test    r12, r12
.text:0000000000018444                 lea     rbx, [rax+1]
.text:0000000000018448                 jz      short loc_1845D
.text:000000000001844A                 cmp     rbx, r12
.text:000000000001844D                 mov     rdx, rbx        ; n
.text:0000000000018450                 ja      short loc_18478
.text:0000000000018452
.text:0000000000018452 loc_18452:                              ; CODE XREF: rpl_regerror+83↓j
.text:0000000000018452                 mov     rsi, r13        ; src
.text:0000000000018455                 mov     rdi, rbp        ; dest
.text:0000000000018458                 call    _memcpy
.text:000000000001845D
.text:000000000001845D loc_1845D:                              ; CODE XREF: rpl_regerror+48↑j
.text:000000000001845D                 add     rsp, 8
.text:0000000000018461                 mov     rax, rbx
.text:0000000000018464                 pop     rbx
.text:0000000000018465                 pop     rbp
.text:0000000000018466                 pop     r12
.text:0000000000018468                 pop     r13
.text:000000000001846A                 retn
.text:000000000001846A ; ---------------------------------------------------------------------------
.text:000000000001846B                 align 10h
.text:0000000000018470
.text:0000000000018470 loc_18470:                              ; CODE XREF: rpl_regerror+D↑j
.text:0000000000018470                 call    _abort
.text:0000000000018470 ; ---------------------------------------------------------------------------
.text:0000000000018475                 align 8
.text:0000000000018478
.text:0000000000018478 loc_18478:                              ; CODE XREF: rpl_regerror+50↑j
.text:0000000000018478                 lea     rdx, [r12-1]
.text:000000000001847D                 mov     byte ptr [rbp+r12-1], 0
.text:0000000000018483                 jmp     short loc_18452
.text:0000000000018483 ; } // starts at 18400
.text:0000000000018483 rpl_regerror    endp
.text:0000000000018483
.text:0000000000018483 ; ---------------------------------------------------------------------------
.text:0000000000018485                 align 10h
.text:0000000000018490
.text:0000000000018490 ; =============== S U B R O U T I N E =======================================
.text:0000000000018490
.text:0000000000018490 ; Attributes: info_from_lumina
.text:0000000000018490
.text:0000000000018490                 public regfree
.text:0000000000018490 regfree         proc near
.text:0000000000018490 ; __unwind {
.text:0000000000018490                 push    rbx
.text:0000000000018491                 mov     rbx, rdi
.text:0000000000018494                 mov     rdi, [rdi]      ; ptr
.text:0000000000018497                 test    rdi, rdi
.text:000000000001849A                 jz      short loc_184A1
.text:000000000001849C                 call    free_dfa_content
.text:00000000000184A1
.text:00000000000184A1 loc_184A1:                              ; CODE XREF: regfree+A↑j
.text:00000000000184A1                 mov     rdi, [rbx+20h]  ; ptr
.text:00000000000184A5                 mov     qword ptr [rbx], 0
.text:00000000000184AC                 mov     qword ptr [rbx+8], 0
.text:00000000000184B4                 call    _free
.text:00000000000184B9                 mov     rdi, [rbx+28h]  ; ptr
.text:00000000000184BD                 mov     qword ptr [rbx+20h], 0
.text:00000000000184C5                 call    _free
.text:00000000000184CA                 mov     qword ptr [rbx+28h], 0
.text:00000000000184D2                 pop     rbx
.text:00000000000184D3                 retn
.text:00000000000184D3 ; } // starts at 18490
.text:00000000000184D3 regfree         endp
.text:00000000000184D3
.text:00000000000184D3 ; ---------------------------------------------------------------------------
.text:00000000000184D4                 align 20h
.text:00000000000184E0
.text:00000000000184E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000184E0
.text:00000000000184E0
.text:00000000000184E0                 public rpl_regexec
.text:00000000000184E0 rpl_regexec     proc near
.text:00000000000184E0
.text:00000000000184E0 var_30          = qword ptr -30h
.text:00000000000184E0
.text:00000000000184E0 ; __unwind {
.text:00000000000184E0                 test    r8d, 0FFFFFFF8h
.text:00000000000184E7                 jnz     loc_18578
.text:00000000000184ED                 push    r13
.text:00000000000184EF                 push    r12
.text:00000000000184F1                 mov     r13, rdx
.text:00000000000184F4                 push    rbp
.text:00000000000184F5                 push    rbx
.text:00000000000184F6                 mov     r12, rcx
.text:00000000000184F9                 mov     ebx, r8d
.text:00000000000184FC                 mov     rbp, rdi
.text:00000000000184FF                 sub     rsp, 18h
.text:0000000000018503                 test    r8b, 4
.text:0000000000018507                 jnz     short loc_18558
.text:0000000000018509                 mov     rdi, rsi        ; s
.text:000000000001850C                 mov     [rsp+38h+var_30], rsi
.text:0000000000018511                 call    _strlen
.text:0000000000018516                 xor     ecx, ecx
.text:0000000000018518                 test    byte ptr [rbp+38h], 10h
.text:000000000001851C                 mov     rdx, rax
.text:000000000001851F                 mov     rsi, [rsp+38h+var_30]
.text:0000000000018524                 jz      short loc_18566
.text:0000000000018526
.text:0000000000018526 loc_18526:                              ; CODE XREF: rpl_regexec+84↓j
.text:0000000000018526                 sub     rsp, 8
.text:000000000001852A                 push    rbx
.text:000000000001852B                 push    0
.text:000000000001852D                 push    0
.text:000000000001852F
.text:000000000001852F loc_1852F:                              ; CODE XREF: rpl_regexec+8F↓j
.text:000000000001852F                 mov     rdi, rbp
.text:0000000000018532                 mov     r9, rdx
.text:0000000000018535                 mov     r8, rdx
.text:0000000000018538                 call    re_search_internal
.text:000000000001853D                 add     rsp, 20h
.text:0000000000018541                 test    eax, eax
.text:0000000000018543                 setnz   al
.text:0000000000018546                 add     rsp, 18h
.text:000000000001854A                 pop     rbx
.text:000000000001854B                 movzx   eax, al
.text:000000000001854E                 pop     rbp
.text:000000000001854F                 pop     r12
.text:0000000000018551                 pop     r13
.text:0000000000018553                 retn
.text:0000000000018553 ; ---------------------------------------------------------------------------
.text:0000000000018554                 align 8
.text:0000000000018558
.text:0000000000018558 loc_18558:                              ; CODE XREF: rpl_regexec+27↑j
.text:0000000000018558                 test    byte ptr [rbp+38h], 10h
.text:000000000001855C                 mov     rcx, [rcx]
.text:000000000001855F                 mov     rdx, [r12+8]
.text:0000000000018564                 jnz     short loc_18526
.text:0000000000018566
.text:0000000000018566 loc_18566:                              ; CODE XREF: rpl_regexec+44↑j
.text:0000000000018566                 sub     rsp, 8
.text:000000000001856A                 push    rbx
.text:000000000001856B                 push    r12
.text:000000000001856D                 push    r13
.text:000000000001856F                 jmp     short loc_1852F
.text:000000000001856F ; ---------------------------------------------------------------------------
.text:0000000000018571                 align 8
.text:0000000000018578
.text:0000000000018578 loc_18578:                              ; CODE XREF: rpl_regexec+7↑j
.text:0000000000018578                 mov     eax, 2
.text:000000000001857D                 retn
.text:000000000001857D ; } // starts at 184E0
.text:000000000001857D rpl_regexec     endp
.text:000000000001857D
.text:000000000001857D ; ---------------------------------------------------------------------------
.text:000000000001857E                 align 20h
.text:0000000000018580
.text:0000000000018580 ; =============== S U B R O U T I N E =======================================
.text:0000000000018580
.text:0000000000018580
.text:0000000000018580                 public rpl_re_match
.text:0000000000018580 rpl_re_match    proc near               ; CODE XREF: main+C95↑p
.text:0000000000018580                                         ; main+1322↑p ...
.text:0000000000018580 ; __unwind {
.text:0000000000018580                 sub     rsp, 8
.text:0000000000018584                 mov     r9, rdx
.text:0000000000018587                 push    1
.text:0000000000018589                 push    r8
.text:000000000001858B                 xor     r8d, r8d
.text:000000000001858E                 call    re_search_stub
.text:0000000000018593                 add     rsp, 18h
.text:0000000000018597                 retn
.text:0000000000018597 ; } // starts at 18580
.text:0000000000018597 rpl_re_match    endp
.text:0000000000018597
.text:0000000000018597 ; ---------------------------------------------------------------------------
.text:0000000000018598                 align 20h
.text:00000000000185A0
.text:00000000000185A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000185A0
.text:00000000000185A0
.text:00000000000185A0                 public rpl_re_search
.text:00000000000185A0 rpl_re_search   proc near               ; CODE XREF: main+798↑p
.text:00000000000185A0                                         ; main+835↑p
.text:00000000000185A0 ; __unwind {
.text:00000000000185A0                 sub     rsp, 8
.text:00000000000185A4                 push    0
.text:00000000000185A6                 push    r9
.text:00000000000185A8                 mov     r9, rdx
.text:00000000000185AB                 call    re_search_stub
.text:00000000000185B0                 add     rsp, 18h
.text:00000000000185B4                 retn
.text:00000000000185B4 ; } // starts at 185A0
.text:00000000000185B4 rpl_re_search   endp
.text:00000000000185B4
.text:00000000000185B4 ; ---------------------------------------------------------------------------
.text:00000000000185B5                 align 20h
.text:00000000000185C0
.text:00000000000185C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000185C0
.text:00000000000185C0
.text:00000000000185C0                 public rpl_re_match_2
.text:00000000000185C0 rpl_re_match_2  proc near
.text:00000000000185C0
.text:00000000000185C0 arg_0           = qword ptr  8
.text:00000000000185C0 arg_8           = qword ptr  10h
.text:00000000000185C0
.text:00000000000185C0 ; __unwind {
.text:00000000000185C0                 sub     rsp, 8
.text:00000000000185C4                 push    1
.text:00000000000185C6                 push    [rsp+10h+arg_8]
.text:00000000000185CA                 push    [rsp+18h+arg_0]
.text:00000000000185CE                 push    0
.text:00000000000185D0                 call    re_search_2_stub
.text:00000000000185D5                 add     rsp, 28h
.text:00000000000185D9                 retn
.text:00000000000185D9 ; } // starts at 185C0
.text:00000000000185D9 rpl_re_match_2  endp
.text:00000000000185D9
.text:00000000000185D9 ; ---------------------------------------------------------------------------
.text:00000000000185DA                 align 20h
.text:00000000000185E0
.text:00000000000185E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000185E0
.text:00000000000185E0
.text:00000000000185E0                 public rpl_re_search_2
.text:00000000000185E0 rpl_re_search_2 proc near
.text:00000000000185E0
.text:00000000000185E0 arg_0           = qword ptr  8
.text:00000000000185E0 arg_8           = qword ptr  10h
.text:00000000000185E0 arg_10          = qword ptr  18h
.text:00000000000185E0
.text:00000000000185E0 ; __unwind {
.text:00000000000185E0                 sub     rsp, 8
.text:00000000000185E4                 push    0
.text:00000000000185E6                 push    [rsp+10h+arg_10]
.text:00000000000185EA                 push    [rsp+18h+arg_8]
.text:00000000000185EE                 push    [rsp+20h+arg_0]
.text:00000000000185F2                 call    re_search_2_stub
.text:00000000000185F7                 add     rsp, 28h
.text:00000000000185FB                 retn
.text:00000000000185FB ; } // starts at 185E0
.text:00000000000185FB rpl_re_search_2 endp
.text:00000000000185FB
.text:00000000000185FB ; ---------------------------------------------------------------------------
.text:00000000000185FC                 align 20h
.text:0000000000018600
.text:0000000000018600 ; =============== S U B R O U T I N E =======================================
.text:0000000000018600
.text:0000000000018600
.text:0000000000018600                 public rpl_re_set_registers
.text:0000000000018600 rpl_re_set_registers proc near
.text:0000000000018600 ; __unwind {
.text:0000000000018600                 test    rdx, rdx
.text:0000000000018603                 jnz     short loc_18628
.text:0000000000018605                 and     byte ptr [rdi+38h], 0F9h
.text:0000000000018609                 mov     qword ptr [rsi], 0
.text:0000000000018610                 mov     qword ptr [rsi+10h], 0
.text:0000000000018618                 mov     qword ptr [rsi+8], 0
.text:0000000000018620                 retn
.text:0000000000018620 ; ---------------------------------------------------------------------------
.text:0000000000018621                 align 8
.text:0000000000018628
.text:0000000000018628 loc_18628:                              ; CODE XREF: rpl_re_set_registers+3↑j
.text:0000000000018628                 movzx   eax, byte ptr [rdi+38h]
.text:000000000001862C                 and     eax, 0FFFFFFF9h
.text:000000000001862F                 or      eax, 2
.text:0000000000018632                 mov     [rdi+38h], al
.text:0000000000018635                 mov     [rsi], rdx
.text:0000000000018638                 mov     [rsi+8], rcx
.text:000000000001863C                 mov     [rsi+10h], r8
.text:0000000000018640                 retn
.text:0000000000018640 ; } // starts at 18600
.text:0000000000018640 rpl_re_set_registers endp
.text:0000000000018640
.text:0000000000018640 ; ---------------------------------------------------------------------------
.text:0000000000018641                 align 10h
.text:0000000000018650
.text:0000000000018650 ; =============== S U B R O U T I N E =======================================
.text:0000000000018650
.text:0000000000018650
.text:0000000000018650                 public c_strcasecmp
.text:0000000000018650 c_strcasecmp    proc near               ; CODE XREF: proper_name_utf8+38↑p
.text:0000000000018650                                         ; str_iconv+1E↓p
.text:0000000000018650 ; __unwind {
.text:0000000000018650                 xor     eax, eax
.text:0000000000018652                 cmp     rdi, rsi
.text:0000000000018655                 jnz     short loc_1866C
.text:0000000000018657                 jmp     short locret_1869C
.text:0000000000018657 ; ---------------------------------------------------------------------------
.text:0000000000018659                 align 20h
.text:0000000000018660
.text:0000000000018660 loc_18660:                              ; CODE XREF: c_strcasecmp+42↓j
.text:0000000000018660                 add     rdi, 1
.text:0000000000018664                 add     rsi, 1
.text:0000000000018668                 cmp     al, dl
.text:000000000001866A                 jnz     short loc_18694
.text:000000000001866C
.text:000000000001866C loc_1866C:                              ; CODE XREF: c_strcasecmp+5↑j
.text:000000000001866C                 movzx   eax, byte ptr [rdi]
.text:000000000001866F                 mov     edx, eax
.text:0000000000018671                 lea     ecx, [rax+20h]
.text:0000000000018674                 sub     edx, 41h ; 'A'
.text:0000000000018677                 cmp     dl, 1Ah
.text:000000000001867A                 movzx   edx, byte ptr [rsi]
.text:000000000001867D                 cmovb   eax, ecx
.text:0000000000018680                 mov     ecx, edx
.text:0000000000018682                 lea     r9d, [rdx+20h]
.text:0000000000018686                 sub     ecx, 41h ; 'A'
.text:0000000000018689                 cmp     cl, 1Ah
.text:000000000001868C                 cmovb   edx, r9d
.text:0000000000018690                 test    al, al
.text:0000000000018692                 jnz     short loc_18660
.text:0000000000018694
.text:0000000000018694 loc_18694:                              ; CODE XREF: c_strcasecmp+1A↑j
.text:0000000000018694                 movzx   eax, al
.text:0000000000018697                 movzx   edx, dl
.text:000000000001869A                 sub     eax, edx
.text:000000000001869C
.text:000000000001869C locret_1869C:                           ; CODE XREF: c_strcasecmp+7↑j
.text:000000000001869C                 rep retn
.text:000000000001869C ; } // starts at 18650
.text:000000000001869C c_strcasecmp    endp
.text:000000000001869C
.text:000000000001869C ; ---------------------------------------------------------------------------
.text:000000000001869E                 align 20h
.text:00000000000186A0
.text:00000000000186A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000186A0
.text:00000000000186A0 ; Attributes: info_from_lumina
.text:00000000000186A0
.text:00000000000186A0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000186A0                 public close_stream
.text:00000000000186A0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000186A0                                         ; close_stdout+33↑p
.text:00000000000186A0 ; __unwind {
.text:00000000000186A0                 push    r12
.text:00000000000186A2                 push    rbp
.text:00000000000186A3                 mov     rbp, rdi
.text:00000000000186A6                 push    rbx
.text:00000000000186A7                 call    ___fpending
.text:00000000000186AC                 mov     ebx, [rbp+0]
.text:00000000000186AF                 mov     rdi, rbp        ; stream
.text:00000000000186B2                 mov     r12, rax
.text:00000000000186B5                 call    rpl_fclose
.text:00000000000186BA                 and     ebx, 20h
.text:00000000000186BD                 test    ebx, ebx
.text:00000000000186BF                 jnz     short loc_186D8
.text:00000000000186C1                 test    eax, eax
.text:00000000000186C3                 jz      short loc_186CF
.text:00000000000186C5                 test    r12, r12
.text:00000000000186C8                 mov     eax, 0FFFFFFFFh
.text:00000000000186CD                 jz      short loc_18708
.text:00000000000186CF
.text:00000000000186CF loc_186CF:                              ; CODE XREF: close_stream+23↑j
.text:00000000000186CF                 pop     rbx
.text:00000000000186D0                 pop     rbp
.text:00000000000186D1                 pop     r12
.text:00000000000186D3                 retn
.text:00000000000186D3 ; ---------------------------------------------------------------------------
.text:00000000000186D4                 align 8
.text:00000000000186D8
.text:00000000000186D8 loc_186D8:                              ; CODE XREF: close_stream+1F↑j
.text:00000000000186D8                 test    eax, eax
.text:00000000000186DA                 jnz     short loc_186F8
.text:00000000000186DC                 call    ___errno_location
.text:00000000000186E1                 mov     dword ptr [rax], 0
.text:00000000000186E7                 mov     eax, 0FFFFFFFFh
.text:00000000000186EC                 pop     rbx
.text:00000000000186ED                 pop     rbp
.text:00000000000186EE                 pop     r12
.text:00000000000186F0                 retn
.text:00000000000186F0 ; ---------------------------------------------------------------------------
.text:00000000000186F1                 align 8
.text:00000000000186F8
.text:00000000000186F8 loc_186F8:                              ; CODE XREF: close_stream+3A↑j
.text:00000000000186F8                 pop     rbx
.text:00000000000186F9                 mov     eax, 0FFFFFFFFh
.text:00000000000186FE                 pop     rbp
.text:00000000000186FF                 pop     r12
.text:0000000000018701                 retn
.text:0000000000018701 ; ---------------------------------------------------------------------------
.text:0000000000018702                 align 8
.text:0000000000018708
.text:0000000000018708 loc_18708:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000018708                 call    ___errno_location
.text:000000000001870D                 cmp     dword ptr [rax], 9
.text:0000000000018710                 pop     rbx
.text:0000000000018711                 pop     rbp
.text:0000000000018712                 pop     r12
.text:0000000000018714                 setnz   al
.text:0000000000018717                 movzx   eax, al
.text:000000000001871A                 neg     eax
.text:000000000001871C                 retn
.text:000000000001871C ; } // starts at 186A0
.text:000000000001871C close_stream    endp
.text:000000000001871C
.text:000000000001871C ; ---------------------------------------------------------------------------
.text:000000000001871D                 align 20h
.text:0000000000018720
.text:0000000000018720 ; =============== S U B R O U T I N E =======================================
.text:0000000000018720
.text:0000000000018720
.text:0000000000018720                 public hard_locale
.text:0000000000018720 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000018720 ; __unwind {
.text:0000000000018720                 sub     rsp, 8
.text:0000000000018724                 xor     esi, esi        ; locale
.text:0000000000018726                 call    _setlocale
.text:000000000001872B                 mov     rdx, rax
.text:000000000001872E                 mov     eax, 1
.text:0000000000018733                 test    rdx, rdx
.text:0000000000018736                 jz      short loc_18755
.text:0000000000018738                 lea     rdi, unk_1CF50
.text:000000000001873F                 mov     ecx, 2
.text:0000000000018744                 mov     rsi, rdx
.text:0000000000018747                 repe cmpsb
.text:0000000000018749                 setnbe  cl
.text:000000000001874C                 sbb     cl, 0
.text:000000000001874F                 xor     eax, eax
.text:0000000000018751                 test    cl, cl
.text:0000000000018753                 jnz     short loc_18760
.text:0000000000018755
.text:0000000000018755 loc_18755:                              ; CODE XREF: hard_locale+16↑j
.text:0000000000018755                 add     rsp, 8
.text:0000000000018759                 retn
.text:0000000000018759 ; ---------------------------------------------------------------------------
.text:000000000001875A                 align 20h
.text:0000000000018760
.text:0000000000018760 loc_18760:                              ; CODE XREF: hard_locale+33↑j
.text:0000000000018760                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000018767                 mov     ecx, 6
.text:000000000001876C                 mov     rsi, rdx
.text:000000000001876F                 repe cmpsb
.text:0000000000018771                 setnbe  al
.text:0000000000018774                 sbb     al, 0
.text:0000000000018776                 test    al, al
.text:0000000000018778                 setnz   al
.text:000000000001877B                 add     rsp, 8
.text:000000000001877F                 retn
.text:000000000001877F ; } // starts at 18720
.text:000000000001877F hard_locale     endp
.text:000000000001877F
.text:0000000000018780
.text:0000000000018780 ; =============== S U B R O U T I N E =======================================
.text:0000000000018780
.text:0000000000018780
.text:0000000000018780                 public locale_charset
.text:0000000000018780 locale_charset  proc near               ; CODE XREF: proper_name_utf8+26↑p
.text:0000000000018780                                         ; gettext_quote+B↑p
.text:0000000000018780 ; __unwind {
.text:0000000000018780                 sub     rsp, 8
.text:0000000000018784                 mov     edi, 0Eh        ; item
.text:0000000000018789                 call    _nl_langinfo
.text:000000000001878E                 test    rax, rax
.text:0000000000018791                 jz      short loc_187B0
.text:0000000000018793                 cmp     byte ptr [rax], 0
.text:0000000000018796                 lea     rdx, aAscii     ; "ASCII"
.text:000000000001879D                 cmovz   rax, rdx
.text:00000000000187A1                 add     rsp, 8
.text:00000000000187A5                 retn
.text:00000000000187A5 ; ---------------------------------------------------------------------------
.text:00000000000187A6                 align 10h
.text:00000000000187B0
.text:00000000000187B0 loc_187B0:                              ; CODE XREF: locale_charset+11↑j
.text:00000000000187B0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000187B7                 add     rsp, 8
.text:00000000000187BB                 retn
.text:00000000000187BB ; } // starts at 18780
.text:00000000000187BB locale_charset  endp
.text:00000000000187BB
.text:00000000000187BB ; ---------------------------------------------------------------------------
.text:00000000000187BC                 align 20h
.text:00000000000187C0
.text:00000000000187C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000187C0
.text:00000000000187C0 ; Attributes: info_from_lumina
.text:00000000000187C0
.text:00000000000187C0 ; __int64 __fastcall mb_width_aux(wint_t wc)
.text:00000000000187C0                 public mb_width_aux
.text:00000000000187C0 mb_width_aux    proc near
.text:00000000000187C0 ; __unwind {
.text:00000000000187C0                 push    rbx
.text:00000000000187C1                 mov     ebx, edi
.text:00000000000187C3                 call    _wcwidth
.text:00000000000187C8                 test    eax, eax
.text:00000000000187CA                 js      short loc_187D0
.text:00000000000187CC                 pop     rbx
.text:00000000000187CD                 retn
.text:00000000000187CD ; ---------------------------------------------------------------------------
.text:00000000000187CE                 align 10h
.text:00000000000187D0
.text:00000000000187D0 loc_187D0:                              ; CODE XREF: mb_width_aux+A↑j
.text:00000000000187D0                 mov     edi, ebx        ; wc
.text:00000000000187D2                 call    _iswcntrl
.text:00000000000187D7                 test    eax, eax
.text:00000000000187D9                 setz    al
.text:00000000000187DC                 movzx   eax, al
.text:00000000000187DF                 pop     rbx
.text:00000000000187E0                 retn
.text:00000000000187E0 ; } // starts at 187C0
.text:00000000000187E0 mb_width_aux    endp
.text:00000000000187E0
.text:00000000000187E0 ; ---------------------------------------------------------------------------
.text:00000000000187E1                 align 10h
.text:00000000000187F0
.text:00000000000187F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000187F0
.text:00000000000187F0
.text:00000000000187F0                 public mb_copy
.text:00000000000187F0 mb_copy         proc near
.text:00000000000187F0 ; __unwind {
.text:00000000000187F0                 push    rbp
.text:00000000000187F1                 push    rbx
.text:00000000000187F2                 mov     rbx, rsi
.text:00000000000187F5                 lea     rax, [rbx+18h]
.text:00000000000187F9                 mov     rbp, rdi
.text:00000000000187FC                 sub     rsp, 8
.text:0000000000018800                 mov     rsi, [rsi]      ; src
.text:0000000000018803                 mov     rdx, [rbx+8]    ; n
.text:0000000000018807                 cmp     rsi, rax
.text:000000000001880A                 jz      short loc_18830
.text:000000000001880C                 mov     [rdi], rsi
.text:000000000001880F
.text:000000000001880F loc_1880F:                              ; CODE XREF: mb_copy+54↓j
.text:000000000001880F                 movzx   eax, byte ptr [rbx+10h]
.text:0000000000018813                 mov     [rbp+8], rdx
.text:0000000000018817                 test    al, al
.text:0000000000018819                 mov     [rbp+10h], al
.text:000000000001881C                 jz      short loc_18824
.text:000000000001881E                 mov     eax, [rbx+14h]
.text:0000000000018821                 mov     [rbp+14h], eax
.text:0000000000018824
.text:0000000000018824 loc_18824:                              ; CODE XREF: mb_copy+2C↑j
.text:0000000000018824                 add     rsp, 8
.text:0000000000018828                 pop     rbx
.text:0000000000018829                 pop     rbp
.text:000000000001882A                 retn
.text:000000000001882A ; ---------------------------------------------------------------------------
.text:000000000001882B                 align 10h
.text:0000000000018830
.text:0000000000018830 loc_18830:                              ; CODE XREF: mb_copy+1A↑j
.text:0000000000018830                 lea     rcx, [rdi+18h]
.text:0000000000018834                 mov     rdi, rcx        ; dest
.text:0000000000018837                 call    _memcpy
.text:000000000001883C                 mov     rdx, [rbx+8]
.text:0000000000018840                 mov     [rbp+0], rax
.text:0000000000018844                 jmp     short loc_1880F
.text:0000000000018844 ; } // starts at 187F0
.text:0000000000018844 mb_copy         endp
.text:0000000000018844
.text:0000000000018844 ; ---------------------------------------------------------------------------
.text:0000000000018846                 align 10h
.text:0000000000018850
.text:0000000000018850 ; =============== S U B R O U T I N E =======================================
.text:0000000000018850
.text:0000000000018850
.text:0000000000018850                 public is_basic
.text:0000000000018850 is_basic        proc near
.text:0000000000018850 ; __unwind {
.text:0000000000018850                 mov     eax, edi
.text:0000000000018852                 lea     rdx, is_basic_table
.text:0000000000018859                 mov     ecx, edi
.text:000000000001885B                 shr     al, 5
.text:000000000001885E                 and     ecx, 1Fh
.text:0000000000018861                 and     eax, 7
.text:0000000000018864                 mov     eax, [rdx+rax*4]
.text:0000000000018867                 shr     eax, cl
.text:0000000000018869                 and     eax, 1
.text:000000000001886C                 retn
.text:000000000001886C ; } // starts at 18850
.text:000000000001886C is_basic        endp
.text:000000000001886C
.text:000000000001886C ; ---------------------------------------------------------------------------
.text:000000000001886D                 align 10h
.text:0000000000018870
.text:0000000000018870 ; =============== S U B R O U T I N E =======================================
.text:0000000000018870
.text:0000000000018870 ; Attributes: bp-based frame
.text:0000000000018870
.text:0000000000018870 knuth_morris_pratt proc near            ; CODE XREF: mbsstr+108↓p
.text:0000000000018870
.text:0000000000018870 var_30          = qword ptr -30h
.text:0000000000018870 var_21          = byte ptr -21h
.text:0000000000018870 var_18          = qword ptr -18h
.text:0000000000018870
.text:0000000000018870 ; __unwind {
.text:0000000000018870                 push    rbp
.text:0000000000018871                 mov     rbp, rsp
.text:0000000000018874                 push    r12
.text:0000000000018876                 push    rbx
.text:0000000000018877                 mov     r12, rdx
.text:000000000001887A                 mov     edx, 8
.text:000000000001887F                 mov     rbx, rdi
.text:0000000000018882                 sub     rsp, 20h
.text:0000000000018886                 mov     rax, fs:28h
.text:000000000001888F                 mov     [rbp+var_18], rax
.text:0000000000018893                 xor     eax, eax
.text:0000000000018895                 mov     rax, rdx
.text:0000000000018898                 mul     r12
.text:000000000001889B                 jo      loc_18A0D
.text:00000000000188A1                 xor     edi, edi
.text:00000000000188A3
.text:00000000000188A3 loc_188A3:                              ; CODE XREF: knuth_morris_pratt+1A2↓j
.text:00000000000188A3                 test    rax, rax
.text:00000000000188A6                 js      loc_18980
.text:00000000000188AC                 test    rdi, rdi
.text:00000000000188AF                 jnz     loc_18980
.text:00000000000188B5                 lea     rdi, ds:0[r12*8]
.text:00000000000188BD                 cmp     rdi, 0FA0h
.text:00000000000188C4                 ja      loc_189E8
.text:00000000000188CA                 add     rdi, 3Dh ; '='
.text:00000000000188CE                 and     rdi, 0FFFFFFFFFFFFFFF0h
.text:00000000000188D2                 sub     rsp, rdi
.text:00000000000188D5                 lea     rdi, [rsp+30h+var_21]
.text:00000000000188DA                 and     rdi, 0FFFFFFFFFFFFFFF0h
.text:00000000000188DE                 add     rdi, 1Fh
.text:00000000000188E2                 and     rdi, 0FFFFFFFFFFFFFFE0h
.text:00000000000188E6
.text:00000000000188E6 loc_188E6:                              ; CODE XREF: knuth_morris_pratt+190↓j
.text:00000000000188E6                 test    rdi, rdi
.text:00000000000188E9                 jz      loc_18980
.text:00000000000188EF                 cmp     r12, 2
.text:00000000000188F3                 mov     qword ptr [rdi+8], 1
.text:00000000000188FB                 jbe     short loc_18941
.text:00000000000188FD                 xor     edx, edx
.text:00000000000188FF                 mov     r8d, 2
.text:0000000000018905                 nop     dword ptr [rax]
.text:0000000000018908
.text:0000000000018908 loc_18908:                              ; CODE XREF: knuth_morris_pratt+CF↓j
.text:0000000000018908                 movzx   eax, byte ptr [rsi+r8-1]
.text:000000000001890E                 cmp     al, [rsi+rdx]
.text:0000000000018911                 jnz     short loc_1892D
.text:0000000000018913                 jmp     loc_189D0
.text:0000000000018913 ; ---------------------------------------------------------------------------
.text:0000000000018918                 align 20h
.text:0000000000018920
.text:0000000000018920 loc_18920:                              ; CODE XREF: knuth_morris_pratt+C0↓j
.text:0000000000018920                 sub     rdx, [rdi+rdx*8]
.text:0000000000018924                 cmp     [rsi+rdx], al
.text:0000000000018927                 jz      loc_189D0
.text:000000000001892D
.text:000000000001892D loc_1892D:                              ; CODE XREF: knuth_morris_pratt+A1↑j
.text:000000000001892D                 test    rdx, rdx
.text:0000000000018930                 jnz     short loc_18920
.text:0000000000018932                 mov     [rdi+r8*8], r8
.text:0000000000018936                 xor     edx, edx
.text:0000000000018938
.text:0000000000018938 loc_18938:                              ; CODE XREF: knuth_morris_pratt+16E↓j
.text:0000000000018938                 add     r8, 1
.text:000000000001893C                 cmp     r12, r8
.text:000000000001893F                 jnz     short loc_18908
.text:0000000000018941
.text:0000000000018941 loc_18941:                              ; CODE XREF: knuth_morris_pratt+8B↑j
.text:0000000000018941                 mov     qword ptr [rcx], 0
.text:0000000000018948                 movzx   edx, byte ptr [rbx]
.text:000000000001894B                 mov     r8, rbx
.text:000000000001894E                 xor     eax, eax
.text:0000000000018950
.text:0000000000018950 loc_18950:                              ; CODE XREF: knuth_morris_pratt+145↓j
.text:0000000000018950                                         ; knuth_morris_pratt+15D↓j
.text:0000000000018950                 test    dl, dl
.text:0000000000018952                 jz      short loc_1896C
.text:0000000000018954
.text:0000000000018954 loc_18954:                              ; CODE XREF: knuth_morris_pratt+FA↓j
.text:0000000000018954                 cmp     [rsi+rax], dl
.text:0000000000018957                 jz      short loc_189A0
.text:0000000000018959                 test    rax, rax
.text:000000000001895C                 jz      short loc_189C0
.text:000000000001895E                 mov     r9, [rdi+rax*8]
.text:0000000000018962                 add     rbx, r9
.text:0000000000018965                 sub     rax, r9
.text:0000000000018968                 test    dl, dl
.text:000000000001896A                 jnz     short loc_18954
.text:000000000001896C
.text:000000000001896C loc_1896C:                              ; CODE XREF: knuth_morris_pratt+E2↑j
.text:000000000001896C                                         ; knuth_morris_pratt+198↓j
.text:000000000001896C                 call    freea
.text:0000000000018971                 mov     eax, 1
.text:0000000000018976                 jmp     short loc_18982
.text:0000000000018976 ; ---------------------------------------------------------------------------
.text:0000000000018978                 align 20h
.text:0000000000018980
.text:0000000000018980 loc_18980:                              ; CODE XREF: knuth_morris_pratt+36↑j
.text:0000000000018980                                         ; knuth_morris_pratt+3F↑j ...
.text:0000000000018980                 xor     eax, eax
.text:0000000000018982
.text:0000000000018982 loc_18982:                              ; CODE XREF: knuth_morris_pratt+106↑j
.text:0000000000018982                 mov     rcx, [rbp+var_18]
.text:0000000000018986                 xor     rcx, fs:28h
.text:000000000001898F                 jnz     loc_18A17
.text:0000000000018995                 lea     rsp, [rbp-10h]
.text:0000000000018999                 pop     rbx
.text:000000000001899A                 pop     r12
.text:000000000001899C                 pop     rbp
.text:000000000001899D                 retn
.text:000000000001899D ; ---------------------------------------------------------------------------
.text:000000000001899E                 align 20h
.text:00000000000189A0
.text:00000000000189A0 loc_189A0:                              ; CODE XREF: knuth_morris_pratt+E7↑j
.text:00000000000189A0                 add     rax, 1
.text:00000000000189A4                 lea     r9, [r8+1]
.text:00000000000189A8                 cmp     r12, rax
.text:00000000000189AB                 jz      short loc_18A05
.text:00000000000189AD                 movzx   edx, byte ptr [r8+1]
.text:00000000000189B2                 mov     r8, r9
.text:00000000000189B5                 jmp     short loc_18950
.text:00000000000189B5 ; ---------------------------------------------------------------------------
.text:00000000000189B7                 align 20h
.text:00000000000189C0
.text:00000000000189C0 loc_189C0:                              ; CODE XREF: knuth_morris_pratt+EC↑j
.text:00000000000189C0                 movzx   edx, byte ptr [r8+1]
.text:00000000000189C5                 add     rbx, 1
.text:00000000000189C9                 add     r8, 1
.text:00000000000189CD                 jmp     short loc_18950
.text:00000000000189CD ; ---------------------------------------------------------------------------
.text:00000000000189CF                 align 10h
.text:00000000000189D0
.text:00000000000189D0 loc_189D0:                              ; CODE XREF: knuth_morris_pratt+A3↑j
.text:00000000000189D0                                         ; knuth_morris_pratt+B7↑j
.text:00000000000189D0                 add     rdx, 1
.text:00000000000189D4                 mov     rax, r8
.text:00000000000189D7                 sub     rax, rdx
.text:00000000000189DA                 mov     [rdi+r8*8], rax
.text:00000000000189DE                 jmp     loc_18938
.text:00000000000189DE ; ---------------------------------------------------------------------------
.text:00000000000189E3                 align 8
.text:00000000000189E8
.text:00000000000189E8 loc_189E8:                              ; CODE XREF: knuth_morris_pratt+54↑j
.text:00000000000189E8                 mov     [rbp+var_30], rcx
.text:00000000000189EC                 mov     [rbp-28h], rsi
.text:00000000000189F0                 call    mmalloca
.text:00000000000189F5                 mov     rcx, [rbp+var_30]
.text:00000000000189F9                 mov     rdi, rax
.text:00000000000189FC                 mov     rsi, [rbp-28h]
.text:0000000000018A00                 jmp     loc_188E6
.text:0000000000018A05 ; ---------------------------------------------------------------------------
.text:0000000000018A05
.text:0000000000018A05 loc_18A05:                              ; CODE XREF: knuth_morris_pratt+13B↑j
.text:0000000000018A05                 mov     [rcx], rbx
.text:0000000000018A08                 jmp     loc_1896C
.text:0000000000018A0D ; ---------------------------------------------------------------------------
.text:0000000000018A0D
.text:0000000000018A0D loc_18A0D:                              ; CODE XREF: knuth_morris_pratt+2B↑j
.text:0000000000018A0D                 mov     edi, 1
.text:0000000000018A12                 jmp     loc_188A3
.text:0000000000018A17 ; ---------------------------------------------------------------------------
.text:0000000000018A17
.text:0000000000018A17 loc_18A17:                              ; CODE XREF: knuth_morris_pratt+11F↑j
.text:0000000000018A17                 call    ___stack_chk_fail
.text:0000000000018A17 ; } // starts at 18870
.text:0000000000018A17 knuth_morris_pratt endp
.text:0000000000018A17
.text:0000000000018A17 ; ---------------------------------------------------------------------------
.text:0000000000018A1C                 align 20h
.text:0000000000018A20
.text:0000000000018A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000018A20
.text:0000000000018A20 ; Attributes: bp-based frame
.text:0000000000018A20
.text:0000000000018A20 knuth_morris_pratt_multibyte proc near  ; CODE XREF: mbsstr+AD8↓p
.text:0000000000018A20
.text:0000000000018A20 var_128         = qword ptr -128h
.text:0000000000018A20 ps              = qword ptr -120h
.text:0000000000018A20 var_118         = qword ptr -118h
.text:0000000000018A20 var_110         = qword ptr -110h
.text:0000000000018A20 var_108         = qword ptr -108h
.text:0000000000018A20 var_100         = byte ptr -100h
.text:0000000000018A20 var_FC          = qword ptr -0FCh
.text:0000000000018A20 var_F4          = byte ptr -0F4h
.text:0000000000018A20 src             = qword ptr -0F0h
.text:0000000000018A20 n               = qword ptr -0E8h
.text:0000000000018A20 var_E0          = byte ptr -0E0h
.text:0000000000018A20 var_DC          = dword ptr -0DCh
.text:0000000000018A20 var_C0          = byte ptr -0C0h
.text:0000000000018A20 var_BC          = qword ptr -0BCh
.text:0000000000018A20 var_B4          = byte ptr -0B4h
.text:0000000000018A20 s               = qword ptr -0B0h
.text:0000000000018A20 var_A8          = qword ptr -0A8h
.text:0000000000018A20 var_A0          = byte ptr -0A0h
.text:0000000000018A20 var_9C          = dword ptr -9Ch
.text:0000000000018A20 var_80          = byte ptr -80h
.text:0000000000018A20 var_7C          = qword ptr -7Ch
.text:0000000000018A20 var_74          = byte ptr -74h
.text:0000000000018A20 s2              = qword ptr -70h
.text:0000000000018A20 var_68          = qword ptr -68h
.text:0000000000018A20 var_60          = byte ptr -60h
.text:0000000000018A20 var_5C          = dword ptr -5Ch
.text:0000000000018A20 var_38          = qword ptr -38h
.text:0000000000018A20
.text:0000000000018A20 ; __unwind {
.text:0000000000018A20                 push    rbp
.text:0000000000018A21                 mov     rbp, rsp
.text:0000000000018A24                 push    r15
.text:0000000000018A26                 push    r14
.text:0000000000018A28                 push    r13
.text:0000000000018A2A                 push    r12
.text:0000000000018A2C                 push    rbx
.text:0000000000018A2D                 mov     rbx, rsi
.text:0000000000018A30                 sub     rsp, 108h
.text:0000000000018A37                 mov     [rbp+var_118], rdi
.text:0000000000018A3E                 mov     rdi, rsi        ; s
.text:0000000000018A41                 mov     [rbp+var_128], rdx
.text:0000000000018A48                 mov     rax, fs:28h
.text:0000000000018A51                 mov     [rbp+var_38], rax
.text:0000000000018A55                 xor     eax, eax
.text:0000000000018A57                 call    mbslen
.text:0000000000018A5C                 mov     edx, 38h ; '8'
.text:0000000000018A61                 mov     rsi, rax
.text:0000000000018A64                 mov     [rbp+var_108], rax
.text:0000000000018A6B                 mov     rax, rdx
.text:0000000000018A6E                 mul     rsi
.text:0000000000018A71                 jo      loc_19487
.text:0000000000018A77                 xor     ecx, ecx
.text:0000000000018A79
.text:0000000000018A79 loc_18A79:                              ; CODE XREF: knuth_morris_pratt_multibyte+A6C↓j
.text:0000000000018A79                 test    rax, rax
.text:0000000000018A7C                 js      loc_18EA0
.text:0000000000018A82                 test    rcx, rcx
.text:0000000000018A85                 jnz     loc_18EA0
.text:0000000000018A8B                 mov     rax, [rbp+var_108]
.text:0000000000018A92                 lea     rdi, ds:0[rax*8]
.text:0000000000018A9A                 sub     rdi, rax
.text:0000000000018A9D                 shl     rdi, 3
.text:0000000000018AA1                 cmp     rdi, 0FA0h
.text:0000000000018AA8                 ja      loc_193E4
.text:0000000000018AAE                 add     rdi, 3Dh ; '='
.text:0000000000018AB2                 and     rdi, 0FFFFFFFFFFFFFFF0h
.text:0000000000018AB6                 sub     rsp, rdi
.text:0000000000018AB9                 lea     r12, [rsp+130h+var_128+7]
.text:0000000000018ABE                 and     r12, 0FFFFFFFFFFFFFFF0h
.text:0000000000018AC2                 add     r12, 1Fh
.text:0000000000018AC6                 and     r12, 0FFFFFFFFFFFFFFE0h
.text:0000000000018ACA
.text:0000000000018ACA loc_18ACA:                              ; CODE XREF: knuth_morris_pratt_multibyte+9CC↓j
.text:0000000000018ACA                 test    r12, r12
.text:0000000000018ACD                 jz      loc_18EA0
.text:0000000000018AD3                 mov     rax, [rbp+var_108]
.text:0000000000018ADA                 mov     [rbp+src], rbx
.text:0000000000018AE1                 lea     rbx, [rbp+var_100]
.text:0000000000018AE8                 mov     [rbp+var_100], 0
.text:0000000000018AEF                 mov     [rbp+var_FC], 0
.text:0000000000018AFA                 mov     r15, r12
.text:0000000000018AFD                 mov     [rbp+var_F4], 0
.text:0000000000018B04                 mov     r14d, 1
.text:0000000000018B0A                 lea     r13, [rax+rax*2]
.text:0000000000018B0E                 lea     rax, [rbx+4]
.text:0000000000018B12                 shl     r13, 4
.text:0000000000018B16                 mov     [rbp+ps], rax
.text:0000000000018B1D                 add     r13, r12
.text:0000000000018B20                 jmp     loc_18BD1
.text:0000000000018B20 ; ---------------------------------------------------------------------------
.text:0000000000018B25                 align 8
.text:0000000000018B28
.text:0000000000018B28 loc_18B28:                              ; CODE XREF: knuth_morris_pratt_multibyte+1B8↓j
.text:0000000000018B28                 mov     rcx, [rbp+src]
.text:0000000000018B2F                 lea     rsi, is_basic_table
.text:0000000000018B36                 movzx   edx, byte ptr [rcx]
.text:0000000000018B39                 mov     eax, edx
.text:0000000000018B3B                 shr     al, 5
.text:0000000000018B3E                 and     eax, 7
.text:0000000000018B41                 mov     eax, [rsi+rax*4]
.text:0000000000018B44                 bt      eax, edx
.text:0000000000018B47                 jnb     loc_18EC8
.text:0000000000018B4D                 mov     [rbp+n], 1
.text:0000000000018B58                 movsx   eax, byte ptr [rcx]
.text:0000000000018B5B                 mov     [rbp+var_E0], r14b
.text:0000000000018B62                 mov     [rbp+var_F4], r14b
.text:0000000000018B69                 mov     [rbp+var_DC], eax
.text:0000000000018B6F
.text:0000000000018B6F loc_18B6F:                              ; CODE XREF: knuth_morris_pratt_multibyte+9A8↓j
.text:0000000000018B6F                 mov     r8d, [rbp+var_DC]
.text:0000000000018B76                 test    r8d, r8d
.text:0000000000018B79                 jz      loc_18CA0
.text:0000000000018B7F
.text:0000000000018B7F loc_18B7F:                              ; CODE XREF: knuth_morris_pratt_multibyte+271↓j
.text:0000000000018B7F                 mov     eax, 1
.text:0000000000018B84
.text:0000000000018B84 loc_18B84:                              ; CODE XREF: knuth_morris_pratt_multibyte+513↓j
.text:0000000000018B84                                         ; knuth_morris_pratt_multibyte+99C↓j
.text:0000000000018B84                 mov     rsi, [rbp+src]  ; src
.text:0000000000018B8B                 lea     rcx, [rbx+28h]
.text:0000000000018B8F                 mov     rdx, [rbp+n]    ; n
.text:0000000000018B96                 cmp     rsi, rcx
.text:0000000000018B99                 jz      loc_18EF0
.text:0000000000018B9F                 mov     [r15], rsi
.text:0000000000018BA2
.text:0000000000018BA2 loc_18BA2:                              ; CODE XREF: knuth_morris_pratt_multibyte+4ED↓j
.text:0000000000018BA2                 test    al, al
.text:0000000000018BA4                 mov     [r15+8], rdx
.text:0000000000018BA8                 mov     [r15+10h], al
.text:0000000000018BAC                 jz      short loc_18BB8
.text:0000000000018BAE                 mov     eax, [rbp+var_DC]
.text:0000000000018BB4                 mov     [r15+14h], eax
.text:0000000000018BB8
.text:0000000000018BB8 loc_18BB8:                              ; CODE XREF: knuth_morris_pratt_multibyte+18C↑j
.text:0000000000018BB8                 mov     rax, [rbp+n]
.text:0000000000018BBF                 add     [rbp+src], rax
.text:0000000000018BC6                 add     r15, 30h ; '0'
.text:0000000000018BCA                 mov     [rbp+var_F4], 0
.text:0000000000018BD1
.text:0000000000018BD1 loc_18BD1:                              ; CODE XREF: knuth_morris_pratt_multibyte+100↑j
.text:0000000000018BD1                 cmp     [rbp+var_100], 0
.text:0000000000018BD8                 jz      loc_18B28
.text:0000000000018BDE
.text:0000000000018BDE loc_18BDE:                              ; CODE XREF: knuth_morris_pratt_multibyte+4C3↓j
.text:0000000000018BDE                 call    ___ctype_get_mb_cur_max
.text:0000000000018BE3                 mov     r9, [rbp+src]
.text:0000000000018BEA                 mov     rsi, rax
.text:0000000000018BED                 mov     rdi, r9
.text:0000000000018BF0                 mov     [rbp+var_110], r9
.text:0000000000018BF7                 call    strnlen1
.text:0000000000018BFC                 mov     r9, [rbp+var_110]
.text:0000000000018C03                 lea     rcx, [rbx+4]
.text:0000000000018C07                 lea     rdi, [rbx+24h]
.text:0000000000018C0B                 mov     rdx, rax
.text:0000000000018C0E                 mov     rsi, r9
.text:0000000000018C11                 call    rpl_mbrtowc
.text:0000000000018C16                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000018C1A                 mov     [rbp+n], rax
.text:0000000000018C21                 jz      loc_18F18
.text:0000000000018C27                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000018C2B                 jz      loc_19399
.text:0000000000018C31                 test    rax, rax
.text:0000000000018C34                 jnz     short loc_18C61
.text:0000000000018C36                 mov     rax, [rbp+src]
.text:0000000000018C3D                 mov     [rbp+n], 1
.text:0000000000018C48                 cmp     byte ptr [rax], 0
.text:0000000000018C4B                 jnz     loc_19463
.text:0000000000018C51                 mov     r9d, [rbp+var_DC]
.text:0000000000018C58                 test    r9d, r9d
.text:0000000000018C5B                 jnz     loc_19482
.text:0000000000018C61
.text:0000000000018C61 loc_18C61:                              ; CODE XREF: knuth_morris_pratt_multibyte+214↑j
.text:0000000000018C61                 lea     rdi, [rbx+4]    ; ps
.text:0000000000018C65                 mov     [rbp+var_E0], r14b
.text:0000000000018C6C                 call    _mbsinit
.text:0000000000018C71                 test    eax, eax
.text:0000000000018C73                 jz      loc_193C1
.text:0000000000018C79                 mov     r8d, [rbp+var_DC]
.text:0000000000018C80                 mov     [rbp+var_100], 0
.text:0000000000018C87                 mov     [rbp+var_F4], r14b
.text:0000000000018C8E                 test    r8d, r8d
.text:0000000000018C91                 jnz     loc_18B7F
.text:0000000000018C97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000018CA0
.text:0000000000018CA0 loc_18CA0:                              ; CODE XREF: knuth_morris_pratt_multibyte+159↑j
.text:0000000000018CA0                 cmp     [rbp+var_108], 2
.text:0000000000018CA8                 mov     qword ptr [r13+8], 1
.text:0000000000018CB0                 jbe     loc_18D46
.text:0000000000018CB6                 lea     r14, [r12+30h]
.text:0000000000018CBB                 xor     ebx, ebx
.text:0000000000018CBD                 mov     r15d, 2
.text:0000000000018CC3                 nop     dword ptr [rax+rax+00h]
.text:0000000000018CC8
.text:0000000000018CC8 loc_18CC8:                              ; CODE XREF: knuth_morris_pratt_multibyte+320↓j
.text:0000000000018CC8                 movzx   ecx, byte ptr [r14+10h]
.text:0000000000018CCD                 jmp     short loc_18CED
.text:0000000000018CCD ; ---------------------------------------------------------------------------
.text:0000000000018CCF                 align 10h
.text:0000000000018CD0
.text:0000000000018CD0 loc_18CD0:                              ; CODE XREF: knuth_morris_pratt_multibyte+2DA↓j
.text:0000000000018CD0                 cmp     byte ptr [rax+10h], 0
.text:0000000000018CD4                 jz      short loc_18CFC
.text:0000000000018CD6                 mov     eax, [rax+14h]
.text:0000000000018CD9                 cmp     [r14+14h], eax
.text:0000000000018CDD                 jz      short loc_18D22
.text:0000000000018CDF
.text:0000000000018CDF loc_18CDF:                              ; CODE XREF: knuth_morris_pratt_multibyte+2E4↓j
.text:0000000000018CDF                                         ; knuth_morris_pratt_multibyte+300↓j
.text:0000000000018CDF                 test    rbx, rbx
.text:0000000000018CE2                 jz      loc_19298
.text:0000000000018CE8                 sub     rbx, [r13+rbx*8+0]
.text:0000000000018CED
.text:0000000000018CED loc_18CED:                              ; CODE XREF: knuth_morris_pratt_multibyte+2AD↑j
.text:0000000000018CED                 lea     rax, [rbx+rbx*2]
.text:0000000000018CF1                 shl     rax, 4
.text:0000000000018CF5                 add     rax, r12
.text:0000000000018CF8                 test    cl, cl
.text:0000000000018CFA                 jnz     short loc_18CD0
.text:0000000000018CFC
.text:0000000000018CFC loc_18CFC:                              ; CODE XREF: knuth_morris_pratt_multibyte+2B4↑j
.text:0000000000018CFC                 mov     rdx, [r14+8]    ; n
.text:0000000000018D00                 cmp     rdx, [rax+8]
.text:0000000000018D04                 jnz     short loc_18CDF
.text:0000000000018D06                 mov     rsi, [rax]      ; s2
.text:0000000000018D09                 mov     rdi, [r14]      ; s1
.text:0000000000018D0C                 mov     byte ptr [rbp+var_110], cl
.text:0000000000018D12                 call    _memcmp
.text:0000000000018D17                 test    eax, eax
.text:0000000000018D19                 movzx   ecx, byte ptr [rbp+var_110]
.text:0000000000018D20                 jnz     short loc_18CDF
.text:0000000000018D22
.text:0000000000018D22 loc_18D22:                              ; CODE XREF: knuth_morris_pratt_multibyte+2BD↑j
.text:0000000000018D22                 add     rbx, 1
.text:0000000000018D26                 mov     rax, r15
.text:0000000000018D29                 sub     rax, rbx
.text:0000000000018D2C                 mov     [r13+r15*8+0], rax
.text:0000000000018D31
.text:0000000000018D31 loc_18D31:                              ; CODE XREF: knuth_morris_pratt_multibyte+87D↓j
.text:0000000000018D31                 add     r15, 1
.text:0000000000018D35                 add     r14, 30h ; '0'
.text:0000000000018D39                 cmp     [rbp+var_108], r15
.text:0000000000018D40                 jnz     loc_18CC8
.text:0000000000018D46
.text:0000000000018D46 loc_18D46:                              ; CODE XREF: knuth_morris_pratt_multibyte+290↑j
.text:0000000000018D46                 mov     rax, [rbp+var_128]
.text:0000000000018D4D                 lea     rbx, [rbp+var_80]
.text:0000000000018D51                 mov     [rbp+var_C0], 0
.text:0000000000018D58                 mov     [rbp+var_BC], 0
.text:0000000000018D63                 mov     [rbp+var_B4], 0
.text:0000000000018D6A                 xor     r15d, r15d
.text:0000000000018D6D                 mov     [rbp+var_80], 0
.text:0000000000018D71                 mov     [rbp+var_7C], 0
.text:0000000000018D79                 mov     qword ptr [rax], 0
.text:0000000000018D80                 mov     rax, [rbp+var_118]
.text:0000000000018D87                 mov     [rbp+var_118], rbx
.text:0000000000018D8E                 add     rbx, 4
.text:0000000000018D92                 mov     [rbp+var_74], 0
.text:0000000000018D96                 mov     [rbp+ps], rbx
.text:0000000000018D9D                 lea     rbx, [rbp+var_C0]
.text:0000000000018DA4                 mov     [rbp+s], rax
.text:0000000000018DAB                 mov     [rbp+s2], rax
.text:0000000000018DAF                 xor     eax, eax
.text:0000000000018DB1                 nop     dword ptr [rax+00000000h]
.text:0000000000018DB8
.text:0000000000018DB8 loc_18DB8:                              ; CODE XREF: knuth_morris_pratt_multibyte+3E5↓j
.text:0000000000018DB8                                         ; knuth_morris_pratt_multibyte+843↓j
.text:0000000000018DB8                 test    al, al
.text:0000000000018DBA                 jz      loc_18F9C
.text:0000000000018DC0                 cmp     [rbp+var_60], 0
.text:0000000000018DC4                 jnz     loc_18F56
.text:0000000000018DCA
.text:0000000000018DCA loc_18DCA:                              ; CODE XREF: knuth_morris_pratt_multibyte+860↓j
.text:0000000000018DCA                                         ; knuth_morris_pratt_multibyte+965↓j
.text:0000000000018DCA                 lea     rax, [r15+r15*2]
.text:0000000000018DCE                 shl     rax, 4
.text:0000000000018DD2                 add     rax, r12
.text:0000000000018DD5
.text:0000000000018DD5 loc_18DD5:                              ; CODE XREF: knuth_morris_pratt_multibyte+550↓j
.text:0000000000018DD5                 mov     rdx, [rax+8]    ; n
.text:0000000000018DD9                 cmp     rdx, [rbp+var_68]
.text:0000000000018DDD                 jz      loc_19170
.text:0000000000018DE3
.text:0000000000018DE3 loc_18DE3:                              ; CODE XREF: knuth_morris_pratt_multibyte+559↓j
.text:0000000000018DE3                                         ; knuth_morris_pratt_multibyte+75E↓j
.text:0000000000018DE3                 test    r15, r15
.text:0000000000018DE6                 jz      loc_191C0
.text:0000000000018DEC                 mov     r14, [r13+r15*8+0]
.text:0000000000018DF1                 mov     rax, r15
.text:0000000000018DF4                 sub     rax, r14
.text:0000000000018DF7                 test    r14, r14
.text:0000000000018DFA                 mov     [rbp+var_110], rax
.text:0000000000018E01                 movzx   eax, [rbp+var_74]
.text:0000000000018E05                 jz      short loc_18DB8
.text:0000000000018E07                 cmp     [rbp+var_B4], 0
.text:0000000000018E0E                 jz      short loc_18E38
.text:0000000000018E10                 cmp     [rbp+var_A0], 0
.text:0000000000018E17                 jnz     short loc_18E8C
.text:0000000000018E19
.text:0000000000018E19 loc_18E19:                              ; CODE XREF: knuth_morris_pratt_multibyte+474↓j
.text:0000000000018E19                                         ; knuth_morris_pratt_multibyte+742↓j ...
.text:0000000000018E19                 mov     rax, [rbp+var_A8]
.text:0000000000018E20                 add     [rbp+s], rax
.text:0000000000018E27                 sub     r14, 1
.text:0000000000018E2B                 mov     [rbp+var_B4], 0
.text:0000000000018E32                 jz      loc_19258
.text:0000000000018E38
.text:0000000000018E38 loc_18E38:                              ; CODE XREF: knuth_morris_pratt_multibyte+3EE↑j
.text:0000000000018E38                 cmp     [rbp+var_C0], 0
.text:0000000000018E3F                 jnz     loc_190B0
.text:0000000000018E45                 mov     rcx, [rbp+s]
.text:0000000000018E4C                 lea     rsi, is_basic_table
.text:0000000000018E53                 movzx   edx, byte ptr [rcx]
.text:0000000000018E56                 mov     eax, edx
.text:0000000000018E58                 shr     al, 5
.text:0000000000018E5B                 and     eax, 7
.text:0000000000018E5E                 mov     eax, [rsi+rax*4]
.text:0000000000018E61                 bt      eax, edx
.text:0000000000018E64                 jnb     loc_19098
.text:0000000000018E6A                 mov     [rbp+var_A8], 1
.text:0000000000018E75                 movsx   eax, byte ptr [rcx]
.text:0000000000018E78                 mov     [rbp+var_A0], 1
.text:0000000000018E7F                 mov     [rbp+var_B4], 1
.text:0000000000018E86                 mov     [rbp+var_9C], eax
.text:0000000000018E8C
.text:0000000000018E8C loc_18E8C:                              ; CODE XREF: knuth_morris_pratt_multibyte+3F7↑j
.text:0000000000018E8C                                         ; knuth_morris_pratt_multibyte+721↓j ...
.text:0000000000018E8C                 mov     esi, [rbp+var_9C]
.text:0000000000018E92                 test    esi, esi
.text:0000000000018E94                 jnz     short loc_18E19
.text:0000000000018E96
.text:0000000000018E96 loc_18E96:                              ; CODE XREF: knuth_morris_pratt_multibyte+809↓j
.text:0000000000018E96                 call    _abort
.text:0000000000018E96 ; ---------------------------------------------------------------------------
.text:0000000000018E9B                 align 20h
.text:0000000000018EA0
.text:0000000000018EA0 loc_18EA0:                              ; CODE XREF: knuth_morris_pratt_multibyte+5C↑j
.text:0000000000018EA0                                         ; knuth_morris_pratt_multibyte+65↑j ...
.text:0000000000018EA0                 xor     eax, eax
.text:0000000000018EA2
.text:0000000000018EA2 loc_18EA2:                              ; CODE XREF: knuth_morris_pratt_multibyte+66D↓j
.text:0000000000018EA2                                         ; knuth_morris_pratt_multibyte+A1A↓j
.text:0000000000018EA2                 mov     rbx, [rbp+var_38]
.text:0000000000018EA6                 xor     rbx, fs:28h
.text:0000000000018EAF                 jnz     loc_1945E
.text:0000000000018EB5                 lea     rsp, [rbp-28h]
.text:0000000000018EB9                 pop     rbx
.text:0000000000018EBA                 pop     r12
.text:0000000000018EBC                 pop     r13
.text:0000000000018EBE                 pop     r14
.text:0000000000018EC0                 pop     r15
.text:0000000000018EC2                 pop     rbp
.text:0000000000018EC3                 retn
.text:0000000000018EC3 ; ---------------------------------------------------------------------------
.text:0000000000018EC4                 align 8
.text:0000000000018EC8
.text:0000000000018EC8 loc_18EC8:                              ; CODE XREF: knuth_morris_pratt_multibyte+127↑j
.text:0000000000018EC8                 mov     rdi, [rbp+ps]   ; ps
.text:0000000000018ECF                 call    _mbsinit
.text:0000000000018ED4                 test    eax, eax
.text:0000000000018ED6                 jz      loc_1943F
.text:0000000000018EDC                 mov     [rbp+var_100], r14b
.text:0000000000018EE3                 jmp     loc_18BDE
.text:0000000000018EE3 ; ---------------------------------------------------------------------------
.text:0000000000018EE8                 align 10h
.text:0000000000018EF0
.text:0000000000018EF0 loc_18EF0:                              ; CODE XREF: knuth_morris_pratt_multibyte+179↑j
.text:0000000000018EF0                 lea     rcx, [r15+18h]
.text:0000000000018EF4                 mov     rdi, rcx        ; dest
.text:0000000000018EF7                 call    _memcpy
.text:0000000000018EFC                 mov     rdx, [rbp+n]
.text:0000000000018F03                 mov     [r15], rax
.text:0000000000018F06                 movzx   eax, [rbp+var_E0]
.text:0000000000018F0D                 jmp     loc_18BA2
.text:0000000000018F0D ; ---------------------------------------------------------------------------
.text:0000000000018F12                 align 8
.text:0000000000018F18
.text:0000000000018F18 loc_18F18:                              ; CODE XREF: knuth_morris_pratt_multibyte+201↑j
.text:0000000000018F18                 mov     [rbp+n], 1
.text:0000000000018F23                 mov     [rbp+var_E0], 0
.text:0000000000018F2A                 xor     eax, eax
.text:0000000000018F2C                 mov     [rbp+var_F4], r14b
.text:0000000000018F33                 jmp     loc_18B84
.text:0000000000018F33 ; ---------------------------------------------------------------------------
.text:0000000000018F38                 align 20h
.text:0000000000018F40
.text:0000000000018F40 loc_18F40:                              ; CODE XREF: knuth_morris_pratt_multibyte+59E↓j
.text:0000000000018F40                 mov     [rbp+var_68], 1
.text:0000000000018F48                 movsx   eax, byte ptr [rcx]
.text:0000000000018F4B                 mov     [rbp+var_60], 1
.text:0000000000018F4F                 mov     [rbp+var_74], 1
.text:0000000000018F53                 mov     [rbp+var_5C], eax
.text:0000000000018F56
.text:0000000000018F56 loc_18F56:                              ; CODE XREF: knuth_morris_pratt_multibyte+3A4↑j
.text:0000000000018F56                                         ; knuth_morris_pratt_multibyte+974↓j
.text:0000000000018F56                 mov     edx, [rbp+var_5C]
.text:0000000000018F59                 test    edx, edx
.text:0000000000018F5B                 jz      loc_19080
.text:0000000000018F61
.text:0000000000018F61 loc_18F61:                              ; CODE XREF: knuth_morris_pratt_multibyte+65A↓j
.text:0000000000018F61                 lea     rax, [r15+r15*2]
.text:0000000000018F65                 shl     rax, 4
.text:0000000000018F69                 add     rax, r12
.text:0000000000018F6C                 cmp     byte ptr [rax+10h], 0
.text:0000000000018F70                 jz      loc_18DD5
.text:0000000000018F76                 cmp     [rax+14h], edx
.text:0000000000018F79                 jnz     loc_18DE3
.text:0000000000018F7F
.text:0000000000018F7F loc_18F7F:                              ; CODE XREF: knuth_morris_pratt_multibyte+764↓j
.text:0000000000018F7F                 add     r15, 1
.text:0000000000018F83                 mov     rax, [rbp+var_68]
.text:0000000000018F87                 add     [rbp+s2], rax
.text:0000000000018F8B                 cmp     [rbp+var_108], r15
.text:0000000000018F92                 mov     [rbp+var_74], 0
.text:0000000000018F96                 jz      loc_1941C
.text:0000000000018F9C
.text:0000000000018F9C loc_18F9C:                              ; CODE XREF: knuth_morris_pratt_multibyte+39A↑j
.text:0000000000018F9C                                         ; knuth_morris_pratt_multibyte+830↓j
.text:0000000000018F9C                 cmp     [rbp+var_80], 0
.text:0000000000018FA0                 jnz     short loc_18FD8
.text:0000000000018FA2                 mov     rcx, [rbp+s2]
.text:0000000000018FA6                 lea     rsi, is_basic_table
.text:0000000000018FAD                 movzx   edx, byte ptr [rcx]
.text:0000000000018FB0                 mov     eax, edx
.text:0000000000018FB2                 shr     al, 5
.text:0000000000018FB5                 and     eax, 7
.text:0000000000018FB8                 mov     eax, [rsi+rax*4]
.text:0000000000018FBB                 bt      eax, edx
.text:0000000000018FBE                 jb      short loc_18F40
.text:0000000000018FC0                 mov     rdi, [rbp+ps]   ; ps
.text:0000000000018FC7                 call    _mbsinit
.text:0000000000018FCC                 test    eax, eax
.text:0000000000018FCE                 jz      loc_1943F
.text:0000000000018FD4                 mov     [rbp+var_80], 1
.text:0000000000018FD8
.text:0000000000018FD8 loc_18FD8:                              ; CODE XREF: knuth_morris_pratt_multibyte+580↑j
.text:0000000000018FD8                 call    ___ctype_get_mb_cur_max
.text:0000000000018FDD                 mov     r8, [rbp+s2]
.text:0000000000018FE1                 mov     rsi, rax
.text:0000000000018FE4                 mov     rdi, r8
.text:0000000000018FE7                 mov     [rbp+var_110], r8
.text:0000000000018FEE                 call    strnlen1
.text:0000000000018FF3                 mov     rsi, [rbp+var_118]
.text:0000000000018FFA                 mov     r8, [rbp+var_110]
.text:0000000000019001                 mov     rdx, rax
.text:0000000000019004                 lea     rcx, [rsi+4]
.text:0000000000019008                 lea     rdi, [rsi+24h]
.text:000000000001900C                 mov     rsi, r8
.text:000000000001900F                 call    rpl_mbrtowc
.text:0000000000019014                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000019018                 mov     [rbp+var_68], rax
.text:000000000001901C                 jz      loc_19270
.text:0000000000019022                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000019026                 jz      loc_19370
.text:000000000001902C                 test    rax, rax
.text:000000000001902F                 jnz     short loc_19051
.text:0000000000019031                 mov     rax, [rbp+s2]
.text:0000000000019035                 mov     [rbp+var_68], 1
.text:000000000001903D                 cmp     byte ptr [rax], 0
.text:0000000000019040                 jnz     loc_19463
.text:0000000000019046                 mov     eax, [rbp+var_5C]
.text:0000000000019049                 test    eax, eax
.text:000000000001904B                 jnz     loc_19482
.text:0000000000019051
.text:0000000000019051 loc_19051:                              ; CODE XREF: knuth_morris_pratt_multibyte+60F↑j
.text:0000000000019051                 mov     rax, [rbp+var_118]
.text:0000000000019058                 mov     [rbp+var_60], 1
.text:000000000001905C                 lea     rdi, [rax+4]    ; ps
.text:0000000000019060                 call    _mbsinit
.text:0000000000019065                 test    eax, eax
.text:0000000000019067                 jz      loc_19390
.text:000000000001906D                 mov     edx, [rbp+var_5C]
.text:0000000000019070                 mov     [rbp+var_80], 0
.text:0000000000019074                 mov     [rbp+var_74], 1
.text:0000000000019078                 test    edx, edx
.text:000000000001907A                 jnz     loc_18F61
.text:0000000000019080
.text:0000000000019080 loc_19080:                              ; CODE XREF: knuth_morris_pratt_multibyte+53B↑j
.text:0000000000019080                 mov     rdi, r12
.text:0000000000019083                 call    freea
.text:0000000000019088                 mov     eax, 1
.text:000000000001908D                 jmp     loc_18EA2
.text:000000000001908D ; ---------------------------------------------------------------------------
.text:0000000000019092                 align 8
.text:0000000000019098
.text:0000000000019098 loc_19098:                              ; CODE XREF: knuth_morris_pratt_multibyte+444↑j
.text:0000000000019098                 lea     rdi, [rbx+4]    ; ps
.text:000000000001909C                 call    _mbsinit
.text:00000000000190A1                 test    eax, eax
.text:00000000000190A3                 jz      loc_1943F
.text:00000000000190A9                 mov     [rbp+var_C0], 1
.text:00000000000190B0
.text:00000000000190B0 loc_190B0:                              ; CODE XREF: knuth_morris_pratt_multibyte+41F↑j
.text:00000000000190B0                 call    ___ctype_get_mb_cur_max
.text:00000000000190B5                 mov     r15, [rbp+s]
.text:00000000000190BC                 mov     rsi, rax
.text:00000000000190BF                 mov     rdi, r15
.text:00000000000190C2                 call    strnlen1
.text:00000000000190C7                 lea     rcx, [rbx+4]
.text:00000000000190CB                 lea     rdi, [rbx+24h]
.text:00000000000190CF                 mov     rdx, rax
.text:00000000000190D2                 mov     rsi, r15
.text:00000000000190D5                 call    rpl_mbrtowc
.text:00000000000190DA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000190DE                 mov     [rbp+var_A8], rax
.text:00000000000190E5                 jz      short loc_19150
.text:00000000000190E7                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000190EB                 jz      loc_19190
.text:00000000000190F1                 test    rax, rax
.text:00000000000190F4                 jnz     short loc_1911F
.text:00000000000190F6                 mov     rax, [rbp+s]
.text:00000000000190FD                 mov     [rbp+var_A8], 1
.text:0000000000019108                 cmp     byte ptr [rax], 0
.text:000000000001910B                 jnz     loc_19463
.text:0000000000019111                 mov     edi, [rbp+var_9C]
.text:0000000000019117                 test    edi, edi
.text:0000000000019119                 jnz     loc_19482
.text:000000000001911F
.text:000000000001911F loc_1911F:                              ; CODE XREF: knuth_morris_pratt_multibyte+6D4↑j
.text:000000000001911F                 lea     rdi, [rbx+4]    ; ps
.text:0000000000019123                 mov     [rbp+var_A0], 1
.text:000000000001912A                 call    _mbsinit
.text:000000000001912F                 test    eax, eax
.text:0000000000019131                 jz      short loc_191B0
.text:0000000000019133                 mov     [rbp+var_C0], 0
.text:000000000001913A                 mov     [rbp+var_B4], 1
.text:0000000000019141                 jmp     loc_18E8C
.text:0000000000019141 ; ---------------------------------------------------------------------------
.text:0000000000019146                 align 10h
.text:0000000000019150
.text:0000000000019150 loc_19150:                              ; CODE XREF: knuth_morris_pratt_multibyte+6C5↑j
.text:0000000000019150                 mov     [rbp+var_A8], 1
.text:000000000001915B                 mov     [rbp+var_A0], 0
.text:0000000000019162                 jmp     loc_18E19
.text:0000000000019162 ; ---------------------------------------------------------------------------
.text:0000000000019167                 align 10h
.text:0000000000019170
.text:0000000000019170 loc_19170:                              ; CODE XREF: knuth_morris_pratt_multibyte+3BD↑j
.text:0000000000019170                 mov     rsi, [rbp+s2]   ; s2
.text:0000000000019174                 mov     rdi, [rax]      ; s1
.text:0000000000019177                 call    _memcmp
.text:000000000001917C                 test    eax, eax
.text:000000000001917E                 jnz     loc_18DE3
.text:0000000000019184                 jmp     loc_18F7F
.text:0000000000019184 ; ---------------------------------------------------------------------------
.text:0000000000019189                 align 10h
.text:0000000000019190
.text:0000000000019190 loc_19190:                              ; CODE XREF: knuth_morris_pratt_multibyte+6CB↑j
.text:0000000000019190                 mov     rdi, [rbp+s]    ; s
.text:0000000000019197                 call    _strlen
.text:000000000001919C                 mov     [rbp+var_A0], 0
.text:00000000000191A3                 mov     [rbp+var_A8], rax
.text:00000000000191AA                 jmp     loc_18E19
.text:00000000000191AA ; ---------------------------------------------------------------------------
.text:00000000000191AF                 align 10h
.text:00000000000191B0
.text:00000000000191B0 loc_191B0:                              ; CODE XREF: knuth_morris_pratt_multibyte+711↑j
.text:00000000000191B0                 mov     [rbp+var_B4], 1
.text:00000000000191B7                 jmp     loc_18E8C
.text:00000000000191B7 ; ---------------------------------------------------------------------------
.text:00000000000191BC                 align 20h
.text:00000000000191C0
.text:00000000000191C0 loc_191C0:                              ; CODE XREF: knuth_morris_pratt_multibyte+3C6↑j
.text:00000000000191C0                 cmp     [rbp+var_B4], 0
.text:00000000000191C7                 jnz     loc_19288
.text:00000000000191CD                 cmp     [rbp+var_C0], 0
.text:00000000000191D4                 jnz     loc_192C0
.text:00000000000191DA                 mov     rcx, [rbp+s]
.text:00000000000191E1                 lea     rsi, is_basic_table
.text:00000000000191E8                 movzx   edx, byte ptr [rcx]
.text:00000000000191EB                 mov     eax, edx
.text:00000000000191ED                 shr     al, 5
.text:00000000000191F0                 and     eax, 7
.text:00000000000191F3                 mov     eax, [rsi+rax*4]
.text:00000000000191F6                 bt      eax, edx
.text:00000000000191F9                 jnb     loc_192A8
.text:00000000000191FF                 mov     [rbp+var_A8], 1
.text:000000000001920A                 movsx   eax, byte ptr [rcx]
.text:000000000001920D                 mov     [rbp+var_A0], 1
.text:0000000000019214                 mov     [rbp+var_B4], 1
.text:000000000001921B                 mov     [rbp+var_9C], eax
.text:0000000000019221
.text:0000000000019221 loc_19221:                              ; CODE XREF: knuth_morris_pratt_multibyte+871↓j
.text:0000000000019221                                         ; knuth_morris_pratt_multibyte+947↓j ...
.text:0000000000019221                 mov     edx, [rbp+var_9C]
.text:0000000000019227                 test    edx, edx
.text:0000000000019229                 jz      loc_18E96
.text:000000000001922F
.text:000000000001922F loc_1922F:                              ; CODE XREF: knuth_morris_pratt_multibyte+86F↓j
.text:000000000001922F                                         ; knuth_morris_pratt_multibyte+9BF↓j ...
.text:000000000001922F                 mov     rax, [rbp+var_A8]
.text:0000000000019236                 mov     [rbp+var_B4], 0
.text:000000000001923D                 add     [rbp+s], rax
.text:0000000000019244                 mov     [rbp+var_74], 0
.text:0000000000019248                 mov     rax, [rbp+var_68]
.text:000000000001924C                 add     [rbp+s2], rax
.text:0000000000019250                 jmp     loc_18F9C
.text:0000000000019250 ; ---------------------------------------------------------------------------
.text:0000000000019255                 align 8
.text:0000000000019258
.text:0000000000019258 loc_19258:                              ; CODE XREF: knuth_morris_pratt_multibyte+412↑j
.text:0000000000019258                 movzx   eax, [rbp+var_74]
.text:000000000001925C                 mov     r15, [rbp+var_110]
.text:0000000000019263                 jmp     loc_18DB8
.text:0000000000019263 ; ---------------------------------------------------------------------------
.text:0000000000019268                 align 10h
.text:0000000000019270
.text:0000000000019270 loc_19270:                              ; CODE XREF: knuth_morris_pratt_multibyte+5FC↑j
.text:0000000000019270                 mov     [rbp+var_68], 1
.text:0000000000019278                 mov     [rbp+var_60], 0
.text:000000000001927C                 mov     [rbp+var_74], 1
.text:0000000000019280                 jmp     loc_18DCA
.text:0000000000019280 ; ---------------------------------------------------------------------------
.text:0000000000019285                 align 8
.text:0000000000019288
.text:0000000000019288 loc_19288:                              ; CODE XREF: knuth_morris_pratt_multibyte+7A7↑j
.text:0000000000019288                 cmp     [rbp+var_A0], 0
.text:000000000001928F                 jz      short loc_1922F
.text:0000000000019291                 jmp     short loc_19221
.text:0000000000019291 ; ---------------------------------------------------------------------------
.text:0000000000019293                 align 8
.text:0000000000019298
.text:0000000000019298 loc_19298:                              ; CODE XREF: knuth_morris_pratt_multibyte+2C2↑j
.text:0000000000019298                 mov     [r13+r15*8+0], r15
.text:000000000001929D                 jmp     loc_18D31
.text:000000000001929D ; ---------------------------------------------------------------------------
.text:00000000000192A2                 align 8
.text:00000000000192A8
.text:00000000000192A8 loc_192A8:                              ; CODE XREF: knuth_morris_pratt_multibyte+7D9↑j
.text:00000000000192A8                 lea     rdi, [rbx+4]    ; ps
.text:00000000000192AC                 call    _mbsinit
.text:00000000000192B1                 test    eax, eax
.text:00000000000192B3                 jz      loc_1943F
.text:00000000000192B9                 mov     [rbp+var_C0], 1
.text:00000000000192C0
.text:00000000000192C0 loc_192C0:                              ; CODE XREF: knuth_morris_pratt_multibyte+7B4↑j
.text:00000000000192C0                 call    ___ctype_get_mb_cur_max
.text:00000000000192C5                 mov     r8, [rbp+s]
.text:00000000000192CC                 mov     rsi, rax
.text:00000000000192CF                 mov     rdi, r8
.text:00000000000192D2                 mov     [rbp+var_110], r8
.text:00000000000192D9                 call    strnlen1
.text:00000000000192DE                 mov     r8, [rbp+var_110]
.text:00000000000192E5                 lea     rcx, [rbx+4]
.text:00000000000192E9                 lea     rdi, [rbx+24h]
.text:00000000000192ED                 mov     rdx, rax
.text:00000000000192F0                 mov     rsi, r8
.text:00000000000192F3                 call    rpl_mbrtowc
.text:00000000000192F8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000192FC                 mov     [rbp+var_A8], rax
.text:0000000000019303                 jz      loc_193CD
.text:0000000000019309                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001930D                 jz      loc_193FD
.text:0000000000019313                 test    rax, rax
.text:0000000000019316                 jnz     short loc_19341
.text:0000000000019318                 mov     rax, [rbp+s]
.text:000000000001931F                 mov     [rbp+var_A8], 1
.text:000000000001932A                 cmp     byte ptr [rax], 0
.text:000000000001932D                 jnz     loc_19463
.text:0000000000019333                 mov     ecx, [rbp+var_9C]
.text:0000000000019339                 test    ecx, ecx
.text:000000000001933B                 jnz     loc_19482
.text:0000000000019341
.text:0000000000019341 loc_19341:                              ; CODE XREF: knuth_morris_pratt_multibyte+8F6↑j
.text:0000000000019341                 lea     rdi, [rbx+4]    ; ps
.text:0000000000019345                 mov     [rbp+var_A0], 1
.text:000000000001934C                 call    _mbsinit
.text:0000000000019351                 test    eax, eax
.text:0000000000019353                 jz      loc_193F1
.text:0000000000019359                 mov     [rbp+var_C0], 0
.text:0000000000019360                 mov     [rbp+var_B4], 1
.text:0000000000019367                 jmp     loc_19221
.text:0000000000019367 ; ---------------------------------------------------------------------------
.text:000000000001936C                 align 10h
.text:0000000000019370
.text:0000000000019370 loc_19370:                              ; CODE XREF: knuth_morris_pratt_multibyte+606↑j
.text:0000000000019370                 mov     rdi, [rbp+s2]   ; s
.text:0000000000019374                 call    _strlen
.text:0000000000019379                 mov     [rbp+var_60], 0
.text:000000000001937D                 mov     [rbp+var_68], rax
.text:0000000000019381                 mov     [rbp+var_74], 1
.text:0000000000019385                 jmp     loc_18DCA
.text:0000000000019385 ; ---------------------------------------------------------------------------
.text:000000000001938A                 align 10h
.text:0000000000019390
.text:0000000000019390 loc_19390:                              ; CODE XREF: knuth_morris_pratt_multibyte+647↑j
.text:0000000000019390                 mov     [rbp+var_74], 1
.text:0000000000019394                 jmp     loc_18F56
.text:0000000000019399 ; ---------------------------------------------------------------------------
.text:0000000000019399
.text:0000000000019399 loc_19399:                              ; CODE XREF: knuth_morris_pratt_multibyte+20B↑j
.text:0000000000019399                 mov     rdi, [rbp+src]  ; s
.text:00000000000193A0                 call    _strlen
.text:00000000000193A5                 mov     [rbp+var_E0], 0
.text:00000000000193AC                 mov     [rbp+n], rax
.text:00000000000193B3                 xor     eax, eax
.text:00000000000193B5                 mov     [rbp+var_F4], r14b
.text:00000000000193BC                 jmp     loc_18B84
.text:00000000000193C1 ; ---------------------------------------------------------------------------
.text:00000000000193C1
.text:00000000000193C1 loc_193C1:                              ; CODE XREF: knuth_morris_pratt_multibyte+253↑j
.text:00000000000193C1                 mov     [rbp+var_F4], r14b
.text:00000000000193C8                 jmp     loc_18B6F
.text:00000000000193CD ; ---------------------------------------------------------------------------
.text:00000000000193CD
.text:00000000000193CD loc_193CD:                              ; CODE XREF: knuth_morris_pratt_multibyte+8E3↑j
.text:00000000000193CD                 mov     [rbp+var_A8], 1
.text:00000000000193D8                 mov     [rbp+var_A0], 0
.text:00000000000193DF                 jmp     loc_1922F
.text:00000000000193E4 ; ---------------------------------------------------------------------------
.text:00000000000193E4
.text:00000000000193E4 loc_193E4:                              ; CODE XREF: knuth_morris_pratt_multibyte+88↑j
.text:00000000000193E4                 call    mmalloca
.text:00000000000193E9                 mov     r12, rax
.text:00000000000193EC                 jmp     loc_18ACA
.text:00000000000193F1 ; ---------------------------------------------------------------------------
.text:00000000000193F1
.text:00000000000193F1 loc_193F1:                              ; CODE XREF: knuth_morris_pratt_multibyte+933↑j
.text:00000000000193F1                 mov     [rbp+var_B4], 1
.text:00000000000193F8                 jmp     loc_19221
.text:00000000000193FD ; ---------------------------------------------------------------------------
.text:00000000000193FD
.text:00000000000193FD loc_193FD:                              ; CODE XREF: knuth_morris_pratt_multibyte+8ED↑j
.text:00000000000193FD                 mov     rdi, [rbp+s]    ; s
.text:0000000000019404                 call    _strlen
.text:0000000000019409                 mov     [rbp+var_A0], 0
.text:0000000000019410                 mov     [rbp+var_A8], rax
.text:0000000000019417                 jmp     loc_1922F
.text:000000000001941C ; ---------------------------------------------------------------------------
.text:000000000001941C
.text:000000000001941C loc_1941C:                              ; CODE XREF: knuth_morris_pratt_multibyte+576↑j
.text:000000000001941C                 mov     rax, [rbp+s]
.text:0000000000019423                 mov     rbx, [rbp+var_128]
.text:000000000001942A                 mov     rdi, r12
.text:000000000001942D                 mov     [rbx], rax
.text:0000000000019430                 call    freea
.text:0000000000019435                 mov     eax, 1
.text:000000000001943A                 jmp     loc_18EA2
.text:000000000001943F ; ---------------------------------------------------------------------------
.text:000000000001943F
.text:000000000001943F loc_1943F:                              ; CODE XREF: knuth_morris_pratt_multibyte+4B6↑j
.text:000000000001943F                                         ; knuth_morris_pratt_multibyte+5AE↑j ...
.text:000000000001943F                 lea     rcx, __PRETTY_FUNCTION___5056 ; "mbuiter_multi_next"
.text:0000000000019446                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000001944D                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:0000000000019454                 mov     edx, 96h        ; line
.text:0000000000019459                 call    ___assert_fail
.text:000000000001945E ; ---------------------------------------------------------------------------
.text:000000000001945E
.text:000000000001945E loc_1945E:                              ; CODE XREF: knuth_morris_pratt_multibyte+48F↑j
.text:000000000001945E                 call    ___stack_chk_fail
.text:0000000000019463 ; ---------------------------------------------------------------------------
.text:0000000000019463
.text:0000000000019463 loc_19463:                              ; CODE XREF: knuth_morris_pratt_multibyte+22B↑j
.text:0000000000019463                                         ; knuth_morris_pratt_multibyte+620↑j ...
.text:0000000000019463                 lea     rcx, __PRETTY_FUNCTION___5056 ; "mbuiter_multi_next"
.text:000000000001946A                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000019471                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:0000000000019478                 mov     edx, 0B2h       ; line
.text:000000000001947D                 call    ___assert_fail
.text:0000000000019482 ; ---------------------------------------------------------------------------
.text:0000000000019482
.text:0000000000019482 loc_19482:                              ; CODE XREF: knuth_morris_pratt_multibyte+23B↑j
.text:0000000000019482                                         ; knuth_morris_pratt_multibyte+62B↑j ...
.text:0000000000019482                 call    mbuiter_multi_next_part_0_0
.text:0000000000019487 ; ---------------------------------------------------------------------------
.text:0000000000019487
.text:0000000000019487 loc_19487:                              ; CODE XREF: knuth_morris_pratt_multibyte+51↑j
.text:0000000000019487                 mov     ecx, 1
.text:000000000001948C                 jmp     loc_18A79
.text:000000000001948C ; } // starts at 18A20
.text:000000000001948C knuth_morris_pratt_multibyte endp
.text:000000000001948C
.text:000000000001948C ; ---------------------------------------------------------------------------
.text:0000000000019491                 align 20h
.text:00000000000194A0
.text:00000000000194A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000194A0
.text:00000000000194A0
.text:00000000000194A0                 public mbsstr
.text:00000000000194A0 mbsstr          proc near               ; CODE XREF: mbsstr_trimmed_wordbounded+5E↑p
.text:00000000000194A0
.text:00000000000194A0 var_1C8         = qword ptr -1C8h
.text:00000000000194A0 string          = qword ptr -1C0h
.text:00000000000194A0 var_1B8         = qword ptr -1B8h
.text:00000000000194A0 var_1B0         = qword ptr -1B0h
.text:00000000000194A0 var_1A8         = qword ptr -1A8h
.text:00000000000194A0 var_1A0         = qword ptr -1A0h
.text:00000000000194A0 var_190         = qword ptr -190h
.text:00000000000194A0 var_188         = byte ptr -188h
.text:00000000000194A0 var_184         = qword ptr -184h
.text:00000000000194A0 var_17C         = byte ptr -17Ch
.text:00000000000194A0 var_178         = qword ptr -178h
.text:00000000000194A0 var_170         = qword ptr -170h
.text:00000000000194A0 var_168         = byte ptr -168h
.text:00000000000194A0 var_164         = dword ptr -164h
.text:00000000000194A0 var_148         = byte ptr -148h
.text:00000000000194A0 var_144         = mbstate_t ptr -144h
.text:00000000000194A0 var_13C         = byte ptr -13Ch
.text:00000000000194A0 s               = qword ptr -138h
.text:00000000000194A0 var_130         = qword ptr -130h
.text:00000000000194A0 var_128         = byte ptr -128h
.text:00000000000194A0 var_124         = dword ptr -124h
.text:00000000000194A0 ps              = mbstate_t ptr -108h
.text:00000000000194A0 n               = qword ptr -0F8h
.text:00000000000194A0 var_E8          = xmmword ptr -0E8h
.text:00000000000194A0 var_D8          = xmmword ptr -0D8h
.text:00000000000194A0 var_C8          = xmmword ptr -0C8h
.text:00000000000194A0 s1              = qword ptr -0B8h
.text:00000000000194A0 var_A8          = xmmword ptr -0A8h
.text:00000000000194A0 var_98          = xmmword ptr -98h
.text:00000000000194A0 var_88          = byte ptr -88h
.text:00000000000194A0 var_7C          = byte ptr -7Ch
.text:00000000000194A0 s2              = qword ptr -78h
.text:00000000000194A0 var_70          = qword ptr -70h
.text:00000000000194A0 var_68          = byte ptr -68h
.text:00000000000194A0 var_64          = dword ptr -64h
.text:00000000000194A0 var_40          = qword ptr -40h
.text:00000000000194A0
.text:00000000000194A0 ; __unwind {
.text:00000000000194A0                 push    r15
.text:00000000000194A2                 push    r14
.text:00000000000194A4                 push    r13
.text:00000000000194A6                 push    r12
.text:00000000000194A8                 mov     r12, rdi
.text:00000000000194AB                 push    rbp
.text:00000000000194AC                 push    rbx
.text:00000000000194AD                 mov     rbx, rsi
.text:00000000000194B0                 sub     rsp, 198h
.text:00000000000194B7                 mov     rax, fs:28h
.text:00000000000194C0                 mov     [rsp+1C8h+var_40], rax
.text:00000000000194C8                 xor     eax, eax
.text:00000000000194CA                 mov     [rsp+1C8h+string], rsi
.text:00000000000194CF                 call    ___ctype_get_mb_cur_max
.text:00000000000194D4                 cmp     rax, 1
.text:00000000000194D8                 ja      loc_195C0
.text:00000000000194DE                 mov     rax, [rsp+1C8h+string]
.text:00000000000194E3                 movzx   r15d, byte ptr [rax]
.text:00000000000194E7                 mov     rax, r12
.text:00000000000194EA                 test    r15b, r15b
.text:00000000000194ED                 jz      loc_19626
.text:00000000000194F3                 movzx   esi, byte ptr [r12]
.text:00000000000194F8                 test    sil, sil
.text:00000000000194FB                 jz      loc_19CA0
.text:0000000000019501                 lea     rbx, [rsp+1C8h+var_190]
.text:0000000000019506                 mov     rbp, [rsp+1C8h+string]
.text:000000000001950B                 xor     r13d, r13d
.text:000000000001950E                 xor     edx, edx
.text:0000000000019510                 xor     r8d, r8d
.text:0000000000019513                 mov     eax, 1
.text:0000000000019518                 mov     [rsp+1C8h+var_1B8], rbx
.text:000000000001951D                 nop     dword ptr [rax]
.text:0000000000019520
.text:0000000000019520 loc_19520:                              ; CODE XREF: mbsstr+1BC↓j
.text:0000000000019520                 add     r13, 1
.text:0000000000019524                 cmp     sil, r15b
.text:0000000000019527                 lea     rbx, [rdx+1]
.text:000000000001952B                 lea     r14, [r12+1]
.text:0000000000019530                 jz      loc_19E10
.text:0000000000019536                 cmp     byte ptr [r12+1], 0
.text:000000000001953C                 jz      loc_19CA0
.text:0000000000019542
.text:0000000000019542 loc_19542:                              ; CODE XREF: mbsstr+996↓j
.text:0000000000019542                                         ; mbsstr+9C4↓j
.text:0000000000019542                 cmp     r13, 9
.text:0000000000019546                 setnbe  dl
.text:0000000000019549                 and     dl, al
.text:000000000001954B                 jz      loc_19652
.text:0000000000019551                 lea     rax, [r13+r13*4+0]
.text:0000000000019556                 cmp     rax, rbx
.text:0000000000019559                 ja      loc_19650
.text:000000000001955F                 test    rbp, rbp
.text:0000000000019562                 mov     byte ptr [rsp+1C8h+var_1C8], dl
.text:0000000000019565                 jz      short loc_19589
.text:0000000000019567                 mov     rsi, rbx
.text:000000000001956A                 mov     rdi, rbp        ; string
.text:000000000001956D                 sub     rsi, r8         ; maxlen
.text:0000000000019570                 call    _strnlen
.text:0000000000019575                 add     rbp, rax
.text:0000000000019578                 mov     r8, rbx
.text:000000000001957B                 movzx   edx, byte ptr [rsp+1C8h+var_1C8]
.text:000000000001957F                 cmp     byte ptr [rbp+0], 0
.text:0000000000019583                 jnz     loc_19650
.text:0000000000019589
.text:0000000000019589 loc_19589:                              ; CODE XREF: mbsstr+C5↑j
.text:0000000000019589                 mov     rbp, [rsp+1C8h+string]
.text:000000000001958E                 mov     [rsp+1C8h+var_1C8], r8
.text:0000000000019592                 mov     rdi, rbp        ; s
.text:0000000000019595                 call    _strlen
.text:000000000001959A                 mov     rcx, [rsp+1C8h+var_1B8]
.text:000000000001959F                 mov     rdx, rax
.text:00000000000195A2                 mov     rsi, rbp
.text:00000000000195A5                 mov     rdi, r14
.text:00000000000195A8                 call    knuth_morris_pratt
.text:00000000000195AD                 test    al, al
.text:00000000000195AF                 mov     r8, [rsp+1C8h+var_1C8]
.text:00000000000195B3                 jnz     loc_1A49F
.text:00000000000195B9                 xor     ebp, ebp
.text:00000000000195BB                 jmp     loc_19652
.text:00000000000195C0 ; ---------------------------------------------------------------------------
.text:00000000000195C0
.text:00000000000195C0 loc_195C0:                              ; CODE XREF: mbsstr+38↑j
.text:00000000000195C0                 mov     rax, rbx
.text:00000000000195C3                 lea     r13, is_basic_table
.text:00000000000195CA                 mov     [rsp+1C8h+var_178], rbx
.text:00000000000195CF                 movsx   edx, byte ptr [rax]
.text:00000000000195D2                 lea     rbx, [rsp+1C8h+var_188]
.text:00000000000195D7                 mov     [rsp+1C8h+var_188], 0
.text:00000000000195DC                 mov     [rsp+1C8h+var_184], 0
.text:00000000000195E5                 mov     [rsp+1C8h+var_17C], 0
.text:00000000000195EA                 lea     rbp, [rbx+4]
.text:00000000000195EE                 mov     eax, edx
.text:00000000000195F0                 shr     al, 5
.text:00000000000195F3                 and     eax, 7
.text:00000000000195F6                 mov     eax, [r13+rax*4+0]
.text:00000000000195FB                 bt      eax, edx
.text:00000000000195FE                 jnb     loc_1A2A0
.text:0000000000019604                 mov     [rsp+1C8h+var_170], 1
.text:000000000001960D                 mov     [rsp+1C8h+var_164], edx
.text:0000000000019611                 mov     [rsp+1C8h+var_168], 1
.text:0000000000019616                 mov     [rsp+1C8h+var_17C], 1
.text:000000000001961B
.text:000000000001961B loc_1961B:                              ; CODE XREF: mbsstr+E9D↓j
.text:000000000001961B                                         ; mbsstr+FD0↓j
.text:000000000001961B                 mov     eax, [rsp+1C8h+var_164]
.text:000000000001961F                 test    eax, eax
.text:0000000000019621                 jnz     short loc_1967B
.text:0000000000019623
.text:0000000000019623 loc_19623:                              ; CODE XREF: mbsstr+97C↓j
.text:0000000000019623                                         ; mbsstr+9D4↓j
.text:0000000000019623                 mov     rax, r12
.text:0000000000019626
.text:0000000000019626 loc_19626:                              ; CODE XREF: mbsstr+4D↑j
.text:0000000000019626                                         ; mbsstr+720↓j ...
.text:0000000000019626                 mov     rbx, [rsp+1C8h+var_40]
.text:000000000001962E                 xor     rbx, fs:28h
.text:0000000000019637                 jnz     loc_1A580
.text:000000000001963D                 add     rsp, 198h
.text:0000000000019644                 pop     rbx
.text:0000000000019645                 pop     rbp
.text:0000000000019646                 pop     r12
.text:0000000000019648                 pop     r13
.text:000000000001964A                 pop     r14
.text:000000000001964C                 pop     r15
.text:000000000001964E                 retn
.text:000000000001964E ; ---------------------------------------------------------------------------
.text:000000000001964F                 align 10h
.text:0000000000019650
.text:0000000000019650 loc_19650:                              ; CODE XREF: mbsstr+B9↑j
.text:0000000000019650                                         ; mbsstr+E3↑j
.text:0000000000019650                 mov     eax, edx
.text:0000000000019652
.text:0000000000019652 loc_19652:                              ; CODE XREF: mbsstr+AB↑j
.text:0000000000019652                                         ; mbsstr+11B↑j
.text:0000000000019652                 movzx   esi, byte ptr [r14]
.text:0000000000019656                 mov     r12, r14
.text:0000000000019659                 mov     rdx, rbx
.text:000000000001965C                 jmp     loc_19520
.text:000000000001965C ; ---------------------------------------------------------------------------
.text:0000000000019661                 align 8
.text:0000000000019668
.text:0000000000019668 loc_19668:                              ; CODE XREF: mbsstr+E45↓j
.text:0000000000019668                 mov     [rsp+1C8h+var_170], 1
.text:0000000000019671                 mov     [rsp+1C8h+var_168], 0
.text:0000000000019676                 mov     [rsp+1C8h+var_17C], 1
.text:000000000001967B
.text:000000000001967B loc_1967B:                              ; CODE XREF: mbsstr+181↑j
.text:000000000001967B                                         ; mbsstr+1044↓j
.text:000000000001967B                 mov     rax, [rsp+1C8h+string]
.text:0000000000019680                 mov     byte ptr [rsp+1C8h+ps.__count], 0
.text:0000000000019688                 xor     r14d, r14d
.text:000000000001968B                 xor     ebx, ebx
.text:000000000001968D                 cmp     byte ptr [rsp+1C8h+ps.__count], 0
.text:0000000000019695                 mov     [rsp+1C8h+var_148], 0
.text:000000000001969D                 mov     qword ptr [rsp+1C8h+var_144.__count], 0
.text:00000000000196A9                 mov     [rsp+1C8h+var_13C], 0
.text:00000000000196B1                 lea     rbp, [rsp+1C8h+var_88]
.text:00000000000196B9                 mov     [rsp+1C8h+s], rax
.text:00000000000196C1                 lea     rax, [rsp+1C8h+var_190]
.text:00000000000196C6                 mov     [rsp+1C8h+n], r12
.text:00000000000196CE                 mov     qword ptr [rsp+1C8h+ps.__value], 0
.text:00000000000196DA                 mov     byte ptr [rsp+1C8h+ps.__value+8], 0
.text:00000000000196E2                 lea     r15, [rsp+1C8h+var_C8]
.text:00000000000196EA                 mov     [rsp+1C8h+var_1A8], 0
.text:00000000000196F3                 mov     byte ptr [rsp+1C8h+var_1B8], 1
.text:00000000000196F8                 mov     [rsp+1C8h+var_1A0], rax
.text:00000000000196FD                 jnz     loc_19A13
.text:0000000000019703                 nop     dword ptr [rax+rax+00h]
.text:0000000000019708
.text:0000000000019708 loc_19708:                              ; CODE XREF: mbsstr+56D↓j
.text:0000000000019708                 mov     rcx, [rsp+1C8h+n]
.text:0000000000019710                 movzx   edx, byte ptr [rcx]
.text:0000000000019713                 mov     eax, edx
.text:0000000000019715                 shr     al, 5
.text:0000000000019718                 and     eax, 7
.text:000000000001971B                 mov     eax, [r13+rax*4+0]
.text:0000000000019720                 bt      eax, edx
.text:0000000000019723                 jnb     loc_19E80
.text:0000000000019729                 mov     [rsp+1C8h+n+8], 1
.text:0000000000019735                 movsx   eax, byte ptr [rcx]
.text:0000000000019738                 mov     byte ptr [rsp+1C8h+var_E8], 1
.text:0000000000019740                 mov     byte ptr [rsp+1C8h+ps.__value+8], 1
.text:0000000000019748                 mov     dword ptr [rsp+1C8h+var_E8+4], eax
.text:000000000001974F
.text:000000000001974F loc_1974F:                              ; CODE XREF: mbsstr+632↓j
.text:000000000001974F                                         ; mbsstr+C38↓j
.text:000000000001974F                 mov     eax, dword ptr [rsp+1C8h+var_E8+4]
.text:0000000000019756                 test    eax, eax
.text:0000000000019758                 jz      loc_19CA0
.text:000000000001975E                 cmp     r14, 9
.text:0000000000019762                 setnbe  al
.text:0000000000019765                 and     al, byte ptr [rsp+1C8h+var_1B8]
.text:0000000000019769                 jz      loc_1A577
.text:000000000001976F                 lea     rdx, [r14+r14*4]
.text:0000000000019773                 cmp     rbx, rdx
.text:0000000000019776                 jnb     loc_19EB0
.text:000000000001977C                 add     rbx, 1
.text:0000000000019780                 mov     byte ptr [rsp+1C8h+var_1B8], al
.text:0000000000019784
.text:0000000000019784 loc_19784:                              ; CODE XREF: mbsstr+CE9↓j
.text:0000000000019784                                         ; mbsstr+10DB↓j
.text:0000000000019784                 cmp     [rsp+1C8h+var_168], 0
.text:0000000000019789                 jz      loc_19D01
.text:000000000001978F                 mov     eax, [rsp+1C8h+var_164]
.text:0000000000019793                 cmp     dword ptr [rsp+1C8h+var_E8+4], eax
.text:000000000001979A                 jnz     loc_199E9
.text:00000000000197A0
.text:00000000000197A0 loc_197A0:                              ; CODE XREF: mbsstr+899↓j
.text:00000000000197A0                 movdqa  xmm0, xmmword ptr [rsp+1C8h+ps.__count]
.text:00000000000197A9                 lea     rcx, [rbp+4]
.text:00000000000197AD                 mov     [rsp+1C8h+var_88], 0
.text:00000000000197B5                 mov     qword ptr [rbp+4], 0
.text:00000000000197BD                 movaps  [rsp+1C8h+var_C8], xmm0
.text:00000000000197C5                 mov     [rsp+1C8h+var_7C], 0
.text:00000000000197CD                 mov     byte ptr [rsp+1C8h+var_C8+0Ch], 0
.text:00000000000197D5                 movdqa  xmm0, xmmword ptr [rsp+1C8h+n]
.text:00000000000197DE                 movaps  xmmword ptr [rsp+1C8h+s1], xmm0
.text:00000000000197E6                 mov     rax, [rsp+1C8h+s1+8]
.text:00000000000197EE                 add     [rsp+1C8h+s1], rax
.text:00000000000197F6                 mov     rax, [rsp+1C8h+string]
.text:00000000000197FB                 movdqa  xmm0, [rsp+1C8h+var_E8]
.text:0000000000019804                 movsx   edx, byte ptr [rax]
.text:0000000000019807                 mov     [rsp+1C8h+s2], rax
.text:000000000001980F                 movaps  [rsp+1C8h+var_A8], xmm0
.text:0000000000019817                 mov     eax, edx
.text:0000000000019819                 shr     al, 5
.text:000000000001981C                 movdqa  xmm0, [rsp+1C8h+var_D8]
.text:0000000000019825                 and     eax, 7
.text:0000000000019828                 mov     eax, [r13+rax*4+0]
.text:000000000001982D                 movaps  [rsp+1C8h+var_98], xmm0
.text:0000000000019835                 bt      eax, edx
.text:0000000000019838                 jnb     loc_1A1C8
.text:000000000001983E                 mov     [rsp+1C8h+var_70], 1
.text:000000000001984A                 mov     [rsp+1C8h+var_64], edx
.text:0000000000019851                 mov     [rsp+1C8h+var_68], 1
.text:0000000000019859                 mov     [rsp+1C8h+var_7C], 1
.text:0000000000019861
.text:0000000000019861 loc_19861:                              ; CODE XREF: mbsstr+DF9↓j
.text:0000000000019861                                         ; mbsstr+FC6↓j
.text:0000000000019861                 mov     esi, [rsp+1C8h+var_64]
.text:0000000000019868                 test    esi, esi
.text:000000000001986A                 jz      loc_1A5A4
.text:0000000000019870
.text:0000000000019870 loc_19870:                              ; CODE XREF: mbsstr+EBC↓j
.text:0000000000019870                                         ; mbsstr+1026↓j
.text:0000000000019870                 mov     rax, [rsp+1C8h+var_70]
.text:0000000000019878                 mov     [rsp+1C8h+var_7C], 0
.text:0000000000019880                 add     rbx, 1
.text:0000000000019884                 add     [rsp+1C8h+s2], rax
.text:000000000001988C                 jmp     loc_19953
.text:000000000001988C ; ---------------------------------------------------------------------------
.text:0000000000019891                 align 8
.text:0000000000019898
.text:0000000000019898 loc_19898:                              ; CODE XREF: mbsstr+51F↓j
.text:0000000000019898                 cmp     byte ptr [rsp+1C8h+var_C8], 0
.text:00000000000198A0                 jnz     loc_19BE1
.text:00000000000198A6                 mov     rcx, [rsp+1C8h+s1]
.text:00000000000198AE                 movzx   edx, byte ptr [rcx]
.text:00000000000198B1                 mov     eax, edx
.text:00000000000198B3                 shr     al, 5
.text:00000000000198B6                 and     eax, 7
.text:00000000000198B9                 mov     eax, [r13+rax*4+0]
.text:00000000000198BE                 bt      eax, edx
.text:00000000000198C1                 jnb     loc_19BC8
.text:00000000000198C7                 mov     [rsp+1C8h+s1+8], 1
.text:00000000000198D3                 movsx   eax, byte ptr [rcx]
.text:00000000000198D6                 mov     byte ptr [rsp+1C8h+var_A8], 1
.text:00000000000198DE                 mov     byte ptr [rsp+1C8h+var_C8+0Ch], 1
.text:00000000000198E6                 mov     dword ptr [rsp+1C8h+var_A8+4], eax
.text:00000000000198ED
.text:00000000000198ED loc_198ED:                              ; CODE XREF: mbsstr+52D↓j
.text:00000000000198ED                                         ; mbsstr+968↓j
.text:00000000000198ED                 mov     eax, dword ptr [rsp+1C8h+var_A8+4]
.text:00000000000198F4                 test    eax, eax
.text:00000000000198F6                 jz      loc_19CA0
.text:00000000000198FC
.text:00000000000198FC loc_198FC:                              ; CODE XREF: mbsstr+7F3↓j
.text:00000000000198FC                 cmp     [rsp+1C8h+var_68], 0
.text:0000000000019904                 jz      loc_199D3
.text:000000000001990A                 cmp     [rsp+1C8h+var_64], eax
.text:0000000000019911                 setnz   al
.text:0000000000019914
.text:0000000000019914 loc_19914:                              ; CODE XREF: mbsstr+82A↓j
.text:0000000000019914                 test    al, al
.text:0000000000019916                 lea     rdx, [rbx+1]
.text:000000000001991A                 jnz     loc_199E9
.text:0000000000019920                 mov     rax, [rsp+1C8h+s1+8]
.text:0000000000019928                 add     [rsp+1C8h+s1], rax
.text:0000000000019930                 mov     rbx, rdx
.text:0000000000019933                 mov     rax, [rsp+1C8h+var_70]
.text:000000000001993B                 add     [rsp+1C8h+s2], rax
.text:0000000000019943                 mov     byte ptr [rsp+1C8h+var_C8+0Ch], 0
.text:000000000001994B                 mov     [rsp+1C8h+var_7C], 0
.text:0000000000019953
.text:0000000000019953 loc_19953:                              ; CODE XREF: mbsstr+3EC↑j
.text:0000000000019953                 cmp     [rsp+1C8h+var_88], 0
.text:000000000001995B                 jnz     loc_19AF9
.text:0000000000019961                 mov     rcx, [rsp+1C8h+s2]
.text:0000000000019969                 movzx   edx, byte ptr [rcx]
.text:000000000001996C                 mov     eax, edx
.text:000000000001996E                 shr     al, 5
.text:0000000000019971                 and     eax, 7
.text:0000000000019974                 mov     eax, [r13+rax*4+0]
.text:0000000000019979                 bt      eax, edx
.text:000000000001997C                 jnb     loc_19AE0
.text:0000000000019982                 mov     [rsp+1C8h+var_70], 1
.text:000000000001998E                 movsx   eax, byte ptr [rcx]
.text:0000000000019991                 mov     [rsp+1C8h+var_68], 1
.text:0000000000019999                 mov     [rsp+1C8h+var_7C], 1
.text:00000000000199A1                 mov     [rsp+1C8h+var_64], eax
.text:00000000000199A8
.text:00000000000199A8 loc_199A8:                              ; CODE XREF: mbsstr+928↓j
.text:00000000000199A8                 mov     edx, [rsp+1C8h+var_64]
.text:00000000000199AF                 test    edx, edx
.text:00000000000199B1                 jz      loc_19BB8
.text:00000000000199B7
.text:00000000000199B7 loc_199B7:                              ; CODE XREF: mbsstr+70B↓j
.text:00000000000199B7                                         ; mbsstr+8BC↓j ...
.text:00000000000199B7                 cmp     byte ptr [rsp+1C8h+var_C8+0Ch], 0
.text:00000000000199BF                 jz      loc_19898
.text:00000000000199C5                 cmp     byte ptr [rsp+1C8h+var_A8], 0
.text:00000000000199CD                 jnz     loc_198ED
.text:00000000000199D3
.text:00000000000199D3 loc_199D3:                              ; CODE XREF: mbsstr+464↑j
.text:00000000000199D3                                         ; mbsstr+8E4↓j ...
.text:00000000000199D3                 mov     rdx, [rsp+1C8h+s1+8] ; n
.text:00000000000199DB                 cmp     rdx, [rsp+1C8h+var_70]
.text:00000000000199E3                 jz      loc_19CB0
.text:00000000000199E9
.text:00000000000199E9 loc_199E9:                              ; CODE XREF: mbsstr+2FA↑j
.text:00000000000199E9                                         ; mbsstr+47A↑j
.text:00000000000199E9                 mov     rcx, [rsp+1C8h+n+8]
.text:00000000000199F1
.text:00000000000199F1 loc_199F1:                              ; CODE XREF: mbsstr+86E↓j
.text:00000000000199F1                                         ; mbsstr+893↓j
.text:00000000000199F1                 add     [rsp+1C8h+n], rcx
.text:00000000000199F9                 add     r14, 1
.text:00000000000199FD                 cmp     byte ptr [rsp+1C8h+ps.__count], 0
.text:0000000000019A05                 mov     byte ptr [rsp+1C8h+ps.__value+8], 0
.text:0000000000019A0D                 jz      loc_19708
.text:0000000000019A13
.text:0000000000019A13 loc_19A13:                              ; CODE XREF: mbsstr+25D↑j
.text:0000000000019A13                 lea     rax, [rsp+1C8h+ps]
.text:0000000000019A1B                 mov     [rsp+1C8h+var_1C8], rax
.text:0000000000019A1F
.text:0000000000019A1F loc_19A1F:                              ; CODE XREF: mbsstr+A09↓j
.text:0000000000019A1F                 call    ___ctype_get_mb_cur_max
.text:0000000000019A24                 mov     r8, [rsp+1C8h+n]
.text:0000000000019A2C                 mov     rsi, rax
.text:0000000000019A2F                 mov     rdi, r8
.text:0000000000019A32                 mov     [rsp+1C8h+var_1B0], r8
.text:0000000000019A37                 call    strnlen1
.text:0000000000019A3C                 mov     rsi, [rsp+1C8h+var_1C8]
.text:0000000000019A40                 mov     r8, [rsp+1C8h+var_1B0]
.text:0000000000019A45                 mov     rdx, rax
.text:0000000000019A48                 lea     rcx, [rsi+4]
.text:0000000000019A4C                 lea     rdi, [rsi+24h]
.text:0000000000019A50                 mov     rsi, r8
.text:0000000000019A53                 call    rpl_mbrtowc
.text:0000000000019A58                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000019A5C                 mov     [rsp+1C8h+n+8], rax
.text:0000000000019A64                 jz      loc_19CD0
.text:0000000000019A6A                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000019A6E                 jz      loc_1A198
.text:0000000000019A74                 test    rax, rax
.text:0000000000019A77                 jnz     short loc_19AA5
.text:0000000000019A79                 mov     rax, [rsp+1C8h+n]
.text:0000000000019A81                 mov     [rsp+1C8h+n+8], 1
.text:0000000000019A8D                 cmp     byte ptr [rax], 0
.text:0000000000019A90                 jnz     loc_1A585
.text:0000000000019A96                 mov     eax, dword ptr [rsp+1C8h+var_E8+4]
.text:0000000000019A9D                 test    eax, eax
.text:0000000000019A9F                 jnz     loc_1A262
.text:0000000000019AA5
.text:0000000000019AA5 loc_19AA5:                              ; CODE XREF: mbsstr+5D7↑j
.text:0000000000019AA5                 mov     rdi, [rsp+1C8h+var_1C8]
.text:0000000000019AA9                 mov     byte ptr [rsp+1C8h+var_E8], 1
.text:0000000000019AB1                 add     rdi, 4          ; ps
.text:0000000000019AB5                 call    _mbsinit
.text:0000000000019ABA                 test    eax, eax
.text:0000000000019ABC                 jz      loc_1A0D0
.text:0000000000019AC2                 mov     byte ptr [rsp+1C8h+ps.__count], 0
.text:0000000000019ACA                 mov     byte ptr [rsp+1C8h+ps.__value+8], 1
.text:0000000000019AD2                 jmp     loc_1974F
.text:0000000000019AD2 ; ---------------------------------------------------------------------------
.text:0000000000019AD7                 align 20h
.text:0000000000019AE0
.text:0000000000019AE0 loc_19AE0:                              ; CODE XREF: mbsstr+4DC↑j
.text:0000000000019AE0                 lea     rdi, [rbp+4]    ; ps
.text:0000000000019AE4                 call    _mbsinit
.text:0000000000019AE9                 test    eax, eax
.text:0000000000019AEB                 jz      loc_1A558
.text:0000000000019AF1                 mov     [rsp+1C8h+var_88], 1
.text:0000000000019AF9
.text:0000000000019AF9 loc_19AF9:                              ; CODE XREF: mbsstr+4BB↑j
.text:0000000000019AF9                 call    ___ctype_get_mb_cur_max
.text:0000000000019AFE                 mov     r8, [rsp+1C8h+s2]
.text:0000000000019B06                 mov     rsi, rax
.text:0000000000019B09                 mov     rdi, r8
.text:0000000000019B0C                 mov     [rsp+1C8h+var_1C8], r8
.text:0000000000019B10                 call    strnlen1
.text:0000000000019B15                 mov     r8, [rsp+1C8h+var_1C8]
.text:0000000000019B19                 lea     rcx, [rbp+4]
.text:0000000000019B1D                 lea     rdi, [rbp+24h]
.text:0000000000019B21                 mov     rdx, rax
.text:0000000000019B24                 mov     rsi, r8
.text:0000000000019B27                 call    rpl_mbrtowc
.text:0000000000019B2C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000019B30                 mov     [rsp+1C8h+var_70], rax
.text:0000000000019B38                 jz      loc_19D40
.text:0000000000019B3E                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000019B42                 jz      loc_19D90
.text:0000000000019B48                 test    rax, rax
.text:0000000000019B4B                 jnz     short loc_19B79
.text:0000000000019B4D                 mov     rax, [rsp+1C8h+s2]
.text:0000000000019B55                 mov     [rsp+1C8h+var_70], 1
.text:0000000000019B61                 cmp     byte ptr [rax], 0
.text:0000000000019B64                 jnz     loc_1A585
.text:0000000000019B6A                 mov     ecx, [rsp+1C8h+var_64]
.text:0000000000019B71                 test    ecx, ecx
.text:0000000000019B73                 jnz     loc_1A262
.text:0000000000019B79
.text:0000000000019B79 loc_19B79:                              ; CODE XREF: mbsstr+6AB↑j
.text:0000000000019B79                 lea     rdi, [rbp+4]    ; ps
.text:0000000000019B7D                 mov     [rsp+1C8h+var_68], 1
.text:0000000000019B85                 call    _mbsinit
.text:0000000000019B8A                 test    eax, eax
.text:0000000000019B8C                 jz      loc_19DC0
.text:0000000000019B92                 mov     edx, [rsp+1C8h+var_64]
.text:0000000000019B99                 mov     [rsp+1C8h+var_88], 0
.text:0000000000019BA1                 mov     [rsp+1C8h+var_7C], 1
.text:0000000000019BA9                 test    edx, edx
.text:0000000000019BAB                 jnz     loc_199B7
.text:0000000000019BB1                 nop     dword ptr [rax+00000000h]
.text:0000000000019BB8
.text:0000000000019BB8 loc_19BB8:                              ; CODE XREF: mbsstr+511↑j
.text:0000000000019BB8                 mov     rax, [rsp+1C8h+n]
.text:0000000000019BC0                 jmp     loc_19626
.text:0000000000019BC0 ; ---------------------------------------------------------------------------
.text:0000000000019BC5                 align 8
.text:0000000000019BC8
.text:0000000000019BC8 loc_19BC8:                              ; CODE XREF: mbsstr+421↑j
.text:0000000000019BC8                 lea     rdi, [r15+4]    ; ps
.text:0000000000019BCC                 call    _mbsinit
.text:0000000000019BD1                 test    eax, eax
.text:0000000000019BD3                 jz      loc_1A558
.text:0000000000019BD9                 mov     byte ptr [rsp+1C8h+var_C8], 1
.text:0000000000019BE1
.text:0000000000019BE1 loc_19BE1:                              ; CODE XREF: mbsstr+400↑j
.text:0000000000019BE1                 call    ___ctype_get_mb_cur_max
.text:0000000000019BE6                 mov     r8, [rsp+1C8h+s1]
.text:0000000000019BEE                 mov     rsi, rax
.text:0000000000019BF1                 mov     rdi, r8
.text:0000000000019BF4                 mov     [rsp+1C8h+var_1C8], r8
.text:0000000000019BF8                 call    strnlen1
.text:0000000000019BFD                 mov     r8, [rsp+1C8h+var_1C8]
.text:0000000000019C01                 lea     rcx, [r15+4]
.text:0000000000019C05                 lea     rdi, [r15+24h]
.text:0000000000019C09                 mov     rdx, rax
.text:0000000000019C0C                 mov     rsi, r8
.text:0000000000019C0F                 call    rpl_mbrtowc
.text:0000000000019C14                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000019C18                 mov     [rsp+1C8h+s1+8], rax
.text:0000000000019C20                 jz      loc_19D68
.text:0000000000019C26                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000019C2A                 jz      loc_19DD0
.text:0000000000019C30                 test    rax, rax
.text:0000000000019C33                 jnz     short loc_19C61
.text:0000000000019C35                 mov     rax, [rsp+1C8h+s1]
.text:0000000000019C3D                 mov     [rsp+1C8h+s1+8], 1
.text:0000000000019C49                 cmp     byte ptr [rax], 0
.text:0000000000019C4C                 jnz     loc_1A585
.text:0000000000019C52                 mov     eax, dword ptr [rsp+1C8h+var_A8+4]
.text:0000000000019C59                 test    eax, eax
.text:0000000000019C5B                 jnz     loc_1A262
.text:0000000000019C61
.text:0000000000019C61 loc_19C61:                              ; CODE XREF: mbsstr+793↑j
.text:0000000000019C61                 lea     rdi, [r15+4]    ; ps
.text:0000000000019C65                 mov     byte ptr [rsp+1C8h+var_A8], 1
.text:0000000000019C6D                 call    _mbsinit
.text:0000000000019C72                 test    eax, eax
.text:0000000000019C74                 jz      loc_19E00
.text:0000000000019C7A                 mov     eax, dword ptr [rsp+1C8h+var_A8+4]
.text:0000000000019C81                 mov     byte ptr [rsp+1C8h+var_C8], 0
.text:0000000000019C89                 mov     byte ptr [rsp+1C8h+var_C8+0Ch], 1
.text:0000000000019C91                 test    eax, eax
.text:0000000000019C93                 jnz     loc_198FC
.text:0000000000019C99                 nop     dword ptr [rax+00000000h]
.text:0000000000019CA0
.text:0000000000019CA0 loc_19CA0:                              ; CODE XREF: mbsstr+5B↑j
.text:0000000000019CA0                                         ; mbsstr+9C↑j ...
.text:0000000000019CA0                 xor     eax, eax
.text:0000000000019CA2                 jmp     loc_19626
.text:0000000000019CA2 ; ---------------------------------------------------------------------------
.text:0000000000019CA7                 align 10h
.text:0000000000019CB0
.text:0000000000019CB0 loc_19CB0:                              ; CODE XREF: mbsstr+543↑j
.text:0000000000019CB0                 mov     rsi, [rsp+1C8h+s2] ; s2
.text:0000000000019CB8                 mov     rdi, [rsp+1C8h+s1] ; s1
.text:0000000000019CC0                 call    _memcmp
.text:0000000000019CC5                 test    eax, eax
.text:0000000000019CC7                 setnz   al
.text:0000000000019CCA                 jmp     loc_19914
.text:0000000000019CCA ; ---------------------------------------------------------------------------
.text:0000000000019CCF                 align 10h
.text:0000000000019CD0
.text:0000000000019CD0 loc_19CD0:                              ; CODE XREF: mbsstr+5C4↑j
.text:0000000000019CD0                 mov     [rsp+1C8h+n+8], 1
.text:0000000000019CDC                 mov     byte ptr [rsp+1C8h+var_E8], 0
.text:0000000000019CE4                 mov     byte ptr [rsp+1C8h+ps.__value+8], 1
.text:0000000000019CEC
.text:0000000000019CEC loc_19CEC:                              ; CODE XREF: mbsstr+D1D↓j
.text:0000000000019CEC                 cmp     r14, 9
.text:0000000000019CF0                 setnbe  al
.text:0000000000019CF3                 and     al, byte ptr [rsp+1C8h+var_1B8]
.text:0000000000019CF7                 jnz     loc_1A538
.text:0000000000019CFD                 add     rbx, 1
.text:0000000000019D01
.text:0000000000019D01 loc_19D01:                              ; CODE XREF: mbsstr+2E9↑j
.text:0000000000019D01                                         ; mbsstr+CEF↓j ...
.text:0000000000019D01                 mov     rcx, [rsp+1C8h+n+8]
.text:0000000000019D09                 cmp     rcx, [rsp+1C8h+var_170]
.text:0000000000019D0E                 jnz     loc_199F1
.text:0000000000019D14                 mov     rsi, [rsp+1C8h+var_178] ; s2
.text:0000000000019D19                 mov     rdi, [rsp+1C8h+n] ; s1
.text:0000000000019D21                 mov     rdx, rcx        ; n
.text:0000000000019D24                 mov     [rsp+1C8h+var_1C8], rcx
.text:0000000000019D28                 call    _memcmp
.text:0000000000019D2D                 test    eax, eax
.text:0000000000019D2F                 mov     rcx, [rsp+1C8h+var_1C8]
.text:0000000000019D33                 jnz     loc_199F1
.text:0000000000019D39                 jmp     loc_197A0
.text:0000000000019D39 ; ---------------------------------------------------------------------------
.text:0000000000019D3E                 align 20h
.text:0000000000019D40
.text:0000000000019D40 loc_19D40:                              ; CODE XREF: mbsstr+698↑j
.text:0000000000019D40                 mov     [rsp+1C8h+var_70], 1
.text:0000000000019D4C                 mov     [rsp+1C8h+var_68], 0
.text:0000000000019D54                 mov     [rsp+1C8h+var_7C], 1
.text:0000000000019D5C                 jmp     loc_199B7
.text:0000000000019D5C ; ---------------------------------------------------------------------------
.text:0000000000019D61                 align 8
.text:0000000000019D68
.text:0000000000019D68 loc_19D68:                              ; CODE XREF: mbsstr+780↑j
.text:0000000000019D68                 mov     [rsp+1C8h+s1+8], 1
.text:0000000000019D74                 mov     byte ptr [rsp+1C8h+var_A8], 0
.text:0000000000019D7C                 mov     byte ptr [rsp+1C8h+var_C8+0Ch], 1
.text:0000000000019D84                 jmp     loc_199D3
.text:0000000000019D84 ; ---------------------------------------------------------------------------
.text:0000000000019D89                 align 10h
.text:0000000000019D90
.text:0000000000019D90 loc_19D90:                              ; CODE XREF: mbsstr+6A2↑j
.text:0000000000019D90                 mov     rdi, [rsp+1C8h+s2] ; s
.text:0000000000019D98                 call    _strlen
.text:0000000000019D9D                 mov     [rsp+1C8h+var_68], 0
.text:0000000000019DA5                 mov     [rsp+1C8h+var_70], rax
.text:0000000000019DAD                 mov     [rsp+1C8h+var_7C], 1
.text:0000000000019DB5                 jmp     loc_199B7
.text:0000000000019DB5 ; ---------------------------------------------------------------------------
.text:0000000000019DBA                 align 20h
.text:0000000000019DC0
.text:0000000000019DC0 loc_19DC0:                              ; CODE XREF: mbsstr+6EC↑j
.text:0000000000019DC0                 mov     [rsp+1C8h+var_7C], 1
.text:0000000000019DC8                 jmp     loc_199A8
.text:0000000000019DC8 ; ---------------------------------------------------------------------------
.text:0000000000019DCD                 align 10h
.text:0000000000019DD0
.text:0000000000019DD0 loc_19DD0:                              ; CODE XREF: mbsstr+78A↑j
.text:0000000000019DD0                 mov     rdi, [rsp+1C8h+s1] ; s
.text:0000000000019DD8                 call    _strlen
.text:0000000000019DDD                 mov     byte ptr [rsp+1C8h+var_A8], 0
.text:0000000000019DE5                 mov     [rsp+1C8h+s1+8], rax
.text:0000000000019DED                 mov     byte ptr [rsp+1C8h+var_C8+0Ch], 1
.text:0000000000019DF5                 jmp     loc_199D3
.text:0000000000019DF5 ; ---------------------------------------------------------------------------
.text:0000000000019DFA                 align 20h
.text:0000000000019E00
.text:0000000000019E00 loc_19E00:                              ; CODE XREF: mbsstr+7D4↑j
.text:0000000000019E00                 mov     byte ptr [rsp+1C8h+var_C8+0Ch], 1
.text:0000000000019E08                 jmp     loc_198ED
.text:0000000000019E08 ; ---------------------------------------------------------------------------
.text:0000000000019E0D                 align 10h
.text:0000000000019E10
.text:0000000000019E10 loc_19E10:                              ; CODE XREF: mbsstr+90↑j
.text:0000000000019E10                 mov     rcx, [rsp+1C8h+string]
.text:0000000000019E15                 movzx   esi, byte ptr [rcx+1]
.text:0000000000019E19                 test    sil, sil
.text:0000000000019E1C                 jz      loc_19623
.text:0000000000019E22                 movzx   edi, byte ptr [r14]
.text:0000000000019E26                 test    dil, dil
.text:0000000000019E29                 jz      loc_19CA0
.text:0000000000019E2F                 cmp     sil, dil
.text:0000000000019E32                 lea     rbx, [rdx+2]
.text:0000000000019E36                 jnz     loc_19542
.text:0000000000019E3C                 neg     rdx
.text:0000000000019E3F                 lea     r9, [rcx+rdx]
.text:0000000000019E43                 add     rdx, r12
.text:0000000000019E46                 jmp     short loc_19E6A
.text:0000000000019E46 ; ---------------------------------------------------------------------------
.text:0000000000019E48                 align 10h
.text:0000000000019E50
.text:0000000000019E50 loc_19E50:                              ; CODE XREF: mbsstr+9D2↓j
.text:0000000000019E50                 movzx   edi, byte ptr [rdx+rbx]
.text:0000000000019E54                 test    dil, dil
.text:0000000000019E57                 jz      loc_19CA0
.text:0000000000019E5D                 add     rbx, 1
.text:0000000000019E61                 cmp     sil, dil
.text:0000000000019E64                 jnz     loc_19542
.text:0000000000019E6A
.text:0000000000019E6A loc_19E6A:                              ; CODE XREF: mbsstr+9A6↑j
.text:0000000000019E6A                 movzx   esi, byte ptr [r9+rbx]
.text:0000000000019E6F                 test    sil, sil
.text:0000000000019E72                 jnz     short loc_19E50
.text:0000000000019E74                 jmp     loc_19623
.text:0000000000019E74 ; ---------------------------------------------------------------------------
.text:0000000000019E79                 align 20h
.text:0000000000019E80
.text:0000000000019E80 loc_19E80:                              ; CODE XREF: mbsstr+283↑j
.text:0000000000019E80                 lea     rax, [rsp+1C8h+ps]
.text:0000000000019E88                 lea     rdi, [rsp+1C8h+ps.__value] ; ps
.text:0000000000019E90                 mov     [rsp+1C8h+var_1C8], rax
.text:0000000000019E94                 call    _mbsinit
.text:0000000000019E99                 test    eax, eax
.text:0000000000019E9B                 jz      loc_1A558
.text:0000000000019EA1                 mov     byte ptr [rsp+1C8h+ps.__count], 1
.text:0000000000019EA9                 jmp     loc_19A1F
.text:0000000000019EA9 ; ---------------------------------------------------------------------------
.text:0000000000019EAE                 align 10h
.text:0000000000019EB0
.text:0000000000019EB0 loc_19EB0:                              ; CODE XREF: mbsstr+2D6↑j
.text:0000000000019EB0                                         ; mbsstr+109F↓j
.text:0000000000019EB0                 mov     rsi, rbx
.text:0000000000019EB3                 sub     rsi, [rsp+1C8h+var_1A8]
.text:0000000000019EB8                 movzx   eax, [rsp+1C8h+var_13C]
.text:0000000000019EC0                 mov     [rsp+1C8h+var_1C8], rsi
.text:0000000000019EC4                 jz      loc_1A517
.text:0000000000019ECA                 test    al, al
.text:0000000000019ECC                 jz      short loc_19EFB
.text:0000000000019ECE                 cmp     [rsp+1C8h+var_128], 0
.text:0000000000019ED6                 jnz     short loc_19F4C
.text:0000000000019ED8
.text:0000000000019ED8 loc_19ED8:                              ; CODE XREF: mbsstr+AB7↓j
.text:0000000000019ED8                                         ; mbsstr+C14↓j ...
.text:0000000000019ED8                 mov     rax, [rsp+1C8h+var_130]
.text:0000000000019EE0                 add     [rsp+1C8h+s], rax
.text:0000000000019EE8                 sub     [rsp+1C8h+var_1C8], 1
.text:0000000000019EED                 mov     [rsp+1C8h+var_13C], 0
.text:0000000000019EF5                 jz      loc_1A108
.text:0000000000019EFB
.text:0000000000019EFB loc_19EFB:                              ; CODE XREF: mbsstr+A2C↑j
.text:0000000000019EFB                 cmp     [rsp+1C8h+var_148], 0
.text:0000000000019F03                 jnz     loc_1A088
.text:0000000000019F09                 mov     rcx, [rsp+1C8h+s]
.text:0000000000019F11                 movzx   edx, byte ptr [rcx]
.text:0000000000019F14                 mov     eax, edx
.text:0000000000019F16                 shr     al, 5
.text:0000000000019F19                 and     eax, 7
.text:0000000000019F1C                 mov     eax, [r13+rax*4+0]
.text:0000000000019F21                 bt      eax, edx
.text:0000000000019F24                 jnb     short loc_19FA0
.text:0000000000019F26                 mov     [rsp+1C8h+var_130], 1
.text:0000000000019F32                 movsx   eax, byte ptr [rcx]
.text:0000000000019F35                 mov     [rsp+1C8h+var_128], 1
.text:0000000000019F3D                 mov     [rsp+1C8h+var_13C], 1
.text:0000000000019F45                 mov     [rsp+1C8h+var_124], eax
.text:0000000000019F4C
.text:0000000000019F4C loc_19F4C:                              ; CODE XREF: mbsstr+A36↑j
.text:0000000000019F4C                                         ; mbsstr+BDD↓j ...
.text:0000000000019F4C                 mov     r10d, [rsp+1C8h+var_124]
.text:0000000000019F54                 test    r10d, r10d
.text:0000000000019F57                 jnz     loc_19ED8
.text:0000000000019F5D                 cmp     [rsp+1C8h+var_13C], 0
.text:0000000000019F65                 jz      loc_1A108
.text:0000000000019F6B
.text:0000000000019F6B loc_19F6B:                              ; CODE XREF: mbsstr+CC8↓j
.text:0000000000019F6B                 mov     rdx, [rsp+1C8h+var_1A0]
.text:0000000000019F70                 mov     rsi, [rsp+1C8h+string]
.text:0000000000019F75                 mov     rdi, r12
.text:0000000000019F78                 call    knuth_morris_pratt_multibyte
.text:0000000000019F7D                 test    al, al
.text:0000000000019F7F                 mov     byte ptr [rsp+1C8h+var_1B8], al
.text:0000000000019F83                 jnz     loc_1A49F
.text:0000000000019F89                 movzx   edx, byte ptr [rsp+1C8h+var_E8]
.text:0000000000019F91                 jmp     loc_1A17B
.text:0000000000019F91 ; ---------------------------------------------------------------------------
.text:0000000000019F96                 align 20h
.text:0000000000019FA0
.text:0000000000019FA0 loc_19FA0:                              ; CODE XREF: mbsstr+A84↑j
.text:0000000000019FA0                 lea     rax, [rsp+1C8h+var_148]
.text:0000000000019FA8                 lea     rdi, [rsp+1C8h+var_144] ; ps
.text:0000000000019FB0                 mov     [rsp+1C8h+var_1B8], rax
.text:0000000000019FB5                 call    _mbsinit
.text:0000000000019FBA                 test    eax, eax
.text:0000000000019FBC                 jz      loc_1A558
.text:0000000000019FC2                 mov     [rsp+1C8h+var_148], 1
.text:0000000000019FCA
.text:0000000000019FCA loc_19FCA:                              ; CODE XREF: mbsstr+BF5↓j
.text:0000000000019FCA                 call    ___ctype_get_mb_cur_max
.text:0000000000019FCF                 mov     r8, [rsp+1C8h+s]
.text:0000000000019FD7                 mov     rsi, rax
.text:0000000000019FDA                 mov     rdi, r8
.text:0000000000019FDD                 mov     [rsp+1C8h+var_1B0], r8
.text:0000000000019FE2                 call    strnlen1
.text:0000000000019FE7                 mov     rsi, [rsp+1C8h+var_1B8]
.text:0000000000019FEC                 mov     r8, [rsp+1C8h+var_1B0]
.text:0000000000019FF1                 mov     rdx, rax
.text:0000000000019FF4                 lea     rcx, [rsi+4]
.text:0000000000019FF8                 lea     rdi, [rsi+24h]
.text:0000000000019FFC                 mov     rsi, r8
.text:0000000000019FFF                 call    rpl_mbrtowc
.text:000000000001A004                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A008                 mov     [rsp+1C8h+var_130], rax
.text:000000000001A010                 jz      loc_1A0A0
.text:000000000001A016                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001A01A                 jz      loc_1A0E0
.text:000000000001A020                 test    rax, rax
.text:000000000001A023                 jnz     short loc_1A053
.text:000000000001A025                 mov     rax, [rsp+1C8h+s]
.text:000000000001A02D                 mov     [rsp+1C8h+var_130], 1
.text:000000000001A039                 cmp     byte ptr [rax], 0
.text:000000000001A03C                 jnz     loc_1A585
.text:000000000001A042                 mov     r11d, [rsp+1C8h+var_124]
.text:000000000001A04A                 test    r11d, r11d
.text:000000000001A04D                 jnz     loc_1A262
.text:000000000001A053
.text:000000000001A053 loc_1A053:                              ; CODE XREF: mbsstr+B83↑j
.text:000000000001A053                 mov     rdi, [rsp+1C8h+var_1B8]
.text:000000000001A058                 mov     [rsp+1C8h+var_128], 1
.text:000000000001A060                 add     rdi, 4          ; ps
.text:000000000001A064                 call    _mbsinit
.text:000000000001A069                 test    eax, eax
.text:000000000001A06B                 jz      short loc_1A0C0
.text:000000000001A06D                 mov     [rsp+1C8h+var_148], 0
.text:000000000001A075                 mov     [rsp+1C8h+var_13C], 1
.text:000000000001A07D                 jmp     loc_19F4C
.text:000000000001A07D ; ---------------------------------------------------------------------------
.text:000000000001A082                 align 8
.text:000000000001A088
.text:000000000001A088 loc_1A088:                              ; CODE XREF: mbsstr+A63↑j
.text:000000000001A088                 lea     rax, [rsp+1C8h+var_148]
.text:000000000001A090                 mov     [rsp+1C8h+var_1B8], rax
.text:000000000001A095                 jmp     loc_19FCA
.text:000000000001A095 ; ---------------------------------------------------------------------------
.text:000000000001A09A                 align 20h
.text:000000000001A0A0
.text:000000000001A0A0 loc_1A0A0:                              ; CODE XREF: mbsstr+B70↑j
.text:000000000001A0A0                 mov     [rsp+1C8h+var_130], 1
.text:000000000001A0AC                 mov     [rsp+1C8h+var_128], 0
.text:000000000001A0B4                 jmp     loc_19ED8
.text:000000000001A0B4 ; ---------------------------------------------------------------------------
.text:000000000001A0B9                 align 20h
.text:000000000001A0C0
.text:000000000001A0C0 loc_1A0C0:                              ; CODE XREF: mbsstr+BCB↑j
.text:000000000001A0C0                 mov     [rsp+1C8h+var_13C], 1
.text:000000000001A0C8                 jmp     loc_19F4C
.text:000000000001A0C8 ; ---------------------------------------------------------------------------
.text:000000000001A0CD                 align 10h
.text:000000000001A0D0
.text:000000000001A0D0 loc_1A0D0:                              ; CODE XREF: mbsstr+61C↑j
.text:000000000001A0D0                 mov     byte ptr [rsp+1C8h+ps.__value+8], 1
.text:000000000001A0D8                 jmp     loc_1974F
.text:000000000001A0D8 ; ---------------------------------------------------------------------------
.text:000000000001A0DD                 align 20h
.text:000000000001A0E0
.text:000000000001A0E0 loc_1A0E0:                              ; CODE XREF: mbsstr+B7A↑j
.text:000000000001A0E0                 mov     rdi, [rsp+1C8h+s] ; s
.text:000000000001A0E8                 call    _strlen
.text:000000000001A0ED                 mov     [rsp+1C8h+var_128], 0
.text:000000000001A0F5                 mov     [rsp+1C8h+var_130], rax
.text:000000000001A0FD                 jmp     loc_19ED8
.text:000000000001A0FD ; ---------------------------------------------------------------------------
.text:000000000001A102                 align 8
.text:000000000001A108
.text:000000000001A108 loc_1A108:                              ; CODE XREF: mbsstr+A55↑j
.text:000000000001A108                                         ; mbsstr+AC5↑j ...
.text:000000000001A108                 cmp     [rsp+1C8h+var_148], 0
.text:000000000001A110                 jnz     loc_1A368
.text:000000000001A116                 mov     rcx, [rsp+1C8h+s]
.text:000000000001A11E                 movzx   edx, byte ptr [rcx]
.text:000000000001A121                 mov     eax, edx
.text:000000000001A123                 shr     al, 5
.text:000000000001A126                 and     eax, 7
.text:000000000001A129                 mov     eax, [r13+rax*4+0]
.text:000000000001A12E                 bt      eax, edx
.text:000000000001A131                 jnb     loc_1A42F
.text:000000000001A137                 mov     [rsp+1C8h+var_130], 1
.text:000000000001A143                 movsx   eax, byte ptr [rcx]
.text:000000000001A146                 mov     [rsp+1C8h+var_128], 1
.text:000000000001A14E                 mov     [rsp+1C8h+var_13C], 1
.text:000000000001A156                 mov     [rsp+1C8h+var_124], eax
.text:000000000001A15D
.text:000000000001A15D loc_1A15D:                              ; CODE XREF: mbsstr+F8A↓j
.text:000000000001A15D                                         ; mbsstr+1072↓j ...
.text:000000000001A15D                 mov     r8d, [rsp+1C8h+var_124]
.text:000000000001A165                 test    r8d, r8d
.text:000000000001A168                 jz      loc_19F6B
.text:000000000001A16E
.text:000000000001A16E loc_1A16E:                              ; CODE XREF: mbsstr+FFA↓j
.text:000000000001A16E                                         ; mbsstr+1065↓j ...
.text:000000000001A16E                 movzx   edx, byte ptr [rsp+1C8h+var_E8]
.text:000000000001A176                 mov     byte ptr [rsp+1C8h+var_1B8], 1
.text:000000000001A17B
.text:000000000001A17B loc_1A17B:                              ; CODE XREF: mbsstr+AF1↑j
.text:000000000001A17B                 lea     rax, [rbx+1]
.text:000000000001A17F                 test    dl, dl
.text:000000000001A181                 mov     [rsp+1C8h+var_1A8], rbx
.text:000000000001A186                 mov     rbx, rax
.text:000000000001A189                 jnz     loc_19784
.text:000000000001A18F                 jmp     loc_19D01
.text:000000000001A18F ; ---------------------------------------------------------------------------
.text:000000000001A194                 align 8
.text:000000000001A198
.text:000000000001A198 loc_1A198:                              ; CODE XREF: mbsstr+5CE↑j
.text:000000000001A198                 mov     rdi, [rsp+1C8h+n] ; s
.text:000000000001A1A0                 call    _strlen
.text:000000000001A1A5                 mov     byte ptr [rsp+1C8h+var_E8], 0
.text:000000000001A1AD                 mov     [rsp+1C8h+n+8], rax
.text:000000000001A1B5                 mov     byte ptr [rsp+1C8h+ps.__value+8], 1
.text:000000000001A1BD                 jmp     loc_19CEC
.text:000000000001A1BD ; ---------------------------------------------------------------------------
.text:000000000001A1C2                 align 8
.text:000000000001A1C8
.text:000000000001A1C8 loc_1A1C8:                              ; CODE XREF: mbsstr+398↑j
.text:000000000001A1C8                 mov     rdi, rcx        ; ps
.text:000000000001A1CB                 mov     [rsp+1C8h+var_1B0], rcx
.text:000000000001A1D0                 call    _mbsinit
.text:000000000001A1D5                 test    eax, eax
.text:000000000001A1D7                 jz      loc_1A558
.text:000000000001A1DD                 mov     [rsp+1C8h+var_88], 1
.text:000000000001A1E5                 call    ___ctype_get_mb_cur_max
.text:000000000001A1EA                 mov     r8, [rsp+1C8h+s2]
.text:000000000001A1F2                 mov     rsi, rax
.text:000000000001A1F5                 mov     rdi, r8
.text:000000000001A1F8                 mov     [rsp+1C8h+var_1C8], r8
.text:000000000001A1FC                 call    strnlen1
.text:000000000001A201                 mov     r8, [rsp+1C8h+var_1C8]
.text:000000000001A205                 mov     rcx, [rsp+1C8h+var_1B0]
.text:000000000001A20A                 lea     rdi, [rbp+24h]
.text:000000000001A20E                 mov     rdx, rax
.text:000000000001A211                 mov     rsi, r8
.text:000000000001A214                 call    rpl_mbrtowc
.text:000000000001A219                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A21D                 mov     [rsp+1C8h+var_70], rax
.text:000000000001A225                 jz      loc_1A348
.text:000000000001A22B                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001A22F                 jz      loc_1A4A9
.text:000000000001A235                 test    rax, rax
.text:000000000001A238                 jnz     short loc_1A270
.text:000000000001A23A                 mov     rax, [rsp+1C8h+s2]
.text:000000000001A242                 mov     [rsp+1C8h+var_70], 1
.text:000000000001A24E                 cmp     byte ptr [rax], 0
.text:000000000001A251                 jnz     loc_1A585
.text:000000000001A257                 mov     edi, [rsp+1C8h+var_64]
.text:000000000001A25E                 test    edi, edi
.text:000000000001A260                 jz      short loc_1A270
.text:000000000001A262
.text:000000000001A262 loc_1A262:                              ; CODE XREF: mbsstr+5FF↑j
.text:000000000001A262                                         ; mbsstr+6D3↑j ...
.text:000000000001A262                 call    mbuiter_multi_next_part_0_0
.text:000000000001A262 ; ---------------------------------------------------------------------------
.text:000000000001A267                 align 10h
.text:000000000001A270
.text:000000000001A270 loc_1A270:                              ; CODE XREF: mbsstr+D98↑j
.text:000000000001A270                                         ; mbsstr+DC0↑j
.text:000000000001A270                 lea     rdi, [rbp+4]    ; ps
.text:000000000001A274                 mov     [rsp+1C8h+var_68], 1
.text:000000000001A27C                 call    _mbsinit
.text:000000000001A281                 test    eax, eax
.text:000000000001A283                 jz      loc_1A45E
.text:000000000001A289                 mov     [rsp+1C8h+var_88], 0
.text:000000000001A291                 mov     [rsp+1C8h+var_7C], 1
.text:000000000001A299                 jmp     loc_19861
.text:000000000001A299 ; ---------------------------------------------------------------------------
.text:000000000001A29E                 align 20h
.text:000000000001A2A0
.text:000000000001A2A0 loc_1A2A0:                              ; CODE XREF: mbsstr+15E↑j
.text:000000000001A2A0                 mov     rdi, rbp        ; ps
.text:000000000001A2A3                 call    _mbsinit
.text:000000000001A2A8                 test    eax, eax
.text:000000000001A2AA                 jz      loc_1A558
.text:000000000001A2B0                 mov     [rsp+1C8h+var_188], 1
.text:000000000001A2B5                 call    ___ctype_get_mb_cur_max
.text:000000000001A2BA                 mov     r14, [rsp+1C8h+var_178]
.text:000000000001A2BF                 mov     rsi, rax
.text:000000000001A2C2                 mov     rdi, r14
.text:000000000001A2C5                 call    strnlen1
.text:000000000001A2CA                 lea     rdi, [rbx+24h]
.text:000000000001A2CE                 mov     rcx, rbp
.text:000000000001A2D1                 mov     rdx, rax
.text:000000000001A2D4                 mov     rsi, r14
.text:000000000001A2D7                 call    rpl_mbrtowc
.text:000000000001A2DC                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A2E0                 mov     [rsp+1C8h+var_170], rax
.text:000000000001A2E5                 jz      loc_19668
.text:000000000001A2EB                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001A2EF                 jz      loc_1A4CB
.text:000000000001A2F5                 test    rax, rax
.text:000000000001A2F8                 jnz     short loc_1A31D
.text:000000000001A2FA                 mov     rax, [rsp+1C8h+var_178]
.text:000000000001A2FF                 mov     [rsp+1C8h+var_170], 1
.text:000000000001A308                 cmp     byte ptr [rax], 0
.text:000000000001A30B                 jnz     loc_1A585
.text:000000000001A311                 mov     eax, [rsp+1C8h+var_164]
.text:000000000001A315                 test    eax, eax
.text:000000000001A317                 jnz     loc_1A262
.text:000000000001A31D
.text:000000000001A31D loc_1A31D:                              ; CODE XREF: mbsstr+E58↑j
.text:000000000001A31D                 lea     rdi, [rbx+4]    ; ps
.text:000000000001A321                 mov     [rsp+1C8h+var_168], 1
.text:000000000001A326                 call    _mbsinit
.text:000000000001A32B                 test    eax, eax
.text:000000000001A32D                 jz      loc_1A46B
.text:000000000001A333                 mov     [rsp+1C8h+var_188], 0
.text:000000000001A338                 mov     [rsp+1C8h+var_17C], 1
.text:000000000001A33D                 jmp     loc_1961B
.text:000000000001A33D ; ---------------------------------------------------------------------------
.text:000000000001A342                 align 8
.text:000000000001A348
.text:000000000001A348 loc_1A348:                              ; CODE XREF: mbsstr+D85↑j
.text:000000000001A348                 mov     [rsp+1C8h+var_70], 1
.text:000000000001A354                 mov     [rsp+1C8h+var_68], 0
.text:000000000001A35C                 jmp     loc_19870
.text:000000000001A35C ; ---------------------------------------------------------------------------
.text:000000000001A361                 align 8
.text:000000000001A368
.text:000000000001A368 loc_1A368:                              ; CODE XREF: mbsstr+C70↑j
.text:000000000001A368                 lea     rax, [rsp+1C8h+var_148]
.text:000000000001A370                 mov     [rsp+1C8h+var_1B8], rax
.text:000000000001A375
.text:000000000001A375 loc_1A375:                              ; CODE XREF: mbsstr+FB9↓j
.text:000000000001A375                 call    ___ctype_get_mb_cur_max
.text:000000000001A37A                 mov     r8, [rsp+1C8h+s]
.text:000000000001A382                 mov     rsi, rax
.text:000000000001A385                 mov     rdi, r8
.text:000000000001A388                 mov     [rsp+1C8h+var_1C8], r8
.text:000000000001A38C                 call    strnlen1
.text:000000000001A391                 mov     rsi, [rsp+1C8h+var_1B8]
.text:000000000001A396                 mov     r8, [rsp+1C8h+var_1C8]
.text:000000000001A39A                 mov     rdx, rax
.text:000000000001A39D                 lea     rcx, [rsi+4]
.text:000000000001A3A1                 lea     rdi, [rsi+24h]
.text:000000000001A3A5                 mov     rsi, r8
.text:000000000001A3A8                 call    rpl_mbrtowc
.text:000000000001A3AD                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A3B1                 mov     [rsp+1C8h+var_130], rax
.text:000000000001A3B9                 jz      loc_1A4E9
.text:000000000001A3BF                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001A3C3                 jz      loc_1A475
.text:000000000001A3C9                 test    rax, rax
.text:000000000001A3CC                 jnz     short loc_1A3FC
.text:000000000001A3CE                 mov     rax, [rsp+1C8h+s]
.text:000000000001A3D6                 mov     [rsp+1C8h+var_130], 1
.text:000000000001A3E2                 cmp     byte ptr [rax], 0
.text:000000000001A3E5                 jnz     loc_1A585
.text:000000000001A3EB                 mov     r9d, [rsp+1C8h+var_124]
.text:000000000001A3F3                 test    r9d, r9d
.text:000000000001A3F6                 jnz     loc_1A262
.text:000000000001A3FC
.text:000000000001A3FC loc_1A3FC:                              ; CODE XREF: mbsstr+F2C↑j
.text:000000000001A3FC                 mov     rdi, [rsp+1C8h+var_1B8]
.text:000000000001A401                 mov     [rsp+1C8h+var_128], 1
.text:000000000001A409                 add     rdi, 4          ; ps
.text:000000000001A40D                 call    _mbsinit
.text:000000000001A412                 test    eax, eax
.text:000000000001A414                 jz      loc_1A50A
.text:000000000001A41A                 mov     [rsp+1C8h+var_148], 0
.text:000000000001A422                 mov     [rsp+1C8h+var_13C], 1
.text:000000000001A42A                 jmp     loc_1A15D
.text:000000000001A42F ; ---------------------------------------------------------------------------
.text:000000000001A42F
.text:000000000001A42F loc_1A42F:                              ; CODE XREF: mbsstr+C91↑j
.text:000000000001A42F                 lea     rax, [rsp+1C8h+var_148]
.text:000000000001A437                 lea     rdi, [rsp+1C8h+var_144] ; ps
.text:000000000001A43F                 mov     [rsp+1C8h+var_1B8], rax
.text:000000000001A444                 call    _mbsinit
.text:000000000001A449                 test    eax, eax
.text:000000000001A44B                 jz      loc_1A558
.text:000000000001A451                 mov     [rsp+1C8h+var_148], 1
.text:000000000001A459                 jmp     loc_1A375
.text:000000000001A45E ; ---------------------------------------------------------------------------
.text:000000000001A45E
.text:000000000001A45E loc_1A45E:                              ; CODE XREF: mbsstr+DE3↑j
.text:000000000001A45E                 mov     [rsp+1C8h+var_7C], 1
.text:000000000001A466                 jmp     loc_19861
.text:000000000001A46B ; ---------------------------------------------------------------------------
.text:000000000001A46B
.text:000000000001A46B loc_1A46B:                              ; CODE XREF: mbsstr+E8D↑j
.text:000000000001A46B                 mov     [rsp+1C8h+var_17C], 1
.text:000000000001A470                 jmp     loc_1961B
.text:000000000001A475 ; ---------------------------------------------------------------------------
.text:000000000001A475
.text:000000000001A475 loc_1A475:                              ; CODE XREF: mbsstr+F23↑j
.text:000000000001A475                 mov     rdi, [rsp+1C8h+s] ; s
.text:000000000001A47D                 call    _strlen
.text:000000000001A482                 mov     [rsp+1C8h+var_128], 0
.text:000000000001A48A                 mov     [rsp+1C8h+var_130], rax
.text:000000000001A492                 mov     [rsp+1C8h+var_13C], 1
.text:000000000001A49A                 jmp     loc_1A16E
.text:000000000001A49F ; ---------------------------------------------------------------------------
.text:000000000001A49F
.text:000000000001A49F loc_1A49F:                              ; CODE XREF: mbsstr+113↑j
.text:000000000001A49F                                         ; mbsstr+AE3↑j
.text:000000000001A49F                 mov     rax, [rsp+1C8h+var_190]
.text:000000000001A4A4                 jmp     loc_19626
.text:000000000001A4A9 ; ---------------------------------------------------------------------------
.text:000000000001A4A9
.text:000000000001A4A9 loc_1A4A9:                              ; CODE XREF: mbsstr+D8F↑j
.text:000000000001A4A9                 mov     rdi, [rsp+1C8h+s2] ; s
.text:000000000001A4B1                 call    _strlen
.text:000000000001A4B6                 mov     [rsp+1C8h+var_68], 0
.text:000000000001A4BE                 mov     [rsp+1C8h+var_70], rax
.text:000000000001A4C6                 jmp     loc_19870
.text:000000000001A4CB ; ---------------------------------------------------------------------------
.text:000000000001A4CB
.text:000000000001A4CB loc_1A4CB:                              ; CODE XREF: mbsstr+E4F↑j
.text:000000000001A4CB                 mov     rdi, [rsp+1C8h+var_178] ; s
.text:000000000001A4D0                 call    _strlen
.text:000000000001A4D5                 mov     [rsp+1C8h+var_168], 0
.text:000000000001A4DA                 mov     [rsp+1C8h+var_170], rax
.text:000000000001A4DF                 mov     [rsp+1C8h+var_17C], 1
.text:000000000001A4E4                 jmp     loc_1967B
.text:000000000001A4E9 ; ---------------------------------------------------------------------------
.text:000000000001A4E9
.text:000000000001A4E9 loc_1A4E9:                              ; CODE XREF: mbsstr+F19↑j
.text:000000000001A4E9                 mov     [rsp+1C8h+var_130], 1
.text:000000000001A4F5                 mov     [rsp+1C8h+var_128], 0
.text:000000000001A4FD                 mov     [rsp+1C8h+var_13C], 1
.text:000000000001A505                 jmp     loc_1A16E
.text:000000000001A50A ; ---------------------------------------------------------------------------
.text:000000000001A50A
.text:000000000001A50A loc_1A50A:                              ; CODE XREF: mbsstr+F74↑j
.text:000000000001A50A                 mov     [rsp+1C8h+var_13C], 1
.text:000000000001A512                 jmp     loc_1A15D
.text:000000000001A517 ; ---------------------------------------------------------------------------
.text:000000000001A517
.text:000000000001A517 loc_1A517:                              ; CODE XREF: mbsstr+A24↑j
.text:000000000001A517                 test    al, al
.text:000000000001A519                 jz      loc_1A108
.text:000000000001A51F                 cmp     [rsp+1C8h+var_128], 0
.text:000000000001A527                 jz      loc_1A16E
.text:000000000001A52D                 jmp     loc_1A15D
.text:000000000001A52D ; ---------------------------------------------------------------------------
.text:000000000001A532                 align 8
.text:000000000001A538
.text:000000000001A538 loc_1A538:                              ; CODE XREF: mbsstr+857↑j
.text:000000000001A538                 lea     rdx, [r14+r14*4]
.text:000000000001A53C                 cmp     rbx, rdx
.text:000000000001A53F                 jnb     loc_19EB0
.text:000000000001A545                 add     rbx, 1
.text:000000000001A549                 mov     byte ptr [rsp+1C8h+var_1B8], al
.text:000000000001A54D                 jmp     loc_19D01
.text:000000000001A54D ; ---------------------------------------------------------------------------
.text:000000000001A552                 align 8
.text:000000000001A558
.text:000000000001A558 loc_1A558:                              ; CODE XREF: mbsstr+64B↑j
.text:000000000001A558                                         ; mbsstr+733↑j ...
.text:000000000001A558                 lea     rcx, __PRETTY_FUNCTION___5056 ; "mbuiter_multi_next"
.text:000000000001A55F                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000001A566                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:000000000001A56D                 mov     edx, 96h        ; line
.text:000000000001A572                 call    ___assert_fail
.text:000000000001A577 ; ---------------------------------------------------------------------------
.text:000000000001A577
.text:000000000001A577 loc_1A577:                              ; CODE XREF: mbsstr+2C9↑j
.text:000000000001A577                 add     rbx, 1
.text:000000000001A57B                 jmp     loc_19784
.text:000000000001A580 ; ---------------------------------------------------------------------------
.text:000000000001A580
.text:000000000001A580 loc_1A580:                              ; CODE XREF: mbsstr+197↑j
.text:000000000001A580                 call    ___stack_chk_fail
.text:000000000001A585 ; ---------------------------------------------------------------------------
.text:000000000001A585
.text:000000000001A585 loc_1A585:                              ; CODE XREF: mbsstr+5F0↑j
.text:000000000001A585                                         ; mbsstr+6C4↑j ...
.text:000000000001A585                 lea     rcx, __PRETTY_FUNCTION___5056 ; "mbuiter_multi_next"
.text:000000000001A58C                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000001A593                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:000000000001A59A                 mov     edx, 0B2h       ; line
.text:000000000001A59F                 call    ___assert_fail
.text:000000000001A5A4 ; ---------------------------------------------------------------------------
.text:000000000001A5A4
.text:000000000001A5A4 loc_1A5A4:                              ; CODE XREF: mbsstr+3CA↑j
.text:000000000001A5A4                 call    _abort
.text:000000000001A5A4 ; } // starts at 194A0
.text:000000000001A5A4 mbsstr          endp
.text:000000000001A5A4
.text:000000000001A5A4 ; ---------------------------------------------------------------------------
.text:000000000001A5A9                 align 10h
.text:000000000001A5B0 ; File Name   : /home/ig/vdtests/input/x64_upacks_64/striconv.o
.text:000000000001A5B0 ; Format      : ELF64 for x86-64 (Relocatable)
.text:000000000001A5B0 ;
.text:000000000001A5B0
.text:000000000001A5B0 ; =============== S U B R O U T I N E =======================================
.text:000000000001A5B0
.text:000000000001A5B0 ; Attributes: info_from_lumina
.text:000000000001A5B0
.text:000000000001A5B0                 public libgettextpo_mem_cd_iconv
.text:000000000001A5B0 libgettextpo_mem_cd_iconv proc near     ; CODE XREF: xmem_cd_iconv+1↑p
.text:000000000001A5B0
.text:000000000001A5B0 inbuf           = qword ptr -1090h
.text:000000000001A5B0 var_1088        = qword ptr -1088h
.text:000000000001A5B0 var_1080        = qword ptr -1080h
.text:000000000001A5B0 ptr             = qword ptr -1078h
.text:000000000001A5B0 var_1070        = qword ptr -1070h
.text:000000000001A5B0 var_1068        = qword ptr -1068h
.text:000000000001A5B0 inbytesleft     = qword ptr -1060h
.text:000000000001A5B0 outbuf          = qword ptr -1058h
.text:000000000001A5B0 outbytesleft    = qword ptr -1050h
.text:000000000001A5B0 var_1048        = byte ptr -1048h
.text:000000000001A5B0 var_40          = qword ptr -40h
.text:000000000001A5B0
.text:000000000001A5B0 ; __unwind {
.text:000000000001A5B0                 push    r15
.text:000000000001A5B2                 push    r14
.text:000000000001A5B4                 mov     r15, rdi
.text:000000000001A5B7                 push    r13
.text:000000000001A5B9                 push    r12
.text:000000000001A5BB                 mov     r13, rsi
.text:000000000001A5BE                 push    rbp
.text:000000000001A5BF                 push    rbx
.text:000000000001A5C0                 mov     rbx, rdx
.text:000000000001A5C3                 xor     esi, esi        ; inbuf
.text:000000000001A5C5                 xor     edx, edx        ; inbytesleft
.text:000000000001A5C7                 sub     rsp, 1068h
.text:000000000001A5CE                 mov     [rsp+1098h+var_1070], rdi
.text:000000000001A5D3                 mov     [rsp+1098h+var_1080], rcx
.text:000000000001A5D8                 mov     rdi, rbx        ; cd
.text:000000000001A5DB                 mov     [rsp+1098h+var_1088], r8
.text:000000000001A5E0                 xor     ecx, ecx        ; outbuf
.text:000000000001A5E2                 xor     r8d, r8d        ; outbytesleft
.text:000000000001A5E5                 mov     rax, fs:28h
.text:000000000001A5EE                 mov     [rsp+1098h+var_40], rax
.text:000000000001A5F6                 xor     eax, eax
.text:000000000001A5F8                 call    _iconv          ; PIC mode
.text:000000000001A5FD                 mov     [rsp+1098h+var_1068], r15
.text:000000000001A602                 xor     r15d, r15d
.text:000000000001A605                 test    r13, r13
.text:000000000001A608                 mov     [rsp+1098h+inbytesleft], r13
.text:000000000001A60D                 lea     r14, [rsp+1098h+var_1048]
.text:000000000001A612                 lea     r12, [rsp+1098h+outbytesleft]
.text:000000000001A617                 lea     rbp, [rsp+1098h+outbuf]
.text:000000000001A61C                 jz      short loc_1A69B
.text:000000000001A61E                 lea     rax, [rsp+1098h+inbytesleft]
.text:000000000001A623                 lea     rsi, [rsp+1098h+var_1068]
.text:000000000001A628                 mov     [rsp+1098h+ptr], r13
.text:000000000001A62D                 mov     [rsp+1098h+inbuf], rsi
.text:000000000001A632                 mov     r13, rax
.text:000000000001A635                 jmp     short loc_1A657
.text:000000000001A635 ; ---------------------------------------------------------------------------
.text:000000000001A637                 align 20h
.text:000000000001A640
.text:000000000001A640 loc_1A640:                              ; CODE XREF: libgettextpo_mem_cd_iconv+CF↓j
.text:000000000001A640                                         ; libgettextpo_mem_cd_iconv+DB↓j
.text:000000000001A640                 mov     rax, [rsp+1098h+outbuf]
.text:000000000001A645                 sub     rax, r14
.text:000000000001A648                 add     r15, rax
.text:000000000001A64B                 cmp     [rsp+1098h+inbytesleft], 0
.text:000000000001A651                 jz      loc_1A7F0
.text:000000000001A657
.text:000000000001A657 loc_1A657:                              ; CODE XREF: libgettextpo_mem_cd_iconv+85↑j
.text:000000000001A657                 mov     rsi, [rsp+1098h+inbuf] ; inbuf
.text:000000000001A65C                 mov     r8, r12         ; outbytesleft
.text:000000000001A65F                 mov     rcx, rbp        ; outbuf
.text:000000000001A662                 mov     rdx, r13        ; inbytesleft
.text:000000000001A665                 mov     rdi, rbx        ; cd
.text:000000000001A668                 mov     [rsp+1098h+outbuf], r14
.text:000000000001A66D                 mov     [rsp+1098h+outbytesleft], 1000h
.text:000000000001A676                 call    _iconv          ; PIC mode
.text:000000000001A67B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A67F                 jnz     short loc_1A640
.text:000000000001A681                 call    ___errno_location ; PIC mode
.text:000000000001A686                 mov     eax, [rax]
.text:000000000001A688                 cmp     eax, 7
.text:000000000001A68B                 jz      short loc_1A640
.text:000000000001A68D                 cmp     eax, 16h
.text:000000000001A690                 mov     r13, [rsp+1098h+ptr]
.text:000000000001A695                 jnz     loc_1A859
.text:000000000001A69B
.text:000000000001A69B loc_1A69B:                              ; CODE XREF: libgettextpo_mem_cd_iconv+6C↑j
.text:000000000001A69B                                         ; libgettextpo_mem_cd_iconv+245↓j
.text:000000000001A69B                 xor     edx, edx        ; inbytesleft
.text:000000000001A69D                 xor     esi, esi        ; inbuf
.text:000000000001A69F                 mov     r8, r12         ; outbytesleft
.text:000000000001A6A2                 mov     rcx, rbp        ; outbuf
.text:000000000001A6A5                 mov     rdi, rbx        ; cd
.text:000000000001A6A8                 mov     [rsp+1098h+outbuf], r14
.text:000000000001A6AD                 mov     [rsp+1098h+outbytesleft], 1000h
.text:000000000001A6B6                 call    _iconv          ; PIC mode
.text:000000000001A6BB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A6BF                 jz      loc_1A859
.text:000000000001A6C5                 mov     rax, [rsp+1098h+outbuf]
.text:000000000001A6CA                 sub     rax, r14
.text:000000000001A6CD                 add     rax, r15
.text:000000000001A6D0                 mov     [rsp+1098h+inbuf], rax
.text:000000000001A6D5                 jz      loc_1A800
.text:000000000001A6DB                 mov     rax, [rsp+1098h+var_1080]
.text:000000000001A6E0                 mov     rax, [rax]
.text:000000000001A6E3                 test    rax, rax
.text:000000000001A6E6                 mov     [rsp+1098h+ptr], rax
.text:000000000001A6EB                 jz      short loc_1A6FC
.text:000000000001A6ED                 mov     rax, [rsp+1098h+var_1088]
.text:000000000001A6F2                 mov     rcx, [rsp+1098h+inbuf]
.text:000000000001A6F7                 cmp     [rax], rcx
.text:000000000001A6FA                 jnb     short loc_1A714
.text:000000000001A6FC
.text:000000000001A6FC loc_1A6FC:                              ; CODE XREF: libgettextpo_mem_cd_iconv+13B↑j
.text:000000000001A6FC                 mov     rdi, [rsp+1098h+inbuf] ; size
.text:000000000001A701                 call    _malloc         ; PIC mode
.text:000000000001A706                 test    rax, rax
.text:000000000001A709                 mov     [rsp+1098h+ptr], rax
.text:000000000001A70E                 jz      loc_1A84E
.text:000000000001A714
.text:000000000001A714 loc_1A714:                              ; CODE XREF: libgettextpo_mem_cd_iconv+14A↑j
.text:000000000001A714                 xor     r8d, r8d        ; outbytesleft
.text:000000000001A717                 xor     ecx, ecx        ; outbuf
.text:000000000001A719                 xor     edx, edx        ; inbytesleft
.text:000000000001A71B                 xor     esi, esi        ; inbuf
.text:000000000001A71D                 mov     rdi, rbx        ; cd
.text:000000000001A720                 lea     r15, [rsp+1098h+inbytesleft]
.text:000000000001A725                 call    _iconv          ; PIC mode
.text:000000000001A72A                 mov     rax, [rsp+1098h+var_1070]
.text:000000000001A72F                 mov     [rsp+1098h+inbytesleft], r13
.text:000000000001A734                 lea     r14, [rsp+1098h+var_1068]
.text:000000000001A739                 mov     [rsp+1098h+var_1068], rax
.text:000000000001A73E                 mov     rax, [rsp+1098h+ptr]
.text:000000000001A743                 mov     [rsp+1098h+outbuf], rax
.text:000000000001A748                 mov     rax, [rsp+1098h+inbuf]
.text:000000000001A74D                 mov     [rsp+1098h+outbytesleft], rax
.text:000000000001A752                 jmp     short loc_1A77B
.text:000000000001A752 ; ---------------------------------------------------------------------------
.text:000000000001A754                 align 8
.text:000000000001A758
.text:000000000001A758 loc_1A758:                              ; CODE XREF: libgettextpo_mem_cd_iconv+1CE↓j
.text:000000000001A758                 mov     r8, r12         ; outbytesleft
.text:000000000001A75B                 mov     rcx, rbp        ; outbuf
.text:000000000001A75E                 mov     rdx, r15        ; inbytesleft
.text:000000000001A761                 mov     rsi, r14        ; inbuf
.text:000000000001A764                 mov     rdi, rbx        ; cd
.text:000000000001A767                 call    _iconv          ; PIC mode
.text:000000000001A76C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A770                 jz      loc_1A810
.text:000000000001A776                 mov     r13, [rsp+1098h+inbytesleft]
.text:000000000001A77B
.text:000000000001A77B loc_1A77B:                              ; CODE XREF: libgettextpo_mem_cd_iconv+1A2↑j
.text:000000000001A77B                 test    r13, r13
.text:000000000001A77E                 jnz     short loc_1A758
.text:000000000001A780
.text:000000000001A780 loc_1A780:                              ; CODE XREF: libgettextpo_mem_cd_iconv+268↓j
.text:000000000001A780                 xor     edx, edx        ; inbytesleft
.text:000000000001A782                 xor     esi, esi        ; inbuf
.text:000000000001A784                 mov     r8, r12         ; outbytesleft
.text:000000000001A787                 mov     rcx, rbp        ; outbuf
.text:000000000001A78A                 mov     rdi, rbx        ; cd
.text:000000000001A78D                 call    _iconv          ; PIC mode
.text:000000000001A792                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A796                 jz      loc_1A81E
.text:000000000001A79C                 cmp     [rsp+1098h+outbytesleft], 0
.text:000000000001A7A2                 jnz     loc_1A863
.text:000000000001A7A8                 mov     rax, [rsp+1098h+var_1080]
.text:000000000001A7AD                 mov     rsi, [rsp+1098h+ptr]
.text:000000000001A7B2                 xor     ebx, ebx
.text:000000000001A7B4                 mov     rdi, [rsp+1098h+inbuf]
.text:000000000001A7B9                 mov     [rax], rsi
.text:000000000001A7BC                 mov     rax, [rsp+1098h+var_1088]
.text:000000000001A7C1                 mov     [rax], rdi
.text:000000000001A7C4
.text:000000000001A7C4 loc_1A7C4:                              ; CODE XREF: libgettextpo_mem_cd_iconv+25E↓j
.text:000000000001A7C4                                         ; libgettextpo_mem_cd_iconv+280↓j ...
.text:000000000001A7C4                 mov     rdx, [rsp+1098h+var_40]
.text:000000000001A7CC                 xor     rdx, fs:28h
.text:000000000001A7D5                 mov     eax, ebx
.text:000000000001A7D7                 jnz     loc_1A868
.text:000000000001A7DD                 add     rsp, 1068h
.text:000000000001A7E4                 pop     rbx
.text:000000000001A7E5                 pop     rbp
.text:000000000001A7E6                 pop     r12
.text:000000000001A7E8                 pop     r13
.text:000000000001A7EA                 pop     r14
.text:000000000001A7EC                 pop     r15
.text:000000000001A7EE                 retn
.text:000000000001A7EE ; ---------------------------------------------------------------------------
.text:000000000001A7EF                 align 10h
.text:000000000001A7F0
.text:000000000001A7F0 loc_1A7F0:                              ; CODE XREF: libgettextpo_mem_cd_iconv+A1↑j
.text:000000000001A7F0                 mov     r13, [rsp+1098h+ptr]
.text:000000000001A7F5                 jmp     loc_1A69B
.text:000000000001A7F5 ; ---------------------------------------------------------------------------
.text:000000000001A7FA                 align 20h
.text:000000000001A800
.text:000000000001A800 loc_1A800:                              ; CODE XREF: libgettextpo_mem_cd_iconv+125↑j
.text:000000000001A800                 mov     rax, [rsp+1098h+var_1088]
.text:000000000001A805                 xor     ebx, ebx
.text:000000000001A807                 mov     qword ptr [rax], 0
.text:000000000001A80E                 jmp     short loc_1A7C4
.text:000000000001A810 ; ---------------------------------------------------------------------------
.text:000000000001A810
.text:000000000001A810 loc_1A810:                              ; CODE XREF: libgettextpo_mem_cd_iconv+1C0↑j
.text:000000000001A810                 call    ___errno_location ; PIC mode
.text:000000000001A815                 cmp     dword ptr [rax], 16h
.text:000000000001A818                 jz      loc_1A780
.text:000000000001A81E
.text:000000000001A81E loc_1A81E:                              ; CODE XREF: libgettextpo_mem_cd_iconv+1E6↑j
.text:000000000001A81E                 mov     rax, [rsp+1098h+var_1080]
.text:000000000001A823                 mov     r15, [rsp+1098h+ptr]
.text:000000000001A828                 mov     ebx, 0FFFFFFFFh
.text:000000000001A82D                 cmp     [rax], r15
.text:000000000001A830                 jz      short loc_1A7C4
.text:000000000001A832                 call    ___errno_location ; PIC mode
.text:000000000001A837                 mov     r12d, [rax]
.text:000000000001A83A                 mov     rbp, rax
.text:000000000001A83D                 mov     rdi, r15        ; ptr
.text:000000000001A840                 call    _free           ; PIC mode
.text:000000000001A845                 mov     [rbp+0], r12d
.text:000000000001A849                 jmp     loc_1A7C4
.text:000000000001A84E ; ---------------------------------------------------------------------------
.text:000000000001A84E
.text:000000000001A84E loc_1A84E:                              ; CODE XREF: libgettextpo_mem_cd_iconv+15E↑j
.text:000000000001A84E                 call    ___errno_location ; PIC mode
.text:000000000001A853                 mov     dword ptr [rax], 0Ch
.text:000000000001A859
.text:000000000001A859 loc_1A859:                              ; CODE XREF: libgettextpo_mem_cd_iconv+E5↑j
.text:000000000001A859                                         ; libgettextpo_mem_cd_iconv+10F↑j
.text:000000000001A859                 mov     ebx, 0FFFFFFFFh
.text:000000000001A85E                 jmp     loc_1A7C4
.text:000000000001A863 ; ---------------------------------------------------------------------------
.text:000000000001A863
.text:000000000001A863 loc_1A863:                              ; CODE XREF: libgettextpo_mem_cd_iconv+1F2↑j
.text:000000000001A863                 call    _abort          ; PIC mode
.text:000000000001A868 ; ---------------------------------------------------------------------------
.text:000000000001A868
.text:000000000001A868 loc_1A868:                              ; CODE XREF: libgettextpo_mem_cd_iconv+227↑j
.text:000000000001A868                 call    ___stack_chk_fail ; PIC mode
.text:000000000001A868 ; } // starts at 1A5B0
.text:000000000001A868 libgettextpo_mem_cd_iconv endp
.text:000000000001A868
.text:000000000001A868 ; ---------------------------------------------------------------------------
.text:000000000001A86D                 align 10h
.text:000000000001A870
.text:000000000001A870 ; =============== S U B R O U T I N E =======================================
.text:000000000001A870
.text:000000000001A870 ; Attributes: info_from_lumina
.text:000000000001A870
.text:000000000001A870                 public libgettextpo_str_cd_iconv
.text:000000000001A870 libgettextpo_str_cd_iconv proc near     ; CODE XREF: xreadlink+1↑p
.text:000000000001A870                                         ; str_iconv+66↓p
.text:000000000001A870
.text:000000000001A870 outbuf          = qword ptr -88h
.text:000000000001A870 outbytesleft    = qword ptr -80h
.text:000000000001A870 inbuf           = qword ptr -78h
.text:000000000001A870 inbytesleft     = qword ptr -70h
.text:000000000001A870 var_60          = qword ptr -60h
.text:000000000001A870 var_58          = qword ptr -58h
.text:000000000001A870 var_50          = qword ptr -50h
.text:000000000001A870 var_48          = qword ptr -48h
.text:000000000001A870 var_40          = qword ptr -40h
.text:000000000001A870
.text:000000000001A870 ; __unwind {
.text:000000000001A870                 push    r15
.text:000000000001A872                 push    r14
.text:000000000001A874                 push    r13
.text:000000000001A876                 push    r12
.text:000000000001A878                 mov     r12, rsi
.text:000000000001A87B                 push    rbp
.text:000000000001A87C                 push    rbx
.text:000000000001A87D                 sub     rsp, 58h
.text:000000000001A881                 mov     rax, fs:28h
.text:000000000001A88A                 mov     [rsp+88h+var_40], rax
.text:000000000001A88F                 xor     eax, eax
.text:000000000001A891                 mov     [rsp+88h+var_60], rdi
.text:000000000001A896                 call    _strlen         ; PIC mode
.text:000000000001A89B                 mov     r13, rax
.text:000000000001A89E                 mov     [rsp+88h+var_58], rax
.text:000000000001A8A3                 shl     r13, 4
.text:000000000001A8A7                 cmp     rax, 10000000h
.text:000000000001A8AD                 cmovnb  r13, rax
.text:000000000001A8B1                 lea     rbp, [r13+1]
.text:000000000001A8B5                 mov     rdi, rbp        ; size
.text:000000000001A8B8                 call    _malloc         ; PIC mode
.text:000000000001A8BD                 test    rax, rax
.text:000000000001A8C0                 mov     rbx, rax
.text:000000000001A8C3                 jz      loc_1AAA0
.text:000000000001A8C9                 xor     r8d, r8d        ; outbytesleft
.text:000000000001A8CC                 xor     ecx, ecx        ; outbuf
.text:000000000001A8CE                 xor     edx, edx        ; inbytesleft
.text:000000000001A8D0                 xor     esi, esi        ; inbuf
.text:000000000001A8D2                 mov     rdi, r12        ; cd
.text:000000000001A8D5                 call    _iconv          ; PIC mode
.text:000000000001A8DA                 lea     rax, [rsp+88h+var_48]
.text:000000000001A8DF                 mov     [rsp+88h+var_50], rbx
.text:000000000001A8E4                 mov     [rsp+88h+var_48], r13
.text:000000000001A8E9                 mov     [rsp+88h+outbytesleft], rax
.text:000000000001A8EE                 lea     rax, [rsp+88h+var_50]
.text:000000000001A8F3                 mov     [rsp+88h+outbuf], rax
.text:000000000001A8F7                 lea     rax, [rsp+88h+var_58]
.text:000000000001A8FC                 mov     [rsp+88h+inbytesleft], rax
.text:000000000001A901                 lea     rax, [rsp+88h+var_60]
.text:000000000001A906                 mov     [rsp+88h+inbuf], rax
.text:000000000001A90B                 jmp     short loc_1A974
.text:000000000001A90B ; ---------------------------------------------------------------------------
.text:000000000001A90D                 align 10h
.text:000000000001A910
.text:000000000001A910 loc_1A910:                              ; CODE XREF: libgettextpo_str_cd_iconv+123↓j
.text:000000000001A910                 call    ___errno_location ; PIC mode
.text:000000000001A915                 mov     r15, rax
.text:000000000001A918                 mov     eax, [rax]
.text:000000000001A91A                 cmp     eax, 16h
.text:000000000001A91D                 jz      loc_1AA06
.text:000000000001A923                 cmp     eax, 7
.text:000000000001A926                 jnz     loc_1AA5E
.text:000000000001A92C                 mov     r14, [rsp+88h+var_50]
.text:000000000001A931                 lea     r13, [rbp+rbp+0]
.text:000000000001A936                 sub     r14, rbx
.text:000000000001A939                 cmp     rbp, r13
.text:000000000001A93C                 jnb     loc_1AA90
.text:000000000001A942                 mov     rsi, r13        ; size
.text:000000000001A945                 mov     rdi, rbx        ; ptr
.text:000000000001A948                 call    _realloc        ; PIC mode
.text:000000000001A94D                 test    rax, rax
.text:000000000001A950                 jz      loc_1AA90
.text:000000000001A956                 lea     rsi, [rax+r14]
.text:000000000001A95A                 mov     rbx, rax
.text:000000000001A95D                 mov     rbp, r13
.text:000000000001A960                 mov     [rsp+88h+var_50], rsi
.text:000000000001A965                 lea     rsi, [r13-1]
.text:000000000001A969                 mov     rdx, rsi
.text:000000000001A96C                 sub     rdx, r14
.text:000000000001A96F                 mov     [rsp+88h+var_48], rdx
.text:000000000001A974
.text:000000000001A974 loc_1A974:                              ; CODE XREF: libgettextpo_str_cd_iconv+9B↑j
.text:000000000001A974                 mov     r8, [rsp+88h+outbytesleft] ; outbytesleft
.text:000000000001A979                 mov     rcx, [rsp+88h+outbuf] ; outbuf
.text:000000000001A97D                 mov     rdi, r12        ; cd
.text:000000000001A980                 mov     rdx, [rsp+88h+inbytesleft] ; inbytesleft
.text:000000000001A985                 mov     rsi, [rsp+88h+inbuf] ; inbuf
.text:000000000001A98A                 call    _iconv          ; PIC mode
.text:000000000001A98F                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001A993                 jz      loc_1A910
.text:000000000001A999                 jmp     short loc_1AA06
.text:000000000001A999 ; ---------------------------------------------------------------------------
.text:000000000001A99B                 align 20h
.text:000000000001A9A0
.text:000000000001A9A0 loc_1A9A0:                              ; CODE XREF: libgettextpo_str_cd_iconv+1AF↓j
.text:000000000001A9A0                 call    ___errno_location ; PIC mode
.text:000000000001A9A5                 cmp     dword ptr [rax], 7
.text:000000000001A9A8                 mov     rcx, rax
.text:000000000001A9AB                 jnz     loc_1AA5E
.text:000000000001A9B1                 mov     r15, [rsp+88h+var_50]
.text:000000000001A9B6                 lea     rdx, [rbp+rbp+0]
.text:000000000001A9BB                 sub     r15, rbx
.text:000000000001A9BE                 cmp     rbp, rdx
.text:000000000001A9C1                 jnb     loc_1AA58
.text:000000000001A9C7                 mov     rsi, rdx        ; size
.text:000000000001A9CA                 mov     rdi, rbx        ; ptr
.text:000000000001A9CD                 mov     [rsp+88h+inbuf], rdx
.text:000000000001A9D2                 mov     [rsp+88h+inbytesleft], rax
.text:000000000001A9D7                 call    _realloc        ; PIC mode
.text:000000000001A9DC                 test    rax, rax
.text:000000000001A9DF                 mov     rdx, [rsp+88h+inbuf]
.text:000000000001A9E4                 mov     rcx, [rsp+88h+inbytesleft]
.text:000000000001A9E9                 jz      short loc_1AA58
.text:000000000001A9EB                 lea     rcx, [rax+r15]
.text:000000000001A9EF                 mov     rbp, rdx
.text:000000000001A9F2                 mov     rbx, rax
.text:000000000001A9F5                 mov     [rsp+88h+var_50], rcx
.text:000000000001A9FA                 lea     rcx, [rdx-1]
.text:000000000001A9FE                 sub     rcx, r15
.text:000000000001AA01                 mov     [rsp+88h+var_48], rcx
.text:000000000001AA06
.text:000000000001AA06 loc_1AA06:                              ; CODE XREF: libgettextpo_str_cd_iconv+AD↑j
.text:000000000001AA06                                         ; libgettextpo_str_cd_iconv+129↑j
.text:000000000001AA06                 mov     r8, [rsp+88h+outbytesleft] ; outbytesleft
.text:000000000001AA0B                 mov     rcx, [rsp+88h+outbuf] ; outbuf
.text:000000000001AA0F                 xor     edx, edx        ; inbytesleft
.text:000000000001AA11                 xor     esi, esi        ; inbuf
.text:000000000001AA13                 mov     rdi, r12        ; cd
.text:000000000001AA16                 call    _iconv          ; PIC mode
.text:000000000001AA1B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001AA1F                 jz      loc_1A9A0
.text:000000000001AA25                 mov     rax, [rsp+88h+var_50]
.text:000000000001AA2A                 lea     rdx, [rax+1]
.text:000000000001AA2E                 mov     [rsp+88h+var_50], rdx
.text:000000000001AA33                 mov     byte ptr [rax], 0
.text:000000000001AA36                 mov     rsi, [rsp+88h+var_50]
.text:000000000001AA3B                 sub     rsi, rbx        ; size
.text:000000000001AA3E                 cmp     rbp, rsi
.text:000000000001AA41                 jbe     short loc_1AA68
.text:000000000001AA43                 mov     rdi, rbx        ; ptr
.text:000000000001AA46                 call    _realloc        ; PIC mode
.text:000000000001AA4B                 test    rax, rax
.text:000000000001AA4E                 cmovnz  rbx, rax
.text:000000000001AA52                 jmp     short loc_1AA68
.text:000000000001AA52 ; ---------------------------------------------------------------------------
.text:000000000001AA54                 align 8
.text:000000000001AA58
.text:000000000001AA58 loc_1AA58:                              ; CODE XREF: libgettextpo_str_cd_iconv+151↑j
.text:000000000001AA58                                         ; libgettextpo_str_cd_iconv+179↑j
.text:000000000001AA58                 mov     dword ptr [rcx], 0Ch
.text:000000000001AA5E
.text:000000000001AA5E loc_1AA5E:                              ; CODE XREF: libgettextpo_str_cd_iconv+B6↑j
.text:000000000001AA5E                                         ; libgettextpo_str_cd_iconv+13B↑j ...
.text:000000000001AA5E                 mov     rdi, rbx        ; ptr
.text:000000000001AA61                 xor     ebx, ebx
.text:000000000001AA63                 call    _free           ; PIC mode
.text:000000000001AA68
.text:000000000001AA68 loc_1AA68:                              ; CODE XREF: libgettextpo_str_cd_iconv+1D1↑j
.text:000000000001AA68                                         ; libgettextpo_str_cd_iconv+1E2↑j ...
.text:000000000001AA68                 mov     rdi, [rsp+88h+var_40]
.text:000000000001AA6D                 xor     rdi, fs:28h
.text:000000000001AA76                 mov     rax, rbx
.text:000000000001AA79                 jnz     short loc_1AAAD
.text:000000000001AA7B                 add     rsp, 58h
.text:000000000001AA7F                 pop     rbx
.text:000000000001AA80                 pop     rbp
.text:000000000001AA81                 pop     r12
.text:000000000001AA83                 pop     r13
.text:000000000001AA85                 pop     r14
.text:000000000001AA87                 pop     r15
.text:000000000001AA89                 retn
.text:000000000001AA89 ; ---------------------------------------------------------------------------
.text:000000000001AA8A                 align 10h
.text:000000000001AA90
.text:000000000001AA90 loc_1AA90:                              ; CODE XREF: libgettextpo_str_cd_iconv+CC↑j
.text:000000000001AA90                                         ; libgettextpo_str_cd_iconv+E0↑j
.text:000000000001AA90                 mov     dword ptr [r15], 0Ch
.text:000000000001AA97                 jmp     short loc_1AA5E
.text:000000000001AA97 ; ---------------------------------------------------------------------------
.text:000000000001AA99                 align 20h
.text:000000000001AAA0
.text:000000000001AAA0 loc_1AAA0:                              ; CODE XREF: libgettextpo_str_cd_iconv+53↑j
.text:000000000001AAA0                 call    ___errno_location ; PIC mode
.text:000000000001AAA5                 mov     dword ptr [rax], 0Ch
.text:000000000001AAAB                 jmp     short loc_1AA68
.text:000000000001AAAD ; ---------------------------------------------------------------------------
.text:000000000001AAAD
.text:000000000001AAAD loc_1AAAD:                              ; CODE XREF: libgettextpo_str_cd_iconv+209↑j
.text:000000000001AAAD                 call    ___stack_chk_fail ; PIC mode
.text:000000000001AAAD ; } // starts at 1A870
.text:000000000001AAAD libgettextpo_str_cd_iconv endp
.text:000000000001AAAD
.text:000000000001AAAD ; ---------------------------------------------------------------------------
.text:000000000001AAB2                 align 20h
.text:000000000001AAC0
.text:000000000001AAC0 ; =============== S U B R O U T I N E =======================================
.text:000000000001AAC0
.text:000000000001AAC0
.text:000000000001AAC0 ; __int64 __fastcall str_iconv(char *s, char *fromcode, char *tocode)
.text:000000000001AAC0                 public str_iconv
.text:000000000001AAC0 str_iconv       proc near               ; CODE XREF: xreadlink_0+1↑p
.text:000000000001AAC0 ; __unwind {
.text:000000000001AAC0                 push    r13
.text:000000000001AAC2                 push    r12
.text:000000000001AAC4                 push    rbp
.text:000000000001AAC5                 push    rbx
.text:000000000001AAC6                 mov     rbx, rdi
.text:000000000001AAC9                 sub     rsp, 8
.text:000000000001AACD                 cmp     byte ptr [rdi], 0
.text:000000000001AAD0                 jz      short loc_1AAE7
.text:000000000001AAD2                 mov     r12, rsi
.text:000000000001AAD5                 mov     rsi, rdx
.text:000000000001AAD8                 mov     rbp, rdx
.text:000000000001AADB                 mov     rdi, r12
.text:000000000001AADE                 call    c_strcasecmp
.text:000000000001AAE3                 test    eax, eax
.text:000000000001AAE5                 jnz     short loc_1AB08
.text:000000000001AAE7
.text:000000000001AAE7 loc_1AAE7:                              ; CODE XREF: str_iconv+10↑j
.text:000000000001AAE7                 mov     rdi, rbx        ; s
.text:000000000001AAEA                 call    _strdup
.text:000000000001AAEF                 test    rax, rax
.text:000000000001AAF2                 mov     rbx, rax
.text:000000000001AAF5                 jz      short loc_1AB60
.text:000000000001AAF7
.text:000000000001AAF7 loc_1AAF7:                              ; CODE XREF: str_iconv+7D↓j
.text:000000000001AAF7                                         ; str_iconv+98↓j ...
.text:000000000001AAF7                 add     rsp, 8
.text:000000000001AAFB                 mov     rax, rbx
.text:000000000001AAFE                 pop     rbx
.text:000000000001AAFF                 pop     rbp
.text:000000000001AB00                 pop     r12
.text:000000000001AB02                 pop     r13
.text:000000000001AB04                 retn
.text:000000000001AB04 ; ---------------------------------------------------------------------------
.text:000000000001AB05                 align 8
.text:000000000001AB08
.text:000000000001AB08 loc_1AB08:                              ; CODE XREF: str_iconv+25↑j
.text:000000000001AB08                 mov     rdi, rbp        ; tocode
.text:000000000001AB0B                 mov     rsi, r12        ; fromcode
.text:000000000001AB0E                 call    _iconv_open
.text:000000000001AB13                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001AB17                 mov     rbp, rax
.text:000000000001AB1A                 jz      loc_1ABA0
.text:000000000001AB20                 mov     rdi, rbx
.text:000000000001AB23                 mov     rsi, rax
.text:000000000001AB26                 call    libgettextpo_str_cd_iconv
.text:000000000001AB2B                 test    rax, rax
.text:000000000001AB2E                 mov     rbx, rax
.text:000000000001AB31                 jz      short loc_1AB80
.text:000000000001AB33                 mov     rdi, rbp        ; cd
.text:000000000001AB36                 call    _iconv_close
.text:000000000001AB3B                 test    eax, eax
.text:000000000001AB3D                 jns     short loc_1AAF7
.text:000000000001AB3F                 call    ___errno_location
.text:000000000001AB44                 mov     r12d, [rax]
.text:000000000001AB47                 mov     rbp, rax
.text:000000000001AB4A                 mov     rdi, rbx        ; ptr
.text:000000000001AB4D                 call    _free
.text:000000000001AB52                 xor     ebx, ebx
.text:000000000001AB54                 mov     [rbp+0], r12d
.text:000000000001AB58                 jmp     short loc_1AAF7
.text:000000000001AB58 ; ---------------------------------------------------------------------------
.text:000000000001AB5A                 align 20h
.text:000000000001AB60
.text:000000000001AB60 loc_1AB60:                              ; CODE XREF: str_iconv+35↑j
.text:000000000001AB60                 call    ___errno_location
.text:000000000001AB65                 mov     dword ptr [rax], 0Ch
.text:000000000001AB6B                 add     rsp, 8
.text:000000000001AB6F                 mov     rax, rbx
.text:000000000001AB72                 pop     rbx
.text:000000000001AB73                 pop     rbp
.text:000000000001AB74                 pop     r12
.text:000000000001AB76                 pop     r13
.text:000000000001AB78                 retn
.text:000000000001AB78 ; ---------------------------------------------------------------------------
.text:000000000001AB79                 align 20h
.text:000000000001AB80
.text:000000000001AB80 loc_1AB80:                              ; CODE XREF: str_iconv+71↑j
.text:000000000001AB80                 call    ___errno_location
.text:000000000001AB85                 mov     r13d, [rax]
.text:000000000001AB88                 mov     r12, rax
.text:000000000001AB8B                 mov     rdi, rbp        ; cd
.text:000000000001AB8E                 call    _iconv_close
.text:000000000001AB93                 mov     [r12], r13d
.text:000000000001AB97                 jmp     loc_1AAF7
.text:000000000001AB97 ; ---------------------------------------------------------------------------
.text:000000000001AB9C                 align 20h
.text:000000000001ABA0
.text:000000000001ABA0 loc_1ABA0:                              ; CODE XREF: str_iconv+5A↑j
.text:000000000001ABA0                 xor     ebx, ebx
.text:000000000001ABA2                 jmp     loc_1AAF7
.text:000000000001ABA2 ; } // starts at 1AAC0
.text:000000000001ABA2 str_iconv       endp
.text:000000000001ABA2
.text:000000000001ABA2 ; ---------------------------------------------------------------------------
.text:000000000001ABA7                 align 10h
.text:000000000001ABB0
.text:000000000001ABB0 ; =============== S U B R O U T I N E =======================================
.text:000000000001ABB0
.text:000000000001ABB0
.text:000000000001ABB0                 public mmalloca
.text:000000000001ABB0 mmalloca        proc near               ; CODE XREF: knuth_morris_pratt+180↑p
.text:000000000001ABB0                                         ; knuth_morris_pratt_multibyte:loc_193E4↑p
.text:000000000001ABB0 ; __unwind {
.text:000000000001ABB0                 add     rdi, 20h ; ' '  ; size
.text:000000000001ABB4                 jb      short loc_1ABE3
.text:000000000001ABB6                 sub     rsp, 8
.text:000000000001ABBA                 call    _malloc
.text:000000000001ABBF                 xor     edx, edx
.text:000000000001ABC1                 test    rax, rax
.text:000000000001ABC4                 jz      short loc_1ABDB
.text:000000000001ABC6                 lea     rdx, [rax+10h]
.text:000000000001ABCA                 and     rdx, 0FFFFFFFFFFFFFFE0h
.text:000000000001ABCE                 add     rdx, 10h
.text:000000000001ABD2                 mov     rcx, rdx
.text:000000000001ABD5                 sub     rcx, rax
.text:000000000001ABD8                 mov     [rdx-1], cl
.text:000000000001ABDB
.text:000000000001ABDB loc_1ABDB:                              ; CODE XREF: mmalloca+14↑j
.text:000000000001ABDB                 mov     rax, rdx
.text:000000000001ABDE                 add     rsp, 8
.text:000000000001ABE2                 retn
.text:000000000001ABE3 ; ---------------------------------------------------------------------------
.text:000000000001ABE3
.text:000000000001ABE3 loc_1ABE3:                              ; CODE XREF: mmalloca+4↑j
.text:000000000001ABE3                 xor     edx, edx
.text:000000000001ABE5                 mov     rax, rdx
.text:000000000001ABE8                 retn
.text:000000000001ABE8 ; } // starts at 1ABB0
.text:000000000001ABE8 mmalloca        endp
.text:000000000001ABE8
.text:000000000001ABE8 ; ---------------------------------------------------------------------------
.text:000000000001ABE9                 align 10h
.text:000000000001ABF0
.text:000000000001ABF0 ; =============== S U B R O U T I N E =======================================
.text:000000000001ABF0
.text:000000000001ABF0
.text:000000000001ABF0                 public freea
.text:000000000001ABF0 freea           proc near               ; CODE XREF: knuth_morris_pratt:loc_1896C↑p
.text:000000000001ABF0                                         ; knuth_morris_pratt_multibyte+663↑p ...
.text:000000000001ABF0 ; __unwind {
.text:000000000001ABF0                 test    dil, 0Fh
.text:000000000001ABF4                 jnz     short loc_1AC0C
.text:000000000001ABF6                 test    dil, 10h
.text:000000000001ABFA                 jnz     short loc_1AC00
.text:000000000001ABFC                 rep retn
.text:000000000001ABFC ; ---------------------------------------------------------------------------
.text:000000000001ABFE                 align 20h
.text:000000000001AC00
.text:000000000001AC00 loc_1AC00:                              ; CODE XREF: freea+A↑j
.text:000000000001AC00                 movzx   eax, byte ptr [rdi-1]
.text:000000000001AC04                 sub     rdi, rax        ; ptr
.text:000000000001AC07                 jmp     _free
.text:000000000001AC0C ; ---------------------------------------------------------------------------
.text:000000000001AC0C
.text:000000000001AC0C loc_1AC0C:                              ; CODE XREF: freea+4↑j
.text:000000000001AC0C                 sub     rsp, 8
.text:000000000001AC10                 call    _abort
.text:000000000001AC10 ; } // starts at 1ABF0
.text:000000000001AC10 freea           endp
.text:000000000001AC10
.text:000000000001AC10 ; ---------------------------------------------------------------------------
.text:000000000001AC15                 align 20h
.text:000000000001AC20
.text:000000000001AC20 ; =============== S U B R O U T I N E =======================================
.text:000000000001AC20
.text:000000000001AC20
.text:000000000001AC20 ; __int64 __fastcall mbslen(char *s)
.text:000000000001AC20                 public mbslen
.text:000000000001AC20 mbslen          proc near               ; CODE XREF: knuth_morris_pratt_multibyte+37↑p
.text:000000000001AC20
.text:000000000001AC20 var_78          = byte ptr -78h
.text:000000000001AC20 var_74          = qword ptr -74h
.text:000000000001AC20 var_6C          = byte ptr -6Ch
.text:000000000001AC20 s               = qword ptr -68h
.text:000000000001AC20 var_60          = qword ptr -60h
.text:000000000001AC20 var_58          = byte ptr -58h
.text:000000000001AC20 var_54          = dword ptr -54h
.text:000000000001AC20 var_30          = qword ptr -30h
.text:000000000001AC20
.text:000000000001AC20 ; __unwind {
.text:000000000001AC20                 push    r14
.text:000000000001AC22                 push    r13
.text:000000000001AC24                 push    r12
.text:000000000001AC26                 push    rbp
.text:000000000001AC27                 push    rbx
.text:000000000001AC28                 mov     rbx, rdi
.text:000000000001AC2B                 sub     rsp, 50h
.text:000000000001AC2F                 mov     rax, fs:28h
.text:000000000001AC38                 mov     [rsp+78h+var_30], rax
.text:000000000001AC3D                 xor     eax, eax
.text:000000000001AC3F                 call    ___ctype_get_mb_cur_max
.text:000000000001AC44                 cmp     rax, 1
.text:000000000001AC48                 ja      short loc_1AC80
.text:000000000001AC4A                 mov     rdi, rbx        ; s
.text:000000000001AC4D                 call    _strlen
.text:000000000001AC52                 mov     rbx, rax
.text:000000000001AC55
.text:000000000001AC55 loc_1AC55:                              ; CODE XREF: mbslen+CD↓j
.text:000000000001AC55                 mov     rsi, [rsp+78h+var_30]
.text:000000000001AC5A                 xor     rsi, fs:28h
.text:000000000001AC63                 mov     rax, rbx
.text:000000000001AC66                 jnz     loc_1AE09
.text:000000000001AC6C                 add     rsp, 50h
.text:000000000001AC70                 pop     rbx
.text:000000000001AC71                 pop     rbp
.text:000000000001AC72                 pop     r12
.text:000000000001AC74                 pop     r13
.text:000000000001AC76                 pop     r14
.text:000000000001AC78                 retn
.text:000000000001AC78 ; ---------------------------------------------------------------------------
.text:000000000001AC79                 align 20h
.text:000000000001AC80
.text:000000000001AC80 loc_1AC80:                              ; CODE XREF: mbslen+28↑j
.text:000000000001AC80                 mov     rbp, rsp
.text:000000000001AC83                 mov     [rsp+78h+s], rbx
.text:000000000001AC88                 mov     [rsp+78h+var_78], 0
.text:000000000001AC8C                 mov     [rsp+78h+var_74], 0
.text:000000000001AC95                 mov     [rsp+78h+var_6C], 0
.text:000000000001AC9A                 xor     ebx, ebx
.text:000000000001AC9C                 lea     r12, is_basic_table
.text:000000000001ACA3                 lea     r13, [rbp+4]
.text:000000000001ACA7                 jmp     short loc_1AD06
.text:000000000001ACA7 ; ---------------------------------------------------------------------------
.text:000000000001ACA9                 align 10h
.text:000000000001ACB0
.text:000000000001ACB0 loc_1ACB0:                              ; CODE XREF: mbslen+EA↓j
.text:000000000001ACB0                 mov     rcx, [rsp+78h+s]
.text:000000000001ACB5                 movzx   edx, byte ptr [rcx]
.text:000000000001ACB8                 mov     eax, edx
.text:000000000001ACBA                 shr     al, 5
.text:000000000001ACBD                 and     eax, 7
.text:000000000001ACC0                 mov     eax, [r12+rax*4]
.text:000000000001ACC4                 bt      eax, edx
.text:000000000001ACC7                 jnb     loc_1AD90
.text:000000000001ACCD                 mov     [rsp+78h+var_60], 1
.text:000000000001ACD6                 movsx   eax, byte ptr [rcx]
.text:000000000001ACD9                 mov     [rsp+78h+var_58], 1
.text:000000000001ACDE                 mov     [rsp+78h+var_6C], 1
.text:000000000001ACE3                 mov     [rsp+78h+var_54], eax
.text:000000000001ACE7
.text:000000000001ACE7 loc_1ACE7:                              ; CODE XREF: mbslen+168↓j
.text:000000000001ACE7                                         ; mbslen+1C5↓j
.text:000000000001ACE7                 mov     eax, [rsp+78h+var_54]
.text:000000000001ACEB                 test    eax, eax
.text:000000000001ACED                 jz      loc_1AC55
.text:000000000001ACF3
.text:000000000001ACF3 loc_1ACF3:                              ; CODE XREF: mbslen+196↓j
.text:000000000001ACF3                                         ; mbslen+1B4↓j
.text:000000000001ACF3                 mov     rax, [rsp+78h+var_60]
.text:000000000001ACF8                 add     [rsp+78h+s], rax
.text:000000000001ACFD                 add     rbx, 1
.text:000000000001AD01                 mov     [rsp+78h+var_6C], 0
.text:000000000001AD06
.text:000000000001AD06 loc_1AD06:                              ; CODE XREF: mbslen+87↑j
.text:000000000001AD06                 cmp     [rsp+78h+var_78], 0
.text:000000000001AD0A                 jz      short loc_1ACB0
.text:000000000001AD0C
.text:000000000001AD0C loc_1AD0C:                              ; CODE XREF: mbslen+180↓j
.text:000000000001AD0C                 call    ___ctype_get_mb_cur_max
.text:000000000001AD11                 mov     r14, [rsp+78h+s]
.text:000000000001AD16                 mov     rsi, rax
.text:000000000001AD19                 mov     rdi, r14
.text:000000000001AD1C                 call    strnlen1
.text:000000000001AD21                 lea     rcx, [rbp+4]
.text:000000000001AD25                 lea     rdi, [rbp+24h]
.text:000000000001AD29                 mov     rdx, rax
.text:000000000001AD2C                 mov     rsi, r14
.text:000000000001AD2F                 call    rpl_mbrtowc
.text:000000000001AD34                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001AD38                 mov     [rsp+78h+var_60], rax
.text:000000000001AD3D                 jz      short loc_1ADA8
.text:000000000001AD3F                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000001AD43                 jz      short loc_1ADC0
.text:000000000001AD45                 test    rax, rax
.text:000000000001AD48                 jnz     short loc_1AD6D
.text:000000000001AD4A                 mov     rax, [rsp+78h+s]
.text:000000000001AD4F                 mov     [rsp+78h+var_60], 1
.text:000000000001AD58                 cmp     byte ptr [rax], 0
.text:000000000001AD5B                 jnz     loc_1AE0E
.text:000000000001AD61                 mov     edx, [rsp+78h+var_54]
.text:000000000001AD65                 test    edx, edx
.text:000000000001AD67                 jnz     loc_1AE2D
.text:000000000001AD6D
.text:000000000001AD6D loc_1AD6D:                              ; CODE XREF: mbslen+128↑j
.text:000000000001AD6D                 lea     rdi, [rbp+4]    ; ps
.text:000000000001AD71                 mov     [rsp+78h+var_58], 1
.text:000000000001AD76                 call    _mbsinit
.text:000000000001AD7B                 test    eax, eax
.text:000000000001AD7D                 jz      short loc_1ADE0
.text:000000000001AD7F                 mov     [rsp+78h+var_78], 0
.text:000000000001AD83                 mov     [rsp+78h+var_6C], 1
.text:000000000001AD88                 jmp     loc_1ACE7
.text:000000000001AD88 ; ---------------------------------------------------------------------------
.text:000000000001AD8D                 align 10h
.text:000000000001AD90
.text:000000000001AD90 loc_1AD90:                              ; CODE XREF: mbslen+A7↑j
.text:000000000001AD90                 mov     rdi, r13        ; ps
.text:000000000001AD93                 call    _mbsinit
.text:000000000001AD98                 test    eax, eax
.text:000000000001AD9A                 jz      short loc_1ADEA
.text:000000000001AD9C                 mov     [rsp+78h+var_78], 1
.text:000000000001ADA0                 jmp     loc_1AD0C
.text:000000000001ADA0 ; ---------------------------------------------------------------------------
.text:000000000001ADA5                 align 8
.text:000000000001ADA8
.text:000000000001ADA8 loc_1ADA8:                              ; CODE XREF: mbslen+11D↑j
.text:000000000001ADA8                 mov     [rsp+78h+var_60], 1
.text:000000000001ADB1                 mov     [rsp+78h+var_58], 0
.text:000000000001ADB6                 jmp     loc_1ACF3
.text:000000000001ADB6 ; ---------------------------------------------------------------------------
.text:000000000001ADBB                 align 20h
.text:000000000001ADC0
.text:000000000001ADC0 loc_1ADC0:                              ; CODE XREF: mbslen+123↑j
.text:000000000001ADC0                 mov     rdi, [rsp+78h+s] ; s
.text:000000000001ADC5                 call    _strlen
.text:000000000001ADCA                 mov     [rsp+78h+var_58], 0
.text:000000000001ADCF                 mov     [rsp+78h+var_60], rax
.text:000000000001ADD4                 jmp     loc_1ACF3
.text:000000000001ADD4 ; ---------------------------------------------------------------------------
.text:000000000001ADD9                 align 20h
.text:000000000001ADE0
.text:000000000001ADE0 loc_1ADE0:                              ; CODE XREF: mbslen+15D↑j
.text:000000000001ADE0                 mov     [rsp+78h+var_6C], 1
.text:000000000001ADE5                 jmp     loc_1ACE7
.text:000000000001ADEA ; ---------------------------------------------------------------------------
.text:000000000001ADEA
.text:000000000001ADEA loc_1ADEA:                              ; CODE XREF: mbslen+17A↑j
.text:000000000001ADEA                 lea     rcx, __PRETTY_FUNCTION___5021 ; "mbuiter_multi_next"
.text:000000000001ADF1                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000001ADF8                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:000000000001ADFF                 mov     edx, 96h        ; line
.text:000000000001AE04                 call    ___assert_fail
.text:000000000001AE09 ; ---------------------------------------------------------------------------
.text:000000000001AE09
.text:000000000001AE09 loc_1AE09:                              ; CODE XREF: mbslen+46↑j
.text:000000000001AE09                 call    ___stack_chk_fail
.text:000000000001AE0E ; ---------------------------------------------------------------------------
.text:000000000001AE0E
.text:000000000001AE0E loc_1AE0E:                              ; CODE XREF: mbslen+13B↑j
.text:000000000001AE0E                 lea     rcx, __PRETTY_FUNCTION___5021 ; "mbuiter_multi_next"
.text:000000000001AE15                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000001AE1C                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:000000000001AE23                 mov     edx, 0B2h       ; line
.text:000000000001AE28                 call    ___assert_fail
.text:000000000001AE2D ; ---------------------------------------------------------------------------
.text:000000000001AE2D
.text:000000000001AE2D loc_1AE2D:                              ; CODE XREF: mbslen+147↑j
.text:000000000001AE2D                 lea     rcx, __PRETTY_FUNCTION___5021 ; "mbuiter_multi_next"
.text:000000000001AE34                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000001AE3B                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:000000000001AE42                 mov     edx, 0B3h       ; line
.text:000000000001AE47                 call    ___assert_fail
.text:000000000001AE47 ; } // starts at 1AC20
.text:000000000001AE47 mbslen          endp
.text:000000000001AE47
.text:000000000001AE47 ; ---------------------------------------------------------------------------
.text:000000000001AE4C                 align 10h
.text:000000000001AE50
.text:000000000001AE50 ; =============== S U B R O U T I N E =======================================
.text:000000000001AE50
.text:000000000001AE50 ; Attributes: info_from_lumina
.text:000000000001AE50
.text:000000000001AE50 ; void _libc_csu_init(void)
.text:000000000001AE50                 public __libc_csu_init
.text:000000000001AE50 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000001AE50 ; __unwind {
.text:000000000001AE50                 push    r15
.text:000000000001AE52                 push    r14
.text:000000000001AE54                 mov     r15, rdx
.text:000000000001AE57                 push    r13
.text:000000000001AE59                 push    r12
.text:000000000001AE5B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000001AE62                 push    rbp
.text:000000000001AE63                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000001AE6A                 push    rbx
.text:000000000001AE6B                 mov     r13d, edi
.text:000000000001AE6E                 mov     r14, rsi
.text:000000000001AE71                 sub     rbp, r12
.text:000000000001AE74                 sub     rsp, 8
.text:000000000001AE78                 sar     rbp, 3
.text:000000000001AE7C                 call    _init_proc
.text:000000000001AE81                 test    rbp, rbp
.text:000000000001AE84                 jz      short loc_1AEA6
.text:000000000001AE86                 xor     ebx, ebx
.text:000000000001AE88                 nop     dword ptr [rax+rax+00000000h]
.text:000000000001AE90
.text:000000000001AE90 loc_1AE90:                              ; CODE XREF: __libc_csu_init+54↓j
.text:000000000001AE90                 mov     rdx, r15
.text:000000000001AE93                 mov     rsi, r14
.text:000000000001AE96                 mov     edi, r13d
.text:000000000001AE99                 call    ds:(__frame_dummy_init_array_entry - 220870h)[r12+rbx*8]
.text:000000000001AE9D                 add     rbx, 1
.text:000000000001AEA1                 cmp     rbp, rbx
.text:000000000001AEA4                 jnz     short loc_1AE90
.text:000000000001AEA6
.text:000000000001AEA6 loc_1AEA6:                              ; CODE XREF: __libc_csu_init+34↑j
.text:000000000001AEA6                 add     rsp, 8
.text:000000000001AEAA                 pop     rbx
.text:000000000001AEAB                 pop     rbp
.text:000000000001AEAC                 pop     r12
.text:000000000001AEAE                 pop     r13
.text:000000000001AEB0                 pop     r14
.text:000000000001AEB2                 pop     r15
.text:000000000001AEB4                 retn
.text:000000000001AEB4 ; } // starts at 1AE50
.text:000000000001AEB4 __libc_csu_init endp
.text:000000000001AEB4
.text:000000000001AEB4 ; ---------------------------------------------------------------------------
.text:000000000001AEB5                 align 20h
.text:000000000001AEC0
.text:000000000001AEC0 ; =============== S U B R O U T I N E =======================================
.text:000000000001AEC0
.text:000000000001AEC0
.text:000000000001AEC0 ; void _libc_csu_fini(void)
.text:000000000001AEC0                 public __libc_csu_fini
.text:000000000001AEC0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000001AEC0 ; __unwind {
.text:000000000001AEC0                 rep retn
.text:000000000001AEC0 ; } // starts at 1AEC0
.text:000000000001AEC0 __libc_csu_fini endp
.text:000000000001AEC0
.text:000000000001AEC0 ; ---------------------------------------------------------------------------
.text:000000000001AEC2                 align 10h
.text:000000000001AED0
.text:000000000001AED0 ; =============== S U B R O U T I N E =======================================
.text:000000000001AED0
.text:000000000001AED0
.text:000000000001AED0 atexit          proc near               ; CODE XREF: main+82↑p
.text:000000000001AED0 ; __unwind {
.text:000000000001AED0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000001AED7                 xor     esi, esi        ; obj
.text:000000000001AED9                 jmp     ___cxa_atexit
.text:000000000001AED9 ; } // starts at 1AED0
.text:000000000001AED9 atexit          endp
.text:000000000001AED9
.text:000000000001AED9 _text           ends
.text:000000000001AED9
LOAD:000000000001AEDE ; ===========================================================================
LOAD:000000000001AEDE
LOAD:000000000001AEDE ; Segment type: Pure code
LOAD:000000000001AEDE ; Segment permissions: Read/Execute
LOAD:000000000001AEDE LOAD            segment byte public 'CODE' use64
LOAD:000000000001AEDE                 assume cs:LOAD
LOAD:000000000001AEDE                 ;org 1AEDEh
LOAD:000000000001AEDE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001AEDE                 align 20h
LOAD:000000000001AEDE LOAD            ends
LOAD:000000000001AEDE
.fini:000000000001AEE0 ; ===========================================================================
.fini:000000000001AEE0
.fini:000000000001AEE0 ; Segment type: Pure code
.fini:000000000001AEE0 ; Segment permissions: Read/Execute
.fini:000000000001AEE0 _fini           segment dword public 'CODE' use64
.fini:000000000001AEE0                 assume cs:_fini
.fini:000000000001AEE0                 ;org 1AEE0h
.fini:000000000001AEE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000001AEE0
.fini:000000000001AEE0 ; =============== S U B R O U T I N E =======================================
.fini:000000000001AEE0
.fini:000000000001AEE0
.fini:000000000001AEE0                 public _term_proc
.fini:000000000001AEE0 _term_proc      proc near
.fini:000000000001AEE0                 sub     rsp, 8          ; _fini
.fini:000000000001AEE4                 add     rsp, 8
.fini:000000000001AEE8                 retn
.fini:000000000001AEE8 _term_proc      endp
.fini:000000000001AEE8
.fini:000000000001AEE8 _fini           ends
.fini:000000000001AEE8
LOAD:000000000001AEE9 ; ===========================================================================
LOAD:000000000001AEE9
LOAD:000000000001AEE9 ; Segment type: Pure code
LOAD:000000000001AEE9 ; Segment permissions: Read/Execute
LOAD:000000000001AEE9 LOAD            segment byte public 'CODE' use64
LOAD:000000000001AEE9                 assume cs:LOAD
LOAD:000000000001AEE9                 ;org 1AEE9h
LOAD:000000000001AEE9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001AEE9                 align 20h
LOAD:000000000001AEE9 LOAD            ends
LOAD:000000000001AEE9
.rodata:000000000001AF00 ; ===========================================================================
.rodata:000000000001AF00
.rodata:000000000001AF00 ; Segment type: Pure data
.rodata:000000000001AF00 ; Segment permissions: Read
.rodata:000000000001AF00 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000001AF00                 assume cs:_rodata
.rodata:000000000001AF00                 ;org 1AF00h
.rodata:000000000001AF00                 public _IO_stdin_used
.rodata:000000000001AF00 _IO_stdin_used  db    1
.rodata:000000000001AF01                 db    0
.rodata:000000000001AF02                 db    2
.rodata:000000000001AF03                 db    0
.rodata:000000000001AF04                 db    0
.rodata:000000000001AF05                 db    0
.rodata:000000000001AF06                 db    0
.rodata:000000000001AF07                 db    0
.rodata:000000000001AF08 ; const char aErrorInRegular[]
.rodata:000000000001AF08 aErrorInRegular db 'error in regular expression matcher',0
.rodata:000000000001AF08                                         ; DATA XREF: matcher_error+1↑o
.rodata:000000000001AF2C                 align 10h
.rodata:000000000001AF30 ; const char aTrySHelpForMor[]
.rodata:000000000001AF30 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000001AF30                                         ; DATA XREF: usage+2F↑o
.rodata:000000000001AF57                 align 8
.rodata:000000000001AF58 ; const char aUsageSOptionIn[]
.rodata:000000000001AF58 aUsageSOptionIn db 'Usage: %s [OPTION]... [INPUT]...   (without -G)',0Ah
.rodata:000000000001AF58                                         ; DATA XREF: usage:loc_553D↑o
.rodata:000000000001AF58                 db '  or:  %s -G [OPTION]... [INPUT [OUTPUT]]',0Ah,0
.rodata:000000000001AFB3                 align 8
.rodata:000000000001AFB8 ; const char aOutputAPermute[]
.rodata:000000000001AFB8 aOutputAPermute db 'Output a permuted index, including context, of the words in the i'
.rodata:000000000001AFB8                                         ; DATA XREF: usage+87↑o
.rodata:000000000001AFB8                 db 'nput files.',0Ah,0
.rodata:000000000001B006                 align 8
.rodata:000000000001B008 ; const char aWithNoFileOrWh[]
.rodata:000000000001B008 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AC↑o
.rodata:000000000001B008                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:000000000001B040 ; const char aMandatoryArgum[]
.rodata:000000000001B040 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+D1↑o
.rodata:000000000001B040                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000001B040                 db 'ns too.',0Ah,0
.rodata:000000000001B08B                 align 10h
.rodata:000000000001B090 ; const char aAAutoReference[]
.rodata:000000000001B090 aAAutoReference db '  -A, --auto-reference           output automatically generated r'
.rodata:000000000001B090                                         ; DATA XREF: usage+F6↑o
.rodata:000000000001B090                 db 'eferences',0Ah
.rodata:000000000001B090                 db '  -G, --traditional              behave more like System V ',27h,'p'
.rodata:000000000001B090                 db 'tx',27h,0Ah,0
.rodata:000000000001B11D                 align 20h
.rodata:000000000001B120 ; const char aFFlagTruncatio[]
.rodata:000000000001B120 aFFlagTruncatio db '  -F, --flag-truncation=STRING   use STRING for flagging line tru'
.rodata:000000000001B120                                         ; DATA XREF: usage+11B↑o
.rodata:000000000001B120                 db 'ncations.',0Ah
.rodata:000000000001B120                 db '                                 The default is ',27h,'/',27h,0Ah
.rodata:000000000001B120                 db 0
.rodata:000000000001B1A0 ; const char aMMacroNameStri[]
.rodata:000000000001B1A0 aMMacroNameStri db '  -M, --macro-name=STRING        macro name to use instead of ',27h
.rodata:000000000001B1A0                                         ; DATA XREF: usage+140↑o
.rodata:000000000001B1A0                 db 'xx',27h,0Ah
.rodata:000000000001B1A0                 db '  -O, --format=roff              generate output as roff directiv'
.rodata:000000000001B1A0                 db 'es',0Ah
.rodata:000000000001B1A0                 db '  -R, --right-side-refs          put references at right, not cou'
.rodata:000000000001B1A0                 db 'nted in -w',0Ah
.rodata:000000000001B1A0                 db '  -S, --sentence-regexp=REGEXP   for end of lines or end of sente'
.rodata:000000000001B1A0                 db 'nces',0Ah
.rodata:000000000001B1A0                 db '  -T, --format=tex               generate output as TeX directive'
.rodata:000000000001B1A0                 db 's',0Ah,0
.rodata:000000000001B2FD                 align 20h
.rodata:000000000001B300 ; const char aWWordRegexpReg[]
.rodata:000000000001B300 aWWordRegexpReg db '  -W, --word-regexp=REGEXP       use REGEXP to match each keyword'
.rodata:000000000001B300                                         ; DATA XREF: usage+165↑o
.rodata:000000000001B300                 db 0Ah
.rodata:000000000001B300                 db '  -b, --break-file=FILE          word break characters in this FI'
.rodata:000000000001B300                 db 'LE',0Ah
.rodata:000000000001B300                 db '  -f, --ignore-case              fold lower case to upper case fo'
.rodata:000000000001B300                 db 'r sorting',0Ah
.rodata:000000000001B300                 db '  -g, --gap-size=NUMBER          gap size in columns between outp'
.rodata:000000000001B300                 db 'ut fields',0Ah
.rodata:000000000001B300                 db '  -i, --ignore-file=FILE         read ignore word list from FILE',0Ah
.rodata:000000000001B300                 db '  -o, --only-file=FILE           read only word list from this FI'
.rodata:000000000001B300                 db 'LE',0Ah,0
.rodata:000000000001B4A2                 align 8
.rodata:000000000001B4A8 ; const char aRReferencesFir[]
.rodata:000000000001B4A8 aRReferencesFir db '  -r, --references               first field of each line is a re'
.rodata:000000000001B4A8                                         ; DATA XREF: usage+18A↑o
.rodata:000000000001B4A8                 db 'ference',0Ah
.rodata:000000000001B4A8                 db '  -t, --typeset-mode               - not implemented -',0Ah
.rodata:000000000001B4A8                 db '  -w, --width=NUMBER             output width in columns, referen'
.rodata:000000000001B4A8                 db 'ce excluded',0Ah,0
.rodata:000000000001B576                 align 8
.rodata:000000000001B578 ; const char aHelpDisplayThi[]
.rodata:000000000001B578 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000001B578                                         ; DATA XREF: usage+1AF↑o
.rodata:000000000001B5A5                 align 8
.rodata:000000000001B5A8 ; const char aVersionOutputV[]
.rodata:000000000001B5A8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000001B5A8                                         ; DATA XREF: usage+1D4↑o
.rodata:000000000001B5DE                 align 20h
.rodata:000000000001B5E0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000001B5E0                                         ; DATA XREF: usage+2CF↑o
.rodata:000000000001B5E0                                         ; usage+333↑o ...
.rodata:000000000001B608 ; const char aReportAnyTrans[]
.rodata:000000000001B608 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000001B608                                         ; DATA XREF: usage+427↑o
.rodata:000000000001B608                 db 'am/>',0Ah,0
.rodata:000000000001B64F                 align 10h
.rodata:000000000001B650 ; const char aOrAvailableLoc[]
.rodata:000000000001B650 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000001B650                                         ; DATA XREF: usage:loc_583E↑o
.rodata:000000000001B683                 align 8
.rodata:000000000001B688 asc_1B688       db '[.?!][]"',27h,')}]*\($\|',9,'\|  \)[ ',9,0Ah
.rodata:000000000001B688                                         ; DATA XREF: main+2387↑o
.rodata:000000000001B688                 db ']*',0
.rodata:000000000001B6A8 ; const char aErrorRegularEx[]
.rodata:000000000001B6A8 aErrorRegularEx db 'error: regular expression has a match of length zero: %s',0
.rodata:000000000001B6A8                                         ; DATA XREF: main+2403↑o
.rodata:000000000001B6E1 ; const char aSForRegexpS[]
.rodata:000000000001B6E1 aSForRegexpS    db '%s (for regexp %s)',0
.rodata:000000000001B6E1                                         ; DATA XREF: compile_regex+70↑o
.rodata:000000000001B6F4 aOe             db '\oe{}',0            ; DATA XREF: print_field+356↑o
.rodata:000000000001B6FA aOe_0           db '\OE{}',0            ; DATA XREF: print_field:loc_53CA↑o
.rodata:000000000001B700 aAe_0           db '\ae{}',0            ; DATA XREF: print_field:loc_53E5↑o
.rodata:000000000001B706 aAe             db '\AE{}',0            ; DATA XREF: print_field+40F↑o
.rodata:000000000001B70C aSC             db '\',27h,'%s%c',0     ; DATA XREF: print_field+201↑o
.rodata:000000000001B713 aSC_0           db '\^%s%c',0           ; DATA XREF: print_field+269↑o
.rodata:000000000001B71A aSC_1           db '\"%s%c',0           ; DATA XREF: print_field+296↑o
.rodata:000000000001B71A                                         ; .data.rel.ro:0000000000220B28↓o
.rodata:000000000001B721 aSC_2           db '\~%s%c',0           ; DATA XREF: print_field+2C3↑o
.rodata:000000000001B728 aCC             db '\c{%c}',0           ; DATA XREF: print_field:loc_527F↑o
.rodata:000000000001B72F aAa             db '\aa{}',0            ; DATA XREF: print_field+314↑o
.rodata:000000000001B735 aAa_0           db '\AA{}',0            ; DATA XREF: print_field:loc_538E↑o
.rodata:000000000001B73B aO              db '\o{}',0             ; DATA XREF: print_field+23D↑o
.rodata:000000000001B740 aO_0            db '\O{}',0             ; DATA XREF: print_field:loc_5373↑o
.rodata:000000000001B745 aC              db '$\%c$',0            ; DATA XREF: print_field:loc_5118↑o
.rodata:000000000001B74B aBackslash      db '\backslash{}',0     ; DATA XREF: print_field+1BF↑o
.rodata:000000000001B758 aPtx            db 'ptx',0              ; DATA XREF: main+29F↑o
.rodata:000000000001B758                                         ; usage+1ED↑o ...
.rodata:000000000001B75C asc_1B75C       db '[',0                ; DATA XREF: usage+1F9↑o
.rodata:000000000001B75E aTestInvocation db 'test invocation',0  ; DATA XREF: usage+220↑o
.rodata:000000000001B76E aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000001B76E                                         ; DATA XREF: usage+250↑o
.rodata:000000000001B76E                                         ; usage+34C↑o ...
.rodata:000000000001B784 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+261↑o
.rodata:000000000001B78E aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+26D↑o
.rodata:000000000001B79D aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+200↑o
.rodata:000000000001B7A7 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+22C↑o
.rodata:000000000001B7B1 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+244↑o
.rodata:000000000001B7BB ; const char aSOnlineHelpS[]
.rodata:000000000001B7BB aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2BA↑o
.rodata:000000000001B7BB                 db '%s online help: <%s>',0Ah,0
.rodata:000000000001B7D2 unk_1B7D2       db  47h ; G             ; DATA XREF: main+298↑o
.rodata:000000000001B7D2                                         ; usage+2D6↑o ...
.rodata:000000000001B7D3                 db  4Eh ; N
.rodata:000000000001B7D4                 db  55h ; U
.rodata:000000000001B7D5                 db  20h
.rodata:000000000001B7D6 ; const char domainname[]
.rodata:000000000001B7D6 domainname      db 'coreutils',0        ; DATA XREF: main+63↑o
.rodata:000000000001B7D6                                         ; main+6F↑o ...
.rodata:000000000001B7E0 ; const char s2[]
.rodata:000000000001B7E0 s2              db 'en_',0              ; DATA XREF: usage+2FD↑o
.rodata:000000000001B7E0                                         ; usage+3BE↑o ...
.rodata:000000000001B7E4 ; const char aFullDocumentat[]
.rodata:000000000001B7E4 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000001B7E4                                         ; DATA XREF: usage:loc_57F9↑o
.rodata:000000000001B7E4                                         ; usage:loc_58B6↑o
.rodata:000000000001B7FF asc_1B7FF       db '$%&#_{}\',0         ; DATA XREF: main+B7E↑o
.rodata:000000000001B7FF                                         ; print_field+1F7↑o ...
.rodata:000000000001B808 ; const char dirname[]
.rodata:000000000001B808 dirname         db '/usr/local/share/locale',0
.rodata:000000000001B808                                         ; DATA XREF: main+5C↑o
.rodata:000000000001B820 ; const char aInvalidGapWidt[]
.rodata:000000000001B820 aInvalidGapWidt db 'invalid gap width: %s',0
.rodata:000000000001B820                                         ; DATA XREF: main+2482↑o
.rodata:000000000001B836 ; const char aInvalidLineWid[]
.rodata:000000000001B836 aInvalidLineWid db 'invalid line width: %s',0
.rodata:000000000001B836                                         ; DATA XREF: main+24B8↑o
.rodata:000000000001B84D aFormat         db '--format',0         ; DATA XREF: main+176↑o
.rodata:000000000001B84D                                         ; .data.rel.ro:00000000002209E0↓o
.rodata:000000000001B856 ; const char s[4]
.rodata:000000000001B856 s               db 'Fran'               ; DATA XREF: main+277↑o
.rodata:000000000001B85A                 db 0C3h
.rodata:000000000001B85B                 db 0A7h
.rodata:000000000001B85C                 db  6Fh ; o
.rodata:000000000001B85D                 db  69h ; i
.rodata:000000000001B85E                 db  73h ; s
.rodata:000000000001B85F                 db  20h
.rodata:000000000001B860                 db  50h ; P
.rodata:000000000001B861                 db  69h ; i
.rodata:000000000001B862                 db  6Eh ; n
.rodata:000000000001B863                 db  61h ; a
.rodata:000000000001B864                 db  72h ; r
.rodata:000000000001B865                 db  64h ; d
.rodata:000000000001B866                 db    0
.rodata:000000000001B867 ; const char aFPinard[]
.rodata:000000000001B867 aFPinard        db 'F. Pinard',0        ; DATA XREF: main+27E↑o
.rodata:000000000001B871 ; const char shortopts[]
.rodata:000000000001B871 shortopts       db 'AF:GM:ORS:TW:b:i:fg:o:trw:',0
.rodata:000000000001B871                                         ; DATA XREF: main+1D↑o
.rodata:000000000001B88C aW              db 'w',0                ; DATA XREF: main+22F9↑o
.rodata:000000000001B88E ; const char msgid[]
.rodata:000000000001B88E msgid           db 'extra operand %s',0 ; DATA XREF: main+2331↑o
.rodata:000000000001B89F aLd             db ':%ld',0             ; DATA XREF: main+184E↑o
.rodata:000000000001B89F                                         ; main+10E0↑o
.rodata:000000000001B8A4 aS_0            db '.%s "',0            ; DATA XREF: main+1C52↑o
.rodata:000000000001B8A4                                         ; main+1CBB↑o ...
.rodata:000000000001B8AA aS              db '\%s ',0             ; DATA XREF: main+189F↑o
.rodata:000000000001B8AF asc_1B8AF       db '}{',0               ; DATA XREF: main+18EC↑o
.rodata:000000000001B8AF                                         ; main+191C↑o ...
.rodata:000000000001B8B2 aRoff           db 'roff',0             ; DATA XREF: .data.rel.ro:format_args↓o
.rodata:000000000001B8B7 aTex            db 'tex',0              ; DATA XREF: .data.rel.ro:0000000000220888↓o
.rodata:000000000001B8BB aAutoReference  db 'auto-reference',0   ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000001B8CA aBreakFile      db 'break-file',0       ; DATA XREF: .data.rel.ro:00000000002208C0↓o
.rodata:000000000001B8D5 aFlagTruncation db 'flag-truncation',0  ; DATA XREF: .data.rel.ro:00000000002208E0↓o
.rodata:000000000001B8E5 aIgnoreCase     db 'ignore-case',0      ; DATA XREF: .data.rel.ro:0000000000220900↓o
.rodata:000000000001B8F1 aGapSize        db 'gap-size',0         ; DATA XREF: .data.rel.ro:0000000000220920↓o
.rodata:000000000001B8FA aIgnoreFile     db 'ignore-file',0      ; DATA XREF: .data.rel.ro:0000000000220940↓o
.rodata:000000000001B906 aMacroName      db 'macro-name',0       ; DATA XREF: .data.rel.ro:0000000000220960↓o
.rodata:000000000001B911 aOnlyFile       db 'only-file',0        ; DATA XREF: .data.rel.ro:0000000000220980↓o
.rodata:000000000001B91B aReferences     db 'references',0       ; DATA XREF: .data.rel.ro:00000000002209A0↓o
.rodata:000000000001B926 aRightSideRefs  db 'right-side-refs',0  ; DATA XREF: .data.rel.ro:00000000002209C0↓o
.rodata:000000000001B936 aSentenceRegexp db 'sentence-regexp',0  ; DATA XREF: .data.rel.ro:0000000000220A00↓o
.rodata:000000000001B946 aTraditional    db 'traditional',0      ; DATA XREF: .data.rel.ro:0000000000220A20↓o
.rodata:000000000001B952 aTypesetMode    db 'typeset-mode',0     ; DATA XREF: .data.rel.ro:0000000000220A40↓o
.rodata:000000000001B95F aWidth          db 'width',0            ; DATA XREF: .data.rel.ro:0000000000220A60↓o
.rodata:000000000001B965 aWordRegexp     db 'word-regexp',0      ; DATA XREF: .data.rel.ro:0000000000220A80↓o
.rodata:000000000001B971 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000220AA0↓o
.rodata:000000000001B976 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000220AC0↓o
.rodata:000000000001B97E aXx             db 'xx',0               ; DATA XREF: .data:macro_name↓o
.rodata:000000000001B981                 align 8
.rodata:000000000001B988 jpt_514F        dd offset def_514F - 1B988h
.rodata:000000000001B988                                         ; DATA XREF: print_field+21↑o
.rodata:000000000001B988                                         ; print_field+1A8↑r
.rodata:000000000001B988                 dd offset loc_52CF - 1B988h ; jump table for switch statement
.rodata:000000000001B988                 dd offset loc_5190 - 1B988h
.rodata:000000000001B988                 dd offset loc_5190 - 1B988h
.rodata:000000000001B988                 dd offset loc_51F8 - 1B988h
.rodata:000000000001B988                 dd offset loc_5225 - 1B988h
.rodata:000000000001B988                 dd offset loc_5252 - 1B988h
.rodata:000000000001B988                 dd offset loc_527F - 1B988h
.rodata:000000000001B988                 dd offset loc_5299 - 1B988h
.rodata:000000000001B988                 dd offset loc_51C2 - 1B988h
.rodata:000000000001B9B0 format_vals     db    2                 ; DATA XREF: main+4↑o
.rodata:000000000001B9B1                 db    0
.rodata:000000000001B9B2                 db    0
.rodata:000000000001B9B3                 db    0
.rodata:000000000001B9B4                 db    3
.rodata:000000000001B9B5                 db    0
.rodata:000000000001B9B6                 db    0
.rodata:000000000001B9B7                 db    0
.rodata:000000000001B9B8 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000001B9BD ; const char aInvalidArgumen[]
.rodata:000000000001B9BD aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000001B9BD                                         ; DATA XREF: argmatch_invalid:loc_5AC0↑o
.rodata:000000000001B9D8 ; const char aAmbiguousArgum[]
.rodata:000000000001B9D8 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000001B9D8                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000001B9F5 ; const char aValidArguments[]
.rodata:000000000001B9F5 aValidArguments db 'Valid arguments are:',0
.rodata:000000000001B9F5                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000001BA0A aS_1            db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000001BA0A                 db '  - %s',0
.rodata:000000000001BA12 aS_2            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000001BA12                                         ; main+244F↑o ...
.rodata:000000000001BA17 ; const char aWriteError[]
.rodata:000000000001BA17 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_5D23↑o
.rodata:000000000001BA23 ; const char format[]
.rodata:000000000001BA23 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000001BA2A                 align 20h
.rodata:000000000001BA40                 public diacrit_diac
.rodata:000000000001BA40 diacrit_diac    db    0                 ; DATA XREF: main+B99↑o
.rodata:000000000001BA40                                         ; print_field+D↑o
.rodata:000000000001BA41                 db    0
.rodata:000000000001BA42                 db    0
.rodata:000000000001BA43                 db    0
.rodata:000000000001BA44                 db    0
.rodata:000000000001BA45                 db    0
.rodata:000000000001BA46                 db    0
.rodata:000000000001BA47                 db    0
.rodata:000000000001BA48                 db    0
.rodata:000000000001BA49                 db    0
.rodata:000000000001BA4A                 db    0
.rodata:000000000001BA4B                 db    0
.rodata:000000000001BA4C                 db    0
.rodata:000000000001BA4D                 db    0
.rodata:000000000001BA4E                 db    0
.rodata:000000000001BA4F                 db    0
.rodata:000000000001BA50                 db    0
.rodata:000000000001BA51                 db    0
.rodata:000000000001BA52                 db    0
.rodata:000000000001BA53                 db    0
.rodata:000000000001BA54                 db    0
.rodata:000000000001BA55                 db    0
.rodata:000000000001BA56                 db    0
.rodata:000000000001BA57                 db    0
.rodata:000000000001BA58                 db    0
.rodata:000000000001BA59                 db    0
.rodata:000000000001BA5A                 db    0
.rodata:000000000001BA5B                 db    0
.rodata:000000000001BA5C                 db    0
.rodata:000000000001BA5D                 db    0
.rodata:000000000001BA5E                 db    0
.rodata:000000000001BA5F                 db    0
.rodata:000000000001BA60                 db    0
.rodata:000000000001BA61                 db    0
.rodata:000000000001BA62                 db    0
.rodata:000000000001BA63                 db    0
.rodata:000000000001BA64                 db    0
.rodata:000000000001BA65                 db    0
.rodata:000000000001BA66                 db    0
.rodata:000000000001BA67                 db    0
.rodata:000000000001BA68                 db    0
.rodata:000000000001BA69                 db    0
.rodata:000000000001BA6A                 db    0
.rodata:000000000001BA6B                 db    0
.rodata:000000000001BA6C                 db    0
.rodata:000000000001BA6D                 db    0
.rodata:000000000001BA6E                 db    0
.rodata:000000000001BA6F                 db    0
.rodata:000000000001BA70                 db    0
.rodata:000000000001BA71                 db    0
.rodata:000000000001BA72                 db    0
.rodata:000000000001BA73                 db    0
.rodata:000000000001BA74                 db    0
.rodata:000000000001BA75                 db    0
.rodata:000000000001BA76                 db    0
.rodata:000000000001BA77                 db    0
.rodata:000000000001BA78                 db    0
.rodata:000000000001BA79                 db    0
.rodata:000000000001BA7A                 db    0
.rodata:000000000001BA7B                 db    0
.rodata:000000000001BA7C                 db    0
.rodata:000000000001BA7D                 db    0
.rodata:000000000001BA7E                 db    0
.rodata:000000000001BA7F                 db    0
.rodata:000000000001BA80                 db    0
.rodata:000000000001BA81                 db    0
.rodata:000000000001BA82                 db    0
.rodata:000000000001BA83                 db    0
.rodata:000000000001BA84                 db    0
.rodata:000000000001BA85                 db    0
.rodata:000000000001BA86                 db    0
.rodata:000000000001BA87                 db    0
.rodata:000000000001BA88                 db    0
.rodata:000000000001BA89                 db    0
.rodata:000000000001BA8A                 db    0
.rodata:000000000001BA8B                 db    0
.rodata:000000000001BA8C                 db    0
.rodata:000000000001BA8D                 db    0
.rodata:000000000001BA8E                 db    0
.rodata:000000000001BA8F                 db    0
.rodata:000000000001BA90                 db    0
.rodata:000000000001BA91                 db    0
.rodata:000000000001BA92                 db    0
.rodata:000000000001BA93                 db    0
.rodata:000000000001BA94                 db    0
.rodata:000000000001BA95                 db    0
.rodata:000000000001BA96                 db    0
.rodata:000000000001BA97                 db    0
.rodata:000000000001BA98                 db    0
.rodata:000000000001BA99                 db    0
.rodata:000000000001BA9A                 db    0
.rodata:000000000001BA9B                 db    0
.rodata:000000000001BA9C                 db    0
.rodata:000000000001BA9D                 db    0
.rodata:000000000001BA9E                 db    4
.rodata:000000000001BA9F                 db    0
.rodata:000000000001BAA0                 db    3
.rodata:000000000001BAA1                 db    0
.rodata:000000000001BAA2                 db    0
.rodata:000000000001BAA3                 db    0
.rodata:000000000001BAA4                 db    0
.rodata:000000000001BAA5                 db    0
.rodata:000000000001BAA6                 db    0
.rodata:000000000001BAA7                 db    0
.rodata:000000000001BAA8                 db    0
.rodata:000000000001BAA9                 db    0
.rodata:000000000001BAAA                 db    0
.rodata:000000000001BAAB                 db    0
.rodata:000000000001BAAC                 db    0
.rodata:000000000001BAAD                 db    0
.rodata:000000000001BAAE                 db    0
.rodata:000000000001BAAF                 db    0
.rodata:000000000001BAB0                 db    0
.rodata:000000000001BAB1                 db    0
.rodata:000000000001BAB2                 db    0
.rodata:000000000001BAB3                 db    0
.rodata:000000000001BAB4                 db    0
.rodata:000000000001BAB5                 db    0
.rodata:000000000001BAB6                 db    0
.rodata:000000000001BAB7                 db    0
.rodata:000000000001BAB8                 db    0
.rodata:000000000001BAB9                 db    0
.rodata:000000000001BABA                 db    0
.rodata:000000000001BABB                 db    0
.rodata:000000000001BABC                 db    0
.rodata:000000000001BABD                 db    0
.rodata:000000000001BABE                 db    6
.rodata:000000000001BABF                 db    0
.rodata:000000000001BAC0                 db    0
.rodata:000000000001BAC1                 db    0
.rodata:000000000001BAC2                 db    0
.rodata:000000000001BAC3                 db    0
.rodata:000000000001BAC4                 db    0
.rodata:000000000001BAC5                 db    0
.rodata:000000000001BAC6                 db    0
.rodata:000000000001BAC7                 db    0
.rodata:000000000001BAC8                 db    0
.rodata:000000000001BAC9                 db    0
.rodata:000000000001BACA                 db    0
.rodata:000000000001BACB                 db    0
.rodata:000000000001BACC                 db    0
.rodata:000000000001BACD                 db    0
.rodata:000000000001BACE                 db    0
.rodata:000000000001BACF                 db    0
.rodata:000000000001BAD0                 db    0
.rodata:000000000001BAD1                 db    0
.rodata:000000000001BAD2                 db    0
.rodata:000000000001BAD3                 db    0
.rodata:000000000001BAD4                 db    0
.rodata:000000000001BAD5                 db    0
.rodata:000000000001BAD6                 db    0
.rodata:000000000001BAD7                 db    0
.rodata:000000000001BAD8                 db    0
.rodata:000000000001BAD9                 db    0
.rodata:000000000001BADA                 db    0
.rodata:000000000001BADB                 db    0
.rodata:000000000001BADC                 db    0
.rodata:000000000001BADD                 db    0
.rodata:000000000001BADE                 db    0
.rodata:000000000001BADF                 db    0
.rodata:000000000001BAE0                 db    0
.rodata:000000000001BAE1                 db    0
.rodata:000000000001BAE2                 db    0
.rodata:000000000001BAE3                 db    0
.rodata:000000000001BAE4                 db    0
.rodata:000000000001BAE5                 db    0
.rodata:000000000001BAE6                 db    0
.rodata:000000000001BAE7                 db    0
.rodata:000000000001BAE8                 db    0
.rodata:000000000001BAE9                 db    0
.rodata:000000000001BAEA                 db    0
.rodata:000000000001BAEB                 db    0
.rodata:000000000001BAEC                 db    0
.rodata:000000000001BAED                 db    0
.rodata:000000000001BAEE                 db    0
.rodata:000000000001BAEF                 db    0
.rodata:000000000001BAF0                 db    0
.rodata:000000000001BAF1                 db    0
.rodata:000000000001BAF2                 db    0
.rodata:000000000001BAF3                 db    0
.rodata:000000000001BAF4                 db    0
.rodata:000000000001BAF5                 db    0
.rodata:000000000001BAF6                 db    0
.rodata:000000000001BAF7                 db    0
.rodata:000000000001BAF8                 db    0
.rodata:000000000001BAF9                 db    0
.rodata:000000000001BAFA                 db    0
.rodata:000000000001BAFB                 db    0
.rodata:000000000001BAFC                 db    0
.rodata:000000000001BAFD                 db    0
.rodata:000000000001BAFE                 db    0
.rodata:000000000001BAFF                 db    0
.rodata:000000000001BB00                 db    3
.rodata:000000000001BB01                 db    2
.rodata:000000000001BB02                 db    4
.rodata:000000000001BB03                 db    6
.rodata:000000000001BB04                 db    5
.rodata:000000000001BB05                 db    8
.rodata:000000000001BB06                 db    1
.rodata:000000000001BB07                 db    7
.rodata:000000000001BB08                 db    3
.rodata:000000000001BB09                 db    2
.rodata:000000000001BB0A                 db    4
.rodata:000000000001BB0B                 db    5
.rodata:000000000001BB0C                 db    3
.rodata:000000000001BB0D                 db    2
.rodata:000000000001BB0E                 db    4
.rodata:000000000001BB0F                 db    5
.rodata:000000000001BB10                 db    0
.rodata:000000000001BB11                 db    6
.rodata:000000000001BB12                 db    3
.rodata:000000000001BB13                 db    2
.rodata:000000000001BB14                 db    4
.rodata:000000000001BB15                 db    6
.rodata:000000000001BB16                 db    5
.rodata:000000000001BB17                 db    0
.rodata:000000000001BB18                 db    9
.rodata:000000000001BB19                 db    3
.rodata:000000000001BB1A                 db    2
.rodata:000000000001BB1B                 db    4
.rodata:000000000001BB1C                 db    5
.rodata:000000000001BB1D                 db    2
.rodata:000000000001BB1E                 db    0
.rodata:000000000001BB1F                 db    0
.rodata:000000000001BB20                 db    3
.rodata:000000000001BB21                 db    2
.rodata:000000000001BB22                 db    4
.rodata:000000000001BB23                 db    6
.rodata:000000000001BB24                 db    5
.rodata:000000000001BB25                 db    8
.rodata:000000000001BB26                 db    1
.rodata:000000000001BB27                 db    7
.rodata:000000000001BB28                 db    3
.rodata:000000000001BB29                 db    2
.rodata:000000000001BB2A                 db    4
.rodata:000000000001BB2B                 db    5
.rodata:000000000001BB2C                 db    3
.rodata:000000000001BB2D                 db    2
.rodata:000000000001BB2E                 db    4
.rodata:000000000001BB2F                 db    5
.rodata:000000000001BB30                 db    0
.rodata:000000000001BB31                 db    6
.rodata:000000000001BB32                 db    3
.rodata:000000000001BB33                 db    2
.rodata:000000000001BB34                 db    4
.rodata:000000000001BB35                 db    6
.rodata:000000000001BB36                 db    5
.rodata:000000000001BB37                 db    0
.rodata:000000000001BB38                 db    9
.rodata:000000000001BB39                 db    3
.rodata:000000000001BB3A                 db    2
.rodata:000000000001BB3B                 db    4
.rodata:000000000001BB3C                 db    5
.rodata:000000000001BB3D                 db    2
.rodata:000000000001BB3E                 db    0
.rodata:000000000001BB3F                 db    0
.rodata:000000000001BB40                 public diacrit_base
.rodata:000000000001BB40 diacrit_base    db    0                 ; DATA XREF: print_field:loc_5130↑o
.rodata:000000000001BB41                 db    0
.rodata:000000000001BB42                 db    0
.rodata:000000000001BB43                 db    0
.rodata:000000000001BB44                 db    0
.rodata:000000000001BB45                 db    0
.rodata:000000000001BB46                 db    0
.rodata:000000000001BB47                 db    0
.rodata:000000000001BB48                 db    0
.rodata:000000000001BB49                 db    0
.rodata:000000000001BB4A                 db    0
.rodata:000000000001BB4B                 db    0
.rodata:000000000001BB4C                 db    0
.rodata:000000000001BB4D                 db    0
.rodata:000000000001BB4E                 db    0
.rodata:000000000001BB4F                 db    0
.rodata:000000000001BB50                 db    0
.rodata:000000000001BB51                 db    0
.rodata:000000000001BB52                 db    0
.rodata:000000000001BB53                 db    0
.rodata:000000000001BB54                 db    0
.rodata:000000000001BB55                 db    0
.rodata:000000000001BB56                 db    0
.rodata:000000000001BB57                 db    0
.rodata:000000000001BB58                 db    0
.rodata:000000000001BB59                 db    0
.rodata:000000000001BB5A                 db    0
.rodata:000000000001BB5B                 db    0
.rodata:000000000001BB5C                 db    0
.rodata:000000000001BB5D                 db    0
.rodata:000000000001BB5E                 db    0
.rodata:000000000001BB5F                 db    0
.rodata:000000000001BB60                 db    0
.rodata:000000000001BB61                 db    0
.rodata:000000000001BB62                 db    0
.rodata:000000000001BB63                 db    0
.rodata:000000000001BB64                 db    0
.rodata:000000000001BB65                 db    0
.rodata:000000000001BB66                 db    0
.rodata:000000000001BB67                 db    0
.rodata:000000000001BB68                 db    0
.rodata:000000000001BB69                 db    0
.rodata:000000000001BB6A                 db    0
.rodata:000000000001BB6B                 db    0
.rodata:000000000001BB6C                 db    0
.rodata:000000000001BB6D                 db    0
.rodata:000000000001BB6E                 db    0
.rodata:000000000001BB6F                 db    0
.rodata:000000000001BB70                 db    0
.rodata:000000000001BB71                 db    0
.rodata:000000000001BB72                 db    0
.rodata:000000000001BB73                 db    0
.rodata:000000000001BB74                 db    0
.rodata:000000000001BB75                 db    0
.rodata:000000000001BB76                 db    0
.rodata:000000000001BB77                 db    0
.rodata:000000000001BB78                 db    0
.rodata:000000000001BB79                 db    0
.rodata:000000000001BB7A                 db    0
.rodata:000000000001BB7B                 db    0
.rodata:000000000001BB7C                 db    0
.rodata:000000000001BB7D                 db    0
.rodata:000000000001BB7E                 db    0
.rodata:000000000001BB7F                 db    0
.rodata:000000000001BB80                 db    0
.rodata:000000000001BB81                 db  41h ; A
.rodata:000000000001BB82                 db  42h ; B
.rodata:000000000001BB83                 db  43h ; C
.rodata:000000000001BB84                 db  44h ; D
.rodata:000000000001BB85                 db  45h ; E
.rodata:000000000001BB86                 db  46h ; F
.rodata:000000000001BB87                 db  47h ; G
.rodata:000000000001BB88                 db  48h ; H
.rodata:000000000001BB89                 db  49h ; I
.rodata:000000000001BB8A                 db  4Ah ; J
.rodata:000000000001BB8B                 db  4Bh ; K
.rodata:000000000001BB8C                 db  4Ch ; L
.rodata:000000000001BB8D                 db  4Dh ; M
.rodata:000000000001BB8E                 db  4Eh ; N
.rodata:000000000001BB8F                 db  4Fh ; O
.rodata:000000000001BB90                 db  50h ; P
.rodata:000000000001BB91                 db  51h ; Q
.rodata:000000000001BB92                 db  52h ; R
.rodata:000000000001BB93                 db  53h ; S
.rodata:000000000001BB94                 db  54h ; T
.rodata:000000000001BB95                 db  55h ; U
.rodata:000000000001BB96                 db  56h ; V
.rodata:000000000001BB97                 db  57h ; W
.rodata:000000000001BB98                 db  58h ; X
.rodata:000000000001BB99                 db  59h ; Y
.rodata:000000000001BB9A                 db  5Ah ; Z
.rodata:000000000001BB9B                 db    0
.rodata:000000000001BB9C                 db    0
.rodata:000000000001BB9D                 db    0
.rodata:000000000001BB9E                 db    0
.rodata:000000000001BB9F                 db    0
.rodata:000000000001BBA0                 db    0
.rodata:000000000001BBA1                 db  61h ; a
.rodata:000000000001BBA2                 db  62h ; b
.rodata:000000000001BBA3                 db  63h ; c
.rodata:000000000001BBA4                 db  64h ; d
.rodata:000000000001BBA5                 db  65h ; e
.rodata:000000000001BBA6                 db  66h ; f
.rodata:000000000001BBA7                 db  67h ; g
.rodata:000000000001BBA8                 db  68h ; h
.rodata:000000000001BBA9                 db  69h ; i
.rodata:000000000001BBAA                 db  6Ah ; j
.rodata:000000000001BBAB                 db  6Bh ; k
.rodata:000000000001BBAC                 db  6Ch ; l
.rodata:000000000001BBAD                 db  6Dh ; m
.rodata:000000000001BBAE                 db  6Eh ; n
.rodata:000000000001BBAF                 db  6Fh ; o
.rodata:000000000001BBB0                 db  70h ; p
.rodata:000000000001BBB1                 db  71h ; q
.rodata:000000000001BBB2                 db  72h ; r
.rodata:000000000001BBB3                 db  73h ; s
.rodata:000000000001BBB4                 db  74h ; t
.rodata:000000000001BBB5                 db  75h ; u
.rodata:000000000001BBB6                 db  76h ; v
.rodata:000000000001BBB7                 db  77h ; w
.rodata:000000000001BBB8                 db  78h ; x
.rodata:000000000001BBB9                 db  79h ; y
.rodata:000000000001BBBA                 db  7Ah ; z
.rodata:000000000001BBBB                 db    0
.rodata:000000000001BBBC                 db    0
.rodata:000000000001BBBD                 db    0
.rodata:000000000001BBBE                 db    0
.rodata:000000000001BBBF                 db    0
.rodata:000000000001BBC0                 db    0
.rodata:000000000001BBC1                 db    0
.rodata:000000000001BBC2                 db    0
.rodata:000000000001BBC3                 db    0
.rodata:000000000001BBC4                 db    0
.rodata:000000000001BBC5                 db    0
.rodata:000000000001BBC6                 db    0
.rodata:000000000001BBC7                 db    0
.rodata:000000000001BBC8                 db    0
.rodata:000000000001BBC9                 db    0
.rodata:000000000001BBCA                 db    0
.rodata:000000000001BBCB                 db    0
.rodata:000000000001BBCC                 db    0
.rodata:000000000001BBCD                 db    0
.rodata:000000000001BBCE                 db    0
.rodata:000000000001BBCF                 db    0
.rodata:000000000001BBD0                 db    0
.rodata:000000000001BBD1                 db    0
.rodata:000000000001BBD2                 db    0
.rodata:000000000001BBD3                 db    0
.rodata:000000000001BBD4                 db    0
.rodata:000000000001BBD5                 db    0
.rodata:000000000001BBD6                 db    0
.rodata:000000000001BBD7                 db    0
.rodata:000000000001BBD8                 db    0
.rodata:000000000001BBD9                 db    0
.rodata:000000000001BBDA                 db    0
.rodata:000000000001BBDB                 db    0
.rodata:000000000001BBDC                 db    0
.rodata:000000000001BBDD                 db    0
.rodata:000000000001BBDE                 db    0
.rodata:000000000001BBDF                 db    0
.rodata:000000000001BBE0                 db    0
.rodata:000000000001BBE1                 db    0
.rodata:000000000001BBE2                 db    0
.rodata:000000000001BBE3                 db    0
.rodata:000000000001BBE4                 db    0
.rodata:000000000001BBE5                 db    0
.rodata:000000000001BBE6                 db    0
.rodata:000000000001BBE7                 db    0
.rodata:000000000001BBE8                 db    0
.rodata:000000000001BBE9                 db    0
.rodata:000000000001BBEA                 db    0
.rodata:000000000001BBEB                 db    0
.rodata:000000000001BBEC                 db    0
.rodata:000000000001BBED                 db    0
.rodata:000000000001BBEE                 db    0
.rodata:000000000001BBEF                 db    0
.rodata:000000000001BBF0                 db    0
.rodata:000000000001BBF1                 db    0
.rodata:000000000001BBF2                 db    0
.rodata:000000000001BBF3                 db    0
.rodata:000000000001BBF4                 db    0
.rodata:000000000001BBF5                 db    0
.rodata:000000000001BBF6                 db    0
.rodata:000000000001BBF7                 db    0
.rodata:000000000001BBF8                 db    0
.rodata:000000000001BBF9                 db    0
.rodata:000000000001BBFA                 db    0
.rodata:000000000001BBFB                 db    0
.rodata:000000000001BBFC                 db    0
.rodata:000000000001BBFD                 db    0
.rodata:000000000001BBFE                 db    0
.rodata:000000000001BBFF                 db    0
.rodata:000000000001BC00                 db  41h ; A
.rodata:000000000001BC01                 db  41h ; A
.rodata:000000000001BC02                 db  41h ; A
.rodata:000000000001BC03                 db  41h ; A
.rodata:000000000001BC04                 db  41h ; A
.rodata:000000000001BC05                 db  41h ; A
.rodata:000000000001BC06                 db  41h ; A
.rodata:000000000001BC07                 db  43h ; C
.rodata:000000000001BC08                 db  45h ; E
.rodata:000000000001BC09                 db  45h ; E
.rodata:000000000001BC0A                 db  45h ; E
.rodata:000000000001BC0B                 db  45h ; E
.rodata:000000000001BC0C                 db  49h ; I
.rodata:000000000001BC0D                 db  49h ; I
.rodata:000000000001BC0E                 db  49h ; I
.rodata:000000000001BC0F                 db  49h ; I
.rodata:000000000001BC10                 db    0
.rodata:000000000001BC11                 db  4Eh ; N
.rodata:000000000001BC12                 db  4Fh ; O
.rodata:000000000001BC13                 db  4Fh ; O
.rodata:000000000001BC14                 db  4Fh ; O
.rodata:000000000001BC15                 db  4Fh ; O
.rodata:000000000001BC16                 db  4Fh ; O
.rodata:000000000001BC17                 db    0
.rodata:000000000001BC18                 db  4Fh ; O
.rodata:000000000001BC19                 db  55h ; U
.rodata:000000000001BC1A                 db  55h ; U
.rodata:000000000001BC1B                 db  55h ; U
.rodata:000000000001BC1C                 db  55h ; U
.rodata:000000000001BC1D                 db  59h ; Y
.rodata:000000000001BC1E                 db    0
.rodata:000000000001BC1F                 db    0
.rodata:000000000001BC20                 db  61h ; a
.rodata:000000000001BC21                 db  61h ; a
.rodata:000000000001BC22                 db  61h ; a
.rodata:000000000001BC23                 db  61h ; a
.rodata:000000000001BC24                 db  61h ; a
.rodata:000000000001BC25                 db  61h ; a
.rodata:000000000001BC26                 db  61h ; a
.rodata:000000000001BC27                 db  63h ; c
.rodata:000000000001BC28                 db  65h ; e
.rodata:000000000001BC29                 db  65h ; e
.rodata:000000000001BC2A                 db  65h ; e
.rodata:000000000001BC2B                 db  65h ; e
.rodata:000000000001BC2C                 db  69h ; i
.rodata:000000000001BC2D                 db  69h ; i
.rodata:000000000001BC2E                 db  69h ; i
.rodata:000000000001BC2F                 db  69h ; i
.rodata:000000000001BC30                 db    0
.rodata:000000000001BC31                 db  6Eh ; n
.rodata:000000000001BC32                 db  6Fh ; o
.rodata:000000000001BC33                 db  6Fh ; o
.rodata:000000000001BC34                 db  6Fh ; o
.rodata:000000000001BC35                 db  6Fh ; o
.rodata:000000000001BC36                 db  6Fh ; o
.rodata:000000000001BC37                 db    0
.rodata:000000000001BC38                 db  6Fh ; o
.rodata:000000000001BC39                 db  75h ; u
.rodata:000000000001BC3A                 db  75h ; u
.rodata:000000000001BC3B                 db  75h ; u
.rodata:000000000001BC3C                 db  75h ; u
.rodata:000000000001BC3D                 db  79h ; y
.rodata:000000000001BC3E                 db    0
.rodata:000000000001BC3F                 db  79h ; y
.rodata:000000000001BC40 ; const char aDevNull[]
.rodata:000000000001BC40 aDevNull        db '/dev/null',0        ; DATA XREF: protect_fd+4↑o
.rodata:000000000001BC4A                 align 10h
.rodata:000000000001BC50 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000001BC50                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000001BC88 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000001BC88                                         ; .data:truncation_string↓o
.rodata:000000000001BC90 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000001BC90                                         ; main:loc_261C↑o ...
.rodata:000000000001BC94                 align 8
.rodata:000000000001BC98 ; const char file[]
.rodata:000000000001BC98 file            db '../coreutils-8.31/lib/mbuiter.h',0
.rodata:000000000001BC98                                         ; DATA XREF: mbuiter_multi_next_part_0+7↑o
.rodata:000000000001BC98                                         ; mbuiter_multi_next_part_0_0+7↑o ...
.rodata:000000000001BCB8 ; const char assertion[]
.rodata:000000000001BCB8 assertion       db 'iter->cur.wc == 0',0
.rodata:000000000001BCB8                                         ; DATA XREF: mbuiter_multi_next_part_0+E↑o
.rodata:000000000001BCB8                                         ; mbiter_multi_next_part_0+E↑o ...
.rodata:000000000001BCCA ; const char aMbsinitIterSta[]
.rodata:000000000001BCCA aMbsinitIterSta db 'mbsinit (&iter->state)',0
.rodata:000000000001BCCA                                         ; DATA XREF: mbsstr_trimmed_wordbounded+935↑o
.rodata:000000000001BCCA                                         ; trim2+5FA↑o ...
.rodata:000000000001BCE1 ; const char aIterCurPtr0[]
.rodata:000000000001BCE1 aIterCurPtr0    db '*iter->cur.ptr == ',27h,'\0',27h,0
.rodata:000000000001BCE1                                         ; DATA XREF: mbsstr_trimmed_wordbounded+959↑o
.rodata:000000000001BCE1                                         ; trim2+61E↑o ...
.rodata:000000000001BCF8 aSS_0           db '%s (%s)',0          ; DATA XREF: proper_name+55↑o
.rodata:000000000001BCF8                                         ; proper_name_utf8+27D↑o
.rodata:000000000001BD00 aUtf8           db 'UTF-8',0            ; DATA XREF: proper_name_utf8+2B↑o
.rodata:000000000001BD00                                         ; proper_name_utf8:loc_6B58↑o ...
.rodata:000000000001BD06                 align 10h
.rodata:000000000001BD10 ; const char _PRETTY_FUNCTION___5159[]
.rodata:000000000001BD10 __PRETTY_FUNCTION___5159 db 'mbuiter_multi_next',0
.rodata:000000000001BD10                                         ; DATA XREF: mbuiter_multi_next_part_0↑o
.rodata:000000000001BD10                                         ; mbsstr_trimmed_wordbounded:loc_6957↑o ...
.rodata:000000000001BD23 unk_1BD23       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000001BD24                 db  80h
.rodata:000000000001BD25                 db  98h
.rodata:000000000001BD26                 db    0
.rodata:000000000001BD27 unk_1BD27       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000001BD28                 db  80h
.rodata:000000000001BD29                 db  99h
.rodata:000000000001BD2A                 db    0
.rodata:000000000001BD2B unk_1BD2B       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000001BD2C                 db    7
.rodata:000000000001BD2D                 db  65h ; e
.rodata:000000000001BD2E                 db    0
.rodata:000000000001BD2F unk_1BD2F       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000001BD30                 db 0AFh
.rodata:000000000001BD31                 db    0
.rodata:000000000001BD32 ; const char asc_1BD32[2]
.rodata:000000000001BD32 asc_1BD32       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000001BD32                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000001BD34 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000001BD3C aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000220B08↓o
.rodata:000000000001BD42 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000220B10↓o
.rodata:000000000001BD4F aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000220B18↓o
.rodata:000000000001BD4F                                         ; .data.rel.ro:0000000000220B38↓o
.rodata:000000000001BD5C aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000001BD5C                                         ; DATA XREF: .data.rel.ro:0000000000220B20↓o
.rodata:000000000001BD70 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000220B30↓o
.rodata:000000000001BD78 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000220B48↓o
.rodata:000000000001BD80 jpt_6EA1        dd offset loc_7C4A - 1BD80h
.rodata:000000000001BD80                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000001BD80                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000001BD80                 dd offset loc_6EA3 - 1BD80h ; jump table for switch statement
.rodata:000000000001BD80                 dd offset loc_7E78 - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7C84 - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7A74 - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7AD0 - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7B25 - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7B6A - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7BA4 - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7BA4 - 1BD80h
.rodata:000000000001BD80                 dd offset loc_7BA4 - 1BD80h
.rodata:000000000001BDAC jpt_6FFE        dd offset loc_7220 - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000001BDAC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh ; jump table for switch statement
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset loc_7260 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7168 - 1BDACh, offset loc_7128 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72F0 - 1BDACh, offset loc_72E0 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72D0 - 1BDACh, offset loc_72C0 - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset def_6FFE - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72B0 - 1BDACh, offset loc_72A0 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_7270 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_7103 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_72A0 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_72A0 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_72A0 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_70D3 - 1BDACh
.rodata:000000000001BDAC                 dd offset def_6FFE - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_72A0 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7178 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7248 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7248 - 1BDACh, offset loc_7003 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_72A0 - 1BDACh, offset loc_7003 - 1BDACh
.rodata:000000000001BDAC                 dd offset loc_7270 - 1BDACh
.rodata:000000000001BFA8 jpt_738A        dd offset loc_73F0 - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000001BFA8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h ; jump table for switch statement
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset loc_73E0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7530 - 1BFA8h, offset loc_7518 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_73C8 - 1BFA8h, offset loc_7508 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_73B0 - 1BFA8h, offset loc_74F0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset def_738A - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74D8 - 1BFA8h, offset loc_74C0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_74A8 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_7100 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_74C0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_74C0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_74C0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_70D0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset def_738A - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_74C0 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7390 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7490 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_7490 - 1BFA8h, offset loc_7000 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74C0 - 1BFA8h, offset loc_7000 - 1BFA8h
.rodata:000000000001BFA8                 dd offset loc_74A8 - 1BFA8h
.rodata:000000000001C1A4                 align 20h
.rodata:000000000001C1C0                 public quoting_style_vals
.rodata:000000000001C1C0 quoting_style_vals db    0
.rodata:000000000001C1C1                 db    0
.rodata:000000000001C1C2                 db    0
.rodata:000000000001C1C3                 db    0
.rodata:000000000001C1C4                 db    1
.rodata:000000000001C1C5                 db    0
.rodata:000000000001C1C6                 db    0
.rodata:000000000001C1C7                 db    0
.rodata:000000000001C1C8                 db    2
.rodata:000000000001C1C9                 db    0
.rodata:000000000001C1CA                 db    0
.rodata:000000000001C1CB                 db    0
.rodata:000000000001C1CC                 db    3
.rodata:000000000001C1CD                 db    0
.rodata:000000000001C1CE                 db    0
.rodata:000000000001C1CF                 db    0
.rodata:000000000001C1D0                 db    4
.rodata:000000000001C1D1                 db    0
.rodata:000000000001C1D2                 db    0
.rodata:000000000001C1D3                 db    0
.rodata:000000000001C1D4                 db    5
.rodata:000000000001C1D5                 db    0
.rodata:000000000001C1D6                 db    0
.rodata:000000000001C1D7                 db    0
.rodata:000000000001C1D8                 db    6
.rodata:000000000001C1D9                 db    0
.rodata:000000000001C1DA                 db    0
.rodata:000000000001C1DB                 db    0
.rodata:000000000001C1DC                 db    7
.rodata:000000000001C1DD                 db    0
.rodata:000000000001C1DE                 db    0
.rodata:000000000001C1DF                 db    0
.rodata:000000000001C1E0                 db    8
.rodata:000000000001C1E1                 db    0
.rodata:000000000001C1E2                 db    0
.rodata:000000000001C1E3                 db    0
.rodata:000000000001C1E4                 db    9
.rodata:000000000001C1E5                 db    0
.rodata:000000000001C1E6                 db    0
.rodata:000000000001C1E7                 db    0
.rodata:000000000001C1E8 unk_1C1E8       db  72h ; r             ; DATA XREF: read_binary_file↑o
.rodata:000000000001C1E9                 db  62h ; b
.rodata:000000000001C1EA                 db    0
.rodata:000000000001C1EB                 db    0
.rodata:000000000001C1EC                 db    0
.rodata:000000000001C1ED                 db    0
.rodata:000000000001C1EE                 db    0
.rodata:000000000001C1EF                 db    0
.rodata:000000000001C1F0 ; const char aCoreutils831Li_0[]
.rodata:000000000001C1F0 aCoreutils831Li_0 db '../coreutils-8.31/lib/mbiter.h',0
.rodata:000000000001C1F0                                         ; DATA XREF: mbiter_multi_next_part_0+7↑o
.rodata:000000000001C1F0                                         ; trim2+5F3↑o ...
.rodata:000000000001C20F                 align 10h
.rodata:000000000001C210 ; const char _PRETTY_FUNCTION___5134[]
.rodata:000000000001C210 __PRETTY_FUNCTION___5134 db 'mbiter_multi_next',0
.rodata:000000000001C210                                         ; DATA XREF: mbiter_multi_next_part_0↑o
.rodata:000000000001C210                                         ; trim2:loc_925C↑o ...
.rodata:000000000001C222 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000001C22E aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000001C235 ; const char aC_0[]
.rodata:000000000001C235 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_92DC↑o
.rodata:000000000001C239 ; const char aWrittenByS[]
.rodata:000000000001C239 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000001C239                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000001C249 ; const char aWrittenBySAndS[]
.rodata:000000000001C249 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000001C249                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000001C260 ; const char aWrittenBySSAnd[]
.rodata:000000000001C260 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000001C260                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000001C27C ; const char aReportBugsToS[]
.rodata:000000000001C27C aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000001C27C                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000001C291 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000001C291                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000001C2A7 ; const char aSHomePageS[]
.rodata:000000000001C2A7 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000001C2A7                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000001C2BB                 align 20h
.rodata:000000000001C2C0 ; const char aLicenseGplv3Gn[]
.rodata:000000000001C2C0 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000001C2C0                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000001C2C0                 db 'ses/gpl.html>.',0Ah
.rodata:000000000001C2C0                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000001C2C0                 db '.',0Ah
.rodata:000000000001C2C0                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000001C2C0                 db 0Ah,0
.rodata:000000000001C38C                 align 10h
.rodata:000000000001C390 ; const char aWrittenBySSSAn[]
.rodata:000000000001C390 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001C390                                         ; DATA XREF: version_etc_arn:loc_9530↑o
.rodata:000000000001C390                 db 'and %s.',0Ah,0
.rodata:000000000001C3B0 ; const char aWrittenBySSSSA[]
.rodata:000000000001C3B0 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001C3B0                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000001C3B0                 db '%s, and %s.',0Ah,0
.rodata:000000000001C3D4                 align 8
.rodata:000000000001C3D8 ; const char aWrittenBySSSSS_1[]
.rodata:000000000001C3D8 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001C3D8                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000001C3D8                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000001C400 ; const char aWrittenBySSSSS_2[]
.rodata:000000000001C400 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001C400                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000001C400                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000001C42C                 align 10h
.rodata:000000000001C430 ; const char aWrittenBySSSSS[]
.rodata:000000000001C430 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001C430                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000001C430                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000001C430                 db 'and %s.',0Ah,0
.rodata:000000000001C460 ; const char aWrittenBySSSSS_0[]
.rodata:000000000001C460 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001C460                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000001C460                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000001C460                 db '%s, and %s.',0Ah,0
.rodata:000000000001C494                 align 8
.rodata:000000000001C498 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001C498                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000001C498                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000001C498                 db '%s, %s, and others.',0Ah,0
.rodata:000000000001C4D4                 align 8
.rodata:000000000001C4D8 ; const char aGeneralHelpUsi[]
.rodata:000000000001C4D8 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000001C4D8                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000001C4D8                 db 0
.rodata:000000000001C519                 align 4
.rodata:000000000001C51C jpt_9344        dd offset loc_93C6 - 1C51Ch
.rodata:000000000001C51C                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000001C51C                                         ; version_etc_arn+9D↑r
.rodata:000000000001C51C                 dd offset loc_9458 - 1C51Ch ; jump table for switch statement
.rodata:000000000001C51C                 dd offset loc_9498 - 1C51Ch
.rodata:000000000001C51C                 dd offset loc_94E0 - 1C51Ch
.rodata:000000000001C51C                 dd offset loc_9530 - 1C51Ch
.rodata:000000000001C51C                 dd offset loc_9588 - 1C51Ch
.rodata:000000000001C51C                 dd offset loc_95B8 - 1C51Ch
.rodata:000000000001C51C                 dd offset loc_9620 - 1C51Ch
.rodata:000000000001C51C                 dd offset loc_9350 - 1C51Ch
.rodata:000000000001C51C                 dd offset loc_9400 - 1C51Ch
.rodata:000000000001C544                 align 20h
.rodata:000000000001C560                 public version_etc_copyright
.rodata:000000000001C560 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000001C560                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000001C58F ; const char aMemoryExhauste[]
.rodata:000000000001C58F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000001C5A0 ; const char aCoreutils831Li_1[]
.rodata:000000000001C5A0 aCoreutils831Li_1 db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000001C5A0                                         ; DATA XREF: xstrtoimax+696↑o
.rodata:000000000001C5C0 ; const char a0StrtolBaseStr[]
.rodata:000000000001C5C0 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000001C5C0                                         ; DATA XREF: xstrtoimax+69D↑o
.rodata:000000000001C5E6                 align 8
.rodata:000000000001C5E8 jpt_9D7E        dd offset loc_A0B0 - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                                         ; DATA XREF: xstrtoimax+19C↑o
.rodata:000000000001C5E8                                         ; xstrtoimax+1A7↑r
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9FE0 - 1C5E8h ; jump table for switch statement
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9F80 - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9F40 - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9D80 - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset loc_A048 - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset loc_A0E0 - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9ED0 - 1C5E8h
.rodata:000000000001C5E8                 dd offset loc_9E60 - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset loc_9E30 - 1C5E8h, offset loc_9DE0 - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9F80 - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9F40 - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9D80 - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset loc_A0E0 - 1C5E8h, offset def_9D7E - 1C5E8h
.rodata:000000000001C5E8                 dd offset def_9D7E - 1C5E8h, offset loc_9E00 - 1C5E8h
.rodata:000000000001C6C0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000001C6C0 __PRETTY_FUNCTION___4162 db 'xstrtoimax',0
.rodata:000000000001C6C0                                         ; DATA XREF: xstrtoimax:loc_A25F↑o
.rodata:000000000001C6CB                 align 10h
.rodata:000000000001C6D0 ; const char aCoreutils831Li_2[]
.rodata:000000000001C6D0 aCoreutils831Li_2 db '../coreutils-8.31/lib/regexec.c',0
.rodata:000000000001C6D0                                         ; DATA XREF: pop_fail_stack_isra_25+7C↑o
.rodata:000000000001C6D0                                         ; re_search_internal+1034↑o ...
.rodata:000000000001C6F0 ; const char aCoreutils831Li_3[]
.rodata:000000000001C6F0 aCoreutils831Li_3 db '../coreutils-8.31/lib/regcomp.c',0
.rodata:000000000001C6F0                                         ; DATA XREF: parse_expression+1301↑o
.rodata:000000000001C6F0                                         ; re_compile_internal+962↑o ...
.rodata:000000000001C710 ; const char aIsEpsilonNodeN[]
.rodata:000000000001C710 aIsEpsilonNodeN db '!IS_EPSILON_NODE (node->token.type)',0
.rodata:000000000001C710                                         ; DATA XREF: re_compile_internal+10C0↑o
.rodata:000000000001C734                 align 8
.rodata:000000000001C738 ; const char aNum0[]
.rodata:000000000001C738 aNum0           db 'num >= 0',0         ; DATA XREF: pop_fail_stack_isra_25+83↑o
.rodata:000000000001C741 aAlpha          db 'alpha',0            ; DATA XREF: build_charclass_isra_29+41↑o
.rodata:000000000001C741                                         ; build_charclass_isra_29+152↑o ...
.rodata:000000000001C747 aUpper          db 'upper',0            ; DATA XREF: build_charclass_isra_29+23↑o
.rodata:000000000001C747                                         ; build_charclass_isra_29:loc_FB9C↑o ...
.rodata:000000000001C74D aLower          db 'lower',0            ; DATA XREF: build_charclass_isra_29:loc_F886↑o
.rodata:000000000001C74D                                         ; build_charclass_isra_29:loc_F8F8↑o
.rodata:000000000001C753 aAlnum          db 'alnum',0            ; DATA XREF: build_charclass_isra_29+6C↑o
.rodata:000000000001C753                                         ; parse_expression+9CF↑o
.rodata:000000000001C759 aCntrl          db 'cntrl',0            ; DATA XREF: build_charclass_isra_29+8A↑o
.rodata:000000000001C75F aSpace          db 'space',0            ; DATA XREF: build_charclass_isra_29+1C2↑o
.rodata:000000000001C75F                                         ; parse_expression+97F↑o
.rodata:000000000001C765 aPrint          db 'print',0            ; DATA XREF: build_charclass_isra_29:loc_FB03↑o
.rodata:000000000001C76B aBlank          db 'blank',0            ; DATA XREF: build_charclass_isra_29:loc_FC02↑o
.rodata:000000000001C771 ; const char aGraph[]
.rodata:000000000001C771 aGraph          db 'graph',0            ; DATA XREF: build_charclass_isra_29:loc_FD0E↑o
.rodata:000000000001C777 ; const char aPunct[]
.rodata:000000000001C777 aPunct          db 'punct',0            ; DATA XREF: build_charclass_isra_29:loc_FD9A↑o
.rodata:000000000001C77D ; const char asc_1C77D[1]
.rodata:000000000001C77D asc_1C77D       db 'x'                  ; DATA XREF: build_charclass_isra_29:loc_FE24↑o
.rodata:000000000001C77E aDigit          db 'digit',0            ; DATA XREF: build_charclass_isra_29+290↑o
.rodata:000000000001C784 ; const char aErrRegEspace[]
.rodata:000000000001C784 aErrRegEspace   db 'err == REG_ESPACE',0
.rodata:000000000001C784                                         ; DATA XREF: re_search_internal+103B↑o
.rodata:000000000001C784                                         ; re_search_internal+153F↑o
.rodata:000000000001C796 ; const char aNodeNextNull[]
.rodata:000000000001C796 aNodeNextNull   db 'node->next == NULL',0
.rodata:000000000001C796                                         ; DATA XREF: re_compile_internal+969↑o
.rodata:000000000001C7A9 ; const char aLeft1[]
.rodata:000000000001C7A9 aLeft1          db 'left > -1',0        ; DATA XREF: re_compile_internal+10DF↑o
.rodata:000000000001C7B3 ; const char aRight1[]
.rodata:000000000001C7B3 aRight1         db 'right > -1',0       ; DATA XREF: re_compile_internal+10A1↑o
.rodata:000000000001C7BE ; const char aRegsAllocatedR[]
.rodata:000000000001C7BE aRegsAllocatedR db 'regs_allocated == REGS_FIXED',0
.rodata:000000000001C7BE                                         ; DATA XREF: re_search_stub+46E↑o
.rodata:000000000001C7DB ; const char aRegsNumRegsNre[]
.rodata:000000000001C7DB aRegsNumRegsNre db 'regs->num_regs >= nregs',0
.rodata:000000000001C7DB                                         ; DATA XREF: re_search_stub+44F↑o
.rodata:000000000001C7F3 ; const char aPmatch0RmSoSta[]
.rodata:000000000001C7F3 aPmatch0RmSoSta db 'pmatch[0].rm_so == start',0
.rodata:000000000001C7F3                                         ; DATA XREF: re_search_stub+430↑o
.rodata:000000000001C80C                 align 20h
.rodata:000000000001C820 jpt_12E66       dd offset loc_13434 - 1C820h
.rodata:000000000001C820                                         ; DATA XREF: re_search_internal+4E8↑o
.rodata:000000000001C820                                         ; re_search_internal+4EF↑r
.rodata:000000000001C820                 dd offset loc_13434 - 1C820h ; jump table for switch statement
.rodata:000000000001C820                 dd offset loc_12E9E - 1C820h
.rodata:000000000001C820                 dd offset loc_133C2 - 1C820h
.rodata:000000000001C820                 dd offset loc_12F48 - 1C820h
.rodata:000000000001C834 jpt_14C9C       dd offset loc_14E80 - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                                         ; DATA XREF: peek_token+13A↑o
.rodata:000000000001C834                                         ; peek_token+145↑r
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h ; jump table for switch statement
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset loc_14EF0 - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset loc_14ED0 - 1C834h, offset loc_14EB0 - 1C834h
.rodata:000000000001C834                 dd offset loc_14EA0 - 1C834h, offset loc_14E60 - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset loc_14E50 - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset loc_14E30 - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset loc_14E20 - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset loc_14DF8 - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset def_14C9C - 1C834h
.rodata:000000000001C834                 dd offset def_14C9C - 1C834h, offset loc_14DD0 - 1C834h
.rodata:000000000001C834                 dd offset loc_14DA8 - 1C834h, offset loc_14D80 - 1C834h
.rodata:000000000001CA04 jpt_14D48       dd offset loc_15113 - 1CA04h, offset loc_150FC - 1CA04h
.rodata:000000000001CA04                                         ; DATA XREF: peek_token+1E7↑o
.rodata:000000000001CA04                                         ; peek_token+1F1↑r
.rodata:000000000001CA04                 dd offset loc_150E5 - 1CA04h, offset def_14D48 - 1CA04h ; jump table for switch statement
.rodata:000000000001CA04                 dd offset loc_150CA - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_150A1 - 1CA04h, offset loc_150A1 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_150A1 - 1CA04h, offset loc_150A1 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_150A1 - 1CA04h, offset loc_150A1 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_150A1 - 1CA04h, offset loc_150A1 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_150A1 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset loc_1507F - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset loc_1505D - 1CA04h
.rodata:000000000001CA04                 dd offset loc_15042 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset loc_15020 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_15005 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_14FEA - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset loc_14FC8 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset loc_14FA6 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_14F6D - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_14F52 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset def_14D48 - 1CA04h, offset def_14D48 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_14F34 - 1CA04h, offset loc_14F19 - 1CA04h
.rodata:000000000001CA04                 dd offset loc_14F88 - 1CA04h
.rodata:000000000001CB60 jpt_1536F       dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                                         ; DATA XREF: parse_expression+4B↑o
.rodata:000000000001CB60                                         ; parse_expression+58↑r
.rodata:000000000001CB60                 dd offset loc_15D9E - 1CB60h ; jump table for switch statement
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15CEF - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15D59 - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15371 - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15E88 - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset loc_1545D - 1CB60h
.rodata:000000000001CB60                 dd offset loc_159D0 - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset loc_1545D - 1CB60h
.rodata:000000000001CB60                 dd offset loc_1545D - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15B10 - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset loc_1544E - 1CB60h
.rodata:000000000001CB60                 dd offset loc_1547B - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset def_1536F - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15CC8 - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15CC8 - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15C78 - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15C78 - 1CB60h
.rodata:000000000001CB60                 dd offset loc_15EF3 - 1CB60h
.rodata:000000000001CBF4 jpt_15C76       dd offset loc_15FE1 - 1CBF4h
.rodata:000000000001CBF4                                         ; DATA XREF: parse_expression+88B↑o
.rodata:000000000001CBF4                                         ; parse_expression+95E↑r
.rodata:000000000001CBF4                 dd offset loc_15FB7 - 1CBF4h ; jump table for switch statement
.rodata:000000000001CBF4                 dd offset loc_15F6D - 1CBF4h
.rodata:000000000001CBF4                 dd offset loc_15F35 - 1CBF4h
.rodata:000000000001CBF4                 dd offset loc_16009 - 1CBF4h
.rodata:000000000001CC08 jpt_171D3       dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                                         ; DATA XREF: re_compile_internal+6AC↑o
.rodata:000000000001CC08                                         ; re_compile_internal+6CC↑r
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h ; jump table for switch statement
.rodata:000000000001CC08                 dd offset loc_17450 - 1CC08h
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                 dd offset loc_17480 - 1CC08h
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                 dd offset loc_173F8 - 1CC08h
.rodata:000000000001CC08                 dd offset loc_173F8 - 1CC08h
.rodata:000000000001CC08                 dd offset loc_17337 - 1CC08h
.rodata:000000000001CC08                 dd offset loc_17337 - 1CC08h
.rodata:000000000001CC08                 dd offset loc_173F8 - 1CC08h
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                 dd offset def_171D3 - 1CC08h
.rodata:000000000001CC08                 dd offset loc_172B1 - 1CC08h
.rodata:000000000001CC4C jpt_178D3       dd offset def_178D3 - 1CC4Ch
.rodata:000000000001CC4C                                         ; DATA XREF: re_compile_internal+DAF↑o
.rodata:000000000001CC4C                                         ; re_compile_internal+DCC↑r
.rodata:000000000001CC4C                 dd offset loc_17A90 - 1CC4Ch ; jump table for switch statement
.rodata:000000000001CC4C                 dd offset loc_17A3C - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17AB8 - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17A3C - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17A39 - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_176AE - 1CC4Ch
.rodata:000000000001CC4C                 dd offset def_178D3 - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17A3C - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17A3C - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17A3C - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17A3C - 1CC4Ch
.rodata:000000000001CC4C                 dd offset loc_17A99 - 1CC4Ch
.rodata:000000000001CC80 ; const char _PRETTY_FUNCTION___7859[]
.rodata:000000000001CC80 __PRETTY_FUNCTION___7859 db 're_copy_regs',0
.rodata:000000000001CC80                                         ; DATA XREF: re_search_stub:loc_18191↑o
.rodata:000000000001CC80                                         ; re_search_stub:loc_181B0↑o
.rodata:000000000001CC8D                 align 10h
.rodata:000000000001CC90 ; const char _PRETTY_FUNCTION___7847[]
.rodata:000000000001CC90 __PRETTY_FUNCTION___7847 db 're_search_stub',0
.rodata:000000000001CC90                                         ; DATA XREF: re_search_stub:loc_18172↑o
.rodata:000000000001CC9F                 align 20h
.rodata:000000000001CCA0 ; const char _PRETTY_FUNCTION___8040[]
.rodata:000000000001CCA0 __PRETTY_FUNCTION___8040 db 'pop_fail_stack',0
.rodata:000000000001CCA0                                         ; DATA XREF: pop_fail_stack_isra_25:loc_F6D5↑o
.rodata:000000000001CCAF                 align 10h
.rodata:000000000001CCB0 ; const char _PRETTY_FUNCTION___7972[]
.rodata:000000000001CCB0 __PRETTY_FUNCTION___7972 db 'check_matching',0
.rodata:000000000001CCB0                                         ; DATA XREF: re_search_internal+102D↑o
.rodata:000000000001CCB0                                         ; re_search_internal+1531↑o
.rodata:000000000001CCBF                 align 20h
.rodata:000000000001CCC0 ; const char _PRETTY_FUNCTION___6981[]
.rodata:000000000001CCC0 __PRETTY_FUNCTION___6981 db 'link_nfa_nodes',0
.rodata:000000000001CCC0                                         ; DATA XREF: re_compile_internal+95B↑o
.rodata:000000000001CCC0                                         ; re_compile_internal:loc_17B93↑o ...
.rodata:000000000001CCCF                 align 10h
.rodata:000000000001CCD0 ; const char _PRETTY_FUNCTION___7327[]
.rodata:000000000001CCD0 __PRETTY_FUNCTION___7327 db 'parse_bracket_exp',0
.rodata:000000000001CCD0                                         ; DATA XREF: parse_expression:def_15C76↑o
.rodata:000000000001CCE2                 align 20h
.rodata:000000000001CD00 utf8_sb_map     db 0FFh                 ; DATA XREF: free_dfa_content+131↑o
.rodata:000000000001CD00                                         ; re_compile_internal+1B3↑o
.rodata:000000000001CD01                 db 0FFh
.rodata:000000000001CD02                 db 0FFh
.rodata:000000000001CD03                 db 0FFh
.rodata:000000000001CD04                 db 0FFh
.rodata:000000000001CD05                 db 0FFh
.rodata:000000000001CD06                 db 0FFh
.rodata:000000000001CD07                 db 0FFh
.rodata:000000000001CD08                 db 0FFh
.rodata:000000000001CD09                 db 0FFh
.rodata:000000000001CD0A                 db 0FFh
.rodata:000000000001CD0B                 db 0FFh
.rodata:000000000001CD0C                 db 0FFh
.rodata:000000000001CD0D                 db 0FFh
.rodata:000000000001CD0E                 db 0FFh
.rodata:000000000001CD0F                 db 0FFh
.rodata:000000000001CD10                 db    0
.rodata:000000000001CD11                 db    0
.rodata:000000000001CD12                 db    0
.rodata:000000000001CD13                 db    0
.rodata:000000000001CD14                 db    0
.rodata:000000000001CD15                 db    0
.rodata:000000000001CD16                 db    0
.rodata:000000000001CD17                 db    0
.rodata:000000000001CD18                 db    0
.rodata:000000000001CD19                 db    0
.rodata:000000000001CD1A                 db    0
.rodata:000000000001CD1B                 db    0
.rodata:000000000001CD1C                 db    0
.rodata:000000000001CD1D                 db    0
.rodata:000000000001CD1E                 db    0
.rodata:000000000001CD1F                 db    0
.rodata:000000000001CD20 __re_error_msgid_idx db    0            ; DATA XREF: rpl_re_compile_pattern+3E↑o
.rodata:000000000001CD20                                         ; rpl_regerror+F↑o
.rodata:000000000001CD21                 db    0
.rodata:000000000001CD22                 db    0
.rodata:000000000001CD23                 db    0
.rodata:000000000001CD24                 db    0
.rodata:000000000001CD25                 db    0
.rodata:000000000001CD26                 db    0
.rodata:000000000001CD27                 db    0
.rodata:000000000001CD28                 db    8
.rodata:000000000001CD29                 db    0
.rodata:000000000001CD2A                 db    0
.rodata:000000000001CD2B                 db    0
.rodata:000000000001CD2C                 db    0
.rodata:000000000001CD2D                 db    0
.rodata:000000000001CD2E                 db    0
.rodata:000000000001CD2F                 db    0
.rodata:000000000001CD30                 db  11h
.rodata:000000000001CD31                 db    0
.rodata:000000000001CD32                 db    0
.rodata:000000000001CD33                 db    0
.rodata:000000000001CD34                 db    0
.rodata:000000000001CD35                 db    0
.rodata:000000000001CD36                 db    0
.rodata:000000000001CD37                 db    0
.rodata:000000000001CD38                 db  2Ch ; ,
.rodata:000000000001CD39                 db    0
.rodata:000000000001CD3A                 db    0
.rodata:000000000001CD3B                 db    0
.rodata:000000000001CD3C                 db    0
.rodata:000000000001CD3D                 db    0
.rodata:000000000001CD3E                 db    0
.rodata:000000000001CD3F                 db    0
.rodata:000000000001CD40                 db  48h ; H
.rodata:000000000001CD41                 db    0
.rodata:000000000001CD42                 db    0
.rodata:000000000001CD43                 db    0
.rodata:000000000001CD44                 db    0
.rodata:000000000001CD45                 db    0
.rodata:000000000001CD46                 db    0
.rodata:000000000001CD47                 db    0
.rodata:000000000001CD48                 db  65h ; e
.rodata:000000000001CD49                 db    0
.rodata:000000000001CD4A                 db    0
.rodata:000000000001CD4B                 db    0
.rodata:000000000001CD4C                 db    0
.rodata:000000000001CD4D                 db    0
.rodata:000000000001CD4E                 db    0
.rodata:000000000001CD4F                 db    0
.rodata:000000000001CD50                 db  78h ; x
.rodata:000000000001CD51                 db    0
.rodata:000000000001CD52                 db    0
.rodata:000000000001CD53                 db    0
.rodata:000000000001CD54                 db    0
.rodata:000000000001CD55                 db    0
.rodata:000000000001CD56                 db    0
.rodata:000000000001CD57                 db    0
.rodata:000000000001CD58                 db  8Fh
.rodata:000000000001CD59                 db    0
.rodata:000000000001CD5A                 db    0
.rodata:000000000001CD5B                 db    0
.rodata:000000000001CD5C                 db    0
.rodata:000000000001CD5D                 db    0
.rodata:000000000001CD5E                 db    0
.rodata:000000000001CD5F                 db    0
.rodata:000000000001CD60                 db 0AEh
.rodata:000000000001CD61                 db    0
.rodata:000000000001CD62                 db    0
.rodata:000000000001CD63                 db    0
.rodata:000000000001CD64                 db    0
.rodata:000000000001CD65                 db    0
.rodata:000000000001CD66                 db    0
.rodata:000000000001CD67                 db    0
.rodata:000000000001CD68                 db 0C0h
.rodata:000000000001CD69                 db    0
.rodata:000000000001CD6A                 db    0
.rodata:000000000001CD6B                 db    0
.rodata:000000000001CD6C                 db    0
.rodata:000000000001CD6D                 db    0
.rodata:000000000001CD6E                 db    0
.rodata:000000000001CD6F                 db    0
.rodata:000000000001CD70                 db 0CDh
.rodata:000000000001CD71                 db    0
.rodata:000000000001CD72                 db    0
.rodata:000000000001CD73                 db    0
.rodata:000000000001CD74                 db    0
.rodata:000000000001CD75                 db    0
.rodata:000000000001CD76                 db    0
.rodata:000000000001CD77                 db    0
.rodata:000000000001CD78                 db 0E5h
.rodata:000000000001CD79                 db    0
.rodata:000000000001CD7A                 db    0
.rodata:000000000001CD7B                 db    0
.rodata:000000000001CD7C                 db    0
.rodata:000000000001CD7D                 db    0
.rodata:000000000001CD7E                 db    0
.rodata:000000000001CD7F                 db    0
.rodata:000000000001CD80                 db 0F7h
.rodata:000000000001CD81                 db    0
.rodata:000000000001CD82                 db    0
.rodata:000000000001CD83                 db    0
.rodata:000000000001CD84                 db    0
.rodata:000000000001CD85                 db    0
.rodata:000000000001CD86                 db    0
.rodata:000000000001CD87                 db    0
.rodata:000000000001CD88                 db    8
.rodata:000000000001CD89                 db    1
.rodata:000000000001CD8A                 db    0
.rodata:000000000001CD8B                 db    0
.rodata:000000000001CD8C                 db    0
.rodata:000000000001CD8D                 db    0
.rodata:000000000001CD8E                 db    0
.rodata:000000000001CD8F                 db    0
.rodata:000000000001CD90                 db  2Dh ; -
.rodata:000000000001CD91                 db    1
.rodata:000000000001CD92                 db    0
.rodata:000000000001CD93                 db    0
.rodata:000000000001CD94                 db    0
.rodata:000000000001CD95                 db    0
.rodata:000000000001CD96                 db    0
.rodata:000000000001CD97                 db    0
.rodata:000000000001CD98                 db  51h ; Q
.rodata:000000000001CD99                 db    1
.rodata:000000000001CD9A                 db    0
.rodata:000000000001CD9B                 db    0
.rodata:000000000001CD9C                 db    0
.rodata:000000000001CD9D                 db    0
.rodata:000000000001CD9E                 db    0
.rodata:000000000001CD9F                 db    0
.rodata:000000000001CDA0                 db  6Ch ; l
.rodata:000000000001CDA1                 db    1
.rodata:000000000001CDA2                 db    0
.rodata:000000000001CDA3                 db    0
.rodata:000000000001CDA4                 db    0
.rodata:000000000001CDA5                 db    0
.rodata:000000000001CDA6                 db    0
.rodata:000000000001CDA7                 db    0
.rodata:000000000001CDA8                 db    0
.rodata:000000000001CDA9                 db    0
.rodata:000000000001CDAA                 db    0
.rodata:000000000001CDAB                 db    0
.rodata:000000000001CDAC                 db    0
.rodata:000000000001CDAD                 db    0
.rodata:000000000001CDAE                 db    0
.rodata:000000000001CDAF                 db    0
.rodata:000000000001CDB0                 db    0
.rodata:000000000001CDB1                 db    0
.rodata:000000000001CDB2                 db    0
.rodata:000000000001CDB3                 db    0
.rodata:000000000001CDB4                 db    0
.rodata:000000000001CDB5                 db    0
.rodata:000000000001CDB6                 db    0
.rodata:000000000001CDB7                 db    0
.rodata:000000000001CDB8                 db    0
.rodata:000000000001CDB9                 db    0
.rodata:000000000001CDBA                 db    0
.rodata:000000000001CDBB                 db    0
.rodata:000000000001CDBC                 db    0
.rodata:000000000001CDBD                 db    0
.rodata:000000000001CDBE                 db    0
.rodata:000000000001CDBF                 db    0
.rodata:000000000001CDC0 __re_error_msgid db 'Success',0         ; DATA XREF: rpl_re_compile_pattern+47↑o
.rodata:000000000001CDC0                                         ; rpl_regerror+19↑o
.rodata:000000000001CDC8 aNoMatch        db 'No match',0
.rodata:000000000001CDD1 aInvalidRegular db 'Invalid regular expression',0
.rodata:000000000001CDEC aInvalidCollati db 'Invalid collation character',0
.rodata:000000000001CE08 aInvalidCharact db 'Invalid character class name',0
.rodata:000000000001CE25 aTrailingBacksl db 'Trailing backslash',0
.rodata:000000000001CE38 aInvalidBackRef db 'Invalid back reference',0
.rodata:000000000001CE4F aUnmatchedOr    db 'Unmatched [, [^, [:, [., or [=',0
.rodata:000000000001CE6E aUnmatchedOr_0  db 'Unmatched ( or \(',0
.rodata:000000000001CE80 aUnmatched      db 'Unmatched \{',0
.rodata:000000000001CE8D aInvalidContent db 'Invalid content of \{\}',0
.rodata:000000000001CEA5 aInvalidRangeEn db 'Invalid range end',0
.rodata:000000000001CEB7 aMemoryExhauste_0 db 'Memory exhausted',0
.rodata:000000000001CEC8 aInvalidPrecedi db 'Invalid preceding regular expression',0
.rodata:000000000001CEED aPrematureEndOf db 'Premature end of regular expression',0
.rodata:000000000001CF11 aRegularExpress db 'Regular expression too big',0
.rodata:000000000001CF2C aUnmatchedOr_1  db 'Unmatched ) or \)',0
.rodata:000000000001CF3E                 align 20h
.rodata:000000000001CF40 xmmword_1CF40   xmmword 1010101010101010101010101010101h
.rodata:000000000001CF40                                         ; DATA XREF: re_compile_fastmap_iter_isra_30:loc_105E4↑r
.rodata:000000000001CF40                                         ; re_compile_fastmap_iter_isra_30:loc_10684↑r
.rodata:000000000001CF50 unk_1CF50       db  43h ; C             ; DATA XREF: hard_locale+18↑o
.rodata:000000000001CF51                 db    0
.rodata:000000000001CF52 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_18760↑o
.rodata:000000000001CF58 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000001CF58                                         ; locale_charset:loc_187B0↑o
.rodata:000000000001CF5E                 align 20h
.rodata:000000000001CF60                 public is_basic_table
.rodata:000000000001CF60 is_basic_table  db    0                 ; DATA XREF: mbsstr_trimmed_wordbounded+15↑o
.rodata:000000000001CF60                                         ; trim2+10C↑o ...
.rodata:000000000001CF61                 db  1Ah
.rodata:000000000001CF62                 db    0
.rodata:000000000001CF63                 db    0
.rodata:000000000001CF64                 db 0EFh
.rodata:000000000001CF65                 db 0FFh
.rodata:000000000001CF66                 db 0FFh
.rodata:000000000001CF67                 db 0FFh
.rodata:000000000001CF68                 db 0FEh
.rodata:000000000001CF69                 db 0FFh
.rodata:000000000001CF6A                 db 0FFh
.rodata:000000000001CF6B                 db 0FFh
.rodata:000000000001CF6C                 db 0FEh
.rodata:000000000001CF6D                 db 0FFh
.rodata:000000000001CF6E                 db 0FFh
.rodata:000000000001CF6F                 db  7Fh ; 
.rodata:000000000001CF70                 db    0
.rodata:000000000001CF71                 db    0
.rodata:000000000001CF72                 db    0
.rodata:000000000001CF73                 db    0
.rodata:000000000001CF74                 db    0
.rodata:000000000001CF75                 db    0
.rodata:000000000001CF76                 db    0
.rodata:000000000001CF77                 db    0
.rodata:000000000001CF78                 db    0
.rodata:000000000001CF79                 db    0
.rodata:000000000001CF7A                 db    0
.rodata:000000000001CF7B                 db    0
.rodata:000000000001CF7C                 db    0
.rodata:000000000001CF7D                 db    0
.rodata:000000000001CF7E                 db    0
.rodata:000000000001CF7F                 db    0
.rodata:000000000001CF80 ; const char _PRETTY_FUNCTION___5056[]
.rodata:000000000001CF80 __PRETTY_FUNCTION___5056 db 'mbuiter_multi_next',0
.rodata:000000000001CF80                                         ; DATA XREF: mbuiter_multi_next_part_0_0↑o
.rodata:000000000001CF80                                         ; knuth_morris_pratt_multibyte:loc_1943F↑o ...
.rodata:000000000001CF93                 align 20h
.rodata:000000000001CFA0 ; const char _PRETTY_FUNCTION___5021[]
.rodata:000000000001CFA0 __PRETTY_FUNCTION___5021 db 'mbuiter_multi_next',0
.rodata:000000000001CFA0                                         ; DATA XREF: mbslen:loc_1ADEA↑o
.rodata:000000000001CFA0                                         ; mbslen:loc_1AE0E↑o ...
.rodata:000000000001CFA0 _rodata         ends
.rodata:000000000001CFA0
LOAD:000000000001CFB3 ; ===========================================================================
LOAD:000000000001CFB3
LOAD:000000000001CFB3 ; Segment type: Pure code
LOAD:000000000001CFB3 ; Segment permissions: Read/Execute
LOAD:000000000001CFB3 LOAD            segment byte public 'CODE' use64
LOAD:000000000001CFB3                 assume cs:LOAD
LOAD:000000000001CFB3                 ;org 1CFB3h
LOAD:000000000001CFB3                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001CFB3                 align 4
LOAD:000000000001CFB3 LOAD            ends
LOAD:000000000001CFB3
.eh_frame_hdr:000000000001CFB4 ; ===========================================================================
.eh_frame_hdr:000000000001CFB4
.eh_frame_hdr:000000000001CFB4 ; Segment type: Pure data
.eh_frame_hdr:000000000001CFB4 ; Segment permissions: Read
.eh_frame_hdr:000000000001CFB4 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000001CFB4                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000001CFB4                 ;org 1CFB4h
.eh_frame_hdr:000000000001CFB4 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000001CFB5                 db  1Bh
.eh_frame_hdr:000000000001CFB6                 db    3
.eh_frame_hdr:000000000001CFB7                 db  3Bh ; ;
.eh_frame_hdr:000000000001CFB8                 db  88h
.eh_frame_hdr:000000000001CFB9                 db    6
.eh_frame_hdr:000000000001CFBA                 db    0
.eh_frame_hdr:000000000001CFBB                 db    0
.eh_frame_hdr:000000000001CFBC                 db 0D0h
.eh_frame_hdr:000000000001CFBD                 db    0
.eh_frame_hdr:000000000001CFBE                 db    0
.eh_frame_hdr:000000000001CFBF                 db    0
.eh_frame_hdr:000000000001CFC0                 db  8Ch
.eh_frame_hdr:000000000001CFC1                 db  4Ch ; L
.eh_frame_hdr:000000000001CFC2                 db 0FEh
.eh_frame_hdr:000000000001CFC3                 db 0FFh
.eh_frame_hdr:000000000001CFC4                 db 0D4h
.eh_frame_hdr:000000000001CFC5                 db    6
.eh_frame_hdr:000000000001CFC6                 db    0
.eh_frame_hdr:000000000001CFC7                 db    0
.eh_frame_hdr:000000000001CFC8                 db  5Ch ; \
.eh_frame_hdr:000000000001CFC9                 db  51h ; Q
.eh_frame_hdr:000000000001CFCA                 db 0FEh
.eh_frame_hdr:000000000001CFCB                 db 0FFh
.eh_frame_hdr:000000000001CFCC                 db 0FCh
.eh_frame_hdr:000000000001CFCD                 db    6
.eh_frame_hdr:000000000001CFCE                 db    0
.eh_frame_hdr:000000000001CFCF                 db    0
.eh_frame_hdr:000000000001CFD0                 db  6Ch ; l
.eh_frame_hdr:000000000001CFD1                 db  51h ; Q
.eh_frame_hdr:000000000001CFD2                 db 0FEh
.eh_frame_hdr:000000000001CFD3                 db 0FFh
.eh_frame_hdr:000000000001CFD4                 db    4
.eh_frame_hdr:000000000001CFD5                 db  0Ch
.eh_frame_hdr:000000000001CFD6                 db    0
.eh_frame_hdr:000000000001CFD7                 db    0
.eh_frame_hdr:000000000001CFD8                 db  8Fh
.eh_frame_hdr:000000000001CFD9                 db  51h ; Q
.eh_frame_hdr:000000000001CFDA                 db 0FEh
.eh_frame_hdr:000000000001CFDB                 db 0FFh
.eh_frame_hdr:000000000001CFDC                 db  54h ; T
.eh_frame_hdr:000000000001CFDD                 db  12h
.eh_frame_hdr:000000000001CFDE                 db    0
.eh_frame_hdr:000000000001CFDF                 db    0
.eh_frame_hdr:000000000001CFE0                 db 0B2h
.eh_frame_hdr:000000000001CFE1                 db  51h ; Q
.eh_frame_hdr:000000000001CFE2                 db 0FEh
.eh_frame_hdr:000000000001CFE3                 db 0FFh
.eh_frame_hdr:000000000001CFE4                 db 0ACh
.eh_frame_hdr:000000000001CFE5                 db  2Dh ; -
.eh_frame_hdr:000000000001CFE6                 db    0
.eh_frame_hdr:000000000001CFE7                 db    0
.eh_frame_hdr:000000000001CFE8                 db 0DCh
.eh_frame_hdr:000000000001CFE9                 db  51h ; Q
.eh_frame_hdr:000000000001CFEA                 db 0FEh
.eh_frame_hdr:000000000001CFEB                 db 0FFh
.eh_frame_hdr:000000000001CFEC                 db  4Ch ; L
.eh_frame_hdr:000000000001CFED                 db    9
.eh_frame_hdr:000000000001CFEE                 db    0
.eh_frame_hdr:000000000001CFEF                 db    0
.eh_frame_hdr:000000000001CFF0                 db  8Ch
.eh_frame_hdr:000000000001CFF1                 db  78h ; x
.eh_frame_hdr:000000000001CFF2                 db 0FEh
.eh_frame_hdr:000000000001CFF3                 db 0FFh
.eh_frame_hdr:000000000001CFF4                 db 0A4h
.eh_frame_hdr:000000000001CFF5                 db    6
.eh_frame_hdr:000000000001CFF6                 db    0
.eh_frame_hdr:000000000001CFF7                 db    0
.eh_frame_hdr:000000000001CFF8                 db  9Ch
.eh_frame_hdr:000000000001CFF9                 db  79h ; y
.eh_frame_hdr:000000000001CFFA                 db 0FEh
.eh_frame_hdr:000000000001CFFB                 db 0FFh
.eh_frame_hdr:000000000001CFFC                 db  14h
.eh_frame_hdr:000000000001CFFD                 db    7
.eh_frame_hdr:000000000001CFFE                 db    0
.eh_frame_hdr:000000000001CFFF                 db    0
.eh_frame_hdr:000000000001D000                 db  4Ch ; L
.eh_frame_hdr:000000000001D001                 db  7Ah ; z
.eh_frame_hdr:000000000001D002                 db 0FEh
.eh_frame_hdr:000000000001D003                 db 0FFh
.eh_frame_hdr:000000000001D004                 db  28h ; (
.eh_frame_hdr:000000000001D005                 db    7
.eh_frame_hdr:000000000001D006                 db    0
.eh_frame_hdr:000000000001D007                 db    0
.eh_frame_hdr:000000000001D008                 db  7Ch ; |
.eh_frame_hdr:000000000001D009                 db  7Ah ; z
.eh_frame_hdr:000000000001D00A                 db 0FEh
.eh_frame_hdr:000000000001D00B                 db 0FFh
.eh_frame_hdr:000000000001D00C                 db  40h ; @
.eh_frame_hdr:000000000001D00D                 db    7
.eh_frame_hdr:000000000001D00E                 db    0
.eh_frame_hdr:000000000001D00F                 db    0
.eh_frame_hdr:000000000001D010                 db 0FCh
.eh_frame_hdr:000000000001D011                 db  7Ch ; |
.eh_frame_hdr:000000000001D012                 db 0FEh
.eh_frame_hdr:000000000001D013                 db 0FFh
.eh_frame_hdr:000000000001D014                 db  70h ; p
.eh_frame_hdr:000000000001D015                 db    7
.eh_frame_hdr:000000000001D016                 db    0
.eh_frame_hdr:000000000001D017                 db    0
.eh_frame_hdr:000000000001D018                 db  9Ch
.eh_frame_hdr:000000000001D019                 db  7Dh ; }
.eh_frame_hdr:000000000001D01A                 db 0FEh
.eh_frame_hdr:000000000001D01B                 db 0FFh
.eh_frame_hdr:000000000001D01C                 db 0A0h
.eh_frame_hdr:000000000001D01D                 db    7
.eh_frame_hdr:000000000001D01E                 db    0
.eh_frame_hdr:000000000001D01F                 db    0
.eh_frame_hdr:000000000001D020                 db  7Ch ; |
.eh_frame_hdr:000000000001D021                 db  7Eh ; ~
.eh_frame_hdr:000000000001D022                 db 0FEh
.eh_frame_hdr:000000000001D023                 db 0FFh
.eh_frame_hdr:000000000001D024                 db 0CCh
.eh_frame_hdr:000000000001D025                 db    7
.eh_frame_hdr:000000000001D026                 db    0
.eh_frame_hdr:000000000001D027                 db    0
.eh_frame_hdr:000000000001D028                 db  9Ch
.eh_frame_hdr:000000000001D029                 db  7Fh ; 
.eh_frame_hdr:000000000001D02A                 db 0FEh
.eh_frame_hdr:000000000001D02B                 db 0FFh
.eh_frame_hdr:000000000001D02C                 db    8
.eh_frame_hdr:000000000001D02D                 db    8
.eh_frame_hdr:000000000001D02E                 db    0
.eh_frame_hdr:000000000001D02F                 db    0
.eh_frame_hdr:000000000001D030                 db 0ECh
.eh_frame_hdr:000000000001D031                 db  7Fh ; 
.eh_frame_hdr:000000000001D032                 db 0FEh
.eh_frame_hdr:000000000001D033                 db 0FFh
.eh_frame_hdr:000000000001D034                 db  28h ; (
.eh_frame_hdr:000000000001D035                 db    8
.eh_frame_hdr:000000000001D036                 db    0
.eh_frame_hdr:000000000001D037                 db    0
.eh_frame_hdr:000000000001D038                 db  6Ch ; l
.eh_frame_hdr:000000000001D039                 db  84h
.eh_frame_hdr:000000000001D03A                 db 0FEh
.eh_frame_hdr:000000000001D03B                 db 0FFh
.eh_frame_hdr:000000000001D03C                 db 0A8h
.eh_frame_hdr:000000000001D03D                 db    8
.eh_frame_hdr:000000000001D03E                 db    0
.eh_frame_hdr:000000000001D03F                 db    0
.eh_frame_hdr:000000000001D040                 db  9Ch
.eh_frame_hdr:000000000001D041                 db  84h
.eh_frame_hdr:000000000001D042                 db 0FEh
.eh_frame_hdr:000000000001D043                 db 0FFh
.eh_frame_hdr:000000000001D044                 db 0CCh
.eh_frame_hdr:000000000001D045                 db    8
.eh_frame_hdr:000000000001D046                 db    0
.eh_frame_hdr:000000000001D047                 db    0
.eh_frame_hdr:000000000001D048                 db  2Ch ; ,
.eh_frame_hdr:000000000001D049                 db  85h
.eh_frame_hdr:000000000001D04A                 db 0FEh
.eh_frame_hdr:000000000001D04B                 db 0FFh
.eh_frame_hdr:000000000001D04C                 db  20h
.eh_frame_hdr:000000000001D04D                 db    9
.eh_frame_hdr:000000000001D04E                 db    0
.eh_frame_hdr:000000000001D04F                 db    0
.eh_frame_hdr:000000000001D050                 db  7Ch ; |
.eh_frame_hdr:000000000001D051                 db  89h
.eh_frame_hdr:000000000001D052                 db 0FEh
.eh_frame_hdr:000000000001D053                 db 0FFh
.eh_frame_hdr:000000000001D054                 db  9Ch
.eh_frame_hdr:000000000001D055                 db    9
.eh_frame_hdr:000000000001D056                 db    0
.eh_frame_hdr:000000000001D057                 db    0
.eh_frame_hdr:000000000001D058                 db  8Ch
.eh_frame_hdr:000000000001D059                 db  89h
.eh_frame_hdr:000000000001D05A                 db 0FEh
.eh_frame_hdr:000000000001D05B                 db 0FFh
.eh_frame_hdr:000000000001D05C                 db 0B0h
.eh_frame_hdr:000000000001D05D                 db    9
.eh_frame_hdr:000000000001D05E                 db    0
.eh_frame_hdr:000000000001D05F                 db    0
.eh_frame_hdr:000000000001D060                 db 0ACh
.eh_frame_hdr:000000000001D061                 db  8Ah
.eh_frame_hdr:000000000001D062                 db 0FEh
.eh_frame_hdr:000000000001D063                 db 0FFh
.eh_frame_hdr:000000000001D064                 db 0FCh
.eh_frame_hdr:000000000001D065                 db    9
.eh_frame_hdr:000000000001D066                 db    0
.eh_frame_hdr:000000000001D067                 db    0
.eh_frame_hdr:000000000001D068                 db  2Ch ; ,
.eh_frame_hdr:000000000001D069                 db  8Bh
.eh_frame_hdr:000000000001D06A                 db 0FEh
.eh_frame_hdr:000000000001D06B                 db 0FFh
.eh_frame_hdr:000000000001D06C                 db  28h ; (
.eh_frame_hdr:000000000001D06D                 db  0Ah
.eh_frame_hdr:000000000001D06E                 db    0
.eh_frame_hdr:000000000001D06F                 db    0
.eh_frame_hdr:000000000001D070                 db  4Ch ; L
.eh_frame_hdr:000000000001D071                 db  8Ch
.eh_frame_hdr:000000000001D072                 db 0FEh
.eh_frame_hdr:000000000001D073                 db 0FFh
.eh_frame_hdr:000000000001D074                 db  88h
.eh_frame_hdr:000000000001D075                 db  0Ah
.eh_frame_hdr:000000000001D076                 db    0
.eh_frame_hdr:000000000001D077                 db    0
.eh_frame_hdr:000000000001D078                 db 0BCh
.eh_frame_hdr:000000000001D079                 db  8Ch
.eh_frame_hdr:000000000001D07A                 db 0FEh
.eh_frame_hdr:000000000001D07B                 db 0FFh
.eh_frame_hdr:000000000001D07C                 db 0D4h
.eh_frame_hdr:000000000001D07D                 db  0Ah
.eh_frame_hdr:000000000001D07E                 db    0
.eh_frame_hdr:000000000001D07F                 db    0
.eh_frame_hdr:000000000001D080                 db  0Ch
.eh_frame_hdr:000000000001D081                 db  8Dh
.eh_frame_hdr:000000000001D082                 db 0FEh
.eh_frame_hdr:000000000001D083                 db 0FFh
.eh_frame_hdr:000000000001D084                 db  14h
.eh_frame_hdr:000000000001D085                 db  0Bh
.eh_frame_hdr:000000000001D086                 db    0
.eh_frame_hdr:000000000001D087                 db    0
.eh_frame_hdr:000000000001D088                 db  1Ch
.eh_frame_hdr:000000000001D089                 db  8Dh
.eh_frame_hdr:000000000001D08A                 db 0FEh
.eh_frame_hdr:000000000001D08B                 db 0FFh
.eh_frame_hdr:000000000001D08C                 db  28h ; (
.eh_frame_hdr:000000000001D08D                 db  0Bh
.eh_frame_hdr:000000000001D08E                 db    0
.eh_frame_hdr:000000000001D08F                 db    0
.eh_frame_hdr:000000000001D090                 db  2Ch ; ,
.eh_frame_hdr:000000000001D091                 db  8Dh
.eh_frame_hdr:000000000001D092                 db 0FEh
.eh_frame_hdr:000000000001D093                 db 0FFh
.eh_frame_hdr:000000000001D094                 db  3Ch ; <
.eh_frame_hdr:000000000001D095                 db  0Bh
.eh_frame_hdr:000000000001D096                 db    0
.eh_frame_hdr:000000000001D097                 db    0
.eh_frame_hdr:000000000001D098                 db 0DCh
.eh_frame_hdr:000000000001D099                 db  8Dh
.eh_frame_hdr:000000000001D09A                 db 0FEh
.eh_frame_hdr:000000000001D09B                 db 0FFh
.eh_frame_hdr:000000000001D09C                 db  6Ch ; l
.eh_frame_hdr:000000000001D09D                 db  0Bh
.eh_frame_hdr:000000000001D09E                 db    0
.eh_frame_hdr:000000000001D09F                 db    0
.eh_frame_hdr:000000000001D0A0                 db  2Ch ; ,
.eh_frame_hdr:000000000001D0A1                 db  8Eh
.eh_frame_hdr:000000000001D0A2                 db 0FEh
.eh_frame_hdr:000000000001D0A3                 db 0FFh
.eh_frame_hdr:000000000001D0A4                 db  94h
.eh_frame_hdr:000000000001D0A5                 db  0Bh
.eh_frame_hdr:000000000001D0A6                 db    0
.eh_frame_hdr:000000000001D0A7                 db    0
.eh_frame_hdr:000000000001D0A8                 db 0DCh
.eh_frame_hdr:000000000001D0A9                 db  8Fh
.eh_frame_hdr:000000000001D0AA                 db 0FEh
.eh_frame_hdr:000000000001D0AB                 db 0FFh
.eh_frame_hdr:000000000001D0AC                 db 0E4h
.eh_frame_hdr:000000000001D0AD                 db  0Bh
.eh_frame_hdr:000000000001D0AE                 db    0
.eh_frame_hdr:000000000001D0AF                 db    0
.eh_frame_hdr:000000000001D0B0                 db  7Ch ; |
.eh_frame_hdr:000000000001D0B1                 db  90h
.eh_frame_hdr:000000000001D0B2                 db 0FEh
.eh_frame_hdr:000000000001D0B3                 db 0FFh
.eh_frame_hdr:000000000001D0B4                 db  18h
.eh_frame_hdr:000000000001D0B5                 db  0Ch
.eh_frame_hdr:000000000001D0B6                 db    0
.eh_frame_hdr:000000000001D0B7                 db    0
.eh_frame_hdr:000000000001D0B8                 db 0ECh
.eh_frame_hdr:000000000001D0B9                 db  99h
.eh_frame_hdr:000000000001D0BA                 db 0FEh
.eh_frame_hdr:000000000001D0BB                 db 0FFh
.eh_frame_hdr:000000000001D0BC                 db  64h ; d
.eh_frame_hdr:000000000001D0BD                 db  0Ch
.eh_frame_hdr:000000000001D0BE                 db    0
.eh_frame_hdr:000000000001D0BF                 db    0
.eh_frame_hdr:000000000001D0C0                 db  7Ch ; |
.eh_frame_hdr:000000000001D0C1                 db  9Ah
.eh_frame_hdr:000000000001D0C2                 db 0FEh
.eh_frame_hdr:000000000001D0C3                 db 0FFh
.eh_frame_hdr:000000000001D0C4                 db  9Ch
.eh_frame_hdr:000000000001D0C5                 db  0Ch
.eh_frame_hdr:000000000001D0C6                 db    0
.eh_frame_hdr:000000000001D0C7                 db    0
.eh_frame_hdr:000000000001D0C8                 db  6Ch ; l
.eh_frame_hdr:000000000001D0C9                 db  9Dh
.eh_frame_hdr:000000000001D0CA                 db 0FEh
.eh_frame_hdr:000000000001D0CB                 db 0FFh
.eh_frame_hdr:000000000001D0CC                 db 0ECh
.eh_frame_hdr:000000000001D0CD                 db  0Ch
.eh_frame_hdr:000000000001D0CE                 db    0
.eh_frame_hdr:000000000001D0CF                 db    0
.eh_frame_hdr:000000000001D0D0                 db  5Ch ; \
.eh_frame_hdr:000000000001D0D1                 db  9Eh
.eh_frame_hdr:000000000001D0D2                 db 0FEh
.eh_frame_hdr:000000000001D0D3                 db 0FFh
.eh_frame_hdr:000000000001D0D4                 db  30h ; 0
.eh_frame_hdr:000000000001D0D5                 db  0Dh
.eh_frame_hdr:000000000001D0D6                 db    0
.eh_frame_hdr:000000000001D0D7                 db    0
.eh_frame_hdr:000000000001D0D8                 db  9Ch
.eh_frame_hdr:000000000001D0D9                 db 0B0h
.eh_frame_hdr:000000000001D0DA                 db 0FEh
.eh_frame_hdr:000000000001D0DB                 db 0FFh
.eh_frame_hdr:000000000001D0DC                 db 0A8h
.eh_frame_hdr:000000000001D0DD                 db  0Dh
.eh_frame_hdr:000000000001D0DE                 db    0
.eh_frame_hdr:000000000001D0DF                 db    0
.eh_frame_hdr:000000000001D0E0                 db  4Ch ; L
.eh_frame_hdr:000000000001D0E1                 db 0B2h
.eh_frame_hdr:000000000001D0E2                 db 0FEh
.eh_frame_hdr:000000000001D0E3                 db 0FFh
.eh_frame_hdr:000000000001D0E4                 db  14h
.eh_frame_hdr:000000000001D0E5                 db  0Eh
.eh_frame_hdr:000000000001D0E6                 db    0
.eh_frame_hdr:000000000001D0E7                 db    0
.eh_frame_hdr:000000000001D0E8                 db  8Ch
.eh_frame_hdr:000000000001D0E9                 db 0B2h
.eh_frame_hdr:000000000001D0EA                 db 0FEh
.eh_frame_hdr:000000000001D0EB                 db 0FFh
.eh_frame_hdr:000000000001D0EC                 db  40h ; @
.eh_frame_hdr:000000000001D0ED                 db  0Eh
.eh_frame_hdr:000000000001D0EE                 db    0
.eh_frame_hdr:000000000001D0EF                 db    0
.eh_frame_hdr:000000000001D0F0                 db 0ACh
.eh_frame_hdr:000000000001D0F1                 db 0B2h
.eh_frame_hdr:000000000001D0F2                 db 0FEh
.eh_frame_hdr:000000000001D0F3                 db 0FFh
.eh_frame_hdr:000000000001D0F4                 db  54h ; T
.eh_frame_hdr:000000000001D0F5                 db  0Eh
.eh_frame_hdr:000000000001D0F6                 db    0
.eh_frame_hdr:000000000001D0F7                 db    0
.eh_frame_hdr:000000000001D0F8                 db 0CCh
.eh_frame_hdr:000000000001D0F9                 db 0B2h
.eh_frame_hdr:000000000001D0FA                 db 0FEh
.eh_frame_hdr:000000000001D0FB                 db 0FFh
.eh_frame_hdr:000000000001D0FC                 db  68h ; h
.eh_frame_hdr:000000000001D0FD                 db  0Eh
.eh_frame_hdr:000000000001D0FE                 db    0
.eh_frame_hdr:000000000001D0FF                 db    0
.eh_frame_hdr:000000000001D100                 db  0Ch
.eh_frame_hdr:000000000001D101                 db 0B3h
.eh_frame_hdr:000000000001D102                 db 0FEh
.eh_frame_hdr:000000000001D103                 db 0FFh
.eh_frame_hdr:000000000001D104                 db  7Ch ; |
.eh_frame_hdr:000000000001D105                 db  0Eh
.eh_frame_hdr:000000000001D106                 db    0
.eh_frame_hdr:000000000001D107                 db    0
.eh_frame_hdr:000000000001D108                 db  2Ch ; ,
.eh_frame_hdr:000000000001D109                 db 0B3h
.eh_frame_hdr:000000000001D10A                 db 0FEh
.eh_frame_hdr:000000000001D10B                 db 0FFh
.eh_frame_hdr:000000000001D10C                 db  90h
.eh_frame_hdr:000000000001D10D                 db  0Eh
.eh_frame_hdr:000000000001D10E                 db    0
.eh_frame_hdr:000000000001D10F                 db    0
.eh_frame_hdr:000000000001D110                 db  5Ch ; \
.eh_frame_hdr:000000000001D111                 db 0B3h
.eh_frame_hdr:000000000001D112                 db 0FEh
.eh_frame_hdr:000000000001D113                 db 0FFh
.eh_frame_hdr:000000000001D114                 db 0A4h
.eh_frame_hdr:000000000001D115                 db  0Eh
.eh_frame_hdr:000000000001D116                 db    0
.eh_frame_hdr:000000000001D117                 db    0
.eh_frame_hdr:000000000001D118                 db 0DCh
.eh_frame_hdr:000000000001D119                 db 0B3h
.eh_frame_hdr:000000000001D11A                 db 0FEh
.eh_frame_hdr:000000000001D11B                 db 0FFh
.eh_frame_hdr:000000000001D11C                 db 0F8h
.eh_frame_hdr:000000000001D11D                 db  0Eh
.eh_frame_hdr:000000000001D11E                 db    0
.eh_frame_hdr:000000000001D11F                 db    0
.eh_frame_hdr:000000000001D120                 db 0CCh
.eh_frame_hdr:000000000001D121                 db 0B4h
.eh_frame_hdr:000000000001D122                 db 0FEh
.eh_frame_hdr:000000000001D123                 db 0FFh
.eh_frame_hdr:000000000001D124                 db  64h ; d
.eh_frame_hdr:000000000001D125                 db  0Fh
.eh_frame_hdr:000000000001D126                 db    0
.eh_frame_hdr:000000000001D127                 db    0
.eh_frame_hdr:000000000001D128                 db 0DCh
.eh_frame_hdr:000000000001D129                 db 0B4h
.eh_frame_hdr:000000000001D12A                 db 0FEh
.eh_frame_hdr:000000000001D12B                 db 0FFh
.eh_frame_hdr:000000000001D12C                 db  78h ; x
.eh_frame_hdr:000000000001D12D                 db  0Fh
.eh_frame_hdr:000000000001D12E                 db    0
.eh_frame_hdr:000000000001D12F                 db    0
.eh_frame_hdr:000000000001D130                 db  7Ch ; |
.eh_frame_hdr:000000000001D131                 db 0B5h
.eh_frame_hdr:000000000001D132                 db 0FEh
.eh_frame_hdr:000000000001D133                 db 0FFh
.eh_frame_hdr:000000000001D134                 db 0A4h
.eh_frame_hdr:000000000001D135                 db  0Fh
.eh_frame_hdr:000000000001D136                 db    0
.eh_frame_hdr:000000000001D137                 db    0
.eh_frame_hdr:000000000001D138                 db  9Ch
.eh_frame_hdr:000000000001D139                 db 0B5h
.eh_frame_hdr:000000000001D13A                 db 0FEh
.eh_frame_hdr:000000000001D13B                 db 0FFh
.eh_frame_hdr:000000000001D13C                 db 0B8h
.eh_frame_hdr:000000000001D13D                 db  0Fh
.eh_frame_hdr:000000000001D13E                 db    0
.eh_frame_hdr:000000000001D13F                 db    0
.eh_frame_hdr:000000000001D140                 db 0ACh
.eh_frame_hdr:000000000001D141                 db 0B5h
.eh_frame_hdr:000000000001D142                 db 0FEh
.eh_frame_hdr:000000000001D143                 db 0FFh
.eh_frame_hdr:000000000001D144                 db 0CCh
.eh_frame_hdr:000000000001D145                 db  0Fh
.eh_frame_hdr:000000000001D146                 db    0
.eh_frame_hdr:000000000001D147                 db    0
.eh_frame_hdr:000000000001D148                 db 0CCh
.eh_frame_hdr:000000000001D149                 db 0B5h
.eh_frame_hdr:000000000001D14A                 db 0FEh
.eh_frame_hdr:000000000001D14B                 db 0FFh
.eh_frame_hdr:000000000001D14C                 db 0E0h
.eh_frame_hdr:000000000001D14D                 db  0Fh
.eh_frame_hdr:000000000001D14E                 db    0
.eh_frame_hdr:000000000001D14F                 db    0
.eh_frame_hdr:000000000001D150                 db 0ECh
.eh_frame_hdr:000000000001D151                 db 0B5h
.eh_frame_hdr:000000000001D152                 db 0FEh
.eh_frame_hdr:000000000001D153                 db 0FFh
.eh_frame_hdr:000000000001D154                 db 0F4h
.eh_frame_hdr:000000000001D155                 db  0Fh
.eh_frame_hdr:000000000001D156                 db    0
.eh_frame_hdr:000000000001D157                 db    0
.eh_frame_hdr:000000000001D158                 db  7Ch ; |
.eh_frame_hdr:000000000001D159                 db 0B6h
.eh_frame_hdr:000000000001D15A                 db 0FEh
.eh_frame_hdr:000000000001D15B                 db 0FFh
.eh_frame_hdr:000000000001D15C                 db  10h
.eh_frame_hdr:000000000001D15D                 db  10h
.eh_frame_hdr:000000000001D15E                 db    0
.eh_frame_hdr:000000000001D15F                 db    0
.eh_frame_hdr:000000000001D160                 db  0Ch
.eh_frame_hdr:000000000001D161                 db 0B7h
.eh_frame_hdr:000000000001D162                 db 0FEh
.eh_frame_hdr:000000000001D163                 db 0FFh
.eh_frame_hdr:000000000001D164                 db  2Ch ; ,
.eh_frame_hdr:000000000001D165                 db  10h
.eh_frame_hdr:000000000001D166                 db    0
.eh_frame_hdr:000000000001D167                 db    0
.eh_frame_hdr:000000000001D168                 db  1Ch
.eh_frame_hdr:000000000001D169                 db 0B7h
.eh_frame_hdr:000000000001D16A                 db 0FEh
.eh_frame_hdr:000000000001D16B                 db 0FFh
.eh_frame_hdr:000000000001D16C                 db  40h ; @
.eh_frame_hdr:000000000001D16D                 db  10h
.eh_frame_hdr:000000000001D16E                 db    0
.eh_frame_hdr:000000000001D16F                 db    0
.eh_frame_hdr:000000000001D170                 db  2Ch ; ,
.eh_frame_hdr:000000000001D171                 db 0B7h
.eh_frame_hdr:000000000001D172                 db 0FEh
.eh_frame_hdr:000000000001D173                 db 0FFh
.eh_frame_hdr:000000000001D174                 db  54h ; T
.eh_frame_hdr:000000000001D175                 db  10h
.eh_frame_hdr:000000000001D176                 db    0
.eh_frame_hdr:000000000001D177                 db    0
.eh_frame_hdr:000000000001D178                 db 0CCh
.eh_frame_hdr:000000000001D179                 db 0B7h
.eh_frame_hdr:000000000001D17A                 db 0FEh
.eh_frame_hdr:000000000001D17B                 db 0FFh
.eh_frame_hdr:000000000001D17C                 db  70h ; p
.eh_frame_hdr:000000000001D17D                 db  10h
.eh_frame_hdr:000000000001D17E                 db    0
.eh_frame_hdr:000000000001D17F                 db    0
.eh_frame_hdr:000000000001D180                 db 0DCh
.eh_frame_hdr:000000000001D181                 db 0B7h
.eh_frame_hdr:000000000001D182                 db 0FEh
.eh_frame_hdr:000000000001D183                 db 0FFh
.eh_frame_hdr:000000000001D184                 db  84h
.eh_frame_hdr:000000000001D185                 db  10h
.eh_frame_hdr:000000000001D186                 db    0
.eh_frame_hdr:000000000001D187                 db    0
.eh_frame_hdr:000000000001D188                 db 0FCh
.eh_frame_hdr:000000000001D189                 db 0B7h
.eh_frame_hdr:000000000001D18A                 db 0FEh
.eh_frame_hdr:000000000001D18B                 db 0FFh
.eh_frame_hdr:000000000001D18C                 db  98h
.eh_frame_hdr:000000000001D18D                 db  10h
.eh_frame_hdr:000000000001D18E                 db    0
.eh_frame_hdr:000000000001D18F                 db    0
.eh_frame_hdr:000000000001D190                 db  0Ch
.eh_frame_hdr:000000000001D191                 db 0B8h
.eh_frame_hdr:000000000001D192                 db 0FEh
.eh_frame_hdr:000000000001D193                 db 0FFh
.eh_frame_hdr:000000000001D194                 db 0ACh
.eh_frame_hdr:000000000001D195                 db  10h
.eh_frame_hdr:000000000001D196                 db    0
.eh_frame_hdr:000000000001D197                 db    0
.eh_frame_hdr:000000000001D198                 db  9Ch
.eh_frame_hdr:000000000001D199                 db 0B8h
.eh_frame_hdr:000000000001D19A                 db 0FEh
.eh_frame_hdr:000000000001D19B                 db 0FFh
.eh_frame_hdr:000000000001D19C                 db 0C8h
.eh_frame_hdr:000000000001D19D                 db  10h
.eh_frame_hdr:000000000001D19E                 db    0
.eh_frame_hdr:000000000001D19F                 db    0
.eh_frame_hdr:000000000001D1A0                 db  3Ch ; <
.eh_frame_hdr:000000000001D1A1                 db 0B9h
.eh_frame_hdr:000000000001D1A2                 db 0FEh
.eh_frame_hdr:000000000001D1A3                 db 0FFh
.eh_frame_hdr:000000000001D1A4                 db 0E4h
.eh_frame_hdr:000000000001D1A5                 db  10h
.eh_frame_hdr:000000000001D1A6                 db    0
.eh_frame_hdr:000000000001D1A7                 db    0
.eh_frame_hdr:000000000001D1A8                 db  4Ch ; L
.eh_frame_hdr:000000000001D1A9                 db 0B9h
.eh_frame_hdr:000000000001D1AA                 db 0FEh
.eh_frame_hdr:000000000001D1AB                 db 0FFh
.eh_frame_hdr:000000000001D1AC                 db 0F8h
.eh_frame_hdr:000000000001D1AD                 db  10h
.eh_frame_hdr:000000000001D1AE                 db    0
.eh_frame_hdr:000000000001D1AF                 db    0
.eh_frame_hdr:000000000001D1B0                 db  6Ch ; l
.eh_frame_hdr:000000000001D1B1                 db 0B9h
.eh_frame_hdr:000000000001D1B2                 db 0FEh
.eh_frame_hdr:000000000001D1B3                 db 0FFh
.eh_frame_hdr:000000000001D1B4                 db  0Ch
.eh_frame_hdr:000000000001D1B5                 db  11h
.eh_frame_hdr:000000000001D1B6                 db    0
.eh_frame_hdr:000000000001D1B7                 db    0
.eh_frame_hdr:000000000001D1B8                 db  8Ch
.eh_frame_hdr:000000000001D1B9                 db 0B9h
.eh_frame_hdr:000000000001D1BA                 db 0FEh
.eh_frame_hdr:000000000001D1BB                 db 0FFh
.eh_frame_hdr:000000000001D1BC                 db  20h
.eh_frame_hdr:000000000001D1BD                 db  11h
.eh_frame_hdr:000000000001D1BE                 db    0
.eh_frame_hdr:000000000001D1BF                 db    0
.eh_frame_hdr:000000000001D1C0                 db  9Ch
.eh_frame_hdr:000000000001D1C1                 db 0B9h
.eh_frame_hdr:000000000001D1C2                 db 0FEh
.eh_frame_hdr:000000000001D1C3                 db 0FFh
.eh_frame_hdr:000000000001D1C4                 db  34h ; 4
.eh_frame_hdr:000000000001D1C5                 db  11h
.eh_frame_hdr:000000000001D1C6                 db    0
.eh_frame_hdr:000000000001D1C7                 db    0
.eh_frame_hdr:000000000001D1C8                 db 0BCh
.eh_frame_hdr:000000000001D1C9                 db 0B9h
.eh_frame_hdr:000000000001D1CA                 db 0FEh
.eh_frame_hdr:000000000001D1CB                 db 0FFh
.eh_frame_hdr:000000000001D1CC                 db  48h ; H
.eh_frame_hdr:000000000001D1CD                 db  11h
.eh_frame_hdr:000000000001D1CE                 db    0
.eh_frame_hdr:000000000001D1CF                 db    0
.eh_frame_hdr:000000000001D1D0                 db 0DCh
.eh_frame_hdr:000000000001D1D1                 db 0B9h
.eh_frame_hdr:000000000001D1D2                 db 0FEh
.eh_frame_hdr:000000000001D1D3                 db 0FFh
.eh_frame_hdr:000000000001D1D4                 db  5Ch ; \
.eh_frame_hdr:000000000001D1D5                 db  11h
.eh_frame_hdr:000000000001D1D6                 db    0
.eh_frame_hdr:000000000001D1D7                 db    0
.eh_frame_hdr:000000000001D1D8                 db 0FCh
.eh_frame_hdr:000000000001D1D9                 db 0B9h
.eh_frame_hdr:000000000001D1DA                 db 0FEh
.eh_frame_hdr:000000000001D1DB                 db 0FFh
.eh_frame_hdr:000000000001D1DC                 db  74h ; t
.eh_frame_hdr:000000000001D1DD                 db  11h
.eh_frame_hdr:000000000001D1DE                 db    0
.eh_frame_hdr:000000000001D1DF                 db    0
.eh_frame_hdr:000000000001D1E0                 db 0DCh
.eh_frame_hdr:000000000001D1E1                 db 0BBh
.eh_frame_hdr:000000000001D1E2                 db 0FEh
.eh_frame_hdr:000000000001D1E3                 db 0FFh
.eh_frame_hdr:000000000001D1E4                 db 0C4h
.eh_frame_hdr:000000000001D1E5                 db  11h
.eh_frame_hdr:000000000001D1E6                 db    0
.eh_frame_hdr:000000000001D1E7                 db    0
.eh_frame_hdr:000000000001D1E8                 db  5Ch ; \
.eh_frame_hdr:000000000001D1E9                 db 0BCh
.eh_frame_hdr:000000000001D1EA                 db 0FEh
.eh_frame_hdr:000000000001D1EB                 db 0FFh
.eh_frame_hdr:000000000001D1EC                 db    0
.eh_frame_hdr:000000000001D1ED                 db  12h
.eh_frame_hdr:000000000001D1EE                 db    0
.eh_frame_hdr:000000000001D1EF                 db    0
.eh_frame_hdr:000000000001D1F0                 db  6Ch ; l
.eh_frame_hdr:000000000001D1F1                 db 0BCh
.eh_frame_hdr:000000000001D1F2                 db 0FEh
.eh_frame_hdr:000000000001D1F3                 db 0FFh
.eh_frame_hdr:000000000001D1F4                 db  14h
.eh_frame_hdr:000000000001D1F5                 db  12h
.eh_frame_hdr:000000000001D1F6                 db    0
.eh_frame_hdr:000000000001D1F7                 db    0
.eh_frame_hdr:000000000001D1F8                 db  7Ch ; |
.eh_frame_hdr:000000000001D1F9                 db 0BCh
.eh_frame_hdr:000000000001D1FA                 db 0FEh
.eh_frame_hdr:000000000001D1FB                 db 0FFh
.eh_frame_hdr:000000000001D1FC                 db  2Ch ; ,
.eh_frame_hdr:000000000001D1FD                 db  12h
.eh_frame_hdr:000000000001D1FE                 db    0
.eh_frame_hdr:000000000001D1FF                 db    0
.eh_frame_hdr:000000000001D200                 db 0BCh
.eh_frame_hdr:000000000001D201                 db 0BCh
.eh_frame_hdr:000000000001D202                 db 0FEh
.eh_frame_hdr:000000000001D203                 db 0FFh
.eh_frame_hdr:000000000001D204                 db  68h ; h
.eh_frame_hdr:000000000001D205                 db  12h
.eh_frame_hdr:000000000001D206                 db    0
.eh_frame_hdr:000000000001D207                 db    0
.eh_frame_hdr:000000000001D208                 db 0ECh
.eh_frame_hdr:000000000001D209                 db 0C2h
.eh_frame_hdr:000000000001D20A                 db 0FEh
.eh_frame_hdr:000000000001D20B                 db 0FFh
.eh_frame_hdr:000000000001D20C                 db 0BCh
.eh_frame_hdr:000000000001D20D                 db  12h
.eh_frame_hdr:000000000001D20E                 db    0
.eh_frame_hdr:000000000001D20F                 db    0
.eh_frame_hdr:000000000001D210                 db  0Ch
.eh_frame_hdr:000000000001D211                 db 0C7h
.eh_frame_hdr:000000000001D212                 db 0FEh
.eh_frame_hdr:000000000001D213                 db 0FFh
.eh_frame_hdr:000000000001D214                 db 0D0h
.eh_frame_hdr:000000000001D215                 db  13h
.eh_frame_hdr:000000000001D216                 db    0
.eh_frame_hdr:000000000001D217                 db    0
.eh_frame_hdr:000000000001D218                 db  2Ch ; ,
.eh_frame_hdr:000000000001D219                 db 0C7h
.eh_frame_hdr:000000000001D21A                 db 0FEh
.eh_frame_hdr:000000000001D21B                 db 0FFh
.eh_frame_hdr:000000000001D21C                 db 0E4h
.eh_frame_hdr:000000000001D21D                 db  13h
.eh_frame_hdr:000000000001D21E                 db    0
.eh_frame_hdr:000000000001D21F                 db    0
.eh_frame_hdr:000000000001D220                 db 0ACh
.eh_frame_hdr:000000000001D221                 db 0C7h
.eh_frame_hdr:000000000001D222                 db 0FEh
.eh_frame_hdr:000000000001D223                 db 0FFh
.eh_frame_hdr:000000000001D224                 db    0
.eh_frame_hdr:000000000001D225                 db  14h
.eh_frame_hdr:000000000001D226                 db    0
.eh_frame_hdr:000000000001D227                 db    0
.eh_frame_hdr:000000000001D228                 db  8Ch
.eh_frame_hdr:000000000001D229                 db 0C8h
.eh_frame_hdr:000000000001D22A                 db 0FEh
.eh_frame_hdr:000000000001D22B                 db 0FFh
.eh_frame_hdr:000000000001D22C                 db  2Ch ; ,
.eh_frame_hdr:000000000001D22D                 db  14h
.eh_frame_hdr:000000000001D22E                 db    0
.eh_frame_hdr:000000000001D22F                 db    0
.eh_frame_hdr:000000000001D230                 db  0Ch
.eh_frame_hdr:000000000001D231                 db 0C9h
.eh_frame_hdr:000000000001D232                 db 0FEh
.eh_frame_hdr:000000000001D233                 db 0FFh
.eh_frame_hdr:000000000001D234                 db  4Ch ; L
.eh_frame_hdr:000000000001D235                 db  14h
.eh_frame_hdr:000000000001D236                 db    0
.eh_frame_hdr:000000000001D237                 db    0
.eh_frame_hdr:000000000001D238                 db  2Ch ; ,
.eh_frame_hdr:000000000001D239                 db 0C9h
.eh_frame_hdr:000000000001D23A                 db 0FEh
.eh_frame_hdr:000000000001D23B                 db 0FFh
.eh_frame_hdr:000000000001D23C                 db  68h ; h
.eh_frame_hdr:000000000001D23D                 db  14h
.eh_frame_hdr:000000000001D23E                 db    0
.eh_frame_hdr:000000000001D23F                 db    0
.eh_frame_hdr:000000000001D240                 db  5Ch ; \
.eh_frame_hdr:000000000001D241                 db 0C9h
.eh_frame_hdr:000000000001D242                 db 0FEh
.eh_frame_hdr:000000000001D243                 db 0FFh
.eh_frame_hdr:000000000001D244                 db  7Ch ; |
.eh_frame_hdr:000000000001D245                 db  14h
.eh_frame_hdr:000000000001D246                 db    0
.eh_frame_hdr:000000000001D247                 db    0
.eh_frame_hdr:000000000001D248                 db  6Ch ; l
.eh_frame_hdr:000000000001D249                 db 0C9h
.eh_frame_hdr:000000000001D24A                 db 0FEh
.eh_frame_hdr:000000000001D24B                 db 0FFh
.eh_frame_hdr:000000000001D24C                 db  90h
.eh_frame_hdr:000000000001D24D                 db  14h
.eh_frame_hdr:000000000001D24E                 db    0
.eh_frame_hdr:000000000001D24F                 db    0
.eh_frame_hdr:000000000001D250                 db 0ACh
.eh_frame_hdr:000000000001D251                 db 0C9h
.eh_frame_hdr:000000000001D252                 db 0FEh
.eh_frame_hdr:000000000001D253                 db 0FFh
.eh_frame_hdr:000000000001D254                 db 0B4h
.eh_frame_hdr:000000000001D255                 db  14h
.eh_frame_hdr:000000000001D256                 db    0
.eh_frame_hdr:000000000001D257                 db    0
.eh_frame_hdr:000000000001D258                 db 0DCh
.eh_frame_hdr:000000000001D259                 db 0C9h
.eh_frame_hdr:000000000001D25A                 db 0FEh
.eh_frame_hdr:000000000001D25B                 db 0FFh
.eh_frame_hdr:000000000001D25C                 db 0C8h
.eh_frame_hdr:000000000001D25D                 db  14h
.eh_frame_hdr:000000000001D25E                 db    0
.eh_frame_hdr:000000000001D25F                 db    0
.eh_frame_hdr:000000000001D260                 db  6Ch ; l
.eh_frame_hdr:000000000001D261                 db 0CAh
.eh_frame_hdr:000000000001D262                 db 0FEh
.eh_frame_hdr:000000000001D263                 db 0FFh
.eh_frame_hdr:000000000001D264                 db 0E0h
.eh_frame_hdr:000000000001D265                 db  14h
.eh_frame_hdr:000000000001D266                 db    0
.eh_frame_hdr:000000000001D267                 db    0
.eh_frame_hdr:000000000001D268                 db 0BCh
.eh_frame_hdr:000000000001D269                 db 0CAh
.eh_frame_hdr:000000000001D26A                 db 0FEh
.eh_frame_hdr:000000000001D26B                 db 0FFh
.eh_frame_hdr:000000000001D26C                 db 0F8h
.eh_frame_hdr:000000000001D26D                 db  14h
.eh_frame_hdr:000000000001D26E                 db    0
.eh_frame_hdr:000000000001D26F                 db    0
.eh_frame_hdr:000000000001D270                 db 0DCh
.eh_frame_hdr:000000000001D271                 db 0CAh
.eh_frame_hdr:000000000001D272                 db 0FEh
.eh_frame_hdr:000000000001D273                 db 0FFh
.eh_frame_hdr:000000000001D274                 db  14h
.eh_frame_hdr:000000000001D275                 db  15h
.eh_frame_hdr:000000000001D276                 db    0
.eh_frame_hdr:000000000001D277                 db    0
.eh_frame_hdr:000000000001D278                 db  0Ch
.eh_frame_hdr:000000000001D279                 db 0CBh
.eh_frame_hdr:000000000001D27A                 db 0FEh
.eh_frame_hdr:000000000001D27B                 db 0FFh
.eh_frame_hdr:000000000001D27C                 db  30h ; 0
.eh_frame_hdr:000000000001D27D                 db  15h
.eh_frame_hdr:000000000001D27E                 db    0
.eh_frame_hdr:000000000001D27F                 db    0
.eh_frame_hdr:000000000001D280                 db  3Ch ; <
.eh_frame_hdr:000000000001D281                 db 0CBh
.eh_frame_hdr:000000000001D282                 db 0FEh
.eh_frame_hdr:000000000001D283                 db 0FFh
.eh_frame_hdr:000000000001D284                 db  58h ; X
.eh_frame_hdr:000000000001D285                 db  15h
.eh_frame_hdr:000000000001D286                 db    0
.eh_frame_hdr:000000000001D287                 db    0
.eh_frame_hdr:000000000001D288                 db  5Ch ; \
.eh_frame_hdr:000000000001D289                 db 0CBh
.eh_frame_hdr:000000000001D28A                 db 0FEh
.eh_frame_hdr:000000000001D28B                 db 0FFh
.eh_frame_hdr:000000000001D28C                 db  74h ; t
.eh_frame_hdr:000000000001D28D                 db  15h
.eh_frame_hdr:000000000001D28E                 db    0
.eh_frame_hdr:000000000001D28F                 db    0
.eh_frame_hdr:000000000001D290                 db  9Ch
.eh_frame_hdr:000000000001D291                 db 0CBh
.eh_frame_hdr:000000000001D292                 db 0FEh
.eh_frame_hdr:000000000001D293                 db 0FFh
.eh_frame_hdr:000000000001D294                 db  8Ch
.eh_frame_hdr:000000000001D295                 db  15h
.eh_frame_hdr:000000000001D296                 db    0
.eh_frame_hdr:000000000001D297                 db    0
.eh_frame_hdr:000000000001D298                 db 0BCh
.eh_frame_hdr:000000000001D299                 db 0CBh
.eh_frame_hdr:000000000001D29A                 db 0FEh
.eh_frame_hdr:000000000001D29B                 db 0FFh
.eh_frame_hdr:000000000001D29C                 db 0A8h
.eh_frame_hdr:000000000001D29D                 db  15h
.eh_frame_hdr:000000000001D29E                 db    0
.eh_frame_hdr:000000000001D29F                 db    0
.eh_frame_hdr:000000000001D2A0                 db 0ECh
.eh_frame_hdr:000000000001D2A1                 db 0CBh
.eh_frame_hdr:000000000001D2A2                 db 0FEh
.eh_frame_hdr:000000000001D2A3                 db 0FFh
.eh_frame_hdr:000000000001D2A4                 db 0C4h
.eh_frame_hdr:000000000001D2A5                 db  15h
.eh_frame_hdr:000000000001D2A6                 db    0
.eh_frame_hdr:000000000001D2A7                 db    0
.eh_frame_hdr:000000000001D2A8                 db  1Ch
.eh_frame_hdr:000000000001D2A9                 db 0CCh
.eh_frame_hdr:000000000001D2AA                 db 0FEh
.eh_frame_hdr:000000000001D2AB                 db 0FFh
.eh_frame_hdr:000000000001D2AC                 db 0E4h
.eh_frame_hdr:000000000001D2AD                 db  15h
.eh_frame_hdr:000000000001D2AE                 db    0
.eh_frame_hdr:000000000001D2AF                 db    0
.eh_frame_hdr:000000000001D2B0                 db 0DCh
.eh_frame_hdr:000000000001D2B1                 db 0D2h
.eh_frame_hdr:000000000001D2B2                 db 0FEh
.eh_frame_hdr:000000000001D2B3                 db 0FFh
.eh_frame_hdr:000000000001D2B4                 db  34h ; 4
.eh_frame_hdr:000000000001D2B5                 db  16h
.eh_frame_hdr:000000000001D2B6                 db    0
.eh_frame_hdr:000000000001D2B7                 db    0
.eh_frame_hdr:000000000001D2B8                 db  5Ch ; \
.eh_frame_hdr:000000000001D2B9                 db 0D3h
.eh_frame_hdr:000000000001D2BA                 db 0FEh
.eh_frame_hdr:000000000001D2BB                 db 0FFh
.eh_frame_hdr:000000000001D2BC                 db  6Ch ; l
.eh_frame_hdr:000000000001D2BD                 db  16h
.eh_frame_hdr:000000000001D2BE                 db    0
.eh_frame_hdr:000000000001D2BF                 db    0
.eh_frame_hdr:000000000001D2C0                 db  9Ch
.eh_frame_hdr:000000000001D2C1                 db 0D3h
.eh_frame_hdr:000000000001D2C2                 db 0FEh
.eh_frame_hdr:000000000001D2C3                 db 0FFh
.eh_frame_hdr:000000000001D2C4                 db  8Ch
.eh_frame_hdr:000000000001D2C5                 db  16h
.eh_frame_hdr:000000000001D2C6                 db    0
.eh_frame_hdr:000000000001D2C7                 db    0
.eh_frame_hdr:000000000001D2C8                 db 0FCh
.eh_frame_hdr:000000000001D2C9                 db 0D3h
.eh_frame_hdr:000000000001D2CA                 db 0FEh
.eh_frame_hdr:000000000001D2CB                 db 0FFh
.eh_frame_hdr:000000000001D2CC                 db 0BCh
.eh_frame_hdr:000000000001D2CD                 db  16h
.eh_frame_hdr:000000000001D2CE                 db    0
.eh_frame_hdr:000000000001D2CF                 db    0
.eh_frame_hdr:000000000001D2D0                 db  8Ch
.eh_frame_hdr:000000000001D2D1                 db 0D4h
.eh_frame_hdr:000000000001D2D2                 db 0FEh
.eh_frame_hdr:000000000001D2D3                 db 0FFh
.eh_frame_hdr:000000000001D2D4                 db 0FCh
.eh_frame_hdr:000000000001D2D5                 db  16h
.eh_frame_hdr:000000000001D2D6                 db    0
.eh_frame_hdr:000000000001D2D7                 db    0
.eh_frame_hdr:000000000001D2D8                 db 0BCh
.eh_frame_hdr:000000000001D2D9                 db 0D5h
.eh_frame_hdr:000000000001D2DA                 db 0FEh
.eh_frame_hdr:000000000001D2DB                 db 0FFh
.eh_frame_hdr:000000000001D2DC                 db  10h
.eh_frame_hdr:000000000001D2DD                 db  17h
.eh_frame_hdr:000000000001D2DE                 db    0
.eh_frame_hdr:000000000001D2DF                 db    0
.eh_frame_hdr:000000000001D2E0                 db 0DCh
.eh_frame_hdr:000000000001D2E1                 db 0D5h
.eh_frame_hdr:000000000001D2E2                 db 0FEh
.eh_frame_hdr:000000000001D2E3                 db 0FFh
.eh_frame_hdr:000000000001D2E4                 db  24h ; $
.eh_frame_hdr:000000000001D2E5                 db  17h
.eh_frame_hdr:000000000001D2E6                 db    0
.eh_frame_hdr:000000000001D2E7                 db    0
.eh_frame_hdr:000000000001D2E8                 db  0Ch
.eh_frame_hdr:000000000001D2E9                 db 0D8h
.eh_frame_hdr:000000000001D2EA                 db 0FEh
.eh_frame_hdr:000000000001D2EB                 db 0FFh
.eh_frame_hdr:000000000001D2EC                 db 0B8h
.eh_frame_hdr:000000000001D2ED                 db  17h
.eh_frame_hdr:000000000001D2EE                 db    0
.eh_frame_hdr:000000000001D2EF                 db    0
.eh_frame_hdr:000000000001D2F0                 db  7Ch ; |
.eh_frame_hdr:000000000001D2F1                 db 0D8h
.eh_frame_hdr:000000000001D2F2                 db 0FEh
.eh_frame_hdr:000000000001D2F3                 db 0FFh
.eh_frame_hdr:000000000001D2F4                 db 0CCh
.eh_frame_hdr:000000000001D2F5                 db  17h
.eh_frame_hdr:000000000001D2F6                 db    0
.eh_frame_hdr:000000000001D2F7                 db    0
.eh_frame_hdr:000000000001D2F8                 db 0ECh
.eh_frame_hdr:000000000001D2F9                 db 0D8h
.eh_frame_hdr:000000000001D2FA                 db 0FEh
.eh_frame_hdr:000000000001D2FB                 db 0FFh
.eh_frame_hdr:000000000001D2FC                 db 0F8h
.eh_frame_hdr:000000000001D2FD                 db  17h
.eh_frame_hdr:000000000001D2FE                 db    0
.eh_frame_hdr:000000000001D2FF                 db    0
.eh_frame_hdr:000000000001D300                 db  4Ch ; L
.eh_frame_hdr:000000000001D301                 db 0D9h
.eh_frame_hdr:000000000001D302                 db 0FEh
.eh_frame_hdr:000000000001D303                 db 0FFh
.eh_frame_hdr:000000000001D304                 db  24h ; $
.eh_frame_hdr:000000000001D305                 db  18h
.eh_frame_hdr:000000000001D306                 db    0
.eh_frame_hdr:000000000001D307                 db    0
.eh_frame_hdr:000000000001D308                 db 0ECh
.eh_frame_hdr:000000000001D309                 db 0D9h
.eh_frame_hdr:000000000001D30A                 db 0FEh
.eh_frame_hdr:000000000001D30B                 db 0FFh
.eh_frame_hdr:000000000001D30C                 db  58h ; X
.eh_frame_hdr:000000000001D30D                 db  18h
.eh_frame_hdr:000000000001D30E                 db    0
.eh_frame_hdr:000000000001D30F                 db    0
.eh_frame_hdr:000000000001D310                 db  5Ch ; \
.eh_frame_hdr:000000000001D311                 db 0DAh
.eh_frame_hdr:000000000001D312                 db 0FEh
.eh_frame_hdr:000000000001D313                 db 0FFh
.eh_frame_hdr:000000000001D314                 db  84h
.eh_frame_hdr:000000000001D315                 db  18h
.eh_frame_hdr:000000000001D316                 db    0
.eh_frame_hdr:000000000001D317                 db    0
.eh_frame_hdr:000000000001D318                 db  8Ch
.eh_frame_hdr:000000000001D319                 db 0DBh
.eh_frame_hdr:000000000001D31A                 db 0FEh
.eh_frame_hdr:000000000001D31B                 db 0FFh
.eh_frame_hdr:000000000001D31C                 db 0BCh
.eh_frame_hdr:000000000001D31D                 db  18h
.eh_frame_hdr:000000000001D31E                 db    0
.eh_frame_hdr:000000000001D31F                 db    0
.eh_frame_hdr:000000000001D320                 db  7Ch ; |
.eh_frame_hdr:000000000001D321                 db 0DCh
.eh_frame_hdr:000000000001D322                 db 0FEh
.eh_frame_hdr:000000000001D323                 db 0FFh
.eh_frame_hdr:000000000001D324                 db  0Ch
.eh_frame_hdr:000000000001D325                 db  19h
.eh_frame_hdr:000000000001D326                 db    0
.eh_frame_hdr:000000000001D327                 db    0
.eh_frame_hdr:000000000001D328                 db 0ECh
.eh_frame_hdr:000000000001D329                 db 0DCh
.eh_frame_hdr:000000000001D32A                 db 0FEh
.eh_frame_hdr:000000000001D32B                 db 0FFh
.eh_frame_hdr:000000000001D32C                 db  3Ch ; <
.eh_frame_hdr:000000000001D32D                 db  19h
.eh_frame_hdr:000000000001D32E                 db    0
.eh_frame_hdr:000000000001D32F                 db    0
.eh_frame_hdr:000000000001D330                 db 0BCh
.eh_frame_hdr:000000000001D331                 db 0DEh
.eh_frame_hdr:000000000001D332                 db 0FEh
.eh_frame_hdr:000000000001D333                 db 0FFh
.eh_frame_hdr:000000000001D334                 db  88h
.eh_frame_hdr:000000000001D335                 db  19h
.eh_frame_hdr:000000000001D336                 db    0
.eh_frame_hdr:000000000001D337                 db    0
.eh_frame_hdr:000000000001D338                 db 0DCh
.eh_frame_hdr:000000000001D339                 db 0E4h
.eh_frame_hdr:000000000001D33A                 db 0FEh
.eh_frame_hdr:000000000001D33B                 db 0FFh
.eh_frame_hdr:000000000001D33C                 db 0D4h
.eh_frame_hdr:000000000001D33D                 db  19h
.eh_frame_hdr:000000000001D33E                 db    0
.eh_frame_hdr:000000000001D33F                 db    0
.eh_frame_hdr:000000000001D340                 db  2Ch ; ,
.eh_frame_hdr:000000000001D341                 db 0E6h
.eh_frame_hdr:000000000001D342                 db 0FEh
.eh_frame_hdr:000000000001D343                 db 0FFh
.eh_frame_hdr:000000000001D344                 db  30h ; 0
.eh_frame_hdr:000000000001D345                 db  1Ah
.eh_frame_hdr:000000000001D346                 db    0
.eh_frame_hdr:000000000001D347                 db    0
.eh_frame_hdr:000000000001D348                 db 0BCh
.eh_frame_hdr:000000000001D349                 db 0E6h
.eh_frame_hdr:000000000001D34A                 db 0FEh
.eh_frame_hdr:000000000001D34B                 db 0FFh
.eh_frame_hdr:000000000001D34C                 db  5Ch ; \
.eh_frame_hdr:000000000001D34D                 db  1Ah
.eh_frame_hdr:000000000001D34E                 db    0
.eh_frame_hdr:000000000001D34F                 db    0
.eh_frame_hdr:000000000001D350                 db 0ECh
.eh_frame_hdr:000000000001D351                 db 0E6h
.eh_frame_hdr:000000000001D352                 db 0FEh
.eh_frame_hdr:000000000001D353                 db 0FFh
.eh_frame_hdr:000000000001D354                 db  78h ; x
.eh_frame_hdr:000000000001D355                 db  1Ah
.eh_frame_hdr:000000000001D356                 db    0
.eh_frame_hdr:000000000001D357                 db    0
.eh_frame_hdr:000000000001D358                 db  1Ch
.eh_frame_hdr:000000000001D359                 db 0E7h
.eh_frame_hdr:000000000001D35A                 db 0FEh
.eh_frame_hdr:000000000001D35B                 db 0FFh
.eh_frame_hdr:000000000001D35C                 db  8Ch
.eh_frame_hdr:000000000001D35D                 db  1Ah
.eh_frame_hdr:000000000001D35E                 db    0
.eh_frame_hdr:000000000001D35F                 db    0
.eh_frame_hdr:000000000001D360                 db  3Ch ; <
.eh_frame_hdr:000000000001D361                 db 0E7h
.eh_frame_hdr:000000000001D362                 db 0FEh
.eh_frame_hdr:000000000001D363                 db 0FFh
.eh_frame_hdr:000000000001D364                 db 0A4h
.eh_frame_hdr:000000000001D365                 db  1Ah
.eh_frame_hdr:000000000001D366                 db    0
.eh_frame_hdr:000000000001D367                 db    0
.eh_frame_hdr:000000000001D368                 db  0Ch
.eh_frame_hdr:000000000001D369                 db 0E9h
.eh_frame_hdr:000000000001D36A                 db 0FEh
.eh_frame_hdr:000000000001D36B                 db 0FFh
.eh_frame_hdr:000000000001D36C                 db 0F0h
.eh_frame_hdr:000000000001D36D                 db  1Ah
.eh_frame_hdr:000000000001D36E                 db    0
.eh_frame_hdr:000000000001D36F                 db    0
.eh_frame_hdr:000000000001D370                 db 0ACh
.eh_frame_hdr:000000000001D371                 db 0E9h
.eh_frame_hdr:000000000001D372                 db 0FEh
.eh_frame_hdr:000000000001D373                 db 0FFh
.eh_frame_hdr:000000000001D374                 db  28h ; (
.eh_frame_hdr:000000000001D375                 db  1Bh
.eh_frame_hdr:000000000001D376                 db    0
.eh_frame_hdr:000000000001D377                 db    0
.eh_frame_hdr:000000000001D378                 db  2Ch ; ,
.eh_frame_hdr:000000000001D379                 db 0ECh
.eh_frame_hdr:000000000001D37A                 db 0FEh
.eh_frame_hdr:000000000001D37B                 db 0FFh
.eh_frame_hdr:000000000001D37C                 db  74h ; t
.eh_frame_hdr:000000000001D37D                 db  1Bh
.eh_frame_hdr:000000000001D37E                 db    0
.eh_frame_hdr:000000000001D37F                 db    0
.eh_frame_hdr:000000000001D380                 db  8Ch
.eh_frame_hdr:000000000001D381                 db 0ECh
.eh_frame_hdr:000000000001D382                 db 0FEh
.eh_frame_hdr:000000000001D383                 db 0FFh
.eh_frame_hdr:000000000001D384                 db  90h
.eh_frame_hdr:000000000001D385                 db  1Bh
.eh_frame_hdr:000000000001D386                 db    0
.eh_frame_hdr:000000000001D387                 db    0
.eh_frame_hdr:000000000001D388                 db 0CCh
.eh_frame_hdr:000000000001D389                 db 0ECh
.eh_frame_hdr:000000000001D38A                 db 0FEh
.eh_frame_hdr:000000000001D38B                 db 0FFh
.eh_frame_hdr:000000000001D38C                 db 0B0h
.eh_frame_hdr:000000000001D38D                 db  1Bh
.eh_frame_hdr:000000000001D38E                 db    0
.eh_frame_hdr:000000000001D38F                 db    0
.eh_frame_hdr:000000000001D390                 db  2Ch ; ,
.eh_frame_hdr:000000000001D391                 db 0EEh
.eh_frame_hdr:000000000001D392                 db 0FEh
.eh_frame_hdr:000000000001D393                 db 0FFh
.eh_frame_hdr:000000000001D394                 db 0ECh
.eh_frame_hdr:000000000001D395                 db  1Bh
.eh_frame_hdr:000000000001D396                 db    0
.eh_frame_hdr:000000000001D397                 db    0
.eh_frame_hdr:000000000001D398                 db 0ECh
.eh_frame_hdr:000000000001D399                 db 0EEh
.eh_frame_hdr:000000000001D39A                 db 0FEh
.eh_frame_hdr:000000000001D39B                 db 0FFh
.eh_frame_hdr:000000000001D39C                 db  28h ; (
.eh_frame_hdr:000000000001D39D                 db  1Ch
.eh_frame_hdr:000000000001D39E                 db    0
.eh_frame_hdr:000000000001D39F                 db    0
.eh_frame_hdr:000000000001D3A0                 db  3Ch ; <
.eh_frame_hdr:000000000001D3A1                 db 0EFh
.eh_frame_hdr:000000000001D3A2                 db 0FEh
.eh_frame_hdr:000000000001D3A3                 db 0FFh
.eh_frame_hdr:000000000001D3A4                 db  3Ch ; <
.eh_frame_hdr:000000000001D3A5                 db  1Ch
.eh_frame_hdr:000000000001D3A6                 db    0
.eh_frame_hdr:000000000001D3A7                 db    0
.eh_frame_hdr:000000000001D3A8                 db  9Ch
.eh_frame_hdr:000000000001D3A9                 db 0EFh
.eh_frame_hdr:000000000001D3AA                 db 0FEh
.eh_frame_hdr:000000000001D3AB                 db 0FFh
.eh_frame_hdr:000000000001D3AC                 db  50h ; P
.eh_frame_hdr:000000000001D3AD                 db  1Ch
.eh_frame_hdr:000000000001D3AE                 db    0
.eh_frame_hdr:000000000001D3AF                 db    0
.eh_frame_hdr:000000000001D3B0                 db  1Ch
.eh_frame_hdr:000000000001D3B1                 db 0F0h
.eh_frame_hdr:000000000001D3B2                 db 0FEh
.eh_frame_hdr:000000000001D3B3                 db 0FFh
.eh_frame_hdr:000000000001D3B4                 db  64h ; d
.eh_frame_hdr:000000000001D3B5                 db  1Ch
.eh_frame_hdr:000000000001D3B6                 db    0
.eh_frame_hdr:000000000001D3B7                 db    0
.eh_frame_hdr:000000000001D3B8                 db  1Ch
.eh_frame_hdr:000000000001D3B9                 db 0F1h
.eh_frame_hdr:000000000001D3BA                 db 0FEh
.eh_frame_hdr:000000000001D3BB                 db 0FFh
.eh_frame_hdr:000000000001D3BC                 db 0C8h
.eh_frame_hdr:000000000001D3BD                 db  1Ch
.eh_frame_hdr:000000000001D3BE                 db    0
.eh_frame_hdr:000000000001D3BF                 db    0
.eh_frame_hdr:000000000001D3C0                 db  5Ch ; \
.eh_frame_hdr:000000000001D3C1                 db 0F1h
.eh_frame_hdr:000000000001D3C2                 db 0FEh
.eh_frame_hdr:000000000001D3C3                 db 0FFh
.eh_frame_hdr:000000000001D3C4                 db 0DCh
.eh_frame_hdr:000000000001D3C5                 db  1Ch
.eh_frame_hdr:000000000001D3C6                 db    0
.eh_frame_hdr:000000000001D3C7                 db    0
.eh_frame_hdr:000000000001D3C8                 db 0ECh
.eh_frame_hdr:000000000001D3C9                 db 0F1h
.eh_frame_hdr:000000000001D3CA                 db 0FEh
.eh_frame_hdr:000000000001D3CB                 db 0FFh
.eh_frame_hdr:000000000001D3CC                 db 0F0h
.eh_frame_hdr:000000000001D3CD                 db  1Ch
.eh_frame_hdr:000000000001D3CE                 db    0
.eh_frame_hdr:000000000001D3CF                 db    0
.eh_frame_hdr:000000000001D3D0                 db  4Ch ; L
.eh_frame_hdr:000000000001D3D1                 db 0F2h
.eh_frame_hdr:000000000001D3D2                 db 0FEh
.eh_frame_hdr:000000000001D3D3                 db 0FFh
.eh_frame_hdr:000000000001D3D4                 db    4
.eh_frame_hdr:000000000001D3D5                 db  1Dh
.eh_frame_hdr:000000000001D3D6                 db    0
.eh_frame_hdr:000000000001D3D7                 db    0
.eh_frame_hdr:000000000001D3D8                 db 0BCh
.eh_frame_hdr:000000000001D3D9                 db 0F4h
.eh_frame_hdr:000000000001D3DA                 db 0FEh
.eh_frame_hdr:000000000001D3DB                 db 0FFh
.eh_frame_hdr:000000000001D3DC                 db  54h ; T
.eh_frame_hdr:000000000001D3DD                 db  1Dh
.eh_frame_hdr:000000000001D3DE                 db    0
.eh_frame_hdr:000000000001D3DF                 db    0
.eh_frame_hdr:000000000001D3E0                 db  9Ch
.eh_frame_hdr:000000000001D3E1                 db 0F6h
.eh_frame_hdr:000000000001D3E2                 db 0FEh
.eh_frame_hdr:000000000001D3E3                 db 0FFh
.eh_frame_hdr:000000000001D3E4                 db  8Ch
.eh_frame_hdr:000000000001D3E5                 db  1Dh
.eh_frame_hdr:000000000001D3E6                 db    0
.eh_frame_hdr:000000000001D3E7                 db    0
.eh_frame_hdr:000000000001D3E8                 db  4Ch ; L
.eh_frame_hdr:000000000001D3E9                 db 0F9h
.eh_frame_hdr:000000000001D3EA                 db 0FEh
.eh_frame_hdr:000000000001D3EB                 db 0FFh
.eh_frame_hdr:000000000001D3EC                 db 0DCh
.eh_frame_hdr:000000000001D3ED                 db  1Dh
.eh_frame_hdr:000000000001D3EE                 db    0
.eh_frame_hdr:000000000001D3EF                 db    0
.eh_frame_hdr:000000000001D3F0                 db 0ACh
.eh_frame_hdr:000000000001D3F1                 db 0FAh
.eh_frame_hdr:000000000001D3F2                 db 0FEh
.eh_frame_hdr:000000000001D3F3                 db 0FFh
.eh_frame_hdr:000000000001D3F4                 db  28h ; (
.eh_frame_hdr:000000000001D3F5                 db  1Eh
.eh_frame_hdr:000000000001D3F6                 db    0
.eh_frame_hdr:000000000001D3F7                 db    0
.eh_frame_hdr:000000000001D3F8                 db  5Ch ; \
.eh_frame_hdr:000000000001D3F9                 db 0FCh
.eh_frame_hdr:000000000001D3FA                 db 0FEh
.eh_frame_hdr:000000000001D3FB                 db 0FFh
.eh_frame_hdr:000000000001D3FC                 db  78h ; x
.eh_frame_hdr:000000000001D3FD                 db  1Eh
.eh_frame_hdr:000000000001D3FE                 db    0
.eh_frame_hdr:000000000001D3FF                 db    0
.eh_frame_hdr:000000000001D400                 db  3Ch ; <
.eh_frame_hdr:000000000001D401                 db 0FDh
.eh_frame_hdr:000000000001D402                 db 0FEh
.eh_frame_hdr:000000000001D403                 db 0FFh
.eh_frame_hdr:000000000001D404                 db  9Ch
.eh_frame_hdr:000000000001D405                 db  1Eh
.eh_frame_hdr:000000000001D406                 db    0
.eh_frame_hdr:000000000001D407                 db    0
.eh_frame_hdr:000000000001D408                 db  1Ch
.eh_frame_hdr:000000000001D409                 db 0FEh
.eh_frame_hdr:000000000001D40A                 db 0FEh
.eh_frame_hdr:000000000001D40B                 db 0FFh
.eh_frame_hdr:000000000001D40C                 db 0E0h
.eh_frame_hdr:000000000001D40D                 db  1Eh
.eh_frame_hdr:000000000001D40E                 db    0
.eh_frame_hdr:000000000001D40F                 db    0
.eh_frame_hdr:000000000001D410                 db  5Ch ; \
.eh_frame_hdr:000000000001D411                 db    0
.eh_frame_hdr:000000000001D412                 db 0FFh
.eh_frame_hdr:000000000001D413                 db 0FFh
.eh_frame_hdr:000000000001D414                 db  30h ; 0
.eh_frame_hdr:000000000001D415                 db  1Fh
.eh_frame_hdr:000000000001D416                 db    0
.eh_frame_hdr:000000000001D417                 db    0
.eh_frame_hdr:000000000001D418                 db 0FCh
.eh_frame_hdr:000000000001D419                 db    0
.eh_frame_hdr:000000000001D41A                 db 0FFh
.eh_frame_hdr:000000000001D41B                 db 0FFh
.eh_frame_hdr:000000000001D41C                 db  5Ch ; \
.eh_frame_hdr:000000000001D41D                 db  1Fh
.eh_frame_hdr:000000000001D41E                 db    0
.eh_frame_hdr:000000000001D41F                 db    0
.eh_frame_hdr:000000000001D420                 db  8Ch
.eh_frame_hdr:000000000001D421                 db    1
.eh_frame_hdr:000000000001D422                 db 0FFh
.eh_frame_hdr:000000000001D423                 db 0FFh
.eh_frame_hdr:000000000001D424                 db  98h
.eh_frame_hdr:000000000001D425                 db  1Fh
.eh_frame_hdr:000000000001D426                 db    0
.eh_frame_hdr:000000000001D427                 db    0
.eh_frame_hdr:000000000001D428                 db 0ECh
.eh_frame_hdr:000000000001D429                 db    2
.eh_frame_hdr:000000000001D42A                 db 0FFh
.eh_frame_hdr:000000000001D42B                 db 0FFh
.eh_frame_hdr:000000000001D42C                 db 0FCh
.eh_frame_hdr:000000000001D42D                 db  1Fh
.eh_frame_hdr:000000000001D42E                 db    0
.eh_frame_hdr:000000000001D42F                 db    0
.eh_frame_hdr:000000000001D430                 db 0ACh
.eh_frame_hdr:000000000001D431                 db    5
.eh_frame_hdr:000000000001D432                 db 0FFh
.eh_frame_hdr:000000000001D433                 db 0FFh
.eh_frame_hdr:000000000001D434                 db  48h ; H
.eh_frame_hdr:000000000001D435                 db  20h
.eh_frame_hdr:000000000001D436                 db    0
.eh_frame_hdr:000000000001D437                 db    0
.eh_frame_hdr:000000000001D438                 db 0ACh
.eh_frame_hdr:000000000001D439                 db    7
.eh_frame_hdr:000000000001D43A                 db 0FFh
.eh_frame_hdr:000000000001D43B                 db 0FFh
.eh_frame_hdr:000000000001D43C                 db  94h
.eh_frame_hdr:000000000001D43D                 db  20h
.eh_frame_hdr:000000000001D43E                 db    0
.eh_frame_hdr:000000000001D43F                 db    0
.eh_frame_hdr:000000000001D440                 db  8Ch
.eh_frame_hdr:000000000001D441                 db    8
.eh_frame_hdr:000000000001D442                 db 0FFh
.eh_frame_hdr:000000000001D443                 db 0FFh
.eh_frame_hdr:000000000001D444                 db 0E0h
.eh_frame_hdr:000000000001D445                 db  20h
.eh_frame_hdr:000000000001D446                 db    0
.eh_frame_hdr:000000000001D447                 db    0
.eh_frame_hdr:000000000001D448                 db  2Ch ; ,
.eh_frame_hdr:000000000001D449                 db  0Ch
.eh_frame_hdr:000000000001D44A                 db 0FFh
.eh_frame_hdr:000000000001D44B                 db 0FFh
.eh_frame_hdr:000000000001D44C                 db  2Ch ; ,
.eh_frame_hdr:000000000001D44D                 db  21h ; !
.eh_frame_hdr:000000000001D44E                 db    0
.eh_frame_hdr:000000000001D44F                 db    0
.eh_frame_hdr:000000000001D450                 db  7Ch ; |
.eh_frame_hdr:000000000001D451                 db  0Dh
.eh_frame_hdr:000000000001D452                 db 0FFh
.eh_frame_hdr:000000000001D453                 db 0FFh
.eh_frame_hdr:000000000001D454                 db  78h ; x
.eh_frame_hdr:000000000001D455                 db  21h ; !
.eh_frame_hdr:000000000001D456                 db    0
.eh_frame_hdr:000000000001D457                 db    0
.eh_frame_hdr:000000000001D458                 db  6Ch ; l
.eh_frame_hdr:000000000001D459                 db  0Eh
.eh_frame_hdr:000000000001D45A                 db 0FFh
.eh_frame_hdr:000000000001D45B                 db 0FFh
.eh_frame_hdr:000000000001D45C                 db 0BCh
.eh_frame_hdr:000000000001D45D                 db  21h ; !
.eh_frame_hdr:000000000001D45E                 db    0
.eh_frame_hdr:000000000001D45F                 db    0
.eh_frame_hdr:000000000001D460                 db  7Ch ; |
.eh_frame_hdr:000000000001D461                 db  0Fh
.eh_frame_hdr:000000000001D462                 db 0FFh
.eh_frame_hdr:000000000001D463                 db 0FFh
.eh_frame_hdr:000000000001D464                 db 0E4h
.eh_frame_hdr:000000000001D465                 db  21h ; !
.eh_frame_hdr:000000000001D466                 db    0
.eh_frame_hdr:000000000001D467                 db    0
.eh_frame_hdr:000000000001D468                 db  4Ch ; L
.eh_frame_hdr:000000000001D469                 db  10h
.eh_frame_hdr:000000000001D46A                 db 0FFh
.eh_frame_hdr:000000000001D46B                 db 0FFh
.eh_frame_hdr:000000000001D46C                 db  1Ch
.eh_frame_hdr:000000000001D46D                 db  22h ; "
.eh_frame_hdr:000000000001D46E                 db    0
.eh_frame_hdr:000000000001D46F                 db    0
.eh_frame_hdr:000000000001D470                 db 0ECh
.eh_frame_hdr:000000000001D471                 db  17h
.eh_frame_hdr:000000000001D472                 db 0FFh
.eh_frame_hdr:000000000001D473                 db 0FFh
.eh_frame_hdr:000000000001D474                 db  6Ch ; l
.eh_frame_hdr:000000000001D475                 db  22h ; "
.eh_frame_hdr:000000000001D476                 db    0
.eh_frame_hdr:000000000001D477                 db    0
.eh_frame_hdr:000000000001D478                 db  2Ch ; ,
.eh_frame_hdr:000000000001D479                 db  1Ah
.eh_frame_hdr:000000000001D47A                 db 0FFh
.eh_frame_hdr:000000000001D47B                 db 0FFh
.eh_frame_hdr:000000000001D47C                 db 0BCh
.eh_frame_hdr:000000000001D47D                 db  22h ; "
.eh_frame_hdr:000000000001D47E                 db    0
.eh_frame_hdr:000000000001D47F                 db    0
.eh_frame_hdr:000000000001D480                 db 0CCh
.eh_frame_hdr:000000000001D481                 db  25h ; %
.eh_frame_hdr:000000000001D482                 db 0FFh
.eh_frame_hdr:000000000001D483                 db 0FFh
.eh_frame_hdr:000000000001D484                 db  0Ch
.eh_frame_hdr:000000000001D485                 db  23h ; #
.eh_frame_hdr:000000000001D486                 db    0
.eh_frame_hdr:000000000001D487                 db    0
.eh_frame_hdr:000000000001D488                 db  5Ch ; \
.eh_frame_hdr:000000000001D489                 db  26h ; &
.eh_frame_hdr:000000000001D48A                 db 0FFh
.eh_frame_hdr:000000000001D48B                 db 0FFh
.eh_frame_hdr:000000000001D48C                 db  40h ; @
.eh_frame_hdr:000000000001D48D                 db  23h ; #
.eh_frame_hdr:000000000001D48E                 db    0
.eh_frame_hdr:000000000001D48F                 db    0
.eh_frame_hdr:000000000001D490                 db 0ACh
.eh_frame_hdr:000000000001D491                 db  26h ; &
.eh_frame_hdr:000000000001D492                 db 0FFh
.eh_frame_hdr:000000000001D493                 db 0FFh
.eh_frame_hdr:000000000001D494                 db  6Ch ; l
.eh_frame_hdr:000000000001D495                 db  23h ; #
.eh_frame_hdr:000000000001D496                 db    0
.eh_frame_hdr:000000000001D497                 db    0
.eh_frame_hdr:000000000001D498                 db  4Ch ; L
.eh_frame_hdr:000000000001D499                 db  27h ; '
.eh_frame_hdr:000000000001D49A                 db 0FFh
.eh_frame_hdr:000000000001D49B                 db 0FFh
.eh_frame_hdr:000000000001D49C                 db  9Ch
.eh_frame_hdr:000000000001D49D                 db  23h ; #
.eh_frame_hdr:000000000001D49E                 db    0
.eh_frame_hdr:000000000001D49F                 db    0
.eh_frame_hdr:000000000001D4A0                 db  9Ch
.eh_frame_hdr:000000000001D4A1                 db  27h ; '
.eh_frame_hdr:000000000001D4A2                 db 0FFh
.eh_frame_hdr:000000000001D4A3                 db 0FFh
.eh_frame_hdr:000000000001D4A4                 db 0D0h
.eh_frame_hdr:000000000001D4A5                 db  23h ; #
.eh_frame_hdr:000000000001D4A6                 db    0
.eh_frame_hdr:000000000001D4A7                 db    0
.eh_frame_hdr:000000000001D4A8                 db 0ACh
.eh_frame_hdr:000000000001D4A9                 db  2Fh ; /
.eh_frame_hdr:000000000001D4AA                 db 0FFh
.eh_frame_hdr:000000000001D4AB                 db 0FFh
.eh_frame_hdr:000000000001D4AC                 db  14h
.eh_frame_hdr:000000000001D4AD                 db  24h ; $
.eh_frame_hdr:000000000001D4AE                 db    0
.eh_frame_hdr:000000000001D4AF                 db    0
.eh_frame_hdr:000000000001D4B0                 db  1Ch
.eh_frame_hdr:000000000001D4B1                 db  32h ; 2
.eh_frame_hdr:000000000001D4B2                 db 0FFh
.eh_frame_hdr:000000000001D4B3                 db 0FFh
.eh_frame_hdr:000000000001D4B4                 db  74h ; t
.eh_frame_hdr:000000000001D4B5                 db  24h ; $
.eh_frame_hdr:000000000001D4B6                 db    0
.eh_frame_hdr:000000000001D4B7                 db    0
.eh_frame_hdr:000000000001D4B8                 db  4Ch ; L
.eh_frame_hdr:000000000001D4B9                 db  37h ; 7
.eh_frame_hdr:000000000001D4BA                 db 0FFh
.eh_frame_hdr:000000000001D4BB                 db 0FFh
.eh_frame_hdr:000000000001D4BC                 db 0C4h
.eh_frame_hdr:000000000001D4BD                 db  24h ; $
.eh_frame_hdr:000000000001D4BE                 db    0
.eh_frame_hdr:000000000001D4BF                 db    0
.eh_frame_hdr:000000000001D4C0                 db 0ACh
.eh_frame_hdr:000000000001D4C1                 db  39h ; 9
.eh_frame_hdr:000000000001D4C2                 db 0FFh
.eh_frame_hdr:000000000001D4C3                 db 0FFh
.eh_frame_hdr:000000000001D4C4                 db    0
.eh_frame_hdr:000000000001D4C5                 db  25h ; %
.eh_frame_hdr:000000000001D4C6                 db    0
.eh_frame_hdr:000000000001D4C7                 db    0
.eh_frame_hdr:000000000001D4C8                 db  0Ch
.eh_frame_hdr:000000000001D4C9                 db  41h ; A
.eh_frame_hdr:000000000001D4CA                 db 0FFh
.eh_frame_hdr:000000000001D4CB                 db 0FFh
.eh_frame_hdr:000000000001D4CC                 db  50h ; P
.eh_frame_hdr:000000000001D4CD                 db  25h ; %
.eh_frame_hdr:000000000001D4CE                 db    0
.eh_frame_hdr:000000000001D4CF                 db    0
.eh_frame_hdr:000000000001D4D0                 db 0FCh
.eh_frame_hdr:000000000001D4D1                 db  49h ; I
.eh_frame_hdr:000000000001D4D2                 db 0FFh
.eh_frame_hdr:000000000001D4D3                 db 0FFh
.eh_frame_hdr:000000000001D4D4                 db  80h
.eh_frame_hdr:000000000001D4D5                 db  25h ; %
.eh_frame_hdr:000000000001D4D6                 db    0
.eh_frame_hdr:000000000001D4D7                 db    0
.eh_frame_hdr:000000000001D4D8                 db  9Ch
.eh_frame_hdr:000000000001D4D9                 db  4Bh ; K
.eh_frame_hdr:000000000001D4DA                 db 0FFh
.eh_frame_hdr:000000000001D4DB                 db 0FFh
.eh_frame_hdr:000000000001D4DC                 db 0ECh
.eh_frame_hdr:000000000001D4DD                 db  25h ; %
.eh_frame_hdr:000000000001D4DE                 db    0
.eh_frame_hdr:000000000001D4DF                 db    0
.eh_frame_hdr:000000000001D4E0                 db  8Ch
.eh_frame_hdr:000000000001D4E1                 db  54h ; T
.eh_frame_hdr:000000000001D4E2                 db 0FFh
.eh_frame_hdr:000000000001D4E3                 db 0FFh
.eh_frame_hdr:000000000001D4E4                 db  4Ch ; L
.eh_frame_hdr:000000000001D4E5                 db  26h ; &
.eh_frame_hdr:000000000001D4E6                 db    0
.eh_frame_hdr:000000000001D4E7                 db    0
.eh_frame_hdr:000000000001D4E8                 db  7Ch ; |
.eh_frame_hdr:000000000001D4E9                 db  56h ; V
.eh_frame_hdr:000000000001D4EA                 db 0FFh
.eh_frame_hdr:000000000001D4EB                 db 0FFh
.eh_frame_hdr:000000000001D4EC                 db  98h
.eh_frame_hdr:000000000001D4ED                 db  26h ; &
.eh_frame_hdr:000000000001D4EE                 db    0
.eh_frame_hdr:000000000001D4EF                 db    0
.eh_frame_hdr:000000000001D4F0                 db 0BCh
.eh_frame_hdr:000000000001D4F1                 db  59h ; Y
.eh_frame_hdr:000000000001D4F2                 db 0FFh
.eh_frame_hdr:000000000001D4F3                 db 0FFh
.eh_frame_hdr:000000000001D4F4                 db 0F8h
.eh_frame_hdr:000000000001D4F5                 db  26h ; &
.eh_frame_hdr:000000000001D4F6                 db    0
.eh_frame_hdr:000000000001D4F7                 db    0
.eh_frame_hdr:000000000001D4F8                 db 0ECh
.eh_frame_hdr:000000000001D4F9                 db  70h ; p
.eh_frame_hdr:000000000001D4FA                 db 0FFh
.eh_frame_hdr:000000000001D4FB                 db 0FFh
.eh_frame_hdr:000000000001D4FC                 db  48h ; H
.eh_frame_hdr:000000000001D4FD                 db  27h ; '
.eh_frame_hdr:000000000001D4FE                 db    0
.eh_frame_hdr:000000000001D4FF                 db    0
.eh_frame_hdr:000000000001D500                 db  3Ch ; <
.eh_frame_hdr:000000000001D501                 db  79h ; y
.eh_frame_hdr:000000000001D502                 db 0FFh
.eh_frame_hdr:000000000001D503                 db 0FFh
.eh_frame_hdr:000000000001D504                 db 0A8h
.eh_frame_hdr:000000000001D505                 db  27h ; '
.eh_frame_hdr:000000000001D506                 db    0
.eh_frame_hdr:000000000001D507                 db    0
.eh_frame_hdr:000000000001D508                 db  9Ch
.eh_frame_hdr:000000000001D509                 db  7Bh ; {
.eh_frame_hdr:000000000001D50A                 db 0FFh
.eh_frame_hdr:000000000001D50B                 db 0FFh
.eh_frame_hdr:000000000001D50C                 db 0ECh
.eh_frame_hdr:000000000001D50D                 db  27h ; '
.eh_frame_hdr:000000000001D50E                 db    0
.eh_frame_hdr:000000000001D50F                 db    0
.eh_frame_hdr:000000000001D510                 db  9Ch
.eh_frame_hdr:000000000001D511                 db  82h
.eh_frame_hdr:000000000001D512                 db 0FFh
.eh_frame_hdr:000000000001D513                 db 0FFh
.eh_frame_hdr:000000000001D514                 db  38h ; 8
.eh_frame_hdr:000000000001D515                 db  28h ; (
.eh_frame_hdr:000000000001D516                 db    0
.eh_frame_hdr:000000000001D517                 db    0
.eh_frame_hdr:000000000001D518                 db  5Ch ; \
.eh_frame_hdr:000000000001D519                 db  83h
.eh_frame_hdr:000000000001D51A                 db 0FFh
.eh_frame_hdr:000000000001D51B                 db 0FFh
.eh_frame_hdr:000000000001D51C                 db  78h ; x
.eh_frame_hdr:000000000001D51D                 db  28h ; (
.eh_frame_hdr:000000000001D51E                 db    0
.eh_frame_hdr:000000000001D51F                 db    0
.eh_frame_hdr:000000000001D520                 db  3Ch ; <
.eh_frame_hdr:000000000001D521                 db  98h
.eh_frame_hdr:000000000001D522                 db 0FFh
.eh_frame_hdr:000000000001D523                 db 0FFh
.eh_frame_hdr:000000000001D524                 db 0D8h
.eh_frame_hdr:000000000001D525                 db  28h ; (
.eh_frame_hdr:000000000001D526                 db    0
.eh_frame_hdr:000000000001D527                 db    0
.eh_frame_hdr:000000000001D528                 db 0CCh
.eh_frame_hdr:000000000001D529                 db  99h
.eh_frame_hdr:000000000001D52A                 db 0FFh
.eh_frame_hdr:000000000001D52B                 db 0FFh
.eh_frame_hdr:000000000001D52C                 db  24h ; $
.eh_frame_hdr:000000000001D52D                 db  29h ; )
.eh_frame_hdr:000000000001D52E                 db    0
.eh_frame_hdr:000000000001D52F                 db    0
.eh_frame_hdr:000000000001D530                 db  4Ch ; L
.eh_frame_hdr:000000000001D531                 db  9Bh
.eh_frame_hdr:000000000001D532                 db 0FFh
.eh_frame_hdr:000000000001D533                 db 0FFh
.eh_frame_hdr:000000000001D534                 db  74h ; t
.eh_frame_hdr:000000000001D535                 db  29h ; )
.eh_frame_hdr:000000000001D536                 db    0
.eh_frame_hdr:000000000001D537                 db    0
.eh_frame_hdr:000000000001D538                 db  4Ch ; L
.eh_frame_hdr:000000000001D539                 db 0ACh
.eh_frame_hdr:000000000001D53A                 db 0FFh
.eh_frame_hdr:000000000001D53B                 db 0FFh
.eh_frame_hdr:000000000001D53C                 db 0C4h
.eh_frame_hdr:000000000001D53D                 db  29h ; )
.eh_frame_hdr:000000000001D53E                 db    0
.eh_frame_hdr:000000000001D53F                 db    0
.eh_frame_hdr:000000000001D540                 db 0BCh
.eh_frame_hdr:000000000001D541                 db 0ACh
.eh_frame_hdr:000000000001D542                 db 0FFh
.eh_frame_hdr:000000000001D543                 db 0FFh
.eh_frame_hdr:000000000001D544                 db 0E4h
.eh_frame_hdr:000000000001D545                 db  29h ; )
.eh_frame_hdr:000000000001D546                 db    0
.eh_frame_hdr:000000000001D547                 db    0
.eh_frame_hdr:000000000001D548                 db 0CCh
.eh_frame_hdr:000000000001D549                 db 0ACh
.eh_frame_hdr:000000000001D54A                 db 0FFh
.eh_frame_hdr:000000000001D54B                 db 0FFh
.eh_frame_hdr:000000000001D54C                 db 0F8h
.eh_frame_hdr:000000000001D54D                 db  29h ; )
.eh_frame_hdr:000000000001D54E                 db    0
.eh_frame_hdr:000000000001D54F                 db    0
.eh_frame_hdr:000000000001D550                 db  9Ch
.eh_frame_hdr:000000000001D551                 db 0ADh
.eh_frame_hdr:000000000001D552                 db 0FFh
.eh_frame_hdr:000000000001D553                 db 0FFh
.eh_frame_hdr:000000000001D554                 db  24h ; $
.eh_frame_hdr:000000000001D555                 db  2Ah ; *
.eh_frame_hdr:000000000001D556                 db    0
.eh_frame_hdr:000000000001D557                 db    0
.eh_frame_hdr:000000000001D558                 db  1Ch
.eh_frame_hdr:000000000001D559                 db 0B2h
.eh_frame_hdr:000000000001D55A                 db 0FFh
.eh_frame_hdr:000000000001D55B                 db 0FFh
.eh_frame_hdr:000000000001D55C                 db  84h
.eh_frame_hdr:000000000001D55D                 db  2Ah ; *
.eh_frame_hdr:000000000001D55E                 db    0
.eh_frame_hdr:000000000001D55F                 db    0
.eh_frame_hdr:000000000001D560                 db  3Ch ; <
.eh_frame_hdr:000000000001D561                 db 0B3h
.eh_frame_hdr:000000000001D562                 db 0FFh
.eh_frame_hdr:000000000001D563                 db 0FFh
.eh_frame_hdr:000000000001D564                 db 0DCh
.eh_frame_hdr:000000000001D565                 db  2Ah ; *
.eh_frame_hdr:000000000001D566                 db    0
.eh_frame_hdr:000000000001D567                 db    0
.eh_frame_hdr:000000000001D568                 db  4Ch ; L
.eh_frame_hdr:000000000001D569                 db 0B4h
.eh_frame_hdr:000000000001D56A                 db 0FFh
.eh_frame_hdr:000000000001D56B                 db 0FFh
.eh_frame_hdr:000000000001D56C                 db  28h ; (
.eh_frame_hdr:000000000001D56D                 db  2Bh ; +
.eh_frame_hdr:000000000001D56E                 db    0
.eh_frame_hdr:000000000001D56F                 db    0
.eh_frame_hdr:000000000001D570                 db 0DCh
.eh_frame_hdr:000000000001D571                 db 0B4h
.eh_frame_hdr:000000000001D572                 db 0FFh
.eh_frame_hdr:000000000001D573                 db 0FFh
.eh_frame_hdr:000000000001D574                 db  64h ; d
.eh_frame_hdr:000000000001D575                 db  2Bh ; +
.eh_frame_hdr:000000000001D576                 db    0
.eh_frame_hdr:000000000001D577                 db    0
.eh_frame_hdr:000000000001D578                 db  2Ch ; ,
.eh_frame_hdr:000000000001D579                 db 0B5h
.eh_frame_hdr:000000000001D57A                 db 0FFh
.eh_frame_hdr:000000000001D57B                 db 0FFh
.eh_frame_hdr:000000000001D57C                 db  80h
.eh_frame_hdr:000000000001D57D                 db  2Bh ; +
.eh_frame_hdr:000000000001D57E                 db    0
.eh_frame_hdr:000000000001D57F                 db    0
.eh_frame_hdr:000000000001D580                 db 0CCh
.eh_frame_hdr:000000000001D581                 db 0B5h
.eh_frame_hdr:000000000001D582                 db 0FFh
.eh_frame_hdr:000000000001D583                 db 0FFh
.eh_frame_hdr:000000000001D584                 db 0DCh
.eh_frame_hdr:000000000001D585                 db  2Bh ; +
.eh_frame_hdr:000000000001D586                 db    0
.eh_frame_hdr:000000000001D587                 db    0
.eh_frame_hdr:000000000001D588                 db 0ECh
.eh_frame_hdr:000000000001D589                 db 0B5h
.eh_frame_hdr:000000000001D58A                 db 0FFh
.eh_frame_hdr:000000000001D58B                 db 0FFh
.eh_frame_hdr:000000000001D58C                 db 0FCh
.eh_frame_hdr:000000000001D58D                 db  2Bh ; +
.eh_frame_hdr:000000000001D58E                 db    0
.eh_frame_hdr:000000000001D58F                 db    0
.eh_frame_hdr:000000000001D590                 db  0Ch
.eh_frame_hdr:000000000001D591                 db 0B6h
.eh_frame_hdr:000000000001D592                 db 0FFh
.eh_frame_hdr:000000000001D593                 db 0FFh
.eh_frame_hdr:000000000001D594                 db  1Ch
.eh_frame_hdr:000000000001D595                 db  2Ch ; ,
.eh_frame_hdr:000000000001D596                 db    0
.eh_frame_hdr:000000000001D597                 db    0
.eh_frame_hdr:000000000001D598                 db  2Ch ; ,
.eh_frame_hdr:000000000001D599                 db 0B6h
.eh_frame_hdr:000000000001D59A                 db 0FFh
.eh_frame_hdr:000000000001D59B                 db 0FFh
.eh_frame_hdr:000000000001D59C                 db  40h ; @
.eh_frame_hdr:000000000001D59D                 db  2Ch ; ,
.eh_frame_hdr:000000000001D59E                 db    0
.eh_frame_hdr:000000000001D59F                 db    0
.eh_frame_hdr:000000000001D5A0                 db  4Ch ; L
.eh_frame_hdr:000000000001D5A1                 db 0B6h
.eh_frame_hdr:000000000001D5A2                 db 0FFh
.eh_frame_hdr:000000000001D5A3                 db 0FFh
.eh_frame_hdr:000000000001D5A4                 db  64h ; d
.eh_frame_hdr:000000000001D5A5                 db  2Ch ; ,
.eh_frame_hdr:000000000001D5A6                 db    0
.eh_frame_hdr:000000000001D5A7                 db    0
.eh_frame_hdr:000000000001D5A8                 db  9Ch
.eh_frame_hdr:000000000001D5A9                 db 0B6h
.eh_frame_hdr:000000000001D5AA                 db 0FFh
.eh_frame_hdr:000000000001D5AB                 db 0FFh
.eh_frame_hdr:000000000001D5AC                 db  7Ch ; |
.eh_frame_hdr:000000000001D5AD                 db  2Ch ; ,
.eh_frame_hdr:000000000001D5AE                 db    0
.eh_frame_hdr:000000000001D5AF                 db    0
.eh_frame_hdr:000000000001D5B0                 db 0ECh
.eh_frame_hdr:000000000001D5B1                 db 0B6h
.eh_frame_hdr:000000000001D5B2                 db 0FFh
.eh_frame_hdr:000000000001D5B3                 db 0FFh
.eh_frame_hdr:000000000001D5B4                 db  94h
.eh_frame_hdr:000000000001D5B5                 db  2Ch ; ,
.eh_frame_hdr:000000000001D5B6                 db    0
.eh_frame_hdr:000000000001D5B7                 db    0
.eh_frame_hdr:000000000001D5B8                 db  6Ch ; l
.eh_frame_hdr:000000000001D5B9                 db 0B7h
.eh_frame_hdr:000000000001D5BA                 db 0FFh
.eh_frame_hdr:000000000001D5BB                 db 0FFh
.eh_frame_hdr:000000000001D5BC                 db 0E4h
.eh_frame_hdr:000000000001D5BD                 db  2Ch ; ,
.eh_frame_hdr:000000000001D5BE                 db    0
.eh_frame_hdr:000000000001D5BF                 db    0
.eh_frame_hdr:000000000001D5C0                 db 0CCh
.eh_frame_hdr:000000000001D5C1                 db 0B7h
.eh_frame_hdr:000000000001D5C2                 db 0FFh
.eh_frame_hdr:000000000001D5C3                 db 0FFh
.eh_frame_hdr:000000000001D5C4                 db    4
.eh_frame_hdr:000000000001D5C5                 db  2Dh ; -
.eh_frame_hdr:000000000001D5C6                 db    0
.eh_frame_hdr:000000000001D5C7                 db    0
.eh_frame_hdr:000000000001D5C8                 db  0Ch
.eh_frame_hdr:000000000001D5C9                 db 0B8h
.eh_frame_hdr:000000000001D5CA                 db 0FFh
.eh_frame_hdr:000000000001D5CB                 db 0FFh
.eh_frame_hdr:000000000001D5CC                 db  24h ; $
.eh_frame_hdr:000000000001D5CD                 db  2Dh ; -
.eh_frame_hdr:000000000001D5CE                 db    0
.eh_frame_hdr:000000000001D5CF                 db    0
.eh_frame_hdr:000000000001D5D0                 db  3Ch ; <
.eh_frame_hdr:000000000001D5D1                 db 0B8h
.eh_frame_hdr:000000000001D5D2                 db 0FFh
.eh_frame_hdr:000000000001D5D3                 db 0FFh
.eh_frame_hdr:000000000001D5D4                 db  44h ; D
.eh_frame_hdr:000000000001D5D5                 db  2Dh ; -
.eh_frame_hdr:000000000001D5D6                 db    0
.eh_frame_hdr:000000000001D5D7                 db    0
.eh_frame_hdr:000000000001D5D8                 db  9Ch
.eh_frame_hdr:000000000001D5D9                 db 0B8h
.eh_frame_hdr:000000000001D5DA                 db 0FFh
.eh_frame_hdr:000000000001D5DB                 db 0FFh
.eh_frame_hdr:000000000001D5DC                 db  70h ; p
.eh_frame_hdr:000000000001D5DD                 db  2Dh ; -
.eh_frame_hdr:000000000001D5DE                 db    0
.eh_frame_hdr:000000000001D5DF                 db    0
.eh_frame_hdr:000000000001D5E0                 db 0BCh
.eh_frame_hdr:000000000001D5E1                 db 0B8h
.eh_frame_hdr:000000000001D5E2                 db 0FFh
.eh_frame_hdr:000000000001D5E3                 db 0FFh
.eh_frame_hdr:000000000001D5E4                 db  84h
.eh_frame_hdr:000000000001D5E5                 db  2Dh ; -
.eh_frame_hdr:000000000001D5E6                 db    0
.eh_frame_hdr:000000000001D5E7                 db    0
.eh_frame_hdr:000000000001D5E8                 db  6Ch ; l
.eh_frame_hdr:000000000001D5E9                 db 0BAh
.eh_frame_hdr:000000000001D5EA                 db 0FFh
.eh_frame_hdr:000000000001D5EB                 db 0FFh
.eh_frame_hdr:000000000001D5EC                 db 0C0h
.eh_frame_hdr:000000000001D5ED                 db  2Dh ; -
.eh_frame_hdr:000000000001D5EE                 db    0
.eh_frame_hdr:000000000001D5EF                 db    0
.eh_frame_hdr:000000000001D5F0                 db 0ECh
.eh_frame_hdr:000000000001D5F1                 db 0C4h
.eh_frame_hdr:000000000001D5F2                 db 0FFh
.eh_frame_hdr:000000000001D5F3                 db 0FFh
.eh_frame_hdr:000000000001D5F4                 db 0F0h
.eh_frame_hdr:000000000001D5F5                 db  2Dh ; -
.eh_frame_hdr:000000000001D5F6                 db    0
.eh_frame_hdr:000000000001D5F7                 db    0
.eh_frame_hdr:000000000001D5F8                 db 0FCh
.eh_frame_hdr:000000000001D5F9                 db 0D5h
.eh_frame_hdr:000000000001D5FA                 db 0FFh
.eh_frame_hdr:000000000001D5FB                 db 0FFh
.eh_frame_hdr:000000000001D5FC                 db  44h ; D
.eh_frame_hdr:000000000001D5FD                 db  2Eh ; .
.eh_frame_hdr:000000000001D5FE                 db    0
.eh_frame_hdr:000000000001D5FF                 db    0
.eh_frame_hdr:000000000001D600                 db 0BCh
.eh_frame_hdr:000000000001D601                 db 0D8h
.eh_frame_hdr:000000000001D602                 db 0FFh
.eh_frame_hdr:000000000001D603                 db 0FFh
.eh_frame_hdr:000000000001D604                 db  94h
.eh_frame_hdr:000000000001D605                 db  2Eh ; .
.eh_frame_hdr:000000000001D606                 db    0
.eh_frame_hdr:000000000001D607                 db    0
.eh_frame_hdr:000000000001D608                 db  0Ch
.eh_frame_hdr:000000000001D609                 db 0DBh
.eh_frame_hdr:000000000001D60A                 db 0FFh
.eh_frame_hdr:000000000001D60B                 db 0FFh
.eh_frame_hdr:000000000001D60C                 db 0E4h
.eh_frame_hdr:000000000001D60D                 db  2Eh ; .
.eh_frame_hdr:000000000001D60E                 db    0
.eh_frame_hdr:000000000001D60F                 db    0
.eh_frame_hdr:000000000001D610                 db 0FCh
.eh_frame_hdr:000000000001D611                 db 0DBh
.eh_frame_hdr:000000000001D612                 db 0FFh
.eh_frame_hdr:000000000001D613                 db 0FFh
.eh_frame_hdr:000000000001D614                 db  34h ; 4
.eh_frame_hdr:000000000001D615                 db  2Fh ; /
.eh_frame_hdr:000000000001D616                 db    0
.eh_frame_hdr:000000000001D617                 db    0
.eh_frame_hdr:000000000001D618                 db  3Ch ; <
.eh_frame_hdr:000000000001D619                 db 0DCh
.eh_frame_hdr:000000000001D61A                 db 0FFh
.eh_frame_hdr:000000000001D61B                 db 0FFh
.eh_frame_hdr:000000000001D61C                 db  4Ch ; L
.eh_frame_hdr:000000000001D61D                 db  2Fh ; /
.eh_frame_hdr:000000000001D61E                 db    0
.eh_frame_hdr:000000000001D61F                 db    0
.eh_frame_hdr:000000000001D620                 db  6Ch ; l
.eh_frame_hdr:000000000001D621                 db 0DCh
.eh_frame_hdr:000000000001D622                 db 0FFh
.eh_frame_hdr:000000000001D623                 db 0FFh
.eh_frame_hdr:000000000001D624                 db  64h ; d
.eh_frame_hdr:000000000001D625                 db  2Fh ; /
.eh_frame_hdr:000000000001D626                 db    0
.eh_frame_hdr:000000000001D627                 db    0
.eh_frame_hdr:000000000001D628                 db  9Ch
.eh_frame_hdr:000000000001D629                 db 0DEh
.eh_frame_hdr:000000000001D62A                 db 0FFh
.eh_frame_hdr:000000000001D62B                 db 0FFh
.eh_frame_hdr:000000000001D62C                 db 0ACh
.eh_frame_hdr:000000000001D62D                 db  2Fh ; /
.eh_frame_hdr:000000000001D62E                 db    0
.eh_frame_hdr:000000000001D62F                 db    0
.eh_frame_hdr:000000000001D630                 db  0Ch
.eh_frame_hdr:000000000001D631                 db 0DFh
.eh_frame_hdr:000000000001D632                 db 0FFh
.eh_frame_hdr:000000000001D633                 db 0FFh
.eh_frame_hdr:000000000001D634                 db 0F4h
.eh_frame_hdr:000000000001D635                 db  2Fh ; /
.eh_frame_hdr:000000000001D636                 db    0
.eh_frame_hdr:000000000001D637                 db    0
.eh_frame_hdr:000000000001D638                 db  1Ch
.eh_frame_hdr:000000000001D639                 db 0DFh
.eh_frame_hdr:000000000001D63A                 db 0FFh
.eh_frame_hdr:000000000001D63B                 db 0FFh
.eh_frame_hdr:000000000001D63C                 db  0Ch
.eh_frame_hdr:000000000001D63D                 db  30h ; 0
.eh_frame_hdr:000000000001D63E                 db    0
.eh_frame_hdr:000000000001D63F                 db    0
.eh_frame_hdr:000000000001D63F _eh_frame_hdr   ends
.eh_frame_hdr:000000000001D63F
.eh_frame:000000000001D640 ; ===========================================================================
.eh_frame:000000000001D640
.eh_frame:000000000001D640 ; Segment type: Pure data
.eh_frame:000000000001D640 ; Segment permissions: Read
.eh_frame:000000000001D640 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000001D640                 assume cs:_eh_frame
.eh_frame:000000000001D640                 ;org 1D640h
.eh_frame:000000000001D640                 db  14h
.eh_frame:000000000001D641                 db    0
.eh_frame:000000000001D642                 db    0
.eh_frame:000000000001D643                 db    0
.eh_frame:000000000001D644                 db    0
.eh_frame:000000000001D645                 db    0
.eh_frame:000000000001D646                 db    0
.eh_frame:000000000001D647                 db    0
.eh_frame:000000000001D648                 db    1
.eh_frame:000000000001D649                 db  7Ah ; z
.eh_frame:000000000001D64A                 db  52h ; R
.eh_frame:000000000001D64B                 db    0
.eh_frame:000000000001D64C                 db    1
.eh_frame:000000000001D64D                 db  78h ; x
.eh_frame:000000000001D64E                 db  10h
.eh_frame:000000000001D64F                 db    1
.eh_frame:000000000001D650                 db  1Bh
.eh_frame:000000000001D651                 db  0Ch
.eh_frame:000000000001D652                 db    7
.eh_frame:000000000001D653                 db    8
.eh_frame:000000000001D654                 db  90h
.eh_frame:000000000001D655                 db    1
.eh_frame:000000000001D656                 db    7
.eh_frame:000000000001D657                 db  10h
.eh_frame:000000000001D658                 db  14h
.eh_frame:000000000001D659                 db    0
.eh_frame:000000000001D65A                 db    0
.eh_frame:000000000001D65B                 db    0
.eh_frame:000000000001D65C                 db  1Ch
.eh_frame:000000000001D65D                 db    0
.eh_frame:000000000001D65E                 db    0
.eh_frame:000000000001D65F                 db    0
.eh_frame:000000000001D660                 db 0E0h
.eh_frame:000000000001D661                 db  71h ; q
.eh_frame:000000000001D662                 db 0FEh
.eh_frame:000000000001D663                 db 0FFh
.eh_frame:000000000001D664                 db  2Bh ; +
.eh_frame:000000000001D665                 db    0
.eh_frame:000000000001D666                 db    0
.eh_frame:000000000001D667                 db    0
.eh_frame:000000000001D668                 db    0
.eh_frame:000000000001D669                 db    0
.eh_frame:000000000001D66A                 db    0
.eh_frame:000000000001D66B                 db    0
.eh_frame:000000000001D66C                 db    0
.eh_frame:000000000001D66D                 db    0
.eh_frame:000000000001D66E                 db    0
.eh_frame:000000000001D66F                 db    0
.eh_frame:000000000001D670                 db  14h
.eh_frame:000000000001D671                 db    0
.eh_frame:000000000001D672                 db    0
.eh_frame:000000000001D673                 db    0
.eh_frame:000000000001D674                 db    0
.eh_frame:000000000001D675                 db    0
.eh_frame:000000000001D676                 db    0
.eh_frame:000000000001D677                 db    0
.eh_frame:000000000001D678                 db    1
.eh_frame:000000000001D679                 db  7Ah ; z
.eh_frame:000000000001D67A                 db  52h ; R
.eh_frame:000000000001D67B                 db    0
.eh_frame:000000000001D67C                 db    1
.eh_frame:000000000001D67D                 db  78h ; x
.eh_frame:000000000001D67E                 db  10h
.eh_frame:000000000001D67F                 db    1
.eh_frame:000000000001D680                 db  1Bh
.eh_frame:000000000001D681                 db  0Ch
.eh_frame:000000000001D682                 db    7
.eh_frame:000000000001D683                 db    8
.eh_frame:000000000001D684                 db  90h
.eh_frame:000000000001D685                 db    1
.eh_frame:000000000001D686                 db    0
.eh_frame:000000000001D687                 db    0
.eh_frame:000000000001D688                 db  24h ; $
.eh_frame:000000000001D689                 db    0
.eh_frame:000000000001D68A                 db    0
.eh_frame:000000000001D68B                 db    0
.eh_frame:000000000001D68C                 db  1Ch
.eh_frame:000000000001D68D                 db    0
.eh_frame:000000000001D68E                 db    0
.eh_frame:000000000001D68F                 db    0
.eh_frame:000000000001D690                 db 0B0h
.eh_frame:000000000001D691                 db  45h ; E
.eh_frame:000000000001D692                 db 0FEh
.eh_frame:000000000001D693                 db 0FFh
.eh_frame:000000000001D694                 db 0D0h
.eh_frame:000000000001D695                 db    4
.eh_frame:000000000001D696                 db    0
.eh_frame:000000000001D697                 db    0
.eh_frame:000000000001D698                 db    0
.eh_frame:000000000001D699                 db  0Eh
.eh_frame:000000000001D69A                 db  10h
.eh_frame:000000000001D69B                 db  46h ; F
.eh_frame:000000000001D69C                 db  0Eh
.eh_frame:000000000001D69D                 db  18h
.eh_frame:000000000001D69E                 db  4Ah ; J
.eh_frame:000000000001D69F                 db  0Fh
.eh_frame:000000000001D6A0                 db  0Bh
.eh_frame:000000000001D6A1                 db  77h ; w
.eh_frame:000000000001D6A2                 db    8
.eh_frame:000000000001D6A3                 db  80h
.eh_frame:000000000001D6A4                 db    0
.eh_frame:000000000001D6A5                 db  3Fh ; ?
.eh_frame:000000000001D6A6                 db  1Ah
.eh_frame:000000000001D6A7                 db  3Bh ; ;
.eh_frame:000000000001D6A8                 db  2Ah ; *
.eh_frame:000000000001D6A9                 db  33h ; 3
.eh_frame:000000000001D6AA                 db  24h ; $
.eh_frame:000000000001D6AB                 db  22h ; "
.eh_frame:000000000001D6AC                 db    0
.eh_frame:000000000001D6AD                 db    0
.eh_frame:000000000001D6AE                 db    0
.eh_frame:000000000001D6AF                 db    0
.eh_frame:000000000001D6B0                 db  14h
.eh_frame:000000000001D6B1                 db    0
.eh_frame:000000000001D6B2                 db    0
.eh_frame:000000000001D6B3                 db    0
.eh_frame:000000000001D6B4                 db  44h ; D
.eh_frame:000000000001D6B5                 db    0
.eh_frame:000000000001D6B6                 db    0
.eh_frame:000000000001D6B7                 db    0
.eh_frame:000000000001D6B8                 db  58h ; X
.eh_frame:000000000001D6B9                 db  4Ah ; J
.eh_frame:000000000001D6BA                 db 0FEh
.eh_frame:000000000001D6BB                 db 0FFh
.eh_frame:000000000001D6BC                 db    8
.eh_frame:000000000001D6BD                 db    0
.eh_frame:000000000001D6BE                 db    0
.eh_frame:000000000001D6BF                 db    0
.eh_frame:000000000001D6C0                 db    0
.eh_frame:000000000001D6C1                 db    0
.eh_frame:000000000001D6C2                 db    0
.eh_frame:000000000001D6C3                 db    0
.eh_frame:000000000001D6C4                 db    0
.eh_frame:000000000001D6C5                 db    0
.eh_frame:000000000001D6C6                 db    0
.eh_frame:000000000001D6C7                 db    0
.eh_frame:000000000001D6C8                 db  10h
.eh_frame:000000000001D6C9                 db    0
.eh_frame:000000000001D6CA                 db    0
.eh_frame:000000000001D6CB                 db    0
.eh_frame:000000000001D6CC                 db  5Ch ; \
.eh_frame:000000000001D6CD                 db    0
.eh_frame:000000000001D6CE                 db    0
.eh_frame:000000000001D6CF                 db    0
.eh_frame:000000000001D6D0                 db  80h
.eh_frame:000000000001D6D1                 db  72h ; r
.eh_frame:000000000001D6D2                 db 0FEh
.eh_frame:000000000001D6D3                 db 0FFh
.eh_frame:000000000001D6D4                 db 0B0h
.eh_frame:000000000001D6D5                 db    0
.eh_frame:000000000001D6D6                 db    0
.eh_frame:000000000001D6D7                 db    0
.eh_frame:000000000001D6D8                 db    0
.eh_frame:000000000001D6D9                 db    0
.eh_frame:000000000001D6DA                 db    0
.eh_frame:000000000001D6DB                 db    0
.eh_frame:000000000001D6DC                 db  14h
.eh_frame:000000000001D6DD                 db    0
.eh_frame:000000000001D6DE                 db    0
.eh_frame:000000000001D6DF                 db    0
.eh_frame:000000000001D6E0                 db  70h ; p
.eh_frame:000000000001D6E1                 db    0
.eh_frame:000000000001D6E2                 db    0
.eh_frame:000000000001D6E3                 db    0
.eh_frame:000000000001D6E4                 db  1Ch
.eh_frame:000000000001D6E5                 db  73h ; s
.eh_frame:000000000001D6E6                 db 0FEh
.eh_frame:000000000001D6E7                 db 0FFh
.eh_frame:000000000001D6E8                 db  2Dh ; -
.eh_frame:000000000001D6E9                 db    0
.eh_frame:000000000001D6EA                 db    0
.eh_frame:000000000001D6EB                 db    0
.eh_frame:000000000001D6EC                 db    0
.eh_frame:000000000001D6ED                 db  41h ; A
.eh_frame:000000000001D6EE                 db  0Eh
.eh_frame:000000000001D6EF                 db  10h
.eh_frame:000000000001D6F0                 db  83h
.eh_frame:000000000001D6F1                 db    2
.eh_frame:000000000001D6F2                 db    0
.eh_frame:000000000001D6F3                 db    0
.eh_frame:000000000001D6F4                 db  2Ch ; ,
.eh_frame:000000000001D6F5                 db    0
.eh_frame:000000000001D6F6                 db    0
.eh_frame:000000000001D6F7                 db    0
.eh_frame:000000000001D6F8                 db  88h
.eh_frame:000000000001D6F9                 db    0
.eh_frame:000000000001D6FA                 db    0
.eh_frame:000000000001D6FB                 db    0
.eh_frame:000000000001D6FC                 db  34h ; 4
.eh_frame:000000000001D6FD                 db  73h ; s
.eh_frame:000000000001D6FE                 db 0FEh
.eh_frame:000000000001D6FF                 db 0FFh
.eh_frame:000000000001D700                 db  7Ah ; z
.eh_frame:000000000001D701                 db    2
.eh_frame:000000000001D702                 db    0
.eh_frame:000000000001D703                 db    0
.eh_frame:000000000001D704                 db    0
.eh_frame:000000000001D705                 db  42h ; B
.eh_frame:000000000001D706                 db  0Eh
.eh_frame:000000000001D707                 db  10h
.eh_frame:000000000001D708                 db  8Ch
.eh_frame:000000000001D709                 db    2
.eh_frame:000000000001D70A                 db  41h ; A
.eh_frame:000000000001D70B                 db  0Eh
.eh_frame:000000000001D70C                 db  18h
.eh_frame:000000000001D70D                 db  86h
.eh_frame:000000000001D70E                 db    3
.eh_frame:000000000001D70F                 db  41h ; A
.eh_frame:000000000001D710                 db  0Eh
.eh_frame:000000000001D711                 db  20h
.eh_frame:000000000001D712                 db  83h
.eh_frame:000000000001D713                 db    4
.eh_frame:000000000001D714                 db    2
.eh_frame:000000000001D715                 db  42h ; B
.eh_frame:000000000001D716                 db  0Ah
.eh_frame:000000000001D717                 db  0Eh
.eh_frame:000000000001D718                 db  18h
.eh_frame:000000000001D719                 db  41h ; A
.eh_frame:000000000001D71A                 db  0Eh
.eh_frame:000000000001D71B                 db  10h
.eh_frame:000000000001D71C                 db  42h ; B
.eh_frame:000000000001D71D                 db  0Eh
.eh_frame:000000000001D71E                 db    8
.eh_frame:000000000001D71F                 db  47h ; G
.eh_frame:000000000001D720                 db  0Bh
.eh_frame:000000000001D721                 db    0
.eh_frame:000000000001D722                 db    0
.eh_frame:000000000001D723                 db    0
.eh_frame:000000000001D724                 db  2Ch ; ,
.eh_frame:000000000001D725                 db    0
.eh_frame:000000000001D726                 db    0
.eh_frame:000000000001D727                 db    0
.eh_frame:000000000001D728                 db 0B8h
.eh_frame:000000000001D729                 db    0
.eh_frame:000000000001D72A                 db    0
.eh_frame:000000000001D72B                 db    0
.eh_frame:000000000001D72C                 db  84h
.eh_frame:000000000001D72D                 db  75h ; u
.eh_frame:000000000001D72E                 db 0FEh
.eh_frame:000000000001D72F                 db 0FFh
.eh_frame:000000000001D730                 db  9Dh
.eh_frame:000000000001D731                 db    0
.eh_frame:000000000001D732                 db    0
.eh_frame:000000000001D733                 db    0
.eh_frame:000000000001D734                 db    0
.eh_frame:000000000001D735                 db  4Dh ; M
.eh_frame:000000000001D736                 db  0Eh
.eh_frame:000000000001D737                 db  10h
.eh_frame:000000000001D738                 db  8Ch
.eh_frame:000000000001D739                 db    2
.eh_frame:000000000001D73A                 db  41h ; A
.eh_frame:000000000001D73B                 db  0Eh
.eh_frame:000000000001D73C                 db  18h
.eh_frame:000000000001D73D                 db  86h
.eh_frame:000000000001D73E                 db    3
.eh_frame:000000000001D73F                 db  41h ; A
.eh_frame:000000000001D740                 db  0Eh
.eh_frame:000000000001D741                 db  20h
.eh_frame:000000000001D742                 db  83h
.eh_frame:000000000001D743                 db    4
.eh_frame:000000000001D744                 db    2
.eh_frame:000000000001D745                 db  4Bh ; K
.eh_frame:000000000001D746                 db  0Ah
.eh_frame:000000000001D747                 db  0Eh
.eh_frame:000000000001D748                 db  18h
.eh_frame:000000000001D749                 db  44h ; D
.eh_frame:000000000001D74A                 db  0Eh
.eh_frame:000000000001D74B                 db  10h
.eh_frame:000000000001D74C                 db  42h ; B
.eh_frame:000000000001D74D                 db  0Eh
.eh_frame:000000000001D74E                 db    8
.eh_frame:000000000001D74F                 db  45h ; E
.eh_frame:000000000001D750                 db  0Bh
.eh_frame:000000000001D751                 db    0
.eh_frame:000000000001D752                 db    0
.eh_frame:000000000001D753                 db    0
.eh_frame:000000000001D754                 db  28h ; (
.eh_frame:000000000001D755                 db    0
.eh_frame:000000000001D756                 db    0
.eh_frame:000000000001D757                 db    0
.eh_frame:000000000001D758                 db 0E8h
.eh_frame:000000000001D759                 db    0
.eh_frame:000000000001D75A                 db    0
.eh_frame:000000000001D75B                 db    0
.eh_frame:000000000001D75C                 db 0F4h
.eh_frame:000000000001D75D                 db  75h ; u
.eh_frame:000000000001D75E                 db 0FEh
.eh_frame:000000000001D75F                 db 0FFh
.eh_frame:000000000001D760                 db 0D3h
.eh_frame:000000000001D761                 db    0
.eh_frame:000000000001D762                 db    0
.eh_frame:000000000001D763                 db    0
.eh_frame:000000000001D764                 db    0
.eh_frame:000000000001D765                 db  41h ; A
.eh_frame:000000000001D766                 db  0Eh
.eh_frame:000000000001D767                 db  10h
.eh_frame:000000000001D768                 db  86h
.eh_frame:000000000001D769                 db    2
.eh_frame:000000000001D76A                 db  41h ; A
.eh_frame:000000000001D76B                 db  0Eh
.eh_frame:000000000001D76C                 db  18h
.eh_frame:000000000001D76D                 db  83h
.eh_frame:000000000001D76E                 db    3
.eh_frame:000000000001D76F                 db  47h ; G
.eh_frame:000000000001D770                 db  0Eh
.eh_frame:000000000001D771                 db  30h ; 0
.eh_frame:000000000001D772                 db    2
.eh_frame:000000000001D773                 db  55h ; U
.eh_frame:000000000001D774                 db  0Ah
.eh_frame:000000000001D775                 db  0Eh
.eh_frame:000000000001D776                 db  18h
.eh_frame:000000000001D777                 db  41h ; A
.eh_frame:000000000001D778                 db  0Eh
.eh_frame:000000000001D779                 db  10h
.eh_frame:000000000001D77A                 db  41h ; A
.eh_frame:000000000001D77B                 db  0Eh
.eh_frame:000000000001D77C                 db    8
.eh_frame:000000000001D77D                 db  48h ; H
.eh_frame:000000000001D77E                 db  0Bh
.eh_frame:000000000001D77F                 db    0
.eh_frame:000000000001D780                 db  38h ; 8
.eh_frame:000000000001D781                 db    0
.eh_frame:000000000001D782                 db    0
.eh_frame:000000000001D783                 db    0
.eh_frame:000000000001D784                 db  14h
.eh_frame:000000000001D785                 db    1
.eh_frame:000000000001D786                 db    0
.eh_frame:000000000001D787                 db    0
.eh_frame:000000000001D788                 db 0A8h
.eh_frame:000000000001D789                 db  76h ; v
.eh_frame:000000000001D78A                 db 0FEh
.eh_frame:000000000001D78B                 db 0FFh
.eh_frame:000000000001D78C                 db  17h
.eh_frame:000000000001D78D                 db    1
.eh_frame:000000000001D78E                 db    0
.eh_frame:000000000001D78F                 db    0
.eh_frame:000000000001D790                 db    0
.eh_frame:000000000001D791                 db  42h ; B
.eh_frame:000000000001D792                 db  0Eh
.eh_frame:000000000001D793                 db  10h
.eh_frame:000000000001D794                 db  8Dh
.eh_frame:000000000001D795                 db    2
.eh_frame:000000000001D796                 db  42h ; B
.eh_frame:000000000001D797                 db  0Eh
.eh_frame:000000000001D798                 db  18h
.eh_frame:000000000001D799                 db  8Ch
.eh_frame:000000000001D79A                 db    3
.eh_frame:000000000001D79B                 db  44h ; D
.eh_frame:000000000001D79C                 db  0Eh
.eh_frame:000000000001D79D                 db  20h
.eh_frame:000000000001D79E                 db  86h
.eh_frame:000000000001D79F                 db    4
.eh_frame:000000000001D7A0                 db  41h ; A
.eh_frame:000000000001D7A1                 db  0Eh
.eh_frame:000000000001D7A2                 db  28h ; (
.eh_frame:000000000001D7A3                 db  83h
.eh_frame:000000000001D7A4                 db    5
.eh_frame:000000000001D7A5                 db  49h ; I
.eh_frame:000000000001D7A6                 db  0Eh
.eh_frame:000000000001D7A7                 db  50h ; P
.eh_frame:000000000001D7A8                 db    2
.eh_frame:000000000001D7A9                 db  96h
.eh_frame:000000000001D7AA                 db  0Ah
.eh_frame:000000000001D7AB                 db  0Eh
.eh_frame:000000000001D7AC                 db  28h ; (
.eh_frame:000000000001D7AD                 db  41h ; A
.eh_frame:000000000001D7AE                 db  0Eh
.eh_frame:000000000001D7AF                 db  20h
.eh_frame:000000000001D7B0                 db  41h ; A
.eh_frame:000000000001D7B1                 db  0Eh
.eh_frame:000000000001D7B2                 db  18h
.eh_frame:000000000001D7B3                 db  42h ; B
.eh_frame:000000000001D7B4                 db  0Eh
.eh_frame:000000000001D7B5                 db  10h
.eh_frame:000000000001D7B6                 db  42h ; B
.eh_frame:000000000001D7B7                 db  0Eh
.eh_frame:000000000001D7B8                 db    8
.eh_frame:000000000001D7B9                 db  42h ; B
.eh_frame:000000000001D7BA                 db  0Bh
.eh_frame:000000000001D7BB                 db    0
.eh_frame:000000000001D7BC                 db  1Ch
.eh_frame:000000000001D7BD                 db    0
.eh_frame:000000000001D7BE                 db    0
.eh_frame:000000000001D7BF                 db    0
.eh_frame:000000000001D7C0                 db  50h ; P
.eh_frame:000000000001D7C1                 db    1
.eh_frame:000000000001D7C2                 db    0
.eh_frame:000000000001D7C3                 db    0
.eh_frame:000000000001D7C4                 db  8Ch
.eh_frame:000000000001D7C5                 db  77h ; w
.eh_frame:000000000001D7C6                 db 0FEh
.eh_frame:000000000001D7C7                 db 0FFh
.eh_frame:000000000001D7C8                 db  4Ah ; J
.eh_frame:000000000001D7C9                 db    0
.eh_frame:000000000001D7CA                 db    0
.eh_frame:000000000001D7CB                 db    0
.eh_frame:000000000001D7CC                 db    0
.eh_frame:000000000001D7CD                 db  46h ; F
.eh_frame:000000000001D7CE                 db  0Eh
.eh_frame:000000000001D7CF                 db  10h
.eh_frame:000000000001D7D0                 db  83h
.eh_frame:000000000001D7D1                 db    2
.eh_frame:000000000001D7D2                 db  6Dh ; m
.eh_frame:000000000001D7D3                 db  0Ah
.eh_frame:000000000001D7D4                 db  0Eh
.eh_frame:000000000001D7D5                 db    8
.eh_frame:000000000001D7D6                 db  45h ; E
.eh_frame:000000000001D7D7                 db  0Bh
.eh_frame:000000000001D7D8                 db  50h ; P
.eh_frame:000000000001D7D9                 db  0Eh
.eh_frame:000000000001D7DA                 db    8
.eh_frame:000000000001D7DB                 db 0C3h
.eh_frame:000000000001D7DC                 db  7Ch ; |
.eh_frame:000000000001D7DD                 db    0
.eh_frame:000000000001D7DE                 db    0
.eh_frame:000000000001D7DF                 db    0
.eh_frame:000000000001D7E0                 db  70h ; p
.eh_frame:000000000001D7E1                 db    1
.eh_frame:000000000001D7E2                 db    0
.eh_frame:000000000001D7E3                 db    0
.eh_frame:000000000001D7E4                 db 0BCh
.eh_frame:000000000001D7E5                 db  77h ; w
.eh_frame:000000000001D7E6                 db 0FEh
.eh_frame:000000000001D7E7                 db 0FFh
.eh_frame:000000000001D7E8                 db  72h ; r
.eh_frame:000000000001D7E9                 db    4
.eh_frame:000000000001D7EA                 db    0
.eh_frame:000000000001D7EB                 db    0
.eh_frame:000000000001D7EC                 db    0
.eh_frame:000000000001D7ED                 db  4Bh ; K
.eh_frame:000000000001D7EE                 db  0Eh
.eh_frame:000000000001D7EF                 db  10h
.eh_frame:000000000001D7F0                 db  8Fh
.eh_frame:000000000001D7F1                 db    2
.eh_frame:000000000001D7F2                 db  42h ; B
.eh_frame:000000000001D7F3                 db  0Eh
.eh_frame:000000000001D7F4                 db  18h
.eh_frame:000000000001D7F5                 db  8Eh
.eh_frame:000000000001D7F6                 db    3
.eh_frame:000000000001D7F7                 db  49h ; I
.eh_frame:000000000001D7F8                 db  0Eh
.eh_frame:000000000001D7F9                 db  20h
.eh_frame:000000000001D7FA                 db  8Dh
.eh_frame:000000000001D7FB                 db    4
.eh_frame:000000000001D7FC                 db  42h ; B
.eh_frame:000000000001D7FD                 db  0Eh
.eh_frame:000000000001D7FE                 db  28h ; (
.eh_frame:000000000001D7FF                 db  8Ch
.eh_frame:000000000001D800                 db    5
.eh_frame:000000000001D801                 db  48h ; H
.eh_frame:000000000001D802                 db  0Eh
.eh_frame:000000000001D803                 db  30h ; 0
.eh_frame:000000000001D804                 db  86h
.eh_frame:000000000001D805                 db    6
.eh_frame:000000000001D806                 db  41h ; A
.eh_frame:000000000001D807                 db  0Eh
.eh_frame:000000000001D808                 db  38h ; 8
.eh_frame:000000000001D809                 db  83h
.eh_frame:000000000001D80A                 db    7
.eh_frame:000000000001D80B                 db  51h ; Q
.eh_frame:000000000001D80C                 db  0Eh
.eh_frame:000000000001D80D                 db  50h ; P
.eh_frame:000000000001D80E                 db    2
.eh_frame:000000000001D80F                 db  98h
.eh_frame:000000000001D810                 db  0Ah
.eh_frame:000000000001D811                 db  0Eh
.eh_frame:000000000001D812                 db  38h ; 8
.eh_frame:000000000001D813                 db  41h ; A
.eh_frame:000000000001D814                 db  0Eh
.eh_frame:000000000001D815                 db  30h ; 0
.eh_frame:000000000001D816                 db  41h ; A
.eh_frame:000000000001D817                 db  0Eh
.eh_frame:000000000001D818                 db  28h ; (
.eh_frame:000000000001D819                 db  42h ; B
.eh_frame:000000000001D81A                 db  0Eh
.eh_frame:000000000001D81B                 db  20h
.eh_frame:000000000001D81C                 db  42h ; B
.eh_frame:000000000001D81D                 db  0Eh
.eh_frame:000000000001D81E                 db  18h
.eh_frame:000000000001D81F                 db  42h ; B
.eh_frame:000000000001D820                 db  0Eh
.eh_frame:000000000001D821                 db  10h
.eh_frame:000000000001D822                 db  42h ; B
.eh_frame:000000000001D823                 db  0Eh
.eh_frame:000000000001D824                 db    8
.eh_frame:000000000001D825                 db  44h ; D
.eh_frame:000000000001D826                 db  0Bh
.eh_frame:000000000001D827                 db    2
.eh_frame:000000000001D828                 db  59h ; Y
.eh_frame:000000000001D829                 db  0Ah
.eh_frame:000000000001D82A                 db  0Eh
.eh_frame:000000000001D82B                 db  38h ; 8
.eh_frame:000000000001D82C                 db  41h ; A
.eh_frame:000000000001D82D                 db  0Eh
.eh_frame:000000000001D82E                 db  30h ; 0
.eh_frame:000000000001D82F                 db  41h ; A
.eh_frame:000000000001D830                 db  0Eh
.eh_frame:000000000001D831                 db  28h ; (
.eh_frame:000000000001D832                 db  42h ; B
.eh_frame:000000000001D833                 db  0Eh
.eh_frame:000000000001D834                 db  20h
.eh_frame:000000000001D835                 db  42h ; B
.eh_frame:000000000001D836                 db  0Eh
.eh_frame:000000000001D837                 db  18h
.eh_frame:000000000001D838                 db  42h ; B
.eh_frame:000000000001D839                 db  0Eh
.eh_frame:000000000001D83A                 db  10h
.eh_frame:000000000001D83B                 db  42h ; B
.eh_frame:000000000001D83C                 db  0Eh
.eh_frame:000000000001D83D                 db    8
.eh_frame:000000000001D83E                 db  45h ; E
.eh_frame:000000000001D83F                 db  0Bh
.eh_frame:000000000001D840                 db    2
.eh_frame:000000000001D841                 db 0E0h
.eh_frame:000000000001D842                 db  0Eh
.eh_frame:000000000001D843                 db    8
.eh_frame:000000000001D844                 db 0C3h
.eh_frame:000000000001D845                 db 0C6h
.eh_frame:000000000001D846                 db 0CCh
.eh_frame:000000000001D847                 db 0CDh
.eh_frame:000000000001D848                 db 0CEh
.eh_frame:000000000001D849                 db 0CFh
.eh_frame:000000000001D84A                 db  42h ; B
.eh_frame:000000000001D84B                 db  0Eh
.eh_frame:000000000001D84C                 db  50h ; P
.eh_frame:000000000001D84D                 db  83h
.eh_frame:000000000001D84E                 db    7
.eh_frame:000000000001D84F                 db  86h
.eh_frame:000000000001D850                 db    6
.eh_frame:000000000001D851                 db  8Ch
.eh_frame:000000000001D852                 db    5
.eh_frame:000000000001D853                 db  8Dh
.eh_frame:000000000001D854                 db    4
.eh_frame:000000000001D855                 db  8Eh
.eh_frame:000000000001D856                 db    3
.eh_frame:000000000001D857                 db  8Fh
.eh_frame:000000000001D858                 db    2
.eh_frame:000000000001D859                 db    0
.eh_frame:000000000001D85A                 db    0
.eh_frame:000000000001D85B                 db    0
.eh_frame:000000000001D85C                 db  20h
.eh_frame:000000000001D85D                 db    0
.eh_frame:000000000001D85E                 db    0
.eh_frame:000000000001D85F                 db    0
.eh_frame:000000000001D860                 db 0F0h
.eh_frame:000000000001D861                 db    1
.eh_frame:000000000001D862                 db    0
.eh_frame:000000000001D863                 db    0
.eh_frame:000000000001D864                 db 0BCh
.eh_frame:000000000001D865                 db  7Bh ; {
.eh_frame:000000000001D866                 db 0FEh
.eh_frame:000000000001D867                 db 0FFh
.eh_frame:000000000001D868                 db  2Fh ; /
.eh_frame:000000000001D869                 db    0
.eh_frame:000000000001D86A                 db    0
.eh_frame:000000000001D86B                 db    0
.eh_frame:000000000001D86C                 db    0
.eh_frame:000000000001D86D                 db  41h ; A
.eh_frame:000000000001D86E                 db  0Eh
.eh_frame:000000000001D86F                 db  10h
.eh_frame:000000000001D870                 db  86h
.eh_frame:000000000001D871                 db    2
.eh_frame:000000000001D872                 db  41h ; A
.eh_frame:000000000001D873                 db  0Eh
.eh_frame:000000000001D874                 db  18h
.eh_frame:000000000001D875                 db  83h
.eh_frame:000000000001D876                 db    3
.eh_frame:000000000001D877                 db  5Fh ; _
.eh_frame:000000000001D878                 db  0Ah
.eh_frame:000000000001D879                 db  0Eh
.eh_frame:000000000001D87A                 db  10h
.eh_frame:000000000001D87B                 db  41h ; A
.eh_frame:000000000001D87C                 db  0Eh
.eh_frame:000000000001D87D                 db    8
.eh_frame:000000000001D87E                 db  46h ; F
.eh_frame:000000000001D87F                 db  0Bh
.eh_frame:000000000001D880                 db  50h ; P
.eh_frame:000000000001D881                 db    0
.eh_frame:000000000001D882                 db    0
.eh_frame:000000000001D883                 db    0
.eh_frame:000000000001D884                 db  14h
.eh_frame:000000000001D885                 db    2
.eh_frame:000000000001D886                 db    0
.eh_frame:000000000001D887                 db    0
.eh_frame:000000000001D888                 db 0C8h
.eh_frame:000000000001D889                 db  7Bh ; {
.eh_frame:000000000001D88A                 db 0FEh
.eh_frame:000000000001D88B                 db 0FFh
.eh_frame:000000000001D88C                 db  81h
.eh_frame:000000000001D88D                 db    0
.eh_frame:000000000001D88E                 db    0
.eh_frame:000000000001D88F                 db    0
.eh_frame:000000000001D890                 db    0
.eh_frame:000000000001D891                 db  48h ; H
.eh_frame:000000000001D892                 db  0Eh
.eh_frame:000000000001D893                 db  10h
.eh_frame:000000000001D894                 db  8Eh
.eh_frame:000000000001D895                 db    2
.eh_frame:000000000001D896                 db  45h ; E
.eh_frame:000000000001D897                 db  0Eh
.eh_frame:000000000001D898                 db  18h
.eh_frame:000000000001D899                 db  8Dh
.eh_frame:000000000001D89A                 db    3
.eh_frame:000000000001D89B                 db  45h ; E
.eh_frame:000000000001D89C                 db  0Eh
.eh_frame:000000000001D89D                 db  20h
.eh_frame:000000000001D89E                 db  8Ch
.eh_frame:000000000001D89F                 db    4
.eh_frame:000000000001D8A0                 db  44h ; D
.eh_frame:000000000001D8A1                 db  0Eh
.eh_frame:000000000001D8A2                 db  28h ; (
.eh_frame:000000000001D8A3                 db  86h
.eh_frame:000000000001D8A4                 db    5
.eh_frame:000000000001D8A5                 db  44h ; D
.eh_frame:000000000001D8A6                 db  0Eh
.eh_frame:000000000001D8A7                 db  30h ; 0
.eh_frame:000000000001D8A8                 db  83h
.eh_frame:000000000001D8A9                 db    6
.eh_frame:000000000001D8AA                 db    2
.eh_frame:000000000001D8AB                 db  42h ; B
.eh_frame:000000000001D8AC                 db  0Ah
.eh_frame:000000000001D8AD                 db  0Eh
.eh_frame:000000000001D8AE                 db  28h ; (
.eh_frame:000000000001D8AF                 db  43h ; C
.eh_frame:000000000001D8B0                 db  0Eh
.eh_frame:000000000001D8B1                 db  20h
.eh_frame:000000000001D8B2                 db  42h ; B
.eh_frame:000000000001D8B3                 db  0Eh
.eh_frame:000000000001D8B4                 db  18h
.eh_frame:000000000001D8B5                 db  42h ; B
.eh_frame:000000000001D8B6                 db  0Eh
.eh_frame:000000000001D8B7                 db  10h
.eh_frame:000000000001D8B8                 db  42h ; B
.eh_frame:000000000001D8B9                 db  0Eh
.eh_frame:000000000001D8BA                 db    8
.eh_frame:000000000001D8BB                 db  4Bh ; K
.eh_frame:000000000001D8BC                 db  0Bh
.eh_frame:000000000001D8BD                 db  41h ; A
.eh_frame:000000000001D8BE                 db  0Eh
.eh_frame:000000000001D8BF                 db  28h ; (
.eh_frame:000000000001D8C0                 db  46h ; F
.eh_frame:000000000001D8C1                 db  0Eh
.eh_frame:000000000001D8C2                 db  20h
.eh_frame:000000000001D8C3                 db  42h ; B
.eh_frame:000000000001D8C4                 db  0Eh
.eh_frame:000000000001D8C5                 db  18h
.eh_frame:000000000001D8C6                 db  42h ; B
.eh_frame:000000000001D8C7                 db  0Eh
.eh_frame:000000000001D8C8                 db  10h
.eh_frame:000000000001D8C9                 db  42h ; B
.eh_frame:000000000001D8CA                 db  0Eh
.eh_frame:000000000001D8CB                 db    8
.eh_frame:000000000001D8CC                 db  41h ; A
.eh_frame:000000000001D8CD                 db 0C3h
.eh_frame:000000000001D8CE                 db 0C6h
.eh_frame:000000000001D8CF                 db 0CCh
.eh_frame:000000000001D8D0                 db 0CDh
.eh_frame:000000000001D8D1                 db 0CEh
.eh_frame:000000000001D8D2                 db    0
.eh_frame:000000000001D8D3                 db    0
.eh_frame:000000000001D8D4                 db  28h ; (
.eh_frame:000000000001D8D5                 db    0
.eh_frame:000000000001D8D6                 db    0
.eh_frame:000000000001D8D7                 db    0
.eh_frame:000000000001D8D8                 db  68h ; h
.eh_frame:000000000001D8D9                 db    2
.eh_frame:000000000001D8DA                 db    0
.eh_frame:000000000001D8DB                 db    0
.eh_frame:000000000001D8DC                 db    4
.eh_frame:000000000001D8DD                 db  7Ch ; |
.eh_frame:000000000001D8DE                 db 0FEh
.eh_frame:000000000001D8DF                 db 0FFh
.eh_frame:000000000001D8E0                 db  4Ah ; J
.eh_frame:000000000001D8E1                 db    4
.eh_frame:000000000001D8E2                 db    0
.eh_frame:000000000001D8E3                 db    0
.eh_frame:000000000001D8E4                 db    0
.eh_frame:000000000001D8E5                 db  42h ; B
.eh_frame:000000000001D8E6                 db  0Eh
.eh_frame:000000000001D8E7                 db  10h
.eh_frame:000000000001D8E8                 db  8Dh
.eh_frame:000000000001D8E9                 db    2
.eh_frame:000000000001D8EA                 db  42h ; B
.eh_frame:000000000001D8EB                 db  0Eh
.eh_frame:000000000001D8EC                 db  18h
.eh_frame:000000000001D8ED                 db  8Ch
.eh_frame:000000000001D8EE                 db    3
.eh_frame:000000000001D8EF                 db  46h ; F
.eh_frame:000000000001D8F0                 db  0Eh
.eh_frame:000000000001D8F1                 db  20h
.eh_frame:000000000001D8F2                 db  86h
.eh_frame:000000000001D8F3                 db    4
.eh_frame:000000000001D8F4                 db  41h ; A
.eh_frame:000000000001D8F5                 db  0Eh
.eh_frame:000000000001D8F6                 db  28h ; (
.eh_frame:000000000001D8F7                 db  83h
.eh_frame:000000000001D8F8                 db    5
.eh_frame:000000000001D8F9                 db  49h ; I
.eh_frame:000000000001D8FA                 db  0Eh
.eh_frame:000000000001D8FB                 db 0B0h
.eh_frame:000000000001D8FC                 db    1
.eh_frame:000000000001D8FD                 db    0
.eh_frame:000000000001D8FE                 db    0
.eh_frame:000000000001D8FF                 db    0
.eh_frame:000000000001D900                 db  4Ch ; L
.eh_frame:000000000001D901                 db    0
.eh_frame:000000000001D902                 db    0
.eh_frame:000000000001D903                 db    0
.eh_frame:000000000001D904                 db  94h
.eh_frame:000000000001D905                 db    2
.eh_frame:000000000001D906                 db    0
.eh_frame:000000000001D907                 db    0
.eh_frame:000000000001D908                 db  88h
.eh_frame:000000000001D909                 db  48h ; H
.eh_frame:000000000001D90A                 db 0FEh
.eh_frame:000000000001D90B                 db 0FFh
.eh_frame:000000000001D90C                 db 0AAh
.eh_frame:000000000001D90D                 db  26h ; &
.eh_frame:000000000001D90E                 db    0
.eh_frame:000000000001D90F                 db    0
.eh_frame:000000000001D910                 db    0
.eh_frame:000000000001D911                 db  42h ; B
.eh_frame:000000000001D912                 db  0Eh
.eh_frame:000000000001D913                 db  10h
.eh_frame:000000000001D914                 db  8Fh
.eh_frame:000000000001D915                 db    2
.eh_frame:000000000001D916                 db  42h ; B
.eh_frame:000000000001D917                 db  0Eh
.eh_frame:000000000001D918                 db  18h
.eh_frame:000000000001D919                 db  8Eh
.eh_frame:000000000001D91A                 db    3
.eh_frame:000000000001D91B                 db  49h ; I
.eh_frame:000000000001D91C                 db  0Eh
.eh_frame:000000000001D91D                 db  20h
.eh_frame:000000000001D91E                 db  8Dh
.eh_frame:000000000001D91F                 db    4
.eh_frame:000000000001D920                 db  42h ; B
.eh_frame:000000000001D921                 db  0Eh
.eh_frame:000000000001D922                 db  28h ; (
.eh_frame:000000000001D923                 db  8Ch
.eh_frame:000000000001D924                 db    5
.eh_frame:000000000001D925                 db  48h ; H
.eh_frame:000000000001D926                 db  0Eh
.eh_frame:000000000001D927                 db  30h ; 0
.eh_frame:000000000001D928                 db  86h
.eh_frame:000000000001D929                 db    6
.eh_frame:000000000001D92A                 db  41h ; A
.eh_frame:000000000001D92B                 db  0Eh
.eh_frame:000000000001D92C                 db  38h ; 8
.eh_frame:000000000001D92D                 db  83h
.eh_frame:000000000001D92E                 db    7
.eh_frame:000000000001D92F                 db  53h ; S
.eh_frame:000000000001D930                 db  0Eh
.eh_frame:000000000001D931                 db 0D0h
.eh_frame:000000000001D932                 db    1
.eh_frame:000000000001D933                 db    3
.eh_frame:000000000001D934                 db  9Eh
.eh_frame:000000000001D935                 db  1Ah
.eh_frame:000000000001D936                 db  0Ah
.eh_frame:000000000001D937                 db  0Eh
.eh_frame:000000000001D938                 db  38h ; 8
.eh_frame:000000000001D939                 db  41h ; A
.eh_frame:000000000001D93A                 db  0Eh
.eh_frame:000000000001D93B                 db  30h ; 0
.eh_frame:000000000001D93C                 db  41h ; A
.eh_frame:000000000001D93D                 db  0Eh
.eh_frame:000000000001D93E                 db  28h ; (
.eh_frame:000000000001D93F                 db  42h ; B
.eh_frame:000000000001D940                 db  0Eh
.eh_frame:000000000001D941                 db  20h
.eh_frame:000000000001D942                 db  42h ; B
.eh_frame:000000000001D943                 db  0Eh
.eh_frame:000000000001D944                 db  18h
.eh_frame:000000000001D945                 db  42h ; B
.eh_frame:000000000001D946                 db  0Eh
.eh_frame:000000000001D947                 db  10h
.eh_frame:000000000001D948                 db  42h ; B
.eh_frame:000000000001D949                 db  0Eh
.eh_frame:000000000001D94A                 db    8
.eh_frame:000000000001D94B                 db  41h ; A
.eh_frame:000000000001D94C                 db  0Bh
.eh_frame:000000000001D94D                 db    0
.eh_frame:000000000001D94E                 db    0
.eh_frame:000000000001D94F                 db    0
.eh_frame:000000000001D950                 db  10h
.eh_frame:000000000001D951                 db    0
.eh_frame:000000000001D952                 db    0
.eh_frame:000000000001D953                 db    0
.eh_frame:000000000001D954                 db 0E4h
.eh_frame:000000000001D955                 db    2
.eh_frame:000000000001D956                 db    0
.eh_frame:000000000001D957                 db    0
.eh_frame:000000000001D958                 db 0D8h
.eh_frame:000000000001D959                 db  7Fh ; 
.eh_frame:000000000001D95A                 db 0FEh
.eh_frame:000000000001D95B                 db 0FFh
.eh_frame:000000000001D95C                 db  0Ah
.eh_frame:000000000001D95D                 db    0
.eh_frame:000000000001D95E                 db    0
.eh_frame:000000000001D95F                 db    0
.eh_frame:000000000001D960                 db    0
.eh_frame:000000000001D961                 db    0
.eh_frame:000000000001D962                 db    0
.eh_frame:000000000001D963                 db    0
.eh_frame:000000000001D964                 db  48h ; H
.eh_frame:000000000001D965                 db    0
.eh_frame:000000000001D966                 db    0
.eh_frame:000000000001D967                 db    0
.eh_frame:000000000001D968                 db 0F8h
.eh_frame:000000000001D969                 db    2
.eh_frame:000000000001D96A                 db    0
.eh_frame:000000000001D96B                 db    0
.eh_frame:000000000001D96C                 db 0D4h
.eh_frame:000000000001D96D                 db  7Fh ; 
.eh_frame:000000000001D96E                 db 0FEh
.eh_frame:000000000001D96F                 db 0FFh
.eh_frame:000000000001D970                 db  16h
.eh_frame:000000000001D971                 db    1
.eh_frame:000000000001D972                 db    0
.eh_frame:000000000001D973                 db    0
.eh_frame:000000000001D974                 db    0
.eh_frame:000000000001D975                 db  42h ; B
.eh_frame:000000000001D976                 db  0Eh
.eh_frame:000000000001D977                 db  10h
.eh_frame:000000000001D978                 db  8Fh
.eh_frame:000000000001D979                 db    2
.eh_frame:000000000001D97A                 db  42h ; B
.eh_frame:000000000001D97B                 db  0Eh
.eh_frame:000000000001D97C                 db  18h
.eh_frame:000000000001D97D                 db  8Eh
.eh_frame:000000000001D97E                 db    3
.eh_frame:000000000001D97F                 db  45h ; E
.eh_frame:000000000001D980                 db  0Eh
.eh_frame:000000000001D981                 db  20h
.eh_frame:000000000001D982                 db  8Dh
.eh_frame:000000000001D983                 db    4
.eh_frame:000000000001D984                 db  42h ; B
.eh_frame:000000000001D985                 db  0Eh
.eh_frame:000000000001D986                 db  28h ; (
.eh_frame:000000000001D987                 db  8Ch
.eh_frame:000000000001D988                 db    5
.eh_frame:000000000001D989                 db  44h ; D
.eh_frame:000000000001D98A                 db  0Eh
.eh_frame:000000000001D98B                 db  30h ; 0
.eh_frame:000000000001D98C                 db  86h
.eh_frame:000000000001D98D                 db    6
.eh_frame:000000000001D98E                 db  41h ; A
.eh_frame:000000000001D98F                 db  0Eh
.eh_frame:000000000001D990                 db  38h ; 8
.eh_frame:000000000001D991                 db  83h
.eh_frame:000000000001D992                 db    7
.eh_frame:000000000001D993                 db  47h ; G
.eh_frame:000000000001D994                 db  0Eh
.eh_frame:000000000001D995                 db  60h ; `
.eh_frame:000000000001D996                 db    2
.eh_frame:000000000001D997                 db 0DEh
.eh_frame:000000000001D998                 db  0Ah
.eh_frame:000000000001D999                 db  0Eh
.eh_frame:000000000001D99A                 db  38h ; 8
.eh_frame:000000000001D99B                 db  41h ; A
.eh_frame:000000000001D99C                 db  0Eh
.eh_frame:000000000001D99D                 db  30h ; 0
.eh_frame:000000000001D99E                 db  41h ; A
.eh_frame:000000000001D99F                 db  0Eh
.eh_frame:000000000001D9A0                 db  28h ; (
.eh_frame:000000000001D9A1                 db  42h ; B
.eh_frame:000000000001D9A2                 db  0Eh
.eh_frame:000000000001D9A3                 db  20h
.eh_frame:000000000001D9A4                 db  42h ; B
.eh_frame:000000000001D9A5                 db  0Eh
.eh_frame:000000000001D9A6                 db  18h
.eh_frame:000000000001D9A7                 db  42h ; B
.eh_frame:000000000001D9A8                 db  0Eh
.eh_frame:000000000001D9A9                 db  10h
.eh_frame:000000000001D9AA                 db  42h ; B
.eh_frame:000000000001D9AB                 db  0Eh
.eh_frame:000000000001D9AC                 db    8
.eh_frame:000000000001D9AD                 db  41h ; A
.eh_frame:000000000001D9AE                 db  0Bh
.eh_frame:000000000001D9AF                 db    0
.eh_frame:000000000001D9B0                 db  28h ; (
.eh_frame:000000000001D9B1                 db    0
.eh_frame:000000000001D9B2                 db    0
.eh_frame:000000000001D9B3                 db    0
.eh_frame:000000000001D9B4                 db  44h ; D
.eh_frame:000000000001D9B5                 db    3
.eh_frame:000000000001D9B6                 db    0
.eh_frame:000000000001D9B7                 db    0
.eh_frame:000000000001D9B8                 db 0A8h
.eh_frame:000000000001D9B9                 db  80h
.eh_frame:000000000001D9BA                 db 0FEh
.eh_frame:000000000001D9BB                 db 0FFh
.eh_frame:000000000001D9BC                 db  73h ; s
.eh_frame:000000000001D9BD                 db    0
.eh_frame:000000000001D9BE                 db    0
.eh_frame:000000000001D9BF                 db    0
.eh_frame:000000000001D9C0                 db    0
.eh_frame:000000000001D9C1                 db  46h ; F
.eh_frame:000000000001D9C2                 db  0Eh
.eh_frame:000000000001D9C3                 db  10h
.eh_frame:000000000001D9C4                 db  8Ch
.eh_frame:000000000001D9C5                 db    2
.eh_frame:000000000001D9C6                 db  46h ; F
.eh_frame:000000000001D9C7                 db  0Eh
.eh_frame:000000000001D9C8                 db  18h
.eh_frame:000000000001D9C9                 db  86h
.eh_frame:000000000001D9CA                 db    3
.eh_frame:000000000001D9CB                 db  44h ; D
.eh_frame:000000000001D9CC                 db  0Eh
.eh_frame:000000000001D9CD                 db  20h
.eh_frame:000000000001D9CE                 db  83h
.eh_frame:000000000001D9CF                 db    4
.eh_frame:000000000001D9D0                 db  7Fh ; 
.eh_frame:000000000001D9D1                 db  0Ah
.eh_frame:000000000001D9D2                 db  0Eh
.eh_frame:000000000001D9D3                 db  18h
.eh_frame:000000000001D9D4                 db  41h ; A
.eh_frame:000000000001D9D5                 db  0Eh
.eh_frame:000000000001D9D6                 db  10h
.eh_frame:000000000001D9D7                 db  42h ; B
.eh_frame:000000000001D9D8                 db  0Eh
.eh_frame:000000000001D9D9                 db    8
.eh_frame:000000000001D9DA                 db  4Eh ; N
.eh_frame:000000000001D9DB                 db  0Bh
.eh_frame:000000000001D9DC                 db  5Ch ; \
.eh_frame:000000000001D9DD                 db    0
.eh_frame:000000000001D9DE                 db    0
.eh_frame:000000000001D9DF                 db    0
.eh_frame:000000000001D9E0                 db  70h ; p
.eh_frame:000000000001D9E1                 db    3
.eh_frame:000000000001D9E2                 db    0
.eh_frame:000000000001D9E3                 db    0
.eh_frame:000000000001D9E4                 db 0FCh
.eh_frame:000000000001D9E5                 db  80h
.eh_frame:000000000001D9E6                 db 0FEh
.eh_frame:000000000001D9E7                 db 0FFh
.eh_frame:000000000001D9E8                 db  20h
.eh_frame:000000000001D9E9                 db    1
.eh_frame:000000000001D9EA                 db    0
.eh_frame:000000000001D9EB                 db    0
.eh_frame:000000000001D9EC                 db    0
.eh_frame:000000000001D9ED                 db  42h ; B
.eh_frame:000000000001D9EE                 db  0Eh
.eh_frame:000000000001D9EF                 db  10h
.eh_frame:000000000001D9F0                 db  8Fh
.eh_frame:000000000001D9F1                 db    2
.eh_frame:000000000001D9F2                 db  42h ; B
.eh_frame:000000000001D9F3                 db  0Eh
.eh_frame:000000000001D9F4                 db  18h
.eh_frame:000000000001D9F5                 db  8Eh
.eh_frame:000000000001D9F6                 db    3
.eh_frame:000000000001D9F7                 db  45h ; E
.eh_frame:000000000001D9F8                 db  0Eh
.eh_frame:000000000001D9F9                 db  20h
.eh_frame:000000000001D9FA                 db  8Dh
.eh_frame:000000000001D9FB                 db    4
.eh_frame:000000000001D9FC                 db  42h ; B
.eh_frame:000000000001D9FD                 db  0Eh
.eh_frame:000000000001D9FE                 db  28h ; (
.eh_frame:000000000001D9FF                 db  8Ch
.eh_frame:000000000001DA00                 db    5
.eh_frame:000000000001DA01                 db  43h ; C
.eh_frame:000000000001DA02                 db  0Eh
.eh_frame:000000000001DA03                 db  30h ; 0
.eh_frame:000000000001DA04                 db  86h
.eh_frame:000000000001DA05                 db    6
.eh_frame:000000000001DA06                 db  41h ; A
.eh_frame:000000000001DA07                 db  0Eh
.eh_frame:000000000001DA08                 db  38h ; 8
.eh_frame:000000000001DA09                 db  83h
.eh_frame:000000000001DA0A                 db    7
.eh_frame:000000000001DA0B                 db  56h ; V
.eh_frame:000000000001DA0C                 db  0Eh
.eh_frame:000000000001DA0D                 db  40h ; @
.eh_frame:000000000001DA0E                 db    2
.eh_frame:000000000001DA0F                 db 0D3h
.eh_frame:000000000001DA10                 db  0Ah
.eh_frame:000000000001DA11                 db  0Eh
.eh_frame:000000000001DA12                 db  38h ; 8
.eh_frame:000000000001DA13                 db  41h ; A
.eh_frame:000000000001DA14                 db  0Eh
.eh_frame:000000000001DA15                 db  30h ; 0
.eh_frame:000000000001DA16                 db  41h ; A
.eh_frame:000000000001DA17                 db  0Eh
.eh_frame:000000000001DA18                 db  28h ; (
.eh_frame:000000000001DA19                 db  42h ; B
.eh_frame:000000000001DA1A                 db  0Eh
.eh_frame:000000000001DA1B                 db  20h
.eh_frame:000000000001DA1C                 db  42h ; B
.eh_frame:000000000001DA1D                 db  0Eh
.eh_frame:000000000001DA1E                 db  18h
.eh_frame:000000000001DA1F                 db  42h ; B
.eh_frame:000000000001DA20                 db  0Eh
.eh_frame:000000000001DA21                 db  10h
.eh_frame:000000000001DA22                 db  42h ; B
.eh_frame:000000000001DA23                 db  0Eh
.eh_frame:000000000001DA24                 db    8
.eh_frame:000000000001DA25                 db  46h ; F
.eh_frame:000000000001DA26                 db  0Bh
.eh_frame:000000000001DA27                 db  44h ; D
.eh_frame:000000000001DA28                 db  0Eh
.eh_frame:000000000001DA29                 db  38h ; 8
.eh_frame:000000000001DA2A                 db  46h ; F
.eh_frame:000000000001DA2B                 db  0Eh
.eh_frame:000000000001DA2C                 db  30h ; 0
.eh_frame:000000000001DA2D                 db  41h ; A
.eh_frame:000000000001DA2E                 db  0Eh
.eh_frame:000000000001DA2F                 db  28h ; (
.eh_frame:000000000001DA30                 db  42h ; B
.eh_frame:000000000001DA31                 db  0Eh
.eh_frame:000000000001DA32                 db  20h
.eh_frame:000000000001DA33                 db  42h ; B
.eh_frame:000000000001DA34                 db  0Eh
.eh_frame:000000000001DA35                 db  18h
.eh_frame:000000000001DA36                 db  42h ; B
.eh_frame:000000000001DA37                 db  0Eh
.eh_frame:000000000001DA38                 db  10h
.eh_frame:000000000001DA39                 db  42h ; B
.eh_frame:000000000001DA3A                 db  0Eh
.eh_frame:000000000001DA3B                 db    8
.eh_frame:000000000001DA3C                 db  48h ; H
.eh_frame:000000000001DA3D                 db    0
.eh_frame:000000000001DA3E                 db    0
.eh_frame:000000000001DA3F                 db    0
.eh_frame:000000000001DA40                 db 0D0h
.eh_frame:000000000001DA41                 db    3
.eh_frame:000000000001DA42                 db    0
.eh_frame:000000000001DA43                 db    0
.eh_frame:000000000001DA44                 db 0BCh
.eh_frame:000000000001DA45                 db  81h
.eh_frame:000000000001DA46                 db 0FEh
.eh_frame:000000000001DA47                 db 0FFh
.eh_frame:000000000001DA48                 db  6Dh ; m
.eh_frame:000000000001DA49                 db    0
.eh_frame:000000000001DA4A                 db    0
.eh_frame:000000000001DA4B                 db    0
.eh_frame:000000000001DA4C                 db    0
.eh_frame:000000000001DA4D                 db  42h ; B
.eh_frame:000000000001DA4E                 db  0Eh
.eh_frame:000000000001DA4F                 db  10h
.eh_frame:000000000001DA50                 db  8Fh
.eh_frame:000000000001DA51                 db    2
.eh_frame:000000000001DA52                 db  42h ; B
.eh_frame:000000000001DA53                 db  0Eh
.eh_frame:000000000001DA54                 db  18h
.eh_frame:000000000001DA55                 db  8Eh
.eh_frame:000000000001DA56                 db    3
.eh_frame:000000000001DA57                 db  45h ; E
.eh_frame:000000000001DA58                 db  0Eh
.eh_frame:000000000001DA59                 db  20h
.eh_frame:000000000001DA5A                 db  8Dh
.eh_frame:000000000001DA5B                 db    4
.eh_frame:000000000001DA5C                 db  42h ; B
.eh_frame:000000000001DA5D                 db  0Eh
.eh_frame:000000000001DA5E                 db  28h ; (
.eh_frame:000000000001DA5F                 db  8Ch
.eh_frame:000000000001DA60                 db    5
.eh_frame:000000000001DA61                 db  44h ; D
.eh_frame:000000000001DA62                 db  0Eh
.eh_frame:000000000001DA63                 db  30h ; 0
.eh_frame:000000000001DA64                 db  86h
.eh_frame:000000000001DA65                 db    6
.eh_frame:000000000001DA66                 db  41h ; A
.eh_frame:000000000001DA67                 db  0Eh
.eh_frame:000000000001DA68                 db  38h ; 8
.eh_frame:000000000001DA69                 db  83h
.eh_frame:000000000001DA6A                 db    7
.eh_frame:000000000001DA6B                 db  50h ; P
.eh_frame:000000000001DA6C                 db  0Eh
.eh_frame:000000000001DA6D                 db  40h ; @
.eh_frame:000000000001DA6E                 db  5Ah ; Z
.eh_frame:000000000001DA6F                 db  0Ah
.eh_frame:000000000001DA70                 db  0Eh
.eh_frame:000000000001DA71                 db  38h ; 8
.eh_frame:000000000001DA72                 db  41h ; A
.eh_frame:000000000001DA73                 db  0Eh
.eh_frame:000000000001DA74                 db  30h ; 0
.eh_frame:000000000001DA75                 db  41h ; A
.eh_frame:000000000001DA76                 db  0Eh
.eh_frame:000000000001DA77                 db  28h ; (
.eh_frame:000000000001DA78                 db  42h ; B
.eh_frame:000000000001DA79                 db  0Eh
.eh_frame:000000000001DA7A                 db  20h
.eh_frame:000000000001DA7B                 db  42h ; B
.eh_frame:000000000001DA7C                 db  0Eh
.eh_frame:000000000001DA7D                 db  18h
.eh_frame:000000000001DA7E                 db  42h ; B
.eh_frame:000000000001DA7F                 db  0Eh
.eh_frame:000000000001DA80                 db  10h
.eh_frame:000000000001DA81                 db  42h ; B
.eh_frame:000000000001DA82                 db  0Eh
.eh_frame:000000000001DA83                 db    8
.eh_frame:000000000001DA84                 db  41h ; A
.eh_frame:000000000001DA85                 db  0Bh
.eh_frame:000000000001DA86                 db    0
.eh_frame:000000000001DA87                 db    0
.eh_frame:000000000001DA88                 db  3Ch ; <
.eh_frame:000000000001DA89                 db    0
.eh_frame:000000000001DA8A                 db    0
.eh_frame:000000000001DA8B                 db    0
.eh_frame:000000000001DA8C                 db  1Ch
.eh_frame:000000000001DA8D                 db    4
.eh_frame:000000000001DA8E                 db    0
.eh_frame:000000000001DA8F                 db    0
.eh_frame:000000000001DA90                 db 0E0h
.eh_frame:000000000001DA91                 db  81h
.eh_frame:000000000001DA92                 db 0FEh
.eh_frame:000000000001DA93                 db 0FFh
.eh_frame:000000000001DA94                 db  4Dh ; M
.eh_frame:000000000001DA95                 db    0
.eh_frame:000000000001DA96                 db    0
.eh_frame:000000000001DA97                 db    0
.eh_frame:000000000001DA98                 db    0
.eh_frame:000000000001DA99                 db  42h ; B
.eh_frame:000000000001DA9A                 db  0Eh
.eh_frame:000000000001DA9B                 db  10h
.eh_frame:000000000001DA9C                 db  8Eh
.eh_frame:000000000001DA9D                 db    2
.eh_frame:000000000001DA9E                 db  42h ; B
.eh_frame:000000000001DA9F                 db  0Eh
.eh_frame:000000000001DAA0                 db  18h
.eh_frame:000000000001DAA1                 db  8Dh
.eh_frame:000000000001DAA2                 db    3
.eh_frame:000000000001DAA3                 db  42h ; B
.eh_frame:000000000001DAA4                 db  0Eh
.eh_frame:000000000001DAA5                 db  20h
.eh_frame:000000000001DAA6                 db  8Ch
.eh_frame:000000000001DAA7                 db    4
.eh_frame:000000000001DAA8                 db  41h ; A
.eh_frame:000000000001DAA9                 db  0Eh
.eh_frame:000000000001DAAA                 db  28h ; (
.eh_frame:000000000001DAAB                 db  86h
.eh_frame:000000000001DAAC                 db    5
.eh_frame:000000000001DAAD                 db  41h ; A
.eh_frame:000000000001DAAE                 db  0Eh
.eh_frame:000000000001DAAF                 db  30h ; 0
.eh_frame:000000000001DAB0                 db  83h
.eh_frame:000000000001DAB1                 db    6
.eh_frame:000000000001DAB2                 db  7Ah ; z
.eh_frame:000000000001DAB3                 db  0Eh
.eh_frame:000000000001DAB4                 db  28h ; (
.eh_frame:000000000001DAB5                 db  44h ; D
.eh_frame:000000000001DAB6                 db  0Eh
.eh_frame:000000000001DAB7                 db  20h
.eh_frame:000000000001DAB8                 db  42h ; B
.eh_frame:000000000001DAB9                 db  0Eh
.eh_frame:000000000001DABA                 db  18h
.eh_frame:000000000001DABB                 db  42h ; B
.eh_frame:000000000001DABC                 db  0Eh
.eh_frame:000000000001DABD                 db  10h
.eh_frame:000000000001DABE                 db  42h ; B
.eh_frame:000000000001DABF                 db  0Eh
.eh_frame:000000000001DAC0                 db    8
.eh_frame:000000000001DAC1                 db    0
.eh_frame:000000000001DAC2                 db    0
.eh_frame:000000000001DAC3                 db    0
.eh_frame:000000000001DAC4                 db    0
.eh_frame:000000000001DAC5                 db    0
.eh_frame:000000000001DAC6                 db    0
.eh_frame:000000000001DAC7                 db    0
.eh_frame:000000000001DAC8                 db  10h
.eh_frame:000000000001DAC9                 db    0
.eh_frame:000000000001DACA                 db    0
.eh_frame:000000000001DACB                 db    0
.eh_frame:000000000001DACC                 db  5Ch ; \
.eh_frame:000000000001DACD                 db    4
.eh_frame:000000000001DACE                 db    0
.eh_frame:000000000001DACF                 db    0
.eh_frame:000000000001DAD0                 db 0F0h
.eh_frame:000000000001DAD1                 db  81h
.eh_frame:000000000001DAD2                 db 0FEh
.eh_frame:000000000001DAD3                 db 0FFh
.eh_frame:000000000001DAD4                 db    8
.eh_frame:000000000001DAD5                 db    0
.eh_frame:000000000001DAD6                 db    0
.eh_frame:000000000001DAD7                 db    0
.eh_frame:000000000001DAD8                 db    0
.eh_frame:000000000001DAD9                 db    0
.eh_frame:000000000001DADA                 db    0
.eh_frame:000000000001DADB                 db    0
.eh_frame:000000000001DADC                 db  10h
.eh_frame:000000000001DADD                 db    0
.eh_frame:000000000001DADE                 db    0
.eh_frame:000000000001DADF                 db    0
.eh_frame:000000000001DAE0                 db  70h ; p
.eh_frame:000000000001DAE1                 db    4
.eh_frame:000000000001DAE2                 db    0
.eh_frame:000000000001DAE3                 db    0
.eh_frame:000000000001DAE4                 db 0ECh
.eh_frame:000000000001DAE5                 db  81h
.eh_frame:000000000001DAE6                 db 0FEh
.eh_frame:000000000001DAE7                 db 0FFh
.eh_frame:000000000001DAE8                 db    8
.eh_frame:000000000001DAE9                 db    0
.eh_frame:000000000001DAEA                 db    0
.eh_frame:000000000001DAEB                 db    0
.eh_frame:000000000001DAEC                 db    0
.eh_frame:000000000001DAED                 db    0
.eh_frame:000000000001DAEE                 db    0
.eh_frame:000000000001DAEF                 db    0
.eh_frame:000000000001DAF0                 db  2Ch ; ,
.eh_frame:000000000001DAF1                 db    0
.eh_frame:000000000001DAF2                 db    0
.eh_frame:000000000001DAF3                 db    0
.eh_frame:000000000001DAF4                 db  84h
.eh_frame:000000000001DAF5                 db    4
.eh_frame:000000000001DAF6                 db    0
.eh_frame:000000000001DAF7                 db    0
.eh_frame:000000000001DAF8                 db 0E8h
.eh_frame:000000000001DAF9                 db  81h
.eh_frame:000000000001DAFA                 db 0FEh
.eh_frame:000000000001DAFB                 db 0FFh
.eh_frame:000000000001DAFC                 db 0A4h
.eh_frame:000000000001DAFD                 db    0
.eh_frame:000000000001DAFE                 db    0
.eh_frame:000000000001DAFF                 db    0
.eh_frame:000000000001DB00                 db    0
.eh_frame:000000000001DB01                 db  41h ; A
.eh_frame:000000000001DB02                 db  0Eh
.eh_frame:000000000001DB03                 db  10h
.eh_frame:000000000001DB04                 db  86h
.eh_frame:000000000001DB05                 db    2
.eh_frame:000000000001DB06                 db  41h ; A
.eh_frame:000000000001DB07                 db  0Eh
.eh_frame:000000000001DB08                 db  18h
.eh_frame:000000000001DB09                 db  83h
.eh_frame:000000000001DB0A                 db    3
.eh_frame:000000000001DB0B                 db  44h ; D
.eh_frame:000000000001DB0C                 db  0Eh
.eh_frame:000000000001DB0D                 db  20h
.eh_frame:000000000001DB0E                 db  7Ah ; z
.eh_frame:000000000001DB0F                 db  0Ah
.eh_frame:000000000001DB10                 db  0Eh
.eh_frame:000000000001DB11                 db  18h
.eh_frame:000000000001DB12                 db  41h ; A
.eh_frame:000000000001DB13                 db  0Eh
.eh_frame:000000000001DB14                 db  10h
.eh_frame:000000000001DB15                 db  41h ; A
.eh_frame:000000000001DB16                 db  0Eh
.eh_frame:000000000001DB17                 db    8
.eh_frame:000000000001DB18                 db  41h ; A
.eh_frame:000000000001DB19                 db  0Bh
.eh_frame:000000000001DB1A                 db    0
.eh_frame:000000000001DB1B                 db    0
.eh_frame:000000000001DB1C                 db    0
.eh_frame:000000000001DB1D                 db    0
.eh_frame:000000000001DB1E                 db    0
.eh_frame:000000000001DB1F                 db    0
.eh_frame:000000000001DB20                 db  24h ; $
.eh_frame:000000000001DB21                 db    0
.eh_frame:000000000001DB22                 db    0
.eh_frame:000000000001DB23                 db    0
.eh_frame:000000000001DB24                 db 0B4h
.eh_frame:000000000001DB25                 db    4
.eh_frame:000000000001DB26                 db    0
.eh_frame:000000000001DB27                 db    0
.eh_frame:000000000001DB28                 db  68h ; h
.eh_frame:000000000001DB29                 db  82h
.eh_frame:000000000001DB2A                 db 0FEh
.eh_frame:000000000001DB2B                 db 0FFh
.eh_frame:000000000001DB2C                 db  42h ; B
.eh_frame:000000000001DB2D                 db    0
.eh_frame:000000000001DB2E                 db    0
.eh_frame:000000000001DB2F                 db    0
.eh_frame:000000000001DB30                 db    0
.eh_frame:000000000001DB31                 db  41h ; A
.eh_frame:000000000001DB32                 db  0Eh
.eh_frame:000000000001DB33                 db  10h
.eh_frame:000000000001DB34                 db  86h
.eh_frame:000000000001DB35                 db    2
.eh_frame:000000000001DB36                 db  41h ; A
.eh_frame:000000000001DB37                 db  0Eh
.eh_frame:000000000001DB38                 db  18h
.eh_frame:000000000001DB39                 db  83h
.eh_frame:000000000001DB3A                 db    3
.eh_frame:000000000001DB3B                 db  51h ; Q
.eh_frame:000000000001DB3C                 db  0Eh
.eh_frame:000000000001DB3D                 db  20h
.eh_frame:000000000001DB3E                 db  6Ah ; j
.eh_frame:000000000001DB3F                 db  0Eh
.eh_frame:000000000001DB40                 db  18h
.eh_frame:000000000001DB41                 db  43h ; C
.eh_frame:000000000001DB42                 db  0Eh
.eh_frame:000000000001DB43                 db  10h
.eh_frame:000000000001DB44                 db  41h ; A
.eh_frame:000000000001DB45                 db  0Eh
.eh_frame:000000000001DB46                 db    8
.eh_frame:000000000001DB47                 db    0
.eh_frame:000000000001DB48                 db  4Ch ; L
.eh_frame:000000000001DB49                 db    0
.eh_frame:000000000001DB4A                 db    0
.eh_frame:000000000001DB4B                 db    0
.eh_frame:000000000001DB4C                 db 0DCh
.eh_frame:000000000001DB4D                 db    4
.eh_frame:000000000001DB4E                 db    0
.eh_frame:000000000001DB4F                 db    0
.eh_frame:000000000001DB50                 db  90h
.eh_frame:000000000001DB51                 db  82h
.eh_frame:000000000001DB52                 db 0FEh
.eh_frame:000000000001DB53                 db 0FFh
.eh_frame:000000000001DB54                 db 0AEh
.eh_frame:000000000001DB55                 db    1
.eh_frame:000000000001DB56                 db    0
.eh_frame:000000000001DB57                 db    0
.eh_frame:000000000001DB58                 db    0
.eh_frame:000000000001DB59                 db  42h ; B
.eh_frame:000000000001DB5A                 db  0Eh
.eh_frame:000000000001DB5B                 db  10h
.eh_frame:000000000001DB5C                 db  8Fh
.eh_frame:000000000001DB5D                 db    2
.eh_frame:000000000001DB5E                 db  42h ; B
.eh_frame:000000000001DB5F                 db  0Eh
.eh_frame:000000000001DB60                 db  18h
.eh_frame:000000000001DB61                 db  8Eh
.eh_frame:000000000001DB62                 db    3
.eh_frame:000000000001DB63                 db  45h ; E
.eh_frame:000000000001DB64                 db  0Eh
.eh_frame:000000000001DB65                 db  20h
.eh_frame:000000000001DB66                 db  8Dh
.eh_frame:000000000001DB67                 db    4
.eh_frame:000000000001DB68                 db  42h ; B
.eh_frame:000000000001DB69                 db  0Eh
.eh_frame:000000000001DB6A                 db  28h ; (
.eh_frame:000000000001DB6B                 db  8Ch
.eh_frame:000000000001DB6C                 db    5
.eh_frame:000000000001DB6D                 db  44h ; D
.eh_frame:000000000001DB6E                 db  0Eh
.eh_frame:000000000001DB6F                 db  30h ; 0
.eh_frame:000000000001DB70                 db  86h
.eh_frame:000000000001DB71                 db    6
.eh_frame:000000000001DB72                 db  41h ; A
.eh_frame:000000000001DB73                 db  0Eh
.eh_frame:000000000001DB74                 db  38h ; 8
.eh_frame:000000000001DB75                 db  83h
.eh_frame:000000000001DB76                 db    7
.eh_frame:000000000001DB77                 db  44h ; D
.eh_frame:000000000001DB78                 db  0Eh
.eh_frame:000000000001DB79                 db  50h ; P
.eh_frame:000000000001DB7A                 db    2
.eh_frame:000000000001DB7B                 db 0D0h
.eh_frame:000000000001DB7C                 db  0Ah
.eh_frame:000000000001DB7D                 db  0Eh
.eh_frame:000000000001DB7E                 db  38h ; 8
.eh_frame:000000000001DB7F                 db  44h ; D
.eh_frame:000000000001DB80                 db  0Eh
.eh_frame:000000000001DB81                 db  30h ; 0
.eh_frame:000000000001DB82                 db  41h ; A
.eh_frame:000000000001DB83                 db  0Eh
.eh_frame:000000000001DB84                 db  28h ; (
.eh_frame:000000000001DB85                 db  42h ; B
.eh_frame:000000000001DB86                 db  0Eh
.eh_frame:000000000001DB87                 db  20h
.eh_frame:000000000001DB88                 db  42h ; B
.eh_frame:000000000001DB89                 db  0Eh
.eh_frame:000000000001DB8A                 db  18h
.eh_frame:000000000001DB8B                 db  42h ; B
.eh_frame:000000000001DB8C                 db  0Eh
.eh_frame:000000000001DB8D                 db  10h
.eh_frame:000000000001DB8E                 db  42h ; B
.eh_frame:000000000001DB8F                 db  0Eh
.eh_frame:000000000001DB90                 db    8
.eh_frame:000000000001DB91                 db  47h ; G
.eh_frame:000000000001DB92                 db  0Bh
.eh_frame:000000000001DB93                 db    0
.eh_frame:000000000001DB94                 db    0
.eh_frame:000000000001DB95                 db    0
.eh_frame:000000000001DB96                 db    0
.eh_frame:000000000001DB97                 db    0
.eh_frame:000000000001DB98                 db  1Ch
.eh_frame:000000000001DB99                 db    0
.eh_frame:000000000001DB9A                 db    0
.eh_frame:000000000001DB9B                 db    0
.eh_frame:000000000001DB9C                 db  2Ch ; ,
.eh_frame:000000000001DB9D                 db    5
.eh_frame:000000000001DB9E                 db    0
.eh_frame:000000000001DB9F                 db    0
.eh_frame:000000000001DBA0                 db 0F0h
.eh_frame:000000000001DBA1                 db  83h
.eh_frame:000000000001DBA2                 db 0FEh
.eh_frame:000000000001DBA3                 db 0FFh
.eh_frame:000000000001DBA4                 db  9Fh
.eh_frame:000000000001DBA5                 db    0
.eh_frame:000000000001DBA6                 db    0
.eh_frame:000000000001DBA7                 db    0
.eh_frame:000000000001DBA8                 db    0
.eh_frame:000000000001DBA9                 db  44h ; D
.eh_frame:000000000001DBAA                 db  0Eh
.eh_frame:000000000001DBAB                 db  10h
.eh_frame:000000000001DBAC                 db  83h
.eh_frame:000000000001DBAD                 db    2
.eh_frame:000000000001DBAE                 db    2
.eh_frame:000000000001DBAF                 db  78h ; x
.eh_frame:000000000001DBB0                 db  0Ah
.eh_frame:000000000001DBB1                 db  0Eh
.eh_frame:000000000001DBB2                 db    8
.eh_frame:000000000001DBB3                 db  41h ; A
.eh_frame:000000000001DBB4                 db  0Bh
.eh_frame:000000000001DBB5                 db    0
.eh_frame:000000000001DBB6                 db    0
.eh_frame:000000000001DBB7                 db    0
.eh_frame:000000000001DBB8                 db  10h
.eh_frame:000000000001DBB9                 db    0
.eh_frame:000000000001DBBA                 db    0
.eh_frame:000000000001DBBB                 db    0
.eh_frame:000000000001DBBC                 db  4Ch ; L
.eh_frame:000000000001DBBD                 db    5
.eh_frame:000000000001DBBE                 db    0
.eh_frame:000000000001DBBF                 db    0
.eh_frame:000000000001DBC0                 db  60h ; `
.eh_frame:000000000001DBC1                 db  45h ; E
.eh_frame:000000000001DBC2                 db 0FEh
.eh_frame:000000000001DBC3                 db 0FFh
.eh_frame:000000000001DBC4                 db  23h ; #
.eh_frame:000000000001DBC5                 db    0
.eh_frame:000000000001DBC6                 db    0
.eh_frame:000000000001DBC7                 db    0
.eh_frame:000000000001DBC8                 db    0
.eh_frame:000000000001DBC9                 db  59h ; Y
.eh_frame:000000000001DBCA                 db  0Eh
.eh_frame:000000000001DBCB                 db  10h
.eh_frame:000000000001DBCC                 db  48h ; H
.eh_frame:000000000001DBCD                 db    0
.eh_frame:000000000001DBCE                 db    0
.eh_frame:000000000001DBCF                 db    0
.eh_frame:000000000001DBD0                 db  60h ; `
.eh_frame:000000000001DBD1                 db    5
.eh_frame:000000000001DBD2                 db    0
.eh_frame:000000000001DBD3                 db    0
.eh_frame:000000000001DBD4                 db  5Ch ; \
.eh_frame:000000000001DBD5                 db  84h
.eh_frame:000000000001DBD6                 db 0FEh
.eh_frame:000000000001DBD7                 db 0FFh
.eh_frame:000000000001DBD8                 db  6Ah ; j
.eh_frame:000000000001DBD9                 db    9
.eh_frame:000000000001DBDA                 db    0
.eh_frame:000000000001DBDB                 db    0
.eh_frame:000000000001DBDC                 db    0
.eh_frame:000000000001DBDD                 db  42h ; B
.eh_frame:000000000001DBDE                 db  0Eh
.eh_frame:000000000001DBDF                 db  10h
.eh_frame:000000000001DBE0                 db  8Fh
.eh_frame:000000000001DBE1                 db    2
.eh_frame:000000000001DBE2                 db  42h ; B
.eh_frame:000000000001DBE3                 db  0Eh
.eh_frame:000000000001DBE4                 db  18h
.eh_frame:000000000001DBE5                 db  8Eh
.eh_frame:000000000001DBE6                 db    3
.eh_frame:000000000001DBE7                 db  45h ; E
.eh_frame:000000000001DBE8                 db  0Eh
.eh_frame:000000000001DBE9                 db  20h
.eh_frame:000000000001DBEA                 db  8Dh
.eh_frame:000000000001DBEB                 db    4
.eh_frame:000000000001DBEC                 db  42h ; B
.eh_frame:000000000001DBED                 db  0Eh
.eh_frame:000000000001DBEE                 db  28h ; (
.eh_frame:000000000001DBEF                 db  8Ch
.eh_frame:000000000001DBF0                 db    5
.eh_frame:000000000001DBF1                 db  44h ; D
.eh_frame:000000000001DBF2                 db  0Eh
.eh_frame:000000000001DBF3                 db  30h ; 0
.eh_frame:000000000001DBF4                 db  86h
.eh_frame:000000000001DBF5                 db    6
.eh_frame:000000000001DBF6                 db  41h ; A
.eh_frame:000000000001DBF7                 db  0Eh
.eh_frame:000000000001DBF8                 db  38h ; 8
.eh_frame:000000000001DBF9                 db  83h
.eh_frame:000000000001DBFA                 db    7
.eh_frame:000000000001DBFB                 db  53h ; S
.eh_frame:000000000001DBFC                 db  0Eh
.eh_frame:000000000001DBFD                 db 0F0h
.eh_frame:000000000001DBFE                 db    1
.eh_frame:000000000001DBFF                 db    2
.eh_frame:000000000001DC00                 db 0E4h
.eh_frame:000000000001DC01                 db  0Ah
.eh_frame:000000000001DC02                 db  0Eh
.eh_frame:000000000001DC03                 db  38h ; 8
.eh_frame:000000000001DC04                 db  41h ; A
.eh_frame:000000000001DC05                 db  0Eh
.eh_frame:000000000001DC06                 db  30h ; 0
.eh_frame:000000000001DC07                 db  41h ; A
.eh_frame:000000000001DC08                 db  0Eh
.eh_frame:000000000001DC09                 db  28h ; (
.eh_frame:000000000001DC0A                 db  42h ; B
.eh_frame:000000000001DC0B                 db  0Eh
.eh_frame:000000000001DC0C                 db  20h
.eh_frame:000000000001DC0D                 db  42h ; B
.eh_frame:000000000001DC0E                 db  0Eh
.eh_frame:000000000001DC0F                 db  18h
.eh_frame:000000000001DC10                 db  42h ; B
.eh_frame:000000000001DC11                 db  0Eh
.eh_frame:000000000001DC12                 db  10h
.eh_frame:000000000001DC13                 db  42h ; B
.eh_frame:000000000001DC14                 db  0Eh
.eh_frame:000000000001DC15                 db    8
.eh_frame:000000000001DC16                 db  47h ; G
.eh_frame:000000000001DC17                 db  0Bh
.eh_frame:000000000001DC18                 db  34h ; 4
.eh_frame:000000000001DC19                 db    0
.eh_frame:000000000001DC1A                 db    0
.eh_frame:000000000001DC1B                 db    0
.eh_frame:000000000001DC1C                 db 0ACh
.eh_frame:000000000001DC1D                 db    5
.eh_frame:000000000001DC1E                 db    0
.eh_frame:000000000001DC1F                 db    0
.eh_frame:000000000001DC20                 db  80h
.eh_frame:000000000001DC21                 db  8Dh
.eh_frame:000000000001DC22                 db 0FEh
.eh_frame:000000000001DC23                 db 0FFh
.eh_frame:000000000001DC24                 db  86h
.eh_frame:000000000001DC25                 db    0
.eh_frame:000000000001DC26                 db    0
.eh_frame:000000000001DC27                 db    0
.eh_frame:000000000001DC28                 db    0
.eh_frame:000000000001DC29                 db  42h ; B
.eh_frame:000000000001DC2A                 db  0Eh
.eh_frame:000000000001DC2B                 db  10h
.eh_frame:000000000001DC2C                 db  8Ch
.eh_frame:000000000001DC2D                 db    2
.eh_frame:000000000001DC2E                 db  41h ; A
.eh_frame:000000000001DC2F                 db  0Eh
.eh_frame:000000000001DC30                 db  18h
.eh_frame:000000000001DC31                 db  86h
.eh_frame:000000000001DC32                 db    3
.eh_frame:000000000001DC33                 db  44h ; D
.eh_frame:000000000001DC34                 db  0Eh
.eh_frame:000000000001DC35                 db  20h
.eh_frame:000000000001DC36                 db  83h
.eh_frame:000000000001DC37                 db    4
.eh_frame:000000000001DC38                 db  6Ah ; j
.eh_frame:000000000001DC39                 db  0Ah
.eh_frame:000000000001DC3A                 db  0Eh
.eh_frame:000000000001DC3B                 db  18h
.eh_frame:000000000001DC3C                 db  41h ; A
.eh_frame:000000000001DC3D                 db  0Eh
.eh_frame:000000000001DC3E                 db  10h
.eh_frame:000000000001DC3F                 db  42h ; B
.eh_frame:000000000001DC40                 db  0Eh
.eh_frame:000000000001DC41                 db    8
.eh_frame:000000000001DC42                 db  44h ; D
.eh_frame:000000000001DC43                 db  0Bh
.eh_frame:000000000001DC44                 db    2
.eh_frame:000000000001DC45                 db  4Ah ; J
.eh_frame:000000000001DC46                 db  0Eh
.eh_frame:000000000001DC47                 db  18h
.eh_frame:000000000001DC48                 db  41h ; A
.eh_frame:000000000001DC49                 db  0Eh
.eh_frame:000000000001DC4A                 db  10h
.eh_frame:000000000001DC4B                 db  42h ; B
.eh_frame:000000000001DC4C                 db  0Eh
.eh_frame:000000000001DC4D                 db    8
.eh_frame:000000000001DC4E                 db    0
.eh_frame:000000000001DC4F                 db    0
.eh_frame:000000000001DC50                 db  4Ch ; L
.eh_frame:000000000001DC51                 db    0
.eh_frame:000000000001DC52                 db    0
.eh_frame:000000000001DC53                 db    0
.eh_frame:000000000001DC54                 db 0E4h
.eh_frame:000000000001DC55                 db    5
.eh_frame:000000000001DC56                 db    0
.eh_frame:000000000001DC57                 db    0
.eh_frame:000000000001DC58                 db 0D8h
.eh_frame:000000000001DC59                 db  8Dh
.eh_frame:000000000001DC5A                 db 0FEh
.eh_frame:000000000001DC5B                 db 0FFh
.eh_frame:000000000001DC5C                 db 0EDh
.eh_frame:000000000001DC5D                 db    2
.eh_frame:000000000001DC5E                 db    0
.eh_frame:000000000001DC5F                 db    0
.eh_frame:000000000001DC60                 db    0
.eh_frame:000000000001DC61                 db  42h ; B
.eh_frame:000000000001DC62                 db  0Eh
.eh_frame:000000000001DC63                 db  10h
.eh_frame:000000000001DC64                 db  8Fh
.eh_frame:000000000001DC65                 db    2
.eh_frame:000000000001DC66                 db  42h ; B
.eh_frame:000000000001DC67                 db  0Eh
.eh_frame:000000000001DC68                 db  18h
.eh_frame:000000000001DC69                 db  8Eh
.eh_frame:000000000001DC6A                 db    3
.eh_frame:000000000001DC6B                 db  47h ; G
.eh_frame:000000000001DC6C                 db  0Eh
.eh_frame:000000000001DC6D                 db  20h
.eh_frame:000000000001DC6E                 db  8Dh
.eh_frame:000000000001DC6F                 db    4
.eh_frame:000000000001DC70                 db  42h ; B
.eh_frame:000000000001DC71                 db  0Eh
.eh_frame:000000000001DC72                 db  28h ; (
.eh_frame:000000000001DC73                 db  8Ch
.eh_frame:000000000001DC74                 db    5
.eh_frame:000000000001DC75                 db  44h ; D
.eh_frame:000000000001DC76                 db  0Eh
.eh_frame:000000000001DC77                 db  30h ; 0
.eh_frame:000000000001DC78                 db  86h
.eh_frame:000000000001DC79                 db    6
.eh_frame:000000000001DC7A                 db  41h ; A
.eh_frame:000000000001DC7B                 db  0Eh
.eh_frame:000000000001DC7C                 db  38h ; 8
.eh_frame:000000000001DC7D                 db  83h
.eh_frame:000000000001DC7E                 db    7
.eh_frame:000000000001DC7F                 db  4Ch ; L
.eh_frame:000000000001DC80                 db  0Eh
.eh_frame:000000000001DC81                 db  50h ; P
.eh_frame:000000000001DC82                 db    2
.eh_frame:000000000001DC83                 db  71h ; q
.eh_frame:000000000001DC84                 db  0Ah
.eh_frame:000000000001DC85                 db  0Eh
.eh_frame:000000000001DC86                 db  38h ; 8
.eh_frame:000000000001DC87                 db  44h ; D
.eh_frame:000000000001DC88                 db  0Eh
.eh_frame:000000000001DC89                 db  30h ; 0
.eh_frame:000000000001DC8A                 db  41h ; A
.eh_frame:000000000001DC8B                 db  0Eh
.eh_frame:000000000001DC8C                 db  28h ; (
.eh_frame:000000000001DC8D                 db  42h ; B
.eh_frame:000000000001DC8E                 db  0Eh
.eh_frame:000000000001DC8F                 db  20h
.eh_frame:000000000001DC90                 db  42h ; B
.eh_frame:000000000001DC91                 db  0Eh
.eh_frame:000000000001DC92                 db  18h
.eh_frame:000000000001DC93                 db  42h ; B
.eh_frame:000000000001DC94                 db  0Eh
.eh_frame:000000000001DC95                 db  10h
.eh_frame:000000000001DC96                 db  42h ; B
.eh_frame:000000000001DC97                 db  0Eh
.eh_frame:000000000001DC98                 db    8
.eh_frame:000000000001DC99                 db  44h ; D
.eh_frame:000000000001DC9A                 db  0Bh
.eh_frame:000000000001DC9B                 db    0
.eh_frame:000000000001DC9C                 db    0
.eh_frame:000000000001DC9D                 db    0
.eh_frame:000000000001DC9E                 db    0
.eh_frame:000000000001DC9F                 db    0
.eh_frame:000000000001DCA0                 db  40h ; @
.eh_frame:000000000001DCA1                 db    0
.eh_frame:000000000001DCA2                 db    0
.eh_frame:000000000001DCA3                 db    0
.eh_frame:000000000001DCA4                 db  34h ; 4
.eh_frame:000000000001DCA5                 db    6
.eh_frame:000000000001DCA6                 db    0
.eh_frame:000000000001DCA7                 db    0
.eh_frame:000000000001DCA8                 db  78h ; x
.eh_frame:000000000001DCA9                 db  90h
.eh_frame:000000000001DCAA                 db 0FEh
.eh_frame:000000000001DCAB                 db 0FFh
.eh_frame:000000000001DCAC                 db 0E7h
.eh_frame:000000000001DCAD                 db    0
.eh_frame:000000000001DCAE                 db    0
.eh_frame:000000000001DCAF                 db    0
.eh_frame:000000000001DCB0                 db    0
.eh_frame:000000000001DCB1                 db  41h ; A
.eh_frame:000000000001DCB2                 db  0Eh
.eh_frame:000000000001DCB3                 db  10h
.eh_frame:000000000001DCB4                 db  86h
.eh_frame:000000000001DCB5                 db    2
.eh_frame:000000000001DCB6                 db  41h ; A
.eh_frame:000000000001DCB7                 db  0Eh
.eh_frame:000000000001DCB8                 db  18h
.eh_frame:000000000001DCB9                 db  83h
.eh_frame:000000000001DCBA                 db    3
.eh_frame:000000000001DCBB                 db  49h ; I
.eh_frame:000000000001DCBC                 db  0Eh
.eh_frame:000000000001DCBD                 db  20h
.eh_frame:000000000001DCBE                 db  6Eh ; n
.eh_frame:000000000001DCBF                 db  0Ah
.eh_frame:000000000001DCC0                 db  0Eh
.eh_frame:000000000001DCC1                 db  18h
.eh_frame:000000000001DCC2                 db  41h ; A
.eh_frame:000000000001DCC3                 db  0Eh
.eh_frame:000000000001DCC4                 db  10h
.eh_frame:000000000001DCC5                 db  41h ; A
.eh_frame:000000000001DCC6                 db  0Eh
.eh_frame:000000000001DCC7                 db    8
.eh_frame:000000000001DCC8                 db  45h ; E
.eh_frame:000000000001DCC9                 db  0Bh
.eh_frame:000000000001DCCA                 db    2
.eh_frame:000000000001DCCB                 db  4Ah ; J
.eh_frame:000000000001DCCC                 db  0Ah
.eh_frame:000000000001DCCD                 db  0Eh
.eh_frame:000000000001DCCE                 db  18h
.eh_frame:000000000001DCCF                 db  41h ; A
.eh_frame:000000000001DCD0                 db  0Eh
.eh_frame:000000000001DCD1                 db  10h
.eh_frame:000000000001DCD2                 db  41h ; A
.eh_frame:000000000001DCD3                 db  0Eh
.eh_frame:000000000001DCD4                 db    8
.eh_frame:000000000001DCD5                 db  44h ; D
.eh_frame:000000000001DCD6                 db  0Bh
.eh_frame:000000000001DCD7                 db    2
.eh_frame:000000000001DCD8                 db  54h ; T
.eh_frame:000000000001DCD9                 db  0Eh
.eh_frame:000000000001DCDA                 db  18h
.eh_frame:000000000001DCDB                 db  41h ; A
.eh_frame:000000000001DCDC                 db  0Eh
.eh_frame:000000000001DCDD                 db  10h
.eh_frame:000000000001DCDE                 db  41h ; A
.eh_frame:000000000001DCDF                 db  0Eh
.eh_frame:000000000001DCE0                 db    8
.eh_frame:000000000001DCE1                 db    0
.eh_frame:000000000001DCE2                 db    0
.eh_frame:000000000001DCE3                 db    0
.eh_frame:000000000001DCE4                 db  74h ; t
.eh_frame:000000000001DCE5                 db    0
.eh_frame:000000000001DCE6                 db    0
.eh_frame:000000000001DCE7                 db    0
.eh_frame:000000000001DCE8                 db  78h ; x
.eh_frame:000000000001DCE9                 db    6
.eh_frame:000000000001DCEA                 db    0
.eh_frame:000000000001DCEB                 db    0
.eh_frame:000000000001DCEC                 db  24h ; $
.eh_frame:000000000001DCED                 db  91h
.eh_frame:000000000001DCEE                 db 0FEh
.eh_frame:000000000001DCEF                 db 0FFh
.eh_frame:000000000001DCF0                 db  34h ; 4
.eh_frame:000000000001DCF1                 db  12h
.eh_frame:000000000001DCF2                 db    0
.eh_frame:000000000001DCF3                 db    0
.eh_frame:000000000001DCF4                 db    0
.eh_frame:000000000001DCF5                 db  42h ; B
.eh_frame:000000000001DCF6                 db  0Eh
.eh_frame:000000000001DCF7                 db  10h
.eh_frame:000000000001DCF8                 db  8Fh
.eh_frame:000000000001DCF9                 db    2
.eh_frame:000000000001DCFA                 db  42h ; B
.eh_frame:000000000001DCFB                 db  0Eh
.eh_frame:000000000001DCFC                 db  18h
.eh_frame:000000000001DCFD                 db  8Eh
.eh_frame:000000000001DCFE                 db    3
.eh_frame:000000000001DCFF                 db  45h ; E
.eh_frame:000000000001DD00                 db  0Eh
.eh_frame:000000000001DD01                 db  20h
.eh_frame:000000000001DD02                 db  8Dh
.eh_frame:000000000001DD03                 db    4
.eh_frame:000000000001DD04                 db  42h ; B
.eh_frame:000000000001DD05                 db  0Eh
.eh_frame:000000000001DD06                 db  28h ; (
.eh_frame:000000000001DD07                 db  8Ch
.eh_frame:000000000001DD08                 db    5
.eh_frame:000000000001DD09                 db  44h ; D
.eh_frame:000000000001DD0A                 db  0Eh
.eh_frame:000000000001DD0B                 db  30h ; 0
.eh_frame:000000000001DD0C                 db  86h
.eh_frame:000000000001DD0D                 db    6
.eh_frame:000000000001DD0E                 db  41h ; A
.eh_frame:000000000001DD0F                 db  0Eh
.eh_frame:000000000001DD10                 db  38h ; 8
.eh_frame:000000000001DD11                 db  83h
.eh_frame:000000000001DD12                 db    7
.eh_frame:000000000001DD13                 db  53h ; S
.eh_frame:000000000001DD14                 db  0Eh
.eh_frame:000000000001DD15                 db 0F0h
.eh_frame:000000000001DD16                 db    1
.eh_frame:000000000001DD17                 db    3
.eh_frame:000000000001DD18                 db  81h
.eh_frame:000000000001DD19                 db  0Bh
.eh_frame:000000000001DD1A                 db  0Eh
.eh_frame:000000000001DD1B                 db 0F8h
.eh_frame:000000000001DD1C                 db    1
.eh_frame:000000000001DD1D                 db  4Ah ; J
.eh_frame:000000000001DD1E                 db  0Eh
.eh_frame:000000000001DD1F                 db  80h
.eh_frame:000000000001DD20                 db    2
.eh_frame:000000000001DD21                 db  44h ; D
.eh_frame:000000000001DD22                 db  0Eh
.eh_frame:000000000001DD23                 db  88h
.eh_frame:000000000001DD24                 db    2
.eh_frame:000000000001DD25                 db  45h ; E
.eh_frame:000000000001DD26                 db  0Eh
.eh_frame:000000000001DD27                 db  90h
.eh_frame:000000000001DD28                 db    2
.eh_frame:000000000001DD29                 db  5Fh ; _
.eh_frame:000000000001DD2A                 db  0Eh
.eh_frame:000000000001DD2B                 db 0F0h
.eh_frame:000000000001DD2C                 db    1
.eh_frame:000000000001DD2D                 db  64h ; d
.eh_frame:000000000001DD2E                 db  0Ah
.eh_frame:000000000001DD2F                 db  0Eh
.eh_frame:000000000001DD30                 db  38h ; 8
.eh_frame:000000000001DD31                 db  41h ; A
.eh_frame:000000000001DD32                 db  0Eh
.eh_frame:000000000001DD33                 db  30h ; 0
.eh_frame:000000000001DD34                 db  41h ; A
.eh_frame:000000000001DD35                 db  0Eh
.eh_frame:000000000001DD36                 db  28h ; (
.eh_frame:000000000001DD37                 db  42h ; B
.eh_frame:000000000001DD38                 db  0Eh
.eh_frame:000000000001DD39                 db  20h
.eh_frame:000000000001DD3A                 db  42h ; B
.eh_frame:000000000001DD3B                 db  0Eh
.eh_frame:000000000001DD3C                 db  18h
.eh_frame:000000000001DD3D                 db  42h ; B
.eh_frame:000000000001DD3E                 db  0Eh
.eh_frame:000000000001DD3F                 db  10h
.eh_frame:000000000001DD40                 db  42h ; B
.eh_frame:000000000001DD41                 db  0Eh
.eh_frame:000000000001DD42                 db    8
.eh_frame:000000000001DD43                 db  44h ; D
.eh_frame:000000000001DD44                 db  0Bh
.eh_frame:000000000001DD45                 db    3
.eh_frame:000000000001DD46                 db  99h
.eh_frame:000000000001DD47                 db    5
.eh_frame:000000000001DD48                 db  0Eh
.eh_frame:000000000001DD49                 db 0F8h
.eh_frame:000000000001DD4A                 db    1
.eh_frame:000000000001DD4B                 db  4Dh ; M
.eh_frame:000000000001DD4C                 db  0Eh
.eh_frame:000000000001DD4D                 db  80h
.eh_frame:000000000001DD4E                 db    2
.eh_frame:000000000001DD4F                 db  44h ; D
.eh_frame:000000000001DD50                 db  0Eh
.eh_frame:000000000001DD51                 db  88h
.eh_frame:000000000001DD52                 db    2
.eh_frame:000000000001DD53                 db  47h ; G
.eh_frame:000000000001DD54                 db  0Eh
.eh_frame:000000000001DD55                 db  90h
.eh_frame:000000000001DD56                 db    2
.eh_frame:000000000001DD57                 db  5Bh ; [
.eh_frame:000000000001DD58                 db  0Eh
.eh_frame:000000000001DD59                 db 0F0h
.eh_frame:000000000001DD5A                 db    1
.eh_frame:000000000001DD5B                 db    0
.eh_frame:000000000001DD5C                 db  68h ; h
.eh_frame:000000000001DD5D                 db    0
.eh_frame:000000000001DD5E                 db    0
.eh_frame:000000000001DD5F                 db    0
.eh_frame:000000000001DD60                 db 0F0h
.eh_frame:000000000001DD61                 db    6
.eh_frame:000000000001DD62                 db    0
.eh_frame:000000000001DD63                 db    0
.eh_frame:000000000001DD64                 db 0ECh
.eh_frame:000000000001DD65                 db 0A2h
.eh_frame:000000000001DD66                 db 0FEh
.eh_frame:000000000001DD67                 db 0FFh
.eh_frame:000000000001DD68                 db 0ABh
.eh_frame:000000000001DD69                 db    1
.eh_frame:000000000001DD6A                 db    0
.eh_frame:000000000001DD6B                 db    0
.eh_frame:000000000001DD6C                 db    0
.eh_frame:000000000001DD6D                 db  42h ; B
.eh_frame:000000000001DD6E                 db  0Eh
.eh_frame:000000000001DD6F                 db  10h
.eh_frame:000000000001DD70                 db  8Fh
.eh_frame:000000000001DD71                 db    2
.eh_frame:000000000001DD72                 db  42h ; B
.eh_frame:000000000001DD73                 db  0Eh
.eh_frame:000000000001DD74                 db  18h
.eh_frame:000000000001DD75                 db  8Eh
.eh_frame:000000000001DD76                 db    3
.eh_frame:000000000001DD77                 db  45h ; E
.eh_frame:000000000001DD78                 db  0Eh
.eh_frame:000000000001DD79                 db  20h
.eh_frame:000000000001DD7A                 db  8Dh
.eh_frame:000000000001DD7B                 db    4
.eh_frame:000000000001DD7C                 db  42h ; B
.eh_frame:000000000001DD7D                 db  0Eh
.eh_frame:000000000001DD7E                 db  28h ; (
.eh_frame:000000000001DD7F                 db  8Ch
.eh_frame:000000000001DD80                 db    5
.eh_frame:000000000001DD81                 db  44h ; D
.eh_frame:000000000001DD82                 db  0Eh
.eh_frame:000000000001DD83                 db  30h ; 0
.eh_frame:000000000001DD84                 db  86h
.eh_frame:000000000001DD85                 db    6
.eh_frame:000000000001DD86                 db  41h ; A
.eh_frame:000000000001DD87                 db  0Eh
.eh_frame:000000000001DD88                 db  38h ; 8
.eh_frame:000000000001DD89                 db  83h
.eh_frame:000000000001DD8A                 db    7
.eh_frame:000000000001DD8B                 db  47h ; G
.eh_frame:000000000001DD8C                 db  0Eh
.eh_frame:000000000001DD8D                 db  60h ; `
.eh_frame:000000000001DD8E                 db    2
.eh_frame:000000000001DD8F                 db  99h
.eh_frame:000000000001DD90                 db  0Eh
.eh_frame:000000000001DD91                 db  68h ; h
.eh_frame:000000000001DD92                 db  5Fh ; _
.eh_frame:000000000001DD93                 db  0Eh
.eh_frame:000000000001DD94                 db  70h ; p
.eh_frame:000000000001DD95                 db  46h ; F
.eh_frame:000000000001DD96                 db  0Eh
.eh_frame:000000000001DD97                 db  78h ; x
.eh_frame:000000000001DD98                 db  42h ; B
.eh_frame:000000000001DD99                 db  0Eh
.eh_frame:000000000001DD9A                 db  80h
.eh_frame:000000000001DD9B                 db    1
.eh_frame:000000000001DD9C                 db  59h ; Y
.eh_frame:000000000001DD9D                 db  0Eh
.eh_frame:000000000001DD9E                 db  60h ; `
.eh_frame:000000000001DD9F                 db    2
.eh_frame:000000000001DDA0                 db  40h ; @
.eh_frame:000000000001DDA1                 db  0Eh
.eh_frame:000000000001DDA2                 db  68h ; h
.eh_frame:000000000001DDA3                 db  4Bh ; K
.eh_frame:000000000001DDA4                 db  0Eh
.eh_frame:000000000001DDA5                 db  70h ; p
.eh_frame:000000000001DDA6                 db  43h ; C
.eh_frame:000000000001DDA7                 db  0Eh
.eh_frame:000000000001DDA8                 db  78h ; x
.eh_frame:000000000001DDA9                 db  45h ; E
.eh_frame:000000000001DDAA                 db  0Eh
.eh_frame:000000000001DDAB                 db  80h
.eh_frame:000000000001DDAC                 db    1
.eh_frame:000000000001DDAD                 db  5Eh ; ^
.eh_frame:000000000001DDAE                 db  0Eh
.eh_frame:000000000001DDAF                 db  60h ; `
.eh_frame:000000000001DDB0                 db  4Ch ; L
.eh_frame:000000000001DDB1                 db  0Ah
.eh_frame:000000000001DDB2                 db  0Eh
.eh_frame:000000000001DDB3                 db  38h ; 8
.eh_frame:000000000001DDB4                 db  44h ; D
.eh_frame:000000000001DDB5                 db  0Eh
.eh_frame:000000000001DDB6                 db  30h ; 0
.eh_frame:000000000001DDB7                 db  41h ; A
.eh_frame:000000000001DDB8                 db  0Eh
.eh_frame:000000000001DDB9                 db  28h ; (
.eh_frame:000000000001DDBA                 db  42h ; B
.eh_frame:000000000001DDBB                 db  0Eh
.eh_frame:000000000001DDBC                 db  20h
.eh_frame:000000000001DDBD                 db  42h ; B
.eh_frame:000000000001DDBE                 db  0Eh
.eh_frame:000000000001DDBF                 db  18h
.eh_frame:000000000001DDC0                 db  42h ; B
.eh_frame:000000000001DDC1                 db  0Eh
.eh_frame:000000000001DDC2                 db  10h
.eh_frame:000000000001DDC3                 db  42h ; B
.eh_frame:000000000001DDC4                 db  0Eh
.eh_frame:000000000001DDC5                 db    8
.eh_frame:000000000001DDC6                 db  46h ; F
.eh_frame:000000000001DDC7                 db  0Bh
.eh_frame:000000000001DDC8                 db  28h ; (
.eh_frame:000000000001DDC9                 db    0
.eh_frame:000000000001DDCA                 db    0
.eh_frame:000000000001DDCB                 db    0
.eh_frame:000000000001DDCC                 db  5Ch ; \
.eh_frame:000000000001DDCD                 db    7
.eh_frame:000000000001DDCE                 db    0
.eh_frame:000000000001DDCF                 db    0
.eh_frame:000000000001DDD0                 db  30h ; 0
.eh_frame:000000000001DDD1                 db 0A4h
.eh_frame:000000000001DDD2                 db 0FEh
.eh_frame:000000000001DDD3                 db 0FFh
.eh_frame:000000000001DDD4                 db  36h ; 6
.eh_frame:000000000001DDD5                 db    0
.eh_frame:000000000001DDD6                 db    0
.eh_frame:000000000001DDD7                 db    0
.eh_frame:000000000001DDD8                 db    0
.eh_frame:000000000001DDD9                 db  42h ; B
.eh_frame:000000000001DDDA                 db  0Eh
.eh_frame:000000000001DDDB                 db  10h
.eh_frame:000000000001DDDC                 db  8Ch
.eh_frame:000000000001DDDD                 db    2
.eh_frame:000000000001DDDE                 db  41h ; A
.eh_frame:000000000001DDDF                 db  0Eh
.eh_frame:000000000001DDE0                 db  18h
.eh_frame:000000000001DDE1                 db  86h
.eh_frame:000000000001DDE2                 db    3
.eh_frame:000000000001DDE3                 db  41h ; A
.eh_frame:000000000001DDE4                 db  0Eh
.eh_frame:000000000001DDE5                 db  20h
.eh_frame:000000000001DDE6                 db  83h
.eh_frame:000000000001DDE7                 db    4
.eh_frame:000000000001DDE8                 db  6Eh ; n
.eh_frame:000000000001DDE9                 db  0Eh
.eh_frame:000000000001DDEA                 db  18h
.eh_frame:000000000001DDEB                 db  41h ; A
.eh_frame:000000000001DDEC                 db  0Eh
.eh_frame:000000000001DDED                 db  10h
.eh_frame:000000000001DDEE                 db  42h ; B
.eh_frame:000000000001DDEF                 db  0Eh
.eh_frame:000000000001DDF0                 db    8
.eh_frame:000000000001DDF1                 db    0
.eh_frame:000000000001DDF2                 db    0
.eh_frame:000000000001DDF3                 db    0
.eh_frame:000000000001DDF4                 db  10h
.eh_frame:000000000001DDF5                 db    0
.eh_frame:000000000001DDF6                 db    0
.eh_frame:000000000001DDF7                 db    0
.eh_frame:000000000001DDF8                 db  88h
.eh_frame:000000000001DDF9                 db    7
.eh_frame:000000000001DDFA                 db    0
.eh_frame:000000000001DDFB                 db    0
.eh_frame:000000000001DDFC                 db  44h ; D
.eh_frame:000000000001DDFD                 db 0A4h
.eh_frame:000000000001DDFE                 db 0FEh
.eh_frame:000000000001DDFF                 db 0FFh
.eh_frame:000000000001DE00                 db  11h
.eh_frame:000000000001DE01                 db    0
.eh_frame:000000000001DE02                 db    0
.eh_frame:000000000001DE03                 db    0
.eh_frame:000000000001DE04                 db    0
.eh_frame:000000000001DE05                 db    0
.eh_frame:000000000001DE06                 db    0
.eh_frame:000000000001DE07                 db    0
.eh_frame:000000000001DE08                 db  10h
.eh_frame:000000000001DE09                 db    0
.eh_frame:000000000001DE0A                 db    0
.eh_frame:000000000001DE0B                 db    0
.eh_frame:000000000001DE0C                 db  9Ch
.eh_frame:000000000001DE0D                 db    7
.eh_frame:000000000001DE0E                 db    0
.eh_frame:000000000001DE0F                 db    0
.eh_frame:000000000001DE10                 db  50h ; P
.eh_frame:000000000001DE11                 db 0A4h
.eh_frame:000000000001DE12                 db 0FEh
.eh_frame:000000000001DE13                 db 0FFh
.eh_frame:000000000001DE14                 db  11h
.eh_frame:000000000001DE15                 db    0
.eh_frame:000000000001DE16                 db    0
.eh_frame:000000000001DE17                 db    0
.eh_frame:000000000001DE18                 db    0
.eh_frame:000000000001DE19                 db    0
.eh_frame:000000000001DE1A                 db    0
.eh_frame:000000000001DE1B                 db    0
.eh_frame:000000000001DE1C                 db  10h
.eh_frame:000000000001DE1D                 db    0
.eh_frame:000000000001DE1E                 db    0
.eh_frame:000000000001DE1F                 db    0
.eh_frame:000000000001DE20                 db 0B0h
.eh_frame:000000000001DE21                 db    7
.eh_frame:000000000001DE22                 db    0
.eh_frame:000000000001DE23                 db    0
.eh_frame:000000000001DE24                 db  5Ch ; \
.eh_frame:000000000001DE25                 db 0A4h
.eh_frame:000000000001DE26                 db 0FEh
.eh_frame:000000000001DE27                 db 0FFh
.eh_frame:000000000001DE28                 db  35h ; 5
.eh_frame:000000000001DE29                 db    0
.eh_frame:000000000001DE2A                 db    0
.eh_frame:000000000001DE2B                 db    0
.eh_frame:000000000001DE2C                 db    0
.eh_frame:000000000001DE2D                 db    0
.eh_frame:000000000001DE2E                 db    0
.eh_frame:000000000001DE2F                 db    0
.eh_frame:000000000001DE30                 db  10h
.eh_frame:000000000001DE31                 db    0
.eh_frame:000000000001DE32                 db    0
.eh_frame:000000000001DE33                 db    0
.eh_frame:000000000001DE34                 db 0C4h
.eh_frame:000000000001DE35                 db    7
.eh_frame:000000000001DE36                 db    0
.eh_frame:000000000001DE37                 db    0
.eh_frame:000000000001DE38                 db  88h
.eh_frame:000000000001DE39                 db 0A4h
.eh_frame:000000000001DE3A                 db 0FEh
.eh_frame:000000000001DE3B                 db 0FFh
.eh_frame:000000000001DE3C                 db  15h
.eh_frame:000000000001DE3D                 db    0
.eh_frame:000000000001DE3E                 db    0
.eh_frame:000000000001DE3F                 db    0
.eh_frame:000000000001DE40                 db    0
.eh_frame:000000000001DE41                 db    0
.eh_frame:000000000001DE42                 db    0
.eh_frame:000000000001DE43                 db    0
.eh_frame:000000000001DE44                 db  10h
.eh_frame:000000000001DE45                 db    0
.eh_frame:000000000001DE46                 db    0
.eh_frame:000000000001DE47                 db    0
.eh_frame:000000000001DE48                 db 0D8h
.eh_frame:000000000001DE49                 db    7
.eh_frame:000000000001DE4A                 db    0
.eh_frame:000000000001DE4B                 db    0
.eh_frame:000000000001DE4C                 db  94h
.eh_frame:000000000001DE4D                 db 0A4h
.eh_frame:000000000001DE4E                 db 0FEh
.eh_frame:000000000001DE4F                 db 0FFh
.eh_frame:000000000001DE50                 db  30h ; 0
.eh_frame:000000000001DE51                 db    0
.eh_frame:000000000001DE52                 db    0
.eh_frame:000000000001DE53                 db    0
.eh_frame:000000000001DE54                 db    0
.eh_frame:000000000001DE55                 db  6Bh ; k
.eh_frame:000000000001DE56                 db  0Eh
.eh_frame:000000000001DE57                 db  10h
.eh_frame:000000000001DE58                 db  50h ; P
.eh_frame:000000000001DE59                 db    0
.eh_frame:000000000001DE5A                 db    0
.eh_frame:000000000001DE5B                 db    0
.eh_frame:000000000001DE5C                 db 0ECh
.eh_frame:000000000001DE5D                 db    7
.eh_frame:000000000001DE5E                 db    0
.eh_frame:000000000001DE5F                 db    0
.eh_frame:000000000001DE60                 db 0B0h
.eh_frame:000000000001DE61                 db 0A4h
.eh_frame:000000000001DE62                 db 0FEh
.eh_frame:000000000001DE63                 db 0FFh
.eh_frame:000000000001DE64                 db  74h ; t
.eh_frame:000000000001DE65                 db    0
.eh_frame:000000000001DE66                 db    0
.eh_frame:000000000001DE67                 db    0
.eh_frame:000000000001DE68                 db    0
.eh_frame:000000000001DE69                 db  42h ; B
.eh_frame:000000000001DE6A                 db  0Eh
.eh_frame:000000000001DE6B                 db  10h
.eh_frame:000000000001DE6C                 db  8Fh
.eh_frame:000000000001DE6D                 db    2
.eh_frame:000000000001DE6E                 db  42h ; B
.eh_frame:000000000001DE6F                 db  0Eh
.eh_frame:000000000001DE70                 db  18h
.eh_frame:000000000001DE71                 db  8Eh
.eh_frame:000000000001DE72                 db    3
.eh_frame:000000000001DE73                 db  49h ; I
.eh_frame:000000000001DE74                 db  0Eh
.eh_frame:000000000001DE75                 db  20h
.eh_frame:000000000001DE76                 db  8Dh
.eh_frame:000000000001DE77                 db    4
.eh_frame:000000000001DE78                 db  42h ; B
.eh_frame:000000000001DE79                 db  0Eh
.eh_frame:000000000001DE7A                 db  28h ; (
.eh_frame:000000000001DE7B                 db  8Ch
.eh_frame:000000000001DE7C                 db    5
.eh_frame:000000000001DE7D                 db  44h ; D
.eh_frame:000000000001DE7E                 db  0Eh
.eh_frame:000000000001DE7F                 db  30h ; 0
.eh_frame:000000000001DE80                 db  86h
.eh_frame:000000000001DE81                 db    6
.eh_frame:000000000001DE82                 db  41h ; A
.eh_frame:000000000001DE83                 db  0Eh
.eh_frame:000000000001DE84                 db  38h ; 8
.eh_frame:000000000001DE85                 db  83h
.eh_frame:000000000001DE86                 db    7
.eh_frame:000000000001DE87                 db  4Dh ; M
.eh_frame:000000000001DE88                 db  0Eh
.eh_frame:000000000001DE89                 db  50h ; P
.eh_frame:000000000001DE8A                 db  5Fh ; _
.eh_frame:000000000001DE8B                 db  0Eh
.eh_frame:000000000001DE8C                 db  58h ; X
.eh_frame:000000000001DE8D                 db  47h ; G
.eh_frame:000000000001DE8E                 db  0Eh
.eh_frame:000000000001DE8F                 db  60h ; `
.eh_frame:000000000001DE90                 db  46h ; F
.eh_frame:000000000001DE91                 db  0Eh
.eh_frame:000000000001DE92                 db  68h ; h
.eh_frame:000000000001DE93                 db  44h ; D
.eh_frame:000000000001DE94                 db  0Eh
.eh_frame:000000000001DE95                 db  70h ; p
.eh_frame:000000000001DE96                 db  58h ; X
.eh_frame:000000000001DE97                 db  0Eh
.eh_frame:000000000001DE98                 db  38h ; 8
.eh_frame:000000000001DE99                 db  41h ; A
.eh_frame:000000000001DE9A                 db  0Eh
.eh_frame:000000000001DE9B                 db  30h ; 0
.eh_frame:000000000001DE9C                 db  41h ; A
.eh_frame:000000000001DE9D                 db  0Eh
.eh_frame:000000000001DE9E                 db  28h ; (
.eh_frame:000000000001DE9F                 db  42h ; B
.eh_frame:000000000001DEA0                 db  0Eh
.eh_frame:000000000001DEA1                 db  20h
.eh_frame:000000000001DEA2                 db  42h ; B
.eh_frame:000000000001DEA3                 db  0Eh
.eh_frame:000000000001DEA4                 db  18h
.eh_frame:000000000001DEA5                 db  42h ; B
.eh_frame:000000000001DEA6                 db  0Eh
.eh_frame:000000000001DEA7                 db  10h
.eh_frame:000000000001DEA8                 db  42h ; B
.eh_frame:000000000001DEA9                 db  0Eh
.eh_frame:000000000001DEAA                 db    8
.eh_frame:000000000001DEAB                 db    0
.eh_frame:000000000001DEAC                 db  68h ; h
.eh_frame:000000000001DEAD                 db    0
.eh_frame:000000000001DEAE                 db    0
.eh_frame:000000000001DEAF                 db    0
.eh_frame:000000000001DEB0                 db  40h ; @
.eh_frame:000000000001DEB1                 db    8
.eh_frame:000000000001DEB2                 db    0
.eh_frame:000000000001DEB3                 db    0
.eh_frame:000000000001DEB4                 db 0DCh
.eh_frame:000000000001DEB5                 db 0A4h
.eh_frame:000000000001DEB6                 db 0FEh
.eh_frame:000000000001DEB7                 db 0FFh
.eh_frame:000000000001DEB8                 db 0E3h
.eh_frame:000000000001DEB9                 db    0
.eh_frame:000000000001DEBA                 db    0
.eh_frame:000000000001DEBB                 db    0
.eh_frame:000000000001DEBC                 db    0
.eh_frame:000000000001DEBD                 db  42h ; B
.eh_frame:000000000001DEBE                 db  0Eh
.eh_frame:000000000001DEBF                 db  10h
.eh_frame:000000000001DEC0                 db  8Fh
.eh_frame:000000000001DEC1                 db    2
.eh_frame:000000000001DEC2                 db  42h ; B
.eh_frame:000000000001DEC3                 db  0Eh
.eh_frame:000000000001DEC4                 db  18h
.eh_frame:000000000001DEC5                 db  8Eh
.eh_frame:000000000001DEC6                 db    3
.eh_frame:000000000001DEC7                 db  49h ; I
.eh_frame:000000000001DEC8                 db  0Eh
.eh_frame:000000000001DEC9                 db  20h
.eh_frame:000000000001DECA                 db  8Dh
.eh_frame:000000000001DECB                 db    4
.eh_frame:000000000001DECC                 db  42h ; B
.eh_frame:000000000001DECD                 db  0Eh
.eh_frame:000000000001DECE                 db  28h ; (
.eh_frame:000000000001DECF                 db  8Ch
.eh_frame:000000000001DED0                 db    5
.eh_frame:000000000001DED1                 db  44h ; D
.eh_frame:000000000001DED2                 db  0Eh
.eh_frame:000000000001DED3                 db  30h ; 0
.eh_frame:000000000001DED4                 db  86h
.eh_frame:000000000001DED5                 db    6
.eh_frame:000000000001DED6                 db  41h ; A
.eh_frame:000000000001DED7                 db  0Eh
.eh_frame:000000000001DED8                 db  38h ; 8
.eh_frame:000000000001DED9                 db  83h
.eh_frame:000000000001DEDA                 db    7
.eh_frame:000000000001DEDB                 db  4Dh ; M
.eh_frame:000000000001DEDC                 db  0Eh
.eh_frame:000000000001DEDD                 db  70h ; p
.eh_frame:000000000001DEDE                 db  65h ; e
.eh_frame:000000000001DEDF                 db  0Eh
.eh_frame:000000000001DEE0                 db  78h ; x
.eh_frame:000000000001DEE1                 db  4Dh ; M
.eh_frame:000000000001DEE2                 db  0Eh
.eh_frame:000000000001DEE3                 db  80h
.eh_frame:000000000001DEE4                 db    1
.eh_frame:000000000001DEE5                 db  46h ; F
.eh_frame:000000000001DEE6                 db  0Eh
.eh_frame:000000000001DEE7                 db  88h
.eh_frame:000000000001DEE8                 db    1
.eh_frame:000000000001DEE9                 db  42h ; B
.eh_frame:000000000001DEEA                 db  0Eh
.eh_frame:000000000001DEEB                 db  90h
.eh_frame:000000000001DEEC                 db    1
.eh_frame:000000000001DEED                 db  5Eh ; ^
.eh_frame:000000000001DEEE                 db  0Eh
.eh_frame:000000000001DEEF                 db  70h ; p
.eh_frame:000000000001DEF0                 db  56h ; V
.eh_frame:000000000001DEF1                 db  0Eh
.eh_frame:000000000001DEF2                 db  78h ; x
.eh_frame:000000000001DEF3                 db  43h ; C
.eh_frame:000000000001DEF4                 db  0Eh
.eh_frame:000000000001DEF5                 db  80h
.eh_frame:000000000001DEF6                 db    1
.eh_frame:000000000001DEF7                 db  43h ; C
.eh_frame:000000000001DEF8                 db  0Eh
.eh_frame:000000000001DEF9                 db  88h
.eh_frame:000000000001DEFA                 db    1
.eh_frame:000000000001DEFB                 db  56h ; V
.eh_frame:000000000001DEFC                 db  0Eh
.eh_frame:000000000001DEFD                 db  90h
.eh_frame:000000000001DEFE                 db    1
.eh_frame:000000000001DEFF                 db  52h ; R
.eh_frame:000000000001DF00                 db  0Eh
.eh_frame:000000000001DF01                 db  70h ; p
.eh_frame:000000000001DF02                 db  5Bh ; [
.eh_frame:000000000001DF03                 db  0Eh
.eh_frame:000000000001DF04                 db  38h ; 8
.eh_frame:000000000001DF05                 db  41h ; A
.eh_frame:000000000001DF06                 db  0Eh
.eh_frame:000000000001DF07                 db  30h ; 0
.eh_frame:000000000001DF08                 db  41h ; A
.eh_frame:000000000001DF09                 db  0Eh
.eh_frame:000000000001DF0A                 db  28h ; (
.eh_frame:000000000001DF0B                 db  42h ; B
.eh_frame:000000000001DF0C                 db  0Eh
.eh_frame:000000000001DF0D                 db  20h
.eh_frame:000000000001DF0E                 db  42h ; B
.eh_frame:000000000001DF0F                 db  0Eh
.eh_frame:000000000001DF10                 db  18h
.eh_frame:000000000001DF11                 db  42h ; B
.eh_frame:000000000001DF12                 db  0Eh
.eh_frame:000000000001DF13                 db  10h
.eh_frame:000000000001DF14                 db  42h ; B
.eh_frame:000000000001DF15                 db  0Eh
.eh_frame:000000000001DF16                 db    8
.eh_frame:000000000001DF17                 db    0
.eh_frame:000000000001DF18                 db  10h
.eh_frame:000000000001DF19                 db    0
.eh_frame:000000000001DF1A                 db    0
.eh_frame:000000000001DF1B                 db    0
.eh_frame:000000000001DF1C                 db 0ACh
.eh_frame:000000000001DF1D                 db    8
.eh_frame:000000000001DF1E                 db    0
.eh_frame:000000000001DF1F                 db    0
.eh_frame:000000000001DF20                 db  60h ; `
.eh_frame:000000000001DF21                 db 0A5h
.eh_frame:000000000001DF22                 db 0FEh
.eh_frame:000000000001DF23                 db 0FFh
.eh_frame:000000000001DF24                 db  0Ah
.eh_frame:000000000001DF25                 db    0
.eh_frame:000000000001DF26                 db    0
.eh_frame:000000000001DF27                 db    0
.eh_frame:000000000001DF28                 db    0
.eh_frame:000000000001DF29                 db    0
.eh_frame:000000000001DF2A                 db    0
.eh_frame:000000000001DF2B                 db    0
.eh_frame:000000000001DF2C                 db  28h ; (
.eh_frame:000000000001DF2D                 db    0
.eh_frame:000000000001DF2E                 db    0
.eh_frame:000000000001DF2F                 db    0
.eh_frame:000000000001DF30                 db 0C0h
.eh_frame:000000000001DF31                 db    8
.eh_frame:000000000001DF32                 db    0
.eh_frame:000000000001DF33                 db    0
.eh_frame:000000000001DF34                 db  5Ch ; \
.eh_frame:000000000001DF35                 db 0A5h
.eh_frame:000000000001DF36                 db 0FEh
.eh_frame:000000000001DF37                 db 0FFh
.eh_frame:000000000001DF38                 db  93h
.eh_frame:000000000001DF39                 db    0
.eh_frame:000000000001DF3A                 db    0
.eh_frame:000000000001DF3B                 db    0
.eh_frame:000000000001DF3C                 db    0
.eh_frame:000000000001DF3D                 db  48h ; H
.eh_frame:000000000001DF3E                 db  0Eh
.eh_frame:000000000001DF3F                 db  10h
.eh_frame:000000000001DF40                 db  8Ch
.eh_frame:000000000001DF41                 db    2
.eh_frame:000000000001DF42                 db  48h ; H
.eh_frame:000000000001DF43                 db  0Eh
.eh_frame:000000000001DF44                 db  18h
.eh_frame:000000000001DF45                 db  86h
.eh_frame:000000000001DF46                 db    3
.eh_frame:000000000001DF47                 db  41h ; A
.eh_frame:000000000001DF48                 db  0Eh
.eh_frame:000000000001DF49                 db  20h
.eh_frame:000000000001DF4A                 db  83h
.eh_frame:000000000001DF4B                 db    4
.eh_frame:000000000001DF4C                 db    2
.eh_frame:000000000001DF4D                 db  74h ; t
.eh_frame:000000000001DF4E                 db  0Eh
.eh_frame:000000000001DF4F                 db  18h
.eh_frame:000000000001DF50                 db  4Bh ; K
.eh_frame:000000000001DF51                 db  0Eh
.eh_frame:000000000001DF52                 db  10h
.eh_frame:000000000001DF53                 db  42h ; B
.eh_frame:000000000001DF54                 db  0Eh
.eh_frame:000000000001DF55                 db    8
.eh_frame:000000000001DF56                 db    0
.eh_frame:000000000001DF57                 db    0
.eh_frame:000000000001DF58                 db  10h
.eh_frame:000000000001DF59                 db    0
.eh_frame:000000000001DF5A                 db    0
.eh_frame:000000000001DF5B                 db    0
.eh_frame:000000000001DF5C                 db 0ECh
.eh_frame:000000000001DF5D                 db    8
.eh_frame:000000000001DF5E                 db    0
.eh_frame:000000000001DF5F                 db    0
.eh_frame:000000000001DF60                 db 0D0h
.eh_frame:000000000001DF61                 db 0A5h
.eh_frame:000000000001DF62                 db 0FEh
.eh_frame:000000000001DF63                 db 0FFh
.eh_frame:000000000001DF64                 db  13h
.eh_frame:000000000001DF65                 db    0
.eh_frame:000000000001DF66                 db    0
.eh_frame:000000000001DF67                 db    0
.eh_frame:000000000001DF68                 db    0
.eh_frame:000000000001DF69                 db    0
.eh_frame:000000000001DF6A                 db    0
.eh_frame:000000000001DF6B                 db    0
.eh_frame:000000000001DF6C                 db  10h
.eh_frame:000000000001DF6D                 db    0
.eh_frame:000000000001DF6E                 db    0
.eh_frame:000000000001DF6F                 db    0
.eh_frame:000000000001DF70                 db    0
.eh_frame:000000000001DF71                 db    9
.eh_frame:000000000001DF72                 db    0
.eh_frame:000000000001DF73                 db    0
.eh_frame:000000000001DF74                 db 0DCh
.eh_frame:000000000001DF75                 db 0A5h
.eh_frame:000000000001DF76                 db 0FEh
.eh_frame:000000000001DF77                 db 0FFh
.eh_frame:000000000001DF78                 db  0Ch
.eh_frame:000000000001DF79                 db    0
.eh_frame:000000000001DF7A                 db    0
.eh_frame:000000000001DF7B                 db    0
.eh_frame:000000000001DF7C                 db    0
.eh_frame:000000000001DF7D                 db    0
.eh_frame:000000000001DF7E                 db    0
.eh_frame:000000000001DF7F                 db    0
.eh_frame:000000000001DF80                 db  10h
.eh_frame:000000000001DF81                 db    0
.eh_frame:000000000001DF82                 db    0
.eh_frame:000000000001DF83                 db    0
.eh_frame:000000000001DF84                 db  14h
.eh_frame:000000000001DF85                 db    9
.eh_frame:000000000001DF86                 db    0
.eh_frame:000000000001DF87                 db    0
.eh_frame:000000000001DF88                 db 0D8h
.eh_frame:000000000001DF89                 db 0A5h
.eh_frame:000000000001DF8A                 db 0FEh
.eh_frame:000000000001DF8B                 db 0FFh
.eh_frame:000000000001DF8C                 db  18h
.eh_frame:000000000001DF8D                 db    0
.eh_frame:000000000001DF8E                 db    0
.eh_frame:000000000001DF8F                 db    0
.eh_frame:000000000001DF90                 db    0
.eh_frame:000000000001DF91                 db    0
.eh_frame:000000000001DF92                 db    0
.eh_frame:000000000001DF93                 db    0
.eh_frame:000000000001DF94                 db  10h
.eh_frame:000000000001DF95                 db    0
.eh_frame:000000000001DF96                 db    0
.eh_frame:000000000001DF97                 db    0
.eh_frame:000000000001DF98                 db  28h ; (
.eh_frame:000000000001DF99                 db    9
.eh_frame:000000000001DF9A                 db    0
.eh_frame:000000000001DF9B                 db    0
.eh_frame:000000000001DF9C                 db 0E4h
.eh_frame:000000000001DF9D                 db 0A5h
.eh_frame:000000000001DF9E                 db 0FEh
.eh_frame:000000000001DF9F                 db 0FFh
.eh_frame:000000000001DFA0                 db  14h
.eh_frame:000000000001DFA1                 db    0
.eh_frame:000000000001DFA2                 db    0
.eh_frame:000000000001DFA3                 db    0
.eh_frame:000000000001DFA4                 db    0
.eh_frame:000000000001DFA5                 db    0
.eh_frame:000000000001DFA6                 db    0
.eh_frame:000000000001DFA7                 db    0
.eh_frame:000000000001DFA8                 db  18h
.eh_frame:000000000001DFA9                 db    0
.eh_frame:000000000001DFAA                 db    0
.eh_frame:000000000001DFAB                 db    0
.eh_frame:000000000001DFAC                 db  3Ch ; <
.eh_frame:000000000001DFAD                 db    9
.eh_frame:000000000001DFAE                 db    0
.eh_frame:000000000001DFAF                 db    0
.eh_frame:000000000001DFB0                 db 0F0h
.eh_frame:000000000001DFB1                 db 0A5h
.eh_frame:000000000001DFB2                 db 0FEh
.eh_frame:000000000001DFB3                 db 0FFh
.eh_frame:000000000001DFB4                 db  8Eh
.eh_frame:000000000001DFB5                 db    0
.eh_frame:000000000001DFB6                 db    0
.eh_frame:000000000001DFB7                 db    0
.eh_frame:000000000001DFB8                 db    0
.eh_frame:000000000001DFB9                 db  44h ; D
.eh_frame:000000000001DFBA                 db  0Eh
.eh_frame:000000000001DFBB                 db  50h ; P
.eh_frame:000000000001DFBC                 db    2
.eh_frame:000000000001DFBD                 db  7Fh ; 
.eh_frame:000000000001DFBE                 db  0Ah
.eh_frame:000000000001DFBF                 db  0Eh
.eh_frame:000000000001DFC0                 db    8
.eh_frame:000000000001DFC1                 db  41h ; A
.eh_frame:000000000001DFC2                 db  0Bh
.eh_frame:000000000001DFC3                 db    0
.eh_frame:000000000001DFC4                 db  18h
.eh_frame:000000000001DFC5                 db    0
.eh_frame:000000000001DFC6                 db    0
.eh_frame:000000000001DFC7                 db    0
.eh_frame:000000000001DFC8                 db  58h ; X
.eh_frame:000000000001DFC9                 db    9
.eh_frame:000000000001DFCA                 db    0
.eh_frame:000000000001DFCB                 db    0
.eh_frame:000000000001DFCC                 db  64h ; d
.eh_frame:000000000001DFCD                 db 0A6h
.eh_frame:000000000001DFCE                 db 0FEh
.eh_frame:000000000001DFCF                 db 0FFh
.eh_frame:000000000001DFD0                 db  8Ah
.eh_frame:000000000001DFD1                 db    0
.eh_frame:000000000001DFD2                 db    0
.eh_frame:000000000001DFD3                 db    0
.eh_frame:000000000001DFD4                 db    0
.eh_frame:000000000001DFD5                 db  44h ; D
.eh_frame:000000000001DFD6                 db  0Eh
.eh_frame:000000000001DFD7                 db  50h ; P
.eh_frame:000000000001DFD8                 db    2
.eh_frame:000000000001DFD9                 db  7Bh ; {
.eh_frame:000000000001DFDA                 db  0Ah
.eh_frame:000000000001DFDB                 db  0Eh
.eh_frame:000000000001DFDC                 db    8
.eh_frame:000000000001DFDD                 db  41h ; A
.eh_frame:000000000001DFDE                 db  0Bh
.eh_frame:000000000001DFDF                 db    0
.eh_frame:000000000001DFE0                 db  10h
.eh_frame:000000000001DFE1                 db    0
.eh_frame:000000000001DFE2                 db    0
.eh_frame:000000000001DFE3                 db    0
.eh_frame:000000000001DFE4                 db  74h ; t
.eh_frame:000000000001DFE5                 db    9
.eh_frame:000000000001DFE6                 db    0
.eh_frame:000000000001DFE7                 db    0
.eh_frame:000000000001DFE8                 db 0D8h
.eh_frame:000000000001DFE9                 db 0A6h
.eh_frame:000000000001DFEA                 db 0FEh
.eh_frame:000000000001DFEB                 db 0FFh
.eh_frame:000000000001DFEC                 db  0Ch
.eh_frame:000000000001DFED                 db    0
.eh_frame:000000000001DFEE                 db    0
.eh_frame:000000000001DFEF                 db    0
.eh_frame:000000000001DFF0                 db    0
.eh_frame:000000000001DFF1                 db    0
.eh_frame:000000000001DFF2                 db    0
.eh_frame:000000000001DFF3                 db    0
.eh_frame:000000000001DFF4                 db  10h
.eh_frame:000000000001DFF5                 db    0
.eh_frame:000000000001DFF6                 db    0
.eh_frame:000000000001DFF7                 db    0
.eh_frame:000000000001DFF8                 db  88h
.eh_frame:000000000001DFF9                 db    9
.eh_frame:000000000001DFFA                 db    0
.eh_frame:000000000001DFFB                 db    0
.eh_frame:000000000001DFFC                 db 0D4h
.eh_frame:000000000001DFFD                 db 0A6h
.eh_frame:000000000001DFFE                 db 0FEh
.eh_frame:000000000001DFFF                 db 0FFh
.eh_frame:000000000001E000                 db  0Fh
.eh_frame:000000000001E001                 db    0
.eh_frame:000000000001E002                 db    0
.eh_frame:000000000001E003                 db    0
.eh_frame:000000000001E004                 db    0
.eh_frame:000000000001E005                 db    0
.eh_frame:000000000001E006                 db    0
.eh_frame:000000000001E007                 db    0
.eh_frame:000000000001E008                 db  18h
.eh_frame:000000000001E009                 db    0
.eh_frame:000000000001E00A                 db    0
.eh_frame:000000000001E00B                 db    0
.eh_frame:000000000001E00C                 db  9Ch
.eh_frame:000000000001E00D                 db    9
.eh_frame:000000000001E00E                 db    0
.eh_frame:000000000001E00F                 db    0
.eh_frame:000000000001E010                 db 0D0h
.eh_frame:000000000001E011                 db 0A6h
.eh_frame:000000000001E012                 db 0FEh
.eh_frame:000000000001E013                 db 0FFh
.eh_frame:000000000001E014                 db  98h
.eh_frame:000000000001E015                 db    0
.eh_frame:000000000001E016                 db    0
.eh_frame:000000000001E017                 db    0
.eh_frame:000000000001E018                 db    0
.eh_frame:000000000001E019                 db  44h ; D
.eh_frame:000000000001E01A                 db  0Eh
.eh_frame:000000000001E01B                 db  50h ; P
.eh_frame:000000000001E01C                 db    2
.eh_frame:000000000001E01D                 db  8Eh
.eh_frame:000000000001E01E                 db  0Ah
.eh_frame:000000000001E01F                 db  0Eh
.eh_frame:000000000001E020                 db    8
.eh_frame:000000000001E021                 db  41h ; A
.eh_frame:000000000001E022                 db  0Bh
.eh_frame:000000000001E023                 db    0
.eh_frame:000000000001E024                 db  10h
.eh_frame:000000000001E025                 db    0
.eh_frame:000000000001E026                 db    0
.eh_frame:000000000001E027                 db    0
.eh_frame:000000000001E028                 db 0B8h
.eh_frame:000000000001E029                 db    9
.eh_frame:000000000001E02A                 db    0
.eh_frame:000000000001E02B                 db    0
.eh_frame:000000000001E02C                 db  54h ; T
.eh_frame:000000000001E02D                 db 0A7h
.eh_frame:000000000001E02E                 db 0FEh
.eh_frame:000000000001E02F                 db 0FFh
.eh_frame:000000000001E030                 db  10h
.eh_frame:000000000001E031                 db    0
.eh_frame:000000000001E032                 db    0
.eh_frame:000000000001E033                 db    0
.eh_frame:000000000001E034                 db    0
.eh_frame:000000000001E035                 db    0
.eh_frame:000000000001E036                 db    0
.eh_frame:000000000001E037                 db    0
.eh_frame:000000000001E038                 db  10h
.eh_frame:000000000001E039                 db    0
.eh_frame:000000000001E03A                 db    0
.eh_frame:000000000001E03B                 db    0
.eh_frame:000000000001E03C                 db 0CCh
.eh_frame:000000000001E03D                 db    9
.eh_frame:000000000001E03E                 db    0
.eh_frame:000000000001E03F                 db    0
.eh_frame:000000000001E040                 db  50h ; P
.eh_frame:000000000001E041                 db 0A7h
.eh_frame:000000000001E042                 db 0FEh
.eh_frame:000000000001E043                 db 0FFh
.eh_frame:000000000001E044                 db  11h
.eh_frame:000000000001E045                 db    0
.eh_frame:000000000001E046                 db    0
.eh_frame:000000000001E047                 db    0
.eh_frame:000000000001E048                 db    0
.eh_frame:000000000001E049                 db    0
.eh_frame:000000000001E04A                 db    0
.eh_frame:000000000001E04B                 db    0
.eh_frame:000000000001E04C                 db  10h
.eh_frame:000000000001E04D                 db    0
.eh_frame:000000000001E04E                 db    0
.eh_frame:000000000001E04F                 db    0
.eh_frame:000000000001E050                 db 0E0h
.eh_frame:000000000001E051                 db    9
.eh_frame:000000000001E052                 db    0
.eh_frame:000000000001E053                 db    0
.eh_frame:000000000001E054                 db  5Ch ; \
.eh_frame:000000000001E055                 db 0A7h
.eh_frame:000000000001E056                 db 0FEh
.eh_frame:000000000001E057                 db 0FFh
.eh_frame:000000000001E058                 db  0Ah
.eh_frame:000000000001E059                 db    0
.eh_frame:000000000001E05A                 db    0
.eh_frame:000000000001E05B                 db    0
.eh_frame:000000000001E05C                 db    0
.eh_frame:000000000001E05D                 db    0
.eh_frame:000000000001E05E                 db    0
.eh_frame:000000000001E05F                 db    0
.eh_frame:000000000001E060                 db  18h
.eh_frame:000000000001E061                 db    0
.eh_frame:000000000001E062                 db    0
.eh_frame:000000000001E063                 db    0
.eh_frame:000000000001E064                 db 0F4h
.eh_frame:000000000001E065                 db    9
.eh_frame:000000000001E066                 db    0
.eh_frame:000000000001E067                 db    0
.eh_frame:000000000001E068                 db  58h ; X
.eh_frame:000000000001E069                 db 0A7h
.eh_frame:000000000001E06A                 db 0FEh
.eh_frame:000000000001E06B                 db 0FFh
.eh_frame:000000000001E06C                 db  8Eh
.eh_frame:000000000001E06D                 db    0
.eh_frame:000000000001E06E                 db    0
.eh_frame:000000000001E06F                 db    0
.eh_frame:000000000001E070                 db    0
.eh_frame:000000000001E071                 db  44h ; D
.eh_frame:000000000001E072                 db  0Eh
.eh_frame:000000000001E073                 db  50h ; P
.eh_frame:000000000001E074                 db    2
.eh_frame:000000000001E075                 db  7Fh ; 
.eh_frame:000000000001E076                 db  0Ah
.eh_frame:000000000001E077                 db  0Eh
.eh_frame:000000000001E078                 db    8
.eh_frame:000000000001E079                 db  41h ; A
.eh_frame:000000000001E07A                 db  0Bh
.eh_frame:000000000001E07B                 db    0
.eh_frame:000000000001E07C                 db  18h
.eh_frame:000000000001E07D                 db    0
.eh_frame:000000000001E07E                 db    0
.eh_frame:000000000001E07F                 db    0
.eh_frame:000000000001E080                 db  10h
.eh_frame:000000000001E081                 db  0Ah
.eh_frame:000000000001E082                 db    0
.eh_frame:000000000001E083                 db    0
.eh_frame:000000000001E084                 db 0CCh
.eh_frame:000000000001E085                 db 0A7h
.eh_frame:000000000001E086                 db 0FEh
.eh_frame:000000000001E087                 db 0FFh
.eh_frame:000000000001E088                 db  91h
.eh_frame:000000000001E089                 db    0
.eh_frame:000000000001E08A                 db    0
.eh_frame:000000000001E08B                 db    0
.eh_frame:000000000001E08C                 db    0
.eh_frame:000000000001E08D                 db  44h ; D
.eh_frame:000000000001E08E                 db  0Eh
.eh_frame:000000000001E08F                 db  50h ; P
.eh_frame:000000000001E090                 db    2
.eh_frame:000000000001E091                 db  82h
.eh_frame:000000000001E092                 db  0Ah
.eh_frame:000000000001E093                 db  0Eh
.eh_frame:000000000001E094                 db    8
.eh_frame:000000000001E095                 db  41h ; A
.eh_frame:000000000001E096                 db  0Bh
.eh_frame:000000000001E097                 db    0
.eh_frame:000000000001E098                 db  10h
.eh_frame:000000000001E099                 db    0
.eh_frame:000000000001E09A                 db    0
.eh_frame:000000000001E09B                 db    0
.eh_frame:000000000001E09C                 db  2Ch ; ,
.eh_frame:000000000001E09D                 db  0Ah
.eh_frame:000000000001E09E                 db    0
.eh_frame:000000000001E09F                 db    0
.eh_frame:000000000001E0A0                 db  50h ; P
.eh_frame:000000000001E0A1                 db 0A8h
.eh_frame:000000000001E0A2                 db 0FEh
.eh_frame:000000000001E0A3                 db 0FFh
.eh_frame:000000000001E0A4                 db  0Ch
.eh_frame:000000000001E0A5                 db    0
.eh_frame:000000000001E0A6                 db    0
.eh_frame:000000000001E0A7                 db    0
.eh_frame:000000000001E0A8                 db    0
.eh_frame:000000000001E0A9                 db    0
.eh_frame:000000000001E0AA                 db    0
.eh_frame:000000000001E0AB                 db    0
.eh_frame:000000000001E0AC                 db  10h
.eh_frame:000000000001E0AD                 db    0
.eh_frame:000000000001E0AE                 db    0
.eh_frame:000000000001E0AF                 db    0
.eh_frame:000000000001E0B0                 db  40h ; @
.eh_frame:000000000001E0B1                 db  0Ah
.eh_frame:000000000001E0B2                 db    0
.eh_frame:000000000001E0B3                 db    0
.eh_frame:000000000001E0B4                 db  4Ch ; L
.eh_frame:000000000001E0B5                 db 0A8h
.eh_frame:000000000001E0B6                 db 0FEh
.eh_frame:000000000001E0B7                 db 0FFh
.eh_frame:000000000001E0B8                 db  17h
.eh_frame:000000000001E0B9                 db    0
.eh_frame:000000000001E0BA                 db    0
.eh_frame:000000000001E0BB                 db    0
.eh_frame:000000000001E0BC                 db    0
.eh_frame:000000000001E0BD                 db    0
.eh_frame:000000000001E0BE                 db    0
.eh_frame:000000000001E0BF                 db    0
.eh_frame:000000000001E0C0                 db  10h
.eh_frame:000000000001E0C1                 db    0
.eh_frame:000000000001E0C2                 db    0
.eh_frame:000000000001E0C3                 db    0
.eh_frame:000000000001E0C4                 db  54h ; T
.eh_frame:000000000001E0C5                 db  0Ah
.eh_frame:000000000001E0C6                 db    0
.eh_frame:000000000001E0C7                 db    0
.eh_frame:000000000001E0C8                 db  58h ; X
.eh_frame:000000000001E0C9                 db 0A8h
.eh_frame:000000000001E0CA                 db 0FEh
.eh_frame:000000000001E0CB                 db 0FFh
.eh_frame:000000000001E0CC                 db  13h
.eh_frame:000000000001E0CD                 db    0
.eh_frame:000000000001E0CE                 db    0
.eh_frame:000000000001E0CF                 db    0
.eh_frame:000000000001E0D0                 db    0
.eh_frame:000000000001E0D1                 db    0
.eh_frame:000000000001E0D2                 db    0
.eh_frame:000000000001E0D3                 db    0
.eh_frame:000000000001E0D4                 db  10h
.eh_frame:000000000001E0D5                 db    0
.eh_frame:000000000001E0D6                 db    0
.eh_frame:000000000001E0D7                 db    0
.eh_frame:000000000001E0D8                 db  68h ; h
.eh_frame:000000000001E0D9                 db  0Ah
.eh_frame:000000000001E0DA                 db    0
.eh_frame:000000000001E0DB                 db    0
.eh_frame:000000000001E0DC                 db  64h ; d
.eh_frame:000000000001E0DD                 db 0A8h
.eh_frame:000000000001E0DE                 db 0FEh
.eh_frame:000000000001E0DF                 db 0FFh
.eh_frame:000000000001E0E0                 db  0Ch
.eh_frame:000000000001E0E1                 db    0
.eh_frame:000000000001E0E2                 db    0
.eh_frame:000000000001E0E3                 db    0
.eh_frame:000000000001E0E4                 db    0
.eh_frame:000000000001E0E5                 db    0
.eh_frame:000000000001E0E6                 db    0
.eh_frame:000000000001E0E7                 db    0
.eh_frame:000000000001E0E8                 db  10h
.eh_frame:000000000001E0E9                 db    0
.eh_frame:000000000001E0EA                 db    0
.eh_frame:000000000001E0EB                 db    0
.eh_frame:000000000001E0EC                 db  7Ch ; |
.eh_frame:000000000001E0ED                 db  0Ah
.eh_frame:000000000001E0EE                 db    0
.eh_frame:000000000001E0EF                 db    0
.eh_frame:000000000001E0F0                 db  60h ; `
.eh_frame:000000000001E0F1                 db 0A8h
.eh_frame:000000000001E0F2                 db 0FEh
.eh_frame:000000000001E0F3                 db 0FFh
.eh_frame:000000000001E0F4                 db  14h
.eh_frame:000000000001E0F5                 db    0
.eh_frame:000000000001E0F6                 db    0
.eh_frame:000000000001E0F7                 db    0
.eh_frame:000000000001E0F8                 db    0
.eh_frame:000000000001E0F9                 db    0
.eh_frame:000000000001E0FA                 db    0
.eh_frame:000000000001E0FB                 db    0
.eh_frame:000000000001E0FC                 db  10h
.eh_frame:000000000001E0FD                 db    0
.eh_frame:000000000001E0FE                 db    0
.eh_frame:000000000001E0FF                 db    0
.eh_frame:000000000001E100                 db  90h
.eh_frame:000000000001E101                 db  0Ah
.eh_frame:000000000001E102                 db    0
.eh_frame:000000000001E103                 db    0
.eh_frame:000000000001E104                 db  6Ch ; l
.eh_frame:000000000001E105                 db 0A8h
.eh_frame:000000000001E106                 db 0FEh
.eh_frame:000000000001E107                 db 0FFh
.eh_frame:000000000001E108                 db  13h
.eh_frame:000000000001E109                 db    0
.eh_frame:000000000001E10A                 db    0
.eh_frame:000000000001E10B                 db    0
.eh_frame:000000000001E10C                 db    0
.eh_frame:000000000001E10D                 db    0
.eh_frame:000000000001E10E                 db    0
.eh_frame:000000000001E10F                 db    0
.eh_frame:000000000001E110                 db  14h
.eh_frame:000000000001E111                 db    0
.eh_frame:000000000001E112                 db    0
.eh_frame:000000000001E113                 db    0
.eh_frame:000000000001E114                 db 0A4h
.eh_frame:000000000001E115                 db  0Ah
.eh_frame:000000000001E116                 db    0
.eh_frame:000000000001E117                 db    0
.eh_frame:000000000001E118                 db  78h ; x
.eh_frame:000000000001E119                 db 0A8h
.eh_frame:000000000001E11A                 db 0FEh
.eh_frame:000000000001E11B                 db 0FFh
.eh_frame:000000000001E11C                 db  18h
.eh_frame:000000000001E11D                 db    0
.eh_frame:000000000001E11E                 db    0
.eh_frame:000000000001E11F                 db    0
.eh_frame:000000000001E120                 db    0
.eh_frame:000000000001E121                 db    0
.eh_frame:000000000001E122                 db    0
.eh_frame:000000000001E123                 db    0
.eh_frame:000000000001E124                 db    0
.eh_frame:000000000001E125                 db    0
.eh_frame:000000000001E126                 db    0
.eh_frame:000000000001E127                 db    0
.eh_frame:000000000001E128                 db  4Ch ; L
.eh_frame:000000000001E129                 db    0
.eh_frame:000000000001E12A                 db    0
.eh_frame:000000000001E12B                 db    0
.eh_frame:000000000001E12C                 db 0BCh
.eh_frame:000000000001E12D                 db  0Ah
.eh_frame:000000000001E12E                 db    0
.eh_frame:000000000001E12F                 db    0
.eh_frame:000000000001E130                 db  80h
.eh_frame:000000000001E131                 db 0A8h
.eh_frame:000000000001E132                 db 0FEh
.eh_frame:000000000001E133                 db 0FFh
.eh_frame:000000000001E134                 db 0D8h
.eh_frame:000000000001E135                 db    1
.eh_frame:000000000001E136                 db    0
.eh_frame:000000000001E137                 db    0
.eh_frame:000000000001E138                 db    0
.eh_frame:000000000001E139                 db  42h ; B
.eh_frame:000000000001E13A                 db  0Eh
.eh_frame:000000000001E13B                 db  10h
.eh_frame:000000000001E13C                 db  8Fh
.eh_frame:000000000001E13D                 db    2
.eh_frame:000000000001E13E                 db  42h ; B
.eh_frame:000000000001E13F                 db  0Eh
.eh_frame:000000000001E140                 db  18h
.eh_frame:000000000001E141                 db  8Eh
.eh_frame:000000000001E142                 db    3
.eh_frame:000000000001E143                 db  42h ; B
.eh_frame:000000000001E144                 db  0Eh
.eh_frame:000000000001E145                 db  20h
.eh_frame:000000000001E146                 db  8Dh
.eh_frame:000000000001E147                 db    4
.eh_frame:000000000001E148                 db  42h ; B
.eh_frame:000000000001E149                 db  0Eh
.eh_frame:000000000001E14A                 db  28h ; (
.eh_frame:000000000001E14B                 db  8Ch
.eh_frame:000000000001E14C                 db    5
.eh_frame:000000000001E14D                 db  44h ; D
.eh_frame:000000000001E14E                 db  0Eh
.eh_frame:000000000001E14F                 db  30h ; 0
.eh_frame:000000000001E150                 db  86h
.eh_frame:000000000001E151                 db    6
.eh_frame:000000000001E152                 db  41h ; A
.eh_frame:000000000001E153                 db  0Eh
.eh_frame:000000000001E154                 db  38h ; 8
.eh_frame:000000000001E155                 db  83h
.eh_frame:000000000001E156                 db    7
.eh_frame:000000000001E157                 db  47h ; G
.eh_frame:000000000001E158                 db  0Eh
.eh_frame:000000000001E159                 db 0F0h
.eh_frame:000000000001E15A                 db    1
.eh_frame:000000000001E15B                 db    3
.eh_frame:000000000001E15C                 db  1Dh
.eh_frame:000000000001E15D                 db    1
.eh_frame:000000000001E15E                 db  0Ah
.eh_frame:000000000001E15F                 db  0Eh
.eh_frame:000000000001E160                 db  38h ; 8
.eh_frame:000000000001E161                 db  41h ; A
.eh_frame:000000000001E162                 db  0Eh
.eh_frame:000000000001E163                 db  30h ; 0
.eh_frame:000000000001E164                 db  41h ; A
.eh_frame:000000000001E165                 db  0Eh
.eh_frame:000000000001E166                 db  28h ; (
.eh_frame:000000000001E167                 db  42h ; B
.eh_frame:000000000001E168                 db  0Eh
.eh_frame:000000000001E169                 db  20h
.eh_frame:000000000001E16A                 db  42h ; B
.eh_frame:000000000001E16B                 db  0Eh
.eh_frame:000000000001E16C                 db  18h
.eh_frame:000000000001E16D                 db  42h ; B
.eh_frame:000000000001E16E                 db  0Eh
.eh_frame:000000000001E16F                 db  10h
.eh_frame:000000000001E170                 db  42h ; B
.eh_frame:000000000001E171                 db  0Eh
.eh_frame:000000000001E172                 db    8
.eh_frame:000000000001E173                 db  45h ; E
.eh_frame:000000000001E174                 db  0Bh
.eh_frame:000000000001E175                 db    0
.eh_frame:000000000001E176                 db    0
.eh_frame:000000000001E177                 db    0
.eh_frame:000000000001E178                 db  38h ; 8
.eh_frame:000000000001E179                 db    0
.eh_frame:000000000001E17A                 db    0
.eh_frame:000000000001E17B                 db    0
.eh_frame:000000000001E17C                 db  0Ch
.eh_frame:000000000001E17D                 db  0Bh
.eh_frame:000000000001E17E                 db    0
.eh_frame:000000000001E17F                 db    0
.eh_frame:000000000001E180                 db  10h
.eh_frame:000000000001E181                 db 0AAh
.eh_frame:000000000001E182                 db 0FEh
.eh_frame:000000000001E183                 db 0FFh
.eh_frame:000000000001E184                 db  74h ; t
.eh_frame:000000000001E185                 db    0
.eh_frame:000000000001E186                 db    0
.eh_frame:000000000001E187                 db    0
.eh_frame:000000000001E188                 db    0
.eh_frame:000000000001E189                 db  42h ; B
.eh_frame:000000000001E18A                 db  0Eh
.eh_frame:000000000001E18B                 db  10h
.eh_frame:000000000001E18C                 db  8Dh
.eh_frame:000000000001E18D                 db    2
.eh_frame:000000000001E18E                 db  42h ; B
.eh_frame:000000000001E18F                 db  0Eh
.eh_frame:000000000001E190                 db  18h
.eh_frame:000000000001E191                 db  8Ch
.eh_frame:000000000001E192                 db    3
.eh_frame:000000000001E193                 db  41h ; A
.eh_frame:000000000001E194                 db  0Eh
.eh_frame:000000000001E195                 db  20h
.eh_frame:000000000001E196                 db  86h
.eh_frame:000000000001E197                 db    4
.eh_frame:000000000001E198                 db  41h ; A
.eh_frame:000000000001E199                 db  0Eh
.eh_frame:000000000001E19A                 db  28h ; (
.eh_frame:000000000001E19B                 db  83h
.eh_frame:000000000001E19C                 db    5
.eh_frame:000000000001E19D                 db  4Ah ; J
.eh_frame:000000000001E19E                 db  0Eh
.eh_frame:000000000001E19F                 db  30h ; 0
.eh_frame:000000000001E1A0                 db  76h ; v
.eh_frame:000000000001E1A1                 db  0Ah
.eh_frame:000000000001E1A2                 db  0Eh
.eh_frame:000000000001E1A3                 db  28h ; (
.eh_frame:000000000001E1A4                 db  44h ; D
.eh_frame:000000000001E1A5                 db  0Eh
.eh_frame:000000000001E1A6                 db  20h
.eh_frame:000000000001E1A7                 db  41h ; A
.eh_frame:000000000001E1A8                 db  0Eh
.eh_frame:000000000001E1A9                 db  18h
.eh_frame:000000000001E1AA                 db  42h ; B
.eh_frame:000000000001E1AB                 db  0Eh
.eh_frame:000000000001E1AC                 db  10h
.eh_frame:000000000001E1AD                 db  42h ; B
.eh_frame:000000000001E1AE                 db  0Eh
.eh_frame:000000000001E1AF                 db    8
.eh_frame:000000000001E1B0                 db  41h ; A
.eh_frame:000000000001E1B1                 db  0Bh
.eh_frame:000000000001E1B2                 db    0
.eh_frame:000000000001E1B3                 db    0
.eh_frame:000000000001E1B4                 db  10h
.eh_frame:000000000001E1B5                 db    0
.eh_frame:000000000001E1B6                 db    0
.eh_frame:000000000001E1B7                 db    0
.eh_frame:000000000001E1B8                 db  48h ; H
.eh_frame:000000000001E1B9                 db  0Bh
.eh_frame:000000000001E1BA                 db    0
.eh_frame:000000000001E1BB                 db    0
.eh_frame:000000000001E1BC                 db  54h ; T
.eh_frame:000000000001E1BD                 db 0AAh
.eh_frame:000000000001E1BE                 db 0FEh
.eh_frame:000000000001E1BF                 db 0FFh
.eh_frame:000000000001E1C0                 db  0Ch
.eh_frame:000000000001E1C1                 db    0
.eh_frame:000000000001E1C2                 db    0
.eh_frame:000000000001E1C3                 db    0
.eh_frame:000000000001E1C4                 db    0
.eh_frame:000000000001E1C5                 db    0
.eh_frame:000000000001E1C6                 db    0
.eh_frame:000000000001E1C7                 db    0
.eh_frame:000000000001E1C8                 db  14h
.eh_frame:000000000001E1C9                 db    0
.eh_frame:000000000001E1CA                 db    0
.eh_frame:000000000001E1CB                 db    0
.eh_frame:000000000001E1CC                 db  5Ch ; \
.eh_frame:000000000001E1CD                 db  0Bh
.eh_frame:000000000001E1CE                 db    0
.eh_frame:000000000001E1CF                 db    0
.eh_frame:000000000001E1D0                 db  50h ; P
.eh_frame:000000000001E1D1                 db 0AAh
.eh_frame:000000000001E1D2                 db 0FEh
.eh_frame:000000000001E1D3                 db 0FFh
.eh_frame:000000000001E1D4                 db  0Ch
.eh_frame:000000000001E1D5                 db    0
.eh_frame:000000000001E1D6                 db    0
.eh_frame:000000000001E1D7                 db    0
.eh_frame:000000000001E1D8                 db    0
.eh_frame:000000000001E1D9                 db    0
.eh_frame:000000000001E1DA                 db    0
.eh_frame:000000000001E1DB                 db    0
.eh_frame:000000000001E1DC                 db    0
.eh_frame:000000000001E1DD                 db    0
.eh_frame:000000000001E1DE                 db    0
.eh_frame:000000000001E1DF                 db    0
.eh_frame:000000000001E1E0                 db  24h ; $
.eh_frame:000000000001E1E1                 db    0
.eh_frame:000000000001E1E2                 db    0
.eh_frame:000000000001E1E3                 db    0
.eh_frame:000000000001E1E4                 db  74h ; t
.eh_frame:000000000001E1E5                 db  0Bh
.eh_frame:000000000001E1E6                 db    0
.eh_frame:000000000001E1E7                 db    0
.eh_frame:000000000001E1E8                 db  48h ; H
.eh_frame:000000000001E1E9                 db 0AAh
.eh_frame:000000000001E1EA                 db 0FEh
.eh_frame:000000000001E1EB                 db 0FFh
.eh_frame:000000000001E1EC                 db  31h ; 1
.eh_frame:000000000001E1ED                 db    0
.eh_frame:000000000001E1EE                 db    0
.eh_frame:000000000001E1EF                 db    0
.eh_frame:000000000001E1F0                 db    0
.eh_frame:000000000001E1F1                 db  41h ; A
.eh_frame:000000000001E1F2                 db  0Eh
.eh_frame:000000000001E1F3                 db  10h
.eh_frame:000000000001E1F4                 db  86h
.eh_frame:000000000001E1F5                 db    2
.eh_frame:000000000001E1F6                 db  41h ; A
.eh_frame:000000000001E1F7                 db  0Eh
.eh_frame:000000000001E1F8                 db  18h
.eh_frame:000000000001E1F9                 db  83h
.eh_frame:000000000001E1FA                 db    3
.eh_frame:000000000001E1FB                 db  4Fh ; O
.eh_frame:000000000001E1FC                 db  0Eh
.eh_frame:000000000001E1FD                 db  20h
.eh_frame:000000000001E1FE                 db  5Dh ; ]
.eh_frame:000000000001E1FF                 db  0Eh
.eh_frame:000000000001E200                 db  18h
.eh_frame:000000000001E201                 db  41h ; A
.eh_frame:000000000001E202                 db  0Eh
.eh_frame:000000000001E203                 db  10h
.eh_frame:000000000001E204                 db  41h ; A
.eh_frame:000000000001E205                 db  0Eh
.eh_frame:000000000001E206                 db    8
.eh_frame:000000000001E207                 db    0
.eh_frame:000000000001E208                 db  10h
.eh_frame:000000000001E209                 db    0
.eh_frame:000000000001E20A                 db    0
.eh_frame:000000000001E20B                 db    0
.eh_frame:000000000001E20C                 db  9Ch
.eh_frame:000000000001E20D                 db  0Bh
.eh_frame:000000000001E20E                 db    0
.eh_frame:000000000001E20F                 db    0
.eh_frame:000000000001E210                 db  33h ; 3
.eh_frame:000000000001E211                 db  3Fh ; ?
.eh_frame:000000000001E212                 db 0FEh
.eh_frame:000000000001E213                 db 0FFh
.eh_frame:000000000001E214                 db  23h ; #
.eh_frame:000000000001E215                 db    0
.eh_frame:000000000001E216                 db    0
.eh_frame:000000000001E217                 db    0
.eh_frame:000000000001E218                 db    0
.eh_frame:000000000001E219                 db  59h ; Y
.eh_frame:000000000001E21A                 db  0Eh
.eh_frame:000000000001E21B                 db  10h
.eh_frame:000000000001E21C                 db  50h ; P
.eh_frame:000000000001E21D                 db    0
.eh_frame:000000000001E21E                 db    0
.eh_frame:000000000001E21F                 db    0
.eh_frame:000000000001E220                 db 0B0h
.eh_frame:000000000001E221                 db  0Bh
.eh_frame:000000000001E222                 db    0
.eh_frame:000000000001E223                 db    0
.eh_frame:000000000001E224                 db  4Ch ; L
.eh_frame:000000000001E225                 db 0AAh
.eh_frame:000000000001E226                 db 0FEh
.eh_frame:000000000001E227                 db 0FFh
.eh_frame:000000000001E228                 db  2Fh ; /
.eh_frame:000000000001E229                 db    6
.eh_frame:000000000001E22A                 db    0
.eh_frame:000000000001E22B                 db    0
.eh_frame:000000000001E22C                 db    0
.eh_frame:000000000001E22D                 db  42h ; B
.eh_frame:000000000001E22E                 db  0Eh
.eh_frame:000000000001E22F                 db  10h
.eh_frame:000000000001E230                 db  8Fh
.eh_frame:000000000001E231                 db    2
.eh_frame:000000000001E232                 db  42h ; B
.eh_frame:000000000001E233                 db  0Eh
.eh_frame:000000000001E234                 db  18h
.eh_frame:000000000001E235                 db  8Eh
.eh_frame:000000000001E236                 db    3
.eh_frame:000000000001E237                 db  42h ; B
.eh_frame:000000000001E238                 db  0Eh
.eh_frame:000000000001E239                 db  20h
.eh_frame:000000000001E23A                 db  8Dh
.eh_frame:000000000001E23B                 db    4
.eh_frame:000000000001E23C                 db  42h ; B
.eh_frame:000000000001E23D                 db  0Eh
.eh_frame:000000000001E23E                 db  28h ; (
.eh_frame:000000000001E23F                 db  8Ch
.eh_frame:000000000001E240                 db    5
.eh_frame:000000000001E241                 db  44h ; D
.eh_frame:000000000001E242                 db  0Eh
.eh_frame:000000000001E243                 db  30h ; 0
.eh_frame:000000000001E244                 db  86h
.eh_frame:000000000001E245                 db    6
.eh_frame:000000000001E246                 db  41h ; A
.eh_frame:000000000001E247                 db  0Eh
.eh_frame:000000000001E248                 db  38h ; 8
.eh_frame:000000000001E249                 db  83h
.eh_frame:000000000001E24A                 db    7
.eh_frame:000000000001E24B                 db  44h ; D
.eh_frame:000000000001E24C                 db  0Eh
.eh_frame:000000000001E24D                 db 0B0h
.eh_frame:000000000001E24E                 db    1
.eh_frame:000000000001E24F                 db    3
.eh_frame:000000000001E250                 db  1Ah
.eh_frame:000000000001E251                 db    3
.eh_frame:000000000001E252                 db  0Ah
.eh_frame:000000000001E253                 db  0Eh
.eh_frame:000000000001E254                 db  38h ; 8
.eh_frame:000000000001E255                 db  41h ; A
.eh_frame:000000000001E256                 db  0Eh
.eh_frame:000000000001E257                 db  30h ; 0
.eh_frame:000000000001E258                 db  41h ; A
.eh_frame:000000000001E259                 db  0Eh
.eh_frame:000000000001E25A                 db  28h ; (
.eh_frame:000000000001E25B                 db  42h ; B
.eh_frame:000000000001E25C                 db  0Eh
.eh_frame:000000000001E25D                 db  20h
.eh_frame:000000000001E25E                 db  42h ; B
.eh_frame:000000000001E25F                 db  0Eh
.eh_frame:000000000001E260                 db  18h
.eh_frame:000000000001E261                 db  42h ; B
.eh_frame:000000000001E262                 db  0Eh
.eh_frame:000000000001E263                 db  10h
.eh_frame:000000000001E264                 db  42h ; B
.eh_frame:000000000001E265                 db  0Eh
.eh_frame:000000000001E266                 db    8
.eh_frame:000000000001E267                 db  4Bh ; K
.eh_frame:000000000001E268                 db  0Bh
.eh_frame:000000000001E269                 db    0
.eh_frame:000000000001E26A                 db    0
.eh_frame:000000000001E26B                 db    0
.eh_frame:000000000001E26C                 db    0
.eh_frame:000000000001E26D                 db    0
.eh_frame:000000000001E26E                 db    0
.eh_frame:000000000001E26F                 db    0
.eh_frame:000000000001E270                 db  10h
.eh_frame:000000000001E271                 db    1
.eh_frame:000000000001E272                 db    0
.eh_frame:000000000001E273                 db    0
.eh_frame:000000000001E274                 db    4
.eh_frame:000000000001E275                 db  0Ch
.eh_frame:000000000001E276                 db    0
.eh_frame:000000000001E277                 db    0
.eh_frame:000000000001E278                 db  28h ; (
.eh_frame:000000000001E279                 db 0B0h
.eh_frame:000000000001E27A                 db 0FEh
.eh_frame:000000000001E27B                 db 0FFh
.eh_frame:000000000001E27C                 db  17h
.eh_frame:000000000001E27D                 db    4
.eh_frame:000000000001E27E                 db    0
.eh_frame:000000000001E27F                 db    0
.eh_frame:000000000001E280                 db    0
.eh_frame:000000000001E281                 db  42h ; B
.eh_frame:000000000001E282                 db  0Eh
.eh_frame:000000000001E283                 db  10h
.eh_frame:000000000001E284                 db  8Fh
.eh_frame:000000000001E285                 db    2
.eh_frame:000000000001E286                 db  42h ; B
.eh_frame:000000000001E287                 db  0Eh
.eh_frame:000000000001E288                 db  18h
.eh_frame:000000000001E289                 db  8Eh
.eh_frame:000000000001E28A                 db    3
.eh_frame:000000000001E28B                 db  42h ; B
.eh_frame:000000000001E28C                 db  0Eh
.eh_frame:000000000001E28D                 db  20h
.eh_frame:000000000001E28E                 db  8Dh
.eh_frame:000000000001E28F                 db    4
.eh_frame:000000000001E290                 db  42h ; B
.eh_frame:000000000001E291                 db  0Eh
.eh_frame:000000000001E292                 db  28h ; (
.eh_frame:000000000001E293                 db  8Ch
.eh_frame:000000000001E294                 db    5
.eh_frame:000000000001E295                 db  44h ; D
.eh_frame:000000000001E296                 db  0Eh
.eh_frame:000000000001E297                 db  30h ; 0
.eh_frame:000000000001E298                 db  86h
.eh_frame:000000000001E299                 db    6
.eh_frame:000000000001E29A                 db  41h ; A
.eh_frame:000000000001E29B                 db  0Eh
.eh_frame:000000000001E29C                 db  38h ; 8
.eh_frame:000000000001E29D                 db  83h
.eh_frame:000000000001E29E                 db    7
.eh_frame:000000000001E29F                 db  4Ah ; J
.eh_frame:000000000001E2A0                 db  0Eh
.eh_frame:000000000001E2A1                 db  60h ; `
.eh_frame:000000000001E2A2                 db    2
.eh_frame:000000000001E2A3                 db 0DDh
.eh_frame:000000000001E2A4                 db  0Eh
.eh_frame:000000000001E2A5                 db  68h ; h
.eh_frame:000000000001E2A6                 db  57h ; W
.eh_frame:000000000001E2A7                 db  0Eh
.eh_frame:000000000001E2A8                 db  70h ; p
.eh_frame:000000000001E2A9                 db  42h ; B
.eh_frame:000000000001E2AA                 db  0Eh
.eh_frame:000000000001E2AB                 db  78h ; x
.eh_frame:000000000001E2AC                 db  42h ; B
.eh_frame:000000000001E2AD                 db  0Eh
.eh_frame:000000000001E2AE                 db  80h
.eh_frame:000000000001E2AF                 db    1
.eh_frame:000000000001E2B0                 db  42h ; B
.eh_frame:000000000001E2B1                 db  0Eh
.eh_frame:000000000001E2B2                 db  88h
.eh_frame:000000000001E2B3                 db    1
.eh_frame:000000000001E2B4                 db  42h ; B
.eh_frame:000000000001E2B5                 db  0Eh
.eh_frame:000000000001E2B6                 db  90h
.eh_frame:000000000001E2B7                 db    1
.eh_frame:000000000001E2B8                 db  53h ; S
.eh_frame:000000000001E2B9                 db  0Eh
.eh_frame:000000000001E2BA                 db  60h ; `
.eh_frame:000000000001E2BB                 db  44h ; D
.eh_frame:000000000001E2BC                 db  0Ah
.eh_frame:000000000001E2BD                 db  0Eh
.eh_frame:000000000001E2BE                 db  38h ; 8
.eh_frame:000000000001E2BF                 db  41h ; A
.eh_frame:000000000001E2C0                 db  0Eh
.eh_frame:000000000001E2C1                 db  30h ; 0
.eh_frame:000000000001E2C2                 db  41h ; A
.eh_frame:000000000001E2C3                 db  0Eh
.eh_frame:000000000001E2C4                 db  28h ; (
.eh_frame:000000000001E2C5                 db  42h ; B
.eh_frame:000000000001E2C6                 db  0Eh
.eh_frame:000000000001E2C7                 db  20h
.eh_frame:000000000001E2C8                 db  42h ; B
.eh_frame:000000000001E2C9                 db  0Eh
.eh_frame:000000000001E2CA                 db  18h
.eh_frame:000000000001E2CB                 db  42h ; B
.eh_frame:000000000001E2CC                 db  0Eh
.eh_frame:000000000001E2CD                 db  10h
.eh_frame:000000000001E2CE                 db  42h ; B
.eh_frame:000000000001E2CF                 db  0Eh
.eh_frame:000000000001E2D0                 db    8
.eh_frame:000000000001E2D1                 db  44h ; D
.eh_frame:000000000001E2D2                 db  0Bh
.eh_frame:000000000001E2D3                 db    2
.eh_frame:000000000001E2D4                 db  78h ; x
.eh_frame:000000000001E2D5                 db  0Ah
.eh_frame:000000000001E2D6                 db  0Eh
.eh_frame:000000000001E2D7                 db  68h ; h
.eh_frame:000000000001E2D8                 db  48h ; H
.eh_frame:000000000001E2D9                 db  0Bh
.eh_frame:000000000001E2DA                 db  5Ah ; Z
.eh_frame:000000000001E2DB                 db  0Ah
.eh_frame:000000000001E2DC                 db  0Eh
.eh_frame:000000000001E2DD                 db  38h ; 8
.eh_frame:000000000001E2DE                 db  47h ; G
.eh_frame:000000000001E2DF                 db  0Eh
.eh_frame:000000000001E2E0                 db  30h ; 0
.eh_frame:000000000001E2E1                 db  41h ; A
.eh_frame:000000000001E2E2                 db  0Eh
.eh_frame:000000000001E2E3                 db  28h ; (
.eh_frame:000000000001E2E4                 db  42h ; B
.eh_frame:000000000001E2E5                 db  0Eh
.eh_frame:000000000001E2E6                 db  20h
.eh_frame:000000000001E2E7                 db  42h ; B
.eh_frame:000000000001E2E8                 db  0Eh
.eh_frame:000000000001E2E9                 db  18h
.eh_frame:000000000001E2EA                 db  42h ; B
.eh_frame:000000000001E2EB                 db  0Eh
.eh_frame:000000000001E2EC                 db  10h
.eh_frame:000000000001E2ED                 db  42h ; B
.eh_frame:000000000001E2EE                 db  0Eh
.eh_frame:000000000001E2EF                 db    8
.eh_frame:000000000001E2F0                 db  56h ; V
.eh_frame:000000000001E2F1                 db  0Bh
.eh_frame:000000000001E2F2                 db  5Eh ; ^
.eh_frame:000000000001E2F3                 db  0Ah
.eh_frame:000000000001E2F4                 db  0Eh
.eh_frame:000000000001E2F5                 db  38h ; 8
.eh_frame:000000000001E2F6                 db  52h ; R
.eh_frame:000000000001E2F7                 db  0Eh
.eh_frame:000000000001E2F8                 db  30h ; 0
.eh_frame:000000000001E2F9                 db  41h ; A
.eh_frame:000000000001E2FA                 db  0Eh
.eh_frame:000000000001E2FB                 db  28h ; (
.eh_frame:000000000001E2FC                 db  42h ; B
.eh_frame:000000000001E2FD                 db  0Eh
.eh_frame:000000000001E2FE                 db  20h
.eh_frame:000000000001E2FF                 db  42h ; B
.eh_frame:000000000001E300                 db  0Eh
.eh_frame:000000000001E301                 db  18h
.eh_frame:000000000001E302                 db  42h ; B
.eh_frame:000000000001E303                 db  0Eh
.eh_frame:000000000001E304                 db  10h
.eh_frame:000000000001E305                 db  42h ; B
.eh_frame:000000000001E306                 db  0Eh
.eh_frame:000000000001E307                 db    8
.eh_frame:000000000001E308                 db  4Fh ; O
.eh_frame:000000000001E309                 db  0Bh
.eh_frame:000000000001E30A                 db  62h ; b
.eh_frame:000000000001E30B                 db  0Ah
.eh_frame:000000000001E30C                 db  0Eh
.eh_frame:000000000001E30D                 db  38h ; 8
.eh_frame:000000000001E30E                 db  50h ; P
.eh_frame:000000000001E30F                 db  0Eh
.eh_frame:000000000001E310                 db  30h ; 0
.eh_frame:000000000001E311                 db  41h ; A
.eh_frame:000000000001E312                 db  0Eh
.eh_frame:000000000001E313                 db  28h ; (
.eh_frame:000000000001E314                 db  42h ; B
.eh_frame:000000000001E315                 db  0Eh
.eh_frame:000000000001E316                 db  20h
.eh_frame:000000000001E317                 db  42h ; B
.eh_frame:000000000001E318                 db  0Eh
.eh_frame:000000000001E319                 db  18h
.eh_frame:000000000001E31A                 db  42h ; B
.eh_frame:000000000001E31B                 db  0Eh
.eh_frame:000000000001E31C                 db  10h
.eh_frame:000000000001E31D                 db  42h ; B
.eh_frame:000000000001E31E                 db  0Eh
.eh_frame:000000000001E31F                 db    8
.eh_frame:000000000001E320                 db  55h ; U
.eh_frame:000000000001E321                 db  0Bh
.eh_frame:000000000001E322                 db  66h ; f
.eh_frame:000000000001E323                 db  0Eh
.eh_frame:000000000001E324                 db  68h ; h
.eh_frame:000000000001E325                 db  42h ; B
.eh_frame:000000000001E326                 db  0Eh
.eh_frame:000000000001E327                 db  70h ; p
.eh_frame:000000000001E328                 db  5Ch ; \
.eh_frame:000000000001E329                 db  0Eh
.eh_frame:000000000001E32A                 db  68h ; h
.eh_frame:000000000001E32B                 db  41h ; A
.eh_frame:000000000001E32C                 db  0Eh
.eh_frame:000000000001E32D                 db  60h ; `
.eh_frame:000000000001E32E                 db  44h ; D
.eh_frame:000000000001E32F                 db  0Ah
.eh_frame:000000000001E330                 db  0Eh
.eh_frame:000000000001E331                 db  38h ; 8
.eh_frame:000000000001E332                 db  41h ; A
.eh_frame:000000000001E333                 db  0Eh
.eh_frame:000000000001E334                 db  30h ; 0
.eh_frame:000000000001E335                 db  41h ; A
.eh_frame:000000000001E336                 db  0Eh
.eh_frame:000000000001E337                 db  28h ; (
.eh_frame:000000000001E338                 db  42h ; B
.eh_frame:000000000001E339                 db  0Eh
.eh_frame:000000000001E33A                 db  20h
.eh_frame:000000000001E33B                 db  42h ; B
.eh_frame:000000000001E33C                 db  0Eh
.eh_frame:000000000001E33D                 db  18h
.eh_frame:000000000001E33E                 db  42h ; B
.eh_frame:000000000001E33F                 db  0Eh
.eh_frame:000000000001E340                 db  10h
.eh_frame:000000000001E341                 db  42h ; B
.eh_frame:000000000001E342                 db  0Eh
.eh_frame:000000000001E343                 db    8
.eh_frame:000000000001E344                 db  45h ; E
.eh_frame:000000000001E345                 db  0Bh
.eh_frame:000000000001E346                 db  68h ; h
.eh_frame:000000000001E347                 db  0Ah
.eh_frame:000000000001E348                 db  0Eh
.eh_frame:000000000001E349                 db  68h ; h
.eh_frame:000000000001E34A                 db  48h ; H
.eh_frame:000000000001E34B                 db  0Bh
.eh_frame:000000000001E34C                 db  72h ; r
.eh_frame:000000000001E34D                 db  0Eh
.eh_frame:000000000001E34E                 db  68h ; h
.eh_frame:000000000001E34F                 db  45h ; E
.eh_frame:000000000001E350                 db  0Eh
.eh_frame:000000000001E351                 db  70h ; p
.eh_frame:000000000001E352                 db  42h ; B
.eh_frame:000000000001E353                 db  0Eh
.eh_frame:000000000001E354                 db  78h ; x
.eh_frame:000000000001E355                 db  42h ; B
.eh_frame:000000000001E356                 db  0Eh
.eh_frame:000000000001E357                 db  80h
.eh_frame:000000000001E358                 db    1
.eh_frame:000000000001E359                 db  5Eh ; ^
.eh_frame:000000000001E35A                 db  0Eh
.eh_frame:000000000001E35B                 db  60h ; `
.eh_frame:000000000001E35C                 db  44h ; D
.eh_frame:000000000001E35D                 db  0Ah
.eh_frame:000000000001E35E                 db  0Eh
.eh_frame:000000000001E35F                 db  38h ; 8
.eh_frame:000000000001E360                 db  41h ; A
.eh_frame:000000000001E361                 db  0Eh
.eh_frame:000000000001E362                 db  30h ; 0
.eh_frame:000000000001E363                 db  41h ; A
.eh_frame:000000000001E364                 db  0Eh
.eh_frame:000000000001E365                 db  28h ; (
.eh_frame:000000000001E366                 db  42h ; B
.eh_frame:000000000001E367                 db  0Eh
.eh_frame:000000000001E368                 db  20h
.eh_frame:000000000001E369                 db  42h ; B
.eh_frame:000000000001E36A                 db  0Eh
.eh_frame:000000000001E36B                 db  18h
.eh_frame:000000000001E36C                 db  42h ; B
.eh_frame:000000000001E36D                 db  0Eh
.eh_frame:000000000001E36E                 db  10h
.eh_frame:000000000001E36F                 db  42h ; B
.eh_frame:000000000001E370                 db  0Eh
.eh_frame:000000000001E371                 db    8
.eh_frame:000000000001E372                 db  41h ; A
.eh_frame:000000000001E373                 db  0Bh
.eh_frame:000000000001E374                 db  79h ; y
.eh_frame:000000000001E375                 db  0Ah
.eh_frame:000000000001E376                 db  0Eh
.eh_frame:000000000001E377                 db  68h ; h
.eh_frame:000000000001E378                 db  42h ; B
.eh_frame:000000000001E379                 db  0Eh
.eh_frame:000000000001E37A                 db  70h ; p
.eh_frame:000000000001E37B                 db  42h ; B
.eh_frame:000000000001E37C                 db  0Eh
.eh_frame:000000000001E37D                 db  78h ; x
.eh_frame:000000000001E37E                 db  42h ; B
.eh_frame:000000000001E37F                 db  0Eh
.eh_frame:000000000001E380                 db  80h
.eh_frame:000000000001E381                 db    1
.eh_frame:000000000001E382                 db  51h ; Q
.eh_frame:000000000001E383                 db  0Bh
.eh_frame:000000000001E384                 db  10h
.eh_frame:000000000001E385                 db    0
.eh_frame:000000000001E386                 db    0
.eh_frame:000000000001E387                 db    0
.eh_frame:000000000001E388                 db  18h
.eh_frame:000000000001E389                 db  0Dh
.eh_frame:000000000001E38A                 db    0
.eh_frame:000000000001E38B                 db    0
.eh_frame:000000000001E38C                 db  34h ; 4
.eh_frame:000000000001E38D                 db 0B3h
.eh_frame:000000000001E38E                 db 0FEh
.eh_frame:000000000001E38F                 db 0FFh
.eh_frame:000000000001E390                 db  20h
.eh_frame:000000000001E391                 db    0
.eh_frame:000000000001E392                 db    0
.eh_frame:000000000001E393                 db    0
.eh_frame:000000000001E394                 db    0
.eh_frame:000000000001E395                 db    0
.eh_frame:000000000001E396                 db    0
.eh_frame:000000000001E397                 db    0
.eh_frame:000000000001E398                 db  18h
.eh_frame:000000000001E399                 db    0
.eh_frame:000000000001E39A                 db    0
.eh_frame:000000000001E39B                 db    0
.eh_frame:000000000001E39C                 db  2Ch ; ,
.eh_frame:000000000001E39D                 db  0Dh
.eh_frame:000000000001E39E                 db    0
.eh_frame:000000000001E39F                 db    0
.eh_frame:000000000001E3A0                 db  40h ; @
.eh_frame:000000000001E3A1                 db 0B3h
.eh_frame:000000000001E3A2                 db 0FEh
.eh_frame:000000000001E3A3                 db 0FFh
.eh_frame:000000000001E3A4                 db  78h ; x
.eh_frame:000000000001E3A5                 db    0
.eh_frame:000000000001E3A6                 db    0
.eh_frame:000000000001E3A7                 db    0
.eh_frame:000000000001E3A8                 db    0
.eh_frame:000000000001E3A9                 db  44h ; D
.eh_frame:000000000001E3AA                 db  0Eh
.eh_frame:000000000001E3AB                 db  70h ; p
.eh_frame:000000000001E3AC                 db    2
.eh_frame:000000000001E3AD                 db  60h ; `
.eh_frame:000000000001E3AE                 db  0Ah
.eh_frame:000000000001E3AF                 db  0Eh
.eh_frame:000000000001E3B0                 db    8
.eh_frame:000000000001E3B1                 db  41h ; A
.eh_frame:000000000001E3B2                 db  0Bh
.eh_frame:000000000001E3B3                 db    0
.eh_frame:000000000001E3B4                 db  28h ; (
.eh_frame:000000000001E3B5                 db    0
.eh_frame:000000000001E3B6                 db    0
.eh_frame:000000000001E3B7                 db    0
.eh_frame:000000000001E3B8                 db  48h ; H
.eh_frame:000000000001E3B9                 db  0Dh
.eh_frame:000000000001E3BA                 db    0
.eh_frame:000000000001E3BB                 db    0
.eh_frame:000000000001E3BC                 db 0A4h
.eh_frame:000000000001E3BD                 db 0B3h
.eh_frame:000000000001E3BE                 db 0FEh
.eh_frame:000000000001E3BF                 db 0FFh
.eh_frame:000000000001E3C0                 db 0D5h
.eh_frame:000000000001E3C1                 db    0
.eh_frame:000000000001E3C2                 db    0
.eh_frame:000000000001E3C3                 db    0
.eh_frame:000000000001E3C4                 db    0
.eh_frame:000000000001E3C5                 db  41h ; A
.eh_frame:000000000001E3C6                 db  0Eh
.eh_frame:000000000001E3C7                 db  10h
.eh_frame:000000000001E3C8                 db  86h
.eh_frame:000000000001E3C9                 db    2
.eh_frame:000000000001E3CA                 db  41h ; A
.eh_frame:000000000001E3CB                 db  0Eh
.eh_frame:000000000001E3CC                 db  18h
.eh_frame:000000000001E3CD                 db  83h
.eh_frame:000000000001E3CE                 db    3
.eh_frame:000000000001E3CF                 db  50h ; P
.eh_frame:000000000001E3D0                 db  0Eh
.eh_frame:000000000001E3D1                 db 0D0h
.eh_frame:000000000001E3D2                 db    1
.eh_frame:000000000001E3D3                 db    2
.eh_frame:000000000001E3D4                 db 0ABh
.eh_frame:000000000001E3D5                 db  0Ah
.eh_frame:000000000001E3D6                 db  0Eh
.eh_frame:000000000001E3D7                 db  18h
.eh_frame:000000000001E3D8                 db  41h ; A
.eh_frame:000000000001E3D9                 db  0Eh
.eh_frame:000000000001E3DA                 db  10h
.eh_frame:000000000001E3DB                 db  41h ; A
.eh_frame:000000000001E3DC                 db  0Eh
.eh_frame:000000000001E3DD                 db    8
.eh_frame:000000000001E3DE                 db  41h ; A
.eh_frame:000000000001E3DF                 db  0Bh
.eh_frame:000000000001E3E0                 db  1Ch
.eh_frame:000000000001E3E1                 db    0
.eh_frame:000000000001E3E2                 db    0
.eh_frame:000000000001E3E3                 db    0
.eh_frame:000000000001E3E4                 db  74h ; t
.eh_frame:000000000001E3E5                 db  0Dh
.eh_frame:000000000001E3E6                 db    0
.eh_frame:000000000001E3E7                 db    0
.eh_frame:000000000001E3E8                 db  58h ; X
.eh_frame:000000000001E3E9                 db 0B4h
.eh_frame:000000000001E3EA                 db 0FEh
.eh_frame:000000000001E3EB                 db 0FFh
.eh_frame:000000000001E3EC                 db  80h
.eh_frame:000000000001E3ED                 db    0
.eh_frame:000000000001E3EE                 db    0
.eh_frame:000000000001E3EF                 db    0
.eh_frame:000000000001E3F0                 db    0
.eh_frame:000000000001E3F1                 db  41h ; A
.eh_frame:000000000001E3F2                 db  0Eh
.eh_frame:000000000001E3F3                 db  10h
.eh_frame:000000000001E3F4                 db  83h
.eh_frame:000000000001E3F5                 db    2
.eh_frame:000000000001E3F6                 db    2
.eh_frame:000000000001E3F7                 db  7Ah ; z
.eh_frame:000000000001E3F8                 db  0Eh
.eh_frame:000000000001E3F9                 db    8
.eh_frame:000000000001E3FA                 db    0
.eh_frame:000000000001E3FB                 db    0
.eh_frame:000000000001E3FC                 db    0
.eh_frame:000000000001E3FD                 db    0
.eh_frame:000000000001E3FE                 db    0
.eh_frame:000000000001E3FF                 db    0
.eh_frame:000000000001E400                 db  18h
.eh_frame:000000000001E401                 db    0
.eh_frame:000000000001E402                 db    0
.eh_frame:000000000001E403                 db    0
.eh_frame:000000000001E404                 db  94h
.eh_frame:000000000001E405                 db  0Dh
.eh_frame:000000000001E406                 db    0
.eh_frame:000000000001E407                 db    0
.eh_frame:000000000001E408                 db 0B8h
.eh_frame:000000000001E409                 db 0B4h
.eh_frame:000000000001E40A                 db 0FEh
.eh_frame:000000000001E40B                 db 0FFh
.eh_frame:000000000001E40C                 db  1Ah
.eh_frame:000000000001E40D                 db    0
.eh_frame:000000000001E40E                 db    0
.eh_frame:000000000001E40F                 db    0
.eh_frame:000000000001E410                 db    0
.eh_frame:000000000001E411                 db  41h ; A
.eh_frame:000000000001E412                 db  0Eh
.eh_frame:000000000001E413                 db  10h
.eh_frame:000000000001E414                 db  83h
.eh_frame:000000000001E415                 db    2
.eh_frame:000000000001E416                 db  53h ; S
.eh_frame:000000000001E417                 db  0Ah
.eh_frame:000000000001E418                 db  0Eh
.eh_frame:000000000001E419                 db    8
.eh_frame:000000000001E41A                 db  41h ; A
.eh_frame:000000000001E41B                 db  0Bh
.eh_frame:000000000001E41C                 db  10h
.eh_frame:000000000001E41D                 db    0
.eh_frame:000000000001E41E                 db    0
.eh_frame:000000000001E41F                 db    0
.eh_frame:000000000001E420                 db 0B0h
.eh_frame:000000000001E421                 db  0Dh
.eh_frame:000000000001E422                 db    0
.eh_frame:000000000001E423                 db    0
.eh_frame:000000000001E424                 db 0BCh
.eh_frame:000000000001E425                 db 0B4h
.eh_frame:000000000001E426                 db 0FEh
.eh_frame:000000000001E427                 db 0FFh
.eh_frame:000000000001E428                 db  24h ; $
.eh_frame:000000000001E429                 db    0
.eh_frame:000000000001E42A                 db    0
.eh_frame:000000000001E42B                 db    0
.eh_frame:000000000001E42C                 db    0
.eh_frame:000000000001E42D                 db  5Fh ; _
.eh_frame:000000000001E42E                 db  0Eh
.eh_frame:000000000001E42F                 db  10h
.eh_frame:000000000001E430                 db  10h
.eh_frame:000000000001E431                 db    0
.eh_frame:000000000001E432                 db    0
.eh_frame:000000000001E433                 db    0
.eh_frame:000000000001E434                 db 0C4h
.eh_frame:000000000001E435                 db  0Dh
.eh_frame:000000000001E436                 db    0
.eh_frame:000000000001E437                 db    0
.eh_frame:000000000001E438                 db 0D8h
.eh_frame:000000000001E439                 db 0B4h
.eh_frame:000000000001E43A                 db 0FEh
.eh_frame:000000000001E43B                 db 0FFh
.eh_frame:000000000001E43C                 db    2
.eh_frame:000000000001E43D                 db    0
.eh_frame:000000000001E43E                 db    0
.eh_frame:000000000001E43F                 db    0
.eh_frame:000000000001E440                 db    0
.eh_frame:000000000001E441                 db    0
.eh_frame:000000000001E442                 db    0
.eh_frame:000000000001E443                 db    0
.eh_frame:000000000001E444                 db  20h
.eh_frame:000000000001E445                 db    0
.eh_frame:000000000001E446                 db    0
.eh_frame:000000000001E447                 db    0
.eh_frame:000000000001E448                 db 0D8h
.eh_frame:000000000001E449                 db  0Dh
.eh_frame:000000000001E44A                 db    0
.eh_frame:000000000001E44B                 db    0
.eh_frame:000000000001E44C                 db 0D4h
.eh_frame:000000000001E44D                 db 0B4h
.eh_frame:000000000001E44E                 db 0FEh
.eh_frame:000000000001E44F                 db 0FFh
.eh_frame:000000000001E450                 db  36h ; 6
.eh_frame:000000000001E451                 db    0
.eh_frame:000000000001E452                 db    0
.eh_frame:000000000001E453                 db    0
.eh_frame:000000000001E454                 db    0
.eh_frame:000000000001E455                 db  44h ; D
.eh_frame:000000000001E456                 db  0Eh
.eh_frame:000000000001E457                 db  10h
.eh_frame:000000000001E458                 db  83h
.eh_frame:000000000001E459                 db    2
.eh_frame:000000000001E45A                 db  5Dh ; ]
.eh_frame:000000000001E45B                 db  0Ah
.eh_frame:000000000001E45C                 db  0Eh
.eh_frame:000000000001E45D                 db    8
.eh_frame:000000000001E45E                 db  47h ; G
.eh_frame:000000000001E45F                 db  0Bh
.eh_frame:000000000001E460                 db  48h ; H
.eh_frame:000000000001E461                 db  0Ah
.eh_frame:000000000001E462                 db  0Eh
.eh_frame:000000000001E463                 db    8
.eh_frame:000000000001E464                 db  41h ; A
.eh_frame:000000000001E465                 db  0Bh
.eh_frame:000000000001E466                 db    0
.eh_frame:000000000001E467                 db    0
.eh_frame:000000000001E468                 db  10h
.eh_frame:000000000001E469                 db    0
.eh_frame:000000000001E46A                 db    0
.eh_frame:000000000001E46B                 db    0
.eh_frame:000000000001E46C                 db 0FCh
.eh_frame:000000000001E46D                 db  0Dh
.eh_frame:000000000001E46E                 db    0
.eh_frame:000000000001E46F                 db    0
.eh_frame:000000000001E470                 db 0F0h
.eh_frame:000000000001E471                 db 0B4h
.eh_frame:000000000001E472                 db 0FEh
.eh_frame:000000000001E473                 db 0FFh
.eh_frame:000000000001E474                 db  24h ; $
.eh_frame:000000000001E475                 db    0
.eh_frame:000000000001E476                 db    0
.eh_frame:000000000001E477                 db    0
.eh_frame:000000000001E478                 db    0
.eh_frame:000000000001E479                 db  5Fh ; _
.eh_frame:000000000001E47A                 db  0Eh
.eh_frame:000000000001E47B                 db  10h
.eh_frame:000000000001E47C                 db  14h
.eh_frame:000000000001E47D                 db    0
.eh_frame:000000000001E47E                 db    0
.eh_frame:000000000001E47F                 db    0
.eh_frame:000000000001E480                 db  10h
.eh_frame:000000000001E481                 db  0Eh
.eh_frame:000000000001E482                 db    0
.eh_frame:000000000001E483                 db    0
.eh_frame:000000000001E484                 db  0Ch
.eh_frame:000000000001E485                 db 0B5h
.eh_frame:000000000001E486                 db 0FEh
.eh_frame:000000000001E487                 db 0FFh
.eh_frame:000000000001E488                 db  82h
.eh_frame:000000000001E489                 db    0
.eh_frame:000000000001E48A                 db    0
.eh_frame:000000000001E48B                 db    0
.eh_frame:000000000001E48C                 db    0
.eh_frame:000000000001E48D                 db    2
.eh_frame:000000000001E48E                 db  5Fh ; _
.eh_frame:000000000001E48F                 db  0Eh
.eh_frame:000000000001E490                 db  10h
.eh_frame:000000000001E491                 db  49h ; I
.eh_frame:000000000001E492                 db  0Eh
.eh_frame:000000000001E493                 db    8
.eh_frame:000000000001E494                 db  14h
.eh_frame:000000000001E495                 db    0
.eh_frame:000000000001E496                 db    0
.eh_frame:000000000001E497                 db    0
.eh_frame:000000000001E498                 db  28h ; (
.eh_frame:000000000001E499                 db  0Eh
.eh_frame:000000000001E49A                 db    0
.eh_frame:000000000001E49B                 db    0
.eh_frame:000000000001E49C                 db  84h
.eh_frame:000000000001E49D                 db 0B5h
.eh_frame:000000000001E49E                 db 0FEh
.eh_frame:000000000001E49F                 db 0FFh
.eh_frame:000000000001E4A0                 db  4Ah ; J
.eh_frame:000000000001E4A1                 db    0
.eh_frame:000000000001E4A2                 db    0
.eh_frame:000000000001E4A3                 db    0
.eh_frame:000000000001E4A4                 db    0
.eh_frame:000000000001E4A5                 db    2
.eh_frame:000000000001E4A6                 db  45h ; E
.eh_frame:000000000001E4A7                 db  0Eh
.eh_frame:000000000001E4A8                 db  10h
.eh_frame:000000000001E4A9                 db    0
.eh_frame:000000000001E4AA                 db    0
.eh_frame:000000000001E4AB                 db    0
.eh_frame:000000000001E4AC                 db  18h
.eh_frame:000000000001E4AD                 db    0
.eh_frame:000000000001E4AE                 db    0
.eh_frame:000000000001E4AF                 db    0
.eh_frame:000000000001E4B0                 db  40h ; @
.eh_frame:000000000001E4B1                 db  0Eh
.eh_frame:000000000001E4B2                 db    0
.eh_frame:000000000001E4B3                 db    0
.eh_frame:000000000001E4B4                 db 0BCh
.eh_frame:000000000001E4B5                 db 0B5h
.eh_frame:000000000001E4B6                 db 0FEh
.eh_frame:000000000001E4B7                 db 0FFh
.eh_frame:000000000001E4B8                 db  17h
.eh_frame:000000000001E4B9                 db    0
.eh_frame:000000000001E4BA                 db    0
.eh_frame:000000000001E4BB                 db    0
.eh_frame:000000000001E4BC                 db    0
.eh_frame:000000000001E4BD                 db  41h ; A
.eh_frame:000000000001E4BE                 db  0Eh
.eh_frame:000000000001E4BF                 db  10h
.eh_frame:000000000001E4C0                 db  83h
.eh_frame:000000000001E4C1                 db    2
.eh_frame:000000000001E4C2                 db  51h ; Q
.eh_frame:000000000001E4C3                 db  0Eh
.eh_frame:000000000001E4C4                 db    8
.eh_frame:000000000001E4C5                 db    0
.eh_frame:000000000001E4C6                 db    0
.eh_frame:000000000001E4C7                 db    0
.eh_frame:000000000001E4C8                 db  18h
.eh_frame:000000000001E4C9                 db    0
.eh_frame:000000000001E4CA                 db    0
.eh_frame:000000000001E4CB                 db    0
.eh_frame:000000000001E4CC                 db  5Ch ; \
.eh_frame:000000000001E4CD                 db  0Eh
.eh_frame:000000000001E4CE                 db    0
.eh_frame:000000000001E4CF                 db    0
.eh_frame:000000000001E4D0                 db 0C0h
.eh_frame:000000000001E4D1                 db 0B5h
.eh_frame:000000000001E4D2                 db 0FEh
.eh_frame:000000000001E4D3                 db 0FFh
.eh_frame:000000000001E4D4                 db  2Eh ; .
.eh_frame:000000000001E4D5                 db    0
.eh_frame:000000000001E4D6                 db    0
.eh_frame:000000000001E4D7                 db    0
.eh_frame:000000000001E4D8                 db    0
.eh_frame:000000000001E4D9                 db  47h ; G
.eh_frame:000000000001E4DA                 db  0Eh
.eh_frame:000000000001E4DB                 db  10h
.eh_frame:000000000001E4DC                 db  61h ; a
.eh_frame:000000000001E4DD                 db  0Ah
.eh_frame:000000000001E4DE                 db  0Eh
.eh_frame:000000000001E4DF                 db    8
.eh_frame:000000000001E4E0                 db  41h ; A
.eh_frame:000000000001E4E1                 db  0Bh
.eh_frame:000000000001E4E2                 db    0
.eh_frame:000000000001E4E3                 db    0
.eh_frame:000000000001E4E4                 db  24h ; $
.eh_frame:000000000001E4E5                 db    0
.eh_frame:000000000001E4E6                 db    0
.eh_frame:000000000001E4E7                 db    0
.eh_frame:000000000001E4E8                 db  78h ; x
.eh_frame:000000000001E4E9                 db  0Eh
.eh_frame:000000000001E4EA                 db    0
.eh_frame:000000000001E4EB                 db    0
.eh_frame:000000000001E4EC                 db 0D4h
.eh_frame:000000000001E4ED                 db 0B5h
.eh_frame:000000000001E4EE                 db 0FEh
.eh_frame:000000000001E4EF                 db 0FFh
.eh_frame:000000000001E4F0                 db  28h ; (
.eh_frame:000000000001E4F1                 db    0
.eh_frame:000000000001E4F2                 db    0
.eh_frame:000000000001E4F3                 db    0
.eh_frame:000000000001E4F4                 db    0
.eh_frame:000000000001E4F5                 db  41h ; A
.eh_frame:000000000001E4F6                 db  0Eh
.eh_frame:000000000001E4F7                 db  10h
.eh_frame:000000000001E4F8                 db  86h
.eh_frame:000000000001E4F9                 db    2
.eh_frame:000000000001E4FA                 db  41h ; A
.eh_frame:000000000001E4FB                 db  0Eh
.eh_frame:000000000001E4FC                 db  18h
.eh_frame:000000000001E4FD                 db  83h
.eh_frame:000000000001E4FE                 db    3
.eh_frame:000000000001E4FF                 db  4Dh ; M
.eh_frame:000000000001E500                 db  0Eh
.eh_frame:000000000001E501                 db  20h
.eh_frame:000000000001E502                 db  49h ; I
.eh_frame:000000000001E503                 db  0Eh
.eh_frame:000000000001E504                 db  18h
.eh_frame:000000000001E505                 db  47h ; G
.eh_frame:000000000001E506                 db  0Eh
.eh_frame:000000000001E507                 db  10h
.eh_frame:000000000001E508                 db  41h ; A
.eh_frame:000000000001E509                 db  0Eh
.eh_frame:000000000001E50A                 db    8
.eh_frame:000000000001E50B                 db    0
.eh_frame:000000000001E50C                 db  18h
.eh_frame:000000000001E50D                 db    0
.eh_frame:000000000001E50E                 db    0
.eh_frame:000000000001E50F                 db    0
.eh_frame:000000000001E510                 db 0A0h
.eh_frame:000000000001E511                 db  0Eh
.eh_frame:000000000001E512                 db    0
.eh_frame:000000000001E513                 db    0
.eh_frame:000000000001E514                 db 0DCh
.eh_frame:000000000001E515                 db 0B5h
.eh_frame:000000000001E516                 db 0FEh
.eh_frame:000000000001E517                 db 0FFh
.eh_frame:000000000001E518                 db  13h
.eh_frame:000000000001E519                 db    0
.eh_frame:000000000001E51A                 db    0
.eh_frame:000000000001E51B                 db    0
.eh_frame:000000000001E51C                 db    0
.eh_frame:000000000001E51D                 db  41h ; A
.eh_frame:000000000001E51E                 db  0Eh
.eh_frame:000000000001E51F                 db  10h
.eh_frame:000000000001E520                 db  83h
.eh_frame:000000000001E521                 db    2
.eh_frame:000000000001E522                 db  50h ; P
.eh_frame:000000000001E523                 db  0Eh
.eh_frame:000000000001E524                 db    8
.eh_frame:000000000001E525                 db    0
.eh_frame:000000000001E526                 db    0
.eh_frame:000000000001E527                 db    0
.eh_frame:000000000001E528                 db  14h
.eh_frame:000000000001E529                 db    0
.eh_frame:000000000001E52A                 db    0
.eh_frame:000000000001E52B                 db    0
.eh_frame:000000000001E52C                 db 0BCh
.eh_frame:000000000001E52D                 db  0Eh
.eh_frame:000000000001E52E                 db    0
.eh_frame:000000000001E52F                 db    0
.eh_frame:000000000001E530                 db 0E0h
.eh_frame:000000000001E531                 db 0B5h
.eh_frame:000000000001E532                 db 0FEh
.eh_frame:000000000001E533                 db 0FFh
.eh_frame:000000000001E534                 db  35h ; 5
.eh_frame:000000000001E535                 db    0
.eh_frame:000000000001E536                 db    0
.eh_frame:000000000001E537                 db    0
.eh_frame:000000000001E538                 db    0
.eh_frame:000000000001E539                 db  4Bh ; K
.eh_frame:000000000001E53A                 db  0Eh
.eh_frame:000000000001E53B                 db  10h
.eh_frame:000000000001E53C                 db    0
.eh_frame:000000000001E53D                 db    0
.eh_frame:000000000001E53E                 db    0
.eh_frame:000000000001E53F                 db    0
.eh_frame:000000000001E540                 db  18h
.eh_frame:000000000001E541                 db    0
.eh_frame:000000000001E542                 db    0
.eh_frame:000000000001E543                 db    0
.eh_frame:000000000001E544                 db 0D4h
.eh_frame:000000000001E545                 db  0Eh
.eh_frame:000000000001E546                 db    0
.eh_frame:000000000001E547                 db    0
.eh_frame:000000000001E548                 db    8
.eh_frame:000000000001E549                 db 0B6h
.eh_frame:000000000001E54A                 db 0FEh
.eh_frame:000000000001E54B                 db 0FFh
.eh_frame:000000000001E54C                 db  1Fh
.eh_frame:000000000001E54D                 db    0
.eh_frame:000000000001E54E                 db    0
.eh_frame:000000000001E54F                 db    0
.eh_frame:000000000001E550                 db    0
.eh_frame:000000000001E551                 db  41h ; A
.eh_frame:000000000001E552                 db  0Eh
.eh_frame:000000000001E553                 db  10h
.eh_frame:000000000001E554                 db  83h
.eh_frame:000000000001E555                 db    2
.eh_frame:000000000001E556                 db  4Eh ; N
.eh_frame:000000000001E557                 db  0Ah
.eh_frame:000000000001E558                 db  0Eh
.eh_frame:000000000001E559                 db    8
.eh_frame:000000000001E55A                 db  41h ; A
.eh_frame:000000000001E55B                 db  0Bh
.eh_frame:000000000001E55C                 db  18h
.eh_frame:000000000001E55D                 db    0
.eh_frame:000000000001E55E                 db    0
.eh_frame:000000000001E55F                 db    0
.eh_frame:000000000001E560                 db 0F0h
.eh_frame:000000000001E561                 db  0Eh
.eh_frame:000000000001E562                 db    0
.eh_frame:000000000001E563                 db    0
.eh_frame:000000000001E564                 db  0Ch
.eh_frame:000000000001E565                 db 0B6h
.eh_frame:000000000001E566                 db 0FEh
.eh_frame:000000000001E567                 db 0FFh
.eh_frame:000000000001E568                 db  27h ; '
.eh_frame:000000000001E569                 db    0
.eh_frame:000000000001E56A                 db    0
.eh_frame:000000000001E56B                 db    0
.eh_frame:000000000001E56C                 db    0
.eh_frame:000000000001E56D                 db  41h ; A
.eh_frame:000000000001E56E                 db  0Eh
.eh_frame:000000000001E56F                 db  10h
.eh_frame:000000000001E570                 db  83h
.eh_frame:000000000001E571                 db    2
.eh_frame:000000000001E572                 db  51h ; Q
.eh_frame:000000000001E573                 db  0Ah
.eh_frame:000000000001E574                 db  0Eh
.eh_frame:000000000001E575                 db    8
.eh_frame:000000000001E576                 db  46h ; F
.eh_frame:000000000001E577                 db  0Bh
.eh_frame:000000000001E578                 db  1Ch
.eh_frame:000000000001E579                 db    0
.eh_frame:000000000001E57A                 db    0
.eh_frame:000000000001E57B                 db    0
.eh_frame:000000000001E57C                 db  0Ch
.eh_frame:000000000001E57D                 db  0Fh
.eh_frame:000000000001E57E                 db    0
.eh_frame:000000000001E57F                 db    0
.eh_frame:000000000001E580                 db  20h
.eh_frame:000000000001E581                 db 0B6h
.eh_frame:000000000001E582                 db 0FEh
.eh_frame:000000000001E583                 db 0FFh
.eh_frame:000000000001E584                 db  27h ; '
.eh_frame:000000000001E585                 db    0
.eh_frame:000000000001E586                 db    0
.eh_frame:000000000001E587                 db    0
.eh_frame:000000000001E588                 db    0
.eh_frame:000000000001E589                 db  41h ; A
.eh_frame:000000000001E58A                 db  0Eh
.eh_frame:000000000001E58B                 db  10h
.eh_frame:000000000001E58C                 db  83h
.eh_frame:000000000001E58D                 db    2
.eh_frame:000000000001E58E                 db  51h ; Q
.eh_frame:000000000001E58F                 db  0Ah
.eh_frame:000000000001E590                 db  0Eh
.eh_frame:000000000001E591                 db    8
.eh_frame:000000000001E592                 db  46h ; F
.eh_frame:000000000001E593                 db  0Bh
.eh_frame:000000000001E594                 db    0
.eh_frame:000000000001E595                 db    0
.eh_frame:000000000001E596                 db    0
.eh_frame:000000000001E597                 db    0
.eh_frame:000000000001E598                 db  4Ch ; L
.eh_frame:000000000001E599                 db    0
.eh_frame:000000000001E59A                 db    0
.eh_frame:000000000001E59B                 db    0
.eh_frame:000000000001E59C                 db  2Ch ; ,
.eh_frame:000000000001E59D                 db  0Fh
.eh_frame:000000000001E59E                 db    0
.eh_frame:000000000001E59F                 db    0
.eh_frame:000000000001E5A0                 db  30h ; 0
.eh_frame:000000000001E5A1                 db 0B6h
.eh_frame:000000000001E5A2                 db 0FEh
.eh_frame:000000000001E5A3                 db 0FFh
.eh_frame:000000000001E5A4                 db 0B3h
.eh_frame:000000000001E5A5                 db    6
.eh_frame:000000000001E5A6                 db    0
.eh_frame:000000000001E5A7                 db    0
.eh_frame:000000000001E5A8                 db    0
.eh_frame:000000000001E5A9                 db  42h ; B
.eh_frame:000000000001E5AA                 db  0Eh
.eh_frame:000000000001E5AB                 db  10h
.eh_frame:000000000001E5AC                 db  8Fh
.eh_frame:000000000001E5AD                 db    2
.eh_frame:000000000001E5AE                 db  42h ; B
.eh_frame:000000000001E5AF                 db  0Eh
.eh_frame:000000000001E5B0                 db  18h
.eh_frame:000000000001E5B1                 db  8Eh
.eh_frame:000000000001E5B2                 db    3
.eh_frame:000000000001E5B3                 db  42h ; B
.eh_frame:000000000001E5B4                 db  0Eh
.eh_frame:000000000001E5B5                 db  20h
.eh_frame:000000000001E5B6                 db  8Dh
.eh_frame:000000000001E5B7                 db    4
.eh_frame:000000000001E5B8                 db  42h ; B
.eh_frame:000000000001E5B9                 db  0Eh
.eh_frame:000000000001E5BA                 db  28h ; (
.eh_frame:000000000001E5BB                 db  8Ch
.eh_frame:000000000001E5BC                 db    5
.eh_frame:000000000001E5BD                 db  41h ; A
.eh_frame:000000000001E5BE                 db  0Eh
.eh_frame:000000000001E5BF                 db  30h ; 0
.eh_frame:000000000001E5C0                 db  86h
.eh_frame:000000000001E5C1                 db    6
.eh_frame:000000000001E5C2                 db  41h ; A
.eh_frame:000000000001E5C3                 db  0Eh
.eh_frame:000000000001E5C4                 db  38h ; 8
.eh_frame:000000000001E5C5                 db  83h
.eh_frame:000000000001E5C6                 db    7
.eh_frame:000000000001E5C7                 db  44h ; D
.eh_frame:000000000001E5C8                 db  0Eh
.eh_frame:000000000001E5C9                 db  60h ; `
.eh_frame:000000000001E5CA                 db    2
.eh_frame:000000000001E5CB                 db  96h
.eh_frame:000000000001E5CC                 db  0Ah
.eh_frame:000000000001E5CD                 db  0Eh
.eh_frame:000000000001E5CE                 db  38h ; 8
.eh_frame:000000000001E5CF                 db  41h ; A
.eh_frame:000000000001E5D0                 db  0Eh
.eh_frame:000000000001E5D1                 db  30h ; 0
.eh_frame:000000000001E5D2                 db  41h ; A
.eh_frame:000000000001E5D3                 db  0Eh
.eh_frame:000000000001E5D4                 db  28h ; (
.eh_frame:000000000001E5D5                 db  42h ; B
.eh_frame:000000000001E5D6                 db  0Eh
.eh_frame:000000000001E5D7                 db  20h
.eh_frame:000000000001E5D8                 db  42h ; B
.eh_frame:000000000001E5D9                 db  0Eh
.eh_frame:000000000001E5DA                 db  18h
.eh_frame:000000000001E5DB                 db  42h ; B
.eh_frame:000000000001E5DC                 db  0Eh
.eh_frame:000000000001E5DD                 db  10h
.eh_frame:000000000001E5DE                 db  42h ; B
.eh_frame:000000000001E5DF                 db  0Eh
.eh_frame:000000000001E5E0                 db    8
.eh_frame:000000000001E5E1                 db  42h ; B
.eh_frame:000000000001E5E2                 db  0Bh
.eh_frame:000000000001E5E3                 db    0
.eh_frame:000000000001E5E4                 db    0
.eh_frame:000000000001E5E5                 db    0
.eh_frame:000000000001E5E6                 db    0
.eh_frame:000000000001E5E7                 db    0
.eh_frame:000000000001E5E8                 db  34h ; 4
.eh_frame:000000000001E5E9                 db    0
.eh_frame:000000000001E5EA                 db    0
.eh_frame:000000000001E5EB                 db    0
.eh_frame:000000000001E5EC                 db  7Ch ; |
.eh_frame:000000000001E5ED                 db  0Fh
.eh_frame:000000000001E5EE                 db    0
.eh_frame:000000000001E5EF                 db    0
.eh_frame:000000000001E5F0                 db 0A0h
.eh_frame:000000000001E5F1                 db 0BCh
.eh_frame:000000000001E5F2                 db 0FEh
.eh_frame:000000000001E5F3                 db 0FFh
.eh_frame:000000000001E5F4                 db  7Bh ; {
.eh_frame:000000000001E5F5                 db    0
.eh_frame:000000000001E5F6                 db    0
.eh_frame:000000000001E5F7                 db    0
.eh_frame:000000000001E5F8                 db    0
.eh_frame:000000000001E5F9                 db  42h ; B
.eh_frame:000000000001E5FA                 db  0Eh
.eh_frame:000000000001E5FB                 db  10h
.eh_frame:000000000001E5FC                 db  8Ch
.eh_frame:000000000001E5FD                 db    2
.eh_frame:000000000001E5FE                 db  41h ; A
.eh_frame:000000000001E5FF                 db  0Eh
.eh_frame:000000000001E600                 db  18h
.eh_frame:000000000001E601                 db  86h
.eh_frame:000000000001E602                 db    3
.eh_frame:000000000001E603                 db  41h ; A
.eh_frame:000000000001E604                 db  0Eh
.eh_frame:000000000001E605                 db  20h
.eh_frame:000000000001E606                 db  83h
.eh_frame:000000000001E607                 db    4
.eh_frame:000000000001E608                 db  7Dh ; }
.eh_frame:000000000001E609                 db  0Ah
.eh_frame:000000000001E60A                 db  0Eh
.eh_frame:000000000001E60B                 db  18h
.eh_frame:000000000001E60C                 db  41h ; A
.eh_frame:000000000001E60D                 db  0Eh
.eh_frame:000000000001E60E                 db  10h
.eh_frame:000000000001E60F                 db  42h ; B
.eh_frame:000000000001E610                 db  0Eh
.eh_frame:000000000001E611                 db    8
.eh_frame:000000000001E612                 db  44h ; D
.eh_frame:000000000001E613                 db  0Bh
.eh_frame:000000000001E614                 db  60h ; `
.eh_frame:000000000001E615                 db  0Ah
.eh_frame:000000000001E616                 db  0Eh
.eh_frame:000000000001E617                 db  18h
.eh_frame:000000000001E618                 db  41h ; A
.eh_frame:000000000001E619                 db  0Eh
.eh_frame:000000000001E61A                 db  10h
.eh_frame:000000000001E61B                 db  42h ; B
.eh_frame:000000000001E61C                 db  0Eh
.eh_frame:000000000001E61D                 db    8
.eh_frame:000000000001E61E                 db  45h ; E
.eh_frame:000000000001E61F                 db  0Bh
.eh_frame:000000000001E620                 db  1Ch
.eh_frame:000000000001E621                 db    0
.eh_frame:000000000001E622                 db    0
.eh_frame:000000000001E623                 db    0
.eh_frame:000000000001E624                 db 0B4h
.eh_frame:000000000001E625                 db  0Fh
.eh_frame:000000000001E626                 db    0
.eh_frame:000000000001E627                 db    0
.eh_frame:000000000001E628                 db 0E8h
.eh_frame:000000000001E629                 db 0BCh
.eh_frame:000000000001E62A                 db 0FEh
.eh_frame:000000000001E62B                 db 0FFh
.eh_frame:000000000001E62C                 db  40h ; @
.eh_frame:000000000001E62D                 db    0
.eh_frame:000000000001E62E                 db    0
.eh_frame:000000000001E62F                 db    0
.eh_frame:000000000001E630                 db    0
.eh_frame:000000000001E631                 db  44h ; D
.eh_frame:000000000001E632                 db  0Eh
.eh_frame:000000000001E633                 db  10h
.eh_frame:000000000001E634                 db  83h
.eh_frame:000000000001E635                 db    2
.eh_frame:000000000001E636                 db  5Ah ; Z
.eh_frame:000000000001E637                 db  0Ah
.eh_frame:000000000001E638                 db  0Eh
.eh_frame:000000000001E639                 db    8
.eh_frame:000000000001E63A                 db  4Ah ; J
.eh_frame:000000000001E63B                 db  0Bh
.eh_frame:000000000001E63C                 db  53h ; S
.eh_frame:000000000001E63D                 db  0Eh
.eh_frame:000000000001E63E                 db    8
.eh_frame:000000000001E63F                 db    0
.eh_frame:000000000001E640                 db  2Ch ; ,
.eh_frame:000000000001E641                 db    0
.eh_frame:000000000001E642                 db    0
.eh_frame:000000000001E643                 db    0
.eh_frame:000000000001E644                 db 0D4h
.eh_frame:000000000001E645                 db  0Fh
.eh_frame:000000000001E646                 db    0
.eh_frame:000000000001E647                 db    0
.eh_frame:000000000001E648                 db    8
.eh_frame:000000000001E649                 db 0BDh
.eh_frame:000000000001E64A                 db 0FEh
.eh_frame:000000000001E64B                 db 0FFh
.eh_frame:000000000001E64C                 db  57h ; W
.eh_frame:000000000001E64D                 db    0
.eh_frame:000000000001E64E                 db    0
.eh_frame:000000000001E64F                 db    0
.eh_frame:000000000001E650                 db    0
.eh_frame:000000000001E651                 db  63h ; c
.eh_frame:000000000001E652                 db  0Eh
.eh_frame:000000000001E653                 db  10h
.eh_frame:000000000001E654                 db  8Ch
.eh_frame:000000000001E655                 db    2
.eh_frame:000000000001E656                 db  41h ; A
.eh_frame:000000000001E657                 db  0Eh
.eh_frame:000000000001E658                 db  18h
.eh_frame:000000000001E659                 db  86h
.eh_frame:000000000001E65A                 db    3
.eh_frame:000000000001E65B                 db  44h ; D
.eh_frame:000000000001E65C                 db  0Eh
.eh_frame:000000000001E65D                 db  20h
.eh_frame:000000000001E65E                 db  83h
.eh_frame:000000000001E65F                 db    4
.eh_frame:000000000001E660                 db  6Bh ; k
.eh_frame:000000000001E661                 db  0Eh
.eh_frame:000000000001E662                 db  18h
.eh_frame:000000000001E663                 db  41h ; A
.eh_frame:000000000001E664                 db  0Eh
.eh_frame:000000000001E665                 db  10h
.eh_frame:000000000001E666                 db  42h ; B
.eh_frame:000000000001E667                 db  0Eh
.eh_frame:000000000001E668                 db    8
.eh_frame:000000000001E669                 db    0
.eh_frame:000000000001E66A                 db    0
.eh_frame:000000000001E66B                 db    0
.eh_frame:000000000001E66C                 db    0
.eh_frame:000000000001E66D                 db    0
.eh_frame:000000000001E66E                 db    0
.eh_frame:000000000001E66F                 db    0
.eh_frame:000000000001E670                 db  3Ch ; <
.eh_frame:000000000001E671                 db    0
.eh_frame:000000000001E672                 db    0
.eh_frame:000000000001E673                 db    0
.eh_frame:000000000001E674                 db    4
.eh_frame:000000000001E675                 db  10h
.eh_frame:000000000001E676                 db    0
.eh_frame:000000000001E677                 db    0
.eh_frame:000000000001E678                 db  38h ; 8
.eh_frame:000000000001E679                 db 0BDh
.eh_frame:000000000001E67A                 db 0FEh
.eh_frame:000000000001E67B                 db 0FFh
.eh_frame:000000000001E67C                 db  83h
.eh_frame:000000000001E67D                 db    0
.eh_frame:000000000001E67E                 db    0
.eh_frame:000000000001E67F                 db    0
.eh_frame:000000000001E680                 db    0
.eh_frame:000000000001E681                 db  42h ; B
.eh_frame:000000000001E682                 db  0Eh
.eh_frame:000000000001E683                 db  10h
.eh_frame:000000000001E684                 db  8Dh
.eh_frame:000000000001E685                 db    2
.eh_frame:000000000001E686                 db  42h ; B
.eh_frame:000000000001E687                 db  0Eh
.eh_frame:000000000001E688                 db  18h
.eh_frame:000000000001E689                 db  8Ch
.eh_frame:000000000001E68A                 db    3
.eh_frame:000000000001E68B                 db  44h ; D
.eh_frame:000000000001E68C                 db  0Eh
.eh_frame:000000000001E68D                 db  20h
.eh_frame:000000000001E68E                 db  86h
.eh_frame:000000000001E68F                 db    4
.eh_frame:000000000001E690                 db  41h ; A
.eh_frame:000000000001E691                 db  0Eh
.eh_frame:000000000001E692                 db  28h ; (
.eh_frame:000000000001E693                 db  83h
.eh_frame:000000000001E694                 db    5
.eh_frame:000000000001E695                 db  4Ah ; J
.eh_frame:000000000001E696                 db  0Eh
.eh_frame:000000000001E697                 db  40h ; @
.eh_frame:000000000001E698                 db    2
.eh_frame:000000000001E699                 db  64h ; d
.eh_frame:000000000001E69A                 db  0Ah
.eh_frame:000000000001E69B                 db  0Eh
.eh_frame:000000000001E69C                 db  28h ; (
.eh_frame:000000000001E69D                 db  41h ; A
.eh_frame:000000000001E69E                 db  0Eh
.eh_frame:000000000001E69F                 db  20h
.eh_frame:000000000001E6A0                 db  41h ; A
.eh_frame:000000000001E6A1                 db  0Eh
.eh_frame:000000000001E6A2                 db  18h
.eh_frame:000000000001E6A3                 db  42h ; B
.eh_frame:000000000001E6A4                 db  0Eh
.eh_frame:000000000001E6A5                 db  10h
.eh_frame:000000000001E6A6                 db  42h ; B
.eh_frame:000000000001E6A7                 db  0Eh
.eh_frame:000000000001E6A8                 db    8
.eh_frame:000000000001E6A9                 db  41h ; A
.eh_frame:000000000001E6AA                 db  0Bh
.eh_frame:000000000001E6AB                 db    0
.eh_frame:000000000001E6AC                 db    0
.eh_frame:000000000001E6AD                 db    0
.eh_frame:000000000001E6AE                 db    0
.eh_frame:000000000001E6AF                 db    0
.eh_frame:000000000001E6B0                 db  10h
.eh_frame:000000000001E6B1                 db    0
.eh_frame:000000000001E6B2                 db    0
.eh_frame:000000000001E6B3                 db    0
.eh_frame:000000000001E6B4                 db  44h ; D
.eh_frame:000000000001E6B5                 db  10h
.eh_frame:000000000001E6B6                 db    0
.eh_frame:000000000001E6B7                 db    0
.eh_frame:000000000001E6B8                 db  88h
.eh_frame:000000000001E6B9                 db 0BDh
.eh_frame:000000000001E6BA                 db 0FEh
.eh_frame:000000000001E6BB                 db 0FFh
.eh_frame:000000000001E6BC                 db  2Fh ; /
.eh_frame:000000000001E6BD                 db    1
.eh_frame:000000000001E6BE                 db    0
.eh_frame:000000000001E6BF                 db    0
.eh_frame:000000000001E6C0                 db    0
.eh_frame:000000000001E6C1                 db    0
.eh_frame:000000000001E6C2                 db    0
.eh_frame:000000000001E6C3                 db    0
.eh_frame:000000000001E6C4                 db  10h
.eh_frame:000000000001E6C5                 db    0
.eh_frame:000000000001E6C6                 db    0
.eh_frame:000000000001E6C7                 db    0
.eh_frame:000000000001E6C8                 db  58h ; X
.eh_frame:000000000001E6C9                 db  10h
.eh_frame:000000000001E6CA                 db    0
.eh_frame:000000000001E6CB                 db    0
.eh_frame:000000000001E6CC                 db 0A4h
.eh_frame:000000000001E6CD                 db 0BEh
.eh_frame:000000000001E6CE                 db 0FEh
.eh_frame:000000000001E6CF                 db 0FFh
.eh_frame:000000000001E6D0                 db  1Dh
.eh_frame:000000000001E6D1                 db    0
.eh_frame:000000000001E6D2                 db    0
.eh_frame:000000000001E6D3                 db    0
.eh_frame:000000000001E6D4                 db    0
.eh_frame:000000000001E6D5                 db    0
.eh_frame:000000000001E6D6                 db    0
.eh_frame:000000000001E6D7                 db    0
.eh_frame:000000000001E6D8                 db  90h
.eh_frame:000000000001E6D9                 db    0
.eh_frame:000000000001E6DA                 db    0
.eh_frame:000000000001E6DB                 db    0
.eh_frame:000000000001E6DC                 db  6Ch ; l
.eh_frame:000000000001E6DD                 db  10h
.eh_frame:000000000001E6DE                 db    0
.eh_frame:000000000001E6DF                 db    0
.eh_frame:000000000001E6E0                 db 0B0h
.eh_frame:000000000001E6E1                 db 0BEh
.eh_frame:000000000001E6E2                 db 0FEh
.eh_frame:000000000001E6E3                 db 0FFh
.eh_frame:000000000001E6E4                 db  2Ch ; ,
.eh_frame:000000000001E6E5                 db    2
.eh_frame:000000000001E6E6                 db    0
.eh_frame:000000000001E6E7                 db    0
.eh_frame:000000000001E6E8                 db    0
.eh_frame:000000000001E6E9                 db  42h ; B
.eh_frame:000000000001E6EA                 db  0Eh
.eh_frame:000000000001E6EB                 db  10h
.eh_frame:000000000001E6EC                 db  8Fh
.eh_frame:000000000001E6ED                 db    2
.eh_frame:000000000001E6EE                 db  42h ; B
.eh_frame:000000000001E6EF                 db  0Eh
.eh_frame:000000000001E6F0                 db  18h
.eh_frame:000000000001E6F1                 db  8Eh
.eh_frame:000000000001E6F2                 db    3
.eh_frame:000000000001E6F3                 db  45h ; E
.eh_frame:000000000001E6F4                 db  0Eh
.eh_frame:000000000001E6F5                 db  20h
.eh_frame:000000000001E6F6                 db  8Dh
.eh_frame:000000000001E6F7                 db    4
.eh_frame:000000000001E6F8                 db  42h ; B
.eh_frame:000000000001E6F9                 db  0Eh
.eh_frame:000000000001E6FA                 db  28h ; (
.eh_frame:000000000001E6FB                 db  8Ch
.eh_frame:000000000001E6FC                 db    5
.eh_frame:000000000001E6FD                 db  45h ; E
.eh_frame:000000000001E6FE                 db  0Eh
.eh_frame:000000000001E6FF                 db  30h ; 0
.eh_frame:000000000001E700                 db  86h
.eh_frame:000000000001E701                 db    6
.eh_frame:000000000001E702                 db  41h ; A
.eh_frame:000000000001E703                 db  0Eh
.eh_frame:000000000001E704                 db  38h ; 8
.eh_frame:000000000001E705                 db  83h
.eh_frame:000000000001E706                 db    7
.eh_frame:000000000001E707                 db  47h ; G
.eh_frame:000000000001E708                 db  0Eh
.eh_frame:000000000001E709                 db  80h
.eh_frame:000000000001E70A                 db    1
.eh_frame:000000000001E70B                 db    2
.eh_frame:000000000001E70C                 db 0BAh
.eh_frame:000000000001E70D                 db  0Ah
.eh_frame:000000000001E70E                 db  0Eh
.eh_frame:000000000001E70F                 db  38h ; 8
.eh_frame:000000000001E710                 db  46h ; F
.eh_frame:000000000001E711                 db  0Eh
.eh_frame:000000000001E712                 db  30h ; 0
.eh_frame:000000000001E713                 db  41h ; A
.eh_frame:000000000001E714                 db  0Eh
.eh_frame:000000000001E715                 db  28h ; (
.eh_frame:000000000001E716                 db  42h ; B
.eh_frame:000000000001E717                 db  0Eh
.eh_frame:000000000001E718                 db  20h
.eh_frame:000000000001E719                 db  42h ; B
.eh_frame:000000000001E71A                 db  0Eh
.eh_frame:000000000001E71B                 db  18h
.eh_frame:000000000001E71C                 db  42h ; B
.eh_frame:000000000001E71D                 db  0Eh
.eh_frame:000000000001E71E                 db  10h
.eh_frame:000000000001E71F                 db  42h ; B
.eh_frame:000000000001E720                 db  0Eh
.eh_frame:000000000001E721                 db    8
.eh_frame:000000000001E722                 db  47h ; G
.eh_frame:000000000001E723                 db  0Bh
.eh_frame:000000000001E724                 db    2
.eh_frame:000000000001E725                 db 0E1h
.eh_frame:000000000001E726                 db  0Ah
.eh_frame:000000000001E727                 db  0Eh
.eh_frame:000000000001E728                 db  38h ; 8
.eh_frame:000000000001E729                 db  44h ; D
.eh_frame:000000000001E72A                 db  0Eh
.eh_frame:000000000001E72B                 db  30h ; 0
.eh_frame:000000000001E72C                 db  43h ; C
.eh_frame:000000000001E72D                 db  0Eh
.eh_frame:000000000001E72E                 db  28h ; (
.eh_frame:000000000001E72F                 db  42h ; B
.eh_frame:000000000001E730                 db  0Eh
.eh_frame:000000000001E731                 db  20h
.eh_frame:000000000001E732                 db  42h ; B
.eh_frame:000000000001E733                 db  0Eh
.eh_frame:000000000001E734                 db  18h
.eh_frame:000000000001E735                 db  42h ; B
.eh_frame:000000000001E736                 db  0Eh
.eh_frame:000000000001E737                 db  10h
.eh_frame:000000000001E738                 db  42h ; B
.eh_frame:000000000001E739                 db  0Eh
.eh_frame:000000000001E73A                 db    8
.eh_frame:000000000001E73B                 db  48h ; H
.eh_frame:000000000001E73C                 db  0Bh
.eh_frame:000000000001E73D                 db  59h ; Y
.eh_frame:000000000001E73E                 db  0Ah
.eh_frame:000000000001E73F                 db  0Eh
.eh_frame:000000000001E740                 db  38h ; 8
.eh_frame:000000000001E741                 db  43h ; C
.eh_frame:000000000001E742                 db  0Eh
.eh_frame:000000000001E743                 db  30h ; 0
.eh_frame:000000000001E744                 db  41h ; A
.eh_frame:000000000001E745                 db  0Eh
.eh_frame:000000000001E746                 db  28h ; (
.eh_frame:000000000001E747                 db  42h ; B
.eh_frame:000000000001E748                 db  0Eh
.eh_frame:000000000001E749                 db  20h
.eh_frame:000000000001E74A                 db  42h ; B
.eh_frame:000000000001E74B                 db  0Eh
.eh_frame:000000000001E74C                 db  18h
.eh_frame:000000000001E74D                 db  42h ; B
.eh_frame:000000000001E74E                 db  0Eh
.eh_frame:000000000001E74F                 db  10h
.eh_frame:000000000001E750                 db  42h ; B
.eh_frame:000000000001E751                 db  0Eh
.eh_frame:000000000001E752                 db    8
.eh_frame:000000000001E753                 db  4Bh ; K
.eh_frame:000000000001E754                 db  0Bh
.eh_frame:000000000001E755                 db  49h ; I
.eh_frame:000000000001E756                 db  0Eh
.eh_frame:000000000001E757                 db  38h ; 8
.eh_frame:000000000001E758                 db  41h ; A
.eh_frame:000000000001E759                 db  0Eh
.eh_frame:000000000001E75A                 db  30h ; 0
.eh_frame:000000000001E75B                 db  41h ; A
.eh_frame:000000000001E75C                 db  0Eh
.eh_frame:000000000001E75D                 db  28h ; (
.eh_frame:000000000001E75E                 db  48h ; H
.eh_frame:000000000001E75F                 db  0Eh
.eh_frame:000000000001E760                 db  20h
.eh_frame:000000000001E761                 db  44h ; D
.eh_frame:000000000001E762                 db  0Eh
.eh_frame:000000000001E763                 db  18h
.eh_frame:000000000001E764                 db  42h ; B
.eh_frame:000000000001E765                 db  0Eh
.eh_frame:000000000001E766                 db  10h
.eh_frame:000000000001E767                 db  42h ; B
.eh_frame:000000000001E768                 db  0Eh
.eh_frame:000000000001E769                 db    8
.eh_frame:000000000001E76A                 db    0
.eh_frame:000000000001E76B                 db    0
.eh_frame:000000000001E76C                 db  10h
.eh_frame:000000000001E76D                 db    0
.eh_frame:000000000001E76E                 db    0
.eh_frame:000000000001E76F                 db    0
.eh_frame:000000000001E770                 db    0
.eh_frame:000000000001E771                 db  11h
.eh_frame:000000000001E772                 db    0
.eh_frame:000000000001E773                 db    0
.eh_frame:000000000001E774                 db  4Ch ; L
.eh_frame:000000000001E775                 db 0C0h
.eh_frame:000000000001E776                 db 0FEh
.eh_frame:000000000001E777                 db 0FFh
.eh_frame:000000000001E778                 db  66h ; f
.eh_frame:000000000001E779                 db    0
.eh_frame:000000000001E77A                 db    0
.eh_frame:000000000001E77B                 db    0
.eh_frame:000000000001E77C                 db    0
.eh_frame:000000000001E77D                 db    0
.eh_frame:000000000001E77E                 db    0
.eh_frame:000000000001E77F                 db    0
.eh_frame:000000000001E780                 db  28h ; (
.eh_frame:000000000001E781                 db    0
.eh_frame:000000000001E782                 db    0
.eh_frame:000000000001E783                 db    0
.eh_frame:000000000001E784                 db  14h
.eh_frame:000000000001E785                 db  11h
.eh_frame:000000000001E786                 db    0
.eh_frame:000000000001E787                 db    0
.eh_frame:000000000001E788                 db 0A8h
.eh_frame:000000000001E789                 db 0C0h
.eh_frame:000000000001E78A                 db 0FEh
.eh_frame:000000000001E78B                 db 0FFh
.eh_frame:000000000001E78C                 db  6Bh ; k
.eh_frame:000000000001E78D                 db    0
.eh_frame:000000000001E78E                 db    0
.eh_frame:000000000001E78F                 db    0
.eh_frame:000000000001E790                 db    0
.eh_frame:000000000001E791                 db  42h ; B
.eh_frame:000000000001E792                 db  0Eh
.eh_frame:000000000001E793                 db  10h
.eh_frame:000000000001E794                 db  8Ch
.eh_frame:000000000001E795                 db    2
.eh_frame:000000000001E796                 db  44h ; D
.eh_frame:000000000001E797                 db  0Eh
.eh_frame:000000000001E798                 db  18h
.eh_frame:000000000001E799                 db  86h
.eh_frame:000000000001E79A                 db    3
.eh_frame:000000000001E79B                 db  44h ; D
.eh_frame:000000000001E79C                 db  0Eh
.eh_frame:000000000001E79D                 db  20h
.eh_frame:000000000001E79E                 db  83h
.eh_frame:000000000001E79F                 db    4
.eh_frame:000000000001E7A0                 db    2
.eh_frame:000000000001E7A1                 db  5Dh ; ]
.eh_frame:000000000001E7A2                 db  0Eh
.eh_frame:000000000001E7A3                 db  18h
.eh_frame:000000000001E7A4                 db  41h ; A
.eh_frame:000000000001E7A5                 db  0Eh
.eh_frame:000000000001E7A6                 db  10h
.eh_frame:000000000001E7A7                 db  42h ; B
.eh_frame:000000000001E7A8                 db  0Eh
.eh_frame:000000000001E7A9                 db    8
.eh_frame:000000000001E7AA                 db    0
.eh_frame:000000000001E7AB                 db    0
.eh_frame:000000000001E7AC                 db  28h ; (
.eh_frame:000000000001E7AD                 db    0
.eh_frame:000000000001E7AE                 db    0
.eh_frame:000000000001E7AF                 db    0
.eh_frame:000000000001E7B0                 db  40h ; @
.eh_frame:000000000001E7B1                 db  11h
.eh_frame:000000000001E7B2                 db    0
.eh_frame:000000000001E7B3                 db    0
.eh_frame:000000000001E7B4                 db 0ECh
.eh_frame:000000000001E7B5                 db 0C0h
.eh_frame:000000000001E7B6                 db 0FEh
.eh_frame:000000000001E7B7                 db 0FFh
.eh_frame:000000000001E7B8                 db  51h ; Q
.eh_frame:000000000001E7B9                 db    0
.eh_frame:000000000001E7BA                 db    0
.eh_frame:000000000001E7BB                 db    0
.eh_frame:000000000001E7BC                 db    0
.eh_frame:000000000001E7BD                 db  42h ; B
.eh_frame:000000000001E7BE                 db  0Eh
.eh_frame:000000000001E7BF                 db  10h
.eh_frame:000000000001E7C0                 db  8Ch
.eh_frame:000000000001E7C1                 db    2
.eh_frame:000000000001E7C2                 db  44h ; D
.eh_frame:000000000001E7C3                 db  0Eh
.eh_frame:000000000001E7C4                 db  18h
.eh_frame:000000000001E7C5                 db  86h
.eh_frame:000000000001E7C6                 db    3
.eh_frame:000000000001E7C7                 db  44h ; D
.eh_frame:000000000001E7C8                 db  0Eh
.eh_frame:000000000001E7C9                 db  20h
.eh_frame:000000000001E7CA                 db  83h
.eh_frame:000000000001E7CB                 db    4
.eh_frame:000000000001E7CC                 db    2
.eh_frame:000000000001E7CD                 db  43h ; C
.eh_frame:000000000001E7CE                 db  0Eh
.eh_frame:000000000001E7CF                 db  18h
.eh_frame:000000000001E7D0                 db  41h ; A
.eh_frame:000000000001E7D1                 db  0Eh
.eh_frame:000000000001E7D2                 db  10h
.eh_frame:000000000001E7D3                 db  42h ; B
.eh_frame:000000000001E7D4                 db  0Eh
.eh_frame:000000000001E7D5                 db    8
.eh_frame:000000000001E7D6                 db    0
.eh_frame:000000000001E7D7                 db    0
.eh_frame:000000000001E7D8                 db  30h ; 0
.eh_frame:000000000001E7D9                 db    0
.eh_frame:000000000001E7DA                 db    0
.eh_frame:000000000001E7DB                 db    0
.eh_frame:000000000001E7DC                 db  6Ch ; l
.eh_frame:000000000001E7DD                 db  11h
.eh_frame:000000000001E7DE                 db    0
.eh_frame:000000000001E7DF                 db    0
.eh_frame:000000000001E7E0                 db  20h
.eh_frame:000000000001E7E1                 db 0C1h
.eh_frame:000000000001E7E2                 db 0FEh
.eh_frame:000000000001E7E3                 db 0FFh
.eh_frame:000000000001E7E4                 db  9Ch
.eh_frame:000000000001E7E5                 db    0
.eh_frame:000000000001E7E6                 db    0
.eh_frame:000000000001E7E7                 db    0
.eh_frame:000000000001E7E8                 db    0
.eh_frame:000000000001E7E9                 db  41h ; A
.eh_frame:000000000001E7EA                 db  0Eh
.eh_frame:000000000001E7EB                 db  10h
.eh_frame:000000000001E7EC                 db  86h
.eh_frame:000000000001E7ED                 db    2
.eh_frame:000000000001E7EE                 db  41h ; A
.eh_frame:000000000001E7EF                 db  0Eh
.eh_frame:000000000001E7F0                 db  18h
.eh_frame:000000000001E7F1                 db  83h
.eh_frame:000000000001E7F2                 db    3
.eh_frame:000000000001E7F3                 db  4Ah ; J
.eh_frame:000000000001E7F4                 db  0Eh
.eh_frame:000000000001E7F5                 db  20h
.eh_frame:000000000001E7F6                 db    2
.eh_frame:000000000001E7F7                 db  62h ; b
.eh_frame:000000000001E7F8                 db  0Ah
.eh_frame:000000000001E7F9                 db  0Eh
.eh_frame:000000000001E7FA                 db  18h
.eh_frame:000000000001E7FB                 db  43h ; C
.eh_frame:000000000001E7FC                 db  0Eh
.eh_frame:000000000001E7FD                 db  10h
.eh_frame:000000000001E7FE                 db  41h ; A
.eh_frame:000000000001E7FF                 db  0Eh
.eh_frame:000000000001E800                 db    8
.eh_frame:000000000001E801                 db  46h ; F
.eh_frame:000000000001E802                 db  0Bh
.eh_frame:000000000001E803                 db  5Ch ; \
.eh_frame:000000000001E804                 db  0Eh
.eh_frame:000000000001E805                 db  18h
.eh_frame:000000000001E806                 db  46h ; F
.eh_frame:000000000001E807                 db  0Eh
.eh_frame:000000000001E808                 db  10h
.eh_frame:000000000001E809                 db  41h ; A
.eh_frame:000000000001E80A                 db  0Eh
.eh_frame:000000000001E80B                 db    8
.eh_frame:000000000001E80C                 db  28h ; (
.eh_frame:000000000001E80D                 db    0
.eh_frame:000000000001E80E                 db    0
.eh_frame:000000000001E80F                 db    0
.eh_frame:000000000001E810                 db 0A0h
.eh_frame:000000000001E811                 db  11h
.eh_frame:000000000001E812                 db    0
.eh_frame:000000000001E813                 db    0
.eh_frame:000000000001E814                 db  8Ch
.eh_frame:000000000001E815                 db 0C1h
.eh_frame:000000000001E816                 db 0FEh
.eh_frame:000000000001E817                 db 0FFh
.eh_frame:000000000001E818                 db  64h ; d
.eh_frame:000000000001E819                 db    0
.eh_frame:000000000001E81A                 db    0
.eh_frame:000000000001E81B                 db    0
.eh_frame:000000000001E81C                 db    0
.eh_frame:000000000001E81D                 db  41h ; A
.eh_frame:000000000001E81E                 db  0Eh
.eh_frame:000000000001E81F                 db  10h
.eh_frame:000000000001E820                 db  86h
.eh_frame:000000000001E821                 db    2
.eh_frame:000000000001E822                 db  41h ; A
.eh_frame:000000000001E823                 db  0Eh
.eh_frame:000000000001E824                 db  18h
.eh_frame:000000000001E825                 db  83h
.eh_frame:000000000001E826                 db    3
.eh_frame:000000000001E827                 db  4Ah ; J
.eh_frame:000000000001E828                 db  0Eh
.eh_frame:000000000001E829                 db  20h
.eh_frame:000000000001E82A                 db  62h ; b
.eh_frame:000000000001E82B                 db  0Ah
.eh_frame:000000000001E82C                 db  0Eh
.eh_frame:000000000001E82D                 db  18h
.eh_frame:000000000001E82E                 db  41h ; A
.eh_frame:000000000001E82F                 db  0Eh
.eh_frame:000000000001E830                 db  10h
.eh_frame:000000000001E831                 db  41h ; A
.eh_frame:000000000001E832                 db  0Eh
.eh_frame:000000000001E833                 db    8
.eh_frame:000000000001E834                 db  48h ; H
.eh_frame:000000000001E835                 db  0Bh
.eh_frame:000000000001E836                 db    0
.eh_frame:000000000001E837                 db    0
.eh_frame:000000000001E838                 db  34h ; 4
.eh_frame:000000000001E839                 db    0
.eh_frame:000000000001E83A                 db    0
.eh_frame:000000000001E83B                 db    0
.eh_frame:000000000001E83C                 db 0CCh
.eh_frame:000000000001E83D                 db  11h
.eh_frame:000000000001E83E                 db    0
.eh_frame:000000000001E83F                 db    0
.eh_frame:000000000001E840                 db 0D0h
.eh_frame:000000000001E841                 db 0C1h
.eh_frame:000000000001E842                 db 0FEh
.eh_frame:000000000001E843                 db 0FFh
.eh_frame:000000000001E844                 db  2Ch ; ,
.eh_frame:000000000001E845                 db    1
.eh_frame:000000000001E846                 db    0
.eh_frame:000000000001E847                 db    0
.eh_frame:000000000001E848                 db    0
.eh_frame:000000000001E849                 db  41h ; A
.eh_frame:000000000001E84A                 db  0Eh
.eh_frame:000000000001E84B                 db  10h
.eh_frame:000000000001E84C                 db  86h
.eh_frame:000000000001E84D                 db    2
.eh_frame:000000000001E84E                 db  41h ; A
.eh_frame:000000000001E84F                 db  0Eh
.eh_frame:000000000001E850                 db  18h
.eh_frame:000000000001E851                 db  83h
.eh_frame:000000000001E852                 db    3
.eh_frame:000000000001E853                 db  4Ah ; J
.eh_frame:000000000001E854                 db  0Eh
.eh_frame:000000000001E855                 db  20h
.eh_frame:000000000001E856                 db  66h ; f
.eh_frame:000000000001E857                 db  0Ah
.eh_frame:000000000001E858                 db  0Eh
.eh_frame:000000000001E859                 db  18h
.eh_frame:000000000001E85A                 db  41h ; A
.eh_frame:000000000001E85B                 db  0Eh
.eh_frame:000000000001E85C                 db  10h
.eh_frame:000000000001E85D                 db  41h ; A
.eh_frame:000000000001E85E                 db  0Eh
.eh_frame:000000000001E85F                 db    8
.eh_frame:000000000001E860                 db  44h ; D
.eh_frame:000000000001E861                 db  0Bh
.eh_frame:000000000001E862                 db  6Dh ; m
.eh_frame:000000000001E863                 db  0Ah
.eh_frame:000000000001E864                 db  0Eh
.eh_frame:000000000001E865                 db  18h
.eh_frame:000000000001E866                 db  46h ; F
.eh_frame:000000000001E867                 db  0Eh
.eh_frame:000000000001E868                 db  10h
.eh_frame:000000000001E869                 db  41h ; A
.eh_frame:000000000001E86A                 db  0Eh
.eh_frame:000000000001E86B                 db    8
.eh_frame:000000000001E86C                 db  44h ; D
.eh_frame:000000000001E86D                 db  0Bh
.eh_frame:000000000001E86E                 db    0
.eh_frame:000000000001E86F                 db    0
.eh_frame:000000000001E870                 db  4Ch ; L
.eh_frame:000000000001E871                 db    0
.eh_frame:000000000001E872                 db    0
.eh_frame:000000000001E873                 db    0
.eh_frame:000000000001E874                 db    4
.eh_frame:000000000001E875                 db  12h
.eh_frame:000000000001E876                 db    0
.eh_frame:000000000001E877                 db    0
.eh_frame:000000000001E878                 db 0C8h
.eh_frame:000000000001E879                 db 0C2h
.eh_frame:000000000001E87A                 db 0FEh
.eh_frame:000000000001E87B                 db 0FFh
.eh_frame:000000000001E87C                 db 0ECh
.eh_frame:000000000001E87D                 db    0
.eh_frame:000000000001E87E                 db    0
.eh_frame:000000000001E87F                 db    0
.eh_frame:000000000001E880                 db    0
.eh_frame:000000000001E881                 db  42h ; B
.eh_frame:000000000001E882                 db  0Eh
.eh_frame:000000000001E883                 db  10h
.eh_frame:000000000001E884                 db  8Eh
.eh_frame:000000000001E885                 db    2
.eh_frame:000000000001E886                 db  42h ; B
.eh_frame:000000000001E887                 db  0Eh
.eh_frame:000000000001E888                 db  18h
.eh_frame:000000000001E889                 db  8Dh
.eh_frame:000000000001E88A                 db    3
.eh_frame:000000000001E88B                 db  45h ; E
.eh_frame:000000000001E88C                 db  0Eh
.eh_frame:000000000001E88D                 db  20h
.eh_frame:000000000001E88E                 db  8Ch
.eh_frame:000000000001E88F                 db    4
.eh_frame:000000000001E890                 db  41h ; A
.eh_frame:000000000001E891                 db  0Eh
.eh_frame:000000000001E892                 db  28h ; (
.eh_frame:000000000001E893                 db  86h
.eh_frame:000000000001E894                 db    5
.eh_frame:000000000001E895                 db  44h ; D
.eh_frame:000000000001E896                 db  0Eh
.eh_frame:000000000001E897                 db  30h ; 0
.eh_frame:000000000001E898                 db  83h
.eh_frame:000000000001E899                 db    6
.eh_frame:000000000001E89A                 db    2
.eh_frame:000000000001E89B                 db  71h ; q
.eh_frame:000000000001E89C                 db  0Ah
.eh_frame:000000000001E89D                 db  0Eh
.eh_frame:000000000001E89E                 db  28h ; (
.eh_frame:000000000001E89F                 db  46h ; F
.eh_frame:000000000001E8A0                 db  0Eh
.eh_frame:000000000001E8A1                 db  20h
.eh_frame:000000000001E8A2                 db  42h ; B
.eh_frame:000000000001E8A3                 db  0Eh
.eh_frame:000000000001E8A4                 db  18h
.eh_frame:000000000001E8A5                 db  42h ; B
.eh_frame:000000000001E8A6                 db  0Eh
.eh_frame:000000000001E8A7                 db  10h
.eh_frame:000000000001E8A8                 db  42h ; B
.eh_frame:000000000001E8A9                 db  0Eh
.eh_frame:000000000001E8AA                 db    8
.eh_frame:000000000001E8AB                 db  45h ; E
.eh_frame:000000000001E8AC                 db  0Bh
.eh_frame:000000000001E8AD                 db  6Eh ; n
.eh_frame:000000000001E8AE                 db  0Ah
.eh_frame:000000000001E8AF                 db  0Eh
.eh_frame:000000000001E8B0                 db  28h ; (
.eh_frame:000000000001E8B1                 db  41h ; A
.eh_frame:000000000001E8B2                 db  0Eh
.eh_frame:000000000001E8B3                 db  20h
.eh_frame:000000000001E8B4                 db  42h ; B
.eh_frame:000000000001E8B5                 db  0Eh
.eh_frame:000000000001E8B6                 db  18h
.eh_frame:000000000001E8B7                 db  42h ; B
.eh_frame:000000000001E8B8                 db  0Eh
.eh_frame:000000000001E8B9                 db  10h
.eh_frame:000000000001E8BA                 db  42h ; B
.eh_frame:000000000001E8BB                 db  0Eh
.eh_frame:000000000001E8BC                 db    8
.eh_frame:000000000001E8BD                 db  41h ; A
.eh_frame:000000000001E8BE                 db  0Bh
.eh_frame:000000000001E8BF                 db    0
.eh_frame:000000000001E8C0                 db  2Ch ; ,
.eh_frame:000000000001E8C1                 db    0
.eh_frame:000000000001E8C2                 db    0
.eh_frame:000000000001E8C3                 db    0
.eh_frame:000000000001E8C4                 db  54h ; T
.eh_frame:000000000001E8C5                 db  12h
.eh_frame:000000000001E8C6                 db    0
.eh_frame:000000000001E8C7                 db    0
.eh_frame:000000000001E8C8                 db  68h ; h
.eh_frame:000000000001E8C9                 db 0C3h
.eh_frame:000000000001E8CA                 db 0FEh
.eh_frame:000000000001E8CB                 db 0FFh
.eh_frame:000000000001E8CC                 db  6Eh ; n
.eh_frame:000000000001E8CD                 db    0
.eh_frame:000000000001E8CE                 db    0
.eh_frame:000000000001E8CF                 db    0
.eh_frame:000000000001E8D0                 db    0
.eh_frame:000000000001E8D1                 db  42h ; B
.eh_frame:000000000001E8D2                 db  0Eh
.eh_frame:000000000001E8D3                 db  10h
.eh_frame:000000000001E8D4                 db  8Ch
.eh_frame:000000000001E8D5                 db    2
.eh_frame:000000000001E8D6                 db  49h ; I
.eh_frame:000000000001E8D7                 db  0Eh
.eh_frame:000000000001E8D8                 db  18h
.eh_frame:000000000001E8D9                 db  86h
.eh_frame:000000000001E8DA                 db    3
.eh_frame:000000000001E8DB                 db  49h ; I
.eh_frame:000000000001E8DC                 db  0Eh
.eh_frame:000000000001E8DD                 db  20h
.eh_frame:000000000001E8DE                 db  83h
.eh_frame:000000000001E8DF                 db    4
.eh_frame:000000000001E8E0                 db    2
.eh_frame:000000000001E8E1                 db  4Ah ; J
.eh_frame:000000000001E8E2                 db  0Ah
.eh_frame:000000000001E8E3                 db  0Eh
.eh_frame:000000000001E8E4                 db  18h
.eh_frame:000000000001E8E5                 db  41h ; A
.eh_frame:000000000001E8E6                 db  0Eh
.eh_frame:000000000001E8E7                 db  10h
.eh_frame:000000000001E8E8                 db  42h ; B
.eh_frame:000000000001E8E9                 db  0Eh
.eh_frame:000000000001E8EA                 db    8
.eh_frame:000000000001E8EB                 db  47h ; G
.eh_frame:000000000001E8EC                 db  0Bh
.eh_frame:000000000001E8ED                 db    0
.eh_frame:000000000001E8EE                 db    0
.eh_frame:000000000001E8EF                 db    0
.eh_frame:000000000001E8F0                 db  48h ; H
.eh_frame:000000000001E8F1                 db    0
.eh_frame:000000000001E8F2                 db    0
.eh_frame:000000000001E8F3                 db    0
.eh_frame:000000000001E8F4                 db  84h
.eh_frame:000000000001E8F5                 db  12h
.eh_frame:000000000001E8F6                 db    0
.eh_frame:000000000001E8F7                 db    0
.eh_frame:000000000001E8F8                 db 0A8h
.eh_frame:000000000001E8F9                 db 0C3h
.eh_frame:000000000001E8FA                 db 0FEh
.eh_frame:000000000001E8FB                 db 0FFh
.eh_frame:000000000001E8FC                 db 0C3h
.eh_frame:000000000001E8FD                 db    1
.eh_frame:000000000001E8FE                 db    0
.eh_frame:000000000001E8FF                 db    0
.eh_frame:000000000001E900                 db    0
.eh_frame:000000000001E901                 db  42h ; B
.eh_frame:000000000001E902                 db  0Eh
.eh_frame:000000000001E903                 db  10h
.eh_frame:000000000001E904                 db  8Fh
.eh_frame:000000000001E905                 db    2
.eh_frame:000000000001E906                 db  42h ; B
.eh_frame:000000000001E907                 db  0Eh
.eh_frame:000000000001E908                 db  18h
.eh_frame:000000000001E909                 db  8Eh
.eh_frame:000000000001E90A                 db    3
.eh_frame:000000000001E90B                 db  42h ; B
.eh_frame:000000000001E90C                 db  0Eh
.eh_frame:000000000001E90D                 db  20h
.eh_frame:000000000001E90E                 db  8Dh
.eh_frame:000000000001E90F                 db    4
.eh_frame:000000000001E910                 db  42h ; B
.eh_frame:000000000001E911                 db  0Eh
.eh_frame:000000000001E912                 db  28h ; (
.eh_frame:000000000001E913                 db  8Ch
.eh_frame:000000000001E914                 db    5
.eh_frame:000000000001E915                 db  41h ; A
.eh_frame:000000000001E916                 db  0Eh
.eh_frame:000000000001E917                 db  30h ; 0
.eh_frame:000000000001E918                 db  86h
.eh_frame:000000000001E919                 db    6
.eh_frame:000000000001E91A                 db  41h ; A
.eh_frame:000000000001E91B                 db  0Eh
.eh_frame:000000000001E91C                 db  38h ; 8
.eh_frame:000000000001E91D                 db  83h
.eh_frame:000000000001E91E                 db    7
.eh_frame:000000000001E91F                 db  47h ; G
.eh_frame:000000000001E920                 db  0Eh
.eh_frame:000000000001E921                 db 0A0h
.eh_frame:000000000001E922                 db    1
.eh_frame:000000000001E923                 db    2
.eh_frame:000000000001E924                 db 0D3h
.eh_frame:000000000001E925                 db  0Ah
.eh_frame:000000000001E926                 db  0Eh
.eh_frame:000000000001E927                 db  38h ; 8
.eh_frame:000000000001E928                 db  41h ; A
.eh_frame:000000000001E929                 db  0Eh
.eh_frame:000000000001E92A                 db  30h ; 0
.eh_frame:000000000001E92B                 db  41h ; A
.eh_frame:000000000001E92C                 db  0Eh
.eh_frame:000000000001E92D                 db  28h ; (
.eh_frame:000000000001E92E                 db  42h ; B
.eh_frame:000000000001E92F                 db  0Eh
.eh_frame:000000000001E930                 db  20h
.eh_frame:000000000001E931                 db  42h ; B
.eh_frame:000000000001E932                 db  0Eh
.eh_frame:000000000001E933                 db  18h
.eh_frame:000000000001E934                 db  42h ; B
.eh_frame:000000000001E935                 db  0Eh
.eh_frame:000000000001E936                 db  10h
.eh_frame:000000000001E937                 db  42h ; B
.eh_frame:000000000001E938                 db  0Eh
.eh_frame:000000000001E939                 db    8
.eh_frame:000000000001E93A                 db  42h ; B
.eh_frame:000000000001E93B                 db  0Bh
.eh_frame:000000000001E93C                 db  48h ; H
.eh_frame:000000000001E93D                 db    0
.eh_frame:000000000001E93E                 db    0
.eh_frame:000000000001E93F                 db    0
.eh_frame:000000000001E940                 db 0D0h
.eh_frame:000000000001E941                 db  12h
.eh_frame:000000000001E942                 db    0
.eh_frame:000000000001E943                 db    0
.eh_frame:000000000001E944                 db  2Ch ; ,
.eh_frame:000000000001E945                 db 0C5h
.eh_frame:000000000001E946                 db 0FEh
.eh_frame:000000000001E947                 db 0FFh
.eh_frame:000000000001E948                 db  15h
.eh_frame:000000000001E949                 db    6
.eh_frame:000000000001E94A                 db    0
.eh_frame:000000000001E94B                 db    0
.eh_frame:000000000001E94C                 db    0
.eh_frame:000000000001E94D                 db  42h ; B
.eh_frame:000000000001E94E                 db  0Eh
.eh_frame:000000000001E94F                 db  10h
.eh_frame:000000000001E950                 db  8Fh
.eh_frame:000000000001E951                 db    2
.eh_frame:000000000001E952                 db  42h ; B
.eh_frame:000000000001E953                 db  0Eh
.eh_frame:000000000001E954                 db  18h
.eh_frame:000000000001E955                 db  8Eh
.eh_frame:000000000001E956                 db    3
.eh_frame:000000000001E957                 db  45h ; E
.eh_frame:000000000001E958                 db  0Eh
.eh_frame:000000000001E959                 db  20h
.eh_frame:000000000001E95A                 db  8Dh
.eh_frame:000000000001E95B                 db    4
.eh_frame:000000000001E95C                 db  42h ; B
.eh_frame:000000000001E95D                 db  0Eh
.eh_frame:000000000001E95E                 db  28h ; (
.eh_frame:000000000001E95F                 db  8Ch
.eh_frame:000000000001E960                 db    5
.eh_frame:000000000001E961                 db  41h ; A
.eh_frame:000000000001E962                 db  0Eh
.eh_frame:000000000001E963                 db  30h ; 0
.eh_frame:000000000001E964                 db  86h
.eh_frame:000000000001E965                 db    6
.eh_frame:000000000001E966                 db  41h ; A
.eh_frame:000000000001E967                 db  0Eh
.eh_frame:000000000001E968                 db  38h ; 8
.eh_frame:000000000001E969                 db  83h
.eh_frame:000000000001E96A                 db    7
.eh_frame:000000000001E96B                 db  47h ; G
.eh_frame:000000000001E96C                 db  0Eh
.eh_frame:000000000001E96D                 db 0E0h
.eh_frame:000000000001E96E                 db    1
.eh_frame:000000000001E96F                 db    2
.eh_frame:000000000001E970                 db  69h ; i
.eh_frame:000000000001E971                 db  0Ah
.eh_frame:000000000001E972                 db  0Eh
.eh_frame:000000000001E973                 db  38h ; 8
.eh_frame:000000000001E974                 db  41h ; A
.eh_frame:000000000001E975                 db  0Eh
.eh_frame:000000000001E976                 db  30h ; 0
.eh_frame:000000000001E977                 db  41h ; A
.eh_frame:000000000001E978                 db  0Eh
.eh_frame:000000000001E979                 db  28h ; (
.eh_frame:000000000001E97A                 db  42h ; B
.eh_frame:000000000001E97B                 db  0Eh
.eh_frame:000000000001E97C                 db  20h
.eh_frame:000000000001E97D                 db  42h ; B
.eh_frame:000000000001E97E                 db  0Eh
.eh_frame:000000000001E97F                 db  18h
.eh_frame:000000000001E980                 db  42h ; B
.eh_frame:000000000001E981                 db  0Eh
.eh_frame:000000000001E982                 db  10h
.eh_frame:000000000001E983                 db  42h ; B
.eh_frame:000000000001E984                 db  0Eh
.eh_frame:000000000001E985                 db    8
.eh_frame:000000000001E986                 db  49h ; I
.eh_frame:000000000001E987                 db  0Bh
.eh_frame:000000000001E988                 db  58h ; X
.eh_frame:000000000001E989                 db    0
.eh_frame:000000000001E98A                 db    0
.eh_frame:000000000001E98B                 db    0
.eh_frame:000000000001E98C                 db  1Ch
.eh_frame:000000000001E98D                 db  13h
.eh_frame:000000000001E98E                 db    0
.eh_frame:000000000001E98F                 db    0
.eh_frame:000000000001E990                 db    0
.eh_frame:000000000001E991                 db 0CBh
.eh_frame:000000000001E992                 db 0FEh
.eh_frame:000000000001E993                 db 0FFh
.eh_frame:000000000001E994                 db  4Eh ; N
.eh_frame:000000000001E995                 db    1
.eh_frame:000000000001E996                 db    0
.eh_frame:000000000001E997                 db    0
.eh_frame:000000000001E998                 db    0
.eh_frame:000000000001E999                 db  41h ; A
.eh_frame:000000000001E99A                 db  0Eh
.eh_frame:000000000001E99B                 db  10h
.eh_frame:000000000001E99C                 db  86h
.eh_frame:000000000001E99D                 db    2
.eh_frame:000000000001E99E                 db  41h ; A
.eh_frame:000000000001E99F                 db  0Eh
.eh_frame:000000000001E9A0                 db  18h
.eh_frame:000000000001E9A1                 db  83h
.eh_frame:000000000001E9A2                 db    3
.eh_frame:000000000001E9A3                 db  4Eh ; N
.eh_frame:000000000001E9A4                 db  0Eh
.eh_frame:000000000001E9A5                 db  20h
.eh_frame:000000000001E9A6                 db    2
.eh_frame:000000000001E9A7                 db  83h
.eh_frame:000000000001E9A8                 db  0Ah
.eh_frame:000000000001E9A9                 db  0Eh
.eh_frame:000000000001E9AA                 db  18h
.eh_frame:000000000001E9AB                 db  41h ; A
.eh_frame:000000000001E9AC                 db  0Eh
.eh_frame:000000000001E9AD                 db  10h
.eh_frame:000000000001E9AE                 db  41h ; A
.eh_frame:000000000001E9AF                 db  0Eh
.eh_frame:000000000001E9B0                 db    8
.eh_frame:000000000001E9B1                 db  4Bh ; K
.eh_frame:000000000001E9B2                 db  0Bh
.eh_frame:000000000001E9B3                 db    2
.eh_frame:000000000001E9B4                 db  61h ; a
.eh_frame:000000000001E9B5                 db  0Ah
.eh_frame:000000000001E9B6                 db  0Eh
.eh_frame:000000000001E9B7                 db  18h
.eh_frame:000000000001E9B8                 db  43h ; C
.eh_frame:000000000001E9B9                 db  0Eh
.eh_frame:000000000001E9BA                 db  10h
.eh_frame:000000000001E9BB                 db  41h ; A
.eh_frame:000000000001E9BC                 db  0Eh
.eh_frame:000000000001E9BD                 db    8
.eh_frame:000000000001E9BE                 db  4Bh ; K
.eh_frame:000000000001E9BF                 db  0Bh
.eh_frame:000000000001E9C0                 db  4Ch ; L
.eh_frame:000000000001E9C1                 db  0Ah
.eh_frame:000000000001E9C2                 db  0Eh
.eh_frame:000000000001E9C3                 db  18h
.eh_frame:000000000001E9C4                 db  43h ; C
.eh_frame:000000000001E9C5                 db  0Eh
.eh_frame:000000000001E9C6                 db  10h
.eh_frame:000000000001E9C7                 db  41h ; A
.eh_frame:000000000001E9C8                 db  0Eh
.eh_frame:000000000001E9C9                 db    8
.eh_frame:000000000001E9CA                 db  48h ; H
.eh_frame:000000000001E9CB                 db  0Bh
.eh_frame:000000000001E9CC                 db  49h ; I
.eh_frame:000000000001E9CD                 db  0Ah
.eh_frame:000000000001E9CE                 db  0Eh
.eh_frame:000000000001E9CF                 db  18h
.eh_frame:000000000001E9D0                 db  43h ; C
.eh_frame:000000000001E9D1                 db  0Eh
.eh_frame:000000000001E9D2                 db  10h
.eh_frame:000000000001E9D3                 db  41h ; A
.eh_frame:000000000001E9D4                 db  0Eh
.eh_frame:000000000001E9D5                 db    8
.eh_frame:000000000001E9D6                 db  4Bh ; K
.eh_frame:000000000001E9D7                 db  0Bh
.eh_frame:000000000001E9D8                 db  49h ; I
.eh_frame:000000000001E9D9                 db  0Eh
.eh_frame:000000000001E9DA                 db  18h
.eh_frame:000000000001E9DB                 db  43h ; C
.eh_frame:000000000001E9DC                 db  0Eh
.eh_frame:000000000001E9DD                 db  10h
.eh_frame:000000000001E9DE                 db  41h ; A
.eh_frame:000000000001E9DF                 db  0Eh
.eh_frame:000000000001E9E0                 db    8
.eh_frame:000000000001E9E1                 db    0
.eh_frame:000000000001E9E2                 db    0
.eh_frame:000000000001E9E3                 db    0
.eh_frame:000000000001E9E4                 db  28h ; (
.eh_frame:000000000001E9E5                 db    0
.eh_frame:000000000001E9E6                 db    0
.eh_frame:000000000001E9E7                 db    0
.eh_frame:000000000001E9E8                 db  78h ; x
.eh_frame:000000000001E9E9                 db  13h
.eh_frame:000000000001E9EA                 db    0
.eh_frame:000000000001E9EB                 db    0
.eh_frame:000000000001E9EC                 db 0F4h
.eh_frame:000000000001E9ED                 db 0CBh
.eh_frame:000000000001E9EE                 db 0FEh
.eh_frame:000000000001E9EF                 db 0FFh
.eh_frame:000000000001E9F0                 db  86h
.eh_frame:000000000001E9F1                 db    0
.eh_frame:000000000001E9F2                 db    0
.eh_frame:000000000001E9F3                 db    0
.eh_frame:000000000001E9F4                 db    0
.eh_frame:000000000001E9F5                 db  42h ; B
.eh_frame:000000000001E9F6                 db  0Eh
.eh_frame:000000000001E9F7                 db  10h
.eh_frame:000000000001E9F8                 db  8Ch
.eh_frame:000000000001E9F9                 db    2
.eh_frame:000000000001E9FA                 db  41h ; A
.eh_frame:000000000001E9FB                 db  0Eh
.eh_frame:000000000001E9FC                 db  18h
.eh_frame:000000000001E9FD                 db  86h
.eh_frame:000000000001E9FE                 db    3
.eh_frame:000000000001E9FF                 db  44h ; D
.eh_frame:000000000001EA00                 db  0Eh
.eh_frame:000000000001EA01                 db  20h
.eh_frame:000000000001EA02                 db  83h
.eh_frame:000000000001EA03                 db    4
.eh_frame:000000000001EA04                 db  70h ; p
.eh_frame:000000000001EA05                 db  0Ah
.eh_frame:000000000001EA06                 db  0Eh
.eh_frame:000000000001EA07                 db  18h
.eh_frame:000000000001EA08                 db  41h ; A
.eh_frame:000000000001EA09                 db  0Eh
.eh_frame:000000000001EA0A                 db  10h
.eh_frame:000000000001EA0B                 db  42h ; B
.eh_frame:000000000001EA0C                 db  0Eh
.eh_frame:000000000001EA0D                 db    8
.eh_frame:000000000001EA0E                 db  46h ; F
.eh_frame:000000000001EA0F                 db  0Bh
.eh_frame:000000000001EA10                 db  18h
.eh_frame:000000000001EA11                 db    0
.eh_frame:000000000001EA12                 db    0
.eh_frame:000000000001EA13                 db    0
.eh_frame:000000000001EA14                 db 0A4h
.eh_frame:000000000001EA15                 db  13h
.eh_frame:000000000001EA16                 db    0
.eh_frame:000000000001EA17                 db    0
.eh_frame:000000000001EA18                 db  58h ; X
.eh_frame:000000000001EA19                 db 0CCh
.eh_frame:000000000001EA1A                 db 0FEh
.eh_frame:000000000001EA1B                 db 0FFh
.eh_frame:000000000001EA1C                 db  30h ; 0
.eh_frame:000000000001EA1D                 db    0
.eh_frame:000000000001EA1E                 db    0
.eh_frame:000000000001EA1F                 db    0
.eh_frame:000000000001EA20                 db    0
.eh_frame:000000000001EA21                 db  41h ; A
.eh_frame:000000000001EA22                 db  0Eh
.eh_frame:000000000001EA23                 db  10h
.eh_frame:000000000001EA24                 db  83h
.eh_frame:000000000001EA25                 db    2
.eh_frame:000000000001EA26                 db  6Ah ; j
.eh_frame:000000000001EA27                 db  0Eh
.eh_frame:000000000001EA28                 db    8
.eh_frame:000000000001EA29                 db    0
.eh_frame:000000000001EA2A                 db    0
.eh_frame:000000000001EA2B                 db    0
.eh_frame:000000000001EA2C                 db  10h
.eh_frame:000000000001EA2D                 db    0
.eh_frame:000000000001EA2E                 db    0
.eh_frame:000000000001EA2F                 db    0
.eh_frame:000000000001EA30                 db 0C0h
.eh_frame:000000000001EA31                 db  13h
.eh_frame:000000000001EA32                 db    0
.eh_frame:000000000001EA33                 db    0
.eh_frame:000000000001EA34                 db  6Ch ; l
.eh_frame:000000000001EA35                 db 0CCh
.eh_frame:000000000001EA36                 db 0FEh
.eh_frame:000000000001EA37                 db 0FFh
.eh_frame:000000000001EA38                 db  25h ; %
.eh_frame:000000000001EA39                 db    0
.eh_frame:000000000001EA3A                 db    0
.eh_frame:000000000001EA3B                 db    0
.eh_frame:000000000001EA3C                 db    0
.eh_frame:000000000001EA3D                 db    0
.eh_frame:000000000001EA3E                 db    0
.eh_frame:000000000001EA3F                 db    0
.eh_frame:000000000001EA40                 db  14h
.eh_frame:000000000001EA41                 db    0
.eh_frame:000000000001EA42                 db    0
.eh_frame:000000000001EA43                 db    0
.eh_frame:000000000001EA44                 db 0D4h
.eh_frame:000000000001EA45                 db  13h
.eh_frame:000000000001EA46                 db    0
.eh_frame:000000000001EA47                 db    0
.eh_frame:000000000001EA48                 db  88h
.eh_frame:000000000001EA49                 db 0CCh
.eh_frame:000000000001EA4A                 db 0FEh
.eh_frame:000000000001EA4B                 db 0FFh
.eh_frame:000000000001EA4C                 db  14h
.eh_frame:000000000001EA4D                 db    0
.eh_frame:000000000001EA4E                 db    0
.eh_frame:000000000001EA4F                 db    0
.eh_frame:000000000001EA50                 db    0
.eh_frame:000000000001EA51                 db  48h ; H
.eh_frame:000000000001EA52                 db  0Eh
.eh_frame:000000000001EA53                 db  10h
.eh_frame:000000000001EA54                 db  4Bh ; K
.eh_frame:000000000001EA55                 db  0Eh
.eh_frame:000000000001EA56                 db    8
.eh_frame:000000000001EA57                 db    0
.eh_frame:000000000001EA58                 db  48h ; H
.eh_frame:000000000001EA59                 db    0
.eh_frame:000000000001EA5A                 db    0
.eh_frame:000000000001EA5B                 db    0
.eh_frame:000000000001EA5C                 db 0ECh
.eh_frame:000000000001EA5D                 db  13h
.eh_frame:000000000001EA5E                 db    0
.eh_frame:000000000001EA5F                 db    0
.eh_frame:000000000001EA60                 db  90h
.eh_frame:000000000001EA61                 db 0CCh
.eh_frame:000000000001EA62                 db 0FEh
.eh_frame:000000000001EA63                 db 0FFh
.eh_frame:000000000001EA64                 db 0CEh
.eh_frame:000000000001EA65                 db    1
.eh_frame:000000000001EA66                 db    0
.eh_frame:000000000001EA67                 db    0
.eh_frame:000000000001EA68                 db    0
.eh_frame:000000000001EA69                 db  42h ; B
.eh_frame:000000000001EA6A                 db  0Eh
.eh_frame:000000000001EA6B                 db  10h
.eh_frame:000000000001EA6C                 db  8Fh
.eh_frame:000000000001EA6D                 db    2
.eh_frame:000000000001EA6E                 db  42h ; B
.eh_frame:000000000001EA6F                 db  0Eh
.eh_frame:000000000001EA70                 db  18h
.eh_frame:000000000001EA71                 db  8Eh
.eh_frame:000000000001EA72                 db    3
.eh_frame:000000000001EA73                 db  45h ; E
.eh_frame:000000000001EA74                 db  0Eh
.eh_frame:000000000001EA75                 db  20h
.eh_frame:000000000001EA76                 db  8Dh
.eh_frame:000000000001EA77                 db    4
.eh_frame:000000000001EA78                 db  42h ; B
.eh_frame:000000000001EA79                 db  0Eh
.eh_frame:000000000001EA7A                 db  28h ; (
.eh_frame:000000000001EA7B                 db  8Ch
.eh_frame:000000000001EA7C                 db    5
.eh_frame:000000000001EA7D                 db  41h ; A
.eh_frame:000000000001EA7E                 db  0Eh
.eh_frame:000000000001EA7F                 db  30h ; 0
.eh_frame:000000000001EA80                 db  86h
.eh_frame:000000000001EA81                 db    6
.eh_frame:000000000001EA82                 db  41h ; A
.eh_frame:000000000001EA83                 db  0Eh
.eh_frame:000000000001EA84                 db  38h ; 8
.eh_frame:000000000001EA85                 db  83h
.eh_frame:000000000001EA86                 db    7
.eh_frame:000000000001EA87                 db  47h ; G
.eh_frame:000000000001EA88                 db  0Eh
.eh_frame:000000000001EA89                 db  50h ; P
.eh_frame:000000000001EA8A                 db    2
.eh_frame:000000000001EA8B                 db 0ACh
.eh_frame:000000000001EA8C                 db  0Ah
.eh_frame:000000000001EA8D                 db  0Eh
.eh_frame:000000000001EA8E                 db  38h ; 8
.eh_frame:000000000001EA8F                 db  41h ; A
.eh_frame:000000000001EA90                 db  0Eh
.eh_frame:000000000001EA91                 db  30h ; 0
.eh_frame:000000000001EA92                 db  41h ; A
.eh_frame:000000000001EA93                 db  0Eh
.eh_frame:000000000001EA94                 db  28h ; (
.eh_frame:000000000001EA95                 db  42h ; B
.eh_frame:000000000001EA96                 db  0Eh
.eh_frame:000000000001EA97                 db  20h
.eh_frame:000000000001EA98                 db  42h ; B
.eh_frame:000000000001EA99                 db  0Eh
.eh_frame:000000000001EA9A                 db  18h
.eh_frame:000000000001EA9B                 db  42h ; B
.eh_frame:000000000001EA9C                 db  0Eh
.eh_frame:000000000001EA9D                 db  10h
.eh_frame:000000000001EA9E                 db  42h ; B
.eh_frame:000000000001EA9F                 db  0Eh
.eh_frame:000000000001EAA0                 db    8
.eh_frame:000000000001EAA1                 db  46h ; F
.eh_frame:000000000001EAA2                 db  0Bh
.eh_frame:000000000001EAA3                 db    0
.eh_frame:000000000001EAA4                 db  34h ; 4
.eh_frame:000000000001EAA5                 db    0
.eh_frame:000000000001EAA6                 db    0
.eh_frame:000000000001EAA7                 db    0
.eh_frame:000000000001EAA8                 db  38h ; 8
.eh_frame:000000000001EAA9                 db  14h
.eh_frame:000000000001EAAA                 db    0
.eh_frame:000000000001EAAB                 db    0
.eh_frame:000000000001EAAC                 db  14h
.eh_frame:000000000001EAAD                 db 0CEh
.eh_frame:000000000001EAAE                 db 0FEh
.eh_frame:000000000001EAAF                 db 0FFh
.eh_frame:000000000001EAB0                 db  9Fh
.eh_frame:000000000001EAB1                 db    0
.eh_frame:000000000001EAB2                 db    0
.eh_frame:000000000001EAB3                 db    0
.eh_frame:000000000001EAB4                 db    0
.eh_frame:000000000001EAB5                 db  42h ; B
.eh_frame:000000000001EAB6                 db  0Eh
.eh_frame:000000000001EAB7                 db  10h
.eh_frame:000000000001EAB8                 db  8Dh
.eh_frame:000000000001EAB9                 db    2
.eh_frame:000000000001EABA                 db  42h ; B
.eh_frame:000000000001EABB                 db  0Eh
.eh_frame:000000000001EABC                 db  18h
.eh_frame:000000000001EABD                 db  8Ch
.eh_frame:000000000001EABE                 db    3
.eh_frame:000000000001EABF                 db  44h ; D
.eh_frame:000000000001EAC0                 db  0Eh
.eh_frame:000000000001EAC1                 db  20h
.eh_frame:000000000001EAC2                 db  86h
.eh_frame:000000000001EAC3                 db    4
.eh_frame:000000000001EAC4                 db  41h ; A
.eh_frame:000000000001EAC5                 db  0Eh
.eh_frame:000000000001EAC6                 db  28h ; (
.eh_frame:000000000001EAC7                 db  83h
.eh_frame:000000000001EAC8                 db    5
.eh_frame:000000000001EAC9                 db  51h ; Q
.eh_frame:000000000001EACA                 db  0Eh
.eh_frame:000000000001EACB                 db  30h ; 0
.eh_frame:000000000001EACC                 db    2
.eh_frame:000000000001EACD                 db  7Eh ; ~
.eh_frame:000000000001EACE                 db  0Eh
.eh_frame:000000000001EACF                 db  28h ; (
.eh_frame:000000000001EAD0                 db  41h ; A
.eh_frame:000000000001EAD1                 db  0Eh
.eh_frame:000000000001EAD2                 db  20h
.eh_frame:000000000001EAD3                 db  41h ; A
.eh_frame:000000000001EAD4                 db  0Eh
.eh_frame:000000000001EAD5                 db  18h
.eh_frame:000000000001EAD6                 db  42h ; B
.eh_frame:000000000001EAD7                 db  0Eh
.eh_frame:000000000001EAD8                 db  10h
.eh_frame:000000000001EAD9                 db  42h ; B
.eh_frame:000000000001EADA                 db  0Eh
.eh_frame:000000000001EADB                 db    8
.eh_frame:000000000001EADC                 db  48h ; H
.eh_frame:000000000001EADD                 db    0
.eh_frame:000000000001EADE                 db    0
.eh_frame:000000000001EADF                 db    0
.eh_frame:000000000001EAE0                 db  70h ; p
.eh_frame:000000000001EAE1                 db  14h
.eh_frame:000000000001EAE2                 db    0
.eh_frame:000000000001EAE3                 db    0
.eh_frame:000000000001EAE4                 db  7Ch ; |
.eh_frame:000000000001EAE5                 db 0CEh
.eh_frame:000000000001EAE6                 db 0FEh
.eh_frame:000000000001EAE7                 db 0FFh
.eh_frame:000000000001EAE8                 db  75h ; u
.eh_frame:000000000001EAE9                 db    2
.eh_frame:000000000001EAEA                 db    0
.eh_frame:000000000001EAEB                 db    0
.eh_frame:000000000001EAEC                 db    0
.eh_frame:000000000001EAED                 db  42h ; B
.eh_frame:000000000001EAEE                 db  0Eh
.eh_frame:000000000001EAEF                 db  10h
.eh_frame:000000000001EAF0                 db  8Fh
.eh_frame:000000000001EAF1                 db    2
.eh_frame:000000000001EAF2                 db  42h ; B
.eh_frame:000000000001EAF3                 db  0Eh
.eh_frame:000000000001EAF4                 db  18h
.eh_frame:000000000001EAF5                 db  8Eh
.eh_frame:000000000001EAF6                 db    3
.eh_frame:000000000001EAF7                 db  45h ; E
.eh_frame:000000000001EAF8                 db  0Eh
.eh_frame:000000000001EAF9                 db  20h
.eh_frame:000000000001EAFA                 db  8Dh
.eh_frame:000000000001EAFB                 db    4
.eh_frame:000000000001EAFC                 db  42h ; B
.eh_frame:000000000001EAFD                 db  0Eh
.eh_frame:000000000001EAFE                 db  28h ; (
.eh_frame:000000000001EAFF                 db  8Ch
.eh_frame:000000000001EB00                 db    5
.eh_frame:000000000001EB01                 db  44h ; D
.eh_frame:000000000001EB02                 db  0Eh
.eh_frame:000000000001EB03                 db  30h ; 0
.eh_frame:000000000001EB04                 db  86h
.eh_frame:000000000001EB05                 db    6
.eh_frame:000000000001EB06                 db  41h ; A
.eh_frame:000000000001EB07                 db  0Eh
.eh_frame:000000000001EB08                 db  38h ; 8
.eh_frame:000000000001EB09                 db  83h
.eh_frame:000000000001EB0A                 db    7
.eh_frame:000000000001EB0B                 db  4Ah ; J
.eh_frame:000000000001EB0C                 db  0Eh
.eh_frame:000000000001EB0D                 db  50h ; P
.eh_frame:000000000001EB0E                 db    3
.eh_frame:000000000001EB0F                 db  1Ah
.eh_frame:000000000001EB10                 db    1
.eh_frame:000000000001EB11                 db  0Ah
.eh_frame:000000000001EB12                 db  0Eh
.eh_frame:000000000001EB13                 db  38h ; 8
.eh_frame:000000000001EB14                 db  41h ; A
.eh_frame:000000000001EB15                 db  0Eh
.eh_frame:000000000001EB16                 db  30h ; 0
.eh_frame:000000000001EB17                 db  41h ; A
.eh_frame:000000000001EB18                 db  0Eh
.eh_frame:000000000001EB19                 db  28h ; (
.eh_frame:000000000001EB1A                 db  42h ; B
.eh_frame:000000000001EB1B                 db  0Eh
.eh_frame:000000000001EB1C                 db  20h
.eh_frame:000000000001EB1D                 db  42h ; B
.eh_frame:000000000001EB1E                 db  0Eh
.eh_frame:000000000001EB1F                 db  18h
.eh_frame:000000000001EB20                 db  42h ; B
.eh_frame:000000000001EB21                 db  0Eh
.eh_frame:000000000001EB22                 db  10h
.eh_frame:000000000001EB23                 db  42h ; B
.eh_frame:000000000001EB24                 db  0Eh
.eh_frame:000000000001EB25                 db    8
.eh_frame:000000000001EB26                 db  42h ; B
.eh_frame:000000000001EB27                 db  0Bh
.eh_frame:000000000001EB28                 db  18h
.eh_frame:000000000001EB29                 db    0
.eh_frame:000000000001EB2A                 db    0
.eh_frame:000000000001EB2B                 db    0
.eh_frame:000000000001EB2C                 db 0BCh
.eh_frame:000000000001EB2D                 db  14h
.eh_frame:000000000001EB2E                 db    0
.eh_frame:000000000001EB2F                 db    0
.eh_frame:000000000001EB30                 db 0B0h
.eh_frame:000000000001EB31                 db 0D0h
.eh_frame:000000000001EB32                 db 0FEh
.eh_frame:000000000001EB33                 db 0FFh
.eh_frame:000000000001EB34                 db  59h ; Y
.eh_frame:000000000001EB35                 db    0
.eh_frame:000000000001EB36                 db    0
.eh_frame:000000000001EB37                 db    0
.eh_frame:000000000001EB38                 db    0
.eh_frame:000000000001EB39                 db  41h ; A
.eh_frame:000000000001EB3A                 db  0Eh
.eh_frame:000000000001EB3B                 db  10h
.eh_frame:000000000001EB3C                 db  83h
.eh_frame:000000000001EB3D                 db    2
.eh_frame:000000000001EB3E                 db    2
.eh_frame:000000000001EB3F                 db  53h ; S
.eh_frame:000000000001EB40                 db  0Eh
.eh_frame:000000000001EB41                 db    8
.eh_frame:000000000001EB42                 db    0
.eh_frame:000000000001EB43                 db    0
.eh_frame:000000000001EB44                 db  1Ch
.eh_frame:000000000001EB45                 db    0
.eh_frame:000000000001EB46                 db    0
.eh_frame:000000000001EB47                 db    0
.eh_frame:000000000001EB48                 db 0D8h
.eh_frame:000000000001EB49                 db  14h
.eh_frame:000000000001EB4A                 db    0
.eh_frame:000000000001EB4B                 db    0
.eh_frame:000000000001EB4C                 db 0F4h
.eh_frame:000000000001EB4D                 db 0D0h
.eh_frame:000000000001EB4E                 db 0FEh
.eh_frame:000000000001EB4F                 db 0FFh
.eh_frame:000000000001EB50                 db  32h ; 2
.eh_frame:000000000001EB51                 db    0
.eh_frame:000000000001EB52                 db    0
.eh_frame:000000000001EB53                 db    0
.eh_frame:000000000001EB54                 db    0
.eh_frame:000000000001EB55                 db  41h ; A
.eh_frame:000000000001EB56                 db  0Eh
.eh_frame:000000000001EB57                 db  10h
.eh_frame:000000000001EB58                 db  83h
.eh_frame:000000000001EB59                 db    2
.eh_frame:000000000001EB5A                 db  5Fh ; _
.eh_frame:000000000001EB5B                 db  0Ah
.eh_frame:000000000001EB5C                 db  0Eh
.eh_frame:000000000001EB5D                 db    8
.eh_frame:000000000001EB5E                 db  48h ; H
.eh_frame:000000000001EB5F                 db  0Bh
.eh_frame:000000000001EB60                 db  45h ; E
.eh_frame:000000000001EB61                 db  0Eh
.eh_frame:000000000001EB62                 db    8
.eh_frame:000000000001EB63                 db    0
.eh_frame:000000000001EB64                 db  38h ; 8
.eh_frame:000000000001EB65                 db    0
.eh_frame:000000000001EB66                 db    0
.eh_frame:000000000001EB67                 db    0
.eh_frame:000000000001EB68                 db 0F8h
.eh_frame:000000000001EB69                 db  14h
.eh_frame:000000000001EB6A                 db    0
.eh_frame:000000000001EB6B                 db    0
.eh_frame:000000000001EB6C                 db  14h
.eh_frame:000000000001EB6D                 db 0D1h
.eh_frame:000000000001EB6E                 db 0FEh
.eh_frame:000000000001EB6F                 db 0FFh
.eh_frame:000000000001EB70                 db  5Fh ; _
.eh_frame:000000000001EB71                 db    1
.eh_frame:000000000001EB72                 db    0
.eh_frame:000000000001EB73                 db    0
.eh_frame:000000000001EB74                 db    0
.eh_frame:000000000001EB75                 db  42h ; B
.eh_frame:000000000001EB76                 db  0Eh
.eh_frame:000000000001EB77                 db  10h
.eh_frame:000000000001EB78                 db  8Eh
.eh_frame:000000000001EB79                 db    2
.eh_frame:000000000001EB7A                 db  42h ; B
.eh_frame:000000000001EB7B                 db  0Eh
.eh_frame:000000000001EB7C                 db  18h
.eh_frame:000000000001EB7D                 db  8Dh
.eh_frame:000000000001EB7E                 db    3
.eh_frame:000000000001EB7F                 db  42h ; B
.eh_frame:000000000001EB80                 db  0Eh
.eh_frame:000000000001EB81                 db  20h
.eh_frame:000000000001EB82                 db  8Ch
.eh_frame:000000000001EB83                 db    4
.eh_frame:000000000001EB84                 db  44h ; D
.eh_frame:000000000001EB85                 db  0Eh
.eh_frame:000000000001EB86                 db  28h ; (
.eh_frame:000000000001EB87                 db  86h
.eh_frame:000000000001EB88                 db    5
.eh_frame:000000000001EB89                 db  41h ; A
.eh_frame:000000000001EB8A                 db  0Eh
.eh_frame:000000000001EB8B                 db  30h ; 0
.eh_frame:000000000001EB8C                 db  83h
.eh_frame:000000000001EB8D                 db    6
.eh_frame:000000000001EB8E                 db    3
.eh_frame:000000000001EB8F                 db  45h ; E
.eh_frame:000000000001EB90                 db    1
.eh_frame:000000000001EB91                 db  0Eh
.eh_frame:000000000001EB92                 db  28h ; (
.eh_frame:000000000001EB93                 db  44h ; D
.eh_frame:000000000001EB94                 db  0Eh
.eh_frame:000000000001EB95                 db  20h
.eh_frame:000000000001EB96                 db  42h ; B
.eh_frame:000000000001EB97                 db  0Eh
.eh_frame:000000000001EB98                 db  18h
.eh_frame:000000000001EB99                 db  42h ; B
.eh_frame:000000000001EB9A                 db  0Eh
.eh_frame:000000000001EB9B                 db  10h
.eh_frame:000000000001EB9C                 db  42h ; B
.eh_frame:000000000001EB9D                 db  0Eh
.eh_frame:000000000001EB9E                 db    8
.eh_frame:000000000001EB9F                 db    0
.eh_frame:000000000001EBA0                 db  38h ; 8
.eh_frame:000000000001EBA1                 db    0
.eh_frame:000000000001EBA2                 db    0
.eh_frame:000000000001EBA3                 db    0
.eh_frame:000000000001EBA4                 db  34h ; 4
.eh_frame:000000000001EBA5                 db  15h
.eh_frame:000000000001EBA6                 db    0
.eh_frame:000000000001EBA7                 db    0
.eh_frame:000000000001EBA8                 db  38h ; 8
.eh_frame:000000000001EBA9                 db 0D2h
.eh_frame:000000000001EBAA                 db 0FEh
.eh_frame:000000000001EBAB                 db 0FFh
.eh_frame:000000000001EBAC                 db 0B8h
.eh_frame:000000000001EBAD                 db    0
.eh_frame:000000000001EBAE                 db    0
.eh_frame:000000000001EBAF                 db    0
.eh_frame:000000000001EBB0                 db    0
.eh_frame:000000000001EBB1                 db  42h ; B
.eh_frame:000000000001EBB2                 db  0Eh
.eh_frame:000000000001EBB3                 db  10h
.eh_frame:000000000001EBB4                 db  8Eh
.eh_frame:000000000001EBB5                 db    2
.eh_frame:000000000001EBB6                 db  42h ; B
.eh_frame:000000000001EBB7                 db  0Eh
.eh_frame:000000000001EBB8                 db  18h
.eh_frame:000000000001EBB9                 db  8Dh
.eh_frame:000000000001EBBA                 db    3
.eh_frame:000000000001EBBB                 db  45h ; E
.eh_frame:000000000001EBBC                 db  0Eh
.eh_frame:000000000001EBBD                 db  20h
.eh_frame:000000000001EBBE                 db  8Ch
.eh_frame:000000000001EBBF                 db    4
.eh_frame:000000000001EBC0                 db  41h ; A
.eh_frame:000000000001EBC1                 db  0Eh
.eh_frame:000000000001EBC2                 db  28h ; (
.eh_frame:000000000001EBC3                 db  86h
.eh_frame:000000000001EBC4                 db    5
.eh_frame:000000000001EBC5                 db  41h ; A
.eh_frame:000000000001EBC6                 db  0Eh
.eh_frame:000000000001EBC7                 db  30h ; 0
.eh_frame:000000000001EBC8                 db  83h
.eh_frame:000000000001EBC9                 db    6
.eh_frame:000000000001EBCA                 db    2
.eh_frame:000000000001EBCB                 db  8Fh
.eh_frame:000000000001EBCC                 db  0Eh
.eh_frame:000000000001EBCD                 db  28h ; (
.eh_frame:000000000001EBCE                 db  57h ; W
.eh_frame:000000000001EBCF                 db  0Eh
.eh_frame:000000000001EBD0                 db  20h
.eh_frame:000000000001EBD1                 db  42h ; B
.eh_frame:000000000001EBD2                 db  0Eh
.eh_frame:000000000001EBD3                 db  18h
.eh_frame:000000000001EBD4                 db  42h ; B
.eh_frame:000000000001EBD5                 db  0Eh
.eh_frame:000000000001EBD6                 db  10h
.eh_frame:000000000001EBD7                 db  42h ; B
.eh_frame:000000000001EBD8                 db  0Eh
.eh_frame:000000000001EBD9                 db    8
.eh_frame:000000000001EBDA                 db    0
.eh_frame:000000000001EBDB                 db    0
.eh_frame:000000000001EBDC                 db  10h
.eh_frame:000000000001EBDD                 db    0
.eh_frame:000000000001EBDE                 db    0
.eh_frame:000000000001EBDF                 db    0
.eh_frame:000000000001EBE0                 db  70h ; p
.eh_frame:000000000001EBE1                 db  15h
.eh_frame:000000000001EBE2                 db    0
.eh_frame:000000000001EBE3                 db    0
.eh_frame:000000000001EBE4                 db 0BCh
.eh_frame:000000000001EBE5                 db 0D2h
.eh_frame:000000000001EBE6                 db 0FEh
.eh_frame:000000000001EBE7                 db 0FFh
.eh_frame:000000000001EBE8                 db  4Fh ; O
.eh_frame:000000000001EBE9                 db    0
.eh_frame:000000000001EBEA                 db    0
.eh_frame:000000000001EBEB                 db    0
.eh_frame:000000000001EBEC                 db    0
.eh_frame:000000000001EBED                 db    0
.eh_frame:000000000001EBEE                 db    0
.eh_frame:000000000001EBEF                 db    0
.eh_frame:000000000001EBF0                 db  10h
.eh_frame:000000000001EBF1                 db    0
.eh_frame:000000000001EBF2                 db    0
.eh_frame:000000000001EBF3                 db    0
.eh_frame:000000000001EBF4                 db  84h
.eh_frame:000000000001EBF5                 db  15h
.eh_frame:000000000001EBF6                 db    0
.eh_frame:000000000001EBF7                 db    0
.eh_frame:000000000001EBF8                 db 0F8h
.eh_frame:000000000001EBF9                 db 0D2h
.eh_frame:000000000001EBFA                 db 0FEh
.eh_frame:000000000001EBFB                 db 0FFh
.eh_frame:000000000001EBFC                 db  53h ; S
.eh_frame:000000000001EBFD                 db    0
.eh_frame:000000000001EBFE                 db    0
.eh_frame:000000000001EBFF                 db    0
.eh_frame:000000000001EC00                 db    0
.eh_frame:000000000001EC01                 db    0
.eh_frame:000000000001EC02                 db    0
.eh_frame:000000000001EC03                 db    0
.eh_frame:000000000001EC04                 db  10h
.eh_frame:000000000001EC05                 db    0
.eh_frame:000000000001EC06                 db    0
.eh_frame:000000000001EC07                 db    0
.eh_frame:000000000001EC08                 db  98h
.eh_frame:000000000001EC09                 db  15h
.eh_frame:000000000001EC0A                 db    0
.eh_frame:000000000001EC0B                 db    0
.eh_frame:000000000001EC0C                 db  44h ; D
.eh_frame:000000000001EC0D                 db 0D3h
.eh_frame:000000000001EC0E                 db 0FEh
.eh_frame:000000000001EC0F                 db 0FFh
.eh_frame:000000000001EC10                 db  75h ; u
.eh_frame:000000000001EC11                 db    0
.eh_frame:000000000001EC12                 db    0
.eh_frame:000000000001EC13                 db    0
.eh_frame:000000000001EC14                 db    0
.eh_frame:000000000001EC15                 db    0
.eh_frame:000000000001EC16                 db    0
.eh_frame:000000000001EC17                 db    0
.eh_frame:000000000001EC18                 db  60h ; `
.eh_frame:000000000001EC19                 db    0
.eh_frame:000000000001EC1A                 db    0
.eh_frame:000000000001EC1B                 db    0
.eh_frame:000000000001EC1C                 db 0ACh
.eh_frame:000000000001EC1D                 db  15h
.eh_frame:000000000001EC1E                 db    0
.eh_frame:000000000001EC1F                 db    0
.eh_frame:000000000001EC20                 db 0B0h
.eh_frame:000000000001EC21                 db 0D3h
.eh_frame:000000000001EC22                 db 0FEh
.eh_frame:000000000001EC23                 db 0FFh
.eh_frame:000000000001EC24                 db 0F5h
.eh_frame:000000000001EC25                 db    0
.eh_frame:000000000001EC26                 db    0
.eh_frame:000000000001EC27                 db    0
.eh_frame:000000000001EC28                 db    0
.eh_frame:000000000001EC29                 db  42h ; B
.eh_frame:000000000001EC2A                 db  0Eh
.eh_frame:000000000001EC2B                 db  10h
.eh_frame:000000000001EC2C                 db  8Fh
.eh_frame:000000000001EC2D                 db    2
.eh_frame:000000000001EC2E                 db  42h ; B
.eh_frame:000000000001EC2F                 db  0Eh
.eh_frame:000000000001EC30                 db  18h
.eh_frame:000000000001EC31                 db  8Eh
.eh_frame:000000000001EC32                 db    3
.eh_frame:000000000001EC33                 db  46h ; F
.eh_frame:000000000001EC34                 db  0Eh
.eh_frame:000000000001EC35                 db  20h
.eh_frame:000000000001EC36                 db  8Dh
.eh_frame:000000000001EC37                 db    4
.eh_frame:000000000001EC38                 db  42h ; B
.eh_frame:000000000001EC39                 db  0Eh
.eh_frame:000000000001EC3A                 db  28h ; (
.eh_frame:000000000001EC3B                 db  8Ch
.eh_frame:000000000001EC3C                 db    5
.eh_frame:000000000001EC3D                 db  44h ; D
.eh_frame:000000000001EC3E                 db  0Eh
.eh_frame:000000000001EC3F                 db  30h ; 0
.eh_frame:000000000001EC40                 db  86h
.eh_frame:000000000001EC41                 db    6
.eh_frame:000000000001EC42                 db  41h ; A
.eh_frame:000000000001EC43                 db  0Eh
.eh_frame:000000000001EC44                 db  38h ; 8
.eh_frame:000000000001EC45                 db  83h
.eh_frame:000000000001EC46                 db    7
.eh_frame:000000000001EC47                 db  50h ; P
.eh_frame:000000000001EC48                 db  0Eh
.eh_frame:000000000001EC49                 db  40h ; @
.eh_frame:000000000001EC4A                 db    2
.eh_frame:000000000001EC4B                 db  85h
.eh_frame:000000000001EC4C                 db  0Ah
.eh_frame:000000000001EC4D                 db  0Eh
.eh_frame:000000000001EC4E                 db  38h ; 8
.eh_frame:000000000001EC4F                 db  41h ; A
.eh_frame:000000000001EC50                 db  0Eh
.eh_frame:000000000001EC51                 db  30h ; 0
.eh_frame:000000000001EC52                 db  41h ; A
.eh_frame:000000000001EC53                 db  0Eh
.eh_frame:000000000001EC54                 db  28h ; (
.eh_frame:000000000001EC55                 db  42h ; B
.eh_frame:000000000001EC56                 db  0Eh
.eh_frame:000000000001EC57                 db  20h
.eh_frame:000000000001EC58                 db  42h ; B
.eh_frame:000000000001EC59                 db  0Eh
.eh_frame:000000000001EC5A                 db  18h
.eh_frame:000000000001EC5B                 db  42h ; B
.eh_frame:000000000001EC5C                 db  0Eh
.eh_frame:000000000001EC5D                 db  10h
.eh_frame:000000000001EC5E                 db  42h ; B
.eh_frame:000000000001EC5F                 db  0Eh
.eh_frame:000000000001EC60                 db    8
.eh_frame:000000000001EC61                 db  48h ; H
.eh_frame:000000000001EC62                 db  0Bh
.eh_frame:000000000001EC63                 db  44h ; D
.eh_frame:000000000001EC64                 db  0Ah
.eh_frame:000000000001EC65                 db  0Eh
.eh_frame:000000000001EC66                 db  38h ; 8
.eh_frame:000000000001EC67                 db  46h ; F
.eh_frame:000000000001EC68                 db  0Eh
.eh_frame:000000000001EC69                 db  30h ; 0
.eh_frame:000000000001EC6A                 db  41h ; A
.eh_frame:000000000001EC6B                 db  0Eh
.eh_frame:000000000001EC6C                 db  28h ; (
.eh_frame:000000000001EC6D                 db  42h ; B
.eh_frame:000000000001EC6E                 db  0Eh
.eh_frame:000000000001EC6F                 db  20h
.eh_frame:000000000001EC70                 db  42h ; B
.eh_frame:000000000001EC71                 db  0Eh
.eh_frame:000000000001EC72                 db  18h
.eh_frame:000000000001EC73                 db  42h ; B
.eh_frame:000000000001EC74                 db  0Eh
.eh_frame:000000000001EC75                 db  10h
.eh_frame:000000000001EC76                 db  42h ; B
.eh_frame:000000000001EC77                 db  0Eh
.eh_frame:000000000001EC78                 db    8
.eh_frame:000000000001EC79                 db  45h ; E
.eh_frame:000000000001EC7A                 db  0Bh
.eh_frame:000000000001EC7B                 db    0
.eh_frame:000000000001EC7C                 db  10h
.eh_frame:000000000001EC7D                 db    0
.eh_frame:000000000001EC7E                 db    0
.eh_frame:000000000001EC7F                 db    0
.eh_frame:000000000001EC80                 db  10h
.eh_frame:000000000001EC81                 db  16h
.eh_frame:000000000001EC82                 db    0
.eh_frame:000000000001EC83                 db    0
.eh_frame:000000000001EC84                 db  4Ch ; L
.eh_frame:000000000001EC85                 db 0D4h
.eh_frame:000000000001EC86                 db 0FEh
.eh_frame:000000000001EC87                 db 0FFh
.eh_frame:000000000001EC88                 db  34h ; 4
.eh_frame:000000000001EC89                 db    0
.eh_frame:000000000001EC8A                 db    0
.eh_frame:000000000001EC8B                 db    0
.eh_frame:000000000001EC8C                 db    0
.eh_frame:000000000001EC8D                 db    0
.eh_frame:000000000001EC8E                 db    0
.eh_frame:000000000001EC8F                 db    0
.eh_frame:000000000001EC90                 db  10h
.eh_frame:000000000001EC91                 db    0
.eh_frame:000000000001EC92                 db    0
.eh_frame:000000000001EC93                 db    0
.eh_frame:000000000001EC94                 db  24h ; $
.eh_frame:000000000001EC95                 db  16h
.eh_frame:000000000001EC96                 db    0
.eh_frame:000000000001EC97                 db    0
.eh_frame:000000000001EC98                 db  78h ; x
.eh_frame:000000000001EC99                 db 0D4h
.eh_frame:000000000001EC9A                 db 0FEh
.eh_frame:000000000001EC9B                 db 0FFh
.eh_frame:000000000001EC9C                 db  8Bh
.eh_frame:000000000001EC9D                 db    0
.eh_frame:000000000001EC9E                 db    0
.eh_frame:000000000001EC9F                 db    0
.eh_frame:000000000001ECA0                 db    0
.eh_frame:000000000001ECA1                 db    0
.eh_frame:000000000001ECA2                 db    0
.eh_frame:000000000001ECA3                 db    0
.eh_frame:000000000001ECA4                 db  10h
.eh_frame:000000000001ECA5                 db    0
.eh_frame:000000000001ECA6                 db    0
.eh_frame:000000000001ECA7                 db    0
.eh_frame:000000000001ECA8                 db  38h ; 8
.eh_frame:000000000001ECA9                 db  16h
.eh_frame:000000000001ECAA                 db    0
.eh_frame:000000000001ECAB                 db    0
.eh_frame:000000000001ECAC                 db 0F4h
.eh_frame:000000000001ECAD                 db 0D4h
.eh_frame:000000000001ECAE                 db 0FEh
.eh_frame:000000000001ECAF                 db 0FFh
.eh_frame:000000000001ECB0                 db  57h ; W
.eh_frame:000000000001ECB1                 db    0
.eh_frame:000000000001ECB2                 db    0
.eh_frame:000000000001ECB3                 db    0
.eh_frame:000000000001ECB4                 db    0
.eh_frame:000000000001ECB5                 db    0
.eh_frame:000000000001ECB6                 db    0
.eh_frame:000000000001ECB7                 db    0
.eh_frame:000000000001ECB8                 db  4Ch ; L
.eh_frame:000000000001ECB9                 db    0
.eh_frame:000000000001ECBA                 db    0
.eh_frame:000000000001ECBB                 db    0
.eh_frame:000000000001ECBC                 db  4Ch ; L
.eh_frame:000000000001ECBD                 db  16h
.eh_frame:000000000001ECBE                 db    0
.eh_frame:000000000001ECBF                 db    0
.eh_frame:000000000001ECC0                 db  40h ; @
.eh_frame:000000000001ECC1                 db 0D5h
.eh_frame:000000000001ECC2                 db 0FEh
.eh_frame:000000000001ECC3                 db 0FFh
.eh_frame:000000000001ECC4                 db  69h ; i
.eh_frame:000000000001ECC5                 db    2
.eh_frame:000000000001ECC6                 db    0
.eh_frame:000000000001ECC7                 db    0
.eh_frame:000000000001ECC8                 db    0
.eh_frame:000000000001ECC9                 db  42h ; B
.eh_frame:000000000001ECCA                 db  0Eh
.eh_frame:000000000001ECCB                 db  10h
.eh_frame:000000000001ECCC                 db  8Fh
.eh_frame:000000000001ECCD                 db    2
.eh_frame:000000000001ECCE                 db  42h ; B
.eh_frame:000000000001ECCF                 db  0Eh
.eh_frame:000000000001ECD0                 db  18h
.eh_frame:000000000001ECD1                 db  8Eh
.eh_frame:000000000001ECD2                 db    3
.eh_frame:000000000001ECD3                 db  42h ; B
.eh_frame:000000000001ECD4                 db  0Eh
.eh_frame:000000000001ECD5                 db  20h
.eh_frame:000000000001ECD6                 db  8Dh
.eh_frame:000000000001ECD7                 db    4
.eh_frame:000000000001ECD8                 db  42h ; B
.eh_frame:000000000001ECD9                 db  0Eh
.eh_frame:000000000001ECDA                 db  28h ; (
.eh_frame:000000000001ECDB                 db  8Ch
.eh_frame:000000000001ECDC                 db    5
.eh_frame:000000000001ECDD                 db  41h ; A
.eh_frame:000000000001ECDE                 db  0Eh
.eh_frame:000000000001ECDF                 db  30h ; 0
.eh_frame:000000000001ECE0                 db  86h
.eh_frame:000000000001ECE1                 db    6
.eh_frame:000000000001ECE2                 db  41h ; A
.eh_frame:000000000001ECE3                 db  0Eh
.eh_frame:000000000001ECE4                 db  38h ; 8
.eh_frame:000000000001ECE5                 db  83h
.eh_frame:000000000001ECE6                 db    7
.eh_frame:000000000001ECE7                 db  46h ; F
.eh_frame:000000000001ECE8                 db  0Eh
.eh_frame:000000000001ECE9                 db  80h
.eh_frame:000000000001ECEA                 db    1
.eh_frame:000000000001ECEB                 db    3
.eh_frame:000000000001ECEC                 db 0D2h
.eh_frame:000000000001ECED                 db    1
.eh_frame:000000000001ECEE                 db  0Ah
.eh_frame:000000000001ECEF                 db  0Eh
.eh_frame:000000000001ECF0                 db  38h ; 8
.eh_frame:000000000001ECF1                 db  41h ; A
.eh_frame:000000000001ECF2                 db  0Eh
.eh_frame:000000000001ECF3                 db  30h ; 0
.eh_frame:000000000001ECF4                 db  41h ; A
.eh_frame:000000000001ECF5                 db  0Eh
.eh_frame:000000000001ECF6                 db  28h ; (
.eh_frame:000000000001ECF7                 db  42h ; B
.eh_frame:000000000001ECF8                 db  0Eh
.eh_frame:000000000001ECF9                 db  20h
.eh_frame:000000000001ECFA                 db  42h ; B
.eh_frame:000000000001ECFB                 db  0Eh
.eh_frame:000000000001ECFC                 db  18h
.eh_frame:000000000001ECFD                 db  42h ; B
.eh_frame:000000000001ECFE                 db  0Eh
.eh_frame:000000000001ECFF                 db  10h
.eh_frame:000000000001ED00                 db  42h ; B
.eh_frame:000000000001ED01                 db  0Eh
.eh_frame:000000000001ED02                 db    8
.eh_frame:000000000001ED03                 db  44h ; D
.eh_frame:000000000001ED04                 db  0Bh
.eh_frame:000000000001ED05                 db    0
.eh_frame:000000000001ED06                 db    0
.eh_frame:000000000001ED07                 db    0
.eh_frame:000000000001ED08                 db  34h ; 4
.eh_frame:000000000001ED09                 db    0
.eh_frame:000000000001ED0A                 db    0
.eh_frame:000000000001ED0B                 db    0
.eh_frame:000000000001ED0C                 db  9Ch
.eh_frame:000000000001ED0D                 db  16h
.eh_frame:000000000001ED0E                 db    0
.eh_frame:000000000001ED0F                 db    0
.eh_frame:000000000001ED10                 db  60h ; `
.eh_frame:000000000001ED11                 db 0D7h
.eh_frame:000000000001ED12                 db 0FEh
.eh_frame:000000000001ED13                 db 0FFh
.eh_frame:000000000001ED14                 db 0DEh
.eh_frame:000000000001ED15                 db    1
.eh_frame:000000000001ED16                 db    0
.eh_frame:000000000001ED17                 db    0
.eh_frame:000000000001ED18                 db    0
.eh_frame:000000000001ED19                 db  58h ; X
.eh_frame:000000000001ED1A                 db  0Eh
.eh_frame:000000000001ED1B                 db  10h
.eh_frame:000000000001ED1C                 db  8Ch
.eh_frame:000000000001ED1D                 db    2
.eh_frame:000000000001ED1E                 db  41h ; A
.eh_frame:000000000001ED1F                 db  0Eh
.eh_frame:000000000001ED20                 db  18h
.eh_frame:000000000001ED21                 db  86h
.eh_frame:000000000001ED22                 db    3
.eh_frame:000000000001ED23                 db  44h ; D
.eh_frame:000000000001ED24                 db  0Eh
.eh_frame:000000000001ED25                 db  20h
.eh_frame:000000000001ED26                 db  83h
.eh_frame:000000000001ED27                 db    4
.eh_frame:000000000001ED28                 db    2
.eh_frame:000000000001ED29                 db 0D0h
.eh_frame:000000000001ED2A                 db  0Eh
.eh_frame:000000000001ED2B                 db  18h
.eh_frame:000000000001ED2C                 db  41h ; A
.eh_frame:000000000001ED2D                 db  0Eh
.eh_frame:000000000001ED2E                 db  10h
.eh_frame:000000000001ED2F                 db  42h ; B
.eh_frame:000000000001ED30                 db  0Eh
.eh_frame:000000000001ED31                 db    8
.eh_frame:000000000001ED32                 db  48h ; H
.eh_frame:000000000001ED33                 db 0C3h
.eh_frame:000000000001ED34                 db 0C6h
.eh_frame:000000000001ED35                 db 0CCh
.eh_frame:000000000001ED36                 db  48h ; H
.eh_frame:000000000001ED37                 db  0Eh
.eh_frame:000000000001ED38                 db  20h
.eh_frame:000000000001ED39                 db  83h
.eh_frame:000000000001ED3A                 db    4
.eh_frame:000000000001ED3B                 db  86h
.eh_frame:000000000001ED3C                 db    3
.eh_frame:000000000001ED3D                 db  8Ch
.eh_frame:000000000001ED3E                 db    2
.eh_frame:000000000001ED3F                 db    0
.eh_frame:000000000001ED40                 db  4Ch ; L
.eh_frame:000000000001ED41                 db    0
.eh_frame:000000000001ED42                 db    0
.eh_frame:000000000001ED43                 db    0
.eh_frame:000000000001ED44                 db 0D4h
.eh_frame:000000000001ED45                 db  16h
.eh_frame:000000000001ED46                 db    0
.eh_frame:000000000001ED47                 db    0
.eh_frame:000000000001ED48                 db    8
.eh_frame:000000000001ED49                 db 0D9h
.eh_frame:000000000001ED4A                 db 0FEh
.eh_frame:000000000001ED4B                 db 0FFh
.eh_frame:000000000001ED4C                 db 0AFh
.eh_frame:000000000001ED4D                 db    2
.eh_frame:000000000001ED4E                 db    0
.eh_frame:000000000001ED4F                 db    0
.eh_frame:000000000001ED50                 db    0
.eh_frame:000000000001ED51                 db  42h ; B
.eh_frame:000000000001ED52                 db  0Eh
.eh_frame:000000000001ED53                 db  10h
.eh_frame:000000000001ED54                 db  8Fh
.eh_frame:000000000001ED55                 db    2
.eh_frame:000000000001ED56                 db  42h ; B
.eh_frame:000000000001ED57                 db  0Eh
.eh_frame:000000000001ED58                 db  18h
.eh_frame:000000000001ED59                 db  8Eh
.eh_frame:000000000001ED5A                 db    3
.eh_frame:000000000001ED5B                 db  45h ; E
.eh_frame:000000000001ED5C                 db  0Eh
.eh_frame:000000000001ED5D                 db  20h
.eh_frame:000000000001ED5E                 db  8Dh
.eh_frame:000000000001ED5F                 db    4
.eh_frame:000000000001ED60                 db  42h ; B
.eh_frame:000000000001ED61                 db  0Eh
.eh_frame:000000000001ED62                 db  28h ; (
.eh_frame:000000000001ED63                 db  8Ch
.eh_frame:000000000001ED64                 db    5
.eh_frame:000000000001ED65                 db  41h ; A
.eh_frame:000000000001ED66                 db  0Eh
.eh_frame:000000000001ED67                 db  30h ; 0
.eh_frame:000000000001ED68                 db  86h
.eh_frame:000000000001ED69                 db    6
.eh_frame:000000000001ED6A                 db  41h ; A
.eh_frame:000000000001ED6B                 db  0Eh
.eh_frame:000000000001ED6C                 db  38h ; 8
.eh_frame:000000000001ED6D                 db  83h
.eh_frame:000000000001ED6E                 db    7
.eh_frame:000000000001ED6F                 db  4Bh ; K
.eh_frame:000000000001ED70                 db  0Eh
.eh_frame:000000000001ED71                 db 0A0h
.eh_frame:000000000001ED72                 db    1
.eh_frame:000000000001ED73                 db    3
.eh_frame:000000000001ED74                 db 0A6h
.eh_frame:000000000001ED75                 db    1
.eh_frame:000000000001ED76                 db  0Ah
.eh_frame:000000000001ED77                 db  0Eh
.eh_frame:000000000001ED78                 db  38h ; 8
.eh_frame:000000000001ED79                 db  41h ; A
.eh_frame:000000000001ED7A                 db  0Eh
.eh_frame:000000000001ED7B                 db  30h ; 0
.eh_frame:000000000001ED7C                 db  41h ; A
.eh_frame:000000000001ED7D                 db  0Eh
.eh_frame:000000000001ED7E                 db  28h ; (
.eh_frame:000000000001ED7F                 db  42h ; B
.eh_frame:000000000001ED80                 db  0Eh
.eh_frame:000000000001ED81                 db  20h
.eh_frame:000000000001ED82                 db  42h ; B
.eh_frame:000000000001ED83                 db  0Eh
.eh_frame:000000000001ED84                 db  18h
.eh_frame:000000000001ED85                 db  42h ; B
.eh_frame:000000000001ED86                 db  0Eh
.eh_frame:000000000001ED87                 db  10h
.eh_frame:000000000001ED88                 db  42h ; B
.eh_frame:000000000001ED89                 db  0Eh
.eh_frame:000000000001ED8A                 db    8
.eh_frame:000000000001ED8B                 db  48h ; H
.eh_frame:000000000001ED8C                 db  0Bh
.eh_frame:000000000001ED8D                 db    0
.eh_frame:000000000001ED8E                 db    0
.eh_frame:000000000001ED8F                 db    0
.eh_frame:000000000001ED90                 db  48h ; H
.eh_frame:000000000001ED91                 db    0
.eh_frame:000000000001ED92                 db    0
.eh_frame:000000000001ED93                 db    0
.eh_frame:000000000001ED94                 db  24h ; $
.eh_frame:000000000001ED95                 db  17h
.eh_frame:000000000001ED96                 db    0
.eh_frame:000000000001ED97                 db    0
.eh_frame:000000000001ED98                 db  68h ; h
.eh_frame:000000000001ED99                 db 0DBh
.eh_frame:000000000001ED9A                 db 0FEh
.eh_frame:000000000001ED9B                 db 0FFh
.eh_frame:000000000001ED9C                 db  59h ; Y
.eh_frame:000000000001ED9D                 db    1
.eh_frame:000000000001ED9E                 db    0
.eh_frame:000000000001ED9F                 db    0
.eh_frame:000000000001EDA0                 db    0
.eh_frame:000000000001EDA1                 db  42h ; B
.eh_frame:000000000001EDA2                 db  0Eh
.eh_frame:000000000001EDA3                 db  10h
.eh_frame:000000000001EDA4                 db  8Fh
.eh_frame:000000000001EDA5                 db    2
.eh_frame:000000000001EDA6                 db  42h ; B
.eh_frame:000000000001EDA7                 db  0Eh
.eh_frame:000000000001EDA8                 db  18h
.eh_frame:000000000001EDA9                 db  8Eh
.eh_frame:000000000001EDAA                 db    3
.eh_frame:000000000001EDAB                 db  45h ; E
.eh_frame:000000000001EDAC                 db  0Eh
.eh_frame:000000000001EDAD                 db  20h
.eh_frame:000000000001EDAE                 db  8Dh
.eh_frame:000000000001EDAF                 db    4
.eh_frame:000000000001EDB0                 db  42h ; B
.eh_frame:000000000001EDB1                 db  0Eh
.eh_frame:000000000001EDB2                 db  28h ; (
.eh_frame:000000000001EDB3                 db  8Ch
.eh_frame:000000000001EDB4                 db    5
.eh_frame:000000000001EDB5                 db  44h ; D
.eh_frame:000000000001EDB6                 db  0Eh
.eh_frame:000000000001EDB7                 db  30h ; 0
.eh_frame:000000000001EDB8                 db  86h
.eh_frame:000000000001EDB9                 db    6
.eh_frame:000000000001EDBA                 db  41h ; A
.eh_frame:000000000001EDBB                 db  0Eh
.eh_frame:000000000001EDBC                 db  38h ; 8
.eh_frame:000000000001EDBD                 db  83h
.eh_frame:000000000001EDBE                 db    7
.eh_frame:000000000001EDBF                 db  49h ; I
.eh_frame:000000000001EDC0                 db  0Eh
.eh_frame:000000000001EDC1                 db  70h ; p
.eh_frame:000000000001EDC2                 db    3
.eh_frame:000000000001EDC3                 db  29h ; )
.eh_frame:000000000001EDC4                 db    1
.eh_frame:000000000001EDC5                 db  0Ah
.eh_frame:000000000001EDC6                 db  0Eh
.eh_frame:000000000001EDC7                 db  38h ; 8
.eh_frame:000000000001EDC8                 db  41h ; A
.eh_frame:000000000001EDC9                 db  0Eh
.eh_frame:000000000001EDCA                 db  30h ; 0
.eh_frame:000000000001EDCB                 db  41h ; A
.eh_frame:000000000001EDCC                 db  0Eh
.eh_frame:000000000001EDCD                 db  28h ; (
.eh_frame:000000000001EDCE                 db  42h ; B
.eh_frame:000000000001EDCF                 db  0Eh
.eh_frame:000000000001EDD0                 db  20h
.eh_frame:000000000001EDD1                 db  42h ; B
.eh_frame:000000000001EDD2                 db  0Eh
.eh_frame:000000000001EDD3                 db  18h
.eh_frame:000000000001EDD4                 db  42h ; B
.eh_frame:000000000001EDD5                 db  0Eh
.eh_frame:000000000001EDD6                 db  10h
.eh_frame:000000000001EDD7                 db  42h ; B
.eh_frame:000000000001EDD8                 db  0Eh
.eh_frame:000000000001EDD9                 db    8
.eh_frame:000000000001EDDA                 db  41h ; A
.eh_frame:000000000001EDDB                 db  0Bh
.eh_frame:000000000001EDDC                 db  4Ch ; L
.eh_frame:000000000001EDDD                 db    0
.eh_frame:000000000001EDDE                 db    0
.eh_frame:000000000001EDDF                 db    0
.eh_frame:000000000001EDE0                 db  70h ; p
.eh_frame:000000000001EDE1                 db  17h
.eh_frame:000000000001EDE2                 db    0
.eh_frame:000000000001EDE3                 db    0
.eh_frame:000000000001EDE4                 db  7Ch ; |
.eh_frame:000000000001EDE5                 db 0DCh
.eh_frame:000000000001EDE6                 db 0FEh
.eh_frame:000000000001EDE7                 db 0FFh
.eh_frame:000000000001EDE8                 db 0A8h
.eh_frame:000000000001EDE9                 db    1
.eh_frame:000000000001EDEA                 db    0
.eh_frame:000000000001EDEB                 db    0
.eh_frame:000000000001EDEC                 db    0
.eh_frame:000000000001EDED                 db  5Eh ; ^
.eh_frame:000000000001EDEE                 db  0Eh
.eh_frame:000000000001EDEF                 db  10h
.eh_frame:000000000001EDF0                 db  8Dh
.eh_frame:000000000001EDF1                 db    2
.eh_frame:000000000001EDF2                 db  42h ; B
.eh_frame:000000000001EDF3                 db  0Eh
.eh_frame:000000000001EDF4                 db  18h
.eh_frame:000000000001EDF5                 db  8Ch
.eh_frame:000000000001EDF6                 db    3
.eh_frame:000000000001EDF7                 db  45h ; E
.eh_frame:000000000001EDF8                 db  0Eh
.eh_frame:000000000001EDF9                 db  20h
.eh_frame:000000000001EDFA                 db  86h
.eh_frame:000000000001EDFB                 db    4
.eh_frame:000000000001EDFC                 db  41h ; A
.eh_frame:000000000001EDFD                 db  0Eh
.eh_frame:000000000001EDFE                 db  28h ; (
.eh_frame:000000000001EDFF                 db  83h
.eh_frame:000000000001EE00                 db    5
.eh_frame:000000000001EE01                 db  4Dh ; M
.eh_frame:000000000001EE02                 db  0Eh
.eh_frame:000000000001EE03                 db  30h ; 0
.eh_frame:000000000001EE04                 db    2
.eh_frame:000000000001EE05                 db  95h
.eh_frame:000000000001EE06                 db  0Eh
.eh_frame:000000000001EE07                 db    8
.eh_frame:000000000001EE08                 db 0C3h
.eh_frame:000000000001EE09                 db 0C6h
.eh_frame:000000000001EE0A                 db 0CCh
.eh_frame:000000000001EE0B                 db 0CDh
.eh_frame:000000000001EE0C                 db  48h ; H
.eh_frame:000000000001EE0D                 db  0Eh
.eh_frame:000000000001EE0E                 db  30h ; 0
.eh_frame:000000000001EE0F                 db  83h
.eh_frame:000000000001EE10                 db    5
.eh_frame:000000000001EE11                 db  86h
.eh_frame:000000000001EE12                 db    4
.eh_frame:000000000001EE13                 db  8Ch
.eh_frame:000000000001EE14                 db    3
.eh_frame:000000000001EE15                 db  8Dh
.eh_frame:000000000001EE16                 db    2
.eh_frame:000000000001EE17                 db    2
.eh_frame:000000000001EE18                 db  90h
.eh_frame:000000000001EE19                 db  0Ah
.eh_frame:000000000001EE1A                 db  0Eh
.eh_frame:000000000001EE1B                 db  28h ; (
.eh_frame:000000000001EE1C                 db  41h ; A
.eh_frame:000000000001EE1D                 db  0Eh
.eh_frame:000000000001EE1E                 db  20h
.eh_frame:000000000001EE1F                 db  41h ; A
.eh_frame:000000000001EE20                 db  0Eh
.eh_frame:000000000001EE21                 db  18h
.eh_frame:000000000001EE22                 db  42h ; B
.eh_frame:000000000001EE23                 db  0Eh
.eh_frame:000000000001EE24                 db  10h
.eh_frame:000000000001EE25                 db  42h ; B
.eh_frame:000000000001EE26                 db  0Eh
.eh_frame:000000000001EE27                 db    8
.eh_frame:000000000001EE28                 db  4Ah ; J
.eh_frame:000000000001EE29                 db  0Bh
.eh_frame:000000000001EE2A                 db    0
.eh_frame:000000000001EE2B                 db    0
.eh_frame:000000000001EE2C                 db  20h
.eh_frame:000000000001EE2D                 db    0
.eh_frame:000000000001EE2E                 db    0
.eh_frame:000000000001EE2F                 db    0
.eh_frame:000000000001EE30                 db 0C0h
.eh_frame:000000000001EE31                 db  17h
.eh_frame:000000000001EE32                 db    0
.eh_frame:000000000001EE33                 db    0
.eh_frame:000000000001EE34                 db 0DCh
.eh_frame:000000000001EE35                 db 0DDh
.eh_frame:000000000001EE36                 db 0FEh
.eh_frame:000000000001EE37                 db 0FFh
.eh_frame:000000000001EE38                 db 0E0h
.eh_frame:000000000001EE39                 db    0
.eh_frame:000000000001EE3A                 db    0
.eh_frame:000000000001EE3B                 db    0
.eh_frame:000000000001EE3C                 db    0
.eh_frame:000000000001EE3D                 db  41h ; A
.eh_frame:000000000001EE3E                 db  0Eh
.eh_frame:000000000001EE3F                 db  10h
.eh_frame:000000000001EE40                 db  83h
.eh_frame:000000000001EE41                 db    2
.eh_frame:000000000001EE42                 db  47h ; G
.eh_frame:000000000001EE43                 db  0Eh
.eh_frame:000000000001EE44                 db  30h ; 0
.eh_frame:000000000001EE45                 db    2
.eh_frame:000000000001EE46                 db  77h ; w
.eh_frame:000000000001EE47                 db  0Ah
.eh_frame:000000000001EE48                 db  0Eh
.eh_frame:000000000001EE49                 db  10h
.eh_frame:000000000001EE4A                 db  41h ; A
.eh_frame:000000000001EE4B                 db  0Eh
.eh_frame:000000000001EE4C                 db    8
.eh_frame:000000000001EE4D                 db  48h ; H
.eh_frame:000000000001EE4E                 db  0Bh
.eh_frame:000000000001EE4F                 db    0
.eh_frame:000000000001EE50                 db  40h ; @
.eh_frame:000000000001EE51                 db    0
.eh_frame:000000000001EE52                 db    0
.eh_frame:000000000001EE53                 db    0
.eh_frame:000000000001EE54                 db 0E4h
.eh_frame:000000000001EE55                 db  17h
.eh_frame:000000000001EE56                 db    0
.eh_frame:000000000001EE57                 db    0
.eh_frame:000000000001EE58                 db  98h
.eh_frame:000000000001EE59                 db 0DEh
.eh_frame:000000000001EE5A                 db 0FEh
.eh_frame:000000000001EE5B                 db 0FFh
.eh_frame:000000000001EE5C                 db 0D1h
.eh_frame:000000000001EE5D                 db    0
.eh_frame:000000000001EE5E                 db    0
.eh_frame:000000000001EE5F                 db    0
.eh_frame:000000000001EE60                 db    0
.eh_frame:000000000001EE61                 db  42h ; B
.eh_frame:000000000001EE62                 db  0Eh
.eh_frame:000000000001EE63                 db  10h
.eh_frame:000000000001EE64                 db  8Eh
.eh_frame:000000000001EE65                 db    2
.eh_frame:000000000001EE66                 db  42h ; B
.eh_frame:000000000001EE67                 db  0Eh
.eh_frame:000000000001EE68                 db  18h
.eh_frame:000000000001EE69                 db  8Dh
.eh_frame:000000000001EE6A                 db    3
.eh_frame:000000000001EE6B                 db  46h ; F
.eh_frame:000000000001EE6C                 db  0Eh
.eh_frame:000000000001EE6D                 db  20h
.eh_frame:000000000001EE6E                 db  8Ch
.eh_frame:000000000001EE6F                 db    4
.eh_frame:000000000001EE70                 db  41h ; A
.eh_frame:000000000001EE71                 db  0Eh
.eh_frame:000000000001EE72                 db  28h ; (
.eh_frame:000000000001EE73                 db  86h
.eh_frame:000000000001EE74                 db    5
.eh_frame:000000000001EE75                 db  48h ; H
.eh_frame:000000000001EE76                 db  0Eh
.eh_frame:000000000001EE77                 db  30h ; 0
.eh_frame:000000000001EE78                 db  83h
.eh_frame:000000000001EE79                 db    6
.eh_frame:000000000001EE7A                 db  47h ; G
.eh_frame:000000000001EE7B                 db  0Eh
.eh_frame:000000000001EE7C                 db  40h ; @
.eh_frame:000000000001EE7D                 db    2
.eh_frame:000000000001EE7E                 db  96h
.eh_frame:000000000001EE7F                 db  0Ah
.eh_frame:000000000001EE80                 db  0Eh
.eh_frame:000000000001EE81                 db  30h ; 0
.eh_frame:000000000001EE82                 db  41h ; A
.eh_frame:000000000001EE83                 db  0Eh
.eh_frame:000000000001EE84                 db  28h ; (
.eh_frame:000000000001EE85                 db  41h ; A
.eh_frame:000000000001EE86                 db  0Eh
.eh_frame:000000000001EE87                 db  20h
.eh_frame:000000000001EE88                 db  42h ; B
.eh_frame:000000000001EE89                 db  0Eh
.eh_frame:000000000001EE8A                 db  18h
.eh_frame:000000000001EE8B                 db  42h ; B
.eh_frame:000000000001EE8C                 db  0Eh
.eh_frame:000000000001EE8D                 db  10h
.eh_frame:000000000001EE8E                 db  42h ; B
.eh_frame:000000000001EE8F                 db  0Eh
.eh_frame:000000000001EE90                 db    8
.eh_frame:000000000001EE91                 db  48h ; H
.eh_frame:000000000001EE92                 db  0Bh
.eh_frame:000000000001EE93                 db    0
.eh_frame:000000000001EE94                 db  4Ch ; L
.eh_frame:000000000001EE95                 db    0
.eh_frame:000000000001EE96                 db    0
.eh_frame:000000000001EE97                 db    0
.eh_frame:000000000001EE98                 db  28h ; (
.eh_frame:000000000001EE99                 db  18h
.eh_frame:000000000001EE9A                 db    0
.eh_frame:000000000001EE9B                 db    0
.eh_frame:000000000001EE9C                 db  34h ; 4
.eh_frame:000000000001EE9D                 db 0DFh
.eh_frame:000000000001EE9E                 db 0FEh
.eh_frame:000000000001EE9F                 db 0FFh
.eh_frame:000000000001EEA0                 db  37h ; 7
.eh_frame:000000000001EEA1                 db    2
.eh_frame:000000000001EEA2                 db    0
.eh_frame:000000000001EEA3                 db    0
.eh_frame:000000000001EEA4                 db    0
.eh_frame:000000000001EEA5                 db  42h ; B
.eh_frame:000000000001EEA6                 db  0Eh
.eh_frame:000000000001EEA7                 db  10h
.eh_frame:000000000001EEA8                 db  8Fh
.eh_frame:000000000001EEA9                 db    2
.eh_frame:000000000001EEAA                 db  42h ; B
.eh_frame:000000000001EEAB                 db  0Eh
.eh_frame:000000000001EEAC                 db  18h
.eh_frame:000000000001EEAD                 db  8Eh
.eh_frame:000000000001EEAE                 db    3
.eh_frame:000000000001EEAF                 db  42h ; B
.eh_frame:000000000001EEB0                 db  0Eh
.eh_frame:000000000001EEB1                 db  20h
.eh_frame:000000000001EEB2                 db  8Dh
.eh_frame:000000000001EEB3                 db    4
.eh_frame:000000000001EEB4                 db  42h ; B
.eh_frame:000000000001EEB5                 db  0Eh
.eh_frame:000000000001EEB6                 db  28h ; (
.eh_frame:000000000001EEB7                 db  8Ch
.eh_frame:000000000001EEB8                 db    5
.eh_frame:000000000001EEB9                 db  44h ; D
.eh_frame:000000000001EEBA                 db  0Eh
.eh_frame:000000000001EEBB                 db  30h ; 0
.eh_frame:000000000001EEBC                 db  86h
.eh_frame:000000000001EEBD                 db    6
.eh_frame:000000000001EEBE                 db  41h ; A
.eh_frame:000000000001EEBF                 db  0Eh
.eh_frame:000000000001EEC0                 db  38h ; 8
.eh_frame:000000000001EEC1                 db  83h
.eh_frame:000000000001EEC2                 db    7
.eh_frame:000000000001EEC3                 db  44h ; D
.eh_frame:000000000001EEC4                 db  0Eh
.eh_frame:000000000001EEC5                 db  80h
.eh_frame:000000000001EEC6                 db    1
.eh_frame:000000000001EEC7                 db    3
.eh_frame:000000000001EEC8                 db  87h
.eh_frame:000000000001EEC9                 db    1
.eh_frame:000000000001EECA                 db  0Ah
.eh_frame:000000000001EECB                 db  0Eh
.eh_frame:000000000001EECC                 db  38h ; 8
.eh_frame:000000000001EECD                 db  41h ; A
.eh_frame:000000000001EECE                 db  0Eh
.eh_frame:000000000001EECF                 db  30h ; 0
.eh_frame:000000000001EED0                 db  41h ; A
.eh_frame:000000000001EED1                 db  0Eh
.eh_frame:000000000001EED2                 db  28h ; (
.eh_frame:000000000001EED3                 db  42h ; B
.eh_frame:000000000001EED4                 db  0Eh
.eh_frame:000000000001EED5                 db  20h
.eh_frame:000000000001EED6                 db  42h ; B
.eh_frame:000000000001EED7                 db  0Eh
.eh_frame:000000000001EED8                 db  18h
.eh_frame:000000000001EED9                 db  42h ; B
.eh_frame:000000000001EEDA                 db  0Eh
.eh_frame:000000000001EEDB                 db  10h
.eh_frame:000000000001EEDC                 db  42h ; B
.eh_frame:000000000001EEDD                 db  0Eh
.eh_frame:000000000001EEDE                 db    8
.eh_frame:000000000001EEDF                 db  46h ; F
.eh_frame:000000000001EEE0                 db  0Bh
.eh_frame:000000000001EEE1                 db    0
.eh_frame:000000000001EEE2                 db    0
.eh_frame:000000000001EEE3                 db    0
.eh_frame:000000000001EEE4                 db  28h ; (
.eh_frame:000000000001EEE5                 db    0
.eh_frame:000000000001EEE6                 db    0
.eh_frame:000000000001EEE7                 db    0
.eh_frame:000000000001EEE8                 db  78h ; x
.eh_frame:000000000001EEE9                 db  18h
.eh_frame:000000000001EEEA                 db    0
.eh_frame:000000000001EEEB                 db    0
.eh_frame:000000000001EEEC                 db  24h ; $
.eh_frame:000000000001EEED                 db 0E1h
.eh_frame:000000000001EEEE                 db 0FEh
.eh_frame:000000000001EEEF                 db 0FFh
.eh_frame:000000000001EEF0                 db 0A0h
.eh_frame:000000000001EEF1                 db    0
.eh_frame:000000000001EEF2                 db    0
.eh_frame:000000000001EEF3                 db    0
.eh_frame:000000000001EEF4                 db    0
.eh_frame:000000000001EEF5                 db  41h ; A
.eh_frame:000000000001EEF6                 db  0Eh
.eh_frame:000000000001EEF7                 db  10h
.eh_frame:000000000001EEF8                 db  86h
.eh_frame:000000000001EEF9                 db    2
.eh_frame:000000000001EEFA                 db  41h ; A
.eh_frame:000000000001EEFB                 db  0Eh
.eh_frame:000000000001EEFC                 db  18h
.eh_frame:000000000001EEFD                 db  83h
.eh_frame:000000000001EEFE                 db    3
.eh_frame:000000000001EEFF                 db  4Ah ; J
.eh_frame:000000000001EF00                 db  0Eh
.eh_frame:000000000001EF01                 db  30h ; 0
.eh_frame:000000000001EF02                 db    2
.eh_frame:000000000001EF03                 db  4Eh ; N
.eh_frame:000000000001EF04                 db  0Ah
.eh_frame:000000000001EF05                 db  0Eh
.eh_frame:000000000001EF06                 db  18h
.eh_frame:000000000001EF07                 db  41h ; A
.eh_frame:000000000001EF08                 db  0Eh
.eh_frame:000000000001EF09                 db  10h
.eh_frame:000000000001EF0A                 db  41h ; A
.eh_frame:000000000001EF0B                 db  0Eh
.eh_frame:000000000001EF0C                 db    8
.eh_frame:000000000001EF0D                 db  44h ; D
.eh_frame:000000000001EF0E                 db  0Bh
.eh_frame:000000000001EF0F                 db    0
.eh_frame:000000000001EF10                 db  38h ; 8
.eh_frame:000000000001EF11                 db    0
.eh_frame:000000000001EF12                 db    0
.eh_frame:000000000001EF13                 db    0
.eh_frame:000000000001EF14                 db 0A4h
.eh_frame:000000000001EF15                 db  18h
.eh_frame:000000000001EF16                 db    0
.eh_frame:000000000001EF17                 db    0
.eh_frame:000000000001EF18                 db  98h
.eh_frame:000000000001EF19                 db 0E1h
.eh_frame:000000000001EF1A                 db 0FEh
.eh_frame:000000000001EF1B                 db 0FFh
.eh_frame:000000000001EF1C                 db  86h
.eh_frame:000000000001EF1D                 db    0
.eh_frame:000000000001EF1E                 db    0
.eh_frame:000000000001EF1F                 db    0
.eh_frame:000000000001EF20                 db    0
.eh_frame:000000000001EF21                 db  42h ; B
.eh_frame:000000000001EF22                 db  0Eh
.eh_frame:000000000001EF23                 db  10h
.eh_frame:000000000001EF24                 db  8Ch
.eh_frame:000000000001EF25                 db    2
.eh_frame:000000000001EF26                 db  41h ; A
.eh_frame:000000000001EF27                 db  0Eh
.eh_frame:000000000001EF28                 db  18h
.eh_frame:000000000001EF29                 db  86h
.eh_frame:000000000001EF2A                 db    3
.eh_frame:000000000001EF2B                 db  41h ; A
.eh_frame:000000000001EF2C                 db  0Eh
.eh_frame:000000000001EF2D                 db  20h
.eh_frame:000000000001EF2E                 db  83h
.eh_frame:000000000001EF2F                 db    4
.eh_frame:000000000001EF30                 db    2
.eh_frame:000000000001EF31                 db  47h ; G
.eh_frame:000000000001EF32                 db  0Ah
.eh_frame:000000000001EF33                 db  0Eh
.eh_frame:000000000001EF34                 db  18h
.eh_frame:000000000001EF35                 db  41h ; A
.eh_frame:000000000001EF36                 db  0Eh
.eh_frame:000000000001EF37                 db  10h
.eh_frame:000000000001EF38                 db  42h ; B
.eh_frame:000000000001EF39                 db  0Eh
.eh_frame:000000000001EF3A                 db    8
.eh_frame:000000000001EF3B                 db  42h ; B
.eh_frame:000000000001EF3C                 db  0Bh
.eh_frame:000000000001EF3D                 db  52h ; R
.eh_frame:000000000001EF3E                 db  0Ah
.eh_frame:000000000001EF3F                 db  0Eh
.eh_frame:000000000001EF40                 db  18h
.eh_frame:000000000001EF41                 db  41h ; A
.eh_frame:000000000001EF42                 db  0Eh
.eh_frame:000000000001EF43                 db  10h
.eh_frame:000000000001EF44                 db  42h ; B
.eh_frame:000000000001EF45                 db  0Eh
.eh_frame:000000000001EF46                 db    8
.eh_frame:000000000001EF47                 db  4Bh ; K
.eh_frame:000000000001EF48                 db  0Bh
.eh_frame:000000000001EF49                 db    0
.eh_frame:000000000001EF4A                 db    0
.eh_frame:000000000001EF4B                 db    0
.eh_frame:000000000001EF4C                 db  60h ; `
.eh_frame:000000000001EF4D                 db    0
.eh_frame:000000000001EF4E                 db    0
.eh_frame:000000000001EF4F                 db    0
.eh_frame:000000000001EF50                 db 0E0h
.eh_frame:000000000001EF51                 db  18h
.eh_frame:000000000001EF52                 db    0
.eh_frame:000000000001EF53                 db    0
.eh_frame:000000000001EF54                 db 0ECh
.eh_frame:000000000001EF55                 db 0E1h
.eh_frame:000000000001EF56                 db 0FEh
.eh_frame:000000000001EF57                 db 0FFh
.eh_frame:000000000001EF58                 db  52h ; R
.eh_frame:000000000001EF59                 db    1
.eh_frame:000000000001EF5A                 db    0
.eh_frame:000000000001EF5B                 db    0
.eh_frame:000000000001EF5C                 db    0
.eh_frame:000000000001EF5D                 db  45h ; E
.eh_frame:000000000001EF5E                 db  0Eh
.eh_frame:000000000001EF5F                 db  10h
.eh_frame:000000000001EF60                 db  8Eh
.eh_frame:000000000001EF61                 db    2
.eh_frame:000000000001EF62                 db  42h ; B
.eh_frame:000000000001EF63                 db  0Eh
.eh_frame:000000000001EF64                 db  18h
.eh_frame:000000000001EF65                 db  8Dh
.eh_frame:000000000001EF66                 db    3
.eh_frame:000000000001EF67                 db  42h ; B
.eh_frame:000000000001EF68                 db  0Eh
.eh_frame:000000000001EF69                 db  20h
.eh_frame:000000000001EF6A                 db  8Ch
.eh_frame:000000000001EF6B                 db    4
.eh_frame:000000000001EF6C                 db  41h ; A
.eh_frame:000000000001EF6D                 db  0Eh
.eh_frame:000000000001EF6E                 db  28h ; (
.eh_frame:000000000001EF6F                 db  86h
.eh_frame:000000000001EF70                 db    5
.eh_frame:000000000001EF71                 db  41h ; A
.eh_frame:000000000001EF72                 db  0Eh
.eh_frame:000000000001EF73                 db  30h ; 0
.eh_frame:000000000001EF74                 db  83h
.eh_frame:000000000001EF75                 db    6
.eh_frame:000000000001EF76                 db    2
.eh_frame:000000000001EF77                 db 0C8h
.eh_frame:000000000001EF78                 db  0Ah
.eh_frame:000000000001EF79                 db  0Eh
.eh_frame:000000000001EF7A                 db  28h ; (
.eh_frame:000000000001EF7B                 db  41h ; A
.eh_frame:000000000001EF7C                 db  0Eh
.eh_frame:000000000001EF7D                 db  20h
.eh_frame:000000000001EF7E                 db  42h ; B
.eh_frame:000000000001EF7F                 db  0Eh
.eh_frame:000000000001EF80                 db  18h
.eh_frame:000000000001EF81                 db  42h ; B
.eh_frame:000000000001EF82                 db  0Eh
.eh_frame:000000000001EF83                 db  10h
.eh_frame:000000000001EF84                 db  42h ; B
.eh_frame:000000000001EF85                 db  0Eh
.eh_frame:000000000001EF86                 db    8
.eh_frame:000000000001EF87                 db  46h ; F
.eh_frame:000000000001EF88                 db  0Bh
.eh_frame:000000000001EF89                 db  44h ; D
.eh_frame:000000000001EF8A                 db  0Ah
.eh_frame:000000000001EF8B                 db  0Eh
.eh_frame:000000000001EF8C                 db  28h ; (
.eh_frame:000000000001EF8D                 db  41h ; A
.eh_frame:000000000001EF8E                 db  0Eh
.eh_frame:000000000001EF8F                 db  20h
.eh_frame:000000000001EF90                 db  42h ; B
.eh_frame:000000000001EF91                 db  0Eh
.eh_frame:000000000001EF92                 db  18h
.eh_frame:000000000001EF93                 db  42h ; B
.eh_frame:000000000001EF94                 db  0Eh
.eh_frame:000000000001EF95                 db  10h
.eh_frame:000000000001EF96                 db  42h ; B
.eh_frame:000000000001EF97                 db  0Eh
.eh_frame:000000000001EF98                 db    8
.eh_frame:000000000001EF99                 db  45h ; E
.eh_frame:000000000001EF9A                 db  0Bh
.eh_frame:000000000001EF9B                 db  4Dh ; M
.eh_frame:000000000001EF9C                 db  0Ah
.eh_frame:000000000001EF9D                 db  0Eh
.eh_frame:000000000001EF9E                 db  28h ; (
.eh_frame:000000000001EF9F                 db  41h ; A
.eh_frame:000000000001EFA0                 db  0Eh
.eh_frame:000000000001EFA1                 db  20h
.eh_frame:000000000001EFA2                 db  42h ; B
.eh_frame:000000000001EFA3                 db  0Eh
.eh_frame:000000000001EFA4                 db  18h
.eh_frame:000000000001EFA5                 db  42h ; B
.eh_frame:000000000001EFA6                 db  0Eh
.eh_frame:000000000001EFA7                 db  10h
.eh_frame:000000000001EFA8                 db  42h ; B
.eh_frame:000000000001EFA9                 db  0Eh
.eh_frame:000000000001EFAA                 db    8
.eh_frame:000000000001EFAB                 db  44h ; D
.eh_frame:000000000001EFAC                 db  0Bh
.eh_frame:000000000001EFAD                 db    0
.eh_frame:000000000001EFAE                 db    0
.eh_frame:000000000001EFAF                 db    0
.eh_frame:000000000001EFB0                 db  48h ; H
.eh_frame:000000000001EFB1                 db    0
.eh_frame:000000000001EFB2                 db    0
.eh_frame:000000000001EFB3                 db    0
.eh_frame:000000000001EFB4                 db  44h ; D
.eh_frame:000000000001EFB5                 db  19h
.eh_frame:000000000001EFB6                 db    0
.eh_frame:000000000001EFB7                 db    0
.eh_frame:000000000001EFB8                 db 0E8h
.eh_frame:000000000001EFB9                 db 0E2h
.eh_frame:000000000001EFBA                 db 0FEh
.eh_frame:000000000001EFBB                 db 0FFh
.eh_frame:000000000001EFBC                 db 0BAh
.eh_frame:000000000001EFBD                 db    2
.eh_frame:000000000001EFBE                 db    0
.eh_frame:000000000001EFBF                 db    0
.eh_frame:000000000001EFC0                 db    0
.eh_frame:000000000001EFC1                 db  42h ; B
.eh_frame:000000000001EFC2                 db  0Eh
.eh_frame:000000000001EFC3                 db  10h
.eh_frame:000000000001EFC4                 db  8Fh
.eh_frame:000000000001EFC5                 db    2
.eh_frame:000000000001EFC6                 db  42h ; B
.eh_frame:000000000001EFC7                 db  0Eh
.eh_frame:000000000001EFC8                 db  18h
.eh_frame:000000000001EFC9                 db  8Eh
.eh_frame:000000000001EFCA                 db    3
.eh_frame:000000000001EFCB                 db  42h ; B
.eh_frame:000000000001EFCC                 db  0Eh
.eh_frame:000000000001EFCD                 db  20h
.eh_frame:000000000001EFCE                 db  8Dh
.eh_frame:000000000001EFCF                 db    4
.eh_frame:000000000001EFD0                 db  42h ; B
.eh_frame:000000000001EFD1                 db  0Eh
.eh_frame:000000000001EFD2                 db  28h ; (
.eh_frame:000000000001EFD3                 db  8Ch
.eh_frame:000000000001EFD4                 db    5
.eh_frame:000000000001EFD5                 db  41h ; A
.eh_frame:000000000001EFD6                 db  0Eh
.eh_frame:000000000001EFD7                 db  30h ; 0
.eh_frame:000000000001EFD8                 db  86h
.eh_frame:000000000001EFD9                 db    6
.eh_frame:000000000001EFDA                 db  41h ; A
.eh_frame:000000000001EFDB                 db  0Eh
.eh_frame:000000000001EFDC                 db  38h ; 8
.eh_frame:000000000001EFDD                 db  83h
.eh_frame:000000000001EFDE                 db    7
.eh_frame:000000000001EFDF                 db  44h ; D
.eh_frame:000000000001EFE0                 db  0Eh
.eh_frame:000000000001EFE1                 db  60h ; `
.eh_frame:000000000001EFE2                 db    2
.eh_frame:000000000001EFE3                 db 0A2h
.eh_frame:000000000001EFE4                 db  0Ah
.eh_frame:000000000001EFE5                 db  0Eh
.eh_frame:000000000001EFE6                 db  38h ; 8
.eh_frame:000000000001EFE7                 db  44h ; D
.eh_frame:000000000001EFE8                 db  0Eh
.eh_frame:000000000001EFE9                 db  30h ; 0
.eh_frame:000000000001EFEA                 db  41h ; A
.eh_frame:000000000001EFEB                 db  0Eh
.eh_frame:000000000001EFEC                 db  28h ; (
.eh_frame:000000000001EFED                 db  42h ; B
.eh_frame:000000000001EFEE                 db  0Eh
.eh_frame:000000000001EFEF                 db  20h
.eh_frame:000000000001EFF0                 db  42h ; B
.eh_frame:000000000001EFF1                 db  0Eh
.eh_frame:000000000001EFF2                 db  18h
.eh_frame:000000000001EFF3                 db  42h ; B
.eh_frame:000000000001EFF4                 db  0Eh
.eh_frame:000000000001EFF5                 db  10h
.eh_frame:000000000001EFF6                 db  42h ; B
.eh_frame:000000000001EFF7                 db  0Eh
.eh_frame:000000000001EFF8                 db    8
.eh_frame:000000000001EFF9                 db  43h ; C
.eh_frame:000000000001EFFA                 db  0Bh
.eh_frame:000000000001EFFB                 db    0
.eh_frame:000000000001EFFC                 db  48h ; H
.eh_frame:000000000001EFFD                 db    0
.eh_frame:000000000001EFFE                 db    0
.eh_frame:000000000001EFFF                 db    0
.eh_frame:000000000001F000                 db  90h
.eh_frame:000000000001F001                 db  19h
.eh_frame:000000000001F002                 db    0
.eh_frame:000000000001F003                 db    0
.eh_frame:000000000001F004                 db  5Ch ; \
.eh_frame:000000000001F005                 db 0E5h
.eh_frame:000000000001F006                 db 0FEh
.eh_frame:000000000001F007                 db 0FFh
.eh_frame:000000000001F008                 db 0FAh
.eh_frame:000000000001F009                 db    1
.eh_frame:000000000001F00A                 db    0
.eh_frame:000000000001F00B                 db    0
.eh_frame:000000000001F00C                 db    0
.eh_frame:000000000001F00D                 db  42h ; B
.eh_frame:000000000001F00E                 db  0Eh
.eh_frame:000000000001F00F                 db  10h
.eh_frame:000000000001F010                 db  8Fh
.eh_frame:000000000001F011                 db    2
.eh_frame:000000000001F012                 db  42h ; B
.eh_frame:000000000001F013                 db  0Eh
.eh_frame:000000000001F014                 db  18h
.eh_frame:000000000001F015                 db  8Eh
.eh_frame:000000000001F016                 db    3
.eh_frame:000000000001F017                 db  42h ; B
.eh_frame:000000000001F018                 db  0Eh
.eh_frame:000000000001F019                 db  20h
.eh_frame:000000000001F01A                 db  8Dh
.eh_frame:000000000001F01B                 db    4
.eh_frame:000000000001F01C                 db  42h ; B
.eh_frame:000000000001F01D                 db  0Eh
.eh_frame:000000000001F01E                 db  28h ; (
.eh_frame:000000000001F01F                 db  8Ch
.eh_frame:000000000001F020                 db    5
.eh_frame:000000000001F021                 db  41h ; A
.eh_frame:000000000001F022                 db  0Eh
.eh_frame:000000000001F023                 db  30h ; 0
.eh_frame:000000000001F024                 db  86h
.eh_frame:000000000001F025                 db    6
.eh_frame:000000000001F026                 db  41h ; A
.eh_frame:000000000001F027                 db  0Eh
.eh_frame:000000000001F028                 db  38h ; 8
.eh_frame:000000000001F029                 db  83h
.eh_frame:000000000001F02A                 db    7
.eh_frame:000000000001F02B                 db  44h ; D
.eh_frame:000000000001F02C                 db  0Eh
.eh_frame:000000000001F02D                 db  40h ; @
.eh_frame:000000000001F02E                 db    3
.eh_frame:000000000001F02F                 db  85h
.eh_frame:000000000001F030                 db    1
.eh_frame:000000000001F031                 db  0Ah
.eh_frame:000000000001F032                 db  0Eh
.eh_frame:000000000001F033                 db  38h ; 8
.eh_frame:000000000001F034                 db  44h ; D
.eh_frame:000000000001F035                 db  0Eh
.eh_frame:000000000001F036                 db  30h ; 0
.eh_frame:000000000001F037                 db  41h ; A
.eh_frame:000000000001F038                 db  0Eh
.eh_frame:000000000001F039                 db  28h ; (
.eh_frame:000000000001F03A                 db  42h ; B
.eh_frame:000000000001F03B                 db  0Eh
.eh_frame:000000000001F03C                 db  20h
.eh_frame:000000000001F03D                 db  42h ; B
.eh_frame:000000000001F03E                 db  0Eh
.eh_frame:000000000001F03F                 db  18h
.eh_frame:000000000001F040                 db  42h ; B
.eh_frame:000000000001F041                 db  0Eh
.eh_frame:000000000001F042                 db  10h
.eh_frame:000000000001F043                 db  42h ; B
.eh_frame:000000000001F044                 db  0Eh
.eh_frame:000000000001F045                 db    8
.eh_frame:000000000001F046                 db  48h ; H
.eh_frame:000000000001F047                 db  0Bh
.eh_frame:000000000001F048                 db  48h ; H
.eh_frame:000000000001F049                 db    0
.eh_frame:000000000001F04A                 db    0
.eh_frame:000000000001F04B                 db    0
.eh_frame:000000000001F04C                 db 0DCh
.eh_frame:000000000001F04D                 db  19h
.eh_frame:000000000001F04E                 db    0
.eh_frame:000000000001F04F                 db    0
.eh_frame:000000000001F050                 db  10h
.eh_frame:000000000001F051                 db 0E7h
.eh_frame:000000000001F052                 db 0FEh
.eh_frame:000000000001F053                 db 0FFh
.eh_frame:000000000001F054                 db 0DCh
.eh_frame:000000000001F055                 db    0
.eh_frame:000000000001F056                 db    0
.eh_frame:000000000001F057                 db    0
.eh_frame:000000000001F058                 db    0
.eh_frame:000000000001F059                 db  42h ; B
.eh_frame:000000000001F05A                 db  0Eh
.eh_frame:000000000001F05B                 db  10h
.eh_frame:000000000001F05C                 db  8Fh
.eh_frame:000000000001F05D                 db    2
.eh_frame:000000000001F05E                 db  42h ; B
.eh_frame:000000000001F05F                 db  0Eh
.eh_frame:000000000001F060                 db  18h
.eh_frame:000000000001F061                 db  8Eh
.eh_frame:000000000001F062                 db    3
.eh_frame:000000000001F063                 db  42h ; B
.eh_frame:000000000001F064                 db  0Eh
.eh_frame:000000000001F065                 db  20h
.eh_frame:000000000001F066                 db  8Dh
.eh_frame:000000000001F067                 db    4
.eh_frame:000000000001F068                 db  42h ; B
.eh_frame:000000000001F069                 db  0Eh
.eh_frame:000000000001F06A                 db  28h ; (
.eh_frame:000000000001F06B                 db  8Ch
.eh_frame:000000000001F06C                 db    5
.eh_frame:000000000001F06D                 db  41h ; A
.eh_frame:000000000001F06E                 db  0Eh
.eh_frame:000000000001F06F                 db  30h ; 0
.eh_frame:000000000001F070                 db  86h
.eh_frame:000000000001F071                 db    6
.eh_frame:000000000001F072                 db  41h ; A
.eh_frame:000000000001F073                 db  0Eh
.eh_frame:000000000001F074                 db  38h ; 8
.eh_frame:000000000001F075                 db  83h
.eh_frame:000000000001F076                 db    7
.eh_frame:000000000001F077                 db  44h ; D
.eh_frame:000000000001F078                 db  0Eh
.eh_frame:000000000001F079                 db  80h
.eh_frame:000000000001F07A                 db    1
.eh_frame:000000000001F07B                 db    2
.eh_frame:000000000001F07C                 db 0BEh
.eh_frame:000000000001F07D                 db  0Ah
.eh_frame:000000000001F07E                 db  0Eh
.eh_frame:000000000001F07F                 db  38h ; 8
.eh_frame:000000000001F080                 db  41h ; A
.eh_frame:000000000001F081                 db  0Eh
.eh_frame:000000000001F082                 db  30h ; 0
.eh_frame:000000000001F083                 db  41h ; A
.eh_frame:000000000001F084                 db  0Eh
.eh_frame:000000000001F085                 db  28h ; (
.eh_frame:000000000001F086                 db  42h ; B
.eh_frame:000000000001F087                 db  0Eh
.eh_frame:000000000001F088                 db  20h
.eh_frame:000000000001F089                 db  42h ; B
.eh_frame:000000000001F08A                 db  0Eh
.eh_frame:000000000001F08B                 db  18h
.eh_frame:000000000001F08C                 db  42h ; B
.eh_frame:000000000001F08D                 db  0Eh
.eh_frame:000000000001F08E                 db  10h
.eh_frame:000000000001F08F                 db  42h ; B
.eh_frame:000000000001F090                 db  0Eh
.eh_frame:000000000001F091                 db    8
.eh_frame:000000000001F092                 db  41h ; A
.eh_frame:000000000001F093                 db  0Bh
.eh_frame:000000000001F094                 db  48h ; H
.eh_frame:000000000001F095                 db    0
.eh_frame:000000000001F096                 db    0
.eh_frame:000000000001F097                 db    0
.eh_frame:000000000001F098                 db  28h ; (
.eh_frame:000000000001F099                 db  1Ah
.eh_frame:000000000001F09A                 db    0
.eh_frame:000000000001F09B                 db    0
.eh_frame:000000000001F09C                 db 0A4h
.eh_frame:000000000001F09D                 db 0E7h
.eh_frame:000000000001F09E                 db 0FEh
.eh_frame:000000000001F09F                 db 0FFh
.eh_frame:000000000001F0A0                 db  9Eh
.eh_frame:000000000001F0A1                 db    3
.eh_frame:000000000001F0A2                 db    0
.eh_frame:000000000001F0A3                 db    0
.eh_frame:000000000001F0A4                 db    0
.eh_frame:000000000001F0A5                 db  42h ; B
.eh_frame:000000000001F0A6                 db  0Eh
.eh_frame:000000000001F0A7                 db  10h
.eh_frame:000000000001F0A8                 db  8Fh
.eh_frame:000000000001F0A9                 db    2
.eh_frame:000000000001F0AA                 db  42h ; B
.eh_frame:000000000001F0AB                 db  0Eh
.eh_frame:000000000001F0AC                 db  18h
.eh_frame:000000000001F0AD                 db  8Eh
.eh_frame:000000000001F0AE                 db    3
.eh_frame:000000000001F0AF                 db  42h ; B
.eh_frame:000000000001F0B0                 db  0Eh
.eh_frame:000000000001F0B1                 db  20h
.eh_frame:000000000001F0B2                 db  8Dh
.eh_frame:000000000001F0B3                 db    4
.eh_frame:000000000001F0B4                 db  42h ; B
.eh_frame:000000000001F0B5                 db  0Eh
.eh_frame:000000000001F0B6                 db  28h ; (
.eh_frame:000000000001F0B7                 db  8Ch
.eh_frame:000000000001F0B8                 db    5
.eh_frame:000000000001F0B9                 db  44h ; D
.eh_frame:000000000001F0BA                 db  0Eh
.eh_frame:000000000001F0BB                 db  30h ; 0
.eh_frame:000000000001F0BC                 db  86h
.eh_frame:000000000001F0BD                 db    6
.eh_frame:000000000001F0BE                 db  41h ; A
.eh_frame:000000000001F0BF                 db  0Eh
.eh_frame:000000000001F0C0                 db  38h ; 8
.eh_frame:000000000001F0C1                 db  83h
.eh_frame:000000000001F0C2                 db    7
.eh_frame:000000000001F0C3                 db  4Ch ; L
.eh_frame:000000000001F0C4                 db  0Eh
.eh_frame:000000000001F0C5                 db 0B0h
.eh_frame:000000000001F0C6                 db    1
.eh_frame:000000000001F0C7                 db    2
.eh_frame:000000000001F0C8                 db 0BEh
.eh_frame:000000000001F0C9                 db  0Ah
.eh_frame:000000000001F0CA                 db  0Eh
.eh_frame:000000000001F0CB                 db  38h ; 8
.eh_frame:000000000001F0CC                 db  41h ; A
.eh_frame:000000000001F0CD                 db  0Eh
.eh_frame:000000000001F0CE                 db  30h ; 0
.eh_frame:000000000001F0CF                 db  41h ; A
.eh_frame:000000000001F0D0                 db  0Eh
.eh_frame:000000000001F0D1                 db  28h ; (
.eh_frame:000000000001F0D2                 db  42h ; B
.eh_frame:000000000001F0D3                 db  0Eh
.eh_frame:000000000001F0D4                 db  20h
.eh_frame:000000000001F0D5                 db  42h ; B
.eh_frame:000000000001F0D6                 db  0Eh
.eh_frame:000000000001F0D7                 db  18h
.eh_frame:000000000001F0D8                 db  42h ; B
.eh_frame:000000000001F0D9                 db  0Eh
.eh_frame:000000000001F0DA                 db  10h
.eh_frame:000000000001F0DB                 db  42h ; B
.eh_frame:000000000001F0DC                 db  0Eh
.eh_frame:000000000001F0DD                 db    8
.eh_frame:000000000001F0DE                 db  47h ; G
.eh_frame:000000000001F0DF                 db  0Bh
.eh_frame:000000000001F0E0                 db  48h ; H
.eh_frame:000000000001F0E1                 db    0
.eh_frame:000000000001F0E2                 db    0
.eh_frame:000000000001F0E3                 db    0
.eh_frame:000000000001F0E4                 db  74h ; t
.eh_frame:000000000001F0E5                 db  1Ah
.eh_frame:000000000001F0E6                 db    0
.eh_frame:000000000001F0E7                 db    0
.eh_frame:000000000001F0E8                 db 0F8h
.eh_frame:000000000001F0E9                 db 0EAh
.eh_frame:000000000001F0EA                 db 0FEh
.eh_frame:000000000001F0EB                 db 0FFh
.eh_frame:000000000001F0EC                 db  41h ; A
.eh_frame:000000000001F0ED                 db    1
.eh_frame:000000000001F0EE                 db    0
.eh_frame:000000000001F0EF                 db    0
.eh_frame:000000000001F0F0                 db    0
.eh_frame:000000000001F0F1                 db  42h ; B
.eh_frame:000000000001F0F2                 db  0Eh
.eh_frame:000000000001F0F3                 db  10h
.eh_frame:000000000001F0F4                 db  8Fh
.eh_frame:000000000001F0F5                 db    2
.eh_frame:000000000001F0F6                 db  42h ; B
.eh_frame:000000000001F0F7                 db  0Eh
.eh_frame:000000000001F0F8                 db  18h
.eh_frame:000000000001F0F9                 db  8Eh
.eh_frame:000000000001F0FA                 db    3
.eh_frame:000000000001F0FB                 db  42h ; B
.eh_frame:000000000001F0FC                 db  0Eh
.eh_frame:000000000001F0FD                 db  20h
.eh_frame:000000000001F0FE                 db  8Dh
.eh_frame:000000000001F0FF                 db    4
.eh_frame:000000000001F100                 db  42h ; B
.eh_frame:000000000001F101                 db  0Eh
.eh_frame:000000000001F102                 db  28h ; (
.eh_frame:000000000001F103                 db  8Ch
.eh_frame:000000000001F104                 db    5
.eh_frame:000000000001F105                 db  41h ; A
.eh_frame:000000000001F106                 db  0Eh
.eh_frame:000000000001F107                 db  30h ; 0
.eh_frame:000000000001F108                 db  86h
.eh_frame:000000000001F109                 db    6
.eh_frame:000000000001F10A                 db  41h ; A
.eh_frame:000000000001F10B                 db  0Eh
.eh_frame:000000000001F10C                 db  38h ; 8
.eh_frame:000000000001F10D                 db  83h
.eh_frame:000000000001F10E                 db    7
.eh_frame:000000000001F10F                 db  44h ; D
.eh_frame:000000000001F110                 db  0Eh
.eh_frame:000000000001F111                 db  60h ; `
.eh_frame:000000000001F112                 db    2
.eh_frame:000000000001F113                 db 0D8h
.eh_frame:000000000001F114                 db  0Ah
.eh_frame:000000000001F115                 db  0Eh
.eh_frame:000000000001F116                 db  38h ; 8
.eh_frame:000000000001F117                 db  41h ; A
.eh_frame:000000000001F118                 db  0Eh
.eh_frame:000000000001F119                 db  30h ; 0
.eh_frame:000000000001F11A                 db  41h ; A
.eh_frame:000000000001F11B                 db  0Eh
.eh_frame:000000000001F11C                 db  28h ; (
.eh_frame:000000000001F11D                 db  42h ; B
.eh_frame:000000000001F11E                 db  0Eh
.eh_frame:000000000001F11F                 db  20h
.eh_frame:000000000001F120                 db  42h ; B
.eh_frame:000000000001F121                 db  0Eh
.eh_frame:000000000001F122                 db  18h
.eh_frame:000000000001F123                 db  42h ; B
.eh_frame:000000000001F124                 db  0Eh
.eh_frame:000000000001F125                 db  10h
.eh_frame:000000000001F126                 db  42h ; B
.eh_frame:000000000001F127                 db  0Eh
.eh_frame:000000000001F128                 db    8
.eh_frame:000000000001F129                 db  41h ; A
.eh_frame:000000000001F12A                 db  0Bh
.eh_frame:000000000001F12B                 db    0
.eh_frame:000000000001F12C                 db  40h ; @
.eh_frame:000000000001F12D                 db    0
.eh_frame:000000000001F12E                 db    0
.eh_frame:000000000001F12F                 db    0
.eh_frame:000000000001F130                 db 0C0h
.eh_frame:000000000001F131                 db  1Ah
.eh_frame:000000000001F132                 db    0
.eh_frame:000000000001F133                 db    0
.eh_frame:000000000001F134                 db 0FCh
.eh_frame:000000000001F135                 db 0EBh
.eh_frame:000000000001F136                 db 0FEh
.eh_frame:000000000001F137                 db 0FFh
.eh_frame:000000000001F138                 db 0E6h
.eh_frame:000000000001F139                 db    0
.eh_frame:000000000001F13A                 db    0
.eh_frame:000000000001F13B                 db    0
.eh_frame:000000000001F13C                 db    0
.eh_frame:000000000001F13D                 db  41h ; A
.eh_frame:000000000001F13E                 db  0Eh
.eh_frame:000000000001F13F                 db  10h
.eh_frame:000000000001F140                 db  86h
.eh_frame:000000000001F141                 db    2
.eh_frame:000000000001F142                 db  41h ; A
.eh_frame:000000000001F143                 db  0Eh
.eh_frame:000000000001F144                 db  18h
.eh_frame:000000000001F145                 db  83h
.eh_frame:000000000001F146                 db    3
.eh_frame:000000000001F147                 db  47h ; G
.eh_frame:000000000001F148                 db  0Eh
.eh_frame:000000000001F149                 db  20h
.eh_frame:000000000001F14A                 db    2
.eh_frame:000000000001F14B                 db  4Dh ; M
.eh_frame:000000000001F14C                 db  0Ah
.eh_frame:000000000001F14D                 db  0Eh
.eh_frame:000000000001F14E                 db  18h
.eh_frame:000000000001F14F                 db  41h ; A
.eh_frame:000000000001F150                 db  0Eh
.eh_frame:000000000001F151                 db  10h
.eh_frame:000000000001F152                 db  41h ; A
.eh_frame:000000000001F153                 db  0Eh
.eh_frame:000000000001F154                 db    8
.eh_frame:000000000001F155                 db  48h ; H
.eh_frame:000000000001F156                 db  0Bh
.eh_frame:000000000001F157                 db  47h ; G
.eh_frame:000000000001F158                 db  0Ah
.eh_frame:000000000001F159                 db  0Eh
.eh_frame:000000000001F15A                 db  18h
.eh_frame:000000000001F15B                 db  41h ; A
.eh_frame:000000000001F15C                 db  0Eh
.eh_frame:000000000001F15D                 db  10h
.eh_frame:000000000001F15E                 db  41h ; A
.eh_frame:000000000001F15F                 db  0Eh
.eh_frame:000000000001F160                 db    8
.eh_frame:000000000001F161                 db  47h ; G
.eh_frame:000000000001F162                 db  0Bh
.eh_frame:000000000001F163                 db  7Ch ; |
.eh_frame:000000000001F164                 db  0Ah
.eh_frame:000000000001F165                 db  0Eh
.eh_frame:000000000001F166                 db  18h
.eh_frame:000000000001F167                 db  43h ; C
.eh_frame:000000000001F168                 db  0Eh
.eh_frame:000000000001F169                 db  10h
.eh_frame:000000000001F16A                 db  41h ; A
.eh_frame:000000000001F16B                 db  0Eh
.eh_frame:000000000001F16C                 db    8
.eh_frame:000000000001F16D                 db  48h ; H
.eh_frame:000000000001F16E                 db  0Bh
.eh_frame:000000000001F16F                 db    0
.eh_frame:000000000001F170                 db  24h ; $
.eh_frame:000000000001F171                 db    0
.eh_frame:000000000001F172                 db    0
.eh_frame:000000000001F173                 db    0
.eh_frame:000000000001F174                 db    4
.eh_frame:000000000001F175                 db  1Bh
.eh_frame:000000000001F176                 db    0
.eh_frame:000000000001F177                 db    0
.eh_frame:000000000001F178                 db 0A8h
.eh_frame:000000000001F179                 db 0ECh
.eh_frame:000000000001F17A                 db 0FEh
.eh_frame:000000000001F17B                 db 0FFh
.eh_frame:000000000001F17C                 db  10h
.eh_frame:000000000001F17D                 db    1
.eh_frame:000000000001F17E                 db    0
.eh_frame:000000000001F17F                 db    0
.eh_frame:000000000001F180                 db    0
.eh_frame:000000000001F181                 db    2
.eh_frame:000000000001F182                 db  51h ; Q
.eh_frame:000000000001F183                 db  0Eh
.eh_frame:000000000001F184                 db  10h
.eh_frame:000000000001F185                 db  83h
.eh_frame:000000000001F186                 db    2
.eh_frame:000000000001F187                 db    2
.eh_frame:000000000001F188                 db  5Ch ; \
.eh_frame:000000000001F189                 db  0Eh
.eh_frame:000000000001F18A                 db    8
.eh_frame:000000000001F18B                 db  43h ; C
.eh_frame:000000000001F18C                 db 0C3h
.eh_frame:000000000001F18D                 db  78h ; x
.eh_frame:000000000001F18E                 db  0Eh
.eh_frame:000000000001F18F                 db  10h
.eh_frame:000000000001F190                 db  83h
.eh_frame:000000000001F191                 db    2
.eh_frame:000000000001F192                 db  4Ch ; L
.eh_frame:000000000001F193                 db  0Eh
.eh_frame:000000000001F194                 db    8
.eh_frame:000000000001F195                 db  44h ; D
.eh_frame:000000000001F196                 db 0C3h
.eh_frame:000000000001F197                 db    0
.eh_frame:000000000001F198                 db  34h ; 4
.eh_frame:000000000001F199                 db    0
.eh_frame:000000000001F19A                 db    0
.eh_frame:000000000001F19B                 db    0
.eh_frame:000000000001F19C                 db  2Ch ; ,
.eh_frame:000000000001F19D                 db  1Bh
.eh_frame:000000000001F19E                 db    0
.eh_frame:000000000001F19F                 db    0
.eh_frame:000000000001F1A0                 db  90h
.eh_frame:000000000001F1A1                 db 0EDh
.eh_frame:000000000001F1A2                 db 0FEh
.eh_frame:000000000001F1A3                 db 0FFh
.eh_frame:000000000001F1A4                 db 0CFh
.eh_frame:000000000001F1A5                 db    0
.eh_frame:000000000001F1A6                 db    0
.eh_frame:000000000001F1A7                 db    0
.eh_frame:000000000001F1A8                 db    0
.eh_frame:000000000001F1A9                 db  42h ; B
.eh_frame:000000000001F1AA                 db  0Eh
.eh_frame:000000000001F1AB                 db  10h
.eh_frame:000000000001F1AC                 db  8Ch
.eh_frame:000000000001F1AD                 db    2
.eh_frame:000000000001F1AE                 db  44h ; D
.eh_frame:000000000001F1AF                 db  0Eh
.eh_frame:000000000001F1B0                 db  18h
.eh_frame:000000000001F1B1                 db  86h
.eh_frame:000000000001F1B2                 db    3
.eh_frame:000000000001F1B3                 db  41h ; A
.eh_frame:000000000001F1B4                 db  0Eh
.eh_frame:000000000001F1B5                 db  20h
.eh_frame:000000000001F1B6                 db  83h
.eh_frame:000000000001F1B7                 db    4
.eh_frame:000000000001F1B8                 db    2
.eh_frame:000000000001F1B9                 db  9Fh
.eh_frame:000000000001F1BA                 db  0Ah
.eh_frame:000000000001F1BB                 db  0Eh
.eh_frame:000000000001F1BC                 db  18h
.eh_frame:000000000001F1BD                 db  41h ; A
.eh_frame:000000000001F1BE                 db  0Eh
.eh_frame:000000000001F1BF                 db  10h
.eh_frame:000000000001F1C0                 db  42h ; B
.eh_frame:000000000001F1C1                 db  0Eh
.eh_frame:000000000001F1C2                 db    8
.eh_frame:000000000001F1C3                 db  47h ; G
.eh_frame:000000000001F1C4                 db  0Bh
.eh_frame:000000000001F1C5                 db  59h ; Y
.eh_frame:000000000001F1C6                 db  0Eh
.eh_frame:000000000001F1C7                 db  18h
.eh_frame:000000000001F1C8                 db  43h ; C
.eh_frame:000000000001F1C9                 db  0Eh
.eh_frame:000000000001F1CA                 db  10h
.eh_frame:000000000001F1CB                 db  42h ; B
.eh_frame:000000000001F1CC                 db  0Eh
.eh_frame:000000000001F1CD                 db    8
.eh_frame:000000000001F1CE                 db    0
.eh_frame:000000000001F1CF                 db    0
.eh_frame:000000000001F1D0                 db  4Ch ; L
.eh_frame:000000000001F1D1                 db    0
.eh_frame:000000000001F1D2                 db    0
.eh_frame:000000000001F1D3                 db    0
.eh_frame:000000000001F1D4                 db  64h ; d
.eh_frame:000000000001F1D5                 db  1Bh
.eh_frame:000000000001F1D6                 db    0
.eh_frame:000000000001F1D7                 db    0
.eh_frame:000000000001F1D8                 db  28h ; (
.eh_frame:000000000001F1D9                 db 0EEh
.eh_frame:000000000001F1DA                 db 0FEh
.eh_frame:000000000001F1DB                 db 0FFh
.eh_frame:000000000001F1DC                 db  9Fh
.eh_frame:000000000001F1DD                 db    7
.eh_frame:000000000001F1DE                 db    0
.eh_frame:000000000001F1DF                 db    0
.eh_frame:000000000001F1E0                 db    0
.eh_frame:000000000001F1E1                 db  42h ; B
.eh_frame:000000000001F1E2                 db  0Eh
.eh_frame:000000000001F1E3                 db  10h
.eh_frame:000000000001F1E4                 db  8Fh
.eh_frame:000000000001F1E5                 db    2
.eh_frame:000000000001F1E6                 db  42h ; B
.eh_frame:000000000001F1E7                 db  0Eh
.eh_frame:000000000001F1E8                 db  18h
.eh_frame:000000000001F1E9                 db  8Eh
.eh_frame:000000000001F1EA                 db    3
.eh_frame:000000000001F1EB                 db  45h ; E
.eh_frame:000000000001F1EC                 db  0Eh
.eh_frame:000000000001F1ED                 db  20h
.eh_frame:000000000001F1EE                 db  8Dh
.eh_frame:000000000001F1EF                 db    4
.eh_frame:000000000001F1F0                 db  42h ; B
.eh_frame:000000000001F1F1                 db  0Eh
.eh_frame:000000000001F1F2                 db  28h ; (
.eh_frame:000000000001F1F3                 db  8Ch
.eh_frame:000000000001F1F4                 db    5
.eh_frame:000000000001F1F5                 db  44h ; D
.eh_frame:000000000001F1F6                 db  0Eh
.eh_frame:000000000001F1F7                 db  30h ; 0
.eh_frame:000000000001F1F8                 db  86h
.eh_frame:000000000001F1F9                 db    6
.eh_frame:000000000001F1FA                 db  41h ; A
.eh_frame:000000000001F1FB                 db  0Eh
.eh_frame:000000000001F1FC                 db  38h ; 8
.eh_frame:000000000001F1FD                 db  83h
.eh_frame:000000000001F1FE                 db    7
.eh_frame:000000000001F1FF                 db  4Ah ; J
.eh_frame:000000000001F200                 db  0Eh
.eh_frame:000000000001F201                 db  80h
.eh_frame:000000000001F202                 db    1
.eh_frame:000000000001F203                 db    3
.eh_frame:000000000001F204                 db  3Bh ; ;
.eh_frame:000000000001F205                 db    1
.eh_frame:000000000001F206                 db  0Ah
.eh_frame:000000000001F207                 db  0Eh
.eh_frame:000000000001F208                 db  38h ; 8
.eh_frame:000000000001F209                 db  41h ; A
.eh_frame:000000000001F20A                 db  0Eh
.eh_frame:000000000001F20B                 db  30h ; 0
.eh_frame:000000000001F20C                 db  41h ; A
.eh_frame:000000000001F20D                 db  0Eh
.eh_frame:000000000001F20E                 db  28h ; (
.eh_frame:000000000001F20F                 db  42h ; B
.eh_frame:000000000001F210                 db  0Eh
.eh_frame:000000000001F211                 db  20h
.eh_frame:000000000001F212                 db  42h ; B
.eh_frame:000000000001F213                 db  0Eh
.eh_frame:000000000001F214                 db  18h
.eh_frame:000000000001F215                 db  42h ; B
.eh_frame:000000000001F216                 db  0Eh
.eh_frame:000000000001F217                 db  10h
.eh_frame:000000000001F218                 db  42h ; B
.eh_frame:000000000001F219                 db  0Eh
.eh_frame:000000000001F21A                 db    8
.eh_frame:000000000001F21B                 db  41h ; A
.eh_frame:000000000001F21C                 db  0Bh
.eh_frame:000000000001F21D                 db    0
.eh_frame:000000000001F21E                 db    0
.eh_frame:000000000001F21F                 db    0
.eh_frame:000000000001F220                 db  4Ch ; L
.eh_frame:000000000001F221                 db    0
.eh_frame:000000000001F222                 db    0
.eh_frame:000000000001F223                 db    0
.eh_frame:000000000001F224                 db 0B4h
.eh_frame:000000000001F225                 db  1Bh
.eh_frame:000000000001F226                 db    0
.eh_frame:000000000001F227                 db    0
.eh_frame:000000000001F228                 db  78h ; x
.eh_frame:000000000001F229                 db 0F5h
.eh_frame:000000000001F22A                 db 0FEh
.eh_frame:000000000001F22B                 db 0FFh
.eh_frame:000000000001F22C                 db  3Bh ; ;
.eh_frame:000000000001F22D                 db    2
.eh_frame:000000000001F22E                 db    0
.eh_frame:000000000001F22F                 db    0
.eh_frame:000000000001F230                 db    0
.eh_frame:000000000001F231                 db  42h ; B
.eh_frame:000000000001F232                 db  0Eh
.eh_frame:000000000001F233                 db  10h
.eh_frame:000000000001F234                 db  8Fh
.eh_frame:000000000001F235                 db    2
.eh_frame:000000000001F236                 db  42h ; B
.eh_frame:000000000001F237                 db  0Eh
.eh_frame:000000000001F238                 db  18h
.eh_frame:000000000001F239                 db  8Eh
.eh_frame:000000000001F23A                 db    3
.eh_frame:000000000001F23B                 db  45h ; E
.eh_frame:000000000001F23C                 db  0Eh
.eh_frame:000000000001F23D                 db  20h
.eh_frame:000000000001F23E                 db  8Dh
.eh_frame:000000000001F23F                 db    4
.eh_frame:000000000001F240                 db  42h ; B
.eh_frame:000000000001F241                 db  0Eh
.eh_frame:000000000001F242                 db  28h ; (
.eh_frame:000000000001F243                 db  8Ch
.eh_frame:000000000001F244                 db    5
.eh_frame:000000000001F245                 db  45h ; E
.eh_frame:000000000001F246                 db  0Eh
.eh_frame:000000000001F247                 db  30h ; 0
.eh_frame:000000000001F248                 db  86h
.eh_frame:000000000001F249                 db    6
.eh_frame:000000000001F24A                 db  41h ; A
.eh_frame:000000000001F24B                 db  0Eh
.eh_frame:000000000001F24C                 db  38h ; 8
.eh_frame:000000000001F24D                 db  83h
.eh_frame:000000000001F24E                 db    7
.eh_frame:000000000001F24F                 db  48h ; H
.eh_frame:000000000001F250                 db  0Eh
.eh_frame:000000000001F251                 db  80h
.eh_frame:000000000001F252                 db    1
.eh_frame:000000000001F253                 db    3
.eh_frame:000000000001F254                 db 0F3h
.eh_frame:000000000001F255                 db    1
.eh_frame:000000000001F256                 db  0Ah
.eh_frame:000000000001F257                 db  0Eh
.eh_frame:000000000001F258                 db  38h ; 8
.eh_frame:000000000001F259                 db  41h ; A
.eh_frame:000000000001F25A                 db  0Eh
.eh_frame:000000000001F25B                 db  30h ; 0
.eh_frame:000000000001F25C                 db  41h ; A
.eh_frame:000000000001F25D                 db  0Eh
.eh_frame:000000000001F25E                 db  28h ; (
.eh_frame:000000000001F25F                 db  42h ; B
.eh_frame:000000000001F260                 db  0Eh
.eh_frame:000000000001F261                 db  20h
.eh_frame:000000000001F262                 db  42h ; B
.eh_frame:000000000001F263                 db  0Eh
.eh_frame:000000000001F264                 db  18h
.eh_frame:000000000001F265                 db  42h ; B
.eh_frame:000000000001F266                 db  0Eh
.eh_frame:000000000001F267                 db  10h
.eh_frame:000000000001F268                 db  42h ; B
.eh_frame:000000000001F269                 db  0Eh
.eh_frame:000000000001F26A                 db    8
.eh_frame:000000000001F26B                 db  4Ah ; J
.eh_frame:000000000001F26C                 db  0Bh
.eh_frame:000000000001F26D                 db    0
.eh_frame:000000000001F26E                 db    0
.eh_frame:000000000001F26F                 db    0
.eh_frame:000000000001F270                 db  4Ch ; L
.eh_frame:000000000001F271                 db    0
.eh_frame:000000000001F272                 db    0
.eh_frame:000000000001F273                 db    0
.eh_frame:000000000001F274                 db    4
.eh_frame:000000000001F275                 db  1Ch
.eh_frame:000000000001F276                 db    0
.eh_frame:000000000001F277                 db    0
.eh_frame:000000000001F278                 db  68h ; h
.eh_frame:000000000001F279                 db 0F7h
.eh_frame:000000000001F27A                 db 0FEh
.eh_frame:000000000001F27B                 db 0FFh
.eh_frame:000000000001F27C                 db  91h
.eh_frame:000000000001F27D                 db  0Bh
.eh_frame:000000000001F27E                 db    0
.eh_frame:000000000001F27F                 db    0
.eh_frame:000000000001F280                 db    0
.eh_frame:000000000001F281                 db  42h ; B
.eh_frame:000000000001F282                 db  0Eh
.eh_frame:000000000001F283                 db  10h
.eh_frame:000000000001F284                 db  8Fh
.eh_frame:000000000001F285                 db    2
.eh_frame:000000000001F286                 db  42h ; B
.eh_frame:000000000001F287                 db  0Eh
.eh_frame:000000000001F288                 db  18h
.eh_frame:000000000001F289                 db  8Eh
.eh_frame:000000000001F28A                 db    3
.eh_frame:000000000001F28B                 db  45h ; E
.eh_frame:000000000001F28C                 db  0Eh
.eh_frame:000000000001F28D                 db  20h
.eh_frame:000000000001F28E                 db  8Dh
.eh_frame:000000000001F28F                 db    4
.eh_frame:000000000001F290                 db  42h ; B
.eh_frame:000000000001F291                 db  0Eh
.eh_frame:000000000001F292                 db  28h ; (
.eh_frame:000000000001F293                 db  8Ch
.eh_frame:000000000001F294                 db    5
.eh_frame:000000000001F295                 db  46h ; F
.eh_frame:000000000001F296                 db  0Eh
.eh_frame:000000000001F297                 db  30h ; 0
.eh_frame:000000000001F298                 db  86h
.eh_frame:000000000001F299                 db    6
.eh_frame:000000000001F29A                 db  41h ; A
.eh_frame:000000000001F29B                 db  0Eh
.eh_frame:000000000001F29C                 db  38h ; 8
.eh_frame:000000000001F29D                 db  83h
.eh_frame:000000000001F29E                 db    7
.eh_frame:000000000001F29F                 db  47h ; G
.eh_frame:000000000001F2A0                 db  0Eh
.eh_frame:000000000001F2A1                 db 0C0h
.eh_frame:000000000001F2A2                 db    2
.eh_frame:000000000001F2A3                 db    3
.eh_frame:000000000001F2A4                 db  17h
.eh_frame:000000000001F2A5                 db    4
.eh_frame:000000000001F2A6                 db  0Ah
.eh_frame:000000000001F2A7                 db  0Eh
.eh_frame:000000000001F2A8                 db  38h ; 8
.eh_frame:000000000001F2A9                 db  41h ; A
.eh_frame:000000000001F2AA                 db  0Eh
.eh_frame:000000000001F2AB                 db  30h ; 0
.eh_frame:000000000001F2AC                 db  41h ; A
.eh_frame:000000000001F2AD                 db  0Eh
.eh_frame:000000000001F2AE                 db  28h ; (
.eh_frame:000000000001F2AF                 db  42h ; B
.eh_frame:000000000001F2B0                 db  0Eh
.eh_frame:000000000001F2B1                 db  20h
.eh_frame:000000000001F2B2                 db  42h ; B
.eh_frame:000000000001F2B3                 db  0Eh
.eh_frame:000000000001F2B4                 db  18h
.eh_frame:000000000001F2B5                 db  42h ; B
.eh_frame:000000000001F2B6                 db  0Eh
.eh_frame:000000000001F2B7                 db  10h
.eh_frame:000000000001F2B8                 db  42h ; B
.eh_frame:000000000001F2B9                 db  0Eh
.eh_frame:000000000001F2BA                 db    8
.eh_frame:000000000001F2BB                 db  46h ; F
.eh_frame:000000000001F2BC                 db  0Bh
.eh_frame:000000000001F2BD                 db    0
.eh_frame:000000000001F2BE                 db    0
.eh_frame:000000000001F2BF                 db    0
.eh_frame:000000000001F2C0                 db  30h ; 0
.eh_frame:000000000001F2C1                 db    0
.eh_frame:000000000001F2C2                 db    0
.eh_frame:000000000001F2C3                 db    0
.eh_frame:000000000001F2C4                 db  54h ; T
.eh_frame:000000000001F2C5                 db  1Ch
.eh_frame:000000000001F2C6                 db    0
.eh_frame:000000000001F2C7                 db    0
.eh_frame:000000000001F2C8                 db 0B8h
.eh_frame:000000000001F2C9                 db    2
.eh_frame:000000000001F2CA                 db 0FFh
.eh_frame:000000000001F2CB                 db 0FFh
.eh_frame:000000000001F2CC                 db  87h
.eh_frame:000000000001F2CD                 db    0
.eh_frame:000000000001F2CE                 db    0
.eh_frame:000000000001F2CF                 db    0
.eh_frame:000000000001F2D0                 db    0
.eh_frame:000000000001F2D1                 db  47h ; G
.eh_frame:000000000001F2D2                 db  0Eh
.eh_frame:000000000001F2D3                 db  10h
.eh_frame:000000000001F2D4                 db  86h
.eh_frame:000000000001F2D5                 db    2
.eh_frame:000000000001F2D6                 db  41h ; A
.eh_frame:000000000001F2D7                 db  0Eh
.eh_frame:000000000001F2D8                 db  18h
.eh_frame:000000000001F2D9                 db  83h
.eh_frame:000000000001F2DA                 db    3
.eh_frame:000000000001F2DB                 db  4Ah ; J
.eh_frame:000000000001F2DC                 db  0Eh
.eh_frame:000000000001F2DD                 db  20h
.eh_frame:000000000001F2DE                 db    2
.eh_frame:000000000001F2DF                 db  4Eh ; N
.eh_frame:000000000001F2E0                 db  0Eh
.eh_frame:000000000001F2E1                 db  18h
.eh_frame:000000000001F2E2                 db  41h ; A
.eh_frame:000000000001F2E3                 db  0Eh
.eh_frame:000000000001F2E4                 db  10h
.eh_frame:000000000001F2E5                 db  41h ; A
.eh_frame:000000000001F2E6                 db  0Eh
.eh_frame:000000000001F2E7                 db    8
.eh_frame:000000000001F2E8                 db  46h ; F
.eh_frame:000000000001F2E9                 db 0C3h
.eh_frame:000000000001F2EA                 db 0C6h
.eh_frame:000000000001F2EB                 db  58h ; X
.eh_frame:000000000001F2EC                 db  0Eh
.eh_frame:000000000001F2ED                 db  20h
.eh_frame:000000000001F2EE                 db  83h
.eh_frame:000000000001F2EF                 db    3
.eh_frame:000000000001F2F0                 db  86h
.eh_frame:000000000001F2F1                 db    2
.eh_frame:000000000001F2F2                 db    0
.eh_frame:000000000001F2F3                 db    0
.eh_frame:000000000001F2F4                 db  28h ; (
.eh_frame:000000000001F2F5                 db    0
.eh_frame:000000000001F2F6                 db    0
.eh_frame:000000000001F2F7                 db    0
.eh_frame:000000000001F2F8                 db  88h
.eh_frame:000000000001F2F9                 db  1Ch
.eh_frame:000000000001F2FA                 db    0
.eh_frame:000000000001F2FB                 db    0
.eh_frame:000000000001F2FC                 db  14h
.eh_frame:000000000001F2FD                 db    3
.eh_frame:000000000001F2FE                 db 0FFh
.eh_frame:000000000001F2FF                 db 0FFh
.eh_frame:000000000001F300                 db  4Fh ; O
.eh_frame:000000000001F301                 db    0
.eh_frame:000000000001F302                 db    0
.eh_frame:000000000001F303                 db    0
.eh_frame:000000000001F304                 db    0
.eh_frame:000000000001F305                 db  42h ; B
.eh_frame:000000000001F306                 db  0Eh
.eh_frame:000000000001F307                 db  10h
.eh_frame:000000000001F308                 db  8Ch
.eh_frame:000000000001F309                 db    2
.eh_frame:000000000001F30A                 db  41h ; A
.eh_frame:000000000001F30B                 db  0Eh
.eh_frame:000000000001F30C                 db  18h
.eh_frame:000000000001F30D                 db  86h
.eh_frame:000000000001F30E                 db    3
.eh_frame:000000000001F30F                 db  44h ; D
.eh_frame:000000000001F310                 db  0Eh
.eh_frame:000000000001F311                 db  20h
.eh_frame:000000000001F312                 db  83h
.eh_frame:000000000001F313                 db    4
.eh_frame:000000000001F314                 db  7Ch ; |
.eh_frame:000000000001F315                 db  0Eh
.eh_frame:000000000001F316                 db  18h
.eh_frame:000000000001F317                 db  45h ; E
.eh_frame:000000000001F318                 db  0Eh
.eh_frame:000000000001F319                 db  10h
.eh_frame:000000000001F31A                 db  42h ; B
.eh_frame:000000000001F31B                 db  0Eh
.eh_frame:000000000001F31C                 db    8
.eh_frame:000000000001F31D                 db    0
.eh_frame:000000000001F31E                 db    0
.eh_frame:000000000001F31F                 db    0
.eh_frame:000000000001F320                 db  2Ch ; ,
.eh_frame:000000000001F321                 db    0
.eh_frame:000000000001F322                 db    0
.eh_frame:000000000001F323                 db    0
.eh_frame:000000000001F324                 db 0B4h
.eh_frame:000000000001F325                 db  1Ch
.eh_frame:000000000001F326                 db    0
.eh_frame:000000000001F327                 db    0
.eh_frame:000000000001F328                 db  38h ; 8
.eh_frame:000000000001F329                 db    3
.eh_frame:000000000001F32A                 db 0FFh
.eh_frame:000000000001F32B                 db 0FFh
.eh_frame:000000000001F32C                 db  94h
.eh_frame:000000000001F32D                 db    0
.eh_frame:000000000001F32E                 db    0
.eh_frame:000000000001F32F                 db    0
.eh_frame:000000000001F330                 db    0
.eh_frame:000000000001F331                 db  42h ; B
.eh_frame:000000000001F332                 db  0Eh
.eh_frame:000000000001F333                 db  10h
.eh_frame:000000000001F334                 db  8Ch
.eh_frame:000000000001F335                 db    2
.eh_frame:000000000001F336                 db  41h ; A
.eh_frame:000000000001F337                 db  0Eh
.eh_frame:000000000001F338                 db  18h
.eh_frame:000000000001F339                 db  86h
.eh_frame:000000000001F33A                 db    3
.eh_frame:000000000001F33B                 db  41h ; A
.eh_frame:000000000001F33C                 db  0Eh
.eh_frame:000000000001F33D                 db  20h
.eh_frame:000000000001F33E                 db  83h
.eh_frame:000000000001F33F                 db    4
.eh_frame:000000000001F340                 db    2
.eh_frame:000000000001F341                 db  6Dh ; m
.eh_frame:000000000001F342                 db  0Ah
.eh_frame:000000000001F343                 db  0Eh
.eh_frame:000000000001F344                 db  18h
.eh_frame:000000000001F345                 db  41h ; A
.eh_frame:000000000001F346                 db  0Eh
.eh_frame:000000000001F347                 db  10h
.eh_frame:000000000001F348                 db  42h ; B
.eh_frame:000000000001F349                 db  0Eh
.eh_frame:000000000001F34A                 db    8
.eh_frame:000000000001F34B                 db  41h ; A
.eh_frame:000000000001F34C                 db  0Bh
.eh_frame:000000000001F34D                 db    0
.eh_frame:000000000001F34E                 db    0
.eh_frame:000000000001F34F                 db    0
.eh_frame:000000000001F350                 db  30h ; 0
.eh_frame:000000000001F351                 db    0
.eh_frame:000000000001F352                 db    0
.eh_frame:000000000001F353                 db    0
.eh_frame:000000000001F354                 db 0E4h
.eh_frame:000000000001F355                 db  1Ch
.eh_frame:000000000001F356                 db    0
.eh_frame:000000000001F357                 db    0
.eh_frame:000000000001F358                 db 0A8h
.eh_frame:000000000001F359                 db    3
.eh_frame:000000000001F35A                 db 0FFh
.eh_frame:000000000001F35B                 db 0FFh
.eh_frame:000000000001F35C                 db  4Ch ; L
.eh_frame:000000000001F35D                 db    0
.eh_frame:000000000001F35E                 db    0
.eh_frame:000000000001F35F                 db    0
.eh_frame:000000000001F360                 db    0
.eh_frame:000000000001F361                 db  41h ; A
.eh_frame:000000000001F362                 db  0Eh
.eh_frame:000000000001F363                 db  10h
.eh_frame:000000000001F364                 db  86h
.eh_frame:000000000001F365                 db    2
.eh_frame:000000000001F366                 db  41h ; A
.eh_frame:000000000001F367                 db  0Eh
.eh_frame:000000000001F368                 db  18h
.eh_frame:000000000001F369                 db  83h
.eh_frame:000000000001F36A                 db    3
.eh_frame:000000000001F36B                 db  4Dh ; M
.eh_frame:000000000001F36C                 db  0Eh
.eh_frame:000000000001F36D                 db  20h
.eh_frame:000000000001F36E                 db  67h ; g
.eh_frame:000000000001F36F                 db  0Ah
.eh_frame:000000000001F370                 db  0Eh
.eh_frame:000000000001F371                 db  18h
.eh_frame:000000000001F372                 db  43h ; C
.eh_frame:000000000001F373                 db  0Eh
.eh_frame:000000000001F374                 db  10h
.eh_frame:000000000001F375                 db  41h ; A
.eh_frame:000000000001F376                 db  0Eh
.eh_frame:000000000001F377                 db    8
.eh_frame:000000000001F378                 db  46h ; F
.eh_frame:000000000001F379                 db  0Bh
.eh_frame:000000000001F37A                 db  44h ; D
.eh_frame:000000000001F37B                 db  0Eh
.eh_frame:000000000001F37C                 db  18h
.eh_frame:000000000001F37D                 db  46h ; F
.eh_frame:000000000001F37E                 db  0Eh
.eh_frame:000000000001F37F                 db  10h
.eh_frame:000000000001F380                 db  41h ; A
.eh_frame:000000000001F381                 db  0Eh
.eh_frame:000000000001F382                 db    8
.eh_frame:000000000001F383                 db    0
.eh_frame:000000000001F384                 db  40h ; @
.eh_frame:000000000001F385                 db    0
.eh_frame:000000000001F386                 db    0
.eh_frame:000000000001F387                 db    0
.eh_frame:000000000001F388                 db  18h
.eh_frame:000000000001F389                 db  1Dh
.eh_frame:000000000001F38A                 db    0
.eh_frame:000000000001F38B                 db    0
.eh_frame:000000000001F38C                 db 0C4h
.eh_frame:000000000001F38D                 db    3
.eh_frame:000000000001F38E                 db 0FFh
.eh_frame:000000000001F38F                 db 0FFh
.eh_frame:000000000001F390                 db  0Dh
.eh_frame:000000000001F391                 db    8
.eh_frame:000000000001F392                 db    0
.eh_frame:000000000001F393                 db    0
.eh_frame:000000000001F394                 db    0
.eh_frame:000000000001F395                 db  42h ; B
.eh_frame:000000000001F396                 db  0Eh
.eh_frame:000000000001F397                 db  10h
.eh_frame:000000000001F398                 db  8Eh
.eh_frame:000000000001F399                 db    2
.eh_frame:000000000001F39A                 db  42h ; B
.eh_frame:000000000001F39B                 db  0Eh
.eh_frame:000000000001F39C                 db  18h
.eh_frame:000000000001F39D                 db  8Dh
.eh_frame:000000000001F39E                 db    3
.eh_frame:000000000001F39F                 db  45h ; E
.eh_frame:000000000001F3A0                 db  0Eh
.eh_frame:000000000001F3A1                 db  20h
.eh_frame:000000000001F3A2                 db  8Ch
.eh_frame:000000000001F3A3                 db    4
.eh_frame:000000000001F3A4                 db  41h ; A
.eh_frame:000000000001F3A5                 db  0Eh
.eh_frame:000000000001F3A6                 db  28h ; (
.eh_frame:000000000001F3A7                 db  86h
.eh_frame:000000000001F3A8                 db    5
.eh_frame:000000000001F3A9                 db  44h ; D
.eh_frame:000000000001F3AA                 db  0Eh
.eh_frame:000000000001F3AB                 db  30h ; 0
.eh_frame:000000000001F3AC                 db  83h
.eh_frame:000000000001F3AD                 db    6
.eh_frame:000000000001F3AE                 db  4Ah ; J
.eh_frame:000000000001F3AF                 db  0Eh
.eh_frame:000000000001F3B0                 db  40h ; @
.eh_frame:000000000001F3B1                 db    2
.eh_frame:000000000001F3B2                 db 0D2h
.eh_frame:000000000001F3B3                 db  0Ah
.eh_frame:000000000001F3B4                 db  0Eh
.eh_frame:000000000001F3B5                 db  30h ; 0
.eh_frame:000000000001F3B6                 db  41h ; A
.eh_frame:000000000001F3B7                 db  0Eh
.eh_frame:000000000001F3B8                 db  28h ; (
.eh_frame:000000000001F3B9                 db  41h ; A
.eh_frame:000000000001F3BA                 db  0Eh
.eh_frame:000000000001F3BB                 db  20h
.eh_frame:000000000001F3BC                 db  42h ; B
.eh_frame:000000000001F3BD                 db  0Eh
.eh_frame:000000000001F3BE                 db  18h
.eh_frame:000000000001F3BF                 db  42h ; B
.eh_frame:000000000001F3C0                 db  0Eh
.eh_frame:000000000001F3C1                 db  10h
.eh_frame:000000000001F3C2                 db  42h ; B
.eh_frame:000000000001F3C3                 db  0Eh
.eh_frame:000000000001F3C4                 db    8
.eh_frame:000000000001F3C5                 db  46h ; F
.eh_frame:000000000001F3C6                 db  0Bh
.eh_frame:000000000001F3C7                 db    0
.eh_frame:000000000001F3C8                 db  5Ch ; \
.eh_frame:000000000001F3C9                 db    0
.eh_frame:000000000001F3CA                 db    0
.eh_frame:000000000001F3CB                 db    0
.eh_frame:000000000001F3CC                 db  5Ch ; \
.eh_frame:000000000001F3CD                 db  1Dh
.eh_frame:000000000001F3CE                 db    0
.eh_frame:000000000001F3CF                 db    0
.eh_frame:000000000001F3D0                 db  90h
.eh_frame:000000000001F3D1                 db  0Bh
.eh_frame:000000000001F3D2                 db 0FFh
.eh_frame:000000000001F3D3                 db 0FFh
.eh_frame:000000000001F3D4                 db  6Ah ; j
.eh_frame:000000000001F3D5                 db    2
.eh_frame:000000000001F3D6                 db    0
.eh_frame:000000000001F3D7                 db    0
.eh_frame:000000000001F3D8                 db    0
.eh_frame:000000000001F3D9                 db  42h ; B
.eh_frame:000000000001F3DA                 db  0Eh
.eh_frame:000000000001F3DB                 db  10h
.eh_frame:000000000001F3DC                 db  8Fh
.eh_frame:000000000001F3DD                 db    2
.eh_frame:000000000001F3DE                 db  42h ; B
.eh_frame:000000000001F3DF                 db  0Eh
.eh_frame:000000000001F3E0                 db  18h
.eh_frame:000000000001F3E1                 db  8Eh
.eh_frame:000000000001F3E2                 db    3
.eh_frame:000000000001F3E3                 db  45h ; E
.eh_frame:000000000001F3E4                 db  0Eh
.eh_frame:000000000001F3E5                 db  20h
.eh_frame:000000000001F3E6                 db  8Dh
.eh_frame:000000000001F3E7                 db    4
.eh_frame:000000000001F3E8                 db  42h ; B
.eh_frame:000000000001F3E9                 db  0Eh
.eh_frame:000000000001F3EA                 db  28h ; (
.eh_frame:000000000001F3EB                 db  8Ch
.eh_frame:000000000001F3EC                 db    5
.eh_frame:000000000001F3ED                 db  44h ; D
.eh_frame:000000000001F3EE                 db  0Eh
.eh_frame:000000000001F3EF                 db  30h ; 0
.eh_frame:000000000001F3F0                 db  86h
.eh_frame:000000000001F3F1                 db    6
.eh_frame:000000000001F3F2                 db  41h ; A
.eh_frame:000000000001F3F3                 db  0Eh
.eh_frame:000000000001F3F4                 db  38h ; 8
.eh_frame:000000000001F3F5                 db  83h
.eh_frame:000000000001F3F6                 db    7
.eh_frame:000000000001F3F7                 db  4Fh ; O
.eh_frame:000000000001F3F8                 db  0Eh
.eh_frame:000000000001F3F9                 db  90h
.eh_frame:000000000001F3FA                 db    1
.eh_frame:000000000001F3FB                 db    2
.eh_frame:000000000001F3FC                 db  5Bh ; [
.eh_frame:000000000001F3FD                 db  0Eh
.eh_frame:000000000001F3FE                 db  98h
.eh_frame:000000000001F3FF                 db    1
.eh_frame:000000000001F400                 db  45h ; E
.eh_frame:000000000001F401                 db  0Eh
.eh_frame:000000000001F402                 db 0A0h
.eh_frame:000000000001F403                 db    1
.eh_frame:000000000001F404                 db  6Ch ; l
.eh_frame:000000000001F405                 db  0Eh
.eh_frame:000000000001F406                 db  98h
.eh_frame:000000000001F407                 db    1
.eh_frame:000000000001F408                 db  41h ; A
.eh_frame:000000000001F409                 db  0Eh
.eh_frame:000000000001F40A                 db  90h
.eh_frame:000000000001F40B                 db    1
.eh_frame:000000000001F40C                 db    3
.eh_frame:000000000001F40D                 db  31h ; 1
.eh_frame:000000000001F40E                 db    1
.eh_frame:000000000001F40F                 db  0Ah
.eh_frame:000000000001F410                 db  0Eh
.eh_frame:000000000001F411                 db  38h ; 8
.eh_frame:000000000001F412                 db  41h ; A
.eh_frame:000000000001F413                 db  0Eh
.eh_frame:000000000001F414                 db  30h ; 0
.eh_frame:000000000001F415                 db  41h ; A
.eh_frame:000000000001F416                 db  0Eh
.eh_frame:000000000001F417                 db  28h ; (
.eh_frame:000000000001F418                 db  42h ; B
.eh_frame:000000000001F419                 db  0Eh
.eh_frame:000000000001F41A                 db  20h
.eh_frame:000000000001F41B                 db  42h ; B
.eh_frame:000000000001F41C                 db  0Eh
.eh_frame:000000000001F41D                 db  18h
.eh_frame:000000000001F41E                 db  42h ; B
.eh_frame:000000000001F41F                 db  0Eh
.eh_frame:000000000001F420                 db  10h
.eh_frame:000000000001F421                 db  42h ; B
.eh_frame:000000000001F422                 db  0Eh
.eh_frame:000000000001F423                 db    8
.eh_frame:000000000001F424                 db  49h ; I
.eh_frame:000000000001F425                 db  0Bh
.eh_frame:000000000001F426                 db    0
.eh_frame:000000000001F427                 db    0
.eh_frame:000000000001F428                 db  4Ch ; L
.eh_frame:000000000001F429                 db    0
.eh_frame:000000000001F42A                 db    0
.eh_frame:000000000001F42B                 db    0
.eh_frame:000000000001F42C                 db 0BCh
.eh_frame:000000000001F42D                 db  1Dh
.eh_frame:000000000001F42E                 db    0
.eh_frame:000000000001F42F                 db    0
.eh_frame:000000000001F430                 db 0A0h
.eh_frame:000000000001F431                 db  0Dh
.eh_frame:000000000001F432                 db 0FFh
.eh_frame:000000000001F433                 db 0FFh
.eh_frame:000000000001F434                 db  27h ; '
.eh_frame:000000000001F435                 db    5
.eh_frame:000000000001F436                 db    0
.eh_frame:000000000001F437                 db    0
.eh_frame:000000000001F438                 db    0
.eh_frame:000000000001F439                 db  42h ; B
.eh_frame:000000000001F43A                 db  0Eh
.eh_frame:000000000001F43B                 db  10h
.eh_frame:000000000001F43C                 db  8Fh
.eh_frame:000000000001F43D                 db    2
.eh_frame:000000000001F43E                 db  42h ; B
.eh_frame:000000000001F43F                 db  0Eh
.eh_frame:000000000001F440                 db  18h
.eh_frame:000000000001F441                 db  8Eh
.eh_frame:000000000001F442                 db    3
.eh_frame:000000000001F443                 db  45h ; E
.eh_frame:000000000001F444                 db  0Eh
.eh_frame:000000000001F445                 db  20h
.eh_frame:000000000001F446                 db  8Dh
.eh_frame:000000000001F447                 db    4
.eh_frame:000000000001F448                 db  42h ; B
.eh_frame:000000000001F449                 db  0Eh
.eh_frame:000000000001F44A                 db  28h ; (
.eh_frame:000000000001F44B                 db  8Ch
.eh_frame:000000000001F44C                 db    5
.eh_frame:000000000001F44D                 db  41h ; A
.eh_frame:000000000001F44E                 db  0Eh
.eh_frame:000000000001F44F                 db  30h ; 0
.eh_frame:000000000001F450                 db  86h
.eh_frame:000000000001F451                 db    6
.eh_frame:000000000001F452                 db  41h ; A
.eh_frame:000000000001F453                 db  0Eh
.eh_frame:000000000001F454                 db  38h ; 8
.eh_frame:000000000001F455                 db  83h
.eh_frame:000000000001F456                 db    7
.eh_frame:000000000001F457                 db  4Ch ; L
.eh_frame:000000000001F458                 db  0Eh
.eh_frame:000000000001F459                 db 0B0h
.eh_frame:000000000001F45A                 db    3
.eh_frame:000000000001F45B                 db    3
.eh_frame:000000000001F45C                 db  82h
.eh_frame:000000000001F45D                 db    4
.eh_frame:000000000001F45E                 db  0Ah
.eh_frame:000000000001F45F                 db  0Eh
.eh_frame:000000000001F460                 db  38h ; 8
.eh_frame:000000000001F461                 db  41h ; A
.eh_frame:000000000001F462                 db  0Eh
.eh_frame:000000000001F463                 db  30h ; 0
.eh_frame:000000000001F464                 db  41h ; A
.eh_frame:000000000001F465                 db  0Eh
.eh_frame:000000000001F466                 db  28h ; (
.eh_frame:000000000001F467                 db  42h ; B
.eh_frame:000000000001F468                 db  0Eh
.eh_frame:000000000001F469                 db  20h
.eh_frame:000000000001F46A                 db  42h ; B
.eh_frame:000000000001F46B                 db  0Eh
.eh_frame:000000000001F46C                 db  18h
.eh_frame:000000000001F46D                 db  42h ; B
.eh_frame:000000000001F46E                 db  0Eh
.eh_frame:000000000001F46F                 db  10h
.eh_frame:000000000001F470                 db  42h ; B
.eh_frame:000000000001F471                 db  0Eh
.eh_frame:000000000001F472                 db    8
.eh_frame:000000000001F473                 db  41h ; A
.eh_frame:000000000001F474                 db  0Bh
.eh_frame:000000000001F475                 db    0
.eh_frame:000000000001F476                 db    0
.eh_frame:000000000001F477                 db    0
.eh_frame:000000000001F478                 db  38h ; 8
.eh_frame:000000000001F479                 db    0
.eh_frame:000000000001F47A                 db    0
.eh_frame:000000000001F47B                 db    0
.eh_frame:000000000001F47C                 db  0Ch
.eh_frame:000000000001F47D                 db  1Eh
.eh_frame:000000000001F47E                 db    0
.eh_frame:000000000001F47F                 db    0
.eh_frame:000000000001F480                 db  80h
.eh_frame:000000000001F481                 db  12h
.eh_frame:000000000001F482                 db 0FFh
.eh_frame:000000000001F483                 db 0FFh
.eh_frame:000000000001F484                 db  54h ; T
.eh_frame:000000000001F485                 db    2
.eh_frame:000000000001F486                 db    0
.eh_frame:000000000001F487                 db    0
.eh_frame:000000000001F488                 db    0
.eh_frame:000000000001F489                 db  46h ; F
.eh_frame:000000000001F48A                 db  0Eh
.eh_frame:000000000001F48B                 db  10h
.eh_frame:000000000001F48C                 db  8Dh
.eh_frame:000000000001F48D                 db    2
.eh_frame:000000000001F48E                 db  42h ; B
.eh_frame:000000000001F48F                 db  0Eh
.eh_frame:000000000001F490                 db  18h
.eh_frame:000000000001F491                 db  8Ch
.eh_frame:000000000001F492                 db    3
.eh_frame:000000000001F493                 db  45h ; E
.eh_frame:000000000001F494                 db  0Eh
.eh_frame:000000000001F495                 db  20h
.eh_frame:000000000001F496                 db  86h
.eh_frame:000000000001F497                 db    4
.eh_frame:000000000001F498                 db  41h ; A
.eh_frame:000000000001F499                 db  0Eh
.eh_frame:000000000001F49A                 db  28h ; (
.eh_frame:000000000001F49B                 db  83h
.eh_frame:000000000001F49C                 db    5
.eh_frame:000000000001F49D                 db  44h ; D
.eh_frame:000000000001F49E                 db  0Eh
.eh_frame:000000000001F49F                 db  30h ; 0
.eh_frame:000000000001F4A0                 db    2
.eh_frame:000000000001F4A1                 db 0E4h
.eh_frame:000000000001F4A2                 db  0Ah
.eh_frame:000000000001F4A3                 db  0Eh
.eh_frame:000000000001F4A4                 db  28h ; (
.eh_frame:000000000001F4A5                 db  43h ; C
.eh_frame:000000000001F4A6                 db  0Eh
.eh_frame:000000000001F4A7                 db  20h
.eh_frame:000000000001F4A8                 db  41h ; A
.eh_frame:000000000001F4A9                 db  0Eh
.eh_frame:000000000001F4AA                 db  18h
.eh_frame:000000000001F4AB                 db  42h ; B
.eh_frame:000000000001F4AC                 db  0Eh
.eh_frame:000000000001F4AD                 db  10h
.eh_frame:000000000001F4AE                 db  42h ; B
.eh_frame:000000000001F4AF                 db  0Eh
.eh_frame:000000000001F4B0                 db    8
.eh_frame:000000000001F4B1                 db  42h ; B
.eh_frame:000000000001F4B2                 db  0Bh
.eh_frame:000000000001F4B3                 db    0
.eh_frame:000000000001F4B4                 db  4Ch ; L
.eh_frame:000000000001F4B5                 db    0
.eh_frame:000000000001F4B6                 db    0
.eh_frame:000000000001F4B7                 db    0
.eh_frame:000000000001F4B8                 db  48h ; H
.eh_frame:000000000001F4B9                 db  1Eh
.eh_frame:000000000001F4BA                 db    0
.eh_frame:000000000001F4BB                 db    0
.eh_frame:000000000001F4BC                 db 0A4h
.eh_frame:000000000001F4BD                 db  14h
.eh_frame:000000000001F4BE                 db 0FFh
.eh_frame:000000000001F4BF                 db 0FFh
.eh_frame:000000000001F4C0                 db  51h ; Q
.eh_frame:000000000001F4C1                 db    7
.eh_frame:000000000001F4C2                 db    0
.eh_frame:000000000001F4C3                 db    0
.eh_frame:000000000001F4C4                 db    0
.eh_frame:000000000001F4C5                 db  42h ; B
.eh_frame:000000000001F4C6                 db  0Eh
.eh_frame:000000000001F4C7                 db  10h
.eh_frame:000000000001F4C8                 db  8Fh
.eh_frame:000000000001F4C9                 db    2
.eh_frame:000000000001F4CA                 db  42h ; B
.eh_frame:000000000001F4CB                 db  0Eh
.eh_frame:000000000001F4CC                 db  18h
.eh_frame:000000000001F4CD                 db  8Eh
.eh_frame:000000000001F4CE                 db    3
.eh_frame:000000000001F4CF                 db  45h ; E
.eh_frame:000000000001F4D0                 db  0Eh
.eh_frame:000000000001F4D1                 db  20h
.eh_frame:000000000001F4D2                 db  8Dh
.eh_frame:000000000001F4D3                 db    4
.eh_frame:000000000001F4D4                 db  42h ; B
.eh_frame:000000000001F4D5                 db  0Eh
.eh_frame:000000000001F4D6                 db  28h ; (
.eh_frame:000000000001F4D7                 db  8Ch
.eh_frame:000000000001F4D8                 db    5
.eh_frame:000000000001F4D9                 db  41h ; A
.eh_frame:000000000001F4DA                 db  0Eh
.eh_frame:000000000001F4DB                 db  30h ; 0
.eh_frame:000000000001F4DC                 db  86h
.eh_frame:000000000001F4DD                 db    6
.eh_frame:000000000001F4DE                 db  41h ; A
.eh_frame:000000000001F4DF                 db  0Eh
.eh_frame:000000000001F4E0                 db  38h ; 8
.eh_frame:000000000001F4E1                 db  83h
.eh_frame:000000000001F4E2                 db    7
.eh_frame:000000000001F4E3                 db  4Dh ; M
.eh_frame:000000000001F4E4                 db  0Eh
.eh_frame:000000000001F4E5                 db  90h
.eh_frame:000000000001F4E6                 db    2
.eh_frame:000000000001F4E7                 db    3
.eh_frame:000000000001F4E8                 db  88h
.eh_frame:000000000001F4E9                 db    5
.eh_frame:000000000001F4EA                 db  0Ah
.eh_frame:000000000001F4EB                 db  0Eh
.eh_frame:000000000001F4EC                 db  38h ; 8
.eh_frame:000000000001F4ED                 db  41h ; A
.eh_frame:000000000001F4EE                 db  0Eh
.eh_frame:000000000001F4EF                 db  30h ; 0
.eh_frame:000000000001F4F0                 db  41h ; A
.eh_frame:000000000001F4F1                 db  0Eh
.eh_frame:000000000001F4F2                 db  28h ; (
.eh_frame:000000000001F4F3                 db  42h ; B
.eh_frame:000000000001F4F4                 db  0Eh
.eh_frame:000000000001F4F5                 db  20h
.eh_frame:000000000001F4F6                 db  42h ; B
.eh_frame:000000000001F4F7                 db  0Eh
.eh_frame:000000000001F4F8                 db  18h
.eh_frame:000000000001F4F9                 db  42h ; B
.eh_frame:000000000001F4FA                 db  0Eh
.eh_frame:000000000001F4FB                 db  10h
.eh_frame:000000000001F4FC                 db  42h ; B
.eh_frame:000000000001F4FD                 db  0Eh
.eh_frame:000000000001F4FE                 db    8
.eh_frame:000000000001F4FF                 db  44h ; D
.eh_frame:000000000001F500                 db  0Bh
.eh_frame:000000000001F501                 db    0
.eh_frame:000000000001F502                 db    0
.eh_frame:000000000001F503                 db    0
.eh_frame:000000000001F504                 db  2Ch ; ,
.eh_frame:000000000001F505                 db    0
.eh_frame:000000000001F506                 db    0
.eh_frame:000000000001F507                 db    0
.eh_frame:000000000001F508                 db  98h
.eh_frame:000000000001F509                 db  1Eh
.eh_frame:000000000001F50A                 db    0
.eh_frame:000000000001F50B                 db    0
.eh_frame:000000000001F50C                 db 0B4h
.eh_frame:000000000001F50D                 db  1Bh
.eh_frame:000000000001F50E                 db 0FFh
.eh_frame:000000000001F50F                 db 0FFh
.eh_frame:000000000001F510                 db 0EAh
.eh_frame:000000000001F511                 db    8
.eh_frame:000000000001F512                 db    0
.eh_frame:000000000001F513                 db    0
.eh_frame:000000000001F514                 db    0
.eh_frame:000000000001F515                 db  41h ; A
.eh_frame:000000000001F516                 db  0Eh
.eh_frame:000000000001F517                 db  10h
.eh_frame:000000000001F518                 db  86h
.eh_frame:000000000001F519                 db    2
.eh_frame:000000000001F51A                 db  43h ; C
.eh_frame:000000000001F51B                 db  0Dh
.eh_frame:000000000001F51C                 db    6
.eh_frame:000000000001F51D                 db  48h ; H
.eh_frame:000000000001F51E                 db  8Fh
.eh_frame:000000000001F51F                 db    3
.eh_frame:000000000001F520                 db  8Eh
.eh_frame:000000000001F521                 db    4
.eh_frame:000000000001F522                 db  8Dh
.eh_frame:000000000001F523                 db    5
.eh_frame:000000000001F524                 db  8Ch
.eh_frame:000000000001F525                 db    6
.eh_frame:000000000001F526                 db  4Eh ; N
.eh_frame:000000000001F527                 db  83h
.eh_frame:000000000001F528                 db    7
.eh_frame:000000000001F529                 db    3
.eh_frame:000000000001F52A                 db  20h
.eh_frame:000000000001F52B                 db    7
.eh_frame:000000000001F52C                 db  0Ah
.eh_frame:000000000001F52D                 db  0Ch
.eh_frame:000000000001F52E                 db    7
.eh_frame:000000000001F52F                 db    8
.eh_frame:000000000001F530                 db  41h ; A
.eh_frame:000000000001F531                 db  0Bh
.eh_frame:000000000001F532                 db    0
.eh_frame:000000000001F533                 db    0
.eh_frame:000000000001F534                 db  68h ; h
.eh_frame:000000000001F535                 db    0
.eh_frame:000000000001F536                 db    0
.eh_frame:000000000001F537                 db    0
.eh_frame:000000000001F538                 db 0C8h
.eh_frame:000000000001F539                 db  1Eh
.eh_frame:000000000001F53A                 db    0
.eh_frame:000000000001F53B                 db    0
.eh_frame:000000000001F53C                 db  74h ; t
.eh_frame:000000000001F53D                 db  24h ; $
.eh_frame:000000000001F53E                 db 0FFh
.eh_frame:000000000001F53F                 db 0FFh
.eh_frame:000000000001F540                 db  96h
.eh_frame:000000000001F541                 db    1
.eh_frame:000000000001F542                 db    0
.eh_frame:000000000001F543                 db    0
.eh_frame:000000000001F544                 db    0
.eh_frame:000000000001F545                 db  42h ; B
.eh_frame:000000000001F546                 db  0Eh
.eh_frame:000000000001F547                 db  10h
.eh_frame:000000000001F548                 db  8Fh
.eh_frame:000000000001F549                 db    2
.eh_frame:000000000001F54A                 db  42h ; B
.eh_frame:000000000001F54B                 db  0Eh
.eh_frame:000000000001F54C                 db  18h
.eh_frame:000000000001F54D                 db  8Eh
.eh_frame:000000000001F54E                 db    3
.eh_frame:000000000001F54F                 db  45h ; E
.eh_frame:000000000001F550                 db  0Eh
.eh_frame:000000000001F551                 db  20h
.eh_frame:000000000001F552                 db  8Dh
.eh_frame:000000000001F553                 db    4
.eh_frame:000000000001F554                 db  42h ; B
.eh_frame:000000000001F555                 db  0Eh
.eh_frame:000000000001F556                 db  28h ; (
.eh_frame:000000000001F557                 db  8Ch
.eh_frame:000000000001F558                 db    5
.eh_frame:000000000001F559                 db  44h ; D
.eh_frame:000000000001F55A                 db  0Eh
.eh_frame:000000000001F55B                 db  30h ; 0
.eh_frame:000000000001F55C                 db  86h
.eh_frame:000000000001F55D                 db    6
.eh_frame:000000000001F55E                 db  41h ; A
.eh_frame:000000000001F55F                 db  0Eh
.eh_frame:000000000001F560                 db  38h ; 8
.eh_frame:000000000001F561                 db  83h
.eh_frame:000000000001F562                 db    7
.eh_frame:000000000001F563                 db  51h ; Q
.eh_frame:000000000001F564                 db  0Eh
.eh_frame:000000000001F565                 db  58h ; X
.eh_frame:000000000001F566                 db  49h ; I
.eh_frame:000000000001F567                 db  0Eh
.eh_frame:000000000001F568                 db  60h ; `
.eh_frame:000000000001F569                 db  4Eh ; N
.eh_frame:000000000001F56A                 db  0Eh
.eh_frame:000000000001F56B                 db  58h ; X
.eh_frame:000000000001F56C                 db  41h ; A
.eh_frame:000000000001F56D                 db  0Eh
.eh_frame:000000000001F56E                 db  50h ; P
.eh_frame:000000000001F56F                 db  46h ; F
.eh_frame:000000000001F570                 db  0Ah
.eh_frame:000000000001F571                 db  0Eh
.eh_frame:000000000001F572                 db  38h ; 8
.eh_frame:000000000001F573                 db  41h ; A
.eh_frame:000000000001F574                 db  0Eh
.eh_frame:000000000001F575                 db  30h ; 0
.eh_frame:000000000001F576                 db  41h ; A
.eh_frame:000000000001F577                 db  0Eh
.eh_frame:000000000001F578                 db  28h ; (
.eh_frame:000000000001F579                 db  42h ; B
.eh_frame:000000000001F57A                 db  0Eh
.eh_frame:000000000001F57B                 db  20h
.eh_frame:000000000001F57C                 db  42h ; B
.eh_frame:000000000001F57D                 db  0Eh
.eh_frame:000000000001F57E                 db  18h
.eh_frame:000000000001F57F                 db  42h ; B
.eh_frame:000000000001F580                 db  0Eh
.eh_frame:000000000001F581                 db  10h
.eh_frame:000000000001F582                 db  42h ; B
.eh_frame:000000000001F583                 db  0Eh
.eh_frame:000000000001F584                 db    8
.eh_frame:000000000001F585                 db  47h ; G
.eh_frame:000000000001F586                 db  0Bh
.eh_frame:000000000001F587                 db    2
.eh_frame:000000000001F588                 db  97h
.eh_frame:000000000001F589                 db  0Ah
.eh_frame:000000000001F58A                 db  0Eh
.eh_frame:000000000001F58B                 db  38h ; 8
.eh_frame:000000000001F58C                 db  44h ; D
.eh_frame:000000000001F58D                 db  0Eh
.eh_frame:000000000001F58E                 db  30h ; 0
.eh_frame:000000000001F58F                 db  41h ; A
.eh_frame:000000000001F590                 db  0Eh
.eh_frame:000000000001F591                 db  28h ; (
.eh_frame:000000000001F592                 db  42h ; B
.eh_frame:000000000001F593                 db  0Eh
.eh_frame:000000000001F594                 db  20h
.eh_frame:000000000001F595                 db  42h ; B
.eh_frame:000000000001F596                 db  0Eh
.eh_frame:000000000001F597                 db  18h
.eh_frame:000000000001F598                 db  42h ; B
.eh_frame:000000000001F599                 db  0Eh
.eh_frame:000000000001F59A                 db  10h
.eh_frame:000000000001F59B                 db  42h ; B
.eh_frame:000000000001F59C                 db  0Eh
.eh_frame:000000000001F59D                 db    8
.eh_frame:000000000001F59E                 db  4Ch ; L
.eh_frame:000000000001F59F                 db  0Bh
.eh_frame:000000000001F5A0                 db  5Ch ; \
.eh_frame:000000000001F5A1                 db    0
.eh_frame:000000000001F5A2                 db    0
.eh_frame:000000000001F5A3                 db    0
.eh_frame:000000000001F5A4                 db  34h ; 4
.eh_frame:000000000001F5A5                 db  1Fh
.eh_frame:000000000001F5A6                 db    0
.eh_frame:000000000001F5A7                 db    0
.eh_frame:000000000001F5A8                 db 0A8h
.eh_frame:000000000001F5A9                 db  25h ; %
.eh_frame:000000000001F5AA                 db 0FFh
.eh_frame:000000000001F5AB                 db 0FFh
.eh_frame:000000000001F5AC                 db 0E1h
.eh_frame:000000000001F5AD                 db    8
.eh_frame:000000000001F5AE                 db    0
.eh_frame:000000000001F5AF                 db    0
.eh_frame:000000000001F5B0                 db    0
.eh_frame:000000000001F5B1                 db  42h ; B
.eh_frame:000000000001F5B2                 db  0Eh
.eh_frame:000000000001F5B3                 db  10h
.eh_frame:000000000001F5B4                 db  8Fh
.eh_frame:000000000001F5B5                 db    2
.eh_frame:000000000001F5B6                 db  42h ; B
.eh_frame:000000000001F5B7                 db  0Eh
.eh_frame:000000000001F5B8                 db  18h
.eh_frame:000000000001F5B9                 db  8Eh
.eh_frame:000000000001F5BA                 db    3
.eh_frame:000000000001F5BB                 db  42h ; B
.eh_frame:000000000001F5BC                 db  0Eh
.eh_frame:000000000001F5BD                 db  20h
.eh_frame:000000000001F5BE                 db  8Dh
.eh_frame:000000000001F5BF                 db    4
.eh_frame:000000000001F5C0                 db  42h ; B
.eh_frame:000000000001F5C1                 db  0Eh
.eh_frame:000000000001F5C2                 db  28h ; (
.eh_frame:000000000001F5C3                 db  8Ch
.eh_frame:000000000001F5C4                 db    5
.eh_frame:000000000001F5C5                 db  41h ; A
.eh_frame:000000000001F5C6                 db  0Eh
.eh_frame:000000000001F5C7                 db  30h ; 0
.eh_frame:000000000001F5C8                 db  86h
.eh_frame:000000000001F5C9                 db    6
.eh_frame:000000000001F5CA                 db  41h ; A
.eh_frame:000000000001F5CB                 db  0Eh
.eh_frame:000000000001F5CC                 db  38h ; 8
.eh_frame:000000000001F5CD                 db  83h
.eh_frame:000000000001F5CE                 db    7
.eh_frame:000000000001F5CF                 db  47h ; G
.eh_frame:000000000001F5D0                 db  0Eh
.eh_frame:000000000001F5D1                 db 0F0h
.eh_frame:000000000001F5D2                 db    1
.eh_frame:000000000001F5D3                 db    3
.eh_frame:000000000001F5D4                 db  85h
.eh_frame:000000000001F5D5                 db    3
.eh_frame:000000000001F5D6                 db  0Ah
.eh_frame:000000000001F5D7                 db  0Eh
.eh_frame:000000000001F5D8                 db  38h ; 8
.eh_frame:000000000001F5D9                 db  41h ; A
.eh_frame:000000000001F5DA                 db  0Eh
.eh_frame:000000000001F5DB                 db  30h ; 0
.eh_frame:000000000001F5DC                 db  41h ; A
.eh_frame:000000000001F5DD                 db  0Eh
.eh_frame:000000000001F5DE                 db  28h ; (
.eh_frame:000000000001F5DF                 db  42h ; B
.eh_frame:000000000001F5E0                 db  0Eh
.eh_frame:000000000001F5E1                 db  20h
.eh_frame:000000000001F5E2                 db  42h ; B
.eh_frame:000000000001F5E3                 db  0Eh
.eh_frame:000000000001F5E4                 db  18h
.eh_frame:000000000001F5E5                 db  42h ; B
.eh_frame:000000000001F5E6                 db  0Eh
.eh_frame:000000000001F5E7                 db  10h
.eh_frame:000000000001F5E8                 db  42h ; B
.eh_frame:000000000001F5E9                 db  0Eh
.eh_frame:000000000001F5EA                 db    8
.eh_frame:000000000001F5EB                 db  48h ; H
.eh_frame:000000000001F5EC                 db  0Bh
.eh_frame:000000000001F5ED                 db    3
.eh_frame:000000000001F5EE                 db 0D8h
.eh_frame:000000000001F5EF                 db    2
.eh_frame:000000000001F5F0                 db  0Eh
.eh_frame:000000000001F5F1                 db 0F8h
.eh_frame:000000000001F5F2                 db    1
.eh_frame:000000000001F5F3                 db  42h ; B
.eh_frame:000000000001F5F4                 db  0Eh
.eh_frame:000000000001F5F5                 db  80h
.eh_frame:000000000001F5F6                 db    2
.eh_frame:000000000001F5F7                 db  4Fh ; O
.eh_frame:000000000001F5F8                 db  0Eh
.eh_frame:000000000001F5F9                 db 0F8h
.eh_frame:000000000001F5FA                 db    1
.eh_frame:000000000001F5FB                 db  44h ; D
.eh_frame:000000000001F5FC                 db  0Eh
.eh_frame:000000000001F5FD                 db 0F0h
.eh_frame:000000000001F5FE                 db    1
.eh_frame:000000000001F5FF                 db    0
.eh_frame:000000000001F600                 db  48h ; H
.eh_frame:000000000001F601                 db    0
.eh_frame:000000000001F602                 db    0
.eh_frame:000000000001F603                 db    0
.eh_frame:000000000001F604                 db  94h
.eh_frame:000000000001F605                 db  1Fh
.eh_frame:000000000001F606                 db    0
.eh_frame:000000000001F607                 db    0
.eh_frame:000000000001F608                 db  38h ; 8
.eh_frame:000000000001F609                 db  2Eh ; .
.eh_frame:000000000001F60A                 db 0FFh
.eh_frame:000000000001F60B                 db 0FFh
.eh_frame:000000000001F60C                 db 0ECh
.eh_frame:000000000001F60D                 db    1
.eh_frame:000000000001F60E                 db    0
.eh_frame:000000000001F60F                 db    0
.eh_frame:000000000001F610                 db    0
.eh_frame:000000000001F611                 db  42h ; B
.eh_frame:000000000001F612                 db  0Eh
.eh_frame:000000000001F613                 db  10h
.eh_frame:000000000001F614                 db  8Fh
.eh_frame:000000000001F615                 db    2
.eh_frame:000000000001F616                 db  42h ; B
.eh_frame:000000000001F617                 db  0Eh
.eh_frame:000000000001F618                 db  18h
.eh_frame:000000000001F619                 db  8Eh
.eh_frame:000000000001F61A                 db    3
.eh_frame:000000000001F61B                 db  42h ; B
.eh_frame:000000000001F61C                 db  0Eh
.eh_frame:000000000001F61D                 db  20h
.eh_frame:000000000001F61E                 db  8Dh
.eh_frame:000000000001F61F                 db    4
.eh_frame:000000000001F620                 db  42h ; B
.eh_frame:000000000001F621                 db  0Eh
.eh_frame:000000000001F622                 db  28h ; (
.eh_frame:000000000001F623                 db  8Ch
.eh_frame:000000000001F624                 db    5
.eh_frame:000000000001F625                 db  44h ; D
.eh_frame:000000000001F626                 db  0Eh
.eh_frame:000000000001F627                 db  30h ; 0
.eh_frame:000000000001F628                 db  86h
.eh_frame:000000000001F629                 db    6
.eh_frame:000000000001F62A                 db  41h ; A
.eh_frame:000000000001F62B                 db  0Eh
.eh_frame:000000000001F62C                 db  38h ; 8
.eh_frame:000000000001F62D                 db  83h
.eh_frame:000000000001F62E                 db    7
.eh_frame:000000000001F62F                 db  47h ; G
.eh_frame:000000000001F630                 db  0Eh
.eh_frame:000000000001F631                 db  70h ; p
.eh_frame:000000000001F632                 db    2
.eh_frame:000000000001F633                 db  6Ch ; l
.eh_frame:000000000001F634                 db  0Ah
.eh_frame:000000000001F635                 db  0Eh
.eh_frame:000000000001F636                 db  38h ; 8
.eh_frame:000000000001F637                 db  41h ; A
.eh_frame:000000000001F638                 db  0Eh
.eh_frame:000000000001F639                 db  30h ; 0
.eh_frame:000000000001F63A                 db  41h ; A
.eh_frame:000000000001F63B                 db  0Eh
.eh_frame:000000000001F63C                 db  28h ; (
.eh_frame:000000000001F63D                 db  42h ; B
.eh_frame:000000000001F63E                 db  0Eh
.eh_frame:000000000001F63F                 db  20h
.eh_frame:000000000001F640                 db  42h ; B
.eh_frame:000000000001F641                 db  0Eh
.eh_frame:000000000001F642                 db  18h
.eh_frame:000000000001F643                 db  42h ; B
.eh_frame:000000000001F644                 db  0Eh
.eh_frame:000000000001F645                 db  10h
.eh_frame:000000000001F646                 db  42h ; B
.eh_frame:000000000001F647                 db  0Eh
.eh_frame:000000000001F648                 db    8
.eh_frame:000000000001F649                 db  46h ; F
.eh_frame:000000000001F64A                 db  0Bh
.eh_frame:000000000001F64B                 db    0
.eh_frame:000000000001F64C                 db  5Ch ; \
.eh_frame:000000000001F64D                 db    0
.eh_frame:000000000001F64E                 db    0
.eh_frame:000000000001F64F                 db    0
.eh_frame:000000000001F650                 db 0E0h
.eh_frame:000000000001F651                 db  1Fh
.eh_frame:000000000001F652                 db    0
.eh_frame:000000000001F653                 db    0
.eh_frame:000000000001F654                 db 0DCh
.eh_frame:000000000001F655                 db  2Fh ; /
.eh_frame:000000000001F656                 db 0FFh
.eh_frame:000000000001F657                 db 0FFh
.eh_frame:000000000001F658                 db  40h ; @
.eh_frame:000000000001F659                 db    3
.eh_frame:000000000001F65A                 db    0
.eh_frame:000000000001F65B                 db    0
.eh_frame:000000000001F65C                 db    0
.eh_frame:000000000001F65D                 db  42h ; B
.eh_frame:000000000001F65E                 db  0Eh
.eh_frame:000000000001F65F                 db  10h
.eh_frame:000000000001F660                 db  8Fh
.eh_frame:000000000001F661                 db    2
.eh_frame:000000000001F662                 db  42h ; B
.eh_frame:000000000001F663                 db  0Eh
.eh_frame:000000000001F664                 db  18h
.eh_frame:000000000001F665                 db  8Eh
.eh_frame:000000000001F666                 db    3
.eh_frame:000000000001F667                 db  45h ; E
.eh_frame:000000000001F668                 db  0Eh
.eh_frame:000000000001F669                 db  20h
.eh_frame:000000000001F66A                 db  8Dh
.eh_frame:000000000001F66B                 db    4
.eh_frame:000000000001F66C                 db  42h ; B
.eh_frame:000000000001F66D                 db  0Eh
.eh_frame:000000000001F66E                 db  28h ; (
.eh_frame:000000000001F66F                 db  8Ch
.eh_frame:000000000001F670                 db    5
.eh_frame:000000000001F671                 db  44h ; D
.eh_frame:000000000001F672                 db  0Eh
.eh_frame:000000000001F673                 db  30h ; 0
.eh_frame:000000000001F674                 db  86h
.eh_frame:000000000001F675                 db    6
.eh_frame:000000000001F676                 db  41h ; A
.eh_frame:000000000001F677                 db  0Eh
.eh_frame:000000000001F678                 db  38h ; 8
.eh_frame:000000000001F679                 db  83h
.eh_frame:000000000001F67A                 db    7
.eh_frame:000000000001F67B                 db  44h ; D
.eh_frame:000000000001F67C                 db  0Eh
.eh_frame:000000000001F67D                 db 0A0h
.eh_frame:000000000001F67E                 db    1
.eh_frame:000000000001F67F                 db    3
.eh_frame:000000000001F680                 db  5Dh ; ]
.eh_frame:000000000001F681                 db    1
.eh_frame:000000000001F682                 db  0Eh
.eh_frame:000000000001F683                 db 0A8h
.eh_frame:000000000001F684                 db    1
.eh_frame:000000000001F685                 db  51h ; Q
.eh_frame:000000000001F686                 db  0Eh
.eh_frame:000000000001F687                 db 0B0h
.eh_frame:000000000001F688                 db    1
.eh_frame:000000000001F689                 db  52h ; R
.eh_frame:000000000001F68A                 db  0Eh
.eh_frame:000000000001F68B                 db 0A8h
.eh_frame:000000000001F68C                 db    1
.eh_frame:000000000001F68D                 db  41h ; A
.eh_frame:000000000001F68E                 db  0Eh
.eh_frame:000000000001F68F                 db 0A0h
.eh_frame:000000000001F690                 db    1
.eh_frame:000000000001F691                 db    3
.eh_frame:000000000001F692                 db  94h
.eh_frame:000000000001F693                 db    1
.eh_frame:000000000001F694                 db  0Ah
.eh_frame:000000000001F695                 db  0Eh
.eh_frame:000000000001F696                 db  38h ; 8
.eh_frame:000000000001F697                 db  41h ; A
.eh_frame:000000000001F698                 db  0Eh
.eh_frame:000000000001F699                 db  30h ; 0
.eh_frame:000000000001F69A                 db  41h ; A
.eh_frame:000000000001F69B                 db  0Eh
.eh_frame:000000000001F69C                 db  28h ; (
.eh_frame:000000000001F69D                 db  42h ; B
.eh_frame:000000000001F69E                 db  0Eh
.eh_frame:000000000001F69F                 db  20h
.eh_frame:000000000001F6A0                 db  42h ; B
.eh_frame:000000000001F6A1                 db  0Eh
.eh_frame:000000000001F6A2                 db  18h
.eh_frame:000000000001F6A3                 db  42h ; B
.eh_frame:000000000001F6A4                 db  0Eh
.eh_frame:000000000001F6A5                 db  10h
.eh_frame:000000000001F6A6                 db  42h ; B
.eh_frame:000000000001F6A7                 db  0Eh
.eh_frame:000000000001F6A8                 db    8
.eh_frame:000000000001F6A9                 db  41h ; A
.eh_frame:000000000001F6AA                 db  0Bh
.eh_frame:000000000001F6AB                 db    0
.eh_frame:000000000001F6AC                 db  4Ch ; L
.eh_frame:000000000001F6AD                 db    0
.eh_frame:000000000001F6AE                 db    0
.eh_frame:000000000001F6AF                 db    0
.eh_frame:000000000001F6B0                 db  40h ; @
.eh_frame:000000000001F6B1                 db  20h
.eh_frame:000000000001F6B2                 db    0
.eh_frame:000000000001F6B3                 db    0
.eh_frame:000000000001F6B4                 db 0BCh
.eh_frame:000000000001F6B5                 db  32h ; 2
.eh_frame:000000000001F6B6                 db 0FFh
.eh_frame:000000000001F6B7                 db 0FFh
.eh_frame:000000000001F6B8                 db  30h ; 0
.eh_frame:000000000001F6B9                 db  17h
.eh_frame:000000000001F6BA                 db    0
.eh_frame:000000000001F6BB                 db    0
.eh_frame:000000000001F6BC                 db    0
.eh_frame:000000000001F6BD                 db  42h ; B
.eh_frame:000000000001F6BE                 db  0Eh
.eh_frame:000000000001F6BF                 db  10h
.eh_frame:000000000001F6C0                 db  8Fh
.eh_frame:000000000001F6C1                 db    2
.eh_frame:000000000001F6C2                 db  42h ; B
.eh_frame:000000000001F6C3                 db  0Eh
.eh_frame:000000000001F6C4                 db  18h
.eh_frame:000000000001F6C5                 db  8Eh
.eh_frame:000000000001F6C6                 db    3
.eh_frame:000000000001F6C7                 db  42h ; B
.eh_frame:000000000001F6C8                 db  0Eh
.eh_frame:000000000001F6C9                 db  20h
.eh_frame:000000000001F6CA                 db  8Dh
.eh_frame:000000000001F6CB                 db    4
.eh_frame:000000000001F6CC                 db  42h ; B
.eh_frame:000000000001F6CD                 db  0Eh
.eh_frame:000000000001F6CE                 db  28h ; (
.eh_frame:000000000001F6CF                 db  8Ch
.eh_frame:000000000001F6D0                 db    5
.eh_frame:000000000001F6D1                 db  44h ; D
.eh_frame:000000000001F6D2                 db  0Eh
.eh_frame:000000000001F6D3                 db  30h ; 0
.eh_frame:000000000001F6D4                 db  86h
.eh_frame:000000000001F6D5                 db    6
.eh_frame:000000000001F6D6                 db  41h ; A
.eh_frame:000000000001F6D7                 db  0Eh
.eh_frame:000000000001F6D8                 db  38h ; 8
.eh_frame:000000000001F6D9                 db  83h
.eh_frame:000000000001F6DA                 db    7
.eh_frame:000000000001F6DB                 db  52h ; R
.eh_frame:000000000001F6DC                 db  0Eh
.eh_frame:000000000001F6DD                 db 0F0h
.eh_frame:000000000001F6DE                 db    4
.eh_frame:000000000001F6DF                 db    3
.eh_frame:000000000001F6E0                 db  7Ch ; |
.eh_frame:000000000001F6E1                 db  0Bh
.eh_frame:000000000001F6E2                 db  0Ah
.eh_frame:000000000001F6E3                 db  0Eh
.eh_frame:000000000001F6E4                 db  38h ; 8
.eh_frame:000000000001F6E5                 db  41h ; A
.eh_frame:000000000001F6E6                 db  0Eh
.eh_frame:000000000001F6E7                 db  30h ; 0
.eh_frame:000000000001F6E8                 db  41h ; A
.eh_frame:000000000001F6E9                 db  0Eh
.eh_frame:000000000001F6EA                 db  28h ; (
.eh_frame:000000000001F6EB                 db  42h ; B
.eh_frame:000000000001F6EC                 db  0Eh
.eh_frame:000000000001F6ED                 db  20h
.eh_frame:000000000001F6EE                 db  42h ; B
.eh_frame:000000000001F6EF                 db  0Eh
.eh_frame:000000000001F6F0                 db  18h
.eh_frame:000000000001F6F1                 db  42h ; B
.eh_frame:000000000001F6F2                 db  0Eh
.eh_frame:000000000001F6F3                 db  10h
.eh_frame:000000000001F6F4                 db  42h ; B
.eh_frame:000000000001F6F5                 db  0Eh
.eh_frame:000000000001F6F6                 db    8
.eh_frame:000000000001F6F7                 db  4Bh ; K
.eh_frame:000000000001F6F8                 db  0Bh
.eh_frame:000000000001F6F9                 db    0
.eh_frame:000000000001F6FA                 db    0
.eh_frame:000000000001F6FB                 db    0
.eh_frame:000000000001F6FC                 db  5Ch ; \
.eh_frame:000000000001F6FD                 db    0
.eh_frame:000000000001F6FE                 db    0
.eh_frame:000000000001F6FF                 db    0
.eh_frame:000000000001F700                 db  90h
.eh_frame:000000000001F701                 db  20h
.eh_frame:000000000001F702                 db    0
.eh_frame:000000000001F703                 db    0
.eh_frame:000000000001F704                 db  9Ch
.eh_frame:000000000001F705                 db  49h ; I
.eh_frame:000000000001F706                 db 0FFh
.eh_frame:000000000001F707                 db 0FFh
.eh_frame:000000000001F708                 db  50h ; P
.eh_frame:000000000001F709                 db    8
.eh_frame:000000000001F70A                 db    0
.eh_frame:000000000001F70B                 db    0
.eh_frame:000000000001F70C                 db    0
.eh_frame:000000000001F70D                 db  42h ; B
.eh_frame:000000000001F70E                 db  0Eh
.eh_frame:000000000001F70F                 db  10h
.eh_frame:000000000001F710                 db  8Fh
.eh_frame:000000000001F711                 db    2
.eh_frame:000000000001F712                 db  42h ; B
.eh_frame:000000000001F713                 db  0Eh
.eh_frame:000000000001F714                 db  18h
.eh_frame:000000000001F715                 db  8Eh
.eh_frame:000000000001F716                 db    3
.eh_frame:000000000001F717                 db  45h ; E
.eh_frame:000000000001F718                 db  0Eh
.eh_frame:000000000001F719                 db  20h
.eh_frame:000000000001F71A                 db  8Dh
.eh_frame:000000000001F71B                 db    4
.eh_frame:000000000001F71C                 db  42h ; B
.eh_frame:000000000001F71D                 db  0Eh
.eh_frame:000000000001F71E                 db  28h ; (
.eh_frame:000000000001F71F                 db  8Ch
.eh_frame:000000000001F720                 db    5
.eh_frame:000000000001F721                 db  44h ; D
.eh_frame:000000000001F722                 db  0Eh
.eh_frame:000000000001F723                 db  30h ; 0
.eh_frame:000000000001F724                 db  86h
.eh_frame:000000000001F725                 db    6
.eh_frame:000000000001F726                 db  41h ; A
.eh_frame:000000000001F727                 db  0Eh
.eh_frame:000000000001F728                 db  38h ; 8
.eh_frame:000000000001F729                 db  83h
.eh_frame:000000000001F72A                 db    7
.eh_frame:000000000001F72B                 db  55h ; U
.eh_frame:000000000001F72C                 db  0Eh
.eh_frame:000000000001F72D                 db 0E0h
.eh_frame:000000000001F72E                 db    1
.eh_frame:000000000001F72F                 db    2
.eh_frame:000000000001F730                 db  91h
.eh_frame:000000000001F731                 db  0Ah
.eh_frame:000000000001F732                 db  0Eh
.eh_frame:000000000001F733                 db  38h ; 8
.eh_frame:000000000001F734                 db  41h ; A
.eh_frame:000000000001F735                 db  0Eh
.eh_frame:000000000001F736                 db  30h ; 0
.eh_frame:000000000001F737                 db  41h ; A
.eh_frame:000000000001F738                 db  0Eh
.eh_frame:000000000001F739                 db  28h ; (
.eh_frame:000000000001F73A                 db  42h ; B
.eh_frame:000000000001F73B                 db  0Eh
.eh_frame:000000000001F73C                 db  20h
.eh_frame:000000000001F73D                 db  42h ; B
.eh_frame:000000000001F73E                 db  0Eh
.eh_frame:000000000001F73F                 db  18h
.eh_frame:000000000001F740                 db  42h ; B
.eh_frame:000000000001F741                 db  0Eh
.eh_frame:000000000001F742                 db  10h
.eh_frame:000000000001F743                 db  42h ; B
.eh_frame:000000000001F744                 db  0Eh
.eh_frame:000000000001F745                 db    8
.eh_frame:000000000001F746                 db  48h ; H
.eh_frame:000000000001F747                 db  0Bh
.eh_frame:000000000001F748                 db    3
.eh_frame:000000000001F749                 db 0C3h
.eh_frame:000000000001F74A                 db    5
.eh_frame:000000000001F74B                 db  0Eh
.eh_frame:000000000001F74C                 db 0E8h
.eh_frame:000000000001F74D                 db    1
.eh_frame:000000000001F74E                 db  4Ah ; J
.eh_frame:000000000001F74F                 db  0Eh
.eh_frame:000000000001F750                 db 0F0h
.eh_frame:000000000001F751                 db    1
.eh_frame:000000000001F752                 db  56h ; V
.eh_frame:000000000001F753                 db  0Eh
.eh_frame:000000000001F754                 db 0E8h
.eh_frame:000000000001F755                 db    1
.eh_frame:000000000001F756                 db  41h ; A
.eh_frame:000000000001F757                 db  0Eh
.eh_frame:000000000001F758                 db 0E0h
.eh_frame:000000000001F759                 db    1
.eh_frame:000000000001F75A                 db    0
.eh_frame:000000000001F75B                 db    0
.eh_frame:000000000001F75C                 db  40h ; @
.eh_frame:000000000001F75D                 db    0
.eh_frame:000000000001F75E                 db    0
.eh_frame:000000000001F75F                 db    0
.eh_frame:000000000001F760                 db 0F0h
.eh_frame:000000000001F761                 db  20h
.eh_frame:000000000001F762                 db    0
.eh_frame:000000000001F763                 db    0
.eh_frame:000000000001F764                 db  8Ch
.eh_frame:000000000001F765                 db  51h ; Q
.eh_frame:000000000001F766                 db 0FFh
.eh_frame:000000000001F767                 db 0FFh
.eh_frame:000000000001F768                 db  5Dh ; ]
.eh_frame:000000000001F769                 db    2
.eh_frame:000000000001F76A                 db    0
.eh_frame:000000000001F76B                 db    0
.eh_frame:000000000001F76C                 db    0
.eh_frame:000000000001F76D                 db  42h ; B
.eh_frame:000000000001F76E                 db  0Eh
.eh_frame:000000000001F76F                 db  10h
.eh_frame:000000000001F770                 db  8Eh
.eh_frame:000000000001F771                 db    2
.eh_frame:000000000001F772                 db  42h ; B
.eh_frame:000000000001F773                 db  0Eh
.eh_frame:000000000001F774                 db  18h
.eh_frame:000000000001F775                 db  8Dh
.eh_frame:000000000001F776                 db    3
.eh_frame:000000000001F777                 db  45h ; E
.eh_frame:000000000001F778                 db  0Eh
.eh_frame:000000000001F779                 db  20h
.eh_frame:000000000001F77A                 db  8Ch
.eh_frame:000000000001F77B                 db    4
.eh_frame:000000000001F77C                 db  41h ; A
.eh_frame:000000000001F77D                 db  0Eh
.eh_frame:000000000001F77E                 db  28h ; (
.eh_frame:000000000001F77F                 db  86h
.eh_frame:000000000001F780                 db    5
.eh_frame:000000000001F781                 db  44h ; D
.eh_frame:000000000001F782                 db  0Eh
.eh_frame:000000000001F783                 db  30h ; 0
.eh_frame:000000000001F784                 db  83h
.eh_frame:000000000001F785                 db    6
.eh_frame:000000000001F786                 db  4Ah ; J
.eh_frame:000000000001F787                 db  0Eh
.eh_frame:000000000001F788                 db  50h ; P
.eh_frame:000000000001F789                 db    2
.eh_frame:000000000001F78A                 db  61h ; a
.eh_frame:000000000001F78B                 db  0Ah
.eh_frame:000000000001F78C                 db  0Eh
.eh_frame:000000000001F78D                 db  30h ; 0
.eh_frame:000000000001F78E                 db  41h ; A
.eh_frame:000000000001F78F                 db  0Eh
.eh_frame:000000000001F790                 db  28h ; (
.eh_frame:000000000001F791                 db  41h ; A
.eh_frame:000000000001F792                 db  0Eh
.eh_frame:000000000001F793                 db  20h
.eh_frame:000000000001F794                 db  42h ; B
.eh_frame:000000000001F795                 db  0Eh
.eh_frame:000000000001F796                 db  18h
.eh_frame:000000000001F797                 db  42h ; B
.eh_frame:000000000001F798                 db  0Eh
.eh_frame:000000000001F799                 db  10h
.eh_frame:000000000001F79A                 db  42h ; B
.eh_frame:000000000001F79B                 db  0Eh
.eh_frame:000000000001F79C                 db    8
.eh_frame:000000000001F79D                 db  47h ; G
.eh_frame:000000000001F79E                 db  0Bh
.eh_frame:000000000001F79F                 db    0
.eh_frame:000000000001F7A0                 db  48h ; H
.eh_frame:000000000001F7A1                 db    0
.eh_frame:000000000001F7A2                 db    0
.eh_frame:000000000001F7A3                 db    0
.eh_frame:000000000001F7A4                 db  34h ; 4
.eh_frame:000000000001F7A5                 db  21h ; !
.eh_frame:000000000001F7A6                 db    0
.eh_frame:000000000001F7A7                 db    0
.eh_frame:000000000001F7A8                 db 0A8h
.eh_frame:000000000001F7A9                 db  53h ; S
.eh_frame:000000000001F7AA                 db 0FFh
.eh_frame:000000000001F7AB                 db 0FFh
.eh_frame:000000000001F7AC                 db 0FDh
.eh_frame:000000000001F7AD                 db    6
.eh_frame:000000000001F7AE                 db    0
.eh_frame:000000000001F7AF                 db    0
.eh_frame:000000000001F7B0                 db    0
.eh_frame:000000000001F7B1                 db  42h ; B
.eh_frame:000000000001F7B2                 db  0Eh
.eh_frame:000000000001F7B3                 db  10h
.eh_frame:000000000001F7B4                 db  8Fh
.eh_frame:000000000001F7B5                 db    2
.eh_frame:000000000001F7B6                 db  42h ; B
.eh_frame:000000000001F7B7                 db  0Eh
.eh_frame:000000000001F7B8                 db  18h
.eh_frame:000000000001F7B9                 db  8Eh
.eh_frame:000000000001F7BA                 db    3
.eh_frame:000000000001F7BB                 db  42h ; B
.eh_frame:000000000001F7BC                 db  0Eh
.eh_frame:000000000001F7BD                 db  20h
.eh_frame:000000000001F7BE                 db  8Dh
.eh_frame:000000000001F7BF                 db    4
.eh_frame:000000000001F7C0                 db  42h ; B
.eh_frame:000000000001F7C1                 db  0Eh
.eh_frame:000000000001F7C2                 db  28h ; (
.eh_frame:000000000001F7C3                 db  8Ch
.eh_frame:000000000001F7C4                 db    5
.eh_frame:000000000001F7C5                 db  41h ; A
.eh_frame:000000000001F7C6                 db  0Eh
.eh_frame:000000000001F7C7                 db  30h ; 0
.eh_frame:000000000001F7C8                 db  86h
.eh_frame:000000000001F7C9                 db    6
.eh_frame:000000000001F7CA                 db  41h ; A
.eh_frame:000000000001F7CB                 db  0Eh
.eh_frame:000000000001F7CC                 db  38h ; 8
.eh_frame:000000000001F7CD                 db  83h
.eh_frame:000000000001F7CE                 db    7
.eh_frame:000000000001F7CF                 db  47h ; G
.eh_frame:000000000001F7D0                 db  0Eh
.eh_frame:000000000001F7D1                 db  70h ; p
.eh_frame:000000000001F7D2                 db    2
.eh_frame:000000000001F7D3                 db 0CBh
.eh_frame:000000000001F7D4                 db  0Ah
.eh_frame:000000000001F7D5                 db  0Eh
.eh_frame:000000000001F7D6                 db  38h ; 8
.eh_frame:000000000001F7D7                 db  41h ; A
.eh_frame:000000000001F7D8                 db  0Eh
.eh_frame:000000000001F7D9                 db  30h ; 0
.eh_frame:000000000001F7DA                 db  41h ; A
.eh_frame:000000000001F7DB                 db  0Eh
.eh_frame:000000000001F7DC                 db  28h ; (
.eh_frame:000000000001F7DD                 db  42h ; B
.eh_frame:000000000001F7DE                 db  0Eh
.eh_frame:000000000001F7DF                 db  20h
.eh_frame:000000000001F7E0                 db  42h ; B
.eh_frame:000000000001F7E1                 db  0Eh
.eh_frame:000000000001F7E2                 db  18h
.eh_frame:000000000001F7E3                 db  42h ; B
.eh_frame:000000000001F7E4                 db  0Eh
.eh_frame:000000000001F7E5                 db  10h
.eh_frame:000000000001F7E6                 db  42h ; B
.eh_frame:000000000001F7E7                 db  0Eh
.eh_frame:000000000001F7E8                 db    8
.eh_frame:000000000001F7E9                 db  4Ah ; J
.eh_frame:000000000001F7EA                 db  0Bh
.eh_frame:000000000001F7EB                 db    0
.eh_frame:000000000001F7EC                 db  3Ch ; <
.eh_frame:000000000001F7ED                 db    0
.eh_frame:000000000001F7EE                 db    0
.eh_frame:000000000001F7EF                 db    0
.eh_frame:000000000001F7F0                 db  80h
.eh_frame:000000000001F7F1                 db  21h ; !
.eh_frame:000000000001F7F2                 db    0
.eh_frame:000000000001F7F3                 db    0
.eh_frame:000000000001F7F4                 db  5Ch ; \
.eh_frame:000000000001F7F5                 db  5Ah ; Z
.eh_frame:000000000001F7F6                 db 0FFh
.eh_frame:000000000001F7F7                 db 0FFh
.eh_frame:000000000001F7F8                 db 0B6h
.eh_frame:000000000001F7F9                 db    0
.eh_frame:000000000001F7FA                 db    0
.eh_frame:000000000001F7FB                 db    0
.eh_frame:000000000001F7FC                 db    0
.eh_frame:000000000001F7FD                 db  42h ; B
.eh_frame:000000000001F7FE                 db  0Eh
.eh_frame:000000000001F7FF                 db  10h
.eh_frame:000000000001F800                 db  8Eh
.eh_frame:000000000001F801                 db    2
.eh_frame:000000000001F802                 db  45h ; E
.eh_frame:000000000001F803                 db  0Eh
.eh_frame:000000000001F804                 db  18h
.eh_frame:000000000001F805                 db  8Dh
.eh_frame:000000000001F806                 db    3
.eh_frame:000000000001F807                 db  45h ; E
.eh_frame:000000000001F808                 db  0Eh
.eh_frame:000000000001F809                 db  20h
.eh_frame:000000000001F80A                 db  8Ch
.eh_frame:000000000001F80B                 db    4
.eh_frame:000000000001F80C                 db  48h ; H
.eh_frame:000000000001F80D                 db  0Eh
.eh_frame:000000000001F80E                 db  28h ; (
.eh_frame:000000000001F80F                 db  86h
.eh_frame:000000000001F810                 db    5
.eh_frame:000000000001F811                 db  44h ; D
.eh_frame:000000000001F812                 db  0Eh
.eh_frame:000000000001F813                 db  30h ; 0
.eh_frame:000000000001F814                 db  83h
.eh_frame:000000000001F815                 db    6
.eh_frame:000000000001F816                 db    2
.eh_frame:000000000001F817                 db  83h
.eh_frame:000000000001F818                 db  0Ah
.eh_frame:000000000001F819                 db  0Eh
.eh_frame:000000000001F81A                 db  28h ; (
.eh_frame:000000000001F81B                 db  41h ; A
.eh_frame:000000000001F81C                 db  0Eh
.eh_frame:000000000001F81D                 db  20h
.eh_frame:000000000001F81E                 db  42h ; B
.eh_frame:000000000001F81F                 db  0Eh
.eh_frame:000000000001F820                 db  18h
.eh_frame:000000000001F821                 db  42h ; B
.eh_frame:000000000001F822                 db  0Eh
.eh_frame:000000000001F823                 db  10h
.eh_frame:000000000001F824                 db  42h ; B
.eh_frame:000000000001F825                 db  0Eh
.eh_frame:000000000001F826                 db    8
.eh_frame:000000000001F827                 db  46h ; F
.eh_frame:000000000001F828                 db  0Bh
.eh_frame:000000000001F829                 db    0
.eh_frame:000000000001F82A                 db    0
.eh_frame:000000000001F82B                 db    0
.eh_frame:000000000001F82C                 db  5Ch ; \
.eh_frame:000000000001F82D                 db    0
.eh_frame:000000000001F82E                 db    0
.eh_frame:000000000001F82F                 db    0
.eh_frame:000000000001F830                 db 0C0h
.eh_frame:000000000001F831                 db  21h ; !
.eh_frame:000000000001F832                 db    0
.eh_frame:000000000001F833                 db    0
.eh_frame:000000000001F834                 db 0DCh
.eh_frame:000000000001F835                 db  5Ah ; Z
.eh_frame:000000000001F836                 db 0FFh
.eh_frame:000000000001F837                 db 0FFh
.eh_frame:000000000001F838                 db 0D3h
.eh_frame:000000000001F839                 db  14h
.eh_frame:000000000001F83A                 db    0
.eh_frame:000000000001F83B                 db    0
.eh_frame:000000000001F83C                 db    0
.eh_frame:000000000001F83D                 db  42h ; B
.eh_frame:000000000001F83E                 db  0Eh
.eh_frame:000000000001F83F                 db  10h
.eh_frame:000000000001F840                 db  8Fh
.eh_frame:000000000001F841                 db    2
.eh_frame:000000000001F842                 db  42h ; B
.eh_frame:000000000001F843                 db  0Eh
.eh_frame:000000000001F844                 db  18h
.eh_frame:000000000001F845                 db  8Eh
.eh_frame:000000000001F846                 db    3
.eh_frame:000000000001F847                 db  42h ; B
.eh_frame:000000000001F848                 db  0Eh
.eh_frame:000000000001F849                 db  20h
.eh_frame:000000000001F84A                 db  8Dh
.eh_frame:000000000001F84B                 db    4
.eh_frame:000000000001F84C                 db  42h ; B
.eh_frame:000000000001F84D                 db  0Eh
.eh_frame:000000000001F84E                 db  28h ; (
.eh_frame:000000000001F84F                 db  8Ch
.eh_frame:000000000001F850                 db    5
.eh_frame:000000000001F851                 db  41h ; A
.eh_frame:000000000001F852                 db  0Eh
.eh_frame:000000000001F853                 db  30h ; 0
.eh_frame:000000000001F854                 db  86h
.eh_frame:000000000001F855                 db    6
.eh_frame:000000000001F856                 db  41h ; A
.eh_frame:000000000001F857                 db  0Eh
.eh_frame:000000000001F858                 db  38h ; 8
.eh_frame:000000000001F859                 db  83h
.eh_frame:000000000001F85A                 db    7
.eh_frame:000000000001F85B                 db  47h ; G
.eh_frame:000000000001F85C                 db  0Eh
.eh_frame:000000000001F85D                 db 0E0h
.eh_frame:000000000001F85E                 db    2
.eh_frame:000000000001F85F                 db    3
.eh_frame:000000000001F860                 db  22h ; "
.eh_frame:000000000001F861                 db    1
.eh_frame:000000000001F862                 db  0Ah
.eh_frame:000000000001F863                 db  0Eh
.eh_frame:000000000001F864                 db  38h ; 8
.eh_frame:000000000001F865                 db  41h ; A
.eh_frame:000000000001F866                 db  0Eh
.eh_frame:000000000001F867                 db  30h ; 0
.eh_frame:000000000001F868                 db  41h ; A
.eh_frame:000000000001F869                 db  0Eh
.eh_frame:000000000001F86A                 db  28h ; (
.eh_frame:000000000001F86B                 db  42h ; B
.eh_frame:000000000001F86C                 db  0Eh
.eh_frame:000000000001F86D                 db  20h
.eh_frame:000000000001F86E                 db  42h ; B
.eh_frame:000000000001F86F                 db  0Eh
.eh_frame:000000000001F870                 db  18h
.eh_frame:000000000001F871                 db  42h ; B
.eh_frame:000000000001F872                 db  0Eh
.eh_frame:000000000001F873                 db  10h
.eh_frame:000000000001F874                 db  42h ; B
.eh_frame:000000000001F875                 db  0Eh
.eh_frame:000000000001F876                 db    8
.eh_frame:000000000001F877                 db  41h ; A
.eh_frame:000000000001F878                 db  0Bh
.eh_frame:000000000001F879                 db    3
.eh_frame:000000000001F87A                 db 0BFh
.eh_frame:000000000001F87B                 db  0Bh
.eh_frame:000000000001F87C                 db  0Eh
.eh_frame:000000000001F87D                 db 0E8h
.eh_frame:000000000001F87E                 db    2
.eh_frame:000000000001F87F                 db  4Ch ; L
.eh_frame:000000000001F880                 db  0Eh
.eh_frame:000000000001F881                 db 0F0h
.eh_frame:000000000001F882                 db    2
.eh_frame:000000000001F883                 db  64h ; d
.eh_frame:000000000001F884                 db  0Eh
.eh_frame:000000000001F885                 db 0E8h
.eh_frame:000000000001F886                 db    2
.eh_frame:000000000001F887                 db  42h ; B
.eh_frame:000000000001F888                 db  0Eh
.eh_frame:000000000001F889                 db 0E0h
.eh_frame:000000000001F88A                 db    2
.eh_frame:000000000001F88B                 db    0
.eh_frame:000000000001F88C                 db  48h ; H
.eh_frame:000000000001F88D                 db    0
.eh_frame:000000000001F88E                 db    0
.eh_frame:000000000001F88F                 db    0
.eh_frame:000000000001F890                 db  20h
.eh_frame:000000000001F891                 db  22h ; "
.eh_frame:000000000001F892                 db    0
.eh_frame:000000000001F893                 db    0
.eh_frame:000000000001F894                 db  5Ch ; \
.eh_frame:000000000001F895                 db  6Fh ; o
.eh_frame:000000000001F896                 db 0FFh
.eh_frame:000000000001F897                 db 0FFh
.eh_frame:000000000001F898                 db  82h
.eh_frame:000000000001F899                 db    1
.eh_frame:000000000001F89A                 db    0
.eh_frame:000000000001F89B                 db    0
.eh_frame:000000000001F89C                 db    0
.eh_frame:000000000001F89D                 db  42h ; B
.eh_frame:000000000001F89E                 db  0Eh
.eh_frame:000000000001F89F                 db  10h
.eh_frame:000000000001F8A0                 db  8Fh
.eh_frame:000000000001F8A1                 db    2
.eh_frame:000000000001F8A2                 db  42h ; B
.eh_frame:000000000001F8A3                 db  0Eh
.eh_frame:000000000001F8A4                 db  18h
.eh_frame:000000000001F8A5                 db  8Eh
.eh_frame:000000000001F8A6                 db    3
.eh_frame:000000000001F8A7                 db  45h ; E
.eh_frame:000000000001F8A8                 db  0Eh
.eh_frame:000000000001F8A9                 db  20h
.eh_frame:000000000001F8AA                 db  8Dh
.eh_frame:000000000001F8AB                 db    4
.eh_frame:000000000001F8AC                 db  42h ; B
.eh_frame:000000000001F8AD                 db  0Eh
.eh_frame:000000000001F8AE                 db  28h ; (
.eh_frame:000000000001F8AF                 db  8Ch
.eh_frame:000000000001F8B0                 db    5
.eh_frame:000000000001F8B1                 db  44h ; D
.eh_frame:000000000001F8B2                 db  0Eh
.eh_frame:000000000001F8B3                 db  30h ; 0
.eh_frame:000000000001F8B4                 db  86h
.eh_frame:000000000001F8B5                 db    6
.eh_frame:000000000001F8B6                 db  41h ; A
.eh_frame:000000000001F8B7                 db  0Eh
.eh_frame:000000000001F8B8                 db  38h ; 8
.eh_frame:000000000001F8B9                 db  83h
.eh_frame:000000000001F8BA                 db    7
.eh_frame:000000000001F8BB                 db  4Dh ; M
.eh_frame:000000000001F8BC                 db  0Eh
.eh_frame:000000000001F8BD                 db  80h
.eh_frame:000000000001F8BE                 db    1
.eh_frame:000000000001F8BF                 db    2
.eh_frame:000000000001F8C0                 db 0FAh
.eh_frame:000000000001F8C1                 db  0Ah
.eh_frame:000000000001F8C2                 db  0Eh
.eh_frame:000000000001F8C3                 db  38h ; 8
.eh_frame:000000000001F8C4                 db  41h ; A
.eh_frame:000000000001F8C5                 db  0Eh
.eh_frame:000000000001F8C6                 db  30h ; 0
.eh_frame:000000000001F8C7                 db  41h ; A
.eh_frame:000000000001F8C8                 db  0Eh
.eh_frame:000000000001F8C9                 db  28h ; (
.eh_frame:000000000001F8CA                 db  42h ; B
.eh_frame:000000000001F8CB                 db  0Eh
.eh_frame:000000000001F8CC                 db  20h
.eh_frame:000000000001F8CD                 db  42h ; B
.eh_frame:000000000001F8CE                 db  0Eh
.eh_frame:000000000001F8CF                 db  18h
.eh_frame:000000000001F8D0                 db  42h ; B
.eh_frame:000000000001F8D1                 db  0Eh
.eh_frame:000000000001F8D2                 db  10h
.eh_frame:000000000001F8D3                 db  42h ; B
.eh_frame:000000000001F8D4                 db  0Eh
.eh_frame:000000000001F8D5                 db    8
.eh_frame:000000000001F8D6                 db  47h ; G
.eh_frame:000000000001F8D7                 db  0Bh
.eh_frame:000000000001F8D8                 db  4Ch ; L
.eh_frame:000000000001F8D9                 db    0
.eh_frame:000000000001F8DA                 db    0
.eh_frame:000000000001F8DB                 db    0
.eh_frame:000000000001F8DC                 db  6Ch ; l
.eh_frame:000000000001F8DD                 db  22h ; "
.eh_frame:000000000001F8DE                 db    0
.eh_frame:000000000001F8DF                 db    0
.eh_frame:000000000001F8E0                 db 0A0h
.eh_frame:000000000001F8E1                 db  70h ; p
.eh_frame:000000000001F8E2                 db 0FFh
.eh_frame:000000000001F8E3                 db 0FFh
.eh_frame:000000000001F8E4                 db  7Fh ; 
.eh_frame:000000000001F8E5                 db    1
.eh_frame:000000000001F8E6                 db    0
.eh_frame:000000000001F8E7                 db    0
.eh_frame:000000000001F8E8                 db    0
.eh_frame:000000000001F8E9                 db  42h ; B
.eh_frame:000000000001F8EA                 db  0Eh
.eh_frame:000000000001F8EB                 db  10h
.eh_frame:000000000001F8EC                 db  8Fh
.eh_frame:000000000001F8ED                 db    2
.eh_frame:000000000001F8EE                 db  42h ; B
.eh_frame:000000000001F8EF                 db  0Eh
.eh_frame:000000000001F8F0                 db  18h
.eh_frame:000000000001F8F1                 db  8Eh
.eh_frame:000000000001F8F2                 db    3
.eh_frame:000000000001F8F3                 db  45h ; E
.eh_frame:000000000001F8F4                 db  0Eh
.eh_frame:000000000001F8F5                 db  20h
.eh_frame:000000000001F8F6                 db  8Dh
.eh_frame:000000000001F8F7                 db    4
.eh_frame:000000000001F8F8                 db  42h ; B
.eh_frame:000000000001F8F9                 db  0Eh
.eh_frame:000000000001F8FA                 db  28h ; (
.eh_frame:000000000001F8FB                 db  8Ch
.eh_frame:000000000001F8FC                 db    5
.eh_frame:000000000001F8FD                 db  44h ; D
.eh_frame:000000000001F8FE                 db  0Eh
.eh_frame:000000000001F8FF                 db  30h ; 0
.eh_frame:000000000001F900                 db  86h
.eh_frame:000000000001F901                 db    6
.eh_frame:000000000001F902                 db  41h ; A
.eh_frame:000000000001F903                 db  0Eh
.eh_frame:000000000001F904                 db  38h ; 8
.eh_frame:000000000001F905                 db  83h
.eh_frame:000000000001F906                 db    7
.eh_frame:000000000001F907                 db  4Ah ; J
.eh_frame:000000000001F908                 db  0Eh
.eh_frame:000000000001F909                 db  90h
.eh_frame:000000000001F90A                 db    1
.eh_frame:000000000001F90B                 db    3
.eh_frame:000000000001F90C                 db  45h ; E
.eh_frame:000000000001F90D                 db    1
.eh_frame:000000000001F90E                 db  0Ah
.eh_frame:000000000001F90F                 db  0Eh
.eh_frame:000000000001F910                 db  38h ; 8
.eh_frame:000000000001F911                 db  41h ; A
.eh_frame:000000000001F912                 db  0Eh
.eh_frame:000000000001F913                 db  30h ; 0
.eh_frame:000000000001F914                 db  41h ; A
.eh_frame:000000000001F915                 db  0Eh
.eh_frame:000000000001F916                 db  28h ; (
.eh_frame:000000000001F917                 db  42h ; B
.eh_frame:000000000001F918                 db  0Eh
.eh_frame:000000000001F919                 db  20h
.eh_frame:000000000001F91A                 db  42h ; B
.eh_frame:000000000001F91B                 db  0Eh
.eh_frame:000000000001F91C                 db  18h
.eh_frame:000000000001F91D                 db  42h ; B
.eh_frame:000000000001F91E                 db  0Eh
.eh_frame:000000000001F91F                 db  10h
.eh_frame:000000000001F920                 db  42h ; B
.eh_frame:000000000001F921                 db  0Eh
.eh_frame:000000000001F922                 db    8
.eh_frame:000000000001F923                 db  47h ; G
.eh_frame:000000000001F924                 db  0Bh
.eh_frame:000000000001F925                 db    0
.eh_frame:000000000001F926                 db    0
.eh_frame:000000000001F927                 db    0
.eh_frame:000000000001F928                 db  4Ch ; L
.eh_frame:000000000001F929                 db    0
.eh_frame:000000000001F92A                 db    0
.eh_frame:000000000001F92B                 db    0
.eh_frame:000000000001F92C                 db 0BCh
.eh_frame:000000000001F92D                 db  22h ; "
.eh_frame:000000000001F92E                 db    0
.eh_frame:000000000001F92F                 db    0
.eh_frame:000000000001F930                 db 0D0h
.eh_frame:000000000001F931                 db  71h ; q
.eh_frame:000000000001F932                 db 0FFh
.eh_frame:000000000001F933                 db 0FFh
.eh_frame:000000000001F934                 db 0F5h
.eh_frame:000000000001F935                 db  10h
.eh_frame:000000000001F936                 db    0
.eh_frame:000000000001F937                 db    0
.eh_frame:000000000001F938                 db    0
.eh_frame:000000000001F939                 db  42h ; B
.eh_frame:000000000001F93A                 db  0Eh
.eh_frame:000000000001F93B                 db  10h
.eh_frame:000000000001F93C                 db  8Fh
.eh_frame:000000000001F93D                 db    2
.eh_frame:000000000001F93E                 db  42h ; B
.eh_frame:000000000001F93F                 db  0Eh
.eh_frame:000000000001F940                 db  18h
.eh_frame:000000000001F941                 db  8Eh
.eh_frame:000000000001F942                 db    3
.eh_frame:000000000001F943                 db  42h ; B
.eh_frame:000000000001F944                 db  0Eh
.eh_frame:000000000001F945                 db  20h
.eh_frame:000000000001F946                 db  8Dh
.eh_frame:000000000001F947                 db    4
.eh_frame:000000000001F948                 db  42h ; B
.eh_frame:000000000001F949                 db  0Eh
.eh_frame:000000000001F94A                 db  28h ; (
.eh_frame:000000000001F94B                 db  8Ch
.eh_frame:000000000001F94C                 db    5
.eh_frame:000000000001F94D                 db  41h ; A
.eh_frame:000000000001F94E                 db  0Eh
.eh_frame:000000000001F94F                 db  30h ; 0
.eh_frame:000000000001F950                 db  86h
.eh_frame:000000000001F951                 db    6
.eh_frame:000000000001F952                 db  41h ; A
.eh_frame:000000000001F953                 db  0Eh
.eh_frame:000000000001F954                 db  38h ; 8
.eh_frame:000000000001F955                 db  83h
.eh_frame:000000000001F956                 db    7
.eh_frame:000000000001F957                 db  47h ; G
.eh_frame:000000000001F958                 db  0Eh
.eh_frame:000000000001F959                 db 0E0h
.eh_frame:000000000001F95A                 db    2
.eh_frame:000000000001F95B                 db    3
.eh_frame:000000000001F95C                 db 0A9h
.eh_frame:000000000001F95D                 db    3
.eh_frame:000000000001F95E                 db  0Ah
.eh_frame:000000000001F95F                 db  0Eh
.eh_frame:000000000001F960                 db  38h ; 8
.eh_frame:000000000001F961                 db  41h ; A
.eh_frame:000000000001F962                 db  0Eh
.eh_frame:000000000001F963                 db  30h ; 0
.eh_frame:000000000001F964                 db  41h ; A
.eh_frame:000000000001F965                 db  0Eh
.eh_frame:000000000001F966                 db  28h ; (
.eh_frame:000000000001F967                 db  42h ; B
.eh_frame:000000000001F968                 db  0Eh
.eh_frame:000000000001F969                 db  20h
.eh_frame:000000000001F96A                 db  42h ; B
.eh_frame:000000000001F96B                 db  0Eh
.eh_frame:000000000001F96C                 db  18h
.eh_frame:000000000001F96D                 db  42h ; B
.eh_frame:000000000001F96E                 db  0Eh
.eh_frame:000000000001F96F                 db  10h
.eh_frame:000000000001F970                 db  42h ; B
.eh_frame:000000000001F971                 db  0Eh
.eh_frame:000000000001F972                 db    8
.eh_frame:000000000001F973                 db  41h ; A
.eh_frame:000000000001F974                 db  0Bh
.eh_frame:000000000001F975                 db    0
.eh_frame:000000000001F976                 db    0
.eh_frame:000000000001F977                 db    0
.eh_frame:000000000001F978                 db  1Ch
.eh_frame:000000000001F979                 db    0
.eh_frame:000000000001F97A                 db    0
.eh_frame:000000000001F97B                 db    0
.eh_frame:000000000001F97C                 db  0Ch
.eh_frame:000000000001F97D                 db  23h ; #
.eh_frame:000000000001F97E                 db    0
.eh_frame:000000000001F97F                 db    0
.eh_frame:000000000001F980                 db  80h
.eh_frame:000000000001F981                 db  82h
.eh_frame:000000000001F982                 db 0FFh
.eh_frame:000000000001F983                 db 0FFh
.eh_frame:000000000001F984                 db  6Fh ; o
.eh_frame:000000000001F985                 db    0
.eh_frame:000000000001F986                 db    0
.eh_frame:000000000001F987                 db    0
.eh_frame:000000000001F988                 db    0
.eh_frame:000000000001F989                 db  44h ; D
.eh_frame:000000000001F98A                 db  0Eh
.eh_frame:000000000001F98B                 db  10h
.eh_frame:000000000001F98C                 db    2
.eh_frame:000000000001F98D                 db  59h ; Y
.eh_frame:000000000001F98E                 db  0Ah
.eh_frame:000000000001F98F                 db  0Eh
.eh_frame:000000000001F990                 db    8
.eh_frame:000000000001F991                 db  4Bh ; K
.eh_frame:000000000001F992                 db  0Bh
.eh_frame:000000000001F993                 db  46h ; F
.eh_frame:000000000001F994                 db  0Eh
.eh_frame:000000000001F995                 db    8
.eh_frame:000000000001F996                 db    0
.eh_frame:000000000001F997                 db    0
.eh_frame:000000000001F998                 db  10h
.eh_frame:000000000001F999                 db    0
.eh_frame:000000000001F99A                 db    0
.eh_frame:000000000001F99B                 db    0
.eh_frame:000000000001F99C                 db  2Ch ; ,
.eh_frame:000000000001F99D                 db  23h ; #
.eh_frame:000000000001F99E                 db    0
.eh_frame:000000000001F99F                 db    0
.eh_frame:000000000001F9A0                 db 0D0h
.eh_frame:000000000001F9A1                 db  82h
.eh_frame:000000000001F9A2                 db 0FFh
.eh_frame:000000000001F9A3                 db 0FFh
.eh_frame:000000000001F9A4                 db  0Fh
.eh_frame:000000000001F9A5                 db    0
.eh_frame:000000000001F9A6                 db    0
.eh_frame:000000000001F9A7                 db    0
.eh_frame:000000000001F9A8                 db    0
.eh_frame:000000000001F9A9                 db    0
.eh_frame:000000000001F9AA                 db    0
.eh_frame:000000000001F9AB                 db    0
.eh_frame:000000000001F9AC                 db  28h ; (
.eh_frame:000000000001F9AD                 db    0
.eh_frame:000000000001F9AE                 db    0
.eh_frame:000000000001F9AF                 db    0
.eh_frame:000000000001F9B0                 db  40h ; @
.eh_frame:000000000001F9B1                 db  23h ; #
.eh_frame:000000000001F9B2                 db    0
.eh_frame:000000000001F9B3                 db    0
.eh_frame:000000000001F9B4                 db 0CCh
.eh_frame:000000000001F9B5                 db  82h
.eh_frame:000000000001F9B6                 db 0FFh
.eh_frame:000000000001F9B7                 db 0FFh
.eh_frame:000000000001F9B8                 db 0C3h
.eh_frame:000000000001F9B9                 db    0
.eh_frame:000000000001F9BA                 db    0
.eh_frame:000000000001F9BB                 db    0
.eh_frame:000000000001F9BC                 db    0
.eh_frame:000000000001F9BD                 db  42h ; B
.eh_frame:000000000001F9BE                 db  0Eh
.eh_frame:000000000001F9BF                 db  10h
.eh_frame:000000000001F9C0                 db  8Ch
.eh_frame:000000000001F9C1                 db    2
.eh_frame:000000000001F9C2                 db  41h ; A
.eh_frame:000000000001F9C3                 db  0Eh
.eh_frame:000000000001F9C4                 db  18h
.eh_frame:000000000001F9C5                 db  86h
.eh_frame:000000000001F9C6                 db    3
.eh_frame:000000000001F9C7                 db  43h ; C
.eh_frame:000000000001F9C8                 db  0Eh
.eh_frame:000000000001F9C9                 db  20h
.eh_frame:000000000001F9CA                 db  83h
.eh_frame:000000000001F9CB                 db    4
.eh_frame:000000000001F9CC                 db    2
.eh_frame:000000000001F9CD                 db 0B9h
.eh_frame:000000000001F9CE                 db  0Eh
.eh_frame:000000000001F9CF                 db  18h
.eh_frame:000000000001F9D0                 db  41h ; A
.eh_frame:000000000001F9D1                 db  0Eh
.eh_frame:000000000001F9D2                 db  10h
.eh_frame:000000000001F9D3                 db  42h ; B
.eh_frame:000000000001F9D4                 db  0Eh
.eh_frame:000000000001F9D5                 db    8
.eh_frame:000000000001F9D6                 db    0
.eh_frame:000000000001F9D7                 db    0
.eh_frame:000000000001F9D8                 db  5Ch ; \
.eh_frame:000000000001F9D9                 db    0
.eh_frame:000000000001F9DA                 db    0
.eh_frame:000000000001F9DB                 db    0
.eh_frame:000000000001F9DC                 db  6Ch ; l
.eh_frame:000000000001F9DD                 db  23h ; #
.eh_frame:000000000001F9DE                 db    0
.eh_frame:000000000001F9DF                 db    0
.eh_frame:000000000001F9E0                 db  70h ; p
.eh_frame:000000000001F9E1                 db  83h
.eh_frame:000000000001F9E2                 db 0FFh
.eh_frame:000000000001F9E3                 db 0FFh
.eh_frame:000000000001F9E4                 db  7Fh ; 
.eh_frame:000000000001F9E5                 db    4
.eh_frame:000000000001F9E6                 db    0
.eh_frame:000000000001F9E7                 db    0
.eh_frame:000000000001F9E8                 db    0
.eh_frame:000000000001F9E9                 db  42h ; B
.eh_frame:000000000001F9EA                 db  0Eh
.eh_frame:000000000001F9EB                 db  10h
.eh_frame:000000000001F9EC                 db  8Fh
.eh_frame:000000000001F9ED                 db    2
.eh_frame:000000000001F9EE                 db  42h ; B
.eh_frame:000000000001F9EF                 db  0Eh
.eh_frame:000000000001F9F0                 db  18h
.eh_frame:000000000001F9F1                 db  8Eh
.eh_frame:000000000001F9F2                 db    3
.eh_frame:000000000001F9F3                 db  45h ; E
.eh_frame:000000000001F9F4                 db  0Eh
.eh_frame:000000000001F9F5                 db  20h
.eh_frame:000000000001F9F6                 db  8Dh
.eh_frame:000000000001F9F7                 db    4
.eh_frame:000000000001F9F8                 db  42h ; B
.eh_frame:000000000001F9F9                 db  0Eh
.eh_frame:000000000001F9FA                 db  28h ; (
.eh_frame:000000000001F9FB                 db  8Ch
.eh_frame:000000000001F9FC                 db    5
.eh_frame:000000000001F9FD                 db  44h ; D
.eh_frame:000000000001F9FE                 db  0Eh
.eh_frame:000000000001F9FF                 db  30h ; 0
.eh_frame:000000000001FA00                 db  86h
.eh_frame:000000000001FA01                 db    6
.eh_frame:000000000001FA02                 db  41h ; A
.eh_frame:000000000001FA03                 db  0Eh
.eh_frame:000000000001FA04                 db  38h ; 8
.eh_frame:000000000001FA05                 db  83h
.eh_frame:000000000001FA06                 db    7
.eh_frame:000000000001FA07                 db  44h ; D
.eh_frame:000000000001FA08                 db  0Eh
.eh_frame:000000000001FA09                 db  70h ; p
.eh_frame:000000000001FA0A                 db    2
.eh_frame:000000000001FA0B                 db 0D4h
.eh_frame:000000000001FA0C                 db  0Eh
.eh_frame:000000000001FA0D                 db  78h ; x
.eh_frame:000000000001FA0E                 db  4Bh ; K
.eh_frame:000000000001FA0F                 db  0Eh
.eh_frame:000000000001FA10                 db  80h
.eh_frame:000000000001FA11                 db    1
.eh_frame:000000000001FA12                 db  41h ; A
.eh_frame:000000000001FA13                 db  0Eh
.eh_frame:000000000001FA14                 db  88h
.eh_frame:000000000001FA15                 db    1
.eh_frame:000000000001FA16                 db  42h ; B
.eh_frame:000000000001FA17                 db  0Eh
.eh_frame:000000000001FA18                 db  90h
.eh_frame:000000000001FA19                 db    1
.eh_frame:000000000001FA1A                 db  5Dh ; ]
.eh_frame:000000000001FA1B                 db  0Eh
.eh_frame:000000000001FA1C                 db  70h ; p
.eh_frame:000000000001FA1D                 db  63h ; c
.eh_frame:000000000001FA1E                 db  0Ah
.eh_frame:000000000001FA1F                 db  0Eh
.eh_frame:000000000001FA20                 db  38h ; 8
.eh_frame:000000000001FA21                 db  44h ; D
.eh_frame:000000000001FA22                 db  0Eh
.eh_frame:000000000001FA23                 db  30h ; 0
.eh_frame:000000000001FA24                 db  41h ; A
.eh_frame:000000000001FA25                 db  0Eh
.eh_frame:000000000001FA26                 db  28h ; (
.eh_frame:000000000001FA27                 db  42h ; B
.eh_frame:000000000001FA28                 db  0Eh
.eh_frame:000000000001FA29                 db  20h
.eh_frame:000000000001FA2A                 db  42h ; B
.eh_frame:000000000001FA2B                 db  0Eh
.eh_frame:000000000001FA2C                 db  18h
.eh_frame:000000000001FA2D                 db  42h ; B
.eh_frame:000000000001FA2E                 db  0Eh
.eh_frame:000000000001FA2F                 db  10h
.eh_frame:000000000001FA30                 db  42h ; B
.eh_frame:000000000001FA31                 db  0Eh
.eh_frame:000000000001FA32                 db    8
.eh_frame:000000000001FA33                 db  45h ; E
.eh_frame:000000000001FA34                 db  0Bh
.eh_frame:000000000001FA35                 db    0
.eh_frame:000000000001FA36                 db    0
.eh_frame:000000000001FA37                 db    0
.eh_frame:000000000001FA38                 db  54h ; T
.eh_frame:000000000001FA39                 db    0
.eh_frame:000000000001FA3A                 db    0
.eh_frame:000000000001FA3B                 db    0
.eh_frame:000000000001FA3C                 db 0CCh
.eh_frame:000000000001FA3D                 db  23h ; #
.eh_frame:000000000001FA3E                 db    0
.eh_frame:000000000001FA3F                 db    0
.eh_frame:000000000001FA40                 db  90h
.eh_frame:000000000001FA41                 db  87h
.eh_frame:000000000001FA42                 db 0FFh
.eh_frame:000000000001FA43                 db 0FFh
.eh_frame:000000000001FA44                 db  1Bh
.eh_frame:000000000001FA45                 db    1
.eh_frame:000000000001FA46                 db    0
.eh_frame:000000000001FA47                 db    0
.eh_frame:000000000001FA48                 db    0
.eh_frame:000000000001FA49                 db  42h ; B
.eh_frame:000000000001FA4A                 db  0Eh
.eh_frame:000000000001FA4B                 db  10h
.eh_frame:000000000001FA4C                 db  8Fh
.eh_frame:000000000001FA4D                 db    2
.eh_frame:000000000001FA4E                 db  42h ; B
.eh_frame:000000000001FA4F                 db  0Eh
.eh_frame:000000000001FA50                 db  18h
.eh_frame:000000000001FA51                 db  8Eh
.eh_frame:000000000001FA52                 db    3
.eh_frame:000000000001FA53                 db  42h ; B
.eh_frame:000000000001FA54                 db  0Eh
.eh_frame:000000000001FA55                 db  20h
.eh_frame:000000000001FA56                 db  8Dh
.eh_frame:000000000001FA57                 db    4
.eh_frame:000000000001FA58                 db  42h ; B
.eh_frame:000000000001FA59                 db  0Eh
.eh_frame:000000000001FA5A                 db  28h ; (
.eh_frame:000000000001FA5B                 db  8Ch
.eh_frame:000000000001FA5C                 db    5
.eh_frame:000000000001FA5D                 db  44h ; D
.eh_frame:000000000001FA5E                 db  0Eh
.eh_frame:000000000001FA5F                 db  30h ; 0
.eh_frame:000000000001FA60                 db  86h
.eh_frame:000000000001FA61                 db    6
.eh_frame:000000000001FA62                 db  41h ; A
.eh_frame:000000000001FA63                 db  0Eh
.eh_frame:000000000001FA64                 db  38h ; 8
.eh_frame:000000000001FA65                 db  83h
.eh_frame:000000000001FA66                 db    7
.eh_frame:000000000001FA67                 db  4Dh ; M
.eh_frame:000000000001FA68                 db  0Eh
.eh_frame:000000000001FA69                 db  60h ; `
.eh_frame:000000000001FA6A                 db    2
.eh_frame:000000000001FA6B                 db  5Ah ; Z
.eh_frame:000000000001FA6C                 db  0Eh
.eh_frame:000000000001FA6D                 db  68h ; h
.eh_frame:000000000001FA6E                 db  44h ; D
.eh_frame:000000000001FA6F                 db  0Eh
.eh_frame:000000000001FA70                 db  70h ; p
.eh_frame:000000000001FA71                 db  61h ; a
.eh_frame:000000000001FA72                 db  0Eh
.eh_frame:000000000001FA73                 db  68h ; h
.eh_frame:000000000001FA74                 db  41h ; A
.eh_frame:000000000001FA75                 db  0Eh
.eh_frame:000000000001FA76                 db  60h ; `
.eh_frame:000000000001FA77                 db  44h ; D
.eh_frame:000000000001FA78                 db  0Ah
.eh_frame:000000000001FA79                 db  0Eh
.eh_frame:000000000001FA7A                 db  38h ; 8
.eh_frame:000000000001FA7B                 db  44h ; D
.eh_frame:000000000001FA7C                 db  0Eh
.eh_frame:000000000001FA7D                 db  30h ; 0
.eh_frame:000000000001FA7E                 db  41h ; A
.eh_frame:000000000001FA7F                 db  0Eh
.eh_frame:000000000001FA80                 db  28h ; (
.eh_frame:000000000001FA81                 db  42h ; B
.eh_frame:000000000001FA82                 db  0Eh
.eh_frame:000000000001FA83                 db  20h
.eh_frame:000000000001FA84                 db  42h ; B
.eh_frame:000000000001FA85                 db  0Eh
.eh_frame:000000000001FA86                 db  18h
.eh_frame:000000000001FA87                 db  42h ; B
.eh_frame:000000000001FA88                 db  0Eh
.eh_frame:000000000001FA89                 db  10h
.eh_frame:000000000001FA8A                 db  42h ; B
.eh_frame:000000000001FA8B                 db  0Eh
.eh_frame:000000000001FA8C                 db    8
.eh_frame:000000000001FA8D                 db  45h ; E
.eh_frame:000000000001FA8E                 db  0Bh
.eh_frame:000000000001FA8F                 db    0
.eh_frame:000000000001FA90                 db  48h ; H
.eh_frame:000000000001FA91                 db    0
.eh_frame:000000000001FA92                 db    0
.eh_frame:000000000001FA93                 db    0
.eh_frame:000000000001FA94                 db  24h ; $
.eh_frame:000000000001FA95                 db  24h ; $
.eh_frame:000000000001FA96                 db    0
.eh_frame:000000000001FA97                 db    0
.eh_frame:000000000001FA98                 db  58h ; X
.eh_frame:000000000001FA99                 db  88h
.eh_frame:000000000001FA9A                 db 0FFh
.eh_frame:000000000001FA9B                 db 0FFh
.eh_frame:000000000001FA9C                 db  10h
.eh_frame:000000000001FA9D                 db    1
.eh_frame:000000000001FA9E                 db    0
.eh_frame:000000000001FA9F                 db    0
.eh_frame:000000000001FAA0                 db    0
.eh_frame:000000000001FAA1                 db  44h ; D
.eh_frame:000000000001FAA2                 db  0Eh
.eh_frame:000000000001FAA3                 db  10h
.eh_frame:000000000001FAA4                 db  8Eh
.eh_frame:000000000001FAA5                 db    2
.eh_frame:000000000001FAA6                 db  42h ; B
.eh_frame:000000000001FAA7                 db  0Eh
.eh_frame:000000000001FAA8                 db  18h
.eh_frame:000000000001FAA9                 db  8Dh
.eh_frame:000000000001FAAA                 db    3
.eh_frame:000000000001FAAB                 db  45h ; E
.eh_frame:000000000001FAAC                 db  0Eh
.eh_frame:000000000001FAAD                 db  20h
.eh_frame:000000000001FAAE                 db  8Ch
.eh_frame:000000000001FAAF                 db    4
.eh_frame:000000000001FAB0                 db  41h ; A
.eh_frame:000000000001FAB1                 db  0Eh
.eh_frame:000000000001FAB2                 db  28h ; (
.eh_frame:000000000001FAB3                 db  86h
.eh_frame:000000000001FAB4                 db    5
.eh_frame:000000000001FAB5                 db  44h ; D
.eh_frame:000000000001FAB6                 db  0Eh
.eh_frame:000000000001FAB7                 db  30h ; 0
.eh_frame:000000000001FAB8                 db  83h
.eh_frame:000000000001FAB9                 db    6
.eh_frame:000000000001FABA                 db    2
.eh_frame:000000000001FABB                 db 0ADh
.eh_frame:000000000001FABC                 db  0Ah
.eh_frame:000000000001FABD                 db  0Eh
.eh_frame:000000000001FABE                 db  28h ; (
.eh_frame:000000000001FABF                 db  43h ; C
.eh_frame:000000000001FAC0                 db  0Eh
.eh_frame:000000000001FAC1                 db  20h
.eh_frame:000000000001FAC2                 db  42h ; B
.eh_frame:000000000001FAC3                 db  0Eh
.eh_frame:000000000001FAC4                 db  18h
.eh_frame:000000000001FAC5                 db  42h ; B
.eh_frame:000000000001FAC6                 db  0Eh
.eh_frame:000000000001FAC7                 db  10h
.eh_frame:000000000001FAC8                 db  42h ; B
.eh_frame:000000000001FAC9                 db  0Eh
.eh_frame:000000000001FACA                 db    8
.eh_frame:000000000001FACB                 db  4Ah ; J
.eh_frame:000000000001FACC                 db  0Bh
.eh_frame:000000000001FACD                 db  76h ; v
.eh_frame:000000000001FACE                 db  0Eh
.eh_frame:000000000001FACF                 db  28h ; (
.eh_frame:000000000001FAD0                 db  43h ; C
.eh_frame:000000000001FAD1                 db  0Eh
.eh_frame:000000000001FAD2                 db  20h
.eh_frame:000000000001FAD3                 db  42h ; B
.eh_frame:000000000001FAD4                 db  0Eh
.eh_frame:000000000001FAD5                 db  18h
.eh_frame:000000000001FAD6                 db  42h ; B
.eh_frame:000000000001FAD7                 db  0Eh
.eh_frame:000000000001FAD8                 db  10h
.eh_frame:000000000001FAD9                 db  42h ; B
.eh_frame:000000000001FADA                 db  0Eh
.eh_frame:000000000001FADB                 db    8
.eh_frame:000000000001FADC                 db  38h ; 8
.eh_frame:000000000001FADD                 db    0
.eh_frame:000000000001FADE                 db    0
.eh_frame:000000000001FADF                 db    0
.eh_frame:000000000001FAE0                 db  70h ; p
.eh_frame:000000000001FAE1                 db  24h ; $
.eh_frame:000000000001FAE2                 db    0
.eh_frame:000000000001FAE3                 db    0
.eh_frame:000000000001FAE4                 db  1Ch
.eh_frame:000000000001FAE5                 db  89h
.eh_frame:000000000001FAE6                 db 0FFh
.eh_frame:000000000001FAE7                 db 0FFh
.eh_frame:000000000001FAE8                 db  85h
.eh_frame:000000000001FAE9                 db    0
.eh_frame:000000000001FAEA                 db    0
.eh_frame:000000000001FAEB                 db    0
.eh_frame:000000000001FAEC                 db    0
.eh_frame:000000000001FAED                 db  42h ; B
.eh_frame:000000000001FAEE                 db  0Eh
.eh_frame:000000000001FAEF                 db  10h
.eh_frame:000000000001FAF0                 db  8Dh
.eh_frame:000000000001FAF1                 db    2
.eh_frame:000000000001FAF2                 db  42h ; B
.eh_frame:000000000001FAF3                 db  0Eh
.eh_frame:000000000001FAF4                 db  18h
.eh_frame:000000000001FAF5                 db  8Ch
.eh_frame:000000000001FAF6                 db    3
.eh_frame:000000000001FAF7                 db  41h ; A
.eh_frame:000000000001FAF8                 db  0Eh
.eh_frame:000000000001FAF9                 db  20h
.eh_frame:000000000001FAFA                 db  86h
.eh_frame:000000000001FAFB                 db    4
.eh_frame:000000000001FAFC                 db  41h ; A
.eh_frame:000000000001FAFD                 db  0Eh
.eh_frame:000000000001FAFE                 db  28h ; (
.eh_frame:000000000001FAFF                 db  83h
.eh_frame:000000000001FB00                 db    5
.eh_frame:000000000001FB01                 db  44h ; D
.eh_frame:000000000001FB02                 db  0Eh
.eh_frame:000000000001FB03                 db  30h ; 0
.eh_frame:000000000001FB04                 db    2
.eh_frame:000000000001FB05                 db  57h ; W
.eh_frame:000000000001FB06                 db  0Ah
.eh_frame:000000000001FB07                 db  0Eh
.eh_frame:000000000001FB08                 db  28h ; (
.eh_frame:000000000001FB09                 db  44h ; D
.eh_frame:000000000001FB0A                 db  0Eh
.eh_frame:000000000001FB0B                 db  20h
.eh_frame:000000000001FB0C                 db  41h ; A
.eh_frame:000000000001FB0D                 db  0Eh
.eh_frame:000000000001FB0E                 db  18h
.eh_frame:000000000001FB0F                 db  42h ; B
.eh_frame:000000000001FB10                 db  0Eh
.eh_frame:000000000001FB11                 db  10h
.eh_frame:000000000001FB12                 db  42h ; B
.eh_frame:000000000001FB13                 db  0Eh
.eh_frame:000000000001FB14                 db    8
.eh_frame:000000000001FB15                 db  46h ; F
.eh_frame:000000000001FB16                 db  0Bh
.eh_frame:000000000001FB17                 db    0
.eh_frame:000000000001FB18                 db  18h
.eh_frame:000000000001FB19                 db    0
.eh_frame:000000000001FB1A                 db    0
.eh_frame:000000000001FB1B                 db    0
.eh_frame:000000000001FB1C                 db 0ACh
.eh_frame:000000000001FB1D                 db  24h ; $
.eh_frame:000000000001FB1E                 db    0
.eh_frame:000000000001FB1F                 db    0
.eh_frame:000000000001FB20                 db  70h ; p
.eh_frame:000000000001FB21                 db  89h
.eh_frame:000000000001FB22                 db 0FFh
.eh_frame:000000000001FB23                 db 0FFh
.eh_frame:000000000001FB24                 db  44h ; D
.eh_frame:000000000001FB25                 db    0
.eh_frame:000000000001FB26                 db    0
.eh_frame:000000000001FB27                 db    0
.eh_frame:000000000001FB28                 db    0
.eh_frame:000000000001FB29                 db  41h ; A
.eh_frame:000000000001FB2A                 db  0Eh
.eh_frame:000000000001FB2B                 db  10h
.eh_frame:000000000001FB2C                 db  83h
.eh_frame:000000000001FB2D                 db    2
.eh_frame:000000000001FB2E                 db    2
.eh_frame:000000000001FB2F                 db  42h ; B
.eh_frame:000000000001FB30                 db  0Eh
.eh_frame:000000000001FB31                 db    8
.eh_frame:000000000001FB32                 db    0
.eh_frame:000000000001FB33                 db    0
.eh_frame:000000000001FB34                 db  58h ; X
.eh_frame:000000000001FB35                 db    0
.eh_frame:000000000001FB36                 db    0
.eh_frame:000000000001FB37                 db    0
.eh_frame:000000000001FB38                 db 0C8h
.eh_frame:000000000001FB39                 db  24h ; $
.eh_frame:000000000001FB3A                 db    0
.eh_frame:000000000001FB3B                 db    0
.eh_frame:000000000001FB3C                 db 0A4h
.eh_frame:000000000001FB3D                 db  89h
.eh_frame:000000000001FB3E                 db 0FFh
.eh_frame:000000000001FB3F                 db 0FFh
.eh_frame:000000000001FB40                 db  9Eh
.eh_frame:000000000001FB41                 db    0
.eh_frame:000000000001FB42                 db    0
.eh_frame:000000000001FB43                 db    0
.eh_frame:000000000001FB44                 db    0
.eh_frame:000000000001FB45                 db  4Fh ; O
.eh_frame:000000000001FB46                 db  0Eh
.eh_frame:000000000001FB47                 db  10h
.eh_frame:000000000001FB48                 db  8Dh
.eh_frame:000000000001FB49                 db    2
.eh_frame:000000000001FB4A                 db  42h ; B
.eh_frame:000000000001FB4B                 db  0Eh
.eh_frame:000000000001FB4C                 db  18h
.eh_frame:000000000001FB4D                 db  8Ch
.eh_frame:000000000001FB4E                 db    3
.eh_frame:000000000001FB4F                 db  44h ; D
.eh_frame:000000000001FB50                 db  0Eh
.eh_frame:000000000001FB51                 db  20h
.eh_frame:000000000001FB52                 db  86h
.eh_frame:000000000001FB53                 db    4
.eh_frame:000000000001FB54                 db  41h ; A
.eh_frame:000000000001FB55                 db  0Eh
.eh_frame:000000000001FB56                 db  28h ; (
.eh_frame:000000000001FB57                 db  83h
.eh_frame:000000000001FB58                 db    5
.eh_frame:000000000001FB59                 db  4Dh ; M
.eh_frame:000000000001FB5A                 db  0Eh
.eh_frame:000000000001FB5B                 db  40h ; @
.eh_frame:000000000001FB5C                 db  67h ; g
.eh_frame:000000000001FB5D                 db  0Eh
.eh_frame:000000000001FB5E                 db  48h ; H
.eh_frame:000000000001FB5F                 db  41h ; A
.eh_frame:000000000001FB60                 db  0Eh
.eh_frame:000000000001FB61                 db  50h ; P
.eh_frame:000000000001FB62                 db  42h ; B
.eh_frame:000000000001FB63                 db  0Eh
.eh_frame:000000000001FB64                 db  58h ; X
.eh_frame:000000000001FB65                 db  42h ; B
.eh_frame:000000000001FB66                 db  0Eh
.eh_frame:000000000001FB67                 db  60h ; `
.eh_frame:000000000001FB68                 db  52h ; R
.eh_frame:000000000001FB69                 db  0Eh
.eh_frame:000000000001FB6A                 db  40h ; @
.eh_frame:000000000001FB6B                 db  49h ; I
.eh_frame:000000000001FB6C                 db  0Ah
.eh_frame:000000000001FB6D                 db  0Eh
.eh_frame:000000000001FB6E                 db  28h ; (
.eh_frame:000000000001FB6F                 db  41h ; A
.eh_frame:000000000001FB70                 db  0Eh
.eh_frame:000000000001FB71                 db  20h
.eh_frame:000000000001FB72                 db  44h ; D
.eh_frame:000000000001FB73                 db  0Eh
.eh_frame:000000000001FB74                 db  18h
.eh_frame:000000000001FB75                 db  42h ; B
.eh_frame:000000000001FB76                 db  0Eh
.eh_frame:000000000001FB77                 db  10h
.eh_frame:000000000001FB78                 db  42h ; B
.eh_frame:000000000001FB79                 db  0Eh
.eh_frame:000000000001FB7A                 db    8
.eh_frame:000000000001FB7B                 db  45h ; E
.eh_frame:000000000001FB7C                 db  0Bh
.eh_frame:000000000001FB7D                 db  52h ; R
.eh_frame:000000000001FB7E                 db  0Eh
.eh_frame:000000000001FB7F                 db  48h ; H
.eh_frame:000000000001FB80                 db  41h ; A
.eh_frame:000000000001FB81                 db  0Eh
.eh_frame:000000000001FB82                 db  50h ; P
.eh_frame:000000000001FB83                 db  42h ; B
.eh_frame:000000000001FB84                 db  0Eh
.eh_frame:000000000001FB85                 db  58h ; X
.eh_frame:000000000001FB86                 db  42h ; B
.eh_frame:000000000001FB87                 db  0Eh
.eh_frame:000000000001FB88                 db  60h ; `
.eh_frame:000000000001FB89                 db  49h ; I
.eh_frame:000000000001FB8A                 db  0Eh
.eh_frame:000000000001FB8B                 db    8
.eh_frame:000000000001FB8C                 db 0C3h
.eh_frame:000000000001FB8D                 db 0C6h
.eh_frame:000000000001FB8E                 db 0CCh
.eh_frame:000000000001FB8F                 db 0CDh
.eh_frame:000000000001FB90                 db  1Ch
.eh_frame:000000000001FB91                 db    0
.eh_frame:000000000001FB92                 db    0
.eh_frame:000000000001FB93                 db    0
.eh_frame:000000000001FB94                 db  24h ; $
.eh_frame:000000000001FB95                 db  25h ; %
.eh_frame:000000000001FB96                 db    0
.eh_frame:000000000001FB97                 db    0
.eh_frame:000000000001FB98                 db 0E8h
.eh_frame:000000000001FB99                 db  89h
.eh_frame:000000000001FB9A                 db 0FFh
.eh_frame:000000000001FB9B                 db 0FFh
.eh_frame:000000000001FB9C                 db  18h
.eh_frame:000000000001FB9D                 db    0
.eh_frame:000000000001FB9E                 db    0
.eh_frame:000000000001FB9F                 db    0
.eh_frame:000000000001FBA0                 db    0
.eh_frame:000000000001FBA1                 db  44h ; D
.eh_frame:000000000001FBA2                 db  0Eh
.eh_frame:000000000001FBA3                 db  10h
.eh_frame:000000000001FBA4                 db  45h ; E
.eh_frame:000000000001FBA5                 db  0Eh
.eh_frame:000000000001FBA6                 db  18h
.eh_frame:000000000001FBA7                 db  42h ; B
.eh_frame:000000000001FBA8                 db  0Eh
.eh_frame:000000000001FBA9                 db  20h
.eh_frame:000000000001FBAA                 db  4Ch ; L
.eh_frame:000000000001FBAB                 db  0Eh
.eh_frame:000000000001FBAC                 db    8
.eh_frame:000000000001FBAD                 db    0
.eh_frame:000000000001FBAE                 db    0
.eh_frame:000000000001FBAF                 db    0
.eh_frame:000000000001FBB0                 db  1Ch
.eh_frame:000000000001FBB1                 db    0
.eh_frame:000000000001FBB2                 db    0
.eh_frame:000000000001FBB3                 db    0
.eh_frame:000000000001FBB4                 db  44h ; D
.eh_frame:000000000001FBB5                 db  25h ; %
.eh_frame:000000000001FBB6                 db    0
.eh_frame:000000000001FBB7                 db    0
.eh_frame:000000000001FBB8                 db 0E8h
.eh_frame:000000000001FBB9                 db  89h
.eh_frame:000000000001FBBA                 db 0FFh
.eh_frame:000000000001FBBB                 db 0FFh
.eh_frame:000000000001FBBC                 db  15h
.eh_frame:000000000001FBBD                 db    0
.eh_frame:000000000001FBBE                 db    0
.eh_frame:000000000001FBBF                 db    0
.eh_frame:000000000001FBC0                 db    0
.eh_frame:000000000001FBC1                 db  44h ; D
.eh_frame:000000000001FBC2                 db  0Eh
.eh_frame:000000000001FBC3                 db  10h
.eh_frame:000000000001FBC4                 db  42h ; B
.eh_frame:000000000001FBC5                 db  0Eh
.eh_frame:000000000001FBC6                 db  18h
.eh_frame:000000000001FBC7                 db  42h ; B
.eh_frame:000000000001FBC8                 db  0Eh
.eh_frame:000000000001FBC9                 db  20h
.eh_frame:000000000001FBCA                 db  4Ch ; L
.eh_frame:000000000001FBCB                 db  0Eh
.eh_frame:000000000001FBCC                 db    8
.eh_frame:000000000001FBCD                 db    0
.eh_frame:000000000001FBCE                 db    0
.eh_frame:000000000001FBCF                 db    0
.eh_frame:000000000001FBD0                 db  20h
.eh_frame:000000000001FBD1                 db    0
.eh_frame:000000000001FBD2                 db    0
.eh_frame:000000000001FBD3                 db    0
.eh_frame:000000000001FBD4                 db  64h ; d
.eh_frame:000000000001FBD5                 db  25h ; %
.eh_frame:000000000001FBD6                 db    0
.eh_frame:000000000001FBD7                 db    0
.eh_frame:000000000001FBD8                 db 0E8h
.eh_frame:000000000001FBD9                 db  89h
.eh_frame:000000000001FBDA                 db 0FFh
.eh_frame:000000000001FBDB                 db 0FFh
.eh_frame:000000000001FBDC                 db  1Ah
.eh_frame:000000000001FBDD                 db    0
.eh_frame:000000000001FBDE                 db    0
.eh_frame:000000000001FBDF                 db    0
.eh_frame:000000000001FBE0                 db    0
.eh_frame:000000000001FBE1                 db  44h ; D
.eh_frame:000000000001FBE2                 db  0Eh
.eh_frame:000000000001FBE3                 db  10h
.eh_frame:000000000001FBE4                 db  42h ; B
.eh_frame:000000000001FBE5                 db  0Eh
.eh_frame:000000000001FBE6                 db  18h
.eh_frame:000000000001FBE7                 db  44h ; D
.eh_frame:000000000001FBE8                 db  0Eh
.eh_frame:000000000001FBE9                 db  20h
.eh_frame:000000000001FBEA                 db  44h ; D
.eh_frame:000000000001FBEB                 db  0Eh
.eh_frame:000000000001FBEC                 db  28h ; (
.eh_frame:000000000001FBED                 db  42h ; B
.eh_frame:000000000001FBEE                 db  0Eh
.eh_frame:000000000001FBEF                 db  30h ; 0
.eh_frame:000000000001FBF0                 db  49h ; I
.eh_frame:000000000001FBF1                 db  0Eh
.eh_frame:000000000001FBF2                 db    8
.eh_frame:000000000001FBF3                 db    0
.eh_frame:000000000001FBF4                 db  20h
.eh_frame:000000000001FBF5                 db    0
.eh_frame:000000000001FBF6                 db    0
.eh_frame:000000000001FBF7                 db    0
.eh_frame:000000000001FBF8                 db  88h
.eh_frame:000000000001FBF9                 db  25h ; %
.eh_frame:000000000001FBFA                 db    0
.eh_frame:000000000001FBFB                 db    0
.eh_frame:000000000001FBFC                 db 0E4h
.eh_frame:000000000001FBFD                 db  89h
.eh_frame:000000000001FBFE                 db 0FFh
.eh_frame:000000000001FBFF                 db 0FFh
.eh_frame:000000000001FC00                 db  1Ch
.eh_frame:000000000001FC01                 db    0
.eh_frame:000000000001FC02                 db    0
.eh_frame:000000000001FC03                 db    0
.eh_frame:000000000001FC04                 db    0
.eh_frame:000000000001FC05                 db  44h ; D
.eh_frame:000000000001FC06                 db  0Eh
.eh_frame:000000000001FC07                 db  10h
.eh_frame:000000000001FC08                 db  42h ; B
.eh_frame:000000000001FC09                 db  0Eh
.eh_frame:000000000001FC0A                 db  18h
.eh_frame:000000000001FC0B                 db  44h ; D
.eh_frame:000000000001FC0C                 db  0Eh
.eh_frame:000000000001FC0D                 db  20h
.eh_frame:000000000001FC0E                 db  44h ; D
.eh_frame:000000000001FC0F                 db  0Eh
.eh_frame:000000000001FC10                 db  28h ; (
.eh_frame:000000000001FC11                 db  44h ; D
.eh_frame:000000000001FC12                 db  0Eh
.eh_frame:000000000001FC13                 db  30h ; 0
.eh_frame:000000000001FC14                 db  49h ; I
.eh_frame:000000000001FC15                 db  0Eh
.eh_frame:000000000001FC16                 db    8
.eh_frame:000000000001FC17                 db    0
.eh_frame:000000000001FC18                 db  14h
.eh_frame:000000000001FC19                 db    0
.eh_frame:000000000001FC1A                 db    0
.eh_frame:000000000001FC1B                 db    0
.eh_frame:000000000001FC1C                 db 0ACh
.eh_frame:000000000001FC1D                 db  25h ; %
.eh_frame:000000000001FC1E                 db    0
.eh_frame:000000000001FC1F                 db    0
.eh_frame:000000000001FC20                 db 0E0h
.eh_frame:000000000001FC21                 db  89h
.eh_frame:000000000001FC22                 db 0FFh
.eh_frame:000000000001FC23                 db 0FFh
.eh_frame:000000000001FC24                 db  41h ; A
.eh_frame:000000000001FC25                 db    0
.eh_frame:000000000001FC26                 db    0
.eh_frame:000000000001FC27                 db    0
.eh_frame:000000000001FC28                 db    0
.eh_frame:000000000001FC29                 db    0
.eh_frame:000000000001FC2A                 db    0
.eh_frame:000000000001FC2B                 db    0
.eh_frame:000000000001FC2C                 db    0
.eh_frame:000000000001FC2D                 db    0
.eh_frame:000000000001FC2E                 db    0
.eh_frame:000000000001FC2F                 db    0
.eh_frame:000000000001FC30                 db  14h
.eh_frame:000000000001FC31                 db    0
.eh_frame:000000000001FC32                 db    0
.eh_frame:000000000001FC33                 db    0
.eh_frame:000000000001FC34                 db 0C4h
.eh_frame:000000000001FC35                 db  25h ; %
.eh_frame:000000000001FC36                 db    0
.eh_frame:000000000001FC37                 db    0
.eh_frame:000000000001FC38                 db  18h
.eh_frame:000000000001FC39                 db  8Ah
.eh_frame:000000000001FC3A                 db 0FFh
.eh_frame:000000000001FC3B                 db 0FFh
.eh_frame:000000000001FC3C                 db  4Eh ; N
.eh_frame:000000000001FC3D                 db    0
.eh_frame:000000000001FC3E                 db    0
.eh_frame:000000000001FC3F                 db    0
.eh_frame:000000000001FC40                 db    0
.eh_frame:000000000001FC41                 db    0
.eh_frame:000000000001FC42                 db    0
.eh_frame:000000000001FC43                 db    0
.eh_frame:000000000001FC44                 db    0
.eh_frame:000000000001FC45                 db    0
.eh_frame:000000000001FC46                 db    0
.eh_frame:000000000001FC47                 db    0
.eh_frame:000000000001FC48                 db  4Ch ; L
.eh_frame:000000000001FC49                 db    0
.eh_frame:000000000001FC4A                 db    0
.eh_frame:000000000001FC4B                 db    0
.eh_frame:000000000001FC4C                 db 0DCh
.eh_frame:000000000001FC4D                 db  25h ; %
.eh_frame:000000000001FC4E                 db    0
.eh_frame:000000000001FC4F                 db    0
.eh_frame:000000000001FC50                 db  50h ; P
.eh_frame:000000000001FC51                 db  8Ah
.eh_frame:000000000001FC52                 db 0FFh
.eh_frame:000000000001FC53                 db 0FFh
.eh_frame:000000000001FC54                 db  7Dh ; }
.eh_frame:000000000001FC55                 db    0
.eh_frame:000000000001FC56                 db    0
.eh_frame:000000000001FC57                 db    0
.eh_frame:000000000001FC58                 db    0
.eh_frame:000000000001FC59                 db  42h ; B
.eh_frame:000000000001FC5A                 db  0Eh
.eh_frame:000000000001FC5B                 db  10h
.eh_frame:000000000001FC5C                 db  8Ch
.eh_frame:000000000001FC5D                 db    2
.eh_frame:000000000001FC5E                 db  41h ; A
.eh_frame:000000000001FC5F                 db  0Eh
.eh_frame:000000000001FC60                 db  18h
.eh_frame:000000000001FC61                 db  86h
.eh_frame:000000000001FC62                 db    3
.eh_frame:000000000001FC63                 db  44h ; D
.eh_frame:000000000001FC64                 db  0Eh
.eh_frame:000000000001FC65                 db  20h
.eh_frame:000000000001FC66                 db  83h
.eh_frame:000000000001FC67                 db    4
.eh_frame:000000000001FC68                 db  69h ; i
.eh_frame:000000000001FC69                 db  0Ah
.eh_frame:000000000001FC6A                 db  0Eh
.eh_frame:000000000001FC6B                 db  18h
.eh_frame:000000000001FC6C                 db  41h ; A
.eh_frame:000000000001FC6D                 db  0Eh
.eh_frame:000000000001FC6E                 db  10h
.eh_frame:000000000001FC6F                 db  42h ; B
.eh_frame:000000000001FC70                 db  0Eh
.eh_frame:000000000001FC71                 db    8
.eh_frame:000000000001FC72                 db  45h ; E
.eh_frame:000000000001FC73                 db  0Bh
.eh_frame:000000000001FC74                 db  55h ; U
.eh_frame:000000000001FC75                 db  0Ah
.eh_frame:000000000001FC76                 db  0Eh
.eh_frame:000000000001FC77                 db  18h
.eh_frame:000000000001FC78                 db  41h ; A
.eh_frame:000000000001FC79                 db  0Eh
.eh_frame:000000000001FC7A                 db  10h
.eh_frame:000000000001FC7B                 db  42h ; B
.eh_frame:000000000001FC7C                 db  0Eh
.eh_frame:000000000001FC7D                 db    8
.eh_frame:000000000001FC7E                 db  48h ; H
.eh_frame:000000000001FC7F                 db  0Bh
.eh_frame:000000000001FC80                 db  41h ; A
.eh_frame:000000000001FC81                 db  0Ah
.eh_frame:000000000001FC82                 db  0Eh
.eh_frame:000000000001FC83                 db  18h
.eh_frame:000000000001FC84                 db  46h ; F
.eh_frame:000000000001FC85                 db  0Eh
.eh_frame:000000000001FC86                 db  10h
.eh_frame:000000000001FC87                 db  42h ; B
.eh_frame:000000000001FC88                 db  0Eh
.eh_frame:000000000001FC89                 db    8
.eh_frame:000000000001FC8A                 db  47h ; G
.eh_frame:000000000001FC8B                 db  0Bh
.eh_frame:000000000001FC8C                 db  49h ; I
.eh_frame:000000000001FC8D                 db  0Eh
.eh_frame:000000000001FC8E                 db  18h
.eh_frame:000000000001FC8F                 db  41h ; A
.eh_frame:000000000001FC90                 db  0Eh
.eh_frame:000000000001FC91                 db  10h
.eh_frame:000000000001FC92                 db  42h ; B
.eh_frame:000000000001FC93                 db  0Eh
.eh_frame:000000000001FC94                 db    8
.eh_frame:000000000001FC95                 db    0
.eh_frame:000000000001FC96                 db    0
.eh_frame:000000000001FC97                 db    0
.eh_frame:000000000001FC98                 db  1Ch
.eh_frame:000000000001FC99                 db    0
.eh_frame:000000000001FC9A                 db    0
.eh_frame:000000000001FC9B                 db    0
.eh_frame:000000000001FC9C                 db  2Ch ; ,
.eh_frame:000000000001FC9D                 db  26h ; &
.eh_frame:000000000001FC9E                 db    0
.eh_frame:000000000001FC9F                 db    0
.eh_frame:000000000001FCA0                 db  80h
.eh_frame:000000000001FCA1                 db  8Ah
.eh_frame:000000000001FCA2                 db 0FFh
.eh_frame:000000000001FCA3                 db 0FFh
.eh_frame:000000000001FCA4                 db  60h ; `
.eh_frame:000000000001FCA5                 db    0
.eh_frame:000000000001FCA6                 db    0
.eh_frame:000000000001FCA7                 db    0
.eh_frame:000000000001FCA8                 db    0
.eh_frame:000000000001FCA9                 db  44h ; D
.eh_frame:000000000001FCAA                 db  0Eh
.eh_frame:000000000001FCAB                 db  10h
.eh_frame:000000000001FCAC                 db  75h ; u
.eh_frame:000000000001FCAD                 db  0Ah
.eh_frame:000000000001FCAE                 db  0Eh
.eh_frame:000000000001FCAF                 db    8
.eh_frame:000000000001FCB0                 db  47h ; G
.eh_frame:000000000001FCB1                 db  0Bh
.eh_frame:000000000001FCB2                 db  5Fh ; _
.eh_frame:000000000001FCB3                 db  0Eh
.eh_frame:000000000001FCB4                 db    8
.eh_frame:000000000001FCB5                 db    0
.eh_frame:000000000001FCB6                 db    0
.eh_frame:000000000001FCB7                 db    0
.eh_frame:000000000001FCB8                 db  1Ch
.eh_frame:000000000001FCB9                 db    0
.eh_frame:000000000001FCBA                 db    0
.eh_frame:000000000001FCBB                 db    0
.eh_frame:000000000001FCBC                 db  4Ch ; L
.eh_frame:000000000001FCBD                 db  26h ; &
.eh_frame:000000000001FCBE                 db    0
.eh_frame:000000000001FCBF                 db    0
.eh_frame:000000000001FCC0                 db 0C0h
.eh_frame:000000000001FCC1                 db  8Ah
.eh_frame:000000000001FCC2                 db 0FFh
.eh_frame:000000000001FCC3                 db 0FFh
.eh_frame:000000000001FCC4                 db  3Ch ; <
.eh_frame:000000000001FCC5                 db    0
.eh_frame:000000000001FCC6                 db    0
.eh_frame:000000000001FCC7                 db    0
.eh_frame:000000000001FCC8                 db    0
.eh_frame:000000000001FCC9                 db  44h ; D
.eh_frame:000000000001FCCA                 db  0Eh
.eh_frame:000000000001FCCB                 db  10h
.eh_frame:000000000001FCCC                 db  61h ; a
.eh_frame:000000000001FCCD                 db  0Ah
.eh_frame:000000000001FCCE                 db  0Eh
.eh_frame:000000000001FCCF                 db    8
.eh_frame:000000000001FCD0                 db  4Bh ; K
.eh_frame:000000000001FCD1                 db  0Bh
.eh_frame:000000000001FCD2                 db  4Bh ; K
.eh_frame:000000000001FCD3                 db  0Eh
.eh_frame:000000000001FCD4                 db    8
.eh_frame:000000000001FCD5                 db    0
.eh_frame:000000000001FCD6                 db    0
.eh_frame:000000000001FCD7                 db    0
.eh_frame:000000000001FCD8                 db  1Ch
.eh_frame:000000000001FCD9                 db    0
.eh_frame:000000000001FCDA                 db    0
.eh_frame:000000000001FCDB                 db    0
.eh_frame:000000000001FCDC                 db  6Ch ; l
.eh_frame:000000000001FCDD                 db  26h ; &
.eh_frame:000000000001FCDE                 db    0
.eh_frame:000000000001FCDF                 db    0
.eh_frame:000000000001FCE0                 db 0E0h
.eh_frame:000000000001FCE1                 db  8Ah
.eh_frame:000000000001FCE2                 db 0FFh
.eh_frame:000000000001FCE3                 db 0FFh
.eh_frame:000000000001FCE4                 db  21h ; !
.eh_frame:000000000001FCE5                 db    0
.eh_frame:000000000001FCE6                 db    0
.eh_frame:000000000001FCE7                 db    0
.eh_frame:000000000001FCE8                 db    0
.eh_frame:000000000001FCE9                 db  41h ; A
.eh_frame:000000000001FCEA                 db  0Eh
.eh_frame:000000000001FCEB                 db  10h
.eh_frame:000000000001FCEC                 db  83h
.eh_frame:000000000001FCED                 db    2
.eh_frame:000000000001FCEE                 db  4Ch ; L
.eh_frame:000000000001FCEF                 db  0Ah
.eh_frame:000000000001FCF0                 db  0Eh
.eh_frame:000000000001FCF1                 db    8
.eh_frame:000000000001FCF2                 db  43h ; C
.eh_frame:000000000001FCF3                 db  0Bh
.eh_frame:000000000001FCF4                 db  50h ; P
.eh_frame:000000000001FCF5                 db  0Eh
.eh_frame:000000000001FCF6                 db    8
.eh_frame:000000000001FCF7                 db    0
.eh_frame:000000000001FCF8                 db  28h ; (
.eh_frame:000000000001FCF9                 db    0
.eh_frame:000000000001FCFA                 db    0
.eh_frame:000000000001FCFB                 db    0
.eh_frame:000000000001FCFC                 db  8Ch
.eh_frame:000000000001FCFD                 db  26h ; &
.eh_frame:000000000001FCFE                 db    0
.eh_frame:000000000001FCFF                 db    0
.eh_frame:000000000001FD00                 db 0F0h
.eh_frame:000000000001FD01                 db  8Ah
.eh_frame:000000000001FD02                 db 0FFh
.eh_frame:000000000001FD03                 db 0FFh
.eh_frame:000000000001FD04                 db  56h ; V
.eh_frame:000000000001FD05                 db    0
.eh_frame:000000000001FD06                 db    0
.eh_frame:000000000001FD07                 db    0
.eh_frame:000000000001FD08                 db    0
.eh_frame:000000000001FD09                 db  41h ; A
.eh_frame:000000000001FD0A                 db  0Eh
.eh_frame:000000000001FD0B                 db  10h
.eh_frame:000000000001FD0C                 db  86h
.eh_frame:000000000001FD0D                 db    2
.eh_frame:000000000001FD0E                 db  41h ; A
.eh_frame:000000000001FD0F                 db  0Eh
.eh_frame:000000000001FD10                 db  18h
.eh_frame:000000000001FD11                 db  83h
.eh_frame:000000000001FD12                 db    3
.eh_frame:000000000001FD13                 db  4Eh ; N
.eh_frame:000000000001FD14                 db  0Eh
.eh_frame:000000000001FD15                 db  20h
.eh_frame:000000000001FD16                 db  68h ; h
.eh_frame:000000000001FD17                 db  0Ah
.eh_frame:000000000001FD18                 db  0Eh
.eh_frame:000000000001FD19                 db  18h
.eh_frame:000000000001FD1A                 db  41h ; A
.eh_frame:000000000001FD1B                 db  0Eh
.eh_frame:000000000001FD1C                 db  10h
.eh_frame:000000000001FD1D                 db  41h ; A
.eh_frame:000000000001FD1E                 db  0Eh
.eh_frame:000000000001FD1F                 db    8
.eh_frame:000000000001FD20                 db  46h ; F
.eh_frame:000000000001FD21                 db  0Bh
.eh_frame:000000000001FD22                 db    0
.eh_frame:000000000001FD23                 db    0
.eh_frame:000000000001FD24                 db  10h
.eh_frame:000000000001FD25                 db    0
.eh_frame:000000000001FD26                 db    0
.eh_frame:000000000001FD27                 db    0
.eh_frame:000000000001FD28                 db 0B8h
.eh_frame:000000000001FD29                 db  26h ; &
.eh_frame:000000000001FD2A                 db    0
.eh_frame:000000000001FD2B                 db    0
.eh_frame:000000000001FD2C                 db  24h ; $
.eh_frame:000000000001FD2D                 db  8Bh
.eh_frame:000000000001FD2E                 db 0FFh
.eh_frame:000000000001FD2F                 db 0FFh
.eh_frame:000000000001FD30                 db  1Dh
.eh_frame:000000000001FD31                 db    0
.eh_frame:000000000001FD32                 db    0
.eh_frame:000000000001FD33                 db    0
.eh_frame:000000000001FD34                 db    0
.eh_frame:000000000001FD35                 db    0
.eh_frame:000000000001FD36                 db    0
.eh_frame:000000000001FD37                 db    0
.eh_frame:000000000001FD38                 db  24h ; $
.eh_frame:000000000001FD39                 db    0
.eh_frame:000000000001FD3A                 db    0
.eh_frame:000000000001FD3B                 db    0
.eh_frame:000000000001FD3C                 db 0CCh
.eh_frame:000000000001FD3D                 db  26h ; &
.eh_frame:000000000001FD3E                 db    0
.eh_frame:000000000001FD3F                 db    0
.eh_frame:000000000001FD40                 db  30h ; 0
.eh_frame:000000000001FD41                 db  8Bh
.eh_frame:000000000001FD42                 db 0FFh
.eh_frame:000000000001FD43                 db 0FFh
.eh_frame:000000000001FD44                 db 0ACh
.eh_frame:000000000001FD45                 db    1
.eh_frame:000000000001FD46                 db    0
.eh_frame:000000000001FD47                 db    0
.eh_frame:000000000001FD48                 db    0
.eh_frame:000000000001FD49                 db  41h ; A
.eh_frame:000000000001FD4A                 db  0Eh
.eh_frame:000000000001FD4B                 db  10h
.eh_frame:000000000001FD4C                 db  86h
.eh_frame:000000000001FD4D                 db    2
.eh_frame:000000000001FD4E                 db  43h ; C
.eh_frame:000000000001FD4F                 db  0Dh
.eh_frame:000000000001FD50                 db    6
.eh_frame:000000000001FD51                 db  43h ; C
.eh_frame:000000000001FD52                 db  8Ch
.eh_frame:000000000001FD53                 db    3
.eh_frame:000000000001FD54                 db  83h
.eh_frame:000000000001FD55                 db    4
.eh_frame:000000000001FD56                 db    3
.eh_frame:000000000001FD57                 db  26h ; &
.eh_frame:000000000001FD58                 db    1
.eh_frame:000000000001FD59                 db  0Ah
.eh_frame:000000000001FD5A                 db  0Ch
.eh_frame:000000000001FD5B                 db    7
.eh_frame:000000000001FD5C                 db    8
.eh_frame:000000000001FD5D                 db  43h ; C
.eh_frame:000000000001FD5E                 db  0Bh
.eh_frame:000000000001FD5F                 db    0
.eh_frame:000000000001FD60                 db  10h
.eh_frame:000000000001FD61                 db    0
.eh_frame:000000000001FD62                 db    0
.eh_frame:000000000001FD63                 db    0
.eh_frame:000000000001FD64                 db 0F4h
.eh_frame:000000000001FD65                 db  26h ; &
.eh_frame:000000000001FD66                 db    0
.eh_frame:000000000001FD67                 db    0
.eh_frame:000000000001FD68                 db 0FEh
.eh_frame:000000000001FD69                 db  23h ; #
.eh_frame:000000000001FD6A                 db 0FEh
.eh_frame:000000000001FD6B                 db 0FFh
.eh_frame:000000000001FD6C                 db  23h ; #
.eh_frame:000000000001FD6D                 db    0
.eh_frame:000000000001FD6E                 db    0
.eh_frame:000000000001FD6F                 db    0
.eh_frame:000000000001FD70                 db    0
.eh_frame:000000000001FD71                 db  59h ; Y
.eh_frame:000000000001FD72                 db  0Eh
.eh_frame:000000000001FD73                 db  10h
.eh_frame:000000000001FD74                 db  2Ch ; ,
.eh_frame:000000000001FD75                 db    0
.eh_frame:000000000001FD76                 db    0
.eh_frame:000000000001FD77                 db    0
.eh_frame:000000000001FD78                 db    8
.eh_frame:000000000001FD79                 db  27h ; '
.eh_frame:000000000001FD7A                 db    0
.eh_frame:000000000001FD7B                 db    0
.eh_frame:000000000001FD7C                 db 0A4h
.eh_frame:000000000001FD7D                 db  8Ch
.eh_frame:000000000001FD7E                 db 0FFh
.eh_frame:000000000001FD7F                 db 0FFh
.eh_frame:000000000001FD80                 db  71h ; q
.eh_frame:000000000001FD81                 db  0Ah
.eh_frame:000000000001FD82                 db    0
.eh_frame:000000000001FD83                 db    0
.eh_frame:000000000001FD84                 db    0
.eh_frame:000000000001FD85                 db  41h ; A
.eh_frame:000000000001FD86                 db  0Eh
.eh_frame:000000000001FD87                 db  10h
.eh_frame:000000000001FD88                 db  86h
.eh_frame:000000000001FD89                 db    2
.eh_frame:000000000001FD8A                 db  43h ; C
.eh_frame:000000000001FD8B                 db  0Dh
.eh_frame:000000000001FD8C                 db    6
.eh_frame:000000000001FD8D                 db  49h ; I
.eh_frame:000000000001FD8E                 db  8Fh
.eh_frame:000000000001FD8F                 db    3
.eh_frame:000000000001FD90                 db  8Eh
.eh_frame:000000000001FD91                 db    4
.eh_frame:000000000001FD92                 db  8Dh
.eh_frame:000000000001FD93                 db    5
.eh_frame:000000000001FD94                 db  8Ch
.eh_frame:000000000001FD95                 db    6
.eh_frame:000000000001FD96                 db  83h
.eh_frame:000000000001FD97                 db    7
.eh_frame:000000000001FD98                 db    3
.eh_frame:000000000001FD99                 db  96h
.eh_frame:000000000001FD9A                 db    4
.eh_frame:000000000001FD9B                 db  0Ah
.eh_frame:000000000001FD9C                 db  0Ch
.eh_frame:000000000001FD9D                 db    7
.eh_frame:000000000001FD9E                 db    8
.eh_frame:000000000001FD9F                 db  45h ; E
.eh_frame:000000000001FDA0                 db  0Bh
.eh_frame:000000000001FDA1                 db    0
.eh_frame:000000000001FDA2                 db    0
.eh_frame:000000000001FDA3                 db    0
.eh_frame:000000000001FDA4                 db  50h ; P
.eh_frame:000000000001FDA5                 db    0
.eh_frame:000000000001FDA6                 db    0
.eh_frame:000000000001FDA7                 db    0
.eh_frame:000000000001FDA8                 db  38h ; 8
.eh_frame:000000000001FDA9                 db  27h ; '
.eh_frame:000000000001FDAA                 db    0
.eh_frame:000000000001FDAB                 db    0
.eh_frame:000000000001FDAC                 db 0F4h
.eh_frame:000000000001FDAD                 db  96h
.eh_frame:000000000001FDAE                 db 0FFh
.eh_frame:000000000001FDAF                 db 0FFh
.eh_frame:000000000001FDB0                 db    9
.eh_frame:000000000001FDB1                 db  11h
.eh_frame:000000000001FDB2                 db    0
.eh_frame:000000000001FDB3                 db    0
.eh_frame:000000000001FDB4                 db    0
.eh_frame:000000000001FDB5                 db  42h ; B
.eh_frame:000000000001FDB6                 db  0Eh
.eh_frame:000000000001FDB7                 db  10h
.eh_frame:000000000001FDB8                 db  8Fh
.eh_frame:000000000001FDB9                 db    2
.eh_frame:000000000001FDBA                 db  42h ; B
.eh_frame:000000000001FDBB                 db  0Eh
.eh_frame:000000000001FDBC                 db  18h
.eh_frame:000000000001FDBD                 db  8Eh
.eh_frame:000000000001FDBE                 db    3
.eh_frame:000000000001FDBF                 db  42h ; B
.eh_frame:000000000001FDC0                 db  0Eh
.eh_frame:000000000001FDC1                 db  20h
.eh_frame:000000000001FDC2                 db  8Dh
.eh_frame:000000000001FDC3                 db    4
.eh_frame:000000000001FDC4                 db  42h ; B
.eh_frame:000000000001FDC5                 db  0Eh
.eh_frame:000000000001FDC6                 db  28h ; (
.eh_frame:000000000001FDC7                 db  8Ch
.eh_frame:000000000001FDC8                 db    5
.eh_frame:000000000001FDC9                 db  44h ; D
.eh_frame:000000000001FDCA                 db  0Eh
.eh_frame:000000000001FDCB                 db  30h ; 0
.eh_frame:000000000001FDCC                 db  86h
.eh_frame:000000000001FDCD                 db    6
.eh_frame:000000000001FDCE                 db  41h ; A
.eh_frame:000000000001FDCF                 db  0Eh
.eh_frame:000000000001FDD0                 db  38h ; 8
.eh_frame:000000000001FDD1                 db  83h
.eh_frame:000000000001FDD2                 db    7
.eh_frame:000000000001FDD3                 db  4Ah ; J
.eh_frame:000000000001FDD4                 db  0Eh
.eh_frame:000000000001FDD5                 db 0D0h
.eh_frame:000000000001FDD6                 db    3
.eh_frame:000000000001FDD7                 db    3
.eh_frame:000000000001FDD8                 db  8Dh
.eh_frame:000000000001FDD9                 db    1
.eh_frame:000000000001FDDA                 db  0Ah
.eh_frame:000000000001FDDB                 db  0Eh
.eh_frame:000000000001FDDC                 db  38h ; 8
.eh_frame:000000000001FDDD                 db  41h ; A
.eh_frame:000000000001FDDE                 db  0Eh
.eh_frame:000000000001FDDF                 db  30h ; 0
.eh_frame:000000000001FDE0                 db  41h ; A
.eh_frame:000000000001FDE1                 db  0Eh
.eh_frame:000000000001FDE2                 db  28h ; (
.eh_frame:000000000001FDE3                 db  42h ; B
.eh_frame:000000000001FDE4                 db  0Eh
.eh_frame:000000000001FDE5                 db  20h
.eh_frame:000000000001FDE6                 db  42h ; B
.eh_frame:000000000001FDE7                 db  0Eh
.eh_frame:000000000001FDE8                 db  18h
.eh_frame:000000000001FDE9                 db  42h ; B
.eh_frame:000000000001FDEA                 db  0Eh
.eh_frame:000000000001FDEB                 db  10h
.eh_frame:000000000001FDEC                 db  42h ; B
.eh_frame:000000000001FDED                 db  0Eh
.eh_frame:000000000001FDEE                 db    8
.eh_frame:000000000001FDEF                 db  42h ; B
.eh_frame:000000000001FDF0                 db  0Bh
.eh_frame:000000000001FDF1                 db    0
.eh_frame:000000000001FDF2                 db    0
.eh_frame:000000000001FDF3                 db    0
.eh_frame:000000000001FDF4                 db    0
.eh_frame:000000000001FDF5                 db    0
.eh_frame:000000000001FDF6                 db    0
.eh_frame:000000000001FDF7                 db    0
.eh_frame:000000000001FDF8                 db  4Ch ; L
.eh_frame:000000000001FDF9                 db    0
.eh_frame:000000000001FDFA                 db    0
.eh_frame:000000000001FDFB                 db    0
.eh_frame:000000000001FDFC                 db  8Ch
.eh_frame:000000000001FDFD                 db  27h ; '
.eh_frame:000000000001FDFE                 db    0
.eh_frame:000000000001FDFF                 db    0
.eh_frame:000000000001FE00                 db 0B0h
.eh_frame:000000000001FE01                 db 0A7h
.eh_frame:000000000001FE02                 db 0FFh
.eh_frame:000000000001FE03                 db 0FFh
.eh_frame:000000000001FE04                 db 0BDh
.eh_frame:000000000001FE05                 db    2
.eh_frame:000000000001FE06                 db    0
.eh_frame:000000000001FE07                 db    0
.eh_frame:000000000001FE08                 db    0
.eh_frame:000000000001FE09                 db  42h ; B
.eh_frame:000000000001FE0A                 db  0Eh
.eh_frame:000000000001FE0B                 db  10h
.eh_frame:000000000001FE0C                 db  8Fh
.eh_frame:000000000001FE0D                 db    2
.eh_frame:000000000001FE0E                 db  42h ; B
.eh_frame:000000000001FE0F                 db  0Eh
.eh_frame:000000000001FE10                 db  18h
.eh_frame:000000000001FE11                 db  8Eh
.eh_frame:000000000001FE12                 db    3
.eh_frame:000000000001FE13                 db  45h ; E
.eh_frame:000000000001FE14                 db  0Eh
.eh_frame:000000000001FE15                 db  20h
.eh_frame:000000000001FE16                 db  8Dh
.eh_frame:000000000001FE17                 db    4
.eh_frame:000000000001FE18                 db  42h ; B
.eh_frame:000000000001FE19                 db  0Eh
.eh_frame:000000000001FE1A                 db  28h ; (
.eh_frame:000000000001FE1B                 db  8Ch
.eh_frame:000000000001FE1C                 db    5
.eh_frame:000000000001FE1D                 db  44h ; D
.eh_frame:000000000001FE1E                 db  0Eh
.eh_frame:000000000001FE1F                 db  30h ; 0
.eh_frame:000000000001FE20                 db  86h
.eh_frame:000000000001FE21                 db    6
.eh_frame:000000000001FE22                 db  41h ; A
.eh_frame:000000000001FE23                 db  0Eh
.eh_frame:000000000001FE24                 db  38h ; 8
.eh_frame:000000000001FE25                 db  83h
.eh_frame:000000000001FE26                 db    7
.eh_frame:000000000001FE27                 db  4Eh ; N
.eh_frame:000000000001FE28                 db  0Eh
.eh_frame:000000000001FE29                 db 0A0h
.eh_frame:000000000001FE2A                 db  21h ; !
.eh_frame:000000000001FE2B                 db    3
.eh_frame:000000000001FE2C                 db  16h
.eh_frame:000000000001FE2D                 db    2
.eh_frame:000000000001FE2E                 db  0Ah
.eh_frame:000000000001FE2F                 db  0Eh
.eh_frame:000000000001FE30                 db  38h ; 8
.eh_frame:000000000001FE31                 db  41h ; A
.eh_frame:000000000001FE32                 db  0Eh
.eh_frame:000000000001FE33                 db  30h ; 0
.eh_frame:000000000001FE34                 db  41h ; A
.eh_frame:000000000001FE35                 db  0Eh
.eh_frame:000000000001FE36                 db  28h ; (
.eh_frame:000000000001FE37                 db  42h ; B
.eh_frame:000000000001FE38                 db  0Eh
.eh_frame:000000000001FE39                 db  20h
.eh_frame:000000000001FE3A                 db  42h ; B
.eh_frame:000000000001FE3B                 db  0Eh
.eh_frame:000000000001FE3C                 db  18h
.eh_frame:000000000001FE3D                 db  42h ; B
.eh_frame:000000000001FE3E                 db  0Eh
.eh_frame:000000000001FE3F                 db  10h
.eh_frame:000000000001FE40                 db  42h ; B
.eh_frame:000000000001FE41                 db  0Eh
.eh_frame:000000000001FE42                 db    8
.eh_frame:000000000001FE43                 db  42h ; B
.eh_frame:000000000001FE44                 db  0Bh
.eh_frame:000000000001FE45                 db    0
.eh_frame:000000000001FE46                 db    0
.eh_frame:000000000001FE47                 db    0
.eh_frame:000000000001FE48                 db  4Ch ; L
.eh_frame:000000000001FE49                 db    0
.eh_frame:000000000001FE4A                 db    0
.eh_frame:000000000001FE4B                 db    0
.eh_frame:000000000001FE4C                 db 0DCh
.eh_frame:000000000001FE4D                 db  27h ; '
.eh_frame:000000000001FE4E                 db    0
.eh_frame:000000000001FE4F                 db    0
.eh_frame:000000000001FE50                 db  20h
.eh_frame:000000000001FE51                 db 0AAh
.eh_frame:000000000001FE52                 db 0FFh
.eh_frame:000000000001FE53                 db 0FFh
.eh_frame:000000000001FE54                 db  42h ; B
.eh_frame:000000000001FE55                 db    2
.eh_frame:000000000001FE56                 db    0
.eh_frame:000000000001FE57                 db    0
.eh_frame:000000000001FE58                 db    0
.eh_frame:000000000001FE59                 db  42h ; B
.eh_frame:000000000001FE5A                 db  0Eh
.eh_frame:000000000001FE5B                 db  10h
.eh_frame:000000000001FE5C                 db  8Fh
.eh_frame:000000000001FE5D                 db    2
.eh_frame:000000000001FE5E                 db  42h ; B
.eh_frame:000000000001FE5F                 db  0Eh
.eh_frame:000000000001FE60                 db  18h
.eh_frame:000000000001FE61                 db  8Eh
.eh_frame:000000000001FE62                 db    3
.eh_frame:000000000001FE63                 db  42h ; B
.eh_frame:000000000001FE64                 db  0Eh
.eh_frame:000000000001FE65                 db  20h
.eh_frame:000000000001FE66                 db  8Dh
.eh_frame:000000000001FE67                 db    4
.eh_frame:000000000001FE68                 db  42h ; B
.eh_frame:000000000001FE69                 db  0Eh
.eh_frame:000000000001FE6A                 db  28h ; (
.eh_frame:000000000001FE6B                 db  8Ch
.eh_frame:000000000001FE6C                 db    5
.eh_frame:000000000001FE6D                 db  44h ; D
.eh_frame:000000000001FE6E                 db  0Eh
.eh_frame:000000000001FE6F                 db  30h ; 0
.eh_frame:000000000001FE70                 db  86h
.eh_frame:000000000001FE71                 db    6
.eh_frame:000000000001FE72                 db  41h ; A
.eh_frame:000000000001FE73                 db  0Eh
.eh_frame:000000000001FE74                 db  38h ; 8
.eh_frame:000000000001FE75                 db  83h
.eh_frame:000000000001FE76                 db    7
.eh_frame:000000000001FE77                 db  44h ; D
.eh_frame:000000000001FE78                 db  0Eh
.eh_frame:000000000001FE79                 db  90h
.eh_frame:000000000001FE7A                 db    1
.eh_frame:000000000001FE7B                 db    3
.eh_frame:000000000001FE7C                 db 0FEh
.eh_frame:000000000001FE7D                 db    1
.eh_frame:000000000001FE7E                 db  0Ah
.eh_frame:000000000001FE7F                 db  0Eh
.eh_frame:000000000001FE80                 db  38h ; 8
.eh_frame:000000000001FE81                 db  41h ; A
.eh_frame:000000000001FE82                 db  0Eh
.eh_frame:000000000001FE83                 db  30h ; 0
.eh_frame:000000000001FE84                 db  41h ; A
.eh_frame:000000000001FE85                 db  0Eh
.eh_frame:000000000001FE86                 db  28h ; (
.eh_frame:000000000001FE87                 db  42h ; B
.eh_frame:000000000001FE88                 db  0Eh
.eh_frame:000000000001FE89                 db  20h
.eh_frame:000000000001FE8A                 db  42h ; B
.eh_frame:000000000001FE8B                 db  0Eh
.eh_frame:000000000001FE8C                 db  18h
.eh_frame:000000000001FE8D                 db  42h ; B
.eh_frame:000000000001FE8E                 db  0Eh
.eh_frame:000000000001FE8F                 db  10h
.eh_frame:000000000001FE90                 db  42h ; B
.eh_frame:000000000001FE91                 db  0Eh
.eh_frame:000000000001FE92                 db    8
.eh_frame:000000000001FE93                 db  47h ; G
.eh_frame:000000000001FE94                 db  0Bh
.eh_frame:000000000001FE95                 db    0
.eh_frame:000000000001FE96                 db    0
.eh_frame:000000000001FE97                 db    0
.eh_frame:000000000001FE98                 db  4Ch ; L
.eh_frame:000000000001FE99                 db    0
.eh_frame:000000000001FE9A                 db    0
.eh_frame:000000000001FE9B                 db    0
.eh_frame:000000000001FE9C                 db  2Ch ; ,
.eh_frame:000000000001FE9D                 db  28h ; (
.eh_frame:000000000001FE9E                 db    0
.eh_frame:000000000001FE9F                 db    0
.eh_frame:000000000001FEA0                 db  20h
.eh_frame:000000000001FEA1                 db 0ACh
.eh_frame:000000000001FEA2                 db 0FFh
.eh_frame:000000000001FEA3                 db 0FFh
.eh_frame:000000000001FEA4                 db 0E7h
.eh_frame:000000000001FEA5                 db    0
.eh_frame:000000000001FEA6                 db    0
.eh_frame:000000000001FEA7                 db    0
.eh_frame:000000000001FEA8                 db    0
.eh_frame:000000000001FEA9                 db  42h ; B
.eh_frame:000000000001FEAA                 db  0Eh
.eh_frame:000000000001FEAB                 db  10h
.eh_frame:000000000001FEAC                 db  8Dh
.eh_frame:000000000001FEAD                 db    2
.eh_frame:000000000001FEAE                 db  42h ; B
.eh_frame:000000000001FEAF                 db  0Eh
.eh_frame:000000000001FEB0                 db  18h
.eh_frame:000000000001FEB1                 db  8Ch
.eh_frame:000000000001FEB2                 db    3
.eh_frame:000000000001FEB3                 db  41h ; A
.eh_frame:000000000001FEB4                 db  0Eh
.eh_frame:000000000001FEB5                 db  20h
.eh_frame:000000000001FEB6                 db  86h
.eh_frame:000000000001FEB7                 db    4
.eh_frame:000000000001FEB8                 db  41h ; A
.eh_frame:000000000001FEB9                 db  0Eh
.eh_frame:000000000001FEBA                 db  28h ; (
.eh_frame:000000000001FEBB                 db  83h
.eh_frame:000000000001FEBC                 db    5
.eh_frame:000000000001FEBD                 db  47h ; G
.eh_frame:000000000001FEBE                 db  0Eh
.eh_frame:000000000001FEBF                 db  30h ; 0
.eh_frame:000000000001FEC0                 db  6Eh ; n
.eh_frame:000000000001FEC1                 db  0Ah
.eh_frame:000000000001FEC2                 db  0Eh
.eh_frame:000000000001FEC3                 db  28h ; (
.eh_frame:000000000001FEC4                 db  44h ; D
.eh_frame:000000000001FEC5                 db  0Eh
.eh_frame:000000000001FEC6                 db  20h
.eh_frame:000000000001FEC7                 db  41h ; A
.eh_frame:000000000001FEC8                 db  0Eh
.eh_frame:000000000001FEC9                 db  18h
.eh_frame:000000000001FECA                 db  42h ; B
.eh_frame:000000000001FECB                 db  0Eh
.eh_frame:000000000001FECC                 db  10h
.eh_frame:000000000001FECD                 db  42h ; B
.eh_frame:000000000001FECE                 db  0Eh
.eh_frame:000000000001FECF                 db    8
.eh_frame:000000000001FED0                 db  44h ; D
.eh_frame:000000000001FED1                 db  0Bh
.eh_frame:000000000001FED2                 db    2
.eh_frame:000000000001FED3                 db  67h ; g
.eh_frame:000000000001FED4                 db  0Ah
.eh_frame:000000000001FED5                 db  0Eh
.eh_frame:000000000001FED6                 db  28h ; (
.eh_frame:000000000001FED7                 db  44h ; D
.eh_frame:000000000001FED8                 db  0Eh
.eh_frame:000000000001FED9                 db  20h
.eh_frame:000000000001FEDA                 db  41h ; A
.eh_frame:000000000001FEDB                 db  0Eh
.eh_frame:000000000001FEDC                 db  18h
.eh_frame:000000000001FEDD                 db  42h ; B
.eh_frame:000000000001FEDE                 db  0Eh
.eh_frame:000000000001FEDF                 db  10h
.eh_frame:000000000001FEE0                 db  42h ; B
.eh_frame:000000000001FEE1                 db  0Eh
.eh_frame:000000000001FEE2                 db    8
.eh_frame:000000000001FEE3                 db  48h ; H
.eh_frame:000000000001FEE4                 db  0Bh
.eh_frame:000000000001FEE5                 db    0
.eh_frame:000000000001FEE6                 db    0
.eh_frame:000000000001FEE7                 db    0
.eh_frame:000000000001FEE8                 db  14h
.eh_frame:000000000001FEE9                 db    0
.eh_frame:000000000001FEEA                 db    0
.eh_frame:000000000001FEEB                 db    0
.eh_frame:000000000001FEEC                 db  7Ch ; |
.eh_frame:000000000001FEED                 db  28h ; (
.eh_frame:000000000001FEEE                 db    0
.eh_frame:000000000001FEEF                 db    0
.eh_frame:000000000001FEF0                 db 0C0h
.eh_frame:000000000001FEF1                 db 0ACh
.eh_frame:000000000001FEF2                 db 0FFh
.eh_frame:000000000001FEF3                 db 0FFh
.eh_frame:000000000001FEF4                 db  39h ; 9
.eh_frame:000000000001FEF5                 db    0
.eh_frame:000000000001FEF6                 db    0
.eh_frame:000000000001FEF7                 db    0
.eh_frame:000000000001FEF8                 db    0
.eh_frame:000000000001FEF9                 db  4Ah ; J
.eh_frame:000000000001FEFA                 db  0Eh
.eh_frame:000000000001FEFB                 db  10h
.eh_frame:000000000001FEFC                 db  68h ; h
.eh_frame:000000000001FEFD                 db  0Eh
.eh_frame:000000000001FEFE                 db    8
.eh_frame:000000000001FEFF                 db    0
.eh_frame:000000000001FF00                 db  14h
.eh_frame:000000000001FF01                 db    0
.eh_frame:000000000001FF02                 db    0
.eh_frame:000000000001FF03                 db    0
.eh_frame:000000000001FF04                 db  94h
.eh_frame:000000000001FF05                 db  28h ; (
.eh_frame:000000000001FF06                 db    0
.eh_frame:000000000001FF07                 db    0
.eh_frame:000000000001FF08                 db 0E8h
.eh_frame:000000000001FF09                 db 0ACh
.eh_frame:000000000001FF0A                 db 0FFh
.eh_frame:000000000001FF0B                 db 0FFh
.eh_frame:000000000001FF0C                 db  25h ; %
.eh_frame:000000000001FF0D                 db    0
.eh_frame:000000000001FF0E                 db    0
.eh_frame:000000000001FF0F                 db    0
.eh_frame:000000000001FF10                 db    0
.eh_frame:000000000001FF11                 db  60h ; `
.eh_frame:000000000001FF12                 db  0Eh
.eh_frame:000000000001FF13                 db  10h
.eh_frame:000000000001FF14                 db    0
.eh_frame:000000000001FF15                 db    0
.eh_frame:000000000001FF16                 db    0
.eh_frame:000000000001FF17                 db    0
.eh_frame:000000000001FF18                 db  44h ; D
.eh_frame:000000000001FF19                 db    0
.eh_frame:000000000001FF1A                 db    0
.eh_frame:000000000001FF1B                 db    0
.eh_frame:000000000001FF1C                 db 0ACh
.eh_frame:000000000001FF1D                 db  28h ; (
.eh_frame:000000000001FF1E                 db    0
.eh_frame:000000000001FF1F                 db    0
.eh_frame:000000000001FF20                 db    0
.eh_frame:000000000001FF21                 db 0ADh
.eh_frame:000000000001FF22                 db 0FFh
.eh_frame:000000000001FF23                 db 0FFh
.eh_frame:000000000001FF24                 db  2Ch ; ,
.eh_frame:000000000001FF25                 db    2
.eh_frame:000000000001FF26                 db    0
.eh_frame:000000000001FF27                 db    0
.eh_frame:000000000001FF28                 db    0
.eh_frame:000000000001FF29                 db  42h ; B
.eh_frame:000000000001FF2A                 db  0Eh
.eh_frame:000000000001FF2B                 db  10h
.eh_frame:000000000001FF2C                 db  8Eh
.eh_frame:000000000001FF2D                 db    2
.eh_frame:000000000001FF2E                 db  42h ; B
.eh_frame:000000000001FF2F                 db  0Eh
.eh_frame:000000000001FF30                 db  18h
.eh_frame:000000000001FF31                 db  8Dh
.eh_frame:000000000001FF32                 db    3
.eh_frame:000000000001FF33                 db  42h ; B
.eh_frame:000000000001FF34                 db  0Eh
.eh_frame:000000000001FF35                 db  20h
.eh_frame:000000000001FF36                 db  8Ch
.eh_frame:000000000001FF37                 db    4
.eh_frame:000000000001FF38                 db  41h ; A
.eh_frame:000000000001FF39                 db  0Eh
.eh_frame:000000000001FF3A                 db  28h ; (
.eh_frame:000000000001FF3B                 db  86h
.eh_frame:000000000001FF3C                 db    5
.eh_frame:000000000001FF3D                 db  41h ; A
.eh_frame:000000000001FF3E                 db  0Eh
.eh_frame:000000000001FF3F                 db  30h ; 0
.eh_frame:000000000001FF40                 db  83h
.eh_frame:000000000001FF41                 db    6
.eh_frame:000000000001FF42                 db  47h ; G
.eh_frame:000000000001FF43                 db  0Eh
.eh_frame:000000000001FF44                 db  80h
.eh_frame:000000000001FF45                 db    1
.eh_frame:000000000001FF46                 db    2
.eh_frame:000000000001FF47                 db  41h ; A
.eh_frame:000000000001FF48                 db  0Ah
.eh_frame:000000000001FF49                 db  0Eh
.eh_frame:000000000001FF4A                 db  30h ; 0
.eh_frame:000000000001FF4B                 db  41h ; A
.eh_frame:000000000001FF4C                 db  0Eh
.eh_frame:000000000001FF4D                 db  28h ; (
.eh_frame:000000000001FF4E                 db  41h ; A
.eh_frame:000000000001FF4F                 db  0Eh
.eh_frame:000000000001FF50                 db  20h
.eh_frame:000000000001FF51                 db  42h ; B
.eh_frame:000000000001FF52                 db  0Eh
.eh_frame:000000000001FF53                 db  18h
.eh_frame:000000000001FF54                 db  42h ; B
.eh_frame:000000000001FF55                 db  0Eh
.eh_frame:000000000001FF56                 db  10h
.eh_frame:000000000001FF57                 db  42h ; B
.eh_frame:000000000001FF58                 db  0Eh
.eh_frame:000000000001FF59                 db    8
.eh_frame:000000000001FF5A                 db  48h ; H
.eh_frame:000000000001FF5B                 db  0Bh
.eh_frame:000000000001FF5C                 db    0
.eh_frame:000000000001FF5D                 db    0
.eh_frame:000000000001FF5E                 db    0
.eh_frame:000000000001FF5F                 db    0
.eh_frame:000000000001FF60                 db  44h ; D
.eh_frame:000000000001FF61                 db    0
.eh_frame:000000000001FF62                 db    0
.eh_frame:000000000001FF63                 db    0
.eh_frame:000000000001FF64                 db 0F4h
.eh_frame:000000000001FF65                 db  28h ; (
.eh_frame:000000000001FF66                 db    0
.eh_frame:000000000001FF67                 db    0
.eh_frame:000000000001FF68                 db 0E8h
.eh_frame:000000000001FF69                 db 0AEh
.eh_frame:000000000001FF6A                 db 0FFh
.eh_frame:000000000001FF6B                 db 0FFh
.eh_frame:000000000001FF6C                 db  65h ; e
.eh_frame:000000000001FF6D                 db    0
.eh_frame:000000000001FF6E                 db    0
.eh_frame:000000000001FF6F                 db    0
.eh_frame:000000000001FF70                 db    0
.eh_frame:000000000001FF71                 db  42h ; B
.eh_frame:000000000001FF72                 db  0Eh
.eh_frame:000000000001FF73                 db  10h
.eh_frame:000000000001FF74                 db  8Fh
.eh_frame:000000000001FF75                 db    2
.eh_frame:000000000001FF76                 db  42h ; B
.eh_frame:000000000001FF77                 db  0Eh
.eh_frame:000000000001FF78                 db  18h
.eh_frame:000000000001FF79                 db  8Eh
.eh_frame:000000000001FF7A                 db    3
.eh_frame:000000000001FF7B                 db  45h ; E
.eh_frame:000000000001FF7C                 db  0Eh
.eh_frame:000000000001FF7D                 db  20h
.eh_frame:000000000001FF7E                 db  8Dh
.eh_frame:000000000001FF7F                 db    4
.eh_frame:000000000001FF80                 db  42h ; B
.eh_frame:000000000001FF81                 db  0Eh
.eh_frame:000000000001FF82                 db  28h ; (
.eh_frame:000000000001FF83                 db  8Ch
.eh_frame:000000000001FF84                 db    5
.eh_frame:000000000001FF85                 db  48h ; H
.eh_frame:000000000001FF86                 db  0Eh
.eh_frame:000000000001FF87                 db  30h ; 0
.eh_frame:000000000001FF88                 db  86h
.eh_frame:000000000001FF89                 db    6
.eh_frame:000000000001FF8A                 db  48h ; H
.eh_frame:000000000001FF8B                 db  0Eh
.eh_frame:000000000001FF8C                 db  38h ; 8
.eh_frame:000000000001FF8D                 db  83h
.eh_frame:000000000001FF8E                 db    7
.eh_frame:000000000001FF8F                 db  4Dh ; M
.eh_frame:000000000001FF90                 db  0Eh
.eh_frame:000000000001FF91                 db  40h ; @
.eh_frame:000000000001FF92                 db  72h ; r
.eh_frame:000000000001FF93                 db  0Eh
.eh_frame:000000000001FF94                 db  38h ; 8
.eh_frame:000000000001FF95                 db  41h ; A
.eh_frame:000000000001FF96                 db  0Eh
.eh_frame:000000000001FF97                 db  30h ; 0
.eh_frame:000000000001FF98                 db  41h ; A
.eh_frame:000000000001FF99                 db  0Eh
.eh_frame:000000000001FF9A                 db  28h ; (
.eh_frame:000000000001FF9B                 db  42h ; B
.eh_frame:000000000001FF9C                 db  0Eh
.eh_frame:000000000001FF9D                 db  20h
.eh_frame:000000000001FF9E                 db  42h ; B
.eh_frame:000000000001FF9F                 db  0Eh
.eh_frame:000000000001FFA0                 db  18h
.eh_frame:000000000001FFA1                 db  42h ; B
.eh_frame:000000000001FFA2                 db  0Eh
.eh_frame:000000000001FFA3                 db  10h
.eh_frame:000000000001FFA4                 db  42h ; B
.eh_frame:000000000001FFA5                 db  0Eh
.eh_frame:000000000001FFA6                 db    8
.eh_frame:000000000001FFA7                 db    0
.eh_frame:000000000001FFA8                 db  14h
.eh_frame:000000000001FFA9                 db    0
.eh_frame:000000000001FFAA                 db    0
.eh_frame:000000000001FFAB                 db    0
.eh_frame:000000000001FFAC                 db  3Ch ; <
.eh_frame:000000000001FFAD                 db  29h ; )
.eh_frame:000000000001FFAE                 db    0
.eh_frame:000000000001FFAF                 db    0
.eh_frame:000000000001FFB0                 db  10h
.eh_frame:000000000001FFB1                 db 0AFh
.eh_frame:000000000001FFB2                 db 0FFh
.eh_frame:000000000001FFB3                 db 0FFh
.eh_frame:000000000001FFB4                 db    2
.eh_frame:000000000001FFB5                 db    0
.eh_frame:000000000001FFB6                 db    0
.eh_frame:000000000001FFB7                 db    0
.eh_frame:000000000001FFB8                 db    0
.eh_frame:000000000001FFB9                 db    0
.eh_frame:000000000001FFBA                 db    0
.eh_frame:000000000001FFBB                 db    0
.eh_frame:000000000001FFBC                 db    0
.eh_frame:000000000001FFBD                 db    0
.eh_frame:000000000001FFBE                 db    0
.eh_frame:000000000001FFBF                 db    0
.eh_frame:000000000001FFC0                 db  10h
.eh_frame:000000000001FFC1                 db    0
.eh_frame:000000000001FFC2                 db    0
.eh_frame:000000000001FFC3                 db    0
.eh_frame:000000000001FFC4                 db  54h ; T
.eh_frame:000000000001FFC5                 db  29h ; )
.eh_frame:000000000001FFC6                 db    0
.eh_frame:000000000001FFC7                 db    0
.eh_frame:000000000001FFC8                 db    8
.eh_frame:000000000001FFC9                 db 0AFh
.eh_frame:000000000001FFCA                 db 0FFh
.eh_frame:000000000001FFCB                 db 0FFh
.eh_frame:000000000001FFCC                 db  0Eh
.eh_frame:000000000001FFCD                 db    0
.eh_frame:000000000001FFCE                 db    0
.eh_frame:000000000001FFCF                 db    0
.eh_frame:000000000001FFD0                 db    0
.eh_frame:000000000001FFD1                 db    0
.eh_frame:000000000001FFD2                 db    0
.eh_frame:000000000001FFD3                 db    0
.eh_frame:000000000001FFD4 __FRAME_END__   db    0
.eh_frame:000000000001FFD5                 db    0
.eh_frame:000000000001FFD6                 db    0
.eh_frame:000000000001FFD7                 db    0
.eh_frame:000000000001FFD7 _eh_frame       ends
.eh_frame:000000000001FFD7
.init_array:0000000000220870 ; ELF Initialization Function Table
.init_array:0000000000220870 ; ===========================================================================
.init_array:0000000000220870
.init_array:0000000000220870 ; Segment type: Pure data
.init_array:0000000000220870 ; Segment permissions: Read/Write
.init_array:0000000000220870 _init_array     segment qword public 'DATA' use64
.init_array:0000000000220870                 assume cs:_init_array
.init_array:0000000000220870                 ;org 220870h
.init_array:0000000000220870 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000220870                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000220870                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000220870 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000220870
.fini_array:0000000000220878 ; ELF Termination Function Table
.fini_array:0000000000220878 ; ===========================================================================
.fini_array:0000000000220878
.fini_array:0000000000220878 ; Segment type: Pure data
.fini_array:0000000000220878 ; Segment permissions: Read/Write
.fini_array:0000000000220878 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000220878                 assume cs:_fini_array
.fini_array:0000000000220878                 ;org 220878h
.fini_array:0000000000220878 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000220878                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000220878 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000220878
.data.rel.ro:0000000000220880 ; ===========================================================================
.data.rel.ro:0000000000220880
.data.rel.ro:0000000000220880 ; Segment type: Pure data
.data.rel.ro:0000000000220880 ; Segment permissions: Read/Write
.data.rel.ro:0000000000220880 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000220880                 assume cs:_data_rel_ro
.data.rel.ro:0000000000220880                 ;org 220880h
.data.rel.ro:0000000000220880 format_args     dq offset aRoff         ; DATA XREF: main+16F↑o
.data.rel.ro:0000000000220880                                         ; "roff"
.data.rel.ro:0000000000220888                 dq offset aTex          ; "tex"
.data.rel.ro:0000000000220890                 align 20h
.data.rel.ro:00000000002208A0 ; struct option long_options
.data.rel.ro:00000000002208A0 long_options    dq offset aAutoReference; name
.data.rel.ro:00000000002208A0                                         ; DATA XREF: main+F↑o
.data.rel.ro:00000000002208A0                 dd 0                    ; has_arg ; "auto-reference"
.data.rel.ro:00000000002208A0                 db 4 dup(0)
.data.rel.ro:00000000002208A0                 dq 0                    ; flag
.data.rel.ro:00000000002208A0                 dd 41h                  ; val
.data.rel.ro:00000000002208A0                 db 4 dup(0)
.data.rel.ro:00000000002208C0                 dq offset aBreakFile    ; "break-file"
.data.rel.ro:00000000002208C8                 db    1
.data.rel.ro:00000000002208C9                 db    0
.data.rel.ro:00000000002208CA                 db    0
.data.rel.ro:00000000002208CB                 db    0
.data.rel.ro:00000000002208CC                 db    0
.data.rel.ro:00000000002208CD                 db    0
.data.rel.ro:00000000002208CE                 db    0
.data.rel.ro:00000000002208CF                 db    0
.data.rel.ro:00000000002208D0                 db    0
.data.rel.ro:00000000002208D1                 db    0
.data.rel.ro:00000000002208D2                 db    0
.data.rel.ro:00000000002208D3                 db    0
.data.rel.ro:00000000002208D4                 db    0
.data.rel.ro:00000000002208D5                 db    0
.data.rel.ro:00000000002208D6                 db    0
.data.rel.ro:00000000002208D7                 db    0
.data.rel.ro:00000000002208D8                 db  62h ; b
.data.rel.ro:00000000002208D9                 db    0
.data.rel.ro:00000000002208DA                 db    0
.data.rel.ro:00000000002208DB                 db    0
.data.rel.ro:00000000002208DC                 db    0
.data.rel.ro:00000000002208DD                 db    0
.data.rel.ro:00000000002208DE                 db    0
.data.rel.ro:00000000002208DF                 db    0
.data.rel.ro:00000000002208E0                 dq offset aFlagTruncation ; "flag-truncation"
.data.rel.ro:00000000002208E8                 db    1
.data.rel.ro:00000000002208E9                 db    0
.data.rel.ro:00000000002208EA                 db    0
.data.rel.ro:00000000002208EB                 db    0
.data.rel.ro:00000000002208EC                 db    0
.data.rel.ro:00000000002208ED                 db    0
.data.rel.ro:00000000002208EE                 db    0
.data.rel.ro:00000000002208EF                 db    0
.data.rel.ro:00000000002208F0                 db    0
.data.rel.ro:00000000002208F1                 db    0
.data.rel.ro:00000000002208F2                 db    0
.data.rel.ro:00000000002208F3                 db    0
.data.rel.ro:00000000002208F4                 db    0
.data.rel.ro:00000000002208F5                 db    0
.data.rel.ro:00000000002208F6                 db    0
.data.rel.ro:00000000002208F7                 db    0
.data.rel.ro:00000000002208F8                 db  46h ; F
.data.rel.ro:00000000002208F9                 db    0
.data.rel.ro:00000000002208FA                 db    0
.data.rel.ro:00000000002208FB                 db    0
.data.rel.ro:00000000002208FC                 db    0
.data.rel.ro:00000000002208FD                 db    0
.data.rel.ro:00000000002208FE                 db    0
.data.rel.ro:00000000002208FF                 db    0
.data.rel.ro:0000000000220900                 dq offset aIgnoreCase   ; "ignore-case"
.data.rel.ro:0000000000220908                 db    0
.data.rel.ro:0000000000220909                 db    0
.data.rel.ro:000000000022090A                 db    0
.data.rel.ro:000000000022090B                 db    0
.data.rel.ro:000000000022090C                 db    0
.data.rel.ro:000000000022090D                 db    0
.data.rel.ro:000000000022090E                 db    0
.data.rel.ro:000000000022090F                 db    0
.data.rel.ro:0000000000220910                 db    0
.data.rel.ro:0000000000220911                 db    0
.data.rel.ro:0000000000220912                 db    0
.data.rel.ro:0000000000220913                 db    0
.data.rel.ro:0000000000220914                 db    0
.data.rel.ro:0000000000220915                 db    0
.data.rel.ro:0000000000220916                 db    0
.data.rel.ro:0000000000220917                 db    0
.data.rel.ro:0000000000220918                 db  66h ; f
.data.rel.ro:0000000000220919                 db    0
.data.rel.ro:000000000022091A                 db    0
.data.rel.ro:000000000022091B                 db    0
.data.rel.ro:000000000022091C                 db    0
.data.rel.ro:000000000022091D                 db    0
.data.rel.ro:000000000022091E                 db    0
.data.rel.ro:000000000022091F                 db    0
.data.rel.ro:0000000000220920                 dq offset aGapSize      ; "gap-size"
.data.rel.ro:0000000000220928                 db    1
.data.rel.ro:0000000000220929                 db    0
.data.rel.ro:000000000022092A                 db    0
.data.rel.ro:000000000022092B                 db    0
.data.rel.ro:000000000022092C                 db    0
.data.rel.ro:000000000022092D                 db    0
.data.rel.ro:000000000022092E                 db    0
.data.rel.ro:000000000022092F                 db    0
.data.rel.ro:0000000000220930                 db    0
.data.rel.ro:0000000000220931                 db    0
.data.rel.ro:0000000000220932                 db    0
.data.rel.ro:0000000000220933                 db    0
.data.rel.ro:0000000000220934                 db    0
.data.rel.ro:0000000000220935                 db    0
.data.rel.ro:0000000000220936                 db    0
.data.rel.ro:0000000000220937                 db    0
.data.rel.ro:0000000000220938                 db  67h ; g
.data.rel.ro:0000000000220939                 db    0
.data.rel.ro:000000000022093A                 db    0
.data.rel.ro:000000000022093B                 db    0
.data.rel.ro:000000000022093C                 db    0
.data.rel.ro:000000000022093D                 db    0
.data.rel.ro:000000000022093E                 db    0
.data.rel.ro:000000000022093F                 db    0
.data.rel.ro:0000000000220940                 dq offset aIgnoreFile   ; "ignore-file"
.data.rel.ro:0000000000220948                 db    1
.data.rel.ro:0000000000220949                 db    0
.data.rel.ro:000000000022094A                 db    0
.data.rel.ro:000000000022094B                 db    0
.data.rel.ro:000000000022094C                 db    0
.data.rel.ro:000000000022094D                 db    0
.data.rel.ro:000000000022094E                 db    0
.data.rel.ro:000000000022094F                 db    0
.data.rel.ro:0000000000220950                 db    0
.data.rel.ro:0000000000220951                 db    0
.data.rel.ro:0000000000220952                 db    0
.data.rel.ro:0000000000220953                 db    0
.data.rel.ro:0000000000220954                 db    0
.data.rel.ro:0000000000220955                 db    0
.data.rel.ro:0000000000220956                 db    0
.data.rel.ro:0000000000220957                 db    0
.data.rel.ro:0000000000220958                 db  69h ; i
.data.rel.ro:0000000000220959                 db    0
.data.rel.ro:000000000022095A                 db    0
.data.rel.ro:000000000022095B                 db    0
.data.rel.ro:000000000022095C                 db    0
.data.rel.ro:000000000022095D                 db    0
.data.rel.ro:000000000022095E                 db    0
.data.rel.ro:000000000022095F                 db    0
.data.rel.ro:0000000000220960                 dq offset aMacroName    ; "macro-name"
.data.rel.ro:0000000000220968                 db    1
.data.rel.ro:0000000000220969                 db    0
.data.rel.ro:000000000022096A                 db    0
.data.rel.ro:000000000022096B                 db    0
.data.rel.ro:000000000022096C                 db    0
.data.rel.ro:000000000022096D                 db    0
.data.rel.ro:000000000022096E                 db    0
.data.rel.ro:000000000022096F                 db    0
.data.rel.ro:0000000000220970                 db    0
.data.rel.ro:0000000000220971                 db    0
.data.rel.ro:0000000000220972                 db    0
.data.rel.ro:0000000000220973                 db    0
.data.rel.ro:0000000000220974                 db    0
.data.rel.ro:0000000000220975                 db    0
.data.rel.ro:0000000000220976                 db    0
.data.rel.ro:0000000000220977                 db    0
.data.rel.ro:0000000000220978                 db  4Dh ; M
.data.rel.ro:0000000000220979                 db    0
.data.rel.ro:000000000022097A                 db    0
.data.rel.ro:000000000022097B                 db    0
.data.rel.ro:000000000022097C                 db    0
.data.rel.ro:000000000022097D                 db    0
.data.rel.ro:000000000022097E                 db    0
.data.rel.ro:000000000022097F                 db    0
.data.rel.ro:0000000000220980                 dq offset aOnlyFile     ; "only-file"
.data.rel.ro:0000000000220988                 db    1
.data.rel.ro:0000000000220989                 db    0
.data.rel.ro:000000000022098A                 db    0
.data.rel.ro:000000000022098B                 db    0
.data.rel.ro:000000000022098C                 db    0
.data.rel.ro:000000000022098D                 db    0
.data.rel.ro:000000000022098E                 db    0
.data.rel.ro:000000000022098F                 db    0
.data.rel.ro:0000000000220990                 db    0
.data.rel.ro:0000000000220991                 db    0
.data.rel.ro:0000000000220992                 db    0
.data.rel.ro:0000000000220993                 db    0
.data.rel.ro:0000000000220994                 db    0
.data.rel.ro:0000000000220995                 db    0
.data.rel.ro:0000000000220996                 db    0
.data.rel.ro:0000000000220997                 db    0
.data.rel.ro:0000000000220998                 db  6Fh ; o
.data.rel.ro:0000000000220999                 db    0
.data.rel.ro:000000000022099A                 db    0
.data.rel.ro:000000000022099B                 db    0
.data.rel.ro:000000000022099C                 db    0
.data.rel.ro:000000000022099D                 db    0
.data.rel.ro:000000000022099E                 db    0
.data.rel.ro:000000000022099F                 db    0
.data.rel.ro:00000000002209A0                 dq offset aReferences   ; "references"
.data.rel.ro:00000000002209A8                 db    0
.data.rel.ro:00000000002209A9                 db    0
.data.rel.ro:00000000002209AA                 db    0
.data.rel.ro:00000000002209AB                 db    0
.data.rel.ro:00000000002209AC                 db    0
.data.rel.ro:00000000002209AD                 db    0
.data.rel.ro:00000000002209AE                 db    0
.data.rel.ro:00000000002209AF                 db    0
.data.rel.ro:00000000002209B0                 db    0
.data.rel.ro:00000000002209B1                 db    0
.data.rel.ro:00000000002209B2                 db    0
.data.rel.ro:00000000002209B3                 db    0
.data.rel.ro:00000000002209B4                 db    0
.data.rel.ro:00000000002209B5                 db    0
.data.rel.ro:00000000002209B6                 db    0
.data.rel.ro:00000000002209B7                 db    0
.data.rel.ro:00000000002209B8                 db  72h ; r
.data.rel.ro:00000000002209B9                 db    0
.data.rel.ro:00000000002209BA                 db    0
.data.rel.ro:00000000002209BB                 db    0
.data.rel.ro:00000000002209BC                 db    0
.data.rel.ro:00000000002209BD                 db    0
.data.rel.ro:00000000002209BE                 db    0
.data.rel.ro:00000000002209BF                 db    0
.data.rel.ro:00000000002209C0                 dq offset aRightSideRefs ; "right-side-refs"
.data.rel.ro:00000000002209C8                 db    0
.data.rel.ro:00000000002209C9                 db    0
.data.rel.ro:00000000002209CA                 db    0
.data.rel.ro:00000000002209CB                 db    0
.data.rel.ro:00000000002209CC                 db    0
.data.rel.ro:00000000002209CD                 db    0
.data.rel.ro:00000000002209CE                 db    0
.data.rel.ro:00000000002209CF                 db    0
.data.rel.ro:00000000002209D0                 db    0
.data.rel.ro:00000000002209D1                 db    0
.data.rel.ro:00000000002209D2                 db    0
.data.rel.ro:00000000002209D3                 db    0
.data.rel.ro:00000000002209D4                 db    0
.data.rel.ro:00000000002209D5                 db    0
.data.rel.ro:00000000002209D6                 db    0
.data.rel.ro:00000000002209D7                 db    0
.data.rel.ro:00000000002209D8                 db  52h ; R
.data.rel.ro:00000000002209D9                 db    0
.data.rel.ro:00000000002209DA                 db    0
.data.rel.ro:00000000002209DB                 db    0
.data.rel.ro:00000000002209DC                 db    0
.data.rel.ro:00000000002209DD                 db    0
.data.rel.ro:00000000002209DE                 db    0
.data.rel.ro:00000000002209DF                 db    0
.data.rel.ro:00000000002209E0                 dq offset aFormat+2     ; "format"
.data.rel.ro:00000000002209E8                 db    1
.data.rel.ro:00000000002209E9                 db    0
.data.rel.ro:00000000002209EA                 db    0
.data.rel.ro:00000000002209EB                 db    0
.data.rel.ro:00000000002209EC                 db    0
.data.rel.ro:00000000002209ED                 db    0
.data.rel.ro:00000000002209EE                 db    0
.data.rel.ro:00000000002209EF                 db    0
.data.rel.ro:00000000002209F0                 db    0
.data.rel.ro:00000000002209F1                 db    0
.data.rel.ro:00000000002209F2                 db    0
.data.rel.ro:00000000002209F3                 db    0
.data.rel.ro:00000000002209F4                 db    0
.data.rel.ro:00000000002209F5                 db    0
.data.rel.ro:00000000002209F6                 db    0
.data.rel.ro:00000000002209F7                 db    0
.data.rel.ro:00000000002209F8                 db  0Ah
.data.rel.ro:00000000002209F9                 db    0
.data.rel.ro:00000000002209FA                 db    0
.data.rel.ro:00000000002209FB                 db    0
.data.rel.ro:00000000002209FC                 db    0
.data.rel.ro:00000000002209FD                 db    0
.data.rel.ro:00000000002209FE                 db    0
.data.rel.ro:00000000002209FF                 db    0
.data.rel.ro:0000000000220A00                 dq offset aSentenceRegexp ; "sentence-regexp"
.data.rel.ro:0000000000220A08                 db    1
.data.rel.ro:0000000000220A09                 db    0
.data.rel.ro:0000000000220A0A                 db    0
.data.rel.ro:0000000000220A0B                 db    0
.data.rel.ro:0000000000220A0C                 db    0
.data.rel.ro:0000000000220A0D                 db    0
.data.rel.ro:0000000000220A0E                 db    0
.data.rel.ro:0000000000220A0F                 db    0
.data.rel.ro:0000000000220A10                 db    0
.data.rel.ro:0000000000220A11                 db    0
.data.rel.ro:0000000000220A12                 db    0
.data.rel.ro:0000000000220A13                 db    0
.data.rel.ro:0000000000220A14                 db    0
.data.rel.ro:0000000000220A15                 db    0
.data.rel.ro:0000000000220A16                 db    0
.data.rel.ro:0000000000220A17                 db    0
.data.rel.ro:0000000000220A18                 db  53h ; S
.data.rel.ro:0000000000220A19                 db    0
.data.rel.ro:0000000000220A1A                 db    0
.data.rel.ro:0000000000220A1B                 db    0
.data.rel.ro:0000000000220A1C                 db    0
.data.rel.ro:0000000000220A1D                 db    0
.data.rel.ro:0000000000220A1E                 db    0
.data.rel.ro:0000000000220A1F                 db    0
.data.rel.ro:0000000000220A20                 dq offset aTraditional  ; "traditional"
.data.rel.ro:0000000000220A28                 db    0
.data.rel.ro:0000000000220A29                 db    0
.data.rel.ro:0000000000220A2A                 db    0
.data.rel.ro:0000000000220A2B                 db    0
.data.rel.ro:0000000000220A2C                 db    0
.data.rel.ro:0000000000220A2D                 db    0
.data.rel.ro:0000000000220A2E                 db    0
.data.rel.ro:0000000000220A2F                 db    0
.data.rel.ro:0000000000220A30                 db    0
.data.rel.ro:0000000000220A31                 db    0
.data.rel.ro:0000000000220A32                 db    0
.data.rel.ro:0000000000220A33                 db    0
.data.rel.ro:0000000000220A34                 db    0
.data.rel.ro:0000000000220A35                 db    0
.data.rel.ro:0000000000220A36                 db    0
.data.rel.ro:0000000000220A37                 db    0
.data.rel.ro:0000000000220A38                 db  47h ; G
.data.rel.ro:0000000000220A39                 db    0
.data.rel.ro:0000000000220A3A                 db    0
.data.rel.ro:0000000000220A3B                 db    0
.data.rel.ro:0000000000220A3C                 db    0
.data.rel.ro:0000000000220A3D                 db    0
.data.rel.ro:0000000000220A3E                 db    0
.data.rel.ro:0000000000220A3F                 db    0
.data.rel.ro:0000000000220A40                 dq offset aTypesetMode  ; "typeset-mode"
.data.rel.ro:0000000000220A48                 db    0
.data.rel.ro:0000000000220A49                 db    0
.data.rel.ro:0000000000220A4A                 db    0
.data.rel.ro:0000000000220A4B                 db    0
.data.rel.ro:0000000000220A4C                 db    0
.data.rel.ro:0000000000220A4D                 db    0
.data.rel.ro:0000000000220A4E                 db    0
.data.rel.ro:0000000000220A4F                 db    0
.data.rel.ro:0000000000220A50                 db    0
.data.rel.ro:0000000000220A51                 db    0
.data.rel.ro:0000000000220A52                 db    0
.data.rel.ro:0000000000220A53                 db    0
.data.rel.ro:0000000000220A54                 db    0
.data.rel.ro:0000000000220A55                 db    0
.data.rel.ro:0000000000220A56                 db    0
.data.rel.ro:0000000000220A57                 db    0
.data.rel.ro:0000000000220A58                 db  74h ; t
.data.rel.ro:0000000000220A59                 db    0
.data.rel.ro:0000000000220A5A                 db    0
.data.rel.ro:0000000000220A5B                 db    0
.data.rel.ro:0000000000220A5C                 db    0
.data.rel.ro:0000000000220A5D                 db    0
.data.rel.ro:0000000000220A5E                 db    0
.data.rel.ro:0000000000220A5F                 db    0
.data.rel.ro:0000000000220A60                 dq offset aWidth        ; "width"
.data.rel.ro:0000000000220A68                 db    1
.data.rel.ro:0000000000220A69                 db    0
.data.rel.ro:0000000000220A6A                 db    0
.data.rel.ro:0000000000220A6B                 db    0
.data.rel.ro:0000000000220A6C                 db    0
.data.rel.ro:0000000000220A6D                 db    0
.data.rel.ro:0000000000220A6E                 db    0
.data.rel.ro:0000000000220A6F                 db    0
.data.rel.ro:0000000000220A70                 db    0
.data.rel.ro:0000000000220A71                 db    0
.data.rel.ro:0000000000220A72                 db    0
.data.rel.ro:0000000000220A73                 db    0
.data.rel.ro:0000000000220A74                 db    0
.data.rel.ro:0000000000220A75                 db    0
.data.rel.ro:0000000000220A76                 db    0
.data.rel.ro:0000000000220A77                 db    0
.data.rel.ro:0000000000220A78                 db  77h ; w
.data.rel.ro:0000000000220A79                 db    0
.data.rel.ro:0000000000220A7A                 db    0
.data.rel.ro:0000000000220A7B                 db    0
.data.rel.ro:0000000000220A7C                 db    0
.data.rel.ro:0000000000220A7D                 db    0
.data.rel.ro:0000000000220A7E                 db    0
.data.rel.ro:0000000000220A7F                 db    0
.data.rel.ro:0000000000220A80                 dq offset aWordRegexp   ; "word-regexp"
.data.rel.ro:0000000000220A88                 db    1
.data.rel.ro:0000000000220A89                 db    0
.data.rel.ro:0000000000220A8A                 db    0
.data.rel.ro:0000000000220A8B                 db    0
.data.rel.ro:0000000000220A8C                 db    0
.data.rel.ro:0000000000220A8D                 db    0
.data.rel.ro:0000000000220A8E                 db    0
.data.rel.ro:0000000000220A8F                 db    0
.data.rel.ro:0000000000220A90                 db    0
.data.rel.ro:0000000000220A91                 db    0
.data.rel.ro:0000000000220A92                 db    0
.data.rel.ro:0000000000220A93                 db    0
.data.rel.ro:0000000000220A94                 db    0
.data.rel.ro:0000000000220A95                 db    0
.data.rel.ro:0000000000220A96                 db    0
.data.rel.ro:0000000000220A97                 db    0
.data.rel.ro:0000000000220A98                 db  57h ; W
.data.rel.ro:0000000000220A99                 db    0
.data.rel.ro:0000000000220A9A                 db    0
.data.rel.ro:0000000000220A9B                 db    0
.data.rel.ro:0000000000220A9C                 db    0
.data.rel.ro:0000000000220A9D                 db    0
.data.rel.ro:0000000000220A9E                 db    0
.data.rel.ro:0000000000220A9F                 db    0
.data.rel.ro:0000000000220AA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000220AA8                 db    0
.data.rel.ro:0000000000220AA9                 db    0
.data.rel.ro:0000000000220AAA                 db    0
.data.rel.ro:0000000000220AAB                 db    0
.data.rel.ro:0000000000220AAC                 db    0
.data.rel.ro:0000000000220AAD                 db    0
.data.rel.ro:0000000000220AAE                 db    0
.data.rel.ro:0000000000220AAF                 db    0
.data.rel.ro:0000000000220AB0                 db    0
.data.rel.ro:0000000000220AB1                 db    0
.data.rel.ro:0000000000220AB2                 db    0
.data.rel.ro:0000000000220AB3                 db    0
.data.rel.ro:0000000000220AB4                 db    0
.data.rel.ro:0000000000220AB5                 db    0
.data.rel.ro:0000000000220AB6                 db    0
.data.rel.ro:0000000000220AB7                 db    0
.data.rel.ro:0000000000220AB8                 db  7Eh ; ~
.data.rel.ro:0000000000220AB9                 db 0FFh
.data.rel.ro:0000000000220ABA                 db 0FFh
.data.rel.ro:0000000000220ABB                 db 0FFh
.data.rel.ro:0000000000220ABC                 db    0
.data.rel.ro:0000000000220ABD                 db    0
.data.rel.ro:0000000000220ABE                 db    0
.data.rel.ro:0000000000220ABF                 db    0
.data.rel.ro:0000000000220AC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000220AC8                 db    0
.data.rel.ro:0000000000220AC9                 db    0
.data.rel.ro:0000000000220ACA                 db    0
.data.rel.ro:0000000000220ACB                 db    0
.data.rel.ro:0000000000220ACC                 db    0
.data.rel.ro:0000000000220ACD                 db    0
.data.rel.ro:0000000000220ACE                 db    0
.data.rel.ro:0000000000220ACF                 db    0
.data.rel.ro:0000000000220AD0                 db    0
.data.rel.ro:0000000000220AD1                 db    0
.data.rel.ro:0000000000220AD2                 db    0
.data.rel.ro:0000000000220AD3                 db    0
.data.rel.ro:0000000000220AD4                 db    0
.data.rel.ro:0000000000220AD5                 db    0
.data.rel.ro:0000000000220AD6                 db    0
.data.rel.ro:0000000000220AD7                 db    0
.data.rel.ro:0000000000220AD8                 db  7Dh ; }
.data.rel.ro:0000000000220AD9                 db 0FFh
.data.rel.ro:0000000000220ADA                 db 0FFh
.data.rel.ro:0000000000220ADB                 db 0FFh
.data.rel.ro:0000000000220ADC                 db    0
.data.rel.ro:0000000000220ADD                 db    0
.data.rel.ro:0000000000220ADE                 db    0
.data.rel.ro:0000000000220ADF                 db    0
.data.rel.ro:0000000000220AE0                 db    0
.data.rel.ro:0000000000220AE1                 db    0
.data.rel.ro:0000000000220AE2                 db    0
.data.rel.ro:0000000000220AE3                 db    0
.data.rel.ro:0000000000220AE4                 db    0
.data.rel.ro:0000000000220AE5                 db    0
.data.rel.ro:0000000000220AE6                 db    0
.data.rel.ro:0000000000220AE7                 db    0
.data.rel.ro:0000000000220AE8                 db    0
.data.rel.ro:0000000000220AE9                 db    0
.data.rel.ro:0000000000220AEA                 db    0
.data.rel.ro:0000000000220AEB                 db    0
.data.rel.ro:0000000000220AEC                 db    0
.data.rel.ro:0000000000220AED                 db    0
.data.rel.ro:0000000000220AEE                 db    0
.data.rel.ro:0000000000220AEF                 db    0
.data.rel.ro:0000000000220AF0                 db    0
.data.rel.ro:0000000000220AF1                 db    0
.data.rel.ro:0000000000220AF2                 db    0
.data.rel.ro:0000000000220AF3                 db    0
.data.rel.ro:0000000000220AF4                 db    0
.data.rel.ro:0000000000220AF5                 db    0
.data.rel.ro:0000000000220AF6                 db    0
.data.rel.ro:0000000000220AF7                 db    0
.data.rel.ro:0000000000220AF8                 db    0
.data.rel.ro:0000000000220AF9                 db    0
.data.rel.ro:0000000000220AFA                 db    0
.data.rel.ro:0000000000220AFB                 db    0
.data.rel.ro:0000000000220AFC                 db    0
.data.rel.ro:0000000000220AFD                 db    0
.data.rel.ro:0000000000220AFE                 db    0
.data.rel.ro:0000000000220AFF                 db    0
.data.rel.ro:0000000000220B00                 public quoting_style_args
.data.rel.ro:0000000000220B00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000220B08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000220B10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000220B18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000220B20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000220B28                 dq offset aSC_1+5       ; "c"
.data.rel.ro:0000000000220B30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000220B38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000220B40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000220B48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000220B50                 db    0
.data.rel.ro:0000000000220B51                 db    0
.data.rel.ro:0000000000220B52                 db    0
.data.rel.ro:0000000000220B53                 db    0
.data.rel.ro:0000000000220B54                 db    0
.data.rel.ro:0000000000220B55                 db    0
.data.rel.ro:0000000000220B56                 db    0
.data.rel.ro:0000000000220B57                 db    0
.data.rel.ro:0000000000220B57 _data_rel_ro    ends
.data.rel.ro:0000000000220B57
LOAD:0000000000220B58 ; ELF Dynamic Information
LOAD:0000000000220B58 ; ===========================================================================
LOAD:0000000000220B58
LOAD:0000000000220B58 ; Segment type: Pure data
LOAD:0000000000220B58 ; Segment permissions: Read/Write
LOAD:0000000000220B58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000220B58                 assume cs:LOAD
LOAD:0000000000220B58                 ;org 220B58h
LOAD:0000000000220B58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000220B58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000220B58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000220B68                 Elf64_Dyn <0Ch, 1C28h>  ; DT_INIT
LOAD:0000000000220B78                 Elf64_Dyn <0Dh, 1AEE0h> ; DT_FINI
LOAD:0000000000220B88                 Elf64_Dyn <19h, 220870h> ; DT_INIT_ARRAY
LOAD:0000000000220B98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000220BA8                 Elf64_Dyn <1Ah, 220878h> ; DT_FINI_ARRAY
LOAD:0000000000220BB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000220BC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000220BD8                 Elf64_Dyn <5, 0B68h>    ; DT_STRTAB
LOAD:0000000000220BE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000220BF8                 Elf64_Dyn <0Ah, 3C2h>   ; DT_STRSZ
LOAD:0000000000220C08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000220C18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000220C28                 Elf64_Dyn <3, 220D48h>  ; DT_PLTGOT
LOAD:0000000000220C38                 Elf64_Dyn <2, 720h>     ; DT_PLTRELSZ
LOAD:0000000000220C48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000220C58                 Elf64_Dyn <17h, 1508h>  ; DT_JMPREL
LOAD:0000000000220C68                 Elf64_Dyn <7, 1040h>    ; DT_RELA
LOAD:0000000000220C78                 Elf64_Dyn <8, 4C8h>     ; DT_RELASZ
LOAD:0000000000220C88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000220C98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000220CA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000220CB8                 Elf64_Dyn <6FFFFFFEh, 0FE0h> ; DT_VERNEED
LOAD:0000000000220CC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000220CD8                 Elf64_Dyn <6FFFFFF0h, 0F2Ah> ; DT_VERSYM
LOAD:0000000000220CE8                 Elf64_Dyn <6FFFFFF9h, 27h> ; DT_RELACOUNT
LOAD:0000000000220CF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000220D08                 db    0
LOAD:0000000000220D09                 db    0
LOAD:0000000000220D0A                 db    0
LOAD:0000000000220D0B                 db    0
LOAD:0000000000220D0C                 db    0
LOAD:0000000000220D0D                 db    0
LOAD:0000000000220D0E                 db    0
LOAD:0000000000220D0F                 db    0
LOAD:0000000000220D10                 db    0
LOAD:0000000000220D11                 db    0
LOAD:0000000000220D12                 db    0
LOAD:0000000000220D13                 db    0
LOAD:0000000000220D14                 db    0
LOAD:0000000000220D15                 db    0
LOAD:0000000000220D16                 db    0
LOAD:0000000000220D17                 db    0
LOAD:0000000000220D18                 db    0
LOAD:0000000000220D19                 db    0
LOAD:0000000000220D1A                 db    0
LOAD:0000000000220D1B                 db    0
LOAD:0000000000220D1C                 db    0
LOAD:0000000000220D1D                 db    0
LOAD:0000000000220D1E                 db    0
LOAD:0000000000220D1F                 db    0
LOAD:0000000000220D20                 db    0
LOAD:0000000000220D21                 db    0
LOAD:0000000000220D22                 db    0
LOAD:0000000000220D23                 db    0
LOAD:0000000000220D24                 db    0
LOAD:0000000000220D25                 db    0
LOAD:0000000000220D26                 db    0
LOAD:0000000000220D27                 db    0
LOAD:0000000000220D28                 db    0
LOAD:0000000000220D29                 db    0
LOAD:0000000000220D2A                 db    0
LOAD:0000000000220D2B                 db    0
LOAD:0000000000220D2C                 db    0
LOAD:0000000000220D2D                 db    0
LOAD:0000000000220D2E                 db    0
LOAD:0000000000220D2F                 db    0
LOAD:0000000000220D30                 db    0
LOAD:0000000000220D31                 db    0
LOAD:0000000000220D32                 db    0
LOAD:0000000000220D33                 db    0
LOAD:0000000000220D34                 db    0
LOAD:0000000000220D35                 db    0
LOAD:0000000000220D36                 db    0
LOAD:0000000000220D37                 db    0
LOAD:0000000000220D38                 db    0
LOAD:0000000000220D39                 db    0
LOAD:0000000000220D3A                 db    0
LOAD:0000000000220D3B                 db    0
LOAD:0000000000220D3C                 db    0
LOAD:0000000000220D3D                 db    0
LOAD:0000000000220D3E                 db    0
LOAD:0000000000220D3F                 db    0
LOAD:0000000000220D40                 db    0
LOAD:0000000000220D41                 db    0
LOAD:0000000000220D42                 db    0
LOAD:0000000000220D43                 db    0
LOAD:0000000000220D44                 db    0
LOAD:0000000000220D45                 db    0
LOAD:0000000000220D46                 db    0
LOAD:0000000000220D47                 db    0
LOAD:0000000000220D47 LOAD            ends
LOAD:0000000000220D47
.got:0000000000220D48 ; ===========================================================================
.got:0000000000220D48
.got:0000000000220D48 ; Segment type: Pure data
.got:0000000000220D48 ; Segment permissions: Read/Write
.got:0000000000220D48 _got            segment qword public 'DATA' use64
.got:0000000000220D48                 assume cs:_got
.got:0000000000220D48                 ;org 220D48h
.got:0000000000220D48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000220D50 qword_220D50    dq 0                    ; DATA XREF: sub_1C40↑r
.got:0000000000220D58 qword_220D58    dq 0                    ; DATA XREF: sub_1C40+6↑r
.got:0000000000220D60 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000220D60                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000220D68 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000220D70 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000220D78 __errno_location_ptr dq offset __errno_location
.got:0000000000220D78                                         ; DATA XREF: ___errno_location↑r
.got:0000000000220D80 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000220D88 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000220D90 ftello_ptr      dq offset ftello        ; DATA XREF: _ftello↑r
.got:0000000000220D98 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000220DA0 iconv_ptr       dq offset iconv         ; DATA XREF: _iconv↑r
.got:0000000000220DA8 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:0000000000220DB0 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:0000000000220DB8 fread_ptr       dq offset fread         ; DATA XREF: _fread↑r
.got:0000000000220DC0 iswcntrl_ptr    dq offset iswcntrl      ; DATA XREF: _iswcntrl↑r
.got:0000000000220DC8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000220DD0 __strtol_internal_ptr dq offset __strtol_internal
.got:0000000000220DD0                                         ; DATA XREF: ___strtol_internal↑r
.got:0000000000220DD8 iswctype_ptr    dq offset iswctype      ; DATA XREF: _iswctype↑r
.got:0000000000220DE0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000220DE8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000220DE8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000220DF0 stpcpy_ptr      dq offset stpcpy        ; DATA XREF: _stpcpy↑r
.got:0000000000220DF8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000220E00 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000220E00                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000220E08 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000220E10 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000220E10                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000220E18 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000220E20 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000220E28 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000220E30 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000220E38 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000220E40 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000220E48 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000220E50 __assert_fail_ptr dq offset __assert_fail
.got:0000000000220E50                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000220E58 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000220E60 freopen_ptr     dq offset freopen       ; DATA XREF: _freopen↑r
.got:0000000000220E68 strnlen_ptr     dq offset strnlen       ; DATA XREF: _strnlen↑r
.got:0000000000220E70 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000220E78 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000220E80 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000220E88 wctype_ptr      dq offset wctype        ; DATA XREF: _wctype↑r
.got:0000000000220E90 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000220E90                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000220E98 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000220EA0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000220EA8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000220EB0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000220EB8 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:0000000000220EC0 iswalnum_ptr    dq offset iswalnum      ; DATA XREF: _iswalnum↑r
.got:0000000000220EC8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000220ED0 wcrtomb_ptr     dq offset wcrtomb       ; DATA XREF: _wcrtomb↑r
.got:0000000000220ED8 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000220EE0 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000220EE8 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000220EF0 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000220EF8 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000220EF8                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000220F00 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000220F08 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000220F10 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000220F18 iconv_close_ptr dq offset iconv_close   ; DATA XREF: _iconv_close↑r
.got:0000000000220F20 iswspace_ptr    dq offset iswspace      ; DATA XREF: _iswspace↑r
.got:0000000000220F28 btowc_ptr       dq offset btowc         ; DATA XREF: _btowc↑r
.got:0000000000220F30 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000220F38 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000220F40 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000220F48 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000220F50 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000220F58 towlower_ptr    dq offset towlower      ; DATA XREF: _towlower↑r
.got:0000000000220F60 towupper_ptr    dq offset towupper      ; DATA XREF: _towupper↑r
.got:0000000000220F68 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000220F70 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000220F78 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000220F80 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000220F80                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000220F88 strdup_ptr      dq offset strdup        ; DATA XREF: _strdup↑r
.got:0000000000220F90 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000220F98 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000220FA0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000220FA0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000220FA8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000220FA8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000220FB0 iconv_open_ptr  dq offset iconv_open    ; DATA XREF: _iconv_open↑r
.got:0000000000220FB8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000220FB8                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000220FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000220FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000220FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000220FC8                                         ; DATA XREF: start+24↑r
.got:0000000000220FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000220FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000220FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000220FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000220FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000220FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000220FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000220FE0 _got            ends
.got:0000000000220FE0
LOAD:0000000000220FE8 ; ===========================================================================
LOAD:0000000000220FE8
LOAD:0000000000220FE8 ; Segment type: Pure data
LOAD:0000000000220FE8 ; Segment permissions: Read/Write
LOAD:0000000000220FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000220FE8                 assume cs:LOAD
LOAD:0000000000220FE8                 ;org 220FE8h
LOAD:0000000000220FE8                 align 20h
LOAD:0000000000220FE8 LOAD            ends
LOAD:0000000000220FE8
.data:0000000000221000 ; ===========================================================================
.data:0000000000221000
.data:0000000000221000 ; Segment type: Pure data
.data:0000000000221000 ; Segment permissions: Read/Write
.data:0000000000221000 _data           segment align_32 public 'DATA' use64
.data:0000000000221000                 assume cs:_data
.data:0000000000221000                 ;org 221000h
.data:0000000000221000                 public __data_start ; weak
.data:0000000000221000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000221000                                         ; data_start
.data:0000000000221001                 db    0
.data:0000000000221002                 db    0
.data:0000000000221003                 db    0
.data:0000000000221004                 db    0
.data:0000000000221005                 db    0
.data:0000000000221006                 db    0
.data:0000000000221007                 db    0
.data:0000000000221008                 public __dso_handle
.data:0000000000221008 ; void *_dso_handle
.data:0000000000221008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000221008                                         ; atexit↑r ...
.data:0000000000221010 gap_size        dq 3                    ; DATA XREF: main+312↑w
.data:0000000000221010                                         ; main+A6C↑r ...
.data:0000000000221018 line_width      dq offset qword_48      ; DATA XREF: main+1D8↑w
.data:0000000000221018                                         ; main+A7A↑w ...
.data:0000000000221020 gnu_extensions  db 1                    ; DATA XREF: main+209↑w
.data:0000000000221020                                         ; main+37B↑r ...
.data:0000000000221021                 align 8
.data:0000000000221028 macro_name      dq offset aXx           ; DATA XREF: main+349↑w
.data:0000000000221028                                         ; main+1898↑r ...
.data:0000000000221028                                         ; "xx"
.data:0000000000221030 ; char *truncation_string
.data:0000000000221030 truncation_string dq offset aLibs+6     ; DATA XREF: main+361↑w
.data:0000000000221030                                         ; main+AA2↑r ...
.data:0000000000221030                                         ; "/"
.data:0000000000221038                 public Version
.data:0000000000221038 Version         dq offset a831          ; DATA XREF: main+291↑r
.data:0000000000221038                                         ; "8.31"
.data:0000000000221040                 public argmatch_die
.data:0000000000221040 argmatch_die    dq offset __argmatch_die
.data:0000000000221040                                         ; DATA XREF: main+161↑r
.data:0000000000221048                 public exit_failure
.data:0000000000221048 ; int exit_failure
.data:0000000000221048 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_5D62↑r
.data:0000000000221048                                         ; xalloc_die+17↑r
.data:000000000022104C                 align 20h
.data:0000000000221060                 public quote_quoting_options
.data:0000000000221060 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000221060                                         ; quote_mem↑o ...
.data:0000000000221061                 db    0
.data:0000000000221062                 db    0
.data:0000000000221063                 db    0
.data:0000000000221064                 db    0
.data:0000000000221065                 db    0
.data:0000000000221066                 db    0
.data:0000000000221067                 db    0
.data:0000000000221068                 db    0
.data:0000000000221069                 db    0
.data:000000000022106A                 db    0
.data:000000000022106B                 db    0
.data:000000000022106C                 db    0
.data:000000000022106D                 db    0
.data:000000000022106E                 db    0
.data:000000000022106F                 db    0
.data:0000000000221070                 db    0
.data:0000000000221071                 db    0
.data:0000000000221072                 db    0
.data:0000000000221073                 db    0
.data:0000000000221074                 db    0
.data:0000000000221075                 db    0
.data:0000000000221076                 db    0
.data:0000000000221077                 db    0
.data:0000000000221078                 db    0
.data:0000000000221079                 db    0
.data:000000000022107A                 db    0
.data:000000000022107B                 db    0
.data:000000000022107C                 db    0
.data:000000000022107D                 db    0
.data:000000000022107E                 db    0
.data:000000000022107F                 db    0
.data:0000000000221080                 db    0
.data:0000000000221081                 db    0
.data:0000000000221082                 db    0
.data:0000000000221083                 db    0
.data:0000000000221084                 db    0
.data:0000000000221085                 db    0
.data:0000000000221086                 db    0
.data:0000000000221087                 db    0
.data:0000000000221088                 db    0
.data:0000000000221089                 db    0
.data:000000000022108A                 db    0
.data:000000000022108B                 db    0
.data:000000000022108C                 db    0
.data:000000000022108D                 db    0
.data:000000000022108E                 db    0
.data:000000000022108F                 db    0
.data:0000000000221090                 db    0
.data:0000000000221091                 db    0
.data:0000000000221092                 db    0
.data:0000000000221093                 db    0
.data:0000000000221094                 db    0
.data:0000000000221095                 db    0
.data:0000000000221096                 db    0
.data:0000000000221097                 db    0
.data:0000000000221098 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000221098                                         ; quotearg_n_options:loc_80CD↑r ...
.data:000000000022109C                 align 20h
.data:00000000002210A0 ; void *slotvec
.data:00000000002210A0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:00000000002210A0                                         ; quotearg_n_options+76↑w ...
.data:00000000002210A8                 align 10h
.data:00000000002210B0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:00000000002210B0                                         ; quotearg_n_options+187↑r ...
.data:00000000002210B8 off_2210B8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002210B8 _data           ends
.data:00000000002210B8
.bss:00000000002210C0 ; ===========================================================================
.bss:00000000002210C0
.bss:00000000002210C0 ; Segment type: Uninitialized
.bss:00000000002210C0 ; Segment permissions: Read/Write
.bss:00000000002210C0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002210C0                 assume cs:_bss
.bss:00000000002210C0                 ;org 2210C0h
.bss:00000000002210C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002210C0                 public __bss_start ; weak
.bss:00000000002210C0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000AA8↑o
.bss:00000000002210C0                                         ; LOAD:0000000000000B08↑o ...
.bss:00000000002210C0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002210C0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002210C0                                         ; _edata
.bss:00000000002210C0                                         ; Copy of shared data
.bss:00000000002210C8                 public stdout@@GLIBC_2_2_5
.bss:00000000002210C8 ; FILE *stdout
.bss:00000000002210C8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A90↑o
.bss:00000000002210C8                                         ; main+28A↑r ...
.bss:00000000002210C8                                         ; Alternative name is 'stdout'
.bss:00000000002210C8                                         ; Copy of shared data
.bss:00000000002210D0                 public stdin@@GLIBC_2_2_5
.bss:00000000002210D0 ; FILE *stdin
.bss:00000000002210D0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000AC0↑o
.bss:00000000002210D0                                         ; swallow_file_in_memory:loc_4D76↑r
.bss:00000000002210D0                                         ; Alternative name is 'stdin'
.bss:00000000002210D0                                         ; Copy of shared data
.bss:00000000002210D8                 public optind@@GLIBC_2_2_5
.bss:00000000002210D8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000B38↑o
.bss:00000000002210D8                                         ; main:loc_24FD↑r ...
.bss:00000000002210D8                                         ; Alternative name is 'optind'
.bss:00000000002210D8                                         ; Copy of shared data
.bss:00000000002210DC                 align 20h
.bss:00000000002210E0                 public optarg@@GLIBC_2_2_5
.bss:00000000002210E0 ; char *optarg
.bss:00000000002210E0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B50↑o
.bss:00000000002210E0                                         ; main+DA↑r ...
.bss:00000000002210E0                                         ; Alternative name is 'optarg'
.bss:00000000002210E0                                         ; Copy of shared data
.bss:00000000002210E8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002210E8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002210E8                                         ; DATA XREF: LOAD:0000000000000AD8↑o
.bss:00000000002210E8                                         ; LOAD:0000000000000AF0↑o ...
.bss:00000000002210E8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002210E8                                         ; Copy of shared data
.bss:00000000002210F0                 align 20h
.bss:0000000000221100                 public stderr@@GLIBC_2_2_5
.bss:0000000000221100 ; FILE *stderr
.bss:0000000000221100 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B20↑o
.bss:0000000000221100                                         ; usage+3D↑r ...
.bss:0000000000221100                                         ; Alternative name is 'stderr'
.bss:0000000000221100                                         ; Copy of shared data
.bss:0000000000221108 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000221108                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000221109                 align 20h
.bss:0000000000221120 ; char *reference
.bss:0000000000221120 reference       dq ?                    ; DATA XREF: main+118E↑w
.bss:0000000000221120                                         ; main:loc_39D2↑r ...
.bss:0000000000221128 qword_221128    dq ?                    ; DATA XREF: main+1873↑w
.bss:0000000000221128                                         ; main+1A41↑r ...
.bss:0000000000221130 head_truncation db ?                    ; DATA XREF: main+BF4↑w
.bss:0000000000221130                                         ; main+17BC↑w ...
.bss:0000000000221131                 align 20h
.bss:0000000000221140 head            dq ?                    ; DATA XREF: main+BDE↑w
.bss:0000000000221140                                         ; main+1724↑o ...
.bss:0000000000221148 qword_221148    dq ?                    ; DATA XREF: main+BE9↑w
.bss:0000000000221148                                         ; main+16E4↑w ...
.bss:0000000000221150 keyafter_truncation db ?                ; DATA XREF: main:loc_342D↑w
.bss:0000000000221150                                         ; main+12A4↑w ...
.bss:0000000000221151                 align 20h
.bss:0000000000221160 keyafter        db    ? ;               ; DATA XREF: main+C1A↑o
.bss:0000000000221160                                         ; main:loc_2E54↑o ...
.bss:0000000000221161                 db    ? ;
.bss:0000000000221162                 db    ? ;
.bss:0000000000221163                 db    ? ;
.bss:0000000000221164                 db    ? ;
.bss:0000000000221165                 db    ? ;
.bss:0000000000221166                 db    ? ;
.bss:0000000000221167                 db    ? ;
.bss:0000000000221168 qword_221168    dq ?                    ; DATA XREF: main+C42↑w
.bss:0000000000221168                                         ; main+CE1↑w ...
.bss:0000000000221170 before_truncation db ?                  ; DATA XREF: main+1447↑w
.bss:0000000000221170                                         ; main+17A6↑w ...
.bss:0000000000221171                 align 20h
.bss:0000000000221180 before          dq ?                    ; DATA XREF: main+1346↑o
.bss:0000000000221180                                         ; main+134D↑w ...
.bss:0000000000221188 qword_221188    dq ?                    ; DATA XREF: main+135A↑w
.bss:0000000000221188                                         ; main+139A↑r ...
.bss:0000000000221190 tail_truncation db ?                    ; DATA XREF: main+BD7↑w
.bss:0000000000221190                                         ; main+167F↑w ...
.bss:0000000000221191                 align 20h
.bss:00000000002211A0 tail            dq ?                    ; DATA XREF: main+BC1↑w
.bss:00000000002211A0                                         ; main+14A4↑o ...
.bss:00000000002211A8 qword_2211A8    dq ?                    ; DATA XREF: main+BCC↑w
.bss:00000000002211A8                                         ; main+14F1↑w ...
.bss:00000000002211B0 truncation_string_length dq ?           ; DATA XREF: main+AF4↑w
.bss:00000000002211B0                                         ; main:loc_2C8B↑r ...
.bss:00000000002211B8 keyafter_max_width dq ?                 ; DATA XREF: main+AC5↑w
.bss:00000000002211B8                                         ; main+B28↑w ...
.bss:00000000002211C0 before_max_width dq ?                   ; DATA XREF: main+ACC↑w
.bss:00000000002211C0                                         ; main+B18↑w ...
.bss:00000000002211C8 half_line_width dq ?                    ; DATA XREF: main+ABE↑w
.bss:00000000002211C8                                         ; main+12E9↑r ...
.bss:00000000002211D0                 align 20h
.bss:00000000002211E0 edited_flag     db    ? ;               ; DATA XREF: main+B37↑o
.bss:00000000002211E0                                         ; print_field+18↑o
.bss:00000000002211E1                 db    ? ;
.bss:00000000002211E2                 db    ? ;
.bss:00000000002211E3                 db    ? ;
.bss:00000000002211E4                 db    ? ;
.bss:00000000002211E5                 db    ? ;
.bss:00000000002211E6                 db    ? ;
.bss:00000000002211E7                 db    ? ;
.bss:00000000002211E8                 db    ? ;
.bss:00000000002211E9                 db    ? ;
.bss:00000000002211EA                 db    ? ;
.bss:00000000002211EB                 db    ? ;
.bss:00000000002211EC byte_2211EC     db ?                    ; DATA XREF: main+B69↑w
.bss:00000000002211ED                 db    ? ;
.bss:00000000002211EE                 db    ? ;
.bss:00000000002211EF                 db    ? ;
.bss:00000000002211F0                 db    ? ;
.bss:00000000002211F1                 db    ? ;
.bss:00000000002211F2                 db    ? ;
.bss:00000000002211F3                 db    ? ;
.bss:00000000002211F4                 db    ? ;
.bss:00000000002211F5                 db    ? ;
.bss:00000000002211F6                 db    ? ;
.bss:00000000002211F7                 db    ? ;
.bss:00000000002211F8                 db    ? ;
.bss:00000000002211F9                 db    ? ;
.bss:00000000002211FA                 db    ? ;
.bss:00000000002211FB                 db    ? ;
.bss:00000000002211FC                 db    ? ;
.bss:00000000002211FD                 db    ? ;
.bss:00000000002211FE                 db    ? ;
.bss:00000000002211FF                 db    ? ;
.bss:0000000000221200                 db    ? ;
.bss:0000000000221201                 db    ? ;
.bss:0000000000221202 byte_221202     db ?                    ; DATA XREF: main:loc_43BC↑w
.bss:0000000000221203                 db    ? ;
.bss:0000000000221204                 db    ? ;
.bss:0000000000221205                 db    ? ;
.bss:0000000000221206                 db    ? ;
.bss:0000000000221207                 db    ? ;
.bss:0000000000221208                 db    ? ;
.bss:0000000000221209                 db    ? ;
.bss:000000000022120A                 db    ? ;
.bss:000000000022120B                 db    ? ;
.bss:000000000022120C                 db    ? ;
.bss:000000000022120D                 db    ? ;
.bss:000000000022120E                 db    ? ;
.bss:000000000022120F                 db    ? ;
.bss:0000000000221210                 db    ? ;
.bss:0000000000221211                 db    ? ;
.bss:0000000000221212                 db    ? ;
.bss:0000000000221213                 db    ? ;
.bss:0000000000221214                 db    ? ;
.bss:0000000000221215                 db    ? ;
.bss:0000000000221216                 db    ? ;
.bss:0000000000221217                 db    ? ;
.bss:0000000000221218                 db    ? ;
.bss:0000000000221219                 db    ? ;
.bss:000000000022121A                 db    ? ;
.bss:000000000022121B                 db    ? ;
.bss:000000000022121C                 db    ? ;
.bss:000000000022121D                 db    ? ;
.bss:000000000022121E                 db    ? ;
.bss:000000000022121F                 db    ? ;
.bss:0000000000221220                 db    ? ;
.bss:0000000000221221                 db    ? ;
.bss:0000000000221222                 db    ? ;
.bss:0000000000221223                 db    ? ;
.bss:0000000000221224                 db    ? ;
.bss:0000000000221225                 db    ? ;
.bss:0000000000221226                 db    ? ;
.bss:0000000000221227                 db    ? ;
.bss:0000000000221228                 db    ? ;
.bss:0000000000221229                 db    ? ;
.bss:000000000022122A                 db    ? ;
.bss:000000000022122B                 db    ? ;
.bss:000000000022122C                 db    ? ;
.bss:000000000022122D                 db    ? ;
.bss:000000000022122E                 db    ? ;
.bss:000000000022122F                 db    ? ;
.bss:0000000000221230                 db    ? ;
.bss:0000000000221231                 db    ? ;
.bss:0000000000221232                 db    ? ;
.bss:0000000000221233                 db    ? ;
.bss:0000000000221234                 db    ? ;
.bss:0000000000221235                 db    ? ;
.bss:0000000000221236                 db    ? ;
.bss:0000000000221237                 db    ? ;
.bss:0000000000221238                 db    ? ;
.bss:0000000000221239                 db    ? ;
.bss:000000000022123A                 db    ? ;
.bss:000000000022123B                 db    ? ;
.bss:000000000022123C                 db    ? ;
.bss:000000000022123D                 db    ? ;
.bss:000000000022123E                 db    ? ;
.bss:000000000022123F                 db    ? ;
.bss:0000000000221240                 db    ? ;
.bss:0000000000221241                 db    ? ;
.bss:0000000000221242                 db    ? ;
.bss:0000000000221243                 db    ? ;
.bss:0000000000221244                 db    ? ;
.bss:0000000000221245                 db    ? ;
.bss:0000000000221246                 db    ? ;
.bss:0000000000221247                 db    ? ;
.bss:0000000000221248                 db    ? ;
.bss:0000000000221249                 db    ? ;
.bss:000000000022124A                 db    ? ;
.bss:000000000022124B                 db    ? ;
.bss:000000000022124C                 db    ? ;
.bss:000000000022124D                 db    ? ;
.bss:000000000022124E                 db    ? ;
.bss:000000000022124F                 db    ? ;
.bss:0000000000221250                 db    ? ;
.bss:0000000000221251                 db    ? ;
.bss:0000000000221252                 db    ? ;
.bss:0000000000221253                 db    ? ;
.bss:0000000000221254                 db    ? ;
.bss:0000000000221255                 db    ? ;
.bss:0000000000221256                 db    ? ;
.bss:0000000000221257                 db    ? ;
.bss:0000000000221258                 db    ? ;
.bss:0000000000221259                 db    ? ;
.bss:000000000022125A                 db    ? ;
.bss:000000000022125B                 db    ? ;
.bss:000000000022125C                 db    ? ;
.bss:000000000022125D                 db    ? ;
.bss:000000000022125E                 db    ? ;
.bss:000000000022125F                 db    ? ;
.bss:0000000000221260                 db    ? ;
.bss:0000000000221261                 db    ? ;
.bss:0000000000221262                 db    ? ;
.bss:0000000000221263                 db    ? ;
.bss:0000000000221264                 db    ? ;
.bss:0000000000221265                 db    ? ;
.bss:0000000000221266                 db    ? ;
.bss:0000000000221267                 db    ? ;
.bss:0000000000221268                 db    ? ;
.bss:0000000000221269                 db    ? ;
.bss:000000000022126A                 db    ? ;
.bss:000000000022126B                 db    ? ;
.bss:000000000022126C                 db    ? ;
.bss:000000000022126D                 db    ? ;
.bss:000000000022126E                 db    ? ;
.bss:000000000022126F                 db    ? ;
.bss:0000000000221270                 db    ? ;
.bss:0000000000221271                 db    ? ;
.bss:0000000000221272                 db    ? ;
.bss:0000000000221273                 db    ? ;
.bss:0000000000221274                 db    ? ;
.bss:0000000000221275                 db    ? ;
.bss:0000000000221276                 db    ? ;
.bss:0000000000221277                 db    ? ;
.bss:0000000000221278                 db    ? ;
.bss:0000000000221279                 db    ? ;
.bss:000000000022127A                 db    ? ;
.bss:000000000022127B                 db    ? ;
.bss:000000000022127C                 db    ? ;
.bss:000000000022127D                 db    ? ;
.bss:000000000022127E                 db    ? ;
.bss:000000000022127F                 db    ? ;
.bss:0000000000221280                 db    ? ;
.bss:0000000000221281                 db    ? ;
.bss:0000000000221282                 db    ? ;
.bss:0000000000221283                 db    ? ;
.bss:0000000000221284                 db    ? ;
.bss:0000000000221285                 db    ? ;
.bss:0000000000221286                 db    ? ;
.bss:0000000000221287                 db    ? ;
.bss:0000000000221288                 db    ? ;
.bss:0000000000221289                 db    ? ;
.bss:000000000022128A                 db    ? ;
.bss:000000000022128B                 db    ? ;
.bss:000000000022128C                 db    ? ;
.bss:000000000022128D                 db    ? ;
.bss:000000000022128E                 db    ? ;
.bss:000000000022128F                 db    ? ;
.bss:0000000000221290                 db    ? ;
.bss:0000000000221291                 db    ? ;
.bss:0000000000221292                 db    ? ;
.bss:0000000000221293                 db    ? ;
.bss:0000000000221294                 db    ? ;
.bss:0000000000221295                 db    ? ;
.bss:0000000000221296                 db    ? ;
.bss:0000000000221297                 db    ? ;
.bss:0000000000221298                 db    ? ;
.bss:0000000000221299                 db    ? ;
.bss:000000000022129A                 db    ? ;
.bss:000000000022129B                 db    ? ;
.bss:000000000022129C                 db    ? ;
.bss:000000000022129D                 db    ? ;
.bss:000000000022129E                 db    ? ;
.bss:000000000022129F                 db    ? ;
.bss:00000000002212A0                 db    ? ;
.bss:00000000002212A1                 db    ? ;
.bss:00000000002212A2                 db    ? ;
.bss:00000000002212A3                 db    ? ;
.bss:00000000002212A4                 db    ? ;
.bss:00000000002212A5                 db    ? ;
.bss:00000000002212A6                 db    ? ;
.bss:00000000002212A7                 db    ? ;
.bss:00000000002212A8                 db    ? ;
.bss:00000000002212A9                 db    ? ;
.bss:00000000002212AA                 db    ? ;
.bss:00000000002212AB                 db    ? ;
.bss:00000000002212AC                 db    ? ;
.bss:00000000002212AD                 db    ? ;
.bss:00000000002212AE                 db    ? ;
.bss:00000000002212AF                 db    ? ;
.bss:00000000002212B0                 db    ? ;
.bss:00000000002212B1                 db    ? ;
.bss:00000000002212B2                 db    ? ;
.bss:00000000002212B3                 db    ? ;
.bss:00000000002212B4                 db    ? ;
.bss:00000000002212B5                 db    ? ;
.bss:00000000002212B6                 db    ? ;
.bss:00000000002212B7                 db    ? ;
.bss:00000000002212B8                 db    ? ;
.bss:00000000002212B9                 db    ? ;
.bss:00000000002212BA                 db    ? ;
.bss:00000000002212BB                 db    ? ;
.bss:00000000002212BC                 db    ? ;
.bss:00000000002212BD                 db    ? ;
.bss:00000000002212BE                 db    ? ;
.bss:00000000002212BF                 db    ? ;
.bss:00000000002212C0                 db    ? ;
.bss:00000000002212C1                 db    ? ;
.bss:00000000002212C2                 db    ? ;
.bss:00000000002212C3                 db    ? ;
.bss:00000000002212C4                 db    ? ;
.bss:00000000002212C5                 db    ? ;
.bss:00000000002212C6                 db    ? ;
.bss:00000000002212C7                 db    ? ;
.bss:00000000002212C8                 db    ? ;
.bss:00000000002212C9                 db    ? ;
.bss:00000000002212CA                 db    ? ;
.bss:00000000002212CB                 db    ? ;
.bss:00000000002212CC                 db    ? ;
.bss:00000000002212CD                 db    ? ;
.bss:00000000002212CE                 db    ? ;
.bss:00000000002212CF                 db    ? ;
.bss:00000000002212D0                 db    ? ;
.bss:00000000002212D1                 db    ? ;
.bss:00000000002212D2                 db    ? ;
.bss:00000000002212D3                 db    ? ;
.bss:00000000002212D4                 db    ? ;
.bss:00000000002212D5                 db    ? ;
.bss:00000000002212D6                 db    ? ;
.bss:00000000002212D7                 db    ? ;
.bss:00000000002212D8                 db    ? ;
.bss:00000000002212D9                 db    ? ;
.bss:00000000002212DA                 db    ? ;
.bss:00000000002212DB                 db    ? ;
.bss:00000000002212DC                 db    ? ;
.bss:00000000002212DD                 db    ? ;
.bss:00000000002212DE                 db    ? ;
.bss:00000000002212DF                 db    ? ;
.bss:00000000002212E0 ; size_t number_of_occurs
.bss:00000000002212E0 number_of_occurs dq ?                   ; DATA XREF: main+667↑w
.bss:00000000002212E0                                         ; main:loc_2A83↑r ...
.bss:00000000002212E8 occurs_alloc    dq ?                    ; DATA XREF: main+8FA↑r
.bss:00000000002212E8                                         ; main+F66↑w
.bss:00000000002212F0 ; void *occurs_table
.bss:00000000002212F0 occurs_table    dq ?                    ; DATA XREF: main+901↑r
.bss:00000000002212F0                                         ; main+BFB↑r ...
.bss:00000000002212F8 text_buffers    dq ?                    ; DATA XREF: main+44C↑w
.bss:00000000002212F8                                         ; main+4F7↑w ...
.bss:0000000000221300 file_line_count dq ?                    ; DATA XREF: main+413↑w
.bss:0000000000221300                                         ; main+4EB↑w ...
.bss:0000000000221308 input_file_name dq ?                    ; DATA XREF: main+3D3↑w
.bss:0000000000221308                                         ; main+47D↑r ...
.bss:0000000000221310 total_line_count dq ?                   ; DATA XREF: main+672↑w
.bss:0000000000221310                                         ; main:loc_2B8D↑r ...
.bss:0000000000221318 number_input_files dd ?                 ; DATA XREF: main+396↑w
.bss:0000000000221318                                         ; main+3C7↑r ...
.bss:000000000022131C                 align 20h
.bss:0000000000221320 only_table      dq ?                    ; DATA XREF: main+646↑o
.bss:0000000000221320                                         ; main+8DA↑r
.bss:0000000000221328                 align 10h
.bss:0000000000221330 qword_221330    dq ?                    ; DATA XREF: main+652↑r
.bss:0000000000221330                                         ; main+8D3↑r
.bss:0000000000221338                 align 20h
.bss:0000000000221340 ignore_table    dq ?                    ; DATA XREF: main+620↑o
.bss:0000000000221340                                         ; main+8B0↑r
.bss:0000000000221348                 align 10h
.bss:0000000000221350 qword_221350    dq ?                    ; DATA XREF: main+62C↑r
.bss:0000000000221350                                         ; main+8A9↑r
.bss:0000000000221358 reference_max_width dq ?                ; DATA XREF: main+688↑w
.bss:0000000000221358                                         ; main+943↑r ...
.bss:0000000000221360 maximum_word_length dq ?                ; DATA XREF: main+67D↑w
.bss:0000000000221360                                         ; main+879↑r ...
.bss:0000000000221368                 align 20h
.bss:0000000000221380 _word_fastmap   db    ? ;               ; DATA XREF: main+5B8↑o
.bss:0000000000221380                                         ; main+699↑o ...
.bss:0000000000221381                 db    ? ;
.bss:0000000000221382                 db    ? ;
.bss:0000000000221383                 db    ? ;
.bss:0000000000221384                 db    ? ;
.bss:0000000000221385                 db    ? ;
.bss:0000000000221386                 db    ? ;
.bss:0000000000221387                 db    ? ;
.bss:0000000000221388                 db    ? ;
.bss:0000000000221389 word_221389     dw ?                    ; DATA XREF: main+606↑w
.bss:0000000000221389                                         ; main+23E9↑w
.bss:000000000022138B                 align 20h
.bss:00000000002213A0 byte_2213A0     db ?                    ; DATA XREF: main+5FF↑w
.bss:00000000002213A0                                         ; main+23E2↑w
.bss:00000000002213A1                 db    ? ;
.bss:00000000002213A2                 db    ? ;
.bss:00000000002213A3                 db    ? ;
.bss:00000000002213A4                 db    ? ;
.bss:00000000002213A5                 db    ? ;
.bss:00000000002213A6                 db    ? ;
.bss:00000000002213A7                 db    ? ;
.bss:00000000002213A8                 db    ? ;
.bss:00000000002213A9                 db    ? ;
.bss:00000000002213AA                 db    ? ;
.bss:00000000002213AB                 db    ? ;
.bss:00000000002213AC                 db    ? ;
.bss:00000000002213AD                 db    ? ;
.bss:00000000002213AE                 db    ? ;
.bss:00000000002213AF                 db    ? ;
.bss:00000000002213B0                 db    ? ;
.bss:00000000002213B1                 db    ? ;
.bss:00000000002213B2                 db    ? ;
.bss:00000000002213B3                 db    ? ;
.bss:00000000002213B4                 db    ? ;
.bss:00000000002213B5                 db    ? ;
.bss:00000000002213B6                 db    ? ;
.bss:00000000002213B7                 db    ? ;
.bss:00000000002213B8                 db    ? ;
.bss:00000000002213B9                 db    ? ;
.bss:00000000002213BA                 db    ? ;
.bss:00000000002213BB                 db    ? ;
.bss:00000000002213BC                 db    ? ;
.bss:00000000002213BD                 db    ? ;
.bss:00000000002213BE                 db    ? ;
.bss:00000000002213BF                 db    ? ;
.bss:00000000002213C0                 db    ? ;
.bss:00000000002213C1                 db    ? ;
.bss:00000000002213C2                 db    ? ;
.bss:00000000002213C3                 db    ? ;
.bss:00000000002213C4                 db    ? ;
.bss:00000000002213C5                 db    ? ;
.bss:00000000002213C6                 db    ? ;
.bss:00000000002213C7                 db    ? ;
.bss:00000000002213C8                 db    ? ;
.bss:00000000002213C9                 db    ? ;
.bss:00000000002213CA                 db    ? ;
.bss:00000000002213CB                 db    ? ;
.bss:00000000002213CC                 db    ? ;
.bss:00000000002213CD                 db    ? ;
.bss:00000000002213CE                 db    ? ;
.bss:00000000002213CF                 db    ? ;
.bss:00000000002213D0                 db    ? ;
.bss:00000000002213D1                 db    ? ;
.bss:00000000002213D2                 db    ? ;
.bss:00000000002213D3                 db    ? ;
.bss:00000000002213D4                 db    ? ;
.bss:00000000002213D5                 db    ? ;
.bss:00000000002213D6                 db    ? ;
.bss:00000000002213D7                 db    ? ;
.bss:00000000002213D8                 db    ? ;
.bss:00000000002213D9                 db    ? ;
.bss:00000000002213DA                 db    ? ;
.bss:00000000002213DB                 db    ? ;
.bss:00000000002213DC                 db    ? ;
.bss:00000000002213DD                 db    ? ;
.bss:00000000002213DE                 db    ? ;
.bss:00000000002213DF                 db    ? ;
.bss:00000000002213E0                 db    ? ;
.bss:00000000002213E1                 db    ? ;
.bss:00000000002213E2                 db    ? ;
.bss:00000000002213E3                 db    ? ;
.bss:00000000002213E4                 db    ? ;
.bss:00000000002213E5                 db    ? ;
.bss:00000000002213E6                 db    ? ;
.bss:00000000002213E7                 db    ? ;
.bss:00000000002213E8                 db    ? ;
.bss:00000000002213E9                 db    ? ;
.bss:00000000002213EA                 db    ? ;
.bss:00000000002213EB                 db    ? ;
.bss:00000000002213EC                 db    ? ;
.bss:00000000002213ED                 db    ? ;
.bss:00000000002213EE                 db    ? ;
.bss:00000000002213EF                 db    ? ;
.bss:00000000002213F0                 db    ? ;
.bss:00000000002213F1                 db    ? ;
.bss:00000000002213F2                 db    ? ;
.bss:00000000002213F3                 db    ? ;
.bss:00000000002213F4                 db    ? ;
.bss:00000000002213F5                 db    ? ;
.bss:00000000002213F6                 db    ? ;
.bss:00000000002213F7                 db    ? ;
.bss:00000000002213F8                 db    ? ;
.bss:00000000002213F9                 db    ? ;
.bss:00000000002213FA                 db    ? ;
.bss:00000000002213FB                 db    ? ;
.bss:00000000002213FC                 db    ? ;
.bss:00000000002213FD                 db    ? ;
.bss:00000000002213FE                 db    ? ;
.bss:00000000002213FF                 db    ? ;
.bss:0000000000221400                 db    ? ;
.bss:0000000000221401                 db    ? ;
.bss:0000000000221402                 db    ? ;
.bss:0000000000221403                 db    ? ;
.bss:0000000000221404                 db    ? ;
.bss:0000000000221405                 db    ? ;
.bss:0000000000221406                 db    ? ;
.bss:0000000000221407                 db    ? ;
.bss:0000000000221408                 db    ? ;
.bss:0000000000221409                 db    ? ;
.bss:000000000022140A                 db    ? ;
.bss:000000000022140B                 db    ? ;
.bss:000000000022140C                 db    ? ;
.bss:000000000022140D                 db    ? ;
.bss:000000000022140E                 db    ? ;
.bss:000000000022140F                 db    ? ;
.bss:0000000000221410                 db    ? ;
.bss:0000000000221411                 db    ? ;
.bss:0000000000221412                 db    ? ;
.bss:0000000000221413                 db    ? ;
.bss:0000000000221414                 db    ? ;
.bss:0000000000221415                 db    ? ;
.bss:0000000000221416                 db    ? ;
.bss:0000000000221417                 db    ? ;
.bss:0000000000221418                 db    ? ;
.bss:0000000000221419                 db    ? ;
.bss:000000000022141A                 db    ? ;
.bss:000000000022141B                 db    ? ;
.bss:000000000022141C                 db    ? ;
.bss:000000000022141D                 db    ? ;
.bss:000000000022141E                 db    ? ;
.bss:000000000022141F                 db    ? ;
.bss:0000000000221420                 db    ? ;
.bss:0000000000221421                 db    ? ;
.bss:0000000000221422                 db    ? ;
.bss:0000000000221423                 db    ? ;
.bss:0000000000221424                 db    ? ;
.bss:0000000000221425                 db    ? ;
.bss:0000000000221426                 db    ? ;
.bss:0000000000221427                 db    ? ;
.bss:0000000000221428                 db    ? ;
.bss:0000000000221429                 db    ? ;
.bss:000000000022142A                 db    ? ;
.bss:000000000022142B                 db    ? ;
.bss:000000000022142C                 db    ? ;
.bss:000000000022142D                 db    ? ;
.bss:000000000022142E                 db    ? ;
.bss:000000000022142F                 db    ? ;
.bss:0000000000221430                 db    ? ;
.bss:0000000000221431                 db    ? ;
.bss:0000000000221432                 db    ? ;
.bss:0000000000221433                 db    ? ;
.bss:0000000000221434                 db    ? ;
.bss:0000000000221435                 db    ? ;
.bss:0000000000221436                 db    ? ;
.bss:0000000000221437                 db    ? ;
.bss:0000000000221438                 db    ? ;
.bss:0000000000221439                 db    ? ;
.bss:000000000022143A                 db    ? ;
.bss:000000000022143B                 db    ? ;
.bss:000000000022143C                 db    ? ;
.bss:000000000022143D                 db    ? ;
.bss:000000000022143E                 db    ? ;
.bss:000000000022143F                 db    ? ;
.bss:0000000000221440                 db    ? ;
.bss:0000000000221441                 db    ? ;
.bss:0000000000221442                 db    ? ;
.bss:0000000000221443                 db    ? ;
.bss:0000000000221444                 db    ? ;
.bss:0000000000221445                 db    ? ;
.bss:0000000000221446                 db    ? ;
.bss:0000000000221447                 db    ? ;
.bss:0000000000221448                 db    ? ;
.bss:0000000000221449                 db    ? ;
.bss:000000000022144A                 db    ? ;
.bss:000000000022144B                 db    ? ;
.bss:000000000022144C                 db    ? ;
.bss:000000000022144D                 db    ? ;
.bss:000000000022144E                 db    ? ;
.bss:000000000022144F                 db    ? ;
.bss:0000000000221450                 db    ? ;
.bss:0000000000221451                 db    ? ;
.bss:0000000000221452                 db    ? ;
.bss:0000000000221453                 db    ? ;
.bss:0000000000221454                 db    ? ;
.bss:0000000000221455                 db    ? ;
.bss:0000000000221456                 db    ? ;
.bss:0000000000221457                 db    ? ;
.bss:0000000000221458                 db    ? ;
.bss:0000000000221459                 db    ? ;
.bss:000000000022145A                 db    ? ;
.bss:000000000022145B                 db    ? ;
.bss:000000000022145C                 db    ? ;
.bss:000000000022145D                 db    ? ;
.bss:000000000022145E                 db    ? ;
.bss:000000000022145F                 db    ? ;
.bss:0000000000221460                 db    ? ;
.bss:0000000000221461                 db    ? ;
.bss:0000000000221462                 db    ? ;
.bss:0000000000221463                 db    ? ;
.bss:0000000000221464                 db    ? ;
.bss:0000000000221465                 db    ? ;
.bss:0000000000221466                 db    ? ;
.bss:0000000000221467                 db    ? ;
.bss:0000000000221468                 db    ? ;
.bss:0000000000221469                 db    ? ;
.bss:000000000022146A                 db    ? ;
.bss:000000000022146B                 db    ? ;
.bss:000000000022146C                 db    ? ;
.bss:000000000022146D                 db    ? ;
.bss:000000000022146E                 db    ? ;
.bss:000000000022146F                 db    ? ;
.bss:0000000000221470                 db    ? ;
.bss:0000000000221471                 db    ? ;
.bss:0000000000221472                 db    ? ;
.bss:0000000000221473                 db    ? ;
.bss:0000000000221474                 db    ? ;
.bss:0000000000221475                 db    ? ;
.bss:0000000000221476                 db    ? ;
.bss:0000000000221477                 db    ? ;
.bss:0000000000221478                 db    ? ;
.bss:0000000000221479                 db    ? ;
.bss:000000000022147A                 db    ? ;
.bss:000000000022147B                 db    ? ;
.bss:000000000022147C                 db    ? ;
.bss:000000000022147D                 db    ? ;
.bss:000000000022147E                 db    ? ;
.bss:000000000022147F                 db    ? ;
.bss:0000000000221480 _word_regs      db    ? ;               ; DATA XREF: main+81C↑o
.bss:0000000000221481                 db    ? ;
.bss:0000000000221482                 db    ? ;
.bss:0000000000221483                 db    ? ;
.bss:0000000000221484                 db    ? ;
.bss:0000000000221485                 db    ? ;
.bss:0000000000221486                 db    ? ;
.bss:0000000000221487                 db    ? ;
.bss:0000000000221488 qword_221488    dq ?                    ; DATA XREF: main+84E↑r
.bss:0000000000221490 qword_221490    dq ?                    ; DATA XREF: main+858↑r
.bss:0000000000221498                 align 20h
.bss:00000000002214A0 context_regs    db    ? ;               ; DATA XREF: main+77F↑o
.bss:00000000002214A1                 db    ? ;
.bss:00000000002214A2                 db    ? ;
.bss:00000000002214A3                 db    ? ;
.bss:00000000002214A4                 db    ? ;
.bss:00000000002214A5                 db    ? ;
.bss:00000000002214A6                 db    ? ;
.bss:00000000002214A7                 db    ? ;
.bss:00000000002214A8                 db    ? ;
.bss:00000000002214A9                 db    ? ;
.bss:00000000002214AA                 db    ? ;
.bss:00000000002214AB                 db    ? ;
.bss:00000000002214AC                 db    ? ;
.bss:00000000002214AD                 db    ? ;
.bss:00000000002214AE                 db    ? ;
.bss:00000000002214AF                 db    ? ;
.bss:00000000002214B0 qword_2214B0    dq ?                    ; DATA XREF: main+7B6↑r
.bss:00000000002214B8                 align 20h
.bss:00000000002214C0 folded_chars    db    ? ;               ; DATA XREF: main+541↑o
.bss:00000000002214C0                                         ; compare_words+6B↑o ...
.bss:00000000002214C1                 db    ? ;
.bss:00000000002214C2                 db    ? ;
.bss:00000000002214C3                 db    ? ;
.bss:00000000002214C4                 db    ? ;
.bss:00000000002214C5                 db    ? ;
.bss:00000000002214C6                 db    ? ;
.bss:00000000002214C7                 db    ? ;
.bss:00000000002214C8                 db    ? ;
.bss:00000000002214C9                 db    ? ;
.bss:00000000002214CA                 db    ? ;
.bss:00000000002214CB                 db    ? ;
.bss:00000000002214CC                 db    ? ;
.bss:00000000002214CD                 db    ? ;
.bss:00000000002214CE                 db    ? ;
.bss:00000000002214CF                 db    ? ;
.bss:00000000002214D0                 db    ? ;
.bss:00000000002214D1                 db    ? ;
.bss:00000000002214D2                 db    ? ;
.bss:00000000002214D3                 db    ? ;
.bss:00000000002214D4                 db    ? ;
.bss:00000000002214D5                 db    ? ;
.bss:00000000002214D6                 db    ? ;
.bss:00000000002214D7                 db    ? ;
.bss:00000000002214D8                 db    ? ;
.bss:00000000002214D9                 db    ? ;
.bss:00000000002214DA                 db    ? ;
.bss:00000000002214DB                 db    ? ;
.bss:00000000002214DC                 db    ? ;
.bss:00000000002214DD                 db    ? ;
.bss:00000000002214DE                 db    ? ;
.bss:00000000002214DF                 db    ? ;
.bss:00000000002214E0                 db    ? ;
.bss:00000000002214E1                 db    ? ;
.bss:00000000002214E2                 db    ? ;
.bss:00000000002214E3                 db    ? ;
.bss:00000000002214E4                 db    ? ;
.bss:00000000002214E5                 db    ? ;
.bss:00000000002214E6                 db    ? ;
.bss:00000000002214E7                 db    ? ;
.bss:00000000002214E8                 db    ? ;
.bss:00000000002214E9                 db    ? ;
.bss:00000000002214EA                 db    ? ;
.bss:00000000002214EB                 db    ? ;
.bss:00000000002214EC                 db    ? ;
.bss:00000000002214ED                 db    ? ;
.bss:00000000002214EE                 db    ? ;
.bss:00000000002214EF                 db    ? ;
.bss:00000000002214F0                 db    ? ;
.bss:00000000002214F1                 db    ? ;
.bss:00000000002214F2                 db    ? ;
.bss:00000000002214F3                 db    ? ;
.bss:00000000002214F4                 db    ? ;
.bss:00000000002214F5                 db    ? ;
.bss:00000000002214F6                 db    ? ;
.bss:00000000002214F7                 db    ? ;
.bss:00000000002214F8                 db    ? ;
.bss:00000000002214F9                 db    ? ;
.bss:00000000002214FA                 db    ? ;
.bss:00000000002214FB                 db    ? ;
.bss:00000000002214FC                 db    ? ;
.bss:00000000002214FD                 db    ? ;
.bss:00000000002214FE                 db    ? ;
.bss:00000000002214FF                 db    ? ;
.bss:0000000000221500                 db    ? ;
.bss:0000000000221501                 db    ? ;
.bss:0000000000221502                 db    ? ;
.bss:0000000000221503                 db    ? ;
.bss:0000000000221504                 db    ? ;
.bss:0000000000221505                 db    ? ;
.bss:0000000000221506                 db    ? ;
.bss:0000000000221507                 db    ? ;
.bss:0000000000221508                 db    ? ;
.bss:0000000000221509                 db    ? ;
.bss:000000000022150A                 db    ? ;
.bss:000000000022150B                 db    ? ;
.bss:000000000022150C                 db    ? ;
.bss:000000000022150D                 db    ? ;
.bss:000000000022150E                 db    ? ;
.bss:000000000022150F                 db    ? ;
.bss:0000000000221510                 db    ? ;
.bss:0000000000221511                 db    ? ;
.bss:0000000000221512                 db    ? ;
.bss:0000000000221513                 db    ? ;
.bss:0000000000221514                 db    ? ;
.bss:0000000000221515                 db    ? ;
.bss:0000000000221516                 db    ? ;
.bss:0000000000221517                 db    ? ;
.bss:0000000000221518                 db    ? ;
.bss:0000000000221519                 db    ? ;
.bss:000000000022151A                 db    ? ;
.bss:000000000022151B                 db    ? ;
.bss:000000000022151C                 db    ? ;
.bss:000000000022151D                 db    ? ;
.bss:000000000022151E                 db    ? ;
.bss:000000000022151F                 db    ? ;
.bss:0000000000221520                 db    ? ;
.bss:0000000000221521                 db    ? ;
.bss:0000000000221522                 db    ? ;
.bss:0000000000221523                 db    ? ;
.bss:0000000000221524                 db    ? ;
.bss:0000000000221525                 db    ? ;
.bss:0000000000221526                 db    ? ;
.bss:0000000000221527                 db    ? ;
.bss:0000000000221528                 db    ? ;
.bss:0000000000221529                 db    ? ;
.bss:000000000022152A                 db    ? ;
.bss:000000000022152B                 db    ? ;
.bss:000000000022152C                 db    ? ;
.bss:000000000022152D                 db    ? ;
.bss:000000000022152E                 db    ? ;
.bss:000000000022152F                 db    ? ;
.bss:0000000000221530                 db    ? ;
.bss:0000000000221531                 db    ? ;
.bss:0000000000221532                 db    ? ;
.bss:0000000000221533                 db    ? ;
.bss:0000000000221534                 db    ? ;
.bss:0000000000221535                 db    ? ;
.bss:0000000000221536                 db    ? ;
.bss:0000000000221537                 db    ? ;
.bss:0000000000221538                 db    ? ;
.bss:0000000000221539                 db    ? ;
.bss:000000000022153A                 db    ? ;
.bss:000000000022153B                 db    ? ;
.bss:000000000022153C                 db    ? ;
.bss:000000000022153D                 db    ? ;
.bss:000000000022153E                 db    ? ;
.bss:000000000022153F                 db    ? ;
.bss:0000000000221540                 db    ? ;
.bss:0000000000221541                 db    ? ;
.bss:0000000000221542                 db    ? ;
.bss:0000000000221543                 db    ? ;
.bss:0000000000221544                 db    ? ;
.bss:0000000000221545                 db    ? ;
.bss:0000000000221546                 db    ? ;
.bss:0000000000221547                 db    ? ;
.bss:0000000000221548                 db    ? ;
.bss:0000000000221549                 db    ? ;
.bss:000000000022154A                 db    ? ;
.bss:000000000022154B                 db    ? ;
.bss:000000000022154C                 db    ? ;
.bss:000000000022154D                 db    ? ;
.bss:000000000022154E                 db    ? ;
.bss:000000000022154F                 db    ? ;
.bss:0000000000221550                 db    ? ;
.bss:0000000000221551                 db    ? ;
.bss:0000000000221552                 db    ? ;
.bss:0000000000221553                 db    ? ;
.bss:0000000000221554                 db    ? ;
.bss:0000000000221555                 db    ? ;
.bss:0000000000221556                 db    ? ;
.bss:0000000000221557                 db    ? ;
.bss:0000000000221558                 db    ? ;
.bss:0000000000221559                 db    ? ;
.bss:000000000022155A                 db    ? ;
.bss:000000000022155B                 db    ? ;
.bss:000000000022155C                 db    ? ;
.bss:000000000022155D                 db    ? ;
.bss:000000000022155E                 db    ? ;
.bss:000000000022155F                 db    ? ;
.bss:0000000000221560                 db    ? ;
.bss:0000000000221561                 db    ? ;
.bss:0000000000221562                 db    ? ;
.bss:0000000000221563                 db    ? ;
.bss:0000000000221564                 db    ? ;
.bss:0000000000221565                 db    ? ;
.bss:0000000000221566                 db    ? ;
.bss:0000000000221567                 db    ? ;
.bss:0000000000221568                 db    ? ;
.bss:0000000000221569                 db    ? ;
.bss:000000000022156A                 db    ? ;
.bss:000000000022156B                 db    ? ;
.bss:000000000022156C                 db    ? ;
.bss:000000000022156D                 db    ? ;
.bss:000000000022156E                 db    ? ;
.bss:000000000022156F                 db    ? ;
.bss:0000000000221570                 db    ? ;
.bss:0000000000221571                 db    ? ;
.bss:0000000000221572                 db    ? ;
.bss:0000000000221573                 db    ? ;
.bss:0000000000221574                 db    ? ;
.bss:0000000000221575                 db    ? ;
.bss:0000000000221576                 db    ? ;
.bss:0000000000221577                 db    ? ;
.bss:0000000000221578                 db    ? ;
.bss:0000000000221579                 db    ? ;
.bss:000000000022157A                 db    ? ;
.bss:000000000022157B                 db    ? ;
.bss:000000000022157C                 db    ? ;
.bss:000000000022157D                 db    ? ;
.bss:000000000022157E                 db    ? ;
.bss:000000000022157F                 db    ? ;
.bss:0000000000221580                 db    ? ;
.bss:0000000000221581                 db    ? ;
.bss:0000000000221582                 db    ? ;
.bss:0000000000221583                 db    ? ;
.bss:0000000000221584                 db    ? ;
.bss:0000000000221585                 db    ? ;
.bss:0000000000221586                 db    ? ;
.bss:0000000000221587                 db    ? ;
.bss:0000000000221588                 db    ? ;
.bss:0000000000221589                 db    ? ;
.bss:000000000022158A                 db    ? ;
.bss:000000000022158B                 db    ? ;
.bss:000000000022158C                 db    ? ;
.bss:000000000022158D                 db    ? ;
.bss:000000000022158E                 db    ? ;
.bss:000000000022158F                 db    ? ;
.bss:0000000000221590                 db    ? ;
.bss:0000000000221591                 db    ? ;
.bss:0000000000221592                 db    ? ;
.bss:0000000000221593                 db    ? ;
.bss:0000000000221594                 db    ? ;
.bss:0000000000221595                 db    ? ;
.bss:0000000000221596                 db    ? ;
.bss:0000000000221597                 db    ? ;
.bss:0000000000221598                 db    ? ;
.bss:0000000000221599                 db    ? ;
.bss:000000000022159A                 db    ? ;
.bss:000000000022159B                 db    ? ;
.bss:000000000022159C                 db    ? ;
.bss:000000000022159D                 db    ? ;
.bss:000000000022159E                 db    ? ;
.bss:000000000022159F                 db    ? ;
.bss:00000000002215A0                 db    ? ;
.bss:00000000002215A1                 db    ? ;
.bss:00000000002215A2                 db    ? ;
.bss:00000000002215A3                 db    ? ;
.bss:00000000002215A4                 db    ? ;
.bss:00000000002215A5                 db    ? ;
.bss:00000000002215A6                 db    ? ;
.bss:00000000002215A7                 db    ? ;
.bss:00000000002215A8                 db    ? ;
.bss:00000000002215A9                 db    ? ;
.bss:00000000002215AA                 db    ? ;
.bss:00000000002215AB                 db    ? ;
.bss:00000000002215AC                 db    ? ;
.bss:00000000002215AD                 db    ? ;
.bss:00000000002215AE                 db    ? ;
.bss:00000000002215AF                 db    ? ;
.bss:00000000002215B0                 db    ? ;
.bss:00000000002215B1                 db    ? ;
.bss:00000000002215B2                 db    ? ;
.bss:00000000002215B3                 db    ? ;
.bss:00000000002215B4                 db    ? ;
.bss:00000000002215B5                 db    ? ;
.bss:00000000002215B6                 db    ? ;
.bss:00000000002215B7                 db    ? ;
.bss:00000000002215B8                 db    ? ;
.bss:00000000002215B9                 db    ? ;
.bss:00000000002215BA                 db    ? ;
.bss:00000000002215BB                 db    ? ;
.bss:00000000002215BC                 db    ? ;
.bss:00000000002215BD                 db    ? ;
.bss:00000000002215BE                 db    ? ;
.bss:00000000002215BF                 db    ? ;
.bss:00000000002215C0 _word_regex     dq ?                    ; DATA XREF: main+2C6↑w
.bss:00000000002215C0                                         ; main+2D6↑w ...
.bss:00000000002215C8 unk_2215C8      db    ? ;               ; DATA XREF: main+823↑o
.bss:00000000002215C8                                         ; main+C83↑o
.bss:00000000002215C9                 db    ? ;
.bss:00000000002215CA                 db    ? ;
.bss:00000000002215CB                 db    ? ;
.bss:00000000002215CC                 db    ? ;
.bss:00000000002215CD                 db    ? ;
.bss:00000000002215CE                 db    ? ;
.bss:00000000002215CF                 db    ? ;
.bss:00000000002215D0                 db    ? ;
.bss:00000000002215D1                 db    ? ;
.bss:00000000002215D2                 db    ? ;
.bss:00000000002215D3                 db    ? ;
.bss:00000000002215D4                 db    ? ;
.bss:00000000002215D5                 db    ? ;
.bss:00000000002215D6                 db    ? ;
.bss:00000000002215D7                 db    ? ;
.bss:00000000002215D8                 db    ? ;
.bss:00000000002215D9                 db    ? ;
.bss:00000000002215DA                 db    ? ;
.bss:00000000002215DB                 db    ? ;
.bss:00000000002215DC                 db    ? ;
.bss:00000000002215DD                 db    ? ;
.bss:00000000002215DE                 db    ? ;
.bss:00000000002215DF                 db    ? ;
.bss:00000000002215E0                 db    ? ;
.bss:00000000002215E1                 db    ? ;
.bss:00000000002215E2                 db    ? ;
.bss:00000000002215E3                 db    ? ;
.bss:00000000002215E4                 db    ? ;
.bss:00000000002215E5                 db    ? ;
.bss:00000000002215E6                 db    ? ;
.bss:00000000002215E7                 db    ? ;
.bss:00000000002215E8                 db    ? ;
.bss:00000000002215E9                 db    ? ;
.bss:00000000002215EA                 db    ? ;
.bss:00000000002215EB                 db    ? ;
.bss:00000000002215EC                 db    ? ;
.bss:00000000002215ED                 db    ? ;
.bss:00000000002215EE                 db    ? ;
.bss:00000000002215EF                 db    ? ;
.bss:00000000002215F0                 db    ? ;
.bss:00000000002215F1                 db    ? ;
.bss:00000000002215F2                 db    ? ;
.bss:00000000002215F3                 db    ? ;
.bss:00000000002215F4                 db    ? ;
.bss:00000000002215F5                 db    ? ;
.bss:00000000002215F6                 db    ? ;
.bss:00000000002215F7                 db    ? ;
.bss:00000000002215F8                 db    ? ;
.bss:00000000002215F9                 db    ? ;
.bss:00000000002215FA                 db    ? ;
.bss:00000000002215FB                 db    ? ;
.bss:00000000002215FC                 db    ? ;
.bss:00000000002215FD                 db    ? ;
.bss:00000000002215FE                 db    ? ;
.bss:00000000002215FF                 db    ? ;
.bss:0000000000221600                 db    ? ;
.bss:0000000000221601                 db    ? ;
.bss:0000000000221602                 db    ? ;
.bss:0000000000221603                 db    ? ;
.bss:0000000000221604                 db    ? ;
.bss:0000000000221605                 db    ? ;
.bss:0000000000221606                 db    ? ;
.bss:0000000000221607                 db    ? ;
.bss:0000000000221608                 db    ? ;
.bss:0000000000221609                 db    ? ;
.bss:000000000022160A                 db    ? ;
.bss:000000000022160B                 db    ? ;
.bss:000000000022160C                 db    ? ;
.bss:000000000022160D                 db    ? ;
.bss:000000000022160E                 db    ? ;
.bss:000000000022160F                 db    ? ;
.bss:0000000000221610                 db    ? ;
.bss:0000000000221611                 db    ? ;
.bss:0000000000221612                 db    ? ;
.bss:0000000000221613                 db    ? ;
.bss:0000000000221614                 db    ? ;
.bss:0000000000221615                 db    ? ;
.bss:0000000000221616                 db    ? ;
.bss:0000000000221617                 db    ? ;
.bss:0000000000221618                 db    ? ;
.bss:0000000000221619                 db    ? ;
.bss:000000000022161A                 db    ? ;
.bss:000000000022161B                 db    ? ;
.bss:000000000022161C                 db    ? ;
.bss:000000000022161D                 db    ? ;
.bss:000000000022161E                 db    ? ;
.bss:000000000022161F                 db    ? ;
.bss:0000000000221620                 db    ? ;
.bss:0000000000221621                 db    ? ;
.bss:0000000000221622                 db    ? ;
.bss:0000000000221623                 db    ? ;
.bss:0000000000221624                 db    ? ;
.bss:0000000000221625                 db    ? ;
.bss:0000000000221626                 db    ? ;
.bss:0000000000221627                 db    ? ;
.bss:0000000000221628                 db    ? ;
.bss:0000000000221629                 db    ? ;
.bss:000000000022162A                 db    ? ;
.bss:000000000022162B                 db    ? ;
.bss:000000000022162C                 db    ? ;
.bss:000000000022162D                 db    ? ;
.bss:000000000022162E                 db    ? ;
.bss:000000000022162F                 db    ? ;
.bss:0000000000221630                 db    ? ;
.bss:0000000000221631                 db    ? ;
.bss:0000000000221632                 db    ? ;
.bss:0000000000221633                 db    ? ;
.bss:0000000000221634                 db    ? ;
.bss:0000000000221635                 db    ? ;
.bss:0000000000221636                 db    ? ;
.bss:0000000000221637                 db    ? ;
.bss:0000000000221638                 db    ? ;
.bss:0000000000221639                 db    ? ;
.bss:000000000022163A                 db    ? ;
.bss:000000000022163B                 db    ? ;
.bss:000000000022163C                 db    ? ;
.bss:000000000022163D                 db    ? ;
.bss:000000000022163E                 db    ? ;
.bss:000000000022163F                 db    ? ;
.bss:0000000000221640                 db    ? ;
.bss:0000000000221641                 db    ? ;
.bss:0000000000221642                 db    ? ;
.bss:0000000000221643                 db    ? ;
.bss:0000000000221644                 db    ? ;
.bss:0000000000221645                 db    ? ;
.bss:0000000000221646                 db    ? ;
.bss:0000000000221647                 db    ? ;
.bss:0000000000221648                 db    ? ;
.bss:0000000000221649                 db    ? ;
.bss:000000000022164A                 db    ? ;
.bss:000000000022164B                 db    ? ;
.bss:000000000022164C                 db    ? ;
.bss:000000000022164D                 db    ? ;
.bss:000000000022164E                 db    ? ;
.bss:000000000022164F                 db    ? ;
.bss:0000000000221650                 db    ? ;
.bss:0000000000221651                 db    ? ;
.bss:0000000000221652                 db    ? ;
.bss:0000000000221653                 db    ? ;
.bss:0000000000221654                 db    ? ;
.bss:0000000000221655                 db    ? ;
.bss:0000000000221656                 db    ? ;
.bss:0000000000221657                 db    ? ;
.bss:0000000000221658                 db    ? ;
.bss:0000000000221659                 db    ? ;
.bss:000000000022165A                 db    ? ;
.bss:000000000022165B                 db    ? ;
.bss:000000000022165C                 db    ? ;
.bss:000000000022165D                 db    ? ;
.bss:000000000022165E                 db    ? ;
.bss:000000000022165F                 db    ? ;
.bss:0000000000221660                 db    ? ;
.bss:0000000000221661                 db    ? ;
.bss:0000000000221662                 db    ? ;
.bss:0000000000221663                 db    ? ;
.bss:0000000000221664                 db    ? ;
.bss:0000000000221665                 db    ? ;
.bss:0000000000221666                 db    ? ;
.bss:0000000000221667                 db    ? ;
.bss:0000000000221668                 db    ? ;
.bss:0000000000221669                 db    ? ;
.bss:000000000022166A                 db    ? ;
.bss:000000000022166B                 db    ? ;
.bss:000000000022166C                 db    ? ;
.bss:000000000022166D                 db    ? ;
.bss:000000000022166E                 db    ? ;
.bss:000000000022166F                 db    ? ;
.bss:0000000000221670                 db    ? ;
.bss:0000000000221671                 db    ? ;
.bss:0000000000221672                 db    ? ;
.bss:0000000000221673                 db    ? ;
.bss:0000000000221674                 db    ? ;
.bss:0000000000221675                 db    ? ;
.bss:0000000000221676                 db    ? ;
.bss:0000000000221677                 db    ? ;
.bss:0000000000221678                 db    ? ;
.bss:0000000000221679                 db    ? ;
.bss:000000000022167A                 db    ? ;
.bss:000000000022167B                 db    ? ;
.bss:000000000022167C                 db    ? ;
.bss:000000000022167D                 db    ? ;
.bss:000000000022167E                 db    ? ;
.bss:000000000022167F                 db    ? ;
.bss:0000000000221680                 db    ? ;
.bss:0000000000221681                 db    ? ;
.bss:0000000000221682                 db    ? ;
.bss:0000000000221683                 db    ? ;
.bss:0000000000221684                 db    ? ;
.bss:0000000000221685                 db    ? ;
.bss:0000000000221686                 db    ? ;
.bss:0000000000221687                 db    ? ;
.bss:0000000000221688                 db    ? ;
.bss:0000000000221689                 db    ? ;
.bss:000000000022168A                 db    ? ;
.bss:000000000022168B                 db    ? ;
.bss:000000000022168C                 db    ? ;
.bss:000000000022168D                 db    ? ;
.bss:000000000022168E                 db    ? ;
.bss:000000000022168F                 db    ? ;
.bss:0000000000221690                 db    ? ;
.bss:0000000000221691                 db    ? ;
.bss:0000000000221692                 db    ? ;
.bss:0000000000221693                 db    ? ;
.bss:0000000000221694                 db    ? ;
.bss:0000000000221695                 db    ? ;
.bss:0000000000221696                 db    ? ;
.bss:0000000000221697                 db    ? ;
.bss:0000000000221698                 db    ? ;
.bss:0000000000221699                 db    ? ;
.bss:000000000022169A                 db    ? ;
.bss:000000000022169B                 db    ? ;
.bss:000000000022169C                 db    ? ;
.bss:000000000022169D                 db    ? ;
.bss:000000000022169E                 db    ? ;
.bss:000000000022169F                 db    ? ;
.bss:00000000002216A0                 db    ? ;
.bss:00000000002216A1                 db    ? ;
.bss:00000000002216A2                 db    ? ;
.bss:00000000002216A3                 db    ? ;
.bss:00000000002216A4                 db    ? ;
.bss:00000000002216A5                 db    ? ;
.bss:00000000002216A6                 db    ? ;
.bss:00000000002216A7                 db    ? ;
.bss:00000000002216A8                 db    ? ;
.bss:00000000002216A9                 db    ? ;
.bss:00000000002216AA                 db    ? ;
.bss:00000000002216AB                 db    ? ;
.bss:00000000002216AC                 db    ? ;
.bss:00000000002216AD                 db    ? ;
.bss:00000000002216AE                 db    ? ;
.bss:00000000002216AF                 db    ? ;
.bss:00000000002216B0                 db    ? ;
.bss:00000000002216B1                 db    ? ;
.bss:00000000002216B2                 db    ? ;
.bss:00000000002216B3                 db    ? ;
.bss:00000000002216B4                 db    ? ;
.bss:00000000002216B5                 db    ? ;
.bss:00000000002216B6                 db    ? ;
.bss:00000000002216B7                 db    ? ;
.bss:00000000002216B8                 db    ? ;
.bss:00000000002216B9                 db    ? ;
.bss:00000000002216BA                 db    ? ;
.bss:00000000002216BB                 db    ? ;
.bss:00000000002216BC                 db    ? ;
.bss:00000000002216BD                 db    ? ;
.bss:00000000002216BE                 db    ? ;
.bss:00000000002216BF                 db    ? ;
.bss:00000000002216C0                 db    ? ;
.bss:00000000002216C1                 db    ? ;
.bss:00000000002216C2                 db    ? ;
.bss:00000000002216C3                 db    ? ;
.bss:00000000002216C4                 db    ? ;
.bss:00000000002216C5                 db    ? ;
.bss:00000000002216C6                 db    ? ;
.bss:00000000002216C7                 db    ? ;
.bss:00000000002216C8                 db    ? ;
.bss:00000000002216C9                 db    ? ;
.bss:00000000002216CA                 db    ? ;
.bss:00000000002216CB                 db    ? ;
.bss:00000000002216CC                 db    ? ;
.bss:00000000002216CD                 db    ? ;
.bss:00000000002216CE                 db    ? ;
.bss:00000000002216CF                 db    ? ;
.bss:00000000002216D0                 db    ? ;
.bss:00000000002216D1                 db    ? ;
.bss:00000000002216D2                 db    ? ;
.bss:00000000002216D3                 db    ? ;
.bss:00000000002216D4                 db    ? ;
.bss:00000000002216D5                 db    ? ;
.bss:00000000002216D6                 db    ? ;
.bss:00000000002216D7                 db    ? ;
.bss:00000000002216D8                 db    ? ;
.bss:00000000002216D9                 db    ? ;
.bss:00000000002216DA                 db    ? ;
.bss:00000000002216DB                 db    ? ;
.bss:00000000002216DC                 db    ? ;
.bss:00000000002216DD                 db    ? ;
.bss:00000000002216DE                 db    ? ;
.bss:00000000002216DF                 db    ? ;
.bss:00000000002216E0                 db    ? ;
.bss:00000000002216E1                 db    ? ;
.bss:00000000002216E2                 db    ? ;
.bss:00000000002216E3                 db    ? ;
.bss:00000000002216E4                 db    ? ;
.bss:00000000002216E5                 db    ? ;
.bss:00000000002216E6                 db    ? ;
.bss:00000000002216E7                 db    ? ;
.bss:00000000002216E8                 db    ? ;
.bss:00000000002216E9                 db    ? ;
.bss:00000000002216EA                 db    ? ;
.bss:00000000002216EB                 db    ? ;
.bss:00000000002216EC                 db    ? ;
.bss:00000000002216ED                 db    ? ;
.bss:00000000002216EE                 db    ? ;
.bss:00000000002216EF                 db    ? ;
.bss:00000000002216F0                 db    ? ;
.bss:00000000002216F1                 db    ? ;
.bss:00000000002216F2                 db    ? ;
.bss:00000000002216F3                 db    ? ;
.bss:00000000002216F4                 db    ? ;
.bss:00000000002216F5                 db    ? ;
.bss:00000000002216F6                 db    ? ;
.bss:00000000002216F7                 db    ? ;
.bss:00000000002216F8                 db    ? ;
.bss:00000000002216F9                 db    ? ;
.bss:00000000002216FA                 db    ? ;
.bss:00000000002216FB                 db    ? ;
.bss:00000000002216FC                 db    ? ;
.bss:00000000002216FD                 db    ? ;
.bss:00000000002216FE                 db    ? ;
.bss:00000000002216FF                 db    ? ;
.bss:0000000000221700                 db    ? ;
.bss:0000000000221701                 db    ? ;
.bss:0000000000221702                 db    ? ;
.bss:0000000000221703                 db    ? ;
.bss:0000000000221704                 db    ? ;
.bss:0000000000221705                 db    ? ;
.bss:0000000000221706                 db    ? ;
.bss:0000000000221707                 db    ? ;
.bss:0000000000221708                 db    ? ;
.bss:0000000000221709                 db    ? ;
.bss:000000000022170A                 db    ? ;
.bss:000000000022170B                 db    ? ;
.bss:000000000022170C                 db    ? ;
.bss:000000000022170D                 db    ? ;
.bss:000000000022170E                 db    ? ;
.bss:000000000022170F                 db    ? ;
.bss:0000000000221710                 db    ? ;
.bss:0000000000221711                 db    ? ;
.bss:0000000000221712                 db    ? ;
.bss:0000000000221713                 db    ? ;
.bss:0000000000221714                 db    ? ;
.bss:0000000000221715                 db    ? ;
.bss:0000000000221716                 db    ? ;
.bss:0000000000221717                 db    ? ;
.bss:0000000000221718                 db    ? ;
.bss:0000000000221719                 db    ? ;
.bss:000000000022171A                 db    ? ;
.bss:000000000022171B                 db    ? ;
.bss:000000000022171C                 db    ? ;
.bss:000000000022171D                 db    ? ;
.bss:000000000022171E                 db    ? ;
.bss:000000000022171F                 db    ? ;
.bss:0000000000221720 context_regex   dq ?                    ; DATA XREF: main+336↑w
.bss:0000000000221720                                         ; main:loc_26FB↑r ...
.bss:0000000000221728 unk_221728      db    ? ;               ; DATA XREF: main+786↑o
.bss:0000000000221729                 db    ? ;
.bss:000000000022172A                 db    ? ;
.bss:000000000022172B                 db    ? ;
.bss:000000000022172C                 db    ? ;
.bss:000000000022172D                 db    ? ;
.bss:000000000022172E                 db    ? ;
.bss:000000000022172F                 db    ? ;
.bss:0000000000221730                 db    ? ;
.bss:0000000000221731                 db    ? ;
.bss:0000000000221732                 db    ? ;
.bss:0000000000221733                 db    ? ;
.bss:0000000000221734                 db    ? ;
.bss:0000000000221735                 db    ? ;
.bss:0000000000221736                 db    ? ;
.bss:0000000000221737                 db    ? ;
.bss:0000000000221738                 db    ? ;
.bss:0000000000221739                 db    ? ;
.bss:000000000022173A                 db    ? ;
.bss:000000000022173B                 db    ? ;
.bss:000000000022173C                 db    ? ;
.bss:000000000022173D                 db    ? ;
.bss:000000000022173E                 db    ? ;
.bss:000000000022173F                 db    ? ;
.bss:0000000000221740                 db    ? ;
.bss:0000000000221741                 db    ? ;
.bss:0000000000221742                 db    ? ;
.bss:0000000000221743                 db    ? ;
.bss:0000000000221744                 db    ? ;
.bss:0000000000221745                 db    ? ;
.bss:0000000000221746                 db    ? ;
.bss:0000000000221747                 db    ? ;
.bss:0000000000221748                 db    ? ;
.bss:0000000000221749                 db    ? ;
.bss:000000000022174A                 db    ? ;
.bss:000000000022174B                 db    ? ;
.bss:000000000022174C                 db    ? ;
.bss:000000000022174D                 db    ? ;
.bss:000000000022174E                 db    ? ;
.bss:000000000022174F                 db    ? ;
.bss:0000000000221750                 db    ? ;
.bss:0000000000221751                 db    ? ;
.bss:0000000000221752                 db    ? ;
.bss:0000000000221753                 db    ? ;
.bss:0000000000221754                 db    ? ;
.bss:0000000000221755                 db    ? ;
.bss:0000000000221756                 db    ? ;
.bss:0000000000221757                 db    ? ;
.bss:0000000000221758                 db    ? ;
.bss:0000000000221759                 db    ? ;
.bss:000000000022175A                 db    ? ;
.bss:000000000022175B                 db    ? ;
.bss:000000000022175C                 db    ? ;
.bss:000000000022175D                 db    ? ;
.bss:000000000022175E                 db    ? ;
.bss:000000000022175F                 db    ? ;
.bss:0000000000221760                 db    ? ;
.bss:0000000000221761                 db    ? ;
.bss:0000000000221762                 db    ? ;
.bss:0000000000221763                 db    ? ;
.bss:0000000000221764                 db    ? ;
.bss:0000000000221765                 db    ? ;
.bss:0000000000221766                 db    ? ;
.bss:0000000000221767                 db    ? ;
.bss:0000000000221768                 db    ? ;
.bss:0000000000221769                 db    ? ;
.bss:000000000022176A                 db    ? ;
.bss:000000000022176B                 db    ? ;
.bss:000000000022176C                 db    ? ;
.bss:000000000022176D                 db    ? ;
.bss:000000000022176E                 db    ? ;
.bss:000000000022176F                 db    ? ;
.bss:0000000000221770                 db    ? ;
.bss:0000000000221771                 db    ? ;
.bss:0000000000221772                 db    ? ;
.bss:0000000000221773                 db    ? ;
.bss:0000000000221774                 db    ? ;
.bss:0000000000221775                 db    ? ;
.bss:0000000000221776                 db    ? ;
.bss:0000000000221777                 db    ? ;
.bss:0000000000221778                 db    ? ;
.bss:0000000000221779                 db    ? ;
.bss:000000000022177A                 db    ? ;
.bss:000000000022177B                 db    ? ;
.bss:000000000022177C                 db    ? ;
.bss:000000000022177D                 db    ? ;
.bss:000000000022177E                 db    ? ;
.bss:000000000022177F                 db    ? ;
.bss:0000000000221780                 db    ? ;
.bss:0000000000221781                 db    ? ;
.bss:0000000000221782                 db    ? ;
.bss:0000000000221783                 db    ? ;
.bss:0000000000221784                 db    ? ;
.bss:0000000000221785                 db    ? ;
.bss:0000000000221786                 db    ? ;
.bss:0000000000221787                 db    ? ;
.bss:0000000000221788                 db    ? ;
.bss:0000000000221789                 db    ? ;
.bss:000000000022178A                 db    ? ;
.bss:000000000022178B                 db    ? ;
.bss:000000000022178C                 db    ? ;
.bss:000000000022178D                 db    ? ;
.bss:000000000022178E                 db    ? ;
.bss:000000000022178F                 db    ? ;
.bss:0000000000221790                 db    ? ;
.bss:0000000000221791                 db    ? ;
.bss:0000000000221792                 db    ? ;
.bss:0000000000221793                 db    ? ;
.bss:0000000000221794                 db    ? ;
.bss:0000000000221795                 db    ? ;
.bss:0000000000221796                 db    ? ;
.bss:0000000000221797                 db    ? ;
.bss:0000000000221798                 db    ? ;
.bss:0000000000221799                 db    ? ;
.bss:000000000022179A                 db    ? ;
.bss:000000000022179B                 db    ? ;
.bss:000000000022179C                 db    ? ;
.bss:000000000022179D                 db    ? ;
.bss:000000000022179E                 db    ? ;
.bss:000000000022179F                 db    ? ;
.bss:00000000002217A0                 db    ? ;
.bss:00000000002217A1                 db    ? ;
.bss:00000000002217A2                 db    ? ;
.bss:00000000002217A3                 db    ? ;
.bss:00000000002217A4                 db    ? ;
.bss:00000000002217A5                 db    ? ;
.bss:00000000002217A6                 db    ? ;
.bss:00000000002217A7                 db    ? ;
.bss:00000000002217A8                 db    ? ;
.bss:00000000002217A9                 db    ? ;
.bss:00000000002217AA                 db    ? ;
.bss:00000000002217AB                 db    ? ;
.bss:00000000002217AC                 db    ? ;
.bss:00000000002217AD                 db    ? ;
.bss:00000000002217AE                 db    ? ;
.bss:00000000002217AF                 db    ? ;
.bss:00000000002217B0                 db    ? ;
.bss:00000000002217B1                 db    ? ;
.bss:00000000002217B2                 db    ? ;
.bss:00000000002217B3                 db    ? ;
.bss:00000000002217B4                 db    ? ;
.bss:00000000002217B5                 db    ? ;
.bss:00000000002217B6                 db    ? ;
.bss:00000000002217B7                 db    ? ;
.bss:00000000002217B8                 db    ? ;
.bss:00000000002217B9                 db    ? ;
.bss:00000000002217BA                 db    ? ;
.bss:00000000002217BB                 db    ? ;
.bss:00000000002217BC                 db    ? ;
.bss:00000000002217BD                 db    ? ;
.bss:00000000002217BE                 db    ? ;
.bss:00000000002217BF                 db    ? ;
.bss:00000000002217C0                 db    ? ;
.bss:00000000002217C1                 db    ? ;
.bss:00000000002217C2                 db    ? ;
.bss:00000000002217C3                 db    ? ;
.bss:00000000002217C4                 db    ? ;
.bss:00000000002217C5                 db    ? ;
.bss:00000000002217C6                 db    ? ;
.bss:00000000002217C7                 db    ? ;
.bss:00000000002217C8                 db    ? ;
.bss:00000000002217C9                 db    ? ;
.bss:00000000002217CA                 db    ? ;
.bss:00000000002217CB                 db    ? ;
.bss:00000000002217CC                 db    ? ;
.bss:00000000002217CD                 db    ? ;
.bss:00000000002217CE                 db    ? ;
.bss:00000000002217CF                 db    ? ;
.bss:00000000002217D0                 db    ? ;
.bss:00000000002217D1                 db    ? ;
.bss:00000000002217D2                 db    ? ;
.bss:00000000002217D3                 db    ? ;
.bss:00000000002217D4                 db    ? ;
.bss:00000000002217D5                 db    ? ;
.bss:00000000002217D6                 db    ? ;
.bss:00000000002217D7                 db    ? ;
.bss:00000000002217D8                 db    ? ;
.bss:00000000002217D9                 db    ? ;
.bss:00000000002217DA                 db    ? ;
.bss:00000000002217DB                 db    ? ;
.bss:00000000002217DC                 db    ? ;
.bss:00000000002217DD                 db    ? ;
.bss:00000000002217DE                 db    ? ;
.bss:00000000002217DF                 db    ? ;
.bss:00000000002217E0                 db    ? ;
.bss:00000000002217E1                 db    ? ;
.bss:00000000002217E2                 db    ? ;
.bss:00000000002217E3                 db    ? ;
.bss:00000000002217E4                 db    ? ;
.bss:00000000002217E5                 db    ? ;
.bss:00000000002217E6                 db    ? ;
.bss:00000000002217E7                 db    ? ;
.bss:00000000002217E8                 db    ? ;
.bss:00000000002217E9                 db    ? ;
.bss:00000000002217EA                 db    ? ;
.bss:00000000002217EB                 db    ? ;
.bss:00000000002217EC                 db    ? ;
.bss:00000000002217ED                 db    ? ;
.bss:00000000002217EE                 db    ? ;
.bss:00000000002217EF                 db    ? ;
.bss:00000000002217F0                 db    ? ;
.bss:00000000002217F1                 db    ? ;
.bss:00000000002217F2                 db    ? ;
.bss:00000000002217F3                 db    ? ;
.bss:00000000002217F4                 db    ? ;
.bss:00000000002217F5                 db    ? ;
.bss:00000000002217F6                 db    ? ;
.bss:00000000002217F7                 db    ? ;
.bss:00000000002217F8                 db    ? ;
.bss:00000000002217F9                 db    ? ;
.bss:00000000002217FA                 db    ? ;
.bss:00000000002217FB                 db    ? ;
.bss:00000000002217FC                 db    ? ;
.bss:00000000002217FD                 db    ? ;
.bss:00000000002217FE                 db    ? ;
.bss:00000000002217FF                 db    ? ;
.bss:0000000000221800                 db    ? ;
.bss:0000000000221801                 db    ? ;
.bss:0000000000221802                 db    ? ;
.bss:0000000000221803                 db    ? ;
.bss:0000000000221804                 db    ? ;
.bss:0000000000221805                 db    ? ;
.bss:0000000000221806                 db    ? ;
.bss:0000000000221807                 db    ? ;
.bss:0000000000221808                 db    ? ;
.bss:0000000000221809                 db    ? ;
.bss:000000000022180A                 db    ? ;
.bss:000000000022180B                 db    ? ;
.bss:000000000022180C                 db    ? ;
.bss:000000000022180D                 db    ? ;
.bss:000000000022180E                 db    ? ;
.bss:000000000022180F                 db    ? ;
.bss:0000000000221810                 db    ? ;
.bss:0000000000221811                 db    ? ;
.bss:0000000000221812                 db    ? ;
.bss:0000000000221813                 db    ? ;
.bss:0000000000221814                 db    ? ;
.bss:0000000000221815                 db    ? ;
.bss:0000000000221816                 db    ? ;
.bss:0000000000221817                 db    ? ;
.bss:0000000000221818                 db    ? ;
.bss:0000000000221819                 db    ? ;
.bss:000000000022181A                 db    ? ;
.bss:000000000022181B                 db    ? ;
.bss:000000000022181C                 db    ? ;
.bss:000000000022181D                 db    ? ;
.bss:000000000022181E                 db    ? ;
.bss:000000000022181F                 db    ? ;
.bss:0000000000221820                 db    ? ;
.bss:0000000000221821                 db    ? ;
.bss:0000000000221822                 db    ? ;
.bss:0000000000221823                 db    ? ;
.bss:0000000000221824                 db    ? ;
.bss:0000000000221825                 db    ? ;
.bss:0000000000221826                 db    ? ;
.bss:0000000000221827                 db    ? ;
.bss:0000000000221828                 db    ? ;
.bss:0000000000221829                 db    ? ;
.bss:000000000022182A                 db    ? ;
.bss:000000000022182B                 db    ? ;
.bss:000000000022182C                 db    ? ;
.bss:000000000022182D                 db    ? ;
.bss:000000000022182E                 db    ? ;
.bss:000000000022182F                 db    ? ;
.bss:0000000000221830                 db    ? ;
.bss:0000000000221831                 db    ? ;
.bss:0000000000221832                 db    ? ;
.bss:0000000000221833                 db    ? ;
.bss:0000000000221834                 db    ? ;
.bss:0000000000221835                 db    ? ;
.bss:0000000000221836                 db    ? ;
.bss:0000000000221837                 db    ? ;
.bss:0000000000221838                 db    ? ;
.bss:0000000000221839                 db    ? ;
.bss:000000000022183A                 db    ? ;
.bss:000000000022183B                 db    ? ;
.bss:000000000022183C                 db    ? ;
.bss:000000000022183D                 db    ? ;
.bss:000000000022183E                 db    ? ;
.bss:000000000022183F                 db    ? ;
.bss:0000000000221840                 db    ? ;
.bss:0000000000221841                 db    ? ;
.bss:0000000000221842                 db    ? ;
.bss:0000000000221843                 db    ? ;
.bss:0000000000221844                 db    ? ;
.bss:0000000000221845                 db    ? ;
.bss:0000000000221846                 db    ? ;
.bss:0000000000221847                 db    ? ;
.bss:0000000000221848                 db    ? ;
.bss:0000000000221849                 db    ? ;
.bss:000000000022184A                 db    ? ;
.bss:000000000022184B                 db    ? ;
.bss:000000000022184C                 db    ? ;
.bss:000000000022184D                 db    ? ;
.bss:000000000022184E                 db    ? ;
.bss:000000000022184F                 db    ? ;
.bss:0000000000221850                 db    ? ;
.bss:0000000000221851                 db    ? ;
.bss:0000000000221852                 db    ? ;
.bss:0000000000221853                 db    ? ;
.bss:0000000000221854                 db    ? ;
.bss:0000000000221855                 db    ? ;
.bss:0000000000221856                 db    ? ;
.bss:0000000000221857                 db    ? ;
.bss:0000000000221858                 db    ? ;
.bss:0000000000221859                 db    ? ;
.bss:000000000022185A                 db    ? ;
.bss:000000000022185B                 db    ? ;
.bss:000000000022185C                 db    ? ;
.bss:000000000022185D                 db    ? ;
.bss:000000000022185E                 db    ? ;
.bss:000000000022185F                 db    ? ;
.bss:0000000000221860                 db    ? ;
.bss:0000000000221861                 db    ? ;
.bss:0000000000221862                 db    ? ;
.bss:0000000000221863                 db    ? ;
.bss:0000000000221864                 db    ? ;
.bss:0000000000221865                 db    ? ;
.bss:0000000000221866                 db    ? ;
.bss:0000000000221867                 db    ? ;
.bss:0000000000221868 ignore_file     dq ?                    ; DATA XREF: main+E1↑w
.bss:0000000000221868                                         ; main:loc_27A4↑r ...
.bss:0000000000221870 only_file       dq ?                    ; DATA XREF: main+1F4↑w
.bss:0000000000221870                                         ; main:loc_27CA↑r ...
.bss:0000000000221878 break_file      dq ?                    ; DATA XREF: main+13B↑w
.bss:0000000000221878                                         ; main+59E↑r ...
.bss:0000000000221880 ignore_case     db ?                    ; DATA XREF: main+21E↑w
.bss:0000000000221880                                         ; main:loc_26C3↑r ...
.bss:0000000000221881                 align 4
.bss:0000000000221884 output_format   dd ?                    ; DATA XREF: main+10D↑w
.bss:0000000000221884                                         ; main+18F↑w ...
.bss:0000000000221888 right_reference db ?                    ; DATA XREF: main+24B↑w
.bss:0000000000221888                                         ; main:loc_2BF3↑r ...
.bss:0000000000221889 input_reference db ?                    ; DATA XREF: main:loc_24AE↑w
.bss:0000000000221889                                         ; main+6DE↑r ...
.bss:000000000022188A auto_reference  db ?                    ; DATA XREF: main+260↑w
.bss:000000000022188A                                         ; main+91D↑r ...
.bss:000000000022188B                 align 10h
.bss:0000000000221890 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000221890                                         ; close_stdout+1B↑r
.bss:0000000000221891                 align 8
.bss:0000000000221898 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000221898                                         ; close_stdout+56↑r
.bss:00000000002218A0                 public program_name
.bss:00000000002218A0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002218A0                                         ; set_program_name:loc_5FFD↑w
.bss:00000000002218A8                 align 20h
.bss:00000000002218C0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002218C0                                         ; quotearg_free+46↑o ...
.bss:00000000002218C1                 db    ? ;
.bss:00000000002218C2                 db    ? ;
.bss:00000000002218C3                 db    ? ;
.bss:00000000002218C4                 db    ? ;
.bss:00000000002218C5                 db    ? ;
.bss:00000000002218C6                 db    ? ;
.bss:00000000002218C7                 db    ? ;
.bss:00000000002218C8                 db    ? ;
.bss:00000000002218C9                 db    ? ;
.bss:00000000002218CA                 db    ? ;
.bss:00000000002218CB                 db    ? ;
.bss:00000000002218CC                 db    ? ;
.bss:00000000002218CD                 db    ? ;
.bss:00000000002218CE                 db    ? ;
.bss:00000000002218CF                 db    ? ;
.bss:00000000002218D0                 db    ? ;
.bss:00000000002218D1                 db    ? ;
.bss:00000000002218D2                 db    ? ;
.bss:00000000002218D3                 db    ? ;
.bss:00000000002218D4                 db    ? ;
.bss:00000000002218D5                 db    ? ;
.bss:00000000002218D6                 db    ? ;
.bss:00000000002218D7                 db    ? ;
.bss:00000000002218D8                 db    ? ;
.bss:00000000002218D9                 db    ? ;
.bss:00000000002218DA                 db    ? ;
.bss:00000000002218DB                 db    ? ;
.bss:00000000002218DC                 db    ? ;
.bss:00000000002218DD                 db    ? ;
.bss:00000000002218DE                 db    ? ;
.bss:00000000002218DF                 db    ? ;
.bss:00000000002218E0                 db    ? ;
.bss:00000000002218E1                 db    ? ;
.bss:00000000002218E2                 db    ? ;
.bss:00000000002218E3                 db    ? ;
.bss:00000000002218E4                 db    ? ;
.bss:00000000002218E5                 db    ? ;
.bss:00000000002218E6                 db    ? ;
.bss:00000000002218E7                 db    ? ;
.bss:00000000002218E8                 db    ? ;
.bss:00000000002218E9                 db    ? ;
.bss:00000000002218EA                 db    ? ;
.bss:00000000002218EB                 db    ? ;
.bss:00000000002218EC                 db    ? ;
.bss:00000000002218ED                 db    ? ;
.bss:00000000002218EE                 db    ? ;
.bss:00000000002218EF                 db    ? ;
.bss:00000000002218F0                 db    ? ;
.bss:00000000002218F1                 db    ? ;
.bss:00000000002218F2                 db    ? ;
.bss:00000000002218F3                 db    ? ;
.bss:00000000002218F4                 db    ? ;
.bss:00000000002218F5                 db    ? ;
.bss:00000000002218F6                 db    ? ;
.bss:00000000002218F7                 db    ? ;
.bss:00000000002218F8                 db    ? ;
.bss:00000000002218F9                 db    ? ;
.bss:00000000002218FA                 db    ? ;
.bss:00000000002218FB                 db    ? ;
.bss:00000000002218FC                 db    ? ;
.bss:00000000002218FD                 db    ? ;
.bss:00000000002218FE                 db    ? ;
.bss:00000000002218FF                 db    ? ;
.bss:0000000000221900                 db    ? ;
.bss:0000000000221901                 db    ? ;
.bss:0000000000221902                 db    ? ;
.bss:0000000000221903                 db    ? ;
.bss:0000000000221904                 db    ? ;
.bss:0000000000221905                 db    ? ;
.bss:0000000000221906                 db    ? ;
.bss:0000000000221907                 db    ? ;
.bss:0000000000221908                 db    ? ;
.bss:0000000000221909                 db    ? ;
.bss:000000000022190A                 db    ? ;
.bss:000000000022190B                 db    ? ;
.bss:000000000022190C                 db    ? ;
.bss:000000000022190D                 db    ? ;
.bss:000000000022190E                 db    ? ;
.bss:000000000022190F                 db    ? ;
.bss:0000000000221910                 db    ? ;
.bss:0000000000221911                 db    ? ;
.bss:0000000000221912                 db    ? ;
.bss:0000000000221913                 db    ? ;
.bss:0000000000221914                 db    ? ;
.bss:0000000000221915                 db    ? ;
.bss:0000000000221916                 db    ? ;
.bss:0000000000221917                 db    ? ;
.bss:0000000000221918                 db    ? ;
.bss:0000000000221919                 db    ? ;
.bss:000000000022191A                 db    ? ;
.bss:000000000022191B                 db    ? ;
.bss:000000000022191C                 db    ? ;
.bss:000000000022191D                 db    ? ;
.bss:000000000022191E                 db    ? ;
.bss:000000000022191F                 db    ? ;
.bss:0000000000221920                 db    ? ;
.bss:0000000000221921                 db    ? ;
.bss:0000000000221922                 db    ? ;
.bss:0000000000221923                 db    ? ;
.bss:0000000000221924                 db    ? ;
.bss:0000000000221925                 db    ? ;
.bss:0000000000221926                 db    ? ;
.bss:0000000000221927                 db    ? ;
.bss:0000000000221928                 db    ? ;
.bss:0000000000221929                 db    ? ;
.bss:000000000022192A                 db    ? ;
.bss:000000000022192B                 db    ? ;
.bss:000000000022192C                 db    ? ;
.bss:000000000022192D                 db    ? ;
.bss:000000000022192E                 db    ? ;
.bss:000000000022192F                 db    ? ;
.bss:0000000000221930                 db    ? ;
.bss:0000000000221931                 db    ? ;
.bss:0000000000221932                 db    ? ;
.bss:0000000000221933                 db    ? ;
.bss:0000000000221934                 db    ? ;
.bss:0000000000221935                 db    ? ;
.bss:0000000000221936                 db    ? ;
.bss:0000000000221937                 db    ? ;
.bss:0000000000221938                 db    ? ;
.bss:0000000000221939                 db    ? ;
.bss:000000000022193A                 db    ? ;
.bss:000000000022193B                 db    ? ;
.bss:000000000022193C                 db    ? ;
.bss:000000000022193D                 db    ? ;
.bss:000000000022193E                 db    ? ;
.bss:000000000022193F                 db    ? ;
.bss:0000000000221940                 db    ? ;
.bss:0000000000221941                 db    ? ;
.bss:0000000000221942                 db    ? ;
.bss:0000000000221943                 db    ? ;
.bss:0000000000221944                 db    ? ;
.bss:0000000000221945                 db    ? ;
.bss:0000000000221946                 db    ? ;
.bss:0000000000221947                 db    ? ;
.bss:0000000000221948                 db    ? ;
.bss:0000000000221949                 db    ? ;
.bss:000000000022194A                 db    ? ;
.bss:000000000022194B                 db    ? ;
.bss:000000000022194C                 db    ? ;
.bss:000000000022194D                 db    ? ;
.bss:000000000022194E                 db    ? ;
.bss:000000000022194F                 db    ? ;
.bss:0000000000221950                 db    ? ;
.bss:0000000000221951                 db    ? ;
.bss:0000000000221952                 db    ? ;
.bss:0000000000221953                 db    ? ;
.bss:0000000000221954                 db    ? ;
.bss:0000000000221955                 db    ? ;
.bss:0000000000221956                 db    ? ;
.bss:0000000000221957                 db    ? ;
.bss:0000000000221958                 db    ? ;
.bss:0000000000221959                 db    ? ;
.bss:000000000022195A                 db    ? ;
.bss:000000000022195B                 db    ? ;
.bss:000000000022195C                 db    ? ;
.bss:000000000022195D                 db    ? ;
.bss:000000000022195E                 db    ? ;
.bss:000000000022195F                 db    ? ;
.bss:0000000000221960                 db    ? ;
.bss:0000000000221961                 db    ? ;
.bss:0000000000221962                 db    ? ;
.bss:0000000000221963                 db    ? ;
.bss:0000000000221964                 db    ? ;
.bss:0000000000221965                 db    ? ;
.bss:0000000000221966                 db    ? ;
.bss:0000000000221967                 db    ? ;
.bss:0000000000221968                 db    ? ;
.bss:0000000000221969                 db    ? ;
.bss:000000000022196A                 db    ? ;
.bss:000000000022196B                 db    ? ;
.bss:000000000022196C                 db    ? ;
.bss:000000000022196D                 db    ? ;
.bss:000000000022196E                 db    ? ;
.bss:000000000022196F                 db    ? ;
.bss:0000000000221970                 db    ? ;
.bss:0000000000221971                 db    ? ;
.bss:0000000000221972                 db    ? ;
.bss:0000000000221973                 db    ? ;
.bss:0000000000221974                 db    ? ;
.bss:0000000000221975                 db    ? ;
.bss:0000000000221976                 db    ? ;
.bss:0000000000221977                 db    ? ;
.bss:0000000000221978                 db    ? ;
.bss:0000000000221979                 db    ? ;
.bss:000000000022197A                 db    ? ;
.bss:000000000022197B                 db    ? ;
.bss:000000000022197C                 db    ? ;
.bss:000000000022197D                 db    ? ;
.bss:000000000022197E                 db    ? ;
.bss:000000000022197F                 db    ? ;
.bss:0000000000221980                 db    ? ;
.bss:0000000000221981                 db    ? ;
.bss:0000000000221982                 db    ? ;
.bss:0000000000221983                 db    ? ;
.bss:0000000000221984                 db    ? ;
.bss:0000000000221985                 db    ? ;
.bss:0000000000221986                 db    ? ;
.bss:0000000000221987                 db    ? ;
.bss:0000000000221988                 db    ? ;
.bss:0000000000221989                 db    ? ;
.bss:000000000022198A                 db    ? ;
.bss:000000000022198B                 db    ? ;
.bss:000000000022198C                 db    ? ;
.bss:000000000022198D                 db    ? ;
.bss:000000000022198E                 db    ? ;
.bss:000000000022198F                 db    ? ;
.bss:0000000000221990                 db    ? ;
.bss:0000000000221991                 db    ? ;
.bss:0000000000221992                 db    ? ;
.bss:0000000000221993                 db    ? ;
.bss:0000000000221994                 db    ? ;
.bss:0000000000221995                 db    ? ;
.bss:0000000000221996                 db    ? ;
.bss:0000000000221997                 db    ? ;
.bss:0000000000221998                 db    ? ;
.bss:0000000000221999                 db    ? ;
.bss:000000000022199A                 db    ? ;
.bss:000000000022199B                 db    ? ;
.bss:000000000022199C                 db    ? ;
.bss:000000000022199D                 db    ? ;
.bss:000000000022199E                 db    ? ;
.bss:000000000022199F                 db    ? ;
.bss:00000000002219A0                 db    ? ;
.bss:00000000002219A1                 db    ? ;
.bss:00000000002219A2                 db    ? ;
.bss:00000000002219A3                 db    ? ;
.bss:00000000002219A4                 db    ? ;
.bss:00000000002219A5                 db    ? ;
.bss:00000000002219A6                 db    ? ;
.bss:00000000002219A7                 db    ? ;
.bss:00000000002219A8                 db    ? ;
.bss:00000000002219A9                 db    ? ;
.bss:00000000002219AA                 db    ? ;
.bss:00000000002219AB                 db    ? ;
.bss:00000000002219AC                 db    ? ;
.bss:00000000002219AD                 db    ? ;
.bss:00000000002219AE                 db    ? ;
.bss:00000000002219AF                 db    ? ;
.bss:00000000002219B0                 db    ? ;
.bss:00000000002219B1                 db    ? ;
.bss:00000000002219B2                 db    ? ;
.bss:00000000002219B3                 db    ? ;
.bss:00000000002219B4                 db    ? ;
.bss:00000000002219B5                 db    ? ;
.bss:00000000002219B6                 db    ? ;
.bss:00000000002219B7                 db    ? ;
.bss:00000000002219B8                 db    ? ;
.bss:00000000002219B9                 db    ? ;
.bss:00000000002219BA                 db    ? ;
.bss:00000000002219BB                 db    ? ;
.bss:00000000002219BC                 db    ? ;
.bss:00000000002219BD                 db    ? ;
.bss:00000000002219BE                 db    ? ;
.bss:00000000002219BF                 db    ? ;
.bss:00000000002219C0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002219C0                                         ; get_quoting_style↑o ...
.bss:00000000002219D0 xmmword_2219D0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002219D0                                         ; quotearg_n_custom_mem+39↑r
.bss:00000000002219E0 xmmword_2219E0  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:00000000002219E0                                         ; quotearg_n_custom_mem+46↑r
.bss:00000000002219F0 qword_2219F0    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:00000000002219F0                                         ; quotearg_n_custom_mem+7↑r
.bss:00000000002219F8                 public rpl_re_syntax_options
.bss:00000000002219F8 rpl_re_syntax_options dq ?              ; DATA XREF: rpl_re_compile_pattern+4↑r
.bss:00000000002219F8                                         ; rpl_re_set_syntax↑r ...
.bss:00000000002219F8 _bss            ends
.bss:00000000002219F8
.prgend:0000000000221A00 ; ===========================================================================
.prgend:0000000000221A00
.prgend:0000000000221A00 ; Segment type: Zero-length
.prgend:0000000000221A00 _prgend         segment byte public '' use64
.prgend:0000000000221A00 _end            label byte
.prgend:0000000000221A00 _prgend         ends
.prgend:0000000000221A00
extern:0000000000221A08 ; ===========================================================================
extern:0000000000221A08
extern:0000000000221A08 ; Segment type: Externs
extern:0000000000221A08 ; extern
extern:0000000000221A08 ; const __int32_t **_ctype_toupper_loc(void)
extern:0000000000221A08                 extrn __ctype_toupper_loc:near
extern:0000000000221A08                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:0000000000221A08                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:0000000000221A10 ; void free(void *ptr)
extern:0000000000221A10                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000221A10                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000221A18 ; void __noreturn abort(void)
extern:0000000000221A18                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000221A18                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000221A20 ; int *_errno_location(void)
extern:0000000000221A20                 extrn __errno_location:near
extern:0000000000221A20                                         ; CODE XREF: ___errno_location↑j
extern:0000000000221A20                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000221A28 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000221A28                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000221A28                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000221A30 ; void __noreturn exit(int status)
extern:0000000000221A30                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000221A30                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000221A38 ; __off_t ftello(FILE *stream)
extern:0000000000221A38                 extrn ftello:near       ; CODE XREF: _ftello↑j
extern:0000000000221A38                                         ; DATA XREF: .got:ftello_ptr↑o
extern:0000000000221A40 ; size_t _fpending(FILE *fp)
extern:0000000000221A40                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000221A40                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000221A48 ; size_t iconv(iconv_t cd, char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft)
extern:0000000000221A48                 extrn iconv:near        ; CODE XREF: _iconv↑j
extern:0000000000221A48                                         ; DATA XREF: .got:iconv_ptr↑o
extern:0000000000221A50 ; int ferror(FILE *stream)
extern:0000000000221A50                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:0000000000221A50                                         ; DATA XREF: .got:ferror_ptr↑o
extern:0000000000221A58 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:0000000000221A58                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:0000000000221A58                                         ; DATA XREF: .got:qsort_ptr↑o
extern:0000000000221A60 ; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000221A60                 extrn fread:near        ; CODE XREF: _fread↑j
extern:0000000000221A60                                         ; DATA XREF: .got:fread_ptr↑o
extern:0000000000221A68 ; int iswcntrl(wint_t wc)
extern:0000000000221A68                 extrn iswcntrl:near     ; CODE XREF: _iswcntrl↑j
extern:0000000000221A68                                         ; DATA XREF: .got:iswcntrl_ptr↑o
extern:0000000000221A70 ; char *textdomain(const char *domainname)
extern:0000000000221A70                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000221A70                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000221A78 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000221A78                 extrn __strtol_internal:near
extern:0000000000221A78                                         ; CODE XREF: ___strtol_internal↑j
extern:0000000000221A78                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:0000000000221A80 ; int iswctype(wint_t wc, wctype_t desc)
extern:0000000000221A80                 extrn iswctype:near     ; CODE XREF: _iswctype↑j
extern:0000000000221A80                                         ; DATA XREF: .got:iswctype_ptr↑o
extern:0000000000221A88 ; int fclose(FILE *stream)
extern:0000000000221A88                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000221A88                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000221A90 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000221A90                 extrn bindtextdomain:near
extern:0000000000221A90                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000221A90                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000221A98 ; char *stpcpy(char *dest, const char *src)
extern:0000000000221A98                 extrn stpcpy:near       ; CODE XREF: _stpcpy↑j
extern:0000000000221A98                                         ; DATA XREF: .got:stpcpy_ptr↑o
extern:0000000000221AA0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000221AA0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000221AA0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000221AA8 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000221AA8                 extrn __ctype_get_mb_cur_max:near
extern:0000000000221AA8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000221AA8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000221AB0 ; size_t strlen(const char *s)
extern:0000000000221AB0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000221AB0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000221AB8                 extrn __stack_chk_fail:near
extern:0000000000221AB8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000221AB8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000221AC0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000221AC0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000221AC0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000221AC8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000221AC8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000221AC8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000221AD0 ; int dup2(int fd, int fd2)
extern:0000000000221AD0                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:0000000000221AD0                                         ; DATA XREF: .got:dup2_ptr↑o
extern:0000000000221AD8 ; char *strchr(const char *s, int c)
extern:0000000000221AD8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000221AD8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000221AE0 ; int _overflow(_IO_FILE *, int)
extern:0000000000221AE0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000221AE0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000221AE8 ; char *strrchr(const char *s, int c)
extern:0000000000221AE8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000221AE8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000221AF0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000221AF0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000221AF0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000221AF8 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000221AF8                 extrn __assert_fail:near
extern:0000000000221AF8                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000221AF8                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000221B00 ; void *memset(void *s, int c, size_t n)
extern:0000000000221B00                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000221B00                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000221B08 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
extern:0000000000221B08                 extrn freopen:near      ; CODE XREF: _freopen↑j
extern:0000000000221B08                                         ; DATA XREF: .got:freopen_ptr↑o
extern:0000000000221B10 ; size_t strnlen(const char *string, size_t maxlen)
extern:0000000000221B10                 extrn strnlen:near      ; CODE XREF: _strnlen↑j
extern:0000000000221B10                                         ; DATA XREF: .got:strnlen_ptr↑o
extern:0000000000221B18 ; int close(int fd)
extern:0000000000221B18                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000221B18                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000221B20 ; void *memchr(const void *s, int c, size_t n)
extern:0000000000221B20                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:0000000000221B20                                         ; DATA XREF: .got:memchr_ptr↑o
extern:0000000000221B28 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000221B28                 extrn __libc_start_main:near
extern:0000000000221B28                                         ; CODE XREF: start+24↑p
extern:0000000000221B28                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000221B30 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000221B30                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000221B30                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000221B38 ; wctype_t wctype(const char *property)
extern:0000000000221B38                 extrn wctype:near       ; CODE XREF: _wctype↑j
extern:0000000000221B38                                         ; DATA XREF: .got:wctype_ptr↑o
extern:0000000000221B40 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000221B40                 extrn fputs_unlocked:near
extern:0000000000221B40                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000221B40                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000221B48 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000221B48                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000221B48                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000221B50 ; int strcmp(const char *s1, const char *s2)
extern:0000000000221B50                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000221B50                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000221B58 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000221B58                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000221B58                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000221B60 ; int fileno(FILE *stream)
extern:0000000000221B60                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000221B60                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000221B68 ; int wcwidth(wchar_t c)
extern:0000000000221B68                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:0000000000221B68                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:0000000000221B70 ; int iswalnum(wint_t wc)
extern:0000000000221B70                 extrn iswalnum:near     ; CODE XREF: _iswalnum↑j
extern:0000000000221B70                                         ; DATA XREF: .got:iswalnum_ptr↑o
extern:0000000000221B78 ; void *malloc(size_t size)
extern:0000000000221B78                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000221B78                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000221B80 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
extern:0000000000221B80                 extrn wcrtomb:near      ; CODE XREF: _wcrtomb↑j
extern:0000000000221B80                                         ; DATA XREF: .got:wcrtomb_ptr↑o
extern:0000000000221B88 ; int fflush(FILE *stream)
extern:0000000000221B88                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000221B88                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000221B90 ; char *nl_langinfo(nl_item item)
extern:0000000000221B90                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000221B90                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000221B98 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000221B98                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000221B98                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000221BA0 ; int _freading(FILE *fp)
extern:0000000000221BA0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000221BA0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000221BA8 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000221BA8                 extrn fwrite_unlocked:near
extern:0000000000221BA8                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000221BA8                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000221BB0 ; void *realloc(void *ptr, size_t size)
extern:0000000000221BB0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000221BB0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000221BB8 ; char *setlocale(int category, const char *locale)
extern:0000000000221BB8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000221BB8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000221BC0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000221BC0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000221BC8 ; int iconv_close(iconv_t cd)
extern:0000000000221BC8                 extrn iconv_close:near  ; CODE XREF: _iconv_close↑j
extern:0000000000221BC8                                         ; DATA XREF: .got:iconv_close_ptr↑o
extern:0000000000221BD0 ; int iswspace(wint_t wc)
extern:0000000000221BD0                 extrn iswspace:near     ; CODE XREF: _iswspace↑j
extern:0000000000221BD0                                         ; DATA XREF: .got:iswspace_ptr↑o
extern:0000000000221BD8 ; wint_t btowc(int c)
extern:0000000000221BD8                 extrn btowc:near        ; CODE XREF: _btowc↑j
extern:0000000000221BD8                                         ; DATA XREF: .got:btowc_ptr↑o
extern:0000000000221BE0 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000221BE0                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000221BE0                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000221BE8 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000221BE8                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000221BE8                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000221BF0 ; int open(const char *file, int oflag, ...)
extern:0000000000221BF0                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000221BF0                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000221BF8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000221BF8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000221BF8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000221C00 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000221C00                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000221C00                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000221C08 ; wint_t towlower(wint_t wc)
extern:0000000000221C08                 extrn towlower:near     ; CODE XREF: _towlower↑j
extern:0000000000221C08                                         ; DATA XREF: .got:towlower_ptr↑o
extern:0000000000221C10 ; wint_t towupper(wint_t wc)
extern:0000000000221C10                 extrn towupper:near     ; CODE XREF: _towupper↑j
extern:0000000000221C10                                         ; DATA XREF: .got:towupper_ptr↑o
extern:0000000000221C18 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000221C18                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000221C18                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000221C20 ; void __noreturn exit(int status)
extern:0000000000221C20                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000221C20                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000221C28 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000221C28                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000221C28                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000221C30                 extrn __fprintf_chk:near
extern:0000000000221C30                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000221C30                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000221C38 ; char *strdup(const char *s)
extern:0000000000221C38                 extrn strdup:near       ; CODE XREF: _strdup↑j
extern:0000000000221C38                                         ; DATA XREF: .got:strdup_ptr↑o
extern:0000000000221C40 ; int mbsinit(const mbstate_t *ps)
extern:0000000000221C40                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000221C40                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000221C48 ; int iswprint(wint_t wc)
extern:0000000000221C48                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000221C48                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000221C50 ; int __fastcall __cxa_finalize(void *)
extern:0000000000221C50                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000221C50                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000221C50                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000221C58 ; const __int32_t **_ctype_tolower_loc(void)
extern:0000000000221C58                 extrn __ctype_tolower_loc:near
extern:0000000000221C58                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:0000000000221C58                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:0000000000221C60 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000221C60                 extrn __ctype_b_loc:near
extern:0000000000221C60                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000221C60                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000221C68 ; iconv_t iconv_open(const char *tocode, const char *fromcode)
extern:0000000000221C68                 extrn iconv_open:near   ; CODE XREF: _iconv_open↑j
extern:0000000000221C68                                         ; DATA XREF: .got:iconv_open_ptr↑o
extern:0000000000221C70                 extrn __sprintf_chk:near
extern:0000000000221C70                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000221C70                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:0000000000221C78                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000221C78                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000221C80                 extrn __gmon_start__:near ; weak
extern:0000000000221C80                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000221C80                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000221C88                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000221C88                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000221C88
extern:0000000000221C88
extern:0000000000221C88                 end start
