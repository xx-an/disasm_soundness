LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : B493B014CA8F7414076D6BE46FE5D08C62BBE29EE126684692AF0970AEC47589
LOAD:0000000000000000 ; Input MD5    : DF05D0BD3664C9F7F7D85CA3C657606B
LOAD:0000000000000000 ; Input CRC32  : 6622913F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/timeout
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'librt.so.1'
LOAD:0000000000000000 ; Needed Library 'libpthread.so.0'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'timeout.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'operand2sig.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'cl-strtod.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dtotimespec.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrtod.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'sig2str.c'
LOAD:0000000000000000 ; Source File : 'c-strtod.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2AAB0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8130h                ; Size in file image
LOAD:00000000000000D8                 dq 8130h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8A30h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208A30h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 814h                 ; Size in file image
LOAD:0000000000000110                 dq 0A10h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8B98h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208B98h              ; Physical address
LOAD:0000000000000140                 dq 210h                 ; Size in file image
LOAD:0000000000000148                 dq 210h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 71A0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 71A0h                ; Physical address
LOAD:00000000000001B0                 dq 29Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 29Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8A30h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208A30h              ; Physical address
LOAD:0000000000000220                 dq 5D0h                 ; Size in file image
LOAD:0000000000000228                 dq 5D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 9Fh, 7Ch, 0D8h, 99h, 1Eh, 77h, 4Eh, 0E4h, 2Fh, 49h ; Desc
LOAD:0000000000000284                 db 0EAh, 0B3h, 6Fh, 0C1h, 49h, 7Bh, 0E8h, 15h, 0AEh, 3Ch
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 49h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 49h, 4Ah, 4Fh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aSigprocmask - offset byte_A78, 12h, 0, 0, \ ; "sigprocmask"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aSnprintfChk - offset byte_A78, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aRaise - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "raise"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aAbort - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000358                            0>
LOAD:0000000000000370                 Elf64_Sym <offset aErrnoLocation - offset byte_A78, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_A78, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_A78, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aStrcpy - offset byte_A78, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFpending - offset byte_A78, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aSigaction - offset byte_A78, 12h, 0, 0, \ ; "sigaction"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrtod - offset byte_A78, 12h, 0, 0, \ ; "strtod"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_A78, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrtodL - offset byte_A78, 12h, 0, 0, \ ; "strtod_l"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aFclose - offset byte_A78, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aBindtextdomain - offset byte_A78, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aDcgettext - offset byte_A78, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_A78, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrlen - offset byte_A78, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStackChkFail - offset byte_A78, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aGetoptLong - offset byte_A78, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMbrtowc - offset byte_A78, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aStrchr - offset byte_A78, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aNewlocale - offset byte_A78, 12h, 0, 0, \ ; "newlocale"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrrchr - offset byte_A78, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLseek - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000568                            0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemset - offset byte_A78, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aAlarm - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "alarm"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aLibcStartMain - offset byte_A78, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemcmp - offset byte_A78, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFputsUnlocked - offset byte_A78, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aCalloc - offset byte_A78, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aStrcmp - offset byte_A78, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aSignal - offset byte_A78, 12h, 0, 0, \ ; "signal"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aSigemptyset - offset byte_A78, 12h, 0, 0, \ ; "sigemptyset"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aGmonStart - offset byte_A78, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aStrtol - offset byte_A78, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcpy - offset byte_A78, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aPrctl - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "prctl"
LOAD:00000000000006A0                            0>
LOAD:00000000000006B8                 Elf64_Sym <offset aKill - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "kill"
LOAD:00000000000006B8                            0>
LOAD:00000000000006D0                 Elf64_Sym <offset aFileno - offset byte_A78, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMalloc - offset byte_A78, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFflush - offset byte_A78, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aNlLanginfo - offset byte_A78, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aSigsuspend - offset byte_A78, 12h, 0, 0, \ ; "sigsuspend"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFreading - offset byte_A78, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aRealloc - offset byte_A78, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aSetlocale - offset byte_A78, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aPrintfChk - offset byte_A78, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aError - offset byte_A78, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000007A8                            0>
LOAD:00000000000007C0                 Elf64_Sym <offset aWaitpid - offset byte_A78, 12h, 0, 0, \ ; "waitpid"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFseeko - offset byte_A78, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aTimerSettime - offset byte_A78, 12h, 0, 0, \ ; "timer_settime"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aTimerCreate - offset byte_A78, 12h, 0, 0, \ ; "timer_create"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aExecvp - offset byte_A78, 12h, 0, 0, \ ; "execvp"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aCxaAtexit - offset byte_A78, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aSetpgid - offset byte_A78, 12h, 0, 0, \ ; "setpgid"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aLibcCurrentSig - offset byte_A78, 12h, 0, 0, \ ; "__libc_current_sigrtmin"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aExit+1 - offset byte_A78, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aFwrite - offset byte_A78, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aTimerDelete - offset byte_A78, 12h, 0, 0, \ ; "timer_delete"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFprintfChk - offset byte_A78, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aLibcCurrentSig_0 - offset byte_A78, 12h, 0, 0, \ ; "__libc_current_sigrtmax"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aItmRegistertmc - offset byte_A78, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aMbsinit - offset byte_A78, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aIswprint - offset byte_A78, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aCxaFinalize - offset byte_A78, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aSigaddset - offset byte_A78, 12h, 0, 0, \ ; "sigaddset"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aFork - offset byte_A78, 12h, 0, 0, offset dword_0, \ ; "fork"
LOAD:0000000000000970                            0>
LOAD:0000000000000988                 Elf64_Sym <offset aCtypeBLoc - offset byte_A78, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aSprintfChk - offset byte_A78, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aStdout - offset byte_A78, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009B8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0                 Elf64_Sym <offset aProgname - offset byte_A78, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000009D0                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:00000000000009E8                 Elf64_Sym <offset aProgramInvocat - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000009E8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aPrognameFull - offset byte_A78, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A00                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_A78, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A18                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aStderr - offset byte_A78, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A30                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aOptind - offset byte_A78, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A48                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000A60                 Elf64_Sym <offset aOptarg - offset byte_A78, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000A60                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78 ; ELF String Table
LOAD:0000000000000A78 byte_A78        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A78                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000A79 aLibrtSo1       db 'librt.so.1',0       ; DATA XREF: LOAD:0000000000000EE0↓o
LOAD:0000000000000A84 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A84                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000AA0 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000AAF aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000AAF                                         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000AC9 aTimerSettime   db 'timer_settime',0    ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000AD7 aTimerCreate    db 'timer_create',0     ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AE4 aTimerDelete    db 'timer_delete',0     ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000AF1 aLibpthreadSo0  db 'libpthread.so.0',0  ; DATA XREF: LOAD:0000000000000F00↓o
LOAD:0000000000000B01 aLibcCurrentSig db '__libc_current_sigrtmin',0
LOAD:0000000000000B01                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B19 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B2A aRaise          db 'raise',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000B30 aSigaction      db 'sigaction',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000B3A aLibcCurrentSig_0 db '__libc_current_sigrtmax',0
LOAD:0000000000000B3A                                         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B52 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B58 aWaitpid        db 'waitpid',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B60 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000F20↓o
LOAD:0000000000000B6A aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000B71 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B78 aSigsuspend     db 'sigsuspend',0       ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B83 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000B90 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B9A aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000BA2 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000BAA aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000BB1 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000BB9 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000BC3 aError          db 'error',0            ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000BC9 aSignal         db 'signal',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000BD0 aFork           db 'fork',0             ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000BD5 aSigprocmask    db 'sigprocmask',0      ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000BE1 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BF2 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000BFB aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000C03 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000C09 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000C09                                         ; LOAD:0000000000000880↑o
LOAD:0000000000000C0F aKill           db 'kill',0             ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000C14 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000C14                                         ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000C2C aStrtod         db 'strtod',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000C33 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000C33                                         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000C4A aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000C51 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000C58 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000C5F aNewlocale      db 'newlocale',0        ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000C69 aPrctl          db 'prctl',0            ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000C6F aSigemptyset    db 'sigemptyset',0      ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000C7B aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000C82 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000C89 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000C97 aSigaddset      db 'sigaddset',0        ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000CA1 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000CA8 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000CAF aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000CB6 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000CBD aSetpgid        db 'setpgid',0          ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000CC5 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000CCD aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000CD9 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000CE7 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000CEE aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000CF9 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000D00 aAlarm          db 'alarm',0            ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000D06 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000D15 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000D21 aExecvp         db 'execvp',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000D28 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000D2F aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000D36 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000D41 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000D48 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D48                                         ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000D66 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000D75 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000D83 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000D83                                         ; LOAD:0000000000000430↑o
LOAD:0000000000000D92 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000D99 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D99                                         ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000DAB aStrtodL        db 'strtod_l',0         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000DB4 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000DBB aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000DCA aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000DCF aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000DDA aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000DEA aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000DF7 aGlibc233       db 'GLIBC_2.3.3',0      ; DATA XREF: LOAD:0000000000000EF0↓o
LOAD:0000000000000E03 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000F10↓o
LOAD:0000000000000E03                                         ; LOAD:0000000000000F70↓o
LOAD:0000000000000E0F aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000F30↓o
LOAD:0000000000000E1A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000F40↓o
LOAD:0000000000000E24 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000F50↓o
LOAD:0000000000000E2E aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000F60↓o
LOAD:0000000000000E3A ; ELF GNU Symbol Version Table
LOAD:0000000000000E3A                 dw 0
LOAD:0000000000000E3C                 dw 2                    ; sigprocmask@@GLIBC_2.2.5
LOAD:0000000000000E3E                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E40                 dw 4                    ; raise@@GLIBC_2.2.5
LOAD:0000000000000E42                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E44                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000E46                 dw 4                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000E48                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000E4A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000E4C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000E4E                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000E50                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000E52                 dw 4                    ; sigaction@@GLIBC_2.2.5
LOAD:0000000000000E54                 dw 2                    ; strtod@@GLIBC_2.2.5
LOAD:0000000000000E56                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000E58                 dw 5                    ; strtod_l@@GLIBC_2.3
LOAD:0000000000000E5A                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000E5C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E5E                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E60                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000E62                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000E64                 dw 6                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000E66                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000E68                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000E6A                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000E6C                 dw 5                    ; newlocale@@GLIBC_2.3
LOAD:0000000000000E6E                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000E70                 dw 4                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000E72                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000E74                 dw 2                    ; alarm@@GLIBC_2.2.5
LOAD:0000000000000E76                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000E78                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000E7E                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000E80                 dw 2                    ; signal@@GLIBC_2.2.5
LOAD:0000000000000E82                 dw 2                    ; sigemptyset@@GLIBC_2.2.5
LOAD:0000000000000E84                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000E86                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000E88                 dw 7                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000E8A                 dw 2                    ; prctl@@GLIBC_2.2.5
LOAD:0000000000000E8C                 dw 2                    ; kill@@GLIBC_2.2.5
LOAD:0000000000000E8E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000E90                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000E92                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000E94                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000E96                 dw 2                    ; sigsuspend@@GLIBC_2.2.5
LOAD:0000000000000E98                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000E9A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000E9C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000E9E                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000EA0                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000EA2                 dw 4                    ; waitpid@@GLIBC_2.2.5
LOAD:0000000000000EA4                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000EA6                 dw 8                    ; timer_settime@@GLIBC_2.3.3
LOAD:0000000000000EA8                 dw 8                    ; timer_create@@GLIBC_2.3.3
LOAD:0000000000000EAA                 dw 2                    ; execvp@@GLIBC_2.2.5
LOAD:0000000000000EAC                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000EAE                 dw 2                    ; setpgid@@GLIBC_2.2.5
LOAD:0000000000000EB0                 dw 4                    ; __libc_current_sigrtmin@@GLIBC_2.2.5
LOAD:0000000000000EB2                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000EB4                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000EB6                 dw 8                    ; timer_delete@@GLIBC_2.3.3
LOAD:0000000000000EB8                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000EBA                 dw 4                    ; __libc_current_sigrtmax@@GLIBC_2.2.5
LOAD:0000000000000EBC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000EBE                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000EC0                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000EC2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000EC4                 dw 2                    ; sigaddset@@GLIBC_2.2.5
LOAD:0000000000000EC6                 dw 2                    ; fork@@GLIBC_2.2.5
LOAD:0000000000000EC8                 dw 5                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000ECA                 dw 3                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000ECC                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000ECE                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000ED0                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000ED2                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000ED4                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000ED6                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000ED8                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000EDA                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000EDC                 dw 0
LOAD:0000000000000EDE                 dw 0
LOAD:0000000000000EE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000EE0                 Elf64_Verneed <1, 1, offset aLibrtSo1 - offset byte_A78, 10h, 20h> ; "librt.so.1"
LOAD:0000000000000EF0                 Elf64_Vernaux <9691973h, 0, 8, offset aGlibc233 - offset byte_A78, 0> ; "GLIBC_2.3.3"
LOAD:0000000000000F00                 Elf64_Verneed <1, 1, offset aLibpthreadSo0 - offset byte_A78, 10h, \ ; "libpthread.so.0"
LOAD:0000000000000F00                                20h>
LOAD:0000000000000F10                 Elf64_Vernaux <9691A75h, 0, 4, offset aGlibc225 - offset byte_A78, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000F20                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_A78, 10h, 0> ; "libc.so.6"
LOAD:0000000000000F30                 Elf64_Vernaux <6969194h, 0, 7, offset aGlibc214 - offset byte_A78, \ ; "GLIBC_2.14"
LOAD:0000000000000F30                                10h>
LOAD:0000000000000F40                 Elf64_Vernaux <0D696914h, 0, 6, offset aGlibc24 - offset byte_A78, \ ; "GLIBC_2.4"
LOAD:0000000000000F40                                10h>
LOAD:0000000000000F50                 Elf64_Vernaux <0D696913h, 0, 5, offset aGlibc23 - offset byte_A78, \ ; "GLIBC_2.3"
LOAD:0000000000000F50                                10h>
LOAD:0000000000000F60                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_A78, \ ; "GLIBC_2.3.4"
LOAD:0000000000000F60                                10h>
LOAD:0000000000000F70                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_A78, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000F80 ; ELF RELA Relocation Table
LOAD:0000000000000F80                 Elf64_Rela <208A30h, 8, 2460h> ; R_X86_64_RELATIVE +2460h
LOAD:0000000000000F98                 Elf64_Rela <208A38h, 8, 2420h> ; R_X86_64_RELATIVE +2420h
LOAD:0000000000000FB0                 Elf64_Rela <208A40h, 8, 6005h> ; R_X86_64_RELATIVE +6005h
LOAD:0000000000000FC8                 Elf64_Rela <208A60h, 8, 68BFh> ; R_X86_64_RELATIVE +68BFh
LOAD:0000000000000FE0                 Elf64_Rela <208A80h, 8, 6010h> ; R_X86_64_RELATIVE +6010h
LOAD:0000000000000FF8                 Elf64_Rela <208AA0h, 8, 6018h> ; R_X86_64_RELATIVE +6018h
LOAD:0000000000001010                 Elf64_Rela <208AC0h, 8, 6023h> ; R_X86_64_RELATIVE +6023h
LOAD:0000000000001028                 Elf64_Rela <208AE0h, 8, 6033h> ; R_X86_64_RELATIVE +6033h
LOAD:0000000000001040                 Elf64_Rela <208B00h, 8, 6038h> ; R_X86_64_RELATIVE +6038h
LOAD:0000000000001058                 Elf64_Rela <208B40h, 8, 6951h> ; R_X86_64_RELATIVE +6951h
LOAD:0000000000001070                 Elf64_Rela <208B48h, 8, 6959h> ; R_X86_64_RELATIVE +6959h
LOAD:0000000000001088                 Elf64_Rela <208B50h, 8, 695Fh> ; R_X86_64_RELATIVE +695Fh
LOAD:00000000000010A0                 Elf64_Rela <208B58h, 8, 696Ch> ; R_X86_64_RELATIVE +696Ch
LOAD:00000000000010B8                 Elf64_Rela <208B60h, 8, 6979h> ; R_X86_64_RELATIVE +6979h
LOAD:00000000000010D0                 Elf64_Rela <208B68h, 8, 698Dh> ; R_X86_64_RELATIVE +698Dh
LOAD:00000000000010E8                 Elf64_Rela <208B70h, 8, 698Fh> ; R_X86_64_RELATIVE +698Fh
LOAD:0000000000001100                 Elf64_Rela <208B78h, 8, 6972h> ; R_X86_64_RELATIVE +6972h
LOAD:0000000000001118                 Elf64_Rela <208B80h, 8, 5F9Eh> ; R_X86_64_RELATIVE +5F9Eh
LOAD:0000000000001130                 Elf64_Rela <208B88h, 8, 6997h> ; R_X86_64_RELATIVE +6997h
LOAD:0000000000001148                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000001160                 Elf64_Rela <209018h, 8, 68C6h> ; R_X86_64_RELATIVE +68C6h
LOAD:0000000000001178                 Elf64_Rela <209080h, 8, 209090h> ; R_X86_64_RELATIVE +209090h
LOAD:0000000000001190                 Elf64_Rela <209098h, 8, 209300h> ; R_X86_64_RELATIVE +209300h
LOAD:00000000000011A8                 Elf64_Rela <208FD8h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000011C0                 Elf64_Rela <208FE0h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000011D8                 Elf64_Rela <208FE8h, 2500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000011F0                 Elf64_Rela <208FF0h, 4100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001208                 Elf64_Rela <208FF8h, 4400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001220                 Elf64_Rela <209260h, 4A00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001238                 Elf64_Rela <209268h, 4900000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001250                 Elf64_Rela <209270h, 4F00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001268                 Elf64_Rela <209278h, 5000000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001280                 Elf64_Rela <209280h, 4C00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001298                 Elf64_Rela <2092A0h, 4E00000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000012B0 ; ELF JMPREL Relocation Table
LOAD:00000000000012B0                 Elf64_Rela <208DC0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT sigprocmask
LOAD:00000000000012C8                 Elf64_Rela <208DC8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:00000000000012E0                 Elf64_Rela <208DD0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT raise
LOAD:00000000000012F8                 Elf64_Rela <208DD8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001310                 Elf64_Rela <208DE0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001328                 Elf64_Rela <208DE8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001340                 Elf64_Rela <208DF0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001358                 Elf64_Rela <208DF8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001370                 Elf64_Rela <208E00h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001388                 Elf64_Rela <208E08h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000013A0                 Elf64_Rela <208E10h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT sigaction
LOAD:00000000000013B8                 Elf64_Rela <208E18h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strtod
LOAD:00000000000013D0                 Elf64_Rela <208E20h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:00000000000013E8                 Elf64_Rela <208E28h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strtod_l
LOAD:0000000000001400                 Elf64_Rela <208E30h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001418                 Elf64_Rela <208E38h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001430                 Elf64_Rela <208E40h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001448                 Elf64_Rela <208E48h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001460                 Elf64_Rela <208E50h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001478                 Elf64_Rela <208E58h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001490                 Elf64_Rela <208E60h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000014A8                 Elf64_Rela <208E68h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000014C0                 Elf64_Rela <208E70h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:00000000000014D8                 Elf64_Rela <208E78h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT newlocale
LOAD:00000000000014F0                 Elf64_Rela <208E80h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001508                 Elf64_Rela <208E88h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001520                 Elf64_Rela <208E90h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001538                 Elf64_Rela <208E98h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT alarm
LOAD:0000000000001550                 Elf64_Rela <208EA0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001568                 Elf64_Rela <208EA8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001580                 Elf64_Rela <208EB0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001598                 Elf64_Rela <208EB8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000015B0                 Elf64_Rela <208EC0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT signal
LOAD:00000000000015C8                 Elf64_Rela <208EC8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT sigemptyset
LOAD:00000000000015E0                 Elf64_Rela <208ED0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:00000000000015F8                 Elf64_Rela <208ED8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001610                 Elf64_Rela <208EE0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT prctl
LOAD:0000000000001628                 Elf64_Rela <208EE8h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT kill
LOAD:0000000000001640                 Elf64_Rela <208EF0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001658                 Elf64_Rela <208EF8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001670                 Elf64_Rela <208F00h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001688                 Elf64_Rela <208F08h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000016A0                 Elf64_Rela <208F10h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT sigsuspend
LOAD:00000000000016B8                 Elf64_Rela <208F18h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000016D0                 Elf64_Rela <208F20h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000016E8                 Elf64_Rela <208F28h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001700                 Elf64_Rela <208F30h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001718                 Elf64_Rela <208F38h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001730                 Elf64_Rela <208F40h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT waitpid
LOAD:0000000000001748                 Elf64_Rela <208F48h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001760                 Elf64_Rela <208F50h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT timer_settime
LOAD:0000000000001778                 Elf64_Rela <208F58h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT timer_create
LOAD:0000000000001790                 Elf64_Rela <208F60h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT execvp
LOAD:00000000000017A8                 Elf64_Rela <208F68h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000017C0                 Elf64_Rela <208F70h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT setpgid
LOAD:00000000000017D8                 Elf64_Rela <208F78h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmin
LOAD:00000000000017F0                 Elf64_Rela <208F80h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001808                 Elf64_Rela <208F88h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001820                 Elf64_Rela <208F90h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT timer_delete
LOAD:0000000000001838                 Elf64_Rela <208F98h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001850                 Elf64_Rela <208FA0h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __libc_current_sigrtmax
LOAD:0000000000001868                 Elf64_Rela <208FA8h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001880                 Elf64_Rela <208FB0h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001898                 Elf64_Rela <208FB8h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT sigaddset
LOAD:00000000000018B0                 Elf64_Rela <208FC0h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT fork
LOAD:00000000000018C8                 Elf64_Rela <208FC8h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000018E0                 Elf64_Rela <208FD0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:00000000000018E0 LOAD            ends
LOAD:00000000000018E0
.init:00000000000018F8 ; ===========================================================================
.init:00000000000018F8
.init:00000000000018F8 ; Segment type: Pure code
.init:00000000000018F8 ; Segment permissions: Read/Execute
.init:00000000000018F8 _init           segment dword public 'CODE' use64
.init:00000000000018F8                 assume cs:_init
.init:00000000000018F8                 ;org 18F8h
.init:00000000000018F8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000018F8
.init:00000000000018F8 ; =============== S U B R O U T I N E =======================================
.init:00000000000018F8
.init:00000000000018F8
.init:00000000000018F8                 public _init_proc
.init:00000000000018F8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000018F8                 sub     rsp, 8          ; _init
.init:00000000000018FC                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001903                 test    rax, rax
.init:0000000000001906                 jz      short loc_190A
.init:0000000000001908                 call    rax ; __gmon_start__
.init:000000000000190A
.init:000000000000190A loc_190A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000190A                 add     rsp, 8
.init:000000000000190E                 retn
.init:000000000000190E _init_proc      endp
.init:000000000000190E
.init:000000000000190E _init           ends
.init:000000000000190E
LOAD:000000000000190F ; ===========================================================================
LOAD:000000000000190F
LOAD:000000000000190F ; Segment type: Pure code
LOAD:000000000000190F ; Segment permissions: Read/Execute
LOAD:000000000000190F LOAD            segment byte public 'CODE' use64
LOAD:000000000000190F                 assume cs:LOAD
LOAD:000000000000190F                 ;org 190Fh
LOAD:000000000000190F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000190F                 align 10h
LOAD:000000000000190F LOAD            ends
LOAD:000000000000190F
.plt:0000000000001910 ; ===========================================================================
.plt:0000000000001910
.plt:0000000000001910 ; Segment type: Pure code
.plt:0000000000001910 ; Segment permissions: Read/Execute
.plt:0000000000001910 _plt            segment para public 'CODE' use64
.plt:0000000000001910                 assume cs:_plt
.plt:0000000000001910                 ;org 1910h
.plt:0000000000001910                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910
.plt:0000000000001910 sub_1910        proc near               ; CODE XREF: .plt:000000000000192B↓j
.plt:0000000000001910                                         ; .plt:000000000000193B↓j ...
.plt:0000000000001910 ; __unwind {
.plt:0000000000001910                 push    cs:qword_208DB0
.plt:0000000000001916                 jmp     cs:qword_208DB8
.plt:0000000000001916 sub_1910        endp
.plt:0000000000001916
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:000000000000191C                 align 20h
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
.plt:0000000000001920 _sigprocmask    proc near               ; CODE XREF: main+40A↓p
.plt:0000000000001920                                         ; unblock_signal+3D↓p
.plt:0000000000001920                 jmp     cs:sigprocmask_ptr
.plt:0000000000001920 _sigprocmask    endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    0
.plt:000000000000192B                 jmp     sub_1910
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ___snprintf_chk proc near               ; CODE XREF: cleanup+1CE↓p
.plt:0000000000001930                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001930 ___snprintf_chk endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    1
.plt:000000000000193B                 jmp     sub_1910
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; int raise(int sig)
.plt:0000000000001940 _raise          proc near               ; CODE XREF: main+588↓p
.plt:0000000000001940                 jmp     cs:raise_ptr
.plt:0000000000001940 _raise          endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    2
.plt:000000000000194B                 jmp     sub_1910
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; void free(void *ptr)
.plt:0000000000001950 _free           proc near               ; CODE XREF: operand2sig+11D↓p
.plt:0000000000001950                                         ; operand2sig+17A↓p ...
.plt:0000000000001950                 jmp     cs:free_ptr
.plt:0000000000001950 _free           endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    3
.plt:000000000000195B                 jmp     sub_1910
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: noreturn thunk
.plt:0000000000001960
.plt:0000000000001960 ; void __noreturn abort(void)
.plt:0000000000001960 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001960                                         ; quotearg_buffer_restyled:def_33A1↓p ...
.plt:0000000000001960                 jmp     cs:abort_ptr
.plt:0000000000001960 _abort          endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    4
.plt:000000000000196B                 jmp     sub_1910
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; int *__errno_location(void)
.plt:0000000000001970 ___errno_location proc near             ; CODE XREF: main+311↓p
.plt:0000000000001970                                         ; main+4E3↓p ...
.plt:0000000000001970                 jmp     cs:__errno_location_ptr
.plt:0000000000001970 ___errno_location endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    5
.plt:000000000000197B                 jmp     sub_1910
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001980 _strncmp        proc near               ; CODE XREF: usage+2BC↓p
.plt:0000000000001980                                         ; usage+37D↓p
.plt:0000000000001980                 jmp     cs:strncmp_ptr
.plt:0000000000001980 _strncmp        endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    6
.plt:000000000000198B                 jmp     sub_1910
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: noreturn thunk
.plt:0000000000001990
.plt:0000000000001990 ; void __noreturn _exit(int status)
.plt:0000000000001990 __exit          proc near               ; CODE XREF: cleanup+1DE↓p
.plt:0000000000001990                                         ; close_stdout+88↓p
.plt:0000000000001990                 jmp     cs:_exit_ptr
.plt:0000000000001990 __exit          endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    7
.plt:000000000000199B                 jmp     sub_1910
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000019A0 _strcpy         proc near               ; CODE XREF: sig2str+39↓p
.plt:00000000000019A0                 jmp     cs:strcpy_ptr
.plt:00000000000019A0 _strcpy         endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    8
.plt:00000000000019AB                 jmp     sub_1910
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; size_t __fpending(FILE *fp)
.plt:00000000000019B0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000019B0                 jmp     cs:__fpending_ptr
.plt:00000000000019B0 ___fpending     endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    9
.plt:00000000000019BB                 jmp     sub_1910
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
.plt:00000000000019C0 _sigaction      proc near               ; CODE XREF: main+228↓p
.plt:00000000000019C0                                         ; main+237↓p ...
.plt:00000000000019C0                 jmp     cs:sigaction_ptr
.plt:00000000000019C0 _sigaction      endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    0Ah
.plt:00000000000019CB                 jmp     sub_1910
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; double strtod(const char *nptr, char **endptr)
.plt:00000000000019D0 _strtod         proc near               ; CODE XREF: cl_strtod+25↓p
.plt:00000000000019D0                 jmp     cs:strtod_ptr
.plt:00000000000019D0 _strtod         endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    0Bh
.plt:00000000000019DB                 jmp     sub_1910
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; char *textdomain(const char *domainname)
.plt:00000000000019E0 _textdomain     proc near               ; CODE XREF: main+60↓p
.plt:00000000000019E0                 jmp     cs:textdomain_ptr
.plt:00000000000019E0 _textdomain     endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    0Ch
.plt:00000000000019EB                 jmp     sub_1910
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
.plt:00000000000019F0 _strtod_l       proc near               ; CODE XREF: c_strtod+30↓j
.plt:00000000000019F0                 jmp     cs:strtod_l_ptr
.plt:00000000000019F0 _strtod_l       endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    0Dh
.plt:00000000000019FB                 jmp     sub_1910
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int fclose(FILE *stream)
.plt:0000000000001A00 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001A00                                         ; rpl_fclose+6B↓j
.plt:0000000000001A00                 jmp     cs:fclose_ptr
.plt:0000000000001A00 _fclose         endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    0Eh
.plt:0000000000001A0B                 jmp     sub_1910
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001A10 _bindtextdomain proc near               ; CODE XREF: main+54↓p
.plt:0000000000001A10                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001A10 _bindtextdomain endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    0Fh
.plt:0000000000001A1B                 jmp     sub_1910
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001A20 _dcgettext      proc near               ; CODE XREF: main+33F↓p
.plt:0000000000001A20                                         ; main+46C↓p ...
.plt:0000000000001A20                 jmp     cs:dcgettext_ptr
.plt:0000000000001A20 _dcgettext      endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    10h
.plt:0000000000001A2B                 jmp     sub_1910
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001A30 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001A30                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001A30 ___ctype_get_mb_cur_max endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    11h
.plt:0000000000001A3B                 jmp     sub_1910
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; size_t strlen(const char *s)
.plt:0000000000001A40 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001A40                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001A40                 jmp     cs:strlen_ptr
.plt:0000000000001A40 _strlen         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    12h
.plt:0000000000001A4B                 jmp     sub_1910
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: noreturn thunk
.plt:0000000000001A50
.plt:0000000000001A50 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2357↓p
.plt:0000000000001A50                                         ; settimeout:loc_25BB↓p ...
.plt:0000000000001A50                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001A50 ___stack_chk_fail endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    13h
.plt:0000000000001A5B                 jmp     sub_1910
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001A60 _getopt_long    proc near               ; CODE XREF: main+96↓p
.plt:0000000000001A60                 jmp     cs:getopt_long_ptr
.plt:0000000000001A60 _getopt_long    endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    14h
.plt:0000000000001A6B                 jmp     sub_1910
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001A70 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001A70                 jmp     cs:mbrtowc_ptr
.plt:0000000000001A70 _mbrtowc        endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    15h
.plt:0000000000001A7B                 jmp     sub_1910
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; char *strchr(const char *s, int c)
.plt:0000000000001A80 _strchr         proc near               ; CODE XREF: operand2sig+E6↓p
.plt:0000000000001A80                 jmp     cs:strchr_ptr
.plt:0000000000001A80 _strchr         endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    16h
.plt:0000000000001A8B                 jmp     sub_1910
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
.plt:0000000000001A90 _newlocale      proc near               ; CODE XREF: c_strtod+5E↓p
.plt:0000000000001A90                 jmp     cs:newlocale_ptr
.plt:0000000000001A90 _newlocale      endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    17h
.plt:0000000000001A9B                 jmp     sub_1910
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; char *strrchr(const char *s, int c)
.plt:0000000000001AA0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001AA0                 jmp     cs:strrchr_ptr
.plt:0000000000001AA0 _strrchr        endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    18h
.plt:0000000000001AAB                 jmp     sub_1910
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001AB0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001AB0                                         ; rpl_fseeko+3B↓p
.plt:0000000000001AB0                 jmp     cs:lseek_ptr
.plt:0000000000001AB0 _lseek          endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    19h
.plt:0000000000001ABB                 jmp     sub_1910
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001AC0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001AC0                                         ; xzalloc+12↓j
.plt:0000000000001AC0                 jmp     cs:memset_ptr
.plt:0000000000001AC0 _memset         endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    1Ah
.plt:0000000000001ACB                 jmp     sub_1910
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; unsigned int alarm(unsigned int seconds)
.plt:0000000000001AD0 _alarm          proc near               ; CODE XREF: settimeout:loc_2512↓p
.plt:0000000000001AD0                 jmp     cs:alarm_ptr
.plt:0000000000001AD0 _alarm          endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    1Bh
.plt:0000000000001ADB                 jmp     sub_1910
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001AE0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001AE0                 jmp     cs:memcmp_ptr
.plt:0000000000001AE0 _memcmp         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    1Ch
.plt:0000000000001AEB                 jmp     sub_1910
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001AF0 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001AF0                                         ; usage+C5↓p ...
.plt:0000000000001AF0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001AF0 _fputs_unlocked endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    1Dh
.plt:0000000000001AFB                 jmp     sub_1910
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001B00 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001B00                 jmp     cs:calloc_ptr
.plt:0000000000001B00 _calloc         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    1Eh
.plt:0000000000001B0B                 jmp     sub_1910
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001B10 _strcmp         proc near               ; CODE XREF: str2sig+52↓p
.plt:0000000000001B10                 jmp     cs:strcmp_ptr
.plt:0000000000001B10 _strcmp         endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    1Fh
.plt:0000000000001B1B                 jmp     sub_1910
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; __sighandler_t signal(int sig, __sighandler_t handler)
.plt:0000000000001B20 _signal         proc near               ; CODE XREF: main+280↓p
.plt:0000000000001B20                                         ; main+28F↓p ...
.plt:0000000000001B20                 jmp     cs:signal_ptr
.plt:0000000000001B20 _signal         endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    20h ; ' '
.plt:0000000000001B2B                 jmp     sub_1910
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; int sigemptyset(sigset_t *set)
.plt:0000000000001B30 _sigemptyset    proc near               ; CODE XREF: main+1FF↓p
.plt:0000000000001B30                                         ; main+297↓p ...
.plt:0000000000001B30                 jmp     cs:sigemptyset_ptr
.plt:0000000000001B30 _sigemptyset    endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    21h ; '!'
.plt:0000000000001B3B                 jmp     sub_1910
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001B40 _strtol         proc near               ; CODE XREF: operand2sig+4E↓p
.plt:0000000000001B40                                         ; str2sig+98↓p ...
.plt:0000000000001B40                 jmp     cs:strtol_ptr
.plt:0000000000001B40 _strtol         endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    22h ; '"'
.plt:0000000000001B4B                 jmp     sub_1910
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001B50 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001B50                 jmp     cs:memcpy_ptr
.plt:0000000000001B50 _memcpy         endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    23h ; '#'
.plt:0000000000001B5B                 jmp     sub_1910
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; int prctl(int option, ...)
.plt:0000000000001B60 _prctl          proc near               ; CODE XREF: main+56D↓p
.plt:0000000000001B60                 jmp     cs:prctl_ptr
.plt:0000000000001B60 _prctl          endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    24h ; '$'
.plt:0000000000001B6B                 jmp     sub_1910
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int kill(__pid_t pid, int sig)
.plt:0000000000001B70 _kill           proc near               ; CODE XREF: cleanup+5E↓p
.plt:0000000000001B70                                         ; cleanup+150↓p ...
.plt:0000000000001B70                 jmp     cs:kill_ptr
.plt:0000000000001B70 _kill           endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    25h ; '%'
.plt:0000000000001B7B                 jmp     sub_1910
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; int fileno(FILE *stream)
.plt:0000000000001B80 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001B80                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001B80                 jmp     cs:fileno_ptr
.plt:0000000000001B80 _fileno         endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    26h ; '&'
.plt:0000000000001B8B                 jmp     sub_1910
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; void *malloc(size_t size)
.plt:0000000000001B90 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001B90                 jmp     cs:malloc_ptr
.plt:0000000000001B90 _malloc         endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    27h ; '''
.plt:0000000000001B9B                 jmp     sub_1910
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; int fflush(FILE *stream)
.plt:0000000000001BA0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001BA0                                         ; rpl_fflush+3B↓j
.plt:0000000000001BA0                 jmp     cs:fflush_ptr
.plt:0000000000001BA0 _fflush         endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    28h ; '('
.plt:0000000000001BAB                 jmp     sub_1910
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; char *nl_langinfo(nl_item item)
.plt:0000000000001BB0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001BB0                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001BB0 _nl_langinfo    endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    29h ; ')'
.plt:0000000000001BBB                 jmp     sub_1910
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int sigsuspend(const sigset_t *set)
.plt:0000000000001BC0 _sigsuspend     proc near               ; CODE XREF: main+421↓p
.plt:0000000000001BC0                 jmp     cs:sigsuspend_ptr
.plt:0000000000001BC0 _sigsuspend     endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    2Ah ; '*'
.plt:0000000000001BCB                 jmp     sub_1910
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int __freading(FILE *fp)
.plt:0000000000001BD0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001BD0                                         ; rpl_fflush+9↓p
.plt:0000000000001BD0                 jmp     cs:__freading_ptr
.plt:0000000000001BD0 ___freading     endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    2Bh ; '+'
.plt:0000000000001BDB                 jmp     sub_1910
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001BE0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001BE0                 jmp     cs:realloc_ptr
.plt:0000000000001BE0 _realloc        endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    2Ch ; ','
.plt:0000000000001BEB                 jmp     sub_1910
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001BF0 _setlocale      proc near               ; CODE XREF: main+41↓p
.plt:0000000000001BF0                                         ; usage+2A3↓p ...
.plt:0000000000001BF0                 jmp     cs:setlocale_ptr
.plt:0000000000001BF0 _setlocale      endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    2Dh ; '-'
.plt:0000000000001BFB                 jmp     sub_1910
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001C00                                         ; usage+297↓p ...
.plt:0000000000001C00                 jmp     cs:__printf_chk_ptr
.plt:0000000000001C00 ___printf_chk   endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    2Eh ; '.'
.plt:0000000000001C0B                 jmp     sub_1910
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001C10 _error          proc near               ; CODE XREF: main+351↓p
.plt:0000000000001C10                                         ; main+47A↓p ...
.plt:0000000000001C10                 jmp     cs:error_ptr
.plt:0000000000001C10 _error          endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    2Fh ; '/'
.plt:0000000000001C1B                 jmp     sub_1910
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
.plt:0000000000001C20 _waitpid        proc near               ; CODE XREF: main+434↓p
.plt:0000000000001C20                 jmp     cs:waitpid_ptr
.plt:0000000000001C20 _waitpid        endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    30h ; '0'
.plt:0000000000001C2B                 jmp     sub_1910
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001C30 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_5D8A↓j
.plt:0000000000001C30                 jmp     cs:fseeko_ptr
.plt:0000000000001C30 _fseeko         endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    31h ; '1'
.plt:0000000000001C3B                 jmp     sub_1910
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; int timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue)
.plt:0000000000001C40 _timer_settime  proc near               ; CODE XREF: settimeout+C6↓p
.plt:0000000000001C40                 jmp     cs:timer_settime_ptr
.plt:0000000000001C40 _timer_settime  endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    32h ; '2'
.plt:0000000000001C4B                 jmp     sub_1910
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid)
.plt:0000000000001C50 _timer_create   proc near               ; CODE XREF: settimeout+47↓p
.plt:0000000000001C50                 jmp     cs:timer_create_ptr
.plt:0000000000001C50 _timer_create   endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    33h ; '3'
.plt:0000000000001C5B                 jmp     sub_1910
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; int execvp(const char *file, char *const argv[])
.plt:0000000000001C60 _execvp         proc near               ; CODE XREF: main+30C↓p
.plt:0000000000001C60                 jmp     cs:execvp_ptr
.plt:0000000000001C60 _execvp         endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    34h ; '4'
.plt:0000000000001C6B                 jmp     sub_1910
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001C70 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001C70                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001C70 ___cxa_atexit   endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    35h ; '5'
.plt:0000000000001C7B                 jmp     sub_1910
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; int setpgid(__pid_t pid, __pid_t pgid)
.plt:0000000000001C80 _setpgid        proc near               ; CODE XREF: main+4BA↓p
.plt:0000000000001C80                 jmp     cs:setpgid_ptr
.plt:0000000000001C80 _setpgid        endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    36h ; '6'
.plt:0000000000001C8B                 jmp     sub_1910
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; int __libc_current_sigrtmin(void)
.plt:0000000000001C90 ___libc_current_sigrtmin proc near      ; CODE XREF: str2sig:loc_5980↓p
.plt:0000000000001C90                                         ; sig2str+55↓p
.plt:0000000000001C90                 jmp     cs:__libc_current_sigrtmin_ptr
.plt:0000000000001C90 ___libc_current_sigrtmin endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    37h ; '7'
.plt:0000000000001C9B                 jmp     sub_1910
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: noreturn thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; void __noreturn exit(int status)
.plt:0000000000001CA0 _exit           proc near               ; CODE XREF: main+12E↓p
.plt:0000000000001CA0                                         ; usage+58↓p
.plt:0000000000001CA0                 jmp     cs:exit_ptr
.plt:0000000000001CA0 _exit           endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    38h ; '8'
.plt:0000000000001CAB                 jmp     sub_1910
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001CB0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001CB0                 jmp     cs:fwrite_ptr
.plt:0000000000001CB0 _fwrite         endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    39h ; '9'
.plt:0000000000001CBB                 jmp     sub_1910
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; int timer_delete(timer_t timerid)
.plt:0000000000001CC0 _timer_delete   proc near               ; CODE XREF: settimeout+D8↓p
.plt:0000000000001CC0                 jmp     cs:timer_delete_ptr
.plt:0000000000001CC0 _timer_delete   endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    3Ah ; ':'
.plt:0000000000001CCB                 jmp     sub_1910
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001CD0                                         ; version_etc_arn+37↓p ...
.plt:0000000000001CD0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001CD0 ___fprintf_chk  endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    3Bh ; ';'
.plt:0000000000001CDB                 jmp     sub_1910
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; int __libc_current_sigrtmax(void)
.plt:0000000000001CE0 ___libc_current_sigrtmax proc near      ; CODE XREF: str2sig+C7↓p
.plt:0000000000001CE0                                         ; sig2str+5C↓p
.plt:0000000000001CE0                 jmp     cs:__libc_current_sigrtmax_ptr
.plt:0000000000001CE0 ___libc_current_sigrtmax endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    3Ch ; '<'
.plt:0000000000001CEB                 jmp     sub_1910
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001CF0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001CF0                 jmp     cs:mbsinit_ptr
.plt:0000000000001CF0 _mbsinit        endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    3Dh ; '='
.plt:0000000000001CFB                 jmp     sub_1910
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; int iswprint(wint_t wc)
.plt:0000000000001D00 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001D00                 jmp     cs:iswprint_ptr
.plt:0000000000001D00 _iswprint       endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    3Eh ; '>'
.plt:0000000000001D0B                 jmp     sub_1910
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int sigaddset(sigset_t *set, int signo)
.plt:0000000000001D10 _sigaddset      proc near               ; CODE XREF: main+3AD↓p
.plt:0000000000001D10                                         ; main+3BA↓p ...
.plt:0000000000001D10                 jmp     cs:sigaddset_ptr
.plt:0000000000001D10 _sigaddset      endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    3Fh ; '?'
.plt:0000000000001D1B                 jmp     sub_1910
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; __pid_t fork(void)
.plt:0000000000001D20 _fork           proc near               ; CODE XREF: main+2CF↓p
.plt:0000000000001D20                 jmp     cs:fork_ptr
.plt:0000000000001D20 _fork           endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    40h ; '@'
.plt:0000000000001D2B                 jmp     sub_1910
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001D30 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001D30                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001D30 ___ctype_b_loc  endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    41h ; 'A'
.plt:0000000000001D3B                 jmp     sub_1910
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ___sprintf_chk  proc near               ; CODE XREF: sig2str+AD↓p
.plt:0000000000001D40                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001D40 ___sprintf_chk  endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    42h ; 'B'
.plt:0000000000001D4B                 jmp     sub_1910
.plt:0000000000001D4B ; } // starts at 1910
.plt:0000000000001D4B _plt            ends
.plt:0000000000001D4B
.plt.got:0000000000001D50 ; ===========================================================================
.plt.got:0000000000001D50
.plt.got:0000000000001D50 ; Segment type: Pure code
.plt.got:0000000000001D50 ; Segment permissions: Read/Execute
.plt.got:0000000000001D50 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001D50                 assume cs:_plt_got
.plt.got:0000000000001D50                 ;org 1D50h
.plt.got:0000000000001D50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001D50
.plt.got:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001D50
.plt.got:0000000000001D50 ; Attributes: thunk
.plt.got:0000000000001D50
.plt.got:0000000000001D50 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001D50 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001D50 ; __unwind {
.plt.got:0000000000001D50                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001D50 __cxa_finalize  endp
.plt.got:0000000000001D50
.plt.got:0000000000001D50 ; ---------------------------------------------------------------------------
.plt.got:0000000000001D56                 align 8
.plt.got:0000000000001D56 ; } // starts at 1D50
.plt.got:0000000000001D56 _plt_got        ends
.plt.got:0000000000001D56
LOAD:0000000000001D58 ; ===========================================================================
LOAD:0000000000001D58
LOAD:0000000000001D58 ; Segment type: Pure code
LOAD:0000000000001D58 ; Segment permissions: Read/Execute
LOAD:0000000000001D58 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001D58                 assume cs:LOAD
LOAD:0000000000001D58                 ;org 1D58h
LOAD:0000000000001D58                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001D58                 align 20h
LOAD:0000000000001D58 LOAD            ends
LOAD:0000000000001D58
.text:0000000000001D60 ; ===========================================================================
.text:0000000000001D60
.text:0000000000001D60 ; Segment type: Pure code
.text:0000000000001D60 ; Segment permissions: Read/Execute
.text:0000000000001D60 _text           segment para public 'CODE' use64
.text:0000000000001D60                 assume cs:_text
.text:0000000000001D60                 ;org 1D60h
.text:0000000000001D60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001D60
.text:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D60
.text:0000000000001D60
.text:0000000000001D60 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001D60                 public main
.text:0000000000001D60 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001D60
.text:0000000000001D60 var_180         = qword ptr -180h
.text:0000000000001D60 stat_loc        = dword ptr -16Ch
.text:0000000000001D60 oset            = sigset_t ptr -168h
.text:0000000000001D60 set             = sigset_t ptr -0E8h
.text:0000000000001D60 var_60          = dword ptr -60h
.text:0000000000001D60 var_48          = byte ptr -48h
.text:0000000000001D60 var_30          = qword ptr -30h
.text:0000000000001D60
.text:0000000000001D60 ; __unwind {
.text:0000000000001D60                 push    r13
.text:0000000000001D62                 push    r12
.text:0000000000001D64                 push    rbp
.text:0000000000001D65                 push    rbx
.text:0000000000001D66                 mov     ebp, edi
.text:0000000000001D68                 mov     rbx, rsi
.text:0000000000001D6B                 sub     rsp, 168h
.text:0000000000001D72                 mov     rdi, [rsi]
.text:0000000000001D75                 mov     rax, fs:28h
.text:0000000000001D7E                 mov     [rsp+188h+var_30], rax
.text:0000000000001D86                 xor     eax, eax
.text:0000000000001D88                 lea     r12, [rsp+188h+var_48]
.text:0000000000001D90                 call    set_program_name
.text:0000000000001D95                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001D9C                 mov     edi, 6          ; category
.text:0000000000001DA1                 call    _setlocale
.text:0000000000001DA6                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001DAD                 lea     rdi, domainname ; "coreutils"
.text:0000000000001DB4                 call    _bindtextdomain
.text:0000000000001DB9                 lea     rdi, domainname ; "coreutils"
.text:0000000000001DC0                 call    _textdomain
.text:0000000000001DC5                 lea     rdi, close_stdout
.text:0000000000001DCC                 mov     cs:exit_failure, 7Dh ; '}'
.text:0000000000001DD6                 call    atexit
.text:0000000000001DDB                 nop     dword ptr [rax+rax+00h]
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: main+DF↓j
.text:0000000000001DE0                                         ; main+14C↓j ...
.text:0000000000001DE0                 lea     rcx, long_options ; longopts
.text:0000000000001DE7                 lea     rdx, shortopts  ; "+k:s:v"
.text:0000000000001DEE                 xor     r8d, r8d        ; longind
.text:0000000000001DF1                 mov     rsi, rbx        ; argv
.text:0000000000001DF4                 mov     edi, ebp        ; argc
.text:0000000000001DF6                 call    _getopt_long
.text:0000000000001DFB                 cmp     eax, 0FFFFFFFFh
.text:0000000000001DFE                 jz      loc_1EFC
.text:0000000000001E04                 cmp     eax, 73h ; 's'
.text:0000000000001E07                 jz      loc_1EB8
.text:0000000000001E0D                 jle     short loc_1E48
.text:0000000000001E0F                 cmp     eax, 80h
.text:0000000000001E14                 jz      loc_1EF0
.text:0000000000001E1A                 cmp     eax, 81h
.text:0000000000001E1F                 jz      loc_1EE0
.text:0000000000001E25                 cmp     eax, 76h ; 'v'
.text:0000000000001E28                 jz      short loc_1E38
.text:0000000000001E2A
.text:0000000000001E2A loc_1E2A:                               ; CODE XREF: main+FD↓j
.text:0000000000001E2A                                         ; main+176↓j ...
.text:0000000000001E2A                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001E2F                 call    usage
.text:0000000000001E2F ; ---------------------------------------------------------------------------
.text:0000000000001E34                 align 8
.text:0000000000001E38
.text:0000000000001E38 loc_1E38:                               ; CODE XREF: main+C8↑j
.text:0000000000001E38                 mov     cs:verbose, 1
.text:0000000000001E3F                 jmp     short loc_1DE0
.text:0000000000001E3F ; ---------------------------------------------------------------------------
.text:0000000000001E41                 align 8
.text:0000000000001E48
.text:0000000000001E48 loc_1E48:                               ; CODE XREF: main+AD↑j
.text:0000000000001E48                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001E4D                 jz      loc_2350
.text:0000000000001E53                 cmp     eax, 6Bh ; 'k'
.text:0000000000001E56                 jz      short loc_1E98
.text:0000000000001E58                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001E5D                 jnz     short loc_1E2A
.text:0000000000001E5F                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E66                 mov     rcx, cs:Version
.text:0000000000001E6D                 lea     r8, aPadraigBrady ; "Padraig Brady"
.text:0000000000001E74                 lea     rdx, unk_5F47
.text:0000000000001E7B                 lea     rsi, aTimeout   ; "timeout"
.text:0000000000001E82                 xor     r9d, r9d
.text:0000000000001E85                 xor     eax, eax
.text:0000000000001E87                 call    version_etc
.text:0000000000001E8C                 xor     edi, edi        ; status
.text:0000000000001E8E                 call    _exit
.text:0000000000001E8E ; ---------------------------------------------------------------------------
.text:0000000000001E93                 align 8
.text:0000000000001E98
.text:0000000000001E98 loc_1E98:                               ; CODE XREF: main+F6↑j
.text:0000000000001E98                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E9F                 call    parse_duration
.text:0000000000001EA4                 movsd   cs:kill_after, xmm0
.text:0000000000001EAC                 jmp     loc_1DE0
.text:0000000000001EAC ; ---------------------------------------------------------------------------
.text:0000000000001EB1                 align 8
.text:0000000000001EB8
.text:0000000000001EB8 loc_1EB8:                               ; CODE XREF: main+A7↑j
.text:0000000000001EB8                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; nptr
.text:0000000000001EBF                 mov     rsi, r12
.text:0000000000001EC2                 call    operand2sig
.text:0000000000001EC7                 cmp     eax, 0FFFFFFFFh
.text:0000000000001ECA                 mov     cs:term_signal, eax
.text:0000000000001ED0                 jnz     loc_1DE0
.text:0000000000001ED6                 jmp     loc_1E2A
.text:0000000000001ED6 ; ---------------------------------------------------------------------------
.text:0000000000001EDB                 align 20h
.text:0000000000001EE0
.text:0000000000001EE0 loc_1EE0:                               ; CODE XREF: main+BF↑j
.text:0000000000001EE0                 mov     cs:preserve_status, 1
.text:0000000000001EE7                 jmp     loc_1DE0
.text:0000000000001EE7 ; ---------------------------------------------------------------------------
.text:0000000000001EEC                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: main+B4↑j
.text:0000000000001EF0                 mov     cs:foreground, 1
.text:0000000000001EF7                 jmp     loc_1DE0
.text:0000000000001EFC ; ---------------------------------------------------------------------------
.text:0000000000001EFC
.text:0000000000001EFC loc_1EFC:                               ; CODE XREF: main+9E↑j
.text:0000000000001EFC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001F03                 sub     ebp, eax
.text:0000000000001F05                 sub     ebp, 1
.text:0000000000001F08                 jle     loc_1E2A
.text:0000000000001F0E                 mov     rdi, [rbx+rax*8]
.text:0000000000001F12                 lea     edx, [rax+1]
.text:0000000000001F15                 mov     cs:optind@@GLIBC_2_2_5, edx
.text:0000000000001F1B                 call    parse_duration
.text:0000000000001F20                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001F27                 cmp     cs:foreground, 0
.text:0000000000001F2E                 movsd   [rsp+188h+var_180], xmm0
.text:0000000000001F34                 lea     r12, [rbx+rax*8]
.text:0000000000001F38                 mov     rax, [r12]
.text:0000000000001F3C                 mov     cs:command, rax
.text:0000000000001F43                 jz      loc_2216
.text:0000000000001F49
.text:0000000000001F49 loc_1F49:                               ; CODE XREF: main+4BF↓j
.text:0000000000001F49                 lea     rbx, [rsp+188h+set]
.text:0000000000001F51                 mov     r13d, cs:term_signal
.text:0000000000001F58                 lea     rbp, [rbx+8]
.text:0000000000001F5C                 mov     rdi, rbp        ; set
.text:0000000000001F5F                 call    _sigemptyset
.text:0000000000001F64                 lea     rax, cleanup
.text:0000000000001F6B                 xor     edx, edx        ; oact
.text:0000000000001F6D                 mov     rsi, rbx        ; act
.text:0000000000001F70                 mov     edi, 0Eh        ; sig
.text:0000000000001F75                 mov     [rsp+188h+var_60], 10000000h
.text:0000000000001F80                 mov     [rsp+188h+set.__val], rax
.text:0000000000001F88                 call    _sigaction
.text:0000000000001F8D                 xor     edx, edx        ; oact
.text:0000000000001F8F                 mov     rsi, rbx        ; act
.text:0000000000001F92                 mov     edi, 2          ; sig
.text:0000000000001F97                 call    _sigaction
.text:0000000000001F9C                 xor     edx, edx        ; oact
.text:0000000000001F9E                 mov     rsi, rbx        ; act
.text:0000000000001FA1                 mov     edi, 3          ; sig
.text:0000000000001FA6                 call    _sigaction
.text:0000000000001FAB                 xor     edx, edx        ; oact
.text:0000000000001FAD                 mov     rsi, rbx        ; act
.text:0000000000001FB0                 mov     edi, 1          ; sig
.text:0000000000001FB5                 call    _sigaction
.text:0000000000001FBA                 xor     edx, edx        ; oact
.text:0000000000001FBC                 mov     rsi, rbx        ; act
.text:0000000000001FBF                 mov     edi, 0Fh        ; sig
.text:0000000000001FC4                 call    _sigaction
.text:0000000000001FC9                 xor     edx, edx        ; oact
.text:0000000000001FCB                 mov     rsi, rbx        ; act
.text:0000000000001FCE                 mov     edi, r13d       ; sig
.text:0000000000001FD1                 call    _sigaction
.text:0000000000001FD6                 mov     esi, (offset dword_0+1) ; handler
.text:0000000000001FDB                 mov     edi, 15h        ; sig
.text:0000000000001FE0                 call    _signal
.text:0000000000001FE5                 mov     esi, (offset dword_0+1) ; handler
.text:0000000000001FEA                 mov     edi, 16h        ; sig
.text:0000000000001FEF                 call    _signal
.text:0000000000001FF4                 mov     rdi, rbp        ; set
.text:0000000000001FF7                 call    _sigemptyset
.text:0000000000001FFC                 lea     rax, chld
.text:0000000000002003                 xor     edx, edx        ; oact
.text:0000000000002005                 mov     rsi, rbx        ; act
.text:0000000000002008                 mov     edi, 11h        ; sig
.text:000000000000200D                 mov     [rsp+188h+var_60], 10000000h
.text:0000000000002018                 mov     [rsp+188h+set.__val], rax
.text:0000000000002020                 call    _sigaction
.text:0000000000002025                 mov     edi, 11h        ; signo
.text:000000000000202A                 call    unblock_signal
.text:000000000000202F                 call    _fork
.text:0000000000002034                 cmp     eax, 0FFFFFFFFh
.text:0000000000002037                 mov     cs:monitored_pid, eax
.text:000000000000203D                 jz      loc_225B
.text:0000000000002043                 test    eax, eax
.text:0000000000002045                 jnz     loc_20DD
.text:000000000000204B                 xor     esi, esi        ; handler
.text:000000000000204D                 mov     edi, 15h        ; sig
.text:0000000000002052                 xor     ebx, ebx
.text:0000000000002054                 call    _signal
.text:0000000000002059                 xor     esi, esi        ; handler
.text:000000000000205B                 mov     edi, 16h        ; sig
.text:0000000000002060                 call    _signal
.text:0000000000002065                 mov     rdi, [r12]      ; file
.text:0000000000002069                 mov     rsi, r12        ; argv
.text:000000000000206C                 call    _execvp
.text:0000000000002071                 call    ___errno_location
.text:0000000000002076                 cmp     dword ptr [rax], 2
.text:0000000000002079                 mov     rdi, cs:command
.text:0000000000002080                 mov     rbp, rax
.text:0000000000002083                 setz    bl
.text:0000000000002086                 call    quote
.text:000000000000208B                 lea     rsi, msgid      ; "failed to run command %s"
.text:0000000000002092                 mov     edx, 5          ; category
.text:0000000000002097                 xor     edi, edi        ; domainname
.text:0000000000002099                 mov     r12, rax
.text:000000000000209C                 add     ebx, 7Eh ; '~'
.text:000000000000209F                 call    _dcgettext
.text:00000000000020A4                 mov     esi, [rbp+0]    ; errnum
.text:00000000000020A7                 mov     rdx, rax        ; format
.text:00000000000020AA                 mov     rcx, r12
.text:00000000000020AD                 xor     edi, edi        ; status
.text:00000000000020AF                 xor     eax, eax
.text:00000000000020B1                 call    _error
.text:00000000000020B6
.text:00000000000020B6 loc_20B6:                               ; CODE XREF: main+4B1↓j
.text:00000000000020B6                                         ; main+529↓j
.text:00000000000020B6                 mov     rcx, [rsp+188h+var_30]
.text:00000000000020BE                 xor     rcx, fs:28h
.text:00000000000020C7                 mov     eax, ebx
.text:00000000000020C9                 jnz     loc_2357
.text:00000000000020CF                 add     rsp, 168h
.text:00000000000020D6                 pop     rbx
.text:00000000000020D7                 pop     rbp
.text:00000000000020D8                 pop     r12
.text:00000000000020DA                 pop     r13
.text:00000000000020DC                 retn
.text:00000000000020DD ; ---------------------------------------------------------------------------
.text:00000000000020DD
.text:00000000000020DD loc_20DD:                               ; CODE XREF: main+2E5↑j
.text:00000000000020DD                 mov     edi, 0Eh        ; signo
.text:00000000000020E2                 call    unblock_signal
.text:00000000000020E7                 movsd   xmm0, [rsp+188h+var_180]
.text:00000000000020ED                 mov     edi, 1
.text:00000000000020F2                 call    settimeout
.text:00000000000020F7                 mov     rdi, rbx        ; set
.text:00000000000020FA                 mov     ebp, cs:term_signal
.text:0000000000002100                 call    _sigemptyset
.text:0000000000002105                 mov     esi, 0Eh        ; signo
.text:000000000000210A                 mov     rdi, rbx        ; set
.text:000000000000210D                 call    _sigaddset
.text:0000000000002112                 mov     esi, 2          ; signo
.text:0000000000002117                 mov     rdi, rbx        ; set
.text:000000000000211A                 call    _sigaddset
.text:000000000000211F                 mov     esi, 3          ; signo
.text:0000000000002124                 mov     rdi, rbx        ; set
.text:0000000000002127                 call    _sigaddset
.text:000000000000212C                 mov     esi, 1          ; signo
.text:0000000000002131                 mov     rdi, rbx        ; set
.text:0000000000002134                 call    _sigaddset
.text:0000000000002139                 mov     esi, 0Fh        ; signo
.text:000000000000213E                 mov     rdi, rbx        ; set
.text:0000000000002141                 call    _sigaddset
.text:0000000000002146                 mov     esi, ebp        ; signo
.text:0000000000002148                 mov     rdi, rbx        ; set
.text:000000000000214B                 lea     rbp, [rsp+188h+oset]
.text:0000000000002150                 call    _sigaddset
.text:0000000000002155                 mov     esi, 11h        ; signo
.text:000000000000215A                 mov     rdi, rbx        ; set
.text:000000000000215D                 call    _sigaddset
.text:0000000000002162                 xor     edi, edi        ; how
.text:0000000000002164                 mov     rdx, rbp        ; oset
.text:0000000000002167                 mov     rsi, rbx        ; set
.text:000000000000216A                 call    _sigprocmask
.text:000000000000216F                 test    eax, eax
.text:0000000000002171                 jnz     loc_222D
.text:0000000000002177
.text:0000000000002177 loc_2177:                               ; CODE XREF: main+4F6↓j
.text:0000000000002177                 lea     rbx, [rsp+188h+stat_loc]
.text:000000000000217C                 jmp     short loc_2186
.text:000000000000217E ; ---------------------------------------------------------------------------
.text:000000000000217E
.text:000000000000217E loc_217E:                               ; CODE XREF: main+43B↓j
.text:000000000000217E                 mov     rdi, rbp        ; set
.text:0000000000002181                 call    _sigsuspend
.text:0000000000002186
.text:0000000000002186 loc_2186:                               ; CODE XREF: main+41C↑j
.text:0000000000002186                 mov     edi, cs:monitored_pid ; pid
.text:000000000000218C                 mov     edx, 1          ; options
.text:0000000000002191                 mov     rsi, rbx        ; stat_loc
.text:0000000000002194                 call    _waitpid
.text:0000000000002199                 test    eax, eax
.text:000000000000219B                 jz      short loc_217E
.text:000000000000219D                 js      loc_228E
.text:00000000000021A3                 mov     ebx, [rsp+188h+stat_loc]
.text:00000000000021A7                 mov     ebp, ebx
.text:00000000000021A9                 and     ebp, 7Fh
.text:00000000000021AC                 jz      short loc_2224
.text:00000000000021AE                 lea     eax, [rbp+1]
.text:00000000000021B1                 sub     al, 1
.text:00000000000021B3                 jle     loc_22F2
.text:00000000000021B9                 and     bl, 80h
.text:00000000000021BC                 jz      short loc_21DF
.text:00000000000021BE                 lea     rsi, aTheMonitoredCo ; "the monitored command dumped core"
.text:00000000000021C5                 mov     edx, 5          ; category
.text:00000000000021CA                 xor     edi, edi        ; domainname
.text:00000000000021CC                 call    _dcgettext
.text:00000000000021D1                 xor     esi, esi        ; errnum
.text:00000000000021D3                 mov     rdx, rax        ; format
.text:00000000000021D6                 xor     edi, edi        ; status
.text:00000000000021D8                 xor     eax, eax
.text:00000000000021DA                 call    _error
.text:00000000000021DF
.text:00000000000021DF loc_21DF:                               ; CODE XREF: main+45C↑j
.text:00000000000021DF                 cmp     cs:timed_out, 0
.text:00000000000021E6                 jz      loc_22C4
.text:00000000000021EC
.text:00000000000021EC loc_21EC:                               ; CODE XREF: main+58D↓j
.text:00000000000021EC                                         ; main+5EB↓j
.text:00000000000021EC                 sub     ebp, 0FFFFFF80h
.text:00000000000021EF                 mov     [rsp+188h+stat_loc], ebp
.text:00000000000021F3
.text:00000000000021F3 loc_21F3:                               ; CODE XREF: main+4CB↓j
.text:00000000000021F3                                         ; main+55F↓j ...
.text:00000000000021F3                 cmp     cs:timed_out, 0
.text:00000000000021FA                 jz      short loc_220D
.text:00000000000021FC                 cmp     cs:preserve_status, 0
.text:0000000000002203                 jnz     short loc_220D
.text:0000000000002205                 mov     [rsp+188h+stat_loc], 7Ch ; '|'
.text:000000000000220D
.text:000000000000220D loc_220D:                               ; CODE XREF: main+49A↑j
.text:000000000000220D                                         ; main+4A3↑j
.text:000000000000220D                 mov     ebx, [rsp+188h+stat_loc]
.text:0000000000002211                 jmp     loc_20B6
.text:0000000000002216 ; ---------------------------------------------------------------------------
.text:0000000000002216
.text:0000000000002216 loc_2216:                               ; CODE XREF: main+1E3↑j
.text:0000000000002216                 xor     esi, esi        ; pgid
.text:0000000000002218                 xor     edi, edi        ; pid
.text:000000000000221A                 call    _setpgid
.text:000000000000221F                 jmp     loc_1F49
.text:0000000000002224 ; ---------------------------------------------------------------------------
.text:0000000000002224
.text:0000000000002224 loc_2224:                               ; CODE XREF: main+44C↑j
.text:0000000000002224                 movzx   ebx, bh
.text:0000000000002227                 mov     [rsp+188h+stat_loc], ebx
.text:000000000000222B                 jmp     short loc_21F3
.text:000000000000222D ; ---------------------------------------------------------------------------
.text:000000000000222D
.text:000000000000222D loc_222D:                               ; CODE XREF: main+411↑j
.text:000000000000222D                 lea     rsi, aWarningSigproc ; "warning: sigprocmask"
.text:0000000000002234                 xor     edi, edi        ; domainname
.text:0000000000002236                 mov     edx, 5          ; category
.text:000000000000223B                 call    _dcgettext
.text:0000000000002240                 mov     rbx, rax
.text:0000000000002243                 call    ___errno_location
.text:0000000000002248                 mov     esi, [rax]      ; errnum
.text:000000000000224A                 mov     rdx, rbx        ; format
.text:000000000000224D                 xor     edi, edi        ; status
.text:000000000000224F                 xor     eax, eax
.text:0000000000002251                 call    _error
.text:0000000000002256                 jmp     loc_2177
.text:000000000000225B ; ---------------------------------------------------------------------------
.text:000000000000225B
.text:000000000000225B loc_225B:                               ; CODE XREF: main+2DD↑j
.text:000000000000225B                 lea     rsi, aForkSystemCall ; "fork system call failed"
.text:0000000000002262                 mov     edx, 5          ; category
.text:0000000000002267                 xor     edi, edi        ; domainname
.text:0000000000002269                 call    _dcgettext
.text:000000000000226E                 mov     rbx, rax
.text:0000000000002271                 call    ___errno_location
.text:0000000000002276                 mov     esi, [rax]      ; errnum
.text:0000000000002278                 mov     rdx, rbx        ; format
.text:000000000000227B                 xor     edi, edi        ; status
.text:000000000000227D                 xor     eax, eax
.text:000000000000227F                 mov     ebx, 7Dh ; '}'
.text:0000000000002284                 call    _error
.text:0000000000002289                 jmp     loc_20B6
.text:000000000000228E ; ---------------------------------------------------------------------------
.text:000000000000228E
.text:000000000000228E loc_228E:                               ; CODE XREF: main+43D↑j
.text:000000000000228E                 lea     rsi, aErrorWaitingFo ; "error waiting for command"
.text:0000000000002295                 mov     edx, 5          ; category
.text:000000000000229A                 xor     edi, edi        ; domainname
.text:000000000000229C                 call    _dcgettext
.text:00000000000022A1                 mov     rbx, rax
.text:00000000000022A4                 call    ___errno_location
.text:00000000000022A9                 mov     esi, [rax]      ; errnum
.text:00000000000022AB                 mov     rdx, rbx        ; format
.text:00000000000022AE                 xor     edi, edi        ; status
.text:00000000000022B0                 xor     eax, eax
.text:00000000000022B2                 call    _error
.text:00000000000022B7                 mov     [rsp+188h+stat_loc], 7Dh ; '}'
.text:00000000000022BF                 jmp     loc_21F3
.text:00000000000022C4 ; ---------------------------------------------------------------------------
.text:00000000000022C4
.text:00000000000022C4 loc_22C4:                               ; CODE XREF: main+486↑j
.text:00000000000022C4                 xor     esi, esi
.text:00000000000022C6                 xor     eax, eax
.text:00000000000022C8                 mov     edi, 4          ; option
.text:00000000000022CD                 call    _prctl
.text:00000000000022D2                 test    eax, eax
.text:00000000000022D4                 jnz     short loc_2322
.text:00000000000022D6                 xor     esi, esi        ; handler
.text:00000000000022D8                 mov     edi, ebp        ; sig
.text:00000000000022DA                 call    _signal
.text:00000000000022DF                 mov     edi, ebp        ; signo
.text:00000000000022E1                 call    unblock_signal
.text:00000000000022E6                 mov     edi, ebp        ; sig
.text:00000000000022E8                 call    _raise
.text:00000000000022ED                 jmp     loc_21EC
.text:00000000000022F2 ; ---------------------------------------------------------------------------
.text:00000000000022F2
.text:00000000000022F2 loc_22F2:                               ; CODE XREF: main+453↑j
.text:00000000000022F2                 lea     rsi, aUnknownStatusF ; "unknown status from command (%d)"
.text:00000000000022F9                 mov     edx, 5          ; category
.text:00000000000022FE                 xor     edi, edi        ; domainname
.text:0000000000002300                 call    _dcgettext
.text:0000000000002305                 mov     ecx, ebx
.text:0000000000002307                 mov     rdx, rax        ; format
.text:000000000000230A                 xor     esi, esi        ; errnum
.text:000000000000230C                 xor     edi, edi        ; status
.text:000000000000230E                 xor     eax, eax
.text:0000000000002310                 call    _error
.text:0000000000002315                 mov     [rsp+188h+stat_loc], 1
.text:000000000000231D                 jmp     loc_21F3
.text:0000000000002322 ; ---------------------------------------------------------------------------
.text:0000000000002322
.text:0000000000002322 loc_2322:                               ; CODE XREF: main+574↑j
.text:0000000000002322                 lea     rsi, aWarningDisabli ; "warning: disabling core dumps failed"
.text:0000000000002329                 xor     edi, edi        ; domainname
.text:000000000000232B                 mov     edx, 5          ; category
.text:0000000000002330                 call    _dcgettext
.text:0000000000002335                 mov     rbx, rax
.text:0000000000002338                 call    ___errno_location
.text:000000000000233D                 mov     esi, [rax]      ; errnum
.text:000000000000233F                 mov     rdx, rbx        ; format
.text:0000000000002342                 xor     edi, edi        ; status
.text:0000000000002344                 xor     eax, eax
.text:0000000000002346                 call    _error
.text:000000000000234B                 jmp     loc_21EC
.text:0000000000002350 ; ---------------------------------------------------------------------------
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: main+ED↑j
.text:0000000000002350                 xor     edi, edi        ; status
.text:0000000000002352                 call    usage
.text:0000000000002357 ; ---------------------------------------------------------------------------
.text:0000000000002357
.text:0000000000002357 loc_2357:                               ; CODE XREF: main+369↑j
.text:0000000000002357                 call    ___stack_chk_fail
.text:0000000000002357 ; } // starts at 1D60
.text:0000000000002357 main            endp
.text:0000000000002357
.text:0000000000002357 ; ---------------------------------------------------------------------------
.text:000000000000235C                 align 20h
.text:0000000000002360
.text:0000000000002360 ; =============== S U B R O U T I N E =======================================
.text:0000000000002360
.text:0000000000002360 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002360
.text:0000000000002360 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002360                 public start
.text:0000000000002360 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002360 ; __unwind {
.text:0000000000002360                 xor     ebp, ebp
.text:0000000000002362                 mov     r9, rdx         ; rtld_fini
.text:0000000000002365                 pop     rsi             ; argc
.text:0000000000002366                 mov     rdx, rsp        ; ubp_av
.text:0000000000002369                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000236D                 push    rax
.text:000000000000236E                 push    rsp             ; stack_end
.text:000000000000236F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002376                 lea     rcx, __libc_csu_init ; init
.text:000000000000237D                 lea     rdi, main       ; main
.text:0000000000002384                 call    cs:__libc_start_main_ptr
.text:000000000000238A                 hlt
.text:000000000000238A ; } // starts at 2360
.text:000000000000238A start           endp
.text:000000000000238A
.text:000000000000238A ; ---------------------------------------------------------------------------
.text:000000000000238B                 align 10h
.text:0000000000002390
.text:0000000000002390 ; =============== S U B R O U T I N E =======================================
.text:0000000000002390
.text:0000000000002390 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002390
.text:0000000000002390 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2443↓p
.text:0000000000002390                 lea     rdi, __TMC_END__
.text:0000000000002397                 push    rbp
.text:0000000000002398                 lea     rax, __TMC_END__
.text:000000000000239F                 cmp     rax, rdi
.text:00000000000023A2                 mov     rbp, rsp
.text:00000000000023A5                 jz      short loc_23C0
.text:00000000000023A7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000023AE                 test    rax, rax
.text:00000000000023B1                 jz      short loc_23C0
.text:00000000000023B3                 pop     rbp
.text:00000000000023B4                 jmp     rax
.text:00000000000023B4 ; ---------------------------------------------------------------------------
.text:00000000000023B6                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000023C0                                         ; deregister_tm_clones+21↑j
.text:00000000000023C0                 pop     rbp
.text:00000000000023C1                 retn
.text:00000000000023C1 deregister_tm_clones endp
.text:00000000000023C1
.text:00000000000023C1 ; ---------------------------------------------------------------------------
.text:00000000000023C2                 align 10h
.text:00000000000023D0
.text:00000000000023D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023D0
.text:00000000000023D0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000023D0
.text:00000000000023D0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000023D0                 lea     rdi, __TMC_END__
.text:00000000000023D7                 lea     rsi, __TMC_END__
.text:00000000000023DE                 push    rbp
.text:00000000000023DF                 sub     rsi, rdi
.text:00000000000023E2                 mov     rbp, rsp
.text:00000000000023E5                 sar     rsi, 3
.text:00000000000023E9                 mov     rax, rsi
.text:00000000000023EC                 shr     rax, 3Fh
.text:00000000000023F0                 add     rsi, rax
.text:00000000000023F3                 sar     rsi, 1
.text:00000000000023F6                 jz      short loc_2410
.text:00000000000023F8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000023FF                 test    rax, rax
.text:0000000000002402                 jz      short loc_2410
.text:0000000000002404                 pop     rbp
.text:0000000000002405                 jmp     rax
.text:0000000000002405 ; ---------------------------------------------------------------------------
.text:0000000000002407                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002410                                         ; register_tm_clones+32↑j
.text:0000000000002410                 pop     rbp
.text:0000000000002411                 retn
.text:0000000000002411 register_tm_clones endp
.text:0000000000002411
.text:0000000000002411 ; ---------------------------------------------------------------------------
.text:0000000000002412                 align 20h
.text:0000000000002420
.text:0000000000002420 ; =============== S U B R O U T I N E =======================================
.text:0000000000002420
.text:0000000000002420 ; Attributes: info_from_lumina
.text:0000000000002420
.text:0000000000002420 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002420                 cmp     cs:completed_7697, 0
.text:0000000000002427                 jnz     short locret_2458
.text:0000000000002429                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002431                 push    rbp
.text:0000000000002432                 mov     rbp, rsp
.text:0000000000002435                 jz      short loc_2443
.text:0000000000002437                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000243E                 call    __cxa_finalize
.text:0000000000002443
.text:0000000000002443 loc_2443:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002443                 call    deregister_tm_clones
.text:0000000000002448                 mov     cs:completed_7697, 1
.text:000000000000244F                 pop     rbp
.text:0000000000002450                 retn
.text:0000000000002450 ; ---------------------------------------------------------------------------
.text:0000000000002451                 align 8
.text:0000000000002458
.text:0000000000002458 locret_2458:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002458                 rep retn
.text:0000000000002458 __do_global_dtors_aux endp
.text:0000000000002458
.text:0000000000002458 ; ---------------------------------------------------------------------------
.text:000000000000245A                 align 20h
.text:0000000000002460
.text:0000000000002460 ; =============== S U B R O U T I N E =======================================
.text:0000000000002460
.text:0000000000002460 ; Attributes: bp-based frame
.text:0000000000002460
.text:0000000000002460 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002460                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002460                 push    rbp
.text:0000000000002461                 mov     rbp, rsp
.text:0000000000002464                 pop     rbp
.text:0000000000002465                 jmp     register_tm_clones
.text:0000000000002465 frame_dummy     endp
.text:0000000000002465
.text:0000000000002465 ; ---------------------------------------------------------------------------
.text:000000000000246A                 align 10h
.text:0000000000002470
.text:0000000000002470 ; =============== S U B R O U T I N E =======================================
.text:0000000000002470
.text:0000000000002470
.text:0000000000002470 chld            proc near               ; DATA XREF: main+29C↑o
.text:0000000000002470 ; __unwind {
.text:0000000000002470                 rep retn
.text:0000000000002470 ; } // starts at 2470
.text:0000000000002470 chld            endp
.text:0000000000002470
.text:0000000000002470 ; ---------------------------------------------------------------------------
.text:0000000000002472                 align 20h
.text:0000000000002480
.text:0000000000002480 ; =============== S U B R O U T I N E =======================================
.text:0000000000002480
.text:0000000000002480
.text:0000000000002480 settimeout      proc near               ; CODE XREF: main+392↑p
.text:0000000000002480                                         ; cleanup+B3↓p
.text:0000000000002480
.text:0000000000002480 var_50          = qword ptr -50h
.text:0000000000002480 timerid         = qword ptr -40h
.text:0000000000002480 value           = itimerspec ptr -38h
.text:0000000000002480 var_10          = qword ptr -10h
.text:0000000000002480
.text:0000000000002480 ; __unwind {
.text:0000000000002480                 push    rbx
.text:0000000000002481                 mov     ebx, edi
.text:0000000000002483                 sub     rsp, 50h
.text:0000000000002487                 movsd   [rsp+58h+var_50], xmm0
.text:000000000000248D                 mov     rax, fs:28h
.text:0000000000002496                 mov     [rsp+58h+var_10], rax
.text:000000000000249B                 xor     eax, eax
.text:000000000000249D                 call    dtotimespec
.text:00000000000024A2                 mov     [rsp+58h+value.it_value.tv_nsec], rdx
.text:00000000000024A7                 lea     rdx, [rsp+58h+timerid] ; timerid
.text:00000000000024AC                 xor     esi, esi        ; evp
.text:00000000000024AE                 xor     edi, edi        ; clock_id
.text:00000000000024B0                 mov     [rsp+58h+value.it_interval.tv_sec], 0
.text:00000000000024B9                 mov     [rsp+58h+value.it_interval.tv_nsec], 0
.text:00000000000024C2                 mov     [rsp+58h+value.it_value.tv_sec], rax
.text:00000000000024C7                 call    _timer_create
.text:00000000000024CC                 test    eax, eax
.text:00000000000024CE                 jz      short loc_2538
.text:00000000000024D0                 test    bl, bl
.text:00000000000024D2                 jz      short loc_24E1
.text:00000000000024D4                 call    ___errno_location
.text:00000000000024D9                 cmp     dword ptr [rax], 26h ; '&'
.text:00000000000024DC                 mov     rbx, rax
.text:00000000000024DF                 jnz     short loc_2560
.text:00000000000024E1
.text:00000000000024E1 loc_24E1:                               ; CODE XREF: settimeout+52↑j
.text:00000000000024E1                                         ; settimeout+DD↓j ...
.text:00000000000024E1                 movsd   xmm1, [rsp+58h+var_50]
.text:00000000000024E7                 mov     edi, 0FFFFFFFFh
.text:00000000000024EC                 ucomisd xmm1, cs:qword_6870
.text:00000000000024F4                 jnb     short loc_2512
.text:00000000000024F6                 cvttsd2si rdx, xmm1
.text:00000000000024FB                 pxor    xmm0, xmm0
.text:00000000000024FF                 xor     edi, edi
.text:0000000000002501                 mov     eax, edx
.text:0000000000002503                 cvtsi2sd xmm0, rax
.text:0000000000002508                 ucomisd xmm1, xmm0
.text:000000000000250C                 setnbe  dil
.text:0000000000002510                 add     edi, edx        ; seconds
.text:0000000000002512
.text:0000000000002512 loc_2512:                               ; CODE XREF: settimeout+74↑j
.text:0000000000002512                 call    _alarm
.text:0000000000002517
.text:0000000000002517 loc_2517:                               ; CODE XREF: settimeout+CD↓j
.text:0000000000002517                 mov     rax, [rsp+58h+var_10]
.text:000000000000251C                 xor     rax, fs:28h
.text:0000000000002525                 jnz     loc_25BB
.text:000000000000252B                 add     rsp, 50h
.text:000000000000252F                 pop     rbx
.text:0000000000002530                 retn
.text:0000000000002530 ; ---------------------------------------------------------------------------
.text:0000000000002531                 align 8
.text:0000000000002538
.text:0000000000002538 loc_2538:                               ; CODE XREF: settimeout+4E↑j
.text:0000000000002538                 mov     rdi, [rsp+58h+timerid] ; timerid
.text:000000000000253D                 lea     rdx, [rsp+58h+value] ; value
.text:0000000000002542                 xor     ecx, ecx        ; ovalue
.text:0000000000002544                 xor     esi, esi        ; flags
.text:0000000000002546                 call    _timer_settime
.text:000000000000254B                 test    eax, eax
.text:000000000000254D                 jz      short loc_2517
.text:000000000000254F                 test    bl, bl
.text:0000000000002551                 jnz     short loc_2590
.text:0000000000002553
.text:0000000000002553 loc_2553:                               ; CODE XREF: settimeout+139↓j
.text:0000000000002553                 mov     rdi, [rsp+58h+timerid] ; timerid
.text:0000000000002558                 call    _timer_delete
.text:000000000000255D                 jmp     short loc_24E1
.text:000000000000255D ; ---------------------------------------------------------------------------
.text:000000000000255F                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: settimeout+5F↑j
.text:0000000000002560                 lea     rsi, aWarningTimerCr ; "warning: timer_create"
.text:0000000000002567                 xor     edi, edi        ; domainname
.text:0000000000002569                 mov     edx, 5          ; category
.text:000000000000256E                 call    _dcgettext
.text:0000000000002573                 mov     esi, [rbx]      ; errnum
.text:0000000000002575                 mov     rdx, rax        ; format
.text:0000000000002578                 xor     edi, edi        ; status
.text:000000000000257A                 xor     eax, eax
.text:000000000000257C                 call    _error
.text:0000000000002581                 jmp     loc_24E1
.text:0000000000002581 ; ---------------------------------------------------------------------------
.text:0000000000002586                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: settimeout+D1↑j
.text:0000000000002590                 lea     rsi, aWarningTimerSe ; "warning: timer_settime"
.text:0000000000002597                 xor     edi, edi        ; domainname
.text:0000000000002599                 mov     edx, 5          ; category
.text:000000000000259E                 call    _dcgettext
.text:00000000000025A3                 mov     rbx, rax
.text:00000000000025A6                 call    ___errno_location
.text:00000000000025AB                 mov     esi, [rax]      ; errnum
.text:00000000000025AD                 mov     rdx, rbx        ; format
.text:00000000000025B0                 xor     edi, edi        ; status
.text:00000000000025B2                 xor     eax, eax
.text:00000000000025B4                 call    _error
.text:00000000000025B9                 jmp     short loc_2553
.text:00000000000025BB ; ---------------------------------------------------------------------------
.text:00000000000025BB
.text:00000000000025BB loc_25BB:                               ; CODE XREF: settimeout+A5↑j
.text:00000000000025BB                 call    ___stack_chk_fail
.text:00000000000025BB ; } // starts at 2480
.text:00000000000025BB settimeout      endp
.text:00000000000025BB
.text:00000000000025C0
.text:00000000000025C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025C0
.text:00000000000025C0
.text:00000000000025C0 ; __int64 __fastcall unblock_signal(int signo)
.text:00000000000025C0 unblock_signal  proc near               ; CODE XREF: main+2CA↑p
.text:00000000000025C0                                         ; main+382↑p ...
.text:00000000000025C0
.text:00000000000025C0 var_20          = qword ptr -20h
.text:00000000000025C0
.text:00000000000025C0 ; __unwind {
.text:00000000000025C0                 push    rbp
.text:00000000000025C1                 push    rbx
.text:00000000000025C2                 mov     ebp, edi
.text:00000000000025C4                 sub     rsp, 98h
.text:00000000000025CB                 mov     rbx, rsp
.text:00000000000025CE                 mov     rdi, rbx        ; set
.text:00000000000025D1                 mov     rax, fs:28h
.text:00000000000025DA                 mov     [rsp+0A8h+var_20], rax
.text:00000000000025E2                 xor     eax, eax
.text:00000000000025E4                 call    _sigemptyset
.text:00000000000025E9                 mov     esi, ebp        ; signo
.text:00000000000025EB                 mov     rdi, rbx        ; set
.text:00000000000025EE                 call    _sigaddset
.text:00000000000025F3                 xor     edx, edx        ; oset
.text:00000000000025F5                 mov     rsi, rbx        ; set
.text:00000000000025F8                 mov     edi, 1          ; how
.text:00000000000025FD                 call    _sigprocmask
.text:0000000000002602                 test    eax, eax
.text:0000000000002604                 jz      short loc_262F
.text:0000000000002606                 lea     rsi, aWarningSigproc ; "warning: sigprocmask"
.text:000000000000260D                 mov     edx, 5          ; category
.text:0000000000002612                 xor     edi, edi        ; domainname
.text:0000000000002614                 call    _dcgettext
.text:0000000000002619                 mov     rbx, rax
.text:000000000000261C                 call    ___errno_location
.text:0000000000002621                 mov     esi, [rax]      ; errnum
.text:0000000000002623                 mov     rdx, rbx        ; format
.text:0000000000002626                 xor     edi, edi        ; status
.text:0000000000002628                 xor     eax, eax
.text:000000000000262A                 call    _error
.text:000000000000262F
.text:000000000000262F loc_262F:                               ; CODE XREF: unblock_signal+44↑j
.text:000000000000262F                 mov     rax, [rsp+0A8h+var_20]
.text:0000000000002637                 xor     rax, fs:28h
.text:0000000000002640                 jnz     short loc_264C
.text:0000000000002642                 add     rsp, 98h
.text:0000000000002649                 pop     rbx
.text:000000000000264A                 pop     rbp
.text:000000000000264B                 retn
.text:000000000000264C ; ---------------------------------------------------------------------------
.text:000000000000264C
.text:000000000000264C loc_264C:                               ; CODE XREF: unblock_signal+80↑j
.text:000000000000264C                 call    ___stack_chk_fail
.text:000000000000264C ; } // starts at 25C0
.text:000000000000264C unblock_signal  endp
.text:000000000000264C
.text:000000000000264C ; ---------------------------------------------------------------------------
.text:0000000000002651                 align 20h
.text:0000000000002660
.text:0000000000002660 ; =============== S U B R O U T I N E =======================================
.text:0000000000002660
.text:0000000000002660
.text:0000000000002660 ; __int64 __fastcall cleanup(int sig)
.text:0000000000002660 cleanup         proc near               ; DATA XREF: main+204↑o
.text:0000000000002660
.text:0000000000002660 var_40          = qword ptr -40h
.text:0000000000002660 var_38          = byte ptr -38h
.text:0000000000002660 var_20          = qword ptr -20h
.text:0000000000002660
.text:0000000000002660 ; __unwind {
.text:0000000000002660                 push    r12
.text:0000000000002662                 push    rbp
.text:0000000000002663                 push    rbx
.text:0000000000002664                 mov     ebx, edi
.text:0000000000002666                 sub     rsp, 30h
.text:000000000000266A                 mov     rax, fs:28h
.text:0000000000002673                 mov     [rsp+48h+var_20], rax
.text:0000000000002678                 xor     eax, eax
.text:000000000000267A                 cmp     edi, 0Eh
.text:000000000000267D                 jnz     short loc_268F
.text:000000000000267F                 mov     ebx, cs:term_signal
.text:0000000000002685                 mov     cs:timed_out, 1
.text:000000000000268F
.text:000000000000268F loc_268F:                               ; CODE XREF: cleanup+1D↑j
.text:000000000000268F                 mov     ebp, cs:monitored_pid
.text:0000000000002695                 test    ebp, ebp
.text:0000000000002697                 jz      loc_2838
.text:000000000000269D                 movsd   xmm0, cs:kill_after
.text:00000000000026A5                 ucomisd xmm0, cs:qword_6878
.text:00000000000026AD                 jp      short loc_26F0
.text:00000000000026AF                 jnz     short loc_26F0
.text:00000000000026B1                 cmp     cs:verbose, 0
.text:00000000000026B8                 jnz     short loc_2730
.text:00000000000026BA
.text:00000000000026BA loc_26BA:                               ; CODE XREF: cleanup+125↓j
.text:00000000000026BA                                         ; cleanup+137↓j
.text:00000000000026BA                 mov     esi, ebx        ; sig
.text:00000000000026BC                 mov     edi, ebp        ; pid
.text:00000000000026BE                 call    _kill
.text:00000000000026C3                 cmp     cs:foreground, 0
.text:00000000000026CA                 jz      loc_27A0
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: cleanup+158↓j
.text:00000000000026D0                                         ; cleanup+161↓j ...
.text:00000000000026D0                 mov     rax, [rsp+48h+var_20]
.text:00000000000026D5                 xor     rax, fs:28h
.text:00000000000026DE                 jnz     loc_2843
.text:00000000000026E4                 add     rsp, 30h
.text:00000000000026E8                 pop     rbx
.text:00000000000026E9                 pop     rbp
.text:00000000000026EA                 pop     r12
.text:00000000000026EC                 retn
.text:00000000000026EC ; ---------------------------------------------------------------------------
.text:00000000000026ED                 align 10h
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: cleanup+4D↑j
.text:00000000000026F0                                         ; cleanup+4F↑j
.text:00000000000026F0                 movsd   [rsp+48h+var_40], xmm0
.text:00000000000026F6                 call    ___errno_location
.text:00000000000026FB                 movsd   xmm0, [rsp+48h+var_40]
.text:0000000000002701                 xor     edi, edi
.text:0000000000002703                 mov     rbp, rax
.text:0000000000002706                 mov     r12d, [rax]
.text:0000000000002709                 mov     cs:term_signal, 9
.text:0000000000002713                 call    settimeout
.text:0000000000002718                 cmp     cs:verbose, 0
.text:000000000000271F                 mov     cs:kill_after, 0
.text:000000000000272A                 mov     [rbp+0], r12d
.text:000000000000272E                 jz      short loc_277D
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: cleanup+58↑j
.text:0000000000002730                 lea     rbp, [rsp+48h+var_38]
.text:0000000000002735                 mov     edi, ebx
.text:0000000000002737                 mov     rsi, rbp
.text:000000000000273A                 call    sig2str
.text:000000000000273F                 test    eax, eax
.text:0000000000002741                 jnz     loc_2810
.text:0000000000002747
.text:0000000000002747 loc_2747:                               ; CODE XREF: cleanup+1D3↓j
.text:0000000000002747                 mov     rdi, cs:command
.text:000000000000274E                 call    quote
.text:0000000000002753                 lea     rsi, aSendingSignalS ; "sending signal %s to command %s"
.text:000000000000275A                 mov     r12, rax
.text:000000000000275D                 mov     edx, 5          ; category
.text:0000000000002762                 xor     edi, edi        ; domainname
.text:0000000000002764                 call    _dcgettext
.text:0000000000002769                 mov     r8, r12
.text:000000000000276C                 mov     rdx, rax        ; format
.text:000000000000276F                 mov     rcx, rbp
.text:0000000000002772                 xor     esi, esi        ; errnum
.text:0000000000002774                 xor     edi, edi        ; status
.text:0000000000002776                 xor     eax, eax
.text:0000000000002778                 call    _error
.text:000000000000277D
.text:000000000000277D loc_277D:                               ; CODE XREF: cleanup+CE↑j
.text:000000000000277D                 mov     ebp, cs:monitored_pid
.text:0000000000002783                 test    ebp, ebp
.text:0000000000002785                 jnz     loc_26BA
.text:000000000000278B                 mov     esi, (offset dword_0+1) ; handler
.text:0000000000002790                 mov     edi, ebx        ; sig
.text:0000000000002792                 call    _signal
.text:0000000000002797                 jmp     loc_26BA
.text:0000000000002797 ; ---------------------------------------------------------------------------
.text:000000000000279C                 align 20h
.text:00000000000027A0
.text:00000000000027A0 loc_27A0:                               ; CODE XREF: cleanup+6A↑j
.text:00000000000027A0                 mov     esi, (offset dword_0+1) ; handler
.text:00000000000027A5                 mov     edi, ebx        ; sig
.text:00000000000027A7                 call    _signal
.text:00000000000027AC                 xor     edi, edi        ; pid
.text:00000000000027AE                 mov     esi, ebx        ; sig
.text:00000000000027B0                 call    _kill
.text:00000000000027B5                 cmp     ebx, 9
.text:00000000000027B8                 jz      loc_26D0
.text:00000000000027BE                 cmp     ebx, 12h
.text:00000000000027C1                 jz      loc_26D0
.text:00000000000027C7                 test    ebp, ebp
.text:00000000000027C9                 jnz     short loc_27DA
.text:00000000000027CB                 mov     esi, (offset dword_0+1) ; handler
.text:00000000000027D0                 mov     edi, 12h        ; sig
.text:00000000000027D5                 call    _signal
.text:00000000000027DA
.text:00000000000027DA loc_27DA:                               ; CODE XREF: cleanup+169↑j
.text:00000000000027DA                 mov     edi, ebp        ; pid
.text:00000000000027DC                 mov     esi, 12h        ; sig
.text:00000000000027E1                 call    _kill
.text:00000000000027E6                 mov     esi, (offset dword_0+1) ; handler
.text:00000000000027EB                 mov     edi, 12h        ; sig
.text:00000000000027F0                 call    _signal
.text:00000000000027F5                 mov     esi, 12h        ; sig
.text:00000000000027FA                 xor     edi, edi        ; pid
.text:00000000000027FC                 call    _kill
.text:0000000000002801                 jmp     loc_26D0
.text:0000000000002801 ; ---------------------------------------------------------------------------
.text:0000000000002806                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: cleanup+E1↑j
.text:0000000000002810                 lea     r8, aD          ; "%d"
.text:0000000000002817                 mov     r9d, ebx
.text:000000000000281A                 mov     ecx, 13h
.text:000000000000281F                 mov     edx, 1
.text:0000000000002824                 mov     esi, 13h
.text:0000000000002829                 mov     rdi, rbp
.text:000000000000282C                 xor     eax, eax
.text:000000000000282E                 call    ___snprintf_chk
.text:0000000000002833                 jmp     loc_2747
.text:0000000000002838 ; ---------------------------------------------------------------------------
.text:0000000000002838
.text:0000000000002838 loc_2838:                               ; CODE XREF: cleanup+37↑j
.text:0000000000002838                 lea     edi, [rbx+80h]  ; status
.text:000000000000283E                 call    __exit
.text:0000000000002843 ; ---------------------------------------------------------------------------
.text:0000000000002843
.text:0000000000002843 loc_2843:                               ; CODE XREF: cleanup+7E↑j
.text:0000000000002843                 call    ___stack_chk_fail
.text:0000000000002843 ; } // starts at 2660
.text:0000000000002843 cleanup         endp
.text:0000000000002843
.text:0000000000002843 ; ---------------------------------------------------------------------------
.text:0000000000002848                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850 ; Attributes: noreturn
.text:0000000000002850
.text:0000000000002850 ; void __fastcall __noreturn usage(int status)
.text:0000000000002850                 public usage
.text:0000000000002850 usage           proc near               ; CODE XREF: main+CF↑p
.text:0000000000002850                                         ; main+5F2↑p ...
.text:0000000000002850
.text:0000000000002850 var_A8          = qword ptr -0A8h
.text:0000000000002850 var_A0          = qword ptr -0A0h
.text:0000000000002850 var_98          = qword ptr -98h
.text:0000000000002850 var_90          = qword ptr -90h
.text:0000000000002850 var_88          = qword ptr -88h
.text:0000000000002850 var_80          = qword ptr -80h
.text:0000000000002850 var_78          = qword ptr -78h
.text:0000000000002850 var_70          = qword ptr -70h
.text:0000000000002850 var_68          = qword ptr -68h
.text:0000000000002850 var_60          = qword ptr -60h
.text:0000000000002850 var_58          = qword ptr -58h
.text:0000000000002850 var_50          = qword ptr -50h
.text:0000000000002850 var_48          = qword ptr -48h
.text:0000000000002850 var_40          = qword ptr -40h
.text:0000000000002850 var_30          = qword ptr -30h
.text:0000000000002850
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 push    r13
.text:0000000000002852                 push    r12
.text:0000000000002854                 mov     edx, 5          ; category
.text:0000000000002859                 push    rbp
.text:000000000000285A                 push    rbx
.text:000000000000285B                 mov     ebp, edi
.text:000000000000285D                 sub     rsp, 88h
.text:0000000000002864                 mov     rbx, cs:program_name
.text:000000000000286B                 mov     rax, fs:28h
.text:0000000000002874                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002879                 xor     eax, eax
.text:000000000000287B                 test    edi, edi
.text:000000000000287D                 jz      short loc_28AD
.text:000000000000287F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002886                 xor     edi, edi        ; domainname
.text:0000000000002888                 call    _dcgettext
.text:000000000000288D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002894                 mov     rdx, rax
.text:0000000000002897                 mov     rcx, rbx
.text:000000000000289A                 mov     esi, 1
.text:000000000000289F                 xor     eax, eax
.text:00000000000028A1                 call    ___fprintf_chk
.text:00000000000028A6
.text:00000000000028A6 loc_28A6:                               ; CODE XREF: usage+336↓j
.text:00000000000028A6                 mov     edi, ebp        ; status
.text:00000000000028A8                 call    _exit
.text:00000000000028AD ; ---------------------------------------------------------------------------
.text:00000000000028AD
.text:00000000000028AD loc_28AD:                               ; CODE XREF: usage+2D↑j
.text:00000000000028AD                 lea     rsi, aUsageSOptionDu ; "Usage: %s [OPTION] DURATION COMMAND [AR"...
.text:00000000000028B4                 xor     edi, edi        ; domainname
.text:00000000000028B6                 call    _dcgettext
.text:00000000000028BB                 mov     rcx, rbx
.text:00000000000028BE                 mov     rdx, rbx
.text:00000000000028C1                 mov     rsi, rax
.text:00000000000028C4                 mov     edi, 1
.text:00000000000028C9                 xor     eax, eax
.text:00000000000028CB                 call    ___printf_chk
.text:00000000000028D0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000028D7                 lea     rsi, aStartCommandAn ; "Start COMMAND, and kill it if still run"...
.text:00000000000028DE                 mov     edx, 5          ; category
.text:00000000000028E3                 xor     edi, edi        ; domainname
.text:00000000000028E5                 call    _dcgettext
.text:00000000000028EA                 mov     rsi, rbx        ; stream
.text:00000000000028ED                 mov     rdi, rax        ; s
.text:00000000000028F0                 call    _fputs_unlocked
.text:00000000000028F5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000028FC                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002903                 mov     edx, 5          ; category
.text:0000000000002908                 xor     edi, edi        ; domainname
.text:000000000000290A                 call    _dcgettext
.text:000000000000290F                 mov     rsi, rbx        ; stream
.text:0000000000002912                 mov     rdi, rax        ; s
.text:0000000000002915                 call    _fputs_unlocked
.text:000000000000291A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002921                 lea     rsi, aPreserveStatus ; "      --preserve-status\n              "...
.text:0000000000002928                 mov     edx, 5          ; category
.text:000000000000292D                 xor     edi, edi        ; domainname
.text:000000000000292F                 call    _dcgettext
.text:0000000000002934                 mov     rsi, rbx        ; stream
.text:0000000000002937                 mov     rdi, rax        ; s
.text:000000000000293A                 call    _fputs_unlocked
.text:000000000000293F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002946                 lea     rsi, aVVerboseDiagno ; "  -v, --verbose  diagnose to stderr any"...
.text:000000000000294D                 mov     edx, 5          ; category
.text:0000000000002952                 xor     edi, edi        ; domainname
.text:0000000000002954                 call    _dcgettext
.text:0000000000002959                 mov     rsi, rbx        ; stream
.text:000000000000295C                 mov     rdi, rax        ; s
.text:000000000000295F                 call    _fputs_unlocked
.text:0000000000002964                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000296B                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002972                 mov     edx, 5          ; category
.text:0000000000002977                 xor     edi, edi        ; domainname
.text:0000000000002979                 call    _dcgettext
.text:000000000000297E                 mov     rsi, rbx        ; stream
.text:0000000000002981                 mov     rdi, rax        ; s
.text:0000000000002984                 call    _fputs_unlocked
.text:0000000000002989                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002990                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002997                 mov     edx, 5          ; category
.text:000000000000299C                 xor     edi, edi        ; domainname
.text:000000000000299E                 call    _dcgettext
.text:00000000000029A3                 mov     rsi, rbx        ; stream
.text:00000000000029A6                 mov     rdi, rax        ; s
.text:00000000000029A9                 call    _fputs_unlocked
.text:00000000000029AE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029B5                 lea     rsi, aDurationIsAFlo ; "\nDURATION is a floating point number w"...
.text:00000000000029BC                 mov     edx, 5          ; category
.text:00000000000029C1                 xor     edi, edi        ; domainname
.text:00000000000029C3                 call    _dcgettext
.text:00000000000029C8                 mov     rsi, rbx        ; stream
.text:00000000000029CB                 mov     rdi, rax        ; s
.text:00000000000029CE                 call    _fputs_unlocked
.text:00000000000029D3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000029DA                 lea     rsi, aIfTheCommandTi ; "\nIf the command times out, and --prese"...
.text:00000000000029E1                 mov     edx, 5          ; category
.text:00000000000029E6                 xor     edi, edi        ; domainname
.text:00000000000029E8                 call    _dcgettext
.text:00000000000029ED                 mov     rsi, rbx        ; stream
.text:00000000000029F0                 mov     rdi, rax        ; s
.text:00000000000029F3                 lea     rbx, aTimeout   ; "timeout"
.text:00000000000029FA                 call    _fputs_unlocked
.text:00000000000029FF                 lea     rax, asc_5ED1   ; "["
.text:0000000000002A06                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002A0D                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002A16                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002A1F                 mov     rdx, rsp
.text:0000000000002A22                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002A26                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002A2D                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002A32                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002A39                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002A3E                 lea     rax, domainname ; "coreutils"
.text:0000000000002A45                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002A4A                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002A51                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002A56                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002A5D                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002A62                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002A67                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002A6E                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002A73                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002A7A                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002A7F                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002A84                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002A89                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002A8E                 xchg    ax, ax
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: usage+25D↓j
.text:0000000000002A90                 add     rdx, 10h
.text:0000000000002A94                 mov     rdi, [rdx]
.text:0000000000002A97                 test    rdi, rdi
.text:0000000000002A9A                 jz      short loc_2AAF
.text:0000000000002A9C                 mov     ecx, 8
.text:0000000000002AA1                 mov     rsi, rbx
.text:0000000000002AA4                 repe cmpsb
.text:0000000000002AA6                 setnbe  al
.text:0000000000002AA9                 sbb     al, 0
.text:0000000000002AAB                 test    al, al
.text:0000000000002AAD                 jnz     short loc_2A90
.text:0000000000002AAF
.text:0000000000002AAF loc_2AAF:                               ; CODE XREF: usage+24A↑j
.text:0000000000002AAF                 mov     r12, [rdx+8]
.text:0000000000002AB3                 xor     edi, edi        ; domainname
.text:0000000000002AB5                 mov     edx, 5          ; category
.text:0000000000002ABA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002AC1                 test    r12, r12
.text:0000000000002AC4                 jz      loc_2B8B
.text:0000000000002ACA                 call    _dcgettext
.text:0000000000002ACF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002AD6                 lea     rdx, unk_5F47
.text:0000000000002ADD                 mov     rsi, rax
.text:0000000000002AE0                 mov     edi, 1
.text:0000000000002AE5                 xor     eax, eax
.text:0000000000002AE7                 call    ___printf_chk
.text:0000000000002AEC                 xor     esi, esi        ; locale
.text:0000000000002AEE                 mov     edi, 5          ; category
.text:0000000000002AF3                 call    _setlocale
.text:0000000000002AF8                 test    rax, rax
.text:0000000000002AFB                 jz      short loc_2B19
.text:0000000000002AFD                 lea     rsi, s2         ; "en_"
.text:0000000000002B04                 mov     edx, 3          ; n
.text:0000000000002B09                 mov     rdi, rax        ; s1
.text:0000000000002B0C                 call    _strncmp
.text:0000000000002B11                 test    eax, eax
.text:0000000000002B13                 jnz     loc_2C20
.text:0000000000002B19
.text:0000000000002B19 loc_2B19:                               ; CODE XREF: usage+2AB↑j
.text:0000000000002B19                                         ; usage+3F5↓j
.text:0000000000002B19                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002B20                 xor     edi, edi        ; domainname
.text:0000000000002B22                 mov     edx, 5          ; category
.text:0000000000002B27                 call    _dcgettext
.text:0000000000002B2C                 lea     rcx, aTimeout   ; "timeout"
.text:0000000000002B33                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002B3A                 mov     rsi, rax
.text:0000000000002B3D                 mov     edi, 1
.text:0000000000002B42                 xor     eax, eax
.text:0000000000002B44                 call    ___printf_chk
.text:0000000000002B49                 cmp     r12, rbx
.text:0000000000002B4C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002B53                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002B5A                 cmovz   rbx, rcx
.text:0000000000002B5E
.text:0000000000002B5E loc_2B5E:                               ; CODE XREF: usage+3C4↓j
.text:0000000000002B5E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002B65                 xor     edi, edi        ; domainname
.text:0000000000002B67                 mov     edx, 5          ; category
.text:0000000000002B6C                 call    _dcgettext
.text:0000000000002B71                 mov     rcx, rbx
.text:0000000000002B74                 mov     rsi, rax
.text:0000000000002B77                 mov     rdx, r12
.text:0000000000002B7A                 mov     edi, 1
.text:0000000000002B7F                 xor     eax, eax
.text:0000000000002B81                 call    ___printf_chk
.text:0000000000002B86                 jmp     loc_28A6
.text:0000000000002B8B ; ---------------------------------------------------------------------------
.text:0000000000002B8B
.text:0000000000002B8B loc_2B8B:                               ; CODE XREF: usage+274↑j
.text:0000000000002B8B                 call    _dcgettext
.text:0000000000002B90                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002B97                 lea     rdx, unk_5F47
.text:0000000000002B9E                 mov     rsi, rax
.text:0000000000002BA1                 mov     edi, 1
.text:0000000000002BA6                 xor     eax, eax
.text:0000000000002BA8                 call    ___printf_chk
.text:0000000000002BAD                 xor     esi, esi        ; locale
.text:0000000000002BAF                 mov     edi, 5          ; category
.text:0000000000002BB4                 call    _setlocale
.text:0000000000002BB9                 test    rax, rax
.text:0000000000002BBC                 jz      short loc_2BD6
.text:0000000000002BBE                 lea     rsi, s2         ; "en_"
.text:0000000000002BC5                 mov     edx, 3          ; n
.text:0000000000002BCA                 mov     rdi, rax        ; s1
.text:0000000000002BCD                 call    _strncmp
.text:0000000000002BD2                 test    eax, eax
.text:0000000000002BD4                 jnz     short loc_2C19
.text:0000000000002BD6
.text:0000000000002BD6 loc_2BD6:                               ; CODE XREF: usage+36C↑j
.text:0000000000002BD6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002BDD                 mov     edx, 5          ; category
.text:0000000000002BE2                 xor     edi, edi        ; domainname
.text:0000000000002BE4                 lea     r12, aTimeout   ; "timeout"
.text:0000000000002BEB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002BF2                 call    _dcgettext
.text:0000000000002BF7                 lea     rcx, aTimeout   ; "timeout"
.text:0000000000002BFE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002C05                 mov     rsi, rax
.text:0000000000002C08                 mov     edi, 1
.text:0000000000002C0D                 xor     eax, eax
.text:0000000000002C0F                 call    ___printf_chk
.text:0000000000002C14                 jmp     loc_2B5E
.text:0000000000002C19 ; ---------------------------------------------------------------------------
.text:0000000000002C19
.text:0000000000002C19 loc_2C19:                               ; CODE XREF: usage+384↑j
.text:0000000000002C19                 lea     r12, aTimeout   ; "timeout"
.text:0000000000002C20
.text:0000000000002C20 loc_2C20:                               ; CODE XREF: usage+2C3↑j
.text:0000000000002C20                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C27                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002C2E                 xor     edi, edi        ; domainname
.text:0000000000002C30                 mov     edx, 5          ; category
.text:0000000000002C35                 call    _dcgettext
.text:0000000000002C3A                 mov     rsi, r13        ; stream
.text:0000000000002C3D                 mov     rdi, rax        ; s
.text:0000000000002C40                 call    _fputs_unlocked
.text:0000000000002C45                 jmp     loc_2B19
.text:0000000000002C45 ; } // starts at 2850
.text:0000000000002C45 usage           endp
.text:0000000000002C45
.text:0000000000002C45 ; ---------------------------------------------------------------------------
.text:0000000000002C4A                 align 10h
.text:0000000000002C50
.text:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C50
.text:0000000000002C50
.text:0000000000002C50 parse_duration  proc near               ; CODE XREF: main+13F↑p
.text:0000000000002C50                                         ; main+1BB↑p
.text:0000000000002C50
.text:0000000000002C50 var_20          = qword ptr -20h
.text:0000000000002C50 var_18          = qword ptr -18h
.text:0000000000002C50 var_10          = qword ptr -10h
.text:0000000000002C50
.text:0000000000002C50 ; __unwind {
.text:0000000000002C50                 push    rbx
.text:0000000000002C51                 mov     rbx, rdi
.text:0000000000002C54                 sub     rsp, 20h
.text:0000000000002C58                 lea     rcx, cl_strtod
.text:0000000000002C5F                 lea     rdx, [rsp+28h+var_20]
.text:0000000000002C64                 lea     rsi, [rsp+28h+var_18]
.text:0000000000002C69                 mov     rax, fs:28h
.text:0000000000002C72                 mov     [rsp+28h+var_10], rax
.text:0000000000002C77                 xor     eax, eax
.text:0000000000002C79                 call    xstrtod
.text:0000000000002C7E                 test    al, al
.text:0000000000002C80                 jnz     short loc_2C8C
.text:0000000000002C82                 call    ___errno_location
.text:0000000000002C87                 cmp     dword ptr [rax], 22h ; '"'
.text:0000000000002C8A                 jnz     short loc_2D02
.text:0000000000002C8C
.text:0000000000002C8C loc_2C8C:                               ; CODE XREF: parse_duration+30↑j
.text:0000000000002C8C                 movsd   xmm0, [rsp+28h+var_20]
.text:0000000000002C92                 ucomisd xmm0, cs:qword_6878
.text:0000000000002C9A                 jb      short loc_2D02
.text:0000000000002C9C                 mov     rdx, [rsp+28h+var_18]
.text:0000000000002CA1                 movzx   eax, byte ptr [rdx]
.text:0000000000002CA4                 test    al, al
.text:0000000000002CA6                 jz      short loc_2CC0
.text:0000000000002CA8                 cmp     byte ptr [rdx+1], 0
.text:0000000000002CAC                 jnz     short loc_2D02
.text:0000000000002CAE                 cmp     al, 68h ; 'h'
.text:0000000000002CB0                 jz      short loc_2CE0
.text:0000000000002CB2                 jg      short loc_2CF0
.text:0000000000002CB4                 cmp     al, 64h ; 'd'
.text:0000000000002CB6                 jnz     short loc_2D02
.text:0000000000002CB8                 mulsd   xmm0, cs:qword_6890
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: parse_duration+56↑j
.text:0000000000002CC0                                         ; parse_duration+98↓j ...
.text:0000000000002CC0                 mov     rax, [rsp+28h+var_10]
.text:0000000000002CC5                 xor     rax, fs:28h
.text:0000000000002CCE                 jnz     short loc_2D3B
.text:0000000000002CD0                 add     rsp, 20h
.text:0000000000002CD4                 pop     rbx
.text:0000000000002CD5                 retn
.text:0000000000002CD5 ; ---------------------------------------------------------------------------
.text:0000000000002CD6                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: parse_duration+60↑j
.text:0000000000002CE0                 mulsd   xmm0, cs:qword_6888
.text:0000000000002CE8                 jmp     short loc_2CC0
.text:0000000000002CE8 ; ---------------------------------------------------------------------------
.text:0000000000002CEA                 align 10h
.text:0000000000002CF0
.text:0000000000002CF0 loc_2CF0:                               ; CODE XREF: parse_duration+62↑j
.text:0000000000002CF0                 cmp     al, 6Dh ; 'm'
.text:0000000000002CF2                 jnz     short loc_2CFE
.text:0000000000002CF4                 mulsd   xmm0, cs:qword_6880
.text:0000000000002CFC                 jmp     short loc_2CC0
.text:0000000000002CFE ; ---------------------------------------------------------------------------
.text:0000000000002CFE
.text:0000000000002CFE loc_2CFE:                               ; CODE XREF: parse_duration+A2↑j
.text:0000000000002CFE                 cmp     al, 73h ; 's'
.text:0000000000002D00                 jz      short loc_2CC0
.text:0000000000002D02
.text:0000000000002D02 loc_2D02:                               ; CODE XREF: parse_duration+3A↑j
.text:0000000000002D02                                         ; parse_duration+4A↑j ...
.text:0000000000002D02                 mov     rdi, rbx
.text:0000000000002D05                 call    quote
.text:0000000000002D0A                 lea     rsi, aInvalidTimeInt ; "invalid time interval %s"
.text:0000000000002D11                 mov     rbx, rax
.text:0000000000002D14                 mov     edx, 5          ; category
.text:0000000000002D19                 xor     edi, edi        ; domainname
.text:0000000000002D1B                 call    _dcgettext
.text:0000000000002D20                 xor     edi, edi        ; status
.text:0000000000002D22                 mov     rdx, rax        ; format
.text:0000000000002D25                 mov     rcx, rbx
.text:0000000000002D28                 xor     esi, esi        ; errnum
.text:0000000000002D2A                 xor     eax, eax
.text:0000000000002D2C                 call    _error
.text:0000000000002D31                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000002D36                 call    usage
.text:0000000000002D3B ; ---------------------------------------------------------------------------
.text:0000000000002D3B
.text:0000000000002D3B loc_2D3B:                               ; CODE XREF: parse_duration+7E↑j
.text:0000000000002D3B                 call    ___stack_chk_fail
.text:0000000000002D3B ; } // starts at 2C50
.text:0000000000002D3B parse_duration  endp
.text:0000000000002D3B
.text:0000000000002D40
.text:0000000000002D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D40
.text:0000000000002D40
.text:0000000000002D40 ; __int64 __fastcall operand2sig(char *nptr)
.text:0000000000002D40                 public operand2sig
.text:0000000000002D40 operand2sig     proc near               ; CODE XREF: main+162↑p
.text:0000000000002D40
.text:0000000000002D40 var_4C          = dword ptr -4Ch
.text:0000000000002D40 endptr          = qword ptr -48h
.text:0000000000002D40 var_40          = qword ptr -40h
.text:0000000000002D40
.text:0000000000002D40 ; __unwind {
.text:0000000000002D40                 push    r15
.text:0000000000002D42                 push    r14
.text:0000000000002D44                 mov     r14, rsi
.text:0000000000002D47                 push    r13
.text:0000000000002D49                 push    r12
.text:0000000000002D4B                 push    rbp
.text:0000000000002D4C                 push    rbx
.text:0000000000002D4D                 mov     rbp, rdi
.text:0000000000002D50                 sub     rsp, 28h
.text:0000000000002D54                 mov     rax, fs:28h
.text:0000000000002D5D                 mov     [rsp+58h+var_40], rax
.text:0000000000002D62                 xor     eax, eax
.text:0000000000002D64                 movsx   eax, byte ptr [rdi]
.text:0000000000002D67                 sub     eax, 30h ; '0'
.text:0000000000002D6A                 cmp     eax, 9
.text:0000000000002D6D                 ja      loc_2E00
.text:0000000000002D73                 call    ___errno_location
.text:0000000000002D78                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:0000000000002D7D                 mov     edx, 0Ah        ; base
.text:0000000000002D82                 mov     dword ptr [rax], 0
.text:0000000000002D88                 mov     rdi, rbp        ; nptr
.text:0000000000002D8B                 mov     rbx, rax
.text:0000000000002D8E                 call    _strtol
.text:0000000000002D93                 mov     rdx, [rsp+58h+endptr]
.text:0000000000002D98                 cmp     rdx, rbp
.text:0000000000002D9B                 jz      short loc_2DB8
.text:0000000000002D9D                 cmp     byte ptr [rdx], 0
.text:0000000000002DA0                 jnz     short loc_2DB8
.text:0000000000002DA2                 mov     edx, [rbx]
.text:0000000000002DA4                 test    edx, edx
.text:0000000000002DA6                 jnz     short loc_2DB8
.text:0000000000002DA8                 movsxd  rdx, eax
.text:0000000000002DAB                 cmp     rdx, rax
.text:0000000000002DAE                 jz      loc_2EF0
.text:0000000000002DB4                 nop     dword ptr [rax+00h]
.text:0000000000002DB8
.text:0000000000002DB8 loc_2DB8:                               ; CODE XREF: operand2sig+5B↑j
.text:0000000000002DB8                                         ; operand2sig+60↑j ...
.text:0000000000002DB8                 mov     [rsp+58h+var_4C], 0FFFFFFFFh
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: operand2sig+124↓j
.text:0000000000002DC0                                         ; operand2sig+136↓j ...
.text:0000000000002DC0                 mov     rdi, rbp
.text:0000000000002DC3                 call    quote
.text:0000000000002DC8                 lea     rsi, aSInvalidSignal ; "%s: invalid signal"
.text:0000000000002DCF                 mov     rbx, rax
.text:0000000000002DD2                 mov     edx, 5          ; category
.text:0000000000002DD7                 xor     edi, edi        ; domainname
.text:0000000000002DD9                 call    _dcgettext
.text:0000000000002DDE                 mov     rcx, rbx
.text:0000000000002DE1                 mov     rdx, rax        ; format
.text:0000000000002DE4                 xor     esi, esi        ; errnum
.text:0000000000002DE6                 xor     eax, eax
.text:0000000000002DE8                 xor     edi, edi        ; src
.text:0000000000002DEA                 call    _error
.text:0000000000002DEF                 mov     eax, 0FFFFFFFFh
.text:0000000000002DF4                 jmp     loc_2E80
.text:0000000000002DF4 ; ---------------------------------------------------------------------------
.text:0000000000002DF9                 align 20h
.text:0000000000002E00
.text:0000000000002E00 loc_2E00:                               ; CODE XREF: operand2sig+2D↑j
.text:0000000000002E00                 call    xstrdup
.text:0000000000002E05                 movzx   ebx, byte ptr [rax]
.text:0000000000002E08                 mov     r13, rax
.text:0000000000002E0B                 test    bl, bl
.text:0000000000002E0D                 jz      short loc_2E42
.text:0000000000002E0F                 lea     r12, s          ; "abcdefghijklmnopqrstuvwxyz"
.text:0000000000002E16                 mov     r15, rax
.text:0000000000002E19                 nop     dword ptr [rax+00000000h]
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: operand2sig+100↓j
.text:0000000000002E20                 movsx   esi, bl         ; c
.text:0000000000002E23                 mov     rdi, r12        ; s
.text:0000000000002E26                 call    _strchr
.text:0000000000002E2B                 test    rax, rax
.text:0000000000002E2E                 jz      short loc_2E36
.text:0000000000002E30                 sub     ebx, 20h ; ' '
.text:0000000000002E33                 mov     [r15], bl
.text:0000000000002E36
.text:0000000000002E36 loc_2E36:                               ; CODE XREF: operand2sig+EE↑j
.text:0000000000002E36                 add     r15, 1
.text:0000000000002E3A                 movzx   ebx, byte ptr [r15]
.text:0000000000002E3E                 test    bl, bl
.text:0000000000002E40                 jnz     short loc_2E20
.text:0000000000002E42
.text:0000000000002E42 loc_2E42:                               ; CODE XREF: operand2sig+CD↑j
.text:0000000000002E42                 lea     rbx, [rsp+58h+var_4C]
.text:0000000000002E47                 mov     rdi, r13        ; s2
.text:0000000000002E4A                 mov     rsi, rbx
.text:0000000000002E4D                 call    str2sig
.text:0000000000002E52                 test    eax, eax
.text:0000000000002E54                 jnz     short loc_2EA8
.text:0000000000002E56
.text:0000000000002E56 loc_2E56:                               ; CODE XREF: operand2sig+1A6↓j
.text:0000000000002E56                 mov     ebx, [rsp+58h+var_4C]
.text:0000000000002E5A                 mov     rdi, r13        ; ptr
.text:0000000000002E5D                 call    _free
.text:0000000000002E62                 test    ebx, ebx
.text:0000000000002E64                 js      loc_2DC0
.text:0000000000002E6A
.text:0000000000002E6A loc_2E6A:                               ; CODE XREF: operand2sig+1CE↓j
.text:0000000000002E6A                 mov     rsi, r14
.text:0000000000002E6D                 mov     edi, ebx
.text:0000000000002E6F                 call    sig2str
.text:0000000000002E74                 test    eax, eax
.text:0000000000002E76                 jnz     loc_2DC0
.text:0000000000002E7C                 mov     eax, [rsp+58h+var_4C]
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: operand2sig+B4↑j
.text:0000000000002E80                 mov     rcx, [rsp+58h+var_40]
.text:0000000000002E85                 xor     rcx, fs:28h
.text:0000000000002E8E                 jnz     loc_2F1C
.text:0000000000002E94                 add     rsp, 28h
.text:0000000000002E98                 pop     rbx
.text:0000000000002E99                 pop     rbp
.text:0000000000002E9A                 pop     r12
.text:0000000000002E9C                 pop     r13
.text:0000000000002E9E                 pop     r14
.text:0000000000002EA0                 pop     r15
.text:0000000000002EA2                 retn
.text:0000000000002EA2 ; ---------------------------------------------------------------------------
.text:0000000000002EA3                 align 8
.text:0000000000002EA8
.text:0000000000002EA8 loc_2EA8:                               ; CODE XREF: operand2sig+114↑j
.text:0000000000002EA8                 cmp     byte ptr [r13+0], 53h ; 'S'
.text:0000000000002EAD                 jz      short loc_2EC8
.text:0000000000002EAF
.text:0000000000002EAF loc_2EAF:                               ; CODE XREF: operand2sig+18D↓j
.text:0000000000002EAF                                         ; operand2sig+194↓j ...
.text:0000000000002EAF                 mov     rdi, r13        ; ptr
.text:0000000000002EB2                 mov     [rsp+58h+var_4C], 0FFFFFFFFh
.text:0000000000002EBA                 call    _free
.text:0000000000002EBF                 jmp     loc_2DC0
.text:0000000000002EBF ; ---------------------------------------------------------------------------
.text:0000000000002EC4                 align 8
.text:0000000000002EC8
.text:0000000000002EC8 loc_2EC8:                               ; CODE XREF: operand2sig+16D↑j
.text:0000000000002EC8                 cmp     byte ptr [r13+1], 49h ; 'I'
.text:0000000000002ECD                 jnz     short loc_2EAF
.text:0000000000002ECF                 cmp     byte ptr [r13+2], 47h ; 'G'
.text:0000000000002ED4                 jnz     short loc_2EAF
.text:0000000000002ED6                 lea     rdi, [r13+3]    ; s2
.text:0000000000002EDA                 mov     rsi, rbx
.text:0000000000002EDD                 call    str2sig
.text:0000000000002EE2                 test    eax, eax
.text:0000000000002EE4                 jnz     short loc_2EAF
.text:0000000000002EE6                 jmp     loc_2E56
.text:0000000000002EE6 ; ---------------------------------------------------------------------------
.text:0000000000002EEB                 align 10h
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: operand2sig+6E↑j
.text:0000000000002EF0                 cmp     edx, 0FFFFFFFFh
.text:0000000000002EF3                 jz      short loc_2F13
.text:0000000000002EF5                 cmp     edx, 0FFh
.text:0000000000002EFB                 mov     eax, 7Fh
.text:0000000000002F00                 mov     ebx, 0FFh
.text:0000000000002F05                 cmovl   ebx, eax
.text:0000000000002F08                 and     ebx, edx
.text:0000000000002F0A                 mov     [rsp+58h+var_4C], ebx
.text:0000000000002F0E                 jmp     loc_2E6A
.text:0000000000002F13 ; ---------------------------------------------------------------------------
.text:0000000000002F13
.text:0000000000002F13 loc_2F13:                               ; CODE XREF: operand2sig+1B3↑j
.text:0000000000002F13                 mov     [rsp+58h+var_4C], edx
.text:0000000000002F17                 jmp     loc_2DC0
.text:0000000000002F1C ; ---------------------------------------------------------------------------
.text:0000000000002F1C
.text:0000000000002F1C loc_2F1C:                               ; CODE XREF: operand2sig+14E↑j
.text:0000000000002F1C                 call    ___stack_chk_fail
.text:0000000000002F1C ; } // starts at 2D40
.text:0000000000002F1C operand2sig     endp
.text:0000000000002F1C
.text:0000000000002F1C ; ---------------------------------------------------------------------------
.text:0000000000002F21                 align 10h
.text:0000000000002F30
.text:0000000000002F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F30
.text:0000000000002F30
.text:0000000000002F30 ; __int64 __fastcall cl_strtod(char *nptr)
.text:0000000000002F30                 public cl_strtod
.text:0000000000002F30 cl_strtod       proc near               ; DATA XREF: parse_duration+8↑o
.text:0000000000002F30
.text:0000000000002F30 var_50          = qword ptr -50h
.text:0000000000002F30 endptr          = qword ptr -40h
.text:0000000000002F30 var_38          = qword ptr -38h
.text:0000000000002F30 var_30          = qword ptr -30h
.text:0000000000002F30
.text:0000000000002F30 ; __unwind {
.text:0000000000002F30                 push    r13
.text:0000000000002F32                 push    r12
.text:0000000000002F34                 push    rbp
.text:0000000000002F35                 push    rbx
.text:0000000000002F36                 mov     rbx, rsi
.text:0000000000002F39                 mov     rbp, rdi
.text:0000000000002F3C                 sub     rsp, 38h
.text:0000000000002F40                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:0000000000002F45                 mov     rax, fs:28h
.text:0000000000002F4E                 mov     [rsp+58h+var_30], rax
.text:0000000000002F53                 xor     eax, eax
.text:0000000000002F55                 call    _strtod
.text:0000000000002F5A                 mov     rax, [rsp+58h+endptr]
.text:0000000000002F5F                 movapd  xmm1, xmm0
.text:0000000000002F63                 cmp     byte ptr [rax], 0
.text:0000000000002F66                 jnz     short loc_2F98
.text:0000000000002F68
.text:0000000000002F68 loc_2F68:                               ; CODE XREF: cl_strtod+A1↓j
.text:0000000000002F68                                         ; cl_strtod+AC↓j
.text:0000000000002F68                 test    rbx, rbx
.text:0000000000002F6B                 jz      short loc_2F75
.text:0000000000002F6D                 mov     rax, [rsp+58h+endptr]
.text:0000000000002F72                 mov     [rbx], rax
.text:0000000000002F75
.text:0000000000002F75 loc_2F75:                               ; CODE XREF: cl_strtod+3B↑j
.text:0000000000002F75                 mov     rax, [rsp+58h+var_30]
.text:0000000000002F7A                 xor     rax, fs:28h
.text:0000000000002F83                 movapd  xmm0, xmm1
.text:0000000000002F87                 jnz     short loc_2FDE
.text:0000000000002F89                 add     rsp, 38h
.text:0000000000002F8D                 pop     rbx
.text:0000000000002F8E                 pop     rbp
.text:0000000000002F8F                 pop     r12
.text:0000000000002F91                 pop     r13
.text:0000000000002F93                 retn
.text:0000000000002F93 ; ---------------------------------------------------------------------------
.text:0000000000002F94                 align 8
.text:0000000000002F98
.text:0000000000002F98 loc_2F98:                               ; CODE XREF: cl_strtod+36↑j
.text:0000000000002F98                 movsd   [rsp+58h+var_50], xmm0
.text:0000000000002F9E                 call    ___errno_location
.text:0000000000002FA3                 lea     rsi, [rsp+58h+var_38] ; endptr
.text:0000000000002FA8                 mov     rdi, rbp        ; nptr
.text:0000000000002FAB                 mov     r12, rax
.text:0000000000002FAE                 mov     r13d, [rax]
.text:0000000000002FB1                 call    c_strtod
.text:0000000000002FB6                 mov     rax, [rsp+58h+var_38]
.text:0000000000002FBB                 cmp     [rsp+58h+endptr], rax
.text:0000000000002FC0                 movsd   xmm1, [rsp+58h+var_50]
.text:0000000000002FC6                 jnb     short loc_2FD8
.text:0000000000002FC8                 mov     [rsp+58h+endptr], rax
.text:0000000000002FCD                 movapd  xmm1, xmm0
.text:0000000000002FD1                 jmp     short loc_2F68
.text:0000000000002FD1 ; ---------------------------------------------------------------------------
.text:0000000000002FD3                 align 8
.text:0000000000002FD8
.text:0000000000002FD8 loc_2FD8:                               ; CODE XREF: cl_strtod+96↑j
.text:0000000000002FD8                 mov     [r12], r13d
.text:0000000000002FDC                 jmp     short loc_2F68
.text:0000000000002FDE ; ---------------------------------------------------------------------------
.text:0000000000002FDE
.text:0000000000002FDE loc_2FDE:                               ; CODE XREF: cl_strtod+57↑j
.text:0000000000002FDE                 call    ___stack_chk_fail
.text:0000000000002FDE ; } // starts at 2F30
.text:0000000000002FDE cl_strtod       endp
.text:0000000000002FDE
.text:0000000000002FDE ; ---------------------------------------------------------------------------
.text:0000000000002FE3                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FF0
.text:0000000000002FF0
.text:0000000000002FF0                 public close_stdout_set_file_name
.text:0000000000002FF0 close_stdout_set_file_name proc near
.text:0000000000002FF0 ; __unwind {
.text:0000000000002FF0                 mov     cs:file_name, rdi
.text:0000000000002FF7                 retn
.text:0000000000002FF7 ; } // starts at 2FF0
.text:0000000000002FF7 close_stdout_set_file_name endp
.text:0000000000002FF7
.text:0000000000002FF7 ; ---------------------------------------------------------------------------
.text:0000000000002FF8                 align 20h
.text:0000000000003000
.text:0000000000003000 ; =============== S U B R O U T I N E =======================================
.text:0000000000003000
.text:0000000000003000
.text:0000000000003000                 public close_stdout_set_ignore_EPIPE
.text:0000000000003000 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003000 ; __unwind {
.text:0000000000003000                 mov     cs:ignore_EPIPE, dil
.text:0000000000003007                 retn
.text:0000000000003007 ; } // starts at 3000
.text:0000000000003007 close_stdout_set_ignore_EPIPE endp
.text:0000000000003007
.text:0000000000003007 ; ---------------------------------------------------------------------------
.text:0000000000003008                 align 10h
.text:0000000000003010
.text:0000000000003010 ; =============== S U B R O U T I N E =======================================
.text:0000000000003010
.text:0000000000003010 ; Attributes: info_from_lumina
.text:0000000000003010
.text:0000000000003010 ; void __cdecl close_stdout()
.text:0000000000003010                 public close_stdout
.text:0000000000003010 close_stdout    proc near               ; DATA XREF: main+65↑o
.text:0000000000003010 ; __unwind {
.text:0000000000003010                 push    rbp
.text:0000000000003011                 push    rbx
.text:0000000000003012                 sub     rsp, 8
.text:0000000000003016                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000301D                 call    close_stream
.text:0000000000003022                 test    eax, eax
.text:0000000000003024                 jz      short loc_303C
.text:0000000000003026                 call    ___errno_location
.text:000000000000302B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003032                 mov     rbx, rax
.text:0000000000003035                 jz      short loc_3053
.text:0000000000003037                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000303A                 jnz     short loc_3053
.text:000000000000303C
.text:000000000000303C loc_303C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000303C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003043                 call    close_stream
.text:0000000000003048                 test    eax, eax
.text:000000000000304A                 jnz     short loc_3092
.text:000000000000304C                 add     rsp, 8
.text:0000000000003050                 pop     rbx
.text:0000000000003051                 pop     rbp
.text:0000000000003052                 retn
.text:0000000000003053 ; ---------------------------------------------------------------------------
.text:0000000000003053
.text:0000000000003053 loc_3053:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003053                                         ; close_stdout+2A↑j
.text:0000000000003053                 lea     rsi, aWriteError ; "write error"
.text:000000000000305A                 xor     edi, edi        ; domainname
.text:000000000000305C                 mov     edx, 5          ; category
.text:0000000000003061                 call    _dcgettext
.text:0000000000003066                 mov     rdi, cs:file_name
.text:000000000000306D                 mov     rbp, rax
.text:0000000000003070                 test    rdi, rdi
.text:0000000000003073                 jz      short loc_309D
.text:0000000000003075                 call    quotearg_colon
.text:000000000000307A                 mov     esi, [rbx]      ; errnum
.text:000000000000307C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003083                 mov     rcx, rax
.text:0000000000003086                 mov     r8, rbp
.text:0000000000003089                 xor     edi, edi        ; status
.text:000000000000308B                 xor     eax, eax
.text:000000000000308D                 call    _error
.text:0000000000003092
.text:0000000000003092 loc_3092:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003092                                         ; close_stdout+A2↓j
.text:0000000000003092                 mov     edi, cs:exit_failure ; status
.text:0000000000003098                 call    __exit
.text:000000000000309D ; ---------------------------------------------------------------------------
.text:000000000000309D
.text:000000000000309D loc_309D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000309D                 mov     esi, [rbx]      ; errnum
.text:000000000000309F                 lea     rdx, format+4   ; format
.text:00000000000030A6                 mov     rcx, rax
.text:00000000000030A9                 xor     edi, edi        ; status
.text:00000000000030AB                 xor     eax, eax
.text:00000000000030AD                 call    _error
.text:00000000000030B2                 jmp     short loc_3092
.text:00000000000030B2 ; } // starts at 3010
.text:00000000000030B2 close_stdout    endp
.text:00000000000030B2
.text:00000000000030B2 ; ---------------------------------------------------------------------------
.text:00000000000030B4                 align 20h
.text:00000000000030C0
.text:00000000000030C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030C0
.text:00000000000030C0
.text:00000000000030C0                 public dtotimespec
.text:00000000000030C0 dtotimespec     proc near               ; CODE XREF: settimeout+1D↑p
.text:00000000000030C0 ; __unwind {
.text:00000000000030C0                 ucomisd xmm0, cs:qword_68E0
.text:00000000000030C8                 jbe     loc_3160
.text:00000000000030CE                 movsd   xmm1, cs:qword_68E8
.text:00000000000030D6                 ucomisd xmm1, xmm0
.text:00000000000030DA                 jbe     short loc_3148
.text:00000000000030DC                 cvttsd2si rsi, xmm0
.text:00000000000030E1                 pxor    xmm1, xmm1
.text:00000000000030E5                 xor     ecx, ecx
.text:00000000000030E7                 cvtsi2sd xmm1, rsi
.text:00000000000030EC                 subsd   xmm0, xmm1
.text:00000000000030F0                 pxor    xmm1, xmm1
.text:00000000000030F4                 mulsd   xmm0, cs:qword_68F0
.text:00000000000030FC                 cvttsd2si rdx, xmm0
.text:0000000000003101                 cvtsi2sd xmm1, rdx
.text:0000000000003106                 ucomisd xmm0, xmm1
.text:000000000000310A                 setnbe  cl
.text:000000000000310D                 add     rcx, rdx
.text:0000000000003110                 mov     rdx, 112E0BE826D694B3h
.text:000000000000311A                 mov     rax, rcx
.text:000000000000311D                 imul    rdx
.text:0000000000003120                 mov     rax, rcx
.text:0000000000003123                 sar     rax, 3Fh
.text:0000000000003127                 sar     rdx, 1Ah
.text:000000000000312B                 sub     rdx, rax
.text:000000000000312E                 lea     rax, [rdx+rsi]
.text:0000000000003132                 imul    rdx, 3B9ACA00h
.text:0000000000003139                 sub     rcx, rdx
.text:000000000000313C                 mov     rdx, rcx
.text:000000000000313F                 js      short loc_3170
.text:0000000000003141                 rep retn
.text:0000000000003141 ; ---------------------------------------------------------------------------
.text:0000000000003143                 align 8
.text:0000000000003148
.text:0000000000003148 loc_3148:                               ; CODE XREF: dtotimespec+1A↑j
.text:0000000000003148                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:0000000000003152                 mov     edx, 3B9AC9FFh
.text:0000000000003157                 retn
.text:0000000000003157 ; ---------------------------------------------------------------------------
.text:0000000000003158                 align 20h
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: dtotimespec+8↑j
.text:0000000000003160                 mov     rax, 8000000000000000h
.text:000000000000316A                 xor     edx, edx
.text:000000000000316C                 retn
.text:000000000000316C ; ---------------------------------------------------------------------------
.text:000000000000316D                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: dtotimespec+7F↑j
.text:0000000000003170                 sub     rax, 1
.text:0000000000003174                 add     rdx, 3B9ACA00h
.text:000000000000317B                 retn
.text:000000000000317B ; } // starts at 30C0
.text:000000000000317B dtotimespec     endp
.text:000000000000317B
.text:000000000000317B ; ---------------------------------------------------------------------------
.text:000000000000317C                 align 20h
.text:0000000000003180
.text:0000000000003180 ; =============== S U B R O U T I N E =======================================
.text:0000000000003180
.text:0000000000003180
.text:0000000000003180                 public set_program_name
.text:0000000000003180 set_program_name proc near              ; CODE XREF: main+30↑p
.text:0000000000003180 ; __unwind {
.text:0000000000003180                 test    rdi, rdi
.text:0000000000003183                 push    rbx
.text:0000000000003184                 jz      short loc_31FD
.text:0000000000003186                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000318B                 mov     rbx, rdi
.text:000000000000318E                 call    _strrchr
.text:0000000000003193                 test    rax, rax
.text:0000000000003196                 jz      short loc_31ED
.text:0000000000003198                 lea     r8, [rax+1]
.text:000000000000319C                 mov     rdx, r8
.text:000000000000319F                 sub     rdx, rbx
.text:00000000000031A2                 cmp     rdx, 6
.text:00000000000031A6                 jle     short loc_31ED
.text:00000000000031A8                 lea     rsi, [rax-6]
.text:00000000000031AC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000031B3                 mov     ecx, 7
.text:00000000000031B8                 repe cmpsb
.text:00000000000031BA                 setnbe  dl
.text:00000000000031BD                 sbb     dl, 0
.text:00000000000031C0                 test    dl, dl
.text:00000000000031C2                 jnz     short loc_31ED
.text:00000000000031C4                 lea     rdi, aLt        ; "lt-"
.text:00000000000031CB                 mov     ecx, 3
.text:00000000000031D0                 mov     rsi, r8
.text:00000000000031D3                 mov     rbx, r8
.text:00000000000031D6                 repe cmpsb
.text:00000000000031D8                 setnbe  dl
.text:00000000000031DB                 sbb     dl, 0
.text:00000000000031DE                 test    dl, dl
.text:00000000000031E0                 jnz     short loc_31ED
.text:00000000000031E2                 lea     rbx, [rax+4]
.text:00000000000031E6                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:00000000000031ED
.text:00000000000031ED loc_31ED:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000031ED                                         ; set_program_name+26↑j ...
.text:00000000000031ED                 mov     cs:program_name, rbx
.text:00000000000031F4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000031FB                 pop     rbx
.text:00000000000031FC                 retn
.text:00000000000031FD ; ---------------------------------------------------------------------------
.text:00000000000031FD
.text:00000000000031FD loc_31FD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000031FD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003204                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000320B                 mov     edx, 37h ; '7'  ; n
.text:0000000000003210                 mov     esi, 1          ; size
.text:0000000000003215                 call    _fwrite
.text:000000000000321A                 call    _abort
.text:000000000000321A ; } // starts at 3180
.text:000000000000321A set_program_name endp
.text:000000000000321A
.text:000000000000321A ; ---------------------------------------------------------------------------
.text:000000000000321F                 align 20h
.text:0000000000003220
.text:0000000000003220 ; =============== S U B R O U T I N E =======================================
.text:0000000000003220
.text:0000000000003220 ; Attributes: info_from_lumina
.text:0000000000003220
.text:0000000000003220 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003220 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003220                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003220 ; __unwind {
.text:0000000000003220                 push    rbp
.text:0000000000003221                 push    rbx
.text:0000000000003222                 mov     rbp, rdi
.text:0000000000003225                 mov     ebx, esi
.text:0000000000003227                 sub     rsp, 8
.text:000000000000322B                 call    locale_charset
.text:0000000000003230                 movzx   edx, byte ptr [rax]
.text:0000000000003233                 and     edx, 0FFFFFFDFh
.text:0000000000003236                 cmp     dl, 55h ; 'U'
.text:0000000000003239                 jz      short loc_32B0
.text:000000000000323B                 cmp     dl, 47h ; 'G'
.text:000000000000323E                 jz      short loc_3260
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003240                                         ; gettext_quote+50↓j ...
.text:0000000000003240                 lea     rax, unk_694B
.text:0000000000003247                 lea     rdx, asc_694D   ; "'"
.text:000000000000324E                 cmp     ebx, 9
.text:0000000000003251                 cmovnz  rax, rdx
.text:0000000000003255                 add     rsp, 8
.text:0000000000003259                 pop     rbx
.text:000000000000325A                 pop     rbp
.text:000000000000325B                 retn
.text:000000000000325B ; ---------------------------------------------------------------------------
.text:000000000000325C                 align 20h
.text:0000000000003260
.text:0000000000003260 loc_3260:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003260                 movzx   edx, byte ptr [rax+1]
.text:0000000000003264                 and     edx, 0FFFFFFDFh
.text:0000000000003267                 cmp     dl, 42h ; 'B'
.text:000000000000326A                 jnz     short loc_3240
.text:000000000000326C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003270                 jnz     short loc_3240
.text:0000000000003272                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003276                 jnz     short loc_3240
.text:0000000000003278                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000327C                 jnz     short loc_3240
.text:000000000000327E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003282                 jnz     short loc_3240
.text:0000000000003284                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003288                 jnz     short loc_3240
.text:000000000000328A                 cmp     byte ptr [rax+7], 0
.text:000000000000328E                 jnz     short loc_3240
.text:0000000000003290                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003294                 lea     rax, unk_6944
.text:000000000000329B                 lea     rdx, unk_6948
.text:00000000000032A2                 cmovnz  rax, rdx
.text:00000000000032A6                 add     rsp, 8
.text:00000000000032AA                 pop     rbx
.text:00000000000032AB                 pop     rbp
.text:00000000000032AC                 retn
.text:00000000000032AC ; ---------------------------------------------------------------------------
.text:00000000000032AD                 align 10h
.text:00000000000032B0
.text:00000000000032B0 loc_32B0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000032B0                 movzx   edx, byte ptr [rax+1]
.text:00000000000032B4                 and     edx, 0FFFFFFDFh
.text:00000000000032B7                 cmp     dl, 54h ; 'T'
.text:00000000000032BA                 jnz     short loc_3240
.text:00000000000032BC                 movzx   edx, byte ptr [rax+2]
.text:00000000000032C0                 and     edx, 0FFFFFFDFh
.text:00000000000032C3                 cmp     dl, 46h ; 'F'
.text:00000000000032C6                 jnz     loc_3240
.text:00000000000032CC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000032D0                 jnz     loc_3240
.text:00000000000032D6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000032DA                 jnz     loc_3240
.text:00000000000032E0                 cmp     byte ptr [rax+5], 0
.text:00000000000032E4                 jnz     loc_3240
.text:00000000000032EA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000032EE                 lea     rax, unk_693C
.text:00000000000032F5                 lea     rdx, unk_6940
.text:00000000000032FC                 cmovnz  rax, rdx
.text:0000000000003300                 add     rsp, 8
.text:0000000000003304                 pop     rbx
.text:0000000000003305                 pop     rbp
.text:0000000000003306                 retn
.text:0000000000003306 ; } // starts at 3220
.text:0000000000003306 gettext_quote   endp
.text:0000000000003306
.text:0000000000003306 ; ---------------------------------------------------------------------------
.text:0000000000003307                 align 10h
.text:0000000000003310
.text:0000000000003310 ; =============== S U B R O U T I N E =======================================
.text:0000000000003310
.text:0000000000003310 ; Attributes: info_from_lumina
.text:0000000000003310
.text:0000000000003310 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000003310 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000003310                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000003310
.text:0000000000003310 var_E0          = dword ptr -0E0h
.text:0000000000003310 var_DB          = byte ptr -0DBh
.text:0000000000003310 var_DA          = byte ptr -0DAh
.text:0000000000003310 var_D9          = byte ptr -0D9h
.text:0000000000003310 s               = qword ptr -0D8h
.text:0000000000003310 n               = qword ptr -0D0h
.text:0000000000003310 var_C8          = qword ptr -0C8h
.text:0000000000003310 ps              = qword ptr -0C0h
.text:0000000000003310 var_B8          = qword ptr -0B8h
.text:0000000000003310 var_B0          = qword ptr -0B0h
.text:0000000000003310 var_A8          = qword ptr -0A8h
.text:0000000000003310 s2              = qword ptr -0A0h
.text:0000000000003310 var_98          = qword ptr -98h
.text:0000000000003310 var_90          = qword ptr -90h
.text:0000000000003310 var_88          = qword ptr -88h
.text:0000000000003310 var_80          = qword ptr -80h
.text:0000000000003310 var_78          = qword ptr -78h
.text:0000000000003310 var_70          = dword ptr -70h
.text:0000000000003310 var_6C          = byte ptr -6Ch
.text:0000000000003310 var_6B          = byte ptr -6Bh
.text:0000000000003310 var_6A          = byte ptr -6Ah
.text:0000000000003310 var_69          = byte ptr -69h
.text:0000000000003310 var_68          = qword ptr -68h
.text:0000000000003310 var_60          = qword ptr -60h
.text:0000000000003310 wc              = dword ptr -4Ch
.text:0000000000003310 var_48          = qword ptr -48h
.text:0000000000003310 var_40          = qword ptr -40h
.text:0000000000003310 arg_0           = qword ptr  8
.text:0000000000003310 arg_8           = qword ptr  10h
.text:0000000000003310 arg_10          = qword ptr  18h
.text:0000000000003310
.text:0000000000003310 ; __unwind {
.text:0000000000003310                 push    r15
.text:0000000000003312                 push    r14
.text:0000000000003314                 mov     r15d, r8d
.text:0000000000003317                 push    r13
.text:0000000000003319                 push    r12
.text:000000000000331B                 mov     r14, rdi
.text:000000000000331E                 push    rbp
.text:000000000000331F                 push    rbx
.text:0000000000003320                 mov     ebx, r9d
.text:0000000000003323                 mov     r13, rsi
.text:0000000000003326                 mov     rbp, rcx
.text:0000000000003329                 and     ebx, 2
.text:000000000000332C                 sub     rsp, 0B8h
.text:0000000000003333                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000333B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003340                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003345                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000334A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000334F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003357                 mov     [rsp+0E8h+var_80], rax
.text:000000000000335C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003364                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003369                 mov     rax, fs:28h
.text:0000000000003372                 mov     [rsp+0E8h+var_40], rax
.text:000000000000337A                 xor     eax, eax
.text:000000000000337C                 call    ___ctype_get_mb_cur_max
.text:0000000000003381                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003385                 mov     [rsp+0E8h+var_90], rax
.text:000000000000338A                 ja      def_33A1        ; jumptable 00000000000121F1 default case
.text:0000000000003390                 lea     rcx, jpt_33A1
.text:0000000000003397                 mov     edx, r15d
.text:000000000000339A                 movsxd  rax, ds:(jpt_33A1 - 69A0h)[rcx+rdx*4]
.text:000000000000339E                 add     rax, rcx
.text:00000000000033A1                 jmp     rax             ; switch jump
.text:00000000000033A3 ; ---------------------------------------------------------------------------
.text:00000000000033A3
.text:00000000000033A3 loc_33A3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000033A3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000033A3                                         ; DATA XREF: ...
.text:00000000000033A3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000033A8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033AD                 xor     r12d, r12d
.text:00000000000033B0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033B9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000033BE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033C3
.text:00000000000033C3 loc_33C3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000033C3                 lea     rax, asc_694D   ; "'"
.text:00000000000033CA                 mov     [rsp+0E8h+n], 1
.text:00000000000033D3                 xor     r15d, r15d
.text:00000000000033D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000033DE                 mov     [rsp+0E8h+s2], rax
.text:00000000000033E3
.text:00000000000033E3 loc_33E3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000033E3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000033E3                 xor     r11d, r11d
.text:00000000000033E6                 mov     rax, rbp
.text:00000000000033E9                 mov     r8d, r12d
.text:00000000000033EC                 mov     rbp, r11
.text:00000000000033EF                 mov     r11, rax
.text:00000000000033F2                 nop     word ptr [rax+rax+00h]
.text:00000000000033F8
.text:00000000000033F8 loc_33F8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000033F8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000033F8                 cmp     r11, rbp
.text:00000000000033FB                 setnz   r12b
.text:00000000000033FF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003403                 jnz     short loc_3412
.text:0000000000003405                 mov     rax, [rsp+0E8h+s]
.text:000000000000340A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000340E                 setnz   r12b
.text:0000000000003412
.text:0000000000003412 loc_3412:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000003412                 test    r12b, r12b
.text:0000000000003415                 jz      loc_3A70
.text:000000000000341B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003420                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003425                 lea     r9, [rdi+rbp]
.text:0000000000003429                 setnz   al
.text:000000000000342C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003430                 mov     r10d, eax
.text:0000000000003433                 jz      loc_34E0
.text:0000000000003439                 mov     rax, [rsp+0E8h+n]
.text:000000000000343E                 test    rax, rax
.text:0000000000003441                 jz      loc_3870
.text:0000000000003447                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000344B                 lea     rbx, [rbp+rax+0]
.text:0000000000003450                 jnz     short loc_3480
.text:0000000000003452                 cmp     rax, 1
.text:0000000000003456                 jbe     short loc_3480
.text:0000000000003458                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000345D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003462                 mov     [rsp+0E8h+ps], r9
.text:0000000000003467                 call    _strlen
.text:000000000000346C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003472                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003478                 mov     r11, rax
.text:000000000000347B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003480                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003480                 cmp     rbx, r11
.text:0000000000003483                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003488                 ja      loc_3A40
.text:000000000000348E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003493                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003498                 mov     rdi, r9         ; s1
.text:000000000000349B                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000034A0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000034A5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000034AA                 call    _memcmp
.text:00000000000034AF                 test    eax, eax
.text:00000000000034B1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000034B6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000034BC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000034C1                 jnz     loc_3A40
.text:00000000000034C7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034CC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000034D2                 jnz     loc_4455
.text:00000000000034D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000034E0
.text:00000000000034E0 loc_34E0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000034E0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000034E0                 movzx   ebx, byte ptr [r9]
.text:00000000000034E4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000034E7                 ja      def_34FE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000034ED                 lea     rcx, jpt_34FE
.text:00000000000034F4                 movzx   edx, bl
.text:00000000000034F7                 movsxd  rax, ds:(jpt_34FE - 69CCh)[rcx+rdx*4]
.text:00000000000034FB                 add     rax, rcx
.text:00000000000034FE                 jmp     rax             ; switch jump
.text:0000000000003500 ; ---------------------------------------------------------------------------
.text:0000000000003500
.text:0000000000003500 loc_3500:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003500                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:0000000000003500                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000003503
.text:0000000000003503 loc_3503:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003503                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003503                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000003507                 setnz   al
.text:000000000000350A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000350E                 jnz     short loc_351C
.text:0000000000003510                 mov     rax, [rsp+0E8h+s]
.text:0000000000003515                 cmp     byte ptr [rax+1], 0
.text:0000000000003519                 setnz   al
.text:000000000000351C
.text:000000000000351C loc_351C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000351C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003521                 setz    dl
.text:0000000000003524                 test    al, al
.text:0000000000003526                 jz      loc_3778
.text:000000000000352C
.text:000000000000352C loc_352C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000352C                 xor     r12d, r12d
.text:000000000000352F                 xor     eax, eax
.text:0000000000003531                 nop     dword ptr [rax+00000000h]
.text:0000000000003538
.text:0000000000003538 loc_3538:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003538                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003538                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000353D                 jnz     loc_3652
.text:0000000000003543                 test    dl, dl
.text:0000000000003545                 jnz     loc_3652
.text:000000000000354B
.text:000000000000354B loc_354B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000354B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003550                 test    rsi, rsi
.text:0000000000003553                 jz      short loc_3569
.text:0000000000003555                 mov     edx, ebx
.text:0000000000003557                 shr     dl, 5
.text:000000000000355A                 movzx   edx, dl
.text:000000000000355D                 mov     edx, [rsi+rdx*4]
.text:0000000000003560                 bt      edx, ebx
.text:0000000000003563                 jb      loc_36B3
.text:0000000000003569
.text:0000000000003569 loc_3569:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003569                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003569                 test    r10b, r10b
.text:000000000000356C                 jnz     loc_36B3
.text:0000000000003572                 xor     eax, 1
.text:0000000000003575                 add     rbp, 1
.text:0000000000003579                 and     eax, r8d
.text:000000000000357C
.text:000000000000357C loc_357C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000357C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000357C                 test    al, al
.text:000000000000357E                 jz      short loc_35A0
.text:0000000000003580                 cmp     r13, r15
.text:0000000000003583                 jbe     short loc_358A
.text:0000000000003585                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000358A
.text:000000000000358A loc_358A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000358A                 lea     rax, [r15+1]
.text:000000000000358E                 cmp     r13, rax
.text:0000000000003591                 jbe     short loc_3599
.text:0000000000003593                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003599
.text:0000000000003599 loc_3599:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003599                 add     r15, 2
.text:000000000000359D                 xor     r8d, r8d
.text:00000000000035A0
.text:00000000000035A0 loc_35A0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000035A0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000035A0                 cmp     r15, r13
.text:00000000000035A3                 jnb     short loc_35A9
.text:00000000000035A5                 mov     [r14+r15], bl
.text:00000000000035A9
.text:00000000000035A9 loc_35A9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000035A9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000035AE                 add     r15, 1
.text:00000000000035B2                 mov     eax, 0
.text:00000000000035B7                 test    r12b, r12b
.text:00000000000035BA                 cmovz   edi, eax
.text:00000000000035BD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000035C2                 jmp     loc_33F8
.text:00000000000035C2 ; ---------------------------------------------------------------------------
.text:00000000000035C7                 align 10h
.text:00000000000035D0
.text:00000000000035D0 loc_35D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000035D0                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000035D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000035D3
.text:00000000000035D3 loc_35D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000035D3                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:00000000000035D3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000035D7                 cmp     eax, 2
.text:00000000000035DA                 jz      loc_3B98
.text:00000000000035E0                 cmp     eax, 5
.text:00000000000035E3                 jz      loc_3B58
.text:00000000000035E9                 cmp     eax, 2
.text:00000000000035EC                 mov     ebx, 3Fh ; '?'
.text:00000000000035F1                 setz    dl
.text:00000000000035F4                 xor     r12d, r12d
.text:00000000000035F7                 xor     eax, eax
.text:00000000000035F9                 jmp     loc_3538
.text:00000000000035F9 ; ---------------------------------------------------------------------------
.text:00000000000035FE                 align 20h
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000003600                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:0000000000003600                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000003603
.text:0000000000003603 loc_3603:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003603                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003603                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000003608                 jz      loc_3B10
.text:000000000000360E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003613                 xor     edx, edx
.text:0000000000003615                 xor     eax, eax
.text:0000000000003617                 mov     ebx, 27h ; '''
.text:000000000000361C                 jmp     loc_3538
.text:000000000000361C ; ---------------------------------------------------------------------------
.text:0000000000003621                 align 8
.text:0000000000003628
.text:0000000000003628 loc_3628:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003628                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003628                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000362D                 mov     ebx, 74h ; 't'
.text:0000000000003632
.text:0000000000003632 loc_3632:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003632                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003632                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003637                 setz    al
.text:000000000000363A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000363E                 jnz     loc_378E
.text:0000000000003644
.text:0000000000003644 loc_3644:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003644                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003644                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003649                 jnz     short loc_36B0
.text:000000000000364B
.text:000000000000364B loc_364B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000364B                 mov     ebx, edx
.text:000000000000364D                 xor     r12d, r12d
.text:0000000000003650                 xor     eax, eax
.text:0000000000003652
.text:0000000000003652 loc_3652:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003652                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003652                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003657                 jnz     loc_354B
.text:000000000000365D                 jmp     loc_3569
.text:000000000000365D ; ---------------------------------------------------------------------------
.text:0000000000003662                 align 8
.text:0000000000003668
.text:0000000000003668 loc_3668:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003668                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003668                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000366D                 mov     ebx, 62h ; 'b'
.text:0000000000003672                 jmp     short loc_3644
.text:0000000000003672 ; ---------------------------------------------------------------------------
.text:0000000000003674                 align 8
.text:0000000000003678
.text:0000000000003678 loc_3678:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003678                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003678                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000367D                 jz      loc_3A50
.text:0000000000003683                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003688                 jz      loc_38A0
.text:000000000000368E
.text:000000000000368E loc_368E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000368E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003693                 jz      loc_38A0
.text:0000000000003699                 cmp     [rsp+0E8h+n], 0
.text:000000000000369F                 jnz     loc_3A5B
.text:00000000000036A5                 mov     ebx, 5Ch ; '\'
.text:00000000000036AA                 nop     word ptr [rax+rax+00h]
.text:00000000000036B0
.text:00000000000036B0 loc_36B0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000036B0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000036B0                 xor     r12d, r12d
.text:00000000000036B3
.text:00000000000036B3 loc_36B3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000036B3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000036B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000036B8                 setz    dl
.text:00000000000036BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036C0                 mov     eax, edx
.text:00000000000036C2                 jnz     loc_3F18
.text:00000000000036C8                 mov     eax, r8d
.text:00000000000036CB                 xor     eax, 1
.text:00000000000036CE                 and     al, dl
.text:00000000000036D0                 jz      short loc_3701
.text:00000000000036D2                 cmp     r13, r15
.text:00000000000036D5                 jbe     short loc_36DC
.text:00000000000036D7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000036DC
.text:00000000000036DC loc_36DC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000036DC                 lea     rdx, [r15+1]
.text:00000000000036E0                 cmp     r13, rdx
.text:00000000000036E3                 jbe     short loc_36EB
.text:00000000000036E5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000036EB
.text:00000000000036EB loc_36EB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000036EB                 lea     rdx, [r15+2]
.text:00000000000036EF                 cmp     r13, rdx
.text:00000000000036F2                 jbe     short loc_36FA
.text:00000000000036F4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000036FA
.text:00000000000036FA loc_36FA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000036FA                 add     r15, 3
.text:00000000000036FE                 mov     r8d, eax
.text:0000000000003701
.text:0000000000003701 loc_3701:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003701                 cmp     r13, r15
.text:0000000000003704                 jbe     short loc_370B
.text:0000000000003706                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000370B
.text:000000000000370B loc_370B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000370B                 add     r15, 1
.text:000000000000370F                 add     rbp, 1
.text:0000000000003713                 jmp     loc_35A0
.text:0000000000003713 ; ---------------------------------------------------------------------------
.text:0000000000003718                 align 20h
.text:0000000000003720
.text:0000000000003720 loc_3720:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003720                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003720                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003725                 jnz     loc_38F3
.text:000000000000372B                 xor     edx, edx
.text:000000000000372D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003732                 jz      loc_364B
.text:0000000000003738                 add     rbp, 1
.text:000000000000373C                 jmp     loc_33F8
.text:000000000000373C ; ---------------------------------------------------------------------------
.text:0000000000003741                 align 8
.text:0000000000003748
.text:0000000000003748 loc_3748:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003748                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003748                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000374D                 setz    dl
.text:0000000000003750                 xor     eax, eax
.text:0000000000003752                 jmp     loc_3538
.text:0000000000003752 ; ---------------------------------------------------------------------------
.text:0000000000003757                 align 20h
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003760                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003760                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003765                 mov     ebx, 61h ; 'a'
.text:000000000000376A                 jmp     loc_3644
.text:000000000000376A ; ---------------------------------------------------------------------------
.text:000000000000376F                 align 10h
.text:0000000000003770
.text:0000000000003770 loc_3770:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003770                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:0000000000003770                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003775                 setz    dl
.text:0000000000003778
.text:0000000000003778 loc_3778:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003778                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003778                 test    rbp, rbp
.text:000000000000377B                 jnz     loc_352C
.text:0000000000003781
.text:0000000000003781 loc_3781:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003781                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003781                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003786                 and     al, dl
.text:0000000000003788                 jz      loc_3538
.text:000000000000378E
.text:000000000000378E loc_378E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000378E                 mov     rbp, r11
.text:0000000000003791                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003799                 jmp     loc_3E99
.text:0000000000003799 ; ---------------------------------------------------------------------------
.text:000000000000379E                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037A0                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:00000000000037A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000037A5                 setz    dl
.text:00000000000037A8                 xor     r12d, r12d
.text:00000000000037AB                 jmp     short loc_3781
.text:00000000000037AB ; ---------------------------------------------------------------------------
.text:00000000000037AD                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037B0                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:00000000000037B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000037B5                 mov     ebx, 20h ; ' '
.text:00000000000037BA                 setz    dl
.text:00000000000037BD                 jmp     short loc_3781
.text:00000000000037BD ; ---------------------------------------------------------------------------
.text:00000000000037BF                 align 20h
.text:00000000000037C0
.text:00000000000037C0 loc_37C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037C0                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:00000000000037C0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000037C5                 mov     ebx, 72h ; 'r'
.text:00000000000037CA                 jmp     loc_3632
.text:00000000000037CA ; ---------------------------------------------------------------------------
.text:00000000000037CF                 align 10h
.text:00000000000037D0
.text:00000000000037D0 loc_37D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037D0                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:00000000000037D0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000037D5                 mov     ebx, 66h ; 'f'
.text:00000000000037DA                 jmp     loc_3644
.text:00000000000037DA ; ---------------------------------------------------------------------------
.text:00000000000037DF                 align 20h
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037E0                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:00000000000037E0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000037E5                 mov     ebx, 76h ; 'v'
.text:00000000000037EA                 jmp     loc_3644
.text:00000000000037EA ; ---------------------------------------------------------------------------
.text:00000000000037EF                 align 10h
.text:00000000000037F0
.text:00000000000037F0 loc_37F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037F0                                         ; DATA XREF: .rodata:jpt_34FE↓o
.text:00000000000037F0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000037F5                 mov     ebx, 6Eh ; 'n'
.text:00000000000037FA                 jmp     loc_3632
.text:00000000000037FA ; ---------------------------------------------------------------------------
.text:00000000000037FF                 align 20h
.text:0000000000003800
.text:0000000000003800 def_388A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003800                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003800                                         ; DATA XREF: ...
.text:0000000000003800                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003803                 nop     dword ptr [rax+rax+00h]
.text:0000000000003808
.text:0000000000003808 def_34FE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003808                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003808                                         ; DATA XREF: ...
.text:0000000000003808                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000380E                 jnz     loc_3BB8
.text:0000000000003814                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003819                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000381E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003823                 call    ___ctype_b_loc
.text:0000000000003828                 mov     rcx, [rax]
.text:000000000000382B                 movzx   edx, bl
.text:000000000000382E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003834                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000383A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000383F                 mov     edi, 1
.text:0000000000003844                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003848                 and     ax, 4000h
.text:000000000000384C                 setnz   r12b
.text:0000000000003850                 setz    al
.text:0000000000003853                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003857
.text:0000000000003857 loc_3857:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003857                 test    al, al
.text:0000000000003859                 jnz     loc_41F1
.text:000000000000385F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003864                 setz    dl
.text:0000000000003867                 jmp     loc_3538
.text:0000000000003867 ; ---------------------------------------------------------------------------
.text:000000000000386C                 align 10h
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003870                 movzx   ebx, byte ptr [r9]
.text:0000000000003874                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003877                 ja      short def_388A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003879                 lea     rcx, jpt_388A
.text:0000000000003880                 movzx   edx, bl
.text:0000000000003883                 movsxd  rax, ds:(jpt_388A - 6BC8h)[rcx+rdx*4]
.text:0000000000003887                 add     rax, rcx
.text:000000000000388A                 jmp     rax             ; switch jump
.text:000000000000388A ; ---------------------------------------------------------------------------
.text:000000000000388C                 align 10h
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003890                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:0000000000003890                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003893                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003898                 jnz     loc_368E
.text:000000000000389E                 xchg    ax, ax
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000038A0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000038A0                 mov     edx, 5Ch ; '\'
.text:00000000000038A5                 mov     ebx, 5Ch ; '\'
.text:00000000000038AA                 jmp     loc_3644
.text:00000000000038AA ; ---------------------------------------------------------------------------
.text:00000000000038AF                 align 10h
.text:00000000000038B0
.text:00000000000038B0 loc_38B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038B0                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000038B0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000038B5                 xor     r10d, r10d
.text:00000000000038B8                 mov     ebx, 66h ; 'f'
.text:00000000000038BD                 jmp     loc_3644
.text:00000000000038BD ; ---------------------------------------------------------------------------
.text:00000000000038C2                 align 8
.text:00000000000038C8
.text:00000000000038C8 loc_38C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038C8                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000038C8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000038CD                 xor     r10d, r10d
.text:00000000000038D0                 mov     ebx, 6Eh ; 'n'
.text:00000000000038D5                 jmp     loc_3632
.text:00000000000038D5 ; ---------------------------------------------------------------------------
.text:00000000000038DA                 align 20h
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038E0                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000038E0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000038E5                 jmp     loc_36B0
.text:00000000000038E5 ; ---------------------------------------------------------------------------
.text:00000000000038EA                 align 10h
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000038F0                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000038F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000038F3
.text:00000000000038F3 loc_38F3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000038F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038F8                 setz    dl
.text:00000000000038FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003900                 jnz     loc_449A
.text:0000000000003906                 mov     eax, r8d
.text:0000000000003909                 mov     rcx, r15
.text:000000000000390C                 xor     eax, 1
.text:000000000000390F                 and     al, dl
.text:0000000000003911                 jz      short loc_3940
.text:0000000000003913                 cmp     r13, r15
.text:0000000000003916                 jbe     short loc_391D
.text:0000000000003918                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000391D
.text:000000000000391D loc_391D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000391D                 lea     rcx, [r15+1]
.text:0000000000003921                 cmp     r13, rcx
.text:0000000000003924                 jbe     short loc_392C
.text:0000000000003926                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000392C
.text:000000000000392C loc_392C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000392C                 lea     rcx, [r15+2]
.text:0000000000003930                 cmp     r13, rcx
.text:0000000000003933                 ja      loc_3F69
.text:0000000000003939
.text:0000000000003939 loc_3939:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003939                 lea     rcx, [r15+3]
.text:000000000000393D                 mov     r8d, eax
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003940                 cmp     r13, rcx
.text:0000000000003943                 jbe     short loc_394A
.text:0000000000003945                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000394A
.text:000000000000394A loc_394A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000394A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000394F                 lea     r15, [rcx+1]
.text:0000000000003953                 jz      loc_3F59
.text:0000000000003959                 lea     rax, [rbp+1]
.text:000000000000395D                 cmp     rax, r11
.text:0000000000003960                 jnb     short loc_397B
.text:0000000000003962                 mov     rax, [rsp+0E8h+s]
.text:0000000000003967                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000396C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003970                 sub     eax, 30h ; '0'
.text:0000000000003973                 cmp     al, 9
.text:0000000000003975                 jbe     loc_41A9
.text:000000000000397B
.text:000000000000397B loc_397B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000397B                 mov     eax, r12d
.text:000000000000397E                 mov     ebx, 30h ; '0'
.text:0000000000003983                 xor     r12d, r12d
.text:0000000000003986                 jmp     loc_3538
.text:0000000000003986 ; ---------------------------------------------------------------------------
.text:000000000000398B                 align 10h
.text:0000000000003990
.text:0000000000003990 loc_3990:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003990                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:0000000000003990                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003995                 mov     r12d, r10d
.text:0000000000003998                 setz    dl
.text:000000000000399B                 xor     r10d, r10d
.text:000000000000399E                 xor     eax, eax
.text:00000000000039A0                 jmp     loc_3538
.text:00000000000039A0 ; ---------------------------------------------------------------------------
.text:00000000000039A5                 align 8
.text:00000000000039A8
.text:00000000000039A8 loc_39A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039A8                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000039A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000039AD                 setz    dl
.text:00000000000039B0                 xor     r10d, r10d
.text:00000000000039B3                 jmp     loc_3778
.text:00000000000039B3 ; ---------------------------------------------------------------------------
.text:00000000000039B8                 align 20h
.text:00000000000039C0
.text:00000000000039C0 loc_39C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039C0                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000039C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000039C5                 setz    dl
.text:00000000000039C8                 xor     r10d, r10d
.text:00000000000039CB                 xor     r12d, r12d
.text:00000000000039CE                 jmp     loc_3781
.text:00000000000039CE ; ---------------------------------------------------------------------------
.text:00000000000039D3                 align 8
.text:00000000000039D8
.text:00000000000039D8 loc_39D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039D8                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000039D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000039DD                 mov     r12d, r10d
.text:00000000000039E0                 mov     ebx, 20h ; ' '
.text:00000000000039E5                 setz    dl
.text:00000000000039E8                 xor     r10d, r10d
.text:00000000000039EB                 jmp     loc_3781
.text:00000000000039F0 ; ---------------------------------------------------------------------------
.text:00000000000039F0
.text:00000000000039F0 loc_39F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000039F0                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:00000000000039F0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000039F5                 xor     r10d, r10d
.text:00000000000039F8                 mov     ebx, 72h ; 'r'
.text:00000000000039FD                 jmp     loc_3632
.text:00000000000039FD ; ---------------------------------------------------------------------------
.text:0000000000003A02                 align 8
.text:0000000000003A08
.text:0000000000003A08 loc_3A08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A08                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:0000000000003A08                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003A0D                 jmp     loc_36B0
.text:0000000000003A0D ; ---------------------------------------------------------------------------
.text:0000000000003A12                 align 8
.text:0000000000003A18
.text:0000000000003A18 loc_3A18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A18                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:0000000000003A18                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003A1D                 xor     r10d, r10d
.text:0000000000003A20                 mov     ebx, 74h ; 't'
.text:0000000000003A25                 jmp     loc_3632
.text:0000000000003A25 ; ---------------------------------------------------------------------------
.text:0000000000003A2A                 align 10h
.text:0000000000003A30
.text:0000000000003A30 loc_3A30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A30                                         ; DATA XREF: .rodata:jpt_388A↓o
.text:0000000000003A30                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003A35                 jmp     loc_36B0
.text:0000000000003A35 ; ---------------------------------------------------------------------------
.text:0000000000003A3A                 align 20h
.text:0000000000003A40
.text:0000000000003A40 loc_3A40:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003A40                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003A40                 xor     r10d, r10d
.text:0000000000003A43                 jmp     loc_34E0
.text:0000000000003A43 ; ---------------------------------------------------------------------------
.text:0000000000003A48                 align 10h
.text:0000000000003A50
.text:0000000000003A50 loc_3A50:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003A50                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003A55                 jnz     loc_43C0
.text:0000000000003A5B
.text:0000000000003A5B loc_3A5B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003A5B                 add     rbp, 1
.text:0000000000003A5F                 mov     eax, r8d
.text:0000000000003A62                 xor     r12d, r12d
.text:0000000000003A65                 mov     ebx, 5Ch ; '\'
.text:0000000000003A6A                 jmp     loc_357C
.text:0000000000003A6A ; ---------------------------------------------------------------------------
.text:0000000000003A6F                 align 10h
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003A70                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A75                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003A7A                 mov     r12d, r8d
.text:0000000000003A7D                 mov     rbp, r11
.text:0000000000003A80                 setz    dl
.text:0000000000003A83                 mov     eax, ebx
.text:0000000000003A85                 test    r15, r15
.text:0000000000003A88                 setz    cl
.text:0000000000003A8B                 and     eax, edx
.text:0000000000003A8D                 and     al, cl
.text:0000000000003A8F                 jnz     loc_44F6
.text:0000000000003A95                 mov     eax, ebx
.text:0000000000003A97                 xor     eax, 1
.text:0000000000003A9A                 and     dl, al
.text:0000000000003A9C                 jz      loc_440C
.text:0000000000003AA2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003AA7                 jz      loc_440A
.text:0000000000003AAD                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003AB2                 jnz     loc_44AD
.text:0000000000003AB8                 test    r13, r13
.text:0000000000003ABB                 setz    al
.text:0000000000003ABE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003AC4                 setnz   dl
.text:0000000000003AC7                 and     al, dl
.text:0000000000003AC9                 jz      loc_44EC
.text:0000000000003ACF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003AD4
.text:0000000000003AD4 loc_3AD4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003AD4                 lea     rbx, asc_694D   ; "'"
.text:0000000000003ADB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003ADF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003AE7                 mov     r15d, 1
.text:0000000000003AED                 mov     [rsp+0E8h+n], 1
.text:0000000000003AF6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003AFB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003B00                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003B04                 jmp     loc_33E3
.text:0000000000003B04 ; ---------------------------------------------------------------------------
.text:0000000000003B09                 align 10h
.text:0000000000003B10
.text:0000000000003B10 loc_3B10:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003B10                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B15                 jnz     loc_43C0
.text:0000000000003B1B                 test    r13, r13
.text:0000000000003B1E                 jz      loc_3F20
.text:0000000000003B24                 xor     edx, edx
.text:0000000000003B26                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003B2C                 jnz     loc_3F20
.text:0000000000003B32
.text:0000000000003B32 loc_3B32:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003B32                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003B32                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003B37                 add     r15, 3
.text:0000000000003B3B                 xor     eax, eax
.text:0000000000003B3D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003B42                 xor     r8d, r8d
.text:0000000000003B45                 mov     r13, rdx
.text:0000000000003B48                 mov     ebx, 27h ; '''
.text:0000000000003B4D                 jmp     loc_3569
.text:0000000000003B4D ; ---------------------------------------------------------------------------
.text:0000000000003B52                 align 8
.text:0000000000003B58
.text:0000000000003B58 loc_3B58:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003B58                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003B5D                 jz      short loc_3B80
.text:0000000000003B5F                 lea     rcx, [rbp+2]
.text:0000000000003B63                 cmp     rcx, r11
.text:0000000000003B66                 jnb     short loc_3B80
.text:0000000000003B68                 mov     rax, [rsp+0E8h+s]
.text:0000000000003B6D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003B72                 jz      loc_4302
.text:0000000000003B78                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003B80
.text:0000000000003B80 loc_3B80:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003B80                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003B80                 xor     edx, edx
.text:0000000000003B82                 xor     r12d, r12d
.text:0000000000003B85                 xor     eax, eax
.text:0000000000003B87                 mov     ebx, 3Fh ; '?'
.text:0000000000003B8C                 jmp     loc_3538
.text:0000000000003B8C ; ---------------------------------------------------------------------------
.text:0000000000003B91                 align 8
.text:0000000000003B98
.text:0000000000003B98 loc_3B98:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003B98                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003B9D                 jnz     loc_43C0
.text:0000000000003BA3                 xor     r12d, r12d
.text:0000000000003BA6                 xor     eax, eax
.text:0000000000003BA8                 mov     ebx, 3Fh ; '?'
.text:0000000000003BAD                 jmp     loc_3569
.text:0000000000003BAD ; ---------------------------------------------------------------------------
.text:0000000000003BB2                 align 8
.text:0000000000003BB8
.text:0000000000003BB8 loc_3BB8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003BB8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003BC0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BC4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003BD0                 mov     [rsp+0E8h+ps], rax
.text:0000000000003BD5                 jnz     short loc_3C04
.text:0000000000003BD7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003BDC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003BE1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003BE6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003BEB                 call    _strlen
.text:0000000000003BF0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003BF6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003BFC                 mov     r11, rax
.text:0000000000003BFF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003C04
.text:0000000000003C04 loc_3C04:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003C04                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003C0C                 xor     ecx, ecx
.text:0000000000003C0E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003C12                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003C17                 mov     rbx, rcx
.text:0000000000003C1A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003C22                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003C27                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003C2C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003C34                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003C39                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003C3E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003C43
.text:0000000000003C43 loc_3C43:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003C43                 mov     rax, [rsp+0E8h+s]
.text:0000000000003C48                 lea     r14, [rbp+rbx+0]
.text:0000000000003C4D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003C52                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003C57                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003C5C                 lea     r13, [rax+r14]
.text:0000000000003C60                 sub     rdx, r14
.text:0000000000003C63                 mov     rsi, r13
.text:0000000000003C66                 call    rpl_mbrtowc
.text:0000000000003C6B                 test    rax, rax
.text:0000000000003C6E                 mov     r15, rax
.text:0000000000003C71                 jz      short loc_3CC1
.text:0000000000003C73                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C77                 jz      loc_4295
.text:0000000000003C7D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003C81                 jz      loc_4221
.text:0000000000003C87                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C8C                 setz    al
.text:0000000000003C8F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003C93                 jnz     loc_3E30
.text:0000000000003C99
.text:0000000000003C99 loc_3C99:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003C99                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003C99                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003CA0                 call    _iswprint
.text:0000000000003CA5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003CAA                 test    eax, eax
.text:0000000000003CAC                 mov     eax, 0
.text:0000000000003CB1                 cmovz   r12d, eax
.text:0000000000003CB5                 add     rbx, r15
.text:0000000000003CB8                 call    _mbsinit
.text:0000000000003CBD                 test    eax, eax
.text:0000000000003CBF                 jz      short loc_3C43
.text:0000000000003CC1
.text:0000000000003CC1 loc_3CC1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003CC1                 mov     edx, r12d
.text:0000000000003CC4                 mov     rdi, rbx
.text:0000000000003CC7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003CCD                 xor     edx, 1
.text:0000000000003CD0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003CD5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003CDB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003CDF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003CE7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003CEC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003CF1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003CF6
.text:0000000000003CF6 loc_3CF6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003CF6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003CF6                 cmp     rdi, 1
.text:0000000000003CFA                 jbe     loc_42FB
.text:0000000000003D00
.text:0000000000003D00 loc_3D00:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003D00                 mov     rcx, rdi
.text:0000000000003D03                 xor     esi, esi
.text:0000000000003D05                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003D0B                 add     rcx, rbp
.text:0000000000003D0E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003D13                 jmp     loc_3DCE
.text:0000000000003D13 ; ---------------------------------------------------------------------------
.text:0000000000003D18                 align 20h
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003D20                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003D25                 setz    al
.text:0000000000003D28                 test    r9b, r9b
.text:0000000000003D2B                 jnz     loc_41E0
.text:0000000000003D31                 mov     esi, r8d
.text:0000000000003D34                 xor     esi, 1
.text:0000000000003D37                 and     al, sil
.text:0000000000003D3A                 jz      short loc_3D6B
.text:0000000000003D3C                 cmp     r13, r15
.text:0000000000003D3F                 jbe     short loc_3D46
.text:0000000000003D41                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003D46
.text:0000000000003D46 loc_3D46:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003D46                 lea     rsi, [r15+1]
.text:0000000000003D4A                 cmp     r13, rsi
.text:0000000000003D4D                 jbe     short loc_3D55
.text:0000000000003D4F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003D55
.text:0000000000003D55 loc_3D55:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003D55                 lea     rsi, [r15+2]
.text:0000000000003D59                 cmp     r13, rsi
.text:0000000000003D5C                 jbe     short loc_3D64
.text:0000000000003D5E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003D64
.text:0000000000003D64 loc_3D64:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003D64                 add     r15, 3
.text:0000000000003D68                 mov     r8d, eax
.text:0000000000003D6B
.text:0000000000003D6B loc_3D6B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003D6B                 cmp     r13, r15
.text:0000000000003D6E                 jbe     short loc_3D75
.text:0000000000003D70                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003D75
.text:0000000000003D75 loc_3D75:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003D75                 lea     rax, [r15+1]
.text:0000000000003D79                 cmp     r13, rax
.text:0000000000003D7C                 jbe     short loc_3D8B
.text:0000000000003D7E                 mov     eax, ebx
.text:0000000000003D80                 shr     al, 6
.text:0000000000003D83                 add     eax, 30h ; '0'
.text:0000000000003D86                 mov     [r14+r15+1], al
.text:0000000000003D8B
.text:0000000000003D8B loc_3D8B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003D8B                 lea     rax, [r15+2]
.text:0000000000003D8F                 cmp     r13, rax
.text:0000000000003D92                 jbe     short loc_3DA4
.text:0000000000003D94                 mov     eax, ebx
.text:0000000000003D96                 shr     al, 3
.text:0000000000003D99                 and     eax, 7
.text:0000000000003D9C                 add     eax, 30h ; '0'
.text:0000000000003D9F                 mov     [r14+r15+2], al
.text:0000000000003DA4
.text:0000000000003DA4 loc_3DA4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003DA4                 and     ebx, 7
.text:0000000000003DA7                 add     rbp, 1
.text:0000000000003DAB                 add     r15, 3
.text:0000000000003DAF                 add     ebx, 30h ; '0'
.text:0000000000003DB2                 cmp     rbp, rcx
.text:0000000000003DB5                 jnb     loc_35A0
.text:0000000000003DBB                 mov     esi, edx
.text:0000000000003DBD
.text:0000000000003DBD loc_3DBD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003DBD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003DBD                 cmp     r13, r15
.text:0000000000003DC0                 jbe     short loc_3DC6
.text:0000000000003DC2                 mov     [r14+r15], bl
.text:0000000000003DC6
.text:0000000000003DC6 loc_3DC6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003DC6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003DCA                 add     r15, 1
.text:0000000000003DCE
.text:0000000000003DCE loc_3DCE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003DCE                 test    dl, dl
.text:0000000000003DD0                 jnz     loc_3D20
.text:0000000000003DD6                 mov     eax, esi
.text:0000000000003DD8                 xor     eax, 1
.text:0000000000003DDB                 and     eax, r8d
.text:0000000000003DDE                 test    r10b, r10b
.text:0000000000003DE1                 jz      short loc_3DF1
.text:0000000000003DE3                 cmp     r13, r15
.text:0000000000003DE6                 jbe     short loc_3DED
.text:0000000000003DE8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003DED
.text:0000000000003DED loc_3DED:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003DED                 add     r15, 1
.text:0000000000003DF1
.text:0000000000003DF1 loc_3DF1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003DF1                 add     rbp, 1
.text:0000000000003DF5                 cmp     rbp, rcx
.text:0000000000003DF8                 jnb     loc_357C
.text:0000000000003DFE                 test    al, al
.text:0000000000003E00                 jz      loc_41FE
.text:0000000000003E06                 cmp     r13, r15
.text:0000000000003E09                 jbe     short loc_3E10
.text:0000000000003E0B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003E10
.text:0000000000003E10 loc_3E10:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003E10                 lea     rax, [r15+1]
.text:0000000000003E14                 cmp     r13, rax
.text:0000000000003E17                 jbe     short loc_3E1F
.text:0000000000003E19                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003E1F
.text:0000000000003E1F loc_3E1F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003E1F                 add     r15, 2
.text:0000000000003E23                 xor     r10d, r10d
.text:0000000000003E26                 xor     r8d, r8d
.text:0000000000003E29                 jmp     short loc_3DBD
.text:0000000000003E29 ; ---------------------------------------------------------------------------
.text:0000000000003E2B                 align 10h
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003E30                 cmp     r15, 1
.text:0000000000003E34                 jz      loc_3C99
.text:0000000000003E3A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003E3F                 lea     rcx, [rdi+r15]
.text:0000000000003E43                 lea     rdx, [rdi+r14+1]
.text:0000000000003E48                 lea     r8, [rcx+r14]
.text:0000000000003E4C                 jmp     short loc_3E5D
.text:0000000000003E4C ; ---------------------------------------------------------------------------
.text:0000000000003E4E                 align 10h
.text:0000000000003E50
.text:0000000000003E50 loc_3E50:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003E50                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003E50                 add     rdx, 1
.text:0000000000003E54                 cmp     r8, rdx
.text:0000000000003E57                 jz      loc_3C99
.text:0000000000003E5D
.text:0000000000003E5D loc_3E5D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003E5D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003E60                 sub     ecx, 5Bh ; '['
.text:0000000000003E63                 cmp     cl, 21h ; '!'
.text:0000000000003E66                 ja      short loc_3E50
.text:0000000000003E68                 mov     esi, 1
.text:0000000000003E6D                 shl     rsi, cl
.text:0000000000003E70                 mov     rcx, rsi
.text:0000000000003E73                 mov     rsi, 20000002Bh
.text:0000000000003E7D                 test    rcx, rsi
.text:0000000000003E80                 jz      short loc_3E50
.text:0000000000003E82                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003E87                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003E8C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003E91                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E99
.text:0000000000003E99 loc_3E99:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003E99                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003E99                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003E9E                 jz      short loc_3EB0
.text:0000000000003EA0                 test    al, al
.text:0000000000003EA2                 mov     eax, 4
.text:0000000000003EA7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003EAC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003EB0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003EB0                 sub     rsp, 8
.text:0000000000003EB4                 mov     rcx, rbp
.text:0000000000003EB7                 mov     rsi, r13
.text:0000000000003EBA                 push    [rsp+0F0h+var_88]
.text:0000000000003EBE                 push    [rsp+0F8h+var_80]
.text:0000000000003EC2                 mov     rdi, r14
.text:0000000000003EC5                 push    0
.text:0000000000003EC7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003ECF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003ED4                 mov     rdx, [rsp+108h+s]
.text:0000000000003ED9                 and     r9d, 0FFFFFFFDh
.text:0000000000003EDD                 call    quotearg_buffer_restyled
.text:0000000000003EE2                 add     rsp, 20h
.text:0000000000003EE6                 mov     r15, rax
.text:0000000000003EE9
.text:0000000000003EE9 loc_3EE9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003EE9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003EE9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003EF1                 xor     rbx, fs:28h
.text:0000000000003EFA                 mov     rax, r15
.text:0000000000003EFD                 jnz     loc_4503
.text:0000000000003F03                 add     rsp, 0B8h
.text:0000000000003F0A                 pop     rbx
.text:0000000000003F0B                 pop     rbp
.text:0000000000003F0C                 pop     r12
.text:0000000000003F0E                 pop     r13
.text:0000000000003F10                 pop     r14
.text:0000000000003F12                 pop     r15
.text:0000000000003F14                 retn
.text:0000000000003F14 ; ---------------------------------------------------------------------------
.text:0000000000003F15                 align 8
.text:0000000000003F18
.text:0000000000003F18 loc_3F18:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003F18                 mov     rbp, r11
.text:0000000000003F1B                 jmp     loc_3E99
.text:0000000000003F20 ; ---------------------------------------------------------------------------
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003F20                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003F20                 cmp     r13, r15
.text:0000000000003F23                 jbe     short loc_3F2A
.text:0000000000003F25                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003F2A
.text:0000000000003F2A loc_3F2A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003F2A                 lea     rax, [r15+1]
.text:0000000000003F2E                 cmp     r13, rax
.text:0000000000003F31                 jbe     short loc_3F39
.text:0000000000003F33                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003F39
.text:0000000000003F39 loc_3F39:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003F39                 lea     rax, [r15+2]
.text:0000000000003F3D                 cmp     r13, rax
.text:0000000000003F40                 jbe     loc_4532
.text:0000000000003F46                 mov     rdx, r13
.text:0000000000003F49                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F4F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003F54                 jmp     loc_3B32
.text:0000000000003F59 ; ---------------------------------------------------------------------------
.text:0000000000003F59
.text:0000000000003F59 loc_3F59:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003F59                 mov     eax, r12d
.text:0000000000003F5C                 mov     ebx, 30h ; '0'
.text:0000000000003F61                 xor     r12d, r12d
.text:0000000000003F64                 jmp     loc_3569
.text:0000000000003F69 ; ---------------------------------------------------------------------------
.text:0000000000003F69
.text:0000000000003F69 loc_3F69:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003F69                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F6F                 jmp     loc_3939
.text:0000000000003F74 ; ---------------------------------------------------------------------------
.text:0000000000003F74
.text:0000000000003F74 loc_3F74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003F74                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:0000000000003F74                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003F76                 jnz     loc_33A3        ; jumptable 00000000000121F1 case 1
.text:0000000000003F7C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003F81
.text:0000000000003F81 loc_3F81:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003F81                 test    r13, r13
.text:0000000000003F84                 jnz     loc_451A
.text:0000000000003F8A                 lea     rax, asc_694D   ; "'"
.text:0000000000003F91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F9A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F9F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FA4                 xor     r12d, r12d
.text:0000000000003FA7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003FAC                 mov     [rsp+0E8h+n], 1
.text:0000000000003FB5                 mov     [rsp+0E8h+s2], rax
.text:0000000000003FBA                 mov     r15d, 1
.text:0000000000003FC0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003FC8                 jmp     loc_33E3
.text:0000000000003FC8 ; ---------------------------------------------------------------------------
.text:0000000000003FCD                 align 10h
.text:0000000000003FD0
.text:0000000000003FD0 loc_3FD0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003FD0                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:0000000000003FD0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003FD2                 jnz     loc_43CD
.text:0000000000003FD8                 test    r13, r13
.text:0000000000003FDB                 jz      loc_4206
.text:0000000000003FE1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003FE5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003FEA                 xor     r12d, r12d
.text:0000000000003FED                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FF2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FFB
.text:0000000000003FFB loc_3FFB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003FFB                 lea     rax, unk_694B
.text:0000000000004002                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004007                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000400C                 mov     [rsp+0E8h+n], 1
.text:0000000000004015                 mov     r15d, 1
.text:000000000000401B                 mov     [rsp+0E8h+s2], rax
.text:0000000000004020                 jmp     loc_33E3
.text:0000000000004025 ; ---------------------------------------------------------------------------
.text:0000000000004025
.text:0000000000004025 loc_4025:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004025                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:0000000000004025                 lea     rax, unk_694B   ; jumptable 00000000000121F1 case 6
.text:000000000000402C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004031                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004036                 xor     r12d, r12d
.text:0000000000004039                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004042                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004047                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000404C                 mov     [rsp+0E8h+n], 1
.text:0000000000004055                 xor     r15d, r15d
.text:0000000000004058                 mov     [rsp+0E8h+s2], rax
.text:000000000000405D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004065                 jmp     loc_33E3
.text:000000000000406A ; ---------------------------------------------------------------------------
.text:000000000000406A
.text:000000000000406A loc_406A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000406A                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:000000000000406A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000406F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004074                 xor     r12d, r12d
.text:0000000000004077                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004080                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004085                 xor     r15d, r15d
.text:0000000000004088                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000408D                 mov     [rsp+0E8h+n], 0
.text:0000000000004096                 mov     [rsp+0E8h+s2], 0
.text:000000000000409F                 jmp     loc_33E3
.text:00000000000040A4 ; ---------------------------------------------------------------------------
.text:00000000000040A4
.text:00000000000040A4 loc_40A4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000040A4                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:00000000000040A4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000040A9                 jz      short loc_4101
.text:00000000000040AB                 lea     rsi, asc_694F   ; "`"
.text:00000000000040B2                 xor     edi, edi        ; domainname
.text:00000000000040B4                 mov     edx, 5          ; category
.text:00000000000040B9                 call    _dcgettext
.text:00000000000040BE                 mov     rcx, rax
.text:00000000000040C1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000040C6                 lea     rax, asc_694F   ; "`"
.text:00000000000040CD                 cmp     rcx, rax
.text:00000000000040D0                 jz      loc_446E
.text:00000000000040D6
.text:00000000000040D6 loc_40D6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000040D6                 lea     rsi, asc_694D   ; "'"
.text:00000000000040DD                 xor     edi, edi        ; domainname
.text:00000000000040DF                 mov     edx, 5          ; category
.text:00000000000040E4                 call    _dcgettext
.text:00000000000040E9                 mov     rcx, rax
.text:00000000000040EC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000040F1                 lea     rax, asc_694D   ; "'"
.text:00000000000040F8                 cmp     rcx, rax
.text:00000000000040FB                 jz      loc_4484
.text:0000000000004101
.text:0000000000004101 loc_4101:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004101                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004101                 xor     r15d, r15d
.text:0000000000004104                 test    ebx, ebx
.text:0000000000004106                 jz      loc_42CD
.text:000000000000410C
.text:000000000000410C loc_410C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000410C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000410C                 test    ebx, ebx
.text:000000000000410E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004113                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004118                 xor     r12d, r12d
.text:000000000000411B                 mov     rdi, rbx        ; s
.text:000000000000411E                 call    _strlen
.text:0000000000004123                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004128                 mov     [rsp+0E8h+n], rax
.text:000000000000412D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004132                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004137                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004140                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004145                 jmp     loc_33E3
.text:000000000000414A ; ---------------------------------------------------------------------------
.text:000000000000414A
.text:000000000000414A loc_414A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000414A                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:000000000000414A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000414F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004154                 xor     r12d, r12d
.text:0000000000004157                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004160                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004165                 xor     r15d, r15d
.text:0000000000004168                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000416D                 mov     [rsp+0E8h+n], 0
.text:0000000000004176                 mov     [rsp+0E8h+s2], 0
.text:000000000000417F                 jmp     loc_33E3
.text:0000000000004184 ; ---------------------------------------------------------------------------
.text:0000000000004184
.text:0000000000004184 loc_4184:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004184                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:0000000000004184                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004189                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000418E                 xor     r12d, r12d
.text:0000000000004191                 mov     [rsp+0E8h+var_98], 0
.text:000000000000419A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000419F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000041A4                 jmp     loc_33C3
.text:00000000000041A9 ; ---------------------------------------------------------------------------
.text:00000000000041A9
.text:00000000000041A9 loc_41A9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000041A9                 cmp     r13, r15
.text:00000000000041AC                 jbe     short loc_41B3
.text:00000000000041AE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000041B3
.text:00000000000041B3 loc_41B3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000041B3                 lea     rax, [rcx+2]
.text:00000000000041B7                 cmp     r13, rax
.text:00000000000041BA                 jbe     short loc_41C2
.text:00000000000041BC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000041C2
.text:00000000000041C2 loc_41C2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000041C2                 mov     eax, r12d
.text:00000000000041C5                 lea     r15, [rcx+3]
.text:00000000000041C9                 xor     r12d, r12d
.text:00000000000041CC                 mov     ebx, 30h ; '0'
.text:00000000000041D1                 jmp     loc_3538
.text:00000000000041D1 ; ---------------------------------------------------------------------------
.text:00000000000041D6                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000041E0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000041E5                 mov     rbp, r11
.text:00000000000041E8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000041EC                 jmp     loc_3E99
.text:00000000000041F1 ; ---------------------------------------------------------------------------
.text:00000000000041F1
.text:00000000000041F1 loc_41F1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000041F1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000041F6                 xor     r12d, r12d
.text:00000000000041F9                 jmp     loc_3D00
.text:00000000000041FE ; ---------------------------------------------------------------------------
.text:00000000000041FE
.text:00000000000041FE loc_41FE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000041FE                 xor     r10d, r10d
.text:0000000000004201                 jmp     loc_3DBD
.text:0000000000004206 ; ---------------------------------------------------------------------------
.text:0000000000004206
.text:0000000000004206 loc_4206:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004206                 mov     [rsp+0E8h+var_98], 0
.text:000000000000420F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004214                 xor     r12d, r12d
.text:0000000000004217                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000421C                 jmp     loc_3FFB
.text:0000000000004221 ; ---------------------------------------------------------------------------
.text:0000000000004221
.text:0000000000004221 loc_4221:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004221                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004226                 mov     rsi, r14
.text:0000000000004229                 mov     rcx, r13
.text:000000000000422C                 mov     rax, rbx
.text:000000000000422F                 mov     rdi, rbx
.text:0000000000004232                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004238                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000423D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004245                 cmp     rsi, r11
.text:0000000000004248                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000424E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004256                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000425B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004260                 jnb     short loc_4288
.text:0000000000004262                 cmp     byte ptr [rcx], 0
.text:0000000000004265                 jnz     short loc_4277
.text:0000000000004267                 jmp     short loc_4288
.text:0000000000004267 ; ---------------------------------------------------------------------------
.text:0000000000004269                 align 10h
.text:0000000000004270
.text:0000000000004270 loc_4270:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004270                 cmp     byte ptr [r9+rax], 0
.text:0000000000004275                 jz      short loc_4285
.text:0000000000004277
.text:0000000000004277 loc_4277:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004277                 add     rax, 1
.text:000000000000427B                 lea     rdx, [rbp+rax+0]
.text:0000000000004280                 cmp     r11, rdx
.text:0000000000004283                 ja      short loc_4270
.text:0000000000004285
.text:0000000000004285 loc_4285:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004285                 mov     rdi, rax
.text:0000000000004288
.text:0000000000004288 loc_4288:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004288                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004288                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000428D                 xor     r12d, r12d
.text:0000000000004290                 jmp     loc_3CF6
.text:0000000000004295 ; ---------------------------------------------------------------------------
.text:0000000000004295
.text:0000000000004295 loc_4295:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004295                 mov     rdi, rbx
.text:0000000000004298                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000429E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000042A3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000042A9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000042B1                 xor     r12d, r12d
.text:00000000000042B4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000042B9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000042BE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000042C3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000042C8                 jmp     loc_3CF6
.text:00000000000042CD ; ---------------------------------------------------------------------------
.text:00000000000042CD
.text:00000000000042CD loc_42CD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000042CD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000042D2                 movzx   eax, byte ptr [rdx]
.text:00000000000042D5                 test    al, al
.text:00000000000042D7                 jz      loc_410C
.text:00000000000042DD                 nop     dword ptr [rax]
.text:00000000000042E0
.text:00000000000042E0 loc_42E0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000042E0                 cmp     r13, r15
.text:00000000000042E3                 jbe     short loc_42E9
.text:00000000000042E5                 mov     [r14+r15], al
.text:00000000000042E9
.text:00000000000042E9 loc_42E9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000042E9                 add     r15, 1
.text:00000000000042ED                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000042F2                 test    al, al
.text:00000000000042F4                 jnz     short loc_42E0
.text:00000000000042F6                 jmp     loc_410C
.text:00000000000042FB ; ---------------------------------------------------------------------------
.text:00000000000042FB
.text:00000000000042FB loc_42FB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000042FB                 mov     eax, edx
.text:00000000000042FD                 jmp     loc_3857
.text:0000000000004302 ; ---------------------------------------------------------------------------
.text:0000000000004302
.text:0000000000004302 loc_4302:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000004302                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000004306                 cmp     bl, 3Eh ; '>'
.text:0000000000004309                 ja      loc_3B80
.text:000000000000430F                 mov     rax, 7000A38200000000h
.text:0000000000004319                 bt      rax, rbx
.text:000000000000431D                 jnb     loc_3B80
.text:0000000000004323                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004328                 jnz     loc_4512
.text:000000000000432E                 cmp     r13, r15
.text:0000000000004331                 jbe     short loc_4338
.text:0000000000004333                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004338
.text:0000000000004338 loc_4338:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004338                 lea     rax, [r15+1]
.text:000000000000433C                 cmp     r13, rax
.text:000000000000433F                 jbe     short loc_4347
.text:0000000000004341                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004347
.text:0000000000004347 loc_4347:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004347                 lea     rax, [r15+2]
.text:000000000000434B                 cmp     r13, rax
.text:000000000000434E                 jbe     short loc_4356
.text:0000000000004350                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004356
.text:0000000000004356 loc_4356:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004356                 lea     rax, [r15+3]
.text:000000000000435A                 cmp     r13, rax
.text:000000000000435D                 jbe     short loc_4365
.text:000000000000435F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004365
.text:0000000000004365 loc_4365:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004365                 add     r15, 4
.text:0000000000004369                 xor     edx, edx
.text:000000000000436B                 xor     r12d, r12d
.text:000000000000436E                 xor     eax, eax
.text:0000000000004370                 mov     rbp, rcx
.text:0000000000004373                 jmp     loc_3538
.text:0000000000004378 ; ---------------------------------------------------------------------------
.text:0000000000004378
.text:0000000000004378 loc_4378:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004378                                         ; DATA XREF: .rodata:jpt_33A1↓o
.text:0000000000004378                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000437A                 jz      loc_4508
.text:0000000000004380                 lea     rax, asc_694D   ; "'"
.text:0000000000004387                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000438C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004391                 xor     r12d, r12d
.text:0000000000004394                 mov     [rsp+0E8h+var_98], 0
.text:000000000000439D                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000043A2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000043A7                 mov     [rsp+0E8h+n], 1
.text:00000000000043B0                 xor     r15d, r15d
.text:00000000000043B3                 mov     [rsp+0E8h+s2], rax
.text:00000000000043B8                 jmp     loc_33E3
.text:00000000000043B8 ; ---------------------------------------------------------------------------
.text:00000000000043BD                 align 20h
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000043C0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000043C0                 mov     rbp, r11
.text:00000000000043C3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000043C8                 jmp     loc_3E99
.text:00000000000043CD ; ---------------------------------------------------------------------------
.text:00000000000043CD
.text:00000000000043CD loc_43CD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000043CD                 lea     rax, unk_694B
.text:00000000000043D4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043D9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043DE                 xor     r12d, r12d
.text:00000000000043E1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043EA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000043EF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000043F4                 mov     [rsp+0E8h+n], 1
.text:00000000000043FD                 xor     r15d, r15d
.text:0000000000004400                 mov     [rsp+0E8h+s2], rax
.text:0000000000004405                 jmp     loc_33E3
.text:000000000000440A ; ---------------------------------------------------------------------------
.text:000000000000440A
.text:000000000000440A loc_440A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000440A                 mov     eax, edx
.text:000000000000440C
.text:000000000000440C loc_440C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000440C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000440C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000004411                 test    rbx, rbx
.text:0000000000004414                 jz      short loc_4442
.text:0000000000004416                 test    al, al
.text:0000000000004418                 jz      short loc_4442
.text:000000000000441A                 movzx   ecx, byte ptr [rbx]
.text:000000000000441D                 mov     rax, rbx
.text:0000000000004420                 test    cl, cl
.text:0000000000004422                 jz      short loc_4442
.text:0000000000004424                 mov     rdx, r15
.text:0000000000004427                 sub     rax, r15
.text:000000000000442A
.text:000000000000442A loc_442A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000442A                 cmp     r13, rdx
.text:000000000000442D                 jbe     short loc_4433
.text:000000000000442F                 mov     [r14+rdx], cl
.text:0000000000004433
.text:0000000000004433 loc_4433:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004433                 add     rdx, 1
.text:0000000000004437                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000443B                 test    cl, cl
.text:000000000000443D                 jnz     short loc_442A
.text:000000000000443F                 mov     r15, rdx
.text:0000000000004442
.text:0000000000004442 loc_4442:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004442                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004442                 cmp     r13, r15
.text:0000000000004445                 jbe     loc_3EE9
.text:000000000000444B                 mov     byte ptr [r14+r15], 0
.text:0000000000004450                 jmp     loc_3EE9
.text:0000000000004455 ; ---------------------------------------------------------------------------
.text:0000000000004455
.text:0000000000004455 loc_4455:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004455                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000445A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000445F                 mov     rbp, r11
.text:0000000000004462                 setz    al
.text:0000000000004465                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004469                 jmp     loc_3E99
.text:000000000000446E ; ---------------------------------------------------------------------------
.text:000000000000446E
.text:000000000000446E loc_446E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000446E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004472                 mov     rdi, rcx
.text:0000000000004475                 call    gettext_quote
.text:000000000000447A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000447F                 jmp     loc_40D6
.text:0000000000004484 ; ---------------------------------------------------------------------------
.text:0000000000004484
.text:0000000000004484 loc_4484:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004484                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004488                 mov     rdi, rcx
.text:000000000000448B                 call    gettext_quote
.text:0000000000004490                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004495                 jmp     loc_4101
.text:000000000000449A ; ---------------------------------------------------------------------------
.text:000000000000449A
.text:000000000000449A loc_449A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000449A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000449F                 mov     rbp, r11
.text:00000000000044A2                 mov     eax, edx
.text:00000000000044A4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000044A8                 jmp     loc_3E99
.text:00000000000044AD ; ---------------------------------------------------------------------------
.text:00000000000044AD
.text:00000000000044AD loc_44AD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000044AD                 sub     rsp, 8
.text:00000000000044B1                 mov     r8d, 5
.text:00000000000044B7                 mov     rcx, r11
.text:00000000000044BA                 push    [rsp+0F0h+var_88]
.text:00000000000044BE                 push    [rsp+0F8h+var_80]
.text:00000000000044C2                 mov     rdi, r14
.text:00000000000044C5                 push    [rsp+100h+var_C8]
.text:00000000000044C9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000044D1                 mov     rdx, [rsp+108h+s]
.text:00000000000044D6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000044DB                 call    quotearg_buffer_restyled
.text:00000000000044E0                 add     rsp, 20h
.text:00000000000044E4                 mov     r15, rax
.text:00000000000044E7                 jmp     loc_3EE9
.text:00000000000044EC ; ---------------------------------------------------------------------------
.text:00000000000044EC
.text:00000000000044EC loc_44EC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000044EC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000044F1                 jmp     loc_440C
.text:00000000000044F6 ; ---------------------------------------------------------------------------
.text:00000000000044F6
.text:00000000000044F6 loc_44F6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000044F6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000044FE                 jmp     loc_3E99
.text:0000000000004503 ; ---------------------------------------------------------------------------
.text:0000000000004503
.text:0000000000004503 loc_4503:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000004503                 call    ___stack_chk_fail
.text:0000000000004508 ; ---------------------------------------------------------------------------
.text:0000000000004508
.text:0000000000004508 loc_4508:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000004508                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000450D                 jmp     loc_3F81
.text:0000000000004512 ; ---------------------------------------------------------------------------
.text:0000000000004512
.text:0000000000004512 loc_4512:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000004512                 mov     rbp, r11
.text:0000000000004515                 jmp     loc_3EB0
.text:000000000000451A ; ---------------------------------------------------------------------------
.text:000000000000451A
.text:000000000000451A loc_451A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000451A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000451F                 xor     eax, eax
.text:0000000000004521                 xor     r12d, r12d
.text:0000000000004524                 mov     [rsp+0E8h+var_98], 0
.text:000000000000452D                 jmp     loc_3AD4
.text:0000000000004532 ; ---------------------------------------------------------------------------
.text:0000000000004532
.text:0000000000004532 loc_4532:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004532                 mov     rdx, r13
.text:0000000000004535                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000453A                 jmp     loc_3B32
.text:000000000000453F ; ---------------------------------------------------------------------------
.text:000000000000453F
.text:000000000000453F def_33A1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000453F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000453F ; } // starts at 3310
.text:000000000000453F quotearg_buffer_restyled endp
.text:000000000000453F
.text:000000000000453F ; ---------------------------------------------------------------------------
.text:0000000000004544                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004550                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004550
.text:0000000000004550 var_50          = qword ptr -50h
.text:0000000000004550 var_48          = qword ptr -48h
.text:0000000000004550 var_40          = dword ptr -40h
.text:0000000000004550 var_3C          = dword ptr -3Ch
.text:0000000000004550
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 push    r15
.text:0000000000004552                 push    r14
.text:0000000000004554                 movsxd  r15, edi
.text:0000000000004557                 push    r13
.text:0000000000004559                 push    r12
.text:000000000000455B                 mov     r14, rdx
.text:000000000000455E                 push    rbp
.text:000000000000455F                 push    rbx
.text:0000000000004560                 mov     rbp, rcx
.text:0000000000004563                 sub     rsp, 28h
.text:0000000000004567                 mov     [rsp+58h+var_50], rsi
.text:000000000000456C                 call    ___errno_location
.text:0000000000004571                 mov     r13, rax
.text:0000000000004574                 mov     eax, [rax]
.text:0000000000004576                 test    r15d, r15d
.text:0000000000004579                 mov     rbx, cs:slotvec
.text:0000000000004580                 mov     [rsp+58h+var_40], eax
.text:0000000000004584                 js      loc_46F1
.text:000000000000458A                 cmp     cs:nslots, r15d
.text:0000000000004591                 jg      short loc_45F5
.text:0000000000004593                 cmp     r15d, 7FFFFFFFh
.text:000000000000459A                 jz      loc_46F6
.text:00000000000045A0                 lea     r12d, [r15+1]
.text:00000000000045A4                 lea     rax, slotvec0
.text:00000000000045AB                 movsxd  rsi, r12d
.text:00000000000045AE                 shl     rsi, 4
.text:00000000000045B2                 cmp     rbx, rax
.text:00000000000045B5                 jz      loc_46D0
.text:00000000000045BB                 mov     rdi, rbx
.text:00000000000045BE                 call    xrealloc
.text:00000000000045C3                 mov     rbx, rax
.text:00000000000045C6                 mov     cs:slotvec, rax
.text:00000000000045CD
.text:00000000000045CD loc_45CD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000045CD                 movsxd  rdi, cs:nslots
.text:00000000000045D4                 mov     edx, r12d
.text:00000000000045D7                 xor     esi, esi        ; c
.text:00000000000045D9                 sub     edx, edi
.text:00000000000045DB                 shl     rdi, 4
.text:00000000000045DF                 movsxd  rdx, edx
.text:00000000000045E2                 add     rdi, rbx        ; s
.text:00000000000045E5                 shl     rdx, 4          ; n
.text:00000000000045E9                 call    _memset
.text:00000000000045EE                 mov     cs:nslots, r12d
.text:00000000000045F5
.text:00000000000045F5 loc_45F5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000045F5                 mov     eax, [rbp+4]
.text:00000000000045F8                 shl     r15, 4
.text:00000000000045FC                 sub     rsp, 8
.text:0000000000004600                 add     rbx, r15
.text:0000000000004603                 lea     r15, [rbp+8]
.text:0000000000004607                 mov     r8d, [rbp+0]
.text:000000000000460B                 mov     r11, [rbx]
.text:000000000000460E                 mov     r12, [rbx+8]
.text:0000000000004612                 mov     rcx, r14
.text:0000000000004615                 or      eax, 1
.text:0000000000004618                 mov     [rsp+60h+var_3C], eax
.text:000000000000461C                 push    qword ptr [rbp+30h]
.text:000000000000461F                 mov     r9d, eax
.text:0000000000004622                 push    qword ptr [rbp+28h]
.text:0000000000004625                 push    r15
.text:0000000000004627                 mov     rsi, r11
.text:000000000000462A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000462F                 mov     rdi, r12
.text:0000000000004632                 mov     [rsp+78h+var_48], r11
.text:0000000000004637                 call    quotearg_buffer_restyled
.text:000000000000463C                 add     rsp, 20h
.text:0000000000004640                 mov     r11, [rsp+58h+var_48]
.text:0000000000004645                 cmp     r11, rax
.text:0000000000004648                 ja      short loc_46B1
.text:000000000000464A                 lea     rsi, [rax+1]
.text:000000000000464E                 lea     rax, slot0
.text:0000000000004655                 cmp     r12, rax
.text:0000000000004658                 mov     [rbx], rsi
.text:000000000000465B                 jz      short loc_466F
.text:000000000000465D                 mov     rdi, r12        ; ptr
.text:0000000000004660                 mov     [rsp+58h+var_48], rsi
.text:0000000000004665                 call    _free
.text:000000000000466A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000466F
.text:000000000000466F loc_466F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000466F                 mov     rdi, rsi
.text:0000000000004672                 mov     [rsp+58h+var_48], rsi
.text:0000000000004677                 call    xmalloc
.text:000000000000467C                 sub     rsp, 8
.text:0000000000004680                 mov     [rbx+8], rax
.text:0000000000004684                 mov     r8d, [rbp+0]
.text:0000000000004688                 push    qword ptr [rbp+30h]
.text:000000000000468B                 push    qword ptr [rbp+28h]
.text:000000000000468E                 mov     rcx, r14
.text:0000000000004691                 push    r15
.text:0000000000004693                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004698                 mov     rdi, rax
.text:000000000000469B                 mov     rdx, [rsp+78h+var_50]
.text:00000000000046A0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000046A5                 mov     r12, rax
.text:00000000000046A8                 call    quotearg_buffer_restyled
.text:00000000000046AD                 add     rsp, 20h
.text:00000000000046B1
.text:00000000000046B1 loc_46B1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000046B1                 mov     eax, [rsp+58h+var_40]
.text:00000000000046B5                 mov     [r13+0], eax
.text:00000000000046B9                 add     rsp, 28h
.text:00000000000046BD                 mov     rax, r12
.text:00000000000046C0                 pop     rbx
.text:00000000000046C1                 pop     rbp
.text:00000000000046C2                 pop     r12
.text:00000000000046C4                 pop     r13
.text:00000000000046C6                 pop     r14
.text:00000000000046C8                 pop     r15
.text:00000000000046CA                 retn
.text:00000000000046CA ; ---------------------------------------------------------------------------
.text:00000000000046CB                 align 10h
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000046D0                 xor     edi, edi
.text:00000000000046D2                 call    xrealloc
.text:00000000000046D7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000046DF                 mov     rbx, rax
.text:00000000000046E2                 mov     cs:slotvec, rax
.text:00000000000046E9                 movups  xmmword ptr [rax], xmm0
.text:00000000000046EC                 jmp     loc_45CD
.text:00000000000046F1 ; ---------------------------------------------------------------------------
.text:00000000000046F1
.text:00000000000046F1 loc_46F1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000046F1                 call    _abort
.text:00000000000046F6 ; ---------------------------------------------------------------------------
.text:00000000000046F6
.text:00000000000046F6 loc_46F6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000046F6                 call    xalloc_die
.text:00000000000046F6 ; } // starts at 4550
.text:00000000000046F6 quotearg_n_options endp
.text:00000000000046F6
.text:00000000000046F6 ; ---------------------------------------------------------------------------
.text:00000000000046FB                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: info_from_lumina
.text:0000000000004700
.text:0000000000004700 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004700                 public clone_quoting_options
.text:0000000000004700 clone_quoting_options proc near
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 push    r12
.text:0000000000004702                 push    rbp
.text:0000000000004703                 push    rbx
.text:0000000000004704                 mov     rbx, rdi
.text:0000000000004707                 call    ___errno_location
.text:000000000000470C                 mov     r12d, [rax]
.text:000000000000470F                 mov     rbp, rax
.text:0000000000004712                 lea     rax, default_quoting_options
.text:0000000000004719                 test    rbx, rbx
.text:000000000000471C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004721                 cmovz   rbx, rax
.text:0000000000004725                 mov     rdi, rbx        ; src
.text:0000000000004728                 call    xmemdup
.text:000000000000472D                 mov     [rbp+0], r12d
.text:0000000000004731                 pop     rbx
.text:0000000000004732                 pop     rbp
.text:0000000000004733                 pop     r12
.text:0000000000004735                 retn
.text:0000000000004735 ; } // starts at 4700
.text:0000000000004735 clone_quoting_options endp
.text:0000000000004735
.text:0000000000004735 ; ---------------------------------------------------------------------------
.text:0000000000004736                 align 20h
.text:0000000000004740
.text:0000000000004740 ; =============== S U B R O U T I N E =======================================
.text:0000000000004740
.text:0000000000004740
.text:0000000000004740                 public get_quoting_style
.text:0000000000004740 get_quoting_style proc near
.text:0000000000004740 ; __unwind {
.text:0000000000004740                 lea     rax, default_quoting_options
.text:0000000000004747                 test    rdi, rdi
.text:000000000000474A                 cmovz   rdi, rax
.text:000000000000474E                 mov     eax, [rdi]
.text:0000000000004750                 retn
.text:0000000000004750 ; } // starts at 4740
.text:0000000000004750 get_quoting_style endp
.text:0000000000004750
.text:0000000000004750 ; ---------------------------------------------------------------------------
.text:0000000000004751                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760
.text:0000000000004760                 public set_quoting_style
.text:0000000000004760 set_quoting_style proc near
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 lea     rax, default_quoting_options
.text:0000000000004767                 test    rdi, rdi
.text:000000000000476A                 cmovz   rdi, rax
.text:000000000000476E                 mov     [rdi], esi
.text:0000000000004770                 retn
.text:0000000000004770 ; } // starts at 4760
.text:0000000000004770 set_quoting_style endp
.text:0000000000004770
.text:0000000000004770 ; ---------------------------------------------------------------------------
.text:0000000000004771                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780 ; Attributes: info_from_lumina
.text:0000000000004780
.text:0000000000004780 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004780                 public set_char_quoting
.text:0000000000004780 set_char_quoting proc near
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 lea     rax, default_quoting_options
.text:0000000000004787                 test    rdi, rdi
.text:000000000000478A                 mov     ecx, esi
.text:000000000000478C                 cmovz   rdi, rax
.text:0000000000004790                 mov     eax, esi
.text:0000000000004792                 and     ecx, 1Fh
.text:0000000000004795                 shr     al, 5
.text:0000000000004798                 movzx   eax, al
.text:000000000000479B                 lea     rdi, [rdi+rax*4+8]
.text:00000000000047A0                 mov     esi, [rdi]
.text:00000000000047A2                 mov     eax, esi
.text:00000000000047A4                 shr     eax, cl
.text:00000000000047A6                 xor     edx, eax
.text:00000000000047A8                 and     eax, 1
.text:00000000000047AB                 and     edx, 1
.text:00000000000047AE                 shl     edx, cl
.text:00000000000047B0                 xor     edx, esi
.text:00000000000047B2                 mov     [rdi], edx
.text:00000000000047B4                 retn
.text:00000000000047B4 ; } // starts at 4780
.text:00000000000047B4 set_char_quoting endp
.text:00000000000047B4
.text:00000000000047B4 ; ---------------------------------------------------------------------------
.text:00000000000047B5                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0
.text:00000000000047C0                 public set_quoting_flags
.text:00000000000047C0 set_quoting_flags proc near
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 lea     rax, default_quoting_options
.text:00000000000047C7                 test    rdi, rdi
.text:00000000000047CA                 cmovz   rdi, rax
.text:00000000000047CE                 mov     eax, [rdi+4]
.text:00000000000047D1                 mov     [rdi+4], esi
.text:00000000000047D4                 retn
.text:00000000000047D4 ; } // starts at 47C0
.text:00000000000047D4 set_quoting_flags endp
.text:00000000000047D4
.text:00000000000047D4 ; ---------------------------------------------------------------------------
.text:00000000000047D5                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0 ; Attributes: info_from_lumina
.text:00000000000047E0
.text:00000000000047E0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000047E0                 public set_custom_quoting
.text:00000000000047E0 set_custom_quoting proc near
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 lea     rax, default_quoting_options
.text:00000000000047E7                 test    rdi, rdi
.text:00000000000047EA                 cmovz   rdi, rax
.text:00000000000047EE                 test    rsi, rsi
.text:00000000000047F1                 mov     dword ptr [rdi], 0Ah
.text:00000000000047F7                 jz      short loc_4807
.text:00000000000047F9                 test    rdx, rdx
.text:00000000000047FC                 jz      short loc_4807
.text:00000000000047FE                 mov     [rdi+28h], rsi
.text:0000000000004802                 mov     [rdi+30h], rdx
.text:0000000000004806                 retn
.text:0000000000004807 ; ---------------------------------------------------------------------------
.text:0000000000004807
.text:0000000000004807 loc_4807:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004807                                         ; set_custom_quoting+1C↑j
.text:0000000000004807                 sub     rsp, 8
.text:000000000000480B                 call    _abort
.text:000000000000480B ; } // starts at 47E0
.text:000000000000480B set_custom_quoting endp
.text:000000000000480B
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810 ; Attributes: info_from_lumina
.text:0000000000004810
.text:0000000000004810 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004810                 public quotearg_buffer
.text:0000000000004810 quotearg_buffer proc near
.text:0000000000004810
.text:0000000000004810 var_40          = qword ptr -40h
.text:0000000000004810
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 push    r15
.text:0000000000004812                 push    r14
.text:0000000000004814                 lea     rax, default_quoting_options
.text:000000000000481B                 push    r13
.text:000000000000481D                 push    r12
.text:000000000000481F                 mov     r13, rdi
.text:0000000000004822                 push    rbp
.text:0000000000004823                 push    rbx
.text:0000000000004824                 mov     rbx, r8
.text:0000000000004827                 mov     r14, rsi
.text:000000000000482A                 mov     r15, rdx
.text:000000000000482D                 sub     rsp, 18h
.text:0000000000004831                 test    r8, r8
.text:0000000000004834                 cmovz   rbx, rax
.text:0000000000004838                 mov     [rsp+48h+var_40], rcx
.text:000000000000483D                 call    ___errno_location
.text:0000000000004842                 mov     r12d, [rax]
.text:0000000000004845                 mov     rbp, rax
.text:0000000000004848                 lea     rax, [rbx+8]
.text:000000000000484C                 sub     rsp, 8
.text:0000000000004850                 mov     r9d, [rbx+4]
.text:0000000000004854                 push    qword ptr [rbx+30h]
.text:0000000000004857                 mov     r8d, [rbx]
.text:000000000000485A                 push    qword ptr [rbx+28h]
.text:000000000000485D                 mov     rdx, r15
.text:0000000000004860                 push    rax
.text:0000000000004861                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004866                 mov     rsi, r14
.text:0000000000004869                 mov     rdi, r13
.text:000000000000486C                 call    quotearg_buffer_restyled
.text:0000000000004871                 mov     [rbp+0], r12d
.text:0000000000004875                 add     rsp, 38h
.text:0000000000004879                 pop     rbx
.text:000000000000487A                 pop     rbp
.text:000000000000487B                 pop     r12
.text:000000000000487D                 pop     r13
.text:000000000000487F                 pop     r14
.text:0000000000004881                 pop     r15
.text:0000000000004883                 retn
.text:0000000000004883 ; } // starts at 4810
.text:0000000000004883 quotearg_buffer endp
.text:0000000000004883
.text:0000000000004883 ; ---------------------------------------------------------------------------
.text:0000000000004884                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890 ; Attributes: info_from_lumina
.text:0000000000004890
.text:0000000000004890 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004890                 public quotearg_alloc_mem
.text:0000000000004890 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004890
.text:0000000000004890 var_5C          = dword ptr -5Ch
.text:0000000000004890 var_58          = qword ptr -58h
.text:0000000000004890 var_50          = qword ptr -50h
.text:0000000000004890 var_48          = qword ptr -48h
.text:0000000000004890 var_40          = qword ptr -40h
.text:0000000000004890
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 push    r15
.text:0000000000004892                 push    r14
.text:0000000000004894                 lea     rax, default_quoting_options
.text:000000000000489B                 push    r13
.text:000000000000489D                 push    r12
.text:000000000000489F                 mov     r12, rdx
.text:00000000000048A2                 push    rbp
.text:00000000000048A3                 push    rbx
.text:00000000000048A4                 mov     rbx, rcx
.text:00000000000048A7                 mov     r14, rdi
.text:00000000000048AA                 mov     r15, rsi
.text:00000000000048AD                 sub     rsp, 38h
.text:00000000000048B1                 test    rcx, rcx
.text:00000000000048B4                 cmovz   rbx, rax
.text:00000000000048B8                 xor     ebp, ebp
.text:00000000000048BA                 call    ___errno_location
.text:00000000000048BF                 test    r12, r12
.text:00000000000048C2                 mov     r13, rax
.text:00000000000048C5                 mov     eax, [rax]
.text:00000000000048C7                 setz    bpl
.text:00000000000048CB                 or      ebp, [rbx+4]
.text:00000000000048CE                 lea     r10, [rbx+8]
.text:00000000000048D2                 sub     rsp, 8
.text:00000000000048D6                 mov     r8d, [rbx]
.text:00000000000048D9                 mov     rcx, r15
.text:00000000000048DC                 mov     [rsp+70h+var_5C], eax
.text:00000000000048E0                 push    qword ptr [rbx+30h]
.text:00000000000048E3                 mov     rdx, r14
.text:00000000000048E6                 push    qword ptr [rbx+28h]
.text:00000000000048E9                 push    r10
.text:00000000000048EB                 xor     esi, esi
.text:00000000000048ED                 mov     r9d, ebp
.text:00000000000048F0                 xor     edi, edi
.text:00000000000048F2                 mov     [rsp+88h+var_48], r10
.text:00000000000048F7                 call    quotearg_buffer_restyled
.text:00000000000048FC                 lea     rsi, [rax+1]
.text:0000000000004900                 mov     [rsp+88h+var_40], rax
.text:0000000000004905                 add     rsp, 20h
.text:0000000000004909                 mov     rdi, rsi
.text:000000000000490C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004911                 call    xmalloc
.text:0000000000004916                 mov     [rsp+68h+var_58], rax
.text:000000000000491B                 sub     rsp, 8
.text:000000000000491F                 push    qword ptr [rbx+30h]
.text:0000000000004922                 push    qword ptr [rbx+28h]
.text:0000000000004925                 mov     r10, [rsp+80h+var_48]
.text:000000000000492A                 mov     r9d, ebp
.text:000000000000492D                 mov     r8d, [rbx]
.text:0000000000004930                 mov     rcx, r15
.text:0000000000004933                 mov     rdx, r14
.text:0000000000004936                 mov     rdi, rax
.text:0000000000004939                 push    r10
.text:000000000000493B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004940                 call    quotearg_buffer_restyled
.text:0000000000004945                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004949                 add     rsp, 20h
.text:000000000000494D                 test    r12, r12
.text:0000000000004950                 mov     [r13+0], eax
.text:0000000000004954                 jz      short loc_495F
.text:0000000000004956                 mov     r11, [rsp+68h+var_40]
.text:000000000000495B                 mov     [r12], r11
.text:000000000000495F
.text:000000000000495F loc_495F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000495F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004964                 add     rsp, 38h
.text:0000000000004968                 pop     rbx
.text:0000000000004969                 pop     rbp
.text:000000000000496A                 pop     r12
.text:000000000000496C                 pop     r13
.text:000000000000496E                 pop     r14
.text:0000000000004970                 pop     r15
.text:0000000000004972                 retn
.text:0000000000004972 ; } // starts at 4890
.text:0000000000004972 quotearg_alloc_mem endp
.text:0000000000004972
.text:0000000000004972 ; ---------------------------------------------------------------------------
.text:0000000000004973                 align 20h
.text:0000000000004980
.text:0000000000004980 ; =============== S U B R O U T I N E =======================================
.text:0000000000004980
.text:0000000000004980
.text:0000000000004980                 public quotearg_alloc
.text:0000000000004980 quotearg_alloc  proc near
.text:0000000000004980 ; __unwind {
.text:0000000000004980                 mov     rcx, rdx
.text:0000000000004983                 xor     edx, edx
.text:0000000000004985                 jmp     quotearg_alloc_mem
.text:0000000000004985 ; } // starts at 4980
.text:0000000000004985 quotearg_alloc  endp
.text:0000000000004985
.text:0000000000004985 ; ---------------------------------------------------------------------------
.text:000000000000498A                 align 10h
.text:0000000000004990
.text:0000000000004990 ; =============== S U B R O U T I N E =======================================
.text:0000000000004990
.text:0000000000004990 ; Attributes: info_from_lumina
.text:0000000000004990
.text:0000000000004990 ; void __cdecl quotearg_free()
.text:0000000000004990                 public quotearg_free
.text:0000000000004990 quotearg_free   proc near
.text:0000000000004990 ; __unwind {
.text:0000000000004990                 mov     eax, cs:nslots
.text:0000000000004996                 push    r12
.text:0000000000004998                 mov     r12, cs:slotvec
.text:000000000000499F                 push    rbp
.text:00000000000049A0                 push    rbx
.text:00000000000049A1                 cmp     eax, 1
.text:00000000000049A4                 jle     short loc_49D1
.text:00000000000049A6                 sub     eax, 2
.text:00000000000049A9                 lea     rbx, [r12+18h]
.text:00000000000049AE                 shl     rax, 4
.text:00000000000049B2                 lea     rbp, [r12+rax+28h]
.text:00000000000049B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000049C0
.text:00000000000049C0 loc_49C0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000049C0                 mov     rdi, [rbx]      ; ptr
.text:00000000000049C3                 add     rbx, 10h
.text:00000000000049C7                 call    _free
.text:00000000000049CC                 cmp     rbx, rbp
.text:00000000000049CF                 jnz     short loc_49C0
.text:00000000000049D1
.text:00000000000049D1 loc_49D1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000049D1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000049D6                 lea     rbx, slot0
.text:00000000000049DD                 cmp     rdi, rbx
.text:00000000000049E0                 jz      short loc_49F9
.text:00000000000049E2                 call    _free
.text:00000000000049E7                 mov     cs:slotvec0, 100h
.text:00000000000049F2                 mov     cs:off_209098, rbx
.text:00000000000049F9
.text:00000000000049F9 loc_49F9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000049F9                 lea     rbx, slotvec0
.text:0000000000004A00                 cmp     r12, rbx
.text:0000000000004A03                 jz      short loc_4A14
.text:0000000000004A05                 mov     rdi, r12        ; ptr
.text:0000000000004A08                 call    _free
.text:0000000000004A0D                 mov     cs:slotvec, rbx
.text:0000000000004A14
.text:0000000000004A14 loc_4A14:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004A14                 pop     rbx
.text:0000000000004A15                 mov     cs:nslots, 1
.text:0000000000004A1F                 pop     rbp
.text:0000000000004A20                 pop     r12
.text:0000000000004A22                 retn
.text:0000000000004A22 ; } // starts at 4990
.text:0000000000004A22 quotearg_free   endp
.text:0000000000004A22
.text:0000000000004A22 ; ---------------------------------------------------------------------------
.text:0000000000004A23                 align 10h
.text:0000000000004A30
.text:0000000000004A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A30
.text:0000000000004A30
.text:0000000000004A30                 public quotearg_n
.text:0000000000004A30 quotearg_n      proc near
.text:0000000000004A30 ; __unwind {
.text:0000000000004A30                 lea     rcx, default_quoting_options
.text:0000000000004A37                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A3E                 jmp     quotearg_n_options
.text:0000000000004A3E ; } // starts at 4A30
.text:0000000000004A3E quotearg_n      endp
.text:0000000000004A3E
.text:0000000000004A3E ; ---------------------------------------------------------------------------
.text:0000000000004A43                 align 10h
.text:0000000000004A50
.text:0000000000004A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A50
.text:0000000000004A50
.text:0000000000004A50                 public quotearg_n_mem
.text:0000000000004A50 quotearg_n_mem  proc near
.text:0000000000004A50 ; __unwind {
.text:0000000000004A50                 lea     rcx, default_quoting_options
.text:0000000000004A57                 jmp     quotearg_n_options
.text:0000000000004A57 ; } // starts at 4A50
.text:0000000000004A57 quotearg_n_mem  endp
.text:0000000000004A57
.text:0000000000004A57 ; ---------------------------------------------------------------------------
.text:0000000000004A5C                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60                 public quotearg
.text:0000000000004A60 quotearg        proc near
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 lea     rcx, default_quoting_options
.text:0000000000004A67                 mov     rsi, rdi
.text:0000000000004A6A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A71                 xor     edi, edi
.text:0000000000004A73                 jmp     quotearg_n_options
.text:0000000000004A73 ; } // starts at 4A60
.text:0000000000004A73 quotearg        endp
.text:0000000000004A73
.text:0000000000004A73 ; ---------------------------------------------------------------------------
.text:0000000000004A78                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80
.text:0000000000004A80                 public quotearg_mem
.text:0000000000004A80 quotearg_mem    proc near
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 lea     rcx, default_quoting_options
.text:0000000000004A87                 mov     rdx, rsi
.text:0000000000004A8A                 mov     rsi, rdi
.text:0000000000004A8D                 xor     edi, edi
.text:0000000000004A8F                 jmp     quotearg_n_options
.text:0000000000004A8F ; } // starts at 4A80
.text:0000000000004A8F quotearg_mem    endp
.text:0000000000004A8F
.text:0000000000004A8F ; ---------------------------------------------------------------------------
.text:0000000000004A94                 align 20h
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0 ; Attributes: info_from_lumina
.text:0000000000004AA0
.text:0000000000004AA0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004AA0                 public quotearg_n_style
.text:0000000000004AA0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004AA0
.text:0000000000004AA0 var_48          = dword ptr -48h
.text:0000000000004AA0 var_44          = qword ptr -44h
.text:0000000000004AA0 var_3C          = qword ptr -3Ch
.text:0000000000004AA0 var_34          = qword ptr -34h
.text:0000000000004AA0 var_2C          = qword ptr -2Ch
.text:0000000000004AA0 var_24          = qword ptr -24h
.text:0000000000004AA0 var_1C          = qword ptr -1Ch
.text:0000000000004AA0 var_14          = dword ptr -14h
.text:0000000000004AA0 var_10          = qword ptr -10h
.text:0000000000004AA0
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 sub     rsp, 48h
.text:0000000000004AA4                 mov     rax, rdx
.text:0000000000004AA7                 mov     rdx, fs:28h
.text:0000000000004AB0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004AB5                 xor     edx, edx
.text:0000000000004AB7                 cmp     esi, 0Ah
.text:0000000000004ABA                 jz      short loc_4B24
.text:0000000000004ABC                 mov     [rsp+48h+var_48], esi
.text:0000000000004ABF                 mov     rcx, rsp
.text:0000000000004AC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004AC9                 mov     rsi, rax
.text:0000000000004ACC                 mov     [rsp+48h+var_44], 0
.text:0000000000004AD5                 mov     [rsp+48h+var_3C], 0
.text:0000000000004ADE                 mov     [rsp+48h+var_34], 0
.text:0000000000004AE7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004AF0                 mov     [rsp+48h+var_24], 0
.text:0000000000004AF9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004B02                 mov     [rsp+48h+var_14], 0
.text:0000000000004B0A                 call    quotearg_n_options
.text:0000000000004B0F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004B14                 xor     rcx, fs:28h
.text:0000000000004B1D                 jnz     short loc_4B29
.text:0000000000004B1F                 add     rsp, 48h
.text:0000000000004B23                 retn
.text:0000000000004B24 ; ---------------------------------------------------------------------------
.text:0000000000004B24
.text:0000000000004B24 loc_4B24:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004B24                 call    _abort
.text:0000000000004B29 ; ---------------------------------------------------------------------------
.text:0000000000004B29
.text:0000000000004B29 loc_4B29:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004B29                 call    ___stack_chk_fail
.text:0000000000004B29 ; } // starts at 4AA0
.text:0000000000004B29 quotearg_n_style endp
.text:0000000000004B29
.text:0000000000004B29 ; ---------------------------------------------------------------------------
.text:0000000000004B2E                 align 10h
.text:0000000000004B30
.text:0000000000004B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B30
.text:0000000000004B30 ; Attributes: info_from_lumina
.text:0000000000004B30
.text:0000000000004B30 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004B30                 public quotearg_n_style_mem
.text:0000000000004B30 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004B30
.text:0000000000004B30 var_48          = dword ptr -48h
.text:0000000000004B30 var_44          = qword ptr -44h
.text:0000000000004B30 var_3C          = qword ptr -3Ch
.text:0000000000004B30 var_34          = qword ptr -34h
.text:0000000000004B30 var_2C          = qword ptr -2Ch
.text:0000000000004B30 var_24          = qword ptr -24h
.text:0000000000004B30 var_1C          = qword ptr -1Ch
.text:0000000000004B30 var_14          = dword ptr -14h
.text:0000000000004B30 var_10          = qword ptr -10h
.text:0000000000004B30
.text:0000000000004B30 ; __unwind {
.text:0000000000004B30                 sub     rsp, 48h
.text:0000000000004B34                 mov     rax, rdx
.text:0000000000004B37                 mov     rdx, rcx
.text:0000000000004B3A                 mov     rcx, fs:28h
.text:0000000000004B43                 mov     [rsp+48h+var_10], rcx
.text:0000000000004B48                 xor     ecx, ecx
.text:0000000000004B4A                 cmp     esi, 0Ah
.text:0000000000004B4D                 jz      short loc_4BB0
.text:0000000000004B4F                 mov     [rsp+48h+var_48], esi
.text:0000000000004B52                 mov     rcx, rsp
.text:0000000000004B55                 mov     rsi, rax
.text:0000000000004B58                 mov     [rsp+48h+var_44], 0
.text:0000000000004B61                 mov     [rsp+48h+var_3C], 0
.text:0000000000004B6A                 mov     [rsp+48h+var_34], 0
.text:0000000000004B73                 mov     [rsp+48h+var_2C], 0
.text:0000000000004B7C                 mov     [rsp+48h+var_24], 0
.text:0000000000004B85                 mov     [rsp+48h+var_1C], 0
.text:0000000000004B8E                 mov     [rsp+48h+var_14], 0
.text:0000000000004B96                 call    quotearg_n_options
.text:0000000000004B9B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004BA0                 xor     rdx, fs:28h
.text:0000000000004BA9                 jnz     short loc_4BB5
.text:0000000000004BAB                 add     rsp, 48h
.text:0000000000004BAF                 retn
.text:0000000000004BB0 ; ---------------------------------------------------------------------------
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004BB0                 call    _abort
.text:0000000000004BB5 ; ---------------------------------------------------------------------------
.text:0000000000004BB5
.text:0000000000004BB5 loc_4BB5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004BB5                 call    ___stack_chk_fail
.text:0000000000004BB5 ; } // starts at 4B30
.text:0000000000004BB5 quotearg_n_style_mem endp
.text:0000000000004BB5
.text:0000000000004BB5 ; ---------------------------------------------------------------------------
.text:0000000000004BBA                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BC0
.text:0000000000004BC0
.text:0000000000004BC0                 public quotearg_style
.text:0000000000004BC0 quotearg_style  proc near
.text:0000000000004BC0 ; __unwind {
.text:0000000000004BC0                 mov     rdx, rsi
.text:0000000000004BC3                 mov     esi, edi
.text:0000000000004BC5                 xor     edi, edi
.text:0000000000004BC7                 jmp     quotearg_n_style
.text:0000000000004BC7 ; } // starts at 4BC0
.text:0000000000004BC7 quotearg_style  endp
.text:0000000000004BC7
.text:0000000000004BC7 ; ---------------------------------------------------------------------------
.text:0000000000004BCC                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0
.text:0000000000004BD0                 public quotearg_style_mem
.text:0000000000004BD0 quotearg_style_mem proc near
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 mov     rcx, rdx
.text:0000000000004BD3                 mov     rdx, rsi
.text:0000000000004BD6                 mov     esi, edi
.text:0000000000004BD8                 xor     edi, edi
.text:0000000000004BDA                 jmp     quotearg_n_style_mem
.text:0000000000004BDA ; } // starts at 4BD0
.text:0000000000004BDA quotearg_style_mem endp
.text:0000000000004BDA
.text:0000000000004BDA ; ---------------------------------------------------------------------------
.text:0000000000004BDF                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BE0
.text:0000000000004BE0 ; Attributes: info_from_lumina
.text:0000000000004BE0
.text:0000000000004BE0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004BE0                 public quotearg_char_mem
.text:0000000000004BE0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004BE0                                         ; quotearg_colon+C↓j ...
.text:0000000000004BE0
.text:0000000000004BE0 var_48          = xmmword ptr -48h
.text:0000000000004BE0 var_38          = xmmword ptr -38h
.text:0000000000004BE0 var_28          = xmmword ptr -28h
.text:0000000000004BE0 var_18          = qword ptr -18h
.text:0000000000004BE0 var_10          = qword ptr -10h
.text:0000000000004BE0
.text:0000000000004BE0 ; __unwind {
.text:0000000000004BE0                 sub     rsp, 48h
.text:0000000000004BE4                 mov     ecx, edx
.text:0000000000004BE6                 mov     rax, fs:28h
.text:0000000000004BEF                 mov     [rsp+48h+var_10], rax
.text:0000000000004BF4                 xor     eax, eax
.text:0000000000004BF6                 mov     rax, cs:qword_209430
.text:0000000000004BFD                 mov     r8, rsp
.text:0000000000004C00                 and     ecx, 1Fh
.text:0000000000004C03                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004C0B                 mov     [rsp+48h+var_18], rax
.text:0000000000004C10                 mov     eax, edx
.text:0000000000004C12                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004C16                 shr     al, 5
.text:0000000000004C19                 movzx   eax, al
.text:0000000000004C1C                 lea     r9, [r8+rax*4+8]
.text:0000000000004C21                 movdqa  xmm0, cs:xmmword_209410
.text:0000000000004C29                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004C2E                 movdqa  xmm0, cs:xmmword_209420
.text:0000000000004C36                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004C3B                 mov     edx, [r9]
.text:0000000000004C3E                 mov     eax, edx
.text:0000000000004C40                 shr     eax, cl
.text:0000000000004C42                 not     eax
.text:0000000000004C44                 and     eax, 1
.text:0000000000004C47                 shl     eax, cl
.text:0000000000004C49                 mov     rcx, r8
.text:0000000000004C4C                 xor     eax, edx
.text:0000000000004C4E                 mov     rdx, rsi
.text:0000000000004C51                 mov     rsi, rdi
.text:0000000000004C54                 mov     [r9], eax
.text:0000000000004C57                 xor     edi, edi
.text:0000000000004C59                 call    quotearg_n_options
.text:0000000000004C5E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004C63                 xor     rsi, fs:28h
.text:0000000000004C6C                 jnz     short loc_4C73
.text:0000000000004C6E                 add     rsp, 48h
.text:0000000000004C72                 retn
.text:0000000000004C73 ; ---------------------------------------------------------------------------
.text:0000000000004C73
.text:0000000000004C73 loc_4C73:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004C73                 call    ___stack_chk_fail
.text:0000000000004C73 ; } // starts at 4BE0
.text:0000000000004C73 quotearg_char_mem endp
.text:0000000000004C73
.text:0000000000004C73 ; ---------------------------------------------------------------------------
.text:0000000000004C78                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80
.text:0000000000004C80                 public quotearg_char
.text:0000000000004C80 quotearg_char   proc near
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 movsx   edx, sil
.text:0000000000004C84                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C8B                 jmp     quotearg_char_mem
.text:0000000000004C8B ; } // starts at 4C80
.text:0000000000004C8B quotearg_char   endp
.text:0000000000004C8B
.text:0000000000004C90
.text:0000000000004C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C90
.text:0000000000004C90
.text:0000000000004C90                 public quotearg_colon
.text:0000000000004C90 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004C90 ; __unwind {
.text:0000000000004C90                 mov     edx, 3Ah ; ':'
.text:0000000000004C95                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C9C                 jmp     quotearg_char_mem
.text:0000000000004C9C ; } // starts at 4C90
.text:0000000000004C9C quotearg_colon  endp
.text:0000000000004C9C
.text:0000000000004C9C ; ---------------------------------------------------------------------------
.text:0000000000004CA1                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0                 public quotearg_colon_mem
.text:0000000000004CB0 quotearg_colon_mem proc near
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 mov     edx, 3Ah ; ':'
.text:0000000000004CB5                 jmp     quotearg_char_mem
.text:0000000000004CB5 ; } // starts at 4CB0
.text:0000000000004CB5 quotearg_colon_mem endp
.text:0000000000004CB5
.text:0000000000004CB5 ; ---------------------------------------------------------------------------
.text:0000000000004CBA                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CC0
.text:0000000000004CC0 ; Attributes: info_from_lumina
.text:0000000000004CC0
.text:0000000000004CC0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004CC0                 public quotearg_n_style_colon
.text:0000000000004CC0 quotearg_n_style_colon proc near
.text:0000000000004CC0
.text:0000000000004CC0 var_48          = dword ptr -48h
.text:0000000000004CC0 var_44          = qword ptr -44h
.text:0000000000004CC0 var_3C          = qword ptr -3Ch
.text:0000000000004CC0 var_34          = qword ptr -34h
.text:0000000000004CC0 var_2C          = qword ptr -2Ch
.text:0000000000004CC0 var_24          = qword ptr -24h
.text:0000000000004CC0 var_1C          = qword ptr -1Ch
.text:0000000000004CC0 var_14          = dword ptr -14h
.text:0000000000004CC0 var_10          = qword ptr -10h
.text:0000000000004CC0
.text:0000000000004CC0 ; __unwind {
.text:0000000000004CC0                 sub     rsp, 48h
.text:0000000000004CC4                 mov     rax, rdx
.text:0000000000004CC7                 mov     rdx, fs:28h
.text:0000000000004CD0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004CD5                 xor     edx, edx
.text:0000000000004CD7                 cmp     esi, 0Ah
.text:0000000000004CDA                 jz      short loc_4D44
.text:0000000000004CDC                 mov     [rsp+48h+var_48], esi
.text:0000000000004CDF                 mov     rcx, rsp
.text:0000000000004CE2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CE9                 mov     rsi, rax
.text:0000000000004CEC                 mov     [rsp+48h+var_44], 0
.text:0000000000004CF5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004CFE                 mov     [rsp+48h+var_34], 0
.text:0000000000004D07                 mov     [rsp+48h+var_2C], 0
.text:0000000000004D10                 mov     [rsp+48h+var_24], 0
.text:0000000000004D19                 mov     [rsp+48h+var_1C], 0
.text:0000000000004D22                 mov     [rsp+48h+var_14], 0
.text:0000000000004D2A                 call    quotearg_n_options
.text:0000000000004D2F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004D34                 xor     rcx, fs:28h
.text:0000000000004D3D                 jnz     short loc_4D49
.text:0000000000004D3F                 add     rsp, 48h
.text:0000000000004D43                 retn
.text:0000000000004D44 ; ---------------------------------------------------------------------------
.text:0000000000004D44
.text:0000000000004D44 loc_4D44:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004D44                 call    _abort
.text:0000000000004D49 ; ---------------------------------------------------------------------------
.text:0000000000004D49
.text:0000000000004D49 loc_4D49:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004D49                 call    ___stack_chk_fail
.text:0000000000004D49 ; } // starts at 4CC0
.text:0000000000004D49 quotearg_n_style_colon endp
.text:0000000000004D49
.text:0000000000004D49 ; ---------------------------------------------------------------------------
.text:0000000000004D4E                 align 10h
.text:0000000000004D50
.text:0000000000004D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D50
.text:0000000000004D50 ; Attributes: info_from_lumina
.text:0000000000004D50
.text:0000000000004D50 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004D50                 public quotearg_n_custom_mem
.text:0000000000004D50 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004D50                                         ; quotearg_custom+12↓j ...
.text:0000000000004D50
.text:0000000000004D50 var_48          = xmmword ptr -48h
.text:0000000000004D50 var_38          = xmmword ptr -38h
.text:0000000000004D50 var_28          = xmmword ptr -28h
.text:0000000000004D50 var_18          = qword ptr -18h
.text:0000000000004D50 var_10          = qword ptr -10h
.text:0000000000004D50
.text:0000000000004D50 ; __unwind {
.text:0000000000004D50                 sub     rsp, 48h
.text:0000000000004D54                 mov     r9, rcx
.text:0000000000004D57                 mov     rcx, cs:qword_209430
.text:0000000000004D5E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004D66                 mov     rax, fs:28h
.text:0000000000004D6F                 mov     [rsp+48h+var_10], rax
.text:0000000000004D74                 xor     eax, eax
.text:0000000000004D76                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004D7A                 test    rsi, rsi
.text:0000000000004D7D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004D82                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004D89                 movdqa  xmm0, cs:xmmword_209410
.text:0000000000004D91                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004D96                 movdqa  xmm0, cs:xmmword_209420
.text:0000000000004D9E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004DA3                 jz      short loc_4DD7
.text:0000000000004DA5                 test    rdx, rdx
.text:0000000000004DA8                 jz      short loc_4DD7
.text:0000000000004DAA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004DAF                 mov     [rsp+48h+var_18], rdx
.text:0000000000004DB4                 mov     rcx, rsp
.text:0000000000004DB7                 mov     rdx, r8
.text:0000000000004DBA                 mov     rsi, r9
.text:0000000000004DBD                 call    quotearg_n_options
.text:0000000000004DC2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004DC7                 xor     rdi, fs:28h
.text:0000000000004DD0                 jnz     short loc_4DDC
.text:0000000000004DD2                 add     rsp, 48h
.text:0000000000004DD6                 retn
.text:0000000000004DD7 ; ---------------------------------------------------------------------------
.text:0000000000004DD7
.text:0000000000004DD7 loc_4DD7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004DD7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004DD7                 call    _abort
.text:0000000000004DDC ; ---------------------------------------------------------------------------
.text:0000000000004DDC
.text:0000000000004DDC loc_4DDC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004DDC                 call    ___stack_chk_fail
.text:0000000000004DDC ; } // starts at 4D50
.text:0000000000004DDC quotearg_n_custom_mem endp
.text:0000000000004DDC
.text:0000000000004DDC ; ---------------------------------------------------------------------------
.text:0000000000004DE1                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DF0
.text:0000000000004DF0
.text:0000000000004DF0                 public quotearg_n_custom
.text:0000000000004DF0 quotearg_n_custom proc near
.text:0000000000004DF0 ; __unwind {
.text:0000000000004DF0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DF7                 jmp     quotearg_n_custom_mem
.text:0000000000004DF7 ; } // starts at 4DF0
.text:0000000000004DF7 quotearg_n_custom endp
.text:0000000000004DF7
.text:0000000000004DF7 ; ---------------------------------------------------------------------------
.text:0000000000004DFC                 align 20h
.text:0000000000004E00
.text:0000000000004E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E00
.text:0000000000004E00
.text:0000000000004E00                 public quotearg_custom
.text:0000000000004E00 quotearg_custom proc near
.text:0000000000004E00 ; __unwind {
.text:0000000000004E00                 mov     rcx, rdx
.text:0000000000004E03                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E0A                 mov     rdx, rsi
.text:0000000000004E0D                 mov     rsi, rdi
.text:0000000000004E10                 xor     edi, edi
.text:0000000000004E12                 jmp     quotearg_n_custom_mem
.text:0000000000004E12 ; } // starts at 4E00
.text:0000000000004E12 quotearg_custom endp
.text:0000000000004E12
.text:0000000000004E12 ; ---------------------------------------------------------------------------
.text:0000000000004E17                 align 20h
.text:0000000000004E20
.text:0000000000004E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E20
.text:0000000000004E20
.text:0000000000004E20                 public quotearg_custom_mem
.text:0000000000004E20 quotearg_custom_mem proc near
.text:0000000000004E20 ; __unwind {
.text:0000000000004E20                 mov     r8, rcx
.text:0000000000004E23                 mov     rcx, rdx
.text:0000000000004E26                 mov     rdx, rsi
.text:0000000000004E29                 mov     rsi, rdi
.text:0000000000004E2C                 xor     edi, edi
.text:0000000000004E2E                 jmp     quotearg_n_custom_mem
.text:0000000000004E2E ; } // starts at 4E20
.text:0000000000004E2E quotearg_custom_mem endp
.text:0000000000004E2E
.text:0000000000004E2E ; ---------------------------------------------------------------------------
.text:0000000000004E33                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40
.text:0000000000004E40                 public quote_n_mem
.text:0000000000004E40 quote_n_mem     proc near
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 lea     rcx, quote_quoting_options
.text:0000000000004E47                 jmp     quotearg_n_options
.text:0000000000004E47 ; } // starts at 4E40
.text:0000000000004E47 quote_n_mem     endp
.text:0000000000004E47
.text:0000000000004E47 ; ---------------------------------------------------------------------------
.text:0000000000004E4C                 align 10h
.text:0000000000004E50
.text:0000000000004E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E50
.text:0000000000004E50
.text:0000000000004E50                 public quote_mem
.text:0000000000004E50 quote_mem       proc near
.text:0000000000004E50 ; __unwind {
.text:0000000000004E50                 lea     rcx, quote_quoting_options
.text:0000000000004E57                 mov     rdx, rsi
.text:0000000000004E5A                 mov     rsi, rdi
.text:0000000000004E5D                 xor     edi, edi
.text:0000000000004E5F                 jmp     quotearg_n_options
.text:0000000000004E5F ; } // starts at 4E50
.text:0000000000004E5F quote_mem       endp
.text:0000000000004E5F
.text:0000000000004E5F ; ---------------------------------------------------------------------------
.text:0000000000004E64                 align 10h
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70
.text:0000000000004E70                 public quote_n
.text:0000000000004E70 quote_n         proc near
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 lea     rcx, quote_quoting_options
.text:0000000000004E77                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E7E                 jmp     quotearg_n_options
.text:0000000000004E7E ; } // starts at 4E70
.text:0000000000004E7E quote_n         endp
.text:0000000000004E7E
.text:0000000000004E7E ; ---------------------------------------------------------------------------
.text:0000000000004E83                 align 10h
.text:0000000000004E90
.text:0000000000004E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E90
.text:0000000000004E90
.text:0000000000004E90                 public quote
.text:0000000000004E90 quote           proc near               ; CODE XREF: main+326↑p
.text:0000000000004E90                                         ; cleanup+EE↑p ...
.text:0000000000004E90 ; __unwind {
.text:0000000000004E90                 lea     rcx, quote_quoting_options
.text:0000000000004E97                 mov     rsi, rdi
.text:0000000000004E9A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EA1                 xor     edi, edi
.text:0000000000004EA3                 jmp     quotearg_n_options
.text:0000000000004EA3 ; } // starts at 4E90
.text:0000000000004EA3 quote           endp
.text:0000000000004EA3
.text:0000000000004EA3 ; ---------------------------------------------------------------------------
.text:0000000000004EA8                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EB0
.text:0000000000004EB0
.text:0000000000004EB0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004EB0                 public version_etc_arn
.text:0000000000004EB0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_52EB↓j
.text:0000000000004EB0                                         ; version_etc_va:loc_533B↓p ...
.text:0000000000004EB0
.text:0000000000004EB0 var_58          = qword ptr -58h
.text:0000000000004EB0 var_50          = qword ptr -50h
.text:0000000000004EB0 var_48          = qword ptr -48h
.text:0000000000004EB0 var_40          = qword ptr -40h
.text:0000000000004EB0
.text:0000000000004EB0 ; __unwind {
.text:0000000000004EB0                 push    r15
.text:0000000000004EB2                 push    r14
.text:0000000000004EB4                 push    r13
.text:0000000000004EB6                 push    r12
.text:0000000000004EB8                 mov     r12, r9
.text:0000000000004EBB                 push    rbp
.text:0000000000004EBC                 push    rbx
.text:0000000000004EBD                 mov     rbp, rdi
.text:0000000000004EC0                 mov     rbx, r8
.text:0000000000004EC3                 sub     rsp, 28h
.text:0000000000004EC7                 test    rsi, rsi
.text:0000000000004ECA                 jz      loc_4FE8
.text:0000000000004ED0                 mov     r8, rdx
.text:0000000000004ED3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004EDA                 mov     r9, rcx
.text:0000000000004EDD                 xor     eax, eax
.text:0000000000004EDF                 mov     rcx, rsi
.text:0000000000004EE2                 mov     esi, 1
.text:0000000000004EE7                 call    ___fprintf_chk
.text:0000000000004EEC
.text:0000000000004EEC loc_4EEC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004EEC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004EF3                 xor     edi, edi        ; domainname
.text:0000000000004EF5                 mov     edx, 5          ; category
.text:0000000000004EFA                 call    _dcgettext
.text:0000000000004EFF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004F06                 mov     rcx, rax
.text:0000000000004F09                 mov     r8d, 7E3h
.text:0000000000004F0F                 mov     esi, 1
.text:0000000000004F14                 mov     rdi, rbp
.text:0000000000004F17                 xor     eax, eax
.text:0000000000004F19                 call    ___fprintf_chk
.text:0000000000004F1E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004F25                 xor     edi, edi        ; domainname
.text:0000000000004F27                 mov     edx, 5          ; category
.text:0000000000004F2C                 call    _dcgettext
.text:0000000000004F31                 mov     rsi, rbp        ; stream
.text:0000000000004F34                 mov     rdi, rax        ; s
.text:0000000000004F37                 call    _fputs_unlocked
.text:0000000000004F3C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004F40                 ja      def_4F54        ; jumptable 0000000000004F54 default case
.text:0000000000004F46                 lea     rdx, jpt_4F54
.text:0000000000004F4D                 movsxd  rax, ds:(jpt_4F54 - 7108h)[rdx+r12*4]
.text:0000000000004F51                 add     rax, rdx
.text:0000000000004F54                 jmp     rax             ; switch jump
.text:0000000000004F54 ; ---------------------------------------------------------------------------
.text:0000000000004F56                 align 20h
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F60                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:0000000000004F60                 mov     r9, [rbx+38h]   ; jumptable 0000000000004F54 case 8
.text:0000000000004F64                 mov     rax, [rbx+10h]
.text:0000000000004F68                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004F6F                 mov     r8, [rbx+8]
.text:0000000000004F73                 mov     edx, 5          ; category
.text:0000000000004F78                 xor     edi, edi        ; domainname
.text:0000000000004F7A                 mov     r13, [rbx+30h]
.text:0000000000004F7E                 mov     r12, [rbx+28h]
.text:0000000000004F82                 mov     [rsp+58h+var_48], r9
.text:0000000000004F87                 mov     r15, [rbx+20h]
.text:0000000000004F8B                 mov     r14, [rbx+18h]
.text:0000000000004F8F                 mov     [rsp+58h+var_58], rax
.text:0000000000004F93                 mov     [rsp+58h+var_50], r8
.text:0000000000004F98                 mov     rbx, [rbx]
.text:0000000000004F9B                 call    _dcgettext
.text:0000000000004FA0                 sub     rsp, 8
.text:0000000000004FA4
.text:0000000000004FA4 loc_4FA4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004FA4                 mov     r9, [rsp+60h+var_48]
.text:0000000000004FA9                 mov     rdx, rax
.text:0000000000004FAC                 mov     rcx, rbx
.text:0000000000004FAF                 mov     esi, 1
.text:0000000000004FB4                 mov     rdi, rbp
.text:0000000000004FB7                 xor     eax, eax
.text:0000000000004FB9                 push    r9
.text:0000000000004FBB                 push    r13
.text:0000000000004FBD                 push    r12
.text:0000000000004FBF                 push    r15
.text:0000000000004FC1                 push    r14
.text:0000000000004FC3                 mov     r9, [rsp+88h+var_58]
.text:0000000000004FC8                 mov     r8, [rsp+88h+var_50]
.text:0000000000004FCD                 call    ___fprintf_chk
.text:0000000000004FD2                 add     rsp, 30h
.text:0000000000004FD6
.text:0000000000004FD6 loc_4FD6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004FD6                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:0000000000004FD6                 add     rsp, 28h        ; jumptable 0000000000004F54 case 0
.text:0000000000004FDA                 pop     rbx
.text:0000000000004FDB                 pop     rbp
.text:0000000000004FDC                 pop     r12
.text:0000000000004FDE                 pop     r13
.text:0000000000004FE0                 pop     r14
.text:0000000000004FE2                 pop     r15
.text:0000000000004FE4                 retn
.text:0000000000004FE4 ; ---------------------------------------------------------------------------
.text:0000000000004FE5                 align 8
.text:0000000000004FE8
.text:0000000000004FE8 loc_4FE8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004FE8                 mov     r8, rcx
.text:0000000000004FEB                 mov     rcx, rdx
.text:0000000000004FEE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004FF5                 mov     esi, 1
.text:0000000000004FFA                 xor     eax, eax
.text:0000000000004FFC                 call    ___fprintf_chk
.text:0000000000005001                 jmp     loc_4EEC
.text:0000000000005001 ; ---------------------------------------------------------------------------
.text:0000000000005006                 align 10h
.text:0000000000005010
.text:0000000000005010 loc_5010:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005010                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:0000000000005010                 mov     r10, [rbx+40h]  ; jumptable 0000000000004F54 case 9
.text:0000000000005014                 mov     r9, [rbx+38h]
.text:0000000000005018                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000501F                 mov     rax, [rbx+10h]
.text:0000000000005023                 mov     r8, [rbx+8]
.text:0000000000005027                 mov     edx, 5          ; category
.text:000000000000502C                 mov     r13, [rbx+30h]
.text:0000000000005030                 mov     r12, [rbx+28h]
.text:0000000000005034                 mov     r15, [rbx+20h]
.text:0000000000005038                 mov     r14, [rbx+18h]
.text:000000000000503C                 mov     rbx, [rbx]
.text:000000000000503F                 mov     [rsp+58h+var_40], r10
.text:0000000000005044                 mov     [rsp+58h+var_48], r9
.text:0000000000005049                 mov     [rsp+58h+var_58], rax
.text:000000000000504D                 mov     [rsp+58h+var_50], r8
.text:0000000000005052
.text:0000000000005052 loc_5052:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005052                 xor     edi, edi        ; domainname
.text:0000000000005054                 call    _dcgettext
.text:0000000000005059                 mov     r10, [rsp+58h+var_40]
.text:000000000000505E                 push    r10
.text:0000000000005060                 jmp     loc_4FA4
.text:0000000000005060 ; ---------------------------------------------------------------------------
.text:0000000000005065                 align 8
.text:0000000000005068
.text:0000000000005068 loc_5068:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005068                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:0000000000005068                 mov     rbx, [rbx]      ; jumptable 0000000000004F54 case 1
.text:000000000000506B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005072                 mov     edx, 5          ; category
.text:0000000000005077                 xor     edi, edi        ; domainname
.text:0000000000005079                 call    _dcgettext
.text:000000000000507E                 add     rsp, 28h
.text:0000000000005082                 mov     rcx, rbx
.text:0000000000005085                 mov     rdi, rbp
.text:0000000000005088                 pop     rbx
.text:0000000000005089                 pop     rbp
.text:000000000000508A                 pop     r12
.text:000000000000508C                 pop     r13
.text:000000000000508E                 pop     r14
.text:0000000000005090                 pop     r15
.text:0000000000005092                 mov     rdx, rax
.text:0000000000005095                 mov     esi, 1
.text:000000000000509A                 xor     eax, eax
.text:000000000000509C                 jmp     ___fprintf_chk
.text:000000000000509C ; ---------------------------------------------------------------------------
.text:00000000000050A1                 align 8
.text:00000000000050A8
.text:00000000000050A8 loc_50A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000050A8                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:00000000000050A8                 mov     r12, [rbx+8]    ; jumptable 0000000000004F54 case 2
.text:00000000000050AC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000050B3                 mov     rbx, [rbx]
.text:00000000000050B6                 mov     edx, 5          ; category
.text:00000000000050BB                 xor     edi, edi        ; domainname
.text:00000000000050BD                 call    _dcgettext
.text:00000000000050C2                 add     rsp, 28h
.text:00000000000050C6                 mov     r8, r12
.text:00000000000050C9                 mov     rcx, rbx
.text:00000000000050CC                 mov     rdi, rbp
.text:00000000000050CF                 mov     rdx, rax
.text:00000000000050D2                 mov     esi, 1
.text:00000000000050D7                 pop     rbx
.text:00000000000050D8                 pop     rbp
.text:00000000000050D9                 pop     r12
.text:00000000000050DB                 pop     r13
.text:00000000000050DD                 pop     r14
.text:00000000000050DF                 pop     r15
.text:00000000000050E1                 xor     eax, eax
.text:00000000000050E3                 jmp     ___fprintf_chk
.text:00000000000050E3 ; ---------------------------------------------------------------------------
.text:00000000000050E8                 align 10h
.text:00000000000050F0
.text:00000000000050F0 loc_50F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000050F0                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:00000000000050F0                 mov     r13, [rbx+10h]  ; jumptable 0000000000004F54 case 3
.text:00000000000050F4                 mov     r12, [rbx+8]
.text:00000000000050F8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000050FF                 mov     rbx, [rbx]
.text:0000000000005102                 mov     edx, 5          ; category
.text:0000000000005107                 xor     edi, edi        ; domainname
.text:0000000000005109                 call    _dcgettext
.text:000000000000510E                 add     rsp, 28h
.text:0000000000005112                 mov     r9, r13
.text:0000000000005115                 mov     r8, r12
.text:0000000000005118                 mov     rcx, rbx
.text:000000000000511B                 mov     rdi, rbp
.text:000000000000511E                 mov     rdx, rax
.text:0000000000005121                 pop     rbx
.text:0000000000005122                 pop     rbp
.text:0000000000005123                 pop     r12
.text:0000000000005125                 pop     r13
.text:0000000000005127                 pop     r14
.text:0000000000005129                 pop     r15
.text:000000000000512B                 mov     esi, 1
.text:0000000000005130                 xor     eax, eax
.text:0000000000005132                 jmp     ___fprintf_chk
.text:0000000000005132 ; ---------------------------------------------------------------------------
.text:0000000000005137                 align 20h
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005140                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:0000000000005140                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004F54 case 4
.text:0000000000005147                 mov     edx, 5          ; category
.text:000000000000514C                 xor     edi, edi        ; domainname
.text:000000000000514E                 mov     r14, [rbx+18h]
.text:0000000000005152                 mov     r13, [rbx+10h]
.text:0000000000005156                 mov     r12, [rbx+8]
.text:000000000000515A                 mov     rbx, [rbx]
.text:000000000000515D                 call    _dcgettext
.text:0000000000005162                 sub     rsp, 8
.text:0000000000005166
.text:0000000000005166 loc_5166:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005166                 push    r14
.text:0000000000005168                 mov     rdx, rax
.text:000000000000516B                 mov     r9, r13
.text:000000000000516E                 mov     r8, r12
.text:0000000000005171                 mov     rcx, rbx
.text:0000000000005174                 mov     rdi, rbp
.text:0000000000005177                 mov     esi, 1
.text:000000000000517C                 xor     eax, eax
.text:000000000000517E                 call    ___fprintf_chk
.text:0000000000005183                 pop     rax
.text:0000000000005184                 pop     rdx
.text:0000000000005185                 add     rsp, 28h
.text:0000000000005189                 pop     rbx
.text:000000000000518A                 pop     rbp
.text:000000000000518B                 pop     r12
.text:000000000000518D                 pop     r13
.text:000000000000518F                 pop     r14
.text:0000000000005191                 pop     r15
.text:0000000000005193                 retn
.text:0000000000005193 ; ---------------------------------------------------------------------------
.text:0000000000005194                 align 8
.text:0000000000005198
.text:0000000000005198 loc_5198:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005198                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:0000000000005198                 mov     r15, [rbx+20h]  ; jumptable 0000000000004F54 case 5
.text:000000000000519C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000051A3                 mov     edx, 5          ; category
.text:00000000000051A8                 xor     edi, edi        ; domainname
.text:00000000000051AA                 mov     r14, [rbx+18h]
.text:00000000000051AE                 mov     r13, [rbx+10h]
.text:00000000000051B2                 mov     r12, [rbx+8]
.text:00000000000051B6                 mov     rbx, [rbx]
.text:00000000000051B9                 call    _dcgettext
.text:00000000000051BE                 push    r15
.text:00000000000051C0                 jmp     short loc_5166
.text:00000000000051C0 ; ---------------------------------------------------------------------------
.text:00000000000051C2                 align 8
.text:00000000000051C8
.text:00000000000051C8 loc_51C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051C8                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:00000000000051C8                 mov     r8, [rbx+8]     ; jumptable 0000000000004F54 case 6
.text:00000000000051CC                 mov     r12, [rbx+28h]
.text:00000000000051D0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000051D7                 mov     r15, [rbx+20h]
.text:00000000000051DB                 mov     r14, [rbx+18h]
.text:00000000000051DF                 mov     edx, 5          ; category
.text:00000000000051E4                 mov     r13, [rbx+10h]
.text:00000000000051E8                 xor     edi, edi        ; domainname
.text:00000000000051EA                 mov     rbx, [rbx]
.text:00000000000051ED                 mov     [rsp+58h+var_58], r8
.text:00000000000051F1                 call    _dcgettext
.text:00000000000051F6                 sub     rsp, 8
.text:00000000000051FA                 mov     r9, r13
.text:00000000000051FD                 push    r12
.text:00000000000051FF                 push    r15
.text:0000000000005201                 push    r14
.text:0000000000005203
.text:0000000000005203 loc_5203:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005203                 mov     r8, [rsp+78h+var_58]
.text:0000000000005208                 mov     rcx, rbx
.text:000000000000520B                 mov     rdx, rax
.text:000000000000520E                 mov     rdi, rbp
.text:0000000000005211                 mov     esi, 1
.text:0000000000005216                 xor     eax, eax
.text:0000000000005218                 call    ___fprintf_chk
.text:000000000000521D                 add     rsp, 20h
.text:0000000000005221                 add     rsp, 28h
.text:0000000000005225                 pop     rbx
.text:0000000000005226                 pop     rbp
.text:0000000000005227                 pop     r12
.text:0000000000005229                 pop     r13
.text:000000000000522B                 pop     r14
.text:000000000000522D                 pop     r15
.text:000000000000522F                 retn
.text:0000000000005230 ; ---------------------------------------------------------------------------
.text:0000000000005230
.text:0000000000005230 loc_5230:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005230                                         ; DATA XREF: .rodata:jpt_4F54↓o
.text:0000000000005230                 mov     r9, [rbx+10h]   ; jumptable 0000000000004F54 case 7
.text:0000000000005234                 mov     r13, [rbx+30h]
.text:0000000000005238                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000523F                 mov     r12, [rbx+28h]
.text:0000000000005243                 mov     r15, [rbx+20h]
.text:0000000000005247                 mov     edx, 5          ; category
.text:000000000000524C                 mov     r14, [rbx+18h]
.text:0000000000005250                 mov     r8, [rbx+8]
.text:0000000000005254                 xor     edi, edi        ; domainname
.text:0000000000005256                 mov     [rsp+58h+var_50], r9
.text:000000000000525B                 mov     rbx, [rbx]
.text:000000000000525E                 mov     [rsp+58h+var_58], r8
.text:0000000000005262                 call    _dcgettext
.text:0000000000005267                 push    r13
.text:0000000000005269                 push    r12
.text:000000000000526B                 push    r15
.text:000000000000526D                 push    r14
.text:000000000000526F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005274                 jmp     short loc_5203
.text:0000000000005274 ; ---------------------------------------------------------------------------
.text:0000000000005276                 align 20h
.text:0000000000005280
.text:0000000000005280 def_4F54:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005280                 mov     r10, [rbx+40h]  ; jumptable 0000000000004F54 default case
.text:0000000000005284                 mov     r9, [rbx+38h]
.text:0000000000005288                 mov     edx, 5
.text:000000000000528D                 mov     rax, [rbx+10h]
.text:0000000000005291                 mov     r8, [rbx+8]
.text:0000000000005295                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000529C                 mov     r13, [rbx+30h]
.text:00000000000052A0                 mov     r12, [rbx+28h]
.text:00000000000052A4                 mov     r15, [rbx+20h]
.text:00000000000052A8                 mov     r14, [rbx+18h]
.text:00000000000052AC                 mov     [rsp+58h+var_40], r10
.text:00000000000052B1                 mov     [rsp+58h+var_48], r9
.text:00000000000052B6                 mov     [rsp+58h+var_58], rax
.text:00000000000052BA                 mov     [rsp+58h+var_50], r8
.text:00000000000052BF                 mov     rbx, [rbx]
.text:00000000000052C2                 jmp     loc_5052
.text:00000000000052C2 ; } // starts at 4EB0
.text:00000000000052C2 version_etc_arn endp
.text:00000000000052C2
.text:00000000000052C2 ; ---------------------------------------------------------------------------
.text:00000000000052C7                 align 10h
.text:00000000000052D0
.text:00000000000052D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052D0
.text:00000000000052D0 ; Attributes: info_from_lumina
.text:00000000000052D0
.text:00000000000052D0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000052D0                 public version_etc_ar
.text:00000000000052D0 version_etc_ar  proc near
.text:00000000000052D0 ; __unwind {
.text:00000000000052D0                 xor     r9d, r9d
.text:00000000000052D3                 cmp     qword ptr [r8], 0
.text:00000000000052D7                 jz      short loc_52EB
.text:00000000000052D9                 nop     dword ptr [rax+00000000h]
.text:00000000000052E0
.text:00000000000052E0 loc_52E0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000052E0                 add     r9, 1
.text:00000000000052E4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000052E9                 jnz     short loc_52E0
.text:00000000000052EB
.text:00000000000052EB loc_52EB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000052EB                 jmp     version_etc_arn
.text:00000000000052EB ; } // starts at 52D0
.text:00000000000052EB version_etc_ar  endp
.text:00000000000052EB
.text:00000000000052F0
.text:00000000000052F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052F0
.text:00000000000052F0 ; Attributes: info_from_lumina
.text:00000000000052F0
.text:00000000000052F0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000052F0                 public version_etc_va
.text:00000000000052F0 version_etc_va  proc near
.text:00000000000052F0
.text:00000000000052F0 authtab         = qword ptr -68h
.text:00000000000052F0 var_10          = qword ptr -10h
.text:00000000000052F0
.text:00000000000052F0 ; __unwind {
.text:00000000000052F0                 sub     rsp, 68h
.text:00000000000052F4                 mov     r10, r8
.text:00000000000052F7                 xor     r9d, r9d
.text:00000000000052FA                 mov     rax, fs:28h
.text:0000000000005303                 mov     [rsp+68h+var_10], rax
.text:0000000000005308                 xor     eax, eax
.text:000000000000530A                 mov     r8, rsp
.text:000000000000530D                 nop     dword ptr [rax]
.text:0000000000005310
.text:0000000000005310 loc_5310:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005310                 mov     eax, [r10]
.text:0000000000005313                 cmp     eax, 2Fh ; '/'
.text:0000000000005316                 ja      short loc_535A
.text:0000000000005318                 mov     r11d, eax
.text:000000000000531B                 add     r11, [r10+10h]
.text:000000000000531F                 add     eax, 8
.text:0000000000005322                 mov     [r10], eax
.text:0000000000005325
.text:0000000000005325 loc_5325:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005325                 mov     rax, [r11]
.text:0000000000005328                 test    rax, rax
.text:000000000000532B                 mov     [r8+r9*8], rax
.text:000000000000532F                 jz      short loc_533B
.text:0000000000005331                 add     r9, 1
.text:0000000000005335                 cmp     r9, 0Ah
.text:0000000000005339                 jnz     short loc_5310
.text:000000000000533B
.text:000000000000533B loc_533B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000533B                 call    version_etc_arn
.text:0000000000005340                 mov     rax, [rsp+68h+var_10]
.text:0000000000005345                 xor     rax, fs:28h
.text:000000000000534E                 jnz     short loc_5355
.text:0000000000005350                 add     rsp, 68h
.text:0000000000005354                 retn
.text:0000000000005355 ; ---------------------------------------------------------------------------
.text:0000000000005355
.text:0000000000005355 loc_5355:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005355                 call    ___stack_chk_fail
.text:000000000000535A ; ---------------------------------------------------------------------------
.text:000000000000535A
.text:000000000000535A loc_535A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000535A                 mov     r11, [r10+8]
.text:000000000000535E                 lea     rax, [r11+8]
.text:0000000000005362                 mov     [r10+8], rax
.text:0000000000005366                 jmp     short loc_5325
.text:0000000000005366 ; } // starts at 52F0
.text:0000000000005366 version_etc_va  endp
.text:0000000000005366
.text:0000000000005366 ; ---------------------------------------------------------------------------
.text:0000000000005368                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370 ; Attributes: info_from_lumina
.text:0000000000005370
.text:0000000000005370 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005370                 public version_etc
.text:0000000000005370 version_etc     proc near               ; CODE XREF: main+127↑p
.text:0000000000005370
.text:0000000000005370 var_C0          = dword ptr -0C0h
.text:0000000000005370 var_B8          = qword ptr -0B8h
.text:0000000000005370 var_B0          = qword ptr -0B0h
.text:0000000000005370 var_A8          = byte ptr -0A8h
.text:0000000000005370 var_50          = qword ptr -50h
.text:0000000000005370 var_48          = byte ptr -48h
.text:0000000000005370 var_28          = qword ptr -28h
.text:0000000000005370 var_20          = qword ptr -20h
.text:0000000000005370 arg_0           = byte ptr  8
.text:0000000000005370
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 push    rbp
.text:0000000000005371                 push    rbx
.text:0000000000005372                 mov     r10d, 20h ; ' '
.text:0000000000005378                 xor     r11d, r11d
.text:000000000000537B                 sub     rsp, 0B8h
.text:0000000000005382                 mov     rax, fs:28h
.text:000000000000538B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005390                 xor     eax, eax
.text:0000000000005392                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000539A                 mov     [rsp+0C8h+var_28], r8
.text:00000000000053A2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000053AA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000053AF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000053B7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000053BF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000053C4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000053CC                 xor     r9d, r9d
.text:00000000000053CF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000053D4                 mov     rbp, rax
.text:00000000000053D7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000053E0
.text:00000000000053E0 loc_53E0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000053E0                 cmp     r10d, 2Fh ; '/'
.text:00000000000053E4                 ja      short loc_543C
.text:00000000000053E6                 mov     eax, r10d
.text:00000000000053E9                 mov     r11d, 1
.text:00000000000053EF                 add     r10d, 8
.text:00000000000053F3                 add     rax, rbp
.text:00000000000053F6
.text:00000000000053F6 loc_53F6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000053F6                 mov     rax, [rax]
.text:00000000000053F9                 test    rax, rax
.text:00000000000053FC                 mov     [r8+r9*8], rax
.text:0000000000005400                 jz      short loc_540C
.text:0000000000005402                 add     r9, 1
.text:0000000000005406                 cmp     r9, 0Ah
.text:000000000000540A                 jnz     short loc_53E0
.text:000000000000540C
.text:000000000000540C loc_540C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000540C                 test    r11b, r11b
.text:000000000000540F                 jnz     short loc_5435
.text:0000000000005411
.text:0000000000005411 loc_5411:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005411                 call    version_etc_arn
.text:0000000000005416                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000541B                 xor     rax, fs:28h
.text:0000000000005424                 jnz     short loc_5430
.text:0000000000005426                 add     rsp, 0B8h
.text:000000000000542D                 pop     rbx
.text:000000000000542E                 pop     rbp
.text:000000000000542F                 retn
.text:0000000000005430 ; ---------------------------------------------------------------------------
.text:0000000000005430
.text:0000000000005430 loc_5430:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005430                 call    ___stack_chk_fail
.text:0000000000005435 ; ---------------------------------------------------------------------------
.text:0000000000005435
.text:0000000000005435 loc_5435:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005435                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000543A                 jmp     short loc_5411
.text:000000000000543C ; ---------------------------------------------------------------------------
.text:000000000000543C
.text:000000000000543C loc_543C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000543C                 mov     rax, rbx
.text:000000000000543F                 add     rbx, 8
.text:0000000000005443                 jmp     short loc_53F6
.text:0000000000005443 ; } // starts at 5370
.text:0000000000005443 version_etc     endp
.text:0000000000005443
.text:0000000000005443 ; ---------------------------------------------------------------------------
.text:0000000000005445                 align 10h
.text:0000000000005450
.text:0000000000005450 ; =============== S U B R O U T I N E =======================================
.text:0000000000005450
.text:0000000000005450 ; Attributes: info_from_lumina
.text:0000000000005450
.text:0000000000005450 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005450                 public emit_bug_reporting_address
.text:0000000000005450 emit_bug_reporting_address proc near
.text:0000000000005450 ; __unwind {
.text:0000000000005450                 push    rbx
.text:0000000000005451                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005458                 mov     edx, 5          ; category
.text:000000000000545D                 xor     edi, edi        ; domainname
.text:000000000000545F                 call    _dcgettext
.text:0000000000005464                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000546B                 mov     rsi, rax
.text:000000000000546E                 mov     edi, 1
.text:0000000000005473                 xor     eax, eax
.text:0000000000005475                 call    ___printf_chk
.text:000000000000547A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005481                 mov     edx, 5          ; category
.text:0000000000005486                 xor     edi, edi        ; domainname
.text:0000000000005488                 call    _dcgettext
.text:000000000000548D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005494                 lea     rdx, unk_5F47
.text:000000000000549B                 mov     rsi, rax
.text:000000000000549E                 mov     edi, 1
.text:00000000000054A3                 xor     eax, eax
.text:00000000000054A5                 call    ___printf_chk
.text:00000000000054AA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000054B1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000054B8                 xor     edi, edi        ; domainname
.text:00000000000054BA                 mov     edx, 5          ; category
.text:00000000000054BF                 call    _dcgettext
.text:00000000000054C4                 mov     rsi, rbx        ; stream
.text:00000000000054C7                 mov     rdi, rax        ; s
.text:00000000000054CA                 pop     rbx
.text:00000000000054CB                 jmp     _fputs_unlocked
.text:00000000000054CB ; } // starts at 5450
.text:00000000000054CB emit_bug_reporting_address endp
.text:00000000000054CB
.text:00000000000054D0
.text:00000000000054D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054D0
.text:00000000000054D0
.text:00000000000054D0                 public xmalloc
.text:00000000000054D0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000054D0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000054D0 ; __unwind {
.text:00000000000054D0                 push    rbx
.text:00000000000054D1                 mov     rbx, rdi
.text:00000000000054D4                 call    _malloc
.text:00000000000054D9                 test    rax, rax
.text:00000000000054DC                 jnz     short loc_54E3
.text:00000000000054DE                 test    rbx, rbx
.text:00000000000054E1                 jnz     short loc_54E5
.text:00000000000054E3
.text:00000000000054E3 loc_54E3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000054E3                 pop     rbx
.text:00000000000054E4                 retn
.text:00000000000054E5 ; ---------------------------------------------------------------------------
.text:00000000000054E5
.text:00000000000054E5 loc_54E5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000054E5                 call    xalloc_die
.text:00000000000054E5 ; } // starts at 54D0
.text:00000000000054E5 xmalloc         endp
.text:00000000000054E5
.text:00000000000054E5 ; ---------------------------------------------------------------------------
.text:00000000000054EA                 align 10h
.text:00000000000054F0
.text:00000000000054F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054F0
.text:00000000000054F0 ; Attributes: info_from_lumina
.text:00000000000054F0
.text:00000000000054F0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000054F0                 public xnmalloc
.text:00000000000054F0 xnmalloc        proc near
.text:00000000000054F0 ; __unwind {
.text:00000000000054F0                 mov     rax, rdi
.text:00000000000054F3                 mul     rsi
.text:00000000000054F6                 mov     rdi, rax
.text:00000000000054F9                 seto    al
.text:00000000000054FC                 test    rdi, rdi
.text:00000000000054FF                 js      short loc_550B
.text:0000000000005501                 movzx   eax, al
.text:0000000000005504                 test    rax, rax
.text:0000000000005507                 jnz     short loc_550B
.text:0000000000005509                 jmp     short xmalloc
.text:000000000000550B ; ---------------------------------------------------------------------------
.text:000000000000550B
.text:000000000000550B loc_550B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000550B                                         ; xnmalloc+17↑j
.text:000000000000550B                 sub     rsp, 8
.text:000000000000550F                 call    xalloc_die
.text:000000000000550F ; } // starts at 54F0
.text:000000000000550F xnmalloc        endp
.text:000000000000550F
.text:000000000000550F ; ---------------------------------------------------------------------------
.text:0000000000005514                 align 20h
.text:0000000000005520
.text:0000000000005520 ; =============== S U B R O U T I N E =======================================
.text:0000000000005520
.text:0000000000005520
.text:0000000000005520                 public xcharalloc
.text:0000000000005520 xcharalloc      proc near
.text:0000000000005520 ; __unwind {
.text:0000000000005520                 jmp     short xmalloc
.text:0000000000005520 ; } // starts at 5520
.text:0000000000005520 xcharalloc      endp
.text:0000000000005520
.text:0000000000005520 ; ---------------------------------------------------------------------------
.text:0000000000005522                 align 10h
.text:0000000000005530
.text:0000000000005530 ; =============== S U B R O U T I N E =======================================
.text:0000000000005530
.text:0000000000005530 ; Attributes: info_from_lumina
.text:0000000000005530
.text:0000000000005530 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005530                 public xrealloc
.text:0000000000005530 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000005530                                         ; quotearg_n_options+182↑p ...
.text:0000000000005530 ; __unwind {
.text:0000000000005530                 test    rsi, rsi
.text:0000000000005533                 push    rbx
.text:0000000000005534                 mov     rbx, rsi
.text:0000000000005537                 jnz     short loc_553E
.text:0000000000005539                 test    rdi, rdi
.text:000000000000553C                 jnz     short loc_5558
.text:000000000000553E
.text:000000000000553E loc_553E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000553E                 mov     rsi, rbx        ; size
.text:0000000000005541                 call    _realloc
.text:0000000000005546                 test    rax, rax
.text:0000000000005549                 jnz     short loc_5550
.text:000000000000554B                 test    rbx, rbx
.text:000000000000554E                 jnz     short loc_5561
.text:0000000000005550
.text:0000000000005550 loc_5550:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005550                 pop     rbx
.text:0000000000005551                 retn
.text:0000000000005551 ; ---------------------------------------------------------------------------
.text:0000000000005552                 align 8
.text:0000000000005558
.text:0000000000005558 loc_5558:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005558                 call    _free
.text:000000000000555D                 xor     eax, eax
.text:000000000000555F                 pop     rbx
.text:0000000000005560                 retn
.text:0000000000005561 ; ---------------------------------------------------------------------------
.text:0000000000005561
.text:0000000000005561 loc_5561:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005561                 call    xalloc_die
.text:0000000000005561 ; } // starts at 5530
.text:0000000000005561 xrealloc        endp
.text:0000000000005561
.text:0000000000005561 ; ---------------------------------------------------------------------------
.text:0000000000005566                 align 10h
.text:0000000000005570
.text:0000000000005570 ; =============== S U B R O U T I N E =======================================
.text:0000000000005570
.text:0000000000005570 ; Attributes: info_from_lumina
.text:0000000000005570
.text:0000000000005570 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005570                 public xnrealloc
.text:0000000000005570 xnrealloc       proc near
.text:0000000000005570 ; __unwind {
.text:0000000000005570                 mov     rax, rsi
.text:0000000000005573                 mul     rdx
.text:0000000000005576                 mov     rsi, rax
.text:0000000000005579                 seto    al
.text:000000000000557C                 test    rsi, rsi
.text:000000000000557F                 js      short loc_558B
.text:0000000000005581                 movzx   eax, al
.text:0000000000005584                 test    rax, rax
.text:0000000000005587                 jnz     short loc_558B
.text:0000000000005589                 jmp     short xrealloc
.text:000000000000558B ; ---------------------------------------------------------------------------
.text:000000000000558B
.text:000000000000558B loc_558B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000558B                                         ; xnrealloc+17↑j
.text:000000000000558B                 sub     rsp, 8
.text:000000000000558F                 call    xalloc_die
.text:000000000000558F ; } // starts at 5570
.text:000000000000558F xnrealloc       endp
.text:000000000000558F
.text:000000000000558F ; ---------------------------------------------------------------------------
.text:0000000000005594                 align 20h
.text:00000000000055A0
.text:00000000000055A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055A0
.text:00000000000055A0 ; Attributes: info_from_lumina
.text:00000000000055A0
.text:00000000000055A0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000055A0                 public x2nrealloc
.text:00000000000055A0 x2nrealloc      proc near
.text:00000000000055A0 ; __unwind {
.text:00000000000055A0                 test    rdi, rdi
.text:00000000000055A3                 mov     r9, rdx
.text:00000000000055A6                 mov     rcx, [rsi]
.text:00000000000055A9                 jz      short loc_55E0
.text:00000000000055AB                 xor     edx, edx
.text:00000000000055AD                 mov     rax, 5555555555555554h
.text:00000000000055B7                 div     r9
.text:00000000000055BA                 cmp     rax, rcx
.text:00000000000055BD                 jbe     short loc_55FB
.text:00000000000055BF                 mov     rax, rcx
.text:00000000000055C2                 shr     rax, 1
.text:00000000000055C5                 lea     rcx, [rax+rcx+1]
.text:00000000000055CA
.text:00000000000055CA loc_55CA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000055CA                 mov     [rsi], rcx
.text:00000000000055CD                 imul    rcx, r9
.text:00000000000055D1                 mov     rsi, rcx
.text:00000000000055D4                 jmp     xrealloc
.text:00000000000055D4 ; ---------------------------------------------------------------------------
.text:00000000000055D9                 align 20h
.text:00000000000055E0
.text:00000000000055E0 loc_55E0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000055E0                 test    rcx, rcx
.text:00000000000055E3                 jz      short loc_5608
.text:00000000000055E5
.text:00000000000055E5 loc_55E5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000055E5                 mov     rax, rcx
.text:00000000000055E8                 mul     r9
.text:00000000000055EB                 seto    dl
.text:00000000000055EE                 test    rax, rax
.text:00000000000055F1                 movzx   edx, dl
.text:00000000000055F4                 js      short loc_55FB
.text:00000000000055F6                 test    rdx, rdx
.text:00000000000055F9                 jz      short loc_55CA
.text:00000000000055FB
.text:00000000000055FB loc_55FB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000055FB                                         ; x2nrealloc+54↑j
.text:00000000000055FB                 sub     rsp, 8
.text:00000000000055FF                 call    xalloc_die
.text:00000000000055FF ; ---------------------------------------------------------------------------
.text:0000000000005604                 align 8
.text:0000000000005608
.text:0000000000005608 loc_5608:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005608                 xor     edx, edx
.text:000000000000560A                 mov     eax, 80h
.text:000000000000560F                 xor     r8d, r8d
.text:0000000000005612                 div     r9
.text:0000000000005615                 test    rax, rax
.text:0000000000005618                 setz    r8b
.text:000000000000561C                 lea     rcx, [r8+rax]
.text:0000000000005620                 jmp     short loc_55E5
.text:0000000000005620 ; } // starts at 55A0
.text:0000000000005620 x2nrealloc      endp
.text:0000000000005620
.text:0000000000005620 ; ---------------------------------------------------------------------------
.text:0000000000005622                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630 ; Attributes: info_from_lumina
.text:0000000000005630
.text:0000000000005630 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005630                 public x2realloc
.text:0000000000005630 x2realloc       proc near
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 test    rdi, rdi
.text:0000000000005633                 mov     rax, [rsi]
.text:0000000000005636                 jz      short loc_5660
.text:0000000000005638                 mov     rdx, 5555555555555553h
.text:0000000000005642                 cmp     rax, rdx
.text:0000000000005645                 ja      short loc_5671
.text:0000000000005647                 mov     rdx, rax
.text:000000000000564A                 shr     rdx, 1
.text:000000000000564D                 lea     rax, [rdx+rax+1]
.text:0000000000005652
.text:0000000000005652 loc_5652:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005652                 mov     [rsi], rax
.text:0000000000005655                 mov     rsi, rax
.text:0000000000005658                 jmp     xrealloc
.text:0000000000005658 ; ---------------------------------------------------------------------------
.text:000000000000565D                 align 20h
.text:0000000000005660
.text:0000000000005660 loc_5660:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005660                 test    rax, rax
.text:0000000000005663                 mov     edx, 80h
.text:0000000000005668                 cmovz   rax, rdx
.text:000000000000566C                 test    rax, rax
.text:000000000000566F                 jns     short loc_5652
.text:0000000000005671
.text:0000000000005671 loc_5671:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005671                 sub     rsp, 8
.text:0000000000005675                 call    xalloc_die
.text:0000000000005675 ; } // starts at 5630
.text:0000000000005675 x2realloc       endp
.text:0000000000005675
.text:0000000000005675 ; ---------------------------------------------------------------------------
.text:000000000000567A                 align 20h
.text:0000000000005680
.text:0000000000005680 ; =============== S U B R O U T I N E =======================================
.text:0000000000005680
.text:0000000000005680
.text:0000000000005680 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005680                 public xzalloc
.text:0000000000005680 xzalloc         proc near
.text:0000000000005680 ; __unwind {
.text:0000000000005680                 push    rbx
.text:0000000000005681                 mov     rbx, rdi
.text:0000000000005684                 call    xmalloc
.text:0000000000005689                 mov     rdx, rbx        ; n
.text:000000000000568C                 xor     esi, esi        ; c
.text:000000000000568E                 mov     rdi, rax        ; s
.text:0000000000005691                 pop     rbx
.text:0000000000005692                 jmp     _memset
.text:0000000000005692 ; } // starts at 5680
.text:0000000000005692 xzalloc         endp
.text:0000000000005692
.text:0000000000005692 ; ---------------------------------------------------------------------------
.text:0000000000005697                 align 20h
.text:00000000000056A0
.text:00000000000056A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056A0
.text:00000000000056A0 ; Attributes: info_from_lumina
.text:00000000000056A0
.text:00000000000056A0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000056A0                 public xcalloc
.text:00000000000056A0 xcalloc         proc near
.text:00000000000056A0 ; __unwind {
.text:00000000000056A0                 mov     rax, rdi
.text:00000000000056A3                 sub     rsp, 8
.text:00000000000056A7                 mul     rsi
.text:00000000000056AA                 seto    dl
.text:00000000000056AD                 test    rax, rax
.text:00000000000056B0                 js      short loc_56C9
.text:00000000000056B2                 movzx   edx, dl
.text:00000000000056B5                 test    rdx, rdx
.text:00000000000056B8                 jnz     short loc_56C9
.text:00000000000056BA                 call    _calloc
.text:00000000000056BF                 test    rax, rax
.text:00000000000056C2                 jz      short loc_56C9
.text:00000000000056C4                 add     rsp, 8
.text:00000000000056C8                 retn
.text:00000000000056C9 ; ---------------------------------------------------------------------------
.text:00000000000056C9
.text:00000000000056C9 loc_56C9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000056C9                                         ; xcalloc+18↑j ...
.text:00000000000056C9                 call    xalloc_die
.text:00000000000056C9 ; } // starts at 56A0
.text:00000000000056C9 xcalloc         endp
.text:00000000000056C9
.text:00000000000056C9 ; ---------------------------------------------------------------------------
.text:00000000000056CE                 align 10h
.text:00000000000056D0
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0
.text:00000000000056D0 ; Attributes: info_from_lumina
.text:00000000000056D0
.text:00000000000056D0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000056D0                 public xmemdup
.text:00000000000056D0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000056D0                                         ; xstrdup+11↓j
.text:00000000000056D0 ; __unwind {
.text:00000000000056D0                 push    rbp
.text:00000000000056D1                 push    rbx
.text:00000000000056D2                 mov     rbp, rdi
.text:00000000000056D5                 mov     rdi, rsi
.text:00000000000056D8                 mov     rbx, rsi
.text:00000000000056DB                 sub     rsp, 8
.text:00000000000056DF                 call    xmalloc
.text:00000000000056E4                 add     rsp, 8
.text:00000000000056E8                 mov     rdx, rbx        ; n
.text:00000000000056EB                 mov     rsi, rbp        ; src
.text:00000000000056EE                 pop     rbx
.text:00000000000056EF                 pop     rbp
.text:00000000000056F0                 mov     rdi, rax        ; dest
.text:00000000000056F3                 jmp     _memcpy
.text:00000000000056F3 ; } // starts at 56D0
.text:00000000000056F3 xmemdup         endp
.text:00000000000056F3
.text:00000000000056F3 ; ---------------------------------------------------------------------------
.text:00000000000056F8                 align 20h
.text:0000000000005700
.text:0000000000005700 ; =============== S U B R O U T I N E =======================================
.text:0000000000005700
.text:0000000000005700
.text:0000000000005700 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005700                 public xstrdup
.text:0000000000005700 xstrdup         proc near               ; CODE XREF: operand2sig:loc_2E00↑p
.text:0000000000005700 ; __unwind {
.text:0000000000005700                 push    rbx
.text:0000000000005701                 mov     rbx, rdi
.text:0000000000005704                 call    _strlen
.text:0000000000005709                 mov     rdi, rbx        ; src
.text:000000000000570C                 lea     rsi, [rax+1]    ; n
.text:0000000000005710                 pop     rbx
.text:0000000000005711                 jmp     short xmemdup
.text:0000000000005711 ; } // starts at 5700
.text:0000000000005711 xstrdup         endp
.text:0000000000005711
.text:0000000000005711 ; ---------------------------------------------------------------------------
.text:0000000000005713                 align 20h
.text:0000000000005720
.text:0000000000005720 ; =============== S U B R O U T I N E =======================================
.text:0000000000005720
.text:0000000000005720 ; Attributes: noreturn info_from_lumina
.text:0000000000005720
.text:0000000000005720 ; void __cdecl xalloc_die()
.text:0000000000005720                 public xalloc_die
.text:0000000000005720 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_46F6↑p
.text:0000000000005720                                         ; xmalloc:loc_54E5↑p ...
.text:0000000000005720 ; __unwind {
.text:0000000000005720                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005727                 sub     rsp, 8
.text:000000000000572B                 mov     edx, 5          ; category
.text:0000000000005730                 xor     edi, edi        ; domainname
.text:0000000000005732                 call    _dcgettext
.text:0000000000005737                 mov     edi, cs:exit_failure ; status
.text:000000000000573D                 lea     rdx, format+4   ; format
.text:0000000000005744                 mov     rcx, rax
.text:0000000000005747                 xor     esi, esi        ; errnum
.text:0000000000005749                 xor     eax, eax
.text:000000000000574B                 call    _error
.text:0000000000005750                 call    _abort
.text:0000000000005750 ; } // starts at 5720
.text:0000000000005750 xalloc_die      endp
.text:0000000000005750
.text:0000000000005750 ; ---------------------------------------------------------------------------
.text:0000000000005755                 align 20h
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760
.text:0000000000005760                 public xstrtod
.text:0000000000005760 xstrtod         proc near               ; CODE XREF: parse_duration+29↑p
.text:0000000000005760
.text:0000000000005760 var_38          = qword ptr -38h
.text:0000000000005760 var_30          = qword ptr -30h
.text:0000000000005760
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 push    r14
.text:0000000000005762                 push    r13
.text:0000000000005764                 mov     r14, rcx
.text:0000000000005767                 push    r12
.text:0000000000005769                 push    rbp
.text:000000000000576A                 mov     rbp, rdi
.text:000000000000576D                 push    rbx
.text:000000000000576E                 mov     r13, rdx
.text:0000000000005771                 mov     rbx, rsi
.text:0000000000005774                 sub     rsp, 10h
.text:0000000000005778                 mov     rax, fs:28h
.text:0000000000005781                 mov     [rsp+38h+var_30], rax
.text:0000000000005786                 xor     eax, eax
.text:0000000000005788                 call    ___errno_location
.text:000000000000578D                 mov     rsi, rsp
.text:0000000000005790                 mov     r12, rax
.text:0000000000005793                 mov     dword ptr [rax], 0
.text:0000000000005799                 mov     rdi, rbp
.text:000000000000579C                 call    r14
.text:000000000000579F                 mov     rcx, [rsp+38h+var_38]
.text:00000000000057A3                 cmp     rcx, rbp
.text:00000000000057A6                 jz      short loc_5818
.text:00000000000057A8                 test    rbx, rbx
.text:00000000000057AB                 jz      short loc_57F8
.text:00000000000057AD                 ucomisd xmm0, cs:qword_6878
.text:00000000000057B5                 jp      short loc_57BE
.text:00000000000057B7                 mov     eax, 1
.text:00000000000057BC                 jz      short loc_57CB
.text:00000000000057BE
.text:00000000000057BE loc_57BE:                               ; CODE XREF: xstrtod+55↑j
.text:00000000000057BE                                         ; xstrtod+A7↓j ...
.text:00000000000057BE                 cmp     dword ptr [r12], 22h ; '"'
.text:00000000000057C3                 setnz   al
.text:00000000000057C6
.text:00000000000057C6 loc_57C6:                               ; CODE XREF: xstrtod+BA↓j
.text:00000000000057C6                 test    rbx, rbx
.text:00000000000057C9                 jz      short loc_57CE
.text:00000000000057CB
.text:00000000000057CB loc_57CB:                               ; CODE XREF: xstrtod+5C↑j
.text:00000000000057CB                 mov     [rbx], rcx
.text:00000000000057CE
.text:00000000000057CE loc_57CE:                               ; CODE XREF: xstrtod+69↑j
.text:00000000000057CE                                         ; xstrtod+9D↓j ...
.text:00000000000057CE                 mov     rdx, [rsp+38h+var_30]
.text:00000000000057D3                 xor     rdx, fs:28h
.text:00000000000057DC                 movsd   qword ptr [r13+0], xmm0
.text:00000000000057E2                 jnz     short loc_581C
.text:00000000000057E4                 add     rsp, 10h
.text:00000000000057E8                 pop     rbx
.text:00000000000057E9                 pop     rbp
.text:00000000000057EA                 pop     r12
.text:00000000000057EC                 pop     r13
.text:00000000000057EE                 pop     r14
.text:00000000000057F0                 retn
.text:00000000000057F0 ; ---------------------------------------------------------------------------
.text:00000000000057F1                 align 8
.text:00000000000057F8
.text:00000000000057F8 loc_57F8:                               ; CODE XREF: xstrtod+4B↑j
.text:00000000000057F8                 xor     eax, eax
.text:00000000000057FA                 cmp     byte ptr [rcx], 0
.text:00000000000057FD                 jnz     short loc_57CE
.text:00000000000057FF                 ucomisd xmm0, cs:qword_6878
.text:0000000000005807                 jp      short loc_57BE
.text:0000000000005809                 jnz     short loc_57BE
.text:000000000000580B                 mov     eax, 1
.text:0000000000005810                 jmp     short loc_57CE
.text:0000000000005810 ; ---------------------------------------------------------------------------
.text:0000000000005812                 align 8
.text:0000000000005818
.text:0000000000005818 loc_5818:                               ; CODE XREF: xstrtod+46↑j
.text:0000000000005818                 xor     eax, eax
.text:000000000000581A                 jmp     short loc_57C6
.text:000000000000581C ; ---------------------------------------------------------------------------
.text:000000000000581C
.text:000000000000581C loc_581C:                               ; CODE XREF: xstrtod+82↑j
.text:000000000000581C                 call    ___stack_chk_fail
.text:000000000000581C ; } // starts at 5760
.text:000000000000581C xstrtod         endp
.text:000000000000581C
.text:000000000000581C ; ---------------------------------------------------------------------------
.text:0000000000005821                 align 10h
.text:0000000000005830
.text:0000000000005830 ; =============== S U B R O U T I N E =======================================
.text:0000000000005830
.text:0000000000005830 ; Attributes: info_from_lumina
.text:0000000000005830
.text:0000000000005830 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005830                 public rpl_mbrtowc
.text:0000000000005830 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005830
.text:0000000000005830 pwc             = dword ptr -34h
.text:0000000000005830 var_30          = qword ptr -30h
.text:0000000000005830
.text:0000000000005830 ; __unwind {
.text:0000000000005830                 push    r13
.text:0000000000005832                 push    r12
.text:0000000000005834                 mov     r13, rsi
.text:0000000000005837                 push    rbp
.text:0000000000005838                 push    rbx
.text:0000000000005839                 mov     rbx, rdi
.text:000000000000583C                 mov     r12, rdx
.text:000000000000583F                 sub     rsp, 18h
.text:0000000000005843                 mov     rax, fs:28h
.text:000000000000584C                 mov     [rsp+38h+var_30], rax
.text:0000000000005851                 xor     eax, eax
.text:0000000000005853                 lea     rax, [rsp+38h+pwc]
.text:0000000000005858                 test    rdi, rdi
.text:000000000000585B                 cmovz   rbx, rax
.text:000000000000585F                 mov     rdi, rbx        ; pwc
.text:0000000000005862                 call    _mbrtowc
.text:0000000000005867                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000586B                 mov     rbp, rax
.text:000000000000586E                 jbe     short loc_5890
.text:0000000000005870                 test    r12, r12
.text:0000000000005873                 jz      short loc_5890
.text:0000000000005875                 xor     edi, edi
.text:0000000000005877                 call    hard_locale
.text:000000000000587C                 test    al, al
.text:000000000000587E                 jnz     short loc_5890
.text:0000000000005880                 movzx   eax, byte ptr [r13+0]
.text:0000000000005885                 mov     ebp, 1
.text:000000000000588A                 mov     [rbx], eax
.text:000000000000588C                 nop     dword ptr [rax+00h]
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005890                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005890                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005895                 xor     rdx, fs:28h
.text:000000000000589E                 mov     rax, rbp
.text:00000000000058A1                 jnz     short loc_58AE
.text:00000000000058A3                 add     rsp, 18h
.text:00000000000058A7                 pop     rbx
.text:00000000000058A8                 pop     rbp
.text:00000000000058A9                 pop     r12
.text:00000000000058AB                 pop     r13
.text:00000000000058AD                 retn
.text:00000000000058AE ; ---------------------------------------------------------------------------
.text:00000000000058AE
.text:00000000000058AE loc_58AE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000058AE                 call    ___stack_chk_fail
.text:00000000000058AE ; } // starts at 5830
.text:00000000000058AE rpl_mbrtowc     endp
.text:00000000000058AE
.text:00000000000058AE ; ---------------------------------------------------------------------------
.text:00000000000058B3                 align 20h
.text:00000000000058C0
.text:00000000000058C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058C0
.text:00000000000058C0
.text:00000000000058C0 ; __int64 __fastcall str2sig(char *s2)
.text:00000000000058C0                 public str2sig
.text:00000000000058C0 str2sig         proc near               ; CODE XREF: operand2sig+10D↑p
.text:00000000000058C0                                         ; operand2sig+19D↑p
.text:00000000000058C0
.text:00000000000058C0 var_38          = qword ptr -38h
.text:00000000000058C0 var_30          = qword ptr -30h
.text:00000000000058C0
.text:00000000000058C0 ; __unwind {
.text:00000000000058C0                 push    r13
.text:00000000000058C2                 push    r12
.text:00000000000058C4                 mov     r13, rsi
.text:00000000000058C7                 push    rbp
.text:00000000000058C8                 push    rbx
.text:00000000000058C9                 xor     ebx, ebx
.text:00000000000058CB                 mov     r12, rdi
.text:00000000000058CE                 lea     rbp, nptr       ; "HUP"
.text:00000000000058D5                 sub     rsp, 18h
.text:00000000000058D9                 mov     rax, fs:28h
.text:00000000000058E2                 mov     [rsp+38h+var_30], rax
.text:00000000000058E7                 xor     eax, eax
.text:00000000000058E9                 movsx   eax, byte ptr [rdi]
.text:00000000000058EC                 sub     eax, 30h ; '0'
.text:00000000000058EF                 cmp     eax, 9
.text:00000000000058F2                 ja      short loc_590C
.text:00000000000058F4                 jmp     short loc_5950
.text:00000000000058F4 ; ---------------------------------------------------------------------------
.text:00000000000058F6                 align 20h
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: str2sig+59↓j
.text:0000000000005900                 add     ebx, 1
.text:0000000000005903                 add     rbp, 0Ch
.text:0000000000005907                 cmp     ebx, 23h ; '#'
.text:000000000000590A                 jz      short loc_5980
.text:000000000000590C
.text:000000000000590C loc_590C:                               ; CODE XREF: str2sig+32↑j
.text:000000000000590C                 mov     rsi, r12        ; s2
.text:000000000000590F                 mov     rdi, rbp        ; nptr
.text:0000000000005912                 call    _strcmp
.text:0000000000005917                 test    eax, eax
.text:0000000000005919                 jnz     short loc_5900
.text:000000000000591B                 lea     rdx, [rbx+rbx*2]
.text:000000000000591F                 lea     rax, numname_table
.text:0000000000005926                 mov     eax, [rax+rdx*4]
.text:0000000000005929
.text:0000000000005929 loc_5929:                               ; CODE XREF: str2sig+AA↓j
.text:0000000000005929                                         ; str2sig+13E↓j ...
.text:0000000000005929                 mov     [r13+0], eax
.text:000000000000592D                 sar     eax, 1Fh
.text:0000000000005930
.text:0000000000005930 loc_5930:                               ; CODE XREF: str2sig+B9↓j
.text:0000000000005930                 mov     rcx, [rsp+38h+var_30]
.text:0000000000005935                 xor     rcx, fs:28h
.text:000000000000593E                 jnz     loc_5A40
.text:0000000000005944                 add     rsp, 18h
.text:0000000000005948                 pop     rbx
.text:0000000000005949                 pop     rbp
.text:000000000000594A                 pop     r12
.text:000000000000594C                 pop     r13
.text:000000000000594E                 retn
.text:000000000000594E ; ---------------------------------------------------------------------------
.text:000000000000594F                 align 10h
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: str2sig+34↑j
.text:0000000000005950                 mov     edx, 0Ah        ; base
.text:0000000000005955                 mov     rsi, rsp        ; endptr
.text:0000000000005958                 call    _strtol
.text:000000000000595D                 mov     rdx, [rsp+38h+var_38]
.text:0000000000005961                 cmp     byte ptr [rdx], 0
.text:0000000000005964                 jnz     short loc_596C
.text:0000000000005966                 cmp     rax, 40h ; '@'
.text:000000000000596A                 jle     short loc_5929
.text:000000000000596C
.text:000000000000596C loc_596C:                               ; CODE XREF: str2sig+A4↑j
.text:000000000000596C                                         ; str2sig+EE↓j ...
.text:000000000000596C                 mov     dword ptr [r13+0], 0FFFFFFFFh
.text:0000000000005974                 mov     eax, 0FFFFFFFFh
.text:0000000000005979                 jmp     short loc_5930
.text:0000000000005979 ; ---------------------------------------------------------------------------
.text:000000000000597B                 align 20h
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: str2sig+4A↑j
.text:0000000000005980                 call    ___libc_current_sigrtmin
.text:0000000000005985                 mov     ebp, eax
.text:0000000000005987                 call    ___libc_current_sigrtmax
.text:000000000000598C                 test    ebp, ebp
.text:000000000000598E                 mov     ebx, eax
.text:0000000000005990                 jle     short loc_59AC
.text:0000000000005992                 lea     rdi, aRtmin     ; "RTMIN"
.text:0000000000005999                 mov     ecx, 5
.text:000000000000599E                 mov     rsi, r12
.text:00000000000059A1                 repe cmpsb
.text:00000000000059A3                 setnbe  al
.text:00000000000059A6                 sbb     al, 0
.text:00000000000059A8                 test    al, al
.text:00000000000059AA                 jz      short loc_5A03
.text:00000000000059AC
.text:00000000000059AC loc_59AC:                               ; CODE XREF: str2sig+D0↑j
.text:00000000000059AC                 test    ebx, ebx
.text:00000000000059AE                 jle     short loc_596C
.text:00000000000059B0                 lea     rdi, aRtmax     ; "RTMAX"
.text:00000000000059B7                 mov     ecx, 5
.text:00000000000059BC                 mov     rsi, r12
.text:00000000000059BF                 repe cmpsb
.text:00000000000059C1                 setnbe  al
.text:00000000000059C4                 sbb     al, 0
.text:00000000000059C6                 test    al, al
.text:00000000000059C8                 jnz     short loc_596C
.text:00000000000059CA                 lea     rdi, [r12+5]    ; nptr
.text:00000000000059CF                 mov     edx, 0Ah        ; base
.text:00000000000059D4                 mov     rsi, rsp        ; endptr
.text:00000000000059D7                 call    _strtol
.text:00000000000059DC                 mov     rdx, [rsp+38h+var_38]
.text:00000000000059E0                 cmp     byte ptr [rdx], 0
.text:00000000000059E3                 jnz     short loc_596C
.text:00000000000059E5                 sub     ebp, ebx
.text:00000000000059E7                 movsxd  rbp, ebp
.text:00000000000059EA                 cmp     rax, rbp
.text:00000000000059ED                 jl      loc_596C
.text:00000000000059F3                 test    rax, rax
.text:00000000000059F6                 jg      loc_596C
.text:00000000000059FC                 add     eax, ebx
.text:00000000000059FE                 jmp     loc_5929
.text:0000000000005A03 ; ---------------------------------------------------------------------------
.text:0000000000005A03
.text:0000000000005A03 loc_5A03:                               ; CODE XREF: str2sig+EA↑j
.text:0000000000005A03                 lea     rdi, [r12+5]    ; nptr
.text:0000000000005A08                 mov     edx, 0Ah        ; base
.text:0000000000005A0D                 mov     rsi, rsp        ; endptr
.text:0000000000005A10                 call    _strtol
.text:0000000000005A15                 mov     rdx, [rsp+38h+var_38]
.text:0000000000005A19                 cmp     byte ptr [rdx], 0
.text:0000000000005A1C                 jnz     loc_596C
.text:0000000000005A22                 test    rax, rax
.text:0000000000005A25                 js      loc_596C
.text:0000000000005A2B                 sub     ebx, ebp
.text:0000000000005A2D                 movsxd  rdx, ebx
.text:0000000000005A30                 cmp     rax, rdx
.text:0000000000005A33                 jg      loc_596C
.text:0000000000005A39                 add     eax, ebp
.text:0000000000005A3B                 jmp     loc_5929
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: str2sig+7E↑j
.text:0000000000005A40                 call    ___stack_chk_fail
.text:0000000000005A40 ; } // starts at 58C0
.text:0000000000005A40 str2sig         endp
.text:0000000000005A40
.text:0000000000005A40 ; ---------------------------------------------------------------------------
.text:0000000000005A45                 align 10h
.text:0000000000005A50
.text:0000000000005A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A50
.text:0000000000005A50
.text:0000000000005A50                 public sig2str
.text:0000000000005A50 sig2str         proc near               ; CODE XREF: cleanup+DA↑p
.text:0000000000005A50                                         ; operand2sig+12F↑p
.text:0000000000005A50
.text:0000000000005A50 var_20          = qword ptr -20h
.text:0000000000005A50
.text:0000000000005A50 ; __unwind {
.text:0000000000005A50                 push    rbp
.text:0000000000005A51                 lea     rax, numname_table
.text:0000000000005A58                 push    rbx
.text:0000000000005A59                 xor     edx, edx
.text:0000000000005A5B                 mov     ebx, edi
.text:0000000000005A5D                 mov     rdi, rsi        ; dest
.text:0000000000005A60                 sub     rsp, 18h
.text:0000000000005A64                 mov     rcx, rax
.text:0000000000005A67                 jmp     short loc_5A7C
.text:0000000000005A67 ; ---------------------------------------------------------------------------
.text:0000000000005A69                 align 10h
.text:0000000000005A70
.text:0000000000005A70 loc_5A70:                               ; CODE XREF: sig2str+2E↓j
.text:0000000000005A70                 add     edx, 1
.text:0000000000005A73                 add     rcx, 0Ch
.text:0000000000005A77                 cmp     edx, 23h ; '#'
.text:0000000000005A7A                 jz      short loc_5AA0
.text:0000000000005A7C
.text:0000000000005A7C loc_5A7C:                               ; CODE XREF: sig2str+17↑j
.text:0000000000005A7C                 cmp     [rcx], ebx
.text:0000000000005A7E                 jnz     short loc_5A70
.text:0000000000005A80                 lea     rdx, [rdx+rdx*2]
.text:0000000000005A84                 lea     rsi, [rax+rdx*4+4] ; src
.text:0000000000005A89                 call    _strcpy
.text:0000000000005A8E                 xor     eax, eax
.text:0000000000005A90
.text:0000000000005A90 loc_5A90:                               ; CODE XREF: sig2str+8F↓j
.text:0000000000005A90                                         ; sig2str+D6↓j
.text:0000000000005A90                 add     rsp, 18h
.text:0000000000005A94                 pop     rbx
.text:0000000000005A95                 pop     rbp
.text:0000000000005A96                 retn
.text:0000000000005A96 ; ---------------------------------------------------------------------------
.text:0000000000005A97                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 loc_5AA0:                               ; CODE XREF: sig2str+2A↑j
.text:0000000000005AA0                 mov     [rsp+28h+var_20], rdi
.text:0000000000005AA5                 call    ___libc_current_sigrtmin
.text:0000000000005AAA                 mov     ebp, eax
.text:0000000000005AAC                 call    ___libc_current_sigrtmax
.text:0000000000005AB1                 cmp     ebp, ebx
.text:0000000000005AB3                 jg      short loc_5B21
.text:0000000000005AB5                 cmp     eax, ebx
.text:0000000000005AB7                 jl      short loc_5B21
.text:0000000000005AB9                 mov     edx, eax
.text:0000000000005ABB                 mov     rdi, [rsp+28h+var_20]
.text:0000000000005AC0                 sub     edx, ebp
.text:0000000000005AC2                 sar     edx, 1
.text:0000000000005AC4                 add     edx, ebp
.text:0000000000005AC6                 cmp     edx, ebx
.text:0000000000005AC8                 jge     short loc_5B10
.text:0000000000005ACA                 mov     edx, 58h ; 'X'
.text:0000000000005ACF                 mov     dword ptr [rdi], 414D5452h
.text:0000000000005AD5                 mov     ebp, eax
.text:0000000000005AD7                 mov     [rdi+4], dx
.text:0000000000005ADB
.text:0000000000005ADB loc_5ADB:                               ; CODE XREF: sig2str+CF↓j
.text:0000000000005ADB                 mov     eax, ebx
.text:0000000000005ADD                 sub     eax, ebp
.text:0000000000005ADF                 jz      short loc_5A90
.text:0000000000005AE1                 lea     rcx, aD_0       ; "%+d"
.text:0000000000005AE8                 mov     r8d, eax
.text:0000000000005AEB                 add     rdi, 5
.text:0000000000005AEF                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005AF6                 mov     esi, 1
.text:0000000000005AFB                 xor     eax, eax
.text:0000000000005AFD                 call    ___sprintf_chk
.text:0000000000005B02                 add     rsp, 18h
.text:0000000000005B06                 xor     eax, eax
.text:0000000000005B08                 pop     rbx
.text:0000000000005B09                 pop     rbp
.text:0000000000005B0A                 retn
.text:0000000000005B0A ; ---------------------------------------------------------------------------
.text:0000000000005B0B                 align 10h
.text:0000000000005B10
.text:0000000000005B10 loc_5B10:                               ; CODE XREF: sig2str+78↑j
.text:0000000000005B10                 mov     ecx, 4Eh ; 'N'
.text:0000000000005B15                 mov     dword ptr [rdi], 494D5452h
.text:0000000000005B1B                 mov     [rdi+4], cx
.text:0000000000005B1F                 jmp     short loc_5ADB
.text:0000000000005B21 ; ---------------------------------------------------------------------------
.text:0000000000005B21
.text:0000000000005B21 loc_5B21:                               ; CODE XREF: sig2str+63↑j
.text:0000000000005B21                                         ; sig2str+67↑j
.text:0000000000005B21                 mov     eax, 0FFFFFFFFh
.text:0000000000005B26                 jmp     loc_5A90
.text:0000000000005B26 ; } // starts at 5A50
.text:0000000000005B26 sig2str         endp
.text:0000000000005B26
.text:0000000000005B26 ; ---------------------------------------------------------------------------
.text:0000000000005B2B                 align 10h
.text:0000000000005B30
.text:0000000000005B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B30
.text:0000000000005B30
.text:0000000000005B30 ; __int64 __fastcall c_strtod(char *nptr, char **endptr)
.text:0000000000005B30                 public c_strtod
.text:0000000000005B30 c_strtod        proc near               ; CODE XREF: cl_strtod+81↑p
.text:0000000000005B30 ; __unwind {
.text:0000000000005B30                 push    rbp
.text:0000000000005B31                 push    rbx
.text:0000000000005B32                 mov     rbp, rdi
.text:0000000000005B35                 mov     rbx, rsi
.text:0000000000005B38                 sub     rsp, 8
.text:0000000000005B3C                 mov     rax, cs:c_locale_cache
.text:0000000000005B43                 test    rax, rax
.text:0000000000005B46                 jz      short loc_5B80
.text:0000000000005B48
.text:0000000000005B48 loc_5B48:                               ; CODE XREF: c_strtod+6A↓j
.text:0000000000005B48                 mov     rdx, cs:c_locale_cache ; loc
.text:0000000000005B4F                 test    rdx, rdx
.text:0000000000005B52                 jz      short loc_5B68
.text:0000000000005B54                 add     rsp, 8
.text:0000000000005B58                 mov     rsi, rbx        ; endptr
.text:0000000000005B5B                 mov     rdi, rbp        ; nptr
.text:0000000000005B5E                 pop     rbx
.text:0000000000005B5F                 pop     rbp
.text:0000000000005B60                 jmp     _strtod_l
.text:0000000000005B60 ; ---------------------------------------------------------------------------
.text:0000000000005B65                 align 8
.text:0000000000005B68
.text:0000000000005B68 loc_5B68:                               ; CODE XREF: c_strtod+22↑j
.text:0000000000005B68                 test    rbx, rbx
.text:0000000000005B6B                 pxor    xmm0, xmm0
.text:0000000000005B6F                 jz      short loc_5B78
.text:0000000000005B71                 pxor    xmm0, xmm0
.text:0000000000005B75                 mov     [rbx], rbp
.text:0000000000005B78
.text:0000000000005B78 loc_5B78:                               ; CODE XREF: c_strtod+3F↑j
.text:0000000000005B78                 add     rsp, 8
.text:0000000000005B7C                 pop     rbx
.text:0000000000005B7D                 pop     rbp
.text:0000000000005B7E                 retn
.text:0000000000005B7E ; ---------------------------------------------------------------------------
.text:0000000000005B7F                 align 20h
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: c_strtod+16↑j
.text:0000000000005B80                 lea     rsi, locale     ; "C"
.text:0000000000005B87                 xor     edx, edx        ; base
.text:0000000000005B89                 mov     edi, 1FBFh      ; category_mask
.text:0000000000005B8E                 call    _newlocale
.text:0000000000005B93                 mov     cs:c_locale_cache, rax
.text:0000000000005B9A                 jmp     short loc_5B48
.text:0000000000005B9A ; } // starts at 5B30
.text:0000000000005B9A c_strtod        endp
.text:0000000000005B9A
.text:0000000000005B9A ; ---------------------------------------------------------------------------
.text:0000000000005B9C                 align 20h
.text:0000000000005BA0
.text:0000000000005BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BA0
.text:0000000000005BA0 ; Attributes: info_from_lumina
.text:0000000000005BA0
.text:0000000000005BA0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005BA0                 public close_stream
.text:0000000000005BA0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005BA0                                         ; close_stdout+33↑p
.text:0000000000005BA0 ; __unwind {
.text:0000000000005BA0                 push    r12
.text:0000000000005BA2                 push    rbp
.text:0000000000005BA3                 mov     rbp, rdi
.text:0000000000005BA6                 push    rbx
.text:0000000000005BA7                 call    ___fpending
.text:0000000000005BAC                 mov     ebx, [rbp+0]
.text:0000000000005BAF                 mov     rdi, rbp        ; stream
.text:0000000000005BB2                 mov     r12, rax
.text:0000000000005BB5                 call    rpl_fclose
.text:0000000000005BBA                 and     ebx, 20h
.text:0000000000005BBD                 test    ebx, ebx
.text:0000000000005BBF                 jnz     short loc_5BD8
.text:0000000000005BC1                 test    eax, eax
.text:0000000000005BC3                 jz      short loc_5BCF
.text:0000000000005BC5                 test    r12, r12
.text:0000000000005BC8                 mov     eax, 0FFFFFFFFh
.text:0000000000005BCD                 jz      short loc_5C08
.text:0000000000005BCF
.text:0000000000005BCF loc_5BCF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005BCF                 pop     rbx
.text:0000000000005BD0                 pop     rbp
.text:0000000000005BD1                 pop     r12
.text:0000000000005BD3                 retn
.text:0000000000005BD3 ; ---------------------------------------------------------------------------
.text:0000000000005BD4                 align 8
.text:0000000000005BD8
.text:0000000000005BD8 loc_5BD8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005BD8                 test    eax, eax
.text:0000000000005BDA                 jnz     short loc_5BF8
.text:0000000000005BDC                 call    ___errno_location
.text:0000000000005BE1                 mov     dword ptr [rax], 0
.text:0000000000005BE7                 mov     eax, 0FFFFFFFFh
.text:0000000000005BEC                 pop     rbx
.text:0000000000005BED                 pop     rbp
.text:0000000000005BEE                 pop     r12
.text:0000000000005BF0                 retn
.text:0000000000005BF0 ; ---------------------------------------------------------------------------
.text:0000000000005BF1                 align 8
.text:0000000000005BF8
.text:0000000000005BF8 loc_5BF8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005BF8                 pop     rbx
.text:0000000000005BF9                 mov     eax, 0FFFFFFFFh
.text:0000000000005BFE                 pop     rbp
.text:0000000000005BFF                 pop     r12
.text:0000000000005C01                 retn
.text:0000000000005C01 ; ---------------------------------------------------------------------------
.text:0000000000005C02                 align 8
.text:0000000000005C08
.text:0000000000005C08 loc_5C08:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005C08                 call    ___errno_location
.text:0000000000005C0D                 cmp     dword ptr [rax], 9
.text:0000000000005C10                 pop     rbx
.text:0000000000005C11                 pop     rbp
.text:0000000000005C12                 pop     r12
.text:0000000000005C14                 setnz   al
.text:0000000000005C17                 movzx   eax, al
.text:0000000000005C1A                 neg     eax
.text:0000000000005C1C                 retn
.text:0000000000005C1C ; } // starts at 5BA0
.text:0000000000005C1C close_stream    endp
.text:0000000000005C1C
.text:0000000000005C1C ; ---------------------------------------------------------------------------
.text:0000000000005C1D                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20                 public hard_locale
.text:0000000000005C20 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 sub     rsp, 8
.text:0000000000005C24                 xor     esi, esi        ; locale
.text:0000000000005C26                 call    _setlocale
.text:0000000000005C2B                 mov     rdx, rax
.text:0000000000005C2E                 mov     eax, 1
.text:0000000000005C33                 test    rdx, rdx
.text:0000000000005C36                 jz      short loc_5C55
.text:0000000000005C38                 lea     rdi, locale     ; "C"
.text:0000000000005C3F                 mov     ecx, 2
.text:0000000000005C44                 mov     rsi, rdx
.text:0000000000005C47                 repe cmpsb
.text:0000000000005C49                 setnbe  cl
.text:0000000000005C4C                 sbb     cl, 0
.text:0000000000005C4F                 xor     eax, eax
.text:0000000000005C51                 test    cl, cl
.text:0000000000005C53                 jnz     short loc_5C60
.text:0000000000005C55
.text:0000000000005C55 loc_5C55:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005C55                 add     rsp, 8
.text:0000000000005C59                 retn
.text:0000000000005C59 ; ---------------------------------------------------------------------------
.text:0000000000005C5A                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005C60                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005C67                 mov     ecx, 6
.text:0000000000005C6C                 mov     rsi, rdx
.text:0000000000005C6F                 repe cmpsb
.text:0000000000005C71                 setnbe  al
.text:0000000000005C74                 sbb     al, 0
.text:0000000000005C76                 test    al, al
.text:0000000000005C78                 setnz   al
.text:0000000000005C7B                 add     rsp, 8
.text:0000000000005C7F                 retn
.text:0000000000005C7F ; } // starts at 5C20
.text:0000000000005C7F hard_locale     endp
.text:0000000000005C7F
.text:0000000000005C80
.text:0000000000005C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C80
.text:0000000000005C80
.text:0000000000005C80                 public locale_charset
.text:0000000000005C80 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005C80 ; __unwind {
.text:0000000000005C80                 sub     rsp, 8
.text:0000000000005C84                 mov     edi, 0Eh        ; item
.text:0000000000005C89                 call    _nl_langinfo
.text:0000000000005C8E                 test    rax, rax
.text:0000000000005C91                 jz      short loc_5CB0
.text:0000000000005C93                 cmp     byte ptr [rax], 0
.text:0000000000005C96                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005C9D                 cmovz   rax, rdx
.text:0000000000005CA1                 add     rsp, 8
.text:0000000000005CA5                 retn
.text:0000000000005CA5 ; ---------------------------------------------------------------------------
.text:0000000000005CA6                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 loc_5CB0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005CB0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005CB7                 add     rsp, 8
.text:0000000000005CBB                 retn
.text:0000000000005CBB ; } // starts at 5C80
.text:0000000000005CBB locale_charset  endp
.text:0000000000005CBB
.text:0000000000005CBB ; ---------------------------------------------------------------------------
.text:0000000000005CBC                 align 20h
.text:0000000000005CC0
.text:0000000000005CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CC0
.text:0000000000005CC0 ; Attributes: info_from_lumina
.text:0000000000005CC0
.text:0000000000005CC0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005CC0                 public rpl_fclose
.text:0000000000005CC0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005CC0 ; __unwind {
.text:0000000000005CC0                 push    r12
.text:0000000000005CC2                 push    rbp
.text:0000000000005CC3                 push    rbx
.text:0000000000005CC4                 mov     rbx, rdi
.text:0000000000005CC7                 call    _fileno
.text:0000000000005CCC                 test    eax, eax
.text:0000000000005CCE                 mov     rdi, rbx        ; fp
.text:0000000000005CD1                 js      short loc_5D27
.text:0000000000005CD3                 call    ___freading
.text:0000000000005CD8                 test    eax, eax
.text:0000000000005CDA                 jnz     short loc_5D08
.text:0000000000005CDC
.text:0000000000005CDC loc_5CDC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005CDC                 mov     rdi, rbx        ; stream
.text:0000000000005CDF                 call    rpl_fflush
.text:0000000000005CE4                 test    eax, eax
.text:0000000000005CE6                 jz      short loc_5D24
.text:0000000000005CE8                 call    ___errno_location
.text:0000000000005CED                 mov     r12d, [rax]
.text:0000000000005CF0                 mov     rdi, rbx        ; stream
.text:0000000000005CF3                 mov     rbp, rax
.text:0000000000005CF6                 call    _fclose
.text:0000000000005CFB                 test    r12d, r12d
.text:0000000000005CFE                 jnz     short loc_5D30
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005D00                 pop     rbx
.text:0000000000005D01                 pop     rbp
.text:0000000000005D02                 pop     r12
.text:0000000000005D04                 retn
.text:0000000000005D04 ; ---------------------------------------------------------------------------
.text:0000000000005D05                 align 8
.text:0000000000005D08
.text:0000000000005D08 loc_5D08:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005D08                 mov     rdi, rbx        ; stream
.text:0000000000005D0B                 call    _fileno
.text:0000000000005D10                 xor     esi, esi        ; offset
.text:0000000000005D12                 mov     edx, 1          ; whence
.text:0000000000005D17                 mov     edi, eax        ; fd
.text:0000000000005D19                 call    _lseek
.text:0000000000005D1E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005D22                 jnz     short loc_5CDC
.text:0000000000005D24
.text:0000000000005D24 loc_5D24:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005D24                 mov     rdi, rbx        ; stream
.text:0000000000005D27
.text:0000000000005D27 loc_5D27:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005D27                 pop     rbx
.text:0000000000005D28                 pop     rbp
.text:0000000000005D29                 pop     r12
.text:0000000000005D2B                 jmp     _fclose
.text:0000000000005D30 ; ---------------------------------------------------------------------------
.text:0000000000005D30
.text:0000000000005D30 loc_5D30:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005D30                 mov     [rbp+0], r12d
.text:0000000000005D34                 mov     eax, 0FFFFFFFFh
.text:0000000000005D39                 jmp     short loc_5D00
.text:0000000000005D39 ; } // starts at 5CC0
.text:0000000000005D39 rpl_fclose      endp
.text:0000000000005D39
.text:0000000000005D39 ; ---------------------------------------------------------------------------
.text:0000000000005D3B                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40 ; Attributes: info_from_lumina
.text:0000000000005D40
.text:0000000000005D40 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005D40                 public rpl_fflush
.text:0000000000005D40 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 test    rdi, rdi
.text:0000000000005D43                 push    rbx
.text:0000000000005D44                 mov     rbx, rdi
.text:0000000000005D47                 jz      short loc_5D5A
.text:0000000000005D49                 call    ___freading
.text:0000000000005D4E                 test    eax, eax
.text:0000000000005D50                 jz      short loc_5D5A
.text:0000000000005D52                 test    dword ptr [rbx], 100h
.text:0000000000005D58                 jnz     short loc_5D68
.text:0000000000005D5A
.text:0000000000005D5A loc_5D5A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005D5A                                         ; rpl_fflush+10↑j
.text:0000000000005D5A                 mov     rdi, rbx        ; stream
.text:0000000000005D5D                 pop     rbx
.text:0000000000005D5E                 jmp     _fflush
.text:0000000000005D5E ; ---------------------------------------------------------------------------
.text:0000000000005D63                 align 8
.text:0000000000005D68
.text:0000000000005D68 loc_5D68:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005D68                 mov     rdi, rbx
.text:0000000000005D6B                 mov     edx, 1
.text:0000000000005D70                 xor     esi, esi
.text:0000000000005D72                 call    rpl_fseeko
.text:0000000000005D77                 mov     rdi, rbx        ; stream
.text:0000000000005D7A                 pop     rbx
.text:0000000000005D7B                 jmp     _fflush
.text:0000000000005D7B ; } // starts at 5D40
.text:0000000000005D7B rpl_fflush      endp
.text:0000000000005D7B
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80 ; Attributes: info_from_lumina
.text:0000000000005D80
.text:0000000000005D80 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005D80                 public rpl_fseeko
.text:0000000000005D80 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 mov     rax, [rdi+8]
.text:0000000000005D84                 cmp     [rdi+10h], rax
.text:0000000000005D88                 jz      short loc_5D90
.text:0000000000005D8A
.text:0000000000005D8A loc_5D8A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000005D8A                                         ; rpl_fseeko+1F↓j
.text:0000000000005D8A                 jmp     _fseeko
.text:0000000000005D8A ; ---------------------------------------------------------------------------
.text:0000000000005D8F                 align 10h
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005D90                 mov     rax, [rdi+20h]
.text:0000000000005D94                 cmp     [rdi+28h], rax
.text:0000000000005D98                 jnz     short loc_5D8A
.text:0000000000005D9A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005D9F                 jnz     short loc_5D8A
.text:0000000000005DA1                 push    r12
.text:0000000000005DA3                 push    rbp
.text:0000000000005DA4                 mov     r12d, edx
.text:0000000000005DA7                 push    rbx
.text:0000000000005DA8                 mov     rbp, rsi
.text:0000000000005DAB                 mov     rbx, rdi
.text:0000000000005DAE                 call    _fileno
.text:0000000000005DB3                 mov     edx, r12d       ; whence
.text:0000000000005DB6                 mov     rsi, rbp        ; offset
.text:0000000000005DB9                 mov     edi, eax        ; fd
.text:0000000000005DBB                 call    _lseek
.text:0000000000005DC0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005DC4                 jz      short loc_5DD2
.text:0000000000005DC6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005DC9                 mov     [rbx+90h], rax
.text:0000000000005DD0                 xor     eax, eax
.text:0000000000005DD2
.text:0000000000005DD2 loc_5DD2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005DD2                 pop     rbx
.text:0000000000005DD3                 pop     rbp
.text:0000000000005DD4                 pop     r12
.text:0000000000005DD6                 retn
.text:0000000000005DD6 ; } // starts at 5D80
.text:0000000000005DD6 rpl_fseeko      endp
.text:0000000000005DD6
.text:0000000000005DD6 ; ---------------------------------------------------------------------------
.text:0000000000005DD7                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DE0
.text:0000000000005DE0 ; Attributes: info_from_lumina
.text:0000000000005DE0
.text:0000000000005DE0 ; void _libc_csu_init(void)
.text:0000000000005DE0                 public __libc_csu_init
.text:0000000000005DE0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000005DE0 ; __unwind {
.text:0000000000005DE0                 push    r15
.text:0000000000005DE2                 push    r14
.text:0000000000005DE4                 mov     r15, rdx
.text:0000000000005DE7                 push    r13
.text:0000000000005DE9                 push    r12
.text:0000000000005DEB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000005DF2                 push    rbp
.text:0000000000005DF3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000005DFA                 push    rbx
.text:0000000000005DFB                 mov     r13d, edi
.text:0000000000005DFE                 mov     r14, rsi
.text:0000000000005E01                 sub     rbp, r12
.text:0000000000005E04                 sub     rsp, 8
.text:0000000000005E08                 sar     rbp, 3
.text:0000000000005E0C                 call    _init_proc
.text:0000000000005E11                 test    rbp, rbp
.text:0000000000005E14                 jz      short loc_5E36
.text:0000000000005E16                 xor     ebx, ebx
.text:0000000000005E18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005E20
.text:0000000000005E20 loc_5E20:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005E20                 mov     rdx, r15
.text:0000000000005E23                 mov     rsi, r14
.text:0000000000005E26                 mov     edi, r13d
.text:0000000000005E29                 call    ds:(__frame_dummy_init_array_entry - 208A30h)[r12+rbx*8]
.text:0000000000005E2D                 add     rbx, 1
.text:0000000000005E31                 cmp     rbp, rbx
.text:0000000000005E34                 jnz     short loc_5E20
.text:0000000000005E36
.text:0000000000005E36 loc_5E36:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005E36                 add     rsp, 8
.text:0000000000005E3A                 pop     rbx
.text:0000000000005E3B                 pop     rbp
.text:0000000000005E3C                 pop     r12
.text:0000000000005E3E                 pop     r13
.text:0000000000005E40                 pop     r14
.text:0000000000005E42                 pop     r15
.text:0000000000005E44                 retn
.text:0000000000005E44 ; } // starts at 5DE0
.text:0000000000005E44 __libc_csu_init endp
.text:0000000000005E44
.text:0000000000005E44 ; ---------------------------------------------------------------------------
.text:0000000000005E45                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50
.text:0000000000005E50 ; void _libc_csu_fini(void)
.text:0000000000005E50                 public __libc_csu_fini
.text:0000000000005E50 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 rep retn
.text:0000000000005E50 ; } // starts at 5E50
.text:0000000000005E50 __libc_csu_fini endp
.text:0000000000005E50
.text:0000000000005E50 ; ---------------------------------------------------------------------------
.text:0000000000005E52                 align 20h
.text:0000000000005E60
.text:0000000000005E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E60
.text:0000000000005E60
.text:0000000000005E60 atexit          proc near               ; CODE XREF: main+76↑p
.text:0000000000005E60 ; __unwind {
.text:0000000000005E60                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005E67                 xor     esi, esi        ; obj
.text:0000000000005E69                 jmp     ___cxa_atexit
.text:0000000000005E69 ; } // starts at 5E60
.text:0000000000005E69 atexit          endp
.text:0000000000005E69
.text:0000000000005E69 _text           ends
.text:0000000000005E69
LOAD:0000000000005E6E ; ===========================================================================
LOAD:0000000000005E6E
LOAD:0000000000005E6E ; Segment type: Pure code
LOAD:0000000000005E6E ; Segment permissions: Read/Execute
LOAD:0000000000005E6E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005E6E                 assume cs:LOAD
LOAD:0000000000005E6E                 ;org 5E6Eh
LOAD:0000000000005E6E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005E6E                 align 10h
LOAD:0000000000005E6E LOAD            ends
LOAD:0000000000005E6E
.fini:0000000000005E70 ; ===========================================================================
.fini:0000000000005E70
.fini:0000000000005E70 ; Segment type: Pure code
.fini:0000000000005E70 ; Segment permissions: Read/Execute
.fini:0000000000005E70 _fini           segment dword public 'CODE' use64
.fini:0000000000005E70                 assume cs:_fini
.fini:0000000000005E70                 ;org 5E70h
.fini:0000000000005E70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005E70
.fini:0000000000005E70 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005E70
.fini:0000000000005E70
.fini:0000000000005E70                 public _term_proc
.fini:0000000000005E70 _term_proc      proc near
.fini:0000000000005E70                 sub     rsp, 8          ; _fini
.fini:0000000000005E74                 add     rsp, 8
.fini:0000000000005E78                 retn
.fini:0000000000005E78 _term_proc      endp
.fini:0000000000005E78
.fini:0000000000005E78 _fini           ends
.fini:0000000000005E78
LOAD:0000000000005E79 ; ===========================================================================
LOAD:0000000000005E79
LOAD:0000000000005E79 ; Segment type: Pure code
LOAD:0000000000005E79 ; Segment permissions: Read/Execute
LOAD:0000000000005E79 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005E79                 assume cs:LOAD
LOAD:0000000000005E79                 ;org 5E79h
LOAD:0000000000005E79                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005E79                 align 20h
LOAD:0000000000005E79 LOAD            ends
LOAD:0000000000005E79
.rodata:0000000000005E80 ; ===========================================================================
.rodata:0000000000005E80
.rodata:0000000000005E80 ; Segment type: Pure data
.rodata:0000000000005E80 ; Segment permissions: Read
.rodata:0000000000005E80 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005E80                 assume cs:_rodata
.rodata:0000000000005E80                 ;org 5E80h
.rodata:0000000000005E80                 public _IO_stdin_used
.rodata:0000000000005E80 _IO_stdin_used  db    1
.rodata:0000000000005E81                 db    0
.rodata:0000000000005E82                 db    2
.rodata:0000000000005E83                 db    0
.rodata:0000000000005E84 ; const char aWarningTimerSe[]
.rodata:0000000000005E84 aWarningTimerSe db 'warning: timer_settime',0
.rodata:0000000000005E84                                         ; DATA XREF: settimeout:loc_2590↑o
.rodata:0000000000005E9B ; const char aWarningTimerCr[]
.rodata:0000000000005E9B aWarningTimerCr db 'warning: timer_create',0
.rodata:0000000000005E9B                                         ; DATA XREF: settimeout:loc_2560↑o
.rodata:0000000000005EB1 ; const char aWarningSigproc[]
.rodata:0000000000005EB1 aWarningSigproc db 'warning: sigprocmask',0
.rodata:0000000000005EB1                                         ; DATA XREF: main:loc_222D↑o
.rodata:0000000000005EB1                                         ; unblock_signal+46↑o
.rodata:0000000000005EC6 aD              db '%d',0               ; DATA XREF: cleanup:loc_2810↑o
.rodata:0000000000005EC9 aTimeout        db 'timeout',0          ; DATA XREF: main+11B↑o
.rodata:0000000000005EC9                                         ; usage+1A3↑o ...
.rodata:0000000000005ED1 asc_5ED1        db '[',0                ; DATA XREF: usage+1AF↑o
.rodata:0000000000005ED3 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1D6↑o
.rodata:0000000000005EE3 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000005EE3                                         ; DATA XREF: usage+206↑o
.rodata:0000000000005EE3                                         ; usage+2FC↑o ...
.rodata:0000000000005EF9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+217↑o
.rodata:0000000000005F03 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+223↑o
.rodata:0000000000005F12 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1B6↑o
.rodata:0000000000005F1C aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1E2↑o
.rodata:0000000000005F26 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1FA↑o
.rodata:0000000000005F30 ; const char aSOnlineHelpS[]
.rodata:0000000000005F30 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+26A↑o
.rodata:0000000000005F30                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000005F47 unk_5F47        db  47h ; G             ; DATA XREF: main+114↑o
.rodata:0000000000005F47                                         ; usage+286↑o ...
.rodata:0000000000005F48                 db  4Eh ; N
.rodata:0000000000005F49                 db  55h ; U
.rodata:0000000000005F4A                 db  20h
.rodata:0000000000005F4B ; const char domainname[]
.rodata:0000000000005F4B domainname      db 'coreutils',0        ; DATA XREF: main+4D↑o
.rodata:0000000000005F4B                                         ; main+59↑o ...
.rodata:0000000000005F55 ; const char s2[]
.rodata:0000000000005F55 s2              db 'en_',0              ; DATA XREF: usage+2AD↑o
.rodata:0000000000005F55                                         ; usage+36E↑o
.rodata:0000000000005F59 ; const char aFullDocumentat[]
.rodata:0000000000005F59 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005F59                                         ; DATA XREF: usage:loc_2B19↑o
.rodata:0000000000005F59                                         ; usage:loc_2BD6↑o
.rodata:0000000000005F74 ; const char aInvalidTimeInt[]
.rodata:0000000000005F74 aInvalidTimeInt db 'invalid time interval %s',0
.rodata:0000000000005F74                                         ; DATA XREF: parse_duration+BA↑o
.rodata:0000000000005F8D ; const char dirname[]
.rodata:0000000000005F8D dirname         db '/usr/local/share/locale',0
.rodata:0000000000005F8D                                         ; DATA XREF: main+46↑o
.rodata:0000000000005FA5 aPadraigBrady   db 'Padraig Brady',0    ; DATA XREF: main+10D↑o
.rodata:0000000000005FB3 ; const char shortopts[]
.rodata:0000000000005FB3 shortopts       db '+k:s:v',0           ; DATA XREF: main+87↑o
.rodata:0000000000005FBA ; const char aForkSystemCall[]
.rodata:0000000000005FBA aForkSystemCall db 'fork system call failed',0
.rodata:0000000000005FBA                                         ; DATA XREF: main:loc_225B↑o
.rodata:0000000000005FD2 ; const char msgid[]
.rodata:0000000000005FD2 msgid           db 'failed to run command %s',0
.rodata:0000000000005FD2                                         ; DATA XREF: main+32B↑o
.rodata:0000000000005FEB ; const char aErrorWaitingFo[]
.rodata:0000000000005FEB aErrorWaitingFo db 'error waiting for command',0
.rodata:0000000000005FEB                                         ; DATA XREF: main:loc_228E↑o
.rodata:0000000000006005 aKillAfter      db 'kill-after',0       ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000006010 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:0000000000208A80↓o
.rodata:0000000000006018 aForeground     db 'foreground',0       ; DATA XREF: .data.rel.ro:0000000000208AA0↓o
.rodata:0000000000006023 aPreserveStatus_0 db 'preserve-status',0
.rodata:0000000000006023                                         ; DATA XREF: .data.rel.ro:0000000000208AC0↓o
.rodata:0000000000006033 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208AE0↓o
.rodata:0000000000006038 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208B00↓o
.rodata:0000000000006040 ; const char aSendingSignalS[]
.rodata:0000000000006040 aSendingSignalS db 'sending signal %s to command %s',0
.rodata:0000000000006040                                         ; DATA XREF: cleanup+F3↑o
.rodata:0000000000006060 ; const char aTrySHelpForMor[]
.rodata:0000000000006060 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000006060                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000006087                 align 8
.rodata:0000000000006088 ; const char aUsageSOptionDu[]
.rodata:0000000000006088 aUsageSOptionDu db 'Usage: %s [OPTION] DURATION COMMAND [ARG]...',0Ah
.rodata:0000000000006088                                         ; DATA XREF: usage:loc_28AD↑o
.rodata:0000000000006088                 db '  or:  %s [OPTION]',0Ah,0
.rodata:00000000000060C9                 align 10h
.rodata:00000000000060D0 ; const char aStartCommandAn[]
.rodata:00000000000060D0 aStartCommandAn db 'Start COMMAND, and kill it if still running after DURATION.',0Ah,0
.rodata:00000000000060D0                                         ; DATA XREF: usage+87↑o
.rodata:000000000000610D                 align 10h
.rodata:0000000000006110 ; const char aMandatoryArgum[]
.rodata:0000000000006110 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AC↑o
.rodata:0000000000006110                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000006110                 db 'ns too.',0Ah,0
.rodata:000000000000615B                 align 20h
.rodata:0000000000006160 ; const char aPreserveStatus[]
.rodata:0000000000006160 aPreserveStatus db '      --preserve-status',0Ah
.rodata:0000000000006160                                         ; DATA XREF: usage+D1↑o
.rodata:0000000000006160                 db '                 exit with the same status as COMMAND, even when '
.rodata:0000000000006160                 db 'the',0Ah
.rodata:0000000000006160                 db '                   command times out',0Ah
.rodata:0000000000006160                 db '      --foreground',0Ah
.rodata:0000000000006160                 db '                 when not running timeout directly from a shell p'
.rodata:0000000000006160                 db 'rompt,',0Ah
.rodata:0000000000006160                 db '                   allow COMMAND to read from the TTY and get TTY'
.rodata:0000000000006160                 db ' signals;',0Ah
.rodata:0000000000006160                 db '                   in this mode, children of COMMAND will not be '
.rodata:0000000000006160                 db 'timed out',0Ah
.rodata:0000000000006160                 db '  -k, --kill-after=DURATION',0Ah
.rodata:0000000000006160                 db '                 also send a KILL signal if COMMAND is still runn'
.rodata:0000000000006160                 db 'ing',0Ah
.rodata:0000000000006160                 db '                   this long after the initial signal was sent',0Ah
.rodata:0000000000006160                 db '  -s, --signal=SIGNAL',0Ah
.rodata:0000000000006160                 db '                 specify the signal to be sent on timeout;',0Ah
.rodata:0000000000006160                 db '                   SIGNAL may be a name like ',27h,'HUP',27h,' or'
.rodata:0000000000006160                 db ' a number;',0Ah
.rodata:0000000000006160                 db '                   see ',27h,'kill -l',27h,' for a list of signal'
.rodata:0000000000006160                 db 's',0Ah,0
.rodata:000000000000643C                 align 20h
.rodata:0000000000006440 ; const char aVVerboseDiagno[]
.rodata:0000000000006440 aVVerboseDiagno db '  -v, --verbose  diagnose to stderr any signal sent upon timeout',0Ah
.rodata:0000000000006440                                         ; DATA XREF: usage+F6↑o
.rodata:0000000000006440                 db 0
.rodata:0000000000006482                 align 8
.rodata:0000000000006488 ; const char aHelpDisplayThi[]
.rodata:0000000000006488 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006488                                         ; DATA XREF: usage+11B↑o
.rodata:00000000000064B5                 align 8
.rodata:00000000000064B8 ; const char aVersionOutputV[]
.rodata:00000000000064B8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000064B8                                         ; DATA XREF: usage+140↑o
.rodata:00000000000064EE                 align 10h
.rodata:00000000000064F0 ; const char aDurationIsAFlo[]
.rodata:00000000000064F0 aDurationIsAFlo db 0Ah                  ; DATA XREF: usage+165↑o
.rodata:00000000000064F0                 db 'DURATION is a floating point number with an optional suffix:',0Ah
.rodata:00000000000064F0                 db 27h,'s',27h,' for seconds (the default), ',27h,'m',27h,' for minut'
.rodata:00000000000064F0                 db 'es, ',27h,'h',27h,' for hours or ',27h,'d',27h,' for days.',0Ah
.rodata:00000000000064F0                 db 'A duration of 0 disables the associated timeout.',0Ah,0
.rodata:00000000000065AF                 align 10h
.rodata:00000000000065B0 ; const char aIfTheCommandTi[]
.rodata:00000000000065B0 aIfTheCommandTi db 0Ah                  ; DATA XREF: usage+18A↑o
.rodata:00000000000065B0                 db 'If the command times out, and --preserve-status is not set, then '
.rodata:00000000000065B0                 db 'exit with',0Ah
.rodata:00000000000065B0                 db 'status 124.  Otherwise, exit with the status of COMMAND.  If no s'
.rodata:00000000000065B0                 db 'ignal',0Ah
.rodata:00000000000065B0                 db 'is specified, send the TERM signal upon timeout.  The TERM signal'
.rodata:00000000000065B0                 db ' kills',0Ah
.rodata:00000000000065B0                 db 'any process that does not block or catch that signal.  It may be '
.rodata:00000000000065B0                 db 'necessary',0Ah
.rodata:00000000000065B0                 db 'to use the KILL (9) signal, since this signal cannot be caught, i'
.rodata:00000000000065B0                 db 'n which',0Ah
.rodata:00000000000065B0                 db 'case the exit status is 128+9 rather than 124.',0Ah,0
.rodata:000000000000674F                 align 10h
.rodata:0000000000006750 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006750                                         ; DATA XREF: usage+27F↑o
.rodata:0000000000006750                                         ; usage+2E3↑o ...
.rodata:0000000000006778 ; const char aReportAnyTrans[]
.rodata:0000000000006778 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006778                                         ; DATA XREF: usage+3D7↑o
.rodata:0000000000006778                 db 'am/>',0Ah,0
.rodata:00000000000067BF                 align 20h
.rodata:00000000000067C0 ; const char aOrAvailableLoc[]
.rodata:00000000000067C0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000067C0                                         ; DATA XREF: usage:loc_2B5E↑o
.rodata:00000000000067F3                 align 8
.rodata:00000000000067F8 ; const char aTheMonitoredCo[]
.rodata:00000000000067F8 aTheMonitoredCo db 'the monitored command dumped core',0
.rodata:00000000000067F8                                         ; DATA XREF: main+45E↑o
.rodata:000000000000681A                 align 20h
.rodata:0000000000006820 ; const char aWarningDisabli[]
.rodata:0000000000006820 aWarningDisabli db 'warning: disabling core dumps failed',0
.rodata:0000000000006820                                         ; DATA XREF: main:loc_2322↑o
.rodata:0000000000006845                 align 8
.rodata:0000000000006848 ; const char aUnknownStatusF[]
.rodata:0000000000006848 aUnknownStatusF db 'unknown status from command (%d)',0
.rodata:0000000000006848                                         ; DATA XREF: main:loc_22F2↑o
.rodata:0000000000006869                 align 10h
.rodata:0000000000006870 qword_6870      dq 41EFFFFFFFE00000h    ; DATA XREF: settimeout+6C↑r
.rodata:0000000000006878 qword_6878      dq 0                    ; DATA XREF: cleanup+45↑r
.rodata:0000000000006878                                         ; parse_duration+42↑r ...
.rodata:0000000000006880 qword_6880      dq 404E000000000000h    ; DATA XREF: parse_duration+A4↑r
.rodata:0000000000006888 qword_6888      dq 40AC200000000000h    ; DATA XREF: parse_duration:loc_2CE0↑r
.rodata:0000000000006890 qword_6890      dq 40F5180000000000h    ; DATA XREF: parse_duration+68↑r
.rodata:0000000000006898 ; const char s[]
.rodata:0000000000006898 s               db 'abcdefghijklmnopqrstuvwxyz',0
.rodata:0000000000006898                                         ; DATA XREF: operand2sig+CF↑o
.rodata:00000000000068B3 ; const char aSInvalidSignal[]
.rodata:00000000000068B3 aSInvalidSignal db '%s: invalid signal',0
.rodata:00000000000068B3                                         ; DATA XREF: operand2sig+88↑o
.rodata:00000000000068B3                                         ; .data.rel.ro:0000000000208A60↓o
.rodata:00000000000068C6 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000068CB ; const char aWriteError[]
.rodata:00000000000068CB aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3053↑o
.rodata:00000000000068D7 ; const char format[]
.rodata:00000000000068D7 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000068D7                                         ; close_stdout+8F↑o ...
.rodata:00000000000068DE                 align 20h
.rodata:00000000000068E0 qword_68E0      dq 0C3E0000000000000h   ; DATA XREF: dtotimespec↑r
.rodata:00000000000068E8 qword_68E8      dq 43E0000000000000h    ; DATA XREF: dtotimespec+E↑r
.rodata:00000000000068F0 qword_68F0      dq 41CDCD6500000000h    ; DATA XREF: dtotimespec+34↑r
.rodata:00000000000068F8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000068F8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000006930 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000006938 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000693C unk_693C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000693D                 db  80h
.rodata:000000000000693E                 db  98h
.rodata:000000000000693F                 db    0
.rodata:0000000000006940 unk_6940        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000006941                 db  80h
.rodata:0000000000006942                 db  99h
.rodata:0000000000006943                 db    0
.rodata:0000000000006944 unk_6944        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000006945                 db    7
.rodata:0000000000006946                 db  65h ; e
.rodata:0000000000006947                 db    0
.rodata:0000000000006948 unk_6948        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000006949                 db 0AFh
.rodata:000000000000694A                 db    0
.rodata:000000000000694B unk_694B        db  22h ; "             ; DATA XREF: gettext_quote:loc_3240↑o
.rodata:000000000000694B                                         ; quotearg_buffer_restyled:loc_3FFB↑o ...
.rodata:000000000000694C                 db    0
.rodata:000000000000694D ; const char asc_694D[2]
.rodata:000000000000694D asc_694D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000694D                                         ; quotearg_buffer_restyled:loc_33C3↑o ...
.rodata:000000000000694F ; const char asc_694F[2]
.rodata:000000000000694F asc_694F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000694F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000006951 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000006959 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208B48↓o
.rodata:000000000000695F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208B50↓o
.rodata:000000000000696C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208B58↓o
.rodata:000000000000696C                                         ; .data.rel.ro:0000000000208B78↓o
.rodata:0000000000006979 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000006979                                         ; DATA XREF: .data.rel.ro:0000000000208B60↓o
.rodata:000000000000698D aC              db 'c',0                ; DATA XREF: .data.rel.ro:0000000000208B68↓o
.rodata:000000000000698F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208B70↓o
.rodata:0000000000006997 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208B88↓o
.rodata:000000000000699F                 align 20h
.rodata:00000000000069A0 jpt_33A1        dd offset loc_414A - 69A0h
.rodata:00000000000069A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000069A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000069A0                 dd offset loc_33A3 - 69A0h ; jump table for switch statement
.rodata:00000000000069A0                 dd offset loc_4378 - 69A0h
.rodata:00000000000069A0                 dd offset loc_4184 - 69A0h
.rodata:00000000000069A0                 dd offset loc_3F74 - 69A0h
.rodata:00000000000069A0                 dd offset loc_3FD0 - 69A0h
.rodata:00000000000069A0                 dd offset loc_4025 - 69A0h
.rodata:00000000000069A0                 dd offset loc_406A - 69A0h
.rodata:00000000000069A0                 dd offset loc_40A4 - 69A0h
.rodata:00000000000069A0                 dd offset loc_40A4 - 69A0h
.rodata:00000000000069A0                 dd offset loc_40A4 - 69A0h
.rodata:00000000000069CC jpt_34FE        dd offset loc_3720 - 69CCh, offset def_34FE - 69CCh, offset def_34FE - 69CCh
.rodata:00000000000069CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000069CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset def_34FE - 69CCh, offset def_34FE - 69CCh ; jump table for switch statement
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset loc_3760 - 69CCh, offset loc_3668 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3628 - 69CCh, offset loc_37F0 - 69CCh, offset loc_37E0 - 69CCh
.rodata:00000000000069CC                 dd offset loc_37D0 - 69CCh, offset loc_37C0 - 69CCh, offset def_34FE - 69CCh
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset def_34FE - 69CCh, offset def_34FE - 69CCh
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset def_34FE - 69CCh, offset def_34FE - 69CCh
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset def_34FE - 69CCh, offset def_34FE - 69CCh
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset def_34FE - 69CCh, offset def_34FE - 69CCh
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset def_34FE - 69CCh, offset def_34FE - 69CCh
.rodata:00000000000069CC                 dd offset def_34FE - 69CCh, offset def_34FE - 69CCh, offset loc_37B0 - 69CCh
.rodata:00000000000069CC                 dd offset loc_37A0 - 69CCh, offset loc_37A0 - 69CCh, offset loc_3770 - 69CCh
.rodata:00000000000069CC                 dd offset loc_37A0 - 69CCh, offset loc_3748 - 69CCh, offset loc_37A0 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3603 - 69CCh, offset loc_37A0 - 69CCh, offset loc_37A0 - 69CCh
.rodata:00000000000069CC                 dd offset loc_37A0 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_37A0 - 69CCh
.rodata:00000000000069CC                 dd offset loc_37A0 - 69CCh, offset loc_37A0 - 69CCh, offset loc_37A0 - 69CCh
.rodata:00000000000069CC                 dd offset loc_35D3 - 69CCh, offset def_34FE - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_37A0 - 69CCh, offset loc_3678 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_37A0 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_37A0 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3748 - 69CCh, offset loc_3748 - 69CCh, offset loc_3748 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3503 - 69CCh, offset loc_37A0 - 69CCh, offset loc_3503 - 69CCh
.rodata:00000000000069CC                 dd offset loc_3770 - 69CCh
.rodata:0000000000006BC8 jpt_388A        dd offset loc_38F0 - 6BC8h, offset def_388A - 6BC8h, offset def_388A - 6BC8h
.rodata:0000000000006BC8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006BC8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset def_388A - 6BC8h, offset def_388A - 6BC8h ; jump table for switch statement
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset loc_38E0 - 6BC8h, offset loc_3A30 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3A18 - 6BC8h, offset loc_38C8 - 6BC8h, offset loc_3A08 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_38B0 - 6BC8h, offset loc_39F0 - 6BC8h, offset def_388A - 6BC8h
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset def_388A - 6BC8h, offset def_388A - 6BC8h
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset def_388A - 6BC8h, offset def_388A - 6BC8h
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset def_388A - 6BC8h, offset def_388A - 6BC8h
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset def_388A - 6BC8h, offset def_388A - 6BC8h
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset def_388A - 6BC8h, offset def_388A - 6BC8h
.rodata:0000000000006BC8                 dd offset def_388A - 6BC8h, offset def_388A - 6BC8h, offset loc_39D8 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_39C0 - 6BC8h, offset loc_39C0 - 6BC8h, offset loc_39A8 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_39C0 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_39C0 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3600 - 6BC8h, offset loc_39C0 - 6BC8h, offset loc_39C0 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_39C0 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_39C0 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_39C0 - 6BC8h, offset loc_39C0 - 6BC8h, offset loc_39C0 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_35D0 - 6BC8h, offset def_388A - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_39C0 - 6BC8h, offset loc_3890 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_39C0 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_39C0 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h, offset loc_3990 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_3500 - 6BC8h, offset loc_39C0 - 6BC8h, offset loc_3500 - 6BC8h
.rodata:0000000000006BC8                 dd offset loc_39A8 - 6BC8h
.rodata:0000000000006DC4                 align 20h
.rodata:0000000000006DE0                 public quoting_style_vals
.rodata:0000000000006DE0 quoting_style_vals db    0
.rodata:0000000000006DE1                 db    0
.rodata:0000000000006DE2                 db    0
.rodata:0000000000006DE3                 db    0
.rodata:0000000000006DE4                 db    1
.rodata:0000000000006DE5                 db    0
.rodata:0000000000006DE6                 db    0
.rodata:0000000000006DE7                 db    0
.rodata:0000000000006DE8                 db    2
.rodata:0000000000006DE9                 db    0
.rodata:0000000000006DEA                 db    0
.rodata:0000000000006DEB                 db    0
.rodata:0000000000006DEC                 db    3
.rodata:0000000000006DED                 db    0
.rodata:0000000000006DEE                 db    0
.rodata:0000000000006DEF                 db    0
.rodata:0000000000006DF0                 db    4
.rodata:0000000000006DF1                 db    0
.rodata:0000000000006DF2                 db    0
.rodata:0000000000006DF3                 db    0
.rodata:0000000000006DF4                 db    5
.rodata:0000000000006DF5                 db    0
.rodata:0000000000006DF6                 db    0
.rodata:0000000000006DF7                 db    0
.rodata:0000000000006DF8                 db    6
.rodata:0000000000006DF9                 db    0
.rodata:0000000000006DFA                 db    0
.rodata:0000000000006DFB                 db    0
.rodata:0000000000006DFC                 db    7
.rodata:0000000000006DFD                 db    0
.rodata:0000000000006DFE                 db    0
.rodata:0000000000006DFF                 db    0
.rodata:0000000000006E00                 db    8
.rodata:0000000000006E01                 db    0
.rodata:0000000000006E02                 db    0
.rodata:0000000000006E03                 db    0
.rodata:0000000000006E04                 db    9
.rodata:0000000000006E05                 db    0
.rodata:0000000000006E06                 db    0
.rodata:0000000000006E07                 db    0
.rodata:0000000000006E08 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006E14 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000006E1B ; const char aC_0[]
.rodata:0000000000006E1B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4EEC↑o
.rodata:0000000000006E1F ; const char aWrittenByS[]
.rodata:0000000000006E1F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000006E1F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000006E2F ; const char aWrittenBySAndS[]
.rodata:0000000000006E2F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000006E2F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006E46 ; const char aWrittenBySSAnd[]
.rodata:0000000000006E46 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006E46                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006E62 ; const char aReportBugsToS[]
.rodata:0000000000006E62 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006E62                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006E77 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006E77                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000006E8D ; const char aSHomePageS[]
.rodata:0000000000006E8D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000006E8D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006EA1                 align 8
.rodata:0000000000006EA8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006EA8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006EA8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006EA8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006EA8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006EA8                 db '.',0Ah
.rodata:0000000000006EA8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006EA8                 db 0Ah,0
.rodata:0000000000006F74                 align 8
.rodata:0000000000006F78 ; const char aWrittenBySSSAn[]
.rodata:0000000000006F78 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006F78                                         ; DATA XREF: version_etc_arn:loc_5140↑o
.rodata:0000000000006F78                 db 'and %s.',0Ah,0
.rodata:0000000000006F98 ; const char aWrittenBySSSSA[]
.rodata:0000000000006F98 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006F98                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006F98                 db '%s, and %s.',0Ah,0
.rodata:0000000000006FBC                 align 20h
.rodata:0000000000006FC0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000006FC0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006FC0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000006FC0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000006FE8 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000006FE8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006FE8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000006FE8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007014                 align 8
.rodata:0000000000007018 ; const char aWrittenBySSSSS[]
.rodata:0000000000007018 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007018                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007018                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007018                 db 'and %s.',0Ah,0
.rodata:0000000000007048 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007048 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007048                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007048                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007048                 db '%s, and %s.',0Ah,0
.rodata:000000000000707C                 align 20h
.rodata:0000000000007080 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007080                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000007080                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007080                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000070BC                 align 20h
.rodata:00000000000070C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000070C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000070C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000070C0                 db 0
.rodata:0000000000007101                 align 8
.rodata:0000000000007108 jpt_4F54        dd offset loc_4FD6 - 7108h
.rodata:0000000000007108                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000007108                                         ; version_etc_arn+9D↑r
.rodata:0000000000007108                 dd offset loc_5068 - 7108h ; jump table for switch statement
.rodata:0000000000007108                 dd offset loc_50A8 - 7108h
.rodata:0000000000007108                 dd offset loc_50F0 - 7108h
.rodata:0000000000007108                 dd offset loc_5140 - 7108h
.rodata:0000000000007108                 dd offset loc_5198 - 7108h
.rodata:0000000000007108                 dd offset loc_51C8 - 7108h
.rodata:0000000000007108                 dd offset loc_5230 - 7108h
.rodata:0000000000007108                 dd offset loc_4F60 - 7108h
.rodata:0000000000007108                 dd offset loc_5010 - 7108h
.rodata:0000000000007130                 align 20h
.rodata:0000000000007140                 public version_etc_copyright
.rodata:0000000000007140 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007140                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000716F ; const char aMemoryExhauste[]
.rodata:000000000000716F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007180 aRtmin          db 'RTMIN',0            ; DATA XREF: str2sig+D2↑o
.rodata:0000000000007186 aRtmax          db 'RTMAX',0            ; DATA XREF: str2sig+F0↑o
.rodata:000000000000718C aD_0            db '%+d',0              ; DATA XREF: sig2str+91↑o
.rodata:0000000000007190 ; const char locale[]
.rodata:0000000000007190 locale          db 'C',0                ; DATA XREF: c_strtod:loc_5B80↑o
.rodata:0000000000007190                                         ; hard_locale+18↑o
.rodata:0000000000007192 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5C60↑o
.rodata:0000000000007198 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007198                                         ; locale_charset:loc_5CB0↑o
.rodata:0000000000007198 _rodata         ends
.rodata:0000000000007198
LOAD:000000000000719E ; ===========================================================================
LOAD:000000000000719E
LOAD:000000000000719E ; Segment type: Pure code
LOAD:000000000000719E ; Segment permissions: Read/Execute
LOAD:000000000000719E LOAD            segment byte public 'CODE' use64
LOAD:000000000000719E                 assume cs:LOAD
LOAD:000000000000719E                 ;org 719Eh
LOAD:000000000000719E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000719E                 align 20h
LOAD:000000000000719E LOAD            ends
LOAD:000000000000719E
.eh_frame_hdr:00000000000071A0 ; ===========================================================================
.eh_frame_hdr:00000000000071A0
.eh_frame_hdr:00000000000071A0 ; Segment type: Pure data
.eh_frame_hdr:00000000000071A0 ; Segment permissions: Read
.eh_frame_hdr:00000000000071A0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000071A0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000071A0                 ;org 71A0h
.eh_frame_hdr:00000000000071A0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000071A1                 db  1Bh
.eh_frame_hdr:00000000000071A2                 db    3
.eh_frame_hdr:00000000000071A3                 db  3Bh ; ;
.eh_frame_hdr:00000000000071A4                 db  9Ch
.eh_frame_hdr:00000000000071A5                 db    2
.eh_frame_hdr:00000000000071A6                 db    0
.eh_frame_hdr:00000000000071A7                 db    0
.eh_frame_hdr:00000000000071A8                 db  52h ; R
.eh_frame_hdr:00000000000071A9                 db    0
.eh_frame_hdr:00000000000071AA                 db    0
.eh_frame_hdr:00000000000071AB                 db    0
.eh_frame_hdr:00000000000071AC                 db  70h ; p
.eh_frame_hdr:00000000000071AD                 db 0A7h
.eh_frame_hdr:00000000000071AE                 db 0FFh
.eh_frame_hdr:00000000000071AF                 db 0FFh
.eh_frame_hdr:00000000000071B0                 db 0E8h
.eh_frame_hdr:00000000000071B1                 db    2
.eh_frame_hdr:00000000000071B2                 db    0
.eh_frame_hdr:00000000000071B3                 db    0
.eh_frame_hdr:00000000000071B4                 db 0B0h
.eh_frame_hdr:00000000000071B5                 db 0ABh
.eh_frame_hdr:00000000000071B6                 db 0FFh
.eh_frame_hdr:00000000000071B7                 db 0FFh
.eh_frame_hdr:00000000000071B8                 db  10h
.eh_frame_hdr:00000000000071B9                 db    3
.eh_frame_hdr:00000000000071BA                 db    0
.eh_frame_hdr:00000000000071BB                 db    0
.eh_frame_hdr:00000000000071BC                 db 0C0h
.eh_frame_hdr:00000000000071BD                 db 0ABh
.eh_frame_hdr:00000000000071BE                 db 0FFh
.eh_frame_hdr:00000000000071BF                 db 0FFh
.eh_frame_hdr:00000000000071C0                 db  10h
.eh_frame_hdr:00000000000071C1                 db    4
.eh_frame_hdr:00000000000071C2                 db    0
.eh_frame_hdr:00000000000071C3                 db    0
.eh_frame_hdr:00000000000071C4                 db 0C0h
.eh_frame_hdr:00000000000071C5                 db 0B1h
.eh_frame_hdr:00000000000071C6                 db 0FFh
.eh_frame_hdr:00000000000071C7                 db 0FFh
.eh_frame_hdr:00000000000071C8                 db 0B8h
.eh_frame_hdr:00000000000071C9                 db    2
.eh_frame_hdr:00000000000071CA                 db    0
.eh_frame_hdr:00000000000071CB                 db    0
.eh_frame_hdr:00000000000071CC                 db 0D0h
.eh_frame_hdr:00000000000071CD                 db 0B2h
.eh_frame_hdr:00000000000071CE                 db 0FFh
.eh_frame_hdr:00000000000071CF                 db 0FFh
.eh_frame_hdr:00000000000071D0                 db  28h ; (
.eh_frame_hdr:00000000000071D1                 db    3
.eh_frame_hdr:00000000000071D2                 db    0
.eh_frame_hdr:00000000000071D3                 db    0
.eh_frame_hdr:00000000000071D4                 db 0E0h
.eh_frame_hdr:00000000000071D5                 db 0B2h
.eh_frame_hdr:00000000000071D6                 db 0FFh
.eh_frame_hdr:00000000000071D7                 db 0FFh
.eh_frame_hdr:00000000000071D8                 db  3Ch ; <
.eh_frame_hdr:00000000000071D9                 db    3
.eh_frame_hdr:00000000000071DA                 db    0
.eh_frame_hdr:00000000000071DB                 db    0
.eh_frame_hdr:00000000000071DC                 db  20h
.eh_frame_hdr:00000000000071DD                 db 0B4h
.eh_frame_hdr:00000000000071DE                 db 0FFh
.eh_frame_hdr:00000000000071DF                 db 0FFh
.eh_frame_hdr:00000000000071E0                 db  60h ; `
.eh_frame_hdr:00000000000071E1                 db    3
.eh_frame_hdr:00000000000071E2                 db    0
.eh_frame_hdr:00000000000071E3                 db    0
.eh_frame_hdr:00000000000071E4                 db 0C0h
.eh_frame_hdr:00000000000071E5                 db 0B4h
.eh_frame_hdr:00000000000071E6                 db 0FFh
.eh_frame_hdr:00000000000071E7                 db 0FFh
.eh_frame_hdr:00000000000071E8                 db  8Ch
.eh_frame_hdr:00000000000071E9                 db    3
.eh_frame_hdr:00000000000071EA                 db    0
.eh_frame_hdr:00000000000071EB                 db    0
.eh_frame_hdr:00000000000071EC                 db 0B0h
.eh_frame_hdr:00000000000071ED                 db 0B6h
.eh_frame_hdr:00000000000071EE                 db 0FFh
.eh_frame_hdr:00000000000071EF                 db 0FFh
.eh_frame_hdr:00000000000071F0                 db 0C0h
.eh_frame_hdr:00000000000071F1                 db    3
.eh_frame_hdr:00000000000071F2                 db    0
.eh_frame_hdr:00000000000071F3                 db    0
.eh_frame_hdr:00000000000071F4                 db 0B0h
.eh_frame_hdr:00000000000071F5                 db 0BAh
.eh_frame_hdr:00000000000071F6                 db 0FFh
.eh_frame_hdr:00000000000071F7                 db 0FFh
.eh_frame_hdr:00000000000071F8                 db 0ECh
.eh_frame_hdr:00000000000071F9                 db    3
.eh_frame_hdr:00000000000071FA                 db    0
.eh_frame_hdr:00000000000071FB                 db    0
.eh_frame_hdr:00000000000071FC                 db 0A0h
.eh_frame_hdr:00000000000071FD                 db 0BBh
.eh_frame_hdr:00000000000071FE                 db 0FFh
.eh_frame_hdr:00000000000071FF                 db 0FFh
.eh_frame_hdr:0000000000007200                 db  50h ; P
.eh_frame_hdr:0000000000007201                 db    4
.eh_frame_hdr:0000000000007202                 db    0
.eh_frame_hdr:0000000000007203                 db    0
.eh_frame_hdr:0000000000007204                 db  90h
.eh_frame_hdr:0000000000007205                 db 0BDh
.eh_frame_hdr:0000000000007206                 db 0FFh
.eh_frame_hdr:0000000000007207                 db 0FFh
.eh_frame_hdr:0000000000007208                 db 0A0h
.eh_frame_hdr:0000000000007209                 db    4
.eh_frame_hdr:000000000000720A                 db    0
.eh_frame_hdr:000000000000720B                 db    0
.eh_frame_hdr:000000000000720C                 db  50h ; P
.eh_frame_hdr:000000000000720D                 db 0BEh
.eh_frame_hdr:000000000000720E                 db 0FFh
.eh_frame_hdr:000000000000720F                 db 0FFh
.eh_frame_hdr:0000000000007210                 db 0E0h
.eh_frame_hdr:0000000000007211                 db    4
.eh_frame_hdr:0000000000007212                 db    0
.eh_frame_hdr:0000000000007213                 db    0
.eh_frame_hdr:0000000000007214                 db  60h ; `
.eh_frame_hdr:0000000000007215                 db 0BEh
.eh_frame_hdr:0000000000007216                 db 0FFh
.eh_frame_hdr:0000000000007217                 db 0FFh
.eh_frame_hdr:0000000000007218                 db 0F4h
.eh_frame_hdr:0000000000007219                 db    4
.eh_frame_hdr:000000000000721A                 db    0
.eh_frame_hdr:000000000000721B                 db    0
.eh_frame_hdr:000000000000721C                 db  70h ; p
.eh_frame_hdr:000000000000721D                 db 0BEh
.eh_frame_hdr:000000000000721E                 db 0FFh
.eh_frame_hdr:000000000000721F                 db 0FFh
.eh_frame_hdr:0000000000007220                 db    8
.eh_frame_hdr:0000000000007221                 db    5
.eh_frame_hdr:0000000000007222                 db    0
.eh_frame_hdr:0000000000007223                 db    0
.eh_frame_hdr:0000000000007224                 db  20h
.eh_frame_hdr:0000000000007225                 db 0BFh
.eh_frame_hdr:0000000000007226                 db 0FFh
.eh_frame_hdr:0000000000007227                 db 0FFh
.eh_frame_hdr:0000000000007228                 db  38h ; 8
.eh_frame_hdr:0000000000007229                 db    5
.eh_frame_hdr:000000000000722A                 db    0
.eh_frame_hdr:000000000000722B                 db    0
.eh_frame_hdr:000000000000722C                 db 0E0h
.eh_frame_hdr:000000000000722D                 db 0BFh
.eh_frame_hdr:000000000000722E                 db 0FFh
.eh_frame_hdr:000000000000722F                 db 0FFh
.eh_frame_hdr:0000000000007230                 db  50h ; P
.eh_frame_hdr:0000000000007231                 db    5
.eh_frame_hdr:0000000000007232                 db    0
.eh_frame_hdr:0000000000007233                 db    0
.eh_frame_hdr:0000000000007234                 db  80h
.eh_frame_hdr:0000000000007235                 db 0C0h
.eh_frame_hdr:0000000000007236                 db 0FFh
.eh_frame_hdr:0000000000007237                 db 0FFh
.eh_frame_hdr:0000000000007238                 db  70h ; p
.eh_frame_hdr:0000000000007239                 db    5
.eh_frame_hdr:000000000000723A                 db    0
.eh_frame_hdr:000000000000723B                 db    0
.eh_frame_hdr:000000000000723C                 db  70h ; p
.eh_frame_hdr:000000000000723D                 db 0C1h
.eh_frame_hdr:000000000000723E                 db 0FFh
.eh_frame_hdr:000000000000723F                 db 0FFh
.eh_frame_hdr:0000000000007240                 db 0B4h
.eh_frame_hdr:0000000000007241                 db    5
.eh_frame_hdr:0000000000007242                 db    0
.eh_frame_hdr:0000000000007243                 db    0
.eh_frame_hdr:0000000000007244                 db 0B0h
.eh_frame_hdr:0000000000007245                 db 0D3h
.eh_frame_hdr:0000000000007246                 db 0FFh
.eh_frame_hdr:0000000000007247                 db 0FFh
.eh_frame_hdr:0000000000007248                 db  2Ch ; ,
.eh_frame_hdr:0000000000007249                 db    6
.eh_frame_hdr:000000000000724A                 db    0
.eh_frame_hdr:000000000000724B                 db    0
.eh_frame_hdr:000000000000724C                 db  60h ; `
.eh_frame_hdr:000000000000724D                 db 0D5h
.eh_frame_hdr:000000000000724E                 db 0FFh
.eh_frame_hdr:000000000000724F                 db 0FFh
.eh_frame_hdr:0000000000007250                 db  98h
.eh_frame_hdr:0000000000007251                 db    6
.eh_frame_hdr:0000000000007252                 db    0
.eh_frame_hdr:0000000000007253                 db    0
.eh_frame_hdr:0000000000007254                 db 0A0h
.eh_frame_hdr:0000000000007255                 db 0D5h
.eh_frame_hdr:0000000000007256                 db 0FFh
.eh_frame_hdr:0000000000007257                 db 0FFh
.eh_frame_hdr:0000000000007258                 db 0C4h
.eh_frame_hdr:0000000000007259                 db    6
.eh_frame_hdr:000000000000725A                 db    0
.eh_frame_hdr:000000000000725B                 db    0
.eh_frame_hdr:000000000000725C                 db 0C0h
.eh_frame_hdr:000000000000725D                 db 0D5h
.eh_frame_hdr:000000000000725E                 db 0FFh
.eh_frame_hdr:000000000000725F                 db 0FFh
.eh_frame_hdr:0000000000007260                 db 0D8h
.eh_frame_hdr:0000000000007261                 db    6
.eh_frame_hdr:0000000000007262                 db    0
.eh_frame_hdr:0000000000007263                 db    0
.eh_frame_hdr:0000000000007264                 db 0E0h
.eh_frame_hdr:0000000000007265                 db 0D5h
.eh_frame_hdr:0000000000007266                 db 0FFh
.eh_frame_hdr:0000000000007267                 db 0FFh
.eh_frame_hdr:0000000000007268                 db 0ECh
.eh_frame_hdr:0000000000007269                 db    6
.eh_frame_hdr:000000000000726A                 db    0
.eh_frame_hdr:000000000000726B                 db    0
.eh_frame_hdr:000000000000726C                 db  20h
.eh_frame_hdr:000000000000726D                 db 0D6h
.eh_frame_hdr:000000000000726E                 db 0FFh
.eh_frame_hdr:000000000000726F                 db 0FFh
.eh_frame_hdr:0000000000007270                 db    0
.eh_frame_hdr:0000000000007271                 db    7
.eh_frame_hdr:0000000000007272                 db    0
.eh_frame_hdr:0000000000007273                 db    0
.eh_frame_hdr:0000000000007274                 db  40h ; @
.eh_frame_hdr:0000000000007275                 db 0D6h
.eh_frame_hdr:0000000000007276                 db 0FFh
.eh_frame_hdr:0000000000007277                 db 0FFh
.eh_frame_hdr:0000000000007278                 db  14h
.eh_frame_hdr:0000000000007279                 db    7
.eh_frame_hdr:000000000000727A                 db    0
.eh_frame_hdr:000000000000727B                 db    0
.eh_frame_hdr:000000000000727C                 db  70h ; p
.eh_frame_hdr:000000000000727D                 db 0D6h
.eh_frame_hdr:000000000000727E                 db 0FFh
.eh_frame_hdr:000000000000727F                 db 0FFh
.eh_frame_hdr:0000000000007280                 db  28h ; (
.eh_frame_hdr:0000000000007281                 db    7
.eh_frame_hdr:0000000000007282                 db    0
.eh_frame_hdr:0000000000007283                 db    0
.eh_frame_hdr:0000000000007284                 db 0F0h
.eh_frame_hdr:0000000000007285                 db 0D6h
.eh_frame_hdr:0000000000007286                 db 0FFh
.eh_frame_hdr:0000000000007287                 db 0FFh
.eh_frame_hdr:0000000000007288                 db  7Ch ; |
.eh_frame_hdr:0000000000007289                 db    7
.eh_frame_hdr:000000000000728A                 db    0
.eh_frame_hdr:000000000000728B                 db    0
.eh_frame_hdr:000000000000728C                 db 0E0h
.eh_frame_hdr:000000000000728D                 db 0D7h
.eh_frame_hdr:000000000000728E                 db 0FFh
.eh_frame_hdr:000000000000728F                 db 0FFh
.eh_frame_hdr:0000000000007290                 db 0E8h
.eh_frame_hdr:0000000000007291                 db    7
.eh_frame_hdr:0000000000007292                 db    0
.eh_frame_hdr:0000000000007293                 db    0
.eh_frame_hdr:0000000000007294                 db 0F0h
.eh_frame_hdr:0000000000007295                 db 0D7h
.eh_frame_hdr:0000000000007296                 db 0FFh
.eh_frame_hdr:0000000000007297                 db 0FFh
.eh_frame_hdr:0000000000007298                 db 0FCh
.eh_frame_hdr:0000000000007299                 db    7
.eh_frame_hdr:000000000000729A                 db    0
.eh_frame_hdr:000000000000729B                 db    0
.eh_frame_hdr:000000000000729C                 db  90h
.eh_frame_hdr:000000000000729D                 db 0D8h
.eh_frame_hdr:000000000000729E                 db 0FFh
.eh_frame_hdr:000000000000729F                 db 0FFh
.eh_frame_hdr:00000000000072A0                 db  28h ; (
.eh_frame_hdr:00000000000072A1                 db    8
.eh_frame_hdr:00000000000072A2                 db    0
.eh_frame_hdr:00000000000072A3                 db    0
.eh_frame_hdr:00000000000072A4                 db 0B0h
.eh_frame_hdr:00000000000072A5                 db 0D8h
.eh_frame_hdr:00000000000072A6                 db 0FFh
.eh_frame_hdr:00000000000072A7                 db 0FFh
.eh_frame_hdr:00000000000072A8                 db  3Ch ; <
.eh_frame_hdr:00000000000072A9                 db    8
.eh_frame_hdr:00000000000072AA                 db    0
.eh_frame_hdr:00000000000072AB                 db    0
.eh_frame_hdr:00000000000072AC                 db 0C0h
.eh_frame_hdr:00000000000072AD                 db 0D8h
.eh_frame_hdr:00000000000072AE                 db 0FFh
.eh_frame_hdr:00000000000072AF                 db 0FFh
.eh_frame_hdr:00000000000072B0                 db  50h ; P
.eh_frame_hdr:00000000000072B1                 db    8
.eh_frame_hdr:00000000000072B2                 db    0
.eh_frame_hdr:00000000000072B3                 db    0
.eh_frame_hdr:00000000000072B4                 db 0E0h
.eh_frame_hdr:00000000000072B5                 db 0D8h
.eh_frame_hdr:00000000000072B6                 db 0FFh
.eh_frame_hdr:00000000000072B7                 db 0FFh
.eh_frame_hdr:00000000000072B8                 db  64h ; d
.eh_frame_hdr:00000000000072B9                 db    8
.eh_frame_hdr:00000000000072BA                 db    0
.eh_frame_hdr:00000000000072BB                 db    0
.eh_frame_hdr:00000000000072BC                 db    0
.eh_frame_hdr:00000000000072BD                 db 0D9h
.eh_frame_hdr:00000000000072BE                 db 0FFh
.eh_frame_hdr:00000000000072BF                 db 0FFh
.eh_frame_hdr:00000000000072C0                 db  78h ; x
.eh_frame_hdr:00000000000072C1                 db    8
.eh_frame_hdr:00000000000072C2                 db    0
.eh_frame_hdr:00000000000072C3                 db    0
.eh_frame_hdr:00000000000072C4                 db  90h
.eh_frame_hdr:00000000000072C5                 db 0D9h
.eh_frame_hdr:00000000000072C6                 db 0FFh
.eh_frame_hdr:00000000000072C7                 db 0FFh
.eh_frame_hdr:00000000000072C8                 db  94h
.eh_frame_hdr:00000000000072C9                 db    8
.eh_frame_hdr:00000000000072CA                 db    0
.eh_frame_hdr:00000000000072CB                 db    0
.eh_frame_hdr:00000000000072CC                 db  20h
.eh_frame_hdr:00000000000072CD                 db 0DAh
.eh_frame_hdr:00000000000072CE                 db 0FFh
.eh_frame_hdr:00000000000072CF                 db 0FFh
.eh_frame_hdr:00000000000072D0                 db 0B0h
.eh_frame_hdr:00000000000072D1                 db    8
.eh_frame_hdr:00000000000072D2                 db    0
.eh_frame_hdr:00000000000072D3                 db    0
.eh_frame_hdr:00000000000072D4                 db  30h ; 0
.eh_frame_hdr:00000000000072D5                 db 0DAh
.eh_frame_hdr:00000000000072D6                 db 0FFh
.eh_frame_hdr:00000000000072D7                 db 0FFh
.eh_frame_hdr:00000000000072D8                 db 0C4h
.eh_frame_hdr:00000000000072D9                 db    8
.eh_frame_hdr:00000000000072DA                 db    0
.eh_frame_hdr:00000000000072DB                 db    0
.eh_frame_hdr:00000000000072DC                 db  40h ; @
.eh_frame_hdr:00000000000072DD                 db 0DAh
.eh_frame_hdr:00000000000072DE                 db 0FFh
.eh_frame_hdr:00000000000072DF                 db 0FFh
.eh_frame_hdr:00000000000072E0                 db 0D8h
.eh_frame_hdr:00000000000072E1                 db    8
.eh_frame_hdr:00000000000072E2                 db    0
.eh_frame_hdr:00000000000072E3                 db    0
.eh_frame_hdr:00000000000072E4                 db 0E0h
.eh_frame_hdr:00000000000072E5                 db 0DAh
.eh_frame_hdr:00000000000072E6                 db 0FFh
.eh_frame_hdr:00000000000072E7                 db 0FFh
.eh_frame_hdr:00000000000072E8                 db 0F4h
.eh_frame_hdr:00000000000072E9                 db    8
.eh_frame_hdr:00000000000072EA                 db    0
.eh_frame_hdr:00000000000072EB                 db    0
.eh_frame_hdr:00000000000072EC                 db 0F0h
.eh_frame_hdr:00000000000072ED                 db 0DAh
.eh_frame_hdr:00000000000072EE                 db 0FFh
.eh_frame_hdr:00000000000072EF                 db 0FFh
.eh_frame_hdr:00000000000072F0                 db    8
.eh_frame_hdr:00000000000072F1                 db    9
.eh_frame_hdr:00000000000072F2                 db    0
.eh_frame_hdr:00000000000072F3                 db    0
.eh_frame_hdr:00000000000072F4                 db  10h
.eh_frame_hdr:00000000000072F5                 db 0DBh
.eh_frame_hdr:00000000000072F6                 db 0FFh
.eh_frame_hdr:00000000000072F7                 db 0FFh
.eh_frame_hdr:00000000000072F8                 db  1Ch
.eh_frame_hdr:00000000000072F9                 db    9
.eh_frame_hdr:00000000000072FA                 db    0
.eh_frame_hdr:00000000000072FB                 db    0
.eh_frame_hdr:00000000000072FC                 db  20h
.eh_frame_hdr:00000000000072FD                 db 0DBh
.eh_frame_hdr:00000000000072FE                 db 0FFh
.eh_frame_hdr:00000000000072FF                 db 0FFh
.eh_frame_hdr:0000000000007300                 db  30h ; 0
.eh_frame_hdr:0000000000007301                 db    9
.eh_frame_hdr:0000000000007302                 db    0
.eh_frame_hdr:0000000000007303                 db    0
.eh_frame_hdr:0000000000007304                 db 0B0h
.eh_frame_hdr:0000000000007305                 db 0DBh
.eh_frame_hdr:0000000000007306                 db 0FFh
.eh_frame_hdr:0000000000007307                 db 0FFh
.eh_frame_hdr:0000000000007308                 db  4Ch ; L
.eh_frame_hdr:0000000000007309                 db    9
.eh_frame_hdr:000000000000730A                 db    0
.eh_frame_hdr:000000000000730B                 db    0
.eh_frame_hdr:000000000000730C                 db  50h ; P
.eh_frame_hdr:000000000000730D                 db 0DCh
.eh_frame_hdr:000000000000730E                 db 0FFh
.eh_frame_hdr:000000000000730F                 db 0FFh
.eh_frame_hdr:0000000000007310                 db  68h ; h
.eh_frame_hdr:0000000000007311                 db    9
.eh_frame_hdr:0000000000007312                 db    0
.eh_frame_hdr:0000000000007313                 db    0
.eh_frame_hdr:0000000000007314                 db  60h ; `
.eh_frame_hdr:0000000000007315                 db 0DCh
.eh_frame_hdr:0000000000007316                 db 0FFh
.eh_frame_hdr:0000000000007317                 db 0FFh
.eh_frame_hdr:0000000000007318                 db  7Ch ; |
.eh_frame_hdr:0000000000007319                 db    9
.eh_frame_hdr:000000000000731A                 db    0
.eh_frame_hdr:000000000000731B                 db    0
.eh_frame_hdr:000000000000731C                 db  80h
.eh_frame_hdr:000000000000731D                 db 0DCh
.eh_frame_hdr:000000000000731E                 db 0FFh
.eh_frame_hdr:000000000000731F                 db 0FFh
.eh_frame_hdr:0000000000007320                 db  90h
.eh_frame_hdr:0000000000007321                 db    9
.eh_frame_hdr:0000000000007322                 db    0
.eh_frame_hdr:0000000000007323                 db    0
.eh_frame_hdr:0000000000007324                 db 0A0h
.eh_frame_hdr:0000000000007325                 db 0DCh
.eh_frame_hdr:0000000000007326                 db 0FFh
.eh_frame_hdr:0000000000007327                 db 0FFh
.eh_frame_hdr:0000000000007328                 db 0A4h
.eh_frame_hdr:0000000000007329                 db    9
.eh_frame_hdr:000000000000732A                 db    0
.eh_frame_hdr:000000000000732B                 db    0
.eh_frame_hdr:000000000000732C                 db 0B0h
.eh_frame_hdr:000000000000732D                 db 0DCh
.eh_frame_hdr:000000000000732E                 db 0FFh
.eh_frame_hdr:000000000000732F                 db 0FFh
.eh_frame_hdr:0000000000007330                 db 0B8h
.eh_frame_hdr:0000000000007331                 db    9
.eh_frame_hdr:0000000000007332                 db    0
.eh_frame_hdr:0000000000007333                 db    0
.eh_frame_hdr:0000000000007334                 db 0D0h
.eh_frame_hdr:0000000000007335                 db 0DCh
.eh_frame_hdr:0000000000007336                 db 0FFh
.eh_frame_hdr:0000000000007337                 db 0FFh
.eh_frame_hdr:0000000000007338                 db 0CCh
.eh_frame_hdr:0000000000007339                 db    9
.eh_frame_hdr:000000000000733A                 db    0
.eh_frame_hdr:000000000000733B                 db    0
.eh_frame_hdr:000000000000733C                 db 0F0h
.eh_frame_hdr:000000000000733D                 db 0DCh
.eh_frame_hdr:000000000000733E                 db 0FFh
.eh_frame_hdr:000000000000733F                 db 0FFh
.eh_frame_hdr:0000000000007340                 db 0E0h
.eh_frame_hdr:0000000000007341                 db    9
.eh_frame_hdr:0000000000007342                 db    0
.eh_frame_hdr:0000000000007343                 db    0
.eh_frame_hdr:0000000000007344                 db  10h
.eh_frame_hdr:0000000000007345                 db 0DDh
.eh_frame_hdr:0000000000007346                 db 0FFh
.eh_frame_hdr:0000000000007347                 db 0FFh
.eh_frame_hdr:0000000000007348                 db 0F8h
.eh_frame_hdr:0000000000007349                 db    9
.eh_frame_hdr:000000000000734A                 db    0
.eh_frame_hdr:000000000000734B                 db    0
.eh_frame_hdr:000000000000734C                 db  30h ; 0
.eh_frame_hdr:000000000000734D                 db 0E1h
.eh_frame_hdr:000000000000734E                 db 0FFh
.eh_frame_hdr:000000000000734F                 db 0FFh
.eh_frame_hdr:0000000000007350                 db  0Ch
.eh_frame_hdr:0000000000007351                 db  0Bh
.eh_frame_hdr:0000000000007352                 db    0
.eh_frame_hdr:0000000000007353                 db    0
.eh_frame_hdr:0000000000007354                 db  50h ; P
.eh_frame_hdr:0000000000007355                 db 0E1h
.eh_frame_hdr:0000000000007356                 db 0FFh
.eh_frame_hdr:0000000000007357                 db 0FFh
.eh_frame_hdr:0000000000007358                 db  20h
.eh_frame_hdr:0000000000007359                 db  0Bh
.eh_frame_hdr:000000000000735A                 db    0
.eh_frame_hdr:000000000000735B                 db    0
.eh_frame_hdr:000000000000735C                 db 0D0h
.eh_frame_hdr:000000000000735D                 db 0E1h
.eh_frame_hdr:000000000000735E                 db 0FFh
.eh_frame_hdr:000000000000735F                 db 0FFh
.eh_frame_hdr:0000000000007360                 db  3Ch ; <
.eh_frame_hdr:0000000000007361                 db  0Bh
.eh_frame_hdr:0000000000007362                 db    0
.eh_frame_hdr:0000000000007363                 db    0
.eh_frame_hdr:0000000000007364                 db 0B0h
.eh_frame_hdr:0000000000007365                 db 0E2h
.eh_frame_hdr:0000000000007366                 db 0FFh
.eh_frame_hdr:0000000000007367                 db 0FFh
.eh_frame_hdr:0000000000007368                 db  68h ; h
.eh_frame_hdr:0000000000007369                 db  0Bh
.eh_frame_hdr:000000000000736A                 db    0
.eh_frame_hdr:000000000000736B                 db    0
.eh_frame_hdr:000000000000736C                 db  30h ; 0
.eh_frame_hdr:000000000000736D                 db 0E3h
.eh_frame_hdr:000000000000736E                 db 0FFh
.eh_frame_hdr:000000000000736F                 db 0FFh
.eh_frame_hdr:0000000000007370                 db  88h
.eh_frame_hdr:0000000000007371                 db  0Bh
.eh_frame_hdr:0000000000007372                 db    0
.eh_frame_hdr:0000000000007373                 db    0
.eh_frame_hdr:0000000000007374                 db  50h ; P
.eh_frame_hdr:0000000000007375                 db 0E3h
.eh_frame_hdr:0000000000007376                 db 0FFh
.eh_frame_hdr:0000000000007377                 db 0FFh
.eh_frame_hdr:0000000000007378                 db 0A4h
.eh_frame_hdr:0000000000007379                 db  0Bh
.eh_frame_hdr:000000000000737A                 db    0
.eh_frame_hdr:000000000000737B                 db    0
.eh_frame_hdr:000000000000737C                 db  80h
.eh_frame_hdr:000000000000737D                 db 0E3h
.eh_frame_hdr:000000000000737E                 db 0FFh
.eh_frame_hdr:000000000000737F                 db 0FFh
.eh_frame_hdr:0000000000007380                 db 0B8h
.eh_frame_hdr:0000000000007381                 db  0Bh
.eh_frame_hdr:0000000000007382                 db    0
.eh_frame_hdr:0000000000007383                 db    0
.eh_frame_hdr:0000000000007384                 db  90h
.eh_frame_hdr:0000000000007385                 db 0E3h
.eh_frame_hdr:0000000000007386                 db 0FFh
.eh_frame_hdr:0000000000007387                 db 0FFh
.eh_frame_hdr:0000000000007388                 db 0CCh
.eh_frame_hdr:0000000000007389                 db  0Bh
.eh_frame_hdr:000000000000738A                 db    0
.eh_frame_hdr:000000000000738B                 db    0
.eh_frame_hdr:000000000000738C                 db 0D0h
.eh_frame_hdr:000000000000738D                 db 0E3h
.eh_frame_hdr:000000000000738E                 db 0FFh
.eh_frame_hdr:000000000000738F                 db 0FFh
.eh_frame_hdr:0000000000007390                 db 0F0h
.eh_frame_hdr:0000000000007391                 db  0Bh
.eh_frame_hdr:0000000000007392                 db    0
.eh_frame_hdr:0000000000007393                 db    0
.eh_frame_hdr:0000000000007394                 db    0
.eh_frame_hdr:0000000000007395                 db 0E4h
.eh_frame_hdr:0000000000007396                 db 0FFh
.eh_frame_hdr:0000000000007397                 db 0FFh
.eh_frame_hdr:0000000000007398                 db    4
.eh_frame_hdr:0000000000007399                 db  0Ch
.eh_frame_hdr:000000000000739A                 db    0
.eh_frame_hdr:000000000000739B                 db    0
.eh_frame_hdr:000000000000739C                 db  90h
.eh_frame_hdr:000000000000739D                 db 0E4h
.eh_frame_hdr:000000000000739E                 db 0FFh
.eh_frame_hdr:000000000000739F                 db 0FFh
.eh_frame_hdr:00000000000073A0                 db  1Ch
.eh_frame_hdr:00000000000073A1                 db  0Ch
.eh_frame_hdr:00000000000073A2                 db    0
.eh_frame_hdr:00000000000073A3                 db    0
.eh_frame_hdr:00000000000073A4                 db 0E0h
.eh_frame_hdr:00000000000073A5                 db 0E4h
.eh_frame_hdr:00000000000073A6                 db 0FFh
.eh_frame_hdr:00000000000073A7                 db 0FFh
.eh_frame_hdr:00000000000073A8                 db  34h ; 4
.eh_frame_hdr:00000000000073A9                 db  0Ch
.eh_frame_hdr:00000000000073AA                 db    0
.eh_frame_hdr:00000000000073AB                 db    0
.eh_frame_hdr:00000000000073AC                 db    0
.eh_frame_hdr:00000000000073AD                 db 0E5h
.eh_frame_hdr:00000000000073AE                 db 0FFh
.eh_frame_hdr:00000000000073AF                 db 0FFh
.eh_frame_hdr:00000000000073B0                 db  50h ; P
.eh_frame_hdr:00000000000073B1                 db  0Ch
.eh_frame_hdr:00000000000073B2                 db    0
.eh_frame_hdr:00000000000073B3                 db    0
.eh_frame_hdr:00000000000073B4                 db  30h ; 0
.eh_frame_hdr:00000000000073B5                 db 0E5h
.eh_frame_hdr:00000000000073B6                 db 0FFh
.eh_frame_hdr:00000000000073B7                 db 0FFh
.eh_frame_hdr:00000000000073B8                 db  6Ch ; l
.eh_frame_hdr:00000000000073B9                 db  0Ch
.eh_frame_hdr:00000000000073BA                 db    0
.eh_frame_hdr:00000000000073BB                 db    0
.eh_frame_hdr:00000000000073BC                 db  60h ; `
.eh_frame_hdr:00000000000073BD                 db 0E5h
.eh_frame_hdr:00000000000073BE                 db 0FFh
.eh_frame_hdr:00000000000073BF                 db 0FFh
.eh_frame_hdr:00000000000073C0                 db  94h
.eh_frame_hdr:00000000000073C1                 db  0Ch
.eh_frame_hdr:00000000000073C2                 db    0
.eh_frame_hdr:00000000000073C3                 db    0
.eh_frame_hdr:00000000000073C4                 db  80h
.eh_frame_hdr:00000000000073C5                 db 0E5h
.eh_frame_hdr:00000000000073C6                 db 0FFh
.eh_frame_hdr:00000000000073C7                 db 0FFh
.eh_frame_hdr:00000000000073C8                 db 0B0h
.eh_frame_hdr:00000000000073C9                 db  0Ch
.eh_frame_hdr:00000000000073CA                 db    0
.eh_frame_hdr:00000000000073CB                 db    0
.eh_frame_hdr:00000000000073CC                 db 0C0h
.eh_frame_hdr:00000000000073CD                 db 0E5h
.eh_frame_hdr:00000000000073CE                 db 0FFh
.eh_frame_hdr:00000000000073CF                 db 0FFh
.eh_frame_hdr:00000000000073D0                 db 0C8h
.eh_frame_hdr:00000000000073D1                 db  0Ch
.eh_frame_hdr:00000000000073D2                 db    0
.eh_frame_hdr:00000000000073D3                 db    0
.eh_frame_hdr:00000000000073D4                 db  90h
.eh_frame_hdr:00000000000073D5                 db 0E6h
.eh_frame_hdr:00000000000073D6                 db 0FFh
.eh_frame_hdr:00000000000073D7                 db 0FFh
.eh_frame_hdr:00000000000073D8                 db  10h
.eh_frame_hdr:00000000000073D9                 db  0Dh
.eh_frame_hdr:00000000000073DA                 db    0
.eh_frame_hdr:00000000000073DB                 db    0
.eh_frame_hdr:00000000000073DC                 db  20h
.eh_frame_hdr:00000000000073DD                 db 0E7h
.eh_frame_hdr:00000000000073DE                 db 0FFh
.eh_frame_hdr:00000000000073DF                 db 0FFh
.eh_frame_hdr:00000000000073E0                 db  50h ; P
.eh_frame_hdr:00000000000073E1                 db  0Dh
.eh_frame_hdr:00000000000073E2                 db    0
.eh_frame_hdr:00000000000073E3                 db    0
.eh_frame_hdr:00000000000073E4                 db 0B0h
.eh_frame_hdr:00000000000073E5                 db 0E8h
.eh_frame_hdr:00000000000073E6                 db 0FFh
.eh_frame_hdr:00000000000073E7                 db 0FFh
.eh_frame_hdr:00000000000073E8                 db  8Ch
.eh_frame_hdr:00000000000073E9                 db  0Dh
.eh_frame_hdr:00000000000073EA                 db    0
.eh_frame_hdr:00000000000073EB                 db    0
.eh_frame_hdr:00000000000073EC                 db  90h
.eh_frame_hdr:00000000000073ED                 db 0E9h
.eh_frame_hdr:00000000000073EE                 db 0FFh
.eh_frame_hdr:00000000000073EF                 db 0FFh
.eh_frame_hdr:00000000000073F0                 db 0C8h
.eh_frame_hdr:00000000000073F1                 db  0Dh
.eh_frame_hdr:00000000000073F2                 db    0
.eh_frame_hdr:00000000000073F3                 db    0
.eh_frame_hdr:00000000000073F4                 db    0
.eh_frame_hdr:00000000000073F5                 db 0EAh
.eh_frame_hdr:00000000000073F6                 db 0FFh
.eh_frame_hdr:00000000000073F7                 db 0FFh
.eh_frame_hdr:00000000000073F8                 db    0
.eh_frame_hdr:00000000000073F9                 db  0Eh
.eh_frame_hdr:00000000000073FA                 db    0
.eh_frame_hdr:00000000000073FB                 db    0
.eh_frame_hdr:00000000000073FC                 db  80h
.eh_frame_hdr:00000000000073FD                 db 0EAh
.eh_frame_hdr:00000000000073FE                 db 0FFh
.eh_frame_hdr:00000000000073FF                 db 0FFh
.eh_frame_hdr:0000000000007400                 db  50h ; P
.eh_frame_hdr:0000000000007401                 db  0Eh
.eh_frame_hdr:0000000000007402                 db    0
.eh_frame_hdr:0000000000007403                 db    0
.eh_frame_hdr:0000000000007404                 db 0E0h
.eh_frame_hdr:0000000000007405                 db 0EAh
.eh_frame_hdr:0000000000007406                 db 0FFh
.eh_frame_hdr:0000000000007407                 db 0FFh
.eh_frame_hdr:0000000000007408                 db  70h ; p
.eh_frame_hdr:0000000000007409                 db  0Eh
.eh_frame_hdr:000000000000740A                 db    0
.eh_frame_hdr:000000000000740B                 db    0
.eh_frame_hdr:000000000000740C                 db  20h
.eh_frame_hdr:000000000000740D                 db 0EBh
.eh_frame_hdr:000000000000740E                 db 0FFh
.eh_frame_hdr:000000000000740F                 db 0FFh
.eh_frame_hdr:0000000000007410                 db  90h
.eh_frame_hdr:0000000000007411                 db  0Eh
.eh_frame_hdr:0000000000007412                 db    0
.eh_frame_hdr:0000000000007413                 db    0
.eh_frame_hdr:0000000000007414                 db 0A0h
.eh_frame_hdr:0000000000007415                 db 0EBh
.eh_frame_hdr:0000000000007416                 db 0FFh
.eh_frame_hdr:0000000000007417                 db 0FFh
.eh_frame_hdr:0000000000007418                 db 0C8h
.eh_frame_hdr:0000000000007419                 db  0Eh
.eh_frame_hdr:000000000000741A                 db    0
.eh_frame_hdr:000000000000741B                 db    0
.eh_frame_hdr:000000000000741C                 db 0E0h
.eh_frame_hdr:000000000000741D                 db 0EBh
.eh_frame_hdr:000000000000741E                 db 0FFh
.eh_frame_hdr:000000000000741F                 db 0FFh
.eh_frame_hdr:0000000000007420                 db 0E8h
.eh_frame_hdr:0000000000007421                 db  0Eh
.eh_frame_hdr:0000000000007422                 db    0
.eh_frame_hdr:0000000000007423                 db    0
.eh_frame_hdr:0000000000007424                 db  40h ; @
.eh_frame_hdr:0000000000007425                 db 0ECh
.eh_frame_hdr:0000000000007426                 db 0FFh
.eh_frame_hdr:0000000000007427                 db 0FFh
.eh_frame_hdr:0000000000007428                 db  18h
.eh_frame_hdr:0000000000007429                 db  0Fh
.eh_frame_hdr:000000000000742A                 db    0
.eh_frame_hdr:000000000000742B                 db    0
.eh_frame_hdr:000000000000742C                 db 0B0h
.eh_frame_hdr:000000000000742D                 db 0ECh
.eh_frame_hdr:000000000000742E                 db 0FFh
.eh_frame_hdr:000000000000742F                 db 0FFh
.eh_frame_hdr:0000000000007430                 db  60h ; `
.eh_frame_hdr:0000000000007431                 db  0Fh
.eh_frame_hdr:0000000000007432                 db    0
.eh_frame_hdr:0000000000007433                 db    0
.eh_frame_hdr:0000000000007434                 db 0C0h
.eh_frame_hdr:0000000000007435                 db 0ECh
.eh_frame_hdr:0000000000007436                 db 0FFh
.eh_frame_hdr:0000000000007437                 db 0FFh
.eh_frame_hdr:0000000000007438                 db  78h ; x
.eh_frame_hdr:0000000000007439                 db  0Fh
.eh_frame_hdr:000000000000743A                 db    0
.eh_frame_hdr:000000000000743B                 db    0
.eh_frame_hdr:000000000000743B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000743B
LOAD:000000000000743C ; ===========================================================================
LOAD:000000000000743C
LOAD:000000000000743C ; Segment type: Pure code
LOAD:000000000000743C ; Segment permissions: Read/Execute
LOAD:000000000000743C LOAD            segment byte public 'CODE' use64
LOAD:000000000000743C                 assume cs:LOAD
LOAD:000000000000743C                 ;org 743Ch
LOAD:000000000000743C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000743C                 align 20h
LOAD:000000000000743C LOAD            ends
LOAD:000000000000743C
.eh_frame:0000000000007440 ; ===========================================================================
.eh_frame:0000000000007440
.eh_frame:0000000000007440 ; Segment type: Pure data
.eh_frame:0000000000007440 ; Segment permissions: Read
.eh_frame:0000000000007440 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007440                 assume cs:_eh_frame
.eh_frame:0000000000007440                 ;org 7440h
.eh_frame:0000000000007440                 db  14h
.eh_frame:0000000000007441                 db    0
.eh_frame:0000000000007442                 db    0
.eh_frame:0000000000007443                 db    0
.eh_frame:0000000000007444                 db    0
.eh_frame:0000000000007445                 db    0
.eh_frame:0000000000007446                 db    0
.eh_frame:0000000000007447                 db    0
.eh_frame:0000000000007448                 db    1
.eh_frame:0000000000007449                 db  7Ah ; z
.eh_frame:000000000000744A                 db  52h ; R
.eh_frame:000000000000744B                 db    0
.eh_frame:000000000000744C                 db    1
.eh_frame:000000000000744D                 db  78h ; x
.eh_frame:000000000000744E                 db  10h
.eh_frame:000000000000744F                 db    1
.eh_frame:0000000000007450                 db  1Bh
.eh_frame:0000000000007451                 db  0Ch
.eh_frame:0000000000007452                 db    7
.eh_frame:0000000000007453                 db    8
.eh_frame:0000000000007454                 db  90h
.eh_frame:0000000000007455                 db    1
.eh_frame:0000000000007456                 db    7
.eh_frame:0000000000007457                 db  10h
.eh_frame:0000000000007458                 db  14h
.eh_frame:0000000000007459                 db    0
.eh_frame:000000000000745A                 db    0
.eh_frame:000000000000745B                 db    0
.eh_frame:000000000000745C                 db  1Ch
.eh_frame:000000000000745D                 db    0
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db    0
.eh_frame:0000000000007461                 db 0AFh
.eh_frame:0000000000007462                 db 0FFh
.eh_frame:0000000000007463                 db 0FFh
.eh_frame:0000000000007464                 db  2Bh ; +
.eh_frame:0000000000007465                 db    0
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db    0
.eh_frame:0000000000007469                 db    0
.eh_frame:000000000000746A                 db    0
.eh_frame:000000000000746B                 db    0
.eh_frame:000000000000746C                 db    0
.eh_frame:000000000000746D                 db    0
.eh_frame:000000000000746E                 db    0
.eh_frame:000000000000746F                 db    0
.eh_frame:0000000000007470                 db  14h
.eh_frame:0000000000007471                 db    0
.eh_frame:0000000000007472                 db    0
.eh_frame:0000000000007473                 db    0
.eh_frame:0000000000007474                 db    0
.eh_frame:0000000000007475                 db    0
.eh_frame:0000000000007476                 db    0
.eh_frame:0000000000007477                 db    0
.eh_frame:0000000000007478                 db    1
.eh_frame:0000000000007479                 db  7Ah ; z
.eh_frame:000000000000747A                 db  52h ; R
.eh_frame:000000000000747B                 db    0
.eh_frame:000000000000747C                 db    1
.eh_frame:000000000000747D                 db  78h ; x
.eh_frame:000000000000747E                 db  10h
.eh_frame:000000000000747F                 db    1
.eh_frame:0000000000007480                 db  1Bh
.eh_frame:0000000000007481                 db  0Ch
.eh_frame:0000000000007482                 db    7
.eh_frame:0000000000007483                 db    8
.eh_frame:0000000000007484                 db  90h
.eh_frame:0000000000007485                 db    1
.eh_frame:0000000000007486                 db    0
.eh_frame:0000000000007487                 db    0
.eh_frame:0000000000007488                 db  24h ; $
.eh_frame:0000000000007489                 db    0
.eh_frame:000000000000748A                 db    0
.eh_frame:000000000000748B                 db    0
.eh_frame:000000000000748C                 db  1Ch
.eh_frame:000000000000748D                 db    0
.eh_frame:000000000000748E                 db    0
.eh_frame:000000000000748F                 db    0
.eh_frame:0000000000007490                 db  80h
.eh_frame:0000000000007491                 db 0A4h
.eh_frame:0000000000007492                 db 0FFh
.eh_frame:0000000000007493                 db 0FFh
.eh_frame:0000000000007494                 db  40h ; @
.eh_frame:0000000000007495                 db    4
.eh_frame:0000000000007496                 db    0
.eh_frame:0000000000007497                 db    0
.eh_frame:0000000000007498                 db    0
.eh_frame:0000000000007499                 db  0Eh
.eh_frame:000000000000749A                 db  10h
.eh_frame:000000000000749B                 db  46h ; F
.eh_frame:000000000000749C                 db  0Eh
.eh_frame:000000000000749D                 db  18h
.eh_frame:000000000000749E                 db  4Ah ; J
.eh_frame:000000000000749F                 db  0Fh
.eh_frame:00000000000074A0                 db  0Bh
.eh_frame:00000000000074A1                 db  77h ; w
.eh_frame:00000000000074A2                 db    8
.eh_frame:00000000000074A3                 db  80h
.eh_frame:00000000000074A4                 db    0
.eh_frame:00000000000074A5                 db  3Fh ; ?
.eh_frame:00000000000074A6                 db  1Ah
.eh_frame:00000000000074A7                 db  3Bh ; ;
.eh_frame:00000000000074A8                 db  2Ah ; *
.eh_frame:00000000000074A9                 db  33h ; 3
.eh_frame:00000000000074AA                 db  24h ; $
.eh_frame:00000000000074AB                 db  22h ; "
.eh_frame:00000000000074AC                 db    0
.eh_frame:00000000000074AD                 db    0
.eh_frame:00000000000074AE                 db    0
.eh_frame:00000000000074AF                 db    0
.eh_frame:00000000000074B0                 db  14h
.eh_frame:00000000000074B1                 db    0
.eh_frame:00000000000074B2                 db    0
.eh_frame:00000000000074B3                 db    0
.eh_frame:00000000000074B4                 db  44h ; D
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db  98h
.eh_frame:00000000000074B9                 db 0A8h
.eh_frame:00000000000074BA                 db 0FFh
.eh_frame:00000000000074BB                 db 0FFh
.eh_frame:00000000000074BC                 db    8
.eh_frame:00000000000074BD                 db    0
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db    0
.eh_frame:00000000000074C1                 db    0
.eh_frame:00000000000074C2                 db    0
.eh_frame:00000000000074C3                 db    0
.eh_frame:00000000000074C4                 db    0
.eh_frame:00000000000074C5                 db    0
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db  10h
.eh_frame:00000000000074C9                 db    0
.eh_frame:00000000000074CA                 db    0
.eh_frame:00000000000074CB                 db    0
.eh_frame:00000000000074CC                 db  5Ch ; \
.eh_frame:00000000000074CD                 db    0
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db 0A0h
.eh_frame:00000000000074D1                 db 0AFh
.eh_frame:00000000000074D2                 db 0FFh
.eh_frame:00000000000074D3                 db 0FFh
.eh_frame:00000000000074D4                 db    2
.eh_frame:00000000000074D5                 db    0
.eh_frame:00000000000074D6                 db    0
.eh_frame:00000000000074D7                 db    0
.eh_frame:00000000000074D8                 db    0
.eh_frame:00000000000074D9                 db    0
.eh_frame:00000000000074DA                 db    0
.eh_frame:00000000000074DB                 db    0
.eh_frame:00000000000074DC                 db  20h
.eh_frame:00000000000074DD                 db    0
.eh_frame:00000000000074DE                 db    0
.eh_frame:00000000000074DF                 db    0
.eh_frame:00000000000074E0                 db  70h ; p
.eh_frame:00000000000074E1                 db    0
.eh_frame:00000000000074E2                 db    0
.eh_frame:00000000000074E3                 db    0
.eh_frame:00000000000074E4                 db  9Ch
.eh_frame:00000000000074E5                 db 0AFh
.eh_frame:00000000000074E6                 db 0FFh
.eh_frame:00000000000074E7                 db 0FFh
.eh_frame:00000000000074E8                 db  40h ; @
.eh_frame:00000000000074E9                 db    1
.eh_frame:00000000000074EA                 db    0
.eh_frame:00000000000074EB                 db    0
.eh_frame:00000000000074EC                 db    0
.eh_frame:00000000000074ED                 db  41h ; A
.eh_frame:00000000000074EE                 db  0Eh
.eh_frame:00000000000074EF                 db  10h
.eh_frame:00000000000074F0                 db  83h
.eh_frame:00000000000074F1                 db    2
.eh_frame:00000000000074F2                 db  46h ; F
.eh_frame:00000000000074F3                 db  0Eh
.eh_frame:00000000000074F4                 db  60h ; `
.eh_frame:00000000000074F5                 db    2
.eh_frame:00000000000074F6                 db 0A8h
.eh_frame:00000000000074F7                 db  0Ah
.eh_frame:00000000000074F8                 db  0Eh
.eh_frame:00000000000074F9                 db  10h
.eh_frame:00000000000074FA                 db  41h ; A
.eh_frame:00000000000074FB                 db  0Eh
.eh_frame:00000000000074FC                 db    8
.eh_frame:00000000000074FD                 db  48h ; H
.eh_frame:00000000000074FE                 db  0Bh
.eh_frame:00000000000074FF                 db    0
.eh_frame:0000000000007500                 db  28h ; (
.eh_frame:0000000000007501                 db    0
.eh_frame:0000000000007502                 db    0
.eh_frame:0000000000007503                 db    0
.eh_frame:0000000000007504                 db  94h
.eh_frame:0000000000007505                 db    0
.eh_frame:0000000000007506                 db    0
.eh_frame:0000000000007507                 db    0
.eh_frame:0000000000007508                 db 0B8h
.eh_frame:0000000000007509                 db 0B0h
.eh_frame:000000000000750A                 db 0FFh
.eh_frame:000000000000750B                 db 0FFh
.eh_frame:000000000000750C                 db  91h
.eh_frame:000000000000750D                 db    0
.eh_frame:000000000000750E                 db    0
.eh_frame:000000000000750F                 db    0
.eh_frame:0000000000007510                 db    0
.eh_frame:0000000000007511                 db  41h ; A
.eh_frame:0000000000007512                 db  0Eh
.eh_frame:0000000000007513                 db  10h
.eh_frame:0000000000007514                 db  86h
.eh_frame:0000000000007515                 db    2
.eh_frame:0000000000007516                 db  41h ; A
.eh_frame:0000000000007517                 db  0Eh
.eh_frame:0000000000007518                 db  18h
.eh_frame:0000000000007519                 db  83h
.eh_frame:000000000000751A                 db    3
.eh_frame:000000000000751B                 db  49h ; I
.eh_frame:000000000000751C                 db  0Eh
.eh_frame:000000000000751D                 db 0B0h
.eh_frame:000000000000751E                 db    1
.eh_frame:000000000000751F                 db    2
.eh_frame:0000000000007520                 db  7Eh ; ~
.eh_frame:0000000000007521                 db  0Ah
.eh_frame:0000000000007522                 db  0Eh
.eh_frame:0000000000007523                 db  18h
.eh_frame:0000000000007524                 db  41h ; A
.eh_frame:0000000000007525                 db  0Eh
.eh_frame:0000000000007526                 db  10h
.eh_frame:0000000000007527                 db  41h ; A
.eh_frame:0000000000007528                 db  0Eh
.eh_frame:0000000000007529                 db    8
.eh_frame:000000000000752A                 db  41h ; A
.eh_frame:000000000000752B                 db  0Bh
.eh_frame:000000000000752C                 db  30h ; 0
.eh_frame:000000000000752D                 db    0
.eh_frame:000000000000752E                 db    0
.eh_frame:000000000000752F                 db    0
.eh_frame:0000000000007530                 db 0C0h
.eh_frame:0000000000007531                 db    0
.eh_frame:0000000000007532                 db    0
.eh_frame:0000000000007533                 db    0
.eh_frame:0000000000007534                 db  2Ch ; ,
.eh_frame:0000000000007535                 db 0B1h
.eh_frame:0000000000007536                 db 0FFh
.eh_frame:0000000000007537                 db 0FFh
.eh_frame:0000000000007538                 db 0E8h
.eh_frame:0000000000007539                 db    1
.eh_frame:000000000000753A                 db    0
.eh_frame:000000000000753B                 db    0
.eh_frame:000000000000753C                 db    0
.eh_frame:000000000000753D                 db  42h ; B
.eh_frame:000000000000753E                 db  0Eh
.eh_frame:000000000000753F                 db  10h
.eh_frame:0000000000007540                 db  8Ch
.eh_frame:0000000000007541                 db    2
.eh_frame:0000000000007542                 db  41h ; A
.eh_frame:0000000000007543                 db  0Eh
.eh_frame:0000000000007544                 db  18h
.eh_frame:0000000000007545                 db  86h
.eh_frame:0000000000007546                 db    3
.eh_frame:0000000000007547                 db  41h ; A
.eh_frame:0000000000007548                 db  0Eh
.eh_frame:0000000000007549                 db  20h
.eh_frame:000000000000754A                 db  83h
.eh_frame:000000000000754B                 db    4
.eh_frame:000000000000754C                 db  46h ; F
.eh_frame:000000000000754D                 db  0Eh
.eh_frame:000000000000754E                 db  50h ; P
.eh_frame:000000000000754F                 db    2
.eh_frame:0000000000007550                 db  7Eh ; ~
.eh_frame:0000000000007551                 db  0Ah
.eh_frame:0000000000007552                 db  0Eh
.eh_frame:0000000000007553                 db  20h
.eh_frame:0000000000007554                 db  41h ; A
.eh_frame:0000000000007555                 db  0Eh
.eh_frame:0000000000007556                 db  18h
.eh_frame:0000000000007557                 db  41h ; A
.eh_frame:0000000000007558                 db  0Eh
.eh_frame:0000000000007559                 db  10h
.eh_frame:000000000000755A                 db  42h ; B
.eh_frame:000000000000755B                 db  0Eh
.eh_frame:000000000000755C                 db    8
.eh_frame:000000000000755D                 db  44h ; D
.eh_frame:000000000000755E                 db  0Bh
.eh_frame:000000000000755F                 db    0
.eh_frame:0000000000007560                 db  28h ; (
.eh_frame:0000000000007561                 db    0
.eh_frame:0000000000007562                 db    0
.eh_frame:0000000000007563                 db    0
.eh_frame:0000000000007564                 db 0F4h
.eh_frame:0000000000007565                 db    0
.eh_frame:0000000000007566                 db    0
.eh_frame:0000000000007567                 db    0
.eh_frame:0000000000007568                 db 0E8h
.eh_frame:0000000000007569                 db 0B2h
.eh_frame:000000000000756A                 db 0FFh
.eh_frame:000000000000756B                 db 0FFh
.eh_frame:000000000000756C                 db 0FAh
.eh_frame:000000000000756D                 db    3
.eh_frame:000000000000756E                 db    0
.eh_frame:000000000000756F                 db    0
.eh_frame:0000000000007570                 db    0
.eh_frame:0000000000007571                 db  42h ; B
.eh_frame:0000000000007572                 db  0Eh
.eh_frame:0000000000007573                 db  10h
.eh_frame:0000000000007574                 db  8Dh
.eh_frame:0000000000007575                 db    2
.eh_frame:0000000000007576                 db  42h ; B
.eh_frame:0000000000007577                 db  0Eh
.eh_frame:0000000000007578                 db  18h
.eh_frame:0000000000007579                 db  8Ch
.eh_frame:000000000000757A                 db    3
.eh_frame:000000000000757B                 db  46h ; F
.eh_frame:000000000000757C                 db  0Eh
.eh_frame:000000000000757D                 db  20h
.eh_frame:000000000000757E                 db  86h
.eh_frame:000000000000757F                 db    4
.eh_frame:0000000000007580                 db  41h ; A
.eh_frame:0000000000007581                 db  0Eh
.eh_frame:0000000000007582                 db  28h ; (
.eh_frame:0000000000007583                 db  83h
.eh_frame:0000000000007584                 db    5
.eh_frame:0000000000007585                 db  49h ; I
.eh_frame:0000000000007586                 db  0Eh
.eh_frame:0000000000007587                 db 0B0h
.eh_frame:0000000000007588                 db    1
.eh_frame:0000000000007589                 db    0
.eh_frame:000000000000758A                 db    0
.eh_frame:000000000000758B                 db    0
.eh_frame:000000000000758C                 db  20h
.eh_frame:000000000000758D                 db    0
.eh_frame:000000000000758E                 db    0
.eh_frame:000000000000758F                 db    0
.eh_frame:0000000000007590                 db  20h
.eh_frame:0000000000007591                 db    1
.eh_frame:0000000000007592                 db    0
.eh_frame:0000000000007593                 db    0
.eh_frame:0000000000007594                 db 0BCh
.eh_frame:0000000000007595                 db 0B6h
.eh_frame:0000000000007596                 db 0FFh
.eh_frame:0000000000007597                 db 0FFh
.eh_frame:0000000000007598                 db 0F0h
.eh_frame:0000000000007599                 db    0
.eh_frame:000000000000759A                 db    0
.eh_frame:000000000000759B                 db    0
.eh_frame:000000000000759C                 db    0
.eh_frame:000000000000759D                 db  41h ; A
.eh_frame:000000000000759E                 db  0Eh
.eh_frame:000000000000759F                 db  10h
.eh_frame:00000000000075A0                 db  83h
.eh_frame:00000000000075A1                 db    2
.eh_frame:00000000000075A2                 db  47h ; G
.eh_frame:00000000000075A3                 db  0Eh
.eh_frame:00000000000075A4                 db  30h ; 0
.eh_frame:00000000000075A5                 db    2
.eh_frame:00000000000075A6                 db  7Ch ; |
.eh_frame:00000000000075A7                 db  0Ah
.eh_frame:00000000000075A8                 db  0Eh
.eh_frame:00000000000075A9                 db  10h
.eh_frame:00000000000075AA                 db  41h ; A
.eh_frame:00000000000075AB                 db  0Eh
.eh_frame:00000000000075AC                 db    8
.eh_frame:00000000000075AD                 db  4Bh ; K
.eh_frame:00000000000075AE                 db  0Bh
.eh_frame:00000000000075AF                 db    0
.eh_frame:00000000000075B0                 db  3Ch ; <
.eh_frame:00000000000075B1                 db    0
.eh_frame:00000000000075B2                 db    0
.eh_frame:00000000000075B3                 db    0
.eh_frame:00000000000075B4                 db  44h ; D
.eh_frame:00000000000075B5                 db    1
.eh_frame:00000000000075B6                 db    0
.eh_frame:00000000000075B7                 db    0
.eh_frame:00000000000075B8                 db 0A8h
.eh_frame:00000000000075B9                 db 0A7h
.eh_frame:00000000000075BA                 db 0FFh
.eh_frame:00000000000075BB                 db 0FFh
.eh_frame:00000000000075BC                 db 0FCh
.eh_frame:00000000000075BD                 db    5
.eh_frame:00000000000075BE                 db    0
.eh_frame:00000000000075BF                 db    0
.eh_frame:00000000000075C0                 db    0
.eh_frame:00000000000075C1                 db  42h ; B
.eh_frame:00000000000075C2                 db  0Eh
.eh_frame:00000000000075C3                 db  10h
.eh_frame:00000000000075C4                 db  8Dh
.eh_frame:00000000000075C5                 db    2
.eh_frame:00000000000075C6                 db  42h ; B
.eh_frame:00000000000075C7                 db  0Eh
.eh_frame:00000000000075C8                 db  18h
.eh_frame:00000000000075C9                 db  8Ch
.eh_frame:00000000000075CA                 db    3
.eh_frame:00000000000075CB                 db  41h ; A
.eh_frame:00000000000075CC                 db  0Eh
.eh_frame:00000000000075CD                 db  20h
.eh_frame:00000000000075CE                 db  86h
.eh_frame:00000000000075CF                 db    4
.eh_frame:00000000000075D0                 db  41h ; A
.eh_frame:00000000000075D1                 db  0Eh
.eh_frame:00000000000075D2                 db  28h ; (
.eh_frame:00000000000075D3                 db  83h
.eh_frame:00000000000075D4                 db    5
.eh_frame:00000000000075D5                 db  4Ch ; L
.eh_frame:00000000000075D6                 db  0Eh
.eh_frame:00000000000075D7                 db  90h
.eh_frame:00000000000075D8                 db    3
.eh_frame:00000000000075D9                 db    3
.eh_frame:00000000000075DA                 db  64h ; d
.eh_frame:00000000000075DB                 db    3
.eh_frame:00000000000075DC                 db  0Ah
.eh_frame:00000000000075DD                 db  0Eh
.eh_frame:00000000000075DE                 db  28h ; (
.eh_frame:00000000000075DF                 db  41h ; A
.eh_frame:00000000000075E0                 db  0Eh
.eh_frame:00000000000075E1                 db  20h
.eh_frame:00000000000075E2                 db  41h ; A
.eh_frame:00000000000075E3                 db  0Eh
.eh_frame:00000000000075E4                 db  18h
.eh_frame:00000000000075E5                 db  42h ; B
.eh_frame:00000000000075E6                 db  0Eh
.eh_frame:00000000000075E7                 db  10h
.eh_frame:00000000000075E8                 db  42h ; B
.eh_frame:00000000000075E9                 db  0Eh
.eh_frame:00000000000075EA                 db    8
.eh_frame:00000000000075EB                 db  41h ; A
.eh_frame:00000000000075EC                 db  0Bh
.eh_frame:00000000000075ED                 db    0
.eh_frame:00000000000075EE                 db    0
.eh_frame:00000000000075EF                 db    0
.eh_frame:00000000000075F0                 db  4Ch ; L
.eh_frame:00000000000075F1                 db    0
.eh_frame:00000000000075F2                 db    0
.eh_frame:00000000000075F3                 db    0
.eh_frame:00000000000075F4                 db  84h
.eh_frame:00000000000075F5                 db    1
.eh_frame:00000000000075F6                 db    0
.eh_frame:00000000000075F7                 db    0
.eh_frame:00000000000075F8                 db  48h ; H
.eh_frame:00000000000075F9                 db 0B7h
.eh_frame:00000000000075FA                 db 0FFh
.eh_frame:00000000000075FB                 db 0FFh
.eh_frame:00000000000075FC                 db 0E1h
.eh_frame:00000000000075FD                 db    1
.eh_frame:00000000000075FE                 db    0
.eh_frame:00000000000075FF                 db    0
.eh_frame:0000000000007600                 db    0
.eh_frame:0000000000007601                 db  42h ; B
.eh_frame:0000000000007602                 db  0Eh
.eh_frame:0000000000007603                 db  10h
.eh_frame:0000000000007604                 db  8Fh
.eh_frame:0000000000007605                 db    2
.eh_frame:0000000000007606                 db  42h ; B
.eh_frame:0000000000007607                 db  0Eh
.eh_frame:0000000000007608                 db  18h
.eh_frame:0000000000007609                 db  8Eh
.eh_frame:000000000000760A                 db    3
.eh_frame:000000000000760B                 db  45h ; E
.eh_frame:000000000000760C                 db  0Eh
.eh_frame:000000000000760D                 db  20h
.eh_frame:000000000000760E                 db  8Dh
.eh_frame:000000000000760F                 db    4
.eh_frame:0000000000007610                 db  42h ; B
.eh_frame:0000000000007611                 db  0Eh
.eh_frame:0000000000007612                 db  28h ; (
.eh_frame:0000000000007613                 db  8Ch
.eh_frame:0000000000007614                 db    5
.eh_frame:0000000000007615                 db  41h ; A
.eh_frame:0000000000007616                 db  0Eh
.eh_frame:0000000000007617                 db  30h ; 0
.eh_frame:0000000000007618                 db  86h
.eh_frame:0000000000007619                 db    6
.eh_frame:000000000000761A                 db  41h ; A
.eh_frame:000000000000761B                 db  0Eh
.eh_frame:000000000000761C                 db  38h ; 8
.eh_frame:000000000000761D                 db  83h
.eh_frame:000000000000761E                 db    7
.eh_frame:000000000000761F                 db  47h ; G
.eh_frame:0000000000007620                 db  0Eh
.eh_frame:0000000000007621                 db  60h ; `
.eh_frame:0000000000007622                 db    3
.eh_frame:0000000000007623                 db  44h ; D
.eh_frame:0000000000007624                 db    1
.eh_frame:0000000000007625                 db  0Ah
.eh_frame:0000000000007626                 db  0Eh
.eh_frame:0000000000007627                 db  38h ; 8
.eh_frame:0000000000007628                 db  41h ; A
.eh_frame:0000000000007629                 db  0Eh
.eh_frame:000000000000762A                 db  30h ; 0
.eh_frame:000000000000762B                 db  41h ; A
.eh_frame:000000000000762C                 db  0Eh
.eh_frame:000000000000762D                 db  28h ; (
.eh_frame:000000000000762E                 db  42h ; B
.eh_frame:000000000000762F                 db  0Eh
.eh_frame:0000000000007630                 db  20h
.eh_frame:0000000000007631                 db  42h ; B
.eh_frame:0000000000007632                 db  0Eh
.eh_frame:0000000000007633                 db  18h
.eh_frame:0000000000007634                 db  42h ; B
.eh_frame:0000000000007635                 db  0Eh
.eh_frame:0000000000007636                 db  10h
.eh_frame:0000000000007637                 db  42h ; B
.eh_frame:0000000000007638                 db  0Eh
.eh_frame:0000000000007639                 db    8
.eh_frame:000000000000763A                 db  46h ; F
.eh_frame:000000000000763B                 db  0Bh
.eh_frame:000000000000763C                 db    0
.eh_frame:000000000000763D                 db    0
.eh_frame:000000000000763E                 db    0
.eh_frame:000000000000763F                 db    0
.eh_frame:0000000000007640                 db  3Ch ; <
.eh_frame:0000000000007641                 db    0
.eh_frame:0000000000007642                 db    0
.eh_frame:0000000000007643                 db    0
.eh_frame:0000000000007644                 db 0D4h
.eh_frame:0000000000007645                 db    1
.eh_frame:0000000000007646                 db    0
.eh_frame:0000000000007647                 db    0
.eh_frame:0000000000007648                 db 0E8h
.eh_frame:0000000000007649                 db 0B8h
.eh_frame:000000000000764A                 db 0FFh
.eh_frame:000000000000764B                 db 0FFh
.eh_frame:000000000000764C                 db 0B3h
.eh_frame:000000000000764D                 db    0
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db    0
.eh_frame:0000000000007651                 db  42h ; B
.eh_frame:0000000000007652                 db  0Eh
.eh_frame:0000000000007653                 db  10h
.eh_frame:0000000000007654                 db  8Dh
.eh_frame:0000000000007655                 db    2
.eh_frame:0000000000007656                 db  42h ; B
.eh_frame:0000000000007657                 db  0Eh
.eh_frame:0000000000007658                 db  18h
.eh_frame:0000000000007659                 db  8Ch
.eh_frame:000000000000765A                 db    3
.eh_frame:000000000000765B                 db  41h ; A
.eh_frame:000000000000765C                 db  0Eh
.eh_frame:000000000000765D                 db  20h
.eh_frame:000000000000765E                 db  86h
.eh_frame:000000000000765F                 db    4
.eh_frame:0000000000007660                 db  41h ; A
.eh_frame:0000000000007661                 db  0Eh
.eh_frame:0000000000007662                 db  28h ; (
.eh_frame:0000000000007663                 db  83h
.eh_frame:0000000000007664                 db    5
.eh_frame:0000000000007665                 db  4Ah ; J
.eh_frame:0000000000007666                 db  0Eh
.eh_frame:0000000000007667                 db  60h ; `
.eh_frame:0000000000007668                 db    2
.eh_frame:0000000000007669                 db  4Dh ; M
.eh_frame:000000000000766A                 db  0Ah
.eh_frame:000000000000766B                 db  0Eh
.eh_frame:000000000000766C                 db  28h ; (
.eh_frame:000000000000766D                 db  41h ; A
.eh_frame:000000000000766E                 db  0Eh
.eh_frame:000000000000766F                 db  20h
.eh_frame:0000000000007670                 db  41h ; A
.eh_frame:0000000000007671                 db  0Eh
.eh_frame:0000000000007672                 db  18h
.eh_frame:0000000000007673                 db  42h ; B
.eh_frame:0000000000007674                 db  0Eh
.eh_frame:0000000000007675                 db  10h
.eh_frame:0000000000007676                 db  42h ; B
.eh_frame:0000000000007677                 db  0Eh
.eh_frame:0000000000007678                 db    8
.eh_frame:0000000000007679                 db  45h ; E
.eh_frame:000000000000767A                 db  0Bh
.eh_frame:000000000000767B                 db    0
.eh_frame:000000000000767C                 db    0
.eh_frame:000000000000767D                 db    0
.eh_frame:000000000000767E                 db    0
.eh_frame:000000000000767F                 db    0
.eh_frame:0000000000007680                 db  10h
.eh_frame:0000000000007681                 db    0
.eh_frame:0000000000007682                 db    0
.eh_frame:0000000000007683                 db    0
.eh_frame:0000000000007684                 db  14h
.eh_frame:0000000000007685                 db    2
.eh_frame:0000000000007686                 db    0
.eh_frame:0000000000007687                 db    0
.eh_frame:0000000000007688                 db  68h ; h
.eh_frame:0000000000007689                 db 0B9h
.eh_frame:000000000000768A                 db 0FFh
.eh_frame:000000000000768B                 db 0FFh
.eh_frame:000000000000768C                 db    8
.eh_frame:000000000000768D                 db    0
.eh_frame:000000000000768E                 db    0
.eh_frame:000000000000768F                 db    0
.eh_frame:0000000000007690                 db    0
.eh_frame:0000000000007691                 db    0
.eh_frame:0000000000007692                 db    0
.eh_frame:0000000000007693                 db    0
.eh_frame:0000000000007694                 db  10h
.eh_frame:0000000000007695                 db    0
.eh_frame:0000000000007696                 db    0
.eh_frame:0000000000007697                 db    0
.eh_frame:0000000000007698                 db  28h ; (
.eh_frame:0000000000007699                 db    2
.eh_frame:000000000000769A                 db    0
.eh_frame:000000000000769B                 db    0
.eh_frame:000000000000769C                 db  64h ; d
.eh_frame:000000000000769D                 db 0B9h
.eh_frame:000000000000769E                 db 0FFh
.eh_frame:000000000000769F                 db 0FFh
.eh_frame:00000000000076A0                 db    8
.eh_frame:00000000000076A1                 db    0
.eh_frame:00000000000076A2                 db    0
.eh_frame:00000000000076A3                 db    0
.eh_frame:00000000000076A4                 db    0
.eh_frame:00000000000076A5                 db    0
.eh_frame:00000000000076A6                 db    0
.eh_frame:00000000000076A7                 db    0
.eh_frame:00000000000076A8                 db  2Ch ; ,
.eh_frame:00000000000076A9                 db    0
.eh_frame:00000000000076AA                 db    0
.eh_frame:00000000000076AB                 db    0
.eh_frame:00000000000076AC                 db  3Ch ; <
.eh_frame:00000000000076AD                 db    2
.eh_frame:00000000000076AE                 db    0
.eh_frame:00000000000076AF                 db    0
.eh_frame:00000000000076B0                 db  60h ; `
.eh_frame:00000000000076B1                 db 0B9h
.eh_frame:00000000000076B2                 db 0FFh
.eh_frame:00000000000076B3                 db 0FFh
.eh_frame:00000000000076B4                 db 0A4h
.eh_frame:00000000000076B5                 db    0
.eh_frame:00000000000076B6                 db    0
.eh_frame:00000000000076B7                 db    0
.eh_frame:00000000000076B8                 db    0
.eh_frame:00000000000076B9                 db  41h ; A
.eh_frame:00000000000076BA                 db  0Eh
.eh_frame:00000000000076BB                 db  10h
.eh_frame:00000000000076BC                 db  86h
.eh_frame:00000000000076BD                 db    2
.eh_frame:00000000000076BE                 db  41h ; A
.eh_frame:00000000000076BF                 db  0Eh
.eh_frame:00000000000076C0                 db  18h
.eh_frame:00000000000076C1                 db  83h
.eh_frame:00000000000076C2                 db    3
.eh_frame:00000000000076C3                 db  44h ; D
.eh_frame:00000000000076C4                 db  0Eh
.eh_frame:00000000000076C5                 db  20h
.eh_frame:00000000000076C6                 db  7Ah ; z
.eh_frame:00000000000076C7                 db  0Ah
.eh_frame:00000000000076C8                 db  0Eh
.eh_frame:00000000000076C9                 db  18h
.eh_frame:00000000000076CA                 db  41h ; A
.eh_frame:00000000000076CB                 db  0Eh
.eh_frame:00000000000076CC                 db  10h
.eh_frame:00000000000076CD                 db  41h ; A
.eh_frame:00000000000076CE                 db  0Eh
.eh_frame:00000000000076CF                 db    8
.eh_frame:00000000000076D0                 db  41h ; A
.eh_frame:00000000000076D1                 db  0Bh
.eh_frame:00000000000076D2                 db    0
.eh_frame:00000000000076D3                 db    0
.eh_frame:00000000000076D4                 db    0
.eh_frame:00000000000076D5                 db    0
.eh_frame:00000000000076D6                 db    0
.eh_frame:00000000000076D7                 db    0
.eh_frame:00000000000076D8                 db  14h
.eh_frame:00000000000076D9                 db    0
.eh_frame:00000000000076DA                 db    0
.eh_frame:00000000000076DB                 db    0
.eh_frame:00000000000076DC                 db  6Ch ; l
.eh_frame:00000000000076DD                 db    2
.eh_frame:00000000000076DE                 db    0
.eh_frame:00000000000076DF                 db    0
.eh_frame:00000000000076E0                 db 0E0h
.eh_frame:00000000000076E1                 db 0B9h
.eh_frame:00000000000076E2                 db 0FFh
.eh_frame:00000000000076E3                 db 0FFh
.eh_frame:00000000000076E4                 db 0BCh
.eh_frame:00000000000076E5                 db    0
.eh_frame:00000000000076E6                 db    0
.eh_frame:00000000000076E7                 db    0
.eh_frame:00000000000076E8                 db    0
.eh_frame:00000000000076E9                 db    0
.eh_frame:00000000000076EA                 db    0
.eh_frame:00000000000076EB                 db    0
.eh_frame:00000000000076EC                 db    0
.eh_frame:00000000000076ED                 db    0
.eh_frame:00000000000076EE                 db    0
.eh_frame:00000000000076EF                 db    0
.eh_frame:00000000000076F0                 db  1Ch
.eh_frame:00000000000076F1                 db    0
.eh_frame:00000000000076F2                 db    0
.eh_frame:00000000000076F3                 db    0
.eh_frame:00000000000076F4                 db  84h
.eh_frame:00000000000076F5                 db    2
.eh_frame:00000000000076F6                 db    0
.eh_frame:00000000000076F7                 db    0
.eh_frame:00000000000076F8                 db  88h
.eh_frame:00000000000076F9                 db 0BAh
.eh_frame:00000000000076FA                 db 0FFh
.eh_frame:00000000000076FB                 db 0FFh
.eh_frame:00000000000076FC                 db  9Fh
.eh_frame:00000000000076FD                 db    0
.eh_frame:00000000000076FE                 db    0
.eh_frame:00000000000076FF                 db    0
.eh_frame:0000000000007700                 db    0
.eh_frame:0000000000007701                 db  44h ; D
.eh_frame:0000000000007702                 db  0Eh
.eh_frame:0000000000007703                 db  10h
.eh_frame:0000000000007704                 db  83h
.eh_frame:0000000000007705                 db    2
.eh_frame:0000000000007706                 db    2
.eh_frame:0000000000007707                 db  78h ; x
.eh_frame:0000000000007708                 db  0Ah
.eh_frame:0000000000007709                 db  0Eh
.eh_frame:000000000000770A                 db    8
.eh_frame:000000000000770B                 db  41h ; A
.eh_frame:000000000000770C                 db  0Bh
.eh_frame:000000000000770D                 db    0
.eh_frame:000000000000770E                 db    0
.eh_frame:000000000000770F                 db    0
.eh_frame:0000000000007710                 db  40h ; @
.eh_frame:0000000000007711                 db    0
.eh_frame:0000000000007712                 db    0
.eh_frame:0000000000007713                 db    0
.eh_frame:0000000000007714                 db 0A4h
.eh_frame:0000000000007715                 db    2
.eh_frame:0000000000007716                 db    0
.eh_frame:0000000000007717                 db    0
.eh_frame:0000000000007718                 db    8
.eh_frame:0000000000007719                 db 0BBh
.eh_frame:000000000000771A                 db 0FFh
.eh_frame:000000000000771B                 db 0FFh
.eh_frame:000000000000771C                 db 0E7h
.eh_frame:000000000000771D                 db    0
.eh_frame:000000000000771E                 db    0
.eh_frame:000000000000771F                 db    0
.eh_frame:0000000000007720                 db    0
.eh_frame:0000000000007721                 db  41h ; A
.eh_frame:0000000000007722                 db  0Eh
.eh_frame:0000000000007723                 db  10h
.eh_frame:0000000000007724                 db  86h
.eh_frame:0000000000007725                 db    2
.eh_frame:0000000000007726                 db  41h ; A
.eh_frame:0000000000007727                 db  0Eh
.eh_frame:0000000000007728                 db  18h
.eh_frame:0000000000007729                 db  83h
.eh_frame:000000000000772A                 db    3
.eh_frame:000000000000772B                 db  49h ; I
.eh_frame:000000000000772C                 db  0Eh
.eh_frame:000000000000772D                 db  20h
.eh_frame:000000000000772E                 db  6Eh ; n
.eh_frame:000000000000772F                 db  0Ah
.eh_frame:0000000000007730                 db  0Eh
.eh_frame:0000000000007731                 db  18h
.eh_frame:0000000000007732                 db  41h ; A
.eh_frame:0000000000007733                 db  0Eh
.eh_frame:0000000000007734                 db  10h
.eh_frame:0000000000007735                 db  41h ; A
.eh_frame:0000000000007736                 db  0Eh
.eh_frame:0000000000007737                 db    8
.eh_frame:0000000000007738                 db  45h ; E
.eh_frame:0000000000007739                 db  0Bh
.eh_frame:000000000000773A                 db    2
.eh_frame:000000000000773B                 db  4Ah ; J
.eh_frame:000000000000773C                 db  0Ah
.eh_frame:000000000000773D                 db  0Eh
.eh_frame:000000000000773E                 db  18h
.eh_frame:000000000000773F                 db  41h ; A
.eh_frame:0000000000007740                 db  0Eh
.eh_frame:0000000000007741                 db  10h
.eh_frame:0000000000007742                 db  41h ; A
.eh_frame:0000000000007743                 db  0Eh
.eh_frame:0000000000007744                 db    8
.eh_frame:0000000000007745                 db  44h ; D
.eh_frame:0000000000007746                 db  0Bh
.eh_frame:0000000000007747                 db    2
.eh_frame:0000000000007748                 db  54h ; T
.eh_frame:0000000000007749                 db  0Eh
.eh_frame:000000000000774A                 db  18h
.eh_frame:000000000000774B                 db  41h ; A
.eh_frame:000000000000774C                 db  0Eh
.eh_frame:000000000000774D                 db  10h
.eh_frame:000000000000774E                 db  41h ; A
.eh_frame:000000000000774F                 db  0Eh
.eh_frame:0000000000007750                 db    8
.eh_frame:0000000000007751                 db    0
.eh_frame:0000000000007752                 db    0
.eh_frame:0000000000007753                 db    0
.eh_frame:0000000000007754                 db  74h ; t
.eh_frame:0000000000007755                 db    0
.eh_frame:0000000000007756                 db    0
.eh_frame:0000000000007757                 db    0
.eh_frame:0000000000007758                 db 0E8h
.eh_frame:0000000000007759                 db    2
.eh_frame:000000000000775A                 db    0
.eh_frame:000000000000775B                 db    0
.eh_frame:000000000000775C                 db 0B4h
.eh_frame:000000000000775D                 db 0BBh
.eh_frame:000000000000775E                 db 0FFh
.eh_frame:000000000000775F                 db 0FFh
.eh_frame:0000000000007760                 db  34h ; 4
.eh_frame:0000000000007761                 db  12h
.eh_frame:0000000000007762                 db    0
.eh_frame:0000000000007763                 db    0
.eh_frame:0000000000007764                 db    0
.eh_frame:0000000000007765                 db  42h ; B
.eh_frame:0000000000007766                 db  0Eh
.eh_frame:0000000000007767                 db  10h
.eh_frame:0000000000007768                 db  8Fh
.eh_frame:0000000000007769                 db    2
.eh_frame:000000000000776A                 db  42h ; B
.eh_frame:000000000000776B                 db  0Eh
.eh_frame:000000000000776C                 db  18h
.eh_frame:000000000000776D                 db  8Eh
.eh_frame:000000000000776E                 db    3
.eh_frame:000000000000776F                 db  45h ; E
.eh_frame:0000000000007770                 db  0Eh
.eh_frame:0000000000007771                 db  20h
.eh_frame:0000000000007772                 db  8Dh
.eh_frame:0000000000007773                 db    4
.eh_frame:0000000000007774                 db  42h ; B
.eh_frame:0000000000007775                 db  0Eh
.eh_frame:0000000000007776                 db  28h ; (
.eh_frame:0000000000007777                 db  8Ch
.eh_frame:0000000000007778                 db    5
.eh_frame:0000000000007779                 db  44h ; D
.eh_frame:000000000000777A                 db  0Eh
.eh_frame:000000000000777B                 db  30h ; 0
.eh_frame:000000000000777C                 db  86h
.eh_frame:000000000000777D                 db    6
.eh_frame:000000000000777E                 db  41h ; A
.eh_frame:000000000000777F                 db  0Eh
.eh_frame:0000000000007780                 db  38h ; 8
.eh_frame:0000000000007781                 db  83h
.eh_frame:0000000000007782                 db    7
.eh_frame:0000000000007783                 db  53h ; S
.eh_frame:0000000000007784                 db  0Eh
.eh_frame:0000000000007785                 db 0F0h
.eh_frame:0000000000007786                 db    1
.eh_frame:0000000000007787                 db    3
.eh_frame:0000000000007788                 db  81h
.eh_frame:0000000000007789                 db  0Bh
.eh_frame:000000000000778A                 db  0Eh
.eh_frame:000000000000778B                 db 0F8h
.eh_frame:000000000000778C                 db    1
.eh_frame:000000000000778D                 db  4Ah ; J
.eh_frame:000000000000778E                 db  0Eh
.eh_frame:000000000000778F                 db  80h
.eh_frame:0000000000007790                 db    2
.eh_frame:0000000000007791                 db  44h ; D
.eh_frame:0000000000007792                 db  0Eh
.eh_frame:0000000000007793                 db  88h
.eh_frame:0000000000007794                 db    2
.eh_frame:0000000000007795                 db  45h ; E
.eh_frame:0000000000007796                 db  0Eh
.eh_frame:0000000000007797                 db  90h
.eh_frame:0000000000007798                 db    2
.eh_frame:0000000000007799                 db  5Fh ; _
.eh_frame:000000000000779A                 db  0Eh
.eh_frame:000000000000779B                 db 0F0h
.eh_frame:000000000000779C                 db    1
.eh_frame:000000000000779D                 db  64h ; d
.eh_frame:000000000000779E                 db  0Ah
.eh_frame:000000000000779F                 db  0Eh
.eh_frame:00000000000077A0                 db  38h ; 8
.eh_frame:00000000000077A1                 db  41h ; A
.eh_frame:00000000000077A2                 db  0Eh
.eh_frame:00000000000077A3                 db  30h ; 0
.eh_frame:00000000000077A4                 db  41h ; A
.eh_frame:00000000000077A5                 db  0Eh
.eh_frame:00000000000077A6                 db  28h ; (
.eh_frame:00000000000077A7                 db  42h ; B
.eh_frame:00000000000077A8                 db  0Eh
.eh_frame:00000000000077A9                 db  20h
.eh_frame:00000000000077AA                 db  42h ; B
.eh_frame:00000000000077AB                 db  0Eh
.eh_frame:00000000000077AC                 db  18h
.eh_frame:00000000000077AD                 db  42h ; B
.eh_frame:00000000000077AE                 db  0Eh
.eh_frame:00000000000077AF                 db  10h
.eh_frame:00000000000077B0                 db  42h ; B
.eh_frame:00000000000077B1                 db  0Eh
.eh_frame:00000000000077B2                 db    8
.eh_frame:00000000000077B3                 db  44h ; D
.eh_frame:00000000000077B4                 db  0Bh
.eh_frame:00000000000077B5                 db    3
.eh_frame:00000000000077B6                 db  99h
.eh_frame:00000000000077B7                 db    5
.eh_frame:00000000000077B8                 db  0Eh
.eh_frame:00000000000077B9                 db 0F8h
.eh_frame:00000000000077BA                 db    1
.eh_frame:00000000000077BB                 db  4Dh ; M
.eh_frame:00000000000077BC                 db  0Eh
.eh_frame:00000000000077BD                 db  80h
.eh_frame:00000000000077BE                 db    2
.eh_frame:00000000000077BF                 db  44h ; D
.eh_frame:00000000000077C0                 db  0Eh
.eh_frame:00000000000077C1                 db  88h
.eh_frame:00000000000077C2                 db    2
.eh_frame:00000000000077C3                 db  47h ; G
.eh_frame:00000000000077C4                 db  0Eh
.eh_frame:00000000000077C5                 db  90h
.eh_frame:00000000000077C6                 db    2
.eh_frame:00000000000077C7                 db  5Bh ; [
.eh_frame:00000000000077C8                 db  0Eh
.eh_frame:00000000000077C9                 db 0F0h
.eh_frame:00000000000077CA                 db    1
.eh_frame:00000000000077CB                 db    0
.eh_frame:00000000000077CC                 db  68h ; h
.eh_frame:00000000000077CD                 db    0
.eh_frame:00000000000077CE                 db    0
.eh_frame:00000000000077CF                 db    0
.eh_frame:00000000000077D0                 db  60h ; `
.eh_frame:00000000000077D1                 db    3
.eh_frame:00000000000077D2                 db    0
.eh_frame:00000000000077D3                 db    0
.eh_frame:00000000000077D4                 db  7Ch ; |
.eh_frame:00000000000077D5                 db 0CDh
.eh_frame:00000000000077D6                 db 0FFh
.eh_frame:00000000000077D7                 db 0FFh
.eh_frame:00000000000077D8                 db 0ABh
.eh_frame:00000000000077D9                 db    1
.eh_frame:00000000000077DA                 db    0
.eh_frame:00000000000077DB                 db    0
.eh_frame:00000000000077DC                 db    0
.eh_frame:00000000000077DD                 db  42h ; B
.eh_frame:00000000000077DE                 db  0Eh
.eh_frame:00000000000077DF                 db  10h
.eh_frame:00000000000077E0                 db  8Fh
.eh_frame:00000000000077E1                 db    2
.eh_frame:00000000000077E2                 db  42h ; B
.eh_frame:00000000000077E3                 db  0Eh
.eh_frame:00000000000077E4                 db  18h
.eh_frame:00000000000077E5                 db  8Eh
.eh_frame:00000000000077E6                 db    3
.eh_frame:00000000000077E7                 db  45h ; E
.eh_frame:00000000000077E8                 db  0Eh
.eh_frame:00000000000077E9                 db  20h
.eh_frame:00000000000077EA                 db  8Dh
.eh_frame:00000000000077EB                 db    4
.eh_frame:00000000000077EC                 db  42h ; B
.eh_frame:00000000000077ED                 db  0Eh
.eh_frame:00000000000077EE                 db  28h ; (
.eh_frame:00000000000077EF                 db  8Ch
.eh_frame:00000000000077F0                 db    5
.eh_frame:00000000000077F1                 db  44h ; D
.eh_frame:00000000000077F2                 db  0Eh
.eh_frame:00000000000077F3                 db  30h ; 0
.eh_frame:00000000000077F4                 db  86h
.eh_frame:00000000000077F5                 db    6
.eh_frame:00000000000077F6                 db  41h ; A
.eh_frame:00000000000077F7                 db  0Eh
.eh_frame:00000000000077F8                 db  38h ; 8
.eh_frame:00000000000077F9                 db  83h
.eh_frame:00000000000077FA                 db    7
.eh_frame:00000000000077FB                 db  47h ; G
.eh_frame:00000000000077FC                 db  0Eh
.eh_frame:00000000000077FD                 db  60h ; `
.eh_frame:00000000000077FE                 db    2
.eh_frame:00000000000077FF                 db  99h
.eh_frame:0000000000007800                 db  0Eh
.eh_frame:0000000000007801                 db  68h ; h
.eh_frame:0000000000007802                 db  5Fh ; _
.eh_frame:0000000000007803                 db  0Eh
.eh_frame:0000000000007804                 db  70h ; p
.eh_frame:0000000000007805                 db  46h ; F
.eh_frame:0000000000007806                 db  0Eh
.eh_frame:0000000000007807                 db  78h ; x
.eh_frame:0000000000007808                 db  42h ; B
.eh_frame:0000000000007809                 db  0Eh
.eh_frame:000000000000780A                 db  80h
.eh_frame:000000000000780B                 db    1
.eh_frame:000000000000780C                 db  59h ; Y
.eh_frame:000000000000780D                 db  0Eh
.eh_frame:000000000000780E                 db  60h ; `
.eh_frame:000000000000780F                 db    2
.eh_frame:0000000000007810                 db  40h ; @
.eh_frame:0000000000007811                 db  0Eh
.eh_frame:0000000000007812                 db  68h ; h
.eh_frame:0000000000007813                 db  4Bh ; K
.eh_frame:0000000000007814                 db  0Eh
.eh_frame:0000000000007815                 db  70h ; p
.eh_frame:0000000000007816                 db  43h ; C
.eh_frame:0000000000007817                 db  0Eh
.eh_frame:0000000000007818                 db  78h ; x
.eh_frame:0000000000007819                 db  45h ; E
.eh_frame:000000000000781A                 db  0Eh
.eh_frame:000000000000781B                 db  80h
.eh_frame:000000000000781C                 db    1
.eh_frame:000000000000781D                 db  5Eh ; ^
.eh_frame:000000000000781E                 db  0Eh
.eh_frame:000000000000781F                 db  60h ; `
.eh_frame:0000000000007820                 db  4Ch ; L
.eh_frame:0000000000007821                 db  0Ah
.eh_frame:0000000000007822                 db  0Eh
.eh_frame:0000000000007823                 db  38h ; 8
.eh_frame:0000000000007824                 db  44h ; D
.eh_frame:0000000000007825                 db  0Eh
.eh_frame:0000000000007826                 db  30h ; 0
.eh_frame:0000000000007827                 db  41h ; A
.eh_frame:0000000000007828                 db  0Eh
.eh_frame:0000000000007829                 db  28h ; (
.eh_frame:000000000000782A                 db  42h ; B
.eh_frame:000000000000782B                 db  0Eh
.eh_frame:000000000000782C                 db  20h
.eh_frame:000000000000782D                 db  42h ; B
.eh_frame:000000000000782E                 db  0Eh
.eh_frame:000000000000782F                 db  18h
.eh_frame:0000000000007830                 db  42h ; B
.eh_frame:0000000000007831                 db  0Eh
.eh_frame:0000000000007832                 db  10h
.eh_frame:0000000000007833                 db  42h ; B
.eh_frame:0000000000007834                 db  0Eh
.eh_frame:0000000000007835                 db    8
.eh_frame:0000000000007836                 db  46h ; F
.eh_frame:0000000000007837                 db  0Bh
.eh_frame:0000000000007838                 db  28h ; (
.eh_frame:0000000000007839                 db    0
.eh_frame:000000000000783A                 db    0
.eh_frame:000000000000783B                 db    0
.eh_frame:000000000000783C                 db 0CCh
.eh_frame:000000000000783D                 db    3
.eh_frame:000000000000783E                 db    0
.eh_frame:000000000000783F                 db    0
.eh_frame:0000000000007840                 db 0C0h
.eh_frame:0000000000007841                 db 0CEh
.eh_frame:0000000000007842                 db 0FFh
.eh_frame:0000000000007843                 db 0FFh
.eh_frame:0000000000007844                 db  36h ; 6
.eh_frame:0000000000007845                 db    0
.eh_frame:0000000000007846                 db    0
.eh_frame:0000000000007847                 db    0
.eh_frame:0000000000007848                 db    0
.eh_frame:0000000000007849                 db  42h ; B
.eh_frame:000000000000784A                 db  0Eh
.eh_frame:000000000000784B                 db  10h
.eh_frame:000000000000784C                 db  8Ch
.eh_frame:000000000000784D                 db    2
.eh_frame:000000000000784E                 db  41h ; A
.eh_frame:000000000000784F                 db  0Eh
.eh_frame:0000000000007850                 db  18h
.eh_frame:0000000000007851                 db  86h
.eh_frame:0000000000007852                 db    3
.eh_frame:0000000000007853                 db  41h ; A
.eh_frame:0000000000007854                 db  0Eh
.eh_frame:0000000000007855                 db  20h
.eh_frame:0000000000007856                 db  83h
.eh_frame:0000000000007857                 db    4
.eh_frame:0000000000007858                 db  6Eh ; n
.eh_frame:0000000000007859                 db  0Eh
.eh_frame:000000000000785A                 db  18h
.eh_frame:000000000000785B                 db  41h ; A
.eh_frame:000000000000785C                 db  0Eh
.eh_frame:000000000000785D                 db  10h
.eh_frame:000000000000785E                 db  42h ; B
.eh_frame:000000000000785F                 db  0Eh
.eh_frame:0000000000007860                 db    8
.eh_frame:0000000000007861                 db    0
.eh_frame:0000000000007862                 db    0
.eh_frame:0000000000007863                 db    0
.eh_frame:0000000000007864                 db  10h
.eh_frame:0000000000007865                 db    0
.eh_frame:0000000000007866                 db    0
.eh_frame:0000000000007867                 db    0
.eh_frame:0000000000007868                 db 0F8h
.eh_frame:0000000000007869                 db    3
.eh_frame:000000000000786A                 db    0
.eh_frame:000000000000786B                 db    0
.eh_frame:000000000000786C                 db 0D4h
.eh_frame:000000000000786D                 db 0CEh
.eh_frame:000000000000786E                 db 0FFh
.eh_frame:000000000000786F                 db 0FFh
.eh_frame:0000000000007870                 db  11h
.eh_frame:0000000000007871                 db    0
.eh_frame:0000000000007872                 db    0
.eh_frame:0000000000007873                 db    0
.eh_frame:0000000000007874                 db    0
.eh_frame:0000000000007875                 db    0
.eh_frame:0000000000007876                 db    0
.eh_frame:0000000000007877                 db    0
.eh_frame:0000000000007878                 db  10h
.eh_frame:0000000000007879                 db    0
.eh_frame:000000000000787A                 db    0
.eh_frame:000000000000787B                 db    0
.eh_frame:000000000000787C                 db  0Ch
.eh_frame:000000000000787D                 db    4
.eh_frame:000000000000787E                 db    0
.eh_frame:000000000000787F                 db    0
.eh_frame:0000000000007880                 db 0E0h
.eh_frame:0000000000007881                 db 0CEh
.eh_frame:0000000000007882                 db 0FFh
.eh_frame:0000000000007883                 db 0FFh
.eh_frame:0000000000007884                 db  11h
.eh_frame:0000000000007885                 db    0
.eh_frame:0000000000007886                 db    0
.eh_frame:0000000000007887                 db    0
.eh_frame:0000000000007888                 db    0
.eh_frame:0000000000007889                 db    0
.eh_frame:000000000000788A                 db    0
.eh_frame:000000000000788B                 db    0
.eh_frame:000000000000788C                 db  10h
.eh_frame:000000000000788D                 db    0
.eh_frame:000000000000788E                 db    0
.eh_frame:000000000000788F                 db    0
.eh_frame:0000000000007890                 db  20h
.eh_frame:0000000000007891                 db    4
.eh_frame:0000000000007892                 db    0
.eh_frame:0000000000007893                 db    0
.eh_frame:0000000000007894                 db 0ECh
.eh_frame:0000000000007895                 db 0CEh
.eh_frame:0000000000007896                 db 0FFh
.eh_frame:0000000000007897                 db 0FFh
.eh_frame:0000000000007898                 db  35h ; 5
.eh_frame:0000000000007899                 db    0
.eh_frame:000000000000789A                 db    0
.eh_frame:000000000000789B                 db    0
.eh_frame:000000000000789C                 db    0
.eh_frame:000000000000789D                 db    0
.eh_frame:000000000000789E                 db    0
.eh_frame:000000000000789F                 db    0
.eh_frame:00000000000078A0                 db  10h
.eh_frame:00000000000078A1                 db    0
.eh_frame:00000000000078A2                 db    0
.eh_frame:00000000000078A3                 db    0
.eh_frame:00000000000078A4                 db  34h ; 4
.eh_frame:00000000000078A5                 db    4
.eh_frame:00000000000078A6                 db    0
.eh_frame:00000000000078A7                 db    0
.eh_frame:00000000000078A8                 db  18h
.eh_frame:00000000000078A9                 db 0CFh
.eh_frame:00000000000078AA                 db 0FFh
.eh_frame:00000000000078AB                 db 0FFh
.eh_frame:00000000000078AC                 db  15h
.eh_frame:00000000000078AD                 db    0
.eh_frame:00000000000078AE                 db    0
.eh_frame:00000000000078AF                 db    0
.eh_frame:00000000000078B0                 db    0
.eh_frame:00000000000078B1                 db    0
.eh_frame:00000000000078B2                 db    0
.eh_frame:00000000000078B3                 db    0
.eh_frame:00000000000078B4                 db  10h
.eh_frame:00000000000078B5                 db    0
.eh_frame:00000000000078B6                 db    0
.eh_frame:00000000000078B7                 db    0
.eh_frame:00000000000078B8                 db  48h ; H
.eh_frame:00000000000078B9                 db    4
.eh_frame:00000000000078BA                 db    0
.eh_frame:00000000000078BB                 db    0
.eh_frame:00000000000078BC                 db  24h ; $
.eh_frame:00000000000078BD                 db 0CFh
.eh_frame:00000000000078BE                 db 0FFh
.eh_frame:00000000000078BF                 db 0FFh
.eh_frame:00000000000078C0                 db  30h ; 0
.eh_frame:00000000000078C1                 db    0
.eh_frame:00000000000078C2                 db    0
.eh_frame:00000000000078C3                 db    0
.eh_frame:00000000000078C4                 db    0
.eh_frame:00000000000078C5                 db  6Bh ; k
.eh_frame:00000000000078C6                 db  0Eh
.eh_frame:00000000000078C7                 db  10h
.eh_frame:00000000000078C8                 db  50h ; P
.eh_frame:00000000000078C9                 db    0
.eh_frame:00000000000078CA                 db    0
.eh_frame:00000000000078CB                 db    0
.eh_frame:00000000000078CC                 db  5Ch ; \
.eh_frame:00000000000078CD                 db    4
.eh_frame:00000000000078CE                 db    0
.eh_frame:00000000000078CF                 db    0
.eh_frame:00000000000078D0                 db  40h ; @
.eh_frame:00000000000078D1                 db 0CFh
.eh_frame:00000000000078D2                 db 0FFh
.eh_frame:00000000000078D3                 db 0FFh
.eh_frame:00000000000078D4                 db  74h ; t
.eh_frame:00000000000078D5                 db    0
.eh_frame:00000000000078D6                 db    0
.eh_frame:00000000000078D7                 db    0
.eh_frame:00000000000078D8                 db    0
.eh_frame:00000000000078D9                 db  42h ; B
.eh_frame:00000000000078DA                 db  0Eh
.eh_frame:00000000000078DB                 db  10h
.eh_frame:00000000000078DC                 db  8Fh
.eh_frame:00000000000078DD                 db    2
.eh_frame:00000000000078DE                 db  42h ; B
.eh_frame:00000000000078DF                 db  0Eh
.eh_frame:00000000000078E0                 db  18h
.eh_frame:00000000000078E1                 db  8Eh
.eh_frame:00000000000078E2                 db    3
.eh_frame:00000000000078E3                 db  49h ; I
.eh_frame:00000000000078E4                 db  0Eh
.eh_frame:00000000000078E5                 db  20h
.eh_frame:00000000000078E6                 db  8Dh
.eh_frame:00000000000078E7                 db    4
.eh_frame:00000000000078E8                 db  42h ; B
.eh_frame:00000000000078E9                 db  0Eh
.eh_frame:00000000000078EA                 db  28h ; (
.eh_frame:00000000000078EB                 db  8Ch
.eh_frame:00000000000078EC                 db    5
.eh_frame:00000000000078ED                 db  44h ; D
.eh_frame:00000000000078EE                 db  0Eh
.eh_frame:00000000000078EF                 db  30h ; 0
.eh_frame:00000000000078F0                 db  86h
.eh_frame:00000000000078F1                 db    6
.eh_frame:00000000000078F2                 db  41h ; A
.eh_frame:00000000000078F3                 db  0Eh
.eh_frame:00000000000078F4                 db  38h ; 8
.eh_frame:00000000000078F5                 db  83h
.eh_frame:00000000000078F6                 db    7
.eh_frame:00000000000078F7                 db  4Dh ; M
.eh_frame:00000000000078F8                 db  0Eh
.eh_frame:00000000000078F9                 db  50h ; P
.eh_frame:00000000000078FA                 db  5Fh ; _
.eh_frame:00000000000078FB                 db  0Eh
.eh_frame:00000000000078FC                 db  58h ; X
.eh_frame:00000000000078FD                 db  47h ; G
.eh_frame:00000000000078FE                 db  0Eh
.eh_frame:00000000000078FF                 db  60h ; `
.eh_frame:0000000000007900                 db  46h ; F
.eh_frame:0000000000007901                 db  0Eh
.eh_frame:0000000000007902                 db  68h ; h
.eh_frame:0000000000007903                 db  44h ; D
.eh_frame:0000000000007904                 db  0Eh
.eh_frame:0000000000007905                 db  70h ; p
.eh_frame:0000000000007906                 db  58h ; X
.eh_frame:0000000000007907                 db  0Eh
.eh_frame:0000000000007908                 db  38h ; 8
.eh_frame:0000000000007909                 db  41h ; A
.eh_frame:000000000000790A                 db  0Eh
.eh_frame:000000000000790B                 db  30h ; 0
.eh_frame:000000000000790C                 db  41h ; A
.eh_frame:000000000000790D                 db  0Eh
.eh_frame:000000000000790E                 db  28h ; (
.eh_frame:000000000000790F                 db  42h ; B
.eh_frame:0000000000007910                 db  0Eh
.eh_frame:0000000000007911                 db  20h
.eh_frame:0000000000007912                 db  42h ; B
.eh_frame:0000000000007913                 db  0Eh
.eh_frame:0000000000007914                 db  18h
.eh_frame:0000000000007915                 db  42h ; B
.eh_frame:0000000000007916                 db  0Eh
.eh_frame:0000000000007917                 db  10h
.eh_frame:0000000000007918                 db  42h ; B
.eh_frame:0000000000007919                 db  0Eh
.eh_frame:000000000000791A                 db    8
.eh_frame:000000000000791B                 db    0
.eh_frame:000000000000791C                 db  68h ; h
.eh_frame:000000000000791D                 db    0
.eh_frame:000000000000791E                 db    0
.eh_frame:000000000000791F                 db    0
.eh_frame:0000000000007920                 db 0B0h
.eh_frame:0000000000007921                 db    4
.eh_frame:0000000000007922                 db    0
.eh_frame:0000000000007923                 db    0
.eh_frame:0000000000007924                 db  6Ch ; l
.eh_frame:0000000000007925                 db 0CFh
.eh_frame:0000000000007926                 db 0FFh
.eh_frame:0000000000007927                 db 0FFh
.eh_frame:0000000000007928                 db 0E3h
.eh_frame:0000000000007929                 db    0
.eh_frame:000000000000792A                 db    0
.eh_frame:000000000000792B                 db    0
.eh_frame:000000000000792C                 db    0
.eh_frame:000000000000792D                 db  42h ; B
.eh_frame:000000000000792E                 db  0Eh
.eh_frame:000000000000792F                 db  10h
.eh_frame:0000000000007930                 db  8Fh
.eh_frame:0000000000007931                 db    2
.eh_frame:0000000000007932                 db  42h ; B
.eh_frame:0000000000007933                 db  0Eh
.eh_frame:0000000000007934                 db  18h
.eh_frame:0000000000007935                 db  8Eh
.eh_frame:0000000000007936                 db    3
.eh_frame:0000000000007937                 db  49h ; I
.eh_frame:0000000000007938                 db  0Eh
.eh_frame:0000000000007939                 db  20h
.eh_frame:000000000000793A                 db  8Dh
.eh_frame:000000000000793B                 db    4
.eh_frame:000000000000793C                 db  42h ; B
.eh_frame:000000000000793D                 db  0Eh
.eh_frame:000000000000793E                 db  28h ; (
.eh_frame:000000000000793F                 db  8Ch
.eh_frame:0000000000007940                 db    5
.eh_frame:0000000000007941                 db  44h ; D
.eh_frame:0000000000007942                 db  0Eh
.eh_frame:0000000000007943                 db  30h ; 0
.eh_frame:0000000000007944                 db  86h
.eh_frame:0000000000007945                 db    6
.eh_frame:0000000000007946                 db  41h ; A
.eh_frame:0000000000007947                 db  0Eh
.eh_frame:0000000000007948                 db  38h ; 8
.eh_frame:0000000000007949                 db  83h
.eh_frame:000000000000794A                 db    7
.eh_frame:000000000000794B                 db  4Dh ; M
.eh_frame:000000000000794C                 db  0Eh
.eh_frame:000000000000794D                 db  70h ; p
.eh_frame:000000000000794E                 db  65h ; e
.eh_frame:000000000000794F                 db  0Eh
.eh_frame:0000000000007950                 db  78h ; x
.eh_frame:0000000000007951                 db  4Dh ; M
.eh_frame:0000000000007952                 db  0Eh
.eh_frame:0000000000007953                 db  80h
.eh_frame:0000000000007954                 db    1
.eh_frame:0000000000007955                 db  46h ; F
.eh_frame:0000000000007956                 db  0Eh
.eh_frame:0000000000007957                 db  88h
.eh_frame:0000000000007958                 db    1
.eh_frame:0000000000007959                 db  42h ; B
.eh_frame:000000000000795A                 db  0Eh
.eh_frame:000000000000795B                 db  90h
.eh_frame:000000000000795C                 db    1
.eh_frame:000000000000795D                 db  5Eh ; ^
.eh_frame:000000000000795E                 db  0Eh
.eh_frame:000000000000795F                 db  70h ; p
.eh_frame:0000000000007960                 db  56h ; V
.eh_frame:0000000000007961                 db  0Eh
.eh_frame:0000000000007962                 db  78h ; x
.eh_frame:0000000000007963                 db  43h ; C
.eh_frame:0000000000007964                 db  0Eh
.eh_frame:0000000000007965                 db  80h
.eh_frame:0000000000007966                 db    1
.eh_frame:0000000000007967                 db  43h ; C
.eh_frame:0000000000007968                 db  0Eh
.eh_frame:0000000000007969                 db  88h
.eh_frame:000000000000796A                 db    1
.eh_frame:000000000000796B                 db  56h ; V
.eh_frame:000000000000796C                 db  0Eh
.eh_frame:000000000000796D                 db  90h
.eh_frame:000000000000796E                 db    1
.eh_frame:000000000000796F                 db  52h ; R
.eh_frame:0000000000007970                 db  0Eh
.eh_frame:0000000000007971                 db  70h ; p
.eh_frame:0000000000007972                 db  5Bh ; [
.eh_frame:0000000000007973                 db  0Eh
.eh_frame:0000000000007974                 db  38h ; 8
.eh_frame:0000000000007975                 db  41h ; A
.eh_frame:0000000000007976                 db  0Eh
.eh_frame:0000000000007977                 db  30h ; 0
.eh_frame:0000000000007978                 db  41h ; A
.eh_frame:0000000000007979                 db  0Eh
.eh_frame:000000000000797A                 db  28h ; (
.eh_frame:000000000000797B                 db  42h ; B
.eh_frame:000000000000797C                 db  0Eh
.eh_frame:000000000000797D                 db  20h
.eh_frame:000000000000797E                 db  42h ; B
.eh_frame:000000000000797F                 db  0Eh
.eh_frame:0000000000007980                 db  18h
.eh_frame:0000000000007981                 db  42h ; B
.eh_frame:0000000000007982                 db  0Eh
.eh_frame:0000000000007983                 db  10h
.eh_frame:0000000000007984                 db  42h ; B
.eh_frame:0000000000007985                 db  0Eh
.eh_frame:0000000000007986                 db    8
.eh_frame:0000000000007987                 db    0
.eh_frame:0000000000007988                 db  10h
.eh_frame:0000000000007989                 db    0
.eh_frame:000000000000798A                 db    0
.eh_frame:000000000000798B                 db    0
.eh_frame:000000000000798C                 db  1Ch
.eh_frame:000000000000798D                 db    5
.eh_frame:000000000000798E                 db    0
.eh_frame:000000000000798F                 db    0
.eh_frame:0000000000007990                 db 0F0h
.eh_frame:0000000000007991                 db 0CFh
.eh_frame:0000000000007992                 db 0FFh
.eh_frame:0000000000007993                 db 0FFh
.eh_frame:0000000000007994                 db  0Ah
.eh_frame:0000000000007995                 db    0
.eh_frame:0000000000007996                 db    0
.eh_frame:0000000000007997                 db    0
.eh_frame:0000000000007998                 db    0
.eh_frame:0000000000007999                 db    0
.eh_frame:000000000000799A                 db    0
.eh_frame:000000000000799B                 db    0
.eh_frame:000000000000799C                 db  28h ; (
.eh_frame:000000000000799D                 db    0
.eh_frame:000000000000799E                 db    0
.eh_frame:000000000000799F                 db    0
.eh_frame:00000000000079A0                 db  30h ; 0
.eh_frame:00000000000079A1                 db    5
.eh_frame:00000000000079A2                 db    0
.eh_frame:00000000000079A3                 db    0
.eh_frame:00000000000079A4                 db 0ECh
.eh_frame:00000000000079A5                 db 0CFh
.eh_frame:00000000000079A6                 db 0FFh
.eh_frame:00000000000079A7                 db 0FFh
.eh_frame:00000000000079A8                 db  93h
.eh_frame:00000000000079A9                 db    0
.eh_frame:00000000000079AA                 db    0
.eh_frame:00000000000079AB                 db    0
.eh_frame:00000000000079AC                 db    0
.eh_frame:00000000000079AD                 db  48h ; H
.eh_frame:00000000000079AE                 db  0Eh
.eh_frame:00000000000079AF                 db  10h
.eh_frame:00000000000079B0                 db  8Ch
.eh_frame:00000000000079B1                 db    2
.eh_frame:00000000000079B2                 db  48h ; H
.eh_frame:00000000000079B3                 db  0Eh
.eh_frame:00000000000079B4                 db  18h
.eh_frame:00000000000079B5                 db  86h
.eh_frame:00000000000079B6                 db    3
.eh_frame:00000000000079B7                 db  41h ; A
.eh_frame:00000000000079B8                 db  0Eh
.eh_frame:00000000000079B9                 db  20h
.eh_frame:00000000000079BA                 db  83h
.eh_frame:00000000000079BB                 db    4
.eh_frame:00000000000079BC                 db    2
.eh_frame:00000000000079BD                 db  74h ; t
.eh_frame:00000000000079BE                 db  0Eh
.eh_frame:00000000000079BF                 db  18h
.eh_frame:00000000000079C0                 db  4Bh ; K
.eh_frame:00000000000079C1                 db  0Eh
.eh_frame:00000000000079C2                 db  10h
.eh_frame:00000000000079C3                 db  42h ; B
.eh_frame:00000000000079C4                 db  0Eh
.eh_frame:00000000000079C5                 db    8
.eh_frame:00000000000079C6                 db    0
.eh_frame:00000000000079C7                 db    0
.eh_frame:00000000000079C8                 db  10h
.eh_frame:00000000000079C9                 db    0
.eh_frame:00000000000079CA                 db    0
.eh_frame:00000000000079CB                 db    0
.eh_frame:00000000000079CC                 db  5Ch ; \
.eh_frame:00000000000079CD                 db    5
.eh_frame:00000000000079CE                 db    0
.eh_frame:00000000000079CF                 db    0
.eh_frame:00000000000079D0                 db  60h ; `
.eh_frame:00000000000079D1                 db 0D0h
.eh_frame:00000000000079D2                 db 0FFh
.eh_frame:00000000000079D3                 db 0FFh
.eh_frame:00000000000079D4                 db  13h
.eh_frame:00000000000079D5                 db    0
.eh_frame:00000000000079D6                 db    0
.eh_frame:00000000000079D7                 db    0
.eh_frame:00000000000079D8                 db    0
.eh_frame:00000000000079D9                 db    0
.eh_frame:00000000000079DA                 db    0
.eh_frame:00000000000079DB                 db    0
.eh_frame:00000000000079DC                 db  10h
.eh_frame:00000000000079DD                 db    0
.eh_frame:00000000000079DE                 db    0
.eh_frame:00000000000079DF                 db    0
.eh_frame:00000000000079E0                 db  70h ; p
.eh_frame:00000000000079E1                 db    5
.eh_frame:00000000000079E2                 db    0
.eh_frame:00000000000079E3                 db    0
.eh_frame:00000000000079E4                 db  6Ch ; l
.eh_frame:00000000000079E5                 db 0D0h
.eh_frame:00000000000079E6                 db 0FFh
.eh_frame:00000000000079E7                 db 0FFh
.eh_frame:00000000000079E8                 db  0Ch
.eh_frame:00000000000079E9                 db    0
.eh_frame:00000000000079EA                 db    0
.eh_frame:00000000000079EB                 db    0
.eh_frame:00000000000079EC                 db    0
.eh_frame:00000000000079ED                 db    0
.eh_frame:00000000000079EE                 db    0
.eh_frame:00000000000079EF                 db    0
.eh_frame:00000000000079F0                 db  10h
.eh_frame:00000000000079F1                 db    0
.eh_frame:00000000000079F2                 db    0
.eh_frame:00000000000079F3                 db    0
.eh_frame:00000000000079F4                 db  84h
.eh_frame:00000000000079F5                 db    5
.eh_frame:00000000000079F6                 db    0
.eh_frame:00000000000079F7                 db    0
.eh_frame:00000000000079F8                 db  68h ; h
.eh_frame:00000000000079F9                 db 0D0h
.eh_frame:00000000000079FA                 db 0FFh
.eh_frame:00000000000079FB                 db 0FFh
.eh_frame:00000000000079FC                 db  18h
.eh_frame:00000000000079FD                 db    0
.eh_frame:00000000000079FE                 db    0
.eh_frame:00000000000079FF                 db    0
.eh_frame:0000000000007A00                 db    0
.eh_frame:0000000000007A01                 db    0
.eh_frame:0000000000007A02                 db    0
.eh_frame:0000000000007A03                 db    0
.eh_frame:0000000000007A04                 db  10h
.eh_frame:0000000000007A05                 db    0
.eh_frame:0000000000007A06                 db    0
.eh_frame:0000000000007A07                 db    0
.eh_frame:0000000000007A08                 db  98h
.eh_frame:0000000000007A09                 db    5
.eh_frame:0000000000007A0A                 db    0
.eh_frame:0000000000007A0B                 db    0
.eh_frame:0000000000007A0C                 db  74h ; t
.eh_frame:0000000000007A0D                 db 0D0h
.eh_frame:0000000000007A0E                 db 0FFh
.eh_frame:0000000000007A0F                 db 0FFh
.eh_frame:0000000000007A10                 db  14h
.eh_frame:0000000000007A11                 db    0
.eh_frame:0000000000007A12                 db    0
.eh_frame:0000000000007A13                 db    0
.eh_frame:0000000000007A14                 db    0
.eh_frame:0000000000007A15                 db    0
.eh_frame:0000000000007A16                 db    0
.eh_frame:0000000000007A17                 db    0
.eh_frame:0000000000007A18                 db  18h
.eh_frame:0000000000007A19                 db    0
.eh_frame:0000000000007A1A                 db    0
.eh_frame:0000000000007A1B                 db    0
.eh_frame:0000000000007A1C                 db 0ACh
.eh_frame:0000000000007A1D                 db    5
.eh_frame:0000000000007A1E                 db    0
.eh_frame:0000000000007A1F                 db    0
.eh_frame:0000000000007A20                 db  80h
.eh_frame:0000000000007A21                 db 0D0h
.eh_frame:0000000000007A22                 db 0FFh
.eh_frame:0000000000007A23                 db 0FFh
.eh_frame:0000000000007A24                 db  8Eh
.eh_frame:0000000000007A25                 db    0
.eh_frame:0000000000007A26                 db    0
.eh_frame:0000000000007A27                 db    0
.eh_frame:0000000000007A28                 db    0
.eh_frame:0000000000007A29                 db  44h ; D
.eh_frame:0000000000007A2A                 db  0Eh
.eh_frame:0000000000007A2B                 db  50h ; P
.eh_frame:0000000000007A2C                 db    2
.eh_frame:0000000000007A2D                 db  7Fh ; 
.eh_frame:0000000000007A2E                 db  0Ah
.eh_frame:0000000000007A2F                 db  0Eh
.eh_frame:0000000000007A30                 db    8
.eh_frame:0000000000007A31                 db  41h ; A
.eh_frame:0000000000007A32                 db  0Bh
.eh_frame:0000000000007A33                 db    0
.eh_frame:0000000000007A34                 db  18h
.eh_frame:0000000000007A35                 db    0
.eh_frame:0000000000007A36                 db    0
.eh_frame:0000000000007A37                 db    0
.eh_frame:0000000000007A38                 db 0C8h
.eh_frame:0000000000007A39                 db    5
.eh_frame:0000000000007A3A                 db    0
.eh_frame:0000000000007A3B                 db    0
.eh_frame:0000000000007A3C                 db 0F4h
.eh_frame:0000000000007A3D                 db 0D0h
.eh_frame:0000000000007A3E                 db 0FFh
.eh_frame:0000000000007A3F                 db 0FFh
.eh_frame:0000000000007A40                 db  8Ah
.eh_frame:0000000000007A41                 db    0
.eh_frame:0000000000007A42                 db    0
.eh_frame:0000000000007A43                 db    0
.eh_frame:0000000000007A44                 db    0
.eh_frame:0000000000007A45                 db  44h ; D
.eh_frame:0000000000007A46                 db  0Eh
.eh_frame:0000000000007A47                 db  50h ; P
.eh_frame:0000000000007A48                 db    2
.eh_frame:0000000000007A49                 db  7Bh ; {
.eh_frame:0000000000007A4A                 db  0Ah
.eh_frame:0000000000007A4B                 db  0Eh
.eh_frame:0000000000007A4C                 db    8
.eh_frame:0000000000007A4D                 db  41h ; A
.eh_frame:0000000000007A4E                 db  0Bh
.eh_frame:0000000000007A4F                 db    0
.eh_frame:0000000000007A50                 db  10h
.eh_frame:0000000000007A51                 db    0
.eh_frame:0000000000007A52                 db    0
.eh_frame:0000000000007A53                 db    0
.eh_frame:0000000000007A54                 db 0E4h
.eh_frame:0000000000007A55                 db    5
.eh_frame:0000000000007A56                 db    0
.eh_frame:0000000000007A57                 db    0
.eh_frame:0000000000007A58                 db  68h ; h
.eh_frame:0000000000007A59                 db 0D1h
.eh_frame:0000000000007A5A                 db 0FFh
.eh_frame:0000000000007A5B                 db 0FFh
.eh_frame:0000000000007A5C                 db  0Ch
.eh_frame:0000000000007A5D                 db    0
.eh_frame:0000000000007A5E                 db    0
.eh_frame:0000000000007A5F                 db    0
.eh_frame:0000000000007A60                 db    0
.eh_frame:0000000000007A61                 db    0
.eh_frame:0000000000007A62                 db    0
.eh_frame:0000000000007A63                 db    0
.eh_frame:0000000000007A64                 db  10h
.eh_frame:0000000000007A65                 db    0
.eh_frame:0000000000007A66                 db    0
.eh_frame:0000000000007A67                 db    0
.eh_frame:0000000000007A68                 db 0F8h
.eh_frame:0000000000007A69                 db    5
.eh_frame:0000000000007A6A                 db    0
.eh_frame:0000000000007A6B                 db    0
.eh_frame:0000000000007A6C                 db  64h ; d
.eh_frame:0000000000007A6D                 db 0D1h
.eh_frame:0000000000007A6E                 db 0FFh
.eh_frame:0000000000007A6F                 db 0FFh
.eh_frame:0000000000007A70                 db  0Fh
.eh_frame:0000000000007A71                 db    0
.eh_frame:0000000000007A72                 db    0
.eh_frame:0000000000007A73                 db    0
.eh_frame:0000000000007A74                 db    0
.eh_frame:0000000000007A75                 db    0
.eh_frame:0000000000007A76                 db    0
.eh_frame:0000000000007A77                 db    0
.eh_frame:0000000000007A78                 db  18h
.eh_frame:0000000000007A79                 db    0
.eh_frame:0000000000007A7A                 db    0
.eh_frame:0000000000007A7B                 db    0
.eh_frame:0000000000007A7C                 db  0Ch
.eh_frame:0000000000007A7D                 db    6
.eh_frame:0000000000007A7E                 db    0
.eh_frame:0000000000007A7F                 db    0
.eh_frame:0000000000007A80                 db  60h ; `
.eh_frame:0000000000007A81                 db 0D1h
.eh_frame:0000000000007A82                 db 0FFh
.eh_frame:0000000000007A83                 db 0FFh
.eh_frame:0000000000007A84                 db  98h
.eh_frame:0000000000007A85                 db    0
.eh_frame:0000000000007A86                 db    0
.eh_frame:0000000000007A87                 db    0
.eh_frame:0000000000007A88                 db    0
.eh_frame:0000000000007A89                 db  44h ; D
.eh_frame:0000000000007A8A                 db  0Eh
.eh_frame:0000000000007A8B                 db  50h ; P
.eh_frame:0000000000007A8C                 db    2
.eh_frame:0000000000007A8D                 db  8Eh
.eh_frame:0000000000007A8E                 db  0Ah
.eh_frame:0000000000007A8F                 db  0Eh
.eh_frame:0000000000007A90                 db    8
.eh_frame:0000000000007A91                 db  41h ; A
.eh_frame:0000000000007A92                 db  0Bh
.eh_frame:0000000000007A93                 db    0
.eh_frame:0000000000007A94                 db  10h
.eh_frame:0000000000007A95                 db    0
.eh_frame:0000000000007A96                 db    0
.eh_frame:0000000000007A97                 db    0
.eh_frame:0000000000007A98                 db  28h ; (
.eh_frame:0000000000007A99                 db    6
.eh_frame:0000000000007A9A                 db    0
.eh_frame:0000000000007A9B                 db    0
.eh_frame:0000000000007A9C                 db 0E4h
.eh_frame:0000000000007A9D                 db 0D1h
.eh_frame:0000000000007A9E                 db 0FFh
.eh_frame:0000000000007A9F                 db 0FFh
.eh_frame:0000000000007AA0                 db  10h
.eh_frame:0000000000007AA1                 db    0
.eh_frame:0000000000007AA2                 db    0
.eh_frame:0000000000007AA3                 db    0
.eh_frame:0000000000007AA4                 db    0
.eh_frame:0000000000007AA5                 db    0
.eh_frame:0000000000007AA6                 db    0
.eh_frame:0000000000007AA7                 db    0
.eh_frame:0000000000007AA8                 db  10h
.eh_frame:0000000000007AA9                 db    0
.eh_frame:0000000000007AAA                 db    0
.eh_frame:0000000000007AAB                 db    0
.eh_frame:0000000000007AAC                 db  3Ch ; <
.eh_frame:0000000000007AAD                 db    6
.eh_frame:0000000000007AAE                 db    0
.eh_frame:0000000000007AAF                 db    0
.eh_frame:0000000000007AB0                 db 0E0h
.eh_frame:0000000000007AB1                 db 0D1h
.eh_frame:0000000000007AB2                 db 0FFh
.eh_frame:0000000000007AB3                 db 0FFh
.eh_frame:0000000000007AB4                 db  11h
.eh_frame:0000000000007AB5                 db    0
.eh_frame:0000000000007AB6                 db    0
.eh_frame:0000000000007AB7                 db    0
.eh_frame:0000000000007AB8                 db    0
.eh_frame:0000000000007AB9                 db    0
.eh_frame:0000000000007ABA                 db    0
.eh_frame:0000000000007ABB                 db    0
.eh_frame:0000000000007ABC                 db  10h
.eh_frame:0000000000007ABD                 db    0
.eh_frame:0000000000007ABE                 db    0
.eh_frame:0000000000007ABF                 db    0
.eh_frame:0000000000007AC0                 db  50h ; P
.eh_frame:0000000000007AC1                 db    6
.eh_frame:0000000000007AC2                 db    0
.eh_frame:0000000000007AC3                 db    0
.eh_frame:0000000000007AC4                 db 0ECh
.eh_frame:0000000000007AC5                 db 0D1h
.eh_frame:0000000000007AC6                 db 0FFh
.eh_frame:0000000000007AC7                 db 0FFh
.eh_frame:0000000000007AC8                 db  0Ah
.eh_frame:0000000000007AC9                 db    0
.eh_frame:0000000000007ACA                 db    0
.eh_frame:0000000000007ACB                 db    0
.eh_frame:0000000000007ACC                 db    0
.eh_frame:0000000000007ACD                 db    0
.eh_frame:0000000000007ACE                 db    0
.eh_frame:0000000000007ACF                 db    0
.eh_frame:0000000000007AD0                 db  18h
.eh_frame:0000000000007AD1                 db    0
.eh_frame:0000000000007AD2                 db    0
.eh_frame:0000000000007AD3                 db    0
.eh_frame:0000000000007AD4                 db  64h ; d
.eh_frame:0000000000007AD5                 db    6
.eh_frame:0000000000007AD6                 db    0
.eh_frame:0000000000007AD7                 db    0
.eh_frame:0000000000007AD8                 db 0E8h
.eh_frame:0000000000007AD9                 db 0D1h
.eh_frame:0000000000007ADA                 db 0FFh
.eh_frame:0000000000007ADB                 db 0FFh
.eh_frame:0000000000007ADC                 db  8Eh
.eh_frame:0000000000007ADD                 db    0
.eh_frame:0000000000007ADE                 db    0
.eh_frame:0000000000007ADF                 db    0
.eh_frame:0000000000007AE0                 db    0
.eh_frame:0000000000007AE1                 db  44h ; D
.eh_frame:0000000000007AE2                 db  0Eh
.eh_frame:0000000000007AE3                 db  50h ; P
.eh_frame:0000000000007AE4                 db    2
.eh_frame:0000000000007AE5                 db  7Fh ; 
.eh_frame:0000000000007AE6                 db  0Ah
.eh_frame:0000000000007AE7                 db  0Eh
.eh_frame:0000000000007AE8                 db    8
.eh_frame:0000000000007AE9                 db  41h ; A
.eh_frame:0000000000007AEA                 db  0Bh
.eh_frame:0000000000007AEB                 db    0
.eh_frame:0000000000007AEC                 db  18h
.eh_frame:0000000000007AED                 db    0
.eh_frame:0000000000007AEE                 db    0
.eh_frame:0000000000007AEF                 db    0
.eh_frame:0000000000007AF0                 db  80h
.eh_frame:0000000000007AF1                 db    6
.eh_frame:0000000000007AF2                 db    0
.eh_frame:0000000000007AF3                 db    0
.eh_frame:0000000000007AF4                 db  5Ch ; \
.eh_frame:0000000000007AF5                 db 0D2h
.eh_frame:0000000000007AF6                 db 0FFh
.eh_frame:0000000000007AF7                 db 0FFh
.eh_frame:0000000000007AF8                 db  91h
.eh_frame:0000000000007AF9                 db    0
.eh_frame:0000000000007AFA                 db    0
.eh_frame:0000000000007AFB                 db    0
.eh_frame:0000000000007AFC                 db    0
.eh_frame:0000000000007AFD                 db  44h ; D
.eh_frame:0000000000007AFE                 db  0Eh
.eh_frame:0000000000007AFF                 db  50h ; P
.eh_frame:0000000000007B00                 db    2
.eh_frame:0000000000007B01                 db  82h
.eh_frame:0000000000007B02                 db  0Ah
.eh_frame:0000000000007B03                 db  0Eh
.eh_frame:0000000000007B04                 db    8
.eh_frame:0000000000007B05                 db  41h ; A
.eh_frame:0000000000007B06                 db  0Bh
.eh_frame:0000000000007B07                 db    0
.eh_frame:0000000000007B08                 db  10h
.eh_frame:0000000000007B09                 db    0
.eh_frame:0000000000007B0A                 db    0
.eh_frame:0000000000007B0B                 db    0
.eh_frame:0000000000007B0C                 db  9Ch
.eh_frame:0000000000007B0D                 db    6
.eh_frame:0000000000007B0E                 db    0
.eh_frame:0000000000007B0F                 db    0
.eh_frame:0000000000007B10                 db 0E0h
.eh_frame:0000000000007B11                 db 0D2h
.eh_frame:0000000000007B12                 db 0FFh
.eh_frame:0000000000007B13                 db 0FFh
.eh_frame:0000000000007B14                 db  0Ch
.eh_frame:0000000000007B15                 db    0
.eh_frame:0000000000007B16                 db    0
.eh_frame:0000000000007B17                 db    0
.eh_frame:0000000000007B18                 db    0
.eh_frame:0000000000007B19                 db    0
.eh_frame:0000000000007B1A                 db    0
.eh_frame:0000000000007B1B                 db    0
.eh_frame:0000000000007B1C                 db  10h
.eh_frame:0000000000007B1D                 db    0
.eh_frame:0000000000007B1E                 db    0
.eh_frame:0000000000007B1F                 db    0
.eh_frame:0000000000007B20                 db 0B0h
.eh_frame:0000000000007B21                 db    6
.eh_frame:0000000000007B22                 db    0
.eh_frame:0000000000007B23                 db    0
.eh_frame:0000000000007B24                 db 0DCh
.eh_frame:0000000000007B25                 db 0D2h
.eh_frame:0000000000007B26                 db 0FFh
.eh_frame:0000000000007B27                 db 0FFh
.eh_frame:0000000000007B28                 db  17h
.eh_frame:0000000000007B29                 db    0
.eh_frame:0000000000007B2A                 db    0
.eh_frame:0000000000007B2B                 db    0
.eh_frame:0000000000007B2C                 db    0
.eh_frame:0000000000007B2D                 db    0
.eh_frame:0000000000007B2E                 db    0
.eh_frame:0000000000007B2F                 db    0
.eh_frame:0000000000007B30                 db  10h
.eh_frame:0000000000007B31                 db    0
.eh_frame:0000000000007B32                 db    0
.eh_frame:0000000000007B33                 db    0
.eh_frame:0000000000007B34                 db 0C4h
.eh_frame:0000000000007B35                 db    6
.eh_frame:0000000000007B36                 db    0
.eh_frame:0000000000007B37                 db    0
.eh_frame:0000000000007B38                 db 0E8h
.eh_frame:0000000000007B39                 db 0D2h
.eh_frame:0000000000007B3A                 db 0FFh
.eh_frame:0000000000007B3B                 db 0FFh
.eh_frame:0000000000007B3C                 db  13h
.eh_frame:0000000000007B3D                 db    0
.eh_frame:0000000000007B3E                 db    0
.eh_frame:0000000000007B3F                 db    0
.eh_frame:0000000000007B40                 db    0
.eh_frame:0000000000007B41                 db    0
.eh_frame:0000000000007B42                 db    0
.eh_frame:0000000000007B43                 db    0
.eh_frame:0000000000007B44                 db  10h
.eh_frame:0000000000007B45                 db    0
.eh_frame:0000000000007B46                 db    0
.eh_frame:0000000000007B47                 db    0
.eh_frame:0000000000007B48                 db 0D8h
.eh_frame:0000000000007B49                 db    6
.eh_frame:0000000000007B4A                 db    0
.eh_frame:0000000000007B4B                 db    0
.eh_frame:0000000000007B4C                 db 0F4h
.eh_frame:0000000000007B4D                 db 0D2h
.eh_frame:0000000000007B4E                 db 0FFh
.eh_frame:0000000000007B4F                 db 0FFh
.eh_frame:0000000000007B50                 db  0Ch
.eh_frame:0000000000007B51                 db    0
.eh_frame:0000000000007B52                 db    0
.eh_frame:0000000000007B53                 db    0
.eh_frame:0000000000007B54                 db    0
.eh_frame:0000000000007B55                 db    0
.eh_frame:0000000000007B56                 db    0
.eh_frame:0000000000007B57                 db    0
.eh_frame:0000000000007B58                 db  10h
.eh_frame:0000000000007B59                 db    0
.eh_frame:0000000000007B5A                 db    0
.eh_frame:0000000000007B5B                 db    0
.eh_frame:0000000000007B5C                 db 0ECh
.eh_frame:0000000000007B5D                 db    6
.eh_frame:0000000000007B5E                 db    0
.eh_frame:0000000000007B5F                 db    0
.eh_frame:0000000000007B60                 db 0F0h
.eh_frame:0000000000007B61                 db 0D2h
.eh_frame:0000000000007B62                 db 0FFh
.eh_frame:0000000000007B63                 db 0FFh
.eh_frame:0000000000007B64                 db  14h
.eh_frame:0000000000007B65                 db    0
.eh_frame:0000000000007B66                 db    0
.eh_frame:0000000000007B67                 db    0
.eh_frame:0000000000007B68                 db    0
.eh_frame:0000000000007B69                 db    0
.eh_frame:0000000000007B6A                 db    0
.eh_frame:0000000000007B6B                 db    0
.eh_frame:0000000000007B6C                 db  10h
.eh_frame:0000000000007B6D                 db    0
.eh_frame:0000000000007B6E                 db    0
.eh_frame:0000000000007B6F                 db    0
.eh_frame:0000000000007B70                 db    0
.eh_frame:0000000000007B71                 db    7
.eh_frame:0000000000007B72                 db    0
.eh_frame:0000000000007B73                 db    0
.eh_frame:0000000000007B74                 db 0FCh
.eh_frame:0000000000007B75                 db 0D2h
.eh_frame:0000000000007B76                 db 0FFh
.eh_frame:0000000000007B77                 db 0FFh
.eh_frame:0000000000007B78                 db  13h
.eh_frame:0000000000007B79                 db    0
.eh_frame:0000000000007B7A                 db    0
.eh_frame:0000000000007B7B                 db    0
.eh_frame:0000000000007B7C                 db    0
.eh_frame:0000000000007B7D                 db    0
.eh_frame:0000000000007B7E                 db    0
.eh_frame:0000000000007B7F                 db    0
.eh_frame:0000000000007B80                 db  14h
.eh_frame:0000000000007B81                 db    0
.eh_frame:0000000000007B82                 db    0
.eh_frame:0000000000007B83                 db    0
.eh_frame:0000000000007B84                 db  14h
.eh_frame:0000000000007B85                 db    7
.eh_frame:0000000000007B86                 db    0
.eh_frame:0000000000007B87                 db    0
.eh_frame:0000000000007B88                 db    8
.eh_frame:0000000000007B89                 db 0D3h
.eh_frame:0000000000007B8A                 db 0FFh
.eh_frame:0000000000007B8B                 db 0FFh
.eh_frame:0000000000007B8C                 db  18h
.eh_frame:0000000000007B8D                 db    0
.eh_frame:0000000000007B8E                 db    0
.eh_frame:0000000000007B8F                 db    0
.eh_frame:0000000000007B90                 db    0
.eh_frame:0000000000007B91                 db    0
.eh_frame:0000000000007B92                 db    0
.eh_frame:0000000000007B93                 db    0
.eh_frame:0000000000007B94                 db    0
.eh_frame:0000000000007B95                 db    0
.eh_frame:0000000000007B96                 db    0
.eh_frame:0000000000007B97                 db    0
.eh_frame:0000000000007B98                 db  10h
.eh_frame:0000000000007B99                 db    1
.eh_frame:0000000000007B9A                 db    0
.eh_frame:0000000000007B9B                 db    0
.eh_frame:0000000000007B9C                 db  2Ch ; ,
.eh_frame:0000000000007B9D                 db    7
.eh_frame:0000000000007B9E                 db    0
.eh_frame:0000000000007B9F                 db    0
.eh_frame:0000000000007BA0                 db  10h
.eh_frame:0000000000007BA1                 db 0D3h
.eh_frame:0000000000007BA2                 db 0FFh
.eh_frame:0000000000007BA3                 db 0FFh
.eh_frame:0000000000007BA4                 db  17h
.eh_frame:0000000000007BA5                 db    4
.eh_frame:0000000000007BA6                 db    0
.eh_frame:0000000000007BA7                 db    0
.eh_frame:0000000000007BA8                 db    0
.eh_frame:0000000000007BA9                 db  42h ; B
.eh_frame:0000000000007BAA                 db  0Eh
.eh_frame:0000000000007BAB                 db  10h
.eh_frame:0000000000007BAC                 db  8Fh
.eh_frame:0000000000007BAD                 db    2
.eh_frame:0000000000007BAE                 db  42h ; B
.eh_frame:0000000000007BAF                 db  0Eh
.eh_frame:0000000000007BB0                 db  18h
.eh_frame:0000000000007BB1                 db  8Eh
.eh_frame:0000000000007BB2                 db    3
.eh_frame:0000000000007BB3                 db  42h ; B
.eh_frame:0000000000007BB4                 db  0Eh
.eh_frame:0000000000007BB5                 db  20h
.eh_frame:0000000000007BB6                 db  8Dh
.eh_frame:0000000000007BB7                 db    4
.eh_frame:0000000000007BB8                 db  42h ; B
.eh_frame:0000000000007BB9                 db  0Eh
.eh_frame:0000000000007BBA                 db  28h ; (
.eh_frame:0000000000007BBB                 db  8Ch
.eh_frame:0000000000007BBC                 db    5
.eh_frame:0000000000007BBD                 db  44h ; D
.eh_frame:0000000000007BBE                 db  0Eh
.eh_frame:0000000000007BBF                 db  30h ; 0
.eh_frame:0000000000007BC0                 db  86h
.eh_frame:0000000000007BC1                 db    6
.eh_frame:0000000000007BC2                 db  41h ; A
.eh_frame:0000000000007BC3                 db  0Eh
.eh_frame:0000000000007BC4                 db  38h ; 8
.eh_frame:0000000000007BC5                 db  83h
.eh_frame:0000000000007BC6                 db    7
.eh_frame:0000000000007BC7                 db  4Ah ; J
.eh_frame:0000000000007BC8                 db  0Eh
.eh_frame:0000000000007BC9                 db  60h ; `
.eh_frame:0000000000007BCA                 db    2
.eh_frame:0000000000007BCB                 db 0DDh
.eh_frame:0000000000007BCC                 db  0Eh
.eh_frame:0000000000007BCD                 db  68h ; h
.eh_frame:0000000000007BCE                 db  57h ; W
.eh_frame:0000000000007BCF                 db  0Eh
.eh_frame:0000000000007BD0                 db  70h ; p
.eh_frame:0000000000007BD1                 db  42h ; B
.eh_frame:0000000000007BD2                 db  0Eh
.eh_frame:0000000000007BD3                 db  78h ; x
.eh_frame:0000000000007BD4                 db  42h ; B
.eh_frame:0000000000007BD5                 db  0Eh
.eh_frame:0000000000007BD6                 db  80h
.eh_frame:0000000000007BD7                 db    1
.eh_frame:0000000000007BD8                 db  42h ; B
.eh_frame:0000000000007BD9                 db  0Eh
.eh_frame:0000000000007BDA                 db  88h
.eh_frame:0000000000007BDB                 db    1
.eh_frame:0000000000007BDC                 db  42h ; B
.eh_frame:0000000000007BDD                 db  0Eh
.eh_frame:0000000000007BDE                 db  90h
.eh_frame:0000000000007BDF                 db    1
.eh_frame:0000000000007BE0                 db  53h ; S
.eh_frame:0000000000007BE1                 db  0Eh
.eh_frame:0000000000007BE2                 db  60h ; `
.eh_frame:0000000000007BE3                 db  44h ; D
.eh_frame:0000000000007BE4                 db  0Ah
.eh_frame:0000000000007BE5                 db  0Eh
.eh_frame:0000000000007BE6                 db  38h ; 8
.eh_frame:0000000000007BE7                 db  41h ; A
.eh_frame:0000000000007BE8                 db  0Eh
.eh_frame:0000000000007BE9                 db  30h ; 0
.eh_frame:0000000000007BEA                 db  41h ; A
.eh_frame:0000000000007BEB                 db  0Eh
.eh_frame:0000000000007BEC                 db  28h ; (
.eh_frame:0000000000007BED                 db  42h ; B
.eh_frame:0000000000007BEE                 db  0Eh
.eh_frame:0000000000007BEF                 db  20h
.eh_frame:0000000000007BF0                 db  42h ; B
.eh_frame:0000000000007BF1                 db  0Eh
.eh_frame:0000000000007BF2                 db  18h
.eh_frame:0000000000007BF3                 db  42h ; B
.eh_frame:0000000000007BF4                 db  0Eh
.eh_frame:0000000000007BF5                 db  10h
.eh_frame:0000000000007BF6                 db  42h ; B
.eh_frame:0000000000007BF7                 db  0Eh
.eh_frame:0000000000007BF8                 db    8
.eh_frame:0000000000007BF9                 db  44h ; D
.eh_frame:0000000000007BFA                 db  0Bh
.eh_frame:0000000000007BFB                 db    2
.eh_frame:0000000000007BFC                 db  78h ; x
.eh_frame:0000000000007BFD                 db  0Ah
.eh_frame:0000000000007BFE                 db  0Eh
.eh_frame:0000000000007BFF                 db  68h ; h
.eh_frame:0000000000007C00                 db  48h ; H
.eh_frame:0000000000007C01                 db  0Bh
.eh_frame:0000000000007C02                 db  5Ah ; Z
.eh_frame:0000000000007C03                 db  0Ah
.eh_frame:0000000000007C04                 db  0Eh
.eh_frame:0000000000007C05                 db  38h ; 8
.eh_frame:0000000000007C06                 db  47h ; G
.eh_frame:0000000000007C07                 db  0Eh
.eh_frame:0000000000007C08                 db  30h ; 0
.eh_frame:0000000000007C09                 db  41h ; A
.eh_frame:0000000000007C0A                 db  0Eh
.eh_frame:0000000000007C0B                 db  28h ; (
.eh_frame:0000000000007C0C                 db  42h ; B
.eh_frame:0000000000007C0D                 db  0Eh
.eh_frame:0000000000007C0E                 db  20h
.eh_frame:0000000000007C0F                 db  42h ; B
.eh_frame:0000000000007C10                 db  0Eh
.eh_frame:0000000000007C11                 db  18h
.eh_frame:0000000000007C12                 db  42h ; B
.eh_frame:0000000000007C13                 db  0Eh
.eh_frame:0000000000007C14                 db  10h
.eh_frame:0000000000007C15                 db  42h ; B
.eh_frame:0000000000007C16                 db  0Eh
.eh_frame:0000000000007C17                 db    8
.eh_frame:0000000000007C18                 db  56h ; V
.eh_frame:0000000000007C19                 db  0Bh
.eh_frame:0000000000007C1A                 db  5Eh ; ^
.eh_frame:0000000000007C1B                 db  0Ah
.eh_frame:0000000000007C1C                 db  0Eh
.eh_frame:0000000000007C1D                 db  38h ; 8
.eh_frame:0000000000007C1E                 db  52h ; R
.eh_frame:0000000000007C1F                 db  0Eh
.eh_frame:0000000000007C20                 db  30h ; 0
.eh_frame:0000000000007C21                 db  41h ; A
.eh_frame:0000000000007C22                 db  0Eh
.eh_frame:0000000000007C23                 db  28h ; (
.eh_frame:0000000000007C24                 db  42h ; B
.eh_frame:0000000000007C25                 db  0Eh
.eh_frame:0000000000007C26                 db  20h
.eh_frame:0000000000007C27                 db  42h ; B
.eh_frame:0000000000007C28                 db  0Eh
.eh_frame:0000000000007C29                 db  18h
.eh_frame:0000000000007C2A                 db  42h ; B
.eh_frame:0000000000007C2B                 db  0Eh
.eh_frame:0000000000007C2C                 db  10h
.eh_frame:0000000000007C2D                 db  42h ; B
.eh_frame:0000000000007C2E                 db  0Eh
.eh_frame:0000000000007C2F                 db    8
.eh_frame:0000000000007C30                 db  4Fh ; O
.eh_frame:0000000000007C31                 db  0Bh
.eh_frame:0000000000007C32                 db  62h ; b
.eh_frame:0000000000007C33                 db  0Ah
.eh_frame:0000000000007C34                 db  0Eh
.eh_frame:0000000000007C35                 db  38h ; 8
.eh_frame:0000000000007C36                 db  50h ; P
.eh_frame:0000000000007C37                 db  0Eh
.eh_frame:0000000000007C38                 db  30h ; 0
.eh_frame:0000000000007C39                 db  41h ; A
.eh_frame:0000000000007C3A                 db  0Eh
.eh_frame:0000000000007C3B                 db  28h ; (
.eh_frame:0000000000007C3C                 db  42h ; B
.eh_frame:0000000000007C3D                 db  0Eh
.eh_frame:0000000000007C3E                 db  20h
.eh_frame:0000000000007C3F                 db  42h ; B
.eh_frame:0000000000007C40                 db  0Eh
.eh_frame:0000000000007C41                 db  18h
.eh_frame:0000000000007C42                 db  42h ; B
.eh_frame:0000000000007C43                 db  0Eh
.eh_frame:0000000000007C44                 db  10h
.eh_frame:0000000000007C45                 db  42h ; B
.eh_frame:0000000000007C46                 db  0Eh
.eh_frame:0000000000007C47                 db    8
.eh_frame:0000000000007C48                 db  55h ; U
.eh_frame:0000000000007C49                 db  0Bh
.eh_frame:0000000000007C4A                 db  66h ; f
.eh_frame:0000000000007C4B                 db  0Eh
.eh_frame:0000000000007C4C                 db  68h ; h
.eh_frame:0000000000007C4D                 db  42h ; B
.eh_frame:0000000000007C4E                 db  0Eh
.eh_frame:0000000000007C4F                 db  70h ; p
.eh_frame:0000000000007C50                 db  5Ch ; \
.eh_frame:0000000000007C51                 db  0Eh
.eh_frame:0000000000007C52                 db  68h ; h
.eh_frame:0000000000007C53                 db  41h ; A
.eh_frame:0000000000007C54                 db  0Eh
.eh_frame:0000000000007C55                 db  60h ; `
.eh_frame:0000000000007C56                 db  44h ; D
.eh_frame:0000000000007C57                 db  0Ah
.eh_frame:0000000000007C58                 db  0Eh
.eh_frame:0000000000007C59                 db  38h ; 8
.eh_frame:0000000000007C5A                 db  41h ; A
.eh_frame:0000000000007C5B                 db  0Eh
.eh_frame:0000000000007C5C                 db  30h ; 0
.eh_frame:0000000000007C5D                 db  41h ; A
.eh_frame:0000000000007C5E                 db  0Eh
.eh_frame:0000000000007C5F                 db  28h ; (
.eh_frame:0000000000007C60                 db  42h ; B
.eh_frame:0000000000007C61                 db  0Eh
.eh_frame:0000000000007C62                 db  20h
.eh_frame:0000000000007C63                 db  42h ; B
.eh_frame:0000000000007C64                 db  0Eh
.eh_frame:0000000000007C65                 db  18h
.eh_frame:0000000000007C66                 db  42h ; B
.eh_frame:0000000000007C67                 db  0Eh
.eh_frame:0000000000007C68                 db  10h
.eh_frame:0000000000007C69                 db  42h ; B
.eh_frame:0000000000007C6A                 db  0Eh
.eh_frame:0000000000007C6B                 db    8
.eh_frame:0000000000007C6C                 db  45h ; E
.eh_frame:0000000000007C6D                 db  0Bh
.eh_frame:0000000000007C6E                 db  68h ; h
.eh_frame:0000000000007C6F                 db  0Ah
.eh_frame:0000000000007C70                 db  0Eh
.eh_frame:0000000000007C71                 db  68h ; h
.eh_frame:0000000000007C72                 db  48h ; H
.eh_frame:0000000000007C73                 db  0Bh
.eh_frame:0000000000007C74                 db  72h ; r
.eh_frame:0000000000007C75                 db  0Eh
.eh_frame:0000000000007C76                 db  68h ; h
.eh_frame:0000000000007C77                 db  45h ; E
.eh_frame:0000000000007C78                 db  0Eh
.eh_frame:0000000000007C79                 db  70h ; p
.eh_frame:0000000000007C7A                 db  42h ; B
.eh_frame:0000000000007C7B                 db  0Eh
.eh_frame:0000000000007C7C                 db  78h ; x
.eh_frame:0000000000007C7D                 db  42h ; B
.eh_frame:0000000000007C7E                 db  0Eh
.eh_frame:0000000000007C7F                 db  80h
.eh_frame:0000000000007C80                 db    1
.eh_frame:0000000000007C81                 db  5Eh ; ^
.eh_frame:0000000000007C82                 db  0Eh
.eh_frame:0000000000007C83                 db  60h ; `
.eh_frame:0000000000007C84                 db  44h ; D
.eh_frame:0000000000007C85                 db  0Ah
.eh_frame:0000000000007C86                 db  0Eh
.eh_frame:0000000000007C87                 db  38h ; 8
.eh_frame:0000000000007C88                 db  41h ; A
.eh_frame:0000000000007C89                 db  0Eh
.eh_frame:0000000000007C8A                 db  30h ; 0
.eh_frame:0000000000007C8B                 db  41h ; A
.eh_frame:0000000000007C8C                 db  0Eh
.eh_frame:0000000000007C8D                 db  28h ; (
.eh_frame:0000000000007C8E                 db  42h ; B
.eh_frame:0000000000007C8F                 db  0Eh
.eh_frame:0000000000007C90                 db  20h
.eh_frame:0000000000007C91                 db  42h ; B
.eh_frame:0000000000007C92                 db  0Eh
.eh_frame:0000000000007C93                 db  18h
.eh_frame:0000000000007C94                 db  42h ; B
.eh_frame:0000000000007C95                 db  0Eh
.eh_frame:0000000000007C96                 db  10h
.eh_frame:0000000000007C97                 db  42h ; B
.eh_frame:0000000000007C98                 db  0Eh
.eh_frame:0000000000007C99                 db    8
.eh_frame:0000000000007C9A                 db  41h ; A
.eh_frame:0000000000007C9B                 db  0Bh
.eh_frame:0000000000007C9C                 db  79h ; y
.eh_frame:0000000000007C9D                 db  0Ah
.eh_frame:0000000000007C9E                 db  0Eh
.eh_frame:0000000000007C9F                 db  68h ; h
.eh_frame:0000000000007CA0                 db  42h ; B
.eh_frame:0000000000007CA1                 db  0Eh
.eh_frame:0000000000007CA2                 db  70h ; p
.eh_frame:0000000000007CA3                 db  42h ; B
.eh_frame:0000000000007CA4                 db  0Eh
.eh_frame:0000000000007CA5                 db  78h ; x
.eh_frame:0000000000007CA6                 db  42h ; B
.eh_frame:0000000000007CA7                 db  0Eh
.eh_frame:0000000000007CA8                 db  80h
.eh_frame:0000000000007CA9                 db    1
.eh_frame:0000000000007CAA                 db  51h ; Q
.eh_frame:0000000000007CAB                 db  0Bh
.eh_frame:0000000000007CAC                 db  10h
.eh_frame:0000000000007CAD                 db    0
.eh_frame:0000000000007CAE                 db    0
.eh_frame:0000000000007CAF                 db    0
.eh_frame:0000000000007CB0                 db  40h ; @
.eh_frame:0000000000007CB1                 db    8
.eh_frame:0000000000007CB2                 db    0
.eh_frame:0000000000007CB3                 db    0
.eh_frame:0000000000007CB4                 db  1Ch
.eh_frame:0000000000007CB5                 db 0D6h
.eh_frame:0000000000007CB6                 db 0FFh
.eh_frame:0000000000007CB7                 db 0FFh
.eh_frame:0000000000007CB8                 db  20h
.eh_frame:0000000000007CB9                 db    0
.eh_frame:0000000000007CBA                 db    0
.eh_frame:0000000000007CBB                 db    0
.eh_frame:0000000000007CBC                 db    0
.eh_frame:0000000000007CBD                 db    0
.eh_frame:0000000000007CBE                 db    0
.eh_frame:0000000000007CBF                 db    0
.eh_frame:0000000000007CC0                 db  18h
.eh_frame:0000000000007CC1                 db    0
.eh_frame:0000000000007CC2                 db    0
.eh_frame:0000000000007CC3                 db    0
.eh_frame:0000000000007CC4                 db  54h ; T
.eh_frame:0000000000007CC5                 db    8
.eh_frame:0000000000007CC6                 db    0
.eh_frame:0000000000007CC7                 db    0
.eh_frame:0000000000007CC8                 db  28h ; (
.eh_frame:0000000000007CC9                 db 0D6h
.eh_frame:0000000000007CCA                 db 0FFh
.eh_frame:0000000000007CCB                 db 0FFh
.eh_frame:0000000000007CCC                 db  78h ; x
.eh_frame:0000000000007CCD                 db    0
.eh_frame:0000000000007CCE                 db    0
.eh_frame:0000000000007CCF                 db    0
.eh_frame:0000000000007CD0                 db    0
.eh_frame:0000000000007CD1                 db  44h ; D
.eh_frame:0000000000007CD2                 db  0Eh
.eh_frame:0000000000007CD3                 db  70h ; p
.eh_frame:0000000000007CD4                 db    2
.eh_frame:0000000000007CD5                 db  60h ; `
.eh_frame:0000000000007CD6                 db  0Ah
.eh_frame:0000000000007CD7                 db  0Eh
.eh_frame:0000000000007CD8                 db    8
.eh_frame:0000000000007CD9                 db  41h ; A
.eh_frame:0000000000007CDA                 db  0Bh
.eh_frame:0000000000007CDB                 db    0
.eh_frame:0000000000007CDC                 db  28h ; (
.eh_frame:0000000000007CDD                 db    0
.eh_frame:0000000000007CDE                 db    0
.eh_frame:0000000000007CDF                 db    0
.eh_frame:0000000000007CE0                 db  70h ; p
.eh_frame:0000000000007CE1                 db    8
.eh_frame:0000000000007CE2                 db    0
.eh_frame:0000000000007CE3                 db    0
.eh_frame:0000000000007CE4                 db  8Ch
.eh_frame:0000000000007CE5                 db 0D6h
.eh_frame:0000000000007CE6                 db 0FFh
.eh_frame:0000000000007CE7                 db 0FFh
.eh_frame:0000000000007CE8                 db 0D5h
.eh_frame:0000000000007CE9                 db    0
.eh_frame:0000000000007CEA                 db    0
.eh_frame:0000000000007CEB                 db    0
.eh_frame:0000000000007CEC                 db    0
.eh_frame:0000000000007CED                 db  41h ; A
.eh_frame:0000000000007CEE                 db  0Eh
.eh_frame:0000000000007CEF                 db  10h
.eh_frame:0000000000007CF0                 db  86h
.eh_frame:0000000000007CF1                 db    2
.eh_frame:0000000000007CF2                 db  41h ; A
.eh_frame:0000000000007CF3                 db  0Eh
.eh_frame:0000000000007CF4                 db  18h
.eh_frame:0000000000007CF5                 db  83h
.eh_frame:0000000000007CF6                 db    3
.eh_frame:0000000000007CF7                 db  50h ; P
.eh_frame:0000000000007CF8                 db  0Eh
.eh_frame:0000000000007CF9                 db 0D0h
.eh_frame:0000000000007CFA                 db    1
.eh_frame:0000000000007CFB                 db    2
.eh_frame:0000000000007CFC                 db 0ABh
.eh_frame:0000000000007CFD                 db  0Ah
.eh_frame:0000000000007CFE                 db  0Eh
.eh_frame:0000000000007CFF                 db  18h
.eh_frame:0000000000007D00                 db  41h ; A
.eh_frame:0000000000007D01                 db  0Eh
.eh_frame:0000000000007D02                 db  10h
.eh_frame:0000000000007D03                 db  41h ; A
.eh_frame:0000000000007D04                 db  0Eh
.eh_frame:0000000000007D05                 db    8
.eh_frame:0000000000007D06                 db  41h ; A
.eh_frame:0000000000007D07                 db  0Bh
.eh_frame:0000000000007D08                 db  1Ch
.eh_frame:0000000000007D09                 db    0
.eh_frame:0000000000007D0A                 db    0
.eh_frame:0000000000007D0B                 db    0
.eh_frame:0000000000007D0C                 db  9Ch
.eh_frame:0000000000007D0D                 db    8
.eh_frame:0000000000007D0E                 db    0
.eh_frame:0000000000007D0F                 db    0
.eh_frame:0000000000007D10                 db  40h ; @
.eh_frame:0000000000007D11                 db 0D7h
.eh_frame:0000000000007D12                 db 0FFh
.eh_frame:0000000000007D13                 db 0FFh
.eh_frame:0000000000007D14                 db  80h
.eh_frame:0000000000007D15                 db    0
.eh_frame:0000000000007D16                 db    0
.eh_frame:0000000000007D17                 db    0
.eh_frame:0000000000007D18                 db    0
.eh_frame:0000000000007D19                 db  41h ; A
.eh_frame:0000000000007D1A                 db  0Eh
.eh_frame:0000000000007D1B                 db  10h
.eh_frame:0000000000007D1C                 db  83h
.eh_frame:0000000000007D1D                 db    2
.eh_frame:0000000000007D1E                 db    2
.eh_frame:0000000000007D1F                 db  7Ah ; z
.eh_frame:0000000000007D20                 db  0Eh
.eh_frame:0000000000007D21                 db    8
.eh_frame:0000000000007D22                 db    0
.eh_frame:0000000000007D23                 db    0
.eh_frame:0000000000007D24                 db    0
.eh_frame:0000000000007D25                 db    0
.eh_frame:0000000000007D26                 db    0
.eh_frame:0000000000007D27                 db    0
.eh_frame:0000000000007D28                 db  18h
.eh_frame:0000000000007D29                 db    0
.eh_frame:0000000000007D2A                 db    0
.eh_frame:0000000000007D2B                 db    0
.eh_frame:0000000000007D2C                 db 0BCh
.eh_frame:0000000000007D2D                 db    8
.eh_frame:0000000000007D2E                 db    0
.eh_frame:0000000000007D2F                 db    0
.eh_frame:0000000000007D30                 db 0A0h
.eh_frame:0000000000007D31                 db 0D7h
.eh_frame:0000000000007D32                 db 0FFh
.eh_frame:0000000000007D33                 db 0FFh
.eh_frame:0000000000007D34                 db  1Ah
.eh_frame:0000000000007D35                 db    0
.eh_frame:0000000000007D36                 db    0
.eh_frame:0000000000007D37                 db    0
.eh_frame:0000000000007D38                 db    0
.eh_frame:0000000000007D39                 db  41h ; A
.eh_frame:0000000000007D3A                 db  0Eh
.eh_frame:0000000000007D3B                 db  10h
.eh_frame:0000000000007D3C                 db  83h
.eh_frame:0000000000007D3D                 db    2
.eh_frame:0000000000007D3E                 db  53h ; S
.eh_frame:0000000000007D3F                 db  0Ah
.eh_frame:0000000000007D40                 db  0Eh
.eh_frame:0000000000007D41                 db    8
.eh_frame:0000000000007D42                 db  41h ; A
.eh_frame:0000000000007D43                 db  0Bh
.eh_frame:0000000000007D44                 db  10h
.eh_frame:0000000000007D45                 db    0
.eh_frame:0000000000007D46                 db    0
.eh_frame:0000000000007D47                 db    0
.eh_frame:0000000000007D48                 db 0D8h
.eh_frame:0000000000007D49                 db    8
.eh_frame:0000000000007D4A                 db    0
.eh_frame:0000000000007D4B                 db    0
.eh_frame:0000000000007D4C                 db 0A4h
.eh_frame:0000000000007D4D                 db 0D7h
.eh_frame:0000000000007D4E                 db 0FFh
.eh_frame:0000000000007D4F                 db 0FFh
.eh_frame:0000000000007D50                 db  24h ; $
.eh_frame:0000000000007D51                 db    0
.eh_frame:0000000000007D52                 db    0
.eh_frame:0000000000007D53                 db    0
.eh_frame:0000000000007D54                 db    0
.eh_frame:0000000000007D55                 db  5Fh ; _
.eh_frame:0000000000007D56                 db  0Eh
.eh_frame:0000000000007D57                 db  10h
.eh_frame:0000000000007D58                 db  10h
.eh_frame:0000000000007D59                 db    0
.eh_frame:0000000000007D5A                 db    0
.eh_frame:0000000000007D5B                 db    0
.eh_frame:0000000000007D5C                 db 0ECh
.eh_frame:0000000000007D5D                 db    8
.eh_frame:0000000000007D5E                 db    0
.eh_frame:0000000000007D5F                 db    0
.eh_frame:0000000000007D60                 db 0C0h
.eh_frame:0000000000007D61                 db 0D7h
.eh_frame:0000000000007D62                 db 0FFh
.eh_frame:0000000000007D63                 db 0FFh
.eh_frame:0000000000007D64                 db    2
.eh_frame:0000000000007D65                 db    0
.eh_frame:0000000000007D66                 db    0
.eh_frame:0000000000007D67                 db    0
.eh_frame:0000000000007D68                 db    0
.eh_frame:0000000000007D69                 db    0
.eh_frame:0000000000007D6A                 db    0
.eh_frame:0000000000007D6B                 db    0
.eh_frame:0000000000007D6C                 db  20h
.eh_frame:0000000000007D6D                 db    0
.eh_frame:0000000000007D6E                 db    0
.eh_frame:0000000000007D6F                 db    0
.eh_frame:0000000000007D70                 db    0
.eh_frame:0000000000007D71                 db    9
.eh_frame:0000000000007D72                 db    0
.eh_frame:0000000000007D73                 db    0
.eh_frame:0000000000007D74                 db 0BCh
.eh_frame:0000000000007D75                 db 0D7h
.eh_frame:0000000000007D76                 db 0FFh
.eh_frame:0000000000007D77                 db 0FFh
.eh_frame:0000000000007D78                 db  36h ; 6
.eh_frame:0000000000007D79                 db    0
.eh_frame:0000000000007D7A                 db    0
.eh_frame:0000000000007D7B                 db    0
.eh_frame:0000000000007D7C                 db    0
.eh_frame:0000000000007D7D                 db  44h ; D
.eh_frame:0000000000007D7E                 db  0Eh
.eh_frame:0000000000007D7F                 db  10h
.eh_frame:0000000000007D80                 db  83h
.eh_frame:0000000000007D81                 db    2
.eh_frame:0000000000007D82                 db  5Dh ; ]
.eh_frame:0000000000007D83                 db  0Ah
.eh_frame:0000000000007D84                 db  0Eh
.eh_frame:0000000000007D85                 db    8
.eh_frame:0000000000007D86                 db  47h ; G
.eh_frame:0000000000007D87                 db  0Bh
.eh_frame:0000000000007D88                 db  48h ; H
.eh_frame:0000000000007D89                 db  0Ah
.eh_frame:0000000000007D8A                 db  0Eh
.eh_frame:0000000000007D8B                 db    8
.eh_frame:0000000000007D8C                 db  41h ; A
.eh_frame:0000000000007D8D                 db  0Bh
.eh_frame:0000000000007D8E                 db    0
.eh_frame:0000000000007D8F                 db    0
.eh_frame:0000000000007D90                 db  10h
.eh_frame:0000000000007D91                 db    0
.eh_frame:0000000000007D92                 db    0
.eh_frame:0000000000007D93                 db    0
.eh_frame:0000000000007D94                 db  24h ; $
.eh_frame:0000000000007D95                 db    9
.eh_frame:0000000000007D96                 db    0
.eh_frame:0000000000007D97                 db    0
.eh_frame:0000000000007D98                 db 0D8h
.eh_frame:0000000000007D99                 db 0D7h
.eh_frame:0000000000007D9A                 db 0FFh
.eh_frame:0000000000007D9B                 db 0FFh
.eh_frame:0000000000007D9C                 db  24h ; $
.eh_frame:0000000000007D9D                 db    0
.eh_frame:0000000000007D9E                 db    0
.eh_frame:0000000000007D9F                 db    0
.eh_frame:0000000000007DA0                 db    0
.eh_frame:0000000000007DA1                 db  5Fh ; _
.eh_frame:0000000000007DA2                 db  0Eh
.eh_frame:0000000000007DA3                 db  10h
.eh_frame:0000000000007DA4                 db  14h
.eh_frame:0000000000007DA5                 db    0
.eh_frame:0000000000007DA6                 db    0
.eh_frame:0000000000007DA7                 db    0
.eh_frame:0000000000007DA8                 db  38h ; 8
.eh_frame:0000000000007DA9                 db    9
.eh_frame:0000000000007DAA                 db    0
.eh_frame:0000000000007DAB                 db    0
.eh_frame:0000000000007DAC                 db 0F4h
.eh_frame:0000000000007DAD                 db 0D7h
.eh_frame:0000000000007DAE                 db 0FFh
.eh_frame:0000000000007DAF                 db 0FFh
.eh_frame:0000000000007DB0                 db  82h
.eh_frame:0000000000007DB1                 db    0
.eh_frame:0000000000007DB2                 db    0
.eh_frame:0000000000007DB3                 db    0
.eh_frame:0000000000007DB4                 db    0
.eh_frame:0000000000007DB5                 db    2
.eh_frame:0000000000007DB6                 db  5Fh ; _
.eh_frame:0000000000007DB7                 db  0Eh
.eh_frame:0000000000007DB8                 db  10h
.eh_frame:0000000000007DB9                 db  49h ; I
.eh_frame:0000000000007DBA                 db  0Eh
.eh_frame:0000000000007DBB                 db    8
.eh_frame:0000000000007DBC                 db  14h
.eh_frame:0000000000007DBD                 db    0
.eh_frame:0000000000007DBE                 db    0
.eh_frame:0000000000007DBF                 db    0
.eh_frame:0000000000007DC0                 db  50h ; P
.eh_frame:0000000000007DC1                 db    9
.eh_frame:0000000000007DC2                 db    0
.eh_frame:0000000000007DC3                 db    0
.eh_frame:0000000000007DC4                 db  6Ch ; l
.eh_frame:0000000000007DC5                 db 0D8h
.eh_frame:0000000000007DC6                 db 0FFh
.eh_frame:0000000000007DC7                 db 0FFh
.eh_frame:0000000000007DC8                 db  4Ah ; J
.eh_frame:0000000000007DC9                 db    0
.eh_frame:0000000000007DCA                 db    0
.eh_frame:0000000000007DCB                 db    0
.eh_frame:0000000000007DCC                 db    0
.eh_frame:0000000000007DCD                 db    2
.eh_frame:0000000000007DCE                 db  45h ; E
.eh_frame:0000000000007DCF                 db  0Eh
.eh_frame:0000000000007DD0                 db  10h
.eh_frame:0000000000007DD1                 db    0
.eh_frame:0000000000007DD2                 db    0
.eh_frame:0000000000007DD3                 db    0
.eh_frame:0000000000007DD4                 db  18h
.eh_frame:0000000000007DD5                 db    0
.eh_frame:0000000000007DD6                 db    0
.eh_frame:0000000000007DD7                 db    0
.eh_frame:0000000000007DD8                 db  68h ; h
.eh_frame:0000000000007DD9                 db    9
.eh_frame:0000000000007DDA                 db    0
.eh_frame:0000000000007DDB                 db    0
.eh_frame:0000000000007DDC                 db 0A4h
.eh_frame:0000000000007DDD                 db 0D8h
.eh_frame:0000000000007DDE                 db 0FFh
.eh_frame:0000000000007DDF                 db 0FFh
.eh_frame:0000000000007DE0                 db  17h
.eh_frame:0000000000007DE1                 db    0
.eh_frame:0000000000007DE2                 db    0
.eh_frame:0000000000007DE3                 db    0
.eh_frame:0000000000007DE4                 db    0
.eh_frame:0000000000007DE5                 db  41h ; A
.eh_frame:0000000000007DE6                 db  0Eh
.eh_frame:0000000000007DE7                 db  10h
.eh_frame:0000000000007DE8                 db  83h
.eh_frame:0000000000007DE9                 db    2
.eh_frame:0000000000007DEA                 db  51h ; Q
.eh_frame:0000000000007DEB                 db  0Eh
.eh_frame:0000000000007DEC                 db    8
.eh_frame:0000000000007DED                 db    0
.eh_frame:0000000000007DEE                 db    0
.eh_frame:0000000000007DEF                 db    0
.eh_frame:0000000000007DF0                 db  18h
.eh_frame:0000000000007DF1                 db    0
.eh_frame:0000000000007DF2                 db    0
.eh_frame:0000000000007DF3                 db    0
.eh_frame:0000000000007DF4                 db  84h
.eh_frame:0000000000007DF5                 db    9
.eh_frame:0000000000007DF6                 db    0
.eh_frame:0000000000007DF7                 db    0
.eh_frame:0000000000007DF8                 db 0A8h
.eh_frame:0000000000007DF9                 db 0D8h
.eh_frame:0000000000007DFA                 db 0FFh
.eh_frame:0000000000007DFB                 db 0FFh
.eh_frame:0000000000007DFC                 db  2Eh ; .
.eh_frame:0000000000007DFD                 db    0
.eh_frame:0000000000007DFE                 db    0
.eh_frame:0000000000007DFF                 db    0
.eh_frame:0000000000007E00                 db    0
.eh_frame:0000000000007E01                 db  47h ; G
.eh_frame:0000000000007E02                 db  0Eh
.eh_frame:0000000000007E03                 db  10h
.eh_frame:0000000000007E04                 db  61h ; a
.eh_frame:0000000000007E05                 db  0Ah
.eh_frame:0000000000007E06                 db  0Eh
.eh_frame:0000000000007E07                 db    8
.eh_frame:0000000000007E08                 db  41h ; A
.eh_frame:0000000000007E09                 db  0Bh
.eh_frame:0000000000007E0A                 db    0
.eh_frame:0000000000007E0B                 db    0
.eh_frame:0000000000007E0C                 db  24h ; $
.eh_frame:0000000000007E0D                 db    0
.eh_frame:0000000000007E0E                 db    0
.eh_frame:0000000000007E0F                 db    0
.eh_frame:0000000000007E10                 db 0A0h
.eh_frame:0000000000007E11                 db    9
.eh_frame:0000000000007E12                 db    0
.eh_frame:0000000000007E13                 db    0
.eh_frame:0000000000007E14                 db 0BCh
.eh_frame:0000000000007E15                 db 0D8h
.eh_frame:0000000000007E16                 db 0FFh
.eh_frame:0000000000007E17                 db 0FFh
.eh_frame:0000000000007E18                 db  28h ; (
.eh_frame:0000000000007E19                 db    0
.eh_frame:0000000000007E1A                 db    0
.eh_frame:0000000000007E1B                 db    0
.eh_frame:0000000000007E1C                 db    0
.eh_frame:0000000000007E1D                 db  41h ; A
.eh_frame:0000000000007E1E                 db  0Eh
.eh_frame:0000000000007E1F                 db  10h
.eh_frame:0000000000007E20                 db  86h
.eh_frame:0000000000007E21                 db    2
.eh_frame:0000000000007E22                 db  41h ; A
.eh_frame:0000000000007E23                 db  0Eh
.eh_frame:0000000000007E24                 db  18h
.eh_frame:0000000000007E25                 db  83h
.eh_frame:0000000000007E26                 db    3
.eh_frame:0000000000007E27                 db  4Dh ; M
.eh_frame:0000000000007E28                 db  0Eh
.eh_frame:0000000000007E29                 db  20h
.eh_frame:0000000000007E2A                 db  49h ; I
.eh_frame:0000000000007E2B                 db  0Eh
.eh_frame:0000000000007E2C                 db  18h
.eh_frame:0000000000007E2D                 db  47h ; G
.eh_frame:0000000000007E2E                 db  0Eh
.eh_frame:0000000000007E2F                 db  10h
.eh_frame:0000000000007E30                 db  41h ; A
.eh_frame:0000000000007E31                 db  0Eh
.eh_frame:0000000000007E32                 db    8
.eh_frame:0000000000007E33                 db    0
.eh_frame:0000000000007E34                 db  18h
.eh_frame:0000000000007E35                 db    0
.eh_frame:0000000000007E36                 db    0
.eh_frame:0000000000007E37                 db    0
.eh_frame:0000000000007E38                 db 0C8h
.eh_frame:0000000000007E39                 db    9
.eh_frame:0000000000007E3A                 db    0
.eh_frame:0000000000007E3B                 db    0
.eh_frame:0000000000007E3C                 db 0C4h
.eh_frame:0000000000007E3D                 db 0D8h
.eh_frame:0000000000007E3E                 db 0FFh
.eh_frame:0000000000007E3F                 db 0FFh
.eh_frame:0000000000007E40                 db  13h
.eh_frame:0000000000007E41                 db    0
.eh_frame:0000000000007E42                 db    0
.eh_frame:0000000000007E43                 db    0
.eh_frame:0000000000007E44                 db    0
.eh_frame:0000000000007E45                 db  41h ; A
.eh_frame:0000000000007E46                 db  0Eh
.eh_frame:0000000000007E47                 db  10h
.eh_frame:0000000000007E48                 db  83h
.eh_frame:0000000000007E49                 db    2
.eh_frame:0000000000007E4A                 db  50h ; P
.eh_frame:0000000000007E4B                 db  0Eh
.eh_frame:0000000000007E4C                 db    8
.eh_frame:0000000000007E4D                 db    0
.eh_frame:0000000000007E4E                 db    0
.eh_frame:0000000000007E4F                 db    0
.eh_frame:0000000000007E50                 db  14h
.eh_frame:0000000000007E51                 db    0
.eh_frame:0000000000007E52                 db    0
.eh_frame:0000000000007E53                 db    0
.eh_frame:0000000000007E54                 db 0E4h
.eh_frame:0000000000007E55                 db    9
.eh_frame:0000000000007E56                 db    0
.eh_frame:0000000000007E57                 db    0
.eh_frame:0000000000007E58                 db 0C8h
.eh_frame:0000000000007E59                 db 0D8h
.eh_frame:0000000000007E5A                 db 0FFh
.eh_frame:0000000000007E5B                 db 0FFh
.eh_frame:0000000000007E5C                 db  35h ; 5
.eh_frame:0000000000007E5D                 db    0
.eh_frame:0000000000007E5E                 db    0
.eh_frame:0000000000007E5F                 db    0
.eh_frame:0000000000007E60                 db    0
.eh_frame:0000000000007E61                 db  4Bh ; K
.eh_frame:0000000000007E62                 db  0Eh
.eh_frame:0000000000007E63                 db  10h
.eh_frame:0000000000007E64                 db    0
.eh_frame:0000000000007E65                 db    0
.eh_frame:0000000000007E66                 db    0
.eh_frame:0000000000007E67                 db    0
.eh_frame:0000000000007E68                 db  44h ; D
.eh_frame:0000000000007E69                 db    0
.eh_frame:0000000000007E6A                 db    0
.eh_frame:0000000000007E6B                 db    0
.eh_frame:0000000000007E6C                 db 0FCh
.eh_frame:0000000000007E6D                 db    9
.eh_frame:0000000000007E6E                 db    0
.eh_frame:0000000000007E6F                 db    0
.eh_frame:0000000000007E70                 db 0F0h
.eh_frame:0000000000007E71                 db 0D8h
.eh_frame:0000000000007E72                 db 0FFh
.eh_frame:0000000000007E73                 db 0FFh
.eh_frame:0000000000007E74                 db 0C1h
.eh_frame:0000000000007E75                 db    0
.eh_frame:0000000000007E76                 db    0
.eh_frame:0000000000007E77                 db    0
.eh_frame:0000000000007E78                 db    0
.eh_frame:0000000000007E79                 db  42h ; B
.eh_frame:0000000000007E7A                 db  0Eh
.eh_frame:0000000000007E7B                 db  10h
.eh_frame:0000000000007E7C                 db  8Eh
.eh_frame:0000000000007E7D                 db    2
.eh_frame:0000000000007E7E                 db  42h ; B
.eh_frame:0000000000007E7F                 db  0Eh
.eh_frame:0000000000007E80                 db  18h
.eh_frame:0000000000007E81                 db  8Dh
.eh_frame:0000000000007E82                 db    3
.eh_frame:0000000000007E83                 db  45h ; E
.eh_frame:0000000000007E84                 db  0Eh
.eh_frame:0000000000007E85                 db  20h
.eh_frame:0000000000007E86                 db  8Ch
.eh_frame:0000000000007E87                 db    4
.eh_frame:0000000000007E88                 db  41h ; A
.eh_frame:0000000000007E89                 db  0Eh
.eh_frame:0000000000007E8A                 db  28h ; (
.eh_frame:0000000000007E8B                 db  86h
.eh_frame:0000000000007E8C                 db    5
.eh_frame:0000000000007E8D                 db  44h ; D
.eh_frame:0000000000007E8E                 db  0Eh
.eh_frame:0000000000007E8F                 db  30h ; 0
.eh_frame:0000000000007E90                 db  83h
.eh_frame:0000000000007E91                 db    6
.eh_frame:0000000000007E92                 db  4Ah ; J
.eh_frame:0000000000007E93                 db  0Eh
.eh_frame:0000000000007E94                 db  40h ; @
.eh_frame:0000000000007E95                 db    2
.eh_frame:0000000000007E96                 db  70h ; p
.eh_frame:0000000000007E97                 db  0Ah
.eh_frame:0000000000007E98                 db  0Eh
.eh_frame:0000000000007E99                 db  30h ; 0
.eh_frame:0000000000007E9A                 db  41h ; A
.eh_frame:0000000000007E9B                 db  0Eh
.eh_frame:0000000000007E9C                 db  28h ; (
.eh_frame:0000000000007E9D                 db  41h ; A
.eh_frame:0000000000007E9E                 db  0Eh
.eh_frame:0000000000007E9F                 db  20h
.eh_frame:0000000000007EA0                 db  42h ; B
.eh_frame:0000000000007EA1                 db  0Eh
.eh_frame:0000000000007EA2                 db  18h
.eh_frame:0000000000007EA3                 db  42h ; B
.eh_frame:0000000000007EA4                 db  0Eh
.eh_frame:0000000000007EA5                 db  10h
.eh_frame:0000000000007EA6                 db  42h ; B
.eh_frame:0000000000007EA7                 db  0Eh
.eh_frame:0000000000007EA8                 db    8
.eh_frame:0000000000007EA9                 db  48h ; H
.eh_frame:0000000000007EAA                 db  0Bh
.eh_frame:0000000000007EAB                 db    0
.eh_frame:0000000000007EAC                 db    0
.eh_frame:0000000000007EAD                 db    0
.eh_frame:0000000000007EAE                 db    0
.eh_frame:0000000000007EAF                 db    0
.eh_frame:0000000000007EB0                 db  3Ch ; <
.eh_frame:0000000000007EB1                 db    0
.eh_frame:0000000000007EB2                 db    0
.eh_frame:0000000000007EB3                 db    0
.eh_frame:0000000000007EB4                 db  44h ; D
.eh_frame:0000000000007EB5                 db  0Ah
.eh_frame:0000000000007EB6                 db    0
.eh_frame:0000000000007EB7                 db    0
.eh_frame:0000000000007EB8                 db  78h ; x
.eh_frame:0000000000007EB9                 db 0D9h
.eh_frame:0000000000007EBA                 db 0FFh
.eh_frame:0000000000007EBB                 db 0FFh
.eh_frame:0000000000007EBC                 db  83h
.eh_frame:0000000000007EBD                 db    0
.eh_frame:0000000000007EBE                 db    0
.eh_frame:0000000000007EBF                 db    0
.eh_frame:0000000000007EC0                 db    0
.eh_frame:0000000000007EC1                 db  42h ; B
.eh_frame:0000000000007EC2                 db  0Eh
.eh_frame:0000000000007EC3                 db  10h
.eh_frame:0000000000007EC4                 db  8Dh
.eh_frame:0000000000007EC5                 db    2
.eh_frame:0000000000007EC6                 db  42h ; B
.eh_frame:0000000000007EC7                 db  0Eh
.eh_frame:0000000000007EC8                 db  18h
.eh_frame:0000000000007EC9                 db  8Ch
.eh_frame:0000000000007ECA                 db    3
.eh_frame:0000000000007ECB                 db  44h ; D
.eh_frame:0000000000007ECC                 db  0Eh
.eh_frame:0000000000007ECD                 db  20h
.eh_frame:0000000000007ECE                 db  86h
.eh_frame:0000000000007ECF                 db    4
.eh_frame:0000000000007ED0                 db  41h ; A
.eh_frame:0000000000007ED1                 db  0Eh
.eh_frame:0000000000007ED2                 db  28h ; (
.eh_frame:0000000000007ED3                 db  83h
.eh_frame:0000000000007ED4                 db    5
.eh_frame:0000000000007ED5                 db  4Ah ; J
.eh_frame:0000000000007ED6                 db  0Eh
.eh_frame:0000000000007ED7                 db  40h ; @
.eh_frame:0000000000007ED8                 db    2
.eh_frame:0000000000007ED9                 db  64h ; d
.eh_frame:0000000000007EDA                 db  0Ah
.eh_frame:0000000000007EDB                 db  0Eh
.eh_frame:0000000000007EDC                 db  28h ; (
.eh_frame:0000000000007EDD                 db  41h ; A
.eh_frame:0000000000007EDE                 db  0Eh
.eh_frame:0000000000007EDF                 db  20h
.eh_frame:0000000000007EE0                 db  41h ; A
.eh_frame:0000000000007EE1                 db  0Eh
.eh_frame:0000000000007EE2                 db  18h
.eh_frame:0000000000007EE3                 db  42h ; B
.eh_frame:0000000000007EE4                 db  0Eh
.eh_frame:0000000000007EE5                 db  10h
.eh_frame:0000000000007EE6                 db  42h ; B
.eh_frame:0000000000007EE7                 db  0Eh
.eh_frame:0000000000007EE8                 db    8
.eh_frame:0000000000007EE9                 db  41h ; A
.eh_frame:0000000000007EEA                 db  0Bh
.eh_frame:0000000000007EEB                 db    0
.eh_frame:0000000000007EEC                 db    0
.eh_frame:0000000000007EED                 db    0
.eh_frame:0000000000007EEE                 db    0
.eh_frame:0000000000007EEF                 db    0
.eh_frame:0000000000007EF0                 db  38h ; 8
.eh_frame:0000000000007EF1                 db    0
.eh_frame:0000000000007EF2                 db    0
.eh_frame:0000000000007EF3                 db    0
.eh_frame:0000000000007EF4                 db  84h
.eh_frame:0000000000007EF5                 db  0Ah
.eh_frame:0000000000007EF6                 db    0
.eh_frame:0000000000007EF7                 db    0
.eh_frame:0000000000007EF8                 db 0C8h
.eh_frame:0000000000007EF9                 db 0D9h
.eh_frame:0000000000007EFA                 db 0FFh
.eh_frame:0000000000007EFB                 db 0FFh
.eh_frame:0000000000007EFC                 db  85h
.eh_frame:0000000000007EFD                 db    1
.eh_frame:0000000000007EFE                 db    0
.eh_frame:0000000000007EFF                 db    0
.eh_frame:0000000000007F00                 db    0
.eh_frame:0000000000007F01                 db  42h ; B
.eh_frame:0000000000007F02                 db  0Eh
.eh_frame:0000000000007F03                 db  10h
.eh_frame:0000000000007F04                 db  8Dh
.eh_frame:0000000000007F05                 db    2
.eh_frame:0000000000007F06                 db  42h ; B
.eh_frame:0000000000007F07                 db  0Eh
.eh_frame:0000000000007F08                 db  18h
.eh_frame:0000000000007F09                 db  8Ch
.eh_frame:0000000000007F0A                 db    3
.eh_frame:0000000000007F0B                 db  44h ; D
.eh_frame:0000000000007F0C                 db  0Eh
.eh_frame:0000000000007F0D                 db  20h
.eh_frame:0000000000007F0E                 db  86h
.eh_frame:0000000000007F0F                 db    4
.eh_frame:0000000000007F10                 db  41h ; A
.eh_frame:0000000000007F11                 db  0Eh
.eh_frame:0000000000007F12                 db  28h ; (
.eh_frame:0000000000007F13                 db  83h
.eh_frame:0000000000007F14                 db    5
.eh_frame:0000000000007F15                 db  50h ; P
.eh_frame:0000000000007F16                 db  0Eh
.eh_frame:0000000000007F17                 db  40h ; @
.eh_frame:0000000000007F18                 db    2
.eh_frame:0000000000007F19                 db  6Fh ; o
.eh_frame:0000000000007F1A                 db  0Ah
.eh_frame:0000000000007F1B                 db  0Eh
.eh_frame:0000000000007F1C                 db  28h ; (
.eh_frame:0000000000007F1D                 db  41h ; A
.eh_frame:0000000000007F1E                 db  0Eh
.eh_frame:0000000000007F1F                 db  20h
.eh_frame:0000000000007F20                 db  41h ; A
.eh_frame:0000000000007F21                 db  0Eh
.eh_frame:0000000000007F22                 db  18h
.eh_frame:0000000000007F23                 db  42h ; B
.eh_frame:0000000000007F24                 db  0Eh
.eh_frame:0000000000007F25                 db  10h
.eh_frame:0000000000007F26                 db  42h ; B
.eh_frame:0000000000007F27                 db  0Eh
.eh_frame:0000000000007F28                 db    8
.eh_frame:0000000000007F29                 db  42h ; B
.eh_frame:0000000000007F2A                 db  0Bh
.eh_frame:0000000000007F2B                 db    0
.eh_frame:0000000000007F2C                 db  38h ; 8
.eh_frame:0000000000007F2D                 db    0
.eh_frame:0000000000007F2E                 db    0
.eh_frame:0000000000007F2F                 db    0
.eh_frame:0000000000007F30                 db 0C0h
.eh_frame:0000000000007F31                 db  0Ah
.eh_frame:0000000000007F32                 db    0
.eh_frame:0000000000007F33                 db    0
.eh_frame:0000000000007F34                 db  1Ch
.eh_frame:0000000000007F35                 db 0DBh
.eh_frame:0000000000007F36                 db 0FFh
.eh_frame:0000000000007F37                 db 0FFh
.eh_frame:0000000000007F38                 db 0DBh
.eh_frame:0000000000007F39                 db    0
.eh_frame:0000000000007F3A                 db    0
.eh_frame:0000000000007F3B                 db    0
.eh_frame:0000000000007F3C                 db    0
.eh_frame:0000000000007F3D                 db  41h ; A
.eh_frame:0000000000007F3E                 db  0Eh
.eh_frame:0000000000007F3F                 db  10h
.eh_frame:0000000000007F40                 db  86h
.eh_frame:0000000000007F41                 db    2
.eh_frame:0000000000007F42                 db  48h ; H
.eh_frame:0000000000007F43                 db  0Eh
.eh_frame:0000000000007F44                 db  18h
.eh_frame:0000000000007F45                 db  83h
.eh_frame:0000000000007F46                 db    3
.eh_frame:0000000000007F47                 db  4Bh ; K
.eh_frame:0000000000007F48                 db  0Eh
.eh_frame:0000000000007F49                 db  30h ; 0
.eh_frame:0000000000007F4A                 db  70h ; p
.eh_frame:0000000000007F4B                 db  0Ah
.eh_frame:0000000000007F4C                 db  0Eh
.eh_frame:0000000000007F4D                 db  18h
.eh_frame:0000000000007F4E                 db  41h ; A
.eh_frame:0000000000007F4F                 db  0Eh
.eh_frame:0000000000007F50                 db  10h
.eh_frame:0000000000007F51                 db  41h ; A
.eh_frame:0000000000007F52                 db  0Eh
.eh_frame:0000000000007F53                 db    8
.eh_frame:0000000000007F54                 db  4Ah ; J
.eh_frame:0000000000007F55                 db  0Bh
.eh_frame:0000000000007F56                 db    2
.eh_frame:0000000000007F57                 db  66h ; f
.eh_frame:0000000000007F58                 db  0Ah
.eh_frame:0000000000007F59                 db  0Eh
.eh_frame:0000000000007F5A                 db  18h
.eh_frame:0000000000007F5B                 db  43h ; C
.eh_frame:0000000000007F5C                 db  0Eh
.eh_frame:0000000000007F5D                 db  10h
.eh_frame:0000000000007F5E                 db  41h ; A
.eh_frame:0000000000007F5F                 db  0Eh
.eh_frame:0000000000007F60                 db    8
.eh_frame:0000000000007F61                 db  46h ; F
.eh_frame:0000000000007F62                 db  0Bh
.eh_frame:0000000000007F63                 db    0
.eh_frame:0000000000007F64                 db    0
.eh_frame:0000000000007F65                 db    0
.eh_frame:0000000000007F66                 db    0
.eh_frame:0000000000007F67                 db    0
.eh_frame:0000000000007F68                 db  34h ; 4
.eh_frame:0000000000007F69                 db    0
.eh_frame:0000000000007F6A                 db    0
.eh_frame:0000000000007F6B                 db    0
.eh_frame:0000000000007F6C                 db 0FCh
.eh_frame:0000000000007F6D                 db  0Ah
.eh_frame:0000000000007F6E                 db    0
.eh_frame:0000000000007F6F                 db    0
.eh_frame:0000000000007F70                 db 0C0h
.eh_frame:0000000000007F71                 db 0DBh
.eh_frame:0000000000007F72                 db 0FFh
.eh_frame:0000000000007F73                 db 0FFh
.eh_frame:0000000000007F74                 db  6Ch ; l
.eh_frame:0000000000007F75                 db    0
.eh_frame:0000000000007F76                 db    0
.eh_frame:0000000000007F77                 db    0
.eh_frame:0000000000007F78                 db    0
.eh_frame:0000000000007F79                 db  41h ; A
.eh_frame:0000000000007F7A                 db  0Eh
.eh_frame:0000000000007F7B                 db  10h
.eh_frame:0000000000007F7C                 db  86h
.eh_frame:0000000000007F7D                 db    2
.eh_frame:0000000000007F7E                 db  41h ; A
.eh_frame:0000000000007F7F                 db  0Eh
.eh_frame:0000000000007F80                 db  18h
.eh_frame:0000000000007F81                 db  83h
.eh_frame:0000000000007F82                 db    3
.eh_frame:0000000000007F83                 db  4Ah ; J
.eh_frame:0000000000007F84                 db  0Eh
.eh_frame:0000000000007F85                 db  20h
.eh_frame:0000000000007F86                 db  5Ch ; \
.eh_frame:0000000000007F87                 db  0Ah
.eh_frame:0000000000007F88                 db  0Eh
.eh_frame:0000000000007F89                 db  18h
.eh_frame:0000000000007F8A                 db  47h ; G
.eh_frame:0000000000007F8B                 db  0Eh
.eh_frame:0000000000007F8C                 db  10h
.eh_frame:0000000000007F8D                 db  41h ; A
.eh_frame:0000000000007F8E                 db  0Eh
.eh_frame:0000000000007F8F                 db    8
.eh_frame:0000000000007F90                 db  48h ; H
.eh_frame:0000000000007F91                 db  0Bh
.eh_frame:0000000000007F92                 db  54h ; T
.eh_frame:0000000000007F93                 db  0Ah
.eh_frame:0000000000007F94                 db  0Eh
.eh_frame:0000000000007F95                 db  18h
.eh_frame:0000000000007F96                 db  41h ; A
.eh_frame:0000000000007F97                 db  0Eh
.eh_frame:0000000000007F98                 db  10h
.eh_frame:0000000000007F99                 db  41h ; A
.eh_frame:0000000000007F9A                 db  0Eh
.eh_frame:0000000000007F9B                 db    8
.eh_frame:0000000000007F9C                 db  42h ; B
.eh_frame:0000000000007F9D                 db  0Bh
.eh_frame:0000000000007F9E                 db    0
.eh_frame:0000000000007F9F                 db    0
.eh_frame:0000000000007FA0                 db  4Ch ; L
.eh_frame:0000000000007FA1                 db    0
.eh_frame:0000000000007FA2                 db    0
.eh_frame:0000000000007FA3                 db    0
.eh_frame:0000000000007FA4                 db  34h ; 4
.eh_frame:0000000000007FA5                 db  0Bh
.eh_frame:0000000000007FA6                 db    0
.eh_frame:0000000000007FA7                 db    0
.eh_frame:0000000000007FA8                 db 0F8h
.eh_frame:0000000000007FA9                 db 0DBh
.eh_frame:0000000000007FAA                 db 0FFh
.eh_frame:0000000000007FAB                 db 0FFh
.eh_frame:0000000000007FAC                 db  7Dh ; }
.eh_frame:0000000000007FAD                 db    0
.eh_frame:0000000000007FAE                 db    0
.eh_frame:0000000000007FAF                 db    0
.eh_frame:0000000000007FB0                 db    0
.eh_frame:0000000000007FB1                 db  42h ; B
.eh_frame:0000000000007FB2                 db  0Eh
.eh_frame:0000000000007FB3                 db  10h
.eh_frame:0000000000007FB4                 db  8Ch
.eh_frame:0000000000007FB5                 db    2
.eh_frame:0000000000007FB6                 db  41h ; A
.eh_frame:0000000000007FB7                 db  0Eh
.eh_frame:0000000000007FB8                 db  18h
.eh_frame:0000000000007FB9                 db  86h
.eh_frame:0000000000007FBA                 db    3
.eh_frame:0000000000007FBB                 db  44h ; D
.eh_frame:0000000000007FBC                 db  0Eh
.eh_frame:0000000000007FBD                 db  20h
.eh_frame:0000000000007FBE                 db  83h
.eh_frame:0000000000007FBF                 db    4
.eh_frame:0000000000007FC0                 db  69h ; i
.eh_frame:0000000000007FC1                 db  0Ah
.eh_frame:0000000000007FC2                 db  0Eh
.eh_frame:0000000000007FC3                 db  18h
.eh_frame:0000000000007FC4                 db  41h ; A
.eh_frame:0000000000007FC5                 db  0Eh
.eh_frame:0000000000007FC6                 db  10h
.eh_frame:0000000000007FC7                 db  42h ; B
.eh_frame:0000000000007FC8                 db  0Eh
.eh_frame:0000000000007FC9                 db    8
.eh_frame:0000000000007FCA                 db  45h ; E
.eh_frame:0000000000007FCB                 db  0Bh
.eh_frame:0000000000007FCC                 db  55h ; U
.eh_frame:0000000000007FCD                 db  0Ah
.eh_frame:0000000000007FCE                 db  0Eh
.eh_frame:0000000000007FCF                 db  18h
.eh_frame:0000000000007FD0                 db  41h ; A
.eh_frame:0000000000007FD1                 db  0Eh
.eh_frame:0000000000007FD2                 db  10h
.eh_frame:0000000000007FD3                 db  42h ; B
.eh_frame:0000000000007FD4                 db  0Eh
.eh_frame:0000000000007FD5                 db    8
.eh_frame:0000000000007FD6                 db  48h ; H
.eh_frame:0000000000007FD7                 db  0Bh
.eh_frame:0000000000007FD8                 db  41h ; A
.eh_frame:0000000000007FD9                 db  0Ah
.eh_frame:0000000000007FDA                 db  0Eh
.eh_frame:0000000000007FDB                 db  18h
.eh_frame:0000000000007FDC                 db  46h ; F
.eh_frame:0000000000007FDD                 db  0Eh
.eh_frame:0000000000007FDE                 db  10h
.eh_frame:0000000000007FDF                 db  42h ; B
.eh_frame:0000000000007FE0                 db  0Eh
.eh_frame:0000000000007FE1                 db    8
.eh_frame:0000000000007FE2                 db  47h ; G
.eh_frame:0000000000007FE3                 db  0Bh
.eh_frame:0000000000007FE4                 db  49h ; I
.eh_frame:0000000000007FE5                 db  0Eh
.eh_frame:0000000000007FE6                 db  18h
.eh_frame:0000000000007FE7                 db  41h ; A
.eh_frame:0000000000007FE8                 db  0Eh
.eh_frame:0000000000007FE9                 db  10h
.eh_frame:0000000000007FEA                 db  42h ; B
.eh_frame:0000000000007FEB                 db  0Eh
.eh_frame:0000000000007FEC                 db    8
.eh_frame:0000000000007FED                 db    0
.eh_frame:0000000000007FEE                 db    0
.eh_frame:0000000000007FEF                 db    0
.eh_frame:0000000000007FF0                 db  1Ch
.eh_frame:0000000000007FF1                 db    0
.eh_frame:0000000000007FF2                 db    0
.eh_frame:0000000000007FF3                 db    0
.eh_frame:0000000000007FF4                 db  84h
.eh_frame:0000000000007FF5                 db  0Bh
.eh_frame:0000000000007FF6                 db    0
.eh_frame:0000000000007FF7                 db    0
.eh_frame:0000000000007FF8                 db  28h ; (
.eh_frame:0000000000007FF9                 db 0DCh
.eh_frame:0000000000007FFA                 db 0FFh
.eh_frame:0000000000007FFB                 db 0FFh
.eh_frame:0000000000007FFC                 db  60h ; `
.eh_frame:0000000000007FFD                 db    0
.eh_frame:0000000000007FFE                 db    0
.eh_frame:0000000000007FFF                 db    0
.eh_frame:0000000000008000                 db    0
.eh_frame:0000000000008001                 db  44h ; D
.eh_frame:0000000000008002                 db  0Eh
.eh_frame:0000000000008003                 db  10h
.eh_frame:0000000000008004                 db  75h ; u
.eh_frame:0000000000008005                 db  0Ah
.eh_frame:0000000000008006                 db  0Eh
.eh_frame:0000000000008007                 db    8
.eh_frame:0000000000008008                 db  47h ; G
.eh_frame:0000000000008009                 db  0Bh
.eh_frame:000000000000800A                 db  5Fh ; _
.eh_frame:000000000000800B                 db  0Eh
.eh_frame:000000000000800C                 db    8
.eh_frame:000000000000800D                 db    0
.eh_frame:000000000000800E                 db    0
.eh_frame:000000000000800F                 db    0
.eh_frame:0000000000008010                 db  1Ch
.eh_frame:0000000000008011                 db    0
.eh_frame:0000000000008012                 db    0
.eh_frame:0000000000008013                 db    0
.eh_frame:0000000000008014                 db 0A4h
.eh_frame:0000000000008015                 db  0Bh
.eh_frame:0000000000008016                 db    0
.eh_frame:0000000000008017                 db    0
.eh_frame:0000000000008018                 db  68h ; h
.eh_frame:0000000000008019                 db 0DCh
.eh_frame:000000000000801A                 db 0FFh
.eh_frame:000000000000801B                 db 0FFh
.eh_frame:000000000000801C                 db  3Ch ; <
.eh_frame:000000000000801D                 db    0
.eh_frame:000000000000801E                 db    0
.eh_frame:000000000000801F                 db    0
.eh_frame:0000000000008020                 db    0
.eh_frame:0000000000008021                 db  44h ; D
.eh_frame:0000000000008022                 db  0Eh
.eh_frame:0000000000008023                 db  10h
.eh_frame:0000000000008024                 db  61h ; a
.eh_frame:0000000000008025                 db  0Ah
.eh_frame:0000000000008026                 db  0Eh
.eh_frame:0000000000008027                 db    8
.eh_frame:0000000000008028                 db  4Bh ; K
.eh_frame:0000000000008029                 db  0Bh
.eh_frame:000000000000802A                 db  4Bh ; K
.eh_frame:000000000000802B                 db  0Eh
.eh_frame:000000000000802C                 db    8
.eh_frame:000000000000802D                 db    0
.eh_frame:000000000000802E                 db    0
.eh_frame:000000000000802F                 db    0
.eh_frame:0000000000008030                 db  34h ; 4
.eh_frame:0000000000008031                 db    0
.eh_frame:0000000000008032                 db    0
.eh_frame:0000000000008033                 db    0
.eh_frame:0000000000008034                 db 0C4h
.eh_frame:0000000000008035                 db  0Bh
.eh_frame:0000000000008036                 db    0
.eh_frame:0000000000008037                 db    0
.eh_frame:0000000000008038                 db  88h
.eh_frame:0000000000008039                 db 0DCh
.eh_frame:000000000000803A                 db 0FFh
.eh_frame:000000000000803B                 db 0FFh
.eh_frame:000000000000803C                 db  7Bh ; {
.eh_frame:000000000000803D                 db    0
.eh_frame:000000000000803E                 db    0
.eh_frame:000000000000803F                 db    0
.eh_frame:0000000000008040                 db    0
.eh_frame:0000000000008041                 db  42h ; B
.eh_frame:0000000000008042                 db  0Eh
.eh_frame:0000000000008043                 db  10h
.eh_frame:0000000000008044                 db  8Ch
.eh_frame:0000000000008045                 db    2
.eh_frame:0000000000008046                 db  41h ; A
.eh_frame:0000000000008047                 db  0Eh
.eh_frame:0000000000008048                 db  18h
.eh_frame:0000000000008049                 db  86h
.eh_frame:000000000000804A                 db    3
.eh_frame:000000000000804B                 db  41h ; A
.eh_frame:000000000000804C                 db  0Eh
.eh_frame:000000000000804D                 db  20h
.eh_frame:000000000000804E                 db  83h
.eh_frame:000000000000804F                 db    4
.eh_frame:0000000000008050                 db  7Dh ; }
.eh_frame:0000000000008051                 db  0Ah
.eh_frame:0000000000008052                 db  0Eh
.eh_frame:0000000000008053                 db  18h
.eh_frame:0000000000008054                 db  41h ; A
.eh_frame:0000000000008055                 db  0Eh
.eh_frame:0000000000008056                 db  10h
.eh_frame:0000000000008057                 db  42h ; B
.eh_frame:0000000000008058                 db  0Eh
.eh_frame:0000000000008059                 db    8
.eh_frame:000000000000805A                 db  44h ; D
.eh_frame:000000000000805B                 db  0Bh
.eh_frame:000000000000805C                 db  60h ; `
.eh_frame:000000000000805D                 db  0Ah
.eh_frame:000000000000805E                 db  0Eh
.eh_frame:000000000000805F                 db  18h
.eh_frame:0000000000008060                 db  41h ; A
.eh_frame:0000000000008061                 db  0Eh
.eh_frame:0000000000008062                 db  10h
.eh_frame:0000000000008063                 db  42h ; B
.eh_frame:0000000000008064                 db  0Eh
.eh_frame:0000000000008065                 db    8
.eh_frame:0000000000008066                 db  45h ; E
.eh_frame:0000000000008067                 db  0Bh
.eh_frame:0000000000008068                 db  1Ch
.eh_frame:0000000000008069                 db    0
.eh_frame:000000000000806A                 db    0
.eh_frame:000000000000806B                 db    0
.eh_frame:000000000000806C                 db 0FCh
.eh_frame:000000000000806D                 db  0Bh
.eh_frame:000000000000806E                 db    0
.eh_frame:000000000000806F                 db    0
.eh_frame:0000000000008070                 db 0D0h
.eh_frame:0000000000008071                 db 0DCh
.eh_frame:0000000000008072                 db 0FFh
.eh_frame:0000000000008073                 db 0FFh
.eh_frame:0000000000008074                 db  40h ; @
.eh_frame:0000000000008075                 db    0
.eh_frame:0000000000008076                 db    0
.eh_frame:0000000000008077                 db    0
.eh_frame:0000000000008078                 db    0
.eh_frame:0000000000008079                 db  44h ; D
.eh_frame:000000000000807A                 db  0Eh
.eh_frame:000000000000807B                 db  10h
.eh_frame:000000000000807C                 db  83h
.eh_frame:000000000000807D                 db    2
.eh_frame:000000000000807E                 db  5Ah ; Z
.eh_frame:000000000000807F                 db  0Ah
.eh_frame:0000000000008080                 db  0Eh
.eh_frame:0000000000008081                 db    8
.eh_frame:0000000000008082                 db  4Ah ; J
.eh_frame:0000000000008083                 db  0Bh
.eh_frame:0000000000008084                 db  53h ; S
.eh_frame:0000000000008085                 db  0Eh
.eh_frame:0000000000008086                 db    8
.eh_frame:0000000000008087                 db    0
.eh_frame:0000000000008088                 db  2Ch ; ,
.eh_frame:0000000000008089                 db    0
.eh_frame:000000000000808A                 db    0
.eh_frame:000000000000808B                 db    0
.eh_frame:000000000000808C                 db  1Ch
.eh_frame:000000000000808D                 db  0Ch
.eh_frame:000000000000808E                 db    0
.eh_frame:000000000000808F                 db    0
.eh_frame:0000000000008090                 db 0F0h
.eh_frame:0000000000008091                 db 0DCh
.eh_frame:0000000000008092                 db 0FFh
.eh_frame:0000000000008093                 db 0FFh
.eh_frame:0000000000008094                 db  57h ; W
.eh_frame:0000000000008095                 db    0
.eh_frame:0000000000008096                 db    0
.eh_frame:0000000000008097                 db    0
.eh_frame:0000000000008098                 db    0
.eh_frame:0000000000008099                 db  63h ; c
.eh_frame:000000000000809A                 db  0Eh
.eh_frame:000000000000809B                 db  10h
.eh_frame:000000000000809C                 db  8Ch
.eh_frame:000000000000809D                 db    2
.eh_frame:000000000000809E                 db  41h ; A
.eh_frame:000000000000809F                 db  0Eh
.eh_frame:00000000000080A0                 db  18h
.eh_frame:00000000000080A1                 db  86h
.eh_frame:00000000000080A2                 db    3
.eh_frame:00000000000080A3                 db  44h ; D
.eh_frame:00000000000080A4                 db  0Eh
.eh_frame:00000000000080A5                 db  20h
.eh_frame:00000000000080A6                 db  83h
.eh_frame:00000000000080A7                 db    4
.eh_frame:00000000000080A8                 db  6Bh ; k
.eh_frame:00000000000080A9                 db  0Eh
.eh_frame:00000000000080AA                 db  18h
.eh_frame:00000000000080AB                 db  41h ; A
.eh_frame:00000000000080AC                 db  0Eh
.eh_frame:00000000000080AD                 db  10h
.eh_frame:00000000000080AE                 db  42h ; B
.eh_frame:00000000000080AF                 db  0Eh
.eh_frame:00000000000080B0                 db    8
.eh_frame:00000000000080B1                 db    0
.eh_frame:00000000000080B2                 db    0
.eh_frame:00000000000080B3                 db    0
.eh_frame:00000000000080B4                 db    0
.eh_frame:00000000000080B5                 db    0
.eh_frame:00000000000080B6                 db    0
.eh_frame:00000000000080B7                 db    0
.eh_frame:00000000000080B8                 db  44h ; D
.eh_frame:00000000000080B9                 db    0
.eh_frame:00000000000080BA                 db    0
.eh_frame:00000000000080BB                 db    0
.eh_frame:00000000000080BC                 db  4Ch ; L
.eh_frame:00000000000080BD                 db  0Ch
.eh_frame:00000000000080BE                 db    0
.eh_frame:00000000000080BF                 db    0
.eh_frame:00000000000080C0                 db  20h
.eh_frame:00000000000080C1                 db 0DDh
.eh_frame:00000000000080C2                 db 0FFh
.eh_frame:00000000000080C3                 db 0FFh
.eh_frame:00000000000080C4                 db  65h ; e
.eh_frame:00000000000080C5                 db    0
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db    0
.eh_frame:00000000000080C9                 db  42h ; B
.eh_frame:00000000000080CA                 db  0Eh
.eh_frame:00000000000080CB                 db  10h
.eh_frame:00000000000080CC                 db  8Fh
.eh_frame:00000000000080CD                 db    2
.eh_frame:00000000000080CE                 db  42h ; B
.eh_frame:00000000000080CF                 db  0Eh
.eh_frame:00000000000080D0                 db  18h
.eh_frame:00000000000080D1                 db  8Eh
.eh_frame:00000000000080D2                 db    3
.eh_frame:00000000000080D3                 db  45h ; E
.eh_frame:00000000000080D4                 db  0Eh
.eh_frame:00000000000080D5                 db  20h
.eh_frame:00000000000080D6                 db  8Dh
.eh_frame:00000000000080D7                 db    4
.eh_frame:00000000000080D8                 db  42h ; B
.eh_frame:00000000000080D9                 db  0Eh
.eh_frame:00000000000080DA                 db  28h ; (
.eh_frame:00000000000080DB                 db  8Ch
.eh_frame:00000000000080DC                 db    5
.eh_frame:00000000000080DD                 db  48h ; H
.eh_frame:00000000000080DE                 db  0Eh
.eh_frame:00000000000080DF                 db  30h ; 0
.eh_frame:00000000000080E0                 db  86h
.eh_frame:00000000000080E1                 db    6
.eh_frame:00000000000080E2                 db  48h ; H
.eh_frame:00000000000080E3                 db  0Eh
.eh_frame:00000000000080E4                 db  38h ; 8
.eh_frame:00000000000080E5                 db  83h
.eh_frame:00000000000080E6                 db    7
.eh_frame:00000000000080E7                 db  4Dh ; M
.eh_frame:00000000000080E8                 db  0Eh
.eh_frame:00000000000080E9                 db  40h ; @
.eh_frame:00000000000080EA                 db  72h ; r
.eh_frame:00000000000080EB                 db  0Eh
.eh_frame:00000000000080EC                 db  38h ; 8
.eh_frame:00000000000080ED                 db  41h ; A
.eh_frame:00000000000080EE                 db  0Eh
.eh_frame:00000000000080EF                 db  30h ; 0
.eh_frame:00000000000080F0                 db  41h ; A
.eh_frame:00000000000080F1                 db  0Eh
.eh_frame:00000000000080F2                 db  28h ; (
.eh_frame:00000000000080F3                 db  42h ; B
.eh_frame:00000000000080F4                 db  0Eh
.eh_frame:00000000000080F5                 db  20h
.eh_frame:00000000000080F6                 db  42h ; B
.eh_frame:00000000000080F7                 db  0Eh
.eh_frame:00000000000080F8                 db  18h
.eh_frame:00000000000080F9                 db  42h ; B
.eh_frame:00000000000080FA                 db  0Eh
.eh_frame:00000000000080FB                 db  10h
.eh_frame:00000000000080FC                 db  42h ; B
.eh_frame:00000000000080FD                 db  0Eh
.eh_frame:00000000000080FE                 db    8
.eh_frame:00000000000080FF                 db    0
.eh_frame:0000000000008100                 db  14h
.eh_frame:0000000000008101                 db    0
.eh_frame:0000000000008102                 db    0
.eh_frame:0000000000008103                 db    0
.eh_frame:0000000000008104                 db  94h
.eh_frame:0000000000008105                 db  0Ch
.eh_frame:0000000000008106                 db    0
.eh_frame:0000000000008107                 db    0
.eh_frame:0000000000008108                 db  48h ; H
.eh_frame:0000000000008109                 db 0DDh
.eh_frame:000000000000810A                 db 0FFh
.eh_frame:000000000000810B                 db 0FFh
.eh_frame:000000000000810C                 db    2
.eh_frame:000000000000810D                 db    0
.eh_frame:000000000000810E                 db    0
.eh_frame:000000000000810F                 db    0
.eh_frame:0000000000008110                 db    0
.eh_frame:0000000000008111                 db    0
.eh_frame:0000000000008112                 db    0
.eh_frame:0000000000008113                 db    0
.eh_frame:0000000000008114                 db    0
.eh_frame:0000000000008115                 db    0
.eh_frame:0000000000008116                 db    0
.eh_frame:0000000000008117                 db    0
.eh_frame:0000000000008118                 db  10h
.eh_frame:0000000000008119                 db    0
.eh_frame:000000000000811A                 db    0
.eh_frame:000000000000811B                 db    0
.eh_frame:000000000000811C                 db 0ACh
.eh_frame:000000000000811D                 db  0Ch
.eh_frame:000000000000811E                 db    0
.eh_frame:000000000000811F                 db    0
.eh_frame:0000000000008120                 db  40h ; @
.eh_frame:0000000000008121                 db 0DDh
.eh_frame:0000000000008122                 db 0FFh
.eh_frame:0000000000008123                 db 0FFh
.eh_frame:0000000000008124                 db  0Eh
.eh_frame:0000000000008125                 db    0
.eh_frame:0000000000008126                 db    0
.eh_frame:0000000000008127                 db    0
.eh_frame:0000000000008128                 db    0
.eh_frame:0000000000008129                 db    0
.eh_frame:000000000000812A                 db    0
.eh_frame:000000000000812B                 db    0
.eh_frame:000000000000812C __FRAME_END__   db    0
.eh_frame:000000000000812D                 db    0
.eh_frame:000000000000812E                 db    0
.eh_frame:000000000000812F                 db    0
.eh_frame:000000000000812F _eh_frame       ends
.eh_frame:000000000000812F
.init_array:0000000000208A30 ; ELF Initialization Function Table
.init_array:0000000000208A30 ; ===========================================================================
.init_array:0000000000208A30
.init_array:0000000000208A30 ; Segment type: Pure data
.init_array:0000000000208A30 ; Segment permissions: Read/Write
.init_array:0000000000208A30 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208A30                 assume cs:_init_array
.init_array:0000000000208A30                 ;org 208A30h
.init_array:0000000000208A30 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208A30                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208A30                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208A30 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208A30
.fini_array:0000000000208A38 ; ELF Termination Function Table
.fini_array:0000000000208A38 ; ===========================================================================
.fini_array:0000000000208A38
.fini_array:0000000000208A38 ; Segment type: Pure data
.fini_array:0000000000208A38 ; Segment permissions: Read/Write
.fini_array:0000000000208A38 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208A38                 assume cs:_fini_array
.fini_array:0000000000208A38                 ;org 208A38h
.fini_array:0000000000208A38 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208A38                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208A38 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208A38
.data.rel.ro:0000000000208A40 ; ===========================================================================
.data.rel.ro:0000000000208A40
.data.rel.ro:0000000000208A40 ; Segment type: Pure data
.data.rel.ro:0000000000208A40 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208A40 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208A40                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208A40                 ;org 208A40h
.data.rel.ro:0000000000208A40 ; struct option long_options
.data.rel.ro:0000000000208A40 long_options    dq offset aKillAfter    ; name
.data.rel.ro:0000000000208A40                                         ; DATA XREF: main:loc_1DE0↑o
.data.rel.ro:0000000000208A40                 dd 1                    ; has_arg ; "kill-after"
.data.rel.ro:0000000000208A40                 db 4 dup(0)
.data.rel.ro:0000000000208A40                 dq 0                    ; flag
.data.rel.ro:0000000000208A40                 dd 6Bh                  ; val
.data.rel.ro:0000000000208A40                 db 4 dup(0)
.data.rel.ro:0000000000208A60                 dq offset aSInvalidSignal+0Ch ; "signal"
.data.rel.ro:0000000000208A68                 db    1
.data.rel.ro:0000000000208A69                 db    0
.data.rel.ro:0000000000208A6A                 db    0
.data.rel.ro:0000000000208A6B                 db    0
.data.rel.ro:0000000000208A6C                 db    0
.data.rel.ro:0000000000208A6D                 db    0
.data.rel.ro:0000000000208A6E                 db    0
.data.rel.ro:0000000000208A6F                 db    0
.data.rel.ro:0000000000208A70                 db    0
.data.rel.ro:0000000000208A71                 db    0
.data.rel.ro:0000000000208A72                 db    0
.data.rel.ro:0000000000208A73                 db    0
.data.rel.ro:0000000000208A74                 db    0
.data.rel.ro:0000000000208A75                 db    0
.data.rel.ro:0000000000208A76                 db    0
.data.rel.ro:0000000000208A77                 db    0
.data.rel.ro:0000000000208A78                 db  73h ; s
.data.rel.ro:0000000000208A79                 db    0
.data.rel.ro:0000000000208A7A                 db    0
.data.rel.ro:0000000000208A7B                 db    0
.data.rel.ro:0000000000208A7C                 db    0
.data.rel.ro:0000000000208A7D                 db    0
.data.rel.ro:0000000000208A7E                 db    0
.data.rel.ro:0000000000208A7F                 db    0
.data.rel.ro:0000000000208A80                 dq offset aVerbose      ; "verbose"
.data.rel.ro:0000000000208A88                 db    0
.data.rel.ro:0000000000208A89                 db    0
.data.rel.ro:0000000000208A8A                 db    0
.data.rel.ro:0000000000208A8B                 db    0
.data.rel.ro:0000000000208A8C                 db    0
.data.rel.ro:0000000000208A8D                 db    0
.data.rel.ro:0000000000208A8E                 db    0
.data.rel.ro:0000000000208A8F                 db    0
.data.rel.ro:0000000000208A90                 db    0
.data.rel.ro:0000000000208A91                 db    0
.data.rel.ro:0000000000208A92                 db    0
.data.rel.ro:0000000000208A93                 db    0
.data.rel.ro:0000000000208A94                 db    0
.data.rel.ro:0000000000208A95                 db    0
.data.rel.ro:0000000000208A96                 db    0
.data.rel.ro:0000000000208A97                 db    0
.data.rel.ro:0000000000208A98                 db  76h ; v
.data.rel.ro:0000000000208A99                 db    0
.data.rel.ro:0000000000208A9A                 db    0
.data.rel.ro:0000000000208A9B                 db    0
.data.rel.ro:0000000000208A9C                 db    0
.data.rel.ro:0000000000208A9D                 db    0
.data.rel.ro:0000000000208A9E                 db    0
.data.rel.ro:0000000000208A9F                 db    0
.data.rel.ro:0000000000208AA0                 dq offset aForeground   ; "foreground"
.data.rel.ro:0000000000208AA8                 db    0
.data.rel.ro:0000000000208AA9                 db    0
.data.rel.ro:0000000000208AAA                 db    0
.data.rel.ro:0000000000208AAB                 db    0
.data.rel.ro:0000000000208AAC                 db    0
.data.rel.ro:0000000000208AAD                 db    0
.data.rel.ro:0000000000208AAE                 db    0
.data.rel.ro:0000000000208AAF                 db    0
.data.rel.ro:0000000000208AB0                 db    0
.data.rel.ro:0000000000208AB1                 db    0
.data.rel.ro:0000000000208AB2                 db    0
.data.rel.ro:0000000000208AB3                 db    0
.data.rel.ro:0000000000208AB4                 db    0
.data.rel.ro:0000000000208AB5                 db    0
.data.rel.ro:0000000000208AB6                 db    0
.data.rel.ro:0000000000208AB7                 db    0
.data.rel.ro:0000000000208AB8                 db  80h
.data.rel.ro:0000000000208AB9                 db    0
.data.rel.ro:0000000000208ABA                 db    0
.data.rel.ro:0000000000208ABB                 db    0
.data.rel.ro:0000000000208ABC                 db    0
.data.rel.ro:0000000000208ABD                 db    0
.data.rel.ro:0000000000208ABE                 db    0
.data.rel.ro:0000000000208ABF                 db    0
.data.rel.ro:0000000000208AC0                 dq offset aPreserveStatus_0 ; "preserve-status"
.data.rel.ro:0000000000208AC8                 db    0
.data.rel.ro:0000000000208AC9                 db    0
.data.rel.ro:0000000000208ACA                 db    0
.data.rel.ro:0000000000208ACB                 db    0
.data.rel.ro:0000000000208ACC                 db    0
.data.rel.ro:0000000000208ACD                 db    0
.data.rel.ro:0000000000208ACE                 db    0
.data.rel.ro:0000000000208ACF                 db    0
.data.rel.ro:0000000000208AD0                 db    0
.data.rel.ro:0000000000208AD1                 db    0
.data.rel.ro:0000000000208AD2                 db    0
.data.rel.ro:0000000000208AD3                 db    0
.data.rel.ro:0000000000208AD4                 db    0
.data.rel.ro:0000000000208AD5                 db    0
.data.rel.ro:0000000000208AD6                 db    0
.data.rel.ro:0000000000208AD7                 db    0
.data.rel.ro:0000000000208AD8                 db  81h
.data.rel.ro:0000000000208AD9                 db    0
.data.rel.ro:0000000000208ADA                 db    0
.data.rel.ro:0000000000208ADB                 db    0
.data.rel.ro:0000000000208ADC                 db    0
.data.rel.ro:0000000000208ADD                 db    0
.data.rel.ro:0000000000208ADE                 db    0
.data.rel.ro:0000000000208ADF                 db    0
.data.rel.ro:0000000000208AE0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208AE8                 db    0
.data.rel.ro:0000000000208AE9                 db    0
.data.rel.ro:0000000000208AEA                 db    0
.data.rel.ro:0000000000208AEB                 db    0
.data.rel.ro:0000000000208AEC                 db    0
.data.rel.ro:0000000000208AED                 db    0
.data.rel.ro:0000000000208AEE                 db    0
.data.rel.ro:0000000000208AEF                 db    0
.data.rel.ro:0000000000208AF0                 db    0
.data.rel.ro:0000000000208AF1                 db    0
.data.rel.ro:0000000000208AF2                 db    0
.data.rel.ro:0000000000208AF3                 db    0
.data.rel.ro:0000000000208AF4                 db    0
.data.rel.ro:0000000000208AF5                 db    0
.data.rel.ro:0000000000208AF6                 db    0
.data.rel.ro:0000000000208AF7                 db    0
.data.rel.ro:0000000000208AF8                 db  7Eh ; ~
.data.rel.ro:0000000000208AF9                 db 0FFh
.data.rel.ro:0000000000208AFA                 db 0FFh
.data.rel.ro:0000000000208AFB                 db 0FFh
.data.rel.ro:0000000000208AFC                 db    0
.data.rel.ro:0000000000208AFD                 db    0
.data.rel.ro:0000000000208AFE                 db    0
.data.rel.ro:0000000000208AFF                 db    0
.data.rel.ro:0000000000208B00                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208B08                 db    0
.data.rel.ro:0000000000208B09                 db    0
.data.rel.ro:0000000000208B0A                 db    0
.data.rel.ro:0000000000208B0B                 db    0
.data.rel.ro:0000000000208B0C                 db    0
.data.rel.ro:0000000000208B0D                 db    0
.data.rel.ro:0000000000208B0E                 db    0
.data.rel.ro:0000000000208B0F                 db    0
.data.rel.ro:0000000000208B10                 db    0
.data.rel.ro:0000000000208B11                 db    0
.data.rel.ro:0000000000208B12                 db    0
.data.rel.ro:0000000000208B13                 db    0
.data.rel.ro:0000000000208B14                 db    0
.data.rel.ro:0000000000208B15                 db    0
.data.rel.ro:0000000000208B16                 db    0
.data.rel.ro:0000000000208B17                 db    0
.data.rel.ro:0000000000208B18                 db  7Dh ; }
.data.rel.ro:0000000000208B19                 db 0FFh
.data.rel.ro:0000000000208B1A                 db 0FFh
.data.rel.ro:0000000000208B1B                 db 0FFh
.data.rel.ro:0000000000208B1C                 db    0
.data.rel.ro:0000000000208B1D                 db    0
.data.rel.ro:0000000000208B1E                 db    0
.data.rel.ro:0000000000208B1F                 db    0
.data.rel.ro:0000000000208B20                 db    0
.data.rel.ro:0000000000208B21                 db    0
.data.rel.ro:0000000000208B22                 db    0
.data.rel.ro:0000000000208B23                 db    0
.data.rel.ro:0000000000208B24                 db    0
.data.rel.ro:0000000000208B25                 db    0
.data.rel.ro:0000000000208B26                 db    0
.data.rel.ro:0000000000208B27                 db    0
.data.rel.ro:0000000000208B28                 db    0
.data.rel.ro:0000000000208B29                 db    0
.data.rel.ro:0000000000208B2A                 db    0
.data.rel.ro:0000000000208B2B                 db    0
.data.rel.ro:0000000000208B2C                 db    0
.data.rel.ro:0000000000208B2D                 db    0
.data.rel.ro:0000000000208B2E                 db    0
.data.rel.ro:0000000000208B2F                 db    0
.data.rel.ro:0000000000208B30                 db    0
.data.rel.ro:0000000000208B31                 db    0
.data.rel.ro:0000000000208B32                 db    0
.data.rel.ro:0000000000208B33                 db    0
.data.rel.ro:0000000000208B34                 db    0
.data.rel.ro:0000000000208B35                 db    0
.data.rel.ro:0000000000208B36                 db    0
.data.rel.ro:0000000000208B37                 db    0
.data.rel.ro:0000000000208B38                 db    0
.data.rel.ro:0000000000208B39                 db    0
.data.rel.ro:0000000000208B3A                 db    0
.data.rel.ro:0000000000208B3B                 db    0
.data.rel.ro:0000000000208B3C                 db    0
.data.rel.ro:0000000000208B3D                 db    0
.data.rel.ro:0000000000208B3E                 db    0
.data.rel.ro:0000000000208B3F                 db    0
.data.rel.ro:0000000000208B40                 public quoting_style_args
.data.rel.ro:0000000000208B40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208B48                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208B50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208B58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208B60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208B68                 dq offset aC            ; "c"
.data.rel.ro:0000000000208B70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208B78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208B80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208B88                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208B90                 db    0
.data.rel.ro:0000000000208B91                 db    0
.data.rel.ro:0000000000208B92                 db    0
.data.rel.ro:0000000000208B93                 db    0
.data.rel.ro:0000000000208B94                 db    0
.data.rel.ro:0000000000208B95                 db    0
.data.rel.ro:0000000000208B96                 db    0
.data.rel.ro:0000000000208B97                 db    0
.data.rel.ro:0000000000208B97 _data_rel_ro    ends
.data.rel.ro:0000000000208B97
LOAD:0000000000208B98 ; ELF Dynamic Information
LOAD:0000000000208B98 ; ===========================================================================
LOAD:0000000000208B98
LOAD:0000000000208B98 ; Segment type: Pure data
LOAD:0000000000208B98 ; Segment permissions: Read/Write
LOAD:0000000000208B98 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208B98                 assume cs:LOAD
LOAD:0000000000208B98                 ;org 208B98h
LOAD:0000000000208B98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208B98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208B98                                         ; DT_NEEDED librt.so.1
LOAD:0000000000208BA8                 Elf64_Dyn <1, 79h>      ; DT_NEEDED libpthread.so.0
LOAD:0000000000208BB8                 Elf64_Dyn <1, 0E8h>     ; DT_NEEDED libc.so.6
LOAD:0000000000208BC8                 Elf64_Dyn <0Ch, 18F8h>  ; DT_INIT
LOAD:0000000000208BD8                 Elf64_Dyn <0Dh, 5E70h>  ; DT_FINI
LOAD:0000000000208BE8                 Elf64_Dyn <19h, 208A30h> ; DT_INIT_ARRAY
LOAD:0000000000208BF8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C08                 Elf64_Dyn <1Ah, 208A38h> ; DT_FINI_ARRAY
LOAD:0000000000208C18                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208C28                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208C38                 Elf64_Dyn <5, 0A78h>    ; DT_STRTAB
LOAD:0000000000208C48                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000208C58                 Elf64_Dyn <0Ah, 3C2h>   ; DT_STRSZ
LOAD:0000000000208C68                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208C78                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208C88                 Elf64_Dyn <3, 208DA8h>  ; DT_PLTGOT
LOAD:0000000000208C98                 Elf64_Dyn <2, 648h>     ; DT_PLTRELSZ
LOAD:0000000000208CA8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208CB8                 Elf64_Dyn <17h, 12B0h>  ; DT_JMPREL
LOAD:0000000000208CC8                 Elf64_Dyn <7, 0F80h>    ; DT_RELA
LOAD:0000000000208CD8                 Elf64_Dyn <8, 330h>     ; DT_RELASZ
LOAD:0000000000208CE8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208CF8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D08                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D18                 Elf64_Dyn <6FFFFFFEh, 0EE0h> ; DT_VERNEED
LOAD:0000000000208D28                 Elf64_Dyn <6FFFFFFFh, 3> ; DT_VERNEEDNUM
LOAD:0000000000208D38                 Elf64_Dyn <6FFFFFF0h, 0E3Ah> ; DT_VERSYM
LOAD:0000000000208D48                 Elf64_Dyn <6FFFFFF9h, 17h> ; DT_RELACOUNT
LOAD:0000000000208D58                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208D68                 db    0
LOAD:0000000000208D69                 db    0
LOAD:0000000000208D6A                 db    0
LOAD:0000000000208D6B                 db    0
LOAD:0000000000208D6C                 db    0
LOAD:0000000000208D6D                 db    0
LOAD:0000000000208D6E                 db    0
LOAD:0000000000208D6F                 db    0
LOAD:0000000000208D70                 db    0
LOAD:0000000000208D71                 db    0
LOAD:0000000000208D72                 db    0
LOAD:0000000000208D73                 db    0
LOAD:0000000000208D74                 db    0
LOAD:0000000000208D75                 db    0
LOAD:0000000000208D76                 db    0
LOAD:0000000000208D77                 db    0
LOAD:0000000000208D78                 db    0
LOAD:0000000000208D79                 db    0
LOAD:0000000000208D7A                 db    0
LOAD:0000000000208D7B                 db    0
LOAD:0000000000208D7C                 db    0
LOAD:0000000000208D7D                 db    0
LOAD:0000000000208D7E                 db    0
LOAD:0000000000208D7F                 db    0
LOAD:0000000000208D80                 db    0
LOAD:0000000000208D81                 db    0
LOAD:0000000000208D82                 db    0
LOAD:0000000000208D83                 db    0
LOAD:0000000000208D84                 db    0
LOAD:0000000000208D85                 db    0
LOAD:0000000000208D86                 db    0
LOAD:0000000000208D87                 db    0
LOAD:0000000000208D88                 db    0
LOAD:0000000000208D89                 db    0
LOAD:0000000000208D8A                 db    0
LOAD:0000000000208D8B                 db    0
LOAD:0000000000208D8C                 db    0
LOAD:0000000000208D8D                 db    0
LOAD:0000000000208D8E                 db    0
LOAD:0000000000208D8F                 db    0
LOAD:0000000000208D90                 db    0
LOAD:0000000000208D91                 db    0
LOAD:0000000000208D92                 db    0
LOAD:0000000000208D93                 db    0
LOAD:0000000000208D94                 db    0
LOAD:0000000000208D95                 db    0
LOAD:0000000000208D96                 db    0
LOAD:0000000000208D97                 db    0
LOAD:0000000000208D98                 db    0
LOAD:0000000000208D99                 db    0
LOAD:0000000000208D9A                 db    0
LOAD:0000000000208D9B                 db    0
LOAD:0000000000208D9C                 db    0
LOAD:0000000000208D9D                 db    0
LOAD:0000000000208D9E                 db    0
LOAD:0000000000208D9F                 db    0
LOAD:0000000000208DA0                 db    0
LOAD:0000000000208DA1                 db    0
LOAD:0000000000208DA2                 db    0
LOAD:0000000000208DA3                 db    0
LOAD:0000000000208DA4                 db    0
LOAD:0000000000208DA5                 db    0
LOAD:0000000000208DA6                 db    0
LOAD:0000000000208DA7                 db    0
LOAD:0000000000208DA7 LOAD            ends
LOAD:0000000000208DA7
.got:0000000000208DA8 ; ===========================================================================
.got:0000000000208DA8
.got:0000000000208DA8 ; Segment type: Pure data
.got:0000000000208DA8 ; Segment permissions: Read/Write
.got:0000000000208DA8 _got            segment qword public 'DATA' use64
.got:0000000000208DA8                 assume cs:_got
.got:0000000000208DA8                 ;org 208DA8h
.got:0000000000208DA8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208DB0 qword_208DB0    dq 0                    ; DATA XREF: sub_1910↑r
.got:0000000000208DB8 qword_208DB8    dq 0                    ; DATA XREF: sub_1910+6↑r
.got:0000000000208DC0 sigprocmask_ptr dq offset sigprocmask   ; DATA XREF: _sigprocmask↑r
.got:0000000000208DC8 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000208DC8                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000208DD0 raise_ptr       dq offset raise         ; DATA XREF: _raise↑r
.got:0000000000208DD8 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208DE0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208DE8 __errno_location_ptr dq offset __errno_location
.got:0000000000208DE8                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208DF0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208DF8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E00 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:0000000000208E08 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E10 sigaction_ptr   dq offset sigaction     ; DATA XREF: _sigaction↑r
.got:0000000000208E18 strtod_ptr      dq offset strtod        ; DATA XREF: _strtod↑r
.got:0000000000208E20 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E28 strtod_l_ptr    dq offset strtod_l      ; DATA XREF: _strtod_l↑r
.got:0000000000208E30 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E38 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E38                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E40 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208E48 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208E48                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208E50 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208E58 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208E58                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208E60 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208E68 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208E70 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000208E78 newlocale_ptr   dq offset newlocale     ; DATA XREF: _newlocale↑r
.got:0000000000208E80 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208E88 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208E90 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208E98 alarm_ptr       dq offset alarm         ; DATA XREF: _alarm↑r
.got:0000000000208EA0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208EA8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208EA8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208EB0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208EB8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000208EC0 signal_ptr      dq offset signal        ; DATA XREF: _signal↑r
.got:0000000000208EC8 sigemptyset_ptr dq offset sigemptyset   ; DATA XREF: _sigemptyset↑r
.got:0000000000208ED0 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000208ED8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208EE0 prctl_ptr       dq offset prctl         ; DATA XREF: _prctl↑r
.got:0000000000208EE8 kill_ptr        dq offset kill          ; DATA XREF: _kill↑r
.got:0000000000208EF0 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208EF8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F00 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F08 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F10 sigsuspend_ptr  dq offset sigsuspend    ; DATA XREF: _sigsuspend↑r
.got:0000000000208F18 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F20 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F28 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F30 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F38 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F40 waitpid_ptr     dq offset waitpid       ; DATA XREF: _waitpid↑r
.got:0000000000208F48 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F50 timer_settime_ptr dq offset timer_settime
.got:0000000000208F50                                         ; DATA XREF: _timer_settime↑r
.got:0000000000208F58 timer_create_ptr dq offset timer_create ; DATA XREF: _timer_create↑r
.got:0000000000208F60 execvp_ptr      dq offset execvp        ; DATA XREF: _execvp↑r
.got:0000000000208F68 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208F70 setpgid_ptr     dq offset setpgid       ; DATA XREF: _setpgid↑r
.got:0000000000208F78 __libc_current_sigrtmin_ptr dq offset __libc_current_sigrtmin
.got:0000000000208F78                                         ; DATA XREF: ___libc_current_sigrtmin↑r
.got:0000000000208F80 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208F88 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208F90 timer_delete_ptr dq offset timer_delete ; DATA XREF: _timer_delete↑r
.got:0000000000208F98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208F98                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FA0 __libc_current_sigrtmax_ptr dq offset __libc_current_sigrtmax
.got:0000000000208FA0                                         ; DATA XREF: ___libc_current_sigrtmax↑r
.got:0000000000208FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FB8 sigaddset_ptr   dq offset sigaddset     ; DATA XREF: _sigaddset↑r
.got:0000000000208FC0 fork_ptr        dq offset fork          ; DATA XREF: _fork↑r
.got:0000000000208FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FD0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000208FD0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000208FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FE0                                         ; DATA XREF: start+24↑r
.got:0000000000208FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FF8 _got            ends
.got:0000000000208FF8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010 ; int term_signal
.data:0000000000209010 term_signal     dd 0Fh                  ; DATA XREF: main+16A↑w
.data:0000000000209010                                         ; main+1F1↑r ...
.data:0000000000209014                 align 8
.data:0000000000209018                 public Version
.data:0000000000209018 Version         dq offset a831          ; DATA XREF: main+106↑r
.data:0000000000209018                                         ; "8.31"
.data:0000000000209020                 public exit_failure
.data:0000000000209020 ; int exit_failure
.data:0000000000209020 exit_failure    dd 1                    ; DATA XREF: main+6C↑w
.data:0000000000209020                                         ; close_stdout:loc_3092↑r ...
.data:0000000000209024                 align 20h
.data:0000000000209040                 public quote_quoting_options
.data:0000000000209040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209040                                         ; quote_mem↑o ...
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058                 db    0
.data:0000000000209059                 db    0
.data:000000000020905A                 db    0
.data:000000000020905B                 db    0
.data:000000000020905C                 db    0
.data:000000000020905D                 db    0
.data:000000000020905E                 db    0
.data:000000000020905F                 db    0
.data:0000000000209060                 db    0
.data:0000000000209061                 db    0
.data:0000000000209062                 db    0
.data:0000000000209063                 db    0
.data:0000000000209064                 db    0
.data:0000000000209065                 db    0
.data:0000000000209066                 db    0
.data:0000000000209067                 db    0
.data:0000000000209068                 db    0
.data:0000000000209069                 db    0
.data:000000000020906A                 db    0
.data:000000000020906B                 db    0
.data:000000000020906C                 db    0
.data:000000000020906D                 db    0
.data:000000000020906E                 db    0
.data:000000000020906F                 db    0
.data:0000000000209070                 db    0
.data:0000000000209071                 db    0
.data:0000000000209072                 db    0
.data:0000000000209073                 db    0
.data:0000000000209074                 db    0
.data:0000000000209075                 db    0
.data:0000000000209076                 db    0
.data:0000000000209077                 db    0
.data:0000000000209078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209078                                         ; quotearg_n_options:loc_45CD↑r ...
.data:000000000020907C                 align 20h
.data:0000000000209080 ; void *slotvec
.data:0000000000209080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209080                                         ; quotearg_n_options+76↑w ...
.data:0000000000209088                 align 10h
.data:0000000000209090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209090                                         ; quotearg_n_options+187↑r ...
.data:0000000000209098 off_209098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002090A0 numname_table   db    1                 ; DATA XREF: str2sig+5F↑o
.data:00000000002090A0                                         ; sig2str+1↑o
.data:00000000002090A1                 db    0
.data:00000000002090A2                 db    0
.data:00000000002090A3                 db    0
.data:00000000002090A4 ; char nptr[4]
.data:00000000002090A4 nptr            db 'HUP',0              ; DATA XREF: str2sig+E↑o
.data:00000000002090A8                 db    0
.data:00000000002090A9                 db    0
.data:00000000002090AA                 db    0
.data:00000000002090AB                 db    0
.data:00000000002090AC                 db    2
.data:00000000002090AD                 db    0
.data:00000000002090AE                 db    0
.data:00000000002090AF                 db    0
.data:00000000002090B0                 db  49h ; I
.data:00000000002090B1                 db  4Eh ; N
.data:00000000002090B2                 db  54h ; T
.data:00000000002090B3                 db    0
.data:00000000002090B4                 db    0
.data:00000000002090B5                 db    0
.data:00000000002090B6                 db    0
.data:00000000002090B7                 db    0
.data:00000000002090B8                 db    3
.data:00000000002090B9                 db    0
.data:00000000002090BA                 db    0
.data:00000000002090BB                 db    0
.data:00000000002090BC                 db  51h ; Q
.data:00000000002090BD                 db  55h ; U
.data:00000000002090BE                 db  49h ; I
.data:00000000002090BF                 db  54h ; T
.data:00000000002090C0                 db    0
.data:00000000002090C1                 db    0
.data:00000000002090C2                 db    0
.data:00000000002090C3                 db    0
.data:00000000002090C4                 db    4
.data:00000000002090C5                 db    0
.data:00000000002090C6                 db    0
.data:00000000002090C7                 db    0
.data:00000000002090C8                 db  49h ; I
.data:00000000002090C9                 db  4Ch ; L
.data:00000000002090CA                 db  4Ch ; L
.data:00000000002090CB                 db    0
.data:00000000002090CC                 db    0
.data:00000000002090CD                 db    0
.data:00000000002090CE                 db    0
.data:00000000002090CF                 db    0
.data:00000000002090D0                 db    5
.data:00000000002090D1                 db    0
.data:00000000002090D2                 db    0
.data:00000000002090D3                 db    0
.data:00000000002090D4                 db  54h ; T
.data:00000000002090D5                 db  52h ; R
.data:00000000002090D6                 db  41h ; A
.data:00000000002090D7                 db  50h ; P
.data:00000000002090D8                 db    0
.data:00000000002090D9                 db    0
.data:00000000002090DA                 db    0
.data:00000000002090DB                 db    0
.data:00000000002090DC                 db    6
.data:00000000002090DD                 db    0
.data:00000000002090DE                 db    0
.data:00000000002090DF                 db    0
.data:00000000002090E0                 db  41h ; A
.data:00000000002090E1                 db  42h ; B
.data:00000000002090E2                 db  52h ; R
.data:00000000002090E3                 db  54h ; T
.data:00000000002090E4                 db    0
.data:00000000002090E5                 db    0
.data:00000000002090E6                 db    0
.data:00000000002090E7                 db    0
.data:00000000002090E8                 db    8
.data:00000000002090E9                 db    0
.data:00000000002090EA                 db    0
.data:00000000002090EB                 db    0
.data:00000000002090EC                 db  46h ; F
.data:00000000002090ED                 db  50h ; P
.data:00000000002090EE                 db  45h ; E
.data:00000000002090EF                 db    0
.data:00000000002090F0                 db    0
.data:00000000002090F1                 db    0
.data:00000000002090F2                 db    0
.data:00000000002090F3                 db    0
.data:00000000002090F4                 db    9
.data:00000000002090F5                 db    0
.data:00000000002090F6                 db    0
.data:00000000002090F7                 db    0
.data:00000000002090F8                 db  4Bh ; K
.data:00000000002090F9                 db  49h ; I
.data:00000000002090FA                 db  4Ch ; L
.data:00000000002090FB                 db  4Ch ; L
.data:00000000002090FC                 db    0
.data:00000000002090FD                 db    0
.data:00000000002090FE                 db    0
.data:00000000002090FF                 db    0
.data:0000000000209100                 db  0Bh
.data:0000000000209101                 db    0
.data:0000000000209102                 db    0
.data:0000000000209103                 db    0
.data:0000000000209104                 db  53h ; S
.data:0000000000209105                 db  45h ; E
.data:0000000000209106                 db  47h ; G
.data:0000000000209107                 db  56h ; V
.data:0000000000209108                 db    0
.data:0000000000209109                 db    0
.data:000000000020910A                 db    0
.data:000000000020910B                 db    0
.data:000000000020910C                 db    7
.data:000000000020910D                 db    0
.data:000000000020910E                 db    0
.data:000000000020910F                 db    0
.data:0000000000209110                 db  42h ; B
.data:0000000000209111                 db  55h ; U
.data:0000000000209112                 db  53h ; S
.data:0000000000209113                 db    0
.data:0000000000209114                 db    0
.data:0000000000209115                 db    0
.data:0000000000209116                 db    0
.data:0000000000209117                 db    0
.data:0000000000209118                 db  0Dh
.data:0000000000209119                 db    0
.data:000000000020911A                 db    0
.data:000000000020911B                 db    0
.data:000000000020911C                 db  50h ; P
.data:000000000020911D                 db  49h ; I
.data:000000000020911E                 db  50h ; P
.data:000000000020911F                 db  45h ; E
.data:0000000000209120                 db    0
.data:0000000000209121                 db    0
.data:0000000000209122                 db    0
.data:0000000000209123                 db    0
.data:0000000000209124                 db  0Eh
.data:0000000000209125                 db    0
.data:0000000000209126                 db    0
.data:0000000000209127                 db    0
.data:0000000000209128                 db  41h ; A
.data:0000000000209129                 db  4Ch ; L
.data:000000000020912A                 db  52h ; R
.data:000000000020912B                 db  4Dh ; M
.data:000000000020912C                 db    0
.data:000000000020912D                 db    0
.data:000000000020912E                 db    0
.data:000000000020912F                 db    0
.data:0000000000209130                 db  0Fh
.data:0000000000209131                 db    0
.data:0000000000209132                 db    0
.data:0000000000209133                 db    0
.data:0000000000209134                 db  54h ; T
.data:0000000000209135                 db  45h ; E
.data:0000000000209136                 db  52h ; R
.data:0000000000209137                 db  4Dh ; M
.data:0000000000209138                 db    0
.data:0000000000209139                 db    0
.data:000000000020913A                 db    0
.data:000000000020913B                 db    0
.data:000000000020913C                 db  0Ah
.data:000000000020913D                 db    0
.data:000000000020913E                 db    0
.data:000000000020913F                 db    0
.data:0000000000209140                 db  55h ; U
.data:0000000000209141                 db  53h ; S
.data:0000000000209142                 db  52h ; R
.data:0000000000209143                 db  31h ; 1
.data:0000000000209144                 db    0
.data:0000000000209145                 db    0
.data:0000000000209146                 db    0
.data:0000000000209147                 db    0
.data:0000000000209148                 db  0Ch
.data:0000000000209149                 db    0
.data:000000000020914A                 db    0
.data:000000000020914B                 db    0
.data:000000000020914C                 db  55h ; U
.data:000000000020914D                 db  53h ; S
.data:000000000020914E                 db  52h ; R
.data:000000000020914F                 db  32h ; 2
.data:0000000000209150                 db    0
.data:0000000000209151                 db    0
.data:0000000000209152                 db    0
.data:0000000000209153                 db    0
.data:0000000000209154                 db  11h
.data:0000000000209155                 db    0
.data:0000000000209156                 db    0
.data:0000000000209157                 db    0
.data:0000000000209158                 db  43h ; C
.data:0000000000209159                 db  48h ; H
.data:000000000020915A                 db  4Ch ; L
.data:000000000020915B                 db  44h ; D
.data:000000000020915C                 db    0
.data:000000000020915D                 db    0
.data:000000000020915E                 db    0
.data:000000000020915F                 db    0
.data:0000000000209160                 db  17h
.data:0000000000209161                 db    0
.data:0000000000209162                 db    0
.data:0000000000209163                 db    0
.data:0000000000209164                 db  55h ; U
.data:0000000000209165                 db  52h ; R
.data:0000000000209166                 db  47h ; G
.data:0000000000209167                 db    0
.data:0000000000209168                 db    0
.data:0000000000209169                 db    0
.data:000000000020916A                 db    0
.data:000000000020916B                 db    0
.data:000000000020916C                 db  13h
.data:000000000020916D                 db    0
.data:000000000020916E                 db    0
.data:000000000020916F                 db    0
.data:0000000000209170                 db  53h ; S
.data:0000000000209171                 db  54h ; T
.data:0000000000209172                 db  4Fh ; O
.data:0000000000209173                 db  50h ; P
.data:0000000000209174                 db    0
.data:0000000000209175                 db    0
.data:0000000000209176                 db    0
.data:0000000000209177                 db    0
.data:0000000000209178                 db  14h
.data:0000000000209179                 db    0
.data:000000000020917A                 db    0
.data:000000000020917B                 db    0
.data:000000000020917C                 db  54h ; T
.data:000000000020917D                 db  53h ; S
.data:000000000020917E                 db  54h ; T
.data:000000000020917F                 db  50h ; P
.data:0000000000209180                 db    0
.data:0000000000209181                 db    0
.data:0000000000209182                 db    0
.data:0000000000209183                 db    0
.data:0000000000209184                 db  12h
.data:0000000000209185                 db    0
.data:0000000000209186                 db    0
.data:0000000000209187                 db    0
.data:0000000000209188                 db  43h ; C
.data:0000000000209189                 db  4Fh ; O
.data:000000000020918A                 db  4Eh ; N
.data:000000000020918B                 db  54h ; T
.data:000000000020918C                 db    0
.data:000000000020918D                 db    0
.data:000000000020918E                 db    0
.data:000000000020918F                 db    0
.data:0000000000209190                 db  15h
.data:0000000000209191                 db    0
.data:0000000000209192                 db    0
.data:0000000000209193                 db    0
.data:0000000000209194                 db  54h ; T
.data:0000000000209195                 db  54h ; T
.data:0000000000209196                 db  49h ; I
.data:0000000000209197                 db  4Eh ; N
.data:0000000000209198                 db    0
.data:0000000000209199                 db    0
.data:000000000020919A                 db    0
.data:000000000020919B                 db    0
.data:000000000020919C                 db  16h
.data:000000000020919D                 db    0
.data:000000000020919E                 db    0
.data:000000000020919F                 db    0
.data:00000000002091A0                 db  54h ; T
.data:00000000002091A1                 db  54h ; T
.data:00000000002091A2                 db  4Fh ; O
.data:00000000002091A3                 db  55h ; U
.data:00000000002091A4                 db    0
.data:00000000002091A5                 db    0
.data:00000000002091A6                 db    0
.data:00000000002091A7                 db    0
.data:00000000002091A8                 db  1Fh
.data:00000000002091A9                 db    0
.data:00000000002091AA                 db    0
.data:00000000002091AB                 db    0
.data:00000000002091AC                 db  53h ; S
.data:00000000002091AD                 db  59h ; Y
.data:00000000002091AE                 db  53h ; S
.data:00000000002091AF                 db    0
.data:00000000002091B0                 db    0
.data:00000000002091B1                 db    0
.data:00000000002091B2                 db    0
.data:00000000002091B3                 db    0
.data:00000000002091B4                 db  1Dh
.data:00000000002091B5                 db    0
.data:00000000002091B6                 db    0
.data:00000000002091B7                 db    0
.data:00000000002091B8                 db  50h ; P
.data:00000000002091B9                 db  4Fh ; O
.data:00000000002091BA                 db  4Ch ; L
.data:00000000002091BB                 db  4Ch ; L
.data:00000000002091BC                 db    0
.data:00000000002091BD                 db    0
.data:00000000002091BE                 db    0
.data:00000000002091BF                 db    0
.data:00000000002091C0                 db  1Ah
.data:00000000002091C1                 db    0
.data:00000000002091C2                 db    0
.data:00000000002091C3                 db    0
.data:00000000002091C4                 db  56h ; V
.data:00000000002091C5                 db  54h ; T
.data:00000000002091C6                 db  41h ; A
.data:00000000002091C7                 db  4Ch ; L
.data:00000000002091C8                 db  52h ; R
.data:00000000002091C9                 db  4Dh ; M
.data:00000000002091CA                 db    0
.data:00000000002091CB                 db    0
.data:00000000002091CC                 db  1Bh
.data:00000000002091CD                 db    0
.data:00000000002091CE                 db    0
.data:00000000002091CF                 db    0
.data:00000000002091D0                 db  50h ; P
.data:00000000002091D1                 db  52h ; R
.data:00000000002091D2                 db  4Fh ; O
.data:00000000002091D3                 db  46h ; F
.data:00000000002091D4                 db    0
.data:00000000002091D5                 db    0
.data:00000000002091D6                 db    0
.data:00000000002091D7                 db    0
.data:00000000002091D8                 db  18h
.data:00000000002091D9                 db    0
.data:00000000002091DA                 db    0
.data:00000000002091DB                 db    0
.data:00000000002091DC                 db  58h ; X
.data:00000000002091DD                 db  43h ; C
.data:00000000002091DE                 db  50h ; P
.data:00000000002091DF                 db  55h ; U
.data:00000000002091E0                 db    0
.data:00000000002091E1                 db    0
.data:00000000002091E2                 db    0
.data:00000000002091E3                 db    0
.data:00000000002091E4                 db  19h
.data:00000000002091E5                 db    0
.data:00000000002091E6                 db    0
.data:00000000002091E7                 db    0
.data:00000000002091E8                 db  58h ; X
.data:00000000002091E9                 db  46h ; F
.data:00000000002091EA                 db  53h ; S
.data:00000000002091EB                 db  5Ah ; Z
.data:00000000002091EC                 db    0
.data:00000000002091ED                 db    0
.data:00000000002091EE                 db    0
.data:00000000002091EF                 db    0
.data:00000000002091F0                 db    6
.data:00000000002091F1                 db    0
.data:00000000002091F2                 db    0
.data:00000000002091F3                 db    0
.data:00000000002091F4                 db  49h ; I
.data:00000000002091F5                 db  4Fh ; O
.data:00000000002091F6                 db  54h ; T
.data:00000000002091F7                 db    0
.data:00000000002091F8                 db    0
.data:00000000002091F9                 db    0
.data:00000000002091FA                 db    0
.data:00000000002091FB                 db    0
.data:00000000002091FC                 db  11h
.data:00000000002091FD                 db    0
.data:00000000002091FE                 db    0
.data:00000000002091FF                 db    0
.data:0000000000209200                 db  43h ; C
.data:0000000000209201                 db  4Ch ; L
.data:0000000000209202                 db  44h ; D
.data:0000000000209203                 db    0
.data:0000000000209204                 db    0
.data:0000000000209205                 db    0
.data:0000000000209206                 db    0
.data:0000000000209207                 db    0
.data:0000000000209208                 db  1Eh
.data:0000000000209209                 db    0
.data:000000000020920A                 db    0
.data:000000000020920B                 db    0
.data:000000000020920C                 db  50h ; P
.data:000000000020920D                 db  57h ; W
.data:000000000020920E                 db  52h ; R
.data:000000000020920F                 db    0
.data:0000000000209210                 db    0
.data:0000000000209211                 db    0
.data:0000000000209212                 db    0
.data:0000000000209213                 db    0
.data:0000000000209214                 db  1Ch
.data:0000000000209215                 db    0
.data:0000000000209216                 db    0
.data:0000000000209217                 db    0
.data:0000000000209218                 db  57h ; W
.data:0000000000209219                 db  49h ; I
.data:000000000020921A                 db  4Eh ; N
.data:000000000020921B                 db  43h ; C
.data:000000000020921C                 db  48h ; H
.data:000000000020921D                 db    0
.data:000000000020921E                 db    0
.data:000000000020921F                 db    0
.data:0000000000209220                 db  1Dh
.data:0000000000209221                 db    0
.data:0000000000209222                 db    0
.data:0000000000209223                 db    0
.data:0000000000209224                 db  49h ; I
.data:0000000000209225                 db  4Fh ; O
.data:0000000000209226                 db    0
.data:0000000000209227                 db    0
.data:0000000000209228                 db    0
.data:0000000000209229                 db    0
.data:000000000020922A                 db    0
.data:000000000020922B                 db    0
.data:000000000020922C                 db  10h
.data:000000000020922D                 db    0
.data:000000000020922E                 db    0
.data:000000000020922F                 db    0
.data:0000000000209230                 db  53h ; S
.data:0000000000209231                 db  54h ; T
.data:0000000000209232                 db  4Bh ; K
.data:0000000000209233                 db  46h ; F
.data:0000000000209234                 db  4Ch ; L
.data:0000000000209235                 db  54h ; T
.data:0000000000209236                 db    0
.data:0000000000209237                 db    0
.data:0000000000209238                 db    0
.data:0000000000209239                 db    0
.data:000000000020923A                 db    0
.data:000000000020923B                 db    0
.data:000000000020923C                 db  45h ; E
.data:000000000020923D                 db  58h ; X
.data:000000000020923E                 db  49h ; I
.data:000000000020923F                 db  54h ; T
.data:0000000000209240                 db    0
.data:0000000000209241                 db    0
.data:0000000000209242                 db    0
.data:0000000000209243                 db    0
.data:0000000000209243 _data           ends
.data:0000000000209243
LOAD:0000000000209244 ; ===========================================================================
LOAD:0000000000209244
LOAD:0000000000209244 ; Segment type: Pure data
LOAD:0000000000209244 ; Segment permissions: Read/Write
LOAD:0000000000209244 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209244                 assume cs:LOAD
LOAD:0000000000209244                 ;org 209244h
LOAD:0000000000209244                 public __bss_start
LOAD:0000000000209244 __bss_start     db    ? ;               ; Alternative name is '__bss_start'
LOAD:0000000000209244                                         ; _edata
LOAD:0000000000209245                 db    ? ;
LOAD:0000000000209246                 db    ? ;
LOAD:0000000000209247                 db    ? ;
LOAD:0000000000209248                 public __TMC_END__
LOAD:0000000000209248 __TMC_END__     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:0000000000209248                                         ; deregister_tm_clones+8↑o ...
LOAD:0000000000209249                 db    ? ;
LOAD:000000000020924A                 db    ? ;
LOAD:000000000020924B                 db    ? ;
LOAD:000000000020924C                 db    ? ;
LOAD:000000000020924D                 db    ? ;
LOAD:000000000020924E                 db    ? ;
LOAD:000000000020924F                 db    ? ;
LOAD:0000000000209250                 db    ? ;
LOAD:0000000000209251                 db    ? ;
LOAD:0000000000209252                 db    ? ;
LOAD:0000000000209253                 db    ? ;
LOAD:0000000000209254                 db    ? ;
LOAD:0000000000209255                 db    ? ;
LOAD:0000000000209256                 db    ? ;
LOAD:0000000000209257                 db    ? ;
LOAD:0000000000209258                 db    ? ;
LOAD:0000000000209259                 db    ? ;
LOAD:000000000020925A                 db    ? ;
LOAD:000000000020925B                 db    ? ;
LOAD:000000000020925C                 db    ? ;
LOAD:000000000020925D                 db    ? ;
LOAD:000000000020925E                 db    ? ;
LOAD:000000000020925F                 db    ? ;
LOAD:000000000020925F LOAD            ends
LOAD:000000000020925F
.bss:0000000000209260 ; ===========================================================================
.bss:0000000000209260
.bss:0000000000209260 ; Segment type: Uninitialized
.bss:0000000000209260 ; Segment permissions: Read/Write
.bss:0000000000209260 _bss            segment align_32 public 'BSS' use64
.bss:0000000000209260                 assume cs:_bss
.bss:0000000000209260                 ;org 209260h
.bss:0000000000209260                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000209260                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:0000000000209260 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:0000000000209260                                         ; DATA XREF: LOAD:00000000000009D0↑o
.bss:0000000000209260                                         ; LOAD:0000000000000A18↑o ...
.bss:0000000000209260                                         ; Alternative name is '__progname'
.bss:0000000000209260                                         ; Copy of shared data
.bss:0000000000209268                 public stdout@@GLIBC_2_2_5
.bss:0000000000209268 ; FILE *stdout
.bss:0000000000209268 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:0000000000209268                                         ; main+FF↑r ...
.bss:0000000000209268                                         ; Alternative name is 'stdout'
.bss:0000000000209268                                         ; Copy of shared data
.bss:0000000000209270                 public optind@@GLIBC_2_2_5
.bss:0000000000209270 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A48↑o
.bss:0000000000209270                                         ; main:loc_1EFC↑r ...
.bss:0000000000209270                                         ; Alternative name is 'optind'
.bss:0000000000209270                                         ; Copy of shared data
.bss:0000000000209274                 align 8
.bss:0000000000209278                 public optarg@@GLIBC_2_2_5
.bss:0000000000209278 ; char *optarg
.bss:0000000000209278 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A60↑o
.bss:0000000000209278                                         ; main:loc_1E98↑r ...
.bss:0000000000209278                                         ; Alternative name is 'optarg'
.bss:0000000000209278                                         ; Copy of shared data
.bss:0000000000209280                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000209280 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000209280                                         ; DATA XREF: LOAD:00000000000009E8↑o
.bss:0000000000209280                                         ; LOAD:0000000000000A00↑o ...
.bss:0000000000209280                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000209280                                         ; Copy of shared data
.bss:0000000000209288                 align 20h
.bss:00000000002092A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002092A0 ; FILE *stderr
.bss:00000000002092A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A30↑o
.bss:00000000002092A0                                         ; usage+3D↑r ...
.bss:00000000002092A0                                         ; Alternative name is 'stderr'
.bss:00000000002092A0                                         ; Copy of shared data
.bss:00000000002092A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002092A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002092A9                 align 10h
.bss:00000000002092B0 command         dq ?                    ; DATA XREF: main+1DC↑w
.bss:00000000002092B0                                         ; main+319↑r ...
.bss:00000000002092B8 verbose         db ?                    ; DATA XREF: main:loc_1E38↑w
.bss:00000000002092B8                                         ; cleanup+51↑r ...
.bss:00000000002092B9 preserve_status db ?                    ; DATA XREF: main:loc_1EE0↑w
.bss:00000000002092B9                                         ; main+49C↑r
.bss:00000000002092BA foreground      db ?                    ; DATA XREF: main:loc_1EF0↑w
.bss:00000000002092BA                                         ; main+1C7↑r ...
.bss:00000000002092BB                 align 20h
.bss:00000000002092C0 kill_after      dq ?                    ; DATA XREF: main+144↑w
.bss:00000000002092C0                                         ; cleanup+3D↑r ...
.bss:00000000002092C8 ; __pid_t monitored_pid
.bss:00000000002092C8 monitored_pid   dd ?                    ; DATA XREF: main+2D7↑w
.bss:00000000002092C8                                         ; main:loc_2186↑r ...
.bss:00000000002092CC timed_out       dd ?                    ; DATA XREF: main:loc_21DF↑r
.bss:00000000002092CC                                         ; main:loc_21F3↑r ...
.bss:00000000002092D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002092D0                                         ; close_stdout+1B↑r
.bss:00000000002092D1                 align 8
.bss:00000000002092D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002092D8                                         ; close_stdout+56↑r
.bss:00000000002092E0                 public program_name
.bss:00000000002092E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002092E0                                         ; set_program_name:loc_31ED↑w
.bss:00000000002092E8                 align 20h
.bss:0000000000209300 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209300                                         ; quotearg_free+46↑o ...
.bss:0000000000209301                 db    ? ;
.bss:0000000000209302                 db    ? ;
.bss:0000000000209303                 db    ? ;
.bss:0000000000209304                 db    ? ;
.bss:0000000000209305                 db    ? ;
.bss:0000000000209306                 db    ? ;
.bss:0000000000209307                 db    ? ;
.bss:0000000000209308                 db    ? ;
.bss:0000000000209309                 db    ? ;
.bss:000000000020930A                 db    ? ;
.bss:000000000020930B                 db    ? ;
.bss:000000000020930C                 db    ? ;
.bss:000000000020930D                 db    ? ;
.bss:000000000020930E                 db    ? ;
.bss:000000000020930F                 db    ? ;
.bss:0000000000209310                 db    ? ;
.bss:0000000000209311                 db    ? ;
.bss:0000000000209312                 db    ? ;
.bss:0000000000209313                 db    ? ;
.bss:0000000000209314                 db    ? ;
.bss:0000000000209315                 db    ? ;
.bss:0000000000209316                 db    ? ;
.bss:0000000000209317                 db    ? ;
.bss:0000000000209318                 db    ? ;
.bss:0000000000209319                 db    ? ;
.bss:000000000020931A                 db    ? ;
.bss:000000000020931B                 db    ? ;
.bss:000000000020931C                 db    ? ;
.bss:000000000020931D                 db    ? ;
.bss:000000000020931E                 db    ? ;
.bss:000000000020931F                 db    ? ;
.bss:0000000000209320                 db    ? ;
.bss:0000000000209321                 db    ? ;
.bss:0000000000209322                 db    ? ;
.bss:0000000000209323                 db    ? ;
.bss:0000000000209324                 db    ? ;
.bss:0000000000209325                 db    ? ;
.bss:0000000000209326                 db    ? ;
.bss:0000000000209327                 db    ? ;
.bss:0000000000209328                 db    ? ;
.bss:0000000000209329                 db    ? ;
.bss:000000000020932A                 db    ? ;
.bss:000000000020932B                 db    ? ;
.bss:000000000020932C                 db    ? ;
.bss:000000000020932D                 db    ? ;
.bss:000000000020932E                 db    ? ;
.bss:000000000020932F                 db    ? ;
.bss:0000000000209330                 db    ? ;
.bss:0000000000209331                 db    ? ;
.bss:0000000000209332                 db    ? ;
.bss:0000000000209333                 db    ? ;
.bss:0000000000209334                 db    ? ;
.bss:0000000000209335                 db    ? ;
.bss:0000000000209336                 db    ? ;
.bss:0000000000209337                 db    ? ;
.bss:0000000000209338                 db    ? ;
.bss:0000000000209339                 db    ? ;
.bss:000000000020933A                 db    ? ;
.bss:000000000020933B                 db    ? ;
.bss:000000000020933C                 db    ? ;
.bss:000000000020933D                 db    ? ;
.bss:000000000020933E                 db    ? ;
.bss:000000000020933F                 db    ? ;
.bss:0000000000209340                 db    ? ;
.bss:0000000000209341                 db    ? ;
.bss:0000000000209342                 db    ? ;
.bss:0000000000209343                 db    ? ;
.bss:0000000000209344                 db    ? ;
.bss:0000000000209345                 db    ? ;
.bss:0000000000209346                 db    ? ;
.bss:0000000000209347                 db    ? ;
.bss:0000000000209348                 db    ? ;
.bss:0000000000209349                 db    ? ;
.bss:000000000020934A                 db    ? ;
.bss:000000000020934B                 db    ? ;
.bss:000000000020934C                 db    ? ;
.bss:000000000020934D                 db    ? ;
.bss:000000000020934E                 db    ? ;
.bss:000000000020934F                 db    ? ;
.bss:0000000000209350                 db    ? ;
.bss:0000000000209351                 db    ? ;
.bss:0000000000209352                 db    ? ;
.bss:0000000000209353                 db    ? ;
.bss:0000000000209354                 db    ? ;
.bss:0000000000209355                 db    ? ;
.bss:0000000000209356                 db    ? ;
.bss:0000000000209357                 db    ? ;
.bss:0000000000209358                 db    ? ;
.bss:0000000000209359                 db    ? ;
.bss:000000000020935A                 db    ? ;
.bss:000000000020935B                 db    ? ;
.bss:000000000020935C                 db    ? ;
.bss:000000000020935D                 db    ? ;
.bss:000000000020935E                 db    ? ;
.bss:000000000020935F                 db    ? ;
.bss:0000000000209360                 db    ? ;
.bss:0000000000209361                 db    ? ;
.bss:0000000000209362                 db    ? ;
.bss:0000000000209363                 db    ? ;
.bss:0000000000209364                 db    ? ;
.bss:0000000000209365                 db    ? ;
.bss:0000000000209366                 db    ? ;
.bss:0000000000209367                 db    ? ;
.bss:0000000000209368                 db    ? ;
.bss:0000000000209369                 db    ? ;
.bss:000000000020936A                 db    ? ;
.bss:000000000020936B                 db    ? ;
.bss:000000000020936C                 db    ? ;
.bss:000000000020936D                 db    ? ;
.bss:000000000020936E                 db    ? ;
.bss:000000000020936F                 db    ? ;
.bss:0000000000209370                 db    ? ;
.bss:0000000000209371                 db    ? ;
.bss:0000000000209372                 db    ? ;
.bss:0000000000209373                 db    ? ;
.bss:0000000000209374                 db    ? ;
.bss:0000000000209375                 db    ? ;
.bss:0000000000209376                 db    ? ;
.bss:0000000000209377                 db    ? ;
.bss:0000000000209378                 db    ? ;
.bss:0000000000209379                 db    ? ;
.bss:000000000020937A                 db    ? ;
.bss:000000000020937B                 db    ? ;
.bss:000000000020937C                 db    ? ;
.bss:000000000020937D                 db    ? ;
.bss:000000000020937E                 db    ? ;
.bss:000000000020937F                 db    ? ;
.bss:0000000000209380                 db    ? ;
.bss:0000000000209381                 db    ? ;
.bss:0000000000209382                 db    ? ;
.bss:0000000000209383                 db    ? ;
.bss:0000000000209384                 db    ? ;
.bss:0000000000209385                 db    ? ;
.bss:0000000000209386                 db    ? ;
.bss:0000000000209387                 db    ? ;
.bss:0000000000209388                 db    ? ;
.bss:0000000000209389                 db    ? ;
.bss:000000000020938A                 db    ? ;
.bss:000000000020938B                 db    ? ;
.bss:000000000020938C                 db    ? ;
.bss:000000000020938D                 db    ? ;
.bss:000000000020938E                 db    ? ;
.bss:000000000020938F                 db    ? ;
.bss:0000000000209390                 db    ? ;
.bss:0000000000209391                 db    ? ;
.bss:0000000000209392                 db    ? ;
.bss:0000000000209393                 db    ? ;
.bss:0000000000209394                 db    ? ;
.bss:0000000000209395                 db    ? ;
.bss:0000000000209396                 db    ? ;
.bss:0000000000209397                 db    ? ;
.bss:0000000000209398                 db    ? ;
.bss:0000000000209399                 db    ? ;
.bss:000000000020939A                 db    ? ;
.bss:000000000020939B                 db    ? ;
.bss:000000000020939C                 db    ? ;
.bss:000000000020939D                 db    ? ;
.bss:000000000020939E                 db    ? ;
.bss:000000000020939F                 db    ? ;
.bss:00000000002093A0                 db    ? ;
.bss:00000000002093A1                 db    ? ;
.bss:00000000002093A2                 db    ? ;
.bss:00000000002093A3                 db    ? ;
.bss:00000000002093A4                 db    ? ;
.bss:00000000002093A5                 db    ? ;
.bss:00000000002093A6                 db    ? ;
.bss:00000000002093A7                 db    ? ;
.bss:00000000002093A8                 db    ? ;
.bss:00000000002093A9                 db    ? ;
.bss:00000000002093AA                 db    ? ;
.bss:00000000002093AB                 db    ? ;
.bss:00000000002093AC                 db    ? ;
.bss:00000000002093AD                 db    ? ;
.bss:00000000002093AE                 db    ? ;
.bss:00000000002093AF                 db    ? ;
.bss:00000000002093B0                 db    ? ;
.bss:00000000002093B1                 db    ? ;
.bss:00000000002093B2                 db    ? ;
.bss:00000000002093B3                 db    ? ;
.bss:00000000002093B4                 db    ? ;
.bss:00000000002093B5                 db    ? ;
.bss:00000000002093B6                 db    ? ;
.bss:00000000002093B7                 db    ? ;
.bss:00000000002093B8                 db    ? ;
.bss:00000000002093B9                 db    ? ;
.bss:00000000002093BA                 db    ? ;
.bss:00000000002093BB                 db    ? ;
.bss:00000000002093BC                 db    ? ;
.bss:00000000002093BD                 db    ? ;
.bss:00000000002093BE                 db    ? ;
.bss:00000000002093BF                 db    ? ;
.bss:00000000002093C0                 db    ? ;
.bss:00000000002093C1                 db    ? ;
.bss:00000000002093C2                 db    ? ;
.bss:00000000002093C3                 db    ? ;
.bss:00000000002093C4                 db    ? ;
.bss:00000000002093C5                 db    ? ;
.bss:00000000002093C6                 db    ? ;
.bss:00000000002093C7                 db    ? ;
.bss:00000000002093C8                 db    ? ;
.bss:00000000002093C9                 db    ? ;
.bss:00000000002093CA                 db    ? ;
.bss:00000000002093CB                 db    ? ;
.bss:00000000002093CC                 db    ? ;
.bss:00000000002093CD                 db    ? ;
.bss:00000000002093CE                 db    ? ;
.bss:00000000002093CF                 db    ? ;
.bss:00000000002093D0                 db    ? ;
.bss:00000000002093D1                 db    ? ;
.bss:00000000002093D2                 db    ? ;
.bss:00000000002093D3                 db    ? ;
.bss:00000000002093D4                 db    ? ;
.bss:00000000002093D5                 db    ? ;
.bss:00000000002093D6                 db    ? ;
.bss:00000000002093D7                 db    ? ;
.bss:00000000002093D8                 db    ? ;
.bss:00000000002093D9                 db    ? ;
.bss:00000000002093DA                 db    ? ;
.bss:00000000002093DB                 db    ? ;
.bss:00000000002093DC                 db    ? ;
.bss:00000000002093DD                 db    ? ;
.bss:00000000002093DE                 db    ? ;
.bss:00000000002093DF                 db    ? ;
.bss:00000000002093E0                 db    ? ;
.bss:00000000002093E1                 db    ? ;
.bss:00000000002093E2                 db    ? ;
.bss:00000000002093E3                 db    ? ;
.bss:00000000002093E4                 db    ? ;
.bss:00000000002093E5                 db    ? ;
.bss:00000000002093E6                 db    ? ;
.bss:00000000002093E7                 db    ? ;
.bss:00000000002093E8                 db    ? ;
.bss:00000000002093E9                 db    ? ;
.bss:00000000002093EA                 db    ? ;
.bss:00000000002093EB                 db    ? ;
.bss:00000000002093EC                 db    ? ;
.bss:00000000002093ED                 db    ? ;
.bss:00000000002093EE                 db    ? ;
.bss:00000000002093EF                 db    ? ;
.bss:00000000002093F0                 db    ? ;
.bss:00000000002093F1                 db    ? ;
.bss:00000000002093F2                 db    ? ;
.bss:00000000002093F3                 db    ? ;
.bss:00000000002093F4                 db    ? ;
.bss:00000000002093F5                 db    ? ;
.bss:00000000002093F6                 db    ? ;
.bss:00000000002093F7                 db    ? ;
.bss:00000000002093F8                 db    ? ;
.bss:00000000002093F9                 db    ? ;
.bss:00000000002093FA                 db    ? ;
.bss:00000000002093FB                 db    ? ;
.bss:00000000002093FC                 db    ? ;
.bss:00000000002093FD                 db    ? ;
.bss:00000000002093FE                 db    ? ;
.bss:00000000002093FF                 db    ? ;
.bss:0000000000209400 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209400                                         ; get_quoting_style↑o ...
.bss:0000000000209410 xmmword_209410  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209410                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209420 xmmword_209420  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209420                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209430 qword_209430    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209430                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209438 ; __locale_t c_locale_cache
.bss:0000000000209438 c_locale_cache  dq ?                    ; DATA XREF: c_strtod+C↑r
.bss:0000000000209438                                         ; c_strtod:loc_5B48↑r ...
.bss:0000000000209438 _bss            ends
.bss:0000000000209438
.prgend:0000000000209440 ; ===========================================================================
.prgend:0000000000209440
.prgend:0000000000209440 ; Segment type: Zero-length
.prgend:0000000000209440 _prgend         segment byte public '' use64
.prgend:0000000000209440 _end            label byte
.prgend:0000000000209440 _prgend         ends
.prgend:0000000000209440
extern:0000000000209448 ; ===========================================================================
extern:0000000000209448
extern:0000000000209448 ; Segment type: Externs
extern:0000000000209448 ; extern
extern:0000000000209448 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
extern:0000000000209448                 extrn sigprocmask:near  ; CODE XREF: _sigprocmask↑j
extern:0000000000209448                                         ; DATA XREF: .got:sigprocmask_ptr↑o
extern:0000000000209450                 extrn __snprintf_chk:near
extern:0000000000209450                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000209450                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000209458 ; int raise(int sig)
extern:0000000000209458                 extrn raise:near        ; CODE XREF: _raise↑j
extern:0000000000209458                                         ; DATA XREF: .got:raise_ptr↑o
extern:0000000000209460 ; void free(void *ptr)
extern:0000000000209460                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000209460                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000209468 ; void __noreturn abort(void)
extern:0000000000209468                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000209468                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000209470 ; int *_errno_location(void)
extern:0000000000209470                 extrn __errno_location:near
extern:0000000000209470                                         ; CODE XREF: ___errno_location↑j
extern:0000000000209470                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000209478 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000209478                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000209478                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000209480 ; void __noreturn exit(int status)
extern:0000000000209480                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000209480                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000209488 ; char *strcpy(char *dest, const char *src)
extern:0000000000209488                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:0000000000209488                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:0000000000209490 ; size_t _fpending(FILE *fp)
extern:0000000000209490                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000209490                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000209498 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
extern:0000000000209498                 extrn sigaction:near    ; CODE XREF: _sigaction↑j
extern:0000000000209498                                         ; DATA XREF: .got:sigaction_ptr↑o
extern:00000000002094A0 ; double strtod(const char *nptr, char **endptr)
extern:00000000002094A0                 extrn strtod:near       ; CODE XREF: _strtod↑j
extern:00000000002094A0                                         ; DATA XREF: .got:strtod_ptr↑o
extern:00000000002094A8 ; char *textdomain(const char *domainname)
extern:00000000002094A8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002094A8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002094B0 ; double strtod_l(const char *nptr, char **endptr, __locale_t loc)
extern:00000000002094B0                 extrn strtod_l:near     ; CODE XREF: _strtod_l↑j
extern:00000000002094B0                                         ; DATA XREF: .got:strtod_l_ptr↑o
extern:00000000002094B8 ; int fclose(FILE *stream)
extern:00000000002094B8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002094B8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002094C0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002094C0                 extrn bindtextdomain:near
extern:00000000002094C0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002094C0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002094C8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002094C8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002094C8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002094D0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002094D0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002094D0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002094D0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002094D8 ; size_t strlen(const char *s)
extern:00000000002094D8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002094D8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002094E0                 extrn __stack_chk_fail:near
extern:00000000002094E0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002094E0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002094E8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002094E8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002094E8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002094F0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002094F0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002094F0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002094F8 ; char *strchr(const char *s, int c)
extern:00000000002094F8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002094F8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000209500 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
extern:0000000000209500                 extrn newlocale:near    ; CODE XREF: _newlocale↑j
extern:0000000000209500                                         ; DATA XREF: .got:newlocale_ptr↑o
extern:0000000000209508 ; char *strrchr(const char *s, int c)
extern:0000000000209508                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000209508                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000209510 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000209510                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000209510                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000209518 ; void *memset(void *s, int c, size_t n)
extern:0000000000209518                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000209518                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000209520 ; unsigned int alarm(unsigned int seconds)
extern:0000000000209520                 extrn alarm:near        ; CODE XREF: _alarm↑j
extern:0000000000209520                                         ; DATA XREF: .got:alarm_ptr↑o
extern:0000000000209528 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209528                 extrn __libc_start_main:near
extern:0000000000209528                                         ; CODE XREF: start+24↑p
extern:0000000000209528                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000209530 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000209530                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000209530                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000209538 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000209538                 extrn fputs_unlocked:near
extern:0000000000209538                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000209538                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000209540 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000209540                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000209540                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000209548 ; int strcmp(const char *s1, const char *s2)
extern:0000000000209548                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000209548                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000209550 ; __sighandler_t signal(int sig, __sighandler_t handler)
extern:0000000000209550                 extrn signal:near       ; CODE XREF: _signal↑j
extern:0000000000209550                                         ; DATA XREF: .got:signal_ptr↑o
extern:0000000000209558 ; int sigemptyset(sigset_t *set)
extern:0000000000209558                 extrn sigemptyset:near  ; CODE XREF: _sigemptyset↑j
extern:0000000000209558                                         ; DATA XREF: .got:sigemptyset_ptr↑o
extern:0000000000209560 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:0000000000209560                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:0000000000209560                                         ; DATA XREF: .got:strtol_ptr↑o
extern:0000000000209568 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000209568                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000209568                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000209570 ; int prctl(int option, ...)
extern:0000000000209570                 extrn prctl:near        ; CODE XREF: _prctl↑j
extern:0000000000209570                                         ; DATA XREF: .got:prctl_ptr↑o
extern:0000000000209578 ; int kill(__pid_t pid, int sig)
extern:0000000000209578                 extrn kill:near         ; CODE XREF: _kill↑j
extern:0000000000209578                                         ; DATA XREF: .got:kill_ptr↑o
extern:0000000000209580 ; int fileno(FILE *stream)
extern:0000000000209580                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000209580                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000209588 ; void *malloc(size_t size)
extern:0000000000209588                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000209588                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000209590 ; int fflush(FILE *stream)
extern:0000000000209590                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000209590                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000209598 ; char *nl_langinfo(nl_item item)
extern:0000000000209598                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000209598                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002095A0 ; int sigsuspend(const sigset_t *set)
extern:00000000002095A0                 extrn sigsuspend:near   ; CODE XREF: _sigsuspend↑j
extern:00000000002095A0                                         ; DATA XREF: .got:sigsuspend_ptr↑o
extern:00000000002095A8 ; int _freading(FILE *fp)
extern:00000000002095A8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002095A8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002095B0 ; void *realloc(void *ptr, size_t size)
extern:00000000002095B0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002095B0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002095B8 ; char *setlocale(int category, const char *locale)
extern:00000000002095B8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002095B8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002095C0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002095C0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002095C8 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002095C8                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002095C8                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002095D0 ; __pid_t waitpid(__pid_t pid, int *stat_loc, int options)
extern:00000000002095D0                 extrn waitpid:near      ; CODE XREF: _waitpid↑j
extern:00000000002095D0                                         ; DATA XREF: .got:waitpid_ptr↑o
extern:00000000002095D8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002095D8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002095D8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002095E0 ; int timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue)
extern:00000000002095E0                 extrn timer_settime:near
extern:00000000002095E0                                         ; CODE XREF: _timer_settime↑j
extern:00000000002095E0                                         ; DATA XREF: .got:timer_settime_ptr↑o
extern:00000000002095E8 ; int timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid)
extern:00000000002095E8                 extrn timer_create:near ; CODE XREF: _timer_create↑j
extern:00000000002095E8                                         ; DATA XREF: .got:timer_create_ptr↑o
extern:00000000002095F0 ; int execvp(const char *file, char *const argv[])
extern:00000000002095F0                 extrn execvp:near       ; CODE XREF: _execvp↑j
extern:00000000002095F0                                         ; DATA XREF: .got:execvp_ptr↑o
extern:00000000002095F8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002095F8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002095F8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000209600 ; int setpgid(__pid_t pid, __pid_t pgid)
extern:0000000000209600                 extrn setpgid:near      ; CODE XREF: _setpgid↑j
extern:0000000000209600                                         ; DATA XREF: .got:setpgid_ptr↑o
extern:0000000000209608 ; int _libc_current_sigrtmin(void)
extern:0000000000209608                 extrn __libc_current_sigrtmin:near
extern:0000000000209608                                         ; CODE XREF: ___libc_current_sigrtmin↑j
extern:0000000000209608                                         ; DATA XREF: .got:__libc_current_sigrtmin_ptr↑o
extern:0000000000209610 ; void __noreturn exit(int status)
extern:0000000000209610                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000209610                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000209618 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000209618                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000209618                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000209620 ; int timer_delete(timer_t timerid)
extern:0000000000209620                 extrn timer_delete:near ; CODE XREF: _timer_delete↑j
extern:0000000000209620                                         ; DATA XREF: .got:timer_delete_ptr↑o
extern:0000000000209628                 extrn __fprintf_chk:near
extern:0000000000209628                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000209628                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000209630 ; int _libc_current_sigrtmax(void)
extern:0000000000209630                 extrn __libc_current_sigrtmax:near
extern:0000000000209630                                         ; CODE XREF: ___libc_current_sigrtmax↑j
extern:0000000000209630                                         ; DATA XREF: .got:__libc_current_sigrtmax_ptr↑o
extern:0000000000209638 ; int mbsinit(const mbstate_t *ps)
extern:0000000000209638                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000209638                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000209640 ; int iswprint(wint_t wc)
extern:0000000000209640                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000209640                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000209648 ; int __fastcall __cxa_finalize(void *)
extern:0000000000209648                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000209648                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000209648                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000209650 ; int sigaddset(sigset_t *set, int signo)
extern:0000000000209650                 extrn sigaddset:near    ; CODE XREF: _sigaddset↑j
extern:0000000000209650                                         ; DATA XREF: .got:sigaddset_ptr↑o
extern:0000000000209658 ; __pid_t fork(void)
extern:0000000000209658                 extrn fork:near         ; CODE XREF: _fork↑j
extern:0000000000209658                                         ; DATA XREF: .got:fork_ptr↑o
extern:0000000000209660 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000209660                 extrn __ctype_b_loc:near
extern:0000000000209660                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000209660                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000209668                 extrn __sprintf_chk:near
extern:0000000000209668                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000209668                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:0000000000209670                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000209670                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000209678                 extrn __gmon_start__:near ; weak
extern:0000000000209678                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000209678                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000209680                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000209680                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000209680
extern:0000000000209680
extern:0000000000209680                 end start
