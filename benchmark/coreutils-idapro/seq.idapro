LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 3279706C17A3482284F612A271837956CC1E3E735DB1FF4C013E152409037ECD
LOAD:0000000000000000 ; Input MD5    : 3FBACBDB0E2160C497CB2E7E23A2364E
LOAD:0000000000000000 ; Input CRC32  : A7741C05
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/seq
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'seq.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'cl-strtold.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrtold.c'
LOAD:0000000000000000 ; Source File : 'asprintf.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'vasprintf.c'
LOAD:0000000000000000 ; Source File : 'c-strtold.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 361E0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0A338h               ; Size in file image
LOAD:00000000000000D8                 dq 0A338h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0AAF0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20AAF0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 590h                 ; Size in file image
LOAD:0000000000000110                 dq 770h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0AC18h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20AC18h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 92FCh                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 92FCh                ; Physical address
LOAD:00000000000001B0                 dq 29Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 29Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0AAF0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20AAF0h              ; Physical address
LOAD:0000000000000220                 dq 510h                 ; Size in file image
LOAD:0000000000000228                 dq 510h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 9Fh, 50h, 95h, 6Bh, 4, 59h, 0F0h, 4Fh, 0EBh, 9Eh, 0E1h ; Desc
LOAD:0000000000000284                 db 0Fh, 22h, 51h, 0D5h, 1Eh, 1Dh, 0B0h, 9Eh, 0EDh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Ch
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Ch, 3Dh, 42h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aSnprintfChk - offset byte_940, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_940, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_940, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_940, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_940, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_940, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_940, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrcpy - offset byte_940, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_940, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aClearerrUnlock - offset byte_940, 12h, 0, 0, \ ; "clearerr_unlocked"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_940, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_940, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_940, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_940, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_940, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_940, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_940, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_940, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_940, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrchr - offset byte_940, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aNewlocale - offset byte_940, 12h, 0, 0, \ ; "newlocale"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_940, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_940, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemset - offset byte_940, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrspn - offset byte_940, 12h, 0, 0, \ ; "strspn"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrcspn - offset byte_940, 12h, 0, 0, \ ; "strcspn"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_940, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_940, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_940, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_940, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrcmp - offset byte_940, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aGmonStart - offset byte_940, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrtol - offset byte_940, 12h, 0, 0, \ ; "strtol"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemcpy - offset byte_940, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFileno - offset byte_940, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aUselocale - offset byte_940, 12h, 0, 0, \ ; "uselocale"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMalloc - offset byte_940, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFflush - offset byte_940, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aNlLanginfo - offset byte_940, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFreading - offset byte_940, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFwriteUnlocked - offset byte_940, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aRealloc - offset byte_940, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aSetlocale - offset byte_940, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aPrintfChk - offset byte_940, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMempcpy - offset byte_940, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aMemmove - offset byte_940, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aStrtold - offset byte_940, 12h, 0, 0, \ ; "strtold"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aError - offset byte_940, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000760                            0>
LOAD:0000000000000778                 Elf64_Sym <offset aFseeko - offset byte_940, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aCxaAtexit - offset byte_940, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aExit+1 - offset byte_940, 12h, 0, 0, \ ; "exit"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFwrite - offset byte_940, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFprintfChk - offset byte_940, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aItmRegistertmc - offset byte_940, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aMbsinit - offset byte_940, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aIswprint - offset byte_940, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aCxaFinalize - offset byte_940, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aCtypeBLoc - offset byte_940, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aSprintfChk - offset byte_940, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aStdout - offset byte_940, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000880                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aProgname - offset byte_940, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000898                            offset __bss_start, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aProgramInvocat - offset byte_940, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000008B0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8                 Elf64_Sym <offset aPrognameFull - offset byte_940, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000008C8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008E0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_940, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:00000000000008E0                            offset __bss_start, 8>
LOAD:00000000000008F8                 Elf64_Sym <offset aStderr - offset byte_940, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000008F8                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aOptind - offset byte_940, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000910                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000928                 Elf64_Sym <offset aOptarg - offset byte_940, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000928                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000940 ; ELF String Table
LOAD:0000000000000940 byte_940        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000940                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000941 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000CE0↓o
LOAD:000000000000094B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000952 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000959 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000966 aClearerrUnlock db 'clearerr_unlocked',0
LOAD:0000000000000966                                         ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000978 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000982 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:000000000000098A aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000992 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000999 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009A1 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009AB aUselocale      db 'uselocale',0        ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000009B5 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009BB aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000009CC aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:00000000000009D5 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:00000000000009DD aStrtold        db 'strtold',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009E5 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000009EB aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000009EB                                         ; LOAD:00000000000007A8↑o
LOAD:00000000000009F1 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009F8 aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000009F8                                         ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A10 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A10                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000A27 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A2E aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000A35 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A3C aNewlocale      db 'newlocale',0        ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000A46 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A4D aStrcspn        db 'strcspn',0          ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A55 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000A66 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000A6D aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A75 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A83 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A8A aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000A90 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A97 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A9E aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000AA5 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AAD aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000AB9 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000AC7 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000ACE aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000AD9 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000AE0 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AEF aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000AFB aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000B02 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000B09 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B14 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B1B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B1B                                         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B39 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B48 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B56 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B5E aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000B5E                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000B6D aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B7D aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B84 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B84                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000B96 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B9D aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000BAC aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000BB1 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000BBC aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000BCC aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BD9 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000CF0↓o
LOAD:0000000000000BE4 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D00↓o
LOAD:0000000000000BEE aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000D10↓o
LOAD:0000000000000BF8 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000D20↓o
LOAD:0000000000000C04 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000D30↓o
LOAD:0000000000000C10 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000C10                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000C2C aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C3B aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000C3B                                         ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000C55                 align 2
LOAD:0000000000000C56 ; ELF GNU Symbol Version Table
LOAD:0000000000000C56                 dw 0
LOAD:0000000000000C58                 dw 3                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C5A                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C5C                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C5E                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C60                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C62                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C64                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C66                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000C68                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C6A                 dw 2                    ; clearerr_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C6C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C72                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C78                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C7A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C7C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C7E                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C80                 dw 5                    ; newlocale@@GLIBC_2.3
LOAD:0000000000000C82                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C84                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C86                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C88                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:0000000000000C8A                 dw 2                    ; strcspn@@GLIBC_2.2.5
LOAD:0000000000000C8C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C8E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000C90                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C92                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000C94                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000C96                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000C98                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000C9A                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000C9C                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000C9E                 dw 5                    ; uselocale@@GLIBC_2.3
LOAD:0000000000000CA0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000CA2                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000CA4                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000CA6                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000CA8                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CAA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000CAC                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000CAE                 dw 3                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000CB0                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000CB2                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000CB4                 dw 2                    ; strtold@@GLIBC_2.2.5
LOAD:0000000000000CB6                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000CB8                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000CBA                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000CBC                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000CBE                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000CC0                 dw 3                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CC2                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000CC4                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000CC6                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000CC8                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000CCA                 dw 5                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000CCC                 dw 3                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CCE                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000CD0                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000CD2                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000CD4                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000CD6                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000CD8                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000CDA                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000CDC                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000CDE                 dw 0
LOAD:0000000000000CE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000CE0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_940, 10h, 0> ; "libc.so.6"
LOAD:0000000000000CF0                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_940, \ ; "GLIBC_2.14"
LOAD:0000000000000CF0                                10h>
LOAD:0000000000000D00                 Elf64_Vernaux <0D696913h, 0, 5, offset aGlibc23 - offset byte_940, \ ; "GLIBC_2.3"
LOAD:0000000000000D00                                10h>
LOAD:0000000000000D10                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_940, \ ; "GLIBC_2.4"
LOAD:0000000000000D10                                10h>
LOAD:0000000000000D20                 Elf64_Vernaux <9691974h, 0, 3, offset aGlibc234 - offset byte_940, \ ; "GLIBC_2.3.4"
LOAD:0000000000000D20                                10h>
LOAD:0000000000000D30                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_940, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000D40 ; ELF RELA Relocation Table
LOAD:0000000000000D40                 Elf64_Rela <20AAF0h, 8, 2640h> ; R_X86_64_RELATIVE +2640h
LOAD:0000000000000D58                 Elf64_Rela <20AAF8h, 8, 2600h> ; R_X86_64_RELATIVE +2600h
LOAD:0000000000000D70                 Elf64_Rela <20AB00h, 8, 8122h> ; R_X86_64_RELATIVE +8122h
LOAD:0000000000000D88                 Elf64_Rela <20AB20h, 8, 812Eh> ; R_X86_64_RELATIVE +812Eh
LOAD:0000000000000DA0                 Elf64_Rela <20AB40h, 8, 8135h> ; R_X86_64_RELATIVE +8135h
LOAD:0000000000000DB8                 Elf64_Rela <20AB60h, 8, 813Fh> ; R_X86_64_RELATIVE +813Fh
LOAD:0000000000000DD0                 Elf64_Rela <20AB80h, 8, 8144h> ; R_X86_64_RELATIVE +8144h
LOAD:0000000000000DE8                 Elf64_Rela <20ABC0h, 8, 8877h> ; R_X86_64_RELATIVE +8877h
LOAD:0000000000000E00                 Elf64_Rela <20ABC8h, 8, 887Fh> ; R_X86_64_RELATIVE +887Fh
LOAD:0000000000000E18                 Elf64_Rela <20ABD0h, 8, 8885h> ; R_X86_64_RELATIVE +8885h
LOAD:0000000000000E30                 Elf64_Rela <20ABD8h, 8, 8892h> ; R_X86_64_RELATIVE +8892h
LOAD:0000000000000E48                 Elf64_Rela <20ABE0h, 8, 889Fh> ; R_X86_64_RELATIVE +889Fh
LOAD:0000000000000E60                 Elf64_Rela <20ABE8h, 8, 88B3h> ; R_X86_64_RELATIVE +88B3h
LOAD:0000000000000E78                 Elf64_Rela <20ABF0h, 8, 88B5h> ; R_X86_64_RELATIVE +88B5h
LOAD:0000000000000E90                 Elf64_Rela <20ABF8h, 8, 8898h> ; R_X86_64_RELATIVE +8898h
LOAD:0000000000000EA8                 Elf64_Rela <20AC00h, 8, 8086h> ; R_X86_64_RELATIVE +8086h
LOAD:0000000000000EC0                 Elf64_Rela <20AC08h, 8, 88BDh> ; R_X86_64_RELATIVE +88BDh
LOAD:0000000000000ED8                 Elf64_Rela <20B008h, 8, 20B008h> ; R_X86_64_RELATIVE +20B008h
LOAD:0000000000000EF0                 Elf64_Rela <20B010h, 8, 8813h> ; R_X86_64_RELATIVE +8813h
LOAD:0000000000000F08                 Elf64_Rela <20B060h, 8, 20B070h> ; R_X86_64_RELATIVE +20B070h
LOAD:0000000000000F20                 Elf64_Rela <20B078h, 8, 20B120h> ; R_X86_64_RELATIVE +20B120h
LOAD:0000000000000F38                 Elf64_Rela <20AFD0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000F50                 Elf64_Rela <20AFD8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000F68                 Elf64_Rela <20AFE0h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000F80                 Elf64_Rela <20AFE8h, 3600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000F98                 Elf64_Rela <20AFF0h, 3900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000FB0                 Elf64_Rela <20B080h, 3D00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000FC8                 Elf64_Rela <20B088h, 3C00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000FE0                 Elf64_Rela <20B090h, 4200000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000FF8                 Elf64_Rela <20B098h, 4300000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001010                 Elf64_Rela <20B0A0h, 3F00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001028                 Elf64_Rela <20B0C0h, 4100000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001040 ; ELF JMPREL Relocation Table
LOAD:0000000000001040                 Elf64_Rela <20AE20h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000001058                 Elf64_Rela <20AE28h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001070                 Elf64_Rela <20AE30h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001088                 Elf64_Rela <20AE38h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000010A0                 Elf64_Rela <20AE40h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000010B8                 Elf64_Rela <20AE48h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000010D0                 Elf64_Rela <20AE50h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000010E8                 Elf64_Rela <20AE58h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001100                 Elf64_Rela <20AE60h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT clearerr_unlocked
LOAD:0000000000001118                 Elf64_Rela <20AE68h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001130                 Elf64_Rela <20AE70h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001148                 Elf64_Rela <20AE78h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001160                 Elf64_Rela <20AE80h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001178                 Elf64_Rela <20AE88h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001190                 Elf64_Rela <20AE90h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000011A8                 Elf64_Rela <20AE98h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000011C0                 Elf64_Rela <20AEA0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000011D8                 Elf64_Rela <20AEA8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000011F0                 Elf64_Rela <20AEB0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001208                 Elf64_Rela <20AEB8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT newlocale
LOAD:0000000000001220                 Elf64_Rela <20AEC0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001238                 Elf64_Rela <20AEC8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001250                 Elf64_Rela <20AED0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001268                 Elf64_Rela <20AED8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001280                 Elf64_Rela <20AEE0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strcspn
LOAD:0000000000001298                 Elf64_Rela <20AEE8h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000012B0                 Elf64_Rela <20AEF0h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000012C8                 Elf64_Rela <20AEF8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000012E0                 Elf64_Rela <20AF00h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000012F8                 Elf64_Rela <20AF08h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001310                 Elf64_Rela <20AF10h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001328                 Elf64_Rela <20AF18h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001340                 Elf64_Rela <20AF20h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT uselocale
LOAD:0000000000001358                 Elf64_Rela <20AF28h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001370                 Elf64_Rela <20AF30h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001388                 Elf64_Rela <20AF38h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000013A0                 Elf64_Rela <20AF40h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000013B8                 Elf64_Rela <20AF48h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000013D0                 Elf64_Rela <20AF50h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000013E8                 Elf64_Rela <20AF58h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001400                 Elf64_Rela <20AF60h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001418                 Elf64_Rela <20AF68h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001430                 Elf64_Rela <20AF70h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001448                 Elf64_Rela <20AF78h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT strtold
LOAD:0000000000001460                 Elf64_Rela <20AF80h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001478                 Elf64_Rela <20AF88h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001490                 Elf64_Rela <20AF90h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000014A8                 Elf64_Rela <20AF98h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000014C0                 Elf64_Rela <20AFA0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000014D8                 Elf64_Rela <20AFA8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000014F0                 Elf64_Rela <20AFB0h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001508                 Elf64_Rela <20AFB8h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001520                 Elf64_Rela <20AFC0h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001538                 Elf64_Rela <20AFC8h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001538 LOAD            ends
LOAD:0000000000001538
.init:0000000000001550 ; ===========================================================================
.init:0000000000001550
.init:0000000000001550 ; Segment type: Pure code
.init:0000000000001550 ; Segment permissions: Read/Execute
.init:0000000000001550 _init           segment dword public 'CODE' use64
.init:0000000000001550                 assume cs:_init
.init:0000000000001550                 ;org 1550h
.init:0000000000001550                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001550
.init:0000000000001550 ; =============== S U B R O U T I N E =======================================
.init:0000000000001550
.init:0000000000001550
.init:0000000000001550                 public _init_proc
.init:0000000000001550 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001550                 sub     rsp, 8          ; _init
.init:0000000000001554                 mov     rax, cs:__gmon_start___ptr
.init:000000000000155B                 test    rax, rax
.init:000000000000155E                 jz      short loc_1562
.init:0000000000001560                 call    rax ; __gmon_start__
.init:0000000000001562
.init:0000000000001562 loc_1562:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001562                 add     rsp, 8
.init:0000000000001566                 retn
.init:0000000000001566 _init_proc      endp
.init:0000000000001566
.init:0000000000001566 _init           ends
.init:0000000000001566
LOAD:0000000000001567 ; ===========================================================================
LOAD:0000000000001567
LOAD:0000000000001567 ; Segment type: Pure code
LOAD:0000000000001567 ; Segment permissions: Read/Execute
LOAD:0000000000001567 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001567                 assume cs:LOAD
LOAD:0000000000001567                 ;org 1567h
LOAD:0000000000001567                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001567                 align 10h
LOAD:0000000000001567 LOAD            ends
LOAD:0000000000001567
.plt:0000000000001570 ; ===========================================================================
.plt:0000000000001570
.plt:0000000000001570 ; Segment type: Pure code
.plt:0000000000001570 ; Segment permissions: Read/Execute
.plt:0000000000001570 _plt            segment para public 'CODE' use64
.plt:0000000000001570                 assume cs:_plt
.plt:0000000000001570                 ;org 1570h
.plt:0000000000001570                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570
.plt:0000000000001570 sub_1570        proc near               ; CODE XREF: .plt:000000000000158B↓j
.plt:0000000000001570                                         ; .plt:000000000000159B↓j ...
.plt:0000000000001570 ; __unwind {
.plt:0000000000001570                 push    cs:qword_20AE10
.plt:0000000000001576                 jmp     cs:qword_20AE18
.plt:0000000000001576 sub_1570        endp
.plt:0000000000001576
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:000000000000157C                 align 20h
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ___snprintf_chk proc near               ; CODE XREF: vasnprintf+5B8↓p
.plt:0000000000001580                                         ; vasnprintf+6F0↓p ...
.plt:0000000000001580                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000001580 ___snprintf_chk endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    0
.plt:000000000000158B                 jmp     sub_1570
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; void free(void *ptr)
.plt:0000000000001590 _free           proc near               ; CODE XREF: main+419↓p
.plt:0000000000001590                                         ; main+426↓p ...
.plt:0000000000001590                 jmp     cs:free_ptr
.plt:0000000000001590 _free           endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1
.plt:000000000000159B                 jmp     sub_1570
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void __noreturn abort(void)
.plt:00000000000015A0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000015A0                                         ; quotearg_buffer_restyled:def_3581↓p ...
.plt:00000000000015A0                 jmp     cs:abort_ptr
.plt:00000000000015A0 _abort          endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    2
.plt:00000000000015AB                 jmp     sub_1570
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; int *__errno_location(void)
.plt:00000000000015B0 ___errno_location proc near             ; CODE XREF: io_error+23↓p
.plt:00000000000015B0                                         ; cl_strtold+65↓p ...
.plt:00000000000015B0                 jmp     cs:__errno_location_ptr
.plt:00000000000015B0 ___errno_location endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    3
.plt:00000000000015BB                 jmp     sub_1570
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000015C0 _strncmp        proc near               ; CODE XREF: usage+29C↓p
.plt:00000000000015C0                                         ; usage+35D↓p
.plt:00000000000015C0                 jmp     cs:strncmp_ptr
.plt:00000000000015C0 _strncmp        endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    4
.plt:00000000000015CB                 jmp     sub_1570
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: noreturn thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; void __noreturn _exit(int status)
.plt:00000000000015D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000015D0                 jmp     cs:_exit_ptr
.plt:00000000000015D0 __exit          endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    5
.plt:00000000000015DB                 jmp     sub_1570
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000015E0 _strcpy         proc near               ; CODE XREF: main+625↓p
.plt:00000000000015E0                 jmp     cs:strcpy_ptr
.plt:00000000000015E0 _strcpy         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    6
.plt:00000000000015EB                 jmp     sub_1570
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; size_t __fpending(FILE *fp)
.plt:00000000000015F0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000015F0                 jmp     cs:__fpending_ptr
.plt:00000000000015F0 ___fpending     endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    7
.plt:00000000000015FB                 jmp     sub_1570
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void clearerr_unlocked(FILE *stream)
.plt:0000000000001600 _clearerr_unlocked proc near            ; CODE XREF: io_error+8↓p
.plt:0000000000001600                 jmp     cs:clearerr_unlocked_ptr
.plt:0000000000001600 _clearerr_unlocked endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    8
.plt:000000000000160B                 jmp     sub_1570
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *textdomain(const char *domainname)
.plt:0000000000001610 _textdomain     proc near               ; CODE XREF: main+70↓p
.plt:0000000000001610                 jmp     cs:textdomain_ptr
.plt:0000000000001610 _textdomain     endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    9
.plt:000000000000161B                 jmp     sub_1570
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; int fclose(FILE *stream)
.plt:0000000000001620 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001620                                         ; rpl_fclose+6B↓j
.plt:0000000000001620                 jmp     cs:fclose_ptr
.plt:0000000000001620 _fclose         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    0Ah
.plt:000000000000162B                 jmp     sub_1570
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001630 _bindtextdomain proc near               ; CODE XREF: main+64↓p
.plt:0000000000001630                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001630 _bindtextdomain endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    0Bh
.plt:000000000000163B                 jmp     sub_1570
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001640 _dcgettext      proc near               ; CODE XREF: main+9BF↓p
.plt:0000000000001640                                         ; main+A6D↓p ...
.plt:0000000000001640                 jmp     cs:dcgettext_ptr
.plt:0000000000001640 _dcgettext      endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    0Ch
.plt:000000000000164B                 jmp     sub_1570
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001650 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001650                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001650 ___ctype_get_mb_cur_max endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    0Dh
.plt:000000000000165B                 jmp     sub_1570
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; size_t strlen(const char *s)
.plt:0000000000001660 _strlen         proc near               ; CODE XREF: all_digits_p+9↓p
.plt:0000000000001660                                         ; seq_fast+98↓p ...
.plt:0000000000001660                 jmp     cs:strlen_ptr
.plt:0000000000001660 _strlen         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    0Eh
.plt:000000000000166B                 jmp     sub_1570
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: noreturn thunk
.plt:0000000000001670
.plt:0000000000001670 ___stack_chk_fail proc near             ; CODE XREF: main:loc_237D↓p
.plt:0000000000001670                                         ; scan_arg:loc_31D3↓p ...
.plt:0000000000001670                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001670 ___stack_chk_fail endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    0Fh
.plt:000000000000167B                 jmp     sub_1570
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001680 _getopt_long    proc near               ; CODE XREF: main+D1↓p
.plt:0000000000001680                 jmp     cs:getopt_long_ptr
.plt:0000000000001680 _getopt_long    endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    10h
.plt:000000000000168B                 jmp     sub_1570
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001690 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001690                 jmp     cs:mbrtowc_ptr
.plt:0000000000001690 _mbrtowc        endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    11h
.plt:000000000000169B                 jmp     sub_1570
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; char *strchr(const char *s, int c)
.plt:00000000000016A0 _strchr         proc near               ; CODE XREF: main+5B1↓p
.plt:00000000000016A0                                         ; scan_arg+8C↓p ...
.plt:00000000000016A0                 jmp     cs:strchr_ptr
.plt:00000000000016A0 _strchr         endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    12h
.plt:00000000000016AB                 jmp     sub_1570
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
.plt:00000000000016B0 _newlocale      proc near               ; CODE XREF: c_strtold+9E↓p
.plt:00000000000016B0                 jmp     cs:newlocale_ptr
.plt:00000000000016B0 _newlocale      endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    13h
.plt:00000000000016BB                 jmp     sub_1570
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; char *strrchr(const char *s, int c)
.plt:00000000000016C0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000016C0                 jmp     cs:strrchr_ptr
.plt:00000000000016C0 _strrchr        endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    14h
.plt:00000000000016CB                 jmp     sub_1570
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000016D0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000016D0                                         ; rpl_fseeko+3B↓p
.plt:00000000000016D0                 jmp     cs:lseek_ptr
.plt:00000000000016D0 _lseek          endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    15h
.plt:00000000000016DB                 jmp     sub_1570
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000016E0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000016E0                                         ; xzalloc+12↓j
.plt:00000000000016E0                 jmp     cs:memset_ptr
.plt:00000000000016E0 _memset         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    16h
.plt:00000000000016EB                 jmp     sub_1570
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; size_t strspn(const char *s, const char *accept)
.plt:00000000000016F0 _strspn         proc near               ; CODE XREF: main+547↓p
.plt:00000000000016F0                                         ; main+55A↓p ...
.plt:00000000000016F0                 jmp     cs:strspn_ptr
.plt:00000000000016F0 _strspn         endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    17h
.plt:00000000000016FB                 jmp     sub_1570
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; size_t strcspn(const char *s, const char *reject)
.plt:0000000000001700 _strcspn        proc near               ; CODE XREF: scan_arg+A7↓p
.plt:0000000000001700                                         ; scan_arg+FF↓p
.plt:0000000000001700                 jmp     cs:strcspn_ptr
.plt:0000000000001700 _strcspn        endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    18h
.plt:000000000000170B                 jmp     sub_1570
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001710 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001710                 jmp     cs:memcmp_ptr
.plt:0000000000001710 _memcmp         endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    19h
.plt:000000000000171B                 jmp     sub_1570
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001720 _fputs_unlocked proc near               ; CODE XREF: main+442↓p
.plt:0000000000001720                                         ; main+507↓p ...
.plt:0000000000001720                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001720 _fputs_unlocked endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    1Ah
.plt:000000000000172B                 jmp     sub_1570
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001730 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001730                 jmp     cs:calloc_ptr
.plt:0000000000001730 _calloc         endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    1Bh
.plt:000000000000173B                 jmp     sub_1570
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001740 _strcmp         proc near               ; CODE XREF: main+40E↓p
.plt:0000000000001740                                         ; main+727↓p ...
.plt:0000000000001740                 jmp     cs:strcmp_ptr
.plt:0000000000001740 _strcmp         endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    1Ch
.plt:000000000000174B                 jmp     sub_1570
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001750 _strtol         proc near               ; CODE XREF: scan_arg+15B↓p
.plt:0000000000001750                 jmp     cs:strtol_ptr
.plt:0000000000001750 _strtol         endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    1Dh
.plt:000000000000175B                 jmp     sub_1570
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001760 _memcpy         proc near               ; CODE XREF: main+60C↓p
.plt:0000000000001760                                         ; seq_fast+103↓p ...
.plt:0000000000001760                 jmp     cs:memcpy_ptr
.plt:0000000000001760 _memcpy         endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    1Eh
.plt:000000000000176B                 jmp     sub_1570
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; int fileno(FILE *stream)
.plt:0000000000001770 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001770                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001770                 jmp     cs:fileno_ptr
.plt:0000000000001770 _fileno         endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    1Fh
.plt:000000000000177B                 jmp     sub_1570
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: thunk
.plt:0000000000001780
.plt:0000000000001780 ; __locale_t uselocale(__locale_t dataset)
.plt:0000000000001780 _uselocale      proc near               ; CODE XREF: c_strtold+26↓p
.plt:0000000000001780                                         ; c_strtold+4E↓p
.plt:0000000000001780                 jmp     cs:uselocale_ptr
.plt:0000000000001780 _uselocale      endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    20h ; ' '
.plt:000000000000178B                 jmp     sub_1570
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; void *malloc(size_t size)
.plt:0000000000001790 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001790                                         ; vasnprintf+D2↓p ...
.plt:0000000000001790                 jmp     cs:malloc_ptr
.plt:0000000000001790 _malloc         endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    21h ; '!'
.plt:000000000000179B                 jmp     sub_1570
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; int fflush(FILE *stream)
.plt:00000000000017A0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000017A0                                         ; rpl_fflush+3B↓j
.plt:00000000000017A0                 jmp     cs:fflush_ptr
.plt:00000000000017A0 _fflush         endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    22h ; '"'
.plt:00000000000017AB                 jmp     sub_1570
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; char *nl_langinfo(nl_item item)
.plt:00000000000017B0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000017B0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000017B0 _nl_langinfo    endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    23h ; '#'
.plt:00000000000017BB                 jmp     sub_1570
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int __freading(FILE *fp)
.plt:00000000000017C0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000017C0                                         ; rpl_fflush+9↓p
.plt:00000000000017C0                 jmp     cs:__freading_ptr
.plt:00000000000017C0 ___freading     endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    24h ; '$'
.plt:00000000000017CB                 jmp     sub_1570
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000017D0 _fwrite_unlocked proc near              ; CODE XREF: seq_fast+213↓p
.plt:00000000000017D0                                         ; seq_fast+325↓p
.plt:00000000000017D0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000017D0 _fwrite_unlocked endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    25h ; '%'
.plt:00000000000017DB                 jmp     sub_1570
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000017E0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000017E0                                         ; vasnprintf+285↓p ...
.plt:00000000000017E0                 jmp     cs:realloc_ptr
.plt:00000000000017E0 _realloc        endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    26h ; '&'
.plt:00000000000017EB                 jmp     sub_1570
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; char *setlocale(int category, const char *locale)
.plt:00000000000017F0 _setlocale      proc near               ; CODE XREF: main+45↓p
.plt:00000000000017F0                                         ; main+4CC↓p ...
.plt:00000000000017F0                 jmp     cs:setlocale_ptr
.plt:00000000000017F0 _setlocale      endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    27h ; '''
.plt:00000000000017FB                 jmp     sub_1570
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ___printf_chk   proc near               ; CODE XREF: main+475↓p
.plt:0000000000001800                                         ; usage+7E↓p ...
.plt:0000000000001800                 jmp     cs:__printf_chk_ptr
.plt:0000000000001800 ___printf_chk   endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    28h ; '('
.plt:000000000000180B                 jmp     sub_1570
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001810 _mempcpy        proc near               ; CODE XREF: seq_fast+17F↓p
.plt:0000000000001810                                         ; seq_fast+1E8↓p
.plt:0000000000001810                 jmp     cs:mempcpy_ptr
.plt:0000000000001810 _mempcpy        endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    29h ; ')'
.plt:000000000000181B                 jmp     sub_1570
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001820 _memmove        proc near               ; CODE XREF: seq_fast+286↓p
.plt:0000000000001820                 jmp     cs:memmove_ptr
.plt:0000000000001820 _memmove        endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    2Ah ; '*'
.plt:000000000000182B                 jmp     sub_1570
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; long double strtold(const char *nptr, char **endptr)
.plt:0000000000001830 _strtold        proc near               ; CODE XREF: cl_strtold+25↓p
.plt:0000000000001830                                         ; c_strtold+39↓p
.plt:0000000000001830                 jmp     cs:strtold_ptr
.plt:0000000000001830 _strtold        endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    2Bh ; '+'
.plt:000000000000183B                 jmp     sub_1570
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001840 _error          proc near               ; CODE XREF: main+9D3↓p
.plt:0000000000001840                                         ; main+A7E↓p ...
.plt:0000000000001840                 jmp     cs:error_ptr
.plt:0000000000001840 _error          endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    2Ch ; ','
.plt:000000000000184B                 jmp     sub_1570
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001850 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_5E7A↓j
.plt:0000000000001850                 jmp     cs:fseeko_ptr
.plt:0000000000001850 _fseeko         endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    2Dh ; '-'
.plt:000000000000185B                 jmp     sub_1570
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001860 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001860                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001860 ___cxa_atexit   endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    2Eh ; '.'
.plt:000000000000186B                 jmp     sub_1570
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: noreturn thunk
.plt:0000000000001870
.plt:0000000000001870 ; void __noreturn exit(int status)
.plt:0000000000001870 _exit           proc near               ; CODE XREF: main+1B2↓p
.plt:0000000000001870                                         ; usage+58↓p
.plt:0000000000001870                 jmp     cs:exit_ptr
.plt:0000000000001870 _exit           endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    2Fh ; '/'
.plt:000000000000187B                 jmp     sub_1570
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001880 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001880                 jmp     cs:fwrite_ptr
.plt:0000000000001880 _fwrite         endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    30h ; '0'
.plt:000000000000188B                 jmp     sub_1570
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001890                                         ; version_etc_arn+37↓p ...
.plt:0000000000001890                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001890 ___fprintf_chk  endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    31h ; '1'
.plt:000000000000189B                 jmp     sub_1570
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000018A0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000018A0                 jmp     cs:mbsinit_ptr
.plt:00000000000018A0 _mbsinit        endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    32h ; '2'
.plt:00000000000018AB                 jmp     sub_1570
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; int iswprint(wint_t wc)
.plt:00000000000018B0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000018B0                 jmp     cs:iswprint_ptr
.plt:00000000000018B0 _iswprint       endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    33h ; '3'
.plt:00000000000018BB                 jmp     sub_1570
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000018C0 ___ctype_b_loc  proc near               ; CODE XREF: scan_arg+53↓p
.plt:00000000000018C0                                         ; quotearg_buffer_restyled+513↓p
.plt:00000000000018C0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000018C0 ___ctype_b_loc  endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    34h ; '4'
.plt:00000000000018CB                 jmp     sub_1570
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ___sprintf_chk  proc near               ; CODE XREF: main+8C0↓p
.plt:00000000000018D0                                         ; main+95B↓p
.plt:00000000000018D0                 jmp     cs:__sprintf_chk_ptr
.plt:00000000000018D0 ___sprintf_chk  endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    35h ; '5'
.plt:00000000000018DB                 jmp     sub_1570
.plt:00000000000018DB ; } // starts at 1570
.plt:00000000000018DB _plt            ends
.plt:00000000000018DB
.plt.got:00000000000018E0 ; ===========================================================================
.plt.got:00000000000018E0
.plt.got:00000000000018E0 ; Segment type: Pure code
.plt.got:00000000000018E0 ; Segment permissions: Read/Execute
.plt.got:00000000000018E0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000018E0                 assume cs:_plt_got
.plt.got:00000000000018E0                 ;org 18E0h
.plt.got:00000000000018E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000018E0
.plt.got:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000018E0
.plt.got:00000000000018E0 ; Attributes: thunk
.plt.got:00000000000018E0
.plt.got:00000000000018E0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000018E0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000018E0 ; __unwind {
.plt.got:00000000000018E0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000018E0 __cxa_finalize  endp
.plt.got:00000000000018E0
.plt.got:00000000000018E0 ; ---------------------------------------------------------------------------
.plt.got:00000000000018E6                 align 8
.plt.got:00000000000018E6 ; } // starts at 18E0
.plt.got:00000000000018E6 _plt_got        ends
.plt.got:00000000000018E6
LOAD:00000000000018E8 ; ===========================================================================
LOAD:00000000000018E8
LOAD:00000000000018E8 ; Segment type: Pure code
LOAD:00000000000018E8 ; Segment permissions: Read/Execute
LOAD:00000000000018E8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000018E8                 assume cs:LOAD
LOAD:00000000000018E8                 ;org 18E8h
LOAD:00000000000018E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000018E8                 align 10h
LOAD:00000000000018E8 LOAD            ends
LOAD:00000000000018E8
.text:00000000000018F0 ; ===========================================================================
.text:00000000000018F0
.text:00000000000018F0 ; Segment type: Pure code
.text:00000000000018F0 ; Segment permissions: Read/Execute
.text:00000000000018F0 _text           segment para public 'CODE' use64
.text:00000000000018F0                 assume cs:_text
.text:00000000000018F0                 ;org 18F0h
.text:00000000000018F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000018F0
.text:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018F0
.text:00000000000018F0
.text:00000000000018F0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000018F0                 public main
.text:00000000000018F0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000018F0
.text:00000000000018F0 var_108         = tbyte ptr -108h
.text:00000000000018F0 var_F8          = tbyte ptr -0F8h
.text:00000000000018F0 var_E8          = tbyte ptr -0E8h
.text:00000000000018F0 var_D8          = tbyte ptr -0D8h
.text:00000000000018F0 var_C8          = tbyte ptr -0C8h
.text:00000000000018F0 var_B8          = tbyte ptr -0B8h
.text:00000000000018F0 var_A4          = dword ptr -0A4h
.text:00000000000018F0 var_A0          = qword ptr -0A0h
.text:00000000000018F0 ptr             = qword ptr -98h
.text:00000000000018F0 var_90          = qword ptr -90h
.text:00000000000018F0 s2              = qword ptr -88h
.text:00000000000018F0 s1              = qword ptr -80h
.text:00000000000018F0 var_78          = tbyte ptr -78h
.text:00000000000018F0 var_68          = tbyte ptr -68h
.text:00000000000018F0 var_58          = qword ptr -58h
.text:00000000000018F0 var_50          = dword ptr -50h
.text:00000000000018F0 var_40          = qword ptr -40h
.text:00000000000018F0
.text:00000000000018F0 ; __unwind {
.text:00000000000018F0                 push    r15
.text:00000000000018F2                 push    r14
.text:00000000000018F4                 push    r13
.text:00000000000018F6                 push    r12
.text:00000000000018F8                 mov     r13d, edi
.text:00000000000018FB                 push    rbp
.text:00000000000018FC                 push    rbx
.text:00000000000018FD                 mov     r12, rsi
.text:0000000000001900                 lea     rbp, long_options
.text:0000000000001907                 sub     rsp, 0D8h
.text:000000000000190E                 mov     rdi, [rsi]
.text:0000000000001911                 mov     rax, fs:28h
.text:000000000000191A                 mov     [rsp+108h+var_40], rax
.text:0000000000001922                 xor     eax, eax
.text:0000000000001924                 call    set_program_name
.text:0000000000001929                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001930                 mov     edi, 6          ; category
.text:0000000000001935                 call    _setlocale
.text:000000000000193A                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001941                 lea     rdi, domainname ; "coreutils"
.text:0000000000001948                 test    rax, rax
.text:000000000000194B                 setnz   cs:locale_ok
.text:0000000000001952                 xor     ebx, ebx
.text:0000000000001954                 call    _bindtextdomain
.text:0000000000001959                 lea     rdi, domainname ; "coreutils"
.text:0000000000001960                 call    _textdomain
.text:0000000000001965                 lea     rdi, close_stdout
.text:000000000000196C                 call    atexit
.text:0000000000001971                 lea     rax, aWrittenBySSAnd+1Ah ; "\n"
.text:0000000000001978                 mov     cs:equal_width, 0
.text:000000000000197F                 mov     cs:separator, rax
.text:0000000000001986
.text:0000000000001986 loc_1986:                               ; CODE XREF: main+1C7↓j
.text:0000000000001986                                         ; main+1DE↓j
.text:0000000000001986                 mov     r15d, cs:optind@@GLIBC_2_2_5
.text:000000000000198D                 cmp     r15d, r13d
.text:0000000000001990                 jge     short loc_1A03
.text:0000000000001992
.text:0000000000001992 loc_1992:                               ; CODE XREF: main+111↓j
.text:0000000000001992                 movsxd  rax, r15d
.text:0000000000001995                 mov     rax, [r12+rax*8]
.text:0000000000001999                 cmp     byte ptr [rax], 2Dh ; '-'
.text:000000000000199C                 jnz     short loc_19AE
.text:000000000000199E                 movsx   eax, byte ptr [rax+1]
.text:00000000000019A2                 cmp     al, 2Eh ; '.'
.text:00000000000019A4                 jz      short loc_1A03
.text:00000000000019A6                 sub     eax, 30h ; '0'
.text:00000000000019A9                 cmp     eax, 9
.text:00000000000019AC                 jbe     short loc_1A03
.text:00000000000019AE
.text:00000000000019AE loc_19AE:                               ; CODE XREF: main+AC↑j
.text:00000000000019AE                 lea     rdx, shortopts  ; "+f:s:w"
.text:00000000000019B5                 xor     r8d, r8d        ; longind
.text:00000000000019B8                 mov     rcx, rbp        ; longopts
.text:00000000000019BB                 mov     rsi, r12        ; argv
.text:00000000000019BE                 mov     edi, r13d       ; argc
.text:00000000000019C1                 call    _getopt_long
.text:00000000000019C6                 cmp     eax, 0FFFFFFFFh
.text:00000000000019C9                 jz      loc_1FF9
.text:00000000000019CF                 cmp     eax, 66h ; 'f'
.text:00000000000019D2                 jz      loc_1AB0
.text:00000000000019D8                 jle     loc_1A68
.text:00000000000019DE                 cmp     eax, 73h ; 's'
.text:00000000000019E1                 jz      loc_1AC0
.text:00000000000019E7                 cmp     eax, 77h ; 'w'
.text:00000000000019EA                 jnz     loc_2373
.text:00000000000019F0                 mov     r15d, cs:optind@@GLIBC_2_2_5
.text:00000000000019F7                 mov     cs:equal_width, 1
.text:00000000000019FE                 cmp     r15d, r13d
.text:0000000000001A01                 jl      short loc_1992
.text:0000000000001A03
.text:0000000000001A03 loc_1A03:                               ; CODE XREF: main+A0↑j
.text:0000000000001A03                                         ; main+B4↑j ...
.text:0000000000001A03                 mov     eax, r13d
.text:0000000000001A06                 sub     eax, r15d
.text:0000000000001A09                 mov     dword ptr [rsp+108h+var_108], eax
.text:0000000000001A0C                 jz      loc_242E
.text:0000000000001A12                 cmp     dword ptr [rsp+108h+var_108], 3
.text:0000000000001A16                 ja      loc_233F
.text:0000000000001A1C                 test    rbx, rbx
.text:0000000000001A1F                 jz      loc_1AD3
.text:0000000000001A25                 xor     ebp, ebp
.text:0000000000001A27                 xor     eax, eax
.text:0000000000001A29                 jmp     short loc_1A44
.text:0000000000001A29 ; ---------------------------------------------------------------------------
.text:0000000000001A2B                 align 10h
.text:0000000000001A30
.text:0000000000001A30 loc_1A30:                               ; CODE XREF: main+15B↓j
.text:0000000000001A30                 test    dl, dl
.text:0000000000001A32                 jz      loc_2296
.text:0000000000001A38                 mov     edx, 1
.text:0000000000001A3D
.text:0000000000001A3D loc_1A3D:                               ; CODE XREF: main+173↓j
.text:0000000000001A3D                 add     rax, rdx
.text:0000000000001A40                 add     rbp, 1
.text:0000000000001A44
.text:0000000000001A44 loc_1A44:                               ; CODE XREF: main+139↑j
.text:0000000000001A44                 movzx   edx, byte ptr [rbx+rax]
.text:0000000000001A48                 cmp     dl, 25h ; '%'
.text:0000000000001A4B                 jnz     short loc_1A30
.text:0000000000001A4D                 lea     r14, [rax+1]
.text:0000000000001A51                 lea     rdi, [rbx+r14]  ; s
.text:0000000000001A55                 cmp     byte ptr [rdi], 25h ; '%'
.text:0000000000001A58                 jnz     loc_1E30
.text:0000000000001A5E                 mov     edx, 2
.text:0000000000001A63                 jmp     short loc_1A3D
.text:0000000000001A63 ; ---------------------------------------------------------------------------
.text:0000000000001A65                 align 8
.text:0000000000001A68
.text:0000000000001A68 loc_1A68:                               ; CODE XREF: main+E8↑j
.text:0000000000001A68                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001A6D                 jnz     loc_22C8
.text:0000000000001A73                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A7A                 mov     rcx, cs:Version
.text:0000000000001A81                 lea     r8, aUlrichDrepper ; "Ulrich Drepper"
.text:0000000000001A88                 lea     rdx, unk_8019
.text:0000000000001A8F                 lea     rsi, aSeq       ; "seq"
.text:0000000000001A96                 xor     r9d, r9d
.text:0000000000001A99                 xor     eax, eax
.text:0000000000001A9B                 call    version_etc
.text:0000000000001AA0                 xor     edi, edi        ; status
.text:0000000000001AA2                 call    _exit
.text:0000000000001AA2 ; ---------------------------------------------------------------------------
.text:0000000000001AA7                 align 10h
.text:0000000000001AB0
.text:0000000000001AB0 loc_1AB0:                               ; CODE XREF: main+E2↑j
.text:0000000000001AB0                 mov     rbx, cs:optarg@@GLIBC_2_2_5
.text:0000000000001AB7                 jmp     loc_1986
.text:0000000000001AB7 ; ---------------------------------------------------------------------------
.text:0000000000001ABC                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: main+F1↑j
.text:0000000000001AC0                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000001AC7                 mov     cs:separator, rax
.text:0000000000001ACE                 jmp     loc_1986
.text:0000000000001AD3 ; ---------------------------------------------------------------------------
.text:0000000000001AD3
.text:0000000000001AD3 loc_1AD3:                               ; CODE XREF: main+12F↑j
.text:0000000000001AD3                 xor     r14d, r14d
.text:0000000000001AD6                 xor     ebp, ebp
.text:0000000000001AD8
.text:0000000000001AD8 loc_1AD8:                               ; CODE XREF: main+646↓j
.text:0000000000001AD8                 movsxd  rax, r15d
.text:0000000000001ADB                 lea     rcx, ds:0[rax*8]
.text:0000000000001AE3                 mov     rax, [r12+rax*8]
.text:0000000000001AE7                 mov     qword ptr [rsp+108h+var_F8], rcx
.text:0000000000001AEC                 mov     rdi, rax        ; s
.text:0000000000001AEF                 mov     qword ptr [rsp+108h+var_E8], rax
.text:0000000000001AF4                 call    all_digits_p
.text:0000000000001AF9                 test    al, al
.text:0000000000001AFB                 jz      short loc_1B26
.text:0000000000001AFD                 cmp     dword ptr [rsp+108h+var_108], 1
.text:0000000000001B01                 jz      loc_203B
.text:0000000000001B07                 mov     rcx, qword ptr [rsp+108h+var_F8]
.text:0000000000001B0C                 mov     rsi, [r12+rcx+8]
.text:0000000000001B11                 mov     rdi, rsi        ; s
.text:0000000000001B14                 mov     qword ptr [rsp+108h+var_D8], rsi
.text:0000000000001B19                 call    all_digits_p
.text:0000000000001B1E                 test    al, al
.text:0000000000001B20                 jnz     loc_2005
.text:0000000000001B26
.text:0000000000001B26 loc_1B26:                               ; CODE XREF: main+20B↑j
.text:0000000000001B26                                         ; main+72E↓j ...
.text:0000000000001B26                 movsxd  rdx, r15d
.text:0000000000001B29                 lea     eax, [r15+1]
.text:0000000000001B2D                 lea     rdi, [rsp+108h+var_68]
.text:0000000000001B35                 mov     rsi, [r12+rdx*8]
.text:0000000000001B39                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001B3F                 mov     qword ptr [rsp+108h+var_108], rdi
.text:0000000000001B43                 call    scan_arg
.text:0000000000001B48                 fld     [rsp+108h+var_68]
.text:0000000000001B4F                 movsxd  rdx, cs:optind@@GLIBC_2_2_5
.text:0000000000001B56                 mov     r10, [rsp+108h+var_58]
.text:0000000000001B5E                 mov     eax, [rsp+108h+var_50]
.text:0000000000001B65                 cmp     edx, r13d
.text:0000000000001B68                 fstp    [rsp+108h+var_C8]
.text:0000000000001B6C                 jl      loc_1F50
.text:0000000000001B72                 test    eax, eax
.text:0000000000001B74                 jz      loc_21CD
.text:0000000000001B7A                 mov     ecx, eax
.text:0000000000001B7C                 mov     r12, r10
.text:0000000000001B7F                 xor     r9d, r9d
.text:0000000000001B82                 xor     eax, eax
.text:0000000000001B84                 mov     r10d, 1
.text:0000000000001B8A                 fld     [rsp+108h+var_C8]
.text:0000000000001B8E                 pxor    xmm0, xmm0
.text:0000000000001B92                 movss   [rsp+108h+var_A4], xmm0
.text:0000000000001B98                 fstp    [rsp+108h+var_D8]
.text:0000000000001B9C                 fld1
.text:0000000000001B9E                 fld     st
.text:0000000000001BA0                 fstp    [rsp+108h+var_B8]
.text:0000000000001BA4                 fstp    [rsp+108h+var_C8]
.text:0000000000001BA8                 jmp     short loc_1BB0
.text:0000000000001BAA ; ---------------------------------------------------------------------------
.text:0000000000001BAA
.text:0000000000001BAA loc_1BAA:                               ; CODE XREF: main+6E7↓j
.text:0000000000001BAA                 fstp    st
.text:0000000000001BAC                 jmp     short loc_1BB0
.text:0000000000001BAE ; ---------------------------------------------------------------------------
.text:0000000000001BAE
.text:0000000000001BAE loc_1BAE:                               ; CODE XREF: main+6EF↓j
.text:0000000000001BAE                 fstp    st
.text:0000000000001BB0
.text:0000000000001BB0 loc_1BB0:                               ; CODE XREF: main+2B8↑j
.text:0000000000001BB0                                         ; main+2BC↑j ...
.text:0000000000001BB0                 test    rbx, rbx
.text:0000000000001BB3                 jz      loc_211C
.text:0000000000001BB9                 jmp     short loc_1BBD
.text:0000000000001BBB ; ---------------------------------------------------------------------------
.text:0000000000001BBB
.text:0000000000001BBB loc_1BBB:                               ; CODE XREF: main+91A↓j
.text:0000000000001BBB                 fstp    st
.text:0000000000001BBD
.text:0000000000001BBD loc_1BBD:                               ; CODE XREF: main+2C9↑j
.text:0000000000001BBD                                         ; main+89D↓j ...
.text:0000000000001BBD                 fld     [rsp+108h+var_B8]
.text:0000000000001BC1                 fldz
.text:0000000000001BC3                 fucomip st, st(1)
.text:0000000000001BC5                 fstp    st
.text:0000000000001BC7                 ja      loc_1F3B
.text:0000000000001BCD                 fld     [rsp+108h+var_D8]
.text:0000000000001BD1                 fld     [rsp+108h+var_C8]
.text:0000000000001BD5                 fucomip st, st(1)
.text:0000000000001BD7                 fstp    st
.text:0000000000001BD9                 setnbe  r13b
.text:0000000000001BDD
.text:0000000000001BDD loc_1BDD:                               ; CODE XREF: main+65B↓j
.text:0000000000001BDD                 test    r13b, r13b
.text:0000000000001BE0                 jnz     loc_1E05
.text:0000000000001BE6                 fld     [rsp+108h+var_C8]
.text:0000000000001BEA                 lea     rax, [rsp+108h+s2]
.text:0000000000001BF2                 mov     [rsp+108h+var_A0], rax
.text:0000000000001BF7                 fstp    [rsp+108h+var_E8]
.text:0000000000001BFB                 fld1
.text:0000000000001BFD                 fstp    [rsp+108h+var_F8]
.text:0000000000001C01                 jmp     loc_1D53
.text:0000000000001C01 ; ---------------------------------------------------------------------------
.text:0000000000001C06                 align 10h
.text:0000000000001C10
.text:0000000000001C10 loc_1C10:                               ; CODE XREF: main+4A6↓j
.text:0000000000001C10                 fld     [rsp+108h+var_D8]
.text:0000000000001C14                 fld     [rsp+108h+var_108]
.text:0000000000001C17                 fucomip st, st(1)
.text:0000000000001C19                 fstp    st
.text:0000000000001C1B                 setnbe  r13b
.text:0000000000001C1F
.text:0000000000001C1F loc_1C1F:                               ; CODE XREF: main+4BB↓j
.text:0000000000001C1F                 test    r13b, r13b
.text:0000000000001C22                 jz      loc_1D24
.text:0000000000001C28                 cmp     cs:locale_ok, 0
.text:0000000000001C2F                 jnz     loc_1DC6
.text:0000000000001C35
.text:0000000000001C35 loc_1C35:                               ; CODE XREF: main+4E7↓j
.text:0000000000001C35                 push    qword ptr [rsp+108h+var_108+8]
.text:0000000000001C39                 push    qword ptr [rsp+110h+var_108]
.text:0000000000001C3D                 mov     rsi, rbx
.text:0000000000001C40                 mov     rdi, [rsp+118h+var_A0]
.text:0000000000001C45                 xor     eax, eax
.text:0000000000001C47                 call    gzprintf
.text:0000000000001C4C                 cmp     cs:locale_ok, 0
.text:0000000000001C53                 movsxd  r12, eax
.text:0000000000001C56                 pop     rsi
.text:0000000000001C57                 pop     rdi
.text:0000000000001C58                 jnz     loc_1DB0
.text:0000000000001C5E
.text:0000000000001C5E loc_1C5E:                               ; CODE XREF: main+4D1↓j
.text:0000000000001C5E                 test    r12d, r12d
.text:0000000000001C61                 js      loc_233A
.text:0000000000001C67                 mov     rax, [rsp+108h+s2]
.text:0000000000001C6F                 sub     r12, r14
.text:0000000000001C72                 lea     rcx, cl_strtold
.text:0000000000001C79                 lea     rdx, [rsp+108h+var_78]
.text:0000000000001C81                 xor     esi, esi
.text:0000000000001C83                 mov     byte ptr [rax+r12], 0
.text:0000000000001C88                 mov     rdi, [rsp+108h+s2]
.text:0000000000001C90                 add     rdi, rbp
.text:0000000000001C93                 call    xstrtold
.text:0000000000001C98                 test    al, al
.text:0000000000001C9A                 jz      loc_1DDC
.text:0000000000001CA0                 fld     [rsp+108h+var_D8]
.text:0000000000001CA4                 fld     [rsp+108h+var_78]
.text:0000000000001CAB                 fucomip st, st(1)
.text:0000000000001CAD                 fstp    st
.text:0000000000001CAF                 jp      loc_1DDC
.text:0000000000001CB5                 jnz     loc_1DDC
.text:0000000000001CBB                 mov     [rsp+108h+s1], 0
.text:0000000000001CC7                 lea     rdi, [rsp+108h+s1]
.text:0000000000001CCF                 push    qword ptr [rsp+108h+var_E8+8]
.text:0000000000001CD3                 push    qword ptr [rsp+110h+var_E8]
.text:0000000000001CD7                 xor     eax, eax
.text:0000000000001CD9                 mov     rsi, rbx
.text:0000000000001CDC                 call    gzprintf
.text:0000000000001CE1                 test    eax, eax
.text:0000000000001CE3                 pop     rdx
.text:0000000000001CE4                 pop     rcx
.text:0000000000001CE5                 js      loc_233A
.text:0000000000001CEB                 mov     r12, [rsp+108h+s1]
.text:0000000000001CF3                 mov     rsi, [rsp+108h+s2] ; s2
.text:0000000000001CFB                 mov     rdi, r12        ; s1
.text:0000000000001CFE                 call    _strcmp
.text:0000000000001D03                 mov     rdi, r12        ; ptr
.text:0000000000001D06                 mov     r15d, eax
.text:0000000000001D09                 call    _free
.text:0000000000001D0E                 mov     rdi, [rsp+108h+s2] ; ptr
.text:0000000000001D16                 call    _free
.text:0000000000001D1B                 test    r15d, r15d
.text:0000000000001D1E                 jz      loc_1DE9
.text:0000000000001D24
.text:0000000000001D24 loc_1D24:                               ; CODE XREF: main+332↑j
.text:0000000000001D24                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001D2B                 mov     rdi, cs:separator ; s
.text:0000000000001D32                 call    _fputs_unlocked
.text:0000000000001D37                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D3A                 jz      loc_2291
.text:0000000000001D40                 fld     [rsp+108h+var_F8]
.text:0000000000001D44                 fld1
.text:0000000000001D46                 faddp   st(1), st
.text:0000000000001D48                 fstp    [rsp+108h+var_F8]
.text:0000000000001D4C                 fld     [rsp+108h+var_108]
.text:0000000000001D4F                 fstp    [rsp+108h+var_E8]
.text:0000000000001D53
.text:0000000000001D53 loc_1D53:                               ; CODE XREF: main+311↑j
.text:0000000000001D53                 push    qword ptr [rsp+108h+var_E8+8]
.text:0000000000001D57                 push    qword ptr [rsp+110h+var_E8]
.text:0000000000001D5B                 xor     eax, eax
.text:0000000000001D5D                 mov     rsi, rbx
.text:0000000000001D60                 mov     edi, 1
.text:0000000000001D65                 call    ___printf_chk
.text:0000000000001D6A                 test    eax, eax
.text:0000000000001D6C                 pop     r8
.text:0000000000001D6E                 pop     r9
.text:0000000000001D70                 js      loc_2291
.text:0000000000001D76                 test    r13b, r13b
.text:0000000000001D79                 jnz     short loc_1DE9
.text:0000000000001D7B                 fld     [rsp+108h+var_F8]
.text:0000000000001D7F                 fld     [rsp+108h+var_B8]
.text:0000000000001D83                 fmul    st(1), st
.text:0000000000001D85                 fld     [rsp+108h+var_C8]
.text:0000000000001D89                 faddp   st(2), st
.text:0000000000001D8B                 fxch    st(1)
.text:0000000000001D8D                 fstp    [rsp+108h+var_108]
.text:0000000000001D90                 fldz
.text:0000000000001D92                 fucomip st, st(1)
.text:0000000000001D94                 fstp    st
.text:0000000000001D96                 jbe     loc_1C10
.text:0000000000001D9C                 fld     [rsp+108h+var_108]
.text:0000000000001D9F                 fld     [rsp+108h+var_D8]
.text:0000000000001DA3                 fucomip st, st(1)
.text:0000000000001DA5                 fstp    st
.text:0000000000001DA7                 setnbe  r13b
.text:0000000000001DAB                 jmp     loc_1C1F
.text:0000000000001DB0 ; ---------------------------------------------------------------------------
.text:0000000000001DB0
.text:0000000000001DB0 loc_1DB0:                               ; CODE XREF: main+368↑j
.text:0000000000001DB0                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001DB7                 mov     edi, 1          ; category
.text:0000000000001DBC                 call    _setlocale
.text:0000000000001DC1                 jmp     loc_1C5E
.text:0000000000001DC6 ; ---------------------------------------------------------------------------
.text:0000000000001DC6
.text:0000000000001DC6 loc_1DC6:                               ; CODE XREF: main+33F↑j
.text:0000000000001DC6                 lea     rsi, locale     ; "C"
.text:0000000000001DCD                 mov     edi, 1          ; category
.text:0000000000001DD2                 call    _setlocale
.text:0000000000001DD7                 jmp     loc_1C35
.text:0000000000001DDC ; ---------------------------------------------------------------------------
.text:0000000000001DDC
.text:0000000000001DDC loc_1DDC:                               ; CODE XREF: main+3AA↑j
.text:0000000000001DDC                                         ; main+3BF↑j ...
.text:0000000000001DDC                 mov     rdi, [rsp+108h+s2] ; ptr
.text:0000000000001DE4                 call    _free
.text:0000000000001DE9
.text:0000000000001DE9 loc_1DE9:                               ; CODE XREF: main+42E↑j
.text:0000000000001DE9                                         ; main+489↑j
.text:0000000000001DE9                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001DF0                 lea     rdi, terminator ; "\n"
.text:0000000000001DF7                 call    _fputs_unlocked
.text:0000000000001DFC                 add     eax, 1
.text:0000000000001DFF                 jz      loc_2291
.text:0000000000001E05
.text:0000000000001E05 loc_1E05:                               ; CODE XREF: main+2F0↑j
.text:0000000000001E05                                         ; main+7A0↓j ...
.text:0000000000001E05                 xor     eax, eax
.text:0000000000001E07                 mov     rcx, [rsp+108h+var_40]
.text:0000000000001E0F                 xor     rcx, fs:28h
.text:0000000000001E18                 jnz     loc_237D
.text:0000000000001E1E                 add     rsp, 0D8h
.text:0000000000001E25                 pop     rbx
.text:0000000000001E26                 pop     rbp
.text:0000000000001E27                 pop     r12
.text:0000000000001E29                 pop     r13
.text:0000000000001E2B                 pop     r14
.text:0000000000001E2D                 pop     r15
.text:0000000000001E2F                 retn
.text:0000000000001E30 ; ---------------------------------------------------------------------------
.text:0000000000001E30
.text:0000000000001E30 loc_1E30:                               ; CODE XREF: main+168↑j
.text:0000000000001E30                 lea     rsi, accept     ; "-+#0 '"
.text:0000000000001E37                 call    _strspn
.text:0000000000001E3C                 add     r14, rax
.text:0000000000001E3F                 lea     rsi, a0123456789 ; "0123456789"
.text:0000000000001E46                 lea     rdi, [rbx+r14]  ; s
.text:0000000000001E4A                 call    _strspn
.text:0000000000001E4F                 lea     r15, [r14+rax]
.text:0000000000001E53                 cmp     byte ptr [rbx+r15], 2Eh ; '.'
.text:0000000000001E58                 jnz     short loc_1E71
.text:0000000000001E5A                 add     r15, 1
.text:0000000000001E5E                 lea     rsi, a0123456789 ; "0123456789"
.text:0000000000001E65                 lea     rdi, [rbx+r15]  ; s
.text:0000000000001E69                 call    _strspn
.text:0000000000001E6E                 add     r15, rax
.text:0000000000001E71
.text:0000000000001E71 loc_1E71:                               ; CODE XREF: main+568↑j
.text:0000000000001E71                 xor     edi, edi
.text:0000000000001E73                 cmp     byte ptr [rbx+r15], 4Ch ; 'L'
.text:0000000000001E78                 setz    dil
.text:0000000000001E7C                 lea     r14, [r15+rdi]
.text:0000000000001E80                 lea     rax, [rbx+r14]
.text:0000000000001E84                 mov     qword ptr [rsp+108h+var_E8], rax
.text:0000000000001E89                 movsx   eax, byte ptr [rax]
.text:0000000000001E8C                 test    al, al
.text:0000000000001E8E                 jz      loc_2506
.text:0000000000001E94                 lea     rdi, s          ; "efgaEFGA"
.text:0000000000001E9B                 mov     esi, eax        ; c
.text:0000000000001E9D                 mov     dword ptr [rsp+108h+var_F8], eax
.text:0000000000001EA1                 call    _strchr
.text:0000000000001EA6                 lea     rdi, [r14+1]
.text:0000000000001EAA                 xor     r14d, r14d
.text:0000000000001EAD                 test    rax, rax
.text:0000000000001EB0                 jnz     short loc_1ED0
.text:0000000000001EB2                 jmp     loc_24CF
.text:0000000000001EB2 ; ---------------------------------------------------------------------------
.text:0000000000001EB7                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: main+5E6↓j
.text:0000000000001EC0                 test    al, al
.text:0000000000001EC2                 jz      short loc_1EEA
.text:0000000000001EC4                 mov     eax, 1
.text:0000000000001EC9
.text:0000000000001EC9 loc_1EC9:                               ; CODE XREF: main+5F8↓j
.text:0000000000001EC9                 add     rdi, rax
.text:0000000000001ECC                 add     r14, 1
.text:0000000000001ED0
.text:0000000000001ED0 loc_1ED0:                               ; CODE XREF: main+5C0↑j
.text:0000000000001ED0                 movzx   eax, byte ptr [rbx+rdi]
.text:0000000000001ED4                 cmp     al, 25h ; '%'
.text:0000000000001ED6                 jnz     short loc_1EC0
.text:0000000000001ED8                 cmp     byte ptr [rbx+rdi+1], 25h ; '%'
.text:0000000000001EDD                 jnz     loc_249D
.text:0000000000001EE3                 mov     eax, 2
.text:0000000000001EE8                 jmp     short loc_1EC9
.text:0000000000001EEA ; ---------------------------------------------------------------------------
.text:0000000000001EEA
.text:0000000000001EEA loc_1EEA:                               ; CODE XREF: main+5D2↑j
.text:0000000000001EEA                 add     rdi, 2
.text:0000000000001EEE                 call    xmalloc
.text:0000000000001EF3                 mov     rdx, r15        ; n
.text:0000000000001EF6                 mov     rsi, rbx        ; src
.text:0000000000001EF9                 mov     rdi, rax        ; dest
.text:0000000000001EFC                 call    _memcpy
.text:0000000000001F01                 mov     rsi, qword ptr [rsp+108h+var_E8] ; src
.text:0000000000001F06                 lea     rdi, [rax+r15+1] ; dest
.text:0000000000001F0B                 mov     byte ptr [rax+r15], 4Ch ; 'L'
.text:0000000000001F10                 mov     qword ptr [rsp+108h+var_F8], rax
.text:0000000000001F15                 call    _strcpy
.text:0000000000001F1A                 cmp     cs:equal_width, 0
.text:0000000000001F21                 jnz     loc_2472
.text:0000000000001F27                 mov     r8, qword ptr [rsp+108h+var_F8]
.text:0000000000001F2C                 mov     r15d, cs:optind@@GLIBC_2_2_5
.text:0000000000001F33                 mov     rbx, r8
.text:0000000000001F36                 jmp     loc_1AD8
.text:0000000000001F3B ; ---------------------------------------------------------------------------
.text:0000000000001F3B
.text:0000000000001F3B loc_1F3B:                               ; CODE XREF: main+2D7↑j
.text:0000000000001F3B                 fld     [rsp+108h+var_C8]
.text:0000000000001F3F                 fld     [rsp+108h+var_D8]
.text:0000000000001F43                 fucomip st, st(1)
.text:0000000000001F45                 fstp    st
.text:0000000000001F47                 setnbe  r13b
.text:0000000000001F4B                 jmp     loc_1BDD
.text:0000000000001F50 ; ---------------------------------------------------------------------------
.text:0000000000001F50
.text:0000000000001F50 loc_1F50:                               ; CODE XREF: main+27C↑j
.text:0000000000001F50                 mov     rsi, [r12+rdx*8]
.text:0000000000001F54                 mov     rdi, qword ptr [rsp+108h+var_108]
.text:0000000000001F58                 lea     ecx, [rdx+1]
.text:0000000000001F5B                 mov     dword ptr [rsp+108h+var_E8], eax
.text:0000000000001F5F                 mov     qword ptr [rsp+108h+var_F8], r10
.text:0000000000001F64                 mov     cs:optind@@GLIBC_2_2_5, ecx
.text:0000000000001F6A                 call    scan_arg
.text:0000000000001F6F                 fld     [rsp+108h+var_68]
.text:0000000000001F76                 mov     ecx, cs:optind@@GLIBC_2_2_5
.text:0000000000001F7C                 mov     r9d, [rsp+108h+var_50]
.text:0000000000001F84                 mov     r10, qword ptr [rsp+108h+var_F8]
.text:0000000000001F89                 mov     eax, dword ptr [rsp+108h+var_E8]
.text:0000000000001F8D                 cmp     ecx, r13d
.text:0000000000001F90                 fld     st
.text:0000000000001F92                 fstp    [rsp+108h+var_B8]
.text:0000000000001F96                 jl      loc_20A2
.text:0000000000001F9C                 mov     ecx, r9d
.text:0000000000001F9F                 xor     r9d, r9d
.text:0000000000001FA2                 mov     r12, [rsp+108h+var_58]
.text:0000000000001FAA                 fstp    [rsp+108h+var_D8]
.text:0000000000001FAE                 pxor    xmm1, xmm1
.text:0000000000001FB2                 fld1
.text:0000000000001FB4                 movss   [rsp+108h+var_A4], xmm1
.text:0000000000001FBA                 fstp    [rsp+108h+var_B8]
.text:0000000000001FBE
.text:0000000000001FBE loc_1FBE:                               ; CODE XREF: main+827↓j
.text:0000000000001FBE                 mov     edi, 0
.text:0000000000001FC3                 fldz
.text:0000000000001FC5                 fld     [rsp+108h+var_C8]
.text:0000000000001FC9                 fmul    st, st(1)
.text:0000000000001FCB                 fucomip st, st(1)
.text:0000000000001FCD                 setnp   sil
.text:0000000000001FD1                 cmovnz  esi, edi
.text:0000000000001FD4                 test    sil, sil
.text:0000000000001FD7                 jz      loc_1BAA
.text:0000000000001FDD                 test    eax, eax
.text:0000000000001FDF                 jnz     loc_1BAE
.text:0000000000001FE5                 mov     eax, ecx
.text:0000000000001FE7                 or      eax, r9d
.text:0000000000001FEA                 jz      loc_22DA
.text:0000000000001FF0                 fstp    st
.text:0000000000001FF2                 xor     eax, eax
.text:0000000000001FF4                 jmp     loc_1BB0
.text:0000000000001FF9 ; ---------------------------------------------------------------------------
.text:0000000000001FF9
.text:0000000000001FF9 loc_1FF9:                               ; CODE XREF: main+D9↑j
.text:0000000000001FF9                 mov     r15d, cs:optind@@GLIBC_2_2_5
.text:0000000000002000                 jmp     loc_1A03
.text:0000000000002005 ; ---------------------------------------------------------------------------
.text:0000000000002005
.text:0000000000002005 loc_2005:                               ; CODE XREF: main+230↑j
.text:0000000000002005                 cmp     dword ptr [rsp+108h+var_108], 3
.text:0000000000002009                 jnz     short loc_203B
.text:000000000000200B                 mov     rsi, qword ptr [rsp+108h+var_D8] ; s2
.text:0000000000002010                 lea     rdi, a831+3     ; s1
.text:0000000000002017                 call    _strcmp
.text:000000000000201C                 test    eax, eax
.text:000000000000201E                 jnz     loc_1B26
.text:0000000000002024                 mov     rcx, qword ptr [rsp+108h+var_F8]
.text:0000000000002029                 mov     rdi, [r12+rcx+10h] ; s
.text:000000000000202E                 call    all_digits_p
.text:0000000000002033                 test    al, al
.text:0000000000002035                 jz      loc_1B26
.text:000000000000203B
.text:000000000000203B loc_203B:                               ; CODE XREF: main+211↑j
.text:000000000000203B                                         ; main+719↑j
.text:000000000000203B                 cmp     cs:equal_width, 1
.text:0000000000002042                 jz      loc_1B26
.text:0000000000002048                 test    rbx, rbx
.text:000000000000204B                 jnz     loc_1B26
.text:0000000000002051                 mov     rdi, cs:separator
.text:0000000000002058                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000205C                 xor     eax, eax
.text:000000000000205E                 repne scasb
.text:0000000000002060                 cmp     rcx, 0FFFFFFFFFFFFFFFDh
.text:0000000000002064                 jnz     loc_1B26
.text:000000000000206A                 mov     ecx, dword ptr [rsp+108h+var_108]
.text:000000000000206D                 lea     rax, a831+3     ; "1"
.text:0000000000002074                 cmp     ecx, 1
.text:0000000000002077                 cmovnz  rax, qword ptr [rsp+108h+var_E8]
.text:000000000000207D                 mov     rdi, rax        ; src
.text:0000000000002080                 lea     eax, [rcx+r15-1]
.text:0000000000002085                 mov     rsi, [r12+rax*8] ; void *
.text:0000000000002089                 call    seq_fast
.text:000000000000208E                 test    al, al
.text:0000000000002090                 jnz     loc_1E05
.text:0000000000002096                 mov     r15d, cs:optind@@GLIBC_2_2_5
.text:000000000000209D                 jmp     loc_1B26
.text:00000000000020A2 ; ---------------------------------------------------------------------------
.text:00000000000020A2
.text:00000000000020A2 loc_20A2:                               ; CODE XREF: main+6A6↑j
.text:00000000000020A2                 fstp    st
.text:00000000000020A4                 fldz
.text:00000000000020A6                 pxor    xmm2, xmm2
.text:00000000000020AA                 movsxd  rsi, ecx
.text:00000000000020AD                 fld     [rsp+108h+var_B8]
.text:00000000000020B1                 lea     rdi, ds:0[rsi*8]
.text:00000000000020B9                 movss   [rsp+108h+var_A4], xmm2
.text:00000000000020BF                 fucomip st, st(1)
.text:00000000000020C1                 fstp    st
.text:00000000000020C3                 jp      short loc_20CB
.text:00000000000020C5                 jz      loc_2454
.text:00000000000020CB
.text:00000000000020CB loc_20CB:                               ; CODE XREF: main+7D3↑j
.text:00000000000020CB                 mov     rsi, [r12+rsi*8]
.text:00000000000020CF                 mov     rdi, qword ptr [rsp+108h+var_108]
.text:00000000000020D3                 add     ecx, 1
.text:00000000000020D6                 mov     dword ptr [rsp+108h+var_A0], eax
.text:00000000000020DA                 mov     qword ptr [rsp+108h+var_E8], r10
.text:00000000000020DF                 mov     dword ptr [rsp+108h+var_F8], r9d
.text:00000000000020E4                 mov     cs:optind@@GLIBC_2_2_5, ecx
.text:00000000000020EA                 call    scan_arg
.text:00000000000020EF                 fld     [rsp+108h+var_68]
.text:00000000000020F6                 mov     r12, [rsp+108h+var_58]
.text:00000000000020FE                 mov     ecx, [rsp+108h+var_50]
.text:0000000000002105                 mov     eax, dword ptr [rsp+108h+var_A0]
.text:0000000000002109                 mov     r10, qword ptr [rsp+108h+var_E8]
.text:000000000000210E                 mov     r9d, dword ptr [rsp+108h+var_F8]
.text:0000000000002113                 fstp    [rsp+108h+var_D8]
.text:0000000000002117                 jmp     loc_1FBE
.text:000000000000211C ; ---------------------------------------------------------------------------
.text:000000000000211C
.text:000000000000211C loc_211C:                               ; CODE XREF: main+2C3↑j
.text:000000000000211C                 cmp     eax, r9d
.text:000000000000211F                 cmovge  r9d, eax
.text:0000000000002123                 cmp     ecx, 7FFFFFFFh
.text:0000000000002129                 jz      loc_21C1
.text:000000000000212F                 cmp     r9d, 7FFFFFFFh
.text:0000000000002136                 jz      loc_21C1
.text:000000000000213C
.text:000000000000213C loc_213C:                               ; CODE XREF: main+B39↓j
.text:000000000000213C                 cmp     cs:equal_width, 0
.text:0000000000002143                 jz      loc_222E
.text:0000000000002149                 mov     edx, r9d
.text:000000000000214C                 sub     edx, eax
.text:000000000000214E                 movsxd  rdx, edx
.text:0000000000002151                 add     r10, rdx
.text:0000000000002154                 mov     edx, r9d
.text:0000000000002157                 sub     edx, ecx
.text:0000000000002159                 movsxd  rdx, edx
.text:000000000000215C                 add     r12, rdx
.text:000000000000215F                 test    ecx, ecx
.text:0000000000002161                 jz      loc_225C
.text:0000000000002167                 test    r9d, r9d
.text:000000000000216A                 jz      loc_2288
.text:0000000000002170                 test    eax, eax
.text:0000000000002172                 jnz     short loc_2178
.text:0000000000002174
.text:0000000000002174 loc_2174:                               ; CODE XREF: main+97B↓j
.text:0000000000002174                 add     r10, 1
.text:0000000000002178
.text:0000000000002178 loc_2178:                               ; CODE XREF: main+882↑j
.text:0000000000002178                                         ; main+96F↓j ...
.text:0000000000002178                 cmp     r10, r12
.text:000000000000217B                 lea     rbx, aLg        ; "%Lg"
.text:0000000000002182                 cmovb   r10, r12
.text:0000000000002186                 cmp     r10, 7FFFFFFFh
.text:000000000000218D                 ja      loc_1BBD
.text:0000000000002193                 lea     rcx, a0DDlf     ; "%%0%d.%dLf"
.text:000000000000219A                 lea     rdi, format_buf_6939
.text:00000000000021A1                 mov     r8d, r10d
.text:00000000000021A4                 mov     edx, 1Ch
.text:00000000000021A9                 mov     esi, 1
.text:00000000000021AE                 xor     eax, eax
.text:00000000000021B0                 call    ___sprintf_chk
.text:00000000000021B5                 lea     rbx, format_buf_6939
.text:00000000000021BC                 jmp     loc_1BBD
.text:00000000000021C1 ; ---------------------------------------------------------------------------
.text:00000000000021C1
.text:00000000000021C1 loc_21C1:                               ; CODE XREF: main+839↑j
.text:00000000000021C1                                         ; main+846↑j
.text:00000000000021C1                 lea     rbx, aLg        ; "%Lg"
.text:00000000000021C8                 jmp     loc_1BBD
.text:00000000000021CD ; ---------------------------------------------------------------------------
.text:00000000000021CD
.text:00000000000021CD loc_21CD:                               ; CODE XREF: main+284↑j
.text:00000000000021CD                 fld     [rsp+108h+var_C8]
.text:00000000000021D1                 mov     r12, r10
.text:00000000000021D4                 mov     r10d, 1
.text:00000000000021DA                 pxor    xmm3, xmm3
.text:00000000000021DE                 movss   [rsp+108h+var_A4], xmm3
.text:00000000000021E4                 fstp    [rsp+108h+var_D8]
.text:00000000000021E8                 fld1
.text:00000000000021EA                 fld     st
.text:00000000000021EC                 fstp    [rsp+108h+var_B8]
.text:00000000000021F0                 fstp    [rsp+108h+var_C8]
.text:00000000000021F4
.text:00000000000021F4 loc_21F4:                               ; CODE XREF: main+A07↓j
.text:00000000000021F4                 fldz
.text:00000000000021F6                 fld     [rsp+108h+var_D8]
.text:00000000000021FA                 fucomip st, st(1)
.text:00000000000021FC                 jb      short loc_2276
.text:00000000000021FE                 cmp     cs:equal_width, 0
.text:0000000000002205                 jnz     short loc_227A
.text:0000000000002207                 test    rbx, rbx
.text:000000000000220A                 jnz     loc_1BBB
.text:0000000000002210                 mov     rdi, cs:separator
.text:0000000000002217                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000221B                 xor     eax, eax
.text:000000000000221D                 xor     r9d, r9d
.text:0000000000002220                 repne scasb
.text:0000000000002222                 cmp     rcx, 0FFFFFFFFFFFFFFFDh
.text:0000000000002226                 jz      loc_2382
.text:000000000000222C                 fstp    st
.text:000000000000222E
.text:000000000000222E loc_222E:                               ; CODE XREF: main+853↑j
.text:000000000000222E                 lea     rcx, aDlf       ; "%%.%dLf"
.text:0000000000002235                 lea     rdi, format_buf_6939
.text:000000000000223C                 mov     r8d, r9d
.text:000000000000223F                 mov     edx, 1Ch
.text:0000000000002244                 mov     esi, 1
.text:0000000000002249                 xor     eax, eax
.text:000000000000224B                 call    ___sprintf_chk
.text:0000000000002250                 lea     rbx, format_buf_6939
.text:0000000000002257                 jmp     loc_1BBD
.text:000000000000225C ; ---------------------------------------------------------------------------
.text:000000000000225C
.text:000000000000225C loc_225C:                               ; CODE XREF: main+871↑j
.text:000000000000225C                 test    r9d, r9d
.text:000000000000225F                 jz      loc_2178
.text:0000000000002265                 add     r12, 1
.text:0000000000002269                 test    eax, eax
.text:000000000000226B                 jz      loc_2174
.text:0000000000002271                 jmp     loc_2178
.text:0000000000002276 ; ---------------------------------------------------------------------------
.text:0000000000002276
.text:0000000000002276 loc_2276:                               ; CODE XREF: main+90C↑j
.text:0000000000002276                 fstp    st
.text:0000000000002278                 jmp     short loc_227C
.text:000000000000227A ; ---------------------------------------------------------------------------
.text:000000000000227A
.text:000000000000227A loc_227A:                               ; CODE XREF: main+915↑j
.text:000000000000227A                 fstp    st
.text:000000000000227C
.text:000000000000227C loc_227C:                               ; CODE XREF: main+988↑j
.text:000000000000227C                 xor     r9d, r9d
.text:000000000000227F                 xor     eax, eax
.text:0000000000002281                 xor     ecx, ecx
.text:0000000000002283                 jmp     loc_1BB0
.text:0000000000002288 ; ---------------------------------------------------------------------------
.text:0000000000002288
.text:0000000000002288 loc_2288:                               ; CODE XREF: main+87A↑j
.text:0000000000002288                 sub     r12, 1
.text:000000000000228C                 jmp     loc_2178
.text:0000000000002291 ; ---------------------------------------------------------------------------
.text:0000000000002291
.text:0000000000002291 loc_2291:                               ; CODE XREF: main+44A↑j
.text:0000000000002291                                         ; main+480↑j ...
.text:0000000000002291                 call    io_error
.text:0000000000002296
.text:0000000000002296 loc_2296:                               ; CODE XREF: main+142↑j
.text:0000000000002296                 mov     rdi, rbx
.text:0000000000002299                 call    quote
.text:000000000000229E                 lea     rsi, msgid      ; "format %s has no %% directive"
.text:00000000000022A5                 mov     rbx, rax
.text:00000000000022A8                 mov     edx, 5          ; category
.text:00000000000022AD                 xor     edi, edi        ; domainname
.text:00000000000022AF                 call    _dcgettext
.text:00000000000022B4                 mov     rcx, rbx
.text:00000000000022B7                 mov     rdx, rax        ; format
.text:00000000000022BA                 xor     esi, esi        ; errnum
.text:00000000000022BC                 mov     edi, 1          ; status
.text:00000000000022C1                 xor     eax, eax
.text:00000000000022C3                 call    _error
.text:00000000000022C8
.text:00000000000022C8 loc_22C8:                               ; CODE XREF: main+17D↑j
.text:00000000000022C8                 cmp     eax, 0FFFFFF7Eh
.text:00000000000022CD                 jnz     loc_2373
.text:00000000000022D3                 xor     edi, edi        ; status
.text:00000000000022D5                 call    usage
.text:00000000000022DA ; ---------------------------------------------------------------------------
.text:00000000000022DA
.text:00000000000022DA loc_22DA:                               ; CODE XREF: main+6FA↑j
.text:00000000000022DA                 fld1
.text:00000000000022DC                 fld     [rsp+108h+var_B8]
.text:00000000000022E0                 fucomip st, st(1)
.text:00000000000022E2                 fstp    st
.text:00000000000022E4                 setnp   dl
.text:00000000000022E7                 cmovz   edi, edx
.text:00000000000022EA                 test    dil, dil
.text:00000000000022ED                 jz      short loc_22FF
.text:00000000000022EF                 fld     [rsp+108h+var_C8]
.text:00000000000022F3                 fucomip st, st(1)
.text:00000000000022F5                 fstp    st
.text:00000000000022F7                 jnb     loc_21F4
.text:00000000000022FD                 jmp     short loc_2301
.text:00000000000022FF ; ---------------------------------------------------------------------------
.text:00000000000022FF
.text:00000000000022FF loc_22FF:                               ; CODE XREF: main+9FD↑j
.text:00000000000022FF                 fstp    st
.text:0000000000002301
.text:0000000000002301 loc_2301:                               ; CODE XREF: main+A0D↑j
.text:0000000000002301                 xor     r9d, r9d
.text:0000000000002304                 xor     ecx, ecx
.text:0000000000002306                 jmp     loc_1BB0
.text:000000000000230B ; ---------------------------------------------------------------------------
.text:000000000000230B
.text:000000000000230B loc_230B:                               ; CODE XREF: main+AD2↓j
.text:000000000000230B                 lea     rdi, [rsp+108h+var_90]
.text:0000000000002310                 lea     rsi, a0Lf       ; "%0.Lf"
.text:0000000000002317                 push    qword ptr [rsp+108h+var_D8+8]
.text:000000000000231B                 push    qword ptr [rsp+110h+var_D8]
.text:000000000000231F                 xor     eax, eax
.text:0000000000002321                 call    gzprintf
.text:0000000000002326                 pop     r10
.text:0000000000002328                 test    eax, eax
.text:000000000000232A                 pop     r11
.text:000000000000232C                 mov     r10, qword ptr [rsp+108h+var_108]
.text:0000000000002330                 jns     loc_23DD
.text:0000000000002336                 jmp     short loc_233A
.text:0000000000002338 ; ---------------------------------------------------------------------------
.text:0000000000002338
.text:0000000000002338 loc_2338:                               ; CODE XREF: main+AC0↓j
.text:0000000000002338                 fstp    st
.text:000000000000233A
.text:000000000000233A loc_233A:                               ; CODE XREF: main+371↑j
.text:000000000000233A                                         ; main+3F5↑j ...
.text:000000000000233A                 call    xalloc_die
.text:000000000000233F ; ---------------------------------------------------------------------------
.text:000000000000233F
.text:000000000000233F loc_233F:                               ; CODE XREF: main+126↑j
.text:000000000000233F                 movsxd  rdx, r15d
.text:0000000000002342                 mov     rdi, [r12+rdx*8+18h]
.text:0000000000002347                 call    quote
.text:000000000000234C                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000002353                 mov     rbx, rax
.text:0000000000002356                 mov     edx, 5          ; category
.text:000000000000235B
.text:000000000000235B loc_235B:                               ; CODE XREF: main+B7D↓j
.text:000000000000235B                 xor     edi, edi        ; domainname
.text:000000000000235D                 call    _dcgettext
.text:0000000000002362                 mov     rcx, rbx
.text:0000000000002365                 mov     rdx, rax        ; format
.text:0000000000002368                 xor     esi, esi        ; errnum
.text:000000000000236A                 xor     edi, edi        ; status
.text:000000000000236C                 xor     eax, eax
.text:000000000000236E                 call    _error
.text:0000000000002373
.text:0000000000002373 loc_2373:                               ; CODE XREF: main+FA↑j
.text:0000000000002373                                         ; main+9DD↑j ...
.text:0000000000002373                 mov     edi, 1          ; status
.text:0000000000002378                 call    usage
.text:000000000000237D ; ---------------------------------------------------------------------------
.text:000000000000237D
.text:000000000000237D loc_237D:                               ; CODE XREF: main+528↑j
.text:000000000000237D                 call    ___stack_chk_fail
.text:0000000000002382 ; ---------------------------------------------------------------------------
.text:0000000000002382
.text:0000000000002382 loc_2382:                               ; CODE XREF: main+936↑j
.text:0000000000002382                 fstp    [rsp+108h+var_F8]
.text:0000000000002386                 mov     qword ptr [rsp+108h+var_108], r10
.text:000000000000238A                 lea     rdi, [rsp+108h+ptr]
.text:000000000000238F                 lea     rsi, a0Lf       ; "%0.Lf"
.text:0000000000002396                 push    qword ptr [rsp+108h+var_C8+8]
.text:000000000000239A                 push    qword ptr [rsp+110h+var_C8]
.text:000000000000239E                 call    gzprintf
.text:00000000000023A3                 pop     rbx
.text:00000000000023A4                 pop     r13
.text:00000000000023A6                 test    eax, eax
.text:00000000000023A8                 mov     r10, qword ptr [rsp+108h+var_108]
.text:00000000000023AC                 fld     [rsp+108h+var_F8]
.text:00000000000023B0                 js      short loc_2338
.text:00000000000023B2                 mov     qword ptr [rsp+108h+var_108], r10
.text:00000000000023B6                 fld     [rsp+108h+var_D8]
.text:00000000000023BA                 fmul    st, st(1)
.text:00000000000023BC                 fucomip st, st(1)
.text:00000000000023BE                 fstp    st
.text:00000000000023C0                 jp      short loc_23C8
.text:00000000000023C2                 jz      loc_230B
.text:00000000000023C8
.text:00000000000023C8 loc_23C8:                               ; CODE XREF: main+AD0↑j
.text:00000000000023C8                 lea     rdi, aInf       ; "inf"
.text:00000000000023CF                 call    xstrdup
.text:00000000000023D4                 mov     r10, qword ptr [rsp+108h+var_108]
.text:00000000000023D8                 mov     [rsp+108h+var_90], rax
.text:00000000000023DD
.text:00000000000023DD loc_23DD:                               ; CODE XREF: main+A40↑j
.text:00000000000023DD                 mov     rdi, [rsp+108h+ptr] ; src
.text:00000000000023E2                 cmp     byte ptr [rdi], 2Dh ; '-'
.text:00000000000023E5                 jz      short loc_240B
.text:00000000000023E7                 mov     rsi, [rsp+108h+var_90] ; void *
.text:00000000000023EC                 cmp     byte ptr [rsi], 2Dh ; '-'
.text:00000000000023EF                 jz      short loc_240B
.text:00000000000023F1                 mov     qword ptr [rsp+108h+var_108], r10
.text:00000000000023F5                 call    seq_fast
.text:00000000000023FA                 test    al, al
.text:00000000000023FC                 jnz     loc_1E05
.text:0000000000002402                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:0000000000002407                 mov     r10, qword ptr [rsp+108h+var_108]
.text:000000000000240B
.text:000000000000240B loc_240B:                               ; CODE XREF: main+AF5↑j
.text:000000000000240B                                         ; main+AFF↑j
.text:000000000000240B                 mov     qword ptr [rsp+108h+var_108], r10
.text:000000000000240F                 call    _free
.text:0000000000002414                 mov     rdi, [rsp+108h+var_90] ; ptr
.text:0000000000002419                 call    _free
.text:000000000000241E                 xor     eax, eax
.text:0000000000002420                 xor     ecx, ecx
.text:0000000000002422                 xor     r9d, r9d
.text:0000000000002425                 mov     r10, qword ptr [rsp+108h+var_108]
.text:0000000000002429                 jmp     loc_213C
.text:000000000000242E ; ---------------------------------------------------------------------------
.text:000000000000242E
.text:000000000000242E loc_242E:                               ; CODE XREF: main+11C↑j
.text:000000000000242E                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000002435                 xor     edi, edi        ; domainname
.text:0000000000002437                 mov     edx, 5          ; category
.text:000000000000243C                 call    _dcgettext
.text:0000000000002441                 xor     esi, esi        ; errnum
.text:0000000000002443                 mov     rdx, rax        ; format
.text:0000000000002446                 xor     edi, edi        ; status
.text:0000000000002448                 xor     eax, eax
.text:000000000000244A                 call    _error
.text:000000000000244F                 jmp     loc_2373
.text:0000000000002454 ; ---------------------------------------------------------------------------
.text:0000000000002454
.text:0000000000002454 loc_2454:                               ; CODE XREF: main+7D5↑j
.text:0000000000002454                 mov     rdi, [r12+rdi-8]
.text:0000000000002459                 call    quote
.text:000000000000245E                 mov     edx, 5
.text:0000000000002463                 mov     rbx, rax
.text:0000000000002466                 lea     rsi, aInvalidZeroInc ; "invalid Zero increment value: %s"
.text:000000000000246D                 jmp     loc_235B
.text:0000000000002472 ; ---------------------------------------------------------------------------
.text:0000000000002472
.text:0000000000002472 loc_2472:                               ; CODE XREF: main+631↑j
.text:0000000000002472                 lea     rsi, aFormatStringMa ; "format string may not be specified when"...
.text:0000000000002479                 mov     edx, 5          ; category
.text:000000000000247E                 xor     edi, edi        ; domainname
.text:0000000000002480                 call    _dcgettext
.text:0000000000002485                 xor     edi, edi        ; status
.text:0000000000002487                 mov     rdx, rax        ; format
.text:000000000000248A                 xor     esi, esi        ; errnum
.text:000000000000248C                 xor     eax, eax
.text:000000000000248E                 call    _error
.text:0000000000002493                 mov     edi, 1          ; status
.text:0000000000002498                 call    usage
.text:000000000000249D ; ---------------------------------------------------------------------------
.text:000000000000249D
.text:000000000000249D loc_249D:                               ; CODE XREF: main+5ED↑j
.text:000000000000249D                 mov     rdi, rbx
.text:00000000000024A0                 call    quote
.text:00000000000024A5                 lea     rsi, aFormatSHasTooM ; "format %s has too many %% directives"
.text:00000000000024AC                 mov     rbx, rax
.text:00000000000024AF                 mov     edx, 5          ; category
.text:00000000000024B4                 xor     edi, edi        ; domainname
.text:00000000000024B6                 call    _dcgettext
.text:00000000000024BB                 mov     rcx, rbx
.text:00000000000024BE                 mov     rdx, rax        ; format
.text:00000000000024C1                 xor     esi, esi        ; errnum
.text:00000000000024C3                 mov     edi, 1          ; status
.text:00000000000024C8                 xor     eax, eax
.text:00000000000024CA                 call    _error
.text:00000000000024CF
.text:00000000000024CF loc_24CF:                               ; CODE XREF: main+5C2↑j
.text:00000000000024CF                 mov     rdi, rbx
.text:00000000000024D2                 call    quote
.text:00000000000024D7                 lea     rsi, aFormatSHasUnkn ; "format %s has unknown %%%c directive"
.text:00000000000024DE                 mov     edx, 5          ; category
.text:00000000000024E3                 xor     edi, edi        ; domainname
.text:00000000000024E5                 mov     rbx, rax
.text:00000000000024E8                 call    _dcgettext
.text:00000000000024ED                 mov     r8d, dword ptr [rsp+108h+var_F8]
.text:00000000000024F2                 mov     rdx, rax        ; format
.text:00000000000024F5                 mov     rcx, rbx
.text:00000000000024F8                 xor     esi, esi        ; errnum
.text:00000000000024FA                 mov     edi, 1          ; status
.text:00000000000024FF                 xor     eax, eax
.text:0000000000002501                 call    _error
.text:0000000000002506
.text:0000000000002506 loc_2506:                               ; CODE XREF: main+59E↑j
.text:0000000000002506                 mov     rdi, rbx
.text:0000000000002509                 call    quote
.text:000000000000250E                 lea     rsi, aFormatSEndsIn ; "format %s ends in %%"
.text:0000000000002515                 mov     rbx, rax
.text:0000000000002518                 mov     edx, 5          ; category
.text:000000000000251D                 xor     edi, edi        ; domainname
.text:000000000000251F                 call    _dcgettext
.text:0000000000002524                 mov     rcx, rbx
.text:0000000000002527                 mov     rdx, rax        ; format
.text:000000000000252A                 xor     esi, esi        ; errnum
.text:000000000000252C                 mov     edi, 1          ; status
.text:0000000000002531                 xor     eax, eax
.text:0000000000002533                 call    _error
.text:0000000000002533 ; } // starts at 18F0
.text:0000000000002538                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002538 main            endp ; sp-analysis failed
.text:0000000000002538
.text:0000000000002540
.text:0000000000002540 ; =============== S U B R O U T I N E =======================================
.text:0000000000002540
.text:0000000000002540 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002540
.text:0000000000002540 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002540                 public start
.text:0000000000002540 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002540 ; __unwind {
.text:0000000000002540                 xor     ebp, ebp
.text:0000000000002542                 mov     r9, rdx         ; rtld_fini
.text:0000000000002545                 pop     rsi             ; argc
.text:0000000000002546                 mov     rdx, rsp        ; ubp_av
.text:0000000000002549                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000254D                 push    rax
.text:000000000000254E                 push    rsp             ; stack_end
.text:000000000000254F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002556                 lea     rcx, __libc_csu_init ; init
.text:000000000000255D                 lea     rdi, main       ; main
.text:0000000000002564                 call    cs:__libc_start_main_ptr
.text:000000000000256A                 hlt
.text:000000000000256A ; } // starts at 2540
.text:000000000000256A start           endp
.text:000000000000256A
.text:000000000000256A ; ---------------------------------------------------------------------------
.text:000000000000256B                 align 10h
.text:0000000000002570
.text:0000000000002570 ; =============== S U B R O U T I N E =======================================
.text:0000000000002570
.text:0000000000002570 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002570
.text:0000000000002570 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2623↓p
.text:0000000000002570                 lea     rdi, __bss_start
.text:0000000000002577                 push    rbp
.text:0000000000002578                 lea     rax, __bss_start
.text:000000000000257F                 cmp     rax, rdi
.text:0000000000002582                 mov     rbp, rsp
.text:0000000000002585                 jz      short loc_25A0
.text:0000000000002587                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000258E                 test    rax, rax
.text:0000000000002591                 jz      short loc_25A0
.text:0000000000002593                 pop     rbp
.text:0000000000002594                 jmp     rax
.text:0000000000002594 ; ---------------------------------------------------------------------------
.text:0000000000002596                 align 20h
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000025A0                                         ; deregister_tm_clones+21↑j
.text:00000000000025A0                 pop     rbp
.text:00000000000025A1                 retn
.text:00000000000025A1 deregister_tm_clones endp
.text:00000000000025A1
.text:00000000000025A1 ; ---------------------------------------------------------------------------
.text:00000000000025A2                 align 10h
.text:00000000000025B0
.text:00000000000025B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025B0
.text:00000000000025B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000025B0
.text:00000000000025B0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000025B0                 lea     rdi, __bss_start
.text:00000000000025B7                 lea     rsi, __bss_start
.text:00000000000025BE                 push    rbp
.text:00000000000025BF                 sub     rsi, rdi
.text:00000000000025C2                 mov     rbp, rsp
.text:00000000000025C5                 sar     rsi, 3
.text:00000000000025C9                 mov     rax, rsi
.text:00000000000025CC                 shr     rax, 3Fh
.text:00000000000025D0                 add     rsi, rax
.text:00000000000025D3                 sar     rsi, 1
.text:00000000000025D6                 jz      short loc_25F0
.text:00000000000025D8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000025DF                 test    rax, rax
.text:00000000000025E2                 jz      short loc_25F0
.text:00000000000025E4                 pop     rbp
.text:00000000000025E5                 jmp     rax
.text:00000000000025E5 ; ---------------------------------------------------------------------------
.text:00000000000025E7                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000025F0                                         ; register_tm_clones+32↑j
.text:00000000000025F0                 pop     rbp
.text:00000000000025F1                 retn
.text:00000000000025F1 register_tm_clones endp
.text:00000000000025F1
.text:00000000000025F1 ; ---------------------------------------------------------------------------
.text:00000000000025F2                 align 20h
.text:0000000000002600
.text:0000000000002600 ; =============== S U B R O U T I N E =======================================
.text:0000000000002600
.text:0000000000002600 ; Attributes: info_from_lumina
.text:0000000000002600
.text:0000000000002600 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002600                 cmp     cs:completed_7697, 0
.text:0000000000002607                 jnz     short locret_2638
.text:0000000000002609                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002611                 push    rbp
.text:0000000000002612                 mov     rbp, rsp
.text:0000000000002615                 jz      short loc_2623
.text:0000000000002617                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000261E                 call    __cxa_finalize
.text:0000000000002623
.text:0000000000002623 loc_2623:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002623                 call    deregister_tm_clones
.text:0000000000002628                 mov     cs:completed_7697, 1
.text:000000000000262F                 pop     rbp
.text:0000000000002630                 retn
.text:0000000000002630 ; ---------------------------------------------------------------------------
.text:0000000000002631                 align 8
.text:0000000000002638
.text:0000000000002638 locret_2638:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002638                 rep retn
.text:0000000000002638 __do_global_dtors_aux endp
.text:0000000000002638
.text:0000000000002638 ; ---------------------------------------------------------------------------
.text:000000000000263A                 align 20h
.text:0000000000002640
.text:0000000000002640 ; =============== S U B R O U T I N E =======================================
.text:0000000000002640
.text:0000000000002640 ; Attributes: bp-based frame
.text:0000000000002640
.text:0000000000002640 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002640                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002640                 push    rbp
.text:0000000000002641                 mov     rbp, rsp
.text:0000000000002644                 pop     rbp
.text:0000000000002645                 jmp     register_tm_clones
.text:0000000000002645 frame_dummy     endp
.text:0000000000002645
.text:0000000000002645 ; ---------------------------------------------------------------------------
.text:000000000000264A                 align 10h
.text:0000000000002650
.text:0000000000002650 ; =============== S U B R O U T I N E =======================================
.text:0000000000002650
.text:0000000000002650
.text:0000000000002650 ; __int64 __fastcall all_digits_p(char *s)
.text:0000000000002650 all_digits_p    proc near               ; CODE XREF: main+204↑p
.text:0000000000002650                                         ; main+229↑p ...
.text:0000000000002650 ; __unwind {
.text:0000000000002650                 push    rbp
.text:0000000000002651                 push    rbx
.text:0000000000002652                 mov     rbx, rdi
.text:0000000000002655                 sub     rsp, 8
.text:0000000000002659                 call    _strlen
.text:000000000000265E                 movsx   edx, byte ptr [rbx]
.text:0000000000002661                 sub     edx, 30h ; '0'
.text:0000000000002664                 cmp     edx, 9
.text:0000000000002667                 ja      short loc_2688
.text:0000000000002669                 lea     rsi, a0123456789 ; "0123456789"
.text:0000000000002670                 mov     rbp, rax
.text:0000000000002673                 mov     rdi, rbx        ; s
.text:0000000000002676                 call    _strspn
.text:000000000000267B                 cmp     rax, rbp
.text:000000000000267E                 setz    al
.text:0000000000002681
.text:0000000000002681 loc_2681:                               ; CODE XREF: all_digits_p+3A↓j
.text:0000000000002681                 add     rsp, 8
.text:0000000000002685                 pop     rbx
.text:0000000000002686                 pop     rbp
.text:0000000000002687                 retn
.text:0000000000002688 ; ---------------------------------------------------------------------------
.text:0000000000002688
.text:0000000000002688 loc_2688:                               ; CODE XREF: all_digits_p+17↑j
.text:0000000000002688                 xor     eax, eax
.text:000000000000268A                 jmp     short loc_2681
.text:000000000000268A ; } // starts at 2650
.text:000000000000268A all_digits_p    endp
.text:000000000000268A
.text:000000000000268A ; ---------------------------------------------------------------------------
.text:000000000000268C                 align 10h
.text:0000000000002690
.text:0000000000002690 ; =============== S U B R O U T I N E =======================================
.text:0000000000002690
.text:0000000000002690
.text:0000000000002690 io_error        proc near               ; CODE XREF: main:loc_2291↑p
.text:0000000000002690                                         ; seq_fast:loc_2A96↓p
.text:0000000000002690 ; __unwind {
.text:0000000000002690                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002697                 push    rbx
.text:0000000000002698                 call    _clearerr_unlocked
.text:000000000000269D                 lea     rsi, aWriteError ; "write error"
.text:00000000000026A4                 mov     edx, 5          ; category
.text:00000000000026A9                 xor     edi, edi        ; domainname
.text:00000000000026AB                 call    _dcgettext
.text:00000000000026B0                 mov     rbx, rax
.text:00000000000026B3                 call    ___errno_location
.text:00000000000026B8                 mov     esi, [rax]      ; errnum
.text:00000000000026BA                 mov     rdx, rbx        ; format
.text:00000000000026BD                 mov     edi, 1          ; status
.text:00000000000026C2                 xor     eax, eax
.text:00000000000026C4                 call    _error
.text:00000000000026C4 ; } // starts at 2690
.text:00000000000026C9                 nop     dword ptr [rax+00000000h]
.text:00000000000026C9 io_error        endp ; sp-analysis failed
.text:00000000000026C9
.text:00000000000026D0
.text:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026D0
.text:00000000000026D0
.text:00000000000026D0 ; __int64 __fastcall seq_fast(void *src, void *)
.text:00000000000026D0 seq_fast        proc near               ; CODE XREF: main+799↑p
.text:00000000000026D0                                         ; main+B05↑p
.text:00000000000026D0
.text:00000000000026D0 var_78          = qword ptr -78h
.text:00000000000026D0 var_70          = qword ptr -70h
.text:00000000000026D0 ptr             = qword ptr -68h
.text:00000000000026D0 var_60          = qword ptr -60h
.text:00000000000026D0 n               = qword ptr -58h
.text:00000000000026D0 var_50          = qword ptr -50h
.text:00000000000026D0 s2              = qword ptr -48h
.text:00000000000026D0 var_40          = qword ptr -40h
.text:00000000000026D0
.text:00000000000026D0 ; __unwind {
.text:00000000000026D0                 push    r15
.text:00000000000026D2                 push    r14
.text:00000000000026D4                 mov     r9, rdi
.text:00000000000026D7                 push    r13
.text:00000000000026D9                 push    r12
.text:00000000000026DB                 lea     rdi, aInf       ; "inf"
.text:00000000000026E2                 push    rbp
.text:00000000000026E3                 push    rbx
.text:00000000000026E4                 mov     ecx, 4
.text:00000000000026E9                 mov     r8, rsi
.text:00000000000026EC                 mov     r13, r9
.text:00000000000026EF                 sub     rsp, 48h
.text:00000000000026F3                 repe cmpsb
.text:00000000000026F5                 setnbe  al
.text:00000000000026F8                 sbb     al, 0
.text:00000000000026FA                 cmp     byte ptr [r9], 30h ; '0'
.text:00000000000026FE                 movsx   eax, al
.text:0000000000002701                 mov     dword ptr [rsp+78h+var_70], eax
.text:0000000000002705                 jz      short loc_2713
.text:0000000000002707                 jmp     short loc_2731
.text:0000000000002707 ; ---------------------------------------------------------------------------
.text:0000000000002709                 align 10h
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: seq_fast+4E↓j
.text:0000000000002710                 mov     r13, rdx
.text:0000000000002713
.text:0000000000002713 loc_2713:                               ; CODE XREF: seq_fast+35↑j
.text:0000000000002713                 movzx   eax, byte ptr [r13+1]
.text:0000000000002718                 lea     rdx, [r13+1]
.text:000000000000271C                 cmp     al, 30h ; '0'
.text:000000000000271E                 jz      short loc_2710
.text:0000000000002720                 test    al, al
.text:0000000000002722                 jnz     loc_2902
.text:0000000000002728                 cmp     r9, rdx
.text:000000000000272B                 jz      loc_2902
.text:0000000000002731
.text:0000000000002731 loc_2731:                               ; CODE XREF: seq_fast+37↑j
.text:0000000000002731                                         ; seq_fast+235↓j
.text:0000000000002731                 cmp     byte ptr [r8], 30h ; '0'
.text:0000000000002735                 mov     rbp, r8
.text:0000000000002738                 jz      short loc_2743
.text:000000000000273A                 jmp     short loc_2760
.text:000000000000273A ; ---------------------------------------------------------------------------
.text:000000000000273C                 align 20h
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: seq_fast+7D↓j
.text:0000000000002740                 mov     rbp, rdx
.text:0000000000002743
.text:0000000000002743 loc_2743:                               ; CODE XREF: seq_fast+68↑j
.text:0000000000002743                 movzx   eax, byte ptr [rbp+1]
.text:0000000000002747                 lea     rdx, [rbp+1]
.text:000000000000274B                 cmp     al, 30h ; '0'
.text:000000000000274D                 jz      short loc_2740
.text:000000000000274F                 cmp     r8, rdx
.text:0000000000002752                 jz      loc_28FA
.text:0000000000002758                 test    al, al
.text:000000000000275A                 jnz     loc_28FA
.text:0000000000002760
.text:0000000000002760 loc_2760:                               ; CODE XREF: seq_fast+6A↑j
.text:0000000000002760                                         ; seq_fast+22D↓j
.text:0000000000002760                 mov     rdi, r13        ; s
.text:0000000000002763                 mov     ebx, 1Fh
.text:0000000000002768                 call    _strlen
.text:000000000000276D                 mov     edx, dword ptr [rsp+78h+var_70]
.text:0000000000002771                 lea     r14, [rax+1]
.text:0000000000002775                 mov     r15, rax
.text:0000000000002778                 mov     [rsp+78h+var_78], rax
.text:000000000000277C                 cmp     r14, 1Fh
.text:0000000000002780                 cmovnb  rbx, r14
.text:0000000000002784                 test    edx, edx
.text:0000000000002786                 jz      loc_2A2E
.text:000000000000278C                 xor     eax, eax
.text:000000000000278E                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002792                 mov     rdi, rbp
.text:0000000000002795                 repne scasb
.text:0000000000002797                 mov     rsi, rcx
.text:000000000000279A                 not     rsi
.text:000000000000279D                 lea     r12, [rsi-1]
.text:00000000000027A1                 mov     [rsp+78h+n], rsi
.text:00000000000027A6                 cmp     rbx, r12
.text:00000000000027A9                 cmovb   rbx, r12
.text:00000000000027AD                 lea     rdi, [rbx+1]
.text:00000000000027B1                 mov     [rsp+78h+var_60], rdi
.text:00000000000027B6                 call    xmalloc
.text:00000000000027BB                 mov     rsi, rbx
.text:00000000000027BE                 sub     rsi, [rsp+78h+var_78]
.text:00000000000027C2                 mov     rdx, r14        ; n
.text:00000000000027C5                 mov     [rsp+78h+ptr], rax
.text:00000000000027CA                 mov     rdi, rsi
.text:00000000000027CD                 mov     rsi, r13        ; src
.text:00000000000027D0                 add     rdi, rax        ; dest
.text:00000000000027D3                 call    _memcpy
.text:00000000000027D8                 mov     rdi, [rsp+78h+var_60]
.text:00000000000027DD                 mov     r13, rax
.text:00000000000027E0                 mov     r14, rax
.text:00000000000027E3                 call    xmalloc
.text:00000000000027E8                 mov     rcx, [rsp+78h+n]
.text:00000000000027ED                 mov     rdi, rbx
.text:00000000000027F0                 mov     rsi, rbp        ; src
.text:00000000000027F3                 sub     rdi, r12
.text:00000000000027F6                 mov     [rsp+78h+var_40], rax
.text:00000000000027FB                 add     rdi, rax        ; dest
.text:00000000000027FE                 mov     rdx, rcx        ; n
.text:0000000000002801                 call    _memcpy
.text:0000000000002806                 cmp     [rsp+78h+var_78], r12
.text:000000000000280A                 mov     [rsp+78h+s2], rax
.text:000000000000280F                 jnb     loc_2A76
.text:0000000000002815
.text:0000000000002815 loc_2815:                               ; CODE XREF: seq_fast+3A1↓j
.text:0000000000002815                                         ; seq_fast+3B9↓j
.text:0000000000002815                 mov     rdi, [rsp+78h+var_60]
.text:000000000000281A                 mov     eax, 2000h
.text:000000000000281F                 add     rdi, rdi
.text:0000000000002822                 cmp     rdi, 2000h
.text:0000000000002829                 cmovnb  rax, rdi
.text:000000000000282D                 mov     rdi, rax
.text:0000000000002830                 mov     r13, rax
.text:0000000000002833                 mov     [rsp+78h+var_50], rax
.text:0000000000002838                 call    xmalloc
.text:000000000000283D                 mov     rdx, [rsp+78h+var_78] ; n
.text:0000000000002841                 mov     rbp, rax
.text:0000000000002844                 mov     rsi, r14        ; src
.text:0000000000002847                 mov     rdi, rbp        ; dest
.text:000000000000284A                 lea     r13, [rbp+r13+0]
.text:000000000000284F                 call    _mempcpy
.text:0000000000002854                 mov     rdx, rax
.text:0000000000002857                 mov     eax, dword ptr [rsp+78h+var_70]
.text:000000000000285B                 test    eax, eax
.text:000000000000285D                 setz    byte ptr [rsp+78h+var_78]
.text:0000000000002861                 nop     dword ptr [rax+00000000h]
.text:0000000000002868
.text:0000000000002868 loc_2868:                               ; CODE XREF: seq_fast+1FC↓j
.text:0000000000002868                                         ; seq_fast+225↓j
.text:0000000000002868                 cmp     r15, r12
.text:000000000000286B                 jb      short loc_2877
.text:000000000000286D                 cmp     byte ptr [rsp+78h+var_78], 0
.text:0000000000002871                 jz      loc_29B8
.text:0000000000002877
.text:0000000000002877 loc_2877:                               ; CODE XREF: seq_fast+19B↑j
.text:0000000000002877                                         ; seq_fast+306↓j
.text:0000000000002877                 mov     rax, cs:separator
.text:000000000000287E                 lea     rcx, [rdx+1]
.text:0000000000002882                 movzx   eax, byte ptr [rax]
.text:0000000000002885                 mov     [rdx], al
.text:0000000000002887                 lea     rax, [r14+r15-1]
.text:000000000000288C                 jmp     short loc_289D
.text:000000000000288C ; ---------------------------------------------------------------------------
.text:000000000000288E                 align 10h
.text:0000000000002890
.text:0000000000002890 loc_2890:                               ; CODE XREF: seq_fast+1D3↓j
.text:0000000000002890                 sub     rax, 1
.text:0000000000002894                 mov     byte ptr [rax+1], 30h ; '0'
.text:0000000000002898                 cmp     rax, r14
.text:000000000000289B                 jb      short loc_2910
.text:000000000000289D
.text:000000000000289D loc_289D:                               ; CODE XREF: seq_fast+1BC↑j
.text:000000000000289D                 movzx   edx, byte ptr [rax]
.text:00000000000028A0                 cmp     dl, 38h ; '8'
.text:00000000000028A3                 jg      short loc_2890
.text:00000000000028A5                 add     edx, 1
.text:00000000000028A8                 cmp     rbx, r15
.text:00000000000028AB                 mov     [rax], dl
.text:00000000000028AD                 jz      short loc_2922
.text:00000000000028AF
.text:00000000000028AF loc_28AF:                               ; CODE XREF: seq_fast+250↓j
.text:00000000000028AF                                         ; seq_fast+2A8↓j ...
.text:00000000000028AF                 mov     rdx, r15        ; n
.text:00000000000028B2                 mov     rsi, r14        ; src
.text:00000000000028B5                 mov     rdi, rcx        ; dest
.text:00000000000028B8                 call    _mempcpy
.text:00000000000028BD                 mov     rdx, rax
.text:00000000000028C0                 mov     rax, r15
.text:00000000000028C3                 not     rax
.text:00000000000028C6                 add     rax, r13
.text:00000000000028C9                 cmp     rdx, rax
.text:00000000000028CC                 jbe     short loc_2868
.text:00000000000028CE                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000028D5                 mov     rsi, rdx
.text:00000000000028D8                 mov     rdi, rbp        ; ptr
.text:00000000000028DB                 sub     rsi, rbp        ; size
.text:00000000000028DE                 mov     edx, 1          ; n
.text:00000000000028E3                 call    _fwrite_unlocked
.text:00000000000028E8                 cmp     rax, 1
.text:00000000000028EC                 jnz     loc_2A96
.text:00000000000028F2                 mov     rdx, rbp
.text:00000000000028F5                 jmp     loc_2868
.text:00000000000028FA ; ---------------------------------------------------------------------------
.text:00000000000028FA
.text:00000000000028FA loc_28FA:                               ; CODE XREF: seq_fast+82↑j
.text:00000000000028FA                                         ; seq_fast+8A↑j
.text:00000000000028FA                 mov     rbp, rdx
.text:00000000000028FD                 jmp     loc_2760
.text:0000000000002902 ; ---------------------------------------------------------------------------
.text:0000000000002902
.text:0000000000002902 loc_2902:                               ; CODE XREF: seq_fast+52↑j
.text:0000000000002902                                         ; seq_fast+5B↑j
.text:0000000000002902                 mov     r13, rdx
.text:0000000000002905                 jmp     loc_2731
.text:0000000000002905 ; ---------------------------------------------------------------------------
.text:000000000000290A                 align 10h
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: seq_fast+1CB↑j
.text:0000000000002910                 add     r15, 1
.text:0000000000002914                 mov     byte ptr [r14-1], 31h ; '1'
.text:0000000000002919                 sub     r14, 1
.text:000000000000291D                 cmp     rbx, r15
.text:0000000000002920                 jnz     short loc_28AF
.text:0000000000002922
.text:0000000000002922 loc_2922:                               ; CODE XREF: seq_fast+1DD↑j
.text:0000000000002922                 lea     r11, [rbx+rbx]
.text:0000000000002926                 mov     rdi, [rsp+78h+ptr]
.text:000000000000292B                 mov     [rsp+78h+n], rcx
.text:0000000000002930                 lea     r10, [r11+1]
.text:0000000000002934                 mov     [rsp+78h+var_60], r11
.text:0000000000002939                 mov     rsi, r10
.text:000000000000293C                 mov     [rsp+78h+var_70], r10
.text:0000000000002941                 call    xrealloc
.text:0000000000002946                 lea     rdx, [rbx+1]    ; n
.text:000000000000294A                 lea     rdi, [rax+rbx]  ; dest
.text:000000000000294E                 mov     rsi, rax        ; src
.text:0000000000002951                 mov     [rsp+78h+ptr], rax
.text:0000000000002956                 call    _memmove
.text:000000000000295B                 mov     r10, [rsp+78h+var_70]
.text:0000000000002960                 mov     r11, [rsp+78h+var_60]
.text:0000000000002965                 mov     r14, rax
.text:0000000000002968                 mov     rcx, [rsp+78h+n]
.text:000000000000296D                 add     r10, r10
.text:0000000000002970                 cmp     r10, [rsp+78h+var_50]
.text:0000000000002975                 mov     rbx, r11
.text:0000000000002978                 jbe     loc_28AF
.text:000000000000297E                 sub     rcx, rbp
.text:0000000000002981                 mov     rsi, r10
.text:0000000000002984                 mov     rdi, rbp
.text:0000000000002987                 mov     [rsp+78h+var_70], rcx
.text:000000000000298C                 mov     [rsp+78h+var_60], r10
.text:0000000000002991                 call    xrealloc
.text:0000000000002996                 mov     r10, [rsp+78h+var_60]
.text:000000000000299B                 mov     rcx, [rsp+78h+var_70]
.text:00000000000029A0                 mov     rbp, rax
.text:00000000000029A3                 lea     r13, [rax+r10]
.text:00000000000029A7                 add     rcx, rax
.text:00000000000029AA                 mov     [rsp+78h+var_50], r10
.text:00000000000029AF                 jmp     loc_28AF
.text:00000000000029AF ; ---------------------------------------------------------------------------
.text:00000000000029B4                 align 8
.text:00000000000029B8
.text:00000000000029B8 loc_29B8:                               ; CODE XREF: seq_fast+1A1↑j
.text:00000000000029B8                 cmp     r15, r12
.text:00000000000029BB                 ja      short loc_29DC
.text:00000000000029BD                 mov     rsi, [rsp+78h+s2] ; s2
.text:00000000000029C2                 mov     rdi, r14        ; s1
.text:00000000000029C5                 mov     [rsp+78h+var_70], rdx
.text:00000000000029CA                 call    _strcmp
.text:00000000000029CF                 test    eax, eax
.text:00000000000029D1                 mov     rdx, [rsp+78h+var_70]
.text:00000000000029D6                 js      loc_2877
.text:00000000000029DC
.text:00000000000029DC loc_29DC:                               ; CODE XREF: seq_fast+2EB↑j
.text:00000000000029DC                 mov     byte ptr [rdx], 0Ah
.text:00000000000029DF                 lea     rsi, [rdx+1]
.text:00000000000029E3                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000029EA                 mov     edx, 1          ; n
.text:00000000000029EF                 mov     rdi, rbp        ; ptr
.text:00000000000029F2                 sub     rsi, rbp        ; size
.text:00000000000029F5                 call    _fwrite_unlocked
.text:00000000000029FA                 sub     rax, 1
.text:00000000000029FE                 jnz     loc_2A96
.text:0000000000002A04                 mov     ebx, 1
.text:0000000000002A09
.text:0000000000002A09 loc_2A09:                               ; CODE XREF: seq_fast+3AA↓j
.text:0000000000002A09                                         ; seq_fast+3C1↓j
.text:0000000000002A09                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:0000000000002A0E                 call    _free
.text:0000000000002A13                 mov     rdi, [rsp+78h+var_40] ; ptr
.text:0000000000002A18                 call    _free
.text:0000000000002A1D                 add     rsp, 48h
.text:0000000000002A21                 mov     eax, ebx
.text:0000000000002A23                 pop     rbx
.text:0000000000002A24                 pop     rbp
.text:0000000000002A25                 pop     r12
.text:0000000000002A27                 pop     r13
.text:0000000000002A29                 pop     r14
.text:0000000000002A2B                 pop     r15
.text:0000000000002A2D                 retn
.text:0000000000002A2E ; ---------------------------------------------------------------------------
.text:0000000000002A2E
.text:0000000000002A2E loc_2A2E:                               ; CODE XREF: seq_fast+B6↑j
.text:0000000000002A2E                 lea     rax, [rbx+1]
.text:0000000000002A32                 xor     r12d, r12d
.text:0000000000002A35                 mov     rdi, rax
.text:0000000000002A38                 mov     [rsp+78h+var_60], rax
.text:0000000000002A3D                 call    xmalloc
.text:0000000000002A42                 mov     rdi, rbx
.text:0000000000002A45                 sub     rdi, [rsp+78h+var_78]
.text:0000000000002A49                 mov     rdx, r14        ; n
.text:0000000000002A4C                 mov     rsi, r13        ; src
.text:0000000000002A4F                 mov     [rsp+78h+ptr], rax
.text:0000000000002A54                 add     rdi, rax        ; dest
.text:0000000000002A57                 call    _memcpy
.text:0000000000002A5C                 mov     [rsp+78h+var_40], 0
.text:0000000000002A65                 mov     r14, rax
.text:0000000000002A68                 mov     [rsp+78h+s2], 0
.text:0000000000002A71                 jmp     loc_2815
.text:0000000000002A76 ; ---------------------------------------------------------------------------
.text:0000000000002A76
.text:0000000000002A76 loc_2A76:                               ; CODE XREF: seq_fast+13F↑j
.text:0000000000002A76                 jbe     short loc_2A7C
.text:0000000000002A78                 xor     ebx, ebx
.text:0000000000002A7A                 jmp     short loc_2A09
.text:0000000000002A7C ; ---------------------------------------------------------------------------
.text:0000000000002A7C
.text:0000000000002A7C loc_2A7C:                               ; CODE XREF: seq_fast:loc_2A76↑j
.text:0000000000002A7C                 mov     rsi, rax        ; s2
.text:0000000000002A7F                 mov     rdi, r13        ; s1
.text:0000000000002A82                 call    _strcmp
.text:0000000000002A87                 test    eax, eax
.text:0000000000002A89                 jle     loc_2815
.text:0000000000002A8F                 xor     ebx, ebx
.text:0000000000002A91                 jmp     loc_2A09
.text:0000000000002A96 ; ---------------------------------------------------------------------------
.text:0000000000002A96
.text:0000000000002A96 loc_2A96:                               ; CODE XREF: seq_fast+21C↑j
.text:0000000000002A96                                         ; seq_fast+32E↑j
.text:0000000000002A96                 call    io_error
.text:0000000000002A96 ; } // starts at 26D0
.text:0000000000002A9B                 nop     dword ptr [rax+rax+00h]
.text:0000000000002A9B seq_fast        endp ; sp-analysis failed
.text:0000000000002A9B
.text:0000000000002AA0
.text:0000000000002AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AA0
.text:0000000000002AA0 ; Attributes: noreturn
.text:0000000000002AA0
.text:0000000000002AA0 ; void __fastcall __noreturn usage(int status)
.text:0000000000002AA0                 public usage
.text:0000000000002AA0 usage           proc near               ; CODE XREF: main+9E5↑p
.text:0000000000002AA0                                         ; main+A88↑p ...
.text:0000000000002AA0
.text:0000000000002AA0 var_A8          = qword ptr -0A8h
.text:0000000000002AA0 var_A0          = qword ptr -0A0h
.text:0000000000002AA0 var_98          = qword ptr -98h
.text:0000000000002AA0 var_90          = qword ptr -90h
.text:0000000000002AA0 var_88          = qword ptr -88h
.text:0000000000002AA0 var_80          = qword ptr -80h
.text:0000000000002AA0 var_78          = qword ptr -78h
.text:0000000000002AA0 var_70          = qword ptr -70h
.text:0000000000002AA0 var_68          = qword ptr -68h
.text:0000000000002AA0 var_60          = qword ptr -60h
.text:0000000000002AA0 var_58          = qword ptr -58h
.text:0000000000002AA0 var_50          = qword ptr -50h
.text:0000000000002AA0 var_48          = qword ptr -48h
.text:0000000000002AA0 var_40          = qword ptr -40h
.text:0000000000002AA0 var_30          = qword ptr -30h
.text:0000000000002AA0
.text:0000000000002AA0 ; __unwind {
.text:0000000000002AA0                 push    r13
.text:0000000000002AA2                 push    r12
.text:0000000000002AA4                 mov     edx, 5          ; category
.text:0000000000002AA9                 push    rbp
.text:0000000000002AAA                 push    rbx
.text:0000000000002AAB                 mov     ebp, edi
.text:0000000000002AAD                 sub     rsp, 88h
.text:0000000000002AB4                 mov     rbx, cs:program_name
.text:0000000000002ABB                 mov     rax, fs:28h
.text:0000000000002AC4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002AC9                 xor     eax, eax
.text:0000000000002ACB                 test    edi, edi
.text:0000000000002ACD                 jz      short loc_2AFD
.text:0000000000002ACF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002AD6                 xor     edi, edi        ; domainname
.text:0000000000002AD8                 call    _dcgettext
.text:0000000000002ADD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002AE4                 mov     rdx, rax
.text:0000000000002AE7                 mov     rcx, rbx
.text:0000000000002AEA                 mov     esi, 1
.text:0000000000002AEF                 xor     eax, eax
.text:0000000000002AF1                 call    ___fprintf_chk
.text:0000000000002AF6
.text:0000000000002AF6 loc_2AF6:                               ; CODE XREF: usage+316↓j
.text:0000000000002AF6                 mov     edi, ebp        ; status
.text:0000000000002AF8                 call    _exit
.text:0000000000002AFD ; ---------------------------------------------------------------------------
.text:0000000000002AFD
.text:0000000000002AFD loc_2AFD:                               ; CODE XREF: usage+2D↑j
.text:0000000000002AFD                 lea     rsi, aUsageSOptionLa ; "Usage: %s [OPTION]... LAST\n  or:  %s ["...
.text:0000000000002B04                 xor     edi, edi        ; domainname
.text:0000000000002B06                 call    _dcgettext
.text:0000000000002B0B                 mov     rcx, rbx
.text:0000000000002B0E                 mov     r8, rbx
.text:0000000000002B11                 mov     rdx, rbx
.text:0000000000002B14                 mov     rsi, rax
.text:0000000000002B17                 mov     edi, 1
.text:0000000000002B1C                 xor     eax, eax
.text:0000000000002B1E                 call    ___printf_chk
.text:0000000000002B23                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B2A                 lea     rsi, aPrintNumbersFr ; "Print numbers from FIRST to LAST, in st"...
.text:0000000000002B31                 mov     edx, 5          ; category
.text:0000000000002B36                 xor     edi, edi        ; domainname
.text:0000000000002B38                 call    _dcgettext
.text:0000000000002B3D                 mov     rsi, rbx        ; stream
.text:0000000000002B40                 mov     rdi, rax        ; s
.text:0000000000002B43                 call    _fputs_unlocked
.text:0000000000002B48                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B4F                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000002B56                 mov     edx, 5          ; category
.text:0000000000002B5B                 xor     edi, edi        ; domainname
.text:0000000000002B5D                 call    _dcgettext
.text:0000000000002B62                 mov     rsi, rbx        ; stream
.text:0000000000002B65                 mov     rdi, rax        ; s
.text:0000000000002B68                 call    _fputs_unlocked
.text:0000000000002B6D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B74                 lea     rsi, aFFormatFormatU ; "  -f, --format=FORMAT      use printf s"...
.text:0000000000002B7B                 mov     edx, 5          ; category
.text:0000000000002B80                 xor     edi, edi        ; domainname
.text:0000000000002B82                 call    _dcgettext
.text:0000000000002B87                 mov     rsi, rbx        ; stream
.text:0000000000002B8A                 mov     rdi, rax        ; s
.text:0000000000002B8D                 call    _fputs_unlocked
.text:0000000000002B92                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002B99                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000002BA0                 mov     edx, 5          ; category
.text:0000000000002BA5                 xor     edi, edi        ; domainname
.text:0000000000002BA7                 call    _dcgettext
.text:0000000000002BAC                 mov     rsi, rbx        ; stream
.text:0000000000002BAF                 mov     rdi, rax        ; s
.text:0000000000002BB2                 call    _fputs_unlocked
.text:0000000000002BB7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002BBE                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002BC5                 mov     edx, 5          ; category
.text:0000000000002BCA                 xor     edi, edi        ; domainname
.text:0000000000002BCC                 call    _dcgettext
.text:0000000000002BD1                 mov     rsi, rbx        ; stream
.text:0000000000002BD4                 mov     rdi, rax        ; s
.text:0000000000002BD7                 call    _fputs_unlocked
.text:0000000000002BDC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002BE3                 lea     rsi, aIfFirstOrIncre ; "\nIf FIRST or INCREMENT is omitted, it "...
.text:0000000000002BEA                 mov     edx, 5          ; category
.text:0000000000002BEF                 xor     edi, edi        ; domainname
.text:0000000000002BF1                 call    _dcgettext
.text:0000000000002BF6                 mov     rsi, rbx        ; stream
.text:0000000000002BF9                 mov     rdi, rax        ; s
.text:0000000000002BFC                 call    _fputs_unlocked
.text:0000000000002C01                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002C08                 lea     rsi, aFormatMustBeSu ; "FORMAT must be suitable for printing on"...
.text:0000000000002C0F                 mov     edx, 5          ; category
.text:0000000000002C14                 xor     edi, edi        ; domainname
.text:0000000000002C16                 call    _dcgettext
.text:0000000000002C1B                 mov     rsi, rbx        ; stream
.text:0000000000002C1E                 mov     rdi, rax        ; s
.text:0000000000002C21                 lea     rbx, aSeq       ; "seq"
.text:0000000000002C28                 call    _fputs_unlocked
.text:0000000000002C2D                 lea     rax, asc_7FA3   ; "["
.text:0000000000002C34                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002C3B                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002C44                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002C4D                 mov     rdx, rsp
.text:0000000000002C50                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002C54                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002C5B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002C60                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002C67                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002C6C                 lea     rax, domainname ; "coreutils"
.text:0000000000002C73                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002C78                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000002C7F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002C84                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002C8B                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002C90                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002C95                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002C9C                 mov     [rsp+0A8h+var_88], rax
.text:0000000000002CA1                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002CA8                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002CAD                 mov     [rsp+0A8h+var_70], rax
.text:0000000000002CB2                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002CB7                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002CBC                 nop     dword ptr [rax+00h]
.text:0000000000002CC0
.text:0000000000002CC0 loc_2CC0:                               ; CODE XREF: usage+23D↓j
.text:0000000000002CC0                 add     rdx, 10h
.text:0000000000002CC4                 mov     rdi, [rdx]
.text:0000000000002CC7                 test    rdi, rdi
.text:0000000000002CCA                 jz      short loc_2CDF
.text:0000000000002CCC                 mov     ecx, 4
.text:0000000000002CD1                 mov     rsi, rbx
.text:0000000000002CD4                 repe cmpsb
.text:0000000000002CD6                 setnbe  al
.text:0000000000002CD9                 sbb     al, 0
.text:0000000000002CDB                 test    al, al
.text:0000000000002CDD                 jnz     short loc_2CC0
.text:0000000000002CDF
.text:0000000000002CDF loc_2CDF:                               ; CODE XREF: usage+22A↑j
.text:0000000000002CDF                 mov     r12, [rdx+8]
.text:0000000000002CE3                 xor     edi, edi        ; domainname
.text:0000000000002CE5                 mov     edx, 5          ; category
.text:0000000000002CEA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002CF1                 test    r12, r12
.text:0000000000002CF4                 jz      loc_2DBB
.text:0000000000002CFA                 call    _dcgettext
.text:0000000000002CFF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002D06                 lea     rdx, unk_8019
.text:0000000000002D0D                 mov     rsi, rax
.text:0000000000002D10                 mov     edi, 1
.text:0000000000002D15                 xor     eax, eax
.text:0000000000002D17                 call    ___printf_chk
.text:0000000000002D1C                 xor     esi, esi        ; locale
.text:0000000000002D1E                 mov     edi, 5          ; category
.text:0000000000002D23                 call    _setlocale
.text:0000000000002D28                 test    rax, rax
.text:0000000000002D2B                 jz      short loc_2D49
.text:0000000000002D2D                 lea     rsi, s2         ; "en_"
.text:0000000000002D34                 mov     edx, 3          ; n
.text:0000000000002D39                 mov     rdi, rax        ; s1
.text:0000000000002D3C                 call    _strncmp
.text:0000000000002D41                 test    eax, eax
.text:0000000000002D43                 jnz     loc_2E50
.text:0000000000002D49
.text:0000000000002D49 loc_2D49:                               ; CODE XREF: usage+28B↑j
.text:0000000000002D49                                         ; usage+3D5↓j
.text:0000000000002D49                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002D50                 xor     edi, edi        ; domainname
.text:0000000000002D52                 mov     edx, 5          ; category
.text:0000000000002D57                 call    _dcgettext
.text:0000000000002D5C                 lea     rcx, aSeq       ; "seq"
.text:0000000000002D63                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002D6A                 mov     rsi, rax
.text:0000000000002D6D                 mov     edi, 1
.text:0000000000002D72                 xor     eax, eax
.text:0000000000002D74                 call    ___printf_chk
.text:0000000000002D79                 cmp     r12, rbx
.text:0000000000002D7C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002D83                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000002D8A                 cmovz   rbx, rcx
.text:0000000000002D8E
.text:0000000000002D8E loc_2D8E:                               ; CODE XREF: usage+3A4↓j
.text:0000000000002D8E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002D95                 xor     edi, edi        ; domainname
.text:0000000000002D97                 mov     edx, 5          ; category
.text:0000000000002D9C                 call    _dcgettext
.text:0000000000002DA1                 mov     rcx, rbx
.text:0000000000002DA4                 mov     rsi, rax
.text:0000000000002DA7                 mov     rdx, r12
.text:0000000000002DAA                 mov     edi, 1
.text:0000000000002DAF                 xor     eax, eax
.text:0000000000002DB1                 call    ___printf_chk
.text:0000000000002DB6                 jmp     loc_2AF6
.text:0000000000002DBB ; ---------------------------------------------------------------------------
.text:0000000000002DBB
.text:0000000000002DBB loc_2DBB:                               ; CODE XREF: usage+254↑j
.text:0000000000002DBB                 call    _dcgettext
.text:0000000000002DC0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002DC7                 lea     rdx, unk_8019
.text:0000000000002DCE                 mov     rsi, rax
.text:0000000000002DD1                 mov     edi, 1
.text:0000000000002DD6                 xor     eax, eax
.text:0000000000002DD8                 call    ___printf_chk
.text:0000000000002DDD                 xor     esi, esi        ; locale
.text:0000000000002DDF                 mov     edi, 5          ; category
.text:0000000000002DE4                 call    _setlocale
.text:0000000000002DE9                 test    rax, rax
.text:0000000000002DEC                 jz      short loc_2E06
.text:0000000000002DEE                 lea     rsi, s2         ; "en_"
.text:0000000000002DF5                 mov     edx, 3          ; n
.text:0000000000002DFA                 mov     rdi, rax        ; s1
.text:0000000000002DFD                 call    _strncmp
.text:0000000000002E02                 test    eax, eax
.text:0000000000002E04                 jnz     short loc_2E49
.text:0000000000002E06
.text:0000000000002E06 loc_2E06:                               ; CODE XREF: usage+34C↑j
.text:0000000000002E06                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002E0D                 mov     edx, 5          ; category
.text:0000000000002E12                 xor     edi, edi        ; domainname
.text:0000000000002E14                 lea     r12, aSeq       ; "seq"
.text:0000000000002E1B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002E22                 call    _dcgettext
.text:0000000000002E27                 lea     rcx, aSeq       ; "seq"
.text:0000000000002E2E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002E35                 mov     rsi, rax
.text:0000000000002E38                 mov     edi, 1
.text:0000000000002E3D                 xor     eax, eax
.text:0000000000002E3F                 call    ___printf_chk
.text:0000000000002E44                 jmp     loc_2D8E
.text:0000000000002E49 ; ---------------------------------------------------------------------------
.text:0000000000002E49
.text:0000000000002E49 loc_2E49:                               ; CODE XREF: usage+364↑j
.text:0000000000002E49                 lea     r12, aSeq       ; "seq"
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: usage+2A3↑j
.text:0000000000002E50                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002E57                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002E5E                 xor     edi, edi        ; domainname
.text:0000000000002E60                 mov     edx, 5          ; category
.text:0000000000002E65                 call    _dcgettext
.text:0000000000002E6A                 mov     rsi, r13        ; stream
.text:0000000000002E6D                 mov     rdi, rax        ; s
.text:0000000000002E70                 call    _fputs_unlocked
.text:0000000000002E75                 jmp     loc_2D49
.text:0000000000002E75 ; } // starts at 2AA0
.text:0000000000002E75 usage           endp
.text:0000000000002E75
.text:0000000000002E75 ; ---------------------------------------------------------------------------
.text:0000000000002E7A                 align 20h
.text:0000000000002E80
.text:0000000000002E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002E80
.text:0000000000002E80
.text:0000000000002E80 scan_arg        proc near               ; CODE XREF: main+253↑p
.text:0000000000002E80                                         ; main+67A↑p ...
.text:0000000000002E80
.text:0000000000002E80 var_78          = tbyte ptr -78h
.text:0000000000002E80 var_68          = xmmword ptr -68h
.text:0000000000002E80 var_58          = xmmword ptr -58h
.text:0000000000002E80 var_40          = qword ptr -40h
.text:0000000000002E80
.text:0000000000002E80 ; __unwind {
.text:0000000000002E80                 push    r15
.text:0000000000002E82                 push    r14
.text:0000000000002E84                 push    r13
.text:0000000000002E86                 push    r12
.text:0000000000002E88                 push    rbp
.text:0000000000002E89                 push    rbx
.text:0000000000002E8A                 mov     rbx, rsi
.text:0000000000002E8D                 mov     rbp, rdi
.text:0000000000002E90                 xor     esi, esi
.text:0000000000002E92                 mov     rdi, rbx
.text:0000000000002E95                 sub     rsp, 48h
.text:0000000000002E99                 lea     rcx, cl_strtold
.text:0000000000002EA0                 lea     rdx, [rsp+78h+var_68]
.text:0000000000002EA5                 mov     rax, fs:28h
.text:0000000000002EAE                 mov     [rsp+78h+var_40], rax
.text:0000000000002EB3                 xor     eax, eax
.text:0000000000002EB5                 call    xstrtold
.text:0000000000002EBA                 test    al, al
.text:0000000000002EBC                 jz      loc_319A
.text:0000000000002EC2                 fld     tbyte ptr [rsp+78h+var_68]
.text:0000000000002EC6                 fld     st
.text:0000000000002EC8                 fstp    [rsp+78h+var_78]
.text:0000000000002ECB                 fucomip st, st
.text:0000000000002ECD                 jp      loc_3148
.text:0000000000002ED3                 call    ___ctype_b_loc
.text:0000000000002ED8                 mov     rcx, [rax]
.text:0000000000002EDB                 jmp     short loc_2EE4
.text:0000000000002EDB ; ---------------------------------------------------------------------------
.text:0000000000002EDD                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 loc_2EE0:                               ; CODE XREF: scan_arg+6C↓j
.text:0000000000002EE0                                         ; scan_arg+71↓j
.text:0000000000002EE0                 add     rbx, 1
.text:0000000000002EE4
.text:0000000000002EE4 loc_2EE4:                               ; CODE XREF: scan_arg+5B↑j
.text:0000000000002EE4                 movzx   edx, byte ptr [rbx]
.text:0000000000002EE7                 test    byte ptr [rcx+rdx*2+1], 20h
.text:0000000000002EEC                 jnz     short loc_2EE0
.text:0000000000002EEE                 cmp     dl, 2Bh ; '+'
.text:0000000000002EF1                 jz      short loc_2EE0
.text:0000000000002EF3                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000002EF8                 mov     rdi, rbx        ; s
.text:0000000000002EFB                 mov     qword ptr [rsp+78h+var_58], 0
.text:0000000000002F04                 mov     dword ptr [rsp+78h+var_58+8], 7FFFFFFFh
.text:0000000000002F0C                 call    _strchr
.text:0000000000002F11                 test    rax, rax
.text:0000000000002F14                 mov     r12, rax
.text:0000000000002F17                 jz      loc_308A
.text:0000000000002F1D
.text:0000000000002F1D loc_2F1D:                               ; CODE XREF: scan_arg+21A↓j
.text:0000000000002F1D                                         ; scan_arg+228↓j
.text:0000000000002F1D                 lea     rsi, reject     ; "xX"
.text:0000000000002F24                 mov     rdi, rbx        ; s
.text:0000000000002F27                 call    _strcspn
.text:0000000000002F2C                 cmp     byte ptr [rbx+rax], 0
.text:0000000000002F30                 jnz     loc_3050
.text:0000000000002F36                 fldz
.text:0000000000002F38                 fld     [rsp+78h+var_78]
.text:0000000000002F3B                 fmul    st, st(1)
.text:0000000000002F3D                 fucomip st, st(1)
.text:0000000000002F3F                 fstp    st
.text:0000000000002F41                 jp      loc_3050
.text:0000000000002F47                 jnz     loc_3050
.text:0000000000002F4D                 or      r15, 0FFFFFFFFFFFFFFFFh
.text:0000000000002F51                 xor     eax, eax
.text:0000000000002F53                 mov     rdi, rbx
.text:0000000000002F56                 mov     rcx, r15
.text:0000000000002F59                 repne scasb
.text:0000000000002F5B                 test    r12, r12
.text:0000000000002F5E                 mov     rax, rcx
.text:0000000000002F61                 not     rax
.text:0000000000002F64                 lea     r13, [rax+r15]
.text:0000000000002F68                 mov     qword ptr [rsp+78h+var_58], r13
.text:0000000000002F6D                 jz      loc_30BF
.text:0000000000002F73                 lea     rdi, [r12+1]    ; s
.text:0000000000002F78                 lea     rsi, aEe        ; "eE"
.text:0000000000002F7F                 call    _strcspn
.text:0000000000002F84                 cmp     rax, 7FFFFFFFh
.text:0000000000002F8A                 mov     r14, rax
.text:0000000000002F8D                 jbe     loc_30AD
.text:0000000000002F93
.text:0000000000002F93 loc_2F93:                               ; CODE XREF: scan_arg+23A↓j
.text:0000000000002F93                 cmp     rbx, r12
.text:0000000000002F96                 jz      loc_313D
.text:0000000000002F9C                 movsx   eax, byte ptr [r12-1]
.text:0000000000002FA2                 xor     r15d, r15d
.text:0000000000002FA5                 sub     eax, 30h ; '0'
.text:0000000000002FA8                 cmp     eax, 9
.text:0000000000002FAB                 setnbe  r15b
.text:0000000000002FAF
.text:0000000000002FAF loc_2FAF:                               ; CODE XREF: scan_arg+234↓j
.text:0000000000002FAF                                         ; scan_arg+2C3↓j
.text:0000000000002FAF                 add     r13, r15
.text:0000000000002FB2                 mov     qword ptr [rsp+78h+var_58], r13
.text:0000000000002FB7
.text:0000000000002FB7 loc_2FB7:                               ; CODE XREF: scan_arg+242↓j
.text:0000000000002FB7                 mov     esi, 65h ; 'e'  ; c
.text:0000000000002FBC                 mov     rdi, rbx        ; s
.text:0000000000002FBF                 call    _strchr
.text:0000000000002FC4                 test    rax, rax
.text:0000000000002FC7                 mov     r13, rax
.text:0000000000002FCA                 jz      loc_30C7
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: scan_arg+260↓j
.text:0000000000002FD0                 lea     rdi, [r13+1]    ; nptr
.text:0000000000002FD4                 mov     edx, 0Ah        ; base
.text:0000000000002FD9                 xor     esi, esi        ; endptr
.text:0000000000002FDB                 call    _strtol
.text:0000000000002FE0                 mov     r8, r13
.text:0000000000002FE3                 mov     rdx, rax
.text:0000000000002FE6                 mov     ecx, dword ptr [rsp+78h+var_58+8]
.text:0000000000002FEA                 sub     r8, rbx
.text:0000000000002FED                 test    rax, rax
.text:0000000000002FF0                 js      loc_30E5
.text:0000000000002FF6                 movsxd  rax, ecx
.text:0000000000002FF9                 mov     esi, ecx
.text:0000000000002FFB                 mov     rdi, rbx
.text:0000000000002FFE                 cmp     rax, rdx
.text:0000000000003001                 cmovg   rax, rdx
.text:0000000000003005                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003009                 sub     esi, eax
.text:000000000000300B                 xor     eax, eax
.text:000000000000300D                 mov     dword ptr [rsp+78h+var_58+8], esi
.text:0000000000003011                 repne scasb
.text:0000000000003013                 mov     rax, qword ptr [rsp+78h+var_58]
.text:0000000000003018                 add     rax, r8
.text:000000000000301B                 test    r12, r12
.text:000000000000301E                 setnz   dil
.text:0000000000003022                 test    r14, r14
.text:0000000000003025                 lea     rax, [rcx+rax+2]
.text:000000000000302A                 setnz   cl
.text:000000000000302D                 test    dil, cl
.text:0000000000003030                 mov     qword ptr [rsp+78h+var_58], rax
.text:0000000000003035                 jz      short loc_303F
.text:0000000000003037                 test    esi, esi
.text:0000000000003039                 jz      loc_3124
.text:000000000000303F
.text:000000000000303F loc_303F:                               ; CODE XREF: scan_arg+1B5↑j
.text:000000000000303F                                         ; scan_arg+2AD↓j
.text:000000000000303F                 cmp     rdx, r14
.text:0000000000003042                 cmovbe  r14, rdx
.text:0000000000003046                 sub     rdx, r14
.text:0000000000003049
.text:0000000000003049 loc_3049:                               ; CODE XREF: scan_arg+29F↓j
.text:0000000000003049                 add     qword ptr [rsp+78h+var_58], rdx
.text:000000000000304E                 xchg    ax, ax
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: scan_arg+B0↑j
.text:0000000000003050                                         ; scan_arg+C1↑j ...
.text:0000000000003050                 movdqa  xmm0, [rsp+78h+var_68]
.text:0000000000003056                 mov     rax, rbp
.text:0000000000003059                 mov     rsi, [rsp+78h+var_40]
.text:000000000000305E                 xor     rsi, fs:28h
.text:0000000000003067                 movaps  xmmword ptr [rbp+0], xmm0
.text:000000000000306B                 movdqa  xmm0, [rsp+78h+var_58]
.text:0000000000003071                 movaps  xmmword ptr [rbp+10h], xmm0
.text:0000000000003075                 jnz     loc_31D3
.text:000000000000307B                 add     rsp, 48h
.text:000000000000307F                 pop     rbx
.text:0000000000003080                 pop     rbp
.text:0000000000003081                 pop     r12
.text:0000000000003083                 pop     r13
.text:0000000000003085                 pop     r14
.text:0000000000003087                 pop     r15
.text:0000000000003089                 retn
.text:000000000000308A ; ---------------------------------------------------------------------------
.text:000000000000308A
.text:000000000000308A loc_308A:                               ; CODE XREF: scan_arg+97↑j
.text:000000000000308A                 mov     esi, 70h ; 'p'  ; c
.text:000000000000308F                 mov     rdi, rbx        ; s
.text:0000000000003092                 call    _strchr
.text:0000000000003097                 test    rax, rax
.text:000000000000309A                 jnz     loc_2F1D
.text:00000000000030A0                 mov     dword ptr [rsp+78h+var_58+8], 0
.text:00000000000030A8                 jmp     loc_2F1D
.text:00000000000030AD ; ---------------------------------------------------------------------------
.text:00000000000030AD
.text:00000000000030AD loc_30AD:                               ; CODE XREF: scan_arg+10D↑j
.text:00000000000030AD                 test    rax, rax
.text:00000000000030B0                 mov     dword ptr [rsp+78h+var_58+8], eax
.text:00000000000030B4                 jz      loc_2FAF
.text:00000000000030BA                 jmp     loc_2F93
.text:00000000000030BF ; ---------------------------------------------------------------------------
.text:00000000000030BF
.text:00000000000030BF loc_30BF:                               ; CODE XREF: scan_arg+ED↑j
.text:00000000000030BF                 xor     r14d, r14d
.text:00000000000030C2                 jmp     loc_2FB7
.text:00000000000030C7 ; ---------------------------------------------------------------------------
.text:00000000000030C7
.text:00000000000030C7 loc_30C7:                               ; CODE XREF: scan_arg+14A↑j
.text:00000000000030C7                 mov     esi, 45h ; 'E'  ; c
.text:00000000000030CC                 mov     rdi, rbx        ; s
.text:00000000000030CF                 call    _strchr
.text:00000000000030D4                 test    rax, rax
.text:00000000000030D7                 mov     r13, rax
.text:00000000000030DA                 jz      loc_3050
.text:00000000000030E0                 jmp     loc_2FD0
.text:00000000000030E5 ; ---------------------------------------------------------------------------
.text:00000000000030E5
.text:00000000000030E5 loc_30E5:                               ; CODE XREF: scan_arg+170↑j
.text:00000000000030E5                 sub     ecx, eax
.text:00000000000030E7                 mov     rdi, rbx
.text:00000000000030EA                 xor     eax, eax
.text:00000000000030EC                 mov     dword ptr [rsp+78h+var_58+8], ecx
.text:00000000000030F0                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000030F4                 repne scasb
.text:00000000000030F6                 mov     rax, qword ptr [rsp+78h+var_58]
.text:00000000000030FB                 add     rax, r8
.text:00000000000030FE                 test    r12, r12
.text:0000000000003101                 lea     rax, [rcx+rax+2]
.text:0000000000003106                 jz      short loc_3132
.text:0000000000003108                 add     r12, 1
.text:000000000000310C                 lea     rcx, [rax+1]
.text:0000000000003110                 cmp     r13, r12
.text:0000000000003113                 cmovz   rax, rcx
.text:0000000000003117                 mov     qword ptr [rsp+78h+var_58], rax
.text:000000000000311C
.text:000000000000311C loc_311C:                               ; CODE XREF: scan_arg+2BB↓j
.text:000000000000311C                 neg     rdx
.text:000000000000311F                 jmp     loc_3049
.text:0000000000003124 ; ---------------------------------------------------------------------------
.text:0000000000003124
.text:0000000000003124 loc_3124:                               ; CODE XREF: scan_arg+1B9↑j
.text:0000000000003124                 sub     rax, 1
.text:0000000000003128                 mov     qword ptr [rsp+78h+var_58], rax
.text:000000000000312D                 jmp     loc_303F
.text:0000000000003132 ; ---------------------------------------------------------------------------
.text:0000000000003132
.text:0000000000003132 loc_3132:                               ; CODE XREF: scan_arg+286↑j
.text:0000000000003132                 add     rax, 1
.text:0000000000003136                 mov     qword ptr [rsp+78h+var_58], rax
.text:000000000000313B                 jmp     short loc_311C
.text:000000000000313D ; ---------------------------------------------------------------------------
.text:000000000000313D
.text:000000000000313D loc_313D:                               ; CODE XREF: scan_arg+116↑j
.text:000000000000313D                 mov     r15d, 1
.text:0000000000003143                 jmp     loc_2FAF
.text:0000000000003148 ; ---------------------------------------------------------------------------
.text:0000000000003148
.text:0000000000003148 loc_3148:                               ; CODE XREF: scan_arg+4D↑j
.text:0000000000003148                 mov     rsi, rbx
.text:000000000000314B                 mov     edi, 1
.text:0000000000003150                 call    quote_n
.text:0000000000003155                 lea     rsi, aNotANumber ; "not-a-number"
.text:000000000000315C                 xor     edi, edi
.text:000000000000315E                 mov     rbp, rax
.text:0000000000003161                 call    quote_n
.text:0000000000003166                 lea     rsi, aInvalidSArgume ; "invalid %s argument: %s"
.text:000000000000316D                 mov     rbx, rax
.text:0000000000003170                 mov     edx, 5          ; category
.text:0000000000003175                 xor     edi, edi        ; domainname
.text:0000000000003177                 call    _dcgettext
.text:000000000000317C                 xor     edi, edi        ; status
.text:000000000000317E                 mov     rdx, rax        ; format
.text:0000000000003181                 mov     r8, rbp
.text:0000000000003184                 mov     rcx, rbx
.text:0000000000003187                 xor     esi, esi        ; errnum
.text:0000000000003189                 xor     eax, eax
.text:000000000000318B                 call    _error
.text:0000000000003190                 mov     edi, 1          ; status
.text:0000000000003195                 call    usage
.text:000000000000319A ; ---------------------------------------------------------------------------
.text:000000000000319A
.text:000000000000319A loc_319A:                               ; CODE XREF: scan_arg+3C↑j
.text:000000000000319A                 mov     rdi, rbx
.text:000000000000319D                 call    quote
.text:00000000000031A2                 lea     rsi, aInvalidFloatin ; "invalid floating point argument: %s"
.text:00000000000031A9                 mov     rbx, rax
.text:00000000000031AC                 mov     edx, 5          ; category
.text:00000000000031B1                 xor     edi, edi        ; domainname
.text:00000000000031B3                 call    _dcgettext
.text:00000000000031B8                 xor     edi, edi        ; status
.text:00000000000031BA                 mov     rdx, rax        ; format
.text:00000000000031BD                 mov     rcx, rbx
.text:00000000000031C0                 xor     esi, esi        ; errnum
.text:00000000000031C2                 xor     eax, eax
.text:00000000000031C4                 call    _error
.text:00000000000031C9                 mov     edi, 1          ; status
.text:00000000000031CE                 call    usage
.text:00000000000031D3 ; ---------------------------------------------------------------------------
.text:00000000000031D3
.text:00000000000031D3 loc_31D3:                               ; CODE XREF: scan_arg+1F5↑j
.text:00000000000031D3                 call    ___stack_chk_fail
.text:00000000000031D3 ; } // starts at 2E80
.text:00000000000031D3 scan_arg        endp
.text:00000000000031D3
.text:00000000000031D3 ; ---------------------------------------------------------------------------
.text:00000000000031D8                 align 20h
.text:00000000000031E0
.text:00000000000031E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031E0
.text:00000000000031E0
.text:00000000000031E0 ; __int64 __fastcall cl_strtold(char *nptr)
.text:00000000000031E0                 public cl_strtold
.text:00000000000031E0 cl_strtold      proc near               ; DATA XREF: main+382↑o
.text:00000000000031E0                                         ; scan_arg+19↑o
.text:00000000000031E0
.text:00000000000031E0 var_58          = tbyte ptr -58h
.text:00000000000031E0 endptr          = qword ptr -40h
.text:00000000000031E0 var_38          = qword ptr -38h
.text:00000000000031E0 var_30          = qword ptr -30h
.text:00000000000031E0
.text:00000000000031E0 ; __unwind {
.text:00000000000031E0                 push    r13
.text:00000000000031E2                 push    r12
.text:00000000000031E4                 push    rbp
.text:00000000000031E5                 push    rbx
.text:00000000000031E6                 mov     rbx, rsi
.text:00000000000031E9                 mov     rbp, rdi
.text:00000000000031EC                 sub     rsp, 38h
.text:00000000000031F0                 lea     rsi, [rsp+58h+endptr] ; endptr
.text:00000000000031F5                 mov     rax, fs:28h
.text:00000000000031FE                 mov     [rsp+58h+var_30], rax
.text:0000000000003203                 xor     eax, eax
.text:0000000000003205                 call    _strtold
.text:000000000000320A                 mov     rax, [rsp+58h+endptr]
.text:000000000000320F                 fld     st
.text:0000000000003211                 cmp     byte ptr [rax], 0
.text:0000000000003214                 jnz     short loc_3240
.text:0000000000003216                 fstp    st(1)
.text:0000000000003218
.text:0000000000003218 loc_3218:                               ; CODE XREF: cl_strtold+93↓j
.text:0000000000003218                                         ; cl_strtold+9E↓j
.text:0000000000003218                 test    rbx, rbx
.text:000000000000321B                 jz      short loc_3225
.text:000000000000321D                 mov     rax, [rsp+58h+endptr]
.text:0000000000003222                 mov     [rbx], rax
.text:0000000000003225
.text:0000000000003225 loc_3225:                               ; CODE XREF: cl_strtold+3B↑j
.text:0000000000003225                 mov     rax, [rsp+58h+var_30]
.text:000000000000322A                 xor     rax, fs:28h
.text:0000000000003233                 jnz     short loc_3280
.text:0000000000003235                 add     rsp, 38h
.text:0000000000003239                 pop     rbx
.text:000000000000323A                 pop     rbp
.text:000000000000323B                 pop     r12
.text:000000000000323D                 pop     r13
.text:000000000000323F                 retn
.text:0000000000003240 ; ---------------------------------------------------------------------------
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: cl_strtold+34↑j
.text:0000000000003240                 fstp    st
.text:0000000000003242                 fstp    [rsp+58h+var_58]
.text:0000000000003245                 call    ___errno_location
.text:000000000000324A                 lea     rsi, [rsp+58h+var_38] ; endptr
.text:000000000000324F                 mov     rdi, rbp        ; nptr
.text:0000000000003252                 mov     r12, rax
.text:0000000000003255                 mov     r13d, [rax]
.text:0000000000003258                 call    c_strtold
.text:000000000000325D                 mov     rax, [rsp+58h+var_38]
.text:0000000000003262                 cmp     [rsp+58h+endptr], rax
.text:0000000000003267                 fld     [rsp+58h+var_58]
.text:000000000000326A                 jnb     short loc_3278
.text:000000000000326C                 fstp    st
.text:000000000000326E                 mov     [rsp+58h+endptr], rax
.text:0000000000003273                 jmp     short loc_3218
.text:0000000000003273 ; ---------------------------------------------------------------------------
.text:0000000000003275                 align 8
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: cl_strtold+8A↑j
.text:0000000000003278                 fstp    st(1)
.text:000000000000327A                 mov     [r12], r13d
.text:000000000000327E                 jmp     short loc_3218
.text:0000000000003280 ; ---------------------------------------------------------------------------
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: cl_strtold+53↑j
.text:0000000000003280                 fstp    st
.text:0000000000003282                 call    ___stack_chk_fail
.text:0000000000003282 ; } // starts at 31E0
.text:0000000000003282 cl_strtold      endp
.text:0000000000003282
.text:0000000000003282 ; ---------------------------------------------------------------------------
.text:0000000000003287                 align 10h
.text:0000000000003290
.text:0000000000003290 ; =============== S U B R O U T I N E =======================================
.text:0000000000003290
.text:0000000000003290
.text:0000000000003290                 public close_stdout_set_file_name
.text:0000000000003290 close_stdout_set_file_name proc near
.text:0000000000003290 ; __unwind {
.text:0000000000003290                 mov     cs:file_name, rdi
.text:0000000000003297                 retn
.text:0000000000003297 ; } // starts at 3290
.text:0000000000003297 close_stdout_set_file_name endp
.text:0000000000003297
.text:0000000000003297 ; ---------------------------------------------------------------------------
.text:0000000000003298                 align 20h
.text:00000000000032A0
.text:00000000000032A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032A0
.text:00000000000032A0
.text:00000000000032A0                 public close_stdout_set_ignore_EPIPE
.text:00000000000032A0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000032A0 ; __unwind {
.text:00000000000032A0                 mov     cs:ignore_EPIPE, dil
.text:00000000000032A7                 retn
.text:00000000000032A7 ; } // starts at 32A0
.text:00000000000032A7 close_stdout_set_ignore_EPIPE endp
.text:00000000000032A7
.text:00000000000032A7 ; ---------------------------------------------------------------------------
.text:00000000000032A8                 align 10h
.text:00000000000032B0
.text:00000000000032B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032B0
.text:00000000000032B0 ; Attributes: info_from_lumina
.text:00000000000032B0
.text:00000000000032B0 ; void __cdecl close_stdout()
.text:00000000000032B0                 public close_stdout
.text:00000000000032B0 close_stdout    proc near               ; DATA XREF: main+75↑o
.text:00000000000032B0 ; __unwind {
.text:00000000000032B0                 push    rbp
.text:00000000000032B1                 push    rbx
.text:00000000000032B2                 sub     rsp, 8
.text:00000000000032B6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000032BD                 call    close_stream
.text:00000000000032C2                 test    eax, eax
.text:00000000000032C4                 jz      short loc_32DC
.text:00000000000032C6                 call    ___errno_location
.text:00000000000032CB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000032D2                 mov     rbx, rax
.text:00000000000032D5                 jz      short loc_32F3
.text:00000000000032D7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000032DA                 jnz     short loc_32F3
.text:00000000000032DC
.text:00000000000032DC loc_32DC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000032DC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000032E3                 call    close_stream
.text:00000000000032E8                 test    eax, eax
.text:00000000000032EA                 jnz     short loc_3332
.text:00000000000032EC                 add     rsp, 8
.text:00000000000032F0                 pop     rbx
.text:00000000000032F1                 pop     rbp
.text:00000000000032F2                 retn
.text:00000000000032F3 ; ---------------------------------------------------------------------------
.text:00000000000032F3
.text:00000000000032F3 loc_32F3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000032F3                                         ; close_stdout+2A↑j
.text:00000000000032F3                 lea     rsi, aWriteError ; "write error"
.text:00000000000032FA                 xor     edi, edi        ; domainname
.text:00000000000032FC                 mov     edx, 5          ; category
.text:0000000000003301                 call    _dcgettext
.text:0000000000003306                 mov     rdi, cs:file_name
.text:000000000000330D                 mov     rbp, rax
.text:0000000000003310                 test    rdi, rdi
.text:0000000000003313                 jz      short loc_333D
.text:0000000000003315                 call    quotearg_colon
.text:000000000000331A                 mov     esi, [rbx]      ; errnum
.text:000000000000331C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003323                 mov     rcx, rax
.text:0000000000003326                 mov     r8, rbp
.text:0000000000003329                 xor     edi, edi        ; status
.text:000000000000332B                 xor     eax, eax
.text:000000000000332D                 call    _error
.text:0000000000003332
.text:0000000000003332 loc_3332:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003332                                         ; close_stdout+A2↓j
.text:0000000000003332                 mov     edi, cs:exit_failure ; status
.text:0000000000003338                 call    __exit
.text:000000000000333D ; ---------------------------------------------------------------------------
.text:000000000000333D
.text:000000000000333D loc_333D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000333D                 mov     esi, [rbx]      ; errnum
.text:000000000000333F                 lea     rdx, format+4   ; format
.text:0000000000003346                 mov     rcx, rax
.text:0000000000003349                 xor     edi, edi        ; status
.text:000000000000334B                 xor     eax, eax
.text:000000000000334D                 call    _error
.text:0000000000003352                 jmp     short loc_3332
.text:0000000000003352 ; } // starts at 32B0
.text:0000000000003352 close_stdout    endp
.text:0000000000003352
.text:0000000000003352 ; ---------------------------------------------------------------------------
.text:0000000000003354                 align 20h
.text:0000000000003360
.text:0000000000003360 ; =============== S U B R O U T I N E =======================================
.text:0000000000003360
.text:0000000000003360
.text:0000000000003360                 public set_program_name
.text:0000000000003360 set_program_name proc near              ; CODE XREF: main+34↑p
.text:0000000000003360 ; __unwind {
.text:0000000000003360                 test    rdi, rdi
.text:0000000000003363                 push    rbx
.text:0000000000003364                 jz      short loc_33DD
.text:0000000000003366                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000336B                 mov     rbx, rdi
.text:000000000000336E                 call    _strrchr
.text:0000000000003373                 test    rax, rax
.text:0000000000003376                 jz      short loc_33CD
.text:0000000000003378                 lea     r8, [rax+1]
.text:000000000000337C                 mov     rdx, r8
.text:000000000000337F                 sub     rdx, rbx
.text:0000000000003382                 cmp     rdx, 6
.text:0000000000003386                 jle     short loc_33CD
.text:0000000000003388                 lea     rsi, [rax-6]
.text:000000000000338C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003393                 mov     ecx, 7
.text:0000000000003398                 repe cmpsb
.text:000000000000339A                 setnbe  dl
.text:000000000000339D                 sbb     dl, 0
.text:00000000000033A0                 test    dl, dl
.text:00000000000033A2                 jnz     short loc_33CD
.text:00000000000033A4                 lea     rdi, aLt        ; "lt-"
.text:00000000000033AB                 mov     ecx, 3
.text:00000000000033B0                 mov     rsi, r8
.text:00000000000033B3                 mov     rbx, r8
.text:00000000000033B6                 repe cmpsb
.text:00000000000033B8                 setnbe  dl
.text:00000000000033BB                 sbb     dl, 0
.text:00000000000033BE                 test    dl, dl
.text:00000000000033C0                 jnz     short loc_33CD
.text:00000000000033C2                 lea     rbx, [rax+4]
.text:00000000000033C6                 mov     cs:__bss_start, rbx
.text:00000000000033CD
.text:00000000000033CD loc_33CD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000033CD                                         ; set_program_name+26↑j ...
.text:00000000000033CD                 mov     cs:program_name, rbx
.text:00000000000033D4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000033DB                 pop     rbx
.text:00000000000033DC                 retn
.text:00000000000033DD ; ---------------------------------------------------------------------------
.text:00000000000033DD
.text:00000000000033DD loc_33DD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000033DD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000033E4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000033EB                 mov     edx, 37h ; '7'  ; n
.text:00000000000033F0                 mov     esi, 1          ; size
.text:00000000000033F5                 call    _fwrite
.text:00000000000033FA                 call    _abort
.text:00000000000033FA ; } // starts at 3360
.text:00000000000033FA set_program_name endp
.text:00000000000033FA
.text:00000000000033FA ; ---------------------------------------------------------------------------
.text:00000000000033FF                 align 20h
.text:0000000000003400
.text:0000000000003400 ; =============== S U B R O U T I N E =======================================
.text:0000000000003400
.text:0000000000003400 ; Attributes: info_from_lumina
.text:0000000000003400
.text:0000000000003400 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000003400 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000003400                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000003400 ; __unwind {
.text:0000000000003400                 push    rbp
.text:0000000000003401                 push    rbx
.text:0000000000003402                 mov     rbp, rdi
.text:0000000000003405                 mov     ebx, esi
.text:0000000000003407                 sub     rsp, 8
.text:000000000000340B                 call    locale_charset
.text:0000000000003410                 movzx   edx, byte ptr [rax]
.text:0000000000003413                 and     edx, 0FFFFFFDFh
.text:0000000000003416                 cmp     dl, 55h ; 'U'
.text:0000000000003419                 jz      short loc_3490
.text:000000000000341B                 cmp     dl, 47h ; 'G'
.text:000000000000341E                 jz      short loc_3440
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000003420                                         ; gettext_quote+50↓j ...
.text:0000000000003420                 lea     rax, unk_8873
.text:0000000000003427                 lea     rdx, accept+5   ; "'"
.text:000000000000342E                 cmp     ebx, 9
.text:0000000000003431                 cmovnz  rax, rdx
.text:0000000000003435                 add     rsp, 8
.text:0000000000003439                 pop     rbx
.text:000000000000343A                 pop     rbp
.text:000000000000343B                 retn
.text:000000000000343B ; ---------------------------------------------------------------------------
.text:000000000000343C                 align 20h
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000003440                 movzx   edx, byte ptr [rax+1]
.text:0000000000003444                 and     edx, 0FFFFFFDFh
.text:0000000000003447                 cmp     dl, 42h ; 'B'
.text:000000000000344A                 jnz     short loc_3420
.text:000000000000344C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000003450                 jnz     short loc_3420
.text:0000000000003452                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000003456                 jnz     short loc_3420
.text:0000000000003458                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000345C                 jnz     short loc_3420
.text:000000000000345E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000003462                 jnz     short loc_3420
.text:0000000000003464                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000003468                 jnz     short loc_3420
.text:000000000000346A                 cmp     byte ptr [rax+7], 0
.text:000000000000346E                 jnz     short loc_3420
.text:0000000000003470                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000003474                 lea     rax, unk_886C
.text:000000000000347B                 lea     rdx, unk_8870
.text:0000000000003482                 cmovnz  rax, rdx
.text:0000000000003486                 add     rsp, 8
.text:000000000000348A                 pop     rbx
.text:000000000000348B                 pop     rbp
.text:000000000000348C                 retn
.text:000000000000348C ; ---------------------------------------------------------------------------
.text:000000000000348D                 align 10h
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000003490                 movzx   edx, byte ptr [rax+1]
.text:0000000000003494                 and     edx, 0FFFFFFDFh
.text:0000000000003497                 cmp     dl, 54h ; 'T'
.text:000000000000349A                 jnz     short loc_3420
.text:000000000000349C                 movzx   edx, byte ptr [rax+2]
.text:00000000000034A0                 and     edx, 0FFFFFFDFh
.text:00000000000034A3                 cmp     dl, 46h ; 'F'
.text:00000000000034A6                 jnz     loc_3420
.text:00000000000034AC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000034B0                 jnz     loc_3420
.text:00000000000034B6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000034BA                 jnz     loc_3420
.text:00000000000034C0                 cmp     byte ptr [rax+5], 0
.text:00000000000034C4                 jnz     loc_3420
.text:00000000000034CA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000034CE                 lea     rax, unk_8864
.text:00000000000034D5                 lea     rdx, unk_8868
.text:00000000000034DC                 cmovnz  rax, rdx
.text:00000000000034E0                 add     rsp, 8
.text:00000000000034E4                 pop     rbx
.text:00000000000034E5                 pop     rbp
.text:00000000000034E6                 retn
.text:00000000000034E6 ; } // starts at 3400
.text:00000000000034E6 gettext_quote   endp
.text:00000000000034E6
.text:00000000000034E6 ; ---------------------------------------------------------------------------
.text:00000000000034E7                 align 10h
.text:00000000000034F0
.text:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034F0
.text:00000000000034F0 ; Attributes: info_from_lumina
.text:00000000000034F0
.text:00000000000034F0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000034F0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000034F0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000034F0
.text:00000000000034F0 var_E0          = dword ptr -0E0h
.text:00000000000034F0 var_DB          = byte ptr -0DBh
.text:00000000000034F0 var_DA          = byte ptr -0DAh
.text:00000000000034F0 var_D9          = byte ptr -0D9h
.text:00000000000034F0 s               = qword ptr -0D8h
.text:00000000000034F0 n               = qword ptr -0D0h
.text:00000000000034F0 var_C8          = qword ptr -0C8h
.text:00000000000034F0 ps              = qword ptr -0C0h
.text:00000000000034F0 var_B8          = qword ptr -0B8h
.text:00000000000034F0 var_B0          = qword ptr -0B0h
.text:00000000000034F0 var_A8          = qword ptr -0A8h
.text:00000000000034F0 s2              = qword ptr -0A0h
.text:00000000000034F0 var_98          = qword ptr -98h
.text:00000000000034F0 var_90          = qword ptr -90h
.text:00000000000034F0 var_88          = qword ptr -88h
.text:00000000000034F0 var_80          = qword ptr -80h
.text:00000000000034F0 var_78          = qword ptr -78h
.text:00000000000034F0 var_70          = dword ptr -70h
.text:00000000000034F0 var_6C          = byte ptr -6Ch
.text:00000000000034F0 var_6B          = byte ptr -6Bh
.text:00000000000034F0 var_6A          = byte ptr -6Ah
.text:00000000000034F0 var_69          = byte ptr -69h
.text:00000000000034F0 var_68          = qword ptr -68h
.text:00000000000034F0 var_60          = qword ptr -60h
.text:00000000000034F0 wc              = dword ptr -4Ch
.text:00000000000034F0 var_48          = qword ptr -48h
.text:00000000000034F0 var_40          = qword ptr -40h
.text:00000000000034F0 arg_0           = qword ptr  8
.text:00000000000034F0 arg_8           = qword ptr  10h
.text:00000000000034F0 arg_10          = qword ptr  18h
.text:00000000000034F0
.text:00000000000034F0 ; __unwind {
.text:00000000000034F0                 push    r15
.text:00000000000034F2                 push    r14
.text:00000000000034F4                 mov     r15d, r8d
.text:00000000000034F7                 push    r13
.text:00000000000034F9                 push    r12
.text:00000000000034FB                 mov     r14, rdi
.text:00000000000034FE                 push    rbp
.text:00000000000034FF                 push    rbx
.text:0000000000003500                 mov     ebx, r9d
.text:0000000000003503                 mov     r13, rsi
.text:0000000000003506                 mov     rbp, rcx
.text:0000000000003509                 and     ebx, 2
.text:000000000000350C                 sub     rsp, 0B8h
.text:0000000000003513                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000351B                 mov     [rsp+0E8h+s], rdx
.text:0000000000003520                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000003525                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000352A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000352F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000003537                 mov     [rsp+0E8h+var_80], rax
.text:000000000000353C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000003544                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003549                 mov     rax, fs:28h
.text:0000000000003552                 mov     [rsp+0E8h+var_40], rax
.text:000000000000355A                 xor     eax, eax
.text:000000000000355C                 call    ___ctype_get_mb_cur_max
.text:0000000000003561                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000003565                 mov     [rsp+0E8h+var_90], rax
.text:000000000000356A                 ja      def_3581        ; jumptable 00000000000121F1 default case
.text:0000000000003570                 lea     rcx, jpt_3581
.text:0000000000003577                 mov     edx, r15d
.text:000000000000357A                 movsxd  rax, ds:(jpt_3581 - 88E0h)[rcx+rdx*4]
.text:000000000000357E                 add     rax, rcx
.text:0000000000003581                 jmp     rax             ; switch jump
.text:0000000000003583 ; ---------------------------------------------------------------------------
.text:0000000000003583
.text:0000000000003583 loc_3583:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003583                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000003583                                         ; DATA XREF: ...
.text:0000000000003583                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000003588                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000358D                 xor     r12d, r12d
.text:0000000000003590                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003599                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000359E                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000035A3
.text:00000000000035A3 loc_35A3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000035A3                 lea     rax, accept+5   ; "'"
.text:00000000000035AA                 mov     [rsp+0E8h+n], 1
.text:00000000000035B3                 xor     r15d, r15d
.text:00000000000035B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000035BE                 mov     [rsp+0E8h+s2], rax
.text:00000000000035C3
.text:00000000000035C3 loc_35C3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000035C3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000035C3                 xor     r11d, r11d
.text:00000000000035C6                 mov     rax, rbp
.text:00000000000035C9                 mov     r8d, r12d
.text:00000000000035CC                 mov     rbp, r11
.text:00000000000035CF                 mov     r11, rax
.text:00000000000035D2                 nop     word ptr [rax+rax+00h]
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000035D8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000035D8                 cmp     r11, rbp
.text:00000000000035DB                 setnz   r12b
.text:00000000000035DF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000035E3                 jnz     short loc_35F2
.text:00000000000035E5                 mov     rax, [rsp+0E8h+s]
.text:00000000000035EA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000035EE                 setnz   r12b
.text:00000000000035F2
.text:00000000000035F2 loc_35F2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000035F2                 test    r12b, r12b
.text:00000000000035F5                 jz      loc_3C50
.text:00000000000035FB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003600                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003605                 lea     r9, [rdi+rbp]
.text:0000000000003609                 setnz   al
.text:000000000000360C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003610                 mov     r10d, eax
.text:0000000000003613                 jz      loc_36C0
.text:0000000000003619                 mov     rax, [rsp+0E8h+n]
.text:000000000000361E                 test    rax, rax
.text:0000000000003621                 jz      loc_3A50
.text:0000000000003627                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000362B                 lea     rbx, [rbp+rax+0]
.text:0000000000003630                 jnz     short loc_3660
.text:0000000000003632                 cmp     rax, 1
.text:0000000000003636                 jbe     short loc_3660
.text:0000000000003638                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000363D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003642                 mov     [rsp+0E8h+ps], r9
.text:0000000000003647                 call    _strlen
.text:000000000000364C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003652                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003658                 mov     r11, rax
.text:000000000000365B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003660
.text:0000000000003660 loc_3660:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003660                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003660                 cmp     rbx, r11
.text:0000000000003663                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003668                 ja      loc_3C20
.text:000000000000366E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003673                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003678                 mov     rdi, r9         ; s1
.text:000000000000367B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003680                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003685                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000368A                 call    _memcmp
.text:000000000000368F                 test    eax, eax
.text:0000000000003691                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003696                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000369C                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000036A1                 jnz     loc_3C20
.text:00000000000036A7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036AC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000036B2                 jnz     loc_4635
.text:00000000000036B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000036C0
.text:00000000000036C0 loc_36C0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000036C0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000036C0                 movzx   ebx, byte ptr [r9]
.text:00000000000036C4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000036C7                 ja      def_36DE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000036CD                 lea     rcx, jpt_36DE
.text:00000000000036D4                 movzx   edx, bl
.text:00000000000036D7                 movsxd  rax, ds:(jpt_36DE - 890Ch)[rcx+rdx*4]
.text:00000000000036DB                 add     rax, rcx
.text:00000000000036DE                 jmp     rax             ; switch jump
.text:00000000000036E0 ; ---------------------------------------------------------------------------
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000036E0                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:00000000000036E0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000036E3
.text:00000000000036E3 loc_36E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000036E3                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:00000000000036E3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000036E7                 setnz   al
.text:00000000000036EA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000036EE                 jnz     short loc_36FC
.text:00000000000036F0                 mov     rax, [rsp+0E8h+s]
.text:00000000000036F5                 cmp     byte ptr [rax+1], 0
.text:00000000000036F9                 setnz   al
.text:00000000000036FC
.text:00000000000036FC loc_36FC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000036FC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003701                 setz    dl
.text:0000000000003704                 test    al, al
.text:0000000000003706                 jz      loc_3958
.text:000000000000370C
.text:000000000000370C loc_370C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000370C                 xor     r12d, r12d
.text:000000000000370F                 xor     eax, eax
.text:0000000000003711                 nop     dword ptr [rax+00000000h]
.text:0000000000003718
.text:0000000000003718 loc_3718:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003718                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003718                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000371D                 jnz     loc_3832
.text:0000000000003723                 test    dl, dl
.text:0000000000003725                 jnz     loc_3832
.text:000000000000372B
.text:000000000000372B loc_372B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000372B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003730                 test    rsi, rsi
.text:0000000000003733                 jz      short loc_3749
.text:0000000000003735                 mov     edx, ebx
.text:0000000000003737                 shr     dl, 5
.text:000000000000373A                 movzx   edx, dl
.text:000000000000373D                 mov     edx, [rsi+rdx*4]
.text:0000000000003740                 bt      edx, ebx
.text:0000000000003743                 jb      loc_3893
.text:0000000000003749
.text:0000000000003749 loc_3749:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003749                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003749                 test    r10b, r10b
.text:000000000000374C                 jnz     loc_3893
.text:0000000000003752                 xor     eax, 1
.text:0000000000003755                 add     rbp, 1
.text:0000000000003759                 and     eax, r8d
.text:000000000000375C
.text:000000000000375C loc_375C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000375C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000375C                 test    al, al
.text:000000000000375E                 jz      short loc_3780
.text:0000000000003760                 cmp     r13, r15
.text:0000000000003763                 jbe     short loc_376A
.text:0000000000003765                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000376A
.text:000000000000376A loc_376A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000376A                 lea     rax, [r15+1]
.text:000000000000376E                 cmp     r13, rax
.text:0000000000003771                 jbe     short loc_3779
.text:0000000000003773                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003779
.text:0000000000003779 loc_3779:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003779                 add     r15, 2
.text:000000000000377D                 xor     r8d, r8d
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003780                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003780                 cmp     r15, r13
.text:0000000000003783                 jnb     short loc_3789
.text:0000000000003785                 mov     [r14+r15], bl
.text:0000000000003789
.text:0000000000003789 loc_3789:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003789                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000378E                 add     r15, 1
.text:0000000000003792                 mov     eax, 0
.text:0000000000003797                 test    r12b, r12b
.text:000000000000379A                 cmovz   edi, eax
.text:000000000000379D                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000037A2                 jmp     loc_35D8
.text:00000000000037A2 ; ---------------------------------------------------------------------------
.text:00000000000037A7                 align 10h
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000037B0                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:00000000000037B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000037B3
.text:00000000000037B3 loc_37B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037B3                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:00000000000037B3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000037B7                 cmp     eax, 2
.text:00000000000037BA                 jz      loc_3D78
.text:00000000000037C0                 cmp     eax, 5
.text:00000000000037C3                 jz      loc_3D38
.text:00000000000037C9                 cmp     eax, 2
.text:00000000000037CC                 mov     ebx, 3Fh ; '?'
.text:00000000000037D1                 setz    dl
.text:00000000000037D4                 xor     r12d, r12d
.text:00000000000037D7                 xor     eax, eax
.text:00000000000037D9                 jmp     loc_3718
.text:00000000000037D9 ; ---------------------------------------------------------------------------
.text:00000000000037DE                 align 20h
.text:00000000000037E0
.text:00000000000037E0 loc_37E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000037E0                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:00000000000037E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000037E3
.text:00000000000037E3 loc_37E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000037E3                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:00000000000037E3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000037E8                 jz      loc_3CF0
.text:00000000000037EE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000037F3                 xor     edx, edx
.text:00000000000037F5                 xor     eax, eax
.text:00000000000037F7                 mov     ebx, 27h ; '''
.text:00000000000037FC                 jmp     loc_3718
.text:00000000000037FC ; ---------------------------------------------------------------------------
.text:0000000000003801                 align 8
.text:0000000000003808
.text:0000000000003808 loc_3808:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003808                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003808                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000380D                 mov     ebx, 74h ; 't'
.text:0000000000003812
.text:0000000000003812 loc_3812:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003812                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003812                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003817                 setz    al
.text:000000000000381A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000381E                 jnz     loc_396E
.text:0000000000003824
.text:0000000000003824 loc_3824:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003824                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003824                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003829                 jnz     short loc_3890
.text:000000000000382B
.text:000000000000382B loc_382B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000382B                 mov     ebx, edx
.text:000000000000382D                 xor     r12d, r12d
.text:0000000000003830                 xor     eax, eax
.text:0000000000003832
.text:0000000000003832 loc_3832:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003832                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003832                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003837                 jnz     loc_372B
.text:000000000000383D                 jmp     loc_3749
.text:000000000000383D ; ---------------------------------------------------------------------------
.text:0000000000003842                 align 8
.text:0000000000003848
.text:0000000000003848 loc_3848:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003848                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003848                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000384D                 mov     ebx, 62h ; 'b'
.text:0000000000003852                 jmp     short loc_3824
.text:0000000000003852 ; ---------------------------------------------------------------------------
.text:0000000000003854                 align 8
.text:0000000000003858
.text:0000000000003858 loc_3858:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003858                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003858                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000385D                 jz      loc_3C30
.text:0000000000003863                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003868                 jz      loc_3A80
.text:000000000000386E
.text:000000000000386E loc_386E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000386E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003873                 jz      loc_3A80
.text:0000000000003879                 cmp     [rsp+0E8h+n], 0
.text:000000000000387F                 jnz     loc_3C3B
.text:0000000000003885                 mov     ebx, 5Ch ; '\'
.text:000000000000388A                 nop     word ptr [rax+rax+00h]
.text:0000000000003890
.text:0000000000003890 loc_3890:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003890                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003890                 xor     r12d, r12d
.text:0000000000003893
.text:0000000000003893 loc_3893:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003893                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003893                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003898                 setz    dl
.text:000000000000389B                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000038A0                 mov     eax, edx
.text:00000000000038A2                 jnz     loc_40F8
.text:00000000000038A8                 mov     eax, r8d
.text:00000000000038AB                 xor     eax, 1
.text:00000000000038AE                 and     al, dl
.text:00000000000038B0                 jz      short loc_38E1
.text:00000000000038B2                 cmp     r13, r15
.text:00000000000038B5                 jbe     short loc_38BC
.text:00000000000038B7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000038BC
.text:00000000000038BC loc_38BC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000038BC                 lea     rdx, [r15+1]
.text:00000000000038C0                 cmp     r13, rdx
.text:00000000000038C3                 jbe     short loc_38CB
.text:00000000000038C5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000038CB
.text:00000000000038CB loc_38CB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000038CB                 lea     rdx, [r15+2]
.text:00000000000038CF                 cmp     r13, rdx
.text:00000000000038D2                 jbe     short loc_38DA
.text:00000000000038D4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000038DA
.text:00000000000038DA loc_38DA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000038DA                 add     r15, 3
.text:00000000000038DE                 mov     r8d, eax
.text:00000000000038E1
.text:00000000000038E1 loc_38E1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000038E1                 cmp     r13, r15
.text:00000000000038E4                 jbe     short loc_38EB
.text:00000000000038E6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000038EB
.text:00000000000038EB loc_38EB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000038EB                 add     r15, 1
.text:00000000000038EF                 add     rbp, 1
.text:00000000000038F3                 jmp     loc_3780
.text:00000000000038F3 ; ---------------------------------------------------------------------------
.text:00000000000038F8                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003900                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003900                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003905                 jnz     loc_3AD3
.text:000000000000390B                 xor     edx, edx
.text:000000000000390D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003912                 jz      loc_382B
.text:0000000000003918                 add     rbp, 1
.text:000000000000391C                 jmp     loc_35D8
.text:000000000000391C ; ---------------------------------------------------------------------------
.text:0000000000003921                 align 8
.text:0000000000003928
.text:0000000000003928 loc_3928:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003928                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003928                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000392D                 setz    dl
.text:0000000000003930                 xor     eax, eax
.text:0000000000003932                 jmp     loc_3718
.text:0000000000003932 ; ---------------------------------------------------------------------------
.text:0000000000003937                 align 20h
.text:0000000000003940
.text:0000000000003940 loc_3940:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003940                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003940                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003945                 mov     ebx, 61h ; 'a'
.text:000000000000394A                 jmp     loc_3824
.text:000000000000394A ; ---------------------------------------------------------------------------
.text:000000000000394F                 align 10h
.text:0000000000003950
.text:0000000000003950 loc_3950:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003950                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003950                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003955                 setz    dl
.text:0000000000003958
.text:0000000000003958 loc_3958:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003958                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003958                 test    rbp, rbp
.text:000000000000395B                 jnz     loc_370C
.text:0000000000003961
.text:0000000000003961 loc_3961:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003961                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003961                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003966                 and     al, dl
.text:0000000000003968                 jz      loc_3718
.text:000000000000396E
.text:000000000000396E loc_396E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000396E                 mov     rbp, r11
.text:0000000000003971                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003979                 jmp     loc_4079
.text:0000000000003979 ; ---------------------------------------------------------------------------
.text:000000000000397E                 align 20h
.text:0000000000003980
.text:0000000000003980 loc_3980:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003980                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003980                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003985                 setz    dl
.text:0000000000003988                 xor     r12d, r12d
.text:000000000000398B                 jmp     short loc_3961
.text:000000000000398B ; ---------------------------------------------------------------------------
.text:000000000000398D                 align 10h
.text:0000000000003990
.text:0000000000003990 loc_3990:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003990                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:0000000000003990                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003995                 mov     ebx, 20h ; ' '
.text:000000000000399A                 setz    dl
.text:000000000000399D                 jmp     short loc_3961
.text:000000000000399D ; ---------------------------------------------------------------------------
.text:000000000000399F                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039A0                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:00000000000039A0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000039A5                 mov     ebx, 72h ; 'r'
.text:00000000000039AA                 jmp     loc_3812
.text:00000000000039AA ; ---------------------------------------------------------------------------
.text:00000000000039AF                 align 10h
.text:00000000000039B0
.text:00000000000039B0 loc_39B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039B0                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:00000000000039B0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000039B5                 mov     ebx, 66h ; 'f'
.text:00000000000039BA                 jmp     loc_3824
.text:00000000000039BA ; ---------------------------------------------------------------------------
.text:00000000000039BF                 align 20h
.text:00000000000039C0
.text:00000000000039C0 loc_39C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039C0                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:00000000000039C0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000039C5                 mov     ebx, 76h ; 'v'
.text:00000000000039CA                 jmp     loc_3824
.text:00000000000039CA ; ---------------------------------------------------------------------------
.text:00000000000039CF                 align 10h
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000039D0                                         ; DATA XREF: .rodata:jpt_36DE↓o
.text:00000000000039D0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000039D5                 mov     ebx, 6Eh ; 'n'
.text:00000000000039DA                 jmp     loc_3812
.text:00000000000039DA ; ---------------------------------------------------------------------------
.text:00000000000039DF                 align 20h
.text:00000000000039E0
.text:00000000000039E0 def_3A6A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000039E0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000039E0                                         ; DATA XREF: ...
.text:00000000000039E0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000039E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000039E8
.text:00000000000039E8 def_36DE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000039E8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000039E8                                         ; DATA XREF: ...
.text:00000000000039E8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000039EE                 jnz     loc_3D98
.text:00000000000039F4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000039F9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000039FE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003A03                 call    ___ctype_b_loc
.text:0000000000003A08                 mov     rcx, [rax]
.text:0000000000003A0B                 movzx   edx, bl
.text:0000000000003A0E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003A14                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003A1A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000003A1F                 mov     edi, 1
.text:0000000000003A24                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003A28                 and     ax, 4000h
.text:0000000000003A2C                 setnz   r12b
.text:0000000000003A30                 setz    al
.text:0000000000003A33                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003A37
.text:0000000000003A37 loc_3A37:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003A37                 test    al, al
.text:0000000000003A39                 jnz     loc_43D1
.text:0000000000003A3F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003A44                 setz    dl
.text:0000000000003A47                 jmp     loc_3718
.text:0000000000003A47 ; ---------------------------------------------------------------------------
.text:0000000000003A4C                 align 10h
.text:0000000000003A50
.text:0000000000003A50 loc_3A50:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003A50                 movzx   ebx, byte ptr [r9]
.text:0000000000003A54                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003A57                 ja      short def_3A6A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003A59                 lea     rcx, jpt_3A6A
.text:0000000000003A60                 movzx   edx, bl
.text:0000000000003A63                 movsxd  rax, ds:(jpt_3A6A - 8B08h)[rcx+rdx*4]
.text:0000000000003A67                 add     rax, rcx
.text:0000000000003A6A                 jmp     rax             ; switch jump
.text:0000000000003A6A ; ---------------------------------------------------------------------------
.text:0000000000003A6C                 align 10h
.text:0000000000003A70
.text:0000000000003A70 loc_3A70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A70                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003A70                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003A73                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003A78                 jnz     loc_386E
.text:0000000000003A7E                 xchg    ax, ax
.text:0000000000003A80
.text:0000000000003A80 loc_3A80:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003A80                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003A80                 mov     edx, 5Ch ; '\'
.text:0000000000003A85                 mov     ebx, 5Ch ; '\'
.text:0000000000003A8A                 jmp     loc_3824
.text:0000000000003A8A ; ---------------------------------------------------------------------------
.text:0000000000003A8F                 align 10h
.text:0000000000003A90
.text:0000000000003A90 loc_3A90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003A90                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003A90                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003A95                 xor     r10d, r10d
.text:0000000000003A98                 mov     ebx, 66h ; 'f'
.text:0000000000003A9D                 jmp     loc_3824
.text:0000000000003A9D ; ---------------------------------------------------------------------------
.text:0000000000003AA2                 align 8
.text:0000000000003AA8
.text:0000000000003AA8 loc_3AA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AA8                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003AA8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000003AAD                 xor     r10d, r10d
.text:0000000000003AB0                 mov     ebx, 6Eh ; 'n'
.text:0000000000003AB5                 jmp     loc_3812
.text:0000000000003AB5 ; ---------------------------------------------------------------------------
.text:0000000000003ABA                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 loc_3AC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AC0                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003AC0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003AC5                 jmp     loc_3890
.text:0000000000003AC5 ; ---------------------------------------------------------------------------
.text:0000000000003ACA                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 loc_3AD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003AD0                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003AD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003AD3
.text:0000000000003AD3 loc_3AD3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003AD3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003AD8                 setz    dl
.text:0000000000003ADB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003AE0                 jnz     loc_467A
.text:0000000000003AE6                 mov     eax, r8d
.text:0000000000003AE9                 mov     rcx, r15
.text:0000000000003AEC                 xor     eax, 1
.text:0000000000003AEF                 and     al, dl
.text:0000000000003AF1                 jz      short loc_3B20
.text:0000000000003AF3                 cmp     r13, r15
.text:0000000000003AF6                 jbe     short loc_3AFD
.text:0000000000003AF8                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003AFD
.text:0000000000003AFD loc_3AFD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000003AFD                 lea     rcx, [r15+1]
.text:0000000000003B01                 cmp     r13, rcx
.text:0000000000003B04                 jbe     short loc_3B0C
.text:0000000000003B06                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003B0C
.text:0000000000003B0C loc_3B0C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000003B0C                 lea     rcx, [r15+2]
.text:0000000000003B10                 cmp     r13, rcx
.text:0000000000003B13                 ja      loc_4149
.text:0000000000003B19
.text:0000000000003B19 loc_3B19:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003B19                 lea     rcx, [r15+3]
.text:0000000000003B1D                 mov     r8d, eax
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003B20                 cmp     r13, rcx
.text:0000000000003B23                 jbe     short loc_3B2A
.text:0000000000003B25                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000003B2A
.text:0000000000003B2A loc_3B2A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000003B2A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003B2F                 lea     r15, [rcx+1]
.text:0000000000003B33                 jz      loc_4139
.text:0000000000003B39                 lea     rax, [rbp+1]
.text:0000000000003B3D                 cmp     rax, r11
.text:0000000000003B40                 jnb     short loc_3B5B
.text:0000000000003B42                 mov     rax, [rsp+0E8h+s]
.text:0000000000003B47                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000003B4C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003B50                 sub     eax, 30h ; '0'
.text:0000000000003B53                 cmp     al, 9
.text:0000000000003B55                 jbe     loc_4389
.text:0000000000003B5B
.text:0000000000003B5B loc_3B5B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000003B5B                 mov     eax, r12d
.text:0000000000003B5E                 mov     ebx, 30h ; '0'
.text:0000000000003B63                 xor     r12d, r12d
.text:0000000000003B66                 jmp     loc_3718
.text:0000000000003B66 ; ---------------------------------------------------------------------------
.text:0000000000003B6B                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B70                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003B70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003B75                 mov     r12d, r10d
.text:0000000000003B78                 setz    dl
.text:0000000000003B7B                 xor     r10d, r10d
.text:0000000000003B7E                 xor     eax, eax
.text:0000000000003B80                 jmp     loc_3718
.text:0000000000003B80 ; ---------------------------------------------------------------------------
.text:0000000000003B85                 align 8
.text:0000000000003B88
.text:0000000000003B88 loc_3B88:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003B88                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003B88                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000003B8D                 setz    dl
.text:0000000000003B90                 xor     r10d, r10d
.text:0000000000003B93                 jmp     loc_3958
.text:0000000000003B93 ; ---------------------------------------------------------------------------
.text:0000000000003B98                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BA0                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003BA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003BA5                 setz    dl
.text:0000000000003BA8                 xor     r10d, r10d
.text:0000000000003BAB                 xor     r12d, r12d
.text:0000000000003BAE                 jmp     loc_3961
.text:0000000000003BAE ; ---------------------------------------------------------------------------
.text:0000000000003BB3                 align 8
.text:0000000000003BB8
.text:0000000000003BB8 loc_3BB8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BB8                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003BB8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000003BBD                 mov     r12d, r10d
.text:0000000000003BC0                 mov     ebx, 20h ; ' '
.text:0000000000003BC5                 setz    dl
.text:0000000000003BC8                 xor     r10d, r10d
.text:0000000000003BCB                 jmp     loc_3961
.text:0000000000003BD0 ; ---------------------------------------------------------------------------
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BD0                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003BD0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003BD5                 xor     r10d, r10d
.text:0000000000003BD8                 mov     ebx, 72h ; 'r'
.text:0000000000003BDD                 jmp     loc_3812
.text:0000000000003BDD ; ---------------------------------------------------------------------------
.text:0000000000003BE2                 align 8
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BE8                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003BE8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000003BED                 jmp     loc_3890
.text:0000000000003BED ; ---------------------------------------------------------------------------
.text:0000000000003BF2                 align 8
.text:0000000000003BF8
.text:0000000000003BF8 loc_3BF8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003BF8                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003BF8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000003BFD                 xor     r10d, r10d
.text:0000000000003C00                 mov     ebx, 74h ; 't'
.text:0000000000003C05                 jmp     loc_3812
.text:0000000000003C05 ; ---------------------------------------------------------------------------
.text:0000000000003C0A                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003C10                                         ; DATA XREF: .rodata:jpt_3A6A↓o
.text:0000000000003C10                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003C15                 jmp     loc_3890
.text:0000000000003C15 ; ---------------------------------------------------------------------------
.text:0000000000003C1A                 align 20h
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003C20                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003C20                 xor     r10d, r10d
.text:0000000000003C23                 jmp     loc_36C0
.text:0000000000003C23 ; ---------------------------------------------------------------------------
.text:0000000000003C28                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003C30                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C35                 jnz     loc_45A0
.text:0000000000003C3B
.text:0000000000003C3B loc_3C3B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000003C3B                 add     rbp, 1
.text:0000000000003C3F                 mov     eax, r8d
.text:0000000000003C42                 xor     r12d, r12d
.text:0000000000003C45                 mov     ebx, 5Ch ; '\'
.text:0000000000003C4A                 jmp     loc_375C
.text:0000000000003C4A ; ---------------------------------------------------------------------------
.text:0000000000003C4F                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003C50                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003C55                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003C5A                 mov     r12d, r8d
.text:0000000000003C5D                 mov     rbp, r11
.text:0000000000003C60                 setz    dl
.text:0000000000003C63                 mov     eax, ebx
.text:0000000000003C65                 test    r15, r15
.text:0000000000003C68                 setz    cl
.text:0000000000003C6B                 and     eax, edx
.text:0000000000003C6D                 and     al, cl
.text:0000000000003C6F                 jnz     loc_46D6
.text:0000000000003C75                 mov     eax, ebx
.text:0000000000003C77                 xor     eax, 1
.text:0000000000003C7A                 and     dl, al
.text:0000000000003C7C                 jz      loc_45EC
.text:0000000000003C82                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003C87                 jz      loc_45EA
.text:0000000000003C8D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003C92                 jnz     loc_468D
.text:0000000000003C98                 test    r13, r13
.text:0000000000003C9B                 setz    al
.text:0000000000003C9E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003CA4                 setnz   dl
.text:0000000000003CA7                 and     al, dl
.text:0000000000003CA9                 jz      loc_46CC
.text:0000000000003CAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003CB4
.text:0000000000003CB4 loc_3CB4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003CB4                 lea     rbx, accept+5   ; "'"
.text:0000000000003CBB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000003CBF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003CC7                 mov     r15d, 1
.text:0000000000003CCD                 mov     [rsp+0E8h+n], 1
.text:0000000000003CD6                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003CDB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003CE0                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003CE4                 jmp     loc_35C3
.text:0000000000003CE4 ; ---------------------------------------------------------------------------
.text:0000000000003CE9                 align 10h
.text:0000000000003CF0
.text:0000000000003CF0 loc_3CF0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003CF0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003CF5                 jnz     loc_45A0
.text:0000000000003CFB                 test    r13, r13
.text:0000000000003CFE                 jz      loc_4100
.text:0000000000003D04                 xor     edx, edx
.text:0000000000003D06                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003D0C                 jnz     loc_4100
.text:0000000000003D12
.text:0000000000003D12 loc_3D12:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003D12                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003D12                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003D17                 add     r15, 3
.text:0000000000003D1B                 xor     eax, eax
.text:0000000000003D1D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003D22                 xor     r8d, r8d
.text:0000000000003D25                 mov     r13, rdx
.text:0000000000003D28                 mov     ebx, 27h ; '''
.text:0000000000003D2D                 jmp     loc_3749
.text:0000000000003D2D ; ---------------------------------------------------------------------------
.text:0000000000003D32                 align 8
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003D38                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000003D3D                 jz      short loc_3D60
.text:0000000000003D3F                 lea     rcx, [rbp+2]
.text:0000000000003D43                 cmp     rcx, r11
.text:0000000000003D46                 jnb     short loc_3D60
.text:0000000000003D48                 mov     rax, [rsp+0E8h+s]
.text:0000000000003D4D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003D52                 jz      loc_44E2
.text:0000000000003D58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003D60
.text:0000000000003D60 loc_3D60:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003D60                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003D60                 xor     edx, edx
.text:0000000000003D62                 xor     r12d, r12d
.text:0000000000003D65                 xor     eax, eax
.text:0000000000003D67                 mov     ebx, 3Fh ; '?'
.text:0000000000003D6C                 jmp     loc_3718
.text:0000000000003D6C ; ---------------------------------------------------------------------------
.text:0000000000003D71                 align 8
.text:0000000000003D78
.text:0000000000003D78 loc_3D78:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003D78                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003D7D                 jnz     loc_45A0
.text:0000000000003D83                 xor     r12d, r12d
.text:0000000000003D86                 xor     eax, eax
.text:0000000000003D88                 mov     ebx, 3Fh ; '?'
.text:0000000000003D8D                 jmp     loc_3749
.text:0000000000003D8D ; ---------------------------------------------------------------------------
.text:0000000000003D92                 align 8
.text:0000000000003D98
.text:0000000000003D98 loc_3D98:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003D98                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003DA0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DA4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003DB0                 mov     [rsp+0E8h+ps], rax
.text:0000000000003DB5                 jnz     short loc_3DE4
.text:0000000000003DB7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000003DBC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003DC1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003DC6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000003DCB                 call    _strlen
.text:0000000000003DD0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003DD6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003DDC                 mov     r11, rax
.text:0000000000003DDF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003DE4
.text:0000000000003DE4 loc_3DE4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003DE4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000003DEC                 xor     ecx, ecx
.text:0000000000003DEE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003DF2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003DF7                 mov     rbx, rcx
.text:0000000000003DFA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003E02                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003E07                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000003E0C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003E14                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003E19                 mov     [rsp+0E8h+var_78], r13
.text:0000000000003E1E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003E23
.text:0000000000003E23 loc_3E23:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003E23                 mov     rax, [rsp+0E8h+s]
.text:0000000000003E28                 lea     r14, [rbp+rbx+0]
.text:0000000000003E2D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003E32                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003E37                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000003E3C                 lea     r13, [rax+r14]
.text:0000000000003E40                 sub     rdx, r14
.text:0000000000003E43                 mov     rsi, r13
.text:0000000000003E46                 call    rpl_mbrtowc
.text:0000000000003E4B                 test    rax, rax
.text:0000000000003E4E                 mov     r15, rax
.text:0000000000003E51                 jz      short loc_3EA1
.text:0000000000003E53                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E57                 jz      loc_4475
.text:0000000000003E5D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003E61                 jz      loc_4401
.text:0000000000003E67                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003E6C                 setz    al
.text:0000000000003E6F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003E73                 jnz     loc_4010
.text:0000000000003E79
.text:0000000000003E79 loc_3E79:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003E79                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003E79                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003E80                 call    _iswprint
.text:0000000000003E85                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000003E8A                 test    eax, eax
.text:0000000000003E8C                 mov     eax, 0
.text:0000000000003E91                 cmovz   r12d, eax
.text:0000000000003E95                 add     rbx, r15
.text:0000000000003E98                 call    _mbsinit
.text:0000000000003E9D                 test    eax, eax
.text:0000000000003E9F                 jz      short loc_3E23
.text:0000000000003EA1
.text:0000000000003EA1 loc_3EA1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003EA1                 mov     edx, r12d
.text:0000000000003EA4                 mov     rdi, rbx
.text:0000000000003EA7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003EAD                 xor     edx, 1
.text:0000000000003EB0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003EB5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003EBB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000003EBF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003EC7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003ECC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003ED1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003ED6
.text:0000000000003ED6 loc_3ED6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003ED6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003ED6                 cmp     rdi, 1
.text:0000000000003EDA                 jbe     loc_44DB
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003EE0                 mov     rcx, rdi
.text:0000000000003EE3                 xor     esi, esi
.text:0000000000003EE5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000003EEB                 add     rcx, rbp
.text:0000000000003EEE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003EF3                 jmp     loc_3FAE
.text:0000000000003EF3 ; ---------------------------------------------------------------------------
.text:0000000000003EF8                 align 20h
.text:0000000000003F00
.text:0000000000003F00 loc_3F00:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003F00                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003F05                 setz    al
.text:0000000000003F08                 test    r9b, r9b
.text:0000000000003F0B                 jnz     loc_43C0
.text:0000000000003F11                 mov     esi, r8d
.text:0000000000003F14                 xor     esi, 1
.text:0000000000003F17                 and     al, sil
.text:0000000000003F1A                 jz      short loc_3F4B
.text:0000000000003F1C                 cmp     r13, r15
.text:0000000000003F1F                 jbe     short loc_3F26
.text:0000000000003F21                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003F26
.text:0000000000003F26 loc_3F26:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003F26                 lea     rsi, [r15+1]
.text:0000000000003F2A                 cmp     r13, rsi
.text:0000000000003F2D                 jbe     short loc_3F35
.text:0000000000003F2F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003F35
.text:0000000000003F35 loc_3F35:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003F35                 lea     rsi, [r15+2]
.text:0000000000003F39                 cmp     r13, rsi
.text:0000000000003F3C                 jbe     short loc_3F44
.text:0000000000003F3E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003F44
.text:0000000000003F44 loc_3F44:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003F44                 add     r15, 3
.text:0000000000003F48                 mov     r8d, eax
.text:0000000000003F4B
.text:0000000000003F4B loc_3F4B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000003F4B                 cmp     r13, r15
.text:0000000000003F4E                 jbe     short loc_3F55
.text:0000000000003F50                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003F55
.text:0000000000003F55 loc_3F55:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003F55                 lea     rax, [r15+1]
.text:0000000000003F59                 cmp     r13, rax
.text:0000000000003F5C                 jbe     short loc_3F6B
.text:0000000000003F5E                 mov     eax, ebx
.text:0000000000003F60                 shr     al, 6
.text:0000000000003F63                 add     eax, 30h ; '0'
.text:0000000000003F66                 mov     [r14+r15+1], al
.text:0000000000003F6B
.text:0000000000003F6B loc_3F6B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000003F6B                 lea     rax, [r15+2]
.text:0000000000003F6F                 cmp     r13, rax
.text:0000000000003F72                 jbe     short loc_3F84
.text:0000000000003F74                 mov     eax, ebx
.text:0000000000003F76                 shr     al, 3
.text:0000000000003F79                 and     eax, 7
.text:0000000000003F7C                 add     eax, 30h ; '0'
.text:0000000000003F7F                 mov     [r14+r15+2], al
.text:0000000000003F84
.text:0000000000003F84 loc_3F84:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003F84                 and     ebx, 7
.text:0000000000003F87                 add     rbp, 1
.text:0000000000003F8B                 add     r15, 3
.text:0000000000003F8F                 add     ebx, 30h ; '0'
.text:0000000000003F92                 cmp     rbp, rcx
.text:0000000000003F95                 jnb     loc_3780
.text:0000000000003F9B                 mov     esi, edx
.text:0000000000003F9D
.text:0000000000003F9D loc_3F9D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000003F9D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000003F9D                 cmp     r13, r15
.text:0000000000003FA0                 jbe     short loc_3FA6
.text:0000000000003FA2                 mov     [r14+r15], bl
.text:0000000000003FA6
.text:0000000000003FA6 loc_3FA6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003FA6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000003FAA                 add     r15, 1
.text:0000000000003FAE
.text:0000000000003FAE loc_3FAE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000003FAE                 test    dl, dl
.text:0000000000003FB0                 jnz     loc_3F00
.text:0000000000003FB6                 mov     eax, esi
.text:0000000000003FB8                 xor     eax, 1
.text:0000000000003FBB                 and     eax, r8d
.text:0000000000003FBE                 test    r10b, r10b
.text:0000000000003FC1                 jz      short loc_3FD1
.text:0000000000003FC3                 cmp     r13, r15
.text:0000000000003FC6                 jbe     short loc_3FCD
.text:0000000000003FC8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003FCD
.text:0000000000003FCD loc_3FCD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000003FCD                 add     r15, 1
.text:0000000000003FD1
.text:0000000000003FD1 loc_3FD1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003FD1                 add     rbp, 1
.text:0000000000003FD5                 cmp     rbp, rcx
.text:0000000000003FD8                 jnb     loc_375C
.text:0000000000003FDE                 test    al, al
.text:0000000000003FE0                 jz      loc_43DE
.text:0000000000003FE6                 cmp     r13, r15
.text:0000000000003FE9                 jbe     short loc_3FF0
.text:0000000000003FEB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003FF0                 lea     rax, [r15+1]
.text:0000000000003FF4                 cmp     r13, rax
.text:0000000000003FF7                 jbe     short loc_3FFF
.text:0000000000003FF9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003FFF
.text:0000000000003FFF loc_3FFF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000003FFF                 add     r15, 2
.text:0000000000004003                 xor     r10d, r10d
.text:0000000000004006                 xor     r8d, r8d
.text:0000000000004009                 jmp     short loc_3F9D
.text:0000000000004009 ; ---------------------------------------------------------------------------
.text:000000000000400B                 align 10h
.text:0000000000004010
.text:0000000000004010 loc_4010:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004010                 cmp     r15, 1
.text:0000000000004014                 jz      loc_3E79
.text:000000000000401A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000401F                 lea     rcx, [rdi+r15]
.text:0000000000004023                 lea     rdx, [rdi+r14+1]
.text:0000000000004028                 lea     r8, [rcx+r14]
.text:000000000000402C                 jmp     short loc_403D
.text:000000000000402C ; ---------------------------------------------------------------------------
.text:000000000000402E                 align 10h
.text:0000000000004030
.text:0000000000004030 loc_4030:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004030                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004030                 add     rdx, 1
.text:0000000000004034                 cmp     r8, rdx
.text:0000000000004037                 jz      loc_3E79
.text:000000000000403D
.text:000000000000403D loc_403D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000403D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004040                 sub     ecx, 5Bh ; '['
.text:0000000000004043                 cmp     cl, 21h ; '!'
.text:0000000000004046                 ja      short loc_4030
.text:0000000000004048                 mov     esi, 1
.text:000000000000404D                 shl     rsi, cl
.text:0000000000004050                 mov     rcx, rsi
.text:0000000000004053                 mov     rsi, 20000002Bh
.text:000000000000405D                 test    rcx, rsi
.text:0000000000004060                 jz      short loc_4030
.text:0000000000004062                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004067                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000406C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004071                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004079
.text:0000000000004079 loc_4079:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004079                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004079                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000407E                 jz      short loc_4090
.text:0000000000004080                 test    al, al
.text:0000000000004082                 mov     eax, 4
.text:0000000000004087                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000408C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004090                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004090                 sub     rsp, 8
.text:0000000000004094                 mov     rcx, rbp
.text:0000000000004097                 mov     rsi, r13
.text:000000000000409A                 push    [rsp+0F0h+var_88]
.text:000000000000409E                 push    [rsp+0F8h+var_80]
.text:00000000000040A2                 mov     rdi, r14
.text:00000000000040A5                 push    0
.text:00000000000040A7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000040AF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000040B4                 mov     rdx, [rsp+108h+s]
.text:00000000000040B9                 and     r9d, 0FFFFFFFDh
.text:00000000000040BD                 call    quotearg_buffer_restyled
.text:00000000000040C2                 add     rsp, 20h
.text:00000000000040C6                 mov     r15, rax
.text:00000000000040C9
.text:00000000000040C9 loc_40C9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000040C9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000040C9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000040D1                 xor     rbx, fs:28h
.text:00000000000040DA                 mov     rax, r15
.text:00000000000040DD                 jnz     loc_46E3
.text:00000000000040E3                 add     rsp, 0B8h
.text:00000000000040EA                 pop     rbx
.text:00000000000040EB                 pop     rbp
.text:00000000000040EC                 pop     r12
.text:00000000000040EE                 pop     r13
.text:00000000000040F0                 pop     r14
.text:00000000000040F2                 pop     r15
.text:00000000000040F4                 retn
.text:00000000000040F4 ; ---------------------------------------------------------------------------
.text:00000000000040F5                 align 8
.text:00000000000040F8
.text:00000000000040F8 loc_40F8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000040F8                 mov     rbp, r11
.text:00000000000040FB                 jmp     loc_4079
.text:0000000000004100 ; ---------------------------------------------------------------------------
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004100                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004100                 cmp     r13, r15
.text:0000000000004103                 jbe     short loc_410A
.text:0000000000004105                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000410A
.text:000000000000410A loc_410A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000410A                 lea     rax, [r15+1]
.text:000000000000410E                 cmp     r13, rax
.text:0000000000004111                 jbe     short loc_4119
.text:0000000000004113                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004119
.text:0000000000004119 loc_4119:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004119                 lea     rax, [r15+2]
.text:000000000000411D                 cmp     r13, rax
.text:0000000000004120                 jbe     loc_4712
.text:0000000000004126                 mov     rdx, r13
.text:0000000000004129                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000412F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004134                 jmp     loc_3D12
.text:0000000000004139 ; ---------------------------------------------------------------------------
.text:0000000000004139
.text:0000000000004139 loc_4139:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004139                 mov     eax, r12d
.text:000000000000413C                 mov     ebx, 30h ; '0'
.text:0000000000004141                 xor     r12d, r12d
.text:0000000000004144                 jmp     loc_3749
.text:0000000000004149 ; ---------------------------------------------------------------------------
.text:0000000000004149
.text:0000000000004149 loc_4149:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004149                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000414F                 jmp     loc_3B19
.text:0000000000004154 ; ---------------------------------------------------------------------------
.text:0000000000004154
.text:0000000000004154 loc_4154:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004154                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:0000000000004154                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004156                 jnz     loc_3583        ; jumptable 00000000000121F1 case 1
.text:000000000000415C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004161
.text:0000000000004161 loc_4161:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004161                 test    r13, r13
.text:0000000000004164                 jnz     loc_46FA
.text:000000000000416A                 lea     rax, accept+5   ; "'"
.text:0000000000004171                 mov     [rsp+0E8h+var_98], 0
.text:000000000000417A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000417F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004184                 xor     r12d, r12d
.text:0000000000004187                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000418C                 mov     [rsp+0E8h+n], 1
.text:0000000000004195                 mov     [rsp+0E8h+s2], rax
.text:000000000000419A                 mov     r15d, 1
.text:00000000000041A0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000041A8                 jmp     loc_35C3
.text:00000000000041A8 ; ---------------------------------------------------------------------------
.text:00000000000041AD                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000041B0                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:00000000000041B0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000041B2                 jnz     loc_45AD
.text:00000000000041B8                 test    r13, r13
.text:00000000000041BB                 jz      loc_43E6
.text:00000000000041C1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000041C5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000041CA                 xor     r12d, r12d
.text:00000000000041CD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000041D2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000041DB
.text:00000000000041DB loc_41DB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000041DB                 lea     rax, unk_8873
.text:00000000000041E2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000041E7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000041EC                 mov     [rsp+0E8h+n], 1
.text:00000000000041F5                 mov     r15d, 1
.text:00000000000041FB                 mov     [rsp+0E8h+s2], rax
.text:0000000000004200                 jmp     loc_35C3
.text:0000000000004205 ; ---------------------------------------------------------------------------
.text:0000000000004205
.text:0000000000004205 loc_4205:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004205                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:0000000000004205                 lea     rax, unk_8873   ; jumptable 00000000000121F1 case 6
.text:000000000000420C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004211                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004216                 xor     r12d, r12d
.text:0000000000004219                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004222                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004227                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000422C                 mov     [rsp+0E8h+n], 1
.text:0000000000004235                 xor     r15d, r15d
.text:0000000000004238                 mov     [rsp+0E8h+s2], rax
.text:000000000000423D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004245                 jmp     loc_35C3
.text:000000000000424A ; ---------------------------------------------------------------------------
.text:000000000000424A
.text:000000000000424A loc_424A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000424A                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:000000000000424A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000424F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004254                 xor     r12d, r12d
.text:0000000000004257                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004260                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004265                 xor     r15d, r15d
.text:0000000000004268                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000426D                 mov     [rsp+0E8h+n], 0
.text:0000000000004276                 mov     [rsp+0E8h+s2], 0
.text:000000000000427F                 jmp     loc_35C3
.text:0000000000004284 ; ---------------------------------------------------------------------------
.text:0000000000004284
.text:0000000000004284 loc_4284:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004284                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:0000000000004284                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004289                 jz      short loc_42E1
.text:000000000000428B                 lea     rsi, asc_8875   ; "`"
.text:0000000000004292                 xor     edi, edi        ; domainname
.text:0000000000004294                 mov     edx, 5          ; category
.text:0000000000004299                 call    _dcgettext
.text:000000000000429E                 mov     rcx, rax
.text:00000000000042A1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000042A6                 lea     rax, asc_8875   ; "`"
.text:00000000000042AD                 cmp     rcx, rax
.text:00000000000042B0                 jz      loc_464E
.text:00000000000042B6
.text:00000000000042B6 loc_42B6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000042B6                 lea     rsi, accept+5   ; msgid
.text:00000000000042BD                 xor     edi, edi        ; domainname
.text:00000000000042BF                 mov     edx, 5          ; category
.text:00000000000042C4                 call    _dcgettext
.text:00000000000042C9                 mov     rcx, rax
.text:00000000000042CC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000042D1                 lea     rax, accept+5   ; "'"
.text:00000000000042D8                 cmp     rcx, rax
.text:00000000000042DB                 jz      loc_4664
.text:00000000000042E1
.text:00000000000042E1 loc_42E1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000042E1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000042E1                 xor     r15d, r15d
.text:00000000000042E4                 test    ebx, ebx
.text:00000000000042E6                 jz      loc_44AD
.text:00000000000042EC
.text:00000000000042EC loc_42EC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000042EC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000042EC                 test    ebx, ebx
.text:00000000000042EE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000042F3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000042F8                 xor     r12d, r12d
.text:00000000000042FB                 mov     rdi, rbx        ; s
.text:00000000000042FE                 call    _strlen
.text:0000000000004303                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004308                 mov     [rsp+0E8h+n], rax
.text:000000000000430D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004312                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004317                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004320                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004325                 jmp     loc_35C3
.text:000000000000432A ; ---------------------------------------------------------------------------
.text:000000000000432A
.text:000000000000432A loc_432A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000432A                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:000000000000432A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000432F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004334                 xor     r12d, r12d
.text:0000000000004337                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004340                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004345                 xor     r15d, r15d
.text:0000000000004348                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000434D                 mov     [rsp+0E8h+n], 0
.text:0000000000004356                 mov     [rsp+0E8h+s2], 0
.text:000000000000435F                 jmp     loc_35C3
.text:0000000000004364 ; ---------------------------------------------------------------------------
.text:0000000000004364
.text:0000000000004364 loc_4364:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004364                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:0000000000004364                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004369                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000436E                 xor     r12d, r12d
.text:0000000000004371                 mov     [rsp+0E8h+var_98], 0
.text:000000000000437A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000437F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004384                 jmp     loc_35A3
.text:0000000000004389 ; ---------------------------------------------------------------------------
.text:0000000000004389
.text:0000000000004389 loc_4389:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004389                 cmp     r13, r15
.text:000000000000438C                 jbe     short loc_4393
.text:000000000000438E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004393
.text:0000000000004393 loc_4393:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004393                 lea     rax, [rcx+2]
.text:0000000000004397                 cmp     r13, rax
.text:000000000000439A                 jbe     short loc_43A2
.text:000000000000439C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000043A2
.text:00000000000043A2 loc_43A2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000043A2                 mov     eax, r12d
.text:00000000000043A5                 lea     r15, [rcx+3]
.text:00000000000043A9                 xor     r12d, r12d
.text:00000000000043AC                 mov     ebx, 30h ; '0'
.text:00000000000043B1                 jmp     loc_3718
.text:00000000000043B1 ; ---------------------------------------------------------------------------
.text:00000000000043B6                 align 20h
.text:00000000000043C0
.text:00000000000043C0 loc_43C0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000043C0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000043C5                 mov     rbp, r11
.text:00000000000043C8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000043CC                 jmp     loc_4079
.text:00000000000043D1 ; ---------------------------------------------------------------------------
.text:00000000000043D1
.text:00000000000043D1 loc_43D1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000043D1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000043D6                 xor     r12d, r12d
.text:00000000000043D9                 jmp     loc_3EE0
.text:00000000000043DE ; ---------------------------------------------------------------------------
.text:00000000000043DE
.text:00000000000043DE loc_43DE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000043DE                 xor     r10d, r10d
.text:00000000000043E1                 jmp     loc_3F9D
.text:00000000000043E6 ; ---------------------------------------------------------------------------
.text:00000000000043E6
.text:00000000000043E6 loc_43E6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000043E6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000043EF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000043F4                 xor     r12d, r12d
.text:00000000000043F7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000043FC                 jmp     loc_41DB
.text:0000000000004401 ; ---------------------------------------------------------------------------
.text:0000000000004401
.text:0000000000004401 loc_4401:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000004401                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004406                 mov     rsi, r14
.text:0000000000004409                 mov     rcx, r13
.text:000000000000440C                 mov     rax, rbx
.text:000000000000440F                 mov     rdi, rbx
.text:0000000000004412                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004418                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000441D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000004425                 cmp     rsi, r11
.text:0000000000004428                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000442E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004436                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000443B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004440                 jnb     short loc_4468
.text:0000000000004442                 cmp     byte ptr [rcx], 0
.text:0000000000004445                 jnz     short loc_4457
.text:0000000000004447                 jmp     short loc_4468
.text:0000000000004447 ; ---------------------------------------------------------------------------
.text:0000000000004449                 align 10h
.text:0000000000004450
.text:0000000000004450 loc_4450:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000004450                 cmp     byte ptr [r9+rax], 0
.text:0000000000004455                 jz      short loc_4465
.text:0000000000004457
.text:0000000000004457 loc_4457:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000004457                 add     rax, 1
.text:000000000000445B                 lea     rdx, [rbp+rax+0]
.text:0000000000004460                 cmp     r11, rdx
.text:0000000000004463                 ja      short loc_4450
.text:0000000000004465
.text:0000000000004465 loc_4465:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000004465                 mov     rdi, rax
.text:0000000000004468
.text:0000000000004468 loc_4468:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000004468                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000004468                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000446D                 xor     r12d, r12d
.text:0000000000004470                 jmp     loc_3ED6
.text:0000000000004475 ; ---------------------------------------------------------------------------
.text:0000000000004475
.text:0000000000004475 loc_4475:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000004475                 mov     rdi, rbx
.text:0000000000004478                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000447E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004483                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004489                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004491                 xor     r12d, r12d
.text:0000000000004494                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004499                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000449E                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000044A3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000044A8                 jmp     loc_3ED6
.text:00000000000044AD ; ---------------------------------------------------------------------------
.text:00000000000044AD
.text:00000000000044AD loc_44AD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000044AD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000044B2                 movzx   eax, byte ptr [rdx]
.text:00000000000044B5                 test    al, al
.text:00000000000044B7                 jz      loc_42EC
.text:00000000000044BD                 nop     dword ptr [rax]
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000044C0                 cmp     r13, r15
.text:00000000000044C3                 jbe     short loc_44C9
.text:00000000000044C5                 mov     [r14+r15], al
.text:00000000000044C9
.text:00000000000044C9 loc_44C9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000044C9                 add     r15, 1
.text:00000000000044CD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000044D2                 test    al, al
.text:00000000000044D4                 jnz     short loc_44C0
.text:00000000000044D6                 jmp     loc_42EC
.text:00000000000044DB ; ---------------------------------------------------------------------------
.text:00000000000044DB
.text:00000000000044DB loc_44DB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000044DB                 mov     eax, edx
.text:00000000000044DD                 jmp     loc_3A37
.text:00000000000044E2 ; ---------------------------------------------------------------------------
.text:00000000000044E2
.text:00000000000044E2 loc_44E2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000044E2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000044E6                 cmp     bl, 3Eh ; '>'
.text:00000000000044E9                 ja      loc_3D60
.text:00000000000044EF                 mov     rax, 7000A38200000000h
.text:00000000000044F9                 bt      rax, rbx
.text:00000000000044FD                 jnb     loc_3D60
.text:0000000000004503                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004508                 jnz     loc_46F2
.text:000000000000450E                 cmp     r13, r15
.text:0000000000004511                 jbe     short loc_4518
.text:0000000000004513                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000004518
.text:0000000000004518 loc_4518:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000004518                 lea     rax, [r15+1]
.text:000000000000451C                 cmp     r13, rax
.text:000000000000451F                 jbe     short loc_4527
.text:0000000000004521                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000004527
.text:0000000000004527 loc_4527:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000004527                 lea     rax, [r15+2]
.text:000000000000452B                 cmp     r13, rax
.text:000000000000452E                 jbe     short loc_4536
.text:0000000000004530                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000004536
.text:0000000000004536 loc_4536:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000004536                 lea     rax, [r15+3]
.text:000000000000453A                 cmp     r13, rax
.text:000000000000453D                 jbe     short loc_4545
.text:000000000000453F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000004545
.text:0000000000004545 loc_4545:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000004545                 add     r15, 4
.text:0000000000004549                 xor     edx, edx
.text:000000000000454B                 xor     r12d, r12d
.text:000000000000454E                 xor     eax, eax
.text:0000000000004550                 mov     rbp, rcx
.text:0000000000004553                 jmp     loc_3718
.text:0000000000004558 ; ---------------------------------------------------------------------------
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004558                                         ; DATA XREF: .rodata:jpt_3581↓o
.text:0000000000004558                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000455A                 jz      loc_46E8
.text:0000000000004560                 lea     rax, accept+5   ; "'"
.text:0000000000004567                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000456C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004571                 xor     r12d, r12d
.text:0000000000004574                 mov     [rsp+0E8h+var_98], 0
.text:000000000000457D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004582                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004587                 mov     [rsp+0E8h+n], 1
.text:0000000000004590                 xor     r15d, r15d
.text:0000000000004593                 mov     [rsp+0E8h+s2], rax
.text:0000000000004598                 jmp     loc_35C3
.text:0000000000004598 ; ---------------------------------------------------------------------------
.text:000000000000459D                 align 20h
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000045A0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000045A0                 mov     rbp, r11
.text:00000000000045A3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000045A8                 jmp     loc_4079
.text:00000000000045AD ; ---------------------------------------------------------------------------
.text:00000000000045AD
.text:00000000000045AD loc_45AD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000045AD                 lea     rax, unk_8873
.text:00000000000045B4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000045B9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000045BE                 xor     r12d, r12d
.text:00000000000045C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000045CA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000045CF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000045D4                 mov     [rsp+0E8h+n], 1
.text:00000000000045DD                 xor     r15d, r15d
.text:00000000000045E0                 mov     [rsp+0E8h+s2], rax
.text:00000000000045E5                 jmp     loc_35C3
.text:00000000000045EA ; ---------------------------------------------------------------------------
.text:00000000000045EA
.text:00000000000045EA loc_45EA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000045EA                 mov     eax, edx
.text:00000000000045EC
.text:00000000000045EC loc_45EC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000045EC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000045EC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000045F1                 test    rbx, rbx
.text:00000000000045F4                 jz      short loc_4622
.text:00000000000045F6                 test    al, al
.text:00000000000045F8                 jz      short loc_4622
.text:00000000000045FA                 movzx   ecx, byte ptr [rbx]
.text:00000000000045FD                 mov     rax, rbx
.text:0000000000004600                 test    cl, cl
.text:0000000000004602                 jz      short loc_4622
.text:0000000000004604                 mov     rdx, r15
.text:0000000000004607                 sub     rax, r15
.text:000000000000460A
.text:000000000000460A loc_460A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000460A                 cmp     r13, rdx
.text:000000000000460D                 jbe     short loc_4613
.text:000000000000460F                 mov     [r14+rdx], cl
.text:0000000000004613
.text:0000000000004613 loc_4613:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004613                 add     rdx, 1
.text:0000000000004617                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000461B                 test    cl, cl
.text:000000000000461D                 jnz     short loc_460A
.text:000000000000461F                 mov     r15, rdx
.text:0000000000004622
.text:0000000000004622 loc_4622:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004622                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004622                 cmp     r13, r15
.text:0000000000004625                 jbe     loc_40C9
.text:000000000000462B                 mov     byte ptr [r14+r15], 0
.text:0000000000004630                 jmp     loc_40C9
.text:0000000000004635 ; ---------------------------------------------------------------------------
.text:0000000000004635
.text:0000000000004635 loc_4635:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004635                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000463A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000463F                 mov     rbp, r11
.text:0000000000004642                 setz    al
.text:0000000000004645                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004649                 jmp     loc_4079
.text:000000000000464E ; ---------------------------------------------------------------------------
.text:000000000000464E
.text:000000000000464E loc_464E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000464E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004652                 mov     rdi, rcx
.text:0000000000004655                 call    gettext_quote
.text:000000000000465A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000465F                 jmp     loc_42B6
.text:0000000000004664 ; ---------------------------------------------------------------------------
.text:0000000000004664
.text:0000000000004664 loc_4664:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004664                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004668                 mov     rdi, rcx
.text:000000000000466B                 call    gettext_quote
.text:0000000000004670                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004675                 jmp     loc_42E1
.text:000000000000467A ; ---------------------------------------------------------------------------
.text:000000000000467A
.text:000000000000467A loc_467A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000467A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000467F                 mov     rbp, r11
.text:0000000000004682                 mov     eax, edx
.text:0000000000004684                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004688                 jmp     loc_4079
.text:000000000000468D ; ---------------------------------------------------------------------------
.text:000000000000468D
.text:000000000000468D loc_468D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000468D                 sub     rsp, 8
.text:0000000000004691                 mov     r8d, 5
.text:0000000000004697                 mov     rcx, r11
.text:000000000000469A                 push    [rsp+0F0h+var_88]
.text:000000000000469E                 push    [rsp+0F8h+var_80]
.text:00000000000046A2                 mov     rdi, r14
.text:00000000000046A5                 push    [rsp+100h+var_C8]
.text:00000000000046A9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000046B1                 mov     rdx, [rsp+108h+s]
.text:00000000000046B6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000046BB                 call    quotearg_buffer_restyled
.text:00000000000046C0                 add     rsp, 20h
.text:00000000000046C4                 mov     r15, rax
.text:00000000000046C7                 jmp     loc_40C9
.text:00000000000046CC ; ---------------------------------------------------------------------------
.text:00000000000046CC
.text:00000000000046CC loc_46CC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000046CC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000046D1                 jmp     loc_45EC
.text:00000000000046D6 ; ---------------------------------------------------------------------------
.text:00000000000046D6
.text:00000000000046D6 loc_46D6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000046D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000046DE                 jmp     loc_4079
.text:00000000000046E3 ; ---------------------------------------------------------------------------
.text:00000000000046E3
.text:00000000000046E3 loc_46E3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000046E3                 call    ___stack_chk_fail
.text:00000000000046E8 ; ---------------------------------------------------------------------------
.text:00000000000046E8
.text:00000000000046E8 loc_46E8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000046E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000046ED                 jmp     loc_4161
.text:00000000000046F2 ; ---------------------------------------------------------------------------
.text:00000000000046F2
.text:00000000000046F2 loc_46F2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000046F2                 mov     rbp, r11
.text:00000000000046F5                 jmp     loc_4090
.text:00000000000046FA ; ---------------------------------------------------------------------------
.text:00000000000046FA
.text:00000000000046FA loc_46FA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000046FA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000046FF                 xor     eax, eax
.text:0000000000004701                 xor     r12d, r12d
.text:0000000000004704                 mov     [rsp+0E8h+var_98], 0
.text:000000000000470D                 jmp     loc_3CB4
.text:0000000000004712 ; ---------------------------------------------------------------------------
.text:0000000000004712
.text:0000000000004712 loc_4712:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004712                 mov     rdx, r13
.text:0000000000004715                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000471A                 jmp     loc_3D12
.text:000000000000471F ; ---------------------------------------------------------------------------
.text:000000000000471F
.text:000000000000471F def_3581:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000471F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000471F ; } // starts at 34F0
.text:000000000000471F quotearg_buffer_restyled endp
.text:000000000000471F
.text:000000000000471F ; ---------------------------------------------------------------------------
.text:0000000000004724                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730
.text:0000000000004730 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004730                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004730
.text:0000000000004730 var_50          = qword ptr -50h
.text:0000000000004730 var_48          = qword ptr -48h
.text:0000000000004730 var_40          = dword ptr -40h
.text:0000000000004730 var_3C          = dword ptr -3Ch
.text:0000000000004730
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 push    r15
.text:0000000000004732                 push    r14
.text:0000000000004734                 movsxd  r15, edi
.text:0000000000004737                 push    r13
.text:0000000000004739                 push    r12
.text:000000000000473B                 mov     r14, rdx
.text:000000000000473E                 push    rbp
.text:000000000000473F                 push    rbx
.text:0000000000004740                 mov     rbp, rcx
.text:0000000000004743                 sub     rsp, 28h
.text:0000000000004747                 mov     [rsp+58h+var_50], rsi
.text:000000000000474C                 call    ___errno_location
.text:0000000000004751                 mov     r13, rax
.text:0000000000004754                 mov     eax, [rax]
.text:0000000000004756                 test    r15d, r15d
.text:0000000000004759                 mov     rbx, cs:slotvec
.text:0000000000004760                 mov     [rsp+58h+var_40], eax
.text:0000000000004764                 js      loc_48D1
.text:000000000000476A                 cmp     cs:nslots, r15d
.text:0000000000004771                 jg      short loc_47D5
.text:0000000000004773                 cmp     r15d, 7FFFFFFFh
.text:000000000000477A                 jz      loc_48D6
.text:0000000000004780                 lea     r12d, [r15+1]
.text:0000000000004784                 lea     rax, slotvec0
.text:000000000000478B                 movsxd  rsi, r12d
.text:000000000000478E                 shl     rsi, 4
.text:0000000000004792                 cmp     rbx, rax
.text:0000000000004795                 jz      loc_48B0
.text:000000000000479B                 mov     rdi, rbx
.text:000000000000479E                 call    xrealloc
.text:00000000000047A3                 mov     rbx, rax
.text:00000000000047A6                 mov     cs:slotvec, rax
.text:00000000000047AD
.text:00000000000047AD loc_47AD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000047AD                 movsxd  rdi, cs:nslots
.text:00000000000047B4                 mov     edx, r12d
.text:00000000000047B7                 xor     esi, esi        ; c
.text:00000000000047B9                 sub     edx, edi
.text:00000000000047BB                 shl     rdi, 4
.text:00000000000047BF                 movsxd  rdx, edx
.text:00000000000047C2                 add     rdi, rbx        ; s
.text:00000000000047C5                 shl     rdx, 4          ; n
.text:00000000000047C9                 call    _memset
.text:00000000000047CE                 mov     cs:nslots, r12d
.text:00000000000047D5
.text:00000000000047D5 loc_47D5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000047D5                 mov     eax, [rbp+4]
.text:00000000000047D8                 shl     r15, 4
.text:00000000000047DC                 sub     rsp, 8
.text:00000000000047E0                 add     rbx, r15
.text:00000000000047E3                 lea     r15, [rbp+8]
.text:00000000000047E7                 mov     r8d, [rbp+0]
.text:00000000000047EB                 mov     r11, [rbx]
.text:00000000000047EE                 mov     r12, [rbx+8]
.text:00000000000047F2                 mov     rcx, r14
.text:00000000000047F5                 or      eax, 1
.text:00000000000047F8                 mov     [rsp+60h+var_3C], eax
.text:00000000000047FC                 push    qword ptr [rbp+30h]
.text:00000000000047FF                 mov     r9d, eax
.text:0000000000004802                 push    qword ptr [rbp+28h]
.text:0000000000004805                 push    r15
.text:0000000000004807                 mov     rsi, r11
.text:000000000000480A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000480F                 mov     rdi, r12
.text:0000000000004812                 mov     [rsp+78h+var_48], r11
.text:0000000000004817                 call    quotearg_buffer_restyled
.text:000000000000481C                 add     rsp, 20h
.text:0000000000004820                 mov     r11, [rsp+58h+var_48]
.text:0000000000004825                 cmp     r11, rax
.text:0000000000004828                 ja      short loc_4891
.text:000000000000482A                 lea     rsi, [rax+1]
.text:000000000000482E                 lea     rax, slot0
.text:0000000000004835                 cmp     r12, rax
.text:0000000000004838                 mov     [rbx], rsi
.text:000000000000483B                 jz      short loc_484F
.text:000000000000483D                 mov     rdi, r12        ; ptr
.text:0000000000004840                 mov     [rsp+58h+var_48], rsi
.text:0000000000004845                 call    _free
.text:000000000000484A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000484F
.text:000000000000484F loc_484F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000484F                 mov     rdi, rsi
.text:0000000000004852                 mov     [rsp+58h+var_48], rsi
.text:0000000000004857                 call    xmalloc
.text:000000000000485C                 sub     rsp, 8
.text:0000000000004860                 mov     [rbx+8], rax
.text:0000000000004864                 mov     r8d, [rbp+0]
.text:0000000000004868                 push    qword ptr [rbp+30h]
.text:000000000000486B                 push    qword ptr [rbp+28h]
.text:000000000000486E                 mov     rcx, r14
.text:0000000000004871                 push    r15
.text:0000000000004873                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004878                 mov     rdi, rax
.text:000000000000487B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004880                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004885                 mov     r12, rax
.text:0000000000004888                 call    quotearg_buffer_restyled
.text:000000000000488D                 add     rsp, 20h
.text:0000000000004891
.text:0000000000004891 loc_4891:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004891                 mov     eax, [rsp+58h+var_40]
.text:0000000000004895                 mov     [r13+0], eax
.text:0000000000004899                 add     rsp, 28h
.text:000000000000489D                 mov     rax, r12
.text:00000000000048A0                 pop     rbx
.text:00000000000048A1                 pop     rbp
.text:00000000000048A2                 pop     r12
.text:00000000000048A4                 pop     r13
.text:00000000000048A6                 pop     r14
.text:00000000000048A8                 pop     r15
.text:00000000000048AA                 retn
.text:00000000000048AA ; ---------------------------------------------------------------------------
.text:00000000000048AB                 align 10h
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000048B0                 xor     edi, edi
.text:00000000000048B2                 call    xrealloc
.text:00000000000048B7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000048BF                 mov     rbx, rax
.text:00000000000048C2                 mov     cs:slotvec, rax
.text:00000000000048C9                 movups  xmmword ptr [rax], xmm0
.text:00000000000048CC                 jmp     loc_47AD
.text:00000000000048D1 ; ---------------------------------------------------------------------------
.text:00000000000048D1
.text:00000000000048D1 loc_48D1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000048D1                 call    _abort
.text:00000000000048D6 ; ---------------------------------------------------------------------------
.text:00000000000048D6
.text:00000000000048D6 loc_48D6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000048D6                 call    xalloc_die
.text:00000000000048D6 ; } // starts at 4730
.text:00000000000048D6 quotearg_n_options endp
.text:00000000000048D6
.text:00000000000048D6 ; ---------------------------------------------------------------------------
.text:00000000000048DB                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0 ; Attributes: info_from_lumina
.text:00000000000048E0
.text:00000000000048E0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000048E0                 public clone_quoting_options
.text:00000000000048E0 clone_quoting_options proc near
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 push    r12
.text:00000000000048E2                 push    rbp
.text:00000000000048E3                 push    rbx
.text:00000000000048E4                 mov     rbx, rdi
.text:00000000000048E7                 call    ___errno_location
.text:00000000000048EC                 mov     r12d, [rax]
.text:00000000000048EF                 mov     rbp, rax
.text:00000000000048F2                 lea     rax, default_quoting_options
.text:00000000000048F9                 test    rbx, rbx
.text:00000000000048FC                 mov     esi, 38h ; '8'  ; n
.text:0000000000004901                 cmovz   rbx, rax
.text:0000000000004905                 mov     rdi, rbx        ; src
.text:0000000000004908                 call    xmemdup
.text:000000000000490D                 mov     [rbp+0], r12d
.text:0000000000004911                 pop     rbx
.text:0000000000004912                 pop     rbp
.text:0000000000004913                 pop     r12
.text:0000000000004915                 retn
.text:0000000000004915 ; } // starts at 48E0
.text:0000000000004915 clone_quoting_options endp
.text:0000000000004915
.text:0000000000004915 ; ---------------------------------------------------------------------------
.text:0000000000004916                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920
.text:0000000000004920                 public get_quoting_style
.text:0000000000004920 get_quoting_style proc near
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 lea     rax, default_quoting_options
.text:0000000000004927                 test    rdi, rdi
.text:000000000000492A                 cmovz   rdi, rax
.text:000000000000492E                 mov     eax, [rdi]
.text:0000000000004930                 retn
.text:0000000000004930 ; } // starts at 4920
.text:0000000000004930 get_quoting_style endp
.text:0000000000004930
.text:0000000000004930 ; ---------------------------------------------------------------------------
.text:0000000000004931                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940
.text:0000000000004940                 public set_quoting_style
.text:0000000000004940 set_quoting_style proc near
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 lea     rax, default_quoting_options
.text:0000000000004947                 test    rdi, rdi
.text:000000000000494A                 cmovz   rdi, rax
.text:000000000000494E                 mov     [rdi], esi
.text:0000000000004950                 retn
.text:0000000000004950 ; } // starts at 4940
.text:0000000000004950 set_quoting_style endp
.text:0000000000004950
.text:0000000000004950 ; ---------------------------------------------------------------------------
.text:0000000000004951                 align 20h
.text:0000000000004960
.text:0000000000004960 ; =============== S U B R O U T I N E =======================================
.text:0000000000004960
.text:0000000000004960 ; Attributes: info_from_lumina
.text:0000000000004960
.text:0000000000004960 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004960                 public set_char_quoting
.text:0000000000004960 set_char_quoting proc near
.text:0000000000004960 ; __unwind {
.text:0000000000004960                 lea     rax, default_quoting_options
.text:0000000000004967                 test    rdi, rdi
.text:000000000000496A                 mov     ecx, esi
.text:000000000000496C                 cmovz   rdi, rax
.text:0000000000004970                 mov     eax, esi
.text:0000000000004972                 and     ecx, 1Fh
.text:0000000000004975                 shr     al, 5
.text:0000000000004978                 movzx   eax, al
.text:000000000000497B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004980                 mov     esi, [rdi]
.text:0000000000004982                 mov     eax, esi
.text:0000000000004984                 shr     eax, cl
.text:0000000000004986                 xor     edx, eax
.text:0000000000004988                 and     eax, 1
.text:000000000000498B                 and     edx, 1
.text:000000000000498E                 shl     edx, cl
.text:0000000000004990                 xor     edx, esi
.text:0000000000004992                 mov     [rdi], edx
.text:0000000000004994                 retn
.text:0000000000004994 ; } // starts at 4960
.text:0000000000004994 set_char_quoting endp
.text:0000000000004994
.text:0000000000004994 ; ---------------------------------------------------------------------------
.text:0000000000004995                 align 20h
.text:00000000000049A0
.text:00000000000049A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049A0
.text:00000000000049A0
.text:00000000000049A0                 public set_quoting_flags
.text:00000000000049A0 set_quoting_flags proc near
.text:00000000000049A0 ; __unwind {
.text:00000000000049A0                 lea     rax, default_quoting_options
.text:00000000000049A7                 test    rdi, rdi
.text:00000000000049AA                 cmovz   rdi, rax
.text:00000000000049AE                 mov     eax, [rdi+4]
.text:00000000000049B1                 mov     [rdi+4], esi
.text:00000000000049B4                 retn
.text:00000000000049B4 ; } // starts at 49A0
.text:00000000000049B4 set_quoting_flags endp
.text:00000000000049B4
.text:00000000000049B4 ; ---------------------------------------------------------------------------
.text:00000000000049B5                 align 20h
.text:00000000000049C0
.text:00000000000049C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049C0
.text:00000000000049C0 ; Attributes: info_from_lumina
.text:00000000000049C0
.text:00000000000049C0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000049C0                 public set_custom_quoting
.text:00000000000049C0 set_custom_quoting proc near
.text:00000000000049C0 ; __unwind {
.text:00000000000049C0                 lea     rax, default_quoting_options
.text:00000000000049C7                 test    rdi, rdi
.text:00000000000049CA                 cmovz   rdi, rax
.text:00000000000049CE                 test    rsi, rsi
.text:00000000000049D1                 mov     dword ptr [rdi], 0Ah
.text:00000000000049D7                 jz      short loc_49E7
.text:00000000000049D9                 test    rdx, rdx
.text:00000000000049DC                 jz      short loc_49E7
.text:00000000000049DE                 mov     [rdi+28h], rsi
.text:00000000000049E2                 mov     [rdi+30h], rdx
.text:00000000000049E6                 retn
.text:00000000000049E7 ; ---------------------------------------------------------------------------
.text:00000000000049E7
.text:00000000000049E7 loc_49E7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000049E7                                         ; set_custom_quoting+1C↑j
.text:00000000000049E7                 sub     rsp, 8
.text:00000000000049EB                 call    _abort
.text:00000000000049EB ; } // starts at 49C0
.text:00000000000049EB set_custom_quoting endp
.text:00000000000049EB
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0 ; Attributes: info_from_lumina
.text:00000000000049F0
.text:00000000000049F0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000049F0                 public quotearg_buffer
.text:00000000000049F0 quotearg_buffer proc near
.text:00000000000049F0
.text:00000000000049F0 var_40          = qword ptr -40h
.text:00000000000049F0
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 push    r15
.text:00000000000049F2                 push    r14
.text:00000000000049F4                 lea     rax, default_quoting_options
.text:00000000000049FB                 push    r13
.text:00000000000049FD                 push    r12
.text:00000000000049FF                 mov     r13, rdi
.text:0000000000004A02                 push    rbp
.text:0000000000004A03                 push    rbx
.text:0000000000004A04                 mov     rbx, r8
.text:0000000000004A07                 mov     r14, rsi
.text:0000000000004A0A                 mov     r15, rdx
.text:0000000000004A0D                 sub     rsp, 18h
.text:0000000000004A11                 test    r8, r8
.text:0000000000004A14                 cmovz   rbx, rax
.text:0000000000004A18                 mov     [rsp+48h+var_40], rcx
.text:0000000000004A1D                 call    ___errno_location
.text:0000000000004A22                 mov     r12d, [rax]
.text:0000000000004A25                 mov     rbp, rax
.text:0000000000004A28                 lea     rax, [rbx+8]
.text:0000000000004A2C                 sub     rsp, 8
.text:0000000000004A30                 mov     r9d, [rbx+4]
.text:0000000000004A34                 push    qword ptr [rbx+30h]
.text:0000000000004A37                 mov     r8d, [rbx]
.text:0000000000004A3A                 push    qword ptr [rbx+28h]
.text:0000000000004A3D                 mov     rdx, r15
.text:0000000000004A40                 push    rax
.text:0000000000004A41                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004A46                 mov     rsi, r14
.text:0000000000004A49                 mov     rdi, r13
.text:0000000000004A4C                 call    quotearg_buffer_restyled
.text:0000000000004A51                 mov     [rbp+0], r12d
.text:0000000000004A55                 add     rsp, 38h
.text:0000000000004A59                 pop     rbx
.text:0000000000004A5A                 pop     rbp
.text:0000000000004A5B                 pop     r12
.text:0000000000004A5D                 pop     r13
.text:0000000000004A5F                 pop     r14
.text:0000000000004A61                 pop     r15
.text:0000000000004A63                 retn
.text:0000000000004A63 ; } // starts at 49F0
.text:0000000000004A63 quotearg_buffer endp
.text:0000000000004A63
.text:0000000000004A63 ; ---------------------------------------------------------------------------
.text:0000000000004A64                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70 ; Attributes: info_from_lumina
.text:0000000000004A70
.text:0000000000004A70 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004A70                 public quotearg_alloc_mem
.text:0000000000004A70 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004A70
.text:0000000000004A70 var_5C          = dword ptr -5Ch
.text:0000000000004A70 var_58          = qword ptr -58h
.text:0000000000004A70 var_50          = qword ptr -50h
.text:0000000000004A70 var_48          = qword ptr -48h
.text:0000000000004A70 var_40          = qword ptr -40h
.text:0000000000004A70
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 push    r15
.text:0000000000004A72                 push    r14
.text:0000000000004A74                 lea     rax, default_quoting_options
.text:0000000000004A7B                 push    r13
.text:0000000000004A7D                 push    r12
.text:0000000000004A7F                 mov     r12, rdx
.text:0000000000004A82                 push    rbp
.text:0000000000004A83                 push    rbx
.text:0000000000004A84                 mov     rbx, rcx
.text:0000000000004A87                 mov     r14, rdi
.text:0000000000004A8A                 mov     r15, rsi
.text:0000000000004A8D                 sub     rsp, 38h
.text:0000000000004A91                 test    rcx, rcx
.text:0000000000004A94                 cmovz   rbx, rax
.text:0000000000004A98                 xor     ebp, ebp
.text:0000000000004A9A                 call    ___errno_location
.text:0000000000004A9F                 test    r12, r12
.text:0000000000004AA2                 mov     r13, rax
.text:0000000000004AA5                 mov     eax, [rax]
.text:0000000000004AA7                 setz    bpl
.text:0000000000004AAB                 or      ebp, [rbx+4]
.text:0000000000004AAE                 lea     r10, [rbx+8]
.text:0000000000004AB2                 sub     rsp, 8
.text:0000000000004AB6                 mov     r8d, [rbx]
.text:0000000000004AB9                 mov     rcx, r15
.text:0000000000004ABC                 mov     [rsp+70h+var_5C], eax
.text:0000000000004AC0                 push    qword ptr [rbx+30h]
.text:0000000000004AC3                 mov     rdx, r14
.text:0000000000004AC6                 push    qword ptr [rbx+28h]
.text:0000000000004AC9                 push    r10
.text:0000000000004ACB                 xor     esi, esi
.text:0000000000004ACD                 mov     r9d, ebp
.text:0000000000004AD0                 xor     edi, edi
.text:0000000000004AD2                 mov     [rsp+88h+var_48], r10
.text:0000000000004AD7                 call    quotearg_buffer_restyled
.text:0000000000004ADC                 lea     rsi, [rax+1]
.text:0000000000004AE0                 mov     [rsp+88h+var_40], rax
.text:0000000000004AE5                 add     rsp, 20h
.text:0000000000004AE9                 mov     rdi, rsi
.text:0000000000004AEC                 mov     [rsp+68h+var_50], rsi
.text:0000000000004AF1                 call    xmalloc
.text:0000000000004AF6                 mov     [rsp+68h+var_58], rax
.text:0000000000004AFB                 sub     rsp, 8
.text:0000000000004AFF                 push    qword ptr [rbx+30h]
.text:0000000000004B02                 push    qword ptr [rbx+28h]
.text:0000000000004B05                 mov     r10, [rsp+80h+var_48]
.text:0000000000004B0A                 mov     r9d, ebp
.text:0000000000004B0D                 mov     r8d, [rbx]
.text:0000000000004B10                 mov     rcx, r15
.text:0000000000004B13                 mov     rdx, r14
.text:0000000000004B16                 mov     rdi, rax
.text:0000000000004B19                 push    r10
.text:0000000000004B1B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004B20                 call    quotearg_buffer_restyled
.text:0000000000004B25                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004B29                 add     rsp, 20h
.text:0000000000004B2D                 test    r12, r12
.text:0000000000004B30                 mov     [r13+0], eax
.text:0000000000004B34                 jz      short loc_4B3F
.text:0000000000004B36                 mov     r11, [rsp+68h+var_40]
.text:0000000000004B3B                 mov     [r12], r11
.text:0000000000004B3F
.text:0000000000004B3F loc_4B3F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000004B3F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004B44                 add     rsp, 38h
.text:0000000000004B48                 pop     rbx
.text:0000000000004B49                 pop     rbp
.text:0000000000004B4A                 pop     r12
.text:0000000000004B4C                 pop     r13
.text:0000000000004B4E                 pop     r14
.text:0000000000004B50                 pop     r15
.text:0000000000004B52                 retn
.text:0000000000004B52 ; } // starts at 4A70
.text:0000000000004B52 quotearg_alloc_mem endp
.text:0000000000004B52
.text:0000000000004B52 ; ---------------------------------------------------------------------------
.text:0000000000004B53                 align 20h
.text:0000000000004B60
.text:0000000000004B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B60
.text:0000000000004B60
.text:0000000000004B60                 public quotearg_alloc
.text:0000000000004B60 quotearg_alloc  proc near
.text:0000000000004B60 ; __unwind {
.text:0000000000004B60                 mov     rcx, rdx
.text:0000000000004B63                 xor     edx, edx
.text:0000000000004B65                 jmp     quotearg_alloc_mem
.text:0000000000004B65 ; } // starts at 4B60
.text:0000000000004B65 quotearg_alloc  endp
.text:0000000000004B65
.text:0000000000004B65 ; ---------------------------------------------------------------------------
.text:0000000000004B6A                 align 10h
.text:0000000000004B70
.text:0000000000004B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B70
.text:0000000000004B70 ; Attributes: info_from_lumina
.text:0000000000004B70
.text:0000000000004B70 ; void __cdecl quotearg_free()
.text:0000000000004B70                 public quotearg_free
.text:0000000000004B70 quotearg_free   proc near
.text:0000000000004B70 ; __unwind {
.text:0000000000004B70                 mov     eax, cs:nslots
.text:0000000000004B76                 push    r12
.text:0000000000004B78                 mov     r12, cs:slotvec
.text:0000000000004B7F                 push    rbp
.text:0000000000004B80                 push    rbx
.text:0000000000004B81                 cmp     eax, 1
.text:0000000000004B84                 jle     short loc_4BB1
.text:0000000000004B86                 sub     eax, 2
.text:0000000000004B89                 lea     rbx, [r12+18h]
.text:0000000000004B8E                 shl     rax, 4
.text:0000000000004B92                 lea     rbp, [r12+rax+28h]
.text:0000000000004B97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004BA0                 mov     rdi, [rbx]      ; ptr
.text:0000000000004BA3                 add     rbx, 10h
.text:0000000000004BA7                 call    _free
.text:0000000000004BAC                 cmp     rbx, rbp
.text:0000000000004BAF                 jnz     short loc_4BA0
.text:0000000000004BB1
.text:0000000000004BB1 loc_4BB1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004BB1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004BB6                 lea     rbx, slot0
.text:0000000000004BBD                 cmp     rdi, rbx
.text:0000000000004BC0                 jz      short loc_4BD9
.text:0000000000004BC2                 call    _free
.text:0000000000004BC7                 mov     cs:slotvec0, 100h
.text:0000000000004BD2                 mov     cs:off_20B078, rbx
.text:0000000000004BD9
.text:0000000000004BD9 loc_4BD9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004BD9                 lea     rbx, slotvec0
.text:0000000000004BE0                 cmp     r12, rbx
.text:0000000000004BE3                 jz      short loc_4BF4
.text:0000000000004BE5                 mov     rdi, r12        ; ptr
.text:0000000000004BE8                 call    _free
.text:0000000000004BED                 mov     cs:slotvec, rbx
.text:0000000000004BF4
.text:0000000000004BF4 loc_4BF4:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004BF4                 pop     rbx
.text:0000000000004BF5                 mov     cs:nslots, 1
.text:0000000000004BFF                 pop     rbp
.text:0000000000004C00                 pop     r12
.text:0000000000004C02                 retn
.text:0000000000004C02 ; } // starts at 4B70
.text:0000000000004C02 quotearg_free   endp
.text:0000000000004C02
.text:0000000000004C02 ; ---------------------------------------------------------------------------
.text:0000000000004C03                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10
.text:0000000000004C10                 public quotearg_n
.text:0000000000004C10 quotearg_n      proc near
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 lea     rcx, default_quoting_options
.text:0000000000004C17                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C1E                 jmp     quotearg_n_options
.text:0000000000004C1E ; } // starts at 4C10
.text:0000000000004C1E quotearg_n      endp
.text:0000000000004C1E
.text:0000000000004C1E ; ---------------------------------------------------------------------------
.text:0000000000004C23                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30
.text:0000000000004C30                 public quotearg_n_mem
.text:0000000000004C30 quotearg_n_mem  proc near
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 lea     rcx, default_quoting_options
.text:0000000000004C37                 jmp     quotearg_n_options
.text:0000000000004C37 ; } // starts at 4C30
.text:0000000000004C37 quotearg_n_mem  endp
.text:0000000000004C37
.text:0000000000004C37 ; ---------------------------------------------------------------------------
.text:0000000000004C3C                 align 20h
.text:0000000000004C40
.text:0000000000004C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C40
.text:0000000000004C40
.text:0000000000004C40                 public quotearg
.text:0000000000004C40 quotearg        proc near
.text:0000000000004C40 ; __unwind {
.text:0000000000004C40                 lea     rcx, default_quoting_options
.text:0000000000004C47                 mov     rsi, rdi
.text:0000000000004C4A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C51                 xor     edi, edi
.text:0000000000004C53                 jmp     quotearg_n_options
.text:0000000000004C53 ; } // starts at 4C40
.text:0000000000004C53 quotearg        endp
.text:0000000000004C53
.text:0000000000004C53 ; ---------------------------------------------------------------------------
.text:0000000000004C58                 align 20h
.text:0000000000004C60
.text:0000000000004C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C60
.text:0000000000004C60
.text:0000000000004C60                 public quotearg_mem
.text:0000000000004C60 quotearg_mem    proc near
.text:0000000000004C60 ; __unwind {
.text:0000000000004C60                 lea     rcx, default_quoting_options
.text:0000000000004C67                 mov     rdx, rsi
.text:0000000000004C6A                 mov     rsi, rdi
.text:0000000000004C6D                 xor     edi, edi
.text:0000000000004C6F                 jmp     quotearg_n_options
.text:0000000000004C6F ; } // starts at 4C60
.text:0000000000004C6F quotearg_mem    endp
.text:0000000000004C6F
.text:0000000000004C6F ; ---------------------------------------------------------------------------
.text:0000000000004C74                 align 20h
.text:0000000000004C80
.text:0000000000004C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C80
.text:0000000000004C80 ; Attributes: info_from_lumina
.text:0000000000004C80
.text:0000000000004C80 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004C80                 public quotearg_n_style
.text:0000000000004C80 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004C80
.text:0000000000004C80 var_48          = dword ptr -48h
.text:0000000000004C80 var_44          = qword ptr -44h
.text:0000000000004C80 var_3C          = qword ptr -3Ch
.text:0000000000004C80 var_34          = qword ptr -34h
.text:0000000000004C80 var_2C          = qword ptr -2Ch
.text:0000000000004C80 var_24          = qword ptr -24h
.text:0000000000004C80 var_1C          = qword ptr -1Ch
.text:0000000000004C80 var_14          = dword ptr -14h
.text:0000000000004C80 var_10          = qword ptr -10h
.text:0000000000004C80
.text:0000000000004C80 ; __unwind {
.text:0000000000004C80                 sub     rsp, 48h
.text:0000000000004C84                 mov     rax, rdx
.text:0000000000004C87                 mov     rdx, fs:28h
.text:0000000000004C90                 mov     [rsp+48h+var_10], rdx
.text:0000000000004C95                 xor     edx, edx
.text:0000000000004C97                 cmp     esi, 0Ah
.text:0000000000004C9A                 jz      short loc_4D04
.text:0000000000004C9C                 mov     [rsp+48h+var_48], esi
.text:0000000000004C9F                 mov     rcx, rsp
.text:0000000000004CA2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004CA9                 mov     rsi, rax
.text:0000000000004CAC                 mov     [rsp+48h+var_44], 0
.text:0000000000004CB5                 mov     [rsp+48h+var_3C], 0
.text:0000000000004CBE                 mov     [rsp+48h+var_34], 0
.text:0000000000004CC7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004CD0                 mov     [rsp+48h+var_24], 0
.text:0000000000004CD9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004CE2                 mov     [rsp+48h+var_14], 0
.text:0000000000004CEA                 call    quotearg_n_options
.text:0000000000004CEF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004CF4                 xor     rcx, fs:28h
.text:0000000000004CFD                 jnz     short loc_4D09
.text:0000000000004CFF                 add     rsp, 48h
.text:0000000000004D03                 retn
.text:0000000000004D04 ; ---------------------------------------------------------------------------
.text:0000000000004D04
.text:0000000000004D04 loc_4D04:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004D04                 call    _abort
.text:0000000000004D09 ; ---------------------------------------------------------------------------
.text:0000000000004D09
.text:0000000000004D09 loc_4D09:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004D09                 call    ___stack_chk_fail
.text:0000000000004D09 ; } // starts at 4C80
.text:0000000000004D09 quotearg_n_style endp
.text:0000000000004D09
.text:0000000000004D09 ; ---------------------------------------------------------------------------
.text:0000000000004D0E                 align 10h
.text:0000000000004D10
.text:0000000000004D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D10
.text:0000000000004D10 ; Attributes: info_from_lumina
.text:0000000000004D10
.text:0000000000004D10 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004D10                 public quotearg_n_style_mem
.text:0000000000004D10 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004D10
.text:0000000000004D10 var_48          = dword ptr -48h
.text:0000000000004D10 var_44          = qword ptr -44h
.text:0000000000004D10 var_3C          = qword ptr -3Ch
.text:0000000000004D10 var_34          = qword ptr -34h
.text:0000000000004D10 var_2C          = qword ptr -2Ch
.text:0000000000004D10 var_24          = qword ptr -24h
.text:0000000000004D10 var_1C          = qword ptr -1Ch
.text:0000000000004D10 var_14          = dword ptr -14h
.text:0000000000004D10 var_10          = qword ptr -10h
.text:0000000000004D10
.text:0000000000004D10 ; __unwind {
.text:0000000000004D10                 sub     rsp, 48h
.text:0000000000004D14                 mov     rax, rdx
.text:0000000000004D17                 mov     rdx, rcx
.text:0000000000004D1A                 mov     rcx, fs:28h
.text:0000000000004D23                 mov     [rsp+48h+var_10], rcx
.text:0000000000004D28                 xor     ecx, ecx
.text:0000000000004D2A                 cmp     esi, 0Ah
.text:0000000000004D2D                 jz      short loc_4D90
.text:0000000000004D2F                 mov     [rsp+48h+var_48], esi
.text:0000000000004D32                 mov     rcx, rsp
.text:0000000000004D35                 mov     rsi, rax
.text:0000000000004D38                 mov     [rsp+48h+var_44], 0
.text:0000000000004D41                 mov     [rsp+48h+var_3C], 0
.text:0000000000004D4A                 mov     [rsp+48h+var_34], 0
.text:0000000000004D53                 mov     [rsp+48h+var_2C], 0
.text:0000000000004D5C                 mov     [rsp+48h+var_24], 0
.text:0000000000004D65                 mov     [rsp+48h+var_1C], 0
.text:0000000000004D6E                 mov     [rsp+48h+var_14], 0
.text:0000000000004D76                 call    quotearg_n_options
.text:0000000000004D7B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004D80                 xor     rdx, fs:28h
.text:0000000000004D89                 jnz     short loc_4D95
.text:0000000000004D8B                 add     rsp, 48h
.text:0000000000004D8F                 retn
.text:0000000000004D90 ; ---------------------------------------------------------------------------
.text:0000000000004D90
.text:0000000000004D90 loc_4D90:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004D90                 call    _abort
.text:0000000000004D95 ; ---------------------------------------------------------------------------
.text:0000000000004D95
.text:0000000000004D95 loc_4D95:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004D95                 call    ___stack_chk_fail
.text:0000000000004D95 ; } // starts at 4D10
.text:0000000000004D95 quotearg_n_style_mem endp
.text:0000000000004D95
.text:0000000000004D95 ; ---------------------------------------------------------------------------
.text:0000000000004D9A                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DA0
.text:0000000000004DA0
.text:0000000000004DA0                 public quotearg_style
.text:0000000000004DA0 quotearg_style  proc near
.text:0000000000004DA0 ; __unwind {
.text:0000000000004DA0                 mov     rdx, rsi
.text:0000000000004DA3                 mov     esi, edi
.text:0000000000004DA5                 xor     edi, edi
.text:0000000000004DA7                 jmp     quotearg_n_style
.text:0000000000004DA7 ; } // starts at 4DA0
.text:0000000000004DA7 quotearg_style  endp
.text:0000000000004DA7
.text:0000000000004DA7 ; ---------------------------------------------------------------------------
.text:0000000000004DAC                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DB0
.text:0000000000004DB0
.text:0000000000004DB0                 public quotearg_style_mem
.text:0000000000004DB0 quotearg_style_mem proc near
.text:0000000000004DB0 ; __unwind {
.text:0000000000004DB0                 mov     rcx, rdx
.text:0000000000004DB3                 mov     rdx, rsi
.text:0000000000004DB6                 mov     esi, edi
.text:0000000000004DB8                 xor     edi, edi
.text:0000000000004DBA                 jmp     quotearg_n_style_mem
.text:0000000000004DBA ; } // starts at 4DB0
.text:0000000000004DBA quotearg_style_mem endp
.text:0000000000004DBA
.text:0000000000004DBA ; ---------------------------------------------------------------------------
.text:0000000000004DBF                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DC0
.text:0000000000004DC0 ; Attributes: info_from_lumina
.text:0000000000004DC0
.text:0000000000004DC0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004DC0                 public quotearg_char_mem
.text:0000000000004DC0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004DC0                                         ; quotearg_colon+C↓j ...
.text:0000000000004DC0
.text:0000000000004DC0 var_48          = xmmword ptr -48h
.text:0000000000004DC0 var_38          = xmmword ptr -38h
.text:0000000000004DC0 var_28          = xmmword ptr -28h
.text:0000000000004DC0 var_18          = qword ptr -18h
.text:0000000000004DC0 var_10          = qword ptr -10h
.text:0000000000004DC0
.text:0000000000004DC0 ; __unwind {
.text:0000000000004DC0                 sub     rsp, 48h
.text:0000000000004DC4                 mov     ecx, edx
.text:0000000000004DC6                 mov     rax, fs:28h
.text:0000000000004DCF                 mov     [rsp+48h+var_10], rax
.text:0000000000004DD4                 xor     eax, eax
.text:0000000000004DD6                 mov     rax, cs:qword_20B250
.text:0000000000004DDD                 mov     r8, rsp
.text:0000000000004DE0                 and     ecx, 1Fh
.text:0000000000004DE3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004DEB                 mov     [rsp+48h+var_18], rax
.text:0000000000004DF0                 mov     eax, edx
.text:0000000000004DF2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004DF6                 shr     al, 5
.text:0000000000004DF9                 movzx   eax, al
.text:0000000000004DFC                 lea     r9, [r8+rax*4+8]
.text:0000000000004E01                 movdqa  xmm0, cs:xmmword_20B230
.text:0000000000004E09                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004E0E                 movdqa  xmm0, cs:xmmword_20B240
.text:0000000000004E16                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004E1B                 mov     edx, [r9]
.text:0000000000004E1E                 mov     eax, edx
.text:0000000000004E20                 shr     eax, cl
.text:0000000000004E22                 not     eax
.text:0000000000004E24                 and     eax, 1
.text:0000000000004E27                 shl     eax, cl
.text:0000000000004E29                 mov     rcx, r8
.text:0000000000004E2C                 xor     eax, edx
.text:0000000000004E2E                 mov     rdx, rsi
.text:0000000000004E31                 mov     rsi, rdi
.text:0000000000004E34                 mov     [r9], eax
.text:0000000000004E37                 xor     edi, edi
.text:0000000000004E39                 call    quotearg_n_options
.text:0000000000004E3E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004E43                 xor     rsi, fs:28h
.text:0000000000004E4C                 jnz     short loc_4E53
.text:0000000000004E4E                 add     rsp, 48h
.text:0000000000004E52                 retn
.text:0000000000004E53 ; ---------------------------------------------------------------------------
.text:0000000000004E53
.text:0000000000004E53 loc_4E53:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004E53                 call    ___stack_chk_fail
.text:0000000000004E53 ; } // starts at 4DC0
.text:0000000000004E53 quotearg_char_mem endp
.text:0000000000004E53
.text:0000000000004E53 ; ---------------------------------------------------------------------------
.text:0000000000004E58                 align 20h
.text:0000000000004E60
.text:0000000000004E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E60
.text:0000000000004E60
.text:0000000000004E60                 public quotearg_char
.text:0000000000004E60 quotearg_char   proc near
.text:0000000000004E60 ; __unwind {
.text:0000000000004E60                 movsx   edx, sil
.text:0000000000004E64                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E6B                 jmp     quotearg_char_mem
.text:0000000000004E6B ; } // starts at 4E60
.text:0000000000004E6B quotearg_char   endp
.text:0000000000004E6B
.text:0000000000004E70
.text:0000000000004E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E70
.text:0000000000004E70
.text:0000000000004E70                 public quotearg_colon
.text:0000000000004E70 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004E70 ; __unwind {
.text:0000000000004E70                 mov     edx, 3Ah ; ':'
.text:0000000000004E75                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E7C                 jmp     quotearg_char_mem
.text:0000000000004E7C ; } // starts at 4E70
.text:0000000000004E7C quotearg_colon  endp
.text:0000000000004E7C
.text:0000000000004E7C ; ---------------------------------------------------------------------------
.text:0000000000004E81                 align 10h
.text:0000000000004E90
.text:0000000000004E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E90
.text:0000000000004E90
.text:0000000000004E90                 public quotearg_colon_mem
.text:0000000000004E90 quotearg_colon_mem proc near
.text:0000000000004E90 ; __unwind {
.text:0000000000004E90                 mov     edx, 3Ah ; ':'
.text:0000000000004E95                 jmp     quotearg_char_mem
.text:0000000000004E95 ; } // starts at 4E90
.text:0000000000004E95 quotearg_colon_mem endp
.text:0000000000004E95
.text:0000000000004E95 ; ---------------------------------------------------------------------------
.text:0000000000004E9A                 align 20h
.text:0000000000004EA0
.text:0000000000004EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EA0
.text:0000000000004EA0 ; Attributes: info_from_lumina
.text:0000000000004EA0
.text:0000000000004EA0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004EA0                 public quotearg_n_style_colon
.text:0000000000004EA0 quotearg_n_style_colon proc near
.text:0000000000004EA0
.text:0000000000004EA0 var_48          = dword ptr -48h
.text:0000000000004EA0 var_44          = qword ptr -44h
.text:0000000000004EA0 var_3C          = qword ptr -3Ch
.text:0000000000004EA0 var_34          = qword ptr -34h
.text:0000000000004EA0 var_2C          = qword ptr -2Ch
.text:0000000000004EA0 var_24          = qword ptr -24h
.text:0000000000004EA0 var_1C          = qword ptr -1Ch
.text:0000000000004EA0 var_14          = dword ptr -14h
.text:0000000000004EA0 var_10          = qword ptr -10h
.text:0000000000004EA0
.text:0000000000004EA0 ; __unwind {
.text:0000000000004EA0                 sub     rsp, 48h
.text:0000000000004EA4                 mov     rax, rdx
.text:0000000000004EA7                 mov     rdx, fs:28h
.text:0000000000004EB0                 mov     [rsp+48h+var_10], rdx
.text:0000000000004EB5                 xor     edx, edx
.text:0000000000004EB7                 cmp     esi, 0Ah
.text:0000000000004EBA                 jz      short loc_4F24
.text:0000000000004EBC                 mov     [rsp+48h+var_48], esi
.text:0000000000004EBF                 mov     rcx, rsp
.text:0000000000004EC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EC9                 mov     rsi, rax
.text:0000000000004ECC                 mov     [rsp+48h+var_44], 0
.text:0000000000004ED5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000004EDE                 mov     [rsp+48h+var_34], 0
.text:0000000000004EE7                 mov     [rsp+48h+var_2C], 0
.text:0000000000004EF0                 mov     [rsp+48h+var_24], 0
.text:0000000000004EF9                 mov     [rsp+48h+var_1C], 0
.text:0000000000004F02                 mov     [rsp+48h+var_14], 0
.text:0000000000004F0A                 call    quotearg_n_options
.text:0000000000004F0F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004F14                 xor     rcx, fs:28h
.text:0000000000004F1D                 jnz     short loc_4F29
.text:0000000000004F1F                 add     rsp, 48h
.text:0000000000004F23                 retn
.text:0000000000004F24 ; ---------------------------------------------------------------------------
.text:0000000000004F24
.text:0000000000004F24 loc_4F24:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004F24                 call    _abort
.text:0000000000004F29 ; ---------------------------------------------------------------------------
.text:0000000000004F29
.text:0000000000004F29 loc_4F29:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004F29                 call    ___stack_chk_fail
.text:0000000000004F29 ; } // starts at 4EA0
.text:0000000000004F29 quotearg_n_style_colon endp
.text:0000000000004F29
.text:0000000000004F29 ; ---------------------------------------------------------------------------
.text:0000000000004F2E                 align 10h
.text:0000000000004F30
.text:0000000000004F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F30
.text:0000000000004F30 ; Attributes: info_from_lumina
.text:0000000000004F30
.text:0000000000004F30 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004F30                 public quotearg_n_custom_mem
.text:0000000000004F30 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004F30                                         ; quotearg_custom+12↓j ...
.text:0000000000004F30
.text:0000000000004F30 var_48          = xmmword ptr -48h
.text:0000000000004F30 var_38          = xmmword ptr -38h
.text:0000000000004F30 var_28          = xmmword ptr -28h
.text:0000000000004F30 var_18          = qword ptr -18h
.text:0000000000004F30 var_10          = qword ptr -10h
.text:0000000000004F30
.text:0000000000004F30 ; __unwind {
.text:0000000000004F30                 sub     rsp, 48h
.text:0000000000004F34                 mov     r9, rcx
.text:0000000000004F37                 mov     rcx, cs:qword_20B250
.text:0000000000004F3E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004F46                 mov     rax, fs:28h
.text:0000000000004F4F                 mov     [rsp+48h+var_10], rax
.text:0000000000004F54                 xor     eax, eax
.text:0000000000004F56                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004F5A                 test    rsi, rsi
.text:0000000000004F5D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004F62                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004F69                 movdqa  xmm0, cs:xmmword_20B230
.text:0000000000004F71                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004F76                 movdqa  xmm0, cs:xmmword_20B240
.text:0000000000004F7E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004F83                 jz      short loc_4FB7
.text:0000000000004F85                 test    rdx, rdx
.text:0000000000004F88                 jz      short loc_4FB7
.text:0000000000004F8A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000004F8F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004F94                 mov     rcx, rsp
.text:0000000000004F97                 mov     rdx, r8
.text:0000000000004F9A                 mov     rsi, r9
.text:0000000000004F9D                 call    quotearg_n_options
.text:0000000000004FA2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004FA7                 xor     rdi, fs:28h
.text:0000000000004FB0                 jnz     short loc_4FBC
.text:0000000000004FB2                 add     rsp, 48h
.text:0000000000004FB6                 retn
.text:0000000000004FB7 ; ---------------------------------------------------------------------------
.text:0000000000004FB7
.text:0000000000004FB7 loc_4FB7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004FB7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004FB7                 call    _abort
.text:0000000000004FBC ; ---------------------------------------------------------------------------
.text:0000000000004FBC
.text:0000000000004FBC loc_4FBC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000004FBC                 call    ___stack_chk_fail
.text:0000000000004FBC ; } // starts at 4F30
.text:0000000000004FBC quotearg_n_custom_mem endp
.text:0000000000004FBC
.text:0000000000004FBC ; ---------------------------------------------------------------------------
.text:0000000000004FC1                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FD0
.text:0000000000004FD0
.text:0000000000004FD0                 public quotearg_n_custom
.text:0000000000004FD0 quotearg_n_custom proc near
.text:0000000000004FD0 ; __unwind {
.text:0000000000004FD0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FD7                 jmp     quotearg_n_custom_mem
.text:0000000000004FD7 ; } // starts at 4FD0
.text:0000000000004FD7 quotearg_n_custom endp
.text:0000000000004FD7
.text:0000000000004FD7 ; ---------------------------------------------------------------------------
.text:0000000000004FDC                 align 20h
.text:0000000000004FE0
.text:0000000000004FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FE0
.text:0000000000004FE0
.text:0000000000004FE0                 public quotearg_custom
.text:0000000000004FE0 quotearg_custom proc near
.text:0000000000004FE0 ; __unwind {
.text:0000000000004FE0                 mov     rcx, rdx
.text:0000000000004FE3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FEA                 mov     rdx, rsi
.text:0000000000004FED                 mov     rsi, rdi
.text:0000000000004FF0                 xor     edi, edi
.text:0000000000004FF2                 jmp     quotearg_n_custom_mem
.text:0000000000004FF2 ; } // starts at 4FE0
.text:0000000000004FF2 quotearg_custom endp
.text:0000000000004FF2
.text:0000000000004FF2 ; ---------------------------------------------------------------------------
.text:0000000000004FF7                 align 20h
.text:0000000000005000
.text:0000000000005000 ; =============== S U B R O U T I N E =======================================
.text:0000000000005000
.text:0000000000005000
.text:0000000000005000                 public quotearg_custom_mem
.text:0000000000005000 quotearg_custom_mem proc near
.text:0000000000005000 ; __unwind {
.text:0000000000005000                 mov     r8, rcx
.text:0000000000005003                 mov     rcx, rdx
.text:0000000000005006                 mov     rdx, rsi
.text:0000000000005009                 mov     rsi, rdi
.text:000000000000500C                 xor     edi, edi
.text:000000000000500E                 jmp     quotearg_n_custom_mem
.text:000000000000500E ; } // starts at 5000
.text:000000000000500E quotearg_custom_mem endp
.text:000000000000500E
.text:000000000000500E ; ---------------------------------------------------------------------------
.text:0000000000005013                 align 20h
.text:0000000000005020
.text:0000000000005020 ; =============== S U B R O U T I N E =======================================
.text:0000000000005020
.text:0000000000005020
.text:0000000000005020                 public quote_n_mem
.text:0000000000005020 quote_n_mem     proc near
.text:0000000000005020 ; __unwind {
.text:0000000000005020                 lea     rcx, quote_quoting_options
.text:0000000000005027                 jmp     quotearg_n_options
.text:0000000000005027 ; } // starts at 5020
.text:0000000000005027 quote_n_mem     endp
.text:0000000000005027
.text:0000000000005027 ; ---------------------------------------------------------------------------
.text:000000000000502C                 align 10h
.text:0000000000005030
.text:0000000000005030 ; =============== S U B R O U T I N E =======================================
.text:0000000000005030
.text:0000000000005030
.text:0000000000005030                 public quote_mem
.text:0000000000005030 quote_mem       proc near
.text:0000000000005030 ; __unwind {
.text:0000000000005030                 lea     rcx, quote_quoting_options
.text:0000000000005037                 mov     rdx, rsi
.text:000000000000503A                 mov     rsi, rdi
.text:000000000000503D                 xor     edi, edi
.text:000000000000503F                 jmp     quotearg_n_options
.text:000000000000503F ; } // starts at 5030
.text:000000000000503F quote_mem       endp
.text:000000000000503F
.text:000000000000503F ; ---------------------------------------------------------------------------
.text:0000000000005044                 align 10h
.text:0000000000005050
.text:0000000000005050 ; =============== S U B R O U T I N E =======================================
.text:0000000000005050
.text:0000000000005050
.text:0000000000005050                 public quote_n
.text:0000000000005050 quote_n         proc near               ; CODE XREF: scan_arg+2D0↑p
.text:0000000000005050                                         ; scan_arg+2E1↑p
.text:0000000000005050 ; __unwind {
.text:0000000000005050                 lea     rcx, quote_quoting_options
.text:0000000000005057                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000505E                 jmp     quotearg_n_options
.text:000000000000505E ; } // starts at 5050
.text:000000000000505E quote_n         endp
.text:000000000000505E
.text:000000000000505E ; ---------------------------------------------------------------------------
.text:0000000000005063                 align 10h
.text:0000000000005070
.text:0000000000005070 ; =============== S U B R O U T I N E =======================================
.text:0000000000005070
.text:0000000000005070
.text:0000000000005070                 public quote
.text:0000000000005070 quote           proc near               ; CODE XREF: main+9A9↑p
.text:0000000000005070                                         ; main+A57↑p ...
.text:0000000000005070 ; __unwind {
.text:0000000000005070                 lea     rcx, quote_quoting_options
.text:0000000000005077                 mov     rsi, rdi
.text:000000000000507A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005081                 xor     edi, edi
.text:0000000000005083                 jmp     quotearg_n_options
.text:0000000000005083 ; } // starts at 5070
.text:0000000000005083 quote           endp
.text:0000000000005083
.text:0000000000005083 ; ---------------------------------------------------------------------------
.text:0000000000005088                 align 10h
.text:0000000000005090
.text:0000000000005090 ; =============== S U B R O U T I N E =======================================
.text:0000000000005090
.text:0000000000005090
.text:0000000000005090 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000005090                 public version_etc_arn
.text:0000000000005090 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_54CB↓j
.text:0000000000005090                                         ; version_etc_va:loc_551B↓p ...
.text:0000000000005090
.text:0000000000005090 var_58          = qword ptr -58h
.text:0000000000005090 var_50          = qword ptr -50h
.text:0000000000005090 var_48          = qword ptr -48h
.text:0000000000005090 var_40          = qword ptr -40h
.text:0000000000005090
.text:0000000000005090 ; __unwind {
.text:0000000000005090                 push    r15
.text:0000000000005092                 push    r14
.text:0000000000005094                 push    r13
.text:0000000000005096                 push    r12
.text:0000000000005098                 mov     r12, r9
.text:000000000000509B                 push    rbp
.text:000000000000509C                 push    rbx
.text:000000000000509D                 mov     rbp, rdi
.text:00000000000050A0                 mov     rbx, r8
.text:00000000000050A3                 sub     rsp, 28h
.text:00000000000050A7                 test    rsi, rsi
.text:00000000000050AA                 jz      loc_51C8
.text:00000000000050B0                 mov     r8, rdx
.text:00000000000050B3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000050BA                 mov     r9, rcx
.text:00000000000050BD                 xor     eax, eax
.text:00000000000050BF                 mov     rcx, rsi
.text:00000000000050C2                 mov     esi, 1
.text:00000000000050C7                 call    ___fprintf_chk
.text:00000000000050CC
.text:00000000000050CC loc_50CC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000050CC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000050D3                 xor     edi, edi        ; domainname
.text:00000000000050D5                 mov     edx, 5          ; category
.text:00000000000050DA                 call    _dcgettext
.text:00000000000050DF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000050E6                 mov     rcx, rax
.text:00000000000050E9                 mov     r8d, 7E3h
.text:00000000000050EF                 mov     esi, 1
.text:00000000000050F4                 mov     rdi, rbp
.text:00000000000050F7                 xor     eax, eax
.text:00000000000050F9                 call    ___fprintf_chk
.text:00000000000050FE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000005105                 xor     edi, edi        ; domainname
.text:0000000000005107                 mov     edx, 5          ; category
.text:000000000000510C                 call    _dcgettext
.text:0000000000005111                 mov     rsi, rbp        ; stream
.text:0000000000005114                 mov     rdi, rax        ; s
.text:0000000000005117                 call    _fputs_unlocked
.text:000000000000511C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000005120                 ja      def_5134        ; jumptable 0000000000005134 default case
.text:0000000000005126                 lea     rdx, jpt_5134
.text:000000000000512D                 movsxd  rax, ds:(jpt_5134 - 9048h)[rdx+r12*4]
.text:0000000000005131                 add     rax, rdx
.text:0000000000005134                 jmp     rax             ; switch jump
.text:0000000000005134 ; ---------------------------------------------------------------------------
.text:0000000000005136                 align 20h
.text:0000000000005140
.text:0000000000005140 loc_5140:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005140                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:0000000000005140                 mov     r9, [rbx+38h]   ; jumptable 0000000000005134 case 8
.text:0000000000005144                 mov     rax, [rbx+10h]
.text:0000000000005148                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000514F                 mov     r8, [rbx+8]
.text:0000000000005153                 mov     edx, 5          ; category
.text:0000000000005158                 xor     edi, edi        ; domainname
.text:000000000000515A                 mov     r13, [rbx+30h]
.text:000000000000515E                 mov     r12, [rbx+28h]
.text:0000000000005162                 mov     [rsp+58h+var_48], r9
.text:0000000000005167                 mov     r15, [rbx+20h]
.text:000000000000516B                 mov     r14, [rbx+18h]
.text:000000000000516F                 mov     [rsp+58h+var_58], rax
.text:0000000000005173                 mov     [rsp+58h+var_50], r8
.text:0000000000005178                 mov     rbx, [rbx]
.text:000000000000517B                 call    _dcgettext
.text:0000000000005180                 sub     rsp, 8
.text:0000000000005184
.text:0000000000005184 loc_5184:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005184                 mov     r9, [rsp+60h+var_48]
.text:0000000000005189                 mov     rdx, rax
.text:000000000000518C                 mov     rcx, rbx
.text:000000000000518F                 mov     esi, 1
.text:0000000000005194                 mov     rdi, rbp
.text:0000000000005197                 xor     eax, eax
.text:0000000000005199                 push    r9
.text:000000000000519B                 push    r13
.text:000000000000519D                 push    r12
.text:000000000000519F                 push    r15
.text:00000000000051A1                 push    r14
.text:00000000000051A3                 mov     r9, [rsp+88h+var_58]
.text:00000000000051A8                 mov     r8, [rsp+88h+var_50]
.text:00000000000051AD                 call    ___fprintf_chk
.text:00000000000051B2                 add     rsp, 30h
.text:00000000000051B6
.text:00000000000051B6 loc_51B6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051B6                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:00000000000051B6                 add     rsp, 28h        ; jumptable 0000000000005134 case 0
.text:00000000000051BA                 pop     rbx
.text:00000000000051BB                 pop     rbp
.text:00000000000051BC                 pop     r12
.text:00000000000051BE                 pop     r13
.text:00000000000051C0                 pop     r14
.text:00000000000051C2                 pop     r15
.text:00000000000051C4                 retn
.text:00000000000051C4 ; ---------------------------------------------------------------------------
.text:00000000000051C5                 align 8
.text:00000000000051C8
.text:00000000000051C8 loc_51C8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000051C8                 mov     r8, rcx
.text:00000000000051CB                 mov     rcx, rdx
.text:00000000000051CE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000051D5                 mov     esi, 1
.text:00000000000051DA                 xor     eax, eax
.text:00000000000051DC                 call    ___fprintf_chk
.text:00000000000051E1                 jmp     loc_50CC
.text:00000000000051E1 ; ---------------------------------------------------------------------------
.text:00000000000051E6                 align 10h
.text:00000000000051F0
.text:00000000000051F0 loc_51F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051F0                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:00000000000051F0                 mov     r10, [rbx+40h]  ; jumptable 0000000000005134 case 9
.text:00000000000051F4                 mov     r9, [rbx+38h]
.text:00000000000051F8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000051FF                 mov     rax, [rbx+10h]
.text:0000000000005203                 mov     r8, [rbx+8]
.text:0000000000005207                 mov     edx, 5          ; category
.text:000000000000520C                 mov     r13, [rbx+30h]
.text:0000000000005210                 mov     r12, [rbx+28h]
.text:0000000000005214                 mov     r15, [rbx+20h]
.text:0000000000005218                 mov     r14, [rbx+18h]
.text:000000000000521C                 mov     rbx, [rbx]
.text:000000000000521F                 mov     [rsp+58h+var_40], r10
.text:0000000000005224                 mov     [rsp+58h+var_48], r9
.text:0000000000005229                 mov     [rsp+58h+var_58], rax
.text:000000000000522D                 mov     [rsp+58h+var_50], r8
.text:0000000000005232
.text:0000000000005232 loc_5232:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000005232                 xor     edi, edi        ; domainname
.text:0000000000005234                 call    _dcgettext
.text:0000000000005239                 mov     r10, [rsp+58h+var_40]
.text:000000000000523E                 push    r10
.text:0000000000005240                 jmp     loc_5184
.text:0000000000005240 ; ---------------------------------------------------------------------------
.text:0000000000005245                 align 8
.text:0000000000005248
.text:0000000000005248 loc_5248:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005248                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:0000000000005248                 mov     rbx, [rbx]      ; jumptable 0000000000005134 case 1
.text:000000000000524B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000005252                 mov     edx, 5          ; category
.text:0000000000005257                 xor     edi, edi        ; domainname
.text:0000000000005259                 call    _dcgettext
.text:000000000000525E                 add     rsp, 28h
.text:0000000000005262                 mov     rcx, rbx
.text:0000000000005265                 mov     rdi, rbp
.text:0000000000005268                 pop     rbx
.text:0000000000005269                 pop     rbp
.text:000000000000526A                 pop     r12
.text:000000000000526C                 pop     r13
.text:000000000000526E                 pop     r14
.text:0000000000005270                 pop     r15
.text:0000000000005272                 mov     rdx, rax
.text:0000000000005275                 mov     esi, 1
.text:000000000000527A                 xor     eax, eax
.text:000000000000527C                 jmp     ___fprintf_chk
.text:000000000000527C ; ---------------------------------------------------------------------------
.text:0000000000005281                 align 8
.text:0000000000005288
.text:0000000000005288 loc_5288:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005288                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:0000000000005288                 mov     r12, [rbx+8]    ; jumptable 0000000000005134 case 2
.text:000000000000528C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005293                 mov     rbx, [rbx]
.text:0000000000005296                 mov     edx, 5          ; category
.text:000000000000529B                 xor     edi, edi        ; domainname
.text:000000000000529D                 call    _dcgettext
.text:00000000000052A2                 add     rsp, 28h
.text:00000000000052A6                 mov     r8, r12
.text:00000000000052A9                 mov     rcx, rbx
.text:00000000000052AC                 mov     rdi, rbp
.text:00000000000052AF                 mov     rdx, rax
.text:00000000000052B2                 mov     esi, 1
.text:00000000000052B7                 pop     rbx
.text:00000000000052B8                 pop     rbp
.text:00000000000052B9                 pop     r12
.text:00000000000052BB                 pop     r13
.text:00000000000052BD                 pop     r14
.text:00000000000052BF                 pop     r15
.text:00000000000052C1                 xor     eax, eax
.text:00000000000052C3                 jmp     ___fprintf_chk
.text:00000000000052C3 ; ---------------------------------------------------------------------------
.text:00000000000052C8                 align 10h
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000052D0                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:00000000000052D0                 mov     r13, [rbx+10h]  ; jumptable 0000000000005134 case 3
.text:00000000000052D4                 mov     r12, [rbx+8]
.text:00000000000052D8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000052DF                 mov     rbx, [rbx]
.text:00000000000052E2                 mov     edx, 5          ; category
.text:00000000000052E7                 xor     edi, edi        ; domainname
.text:00000000000052E9                 call    _dcgettext
.text:00000000000052EE                 add     rsp, 28h
.text:00000000000052F2                 mov     r9, r13
.text:00000000000052F5                 mov     r8, r12
.text:00000000000052F8                 mov     rcx, rbx
.text:00000000000052FB                 mov     rdi, rbp
.text:00000000000052FE                 mov     rdx, rax
.text:0000000000005301                 pop     rbx
.text:0000000000005302                 pop     rbp
.text:0000000000005303                 pop     r12
.text:0000000000005305                 pop     r13
.text:0000000000005307                 pop     r14
.text:0000000000005309                 pop     r15
.text:000000000000530B                 mov     esi, 1
.text:0000000000005310                 xor     eax, eax
.text:0000000000005312                 jmp     ___fprintf_chk
.text:0000000000005312 ; ---------------------------------------------------------------------------
.text:0000000000005317                 align 20h
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005320                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:0000000000005320                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000005134 case 4
.text:0000000000005327                 mov     edx, 5          ; category
.text:000000000000532C                 xor     edi, edi        ; domainname
.text:000000000000532E                 mov     r14, [rbx+18h]
.text:0000000000005332                 mov     r13, [rbx+10h]
.text:0000000000005336                 mov     r12, [rbx+8]
.text:000000000000533A                 mov     rbx, [rbx]
.text:000000000000533D                 call    _dcgettext
.text:0000000000005342                 sub     rsp, 8
.text:0000000000005346
.text:0000000000005346 loc_5346:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000005346                 push    r14
.text:0000000000005348                 mov     rdx, rax
.text:000000000000534B                 mov     r9, r13
.text:000000000000534E                 mov     r8, r12
.text:0000000000005351                 mov     rcx, rbx
.text:0000000000005354                 mov     rdi, rbp
.text:0000000000005357                 mov     esi, 1
.text:000000000000535C                 xor     eax, eax
.text:000000000000535E                 call    ___fprintf_chk
.text:0000000000005363                 pop     rax
.text:0000000000005364                 pop     rdx
.text:0000000000005365                 add     rsp, 28h
.text:0000000000005369                 pop     rbx
.text:000000000000536A                 pop     rbp
.text:000000000000536B                 pop     r12
.text:000000000000536D                 pop     r13
.text:000000000000536F                 pop     r14
.text:0000000000005371                 pop     r15
.text:0000000000005373                 retn
.text:0000000000005373 ; ---------------------------------------------------------------------------
.text:0000000000005374                 align 8
.text:0000000000005378
.text:0000000000005378 loc_5378:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005378                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:0000000000005378                 mov     r15, [rbx+20h]  ; jumptable 0000000000005134 case 5
.text:000000000000537C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005383                 mov     edx, 5          ; category
.text:0000000000005388                 xor     edi, edi        ; domainname
.text:000000000000538A                 mov     r14, [rbx+18h]
.text:000000000000538E                 mov     r13, [rbx+10h]
.text:0000000000005392                 mov     r12, [rbx+8]
.text:0000000000005396                 mov     rbx, [rbx]
.text:0000000000005399                 call    _dcgettext
.text:000000000000539E                 push    r15
.text:00000000000053A0                 jmp     short loc_5346
.text:00000000000053A0 ; ---------------------------------------------------------------------------
.text:00000000000053A2                 align 8
.text:00000000000053A8
.text:00000000000053A8 loc_53A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000053A8                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:00000000000053A8                 mov     r8, [rbx+8]     ; jumptable 0000000000005134 case 6
.text:00000000000053AC                 mov     r12, [rbx+28h]
.text:00000000000053B0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000053B7                 mov     r15, [rbx+20h]
.text:00000000000053BB                 mov     r14, [rbx+18h]
.text:00000000000053BF                 mov     edx, 5          ; category
.text:00000000000053C4                 mov     r13, [rbx+10h]
.text:00000000000053C8                 xor     edi, edi        ; domainname
.text:00000000000053CA                 mov     rbx, [rbx]
.text:00000000000053CD                 mov     [rsp+58h+var_58], r8
.text:00000000000053D1                 call    _dcgettext
.text:00000000000053D6                 sub     rsp, 8
.text:00000000000053DA                 mov     r9, r13
.text:00000000000053DD                 push    r12
.text:00000000000053DF                 push    r15
.text:00000000000053E1                 push    r14
.text:00000000000053E3
.text:00000000000053E3 loc_53E3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000053E3                 mov     r8, [rsp+78h+var_58]
.text:00000000000053E8                 mov     rcx, rbx
.text:00000000000053EB                 mov     rdx, rax
.text:00000000000053EE                 mov     rdi, rbp
.text:00000000000053F1                 mov     esi, 1
.text:00000000000053F6                 xor     eax, eax
.text:00000000000053F8                 call    ___fprintf_chk
.text:00000000000053FD                 add     rsp, 20h
.text:0000000000005401                 add     rsp, 28h
.text:0000000000005405                 pop     rbx
.text:0000000000005406                 pop     rbp
.text:0000000000005407                 pop     r12
.text:0000000000005409                 pop     r13
.text:000000000000540B                 pop     r14
.text:000000000000540D                 pop     r15
.text:000000000000540F                 retn
.text:0000000000005410 ; ---------------------------------------------------------------------------
.text:0000000000005410
.text:0000000000005410 loc_5410:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005410                                         ; DATA XREF: .rodata:jpt_5134↓o
.text:0000000000005410                 mov     r9, [rbx+10h]   ; jumptable 0000000000005134 case 7
.text:0000000000005414                 mov     r13, [rbx+30h]
.text:0000000000005418                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000541F                 mov     r12, [rbx+28h]
.text:0000000000005423                 mov     r15, [rbx+20h]
.text:0000000000005427                 mov     edx, 5          ; category
.text:000000000000542C                 mov     r14, [rbx+18h]
.text:0000000000005430                 mov     r8, [rbx+8]
.text:0000000000005434                 xor     edi, edi        ; domainname
.text:0000000000005436                 mov     [rsp+58h+var_50], r9
.text:000000000000543B                 mov     rbx, [rbx]
.text:000000000000543E                 mov     [rsp+58h+var_58], r8
.text:0000000000005442                 call    _dcgettext
.text:0000000000005447                 push    r13
.text:0000000000005449                 push    r12
.text:000000000000544B                 push    r15
.text:000000000000544D                 push    r14
.text:000000000000544F                 mov     r9, [rsp+78h+var_50]
.text:0000000000005454                 jmp     short loc_53E3
.text:0000000000005454 ; ---------------------------------------------------------------------------
.text:0000000000005456                 align 20h
.text:0000000000005460
.text:0000000000005460 def_5134:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000005460                 mov     r10, [rbx+40h]  ; jumptable 0000000000005134 default case
.text:0000000000005464                 mov     r9, [rbx+38h]
.text:0000000000005468                 mov     edx, 5
.text:000000000000546D                 mov     rax, [rbx+10h]
.text:0000000000005471                 mov     r8, [rbx+8]
.text:0000000000005475                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000547C                 mov     r13, [rbx+30h]
.text:0000000000005480                 mov     r12, [rbx+28h]
.text:0000000000005484                 mov     r15, [rbx+20h]
.text:0000000000005488                 mov     r14, [rbx+18h]
.text:000000000000548C                 mov     [rsp+58h+var_40], r10
.text:0000000000005491                 mov     [rsp+58h+var_48], r9
.text:0000000000005496                 mov     [rsp+58h+var_58], rax
.text:000000000000549A                 mov     [rsp+58h+var_50], r8
.text:000000000000549F                 mov     rbx, [rbx]
.text:00000000000054A2                 jmp     loc_5232
.text:00000000000054A2 ; } // starts at 5090
.text:00000000000054A2 version_etc_arn endp
.text:00000000000054A2
.text:00000000000054A2 ; ---------------------------------------------------------------------------
.text:00000000000054A7                 align 10h
.text:00000000000054B0
.text:00000000000054B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054B0
.text:00000000000054B0 ; Attributes: info_from_lumina
.text:00000000000054B0
.text:00000000000054B0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000054B0                 public version_etc_ar
.text:00000000000054B0 version_etc_ar  proc near
.text:00000000000054B0 ; __unwind {
.text:00000000000054B0                 xor     r9d, r9d
.text:00000000000054B3                 cmp     qword ptr [r8], 0
.text:00000000000054B7                 jz      short loc_54CB
.text:00000000000054B9                 nop     dword ptr [rax+00000000h]
.text:00000000000054C0
.text:00000000000054C0 loc_54C0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000054C0                 add     r9, 1
.text:00000000000054C4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000054C9                 jnz     short loc_54C0
.text:00000000000054CB
.text:00000000000054CB loc_54CB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000054CB                 jmp     version_etc_arn
.text:00000000000054CB ; } // starts at 54B0
.text:00000000000054CB version_etc_ar  endp
.text:00000000000054CB
.text:00000000000054D0
.text:00000000000054D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054D0
.text:00000000000054D0 ; Attributes: info_from_lumina
.text:00000000000054D0
.text:00000000000054D0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000054D0                 public version_etc_va
.text:00000000000054D0 version_etc_va  proc near
.text:00000000000054D0
.text:00000000000054D0 authtab         = qword ptr -68h
.text:00000000000054D0 var_10          = qword ptr -10h
.text:00000000000054D0
.text:00000000000054D0 ; __unwind {
.text:00000000000054D0                 sub     rsp, 68h
.text:00000000000054D4                 mov     r10, r8
.text:00000000000054D7                 xor     r9d, r9d
.text:00000000000054DA                 mov     rax, fs:28h
.text:00000000000054E3                 mov     [rsp+68h+var_10], rax
.text:00000000000054E8                 xor     eax, eax
.text:00000000000054EA                 mov     r8, rsp
.text:00000000000054ED                 nop     dword ptr [rax]
.text:00000000000054F0
.text:00000000000054F0 loc_54F0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000054F0                 mov     eax, [r10]
.text:00000000000054F3                 cmp     eax, 2Fh ; '/'
.text:00000000000054F6                 ja      short loc_553A
.text:00000000000054F8                 mov     r11d, eax
.text:00000000000054FB                 add     r11, [r10+10h]
.text:00000000000054FF                 add     eax, 8
.text:0000000000005502                 mov     [r10], eax
.text:0000000000005505
.text:0000000000005505 loc_5505:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005505                 mov     rax, [r11]
.text:0000000000005508                 test    rax, rax
.text:000000000000550B                 mov     [r8+r9*8], rax
.text:000000000000550F                 jz      short loc_551B
.text:0000000000005511                 add     r9, 1
.text:0000000000005515                 cmp     r9, 0Ah
.text:0000000000005519                 jnz     short loc_54F0
.text:000000000000551B
.text:000000000000551B loc_551B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000551B                 call    version_etc_arn
.text:0000000000005520                 mov     rax, [rsp+68h+var_10]
.text:0000000000005525                 xor     rax, fs:28h
.text:000000000000552E                 jnz     short loc_5535
.text:0000000000005530                 add     rsp, 68h
.text:0000000000005534                 retn
.text:0000000000005535 ; ---------------------------------------------------------------------------
.text:0000000000005535
.text:0000000000005535 loc_5535:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000005535                 call    ___stack_chk_fail
.text:000000000000553A ; ---------------------------------------------------------------------------
.text:000000000000553A
.text:000000000000553A loc_553A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000553A                 mov     r11, [r10+8]
.text:000000000000553E                 lea     rax, [r11+8]
.text:0000000000005542                 mov     [r10+8], rax
.text:0000000000005546                 jmp     short loc_5505
.text:0000000000005546 ; } // starts at 54D0
.text:0000000000005546 version_etc_va  endp
.text:0000000000005546
.text:0000000000005546 ; ---------------------------------------------------------------------------
.text:0000000000005548                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000005550                 public version_etc
.text:0000000000005550 version_etc     proc near               ; CODE XREF: main+1AB↑p
.text:0000000000005550
.text:0000000000005550 var_C0          = dword ptr -0C0h
.text:0000000000005550 var_B8          = qword ptr -0B8h
.text:0000000000005550 var_B0          = qword ptr -0B0h
.text:0000000000005550 var_A8          = byte ptr -0A8h
.text:0000000000005550 var_50          = qword ptr -50h
.text:0000000000005550 var_48          = byte ptr -48h
.text:0000000000005550 var_28          = qword ptr -28h
.text:0000000000005550 var_20          = qword ptr -20h
.text:0000000000005550 arg_0           = byte ptr  8
.text:0000000000005550
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 push    rbp
.text:0000000000005551                 push    rbx
.text:0000000000005552                 mov     r10d, 20h ; ' '
.text:0000000000005558                 xor     r11d, r11d
.text:000000000000555B                 sub     rsp, 0B8h
.text:0000000000005562                 mov     rax, fs:28h
.text:000000000000556B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005570                 xor     eax, eax
.text:0000000000005572                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000557A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005582                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000558A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000558F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005597                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000559F                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000055A4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000055AC                 xor     r9d, r9d
.text:00000000000055AF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000055B4                 mov     rbp, rax
.text:00000000000055B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000055C0                 cmp     r10d, 2Fh ; '/'
.text:00000000000055C4                 ja      short loc_561C
.text:00000000000055C6                 mov     eax, r10d
.text:00000000000055C9                 mov     r11d, 1
.text:00000000000055CF                 add     r10d, 8
.text:00000000000055D3                 add     rax, rbp
.text:00000000000055D6
.text:00000000000055D6 loc_55D6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000055D6                 mov     rax, [rax]
.text:00000000000055D9                 test    rax, rax
.text:00000000000055DC                 mov     [r8+r9*8], rax
.text:00000000000055E0                 jz      short loc_55EC
.text:00000000000055E2                 add     r9, 1
.text:00000000000055E6                 cmp     r9, 0Ah
.text:00000000000055EA                 jnz     short loc_55C0
.text:00000000000055EC
.text:00000000000055EC loc_55EC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000055EC                 test    r11b, r11b
.text:00000000000055EF                 jnz     short loc_5615
.text:00000000000055F1
.text:00000000000055F1 loc_55F1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000055F1                 call    version_etc_arn
.text:00000000000055F6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000055FB                 xor     rax, fs:28h
.text:0000000000005604                 jnz     short loc_5610
.text:0000000000005606                 add     rsp, 0B8h
.text:000000000000560D                 pop     rbx
.text:000000000000560E                 pop     rbp
.text:000000000000560F                 retn
.text:0000000000005610 ; ---------------------------------------------------------------------------
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000005610                 call    ___stack_chk_fail
.text:0000000000005615 ; ---------------------------------------------------------------------------
.text:0000000000005615
.text:0000000000005615 loc_5615:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000005615                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000561A                 jmp     short loc_55F1
.text:000000000000561C ; ---------------------------------------------------------------------------
.text:000000000000561C
.text:000000000000561C loc_561C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000561C                 mov     rax, rbx
.text:000000000000561F                 add     rbx, 8
.text:0000000000005623                 jmp     short loc_55D6
.text:0000000000005623 ; } // starts at 5550
.text:0000000000005623 version_etc     endp
.text:0000000000005623
.text:0000000000005623 ; ---------------------------------------------------------------------------
.text:0000000000005625                 align 10h
.text:0000000000005630
.text:0000000000005630 ; =============== S U B R O U T I N E =======================================
.text:0000000000005630
.text:0000000000005630 ; Attributes: info_from_lumina
.text:0000000000005630
.text:0000000000005630 ; void __cdecl emit_bug_reporting_address()
.text:0000000000005630                 public emit_bug_reporting_address
.text:0000000000005630 emit_bug_reporting_address proc near
.text:0000000000005630 ; __unwind {
.text:0000000000005630                 push    rbx
.text:0000000000005631                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000005638                 mov     edx, 5          ; category
.text:000000000000563D                 xor     edi, edi        ; domainname
.text:000000000000563F                 call    _dcgettext
.text:0000000000005644                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000564B                 mov     rsi, rax
.text:000000000000564E                 mov     edi, 1
.text:0000000000005653                 xor     eax, eax
.text:0000000000005655                 call    ___printf_chk
.text:000000000000565A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000005661                 mov     edx, 5          ; category
.text:0000000000005666                 xor     edi, edi        ; domainname
.text:0000000000005668                 call    _dcgettext
.text:000000000000566D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005674                 lea     rdx, unk_8019
.text:000000000000567B                 mov     rsi, rax
.text:000000000000567E                 mov     edi, 1
.text:0000000000005683                 xor     eax, eax
.text:0000000000005685                 call    ___printf_chk
.text:000000000000568A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005691                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005698                 xor     edi, edi        ; domainname
.text:000000000000569A                 mov     edx, 5          ; category
.text:000000000000569F                 call    _dcgettext
.text:00000000000056A4                 mov     rsi, rbx        ; stream
.text:00000000000056A7                 mov     rdi, rax        ; s
.text:00000000000056AA                 pop     rbx
.text:00000000000056AB                 jmp     _fputs_unlocked
.text:00000000000056AB ; } // starts at 5630
.text:00000000000056AB emit_bug_reporting_address endp
.text:00000000000056AB
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0
.text:00000000000056B0                 public xmalloc
.text:00000000000056B0 xmalloc         proc near               ; CODE XREF: main+5FE↑p
.text:00000000000056B0                                         ; seq_fast+E6↑p ...
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 push    rbx
.text:00000000000056B1                 mov     rbx, rdi
.text:00000000000056B4                 call    _malloc
.text:00000000000056B9                 test    rax, rax
.text:00000000000056BC                 jnz     short loc_56C3
.text:00000000000056BE                 test    rbx, rbx
.text:00000000000056C1                 jnz     short loc_56C5
.text:00000000000056C3
.text:00000000000056C3 loc_56C3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000056C3                 pop     rbx
.text:00000000000056C4                 retn
.text:00000000000056C5 ; ---------------------------------------------------------------------------
.text:00000000000056C5
.text:00000000000056C5 loc_56C5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000056C5                 call    xalloc_die
.text:00000000000056C5 ; } // starts at 56B0
.text:00000000000056C5 xmalloc         endp
.text:00000000000056C5
.text:00000000000056C5 ; ---------------------------------------------------------------------------
.text:00000000000056CA                 align 10h
.text:00000000000056D0
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0
.text:00000000000056D0 ; Attributes: info_from_lumina
.text:00000000000056D0
.text:00000000000056D0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000056D0                 public xnmalloc
.text:00000000000056D0 xnmalloc        proc near
.text:00000000000056D0 ; __unwind {
.text:00000000000056D0                 mov     rax, rdi
.text:00000000000056D3                 mul     rsi
.text:00000000000056D6                 mov     rdi, rax
.text:00000000000056D9                 seto    al
.text:00000000000056DC                 test    rdi, rdi
.text:00000000000056DF                 js      short loc_56EB
.text:00000000000056E1                 movzx   eax, al
.text:00000000000056E4                 test    rax, rax
.text:00000000000056E7                 jnz     short loc_56EB
.text:00000000000056E9                 jmp     short xmalloc
.text:00000000000056EB ; ---------------------------------------------------------------------------
.text:00000000000056EB
.text:00000000000056EB loc_56EB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000056EB                                         ; xnmalloc+17↑j
.text:00000000000056EB                 sub     rsp, 8
.text:00000000000056EF                 call    xalloc_die
.text:00000000000056EF ; } // starts at 56D0
.text:00000000000056EF xnmalloc        endp
.text:00000000000056EF
.text:00000000000056EF ; ---------------------------------------------------------------------------
.text:00000000000056F4                 align 20h
.text:0000000000005700
.text:0000000000005700 ; =============== S U B R O U T I N E =======================================
.text:0000000000005700
.text:0000000000005700
.text:0000000000005700                 public xcharalloc
.text:0000000000005700 xcharalloc      proc near
.text:0000000000005700 ; __unwind {
.text:0000000000005700                 jmp     short xmalloc
.text:0000000000005700 ; } // starts at 5700
.text:0000000000005700 xcharalloc      endp
.text:0000000000005700
.text:0000000000005700 ; ---------------------------------------------------------------------------
.text:0000000000005702                 align 10h
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710 ; Attributes: info_from_lumina
.text:0000000000005710
.text:0000000000005710 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000005710                 public xrealloc
.text:0000000000005710 xrealloc        proc near               ; CODE XREF: seq_fast+271↑p
.text:0000000000005710                                         ; seq_fast+2C1↑p ...
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 test    rsi, rsi
.text:0000000000005713                 push    rbx
.text:0000000000005714                 mov     rbx, rsi
.text:0000000000005717                 jnz     short loc_571E
.text:0000000000005719                 test    rdi, rdi
.text:000000000000571C                 jnz     short loc_5738
.text:000000000000571E
.text:000000000000571E loc_571E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000571E                 mov     rsi, rbx        ; size
.text:0000000000005721                 call    _realloc
.text:0000000000005726                 test    rax, rax
.text:0000000000005729                 jnz     short loc_5730
.text:000000000000572B                 test    rbx, rbx
.text:000000000000572E                 jnz     short loc_5741
.text:0000000000005730
.text:0000000000005730 loc_5730:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000005730                 pop     rbx
.text:0000000000005731                 retn
.text:0000000000005731 ; ---------------------------------------------------------------------------
.text:0000000000005732                 align 8
.text:0000000000005738
.text:0000000000005738 loc_5738:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000005738                 call    _free
.text:000000000000573D                 xor     eax, eax
.text:000000000000573F                 pop     rbx
.text:0000000000005740                 retn
.text:0000000000005741 ; ---------------------------------------------------------------------------
.text:0000000000005741
.text:0000000000005741 loc_5741:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000005741                 call    xalloc_die
.text:0000000000005741 ; } // starts at 5710
.text:0000000000005741 xrealloc        endp
.text:0000000000005741
.text:0000000000005741 ; ---------------------------------------------------------------------------
.text:0000000000005746                 align 10h
.text:0000000000005750
.text:0000000000005750 ; =============== S U B R O U T I N E =======================================
.text:0000000000005750
.text:0000000000005750 ; Attributes: info_from_lumina
.text:0000000000005750
.text:0000000000005750 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000005750                 public xnrealloc
.text:0000000000005750 xnrealloc       proc near
.text:0000000000005750 ; __unwind {
.text:0000000000005750                 mov     rax, rsi
.text:0000000000005753                 mul     rdx
.text:0000000000005756                 mov     rsi, rax
.text:0000000000005759                 seto    al
.text:000000000000575C                 test    rsi, rsi
.text:000000000000575F                 js      short loc_576B
.text:0000000000005761                 movzx   eax, al
.text:0000000000005764                 test    rax, rax
.text:0000000000005767                 jnz     short loc_576B
.text:0000000000005769                 jmp     short xrealloc
.text:000000000000576B ; ---------------------------------------------------------------------------
.text:000000000000576B
.text:000000000000576B loc_576B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000576B                                         ; xnrealloc+17↑j
.text:000000000000576B                 sub     rsp, 8
.text:000000000000576F                 call    xalloc_die
.text:000000000000576F ; } // starts at 5750
.text:000000000000576F xnrealloc       endp
.text:000000000000576F
.text:000000000000576F ; ---------------------------------------------------------------------------
.text:0000000000005774                 align 20h
.text:0000000000005780
.text:0000000000005780 ; =============== S U B R O U T I N E =======================================
.text:0000000000005780
.text:0000000000005780 ; Attributes: info_from_lumina
.text:0000000000005780
.text:0000000000005780 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005780                 public x2nrealloc
.text:0000000000005780 x2nrealloc      proc near
.text:0000000000005780 ; __unwind {
.text:0000000000005780                 test    rdi, rdi
.text:0000000000005783                 mov     r9, rdx
.text:0000000000005786                 mov     rcx, [rsi]
.text:0000000000005789                 jz      short loc_57C0
.text:000000000000578B                 xor     edx, edx
.text:000000000000578D                 mov     rax, 5555555555555554h
.text:0000000000005797                 div     r9
.text:000000000000579A                 cmp     rax, rcx
.text:000000000000579D                 jbe     short loc_57DB
.text:000000000000579F                 mov     rax, rcx
.text:00000000000057A2                 shr     rax, 1
.text:00000000000057A5                 lea     rcx, [rax+rcx+1]
.text:00000000000057AA
.text:00000000000057AA loc_57AA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000057AA                 mov     [rsi], rcx
.text:00000000000057AD                 imul    rcx, r9
.text:00000000000057B1                 mov     rsi, rcx
.text:00000000000057B4                 jmp     xrealloc
.text:00000000000057B4 ; ---------------------------------------------------------------------------
.text:00000000000057B9                 align 20h
.text:00000000000057C0
.text:00000000000057C0 loc_57C0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000057C0                 test    rcx, rcx
.text:00000000000057C3                 jz      short loc_57E8
.text:00000000000057C5
.text:00000000000057C5 loc_57C5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000057C5                 mov     rax, rcx
.text:00000000000057C8                 mul     r9
.text:00000000000057CB                 seto    dl
.text:00000000000057CE                 test    rax, rax
.text:00000000000057D1                 movzx   edx, dl
.text:00000000000057D4                 js      short loc_57DB
.text:00000000000057D6                 test    rdx, rdx
.text:00000000000057D9                 jz      short loc_57AA
.text:00000000000057DB
.text:00000000000057DB loc_57DB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000057DB                                         ; x2nrealloc+54↑j
.text:00000000000057DB                 sub     rsp, 8
.text:00000000000057DF                 call    xalloc_die
.text:00000000000057DF ; ---------------------------------------------------------------------------
.text:00000000000057E4                 align 8
.text:00000000000057E8
.text:00000000000057E8 loc_57E8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000057E8                 xor     edx, edx
.text:00000000000057EA                 mov     eax, 80h
.text:00000000000057EF                 xor     r8d, r8d
.text:00000000000057F2                 div     r9
.text:00000000000057F5                 test    rax, rax
.text:00000000000057F8                 setz    r8b
.text:00000000000057FC                 lea     rcx, [r8+rax]
.text:0000000000005800                 jmp     short loc_57C5
.text:0000000000005800 ; } // starts at 5780
.text:0000000000005800 x2nrealloc      endp
.text:0000000000005800
.text:0000000000005800 ; ---------------------------------------------------------------------------
.text:0000000000005802                 align 10h
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810 ; Attributes: info_from_lumina
.text:0000000000005810
.text:0000000000005810 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000005810                 public x2realloc
.text:0000000000005810 x2realloc       proc near
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 test    rdi, rdi
.text:0000000000005813                 mov     rax, [rsi]
.text:0000000000005816                 jz      short loc_5840
.text:0000000000005818                 mov     rdx, 5555555555555553h
.text:0000000000005822                 cmp     rax, rdx
.text:0000000000005825                 ja      short loc_5851
.text:0000000000005827                 mov     rdx, rax
.text:000000000000582A                 shr     rdx, 1
.text:000000000000582D                 lea     rax, [rdx+rax+1]
.text:0000000000005832
.text:0000000000005832 loc_5832:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000005832                 mov     [rsi], rax
.text:0000000000005835                 mov     rsi, rax
.text:0000000000005838                 jmp     xrealloc
.text:0000000000005838 ; ---------------------------------------------------------------------------
.text:000000000000583D                 align 20h
.text:0000000000005840
.text:0000000000005840 loc_5840:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000005840                 test    rax, rax
.text:0000000000005843                 mov     edx, 80h
.text:0000000000005848                 cmovz   rax, rdx
.text:000000000000584C                 test    rax, rax
.text:000000000000584F                 jns     short loc_5832
.text:0000000000005851
.text:0000000000005851 loc_5851:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000005851                 sub     rsp, 8
.text:0000000000005855                 call    xalloc_die
.text:0000000000005855 ; } // starts at 5810
.text:0000000000005855 x2realloc       endp
.text:0000000000005855
.text:0000000000005855 ; ---------------------------------------------------------------------------
.text:000000000000585A                 align 20h
.text:0000000000005860
.text:0000000000005860 ; =============== S U B R O U T I N E =======================================
.text:0000000000005860
.text:0000000000005860
.text:0000000000005860 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000005860                 public xzalloc
.text:0000000000005860 xzalloc         proc near
.text:0000000000005860 ; __unwind {
.text:0000000000005860                 push    rbx
.text:0000000000005861                 mov     rbx, rdi
.text:0000000000005864                 call    xmalloc
.text:0000000000005869                 mov     rdx, rbx        ; n
.text:000000000000586C                 xor     esi, esi        ; c
.text:000000000000586E                 mov     rdi, rax        ; s
.text:0000000000005871                 pop     rbx
.text:0000000000005872                 jmp     _memset
.text:0000000000005872 ; } // starts at 5860
.text:0000000000005872 xzalloc         endp
.text:0000000000005872
.text:0000000000005872 ; ---------------------------------------------------------------------------
.text:0000000000005877                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880 ; Attributes: info_from_lumina
.text:0000000000005880
.text:0000000000005880 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005880                 public xcalloc
.text:0000000000005880 xcalloc         proc near
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 mov     rax, rdi
.text:0000000000005883                 sub     rsp, 8
.text:0000000000005887                 mul     rsi
.text:000000000000588A                 seto    dl
.text:000000000000588D                 test    rax, rax
.text:0000000000005890                 js      short loc_58A9
.text:0000000000005892                 movzx   edx, dl
.text:0000000000005895                 test    rdx, rdx
.text:0000000000005898                 jnz     short loc_58A9
.text:000000000000589A                 call    _calloc
.text:000000000000589F                 test    rax, rax
.text:00000000000058A2                 jz      short loc_58A9
.text:00000000000058A4                 add     rsp, 8
.text:00000000000058A8                 retn
.text:00000000000058A9 ; ---------------------------------------------------------------------------
.text:00000000000058A9
.text:00000000000058A9 loc_58A9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000058A9                                         ; xcalloc+18↑j ...
.text:00000000000058A9                 call    xalloc_die
.text:00000000000058A9 ; } // starts at 5880
.text:00000000000058A9 xcalloc         endp
.text:00000000000058A9
.text:00000000000058A9 ; ---------------------------------------------------------------------------
.text:00000000000058AE                 align 10h
.text:00000000000058B0
.text:00000000000058B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058B0
.text:00000000000058B0 ; Attributes: info_from_lumina
.text:00000000000058B0
.text:00000000000058B0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000058B0                 public xmemdup
.text:00000000000058B0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000058B0                                         ; xstrdup+11↓j
.text:00000000000058B0 ; __unwind {
.text:00000000000058B0                 push    rbp
.text:00000000000058B1                 push    rbx
.text:00000000000058B2                 mov     rbp, rdi
.text:00000000000058B5                 mov     rdi, rsi
.text:00000000000058B8                 mov     rbx, rsi
.text:00000000000058BB                 sub     rsp, 8
.text:00000000000058BF                 call    xmalloc
.text:00000000000058C4                 add     rsp, 8
.text:00000000000058C8                 mov     rdx, rbx        ; n
.text:00000000000058CB                 mov     rsi, rbp        ; src
.text:00000000000058CE                 pop     rbx
.text:00000000000058CF                 pop     rbp
.text:00000000000058D0                 mov     rdi, rax        ; dest
.text:00000000000058D3                 jmp     _memcpy
.text:00000000000058D3 ; } // starts at 58B0
.text:00000000000058D3 xmemdup         endp
.text:00000000000058D3
.text:00000000000058D3 ; ---------------------------------------------------------------------------
.text:00000000000058D8                 align 20h
.text:00000000000058E0
.text:00000000000058E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058E0
.text:00000000000058E0
.text:00000000000058E0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000058E0                 public xstrdup
.text:00000000000058E0 xstrdup         proc near               ; CODE XREF: main+ADF↑p
.text:00000000000058E0 ; __unwind {
.text:00000000000058E0                 push    rbx
.text:00000000000058E1                 mov     rbx, rdi
.text:00000000000058E4                 call    _strlen
.text:00000000000058E9                 mov     rdi, rbx        ; src
.text:00000000000058EC                 lea     rsi, [rax+1]    ; n
.text:00000000000058F0                 pop     rbx
.text:00000000000058F1                 jmp     short xmemdup
.text:00000000000058F1 ; } // starts at 58E0
.text:00000000000058F1 xstrdup         endp
.text:00000000000058F1
.text:00000000000058F1 ; ---------------------------------------------------------------------------
.text:00000000000058F3                 align 20h
.text:0000000000005900
.text:0000000000005900 ; =============== S U B R O U T I N E =======================================
.text:0000000000005900
.text:0000000000005900 ; Attributes: noreturn info_from_lumina
.text:0000000000005900
.text:0000000000005900 ; void __cdecl xalloc_die()
.text:0000000000005900                 public xalloc_die
.text:0000000000005900 xalloc_die      proc near               ; CODE XREF: main:loc_233A↑p
.text:0000000000005900                                         ; quotearg_n_options:loc_48D6↑p ...
.text:0000000000005900 ; __unwind {
.text:0000000000005900                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005907                 sub     rsp, 8
.text:000000000000590B                 mov     edx, 5          ; category
.text:0000000000005910                 xor     edi, edi        ; domainname
.text:0000000000005912                 call    _dcgettext
.text:0000000000005917                 mov     edi, cs:exit_failure ; status
.text:000000000000591D                 lea     rdx, format+4   ; format
.text:0000000000005924                 mov     rcx, rax
.text:0000000000005927                 xor     esi, esi        ; errnum
.text:0000000000005929                 xor     eax, eax
.text:000000000000592B                 call    _error
.text:0000000000005930                 call    _abort
.text:0000000000005930 ; } // starts at 5900
.text:0000000000005930 xalloc_die      endp
.text:0000000000005930
.text:0000000000005930 ; ---------------------------------------------------------------------------
.text:0000000000005935                 align 20h
.text:0000000000005940
.text:0000000000005940 ; =============== S U B R O U T I N E =======================================
.text:0000000000005940
.text:0000000000005940
.text:0000000000005940                 public xstrtold
.text:0000000000005940 xstrtold        proc near               ; CODE XREF: main+3A3↑p
.text:0000000000005940                                         ; scan_arg+35↑p
.text:0000000000005940
.text:0000000000005940 var_38          = qword ptr -38h
.text:0000000000005940 var_30          = qword ptr -30h
.text:0000000000005940
.text:0000000000005940 ; __unwind {
.text:0000000000005940                 push    r14
.text:0000000000005942                 push    r13
.text:0000000000005944                 mov     r14, rcx
.text:0000000000005947                 push    r12
.text:0000000000005949                 push    rbp
.text:000000000000594A                 mov     rbp, rdi
.text:000000000000594D                 push    rbx
.text:000000000000594E                 mov     r13, rdx
.text:0000000000005951                 mov     rbx, rsi
.text:0000000000005954                 sub     rsp, 10h
.text:0000000000005958                 mov     rax, fs:28h
.text:0000000000005961                 mov     [rsp+38h+var_30], rax
.text:0000000000005966                 xor     eax, eax
.text:0000000000005968                 call    ___errno_location
.text:000000000000596D                 mov     rsi, rsp
.text:0000000000005970                 mov     r12, rax
.text:0000000000005973                 mov     dword ptr [rax], 0
.text:0000000000005979                 mov     rdi, rbp
.text:000000000000597C                 call    r14
.text:000000000000597F                 mov     rcx, [rsp+38h+var_38]
.text:0000000000005983                 cmp     rcx, rbp
.text:0000000000005986                 jz      short loc_59F0
.text:0000000000005988                 test    rbx, rbx
.text:000000000000598B                 jz      short loc_59D0
.text:000000000000598D                 fldz
.text:000000000000598F                 fxch    st(1)
.text:0000000000005991                 fucomi  st, st(1)
.text:0000000000005993                 fstp    st(1)
.text:0000000000005995                 jp      short loc_599E
.text:0000000000005997                 mov     eax, 1
.text:000000000000599C                 jz      short loc_59AB
.text:000000000000599E
.text:000000000000599E loc_599E:                               ; CODE XREF: xstrtold+55↑j
.text:000000000000599E                                         ; xstrtold+9F↓j ...
.text:000000000000599E                 cmp     dword ptr [r12], 22h ; '"'
.text:00000000000059A3                 setnz   al
.text:00000000000059A6
.text:00000000000059A6 loc_59A6:                               ; CODE XREF: xstrtold+B2↓j
.text:00000000000059A6                 test    rbx, rbx
.text:00000000000059A9                 jz      short loc_59AE
.text:00000000000059AB
.text:00000000000059AB loc_59AB:                               ; CODE XREF: xstrtold+5C↑j
.text:00000000000059AB                 mov     [rbx], rcx
.text:00000000000059AE
.text:00000000000059AE loc_59AE:                               ; CODE XREF: xstrtold+69↑j
.text:00000000000059AE                                         ; xstrtold+95↓j ...
.text:00000000000059AE                 mov     rdx, [rsp+38h+var_30]
.text:00000000000059B3                 xor     rdx, fs:28h
.text:00000000000059BC                 db      41h
.text:00000000000059BC                 fstp    tbyte ptr [r13+0]
.text:00000000000059C0                 jnz     short loc_59F4
.text:00000000000059C2                 add     rsp, 10h
.text:00000000000059C6                 pop     rbx
.text:00000000000059C7                 pop     rbp
.text:00000000000059C8                 pop     r12
.text:00000000000059CA                 pop     r13
.text:00000000000059CC                 pop     r14
.text:00000000000059CE                 retn
.text:00000000000059CE ; ---------------------------------------------------------------------------
.text:00000000000059CF                 align 10h
.text:00000000000059D0
.text:00000000000059D0 loc_59D0:                               ; CODE XREF: xstrtold+4B↑j
.text:00000000000059D0                 xor     eax, eax
.text:00000000000059D2                 cmp     byte ptr [rcx], 0
.text:00000000000059D5                 jnz     short loc_59AE
.text:00000000000059D7                 fldz
.text:00000000000059D9                 fxch    st(1)
.text:00000000000059DB                 fucomi  st, st(1)
.text:00000000000059DD                 fstp    st(1)
.text:00000000000059DF                 jp      short loc_599E
.text:00000000000059E1                 jnz     short loc_599E
.text:00000000000059E3                 mov     eax, 1
.text:00000000000059E8                 jmp     short loc_59AE
.text:00000000000059E8 ; ---------------------------------------------------------------------------
.text:00000000000059EA                 align 10h
.text:00000000000059F0
.text:00000000000059F0 loc_59F0:                               ; CODE XREF: xstrtold+46↑j
.text:00000000000059F0                 xor     eax, eax
.text:00000000000059F2                 jmp     short loc_59A6
.text:00000000000059F4 ; ---------------------------------------------------------------------------
.text:00000000000059F4
.text:00000000000059F4 loc_59F4:                               ; CODE XREF: xstrtold+80↑j
.text:00000000000059F4                 call    ___stack_chk_fail
.text:00000000000059F4 ; } // starts at 5940
.text:00000000000059F4 xstrtold        endp
.text:00000000000059F4
.text:00000000000059F4 ; ---------------------------------------------------------------------------
.text:00000000000059F9                 align 20h
.text:0000000000005A00
.text:0000000000005A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A00
.text:0000000000005A00 ; Attributes: info_from_lumina
.text:0000000000005A00
.text:0000000000005A00 ; int gzprintf(gzFile_0 file, const char *format, ...)
.text:0000000000005A00                 public gzprintf
.text:0000000000005A00 gzprintf        proc near               ; CODE XREF: main+357↑p
.text:0000000000005A00                                         ; main+3EC↑p ...
.text:0000000000005A00
.text:0000000000005A00 var_D8          = dword ptr -0D8h
.text:0000000000005A00 var_D4          = dword ptr -0D4h
.text:0000000000005A00 var_D0          = qword ptr -0D0h
.text:0000000000005A00 var_C8          = qword ptr -0C8h
.text:0000000000005A00 var_C0          = qword ptr -0C0h
.text:0000000000005A00 var_B8          = byte ptr -0B8h
.text:0000000000005A00 var_A8          = qword ptr -0A8h
.text:0000000000005A00 var_A0          = qword ptr -0A0h
.text:0000000000005A00 var_98          = qword ptr -98h
.text:0000000000005A00 var_90          = qword ptr -90h
.text:0000000000005A00 var_88          = xmmword ptr -88h
.text:0000000000005A00 var_78          = xmmword ptr -78h
.text:0000000000005A00 var_68          = xmmword ptr -68h
.text:0000000000005A00 var_58          = xmmword ptr -58h
.text:0000000000005A00 var_48          = xmmword ptr -48h
.text:0000000000005A00 var_38          = xmmword ptr -38h
.text:0000000000005A00 var_28          = xmmword ptr -28h
.text:0000000000005A00 var_18          = xmmword ptr -18h
.text:0000000000005A00 arg_0           = byte ptr  8
.text:0000000000005A00
.text:0000000000005A00 ; __unwind {
.text:0000000000005A00                 sub     rsp, 0D8h
.text:0000000000005A07                 test    al, al
.text:0000000000005A09                 mov     [rsp+0D8h+var_A8], rdx
.text:0000000000005A0E                 mov     [rsp+0D8h+var_A0], rcx
.text:0000000000005A13                 mov     [rsp+0D8h+var_98], r8
.text:0000000000005A18                 mov     [rsp+0D8h+var_90], r9
.text:0000000000005A1D                 jz      short loc_5A56
.text:0000000000005A1F                 movaps  [rsp+0D8h+var_88], xmm0
.text:0000000000005A24                 movaps  [rsp+0D8h+var_78], xmm1
.text:0000000000005A29                 movaps  [rsp+0D8h+var_68], xmm2
.text:0000000000005A2E                 movaps  [rsp+0D8h+var_58], xmm3
.text:0000000000005A36                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000005A3E                 movaps  [rsp+0D8h+var_38], xmm5
.text:0000000000005A46                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000005A4E                 movaps  [rsp+0D8h+var_18], xmm7
.text:0000000000005A56
.text:0000000000005A56 loc_5A56:                               ; CODE XREF: gzprintf+1D↑j
.text:0000000000005A56                 mov     rax, fs:28h
.text:0000000000005A5F                 mov     [rsp+0D8h+var_C0], rax
.text:0000000000005A64                 xor     eax, eax
.text:0000000000005A66                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000005A6E                 mov     rdx, rsp
.text:0000000000005A71                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000005A76                 lea     rax, [rsp+0D8h+var_B8]
.text:0000000000005A7B                 mov     [rsp+0D8h+var_D8], 10h
.text:0000000000005A82                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000005A8A                 mov     [rsp+0D8h+var_C8], rax
.text:0000000000005A8F                 call    u16_u16_vasprintf
.text:0000000000005A94                 mov     rcx, [rsp+0D8h+var_C0]
.text:0000000000005A99                 xor     rcx, fs:28h
.text:0000000000005AA2                 jnz     short loc_5AAC
.text:0000000000005AA4                 add     rsp, 0D8h
.text:0000000000005AAB                 retn
.text:0000000000005AAC ; ---------------------------------------------------------------------------
.text:0000000000005AAC
.text:0000000000005AAC loc_5AAC:                               ; CODE XREF: gzprintf+A2↑j
.text:0000000000005AAC                 call    ___stack_chk_fail
.text:0000000000005AAC ; } // starts at 5A00
.text:0000000000005AAC gzprintf        endp
.text:0000000000005AAC
.text:0000000000005AAC ; ---------------------------------------------------------------------------
.text:0000000000005AB1                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0 ; Attributes: info_from_lumina
.text:0000000000005AC0
.text:0000000000005AC0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005AC0                 public rpl_mbrtowc
.text:0000000000005AC0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005AC0
.text:0000000000005AC0 pwc             = dword ptr -34h
.text:0000000000005AC0 var_30          = qword ptr -30h
.text:0000000000005AC0
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 push    r13
.text:0000000000005AC2                 push    r12
.text:0000000000005AC4                 mov     r13, rsi
.text:0000000000005AC7                 push    rbp
.text:0000000000005AC8                 push    rbx
.text:0000000000005AC9                 mov     rbx, rdi
.text:0000000000005ACC                 mov     r12, rdx
.text:0000000000005ACF                 sub     rsp, 18h
.text:0000000000005AD3                 mov     rax, fs:28h
.text:0000000000005ADC                 mov     [rsp+38h+var_30], rax
.text:0000000000005AE1                 xor     eax, eax
.text:0000000000005AE3                 lea     rax, [rsp+38h+pwc]
.text:0000000000005AE8                 test    rdi, rdi
.text:0000000000005AEB                 cmovz   rbx, rax
.text:0000000000005AEF                 mov     rdi, rbx        ; pwc
.text:0000000000005AF2                 call    _mbrtowc
.text:0000000000005AF7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005AFB                 mov     rbp, rax
.text:0000000000005AFE                 jbe     short loc_5B20
.text:0000000000005B00                 test    r12, r12
.text:0000000000005B03                 jz      short loc_5B20
.text:0000000000005B05                 xor     edi, edi
.text:0000000000005B07                 call    hard_locale
.text:0000000000005B0C                 test    al, al
.text:0000000000005B0E                 jnz     short loc_5B20
.text:0000000000005B10                 movzx   eax, byte ptr [r13+0]
.text:0000000000005B15                 mov     ebp, 1
.text:0000000000005B1A                 mov     [rbx], eax
.text:0000000000005B1C                 nop     dword ptr [rax+00h]
.text:0000000000005B20
.text:0000000000005B20 loc_5B20:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005B20                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005B20                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005B25                 xor     rdx, fs:28h
.text:0000000000005B2E                 mov     rax, rbp
.text:0000000000005B31                 jnz     short loc_5B3E
.text:0000000000005B33                 add     rsp, 18h
.text:0000000000005B37                 pop     rbx
.text:0000000000005B38                 pop     rbp
.text:0000000000005B39                 pop     r12
.text:0000000000005B3B                 pop     r13
.text:0000000000005B3D                 retn
.text:0000000000005B3E ; ---------------------------------------------------------------------------
.text:0000000000005B3E
.text:0000000000005B3E loc_5B3E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005B3E                 call    ___stack_chk_fail
.text:0000000000005B3E ; } // starts at 5AC0
.text:0000000000005B3E rpl_mbrtowc     endp
.text:0000000000005B3E
.text:0000000000005B3E ; ---------------------------------------------------------------------------
.text:0000000000005B43                 align 10h
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50 ; Attributes: info_from_lumina
.text:0000000000005B50
.text:0000000000005B50                 public u16_u16_vasprintf
.text:0000000000005B50 u16_u16_vasprintf proc near             ; CODE XREF: gzprintf+8F↑p
.text:0000000000005B50
.text:0000000000005B50 var_18          = qword ptr -18h
.text:0000000000005B50 var_10          = qword ptr -10h
.text:0000000000005B50
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 push    rbx
.text:0000000000005B51                 mov     rax, rsi
.text:0000000000005B54                 mov     rbx, rdi
.text:0000000000005B57                 xor     edi, edi
.text:0000000000005B59                 sub     rsp, 10h
.text:0000000000005B5D                 mov     rcx, fs:28h
.text:0000000000005B66                 mov     [rsp+18h+var_10], rcx
.text:0000000000005B6B                 xor     ecx, ecx
.text:0000000000005B6D                 mov     rsi, rsp
.text:0000000000005B70                 mov     rcx, rdx
.text:0000000000005B73                 mov     rdx, rax
.text:0000000000005B76                 call    vasnprintf
.text:0000000000005B7B                 test    rax, rax
.text:0000000000005B7E                 jz      short loc_5BC2
.text:0000000000005B80                 mov     rdx, [rsp+18h+var_18]
.text:0000000000005B84                 cmp     rdx, 7FFFFFFFh
.text:0000000000005B8B                 ja      short loc_5BA8
.text:0000000000005B8D                 mov     [rbx], rax
.text:0000000000005B90                 mov     eax, edx
.text:0000000000005B92
.text:0000000000005B92 loc_5B92:                               ; CODE XREF: u16_u16_vasprintf+70↓j
.text:0000000000005B92                                         ; u16_u16_vasprintf+77↓j
.text:0000000000005B92                 mov     rbx, [rsp+18h+var_10]
.text:0000000000005B97                 xor     rbx, fs:28h
.text:0000000000005BA0                 jnz     short loc_5BC9
.text:0000000000005BA2                 add     rsp, 10h
.text:0000000000005BA6                 pop     rbx
.text:0000000000005BA7                 retn
.text:0000000000005BA8 ; ---------------------------------------------------------------------------
.text:0000000000005BA8
.text:0000000000005BA8 loc_5BA8:                               ; CODE XREF: u16_u16_vasprintf+3B↑j
.text:0000000000005BA8                 mov     rdi, rax        ; ptr
.text:0000000000005BAB                 call    _free
.text:0000000000005BB0                 call    ___errno_location
.text:0000000000005BB5                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000005BBB                 mov     eax, 0FFFFFFFFh
.text:0000000000005BC0                 jmp     short loc_5B92
.text:0000000000005BC2 ; ---------------------------------------------------------------------------
.text:0000000000005BC2
.text:0000000000005BC2 loc_5BC2:                               ; CODE XREF: u16_u16_vasprintf+2E↑j
.text:0000000000005BC2                 mov     eax, 0FFFFFFFFh
.text:0000000000005BC7                 jmp     short loc_5B92
.text:0000000000005BC9 ; ---------------------------------------------------------------------------
.text:0000000000005BC9
.text:0000000000005BC9 loc_5BC9:                               ; CODE XREF: u16_u16_vasprintf+50↑j
.text:0000000000005BC9                 call    ___stack_chk_fail
.text:0000000000005BC9 ; } // starts at 5B50
.text:0000000000005BC9 u16_u16_vasprintf endp
.text:0000000000005BC9
.text:0000000000005BC9 ; ---------------------------------------------------------------------------
.text:0000000000005BCE                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0
.text:0000000000005BD0 ; __int64 __fastcall c_strtold(char *nptr, char **endptr)
.text:0000000000005BD0                 public c_strtold
.text:0000000000005BD0 c_strtold       proc near               ; CODE XREF: cl_strtold+78↑p
.text:0000000000005BD0
.text:0000000000005BD0 var_28          = tbyte ptr -28h
.text:0000000000005BD0
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 push    r12
.text:0000000000005BD2                 push    rbp
.text:0000000000005BD3                 mov     rbp, rdi
.text:0000000000005BD6                 push    rbx
.text:0000000000005BD7                 mov     rbx, rsi
.text:0000000000005BDA                 sub     rsp, 10h
.text:0000000000005BDE                 mov     rax, cs:c_locale_cache
.text:0000000000005BE5                 test    rax, rax
.text:0000000000005BE8                 jz      short loc_5C60
.text:0000000000005BEA
.text:0000000000005BEA loc_5BEA:                               ; CODE XREF: c_strtold+AA↓j
.text:0000000000005BEA                 mov     rdi, cs:c_locale_cache ; dataset
.text:0000000000005BF1                 test    rdi, rdi
.text:0000000000005BF4                 jz      short loc_5C40
.text:0000000000005BF6                 call    _uselocale
.text:0000000000005BFB                 test    rax, rax
.text:0000000000005BFE                 mov     r12, rax
.text:0000000000005C01                 jz      short loc_5C40
.text:0000000000005C03                 mov     rsi, rbx        ; endptr
.text:0000000000005C06                 mov     rdi, rbp        ; nptr
.text:0000000000005C09                 call    _strtold
.text:0000000000005C0E                 fstp    [rsp+28h+var_28]
.text:0000000000005C11                 call    ___errno_location
.text:0000000000005C16                 mov     rdi, r12        ; dataset
.text:0000000000005C19                 mov     rbx, rax
.text:0000000000005C1C                 mov     ebp, [rax]
.text:0000000000005C1E                 call    _uselocale
.text:0000000000005C23                 test    rax, rax
.text:0000000000005C26                 fld     [rsp+28h+var_28]
.text:0000000000005C29                 jz      short loc_5C7F
.text:0000000000005C2B                 mov     [rbx], ebp
.text:0000000000005C2D                 add     rsp, 10h
.text:0000000000005C31                 pop     rbx
.text:0000000000005C32                 pop     rbp
.text:0000000000005C33                 pop     r12
.text:0000000000005C35                 retn
.text:0000000000005C35 ; ---------------------------------------------------------------------------
.text:0000000000005C36                 align 20h
.text:0000000000005C40
.text:0000000000005C40 loc_5C40:                               ; CODE XREF: c_strtold+24↑j
.text:0000000000005C40                                         ; c_strtold+31↑j
.text:0000000000005C40                 test    rbx, rbx
.text:0000000000005C43                 jnz     short loc_5C50
.text:0000000000005C45                 add     rsp, 10h
.text:0000000000005C49                 fldz
.text:0000000000005C4B                 pop     rbx
.text:0000000000005C4C                 pop     rbp
.text:0000000000005C4D                 pop     r12
.text:0000000000005C4F                 retn
.text:0000000000005C50 ; ---------------------------------------------------------------------------
.text:0000000000005C50
.text:0000000000005C50 loc_5C50:                               ; CODE XREF: c_strtold+73↑j
.text:0000000000005C50                 mov     [rbx], rbp
.text:0000000000005C53                 add     rsp, 10h
.text:0000000000005C57                 fldz
.text:0000000000005C59                 pop     rbx
.text:0000000000005C5A                 pop     rbp
.text:0000000000005C5B                 pop     r12
.text:0000000000005C5D                 retn
.text:0000000000005C5D ; ---------------------------------------------------------------------------
.text:0000000000005C5E                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: c_strtold+18↑j
.text:0000000000005C60                 lea     rsi, locale     ; "C"
.text:0000000000005C67                 xor     edx, edx        ; base
.text:0000000000005C69                 mov     edi, 1FBFh      ; category_mask
.text:0000000000005C6E                 call    _newlocale
.text:0000000000005C73                 mov     cs:c_locale_cache, rax
.text:0000000000005C7A                 jmp     loc_5BEA
.text:0000000000005C7F ; ---------------------------------------------------------------------------
.text:0000000000005C7F
.text:0000000000005C7F loc_5C7F:                               ; CODE XREF: c_strtold+59↑j
.text:0000000000005C7F                 fstp    st
.text:0000000000005C81                 call    _abort
.text:0000000000005C81 ; } // starts at 5BD0
.text:0000000000005C81 c_strtold       endp
.text:0000000000005C81
.text:0000000000005C81 ; ---------------------------------------------------------------------------
.text:0000000000005C86                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90 ; Attributes: info_from_lumina
.text:0000000000005C90
.text:0000000000005C90 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005C90                 public close_stream
.text:0000000000005C90 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005C90                                         ; close_stdout+33↑p
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 push    r12
.text:0000000000005C92                 push    rbp
.text:0000000000005C93                 mov     rbp, rdi
.text:0000000000005C96                 push    rbx
.text:0000000000005C97                 call    ___fpending
.text:0000000000005C9C                 mov     ebx, [rbp+0]
.text:0000000000005C9F                 mov     rdi, rbp        ; stream
.text:0000000000005CA2                 mov     r12, rax
.text:0000000000005CA5                 call    rpl_fclose
.text:0000000000005CAA                 and     ebx, 20h
.text:0000000000005CAD                 test    ebx, ebx
.text:0000000000005CAF                 jnz     short loc_5CC8
.text:0000000000005CB1                 test    eax, eax
.text:0000000000005CB3                 jz      short loc_5CBF
.text:0000000000005CB5                 test    r12, r12
.text:0000000000005CB8                 mov     eax, 0FFFFFFFFh
.text:0000000000005CBD                 jz      short loc_5CF8
.text:0000000000005CBF
.text:0000000000005CBF loc_5CBF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005CBF                 pop     rbx
.text:0000000000005CC0                 pop     rbp
.text:0000000000005CC1                 pop     r12
.text:0000000000005CC3                 retn
.text:0000000000005CC3 ; ---------------------------------------------------------------------------
.text:0000000000005CC4                 align 8
.text:0000000000005CC8
.text:0000000000005CC8 loc_5CC8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005CC8                 test    eax, eax
.text:0000000000005CCA                 jnz     short loc_5CE8
.text:0000000000005CCC                 call    ___errno_location
.text:0000000000005CD1                 mov     dword ptr [rax], 0
.text:0000000000005CD7                 mov     eax, 0FFFFFFFFh
.text:0000000000005CDC                 pop     rbx
.text:0000000000005CDD                 pop     rbp
.text:0000000000005CDE                 pop     r12
.text:0000000000005CE0                 retn
.text:0000000000005CE0 ; ---------------------------------------------------------------------------
.text:0000000000005CE1                 align 8
.text:0000000000005CE8
.text:0000000000005CE8 loc_5CE8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005CE8                 pop     rbx
.text:0000000000005CE9                 mov     eax, 0FFFFFFFFh
.text:0000000000005CEE                 pop     rbp
.text:0000000000005CEF                 pop     r12
.text:0000000000005CF1                 retn
.text:0000000000005CF1 ; ---------------------------------------------------------------------------
.text:0000000000005CF2                 align 8
.text:0000000000005CF8
.text:0000000000005CF8 loc_5CF8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005CF8                 call    ___errno_location
.text:0000000000005CFD                 cmp     dword ptr [rax], 9
.text:0000000000005D00                 pop     rbx
.text:0000000000005D01                 pop     rbp
.text:0000000000005D02                 pop     r12
.text:0000000000005D04                 setnz   al
.text:0000000000005D07                 movzx   eax, al
.text:0000000000005D0A                 neg     eax
.text:0000000000005D0C                 retn
.text:0000000000005D0C ; } // starts at 5C90
.text:0000000000005D0C close_stream    endp
.text:0000000000005D0C
.text:0000000000005D0C ; ---------------------------------------------------------------------------
.text:0000000000005D0D                 align 10h
.text:0000000000005D10
.text:0000000000005D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D10
.text:0000000000005D10
.text:0000000000005D10                 public hard_locale
.text:0000000000005D10 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005D10 ; __unwind {
.text:0000000000005D10                 sub     rsp, 8
.text:0000000000005D14                 xor     esi, esi        ; locale
.text:0000000000005D16                 call    _setlocale
.text:0000000000005D1B                 mov     rdx, rax
.text:0000000000005D1E                 mov     eax, 1
.text:0000000000005D23                 test    rdx, rdx
.text:0000000000005D26                 jz      short loc_5D45
.text:0000000000005D28                 lea     rdi, locale     ; "C"
.text:0000000000005D2F                 mov     ecx, 2
.text:0000000000005D34                 mov     rsi, rdx
.text:0000000000005D37                 repe cmpsb
.text:0000000000005D39                 setnbe  cl
.text:0000000000005D3C                 sbb     cl, 0
.text:0000000000005D3F                 xor     eax, eax
.text:0000000000005D41                 test    cl, cl
.text:0000000000005D43                 jnz     short loc_5D50
.text:0000000000005D45
.text:0000000000005D45 loc_5D45:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005D45                 add     rsp, 8
.text:0000000000005D49                 retn
.text:0000000000005D49 ; ---------------------------------------------------------------------------
.text:0000000000005D4A                 align 10h
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005D50                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005D57                 mov     ecx, 6
.text:0000000000005D5C                 mov     rsi, rdx
.text:0000000000005D5F                 repe cmpsb
.text:0000000000005D61                 setnbe  al
.text:0000000000005D64                 sbb     al, 0
.text:0000000000005D66                 test    al, al
.text:0000000000005D68                 setnz   al
.text:0000000000005D6B                 add     rsp, 8
.text:0000000000005D6F                 retn
.text:0000000000005D6F ; } // starts at 5D10
.text:0000000000005D6F hard_locale     endp
.text:0000000000005D6F
.text:0000000000005D70
.text:0000000000005D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D70
.text:0000000000005D70
.text:0000000000005D70                 public locale_charset
.text:0000000000005D70 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005D70 ; __unwind {
.text:0000000000005D70                 sub     rsp, 8
.text:0000000000005D74                 mov     edi, 0Eh        ; item
.text:0000000000005D79                 call    _nl_langinfo
.text:0000000000005D7E                 test    rax, rax
.text:0000000000005D81                 jz      short loc_5DA0
.text:0000000000005D83                 cmp     byte ptr [rax], 0
.text:0000000000005D86                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005D8D                 cmovz   rax, rdx
.text:0000000000005D91                 add     rsp, 8
.text:0000000000005D95                 retn
.text:0000000000005D95 ; ---------------------------------------------------------------------------
.text:0000000000005D96                 align 20h
.text:0000000000005DA0
.text:0000000000005DA0 loc_5DA0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005DA0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005DA7                 add     rsp, 8
.text:0000000000005DAB                 retn
.text:0000000000005DAB ; } // starts at 5D70
.text:0000000000005DAB locale_charset  endp
.text:0000000000005DAB
.text:0000000000005DAB ; ---------------------------------------------------------------------------
.text:0000000000005DAC                 align 10h
.text:0000000000005DB0
.text:0000000000005DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DB0
.text:0000000000005DB0 ; Attributes: info_from_lumina
.text:0000000000005DB0
.text:0000000000005DB0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000005DB0                 public rpl_fclose
.text:0000000000005DB0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000005DB0 ; __unwind {
.text:0000000000005DB0                 push    r12
.text:0000000000005DB2                 push    rbp
.text:0000000000005DB3                 push    rbx
.text:0000000000005DB4                 mov     rbx, rdi
.text:0000000000005DB7                 call    _fileno
.text:0000000000005DBC                 test    eax, eax
.text:0000000000005DBE                 mov     rdi, rbx        ; fp
.text:0000000000005DC1                 js      short loc_5E17
.text:0000000000005DC3                 call    ___freading
.text:0000000000005DC8                 test    eax, eax
.text:0000000000005DCA                 jnz     short loc_5DF8
.text:0000000000005DCC
.text:0000000000005DCC loc_5DCC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000005DCC                 mov     rdi, rbx        ; stream
.text:0000000000005DCF                 call    rpl_fflush
.text:0000000000005DD4                 test    eax, eax
.text:0000000000005DD6                 jz      short loc_5E14
.text:0000000000005DD8                 call    ___errno_location
.text:0000000000005DDD                 mov     r12d, [rax]
.text:0000000000005DE0                 mov     rdi, rbx        ; stream
.text:0000000000005DE3                 mov     rbp, rax
.text:0000000000005DE6                 call    _fclose
.text:0000000000005DEB                 test    r12d, r12d
.text:0000000000005DEE                 jnz     short loc_5E20
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005DF0                 pop     rbx
.text:0000000000005DF1                 pop     rbp
.text:0000000000005DF2                 pop     r12
.text:0000000000005DF4                 retn
.text:0000000000005DF4 ; ---------------------------------------------------------------------------
.text:0000000000005DF5                 align 8
.text:0000000000005DF8
.text:0000000000005DF8 loc_5DF8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005DF8                 mov     rdi, rbx        ; stream
.text:0000000000005DFB                 call    _fileno
.text:0000000000005E00                 xor     esi, esi        ; offset
.text:0000000000005E02                 mov     edx, 1          ; whence
.text:0000000000005E07                 mov     edi, eax        ; fd
.text:0000000000005E09                 call    _lseek
.text:0000000000005E0E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E12                 jnz     short loc_5DCC
.text:0000000000005E14
.text:0000000000005E14 loc_5E14:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005E14                 mov     rdi, rbx        ; stream
.text:0000000000005E17
.text:0000000000005E17 loc_5E17:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005E17                 pop     rbx
.text:0000000000005E18                 pop     rbp
.text:0000000000005E19                 pop     r12
.text:0000000000005E1B                 jmp     _fclose
.text:0000000000005E20 ; ---------------------------------------------------------------------------
.text:0000000000005E20
.text:0000000000005E20 loc_5E20:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005E20                 mov     [rbp+0], r12d
.text:0000000000005E24                 mov     eax, 0FFFFFFFFh
.text:0000000000005E29                 jmp     short loc_5DF0
.text:0000000000005E29 ; } // starts at 5DB0
.text:0000000000005E29 rpl_fclose      endp
.text:0000000000005E29
.text:0000000000005E29 ; ---------------------------------------------------------------------------
.text:0000000000005E2B                 align 10h
.text:0000000000005E30
.text:0000000000005E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E30
.text:0000000000005E30 ; Attributes: info_from_lumina
.text:0000000000005E30
.text:0000000000005E30 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005E30                 public rpl_fflush
.text:0000000000005E30 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005E30 ; __unwind {
.text:0000000000005E30                 test    rdi, rdi
.text:0000000000005E33                 push    rbx
.text:0000000000005E34                 mov     rbx, rdi
.text:0000000000005E37                 jz      short loc_5E4A
.text:0000000000005E39                 call    ___freading
.text:0000000000005E3E                 test    eax, eax
.text:0000000000005E40                 jz      short loc_5E4A
.text:0000000000005E42                 test    dword ptr [rbx], 100h
.text:0000000000005E48                 jnz     short loc_5E58
.text:0000000000005E4A
.text:0000000000005E4A loc_5E4A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000005E4A                                         ; rpl_fflush+10↑j
.text:0000000000005E4A                 mov     rdi, rbx        ; stream
.text:0000000000005E4D                 pop     rbx
.text:0000000000005E4E                 jmp     _fflush
.text:0000000000005E4E ; ---------------------------------------------------------------------------
.text:0000000000005E53                 align 8
.text:0000000000005E58
.text:0000000000005E58 loc_5E58:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005E58                 mov     rdi, rbx
.text:0000000000005E5B                 mov     edx, 1
.text:0000000000005E60                 xor     esi, esi
.text:0000000000005E62                 call    rpl_fseeko
.text:0000000000005E67                 mov     rdi, rbx        ; stream
.text:0000000000005E6A                 pop     rbx
.text:0000000000005E6B                 jmp     _fflush
.text:0000000000005E6B ; } // starts at 5E30
.text:0000000000005E6B rpl_fflush      endp
.text:0000000000005E6B
.text:0000000000005E70
.text:0000000000005E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E70
.text:0000000000005E70 ; Attributes: info_from_lumina
.text:0000000000005E70
.text:0000000000005E70 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005E70                 public rpl_fseeko
.text:0000000000005E70 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005E70 ; __unwind {
.text:0000000000005E70                 mov     rax, [rdi+8]
.text:0000000000005E74                 cmp     [rdi+10h], rax
.text:0000000000005E78                 jz      short loc_5E80
.text:0000000000005E7A
.text:0000000000005E7A loc_5E7A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000005E7A                                         ; rpl_fseeko+1F↓j
.text:0000000000005E7A                 jmp     _fseeko
.text:0000000000005E7A ; ---------------------------------------------------------------------------
.text:0000000000005E7F                 align 20h
.text:0000000000005E80
.text:0000000000005E80 loc_5E80:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000005E80                 mov     rax, [rdi+20h]
.text:0000000000005E84                 cmp     [rdi+28h], rax
.text:0000000000005E88                 jnz     short loc_5E7A
.text:0000000000005E8A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000005E8F                 jnz     short loc_5E7A
.text:0000000000005E91                 push    r12
.text:0000000000005E93                 push    rbp
.text:0000000000005E94                 mov     r12d, edx
.text:0000000000005E97                 push    rbx
.text:0000000000005E98                 mov     rbp, rsi
.text:0000000000005E9B                 mov     rbx, rdi
.text:0000000000005E9E                 call    _fileno
.text:0000000000005EA3                 mov     edx, r12d       ; whence
.text:0000000000005EA6                 mov     rsi, rbp        ; offset
.text:0000000000005EA9                 mov     edi, eax        ; fd
.text:0000000000005EAB                 call    _lseek
.text:0000000000005EB0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005EB4                 jz      short loc_5EC2
.text:0000000000005EB6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000005EB9                 mov     [rbx+90h], rax
.text:0000000000005EC0                 xor     eax, eax
.text:0000000000005EC2
.text:0000000000005EC2 loc_5EC2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005EC2                 pop     rbx
.text:0000000000005EC3                 pop     rbp
.text:0000000000005EC4                 pop     r12
.text:0000000000005EC6                 retn
.text:0000000000005EC6 ; } // starts at 5E70
.text:0000000000005EC6 rpl_fseeko      endp
.text:0000000000005EC6
.text:0000000000005EC6 ; ---------------------------------------------------------------------------
.text:0000000000005EC7                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0 ; Attributes: bp-based frame
.text:0000000000005ED0
.text:0000000000005ED0                 public vasnprintf
.text:0000000000005ED0 vasnprintf      proc near               ; CODE XREF: u16_u16_vasprintf+26↑p
.text:0000000000005ED0
.text:0000000000005ED0 var_450         = tbyte ptr -450h
.text:0000000000005ED0 var_440         = tbyte ptr -440h
.text:0000000000005ED0 var_430         = qword ptr -430h
.text:0000000000005ED0 var_421         = byte ptr -421h
.text:0000000000005ED0 ptr             = qword ptr -420h
.text:0000000000005ED0 var_418         = qword ptr -418h
.text:0000000000005ED0 var_410         = qword ptr -410h
.text:0000000000005ED0 var_408         = qword ptr -408h
.text:0000000000005ED0 var_400         = qword ptr -400h
.text:0000000000005ED0 var_3F8         = qword ptr -3F8h
.text:0000000000005ED0 var_3F0         = qword ptr -3F0h
.text:0000000000005ED0 src             = qword ptr -3E8h
.text:0000000000005ED0 var_3E0         = qword ptr -3E0h
.text:0000000000005ED0 var_3D8         = qword ptr -3D8h
.text:0000000000005ED0 var_3D0         = qword ptr -3D0h
.text:0000000000005ED0 n               = qword ptr -3C8h
.text:0000000000005ED0 var_3BC         = dword ptr -3BCh
.text:0000000000005ED0 var_3B8         = dword ptr -3B8h
.text:0000000000005ED0 var_3B4         = dword ptr -3B4h
.text:0000000000005ED0 var_3B0         = byte ptr -3B0h
.text:0000000000005ED0 var_3A8         = qword ptr -3A8h
.text:0000000000005ED0 var_2C0         = qword ptr -2C0h
.text:0000000000005ED0 var_2B8         = qword ptr -2B8h
.text:0000000000005ED0 var_2B0         = qword ptr -2B0h
.text:0000000000005ED0 var_2A8         = qword ptr -2A8h
.text:0000000000005ED0 var_38          = qword ptr -38h
.text:0000000000005ED0
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 push    rbp
.text:0000000000005ED1                 mov     rbp, rsp
.text:0000000000005ED4                 push    r15
.text:0000000000005ED6                 push    r14
.text:0000000000005ED8                 push    r13
.text:0000000000005EDA                 push    r12
.text:0000000000005EDC                 lea     r14, [rbp+var_3B0]
.text:0000000000005EE3                 push    rbx
.text:0000000000005EE4                 mov     rbx, rdx
.text:0000000000005EE7                 mov     r12, rcx
.text:0000000000005EEA                 mov     rdx, r14
.text:0000000000005EED                 sub     rsp, 408h
.text:0000000000005EF4                 mov     [rbp+var_418], rsi
.text:0000000000005EFB                 lea     rsi, [rbp+var_2C0]
.text:0000000000005F02                 mov     [rbp+src], rdi
.text:0000000000005F09                 mov     rdi, rbx
.text:0000000000005F0C                 mov     [rbp+var_410], r14
.text:0000000000005F13                 mov     rax, fs:28h
.text:0000000000005F1C                 mov     [rbp+var_38], rax
.text:0000000000005F20                 xor     eax, eax
.text:0000000000005F22                 mov     [rbp+var_408], rsi
.text:0000000000005F29                 call    printf_parse
.text:0000000000005F2E                 test    eax, eax
.text:0000000000005F30                 js      loc_6D98
.text:0000000000005F36                 mov     rsi, r14
.text:0000000000005F39                 mov     rdi, r12
.text:0000000000005F3C                 call    printf_fetchargs
.text:0000000000005F41                 test    eax, eax
.text:0000000000005F43                 js      loc_6E00
.text:0000000000005F49                 mov     rax, [rbp+var_2B0]
.text:0000000000005F50                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F57                 add     rax, 7
.text:0000000000005F5B                 cmp     rax, 6
.text:0000000000005F5F                 cmovbe  rax, rdx
.text:0000000000005F63                 add     rax, [rbp+var_2A8]
.text:0000000000005F6A                 jb      loc_6998
.text:0000000000005F70                 mov     rdi, rax
.text:0000000000005F73                 xor     r8d, r8d
.text:0000000000005F76                 add     rdi, 6          ; size
.text:0000000000005F7A                 setb    r8b
.text:0000000000005F7E                 jb      loc_6998
.text:0000000000005F84                 cmp     rdi, 0F9Fh
.text:0000000000005F8B                 jbe     loc_60D8
.text:0000000000005F91                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F95                 mov     [rbp+n], r8
.text:0000000000005F9C                 jz      loc_6998
.text:0000000000005FA2                 call    _malloc
.text:0000000000005FA7                 test    rax, rax
.text:0000000000005FAA                 mov     [rbp+var_3D8], rax
.text:0000000000005FB1                 jz      loc_6998
.text:0000000000005FB7                 mov     r8, [rbp+n]
.text:0000000000005FBE                 mov     [rbp+ptr], rax
.text:0000000000005FC5
.text:0000000000005FC5 loc_5FC5:                               ; CODE XREF: vasnprintf+22E↓j
.text:0000000000005FC5                 xor     r12d, r12d
.text:0000000000005FC8                 cmp     [rbp+src], 0
.text:0000000000005FD0                 jz      short loc_5FDC
.text:0000000000005FD2                 mov     rax, [rbp+var_418]
.text:0000000000005FD9                 mov     r12, [rax]
.text:0000000000005FDC
.text:0000000000005FDC loc_5FDC:                               ; CODE XREF: vasnprintf+100↑j
.text:0000000000005FDC                 mov     r13, [rbp+var_2B8]
.text:0000000000005FE3                 lea     rax, [rbp+var_3BC]
.text:0000000000005FEA                 mov     r15, [rbp+src]
.text:0000000000005FF1                 mov     [rbp+var_400], 0
.text:0000000000005FFC                 mov     [rbp+var_3F0], rax
.text:0000000000006003                 mov     rax, rbx
.text:0000000000006006                 mov     rbx, r8
.text:0000000000006009                 mov     rcx, [r13+0]
.text:000000000000600D                 mov     r8, rax
.text:0000000000006010                 cmp     rcx, r8
.text:0000000000006013                 jz      loc_6981
.text:0000000000006019
.text:0000000000006019 loc_6019:                               ; CODE XREF: vasnprintf+AAB↓j
.text:0000000000006019                 sub     rcx, r8
.text:000000000000601C                 mov     rax, rbx
.text:000000000000601F                 add     rax, rcx
.text:0000000000006022                 mov     r14, rax
.text:0000000000006025                 jnb     loc_6108
.text:000000000000602B                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000602F                 jz      loc_6B00
.text:0000000000006035
.text:0000000000006035 loc_6035:                               ; CODE XREF: vasnprintf+4E2↓j
.text:0000000000006035                                         ; vasnprintf+A86↓j ...
.text:0000000000006035                 call    ___errno_location
.text:000000000000603A                 mov     [rbp+n], rax
.text:0000000000006041
.text:0000000000006041 loc_6041:                               ; CODE XREF: vasnprintf+640↓j
.text:0000000000006041                                         ; vasnprintf+652↓j ...
.text:0000000000006041                 cmp     r15, [rbp+src]
.text:0000000000006048                 jz      short loc_6053
.text:000000000000604A                 test    r15, r15
.text:000000000000604D                 jnz     loc_6B30
.text:0000000000006053
.text:0000000000006053 loc_6053:                               ; CODE XREF: vasnprintf+178↑j
.text:0000000000006053                                         ; vasnprintf+C68↓j
.text:0000000000006053                 mov     rax, [rbp+ptr]
.text:000000000000605A                 test    rax, rax
.text:000000000000605D                 jz      short loc_6067
.text:000000000000605F                 mov     rdi, rax        ; ptr
.text:0000000000006062                 call    _free
.text:0000000000006067
.text:0000000000006067 loc_6067:                               ; CODE XREF: vasnprintf+18D↑j
.text:0000000000006067                                         ; vasnprintf+AD4↓j
.text:0000000000006067                 mov     rax, [rbp+var_408]
.text:000000000000606E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006075                 add     rax, 20h ; ' '
.text:0000000000006079                 cmp     rdi, rax
.text:000000000000607C                 jz      short loc_6083
.text:000000000000607E                 call    _free
.text:0000000000006083
.text:0000000000006083 loc_6083:                               ; CODE XREF: vasnprintf+1AC↑j
.text:0000000000006083                 mov     rax, [rbp+var_410]
.text:000000000000608A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006091                 add     rax, 10h
.text:0000000000006095                 cmp     rdi, rax
.text:0000000000006098                 jz      short loc_609F
.text:000000000000609A                 call    _free
.text:000000000000609F
.text:000000000000609F loc_609F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000609F                 mov     rax, [rbp+n]
.text:00000000000060A6                 xor     r15d, r15d
.text:00000000000060A9                 mov     dword ptr [rax], 0Ch
.text:00000000000060AF
.text:00000000000060AF loc_60AF:                               ; CODE XREF: vasnprintf+7BA↓j
.text:00000000000060AF                                         ; vasnprintf+EBE↓j ...
.text:00000000000060AF                 mov     rdi, [rbp+var_38]
.text:00000000000060B3                 xor     rdi, fs:28h
.text:00000000000060BC                 mov     rax, r15
.text:00000000000060BF                 jnz     loc_6FC7
.text:00000000000060C5                 lea     rsp, [rbp-28h]
.text:00000000000060C9                 pop     rbx
.text:00000000000060CA                 pop     r12
.text:00000000000060CC                 pop     r13
.text:00000000000060CE                 pop     r14
.text:00000000000060D0                 pop     r15
.text:00000000000060D2                 pop     rbp
.text:00000000000060D3                 retn
.text:00000000000060D3 ; ---------------------------------------------------------------------------
.text:00000000000060D4                 align 8
.text:00000000000060D8
.text:00000000000060D8 loc_60D8:                               ; CODE XREF: vasnprintf+BB↑j
.text:00000000000060D8                 add     rax, 24h ; '$'
.text:00000000000060DC                 mov     [rbp+ptr], 0
.text:00000000000060E7                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:00000000000060EB                 sub     rsp, rax
.text:00000000000060EE                 lea     rax, [rsp+430h+var_421]
.text:00000000000060F3                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:00000000000060F7                 mov     [rbp+var_3D8], rax
.text:00000000000060FE                 jmp     loc_5FC5
.text:00000000000060FE ; ---------------------------------------------------------------------------
.text:0000000000006103                 align 8
.text:0000000000006108
.text:0000000000006108 loc_6108:                               ; CODE XREF: vasnprintf+155↑j
.text:0000000000006108                 cmp     r12, rax
.text:000000000000610B                 jnb     short loc_6174
.text:000000000000610D                 test    r12, r12
.text:0000000000006110                 jnz     loc_6A40
.text:0000000000006116                 cmp     rax, 0Ch
.text:000000000000611A                 ja      loc_6A52
.text:0000000000006120                 mov     r12d, 0Ch
.text:0000000000006126
.text:0000000000006126 loc_6126:                               ; CODE XREF: vasnprintf+B7C↓j
.text:0000000000006126                 cmp     r15, [rbp+src]
.text:000000000000612D                 setz    dl
.text:0000000000006130                 test    r15, r15
.text:0000000000006133                 jz      loc_6A78
.text:0000000000006139
.text:0000000000006139 loc_6139:                               ; CODE XREF: vasnprintf+B9C↓j
.text:0000000000006139                 test    dl, dl
.text:000000000000613B                 jnz     loc_6A78
.text:0000000000006141                 mov     rsi, r12        ; size
.text:0000000000006144                 mov     rdi, r15        ; ptr
.text:0000000000006147                 mov     [rbp+var_3D0], r8
.text:000000000000614E                 mov     [rbp+n], rcx
.text:0000000000006155                 call    _realloc
.text:000000000000615A                 test    rax, rax
.text:000000000000615D                 mov     rcx, [rbp+n]
.text:0000000000006164                 mov     r8, [rbp+var_3D0]
.text:000000000000616B                 jz      loc_6B1B
.text:0000000000006171                 mov     r15, rax
.text:0000000000006174
.text:0000000000006174 loc_6174:                               ; CODE XREF: vasnprintf+23B↑j
.text:0000000000006174                                         ; vasnprintf+C23↓j ...
.text:0000000000006174                 lea     rdi, [r15+rbx]  ; dest
.text:0000000000006178                 mov     rdx, rcx        ; n
.text:000000000000617B                 mov     rsi, r8         ; src
.text:000000000000617E                 call    _memcpy
.text:0000000000006183
.text:0000000000006183 loc_6183:                               ; CODE XREF: vasnprintf+AB4↓j
.text:0000000000006183                 mov     rax, [rbp+var_400]
.text:000000000000618A                 cmp     [rbp+var_2C0], rax
.text:0000000000006191                 jz      loc_6E4B
.text:0000000000006197                 movzx   edx, byte ptr [r13+48h]
.text:000000000000619C                 mov     rax, [r13+50h]
.text:00000000000061A0                 cmp     dl, 25h ; '%'
.text:00000000000061A3                 jz      loc_6938
.text:00000000000061A9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000061AD                 jz      def_642B        ; jumptable 000000000000642B default case, case 0
.text:00000000000061AD                                         ; jumptable 00000000000069D0 default case
.text:00000000000061B3                 mov     r8, [rbp+var_3A8]
.text:00000000000061BA                 shl     rax, 5
.text:00000000000061BE                 add     rax, r8
.text:00000000000061C1                 cmp     dl, 6Eh ; 'n'
.text:00000000000061C4                 mov     edi, [rax]
.text:00000000000061C6                 mov     dword ptr [rbp+var_3D0], edi
.text:00000000000061CC                 jz      loc_69B0
.text:00000000000061D2                 mov     eax, [r13+10h]
.text:00000000000061D6                 mov     rdi, [rbp+var_3D8]
.text:00000000000061DD                 test    al, 1
.text:00000000000061DF                 mov     byte ptr [rdi], 25h ; '%'
.text:00000000000061E2                 lea     rbx, [rdi+1]
.text:00000000000061E6                 jz      short loc_61F7
.text:00000000000061E8                 mov     rdi, [rbp+var_3D8]
.text:00000000000061EF                 lea     rbx, [rdi+2]
.text:00000000000061F3                 mov     byte ptr [rdi+1], 27h ; '''
.text:00000000000061F7
.text:00000000000061F7 loc_61F7:                               ; CODE XREF: vasnprintf+316↑j
.text:00000000000061F7                 test    al, 2
.text:00000000000061F9                 jz      short loc_6202
.text:00000000000061FB                 mov     byte ptr [rbx], 2Dh ; '-'
.text:00000000000061FE                 add     rbx, 1
.text:0000000000006202
.text:0000000000006202 loc_6202:                               ; CODE XREF: vasnprintf+329↑j
.text:0000000000006202                 test    al, 4
.text:0000000000006204                 jz      short loc_620D
.text:0000000000006206                 mov     byte ptr [rbx], 2Bh ; '+'
.text:0000000000006209                 add     rbx, 1
.text:000000000000620D
.text:000000000000620D loc_620D:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000620D                 test    al, 8
.text:000000000000620F                 jz      short loc_6218
.text:0000000000006211                 mov     byte ptr [rbx], 20h ; ' '
.text:0000000000006214                 add     rbx, 1
.text:0000000000006218
.text:0000000000006218 loc_6218:                               ; CODE XREF: vasnprintf+33F↑j
.text:0000000000006218                 test    al, 10h
.text:000000000000621A                 jz      short loc_6223
.text:000000000000621C                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000621F                 add     rbx, 1
.text:0000000000006223
.text:0000000000006223 loc_6223:                               ; CODE XREF: vasnprintf+34A↑j
.text:0000000000006223                 test    al, 40h
.text:0000000000006225                 jz      short loc_622E
.text:0000000000006227                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000622A                 add     rbx, 1
.text:000000000000622E
.text:000000000000622E loc_622E:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000622E                 test    al, 20h
.text:0000000000006230                 jz      short loc_6239
.text:0000000000006232                 mov     byte ptr [rbx], 30h ; '0'
.text:0000000000006235                 add     rbx, 1
.text:0000000000006239
.text:0000000000006239 loc_6239:                               ; CODE XREF: vasnprintf+360↑j
.text:0000000000006239                 mov     rsi, [r13+18h]  ; src
.text:000000000000623D                 mov     rdx, [r13+20h]
.text:0000000000006241                 cmp     rsi, rdx
.text:0000000000006244                 jz      short loc_6276
.text:0000000000006246                 mov     rcx, rdx
.text:0000000000006249                 mov     rdi, rbx        ; dest
.text:000000000000624C                 mov     [rbp+var_3E0], r8
.text:0000000000006253                 sub     rcx, rsi
.text:0000000000006256                 mov     rdx, rcx        ; n
.text:0000000000006259                 mov     [rbp+n], rcx
.text:0000000000006260                 call    _memcpy
.text:0000000000006265                 mov     rcx, [rbp+n]
.text:000000000000626C                 mov     r8, [rbp+var_3E0]
.text:0000000000006273                 add     rbx, rcx
.text:0000000000006276
.text:0000000000006276 loc_6276:                               ; CODE XREF: vasnprintf+374↑j
.text:0000000000006276                 mov     rsi, [r13+30h]  ; src
.text:000000000000627A                 mov     rdx, [r13+38h]
.text:000000000000627E                 cmp     rsi, rdx
.text:0000000000006281                 jz      short loc_62B3
.text:0000000000006283                 mov     rcx, rdx
.text:0000000000006286                 mov     rdi, rbx        ; dest
.text:0000000000006289                 mov     [rbp+var_3E0], r8
.text:0000000000006290                 sub     rcx, rsi
.text:0000000000006293                 mov     rdx, rcx        ; n
.text:0000000000006296                 mov     [rbp+n], rcx
.text:000000000000629D                 call    _memcpy
.text:00000000000062A2                 mov     rcx, [rbp+n]
.text:00000000000062A9                 mov     r8, [rbp+var_3E0]
.text:00000000000062B0                 add     rbx, rcx
.text:00000000000062B3
.text:00000000000062B3 loc_62B3:                               ; CODE XREF: vasnprintf+3B1↑j
.text:00000000000062B3                 mov     edi, dword ptr [rbp+var_3D0]
.text:00000000000062B9                 cmp     edi, 10h
.text:00000000000062BC                 ja      short loc_62EB
.text:00000000000062BE                 mov     eax, 1
.text:00000000000062C3                 mov     ecx, edi
.text:00000000000062C5                 shl     rax, cl
.text:00000000000062C8                 test    eax, 14180h
.text:00000000000062CD                 jnz     short loc_62E4
.text:00000000000062CF                 test    ah, 10h
.text:00000000000062D2                 jnz     loc_6C30
.text:00000000000062D8                 test    ah, 6
.text:00000000000062DB                 jz      short loc_62EB
.text:00000000000062DD                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:00000000000062E0                 add     rbx, 1
.text:00000000000062E4
.text:00000000000062E4 loc_62E4:                               ; CODE XREF: vasnprintf+3FD↑j
.text:00000000000062E4                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:00000000000062E7                 add     rbx, 1
.text:00000000000062EB
.text:00000000000062EB loc_62EB:                               ; CODE XREF: vasnprintf+3EC↑j
.text:00000000000062EB                                         ; vasnprintf+40B↑j ...
.text:00000000000062EB                 movzx   eax, byte ptr [r13+48h]
.text:00000000000062F0                 mov     byte ptr [rbx+1], 0
.text:00000000000062F4                 mov     [rbx], al
.text:00000000000062F6                 mov     rax, [r13+28h]
.text:00000000000062FA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000062FE                 jz      loc_6A30
.text:0000000000006304                 shl     rax, 5
.text:0000000000006308                 add     rax, r8
.text:000000000000630B                 cmp     dword ptr [rax], 5
.text:000000000000630E                 jnz     def_642B        ; jumptable 000000000000642B default case, case 0
.text:000000000000630E                                         ; jumptable 00000000000069D0 default case
.text:0000000000006314                 mov     eax, [rax+10h]
.text:0000000000006317                 mov     dword ptr [rbp+var_3E0], 1
.text:0000000000006321                 mov     [rbp+var_3B8], eax
.text:0000000000006327
.text:0000000000006327 loc_6327:                               ; CODE XREF: vasnprintf+B6A↓j
.text:0000000000006327                 mov     rax, [r13+40h]
.text:000000000000632B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000632F                 jz      short loc_635C
.text:0000000000006331                 shl     rax, 5
.text:0000000000006335                 add     r8, rax
.text:0000000000006338                 cmp     dword ptr [r8], 5
.text:000000000000633C                 jnz     def_642B        ; jumptable 000000000000642B default case, case 0
.text:000000000000633C                                         ; jumptable 00000000000069D0 default case
.text:0000000000006342                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006348                 mov     edx, [r8+10h]
.text:000000000000634C                 mov     [rbp+rax*4+var_3B8], edx
.text:0000000000006353                 lea     eax, [rax+1]
.text:0000000000006356                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000635C
.text:000000000000635C loc_635C:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000635C                 mov     rax, r14
.text:000000000000635F                 xor     edx, edx
.text:0000000000006361                 add     rax, 2
.text:0000000000006365                 jb      loc_6FCC
.text:000000000000636B                 cmp     r12, rax
.text:000000000000636E                 jnb     short loc_63BB
.text:0000000000006370                 test    r12, r12
.text:0000000000006373                 jnz     loc_6B98
.text:0000000000006379                 cmp     rax, 0Ch
.text:000000000000637D                 ja      loc_6BB0
.text:0000000000006383                 mov     r12d, 0Ch
.text:0000000000006389
.text:0000000000006389 loc_6389:                               ; CODE XREF: vasnprintf+CD4↓j
.text:0000000000006389                 cmp     r15, [rbp+src]
.text:0000000000006390                 setz    dl
.text:0000000000006393                 test    r15, r15
.text:0000000000006396                 jz      loc_6BE0
.text:000000000000639C
.text:000000000000639C loc_639C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000639C                 test    dl, dl
.text:000000000000639E                 jnz     loc_6BE0
.text:00000000000063A4                 mov     rsi, r12        ; size
.text:00000000000063A7                 mov     rdi, r15        ; ptr
.text:00000000000063AA                 call    _realloc
.text:00000000000063AF                 test    rax, rax
.text:00000000000063B2                 jz      loc_6035
.text:00000000000063B8                 mov     r15, rax
.text:00000000000063BB
.text:00000000000063BB loc_63BB:                               ; CODE XREF: vasnprintf+49E↑j
.text:00000000000063BB                                         ; vasnprintf+D53↓j ...
.text:00000000000063BB                 mov     byte ptr [r15+r14], 0
.text:00000000000063C0                 call    ___errno_location
.text:00000000000063C5                 mov     [rbp+n], rax
.text:00000000000063CC                 mov     eax, [rax]
.text:00000000000063CE                 mov     [rbp+var_3F8], rbx
.text:00000000000063D5                 mov     [rbp-424h], eax
.text:00000000000063DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000063E0
.text:00000000000063E0 loc_63E0:                               ; CODE XREF: vasnprintf+637↓j
.text:00000000000063E0                                         ; vasnprintf+68D↓j ...
.text:00000000000063E0                 mov     rax, [rbp+n]
.text:00000000000063E7                 mov     rbx, r12
.text:00000000000063EA                 mov     r10d, 7FFFFFFFh
.text:00000000000063F0                 sub     rbx, r14
.text:00000000000063F3                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:00000000000063FD                 cmp     rbx, 7FFFFFFFh
.text:0000000000006404                 mov     dword ptr [rax], 0
.text:000000000000640A                 mov     eax, dword ptr [rbp+var_3D0]
.text:0000000000006410                 cmovbe  r10, rbx
.text:0000000000006414                 cmp     eax, 11h        ; switch 18 cases
.text:0000000000006417                 ja      def_642B        ; jumptable 000000000000642B default case, case 0
.text:0000000000006417                                         ; jumptable 00000000000069D0 default case
.text:000000000000641D                 lea     rsi, jpt_642B
.text:0000000000006424                 movsxd  rax, ds:(jpt_642B - 90CCh)[rsi+rax*4]
.text:0000000000006428                 add     rax, rsi
.text:000000000000642B                 jmp     rax             ; switch jump
.text:000000000000642B ; ---------------------------------------------------------------------------
.text:000000000000642D                 align 10h
.text:0000000000006430
.text:0000000000006430 loc_6430:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006430                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:0000000000006430                 mov     rax, [r13+50h]  ; jumptable 000000000000642B cases 7-10,15-17
.text:0000000000006434                 lea     rdi, [r15+r14]
.text:0000000000006438                 shl     rax, 5
.text:000000000000643C                 add     rax, [rbp+var_3A8]
.text:0000000000006443                 mov     r9, [rax+10h]
.text:0000000000006447                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000644D                 cmp     eax, 1
.text:0000000000006450                 jz      loc_6918
.text:0000000000006456                 cmp     eax, 2
.text:0000000000006459                 jz      loc_6900
.text:000000000000645F                 sub     rsp, 8
.text:0000000000006463                 push    [rbp+var_3F0]
.text:0000000000006469
.text:0000000000006469 loc_6469:                               ; CODE XREF: vasnprintf+CBE↓j
.text:0000000000006469                 mov     r8, [rbp+var_3D8]
.text:0000000000006470                 mov     rsi, r10
.text:0000000000006473                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000647A                 mov     edx, 1
.text:000000000000647F                 xor     eax, eax
.text:0000000000006481                 mov     [rbp+var_430], r10
.text:0000000000006488                 call    ___snprintf_chk
.text:000000000000648D                 pop     rsi
.text:000000000000648E                 pop     rdi
.text:000000000000648F                 mov     r10, [rbp+var_430]
.text:0000000000006496
.text:0000000000006496 loc_6496:                               ; CODE XREF: vasnprintf+83D↓j
.text:0000000000006496                                         ; vasnprintf+8BE↓j ...
.text:0000000000006496                 mov     ecx, [rbp+var_3BC]
.text:000000000000649C                 test    ecx, ecx
.text:000000000000649E                 js      loc_65DC
.text:00000000000064A4
.text:00000000000064A4 loc_64A4:                               ; CODE XREF: vasnprintf+706↓j
.text:00000000000064A4                 movsxd  rdx, ecx
.text:00000000000064A7                 cmp     rdx, r10
.text:00000000000064AA                 jnb     short loc_64BA
.text:00000000000064AC                 add     rdx, r15
.text:00000000000064AF                 cmp     byte ptr [rdx+r14], 0
.text:00000000000064B4                 jnz     def_642B        ; jumptable 000000000000642B default case, case 0
.text:00000000000064B4                                         ; jumptable 00000000000069D0 default case
.text:00000000000064BA
.text:00000000000064BA loc_64BA:                               ; CODE XREF: vasnprintf+5DA↑j
.text:00000000000064BA                 cmp     ecx, eax
.text:00000000000064BC                 jge     short loc_64C6
.text:00000000000064BE
.text:00000000000064BE loc_64BE:                               ; CODE XREF: vasnprintf+71F↓j
.text:00000000000064BE                 mov     [rbp+var_3BC], eax
.text:00000000000064C4                 mov     ecx, eax
.text:00000000000064C6
.text:00000000000064C6 loc_64C6:                               ; CODE XREF: vasnprintf+5EC↑j
.text:00000000000064C6                 lea     eax, [rcx+1]
.text:00000000000064C9                 cmp     rax, r10
.text:00000000000064CC                 jb      loc_6D00
.text:00000000000064D2                 cmp     rbx, 7FFFFFFEh
.text:00000000000064D9                 ja      loc_6D20
.text:00000000000064DF                 lea     rsi, [r12+r12]
.text:00000000000064E3                 lea     edx, [rcx+2]
.text:00000000000064E6                 test    r12, r12
.text:00000000000064E9                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000064F0                 cmovns  rax, rsi
.text:00000000000064F4                 add     rdx, r14
.text:00000000000064F7                 jb      loc_6FB8
.text:00000000000064FD                 cmp     rax, rdx
.text:0000000000006500                 cmovb   rax, rdx
.text:0000000000006504                 cmp     r12, rax
.text:0000000000006507                 jnb     loc_63E0
.text:000000000000650D                 test    r12, r12
.text:0000000000006510                 js      loc_6041
.text:0000000000006516                 cmp     rsi, rax
.text:0000000000006519                 mov     r12, rsi
.text:000000000000651C                 jnb     short loc_652B
.text:000000000000651E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006522                 jz      loc_6041
.text:0000000000006528                 mov     r12, rax
.text:000000000000652B
.text:000000000000652B loc_652B:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000652B                 cmp     r15, [rbp+src]
.text:0000000000006532                 setz    bl
.text:0000000000006535                 test    r15, r15
.text:0000000000006538                 jz      loc_68C0
.text:000000000000653E                 test    bl, bl
.text:0000000000006540                 jnz     loc_68C0
.text:0000000000006546                 mov     rsi, r12        ; size
.text:0000000000006549                 mov     rdi, r15        ; ptr
.text:000000000000654C                 call    _realloc
.text:0000000000006551                 test    rax, rax
.text:0000000000006554                 jz      loc_6041
.text:000000000000655A                 mov     r15, rax
.text:000000000000655D                 jmp     loc_63E0
.text:000000000000655D ; ---------------------------------------------------------------------------
.text:0000000000006562                 align 8
.text:0000000000006568
.text:0000000000006568 loc_6568:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006568                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:0000000000006568                 mov     rax, [r13+50h]  ; jumptable 000000000000642B cases 5,6,13,14
.text:000000000000656C                 lea     rdi, [r15+r14]
.text:0000000000006570                 shl     rax, 5
.text:0000000000006574                 add     rax, [rbp+var_3A8]
.text:000000000000657B                 mov     r9d, [rax+10h]
.text:000000000000657F                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006585                 cmp     eax, 1
.text:0000000000006588                 jz      loc_67C0
.text:000000000000658E
.text:000000000000658E loc_658E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000658E                                         ; vasnprintf+9B1↓j ...
.text:000000000000658E                 cmp     eax, 2
.text:0000000000006591                 jz      loc_6808
.text:0000000000006597
.text:0000000000006597 loc_6597:                               ; CODE XREF: vasnprintf+92E↓j
.text:0000000000006597                 sub     rsp, 8
.text:000000000000659B                 push    [rbp+var_3F0]
.text:00000000000065A1
.text:00000000000065A1 loc_65A1:                               ; CODE XREF: vasnprintf+8FF↓j
.text:00000000000065A1                 mov     r8, [rbp+var_3D8]
.text:00000000000065A8                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000065AF                 mov     edx, 1
.text:00000000000065B4                 mov     rsi, r10
.text:00000000000065B7                 xor     eax, eax
.text:00000000000065B9                 mov     [rbp+var_430], r10
.text:00000000000065C0                 call    ___snprintf_chk
.text:00000000000065C5                 pop     rdx
.text:00000000000065C6                 pop     rcx
.text:00000000000065C7                 mov     ecx, [rbp+var_3BC]
.text:00000000000065CD                 mov     r10, [rbp+var_430]
.text:00000000000065D4                 test    ecx, ecx
.text:00000000000065D6                 jns     loc_64A4
.text:00000000000065DC
.text:00000000000065DC loc_65DC:                               ; CODE XREF: vasnprintf+5CE↑j
.text:00000000000065DC                 mov     rdi, [rbp+var_3F8]
.text:00000000000065E3                 cmp     byte ptr [rdi+1], 0
.text:00000000000065E7                 jnz     loc_6928
.text:00000000000065ED                 test    eax, eax
.text:00000000000065EF                 jns     loc_64BE
.text:00000000000065F5                 mov     rax, [rbp+n]
.text:00000000000065FC                 mov     ebx, [rax]
.text:00000000000065FE                 test    ebx, ebx
.text:0000000000006600                 jnz     short loc_6620
.text:0000000000006602                 movzx   eax, byte ptr [r13+48h]
.text:0000000000006607                 mov     ebx, 16h
.text:000000000000660C                 and     eax, 0FFFFFFEFh
.text:000000000000660F                 cmp     al, 63h ; 'c'
.text:0000000000006611                 mov     eax, 54h ; 'T'
.text:0000000000006616                 cmovz   ebx, eax
.text:0000000000006619                 nop     dword ptr [rax+00000000h]
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: vasnprintf+730↑j
.text:0000000000006620                 cmp     r15, [rbp+src]
.text:0000000000006627                 jz      short loc_6632
.text:0000000000006629                 test    r15, r15
.text:000000000000662C                 jnz     loc_6DDC
.text:0000000000006632
.text:0000000000006632 loc_6632:                               ; CODE XREF: vasnprintf+757↑j
.text:0000000000006632                                         ; vasnprintf+F14↓j
.text:0000000000006632                 mov     rax, [rbp+ptr]
.text:0000000000006639                 test    rax, rax
.text:000000000000663C                 jz      short loc_6646
.text:000000000000663E                 mov     rdi, rax        ; ptr
.text:0000000000006641                 call    _free
.text:0000000000006646
.text:0000000000006646 loc_6646:                               ; CODE XREF: vasnprintf+76C↑j
.text:0000000000006646                 mov     rax, [rbp+var_408]
.text:000000000000664D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006654                 add     rax, 20h ; ' '
.text:0000000000006658                 cmp     rdi, rax
.text:000000000000665B                 jz      short loc_6662
.text:000000000000665D                 call    _free
.text:0000000000006662
.text:0000000000006662 loc_6662:                               ; CODE XREF: vasnprintf+78B↑j
.text:0000000000006662                 mov     rax, [rbp+var_410]
.text:0000000000006669                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006670                 add     rax, 10h
.text:0000000000006674                 cmp     rdi, rax
.text:0000000000006677                 jz      short loc_667E
.text:0000000000006679                 call    _free
.text:000000000000667E
.text:000000000000667E loc_667E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000667E                 mov     rax, [rbp+n]
.text:0000000000006685                 xor     r15d, r15d
.text:0000000000006688                 mov     [rax], ebx
.text:000000000000668A                 jmp     loc_60AF
.text:000000000000668A ; ---------------------------------------------------------------------------
.text:000000000000668F                 align 10h
.text:0000000000006690
.text:0000000000006690 loc_6690:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006690                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:0000000000006690                 mov     rax, [r13+50h]  ; jumptable 000000000000642B case 12
.text:0000000000006694                 lea     rdi, [r15+r14]
.text:0000000000006698                 shl     rax, 5
.text:000000000000669C                 add     rax, [rbp+var_3A8]
.text:00000000000066A3                 fld     tbyte ptr [rax+10h]
.text:00000000000066A6                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000066AC                 cmp     eax, 1
.text:00000000000066AF                 jz      loc_6CE0
.text:00000000000066B5                 cmp     eax, 2
.text:00000000000066B8                 jnz     loc_6B80
.text:00000000000066BE                 mov     eax, [rbp+var_3B4]
.text:00000000000066C4                 sub     rsp, 8
.text:00000000000066C8                 push    [rbp+var_3F0]
.text:00000000000066CE                 mov     r9d, [rbp+var_3B8]
.text:00000000000066D5                 mov     r8, [rbp+var_3D8]
.text:00000000000066DC                 mov     rsi, r10
.text:00000000000066DF                 sub     rsp, 18h
.text:00000000000066E3                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000066EA                 mov     edx, 1
.text:00000000000066EF                 fstp    [rsp+458h+var_450]
.text:00000000000066F3                 push    rax
.text:00000000000066F4                 xor     eax, eax
.text:00000000000066F6                 mov     [rbp+var_430], r10
.text:00000000000066FD                 call    ___snprintf_chk
.text:0000000000006702                 add     rsp, 30h
.text:0000000000006706                 mov     r10, [rbp+var_430]
.text:000000000000670D                 jmp     loc_6496
.text:000000000000670D ; ---------------------------------------------------------------------------
.text:0000000000006712                 align 8
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006718                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:0000000000006718                 mov     rax, [r13+50h]  ; jumptable 000000000000642B case 11
.text:000000000000671C                 lea     rdi, [r15+r14]
.text:0000000000006720                 shl     rax, 5
.text:0000000000006724                 add     rax, [rbp+var_3A8]
.text:000000000000672B                 movsd   xmm0, qword ptr [rax+10h]
.text:0000000000006730                 mov     eax, dword ptr [rbp+var_3E0]
.text:0000000000006736                 cmp     eax, 1
.text:0000000000006739                 jz      loc_6CD0
.text:000000000000673F                 cmp     eax, 2
.text:0000000000006742                 jnz     loc_6B40
.text:0000000000006748                 mov     eax, [rbp+var_3B4]
.text:000000000000674E                 push    [rbp+var_3F0]
.text:0000000000006754                 push    rax
.text:0000000000006755
.text:0000000000006755 loc_6755:                               ; CODE XREF: vasnprintf+E0A↓j
.text:0000000000006755                 mov     r9d, [rbp+var_3B8]
.text:000000000000675C                 mov     r8, [rbp+var_3D8]
.text:0000000000006763                 mov     rsi, r10
.text:0000000000006766                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000676D                 mov     edx, 1
.text:0000000000006772                 mov     eax, 1
.text:0000000000006777                 mov     [rbp+var_430], r10
.text:000000000000677E                 call    ___snprintf_chk
.text:0000000000006783                 pop     r8
.text:0000000000006785                 mov     r10, [rbp+var_430]
.text:000000000000678C                 pop     r9
.text:000000000000678E                 jmp     loc_6496
.text:000000000000678E ; ---------------------------------------------------------------------------
.text:0000000000006793                 align 8
.text:0000000000006798
.text:0000000000006798 loc_6798:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006798                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:0000000000006798                 mov     rax, [r13+50h]  ; jumptable 000000000000642B case 4
.text:000000000000679C                 lea     rdi, [r15+r14]
.text:00000000000067A0                 shl     rax, 5
.text:00000000000067A4                 add     rax, [rbp+var_3A8]
.text:00000000000067AB                 movzx   r9d, word ptr [rax+10h]
.text:00000000000067B0                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000067B6                 cmp     eax, 1
.text:00000000000067B9                 jnz     loc_658E
.text:00000000000067BF                 nop
.text:00000000000067C0
.text:00000000000067C0 loc_67C0:                               ; CODE XREF: vasnprintf+6B8↑j
.text:00000000000067C0                                         ; vasnprintf+929↓j ...
.text:00000000000067C0                 push    [rbp+var_3F0]
.text:00000000000067C6                 push    r9
.text:00000000000067C8
.text:00000000000067C8 loc_67C8:                               ; CODE XREF: vasnprintf+A50↓j
.text:00000000000067C8                 mov     r9d, [rbp+var_3B8]
.text:00000000000067CF                 jmp     loc_65A1
.text:00000000000067CF ; ---------------------------------------------------------------------------
.text:00000000000067D4                 align 8
.text:00000000000067D8
.text:00000000000067D8 loc_67D8:                               ; CODE XREF: vasnprintf+55B↑j
.text:00000000000067D8                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:00000000000067D8                 mov     rax, [r13+50h]  ; jumptable 000000000000642B case 3
.text:00000000000067DC                 lea     rdi, [r15+r14]
.text:00000000000067E0                 shl     rax, 5
.text:00000000000067E4                 add     rax, [rbp+var_3A8]
.text:00000000000067EB                 movsx   r9d, word ptr [rax+10h]
.text:00000000000067F0                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000067F6                 cmp     eax, 1
.text:00000000000067F9                 jz      short loc_67C0
.text:00000000000067FB                 cmp     eax, 2
.text:00000000000067FE                 jnz     loc_6597
.text:0000000000006804                 nop     dword ptr [rax+00h]
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: vasnprintf+6C1↑j
.text:0000000000006808                 sub     rsp, 8
.text:000000000000680C                 push    [rbp+var_3F0]
.text:0000000000006812                 push    r9
.text:0000000000006814
.text:0000000000006814 loc_6814:                               ; CODE XREF: vasnprintf+A3C↓j
.text:0000000000006814                 mov     eax, [rbp+var_3B4]
.text:000000000000681A                 push    rax
.text:000000000000681B
.text:000000000000681B loc_681B:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000681B                 mov     r9d, [rbp+var_3B8]
.text:0000000000006822                 mov     r8, [rbp+var_3D8]
.text:0000000000006829                 mov     rsi, r10
.text:000000000000682C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006833                 mov     edx, 1
.text:0000000000006838                 xor     eax, eax
.text:000000000000683A                 mov     [rbp+var_430], r10
.text:0000000000006841                 call    ___snprintf_chk
.text:0000000000006846                 add     rsp, 20h
.text:000000000000684A                 mov     r10, [rbp+var_430]
.text:0000000000006851                 jmp     loc_6496
.text:0000000000006851 ; ---------------------------------------------------------------------------
.text:0000000000006856                 align 20h
.text:0000000000006860
.text:0000000000006860 loc_6860:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006860                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:0000000000006860                 mov     rax, [r13+50h]  ; jumptable 000000000000642B case 2
.text:0000000000006864                 lea     rdi, [r15+r14]
.text:0000000000006868                 shl     rax, 5
.text:000000000000686C                 add     rax, [rbp+var_3A8]
.text:0000000000006873                 movzx   r9d, byte ptr [rax+10h]
.text:0000000000006878                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000687E                 cmp     eax, 1
.text:0000000000006881                 jnz     loc_658E
.text:0000000000006887                 jmp     loc_67C0
.text:0000000000006887 ; ---------------------------------------------------------------------------
.text:000000000000688C                 align 10h
.text:0000000000006890
.text:0000000000006890 loc_6890:                               ; CODE XREF: vasnprintf+55B↑j
.text:0000000000006890                                         ; DATA XREF: .rodata:jpt_642B↓o
.text:0000000000006890                 mov     rax, [r13+50h]  ; jumptable 000000000000642B case 1
.text:0000000000006894                 lea     rdi, [r15+r14]
.text:0000000000006898                 shl     rax, 5
.text:000000000000689C                 add     rax, [rbp+var_3A8]
.text:00000000000068A3                 movsx   r9d, byte ptr [rax+10h]
.text:00000000000068A8                 mov     eax, dword ptr [rbp+var_3E0]
.text:00000000000068AE                 cmp     eax, 1
.text:00000000000068B1                 jnz     loc_658E
.text:00000000000068B7                 jmp     loc_67C0
.text:00000000000068B7 ; ---------------------------------------------------------------------------
.text:00000000000068BC                 align 20h
.text:00000000000068C0
.text:00000000000068C0 loc_68C0:                               ; CODE XREF: vasnprintf+668↑j
.text:00000000000068C0                                         ; vasnprintf+670↑j
.text:00000000000068C0                 mov     rdi, r12        ; size
.text:00000000000068C3                 call    _malloc
.text:00000000000068C8                 test    rax, rax
.text:00000000000068CB                 mov     rcx, rax
.text:00000000000068CE                 jz      loc_6041
.text:00000000000068D4                 test    r14, r14
.text:00000000000068D7                 jz      loc_6990
.text:00000000000068DD                 test    bl, bl
.text:00000000000068DF                 jz      loc_6990
.text:00000000000068E5                 mov     rsi, r15        ; src
.text:00000000000068E8                 mov     rdx, r14        ; n
.text:00000000000068EB                 mov     rdi, rax        ; dest
.text:00000000000068EE                 call    _memcpy
.text:00000000000068F3                 mov     r15, rax
.text:00000000000068F6                 jmp     loc_63E0
.text:00000000000068F6 ; ---------------------------------------------------------------------------
.text:00000000000068FB                 align 20h
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: vasnprintf+589↑j
.text:0000000000006900                 sub     rsp, 8
.text:0000000000006904                 push    [rbp+var_3F0]
.text:000000000000690A                 push    r9
.text:000000000000690C                 jmp     loc_6814
.text:000000000000690C ; ---------------------------------------------------------------------------
.text:0000000000006911                 align 8
.text:0000000000006918
.text:0000000000006918 loc_6918:                               ; CODE XREF: vasnprintf+580↑j
.text:0000000000006918                 push    [rbp+var_3F0]
.text:000000000000691E                 push    r9
.text:0000000000006920                 jmp     loc_67C8
.text:0000000000006920 ; ---------------------------------------------------------------------------
.text:0000000000006925                 align 8
.text:0000000000006928
.text:0000000000006928 loc_6928:                               ; CODE XREF: vasnprintf+717↑j
.text:0000000000006928                 mov     byte ptr [rdi+1], 0
.text:000000000000692C                 jmp     loc_63E0
.text:000000000000692C ; ---------------------------------------------------------------------------
.text:0000000000006931                 align 8
.text:0000000000006938
.text:0000000000006938 loc_6938:                               ; CODE XREF: vasnprintf+2D3↑j
.text:0000000000006938                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000693C                 jnz     def_642B        ; jumptable 000000000000642B default case, case 0
.text:000000000000693C                                         ; jumptable 00000000000069D0 default case
.text:0000000000006942                 mov     rax, r14
.text:0000000000006945                 add     rax, 1
.text:0000000000006949                 mov     rbx, rax
.text:000000000000694C                 jnb     loc_69D8
.text:0000000000006952                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006956                 jnz     loc_6035
.text:000000000000695C                 mov     rbx, r12
.text:000000000000695F
.text:000000000000695F loc_695F:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000695F                                         ; vasnprintf+B58↓j ...
.text:000000000000695F                 mov     byte ptr [r15+r14], 25h ; '%'
.text:0000000000006964
.text:0000000000006964 loc_6964:                               ; CODE XREF: vasnprintf+C46↓j
.text:0000000000006964                                         ; vasnprintf+D76↓j ...
.text:0000000000006964                 mov     r8, [r13+8]
.text:0000000000006968                 add     r13, 58h ; 'X'
.text:000000000000696C                 mov     rcx, [r13+0]
.text:0000000000006970                 add     [rbp+var_400], 1
.text:0000000000006978                 cmp     rcx, r8
.text:000000000000697B                 jnz     loc_6019
.text:0000000000006981
.text:0000000000006981 loc_6981:                               ; CODE XREF: vasnprintf+143↑j
.text:0000000000006981                 mov     r14, rbx
.text:0000000000006984                 jmp     loc_6183
.text:0000000000006984 ; ---------------------------------------------------------------------------
.text:0000000000006989                 align 10h
.text:0000000000006990
.text:0000000000006990 loc_6990:                               ; CODE XREF: vasnprintf+A07↑j
.text:0000000000006990                                         ; vasnprintf+A0F↑j
.text:0000000000006990                 mov     r15, rcx
.text:0000000000006993                 jmp     loc_63E0
.text:0000000000006998 ; ---------------------------------------------------------------------------
.text:0000000000006998
.text:0000000000006998 loc_6998:                               ; CODE XREF: vasnprintf+9A↑j
.text:0000000000006998                                         ; vasnprintf+AE↑j ...
.text:0000000000006998                 call    ___errno_location
.text:000000000000699D                 mov     [rbp+n], rax
.text:00000000000069A4                 jmp     loc_6067
.text:00000000000069A4 ; ---------------------------------------------------------------------------
.text:00000000000069A9                 align 10h
.text:00000000000069B0
.text:00000000000069B0 loc_69B0:                               ; CODE XREF: vasnprintf+2FC↑j
.text:00000000000069B0                 mov     edx, edi
.text:00000000000069B2                 sub     edx, 12h        ; switch 5 cases
.text:00000000000069B5                 cmp     edx, 4
.text:00000000000069B8                 ja      def_642B        ; jumptable 000000000000642B default case, case 0
.text:00000000000069B8                                         ; jumptable 00000000000069D0 default case
.text:00000000000069BE                 lea     rdi, jpt_69D0
.text:00000000000069C5                 mov     rax, [rax+10h]
.text:00000000000069C9                 movsxd  rdx, ds:(jpt_69D0 - 9114h)[rdi+rdx*4]
.text:00000000000069CD                 add     rdx, rdi
.text:00000000000069D0                 jmp     rdx             ; switch jump
.text:00000000000069D0 ; ---------------------------------------------------------------------------
.text:00000000000069D2                 align 8
.text:00000000000069D8
.text:00000000000069D8 loc_69D8:                               ; CODE XREF: vasnprintf+A7C↑j
.text:00000000000069D8                 cmp     r12, rax
.text:00000000000069DB                 jnb     short loc_695F
.text:00000000000069DD                 test    r12, r12
.text:00000000000069E0                 jnz     loc_6DB0
.text:00000000000069E6                 cmp     rax, 0Ch
.text:00000000000069EA                 ja      loc_6DC2
.text:00000000000069F0                 mov     r12d, 0Ch
.text:00000000000069F6
.text:00000000000069F6 loc_69F6:                               ; CODE XREF: vasnprintf+EEC↓j
.text:00000000000069F6                                         ; vasnprintf+EFF↓j
.text:00000000000069F6                 cmp     r15, [rbp+src]
.text:00000000000069FD                 setz    dl
.text:0000000000006A00                 test    r15, r15
.text:0000000000006A03                 jz      loc_6C70
.text:0000000000006A09                 test    dl, dl
.text:0000000000006A0B                 jnz     loc_6C70
.text:0000000000006A11                 mov     rsi, r12        ; size
.text:0000000000006A14                 mov     rdi, r15        ; ptr
.text:0000000000006A17                 call    _realloc
.text:0000000000006A1C                 test    rax, rax
.text:0000000000006A1F                 jz      loc_6B1B
.text:0000000000006A25                 mov     r15, rax
.text:0000000000006A28                 jmp     loc_695F
.text:0000000000006A28 ; ---------------------------------------------------------------------------
.text:0000000000006A2D                 align 10h
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: vasnprintf+42E↑j
.text:0000000000006A30                 mov     dword ptr [rbp+var_3E0], 0
.text:0000000000006A3A                 jmp     loc_6327
.text:0000000000006A3A ; ---------------------------------------------------------------------------
.text:0000000000006A3F                 align 20h
.text:0000000000006A40
.text:0000000000006A40 loc_6A40:                               ; CODE XREF: vasnprintf+240↑j
.text:0000000000006A40                 js      loc_6035
.text:0000000000006A46                 add     r12, r12
.text:0000000000006A49                 cmp     r12, rax
.text:0000000000006A4C                 jnb     loc_6126
.text:0000000000006A52
.text:0000000000006A52 loc_6A52:                               ; CODE XREF: vasnprintf+24A↑j
.text:0000000000006A52                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A56                 jz      loc_6035
.text:0000000000006A5C                 cmp     r15, [rbp+src]
.text:0000000000006A63                 mov     r12, rax
.text:0000000000006A66                 setz    dl
.text:0000000000006A69                 test    r15, r15
.text:0000000000006A6C                 jnz     loc_6139
.text:0000000000006A72                 nop     word ptr [rax+rax+00h]
.text:0000000000006A78
.text:0000000000006A78 loc_6A78:                               ; CODE XREF: vasnprintf+263↑j
.text:0000000000006A78                                         ; vasnprintf+26B↑j
.text:0000000000006A78                 mov     rdi, r12        ; size
.text:0000000000006A7B                 mov     [rbp+var_3E0], r8
.text:0000000000006A82                 mov     byte ptr [rbp+var_3D0], dl
.text:0000000000006A88                 mov     [rbp+n], rcx
.text:0000000000006A8F                 call    _malloc
.text:0000000000006A94                 test    rax, rax
.text:0000000000006A97                 mov     r9, rax
.text:0000000000006A9A                 mov     rcx, [rbp+n]
.text:0000000000006AA1                 movzx   edx, byte ptr [rbp+var_3D0]
.text:0000000000006AA8                 mov     r8, [rbp+var_3E0]
.text:0000000000006AAF                 jz      loc_6035
.text:0000000000006AB5                 test    rbx, rbx
.text:0000000000006AB8                 jz      loc_6CC0
.text:0000000000006ABE                 test    dl, dl
.text:0000000000006AC0                 jz      loc_6CC0
.text:0000000000006AC6                 mov     rsi, r15        ; src
.text:0000000000006AC9                 mov     rdx, rbx        ; n
.text:0000000000006ACC                 mov     rdi, rax        ; dest
.text:0000000000006ACF                 mov     [rbp+var_3D0], r8
.text:0000000000006AD6                 mov     [rbp+n], rcx
.text:0000000000006ADD                 call    _memcpy
.text:0000000000006AE2                 mov     rcx, [rbp+n]
.text:0000000000006AE9                 mov     r15, rax
.text:0000000000006AEC                 mov     r8, [rbp+var_3D0]
.text:0000000000006AF3                 jmp     loc_6174
.text:0000000000006AF3 ; ---------------------------------------------------------------------------
.text:0000000000006AF8                 align 20h
.text:0000000000006B00
.text:0000000000006B00 loc_6B00:                               ; CODE XREF: vasnprintf+15F↑j
.text:0000000000006B00                 mov     r14, r12
.text:0000000000006B03                 jmp     loc_6174
.text:0000000000006B03 ; ---------------------------------------------------------------------------
.text:0000000000006B08                 align 10h
.text:0000000000006B10
.text:0000000000006B10 loc_6B10:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006B10                                         ; DATA XREF: .rodata:jpt_69D0↓o
.text:0000000000006B10                 mov     [rax], r14      ; jumptable 00000000000069D0 cases 21,22
.text:0000000000006B13                 mov     rbx, r14
.text:0000000000006B16                 jmp     loc_6964
.text:0000000000006B1B ; ---------------------------------------------------------------------------
.text:0000000000006B1B
.text:0000000000006B1B loc_6B1B:                               ; CODE XREF: vasnprintf+29B↑j
.text:0000000000006B1B                                         ; vasnprintf+B4F↑j ...
.text:0000000000006B1B                 call    ___errno_location
.text:0000000000006B20                 mov     [rbp+n], rax
.text:0000000000006B27                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006B30
.text:0000000000006B30 loc_6B30:                               ; CODE XREF: vasnprintf+17D↑j
.text:0000000000006B30                 mov     rdi, r15        ; ptr
.text:0000000000006B33                 call    _free
.text:0000000000006B38                 jmp     loc_6053
.text:0000000000006B38 ; ---------------------------------------------------------------------------
.text:0000000000006B3D                 align 20h
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: vasnprintf+872↑j
.text:0000000000006B40                 mov     r9, [rbp+var_3F0]
.text:0000000000006B47                 mov     r8, [rbp+var_3D8]
.text:0000000000006B4E                 mov     rsi, r10
.text:0000000000006B51                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006B58                 mov     edx, 1
.text:0000000000006B5D                 mov     eax, 1
.text:0000000000006B62                 mov     [rbp+var_430], r10
.text:0000000000006B69                 call    ___snprintf_chk
.text:0000000000006B6E                 mov     r10, [rbp+var_430]
.text:0000000000006B75                 jmp     loc_6496
.text:0000000000006B75 ; ---------------------------------------------------------------------------
.text:0000000000006B7A                 align 20h
.text:0000000000006B80
.text:0000000000006B80 loc_6B80:                               ; CODE XREF: vasnprintf+7E8↑j
.text:0000000000006B80                 sub     rsp, 10h
.text:0000000000006B84                 mov     r9, [rbp+var_3F0]
.text:0000000000006B8B                 fstp    [rsp+440h+var_440]
.text:0000000000006B8E                 jmp     loc_6469
.text:0000000000006B8E ; ---------------------------------------------------------------------------
.text:0000000000006B93                 align 8
.text:0000000000006B98
.text:0000000000006B98 loc_6B98:                               ; CODE XREF: vasnprintf+4A3↑j
.text:0000000000006B98                 js      loc_6035
.text:0000000000006B9E                 add     r12, r12
.text:0000000000006BA1                 cmp     r12, rax
.text:0000000000006BA4                 jnb     loc_6389
.text:0000000000006BAA                 nop     word ptr [rax+rax+00h]
.text:0000000000006BB0
.text:0000000000006BB0 loc_6BB0:                               ; CODE XREF: vasnprintf+4AD↑j
.text:0000000000006BB0                                         ; vasnprintf+1114↓j
.text:0000000000006BB0                 test    rdx, rdx
.text:0000000000006BB3                 jnz     loc_6035
.text:0000000000006BB9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006BBD                 jz      loc_6035
.text:0000000000006BC3                 cmp     r15, [rbp+src]
.text:0000000000006BCA                 mov     r12, rax
.text:0000000000006BCD                 setz    dl
.text:0000000000006BD0                 test    r15, r15
.text:0000000000006BD3                 jnz     loc_639C
.text:0000000000006BD9                 nop     dword ptr [rax+00000000h]
.text:0000000000006BE0
.text:0000000000006BE0 loc_6BE0:                               ; CODE XREF: vasnprintf+4C6↑j
.text:0000000000006BE0                                         ; vasnprintf+4CE↑j
.text:0000000000006BE0                 mov     rdi, r12        ; size
.text:0000000000006BE3                 mov     byte ptr [rbp+n], dl
.text:0000000000006BE9                 call    _malloc
.text:0000000000006BEE                 test    rax, rax
.text:0000000000006BF1                 mov     rcx, rax
.text:0000000000006BF4                 movzx   edx, byte ptr [rbp+n]
.text:0000000000006BFB                 jz      loc_6035
.text:0000000000006C01                 test    r14, r14
.text:0000000000006C04                 jz      loc_6DA0
.text:0000000000006C0A                 test    dl, dl
.text:0000000000006C0C                 jz      loc_6DA0
.text:0000000000006C12                 mov     rsi, r15        ; src
.text:0000000000006C15                 mov     rdx, r14        ; n
.text:0000000000006C18                 mov     rdi, rax        ; dest
.text:0000000000006C1B                 call    _memcpy
.text:0000000000006C20                 mov     r15, rax
.text:0000000000006C23                 jmp     loc_63BB
.text:0000000000006C23 ; ---------------------------------------------------------------------------
.text:0000000000006C28                 align 10h
.text:0000000000006C30
.text:0000000000006C30 loc_6C30:                               ; CODE XREF: vasnprintf+402↑j
.text:0000000000006C30                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:0000000000006C33                 add     rbx, 1
.text:0000000000006C37                 jmp     loc_62EB
.text:0000000000006C37 ; ---------------------------------------------------------------------------
.text:0000000000006C3C                 align 20h
.text:0000000000006C40
.text:0000000000006C40 loc_6C40:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006C40                                         ; DATA XREF: .rodata:jpt_69D0↓o
.text:0000000000006C40                 mov     [rax], r14b     ; jumptable 00000000000069D0 case 18
.text:0000000000006C43                 mov     rbx, r14
.text:0000000000006C46                 jmp     loc_6964
.text:0000000000006C46 ; ---------------------------------------------------------------------------
.text:0000000000006C4B                 align 10h
.text:0000000000006C50
.text:0000000000006C50 loc_6C50:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006C50                                         ; DATA XREF: .rodata:jpt_69D0↓o
.text:0000000000006C50                 mov     [rax], r14d     ; jumptable 00000000000069D0 case 20
.text:0000000000006C53                 mov     rbx, r14
.text:0000000000006C56                 jmp     loc_6964
.text:0000000000006C56 ; ---------------------------------------------------------------------------
.text:0000000000006C5B                 align 20h
.text:0000000000006C60
.text:0000000000006C60 loc_6C60:                               ; CODE XREF: vasnprintf+B00↑j
.text:0000000000006C60                                         ; DATA XREF: .rodata:jpt_69D0↓o
.text:0000000000006C60                 mov     [rax], r14w     ; jumptable 00000000000069D0 case 19
.text:0000000000006C64                 mov     rbx, r14
.text:0000000000006C67                 jmp     loc_6964
.text:0000000000006C67 ; ---------------------------------------------------------------------------
.text:0000000000006C6C                 align 10h
.text:0000000000006C70
.text:0000000000006C70 loc_6C70:                               ; CODE XREF: vasnprintf+B33↑j
.text:0000000000006C70                                         ; vasnprintf+B3B↑j
.text:0000000000006C70                 mov     rdi, r12        ; size
.text:0000000000006C73                 mov     byte ptr [rbp+n], dl
.text:0000000000006C79                 call    _malloc
.text:0000000000006C7E                 test    rax, rax
.text:0000000000006C81                 mov     rcx, rax
.text:0000000000006C84                 movzx   edx, byte ptr [rbp+n]
.text:0000000000006C8B                 jz      loc_6035
.text:0000000000006C91                 test    r14, r14
.text:0000000000006C94                 jz      loc_6DD4
.text:0000000000006C9A                 test    dl, dl
.text:0000000000006C9C                 jz      loc_6DD4
.text:0000000000006CA2                 mov     rsi, r15        ; src
.text:0000000000006CA5                 mov     rdx, r14        ; n
.text:0000000000006CA8                 mov     rdi, rax        ; dest
.text:0000000000006CAB                 call    _memcpy
.text:0000000000006CB0                 mov     r15, rax
.text:0000000000006CB3                 jmp     loc_695F
.text:0000000000006CB3 ; ---------------------------------------------------------------------------
.text:0000000000006CB8                 align 20h
.text:0000000000006CC0
.text:0000000000006CC0 loc_6CC0:                               ; CODE XREF: vasnprintf+BE8↑j
.text:0000000000006CC0                                         ; vasnprintf+BF0↑j
.text:0000000000006CC0                 mov     r15, r9
.text:0000000000006CC3                 jmp     loc_6174
.text:0000000000006CC3 ; ---------------------------------------------------------------------------
.text:0000000000006CC8                 align 10h
.text:0000000000006CD0
.text:0000000000006CD0 loc_6CD0:                               ; CODE XREF: vasnprintf+869↑j
.text:0000000000006CD0                 sub     rsp, 8
.text:0000000000006CD4                 push    [rbp+var_3F0]
.text:0000000000006CDA                 jmp     loc_6755
.text:0000000000006CDA ; ---------------------------------------------------------------------------
.text:0000000000006CDF                 align 20h
.text:0000000000006CE0
.text:0000000000006CE0 loc_6CE0:                               ; CODE XREF: vasnprintf+7DF↑j
.text:0000000000006CE0                 sub     rsp, 8
.text:0000000000006CE4                 push    [rbp+var_3F0]
.text:0000000000006CEA                 sub     rsp, 10h
.text:0000000000006CEE                 fstp    [rsp+450h+var_450]
.text:0000000000006CF1                 jmp     loc_681B
.text:0000000000006CF1 ; ---------------------------------------------------------------------------
.text:0000000000006CF6                 align 20h
.text:0000000000006D00
.text:0000000000006D00 loc_6D00:                               ; CODE XREF: vasnprintf+5FC↑j
.text:0000000000006D00                 mov     rax, [rbp+n]
.text:0000000000006D07                 mov     edi, [rbp-424h]
.text:0000000000006D0D                 movsxd  rbx, ecx
.text:0000000000006D10                 add     rbx, r14
.text:0000000000006D13                 mov     [rax], edi
.text:0000000000006D15                 jmp     loc_6964
.text:0000000000006D15 ; ---------------------------------------------------------------------------
.text:0000000000006D1A                 align 20h
.text:0000000000006D20
.text:0000000000006D20 loc_6D20:                               ; CODE XREF: vasnprintf+609↑j
.text:0000000000006D20                 cmp     r15, [rbp+src]
.text:0000000000006D27                 jz      short loc_6D32
.text:0000000000006D29                 test    r15, r15
.text:0000000000006D2C                 jnz     loc_6DE9
.text:0000000000006D32
.text:0000000000006D32 loc_6D32:                               ; CODE XREF: vasnprintf+E57↑j
.text:0000000000006D32                                         ; vasnprintf+F21↓j
.text:0000000000006D32                 mov     rax, [rbp+ptr]
.text:0000000000006D39                 test    rax, rax
.text:0000000000006D3C                 jz      short loc_6D46
.text:0000000000006D3E                 mov     rdi, rax        ; ptr
.text:0000000000006D41                 call    _free
.text:0000000000006D46
.text:0000000000006D46 loc_6D46:                               ; CODE XREF: vasnprintf+E6C↑j
.text:0000000000006D46                 mov     rax, [rbp+var_408]
.text:0000000000006D4D                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006D54                 add     rax, 20h ; ' '
.text:0000000000006D58                 cmp     rdi, rax
.text:0000000000006D5B                 jz      short loc_6D62
.text:0000000000006D5D                 call    _free
.text:0000000000006D62
.text:0000000000006D62 loc_6D62:                               ; CODE XREF: vasnprintf+E8B↑j
.text:0000000000006D62                 mov     rax, [rbp+var_410]
.text:0000000000006D69                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006D70                 add     rax, 10h
.text:0000000000006D74                 cmp     rdi, rax
.text:0000000000006D77                 jz      short loc_6D7E
.text:0000000000006D79                 call    _free
.text:0000000000006D7E
.text:0000000000006D7E loc_6D7E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:0000000000006D7E                 mov     rax, [rbp+n]
.text:0000000000006D85                 xor     r15d, r15d
.text:0000000000006D88                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000006D8E                 jmp     loc_60AF
.text:0000000000006D8E ; ---------------------------------------------------------------------------
.text:0000000000006D93                 align 8
.text:0000000000006D98
.text:0000000000006D98 loc_6D98:                               ; CODE XREF: vasnprintf+60↑j
.text:0000000000006D98                 xor     r15d, r15d
.text:0000000000006D9B                 jmp     loc_60AF
.text:0000000000006DA0 ; ---------------------------------------------------------------------------
.text:0000000000006DA0
.text:0000000000006DA0 loc_6DA0:                               ; CODE XREF: vasnprintf+D34↑j
.text:0000000000006DA0                                         ; vasnprintf+D3C↑j
.text:0000000000006DA0                 mov     r15, rcx
.text:0000000000006DA3                 jmp     loc_63BB
.text:0000000000006DA3 ; ---------------------------------------------------------------------------
.text:0000000000006DA8                 align 10h
.text:0000000000006DB0
.text:0000000000006DB0 loc_6DB0:                               ; CODE XREF: vasnprintf+B10↑j
.text:0000000000006DB0                 js      loc_6035
.text:0000000000006DB6                 add     r12, r12
.text:0000000000006DB9                 cmp     r12, rax
.text:0000000000006DBC                 jnb     loc_69F6
.text:0000000000006DC2
.text:0000000000006DC2 loc_6DC2:                               ; CODE XREF: vasnprintf+B1A↑j
.text:0000000000006DC2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006DC6                 jz      loc_6035
.text:0000000000006DCC                 mov     r12, rax
.text:0000000000006DCF                 jmp     loc_69F6
.text:0000000000006DD4 ; ---------------------------------------------------------------------------
.text:0000000000006DD4
.text:0000000000006DD4 loc_6DD4:                               ; CODE XREF: vasnprintf+DC4↑j
.text:0000000000006DD4                                         ; vasnprintf+DCC↑j
.text:0000000000006DD4                 mov     r15, rcx
.text:0000000000006DD7                 jmp     loc_695F
.text:0000000000006DDC ; ---------------------------------------------------------------------------
.text:0000000000006DDC
.text:0000000000006DDC loc_6DDC:                               ; CODE XREF: vasnprintf+75C↑j
.text:0000000000006DDC                 mov     rdi, r15        ; ptr
.text:0000000000006DDF                 call    _free
.text:0000000000006DE4                 jmp     loc_6632
.text:0000000000006DE9 ; ---------------------------------------------------------------------------
.text:0000000000006DE9
.text:0000000000006DE9 loc_6DE9:                               ; CODE XREF: vasnprintf+E5C↑j
.text:0000000000006DE9                 mov     rdi, r15        ; ptr
.text:0000000000006DEC                 call    _free
.text:0000000000006DF1                 jmp     loc_6D32
.text:0000000000006DF6 ; ---------------------------------------------------------------------------
.text:0000000000006DF6
.text:0000000000006DF6 def_642B:                               ; CODE XREF: vasnprintf+2DD↑j
.text:0000000000006DF6                                         ; vasnprintf+43E↑j ...
.text:0000000000006DF6                 call    _abort          ; jumptable 000000000000642B default case, case 0
.text:0000000000006DF6                                         ; jumptable 00000000000069D0 default case
.text:0000000000006DF6 ; ---------------------------------------------------------------------------
.text:0000000000006DFB                 align 20h
.text:0000000000006E00
.text:0000000000006E00 loc_6E00:                               ; CODE XREF: vasnprintf+73↑j
.text:0000000000006E00                 mov     rax, [rbp+var_408]
.text:0000000000006E07                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006E0E                 add     rax, 20h ; ' '
.text:0000000000006E12                 cmp     rdi, rax
.text:0000000000006E15                 jz      short loc_6E1C
.text:0000000000006E17                 call    _free
.text:0000000000006E1C
.text:0000000000006E1C loc_6E1C:                               ; CODE XREF: vasnprintf+F45↑j
.text:0000000000006E1C                 mov     rax, [rbp+var_410]
.text:0000000000006E23                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006E2A                 add     rax, 10h
.text:0000000000006E2E                 cmp     rdi, rax
.text:0000000000006E31                 jz      short loc_6E38
.text:0000000000006E33                 call    _free
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: vasnprintf+F61↑j
.text:0000000000006E38                 call    ___errno_location
.text:0000000000006E3D                 xor     r15d, r15d
.text:0000000000006E40                 mov     dword ptr [rax], 16h
.text:0000000000006E46                 jmp     loc_60AF
.text:0000000000006E4B ; ---------------------------------------------------------------------------
.text:0000000000006E4B
.text:0000000000006E4B loc_6E4B:                               ; CODE XREF: vasnprintf+2C1↑j
.text:0000000000006E4B                 mov     rbx, r14
.text:0000000000006E4E                 xor     eax, eax
.text:0000000000006E50                 add     rbx, 1
.text:0000000000006E54                 jb      loc_6F60
.text:0000000000006E5A                 cmp     r12, rbx
.text:0000000000006E5D                 jnb     short loc_6EAC
.text:0000000000006E5F                 test    r12, r12
.text:0000000000006E62                 jnz     loc_6F99
.text:0000000000006E68                 cmp     rbx, 0Ch
.text:0000000000006E6C                 ja      loc_6F7E
.text:0000000000006E72                 mov     r12d, 0Ch
.text:0000000000006E78
.text:0000000000006E78 loc_6E78:                               ; CODE XREF: vasnprintf+10C4↓j
.text:0000000000006E78                                         ; vasnprintf+10D5↓j
.text:0000000000006E78                 cmp     r15, [rbp+src]
.text:0000000000006E7F                 setz    r13b
.text:0000000000006E83                 test    r15, r15
.text:0000000000006E86                 jz      loc_6F2C
.text:0000000000006E8C                 test    r13b, r13b
.text:0000000000006E8F                 jnz     loc_6F2C
.text:0000000000006E95                 mov     rsi, r12        ; size
.text:0000000000006E98                 mov     rdi, r15        ; ptr
.text:0000000000006E9B                 call    _realloc
.text:0000000000006EA0                 test    rax, rax
.text:0000000000006EA3                 jz      loc_6B1B
.text:0000000000006EA9                 mov     r15, rax
.text:0000000000006EAC
.text:0000000000006EAC loc_6EAC:                               ; CODE XREF: vasnprintf+F8D↑j
.text:0000000000006EAC                                         ; vasnprintf+108B↓j ...
.text:0000000000006EAC                 cmp     r15, [rbp+src]
.text:0000000000006EB3                 mov     byte ptr [r15+r14], 0
.text:0000000000006EB8                 jz      short loc_6ED1
.text:0000000000006EBA                 cmp     r12, rbx
.text:0000000000006EBD                 jbe     short loc_6ED1
.text:0000000000006EBF                 mov     rdi, r15        ; ptr
.text:0000000000006EC2                 mov     rsi, rbx        ; size
.text:0000000000006EC5                 call    _realloc
.text:0000000000006ECA                 test    rax, rax
.text:0000000000006ECD                 cmovnz  r15, rax
.text:0000000000006ED1
.text:0000000000006ED1 loc_6ED1:                               ; CODE XREF: vasnprintf+FE8↑j
.text:0000000000006ED1                                         ; vasnprintf+FED↑j
.text:0000000000006ED1                 mov     rax, [rbp+ptr]
.text:0000000000006ED8                 test    rax, rax
.text:0000000000006EDB                 jz      short loc_6EE5
.text:0000000000006EDD                 mov     rdi, rax        ; ptr
.text:0000000000006EE0                 call    _free
.text:0000000000006EE5
.text:0000000000006EE5 loc_6EE5:                               ; CODE XREF: vasnprintf+100B↑j
.text:0000000000006EE5                 mov     rax, [rbp+var_408]
.text:0000000000006EEC                 mov     rdi, [rbp+var_2B8] ; ptr
.text:0000000000006EF3                 add     rax, 20h ; ' '
.text:0000000000006EF7                 cmp     rdi, rax
.text:0000000000006EFA                 jz      short loc_6F01
.text:0000000000006EFC                 call    _free
.text:0000000000006F01
.text:0000000000006F01 loc_6F01:                               ; CODE XREF: vasnprintf+102A↑j
.text:0000000000006F01                 mov     rax, [rbp+var_410]
.text:0000000000006F08                 mov     rdi, [rbp+var_3A8] ; ptr
.text:0000000000006F0F                 add     rax, 10h
.text:0000000000006F13                 cmp     rdi, rax
.text:0000000000006F16                 jz      short loc_6F1D
.text:0000000000006F18                 call    _free
.text:0000000000006F1D
.text:0000000000006F1D loc_6F1D:                               ; CODE XREF: vasnprintf+1046↑j
.text:0000000000006F1D                 mov     rax, [rbp+var_418]
.text:0000000000006F24                 mov     [rax], r14
.text:0000000000006F27                 jmp     loc_60AF
.text:0000000000006F2C ; ---------------------------------------------------------------------------
.text:0000000000006F2C
.text:0000000000006F2C loc_6F2C:                               ; CODE XREF: vasnprintf+FB6↑j
.text:0000000000006F2C                                         ; vasnprintf+FBF↑j
.text:0000000000006F2C                 mov     rdi, r12        ; size
.text:0000000000006F2F                 call    _malloc
.text:0000000000006F34                 test    rax, rax
.text:0000000000006F37                 mov     rcx, rax
.text:0000000000006F3A                 jz      loc_6035
.text:0000000000006F40                 test    r14, r14
.text:0000000000006F43                 jz      short loc_6FB0
.text:0000000000006F45                 test    r13b, r13b
.text:0000000000006F48                 jz      short loc_6FB0
.text:0000000000006F4A                 mov     rsi, r15        ; src
.text:0000000000006F4D                 mov     rdx, r14        ; n
.text:0000000000006F50                 mov     rdi, rax        ; dest
.text:0000000000006F53                 call    _memcpy
.text:0000000000006F58                 mov     r15, rax
.text:0000000000006F5B                 jmp     loc_6EAC
.text:0000000000006F60 ; ---------------------------------------------------------------------------
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: vasnprintf+F84↑j
.text:0000000000006F60                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F64                 mov     eax, 1
.text:0000000000006F69                 jz      loc_6EAC
.text:0000000000006F6F                 test    r12, r12
.text:0000000000006F72                 jz      loc_6035
.text:0000000000006F78                 js      loc_6035
.text:0000000000006F7E
.text:0000000000006F7E loc_6F7E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:0000000000006F7E                                         ; vasnprintf+10DB↓j
.text:0000000000006F7E                 test    rax, rax
.text:0000000000006F81                 jnz     loc_6035
.text:0000000000006F87                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006F8B                 jz      loc_6035
.text:0000000000006F91                 mov     r12, rbx
.text:0000000000006F94                 jmp     loc_6E78
.text:0000000000006F99 ; ---------------------------------------------------------------------------
.text:0000000000006F99
.text:0000000000006F99 loc_6F99:                               ; CODE XREF: vasnprintf+F92↑j
.text:0000000000006F99                 js      loc_6035
.text:0000000000006F9F                 add     r12, r12
.text:0000000000006FA2                 cmp     r12, rbx
.text:0000000000006FA5                 jnb     loc_6E78
.text:0000000000006FAB                 jmp     short loc_6F7E
.text:0000000000006FAB ; ---------------------------------------------------------------------------
.text:0000000000006FAD                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: vasnprintf+1073↑j
.text:0000000000006FB0                                         ; vasnprintf+1078↑j
.text:0000000000006FB0                 mov     r15, rcx
.text:0000000000006FB3                 jmp     loc_6EAC
.text:0000000000006FB8 ; ---------------------------------------------------------------------------
.text:0000000000006FB8
.text:0000000000006FB8 loc_6FB8:                               ; CODE XREF: vasnprintf+627↑j
.text:0000000000006FB8                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006FBC                 jz      loc_63E0
.text:0000000000006FC2                 jmp     loc_6041
.text:0000000000006FC7 ; ---------------------------------------------------------------------------
.text:0000000000006FC7
.text:0000000000006FC7 loc_6FC7:                               ; CODE XREF: vasnprintf+1EF↑j
.text:0000000000006FC7                 call    ___stack_chk_fail
.text:0000000000006FCC ; ---------------------------------------------------------------------------
.text:0000000000006FCC
.text:0000000000006FCC loc_6FCC:                               ; CODE XREF: vasnprintf+495↑j
.text:0000000000006FCC                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000006FD0                 mov     edx, 1
.text:0000000000006FD5                 jz      loc_63BB
.text:0000000000006FDB                 test    r12, r12
.text:0000000000006FDE                 jz      loc_6035
.text:0000000000006FE4                 jns     loc_6BB0
.text:0000000000006FEA                 jmp     loc_6035
.text:0000000000006FEA ; } // starts at 5ED0
.text:0000000000006FEA vasnprintf      endp
.text:0000000000006FEA
.text:0000000000006FEA ; ---------------------------------------------------------------------------
.text:0000000000006FEF                 align 10h
.text:0000000000006FF0
.text:0000000000006FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FF0
.text:0000000000006FF0
.text:0000000000006FF0                 public printf_fetchargs
.text:0000000000006FF0 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:0000000000006FF0 ; __unwind {
.text:0000000000006FF0                 cmp     qword ptr [rsi], 0
.text:0000000000006FF4                 mov     rax, [rsi+8]
.text:0000000000006FF8                 jz      short loc_705D
.text:0000000000006FFA                 lea     r8, jpt_7026
.text:0000000000007001                 lea     r10, wide_null_string_2696
.text:0000000000007008                 lea     r9, aNull       ; "(NULL)"
.text:000000000000700F                 xor     ecx, ecx
.text:0000000000007011                 nop     dword ptr [rax+00000000h]
.text:0000000000007018
.text:0000000000007018 loc_7018:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:0000000000007018                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000701B                 ja      short def_7026  ; jumptable 0000000000007026 default case, case 0
.text:000000000000701D                 mov     edx, [rax]
.text:000000000000701F                 movsxd  rdx, ds:(jpt_7026 - 9130h)[r8+rdx*4]
.text:0000000000007023                 add     rdx, r8
.text:0000000000007026                 jmp     rdx             ; switch jump
.text:0000000000007026 ; ---------------------------------------------------------------------------
.text:0000000000007028                 align 10h
.text:0000000000007030
.text:0000000000007030 loc_7030:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007030                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:0000000000007030                 mov     rdx, [rdi+8]    ; jumptable 0000000000007026 case 12
.text:0000000000007034                 add     rdx, 0Fh
.text:0000000000007038                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000703C                 lea     r11, [rdx+10h]
.text:0000000000007040                 mov     [rdi+8], r11
.text:0000000000007044                 fld     tbyte ptr [rdx]
.text:0000000000007046                 fstp    tbyte ptr [rax+10h]
.text:0000000000007049                 nop     dword ptr [rax+00000000h]
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: printf_fetchargs+98↓j
.text:0000000000007050                                         ; printf_fetchargs+BA↓j ...
.text:0000000000007050                 add     rcx, 1
.text:0000000000007054                 add     rax, 20h ; ' '
.text:0000000000007058                 cmp     [rsi], rcx
.text:000000000000705B                 ja      short loc_7018
.text:000000000000705D
.text:000000000000705D loc_705D:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000705D                 xor     eax, eax
.text:000000000000705F                 retn
.text:0000000000007060 ; ---------------------------------------------------------------------------
.text:0000000000007060
.text:0000000000007060 def_7026:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:0000000000007060                                         ; printf_fetchargs+36↑j
.text:0000000000007060                                         ; DATA XREF: ...
.text:0000000000007060                 mov     eax, 0FFFFFFFFh ; jumptable 0000000000007026 default case, case 0
.text:0000000000007065                 retn
.text:0000000000007066 ; ---------------------------------------------------------------------------
.text:0000000000007066
.text:0000000000007066 loc_7066:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007066                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:0000000000007066                 mov     r11d, [rdi]     ; jumptable 0000000000007026 cases 7-10,17-22
.text:0000000000007069                 cmp     r11d, 2Fh ; '/'
.text:000000000000706D                 ja      loc_71AA
.text:0000000000007073                 mov     edx, r11d
.text:0000000000007076                 add     rdx, [rdi+10h]
.text:000000000000707A                 add     r11d, 8
.text:000000000000707E                 mov     [rdi], r11d
.text:0000000000007081
.text:0000000000007081 loc_7081:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:0000000000007081                 mov     rdx, [rdx]
.text:0000000000007084                 mov     [rax+10h], rdx
.text:0000000000007088                 jmp     short loc_7050
.text:000000000000708A ; ---------------------------------------------------------------------------
.text:000000000000708A
.text:000000000000708A loc_708A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000708A                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:000000000000708A                 mov     r11d, [rdi]     ; jumptable 0000000000007026 cases 5,6,13,14
.text:000000000000708D                 cmp     r11d, 2Fh ; '/'
.text:0000000000007091                 ja      loc_71CC
.text:0000000000007097                 mov     edx, r11d
.text:000000000000709A                 add     rdx, [rdi+10h]
.text:000000000000709E                 add     r11d, 8
.text:00000000000070A2                 mov     [rdi], r11d
.text:00000000000070A5
.text:00000000000070A5 loc_70A5:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:00000000000070A5                 mov     edx, [rdx]
.text:00000000000070A7                 mov     [rax+10h], edx
.text:00000000000070AA                 jmp     short loc_7050
.text:00000000000070AC ; ---------------------------------------------------------------------------
.text:00000000000070AC
.text:00000000000070AC loc_70AC:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000070AC                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:00000000000070AC                 mov     r11d, [rdi]     ; jumptable 0000000000007026 cases 1,2
.text:00000000000070AF                 cmp     r11d, 2Fh ; '/'
.text:00000000000070B3                 ja      loc_71BB
.text:00000000000070B9                 mov     edx, r11d
.text:00000000000070BC                 add     rdx, [rdi+10h]
.text:00000000000070C0                 add     r11d, 8
.text:00000000000070C4                 mov     [rdi], r11d
.text:00000000000070C7
.text:00000000000070C7 loc_70C7:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:00000000000070C7                 mov     edx, [rdx]
.text:00000000000070C9                 mov     [rax+10h], dl
.text:00000000000070CC                 jmp     short loc_7050
.text:00000000000070CE ; ---------------------------------------------------------------------------
.text:00000000000070CE
.text:00000000000070CE loc_70CE:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000070CE                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:00000000000070CE                 mov     r11d, [rdi]     ; jumptable 0000000000007026 cases 3,4
.text:00000000000070D1                 cmp     r11d, 2Fh ; '/'
.text:00000000000070D5                 ja      loc_717A
.text:00000000000070DB                 mov     edx, r11d
.text:00000000000070DE                 add     rdx, [rdi+10h]
.text:00000000000070E2                 add     r11d, 8
.text:00000000000070E6                 mov     [rdi], r11d
.text:00000000000070E9
.text:00000000000070E9 loc_70E9:                               ; CODE XREF: printf_fetchargs+196↓j
.text:00000000000070E9                 mov     edx, [rdx]
.text:00000000000070EB                 mov     [rax+10h], dx
.text:00000000000070EF                 jmp     loc_7050
.text:00000000000070F4 ; ---------------------------------------------------------------------------
.text:00000000000070F4
.text:00000000000070F4 loc_70F4:                               ; CODE XREF: printf_fetchargs+36↑j
.text:00000000000070F4                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:00000000000070F4                 mov     r11d, [rdi]     ; jumptable 0000000000007026 case 15
.text:00000000000070F7                 cmp     r11d, 2Fh ; '/'
.text:00000000000070FB                 ja      loc_718B
.text:0000000000007101                 mov     edx, r11d
.text:0000000000007104                 add     rdx, [rdi+10h]
.text:0000000000007108                 add     r11d, 8
.text:000000000000710C                 mov     [rdi], r11d
.text:000000000000710F
.text:000000000000710F loc_710F:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000710F                 mov     rdx, [rdx]
.text:0000000000007112                 test    rdx, rdx
.text:0000000000007115                 cmovz   rdx, r9
.text:0000000000007119                 mov     [rax+10h], rdx
.text:000000000000711D                 jmp     loc_7050
.text:0000000000007122 ; ---------------------------------------------------------------------------
.text:0000000000007122
.text:0000000000007122 loc_7122:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007122                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:0000000000007122                 mov     r11d, [rdi+4]   ; jumptable 0000000000007026 case 11
.text:0000000000007126                 cmp     r11d, 0AFh
.text:000000000000712D                 ja      loc_71DD
.text:0000000000007133                 mov     edx, r11d
.text:0000000000007136                 add     rdx, [rdi+10h]
.text:000000000000713A                 add     r11d, 10h
.text:000000000000713E                 mov     [rdi+4], r11d
.text:0000000000007142
.text:0000000000007142 loc_7142:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:0000000000007142                 movsd   xmm0, qword ptr [rdx]
.text:0000000000007146                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000714B                 jmp     loc_7050
.text:0000000000007150 ; ---------------------------------------------------------------------------
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: printf_fetchargs+36↑j
.text:0000000000007150                                         ; DATA XREF: .rodata:jpt_7026↓o
.text:0000000000007150                 mov     r11d, [rdi]     ; jumptable 0000000000007026 case 16
.text:0000000000007153                 cmp     r11d, 2Fh ; '/'
.text:0000000000007157                 ja      short loc_719C
.text:0000000000007159                 mov     edx, r11d
.text:000000000000715C                 add     rdx, [rdi+10h]
.text:0000000000007160                 add     r11d, 8
.text:0000000000007164                 mov     [rdi], r11d
.text:0000000000007167
.text:0000000000007167 loc_7167:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:0000000000007167                 mov     rdx, [rdx]
.text:000000000000716A                 test    rdx, rdx
.text:000000000000716D                 cmovz   rdx, r10
.text:0000000000007171                 mov     [rax+10h], rdx
.text:0000000000007175                 jmp     loc_7050
.text:000000000000717A ; ---------------------------------------------------------------------------
.text:000000000000717A
.text:000000000000717A loc_717A:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000717A                 mov     rdx, [rdi+8]
.text:000000000000717E                 lea     r11, [rdx+8]
.text:0000000000007182                 mov     [rdi+8], r11
.text:0000000000007186                 jmp     loc_70E9
.text:000000000000718B ; ---------------------------------------------------------------------------
.text:000000000000718B
.text:000000000000718B loc_718B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000718B                 mov     rdx, [rdi+8]
.text:000000000000718F                 lea     r11, [rdx+8]
.text:0000000000007193                 mov     [rdi+8], r11
.text:0000000000007197                 jmp     loc_710F
.text:000000000000719C ; ---------------------------------------------------------------------------
.text:000000000000719C
.text:000000000000719C loc_719C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000719C                 mov     rdx, [rdi+8]
.text:00000000000071A0                 lea     r11, [rdx+8]
.text:00000000000071A4                 mov     [rdi+8], r11
.text:00000000000071A8                 jmp     short loc_7167
.text:00000000000071AA ; ---------------------------------------------------------------------------
.text:00000000000071AA
.text:00000000000071AA loc_71AA:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:00000000000071AA                 mov     rdx, [rdi+8]
.text:00000000000071AE                 lea     r11, [rdx+8]
.text:00000000000071B2                 mov     [rdi+8], r11
.text:00000000000071B6                 jmp     loc_7081
.text:00000000000071BB ; ---------------------------------------------------------------------------
.text:00000000000071BB
.text:00000000000071BB loc_71BB:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:00000000000071BB                 mov     rdx, [rdi+8]
.text:00000000000071BF                 lea     r11, [rdx+8]
.text:00000000000071C3                 mov     [rdi+8], r11
.text:00000000000071C7                 jmp     loc_70C7
.text:00000000000071CC ; ---------------------------------------------------------------------------
.text:00000000000071CC
.text:00000000000071CC loc_71CC:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:00000000000071CC                 mov     rdx, [rdi+8]
.text:00000000000071D0                 lea     r11, [rdx+8]
.text:00000000000071D4                 mov     [rdi+8], r11
.text:00000000000071D8                 jmp     loc_70A5
.text:00000000000071DD ; ---------------------------------------------------------------------------
.text:00000000000071DD
.text:00000000000071DD loc_71DD:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:00000000000071DD                 mov     rdx, [rdi+8]
.text:00000000000071E1                 lea     r11, [rdx+8]
.text:00000000000071E5                 mov     [rdi+8], r11
.text:00000000000071E9                 jmp     loc_7142
.text:00000000000071E9 ; } // starts at 6FF0
.text:00000000000071E9 printf_fetchargs endp
.text:00000000000071E9
.text:00000000000071E9 ; ---------------------------------------------------------------------------
.text:00000000000071EE                 align 10h
.text:00000000000071F0 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:00000000000071F0 ; Format      : ELF64 for x86-64 (Relocatable)
.text:00000000000071F0 ;
.text:00000000000071F0 ; Source File : 'printf-parse.c'
.text:00000000000071F0
.text:00000000000071F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000071F0
.text:00000000000071F0 ; Attributes: info_from_lumina
.text:00000000000071F0
.text:00000000000071F0 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:00000000000071F0                 public printf_parse
.text:00000000000071F0 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:00000000000071F0
.text:00000000000071F0 src             = qword ptr -80h
.text:00000000000071F0 var_78          = qword ptr -78h
.text:00000000000071F0 var_70          = qword ptr -70h
.text:00000000000071F0 var_68          = qword ptr -68h
.text:00000000000071F0 var_60          = qword ptr -60h
.text:00000000000071F0 var_58          = qword ptr -58h
.text:00000000000071F0 var_50          = qword ptr -50h
.text:00000000000071F0 var_48          = qword ptr -48h
.text:00000000000071F0 var_40          = qword ptr -40h
.text:00000000000071F0
.text:00000000000071F0 ; __unwind {
.text:00000000000071F0                 push    r15
.text:00000000000071F2                 push    r14
.text:00000000000071F4                 lea     rcx, [rsi+20h]
.text:00000000000071F8                 push    r13
.text:00000000000071FA                 push    r12
.text:00000000000071FC                 lea     rax, [rdx+10h]
.text:0000000000007200                 push    rbp
.text:0000000000007201                 push    rbx
.text:0000000000007202                 mov     r14, rsi
.text:0000000000007205                 mov     r15, rdx
.text:0000000000007208                 xor     ebx, ebx
.text:000000000000720A                 mov     r9d, 7
.text:0000000000007210                 sub     rsp, 58h
.text:0000000000007214                 mov     r10d, 7
.text:000000000000721A                 mov     qword ptr [rsi], 0
.text:0000000000007221                 mov     [rsi+8], rcx
.text:0000000000007225                 mov     [rsp+88h+var_60], rcx
.text:000000000000722A                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007231                 mov     qword ptr [rdx], 0
.text:0000000000007238                 mov     [rsp+88h+src], rax
.text:000000000000723D                 mov     [rdx+8], rax
.text:0000000000007241                 mov     [rsp+88h+var_70], 0
.text:000000000000724A                 mov     [rsp+88h+var_78], 0
.text:0000000000007253                 mov     [rsp+88h+var_68], 0
.text:000000000000725C                 jmp     short loc_726B
.text:000000000000725C ; ---------------------------------------------------------------------------
.text:000000000000725E                 align 20h
.text:0000000000007260
.text:0000000000007260 loc_7260:                               ; CODE XREF: printf_parse+80↓j
.text:0000000000007260                 cmp     al, 25h ; '%'
.text:0000000000007262                 lea     rbp, [rdi+1]
.text:0000000000007266                 jz      short loc_72A8
.text:0000000000007268
.text:0000000000007268 loc_7268:                               ; CODE XREF: printf_parse+35B↓j
.text:0000000000007268                                         ; printf_parse+364↓j
.text:0000000000007268                 mov     rdi, rbp
.text:000000000000726B
.text:000000000000726B loc_726B:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000726B                 movzx   eax, byte ptr [rdi]
.text:000000000000726E                 test    al, al
.text:0000000000007270                 jnz     short loc_7260
.text:0000000000007272                 lea     rax, [rbx+rbx*4]
.text:0000000000007276                 lea     rax, [rbx+rax*2]
.text:000000000000727A                 mov     [rcx+rax*8], rdi
.text:000000000000727E                 mov     rax, [rsp+88h+var_78]
.text:0000000000007283                 mov     [r14+10h], rax
.text:0000000000007287                 mov     rax, [rsp+88h+var_70]
.text:000000000000728C                 mov     [r14+18h], rax
.text:0000000000007290                 xor     eax, eax
.text:0000000000007292
.text:0000000000007292 loc_7292:                               ; CODE XREF: printf_parse+87E↓j
.text:0000000000007292                                         ; printf_parse+B1C↓j
.text:0000000000007292                 add     rsp, 58h
.text:0000000000007296                 pop     rbx
.text:0000000000007297                 pop     rbp
.text:0000000000007298                 pop     r12
.text:000000000000729A                 pop     r13
.text:000000000000729C                 pop     r14
.text:000000000000729E                 pop     r15
.text:00000000000072A0                 retn
.text:00000000000072A0 ; ---------------------------------------------------------------------------
.text:00000000000072A1                 align 8
.text:00000000000072A8
.text:00000000000072A8 loc_72A8:                               ; CODE XREF: printf_parse+76↑j
.text:00000000000072A8                 lea     rax, [rbx+rbx*4]
.text:00000000000072AC                 mov     r13, r8
.text:00000000000072AF                 lea     rax, [rbx+rax*2]
.text:00000000000072B3                 lea     r12, [rcx+rax*8]
.text:00000000000072B7                 mov     [r12], rdi
.text:00000000000072BB                 mov     dword ptr [r12+10h], 0
.text:00000000000072C4                 mov     qword ptr [r12+18h], 0
.text:00000000000072CD                 mov     qword ptr [r12+20h], 0
.text:00000000000072D6                 mov     [r12+28h], r8
.text:00000000000072DB                 mov     qword ptr [r12+30h], 0
.text:00000000000072E4                 mov     qword ptr [r12+38h], 0
.text:00000000000072ED                 mov     [r12+40h], r8
.text:00000000000072F2                 mov     [r12+50h], r8
.text:00000000000072F7                 movzx   ebx, byte ptr [rdi+1]
.text:00000000000072FB                 lea     eax, [rbx-30h]
.text:00000000000072FE                 cmp     al, 9
.text:0000000000007300                 ja      short loc_733E
.text:0000000000007302                 jmp     loc_773A
.text:0000000000007302 ; ---------------------------------------------------------------------------
.text:0000000000007307                 align 10h
.text:0000000000007310
.text:0000000000007310 loc_7310:                               ; CODE XREF: printf_parse+158↓j
.text:0000000000007310                 cmp     bl, 2Dh ; '-'
.text:0000000000007313                 jz      short loc_7358
.text:0000000000007315                 cmp     bl, 2Bh ; '+'
.text:0000000000007318                 jz      short loc_7360
.text:000000000000731A                 cmp     bl, 20h ; ' '
.text:000000000000731D                 jz      short loc_7370
.text:000000000000731F                 cmp     bl, 23h ; '#'
.text:0000000000007322                 jz      short loc_7380
.text:0000000000007324                 cmp     bl, 30h ; '0'
.text:0000000000007327                 jz      short loc_7390
.text:0000000000007329                 cmp     bl, 49h ; 'I'
.text:000000000000732C                 jnz     short loc_73A0
.text:000000000000732E                 or      dword ptr [r12+10h], 40h
.text:0000000000007334                 nop     dword ptr [rax+00h]
.text:0000000000007338
.text:0000000000007338 loc_7338:                               ; CODE XREF: printf_parse+160↓j
.text:0000000000007338                                         ; printf_parse+16E↓j ...
.text:0000000000007338                 movzx   ebx, byte ptr [rax]
.text:000000000000733B                 mov     rbp, rax
.text:000000000000733E
.text:000000000000733E loc_733E:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000733E                                         ; printf_parse+565↓j ...
.text:000000000000733E                 lea     rax, [rbp+1]
.text:0000000000007342                 cmp     bl, 27h ; '''
.text:0000000000007345                 mov     rdx, rax
.text:0000000000007348                 jnz     short loc_7310
.text:000000000000734A                 or      dword ptr [r12+10h], 1
.text:0000000000007350                 jmp     short loc_7338
.text:0000000000007350 ; ---------------------------------------------------------------------------
.text:0000000000007352                 align 8
.text:0000000000007358
.text:0000000000007358 loc_7358:                               ; CODE XREF: printf_parse+123↑j
.text:0000000000007358                 or      dword ptr [r12+10h], 2
.text:000000000000735E                 jmp     short loc_7338
.text:0000000000007360 ; ---------------------------------------------------------------------------
.text:0000000000007360
.text:0000000000007360 loc_7360:                               ; CODE XREF: printf_parse+128↑j
.text:0000000000007360                 or      dword ptr [r12+10h], 4
.text:0000000000007366                 jmp     short loc_7338
.text:0000000000007366 ; ---------------------------------------------------------------------------
.text:0000000000007368                 align 10h
.text:0000000000007370
.text:0000000000007370 loc_7370:                               ; CODE XREF: printf_parse+12D↑j
.text:0000000000007370                 or      dword ptr [r12+10h], 8
.text:0000000000007376                 jmp     short loc_7338
.text:0000000000007376 ; ---------------------------------------------------------------------------
.text:0000000000007378                 align 20h
.text:0000000000007380
.text:0000000000007380 loc_7380:                               ; CODE XREF: printf_parse+132↑j
.text:0000000000007380                 or      dword ptr [r12+10h], 10h
.text:0000000000007386                 jmp     short loc_7338
.text:0000000000007386 ; ---------------------------------------------------------------------------
.text:0000000000007388                 align 10h
.text:0000000000007390
.text:0000000000007390 loc_7390:                               ; CODE XREF: printf_parse+137↑j
.text:0000000000007390                 or      dword ptr [r12+10h], 20h
.text:0000000000007396                 jmp     short loc_7338
.text:0000000000007396 ; ---------------------------------------------------------------------------
.text:0000000000007398                 align 20h
.text:00000000000073A0
.text:00000000000073A0 loc_73A0:                               ; CODE XREF: printf_parse+13C↑j
.text:00000000000073A0                 cmp     bl, 2Ah ; '*'
.text:00000000000073A3                 jz      loc_7559
.text:00000000000073A9                 lea     ecx, [rbx-30h]
.text:00000000000073AC                 cmp     cl, 9
.text:00000000000073AF                 jbe     loc_77C7
.text:00000000000073B5
.text:00000000000073B5 loc_73B5:                               ; CODE XREF: printf_parse+629↓j
.text:00000000000073B5                                         ; printf_parse+96C↓j
.text:00000000000073B5                 cmp     bl, 2Eh ; '.'
.text:00000000000073B8                 jz      loc_768F
.text:00000000000073BE
.text:00000000000073BE loc_73BE:                               ; CODE XREF: printf_parse+499↓j
.text:00000000000073BE                                         ; printf_parse+545↓j ...
.text:00000000000073BE                 xor     eax, eax
.text:00000000000073C0                 mov     esi, 1
.text:00000000000073C5                 jmp     short loc_73F7
.text:00000000000073C5 ; ---------------------------------------------------------------------------
.text:00000000000073C7                 align 10h
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: printf_parse+20E↓j
.text:00000000000073D0                 cmp     bl, 4Ch ; 'L'
.text:00000000000073D3                 jz      short loc_7410
.text:00000000000073D5                 cmp     bl, 6Ch ; 'l'
.text:00000000000073D8                 jz      short loc_73F0
.text:00000000000073DA                 cmp     bl, 6Ah ; 'j'
.text:00000000000073DD                 jz      short loc_73F0
.text:00000000000073DF                 mov     edx, ebx
.text:00000000000073E1                 and     edx, 0FFFFFFDFh
.text:00000000000073E4                 cmp     dl, 5Ah ; 'Z'
.text:00000000000073E7                 jz      short loc_73F0
.text:00000000000073E9                 cmp     bl, 74h ; 't'
.text:00000000000073EC                 jnz     short loc_7418
.text:00000000000073EE                 xchg    ax, ax
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: printf_parse+1E8↑j
.text:00000000000073F0                                         ; printf_parse+1ED↑j ...
.text:00000000000073F0                 add     eax, 8
.text:00000000000073F3
.text:00000000000073F3 loc_73F3:                               ; CODE XREF: printf_parse+21B↓j
.text:00000000000073F3                                         ; printf_parse+223↓j
.text:00000000000073F3                 movzx   ebx, byte ptr [rbp+0]
.text:00000000000073F7
.text:00000000000073F7 loc_73F7:                               ; CODE XREF: printf_parse+1D5↑j
.text:00000000000073F7                 add     rbp, 1
.text:00000000000073FB                 cmp     bl, 68h ; 'h'
.text:00000000000073FE                 jnz     short loc_73D0
.text:0000000000007400                 mov     ecx, eax
.text:0000000000007402                 mov     edx, esi
.text:0000000000007404                 and     ecx, 1
.text:0000000000007407                 shl     edx, cl
.text:0000000000007409                 or      eax, edx
.text:000000000000740B                 jmp     short loc_73F3
.text:000000000000740B ; ---------------------------------------------------------------------------
.text:000000000000740D                 align 10h
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: printf_parse+1E3↑j
.text:0000000000007410                 or      eax, 4
.text:0000000000007413                 jmp     short loc_73F3
.text:0000000000007413 ; ---------------------------------------------------------------------------
.text:0000000000007415                 align 8
.text:0000000000007418
.text:0000000000007418 loc_7418:                               ; CODE XREF: printf_parse+1FC↑j
.text:0000000000007418                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000741B                 cmp     dl, 53h
.text:000000000000741E                 ja      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007424                 lea     rcx, jpt_7435
.text:000000000000742B                 movzx   edx, dl
.text:000000000000742E                 movsxd  rdx, ds:(jpt_7435 - 91ACh)[rcx+rdx*4]
.text:0000000000007432                 add     rdx, rcx
.text:0000000000007435                 jmp     rdx             ; switch jump
.text:0000000000007437 ; ---------------------------------------------------------------------------
.text:0000000000007437
.text:0000000000007437 loc_7437:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007437                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:0000000000007437                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000743D                 mov     ebx, 73h ; 's'
.text:0000000000007442                 nop     word ptr [rax+rax+00h]
.text:0000000000007448
.text:0000000000007448 loc_7448:                               ; CODE XREF: printf_parse+705↓j
.text:0000000000007448                                         ; printf_parse+70D↓j ...
.text:0000000000007448                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000744C                 jz      loc_7B07
.text:0000000000007452                 mov     [r12+50h], r13
.text:0000000000007457
.text:0000000000007457 loc_7457:                               ; CODE XREF: printf_parse+939↓j
.text:0000000000007457                 cmp     r9, r13
.text:000000000000745A                 mov     rcx, [r15+8]
.text:000000000000745E                 jbe     loc_7A80
.text:0000000000007464
.text:0000000000007464 loc_7464:                               ; CODE XREF: printf_parse+912↓j
.text:0000000000007464                 mov     rax, [r15]
.text:0000000000007467                 mov     rdx, rax
.text:000000000000746A                 shl     rdx, 5
.text:000000000000746E                 add     rdx, rcx
.text:0000000000007471                 cmp     rax, r13
.text:0000000000007474                 ja      short loc_7496
.text:0000000000007476                 db      2Eh
.text:0000000000007476                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007480
.text:0000000000007480 loc_7480:                               ; CODE XREF: printf_parse+2A1↓j
.text:0000000000007480                 add     rax, 1
.text:0000000000007484                 mov     dword ptr [rdx], 0
.text:000000000000748A                 add     rdx, 20h ; ' '
.text:000000000000748E                 cmp     rax, r13
.text:0000000000007491                 jbe     short loc_7480
.text:0000000000007493                 mov     [r15], rax
.text:0000000000007496
.text:0000000000007496 loc_7496:                               ; CODE XREF: printf_parse+284↑j
.text:0000000000007496                 shl     r13, 5
.text:000000000000749A                 lea     rax, [rcx+r13]
.text:000000000000749E                 mov     edx, [rax]
.text:00000000000074A0                 test    edx, edx
.text:00000000000074A2                 jnz     loc_7A73
.text:00000000000074A8                 mov     [rax], r11d
.text:00000000000074AB
.text:00000000000074AB loc_74AB:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000074AB                                         ; printf_parse+886↓j
.text:00000000000074AB                                         ; DATA XREF: ...
.text:00000000000074AB                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:00000000000074B0                 mov     rax, [r14]
.text:00000000000074B3                 mov     [r12+8], rbp
.text:00000000000074B8                 lea     rbx, [rax+1]
.text:00000000000074BC                 cmp     r10, rbx
.text:00000000000074BF                 mov     [r14], rbx
.text:00000000000074C2                 ja      loc_7550
.text:00000000000074C8                 test    r10, r10
.text:00000000000074CB                 js      loc_7E77
.text:00000000000074D1                 add     r10, r10
.text:00000000000074D4                 mov     rax, 2E8BA2E8BA2E8BAh
.text:00000000000074DE                 cmp     r10, rax
.text:00000000000074E1                 ja      loc_7E77
.text:00000000000074E7                 lea     rax, [r10+r10*4]
.text:00000000000074EB                 mov     rdi, [r14+8]    ; ptr
.text:00000000000074EF                 cmp     [rsp+88h+var_60], rdi
.text:00000000000074F4                 mov     [rsp+88h+var_48], r9
.text:00000000000074F9                 mov     [rsp+88h+var_50], r10
.text:00000000000074FE                 lea     rax, [r10+rax*2]
.text:0000000000007502                 mov     [rsp+88h+var_58], r8
.text:0000000000007507                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000750F                 jz      loc_7BCD
.text:0000000000007515                 call    _realloc        ; PIC mode
.text:000000000000751A                 test    rax, rax
.text:000000000000751D                 mov     rcx, rax
.text:0000000000007520                 mov     r8, [rsp+88h+var_58]
.text:0000000000007525                 mov     r10, [rsp+88h+var_50]
.text:000000000000752A                 mov     r9, [rsp+88h+var_48]
.text:000000000000752F                 jz      loc_7E77
.text:0000000000007535                 mov     rax, [rsp+88h+var_60]
.text:000000000000753A                 cmp     rax, [r14+8]
.text:000000000000753E                 mov     rbx, [r14]
.text:0000000000007541                 jz      loc_7BF0
.text:0000000000007547
.text:0000000000007547 loc_7547:                               ; CODE XREF: printf_parse+A3D↓j
.text:0000000000007547                 mov     [r14+8], rcx
.text:000000000000754B                 jmp     loc_7268
.text:0000000000007550 ; ---------------------------------------------------------------------------
.text:0000000000007550
.text:0000000000007550 loc_7550:                               ; CODE XREF: printf_parse+2D2↑j
.text:0000000000007550                 mov     rcx, [r14+8]
.text:0000000000007554                 jmp     loc_7268
.text:0000000000007559 ; ---------------------------------------------------------------------------
.text:0000000000007559
.text:0000000000007559 loc_7559:                               ; CODE XREF: printf_parse+1B3↑j
.text:0000000000007559                 mov     rsi, [rsp+88h+var_78]
.text:000000000000755E                 mov     ecx, 1
.text:0000000000007563                 mov     [r12+18h], rbp
.text:0000000000007568                 mov     [r12+20h], rax
.text:000000000000756D                 test    rsi, rsi
.text:0000000000007570                 cmovnz  rcx, rsi
.text:0000000000007574                 mov     [rsp+88h+var_78], rcx
.text:0000000000007579                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000757D                 lea     esi, [rcx-30h]
.text:0000000000007580                 cmp     sil, 9
.text:0000000000007584                 jbe     loc_7865
.text:000000000000758A
.text:000000000000758A loc_758A:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000758A                 mov     rsi, [rsp+88h+var_68]
.text:000000000000758F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007593                 lea     rdx, [rsi+1]
.text:0000000000007597                 mov     [r12+28h], rsi
.text:000000000000759C                 jz      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000075A2                 mov     rbx, [rsp+88h+var_68]
.text:00000000000075A7                 mov     rbp, rax
.text:00000000000075AA                 mov     [rsp+88h+var_68], rdx
.text:00000000000075AF
.text:00000000000075AF loc_75AF:                               ; CODE XREF: printf_parse+6F7↓j
.text:00000000000075AF                 cmp     r9, rbx
.text:00000000000075B2                 mov     rcx, [r15+8]
.text:00000000000075B6                 ja      loc_7C32
.text:00000000000075BC                 add     r9, r9
.text:00000000000075BF                 lea     rax, [rbx+1]
.text:00000000000075C3                 cmp     r9, rbx
.text:00000000000075C6                 cmovbe  r9, rax
.text:00000000000075CA                 mov     rax, 7FFFFFFFFFFFFFFh
.text:00000000000075D4                 cmp     r9, rax
.text:00000000000075D7                 ja      loc_7E7B
.text:00000000000075DD                 mov     rsi, r9
.text:00000000000075E0                 mov     [rsp+88h+var_48], r9
.text:00000000000075E5                 mov     [rsp+88h+var_50], r10
.text:00000000000075EA                 shl     rsi, 5          ; size
.text:00000000000075EE                 cmp     [rsp+88h+src], rcx
.text:00000000000075F3                 mov     [rsp+88h+var_58], r8
.text:00000000000075F8                 jz      loc_7D11
.text:00000000000075FE                 mov     rdi, rcx        ; ptr
.text:0000000000007601                 call    _realloc        ; PIC mode
.text:0000000000007606                 mov     rdx, [r15+8]
.text:000000000000760A                 mov     r8, [rsp+88h+var_58]
.text:000000000000760F                 mov     rcx, rax
.text:0000000000007612                 mov     r10, [rsp+88h+var_50]
.text:0000000000007617                 mov     r9, [rsp+88h+var_48]
.text:000000000000761C
.text:000000000000761C loc_761C:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000761C                 test    rcx, rcx
.text:000000000000761F                 jz      loc_7ED7
.text:0000000000007625                 cmp     [rsp+88h+src], rdx
.text:000000000000762A                 mov     rax, [r15]
.text:000000000000762D                 jz      loc_7DEB
.text:0000000000007633
.text:0000000000007633 loc_7633:                               ; CODE XREF: printf_parse+C33↓j
.text:0000000000007633                 mov     [r15+8], rcx
.text:0000000000007637
.text:0000000000007637 loc_7637:                               ; CODE XREF: printf_parse+A45↓j
.text:0000000000007637                 mov     rdx, rax
.text:000000000000763A                 shl     rdx, 5
.text:000000000000763E                 add     rdx, rcx
.text:0000000000007641                 cmp     rax, rbx
.text:0000000000007644                 ja      short loc_7666
.text:0000000000007646                 db      2Eh
.text:0000000000007646                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007650
.text:0000000000007650 loc_7650:                               ; CODE XREF: printf_parse+471↓j
.text:0000000000007650                 add     rax, 1
.text:0000000000007654                 mov     dword ptr [rdx], 0
.text:000000000000765A                 add     rdx, 20h ; ' '
.text:000000000000765E                 cmp     rax, rbx
.text:0000000000007661                 jbe     short loc_7650
.text:0000000000007663                 mov     [r15], rax
.text:0000000000007666
.text:0000000000007666 loc_7666:                               ; CODE XREF: printf_parse+454↑j
.text:0000000000007666                 shl     rbx, 5
.text:000000000000766A                 lea     rax, [rcx+rbx]
.text:000000000000766E                 mov     edx, [rax]
.text:0000000000007670                 test    edx, edx
.text:0000000000007672                 jnz     loc_7B4B
.text:0000000000007678                 mov     dword ptr [rax], 5
.text:000000000000767E                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007682                 lea     rdx, [rbp+1]
.text:0000000000007686                 cmp     bl, 2Eh ; '.'
.text:0000000000007689                 jnz     loc_73BE
.text:000000000000768F
.text:000000000000768F loc_768F:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000768F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:0000000000007693                 mov     [r12+30h], rbp
.text:0000000000007698                 jnz     loc_781E
.text:000000000000769E                 mov     rsi, [rsp+88h+var_70]
.text:00000000000076A3                 lea     r11, [rbp+2]
.text:00000000000076A7                 mov     eax, 2
.text:00000000000076AC                 mov     [r12+38h], r11
.text:00000000000076B1                 cmp     rsi, 2
.text:00000000000076B5                 cmovnb  rax, rsi
.text:00000000000076B9                 mov     [rsp+88h+var_70], rax
.text:00000000000076BE                 movsx   eax, byte ptr [rbp+2]
.text:00000000000076C2                 lea     edx, [rax-30h]
.text:00000000000076C5                 cmp     dl, 9
.text:00000000000076C8                 jbe     loc_7D5C
.text:00000000000076CE
.text:00000000000076CE loc_76CE:                               ; CODE XREF: printf_parse+B82↓j
.text:00000000000076CE                 mov     rbx, [r12+40h]
.text:00000000000076D3                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000076D7                 jz      loc_7D35
.text:00000000000076DD
.text:00000000000076DD loc_76DD:                               ; CODE XREF: printf_parse+B67↓j
.text:00000000000076DD                                         ; printf_parse+C59↓j
.text:00000000000076DD                 cmp     r9, rbx
.text:00000000000076E0                 mov     rcx, [r15+8]
.text:00000000000076E4                 jbe     loc_7C4F
.text:00000000000076EA                 mov     rax, [r15]
.text:00000000000076ED
.text:00000000000076ED loc_76ED:                               ; CODE XREF: printf_parse+AE4↓j
.text:00000000000076ED                 mov     rdx, rax
.text:00000000000076F0                 shl     rdx, 5
.text:00000000000076F4                 add     rdx, rcx
.text:00000000000076F7                 cmp     rax, rbx
.text:00000000000076FA                 ja      short loc_7716
.text:00000000000076FC                 nop     dword ptr [rax+00h]
.text:0000000000007700
.text:0000000000007700 loc_7700:                               ; CODE XREF: printf_parse+521↓j
.text:0000000000007700                 add     rax, 1
.text:0000000000007704                 mov     dword ptr [rdx], 0
.text:000000000000770A                 add     rdx, 20h ; ' '
.text:000000000000770E                 cmp     rax, rbx
.text:0000000000007711                 jbe     short loc_7700
.text:0000000000007713                 mov     [r15], rax
.text:0000000000007716
.text:0000000000007716 loc_7716:                               ; CODE XREF: printf_parse+50A↑j
.text:0000000000007716                 shl     rbx, 5
.text:000000000000771A                 lea     rax, [rcx+rbx]
.text:000000000000771E                 mov     edx, [rax]
.text:0000000000007720                 test    edx, edx
.text:0000000000007722                 jnz     loc_7C3A
.text:0000000000007728                 mov     dword ptr [rax], 5
.text:000000000000772E                 mov     rbp, r11
.text:0000000000007731                 movzx   ebx, byte ptr [r11]
.text:0000000000007735                 jmp     loc_73BE
.text:000000000000773A ; ---------------------------------------------------------------------------
.text:000000000000773A
.text:000000000000773A loc_773A:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000773A                 mov     rax, rbp
.text:000000000000773D                 nop     dword ptr [rax]
.text:0000000000007740
.text:0000000000007740 loc_7740:                               ; CODE XREF: printf_parse+55D↓j
.text:0000000000007740                 add     rax, 1
.text:0000000000007744                 movzx   edx, byte ptr [rax]
.text:0000000000007747                 lea     ecx, [rdx-30h]
.text:000000000000774A                 cmp     cl, 9
.text:000000000000774D                 jbe     short loc_7740
.text:000000000000774F                 cmp     dl, 24h ; '$'
.text:0000000000007752                 mov     r13, r8
.text:0000000000007755                 jnz     loc_733E
.text:000000000000775B                 xor     edx, edx
.text:000000000000775D
.text:000000000000775D loc_775D:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000775D                 movsx   eax, bl
.text:0000000000007760                 mov     rdi, 1999999999999999h
.text:000000000000776A                 mov     rsi, r8
.text:000000000000776D                 sub     eax, 30h ; '0'
.text:0000000000007770                 cmp     rdx, rdi
.text:0000000000007773                 cdqe
.text:0000000000007775                 ja      short loc_777E
.text:0000000000007777                 lea     rsi, [rdx+rdx*4]
.text:000000000000777B                 add     rsi, rsi
.text:000000000000777E
.text:000000000000777E loc_777E:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000777E                 mov     rcx, rbp
.text:0000000000007781
.text:0000000000007781 loc_7781:                               ; CODE XREF: printf_parse+956↓j
.text:0000000000007781                 add     rax, rsi
.text:0000000000007784                 movzx   ebx, byte ptr [rbp+1]
.text:0000000000007788                 setb    sil
.text:000000000000778C                 add     rbp, 1
.text:0000000000007790                 mov     rdx, rax
.text:0000000000007793                 movzx   esi, sil
.text:0000000000007797                 test    rsi, rsi
.text:000000000000779A                 lea     edi, [rbx-30h]
.text:000000000000779D                 jnz     loc_7B2E
.text:00000000000077A3                 cmp     dil, 9
.text:00000000000077A7                 jbe     short loc_775D
.text:00000000000077A9                 mov     r13, rax
.text:00000000000077AC                 sub     r13, 1
.text:00000000000077B0                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:00000000000077B4                 ja      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000077BA                 lea     rbp, [rcx+2]
.text:00000000000077BE                 movzx   ebx, byte ptr [rcx+2]
.text:00000000000077C2                 jmp     loc_733E
.text:00000000000077C7 ; ---------------------------------------------------------------------------
.text:00000000000077C7
.text:00000000000077C7 loc_77C7:                               ; CODE XREF: printf_parse+1BF↑j
.text:00000000000077C7                 mov     [r12+18h], rbp
.text:00000000000077CC                 movzx   edi, byte ptr [rbp+0]
.text:00000000000077D0                 mov     rsi, rbp
.text:00000000000077D3                 lea     ecx, [rdi-30h]
.text:00000000000077D6                 cmp     cl, 9
.text:00000000000077D9                 jbe     short loc_77E7
.text:00000000000077DB                 jmp     short loc_7810
.text:00000000000077DB ; ---------------------------------------------------------------------------
.text:00000000000077DD                 align 20h
.text:00000000000077E0
.text:00000000000077E0 loc_77E0:                               ; CODE XREF: printf_parse+600↓j
.text:00000000000077E0                 mov     rbp, rax
.text:00000000000077E3                 add     rax, 1
.text:00000000000077E7
.text:00000000000077E7 loc_77E7:                               ; CODE XREF: printf_parse+5E9↑j
.text:00000000000077E7                 movzx   edi, byte ptr [rax]
.text:00000000000077EA                 lea     edx, [rdi-30h]
.text:00000000000077ED                 cmp     dl, 9
.text:00000000000077F0                 jbe     short loc_77E0
.text:00000000000077F2                 mov     rcx, rax
.text:00000000000077F5                 lea     rdx, [rbp+2]
.text:00000000000077F9                 mov     rbp, rax
.text:00000000000077FC                 sub     rcx, rsi
.text:00000000000077FF                 mov     rsi, [rsp+88h+var_78]
.text:0000000000007804                 cmp     rsi, rcx
.text:0000000000007807                 cmovnb  rcx, rsi
.text:000000000000780B                 mov     [rsp+88h+var_78], rcx
.text:0000000000007810
.text:0000000000007810 loc_7810:                               ; CODE XREF: printf_parse+5EB↑j
.text:0000000000007810                 mov     [r12+20h], rbp
.text:0000000000007815                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007819                 jmp     loc_73B5
.text:000000000000781E ; ---------------------------------------------------------------------------
.text:000000000000781E
.text:000000000000781E loc_781E:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000781E                 movzx   eax, byte ptr [rbp+1]
.text:0000000000007822                 sub     eax, 30h ; '0'
.text:0000000000007825                 cmp     al, 9
.text:0000000000007827                 ja      short loc_783E
.text:0000000000007829                 nop     dword ptr [rax+00000000h]
.text:0000000000007830
.text:0000000000007830 loc_7830:                               ; CODE XREF: printf_parse+64C↓j
.text:0000000000007830                 add     rdx, 1
.text:0000000000007834                 movzx   eax, byte ptr [rdx]
.text:0000000000007837                 sub     eax, 30h ; '0'
.text:000000000000783A                 cmp     al, 9
.text:000000000000783C                 jbe     short loc_7830
.text:000000000000783E
.text:000000000000783E loc_783E:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000783E                 mov     rsi, [rsp+88h+var_70]
.text:0000000000007843                 mov     rax, rdx
.text:0000000000007846                 mov     [r12+38h], rdx
.text:000000000000784B                 sub     rax, rbp
.text:000000000000784E                 movzx   ebx, byte ptr [rdx]
.text:0000000000007851                 mov     rbp, rdx
.text:0000000000007854                 cmp     rsi, rax
.text:0000000000007857                 cmovnb  rax, rsi
.text:000000000000785B                 mov     [rsp+88h+var_70], rax
.text:0000000000007860                 jmp     loc_73BE
.text:0000000000007865 ; ---------------------------------------------------------------------------
.text:0000000000007865
.text:0000000000007865 loc_7865:                               ; CODE XREF: printf_parse+394↑j
.text:0000000000007865                 mov     rsi, rax
.text:0000000000007868
.text:0000000000007868 loc_7868:                               ; CODE XREF: printf_parse+687↓j
.text:0000000000007868                 add     rsi, 1
.text:000000000000786C                 movzx   edi, byte ptr [rsi]
.text:000000000000786F                 lea     r11d, [rdi-30h]
.text:0000000000007873                 cmp     r11b, 9
.text:0000000000007877                 jbe     short loc_7868
.text:0000000000007879                 cmp     dil, 24h ; '$'
.text:000000000000787D                 jnz     loc_758A
.text:0000000000007883                 xor     esi, esi
.text:0000000000007885
.text:0000000000007885 loc_7885:                               ; CODE XREF: printf_parse+6DE↓j
.text:0000000000007885                 movsx   eax, cl
.text:0000000000007888                 mov     rdi, 1999999999999999h
.text:0000000000007892                 mov     rcx, r8
.text:0000000000007895                 sub     eax, 30h ; '0'
.text:0000000000007898                 cmp     rsi, rdi
.text:000000000000789B                 cdqe
.text:000000000000789D                 ja      short loc_78A6
.text:000000000000789F                 lea     rcx, [rsi+rsi*4]
.text:00000000000078A3                 add     rcx, rcx
.text:00000000000078A6
.text:00000000000078A6 loc_78A6:                               ; CODE XREF: printf_parse+6AD↑j
.text:00000000000078A6                 mov     rbp, rdx
.text:00000000000078A9
.text:00000000000078A9 loc_78A9:                               ; CODE XREF: printf_parse+BF6↓j
.text:00000000000078A9                 xor     r11d, r11d
.text:00000000000078AC                 add     rax, rcx
.text:00000000000078AF                 movzx   ecx, byte ptr [rdx+1]
.text:00000000000078B3                 setb    r11b
.text:00000000000078B7                 add     rdx, 1
.text:00000000000078BB                 mov     rsi, rax
.text:00000000000078BE                 test    r11, r11
.text:00000000000078C1                 lea     edi, [rcx-30h]
.text:00000000000078C4                 jnz     loc_7DCE
.text:00000000000078CA                 cmp     dil, 9
.text:00000000000078CE                 jbe     short loc_7885
.text:00000000000078D0                 lea     rbx, [rax-1]
.text:00000000000078D4                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:00000000000078D8                 ja      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:00000000000078DE                 mov     [r12+28h], rbx
.text:00000000000078E3                 add     rbp, 2
.text:00000000000078E7                 jmp     loc_75AF
.text:00000000000078EC ; ---------------------------------------------------------------------------
.text:00000000000078EC
.text:00000000000078EC loc_78EC:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000078EC                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:00000000000078EC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:00000000000078EF                 mov     r11d, 16h
.text:00000000000078F5                 jg      loc_7448
.text:00000000000078FB                 test    al, 4
.text:00000000000078FD                 jnz     loc_7448
.text:0000000000007903                 cmp     eax, 7
.text:0000000000007906                 mov     r11d, 15h
.text:000000000000790C                 jg      loc_7448
.text:0000000000007912                 test    al, 2
.text:0000000000007914                 mov     r11d, 12h
.text:000000000000791A                 jnz     loc_7448
.text:0000000000007920                 xor     r11d, r11d
.text:0000000000007923                 test    al, 1
.text:0000000000007925                 setz    r11b
.text:0000000000007929                 add     r11d, 13h
.text:000000000000792D                 jmp     loc_7448
.text:000000000000792D ; ---------------------------------------------------------------------------
.text:0000000000007932                 align 8
.text:0000000000007938
.text:0000000000007938 loc_7938:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007938                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:0000000000007938                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000793B                 cmp     eax, 7
.text:000000000000793E                 setnle  r11b
.text:0000000000007942                 add     r11d, 0Dh
.text:0000000000007946                 jmp     loc_7448
.text:000000000000794B ; ---------------------------------------------------------------------------
.text:000000000000794B
.text:000000000000794B loc_794B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000794B                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:000000000000794B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000794E                 mov     r11d, 9
.text:0000000000007954                 jg      loc_7448
.text:000000000000795A                 test    al, 4
.text:000000000000795C                 jnz     loc_7448
.text:0000000000007962                 cmp     eax, 7
.text:0000000000007965                 mov     r11d, 7
.text:000000000000796B                 jg      loc_7448
.text:0000000000007971                 test    al, 2
.text:0000000000007973                 mov     r11d, 1
.text:0000000000007979                 jnz     loc_7448
.text:000000000000797F                 and     eax, 1
.text:0000000000007982                 cmp     eax, 1
.text:0000000000007985                 sbb     r11d, r11d
.text:0000000000007988                 and     r11d, 2
.text:000000000000798C                 add     r11d, 3
.text:0000000000007990                 jmp     loc_7448
.text:0000000000007990 ; ---------------------------------------------------------------------------
.text:0000000000007995                 align 8
.text:0000000000007998
.text:0000000000007998 loc_7998:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007998                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:0000000000007998                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000799B                 cmp     eax, 7
.text:000000000000799E                 setnle  r11b
.text:00000000000079A2                 add     r11d, 0Fh
.text:00000000000079A6                 jmp     loc_7448
.text:00000000000079AB ; ---------------------------------------------------------------------------
.text:00000000000079AB
.text:00000000000079AB loc_79AB:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000079AB                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:00000000000079AB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:00000000000079AE                 mov     r11d, 0Ch
.text:00000000000079B4                 jg      loc_7448
.text:00000000000079BA                 xor     r11d, r11d
.text:00000000000079BD                 test    al, 4
.text:00000000000079BF                 setnz   r11b
.text:00000000000079C3                 add     r11d, 0Bh
.text:00000000000079C7                 jmp     loc_7448
.text:00000000000079CC ; ---------------------------------------------------------------------------
.text:00000000000079CC
.text:00000000000079CC loc_79CC:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000079CC                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:00000000000079CC                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:00000000000079D2                 mov     ebx, 63h ; 'c'
.text:00000000000079D7                 jmp     loc_7448
.text:00000000000079DC ; ---------------------------------------------------------------------------
.text:00000000000079DC
.text:00000000000079DC loc_79DC:                               ; CODE XREF: printf_parse+245↑j
.text:00000000000079DC                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:00000000000079DC                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:00000000000079DF                 mov     r11d, 0Ah
.text:00000000000079E5                 jg      loc_7448
.text:00000000000079EB                 test    al, 4
.text:00000000000079ED                 jnz     loc_7448
.text:00000000000079F3                 cmp     eax, 7
.text:00000000000079F6                 mov     r11d, 8
.text:00000000000079FC                 jg      loc_7448
.text:0000000000007A02                 test    al, 2
.text:0000000000007A04                 mov     r11d, 2
.text:0000000000007A0A                 jnz     loc_7448
.text:0000000000007A10                 and     eax, 1
.text:0000000000007A13                 cmp     eax, 1
.text:0000000000007A16                 sbb     r11d, r11d
.text:0000000000007A19                 and     r11d, 2
.text:0000000000007A1D                 add     r11d, 4
.text:0000000000007A21                 jmp     loc_7448
.text:0000000000007A21 ; ---------------------------------------------------------------------------
.text:0000000000007A26                 align 10h
.text:0000000000007A30
.text:0000000000007A30 loc_7A30:                               ; CODE XREF: printf_parse+245↑j
.text:0000000000007A30                                         ; DATA XREF: .rodata:jpt_7435↓o
.text:0000000000007A30                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:0000000000007A36                 jmp     loc_7448
.text:0000000000007A3B ; ---------------------------------------------------------------------------
.text:0000000000007A3B
.text:0000000000007A3B def_7435:                               ; CODE XREF: printf_parse+22E↑j
.text:0000000000007A3B                                         ; printf_parse+245↑j ...
.text:0000000000007A3B                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007A3F
.text:0000000000007A3F loc_7A3F:                               ; CODE XREF: printf_parse+88C↓j
.text:0000000000007A3F                                         ; printf_parse+95E↓j ...
.text:0000000000007A3F                 cmp     [rsp+88h+src], rcx
.text:0000000000007A44                 jz      short loc_7A4E
.text:0000000000007A46                 mov     rdi, rcx        ; ptr
.text:0000000000007A49                 call    _free           ; PIC mode
.text:0000000000007A4E
.text:0000000000007A4E loc_7A4E:                               ; CODE XREF: printf_parse+854↑j
.text:0000000000007A4E                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007A52                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007A57                 jz      short loc_7A5E
.text:0000000000007A59                 call    _free           ; PIC mode
.text:0000000000007A5E
.text:0000000000007A5E loc_7A5E:                               ; CODE XREF: printf_parse+867↑j
.text:0000000000007A5E                 call    ___errno_location ; PIC mode
.text:0000000000007A63                 mov     dword ptr [rax], 16h
.text:0000000000007A69                 mov     eax, 0FFFFFFFFh
.text:0000000000007A6E                 jmp     loc_7292
.text:0000000000007A73 ; ---------------------------------------------------------------------------
.text:0000000000007A73
.text:0000000000007A73 loc_7A73:                               ; CODE XREF: printf_parse+2B2↑j
.text:0000000000007A73                 cmp     edx, r11d
.text:0000000000007A76                 jz      loc_74AB        ; jumptable 0000000000000245 case 37
.text:0000000000007A7C                 jmp     short loc_7A3F
.text:0000000000007A7C ; ---------------------------------------------------------------------------
.text:0000000000007A7E                 align 20h
.text:0000000000007A80
.text:0000000000007A80 loc_7A80:                               ; CODE XREF: printf_parse+26E↑j
.text:0000000000007A80                 add     r9, r9
.text:0000000000007A83                 lea     rax, [r13+1]
.text:0000000000007A87                 cmp     r9, r13
.text:0000000000007A8A                 cmovbe  r9, rax
.text:0000000000007A8E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007A98                 cmp     r9, rax
.text:0000000000007A9B                 ja      loc_7E7B
.text:0000000000007AA1                 mov     rsi, r9
.text:0000000000007AA4                 mov     [rsp+88h+var_40], r9
.text:0000000000007AA9                 mov     [rsp+88h+var_48], r10
.text:0000000000007AAE                 shl     rsi, 5          ; size
.text:0000000000007AB2                 cmp     [rsp+88h+src], rcx
.text:0000000000007AB7                 mov     [rsp+88h+var_50], r8
.text:0000000000007ABC                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007AC1                 jz      loc_7B61
.text:0000000000007AC7                 mov     rdi, rcx        ; ptr
.text:0000000000007ACA                 call    _realloc        ; PIC mode
.text:0000000000007ACF                 test    rax, rax
.text:0000000000007AD2                 mov     rcx, rax
.text:0000000000007AD5                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007ADA                 mov     r8, [rsp+88h+var_50]
.text:0000000000007ADF                 mov     r10, [rsp+88h+var_48]
.text:0000000000007AE4                 mov     r9, [rsp+88h+var_40]
.text:0000000000007AE9                 jz      loc_7E77
.text:0000000000007AEF                 mov     rax, [rsp+88h+src]
.text:0000000000007AF4                 cmp     rax, [r15+8]
.text:0000000000007AF8                 jz      loc_7B89
.text:0000000000007AFE
.text:0000000000007AFE loc_7AFE:                               ; CODE XREF: printf_parse+9D8↓j
.text:0000000000007AFE                 mov     [r15+8], rcx
.text:0000000000007B02                 jmp     loc_7464
.text:0000000000007B07 ; ---------------------------------------------------------------------------
.text:0000000000007B07
.text:0000000000007B07 loc_7B07:                               ; CODE XREF: printf_parse+25C↑j
.text:0000000000007B07                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007B0C                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007B10                 lea     rax, [rsi+1]
.text:0000000000007B14                 mov     [r12+50h], rsi
.text:0000000000007B19                 jz      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007B1F                 mov     r13, [rsp+88h+var_68]
.text:0000000000007B24                 mov     [rsp+88h+var_68], rax
.text:0000000000007B29                 jmp     loc_7457
.text:0000000000007B2E ; ---------------------------------------------------------------------------
.text:0000000000007B2E
.text:0000000000007B2E loc_7B2E:                               ; CODE XREF: printf_parse+5AD↑j
.text:0000000000007B2E                 cmp     dil, 9
.text:0000000000007B32                 ja      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007B38                 movsx   eax, bl
.text:0000000000007B3B                 mov     rsi, r8
.text:0000000000007B3E                 mov     rcx, rbp
.text:0000000000007B41                 sub     eax, 30h ; '0'
.text:0000000000007B44                 cdqe
.text:0000000000007B46                 jmp     loc_7781
.text:0000000000007B4B ; ---------------------------------------------------------------------------
.text:0000000000007B4B
.text:0000000000007B4B loc_7B4B:                               ; CODE XREF: printf_parse+482↑j
.text:0000000000007B4B                 cmp     edx, 5
.text:0000000000007B4E                 jnz     loc_7A3F
.text:0000000000007B54                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000007B58                 lea     rdx, [rbp+1]
.text:0000000000007B5C                 jmp     loc_73B5
.text:0000000000007B61 ; ---------------------------------------------------------------------------
.text:0000000000007B61
.text:0000000000007B61 loc_7B61:                               ; CODE XREF: printf_parse+8D1↑j
.text:0000000000007B61                 mov     rdi, rsi        ; size
.text:0000000000007B64                 call    _malloc         ; PIC mode
.text:0000000000007B69                 test    rax, rax
.text:0000000000007B6C                 mov     rcx, rax
.text:0000000000007B6F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007B74                 mov     r8, [rsp+88h+var_50]
.text:0000000000007B79                 mov     r10, [rsp+88h+var_48]
.text:0000000000007B7E                 mov     r9, [rsp+88h+var_40]
.text:0000000000007B83                 jz      loc_7CEC
.text:0000000000007B89
.text:0000000000007B89 loc_7B89:                               ; CODE XREF: printf_parse+908↑j
.text:0000000000007B89                 mov     rdx, [r15]
.text:0000000000007B8C                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007B91                 mov     rdi, rcx        ; dest
.text:0000000000007B94                 mov     [rsp+88h+var_40], r9
.text:0000000000007B99                 mov     [rsp+88h+var_48], r10
.text:0000000000007B9E                 mov     [rsp+88h+var_50], r8
.text:0000000000007BA3                 mov     dword ptr [rsp+88h+var_58], r11d
.text:0000000000007BA8                 shl     rdx, 5          ; n
.text:0000000000007BAC                 call    _memcpy         ; PIC mode
.text:0000000000007BB1                 mov     r9, [rsp+88h+var_40]
.text:0000000000007BB6                 mov     r10, [rsp+88h+var_48]
.text:0000000000007BBB                 mov     rcx, rax
.text:0000000000007BBE                 mov     r8, [rsp+88h+var_50]
.text:0000000000007BC3                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:0000000000007BC8                 jmp     loc_7AFE
.text:0000000000007BCD ; ---------------------------------------------------------------------------
.text:0000000000007BCD
.text:0000000000007BCD loc_7BCD:                               ; CODE XREF: printf_parse+31F↑j
.text:0000000000007BCD                 mov     rdi, rsi        ; size
.text:0000000000007BD0                 call    _malloc         ; PIC mode
.text:0000000000007BD5                 test    rax, rax
.text:0000000000007BD8                 mov     rcx, rax
.text:0000000000007BDB                 mov     r8, [rsp+88h+var_58]
.text:0000000000007BE0                 mov     r10, [rsp+88h+var_50]
.text:0000000000007BE5                 mov     r9, [rsp+88h+var_48]
.text:0000000000007BEA                 jz      loc_7CD9
.text:0000000000007BF0
.text:0000000000007BF0 loc_7BF0:                               ; CODE XREF: printf_parse+351↑j
.text:0000000000007BF0                 lea     rax, [rbx+rbx*4]
.text:0000000000007BF4                 mov     rsi, [rsp+88h+var_60] ; src
.text:0000000000007BF9                 mov     rdi, rcx        ; dest
.text:0000000000007BFC                 mov     [rsp+88h+var_48], r9
.text:0000000000007C01                 mov     [rsp+88h+var_50], r10
.text:0000000000007C06                 lea     rdx, [rbx+rax*2]
.text:0000000000007C0A                 mov     [rsp+88h+var_58], r8
.text:0000000000007C0F                 shl     rdx, 3          ; n
.text:0000000000007C13                 call    _memcpy         ; PIC mode
.text:0000000000007C18                 mov     rbx, [r14]
.text:0000000000007C1B                 mov     rcx, rax
.text:0000000000007C1E                 mov     r9, [rsp+88h+var_48]
.text:0000000000007C23                 mov     r10, [rsp+88h+var_50]
.text:0000000000007C28                 mov     r8, [rsp+88h+var_58]
.text:0000000000007C2D                 jmp     loc_7547
.text:0000000000007C32 ; ---------------------------------------------------------------------------
.text:0000000000007C32
.text:0000000000007C32 loc_7C32:                               ; CODE XREF: printf_parse+3C6↑j
.text:0000000000007C32                 mov     rax, [r15]
.text:0000000000007C35                 jmp     loc_7637
.text:0000000000007C3A ; ---------------------------------------------------------------------------
.text:0000000000007C3A
.text:0000000000007C3A loc_7C3A:                               ; CODE XREF: printf_parse+532↑j
.text:0000000000007C3A                 cmp     edx, 5
.text:0000000000007C3D                 jnz     loc_7A3F
.text:0000000000007C43                 movzx   ebx, byte ptr [r11]
.text:0000000000007C47                 mov     rbp, r11
.text:0000000000007C4A                 jmp     loc_73BE
.text:0000000000007C4F ; ---------------------------------------------------------------------------
.text:0000000000007C4F
.text:0000000000007C4F loc_7C4F:                               ; CODE XREF: printf_parse+4F4↑j
.text:0000000000007C4F                 add     r9, r9
.text:0000000000007C52                 lea     rax, [rbx+1]
.text:0000000000007C56                 cmp     r9, rbx
.text:0000000000007C59                 cmovbe  r9, rax
.text:0000000000007C5D                 mov     rax, 7FFFFFFFFFFFFFFh
.text:0000000000007C67                 cmp     r9, rax
.text:0000000000007C6A                 ja      loc_7E7B
.text:0000000000007C70                 mov     rsi, r9
.text:0000000000007C73                 mov     [rsp+88h+var_40], r9
.text:0000000000007C78                 mov     [rsp+88h+var_48], r10
.text:0000000000007C7D                 shl     rsi, 5          ; size
.text:0000000000007C81                 cmp     [rsp+88h+src], rcx
.text:0000000000007C86                 mov     [rsp+88h+var_50], r8
.text:0000000000007C8B                 mov     [rsp+88h+var_58], r11
.text:0000000000007C90                 jz      loc_7E4E
.text:0000000000007C96                 mov     rdi, rcx        ; ptr
.text:0000000000007C99                 call    _realloc        ; PIC mode
.text:0000000000007C9E                 mov     rdx, [r15+8]
.text:0000000000007CA2                 mov     r11, [rsp+88h+var_58]
.text:0000000000007CA7                 mov     rcx, rax
.text:0000000000007CAA                 mov     r8, [rsp+88h+var_50]
.text:0000000000007CAF                 mov     r10, [rsp+88h+var_48]
.text:0000000000007CB4                 mov     r9, [rsp+88h+var_40]
.text:0000000000007CB9
.text:0000000000007CB9 loc_7CB9:                               ; CODE XREF: printf_parse+C82↓j
.text:0000000000007CB9                 test    rcx, rcx
.text:0000000000007CBC                 jz      loc_7ED7
.text:0000000000007CC2                 cmp     [rsp+88h+src], rdx
.text:0000000000007CC7                 mov     rax, [r15]
.text:0000000000007CCA                 jz      loc_7E90
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: printf_parse+CE2↓j
.text:0000000000007CD0                 mov     [r15+8], rcx
.text:0000000000007CD4                 jmp     loc_76ED
.text:0000000000007CD9 ; ---------------------------------------------------------------------------
.text:0000000000007CD9
.text:0000000000007CD9 loc_7CD9:                               ; CODE XREF: printf_parse+9FA↑j
.text:0000000000007CD9                 mov     rcx, [r15+8]
.text:0000000000007CDD                 cmp     [rsp+88h+src], rcx
.text:0000000000007CE2                 jz      short loc_7CFC
.text:0000000000007CE4
.text:0000000000007CE4 loc_7CE4:                               ; CODE XREF: printf_parse+C90↓j
.text:0000000000007CE4                 mov     rdi, rcx        ; ptr
.text:0000000000007CE7                 call    _free           ; PIC mode
.text:0000000000007CEC
.text:0000000000007CEC loc_7CEC:                               ; CODE XREF: printf_parse+993↑j
.text:0000000000007CEC                                         ; printf_parse+C96↓j
.text:0000000000007CEC                 mov     rdi, [r14+8]    ; ptr
.text:0000000000007CF0                 cmp     [rsp+88h+var_60], rdi
.text:0000000000007CF5                 jz      short loc_7CFC
.text:0000000000007CF7                 call    _free           ; PIC mode
.text:0000000000007CFC
.text:0000000000007CFC loc_7CFC:                               ; CODE XREF: printf_parse+AF2↑j
.text:0000000000007CFC                                         ; printf_parse+B05↑j
.text:0000000000007CFC                 call    ___errno_location ; PIC mode
.text:0000000000007D01                 mov     dword ptr [rax], 0Ch
.text:0000000000007D07                 mov     eax, 0FFFFFFFFh
.text:0000000000007D0C                 jmp     loc_7292
.text:0000000000007D11 ; ---------------------------------------------------------------------------
.text:0000000000007D11
.text:0000000000007D11 loc_7D11:                               ; CODE XREF: printf_parse+408↑j
.text:0000000000007D11                 mov     rdi, rsi        ; size
.text:0000000000007D14                 call    _malloc         ; PIC mode
.text:0000000000007D19                 mov     rdx, [rsp+88h+src]
.text:0000000000007D1E                 mov     rcx, rax
.text:0000000000007D21                 mov     r9, [rsp+88h+var_48]
.text:0000000000007D26                 mov     r10, [rsp+88h+var_50]
.text:0000000000007D2B                 mov     r8, [rsp+88h+var_58]
.text:0000000000007D30                 jmp     loc_761C
.text:0000000000007D35 ; ---------------------------------------------------------------------------
.text:0000000000007D35
.text:0000000000007D35 loc_7D35:                               ; CODE XREF: printf_parse+4E7↑j
.text:0000000000007D35                 mov     rsi, [rsp+88h+var_68]
.text:0000000000007D3A                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D3E                 lea     rax, [rsi+1]
.text:0000000000007D42                 mov     [r12+40h], rsi
.text:0000000000007D47                 jz      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007D4D                 mov     rbx, [rsp+88h+var_68]
.text:0000000000007D52                 mov     [rsp+88h+var_68], rax
.text:0000000000007D57                 jmp     loc_76DD
.text:0000000000007D5C ; ---------------------------------------------------------------------------
.text:0000000000007D5C
.text:0000000000007D5C loc_7D5C:                               ; CODE XREF: printf_parse+4D8↑j
.text:0000000000007D5C                 mov     rdx, r11
.text:0000000000007D5F
.text:0000000000007D5F loc_7D5F:                               ; CODE XREF: printf_parse+B7D↓j
.text:0000000000007D5F                 add     rdx, 1
.text:0000000000007D63                 movzx   ecx, byte ptr [rdx]
.text:0000000000007D66                 lea     esi, [rcx-30h]
.text:0000000000007D69                 cmp     sil, 9
.text:0000000000007D6D                 jbe     short loc_7D5F
.text:0000000000007D6F                 cmp     cl, 24h ; '$'
.text:0000000000007D72                 jnz     loc_76CE
.text:0000000000007D78                 xor     ecx, ecx
.text:0000000000007D7A
.text:0000000000007D7A loc_7D7A:                               ; CODE XREF: printf_parse+C3C↓j
.text:0000000000007D7A                 mov     rsi, 1999999999999999h
.text:0000000000007D84                 sub     eax, 30h ; '0'
.text:0000000000007D87                 mov     rdx, r8
.text:0000000000007D8A                 cmp     rcx, rsi
.text:0000000000007D8D                 cdqe
.text:0000000000007D8F                 ja      short loc_7D98
.text:0000000000007D91                 lea     rdx, [rcx+rcx*4]
.text:0000000000007D95                 add     rdx, rdx
.text:0000000000007D98
.text:0000000000007D98 loc_7D98:                               ; CODE XREF: printf_parse+B9F↑j
.text:0000000000007D98                 mov     rsi, r11
.text:0000000000007D9B
.text:0000000000007D9B loc_7D9B:                               ; CODE XREF: printf_parse+BDC↓j
.text:0000000000007D9B                 xor     ebx, ebx
.text:0000000000007D9D                 add     rdx, rax
.text:0000000000007DA0                 movsx   eax, byte ptr [r11+1]
.text:0000000000007DA5                 setb    bl
.text:0000000000007DA8                 add     r11, 1
.text:0000000000007DAC                 mov     rcx, rdx
.text:0000000000007DAF                 test    rbx, rbx
.text:0000000000007DB2                 lea     edi, [rax-30h]
.text:0000000000007DB5                 jz      short loc_7E28
.text:0000000000007DB7                 cmp     dil, 9
.text:0000000000007DBB                 ja      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007DC1                 sub     eax, 30h ; '0'
.text:0000000000007DC4                 mov     rdx, r8
.text:0000000000007DC7                 mov     rsi, r11
.text:0000000000007DCA                 cdqe
.text:0000000000007DCC                 jmp     short loc_7D9B
.text:0000000000007DCE ; ---------------------------------------------------------------------------
.text:0000000000007DCE
.text:0000000000007DCE loc_7DCE:                               ; CODE XREF: printf_parse+6D4↑j
.text:0000000000007DCE                 cmp     dil, 9
.text:0000000000007DD2                 ja      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007DD8                 movsx   eax, cl
.text:0000000000007DDB                 mov     rbp, rdx
.text:0000000000007DDE                 mov     rcx, r8
.text:0000000000007DE1                 sub     eax, 30h ; '0'
.text:0000000000007DE4                 cdqe
.text:0000000000007DE6                 jmp     loc_78A9
.text:0000000000007DEB ; ---------------------------------------------------------------------------
.text:0000000000007DEB
.text:0000000000007DEB loc_7DEB:                               ; CODE XREF: printf_parse+43D↑j
.text:0000000000007DEB                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007DF0                 shl     rax, 5
.text:0000000000007DF4                 mov     rdi, rcx        ; dest
.text:0000000000007DF7                 mov     rdx, rax        ; n
.text:0000000000007DFA                 mov     [rsp+88h+var_48], r9
.text:0000000000007DFF                 mov     [rsp+88h+var_50], r10
.text:0000000000007E04                 mov     [rsp+88h+var_58], r8
.text:0000000000007E09                 call    _memcpy         ; PIC mode
.text:0000000000007E0E                 mov     r9, [rsp+88h+var_48]
.text:0000000000007E13                 mov     rcx, rax
.text:0000000000007E16                 mov     r10, [rsp+88h+var_50]
.text:0000000000007E1B                 mov     rax, [r15]
.text:0000000000007E1E                 mov     r8, [rsp+88h+var_58]
.text:0000000000007E23                 jmp     loc_7633
.text:0000000000007E28 ; ---------------------------------------------------------------------------
.text:0000000000007E28
.text:0000000000007E28 loc_7E28:                               ; CODE XREF: printf_parse+BC5↑j
.text:0000000000007E28                 cmp     dil, 9
.text:0000000000007E2C                 jbe     loc_7D7A
.text:0000000000007E32                 lea     rbx, [rdx-1]
.text:0000000000007E36                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:0000000000007E3A                 ja      def_7435        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:0000000000007E40                 mov     [r12+40h], rbx
.text:0000000000007E45                 lea     r11, [rsi+2]
.text:0000000000007E49                 jmp     loc_76DD
.text:0000000000007E4E ; ---------------------------------------------------------------------------
.text:0000000000007E4E
.text:0000000000007E4E loc_7E4E:                               ; CODE XREF: printf_parse+AA0↑j
.text:0000000000007E4E                 mov     rdi, rsi        ; size
.text:0000000000007E51                 call    _malloc         ; PIC mode
.text:0000000000007E56                 mov     rdx, [rsp+88h+src]
.text:0000000000007E5B                 mov     rcx, rax
.text:0000000000007E5E                 mov     r9, [rsp+88h+var_40]
.text:0000000000007E63                 mov     r10, [rsp+88h+var_48]
.text:0000000000007E68                 mov     r8, [rsp+88h+var_50]
.text:0000000000007E6D                 mov     r11, [rsp+88h+var_58]
.text:0000000000007E72                 jmp     loc_7CB9
.text:0000000000007E77 ; ---------------------------------------------------------------------------
.text:0000000000007E77
.text:0000000000007E77 loc_7E77:                               ; CODE XREF: printf_parse+2DB↑j
.text:0000000000007E77                                         ; printf_parse+2F1↑j ...
.text:0000000000007E77                 mov     rcx, [r15+8]
.text:0000000000007E7B
.text:0000000000007E7B loc_7E7B:                               ; CODE XREF: printf_parse+3E7↑j
.text:0000000000007E7B                                         ; printf_parse+8AB↑j ...
.text:0000000000007E7B                 cmp     [rsp+88h+src], rcx
.text:0000000000007E80                 jnz     loc_7CE4
.text:0000000000007E86                 jmp     loc_7CEC
.text:0000000000007E86 ; ---------------------------------------------------------------------------
.text:0000000000007E8B                 align 10h
.text:0000000000007E90
.text:0000000000007E90 loc_7E90:                               ; CODE XREF: printf_parse+ADA↑j
.text:0000000000007E90                 mov     rsi, [rsp+88h+src] ; src
.text:0000000000007E95                 shl     rax, 5
.text:0000000000007E99                 mov     rdi, rcx        ; dest
.text:0000000000007E9C                 mov     rdx, rax        ; n
.text:0000000000007E9F                 mov     [rsp+88h+var_40], r9
.text:0000000000007EA4                 mov     [rsp+88h+var_48], r10
.text:0000000000007EA9                 mov     [rsp+88h+var_50], r8
.text:0000000000007EAE                 mov     [rsp+88h+var_58], r11
.text:0000000000007EB3                 call    _memcpy         ; PIC mode
.text:0000000000007EB8                 mov     r9, [rsp+88h+var_40]
.text:0000000000007EBD                 mov     rcx, rax
.text:0000000000007EC0                 mov     r10, [rsp+88h+var_48]
.text:0000000000007EC5                 mov     rax, [r15]
.text:0000000000007EC8                 mov     r8, [rsp+88h+var_50]
.text:0000000000007ECD                 mov     r11, [rsp+88h+var_58]
.text:0000000000007ED2                 jmp     loc_7CD0
.text:0000000000007ED7 ; ---------------------------------------------------------------------------
.text:0000000000007ED7
.text:0000000000007ED7 loc_7ED7:                               ; CODE XREF: printf_parse+42F↑j
.text:0000000000007ED7                                         ; printf_parse+ACC↑j
.text:0000000000007ED7                 mov     rcx, rdx
.text:0000000000007EDA                 jmp     short loc_7E7B
.text:0000000000007EDA ; } // starts at 71F0
.text:0000000000007EDA printf_parse    endp
.text:0000000000007EDA
.text:0000000000007EDA ; ---------------------------------------------------------------------------
.text:0000000000007EDC                 align 20h
.text:0000000000007EE0
.text:0000000000007EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EE0
.text:0000000000007EE0 ; Attributes: info_from_lumina
.text:0000000000007EE0
.text:0000000000007EE0 ; void _libc_csu_init(void)
.text:0000000000007EE0                 public __libc_csu_init
.text:0000000000007EE0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000007EE0 ; __unwind {
.text:0000000000007EE0                 push    r15
.text:0000000000007EE2                 push    r14
.text:0000000000007EE4                 mov     r15, rdx
.text:0000000000007EE7                 push    r13
.text:0000000000007EE9                 push    r12
.text:0000000000007EEB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000007EF2                 push    rbp
.text:0000000000007EF3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000007EFA                 push    rbx
.text:0000000000007EFB                 mov     r13d, edi
.text:0000000000007EFE                 mov     r14, rsi
.text:0000000000007F01                 sub     rbp, r12
.text:0000000000007F04                 sub     rsp, 8
.text:0000000000007F08                 sar     rbp, 3
.text:0000000000007F0C                 call    _init_proc
.text:0000000000007F11                 test    rbp, rbp
.text:0000000000007F14                 jz      short loc_7F36
.text:0000000000007F16                 xor     ebx, ebx
.text:0000000000007F18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007F20
.text:0000000000007F20 loc_7F20:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000007F20                 mov     rdx, r15
.text:0000000000007F23                 mov     rsi, r14
.text:0000000000007F26                 mov     edi, r13d
.text:0000000000007F29                 call    ds:(__frame_dummy_init_array_entry - 20AAF0h)[r12+rbx*8]
.text:0000000000007F2D                 add     rbx, 1
.text:0000000000007F31                 cmp     rbp, rbx
.text:0000000000007F34                 jnz     short loc_7F20
.text:0000000000007F36
.text:0000000000007F36 loc_7F36:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000007F36                 add     rsp, 8
.text:0000000000007F3A                 pop     rbx
.text:0000000000007F3B                 pop     rbp
.text:0000000000007F3C                 pop     r12
.text:0000000000007F3E                 pop     r13
.text:0000000000007F40                 pop     r14
.text:0000000000007F42                 pop     r15
.text:0000000000007F44                 retn
.text:0000000000007F44 ; } // starts at 7EE0
.text:0000000000007F44 __libc_csu_init endp
.text:0000000000007F44
.text:0000000000007F44 ; ---------------------------------------------------------------------------
.text:0000000000007F45                 align 10h
.text:0000000000007F50
.text:0000000000007F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F50
.text:0000000000007F50
.text:0000000000007F50 ; void _libc_csu_fini(void)
.text:0000000000007F50                 public __libc_csu_fini
.text:0000000000007F50 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000007F50 ; __unwind {
.text:0000000000007F50                 rep retn
.text:0000000000007F50 ; } // starts at 7F50
.text:0000000000007F50 __libc_csu_fini endp
.text:0000000000007F50
.text:0000000000007F50 ; ---------------------------------------------------------------------------
.text:0000000000007F52                 align 20h
.text:0000000000007F60
.text:0000000000007F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F60
.text:0000000000007F60
.text:0000000000007F60 atexit          proc near               ; CODE XREF: main+7C↑p
.text:0000000000007F60 ; __unwind {
.text:0000000000007F60                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000007F67                 xor     esi, esi        ; obj
.text:0000000000007F69                 jmp     ___cxa_atexit
.text:0000000000007F69 ; } // starts at 7F60
.text:0000000000007F69 atexit          endp
.text:0000000000007F69
.text:0000000000007F69 _text           ends
.text:0000000000007F69
LOAD:0000000000007F6E ; ===========================================================================
LOAD:0000000000007F6E
LOAD:0000000000007F6E ; Segment type: Pure code
LOAD:0000000000007F6E ; Segment permissions: Read/Execute
LOAD:0000000000007F6E LOAD            segment byte public 'CODE' use64
LOAD:0000000000007F6E                 assume cs:LOAD
LOAD:0000000000007F6E                 ;org 7F6Eh
LOAD:0000000000007F6E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007F6E                 align 10h
LOAD:0000000000007F6E LOAD            ends
LOAD:0000000000007F6E
.fini:0000000000007F70 ; ===========================================================================
.fini:0000000000007F70
.fini:0000000000007F70 ; Segment type: Pure code
.fini:0000000000007F70 ; Segment permissions: Read/Execute
.fini:0000000000007F70 _fini           segment dword public 'CODE' use64
.fini:0000000000007F70                 assume cs:_fini
.fini:0000000000007F70                 ;org 7F70h
.fini:0000000000007F70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000007F70
.fini:0000000000007F70 ; =============== S U B R O U T I N E =======================================
.fini:0000000000007F70
.fini:0000000000007F70
.fini:0000000000007F70                 public _term_proc
.fini:0000000000007F70 _term_proc      proc near
.fini:0000000000007F70                 sub     rsp, 8          ; _fini
.fini:0000000000007F74                 add     rsp, 8
.fini:0000000000007F78                 retn
.fini:0000000000007F78 _term_proc      endp
.fini:0000000000007F78
.fini:0000000000007F78 _fini           ends
.fini:0000000000007F78
LOAD:0000000000007F79 ; ===========================================================================
LOAD:0000000000007F79
LOAD:0000000000007F79 ; Segment type: Pure code
LOAD:0000000000007F79 ; Segment permissions: Read/Execute
LOAD:0000000000007F79 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007F79                 assume cs:LOAD
LOAD:0000000000007F79                 ;org 7F79h
LOAD:0000000000007F79                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007F79                 align 20h
LOAD:0000000000007F79 LOAD            ends
LOAD:0000000000007F79
.rodata:0000000000007F80 ; ===========================================================================
.rodata:0000000000007F80
.rodata:0000000000007F80 ; Segment type: Pure data
.rodata:0000000000007F80 ; Segment permissions: Read
.rodata:0000000000007F80 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000007F80                 assume cs:_rodata
.rodata:0000000000007F80                 ;org 7F80h
.rodata:0000000000007F80                 public _IO_stdin_used
.rodata:0000000000007F80 _IO_stdin_used  db    1
.rodata:0000000000007F81                 db    0
.rodata:0000000000007F82                 db    2
.rodata:0000000000007F83                 db    0
.rodata:0000000000007F84 ; const char a0123456789[]
.rodata:0000000000007F84 a0123456789     db '0123456789',0       ; DATA XREF: main+54F↑o
.rodata:0000000000007F84                                         ; main+56E↑o ...
.rodata:0000000000007F8F ; const char aWriteError[]
.rodata:0000000000007F8F aWriteError     db 'write error',0      ; DATA XREF: io_error+D↑o
.rodata:0000000000007F8F                                         ; close_stdout:loc_32F3↑o
.rodata:0000000000007F9B aInf            db 'inf',0              ; DATA XREF: main:loc_23C8↑o
.rodata:0000000000007F9B                                         ; seq_fast+B↑o
.rodata:0000000000007F9F aSeq            db 'seq',0              ; DATA XREF: main+19F↑o
.rodata:0000000000007F9F                                         ; usage+181↑o ...
.rodata:0000000000007FA3 asc_7FA3        db '[',0                ; DATA XREF: usage+18D↑o
.rodata:0000000000007FA5 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1B4↑o
.rodata:0000000000007FB5 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000007FB5                                         ; DATA XREF: usage+1E4↑o
.rodata:0000000000007FB5                                         ; usage+2DC↑o ...
.rodata:0000000000007FCB aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1F5↑o
.rodata:0000000000007FD5 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+201↑o
.rodata:0000000000007FE4 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+194↑o
.rodata:0000000000007FEE aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1C0↑o
.rodata:0000000000007FF8 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1D8↑o
.rodata:0000000000008002 ; const char aSOnlineHelpS[]
.rodata:0000000000008002 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+24A↑o
.rodata:0000000000008002                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000008019 unk_8019        db  47h ; G             ; DATA XREF: main+198↑o
.rodata:0000000000008019                                         ; usage+266↑o ...
.rodata:000000000000801A                 db  4Eh ; N
.rodata:000000000000801B                 db  55h ; U
.rodata:000000000000801C                 db  20h
.rodata:000000000000801D ; const char domainname[]
.rodata:000000000000801D domainname      db 'coreutils',0        ; DATA XREF: main+51↑o
.rodata:000000000000801D                                         ; main+69↑o ...
.rodata:0000000000008027 ; const char s2[]
.rodata:0000000000008027 s2              db 'en_',0              ; DATA XREF: usage+28D↑o
.rodata:0000000000008027                                         ; usage+34E↑o
.rodata:000000000000802B ; const char aFullDocumentat[]
.rodata:000000000000802B aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000802B                                         ; DATA XREF: usage:loc_2D49↑o
.rodata:000000000000802B                                         ; usage:loc_2E06↑o
.rodata:0000000000008046 aNotANumber     db 'not-a-number',0     ; DATA XREF: scan_arg+2D5↑o
.rodata:0000000000008053 ; const char aInvalidSArgume[]
.rodata:0000000000008053 aInvalidSArgume db 'invalid %s argument: %s',0
.rodata:0000000000008053                                         ; DATA XREF: scan_arg+2E6↑o
.rodata:000000000000806B ; const char reject[]
.rodata:000000000000806B reject          db 'xX',0               ; DATA XREF: scan_arg:loc_2F1D↑o
.rodata:000000000000806E ; const char aEe[]
.rodata:000000000000806E aEe             db 'eE',0               ; DATA XREF: scan_arg+F8↑o
.rodata:0000000000008071 aLg             db '%Lg',0              ; DATA XREF: main+88B↑o
.rodata:0000000000008071                                         ; main:loc_21C1↑o
.rodata:0000000000008075 ; const char dirname[]
.rodata:0000000000008075 dirname         db '/usr/local/share/locale',0
.rodata:0000000000008075                                         ; DATA XREF: main+4A↑o
.rodata:000000000000808D ; const char shortopts[]
.rodata:000000000000808D shortopts       db '+f:s:w',0           ; DATA XREF: main:loc_19AE↑o
.rodata:0000000000008094 aUlrichDrepper  db 'Ulrich Drepper',0   ; DATA XREF: main+191↑o
.rodata:00000000000080A3 ; const char aMissingOperand[]
.rodata:00000000000080A3 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_242E↑o
.rodata:00000000000080B3 ; const char aExtraOperandS[]
.rodata:00000000000080B3 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+A5C↑o
.rodata:00000000000080C4 ; const char msgid[]
.rodata:00000000000080C4 msgid           db 'format %s has no %% directive',0
.rodata:00000000000080C4                                         ; DATA XREF: main+9AE↑o
.rodata:00000000000080E2 ; const char accept[]
.rodata:00000000000080E2 accept          db '-+#0 ',27h,0        ; DATA XREF: main:loc_1E30↑o
.rodata:00000000000080E2                                         ; gettext_quote+27↑o ...
.rodata:00000000000080E9 ; const char aFormatSEndsIn[]
.rodata:00000000000080E9 aFormatSEndsIn  db 'format %s ends in %%',0
.rodata:00000000000080E9                                         ; DATA XREF: main+C1E↑o
.rodata:00000000000080FE ; const char s[]
.rodata:00000000000080FE s               db 'efgaEFGA',0         ; DATA XREF: main+5A4↑o
.rodata:0000000000008107 a0Lf            db '%0.Lf',0            ; DATA XREF: main+A20↑o
.rodata:0000000000008107                                         ; main+A9F↑o
.rodata:000000000000810D a0DDlf          db '%%0%d.%dLf',0       ; DATA XREF: main+8A3↑o
.rodata:0000000000008118 aDlf            db '%%.%dLf',0          ; DATA XREF: main:loc_222E↑o
.rodata:0000000000008120 ; const char locale[]
.rodata:0000000000008120 locale          db 'C',0                ; DATA XREF: main:loc_1DC6↑o
.rodata:0000000000008120                                         ; c_strtold:loc_5C60↑o ...
.rodata:0000000000008122 aEqualWidth     db 'equal-width',0      ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000812E aFormat         db 'format',0           ; DATA XREF: .data.rel.ro:000000000020AB20↓o
.rodata:0000000000008135 aSeparator      db 'separator',0        ; DATA XREF: .data.rel.ro:000000000020AB40↓o
.rodata:000000000000813F aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020AB60↓o
.rodata:0000000000008144 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020AB80↓o
.rodata:000000000000814C                 align 10h
.rodata:0000000000008150 ; const char aTrySHelpForMor[]
.rodata:0000000000008150 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000008150                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000008177                 align 8
.rodata:0000000000008178 ; const char aUsageSOptionLa[]
.rodata:0000000000008178 aUsageSOptionLa db 'Usage: %s [OPTION]... LAST',0Ah
.rodata:0000000000008178                                         ; DATA XREF: usage:loc_2AFD↑o
.rodata:0000000000008178                 db '  or:  %s [OPTION]... FIRST LAST',0Ah
.rodata:0000000000008178                 db '  or:  %s [OPTION]... FIRST INCREMENT LAST',0Ah,0
.rodata:00000000000081E0 ; const char aPrintNumbersFr[]
.rodata:00000000000081E0 aPrintNumbersFr db 'Print numbers from FIRST to LAST, in steps of INCREMENT.',0Ah,0
.rodata:00000000000081E0                                         ; DATA XREF: usage+8A↑o
.rodata:000000000000821A                 align 20h
.rodata:0000000000008220 ; const char aMandatoryArgum[]
.rodata:0000000000008220 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AF↑o
.rodata:0000000000008220                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000008220                 db 'ns too.',0Ah,0
.rodata:000000000000826B                 align 10h
.rodata:0000000000008270 ; const char aFFormatFormatU[]
.rodata:0000000000008270 aFFormatFormatU db '  -f, --format=FORMAT      use printf style floating-point FORMAT'
.rodata:0000000000008270                                         ; DATA XREF: usage+D4↑o
.rodata:0000000000008270                 db 0Ah
.rodata:0000000000008270                 db '  -s, --separator=STRING   use STRING to separate numbers (defaul'
.rodata:0000000000008270                 db 't: \n)',0Ah
.rodata:0000000000008270                 db '  -w, --equal-width        equalize width by padding with leading'
.rodata:0000000000008270                 db ' zeroes',0Ah,0
.rodata:0000000000008344                 align 8
.rodata:0000000000008348 ; const char aHelpDisplayThi[]
.rodata:0000000000008348 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000008348                                         ; DATA XREF: usage+F9↑o
.rodata:0000000000008375                 align 8
.rodata:0000000000008378 ; const char aVersionOutputV[]
.rodata:0000000000008378 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000008378                                         ; DATA XREF: usage+11E↑o
.rodata:00000000000083AE                 align 10h
.rodata:00000000000083B0 ; const char aIfFirstOrIncre[]
.rodata:00000000000083B0 aIfFirstOrIncre db 0Ah                  ; DATA XREF: usage+143↑o
.rodata:00000000000083B0                 db 'If FIRST or INCREMENT is omitted, it defaults to 1.  That is, an',0Ah
.rodata:00000000000083B0                 db 'omitted INCREMENT defaults to 1 even when LAST is smaller than FI'
.rodata:00000000000083B0                 db 'RST.',0Ah
.rodata:00000000000083B0                 db 'The sequence of numbers ends when the sum of the current number a'
.rodata:00000000000083B0                 db 'nd',0Ah
.rodata:00000000000083B0                 db 'INCREMENT would become greater than LAST.',0Ah
.rodata:00000000000083B0                 db 'FIRST, INCREMENT, and LAST are interpreted as floating point valu'
.rodata:00000000000083B0                 db 'es.',0Ah
.rodata:00000000000083B0                 db 'INCREMENT is usually positive if FIRST is smaller than LAST, and',0Ah
.rodata:00000000000083B0                 db 'INCREMENT is usually negative if FIRST is greater than LAST.',0Ah
.rodata:00000000000083B0                 db 'INCREMENT must not be 0; none of FIRST, INCREMENT and LAST may be'
.rodata:00000000000083B0                 db ' NaN.',0Ah,0
.rodata:00000000000085B1                 align 8
.rodata:00000000000085B8 ; const char aFormatMustBeSu[]
.rodata:00000000000085B8 aFormatMustBeSu db 'FORMAT must be suitable for printing one argument of type ',27h,'d'
.rodata:00000000000085B8                                         ; DATA XREF: usage+168↑o
.rodata:00000000000085B8                 db 'ouble',27h,';',0Ah
.rodata:00000000000085B8                 db 'it defaults to %.PRECf if FIRST, INCREMENT, and LAST are all fixe'
.rodata:00000000000085B8                 db 'd point',0Ah
.rodata:00000000000085B8                 db 'decimal numbers with maximum precision PREC, and to %g otherwise.'
.rodata:00000000000085B8                 db 0Ah,0
.rodata:0000000000008688 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000008688                                         ; DATA XREF: usage+25F↑o
.rodata:0000000000008688                                         ; usage+2C3↑o ...
.rodata:00000000000086B0 ; const char aReportAnyTrans[]
.rodata:00000000000086B0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000086B0                                         ; DATA XREF: usage+3B7↑o
.rodata:00000000000086B0                 db 'am/>',0Ah,0
.rodata:00000000000086F7                 align 8
.rodata:00000000000086F8 ; const char aOrAvailableLoc[]
.rodata:00000000000086F8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000086F8                                         ; DATA XREF: usage:loc_2D8E↑o
.rodata:000000000000872B                 align 10h
.rodata:0000000000008730 ; const char aInvalidFloatin[]
.rodata:0000000000008730 aInvalidFloatin db 'invalid floating point argument: %s',0
.rodata:0000000000008730                                         ; DATA XREF: scan_arg+322↑o
.rodata:0000000000008754                 align 8
.rodata:0000000000008758 ; const char aFormatSHasUnkn[]
.rodata:0000000000008758 aFormatSHasUnkn db 'format %s has unknown %%%c directive',0
.rodata:0000000000008758                                         ; DATA XREF: main+BE7↑o
.rodata:000000000000877D                 align 20h
.rodata:0000000000008780 ; const char aFormatSHasTooM[]
.rodata:0000000000008780 aFormatSHasTooM db 'format %s has too many %% directives',0
.rodata:0000000000008780                                         ; DATA XREF: main+BB5↑o
.rodata:00000000000087A5                 align 8
.rodata:00000000000087A8 ; const char aFormatStringMa[]
.rodata:00000000000087A8 aFormatStringMa db 'format string may not be specified when printing equal width stri'
.rodata:00000000000087A8                                         ; DATA XREF: main:loc_2472↑o
.rodata:00000000000087A8                 db 'ngs',0
.rodata:00000000000087ED                 align 10h
.rodata:00000000000087F0 aInvalidZeroInc db 'invalid Zero increment value: %s',0
.rodata:00000000000087F0                                         ; DATA XREF: main+B76↑o
.rodata:0000000000008811 ; const char terminator[]
.rodata:0000000000008811 terminator      db 0Ah,0                ; DATA XREF: main+500↑o
.rodata:0000000000008813 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000008813                                         ; main+720↑o ...
.rodata:0000000000008818 ; const char format[]
.rodata:0000000000008818 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000008818                                         ; close_stdout+8F↑o ...
.rodata:000000000000881F                 align 20h
.rodata:0000000000008820 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000008820                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000008858 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000008860 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000008864 unk_8864        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000008865                 db  80h
.rodata:0000000000008866                 db  98h
.rodata:0000000000008867                 db    0
.rodata:0000000000008868 unk_8868        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000008869                 db  80h
.rodata:000000000000886A                 db  99h
.rodata:000000000000886B                 db    0
.rodata:000000000000886C unk_886C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000886D                 db    7
.rodata:000000000000886E                 db  65h ; e
.rodata:000000000000886F                 db    0
.rodata:0000000000008870 unk_8870        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000008871                 db 0AFh
.rodata:0000000000008872                 db    0
.rodata:0000000000008873 unk_8873        db  22h ; "             ; DATA XREF: gettext_quote:loc_3420↑o
.rodata:0000000000008873                                         ; quotearg_buffer_restyled:loc_41DB↑o ...
.rodata:0000000000008874                 db    0
.rodata:0000000000008875 ; const char asc_8875[2]
.rodata:0000000000008875 asc_8875        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000008875                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000008877 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000887F aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020ABC8↓o
.rodata:0000000000008885 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020ABD0↓o
.rodata:0000000000008892 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020ABD8↓o
.rodata:0000000000008892                                         ; .data.rel.ro:000000000020ABF8↓o
.rodata:000000000000889F aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000889F                                         ; DATA XREF: .data.rel.ro:000000000020ABE0↓o
.rodata:00000000000088B3 aC              db 'c',0                ; DATA XREF: .data.rel.ro:000000000020ABE8↓o
.rodata:00000000000088B5 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020ABF0↓o
.rodata:00000000000088BD aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020AC08↓o
.rodata:00000000000088C5                 align 20h
.rodata:00000000000088E0 jpt_3581        dd offset loc_432A - 88E0h
.rodata:00000000000088E0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000088E0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000088E0                 dd offset loc_3583 - 88E0h ; jump table for switch statement
.rodata:00000000000088E0                 dd offset loc_4558 - 88E0h
.rodata:00000000000088E0                 dd offset loc_4364 - 88E0h
.rodata:00000000000088E0                 dd offset loc_4154 - 88E0h
.rodata:00000000000088E0                 dd offset loc_41B0 - 88E0h
.rodata:00000000000088E0                 dd offset loc_4205 - 88E0h
.rodata:00000000000088E0                 dd offset loc_424A - 88E0h
.rodata:00000000000088E0                 dd offset loc_4284 - 88E0h
.rodata:00000000000088E0                 dd offset loc_4284 - 88E0h
.rodata:00000000000088E0                 dd offset loc_4284 - 88E0h
.rodata:000000000000890C jpt_36DE        dd offset loc_3900 - 890Ch, offset def_36DE - 890Ch, offset def_36DE - 890Ch
.rodata:000000000000890C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000890C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset def_36DE - 890Ch, offset def_36DE - 890Ch ; jump table for switch statement
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset loc_3940 - 890Ch, offset loc_3848 - 890Ch
.rodata:000000000000890C                 dd offset loc_3808 - 890Ch, offset loc_39D0 - 890Ch, offset loc_39C0 - 890Ch
.rodata:000000000000890C                 dd offset loc_39B0 - 890Ch, offset loc_39A0 - 890Ch, offset def_36DE - 890Ch
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset def_36DE - 890Ch, offset def_36DE - 890Ch
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset def_36DE - 890Ch, offset def_36DE - 890Ch
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset def_36DE - 890Ch, offset def_36DE - 890Ch
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset def_36DE - 890Ch, offset def_36DE - 890Ch
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset def_36DE - 890Ch, offset def_36DE - 890Ch
.rodata:000000000000890C                 dd offset def_36DE - 890Ch, offset def_36DE - 890Ch, offset loc_3990 - 890Ch
.rodata:000000000000890C                 dd offset loc_3980 - 890Ch, offset loc_3980 - 890Ch, offset loc_3950 - 890Ch
.rodata:000000000000890C                 dd offset loc_3980 - 890Ch, offset loc_3928 - 890Ch, offset loc_3980 - 890Ch
.rodata:000000000000890C                 dd offset loc_37E3 - 890Ch, offset loc_3980 - 890Ch, offset loc_3980 - 890Ch
.rodata:000000000000890C                 dd offset loc_3980 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3980 - 890Ch
.rodata:000000000000890C                 dd offset loc_3980 - 890Ch, offset loc_3980 - 890Ch, offset loc_3980 - 890Ch
.rodata:000000000000890C                 dd offset loc_37B3 - 890Ch, offset def_36DE - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3980 - 890Ch, offset loc_3858 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3980 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3980 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_3928 - 890Ch, offset loc_3928 - 890Ch, offset loc_3928 - 890Ch
.rodata:000000000000890C                 dd offset loc_36E3 - 890Ch, offset loc_3980 - 890Ch, offset loc_36E3 - 890Ch
.rodata:000000000000890C                 dd offset loc_3950 - 890Ch
.rodata:0000000000008B08 jpt_3A6A        dd offset loc_3AD0 - 8B08h, offset def_3A6A - 8B08h, offset def_3A6A - 8B08h
.rodata:0000000000008B08                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000008B08                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset def_3A6A - 8B08h, offset def_3A6A - 8B08h ; jump table for switch statement
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset loc_3AC0 - 8B08h, offset loc_3C10 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3BF8 - 8B08h, offset loc_3AA8 - 8B08h, offset loc_3BE8 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3A90 - 8B08h, offset loc_3BD0 - 8B08h, offset def_3A6A - 8B08h
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset def_3A6A - 8B08h, offset def_3A6A - 8B08h
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset def_3A6A - 8B08h, offset def_3A6A - 8B08h
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset def_3A6A - 8B08h, offset def_3A6A - 8B08h
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset def_3A6A - 8B08h, offset def_3A6A - 8B08h
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset def_3A6A - 8B08h, offset def_3A6A - 8B08h
.rodata:0000000000008B08                 dd offset def_3A6A - 8B08h, offset def_3A6A - 8B08h, offset loc_3BB8 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3BA0 - 8B08h, offset loc_3BA0 - 8B08h, offset loc_3B88 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3BA0 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3BA0 - 8B08h
.rodata:0000000000008B08                 dd offset loc_37E0 - 8B08h, offset loc_3BA0 - 8B08h, offset loc_3BA0 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3BA0 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3BA0 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3BA0 - 8B08h, offset loc_3BA0 - 8B08h, offset loc_3BA0 - 8B08h
.rodata:0000000000008B08                 dd offset loc_37B0 - 8B08h, offset def_3A6A - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3BA0 - 8B08h, offset loc_3A70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3BA0 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3BA0 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h, offset loc_3B70 - 8B08h
.rodata:0000000000008B08                 dd offset loc_36E0 - 8B08h, offset loc_3BA0 - 8B08h, offset loc_36E0 - 8B08h
.rodata:0000000000008B08                 dd offset loc_3B88 - 8B08h
.rodata:0000000000008D04                 align 20h
.rodata:0000000000008D20                 public quoting_style_vals
.rodata:0000000000008D20 quoting_style_vals db    0
.rodata:0000000000008D21                 db    0
.rodata:0000000000008D22                 db    0
.rodata:0000000000008D23                 db    0
.rodata:0000000000008D24                 db    1
.rodata:0000000000008D25                 db    0
.rodata:0000000000008D26                 db    0
.rodata:0000000000008D27                 db    0
.rodata:0000000000008D28                 db    2
.rodata:0000000000008D29                 db    0
.rodata:0000000000008D2A                 db    0
.rodata:0000000000008D2B                 db    0
.rodata:0000000000008D2C                 db    3
.rodata:0000000000008D2D                 db    0
.rodata:0000000000008D2E                 db    0
.rodata:0000000000008D2F                 db    0
.rodata:0000000000008D30                 db    4
.rodata:0000000000008D31                 db    0
.rodata:0000000000008D32                 db    0
.rodata:0000000000008D33                 db    0
.rodata:0000000000008D34                 db    5
.rodata:0000000000008D35                 db    0
.rodata:0000000000008D36                 db    0
.rodata:0000000000008D37                 db    0
.rodata:0000000000008D38                 db    6
.rodata:0000000000008D39                 db    0
.rodata:0000000000008D3A                 db    0
.rodata:0000000000008D3B                 db    0
.rodata:0000000000008D3C                 db    7
.rodata:0000000000008D3D                 db    0
.rodata:0000000000008D3E                 db    0
.rodata:0000000000008D3F                 db    0
.rodata:0000000000008D40                 db    8
.rodata:0000000000008D41                 db    0
.rodata:0000000000008D42                 db    0
.rodata:0000000000008D43                 db    0
.rodata:0000000000008D44                 db    9
.rodata:0000000000008D45                 db    0
.rodata:0000000000008D46                 db    0
.rodata:0000000000008D47                 db    0
.rodata:0000000000008D48 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000008D54 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000008D5B ; const char aC_0[]
.rodata:0000000000008D5B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_50CC↑o
.rodata:0000000000008D5F ; const char aWrittenByS[]
.rodata:0000000000008D5F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000008D5F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000008D6F ; const char aWrittenBySAndS[]
.rodata:0000000000008D6F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000008D6F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000008D86 ; const char aWrittenBySSAnd[]
.rodata:0000000000008D86 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000008D86                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000008DA2 ; const char aReportBugsToS[]
.rodata:0000000000008DA2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000008DA2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000008DB7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000008DB7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000008DCD ; const char aSHomePageS[]
.rodata:0000000000008DCD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000008DCD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000008DE1                 align 8
.rodata:0000000000008DE8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000008DE8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000008DE8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000008DE8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000008DE8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000008DE8                 db '.',0Ah
.rodata:0000000000008DE8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000008DE8                 db 0Ah,0
.rodata:0000000000008EB4                 align 8
.rodata:0000000000008EB8 ; const char aWrittenBySSSAn[]
.rodata:0000000000008EB8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008EB8                                         ; DATA XREF: version_etc_arn:loc_5320↑o
.rodata:0000000000008EB8                 db 'and %s.',0Ah,0
.rodata:0000000000008ED8 ; const char aWrittenBySSSSA[]
.rodata:0000000000008ED8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008ED8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000008ED8                 db '%s, and %s.',0Ah,0
.rodata:0000000000008EFC                 align 20h
.rodata:0000000000008F00 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000008F00 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008F00                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000008F00                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000008F28 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000008F28 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008F28                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000008F28                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000008F54                 align 8
.rodata:0000000000008F58 ; const char aWrittenBySSSSS[]
.rodata:0000000000008F58 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008F58                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000008F58                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008F58                 db 'and %s.',0Ah,0
.rodata:0000000000008F88 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000008F88 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008F88                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000008F88                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008F88                 db '%s, and %s.',0Ah,0
.rodata:0000000000008FBC                 align 20h
.rodata:0000000000008FC0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008FC0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000008FC0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008FC0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000008FFC                 align 20h
.rodata:0000000000009000 ; const char aGeneralHelpUsi[]
.rodata:0000000000009000 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000009000                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000009000                 db 0
.rodata:0000000000009041                 align 8
.rodata:0000000000009048 jpt_5134        dd offset loc_51B6 - 9048h
.rodata:0000000000009048                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000009048                                         ; version_etc_arn+9D↑r
.rodata:0000000000009048                 dd offset loc_5248 - 9048h ; jump table for switch statement
.rodata:0000000000009048                 dd offset loc_5288 - 9048h
.rodata:0000000000009048                 dd offset loc_52D0 - 9048h
.rodata:0000000000009048                 dd offset loc_5320 - 9048h
.rodata:0000000000009048                 dd offset loc_5378 - 9048h
.rodata:0000000000009048                 dd offset loc_53A8 - 9048h
.rodata:0000000000009048                 dd offset loc_5410 - 9048h
.rodata:0000000000009048                 dd offset loc_5140 - 9048h
.rodata:0000000000009048                 dd offset loc_51F0 - 9048h
.rodata:0000000000009070                 align 20h
.rodata:0000000000009080                 public version_etc_copyright
.rodata:0000000000009080 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000009080                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000090AF ; const char aMemoryExhauste[]
.rodata:00000000000090AF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000090C0 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5D50↑o
.rodata:00000000000090C6 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000090C6                                         ; locale_charset:loc_5DA0↑o
.rodata:00000000000090CC jpt_642B        dd offset def_642B - 90CCh
.rodata:00000000000090CC                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:00000000000090CC                                         ; vasnprintf+554↑r
.rodata:00000000000090CC                 dd offset loc_6890 - 90CCh ; jump table for switch statement
.rodata:00000000000090CC                 dd offset loc_6860 - 90CCh
.rodata:00000000000090CC                 dd offset loc_67D8 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6798 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6568 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6568 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6430 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6430 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6430 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6430 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6718 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6690 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6568 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6568 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6430 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6430 - 90CCh
.rodata:00000000000090CC                 dd offset loc_6430 - 90CCh
.rodata:0000000000009114 jpt_69D0        dd offset loc_6C40 - 9114h
.rodata:0000000000009114                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000009114                                         ; vasnprintf+AF9↑r
.rodata:0000000000009114                 dd offset loc_6C60 - 9114h ; jump table for switch statement
.rodata:0000000000009114                 dd offset loc_6C50 - 9114h
.rodata:0000000000009114                 dd offset loc_6B10 - 9114h
.rodata:0000000000009114                 dd offset loc_6B10 - 9114h
.rodata:0000000000009128 aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:000000000000912F                 align 10h
.rodata:0000000000009130 jpt_7026        dd offset def_7026 - 9130h
.rodata:0000000000009130                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000009130                                         ; printf_fetchargs+2F↑r
.rodata:0000000000009130                 dd offset loc_70AC - 9130h ; jump table for switch statement
.rodata:0000000000009130                 dd offset loc_70AC - 9130h
.rodata:0000000000009130                 dd offset loc_70CE - 9130h
.rodata:0000000000009130                 dd offset loc_70CE - 9130h
.rodata:0000000000009130                 dd offset loc_708A - 9130h
.rodata:0000000000009130                 dd offset loc_708A - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7122 - 9130h
.rodata:0000000000009130                 dd offset loc_7030 - 9130h
.rodata:0000000000009130                 dd offset loc_708A - 9130h
.rodata:0000000000009130                 dd offset loc_708A - 9130h
.rodata:0000000000009130                 dd offset loc_70F4 - 9130h
.rodata:0000000000009130                 dd offset loc_7150 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:0000000000009130                 dd offset loc_7066 - 9130h
.rodata:000000000000918C                 align 10h
.rodata:0000000000009190 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000009191                 db    0
.rodata:0000000000009192                 db    0
.rodata:0000000000009193                 db    0
.rodata:0000000000009194                 db  4Eh ; N
.rodata:0000000000009195                 db    0
.rodata:0000000000009196                 db    0
.rodata:0000000000009197                 db    0
.rodata:0000000000009198                 db  55h ; U
.rodata:0000000000009199                 db    0
.rodata:000000000000919A                 db    0
.rodata:000000000000919B                 db    0
.rodata:000000000000919C                 db  4Ch ; L
.rodata:000000000000919D                 db    0
.rodata:000000000000919E                 db    0
.rodata:000000000000919F                 db    0
.rodata:00000000000091A0                 db  4Ch ; L
.rodata:00000000000091A1                 db    0
.rodata:00000000000091A2                 db    0
.rodata:00000000000091A3                 db    0
.rodata:00000000000091A4                 db  29h ; )
.rodata:00000000000091A5                 db    0
.rodata:00000000000091A6                 db    0
.rodata:00000000000091A7                 db    0
.rodata:00000000000091A8                 db    0
.rodata:00000000000091A9                 db    0
.rodata:00000000000091AA                 db    0
.rodata:00000000000091AB                 db    0
.rodata:00000000000091AC jpt_7435        dd offset loc_74AB - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                                         ; DATA XREF: printf_parse+234↑o
.rodata:00000000000091AC                                         ; printf_parse+23E↑r
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh ; jump table for switch statement
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset loc_79AB - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset loc_79CC - 91ACh, offset def_7435 - 91ACh, offset loc_79AB - 91ACh
.rodata:00000000000091AC                 dd offset loc_79AB - 91ACh, offset loc_79AB - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset loc_7437 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset loc_79DC - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset loc_79AB - 91ACh, offset def_7435 - 91ACh, offset loc_7938 - 91ACh
.rodata:00000000000091AC                 dd offset loc_794B - 91ACh, offset loc_79AB - 91ACh, offset loc_79AB - 91ACh
.rodata:00000000000091AC                 dd offset loc_79AB - 91ACh, offset def_7435 - 91ACh, offset loc_794B - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset loc_78EC - 91ACh, offset loc_79DC - 91ACh
.rodata:00000000000091AC                 dd offset loc_7A30 - 91ACh, offset def_7435 - 91ACh, offset def_7435 - 91ACh
.rodata:00000000000091AC                 dd offset loc_7998 - 91ACh, offset def_7435 - 91ACh, offset loc_79DC - 91ACh
.rodata:00000000000091AC                 dd offset def_7435 - 91ACh, offset def_7435 - 91ACh, offset loc_79DC - 91ACh
.rodata:00000000000091AC _rodata         ends
.rodata:00000000000091AC
.eh_frame_hdr:00000000000092FC ; ===========================================================================
.eh_frame_hdr:00000000000092FC
.eh_frame_hdr:00000000000092FC ; Segment type: Pure data
.eh_frame_hdr:00000000000092FC ; Segment permissions: Read
.eh_frame_hdr:00000000000092FC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000092FC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000092FC                 ;org 92FCh
.eh_frame_hdr:00000000000092FC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000092FD                 db  1Bh
.eh_frame_hdr:00000000000092FE                 db    3
.eh_frame_hdr:00000000000092FF                 db  3Bh ; ;
.eh_frame_hdr:0000000000009300                 db  98h
.eh_frame_hdr:0000000000009301                 db    2
.eh_frame_hdr:0000000000009302                 db    0
.eh_frame_hdr:0000000000009303                 db    0
.eh_frame_hdr:0000000000009304                 db  52h ; R
.eh_frame_hdr:0000000000009305                 db    0
.eh_frame_hdr:0000000000009306                 db    0
.eh_frame_hdr:0000000000009307                 db    0
.eh_frame_hdr:0000000000009308                 db  74h ; t
.eh_frame_hdr:0000000000009309                 db  82h
.eh_frame_hdr:000000000000930A                 db 0FFh
.eh_frame_hdr:000000000000930B                 db 0FFh
.eh_frame_hdr:000000000000930C                 db 0E4h
.eh_frame_hdr:000000000000930D                 db    2
.eh_frame_hdr:000000000000930E                 db    0
.eh_frame_hdr:000000000000930F                 db    0
.eh_frame_hdr:0000000000009310                 db 0E4h
.eh_frame_hdr:0000000000009311                 db  85h
.eh_frame_hdr:0000000000009312                 db 0FFh
.eh_frame_hdr:0000000000009313                 db 0FFh
.eh_frame_hdr:0000000000009314                 db  0Ch
.eh_frame_hdr:0000000000009315                 db    3
.eh_frame_hdr:0000000000009316                 db    0
.eh_frame_hdr:0000000000009317                 db    0
.eh_frame_hdr:0000000000009318                 db 0F4h
.eh_frame_hdr:0000000000009319                 db  85h
.eh_frame_hdr:000000000000931A                 db 0FFh
.eh_frame_hdr:000000000000931B                 db 0FFh
.eh_frame_hdr:000000000000931C                 db  34h ; 4
.eh_frame_hdr:000000000000931D                 db    4
.eh_frame_hdr:000000000000931E                 db    0
.eh_frame_hdr:000000000000931F                 db    0
.eh_frame_hdr:0000000000009320                 db  44h ; D
.eh_frame_hdr:0000000000009321                 db  92h
.eh_frame_hdr:0000000000009322                 db 0FFh
.eh_frame_hdr:0000000000009323                 db 0FFh
.eh_frame_hdr:0000000000009324                 db 0B4h
.eh_frame_hdr:0000000000009325                 db    2
.eh_frame_hdr:0000000000009326                 db    0
.eh_frame_hdr:0000000000009327                 db    0
.eh_frame_hdr:0000000000009328                 db  54h ; T
.eh_frame_hdr:0000000000009329                 db  93h
.eh_frame_hdr:000000000000932A                 db 0FFh
.eh_frame_hdr:000000000000932B                 db 0FFh
.eh_frame_hdr:000000000000932C                 db  24h ; $
.eh_frame_hdr:000000000000932D                 db    3
.eh_frame_hdr:000000000000932E                 db    0
.eh_frame_hdr:000000000000932F                 db    0
.eh_frame_hdr:0000000000009330                 db  94h
.eh_frame_hdr:0000000000009331                 db  93h
.eh_frame_hdr:0000000000009332                 db 0FFh
.eh_frame_hdr:0000000000009333                 db 0FFh
.eh_frame_hdr:0000000000009334                 db  50h ; P
.eh_frame_hdr:0000000000009335                 db    3
.eh_frame_hdr:0000000000009336                 db    0
.eh_frame_hdr:0000000000009337                 db    0
.eh_frame_hdr:0000000000009338                 db 0D4h
.eh_frame_hdr:0000000000009339                 db  93h
.eh_frame_hdr:000000000000933A                 db 0FFh
.eh_frame_hdr:000000000000933B                 db 0FFh
.eh_frame_hdr:000000000000933C                 db  68h ; h
.eh_frame_hdr:000000000000933D                 db    3
.eh_frame_hdr:000000000000933E                 db    0
.eh_frame_hdr:000000000000933F                 db    0
.eh_frame_hdr:0000000000009340                 db 0A4h
.eh_frame_hdr:0000000000009341                 db  97h
.eh_frame_hdr:0000000000009342                 db 0FFh
.eh_frame_hdr:0000000000009343                 db 0FFh
.eh_frame_hdr:0000000000009344                 db 0B8h
.eh_frame_hdr:0000000000009345                 db    3
.eh_frame_hdr:0000000000009346                 db    0
.eh_frame_hdr:0000000000009347                 db    0
.eh_frame_hdr:0000000000009348                 db  84h
.eh_frame_hdr:0000000000009349                 db  9Bh
.eh_frame_hdr:000000000000934A                 db 0FFh
.eh_frame_hdr:000000000000934B                 db 0FFh
.eh_frame_hdr:000000000000934C                 db 0E4h
.eh_frame_hdr:000000000000934D                 db    3
.eh_frame_hdr:000000000000934E                 db    0
.eh_frame_hdr:000000000000934F                 db    0
.eh_frame_hdr:0000000000009350                 db 0E4h
.eh_frame_hdr:0000000000009351                 db  9Eh
.eh_frame_hdr:0000000000009352                 db 0FFh
.eh_frame_hdr:0000000000009353                 db 0FFh
.eh_frame_hdr:0000000000009354                 db 0DCh
.eh_frame_hdr:0000000000009355                 db    4
.eh_frame_hdr:0000000000009356                 db    0
.eh_frame_hdr:0000000000009357                 db    0
.eh_frame_hdr:0000000000009358                 db  94h
.eh_frame_hdr:0000000000009359                 db  9Fh
.eh_frame_hdr:000000000000935A                 db 0FFh
.eh_frame_hdr:000000000000935B                 db 0FFh
.eh_frame_hdr:000000000000935C                 db  1Ch
.eh_frame_hdr:000000000000935D                 db    5
.eh_frame_hdr:000000000000935E                 db    0
.eh_frame_hdr:000000000000935F                 db    0
.eh_frame_hdr:0000000000009360                 db 0A4h
.eh_frame_hdr:0000000000009361                 db  9Fh
.eh_frame_hdr:0000000000009362                 db 0FFh
.eh_frame_hdr:0000000000009363                 db 0FFh
.eh_frame_hdr:0000000000009364                 db  30h ; 0
.eh_frame_hdr:0000000000009365                 db    5
.eh_frame_hdr:0000000000009366                 db    0
.eh_frame_hdr:0000000000009367                 db    0
.eh_frame_hdr:0000000000009368                 db 0B4h
.eh_frame_hdr:0000000000009369                 db  9Fh
.eh_frame_hdr:000000000000936A                 db 0FFh
.eh_frame_hdr:000000000000936B                 db 0FFh
.eh_frame_hdr:000000000000936C                 db  44h ; D
.eh_frame_hdr:000000000000936D                 db    5
.eh_frame_hdr:000000000000936E                 db    0
.eh_frame_hdr:000000000000936F                 db    0
.eh_frame_hdr:0000000000009370                 db  64h ; d
.eh_frame_hdr:0000000000009371                 db 0A0h
.eh_frame_hdr:0000000000009372                 db 0FFh
.eh_frame_hdr:0000000000009373                 db 0FFh
.eh_frame_hdr:0000000000009374                 db  74h ; t
.eh_frame_hdr:0000000000009375                 db    5
.eh_frame_hdr:0000000000009376                 db    0
.eh_frame_hdr:0000000000009377                 db    0
.eh_frame_hdr:0000000000009378                 db    4
.eh_frame_hdr:0000000000009379                 db 0A1h
.eh_frame_hdr:000000000000937A                 db 0FFh
.eh_frame_hdr:000000000000937B                 db 0FFh
.eh_frame_hdr:000000000000937C                 db  94h
.eh_frame_hdr:000000000000937D                 db    5
.eh_frame_hdr:000000000000937E                 db    0
.eh_frame_hdr:000000000000937F                 db    0
.eh_frame_hdr:0000000000009380                 db 0F4h
.eh_frame_hdr:0000000000009381                 db 0A1h
.eh_frame_hdr:0000000000009382                 db 0FFh
.eh_frame_hdr:0000000000009383                 db 0FFh
.eh_frame_hdr:0000000000009384                 db 0D8h
.eh_frame_hdr:0000000000009385                 db    5
.eh_frame_hdr:0000000000009386                 db    0
.eh_frame_hdr:0000000000009387                 db    0
.eh_frame_hdr:0000000000009388                 db  34h ; 4
.eh_frame_hdr:0000000000009389                 db 0B4h
.eh_frame_hdr:000000000000938A                 db 0FFh
.eh_frame_hdr:000000000000938B                 db 0FFh
.eh_frame_hdr:000000000000938C                 db  50h ; P
.eh_frame_hdr:000000000000938D                 db    6
.eh_frame_hdr:000000000000938E                 db    0
.eh_frame_hdr:000000000000938F                 db    0
.eh_frame_hdr:0000000000009390                 db 0E4h
.eh_frame_hdr:0000000000009391                 db 0B5h
.eh_frame_hdr:0000000000009392                 db 0FFh
.eh_frame_hdr:0000000000009393                 db 0FFh
.eh_frame_hdr:0000000000009394                 db 0BCh
.eh_frame_hdr:0000000000009395                 db    6
.eh_frame_hdr:0000000000009396                 db    0
.eh_frame_hdr:0000000000009397                 db    0
.eh_frame_hdr:0000000000009398                 db  24h ; $
.eh_frame_hdr:0000000000009399                 db 0B6h
.eh_frame_hdr:000000000000939A                 db 0FFh
.eh_frame_hdr:000000000000939B                 db 0FFh
.eh_frame_hdr:000000000000939C                 db 0E8h
.eh_frame_hdr:000000000000939D                 db    6
.eh_frame_hdr:000000000000939E                 db    0
.eh_frame_hdr:000000000000939F                 db    0
.eh_frame_hdr:00000000000093A0                 db  44h ; D
.eh_frame_hdr:00000000000093A1                 db 0B6h
.eh_frame_hdr:00000000000093A2                 db 0FFh
.eh_frame_hdr:00000000000093A3                 db 0FFh
.eh_frame_hdr:00000000000093A4                 db 0FCh
.eh_frame_hdr:00000000000093A5                 db    6
.eh_frame_hdr:00000000000093A6                 db    0
.eh_frame_hdr:00000000000093A7                 db    0
.eh_frame_hdr:00000000000093A8                 db  64h ; d
.eh_frame_hdr:00000000000093A9                 db 0B6h
.eh_frame_hdr:00000000000093AA                 db 0FFh
.eh_frame_hdr:00000000000093AB                 db 0FFh
.eh_frame_hdr:00000000000093AC                 db  10h
.eh_frame_hdr:00000000000093AD                 db    7
.eh_frame_hdr:00000000000093AE                 db    0
.eh_frame_hdr:00000000000093AF                 db    0
.eh_frame_hdr:00000000000093B0                 db 0A4h
.eh_frame_hdr:00000000000093B1                 db 0B6h
.eh_frame_hdr:00000000000093B2                 db 0FFh
.eh_frame_hdr:00000000000093B3                 db 0FFh
.eh_frame_hdr:00000000000093B4                 db  24h ; $
.eh_frame_hdr:00000000000093B5                 db    7
.eh_frame_hdr:00000000000093B6                 db    0
.eh_frame_hdr:00000000000093B7                 db    0
.eh_frame_hdr:00000000000093B8                 db 0C4h
.eh_frame_hdr:00000000000093B9                 db 0B6h
.eh_frame_hdr:00000000000093BA                 db 0FFh
.eh_frame_hdr:00000000000093BB                 db 0FFh
.eh_frame_hdr:00000000000093BC                 db  38h ; 8
.eh_frame_hdr:00000000000093BD                 db    7
.eh_frame_hdr:00000000000093BE                 db    0
.eh_frame_hdr:00000000000093BF                 db    0
.eh_frame_hdr:00000000000093C0                 db 0F4h
.eh_frame_hdr:00000000000093C1                 db 0B6h
.eh_frame_hdr:00000000000093C2                 db 0FFh
.eh_frame_hdr:00000000000093C3                 db 0FFh
.eh_frame_hdr:00000000000093C4                 db  4Ch ; L
.eh_frame_hdr:00000000000093C5                 db    7
.eh_frame_hdr:00000000000093C6                 db    0
.eh_frame_hdr:00000000000093C7                 db    0
.eh_frame_hdr:00000000000093C8                 db  74h ; t
.eh_frame_hdr:00000000000093C9                 db 0B7h
.eh_frame_hdr:00000000000093CA                 db 0FFh
.eh_frame_hdr:00000000000093CB                 db 0FFh
.eh_frame_hdr:00000000000093CC                 db 0A0h
.eh_frame_hdr:00000000000093CD                 db    7
.eh_frame_hdr:00000000000093CE                 db    0
.eh_frame_hdr:00000000000093CF                 db    0
.eh_frame_hdr:00000000000093D0                 db  64h ; d
.eh_frame_hdr:00000000000093D1                 db 0B8h
.eh_frame_hdr:00000000000093D2                 db 0FFh
.eh_frame_hdr:00000000000093D3                 db 0FFh
.eh_frame_hdr:00000000000093D4                 db  0Ch
.eh_frame_hdr:00000000000093D5                 db    8
.eh_frame_hdr:00000000000093D6                 db    0
.eh_frame_hdr:00000000000093D7                 db    0
.eh_frame_hdr:00000000000093D8                 db  74h ; t
.eh_frame_hdr:00000000000093D9                 db 0B8h
.eh_frame_hdr:00000000000093DA                 db 0FFh
.eh_frame_hdr:00000000000093DB                 db 0FFh
.eh_frame_hdr:00000000000093DC                 db  20h
.eh_frame_hdr:00000000000093DD                 db    8
.eh_frame_hdr:00000000000093DE                 db    0
.eh_frame_hdr:00000000000093DF                 db    0
.eh_frame_hdr:00000000000093E0                 db  14h
.eh_frame_hdr:00000000000093E1                 db 0B9h
.eh_frame_hdr:00000000000093E2                 db 0FFh
.eh_frame_hdr:00000000000093E3                 db 0FFh
.eh_frame_hdr:00000000000093E4                 db  4Ch ; L
.eh_frame_hdr:00000000000093E5                 db    8
.eh_frame_hdr:00000000000093E6                 db    0
.eh_frame_hdr:00000000000093E7                 db    0
.eh_frame_hdr:00000000000093E8                 db  34h ; 4
.eh_frame_hdr:00000000000093E9                 db 0B9h
.eh_frame_hdr:00000000000093EA                 db 0FFh
.eh_frame_hdr:00000000000093EB                 db 0FFh
.eh_frame_hdr:00000000000093EC                 db  60h ; `
.eh_frame_hdr:00000000000093ED                 db    8
.eh_frame_hdr:00000000000093EE                 db    0
.eh_frame_hdr:00000000000093EF                 db    0
.eh_frame_hdr:00000000000093F0                 db  44h ; D
.eh_frame_hdr:00000000000093F1                 db 0B9h
.eh_frame_hdr:00000000000093F2                 db 0FFh
.eh_frame_hdr:00000000000093F3                 db 0FFh
.eh_frame_hdr:00000000000093F4                 db  74h ; t
.eh_frame_hdr:00000000000093F5                 db    8
.eh_frame_hdr:00000000000093F6                 db    0
.eh_frame_hdr:00000000000093F7                 db    0
.eh_frame_hdr:00000000000093F8                 db  64h ; d
.eh_frame_hdr:00000000000093F9                 db 0B9h
.eh_frame_hdr:00000000000093FA                 db 0FFh
.eh_frame_hdr:00000000000093FB                 db 0FFh
.eh_frame_hdr:00000000000093FC                 db  88h
.eh_frame_hdr:00000000000093FD                 db    8
.eh_frame_hdr:00000000000093FE                 db    0
.eh_frame_hdr:00000000000093FF                 db    0
.eh_frame_hdr:0000000000009400                 db  84h
.eh_frame_hdr:0000000000009401                 db 0B9h
.eh_frame_hdr:0000000000009402                 db 0FFh
.eh_frame_hdr:0000000000009403                 db 0FFh
.eh_frame_hdr:0000000000009404                 db  9Ch
.eh_frame_hdr:0000000000009405                 db    8
.eh_frame_hdr:0000000000009406                 db    0
.eh_frame_hdr:0000000000009407                 db    0
.eh_frame_hdr:0000000000009408                 db  14h
.eh_frame_hdr:0000000000009409                 db 0BAh
.eh_frame_hdr:000000000000940A                 db 0FFh
.eh_frame_hdr:000000000000940B                 db 0FFh
.eh_frame_hdr:000000000000940C                 db 0B8h
.eh_frame_hdr:000000000000940D                 db    8
.eh_frame_hdr:000000000000940E                 db    0
.eh_frame_hdr:000000000000940F                 db    0
.eh_frame_hdr:0000000000009410                 db 0A4h
.eh_frame_hdr:0000000000009411                 db 0BAh
.eh_frame_hdr:0000000000009412                 db 0FFh
.eh_frame_hdr:0000000000009413                 db 0FFh
.eh_frame_hdr:0000000000009414                 db 0D4h
.eh_frame_hdr:0000000000009415                 db    8
.eh_frame_hdr:0000000000009416                 db    0
.eh_frame_hdr:0000000000009417                 db    0
.eh_frame_hdr:0000000000009418                 db 0B4h
.eh_frame_hdr:0000000000009419                 db 0BAh
.eh_frame_hdr:000000000000941A                 db 0FFh
.eh_frame_hdr:000000000000941B                 db 0FFh
.eh_frame_hdr:000000000000941C                 db 0E8h
.eh_frame_hdr:000000000000941D                 db    8
.eh_frame_hdr:000000000000941E                 db    0
.eh_frame_hdr:000000000000941F                 db    0
.eh_frame_hdr:0000000000009420                 db 0C4h
.eh_frame_hdr:0000000000009421                 db 0BAh
.eh_frame_hdr:0000000000009422                 db 0FFh
.eh_frame_hdr:0000000000009423                 db 0FFh
.eh_frame_hdr:0000000000009424                 db 0FCh
.eh_frame_hdr:0000000000009425                 db    8
.eh_frame_hdr:0000000000009426                 db    0
.eh_frame_hdr:0000000000009427                 db    0
.eh_frame_hdr:0000000000009428                 db  64h ; d
.eh_frame_hdr:0000000000009429                 db 0BBh
.eh_frame_hdr:000000000000942A                 db 0FFh
.eh_frame_hdr:000000000000942B                 db 0FFh
.eh_frame_hdr:000000000000942C                 db  18h
.eh_frame_hdr:000000000000942D                 db    9
.eh_frame_hdr:000000000000942E                 db    0
.eh_frame_hdr:000000000000942F                 db    0
.eh_frame_hdr:0000000000009430                 db  74h ; t
.eh_frame_hdr:0000000000009431                 db 0BBh
.eh_frame_hdr:0000000000009432                 db 0FFh
.eh_frame_hdr:0000000000009433                 db 0FFh
.eh_frame_hdr:0000000000009434                 db  2Ch ; ,
.eh_frame_hdr:0000000000009435                 db    9
.eh_frame_hdr:0000000000009436                 db    0
.eh_frame_hdr:0000000000009437                 db    0
.eh_frame_hdr:0000000000009438                 db  94h
.eh_frame_hdr:0000000000009439                 db 0BBh
.eh_frame_hdr:000000000000943A                 db 0FFh
.eh_frame_hdr:000000000000943B                 db 0FFh
.eh_frame_hdr:000000000000943C                 db  40h ; @
.eh_frame_hdr:000000000000943D                 db    9
.eh_frame_hdr:000000000000943E                 db    0
.eh_frame_hdr:000000000000943F                 db    0
.eh_frame_hdr:0000000000009440                 db 0A4h
.eh_frame_hdr:0000000000009441                 db 0BBh
.eh_frame_hdr:0000000000009442                 db 0FFh
.eh_frame_hdr:0000000000009443                 db 0FFh
.eh_frame_hdr:0000000000009444                 db  54h ; T
.eh_frame_hdr:0000000000009445                 db    9
.eh_frame_hdr:0000000000009446                 db    0
.eh_frame_hdr:0000000000009447                 db    0
.eh_frame_hdr:0000000000009448                 db  34h ; 4
.eh_frame_hdr:0000000000009449                 db 0BCh
.eh_frame_hdr:000000000000944A                 db 0FFh
.eh_frame_hdr:000000000000944B                 db 0FFh
.eh_frame_hdr:000000000000944C                 db  70h ; p
.eh_frame_hdr:000000000000944D                 db    9
.eh_frame_hdr:000000000000944E                 db    0
.eh_frame_hdr:000000000000944F                 db    0
.eh_frame_hdr:0000000000009450                 db 0D4h
.eh_frame_hdr:0000000000009451                 db 0BCh
.eh_frame_hdr:0000000000009452                 db 0FFh
.eh_frame_hdr:0000000000009453                 db 0FFh
.eh_frame_hdr:0000000000009454                 db  8Ch
.eh_frame_hdr:0000000000009455                 db    9
.eh_frame_hdr:0000000000009456                 db    0
.eh_frame_hdr:0000000000009457                 db    0
.eh_frame_hdr:0000000000009458                 db 0E4h
.eh_frame_hdr:0000000000009459                 db 0BCh
.eh_frame_hdr:000000000000945A                 db 0FFh
.eh_frame_hdr:000000000000945B                 db 0FFh
.eh_frame_hdr:000000000000945C                 db 0A0h
.eh_frame_hdr:000000000000945D                 db    9
.eh_frame_hdr:000000000000945E                 db    0
.eh_frame_hdr:000000000000945F                 db    0
.eh_frame_hdr:0000000000009460                 db    4
.eh_frame_hdr:0000000000009461                 db 0BDh
.eh_frame_hdr:0000000000009462                 db 0FFh
.eh_frame_hdr:0000000000009463                 db 0FFh
.eh_frame_hdr:0000000000009464                 db 0B4h
.eh_frame_hdr:0000000000009465                 db    9
.eh_frame_hdr:0000000000009466                 db    0
.eh_frame_hdr:0000000000009467                 db    0
.eh_frame_hdr:0000000000009468                 db  24h ; $
.eh_frame_hdr:0000000000009469                 db 0BDh
.eh_frame_hdr:000000000000946A                 db 0FFh
.eh_frame_hdr:000000000000946B                 db 0FFh
.eh_frame_hdr:000000000000946C                 db 0C8h
.eh_frame_hdr:000000000000946D                 db    9
.eh_frame_hdr:000000000000946E                 db    0
.eh_frame_hdr:000000000000946F                 db    0
.eh_frame_hdr:0000000000009470                 db  34h ; 4
.eh_frame_hdr:0000000000009471                 db 0BDh
.eh_frame_hdr:0000000000009472                 db 0FFh
.eh_frame_hdr:0000000000009473                 db 0FFh
.eh_frame_hdr:0000000000009474                 db 0DCh
.eh_frame_hdr:0000000000009475                 db    9
.eh_frame_hdr:0000000000009476                 db    0
.eh_frame_hdr:0000000000009477                 db    0
.eh_frame_hdr:0000000000009478                 db  54h ; T
.eh_frame_hdr:0000000000009479                 db 0BDh
.eh_frame_hdr:000000000000947A                 db 0FFh
.eh_frame_hdr:000000000000947B                 db 0FFh
.eh_frame_hdr:000000000000947C                 db 0F0h
.eh_frame_hdr:000000000000947D                 db    9
.eh_frame_hdr:000000000000947E                 db    0
.eh_frame_hdr:000000000000947F                 db    0
.eh_frame_hdr:0000000000009480                 db  74h ; t
.eh_frame_hdr:0000000000009481                 db 0BDh
.eh_frame_hdr:0000000000009482                 db 0FFh
.eh_frame_hdr:0000000000009483                 db 0FFh
.eh_frame_hdr:0000000000009484                 db    4
.eh_frame_hdr:0000000000009485                 db  0Ah
.eh_frame_hdr:0000000000009486                 db    0
.eh_frame_hdr:0000000000009487                 db    0
.eh_frame_hdr:0000000000009488                 db  94h
.eh_frame_hdr:0000000000009489                 db 0BDh
.eh_frame_hdr:000000000000948A                 db 0FFh
.eh_frame_hdr:000000000000948B                 db 0FFh
.eh_frame_hdr:000000000000948C                 db  1Ch
.eh_frame_hdr:000000000000948D                 db  0Ah
.eh_frame_hdr:000000000000948E                 db    0
.eh_frame_hdr:000000000000948F                 db    0
.eh_frame_hdr:0000000000009490                 db 0B4h
.eh_frame_hdr:0000000000009491                 db 0C1h
.eh_frame_hdr:0000000000009492                 db 0FFh
.eh_frame_hdr:0000000000009493                 db 0FFh
.eh_frame_hdr:0000000000009494                 db  30h ; 0
.eh_frame_hdr:0000000000009495                 db  0Bh
.eh_frame_hdr:0000000000009496                 db    0
.eh_frame_hdr:0000000000009497                 db    0
.eh_frame_hdr:0000000000009498                 db 0D4h
.eh_frame_hdr:0000000000009499                 db 0C1h
.eh_frame_hdr:000000000000949A                 db 0FFh
.eh_frame_hdr:000000000000949B                 db 0FFh
.eh_frame_hdr:000000000000949C                 db  44h ; D
.eh_frame_hdr:000000000000949D                 db  0Bh
.eh_frame_hdr:000000000000949E                 db    0
.eh_frame_hdr:000000000000949F                 db    0
.eh_frame_hdr:00000000000094A0                 db  54h ; T
.eh_frame_hdr:00000000000094A1                 db 0C2h
.eh_frame_hdr:00000000000094A2                 db 0FFh
.eh_frame_hdr:00000000000094A3                 db 0FFh
.eh_frame_hdr:00000000000094A4                 db  60h ; `
.eh_frame_hdr:00000000000094A5                 db  0Bh
.eh_frame_hdr:00000000000094A6                 db    0
.eh_frame_hdr:00000000000094A7                 db    0
.eh_frame_hdr:00000000000094A8                 db  34h ; 4
.eh_frame_hdr:00000000000094A9                 db 0C3h
.eh_frame_hdr:00000000000094AA                 db 0FFh
.eh_frame_hdr:00000000000094AB                 db 0FFh
.eh_frame_hdr:00000000000094AC                 db  8Ch
.eh_frame_hdr:00000000000094AD                 db  0Bh
.eh_frame_hdr:00000000000094AE                 db    0
.eh_frame_hdr:00000000000094AF                 db    0
.eh_frame_hdr:00000000000094B0                 db 0B4h
.eh_frame_hdr:00000000000094B1                 db 0C3h
.eh_frame_hdr:00000000000094B2                 db 0FFh
.eh_frame_hdr:00000000000094B3                 db 0FFh
.eh_frame_hdr:00000000000094B4                 db 0ACh
.eh_frame_hdr:00000000000094B5                 db  0Bh
.eh_frame_hdr:00000000000094B6                 db    0
.eh_frame_hdr:00000000000094B7                 db    0
.eh_frame_hdr:00000000000094B8                 db 0D4h
.eh_frame_hdr:00000000000094B9                 db 0C3h
.eh_frame_hdr:00000000000094BA                 db 0FFh
.eh_frame_hdr:00000000000094BB                 db 0FFh
.eh_frame_hdr:00000000000094BC                 db 0C8h
.eh_frame_hdr:00000000000094BD                 db  0Bh
.eh_frame_hdr:00000000000094BE                 db    0
.eh_frame_hdr:00000000000094BF                 db    0
.eh_frame_hdr:00000000000094C0                 db    4
.eh_frame_hdr:00000000000094C1                 db 0C4h
.eh_frame_hdr:00000000000094C2                 db 0FFh
.eh_frame_hdr:00000000000094C3                 db 0FFh
.eh_frame_hdr:00000000000094C4                 db 0DCh
.eh_frame_hdr:00000000000094C5                 db  0Bh
.eh_frame_hdr:00000000000094C6                 db    0
.eh_frame_hdr:00000000000094C7                 db    0
.eh_frame_hdr:00000000000094C8                 db  14h
.eh_frame_hdr:00000000000094C9                 db 0C4h
.eh_frame_hdr:00000000000094CA                 db 0FFh
.eh_frame_hdr:00000000000094CB                 db 0FFh
.eh_frame_hdr:00000000000094CC                 db 0F0h
.eh_frame_hdr:00000000000094CD                 db  0Bh
.eh_frame_hdr:00000000000094CE                 db    0
.eh_frame_hdr:00000000000094CF                 db    0
.eh_frame_hdr:00000000000094D0                 db  54h ; T
.eh_frame_hdr:00000000000094D1                 db 0C4h
.eh_frame_hdr:00000000000094D2                 db 0FFh
.eh_frame_hdr:00000000000094D3                 db 0FFh
.eh_frame_hdr:00000000000094D4                 db  14h
.eh_frame_hdr:00000000000094D5                 db  0Ch
.eh_frame_hdr:00000000000094D6                 db    0
.eh_frame_hdr:00000000000094D7                 db    0
.eh_frame_hdr:00000000000094D8                 db  84h
.eh_frame_hdr:00000000000094D9                 db 0C4h
.eh_frame_hdr:00000000000094DA                 db 0FFh
.eh_frame_hdr:00000000000094DB                 db 0FFh
.eh_frame_hdr:00000000000094DC                 db  28h ; (
.eh_frame_hdr:00000000000094DD                 db  0Ch
.eh_frame_hdr:00000000000094DE                 db    0
.eh_frame_hdr:00000000000094DF                 db    0
.eh_frame_hdr:00000000000094E0                 db  14h
.eh_frame_hdr:00000000000094E1                 db 0C5h
.eh_frame_hdr:00000000000094E2                 db 0FFh
.eh_frame_hdr:00000000000094E3                 db 0FFh
.eh_frame_hdr:00000000000094E4                 db  40h ; @
.eh_frame_hdr:00000000000094E5                 db  0Ch
.eh_frame_hdr:00000000000094E6                 db    0
.eh_frame_hdr:00000000000094E7                 db    0
.eh_frame_hdr:00000000000094E8                 db  64h ; d
.eh_frame_hdr:00000000000094E9                 db 0C5h
.eh_frame_hdr:00000000000094EA                 db 0FFh
.eh_frame_hdr:00000000000094EB                 db 0FFh
.eh_frame_hdr:00000000000094EC                 db  58h ; X
.eh_frame_hdr:00000000000094ED                 db  0Ch
.eh_frame_hdr:00000000000094EE                 db    0
.eh_frame_hdr:00000000000094EF                 db    0
.eh_frame_hdr:00000000000094F0                 db  84h
.eh_frame_hdr:00000000000094F1                 db 0C5h
.eh_frame_hdr:00000000000094F2                 db 0FFh
.eh_frame_hdr:00000000000094F3                 db 0FFh
.eh_frame_hdr:00000000000094F4                 db  74h ; t
.eh_frame_hdr:00000000000094F5                 db  0Ch
.eh_frame_hdr:00000000000094F6                 db    0
.eh_frame_hdr:00000000000094F7                 db    0
.eh_frame_hdr:00000000000094F8                 db 0B4h
.eh_frame_hdr:00000000000094F9                 db 0C5h
.eh_frame_hdr:00000000000094FA                 db 0FFh
.eh_frame_hdr:00000000000094FB                 db 0FFh
.eh_frame_hdr:00000000000094FC                 db  90h
.eh_frame_hdr:00000000000094FD                 db  0Ch
.eh_frame_hdr:00000000000094FE                 db    0
.eh_frame_hdr:00000000000094FF                 db    0
.eh_frame_hdr:0000000000009500                 db 0E4h
.eh_frame_hdr:0000000000009501                 db 0C5h
.eh_frame_hdr:0000000000009502                 db 0FFh
.eh_frame_hdr:0000000000009503                 db 0FFh
.eh_frame_hdr:0000000000009504                 db 0B8h
.eh_frame_hdr:0000000000009505                 db  0Ch
.eh_frame_hdr:0000000000009506                 db    0
.eh_frame_hdr:0000000000009507                 db    0
.eh_frame_hdr:0000000000009508                 db    4
.eh_frame_hdr:0000000000009509                 db 0C6h
.eh_frame_hdr:000000000000950A                 db 0FFh
.eh_frame_hdr:000000000000950B                 db 0FFh
.eh_frame_hdr:000000000000950C                 db 0D4h
.eh_frame_hdr:000000000000950D                 db  0Ch
.eh_frame_hdr:000000000000950E                 db    0
.eh_frame_hdr:000000000000950F                 db    0
.eh_frame_hdr:0000000000009510                 db  44h ; D
.eh_frame_hdr:0000000000009511                 db 0C6h
.eh_frame_hdr:0000000000009512                 db 0FFh
.eh_frame_hdr:0000000000009513                 db 0FFh
.eh_frame_hdr:0000000000009514                 db 0ECh
.eh_frame_hdr:0000000000009515                 db  0Ch
.eh_frame_hdr:0000000000009516                 db    0
.eh_frame_hdr:0000000000009517                 db    0
.eh_frame_hdr:0000000000009518                 db    4
.eh_frame_hdr:0000000000009519                 db 0C7h
.eh_frame_hdr:000000000000951A                 db 0FFh
.eh_frame_hdr:000000000000951B                 db 0FFh
.eh_frame_hdr:000000000000951C                 db  34h ; 4
.eh_frame_hdr:000000000000951D                 db  0Dh
.eh_frame_hdr:000000000000951E                 db    0
.eh_frame_hdr:000000000000951F                 db    0
.eh_frame_hdr:0000000000009520                 db 0C4h
.eh_frame_hdr:0000000000009521                 db 0C7h
.eh_frame_hdr:0000000000009522                 db 0FFh
.eh_frame_hdr:0000000000009523                 db 0FFh
.eh_frame_hdr:0000000000009524                 db  54h ; T
.eh_frame_hdr:0000000000009525                 db  0Dh
.eh_frame_hdr:0000000000009526                 db    0
.eh_frame_hdr:0000000000009527                 db    0
.eh_frame_hdr:0000000000009528                 db  54h ; T
.eh_frame_hdr:0000000000009529                 db 0C8h
.eh_frame_hdr:000000000000952A                 db 0FFh
.eh_frame_hdr:000000000000952B                 db 0FFh
.eh_frame_hdr:000000000000952C                 db  94h
.eh_frame_hdr:000000000000952D                 db  0Dh
.eh_frame_hdr:000000000000952E                 db    0
.eh_frame_hdr:000000000000952F                 db    0
.eh_frame_hdr:0000000000009530                 db 0D4h
.eh_frame_hdr:0000000000009531                 db 0C8h
.eh_frame_hdr:0000000000009532                 db 0FFh
.eh_frame_hdr:0000000000009533                 db 0FFh
.eh_frame_hdr:0000000000009534                 db 0BCh
.eh_frame_hdr:0000000000009535                 db  0Dh
.eh_frame_hdr:0000000000009536                 db    0
.eh_frame_hdr:0000000000009537                 db    0
.eh_frame_hdr:0000000000009538                 db  94h
.eh_frame_hdr:0000000000009539                 db 0C9h
.eh_frame_hdr:000000000000953A                 db 0FFh
.eh_frame_hdr:000000000000953B                 db 0FFh
.eh_frame_hdr:000000000000953C                 db  14h
.eh_frame_hdr:000000000000953D                 db  0Eh
.eh_frame_hdr:000000000000953E                 db    0
.eh_frame_hdr:000000000000953F                 db    0
.eh_frame_hdr:0000000000009540                 db  14h
.eh_frame_hdr:0000000000009541                 db 0CAh
.eh_frame_hdr:0000000000009542                 db 0FFh
.eh_frame_hdr:0000000000009543                 db 0FFh
.eh_frame_hdr:0000000000009544                 db  64h ; d
.eh_frame_hdr:0000000000009545                 db  0Eh
.eh_frame_hdr:0000000000009546                 db    0
.eh_frame_hdr:0000000000009547                 db    0
.eh_frame_hdr:0000000000009548                 db  74h ; t
.eh_frame_hdr:0000000000009549                 db 0CAh
.eh_frame_hdr:000000000000954A                 db 0FFh
.eh_frame_hdr:000000000000954B                 db 0FFh
.eh_frame_hdr:000000000000954C                 db  84h
.eh_frame_hdr:000000000000954D                 db  0Eh
.eh_frame_hdr:000000000000954E                 db    0
.eh_frame_hdr:000000000000954F                 db    0
.eh_frame_hdr:0000000000009550                 db 0B4h
.eh_frame_hdr:0000000000009551                 db 0CAh
.eh_frame_hdr:0000000000009552                 db 0FFh
.eh_frame_hdr:0000000000009553                 db 0FFh
.eh_frame_hdr:0000000000009554                 db 0A4h
.eh_frame_hdr:0000000000009555                 db  0Eh
.eh_frame_hdr:0000000000009556                 db    0
.eh_frame_hdr:0000000000009557                 db    0
.eh_frame_hdr:0000000000009558                 db  34h ; 4
.eh_frame_hdr:0000000000009559                 db 0CBh
.eh_frame_hdr:000000000000955A                 db 0FFh
.eh_frame_hdr:000000000000955B                 db 0FFh
.eh_frame_hdr:000000000000955C                 db 0DCh
.eh_frame_hdr:000000000000955D                 db  0Eh
.eh_frame_hdr:000000000000955E                 db    0
.eh_frame_hdr:000000000000955F                 db    0
.eh_frame_hdr:0000000000009560                 db  74h ; t
.eh_frame_hdr:0000000000009561                 db 0CBh
.eh_frame_hdr:0000000000009562                 db 0FFh
.eh_frame_hdr:0000000000009563                 db 0FFh
.eh_frame_hdr:0000000000009564                 db 0FCh
.eh_frame_hdr:0000000000009565                 db  0Eh
.eh_frame_hdr:0000000000009566                 db    0
.eh_frame_hdr:0000000000009567                 db    0
.eh_frame_hdr:0000000000009568                 db 0D4h
.eh_frame_hdr:0000000000009569                 db 0CBh
.eh_frame_hdr:000000000000956A                 db 0FFh
.eh_frame_hdr:000000000000956B                 db 0FFh
.eh_frame_hdr:000000000000956C                 db  2Ch ; ,
.eh_frame_hdr:000000000000956D                 db  0Fh
.eh_frame_hdr:000000000000956E                 db    0
.eh_frame_hdr:000000000000956F                 db    0
.eh_frame_hdr:0000000000009570                 db 0F4h
.eh_frame_hdr:0000000000009571                 db 0DCh
.eh_frame_hdr:0000000000009572                 db 0FFh
.eh_frame_hdr:0000000000009573                 db 0FFh
.eh_frame_hdr:0000000000009574                 db  5Ch ; \
.eh_frame_hdr:0000000000009575                 db  0Fh
.eh_frame_hdr:0000000000009576                 db    0
.eh_frame_hdr:0000000000009577                 db    0
.eh_frame_hdr:0000000000009578                 db 0F4h
.eh_frame_hdr:0000000000009579                 db 0DEh
.eh_frame_hdr:000000000000957A                 db 0FFh
.eh_frame_hdr:000000000000957B                 db 0FFh
.eh_frame_hdr:000000000000957C                 db  74h ; t
.eh_frame_hdr:000000000000957D                 db  0Fh
.eh_frame_hdr:000000000000957E                 db    0
.eh_frame_hdr:000000000000957F                 db    0
.eh_frame_hdr:0000000000009580                 db 0E4h
.eh_frame_hdr:0000000000009581                 db 0EBh
.eh_frame_hdr:0000000000009582                 db 0FFh
.eh_frame_hdr:0000000000009583                 db 0FFh
.eh_frame_hdr:0000000000009584                 db 0C4h
.eh_frame_hdr:0000000000009585                 db  0Fh
.eh_frame_hdr:0000000000009586                 db    0
.eh_frame_hdr:0000000000009587                 db    0
.eh_frame_hdr:0000000000009588                 db  54h ; T
.eh_frame_hdr:0000000000009589                 db 0ECh
.eh_frame_hdr:000000000000958A                 db 0FFh
.eh_frame_hdr:000000000000958B                 db 0FFh
.eh_frame_hdr:000000000000958C                 db  0Ch
.eh_frame_hdr:000000000000958D                 db  10h
.eh_frame_hdr:000000000000958E                 db    0
.eh_frame_hdr:000000000000958F                 db    0
.eh_frame_hdr:0000000000009590                 db  64h ; d
.eh_frame_hdr:0000000000009591                 db 0ECh
.eh_frame_hdr:0000000000009592                 db 0FFh
.eh_frame_hdr:0000000000009593                 db 0FFh
.eh_frame_hdr:0000000000009594                 db  24h ; $
.eh_frame_hdr:0000000000009595                 db  10h
.eh_frame_hdr:0000000000009596                 db    0
.eh_frame_hdr:0000000000009597                 db    0
.eh_frame_hdr:0000000000009597 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000009597
.eh_frame:0000000000009598 ; ===========================================================================
.eh_frame:0000000000009598
.eh_frame:0000000000009598 ; Segment type: Pure data
.eh_frame:0000000000009598 ; Segment permissions: Read
.eh_frame:0000000000009598 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000009598                 assume cs:_eh_frame
.eh_frame:0000000000009598                 ;org 9598h
.eh_frame:0000000000009598                 db  14h
.eh_frame:0000000000009599                 db    0
.eh_frame:000000000000959A                 db    0
.eh_frame:000000000000959B                 db    0
.eh_frame:000000000000959C                 db    0
.eh_frame:000000000000959D                 db    0
.eh_frame:000000000000959E                 db    0
.eh_frame:000000000000959F                 db    0
.eh_frame:00000000000095A0                 db    1
.eh_frame:00000000000095A1                 db  7Ah ; z
.eh_frame:00000000000095A2                 db  52h ; R
.eh_frame:00000000000095A3                 db    0
.eh_frame:00000000000095A4                 db    1
.eh_frame:00000000000095A5                 db  78h ; x
.eh_frame:00000000000095A6                 db  10h
.eh_frame:00000000000095A7                 db    1
.eh_frame:00000000000095A8                 db  1Bh
.eh_frame:00000000000095A9                 db  0Ch
.eh_frame:00000000000095AA                 db    7
.eh_frame:00000000000095AB                 db    8
.eh_frame:00000000000095AC                 db  90h
.eh_frame:00000000000095AD                 db    1
.eh_frame:00000000000095AE                 db    7
.eh_frame:00000000000095AF                 db  10h
.eh_frame:00000000000095B0                 db  14h
.eh_frame:00000000000095B1                 db    0
.eh_frame:00000000000095B2                 db    0
.eh_frame:00000000000095B3                 db    0
.eh_frame:00000000000095B4                 db  1Ch
.eh_frame:00000000000095B5                 db    0
.eh_frame:00000000000095B6                 db    0
.eh_frame:00000000000095B7                 db    0
.eh_frame:00000000000095B8                 db  88h
.eh_frame:00000000000095B9                 db  8Fh
.eh_frame:00000000000095BA                 db 0FFh
.eh_frame:00000000000095BB                 db 0FFh
.eh_frame:00000000000095BC                 db  2Bh ; +
.eh_frame:00000000000095BD                 db    0
.eh_frame:00000000000095BE                 db    0
.eh_frame:00000000000095BF                 db    0
.eh_frame:00000000000095C0                 db    0
.eh_frame:00000000000095C1                 db    0
.eh_frame:00000000000095C2                 db    0
.eh_frame:00000000000095C3                 db    0
.eh_frame:00000000000095C4                 db    0
.eh_frame:00000000000095C5                 db    0
.eh_frame:00000000000095C6                 db    0
.eh_frame:00000000000095C7                 db    0
.eh_frame:00000000000095C8                 db  14h
.eh_frame:00000000000095C9                 db    0
.eh_frame:00000000000095CA                 db    0
.eh_frame:00000000000095CB                 db    0
.eh_frame:00000000000095CC                 db    0
.eh_frame:00000000000095CD                 db    0
.eh_frame:00000000000095CE                 db    0
.eh_frame:00000000000095CF                 db    0
.eh_frame:00000000000095D0                 db    1
.eh_frame:00000000000095D1                 db  7Ah ; z
.eh_frame:00000000000095D2                 db  52h ; R
.eh_frame:00000000000095D3                 db    0
.eh_frame:00000000000095D4                 db    1
.eh_frame:00000000000095D5                 db  78h ; x
.eh_frame:00000000000095D6                 db  10h
.eh_frame:00000000000095D7                 db    1
.eh_frame:00000000000095D8                 db  1Bh
.eh_frame:00000000000095D9                 db  0Ch
.eh_frame:00000000000095DA                 db    7
.eh_frame:00000000000095DB                 db    8
.eh_frame:00000000000095DC                 db  90h
.eh_frame:00000000000095DD                 db    1
.eh_frame:00000000000095DE                 db    0
.eh_frame:00000000000095DF                 db    0
.eh_frame:00000000000095E0                 db  24h ; $
.eh_frame:00000000000095E1                 db    0
.eh_frame:00000000000095E2                 db    0
.eh_frame:00000000000095E3                 db    0
.eh_frame:00000000000095E4                 db  1Ch
.eh_frame:00000000000095E5                 db    0
.eh_frame:00000000000095E6                 db    0
.eh_frame:00000000000095E7                 db    0
.eh_frame:00000000000095E8                 db  88h
.eh_frame:00000000000095E9                 db  7Fh ; 
.eh_frame:00000000000095EA                 db 0FFh
.eh_frame:00000000000095EB                 db 0FFh
.eh_frame:00000000000095EC                 db  70h ; p
.eh_frame:00000000000095ED                 db    3
.eh_frame:00000000000095EE                 db    0
.eh_frame:00000000000095EF                 db    0
.eh_frame:00000000000095F0                 db    0
.eh_frame:00000000000095F1                 db  0Eh
.eh_frame:00000000000095F2                 db  10h
.eh_frame:00000000000095F3                 db  46h ; F
.eh_frame:00000000000095F4                 db  0Eh
.eh_frame:00000000000095F5                 db  18h
.eh_frame:00000000000095F6                 db  4Ah ; J
.eh_frame:00000000000095F7                 db  0Fh
.eh_frame:00000000000095F8                 db  0Bh
.eh_frame:00000000000095F9                 db  77h ; w
.eh_frame:00000000000095FA                 db    8
.eh_frame:00000000000095FB                 db  80h
.eh_frame:00000000000095FC                 db    0
.eh_frame:00000000000095FD                 db  3Fh ; ?
.eh_frame:00000000000095FE                 db  1Ah
.eh_frame:00000000000095FF                 db  3Bh ; ;
.eh_frame:0000000000009600                 db  2Ah ; *
.eh_frame:0000000000009601                 db  33h ; 3
.eh_frame:0000000000009602                 db  24h ; $
.eh_frame:0000000000009603                 db  22h ; "
.eh_frame:0000000000009604                 db    0
.eh_frame:0000000000009605                 db    0
.eh_frame:0000000000009606                 db    0
.eh_frame:0000000000009607                 db    0
.eh_frame:0000000000009608                 db  14h
.eh_frame:0000000000009609                 db    0
.eh_frame:000000000000960A                 db    0
.eh_frame:000000000000960B                 db    0
.eh_frame:000000000000960C                 db  44h ; D
.eh_frame:000000000000960D                 db    0
.eh_frame:000000000000960E                 db    0
.eh_frame:000000000000960F                 db    0
.eh_frame:0000000000009610                 db 0D0h
.eh_frame:0000000000009611                 db  82h
.eh_frame:0000000000009612                 db 0FFh
.eh_frame:0000000000009613                 db 0FFh
.eh_frame:0000000000009614                 db    8
.eh_frame:0000000000009615                 db    0
.eh_frame:0000000000009616                 db    0
.eh_frame:0000000000009617                 db    0
.eh_frame:0000000000009618                 db    0
.eh_frame:0000000000009619                 db    0
.eh_frame:000000000000961A                 db    0
.eh_frame:000000000000961B                 db    0
.eh_frame:000000000000961C                 db    0
.eh_frame:000000000000961D                 db    0
.eh_frame:000000000000961E                 db    0
.eh_frame:000000000000961F                 db    0
.eh_frame:0000000000009620                 db  28h ; (
.eh_frame:0000000000009621                 db    0
.eh_frame:0000000000009622                 db    0
.eh_frame:0000000000009623                 db    0
.eh_frame:0000000000009624                 db  5Ch ; \
.eh_frame:0000000000009625                 db    0
.eh_frame:0000000000009626                 db    0
.eh_frame:0000000000009627                 db    0
.eh_frame:0000000000009628                 db  28h ; (
.eh_frame:0000000000009629                 db  90h
.eh_frame:000000000000962A                 db 0FFh
.eh_frame:000000000000962B                 db 0FFh
.eh_frame:000000000000962C                 db  3Ch ; <
.eh_frame:000000000000962D                 db    0
.eh_frame:000000000000962E                 db    0
.eh_frame:000000000000962F                 db    0
.eh_frame:0000000000009630                 db    0
.eh_frame:0000000000009631                 db  41h ; A
.eh_frame:0000000000009632                 db  0Eh
.eh_frame:0000000000009633                 db  10h
.eh_frame:0000000000009634                 db  86h
.eh_frame:0000000000009635                 db    2
.eh_frame:0000000000009636                 db  41h ; A
.eh_frame:0000000000009637                 db  0Eh
.eh_frame:0000000000009638                 db  18h
.eh_frame:0000000000009639                 db  83h
.eh_frame:000000000000963A                 db    3
.eh_frame:000000000000963B                 db  47h ; G
.eh_frame:000000000000963C                 db  0Eh
.eh_frame:000000000000963D                 db  20h
.eh_frame:000000000000963E                 db  6Ch ; l
.eh_frame:000000000000963F                 db  0Ah
.eh_frame:0000000000009640                 db  0Eh
.eh_frame:0000000000009641                 db  18h
.eh_frame:0000000000009642                 db  41h ; A
.eh_frame:0000000000009643                 db  0Eh
.eh_frame:0000000000009644                 db  10h
.eh_frame:0000000000009645                 db  41h ; A
.eh_frame:0000000000009646                 db  0Eh
.eh_frame:0000000000009647                 db    8
.eh_frame:0000000000009648                 db  41h ; A
.eh_frame:0000000000009649                 db  0Bh
.eh_frame:000000000000964A                 db    0
.eh_frame:000000000000964B                 db    0
.eh_frame:000000000000964C                 db  14h
.eh_frame:000000000000964D                 db    0
.eh_frame:000000000000964E                 db    0
.eh_frame:000000000000964F                 db    0
.eh_frame:0000000000009650                 db  88h
.eh_frame:0000000000009651                 db    0
.eh_frame:0000000000009652                 db    0
.eh_frame:0000000000009653                 db    0
.eh_frame:0000000000009654                 db  3Ch ; <
.eh_frame:0000000000009655                 db  90h
.eh_frame:0000000000009656                 db 0FFh
.eh_frame:0000000000009657                 db 0FFh
.eh_frame:0000000000009658                 db  39h ; 9
.eh_frame:0000000000009659                 db    0
.eh_frame:000000000000965A                 db    0
.eh_frame:000000000000965B                 db    0
.eh_frame:000000000000965C                 db    0
.eh_frame:000000000000965D                 db  48h ; H
.eh_frame:000000000000965E                 db  0Eh
.eh_frame:000000000000965F                 db  10h
.eh_frame:0000000000009660                 db  83h
.eh_frame:0000000000009661                 db    2
.eh_frame:0000000000009662                 db    0
.eh_frame:0000000000009663                 db    0
.eh_frame:0000000000009664                 db  4Ch ; L
.eh_frame:0000000000009665                 db    0
.eh_frame:0000000000009666                 db    0
.eh_frame:0000000000009667                 db    0
.eh_frame:0000000000009668                 db 0A0h
.eh_frame:0000000000009669                 db    0
.eh_frame:000000000000966A                 db    0
.eh_frame:000000000000966B                 db    0
.eh_frame:000000000000966C                 db  64h ; d
.eh_frame:000000000000966D                 db  90h
.eh_frame:000000000000966E                 db 0FFh
.eh_frame:000000000000966F                 db 0FFh
.eh_frame:0000000000009670                 db 0CBh
.eh_frame:0000000000009671                 db    3
.eh_frame:0000000000009672                 db    0
.eh_frame:0000000000009673                 db    0
.eh_frame:0000000000009674                 db    0
.eh_frame:0000000000009675                 db  42h ; B
.eh_frame:0000000000009676                 db  0Eh
.eh_frame:0000000000009677                 db  10h
.eh_frame:0000000000009678                 db  8Fh
.eh_frame:0000000000009679                 db    2
.eh_frame:000000000000967A                 db  42h ; B
.eh_frame:000000000000967B                 db  0Eh
.eh_frame:000000000000967C                 db  18h
.eh_frame:000000000000967D                 db  8Eh
.eh_frame:000000000000967E                 db    3
.eh_frame:000000000000967F                 db  45h ; E
.eh_frame:0000000000009680                 db  0Eh
.eh_frame:0000000000009681                 db  20h
.eh_frame:0000000000009682                 db  8Dh
.eh_frame:0000000000009683                 db    4
.eh_frame:0000000000009684                 db  42h ; B
.eh_frame:0000000000009685                 db  0Eh
.eh_frame:0000000000009686                 db  28h ; (
.eh_frame:0000000000009687                 db  8Ch
.eh_frame:0000000000009688                 db    5
.eh_frame:0000000000009689                 db  48h ; H
.eh_frame:000000000000968A                 db  0Eh
.eh_frame:000000000000968B                 db  30h ; 0
.eh_frame:000000000000968C                 db  86h
.eh_frame:000000000000968D                 db    6
.eh_frame:000000000000968E                 db  41h ; A
.eh_frame:000000000000968F                 db  0Eh
.eh_frame:0000000000009690                 db  38h ; 8
.eh_frame:0000000000009691                 db  83h
.eh_frame:0000000000009692                 db    7
.eh_frame:0000000000009693                 db  4Fh ; O
.eh_frame:0000000000009694                 db  0Eh
.eh_frame:0000000000009695                 db  80h
.eh_frame:0000000000009696                 db    1
.eh_frame:0000000000009697                 db    3
.eh_frame:0000000000009698                 db  2Eh ; .
.eh_frame:0000000000009699                 db    3
.eh_frame:000000000000969A                 db  0Ah
.eh_frame:000000000000969B                 db  0Eh
.eh_frame:000000000000969C                 db  38h ; 8
.eh_frame:000000000000969D                 db  43h ; C
.eh_frame:000000000000969E                 db  0Eh
.eh_frame:000000000000969F                 db  30h ; 0
.eh_frame:00000000000096A0                 db  41h ; A
.eh_frame:00000000000096A1                 db  0Eh
.eh_frame:00000000000096A2                 db  28h ; (
.eh_frame:00000000000096A3                 db  42h ; B
.eh_frame:00000000000096A4                 db  0Eh
.eh_frame:00000000000096A5                 db  20h
.eh_frame:00000000000096A6                 db  42h ; B
.eh_frame:00000000000096A7                 db  0Eh
.eh_frame:00000000000096A8                 db  18h
.eh_frame:00000000000096A9                 db  42h ; B
.eh_frame:00000000000096AA                 db  0Eh
.eh_frame:00000000000096AB                 db  10h
.eh_frame:00000000000096AC                 db  42h ; B
.eh_frame:00000000000096AD                 db  0Eh
.eh_frame:00000000000096AE                 db    8
.eh_frame:00000000000096AF                 db  41h ; A
.eh_frame:00000000000096B0                 db  0Bh
.eh_frame:00000000000096B1                 db    0
.eh_frame:00000000000096B2                 db    0
.eh_frame:00000000000096B3                 db    0
.eh_frame:00000000000096B4                 db  28h ; (
.eh_frame:00000000000096B5                 db    0
.eh_frame:00000000000096B6                 db    0
.eh_frame:00000000000096B7                 db    0
.eh_frame:00000000000096B8                 db 0F0h
.eh_frame:00000000000096B9                 db    0
.eh_frame:00000000000096BA                 db    0
.eh_frame:00000000000096BB                 db    0
.eh_frame:00000000000096BC                 db 0E4h
.eh_frame:00000000000096BD                 db  93h
.eh_frame:00000000000096BE                 db 0FFh
.eh_frame:00000000000096BF                 db 0FFh
.eh_frame:00000000000096C0                 db 0DAh
.eh_frame:00000000000096C1                 db    3
.eh_frame:00000000000096C2                 db    0
.eh_frame:00000000000096C3                 db    0
.eh_frame:00000000000096C4                 db    0
.eh_frame:00000000000096C5                 db  42h ; B
.eh_frame:00000000000096C6                 db  0Eh
.eh_frame:00000000000096C7                 db  10h
.eh_frame:00000000000096C8                 db  8Dh
.eh_frame:00000000000096C9                 db    2
.eh_frame:00000000000096CA                 db  42h ; B
.eh_frame:00000000000096CB                 db  0Eh
.eh_frame:00000000000096CC                 db  18h
.eh_frame:00000000000096CD                 db  8Ch
.eh_frame:00000000000096CE                 db    3
.eh_frame:00000000000096CF                 db  46h ; F
.eh_frame:00000000000096D0                 db  0Eh
.eh_frame:00000000000096D1                 db  20h
.eh_frame:00000000000096D2                 db  86h
.eh_frame:00000000000096D3                 db    4
.eh_frame:00000000000096D4                 db  41h ; A
.eh_frame:00000000000096D5                 db  0Eh
.eh_frame:00000000000096D6                 db  28h ; (
.eh_frame:00000000000096D7                 db  83h
.eh_frame:00000000000096D8                 db    5
.eh_frame:00000000000096D9                 db  49h ; I
.eh_frame:00000000000096DA                 db  0Eh
.eh_frame:00000000000096DB                 db 0B0h
.eh_frame:00000000000096DC                 db    1
.eh_frame:00000000000096DD                 db    0
.eh_frame:00000000000096DE                 db    0
.eh_frame:00000000000096DF                 db    0
.eh_frame:00000000000096E0                 db  4Ch ; L
.eh_frame:00000000000096E1                 db    0
.eh_frame:00000000000096E2                 db    0
.eh_frame:00000000000096E3                 db    0
.eh_frame:00000000000096E4                 db  1Ch
.eh_frame:00000000000096E5                 db    1
.eh_frame:00000000000096E6                 db    0
.eh_frame:00000000000096E7                 db    0
.eh_frame:00000000000096E8                 db  98h
.eh_frame:00000000000096E9                 db  97h
.eh_frame:00000000000096EA                 db 0FFh
.eh_frame:00000000000096EB                 db 0FFh
.eh_frame:00000000000096EC                 db  58h ; X
.eh_frame:00000000000096ED                 db    3
.eh_frame:00000000000096EE                 db    0
.eh_frame:00000000000096EF                 db    0
.eh_frame:00000000000096F0                 db    0
.eh_frame:00000000000096F1                 db  42h ; B
.eh_frame:00000000000096F2                 db  0Eh
.eh_frame:00000000000096F3                 db  10h
.eh_frame:00000000000096F4                 db  8Fh
.eh_frame:00000000000096F5                 db    2
.eh_frame:00000000000096F6                 db  42h ; B
.eh_frame:00000000000096F7                 db  0Eh
.eh_frame:00000000000096F8                 db  18h
.eh_frame:00000000000096F9                 db  8Eh
.eh_frame:00000000000096FA                 db    3
.eh_frame:00000000000096FB                 db  42h ; B
.eh_frame:00000000000096FC                 db  0Eh
.eh_frame:00000000000096FD                 db  20h
.eh_frame:00000000000096FE                 db  8Dh
.eh_frame:00000000000096FF                 db    4
.eh_frame:0000000000009700                 db  42h ; B
.eh_frame:0000000000009701                 db  0Eh
.eh_frame:0000000000009702                 db  28h ; (
.eh_frame:0000000000009703                 db  8Ch
.eh_frame:0000000000009704                 db    5
.eh_frame:0000000000009705                 db  41h ; A
.eh_frame:0000000000009706                 db  0Eh
.eh_frame:0000000000009707                 db  30h ; 0
.eh_frame:0000000000009708                 db  86h
.eh_frame:0000000000009709                 db    6
.eh_frame:000000000000970A                 db  41h ; A
.eh_frame:000000000000970B                 db  0Eh
.eh_frame:000000000000970C                 db  38h ; 8
.eh_frame:000000000000970D                 db  83h
.eh_frame:000000000000970E                 db    7
.eh_frame:000000000000970F                 db  4Fh ; O
.eh_frame:0000000000009710                 db  0Eh
.eh_frame:0000000000009711                 db  80h
.eh_frame:0000000000009712                 db    1
.eh_frame:0000000000009713                 db    3
.eh_frame:0000000000009714                 db 0E6h
.eh_frame:0000000000009715                 db    1
.eh_frame:0000000000009716                 db  0Ah
.eh_frame:0000000000009717                 db  0Eh
.eh_frame:0000000000009718                 db  38h ; 8
.eh_frame:0000000000009719                 db  41h ; A
.eh_frame:000000000000971A                 db  0Eh
.eh_frame:000000000000971B                 db  30h ; 0
.eh_frame:000000000000971C                 db  41h ; A
.eh_frame:000000000000971D                 db  0Eh
.eh_frame:000000000000971E                 db  28h ; (
.eh_frame:000000000000971F                 db  42h ; B
.eh_frame:0000000000009720                 db  0Eh
.eh_frame:0000000000009721                 db  20h
.eh_frame:0000000000009722                 db  42h ; B
.eh_frame:0000000000009723                 db  0Eh
.eh_frame:0000000000009724                 db  18h
.eh_frame:0000000000009725                 db  42h ; B
.eh_frame:0000000000009726                 db  0Eh
.eh_frame:0000000000009727                 db  10h
.eh_frame:0000000000009728                 db  42h ; B
.eh_frame:0000000000009729                 db  0Eh
.eh_frame:000000000000972A                 db    8
.eh_frame:000000000000972B                 db  41h ; A
.eh_frame:000000000000972C                 db  0Bh
.eh_frame:000000000000972D                 db    0
.eh_frame:000000000000972E                 db    0
.eh_frame:000000000000972F                 db    0
.eh_frame:0000000000009730                 db 0A4h
.eh_frame:0000000000009731                 db    0
.eh_frame:0000000000009732                 db    0
.eh_frame:0000000000009733                 db    0
.eh_frame:0000000000009734                 db  6Ch ; l
.eh_frame:0000000000009735                 db    1
.eh_frame:0000000000009736                 db    0
.eh_frame:0000000000009737                 db    0
.eh_frame:0000000000009738                 db 0B8h
.eh_frame:0000000000009739                 db  81h
.eh_frame:000000000000973A                 db 0FFh
.eh_frame:000000000000973B                 db 0FFh
.eh_frame:000000000000973C                 db  48h ; H
.eh_frame:000000000000973D                 db  0Ch
.eh_frame:000000000000973E                 db    0
.eh_frame:000000000000973F                 db    0
.eh_frame:0000000000009740                 db    0
.eh_frame:0000000000009741                 db  42h ; B
.eh_frame:0000000000009742                 db  0Eh
.eh_frame:0000000000009743                 db  10h
.eh_frame:0000000000009744                 db  8Fh
.eh_frame:0000000000009745                 db    2
.eh_frame:0000000000009746                 db  42h ; B
.eh_frame:0000000000009747                 db  0Eh
.eh_frame:0000000000009748                 db  18h
.eh_frame:0000000000009749                 db  8Eh
.eh_frame:000000000000974A                 db    3
.eh_frame:000000000000974B                 db  42h ; B
.eh_frame:000000000000974C                 db  0Eh
.eh_frame:000000000000974D                 db  20h
.eh_frame:000000000000974E                 db  8Dh
.eh_frame:000000000000974F                 db    4
.eh_frame:0000000000009750                 db  42h ; B
.eh_frame:0000000000009751                 db  0Eh
.eh_frame:0000000000009752                 db  28h ; (
.eh_frame:0000000000009753                 db  8Ch
.eh_frame:0000000000009754                 db    5
.eh_frame:0000000000009755                 db  44h ; D
.eh_frame:0000000000009756                 db  0Eh
.eh_frame:0000000000009757                 db  30h ; 0
.eh_frame:0000000000009758                 db  86h
.eh_frame:0000000000009759                 db    6
.eh_frame:000000000000975A                 db  41h ; A
.eh_frame:000000000000975B                 db  0Eh
.eh_frame:000000000000975C                 db  38h ; 8
.eh_frame:000000000000975D                 db  83h
.eh_frame:000000000000975E                 db    7
.eh_frame:000000000000975F                 db  51h ; Q
.eh_frame:0000000000009760                 db  0Eh
.eh_frame:0000000000009761                 db  90h
.eh_frame:0000000000009762                 db    2
.eh_frame:0000000000009763                 db    3
.eh_frame:0000000000009764                 db  2Bh ; +
.eh_frame:0000000000009765                 db    3
.eh_frame:0000000000009766                 db  0Eh
.eh_frame:0000000000009767                 db  98h
.eh_frame:0000000000009768                 db    2
.eh_frame:0000000000009769                 db  44h ; D
.eh_frame:000000000000976A                 db  0Eh
.eh_frame:000000000000976B                 db 0A0h
.eh_frame:000000000000976C                 db    2
.eh_frame:000000000000976D                 db  5Ah ; Z
.eh_frame:000000000000976E                 db  0Eh
.eh_frame:000000000000976F                 db  98h
.eh_frame:0000000000009770                 db    2
.eh_frame:0000000000009771                 db  41h ; A
.eh_frame:0000000000009772                 db  0Eh
.eh_frame:0000000000009773                 db  90h
.eh_frame:0000000000009774                 db    2
.eh_frame:0000000000009775                 db    2
.eh_frame:0000000000009776                 db  7Bh ; {
.eh_frame:0000000000009777                 db  0Eh
.eh_frame:0000000000009778                 db  98h
.eh_frame:0000000000009779                 db    2
.eh_frame:000000000000977A                 db  44h ; D
.eh_frame:000000000000977B                 db  0Eh
.eh_frame:000000000000977C                 db 0A0h
.eh_frame:000000000000977D                 db    2
.eh_frame:000000000000977E                 db  4Dh ; M
.eh_frame:000000000000977F                 db  0Eh
.eh_frame:0000000000009780                 db  98h
.eh_frame:0000000000009781                 db    2
.eh_frame:0000000000009782                 db  41h ; A
.eh_frame:0000000000009783                 db  0Eh
.eh_frame:0000000000009784                 db  90h
.eh_frame:0000000000009785                 db    2
.eh_frame:0000000000009786                 db    2
.eh_frame:0000000000009787                 db  72h ; r
.eh_frame:0000000000009788                 db  0Eh
.eh_frame:0000000000009789                 db  98h
.eh_frame:000000000000978A                 db    2
.eh_frame:000000000000978B                 db  44h ; D
.eh_frame:000000000000978C                 db  0Eh
.eh_frame:000000000000978D                 db 0A0h
.eh_frame:000000000000978E                 db    2
.eh_frame:000000000000978F                 db  53h ; S
.eh_frame:0000000000009790                 db  0Eh
.eh_frame:0000000000009791                 db  98h
.eh_frame:0000000000009792                 db    2
.eh_frame:0000000000009793                 db  42h ; B
.eh_frame:0000000000009794                 db  0Eh
.eh_frame:0000000000009795                 db  90h
.eh_frame:0000000000009796                 db    2
.eh_frame:0000000000009797                 db    2
.eh_frame:0000000000009798                 db 0B5h
.eh_frame:0000000000009799                 db  0Ah
.eh_frame:000000000000979A                 db  0Eh
.eh_frame:000000000000979B                 db  38h ; 8
.eh_frame:000000000000979C                 db  41h ; A
.eh_frame:000000000000979D                 db  0Eh
.eh_frame:000000000000979E                 db  30h ; 0
.eh_frame:000000000000979F                 db  41h ; A
.eh_frame:00000000000097A0                 db  0Eh
.eh_frame:00000000000097A1                 db  28h ; (
.eh_frame:00000000000097A2                 db  42h ; B
.eh_frame:00000000000097A3                 db  0Eh
.eh_frame:00000000000097A4                 db  20h
.eh_frame:00000000000097A5                 db  42h ; B
.eh_frame:00000000000097A6                 db  0Eh
.eh_frame:00000000000097A7                 db  18h
.eh_frame:00000000000097A8                 db  42h ; B
.eh_frame:00000000000097A9                 db  0Eh
.eh_frame:00000000000097AA                 db  10h
.eh_frame:00000000000097AB                 db  42h ; B
.eh_frame:00000000000097AC                 db  0Eh
.eh_frame:00000000000097AD                 db    8
.eh_frame:00000000000097AE                 db  41h ; A
.eh_frame:00000000000097AF                 db  0Bh
.eh_frame:00000000000097B0                 db    3
.eh_frame:00000000000097B1                 db 0EBh
.eh_frame:00000000000097B2                 db    4
.eh_frame:00000000000097B3                 db  0Eh
.eh_frame:00000000000097B4                 db  98h
.eh_frame:00000000000097B5                 db    2
.eh_frame:00000000000097B6                 db  44h ; D
.eh_frame:00000000000097B7                 db  0Eh
.eh_frame:00000000000097B8                 db 0A0h
.eh_frame:00000000000097B9                 db    2
.eh_frame:00000000000097BA                 db  49h ; I
.eh_frame:00000000000097BB                 db  0Eh
.eh_frame:00000000000097BC                 db  98h
.eh_frame:00000000000097BD                 db    2
.eh_frame:00000000000097BE                 db  44h ; D
.eh_frame:00000000000097BF                 db  0Eh
.eh_frame:00000000000097C0                 db  90h
.eh_frame:00000000000097C1                 db    2
.eh_frame:00000000000097C2                 db    2
.eh_frame:00000000000097C3                 db  6Eh ; n
.eh_frame:00000000000097C4                 db  0Eh
.eh_frame:00000000000097C5                 db  98h
.eh_frame:00000000000097C6                 db    2
.eh_frame:00000000000097C7                 db  44h ; D
.eh_frame:00000000000097C8                 db  0Eh
.eh_frame:00000000000097C9                 db 0A0h
.eh_frame:00000000000097CA                 db    2
.eh_frame:00000000000097CB                 db  46h ; F
.eh_frame:00000000000097CC                 db  0Eh
.eh_frame:00000000000097CD                 db  98h
.eh_frame:00000000000097CE                 db    2
.eh_frame:00000000000097CF                 db  42h ; B
.eh_frame:00000000000097D0                 db  0Eh
.eh_frame:00000000000097D1                 db  90h
.eh_frame:00000000000097D2                 db    2
.eh_frame:00000000000097D3                 db    0
.eh_frame:00000000000097D4                 db    0
.eh_frame:00000000000097D5                 db    0
.eh_frame:00000000000097D6                 db    0
.eh_frame:00000000000097D7                 db    0
.eh_frame:00000000000097D8                 db  3Ch ; <
.eh_frame:00000000000097D9                 db    0
.eh_frame:00000000000097DA                 db    0
.eh_frame:00000000000097DB                 db    0
.eh_frame:00000000000097DC                 db  14h
.eh_frame:00000000000097DD                 db    2
.eh_frame:00000000000097DE                 db    0
.eh_frame:00000000000097DF                 db    0
.eh_frame:00000000000097E0                 db    0
.eh_frame:00000000000097E1                 db  9Ah
.eh_frame:00000000000097E2                 db 0FFh
.eh_frame:00000000000097E3                 db 0FFh
.eh_frame:00000000000097E4                 db 0A7h
.eh_frame:00000000000097E5                 db    0
.eh_frame:00000000000097E6                 db    0
.eh_frame:00000000000097E7                 db    0
.eh_frame:00000000000097E8                 db    0
.eh_frame:00000000000097E9                 db  42h ; B
.eh_frame:00000000000097EA                 db  0Eh
.eh_frame:00000000000097EB                 db  10h
.eh_frame:00000000000097EC                 db  8Dh
.eh_frame:00000000000097ED                 db    2
.eh_frame:00000000000097EE                 db  42h ; B
.eh_frame:00000000000097EF                 db  0Eh
.eh_frame:00000000000097F0                 db  18h
.eh_frame:00000000000097F1                 db  8Ch
.eh_frame:00000000000097F2                 db    3
.eh_frame:00000000000097F3                 db  41h ; A
.eh_frame:00000000000097F4                 db  0Eh
.eh_frame:00000000000097F5                 db  20h
.eh_frame:00000000000097F6                 db  86h
.eh_frame:00000000000097F7                 db    4
.eh_frame:00000000000097F8                 db  41h ; A
.eh_frame:00000000000097F9                 db  0Eh
.eh_frame:00000000000097FA                 db  28h ; (
.eh_frame:00000000000097FB                 db  83h
.eh_frame:00000000000097FC                 db    5
.eh_frame:00000000000097FD                 db  4Ah ; J
.eh_frame:00000000000097FE                 db  0Eh
.eh_frame:00000000000097FF                 db  60h ; `
.eh_frame:0000000000009800                 db    2
.eh_frame:0000000000009801                 db  49h ; I
.eh_frame:0000000000009802                 db  0Ah
.eh_frame:0000000000009803                 db  0Eh
.eh_frame:0000000000009804                 db  28h ; (
.eh_frame:0000000000009805                 db  41h ; A
.eh_frame:0000000000009806                 db  0Eh
.eh_frame:0000000000009807                 db  20h
.eh_frame:0000000000009808                 db  41h ; A
.eh_frame:0000000000009809                 db  0Eh
.eh_frame:000000000000980A                 db  18h
.eh_frame:000000000000980B                 db  42h ; B
.eh_frame:000000000000980C                 db  0Eh
.eh_frame:000000000000980D                 db  10h
.eh_frame:000000000000980E                 db  42h ; B
.eh_frame:000000000000980F                 db  0Eh
.eh_frame:0000000000009810                 db    8
.eh_frame:0000000000009811                 db  41h ; A
.eh_frame:0000000000009812                 db  0Bh
.eh_frame:0000000000009813                 db    0
.eh_frame:0000000000009814                 db    0
.eh_frame:0000000000009815                 db    0
.eh_frame:0000000000009816                 db    0
.eh_frame:0000000000009817                 db    0
.eh_frame:0000000000009818                 db  10h
.eh_frame:0000000000009819                 db    0
.eh_frame:000000000000981A                 db    0
.eh_frame:000000000000981B                 db    0
.eh_frame:000000000000981C                 db  54h ; T
.eh_frame:000000000000981D                 db    2
.eh_frame:000000000000981E                 db    0
.eh_frame:000000000000981F                 db    0
.eh_frame:0000000000009820                 db  70h ; p
.eh_frame:0000000000009821                 db  9Ah
.eh_frame:0000000000009822                 db 0FFh
.eh_frame:0000000000009823                 db 0FFh
.eh_frame:0000000000009824                 db    8
.eh_frame:0000000000009825                 db    0
.eh_frame:0000000000009826                 db    0
.eh_frame:0000000000009827                 db    0
.eh_frame:0000000000009828                 db    0
.eh_frame:0000000000009829                 db    0
.eh_frame:000000000000982A                 db    0
.eh_frame:000000000000982B                 db    0
.eh_frame:000000000000982C                 db  10h
.eh_frame:000000000000982D                 db    0
.eh_frame:000000000000982E                 db    0
.eh_frame:000000000000982F                 db    0
.eh_frame:0000000000009830                 db  68h ; h
.eh_frame:0000000000009831                 db    2
.eh_frame:0000000000009832                 db    0
.eh_frame:0000000000009833                 db    0
.eh_frame:0000000000009834                 db  6Ch ; l
.eh_frame:0000000000009835                 db  9Ah
.eh_frame:0000000000009836                 db 0FFh
.eh_frame:0000000000009837                 db 0FFh
.eh_frame:0000000000009838                 db    8
.eh_frame:0000000000009839                 db    0
.eh_frame:000000000000983A                 db    0
.eh_frame:000000000000983B                 db    0
.eh_frame:000000000000983C                 db    0
.eh_frame:000000000000983D                 db    0
.eh_frame:000000000000983E                 db    0
.eh_frame:000000000000983F                 db    0
.eh_frame:0000000000009840                 db  2Ch ; ,
.eh_frame:0000000000009841                 db    0
.eh_frame:0000000000009842                 db    0
.eh_frame:0000000000009843                 db    0
.eh_frame:0000000000009844                 db  7Ch ; |
.eh_frame:0000000000009845                 db    2
.eh_frame:0000000000009846                 db    0
.eh_frame:0000000000009847                 db    0
.eh_frame:0000000000009848                 db  68h ; h
.eh_frame:0000000000009849                 db  9Ah
.eh_frame:000000000000984A                 db 0FFh
.eh_frame:000000000000984B                 db 0FFh
.eh_frame:000000000000984C                 db 0A4h
.eh_frame:000000000000984D                 db    0
.eh_frame:000000000000984E                 db    0
.eh_frame:000000000000984F                 db    0
.eh_frame:0000000000009850                 db    0
.eh_frame:0000000000009851                 db  41h ; A
.eh_frame:0000000000009852                 db  0Eh
.eh_frame:0000000000009853                 db  10h
.eh_frame:0000000000009854                 db  86h
.eh_frame:0000000000009855                 db    2
.eh_frame:0000000000009856                 db  41h ; A
.eh_frame:0000000000009857                 db  0Eh
.eh_frame:0000000000009858                 db  18h
.eh_frame:0000000000009859                 db  83h
.eh_frame:000000000000985A                 db    3
.eh_frame:000000000000985B                 db  44h ; D
.eh_frame:000000000000985C                 db  0Eh
.eh_frame:000000000000985D                 db  20h
.eh_frame:000000000000985E                 db  7Ah ; z
.eh_frame:000000000000985F                 db  0Ah
.eh_frame:0000000000009860                 db  0Eh
.eh_frame:0000000000009861                 db  18h
.eh_frame:0000000000009862                 db  41h ; A
.eh_frame:0000000000009863                 db  0Eh
.eh_frame:0000000000009864                 db  10h
.eh_frame:0000000000009865                 db  41h ; A
.eh_frame:0000000000009866                 db  0Eh
.eh_frame:0000000000009867                 db    8
.eh_frame:0000000000009868                 db  41h ; A
.eh_frame:0000000000009869                 db  0Bh
.eh_frame:000000000000986A                 db    0
.eh_frame:000000000000986B                 db    0
.eh_frame:000000000000986C                 db    0
.eh_frame:000000000000986D                 db    0
.eh_frame:000000000000986E                 db    0
.eh_frame:000000000000986F                 db    0
.eh_frame:0000000000009870                 db  1Ch
.eh_frame:0000000000009871                 db    0
.eh_frame:0000000000009872                 db    0
.eh_frame:0000000000009873                 db    0
.eh_frame:0000000000009874                 db 0ACh
.eh_frame:0000000000009875                 db    2
.eh_frame:0000000000009876                 db    0
.eh_frame:0000000000009877                 db    0
.eh_frame:0000000000009878                 db 0E8h
.eh_frame:0000000000009879                 db  9Ah
.eh_frame:000000000000987A                 db 0FFh
.eh_frame:000000000000987B                 db 0FFh
.eh_frame:000000000000987C                 db  9Fh
.eh_frame:000000000000987D                 db    0
.eh_frame:000000000000987E                 db    0
.eh_frame:000000000000987F                 db    0
.eh_frame:0000000000009880                 db    0
.eh_frame:0000000000009881                 db  44h ; D
.eh_frame:0000000000009882                 db  0Eh
.eh_frame:0000000000009883                 db  10h
.eh_frame:0000000000009884                 db  83h
.eh_frame:0000000000009885                 db    2
.eh_frame:0000000000009886                 db    2
.eh_frame:0000000000009887                 db  78h ; x
.eh_frame:0000000000009888                 db  0Ah
.eh_frame:0000000000009889                 db  0Eh
.eh_frame:000000000000988A                 db    8
.eh_frame:000000000000988B                 db  41h ; A
.eh_frame:000000000000988C                 db  0Bh
.eh_frame:000000000000988D                 db    0
.eh_frame:000000000000988E                 db    0
.eh_frame:000000000000988F                 db    0
.eh_frame:0000000000009890                 db  40h ; @
.eh_frame:0000000000009891                 db    0
.eh_frame:0000000000009892                 db    0
.eh_frame:0000000000009893                 db    0
.eh_frame:0000000000009894                 db 0CCh
.eh_frame:0000000000009895                 db    2
.eh_frame:0000000000009896                 db    0
.eh_frame:0000000000009897                 db    0
.eh_frame:0000000000009898                 db  68h ; h
.eh_frame:0000000000009899                 db  9Bh
.eh_frame:000000000000989A                 db 0FFh
.eh_frame:000000000000989B                 db 0FFh
.eh_frame:000000000000989C                 db 0E7h
.eh_frame:000000000000989D                 db    0
.eh_frame:000000000000989E                 db    0
.eh_frame:000000000000989F                 db    0
.eh_frame:00000000000098A0                 db    0
.eh_frame:00000000000098A1                 db  41h ; A
.eh_frame:00000000000098A2                 db  0Eh
.eh_frame:00000000000098A3                 db  10h
.eh_frame:00000000000098A4                 db  86h
.eh_frame:00000000000098A5                 db    2
.eh_frame:00000000000098A6                 db  41h ; A
.eh_frame:00000000000098A7                 db  0Eh
.eh_frame:00000000000098A8                 db  18h
.eh_frame:00000000000098A9                 db  83h
.eh_frame:00000000000098AA                 db    3
.eh_frame:00000000000098AB                 db  49h ; I
.eh_frame:00000000000098AC                 db  0Eh
.eh_frame:00000000000098AD                 db  20h
.eh_frame:00000000000098AE                 db  6Eh ; n
.eh_frame:00000000000098AF                 db  0Ah
.eh_frame:00000000000098B0                 db  0Eh
.eh_frame:00000000000098B1                 db  18h
.eh_frame:00000000000098B2                 db  41h ; A
.eh_frame:00000000000098B3                 db  0Eh
.eh_frame:00000000000098B4                 db  10h
.eh_frame:00000000000098B5                 db  41h ; A
.eh_frame:00000000000098B6                 db  0Eh
.eh_frame:00000000000098B7                 db    8
.eh_frame:00000000000098B8                 db  45h ; E
.eh_frame:00000000000098B9                 db  0Bh
.eh_frame:00000000000098BA                 db    2
.eh_frame:00000000000098BB                 db  4Ah ; J
.eh_frame:00000000000098BC                 db  0Ah
.eh_frame:00000000000098BD                 db  0Eh
.eh_frame:00000000000098BE                 db  18h
.eh_frame:00000000000098BF                 db  41h ; A
.eh_frame:00000000000098C0                 db  0Eh
.eh_frame:00000000000098C1                 db  10h
.eh_frame:00000000000098C2                 db  41h ; A
.eh_frame:00000000000098C3                 db  0Eh
.eh_frame:00000000000098C4                 db    8
.eh_frame:00000000000098C5                 db  44h ; D
.eh_frame:00000000000098C6                 db  0Bh
.eh_frame:00000000000098C7                 db    2
.eh_frame:00000000000098C8                 db  54h ; T
.eh_frame:00000000000098C9                 db  0Eh
.eh_frame:00000000000098CA                 db  18h
.eh_frame:00000000000098CB                 db  41h ; A
.eh_frame:00000000000098CC                 db  0Eh
.eh_frame:00000000000098CD                 db  10h
.eh_frame:00000000000098CE                 db  41h ; A
.eh_frame:00000000000098CF                 db  0Eh
.eh_frame:00000000000098D0                 db    8
.eh_frame:00000000000098D1                 db    0
.eh_frame:00000000000098D2                 db    0
.eh_frame:00000000000098D3                 db    0
.eh_frame:00000000000098D4                 db  74h ; t
.eh_frame:00000000000098D5                 db    0
.eh_frame:00000000000098D6                 db    0
.eh_frame:00000000000098D7                 db    0
.eh_frame:00000000000098D8                 db  10h
.eh_frame:00000000000098D9                 db    3
.eh_frame:00000000000098DA                 db    0
.eh_frame:00000000000098DB                 db    0
.eh_frame:00000000000098DC                 db  14h
.eh_frame:00000000000098DD                 db  9Ch
.eh_frame:00000000000098DE                 db 0FFh
.eh_frame:00000000000098DF                 db 0FFh
.eh_frame:00000000000098E0                 db  34h ; 4
.eh_frame:00000000000098E1                 db  12h
.eh_frame:00000000000098E2                 db    0
.eh_frame:00000000000098E3                 db    0
.eh_frame:00000000000098E4                 db    0
.eh_frame:00000000000098E5                 db  42h ; B
.eh_frame:00000000000098E6                 db  0Eh
.eh_frame:00000000000098E7                 db  10h
.eh_frame:00000000000098E8                 db  8Fh
.eh_frame:00000000000098E9                 db    2
.eh_frame:00000000000098EA                 db  42h ; B
.eh_frame:00000000000098EB                 db  0Eh
.eh_frame:00000000000098EC                 db  18h
.eh_frame:00000000000098ED                 db  8Eh
.eh_frame:00000000000098EE                 db    3
.eh_frame:00000000000098EF                 db  45h ; E
.eh_frame:00000000000098F0                 db  0Eh
.eh_frame:00000000000098F1                 db  20h
.eh_frame:00000000000098F2                 db  8Dh
.eh_frame:00000000000098F3                 db    4
.eh_frame:00000000000098F4                 db  42h ; B
.eh_frame:00000000000098F5                 db  0Eh
.eh_frame:00000000000098F6                 db  28h ; (
.eh_frame:00000000000098F7                 db  8Ch
.eh_frame:00000000000098F8                 db    5
.eh_frame:00000000000098F9                 db  44h ; D
.eh_frame:00000000000098FA                 db  0Eh
.eh_frame:00000000000098FB                 db  30h ; 0
.eh_frame:00000000000098FC                 db  86h
.eh_frame:00000000000098FD                 db    6
.eh_frame:00000000000098FE                 db  41h ; A
.eh_frame:00000000000098FF                 db  0Eh
.eh_frame:0000000000009900                 db  38h ; 8
.eh_frame:0000000000009901                 db  83h
.eh_frame:0000000000009902                 db    7
.eh_frame:0000000000009903                 db  53h ; S
.eh_frame:0000000000009904                 db  0Eh
.eh_frame:0000000000009905                 db 0F0h
.eh_frame:0000000000009906                 db    1
.eh_frame:0000000000009907                 db    3
.eh_frame:0000000000009908                 db  81h
.eh_frame:0000000000009909                 db  0Bh
.eh_frame:000000000000990A                 db  0Eh
.eh_frame:000000000000990B                 db 0F8h
.eh_frame:000000000000990C                 db    1
.eh_frame:000000000000990D                 db  4Ah ; J
.eh_frame:000000000000990E                 db  0Eh
.eh_frame:000000000000990F                 db  80h
.eh_frame:0000000000009910                 db    2
.eh_frame:0000000000009911                 db  44h ; D
.eh_frame:0000000000009912                 db  0Eh
.eh_frame:0000000000009913                 db  88h
.eh_frame:0000000000009914                 db    2
.eh_frame:0000000000009915                 db  45h ; E
.eh_frame:0000000000009916                 db  0Eh
.eh_frame:0000000000009917                 db  90h
.eh_frame:0000000000009918                 db    2
.eh_frame:0000000000009919                 db  5Fh ; _
.eh_frame:000000000000991A                 db  0Eh
.eh_frame:000000000000991B                 db 0F0h
.eh_frame:000000000000991C                 db    1
.eh_frame:000000000000991D                 db  64h ; d
.eh_frame:000000000000991E                 db  0Ah
.eh_frame:000000000000991F                 db  0Eh
.eh_frame:0000000000009920                 db  38h ; 8
.eh_frame:0000000000009921                 db  41h ; A
.eh_frame:0000000000009922                 db  0Eh
.eh_frame:0000000000009923                 db  30h ; 0
.eh_frame:0000000000009924                 db  41h ; A
.eh_frame:0000000000009925                 db  0Eh
.eh_frame:0000000000009926                 db  28h ; (
.eh_frame:0000000000009927                 db  42h ; B
.eh_frame:0000000000009928                 db  0Eh
.eh_frame:0000000000009929                 db  20h
.eh_frame:000000000000992A                 db  42h ; B
.eh_frame:000000000000992B                 db  0Eh
.eh_frame:000000000000992C                 db  18h
.eh_frame:000000000000992D                 db  42h ; B
.eh_frame:000000000000992E                 db  0Eh
.eh_frame:000000000000992F                 db  10h
.eh_frame:0000000000009930                 db  42h ; B
.eh_frame:0000000000009931                 db  0Eh
.eh_frame:0000000000009932                 db    8
.eh_frame:0000000000009933                 db  44h ; D
.eh_frame:0000000000009934                 db  0Bh
.eh_frame:0000000000009935                 db    3
.eh_frame:0000000000009936                 db  99h
.eh_frame:0000000000009937                 db    5
.eh_frame:0000000000009938                 db  0Eh
.eh_frame:0000000000009939                 db 0F8h
.eh_frame:000000000000993A                 db    1
.eh_frame:000000000000993B                 db  4Dh ; M
.eh_frame:000000000000993C                 db  0Eh
.eh_frame:000000000000993D                 db  80h
.eh_frame:000000000000993E                 db    2
.eh_frame:000000000000993F                 db  44h ; D
.eh_frame:0000000000009940                 db  0Eh
.eh_frame:0000000000009941                 db  88h
.eh_frame:0000000000009942                 db    2
.eh_frame:0000000000009943                 db  47h ; G
.eh_frame:0000000000009944                 db  0Eh
.eh_frame:0000000000009945                 db  90h
.eh_frame:0000000000009946                 db    2
.eh_frame:0000000000009947                 db  5Bh ; [
.eh_frame:0000000000009948                 db  0Eh
.eh_frame:0000000000009949                 db 0F0h
.eh_frame:000000000000994A                 db    1
.eh_frame:000000000000994B                 db    0
.eh_frame:000000000000994C                 db  68h ; h
.eh_frame:000000000000994D                 db    0
.eh_frame:000000000000994E                 db    0
.eh_frame:000000000000994F                 db    0
.eh_frame:0000000000009950                 db  88h
.eh_frame:0000000000009951                 db    3
.eh_frame:0000000000009952                 db    0
.eh_frame:0000000000009953                 db    0
.eh_frame:0000000000009954                 db 0DCh
.eh_frame:0000000000009955                 db 0ADh
.eh_frame:0000000000009956                 db 0FFh
.eh_frame:0000000000009957                 db 0FFh
.eh_frame:0000000000009958                 db 0ABh
.eh_frame:0000000000009959                 db    1
.eh_frame:000000000000995A                 db    0
.eh_frame:000000000000995B                 db    0
.eh_frame:000000000000995C                 db    0
.eh_frame:000000000000995D                 db  42h ; B
.eh_frame:000000000000995E                 db  0Eh
.eh_frame:000000000000995F                 db  10h
.eh_frame:0000000000009960                 db  8Fh
.eh_frame:0000000000009961                 db    2
.eh_frame:0000000000009962                 db  42h ; B
.eh_frame:0000000000009963                 db  0Eh
.eh_frame:0000000000009964                 db  18h
.eh_frame:0000000000009965                 db  8Eh
.eh_frame:0000000000009966                 db    3
.eh_frame:0000000000009967                 db  45h ; E
.eh_frame:0000000000009968                 db  0Eh
.eh_frame:0000000000009969                 db  20h
.eh_frame:000000000000996A                 db  8Dh
.eh_frame:000000000000996B                 db    4
.eh_frame:000000000000996C                 db  42h ; B
.eh_frame:000000000000996D                 db  0Eh
.eh_frame:000000000000996E                 db  28h ; (
.eh_frame:000000000000996F                 db  8Ch
.eh_frame:0000000000009970                 db    5
.eh_frame:0000000000009971                 db  44h ; D
.eh_frame:0000000000009972                 db  0Eh
.eh_frame:0000000000009973                 db  30h ; 0
.eh_frame:0000000000009974                 db  86h
.eh_frame:0000000000009975                 db    6
.eh_frame:0000000000009976                 db  41h ; A
.eh_frame:0000000000009977                 db  0Eh
.eh_frame:0000000000009978                 db  38h ; 8
.eh_frame:0000000000009979                 db  83h
.eh_frame:000000000000997A                 db    7
.eh_frame:000000000000997B                 db  47h ; G
.eh_frame:000000000000997C                 db  0Eh
.eh_frame:000000000000997D                 db  60h ; `
.eh_frame:000000000000997E                 db    2
.eh_frame:000000000000997F                 db  99h
.eh_frame:0000000000009980                 db  0Eh
.eh_frame:0000000000009981                 db  68h ; h
.eh_frame:0000000000009982                 db  5Fh ; _
.eh_frame:0000000000009983                 db  0Eh
.eh_frame:0000000000009984                 db  70h ; p
.eh_frame:0000000000009985                 db  46h ; F
.eh_frame:0000000000009986                 db  0Eh
.eh_frame:0000000000009987                 db  78h ; x
.eh_frame:0000000000009988                 db  42h ; B
.eh_frame:0000000000009989                 db  0Eh
.eh_frame:000000000000998A                 db  80h
.eh_frame:000000000000998B                 db    1
.eh_frame:000000000000998C                 db  59h ; Y
.eh_frame:000000000000998D                 db  0Eh
.eh_frame:000000000000998E                 db  60h ; `
.eh_frame:000000000000998F                 db    2
.eh_frame:0000000000009990                 db  40h ; @
.eh_frame:0000000000009991                 db  0Eh
.eh_frame:0000000000009992                 db  68h ; h
.eh_frame:0000000000009993                 db  4Bh ; K
.eh_frame:0000000000009994                 db  0Eh
.eh_frame:0000000000009995                 db  70h ; p
.eh_frame:0000000000009996                 db  43h ; C
.eh_frame:0000000000009997                 db  0Eh
.eh_frame:0000000000009998                 db  78h ; x
.eh_frame:0000000000009999                 db  45h ; E
.eh_frame:000000000000999A                 db  0Eh
.eh_frame:000000000000999B                 db  80h
.eh_frame:000000000000999C                 db    1
.eh_frame:000000000000999D                 db  5Eh ; ^
.eh_frame:000000000000999E                 db  0Eh
.eh_frame:000000000000999F                 db  60h ; `
.eh_frame:00000000000099A0                 db  4Ch ; L
.eh_frame:00000000000099A1                 db  0Ah
.eh_frame:00000000000099A2                 db  0Eh
.eh_frame:00000000000099A3                 db  38h ; 8
.eh_frame:00000000000099A4                 db  44h ; D
.eh_frame:00000000000099A5                 db  0Eh
.eh_frame:00000000000099A6                 db  30h ; 0
.eh_frame:00000000000099A7                 db  41h ; A
.eh_frame:00000000000099A8                 db  0Eh
.eh_frame:00000000000099A9                 db  28h ; (
.eh_frame:00000000000099AA                 db  42h ; B
.eh_frame:00000000000099AB                 db  0Eh
.eh_frame:00000000000099AC                 db  20h
.eh_frame:00000000000099AD                 db  42h ; B
.eh_frame:00000000000099AE                 db  0Eh
.eh_frame:00000000000099AF                 db  18h
.eh_frame:00000000000099B0                 db  42h ; B
.eh_frame:00000000000099B1                 db  0Eh
.eh_frame:00000000000099B2                 db  10h
.eh_frame:00000000000099B3                 db  42h ; B
.eh_frame:00000000000099B4                 db  0Eh
.eh_frame:00000000000099B5                 db    8
.eh_frame:00000000000099B6                 db  46h ; F
.eh_frame:00000000000099B7                 db  0Bh
.eh_frame:00000000000099B8                 db  28h ; (
.eh_frame:00000000000099B9                 db    0
.eh_frame:00000000000099BA                 db    0
.eh_frame:00000000000099BB                 db    0
.eh_frame:00000000000099BC                 db 0F4h
.eh_frame:00000000000099BD                 db    3
.eh_frame:00000000000099BE                 db    0
.eh_frame:00000000000099BF                 db    0
.eh_frame:00000000000099C0                 db  20h
.eh_frame:00000000000099C1                 db 0AFh
.eh_frame:00000000000099C2                 db 0FFh
.eh_frame:00000000000099C3                 db 0FFh
.eh_frame:00000000000099C4                 db  36h ; 6
.eh_frame:00000000000099C5                 db    0
.eh_frame:00000000000099C6                 db    0
.eh_frame:00000000000099C7                 db    0
.eh_frame:00000000000099C8                 db    0
.eh_frame:00000000000099C9                 db  42h ; B
.eh_frame:00000000000099CA                 db  0Eh
.eh_frame:00000000000099CB                 db  10h
.eh_frame:00000000000099CC                 db  8Ch
.eh_frame:00000000000099CD                 db    2
.eh_frame:00000000000099CE                 db  41h ; A
.eh_frame:00000000000099CF                 db  0Eh
.eh_frame:00000000000099D0                 db  18h
.eh_frame:00000000000099D1                 db  86h
.eh_frame:00000000000099D2                 db    3
.eh_frame:00000000000099D3                 db  41h ; A
.eh_frame:00000000000099D4                 db  0Eh
.eh_frame:00000000000099D5                 db  20h
.eh_frame:00000000000099D6                 db  83h
.eh_frame:00000000000099D7                 db    4
.eh_frame:00000000000099D8                 db  6Eh ; n
.eh_frame:00000000000099D9                 db  0Eh
.eh_frame:00000000000099DA                 db  18h
.eh_frame:00000000000099DB                 db  41h ; A
.eh_frame:00000000000099DC                 db  0Eh
.eh_frame:00000000000099DD                 db  10h
.eh_frame:00000000000099DE                 db  42h ; B
.eh_frame:00000000000099DF                 db  0Eh
.eh_frame:00000000000099E0                 db    8
.eh_frame:00000000000099E1                 db    0
.eh_frame:00000000000099E2                 db    0
.eh_frame:00000000000099E3                 db    0
.eh_frame:00000000000099E4                 db  10h
.eh_frame:00000000000099E5                 db    0
.eh_frame:00000000000099E6                 db    0
.eh_frame:00000000000099E7                 db    0
.eh_frame:00000000000099E8                 db  20h
.eh_frame:00000000000099E9                 db    4
.eh_frame:00000000000099EA                 db    0
.eh_frame:00000000000099EB                 db    0
.eh_frame:00000000000099EC                 db  34h ; 4
.eh_frame:00000000000099ED                 db 0AFh
.eh_frame:00000000000099EE                 db 0FFh
.eh_frame:00000000000099EF                 db 0FFh
.eh_frame:00000000000099F0                 db  11h
.eh_frame:00000000000099F1                 db    0
.eh_frame:00000000000099F2                 db    0
.eh_frame:00000000000099F3                 db    0
.eh_frame:00000000000099F4                 db    0
.eh_frame:00000000000099F5                 db    0
.eh_frame:00000000000099F6                 db    0
.eh_frame:00000000000099F7                 db    0
.eh_frame:00000000000099F8                 db  10h
.eh_frame:00000000000099F9                 db    0
.eh_frame:00000000000099FA                 db    0
.eh_frame:00000000000099FB                 db    0
.eh_frame:00000000000099FC                 db  34h ; 4
.eh_frame:00000000000099FD                 db    4
.eh_frame:00000000000099FE                 db    0
.eh_frame:00000000000099FF                 db    0
.eh_frame:0000000000009A00                 db  40h ; @
.eh_frame:0000000000009A01                 db 0AFh
.eh_frame:0000000000009A02                 db 0FFh
.eh_frame:0000000000009A03                 db 0FFh
.eh_frame:0000000000009A04                 db  11h
.eh_frame:0000000000009A05                 db    0
.eh_frame:0000000000009A06                 db    0
.eh_frame:0000000000009A07                 db    0
.eh_frame:0000000000009A08                 db    0
.eh_frame:0000000000009A09                 db    0
.eh_frame:0000000000009A0A                 db    0
.eh_frame:0000000000009A0B                 db    0
.eh_frame:0000000000009A0C                 db  10h
.eh_frame:0000000000009A0D                 db    0
.eh_frame:0000000000009A0E                 db    0
.eh_frame:0000000000009A0F                 db    0
.eh_frame:0000000000009A10                 db  48h ; H
.eh_frame:0000000000009A11                 db    4
.eh_frame:0000000000009A12                 db    0
.eh_frame:0000000000009A13                 db    0
.eh_frame:0000000000009A14                 db  4Ch ; L
.eh_frame:0000000000009A15                 db 0AFh
.eh_frame:0000000000009A16                 db 0FFh
.eh_frame:0000000000009A17                 db 0FFh
.eh_frame:0000000000009A18                 db  35h ; 5
.eh_frame:0000000000009A19                 db    0
.eh_frame:0000000000009A1A                 db    0
.eh_frame:0000000000009A1B                 db    0
.eh_frame:0000000000009A1C                 db    0
.eh_frame:0000000000009A1D                 db    0
.eh_frame:0000000000009A1E                 db    0
.eh_frame:0000000000009A1F                 db    0
.eh_frame:0000000000009A20                 db  10h
.eh_frame:0000000000009A21                 db    0
.eh_frame:0000000000009A22                 db    0
.eh_frame:0000000000009A23                 db    0
.eh_frame:0000000000009A24                 db  5Ch ; \
.eh_frame:0000000000009A25                 db    4
.eh_frame:0000000000009A26                 db    0
.eh_frame:0000000000009A27                 db    0
.eh_frame:0000000000009A28                 db  78h ; x
.eh_frame:0000000000009A29                 db 0AFh
.eh_frame:0000000000009A2A                 db 0FFh
.eh_frame:0000000000009A2B                 db 0FFh
.eh_frame:0000000000009A2C                 db  15h
.eh_frame:0000000000009A2D                 db    0
.eh_frame:0000000000009A2E                 db    0
.eh_frame:0000000000009A2F                 db    0
.eh_frame:0000000000009A30                 db    0
.eh_frame:0000000000009A31                 db    0
.eh_frame:0000000000009A32                 db    0
.eh_frame:0000000000009A33                 db    0
.eh_frame:0000000000009A34                 db  10h
.eh_frame:0000000000009A35                 db    0
.eh_frame:0000000000009A36                 db    0
.eh_frame:0000000000009A37                 db    0
.eh_frame:0000000000009A38                 db  70h ; p
.eh_frame:0000000000009A39                 db    4
.eh_frame:0000000000009A3A                 db    0
.eh_frame:0000000000009A3B                 db    0
.eh_frame:0000000000009A3C                 db  84h
.eh_frame:0000000000009A3D                 db 0AFh
.eh_frame:0000000000009A3E                 db 0FFh
.eh_frame:0000000000009A3F                 db 0FFh
.eh_frame:0000000000009A40                 db  30h ; 0
.eh_frame:0000000000009A41                 db    0
.eh_frame:0000000000009A42                 db    0
.eh_frame:0000000000009A43                 db    0
.eh_frame:0000000000009A44                 db    0
.eh_frame:0000000000009A45                 db  6Bh ; k
.eh_frame:0000000000009A46                 db  0Eh
.eh_frame:0000000000009A47                 db  10h
.eh_frame:0000000000009A48                 db  50h ; P
.eh_frame:0000000000009A49                 db    0
.eh_frame:0000000000009A4A                 db    0
.eh_frame:0000000000009A4B                 db    0
.eh_frame:0000000000009A4C                 db  84h
.eh_frame:0000000000009A4D                 db    4
.eh_frame:0000000000009A4E                 db    0
.eh_frame:0000000000009A4F                 db    0
.eh_frame:0000000000009A50                 db 0A0h
.eh_frame:0000000000009A51                 db 0AFh
.eh_frame:0000000000009A52                 db 0FFh
.eh_frame:0000000000009A53                 db 0FFh
.eh_frame:0000000000009A54                 db  74h ; t
.eh_frame:0000000000009A55                 db    0
.eh_frame:0000000000009A56                 db    0
.eh_frame:0000000000009A57                 db    0
.eh_frame:0000000000009A58                 db    0
.eh_frame:0000000000009A59                 db  42h ; B
.eh_frame:0000000000009A5A                 db  0Eh
.eh_frame:0000000000009A5B                 db  10h
.eh_frame:0000000000009A5C                 db  8Fh
.eh_frame:0000000000009A5D                 db    2
.eh_frame:0000000000009A5E                 db  42h ; B
.eh_frame:0000000000009A5F                 db  0Eh
.eh_frame:0000000000009A60                 db  18h
.eh_frame:0000000000009A61                 db  8Eh
.eh_frame:0000000000009A62                 db    3
.eh_frame:0000000000009A63                 db  49h ; I
.eh_frame:0000000000009A64                 db  0Eh
.eh_frame:0000000000009A65                 db  20h
.eh_frame:0000000000009A66                 db  8Dh
.eh_frame:0000000000009A67                 db    4
.eh_frame:0000000000009A68                 db  42h ; B
.eh_frame:0000000000009A69                 db  0Eh
.eh_frame:0000000000009A6A                 db  28h ; (
.eh_frame:0000000000009A6B                 db  8Ch
.eh_frame:0000000000009A6C                 db    5
.eh_frame:0000000000009A6D                 db  44h ; D
.eh_frame:0000000000009A6E                 db  0Eh
.eh_frame:0000000000009A6F                 db  30h ; 0
.eh_frame:0000000000009A70                 db  86h
.eh_frame:0000000000009A71                 db    6
.eh_frame:0000000000009A72                 db  41h ; A
.eh_frame:0000000000009A73                 db  0Eh
.eh_frame:0000000000009A74                 db  38h ; 8
.eh_frame:0000000000009A75                 db  83h
.eh_frame:0000000000009A76                 db    7
.eh_frame:0000000000009A77                 db  4Dh ; M
.eh_frame:0000000000009A78                 db  0Eh
.eh_frame:0000000000009A79                 db  50h ; P
.eh_frame:0000000000009A7A                 db  5Fh ; _
.eh_frame:0000000000009A7B                 db  0Eh
.eh_frame:0000000000009A7C                 db  58h ; X
.eh_frame:0000000000009A7D                 db  47h ; G
.eh_frame:0000000000009A7E                 db  0Eh
.eh_frame:0000000000009A7F                 db  60h ; `
.eh_frame:0000000000009A80                 db  46h ; F
.eh_frame:0000000000009A81                 db  0Eh
.eh_frame:0000000000009A82                 db  68h ; h
.eh_frame:0000000000009A83                 db  44h ; D
.eh_frame:0000000000009A84                 db  0Eh
.eh_frame:0000000000009A85                 db  70h ; p
.eh_frame:0000000000009A86                 db  58h ; X
.eh_frame:0000000000009A87                 db  0Eh
.eh_frame:0000000000009A88                 db  38h ; 8
.eh_frame:0000000000009A89                 db  41h ; A
.eh_frame:0000000000009A8A                 db  0Eh
.eh_frame:0000000000009A8B                 db  30h ; 0
.eh_frame:0000000000009A8C                 db  41h ; A
.eh_frame:0000000000009A8D                 db  0Eh
.eh_frame:0000000000009A8E                 db  28h ; (
.eh_frame:0000000000009A8F                 db  42h ; B
.eh_frame:0000000000009A90                 db  0Eh
.eh_frame:0000000000009A91                 db  20h
.eh_frame:0000000000009A92                 db  42h ; B
.eh_frame:0000000000009A93                 db  0Eh
.eh_frame:0000000000009A94                 db  18h
.eh_frame:0000000000009A95                 db  42h ; B
.eh_frame:0000000000009A96                 db  0Eh
.eh_frame:0000000000009A97                 db  10h
.eh_frame:0000000000009A98                 db  42h ; B
.eh_frame:0000000000009A99                 db  0Eh
.eh_frame:0000000000009A9A                 db    8
.eh_frame:0000000000009A9B                 db    0
.eh_frame:0000000000009A9C                 db  68h ; h
.eh_frame:0000000000009A9D                 db    0
.eh_frame:0000000000009A9E                 db    0
.eh_frame:0000000000009A9F                 db    0
.eh_frame:0000000000009AA0                 db 0D8h
.eh_frame:0000000000009AA1                 db    4
.eh_frame:0000000000009AA2                 db    0
.eh_frame:0000000000009AA3                 db    0
.eh_frame:0000000000009AA4                 db 0CCh
.eh_frame:0000000000009AA5                 db 0AFh
.eh_frame:0000000000009AA6                 db 0FFh
.eh_frame:0000000000009AA7                 db 0FFh
.eh_frame:0000000000009AA8                 db 0E3h
.eh_frame:0000000000009AA9                 db    0
.eh_frame:0000000000009AAA                 db    0
.eh_frame:0000000000009AAB                 db    0
.eh_frame:0000000000009AAC                 db    0
.eh_frame:0000000000009AAD                 db  42h ; B
.eh_frame:0000000000009AAE                 db  0Eh
.eh_frame:0000000000009AAF                 db  10h
.eh_frame:0000000000009AB0                 db  8Fh
.eh_frame:0000000000009AB1                 db    2
.eh_frame:0000000000009AB2                 db  42h ; B
.eh_frame:0000000000009AB3                 db  0Eh
.eh_frame:0000000000009AB4                 db  18h
.eh_frame:0000000000009AB5                 db  8Eh
.eh_frame:0000000000009AB6                 db    3
.eh_frame:0000000000009AB7                 db  49h ; I
.eh_frame:0000000000009AB8                 db  0Eh
.eh_frame:0000000000009AB9                 db  20h
.eh_frame:0000000000009ABA                 db  8Dh
.eh_frame:0000000000009ABB                 db    4
.eh_frame:0000000000009ABC                 db  42h ; B
.eh_frame:0000000000009ABD                 db  0Eh
.eh_frame:0000000000009ABE                 db  28h ; (
.eh_frame:0000000000009ABF                 db  8Ch
.eh_frame:0000000000009AC0                 db    5
.eh_frame:0000000000009AC1                 db  44h ; D
.eh_frame:0000000000009AC2                 db  0Eh
.eh_frame:0000000000009AC3                 db  30h ; 0
.eh_frame:0000000000009AC4                 db  86h
.eh_frame:0000000000009AC5                 db    6
.eh_frame:0000000000009AC6                 db  41h ; A
.eh_frame:0000000000009AC7                 db  0Eh
.eh_frame:0000000000009AC8                 db  38h ; 8
.eh_frame:0000000000009AC9                 db  83h
.eh_frame:0000000000009ACA                 db    7
.eh_frame:0000000000009ACB                 db  4Dh ; M
.eh_frame:0000000000009ACC                 db  0Eh
.eh_frame:0000000000009ACD                 db  70h ; p
.eh_frame:0000000000009ACE                 db  65h ; e
.eh_frame:0000000000009ACF                 db  0Eh
.eh_frame:0000000000009AD0                 db  78h ; x
.eh_frame:0000000000009AD1                 db  4Dh ; M
.eh_frame:0000000000009AD2                 db  0Eh
.eh_frame:0000000000009AD3                 db  80h
.eh_frame:0000000000009AD4                 db    1
.eh_frame:0000000000009AD5                 db  46h ; F
.eh_frame:0000000000009AD6                 db  0Eh
.eh_frame:0000000000009AD7                 db  88h
.eh_frame:0000000000009AD8                 db    1
.eh_frame:0000000000009AD9                 db  42h ; B
.eh_frame:0000000000009ADA                 db  0Eh
.eh_frame:0000000000009ADB                 db  90h
.eh_frame:0000000000009ADC                 db    1
.eh_frame:0000000000009ADD                 db  5Eh ; ^
.eh_frame:0000000000009ADE                 db  0Eh
.eh_frame:0000000000009ADF                 db  70h ; p
.eh_frame:0000000000009AE0                 db  56h ; V
.eh_frame:0000000000009AE1                 db  0Eh
.eh_frame:0000000000009AE2                 db  78h ; x
.eh_frame:0000000000009AE3                 db  43h ; C
.eh_frame:0000000000009AE4                 db  0Eh
.eh_frame:0000000000009AE5                 db  80h
.eh_frame:0000000000009AE6                 db    1
.eh_frame:0000000000009AE7                 db  43h ; C
.eh_frame:0000000000009AE8                 db  0Eh
.eh_frame:0000000000009AE9                 db  88h
.eh_frame:0000000000009AEA                 db    1
.eh_frame:0000000000009AEB                 db  56h ; V
.eh_frame:0000000000009AEC                 db  0Eh
.eh_frame:0000000000009AED                 db  90h
.eh_frame:0000000000009AEE                 db    1
.eh_frame:0000000000009AEF                 db  52h ; R
.eh_frame:0000000000009AF0                 db  0Eh
.eh_frame:0000000000009AF1                 db  70h ; p
.eh_frame:0000000000009AF2                 db  5Bh ; [
.eh_frame:0000000000009AF3                 db  0Eh
.eh_frame:0000000000009AF4                 db  38h ; 8
.eh_frame:0000000000009AF5                 db  41h ; A
.eh_frame:0000000000009AF6                 db  0Eh
.eh_frame:0000000000009AF7                 db  30h ; 0
.eh_frame:0000000000009AF8                 db  41h ; A
.eh_frame:0000000000009AF9                 db  0Eh
.eh_frame:0000000000009AFA                 db  28h ; (
.eh_frame:0000000000009AFB                 db  42h ; B
.eh_frame:0000000000009AFC                 db  0Eh
.eh_frame:0000000000009AFD                 db  20h
.eh_frame:0000000000009AFE                 db  42h ; B
.eh_frame:0000000000009AFF                 db  0Eh
.eh_frame:0000000000009B00                 db  18h
.eh_frame:0000000000009B01                 db  42h ; B
.eh_frame:0000000000009B02                 db  0Eh
.eh_frame:0000000000009B03                 db  10h
.eh_frame:0000000000009B04                 db  42h ; B
.eh_frame:0000000000009B05                 db  0Eh
.eh_frame:0000000000009B06                 db    8
.eh_frame:0000000000009B07                 db    0
.eh_frame:0000000000009B08                 db  10h
.eh_frame:0000000000009B09                 db    0
.eh_frame:0000000000009B0A                 db    0
.eh_frame:0000000000009B0B                 db    0
.eh_frame:0000000000009B0C                 db  44h ; D
.eh_frame:0000000000009B0D                 db    5
.eh_frame:0000000000009B0E                 db    0
.eh_frame:0000000000009B0F                 db    0
.eh_frame:0000000000009B10                 db  50h ; P
.eh_frame:0000000000009B11                 db 0B0h
.eh_frame:0000000000009B12                 db 0FFh
.eh_frame:0000000000009B13                 db 0FFh
.eh_frame:0000000000009B14                 db  0Ah
.eh_frame:0000000000009B15                 db    0
.eh_frame:0000000000009B16                 db    0
.eh_frame:0000000000009B17                 db    0
.eh_frame:0000000000009B18                 db    0
.eh_frame:0000000000009B19                 db    0
.eh_frame:0000000000009B1A                 db    0
.eh_frame:0000000000009B1B                 db    0
.eh_frame:0000000000009B1C                 db  28h ; (
.eh_frame:0000000000009B1D                 db    0
.eh_frame:0000000000009B1E                 db    0
.eh_frame:0000000000009B1F                 db    0
.eh_frame:0000000000009B20                 db  58h ; X
.eh_frame:0000000000009B21                 db    5
.eh_frame:0000000000009B22                 db    0
.eh_frame:0000000000009B23                 db    0
.eh_frame:0000000000009B24                 db  4Ch ; L
.eh_frame:0000000000009B25                 db 0B0h
.eh_frame:0000000000009B26                 db 0FFh
.eh_frame:0000000000009B27                 db 0FFh
.eh_frame:0000000000009B28                 db  93h
.eh_frame:0000000000009B29                 db    0
.eh_frame:0000000000009B2A                 db    0
.eh_frame:0000000000009B2B                 db    0
.eh_frame:0000000000009B2C                 db    0
.eh_frame:0000000000009B2D                 db  48h ; H
.eh_frame:0000000000009B2E                 db  0Eh
.eh_frame:0000000000009B2F                 db  10h
.eh_frame:0000000000009B30                 db  8Ch
.eh_frame:0000000000009B31                 db    2
.eh_frame:0000000000009B32                 db  48h ; H
.eh_frame:0000000000009B33                 db  0Eh
.eh_frame:0000000000009B34                 db  18h
.eh_frame:0000000000009B35                 db  86h
.eh_frame:0000000000009B36                 db    3
.eh_frame:0000000000009B37                 db  41h ; A
.eh_frame:0000000000009B38                 db  0Eh
.eh_frame:0000000000009B39                 db  20h
.eh_frame:0000000000009B3A                 db  83h
.eh_frame:0000000000009B3B                 db    4
.eh_frame:0000000000009B3C                 db    2
.eh_frame:0000000000009B3D                 db  74h ; t
.eh_frame:0000000000009B3E                 db  0Eh
.eh_frame:0000000000009B3F                 db  18h
.eh_frame:0000000000009B40                 db  4Bh ; K
.eh_frame:0000000000009B41                 db  0Eh
.eh_frame:0000000000009B42                 db  10h
.eh_frame:0000000000009B43                 db  42h ; B
.eh_frame:0000000000009B44                 db  0Eh
.eh_frame:0000000000009B45                 db    8
.eh_frame:0000000000009B46                 db    0
.eh_frame:0000000000009B47                 db    0
.eh_frame:0000000000009B48                 db  10h
.eh_frame:0000000000009B49                 db    0
.eh_frame:0000000000009B4A                 db    0
.eh_frame:0000000000009B4B                 db    0
.eh_frame:0000000000009B4C                 db  84h
.eh_frame:0000000000009B4D                 db    5
.eh_frame:0000000000009B4E                 db    0
.eh_frame:0000000000009B4F                 db    0
.eh_frame:0000000000009B50                 db 0C0h
.eh_frame:0000000000009B51                 db 0B0h
.eh_frame:0000000000009B52                 db 0FFh
.eh_frame:0000000000009B53                 db 0FFh
.eh_frame:0000000000009B54                 db  13h
.eh_frame:0000000000009B55                 db    0
.eh_frame:0000000000009B56                 db    0
.eh_frame:0000000000009B57                 db    0
.eh_frame:0000000000009B58                 db    0
.eh_frame:0000000000009B59                 db    0
.eh_frame:0000000000009B5A                 db    0
.eh_frame:0000000000009B5B                 db    0
.eh_frame:0000000000009B5C                 db  10h
.eh_frame:0000000000009B5D                 db    0
.eh_frame:0000000000009B5E                 db    0
.eh_frame:0000000000009B5F                 db    0
.eh_frame:0000000000009B60                 db  98h
.eh_frame:0000000000009B61                 db    5
.eh_frame:0000000000009B62                 db    0
.eh_frame:0000000000009B63                 db    0
.eh_frame:0000000000009B64                 db 0CCh
.eh_frame:0000000000009B65                 db 0B0h
.eh_frame:0000000000009B66                 db 0FFh
.eh_frame:0000000000009B67                 db 0FFh
.eh_frame:0000000000009B68                 db  0Ch
.eh_frame:0000000000009B69                 db    0
.eh_frame:0000000000009B6A                 db    0
.eh_frame:0000000000009B6B                 db    0
.eh_frame:0000000000009B6C                 db    0
.eh_frame:0000000000009B6D                 db    0
.eh_frame:0000000000009B6E                 db    0
.eh_frame:0000000000009B6F                 db    0
.eh_frame:0000000000009B70                 db  10h
.eh_frame:0000000000009B71                 db    0
.eh_frame:0000000000009B72                 db    0
.eh_frame:0000000000009B73                 db    0
.eh_frame:0000000000009B74                 db 0ACh
.eh_frame:0000000000009B75                 db    5
.eh_frame:0000000000009B76                 db    0
.eh_frame:0000000000009B77                 db    0
.eh_frame:0000000000009B78                 db 0C8h
.eh_frame:0000000000009B79                 db 0B0h
.eh_frame:0000000000009B7A                 db 0FFh
.eh_frame:0000000000009B7B                 db 0FFh
.eh_frame:0000000000009B7C                 db  18h
.eh_frame:0000000000009B7D                 db    0
.eh_frame:0000000000009B7E                 db    0
.eh_frame:0000000000009B7F                 db    0
.eh_frame:0000000000009B80                 db    0
.eh_frame:0000000000009B81                 db    0
.eh_frame:0000000000009B82                 db    0
.eh_frame:0000000000009B83                 db    0
.eh_frame:0000000000009B84                 db  10h
.eh_frame:0000000000009B85                 db    0
.eh_frame:0000000000009B86                 db    0
.eh_frame:0000000000009B87                 db    0
.eh_frame:0000000000009B88                 db 0C0h
.eh_frame:0000000000009B89                 db    5
.eh_frame:0000000000009B8A                 db    0
.eh_frame:0000000000009B8B                 db    0
.eh_frame:0000000000009B8C                 db 0D4h
.eh_frame:0000000000009B8D                 db 0B0h
.eh_frame:0000000000009B8E                 db 0FFh
.eh_frame:0000000000009B8F                 db 0FFh
.eh_frame:0000000000009B90                 db  14h
.eh_frame:0000000000009B91                 db    0
.eh_frame:0000000000009B92                 db    0
.eh_frame:0000000000009B93                 db    0
.eh_frame:0000000000009B94                 db    0
.eh_frame:0000000000009B95                 db    0
.eh_frame:0000000000009B96                 db    0
.eh_frame:0000000000009B97                 db    0
.eh_frame:0000000000009B98                 db  18h
.eh_frame:0000000000009B99                 db    0
.eh_frame:0000000000009B9A                 db    0
.eh_frame:0000000000009B9B                 db    0
.eh_frame:0000000000009B9C                 db 0D4h
.eh_frame:0000000000009B9D                 db    5
.eh_frame:0000000000009B9E                 db    0
.eh_frame:0000000000009B9F                 db    0
.eh_frame:0000000000009BA0                 db 0E0h
.eh_frame:0000000000009BA1                 db 0B0h
.eh_frame:0000000000009BA2                 db 0FFh
.eh_frame:0000000000009BA3                 db 0FFh
.eh_frame:0000000000009BA4                 db  8Eh
.eh_frame:0000000000009BA5                 db    0
.eh_frame:0000000000009BA6                 db    0
.eh_frame:0000000000009BA7                 db    0
.eh_frame:0000000000009BA8                 db    0
.eh_frame:0000000000009BA9                 db  44h ; D
.eh_frame:0000000000009BAA                 db  0Eh
.eh_frame:0000000000009BAB                 db  50h ; P
.eh_frame:0000000000009BAC                 db    2
.eh_frame:0000000000009BAD                 db  7Fh ; 
.eh_frame:0000000000009BAE                 db  0Ah
.eh_frame:0000000000009BAF                 db  0Eh
.eh_frame:0000000000009BB0                 db    8
.eh_frame:0000000000009BB1                 db  41h ; A
.eh_frame:0000000000009BB2                 db  0Bh
.eh_frame:0000000000009BB3                 db    0
.eh_frame:0000000000009BB4                 db  18h
.eh_frame:0000000000009BB5                 db    0
.eh_frame:0000000000009BB6                 db    0
.eh_frame:0000000000009BB7                 db    0
.eh_frame:0000000000009BB8                 db 0F0h
.eh_frame:0000000000009BB9                 db    5
.eh_frame:0000000000009BBA                 db    0
.eh_frame:0000000000009BBB                 db    0
.eh_frame:0000000000009BBC                 db  54h ; T
.eh_frame:0000000000009BBD                 db 0B1h
.eh_frame:0000000000009BBE                 db 0FFh
.eh_frame:0000000000009BBF                 db 0FFh
.eh_frame:0000000000009BC0                 db  8Ah
.eh_frame:0000000000009BC1                 db    0
.eh_frame:0000000000009BC2                 db    0
.eh_frame:0000000000009BC3                 db    0
.eh_frame:0000000000009BC4                 db    0
.eh_frame:0000000000009BC5                 db  44h ; D
.eh_frame:0000000000009BC6                 db  0Eh
.eh_frame:0000000000009BC7                 db  50h ; P
.eh_frame:0000000000009BC8                 db    2
.eh_frame:0000000000009BC9                 db  7Bh ; {
.eh_frame:0000000000009BCA                 db  0Ah
.eh_frame:0000000000009BCB                 db  0Eh
.eh_frame:0000000000009BCC                 db    8
.eh_frame:0000000000009BCD                 db  41h ; A
.eh_frame:0000000000009BCE                 db  0Bh
.eh_frame:0000000000009BCF                 db    0
.eh_frame:0000000000009BD0                 db  10h
.eh_frame:0000000000009BD1                 db    0
.eh_frame:0000000000009BD2                 db    0
.eh_frame:0000000000009BD3                 db    0
.eh_frame:0000000000009BD4                 db  0Ch
.eh_frame:0000000000009BD5                 db    6
.eh_frame:0000000000009BD6                 db    0
.eh_frame:0000000000009BD7                 db    0
.eh_frame:0000000000009BD8                 db 0C8h
.eh_frame:0000000000009BD9                 db 0B1h
.eh_frame:0000000000009BDA                 db 0FFh
.eh_frame:0000000000009BDB                 db 0FFh
.eh_frame:0000000000009BDC                 db  0Ch
.eh_frame:0000000000009BDD                 db    0
.eh_frame:0000000000009BDE                 db    0
.eh_frame:0000000000009BDF                 db    0
.eh_frame:0000000000009BE0                 db    0
.eh_frame:0000000000009BE1                 db    0
.eh_frame:0000000000009BE2                 db    0
.eh_frame:0000000000009BE3                 db    0
.eh_frame:0000000000009BE4                 db  10h
.eh_frame:0000000000009BE5                 db    0
.eh_frame:0000000000009BE6                 db    0
.eh_frame:0000000000009BE7                 db    0
.eh_frame:0000000000009BE8                 db  20h
.eh_frame:0000000000009BE9                 db    6
.eh_frame:0000000000009BEA                 db    0
.eh_frame:0000000000009BEB                 db    0
.eh_frame:0000000000009BEC                 db 0C4h
.eh_frame:0000000000009BED                 db 0B1h
.eh_frame:0000000000009BEE                 db 0FFh
.eh_frame:0000000000009BEF                 db 0FFh
.eh_frame:0000000000009BF0                 db  0Fh
.eh_frame:0000000000009BF1                 db    0
.eh_frame:0000000000009BF2                 db    0
.eh_frame:0000000000009BF3                 db    0
.eh_frame:0000000000009BF4                 db    0
.eh_frame:0000000000009BF5                 db    0
.eh_frame:0000000000009BF6                 db    0
.eh_frame:0000000000009BF7                 db    0
.eh_frame:0000000000009BF8                 db  18h
.eh_frame:0000000000009BF9                 db    0
.eh_frame:0000000000009BFA                 db    0
.eh_frame:0000000000009BFB                 db    0
.eh_frame:0000000000009BFC                 db  34h ; 4
.eh_frame:0000000000009BFD                 db    6
.eh_frame:0000000000009BFE                 db    0
.eh_frame:0000000000009BFF                 db    0
.eh_frame:0000000000009C00                 db 0C0h
.eh_frame:0000000000009C01                 db 0B1h
.eh_frame:0000000000009C02                 db 0FFh
.eh_frame:0000000000009C03                 db 0FFh
.eh_frame:0000000000009C04                 db  98h
.eh_frame:0000000000009C05                 db    0
.eh_frame:0000000000009C06                 db    0
.eh_frame:0000000000009C07                 db    0
.eh_frame:0000000000009C08                 db    0
.eh_frame:0000000000009C09                 db  44h ; D
.eh_frame:0000000000009C0A                 db  0Eh
.eh_frame:0000000000009C0B                 db  50h ; P
.eh_frame:0000000000009C0C                 db    2
.eh_frame:0000000000009C0D                 db  8Eh
.eh_frame:0000000000009C0E                 db  0Ah
.eh_frame:0000000000009C0F                 db  0Eh
.eh_frame:0000000000009C10                 db    8
.eh_frame:0000000000009C11                 db  41h ; A
.eh_frame:0000000000009C12                 db  0Bh
.eh_frame:0000000000009C13                 db    0
.eh_frame:0000000000009C14                 db  10h
.eh_frame:0000000000009C15                 db    0
.eh_frame:0000000000009C16                 db    0
.eh_frame:0000000000009C17                 db    0
.eh_frame:0000000000009C18                 db  50h ; P
.eh_frame:0000000000009C19                 db    6
.eh_frame:0000000000009C1A                 db    0
.eh_frame:0000000000009C1B                 db    0
.eh_frame:0000000000009C1C                 db  44h ; D
.eh_frame:0000000000009C1D                 db 0B2h
.eh_frame:0000000000009C1E                 db 0FFh
.eh_frame:0000000000009C1F                 db 0FFh
.eh_frame:0000000000009C20                 db  10h
.eh_frame:0000000000009C21                 db    0
.eh_frame:0000000000009C22                 db    0
.eh_frame:0000000000009C23                 db    0
.eh_frame:0000000000009C24                 db    0
.eh_frame:0000000000009C25                 db    0
.eh_frame:0000000000009C26                 db    0
.eh_frame:0000000000009C27                 db    0
.eh_frame:0000000000009C28                 db  10h
.eh_frame:0000000000009C29                 db    0
.eh_frame:0000000000009C2A                 db    0
.eh_frame:0000000000009C2B                 db    0
.eh_frame:0000000000009C2C                 db  64h ; d
.eh_frame:0000000000009C2D                 db    6
.eh_frame:0000000000009C2E                 db    0
.eh_frame:0000000000009C2F                 db    0
.eh_frame:0000000000009C30                 db  40h ; @
.eh_frame:0000000000009C31                 db 0B2h
.eh_frame:0000000000009C32                 db 0FFh
.eh_frame:0000000000009C33                 db 0FFh
.eh_frame:0000000000009C34                 db  11h
.eh_frame:0000000000009C35                 db    0
.eh_frame:0000000000009C36                 db    0
.eh_frame:0000000000009C37                 db    0
.eh_frame:0000000000009C38                 db    0
.eh_frame:0000000000009C39                 db    0
.eh_frame:0000000000009C3A                 db    0
.eh_frame:0000000000009C3B                 db    0
.eh_frame:0000000000009C3C                 db  10h
.eh_frame:0000000000009C3D                 db    0
.eh_frame:0000000000009C3E                 db    0
.eh_frame:0000000000009C3F                 db    0
.eh_frame:0000000000009C40                 db  78h ; x
.eh_frame:0000000000009C41                 db    6
.eh_frame:0000000000009C42                 db    0
.eh_frame:0000000000009C43                 db    0
.eh_frame:0000000000009C44                 db  4Ch ; L
.eh_frame:0000000000009C45                 db 0B2h
.eh_frame:0000000000009C46                 db 0FFh
.eh_frame:0000000000009C47                 db 0FFh
.eh_frame:0000000000009C48                 db  0Ah
.eh_frame:0000000000009C49                 db    0
.eh_frame:0000000000009C4A                 db    0
.eh_frame:0000000000009C4B                 db    0
.eh_frame:0000000000009C4C                 db    0
.eh_frame:0000000000009C4D                 db    0
.eh_frame:0000000000009C4E                 db    0
.eh_frame:0000000000009C4F                 db    0
.eh_frame:0000000000009C50                 db  18h
.eh_frame:0000000000009C51                 db    0
.eh_frame:0000000000009C52                 db    0
.eh_frame:0000000000009C53                 db    0
.eh_frame:0000000000009C54                 db  8Ch
.eh_frame:0000000000009C55                 db    6
.eh_frame:0000000000009C56                 db    0
.eh_frame:0000000000009C57                 db    0
.eh_frame:0000000000009C58                 db  48h ; H
.eh_frame:0000000000009C59                 db 0B2h
.eh_frame:0000000000009C5A                 db 0FFh
.eh_frame:0000000000009C5B                 db 0FFh
.eh_frame:0000000000009C5C                 db  8Eh
.eh_frame:0000000000009C5D                 db    0
.eh_frame:0000000000009C5E                 db    0
.eh_frame:0000000000009C5F                 db    0
.eh_frame:0000000000009C60                 db    0
.eh_frame:0000000000009C61                 db  44h ; D
.eh_frame:0000000000009C62                 db  0Eh
.eh_frame:0000000000009C63                 db  50h ; P
.eh_frame:0000000000009C64                 db    2
.eh_frame:0000000000009C65                 db  7Fh ; 
.eh_frame:0000000000009C66                 db  0Ah
.eh_frame:0000000000009C67                 db  0Eh
.eh_frame:0000000000009C68                 db    8
.eh_frame:0000000000009C69                 db  41h ; A
.eh_frame:0000000000009C6A                 db  0Bh
.eh_frame:0000000000009C6B                 db    0
.eh_frame:0000000000009C6C                 db  18h
.eh_frame:0000000000009C6D                 db    0
.eh_frame:0000000000009C6E                 db    0
.eh_frame:0000000000009C6F                 db    0
.eh_frame:0000000000009C70                 db 0A8h
.eh_frame:0000000000009C71                 db    6
.eh_frame:0000000000009C72                 db    0
.eh_frame:0000000000009C73                 db    0
.eh_frame:0000000000009C74                 db 0BCh
.eh_frame:0000000000009C75                 db 0B2h
.eh_frame:0000000000009C76                 db 0FFh
.eh_frame:0000000000009C77                 db 0FFh
.eh_frame:0000000000009C78                 db  91h
.eh_frame:0000000000009C79                 db    0
.eh_frame:0000000000009C7A                 db    0
.eh_frame:0000000000009C7B                 db    0
.eh_frame:0000000000009C7C                 db    0
.eh_frame:0000000000009C7D                 db  44h ; D
.eh_frame:0000000000009C7E                 db  0Eh
.eh_frame:0000000000009C7F                 db  50h ; P
.eh_frame:0000000000009C80                 db    2
.eh_frame:0000000000009C81                 db  82h
.eh_frame:0000000000009C82                 db  0Ah
.eh_frame:0000000000009C83                 db  0Eh
.eh_frame:0000000000009C84                 db    8
.eh_frame:0000000000009C85                 db  41h ; A
.eh_frame:0000000000009C86                 db  0Bh
.eh_frame:0000000000009C87                 db    0
.eh_frame:0000000000009C88                 db  10h
.eh_frame:0000000000009C89                 db    0
.eh_frame:0000000000009C8A                 db    0
.eh_frame:0000000000009C8B                 db    0
.eh_frame:0000000000009C8C                 db 0C4h
.eh_frame:0000000000009C8D                 db    6
.eh_frame:0000000000009C8E                 db    0
.eh_frame:0000000000009C8F                 db    0
.eh_frame:0000000000009C90                 db  40h ; @
.eh_frame:0000000000009C91                 db 0B3h
.eh_frame:0000000000009C92                 db 0FFh
.eh_frame:0000000000009C93                 db 0FFh
.eh_frame:0000000000009C94                 db  0Ch
.eh_frame:0000000000009C95                 db    0
.eh_frame:0000000000009C96                 db    0
.eh_frame:0000000000009C97                 db    0
.eh_frame:0000000000009C98                 db    0
.eh_frame:0000000000009C99                 db    0
.eh_frame:0000000000009C9A                 db    0
.eh_frame:0000000000009C9B                 db    0
.eh_frame:0000000000009C9C                 db  10h
.eh_frame:0000000000009C9D                 db    0
.eh_frame:0000000000009C9E                 db    0
.eh_frame:0000000000009C9F                 db    0
.eh_frame:0000000000009CA0                 db 0D8h
.eh_frame:0000000000009CA1                 db    6
.eh_frame:0000000000009CA2                 db    0
.eh_frame:0000000000009CA3                 db    0
.eh_frame:0000000000009CA4                 db  3Ch ; <
.eh_frame:0000000000009CA5                 db 0B3h
.eh_frame:0000000000009CA6                 db 0FFh
.eh_frame:0000000000009CA7                 db 0FFh
.eh_frame:0000000000009CA8                 db  17h
.eh_frame:0000000000009CA9                 db    0
.eh_frame:0000000000009CAA                 db    0
.eh_frame:0000000000009CAB                 db    0
.eh_frame:0000000000009CAC                 db    0
.eh_frame:0000000000009CAD                 db    0
.eh_frame:0000000000009CAE                 db    0
.eh_frame:0000000000009CAF                 db    0
.eh_frame:0000000000009CB0                 db  10h
.eh_frame:0000000000009CB1                 db    0
.eh_frame:0000000000009CB2                 db    0
.eh_frame:0000000000009CB3                 db    0
.eh_frame:0000000000009CB4                 db 0ECh
.eh_frame:0000000000009CB5                 db    6
.eh_frame:0000000000009CB6                 db    0
.eh_frame:0000000000009CB7                 db    0
.eh_frame:0000000000009CB8                 db  48h ; H
.eh_frame:0000000000009CB9                 db 0B3h
.eh_frame:0000000000009CBA                 db 0FFh
.eh_frame:0000000000009CBB                 db 0FFh
.eh_frame:0000000000009CBC                 db  13h
.eh_frame:0000000000009CBD                 db    0
.eh_frame:0000000000009CBE                 db    0
.eh_frame:0000000000009CBF                 db    0
.eh_frame:0000000000009CC0                 db    0
.eh_frame:0000000000009CC1                 db    0
.eh_frame:0000000000009CC2                 db    0
.eh_frame:0000000000009CC3                 db    0
.eh_frame:0000000000009CC4                 db  10h
.eh_frame:0000000000009CC5                 db    0
.eh_frame:0000000000009CC6                 db    0
.eh_frame:0000000000009CC7                 db    0
.eh_frame:0000000000009CC8                 db    0
.eh_frame:0000000000009CC9                 db    7
.eh_frame:0000000000009CCA                 db    0
.eh_frame:0000000000009CCB                 db    0
.eh_frame:0000000000009CCC                 db  54h ; T
.eh_frame:0000000000009CCD                 db 0B3h
.eh_frame:0000000000009CCE                 db 0FFh
.eh_frame:0000000000009CCF                 db 0FFh
.eh_frame:0000000000009CD0                 db  0Ch
.eh_frame:0000000000009CD1                 db    0
.eh_frame:0000000000009CD2                 db    0
.eh_frame:0000000000009CD3                 db    0
.eh_frame:0000000000009CD4                 db    0
.eh_frame:0000000000009CD5                 db    0
.eh_frame:0000000000009CD6                 db    0
.eh_frame:0000000000009CD7                 db    0
.eh_frame:0000000000009CD8                 db  10h
.eh_frame:0000000000009CD9                 db    0
.eh_frame:0000000000009CDA                 db    0
.eh_frame:0000000000009CDB                 db    0
.eh_frame:0000000000009CDC                 db  14h
.eh_frame:0000000000009CDD                 db    7
.eh_frame:0000000000009CDE                 db    0
.eh_frame:0000000000009CDF                 db    0
.eh_frame:0000000000009CE0                 db  50h ; P
.eh_frame:0000000000009CE1                 db 0B3h
.eh_frame:0000000000009CE2                 db 0FFh
.eh_frame:0000000000009CE3                 db 0FFh
.eh_frame:0000000000009CE4                 db  14h
.eh_frame:0000000000009CE5                 db    0
.eh_frame:0000000000009CE6                 db    0
.eh_frame:0000000000009CE7                 db    0
.eh_frame:0000000000009CE8                 db    0
.eh_frame:0000000000009CE9                 db    0
.eh_frame:0000000000009CEA                 db    0
.eh_frame:0000000000009CEB                 db    0
.eh_frame:0000000000009CEC                 db  10h
.eh_frame:0000000000009CED                 db    0
.eh_frame:0000000000009CEE                 db    0
.eh_frame:0000000000009CEF                 db    0
.eh_frame:0000000000009CF0                 db  28h ; (
.eh_frame:0000000000009CF1                 db    7
.eh_frame:0000000000009CF2                 db    0
.eh_frame:0000000000009CF3                 db    0
.eh_frame:0000000000009CF4                 db  5Ch ; \
.eh_frame:0000000000009CF5                 db 0B3h
.eh_frame:0000000000009CF6                 db 0FFh
.eh_frame:0000000000009CF7                 db 0FFh
.eh_frame:0000000000009CF8                 db  13h
.eh_frame:0000000000009CF9                 db    0
.eh_frame:0000000000009CFA                 db    0
.eh_frame:0000000000009CFB                 db    0
.eh_frame:0000000000009CFC                 db    0
.eh_frame:0000000000009CFD                 db    0
.eh_frame:0000000000009CFE                 db    0
.eh_frame:0000000000009CFF                 db    0
.eh_frame:0000000000009D00                 db  14h
.eh_frame:0000000000009D01                 db    0
.eh_frame:0000000000009D02                 db    0
.eh_frame:0000000000009D03                 db    0
.eh_frame:0000000000009D04                 db  3Ch ; <
.eh_frame:0000000000009D05                 db    7
.eh_frame:0000000000009D06                 db    0
.eh_frame:0000000000009D07                 db    0
.eh_frame:0000000000009D08                 db  68h ; h
.eh_frame:0000000000009D09                 db 0B3h
.eh_frame:0000000000009D0A                 db 0FFh
.eh_frame:0000000000009D0B                 db 0FFh
.eh_frame:0000000000009D0C                 db  18h
.eh_frame:0000000000009D0D                 db    0
.eh_frame:0000000000009D0E                 db    0
.eh_frame:0000000000009D0F                 db    0
.eh_frame:0000000000009D10                 db    0
.eh_frame:0000000000009D11                 db    0
.eh_frame:0000000000009D12                 db    0
.eh_frame:0000000000009D13                 db    0
.eh_frame:0000000000009D14                 db    0
.eh_frame:0000000000009D15                 db    0
.eh_frame:0000000000009D16                 db    0
.eh_frame:0000000000009D17                 db    0
.eh_frame:0000000000009D18                 db  10h
.eh_frame:0000000000009D19                 db    1
.eh_frame:0000000000009D1A                 db    0
.eh_frame:0000000000009D1B                 db    0
.eh_frame:0000000000009D1C                 db  54h ; T
.eh_frame:0000000000009D1D                 db    7
.eh_frame:0000000000009D1E                 db    0
.eh_frame:0000000000009D1F                 db    0
.eh_frame:0000000000009D20                 db  70h ; p
.eh_frame:0000000000009D21                 db 0B3h
.eh_frame:0000000000009D22                 db 0FFh
.eh_frame:0000000000009D23                 db 0FFh
.eh_frame:0000000000009D24                 db  17h
.eh_frame:0000000000009D25                 db    4
.eh_frame:0000000000009D26                 db    0
.eh_frame:0000000000009D27                 db    0
.eh_frame:0000000000009D28                 db    0
.eh_frame:0000000000009D29                 db  42h ; B
.eh_frame:0000000000009D2A                 db  0Eh
.eh_frame:0000000000009D2B                 db  10h
.eh_frame:0000000000009D2C                 db  8Fh
.eh_frame:0000000000009D2D                 db    2
.eh_frame:0000000000009D2E                 db  42h ; B
.eh_frame:0000000000009D2F                 db  0Eh
.eh_frame:0000000000009D30                 db  18h
.eh_frame:0000000000009D31                 db  8Eh
.eh_frame:0000000000009D32                 db    3
.eh_frame:0000000000009D33                 db  42h ; B
.eh_frame:0000000000009D34                 db  0Eh
.eh_frame:0000000000009D35                 db  20h
.eh_frame:0000000000009D36                 db  8Dh
.eh_frame:0000000000009D37                 db    4
.eh_frame:0000000000009D38                 db  42h ; B
.eh_frame:0000000000009D39                 db  0Eh
.eh_frame:0000000000009D3A                 db  28h ; (
.eh_frame:0000000000009D3B                 db  8Ch
.eh_frame:0000000000009D3C                 db    5
.eh_frame:0000000000009D3D                 db  44h ; D
.eh_frame:0000000000009D3E                 db  0Eh
.eh_frame:0000000000009D3F                 db  30h ; 0
.eh_frame:0000000000009D40                 db  86h
.eh_frame:0000000000009D41                 db    6
.eh_frame:0000000000009D42                 db  41h ; A
.eh_frame:0000000000009D43                 db  0Eh
.eh_frame:0000000000009D44                 db  38h ; 8
.eh_frame:0000000000009D45                 db  83h
.eh_frame:0000000000009D46                 db    7
.eh_frame:0000000000009D47                 db  4Ah ; J
.eh_frame:0000000000009D48                 db  0Eh
.eh_frame:0000000000009D49                 db  60h ; `
.eh_frame:0000000000009D4A                 db    2
.eh_frame:0000000000009D4B                 db 0DDh
.eh_frame:0000000000009D4C                 db  0Eh
.eh_frame:0000000000009D4D                 db  68h ; h
.eh_frame:0000000000009D4E                 db  57h ; W
.eh_frame:0000000000009D4F                 db  0Eh
.eh_frame:0000000000009D50                 db  70h ; p
.eh_frame:0000000000009D51                 db  42h ; B
.eh_frame:0000000000009D52                 db  0Eh
.eh_frame:0000000000009D53                 db  78h ; x
.eh_frame:0000000000009D54                 db  42h ; B
.eh_frame:0000000000009D55                 db  0Eh
.eh_frame:0000000000009D56                 db  80h
.eh_frame:0000000000009D57                 db    1
.eh_frame:0000000000009D58                 db  42h ; B
.eh_frame:0000000000009D59                 db  0Eh
.eh_frame:0000000000009D5A                 db  88h
.eh_frame:0000000000009D5B                 db    1
.eh_frame:0000000000009D5C                 db  42h ; B
.eh_frame:0000000000009D5D                 db  0Eh
.eh_frame:0000000000009D5E                 db  90h
.eh_frame:0000000000009D5F                 db    1
.eh_frame:0000000000009D60                 db  53h ; S
.eh_frame:0000000000009D61                 db  0Eh
.eh_frame:0000000000009D62                 db  60h ; `
.eh_frame:0000000000009D63                 db  44h ; D
.eh_frame:0000000000009D64                 db  0Ah
.eh_frame:0000000000009D65                 db  0Eh
.eh_frame:0000000000009D66                 db  38h ; 8
.eh_frame:0000000000009D67                 db  41h ; A
.eh_frame:0000000000009D68                 db  0Eh
.eh_frame:0000000000009D69                 db  30h ; 0
.eh_frame:0000000000009D6A                 db  41h ; A
.eh_frame:0000000000009D6B                 db  0Eh
.eh_frame:0000000000009D6C                 db  28h ; (
.eh_frame:0000000000009D6D                 db  42h ; B
.eh_frame:0000000000009D6E                 db  0Eh
.eh_frame:0000000000009D6F                 db  20h
.eh_frame:0000000000009D70                 db  42h ; B
.eh_frame:0000000000009D71                 db  0Eh
.eh_frame:0000000000009D72                 db  18h
.eh_frame:0000000000009D73                 db  42h ; B
.eh_frame:0000000000009D74                 db  0Eh
.eh_frame:0000000000009D75                 db  10h
.eh_frame:0000000000009D76                 db  42h ; B
.eh_frame:0000000000009D77                 db  0Eh
.eh_frame:0000000000009D78                 db    8
.eh_frame:0000000000009D79                 db  44h ; D
.eh_frame:0000000000009D7A                 db  0Bh
.eh_frame:0000000000009D7B                 db    2
.eh_frame:0000000000009D7C                 db  78h ; x
.eh_frame:0000000000009D7D                 db  0Ah
.eh_frame:0000000000009D7E                 db  0Eh
.eh_frame:0000000000009D7F                 db  68h ; h
.eh_frame:0000000000009D80                 db  48h ; H
.eh_frame:0000000000009D81                 db  0Bh
.eh_frame:0000000000009D82                 db  5Ah ; Z
.eh_frame:0000000000009D83                 db  0Ah
.eh_frame:0000000000009D84                 db  0Eh
.eh_frame:0000000000009D85                 db  38h ; 8
.eh_frame:0000000000009D86                 db  47h ; G
.eh_frame:0000000000009D87                 db  0Eh
.eh_frame:0000000000009D88                 db  30h ; 0
.eh_frame:0000000000009D89                 db  41h ; A
.eh_frame:0000000000009D8A                 db  0Eh
.eh_frame:0000000000009D8B                 db  28h ; (
.eh_frame:0000000000009D8C                 db  42h ; B
.eh_frame:0000000000009D8D                 db  0Eh
.eh_frame:0000000000009D8E                 db  20h
.eh_frame:0000000000009D8F                 db  42h ; B
.eh_frame:0000000000009D90                 db  0Eh
.eh_frame:0000000000009D91                 db  18h
.eh_frame:0000000000009D92                 db  42h ; B
.eh_frame:0000000000009D93                 db  0Eh
.eh_frame:0000000000009D94                 db  10h
.eh_frame:0000000000009D95                 db  42h ; B
.eh_frame:0000000000009D96                 db  0Eh
.eh_frame:0000000000009D97                 db    8
.eh_frame:0000000000009D98                 db  56h ; V
.eh_frame:0000000000009D99                 db  0Bh
.eh_frame:0000000000009D9A                 db  5Eh ; ^
.eh_frame:0000000000009D9B                 db  0Ah
.eh_frame:0000000000009D9C                 db  0Eh
.eh_frame:0000000000009D9D                 db  38h ; 8
.eh_frame:0000000000009D9E                 db  52h ; R
.eh_frame:0000000000009D9F                 db  0Eh
.eh_frame:0000000000009DA0                 db  30h ; 0
.eh_frame:0000000000009DA1                 db  41h ; A
.eh_frame:0000000000009DA2                 db  0Eh
.eh_frame:0000000000009DA3                 db  28h ; (
.eh_frame:0000000000009DA4                 db  42h ; B
.eh_frame:0000000000009DA5                 db  0Eh
.eh_frame:0000000000009DA6                 db  20h
.eh_frame:0000000000009DA7                 db  42h ; B
.eh_frame:0000000000009DA8                 db  0Eh
.eh_frame:0000000000009DA9                 db  18h
.eh_frame:0000000000009DAA                 db  42h ; B
.eh_frame:0000000000009DAB                 db  0Eh
.eh_frame:0000000000009DAC                 db  10h
.eh_frame:0000000000009DAD                 db  42h ; B
.eh_frame:0000000000009DAE                 db  0Eh
.eh_frame:0000000000009DAF                 db    8
.eh_frame:0000000000009DB0                 db  4Fh ; O
.eh_frame:0000000000009DB1                 db  0Bh
.eh_frame:0000000000009DB2                 db  62h ; b
.eh_frame:0000000000009DB3                 db  0Ah
.eh_frame:0000000000009DB4                 db  0Eh
.eh_frame:0000000000009DB5                 db  38h ; 8
.eh_frame:0000000000009DB6                 db  50h ; P
.eh_frame:0000000000009DB7                 db  0Eh
.eh_frame:0000000000009DB8                 db  30h ; 0
.eh_frame:0000000000009DB9                 db  41h ; A
.eh_frame:0000000000009DBA                 db  0Eh
.eh_frame:0000000000009DBB                 db  28h ; (
.eh_frame:0000000000009DBC                 db  42h ; B
.eh_frame:0000000000009DBD                 db  0Eh
.eh_frame:0000000000009DBE                 db  20h
.eh_frame:0000000000009DBF                 db  42h ; B
.eh_frame:0000000000009DC0                 db  0Eh
.eh_frame:0000000000009DC1                 db  18h
.eh_frame:0000000000009DC2                 db  42h ; B
.eh_frame:0000000000009DC3                 db  0Eh
.eh_frame:0000000000009DC4                 db  10h
.eh_frame:0000000000009DC5                 db  42h ; B
.eh_frame:0000000000009DC6                 db  0Eh
.eh_frame:0000000000009DC7                 db    8
.eh_frame:0000000000009DC8                 db  55h ; U
.eh_frame:0000000000009DC9                 db  0Bh
.eh_frame:0000000000009DCA                 db  66h ; f
.eh_frame:0000000000009DCB                 db  0Eh
.eh_frame:0000000000009DCC                 db  68h ; h
.eh_frame:0000000000009DCD                 db  42h ; B
.eh_frame:0000000000009DCE                 db  0Eh
.eh_frame:0000000000009DCF                 db  70h ; p
.eh_frame:0000000000009DD0                 db  5Ch ; \
.eh_frame:0000000000009DD1                 db  0Eh
.eh_frame:0000000000009DD2                 db  68h ; h
.eh_frame:0000000000009DD3                 db  41h ; A
.eh_frame:0000000000009DD4                 db  0Eh
.eh_frame:0000000000009DD5                 db  60h ; `
.eh_frame:0000000000009DD6                 db  44h ; D
.eh_frame:0000000000009DD7                 db  0Ah
.eh_frame:0000000000009DD8                 db  0Eh
.eh_frame:0000000000009DD9                 db  38h ; 8
.eh_frame:0000000000009DDA                 db  41h ; A
.eh_frame:0000000000009DDB                 db  0Eh
.eh_frame:0000000000009DDC                 db  30h ; 0
.eh_frame:0000000000009DDD                 db  41h ; A
.eh_frame:0000000000009DDE                 db  0Eh
.eh_frame:0000000000009DDF                 db  28h ; (
.eh_frame:0000000000009DE0                 db  42h ; B
.eh_frame:0000000000009DE1                 db  0Eh
.eh_frame:0000000000009DE2                 db  20h
.eh_frame:0000000000009DE3                 db  42h ; B
.eh_frame:0000000000009DE4                 db  0Eh
.eh_frame:0000000000009DE5                 db  18h
.eh_frame:0000000000009DE6                 db  42h ; B
.eh_frame:0000000000009DE7                 db  0Eh
.eh_frame:0000000000009DE8                 db  10h
.eh_frame:0000000000009DE9                 db  42h ; B
.eh_frame:0000000000009DEA                 db  0Eh
.eh_frame:0000000000009DEB                 db    8
.eh_frame:0000000000009DEC                 db  45h ; E
.eh_frame:0000000000009DED                 db  0Bh
.eh_frame:0000000000009DEE                 db  68h ; h
.eh_frame:0000000000009DEF                 db  0Ah
.eh_frame:0000000000009DF0                 db  0Eh
.eh_frame:0000000000009DF1                 db  68h ; h
.eh_frame:0000000000009DF2                 db  48h ; H
.eh_frame:0000000000009DF3                 db  0Bh
.eh_frame:0000000000009DF4                 db  72h ; r
.eh_frame:0000000000009DF5                 db  0Eh
.eh_frame:0000000000009DF6                 db  68h ; h
.eh_frame:0000000000009DF7                 db  45h ; E
.eh_frame:0000000000009DF8                 db  0Eh
.eh_frame:0000000000009DF9                 db  70h ; p
.eh_frame:0000000000009DFA                 db  42h ; B
.eh_frame:0000000000009DFB                 db  0Eh
.eh_frame:0000000000009DFC                 db  78h ; x
.eh_frame:0000000000009DFD                 db  42h ; B
.eh_frame:0000000000009DFE                 db  0Eh
.eh_frame:0000000000009DFF                 db  80h
.eh_frame:0000000000009E00                 db    1
.eh_frame:0000000000009E01                 db  5Eh ; ^
.eh_frame:0000000000009E02                 db  0Eh
.eh_frame:0000000000009E03                 db  60h ; `
.eh_frame:0000000000009E04                 db  44h ; D
.eh_frame:0000000000009E05                 db  0Ah
.eh_frame:0000000000009E06                 db  0Eh
.eh_frame:0000000000009E07                 db  38h ; 8
.eh_frame:0000000000009E08                 db  41h ; A
.eh_frame:0000000000009E09                 db  0Eh
.eh_frame:0000000000009E0A                 db  30h ; 0
.eh_frame:0000000000009E0B                 db  41h ; A
.eh_frame:0000000000009E0C                 db  0Eh
.eh_frame:0000000000009E0D                 db  28h ; (
.eh_frame:0000000000009E0E                 db  42h ; B
.eh_frame:0000000000009E0F                 db  0Eh
.eh_frame:0000000000009E10                 db  20h
.eh_frame:0000000000009E11                 db  42h ; B
.eh_frame:0000000000009E12                 db  0Eh
.eh_frame:0000000000009E13                 db  18h
.eh_frame:0000000000009E14                 db  42h ; B
.eh_frame:0000000000009E15                 db  0Eh
.eh_frame:0000000000009E16                 db  10h
.eh_frame:0000000000009E17                 db  42h ; B
.eh_frame:0000000000009E18                 db  0Eh
.eh_frame:0000000000009E19                 db    8
.eh_frame:0000000000009E1A                 db  41h ; A
.eh_frame:0000000000009E1B                 db  0Bh
.eh_frame:0000000000009E1C                 db  79h ; y
.eh_frame:0000000000009E1D                 db  0Ah
.eh_frame:0000000000009E1E                 db  0Eh
.eh_frame:0000000000009E1F                 db  68h ; h
.eh_frame:0000000000009E20                 db  42h ; B
.eh_frame:0000000000009E21                 db  0Eh
.eh_frame:0000000000009E22                 db  70h ; p
.eh_frame:0000000000009E23                 db  42h ; B
.eh_frame:0000000000009E24                 db  0Eh
.eh_frame:0000000000009E25                 db  78h ; x
.eh_frame:0000000000009E26                 db  42h ; B
.eh_frame:0000000000009E27                 db  0Eh
.eh_frame:0000000000009E28                 db  80h
.eh_frame:0000000000009E29                 db    1
.eh_frame:0000000000009E2A                 db  51h ; Q
.eh_frame:0000000000009E2B                 db  0Bh
.eh_frame:0000000000009E2C                 db  10h
.eh_frame:0000000000009E2D                 db    0
.eh_frame:0000000000009E2E                 db    0
.eh_frame:0000000000009E2F                 db    0
.eh_frame:0000000000009E30                 db  68h ; h
.eh_frame:0000000000009E31                 db    8
.eh_frame:0000000000009E32                 db    0
.eh_frame:0000000000009E33                 db    0
.eh_frame:0000000000009E34                 db  7Ch ; |
.eh_frame:0000000000009E35                 db 0B6h
.eh_frame:0000000000009E36                 db 0FFh
.eh_frame:0000000000009E37                 db 0FFh
.eh_frame:0000000000009E38                 db  20h
.eh_frame:0000000000009E39                 db    0
.eh_frame:0000000000009E3A                 db    0
.eh_frame:0000000000009E3B                 db    0
.eh_frame:0000000000009E3C                 db    0
.eh_frame:0000000000009E3D                 db    0
.eh_frame:0000000000009E3E                 db    0
.eh_frame:0000000000009E3F                 db    0
.eh_frame:0000000000009E40                 db  18h
.eh_frame:0000000000009E41                 db    0
.eh_frame:0000000000009E42                 db    0
.eh_frame:0000000000009E43                 db    0
.eh_frame:0000000000009E44                 db  7Ch ; |
.eh_frame:0000000000009E45                 db    8
.eh_frame:0000000000009E46                 db    0
.eh_frame:0000000000009E47                 db    0
.eh_frame:0000000000009E48                 db  88h
.eh_frame:0000000000009E49                 db 0B6h
.eh_frame:0000000000009E4A                 db 0FFh
.eh_frame:0000000000009E4B                 db 0FFh
.eh_frame:0000000000009E4C                 db  78h ; x
.eh_frame:0000000000009E4D                 db    0
.eh_frame:0000000000009E4E                 db    0
.eh_frame:0000000000009E4F                 db    0
.eh_frame:0000000000009E50                 db    0
.eh_frame:0000000000009E51                 db  44h ; D
.eh_frame:0000000000009E52                 db  0Eh
.eh_frame:0000000000009E53                 db  70h ; p
.eh_frame:0000000000009E54                 db    2
.eh_frame:0000000000009E55                 db  60h ; `
.eh_frame:0000000000009E56                 db  0Ah
.eh_frame:0000000000009E57                 db  0Eh
.eh_frame:0000000000009E58                 db    8
.eh_frame:0000000000009E59                 db  41h ; A
.eh_frame:0000000000009E5A                 db  0Bh
.eh_frame:0000000000009E5B                 db    0
.eh_frame:0000000000009E5C                 db  28h ; (
.eh_frame:0000000000009E5D                 db    0
.eh_frame:0000000000009E5E                 db    0
.eh_frame:0000000000009E5F                 db    0
.eh_frame:0000000000009E60                 db  98h
.eh_frame:0000000000009E61                 db    8
.eh_frame:0000000000009E62                 db    0
.eh_frame:0000000000009E63                 db    0
.eh_frame:0000000000009E64                 db 0ECh
.eh_frame:0000000000009E65                 db 0B6h
.eh_frame:0000000000009E66                 db 0FFh
.eh_frame:0000000000009E67                 db 0FFh
.eh_frame:0000000000009E68                 db 0D5h
.eh_frame:0000000000009E69                 db    0
.eh_frame:0000000000009E6A                 db    0
.eh_frame:0000000000009E6B                 db    0
.eh_frame:0000000000009E6C                 db    0
.eh_frame:0000000000009E6D                 db  41h ; A
.eh_frame:0000000000009E6E                 db  0Eh
.eh_frame:0000000000009E6F                 db  10h
.eh_frame:0000000000009E70                 db  86h
.eh_frame:0000000000009E71                 db    2
.eh_frame:0000000000009E72                 db  41h ; A
.eh_frame:0000000000009E73                 db  0Eh
.eh_frame:0000000000009E74                 db  18h
.eh_frame:0000000000009E75                 db  83h
.eh_frame:0000000000009E76                 db    3
.eh_frame:0000000000009E77                 db  50h ; P
.eh_frame:0000000000009E78                 db  0Eh
.eh_frame:0000000000009E79                 db 0D0h
.eh_frame:0000000000009E7A                 db    1
.eh_frame:0000000000009E7B                 db    2
.eh_frame:0000000000009E7C                 db 0ABh
.eh_frame:0000000000009E7D                 db  0Ah
.eh_frame:0000000000009E7E                 db  0Eh
.eh_frame:0000000000009E7F                 db  18h
.eh_frame:0000000000009E80                 db  41h ; A
.eh_frame:0000000000009E81                 db  0Eh
.eh_frame:0000000000009E82                 db  10h
.eh_frame:0000000000009E83                 db  41h ; A
.eh_frame:0000000000009E84                 db  0Eh
.eh_frame:0000000000009E85                 db    8
.eh_frame:0000000000009E86                 db  41h ; A
.eh_frame:0000000000009E87                 db  0Bh
.eh_frame:0000000000009E88                 db  1Ch
.eh_frame:0000000000009E89                 db    0
.eh_frame:0000000000009E8A                 db    0
.eh_frame:0000000000009E8B                 db    0
.eh_frame:0000000000009E8C                 db 0C4h
.eh_frame:0000000000009E8D                 db    8
.eh_frame:0000000000009E8E                 db    0
.eh_frame:0000000000009E8F                 db    0
.eh_frame:0000000000009E90                 db 0A0h
.eh_frame:0000000000009E91                 db 0B7h
.eh_frame:0000000000009E92                 db 0FFh
.eh_frame:0000000000009E93                 db 0FFh
.eh_frame:0000000000009E94                 db  80h
.eh_frame:0000000000009E95                 db    0
.eh_frame:0000000000009E96                 db    0
.eh_frame:0000000000009E97                 db    0
.eh_frame:0000000000009E98                 db    0
.eh_frame:0000000000009E99                 db  41h ; A
.eh_frame:0000000000009E9A                 db  0Eh
.eh_frame:0000000000009E9B                 db  10h
.eh_frame:0000000000009E9C                 db  83h
.eh_frame:0000000000009E9D                 db    2
.eh_frame:0000000000009E9E                 db    2
.eh_frame:0000000000009E9F                 db  7Ah ; z
.eh_frame:0000000000009EA0                 db  0Eh
.eh_frame:0000000000009EA1                 db    8
.eh_frame:0000000000009EA2                 db    0
.eh_frame:0000000000009EA3                 db    0
.eh_frame:0000000000009EA4                 db    0
.eh_frame:0000000000009EA5                 db    0
.eh_frame:0000000000009EA6                 db    0
.eh_frame:0000000000009EA7                 db    0
.eh_frame:0000000000009EA8                 db  18h
.eh_frame:0000000000009EA9                 db    0
.eh_frame:0000000000009EAA                 db    0
.eh_frame:0000000000009EAB                 db    0
.eh_frame:0000000000009EAC                 db 0E4h
.eh_frame:0000000000009EAD                 db    8
.eh_frame:0000000000009EAE                 db    0
.eh_frame:0000000000009EAF                 db    0
.eh_frame:0000000000009EB0                 db    0
.eh_frame:0000000000009EB1                 db 0B8h
.eh_frame:0000000000009EB2                 db 0FFh
.eh_frame:0000000000009EB3                 db 0FFh
.eh_frame:0000000000009EB4                 db  1Ah
.eh_frame:0000000000009EB5                 db    0
.eh_frame:0000000000009EB6                 db    0
.eh_frame:0000000000009EB7                 db    0
.eh_frame:0000000000009EB8                 db    0
.eh_frame:0000000000009EB9                 db  41h ; A
.eh_frame:0000000000009EBA                 db  0Eh
.eh_frame:0000000000009EBB                 db  10h
.eh_frame:0000000000009EBC                 db  83h
.eh_frame:0000000000009EBD                 db    2
.eh_frame:0000000000009EBE                 db  53h ; S
.eh_frame:0000000000009EBF                 db  0Ah
.eh_frame:0000000000009EC0                 db  0Eh
.eh_frame:0000000000009EC1                 db    8
.eh_frame:0000000000009EC2                 db  41h ; A
.eh_frame:0000000000009EC3                 db  0Bh
.eh_frame:0000000000009EC4                 db  10h
.eh_frame:0000000000009EC5                 db    0
.eh_frame:0000000000009EC6                 db    0
.eh_frame:0000000000009EC7                 db    0
.eh_frame:0000000000009EC8                 db    0
.eh_frame:0000000000009EC9                 db    9
.eh_frame:0000000000009ECA                 db    0
.eh_frame:0000000000009ECB                 db    0
.eh_frame:0000000000009ECC                 db    4
.eh_frame:0000000000009ECD                 db 0B8h
.eh_frame:0000000000009ECE                 db 0FFh
.eh_frame:0000000000009ECF                 db 0FFh
.eh_frame:0000000000009ED0                 db  24h ; $
.eh_frame:0000000000009ED1                 db    0
.eh_frame:0000000000009ED2                 db    0
.eh_frame:0000000000009ED3                 db    0
.eh_frame:0000000000009ED4                 db    0
.eh_frame:0000000000009ED5                 db  5Fh ; _
.eh_frame:0000000000009ED6                 db  0Eh
.eh_frame:0000000000009ED7                 db  10h
.eh_frame:0000000000009ED8                 db  10h
.eh_frame:0000000000009ED9                 db    0
.eh_frame:0000000000009EDA                 db    0
.eh_frame:0000000000009EDB                 db    0
.eh_frame:0000000000009EDC                 db  14h
.eh_frame:0000000000009EDD                 db    9
.eh_frame:0000000000009EDE                 db    0
.eh_frame:0000000000009EDF                 db    0
.eh_frame:0000000000009EE0                 db  20h
.eh_frame:0000000000009EE1                 db 0B8h
.eh_frame:0000000000009EE2                 db 0FFh
.eh_frame:0000000000009EE3                 db 0FFh
.eh_frame:0000000000009EE4                 db    2
.eh_frame:0000000000009EE5                 db    0
.eh_frame:0000000000009EE6                 db    0
.eh_frame:0000000000009EE7                 db    0
.eh_frame:0000000000009EE8                 db    0
.eh_frame:0000000000009EE9                 db    0
.eh_frame:0000000000009EEA                 db    0
.eh_frame:0000000000009EEB                 db    0
.eh_frame:0000000000009EEC                 db  20h
.eh_frame:0000000000009EED                 db    0
.eh_frame:0000000000009EEE                 db    0
.eh_frame:0000000000009EEF                 db    0
.eh_frame:0000000000009EF0                 db  28h ; (
.eh_frame:0000000000009EF1                 db    9
.eh_frame:0000000000009EF2                 db    0
.eh_frame:0000000000009EF3                 db    0
.eh_frame:0000000000009EF4                 db  1Ch
.eh_frame:0000000000009EF5                 db 0B8h
.eh_frame:0000000000009EF6                 db 0FFh
.eh_frame:0000000000009EF7                 db 0FFh
.eh_frame:0000000000009EF8                 db  36h ; 6
.eh_frame:0000000000009EF9                 db    0
.eh_frame:0000000000009EFA                 db    0
.eh_frame:0000000000009EFB                 db    0
.eh_frame:0000000000009EFC                 db    0
.eh_frame:0000000000009EFD                 db  44h ; D
.eh_frame:0000000000009EFE                 db  0Eh
.eh_frame:0000000000009EFF                 db  10h
.eh_frame:0000000000009F00                 db  83h
.eh_frame:0000000000009F01                 db    2
.eh_frame:0000000000009F02                 db  5Dh ; ]
.eh_frame:0000000000009F03                 db  0Ah
.eh_frame:0000000000009F04                 db  0Eh
.eh_frame:0000000000009F05                 db    8
.eh_frame:0000000000009F06                 db  47h ; G
.eh_frame:0000000000009F07                 db  0Bh
.eh_frame:0000000000009F08                 db  48h ; H
.eh_frame:0000000000009F09                 db  0Ah
.eh_frame:0000000000009F0A                 db  0Eh
.eh_frame:0000000000009F0B                 db    8
.eh_frame:0000000000009F0C                 db  41h ; A
.eh_frame:0000000000009F0D                 db  0Bh
.eh_frame:0000000000009F0E                 db    0
.eh_frame:0000000000009F0F                 db    0
.eh_frame:0000000000009F10                 db  10h
.eh_frame:0000000000009F11                 db    0
.eh_frame:0000000000009F12                 db    0
.eh_frame:0000000000009F13                 db    0
.eh_frame:0000000000009F14                 db  4Ch ; L
.eh_frame:0000000000009F15                 db    9
.eh_frame:0000000000009F16                 db    0
.eh_frame:0000000000009F17                 db    0
.eh_frame:0000000000009F18                 db  38h ; 8
.eh_frame:0000000000009F19                 db 0B8h
.eh_frame:0000000000009F1A                 db 0FFh
.eh_frame:0000000000009F1B                 db 0FFh
.eh_frame:0000000000009F1C                 db  24h ; $
.eh_frame:0000000000009F1D                 db    0
.eh_frame:0000000000009F1E                 db    0
.eh_frame:0000000000009F1F                 db    0
.eh_frame:0000000000009F20                 db    0
.eh_frame:0000000000009F21                 db  5Fh ; _
.eh_frame:0000000000009F22                 db  0Eh
.eh_frame:0000000000009F23                 db  10h
.eh_frame:0000000000009F24                 db  14h
.eh_frame:0000000000009F25                 db    0
.eh_frame:0000000000009F26                 db    0
.eh_frame:0000000000009F27                 db    0
.eh_frame:0000000000009F28                 db  60h ; `
.eh_frame:0000000000009F29                 db    9
.eh_frame:0000000000009F2A                 db    0
.eh_frame:0000000000009F2B                 db    0
.eh_frame:0000000000009F2C                 db  54h ; T
.eh_frame:0000000000009F2D                 db 0B8h
.eh_frame:0000000000009F2E                 db 0FFh
.eh_frame:0000000000009F2F                 db 0FFh
.eh_frame:0000000000009F30                 db  82h
.eh_frame:0000000000009F31                 db    0
.eh_frame:0000000000009F32                 db    0
.eh_frame:0000000000009F33                 db    0
.eh_frame:0000000000009F34                 db    0
.eh_frame:0000000000009F35                 db    2
.eh_frame:0000000000009F36                 db  5Fh ; _
.eh_frame:0000000000009F37                 db  0Eh
.eh_frame:0000000000009F38                 db  10h
.eh_frame:0000000000009F39                 db  49h ; I
.eh_frame:0000000000009F3A                 db  0Eh
.eh_frame:0000000000009F3B                 db    8
.eh_frame:0000000000009F3C                 db  14h
.eh_frame:0000000000009F3D                 db    0
.eh_frame:0000000000009F3E                 db    0
.eh_frame:0000000000009F3F                 db    0
.eh_frame:0000000000009F40                 db  78h ; x
.eh_frame:0000000000009F41                 db    9
.eh_frame:0000000000009F42                 db    0
.eh_frame:0000000000009F43                 db    0
.eh_frame:0000000000009F44                 db 0CCh
.eh_frame:0000000000009F45                 db 0B8h
.eh_frame:0000000000009F46                 db 0FFh
.eh_frame:0000000000009F47                 db 0FFh
.eh_frame:0000000000009F48                 db  4Ah ; J
.eh_frame:0000000000009F49                 db    0
.eh_frame:0000000000009F4A                 db    0
.eh_frame:0000000000009F4B                 db    0
.eh_frame:0000000000009F4C                 db    0
.eh_frame:0000000000009F4D                 db    2
.eh_frame:0000000000009F4E                 db  45h ; E
.eh_frame:0000000000009F4F                 db  0Eh
.eh_frame:0000000000009F50                 db  10h
.eh_frame:0000000000009F51                 db    0
.eh_frame:0000000000009F52                 db    0
.eh_frame:0000000000009F53                 db    0
.eh_frame:0000000000009F54                 db  18h
.eh_frame:0000000000009F55                 db    0
.eh_frame:0000000000009F56                 db    0
.eh_frame:0000000000009F57                 db    0
.eh_frame:0000000000009F58                 db  90h
.eh_frame:0000000000009F59                 db    9
.eh_frame:0000000000009F5A                 db    0
.eh_frame:0000000000009F5B                 db    0
.eh_frame:0000000000009F5C                 db    4
.eh_frame:0000000000009F5D                 db 0B9h
.eh_frame:0000000000009F5E                 db 0FFh
.eh_frame:0000000000009F5F                 db 0FFh
.eh_frame:0000000000009F60                 db  17h
.eh_frame:0000000000009F61                 db    0
.eh_frame:0000000000009F62                 db    0
.eh_frame:0000000000009F63                 db    0
.eh_frame:0000000000009F64                 db    0
.eh_frame:0000000000009F65                 db  41h ; A
.eh_frame:0000000000009F66                 db  0Eh
.eh_frame:0000000000009F67                 db  10h
.eh_frame:0000000000009F68                 db  83h
.eh_frame:0000000000009F69                 db    2
.eh_frame:0000000000009F6A                 db  51h ; Q
.eh_frame:0000000000009F6B                 db  0Eh
.eh_frame:0000000000009F6C                 db    8
.eh_frame:0000000000009F6D                 db    0
.eh_frame:0000000000009F6E                 db    0
.eh_frame:0000000000009F6F                 db    0
.eh_frame:0000000000009F70                 db  18h
.eh_frame:0000000000009F71                 db    0
.eh_frame:0000000000009F72                 db    0
.eh_frame:0000000000009F73                 db    0
.eh_frame:0000000000009F74                 db 0ACh
.eh_frame:0000000000009F75                 db    9
.eh_frame:0000000000009F76                 db    0
.eh_frame:0000000000009F77                 db    0
.eh_frame:0000000000009F78                 db    8
.eh_frame:0000000000009F79                 db 0B9h
.eh_frame:0000000000009F7A                 db 0FFh
.eh_frame:0000000000009F7B                 db 0FFh
.eh_frame:0000000000009F7C                 db  2Eh ; .
.eh_frame:0000000000009F7D                 db    0
.eh_frame:0000000000009F7E                 db    0
.eh_frame:0000000000009F7F                 db    0
.eh_frame:0000000000009F80                 db    0
.eh_frame:0000000000009F81                 db  47h ; G
.eh_frame:0000000000009F82                 db  0Eh
.eh_frame:0000000000009F83                 db  10h
.eh_frame:0000000000009F84                 db  61h ; a
.eh_frame:0000000000009F85                 db  0Ah
.eh_frame:0000000000009F86                 db  0Eh
.eh_frame:0000000000009F87                 db    8
.eh_frame:0000000000009F88                 db  41h ; A
.eh_frame:0000000000009F89                 db  0Bh
.eh_frame:0000000000009F8A                 db    0
.eh_frame:0000000000009F8B                 db    0
.eh_frame:0000000000009F8C                 db  24h ; $
.eh_frame:0000000000009F8D                 db    0
.eh_frame:0000000000009F8E                 db    0
.eh_frame:0000000000009F8F                 db    0
.eh_frame:0000000000009F90                 db 0C8h
.eh_frame:0000000000009F91                 db    9
.eh_frame:0000000000009F92                 db    0
.eh_frame:0000000000009F93                 db    0
.eh_frame:0000000000009F94                 db  1Ch
.eh_frame:0000000000009F95                 db 0B9h
.eh_frame:0000000000009F96                 db 0FFh
.eh_frame:0000000000009F97                 db 0FFh
.eh_frame:0000000000009F98                 db  28h ; (
.eh_frame:0000000000009F99                 db    0
.eh_frame:0000000000009F9A                 db    0
.eh_frame:0000000000009F9B                 db    0
.eh_frame:0000000000009F9C                 db    0
.eh_frame:0000000000009F9D                 db  41h ; A
.eh_frame:0000000000009F9E                 db  0Eh
.eh_frame:0000000000009F9F                 db  10h
.eh_frame:0000000000009FA0                 db  86h
.eh_frame:0000000000009FA1                 db    2
.eh_frame:0000000000009FA2                 db  41h ; A
.eh_frame:0000000000009FA3                 db  0Eh
.eh_frame:0000000000009FA4                 db  18h
.eh_frame:0000000000009FA5                 db  83h
.eh_frame:0000000000009FA6                 db    3
.eh_frame:0000000000009FA7                 db  4Dh ; M
.eh_frame:0000000000009FA8                 db  0Eh
.eh_frame:0000000000009FA9                 db  20h
.eh_frame:0000000000009FAA                 db  49h ; I
.eh_frame:0000000000009FAB                 db  0Eh
.eh_frame:0000000000009FAC                 db  18h
.eh_frame:0000000000009FAD                 db  47h ; G
.eh_frame:0000000000009FAE                 db  0Eh
.eh_frame:0000000000009FAF                 db  10h
.eh_frame:0000000000009FB0                 db  41h ; A
.eh_frame:0000000000009FB1                 db  0Eh
.eh_frame:0000000000009FB2                 db    8
.eh_frame:0000000000009FB3                 db    0
.eh_frame:0000000000009FB4                 db  18h
.eh_frame:0000000000009FB5                 db    0
.eh_frame:0000000000009FB6                 db    0
.eh_frame:0000000000009FB7                 db    0
.eh_frame:0000000000009FB8                 db 0F0h
.eh_frame:0000000000009FB9                 db    9
.eh_frame:0000000000009FBA                 db    0
.eh_frame:0000000000009FBB                 db    0
.eh_frame:0000000000009FBC                 db  24h ; $
.eh_frame:0000000000009FBD                 db 0B9h
.eh_frame:0000000000009FBE                 db 0FFh
.eh_frame:0000000000009FBF                 db 0FFh
.eh_frame:0000000000009FC0                 db  13h
.eh_frame:0000000000009FC1                 db    0
.eh_frame:0000000000009FC2                 db    0
.eh_frame:0000000000009FC3                 db    0
.eh_frame:0000000000009FC4                 db    0
.eh_frame:0000000000009FC5                 db  41h ; A
.eh_frame:0000000000009FC6                 db  0Eh
.eh_frame:0000000000009FC7                 db  10h
.eh_frame:0000000000009FC8                 db  83h
.eh_frame:0000000000009FC9                 db    2
.eh_frame:0000000000009FCA                 db  50h ; P
.eh_frame:0000000000009FCB                 db  0Eh
.eh_frame:0000000000009FCC                 db    8
.eh_frame:0000000000009FCD                 db    0
.eh_frame:0000000000009FCE                 db    0
.eh_frame:0000000000009FCF                 db    0
.eh_frame:0000000000009FD0                 db  14h
.eh_frame:0000000000009FD1                 db    0
.eh_frame:0000000000009FD2                 db    0
.eh_frame:0000000000009FD3                 db    0
.eh_frame:0000000000009FD4                 db  0Ch
.eh_frame:0000000000009FD5                 db  0Ah
.eh_frame:0000000000009FD6                 db    0
.eh_frame:0000000000009FD7                 db    0
.eh_frame:0000000000009FD8                 db  28h ; (
.eh_frame:0000000000009FD9                 db 0B9h
.eh_frame:0000000000009FDA                 db 0FFh
.eh_frame:0000000000009FDB                 db 0FFh
.eh_frame:0000000000009FDC                 db  35h ; 5
.eh_frame:0000000000009FDD                 db    0
.eh_frame:0000000000009FDE                 db    0
.eh_frame:0000000000009FDF                 db    0
.eh_frame:0000000000009FE0                 db    0
.eh_frame:0000000000009FE1                 db  4Bh ; K
.eh_frame:0000000000009FE2                 db  0Eh
.eh_frame:0000000000009FE3                 db  10h
.eh_frame:0000000000009FE4                 db    0
.eh_frame:0000000000009FE5                 db    0
.eh_frame:0000000000009FE6                 db    0
.eh_frame:0000000000009FE7                 db    0
.eh_frame:0000000000009FE8                 db  44h ; D
.eh_frame:0000000000009FE9                 db    0
.eh_frame:0000000000009FEA                 db    0
.eh_frame:0000000000009FEB                 db    0
.eh_frame:0000000000009FEC                 db  24h ; $
.eh_frame:0000000000009FED                 db  0Ah
.eh_frame:0000000000009FEE                 db    0
.eh_frame:0000000000009FEF                 db    0
.eh_frame:0000000000009FF0                 db  50h ; P
.eh_frame:0000000000009FF1                 db 0B9h
.eh_frame:0000000000009FF2                 db 0FFh
.eh_frame:0000000000009FF3                 db 0FFh
.eh_frame:0000000000009FF4                 db 0B9h
.eh_frame:0000000000009FF5                 db    0
.eh_frame:0000000000009FF6                 db    0
.eh_frame:0000000000009FF7                 db    0
.eh_frame:0000000000009FF8                 db    0
.eh_frame:0000000000009FF9                 db  42h ; B
.eh_frame:0000000000009FFA                 db  0Eh
.eh_frame:0000000000009FFB                 db  10h
.eh_frame:0000000000009FFC                 db  8Eh
.eh_frame:0000000000009FFD                 db    2
.eh_frame:0000000000009FFE                 db  42h ; B
.eh_frame:0000000000009FFF                 db  0Eh
.eh_frame:000000000000A000                 db  18h
.eh_frame:000000000000A001                 db  8Dh
.eh_frame:000000000000A002                 db    3
.eh_frame:000000000000A003                 db  45h ; E
.eh_frame:000000000000A004                 db  0Eh
.eh_frame:000000000000A005                 db  20h
.eh_frame:000000000000A006                 db  8Ch
.eh_frame:000000000000A007                 db    4
.eh_frame:000000000000A008                 db  41h ; A
.eh_frame:000000000000A009                 db  0Eh
.eh_frame:000000000000A00A                 db  28h ; (
.eh_frame:000000000000A00B                 db  86h
.eh_frame:000000000000A00C                 db    5
.eh_frame:000000000000A00D                 db  44h ; D
.eh_frame:000000000000A00E                 db  0Eh
.eh_frame:000000000000A00F                 db  30h ; 0
.eh_frame:000000000000A010                 db  83h
.eh_frame:000000000000A011                 db    6
.eh_frame:000000000000A012                 db  4Ah ; J
.eh_frame:000000000000A013                 db  0Eh
.eh_frame:000000000000A014                 db  40h ; @
.eh_frame:000000000000A015                 db    2
.eh_frame:000000000000A016                 db  6Eh ; n
.eh_frame:000000000000A017                 db  0Ah
.eh_frame:000000000000A018                 db  0Eh
.eh_frame:000000000000A019                 db  30h ; 0
.eh_frame:000000000000A01A                 db  41h ; A
.eh_frame:000000000000A01B                 db  0Eh
.eh_frame:000000000000A01C                 db  28h ; (
.eh_frame:000000000000A01D                 db  41h ; A
.eh_frame:000000000000A01E                 db  0Eh
.eh_frame:000000000000A01F                 db  20h
.eh_frame:000000000000A020                 db  42h ; B
.eh_frame:000000000000A021                 db  0Eh
.eh_frame:000000000000A022                 db  18h
.eh_frame:000000000000A023                 db  42h ; B
.eh_frame:000000000000A024                 db  0Eh
.eh_frame:000000000000A025                 db  10h
.eh_frame:000000000000A026                 db  42h ; B
.eh_frame:000000000000A027                 db  0Eh
.eh_frame:000000000000A028                 db    8
.eh_frame:000000000000A029                 db  42h ; B
.eh_frame:000000000000A02A                 db  0Bh
.eh_frame:000000000000A02B                 db    0
.eh_frame:000000000000A02C                 db    0
.eh_frame:000000000000A02D                 db    0
.eh_frame:000000000000A02E                 db    0
.eh_frame:000000000000A02F                 db    0
.eh_frame:000000000000A030                 db  1Ch
.eh_frame:000000000000A031                 db    0
.eh_frame:000000000000A032                 db    0
.eh_frame:000000000000A033                 db    0
.eh_frame:000000000000A034                 db  6Ch ; l
.eh_frame:000000000000A035                 db  0Ah
.eh_frame:000000000000A036                 db    0
.eh_frame:000000000000A037                 db    0
.eh_frame:000000000000A038                 db 0C8h
.eh_frame:000000000000A039                 db 0B9h
.eh_frame:000000000000A03A                 db 0FFh
.eh_frame:000000000000A03B                 db 0FFh
.eh_frame:000000000000A03C                 db 0B1h
.eh_frame:000000000000A03D                 db    0
.eh_frame:000000000000A03E                 db    0
.eh_frame:000000000000A03F                 db    0
.eh_frame:000000000000A040                 db    0
.eh_frame:000000000000A041                 db  47h ; G
.eh_frame:000000000000A042                 db  0Eh
.eh_frame:000000000000A043                 db 0E0h
.eh_frame:000000000000A044                 db    1
.eh_frame:000000000000A045                 db    2
.eh_frame:000000000000A046                 db 0A4h
.eh_frame:000000000000A047                 db  0Ah
.eh_frame:000000000000A048                 db  0Eh
.eh_frame:000000000000A049                 db    8
.eh_frame:000000000000A04A                 db  41h ; A
.eh_frame:000000000000A04B                 db  0Bh
.eh_frame:000000000000A04C                 db    0
.eh_frame:000000000000A04D                 db    0
.eh_frame:000000000000A04E                 db    0
.eh_frame:000000000000A04F                 db    0
.eh_frame:000000000000A050                 db  3Ch ; <
.eh_frame:000000000000A051                 db    0
.eh_frame:000000000000A052                 db    0
.eh_frame:000000000000A053                 db    0
.eh_frame:000000000000A054                 db  8Ch
.eh_frame:000000000000A055                 db  0Ah
.eh_frame:000000000000A056                 db    0
.eh_frame:000000000000A057                 db    0
.eh_frame:000000000000A058                 db  68h ; h
.eh_frame:000000000000A059                 db 0BAh
.eh_frame:000000000000A05A                 db 0FFh
.eh_frame:000000000000A05B                 db 0FFh
.eh_frame:000000000000A05C                 db  83h
.eh_frame:000000000000A05D                 db    0
.eh_frame:000000000000A05E                 db    0
.eh_frame:000000000000A05F                 db    0
.eh_frame:000000000000A060                 db    0
.eh_frame:000000000000A061                 db  42h ; B
.eh_frame:000000000000A062                 db  0Eh
.eh_frame:000000000000A063                 db  10h
.eh_frame:000000000000A064                 db  8Dh
.eh_frame:000000000000A065                 db    2
.eh_frame:000000000000A066                 db  42h ; B
.eh_frame:000000000000A067                 db  0Eh
.eh_frame:000000000000A068                 db  18h
.eh_frame:000000000000A069                 db  8Ch
.eh_frame:000000000000A06A                 db    3
.eh_frame:000000000000A06B                 db  44h ; D
.eh_frame:000000000000A06C                 db  0Eh
.eh_frame:000000000000A06D                 db  20h
.eh_frame:000000000000A06E                 db  86h
.eh_frame:000000000000A06F                 db    4
.eh_frame:000000000000A070                 db  41h ; A
.eh_frame:000000000000A071                 db  0Eh
.eh_frame:000000000000A072                 db  28h ; (
.eh_frame:000000000000A073                 db  83h
.eh_frame:000000000000A074                 db    5
.eh_frame:000000000000A075                 db  4Ah ; J
.eh_frame:000000000000A076                 db  0Eh
.eh_frame:000000000000A077                 db  40h ; @
.eh_frame:000000000000A078                 db    2
.eh_frame:000000000000A079                 db  64h ; d
.eh_frame:000000000000A07A                 db  0Ah
.eh_frame:000000000000A07B                 db  0Eh
.eh_frame:000000000000A07C                 db  28h ; (
.eh_frame:000000000000A07D                 db  41h ; A
.eh_frame:000000000000A07E                 db  0Eh
.eh_frame:000000000000A07F                 db  20h
.eh_frame:000000000000A080                 db  41h ; A
.eh_frame:000000000000A081                 db  0Eh
.eh_frame:000000000000A082                 db  18h
.eh_frame:000000000000A083                 db  42h ; B
.eh_frame:000000000000A084                 db  0Eh
.eh_frame:000000000000A085                 db  10h
.eh_frame:000000000000A086                 db  42h ; B
.eh_frame:000000000000A087                 db  0Eh
.eh_frame:000000000000A088                 db    8
.eh_frame:000000000000A089                 db  41h ; A
.eh_frame:000000000000A08A                 db  0Bh
.eh_frame:000000000000A08B                 db    0
.eh_frame:000000000000A08C                 db    0
.eh_frame:000000000000A08D                 db    0
.eh_frame:000000000000A08E                 db    0
.eh_frame:000000000000A08F                 db    0
.eh_frame:000000000000A090                 db  24h ; $
.eh_frame:000000000000A091                 db    0
.eh_frame:000000000000A092                 db    0
.eh_frame:000000000000A093                 db    0
.eh_frame:000000000000A094                 db 0CCh
.eh_frame:000000000000A095                 db  0Ah
.eh_frame:000000000000A096                 db    0
.eh_frame:000000000000A097                 db    0
.eh_frame:000000000000A098                 db 0B8h
.eh_frame:000000000000A099                 db 0BAh
.eh_frame:000000000000A09A                 db 0FFh
.eh_frame:000000000000A09B                 db 0FFh
.eh_frame:000000000000A09C                 db  7Eh ; ~
.eh_frame:000000000000A09D                 db    0
.eh_frame:000000000000A09E                 db    0
.eh_frame:000000000000A09F                 db    0
.eh_frame:000000000000A0A0                 db    0
.eh_frame:000000000000A0A1                 db  41h ; A
.eh_frame:000000000000A0A2                 db  0Eh
.eh_frame:000000000000A0A3                 db  10h
.eh_frame:000000000000A0A4                 db  83h
.eh_frame:000000000000A0A5                 db    2
.eh_frame:000000000000A0A6                 db  4Ch ; L
.eh_frame:000000000000A0A7                 db  0Eh
.eh_frame:000000000000A0A8                 db  20h
.eh_frame:000000000000A0A9                 db    2
.eh_frame:000000000000A0AA                 db  49h ; I
.eh_frame:000000000000A0AB                 db  0Ah
.eh_frame:000000000000A0AC                 db  0Eh
.eh_frame:000000000000A0AD                 db  10h
.eh_frame:000000000000A0AE                 db  41h ; A
.eh_frame:000000000000A0AF                 db  0Eh
.eh_frame:000000000000A0B0                 db    8
.eh_frame:000000000000A0B1                 db  41h ; A
.eh_frame:000000000000A0B2                 db  0Bh
.eh_frame:000000000000A0B3                 db    0
.eh_frame:000000000000A0B4                 db    0
.eh_frame:000000000000A0B5                 db    0
.eh_frame:000000000000A0B6                 db    0
.eh_frame:000000000000A0B7                 db    0
.eh_frame:000000000000A0B8                 db  54h ; T
.eh_frame:000000000000A0B9                 db    0
.eh_frame:000000000000A0BA                 db    0
.eh_frame:000000000000A0BB                 db    0
.eh_frame:000000000000A0BC                 db 0F4h
.eh_frame:000000000000A0BD                 db  0Ah
.eh_frame:000000000000A0BE                 db    0
.eh_frame:000000000000A0BF                 db    0
.eh_frame:000000000000A0C0                 db  10h
.eh_frame:000000000000A0C1                 db 0BBh
.eh_frame:000000000000A0C2                 db 0FFh
.eh_frame:000000000000A0C3                 db 0FFh
.eh_frame:000000000000A0C4                 db 0B6h
.eh_frame:000000000000A0C5                 db    0
.eh_frame:000000000000A0C6                 db    0
.eh_frame:000000000000A0C7                 db    0
.eh_frame:000000000000A0C8                 db    0
.eh_frame:000000000000A0C9                 db  42h ; B
.eh_frame:000000000000A0CA                 db  0Eh
.eh_frame:000000000000A0CB                 db  10h
.eh_frame:000000000000A0CC                 db  8Ch
.eh_frame:000000000000A0CD                 db    2
.eh_frame:000000000000A0CE                 db  41h ; A
.eh_frame:000000000000A0CF                 db  0Eh
.eh_frame:000000000000A0D0                 db  18h
.eh_frame:000000000000A0D1                 db  86h
.eh_frame:000000000000A0D2                 db    3
.eh_frame:000000000000A0D3                 db  44h ; D
.eh_frame:000000000000A0D4                 db  0Eh
.eh_frame:000000000000A0D5                 db  20h
.eh_frame:000000000000A0D6                 db  83h
.eh_frame:000000000000A0D7                 db    4
.eh_frame:000000000000A0D8                 db  47h ; G
.eh_frame:000000000000A0D9                 db  0Eh
.eh_frame:000000000000A0DA                 db  30h ; 0
.eh_frame:000000000000A0DB                 db    2
.eh_frame:000000000000A0DC                 db  53h ; S
.eh_frame:000000000000A0DD                 db  0Ah
.eh_frame:000000000000A0DE                 db  0Eh
.eh_frame:000000000000A0DF                 db  20h
.eh_frame:000000000000A0E0                 db  41h ; A
.eh_frame:000000000000A0E1                 db  0Eh
.eh_frame:000000000000A0E2                 db  18h
.eh_frame:000000000000A0E3                 db  41h ; A
.eh_frame:000000000000A0E4                 db  0Eh
.eh_frame:000000000000A0E5                 db  10h
.eh_frame:000000000000A0E6                 db  42h ; B
.eh_frame:000000000000A0E7                 db  0Eh
.eh_frame:000000000000A0E8                 db    8
.eh_frame:000000000000A0E9                 db  4Bh ; K
.eh_frame:000000000000A0EA                 db  0Bh
.eh_frame:000000000000A0EB                 db  49h ; I
.eh_frame:000000000000A0EC                 db  0Ah
.eh_frame:000000000000A0ED                 db  0Eh
.eh_frame:000000000000A0EE                 db  20h
.eh_frame:000000000000A0EF                 db  43h ; C
.eh_frame:000000000000A0F0                 db  0Eh
.eh_frame:000000000000A0F1                 db  18h
.eh_frame:000000000000A0F2                 db  41h ; A
.eh_frame:000000000000A0F3                 db  0Eh
.eh_frame:000000000000A0F4                 db  10h
.eh_frame:000000000000A0F5                 db  42h ; B
.eh_frame:000000000000A0F6                 db  0Eh
.eh_frame:000000000000A0F7                 db    8
.eh_frame:000000000000A0F8                 db  41h ; A
.eh_frame:000000000000A0F9                 db  0Bh
.eh_frame:000000000000A0FA                 db  47h ; G
.eh_frame:000000000000A0FB                 db  0Ah
.eh_frame:000000000000A0FC                 db  0Eh
.eh_frame:000000000000A0FD                 db  20h
.eh_frame:000000000000A0FE                 db  43h ; C
.eh_frame:000000000000A0FF                 db  0Eh
.eh_frame:000000000000A100                 db  18h
.eh_frame:000000000000A101                 db  41h ; A
.eh_frame:000000000000A102                 db  0Eh
.eh_frame:000000000000A103                 db  10h
.eh_frame:000000000000A104                 db  42h ; B
.eh_frame:000000000000A105                 db  0Eh
.eh_frame:000000000000A106                 db    8
.eh_frame:000000000000A107                 db  43h ; C
.eh_frame:000000000000A108                 db  0Bh
.eh_frame:000000000000A109                 db    0
.eh_frame:000000000000A10A                 db    0
.eh_frame:000000000000A10B                 db    0
.eh_frame:000000000000A10C                 db    0
.eh_frame:000000000000A10D                 db    0
.eh_frame:000000000000A10E                 db    0
.eh_frame:000000000000A10F                 db    0
.eh_frame:000000000000A110                 db  4Ch ; L
.eh_frame:000000000000A111                 db    0
.eh_frame:000000000000A112                 db    0
.eh_frame:000000000000A113                 db    0
.eh_frame:000000000000A114                 db  4Ch ; L
.eh_frame:000000000000A115                 db  0Bh
.eh_frame:000000000000A116                 db    0
.eh_frame:000000000000A117                 db    0
.eh_frame:000000000000A118                 db  78h ; x
.eh_frame:000000000000A119                 db 0BBh
.eh_frame:000000000000A11A                 db 0FFh
.eh_frame:000000000000A11B                 db 0FFh
.eh_frame:000000000000A11C                 db  7Dh ; }
.eh_frame:000000000000A11D                 db    0
.eh_frame:000000000000A11E                 db    0
.eh_frame:000000000000A11F                 db    0
.eh_frame:000000000000A120                 db    0
.eh_frame:000000000000A121                 db  42h ; B
.eh_frame:000000000000A122                 db  0Eh
.eh_frame:000000000000A123                 db  10h
.eh_frame:000000000000A124                 db  8Ch
.eh_frame:000000000000A125                 db    2
.eh_frame:000000000000A126                 db  41h ; A
.eh_frame:000000000000A127                 db  0Eh
.eh_frame:000000000000A128                 db  18h
.eh_frame:000000000000A129                 db  86h
.eh_frame:000000000000A12A                 db    3
.eh_frame:000000000000A12B                 db  44h ; D
.eh_frame:000000000000A12C                 db  0Eh
.eh_frame:000000000000A12D                 db  20h
.eh_frame:000000000000A12E                 db  83h
.eh_frame:000000000000A12F                 db    4
.eh_frame:000000000000A130                 db  69h ; i
.eh_frame:000000000000A131                 db  0Ah
.eh_frame:000000000000A132                 db  0Eh
.eh_frame:000000000000A133                 db  18h
.eh_frame:000000000000A134                 db  41h ; A
.eh_frame:000000000000A135                 db  0Eh
.eh_frame:000000000000A136                 db  10h
.eh_frame:000000000000A137                 db  42h ; B
.eh_frame:000000000000A138                 db  0Eh
.eh_frame:000000000000A139                 db    8
.eh_frame:000000000000A13A                 db  45h ; E
.eh_frame:000000000000A13B                 db  0Bh
.eh_frame:000000000000A13C                 db  55h ; U
.eh_frame:000000000000A13D                 db  0Ah
.eh_frame:000000000000A13E                 db  0Eh
.eh_frame:000000000000A13F                 db  18h
.eh_frame:000000000000A140                 db  41h ; A
.eh_frame:000000000000A141                 db  0Eh
.eh_frame:000000000000A142                 db  10h
.eh_frame:000000000000A143                 db  42h ; B
.eh_frame:000000000000A144                 db  0Eh
.eh_frame:000000000000A145                 db    8
.eh_frame:000000000000A146                 db  48h ; H
.eh_frame:000000000000A147                 db  0Bh
.eh_frame:000000000000A148                 db  41h ; A
.eh_frame:000000000000A149                 db  0Ah
.eh_frame:000000000000A14A                 db  0Eh
.eh_frame:000000000000A14B                 db  18h
.eh_frame:000000000000A14C                 db  46h ; F
.eh_frame:000000000000A14D                 db  0Eh
.eh_frame:000000000000A14E                 db  10h
.eh_frame:000000000000A14F                 db  42h ; B
.eh_frame:000000000000A150                 db  0Eh
.eh_frame:000000000000A151                 db    8
.eh_frame:000000000000A152                 db  47h ; G
.eh_frame:000000000000A153                 db  0Bh
.eh_frame:000000000000A154                 db  49h ; I
.eh_frame:000000000000A155                 db  0Eh
.eh_frame:000000000000A156                 db  18h
.eh_frame:000000000000A157                 db  41h ; A
.eh_frame:000000000000A158                 db  0Eh
.eh_frame:000000000000A159                 db  10h
.eh_frame:000000000000A15A                 db  42h ; B
.eh_frame:000000000000A15B                 db  0Eh
.eh_frame:000000000000A15C                 db    8
.eh_frame:000000000000A15D                 db    0
.eh_frame:000000000000A15E                 db    0
.eh_frame:000000000000A15F                 db    0
.eh_frame:000000000000A160                 db  1Ch
.eh_frame:000000000000A161                 db    0
.eh_frame:000000000000A162                 db    0
.eh_frame:000000000000A163                 db    0
.eh_frame:000000000000A164                 db  9Ch
.eh_frame:000000000000A165                 db  0Bh
.eh_frame:000000000000A166                 db    0
.eh_frame:000000000000A167                 db    0
.eh_frame:000000000000A168                 db 0A8h
.eh_frame:000000000000A169                 db 0BBh
.eh_frame:000000000000A16A                 db 0FFh
.eh_frame:000000000000A16B                 db 0FFh
.eh_frame:000000000000A16C                 db  60h ; `
.eh_frame:000000000000A16D                 db    0
.eh_frame:000000000000A16E                 db    0
.eh_frame:000000000000A16F                 db    0
.eh_frame:000000000000A170                 db    0
.eh_frame:000000000000A171                 db  44h ; D
.eh_frame:000000000000A172                 db  0Eh
.eh_frame:000000000000A173                 db  10h
.eh_frame:000000000000A174                 db  75h ; u
.eh_frame:000000000000A175                 db  0Ah
.eh_frame:000000000000A176                 db  0Eh
.eh_frame:000000000000A177                 db    8
.eh_frame:000000000000A178                 db  47h ; G
.eh_frame:000000000000A179                 db  0Bh
.eh_frame:000000000000A17A                 db  5Fh ; _
.eh_frame:000000000000A17B                 db  0Eh
.eh_frame:000000000000A17C                 db    8
.eh_frame:000000000000A17D                 db    0
.eh_frame:000000000000A17E                 db    0
.eh_frame:000000000000A17F                 db    0
.eh_frame:000000000000A180                 db  1Ch
.eh_frame:000000000000A181                 db    0
.eh_frame:000000000000A182                 db    0
.eh_frame:000000000000A183                 db    0
.eh_frame:000000000000A184                 db 0BCh
.eh_frame:000000000000A185                 db  0Bh
.eh_frame:000000000000A186                 db    0
.eh_frame:000000000000A187                 db    0
.eh_frame:000000000000A188                 db 0E8h
.eh_frame:000000000000A189                 db 0BBh
.eh_frame:000000000000A18A                 db 0FFh
.eh_frame:000000000000A18B                 db 0FFh
.eh_frame:000000000000A18C                 db  3Ch ; <
.eh_frame:000000000000A18D                 db    0
.eh_frame:000000000000A18E                 db    0
.eh_frame:000000000000A18F                 db    0
.eh_frame:000000000000A190                 db    0
.eh_frame:000000000000A191                 db  44h ; D
.eh_frame:000000000000A192                 db  0Eh
.eh_frame:000000000000A193                 db  10h
.eh_frame:000000000000A194                 db  61h ; a
.eh_frame:000000000000A195                 db  0Ah
.eh_frame:000000000000A196                 db  0Eh
.eh_frame:000000000000A197                 db    8
.eh_frame:000000000000A198                 db  4Bh ; K
.eh_frame:000000000000A199                 db  0Bh
.eh_frame:000000000000A19A                 db  4Bh ; K
.eh_frame:000000000000A19B                 db  0Eh
.eh_frame:000000000000A19C                 db    8
.eh_frame:000000000000A19D                 db    0
.eh_frame:000000000000A19E                 db    0
.eh_frame:000000000000A19F                 db    0
.eh_frame:000000000000A1A0                 db  34h ; 4
.eh_frame:000000000000A1A1                 db    0
.eh_frame:000000000000A1A2                 db    0
.eh_frame:000000000000A1A3                 db    0
.eh_frame:000000000000A1A4                 db 0DCh
.eh_frame:000000000000A1A5                 db  0Bh
.eh_frame:000000000000A1A6                 db    0
.eh_frame:000000000000A1A7                 db    0
.eh_frame:000000000000A1A8                 db    8
.eh_frame:000000000000A1A9                 db 0BCh
.eh_frame:000000000000A1AA                 db 0FFh
.eh_frame:000000000000A1AB                 db 0FFh
.eh_frame:000000000000A1AC                 db  7Bh ; {
.eh_frame:000000000000A1AD                 db    0
.eh_frame:000000000000A1AE                 db    0
.eh_frame:000000000000A1AF                 db    0
.eh_frame:000000000000A1B0                 db    0
.eh_frame:000000000000A1B1                 db  42h ; B
.eh_frame:000000000000A1B2                 db  0Eh
.eh_frame:000000000000A1B3                 db  10h
.eh_frame:000000000000A1B4                 db  8Ch
.eh_frame:000000000000A1B5                 db    2
.eh_frame:000000000000A1B6                 db  41h ; A
.eh_frame:000000000000A1B7                 db  0Eh
.eh_frame:000000000000A1B8                 db  18h
.eh_frame:000000000000A1B9                 db  86h
.eh_frame:000000000000A1BA                 db    3
.eh_frame:000000000000A1BB                 db  41h ; A
.eh_frame:000000000000A1BC                 db  0Eh
.eh_frame:000000000000A1BD                 db  20h
.eh_frame:000000000000A1BE                 db  83h
.eh_frame:000000000000A1BF                 db    4
.eh_frame:000000000000A1C0                 db  7Dh ; }
.eh_frame:000000000000A1C1                 db  0Ah
.eh_frame:000000000000A1C2                 db  0Eh
.eh_frame:000000000000A1C3                 db  18h
.eh_frame:000000000000A1C4                 db  41h ; A
.eh_frame:000000000000A1C5                 db  0Eh
.eh_frame:000000000000A1C6                 db  10h
.eh_frame:000000000000A1C7                 db  42h ; B
.eh_frame:000000000000A1C8                 db  0Eh
.eh_frame:000000000000A1C9                 db    8
.eh_frame:000000000000A1CA                 db  44h ; D
.eh_frame:000000000000A1CB                 db  0Bh
.eh_frame:000000000000A1CC                 db  60h ; `
.eh_frame:000000000000A1CD                 db  0Ah
.eh_frame:000000000000A1CE                 db  0Eh
.eh_frame:000000000000A1CF                 db  18h
.eh_frame:000000000000A1D0                 db  41h ; A
.eh_frame:000000000000A1D1                 db  0Eh
.eh_frame:000000000000A1D2                 db  10h
.eh_frame:000000000000A1D3                 db  42h ; B
.eh_frame:000000000000A1D4                 db  0Eh
.eh_frame:000000000000A1D5                 db    8
.eh_frame:000000000000A1D6                 db  45h ; E
.eh_frame:000000000000A1D7                 db  0Bh
.eh_frame:000000000000A1D8                 db  1Ch
.eh_frame:000000000000A1D9                 db    0
.eh_frame:000000000000A1DA                 db    0
.eh_frame:000000000000A1DB                 db    0
.eh_frame:000000000000A1DC                 db  14h
.eh_frame:000000000000A1DD                 db  0Ch
.eh_frame:000000000000A1DE                 db    0
.eh_frame:000000000000A1DF                 db    0
.eh_frame:000000000000A1E0                 db  50h ; P
.eh_frame:000000000000A1E1                 db 0BCh
.eh_frame:000000000000A1E2                 db 0FFh
.eh_frame:000000000000A1E3                 db 0FFh
.eh_frame:000000000000A1E4                 db  40h ; @
.eh_frame:000000000000A1E5                 db    0
.eh_frame:000000000000A1E6                 db    0
.eh_frame:000000000000A1E7                 db    0
.eh_frame:000000000000A1E8                 db    0
.eh_frame:000000000000A1E9                 db  44h ; D
.eh_frame:000000000000A1EA                 db  0Eh
.eh_frame:000000000000A1EB                 db  10h
.eh_frame:000000000000A1EC                 db  83h
.eh_frame:000000000000A1ED                 db    2
.eh_frame:000000000000A1EE                 db  5Ah ; Z
.eh_frame:000000000000A1EF                 db  0Ah
.eh_frame:000000000000A1F0                 db  0Eh
.eh_frame:000000000000A1F1                 db    8
.eh_frame:000000000000A1F2                 db  4Ah ; J
.eh_frame:000000000000A1F3                 db  0Bh
.eh_frame:000000000000A1F4                 db  53h ; S
.eh_frame:000000000000A1F5                 db  0Eh
.eh_frame:000000000000A1F6                 db    8
.eh_frame:000000000000A1F7                 db    0
.eh_frame:000000000000A1F8                 db  2Ch ; ,
.eh_frame:000000000000A1F9                 db    0
.eh_frame:000000000000A1FA                 db    0
.eh_frame:000000000000A1FB                 db    0
.eh_frame:000000000000A1FC                 db  34h ; 4
.eh_frame:000000000000A1FD                 db  0Ch
.eh_frame:000000000000A1FE                 db    0
.eh_frame:000000000000A1FF                 db    0
.eh_frame:000000000000A200                 db  70h ; p
.eh_frame:000000000000A201                 db 0BCh
.eh_frame:000000000000A202                 db 0FFh
.eh_frame:000000000000A203                 db 0FFh
.eh_frame:000000000000A204                 db  57h ; W
.eh_frame:000000000000A205                 db    0
.eh_frame:000000000000A206                 db    0
.eh_frame:000000000000A207                 db    0
.eh_frame:000000000000A208                 db    0
.eh_frame:000000000000A209                 db  63h ; c
.eh_frame:000000000000A20A                 db  0Eh
.eh_frame:000000000000A20B                 db  10h
.eh_frame:000000000000A20C                 db  8Ch
.eh_frame:000000000000A20D                 db    2
.eh_frame:000000000000A20E                 db  41h ; A
.eh_frame:000000000000A20F                 db  0Eh
.eh_frame:000000000000A210                 db  18h
.eh_frame:000000000000A211                 db  86h
.eh_frame:000000000000A212                 db    3
.eh_frame:000000000000A213                 db  44h ; D
.eh_frame:000000000000A214                 db  0Eh
.eh_frame:000000000000A215                 db  20h
.eh_frame:000000000000A216                 db  83h
.eh_frame:000000000000A217                 db    4
.eh_frame:000000000000A218                 db  6Bh ; k
.eh_frame:000000000000A219                 db  0Eh
.eh_frame:000000000000A21A                 db  18h
.eh_frame:000000000000A21B                 db  41h ; A
.eh_frame:000000000000A21C                 db  0Eh
.eh_frame:000000000000A21D                 db  10h
.eh_frame:000000000000A21E                 db  42h ; B
.eh_frame:000000000000A21F                 db  0Eh
.eh_frame:000000000000A220                 db    8
.eh_frame:000000000000A221                 db    0
.eh_frame:000000000000A222                 db    0
.eh_frame:000000000000A223                 db    0
.eh_frame:000000000000A224                 db    0
.eh_frame:000000000000A225                 db    0
.eh_frame:000000000000A226                 db    0
.eh_frame:000000000000A227                 db    0
.eh_frame:000000000000A228                 db  2Ch ; ,
.eh_frame:000000000000A229                 db    0
.eh_frame:000000000000A22A                 db    0
.eh_frame:000000000000A22B                 db    0
.eh_frame:000000000000A22C                 db  64h ; d
.eh_frame:000000000000A22D                 db  0Ch
.eh_frame:000000000000A22E                 db    0
.eh_frame:000000000000A22F                 db    0
.eh_frame:000000000000A230                 db 0A0h
.eh_frame:000000000000A231                 db 0BCh
.eh_frame:000000000000A232                 db 0FFh
.eh_frame:000000000000A233                 db 0FFh
.eh_frame:000000000000A234                 db  1Fh
.eh_frame:000000000000A235                 db  11h
.eh_frame:000000000000A236                 db    0
.eh_frame:000000000000A237                 db    0
.eh_frame:000000000000A238                 db    0
.eh_frame:000000000000A239                 db  41h ; A
.eh_frame:000000000000A23A                 db  0Eh
.eh_frame:000000000000A23B                 db  10h
.eh_frame:000000000000A23C                 db  86h
.eh_frame:000000000000A23D                 db    2
.eh_frame:000000000000A23E                 db  43h ; C
.eh_frame:000000000000A23F                 db  0Dh
.eh_frame:000000000000A240                 db    6
.eh_frame:000000000000A241                 db  48h ; H
.eh_frame:000000000000A242                 db  8Fh
.eh_frame:000000000000A243                 db    3
.eh_frame:000000000000A244                 db  8Eh
.eh_frame:000000000000A245                 db    4
.eh_frame:000000000000A246                 db  8Dh
.eh_frame:000000000000A247                 db    5
.eh_frame:000000000000A248                 db  8Ch
.eh_frame:000000000000A249                 db    6
.eh_frame:000000000000A24A                 db  48h ; H
.eh_frame:000000000000A24B                 db  83h
.eh_frame:000000000000A24C                 db    7
.eh_frame:000000000000A24D                 db    3
.eh_frame:000000000000A24E                 db 0EFh
.eh_frame:000000000000A24F                 db    1
.eh_frame:000000000000A250                 db  0Ah
.eh_frame:000000000000A251                 db  0Ch
.eh_frame:000000000000A252                 db    7
.eh_frame:000000000000A253                 db    8
.eh_frame:000000000000A254                 db  45h ; E
.eh_frame:000000000000A255                 db  0Bh
.eh_frame:000000000000A256                 db    0
.eh_frame:000000000000A257                 db    0
.eh_frame:000000000000A258                 db  14h
.eh_frame:000000000000A259                 db    0
.eh_frame:000000000000A25A                 db    0
.eh_frame:000000000000A25B                 db    0
.eh_frame:000000000000A25C                 db  94h
.eh_frame:000000000000A25D                 db  0Ch
.eh_frame:000000000000A25E                 db    0
.eh_frame:000000000000A25F                 db    0
.eh_frame:000000000000A260                 db  90h
.eh_frame:000000000000A261                 db 0CDh
.eh_frame:000000000000A262                 db 0FFh
.eh_frame:000000000000A263                 db 0FFh
.eh_frame:000000000000A264                 db 0FEh
.eh_frame:000000000000A265                 db    1
.eh_frame:000000000000A266                 db    0
.eh_frame:000000000000A267                 db    0
.eh_frame:000000000000A268                 db    0
.eh_frame:000000000000A269                 db    0
.eh_frame:000000000000A26A                 db    0
.eh_frame:000000000000A26B                 db    0
.eh_frame:000000000000A26C                 db    0
.eh_frame:000000000000A26D                 db    0
.eh_frame:000000000000A26E                 db    0
.eh_frame:000000000000A26F                 db    0
.eh_frame:000000000000A270                 db  4Ch ; L
.eh_frame:000000000000A271                 db    0
.eh_frame:000000000000A272                 db    0
.eh_frame:000000000000A273                 db    0
.eh_frame:000000000000A274                 db 0ACh
.eh_frame:000000000000A275                 db  0Ch
.eh_frame:000000000000A276                 db    0
.eh_frame:000000000000A277                 db    0
.eh_frame:000000000000A278                 db  78h ; x
.eh_frame:000000000000A279                 db 0CFh
.eh_frame:000000000000A27A                 db 0FFh
.eh_frame:000000000000A27B                 db 0FFh
.eh_frame:000000000000A27C                 db 0ECh
.eh_frame:000000000000A27D                 db  0Ch
.eh_frame:000000000000A27E                 db    0
.eh_frame:000000000000A27F                 db    0
.eh_frame:000000000000A280                 db    0
.eh_frame:000000000000A281                 db  42h ; B
.eh_frame:000000000000A282                 db  0Eh
.eh_frame:000000000000A283                 db  10h
.eh_frame:000000000000A284                 db  8Fh
.eh_frame:000000000000A285                 db    2
.eh_frame:000000000000A286                 db  42h ; B
.eh_frame:000000000000A287                 db  0Eh
.eh_frame:000000000000A288                 db  18h
.eh_frame:000000000000A289                 db  8Eh
.eh_frame:000000000000A28A                 db    3
.eh_frame:000000000000A28B                 db  46h ; F
.eh_frame:000000000000A28C                 db  0Eh
.eh_frame:000000000000A28D                 db  20h
.eh_frame:000000000000A28E                 db  8Dh
.eh_frame:000000000000A28F                 db    4
.eh_frame:000000000000A290                 db  42h ; B
.eh_frame:000000000000A291                 db  0Eh
.eh_frame:000000000000A292                 db  28h ; (
.eh_frame:000000000000A293                 db  8Ch
.eh_frame:000000000000A294                 db    5
.eh_frame:000000000000A295                 db  45h ; E
.eh_frame:000000000000A296                 db  0Eh
.eh_frame:000000000000A297                 db  30h ; 0
.eh_frame:000000000000A298                 db  86h
.eh_frame:000000000000A299                 db    6
.eh_frame:000000000000A29A                 db  41h ; A
.eh_frame:000000000000A29B                 db  0Eh
.eh_frame:000000000000A29C                 db  38h ; 8
.eh_frame:000000000000A29D                 db  83h
.eh_frame:000000000000A29E                 db    7
.eh_frame:000000000000A29F                 db  52h ; R
.eh_frame:000000000000A2A0                 db  0Eh
.eh_frame:000000000000A2A1                 db  90h
.eh_frame:000000000000A2A2                 db    1
.eh_frame:000000000000A2A3                 db    2
.eh_frame:000000000000A2A4                 db  82h
.eh_frame:000000000000A2A5                 db  0Ah
.eh_frame:000000000000A2A6                 db  0Eh
.eh_frame:000000000000A2A7                 db  38h ; 8
.eh_frame:000000000000A2A8                 db  41h ; A
.eh_frame:000000000000A2A9                 db  0Eh
.eh_frame:000000000000A2AA                 db  30h ; 0
.eh_frame:000000000000A2AB                 db  41h ; A
.eh_frame:000000000000A2AC                 db  0Eh
.eh_frame:000000000000A2AD                 db  28h ; (
.eh_frame:000000000000A2AE                 db  42h ; B
.eh_frame:000000000000A2AF                 db  0Eh
.eh_frame:000000000000A2B0                 db  20h
.eh_frame:000000000000A2B1                 db  42h ; B
.eh_frame:000000000000A2B2                 db  0Eh
.eh_frame:000000000000A2B3                 db  18h
.eh_frame:000000000000A2B4                 db  42h ; B
.eh_frame:000000000000A2B5                 db  0Eh
.eh_frame:000000000000A2B6                 db  10h
.eh_frame:000000000000A2B7                 db  42h ; B
.eh_frame:000000000000A2B8                 db  0Eh
.eh_frame:000000000000A2B9                 db    8
.eh_frame:000000000000A2BA                 db  48h ; H
.eh_frame:000000000000A2BB                 db  0Bh
.eh_frame:000000000000A2BC                 db    0
.eh_frame:000000000000A2BD                 db    0
.eh_frame:000000000000A2BE                 db    0
.eh_frame:000000000000A2BF                 db    0
.eh_frame:000000000000A2C0                 db  44h ; D
.eh_frame:000000000000A2C1                 db    0
.eh_frame:000000000000A2C2                 db    0
.eh_frame:000000000000A2C3                 db    0
.eh_frame:000000000000A2C4                 db 0FCh
.eh_frame:000000000000A2C5                 db  0Ch
.eh_frame:000000000000A2C6                 db    0
.eh_frame:000000000000A2C7                 db    0
.eh_frame:000000000000A2C8                 db  18h
.eh_frame:000000000000A2C9                 db 0DCh
.eh_frame:000000000000A2CA                 db 0FFh
.eh_frame:000000000000A2CB                 db 0FFh
.eh_frame:000000000000A2CC                 db  65h ; e
.eh_frame:000000000000A2CD                 db    0
.eh_frame:000000000000A2CE                 db    0
.eh_frame:000000000000A2CF                 db    0
.eh_frame:000000000000A2D0                 db    0
.eh_frame:000000000000A2D1                 db  42h ; B
.eh_frame:000000000000A2D2                 db  0Eh
.eh_frame:000000000000A2D3                 db  10h
.eh_frame:000000000000A2D4                 db  8Fh
.eh_frame:000000000000A2D5                 db    2
.eh_frame:000000000000A2D6                 db  42h ; B
.eh_frame:000000000000A2D7                 db  0Eh
.eh_frame:000000000000A2D8                 db  18h
.eh_frame:000000000000A2D9                 db  8Eh
.eh_frame:000000000000A2DA                 db    3
.eh_frame:000000000000A2DB                 db  45h ; E
.eh_frame:000000000000A2DC                 db  0Eh
.eh_frame:000000000000A2DD                 db  20h
.eh_frame:000000000000A2DE                 db  8Dh
.eh_frame:000000000000A2DF                 db    4
.eh_frame:000000000000A2E0                 db  42h ; B
.eh_frame:000000000000A2E1                 db  0Eh
.eh_frame:000000000000A2E2                 db  28h ; (
.eh_frame:000000000000A2E3                 db  8Ch
.eh_frame:000000000000A2E4                 db    5
.eh_frame:000000000000A2E5                 db  48h ; H
.eh_frame:000000000000A2E6                 db  0Eh
.eh_frame:000000000000A2E7                 db  30h ; 0
.eh_frame:000000000000A2E8                 db  86h
.eh_frame:000000000000A2E9                 db    6
.eh_frame:000000000000A2EA                 db  48h ; H
.eh_frame:000000000000A2EB                 db  0Eh
.eh_frame:000000000000A2EC                 db  38h ; 8
.eh_frame:000000000000A2ED                 db  83h
.eh_frame:000000000000A2EE                 db    7
.eh_frame:000000000000A2EF                 db  4Dh ; M
.eh_frame:000000000000A2F0                 db  0Eh
.eh_frame:000000000000A2F1                 db  40h ; @
.eh_frame:000000000000A2F2                 db  72h ; r
.eh_frame:000000000000A2F3                 db  0Eh
.eh_frame:000000000000A2F4                 db  38h ; 8
.eh_frame:000000000000A2F5                 db  41h ; A
.eh_frame:000000000000A2F6                 db  0Eh
.eh_frame:000000000000A2F7                 db  30h ; 0
.eh_frame:000000000000A2F8                 db  41h ; A
.eh_frame:000000000000A2F9                 db  0Eh
.eh_frame:000000000000A2FA                 db  28h ; (
.eh_frame:000000000000A2FB                 db  42h ; B
.eh_frame:000000000000A2FC                 db  0Eh
.eh_frame:000000000000A2FD                 db  20h
.eh_frame:000000000000A2FE                 db  42h ; B
.eh_frame:000000000000A2FF                 db  0Eh
.eh_frame:000000000000A300                 db  18h
.eh_frame:000000000000A301                 db  42h ; B
.eh_frame:000000000000A302                 db  0Eh
.eh_frame:000000000000A303                 db  10h
.eh_frame:000000000000A304                 db  42h ; B
.eh_frame:000000000000A305                 db  0Eh
.eh_frame:000000000000A306                 db    8
.eh_frame:000000000000A307                 db    0
.eh_frame:000000000000A308                 db  14h
.eh_frame:000000000000A309                 db    0
.eh_frame:000000000000A30A                 db    0
.eh_frame:000000000000A30B                 db    0
.eh_frame:000000000000A30C                 db  44h ; D
.eh_frame:000000000000A30D                 db  0Dh
.eh_frame:000000000000A30E                 db    0
.eh_frame:000000000000A30F                 db    0
.eh_frame:000000000000A310                 db  40h ; @
.eh_frame:000000000000A311                 db 0DCh
.eh_frame:000000000000A312                 db 0FFh
.eh_frame:000000000000A313                 db 0FFh
.eh_frame:000000000000A314                 db    2
.eh_frame:000000000000A315                 db    0
.eh_frame:000000000000A316                 db    0
.eh_frame:000000000000A317                 db    0
.eh_frame:000000000000A318                 db    0
.eh_frame:000000000000A319                 db    0
.eh_frame:000000000000A31A                 db    0
.eh_frame:000000000000A31B                 db    0
.eh_frame:000000000000A31C                 db    0
.eh_frame:000000000000A31D                 db    0
.eh_frame:000000000000A31E                 db    0
.eh_frame:000000000000A31F                 db    0
.eh_frame:000000000000A320                 db  10h
.eh_frame:000000000000A321                 db    0
.eh_frame:000000000000A322                 db    0
.eh_frame:000000000000A323                 db    0
.eh_frame:000000000000A324                 db  5Ch ; \
.eh_frame:000000000000A325                 db  0Dh
.eh_frame:000000000000A326                 db    0
.eh_frame:000000000000A327                 db    0
.eh_frame:000000000000A328                 db  38h ; 8
.eh_frame:000000000000A329                 db 0DCh
.eh_frame:000000000000A32A                 db 0FFh
.eh_frame:000000000000A32B                 db 0FFh
.eh_frame:000000000000A32C                 db  0Eh
.eh_frame:000000000000A32D                 db    0
.eh_frame:000000000000A32E                 db    0
.eh_frame:000000000000A32F                 db    0
.eh_frame:000000000000A330                 db    0
.eh_frame:000000000000A331                 db    0
.eh_frame:000000000000A332                 db    0
.eh_frame:000000000000A333                 db    0
.eh_frame:000000000000A334 __FRAME_END__   db    0
.eh_frame:000000000000A335                 db    0
.eh_frame:000000000000A336                 db    0
.eh_frame:000000000000A337                 db    0
.eh_frame:000000000000A337 _eh_frame       ends
.eh_frame:000000000000A337
.init_array:000000000020AAF0 ; ELF Initialization Function Table
.init_array:000000000020AAF0 ; ===========================================================================
.init_array:000000000020AAF0
.init_array:000000000020AAF0 ; Segment type: Pure data
.init_array:000000000020AAF0 ; Segment permissions: Read/Write
.init_array:000000000020AAF0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020AAF0                 assume cs:_init_array
.init_array:000000000020AAF0                 ;org 20AAF0h
.init_array:000000000020AAF0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020AAF0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020AAF0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020AAF0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020AAF0
.fini_array:000000000020AAF8 ; ELF Termination Function Table
.fini_array:000000000020AAF8 ; ===========================================================================
.fini_array:000000000020AAF8
.fini_array:000000000020AAF8 ; Segment type: Pure data
.fini_array:000000000020AAF8 ; Segment permissions: Read/Write
.fini_array:000000000020AAF8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020AAF8                 assume cs:_fini_array
.fini_array:000000000020AAF8                 ;org 20AAF8h
.fini_array:000000000020AAF8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020AAF8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020AAF8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020AAF8
.data.rel.ro:000000000020AB00 ; ===========================================================================
.data.rel.ro:000000000020AB00
.data.rel.ro:000000000020AB00 ; Segment type: Pure data
.data.rel.ro:000000000020AB00 ; Segment permissions: Read/Write
.data.rel.ro:000000000020AB00 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020AB00                 assume cs:_data_rel_ro
.data.rel.ro:000000000020AB00                 ;org 20AB00h
.data.rel.ro:000000000020AB00 ; struct option long_options
.data.rel.ro:000000000020AB00 long_options    dq offset aEqualWidth   ; name
.data.rel.ro:000000000020AB00                                         ; DATA XREF: main+10↑o
.data.rel.ro:000000000020AB00                 dd 0                    ; has_arg ; "equal-width"
.data.rel.ro:000000000020AB00                 db 4 dup(0)
.data.rel.ro:000000000020AB00                 dq 0                    ; flag
.data.rel.ro:000000000020AB00                 dd 77h                  ; val
.data.rel.ro:000000000020AB00                 db 4 dup(0)
.data.rel.ro:000000000020AB20                 dq offset aFormat       ; "format"
.data.rel.ro:000000000020AB28                 db    1
.data.rel.ro:000000000020AB29                 db    0
.data.rel.ro:000000000020AB2A                 db    0
.data.rel.ro:000000000020AB2B                 db    0
.data.rel.ro:000000000020AB2C                 db    0
.data.rel.ro:000000000020AB2D                 db    0
.data.rel.ro:000000000020AB2E                 db    0
.data.rel.ro:000000000020AB2F                 db    0
.data.rel.ro:000000000020AB30                 db    0
.data.rel.ro:000000000020AB31                 db    0
.data.rel.ro:000000000020AB32                 db    0
.data.rel.ro:000000000020AB33                 db    0
.data.rel.ro:000000000020AB34                 db    0
.data.rel.ro:000000000020AB35                 db    0
.data.rel.ro:000000000020AB36                 db    0
.data.rel.ro:000000000020AB37                 db    0
.data.rel.ro:000000000020AB38                 db  66h ; f
.data.rel.ro:000000000020AB39                 db    0
.data.rel.ro:000000000020AB3A                 db    0
.data.rel.ro:000000000020AB3B                 db    0
.data.rel.ro:000000000020AB3C                 db    0
.data.rel.ro:000000000020AB3D                 db    0
.data.rel.ro:000000000020AB3E                 db    0
.data.rel.ro:000000000020AB3F                 db    0
.data.rel.ro:000000000020AB40                 dq offset aSeparator    ; "separator"
.data.rel.ro:000000000020AB48                 db    1
.data.rel.ro:000000000020AB49                 db    0
.data.rel.ro:000000000020AB4A                 db    0
.data.rel.ro:000000000020AB4B                 db    0
.data.rel.ro:000000000020AB4C                 db    0
.data.rel.ro:000000000020AB4D                 db    0
.data.rel.ro:000000000020AB4E                 db    0
.data.rel.ro:000000000020AB4F                 db    0
.data.rel.ro:000000000020AB50                 db    0
.data.rel.ro:000000000020AB51                 db    0
.data.rel.ro:000000000020AB52                 db    0
.data.rel.ro:000000000020AB53                 db    0
.data.rel.ro:000000000020AB54                 db    0
.data.rel.ro:000000000020AB55                 db    0
.data.rel.ro:000000000020AB56                 db    0
.data.rel.ro:000000000020AB57                 db    0
.data.rel.ro:000000000020AB58                 db  73h ; s
.data.rel.ro:000000000020AB59                 db    0
.data.rel.ro:000000000020AB5A                 db    0
.data.rel.ro:000000000020AB5B                 db    0
.data.rel.ro:000000000020AB5C                 db    0
.data.rel.ro:000000000020AB5D                 db    0
.data.rel.ro:000000000020AB5E                 db    0
.data.rel.ro:000000000020AB5F                 db    0
.data.rel.ro:000000000020AB60                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020AB68                 db    0
.data.rel.ro:000000000020AB69                 db    0
.data.rel.ro:000000000020AB6A                 db    0
.data.rel.ro:000000000020AB6B                 db    0
.data.rel.ro:000000000020AB6C                 db    0
.data.rel.ro:000000000020AB6D                 db    0
.data.rel.ro:000000000020AB6E                 db    0
.data.rel.ro:000000000020AB6F                 db    0
.data.rel.ro:000000000020AB70                 db    0
.data.rel.ro:000000000020AB71                 db    0
.data.rel.ro:000000000020AB72                 db    0
.data.rel.ro:000000000020AB73                 db    0
.data.rel.ro:000000000020AB74                 db    0
.data.rel.ro:000000000020AB75                 db    0
.data.rel.ro:000000000020AB76                 db    0
.data.rel.ro:000000000020AB77                 db    0
.data.rel.ro:000000000020AB78                 db  7Eh ; ~
.data.rel.ro:000000000020AB79                 db 0FFh
.data.rel.ro:000000000020AB7A                 db 0FFh
.data.rel.ro:000000000020AB7B                 db 0FFh
.data.rel.ro:000000000020AB7C                 db    0
.data.rel.ro:000000000020AB7D                 db    0
.data.rel.ro:000000000020AB7E                 db    0
.data.rel.ro:000000000020AB7F                 db    0
.data.rel.ro:000000000020AB80                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020AB88                 db    0
.data.rel.ro:000000000020AB89                 db    0
.data.rel.ro:000000000020AB8A                 db    0
.data.rel.ro:000000000020AB8B                 db    0
.data.rel.ro:000000000020AB8C                 db    0
.data.rel.ro:000000000020AB8D                 db    0
.data.rel.ro:000000000020AB8E                 db    0
.data.rel.ro:000000000020AB8F                 db    0
.data.rel.ro:000000000020AB90                 db    0
.data.rel.ro:000000000020AB91                 db    0
.data.rel.ro:000000000020AB92                 db    0
.data.rel.ro:000000000020AB93                 db    0
.data.rel.ro:000000000020AB94                 db    0
.data.rel.ro:000000000020AB95                 db    0
.data.rel.ro:000000000020AB96                 db    0
.data.rel.ro:000000000020AB97                 db    0
.data.rel.ro:000000000020AB98                 db  7Dh ; }
.data.rel.ro:000000000020AB99                 db 0FFh
.data.rel.ro:000000000020AB9A                 db 0FFh
.data.rel.ro:000000000020AB9B                 db 0FFh
.data.rel.ro:000000000020AB9C                 db    0
.data.rel.ro:000000000020AB9D                 db    0
.data.rel.ro:000000000020AB9E                 db    0
.data.rel.ro:000000000020AB9F                 db    0
.data.rel.ro:000000000020ABA0                 db    0
.data.rel.ro:000000000020ABA1                 db    0
.data.rel.ro:000000000020ABA2                 db    0
.data.rel.ro:000000000020ABA3                 db    0
.data.rel.ro:000000000020ABA4                 db    0
.data.rel.ro:000000000020ABA5                 db    0
.data.rel.ro:000000000020ABA6                 db    0
.data.rel.ro:000000000020ABA7                 db    0
.data.rel.ro:000000000020ABA8                 db    0
.data.rel.ro:000000000020ABA9                 db    0
.data.rel.ro:000000000020ABAA                 db    0
.data.rel.ro:000000000020ABAB                 db    0
.data.rel.ro:000000000020ABAC                 db    0
.data.rel.ro:000000000020ABAD                 db    0
.data.rel.ro:000000000020ABAE                 db    0
.data.rel.ro:000000000020ABAF                 db    0
.data.rel.ro:000000000020ABB0                 db    0
.data.rel.ro:000000000020ABB1                 db    0
.data.rel.ro:000000000020ABB2                 db    0
.data.rel.ro:000000000020ABB3                 db    0
.data.rel.ro:000000000020ABB4                 db    0
.data.rel.ro:000000000020ABB5                 db    0
.data.rel.ro:000000000020ABB6                 db    0
.data.rel.ro:000000000020ABB7                 db    0
.data.rel.ro:000000000020ABB8                 db    0
.data.rel.ro:000000000020ABB9                 db    0
.data.rel.ro:000000000020ABBA                 db    0
.data.rel.ro:000000000020ABBB                 db    0
.data.rel.ro:000000000020ABBC                 db    0
.data.rel.ro:000000000020ABBD                 db    0
.data.rel.ro:000000000020ABBE                 db    0
.data.rel.ro:000000000020ABBF                 db    0
.data.rel.ro:000000000020ABC0                 public quoting_style_args
.data.rel.ro:000000000020ABC0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020ABC8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020ABD0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020ABD8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020ABE0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020ABE8                 dq offset aC            ; "c"
.data.rel.ro:000000000020ABF0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020ABF8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020AC00                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020AC08                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020AC10                 db    0
.data.rel.ro:000000000020AC11                 db    0
.data.rel.ro:000000000020AC12                 db    0
.data.rel.ro:000000000020AC13                 db    0
.data.rel.ro:000000000020AC14                 db    0
.data.rel.ro:000000000020AC15                 db    0
.data.rel.ro:000000000020AC16                 db    0
.data.rel.ro:000000000020AC17                 db    0
.data.rel.ro:000000000020AC17 _data_rel_ro    ends
.data.rel.ro:000000000020AC17
LOAD:000000000020AC18 ; ELF Dynamic Information
LOAD:000000000020AC18 ; ===========================================================================
LOAD:000000000020AC18
LOAD:000000000020AC18 ; Segment type: Pure data
LOAD:000000000020AC18 ; Segment permissions: Read/Write
LOAD:000000000020AC18 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AC18                 assume cs:LOAD
LOAD:000000000020AC18                 ;org 20AC18h
LOAD:000000000020AC18 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020AC18                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020AC18                                         ; DT_NEEDED libc.so.6
LOAD:000000000020AC28                 Elf64_Dyn <0Ch, 1550h>  ; DT_INIT
LOAD:000000000020AC38                 Elf64_Dyn <0Dh, 7F70h>  ; DT_FINI
LOAD:000000000020AC48                 Elf64_Dyn <19h, 20AAF0h> ; DT_INIT_ARRAY
LOAD:000000000020AC58                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020AC68                 Elf64_Dyn <1Ah, 20AAF8h> ; DT_FINI_ARRAY
LOAD:000000000020AC78                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020AC88                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020AC98                 Elf64_Dyn <5, 940h>     ; DT_STRTAB
LOAD:000000000020ACA8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020ACB8                 Elf64_Dyn <0Ah, 315h>   ; DT_STRSZ
LOAD:000000000020ACC8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020ACD8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020ACE8                 Elf64_Dyn <3, 20AE08h>  ; DT_PLTGOT
LOAD:000000000020ACF8                 Elf64_Dyn <2, 510h>     ; DT_PLTRELSZ
LOAD:000000000020AD08                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020AD18                 Elf64_Dyn <17h, 1040h>  ; DT_JMPREL
LOAD:000000000020AD28                 Elf64_Dyn <7, 0D40h>    ; DT_RELA
LOAD:000000000020AD38                 Elf64_Dyn <8, 300h>     ; DT_RELASZ
LOAD:000000000020AD48                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020AD58                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020AD68                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020AD78                 Elf64_Dyn <6FFFFFFEh, 0CE0h> ; DT_VERNEED
LOAD:000000000020AD88                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020AD98                 Elf64_Dyn <6FFFFFF0h, 0C56h> ; DT_VERSYM
LOAD:000000000020ADA8                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:000000000020ADB8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020ADC8                 db    0
LOAD:000000000020ADC9                 db    0
LOAD:000000000020ADCA                 db    0
LOAD:000000000020ADCB                 db    0
LOAD:000000000020ADCC                 db    0
LOAD:000000000020ADCD                 db    0
LOAD:000000000020ADCE                 db    0
LOAD:000000000020ADCF                 db    0
LOAD:000000000020ADD0                 db    0
LOAD:000000000020ADD1                 db    0
LOAD:000000000020ADD2                 db    0
LOAD:000000000020ADD3                 db    0
LOAD:000000000020ADD4                 db    0
LOAD:000000000020ADD5                 db    0
LOAD:000000000020ADD6                 db    0
LOAD:000000000020ADD7                 db    0
LOAD:000000000020ADD8                 db    0
LOAD:000000000020ADD9                 db    0
LOAD:000000000020ADDA                 db    0
LOAD:000000000020ADDB                 db    0
LOAD:000000000020ADDC                 db    0
LOAD:000000000020ADDD                 db    0
LOAD:000000000020ADDE                 db    0
LOAD:000000000020ADDF                 db    0
LOAD:000000000020ADE0                 db    0
LOAD:000000000020ADE1                 db    0
LOAD:000000000020ADE2                 db    0
LOAD:000000000020ADE3                 db    0
LOAD:000000000020ADE4                 db    0
LOAD:000000000020ADE5                 db    0
LOAD:000000000020ADE6                 db    0
LOAD:000000000020ADE7                 db    0
LOAD:000000000020ADE8                 db    0
LOAD:000000000020ADE9                 db    0
LOAD:000000000020ADEA                 db    0
LOAD:000000000020ADEB                 db    0
LOAD:000000000020ADEC                 db    0
LOAD:000000000020ADED                 db    0
LOAD:000000000020ADEE                 db    0
LOAD:000000000020ADEF                 db    0
LOAD:000000000020ADF0                 db    0
LOAD:000000000020ADF1                 db    0
LOAD:000000000020ADF2                 db    0
LOAD:000000000020ADF3                 db    0
LOAD:000000000020ADF4                 db    0
LOAD:000000000020ADF5                 db    0
LOAD:000000000020ADF6                 db    0
LOAD:000000000020ADF7                 db    0
LOAD:000000000020ADF8                 db    0
LOAD:000000000020ADF9                 db    0
LOAD:000000000020ADFA                 db    0
LOAD:000000000020ADFB                 db    0
LOAD:000000000020ADFC                 db    0
LOAD:000000000020ADFD                 db    0
LOAD:000000000020ADFE                 db    0
LOAD:000000000020ADFF                 db    0
LOAD:000000000020AE00                 db    0
LOAD:000000000020AE01                 db    0
LOAD:000000000020AE02                 db    0
LOAD:000000000020AE03                 db    0
LOAD:000000000020AE04                 db    0
LOAD:000000000020AE05                 db    0
LOAD:000000000020AE06                 db    0
LOAD:000000000020AE07                 db    0
LOAD:000000000020AE07 LOAD            ends
LOAD:000000000020AE07
.got:000000000020AE08 ; ===========================================================================
.got:000000000020AE08
.got:000000000020AE08 ; Segment type: Pure data
.got:000000000020AE08 ; Segment permissions: Read/Write
.got:000000000020AE08 _got            segment qword public 'DATA' use64
.got:000000000020AE08                 assume cs:_got
.got:000000000020AE08                 ;org 20AE08h
.got:000000000020AE08 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020AE10 qword_20AE10    dq 0                    ; DATA XREF: sub_1570↑r
.got:000000000020AE18 qword_20AE18    dq 0                    ; DATA XREF: sub_1570+6↑r
.got:000000000020AE20 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000020AE20                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000020AE28 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020AE30 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020AE38 __errno_location_ptr dq offset __errno_location
.got:000000000020AE38                                         ; DATA XREF: ___errno_location↑r
.got:000000000020AE40 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020AE48 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020AE50 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020AE58 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020AE60 clearerr_unlocked_ptr dq offset clearerr_unlocked
.got:000000000020AE60                                         ; DATA XREF: _clearerr_unlocked↑r
.got:000000000020AE68 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020AE70 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020AE78 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020AE78                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020AE80 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020AE88 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020AE88                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020AE90 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020AE98 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020AE98                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020AEA0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020AEA8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020AEB0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020AEB8 newlocale_ptr   dq offset newlocale     ; DATA XREF: _newlocale↑r
.got:000000000020AEC0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020AEC8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020AED0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020AED8 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000020AEE0 strcspn_ptr     dq offset strcspn       ; DATA XREF: _strcspn↑r
.got:000000000020AEE8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020AEF0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020AEF0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020AEF8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020AF00 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020AF08 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:000000000020AF10 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020AF18 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020AF20 uselocale_ptr   dq offset uselocale     ; DATA XREF: _uselocale↑r
.got:000000000020AF28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020AF30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020AF38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020AF40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020AF48 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020AF48                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020AF50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020AF58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020AF60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020AF68 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000020AF70 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020AF78 strtold_ptr     dq offset strtold       ; DATA XREF: _strtold↑r
.got:000000000020AF80 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020AF88 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020AF90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020AF98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020AFA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020AFA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020AFA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020AFB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020AFB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020AFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020AFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020AFC8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000020AFC8                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000020AFD0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020AFD0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020AFD8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020AFD8                                         ; DATA XREF: start+24↑r
.got:000000000020AFE0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020AFE0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020AFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020AFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020AFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020AFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020AFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000020AFF0 _got            ends
.got:000000000020AFF0
LOAD:000000000020AFF8 ; ===========================================================================
LOAD:000000000020AFF8
LOAD:000000000020AFF8 ; Segment type: Pure data
LOAD:000000000020AFF8 ; Segment permissions: Read/Write
LOAD:000000000020AFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020AFF8                 assume cs:LOAD
LOAD:000000000020AFF8                 ;org 20AFF8h
LOAD:000000000020AFF8                 align 20h
LOAD:000000000020AFF8 LOAD            ends
LOAD:000000000020AFF8
.data:000000000020B000 ; ===========================================================================
.data:000000000020B000
.data:000000000020B000 ; Segment type: Pure data
.data:000000000020B000 ; Segment permissions: Read/Write
.data:000000000020B000 _data           segment align_32 public 'DATA' use64
.data:000000000020B000                 assume cs:_data
.data:000000000020B000                 ;org 20B000h
.data:000000000020B000                 public __data_start ; weak
.data:000000000020B000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020B000                                         ; data_start
.data:000000000020B001                 db    0
.data:000000000020B002                 db    0
.data:000000000020B003                 db    0
.data:000000000020B004                 db    0
.data:000000000020B005                 db    0
.data:000000000020B006                 db    0
.data:000000000020B007                 db    0
.data:000000000020B008                 public __dso_handle
.data:000000000020B008 ; void *_dso_handle
.data:000000000020B008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020B008                                         ; atexit↑r ...
.data:000000000020B010                 public Version
.data:000000000020B010 Version         dq offset a831          ; DATA XREF: main+18A↑r
.data:000000000020B010                                         ; "8.31"
.data:000000000020B018                 public exit_failure
.data:000000000020B018 ; int exit_failure
.data:000000000020B018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3332↑r
.data:000000000020B018                                         ; xalloc_die+17↑r
.data:000000000020B01C                 align 20h
.data:000000000020B020                 public quote_quoting_options
.data:000000000020B020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020B020                                         ; quote_mem↑o ...
.data:000000000020B021                 db    0
.data:000000000020B022                 db    0
.data:000000000020B023                 db    0
.data:000000000020B024                 db    0
.data:000000000020B025                 db    0
.data:000000000020B026                 db    0
.data:000000000020B027                 db    0
.data:000000000020B028                 db    0
.data:000000000020B029                 db    0
.data:000000000020B02A                 db    0
.data:000000000020B02B                 db    0
.data:000000000020B02C                 db    0
.data:000000000020B02D                 db    0
.data:000000000020B02E                 db    0
.data:000000000020B02F                 db    0
.data:000000000020B030                 db    0
.data:000000000020B031                 db    0
.data:000000000020B032                 db    0
.data:000000000020B033                 db    0
.data:000000000020B034                 db    0
.data:000000000020B035                 db    0
.data:000000000020B036                 db    0
.data:000000000020B037                 db    0
.data:000000000020B038                 db    0
.data:000000000020B039                 db    0
.data:000000000020B03A                 db    0
.data:000000000020B03B                 db    0
.data:000000000020B03C                 db    0
.data:000000000020B03D                 db    0
.data:000000000020B03E                 db    0
.data:000000000020B03F                 db    0
.data:000000000020B040                 db    0
.data:000000000020B041                 db    0
.data:000000000020B042                 db    0
.data:000000000020B043                 db    0
.data:000000000020B044                 db    0
.data:000000000020B045                 db    0
.data:000000000020B046                 db    0
.data:000000000020B047                 db    0
.data:000000000020B048                 db    0
.data:000000000020B049                 db    0
.data:000000000020B04A                 db    0
.data:000000000020B04B                 db    0
.data:000000000020B04C                 db    0
.data:000000000020B04D                 db    0
.data:000000000020B04E                 db    0
.data:000000000020B04F                 db    0
.data:000000000020B050                 db    0
.data:000000000020B051                 db    0
.data:000000000020B052                 db    0
.data:000000000020B053                 db    0
.data:000000000020B054                 db    0
.data:000000000020B055                 db    0
.data:000000000020B056                 db    0
.data:000000000020B057                 db    0
.data:000000000020B058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020B058                                         ; quotearg_n_options:loc_47AD↑r ...
.data:000000000020B05C                 align 20h
.data:000000000020B060 ; void *slotvec
.data:000000000020B060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020B060                                         ; quotearg_n_options+76↑w ...
.data:000000000020B068                 align 10h
.data:000000000020B070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020B070                                         ; quotearg_n_options+187↑r ...
.data:000000000020B078 off_20B078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020B078 _data           ends
.data:000000000020B078
.bss:000000000020B080 ; ===========================================================================
.bss:000000000020B080
.bss:000000000020B080 ; Segment type: Uninitialized
.bss:000000000020B080 ; Segment permissions: Read/Write
.bss:000000000020B080 _bss            segment align_32 public 'BSS' use64
.bss:000000000020B080                 assume cs:_bss
.bss:000000000020B080                 ;org 20B080h
.bss:000000000020B080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020B080                 public __bss_start ; weak
.bss:000000000020B080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000898↑o
.bss:000000000020B080                                         ; LOAD:00000000000008E0↑o ...
.bss:000000000020B080                                         ; Alternative name is '__TMC_END__'
.bss:000000000020B080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020B080                                         ; _edata
.bss:000000000020B080                                         ; Copy of shared data
.bss:000000000020B088                 public stdout@@GLIBC_2_2_5
.bss:000000000020B088 ; FILE *stdout
.bss:000000000020B088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:000000000020B088                                         ; main+183↑r ...
.bss:000000000020B088                                         ; Alternative name is 'stdout'
.bss:000000000020B088                                         ; Copy of shared data
.bss:000000000020B090                 public optind@@GLIBC_2_2_5
.bss:000000000020B090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000910↑o
.bss:000000000020B090                                         ; main:loc_1986↑r ...
.bss:000000000020B090                                         ; Alternative name is 'optind'
.bss:000000000020B090                                         ; Copy of shared data
.bss:000000000020B094                 align 8
.bss:000000000020B098                 public optarg@@GLIBC_2_2_5
.bss:000000000020B098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000928↑o
.bss:000000000020B098                                         ; main:loc_1AB0↑r ...
.bss:000000000020B098                                         ; Alternative name is 'optarg'
.bss:000000000020B098                                         ; Copy of shared data
.bss:000000000020B0A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020B0A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020B0A0                                         ; DATA XREF: LOAD:00000000000008B0↑o
.bss:000000000020B0A0                                         ; LOAD:00000000000008C8↑o ...
.bss:000000000020B0A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020B0A0                                         ; Copy of shared data
.bss:000000000020B0A8                 align 20h
.bss:000000000020B0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000020B0C0 ; FILE *stderr
.bss:000000000020B0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008F8↑o
.bss:000000000020B0C0                                         ; usage+3D↑r ...
.bss:000000000020B0C0                                         ; Alternative name is 'stderr'
.bss:000000000020B0C0                                         ; Copy of shared data
.bss:000000000020B0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020B0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020B0C9                 align 10h
.bss:000000000020B0D0 format_buf_6939 db    ? ;               ; DATA XREF: main+8AA↑o
.bss:000000000020B0D0                                         ; main+8C5↑o ...
.bss:000000000020B0D1                 db    ? ;
.bss:000000000020B0D2                 db    ? ;
.bss:000000000020B0D3                 db    ? ;
.bss:000000000020B0D4                 db    ? ;
.bss:000000000020B0D5                 db    ? ;
.bss:000000000020B0D6                 db    ? ;
.bss:000000000020B0D7                 db    ? ;
.bss:000000000020B0D8                 db    ? ;
.bss:000000000020B0D9                 db    ? ;
.bss:000000000020B0DA                 db    ? ;
.bss:000000000020B0DB                 db    ? ;
.bss:000000000020B0DC                 db    ? ;
.bss:000000000020B0DD                 db    ? ;
.bss:000000000020B0DE                 db    ? ;
.bss:000000000020B0DF                 db    ? ;
.bss:000000000020B0E0                 db    ? ;
.bss:000000000020B0E1                 db    ? ;
.bss:000000000020B0E2                 db    ? ;
.bss:000000000020B0E3                 db    ? ;
.bss:000000000020B0E4                 db    ? ;
.bss:000000000020B0E5                 db    ? ;
.bss:000000000020B0E6                 db    ? ;
.bss:000000000020B0E7                 db    ? ;
.bss:000000000020B0E8                 db    ? ;
.bss:000000000020B0E9                 db    ? ;
.bss:000000000020B0EA                 db    ? ;
.bss:000000000020B0EB                 db    ? ;
.bss:000000000020B0EC                 db    ? ;
.bss:000000000020B0ED                 db    ? ;
.bss:000000000020B0EE                 db    ? ;
.bss:000000000020B0EF                 db    ? ;
.bss:000000000020B0F0 ; char *separator
.bss:000000000020B0F0 separator       dq ?                    ; DATA XREF: main+8F↑w
.bss:000000000020B0F0                                         ; main+1D7↑w ...
.bss:000000000020B0F8 equal_width     db ?                    ; DATA XREF: main+88↑w
.bss:000000000020B0F8                                         ; main+107↑w ...
.bss:000000000020B0F9 locale_ok       db ?                    ; DATA XREF: main+5B↑w
.bss:000000000020B0F9                                         ; main+338↑r ...
.bss:000000000020B0FA                 align 20h
.bss:000000000020B100 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020B100                                         ; close_stdout+1B↑r
.bss:000000000020B101                 align 8
.bss:000000000020B108 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020B108                                         ; close_stdout+56↑r
.bss:000000000020B110                 public program_name
.bss:000000000020B110 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020B110                                         ; set_program_name:loc_33CD↑w
.bss:000000000020B118                 align 20h
.bss:000000000020B120 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020B120                                         ; quotearg_free+46↑o ...
.bss:000000000020B121                 db    ? ;
.bss:000000000020B122                 db    ? ;
.bss:000000000020B123                 db    ? ;
.bss:000000000020B124                 db    ? ;
.bss:000000000020B125                 db    ? ;
.bss:000000000020B126                 db    ? ;
.bss:000000000020B127                 db    ? ;
.bss:000000000020B128                 db    ? ;
.bss:000000000020B129                 db    ? ;
.bss:000000000020B12A                 db    ? ;
.bss:000000000020B12B                 db    ? ;
.bss:000000000020B12C                 db    ? ;
.bss:000000000020B12D                 db    ? ;
.bss:000000000020B12E                 db    ? ;
.bss:000000000020B12F                 db    ? ;
.bss:000000000020B130                 db    ? ;
.bss:000000000020B131                 db    ? ;
.bss:000000000020B132                 db    ? ;
.bss:000000000020B133                 db    ? ;
.bss:000000000020B134                 db    ? ;
.bss:000000000020B135                 db    ? ;
.bss:000000000020B136                 db    ? ;
.bss:000000000020B137                 db    ? ;
.bss:000000000020B138                 db    ? ;
.bss:000000000020B139                 db    ? ;
.bss:000000000020B13A                 db    ? ;
.bss:000000000020B13B                 db    ? ;
.bss:000000000020B13C                 db    ? ;
.bss:000000000020B13D                 db    ? ;
.bss:000000000020B13E                 db    ? ;
.bss:000000000020B13F                 db    ? ;
.bss:000000000020B140                 db    ? ;
.bss:000000000020B141                 db    ? ;
.bss:000000000020B142                 db    ? ;
.bss:000000000020B143                 db    ? ;
.bss:000000000020B144                 db    ? ;
.bss:000000000020B145                 db    ? ;
.bss:000000000020B146                 db    ? ;
.bss:000000000020B147                 db    ? ;
.bss:000000000020B148                 db    ? ;
.bss:000000000020B149                 db    ? ;
.bss:000000000020B14A                 db    ? ;
.bss:000000000020B14B                 db    ? ;
.bss:000000000020B14C                 db    ? ;
.bss:000000000020B14D                 db    ? ;
.bss:000000000020B14E                 db    ? ;
.bss:000000000020B14F                 db    ? ;
.bss:000000000020B150                 db    ? ;
.bss:000000000020B151                 db    ? ;
.bss:000000000020B152                 db    ? ;
.bss:000000000020B153                 db    ? ;
.bss:000000000020B154                 db    ? ;
.bss:000000000020B155                 db    ? ;
.bss:000000000020B156                 db    ? ;
.bss:000000000020B157                 db    ? ;
.bss:000000000020B158                 db    ? ;
.bss:000000000020B159                 db    ? ;
.bss:000000000020B15A                 db    ? ;
.bss:000000000020B15B                 db    ? ;
.bss:000000000020B15C                 db    ? ;
.bss:000000000020B15D                 db    ? ;
.bss:000000000020B15E                 db    ? ;
.bss:000000000020B15F                 db    ? ;
.bss:000000000020B160                 db    ? ;
.bss:000000000020B161                 db    ? ;
.bss:000000000020B162                 db    ? ;
.bss:000000000020B163                 db    ? ;
.bss:000000000020B164                 db    ? ;
.bss:000000000020B165                 db    ? ;
.bss:000000000020B166                 db    ? ;
.bss:000000000020B167                 db    ? ;
.bss:000000000020B168                 db    ? ;
.bss:000000000020B169                 db    ? ;
.bss:000000000020B16A                 db    ? ;
.bss:000000000020B16B                 db    ? ;
.bss:000000000020B16C                 db    ? ;
.bss:000000000020B16D                 db    ? ;
.bss:000000000020B16E                 db    ? ;
.bss:000000000020B16F                 db    ? ;
.bss:000000000020B170                 db    ? ;
.bss:000000000020B171                 db    ? ;
.bss:000000000020B172                 db    ? ;
.bss:000000000020B173                 db    ? ;
.bss:000000000020B174                 db    ? ;
.bss:000000000020B175                 db    ? ;
.bss:000000000020B176                 db    ? ;
.bss:000000000020B177                 db    ? ;
.bss:000000000020B178                 db    ? ;
.bss:000000000020B179                 db    ? ;
.bss:000000000020B17A                 db    ? ;
.bss:000000000020B17B                 db    ? ;
.bss:000000000020B17C                 db    ? ;
.bss:000000000020B17D                 db    ? ;
.bss:000000000020B17E                 db    ? ;
.bss:000000000020B17F                 db    ? ;
.bss:000000000020B180                 db    ? ;
.bss:000000000020B181                 db    ? ;
.bss:000000000020B182                 db    ? ;
.bss:000000000020B183                 db    ? ;
.bss:000000000020B184                 db    ? ;
.bss:000000000020B185                 db    ? ;
.bss:000000000020B186                 db    ? ;
.bss:000000000020B187                 db    ? ;
.bss:000000000020B188                 db    ? ;
.bss:000000000020B189                 db    ? ;
.bss:000000000020B18A                 db    ? ;
.bss:000000000020B18B                 db    ? ;
.bss:000000000020B18C                 db    ? ;
.bss:000000000020B18D                 db    ? ;
.bss:000000000020B18E                 db    ? ;
.bss:000000000020B18F                 db    ? ;
.bss:000000000020B190                 db    ? ;
.bss:000000000020B191                 db    ? ;
.bss:000000000020B192                 db    ? ;
.bss:000000000020B193                 db    ? ;
.bss:000000000020B194                 db    ? ;
.bss:000000000020B195                 db    ? ;
.bss:000000000020B196                 db    ? ;
.bss:000000000020B197                 db    ? ;
.bss:000000000020B198                 db    ? ;
.bss:000000000020B199                 db    ? ;
.bss:000000000020B19A                 db    ? ;
.bss:000000000020B19B                 db    ? ;
.bss:000000000020B19C                 db    ? ;
.bss:000000000020B19D                 db    ? ;
.bss:000000000020B19E                 db    ? ;
.bss:000000000020B19F                 db    ? ;
.bss:000000000020B1A0                 db    ? ;
.bss:000000000020B1A1                 db    ? ;
.bss:000000000020B1A2                 db    ? ;
.bss:000000000020B1A3                 db    ? ;
.bss:000000000020B1A4                 db    ? ;
.bss:000000000020B1A5                 db    ? ;
.bss:000000000020B1A6                 db    ? ;
.bss:000000000020B1A7                 db    ? ;
.bss:000000000020B1A8                 db    ? ;
.bss:000000000020B1A9                 db    ? ;
.bss:000000000020B1AA                 db    ? ;
.bss:000000000020B1AB                 db    ? ;
.bss:000000000020B1AC                 db    ? ;
.bss:000000000020B1AD                 db    ? ;
.bss:000000000020B1AE                 db    ? ;
.bss:000000000020B1AF                 db    ? ;
.bss:000000000020B1B0                 db    ? ;
.bss:000000000020B1B1                 db    ? ;
.bss:000000000020B1B2                 db    ? ;
.bss:000000000020B1B3                 db    ? ;
.bss:000000000020B1B4                 db    ? ;
.bss:000000000020B1B5                 db    ? ;
.bss:000000000020B1B6                 db    ? ;
.bss:000000000020B1B7                 db    ? ;
.bss:000000000020B1B8                 db    ? ;
.bss:000000000020B1B9                 db    ? ;
.bss:000000000020B1BA                 db    ? ;
.bss:000000000020B1BB                 db    ? ;
.bss:000000000020B1BC                 db    ? ;
.bss:000000000020B1BD                 db    ? ;
.bss:000000000020B1BE                 db    ? ;
.bss:000000000020B1BF                 db    ? ;
.bss:000000000020B1C0                 db    ? ;
.bss:000000000020B1C1                 db    ? ;
.bss:000000000020B1C2                 db    ? ;
.bss:000000000020B1C3                 db    ? ;
.bss:000000000020B1C4                 db    ? ;
.bss:000000000020B1C5                 db    ? ;
.bss:000000000020B1C6                 db    ? ;
.bss:000000000020B1C7                 db    ? ;
.bss:000000000020B1C8                 db    ? ;
.bss:000000000020B1C9                 db    ? ;
.bss:000000000020B1CA                 db    ? ;
.bss:000000000020B1CB                 db    ? ;
.bss:000000000020B1CC                 db    ? ;
.bss:000000000020B1CD                 db    ? ;
.bss:000000000020B1CE                 db    ? ;
.bss:000000000020B1CF                 db    ? ;
.bss:000000000020B1D0                 db    ? ;
.bss:000000000020B1D1                 db    ? ;
.bss:000000000020B1D2                 db    ? ;
.bss:000000000020B1D3                 db    ? ;
.bss:000000000020B1D4                 db    ? ;
.bss:000000000020B1D5                 db    ? ;
.bss:000000000020B1D6                 db    ? ;
.bss:000000000020B1D7                 db    ? ;
.bss:000000000020B1D8                 db    ? ;
.bss:000000000020B1D9                 db    ? ;
.bss:000000000020B1DA                 db    ? ;
.bss:000000000020B1DB                 db    ? ;
.bss:000000000020B1DC                 db    ? ;
.bss:000000000020B1DD                 db    ? ;
.bss:000000000020B1DE                 db    ? ;
.bss:000000000020B1DF                 db    ? ;
.bss:000000000020B1E0                 db    ? ;
.bss:000000000020B1E1                 db    ? ;
.bss:000000000020B1E2                 db    ? ;
.bss:000000000020B1E3                 db    ? ;
.bss:000000000020B1E4                 db    ? ;
.bss:000000000020B1E5                 db    ? ;
.bss:000000000020B1E6                 db    ? ;
.bss:000000000020B1E7                 db    ? ;
.bss:000000000020B1E8                 db    ? ;
.bss:000000000020B1E9                 db    ? ;
.bss:000000000020B1EA                 db    ? ;
.bss:000000000020B1EB                 db    ? ;
.bss:000000000020B1EC                 db    ? ;
.bss:000000000020B1ED                 db    ? ;
.bss:000000000020B1EE                 db    ? ;
.bss:000000000020B1EF                 db    ? ;
.bss:000000000020B1F0                 db    ? ;
.bss:000000000020B1F1                 db    ? ;
.bss:000000000020B1F2                 db    ? ;
.bss:000000000020B1F3                 db    ? ;
.bss:000000000020B1F4                 db    ? ;
.bss:000000000020B1F5                 db    ? ;
.bss:000000000020B1F6                 db    ? ;
.bss:000000000020B1F7                 db    ? ;
.bss:000000000020B1F8                 db    ? ;
.bss:000000000020B1F9                 db    ? ;
.bss:000000000020B1FA                 db    ? ;
.bss:000000000020B1FB                 db    ? ;
.bss:000000000020B1FC                 db    ? ;
.bss:000000000020B1FD                 db    ? ;
.bss:000000000020B1FE                 db    ? ;
.bss:000000000020B1FF                 db    ? ;
.bss:000000000020B200                 db    ? ;
.bss:000000000020B201                 db    ? ;
.bss:000000000020B202                 db    ? ;
.bss:000000000020B203                 db    ? ;
.bss:000000000020B204                 db    ? ;
.bss:000000000020B205                 db    ? ;
.bss:000000000020B206                 db    ? ;
.bss:000000000020B207                 db    ? ;
.bss:000000000020B208                 db    ? ;
.bss:000000000020B209                 db    ? ;
.bss:000000000020B20A                 db    ? ;
.bss:000000000020B20B                 db    ? ;
.bss:000000000020B20C                 db    ? ;
.bss:000000000020B20D                 db    ? ;
.bss:000000000020B20E                 db    ? ;
.bss:000000000020B20F                 db    ? ;
.bss:000000000020B210                 db    ? ;
.bss:000000000020B211                 db    ? ;
.bss:000000000020B212                 db    ? ;
.bss:000000000020B213                 db    ? ;
.bss:000000000020B214                 db    ? ;
.bss:000000000020B215                 db    ? ;
.bss:000000000020B216                 db    ? ;
.bss:000000000020B217                 db    ? ;
.bss:000000000020B218                 db    ? ;
.bss:000000000020B219                 db    ? ;
.bss:000000000020B21A                 db    ? ;
.bss:000000000020B21B                 db    ? ;
.bss:000000000020B21C                 db    ? ;
.bss:000000000020B21D                 db    ? ;
.bss:000000000020B21E                 db    ? ;
.bss:000000000020B21F                 db    ? ;
.bss:000000000020B220 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020B220                                         ; get_quoting_style↑o ...
.bss:000000000020B230 xmmword_20B230  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020B230                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020B240 xmmword_20B240  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020B240                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020B250 qword_20B250    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020B250                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020B258 ; __locale_t c_locale_cache
.bss:000000000020B258 c_locale_cache  dq ?                    ; DATA XREF: c_strtold+E↑r
.bss:000000000020B258                                         ; c_strtold:loc_5BEA↑r ...
.bss:000000000020B258 _bss            ends
.bss:000000000020B258
.prgend:000000000020B260 ; ===========================================================================
.prgend:000000000020B260
.prgend:000000000020B260 ; Segment type: Zero-length
.prgend:000000000020B260 _prgend         segment byte public '' use64
.prgend:000000000020B260 _end            label byte
.prgend:000000000020B260 _prgend         ends
.prgend:000000000020B260
extern:000000000020B268 ; ===========================================================================
extern:000000000020B268
extern:000000000020B268 ; Segment type: Externs
extern:000000000020B268 ; extern
extern:000000000020B268                 extrn __snprintf_chk:near
extern:000000000020B268                                         ; CODE XREF: ___snprintf_chk↑j
extern:000000000020B268                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:000000000020B270 ; void free(void *ptr)
extern:000000000020B270                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020B270                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020B278 ; void __noreturn abort(void)
extern:000000000020B278                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020B278                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020B280 ; int *_errno_location(void)
extern:000000000020B280                 extrn __errno_location:near
extern:000000000020B280                                         ; CODE XREF: ___errno_location↑j
extern:000000000020B280                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020B288 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020B288                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020B288                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020B290 ; void __noreturn exit(int status)
extern:000000000020B290                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020B290                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020B298 ; char *strcpy(char *dest, const char *src)
extern:000000000020B298                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:000000000020B298                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:000000000020B2A0 ; size_t _fpending(FILE *fp)
extern:000000000020B2A0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020B2A0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020B2A8 ; void clearerr_unlocked(FILE *stream)
extern:000000000020B2A8                 extrn clearerr_unlocked:near
extern:000000000020B2A8                                         ; CODE XREF: _clearerr_unlocked↑j
extern:000000000020B2A8                                         ; DATA XREF: .got:clearerr_unlocked_ptr↑o
extern:000000000020B2B0 ; char *textdomain(const char *domainname)
extern:000000000020B2B0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020B2B0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020B2B8 ; int fclose(FILE *stream)
extern:000000000020B2B8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020B2B8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020B2C0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020B2C0                 extrn bindtextdomain:near
extern:000000000020B2C0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020B2C0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020B2C8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020B2C8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020B2C8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020B2D0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020B2D0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020B2D0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020B2D0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020B2D8 ; size_t strlen(const char *s)
extern:000000000020B2D8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020B2D8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020B2E0                 extrn __stack_chk_fail:near
extern:000000000020B2E0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020B2E0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020B2E8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020B2E8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020B2E8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020B2F0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020B2F0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020B2F0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020B2F8 ; char *strchr(const char *s, int c)
extern:000000000020B2F8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020B2F8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020B300 ; __locale_t newlocale(int category_mask, const char *locale, __locale_t base)
extern:000000000020B300                 extrn newlocale:near    ; CODE XREF: _newlocale↑j
extern:000000000020B300                                         ; DATA XREF: .got:newlocale_ptr↑o
extern:000000000020B308 ; char *strrchr(const char *s, int c)
extern:000000000020B308                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020B308                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020B310 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020B310                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020B310                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020B318 ; void *memset(void *s, int c, size_t n)
extern:000000000020B318                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020B318                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020B320 ; size_t strspn(const char *s, const char *accept)
extern:000000000020B320                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:000000000020B320                                         ; DATA XREF: .got:strspn_ptr↑o
extern:000000000020B328 ; size_t strcspn(const char *s, const char *reject)
extern:000000000020B328                 extrn strcspn:near      ; CODE XREF: _strcspn↑j
extern:000000000020B328                                         ; DATA XREF: .got:strcspn_ptr↑o
extern:000000000020B330 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020B330                 extrn __libc_start_main:near
extern:000000000020B330                                         ; CODE XREF: start+24↑p
extern:000000000020B330                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020B338 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020B338                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020B338                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020B340 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020B340                 extrn fputs_unlocked:near
extern:000000000020B340                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020B340                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020B348 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020B348                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020B348                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020B350 ; int strcmp(const char *s1, const char *s2)
extern:000000000020B350                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020B350                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020B358 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:000000000020B358                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:000000000020B358                                         ; DATA XREF: .got:strtol_ptr↑o
extern:000000000020B360 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020B360                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020B360                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020B368 ; int fileno(FILE *stream)
extern:000000000020B368                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020B368                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020B370 ; __locale_t uselocale(__locale_t dataset)
extern:000000000020B370                 extrn uselocale:near    ; CODE XREF: _uselocale↑j
extern:000000000020B370                                         ; DATA XREF: .got:uselocale_ptr↑o
extern:000000000020B378 ; void *malloc(size_t size)
extern:000000000020B378                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020B378                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020B380 ; int fflush(FILE *stream)
extern:000000000020B380                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020B380                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020B388 ; char *nl_langinfo(nl_item item)
extern:000000000020B388                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020B388                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020B390 ; int _freading(FILE *fp)
extern:000000000020B390                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020B390                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020B398 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020B398                 extrn fwrite_unlocked:near
extern:000000000020B398                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020B398                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020B3A0 ; void *realloc(void *ptr, size_t size)
extern:000000000020B3A0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020B3A0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020B3A8 ; char *setlocale(int category, const char *locale)
extern:000000000020B3A8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020B3A8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020B3B0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020B3B0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020B3B8 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000020B3B8                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000020B3B8                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000020B3C0 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000020B3C0                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000020B3C0                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000020B3C8 ; long double strtold(const char *nptr, char **endptr)
extern:000000000020B3C8                 extrn strtold:near      ; CODE XREF: _strtold↑j
extern:000000000020B3C8                                         ; DATA XREF: .got:strtold_ptr↑o
extern:000000000020B3D0 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020B3D0                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020B3D0                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020B3D8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020B3D8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020B3D8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020B3E0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020B3E0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020B3E0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020B3E8 ; void __noreturn exit(int status)
extern:000000000020B3E8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020B3E8                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020B3F0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020B3F0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020B3F0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020B3F8                 extrn __fprintf_chk:near
extern:000000000020B3F8                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020B3F8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020B400 ; int mbsinit(const mbstate_t *ps)
extern:000000000020B400                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020B400                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020B408 ; int iswprint(wint_t wc)
extern:000000000020B408                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020B408                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020B410 ; int __fastcall __cxa_finalize(void *)
extern:000000000020B410                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020B410                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020B410                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020B418 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020B418                 extrn __ctype_b_loc:near
extern:000000000020B418                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020B418                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020B420                 extrn __sprintf_chk:near
extern:000000000020B420                                         ; CODE XREF: ___sprintf_chk↑j
extern:000000000020B420                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:000000000020B428                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020B428                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020B430                 extrn __gmon_start__:near ; weak
extern:000000000020B430                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020B430                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020B438                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020B438                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020B438
extern:000000000020B438
extern:000000000020B438                 end start
